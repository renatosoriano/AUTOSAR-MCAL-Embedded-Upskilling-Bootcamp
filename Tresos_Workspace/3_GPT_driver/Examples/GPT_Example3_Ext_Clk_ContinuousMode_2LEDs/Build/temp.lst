
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000bc7 	.word	0x00000bc7
  10:	00000bc9 	.word	0x00000bc9
  14:	00000bcb 	.word	0x00000bcb
  18:	00000bcd 	.word	0x00000bcd
	...
  2c:	00000bcf 	.word	0x00000bcf
  30:	00000bd1 	.word	0x00000bd1
  34:	00000000 	.word	0x00000000
  38:	00000bd3 	.word	0x00000bd3
  3c:	00000bd5 	.word	0x00000bd5
  40:	00000bd7 	.word	0x00000bd7
  44:	00000bd7 	.word	0x00000bd7
  48:	00000bd7 	.word	0x00000bd7
  4c:	00000bd7 	.word	0x00000bd7
  50:	00000bd7 	.word	0x00000bd7
  54:	00000bd7 	.word	0x00000bd7
  58:	00000bd7 	.word	0x00000bd7
  5c:	00000bd7 	.word	0x00000bd7
  60:	00000bd7 	.word	0x00000bd7
  64:	00000bd7 	.word	0x00000bd7
  68:	00000bd7 	.word	0x00000bd7
  6c:	00000bd7 	.word	0x00000bd7
  70:	00000bd7 	.word	0x00000bd7
  74:	00000bd7 	.word	0x00000bd7
  78:	00000bd7 	.word	0x00000bd7
  7c:	00000bd7 	.word	0x00000bd7
  80:	00000bd7 	.word	0x00000bd7
  84:	00000bd7 	.word	0x00000bd7
  88:	00000bd7 	.word	0x00000bd7
  8c:	00000bd7 	.word	0x00000bd7
  90:	00000bd7 	.word	0x00000bd7
  94:	00000bd7 	.word	0x00000bd7
  98:	00000bd7 	.word	0x00000bd7
  9c:	00000bd7 	.word	0x00000bd7
  a0:	00000bd7 	.word	0x00000bd7
  a4:	00000bd7 	.word	0x00000bd7
  a8:	00000bd7 	.word	0x00000bd7
  ac:	00000bd7 	.word	0x00000bd7
  b0:	00000bd7 	.word	0x00000bd7
  b4:	00000bd7 	.word	0x00000bd7
  b8:	00000bd7 	.word	0x00000bd7
  bc:	00000bd7 	.word	0x00000bd7
  c0:	00000bd7 	.word	0x00000bd7
  c4:	00000bd7 	.word	0x00000bd7
  c8:	00000bd7 	.word	0x00000bd7
  cc:	00000bd7 	.word	0x00000bd7
  d0:	00000bd7 	.word	0x00000bd7
  d4:	00000bd7 	.word	0x00000bd7
  d8:	00000bd7 	.word	0x00000bd7
  dc:	00000bd7 	.word	0x00000bd7
  e0:	00000bd7 	.word	0x00000bd7
  e4:	00000bd7 	.word	0x00000bd7
  e8:	00000bd7 	.word	0x00000bd7
  ec:	00000bd7 	.word	0x00000bd7
  f0:	00000bd7 	.word	0x00000bd7
  f4:	00000bd7 	.word	0x00000bd7
  f8:	00000bd7 	.word	0x00000bd7
  fc:	00000bd7 	.word	0x00000bd7
 100:	00000bd7 	.word	0x00000bd7
 104:	00000bd7 	.word	0x00000bd7
 108:	00000bd7 	.word	0x00000bd7
 10c:	00000bd7 	.word	0x00000bd7
 110:	00000bd7 	.word	0x00000bd7
 114:	00000bd7 	.word	0x00000bd7
 118:	00000bd7 	.word	0x00000bd7
 11c:	00000bd7 	.word	0x00000bd7
 120:	00000bd7 	.word	0x00000bd7
 124:	00000bd7 	.word	0x00000bd7
 128:	00000bd7 	.word	0x00000bd7
 12c:	00000bd7 	.word	0x00000bd7
 130:	00000bd7 	.word	0x00000bd7
 134:	00000bd7 	.word	0x00000bd7
 138:	00000bd7 	.word	0x00000bd7
 13c:	00000bd7 	.word	0x00000bd7
 140:	00000bd7 	.word	0x00000bd7
 144:	00000bd7 	.word	0x00000bd7
 148:	00000bd7 	.word	0x00000bd7
 14c:	00000bd7 	.word	0x00000bd7
 150:	00000bd7 	.word	0x00000bd7
 154:	00000bd7 	.word	0x00000bd7
 158:	00000bd7 	.word	0x00000bd7
 15c:	00000bd7 	.word	0x00000bd7
 160:	00000bd7 	.word	0x00000bd7
 164:	00000bd7 	.word	0x00000bd7
 168:	00000bd7 	.word	0x00000bd7
 16c:	00000bd7 	.word	0x00000bd7
 170:	00000bd7 	.word	0x00000bd7
 174:	00000bd7 	.word	0x00000bd7
 178:	00000bd7 	.word	0x00000bd7
 17c:	00000bd7 	.word	0x00000bd7
 180:	00000bd7 	.word	0x00000bd7
 184:	00000bd7 	.word	0x00000bd7
 188:	00000bd7 	.word	0x00000bd7
 18c:	00000bd7 	.word	0x00000bd7
 190:	00000bd7 	.word	0x00000bd7
 194:	00000bd7 	.word	0x00000bd7
 198:	00000bd7 	.word	0x00000bd7
 19c:	00000bd7 	.word	0x00000bd7
 1a0:	00000bd7 	.word	0x00000bd7
 1a4:	00000bd7 	.word	0x00000bd7
 1a8:	00000bd7 	.word	0x00000bd7
 1ac:	00000bd7 	.word	0x00000bd7
 1b0:	00000bd7 	.word	0x00000bd7
 1b4:	00000bd7 	.word	0x00000bd7
 1b8:	00000bd7 	.word	0x00000bd7
 1bc:	00000bd7 	.word	0x00000bd7
 1c0:	00000bd7 	.word	0x00000bd7
 1c4:	00000bd7 	.word	0x00000bd7
 1c8:	00000bd7 	.word	0x00000bd7
 1cc:	00000bd7 	.word	0x00000bd7
 1d0:	00000bd7 	.word	0x00000bd7
 1d4:	00000bd7 	.word	0x00000bd7
 1d8:	00000bd7 	.word	0x00000bd7
 1dc:	00000bd7 	.word	0x00000bd7
 1e0:	00000bd7 	.word	0x00000bd7
 1e4:	00000bd7 	.word	0x00000bd7
 1e8:	00000bd7 	.word	0x00000bd7
 1ec:	00000bd7 	.word	0x00000bd7
 1f0:	00000bd7 	.word	0x00000bd7
 1f4:	00000bd7 	.word	0x00000bd7
 1f8:	00000bd7 	.word	0x00000bd7
 1fc:	00000bd7 	.word	0x00000bd7
 200:	00000bd7 	.word	0x00000bd7
 204:	00000bd7 	.word	0x00000bd7
 208:	00000bd7 	.word	0x00000bd7
 20c:	00000bd7 	.word	0x00000bd7
 210:	00000bd7 	.word	0x00000bd7
 214:	00000bd7 	.word	0x00000bd7
 218:	00000bd7 	.word	0x00000bd7
 21c:	00000bd7 	.word	0x00000bd7
 220:	00000bd7 	.word	0x00000bd7
 224:	00000bd7 	.word	0x00000bd7
 228:	00000bd7 	.word	0x00000bd7
 22c:	00000bd7 	.word	0x00000bd7
 230:	00000bd7 	.word	0x00000bd7
 234:	00000bd7 	.word	0x00000bd7
 238:	00000bd7 	.word	0x00000bd7
 23c:	00000bd7 	.word	0x00000bd7
 240:	00000bd7 	.word	0x00000bd7
 244:	00000bd7 	.word	0x00000bd7
 248:	00000bd7 	.word	0x00000bd7
 24c:	00000bd7 	.word	0x00000bd7
 250:	00000bd7 	.word	0x00000bd7
 254:	00000bd7 	.word	0x00000bd7
 258:	00000bd7 	.word	0x00000bd7
 25c:	00000bd7 	.word	0x00000bd7
 260:	00000bd7 	.word	0x00000bd7
 264:	00000bd7 	.word	0x00000bd7
 268:	00000bd7 	.word	0x00000bd7
 26c:	00000bd7 	.word	0x00000bd7
 270:	00000bd7 	.word	0x00000bd7
 274:	00000bd7 	.word	0x00000bd7
 278:	00000bd7 	.word	0x00000bd7
 27c:	00000bd7 	.word	0x00000bd7
 280:	00000bd7 	.word	0x00000bd7
 284:	00000bd7 	.word	0x00000bd7
 288:	00000bd7 	.word	0x00000bd7
 28c:	00000bd7 	.word	0x00000bd7
 290:	00000bd7 	.word	0x00000bd7
 294:	00000bd7 	.word	0x00000bd7
 298:	00000bd7 	.word	0x00000bd7
 29c:	00000bd7 	.word	0x00000bd7
 2a0:	00000bd7 	.word	0x00000bd7
 2a4:	00000bd7 	.word	0x00000bd7
 2a8:	00000bd7 	.word	0x00000bd7
 2ac:	00000bd7 	.word	0x00000bd7
 2b0:	00000bd7 	.word	0x00000bd7
 2b4:	00000bd7 	.word	0x00000bd7
 2b8:	00000bd7 	.word	0x00000bd7
 2bc:	00000bd7 	.word	0x00000bd7
 2c0:	00000bd7 	.word	0x00000bd7
 2c4:	00000bd7 	.word	0x00000bd7
 2c8:	00000bd7 	.word	0x00000bd7
 2cc:	00000bd7 	.word	0x00000bd7
 2d0:	00000bd7 	.word	0x00000bd7
 2d4:	00000bd7 	.word	0x00000bd7
 2d8:	00000bd7 	.word	0x00000bd7
 2dc:	00000bd7 	.word	0x00000bd7
 2e0:	00000bd7 	.word	0x00000bd7
 2e4:	00000bd7 	.word	0x00000bd7
 2e8:	00000bd7 	.word	0x00000bd7
 2ec:	00000bd7 	.word	0x00000bd7
 2f0:	00000bd7 	.word	0x00000bd7
 2f4:	00000bd7 	.word	0x00000bd7
 2f8:	00000bd7 	.word	0x00000bd7
 2fc:	00000bd7 	.word	0x00000bd7
 300:	00000bd7 	.word	0x00000bd7
 304:	00000bd7 	.word	0x00000bd7
 308:	00000bd7 	.word	0x00000bd7
 30c:	00000bd7 	.word	0x00000bd7

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fad7 	bl	a34 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb96 	bl	bbc <startup_go_to_user_mode>
     490:	f000 fa1a 	bl	8c8 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff92c4 	.word	0x1fff92c4

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fae1 	bl	b60 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__BSS_SRAM_SIZE+0x11c>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__BSS_SRAM_SIZE+0x11c>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__BSS_SRAM_SIZE+0x120>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__BSS_SRAM_SIZE+0x120>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__BSS_SRAM_SIZE+0x116>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0x154>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__BSS_SRAM_SIZE+0x94>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__BSS_SRAM_SIZE+0x14c>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__BSS_SRAM_SIZE+0x146>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__BSS_SRAM_SIZE+0x38>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__BSS_SRAM_SIZE+0x142>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__BSS_SRAM_SIZE+0x142>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__BSS_SRAM_SIZE+0x60>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__BSS_SRAM_SIZE+0x13a>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__BSS_SRAM_SIZE+0x13a>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__BSS_SRAM_SIZE+0x128>
     7c4:	d056      	beq.n	874 <__BSS_SRAM_SIZE+0x124>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0x158>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__BSS_SRAM_SIZE+0xe0>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__BSS_SRAM_SIZE+0x13e>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__BSS_SRAM_SIZE+0x13e>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__BSS_SRAM_SIZE+0x10e>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__BSS_SRAM_SIZE+0x136>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__BSS_SRAM_SIZE+0x136>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__BSS_SRAM_SIZE+0x76>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__BSS_SRAM_SIZE+0x76>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__BSS_SRAM_SIZE+0x10e>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__BSS_SRAM_SIZE+0x60>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__BSS_SRAM_SIZE+0xe0>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__BSS_SRAM_SIZE+0x38>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Gpt_TimeoutCallback_0>:
void EcuM_Init( void );

/*This function is gonna be called on ISR from FTM0_CH0_CH1, it is basically a callback
called by FTM_0_CH_0_CH_1_ISR library function*/
void Gpt_TimeoutCallback_0( void )
{
     8b0:	b508      	push	{r3, lr}
    /*here, we just toggle led connected to D0*/
    Dio_FlipChannel( DioConf_DioChannel_D0_BLUE_LED );
     8b2:	2060      	movs	r0, #96	; 0x60
     8b4:	f005 faed 	bl	5e92 <Dio_FlipChannel>
}
     8b8:	bf00      	nop
     8ba:	bd08      	pop	{r3, pc}

000008bc <Gpt_TimeoutCallback_1>:

/*This function is gonna be called on ISR from FTM0_CH0_CH1, it is basically a callback
called by FTM_0_CH_0_CH_1_ISR library function*/
void Gpt_TimeoutCallback_1( void )
{
     8bc:	b508      	push	{r3, lr}
    /*here, we just toggle led connected to D16*/
    Dio_FlipChannel( DioConf_DioChannel_D16_GREEN_LED );
     8be:	2070      	movs	r0, #112	; 0x70
     8c0:	f005 fae7 	bl	5e92 <Dio_FlipChannel>
}
     8c4:	bf00      	nop
     8c6:	bd08      	pop	{r3, pc}

000008c8 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8c8:	b508      	push	{r3, lr}
    EcuM_Init();
     8ca:	f000 f811 	bl	8f0 <EcuM_Init>
    /*Start the timer and set it to Running state with a timeout of 200ms*/
    /*  Counter = ( Timeout * Tfrec ) / Preescler
        Counter = ( 0.200 * (24MHz / 2) ) / 128 = 18,750      */
    Gpt_StartTimer( GptConf_GptChannelConfiguration_GptChannelConfiguration_0, 37500u );
     8ce:	f249 217c 	movw	r1, #37500	; 0x927c
     8d2:	2000      	movs	r0, #0
     8d4:	f006 fe70 	bl	75b8 <Gpt_StartTimer>
    Gpt_StartTimer( GptConf_GptChannelConfiguration_GptChannelConfiguration_1, 37500u );    
     8d8:	f249 217c 	movw	r1, #37500	; 0x927c
     8dc:	2001      	movs	r0, #1
     8de:	f006 fe6b 	bl	75b8 <Gpt_StartTimer>
    
    /*Enable notifications, Gpt_TimeoutCallback will be called on each timeout*/
    Gpt_EnableNotification( GptConf_GptChannelConfiguration_GptChannelConfiguration_0 );
     8e2:	2000      	movs	r0, #0
     8e4:	f006 ff5a 	bl	779c <Gpt_EnableNotification>
    Gpt_EnableNotification( GptConf_GptChannelConfiguration_GptChannelConfiguration_1 );
     8e8:	2001      	movs	r0, #1
     8ea:	f006 ff57 	bl	779c <Gpt_EnableNotification>

    while( 1u )
     8ee:	e7fe      	b.n	8ee <main+0x26>

000008f0 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     8f0:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     8f2:	480a      	ldr	r0, [pc, #40]	; (91c <EcuM_Init+0x2c>)
     8f4:	f004 f98c 	bl	4c10 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     8f8:	2000      	movs	r0, #0
     8fa:	f004 f9dd 	bl	4cb8 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     8fe:	2000      	movs	r0, #0
     900:	f004 f9fe 	bl	4d00 <Mcu_SetMode>
    
    /*Enable and setup interrupts*/
    Platform_Init( NULL_PTR );
     904:	2000      	movs	r0, #0
     906:	f000 faeb 	bl	ee0 <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration, for this case
    ports D0 and D16 are configured as output*/
    Port_Init( &Port_Config );
     90a:	4805      	ldr	r0, [pc, #20]	; (920 <EcuM_Init+0x30>)
     90c:	f004 fd82 	bl	5414 <Port_Init>
    /*Apply Gpt configuration for FTM0 channel 0*/
    Gpt_Init( &Gpt_Config );
     910:	4804      	ldr	r0, [pc, #16]	; (924 <EcuM_Init+0x34>)
     912:	f006 fc23 	bl	715c <Gpt_Init>
}
     916:	bf00      	nop
     918:	bd08      	pop	{r3, pc}
     91a:	bf00      	nop
     91c:	0000c424 	.word	0x0000c424
     920:	0000c590 	.word	0x0000c590
     924:	0000c3f8 	.word	0x0000c3f8

00000928 <Gpt_Ipw_FtmGetTimeElapsed>:
#define GPT_START_SEC_CODE
#include "Gpt_MemMap.h"

#if (FTM_GPT_IP_USED == STD_ON)
static Gpt_ValueType Gpt_Ipw_FtmGetTimeElapsed(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig, Gpt_HwChannelInfoType * pReturnHwChannelInfo)
{
     928:	b500      	push	{lr}
     92a:	b087      	sub	sp, #28
     92c:	9001      	str	r0, [sp, #4]
     92e:	9100      	str	r1, [sp, #0]
    Gpt_ValueType returnValue;
    boolean HasChEvOccurred;

    /* Read compare and counter registers */
    uint32 counterValue = Ftm_Gpt_Ip_GetCntValue(pHwChannelConfig->instance);
     930:	9b01      	ldr	r3, [sp, #4]
     932:	791b      	ldrb	r3, [r3, #4]
     934:	4618      	mov	r0, r3
     936:	f007 f9c5 	bl	7cc4 <Ftm_Gpt_Ip_GetCntValue>
     93a:	9004      	str	r0, [sp, #16]
    uint32 compareValue = Ftm_Gpt_Ip_GetCompareValue(pHwChannelConfig->instance, pHwChannelConfig->channel);
     93c:	9b01      	ldr	r3, [sp, #4]
     93e:	791a      	ldrb	r2, [r3, #4]
     940:	9b01      	ldr	r3, [sp, #4]
     942:	795b      	ldrb	r3, [r3, #5]
     944:	4619      	mov	r1, r3
     946:	4610      	mov	r0, r2
     948:	f007 f9cc 	bl	7ce4 <Ftm_Gpt_Ip_GetCompareValue>
     94c:	9003      	str	r0, [sp, #12]

    pReturnHwChannelInfo->uTargetTime = Ftm_Gpt_Ip_u32TargetValue[pHwChannelConfig->instance][pHwChannelConfig->channel];
     94e:	9b01      	ldr	r3, [sp, #4]
     950:	791b      	ldrb	r3, [r3, #4]
     952:	4618      	mov	r0, r3
     954:	9b01      	ldr	r3, [sp, #4]
     956:	795b      	ldrb	r3, [r3, #5]
     958:	4619      	mov	r1, r3
     95a:	4a23      	ldr	r2, [pc, #140]	; (9e8 <Gpt_Ipw_FtmGetTimeElapsed+0xc0>)
     95c:	00c3      	lsls	r3, r0, #3
     95e:	440b      	add	r3, r1
     960:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     964:	9b00      	ldr	r3, [sp, #0]
     966:	605a      	str	r2, [r3, #4]

    /* Calculate the elapsed time */
    if (counterValue > compareValue)
     968:	9a04      	ldr	r2, [sp, #16]
     96a:	9b03      	ldr	r3, [sp, #12]
     96c:	429a      	cmp	r2, r3
     96e:	d918      	bls.n	9a2 <Gpt_Ipw_FtmGetTimeElapsed+0x7a>
    {
        /* Counter value passed the set-up Target value - might have roll-over */
        if(((FTM_CNT_MAX_VALUE_U32 - counterValue) + compareValue) <= pReturnHwChannelInfo->uTargetTime)
     970:	9a03      	ldr	r2, [sp, #12]
     972:	9b04      	ldr	r3, [sp, #16]
     974:	1ad3      	subs	r3, r2, r3
     976:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
     97a:	33ff      	adds	r3, #255	; 0xff
     97c:	9a00      	ldr	r2, [sp, #0]
     97e:	6852      	ldr	r2, [r2, #4]
     980:	4293      	cmp	r3, r2
     982:	d80a      	bhi.n	99a <Gpt_Ipw_FtmGetTimeElapsed+0x72>
        {
            /* New compare value was read by register read - isr served in time - we have roll-over */
            returnValue =   (Gpt_ValueType)(    (   pReturnHwChannelInfo->uTargetTime - \
     984:	9b00      	ldr	r3, [sp, #0]
     986:	685a      	ldr	r2, [r3, #4]
                                                    ((FTM_CNT_MAX_VALUE_U32 - counterValue) + compareValue) ) + \
     988:	9904      	ldr	r1, [sp, #16]
     98a:	9b03      	ldr	r3, [sp, #12]
     98c:	1acb      	subs	r3, r1, r3
            returnValue =   (Gpt_ValueType)(    (   pReturnHwChannelInfo->uTargetTime - \
     98e:	4413      	add	r3, r2
     990:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
     994:	3bfe      	subs	r3, #254	; 0xfe
     996:	9305      	str	r3, [sp, #20]
     998:	e00a      	b.n	9b0 <Gpt_Ipw_FtmGetTimeElapsed+0x88>
                                                FTM_OVERFLOW_PAD_U32 );
        }
        else
        {
            /* There is an delay in serving ISR or updating u32CompareValue - report last timer time */
            returnValue = (Gpt_ValueType)(pReturnHwChannelInfo->uTargetTime);
     99a:	9b00      	ldr	r3, [sp, #0]
     99c:	685b      	ldr	r3, [r3, #4]
     99e:	9305      	str	r3, [sp, #20]
     9a0:	e006      	b.n	9b0 <Gpt_Ipw_FtmGetTimeElapsed+0x88>
        }
    }
    else
    {
        /* Timer in between ISRs period */
        returnValue = (Gpt_ValueType)(pReturnHwChannelInfo->uTargetTime - (compareValue - counterValue));
     9a2:	9b00      	ldr	r3, [sp, #0]
     9a4:	685a      	ldr	r2, [r3, #4]
     9a6:	9904      	ldr	r1, [sp, #16]
     9a8:	9b03      	ldr	r3, [sp, #12]
     9aa:	1acb      	subs	r3, r1, r3
     9ac:	4413      	add	r3, r2
     9ae:	9305      	str	r3, [sp, #20]
    }

    /* check if channel event has occurred */
    HasChEvOccurred = Ftm_Gpt_Ip_GetChInterruptStatusFlag(pHwChannelConfig->instance, pHwChannelConfig->channel);
     9b0:	9b01      	ldr	r3, [sp, #4]
     9b2:	791a      	ldrb	r2, [r3, #4]
     9b4:	9b01      	ldr	r3, [sp, #4]
     9b6:	795b      	ldrb	r3, [r3, #5]
     9b8:	4619      	mov	r1, r3
     9ba:	4610      	mov	r0, r2
     9bc:	f007 f962 	bl	7c84 <Ftm_Gpt_Ip_GetChInterruptStatusFlag>
     9c0:	4603      	mov	r3, r0
     9c2:	f88d 300b 	strb.w	r3, [sp, #11]

    /*Check interrupt status flag*/
    if (HasChEvOccurred)
     9c6:	f89d 300b 	ldrb.w	r3, [sp, #11]
     9ca:	2b00      	cmp	r3, #0
     9cc:	d003      	beq.n	9d6 <Gpt_Ipw_FtmGetTimeElapsed+0xae>
    {
        /* Channel counter was roll-over */
        pReturnHwChannelInfo->bChannelRollover = TRUE;
     9ce:	9b00      	ldr	r3, [sp, #0]
     9d0:	2201      	movs	r2, #1
     9d2:	701a      	strb	r2, [r3, #0]
     9d4:	e002      	b.n	9dc <Gpt_Ipw_FtmGetTimeElapsed+0xb4>
    }
    else
    {
        /* Channel counter was not rollover */
        pReturnHwChannelInfo->bChannelRollover = FALSE;
     9d6:	9b00      	ldr	r3, [sp, #0]
     9d8:	2200      	movs	r2, #0
     9da:	701a      	strb	r2, [r3, #0]
    }
    return returnValue;
     9dc:	9b05      	ldr	r3, [sp, #20]
}
     9de:	4618      	mov	r0, r3
     9e0:	b007      	add	sp, #28
     9e2:	f85d fb04 	ldr.w	pc, [sp], #4
     9e6:	bf00      	nop
     9e8:	1fff8d38 	.word	0x1fff8d38

000009ec <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     9ec:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9ee:	f3ef 8310 	mrs	r3, PRIMASK
     9f2:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9f4:	4623      	mov	r3, r4
}
     9f6:	4618      	mov	r0, r3
     9f8:	f85d 4b04 	ldr.w	r4, [sp], #4
     9fc:	4770      	bx	lr

000009fe <Gpt_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Gpt_schm_read_msr(void)
{
     9fe:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a00:	f3ef 8310 	mrs	r3, PRIMASK
     a04:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a06:	4623      	mov	r3, r4
}
     a08:	4618      	mov	r0, r3
     a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
     a0e:	4770      	bx	lr

00000a10 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     a10:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a12:	f3ef 8310 	mrs	r3, PRIMASK
     a16:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a18:	4623      	mov	r3, r4
}
     a1a:	4618      	mov	r0, r3
     a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
     a20:	4770      	bx	lr

00000a22 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     a22:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a24:	f3ef 8310 	mrs	r3, PRIMASK
     a28:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a2a:	4623      	mov	r3, r4
}
     a2c:	4618      	mov	r0, r3
     a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
     a32:	4770      	bx	lr

00000a34 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     a34:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     a36:	2300      	movs	r3, #0
     a38:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     a3a:	2300      	movs	r3, #0
     a3c:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     a3e:	2300      	movs	r3, #0
     a40:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     a42:	2300      	movs	r3, #0
     a44:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     a46:	4b44      	ldr	r3, [pc, #272]	; (b58 <init_data_bss+0x124>)
     a48:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     a4a:	4b44      	ldr	r3, [pc, #272]	; (b5c <init_data_bss+0x128>)
     a4c:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     a4e:	9b05      	ldr	r3, [sp, #20]
     a50:	681b      	ldr	r3, [r3, #0]
     a52:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     a54:	9b05      	ldr	r3, [sp, #20]
     a56:	3304      	adds	r3, #4
     a58:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     a5a:	9b05      	ldr	r3, [sp, #20]
     a5c:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     a5e:	2300      	movs	r3, #0
     a60:	9309      	str	r3, [sp, #36]	; 0x24
     a62:	e03d      	b.n	ae0 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     a64:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a66:	4613      	mov	r3, r2
     a68:	005b      	lsls	r3, r3, #1
     a6a:	4413      	add	r3, r2
     a6c:	009b      	lsls	r3, r3, #2
     a6e:	461a      	mov	r2, r3
     a70:	9b03      	ldr	r3, [sp, #12]
     a72:	4413      	add	r3, r2
     a74:	685b      	ldr	r3, [r3, #4]
     a76:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     a78:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a7a:	4613      	mov	r3, r2
     a7c:	005b      	lsls	r3, r3, #1
     a7e:	4413      	add	r3, r2
     a80:	009b      	lsls	r3, r3, #2
     a82:	461a      	mov	r2, r3
     a84:	9b03      	ldr	r3, [sp, #12]
     a86:	4413      	add	r3, r2
     a88:	681b      	ldr	r3, [r3, #0]
     a8a:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a8e:	4613      	mov	r3, r2
     a90:	005b      	lsls	r3, r3, #1
     a92:	4413      	add	r3, r2
     a94:	009b      	lsls	r3, r3, #2
     a96:	461a      	mov	r2, r3
     a98:	9b03      	ldr	r3, [sp, #12]
     a9a:	4413      	add	r3, r2
     a9c:	689b      	ldr	r3, [r3, #8]
     a9e:	4619      	mov	r1, r3
     aa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     aa2:	4613      	mov	r3, r2
     aa4:	005b      	lsls	r3, r3, #1
     aa6:	4413      	add	r3, r2
     aa8:	009b      	lsls	r3, r3, #2
     aaa:	461a      	mov	r2, r3
     aac:	9b03      	ldr	r3, [sp, #12]
     aae:	4413      	add	r3, r2
     ab0:	685b      	ldr	r3, [r3, #4]
     ab2:	1acb      	subs	r3, r1, r3
     ab4:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     ab6:	2300      	movs	r3, #0
     ab8:	9308      	str	r3, [sp, #32]
     aba:	e00a      	b.n	ad2 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     abc:	9a00      	ldr	r2, [sp, #0]
     abe:	9b08      	ldr	r3, [sp, #32]
     ac0:	441a      	add	r2, r3
     ac2:	9901      	ldr	r1, [sp, #4]
     ac4:	9b08      	ldr	r3, [sp, #32]
     ac6:	440b      	add	r3, r1
     ac8:	7812      	ldrb	r2, [r2, #0]
     aca:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     acc:	9b08      	ldr	r3, [sp, #32]
     ace:	3301      	adds	r3, #1
     ad0:	9308      	str	r3, [sp, #32]
     ad2:	9a08      	ldr	r2, [sp, #32]
     ad4:	9b06      	ldr	r3, [sp, #24]
     ad6:	429a      	cmp	r2, r3
     ad8:	d3f0      	bcc.n	abc <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
     adc:	3301      	adds	r3, #1
     ade:	9309      	str	r3, [sp, #36]	; 0x24
     ae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ae2:	9b07      	ldr	r3, [sp, #28]
     ae4:	429a      	cmp	r2, r3
     ae6:	d3bd      	bcc.n	a64 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     ae8:	9b04      	ldr	r3, [sp, #16]
     aea:	681b      	ldr	r3, [r3, #0]
     aec:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     aee:	9b04      	ldr	r3, [sp, #16]
     af0:	3304      	adds	r3, #4
     af2:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     af4:	9b04      	ldr	r3, [sp, #16]
     af6:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     af8:	2300      	movs	r3, #0
     afa:	9309      	str	r3, [sp, #36]	; 0x24
     afc:	e024      	b.n	b48 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b00:	00db      	lsls	r3, r3, #3
     b02:	9a02      	ldr	r2, [sp, #8]
     b04:	4413      	add	r3, r2
     b06:	681b      	ldr	r3, [r3, #0]
     b08:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b0c:	00db      	lsls	r3, r3, #3
     b0e:	9a02      	ldr	r2, [sp, #8]
     b10:	4413      	add	r3, r2
     b12:	685b      	ldr	r3, [r3, #4]
     b14:	4619      	mov	r1, r3
     b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b18:	00db      	lsls	r3, r3, #3
     b1a:	9a02      	ldr	r2, [sp, #8]
     b1c:	4413      	add	r3, r2
     b1e:	681b      	ldr	r3, [r3, #0]
     b20:	1acb      	subs	r3, r1, r3
     b22:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b24:	2300      	movs	r3, #0
     b26:	9308      	str	r3, [sp, #32]
     b28:	e007      	b.n	b3a <init_data_bss+0x106>
        {
            ram[j] = 0U;
     b2a:	9a01      	ldr	r2, [sp, #4]
     b2c:	9b08      	ldr	r3, [sp, #32]
     b2e:	4413      	add	r3, r2
     b30:	2200      	movs	r2, #0
     b32:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b34:	9b08      	ldr	r3, [sp, #32]
     b36:	3301      	adds	r3, #1
     b38:	9308      	str	r3, [sp, #32]
     b3a:	9a08      	ldr	r2, [sp, #32]
     b3c:	9b06      	ldr	r3, [sp, #24]
     b3e:	429a      	cmp	r2, r3
     b40:	d3f3      	bcc.n	b2a <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b44:	3301      	adds	r3, #1
     b46:	9309      	str	r3, [sp, #36]	; 0x24
     b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b4a:	9b07      	ldr	r3, [sp, #28]
     b4c:	429a      	cmp	r2, r3
     b4e:	d3d6      	bcc.n	afe <init_data_bss+0xca>
        }
    }
}
     b50:	bf00      	nop
     b52:	bf00      	nop
     b54:	b00a      	add	sp, #40	; 0x28
     b56:	4770      	bx	lr
     b58:	0000c5dc 	.word	0x0000c5dc
     b5c:	0000c5f8 	.word	0x0000c5f8

00000b60 <sys_m4_cache_init>:
{
     b60:	b084      	sub	sp, #16
     b62:	4603      	mov	r3, r0
     b64:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     b68:	2300      	movs	r3, #0
     b6a:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     b6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b72:	2b00      	cmp	r3, #0
     b74:	d118      	bne.n	ba8 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     b76:	4b10      	ldr	r3, [pc, #64]	; (bb8 <sys_m4_cache_init+0x58>)
     b78:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     b7c:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     b7e:	4b0e      	ldr	r3, [pc, #56]	; (bb8 <sys_m4_cache_init+0x58>)
     b80:	681b      	ldr	r3, [r3, #0]
     b82:	4a0d      	ldr	r2, [pc, #52]	; (bb8 <sys_m4_cache_init+0x58>)
     b84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b88:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     b8a:	bf00      	nop
     b8c:	4b0a      	ldr	r3, [pc, #40]	; (bb8 <sys_m4_cache_init+0x58>)
     b8e:	681b      	ldr	r3, [r3, #0]
     b90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     b94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     b98:	d0f8      	beq.n	b8c <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     b9a:	4b07      	ldr	r3, [pc, #28]	; (bb8 <sys_m4_cache_init+0x58>)
     b9c:	681b      	ldr	r3, [r3, #0]
     b9e:	4a06      	ldr	r2, [pc, #24]	; (bb8 <sys_m4_cache_init+0x58>)
     ba0:	f043 0301 	orr.w	r3, r3, #1
     ba4:	6013      	str	r3, [r2, #0]
     ba6:	e002      	b.n	bae <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     ba8:	2301      	movs	r3, #1
     baa:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     bae:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     bb2:	4618      	mov	r0, r3
     bb4:	b004      	add	sp, #16
     bb6:	4770      	bx	lr
     bb8:	e0082000 	.word	0xe0082000

00000bbc <startup_go_to_user_mode>:
}
     bbc:	bf00      	nop
     bbe:	4770      	bx	lr

00000bc0 <Sys_GetCoreID>:
    return 0U;
     bc0:	2300      	movs	r3, #0
}
     bc2:	4618      	mov	r0, r3
     bc4:	4770      	bx	lr

00000bc6 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     bc6:	e7fe      	b.n	bc6 <HardFault_Handler>

00000bc8 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     bc8:	e7fe      	b.n	bc8 <MemManage_Handler>

00000bca <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     bca:	e7fe      	b.n	bca <BusFault_Handler>

00000bcc <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     bcc:	e7fe      	b.n	bcc <UsageFault_Handler>

00000bce <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     bce:	e7fe      	b.n	bce <SVC_Handler>

00000bd0 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     bd0:	e7fe      	b.n	bd0 <DebugMon_Handler>

00000bd2 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     bd2:	e7fe      	b.n	bd2 <PendSV_Handler>

00000bd4 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     bd4:	e7fe      	b.n	bd4 <SysTick_Handler>

00000bd6 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     bd6:	e7fe      	b.n	bd6 <undefined_handler>

00000bd8 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     bd8:	b086      	sub	sp, #24
     bda:	9003      	str	r0, [sp, #12]
     bdc:	9102      	str	r1, [sp, #8]
     bde:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
     be0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     be4:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
     be8:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
     bea:	9b01      	ldr	r3, [sp, #4]
     bec:	2b00      	cmp	r3, #0
     bee:	d007      	beq.n	c00 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
     bf0:	9b03      	ldr	r3, [sp, #12]
     bf2:	3310      	adds	r3, #16
     bf4:	009b      	lsls	r3, r3, #2
     bf6:	9a05      	ldr	r2, [sp, #20]
     bf8:	4413      	add	r3, r2
     bfa:	681a      	ldr	r2, [r3, #0]
     bfc:	9b01      	ldr	r3, [sp, #4]
     bfe:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
     c00:	9b03      	ldr	r3, [sp, #12]
     c02:	3310      	adds	r3, #16
     c04:	009b      	lsls	r3, r3, #2
     c06:	9a05      	ldr	r2, [sp, #20]
     c08:	4413      	add	r3, r2
     c0a:	9a02      	ldr	r2, [sp, #8]
     c0c:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
     c0e:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
     c12:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
     c16:	bf00      	nop
     c18:	b006      	add	sp, #24
     c1a:	4770      	bx	lr

00000c1c <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
     c1c:	b082      	sub	sp, #8
     c1e:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     c20:	9b01      	ldr	r3, [sp, #4]
     c22:	f003 021f 	and.w	r2, r3, #31
     c26:	4905      	ldr	r1, [pc, #20]	; (c3c <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
     c28:	9b01      	ldr	r3, [sp, #4]
     c2a:	095b      	lsrs	r3, r3, #5
     c2c:	2001      	movs	r0, #1
     c2e:	fa00 f202 	lsl.w	r2, r0, r2
     c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
     c36:	bf00      	nop
     c38:	b002      	add	sp, #8
     c3a:	4770      	bx	lr
     c3c:	e000e100 	.word	0xe000e100

00000c40 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
     c40:	b082      	sub	sp, #8
     c42:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     c44:	9b01      	ldr	r3, [sp, #4]
     c46:	f003 021f 	and.w	r2, r3, #31
     c4a:	4906      	ldr	r1, [pc, #24]	; (c64 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
     c4c:	9b01      	ldr	r3, [sp, #4]
     c4e:	095b      	lsrs	r3, r3, #5
     c50:	2001      	movs	r0, #1
     c52:	fa00 f202 	lsl.w	r2, r0, r2
     c56:	3320      	adds	r3, #32
     c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
     c5c:	bf00      	nop
     c5e:	b002      	add	sp, #8
     c60:	4770      	bx	lr
     c62:	bf00      	nop
     c64:	e000e100 	.word	0xe000e100

00000c68 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     c68:	b084      	sub	sp, #16
     c6a:	9001      	str	r0, [sp, #4]
     c6c:	460b      	mov	r3, r1
     c6e:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
     c72:	2304      	movs	r3, #4
     c74:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
     c78:	f89d 2003 	ldrb.w	r2, [sp, #3]
     c7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
     c80:	fa02 f103 	lsl.w	r1, r2, r3
     c84:	4a04      	ldr	r2, [pc, #16]	; (c98 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
     c86:	9b01      	ldr	r3, [sp, #4]
     c88:	b2c9      	uxtb	r1, r1
     c8a:	4413      	add	r3, r2
     c8c:	460a      	mov	r2, r1
     c8e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
     c92:	bf00      	nop
     c94:	b004      	add	sp, #16
     c96:	4770      	bx	lr
     c98:	e000e100 	.word	0xe000e100

00000c9c <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
     c9c:	b084      	sub	sp, #16
     c9e:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
     ca0:	2304      	movs	r3, #4
     ca2:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
     ca6:	4a09      	ldr	r2, [pc, #36]	; (ccc <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
     ca8:	9b01      	ldr	r3, [sp, #4]
     caa:	4413      	add	r3, r2
     cac:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
     cb0:	b2db      	uxtb	r3, r3
     cb2:	461a      	mov	r2, r3
     cb4:	f89d 300f 	ldrb.w	r3, [sp, #15]
     cb8:	fa42 f303 	asr.w	r3, r2, r3
     cbc:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
     cc0:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     cc4:	4618      	mov	r0, r3
     cc6:	b004      	add	sp, #16
     cc8:	4770      	bx	lr
     cca:	bf00      	nop
     ccc:	e000e100 	.word	0xe000e100

00000cd0 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
     cd0:	b082      	sub	sp, #8
     cd2:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     cd4:	9b01      	ldr	r3, [sp, #4]
     cd6:	f003 021f 	and.w	r2, r3, #31
     cda:	4906      	ldr	r1, [pc, #24]	; (cf4 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
     cdc:	9b01      	ldr	r3, [sp, #4]
     cde:	095b      	lsrs	r3, r3, #5
     ce0:	2001      	movs	r0, #1
     ce2:	fa00 f202 	lsl.w	r2, r0, r2
     ce6:	3360      	adds	r3, #96	; 0x60
     ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
     cec:	bf00      	nop
     cee:	b002      	add	sp, #8
     cf0:	4770      	bx	lr
     cf2:	bf00      	nop
     cf4:	e000e100 	.word	0xe000e100

00000cf8 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
     cf8:	b500      	push	{lr}
     cfa:	b085      	sub	sp, #20
     cfc:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     cfe:	2300      	movs	r3, #0
     d00:	9303      	str	r3, [sp, #12]
     d02:	e05d      	b.n	dc0 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     d04:	9b01      	ldr	r3, [sp, #4]
     d06:	6859      	ldr	r1, [r3, #4]
     d08:	9a03      	ldr	r2, [sp, #12]
     d0a:	4613      	mov	r3, r2
     d0c:	005b      	lsls	r3, r3, #1
     d0e:	4413      	add	r3, r2
     d10:	009b      	lsls	r3, r3, #2
     d12:	440b      	add	r3, r1
     d14:	681b      	ldr	r3, [r3, #0]
     d16:	4618      	mov	r0, r3
     d18:	f000 f899 	bl	e4e <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d1c:	9b01      	ldr	r3, [sp, #4]
     d1e:	6859      	ldr	r1, [r3, #4]
     d20:	9a03      	ldr	r2, [sp, #12]
     d22:	4613      	mov	r3, r2
     d24:	005b      	lsls	r3, r3, #1
     d26:	4413      	add	r3, r2
     d28:	009b      	lsls	r3, r3, #2
     d2a:	440b      	add	r3, r1
     d2c:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
     d2e:	9b01      	ldr	r3, [sp, #4]
     d30:	6859      	ldr	r1, [r3, #4]
     d32:	9a03      	ldr	r2, [sp, #12]
     d34:	4613      	mov	r3, r2
     d36:	005b      	lsls	r3, r3, #1
     d38:	4413      	add	r3, r2
     d3a:	009b      	lsls	r3, r3, #2
     d3c:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d3e:	795b      	ldrb	r3, [r3, #5]
     d40:	4619      	mov	r1, r3
     d42:	f000 f869 	bl	e18 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d46:	9b01      	ldr	r3, [sp, #4]
     d48:	6859      	ldr	r1, [r3, #4]
     d4a:	9a03      	ldr	r2, [sp, #12]
     d4c:	4613      	mov	r3, r2
     d4e:	005b      	lsls	r3, r3, #1
     d50:	4413      	add	r3, r2
     d52:	009b      	lsls	r3, r3, #2
     d54:	440b      	add	r3, r1
     d56:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
     d58:	9b01      	ldr	r3, [sp, #4]
     d5a:	6859      	ldr	r1, [r3, #4]
     d5c:	9a03      	ldr	r2, [sp, #12]
     d5e:	4613      	mov	r3, r2
     d60:	005b      	lsls	r3, r3, #1
     d62:	4413      	add	r3, r2
     d64:	009b      	lsls	r3, r3, #2
     d66:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d68:	689b      	ldr	r3, [r3, #8]
     d6a:	2200      	movs	r2, #0
     d6c:	4619      	mov	r1, r3
     d6e:	f000 f831 	bl	dd4 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
     d72:	9b01      	ldr	r3, [sp, #4]
     d74:	6859      	ldr	r1, [r3, #4]
     d76:	9a03      	ldr	r2, [sp, #12]
     d78:	4613      	mov	r3, r2
     d7a:	005b      	lsls	r3, r3, #1
     d7c:	4413      	add	r3, r2
     d7e:	009b      	lsls	r3, r3, #2
     d80:	440b      	add	r3, r1
     d82:	791b      	ldrb	r3, [r3, #4]
     d84:	2b00      	cmp	r3, #0
     d86:	d00c      	beq.n	da2 <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     d88:	9b01      	ldr	r3, [sp, #4]
     d8a:	6859      	ldr	r1, [r3, #4]
     d8c:	9a03      	ldr	r2, [sp, #12]
     d8e:	4613      	mov	r3, r2
     d90:	005b      	lsls	r3, r3, #1
     d92:	4413      	add	r3, r2
     d94:	009b      	lsls	r3, r3, #2
     d96:	440b      	add	r3, r1
     d98:	681b      	ldr	r3, [r3, #0]
     d9a:	4618      	mov	r0, r3
     d9c:	f000 f828 	bl	df0 <IntCtrl_Ip_EnableIrq>
     da0:	e00b      	b.n	dba <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     da2:	9b01      	ldr	r3, [sp, #4]
     da4:	6859      	ldr	r1, [r3, #4]
     da6:	9a03      	ldr	r2, [sp, #12]
     da8:	4613      	mov	r3, r2
     daa:	005b      	lsls	r3, r3, #1
     dac:	4413      	add	r3, r2
     dae:	009b      	lsls	r3, r3, #2
     db0:	440b      	add	r3, r1
     db2:	681b      	ldr	r3, [r3, #0]
     db4:	4618      	mov	r0, r3
     db6:	f000 f825 	bl	e04 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     dba:	9b03      	ldr	r3, [sp, #12]
     dbc:	3301      	adds	r3, #1
     dbe:	9303      	str	r3, [sp, #12]
     dc0:	9b01      	ldr	r3, [sp, #4]
     dc2:	681b      	ldr	r3, [r3, #0]
     dc4:	9a03      	ldr	r2, [sp, #12]
     dc6:	429a      	cmp	r2, r3
     dc8:	d39c      	bcc.n	d04 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
     dca:	2300      	movs	r3, #0
}
     dcc:	4618      	mov	r0, r3
     dce:	b005      	add	sp, #20
     dd0:	f85d fb04 	ldr.w	pc, [sp], #4

00000dd4 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     dd4:	b500      	push	{lr}
     dd6:	b085      	sub	sp, #20
     dd8:	9003      	str	r0, [sp, #12]
     dda:	9102      	str	r1, [sp, #8]
     ddc:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
     dde:	9a01      	ldr	r2, [sp, #4]
     de0:	9902      	ldr	r1, [sp, #8]
     de2:	9803      	ldr	r0, [sp, #12]
     de4:	f7ff fef8 	bl	bd8 <IntCtrl_Ip_InstallHandlerPrivileged>
}
     de8:	bf00      	nop
     dea:	b005      	add	sp, #20
     dec:	f85d fb04 	ldr.w	pc, [sp], #4

00000df0 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
     df0:	b500      	push	{lr}
     df2:	b083      	sub	sp, #12
     df4:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
     df6:	9801      	ldr	r0, [sp, #4]
     df8:	f7ff ff10 	bl	c1c <IntCtrl_Ip_EnableIrqPrivileged>
}
     dfc:	bf00      	nop
     dfe:	b003      	add	sp, #12
     e00:	f85d fb04 	ldr.w	pc, [sp], #4

00000e04 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
     e04:	b500      	push	{lr}
     e06:	b083      	sub	sp, #12
     e08:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
     e0a:	9801      	ldr	r0, [sp, #4]
     e0c:	f7ff ff18 	bl	c40 <IntCtrl_Ip_DisableIrqPrivileged>
}
     e10:	bf00      	nop
     e12:	b003      	add	sp, #12
     e14:	f85d fb04 	ldr.w	pc, [sp], #4

00000e18 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     e18:	b500      	push	{lr}
     e1a:	b083      	sub	sp, #12
     e1c:	9001      	str	r0, [sp, #4]
     e1e:	460b      	mov	r3, r1
     e20:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
     e24:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e28:	4619      	mov	r1, r3
     e2a:	9801      	ldr	r0, [sp, #4]
     e2c:	f7ff ff1c 	bl	c68 <IntCtrl_Ip_SetPriorityPrivileged>
}
     e30:	bf00      	nop
     e32:	b003      	add	sp, #12
     e34:	f85d fb04 	ldr.w	pc, [sp], #4

00000e38 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
     e38:	b500      	push	{lr}
     e3a:	b083      	sub	sp, #12
     e3c:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
     e3e:	9801      	ldr	r0, [sp, #4]
     e40:	f7ff ff2c 	bl	c9c <IntCtrl_Ip_GetPriorityPrivileged>
     e44:	4603      	mov	r3, r0
}
     e46:	4618      	mov	r0, r3
     e48:	b003      	add	sp, #12
     e4a:	f85d fb04 	ldr.w	pc, [sp], #4

00000e4e <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
     e4e:	b500      	push	{lr}
     e50:	b083      	sub	sp, #12
     e52:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
     e54:	9801      	ldr	r0, [sp, #4]
     e56:	f7ff ff3b 	bl	cd0 <IntCtrl_Ip_ClearPendingPrivileged>
}
     e5a:	bf00      	nop
     e5c:	b003      	add	sp, #12
     e5e:	f85d fb04 	ldr.w	pc, [sp], #4
     e62:	bf00      	nop

00000e64 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
     e64:	b500      	push	{lr}
     e66:	b083      	sub	sp, #12
     e68:	9001      	str	r0, [sp, #4]
     e6a:	460b      	mov	r3, r1
     e6c:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
     e70:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e74:	2b00      	cmp	r3, #0
     e76:	d003      	beq.n	e80 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
     e78:	9801      	ldr	r0, [sp, #4]
     e7a:	f7ff ffb9 	bl	df0 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
     e7e:	e002      	b.n	e86 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
     e80:	9801      	ldr	r0, [sp, #4]
     e82:	f7ff ffbf 	bl	e04 <IntCtrl_Ip_DisableIrq>
}
     e86:	bf00      	nop
     e88:	b003      	add	sp, #12
     e8a:	f85d fb04 	ldr.w	pc, [sp], #4

00000e8e <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     e8e:	b500      	push	{lr}
     e90:	b083      	sub	sp, #12
     e92:	9001      	str	r0, [sp, #4]
     e94:	460b      	mov	r3, r1
     e96:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
     e9a:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e9e:	4619      	mov	r1, r3
     ea0:	9801      	ldr	r0, [sp, #4]
     ea2:	f7ff ffb9 	bl	e18 <IntCtrl_Ip_SetPriority>
}
     ea6:	bf00      	nop
     ea8:	b003      	add	sp, #12
     eaa:	f85d fb04 	ldr.w	pc, [sp], #4

00000eae <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
     eae:	b500      	push	{lr}
     eb0:	b083      	sub	sp, #12
     eb2:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
     eb4:	9801      	ldr	r0, [sp, #4]
     eb6:	f7ff ffbf 	bl	e38 <IntCtrl_Ip_GetPriority>
     eba:	4603      	mov	r3, r0
}
     ebc:	4618      	mov	r0, r3
     ebe:	b003      	add	sp, #12
     ec0:	f85d fb04 	ldr.w	pc, [sp], #4

00000ec4 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     ec4:	b500      	push	{lr}
     ec6:	b085      	sub	sp, #20
     ec8:	9003      	str	r0, [sp, #12]
     eca:	9102      	str	r1, [sp, #8]
     ecc:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
     ece:	9a01      	ldr	r2, [sp, #4]
     ed0:	9902      	ldr	r1, [sp, #8]
     ed2:	9803      	ldr	r0, [sp, #12]
     ed4:	f7ff ff7e 	bl	dd4 <IntCtrl_Ip_InstallHandler>
}
     ed8:	bf00      	nop
     eda:	b005      	add	sp, #20
     edc:	f85d fb04 	ldr.w	pc, [sp], #4

00000ee0 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
     ee0:	b500      	push	{lr}
     ee2:	b085      	sub	sp, #20
     ee4:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
     ee6:	2300      	movs	r3, #0
     ee8:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
     eec:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ef0:	4a05      	ldr	r2, [pc, #20]	; (f08 <Platform_Init+0x28>)
     ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     ef6:	681b      	ldr	r3, [r3, #0]
     ef8:	4618      	mov	r0, r3
     efa:	f000 f8c7 	bl	108c <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
     efe:	bf00      	nop
     f00:	b005      	add	sp, #20
     f02:	f85d fb04 	ldr.w	pc, [sp], #4
     f06:	bf00      	nop
     f08:	0000c450 	.word	0x0000c450

00000f0c <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
     f0c:	b500      	push	{lr}
     f0e:	b085      	sub	sp, #20
     f10:	9001      	str	r0, [sp, #4]
     f12:	460b      	mov	r3, r1
     f14:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f18:	2300      	movs	r3, #0
     f1a:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
     f1e:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f22:	4619      	mov	r1, r3
     f24:	9801      	ldr	r0, [sp, #4]
     f26:	f7ff ff9d 	bl	e64 <Platform_Ipw_SetIrq>
    }
    return RetValue;
     f2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f2e:	4618      	mov	r0, r3
     f30:	b005      	add	sp, #20
     f32:	f85d fb04 	ldr.w	pc, [sp], #4

00000f36 <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     f36:	b500      	push	{lr}
     f38:	b085      	sub	sp, #20
     f3a:	9001      	str	r0, [sp, #4]
     f3c:	460b      	mov	r3, r1
     f3e:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f42:	2300      	movs	r3, #0
     f44:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
     f48:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f4c:	4619      	mov	r1, r3
     f4e:	9801      	ldr	r0, [sp, #4]
     f50:	f7ff ff9d 	bl	e8e <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
     f54:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f58:	4618      	mov	r0, r3
     f5a:	b005      	add	sp, #20
     f5c:	f85d fb04 	ldr.w	pc, [sp], #4

00000f60 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
     f60:	b500      	push	{lr}
     f62:	b085      	sub	sp, #20
     f64:	9001      	str	r0, [sp, #4]
     f66:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f68:	2300      	movs	r3, #0
     f6a:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
     f6e:	9801      	ldr	r0, [sp, #4]
     f70:	f7ff ff9d 	bl	eae <Platform_Ipw_GetIrqPriority>
     f74:	4603      	mov	r3, r0
     f76:	461a      	mov	r2, r3
     f78:	9b00      	ldr	r3, [sp, #0]
     f7a:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
     f7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f80:	4618      	mov	r0, r3
     f82:	b005      	add	sp, #20
     f84:	f85d fb04 	ldr.w	pc, [sp], #4

00000f88 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
     f88:	b500      	push	{lr}
     f8a:	b087      	sub	sp, #28
     f8c:	9003      	str	r0, [sp, #12]
     f8e:	9102      	str	r1, [sp, #8]
     f90:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f92:	2300      	movs	r3, #0
     f94:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
     f98:	9a01      	ldr	r2, [sp, #4]
     f9a:	9902      	ldr	r1, [sp, #8]
     f9c:	9803      	ldr	r0, [sp, #12]
     f9e:	f7ff ff91 	bl	ec4 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
     fa2:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
     fa6:	4618      	mov	r0, r3
     fa8:	b007      	add	sp, #28
     faa:	f85d fb04 	ldr.w	pc, [sp], #4
     fae:	bf00      	nop

00000fb0 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
     fb0:	b500      	push	{lr}
     fb2:	b085      	sub	sp, #20
     fb4:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     fb6:	2300      	movs	r3, #0
     fb8:	9303      	str	r3, [sp, #12]
     fba:	e05d      	b.n	1078 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     fbc:	9b01      	ldr	r3, [sp, #4]
     fbe:	6859      	ldr	r1, [r3, #4]
     fc0:	9a03      	ldr	r2, [sp, #12]
     fc2:	4613      	mov	r3, r2
     fc4:	005b      	lsls	r3, r3, #1
     fc6:	4413      	add	r3, r2
     fc8:	009b      	lsls	r3, r3, #2
     fca:	440b      	add	r3, r1
     fcc:	681b      	ldr	r3, [r3, #0]
     fce:	4618      	mov	r0, r3
     fd0:	f7ff ff3d 	bl	e4e <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     fd4:	9b01      	ldr	r3, [sp, #4]
     fd6:	6859      	ldr	r1, [r3, #4]
     fd8:	9a03      	ldr	r2, [sp, #12]
     fda:	4613      	mov	r3, r2
     fdc:	005b      	lsls	r3, r3, #1
     fde:	4413      	add	r3, r2
     fe0:	009b      	lsls	r3, r3, #2
     fe2:	440b      	add	r3, r1
     fe4:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
     fe6:	9b01      	ldr	r3, [sp, #4]
     fe8:	6859      	ldr	r1, [r3, #4]
     fea:	9a03      	ldr	r2, [sp, #12]
     fec:	4613      	mov	r3, r2
     fee:	005b      	lsls	r3, r3, #1
     ff0:	4413      	add	r3, r2
     ff2:	009b      	lsls	r3, r3, #2
     ff4:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     ff6:	795b      	ldrb	r3, [r3, #5]
     ff8:	4619      	mov	r1, r3
     ffa:	f7ff ff0d 	bl	e18 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     ffe:	9b01      	ldr	r3, [sp, #4]
    1000:	6859      	ldr	r1, [r3, #4]
    1002:	9a03      	ldr	r2, [sp, #12]
    1004:	4613      	mov	r3, r2
    1006:	005b      	lsls	r3, r3, #1
    1008:	4413      	add	r3, r2
    100a:	009b      	lsls	r3, r3, #2
    100c:	440b      	add	r3, r1
    100e:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1010:	9b01      	ldr	r3, [sp, #4]
    1012:	6859      	ldr	r1, [r3, #4]
    1014:	9a03      	ldr	r2, [sp, #12]
    1016:	4613      	mov	r3, r2
    1018:	005b      	lsls	r3, r3, #1
    101a:	4413      	add	r3, r2
    101c:	009b      	lsls	r3, r3, #2
    101e:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1020:	689b      	ldr	r3, [r3, #8]
    1022:	2200      	movs	r2, #0
    1024:	4619      	mov	r1, r3
    1026:	f7ff fed5 	bl	dd4 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    102a:	9b01      	ldr	r3, [sp, #4]
    102c:	6859      	ldr	r1, [r3, #4]
    102e:	9a03      	ldr	r2, [sp, #12]
    1030:	4613      	mov	r3, r2
    1032:	005b      	lsls	r3, r3, #1
    1034:	4413      	add	r3, r2
    1036:	009b      	lsls	r3, r3, #2
    1038:	440b      	add	r3, r1
    103a:	791b      	ldrb	r3, [r3, #4]
    103c:	2b00      	cmp	r3, #0
    103e:	d00c      	beq.n	105a <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1040:	9b01      	ldr	r3, [sp, #4]
    1042:	6859      	ldr	r1, [r3, #4]
    1044:	9a03      	ldr	r2, [sp, #12]
    1046:	4613      	mov	r3, r2
    1048:	005b      	lsls	r3, r3, #1
    104a:	4413      	add	r3, r2
    104c:	009b      	lsls	r3, r3, #2
    104e:	440b      	add	r3, r1
    1050:	681b      	ldr	r3, [r3, #0]
    1052:	4618      	mov	r0, r3
    1054:	f7ff fecc 	bl	df0 <IntCtrl_Ip_EnableIrq>
    1058:	e00b      	b.n	1072 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    105a:	9b01      	ldr	r3, [sp, #4]
    105c:	6859      	ldr	r1, [r3, #4]
    105e:	9a03      	ldr	r2, [sp, #12]
    1060:	4613      	mov	r3, r2
    1062:	005b      	lsls	r3, r3, #1
    1064:	4413      	add	r3, r2
    1066:	009b      	lsls	r3, r3, #2
    1068:	440b      	add	r3, r1
    106a:	681b      	ldr	r3, [r3, #0]
    106c:	4618      	mov	r0, r3
    106e:	f7ff fec9 	bl	e04 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1072:	9b03      	ldr	r3, [sp, #12]
    1074:	3301      	adds	r3, #1
    1076:	9303      	str	r3, [sp, #12]
    1078:	9b01      	ldr	r3, [sp, #4]
    107a:	681b      	ldr	r3, [r3, #0]
    107c:	9a03      	ldr	r2, [sp, #12]
    107e:	429a      	cmp	r2, r3
    1080:	d39c      	bcc.n	fbc <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1082:	2300      	movs	r3, #0
}
    1084:	4618      	mov	r0, r3
    1086:	b005      	add	sp, #20
    1088:	f85d fb04 	ldr.w	pc, [sp], #4

0000108c <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    108c:	b500      	push	{lr}
    108e:	b085      	sub	sp, #20
    1090:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1092:	2300      	movs	r3, #0
    1094:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1098:	9b01      	ldr	r3, [sp, #4]
    109a:	681b      	ldr	r3, [r3, #0]
    109c:	2b00      	cmp	r3, #0
    109e:	d007      	beq.n	10b0 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    10a0:	9b01      	ldr	r3, [sp, #4]
    10a2:	681b      	ldr	r3, [r3, #0]
    10a4:	4618      	mov	r0, r3
    10a6:	f7ff ff83 	bl	fb0 <Platform_Ipw_InitIntCtrl>
    10aa:	4603      	mov	r3, r0
    10ac:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    10b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    10b4:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    10b6:	bf00      	nop
    10b8:	b005      	add	sp, #20
    10ba:	f85d fb04 	ldr.w	pc, [sp], #4

000010be <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    10be:	2300      	movs	r3, #0
}
    10c0:	4618      	mov	r0, r3
    10c2:	4770      	bx	lr

000010c4 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    10c4:	b082      	sub	sp, #8
    10c6:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    10c8:	2301      	movs	r3, #1
}
    10ca:	4618      	mov	r0, r3
    10cc:	b002      	add	sp, #8
    10ce:	4770      	bx	lr

000010d0 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    10d0:	b082      	sub	sp, #8
    10d2:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    10d4:	bf00      	nop
    10d6:	b002      	add	sp, #8
    10d8:	4770      	bx	lr

000010da <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    10da:	b082      	sub	sp, #8
    10dc:	9001      	str	r0, [sp, #4]
    return Micros;
    10de:	9b01      	ldr	r3, [sp, #4]
}
    10e0:	4618      	mov	r0, r3
    10e2:	b002      	add	sp, #8
    10e4:	4770      	bx	lr

000010e6 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    10e6:	b500      	push	{lr}
    10e8:	b083      	sub	sp, #12
    10ea:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    10ec:	f000 f86c 	bl	11c8 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    10f0:	bf00      	nop
    10f2:	b003      	add	sp, #12
    10f4:	f85d fb04 	ldr.w	pc, [sp], #4

000010f8 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    10f8:	b500      	push	{lr}
    10fa:	b085      	sub	sp, #20
    10fc:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    10fe:	2300      	movs	r3, #0
    1100:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1102:	9b01      	ldr	r3, [sp, #4]
    1104:	2b00      	cmp	r3, #0
    1106:	d003      	beq.n	1110 <OsIf_GetCounter+0x18>
    1108:	9b01      	ldr	r3, [sp, #4]
    110a:	2b01      	cmp	r3, #1
    110c:	d004      	beq.n	1118 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    110e:	e007      	b.n	1120 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1110:	f7ff ffd5 	bl	10be <OsIf_Timer_Dummy_GetCounter>
    1114:	9003      	str	r0, [sp, #12]
            break;
    1116:	e003      	b.n	1120 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1118:	f000 f872 	bl	1200 <OsIf_Timer_System_GetCounter>
    111c:	9003      	str	r0, [sp, #12]
            break;
    111e:	bf00      	nop
    }

    return Value;
    1120:	9b03      	ldr	r3, [sp, #12]
}
    1122:	4618      	mov	r0, r3
    1124:	b005      	add	sp, #20
    1126:	f85d fb04 	ldr.w	pc, [sp], #4

0000112a <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    112a:	b500      	push	{lr}
    112c:	b085      	sub	sp, #20
    112e:	9001      	str	r0, [sp, #4]
    1130:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1132:	2300      	movs	r3, #0
    1134:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1136:	9b00      	ldr	r3, [sp, #0]
    1138:	2b00      	cmp	r3, #0
    113a:	d003      	beq.n	1144 <OsIf_GetElapsed+0x1a>
    113c:	9b00      	ldr	r3, [sp, #0]
    113e:	2b01      	cmp	r3, #1
    1140:	d005      	beq.n	114e <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1142:	e009      	b.n	1158 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1144:	9801      	ldr	r0, [sp, #4]
    1146:	f7ff ffbd 	bl	10c4 <OsIf_Timer_Dummy_GetElapsed>
    114a:	9003      	str	r0, [sp, #12]
            break;
    114c:	e004      	b.n	1158 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    114e:	9801      	ldr	r0, [sp, #4]
    1150:	f000 f864 	bl	121c <OsIf_Timer_System_GetElapsed>
    1154:	9003      	str	r0, [sp, #12]
            break;
    1156:	bf00      	nop
    }

    return Value;
    1158:	9b03      	ldr	r3, [sp, #12]
}
    115a:	4618      	mov	r0, r3
    115c:	b005      	add	sp, #20
    115e:	f85d fb04 	ldr.w	pc, [sp], #4

00001162 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1162:	b500      	push	{lr}
    1164:	b083      	sub	sp, #12
    1166:	9001      	str	r0, [sp, #4]
    1168:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    116a:	9b00      	ldr	r3, [sp, #0]
    116c:	2b00      	cmp	r3, #0
    116e:	d003      	beq.n	1178 <OsIf_SetTimerFrequency+0x16>
    1170:	9b00      	ldr	r3, [sp, #0]
    1172:	2b01      	cmp	r3, #1
    1174:	d004      	beq.n	1180 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1176:	e007      	b.n	1188 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1178:	9801      	ldr	r0, [sp, #4]
    117a:	f7ff ffa9 	bl	10d0 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    117e:	e003      	b.n	1188 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1180:	9801      	ldr	r0, [sp, #4]
    1182:	f000 f85b 	bl	123c <OsIf_Timer_System_SetTimerFrequency>
            break;
    1186:	bf00      	nop
    }
}
    1188:	bf00      	nop
    118a:	b003      	add	sp, #12
    118c:	f85d fb04 	ldr.w	pc, [sp], #4

00001190 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1190:	b500      	push	{lr}
    1192:	b085      	sub	sp, #20
    1194:	9001      	str	r0, [sp, #4]
    1196:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1198:	2300      	movs	r3, #0
    119a:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    119c:	9b00      	ldr	r3, [sp, #0]
    119e:	2b00      	cmp	r3, #0
    11a0:	d003      	beq.n	11aa <OsIf_MicrosToTicks+0x1a>
    11a2:	9b00      	ldr	r3, [sp, #0]
    11a4:	2b01      	cmp	r3, #1
    11a6:	d005      	beq.n	11b4 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    11a8:	e009      	b.n	11be <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    11aa:	9801      	ldr	r0, [sp, #4]
    11ac:	f7ff ff95 	bl	10da <OsIf_Timer_Dummy_MicrosToTicks>
    11b0:	9003      	str	r0, [sp, #12]
            break;
    11b2:	e004      	b.n	11be <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    11b4:	9801      	ldr	r0, [sp, #4]
    11b6:	f000 f84f 	bl	1258 <OsIf_Timer_System_MicrosToTicks>
    11ba:	9003      	str	r0, [sp, #12]
            break;
    11bc:	bf00      	nop
    }

    return Value;
    11be:	9b03      	ldr	r3, [sp, #12]
}
    11c0:	4618      	mov	r0, r3
    11c2:	b005      	add	sp, #20
    11c4:	f85d fb04 	ldr.w	pc, [sp], #4

000011c8 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    11c8:	b500      	push	{lr}
    11ca:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    11cc:	2300      	movs	r3, #0
    11ce:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    11d0:	4a09      	ldr	r2, [pc, #36]	; (11f8 <OsIf_Timer_System_Init+0x30>)
    11d2:	9b01      	ldr	r3, [sp, #4]
    11d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    11d8:	685a      	ldr	r2, [r3, #4]
    11da:	4908      	ldr	r1, [pc, #32]	; (11fc <OsIf_Timer_System_Init+0x34>)
    11dc:	9b01      	ldr	r3, [sp, #4]
    11de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    11e2:	4a06      	ldr	r2, [pc, #24]	; (11fc <OsIf_Timer_System_Init+0x34>)
    11e4:	9b01      	ldr	r3, [sp, #4]
    11e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    11ea:	4618      	mov	r0, r3
    11ec:	f000 f868 	bl	12c0 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    11f0:	bf00      	nop
    11f2:	b003      	add	sp, #12
    11f4:	f85d fb04 	ldr.w	pc, [sp], #4
    11f8:	0000c448 	.word	0x0000c448
    11fc:	1fff8b80 	.word	0x1fff8b80

00001200 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1200:	b500      	push	{lr}
    1202:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1204:	2300      	movs	r3, #0
    1206:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1208:	2300      	movs	r3, #0
    120a:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    120c:	f000 f86c 	bl	12e8 <OsIf_Timer_System_Internal_GetCounter>
    1210:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1212:	9b01      	ldr	r3, [sp, #4]
}
    1214:	4618      	mov	r0, r3
    1216:	b003      	add	sp, #12
    1218:	f85d fb04 	ldr.w	pc, [sp], #4

0000121c <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    121c:	b500      	push	{lr}
    121e:	b085      	sub	sp, #20
    1220:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1222:	2300      	movs	r3, #0
    1224:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1226:	2300      	movs	r3, #0
    1228:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    122a:	9801      	ldr	r0, [sp, #4]
    122c:	f000 f864 	bl	12f8 <OsIf_Timer_System_Internal_GetElapsed>
    1230:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1232:	9b03      	ldr	r3, [sp, #12]
}
    1234:	4618      	mov	r0, r3
    1236:	b005      	add	sp, #20
    1238:	f85d fb04 	ldr.w	pc, [sp], #4

0000123c <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    123c:	b084      	sub	sp, #16
    123e:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1240:	2300      	movs	r3, #0
    1242:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1244:	4903      	ldr	r1, [pc, #12]	; (1254 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1246:	9b03      	ldr	r3, [sp, #12]
    1248:	9a01      	ldr	r2, [sp, #4]
    124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    124e:	bf00      	nop
    1250:	b004      	add	sp, #16
    1252:	4770      	bx	lr
    1254:	1fff8b80 	.word	0x1fff8b80

00001258 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1258:	b5f0      	push	{r4, r5, r6, r7, lr}
    125a:	b087      	sub	sp, #28
    125c:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    125e:	2100      	movs	r1, #0
    1260:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1262:	2100      	movs	r1, #0
    1264:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1266:	9901      	ldr	r1, [sp, #4]
    1268:	2000      	movs	r0, #0
    126a:	460e      	mov	r6, r1
    126c:	4607      	mov	r7, r0
    126e:	4812      	ldr	r0, [pc, #72]	; (12b8 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1270:	9904      	ldr	r1, [sp, #16]
    1272:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1276:	2000      	movs	r0, #0
    1278:	460c      	mov	r4, r1
    127a:	4605      	mov	r5, r0
    127c:	fb04 f007 	mul.w	r0, r4, r7
    1280:	fb06 f105 	mul.w	r1, r6, r5
    1284:	4401      	add	r1, r0
    1286:	fba6 2304 	umull	r2, r3, r6, r4
    128a:	4419      	add	r1, r3
    128c:	460b      	mov	r3, r1
    128e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1292:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    129a:	4a08      	ldr	r2, [pc, #32]	; (12bc <OsIf_Timer_System_MicrosToTicks+0x64>)
    129c:	f04f 0300 	mov.w	r3, #0
    12a0:	f7ff f980 	bl	5a4 <__aeabi_uldivmod>
    12a4:	4602      	mov	r2, r0
    12a6:	460b      	mov	r3, r1
    12a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    12ac:	9b02      	ldr	r3, [sp, #8]
    12ae:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    12b0:	9b05      	ldr	r3, [sp, #20]
}
    12b2:	4618      	mov	r0, r3
    12b4:	b007      	add	sp, #28
    12b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12b8:	1fff8b80 	.word	0x1fff8b80
    12bc:	000f4240 	.word	0x000f4240

000012c0 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    12c0:	b082      	sub	sp, #8
    12c2:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    12c4:	4b07      	ldr	r3, [pc, #28]	; (12e4 <OsIf_Timer_System_Internal_Init+0x24>)
    12c6:	2200      	movs	r2, #0
    12c8:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    12ca:	4b06      	ldr	r3, [pc, #24]	; (12e4 <OsIf_Timer_System_Internal_Init+0x24>)
    12cc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    12d0:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    12d2:	4b04      	ldr	r3, [pc, #16]	; (12e4 <OsIf_Timer_System_Internal_Init+0x24>)
    12d4:	2200      	movs	r2, #0
    12d6:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    12d8:	4b02      	ldr	r3, [pc, #8]	; (12e4 <OsIf_Timer_System_Internal_Init+0x24>)
    12da:	2205      	movs	r2, #5
    12dc:	601a      	str	r2, [r3, #0]
}
    12de:	bf00      	nop
    12e0:	b002      	add	sp, #8
    12e2:	4770      	bx	lr
    12e4:	e000e010 	.word	0xe000e010

000012e8 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    12e8:	4b02      	ldr	r3, [pc, #8]	; (12f4 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    12ea:	689b      	ldr	r3, [r3, #8]
    12ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    12f0:	4618      	mov	r0, r3
    12f2:	4770      	bx	lr
    12f4:	e000e010 	.word	0xe000e010

000012f8 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    12f8:	b084      	sub	sp, #16
    12fa:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    12fc:	4b10      	ldr	r3, [pc, #64]	; (1340 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    12fe:	689b      	ldr	r3, [r3, #8]
    1300:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1304:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1306:	2300      	movs	r3, #0
    1308:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    130a:	9b01      	ldr	r3, [sp, #4]
    130c:	681b      	ldr	r3, [r3, #0]
    130e:	9a02      	ldr	r2, [sp, #8]
    1310:	429a      	cmp	r2, r3
    1312:	d909      	bls.n	1328 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1314:	9b01      	ldr	r3, [sp, #4]
    1316:	681a      	ldr	r2, [r3, #0]
    1318:	9b02      	ldr	r3, [sp, #8]
    131a:	1ad3      	subs	r3, r2, r3
    131c:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1320:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1324:	9303      	str	r3, [sp, #12]
    1326:	e004      	b.n	1332 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1328:	9b01      	ldr	r3, [sp, #4]
    132a:	681a      	ldr	r2, [r3, #0]
    132c:	9b02      	ldr	r3, [sp, #8]
    132e:	1ad3      	subs	r3, r2, r3
    1330:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1332:	9b01      	ldr	r3, [sp, #4]
    1334:	9a02      	ldr	r2, [sp, #8]
    1336:	601a      	str	r2, [r3, #0]

    return dif;
    1338:	9b03      	ldr	r3, [sp, #12]
}
    133a:	4618      	mov	r0, r3
    133c:	b004      	add	sp, #16
    133e:	4770      	bx	lr
    1340:	e000e010 	.word	0xe000e010

00001344 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1344:	b082      	sub	sp, #8
    1346:	9001      	str	r0, [sp, #4]
    1348:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    134a:	bf00      	nop
    134c:	b002      	add	sp, #8
    134e:	4770      	bx	lr

00001350 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1350:	b500      	push	{lr}
    1352:	b085      	sub	sp, #20
    1354:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1356:	4b24      	ldr	r3, [pc, #144]	; (13e8 <Clock_Ip_UpdateDriverContext+0x98>)
    1358:	2201      	movs	r2, #1
    135a:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    135c:	4b23      	ldr	r3, [pc, #140]	; (13ec <Clock_Ip_UpdateDriverContext+0x9c>)
    135e:	681b      	ldr	r3, [r3, #0]
    1360:	2102      	movs	r1, #2
    1362:	4618      	mov	r0, r3
    1364:	f003 fc32 	bl	4bcc <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1368:	2300      	movs	r3, #0
    136a:	f88d 300f 	strb.w	r3, [sp, #15]
    136e:	e015      	b.n	139c <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1370:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1374:	9a01      	ldr	r2, [sp, #4]
    1376:	334a      	adds	r3, #74	; 0x4a
    1378:	00db      	lsls	r3, r3, #3
    137a:	4413      	add	r3, r2
    137c:	6858      	ldr	r0, [r3, #4]
    137e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1382:	9a01      	ldr	r2, [sp, #4]
    1384:	334a      	adds	r3, #74	; 0x4a
    1386:	00db      	lsls	r3, r3, #3
    1388:	4413      	add	r3, r2
    138a:	689b      	ldr	r3, [r3, #8]
    138c:	4619      	mov	r1, r3
    138e:	f001 fadc 	bl	294a <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1392:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1396:	3301      	adds	r3, #1
    1398:	f88d 300f 	strb.w	r3, [sp, #15]
    139c:	9b01      	ldr	r3, [sp, #4]
    139e:	7bdb      	ldrb	r3, [r3, #15]
    13a0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13a4:	429a      	cmp	r2, r3
    13a6:	d3e3      	bcc.n	1370 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    13a8:	f000 f824 	bl	13f4 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    13ac:	2301      	movs	r3, #1
    13ae:	f88d 300f 	strb.w	r3, [sp, #15]
    13b2:	e00e      	b.n	13d2 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    13b4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13b8:	9b01      	ldr	r3, [sp, #4]
    13ba:	327e      	adds	r2, #126	; 0x7e
    13bc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    13c0:	490b      	ldr	r1, [pc, #44]	; (13f0 <Clock_Ip_UpdateDriverContext+0xa0>)
    13c2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13c6:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    13c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13cc:	3301      	adds	r3, #1
    13ce:	f88d 300f 	strb.w	r3, [sp, #15]
    13d2:	9b01      	ldr	r3, [sp, #4]
    13d4:	7cdb      	ldrb	r3, [r3, #19]
    13d6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13da:	429a      	cmp	r2, r3
    13dc:	d3ea      	bcc.n	13b4 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    13de:	bf00      	nop
    13e0:	bf00      	nop
    13e2:	b005      	add	sp, #20
    13e4:	f85d fb04 	ldr.w	pc, [sp], #4
    13e8:	1fff8b10 	.word	0x1fff8b10
    13ec:	1fff8b84 	.word	0x1fff8b84
    13f0:	1fff8b90 	.word	0x1fff8b90

000013f4 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    13f4:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    13f6:	4b23      	ldr	r3, [pc, #140]	; (1484 <Clock_Ip_CallEmptyCallbacks+0x90>)
    13f8:	781b      	ldrb	r3, [r3, #0]
    13fa:	f083 0301 	eor.w	r3, r3, #1
    13fe:	b2db      	uxtb	r3, r3
    1400:	2b00      	cmp	r3, #0
    1402:	d03d      	beq.n	1480 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1404:	4b1f      	ldr	r3, [pc, #124]	; (1484 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1406:	2201      	movs	r2, #1
    1408:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    140a:	4b1f      	ldr	r3, [pc, #124]	; (1488 <Clock_Ip_CallEmptyCallbacks+0x94>)
    140c:	685b      	ldr	r3, [r3, #4]
    140e:	2100      	movs	r1, #0
    1410:	2000      	movs	r0, #0
    1412:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1414:	4b1c      	ldr	r3, [pc, #112]	; (1488 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1416:	689b      	ldr	r3, [r3, #8]
    1418:	2057      	movs	r0, #87	; 0x57
    141a:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    141c:	4b1b      	ldr	r3, [pc, #108]	; (148c <Clock_Ip_CallEmptyCallbacks+0x98>)
    141e:	681b      	ldr	r3, [r3, #0]
    1420:	2000      	movs	r0, #0
    1422:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1424:	4b1a      	ldr	r3, [pc, #104]	; (1490 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1426:	681b      	ldr	r3, [r3, #0]
    1428:	2000      	movs	r0, #0
    142a:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    142c:	4b19      	ldr	r3, [pc, #100]	; (1494 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    142e:	681b      	ldr	r3, [r3, #0]
    1430:	2000      	movs	r0, #0
    1432:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1434:	4b18      	ldr	r3, [pc, #96]	; (1498 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1436:	685b      	ldr	r3, [r3, #4]
    1438:	2000      	movs	r0, #0
    143a:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    143c:	4b16      	ldr	r3, [pc, #88]	; (1498 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    143e:	689b      	ldr	r3, [r3, #8]
    1440:	2057      	movs	r0, #87	; 0x57
    1442:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1444:	4b15      	ldr	r3, [pc, #84]	; (149c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1446:	681b      	ldr	r3, [r3, #0]
    1448:	2000      	movs	r0, #0
    144a:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    144c:	4b13      	ldr	r3, [pc, #76]	; (149c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    144e:	685b      	ldr	r3, [r3, #4]
    1450:	2100      	movs	r1, #0
    1452:	2057      	movs	r0, #87	; 0x57
    1454:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1456:	4b12      	ldr	r3, [pc, #72]	; (14a0 <Clock_Ip_CallEmptyCallbacks+0xac>)
    1458:	681b      	ldr	r3, [r3, #0]
    145a:	2000      	movs	r0, #0
    145c:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    145e:	4b11      	ldr	r3, [pc, #68]	; (14a4 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1460:	685b      	ldr	r3, [r3, #4]
    1462:	2000      	movs	r0, #0
    1464:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1466:	4b0f      	ldr	r3, [pc, #60]	; (14a4 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1468:	689b      	ldr	r3, [r3, #8]
    146a:	2057      	movs	r0, #87	; 0x57
    146c:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    146e:	4b0e      	ldr	r3, [pc, #56]	; (14a8 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1470:	685b      	ldr	r3, [r3, #4]
    1472:	2000      	movs	r0, #0
    1474:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1476:	4b0d      	ldr	r3, [pc, #52]	; (14ac <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1478:	681b      	ldr	r3, [r3, #0]
    147a:	2100      	movs	r1, #0
    147c:	2000      	movs	r0, #0
    147e:	4798      	blx	r3
    }
}
    1480:	bf00      	nop
    1482:	bd08      	pop	{r3, pc}
    1484:	1fff8b88 	.word	0x1fff8b88
    1488:	0000be68 	.word	0x0000be68
    148c:	0000bd7c 	.word	0x0000bd7c
    1490:	0000bdb8 	.word	0x0000bdb8
    1494:	0000bdc0 	.word	0x0000bdc0
    1498:	0000bde8 	.word	0x0000bde8
    149c:	0000bdf4 	.word	0x0000bdf4
    14a0:	0000be2c 	.word	0x0000be2c
    14a4:	0000be78 	.word	0x0000be78
    14a8:	0000bea4 	.word	0x0000bea4
    14ac:	0000bea0 	.word	0x0000bea0

000014b0 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    14b0:	b500      	push	{lr}
    14b2:	b085      	sub	sp, #20
    14b4:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    14b6:	9b01      	ldr	r3, [sp, #4]
    14b8:	7adb      	ldrb	r3, [r3, #11]
    14ba:	9303      	str	r3, [sp, #12]
    14bc:	e01f      	b.n	14fe <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    14be:	9b03      	ldr	r3, [sp, #12]
    14c0:	1e5a      	subs	r2, r3, #1
    14c2:	9b01      	ldr	r3, [sp, #4]
    14c4:	320d      	adds	r2, #13
    14c6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    14ca:	495a      	ldr	r1, [pc, #360]	; (1634 <Clock_Ip_ResetClockConfiguration+0x184>)
    14cc:	4613      	mov	r3, r2
    14ce:	00db      	lsls	r3, r3, #3
    14d0:	4413      	add	r3, r2
    14d2:	440b      	add	r3, r1
    14d4:	3301      	adds	r3, #1
    14d6:	781b      	ldrb	r3, [r3, #0]
    14d8:	461a      	mov	r2, r3
    14da:	4b57      	ldr	r3, [pc, #348]	; (1638 <Clock_Ip_ResetClockConfiguration+0x188>)
    14dc:	5c9b      	ldrb	r3, [r3, r2]
    14de:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    14e0:	4a56      	ldr	r2, [pc, #344]	; (163c <Clock_Ip_ResetClockConfiguration+0x18c>)
    14e2:	9b02      	ldr	r3, [sp, #8]
    14e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    14e8:	9a03      	ldr	r2, [sp, #12]
    14ea:	3a01      	subs	r2, #1
    14ec:	320d      	adds	r2, #13
    14ee:	00d2      	lsls	r2, r2, #3
    14f0:	9901      	ldr	r1, [sp, #4]
    14f2:	440a      	add	r2, r1
    14f4:	4610      	mov	r0, r2
    14f6:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    14f8:	9b03      	ldr	r3, [sp, #12]
    14fa:	3b01      	subs	r3, #1
    14fc:	9303      	str	r3, [sp, #12]
    14fe:	9b03      	ldr	r3, [sp, #12]
    1500:	2b00      	cmp	r3, #0
    1502:	d1dc      	bne.n	14be <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1504:	9b01      	ldr	r3, [sp, #4]
    1506:	7b9b      	ldrb	r3, [r3, #14]
    1508:	9303      	str	r3, [sp, #12]
    150a:	e026      	b.n	155a <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    150c:	9b03      	ldr	r3, [sp, #12]
    150e:	3b01      	subs	r3, #1
    1510:	9a01      	ldr	r2, [sp, #4]
    1512:	3324      	adds	r3, #36	; 0x24
    1514:	011b      	lsls	r3, r3, #4
    1516:	4413      	add	r3, r2
    1518:	3304      	adds	r3, #4
    151a:	681a      	ldr	r2, [r3, #0]
    151c:	4945      	ldr	r1, [pc, #276]	; (1634 <Clock_Ip_ResetClockConfiguration+0x184>)
    151e:	4613      	mov	r3, r2
    1520:	00db      	lsls	r3, r3, #3
    1522:	4413      	add	r3, r2
    1524:	440b      	add	r3, r1
    1526:	3301      	adds	r3, #1
    1528:	781b      	ldrb	r3, [r3, #0]
    152a:	461a      	mov	r2, r3
    152c:	4b44      	ldr	r3, [pc, #272]	; (1640 <Clock_Ip_ResetClockConfiguration+0x190>)
    152e:	5c9b      	ldrb	r3, [r3, r2]
    1530:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1532:	4944      	ldr	r1, [pc, #272]	; (1644 <Clock_Ip_ResetClockConfiguration+0x194>)
    1534:	9a02      	ldr	r2, [sp, #8]
    1536:	4613      	mov	r3, r2
    1538:	005b      	lsls	r3, r3, #1
    153a:	4413      	add	r3, r2
    153c:	009b      	lsls	r3, r3, #2
    153e:	440b      	add	r3, r1
    1540:	681b      	ldr	r3, [r3, #0]
    1542:	9a03      	ldr	r2, [sp, #12]
    1544:	3a01      	subs	r2, #1
    1546:	3224      	adds	r2, #36	; 0x24
    1548:	0112      	lsls	r2, r2, #4
    154a:	9901      	ldr	r1, [sp, #4]
    154c:	440a      	add	r2, r1
    154e:	3204      	adds	r2, #4
    1550:	4610      	mov	r0, r2
    1552:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1554:	9b03      	ldr	r3, [sp, #12]
    1556:	3b01      	subs	r3, #1
    1558:	9303      	str	r3, [sp, #12]
    155a:	9b03      	ldr	r3, [sp, #12]
    155c:	2b00      	cmp	r3, #0
    155e:	d1d5      	bne.n	150c <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1560:	9b01      	ldr	r3, [sp, #4]
    1562:	7a9b      	ldrb	r3, [r3, #10]
    1564:	9303      	str	r3, [sp, #12]
    1566:	e02a      	b.n	15be <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1568:	9b03      	ldr	r3, [sp, #12]
    156a:	1e5a      	subs	r2, r3, #1
    156c:	9901      	ldr	r1, [sp, #4]
    156e:	4613      	mov	r3, r2
    1570:	009b      	lsls	r3, r3, #2
    1572:	4413      	add	r3, r2
    1574:	00db      	lsls	r3, r3, #3
    1576:	440b      	add	r3, r1
    1578:	3340      	adds	r3, #64	; 0x40
    157a:	681a      	ldr	r2, [r3, #0]
    157c:	492d      	ldr	r1, [pc, #180]	; (1634 <Clock_Ip_ResetClockConfiguration+0x184>)
    157e:	4613      	mov	r3, r2
    1580:	00db      	lsls	r3, r3, #3
    1582:	4413      	add	r3, r2
    1584:	440b      	add	r3, r1
    1586:	3301      	adds	r3, #1
    1588:	781b      	ldrb	r3, [r3, #0]
    158a:	461a      	mov	r2, r3
    158c:	4b2e      	ldr	r3, [pc, #184]	; (1648 <Clock_Ip_ResetClockConfiguration+0x198>)
    158e:	5c9b      	ldrb	r3, [r3, r2]
    1590:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    1592:	492e      	ldr	r1, [pc, #184]	; (164c <Clock_Ip_ResetClockConfiguration+0x19c>)
    1594:	9a02      	ldr	r2, [sp, #8]
    1596:	4613      	mov	r3, r2
    1598:	009b      	lsls	r3, r3, #2
    159a:	4413      	add	r3, r2
    159c:	009b      	lsls	r3, r3, #2
    159e:	440b      	add	r3, r1
    15a0:	6819      	ldr	r1, [r3, #0]
    15a2:	9b03      	ldr	r3, [sp, #12]
    15a4:	1e5a      	subs	r2, r3, #1
    15a6:	4613      	mov	r3, r2
    15a8:	009b      	lsls	r3, r3, #2
    15aa:	4413      	add	r3, r2
    15ac:	00db      	lsls	r3, r3, #3
    15ae:	3340      	adds	r3, #64	; 0x40
    15b0:	9a01      	ldr	r2, [sp, #4]
    15b2:	4413      	add	r3, r2
    15b4:	4618      	mov	r0, r3
    15b6:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    15b8:	9b03      	ldr	r3, [sp, #12]
    15ba:	3b01      	subs	r3, #1
    15bc:	9303      	str	r3, [sp, #12]
    15be:	9b03      	ldr	r3, [sp, #12]
    15c0:	2b00      	cmp	r3, #0
    15c2:	d1d1      	bne.n	1568 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    15c4:	9b01      	ldr	r3, [sp, #4]
    15c6:	7a5b      	ldrb	r3, [r3, #9]
    15c8:	9303      	str	r3, [sp, #12]
    15ca:	e02b      	b.n	1624 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    15cc:	9b03      	ldr	r3, [sp, #12]
    15ce:	1e5a      	subs	r2, r3, #1
    15d0:	9901      	ldr	r1, [sp, #4]
    15d2:	4613      	mov	r3, r2
    15d4:	009b      	lsls	r3, r3, #2
    15d6:	4413      	add	r3, r2
    15d8:	009b      	lsls	r3, r3, #2
    15da:	440b      	add	r3, r1
    15dc:	332c      	adds	r3, #44	; 0x2c
    15de:	681a      	ldr	r2, [r3, #0]
    15e0:	4914      	ldr	r1, [pc, #80]	; (1634 <Clock_Ip_ResetClockConfiguration+0x184>)
    15e2:	4613      	mov	r3, r2
    15e4:	00db      	lsls	r3, r3, #3
    15e6:	4413      	add	r3, r2
    15e8:	440b      	add	r3, r1
    15ea:	3301      	adds	r3, #1
    15ec:	781b      	ldrb	r3, [r3, #0]
    15ee:	461a      	mov	r2, r3
    15f0:	4b17      	ldr	r3, [pc, #92]	; (1650 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    15f2:	5c9b      	ldrb	r3, [r3, r2]
    15f4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    15f6:	4917      	ldr	r1, [pc, #92]	; (1654 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    15f8:	9a02      	ldr	r2, [sp, #8]
    15fa:	4613      	mov	r3, r2
    15fc:	009b      	lsls	r3, r3, #2
    15fe:	4413      	add	r3, r2
    1600:	009b      	lsls	r3, r3, #2
    1602:	440b      	add	r3, r1
    1604:	6819      	ldr	r1, [r3, #0]
    1606:	9b03      	ldr	r3, [sp, #12]
    1608:	1e5a      	subs	r2, r3, #1
    160a:	4613      	mov	r3, r2
    160c:	009b      	lsls	r3, r3, #2
    160e:	4413      	add	r3, r2
    1610:	009b      	lsls	r3, r3, #2
    1612:	3328      	adds	r3, #40	; 0x28
    1614:	9a01      	ldr	r2, [sp, #4]
    1616:	4413      	add	r3, r2
    1618:	3304      	adds	r3, #4
    161a:	4618      	mov	r0, r3
    161c:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    161e:	9b03      	ldr	r3, [sp, #12]
    1620:	3b01      	subs	r3, #1
    1622:	9303      	str	r3, [sp, #12]
    1624:	9b03      	ldr	r3, [sp, #12]
    1626:	2b00      	cmp	r3, #0
    1628:	d1d0      	bne.n	15cc <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    162a:	bf00      	nop
    162c:	bf00      	nop
    162e:	b005      	add	sp, #20
    1630:	f85d fb04 	ldr.w	pc, [sp], #4
    1634:	0000b86c 	.word	0x0000b86c
    1638:	0000b83c 	.word	0x0000b83c
    163c:	0000bea4 	.word	0x0000bea4
    1640:	0000b81c 	.word	0x0000b81c
    1644:	0000bde8 	.word	0x0000bde8
    1648:	0000b82c 	.word	0x0000b82c
    164c:	0000be78 	.word	0x0000be78
    1650:	0000b7ec 	.word	0x0000b7ec
    1654:	0000bdc0 	.word	0x0000bdc0

00001658 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    1658:	b500      	push	{lr}
    165a:	b085      	sub	sp, #20
    165c:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    165e:	2301      	movs	r3, #1
    1660:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    1662:	9801      	ldr	r0, [sp, #4]
    1664:	f000 f818 	bl	1698 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    1668:	4b0a      	ldr	r3, [pc, #40]	; (1694 <Clock_Ip_Init+0x3c>)
    166a:	781b      	ldrb	r3, [r3, #0]
    166c:	2b00      	cmp	r3, #0
    166e:	d00a      	beq.n	1686 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    1670:	f000 fb74 	bl	1d5c <Clock_Ip_GetPllStatus>
    1674:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    1676:	9b02      	ldr	r3, [sp, #8]
    1678:	2b00      	cmp	r3, #0
    167a:	d106      	bne.n	168a <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    167c:	f000 fbf2 	bl	1e64 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    1680:	2300      	movs	r3, #0
    1682:	9303      	str	r3, [sp, #12]
    1684:	e001      	b.n	168a <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    1686:	2300      	movs	r3, #0
    1688:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    168a:	9b03      	ldr	r3, [sp, #12]
}
    168c:	4618      	mov	r0, r3
    168e:	b005      	add	sp, #20
    1690:	f85d fb04 	ldr.w	pc, [sp], #4
    1694:	1fff8b8c 	.word	0x1fff8b8c

00001698 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    1698:	b510      	push	{r4, lr}
    169a:	b084      	sub	sp, #16
    169c:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    169e:	4a9f      	ldr	r2, [pc, #636]	; (191c <Clock_Ip_InitClock+0x284>)
    16a0:	9b01      	ldr	r3, [sp, #4]
    16a2:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    16a4:	2101      	movs	r1, #1
    16a6:	9801      	ldr	r0, [sp, #4]
    16a8:	f003 fa90 	bl	4bcc <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    16ac:	4b9b      	ldr	r3, [pc, #620]	; (191c <Clock_Ip_InitClock+0x284>)
    16ae:	681b      	ldr	r3, [r3, #0]
    16b0:	2b00      	cmp	r3, #0
    16b2:	d030      	beq.n	1716 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    16b4:	2300      	movs	r3, #0
    16b6:	9303      	str	r3, [sp, #12]
    16b8:	e027      	b.n	170a <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    16ba:	9901      	ldr	r1, [sp, #4]
    16bc:	9a03      	ldr	r2, [sp, #12]
    16be:	4613      	mov	r3, r2
    16c0:	009b      	lsls	r3, r3, #2
    16c2:	4413      	add	r3, r2
    16c4:	009b      	lsls	r3, r3, #2
    16c6:	440b      	add	r3, r1
    16c8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    16cc:	681a      	ldr	r2, [r3, #0]
    16ce:	4994      	ldr	r1, [pc, #592]	; (1920 <Clock_Ip_InitClock+0x288>)
    16d0:	4613      	mov	r3, r2
    16d2:	00db      	lsls	r3, r3, #3
    16d4:	4413      	add	r3, r2
    16d6:	440b      	add	r3, r1
    16d8:	3301      	adds	r3, #1
    16da:	781b      	ldrb	r3, [r3, #0]
    16dc:	461a      	mov	r2, r3
    16de:	4b91      	ldr	r3, [pc, #580]	; (1924 <Clock_Ip_InitClock+0x28c>)
    16e0:	5c9b      	ldrb	r3, [r3, r2]
    16e2:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    16e4:	4a90      	ldr	r2, [pc, #576]	; (1928 <Clock_Ip_InitClock+0x290>)
    16e6:	9b02      	ldr	r3, [sp, #8]
    16e8:	011b      	lsls	r3, r3, #4
    16ea:	4413      	add	r3, r2
    16ec:	6819      	ldr	r1, [r3, #0]
    16ee:	9a03      	ldr	r2, [sp, #12]
    16f0:	4613      	mov	r3, r2
    16f2:	009b      	lsls	r3, r3, #2
    16f4:	4413      	add	r3, r2
    16f6:	009b      	lsls	r3, r3, #2
    16f8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    16fc:	9a01      	ldr	r2, [sp, #4]
    16fe:	4413      	add	r3, r2
    1700:	4618      	mov	r0, r3
    1702:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1704:	9b03      	ldr	r3, [sp, #12]
    1706:	3301      	adds	r3, #1
    1708:	9303      	str	r3, [sp, #12]
    170a:	9b01      	ldr	r3, [sp, #4]
    170c:	7c9b      	ldrb	r3, [r3, #18]
    170e:	461a      	mov	r2, r3
    1710:	9b03      	ldr	r3, [sp, #12]
    1712:	4293      	cmp	r3, r2
    1714:	d3d1      	bcc.n	16ba <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    1716:	9801      	ldr	r0, [sp, #4]
    1718:	f7ff feca 	bl	14b0 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    171c:	2300      	movs	r3, #0
    171e:	9303      	str	r3, [sp, #12]
    1720:	e029      	b.n	1776 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1722:	9901      	ldr	r1, [sp, #4]
    1724:	9a03      	ldr	r2, [sp, #12]
    1726:	4613      	mov	r3, r2
    1728:	005b      	lsls	r3, r3, #1
    172a:	4413      	add	r3, r2
    172c:	009b      	lsls	r3, r3, #2
    172e:	440b      	add	r3, r1
    1730:	3314      	adds	r3, #20
    1732:	681a      	ldr	r2, [r3, #0]
    1734:	497a      	ldr	r1, [pc, #488]	; (1920 <Clock_Ip_InitClock+0x288>)
    1736:	4613      	mov	r3, r2
    1738:	00db      	lsls	r3, r3, #3
    173a:	4413      	add	r3, r2
    173c:	440b      	add	r3, r1
    173e:	3301      	adds	r3, #1
    1740:	781b      	ldrb	r3, [r3, #0]
    1742:	461a      	mov	r2, r3
    1744:	4b79      	ldr	r3, [pc, #484]	; (192c <Clock_Ip_InitClock+0x294>)
    1746:	5c9b      	ldrb	r3, [r3, r2]
    1748:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    174a:	4979      	ldr	r1, [pc, #484]	; (1930 <Clock_Ip_InitClock+0x298>)
    174c:	9a02      	ldr	r2, [sp, #8]
    174e:	4613      	mov	r3, r2
    1750:	005b      	lsls	r3, r3, #1
    1752:	4413      	add	r3, r2
    1754:	009b      	lsls	r3, r3, #2
    1756:	440b      	add	r3, r1
    1758:	6819      	ldr	r1, [r3, #0]
    175a:	9a03      	ldr	r2, [sp, #12]
    175c:	4613      	mov	r3, r2
    175e:	005b      	lsls	r3, r3, #1
    1760:	4413      	add	r3, r2
    1762:	009b      	lsls	r3, r3, #2
    1764:	3310      	adds	r3, #16
    1766:	9a01      	ldr	r2, [sp, #4]
    1768:	4413      	add	r3, r2
    176a:	3304      	adds	r3, #4
    176c:	4618      	mov	r0, r3
    176e:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1770:	9b03      	ldr	r3, [sp, #12]
    1772:	3301      	adds	r3, #1
    1774:	9303      	str	r3, [sp, #12]
    1776:	9b01      	ldr	r3, [sp, #4]
    1778:	7a1b      	ldrb	r3, [r3, #8]
    177a:	461a      	mov	r2, r3
    177c:	9b03      	ldr	r3, [sp, #12]
    177e:	4293      	cmp	r3, r2
    1780:	d3cf      	bcc.n	1722 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    1782:	2300      	movs	r3, #0
    1784:	9303      	str	r3, [sp, #12]
    1786:	e02a      	b.n	17de <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1788:	9901      	ldr	r1, [sp, #4]
    178a:	9a03      	ldr	r2, [sp, #12]
    178c:	4613      	mov	r3, r2
    178e:	009b      	lsls	r3, r3, #2
    1790:	4413      	add	r3, r2
    1792:	009b      	lsls	r3, r3, #2
    1794:	440b      	add	r3, r1
    1796:	332c      	adds	r3, #44	; 0x2c
    1798:	681a      	ldr	r2, [r3, #0]
    179a:	4961      	ldr	r1, [pc, #388]	; (1920 <Clock_Ip_InitClock+0x288>)
    179c:	4613      	mov	r3, r2
    179e:	00db      	lsls	r3, r3, #3
    17a0:	4413      	add	r3, r2
    17a2:	440b      	add	r3, r1
    17a4:	3301      	adds	r3, #1
    17a6:	781b      	ldrb	r3, [r3, #0]
    17a8:	461a      	mov	r2, r3
    17aa:	4b62      	ldr	r3, [pc, #392]	; (1934 <Clock_Ip_InitClock+0x29c>)
    17ac:	5c9b      	ldrb	r3, [r3, r2]
    17ae:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    17b0:	4961      	ldr	r1, [pc, #388]	; (1938 <Clock_Ip_InitClock+0x2a0>)
    17b2:	9a02      	ldr	r2, [sp, #8]
    17b4:	4613      	mov	r3, r2
    17b6:	009b      	lsls	r3, r3, #2
    17b8:	4413      	add	r3, r2
    17ba:	009b      	lsls	r3, r3, #2
    17bc:	440b      	add	r3, r1
    17be:	3304      	adds	r3, #4
    17c0:	6819      	ldr	r1, [r3, #0]
    17c2:	9a03      	ldr	r2, [sp, #12]
    17c4:	4613      	mov	r3, r2
    17c6:	009b      	lsls	r3, r3, #2
    17c8:	4413      	add	r3, r2
    17ca:	009b      	lsls	r3, r3, #2
    17cc:	3328      	adds	r3, #40	; 0x28
    17ce:	9a01      	ldr	r2, [sp, #4]
    17d0:	4413      	add	r3, r2
    17d2:	3304      	adds	r3, #4
    17d4:	4618      	mov	r0, r3
    17d6:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    17d8:	9b03      	ldr	r3, [sp, #12]
    17da:	3301      	adds	r3, #1
    17dc:	9303      	str	r3, [sp, #12]
    17de:	9b01      	ldr	r3, [sp, #4]
    17e0:	7a5b      	ldrb	r3, [r3, #9]
    17e2:	461a      	mov	r2, r3
    17e4:	9b03      	ldr	r3, [sp, #12]
    17e6:	4293      	cmp	r3, r2
    17e8:	d3ce      	bcc.n	1788 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    17ea:	9801      	ldr	r0, [sp, #4]
    17ec:	f7ff fdb0 	bl	1350 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    17f0:	2300      	movs	r3, #0
    17f2:	9303      	str	r3, [sp, #12]
    17f4:	e028      	b.n	1848 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    17f6:	9901      	ldr	r1, [sp, #4]
    17f8:	9a03      	ldr	r2, [sp, #12]
    17fa:	4613      	mov	r3, r2
    17fc:	009b      	lsls	r3, r3, #2
    17fe:	4413      	add	r3, r2
    1800:	009b      	lsls	r3, r3, #2
    1802:	440b      	add	r3, r1
    1804:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1808:	681a      	ldr	r2, [r3, #0]
    180a:	4945      	ldr	r1, [pc, #276]	; (1920 <Clock_Ip_InitClock+0x288>)
    180c:	4613      	mov	r3, r2
    180e:	00db      	lsls	r3, r3, #3
    1810:	4413      	add	r3, r2
    1812:	440b      	add	r3, r1
    1814:	3301      	adds	r3, #1
    1816:	781b      	ldrb	r3, [r3, #0]
    1818:	461a      	mov	r2, r3
    181a:	4b48      	ldr	r3, [pc, #288]	; (193c <Clock_Ip_InitClock+0x2a4>)
    181c:	5c9b      	ldrb	r3, [r3, r2]
    181e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    1820:	4a47      	ldr	r2, [pc, #284]	; (1940 <Clock_Ip_InitClock+0x2a8>)
    1822:	9b02      	ldr	r3, [sp, #8]
    1824:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1828:	9a03      	ldr	r2, [sp, #12]
    182a:	4613      	mov	r3, r2
    182c:	009b      	lsls	r3, r3, #2
    182e:	4413      	add	r3, r2
    1830:	009b      	lsls	r3, r3, #2
    1832:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    1836:	9a01      	ldr	r2, [sp, #4]
    1838:	4413      	add	r3, r2
    183a:	3304      	adds	r3, #4
    183c:	9903      	ldr	r1, [sp, #12]
    183e:	4618      	mov	r0, r3
    1840:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1842:	9b03      	ldr	r3, [sp, #12]
    1844:	3301      	adds	r3, #1
    1846:	9303      	str	r3, [sp, #12]
    1848:	9b01      	ldr	r3, [sp, #4]
    184a:	7c5b      	ldrb	r3, [r3, #17]
    184c:	461a      	mov	r2, r3
    184e:	9b03      	ldr	r3, [sp, #12]
    1850:	4293      	cmp	r3, r2
    1852:	d3d0      	bcc.n	17f6 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1854:	2300      	movs	r3, #0
    1856:	9303      	str	r3, [sp, #12]
    1858:	e026      	b.n	18a8 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    185a:	9901      	ldr	r1, [sp, #4]
    185c:	9a03      	ldr	r2, [sp, #12]
    185e:	4613      	mov	r3, r2
    1860:	005b      	lsls	r3, r3, #1
    1862:	4413      	add	r3, r2
    1864:	009b      	lsls	r3, r3, #2
    1866:	440b      	add	r3, r1
    1868:	f503 730e 	add.w	r3, r3, #568	; 0x238
    186c:	681a      	ldr	r2, [r3, #0]
    186e:	492c      	ldr	r1, [pc, #176]	; (1920 <Clock_Ip_InitClock+0x288>)
    1870:	4613      	mov	r3, r2
    1872:	00db      	lsls	r3, r3, #3
    1874:	4413      	add	r3, r2
    1876:	440b      	add	r3, r1
    1878:	3301      	adds	r3, #1
    187a:	781b      	ldrb	r3, [r3, #0]
    187c:	461a      	mov	r2, r3
    187e:	4b31      	ldr	r3, [pc, #196]	; (1944 <Clock_Ip_InitClock+0x2ac>)
    1880:	5c9b      	ldrb	r3, [r3, r2]
    1882:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    1884:	4a30      	ldr	r2, [pc, #192]	; (1948 <Clock_Ip_InitClock+0x2b0>)
    1886:	9b02      	ldr	r3, [sp, #8]
    1888:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    188c:	9a03      	ldr	r2, [sp, #12]
    188e:	4613      	mov	r3, r2
    1890:	005b      	lsls	r3, r3, #1
    1892:	4413      	add	r3, r2
    1894:	009b      	lsls	r3, r3, #2
    1896:	f503 730e 	add.w	r3, r3, #568	; 0x238
    189a:	9a01      	ldr	r2, [sp, #4]
    189c:	4413      	add	r3, r2
    189e:	4618      	mov	r0, r3
    18a0:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    18a2:	9b03      	ldr	r3, [sp, #12]
    18a4:	3301      	adds	r3, #1
    18a6:	9303      	str	r3, [sp, #12]
    18a8:	9b01      	ldr	r3, [sp, #4]
    18aa:	7b5b      	ldrb	r3, [r3, #13]
    18ac:	461a      	mov	r2, r3
    18ae:	9b03      	ldr	r3, [sp, #12]
    18b0:	4293      	cmp	r3, r2
    18b2:	d3d2      	bcc.n	185a <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    18b4:	2300      	movs	r3, #0
    18b6:	9303      	str	r3, [sp, #12]
    18b8:	e026      	b.n	1908 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    18ba:	9901      	ldr	r1, [sp, #4]
    18bc:	9a03      	ldr	r2, [sp, #12]
    18be:	4613      	mov	r3, r2
    18c0:	005b      	lsls	r3, r3, #1
    18c2:	4413      	add	r3, r2
    18c4:	009b      	lsls	r3, r3, #2
    18c6:	440b      	add	r3, r1
    18c8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    18cc:	681a      	ldr	r2, [r3, #0]
    18ce:	4914      	ldr	r1, [pc, #80]	; (1920 <Clock_Ip_InitClock+0x288>)
    18d0:	4613      	mov	r3, r2
    18d2:	00db      	lsls	r3, r3, #3
    18d4:	4413      	add	r3, r2
    18d6:	440b      	add	r3, r1
    18d8:	3301      	adds	r3, #1
    18da:	781b      	ldrb	r3, [r3, #0]
    18dc:	461a      	mov	r2, r3
    18de:	4b1b      	ldr	r3, [pc, #108]	; (194c <Clock_Ip_InitClock+0x2b4>)
    18e0:	5c9b      	ldrb	r3, [r3, r2]
    18e2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    18e4:	4a1a      	ldr	r2, [pc, #104]	; (1950 <Clock_Ip_InitClock+0x2b8>)
    18e6:	9b02      	ldr	r3, [sp, #8]
    18e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    18ec:	9a03      	ldr	r2, [sp, #12]
    18ee:	4613      	mov	r3, r2
    18f0:	005b      	lsls	r3, r3, #1
    18f2:	4413      	add	r3, r2
    18f4:	009b      	lsls	r3, r3, #2
    18f6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    18fa:	9a01      	ldr	r2, [sp, #4]
    18fc:	4413      	add	r3, r2
    18fe:	4618      	mov	r0, r3
    1900:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1902:	9b03      	ldr	r3, [sp, #12]
    1904:	3301      	adds	r3, #1
    1906:	9303      	str	r3, [sp, #12]
    1908:	9b01      	ldr	r3, [sp, #4]
    190a:	7b1b      	ldrb	r3, [r3, #12]
    190c:	461a      	mov	r2, r3
    190e:	9b03      	ldr	r3, [sp, #12]
    1910:	4293      	cmp	r3, r2
    1912:	d3d2      	bcc.n	18ba <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1914:	2300      	movs	r3, #0
    1916:	9303      	str	r3, [sp, #12]
    1918:	e044      	b.n	19a4 <Clock_Ip_InitClock+0x30c>
    191a:	bf00      	nop
    191c:	1fff8b84 	.word	0x1fff8b84
    1920:	0000b86c 	.word	0x0000b86c
    1924:	0000b85c 	.word	0x0000b85c
    1928:	0000be68 	.word	0x0000be68
    192c:	0000b7fc 	.word	0x0000b7fc
    1930:	0000be2c 	.word	0x0000be2c
    1934:	0000b7ec 	.word	0x0000b7ec
    1938:	0000bdc0 	.word	0x0000bdc0
    193c:	0000b84c 	.word	0x0000b84c
    1940:	0000bea0 	.word	0x0000bea0
    1944:	0000b7dc 	.word	0x0000b7dc
    1948:	0000bdb8 	.word	0x0000bdb8
    194c:	0000b7cc 	.word	0x0000b7cc
    1950:	0000bd7c 	.word	0x0000bd7c
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1954:	9901      	ldr	r1, [sp, #4]
    1956:	9a03      	ldr	r2, [sp, #12]
    1958:	4613      	mov	r3, r2
    195a:	005b      	lsls	r3, r3, #1
    195c:	4413      	add	r3, r2
    195e:	009b      	lsls	r3, r3, #2
    1960:	440b      	add	r3, r1
    1962:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1966:	681a      	ldr	r2, [r3, #0]
    1968:	49ac      	ldr	r1, [pc, #688]	; (1c1c <Clock_Ip_InitClock+0x584>)
    196a:	4613      	mov	r3, r2
    196c:	00db      	lsls	r3, r3, #3
    196e:	4413      	add	r3, r2
    1970:	440b      	add	r3, r1
    1972:	3301      	adds	r3, #1
    1974:	781b      	ldrb	r3, [r3, #0]
    1976:	461a      	mov	r2, r3
    1978:	4ba9      	ldr	r3, [pc, #676]	; (1c20 <Clock_Ip_InitClock+0x588>)
    197a:	5c9b      	ldrb	r3, [r3, r2]
    197c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    197e:	4aa9      	ldr	r2, [pc, #676]	; (1c24 <Clock_Ip_InitClock+0x58c>)
    1980:	9b02      	ldr	r3, [sp, #8]
    1982:	00db      	lsls	r3, r3, #3
    1984:	4413      	add	r3, r2
    1986:	6859      	ldr	r1, [r3, #4]
    1988:	9a03      	ldr	r2, [sp, #12]
    198a:	4613      	mov	r3, r2
    198c:	005b      	lsls	r3, r3, #1
    198e:	4413      	add	r3, r2
    1990:	009b      	lsls	r3, r3, #2
    1992:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1996:	9a01      	ldr	r2, [sp, #4]
    1998:	4413      	add	r3, r2
    199a:	4618      	mov	r0, r3
    199c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    199e:	9b03      	ldr	r3, [sp, #12]
    19a0:	3301      	adds	r3, #1
    19a2:	9303      	str	r3, [sp, #12]
    19a4:	9b01      	ldr	r3, [sp, #4]
    19a6:	7b5b      	ldrb	r3, [r3, #13]
    19a8:	461a      	mov	r2, r3
    19aa:	9b03      	ldr	r3, [sp, #12]
    19ac:	4293      	cmp	r3, r2
    19ae:	d3d1      	bcc.n	1954 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    19b0:	2300      	movs	r3, #0
    19b2:	9303      	str	r3, [sp, #12]
    19b4:	e029      	b.n	1a0a <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    19b6:	9901      	ldr	r1, [sp, #4]
    19b8:	9a03      	ldr	r2, [sp, #12]
    19ba:	4613      	mov	r3, r2
    19bc:	009b      	lsls	r3, r3, #2
    19be:	4413      	add	r3, r2
    19c0:	00db      	lsls	r3, r3, #3
    19c2:	440b      	add	r3, r1
    19c4:	3340      	adds	r3, #64	; 0x40
    19c6:	681a      	ldr	r2, [r3, #0]
    19c8:	4994      	ldr	r1, [pc, #592]	; (1c1c <Clock_Ip_InitClock+0x584>)
    19ca:	4613      	mov	r3, r2
    19cc:	00db      	lsls	r3, r3, #3
    19ce:	4413      	add	r3, r2
    19d0:	440b      	add	r3, r1
    19d2:	3301      	adds	r3, #1
    19d4:	781b      	ldrb	r3, [r3, #0]
    19d6:	461a      	mov	r2, r3
    19d8:	4b93      	ldr	r3, [pc, #588]	; (1c28 <Clock_Ip_InitClock+0x590>)
    19da:	5c9b      	ldrb	r3, [r3, r2]
    19dc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    19de:	4993      	ldr	r1, [pc, #588]	; (1c2c <Clock_Ip_InitClock+0x594>)
    19e0:	9a02      	ldr	r2, [sp, #8]
    19e2:	4613      	mov	r3, r2
    19e4:	009b      	lsls	r3, r3, #2
    19e6:	4413      	add	r3, r2
    19e8:	009b      	lsls	r3, r3, #2
    19ea:	440b      	add	r3, r1
    19ec:	3304      	adds	r3, #4
    19ee:	6819      	ldr	r1, [r3, #0]
    19f0:	9a03      	ldr	r2, [sp, #12]
    19f2:	4613      	mov	r3, r2
    19f4:	009b      	lsls	r3, r3, #2
    19f6:	4413      	add	r3, r2
    19f8:	00db      	lsls	r3, r3, #3
    19fa:	3340      	adds	r3, #64	; 0x40
    19fc:	9a01      	ldr	r2, [sp, #4]
    19fe:	4413      	add	r3, r2
    1a00:	4618      	mov	r0, r3
    1a02:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1a04:	9b03      	ldr	r3, [sp, #12]
    1a06:	3301      	adds	r3, #1
    1a08:	9303      	str	r3, [sp, #12]
    1a0a:	9b01      	ldr	r3, [sp, #4]
    1a0c:	7a9b      	ldrb	r3, [r3, #10]
    1a0e:	461a      	mov	r2, r3
    1a10:	9b03      	ldr	r3, [sp, #12]
    1a12:	4293      	cmp	r3, r2
    1a14:	d3cf      	bcc.n	19b6 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1a16:	2300      	movs	r3, #0
    1a18:	9303      	str	r3, [sp, #12]
    1a1a:	e029      	b.n	1a70 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1a1c:	9901      	ldr	r1, [sp, #4]
    1a1e:	9a03      	ldr	r2, [sp, #12]
    1a20:	4613      	mov	r3, r2
    1a22:	009b      	lsls	r3, r3, #2
    1a24:	4413      	add	r3, r2
    1a26:	009b      	lsls	r3, r3, #2
    1a28:	440b      	add	r3, r1
    1a2a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1a2e:	681a      	ldr	r2, [r3, #0]
    1a30:	497a      	ldr	r1, [pc, #488]	; (1c1c <Clock_Ip_InitClock+0x584>)
    1a32:	4613      	mov	r3, r2
    1a34:	00db      	lsls	r3, r3, #3
    1a36:	4413      	add	r3, r2
    1a38:	440b      	add	r3, r1
    1a3a:	3301      	adds	r3, #1
    1a3c:	781b      	ldrb	r3, [r3, #0]
    1a3e:	461a      	mov	r2, r3
    1a40:	4b7b      	ldr	r3, [pc, #492]	; (1c30 <Clock_Ip_InitClock+0x598>)
    1a42:	5c9b      	ldrb	r3, [r3, r2]
    1a44:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    1a46:	4a7b      	ldr	r2, [pc, #492]	; (1c34 <Clock_Ip_InitClock+0x59c>)
    1a48:	9b02      	ldr	r3, [sp, #8]
    1a4a:	011b      	lsls	r3, r3, #4
    1a4c:	4413      	add	r3, r2
    1a4e:	3304      	adds	r3, #4
    1a50:	681c      	ldr	r4, [r3, #0]
    1a52:	9a03      	ldr	r2, [sp, #12]
    1a54:	4613      	mov	r3, r2
    1a56:	009b      	lsls	r3, r3, #2
    1a58:	4413      	add	r3, r2
    1a5a:	009b      	lsls	r3, r3, #2
    1a5c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1a60:	9a01      	ldr	r2, [sp, #4]
    1a62:	4413      	add	r3, r2
    1a64:	9903      	ldr	r1, [sp, #12]
    1a66:	4618      	mov	r0, r3
    1a68:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1a6a:	9b03      	ldr	r3, [sp, #12]
    1a6c:	3301      	adds	r3, #1
    1a6e:	9303      	str	r3, [sp, #12]
    1a70:	9b01      	ldr	r3, [sp, #4]
    1a72:	7c9b      	ldrb	r3, [r3, #18]
    1a74:	461a      	mov	r2, r3
    1a76:	9b03      	ldr	r3, [sp, #12]
    1a78:	4293      	cmp	r3, r2
    1a7a:	d3cf      	bcc.n	1a1c <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1a7c:	2300      	movs	r3, #0
    1a7e:	9303      	str	r3, [sp, #12]
    1a80:	e02a      	b.n	1ad8 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1a82:	9901      	ldr	r1, [sp, #4]
    1a84:	9a03      	ldr	r2, [sp, #12]
    1a86:	4613      	mov	r3, r2
    1a88:	009b      	lsls	r3, r3, #2
    1a8a:	4413      	add	r3, r2
    1a8c:	009b      	lsls	r3, r3, #2
    1a8e:	440b      	add	r3, r1
    1a90:	332c      	adds	r3, #44	; 0x2c
    1a92:	681a      	ldr	r2, [r3, #0]
    1a94:	4961      	ldr	r1, [pc, #388]	; (1c1c <Clock_Ip_InitClock+0x584>)
    1a96:	4613      	mov	r3, r2
    1a98:	00db      	lsls	r3, r3, #3
    1a9a:	4413      	add	r3, r2
    1a9c:	440b      	add	r3, r1
    1a9e:	3301      	adds	r3, #1
    1aa0:	781b      	ldrb	r3, [r3, #0]
    1aa2:	461a      	mov	r2, r3
    1aa4:	4b64      	ldr	r3, [pc, #400]	; (1c38 <Clock_Ip_InitClock+0x5a0>)
    1aa6:	5c9b      	ldrb	r3, [r3, r2]
    1aa8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    1aaa:	4964      	ldr	r1, [pc, #400]	; (1c3c <Clock_Ip_InitClock+0x5a4>)
    1aac:	9a02      	ldr	r2, [sp, #8]
    1aae:	4613      	mov	r3, r2
    1ab0:	009b      	lsls	r3, r3, #2
    1ab2:	4413      	add	r3, r2
    1ab4:	009b      	lsls	r3, r3, #2
    1ab6:	440b      	add	r3, r1
    1ab8:	3308      	adds	r3, #8
    1aba:	6819      	ldr	r1, [r3, #0]
    1abc:	9a03      	ldr	r2, [sp, #12]
    1abe:	4613      	mov	r3, r2
    1ac0:	009b      	lsls	r3, r3, #2
    1ac2:	4413      	add	r3, r2
    1ac4:	009b      	lsls	r3, r3, #2
    1ac6:	3328      	adds	r3, #40	; 0x28
    1ac8:	9a01      	ldr	r2, [sp, #4]
    1aca:	4413      	add	r3, r2
    1acc:	3304      	adds	r3, #4
    1ace:	4618      	mov	r0, r3
    1ad0:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1ad2:	9b03      	ldr	r3, [sp, #12]
    1ad4:	3301      	adds	r3, #1
    1ad6:	9303      	str	r3, [sp, #12]
    1ad8:	9b01      	ldr	r3, [sp, #4]
    1ada:	7a5b      	ldrb	r3, [r3, #9]
    1adc:	461a      	mov	r2, r3
    1ade:	9b03      	ldr	r3, [sp, #12]
    1ae0:	4293      	cmp	r3, r2
    1ae2:	d3ce      	bcc.n	1a82 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1ae4:	2300      	movs	r3, #0
    1ae6:	9303      	str	r3, [sp, #12]
    1ae8:	e029      	b.n	1b3e <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1aea:	9901      	ldr	r1, [sp, #4]
    1aec:	9a03      	ldr	r2, [sp, #12]
    1aee:	4613      	mov	r3, r2
    1af0:	009b      	lsls	r3, r3, #2
    1af2:	4413      	add	r3, r2
    1af4:	00db      	lsls	r3, r3, #3
    1af6:	440b      	add	r3, r1
    1af8:	3340      	adds	r3, #64	; 0x40
    1afa:	681a      	ldr	r2, [r3, #0]
    1afc:	4947      	ldr	r1, [pc, #284]	; (1c1c <Clock_Ip_InitClock+0x584>)
    1afe:	4613      	mov	r3, r2
    1b00:	00db      	lsls	r3, r3, #3
    1b02:	4413      	add	r3, r2
    1b04:	440b      	add	r3, r1
    1b06:	3301      	adds	r3, #1
    1b08:	781b      	ldrb	r3, [r3, #0]
    1b0a:	461a      	mov	r2, r3
    1b0c:	4b46      	ldr	r3, [pc, #280]	; (1c28 <Clock_Ip_InitClock+0x590>)
    1b0e:	5c9b      	ldrb	r3, [r3, r2]
    1b10:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    1b12:	4946      	ldr	r1, [pc, #280]	; (1c2c <Clock_Ip_InitClock+0x594>)
    1b14:	9a02      	ldr	r2, [sp, #8]
    1b16:	4613      	mov	r3, r2
    1b18:	009b      	lsls	r3, r3, #2
    1b1a:	4413      	add	r3, r2
    1b1c:	009b      	lsls	r3, r3, #2
    1b1e:	440b      	add	r3, r1
    1b20:	330c      	adds	r3, #12
    1b22:	6819      	ldr	r1, [r3, #0]
    1b24:	9a03      	ldr	r2, [sp, #12]
    1b26:	4613      	mov	r3, r2
    1b28:	009b      	lsls	r3, r3, #2
    1b2a:	4413      	add	r3, r2
    1b2c:	00db      	lsls	r3, r3, #3
    1b2e:	3340      	adds	r3, #64	; 0x40
    1b30:	9a01      	ldr	r2, [sp, #4]
    1b32:	4413      	add	r3, r2
    1b34:	4618      	mov	r0, r3
    1b36:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1b38:	9b03      	ldr	r3, [sp, #12]
    1b3a:	3301      	adds	r3, #1
    1b3c:	9303      	str	r3, [sp, #12]
    1b3e:	9b01      	ldr	r3, [sp, #4]
    1b40:	7a9b      	ldrb	r3, [r3, #10]
    1b42:	461a      	mov	r2, r3
    1b44:	9b03      	ldr	r3, [sp, #12]
    1b46:	4293      	cmp	r3, r2
    1b48:	d3cf      	bcc.n	1aea <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1b4a:	2300      	movs	r3, #0
    1b4c:	9303      	str	r3, [sp, #12]
    1b4e:	e025      	b.n	1b9c <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    1b50:	9a01      	ldr	r2, [sp, #4]
    1b52:	9b03      	ldr	r3, [sp, #12]
    1b54:	3324      	adds	r3, #36	; 0x24
    1b56:	011b      	lsls	r3, r3, #4
    1b58:	4413      	add	r3, r2
    1b5a:	3304      	adds	r3, #4
    1b5c:	681a      	ldr	r2, [r3, #0]
    1b5e:	492f      	ldr	r1, [pc, #188]	; (1c1c <Clock_Ip_InitClock+0x584>)
    1b60:	4613      	mov	r3, r2
    1b62:	00db      	lsls	r3, r3, #3
    1b64:	4413      	add	r3, r2
    1b66:	440b      	add	r3, r1
    1b68:	3301      	adds	r3, #1
    1b6a:	781b      	ldrb	r3, [r3, #0]
    1b6c:	461a      	mov	r2, r3
    1b6e:	4b34      	ldr	r3, [pc, #208]	; (1c40 <Clock_Ip_InitClock+0x5a8>)
    1b70:	5c9b      	ldrb	r3, [r3, r2]
    1b72:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    1b74:	4933      	ldr	r1, [pc, #204]	; (1c44 <Clock_Ip_InitClock+0x5ac>)
    1b76:	9a02      	ldr	r2, [sp, #8]
    1b78:	4613      	mov	r3, r2
    1b7a:	005b      	lsls	r3, r3, #1
    1b7c:	4413      	add	r3, r2
    1b7e:	009b      	lsls	r3, r3, #2
    1b80:	440b      	add	r3, r1
    1b82:	3304      	adds	r3, #4
    1b84:	681b      	ldr	r3, [r3, #0]
    1b86:	9a03      	ldr	r2, [sp, #12]
    1b88:	3224      	adds	r2, #36	; 0x24
    1b8a:	0112      	lsls	r2, r2, #4
    1b8c:	9901      	ldr	r1, [sp, #4]
    1b8e:	440a      	add	r2, r1
    1b90:	3204      	adds	r2, #4
    1b92:	4610      	mov	r0, r2
    1b94:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1b96:	9b03      	ldr	r3, [sp, #12]
    1b98:	3301      	adds	r3, #1
    1b9a:	9303      	str	r3, [sp, #12]
    1b9c:	9b01      	ldr	r3, [sp, #4]
    1b9e:	7b9b      	ldrb	r3, [r3, #14]
    1ba0:	461a      	mov	r2, r3
    1ba2:	9b03      	ldr	r3, [sp, #12]
    1ba4:	4293      	cmp	r3, r2
    1ba6:	d3d3      	bcc.n	1b50 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    1ba8:	4b27      	ldr	r3, [pc, #156]	; (1c48 <Clock_Ip_InitClock+0x5b0>)
    1baa:	2200      	movs	r2, #0
    1bac:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    1bae:	4b26      	ldr	r3, [pc, #152]	; (1c48 <Clock_Ip_InitClock+0x5b0>)
    1bb0:	2200      	movs	r2, #0
    1bb2:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    1bb4:	4b24      	ldr	r3, [pc, #144]	; (1c48 <Clock_Ip_InitClock+0x5b0>)
    1bb6:	2201      	movs	r2, #1
    1bb8:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    1bba:	4b23      	ldr	r3, [pc, #140]	; (1c48 <Clock_Ip_InitClock+0x5b0>)
    1bbc:	2200      	movs	r2, #0
    1bbe:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    1bc0:	f000 fa9c 	bl	20fc <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1bc4:	2300      	movs	r3, #0
    1bc6:	9303      	str	r3, [sp, #12]
    1bc8:	e04c      	b.n	1c64 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    1bca:	9a01      	ldr	r2, [sp, #4]
    1bcc:	9b03      	ldr	r3, [sp, #12]
    1bce:	330d      	adds	r3, #13
    1bd0:	00db      	lsls	r3, r3, #3
    1bd2:	4413      	add	r3, r2
    1bd4:	685b      	ldr	r3, [r3, #4]
    1bd6:	4a1d      	ldr	r2, [pc, #116]	; (1c4c <Clock_Ip_InitClock+0x5b4>)
    1bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1bdc:	2b03      	cmp	r3, #3
    1bde:	d03b      	beq.n	1c58 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1be0:	9b01      	ldr	r3, [sp, #4]
    1be2:	9a03      	ldr	r2, [sp, #12]
    1be4:	320d      	adds	r2, #13
    1be6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1bea:	490c      	ldr	r1, [pc, #48]	; (1c1c <Clock_Ip_InitClock+0x584>)
    1bec:	4613      	mov	r3, r2
    1bee:	00db      	lsls	r3, r3, #3
    1bf0:	4413      	add	r3, r2
    1bf2:	440b      	add	r3, r1
    1bf4:	3301      	adds	r3, #1
    1bf6:	781b      	ldrb	r3, [r3, #0]
    1bf8:	461a      	mov	r2, r3
    1bfa:	4b15      	ldr	r3, [pc, #84]	; (1c50 <Clock_Ip_InitClock+0x5b8>)
    1bfc:	5c9b      	ldrb	r3, [r3, r2]
    1bfe:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    1c00:	4a14      	ldr	r2, [pc, #80]	; (1c54 <Clock_Ip_InitClock+0x5bc>)
    1c02:	9b02      	ldr	r3, [sp, #8]
    1c04:	00db      	lsls	r3, r3, #3
    1c06:	4413      	add	r3, r2
    1c08:	685b      	ldr	r3, [r3, #4]
    1c0a:	9a03      	ldr	r2, [sp, #12]
    1c0c:	320d      	adds	r2, #13
    1c0e:	00d2      	lsls	r2, r2, #3
    1c10:	9901      	ldr	r1, [sp, #4]
    1c12:	440a      	add	r2, r1
    1c14:	4610      	mov	r0, r2
    1c16:	4798      	blx	r3
    1c18:	e021      	b.n	1c5e <Clock_Ip_InitClock+0x5c6>
    1c1a:	bf00      	nop
    1c1c:	0000b86c 	.word	0x0000b86c
    1c20:	0000b7dc 	.word	0x0000b7dc
    1c24:	0000bdb8 	.word	0x0000bdb8
    1c28:	0000b82c 	.word	0x0000b82c
    1c2c:	0000be78 	.word	0x0000be78
    1c30:	0000b85c 	.word	0x0000b85c
    1c34:	0000be68 	.word	0x0000be68
    1c38:	0000b7ec 	.word	0x0000b7ec
    1c3c:	0000bdc0 	.word	0x0000bdc0
    1c40:	0000b81c 	.word	0x0000b81c
    1c44:	0000bde8 	.word	0x0000bde8
    1c48:	1fff8b8c 	.word	0x1fff8b8c
    1c4c:	0000bcb8 	.word	0x0000bcb8
    1c50:	0000b83c 	.word	0x0000b83c
    1c54:	0000bea4 	.word	0x0000bea4
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    1c58:	4b3a      	ldr	r3, [pc, #232]	; (1d44 <Clock_Ip_InitClock+0x6ac>)
    1c5a:	2201      	movs	r2, #1
    1c5c:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1c5e:	9b03      	ldr	r3, [sp, #12]
    1c60:	3301      	adds	r3, #1
    1c62:	9303      	str	r3, [sp, #12]
    1c64:	9b01      	ldr	r3, [sp, #4]
    1c66:	7adb      	ldrb	r3, [r3, #11]
    1c68:	461a      	mov	r2, r3
    1c6a:	9b03      	ldr	r3, [sp, #12]
    1c6c:	4293      	cmp	r3, r2
    1c6e:	d3ac      	bcc.n	1bca <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    1c70:	4b34      	ldr	r3, [pc, #208]	; (1d44 <Clock_Ip_InitClock+0x6ac>)
    1c72:	781b      	ldrb	r3, [r3, #0]
    1c74:	f083 0301 	eor.w	r3, r3, #1
    1c78:	b2db      	uxtb	r3, r3
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d05e      	beq.n	1d3c <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1c7e:	2300      	movs	r3, #0
    1c80:	9303      	str	r3, [sp, #12]
    1c82:	e01f      	b.n	1cc4 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1c84:	9a01      	ldr	r2, [sp, #4]
    1c86:	9b03      	ldr	r3, [sp, #12]
    1c88:	334e      	adds	r3, #78	; 0x4e
    1c8a:	00db      	lsls	r3, r3, #3
    1c8c:	4413      	add	r3, r2
    1c8e:	685a      	ldr	r2, [r3, #4]
    1c90:	492d      	ldr	r1, [pc, #180]	; (1d48 <Clock_Ip_InitClock+0x6b0>)
    1c92:	4613      	mov	r3, r2
    1c94:	00db      	lsls	r3, r3, #3
    1c96:	4413      	add	r3, r2
    1c98:	440b      	add	r3, r1
    1c9a:	3301      	adds	r3, #1
    1c9c:	781b      	ldrb	r3, [r3, #0]
    1c9e:	461a      	mov	r2, r3
    1ca0:	4b2a      	ldr	r3, [pc, #168]	; (1d4c <Clock_Ip_InitClock+0x6b4>)
    1ca2:	5c9b      	ldrb	r3, [r3, r2]
    1ca4:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    1ca6:	4a2a      	ldr	r2, [pc, #168]	; (1d50 <Clock_Ip_InitClock+0x6b8>)
    1ca8:	9b02      	ldr	r3, [sp, #8]
    1caa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1cae:	9a03      	ldr	r2, [sp, #12]
    1cb0:	324e      	adds	r2, #78	; 0x4e
    1cb2:	00d2      	lsls	r2, r2, #3
    1cb4:	9901      	ldr	r1, [sp, #4]
    1cb6:	440a      	add	r2, r1
    1cb8:	3204      	adds	r2, #4
    1cba:	4610      	mov	r0, r2
    1cbc:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1cbe:	9b03      	ldr	r3, [sp, #12]
    1cc0:	3301      	adds	r3, #1
    1cc2:	9303      	str	r3, [sp, #12]
    1cc4:	9b01      	ldr	r3, [sp, #4]
    1cc6:	7c1b      	ldrb	r3, [r3, #16]
    1cc8:	461a      	mov	r2, r3
    1cca:	9b03      	ldr	r3, [sp, #12]
    1ccc:	4293      	cmp	r3, r2
    1cce:	d3d9      	bcc.n	1c84 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1cd0:	2300      	movs	r3, #0
    1cd2:	9303      	str	r3, [sp, #12]
    1cd4:	e028      	b.n	1d28 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1cd6:	9901      	ldr	r1, [sp, #4]
    1cd8:	9a03      	ldr	r2, [sp, #12]
    1cda:	4613      	mov	r3, r2
    1cdc:	009b      	lsls	r3, r3, #2
    1cde:	4413      	add	r3, r2
    1ce0:	009b      	lsls	r3, r3, #2
    1ce2:	440b      	add	r3, r1
    1ce4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1ce8:	681a      	ldr	r2, [r3, #0]
    1cea:	4917      	ldr	r1, [pc, #92]	; (1d48 <Clock_Ip_InitClock+0x6b0>)
    1cec:	4613      	mov	r3, r2
    1cee:	00db      	lsls	r3, r3, #3
    1cf0:	4413      	add	r3, r2
    1cf2:	440b      	add	r3, r1
    1cf4:	3301      	adds	r3, #1
    1cf6:	781b      	ldrb	r3, [r3, #0]
    1cf8:	461a      	mov	r2, r3
    1cfa:	4b16      	ldr	r3, [pc, #88]	; (1d54 <Clock_Ip_InitClock+0x6bc>)
    1cfc:	5c9b      	ldrb	r3, [r3, r2]
    1cfe:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    1d00:	4a15      	ldr	r2, [pc, #84]	; (1d58 <Clock_Ip_InitClock+0x6c0>)
    1d02:	9b02      	ldr	r3, [sp, #8]
    1d04:	011b      	lsls	r3, r3, #4
    1d06:	4413      	add	r3, r2
    1d08:	330c      	adds	r3, #12
    1d0a:	6819      	ldr	r1, [r3, #0]
    1d0c:	9a03      	ldr	r2, [sp, #12]
    1d0e:	4613      	mov	r3, r2
    1d10:	009b      	lsls	r3, r3, #2
    1d12:	4413      	add	r3, r2
    1d14:	009b      	lsls	r3, r3, #2
    1d16:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1d1a:	9a01      	ldr	r2, [sp, #4]
    1d1c:	4413      	add	r3, r2
    1d1e:	4618      	mov	r0, r3
    1d20:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1d22:	9b03      	ldr	r3, [sp, #12]
    1d24:	3301      	adds	r3, #1
    1d26:	9303      	str	r3, [sp, #12]
    1d28:	9b01      	ldr	r3, [sp, #4]
    1d2a:	7c9b      	ldrb	r3, [r3, #18]
    1d2c:	461a      	mov	r2, r3
    1d2e:	9b03      	ldr	r3, [sp, #12]
    1d30:	4293      	cmp	r3, r2
    1d32:	d3d0      	bcc.n	1cd6 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1d34:	2104      	movs	r1, #4
    1d36:	9801      	ldr	r0, [sp, #4]
    1d38:	f002 ff48 	bl	4bcc <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    1d3c:	bf00      	nop
    1d3e:	b004      	add	sp, #16
    1d40:	bd10      	pop	{r4, pc}
    1d42:	bf00      	nop
    1d44:	1fff8b8c 	.word	0x1fff8b8c
    1d48:	0000b86c 	.word	0x0000b86c
    1d4c:	0000b80c 	.word	0x0000b80c
    1d50:	0000bdf4 	.word	0x0000bdf4
    1d54:	0000b85c 	.word	0x0000b85c
    1d58:	0000be68 	.word	0x0000be68

00001d5c <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    1d5c:	b500      	push	{lr}
    1d5e:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    1d60:	2302      	movs	r3, #2
    1d62:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1d64:	2300      	movs	r3, #0
    1d66:	9304      	str	r3, [sp, #16]
    1d68:	e02c      	b.n	1dc4 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    1d6a:	4a36      	ldr	r2, [pc, #216]	; (1e44 <Clock_Ip_GetPllStatus+0xe8>)
    1d6c:	9b04      	ldr	r3, [sp, #16]
    1d6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1d72:	4935      	ldr	r1, [pc, #212]	; (1e48 <Clock_Ip_GetPllStatus+0xec>)
    1d74:	4613      	mov	r3, r2
    1d76:	00db      	lsls	r3, r3, #3
    1d78:	4413      	add	r3, r2
    1d7a:	440b      	add	r3, r1
    1d7c:	3301      	adds	r3, #1
    1d7e:	781b      	ldrb	r3, [r3, #0]
    1d80:	461a      	mov	r2, r3
    1d82:	4b32      	ldr	r3, [pc, #200]	; (1e4c <Clock_Ip_GetPllStatus+0xf0>)
    1d84:	5c9b      	ldrb	r3, [r3, r2]
    1d86:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    1d88:	4931      	ldr	r1, [pc, #196]	; (1e50 <Clock_Ip_GetPllStatus+0xf4>)
    1d8a:	9a03      	ldr	r2, [sp, #12]
    1d8c:	4613      	mov	r3, r2
    1d8e:	009b      	lsls	r3, r3, #2
    1d90:	4413      	add	r3, r2
    1d92:	009b      	lsls	r3, r3, #2
    1d94:	440b      	add	r3, r1
    1d96:	3308      	adds	r3, #8
    1d98:	681b      	ldr	r3, [r3, #0]
    1d9a:	492a      	ldr	r1, [pc, #168]	; (1e44 <Clock_Ip_GetPllStatus+0xe8>)
    1d9c:	9a04      	ldr	r2, [sp, #16]
    1d9e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1da2:	4610      	mov	r0, r2
    1da4:	4798      	blx	r3
    1da6:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    1da8:	9b02      	ldr	r3, [sp, #8]
    1daa:	2b01      	cmp	r3, #1
    1dac:	d102      	bne.n	1db4 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    1dae:	2301      	movs	r3, #1
    1db0:	9305      	str	r3, [sp, #20]
            break;
    1db2:	e00d      	b.n	1dd0 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    1db4:	9b02      	ldr	r3, [sp, #8]
    1db6:	2b02      	cmp	r3, #2
    1db8:	d101      	bne.n	1dbe <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    1dba:	2300      	movs	r3, #0
    1dbc:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1dbe:	9b04      	ldr	r3, [sp, #16]
    1dc0:	3301      	adds	r3, #1
    1dc2:	9304      	str	r3, [sp, #16]
    1dc4:	4b23      	ldr	r3, [pc, #140]	; (1e54 <Clock_Ip_GetPllStatus+0xf8>)
    1dc6:	789b      	ldrb	r3, [r3, #2]
    1dc8:	461a      	mov	r2, r3
    1dca:	9b04      	ldr	r3, [sp, #16]
    1dcc:	4293      	cmp	r3, r2
    1dce:	d3cc      	bcc.n	1d6a <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    1dd0:	9b05      	ldr	r3, [sp, #20]
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d130      	bne.n	1e38 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1dd6:	2300      	movs	r3, #0
    1dd8:	9304      	str	r3, [sp, #16]
    1dda:	e027      	b.n	1e2c <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    1ddc:	4a1e      	ldr	r2, [pc, #120]	; (1e58 <Clock_Ip_GetPllStatus+0xfc>)
    1dde:	9b04      	ldr	r3, [sp, #16]
    1de0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1de4:	4918      	ldr	r1, [pc, #96]	; (1e48 <Clock_Ip_GetPllStatus+0xec>)
    1de6:	4613      	mov	r3, r2
    1de8:	00db      	lsls	r3, r3, #3
    1dea:	4413      	add	r3, r2
    1dec:	440b      	add	r3, r1
    1dee:	3301      	adds	r3, #1
    1df0:	781b      	ldrb	r3, [r3, #0]
    1df2:	461a      	mov	r2, r3
    1df4:	4b19      	ldr	r3, [pc, #100]	; (1e5c <Clock_Ip_GetPllStatus+0x100>)
    1df6:	5c9b      	ldrb	r3, [r3, r2]
    1df8:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    1dfa:	4919      	ldr	r1, [pc, #100]	; (1e60 <Clock_Ip_GetPllStatus+0x104>)
    1dfc:	9a03      	ldr	r2, [sp, #12]
    1dfe:	4613      	mov	r3, r2
    1e00:	005b      	lsls	r3, r3, #1
    1e02:	4413      	add	r3, r2
    1e04:	009b      	lsls	r3, r3, #2
    1e06:	440b      	add	r3, r1
    1e08:	3308      	adds	r3, #8
    1e0a:	681b      	ldr	r3, [r3, #0]
    1e0c:	4912      	ldr	r1, [pc, #72]	; (1e58 <Clock_Ip_GetPllStatus+0xfc>)
    1e0e:	9a04      	ldr	r2, [sp, #16]
    1e10:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1e14:	4610      	mov	r0, r2
    1e16:	4798      	blx	r3
    1e18:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    1e1a:	9b01      	ldr	r3, [sp, #4]
    1e1c:	2b01      	cmp	r3, #1
    1e1e:	d102      	bne.n	1e26 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    1e20:	2301      	movs	r3, #1
    1e22:	9305      	str	r3, [sp, #20]
                break;
    1e24:	e008      	b.n	1e38 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1e26:	9b04      	ldr	r3, [sp, #16]
    1e28:	3301      	adds	r3, #1
    1e2a:	9304      	str	r3, [sp, #16]
    1e2c:	4b09      	ldr	r3, [pc, #36]	; (1e54 <Clock_Ip_GetPllStatus+0xf8>)
    1e2e:	78db      	ldrb	r3, [r3, #3]
    1e30:	461a      	mov	r2, r3
    1e32:	9b04      	ldr	r3, [sp, #16]
    1e34:	4293      	cmp	r3, r2
    1e36:	d3d1      	bcc.n	1ddc <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    1e38:	9b05      	ldr	r3, [sp, #20]
}
    1e3a:	4618      	mov	r0, r3
    1e3c:	b007      	add	sp, #28
    1e3e:	f85d fb04 	ldr.w	pc, [sp], #4
    1e42:	bf00      	nop
    1e44:	0000bd74 	.word	0x0000bd74
    1e48:	0000b86c 	.word	0x0000b86c
    1e4c:	0000b82c 	.word	0x0000b82c
    1e50:	0000be78 	.word	0x0000be78
    1e54:	1fff8b8c 	.word	0x1fff8b8c
    1e58:	0000bd78 	.word	0x0000bd78
    1e5c:	0000b81c 	.word	0x0000b81c
    1e60:	0000bde8 	.word	0x0000bde8

00001e64 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    1e64:	b500      	push	{lr}
    1e66:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1e68:	4b55      	ldr	r3, [pc, #340]	; (1fc0 <Clock_Ip_DistributePll+0x15c>)
    1e6a:	681b      	ldr	r3, [r3, #0]
    1e6c:	2b00      	cmp	r3, #0
    1e6e:	f000 80a2 	beq.w	1fb6 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1e72:	2300      	movs	r3, #0
    1e74:	9301      	str	r3, [sp, #4]
    1e76:	e02c      	b.n	1ed2 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    1e78:	4b51      	ldr	r3, [pc, #324]	; (1fc0 <Clock_Ip_DistributePll+0x15c>)
    1e7a:	681a      	ldr	r2, [r3, #0]
    1e7c:	9b01      	ldr	r3, [sp, #4]
    1e7e:	330d      	adds	r3, #13
    1e80:	00db      	lsls	r3, r3, #3
    1e82:	4413      	add	r3, r2
    1e84:	685b      	ldr	r3, [r3, #4]
    1e86:	4a4f      	ldr	r2, [pc, #316]	; (1fc4 <Clock_Ip_DistributePll+0x160>)
    1e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e8c:	2b03      	cmp	r3, #3
    1e8e:	d11d      	bne.n	1ecc <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1e90:	4b4b      	ldr	r3, [pc, #300]	; (1fc0 <Clock_Ip_DistributePll+0x15c>)
    1e92:	681b      	ldr	r3, [r3, #0]
    1e94:	9a01      	ldr	r2, [sp, #4]
    1e96:	320d      	adds	r2, #13
    1e98:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1e9c:	494a      	ldr	r1, [pc, #296]	; (1fc8 <Clock_Ip_DistributePll+0x164>)
    1e9e:	4613      	mov	r3, r2
    1ea0:	00db      	lsls	r3, r3, #3
    1ea2:	4413      	add	r3, r2
    1ea4:	440b      	add	r3, r1
    1ea6:	3301      	adds	r3, #1
    1ea8:	781b      	ldrb	r3, [r3, #0]
    1eaa:	461a      	mov	r2, r3
    1eac:	4b47      	ldr	r3, [pc, #284]	; (1fcc <Clock_Ip_DistributePll+0x168>)
    1eae:	5c9b      	ldrb	r3, [r3, r2]
    1eb0:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    1eb2:	4a47      	ldr	r2, [pc, #284]	; (1fd0 <Clock_Ip_DistributePll+0x16c>)
    1eb4:	9b00      	ldr	r3, [sp, #0]
    1eb6:	00db      	lsls	r3, r3, #3
    1eb8:	4413      	add	r3, r2
    1eba:	685b      	ldr	r3, [r3, #4]
    1ebc:	4a40      	ldr	r2, [pc, #256]	; (1fc0 <Clock_Ip_DistributePll+0x15c>)
    1ebe:	6811      	ldr	r1, [r2, #0]
    1ec0:	9a01      	ldr	r2, [sp, #4]
    1ec2:	320d      	adds	r2, #13
    1ec4:	00d2      	lsls	r2, r2, #3
    1ec6:	440a      	add	r2, r1
    1ec8:	4610      	mov	r0, r2
    1eca:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1ecc:	9b01      	ldr	r3, [sp, #4]
    1ece:	3301      	adds	r3, #1
    1ed0:	9301      	str	r3, [sp, #4]
    1ed2:	4b3b      	ldr	r3, [pc, #236]	; (1fc0 <Clock_Ip_DistributePll+0x15c>)
    1ed4:	681b      	ldr	r3, [r3, #0]
    1ed6:	7adb      	ldrb	r3, [r3, #11]
    1ed8:	461a      	mov	r2, r3
    1eda:	9b01      	ldr	r3, [sp, #4]
    1edc:	4293      	cmp	r3, r2
    1ede:	d3cb      	bcc.n	1e78 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    1ee0:	4b3c      	ldr	r3, [pc, #240]	; (1fd4 <Clock_Ip_DistributePll+0x170>)
    1ee2:	781b      	ldrb	r3, [r3, #0]
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	d066      	beq.n	1fb6 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1ee8:	2300      	movs	r3, #0
    1eea:	9301      	str	r3, [sp, #4]
    1eec:	e021      	b.n	1f32 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1eee:	4b34      	ldr	r3, [pc, #208]	; (1fc0 <Clock_Ip_DistributePll+0x15c>)
    1ef0:	681a      	ldr	r2, [r3, #0]
    1ef2:	9b01      	ldr	r3, [sp, #4]
    1ef4:	334e      	adds	r3, #78	; 0x4e
    1ef6:	00db      	lsls	r3, r3, #3
    1ef8:	4413      	add	r3, r2
    1efa:	685a      	ldr	r2, [r3, #4]
    1efc:	4932      	ldr	r1, [pc, #200]	; (1fc8 <Clock_Ip_DistributePll+0x164>)
    1efe:	4613      	mov	r3, r2
    1f00:	00db      	lsls	r3, r3, #3
    1f02:	4413      	add	r3, r2
    1f04:	440b      	add	r3, r1
    1f06:	3301      	adds	r3, #1
    1f08:	781b      	ldrb	r3, [r3, #0]
    1f0a:	461a      	mov	r2, r3
    1f0c:	4b32      	ldr	r3, [pc, #200]	; (1fd8 <Clock_Ip_DistributePll+0x174>)
    1f0e:	5c9b      	ldrb	r3, [r3, r2]
    1f10:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    1f12:	4a32      	ldr	r2, [pc, #200]	; (1fdc <Clock_Ip_DistributePll+0x178>)
    1f14:	9b00      	ldr	r3, [sp, #0]
    1f16:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f1a:	4a29      	ldr	r2, [pc, #164]	; (1fc0 <Clock_Ip_DistributePll+0x15c>)
    1f1c:	6811      	ldr	r1, [r2, #0]
    1f1e:	9a01      	ldr	r2, [sp, #4]
    1f20:	324e      	adds	r2, #78	; 0x4e
    1f22:	00d2      	lsls	r2, r2, #3
    1f24:	440a      	add	r2, r1
    1f26:	3204      	adds	r2, #4
    1f28:	4610      	mov	r0, r2
    1f2a:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1f2c:	9b01      	ldr	r3, [sp, #4]
    1f2e:	3301      	adds	r3, #1
    1f30:	9301      	str	r3, [sp, #4]
    1f32:	4b23      	ldr	r3, [pc, #140]	; (1fc0 <Clock_Ip_DistributePll+0x15c>)
    1f34:	681b      	ldr	r3, [r3, #0]
    1f36:	7c1b      	ldrb	r3, [r3, #16]
    1f38:	461a      	mov	r2, r3
    1f3a:	9b01      	ldr	r3, [sp, #4]
    1f3c:	4293      	cmp	r3, r2
    1f3e:	d3d6      	bcc.n	1eee <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1f40:	2300      	movs	r3, #0
    1f42:	9301      	str	r3, [sp, #4]
    1f44:	e02a      	b.n	1f9c <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1f46:	4b1e      	ldr	r3, [pc, #120]	; (1fc0 <Clock_Ip_DistributePll+0x15c>)
    1f48:	6819      	ldr	r1, [r3, #0]
    1f4a:	9a01      	ldr	r2, [sp, #4]
    1f4c:	4613      	mov	r3, r2
    1f4e:	009b      	lsls	r3, r3, #2
    1f50:	4413      	add	r3, r2
    1f52:	009b      	lsls	r3, r3, #2
    1f54:	440b      	add	r3, r1
    1f56:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1f5a:	681a      	ldr	r2, [r3, #0]
    1f5c:	491a      	ldr	r1, [pc, #104]	; (1fc8 <Clock_Ip_DistributePll+0x164>)
    1f5e:	4613      	mov	r3, r2
    1f60:	00db      	lsls	r3, r3, #3
    1f62:	4413      	add	r3, r2
    1f64:	440b      	add	r3, r1
    1f66:	3301      	adds	r3, #1
    1f68:	781b      	ldrb	r3, [r3, #0]
    1f6a:	461a      	mov	r2, r3
    1f6c:	4b1c      	ldr	r3, [pc, #112]	; (1fe0 <Clock_Ip_DistributePll+0x17c>)
    1f6e:	5c9b      	ldrb	r3, [r3, r2]
    1f70:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    1f72:	4a1c      	ldr	r2, [pc, #112]	; (1fe4 <Clock_Ip_DistributePll+0x180>)
    1f74:	9b00      	ldr	r3, [sp, #0]
    1f76:	011b      	lsls	r3, r3, #4
    1f78:	4413      	add	r3, r2
    1f7a:	330c      	adds	r3, #12
    1f7c:	6819      	ldr	r1, [r3, #0]
    1f7e:	4b10      	ldr	r3, [pc, #64]	; (1fc0 <Clock_Ip_DistributePll+0x15c>)
    1f80:	6818      	ldr	r0, [r3, #0]
    1f82:	9a01      	ldr	r2, [sp, #4]
    1f84:	4613      	mov	r3, r2
    1f86:	009b      	lsls	r3, r3, #2
    1f88:	4413      	add	r3, r2
    1f8a:	009b      	lsls	r3, r3, #2
    1f8c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1f90:	4403      	add	r3, r0
    1f92:	4618      	mov	r0, r3
    1f94:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1f96:	9b01      	ldr	r3, [sp, #4]
    1f98:	3301      	adds	r3, #1
    1f9a:	9301      	str	r3, [sp, #4]
    1f9c:	4b08      	ldr	r3, [pc, #32]	; (1fc0 <Clock_Ip_DistributePll+0x15c>)
    1f9e:	681b      	ldr	r3, [r3, #0]
    1fa0:	7c9b      	ldrb	r3, [r3, #18]
    1fa2:	461a      	mov	r2, r3
    1fa4:	9b01      	ldr	r3, [sp, #4]
    1fa6:	4293      	cmp	r3, r2
    1fa8:	d3cd      	bcc.n	1f46 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1faa:	4b05      	ldr	r3, [pc, #20]	; (1fc0 <Clock_Ip_DistributePll+0x15c>)
    1fac:	681b      	ldr	r3, [r3, #0]
    1fae:	2104      	movs	r1, #4
    1fb0:	4618      	mov	r0, r3
    1fb2:	f002 fe0b 	bl	4bcc <Clock_Ip_Command>
        }
    }
}
    1fb6:	bf00      	nop
    1fb8:	b003      	add	sp, #12
    1fba:	f85d fb04 	ldr.w	pc, [sp], #4
    1fbe:	bf00      	nop
    1fc0:	1fff8b84 	.word	0x1fff8b84
    1fc4:	0000bcb8 	.word	0x0000bcb8
    1fc8:	0000b86c 	.word	0x0000b86c
    1fcc:	0000b83c 	.word	0x0000b83c
    1fd0:	0000bea4 	.word	0x0000bea4
    1fd4:	1fff8b8c 	.word	0x1fff8b8c
    1fd8:	0000b80c 	.word	0x0000b80c
    1fdc:	0000bdf4 	.word	0x0000bdf4
    1fe0:	0000b85c 	.word	0x0000b85c
    1fe4:	0000be68 	.word	0x0000be68

00001fe8 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    1fe8:	b500      	push	{lr}
    1fea:	b085      	sub	sp, #20
    1fec:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1fee:	490c      	ldr	r1, [pc, #48]	; (2020 <Clock_Ip_DisableClockMonitor+0x38>)
    1ff0:	9a01      	ldr	r2, [sp, #4]
    1ff2:	4613      	mov	r3, r2
    1ff4:	00db      	lsls	r3, r3, #3
    1ff6:	4413      	add	r3, r2
    1ff8:	440b      	add	r3, r1
    1ffa:	3301      	adds	r3, #1
    1ffc:	781b      	ldrb	r3, [r3, #0]
    1ffe:	461a      	mov	r2, r3
    2000:	4b08      	ldr	r3, [pc, #32]	; (2024 <Clock_Ip_DisableClockMonitor+0x3c>)
    2002:	5c9b      	ldrb	r3, [r3, r2]
    2004:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2006:	4a08      	ldr	r2, [pc, #32]	; (2028 <Clock_Ip_DisableClockMonitor+0x40>)
    2008:	9b03      	ldr	r3, [sp, #12]
    200a:	011b      	lsls	r3, r3, #4
    200c:	4413      	add	r3, r2
    200e:	3308      	adds	r3, #8
    2010:	681b      	ldr	r3, [r3, #0]
    2012:	9801      	ldr	r0, [sp, #4]
    2014:	4798      	blx	r3
}
    2016:	bf00      	nop
    2018:	b005      	add	sp, #20
    201a:	f85d fb04 	ldr.w	pc, [sp], #4
    201e:	bf00      	nop
    2020:	0000b86c 	.word	0x0000b86c
    2024:	0000b85c 	.word	0x0000b85c
    2028:	0000be68 	.word	0x0000be68

0000202c <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    202c:	b082      	sub	sp, #8
    202e:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2030:	4a02      	ldr	r2, [pc, #8]	; (203c <Clock_Ip_InstallNotificationsCallback+0x10>)
    2032:	9b01      	ldr	r3, [sp, #4]
    2034:	6013      	str	r3, [r2, #0]
}
    2036:	bf00      	nop
    2038:	b002      	add	sp, #8
    203a:	4770      	bx	lr
    203c:	1fff8b14 	.word	0x1fff8b14

00002040 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2040:	b500      	push	{lr}
    2042:	b085      	sub	sp, #20
    2044:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2046:	490c      	ldr	r1, [pc, #48]	; (2078 <Clock_Ip_DisableModuleClock+0x38>)
    2048:	9a01      	ldr	r2, [sp, #4]
    204a:	4613      	mov	r3, r2
    204c:	00db      	lsls	r3, r3, #3
    204e:	4413      	add	r3, r2
    2050:	440b      	add	r3, r1
    2052:	3301      	adds	r3, #1
    2054:	781b      	ldrb	r3, [r3, #0]
    2056:	461a      	mov	r2, r3
    2058:	4b08      	ldr	r3, [pc, #32]	; (207c <Clock_Ip_DisableModuleClock+0x3c>)
    205a:	5c9b      	ldrb	r3, [r3, r2]
    205c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    205e:	4a08      	ldr	r2, [pc, #32]	; (2080 <Clock_Ip_DisableModuleClock+0x40>)
    2060:	9b03      	ldr	r3, [sp, #12]
    2062:	00db      	lsls	r3, r3, #3
    2064:	4413      	add	r3, r2
    2066:	685b      	ldr	r3, [r3, #4]
    2068:	2101      	movs	r1, #1
    206a:	9801      	ldr	r0, [sp, #4]
    206c:	4798      	blx	r3
}
    206e:	bf00      	nop
    2070:	b005      	add	sp, #20
    2072:	f85d fb04 	ldr.w	pc, [sp], #4
    2076:	bf00      	nop
    2078:	0000b86c 	.word	0x0000b86c
    207c:	0000b80c 	.word	0x0000b80c
    2080:	0000bdf4 	.word	0x0000bdf4

00002084 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2084:	b500      	push	{lr}
    2086:	b085      	sub	sp, #20
    2088:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    208a:	490c      	ldr	r1, [pc, #48]	; (20bc <Clock_Ip_EnableModuleClock+0x38>)
    208c:	9a01      	ldr	r2, [sp, #4]
    208e:	4613      	mov	r3, r2
    2090:	00db      	lsls	r3, r3, #3
    2092:	4413      	add	r3, r2
    2094:	440b      	add	r3, r1
    2096:	3301      	adds	r3, #1
    2098:	781b      	ldrb	r3, [r3, #0]
    209a:	461a      	mov	r2, r3
    209c:	4b08      	ldr	r3, [pc, #32]	; (20c0 <Clock_Ip_EnableModuleClock+0x3c>)
    209e:	5c9b      	ldrb	r3, [r3, r2]
    20a0:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    20a2:	4a08      	ldr	r2, [pc, #32]	; (20c4 <Clock_Ip_EnableModuleClock+0x40>)
    20a4:	9b03      	ldr	r3, [sp, #12]
    20a6:	00db      	lsls	r3, r3, #3
    20a8:	4413      	add	r3, r2
    20aa:	685b      	ldr	r3, [r3, #4]
    20ac:	2100      	movs	r1, #0
    20ae:	9801      	ldr	r0, [sp, #4]
    20b0:	4798      	blx	r3
}
    20b2:	bf00      	nop
    20b4:	b005      	add	sp, #20
    20b6:	f85d fb04 	ldr.w	pc, [sp], #4
    20ba:	bf00      	nop
    20bc:	0000b86c 	.word	0x0000b86c
    20c0:	0000b80c 	.word	0x0000b80c
    20c4:	0000bdf4 	.word	0x0000bdf4

000020c8 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    20c8:	b500      	push	{lr}
    20ca:	b083      	sub	sp, #12
    20cc:	9001      	str	r0, [sp, #4]
    20ce:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    20d0:	4b08      	ldr	r3, [pc, #32]	; (20f4 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    20d2:	2200      	movs	r2, #0
    20d4:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    20d6:	4b08      	ldr	r3, [pc, #32]	; (20f8 <Clock_Ip_PowerModeChangeNotification+0x30>)
    20d8:	681b      	ldr	r3, [r3, #0]
    20da:	2102      	movs	r1, #2
    20dc:	4618      	mov	r0, r3
    20de:	f002 fd75 	bl	4bcc <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    20e2:	9900      	ldr	r1, [sp, #0]
    20e4:	9801      	ldr	r0, [sp, #4]
    20e6:	f002 fc51 	bl	498c <Clock_Ip_ClockPowerModeChangeNotification>
}
    20ea:	bf00      	nop
    20ec:	b003      	add	sp, #12
    20ee:	f85d fb04 	ldr.w	pc, [sp], #4
    20f2:	bf00      	nop
    20f4:	1fff8b10 	.word	0x1fff8b10
    20f8:	1fff8b84 	.word	0x1fff8b84

000020fc <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    20fc:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    20fe:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2102:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2104:	4b06      	ldr	r3, [pc, #24]	; (2120 <Clock_Ip_SetWaitStates+0x24>)
    2106:	785b      	ldrb	r3, [r3, #1]
    2108:	2b00      	cmp	r3, #0
    210a:	d005      	beq.n	2118 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    210c:	9b01      	ldr	r3, [sp, #4]
    210e:	3b01      	subs	r3, #1
    2110:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2112:	9b01      	ldr	r3, [sp, #4]
    2114:	2b00      	cmp	r3, #0
    2116:	d1f9      	bne.n	210c <Clock_Ip_SetWaitStates+0x10>
    }
}
    2118:	bf00      	nop
    211a:	b002      	add	sp, #8
    211c:	4770      	bx	lr
    211e:	bf00      	nop
    2120:	1fff8b8c 	.word	0x1fff8b8c

00002124 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2124:	b500      	push	{lr}
    2126:	b083      	sub	sp, #12
    2128:	9001      	str	r0, [sp, #4]
    212a:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    212c:	4b04      	ldr	r3, [pc, #16]	; (2140 <Clock_Ip_ReportClockErrors+0x1c>)
    212e:	681b      	ldr	r3, [r3, #0]
    2130:	9900      	ldr	r1, [sp, #0]
    2132:	9801      	ldr	r0, [sp, #4]
    2134:	4798      	blx	r3
}
    2136:	bf00      	nop
    2138:	b003      	add	sp, #12
    213a:	f85d fb04 	ldr.w	pc, [sp], #4
    213e:	bf00      	nop
    2140:	1fff8b14 	.word	0x1fff8b14

00002144 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2144:	b500      	push	{lr}
    2146:	b085      	sub	sp, #20
    2148:	9003      	str	r0, [sp, #12]
    214a:	9102      	str	r1, [sp, #8]
    214c:	9201      	str	r2, [sp, #4]
    214e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2150:	2000      	movs	r0, #0
    2152:	f7fe ffd1 	bl	10f8 <OsIf_GetCounter>
    2156:	4602      	mov	r2, r0
    2158:	9b03      	ldr	r3, [sp, #12]
    215a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    215c:	9b02      	ldr	r3, [sp, #8]
    215e:	2200      	movs	r2, #0
    2160:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2162:	2100      	movs	r1, #0
    2164:	9800      	ldr	r0, [sp, #0]
    2166:	f7ff f813 	bl	1190 <OsIf_MicrosToTicks>
    216a:	4602      	mov	r2, r0
    216c:	9b01      	ldr	r3, [sp, #4]
    216e:	601a      	str	r2, [r3, #0]
}
    2170:	bf00      	nop
    2172:	b005      	add	sp, #20
    2174:	f85d fb04 	ldr.w	pc, [sp], #4

00002178 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2178:	b500      	push	{lr}
    217a:	b087      	sub	sp, #28
    217c:	9003      	str	r0, [sp, #12]
    217e:	9102      	str	r1, [sp, #8]
    2180:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2182:	2300      	movs	r3, #0
    2184:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2188:	2100      	movs	r1, #0
    218a:	9803      	ldr	r0, [sp, #12]
    218c:	f7fe ffcd 	bl	112a <OsIf_GetElapsed>
    2190:	4602      	mov	r2, r0
    2192:	9b02      	ldr	r3, [sp, #8]
    2194:	681b      	ldr	r3, [r3, #0]
    2196:	441a      	add	r2, r3
    2198:	9b02      	ldr	r3, [sp, #8]
    219a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    219c:	9b02      	ldr	r3, [sp, #8]
    219e:	681b      	ldr	r3, [r3, #0]
    21a0:	9a01      	ldr	r2, [sp, #4]
    21a2:	429a      	cmp	r2, r3
    21a4:	d802      	bhi.n	21ac <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    21a6:	2301      	movs	r3, #1
    21a8:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    21ac:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    21b0:	4618      	mov	r0, r3
    21b2:	b007      	add	sp, #28
    21b4:	f85d fb04 	ldr.w	pc, [sp], #4

000021b8 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    21b8:	b082      	sub	sp, #8
    21ba:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    21bc:	bf00      	nop
    21be:	b002      	add	sp, #8
    21c0:	4770      	bx	lr

000021c2 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    21c2:	b500      	push	{lr}
    21c4:	b083      	sub	sp, #12
    21c6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21c8:	9b01      	ldr	r3, [sp, #4]
    21ca:	2b00      	cmp	r3, #0
    21cc:	d002      	beq.n	21d4 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    21ce:	9801      	ldr	r0, [sp, #4]
    21d0:	f000 f8ad 	bl	232e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    21d4:	bf00      	nop
    21d6:	b003      	add	sp, #12
    21d8:	f85d fb04 	ldr.w	pc, [sp], #4

000021dc <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    21dc:	b500      	push	{lr}
    21de:	b083      	sub	sp, #12
    21e0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21e2:	9b01      	ldr	r3, [sp, #4]
    21e4:	2b00      	cmp	r3, #0
    21e6:	d002      	beq.n	21ee <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    21e8:	9801      	ldr	r0, [sp, #4]
    21ea:	f000 f8cd 	bl	2388 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    21ee:	bf00      	nop
    21f0:	b003      	add	sp, #12
    21f2:	f85d fb04 	ldr.w	pc, [sp], #4

000021f6 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    21f6:	b500      	push	{lr}
    21f8:	b083      	sub	sp, #12
    21fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21fc:	9b01      	ldr	r3, [sp, #4]
    21fe:	2b00      	cmp	r3, #0
    2200:	d002      	beq.n	2208 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2202:	9801      	ldr	r0, [sp, #4]
    2204:	f000 f8ee 	bl	23e4 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2208:	bf00      	nop
    220a:	b003      	add	sp, #12
    220c:	f85d fb04 	ldr.w	pc, [sp], #4

00002210 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2210:	b500      	push	{lr}
    2212:	b083      	sub	sp, #12
    2214:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2216:	9b01      	ldr	r3, [sp, #4]
    2218:	2b00      	cmp	r3, #0
    221a:	d002      	beq.n	2222 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    221c:	9801      	ldr	r0, [sp, #4]
    221e:	f000 f8f9 	bl	2414 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2222:	bf00      	nop
    2224:	b003      	add	sp, #12
    2226:	f85d fb04 	ldr.w	pc, [sp], #4

0000222a <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    222a:	b500      	push	{lr}
    222c:	b083      	sub	sp, #12
    222e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2230:	9b01      	ldr	r3, [sp, #4]
    2232:	2b00      	cmp	r3, #0
    2234:	d002      	beq.n	223c <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2236:	9801      	ldr	r0, [sp, #4]
    2238:	f000 f904 	bl	2444 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    223c:	bf00      	nop
    223e:	b003      	add	sp, #12
    2240:	f85d fb04 	ldr.w	pc, [sp], #4

00002244 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2244:	b500      	push	{lr}
    2246:	b083      	sub	sp, #12
    2248:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    224a:	9b01      	ldr	r3, [sp, #4]
    224c:	2b00      	cmp	r3, #0
    224e:	d002      	beq.n	2256 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2250:	9801      	ldr	r0, [sp, #4]
    2252:	f000 f90f 	bl	2474 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2256:	bf00      	nop
    2258:	b003      	add	sp, #12
    225a:	f85d fb04 	ldr.w	pc, [sp], #4

0000225e <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    225e:	b500      	push	{lr}
    2260:	b083      	sub	sp, #12
    2262:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2264:	9b01      	ldr	r3, [sp, #4]
    2266:	2b00      	cmp	r3, #0
    2268:	d002      	beq.n	2270 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    226a:	9801      	ldr	r0, [sp, #4]
    226c:	f000 f91a 	bl	24a4 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2270:	bf00      	nop
    2272:	b003      	add	sp, #12
    2274:	f85d fb04 	ldr.w	pc, [sp], #4

00002278 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2278:	b500      	push	{lr}
    227a:	b083      	sub	sp, #12
    227c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    227e:	9b01      	ldr	r3, [sp, #4]
    2280:	2b00      	cmp	r3, #0
    2282:	d002      	beq.n	228a <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2284:	9801      	ldr	r0, [sp, #4]
    2286:	f000 f925 	bl	24d4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    228a:	bf00      	nop
    228c:	b003      	add	sp, #12
    228e:	f85d fb04 	ldr.w	pc, [sp], #4

00002292 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2292:	b500      	push	{lr}
    2294:	b083      	sub	sp, #12
    2296:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2298:	9b01      	ldr	r3, [sp, #4]
    229a:	2b00      	cmp	r3, #0
    229c:	d002      	beq.n	22a4 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    229e:	9801      	ldr	r0, [sp, #4]
    22a0:	f000 f930 	bl	2504 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22a4:	bf00      	nop
    22a6:	b003      	add	sp, #12
    22a8:	f85d fb04 	ldr.w	pc, [sp], #4

000022ac <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    22ac:	b500      	push	{lr}
    22ae:	b083      	sub	sp, #12
    22b0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22b2:	9b01      	ldr	r3, [sp, #4]
    22b4:	2b00      	cmp	r3, #0
    22b6:	d002      	beq.n	22be <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    22b8:	9801      	ldr	r0, [sp, #4]
    22ba:	f000 f93b 	bl	2534 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22be:	bf00      	nop
    22c0:	b003      	add	sp, #12
    22c2:	f85d fb04 	ldr.w	pc, [sp], #4

000022c6 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    22c6:	b500      	push	{lr}
    22c8:	b083      	sub	sp, #12
    22ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22cc:	9b01      	ldr	r3, [sp, #4]
    22ce:	2b00      	cmp	r3, #0
    22d0:	d002      	beq.n	22d8 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    22d2:	9801      	ldr	r0, [sp, #4]
    22d4:	f000 f946 	bl	2564 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22d8:	bf00      	nop
    22da:	b003      	add	sp, #12
    22dc:	f85d fb04 	ldr.w	pc, [sp], #4

000022e0 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    22e0:	b500      	push	{lr}
    22e2:	b083      	sub	sp, #12
    22e4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22e6:	9b01      	ldr	r3, [sp, #4]
    22e8:	2b00      	cmp	r3, #0
    22ea:	d002      	beq.n	22f2 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    22ec:	9801      	ldr	r0, [sp, #4]
    22ee:	f000 f951 	bl	2594 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22f2:	bf00      	nop
    22f4:	b003      	add	sp, #12
    22f6:	f85d fb04 	ldr.w	pc, [sp], #4

000022fa <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    22fa:	b500      	push	{lr}
    22fc:	b083      	sub	sp, #12
    22fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2300:	9b01      	ldr	r3, [sp, #4]
    2302:	2b00      	cmp	r3, #0
    2304:	d002      	beq.n	230c <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2306:	9801      	ldr	r0, [sp, #4]
    2308:	f000 f95e 	bl	25c8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    230c:	bf00      	nop
    230e:	b003      	add	sp, #12
    2310:	f85d fb04 	ldr.w	pc, [sp], #4

00002314 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2314:	b500      	push	{lr}
    2316:	b083      	sub	sp, #12
    2318:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    231a:	9b01      	ldr	r3, [sp, #4]
    231c:	2b00      	cmp	r3, #0
    231e:	d002      	beq.n	2326 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2320:	9801      	ldr	r0, [sp, #4]
    2322:	f000 f98b 	bl	263c <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2326:	bf00      	nop
    2328:	b003      	add	sp, #12
    232a:	f85d fb04 	ldr.w	pc, [sp], #4

0000232e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    232e:	b086      	sub	sp, #24
    2330:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2332:	9b01      	ldr	r3, [sp, #4]
    2334:	681a      	ldr	r2, [r3, #0]
    2336:	4911      	ldr	r1, [pc, #68]	; (237c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2338:	4613      	mov	r3, r2
    233a:	00db      	lsls	r3, r3, #3
    233c:	4413      	add	r3, r2
    233e:	440b      	add	r3, r1
    2340:	781b      	ldrb	r3, [r3, #0]
    2342:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2344:	9b01      	ldr	r3, [sp, #4]
    2346:	685b      	ldr	r3, [r3, #4]
    2348:	4a0d      	ldr	r2, [pc, #52]	; (2380 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    234a:	5cd3      	ldrb	r3, [r2, r3]
    234c:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    234e:	4a0d      	ldr	r2, [pc, #52]	; (2384 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2350:	9b05      	ldr	r3, [sp, #20]
    2352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2356:	681b      	ldr	r3, [r3, #0]
    2358:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    235a:	9b03      	ldr	r3, [sp, #12]
    235c:	f023 0307 	bic.w	r3, r3, #7
    2360:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2362:	9a03      	ldr	r2, [sp, #12]
    2364:	9b04      	ldr	r3, [sp, #16]
    2366:	4313      	orrs	r3, r2
    2368:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    236a:	4a06      	ldr	r2, [pc, #24]	; (2384 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    236c:	9b05      	ldr	r3, [sp, #20]
    236e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2372:	9a03      	ldr	r2, [sp, #12]
    2374:	601a      	str	r2, [r3, #0]
}
    2376:	bf00      	nop
    2378:	b006      	add	sp, #24
    237a:	4770      	bx	lr
    237c:	0000b86c 	.word	0x0000b86c
    2380:	0000bc64 	.word	0x0000bc64
    2384:	0000bca8 	.word	0x0000bca8

00002388 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2388:	b086      	sub	sp, #24
    238a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    238c:	9b01      	ldr	r3, [sp, #4]
    238e:	681a      	ldr	r2, [r3, #0]
    2390:	4911      	ldr	r1, [pc, #68]	; (23d8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2392:	4613      	mov	r3, r2
    2394:	00db      	lsls	r3, r3, #3
    2396:	4413      	add	r3, r2
    2398:	440b      	add	r3, r1
    239a:	781b      	ldrb	r3, [r3, #0]
    239c:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    239e:	9b01      	ldr	r3, [sp, #4]
    23a0:	685b      	ldr	r3, [r3, #4]
    23a2:	4a0e      	ldr	r2, [pc, #56]	; (23dc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    23a4:	5cd3      	ldrb	r3, [r2, r3]
    23a6:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    23a8:	4a0d      	ldr	r2, [pc, #52]	; (23e0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    23aa:	9b05      	ldr	r3, [sp, #20]
    23ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    23b0:	681b      	ldr	r3, [r3, #0]
    23b2:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    23b4:	9b03      	ldr	r3, [sp, #12]
    23b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    23ba:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    23bc:	9b04      	ldr	r3, [sp, #16]
    23be:	021b      	lsls	r3, r3, #8
    23c0:	9a03      	ldr	r2, [sp, #12]
    23c2:	4313      	orrs	r3, r2
    23c4:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    23c6:	4a06      	ldr	r2, [pc, #24]	; (23e0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    23c8:	9b05      	ldr	r3, [sp, #20]
    23ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    23ce:	9a03      	ldr	r2, [sp, #12]
    23d0:	601a      	str	r2, [r3, #0]
}
    23d2:	bf00      	nop
    23d4:	b006      	add	sp, #24
    23d6:	4770      	bx	lr
    23d8:	0000b86c 	.word	0x0000b86c
    23dc:	0000bc64 	.word	0x0000bc64
    23e0:	0000bca8 	.word	0x0000bca8

000023e4 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    23e4:	b084      	sub	sp, #16
    23e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    23e8:	4b09      	ldr	r3, [pc, #36]	; (2410 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    23ea:	695b      	ldr	r3, [r3, #20]
    23ec:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    23ee:	9b03      	ldr	r3, [sp, #12]
    23f0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    23f4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    23f6:	9b01      	ldr	r3, [sp, #4]
    23f8:	685b      	ldr	r3, [r3, #4]
    23fa:	3b01      	subs	r3, #1
    23fc:	041b      	lsls	r3, r3, #16
    23fe:	9a03      	ldr	r2, [sp, #12]
    2400:	4313      	orrs	r3, r2
    2402:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2404:	4a02      	ldr	r2, [pc, #8]	; (2410 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2406:	9b03      	ldr	r3, [sp, #12]
    2408:	6153      	str	r3, [r2, #20]
}
    240a:	bf00      	nop
    240c:	b004      	add	sp, #16
    240e:	4770      	bx	lr
    2410:	40064000 	.word	0x40064000

00002414 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2414:	b084      	sub	sp, #16
    2416:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2418:	4b09      	ldr	r3, [pc, #36]	; (2440 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    241a:	695b      	ldr	r3, [r3, #20]
    241c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    241e:	9b03      	ldr	r3, [sp, #12]
    2420:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2424:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2426:	9b01      	ldr	r3, [sp, #4]
    2428:	685b      	ldr	r3, [r3, #4]
    242a:	3b01      	subs	r3, #1
    242c:	011b      	lsls	r3, r3, #4
    242e:	9a03      	ldr	r2, [sp, #12]
    2430:	4313      	orrs	r3, r2
    2432:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2434:	4a02      	ldr	r2, [pc, #8]	; (2440 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2436:	9b03      	ldr	r3, [sp, #12]
    2438:	6153      	str	r3, [r2, #20]
}
    243a:	bf00      	nop
    243c:	b004      	add	sp, #16
    243e:	4770      	bx	lr
    2440:	40064000 	.word	0x40064000

00002444 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2444:	b084      	sub	sp, #16
    2446:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2448:	4b09      	ldr	r3, [pc, #36]	; (2470 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    244a:	695b      	ldr	r3, [r3, #20]
    244c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    244e:	9b03      	ldr	r3, [sp, #12]
    2450:	f023 030f 	bic.w	r3, r3, #15
    2454:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2456:	9b01      	ldr	r3, [sp, #4]
    2458:	685b      	ldr	r3, [r3, #4]
    245a:	3b01      	subs	r3, #1
    245c:	9a03      	ldr	r2, [sp, #12]
    245e:	4313      	orrs	r3, r2
    2460:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2462:	4a03      	ldr	r2, [pc, #12]	; (2470 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2464:	9b03      	ldr	r3, [sp, #12]
    2466:	6153      	str	r3, [r2, #20]
}
    2468:	bf00      	nop
    246a:	b004      	add	sp, #16
    246c:	4770      	bx	lr
    246e:	bf00      	nop
    2470:	40064000 	.word	0x40064000

00002474 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2474:	b084      	sub	sp, #16
    2476:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2478:	4b09      	ldr	r3, [pc, #36]	; (24a0 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    247a:	699b      	ldr	r3, [r3, #24]
    247c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    247e:	9b03      	ldr	r3, [sp, #12]
    2480:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2484:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2486:	9b01      	ldr	r3, [sp, #4]
    2488:	685b      	ldr	r3, [r3, #4]
    248a:	3b01      	subs	r3, #1
    248c:	041b      	lsls	r3, r3, #16
    248e:	9a03      	ldr	r2, [sp, #12]
    2490:	4313      	orrs	r3, r2
    2492:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2494:	4a02      	ldr	r2, [pc, #8]	; (24a0 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2496:	9b03      	ldr	r3, [sp, #12]
    2498:	6193      	str	r3, [r2, #24]
}
    249a:	bf00      	nop
    249c:	b004      	add	sp, #16
    249e:	4770      	bx	lr
    24a0:	40064000 	.word	0x40064000

000024a4 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24a4:	b084      	sub	sp, #16
    24a6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    24a8:	4b09      	ldr	r3, [pc, #36]	; (24d0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    24aa:	699b      	ldr	r3, [r3, #24]
    24ac:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    24ae:	9b03      	ldr	r3, [sp, #12]
    24b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    24b4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    24b6:	9b01      	ldr	r3, [sp, #4]
    24b8:	685b      	ldr	r3, [r3, #4]
    24ba:	3b01      	subs	r3, #1
    24bc:	011b      	lsls	r3, r3, #4
    24be:	9a03      	ldr	r2, [sp, #12]
    24c0:	4313      	orrs	r3, r2
    24c2:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    24c4:	4a02      	ldr	r2, [pc, #8]	; (24d0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    24c6:	9b03      	ldr	r3, [sp, #12]
    24c8:	6193      	str	r3, [r2, #24]
}
    24ca:	bf00      	nop
    24cc:	b004      	add	sp, #16
    24ce:	4770      	bx	lr
    24d0:	40064000 	.word	0x40064000

000024d4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24d4:	b084      	sub	sp, #16
    24d6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    24d8:	4b09      	ldr	r3, [pc, #36]	; (2500 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    24da:	699b      	ldr	r3, [r3, #24]
    24dc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    24de:	9b03      	ldr	r3, [sp, #12]
    24e0:	f023 030f 	bic.w	r3, r3, #15
    24e4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    24e6:	9b01      	ldr	r3, [sp, #4]
    24e8:	685b      	ldr	r3, [r3, #4]
    24ea:	3b01      	subs	r3, #1
    24ec:	9a03      	ldr	r2, [sp, #12]
    24ee:	4313      	orrs	r3, r2
    24f0:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    24f2:	4a03      	ldr	r2, [pc, #12]	; (2500 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    24f4:	9b03      	ldr	r3, [sp, #12]
    24f6:	6193      	str	r3, [r2, #24]
}
    24f8:	bf00      	nop
    24fa:	b004      	add	sp, #16
    24fc:	4770      	bx	lr
    24fe:	bf00      	nop
    2500:	40064000 	.word	0x40064000

00002504 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2504:	b084      	sub	sp, #16
    2506:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2508:	4b09      	ldr	r3, [pc, #36]	; (2530 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    250a:	69db      	ldr	r3, [r3, #28]
    250c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    250e:	9b03      	ldr	r3, [sp, #12]
    2510:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2514:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2516:	9b01      	ldr	r3, [sp, #4]
    2518:	685b      	ldr	r3, [r3, #4]
    251a:	3b01      	subs	r3, #1
    251c:	041b      	lsls	r3, r3, #16
    251e:	9a03      	ldr	r2, [sp, #12]
    2520:	4313      	orrs	r3, r2
    2522:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2524:	4a02      	ldr	r2, [pc, #8]	; (2530 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2526:	9b03      	ldr	r3, [sp, #12]
    2528:	61d3      	str	r3, [r2, #28]
}
    252a:	bf00      	nop
    252c:	b004      	add	sp, #16
    252e:	4770      	bx	lr
    2530:	40064000 	.word	0x40064000

00002534 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2534:	b084      	sub	sp, #16
    2536:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2538:	4b09      	ldr	r3, [pc, #36]	; (2560 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    253a:	69db      	ldr	r3, [r3, #28]
    253c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    253e:	9b03      	ldr	r3, [sp, #12]
    2540:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2544:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2546:	9b01      	ldr	r3, [sp, #4]
    2548:	685b      	ldr	r3, [r3, #4]
    254a:	3b01      	subs	r3, #1
    254c:	011b      	lsls	r3, r3, #4
    254e:	9a03      	ldr	r2, [sp, #12]
    2550:	4313      	orrs	r3, r2
    2552:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2554:	4a02      	ldr	r2, [pc, #8]	; (2560 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2556:	9b03      	ldr	r3, [sp, #12]
    2558:	61d3      	str	r3, [r2, #28]
}
    255a:	bf00      	nop
    255c:	b004      	add	sp, #16
    255e:	4770      	bx	lr
    2560:	40064000 	.word	0x40064000

00002564 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2564:	b084      	sub	sp, #16
    2566:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2568:	4b09      	ldr	r3, [pc, #36]	; (2590 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    256a:	69db      	ldr	r3, [r3, #28]
    256c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    256e:	9b03      	ldr	r3, [sp, #12]
    2570:	f023 030f 	bic.w	r3, r3, #15
    2574:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    2576:	9b01      	ldr	r3, [sp, #4]
    2578:	685b      	ldr	r3, [r3, #4]
    257a:	3b01      	subs	r3, #1
    257c:	9a03      	ldr	r2, [sp, #12]
    257e:	4313      	orrs	r3, r2
    2580:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2582:	4a03      	ldr	r2, [pc, #12]	; (2590 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2584:	9b03      	ldr	r3, [sp, #12]
    2586:	61d3      	str	r3, [r2, #28]
}
    2588:	bf00      	nop
    258a:	b004      	add	sp, #16
    258c:	4770      	bx	lr
    258e:	bf00      	nop
    2590:	40064000 	.word	0x40064000

00002594 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    2594:	b084      	sub	sp, #16
    2596:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2598:	4b0a      	ldr	r3, [pc, #40]	; (25c4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    259a:	685b      	ldr	r3, [r3, #4]
    259c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    259e:	9b03      	ldr	r3, [sp, #12]
    25a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    25a4:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    25a6:	9b01      	ldr	r3, [sp, #4]
    25a8:	685b      	ldr	r3, [r3, #4]
    25aa:	3b01      	subs	r3, #1
    25ac:	021b      	lsls	r3, r3, #8
    25ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    25b2:	9a03      	ldr	r2, [sp, #12]
    25b4:	4313      	orrs	r3, r2
    25b6:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    25b8:	4a02      	ldr	r2, [pc, #8]	; (25c4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    25ba:	9b03      	ldr	r3, [sp, #12]
    25bc:	6053      	str	r3, [r2, #4]
}
    25be:	bf00      	nop
    25c0:	b004      	add	sp, #16
    25c2:	4770      	bx	lr
    25c4:	40048000 	.word	0x40048000

000025c8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    25c8:	b084      	sub	sp, #16
    25ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    25cc:	4919      	ldr	r1, [pc, #100]	; (2634 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    25ce:	9b01      	ldr	r3, [sp, #4]
    25d0:	681a      	ldr	r2, [r3, #0]
    25d2:	4819      	ldr	r0, [pc, #100]	; (2638 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    25d4:	4613      	mov	r3, r2
    25d6:	00db      	lsls	r3, r3, #3
    25d8:	4413      	add	r3, r2
    25da:	4403      	add	r3, r0
    25dc:	3305      	adds	r3, #5
    25de:	781b      	ldrb	r3, [r3, #0]
    25e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    25e4:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    25e6:	9b03      	ldr	r3, [sp, #12]
    25e8:	f023 030f 	bic.w	r3, r3, #15
    25ec:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    25ee:	9b01      	ldr	r3, [sp, #4]
    25f0:	685b      	ldr	r3, [r3, #4]
    25f2:	3b01      	subs	r3, #1
    25f4:	f003 0307 	and.w	r3, r3, #7
    25f8:	9a03      	ldr	r2, [sp, #12]
    25fa:	4313      	orrs	r3, r2
    25fc:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    25fe:	9b01      	ldr	r3, [sp, #4]
    2600:	7a1b      	ldrb	r3, [r3, #8]
    2602:	3b01      	subs	r3, #1
    2604:	00db      	lsls	r3, r3, #3
    2606:	f003 0308 	and.w	r3, r3, #8
    260a:	9a03      	ldr	r2, [sp, #12]
    260c:	4313      	orrs	r3, r2
    260e:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    2610:	4908      	ldr	r1, [pc, #32]	; (2634 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2612:	9b01      	ldr	r3, [sp, #4]
    2614:	681a      	ldr	r2, [r3, #0]
    2616:	4808      	ldr	r0, [pc, #32]	; (2638 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2618:	4613      	mov	r3, r2
    261a:	00db      	lsls	r3, r3, #3
    261c:	4413      	add	r3, r2
    261e:	4403      	add	r3, r0
    2620:	3305      	adds	r3, #5
    2622:	781b      	ldrb	r3, [r3, #0]
    2624:	461a      	mov	r2, r3
    2626:	9b03      	ldr	r3, [sp, #12]
    2628:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    262c:	bf00      	nop
    262e:	b004      	add	sp, #16
    2630:	4770      	bx	lr
    2632:	bf00      	nop
    2634:	40065000 	.word	0x40065000
    2638:	0000b86c 	.word	0x0000b86c

0000263c <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    263c:	b084      	sub	sp, #16
    263e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2640:	4b10      	ldr	r3, [pc, #64]	; (2684 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2644:	4a0f      	ldr	r2, [pc, #60]	; (2684 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    264a:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    264c:	4b0d      	ldr	r3, [pc, #52]	; (2684 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    264e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2650:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    2652:	9b03      	ldr	r3, [sp, #12]
    2654:	f023 030f 	bic.w	r3, r3, #15
    2658:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    265a:	9b01      	ldr	r3, [sp, #4]
    265c:	685b      	ldr	r3, [r3, #4]
    265e:	3b01      	subs	r3, #1
    2660:	005b      	lsls	r3, r3, #1
    2662:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    2666:	9b01      	ldr	r3, [sp, #4]
    2668:	7a1b      	ldrb	r3, [r3, #8]
    266a:	3b01      	subs	r3, #1
    266c:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2670:	4313      	orrs	r3, r2
    2672:	9a03      	ldr	r2, [sp, #12]
    2674:	4313      	orrs	r3, r2
    2676:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    2678:	4a02      	ldr	r2, [pc, #8]	; (2684 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    267a:	9b03      	ldr	r3, [sp, #12]
    267c:	6693      	str	r3, [r2, #104]	; 0x68
}
    267e:	bf00      	nop
    2680:	b004      	add	sp, #16
    2682:	4770      	bx	lr
    2684:	40048000 	.word	0x40048000

00002688 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    2688:	b082      	sub	sp, #8
    268a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    268c:	bf00      	nop
    268e:	b002      	add	sp, #8
    2690:	4770      	bx	lr
	...

00002694 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    2694:	b082      	sub	sp, #8
    2696:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2698:	bf00      	nop
    269a:	b002      	add	sp, #8
    269c:	4770      	bx	lr

0000269e <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    269e:	b082      	sub	sp, #8
    26a0:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    26a2:	bf00      	nop
    26a4:	b002      	add	sp, #8
    26a6:	4770      	bx	lr

000026a8 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    26a8:	b500      	push	{lr}
    26aa:	b083      	sub	sp, #12
    26ac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26ae:	9b01      	ldr	r3, [sp, #4]
    26b0:	2b00      	cmp	r3, #0
    26b2:	d002      	beq.n	26ba <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    26b4:	9801      	ldr	r0, [sp, #4]
    26b6:	f000 f86a 	bl	278e <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    26ba:	bf00      	nop
    26bc:	b003      	add	sp, #12
    26be:	f85d fb04 	ldr.w	pc, [sp], #4

000026c2 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    26c2:	b500      	push	{lr}
    26c4:	b083      	sub	sp, #12
    26c6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26c8:	9b01      	ldr	r3, [sp, #4]
    26ca:	2b00      	cmp	r3, #0
    26cc:	d002      	beq.n	26d4 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    26ce:	9801      	ldr	r0, [sp, #4]
    26d0:	f000 f884 	bl	27dc <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    26d4:	bf00      	nop
    26d6:	b003      	add	sp, #12
    26d8:	f85d fb04 	ldr.w	pc, [sp], #4

000026dc <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    26dc:	b500      	push	{lr}
    26de:	b089      	sub	sp, #36	; 0x24
    26e0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    26e2:	2300      	movs	r3, #0
    26e4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    26e8:	9b01      	ldr	r3, [sp, #4]
    26ea:	2b00      	cmp	r3, #0
    26ec:	d031      	beq.n	2752 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    26ee:	4b1b      	ldr	r3, [pc, #108]	; (275c <Clock_Ip_CompleteSOSC+0x80>)
    26f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    26f4:	f003 0301 	and.w	r3, r3, #1
    26f8:	2b00      	cmp	r3, #0
    26fa:	d02a      	beq.n	2752 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    26fc:	aa03      	add	r2, sp, #12
    26fe:	a904      	add	r1, sp, #16
    2700:	a805      	add	r0, sp, #20
    2702:	f24c 3350 	movw	r3, #50000	; 0xc350
    2706:	f7ff fd1d 	bl	2144 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    270a:	4b14      	ldr	r3, [pc, #80]	; (275c <Clock_Ip_CompleteSOSC+0x80>)
    270c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2710:	0e1b      	lsrs	r3, r3, #24
    2712:	f003 0301 	and.w	r3, r3, #1
    2716:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2718:	9a03      	ldr	r2, [sp, #12]
    271a:	a904      	add	r1, sp, #16
    271c:	ab05      	add	r3, sp, #20
    271e:	4618      	mov	r0, r3
    2720:	f7ff fd2a 	bl	2178 <Clock_Ip_TimeoutExpired>
    2724:	4603      	mov	r3, r0
    2726:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    272a:	9b06      	ldr	r3, [sp, #24]
    272c:	2b00      	cmp	r3, #0
    272e:	d106      	bne.n	273e <Clock_Ip_CompleteSOSC+0x62>
    2730:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2734:	f083 0301 	eor.w	r3, r3, #1
    2738:	b2db      	uxtb	r3, r3
    273a:	2b00      	cmp	r3, #0
    273c:	d1e5      	bne.n	270a <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    273e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2742:	2b00      	cmp	r3, #0
    2744:	d005      	beq.n	2752 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2746:	9b01      	ldr	r3, [sp, #4]
    2748:	681b      	ldr	r3, [r3, #0]
    274a:	4619      	mov	r1, r3
    274c:	2001      	movs	r0, #1
    274e:	f7ff fce9 	bl	2124 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    2752:	bf00      	nop
    2754:	b009      	add	sp, #36	; 0x24
    2756:	f85d fb04 	ldr.w	pc, [sp], #4
    275a:	bf00      	nop
    275c:	40064000 	.word	0x40064000

00002760 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    2760:	b500      	push	{lr}
    2762:	b083      	sub	sp, #12
    2764:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    2766:	9801      	ldr	r0, [sp, #4]
    2768:	f000 f8c0 	bl	28ec <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    276c:	bf00      	nop
    276e:	b003      	add	sp, #12
    2770:	f85d fb04 	ldr.w	pc, [sp], #4

00002774 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2774:	b500      	push	{lr}
    2776:	b083      	sub	sp, #12
    2778:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    277a:	9b01      	ldr	r3, [sp, #4]
    277c:	2b00      	cmp	r3, #0
    277e:	d002      	beq.n	2786 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    2780:	9801      	ldr	r0, [sp, #4]
    2782:	f000 f8c3 	bl	290c <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2786:	bf00      	nop
    2788:	b003      	add	sp, #12
    278a:	f85d fb04 	ldr.w	pc, [sp], #4

0000278e <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    278e:	b082      	sub	sp, #8
    2790:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    2792:	4b11      	ldr	r3, [pc, #68]	; (27d8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2794:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2798:	4a0f      	ldr	r2, [pc, #60]	; (27d8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    279a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    279e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    27a2:	4b0d      	ldr	r3, [pc, #52]	; (27d8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27a8:	4a0b      	ldr	r2, [pc, #44]	; (27d8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    27ae:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    27b2:	4b09      	ldr	r3, [pc, #36]	; (27d8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27b8:	4a07      	ldr	r2, [pc, #28]	; (27d8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27ba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    27be:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    27c2:	4b05      	ldr	r3, [pc, #20]	; (27d8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27c8:	4a03      	ldr	r2, [pc, #12]	; (27d8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27ca:	f023 0301 	bic.w	r3, r3, #1
    27ce:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    27d2:	bf00      	nop
    27d4:	b002      	add	sp, #8
    27d6:	4770      	bx	lr
    27d8:	40064000 	.word	0x40064000

000027dc <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    27dc:	b082      	sub	sp, #8
    27de:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    27e0:	9b01      	ldr	r3, [sp, #4]
    27e2:	891b      	ldrh	r3, [r3, #8]
    27e4:	2b01      	cmp	r3, #1
    27e6:	d174      	bne.n	28d2 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    27e8:	9b01      	ldr	r3, [sp, #4]
    27ea:	7bdb      	ldrb	r3, [r3, #15]
    27ec:	2b00      	cmp	r3, #0
    27ee:	d002      	beq.n	27f6 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    27f0:	2b01      	cmp	r3, #1
    27f2:	d009      	beq.n	2808 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    27f4:	e011      	b.n	281a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    27f6:	4b39      	ldr	r3, [pc, #228]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    27f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    27fc:	4a37      	ldr	r2, [pc, #220]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    27fe:	f023 0308 	bic.w	r3, r3, #8
    2802:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2806:	e008      	b.n	281a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    2808:	4b34      	ldr	r3, [pc, #208]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    280a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    280e:	4a33      	ldr	r2, [pc, #204]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2810:	f043 0308 	orr.w	r3, r3, #8
    2814:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2818:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    281a:	4b30      	ldr	r3, [pc, #192]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    281c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2820:	4a2e      	ldr	r2, [pc, #184]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2822:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    2826:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    282a:	9b01      	ldr	r3, [sp, #4]
    282c:	685b      	ldr	r3, [r3, #4]
    282e:	4a2c      	ldr	r2, [pc, #176]	; (28e0 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    2830:	4293      	cmp	r3, r2
    2832:	d90d      	bls.n	2850 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    2834:	9b01      	ldr	r3, [sp, #4]
    2836:	685b      	ldr	r3, [r3, #4]
    2838:	4a2a      	ldr	r2, [pc, #168]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    283a:	4293      	cmp	r3, r2
    283c:	d208      	bcs.n	2850 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    283e:	4b27      	ldr	r3, [pc, #156]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2840:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2844:	4a25      	ldr	r2, [pc, #148]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2846:	f043 0320 	orr.w	r3, r3, #32
    284a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    284e:	e007      	b.n	2860 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    2850:	4b22      	ldr	r3, [pc, #136]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2852:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2856:	4a21      	ldr	r2, [pc, #132]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2858:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    285c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    2860:	9b01      	ldr	r3, [sp, #4]
    2862:	7b1b      	ldrb	r3, [r3, #12]
    2864:	2b00      	cmp	r3, #0
    2866:	d108      	bne.n	287a <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    2868:	4b1c      	ldr	r3, [pc, #112]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    286a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    286e:	4a1b      	ldr	r2, [pc, #108]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2870:	f043 0304 	orr.w	r3, r3, #4
    2874:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2878:	e007      	b.n	288a <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    287a:	4b18      	ldr	r3, [pc, #96]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    287c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2880:	4a16      	ldr	r2, [pc, #88]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2882:	f023 0304 	bic.w	r3, r3, #4
    2886:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    288a:	9b01      	ldr	r3, [sp, #4]
    288c:	7c1b      	ldrb	r3, [r3, #16]
    288e:	2b02      	cmp	r3, #2
    2890:	d011      	beq.n	28b6 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    2892:	2b02      	cmp	r3, #2
    2894:	dc14      	bgt.n	28c0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    2896:	2b00      	cmp	r3, #0
    2898:	d002      	beq.n	28a0 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    289a:	2b01      	cmp	r3, #1
    289c:	d005      	beq.n	28aa <Clock_Ip_SetSOSC_TrustedCall+0xce>
    289e:	e00f      	b.n	28c0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    28a0:	4b0e      	ldr	r3, [pc, #56]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28a2:	2201      	movs	r2, #1
    28a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    28a8:	e014      	b.n	28d4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    28aa:	4b0c      	ldr	r3, [pc, #48]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28ac:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    28b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    28b4:	e00e      	b.n	28d4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    28b6:	4b09      	ldr	r3, [pc, #36]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28b8:	4a0b      	ldr	r2, [pc, #44]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    28ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    28be:	e009      	b.n	28d4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    28c0:	4b06      	ldr	r3, [pc, #24]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    28c6:	4a05      	ldr	r2, [pc, #20]	; (28dc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28c8:	f043 0301 	orr.w	r3, r3, #1
    28cc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    28d0:	e000      	b.n	28d4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    28d2:	bf00      	nop
}
    28d4:	bf00      	nop
    28d6:	b002      	add	sp, #8
    28d8:	4770      	bx	lr
    28da:	bf00      	nop
    28dc:	40064000 	.word	0x40064000
    28e0:	003d08ff 	.word	0x003d08ff
    28e4:	007a1200 	.word	0x007a1200
    28e8:	00030001 	.word	0x00030001

000028ec <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    28ec:	b082      	sub	sp, #8
    28ee:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    28f0:	4b05      	ldr	r3, [pc, #20]	; (2908 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    28f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    28f6:	4a04      	ldr	r2, [pc, #16]	; (2908 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    28f8:	f023 0301 	bic.w	r3, r3, #1
    28fc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2900:	bf00      	nop
    2902:	b002      	add	sp, #8
    2904:	4770      	bx	lr
    2906:	bf00      	nop
    2908:	40064000 	.word	0x40064000

0000290c <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    290c:	b082      	sub	sp, #8
    290e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2910:	9b01      	ldr	r3, [sp, #4]
    2912:	891b      	ldrh	r3, [r3, #8]
    2914:	2b01      	cmp	r3, #1
    2916:	d107      	bne.n	2928 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2918:	4b05      	ldr	r3, [pc, #20]	; (2930 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    291a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    291e:	4a04      	ldr	r2, [pc, #16]	; (2930 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2920:	f043 0301 	orr.w	r3, r3, #1
    2924:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    2928:	bf00      	nop
    292a:	b002      	add	sp, #8
    292c:	4770      	bx	lr
    292e:	bf00      	nop
    2930:	40064000 	.word	0x40064000

00002934 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    2934:	b082      	sub	sp, #8
    2936:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2938:	bf00      	nop
    293a:	b002      	add	sp, #8
    293c:	4770      	bx	lr

0000293e <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    293e:	b082      	sub	sp, #8
    2940:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    2942:	2300      	movs	r3, #0
}
    2944:	4618      	mov	r0, r3
    2946:	b002      	add	sp, #8
    2948:	4770      	bx	lr

0000294a <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    294a:	b082      	sub	sp, #8
    294c:	9001      	str	r0, [sp, #4]
    294e:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    2950:	bf00      	nop
    2952:	b002      	add	sp, #8
    2954:	4770      	bx	lr
	...

00002958 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    2958:	b082      	sub	sp, #8
    295a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    295c:	bf00      	nop
    295e:	b002      	add	sp, #8
    2960:	4770      	bx	lr

00002962 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    2962:	b082      	sub	sp, #8
    2964:	9001      	str	r0, [sp, #4]
    2966:	460b      	mov	r3, r1
    2968:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    296c:	bf00      	nop
    296e:	b002      	add	sp, #8
    2970:	4770      	bx	lr

00002972 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    2972:	b500      	push	{lr}
    2974:	b083      	sub	sp, #12
    2976:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2978:	9b01      	ldr	r3, [sp, #4]
    297a:	2b00      	cmp	r3, #0
    297c:	d002      	beq.n	2984 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    297e:	9801      	ldr	r0, [sp, #4]
    2980:	f000 f8e7 	bl	2b52 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2984:	bf00      	nop
    2986:	b003      	add	sp, #12
    2988:	f85d fb04 	ldr.w	pc, [sp], #4

0000298c <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    298c:	b500      	push	{lr}
    298e:	b085      	sub	sp, #20
    2990:	9001      	str	r0, [sp, #4]
    2992:	460b      	mov	r3, r1
    2994:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2998:	9b01      	ldr	r3, [sp, #4]
    299a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    299c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    29a0:	2b00      	cmp	r3, #0
    29a2:	d003      	beq.n	29ac <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    29a4:	2300      	movs	r3, #0
    29a6:	f8ad 300c 	strh.w	r3, [sp, #12]
    29aa:	e002      	b.n	29b2 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    29ac:	2301      	movs	r3, #1
    29ae:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    29b2:	ab02      	add	r3, sp, #8
    29b4:	4618      	mov	r0, r3
    29b6:	f7ff ffdc 	bl	2972 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    29ba:	bf00      	nop
    29bc:	b005      	add	sp, #20
    29be:	f85d fb04 	ldr.w	pc, [sp], #4

000029c2 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    29c2:	b500      	push	{lr}
    29c4:	b083      	sub	sp, #12
    29c6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    29c8:	9b01      	ldr	r3, [sp, #4]
    29ca:	2b00      	cmp	r3, #0
    29cc:	d002      	beq.n	29d4 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    29ce:	9801      	ldr	r0, [sp, #4]
    29d0:	f000 f8d6 	bl	2b80 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    29d4:	bf00      	nop
    29d6:	b003      	add	sp, #12
    29d8:	f85d fb04 	ldr.w	pc, [sp], #4

000029dc <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    29dc:	b500      	push	{lr}
    29de:	b085      	sub	sp, #20
    29e0:	9001      	str	r0, [sp, #4]
    29e2:	460b      	mov	r3, r1
    29e4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    29e8:	9b01      	ldr	r3, [sp, #4]
    29ea:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    29ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
    29f0:	2b00      	cmp	r3, #0
    29f2:	d003      	beq.n	29fc <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    29f4:	2300      	movs	r3, #0
    29f6:	f8ad 300c 	strh.w	r3, [sp, #12]
    29fa:	e002      	b.n	2a02 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    29fc:	2301      	movs	r3, #1
    29fe:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    2a02:	ab02      	add	r3, sp, #8
    2a04:	4618      	mov	r0, r3
    2a06:	f7ff ffdc 	bl	29c2 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    2a0a:	bf00      	nop
    2a0c:	b005      	add	sp, #20
    2a0e:	f85d fb04 	ldr.w	pc, [sp], #4

00002a12 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    2a12:	b500      	push	{lr}
    2a14:	b083      	sub	sp, #12
    2a16:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a18:	9b01      	ldr	r3, [sp, #4]
    2a1a:	2b00      	cmp	r3, #0
    2a1c:	d002      	beq.n	2a24 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    2a1e:	9801      	ldr	r0, [sp, #4]
    2a20:	f000 f8c6 	bl	2bb0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a24:	bf00      	nop
    2a26:	b003      	add	sp, #12
    2a28:	f85d fb04 	ldr.w	pc, [sp], #4

00002a2c <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a2c:	b500      	push	{lr}
    2a2e:	b085      	sub	sp, #20
    2a30:	9001      	str	r0, [sp, #4]
    2a32:	460b      	mov	r3, r1
    2a34:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2a38:	9b01      	ldr	r3, [sp, #4]
    2a3a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2a3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2a40:	2b00      	cmp	r3, #0
    2a42:	d003      	beq.n	2a4c <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    2a44:	2300      	movs	r3, #0
    2a46:	f8ad 300c 	strh.w	r3, [sp, #12]
    2a4a:	e002      	b.n	2a52 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2a4c:	2301      	movs	r3, #1
    2a4e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    2a52:	ab02      	add	r3, sp, #8
    2a54:	4618      	mov	r0, r3
    2a56:	f7ff ffdc 	bl	2a12 <Clock_Ip_ClockSetSimClkoutEnable>
}
    2a5a:	bf00      	nop
    2a5c:	b005      	add	sp, #20
    2a5e:	f85d fb04 	ldr.w	pc, [sp], #4

00002a62 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    2a62:	b500      	push	{lr}
    2a64:	b083      	sub	sp, #12
    2a66:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a68:	9b01      	ldr	r3, [sp, #4]
    2a6a:	2b00      	cmp	r3, #0
    2a6c:	d002      	beq.n	2a74 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    2a6e:	9801      	ldr	r0, [sp, #4]
    2a70:	f000 f8b6 	bl	2be0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a74:	bf00      	nop
    2a76:	b003      	add	sp, #12
    2a78:	f85d fb04 	ldr.w	pc, [sp], #4

00002a7c <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a7c:	b500      	push	{lr}
    2a7e:	b085      	sub	sp, #20
    2a80:	9001      	str	r0, [sp, #4]
    2a82:	460b      	mov	r3, r1
    2a84:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2a88:	9b01      	ldr	r3, [sp, #4]
    2a8a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2a8c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2a90:	2b00      	cmp	r3, #0
    2a92:	d003      	beq.n	2a9c <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    2a94:	2300      	movs	r3, #0
    2a96:	f8ad 300c 	strh.w	r3, [sp, #12]
    2a9a:	e002      	b.n	2aa2 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2a9c:	2301      	movs	r3, #1
    2a9e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    2aa2:	ab02      	add	r3, sp, #8
    2aa4:	4618      	mov	r0, r3
    2aa6:	f7ff ffdc 	bl	2a62 <Clock_Ip_ClockSetPccCgcEnable>
}
    2aaa:	bf00      	nop
    2aac:	b005      	add	sp, #20
    2aae:	f85d fb04 	ldr.w	pc, [sp], #4

00002ab2 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    2ab2:	b500      	push	{lr}
    2ab4:	b083      	sub	sp, #12
    2ab6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ab8:	9b01      	ldr	r3, [sp, #4]
    2aba:	2b00      	cmp	r3, #0
    2abc:	d002      	beq.n	2ac4 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    2abe:	9801      	ldr	r0, [sp, #4]
    2ac0:	f000 f8bc 	bl	2c3c <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ac4:	bf00      	nop
    2ac6:	b003      	add	sp, #12
    2ac8:	f85d fb04 	ldr.w	pc, [sp], #4

00002acc <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    2acc:	b500      	push	{lr}
    2ace:	b085      	sub	sp, #20
    2ad0:	9001      	str	r0, [sp, #4]
    2ad2:	460b      	mov	r3, r1
    2ad4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2ad8:	9b01      	ldr	r3, [sp, #4]
    2ada:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2adc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	d003      	beq.n	2aec <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    2ae4:	2300      	movs	r3, #0
    2ae6:	f8ad 300c 	strh.w	r3, [sp, #12]
    2aea:	e002      	b.n	2af2 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2aec:	2301      	movs	r3, #1
    2aee:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    2af2:	ab02      	add	r3, sp, #8
    2af4:	4618      	mov	r0, r3
    2af6:	f7ff ffdc 	bl	2ab2 <Clock_Ip_ClockSetSimGate>
}
    2afa:	bf00      	nop
    2afc:	b005      	add	sp, #20
    2afe:	f85d fb04 	ldr.w	pc, [sp], #4

00002b02 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    2b02:	b500      	push	{lr}
    2b04:	b083      	sub	sp, #12
    2b06:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b08:	9b01      	ldr	r3, [sp, #4]
    2b0a:	2b00      	cmp	r3, #0
    2b0c:	d002      	beq.n	2b14 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    2b0e:	9801      	ldr	r0, [sp, #4]
    2b10:	f000 f8c0 	bl	2c94 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b14:	bf00      	nop
    2b16:	b003      	add	sp, #12
    2b18:	f85d fb04 	ldr.w	pc, [sp], #4

00002b1c <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2b1c:	b500      	push	{lr}
    2b1e:	b085      	sub	sp, #20
    2b20:	9001      	str	r0, [sp, #4]
    2b22:	460b      	mov	r3, r1
    2b24:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2b28:	9b01      	ldr	r3, [sp, #4]
    2b2a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2b2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2b30:	2b00      	cmp	r3, #0
    2b32:	d003      	beq.n	2b3c <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    2b34:	2300      	movs	r3, #0
    2b36:	f8ad 300c 	strh.w	r3, [sp, #12]
    2b3a:	e002      	b.n	2b42 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2b3c:	2301      	movs	r3, #1
    2b3e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    2b42:	ab02      	add	r3, sp, #8
    2b44:	4618      	mov	r0, r3
    2b46:	f7ff ffdc 	bl	2b02 <Clock_Ip_ClockSetSimTraceEnable>
}
    2b4a:	bf00      	nop
    2b4c:	b005      	add	sp, #20
    2b4e:	f85d fb04 	ldr.w	pc, [sp], #4

00002b52 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2b52:	b084      	sub	sp, #16
    2b54:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2b56:	4b09      	ldr	r3, [pc, #36]	; (2b7c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2b58:	691b      	ldr	r3, [r3, #16]
    2b5a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    2b5c:	9b03      	ldr	r3, [sp, #12]
    2b5e:	f023 0301 	bic.w	r3, r3, #1
    2b62:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    2b64:	9b01      	ldr	r3, [sp, #4]
    2b66:	889b      	ldrh	r3, [r3, #4]
    2b68:	461a      	mov	r2, r3
    2b6a:	9b03      	ldr	r3, [sp, #12]
    2b6c:	4313      	orrs	r3, r2
    2b6e:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2b70:	4a02      	ldr	r2, [pc, #8]	; (2b7c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2b72:	9b03      	ldr	r3, [sp, #12]
    2b74:	6113      	str	r3, [r2, #16]
}
    2b76:	bf00      	nop
    2b78:	b004      	add	sp, #16
    2b7a:	4770      	bx	lr
    2b7c:	40048000 	.word	0x40048000

00002b80 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2b80:	b084      	sub	sp, #16
    2b82:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2b84:	4b09      	ldr	r3, [pc, #36]	; (2bac <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2b86:	691b      	ldr	r3, [r3, #16]
    2b88:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    2b8a:	9b03      	ldr	r3, [sp, #12]
    2b8c:	f023 0302 	bic.w	r3, r3, #2
    2b90:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    2b92:	9b01      	ldr	r3, [sp, #4]
    2b94:	889b      	ldrh	r3, [r3, #4]
    2b96:	005b      	lsls	r3, r3, #1
    2b98:	9a03      	ldr	r2, [sp, #12]
    2b9a:	4313      	orrs	r3, r2
    2b9c:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2b9e:	4a03      	ldr	r2, [pc, #12]	; (2bac <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2ba0:	9b03      	ldr	r3, [sp, #12]
    2ba2:	6113      	str	r3, [r2, #16]
}
    2ba4:	bf00      	nop
    2ba6:	b004      	add	sp, #16
    2ba8:	4770      	bx	lr
    2baa:	bf00      	nop
    2bac:	40048000 	.word	0x40048000

00002bb0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2bb0:	b084      	sub	sp, #16
    2bb2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2bb4:	4b09      	ldr	r3, [pc, #36]	; (2bdc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2bb6:	685b      	ldr	r3, [r3, #4]
    2bb8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    2bba:	9b03      	ldr	r3, [sp, #12]
    2bbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2bc0:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    2bc2:	9b01      	ldr	r3, [sp, #4]
    2bc4:	889b      	ldrh	r3, [r3, #4]
    2bc6:	02db      	lsls	r3, r3, #11
    2bc8:	9a03      	ldr	r2, [sp, #12]
    2bca:	4313      	orrs	r3, r2
    2bcc:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2bce:	4a03      	ldr	r2, [pc, #12]	; (2bdc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2bd0:	9b03      	ldr	r3, [sp, #12]
    2bd2:	6053      	str	r3, [r2, #4]
}
    2bd4:	bf00      	nop
    2bd6:	b004      	add	sp, #16
    2bd8:	4770      	bx	lr
    2bda:	bf00      	nop
    2bdc:	40048000 	.word	0x40048000

00002be0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2be0:	b084      	sub	sp, #16
    2be2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    2be4:	4913      	ldr	r1, [pc, #76]	; (2c34 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2be6:	9b01      	ldr	r3, [sp, #4]
    2be8:	681a      	ldr	r2, [r3, #0]
    2bea:	4813      	ldr	r0, [pc, #76]	; (2c38 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2bec:	4613      	mov	r3, r2
    2bee:	00db      	lsls	r3, r3, #3
    2bf0:	4413      	add	r3, r2
    2bf2:	4403      	add	r3, r0
    2bf4:	3306      	adds	r3, #6
    2bf6:	781b      	ldrb	r3, [r3, #0]
    2bf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2bfc:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    2bfe:	9b03      	ldr	r3, [sp, #12]
    2c00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    2c04:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    2c06:	9b01      	ldr	r3, [sp, #4]
    2c08:	889b      	ldrh	r3, [r3, #4]
    2c0a:	079b      	lsls	r3, r3, #30
    2c0c:	9a03      	ldr	r2, [sp, #12]
    2c0e:	4313      	orrs	r3, r2
    2c10:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    2c12:	4908      	ldr	r1, [pc, #32]	; (2c34 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2c14:	9b01      	ldr	r3, [sp, #4]
    2c16:	681a      	ldr	r2, [r3, #0]
    2c18:	4807      	ldr	r0, [pc, #28]	; (2c38 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2c1a:	4613      	mov	r3, r2
    2c1c:	00db      	lsls	r3, r3, #3
    2c1e:	4413      	add	r3, r2
    2c20:	4403      	add	r3, r0
    2c22:	3306      	adds	r3, #6
    2c24:	781b      	ldrb	r3, [r3, #0]
    2c26:	461a      	mov	r2, r3
    2c28:	9b03      	ldr	r3, [sp, #12]
    2c2a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    2c2e:	bf00      	nop
    2c30:	b004      	add	sp, #16
    2c32:	4770      	bx	lr
    2c34:	40065000 	.word	0x40065000
    2c38:	0000b86c 	.word	0x0000b86c

00002c3c <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2c3c:	b086      	sub	sp, #24
    2c3e:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    2c40:	9b01      	ldr	r3, [sp, #4]
    2c42:	889b      	ldrh	r3, [r3, #4]
    2c44:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    2c46:	9b01      	ldr	r3, [sp, #4]
    2c48:	681a      	ldr	r2, [r3, #0]
    2c4a:	4910      	ldr	r1, [pc, #64]	; (2c8c <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    2c4c:	4613      	mov	r3, r2
    2c4e:	00db      	lsls	r3, r3, #3
    2c50:	4413      	add	r3, r2
    2c52:	440b      	add	r3, r1
    2c54:	3306      	adds	r3, #6
    2c56:	781b      	ldrb	r3, [r3, #0]
    2c58:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    2c5a:	4b0d      	ldr	r3, [pc, #52]	; (2c90 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2c5e:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    2c60:	2201      	movs	r2, #1
    2c62:	9b04      	ldr	r3, [sp, #16]
    2c64:	fa02 f303 	lsl.w	r3, r2, r3
    2c68:	43db      	mvns	r3, r3
    2c6a:	9a03      	ldr	r2, [sp, #12]
    2c6c:	4013      	ands	r3, r2
    2c6e:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    2c70:	9a05      	ldr	r2, [sp, #20]
    2c72:	9b04      	ldr	r3, [sp, #16]
    2c74:	fa02 f303 	lsl.w	r3, r2, r3
    2c78:	9a03      	ldr	r2, [sp, #12]
    2c7a:	4313      	orrs	r3, r2
    2c7c:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    2c7e:	4a04      	ldr	r2, [pc, #16]	; (2c90 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2c80:	9b03      	ldr	r3, [sp, #12]
    2c82:	6413      	str	r3, [r2, #64]	; 0x40
}
    2c84:	bf00      	nop
    2c86:	b006      	add	sp, #24
    2c88:	4770      	bx	lr
    2c8a:	bf00      	nop
    2c8c:	0000b86c 	.word	0x0000b86c
    2c90:	40048000 	.word	0x40048000

00002c94 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2c94:	b084      	sub	sp, #16
    2c96:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    2c98:	4b0a      	ldr	r3, [pc, #40]	; (2cc4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2c9c:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    2c9e:	9b01      	ldr	r3, [sp, #4]
    2ca0:	889b      	ldrh	r3, [r3, #4]
    2ca2:	2b01      	cmp	r3, #1
    2ca4:	d104      	bne.n	2cb0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    2ca6:	9b03      	ldr	r3, [sp, #12]
    2ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2cac:	9303      	str	r3, [sp, #12]
    2cae:	e003      	b.n	2cb8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2cb0:	9b03      	ldr	r3, [sp, #12]
    2cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2cb6:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    2cb8:	4a02      	ldr	r2, [pc, #8]	; (2cc4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2cba:	9b03      	ldr	r3, [sp, #12]
    2cbc:	6693      	str	r3, [r2, #104]	; 0x68
}
    2cbe:	bf00      	nop
    2cc0:	b004      	add	sp, #16
    2cc2:	4770      	bx	lr
    2cc4:	40048000 	.word	0x40048000

00002cc8 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    2cc8:	b082      	sub	sp, #8
    2cca:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2ccc:	bf00      	nop
    2cce:	b002      	add	sp, #8
    2cd0:	4770      	bx	lr

00002cd2 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    2cd2:	b082      	sub	sp, #8
    2cd4:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2cd6:	bf00      	nop
    2cd8:	b002      	add	sp, #8
    2cda:	4770      	bx	lr

00002cdc <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2cdc:	b500      	push	{lr}
    2cde:	b083      	sub	sp, #12
    2ce0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ce2:	9b01      	ldr	r3, [sp, #4]
    2ce4:	2b00      	cmp	r3, #0
    2ce6:	d002      	beq.n	2cee <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    2ce8:	9801      	ldr	r0, [sp, #4]
    2cea:	f000 f8d1 	bl	2e90 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cee:	bf00      	nop
    2cf0:	b003      	add	sp, #12
    2cf2:	f85d fb04 	ldr.w	pc, [sp], #4

00002cf6 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2cf6:	b500      	push	{lr}
    2cf8:	b083      	sub	sp, #12
    2cfa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cfc:	9b01      	ldr	r3, [sp, #4]
    2cfe:	2b00      	cmp	r3, #0
    2d00:	d002      	beq.n	2d08 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    2d02:	9801      	ldr	r0, [sp, #4]
    2d04:	f000 f950 	bl	2fa8 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d08:	bf00      	nop
    2d0a:	b003      	add	sp, #12
    2d0c:	f85d fb04 	ldr.w	pc, [sp], #4

00002d10 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    2d10:	b500      	push	{lr}
    2d12:	b083      	sub	sp, #12
    2d14:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    2d16:	9801      	ldr	r0, [sp, #4]
    2d18:	f000 f98e 	bl	3038 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2d1c:	bf00      	nop
    2d1e:	b003      	add	sp, #12
    2d20:	f85d fb04 	ldr.w	pc, [sp], #4

00002d24 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2d24:	b500      	push	{lr}
    2d26:	b083      	sub	sp, #12
    2d28:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d2a:	9b01      	ldr	r3, [sp, #4]
    2d2c:	2b00      	cmp	r3, #0
    2d2e:	d002      	beq.n	2d36 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    2d30:	9801      	ldr	r0, [sp, #4]
    2d32:	f000 f999 	bl	3068 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d36:	bf00      	nop
    2d38:	b003      	add	sp, #12
    2d3a:	f85d fb04 	ldr.w	pc, [sp], #4

00002d3e <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2d3e:	b500      	push	{lr}
    2d40:	b083      	sub	sp, #12
    2d42:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d44:	9b01      	ldr	r3, [sp, #4]
    2d46:	2b00      	cmp	r3, #0
    2d48:	d002      	beq.n	2d50 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    2d4a:	9801      	ldr	r0, [sp, #4]
    2d4c:	f000 f9b0 	bl	30b0 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d50:	bf00      	nop
    2d52:	b003      	add	sp, #12
    2d54:	f85d fb04 	ldr.w	pc, [sp], #4

00002d58 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    2d58:	b500      	push	{lr}
    2d5a:	b083      	sub	sp, #12
    2d5c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    2d5e:	9801      	ldr	r0, [sp, #4]
    2d60:	f000 f9ba 	bl	30d8 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2d64:	bf00      	nop
    2d66:	b003      	add	sp, #12
    2d68:	f85d fb04 	ldr.w	pc, [sp], #4

00002d6c <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2d6c:	b500      	push	{lr}
    2d6e:	b083      	sub	sp, #12
    2d70:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d72:	9b01      	ldr	r3, [sp, #4]
    2d74:	2b00      	cmp	r3, #0
    2d76:	d002      	beq.n	2d7e <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    2d78:	9801      	ldr	r0, [sp, #4]
    2d7a:	f000 f9bd 	bl	30f8 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d7e:	bf00      	nop
    2d80:	b003      	add	sp, #12
    2d82:	f85d fb04 	ldr.w	pc, [sp], #4

00002d86 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2d86:	b500      	push	{lr}
    2d88:	b083      	sub	sp, #12
    2d8a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d8c:	9b01      	ldr	r3, [sp, #4]
    2d8e:	2b00      	cmp	r3, #0
    2d90:	d002      	beq.n	2d98 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    2d92:	9801      	ldr	r0, [sp, #4]
    2d94:	f000 f9d4 	bl	3140 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d98:	bf00      	nop
    2d9a:	b003      	add	sp, #12
    2d9c:	f85d fb04 	ldr.w	pc, [sp], #4

00002da0 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    2da0:	b500      	push	{lr}
    2da2:	b083      	sub	sp, #12
    2da4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    2da6:	9801      	ldr	r0, [sp, #4]
    2da8:	f000 f9de 	bl	3168 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2dac:	bf00      	nop
    2dae:	b003      	add	sp, #12
    2db0:	f85d fb04 	ldr.w	pc, [sp], #4

00002db4 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    2db4:	b500      	push	{lr}
    2db6:	b089      	sub	sp, #36	; 0x24
    2db8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    2dba:	2300      	movs	r3, #0
    2dbc:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    2dc0:	4b20      	ldr	r3, [pc, #128]	; (2e44 <SetInputSouceSytemClock+0x90>)
    2dc2:	695b      	ldr	r3, [r3, #20]
    2dc4:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    2dc6:	9b06      	ldr	r3, [sp, #24]
    2dc8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    2dcc:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    2dce:	9b01      	ldr	r3, [sp, #4]
    2dd0:	061b      	lsls	r3, r3, #24
    2dd2:	9a06      	ldr	r2, [sp, #24]
    2dd4:	4313      	orrs	r3, r2
    2dd6:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    2dd8:	4a1a      	ldr	r2, [pc, #104]	; (2e44 <SetInputSouceSytemClock+0x90>)
    2dda:	9b06      	ldr	r3, [sp, #24]
    2ddc:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2dde:	aa02      	add	r2, sp, #8
    2de0:	a903      	add	r1, sp, #12
    2de2:	a804      	add	r0, sp, #16
    2de4:	f24c 3350 	movw	r3, #50000	; 0xc350
    2de8:	f7ff f9ac 	bl	2144 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    2dec:	4b15      	ldr	r3, [pc, #84]	; (2e44 <SetInputSouceSytemClock+0x90>)
    2dee:	691b      	ldr	r3, [r3, #16]
    2df0:	0e1b      	lsrs	r3, r3, #24
    2df2:	f003 030f 	and.w	r3, r3, #15
    2df6:	9a01      	ldr	r2, [sp, #4]
    2df8:	429a      	cmp	r2, r3
    2dfa:	bf0c      	ite	eq
    2dfc:	2301      	moveq	r3, #1
    2dfe:	2300      	movne	r3, #0
    2e00:	b2db      	uxtb	r3, r3
    2e02:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2e04:	9a02      	ldr	r2, [sp, #8]
    2e06:	a903      	add	r1, sp, #12
    2e08:	ab04      	add	r3, sp, #16
    2e0a:	4618      	mov	r0, r3
    2e0c:	f7ff f9b4 	bl	2178 <Clock_Ip_TimeoutExpired>
    2e10:	4603      	mov	r3, r0
    2e12:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    2e16:	9b05      	ldr	r3, [sp, #20]
    2e18:	2b00      	cmp	r3, #0
    2e1a:	d106      	bne.n	2e2a <SetInputSouceSytemClock+0x76>
    2e1c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e20:	f083 0301 	eor.w	r3, r3, #1
    2e24:	b2db      	uxtb	r3, r3
    2e26:	2b00      	cmp	r3, #0
    2e28:	d1e0      	bne.n	2dec <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    2e2a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e2e:	2b00      	cmp	r3, #0
    2e30:	d003      	beq.n	2e3a <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    2e32:	2105      	movs	r1, #5
    2e34:	2001      	movs	r0, #1
    2e36:	f7ff f975 	bl	2124 <Clock_Ip_ReportClockErrors>
    }
}
    2e3a:	bf00      	nop
    2e3c:	b009      	add	sp, #36	; 0x24
    2e3e:	f85d fb04 	ldr.w	pc, [sp], #4
    2e42:	bf00      	nop
    2e44:	40064000 	.word	0x40064000

00002e48 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2e48:	b500      	push	{lr}
    2e4a:	b083      	sub	sp, #12
    2e4c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e4e:	9b01      	ldr	r3, [sp, #4]
    2e50:	2b00      	cmp	r3, #0
    2e52:	d002      	beq.n	2e5a <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    2e54:	9801      	ldr	r0, [sp, #4]
    2e56:	f000 f997 	bl	3188 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e5a:	bf00      	nop
    2e5c:	b003      	add	sp, #12
    2e5e:	f85d fb04 	ldr.w	pc, [sp], #4

00002e62 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2e62:	b500      	push	{lr}
    2e64:	b083      	sub	sp, #12
    2e66:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e68:	9b01      	ldr	r3, [sp, #4]
    2e6a:	2b00      	cmp	r3, #0
    2e6c:	d002      	beq.n	2e74 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    2e6e:	9801      	ldr	r0, [sp, #4]
    2e70:	f000 fa7e 	bl	3370 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e74:	bf00      	nop
    2e76:	b003      	add	sp, #12
    2e78:	f85d fb04 	ldr.w	pc, [sp], #4

00002e7c <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    2e7c:	b500      	push	{lr}
    2e7e:	b083      	sub	sp, #12
    2e80:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    2e82:	9801      	ldr	r0, [sp, #4]
    2e84:	f000 fab8 	bl	33f8 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2e88:	bf00      	nop
    2e8a:	b003      	add	sp, #12
    2e8c:	f85d fb04 	ldr.w	pc, [sp], #4

00002e90 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2e90:	b500      	push	{lr}
    2e92:	b08b      	sub	sp, #44	; 0x2c
    2e94:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2e96:	2300      	movs	r3, #0
    2e98:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    2e9c:	9b01      	ldr	r3, [sp, #4]
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	d10b      	bne.n	2eba <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    2ea2:	2305      	movs	r3, #5
    2ea4:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    2ea6:	2301      	movs	r3, #1
    2ea8:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    2eac:	2301      	movs	r3, #1
    2eae:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    2eb2:	2301      	movs	r3, #1
    2eb4:	f88d 3010 	strb.w	r3, [sp, #16]
    2eb8:	e00e      	b.n	2ed8 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    2eba:	9b01      	ldr	r3, [sp, #4]
    2ebc:	681b      	ldr	r3, [r3, #0]
    2ebe:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    2ec0:	9b01      	ldr	r3, [sp, #4]
    2ec2:	79db      	ldrb	r3, [r3, #7]
    2ec4:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    2ec8:	9b01      	ldr	r3, [sp, #4]
    2eca:	889b      	ldrh	r3, [r3, #4]
    2ecc:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    2ed0:	9b01      	ldr	r3, [sp, #4]
    2ed2:	7a1b      	ldrb	r3, [r3, #8]
    2ed4:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2ed8:	4b32      	ldr	r3, [pc, #200]	; (2fa4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2eda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ede:	4a31      	ldr	r2, [pc, #196]	; (2fa4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ee0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2ee4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    2ee8:	4b2e      	ldr	r3, [pc, #184]	; (2fa4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2eea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2eee:	4a2d      	ldr	r2, [pc, #180]	; (2fa4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ef0:	f023 0301 	bic.w	r3, r3, #1
    2ef4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2ef8:	4b2a      	ldr	r3, [pc, #168]	; (2fa4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2efa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2efe:	4a29      	ldr	r2, [pc, #164]	; (2fa4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f00:	f023 0304 	bic.w	r3, r3, #4
    2f04:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    2f08:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    2f0c:	2b01      	cmp	r3, #1
    2f0e:	d144      	bne.n	2f9a <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    2f10:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2f14:	4a23      	ldr	r2, [pc, #140]	; (2fa4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f16:	f003 0301 	and.w	r3, r3, #1
    2f1a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2f1e:	4b21      	ldr	r3, [pc, #132]	; (2fa4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f24:	4a1f      	ldr	r2, [pc, #124]	; (2fa4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f26:	f043 0301 	orr.w	r3, r3, #1
    2f2a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    2f2e:	4b1d      	ldr	r3, [pc, #116]	; (2fa4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f30:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2f34:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2f38:	009b      	lsls	r3, r3, #2
    2f3a:	f003 0304 	and.w	r3, r3, #4
    2f3e:	4919      	ldr	r1, [pc, #100]	; (2fa4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f40:	4313      	orrs	r3, r2
    2f42:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2f46:	aa05      	add	r2, sp, #20
    2f48:	a906      	add	r1, sp, #24
    2f4a:	a807      	add	r0, sp, #28
    2f4c:	f24c 3350 	movw	r3, #50000	; 0xc350
    2f50:	f7ff f8f8 	bl	2144 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2f54:	4b13      	ldr	r3, [pc, #76]	; (2fa4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f5a:	0e1b      	lsrs	r3, r3, #24
    2f5c:	f003 0301 	and.w	r3, r3, #1
    2f60:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2f62:	9a05      	ldr	r2, [sp, #20]
    2f64:	a906      	add	r1, sp, #24
    2f66:	ab07      	add	r3, sp, #28
    2f68:	4618      	mov	r0, r3
    2f6a:	f7ff f905 	bl	2178 <Clock_Ip_TimeoutExpired>
    2f6e:	4603      	mov	r3, r0
    2f70:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2f74:	9b08      	ldr	r3, [sp, #32]
    2f76:	2b00      	cmp	r3, #0
    2f78:	d106      	bne.n	2f88 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    2f7a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2f7e:	f083 0301 	eor.w	r3, r3, #1
    2f82:	b2db      	uxtb	r3, r3
    2f84:	2b00      	cmp	r3, #0
    2f86:	d1e5      	bne.n	2f54 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    2f88:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	d004      	beq.n	2f9a <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    2f90:	9b02      	ldr	r3, [sp, #8]
    2f92:	4619      	mov	r1, r3
    2f94:	2001      	movs	r0, #1
    2f96:	f7ff f8c5 	bl	2124 <Clock_Ip_ReportClockErrors>
        }
    }
}
    2f9a:	bf00      	nop
    2f9c:	b00b      	add	sp, #44	; 0x2c
    2f9e:	f85d fb04 	ldr.w	pc, [sp], #4
    2fa2:	bf00      	nop
    2fa4:	40064000 	.word	0x40064000

00002fa8 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2fa8:	b500      	push	{lr}
    2faa:	b089      	sub	sp, #36	; 0x24
    2fac:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2fae:	2300      	movs	r3, #0
    2fb0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2fb4:	4b1f      	ldr	r3, [pc, #124]	; (3034 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fba:	4a1e      	ldr	r2, [pc, #120]	; (3034 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fbc:	f043 0301 	orr.w	r3, r3, #1
    2fc0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    2fc4:	4b1b      	ldr	r3, [pc, #108]	; (3034 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fca:	4a1a      	ldr	r2, [pc, #104]	; (3034 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fcc:	f043 0304 	orr.w	r3, r3, #4
    2fd0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2fd4:	aa03      	add	r2, sp, #12
    2fd6:	a904      	add	r1, sp, #16
    2fd8:	a805      	add	r0, sp, #20
    2fda:	f24c 3350 	movw	r3, #50000	; 0xc350
    2fde:	f7ff f8b1 	bl	2144 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2fe2:	4b14      	ldr	r3, [pc, #80]	; (3034 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fe4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fe8:	0e1b      	lsrs	r3, r3, #24
    2fea:	f003 0301 	and.w	r3, r3, #1
    2fee:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2ff0:	9a03      	ldr	r2, [sp, #12]
    2ff2:	a904      	add	r1, sp, #16
    2ff4:	ab05      	add	r3, sp, #20
    2ff6:	4618      	mov	r0, r3
    2ff8:	f7ff f8be 	bl	2178 <Clock_Ip_TimeoutExpired>
    2ffc:	4603      	mov	r3, r0
    2ffe:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3002:	9b06      	ldr	r3, [sp, #24]
    3004:	2b00      	cmp	r3, #0
    3006:	d106      	bne.n	3016 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3008:	f89d 301f 	ldrb.w	r3, [sp, #31]
    300c:	f083 0301 	eor.w	r3, r3, #1
    3010:	b2db      	uxtb	r3, r3
    3012:	2b00      	cmp	r3, #0
    3014:	d1e5      	bne.n	2fe2 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3016:	f89d 301f 	ldrb.w	r3, [sp, #31]
    301a:	2b00      	cmp	r3, #0
    301c:	d005      	beq.n	302a <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    301e:	9b01      	ldr	r3, [sp, #4]
    3020:	681b      	ldr	r3, [r3, #0]
    3022:	4619      	mov	r1, r3
    3024:	2001      	movs	r0, #1
    3026:	f7ff f87d 	bl	2124 <Clock_Ip_ReportClockErrors>
    }
}
    302a:	bf00      	nop
    302c:	b009      	add	sp, #36	; 0x24
    302e:	f85d fb04 	ldr.w	pc, [sp], #4
    3032:	bf00      	nop
    3034:	40064000 	.word	0x40064000

00003038 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3038:	b082      	sub	sp, #8
    303a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    303c:	4b09      	ldr	r3, [pc, #36]	; (3064 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    303e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3042:	4a08      	ldr	r2, [pc, #32]	; (3064 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3044:	f023 0301 	bic.w	r3, r3, #1
    3048:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    304c:	4b05      	ldr	r3, [pc, #20]	; (3064 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    304e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3052:	4a04      	ldr	r2, [pc, #16]	; (3064 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3054:	f023 0304 	bic.w	r3, r3, #4
    3058:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    305c:	bf00      	nop
    305e:	b002      	add	sp, #8
    3060:	4770      	bx	lr
    3062:	bf00      	nop
    3064:	40064000 	.word	0x40064000

00003068 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3068:	b082      	sub	sp, #8
    306a:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    306c:	4b0f      	ldr	r3, [pc, #60]	; (30ac <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    306e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3072:	4a0e      	ldr	r2, [pc, #56]	; (30ac <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3074:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3078:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    307c:	4b0b      	ldr	r3, [pc, #44]	; (30ac <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    307e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3082:	4a0a      	ldr	r2, [pc, #40]	; (30ac <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3084:	f023 0304 	bic.w	r3, r3, #4
    3088:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    308c:	4b07      	ldr	r3, [pc, #28]	; (30ac <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    308e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3092:	9b01      	ldr	r3, [sp, #4]
    3094:	7a1b      	ldrb	r3, [r3, #8]
    3096:	009b      	lsls	r3, r3, #2
    3098:	f003 0304 	and.w	r3, r3, #4
    309c:	4903      	ldr	r1, [pc, #12]	; (30ac <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    309e:	4313      	orrs	r3, r2
    30a0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    30a4:	bf00      	nop
    30a6:	b002      	add	sp, #8
    30a8:	4770      	bx	lr
    30aa:	bf00      	nop
    30ac:	40064000 	.word	0x40064000

000030b0 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    30b0:	b082      	sub	sp, #8
    30b2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    30b4:	9b01      	ldr	r3, [sp, #4]
    30b6:	889b      	ldrh	r3, [r3, #4]
    30b8:	2b01      	cmp	r3, #1
    30ba:	d107      	bne.n	30cc <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    30bc:	4b05      	ldr	r3, [pc, #20]	; (30d4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    30be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30c2:	4a04      	ldr	r2, [pc, #16]	; (30d4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    30c4:	f043 0304 	orr.w	r3, r3, #4
    30c8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    30cc:	bf00      	nop
    30ce:	b002      	add	sp, #8
    30d0:	4770      	bx	lr
    30d2:	bf00      	nop
    30d4:	40064000 	.word	0x40064000

000030d8 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    30d8:	b082      	sub	sp, #8
    30da:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    30dc:	4b05      	ldr	r3, [pc, #20]	; (30f4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    30de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30e2:	4a04      	ldr	r2, [pc, #16]	; (30f4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    30e4:	f023 0304 	bic.w	r3, r3, #4
    30e8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    30ec:	bf00      	nop
    30ee:	b002      	add	sp, #8
    30f0:	4770      	bx	lr
    30f2:	bf00      	nop
    30f4:	40064000 	.word	0x40064000

000030f8 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    30f8:	b082      	sub	sp, #8
    30fa:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    30fc:	4b0f      	ldr	r3, [pc, #60]	; (313c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    30fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3102:	4a0e      	ldr	r2, [pc, #56]	; (313c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3104:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3108:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    310c:	4b0b      	ldr	r3, [pc, #44]	; (313c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    310e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3112:	4a0a      	ldr	r2, [pc, #40]	; (313c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3114:	f023 0302 	bic.w	r3, r3, #2
    3118:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    311c:	4b07      	ldr	r3, [pc, #28]	; (313c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    311e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3122:	9b01      	ldr	r3, [sp, #4]
    3124:	7a5b      	ldrb	r3, [r3, #9]
    3126:	005b      	lsls	r3, r3, #1
    3128:	f003 0302 	and.w	r3, r3, #2
    312c:	4903      	ldr	r1, [pc, #12]	; (313c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    312e:	4313      	orrs	r3, r2
    3130:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3134:	bf00      	nop
    3136:	b002      	add	sp, #8
    3138:	4770      	bx	lr
    313a:	bf00      	nop
    313c:	40064000 	.word	0x40064000

00003140 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3140:	b082      	sub	sp, #8
    3142:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3144:	9b01      	ldr	r3, [sp, #4]
    3146:	889b      	ldrh	r3, [r3, #4]
    3148:	2b01      	cmp	r3, #1
    314a:	d107      	bne.n	315c <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    314c:	4b05      	ldr	r3, [pc, #20]	; (3164 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    314e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3152:	4a04      	ldr	r2, [pc, #16]	; (3164 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3154:	f043 0302 	orr.w	r3, r3, #2
    3158:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    315c:	bf00      	nop
    315e:	b002      	add	sp, #8
    3160:	4770      	bx	lr
    3162:	bf00      	nop
    3164:	40064000 	.word	0x40064000

00003168 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3168:	b082      	sub	sp, #8
    316a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    316c:	4b05      	ldr	r3, [pc, #20]	; (3184 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    316e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3172:	4a04      	ldr	r2, [pc, #16]	; (3184 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3174:	f023 0302 	bic.w	r3, r3, #2
    3178:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    317c:	bf00      	nop
    317e:	b002      	add	sp, #8
    3180:	4770      	bx	lr
    3182:	bf00      	nop
    3184:	40064000 	.word	0x40064000

00003188 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3188:	b500      	push	{lr}
    318a:	b08b      	sub	sp, #44	; 0x2c
    318c:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    318e:	9b01      	ldr	r3, [sp, #4]
    3190:	681a      	ldr	r2, [r3, #0]
    3192:	4975      	ldr	r1, [pc, #468]	; (3368 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3194:	4613      	mov	r3, r2
    3196:	00db      	lsls	r3, r3, #3
    3198:	4413      	add	r3, r2
    319a:	440b      	add	r3, r1
    319c:	781b      	ldrb	r3, [r3, #0]
    319e:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    31a0:	2300      	movs	r3, #0
    31a2:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    31a6:	2300      	movs	r3, #0
    31a8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    31ac:	4b6f      	ldr	r3, [pc, #444]	; (336c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    31b2:	4a6e      	ldr	r2, [pc, #440]	; (336c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    31b8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    31bc:	4b6b      	ldr	r3, [pc, #428]	; (336c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    31c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    31c6:	2b00      	cmp	r3, #0
    31c8:	d07d      	beq.n	32c6 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    31ca:	9b01      	ldr	r3, [sp, #4]
    31cc:	79db      	ldrb	r3, [r3, #7]
    31ce:	461a      	mov	r2, r3
    31d0:	4b66      	ldr	r3, [pc, #408]	; (336c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31d2:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    31d6:	f003 0303 	and.w	r3, r3, #3
    31da:	429a      	cmp	r2, r3
    31dc:	d10b      	bne.n	31f6 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    31de:	9b01      	ldr	r3, [sp, #4]
    31e0:	799b      	ldrb	r3, [r3, #6]
    31e2:	461a      	mov	r2, r3
    31e4:	4b61      	ldr	r3, [pc, #388]	; (336c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    31ea:	08db      	lsrs	r3, r3, #3
    31ec:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    31f0:	429a      	cmp	r2, r3
    31f2:	f000 80b4 	beq.w	335e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    31f6:	4b5d      	ldr	r3, [pc, #372]	; (336c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    31fc:	f003 0301 	and.w	r3, r3, #1
    3200:	2b00      	cmp	r3, #0
    3202:	d105      	bne.n	3210 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3204:	2301      	movs	r3, #1
    3206:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    320a:	2000      	movs	r0, #0
    320c:	f7ff fd66 	bl	2cdc <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3210:	2002      	movs	r0, #2
    3212:	f7ff fdcf 	bl	2db4 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3216:	4b55      	ldr	r3, [pc, #340]	; (336c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3218:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    321c:	4a53      	ldr	r2, [pc, #332]	; (336c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    321e:	f023 0301 	bic.w	r3, r3, #1
    3222:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3226:	9b01      	ldr	r3, [sp, #4]
    3228:	889b      	ldrh	r3, [r3, #4]
    322a:	2b01      	cmp	r3, #1
    322c:	f040 8097 	bne.w	335e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3230:	9b01      	ldr	r3, [sp, #4]
    3232:	79db      	ldrb	r3, [r3, #7]
    3234:	4a4d      	ldr	r2, [pc, #308]	; (336c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3236:	f003 0303 	and.w	r3, r3, #3
    323a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    323e:	4b4b      	ldr	r3, [pc, #300]	; (336c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3240:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3244:	9b01      	ldr	r3, [sp, #4]
    3246:	799b      	ldrb	r3, [r3, #6]
    3248:	00db      	lsls	r3, r3, #3
    324a:	f003 0308 	and.w	r3, r3, #8
    324e:	4313      	orrs	r3, r2
    3250:	4a46      	ldr	r2, [pc, #280]	; (336c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3252:	f043 0301 	orr.w	r3, r3, #1
    3256:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    325a:	aa03      	add	r2, sp, #12
    325c:	a904      	add	r1, sp, #16
    325e:	a805      	add	r0, sp, #20
    3260:	f24c 3350 	movw	r3, #50000	; 0xc350
    3264:	f7fe ff6e 	bl	2144 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3268:	4b40      	ldr	r3, [pc, #256]	; (336c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    326a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    326e:	0e1b      	lsrs	r3, r3, #24
    3270:	f003 0301 	and.w	r3, r3, #1
    3274:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3276:	9a03      	ldr	r2, [sp, #12]
    3278:	a904      	add	r1, sp, #16
    327a:	ab05      	add	r3, sp, #20
    327c:	4618      	mov	r0, r3
    327e:	f7fe ff7b 	bl	2178 <Clock_Ip_TimeoutExpired>
    3282:	4603      	mov	r3, r0
    3284:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3288:	9b06      	ldr	r3, [sp, #24]
    328a:	2b00      	cmp	r3, #0
    328c:	d106      	bne.n	329c <Clock_Ip_SetFirc_TrustedCall+0x114>
    328e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3292:	f083 0301 	eor.w	r3, r3, #1
    3296:	b2db      	uxtb	r3, r3
    3298:	2b00      	cmp	r3, #0
    329a:	d1e5      	bne.n	3268 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    329c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    32a0:	2b00      	cmp	r3, #0
    32a2:	d005      	beq.n	32b0 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    32a4:	9b01      	ldr	r3, [sp, #4]
    32a6:	681b      	ldr	r3, [r3, #0]
    32a8:	4619      	mov	r1, r3
    32aa:	2001      	movs	r0, #1
    32ac:	f7fe ff3a 	bl	2124 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    32b0:	2003      	movs	r0, #3
    32b2:	f7ff fd7f 	bl	2db4 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    32b6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    32ba:	2b00      	cmp	r3, #0
    32bc:	d04f      	beq.n	335e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    32be:	2002      	movs	r0, #2
    32c0:	f7ff fd26 	bl	2d10 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    32c4:	e04b      	b.n	335e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    32c6:	4b29      	ldr	r3, [pc, #164]	; (336c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32c8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    32cc:	4a27      	ldr	r2, [pc, #156]	; (336c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32ce:	f023 0301 	bic.w	r3, r3, #1
    32d2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    32d6:	9b01      	ldr	r3, [sp, #4]
    32d8:	889b      	ldrh	r3, [r3, #4]
    32da:	2b01      	cmp	r3, #1
    32dc:	d13f      	bne.n	335e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    32de:	9b01      	ldr	r3, [sp, #4]
    32e0:	79db      	ldrb	r3, [r3, #7]
    32e2:	4a22      	ldr	r2, [pc, #136]	; (336c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32e4:	f003 0303 	and.w	r3, r3, #3
    32e8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    32ec:	4b1f      	ldr	r3, [pc, #124]	; (336c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32ee:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    32f2:	9b01      	ldr	r3, [sp, #4]
    32f4:	799b      	ldrb	r3, [r3, #6]
    32f6:	00db      	lsls	r3, r3, #3
    32f8:	f003 0308 	and.w	r3, r3, #8
    32fc:	4313      	orrs	r3, r2
    32fe:	4a1b      	ldr	r2, [pc, #108]	; (336c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3300:	f043 0301 	orr.w	r3, r3, #1
    3304:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3308:	aa03      	add	r2, sp, #12
    330a:	a904      	add	r1, sp, #16
    330c:	a805      	add	r0, sp, #20
    330e:	f24c 3350 	movw	r3, #50000	; 0xc350
    3312:	f7fe ff17 	bl	2144 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3316:	4b15      	ldr	r3, [pc, #84]	; (336c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3318:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    331c:	0e1b      	lsrs	r3, r3, #24
    331e:	f003 0301 	and.w	r3, r3, #1
    3322:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3324:	9a03      	ldr	r2, [sp, #12]
    3326:	a904      	add	r1, sp, #16
    3328:	ab05      	add	r3, sp, #20
    332a:	4618      	mov	r0, r3
    332c:	f7fe ff24 	bl	2178 <Clock_Ip_TimeoutExpired>
    3330:	4603      	mov	r3, r0
    3332:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3336:	9b06      	ldr	r3, [sp, #24]
    3338:	2b00      	cmp	r3, #0
    333a:	d106      	bne.n	334a <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    333c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3340:	f083 0301 	eor.w	r3, r3, #1
    3344:	b2db      	uxtb	r3, r3
    3346:	2b00      	cmp	r3, #0
    3348:	d1e5      	bne.n	3316 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    334a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    334e:	2b00      	cmp	r3, #0
    3350:	d005      	beq.n	335e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3352:	9b01      	ldr	r3, [sp, #4]
    3354:	681b      	ldr	r3, [r3, #0]
    3356:	4619      	mov	r1, r3
    3358:	2001      	movs	r0, #1
    335a:	f7fe fee3 	bl	2124 <Clock_Ip_ReportClockErrors>
}
    335e:	bf00      	nop
    3360:	b00b      	add	sp, #44	; 0x2c
    3362:	f85d fb04 	ldr.w	pc, [sp], #4
    3366:	bf00      	nop
    3368:	0000b86c 	.word	0x0000b86c
    336c:	40064000 	.word	0x40064000

00003370 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3370:	b500      	push	{lr}
    3372:	b089      	sub	sp, #36	; 0x24
    3374:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3376:	2300      	movs	r3, #0
    3378:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    337c:	9b01      	ldr	r3, [sp, #4]
    337e:	889b      	ldrh	r3, [r3, #4]
    3380:	2b01      	cmp	r3, #1
    3382:	d132      	bne.n	33ea <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3384:	4b1b      	ldr	r3, [pc, #108]	; (33f4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3386:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    338a:	4a1a      	ldr	r2, [pc, #104]	; (33f4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    338c:	f043 0301 	orr.w	r3, r3, #1
    3390:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3394:	aa03      	add	r2, sp, #12
    3396:	a904      	add	r1, sp, #16
    3398:	a805      	add	r0, sp, #20
    339a:	f24c 3350 	movw	r3, #50000	; 0xc350
    339e:	f7fe fed1 	bl	2144 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    33a2:	4b14      	ldr	r3, [pc, #80]	; (33f4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    33a4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    33a8:	0e1b      	lsrs	r3, r3, #24
    33aa:	f003 0301 	and.w	r3, r3, #1
    33ae:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    33b0:	9a03      	ldr	r2, [sp, #12]
    33b2:	a904      	add	r1, sp, #16
    33b4:	ab05      	add	r3, sp, #20
    33b6:	4618      	mov	r0, r3
    33b8:	f7fe fede 	bl	2178 <Clock_Ip_TimeoutExpired>
    33bc:	4603      	mov	r3, r0
    33be:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    33c2:	9b06      	ldr	r3, [sp, #24]
    33c4:	2b00      	cmp	r3, #0
    33c6:	d106      	bne.n	33d6 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    33c8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33cc:	f083 0301 	eor.w	r3, r3, #1
    33d0:	b2db      	uxtb	r3, r3
    33d2:	2b00      	cmp	r3, #0
    33d4:	d1e5      	bne.n	33a2 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    33d6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33da:	2b00      	cmp	r3, #0
    33dc:	d005      	beq.n	33ea <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    33de:	9b01      	ldr	r3, [sp, #4]
    33e0:	681b      	ldr	r3, [r3, #0]
    33e2:	4619      	mov	r1, r3
    33e4:	2001      	movs	r0, #1
    33e6:	f7fe fe9d 	bl	2124 <Clock_Ip_ReportClockErrors>
        }
    }
}
    33ea:	bf00      	nop
    33ec:	b009      	add	sp, #36	; 0x24
    33ee:	f85d fb04 	ldr.w	pc, [sp], #4
    33f2:	bf00      	nop
    33f4:	40064000 	.word	0x40064000

000033f8 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    33f8:	b082      	sub	sp, #8
    33fa:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    33fc:	4b05      	ldr	r3, [pc, #20]	; (3414 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    33fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3402:	4a04      	ldr	r2, [pc, #16]	; (3414 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3404:	f023 0301 	bic.w	r3, r3, #1
    3408:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    340c:	bf00      	nop
    340e:	b002      	add	sp, #8
    3410:	4770      	bx	lr
    3412:	bf00      	nop
    3414:	40064000 	.word	0x40064000

00003418 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3418:	b082      	sub	sp, #8
    341a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    341c:	bf00      	nop
    341e:	b002      	add	sp, #8
    3420:	4770      	bx	lr

00003422 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3422:	b082      	sub	sp, #8
    3424:	9001      	str	r0, [sp, #4]
    3426:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3428:	bf00      	nop
    342a:	b002      	add	sp, #8
    342c:	4770      	bx	lr

0000342e <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    342e:	b082      	sub	sp, #8
    3430:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3432:	bf00      	nop
    3434:	b002      	add	sp, #8
    3436:	4770      	bx	lr

00003438 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3438:	b082      	sub	sp, #8
    343a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    343c:	bf00      	nop
    343e:	b002      	add	sp, #8
    3440:	4770      	bx	lr

00003442 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3442:	b082      	sub	sp, #8
    3444:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3446:	2302      	movs	r3, #2
}
    3448:	4618      	mov	r0, r3
    344a:	b002      	add	sp, #8
    344c:	4770      	bx	lr

0000344e <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    344e:	b082      	sub	sp, #8
    3450:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3452:	bf00      	nop
    3454:	b002      	add	sp, #8
    3456:	4770      	bx	lr

00003458 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3458:	b500      	push	{lr}
    345a:	b083      	sub	sp, #12
    345c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    345e:	9b01      	ldr	r3, [sp, #4]
    3460:	2b00      	cmp	r3, #0
    3462:	d002      	beq.n	346a <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3464:	9801      	ldr	r0, [sp, #4]
    3466:	f000 f870 	bl	354a <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    346a:	bf00      	nop
    346c:	b003      	add	sp, #12
    346e:	f85d fb04 	ldr.w	pc, [sp], #4

00003472 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3472:	b500      	push	{lr}
    3474:	b083      	sub	sp, #12
    3476:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3478:	9b01      	ldr	r3, [sp, #4]
    347a:	2b00      	cmp	r3, #0
    347c:	d002      	beq.n	3484 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    347e:	9801      	ldr	r0, [sp, #4]
    3480:	f000 f89a 	bl	35b8 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3484:	bf00      	nop
    3486:	b003      	add	sp, #12
    3488:	f85d fb04 	ldr.w	pc, [sp], #4

0000348c <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    348c:	b500      	push	{lr}
    348e:	b089      	sub	sp, #36	; 0x24
    3490:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3492:	2301      	movs	r3, #1
    3494:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3496:	2300      	movs	r3, #0
    3498:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    349c:	4b1e      	ldr	r3, [pc, #120]	; (3518 <Clock_Ip_CompleteSpll+0x8c>)
    349e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    34a2:	f003 0301 	and.w	r3, r3, #1
    34a6:	2b00      	cmp	r3, #0
    34a8:	d02f      	beq.n	350a <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    34aa:	aa02      	add	r2, sp, #8
    34ac:	a903      	add	r1, sp, #12
    34ae:	a804      	add	r0, sp, #16
    34b0:	f24c 3350 	movw	r3, #50000	; 0xc350
    34b4:	f7fe fe46 	bl	2144 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    34b8:	4b17      	ldr	r3, [pc, #92]	; (3518 <Clock_Ip_CompleteSpll+0x8c>)
    34ba:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    34be:	0e1b      	lsrs	r3, r3, #24
    34c0:	f003 0301 	and.w	r3, r3, #1
    34c4:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    34c6:	9a02      	ldr	r2, [sp, #8]
    34c8:	a903      	add	r1, sp, #12
    34ca:	ab04      	add	r3, sp, #16
    34cc:	4618      	mov	r0, r3
    34ce:	f7fe fe53 	bl	2178 <Clock_Ip_TimeoutExpired>
    34d2:	4603      	mov	r3, r0
    34d4:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    34d8:	9b05      	ldr	r3, [sp, #20]
    34da:	2b00      	cmp	r3, #0
    34dc:	d106      	bne.n	34ec <Clock_Ip_CompleteSpll+0x60>
    34de:	f89d 301b 	ldrb.w	r3, [sp, #27]
    34e2:	f083 0301 	eor.w	r3, r3, #1
    34e6:	b2db      	uxtb	r3, r3
    34e8:	2b00      	cmp	r3, #0
    34ea:	d1e5      	bne.n	34b8 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    34ec:	f89d 301b 	ldrb.w	r3, [sp, #27]
    34f0:	f083 0301 	eor.w	r3, r3, #1
    34f4:	b2db      	uxtb	r3, r3
    34f6:	2b00      	cmp	r3, #0
    34f8:	d002      	beq.n	3500 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    34fa:	2302      	movs	r3, #2
    34fc:	9307      	str	r3, [sp, #28]
    34fe:	e006      	b.n	350e <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3500:	9901      	ldr	r1, [sp, #4]
    3502:	2001      	movs	r0, #1
    3504:	f7fe fe0e 	bl	2124 <Clock_Ip_ReportClockErrors>
    3508:	e001      	b.n	350e <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    350a:	2300      	movs	r3, #0
    350c:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    350e:	9b07      	ldr	r3, [sp, #28]
}
    3510:	4618      	mov	r0, r3
    3512:	b009      	add	sp, #36	; 0x24
    3514:	f85d fb04 	ldr.w	pc, [sp], #4
    3518:	40064000 	.word	0x40064000

0000351c <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    351c:	b500      	push	{lr}
    351e:	b083      	sub	sp, #12
    3520:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3522:	9801      	ldr	r0, [sp, #4]
    3524:	f000 f886 	bl	3634 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3528:	bf00      	nop
    352a:	b003      	add	sp, #12
    352c:	f85d fb04 	ldr.w	pc, [sp], #4

00003530 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3530:	b500      	push	{lr}
    3532:	b083      	sub	sp, #12
    3534:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3536:	9b01      	ldr	r3, [sp, #4]
    3538:	2b00      	cmp	r3, #0
    353a:	d002      	beq.n	3542 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    353c:	9801      	ldr	r0, [sp, #4]
    353e:	f000 f891 	bl	3664 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3542:	bf00      	nop
    3544:	b003      	add	sp, #12
    3546:	f85d fb04 	ldr.w	pc, [sp], #4

0000354a <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    354a:	b082      	sub	sp, #8
    354c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    354e:	4b19      	ldr	r3, [pc, #100]	; (35b4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3550:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3554:	4a17      	ldr	r2, [pc, #92]	; (35b4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3556:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    355a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    355e:	4b15      	ldr	r3, [pc, #84]	; (35b4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3560:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3564:	4a13      	ldr	r2, [pc, #76]	; (35b4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    356a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    356e:	4b11      	ldr	r3, [pc, #68]	; (35b4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3570:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3574:	4a0f      	ldr	r2, [pc, #60]	; (35b4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3576:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    357a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    357e:	4b0d      	ldr	r3, [pc, #52]	; (35b4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3580:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3584:	4a0b      	ldr	r2, [pc, #44]	; (35b4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3586:	f023 0301 	bic.w	r3, r3, #1
    358a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    358e:	4b09      	ldr	r3, [pc, #36]	; (35b4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3590:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3594:	4a07      	ldr	r2, [pc, #28]	; (35b4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3596:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    359a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    359e:	4b05      	ldr	r3, [pc, #20]	; (35b4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35a0:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    35a4:	4a03      	ldr	r2, [pc, #12]	; (35b4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    35aa:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    35ae:	bf00      	nop
    35b0:	b002      	add	sp, #8
    35b2:	4770      	bx	lr
    35b4:	40064000 	.word	0x40064000

000035b8 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    35b8:	b082      	sub	sp, #8
    35ba:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    35bc:	9b01      	ldr	r3, [sp, #4]
    35be:	889b      	ldrh	r3, [r3, #4]
    35c0:	2b01      	cmp	r3, #1
    35c2:	d12f      	bne.n	3624 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    35c4:	4b1a      	ldr	r3, [pc, #104]	; (3630 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    35c6:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    35ca:	9b01      	ldr	r3, [sp, #4]
    35cc:	7b5b      	ldrb	r3, [r3, #13]
    35ce:	3b01      	subs	r3, #1
    35d0:	021b      	lsls	r3, r3, #8
    35d2:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    35d6:	9b01      	ldr	r3, [sp, #4]
    35d8:	7d1b      	ldrb	r3, [r3, #20]
    35da:	3b10      	subs	r3, #16
    35dc:	041b      	lsls	r3, r3, #16
    35de:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    35e2:	430b      	orrs	r3, r1
    35e4:	4912      	ldr	r1, [pc, #72]	; (3630 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    35e6:	4313      	orrs	r3, r2
    35e8:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    35ec:	9b01      	ldr	r3, [sp, #4]
    35ee:	7fdb      	ldrb	r3, [r3, #31]
    35f0:	2b02      	cmp	r3, #2
    35f2:	d011      	beq.n	3618 <Clock_Ip_SetSpll_TrustedCall+0x60>
    35f4:	2b02      	cmp	r3, #2
    35f6:	dc17      	bgt.n	3628 <Clock_Ip_SetSpll_TrustedCall+0x70>
    35f8:	2b00      	cmp	r3, #0
    35fa:	d002      	beq.n	3602 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    35fc:	2b01      	cmp	r3, #1
    35fe:	d005      	beq.n	360c <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3600:	e012      	b.n	3628 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    3602:	4b0b      	ldr	r3, [pc, #44]	; (3630 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3604:	2200      	movs	r2, #0
    3606:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    360a:	e00e      	b.n	362a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    360c:	4b08      	ldr	r3, [pc, #32]	; (3630 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    360e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3612:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3616:	e008      	b.n	362a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3618:	4b05      	ldr	r3, [pc, #20]	; (3630 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    361a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    361e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3622:	e002      	b.n	362a <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    3624:	bf00      	nop
    3626:	e000      	b.n	362a <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    3628:	bf00      	nop
}
    362a:	bf00      	nop
    362c:	b002      	add	sp, #8
    362e:	4770      	bx	lr
    3630:	40064000 	.word	0x40064000

00003634 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    3634:	b082      	sub	sp, #8
    3636:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3638:	4b09      	ldr	r3, [pc, #36]	; (3660 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    363a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    363e:	4a08      	ldr	r2, [pc, #32]	; (3660 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3640:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3644:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3648:	4b05      	ldr	r3, [pc, #20]	; (3660 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    364a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    364e:	4a04      	ldr	r2, [pc, #16]	; (3660 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3650:	f023 0301 	bic.w	r3, r3, #1
    3654:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    3658:	bf00      	nop
    365a:	b002      	add	sp, #8
    365c:	4770      	bx	lr
    365e:	bf00      	nop
    3660:	40064000 	.word	0x40064000

00003664 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3664:	b082      	sub	sp, #8
    3666:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3668:	9b01      	ldr	r3, [sp, #4]
    366a:	889b      	ldrh	r3, [r3, #4]
    366c:	2b01      	cmp	r3, #1
    366e:	d107      	bne.n	3680 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    3670:	4b05      	ldr	r3, [pc, #20]	; (3688 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3672:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3676:	4a04      	ldr	r2, [pc, #16]	; (3688 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3678:	f043 0301 	orr.w	r3, r3, #1
    367c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    3680:	bf00      	nop
    3682:	b002      	add	sp, #8
    3684:	4770      	bx	lr
    3686:	bf00      	nop
    3688:	40064000 	.word	0x40064000

0000368c <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    368c:	b082      	sub	sp, #8
    368e:	9001      	str	r0, [sp, #4]
    3690:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3692:	bf00      	nop
    3694:	b002      	add	sp, #8
    3696:	4770      	bx	lr

00003698 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    3698:	b082      	sub	sp, #8
    369a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    369c:	bf00      	nop
    369e:	b002      	add	sp, #8
    36a0:	4770      	bx	lr

000036a2 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    36a2:	b500      	push	{lr}
    36a4:	b083      	sub	sp, #12
    36a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36a8:	9b01      	ldr	r3, [sp, #4]
    36aa:	2b00      	cmp	r3, #0
    36ac:	d002      	beq.n	36b4 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    36ae:	9801      	ldr	r0, [sp, #4]
    36b0:	f000 f8ee 	bl	3890 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36b4:	bf00      	nop
    36b6:	b003      	add	sp, #12
    36b8:	f85d fb04 	ldr.w	pc, [sp], #4

000036bc <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    36bc:	b500      	push	{lr}
    36be:	b083      	sub	sp, #12
    36c0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36c2:	9b01      	ldr	r3, [sp, #4]
    36c4:	2b00      	cmp	r3, #0
    36c6:	d002      	beq.n	36ce <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    36c8:	9801      	ldr	r0, [sp, #4]
    36ca:	f000 f8ff 	bl	38cc <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36ce:	bf00      	nop
    36d0:	b003      	add	sp, #12
    36d2:	f85d fb04 	ldr.w	pc, [sp], #4

000036d6 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    36d6:	b500      	push	{lr}
    36d8:	b083      	sub	sp, #12
    36da:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36dc:	9b01      	ldr	r3, [sp, #4]
    36de:	2b00      	cmp	r3, #0
    36e0:	d002      	beq.n	36e8 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    36e2:	9801      	ldr	r0, [sp, #4]
    36e4:	f000 f912 	bl	390c <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36e8:	bf00      	nop
    36ea:	b003      	add	sp, #12
    36ec:	f85d fb04 	ldr.w	pc, [sp], #4

000036f0 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    36f0:	b500      	push	{lr}
    36f2:	b083      	sub	sp, #12
    36f4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36f6:	9b01      	ldr	r3, [sp, #4]
    36f8:	2b00      	cmp	r3, #0
    36fa:	d002      	beq.n	3702 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    36fc:	9801      	ldr	r0, [sp, #4]
    36fe:	f000 f925 	bl	394c <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3702:	bf00      	nop
    3704:	b003      	add	sp, #12
    3706:	f85d fb04 	ldr.w	pc, [sp], #4

0000370a <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    370a:	b500      	push	{lr}
    370c:	b083      	sub	sp, #12
    370e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3710:	9b01      	ldr	r3, [sp, #4]
    3712:	2b00      	cmp	r3, #0
    3714:	d002      	beq.n	371c <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    3716:	9801      	ldr	r0, [sp, #4]
    3718:	f000 f936 	bl	3988 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    371c:	bf00      	nop
    371e:	b003      	add	sp, #12
    3720:	f85d fb04 	ldr.w	pc, [sp], #4

00003724 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3724:	b500      	push	{lr}
    3726:	b083      	sub	sp, #12
    3728:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    372a:	9b01      	ldr	r3, [sp, #4]
    372c:	2b00      	cmp	r3, #0
    372e:	d002      	beq.n	3736 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    3730:	9801      	ldr	r0, [sp, #4]
    3732:	f000 f949 	bl	39c8 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3736:	bf00      	nop
    3738:	b003      	add	sp, #12
    373a:	f85d fb04 	ldr.w	pc, [sp], #4

0000373e <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    373e:	b500      	push	{lr}
    3740:	b083      	sub	sp, #12
    3742:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3744:	9b01      	ldr	r3, [sp, #4]
    3746:	2b00      	cmp	r3, #0
    3748:	d002      	beq.n	3750 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    374a:	9801      	ldr	r0, [sp, #4]
    374c:	f000 f958 	bl	3a00 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3750:	bf00      	nop
    3752:	b003      	add	sp, #12
    3754:	f85d fb04 	ldr.w	pc, [sp], #4

00003758 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3758:	b500      	push	{lr}
    375a:	b083      	sub	sp, #12
    375c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    375e:	9b01      	ldr	r3, [sp, #4]
    3760:	2b00      	cmp	r3, #0
    3762:	d002      	beq.n	376a <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    3764:	9801      	ldr	r0, [sp, #4]
    3766:	f000 f969 	bl	3a3c <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    376a:	bf00      	nop
    376c:	b003      	add	sp, #12
    376e:	f85d fb04 	ldr.w	pc, [sp], #4

00003772 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3772:	b500      	push	{lr}
    3774:	b083      	sub	sp, #12
    3776:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3778:	9b01      	ldr	r3, [sp, #4]
    377a:	2b00      	cmp	r3, #0
    377c:	d002      	beq.n	3784 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    377e:	9801      	ldr	r0, [sp, #4]
    3780:	f000 f978 	bl	3a74 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3784:	bf00      	nop
    3786:	b003      	add	sp, #12
    3788:	f85d fb04 	ldr.w	pc, [sp], #4

0000378c <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    378c:	b500      	push	{lr}
    378e:	b083      	sub	sp, #12
    3790:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3792:	9b01      	ldr	r3, [sp, #4]
    3794:	2b00      	cmp	r3, #0
    3796:	d002      	beq.n	379e <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    3798:	9801      	ldr	r0, [sp, #4]
    379a:	f000 f989 	bl	3ab0 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    379e:	bf00      	nop
    37a0:	b003      	add	sp, #12
    37a2:	f85d fb04 	ldr.w	pc, [sp], #4

000037a6 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    37a6:	b500      	push	{lr}
    37a8:	b083      	sub	sp, #12
    37aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37ac:	9b01      	ldr	r3, [sp, #4]
    37ae:	2b00      	cmp	r3, #0
    37b0:	d002      	beq.n	37b8 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    37b2:	9801      	ldr	r0, [sp, #4]
    37b4:	f000 f998 	bl	3ae8 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37b8:	bf00      	nop
    37ba:	b003      	add	sp, #12
    37bc:	f85d fb04 	ldr.w	pc, [sp], #4

000037c0 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    37c0:	b500      	push	{lr}
    37c2:	b083      	sub	sp, #12
    37c4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37c6:	9b01      	ldr	r3, [sp, #4]
    37c8:	2b00      	cmp	r3, #0
    37ca:	d002      	beq.n	37d2 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    37cc:	9801      	ldr	r0, [sp, #4]
    37ce:	f000 f9a9 	bl	3b24 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37d2:	bf00      	nop
    37d4:	b003      	add	sp, #12
    37d6:	f85d fb04 	ldr.w	pc, [sp], #4

000037da <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    37da:	b500      	push	{lr}
    37dc:	b083      	sub	sp, #12
    37de:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37e0:	9b01      	ldr	r3, [sp, #4]
    37e2:	2b00      	cmp	r3, #0
    37e4:	d002      	beq.n	37ec <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    37e6:	9801      	ldr	r0, [sp, #4]
    37e8:	f000 f9e6 	bl	3bb8 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37ec:	bf00      	nop
    37ee:	b003      	add	sp, #12
    37f0:	f85d fb04 	ldr.w	pc, [sp], #4

000037f4 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    37f4:	b500      	push	{lr}
    37f6:	b083      	sub	sp, #12
    37f8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37fa:	9b01      	ldr	r3, [sp, #4]
    37fc:	2b00      	cmp	r3, #0
    37fe:	d002      	beq.n	3806 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    3800:	9801      	ldr	r0, [sp, #4]
    3802:	f000 fa25 	bl	3c50 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3806:	bf00      	nop
    3808:	b003      	add	sp, #12
    380a:	f85d fb04 	ldr.w	pc, [sp], #4

0000380e <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    380e:	b500      	push	{lr}
    3810:	b083      	sub	sp, #12
    3812:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3814:	9b01      	ldr	r3, [sp, #4]
    3816:	2b00      	cmp	r3, #0
    3818:	d002      	beq.n	3820 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    381a:	9801      	ldr	r0, [sp, #4]
    381c:	f000 fa2a 	bl	3c74 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3820:	bf00      	nop
    3822:	b003      	add	sp, #12
    3824:	f85d fb04 	ldr.w	pc, [sp], #4

00003828 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3828:	b500      	push	{lr}
    382a:	b083      	sub	sp, #12
    382c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    382e:	9b01      	ldr	r3, [sp, #4]
    3830:	2b00      	cmp	r3, #0
    3832:	d002      	beq.n	383a <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    3834:	9801      	ldr	r0, [sp, #4]
    3836:	f000 fa3b 	bl	3cb0 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    383a:	bf00      	nop
    383c:	b003      	add	sp, #12
    383e:	f85d fb04 	ldr.w	pc, [sp], #4

00003842 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3842:	b500      	push	{lr}
    3844:	b083      	sub	sp, #12
    3846:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3848:	9b01      	ldr	r3, [sp, #4]
    384a:	2b00      	cmp	r3, #0
    384c:	d002      	beq.n	3854 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    384e:	9801      	ldr	r0, [sp, #4]
    3850:	f000 fa56 	bl	3d00 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3854:	bf00      	nop
    3856:	b003      	add	sp, #12
    3858:	f85d fb04 	ldr.w	pc, [sp], #4

0000385c <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    385c:	b500      	push	{lr}
    385e:	b083      	sub	sp, #12
    3860:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3862:	9b01      	ldr	r3, [sp, #4]
    3864:	2b00      	cmp	r3, #0
    3866:	d002      	beq.n	386e <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    3868:	9801      	ldr	r0, [sp, #4]
    386a:	f000 fa79 	bl	3d60 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    386e:	bf00      	nop
    3870:	b003      	add	sp, #12
    3872:	f85d fb04 	ldr.w	pc, [sp], #4

00003876 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3876:	b500      	push	{lr}
    3878:	b083      	sub	sp, #12
    387a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    387c:	9b01      	ldr	r3, [sp, #4]
    387e:	2b00      	cmp	r3, #0
    3880:	d002      	beq.n	3888 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    3882:	9801      	ldr	r0, [sp, #4]
    3884:	f000 fa8a 	bl	3d9c <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3888:	bf00      	nop
    388a:	b003      	add	sp, #12
    388c:	f85d fb04 	ldr.w	pc, [sp], #4

00003890 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3890:	b084      	sub	sp, #16
    3892:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3894:	4b0b      	ldr	r3, [pc, #44]	; (38c4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    3896:	795b      	ldrb	r3, [r3, #5]
    3898:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    389a:	4b0b      	ldr	r3, [pc, #44]	; (38c8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    389c:	695b      	ldr	r3, [r3, #20]
    389e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    38a0:	9b02      	ldr	r3, [sp, #8]
    38a2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    38a6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    38a8:	9b03      	ldr	r3, [sp, #12]
    38aa:	061b      	lsls	r3, r3, #24
    38ac:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    38b0:	9a02      	ldr	r2, [sp, #8]
    38b2:	4313      	orrs	r3, r2
    38b4:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    38b6:	4a04      	ldr	r2, [pc, #16]	; (38c8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    38b8:	9b02      	ldr	r3, [sp, #8]
    38ba:	6153      	str	r3, [r2, #20]
}
    38bc:	bf00      	nop
    38be:	b004      	add	sp, #16
    38c0:	4770      	bx	lr
    38c2:	bf00      	nop
    38c4:	0000bbd4 	.word	0x0000bbd4
    38c8:	40064000 	.word	0x40064000

000038cc <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    38cc:	b084      	sub	sp, #16
    38ce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    38d0:	9b01      	ldr	r3, [sp, #4]
    38d2:	685b      	ldr	r3, [r3, #4]
    38d4:	4a0b      	ldr	r2, [pc, #44]	; (3904 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    38d6:	5cd3      	ldrb	r3, [r2, r3]
    38d8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    38da:	4b0b      	ldr	r3, [pc, #44]	; (3908 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    38dc:	695b      	ldr	r3, [r3, #20]
    38de:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    38e0:	9b02      	ldr	r3, [sp, #8]
    38e2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    38e6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    38e8:	9b03      	ldr	r3, [sp, #12]
    38ea:	061b      	lsls	r3, r3, #24
    38ec:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    38f0:	9a02      	ldr	r2, [sp, #8]
    38f2:	4313      	orrs	r3, r2
    38f4:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    38f6:	4a04      	ldr	r2, [pc, #16]	; (3908 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    38f8:	9b02      	ldr	r3, [sp, #8]
    38fa:	6153      	str	r3, [r2, #20]
}
    38fc:	bf00      	nop
    38fe:	b004      	add	sp, #16
    3900:	4770      	bx	lr
    3902:	bf00      	nop
    3904:	0000bbd4 	.word	0x0000bbd4
    3908:	40064000 	.word	0x40064000

0000390c <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    390c:	b084      	sub	sp, #16
    390e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3910:	9b01      	ldr	r3, [sp, #4]
    3912:	685b      	ldr	r3, [r3, #4]
    3914:	4a0b      	ldr	r2, [pc, #44]	; (3944 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    3916:	5cd3      	ldrb	r3, [r2, r3]
    3918:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    391a:	4b0b      	ldr	r3, [pc, #44]	; (3948 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    391c:	699b      	ldr	r3, [r3, #24]
    391e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    3920:	9b02      	ldr	r3, [sp, #8]
    3922:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3926:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    3928:	9b03      	ldr	r3, [sp, #12]
    392a:	061b      	lsls	r3, r3, #24
    392c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3930:	9a02      	ldr	r2, [sp, #8]
    3932:	4313      	orrs	r3, r2
    3934:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    3936:	4a04      	ldr	r2, [pc, #16]	; (3948 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3938:	9b02      	ldr	r3, [sp, #8]
    393a:	6193      	str	r3, [r2, #24]
}
    393c:	bf00      	nop
    393e:	b004      	add	sp, #16
    3940:	4770      	bx	lr
    3942:	bf00      	nop
    3944:	0000bbd4 	.word	0x0000bbd4
    3948:	40064000 	.word	0x40064000

0000394c <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    394c:	b084      	sub	sp, #16
    394e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3950:	4b0b      	ldr	r3, [pc, #44]	; (3980 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    3952:	795b      	ldrb	r3, [r3, #5]
    3954:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    3956:	4b0b      	ldr	r3, [pc, #44]	; (3984 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3958:	69db      	ldr	r3, [r3, #28]
    395a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    395c:	9b02      	ldr	r3, [sp, #8]
    395e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3962:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3964:	9b03      	ldr	r3, [sp, #12]
    3966:	061b      	lsls	r3, r3, #24
    3968:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    396c:	9a02      	ldr	r2, [sp, #8]
    396e:	4313      	orrs	r3, r2
    3970:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3972:	4a04      	ldr	r2, [pc, #16]	; (3984 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3974:	9b02      	ldr	r3, [sp, #8]
    3976:	61d3      	str	r3, [r2, #28]
}
    3978:	bf00      	nop
    397a:	b004      	add	sp, #16
    397c:	4770      	bx	lr
    397e:	bf00      	nop
    3980:	0000bbd4 	.word	0x0000bbd4
    3984:	40064000 	.word	0x40064000

00003988 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3988:	b084      	sub	sp, #16
    398a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    398c:	9b01      	ldr	r3, [sp, #4]
    398e:	685b      	ldr	r3, [r3, #4]
    3990:	4a0b      	ldr	r2, [pc, #44]	; (39c0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    3992:	5cd3      	ldrb	r3, [r2, r3]
    3994:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    3996:	4b0b      	ldr	r3, [pc, #44]	; (39c4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3998:	69db      	ldr	r3, [r3, #28]
    399a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    399c:	9b02      	ldr	r3, [sp, #8]
    399e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    39a2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    39a4:	9b03      	ldr	r3, [sp, #12]
    39a6:	061b      	lsls	r3, r3, #24
    39a8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    39ac:	9a02      	ldr	r2, [sp, #8]
    39ae:	4313      	orrs	r3, r2
    39b0:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    39b2:	4a04      	ldr	r2, [pc, #16]	; (39c4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    39b4:	9b02      	ldr	r3, [sp, #8]
    39b6:	61d3      	str	r3, [r2, #28]
}
    39b8:	bf00      	nop
    39ba:	b004      	add	sp, #16
    39bc:	4770      	bx	lr
    39be:	bf00      	nop
    39c0:	0000bbd4 	.word	0x0000bbd4
    39c4:	40064000 	.word	0x40064000

000039c8 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    39c8:	b084      	sub	sp, #16
    39ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    39cc:	4b0a      	ldr	r3, [pc, #40]	; (39f8 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    39ce:	7b9b      	ldrb	r3, [r3, #14]
    39d0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    39d2:	4b0a      	ldr	r3, [pc, #40]	; (39fc <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    39d4:	691b      	ldr	r3, [r3, #16]
    39d6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    39d8:	9b02      	ldr	r3, [sp, #8]
    39da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    39de:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    39e0:	9b03      	ldr	r3, [sp, #12]
    39e2:	011b      	lsls	r3, r3, #4
    39e4:	9a02      	ldr	r2, [sp, #8]
    39e6:	4313      	orrs	r3, r2
    39e8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    39ea:	4a04      	ldr	r2, [pc, #16]	; (39fc <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    39ec:	9b02      	ldr	r3, [sp, #8]
    39ee:	6113      	str	r3, [r2, #16]
}
    39f0:	bf00      	nop
    39f2:	b004      	add	sp, #16
    39f4:	4770      	bx	lr
    39f6:	bf00      	nop
    39f8:	0000bb7c 	.word	0x0000bb7c
    39fc:	40048000 	.word	0x40048000

00003a00 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a00:	b084      	sub	sp, #16
    3a02:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a04:	9b01      	ldr	r3, [sp, #4]
    3a06:	685b      	ldr	r3, [r3, #4]
    3a08:	4a0a      	ldr	r2, [pc, #40]	; (3a34 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    3a0a:	5cd3      	ldrb	r3, [r2, r3]
    3a0c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    3a0e:	4b0a      	ldr	r3, [pc, #40]	; (3a38 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3a10:	691b      	ldr	r3, [r3, #16]
    3a12:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3a14:	9b02      	ldr	r3, [sp, #8]
    3a16:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3a1a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3a1c:	9b03      	ldr	r3, [sp, #12]
    3a1e:	011b      	lsls	r3, r3, #4
    3a20:	9a02      	ldr	r2, [sp, #8]
    3a22:	4313      	orrs	r3, r2
    3a24:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a26:	4a04      	ldr	r2, [pc, #16]	; (3a38 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3a28:	9b02      	ldr	r3, [sp, #8]
    3a2a:	6113      	str	r3, [r2, #16]
}
    3a2c:	bf00      	nop
    3a2e:	b004      	add	sp, #16
    3a30:	4770      	bx	lr
    3a32:	bf00      	nop
    3a34:	0000bb7c 	.word	0x0000bb7c
    3a38:	40048000 	.word	0x40048000

00003a3c <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a3c:	b084      	sub	sp, #16
    3a3e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a40:	4b0a      	ldr	r3, [pc, #40]	; (3a6c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    3a42:	785b      	ldrb	r3, [r3, #1]
    3a44:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3a46:	4b0a      	ldr	r3, [pc, #40]	; (3a70 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3a48:	691b      	ldr	r3, [r3, #16]
    3a4a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3a4c:	9b02      	ldr	r3, [sp, #8]
    3a4e:	f023 030c 	bic.w	r3, r3, #12
    3a52:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3a54:	9b03      	ldr	r3, [sp, #12]
    3a56:	009b      	lsls	r3, r3, #2
    3a58:	9a02      	ldr	r2, [sp, #8]
    3a5a:	4313      	orrs	r3, r2
    3a5c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a5e:	4a04      	ldr	r2, [pc, #16]	; (3a70 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3a60:	9b02      	ldr	r3, [sp, #8]
    3a62:	6113      	str	r3, [r2, #16]
}
    3a64:	bf00      	nop
    3a66:	b004      	add	sp, #16
    3a68:	4770      	bx	lr
    3a6a:	bf00      	nop
    3a6c:	0000bc34 	.word	0x0000bc34
    3a70:	40048000 	.word	0x40048000

00003a74 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a74:	b084      	sub	sp, #16
    3a76:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a78:	9b01      	ldr	r3, [sp, #4]
    3a7a:	685b      	ldr	r3, [r3, #4]
    3a7c:	4a0a      	ldr	r2, [pc, #40]	; (3aa8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    3a7e:	5cd3      	ldrb	r3, [r2, r3]
    3a80:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3a82:	4b0a      	ldr	r3, [pc, #40]	; (3aac <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3a84:	691b      	ldr	r3, [r3, #16]
    3a86:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3a88:	9b02      	ldr	r3, [sp, #8]
    3a8a:	f023 030c 	bic.w	r3, r3, #12
    3a8e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3a90:	9b03      	ldr	r3, [sp, #12]
    3a92:	009b      	lsls	r3, r3, #2
    3a94:	9a02      	ldr	r2, [sp, #8]
    3a96:	4313      	orrs	r3, r2
    3a98:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a9a:	4a04      	ldr	r2, [pc, #16]	; (3aac <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3a9c:	9b02      	ldr	r3, [sp, #8]
    3a9e:	6113      	str	r3, [r2, #16]
}
    3aa0:	bf00      	nop
    3aa2:	b004      	add	sp, #16
    3aa4:	4770      	bx	lr
    3aa6:	bf00      	nop
    3aa8:	0000bc34 	.word	0x0000bc34
    3aac:	40048000 	.word	0x40048000

00003ab0 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3ab0:	b084      	sub	sp, #16
    3ab2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ab4:	4b0a      	ldr	r3, [pc, #40]	; (3ae0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    3ab6:	795b      	ldrb	r3, [r3, #5]
    3ab8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    3aba:	4b0a      	ldr	r3, [pc, #40]	; (3ae4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3abc:	6a1b      	ldr	r3, [r3, #32]
    3abe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3ac0:	9b02      	ldr	r3, [sp, #8]
    3ac2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3ac6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3ac8:	9b03      	ldr	r3, [sp, #12]
    3aca:	061b      	lsls	r3, r3, #24
    3acc:	9a02      	ldr	r2, [sp, #8]
    3ace:	4313      	orrs	r3, r2
    3ad0:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3ad2:	4a04      	ldr	r2, [pc, #16]	; (3ae4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3ad4:	9b02      	ldr	r3, [sp, #8]
    3ad6:	6213      	str	r3, [r2, #32]
}
    3ad8:	bf00      	nop
    3ada:	b004      	add	sp, #16
    3adc:	4770      	bx	lr
    3ade:	bf00      	nop
    3ae0:	0000bbd4 	.word	0x0000bbd4
    3ae4:	40064000 	.word	0x40064000

00003ae8 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3ae8:	b084      	sub	sp, #16
    3aea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3aec:	9b01      	ldr	r3, [sp, #4]
    3aee:	685b      	ldr	r3, [r3, #4]
    3af0:	4a0a      	ldr	r2, [pc, #40]	; (3b1c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    3af2:	5cd3      	ldrb	r3, [r2, r3]
    3af4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    3af6:	4b0a      	ldr	r3, [pc, #40]	; (3b20 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3af8:	6a1b      	ldr	r3, [r3, #32]
    3afa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3afc:	9b02      	ldr	r3, [sp, #8]
    3afe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3b02:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3b04:	9b03      	ldr	r3, [sp, #12]
    3b06:	061b      	lsls	r3, r3, #24
    3b08:	9a02      	ldr	r2, [sp, #8]
    3b0a:	4313      	orrs	r3, r2
    3b0c:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3b0e:	4a04      	ldr	r2, [pc, #16]	; (3b20 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3b10:	9b02      	ldr	r3, [sp, #8]
    3b12:	6213      	str	r3, [r2, #32]
}
    3b14:	bf00      	nop
    3b16:	b004      	add	sp, #16
    3b18:	4770      	bx	lr
    3b1a:	bf00      	nop
    3b1c:	0000bbd4 	.word	0x0000bbd4
    3b20:	40064000 	.word	0x40064000

00003b24 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b24:	b086      	sub	sp, #24
    3b26:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b28:	4b20      	ldr	r3, [pc, #128]	; (3bac <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    3b2a:	795b      	ldrb	r3, [r3, #5]
    3b2c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3b2e:	9b01      	ldr	r3, [sp, #4]
    3b30:	681a      	ldr	r2, [r3, #0]
    3b32:	491f      	ldr	r1, [pc, #124]	; (3bb0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    3b34:	4613      	mov	r3, r2
    3b36:	00db      	lsls	r3, r3, #3
    3b38:	4413      	add	r3, r2
    3b3a:	440b      	add	r3, r1
    3b3c:	781b      	ldrb	r3, [r3, #0]
    3b3e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3b40:	4b1c      	ldr	r3, [pc, #112]	; (3bb4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3b42:	68db      	ldr	r3, [r3, #12]
    3b44:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3b46:	9b03      	ldr	r3, [sp, #12]
    3b48:	2b03      	cmp	r3, #3
    3b4a:	d813      	bhi.n	3b74 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3b4c:	9b03      	ldr	r3, [sp, #12]
    3b4e:	005b      	lsls	r3, r3, #1
    3b50:	3318      	adds	r3, #24
    3b52:	2203      	movs	r2, #3
    3b54:	fa02 f303 	lsl.w	r3, r2, r3
    3b58:	43db      	mvns	r3, r3
    3b5a:	9a05      	ldr	r2, [sp, #20]
    3b5c:	4013      	ands	r3, r2
    3b5e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3b60:	9b03      	ldr	r3, [sp, #12]
    3b62:	005b      	lsls	r3, r3, #1
    3b64:	3318      	adds	r3, #24
    3b66:	9a04      	ldr	r2, [sp, #16]
    3b68:	fa02 f303 	lsl.w	r3, r2, r3
    3b6c:	9a05      	ldr	r2, [sp, #20]
    3b6e:	4313      	orrs	r3, r2
    3b70:	9305      	str	r3, [sp, #20]
    3b72:	e014      	b.n	3b9e <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3b74:	9b03      	ldr	r3, [sp, #12]
    3b76:	3b04      	subs	r3, #4
    3b78:	005b      	lsls	r3, r3, #1
    3b7a:	3310      	adds	r3, #16
    3b7c:	2203      	movs	r2, #3
    3b7e:	fa02 f303 	lsl.w	r3, r2, r3
    3b82:	43db      	mvns	r3, r3
    3b84:	9a05      	ldr	r2, [sp, #20]
    3b86:	4013      	ands	r3, r2
    3b88:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3b8a:	9b03      	ldr	r3, [sp, #12]
    3b8c:	3b04      	subs	r3, #4
    3b8e:	005b      	lsls	r3, r3, #1
    3b90:	3310      	adds	r3, #16
    3b92:	9a04      	ldr	r2, [sp, #16]
    3b94:	fa02 f303 	lsl.w	r3, r2, r3
    3b98:	9a05      	ldr	r2, [sp, #20]
    3b9a:	4313      	orrs	r3, r2
    3b9c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3b9e:	4a05      	ldr	r2, [pc, #20]	; (3bb4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3ba0:	9b05      	ldr	r3, [sp, #20]
    3ba2:	60d3      	str	r3, [r2, #12]
}
    3ba4:	bf00      	nop
    3ba6:	b006      	add	sp, #24
    3ba8:	4770      	bx	lr
    3baa:	bf00      	nop
    3bac:	0000bb7c 	.word	0x0000bb7c
    3bb0:	0000b86c 	.word	0x0000b86c
    3bb4:	40048000 	.word	0x40048000

00003bb8 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3bb8:	b086      	sub	sp, #24
    3bba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3bbc:	9b01      	ldr	r3, [sp, #4]
    3bbe:	685b      	ldr	r3, [r3, #4]
    3bc0:	4a20      	ldr	r2, [pc, #128]	; (3c44 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    3bc2:	5cd3      	ldrb	r3, [r2, r3]
    3bc4:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3bc6:	9b01      	ldr	r3, [sp, #4]
    3bc8:	681a      	ldr	r2, [r3, #0]
    3bca:	491f      	ldr	r1, [pc, #124]	; (3c48 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    3bcc:	4613      	mov	r3, r2
    3bce:	00db      	lsls	r3, r3, #3
    3bd0:	4413      	add	r3, r2
    3bd2:	440b      	add	r3, r1
    3bd4:	781b      	ldrb	r3, [r3, #0]
    3bd6:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3bd8:	4b1c      	ldr	r3, [pc, #112]	; (3c4c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3bda:	68db      	ldr	r3, [r3, #12]
    3bdc:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3bde:	9b03      	ldr	r3, [sp, #12]
    3be0:	2b03      	cmp	r3, #3
    3be2:	d813      	bhi.n	3c0c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3be4:	9b03      	ldr	r3, [sp, #12]
    3be6:	005b      	lsls	r3, r3, #1
    3be8:	3318      	adds	r3, #24
    3bea:	2203      	movs	r2, #3
    3bec:	fa02 f303 	lsl.w	r3, r2, r3
    3bf0:	43db      	mvns	r3, r3
    3bf2:	9a05      	ldr	r2, [sp, #20]
    3bf4:	4013      	ands	r3, r2
    3bf6:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3bf8:	9b03      	ldr	r3, [sp, #12]
    3bfa:	005b      	lsls	r3, r3, #1
    3bfc:	3318      	adds	r3, #24
    3bfe:	9a04      	ldr	r2, [sp, #16]
    3c00:	fa02 f303 	lsl.w	r3, r2, r3
    3c04:	9a05      	ldr	r2, [sp, #20]
    3c06:	4313      	orrs	r3, r2
    3c08:	9305      	str	r3, [sp, #20]
    3c0a:	e014      	b.n	3c36 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3c0c:	9b03      	ldr	r3, [sp, #12]
    3c0e:	3b04      	subs	r3, #4
    3c10:	005b      	lsls	r3, r3, #1
    3c12:	3310      	adds	r3, #16
    3c14:	2203      	movs	r2, #3
    3c16:	fa02 f303 	lsl.w	r3, r2, r3
    3c1a:	43db      	mvns	r3, r3
    3c1c:	9a05      	ldr	r2, [sp, #20]
    3c1e:	4013      	ands	r3, r2
    3c20:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3c22:	9b03      	ldr	r3, [sp, #12]
    3c24:	3b04      	subs	r3, #4
    3c26:	005b      	lsls	r3, r3, #1
    3c28:	3310      	adds	r3, #16
    3c2a:	9a04      	ldr	r2, [sp, #16]
    3c2c:	fa02 f303 	lsl.w	r3, r2, r3
    3c30:	9a05      	ldr	r2, [sp, #20]
    3c32:	4313      	orrs	r3, r2
    3c34:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3c36:	4a05      	ldr	r2, [pc, #20]	; (3c4c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3c38:	9b05      	ldr	r3, [sp, #20]
    3c3a:	60d3      	str	r3, [r2, #12]
}
    3c3c:	bf00      	nop
    3c3e:	b006      	add	sp, #24
    3c40:	4770      	bx	lr
    3c42:	bf00      	nop
    3c44:	0000bb7c 	.word	0x0000bb7c
    3c48:	0000b86c 	.word	0x0000b86c
    3c4c:	40048000 	.word	0x40048000

00003c50 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c50:	b084      	sub	sp, #16
    3c52:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    3c54:	4b06      	ldr	r3, [pc, #24]	; (3c70 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3c56:	685b      	ldr	r3, [r3, #4]
    3c58:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    3c5a:	9b03      	ldr	r3, [sp, #12]
    3c5c:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    3c60:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3c62:	4a03      	ldr	r2, [pc, #12]	; (3c70 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3c64:	9b03      	ldr	r3, [sp, #12]
    3c66:	6053      	str	r3, [r2, #4]
}
    3c68:	bf00      	nop
    3c6a:	b004      	add	sp, #16
    3c6c:	4770      	bx	lr
    3c6e:	bf00      	nop
    3c70:	40048000 	.word	0x40048000

00003c74 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c74:	b084      	sub	sp, #16
    3c76:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3c78:	9b01      	ldr	r3, [sp, #4]
    3c7a:	685b      	ldr	r3, [r3, #4]
    3c7c:	4a0a      	ldr	r2, [pc, #40]	; (3ca8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    3c7e:	5cd3      	ldrb	r3, [r2, r3]
    3c80:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    3c82:	4b0a      	ldr	r3, [pc, #40]	; (3cac <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3c84:	685b      	ldr	r3, [r3, #4]
    3c86:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    3c88:	9b02      	ldr	r3, [sp, #8]
    3c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3c8e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    3c90:	9b03      	ldr	r3, [sp, #12]
    3c92:	011b      	lsls	r3, r3, #4
    3c94:	9a02      	ldr	r2, [sp, #8]
    3c96:	4313      	orrs	r3, r2
    3c98:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    3c9a:	4a04      	ldr	r2, [pc, #16]	; (3cac <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3c9c:	9b02      	ldr	r3, [sp, #8]
    3c9e:	6053      	str	r3, [r2, #4]
}
    3ca0:	bf00      	nop
    3ca2:	b004      	add	sp, #16
    3ca4:	4770      	bx	lr
    3ca6:	bf00      	nop
    3ca8:	0000bb7c 	.word	0x0000bb7c
    3cac:	40048000 	.word	0x40048000

00003cb0 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3cb0:	b084      	sub	sp, #16
    3cb2:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3cb4:	9b01      	ldr	r3, [sp, #4]
    3cb6:	681a      	ldr	r2, [r3, #0]
    3cb8:	490f      	ldr	r1, [pc, #60]	; (3cf8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    3cba:	4613      	mov	r3, r2
    3cbc:	00db      	lsls	r3, r3, #3
    3cbe:	4413      	add	r3, r2
    3cc0:	440b      	add	r3, r1
    3cc2:	3304      	adds	r3, #4
    3cc4:	781b      	ldrb	r3, [r3, #0]
    3cc6:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    3cc8:	4a0c      	ldr	r2, [pc, #48]	; (3cfc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cca:	9b03      	ldr	r3, [sp, #12]
    3ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3cd0:	490a      	ldr	r1, [pc, #40]	; (3cfc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cd2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    3cd6:	9b03      	ldr	r3, [sp, #12]
    3cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    3cdc:	4a07      	ldr	r2, [pc, #28]	; (3cfc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cde:	9b03      	ldr	r3, [sp, #12]
    3ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3ce4:	4905      	ldr	r1, [pc, #20]	; (3cfc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3ce6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    3cea:	9b03      	ldr	r3, [sp, #12]
    3cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3cf0:	bf00      	nop
    3cf2:	b004      	add	sp, #16
    3cf4:	4770      	bx	lr
    3cf6:	bf00      	nop
    3cf8:	0000b86c 	.word	0x0000b86c
    3cfc:	40065000 	.word	0x40065000

00003d00 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d00:	b086      	sub	sp, #24
    3d02:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3d04:	9b01      	ldr	r3, [sp, #4]
    3d06:	681a      	ldr	r2, [r3, #0]
    3d08:	4912      	ldr	r1, [pc, #72]	; (3d54 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    3d0a:	4613      	mov	r3, r2
    3d0c:	00db      	lsls	r3, r3, #3
    3d0e:	4413      	add	r3, r2
    3d10:	440b      	add	r3, r1
    3d12:	3304      	adds	r3, #4
    3d14:	781b      	ldrb	r3, [r3, #0]
    3d16:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d18:	9b01      	ldr	r3, [sp, #4]
    3d1a:	685b      	ldr	r3, [r3, #4]
    3d1c:	4a0e      	ldr	r2, [pc, #56]	; (3d58 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    3d1e:	5cd3      	ldrb	r3, [r2, r3]
    3d20:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    3d22:	4a0e      	ldr	r2, [pc, #56]	; (3d5c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3d24:	9b05      	ldr	r3, [sp, #20]
    3d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d2a:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    3d2c:	9b03      	ldr	r3, [sp, #12]
    3d2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    3d32:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    3d34:	9b04      	ldr	r3, [sp, #16]
    3d36:	061b      	lsls	r3, r3, #24
    3d38:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    3d3c:	9a03      	ldr	r2, [sp, #12]
    3d3e:	4313      	orrs	r3, r2
    3d40:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    3d42:	4906      	ldr	r1, [pc, #24]	; (3d5c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3d44:	9b05      	ldr	r3, [sp, #20]
    3d46:	9a03      	ldr	r2, [sp, #12]
    3d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3d4c:	bf00      	nop
    3d4e:	b006      	add	sp, #24
    3d50:	4770      	bx	lr
    3d52:	bf00      	nop
    3d54:	0000b86c 	.word	0x0000b86c
    3d58:	0000bc04 	.word	0x0000bc04
    3d5c:	40065000 	.word	0x40065000

00003d60 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d60:	b084      	sub	sp, #16
    3d62:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d64:	4b0b      	ldr	r3, [pc, #44]	; (3d94 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    3d66:	7f1b      	ldrb	r3, [r3, #28]
    3d68:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    3d6a:	4b0b      	ldr	r3, [pc, #44]	; (3d98 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3d6c:	685b      	ldr	r3, [r3, #4]
    3d6e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3d70:	9b02      	ldr	r3, [sp, #8]
    3d72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3d76:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3d78:	9b03      	ldr	r3, [sp, #12]
    3d7a:	031b      	lsls	r3, r3, #12
    3d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3d80:	9a02      	ldr	r2, [sp, #8]
    3d82:	4313      	orrs	r3, r2
    3d84:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3d86:	4a04      	ldr	r2, [pc, #16]	; (3d98 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3d88:	9b02      	ldr	r3, [sp, #8]
    3d8a:	6053      	str	r3, [r2, #4]
}
    3d8c:	bf00      	nop
    3d8e:	b004      	add	sp, #16
    3d90:	4770      	bx	lr
    3d92:	bf00      	nop
    3d94:	0000bb7c 	.word	0x0000bb7c
    3d98:	40048000 	.word	0x40048000

00003d9c <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d9c:	b084      	sub	sp, #16
    3d9e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3da0:	9b01      	ldr	r3, [sp, #4]
    3da2:	685b      	ldr	r3, [r3, #4]
    3da4:	4a0b      	ldr	r2, [pc, #44]	; (3dd4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    3da6:	5cd3      	ldrb	r3, [r2, r3]
    3da8:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    3daa:	4b0b      	ldr	r3, [pc, #44]	; (3dd8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3dac:	685b      	ldr	r3, [r3, #4]
    3dae:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3db0:	9b02      	ldr	r3, [sp, #8]
    3db2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3db6:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3db8:	9b03      	ldr	r3, [sp, #12]
    3dba:	031b      	lsls	r3, r3, #12
    3dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3dc0:	9a02      	ldr	r2, [sp, #8]
    3dc2:	4313      	orrs	r3, r2
    3dc4:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3dc6:	4a04      	ldr	r2, [pc, #16]	; (3dd8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3dc8:	9b02      	ldr	r3, [sp, #8]
    3dca:	6053      	str	r3, [r2, #4]
}
    3dcc:	bf00      	nop
    3dce:	b004      	add	sp, #16
    3dd0:	4770      	bx	lr
    3dd2:	bf00      	nop
    3dd4:	0000bb7c 	.word	0x0000bb7c
    3dd8:	40048000 	.word	0x40048000

00003ddc <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    3ddc:	b500      	push	{lr}
    3dde:	b085      	sub	sp, #20
    3de0:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    3de2:	2300      	movs	r3, #0
    3de4:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    3de8:	9b01      	ldr	r3, [sp, #4]
    3dea:	2b00      	cmp	r3, #0
    3dec:	d037      	beq.n	3e5e <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3dee:	2300      	movs	r3, #0
    3df0:	9303      	str	r3, [sp, #12]
    3df2:	e02b      	b.n	3e4c <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3df4:	4b29      	ldr	r3, [pc, #164]	; (3e9c <DisableSafeClock+0xc0>)
    3df6:	6819      	ldr	r1, [r3, #0]
    3df8:	9a03      	ldr	r2, [sp, #12]
    3dfa:	4613      	mov	r3, r2
    3dfc:	005b      	lsls	r3, r3, #1
    3dfe:	4413      	add	r3, r2
    3e00:	009b      	lsls	r3, r3, #2
    3e02:	440b      	add	r3, r1
    3e04:	3314      	adds	r3, #20
    3e06:	681b      	ldr	r3, [r3, #0]
    3e08:	2b05      	cmp	r3, #5
    3e0a:	d11c      	bne.n	3e46 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    3e0c:	2301      	movs	r3, #1
    3e0e:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    3e12:	4b22      	ldr	r3, [pc, #136]	; (3e9c <DisableSafeClock+0xc0>)
    3e14:	6819      	ldr	r1, [r3, #0]
    3e16:	9a03      	ldr	r2, [sp, #12]
    3e18:	4613      	mov	r3, r2
    3e1a:	005b      	lsls	r3, r3, #1
    3e1c:	4413      	add	r3, r2
    3e1e:	009b      	lsls	r3, r3, #2
    3e20:	440b      	add	r3, r1
    3e22:	3318      	adds	r3, #24
    3e24:	881b      	ldrh	r3, [r3, #0]
    3e26:	2b00      	cmp	r3, #0
    3e28:	d118      	bne.n	3e5c <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3e2a:	4b1d      	ldr	r3, [pc, #116]	; (3ea0 <DisableSafeClock+0xc4>)
    3e2c:	791b      	ldrb	r3, [r3, #4]
    3e2e:	4619      	mov	r1, r3
    3e30:	4a1c      	ldr	r2, [pc, #112]	; (3ea4 <DisableSafeClock+0xc8>)
    3e32:	460b      	mov	r3, r1
    3e34:	005b      	lsls	r3, r3, #1
    3e36:	440b      	add	r3, r1
    3e38:	009b      	lsls	r3, r3, #2
    3e3a:	4413      	add	r3, r2
    3e3c:	3308      	adds	r3, #8
    3e3e:	681b      	ldr	r3, [r3, #0]
    3e40:	2005      	movs	r0, #5
    3e42:	4798      	blx	r3
                }
                break;
    3e44:	e00a      	b.n	3e5c <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3e46:	9b03      	ldr	r3, [sp, #12]
    3e48:	3301      	adds	r3, #1
    3e4a:	9303      	str	r3, [sp, #12]
    3e4c:	4b13      	ldr	r3, [pc, #76]	; (3e9c <DisableSafeClock+0xc0>)
    3e4e:	681b      	ldr	r3, [r3, #0]
    3e50:	7a1b      	ldrb	r3, [r3, #8]
    3e52:	461a      	mov	r2, r3
    3e54:	9b03      	ldr	r3, [sp, #12]
    3e56:	4293      	cmp	r3, r2
    3e58:	d3cc      	bcc.n	3df4 <DisableSafeClock+0x18>
    3e5a:	e000      	b.n	3e5e <DisableSafeClock+0x82>
                break;
    3e5c:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    3e5e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3e62:	f083 0301 	eor.w	r3, r3, #1
    3e66:	b2db      	uxtb	r3, r3
    3e68:	2b00      	cmp	r3, #0
    3e6a:	d013      	beq.n	3e94 <DisableSafeClock+0xb8>
    3e6c:	4b0e      	ldr	r3, [pc, #56]	; (3ea8 <DisableSafeClock+0xcc>)
    3e6e:	781b      	ldrb	r3, [r3, #0]
    3e70:	f083 0301 	eor.w	r3, r3, #1
    3e74:	b2db      	uxtb	r3, r3
    3e76:	2b00      	cmp	r3, #0
    3e78:	d00c      	beq.n	3e94 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3e7a:	4b09      	ldr	r3, [pc, #36]	; (3ea0 <DisableSafeClock+0xc4>)
    3e7c:	791b      	ldrb	r3, [r3, #4]
    3e7e:	4619      	mov	r1, r3
    3e80:	4a08      	ldr	r2, [pc, #32]	; (3ea4 <DisableSafeClock+0xc8>)
    3e82:	460b      	mov	r3, r1
    3e84:	005b      	lsls	r3, r3, #1
    3e86:	440b      	add	r3, r1
    3e88:	009b      	lsls	r3, r3, #2
    3e8a:	4413      	add	r3, r2
    3e8c:	3308      	adds	r3, #8
    3e8e:	681b      	ldr	r3, [r3, #0]
    3e90:	2005      	movs	r0, #5
    3e92:	4798      	blx	r3
    }
}
    3e94:	bf00      	nop
    3e96:	b005      	add	sp, #20
    3e98:	f85d fb04 	ldr.w	pc, [sp], #4
    3e9c:	1fff8be8 	.word	0x1fff8be8
    3ea0:	0000b7fc 	.word	0x0000b7fc
    3ea4:	0000be2c 	.word	0x0000be2c
    3ea8:	1fff8b18 	.word	0x1fff8b18

00003eac <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    3eac:	4b06      	ldr	r3, [pc, #24]	; (3ec8 <SetFircToResetValue_TrustedCall+0x1c>)
    3eae:	2200      	movs	r2, #0
    3eb0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    3eb4:	4b04      	ldr	r3, [pc, #16]	; (3ec8 <SetFircToResetValue_TrustedCall+0x1c>)
    3eb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3eba:	4a03      	ldr	r2, [pc, #12]	; (3ec8 <SetFircToResetValue_TrustedCall+0x1c>)
    3ebc:	f043 0301 	orr.w	r3, r3, #1
    3ec0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3ec4:	bf00      	nop
    3ec6:	4770      	bx	lr
    3ec8:	40064000 	.word	0x40064000

00003ecc <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    3ecc:	b084      	sub	sp, #16
    3ece:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    3ed0:	2303      	movs	r3, #3
    3ed2:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3ed4:	2300      	movs	r3, #0
    3ed6:	9302      	str	r3, [sp, #8]
    3ed8:	e028      	b.n	3f2c <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    3eda:	9b01      	ldr	r3, [sp, #4]
    3edc:	9a02      	ldr	r2, [sp, #8]
    3ede:	320d      	adds	r2, #13
    3ee0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3ee4:	2b28      	cmp	r3, #40	; 0x28
    3ee6:	d10b      	bne.n	3f00 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3ee8:	9a01      	ldr	r2, [sp, #4]
    3eea:	9b02      	ldr	r3, [sp, #8]
    3eec:	330d      	adds	r3, #13
    3eee:	00db      	lsls	r3, r3, #3
    3ef0:	4413      	add	r3, r2
    3ef2:	685b      	ldr	r3, [r3, #4]
    3ef4:	4a2b      	ldr	r2, [pc, #172]	; (3fa4 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    3ef6:	5cd3      	ldrb	r3, [r2, r3]
    3ef8:	011b      	lsls	r3, r3, #4
    3efa:	9a03      	ldr	r2, [sp, #12]
    3efc:	4313      	orrs	r3, r2
    3efe:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    3f00:	9b01      	ldr	r3, [sp, #4]
    3f02:	9a02      	ldr	r2, [sp, #8]
    3f04:	320d      	adds	r2, #13
    3f06:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3f0a:	2b29      	cmp	r3, #41	; 0x29
    3f0c:	d10b      	bne.n	3f26 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3f0e:	9a01      	ldr	r2, [sp, #4]
    3f10:	9b02      	ldr	r3, [sp, #8]
    3f12:	330d      	adds	r3, #13
    3f14:	00db      	lsls	r3, r3, #3
    3f16:	4413      	add	r3, r2
    3f18:	685b      	ldr	r3, [r3, #4]
    3f1a:	4a23      	ldr	r2, [pc, #140]	; (3fa8 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    3f1c:	5cd3      	ldrb	r3, [r2, r3]
    3f1e:	009b      	lsls	r3, r3, #2
    3f20:	9a03      	ldr	r2, [sp, #12]
    3f22:	4313      	orrs	r3, r2
    3f24:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3f26:	9b02      	ldr	r3, [sp, #8]
    3f28:	3301      	adds	r3, #1
    3f2a:	9302      	str	r3, [sp, #8]
    3f2c:	9b01      	ldr	r3, [sp, #4]
    3f2e:	7adb      	ldrb	r3, [r3, #11]
    3f30:	461a      	mov	r2, r3
    3f32:	9b02      	ldr	r3, [sp, #8]
    3f34:	4293      	cmp	r3, r2
    3f36:	d3d0      	bcc.n	3eda <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3f38:	2300      	movs	r3, #0
    3f3a:	9302      	str	r3, [sp, #8]
    3f3c:	e026      	b.n	3f8c <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    3f3e:	9a01      	ldr	r2, [sp, #4]
    3f40:	9b02      	ldr	r3, [sp, #8]
    3f42:	334e      	adds	r3, #78	; 0x4e
    3f44:	00db      	lsls	r3, r3, #3
    3f46:	4413      	add	r3, r2
    3f48:	685b      	ldr	r3, [r3, #4]
    3f4a:	2b12      	cmp	r3, #18
    3f4c:	d109      	bne.n	3f62 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3f4e:	9a01      	ldr	r2, [sp, #4]
    3f50:	9b02      	ldr	r3, [sp, #8]
    3f52:	334e      	adds	r3, #78	; 0x4e
    3f54:	00db      	lsls	r3, r3, #3
    3f56:	4413      	add	r3, r2
    3f58:	891b      	ldrh	r3, [r3, #8]
    3f5a:	005b      	lsls	r3, r3, #1
    3f5c:	9a03      	ldr	r2, [sp, #12]
    3f5e:	4313      	orrs	r3, r2
    3f60:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    3f62:	9a01      	ldr	r2, [sp, #4]
    3f64:	9b02      	ldr	r3, [sp, #8]
    3f66:	334e      	adds	r3, #78	; 0x4e
    3f68:	00db      	lsls	r3, r3, #3
    3f6a:	4413      	add	r3, r2
    3f6c:	685b      	ldr	r3, [r3, #4]
    3f6e:	2b13      	cmp	r3, #19
    3f70:	d109      	bne.n	3f86 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3f72:	9a01      	ldr	r2, [sp, #4]
    3f74:	9b02      	ldr	r3, [sp, #8]
    3f76:	334e      	adds	r3, #78	; 0x4e
    3f78:	00db      	lsls	r3, r3, #3
    3f7a:	4413      	add	r3, r2
    3f7c:	891b      	ldrh	r3, [r3, #8]
    3f7e:	461a      	mov	r2, r3
    3f80:	9b03      	ldr	r3, [sp, #12]
    3f82:	4313      	orrs	r3, r2
    3f84:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3f86:	9b02      	ldr	r3, [sp, #8]
    3f88:	3301      	adds	r3, #1
    3f8a:	9302      	str	r3, [sp, #8]
    3f8c:	9b01      	ldr	r3, [sp, #4]
    3f8e:	7c1b      	ldrb	r3, [r3, #16]
    3f90:	461a      	mov	r2, r3
    3f92:	9b02      	ldr	r3, [sp, #8]
    3f94:	4293      	cmp	r3, r2
    3f96:	d3d2      	bcc.n	3f3e <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    3f98:	4a04      	ldr	r2, [pc, #16]	; (3fac <SetSimLpoclksRegister_TrustedCall+0xe0>)
    3f9a:	9b03      	ldr	r3, [sp, #12]
    3f9c:	6113      	str	r3, [r2, #16]
}
    3f9e:	bf00      	nop
    3fa0:	b004      	add	sp, #16
    3fa2:	4770      	bx	lr
    3fa4:	0000bb7c 	.word	0x0000bb7c
    3fa8:	0000bc34 	.word	0x0000bc34
    3fac:	40048000 	.word	0x40048000

00003fb0 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    3fb0:	b500      	push	{lr}
    3fb2:	b089      	sub	sp, #36	; 0x24
    3fb4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3fb6:	2300      	movs	r3, #0
    3fb8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    3fbc:	4a21      	ldr	r2, [pc, #132]	; (4044 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    3fbe:	9b01      	ldr	r3, [sp, #4]
    3fc0:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    3fc2:	4b21      	ldr	r3, [pc, #132]	; (4048 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3fc4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fc8:	f003 0301 	and.w	r3, r3, #1
    3fcc:	2b00      	cmp	r3, #0
    3fce:	d12e      	bne.n	402e <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    3fd0:	4b1e      	ldr	r3, [pc, #120]	; (404c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3fd2:	2200      	movs	r2, #0
    3fd4:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    3fd6:	f7ff ff69 	bl	3eac <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3fda:	aa03      	add	r2, sp, #12
    3fdc:	a904      	add	r1, sp, #16
    3fde:	a805      	add	r0, sp, #20
    3fe0:	f24c 3350 	movw	r3, #50000	; 0xc350
    3fe4:	f7fe f8ae 	bl	2144 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3fe8:	4b17      	ldr	r3, [pc, #92]	; (4048 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3fea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fee:	0e1b      	lsrs	r3, r3, #24
    3ff0:	f003 0301 	and.w	r3, r3, #1
    3ff4:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3ff6:	9a03      	ldr	r2, [sp, #12]
    3ff8:	a904      	add	r1, sp, #16
    3ffa:	ab05      	add	r3, sp, #20
    3ffc:	4618      	mov	r0, r3
    3ffe:	f7fe f8bb 	bl	2178 <Clock_Ip_TimeoutExpired>
    4002:	4603      	mov	r3, r0
    4004:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4008:	9b06      	ldr	r3, [sp, #24]
    400a:	2b00      	cmp	r3, #0
    400c:	d106      	bne.n	401c <Clock_Ip_SpecificPlatformInitClock+0x6c>
    400e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4012:	f083 0301 	eor.w	r3, r3, #1
    4016:	b2db      	uxtb	r3, r3
    4018:	2b00      	cmp	r3, #0
    401a:	d1e5      	bne.n	3fe8 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    401c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4020:	2b00      	cmp	r3, #0
    4022:	d007      	beq.n	4034 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4024:	2105      	movs	r1, #5
    4026:	2001      	movs	r0, #1
    4028:	f7fe f87c 	bl	2124 <Clock_Ip_ReportClockErrors>
    402c:	e002      	b.n	4034 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    402e:	4b07      	ldr	r3, [pc, #28]	; (404c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4030:	2201      	movs	r2, #1
    4032:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4034:	9801      	ldr	r0, [sp, #4]
    4036:	f7ff ff49 	bl	3ecc <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    403a:	bf00      	nop
    403c:	b009      	add	sp, #36	; 0x24
    403e:	f85d fb04 	ldr.w	pc, [sp], #4
    4042:	bf00      	nop
    4044:	1fff8be8 	.word	0x1fff8be8
    4048:	40064000 	.word	0x40064000
    404c:	1fff8b18 	.word	0x1fff8b18

00004050 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4050:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4052:	2300      	movs	r3, #0
    4054:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4056:	4b29      	ldr	r3, [pc, #164]	; (40fc <getFircConfig+0xac>)
    4058:	681b      	ldr	r3, [r3, #0]
    405a:	2b00      	cmp	r3, #0
    405c:	d024      	beq.n	40a8 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    405e:	2300      	movs	r3, #0
    4060:	9301      	str	r3, [sp, #4]
    4062:	e01a      	b.n	409a <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4064:	4b25      	ldr	r3, [pc, #148]	; (40fc <getFircConfig+0xac>)
    4066:	6819      	ldr	r1, [r3, #0]
    4068:	9a01      	ldr	r2, [sp, #4]
    406a:	4613      	mov	r3, r2
    406c:	005b      	lsls	r3, r3, #1
    406e:	4413      	add	r3, r2
    4070:	009b      	lsls	r3, r3, #2
    4072:	440b      	add	r3, r1
    4074:	3314      	adds	r3, #20
    4076:	681b      	ldr	r3, [r3, #0]
    4078:	2b05      	cmp	r3, #5
    407a:	d10b      	bne.n	4094 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    407c:	4b1f      	ldr	r3, [pc, #124]	; (40fc <getFircConfig+0xac>)
    407e:	6819      	ldr	r1, [r3, #0]
    4080:	9a01      	ldr	r2, [sp, #4]
    4082:	4613      	mov	r3, r2
    4084:	005b      	lsls	r3, r3, #1
    4086:	4413      	add	r3, r2
    4088:	009b      	lsls	r3, r3, #2
    408a:	3310      	adds	r3, #16
    408c:	440b      	add	r3, r1
    408e:	3304      	adds	r3, #4
    4090:	9300      	str	r3, [sp, #0]
                break;
    4092:	e009      	b.n	40a8 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4094:	9b01      	ldr	r3, [sp, #4]
    4096:	3301      	adds	r3, #1
    4098:	9301      	str	r3, [sp, #4]
    409a:	4b18      	ldr	r3, [pc, #96]	; (40fc <getFircConfig+0xac>)
    409c:	681b      	ldr	r3, [r3, #0]
    409e:	7a1b      	ldrb	r3, [r3, #8]
    40a0:	461a      	mov	r2, r3
    40a2:	9b01      	ldr	r3, [sp, #4]
    40a4:	4293      	cmp	r3, r2
    40a6:	d3dd      	bcc.n	4064 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    40a8:	9b00      	ldr	r3, [sp, #0]
    40aa:	2b00      	cmp	r3, #0
    40ac:	d121      	bne.n	40f2 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    40ae:	4b14      	ldr	r3, [pc, #80]	; (4100 <getFircConfig+0xb0>)
    40b0:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    40b2:	4b13      	ldr	r3, [pc, #76]	; (4100 <getFircConfig+0xb0>)
    40b4:	2205      	movs	r2, #5
    40b6:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    40b8:	4b12      	ldr	r3, [pc, #72]	; (4104 <getFircConfig+0xb4>)
    40ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40be:	b29b      	uxth	r3, r3
    40c0:	f003 0301 	and.w	r3, r3, #1
    40c4:	b29a      	uxth	r2, r3
    40c6:	4b0e      	ldr	r3, [pc, #56]	; (4100 <getFircConfig+0xb0>)
    40c8:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    40ca:	4b0e      	ldr	r3, [pc, #56]	; (4104 <getFircConfig+0xb4>)
    40cc:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    40d0:	b2db      	uxtb	r3, r3
    40d2:	f003 0303 	and.w	r3, r3, #3
    40d6:	b2da      	uxtb	r2, r3
    40d8:	4b09      	ldr	r3, [pc, #36]	; (4100 <getFircConfig+0xb0>)
    40da:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    40dc:	4b09      	ldr	r3, [pc, #36]	; (4104 <getFircConfig+0xb4>)
    40de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40e2:	b2db      	uxtb	r3, r3
    40e4:	10db      	asrs	r3, r3, #3
    40e6:	b2db      	uxtb	r3, r3
    40e8:	f003 0301 	and.w	r3, r3, #1
    40ec:	b2da      	uxtb	r2, r3
    40ee:	4b04      	ldr	r3, [pc, #16]	; (4100 <getFircConfig+0xb0>)
    40f0:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    40f2:	9b00      	ldr	r3, [sp, #0]
}
    40f4:	4618      	mov	r0, r3
    40f6:	b002      	add	sp, #8
    40f8:	4770      	bx	lr
    40fa:	bf00      	nop
    40fc:	1fff8be8 	.word	0x1fff8be8
    4100:	1fff8c54 	.word	0x1fff8c54
    4104:	40064000 	.word	0x40064000

00004108 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4108:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    410a:	2300      	movs	r3, #0
    410c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    410e:	4b20      	ldr	r3, [pc, #128]	; (4190 <getSoscConfig+0x88>)
    4110:	681b      	ldr	r3, [r3, #0]
    4112:	2b00      	cmp	r3, #0
    4114:	d024      	beq.n	4160 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4116:	2300      	movs	r3, #0
    4118:	9301      	str	r3, [sp, #4]
    411a:	e01a      	b.n	4152 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    411c:	4b1c      	ldr	r3, [pc, #112]	; (4190 <getSoscConfig+0x88>)
    411e:	6819      	ldr	r1, [r3, #0]
    4120:	9a01      	ldr	r2, [sp, #4]
    4122:	4613      	mov	r3, r2
    4124:	009b      	lsls	r3, r3, #2
    4126:	4413      	add	r3, r2
    4128:	009b      	lsls	r3, r3, #2
    412a:	440b      	add	r3, r1
    412c:	332c      	adds	r3, #44	; 0x2c
    412e:	681b      	ldr	r3, [r3, #0]
    4130:	2b08      	cmp	r3, #8
    4132:	d10b      	bne.n	414c <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4134:	4b16      	ldr	r3, [pc, #88]	; (4190 <getSoscConfig+0x88>)
    4136:	6819      	ldr	r1, [r3, #0]
    4138:	9a01      	ldr	r2, [sp, #4]
    413a:	4613      	mov	r3, r2
    413c:	009b      	lsls	r3, r3, #2
    413e:	4413      	add	r3, r2
    4140:	009b      	lsls	r3, r3, #2
    4142:	3328      	adds	r3, #40	; 0x28
    4144:	440b      	add	r3, r1
    4146:	3304      	adds	r3, #4
    4148:	9300      	str	r3, [sp, #0]
                break;
    414a:	e009      	b.n	4160 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    414c:	9b01      	ldr	r3, [sp, #4]
    414e:	3301      	adds	r3, #1
    4150:	9301      	str	r3, [sp, #4]
    4152:	4b0f      	ldr	r3, [pc, #60]	; (4190 <getSoscConfig+0x88>)
    4154:	681b      	ldr	r3, [r3, #0]
    4156:	7a5b      	ldrb	r3, [r3, #9]
    4158:	461a      	mov	r2, r3
    415a:	9b01      	ldr	r3, [sp, #4]
    415c:	4293      	cmp	r3, r2
    415e:	d3dd      	bcc.n	411c <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4160:	9b00      	ldr	r3, [sp, #0]
    4162:	2b00      	cmp	r3, #0
    4164:	d110      	bne.n	4188 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4166:	4b0b      	ldr	r3, [pc, #44]	; (4194 <getSoscConfig+0x8c>)
    4168:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    416a:	4b0a      	ldr	r3, [pc, #40]	; (4194 <getSoscConfig+0x8c>)
    416c:	2208      	movs	r2, #8
    416e:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4170:	4b09      	ldr	r3, [pc, #36]	; (4198 <getSoscConfig+0x90>)
    4172:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4176:	b29b      	uxth	r3, r3
    4178:	f003 0301 	and.w	r3, r3, #1
    417c:	b29a      	uxth	r2, r3
    417e:	4b05      	ldr	r3, [pc, #20]	; (4194 <getSoscConfig+0x8c>)
    4180:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4182:	4b04      	ldr	r3, [pc, #16]	; (4194 <getSoscConfig+0x8c>)
    4184:	4a05      	ldr	r2, [pc, #20]	; (419c <getSoscConfig+0x94>)
    4186:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4188:	9b00      	ldr	r3, [sp, #0]
}
    418a:	4618      	mov	r0, r3
    418c:	b002      	add	sp, #8
    418e:	4770      	bx	lr
    4190:	1fff8be8 	.word	0x1fff8be8
    4194:	1fff8c60 	.word	0x1fff8c60
    4198:	40064000 	.word	0x40064000
    419c:	02625a00 	.word	0x02625a00

000041a0 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    41a0:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    41a2:	2300      	movs	r3, #0
    41a4:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    41a6:	4b28      	ldr	r3, [pc, #160]	; (4248 <getSpllConfig+0xa8>)
    41a8:	681b      	ldr	r3, [r3, #0]
    41aa:	2b00      	cmp	r3, #0
    41ac:	d023      	beq.n	41f6 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    41ae:	2300      	movs	r3, #0
    41b0:	9301      	str	r3, [sp, #4]
    41b2:	e019      	b.n	41e8 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    41b4:	4b24      	ldr	r3, [pc, #144]	; (4248 <getSpllConfig+0xa8>)
    41b6:	6819      	ldr	r1, [r3, #0]
    41b8:	9a01      	ldr	r2, [sp, #4]
    41ba:	4613      	mov	r3, r2
    41bc:	009b      	lsls	r3, r3, #2
    41be:	4413      	add	r3, r2
    41c0:	00db      	lsls	r3, r3, #3
    41c2:	440b      	add	r3, r1
    41c4:	3340      	adds	r3, #64	; 0x40
    41c6:	681b      	ldr	r3, [r3, #0]
    41c8:	2b09      	cmp	r3, #9
    41ca:	d10a      	bne.n	41e2 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    41cc:	4b1e      	ldr	r3, [pc, #120]	; (4248 <getSpllConfig+0xa8>)
    41ce:	6819      	ldr	r1, [r3, #0]
    41d0:	9a01      	ldr	r2, [sp, #4]
    41d2:	4613      	mov	r3, r2
    41d4:	009b      	lsls	r3, r3, #2
    41d6:	4413      	add	r3, r2
    41d8:	00db      	lsls	r3, r3, #3
    41da:	3340      	adds	r3, #64	; 0x40
    41dc:	440b      	add	r3, r1
    41de:	9300      	str	r3, [sp, #0]
                break;
    41e0:	e009      	b.n	41f6 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    41e2:	9b01      	ldr	r3, [sp, #4]
    41e4:	3301      	adds	r3, #1
    41e6:	9301      	str	r3, [sp, #4]
    41e8:	4b17      	ldr	r3, [pc, #92]	; (4248 <getSpllConfig+0xa8>)
    41ea:	681b      	ldr	r3, [r3, #0]
    41ec:	7a9b      	ldrb	r3, [r3, #10]
    41ee:	461a      	mov	r2, r3
    41f0:	9b01      	ldr	r3, [sp, #4]
    41f2:	4293      	cmp	r3, r2
    41f4:	d3de      	bcc.n	41b4 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    41f6:	9b00      	ldr	r3, [sp, #0]
    41f8:	2b00      	cmp	r3, #0
    41fa:	d121      	bne.n	4240 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    41fc:	4b13      	ldr	r3, [pc, #76]	; (424c <getSpllConfig+0xac>)
    41fe:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4200:	4b12      	ldr	r3, [pc, #72]	; (424c <getSpllConfig+0xac>)
    4202:	2209      	movs	r2, #9
    4204:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4206:	4b12      	ldr	r3, [pc, #72]	; (4250 <getSpllConfig+0xb0>)
    4208:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    420c:	b29b      	uxth	r3, r3
    420e:	f003 0301 	and.w	r3, r3, #1
    4212:	b29a      	uxth	r2, r3
    4214:	4b0d      	ldr	r3, [pc, #52]	; (424c <getSpllConfig+0xac>)
    4216:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4218:	4b0d      	ldr	r3, [pc, #52]	; (4250 <getSpllConfig+0xb0>)
    421a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    421e:	0a1b      	lsrs	r3, r3, #8
    4220:	b2db      	uxtb	r3, r3
    4222:	f003 0307 	and.w	r3, r3, #7
    4226:	b2da      	uxtb	r2, r3
    4228:	4b08      	ldr	r3, [pc, #32]	; (424c <getSpllConfig+0xac>)
    422a:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    422c:	4b08      	ldr	r3, [pc, #32]	; (4250 <getSpllConfig+0xb0>)
    422e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4232:	0c1b      	lsrs	r3, r3, #16
    4234:	b2db      	uxtb	r3, r3
    4236:	f003 031f 	and.w	r3, r3, #31
    423a:	b2da      	uxtb	r2, r3
    423c:	4b03      	ldr	r3, [pc, #12]	; (424c <getSpllConfig+0xac>)
    423e:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4240:	9b00      	ldr	r3, [sp, #0]
}
    4242:	4618      	mov	r0, r3
    4244:	b002      	add	sp, #8
    4246:	4770      	bx	lr
    4248:	1fff8be8 	.word	0x1fff8be8
    424c:	1fff8c74 	.word	0x1fff8c74
    4250:	40064000 	.word	0x40064000

00004254 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4254:	b086      	sub	sp, #24
    4256:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4258:	2300      	movs	r3, #0
    425a:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    425c:	9b01      	ldr	r3, [sp, #4]
    425e:	2b1b      	cmp	r3, #27
    4260:	d00f      	beq.n	4282 <getSelectorConfig+0x2e>
    4262:	9b01      	ldr	r3, [sp, #4]
    4264:	2b1b      	cmp	r3, #27
    4266:	d80f      	bhi.n	4288 <getSelectorConfig+0x34>
    4268:	9b01      	ldr	r3, [sp, #4]
    426a:	2b19      	cmp	r3, #25
    426c:	d003      	beq.n	4276 <getSelectorConfig+0x22>
    426e:	9b01      	ldr	r3, [sp, #4]
    4270:	2b1a      	cmp	r3, #26
    4272:	d003      	beq.n	427c <getSelectorConfig+0x28>
    4274:	e008      	b.n	4288 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4276:	2300      	movs	r3, #0
    4278:	9304      	str	r3, [sp, #16]
            break;
    427a:	e008      	b.n	428e <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    427c:	2301      	movs	r3, #1
    427e:	9304      	str	r3, [sp, #16]
            break;
    4280:	e005      	b.n	428e <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4282:	2302      	movs	r3, #2
    4284:	9304      	str	r3, [sp, #16]
            break;
    4286:	e002      	b.n	428e <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4288:	2300      	movs	r3, #0
    428a:	9304      	str	r3, [sp, #16]
            break;
    428c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    428e:	4b36      	ldr	r3, [pc, #216]	; (4368 <getSelectorConfig+0x114>)
    4290:	681b      	ldr	r3, [r3, #0]
    4292:	2b00      	cmp	r3, #0
    4294:	d01d      	beq.n	42d2 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4296:	2300      	movs	r3, #0
    4298:	9303      	str	r3, [sp, #12]
    429a:	e013      	b.n	42c4 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    429c:	4b32      	ldr	r3, [pc, #200]	; (4368 <getSelectorConfig+0x114>)
    429e:	681b      	ldr	r3, [r3, #0]
    42a0:	9a03      	ldr	r2, [sp, #12]
    42a2:	320d      	adds	r2, #13
    42a4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    42a8:	9a01      	ldr	r2, [sp, #4]
    42aa:	429a      	cmp	r2, r3
    42ac:	d107      	bne.n	42be <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    42ae:	4b2e      	ldr	r3, [pc, #184]	; (4368 <getSelectorConfig+0x114>)
    42b0:	681a      	ldr	r2, [r3, #0]
    42b2:	9b03      	ldr	r3, [sp, #12]
    42b4:	330d      	adds	r3, #13
    42b6:	00db      	lsls	r3, r3, #3
    42b8:	4413      	add	r3, r2
    42ba:	9305      	str	r3, [sp, #20]
                break;
    42bc:	e009      	b.n	42d2 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    42be:	9b03      	ldr	r3, [sp, #12]
    42c0:	3301      	adds	r3, #1
    42c2:	9303      	str	r3, [sp, #12]
    42c4:	4b28      	ldr	r3, [pc, #160]	; (4368 <getSelectorConfig+0x114>)
    42c6:	681b      	ldr	r3, [r3, #0]
    42c8:	7adb      	ldrb	r3, [r3, #11]
    42ca:	461a      	mov	r2, r3
    42cc:	9b03      	ldr	r3, [sp, #12]
    42ce:	4293      	cmp	r3, r2
    42d0:	d3e4      	bcc.n	429c <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    42d2:	9b05      	ldr	r3, [sp, #20]
    42d4:	2b00      	cmp	r3, #0
    42d6:	d140      	bne.n	435a <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    42d8:	9b04      	ldr	r3, [sp, #16]
    42da:	00db      	lsls	r3, r3, #3
    42dc:	4a23      	ldr	r2, [pc, #140]	; (436c <getSelectorConfig+0x118>)
    42de:	4413      	add	r3, r2
    42e0:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    42e2:	4922      	ldr	r1, [pc, #136]	; (436c <getSelectorConfig+0x118>)
    42e4:	9b04      	ldr	r3, [sp, #16]
    42e6:	9a01      	ldr	r2, [sp, #4]
    42e8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    42ec:	9b01      	ldr	r3, [sp, #4]
    42ee:	2b1b      	cmp	r3, #27
    42f0:	d025      	beq.n	433e <getSelectorConfig+0xea>
    42f2:	9b01      	ldr	r3, [sp, #4]
    42f4:	2b1b      	cmp	r3, #27
    42f6:	d832      	bhi.n	435e <getSelectorConfig+0x10a>
    42f8:	9b01      	ldr	r3, [sp, #4]
    42fa:	2b19      	cmp	r3, #25
    42fc:	d003      	beq.n	4306 <getSelectorConfig+0xb2>
    42fe:	9b01      	ldr	r3, [sp, #4]
    4300:	2b1a      	cmp	r3, #26
    4302:	d00e      	beq.n	4322 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4304:	e02b      	b.n	435e <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4306:	4b1a      	ldr	r3, [pc, #104]	; (4370 <getSelectorConfig+0x11c>)
    4308:	695b      	ldr	r3, [r3, #20]
    430a:	0e1b      	lsrs	r3, r3, #24
    430c:	f003 030f 	and.w	r3, r3, #15
    4310:	4a18      	ldr	r2, [pc, #96]	; (4374 <getSelectorConfig+0x120>)
    4312:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4316:	4915      	ldr	r1, [pc, #84]	; (436c <getSelectorConfig+0x118>)
    4318:	9b04      	ldr	r3, [sp, #16]
    431a:	00db      	lsls	r3, r3, #3
    431c:	440b      	add	r3, r1
    431e:	605a      	str	r2, [r3, #4]
                break;
    4320:	e01e      	b.n	4360 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4322:	4b13      	ldr	r3, [pc, #76]	; (4370 <getSelectorConfig+0x11c>)
    4324:	699b      	ldr	r3, [r3, #24]
    4326:	0e1b      	lsrs	r3, r3, #24
    4328:	f003 030f 	and.w	r3, r3, #15
    432c:	4a11      	ldr	r2, [pc, #68]	; (4374 <getSelectorConfig+0x120>)
    432e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4332:	490e      	ldr	r1, [pc, #56]	; (436c <getSelectorConfig+0x118>)
    4334:	9b04      	ldr	r3, [sp, #16]
    4336:	00db      	lsls	r3, r3, #3
    4338:	440b      	add	r3, r1
    433a:	605a      	str	r2, [r3, #4]
                break;
    433c:	e010      	b.n	4360 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    433e:	4b0c      	ldr	r3, [pc, #48]	; (4370 <getSelectorConfig+0x11c>)
    4340:	69db      	ldr	r3, [r3, #28]
    4342:	0e1b      	lsrs	r3, r3, #24
    4344:	f003 030f 	and.w	r3, r3, #15
    4348:	4a0a      	ldr	r2, [pc, #40]	; (4374 <getSelectorConfig+0x120>)
    434a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    434e:	4907      	ldr	r1, [pc, #28]	; (436c <getSelectorConfig+0x118>)
    4350:	9b04      	ldr	r3, [sp, #16]
    4352:	00db      	lsls	r3, r3, #3
    4354:	440b      	add	r3, r1
    4356:	605a      	str	r2, [r3, #4]
                break;
    4358:	e002      	b.n	4360 <getSelectorConfig+0x10c>
        }
    }
    435a:	bf00      	nop
    435c:	e000      	b.n	4360 <getSelectorConfig+0x10c>
                break;
    435e:	bf00      	nop

    return ReturnValue;
    4360:	9b05      	ldr	r3, [sp, #20]
}
    4362:	4618      	mov	r0, r3
    4364:	b006      	add	sp, #24
    4366:	4770      	bx	lr
    4368:	1fff8be8 	.word	0x1fff8be8
    436c:	1fff8c9c 	.word	0x1fff8c9c
    4370:	40064000 	.word	0x40064000
    4374:	0000befc 	.word	0x0000befc

00004378 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4378:	b086      	sub	sp, #24
    437a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    437c:	2300      	movs	r3, #0
    437e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4380:	2300      	movs	r3, #0
    4382:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4384:	9b01      	ldr	r3, [sp, #4]
    4386:	2b1f      	cmp	r3, #31
    4388:	d00f      	beq.n	43aa <getCoreDividerConfig+0x32>
    438a:	9b01      	ldr	r3, [sp, #4]
    438c:	2b1f      	cmp	r3, #31
    438e:	d80f      	bhi.n	43b0 <getCoreDividerConfig+0x38>
    4390:	9b01      	ldr	r3, [sp, #4]
    4392:	2b1d      	cmp	r3, #29
    4394:	d003      	beq.n	439e <getCoreDividerConfig+0x26>
    4396:	9b01      	ldr	r3, [sp, #4]
    4398:	2b1e      	cmp	r3, #30
    439a:	d003      	beq.n	43a4 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    439c:	e008      	b.n	43b0 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    439e:	2300      	movs	r3, #0
    43a0:	9304      	str	r3, [sp, #16]
            break;
    43a2:	e006      	b.n	43b2 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    43a4:	2301      	movs	r3, #1
    43a6:	9304      	str	r3, [sp, #16]
            break;
    43a8:	e003      	b.n	43b2 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    43aa:	2302      	movs	r3, #2
    43ac:	9304      	str	r3, [sp, #16]
            break;
    43ae:	e000      	b.n	43b2 <getCoreDividerConfig+0x3a>
                break;
    43b0:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    43b2:	4b41      	ldr	r3, [pc, #260]	; (44b8 <getCoreDividerConfig+0x140>)
    43b4:	681b      	ldr	r3, [r3, #0]
    43b6:	2b00      	cmp	r3, #0
    43b8:	d026      	beq.n	4408 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    43ba:	2300      	movs	r3, #0
    43bc:	9303      	str	r3, [sp, #12]
    43be:	e01c      	b.n	43fa <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    43c0:	4b3d      	ldr	r3, [pc, #244]	; (44b8 <getCoreDividerConfig+0x140>)
    43c2:	6819      	ldr	r1, [r3, #0]
    43c4:	9a03      	ldr	r2, [sp, #12]
    43c6:	4613      	mov	r3, r2
    43c8:	005b      	lsls	r3, r3, #1
    43ca:	4413      	add	r3, r2
    43cc:	009b      	lsls	r3, r3, #2
    43ce:	440b      	add	r3, r1
    43d0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    43d4:	681b      	ldr	r3, [r3, #0]
    43d6:	9a01      	ldr	r2, [sp, #4]
    43d8:	429a      	cmp	r2, r3
    43da:	d10b      	bne.n	43f4 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    43dc:	4b36      	ldr	r3, [pc, #216]	; (44b8 <getCoreDividerConfig+0x140>)
    43de:	6819      	ldr	r1, [r3, #0]
    43e0:	9a03      	ldr	r2, [sp, #12]
    43e2:	4613      	mov	r3, r2
    43e4:	005b      	lsls	r3, r3, #1
    43e6:	4413      	add	r3, r2
    43e8:	009b      	lsls	r3, r3, #2
    43ea:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    43ee:	440b      	add	r3, r1
    43f0:	9305      	str	r3, [sp, #20]
                break;
    43f2:	e009      	b.n	4408 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    43f4:	9b03      	ldr	r3, [sp, #12]
    43f6:	3301      	adds	r3, #1
    43f8:	9303      	str	r3, [sp, #12]
    43fa:	4b2f      	ldr	r3, [pc, #188]	; (44b8 <getCoreDividerConfig+0x140>)
    43fc:	681b      	ldr	r3, [r3, #0]
    43fe:	7b1b      	ldrb	r3, [r3, #12]
    4400:	461a      	mov	r2, r3
    4402:	9b03      	ldr	r3, [sp, #12]
    4404:	4293      	cmp	r3, r2
    4406:	d3db      	bcc.n	43c0 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4408:	9b05      	ldr	r3, [sp, #20]
    440a:	2b00      	cmp	r3, #0
    440c:	d14d      	bne.n	44aa <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    440e:	9a04      	ldr	r2, [sp, #16]
    4410:	4613      	mov	r3, r2
    4412:	005b      	lsls	r3, r3, #1
    4414:	4413      	add	r3, r2
    4416:	009b      	lsls	r3, r3, #2
    4418:	4a28      	ldr	r2, [pc, #160]	; (44bc <getCoreDividerConfig+0x144>)
    441a:	4413      	add	r3, r2
    441c:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    441e:	4927      	ldr	r1, [pc, #156]	; (44bc <getCoreDividerConfig+0x144>)
    4420:	9a04      	ldr	r2, [sp, #16]
    4422:	4613      	mov	r3, r2
    4424:	005b      	lsls	r3, r3, #1
    4426:	4413      	add	r3, r2
    4428:	009b      	lsls	r3, r3, #2
    442a:	440b      	add	r3, r1
    442c:	9a01      	ldr	r2, [sp, #4]
    442e:	601a      	str	r2, [r3, #0]
        switch(Name)
    4430:	9b01      	ldr	r3, [sp, #4]
    4432:	2b1f      	cmp	r3, #31
    4434:	d029      	beq.n	448a <getCoreDividerConfig+0x112>
    4436:	9b01      	ldr	r3, [sp, #4]
    4438:	2b1f      	cmp	r3, #31
    443a:	d838      	bhi.n	44ae <getCoreDividerConfig+0x136>
    443c:	9b01      	ldr	r3, [sp, #4]
    443e:	2b1d      	cmp	r3, #29
    4440:	d003      	beq.n	444a <getCoreDividerConfig+0xd2>
    4442:	9b01      	ldr	r3, [sp, #4]
    4444:	2b1e      	cmp	r3, #30
    4446:	d010      	beq.n	446a <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4448:	e031      	b.n	44ae <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    444a:	4b1d      	ldr	r3, [pc, #116]	; (44c0 <getCoreDividerConfig+0x148>)
    444c:	695b      	ldr	r3, [r3, #20]
    444e:	0c1b      	lsrs	r3, r3, #16
    4450:	f003 030f 	and.w	r3, r3, #15
    4454:	1c59      	adds	r1, r3, #1
    4456:	4819      	ldr	r0, [pc, #100]	; (44bc <getCoreDividerConfig+0x144>)
    4458:	9a04      	ldr	r2, [sp, #16]
    445a:	4613      	mov	r3, r2
    445c:	005b      	lsls	r3, r3, #1
    445e:	4413      	add	r3, r2
    4460:	009b      	lsls	r3, r3, #2
    4462:	4403      	add	r3, r0
    4464:	3304      	adds	r3, #4
    4466:	6019      	str	r1, [r3, #0]
                break;
    4468:	e022      	b.n	44b0 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    446a:	4b15      	ldr	r3, [pc, #84]	; (44c0 <getCoreDividerConfig+0x148>)
    446c:	699b      	ldr	r3, [r3, #24]
    446e:	0c1b      	lsrs	r3, r3, #16
    4470:	f003 030f 	and.w	r3, r3, #15
    4474:	1c59      	adds	r1, r3, #1
    4476:	4811      	ldr	r0, [pc, #68]	; (44bc <getCoreDividerConfig+0x144>)
    4478:	9a04      	ldr	r2, [sp, #16]
    447a:	4613      	mov	r3, r2
    447c:	005b      	lsls	r3, r3, #1
    447e:	4413      	add	r3, r2
    4480:	009b      	lsls	r3, r3, #2
    4482:	4403      	add	r3, r0
    4484:	3304      	adds	r3, #4
    4486:	6019      	str	r1, [r3, #0]
                break;
    4488:	e012      	b.n	44b0 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    448a:	4b0d      	ldr	r3, [pc, #52]	; (44c0 <getCoreDividerConfig+0x148>)
    448c:	69db      	ldr	r3, [r3, #28]
    448e:	0c1b      	lsrs	r3, r3, #16
    4490:	f003 030f 	and.w	r3, r3, #15
    4494:	1c59      	adds	r1, r3, #1
    4496:	4809      	ldr	r0, [pc, #36]	; (44bc <getCoreDividerConfig+0x144>)
    4498:	9a04      	ldr	r2, [sp, #16]
    449a:	4613      	mov	r3, r2
    449c:	005b      	lsls	r3, r3, #1
    449e:	4413      	add	r3, r2
    44a0:	009b      	lsls	r3, r3, #2
    44a2:	4403      	add	r3, r0
    44a4:	3304      	adds	r3, #4
    44a6:	6019      	str	r1, [r3, #0]
                break;
    44a8:	e002      	b.n	44b0 <getCoreDividerConfig+0x138>
        }
    }
    44aa:	bf00      	nop
    44ac:	e000      	b.n	44b0 <getCoreDividerConfig+0x138>
                break;
    44ae:	bf00      	nop

    return ReturnValue;
    44b0:	9b05      	ldr	r3, [sp, #20]
}
    44b2:	4618      	mov	r0, r3
    44b4:	b006      	add	sp, #24
    44b6:	4770      	bx	lr
    44b8:	1fff8be8 	.word	0x1fff8be8
    44bc:	1fff8cb4 	.word	0x1fff8cb4
    44c0:	40064000 	.word	0x40064000

000044c4 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    44c4:	b086      	sub	sp, #24
    44c6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    44c8:	2300      	movs	r3, #0
    44ca:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    44cc:	2300      	movs	r3, #0
    44ce:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    44d0:	9b01      	ldr	r3, [sp, #4]
    44d2:	2b23      	cmp	r3, #35	; 0x23
    44d4:	d00f      	beq.n	44f6 <getBusDividerConfig+0x32>
    44d6:	9b01      	ldr	r3, [sp, #4]
    44d8:	2b23      	cmp	r3, #35	; 0x23
    44da:	d80f      	bhi.n	44fc <getBusDividerConfig+0x38>
    44dc:	9b01      	ldr	r3, [sp, #4]
    44de:	2b21      	cmp	r3, #33	; 0x21
    44e0:	d003      	beq.n	44ea <getBusDividerConfig+0x26>
    44e2:	9b01      	ldr	r3, [sp, #4]
    44e4:	2b22      	cmp	r3, #34	; 0x22
    44e6:	d003      	beq.n	44f0 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    44e8:	e008      	b.n	44fc <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    44ea:	2300      	movs	r3, #0
    44ec:	9304      	str	r3, [sp, #16]
            break;
    44ee:	e006      	b.n	44fe <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    44f0:	2301      	movs	r3, #1
    44f2:	9304      	str	r3, [sp, #16]
            break;
    44f4:	e003      	b.n	44fe <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    44f6:	2302      	movs	r3, #2
    44f8:	9304      	str	r3, [sp, #16]
            break;
    44fa:	e000      	b.n	44fe <getBusDividerConfig+0x3a>
                break;
    44fc:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    44fe:	4b41      	ldr	r3, [pc, #260]	; (4604 <getBusDividerConfig+0x140>)
    4500:	681b      	ldr	r3, [r3, #0]
    4502:	2b00      	cmp	r3, #0
    4504:	d026      	beq.n	4554 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4506:	2300      	movs	r3, #0
    4508:	9303      	str	r3, [sp, #12]
    450a:	e01c      	b.n	4546 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    450c:	4b3d      	ldr	r3, [pc, #244]	; (4604 <getBusDividerConfig+0x140>)
    450e:	6819      	ldr	r1, [r3, #0]
    4510:	9a03      	ldr	r2, [sp, #12]
    4512:	4613      	mov	r3, r2
    4514:	005b      	lsls	r3, r3, #1
    4516:	4413      	add	r3, r2
    4518:	009b      	lsls	r3, r3, #2
    451a:	440b      	add	r3, r1
    451c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4520:	681b      	ldr	r3, [r3, #0]
    4522:	9a01      	ldr	r2, [sp, #4]
    4524:	429a      	cmp	r2, r3
    4526:	d10b      	bne.n	4540 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4528:	4b36      	ldr	r3, [pc, #216]	; (4604 <getBusDividerConfig+0x140>)
    452a:	6819      	ldr	r1, [r3, #0]
    452c:	9a03      	ldr	r2, [sp, #12]
    452e:	4613      	mov	r3, r2
    4530:	005b      	lsls	r3, r3, #1
    4532:	4413      	add	r3, r2
    4534:	009b      	lsls	r3, r3, #2
    4536:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    453a:	440b      	add	r3, r1
    453c:	9305      	str	r3, [sp, #20]
                break;
    453e:	e009      	b.n	4554 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4540:	9b03      	ldr	r3, [sp, #12]
    4542:	3301      	adds	r3, #1
    4544:	9303      	str	r3, [sp, #12]
    4546:	4b2f      	ldr	r3, [pc, #188]	; (4604 <getBusDividerConfig+0x140>)
    4548:	681b      	ldr	r3, [r3, #0]
    454a:	7b1b      	ldrb	r3, [r3, #12]
    454c:	461a      	mov	r2, r3
    454e:	9b03      	ldr	r3, [sp, #12]
    4550:	4293      	cmp	r3, r2
    4552:	d3db      	bcc.n	450c <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4554:	9b05      	ldr	r3, [sp, #20]
    4556:	2b00      	cmp	r3, #0
    4558:	d14d      	bne.n	45f6 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    455a:	9a04      	ldr	r2, [sp, #16]
    455c:	4613      	mov	r3, r2
    455e:	005b      	lsls	r3, r3, #1
    4560:	4413      	add	r3, r2
    4562:	009b      	lsls	r3, r3, #2
    4564:	4a28      	ldr	r2, [pc, #160]	; (4608 <getBusDividerConfig+0x144>)
    4566:	4413      	add	r3, r2
    4568:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    456a:	4927      	ldr	r1, [pc, #156]	; (4608 <getBusDividerConfig+0x144>)
    456c:	9a04      	ldr	r2, [sp, #16]
    456e:	4613      	mov	r3, r2
    4570:	005b      	lsls	r3, r3, #1
    4572:	4413      	add	r3, r2
    4574:	009b      	lsls	r3, r3, #2
    4576:	440b      	add	r3, r1
    4578:	9a01      	ldr	r2, [sp, #4]
    457a:	601a      	str	r2, [r3, #0]
        switch(Name)
    457c:	9b01      	ldr	r3, [sp, #4]
    457e:	2b23      	cmp	r3, #35	; 0x23
    4580:	d029      	beq.n	45d6 <getBusDividerConfig+0x112>
    4582:	9b01      	ldr	r3, [sp, #4]
    4584:	2b23      	cmp	r3, #35	; 0x23
    4586:	d838      	bhi.n	45fa <getBusDividerConfig+0x136>
    4588:	9b01      	ldr	r3, [sp, #4]
    458a:	2b21      	cmp	r3, #33	; 0x21
    458c:	d003      	beq.n	4596 <getBusDividerConfig+0xd2>
    458e:	9b01      	ldr	r3, [sp, #4]
    4590:	2b22      	cmp	r3, #34	; 0x22
    4592:	d010      	beq.n	45b6 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4594:	e031      	b.n	45fa <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    4596:	4b1d      	ldr	r3, [pc, #116]	; (460c <getBusDividerConfig+0x148>)
    4598:	695b      	ldr	r3, [r3, #20]
    459a:	091b      	lsrs	r3, r3, #4
    459c:	f003 030f 	and.w	r3, r3, #15
    45a0:	1c59      	adds	r1, r3, #1
    45a2:	4819      	ldr	r0, [pc, #100]	; (4608 <getBusDividerConfig+0x144>)
    45a4:	9a04      	ldr	r2, [sp, #16]
    45a6:	4613      	mov	r3, r2
    45a8:	005b      	lsls	r3, r3, #1
    45aa:	4413      	add	r3, r2
    45ac:	009b      	lsls	r3, r3, #2
    45ae:	4403      	add	r3, r0
    45b0:	3304      	adds	r3, #4
    45b2:	6019      	str	r1, [r3, #0]
                break;
    45b4:	e022      	b.n	45fc <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    45b6:	4b15      	ldr	r3, [pc, #84]	; (460c <getBusDividerConfig+0x148>)
    45b8:	699b      	ldr	r3, [r3, #24]
    45ba:	091b      	lsrs	r3, r3, #4
    45bc:	f003 030f 	and.w	r3, r3, #15
    45c0:	1c59      	adds	r1, r3, #1
    45c2:	4811      	ldr	r0, [pc, #68]	; (4608 <getBusDividerConfig+0x144>)
    45c4:	9a04      	ldr	r2, [sp, #16]
    45c6:	4613      	mov	r3, r2
    45c8:	005b      	lsls	r3, r3, #1
    45ca:	4413      	add	r3, r2
    45cc:	009b      	lsls	r3, r3, #2
    45ce:	4403      	add	r3, r0
    45d0:	3304      	adds	r3, #4
    45d2:	6019      	str	r1, [r3, #0]
                break;
    45d4:	e012      	b.n	45fc <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    45d6:	4b0d      	ldr	r3, [pc, #52]	; (460c <getBusDividerConfig+0x148>)
    45d8:	69db      	ldr	r3, [r3, #28]
    45da:	091b      	lsrs	r3, r3, #4
    45dc:	f003 030f 	and.w	r3, r3, #15
    45e0:	1c59      	adds	r1, r3, #1
    45e2:	4809      	ldr	r0, [pc, #36]	; (4608 <getBusDividerConfig+0x144>)
    45e4:	9a04      	ldr	r2, [sp, #16]
    45e6:	4613      	mov	r3, r2
    45e8:	005b      	lsls	r3, r3, #1
    45ea:	4413      	add	r3, r2
    45ec:	009b      	lsls	r3, r3, #2
    45ee:	4403      	add	r3, r0
    45f0:	3304      	adds	r3, #4
    45f2:	6019      	str	r1, [r3, #0]
                break;
    45f4:	e002      	b.n	45fc <getBusDividerConfig+0x138>
        }
    }
    45f6:	bf00      	nop
    45f8:	e000      	b.n	45fc <getBusDividerConfig+0x138>
                break;
    45fa:	bf00      	nop

    return ReturnValue;
    45fc:	9b05      	ldr	r3, [sp, #20]
}
    45fe:	4618      	mov	r0, r3
    4600:	b006      	add	sp, #24
    4602:	4770      	bx	lr
    4604:	1fff8be8 	.word	0x1fff8be8
    4608:	1fff8cd8 	.word	0x1fff8cd8
    460c:	40064000 	.word	0x40064000

00004610 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    4610:	b086      	sub	sp, #24
    4612:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4614:	2300      	movs	r3, #0
    4616:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4618:	2300      	movs	r3, #0
    461a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    461c:	9b01      	ldr	r3, [sp, #4]
    461e:	2b27      	cmp	r3, #39	; 0x27
    4620:	d00f      	beq.n	4642 <getSlowDividerConfig+0x32>
    4622:	9b01      	ldr	r3, [sp, #4]
    4624:	2b27      	cmp	r3, #39	; 0x27
    4626:	d80f      	bhi.n	4648 <getSlowDividerConfig+0x38>
    4628:	9b01      	ldr	r3, [sp, #4]
    462a:	2b25      	cmp	r3, #37	; 0x25
    462c:	d003      	beq.n	4636 <getSlowDividerConfig+0x26>
    462e:	9b01      	ldr	r3, [sp, #4]
    4630:	2b26      	cmp	r3, #38	; 0x26
    4632:	d003      	beq.n	463c <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4634:	e008      	b.n	4648 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4636:	2300      	movs	r3, #0
    4638:	9304      	str	r3, [sp, #16]
            break;
    463a:	e006      	b.n	464a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    463c:	2301      	movs	r3, #1
    463e:	9304      	str	r3, [sp, #16]
            break;
    4640:	e003      	b.n	464a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4642:	2302      	movs	r3, #2
    4644:	9304      	str	r3, [sp, #16]
            break;
    4646:	e000      	b.n	464a <getSlowDividerConfig+0x3a>
                break;
    4648:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    464a:	4b40      	ldr	r3, [pc, #256]	; (474c <getSlowDividerConfig+0x13c>)
    464c:	681b      	ldr	r3, [r3, #0]
    464e:	2b00      	cmp	r3, #0
    4650:	d026      	beq.n	46a0 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4652:	2300      	movs	r3, #0
    4654:	9303      	str	r3, [sp, #12]
    4656:	e01c      	b.n	4692 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4658:	4b3c      	ldr	r3, [pc, #240]	; (474c <getSlowDividerConfig+0x13c>)
    465a:	6819      	ldr	r1, [r3, #0]
    465c:	9a03      	ldr	r2, [sp, #12]
    465e:	4613      	mov	r3, r2
    4660:	005b      	lsls	r3, r3, #1
    4662:	4413      	add	r3, r2
    4664:	009b      	lsls	r3, r3, #2
    4666:	440b      	add	r3, r1
    4668:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    466c:	681b      	ldr	r3, [r3, #0]
    466e:	9a01      	ldr	r2, [sp, #4]
    4670:	429a      	cmp	r2, r3
    4672:	d10b      	bne.n	468c <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4674:	4b35      	ldr	r3, [pc, #212]	; (474c <getSlowDividerConfig+0x13c>)
    4676:	6819      	ldr	r1, [r3, #0]
    4678:	9a03      	ldr	r2, [sp, #12]
    467a:	4613      	mov	r3, r2
    467c:	005b      	lsls	r3, r3, #1
    467e:	4413      	add	r3, r2
    4680:	009b      	lsls	r3, r3, #2
    4682:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4686:	440b      	add	r3, r1
    4688:	9305      	str	r3, [sp, #20]
                break;
    468a:	e009      	b.n	46a0 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    468c:	9b03      	ldr	r3, [sp, #12]
    468e:	3301      	adds	r3, #1
    4690:	9303      	str	r3, [sp, #12]
    4692:	4b2e      	ldr	r3, [pc, #184]	; (474c <getSlowDividerConfig+0x13c>)
    4694:	681b      	ldr	r3, [r3, #0]
    4696:	7b1b      	ldrb	r3, [r3, #12]
    4698:	461a      	mov	r2, r3
    469a:	9b03      	ldr	r3, [sp, #12]
    469c:	4293      	cmp	r3, r2
    469e:	d3db      	bcc.n	4658 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    46a0:	9b05      	ldr	r3, [sp, #20]
    46a2:	2b00      	cmp	r3, #0
    46a4:	d14a      	bne.n	473c <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    46a6:	9a04      	ldr	r2, [sp, #16]
    46a8:	4613      	mov	r3, r2
    46aa:	005b      	lsls	r3, r3, #1
    46ac:	4413      	add	r3, r2
    46ae:	009b      	lsls	r3, r3, #2
    46b0:	4a27      	ldr	r2, [pc, #156]	; (4750 <getSlowDividerConfig+0x140>)
    46b2:	4413      	add	r3, r2
    46b4:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    46b6:	4926      	ldr	r1, [pc, #152]	; (4750 <getSlowDividerConfig+0x140>)
    46b8:	9a04      	ldr	r2, [sp, #16]
    46ba:	4613      	mov	r3, r2
    46bc:	005b      	lsls	r3, r3, #1
    46be:	4413      	add	r3, r2
    46c0:	009b      	lsls	r3, r3, #2
    46c2:	440b      	add	r3, r1
    46c4:	9a01      	ldr	r2, [sp, #4]
    46c6:	601a      	str	r2, [r3, #0]
        switch(Name)
    46c8:	9b01      	ldr	r3, [sp, #4]
    46ca:	2b27      	cmp	r3, #39	; 0x27
    46cc:	d027      	beq.n	471e <getSlowDividerConfig+0x10e>
    46ce:	9b01      	ldr	r3, [sp, #4]
    46d0:	2b27      	cmp	r3, #39	; 0x27
    46d2:	d835      	bhi.n	4740 <getSlowDividerConfig+0x130>
    46d4:	9b01      	ldr	r3, [sp, #4]
    46d6:	2b25      	cmp	r3, #37	; 0x25
    46d8:	d003      	beq.n	46e2 <getSlowDividerConfig+0xd2>
    46da:	9b01      	ldr	r3, [sp, #4]
    46dc:	2b26      	cmp	r3, #38	; 0x26
    46de:	d00f      	beq.n	4700 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    46e0:	e02e      	b.n	4740 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    46e2:	4b1c      	ldr	r3, [pc, #112]	; (4754 <getSlowDividerConfig+0x144>)
    46e4:	695b      	ldr	r3, [r3, #20]
    46e6:	f003 030f 	and.w	r3, r3, #15
    46ea:	1c59      	adds	r1, r3, #1
    46ec:	4818      	ldr	r0, [pc, #96]	; (4750 <getSlowDividerConfig+0x140>)
    46ee:	9a04      	ldr	r2, [sp, #16]
    46f0:	4613      	mov	r3, r2
    46f2:	005b      	lsls	r3, r3, #1
    46f4:	4413      	add	r3, r2
    46f6:	009b      	lsls	r3, r3, #2
    46f8:	4403      	add	r3, r0
    46fa:	3304      	adds	r3, #4
    46fc:	6019      	str	r1, [r3, #0]
                break;
    46fe:	e020      	b.n	4742 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    4700:	4b14      	ldr	r3, [pc, #80]	; (4754 <getSlowDividerConfig+0x144>)
    4702:	699b      	ldr	r3, [r3, #24]
    4704:	f003 030f 	and.w	r3, r3, #15
    4708:	1c59      	adds	r1, r3, #1
    470a:	4811      	ldr	r0, [pc, #68]	; (4750 <getSlowDividerConfig+0x140>)
    470c:	9a04      	ldr	r2, [sp, #16]
    470e:	4613      	mov	r3, r2
    4710:	005b      	lsls	r3, r3, #1
    4712:	4413      	add	r3, r2
    4714:	009b      	lsls	r3, r3, #2
    4716:	4403      	add	r3, r0
    4718:	3304      	adds	r3, #4
    471a:	6019      	str	r1, [r3, #0]
                break;
    471c:	e011      	b.n	4742 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    471e:	4b0d      	ldr	r3, [pc, #52]	; (4754 <getSlowDividerConfig+0x144>)
    4720:	69db      	ldr	r3, [r3, #28]
    4722:	f003 030f 	and.w	r3, r3, #15
    4726:	1c59      	adds	r1, r3, #1
    4728:	4809      	ldr	r0, [pc, #36]	; (4750 <getSlowDividerConfig+0x140>)
    472a:	9a04      	ldr	r2, [sp, #16]
    472c:	4613      	mov	r3, r2
    472e:	005b      	lsls	r3, r3, #1
    4730:	4413      	add	r3, r2
    4732:	009b      	lsls	r3, r3, #2
    4734:	4403      	add	r3, r0
    4736:	3304      	adds	r3, #4
    4738:	6019      	str	r1, [r3, #0]
                break;
    473a:	e002      	b.n	4742 <getSlowDividerConfig+0x132>
        }
    }
    473c:	bf00      	nop
    473e:	e000      	b.n	4742 <getSlowDividerConfig+0x132>
                break;
    4740:	bf00      	nop

    return ReturnValue;
    4742:	9b05      	ldr	r3, [sp, #20]
}
    4744:	4618      	mov	r0, r3
    4746:	b006      	add	sp, #24
    4748:	4770      	bx	lr
    474a:	bf00      	nop
    474c:	1fff8be8 	.word	0x1fff8be8
    4750:	1fff8cfc 	.word	0x1fff8cfc
    4754:	40064000 	.word	0x40064000

00004758 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    4758:	b500      	push	{lr}
    475a:	b083      	sub	sp, #12
    475c:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    475e:	4b64      	ldr	r3, [pc, #400]	; (48f0 <Clock_Ip_ClockInitializeObjects+0x198>)
    4760:	781b      	ldrb	r3, [r3, #0]
    4762:	f083 0301 	eor.w	r3, r3, #1
    4766:	b2db      	uxtb	r3, r3
    4768:	2b00      	cmp	r3, #0
    476a:	d05b      	beq.n	4824 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    476c:	4b60      	ldr	r3, [pc, #384]	; (48f0 <Clock_Ip_ClockInitializeObjects+0x198>)
    476e:	2201      	movs	r2, #1
    4770:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    4772:	4b60      	ldr	r3, [pc, #384]	; (48f4 <Clock_Ip_ClockInitializeObjects+0x19c>)
    4774:	785b      	ldrb	r3, [r3, #1]
    4776:	461a      	mov	r2, r3
    4778:	4613      	mov	r3, r2
    477a:	009b      	lsls	r3, r3, #2
    477c:	4413      	add	r3, r2
    477e:	009b      	lsls	r3, r3, #2
    4780:	4a5d      	ldr	r2, [pc, #372]	; (48f8 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    4782:	4413      	add	r3, r2
    4784:	4a5d      	ldr	r2, [pc, #372]	; (48fc <Clock_Ip_ClockInitializeObjects+0x1a4>)
    4786:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    4788:	4b5d      	ldr	r3, [pc, #372]	; (4900 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    478a:	785b      	ldrb	r3, [r3, #1]
    478c:	461a      	mov	r2, r3
    478e:	4613      	mov	r3, r2
    4790:	009b      	lsls	r3, r3, #2
    4792:	4413      	add	r3, r2
    4794:	009b      	lsls	r3, r3, #2
    4796:	4a5b      	ldr	r2, [pc, #364]	; (4904 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    4798:	4413      	add	r3, r2
    479a:	4a5b      	ldr	r2, [pc, #364]	; (4908 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    479c:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    479e:	4b5b      	ldr	r3, [pc, #364]	; (490c <Clock_Ip_ClockInitializeObjects+0x1b4>)
    47a0:	791b      	ldrb	r3, [r3, #4]
    47a2:	461a      	mov	r2, r3
    47a4:	4613      	mov	r3, r2
    47a6:	005b      	lsls	r3, r3, #1
    47a8:	4413      	add	r3, r2
    47aa:	009b      	lsls	r3, r3, #2
    47ac:	4a58      	ldr	r2, [pc, #352]	; (4910 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    47ae:	4413      	add	r3, r2
    47b0:	4a58      	ldr	r2, [pc, #352]	; (4914 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    47b2:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    47b4:	4b58      	ldr	r3, [pc, #352]	; (4918 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    47b6:	795b      	ldrb	r3, [r3, #5]
    47b8:	00db      	lsls	r3, r3, #3
    47ba:	4a58      	ldr	r2, [pc, #352]	; (491c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    47bc:	4413      	add	r3, r2
    47be:	4a58      	ldr	r2, [pc, #352]	; (4920 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    47c0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    47c2:	4b55      	ldr	r3, [pc, #340]	; (4918 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    47c4:	79db      	ldrb	r3, [r3, #7]
    47c6:	00db      	lsls	r3, r3, #3
    47c8:	4a54      	ldr	r2, [pc, #336]	; (491c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    47ca:	4413      	add	r3, r2
    47cc:	4a55      	ldr	r2, [pc, #340]	; (4924 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    47ce:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    47d0:	4b55      	ldr	r3, [pc, #340]	; (4928 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47d2:	799b      	ldrb	r3, [r3, #6]
    47d4:	009b      	lsls	r3, r3, #2
    47d6:	4a55      	ldr	r2, [pc, #340]	; (492c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    47d8:	4413      	add	r3, r2
    47da:	4a55      	ldr	r2, [pc, #340]	; (4930 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    47dc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    47de:	4b52      	ldr	r3, [pc, #328]	; (4928 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47e0:	7a1b      	ldrb	r3, [r3, #8]
    47e2:	009b      	lsls	r3, r3, #2
    47e4:	4a51      	ldr	r2, [pc, #324]	; (492c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    47e6:	4413      	add	r3, r2
    47e8:	4a52      	ldr	r2, [pc, #328]	; (4934 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    47ea:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    47ec:	4b4e      	ldr	r3, [pc, #312]	; (4928 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47ee:	7a5b      	ldrb	r3, [r3, #9]
    47f0:	009b      	lsls	r3, r3, #2
    47f2:	4a4e      	ldr	r2, [pc, #312]	; (492c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    47f4:	4413      	add	r3, r2
    47f6:	4a50      	ldr	r2, [pc, #320]	; (4938 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    47f8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    47fa:	4b4b      	ldr	r3, [pc, #300]	; (4928 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47fc:	7adb      	ldrb	r3, [r3, #11]
    47fe:	009b      	lsls	r3, r3, #2
    4800:	4a4a      	ldr	r2, [pc, #296]	; (492c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4802:	4413      	add	r3, r2
    4804:	4a4d      	ldr	r2, [pc, #308]	; (493c <Clock_Ip_ClockInitializeObjects+0x1e4>)
    4806:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    4808:	4b47      	ldr	r3, [pc, #284]	; (4928 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    480a:	7b1b      	ldrb	r3, [r3, #12]
    480c:	009b      	lsls	r3, r3, #2
    480e:	4a47      	ldr	r2, [pc, #284]	; (492c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4810:	4413      	add	r3, r2
    4812:	4a4b      	ldr	r2, [pc, #300]	; (4940 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    4814:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    4816:	4b44      	ldr	r3, [pc, #272]	; (4928 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4818:	7b9b      	ldrb	r3, [r3, #14]
    481a:	009b      	lsls	r3, r3, #2
    481c:	4a43      	ldr	r2, [pc, #268]	; (492c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    481e:	4413      	add	r3, r2
    4820:	4a48      	ldr	r2, [pc, #288]	; (4944 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    4822:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    4824:	4b48      	ldr	r3, [pc, #288]	; (4948 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    4826:	781b      	ldrb	r3, [r3, #0]
    4828:	2b00      	cmp	r3, #0
    482a:	d002      	beq.n	4832 <Clock_Ip_ClockInitializeObjects+0xda>
    482c:	9b01      	ldr	r3, [sp, #4]
    482e:	2b00      	cmp	r3, #0
    4830:	d003      	beq.n	483a <Clock_Ip_ClockInitializeObjects+0xe2>
    4832:	4b46      	ldr	r3, [pc, #280]	; (494c <Clock_Ip_ClockInitializeObjects+0x1f4>)
    4834:	781b      	ldrb	r3, [r3, #0]
    4836:	2b00      	cmp	r3, #0
    4838:	d056      	beq.n	48e8 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    483a:	f7ff fc09 	bl	4050 <getFircConfig>
    483e:	4603      	mov	r3, r0
    4840:	4a43      	ldr	r2, [pc, #268]	; (4950 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    4842:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    4844:	f7ff fc60 	bl	4108 <getSoscConfig>
    4848:	4603      	mov	r3, r0
    484a:	4a42      	ldr	r2, [pc, #264]	; (4954 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    484c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    484e:	f7ff fca7 	bl	41a0 <getSpllConfig>
    4852:	4603      	mov	r3, r0
    4854:	4a40      	ldr	r2, [pc, #256]	; (4958 <Clock_Ip_ClockInitializeObjects+0x200>)
    4856:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    4858:	2019      	movs	r0, #25
    485a:	f7ff fcfb 	bl	4254 <getSelectorConfig>
    485e:	4603      	mov	r3, r0
    4860:	4a3e      	ldr	r2, [pc, #248]	; (495c <Clock_Ip_ClockInitializeObjects+0x204>)
    4862:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    4864:	201a      	movs	r0, #26
    4866:	f7ff fcf5 	bl	4254 <getSelectorConfig>
    486a:	4603      	mov	r3, r0
    486c:	4a3c      	ldr	r2, [pc, #240]	; (4960 <Clock_Ip_ClockInitializeObjects+0x208>)
    486e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    4870:	201b      	movs	r0, #27
    4872:	f7ff fcef 	bl	4254 <getSelectorConfig>
    4876:	4603      	mov	r3, r0
    4878:	4a3a      	ldr	r2, [pc, #232]	; (4964 <Clock_Ip_ClockInitializeObjects+0x20c>)
    487a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    487c:	201d      	movs	r0, #29
    487e:	f7ff fd7b 	bl	4378 <getCoreDividerConfig>
    4882:	4603      	mov	r3, r0
    4884:	4a38      	ldr	r2, [pc, #224]	; (4968 <Clock_Ip_ClockInitializeObjects+0x210>)
    4886:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    4888:	201e      	movs	r0, #30
    488a:	f7ff fd75 	bl	4378 <getCoreDividerConfig>
    488e:	4603      	mov	r3, r0
    4890:	4a36      	ldr	r2, [pc, #216]	; (496c <Clock_Ip_ClockInitializeObjects+0x214>)
    4892:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    4894:	201f      	movs	r0, #31
    4896:	f7ff fd6f 	bl	4378 <getCoreDividerConfig>
    489a:	4603      	mov	r3, r0
    489c:	4a34      	ldr	r2, [pc, #208]	; (4970 <Clock_Ip_ClockInitializeObjects+0x218>)
    489e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    48a0:	2021      	movs	r0, #33	; 0x21
    48a2:	f7ff fe0f 	bl	44c4 <getBusDividerConfig>
    48a6:	4603      	mov	r3, r0
    48a8:	4a32      	ldr	r2, [pc, #200]	; (4974 <Clock_Ip_ClockInitializeObjects+0x21c>)
    48aa:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    48ac:	2022      	movs	r0, #34	; 0x22
    48ae:	f7ff fe09 	bl	44c4 <getBusDividerConfig>
    48b2:	4603      	mov	r3, r0
    48b4:	4a30      	ldr	r2, [pc, #192]	; (4978 <Clock_Ip_ClockInitializeObjects+0x220>)
    48b6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    48b8:	2023      	movs	r0, #35	; 0x23
    48ba:	f7ff fe03 	bl	44c4 <getBusDividerConfig>
    48be:	4603      	mov	r3, r0
    48c0:	4a2e      	ldr	r2, [pc, #184]	; (497c <Clock_Ip_ClockInitializeObjects+0x224>)
    48c2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    48c4:	2025      	movs	r0, #37	; 0x25
    48c6:	f7ff fea3 	bl	4610 <getSlowDividerConfig>
    48ca:	4603      	mov	r3, r0
    48cc:	4a2c      	ldr	r2, [pc, #176]	; (4980 <Clock_Ip_ClockInitializeObjects+0x228>)
    48ce:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    48d0:	2026      	movs	r0, #38	; 0x26
    48d2:	f7ff fe9d 	bl	4610 <getSlowDividerConfig>
    48d6:	4603      	mov	r3, r0
    48d8:	4a2a      	ldr	r2, [pc, #168]	; (4984 <Clock_Ip_ClockInitializeObjects+0x22c>)
    48da:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    48dc:	2027      	movs	r0, #39	; 0x27
    48de:	f7ff fe97 	bl	4610 <getSlowDividerConfig>
    48e2:	4603      	mov	r3, r0
    48e4:	4a28      	ldr	r2, [pc, #160]	; (4988 <Clock_Ip_ClockInitializeObjects+0x230>)
    48e6:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    48e8:	bf00      	nop
    48ea:	b003      	add	sp, #12
    48ec:	f85d fb04 	ldr.w	pc, [sp], #4
    48f0:	1fff8d20 	.word	0x1fff8d20
    48f4:	0000b82c 	.word	0x0000b82c
    48f8:	0000be78 	.word	0x0000be78
    48fc:	1fff8bec 	.word	0x1fff8bec
    4900:	0000b7ec 	.word	0x0000b7ec
    4904:	0000bdc0 	.word	0x0000bdc0
    4908:	1fff8bf0 	.word	0x1fff8bf0
    490c:	0000b7fc 	.word	0x0000b7fc
    4910:	0000be2c 	.word	0x0000be2c
    4914:	1fff8bf4 	.word	0x1fff8bf4
    4918:	0000b83c 	.word	0x0000b83c
    491c:	0000bea4 	.word	0x0000bea4
    4920:	1fff8bf8 	.word	0x1fff8bf8
    4924:	1fff8c34 	.word	0x1fff8c34
    4928:	0000b7cc 	.word	0x0000b7cc
    492c:	0000bd7c 	.word	0x0000bd7c
    4930:	1fff8bfc 	.word	0x1fff8bfc
    4934:	1fff8c38 	.word	0x1fff8c38
    4938:	1fff8c00 	.word	0x1fff8c00
    493c:	1fff8c3c 	.word	0x1fff8c3c
    4940:	1fff8c04 	.word	0x1fff8c04
    4944:	1fff8c40 	.word	0x1fff8c40
    4948:	1fff8b19 	.word	0x1fff8b19
    494c:	1fff8b10 	.word	0x1fff8b10
    4950:	1fff8c08 	.word	0x1fff8c08
    4954:	1fff8c0c 	.word	0x1fff8c0c
    4958:	1fff8c10 	.word	0x1fff8c10
    495c:	1fff8c14 	.word	0x1fff8c14
    4960:	1fff8c18 	.word	0x1fff8c18
    4964:	1fff8c44 	.word	0x1fff8c44
    4968:	1fff8c1c 	.word	0x1fff8c1c
    496c:	1fff8c20 	.word	0x1fff8c20
    4970:	1fff8c48 	.word	0x1fff8c48
    4974:	1fff8c24 	.word	0x1fff8c24
    4978:	1fff8c28 	.word	0x1fff8c28
    497c:	1fff8c4c 	.word	0x1fff8c4c
    4980:	1fff8c2c 	.word	0x1fff8c2c
    4984:	1fff8c30 	.word	0x1fff8c30
    4988:	1fff8c50 	.word	0x1fff8c50

0000498c <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    498c:	b500      	push	{lr}
    498e:	b083      	sub	sp, #12
    4990:	9001      	str	r0, [sp, #4]
    4992:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    4994:	9b01      	ldr	r3, [sp, #4]
    4996:	2b03      	cmp	r3, #3
    4998:	f000 8090 	beq.w	4abc <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    499c:	9b01      	ldr	r3, [sp, #4]
    499e:	2b03      	cmp	r3, #3
    49a0:	f200 80d3 	bhi.w	4b4a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    49a4:	9b01      	ldr	r3, [sp, #4]
    49a6:	2b00      	cmp	r3, #0
    49a8:	d040      	beq.n	4a2c <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    49aa:	9b01      	ldr	r3, [sp, #4]
    49ac:	3b01      	subs	r3, #1
    49ae:	2b01      	cmp	r3, #1
    49b0:	f200 80cb 	bhi.w	4b4a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    49b4:	9b00      	ldr	r3, [sp, #0]
    49b6:	2b00      	cmp	r3, #0
    49b8:	f040 80c9 	bne.w	4b4e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    49bc:	4b68      	ldr	r3, [pc, #416]	; (4b60 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    49be:	2200      	movs	r2, #0
    49c0:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    49c2:	4b68      	ldr	r3, [pc, #416]	; (4b64 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    49c4:	681b      	ldr	r3, [r3, #0]
    49c6:	685b      	ldr	r3, [r3, #4]
    49c8:	4a67      	ldr	r2, [pc, #412]	; (4b68 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    49ca:	6812      	ldr	r2, [r2, #0]
    49cc:	4610      	mov	r0, r2
    49ce:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    49d0:	4b66      	ldr	r3, [pc, #408]	; (4b6c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    49d2:	681b      	ldr	r3, [r3, #0]
    49d4:	681b      	ldr	r3, [r3, #0]
    49d6:	4a66      	ldr	r2, [pc, #408]	; (4b70 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    49d8:	6812      	ldr	r2, [r2, #0]
    49da:	4610      	mov	r0, r2
    49dc:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    49de:	4b65      	ldr	r3, [pc, #404]	; (4b74 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    49e0:	681b      	ldr	r3, [r3, #0]
    49e2:	681b      	ldr	r3, [r3, #0]
    49e4:	4a64      	ldr	r2, [pc, #400]	; (4b78 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    49e6:	6812      	ldr	r2, [r2, #0]
    49e8:	4610      	mov	r0, r2
    49ea:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    49ec:	4b63      	ldr	r3, [pc, #396]	; (4b7c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    49ee:	681b      	ldr	r3, [r3, #0]
    49f0:	681b      	ldr	r3, [r3, #0]
    49f2:	4a63      	ldr	r2, [pc, #396]	; (4b80 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    49f4:	6812      	ldr	r2, [r2, #0]
    49f6:	4610      	mov	r0, r2
    49f8:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    49fa:	4b62      	ldr	r3, [pc, #392]	; (4b84 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    49fc:	681b      	ldr	r3, [r3, #0]
    49fe:	691b      	ldr	r3, [r3, #16]
    4a00:	4a61      	ldr	r2, [pc, #388]	; (4b88 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4a02:	6812      	ldr	r2, [r2, #0]
    4a04:	6812      	ldr	r2, [r2, #0]
    4a06:	4610      	mov	r0, r2
    4a08:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    4a0a:	4b60      	ldr	r3, [pc, #384]	; (4b8c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a0c:	681b      	ldr	r3, [r3, #0]
    4a0e:	68db      	ldr	r3, [r3, #12]
    4a10:	4a5f      	ldr	r2, [pc, #380]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4a12:	6812      	ldr	r2, [r2, #0]
    4a14:	6812      	ldr	r2, [r2, #0]
    4a16:	4610      	mov	r0, r2
    4a18:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    4a1a:	4b5e      	ldr	r3, [pc, #376]	; (4b94 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4a1c:	681b      	ldr	r3, [r3, #0]
    4a1e:	689b      	ldr	r3, [r3, #8]
    4a20:	4a5d      	ldr	r2, [pc, #372]	; (4b98 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4a22:	6812      	ldr	r2, [r2, #0]
    4a24:	6812      	ldr	r2, [r2, #0]
    4a26:	4610      	mov	r0, r2
    4a28:	4798      	blx	r3
            }
        }
        break;
    4a2a:	e090      	b.n	4b4e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4a2c:	9b00      	ldr	r3, [sp, #0]
    4a2e:	2b02      	cmp	r3, #2
    4a30:	f040 808f 	bne.w	4b52 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4a34:	4b4a      	ldr	r3, [pc, #296]	; (4b60 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4a36:	2201      	movs	r2, #1
    4a38:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4a3a:	4b56      	ldr	r3, [pc, #344]	; (4b94 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4a3c:	681b      	ldr	r3, [r3, #0]
    4a3e:	685b      	ldr	r3, [r3, #4]
    4a40:	4a55      	ldr	r2, [pc, #340]	; (4b98 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4a42:	6812      	ldr	r2, [r2, #0]
    4a44:	4610      	mov	r0, r2
    4a46:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4a48:	4b50      	ldr	r3, [pc, #320]	; (4b8c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a4a:	681b      	ldr	r3, [r3, #0]
    4a4c:	691b      	ldr	r3, [r3, #16]
    4a4e:	4a50      	ldr	r2, [pc, #320]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4a50:	6812      	ldr	r2, [r2, #0]
    4a52:	4610      	mov	r0, r2
    4a54:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4a56:	4b4d      	ldr	r3, [pc, #308]	; (4b8c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a58:	681b      	ldr	r3, [r3, #0]
    4a5a:	689b      	ldr	r3, [r3, #8]
    4a5c:	4a4c      	ldr	r2, [pc, #304]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4a5e:	6812      	ldr	r2, [r2, #0]
    4a60:	4610      	mov	r0, r2
    4a62:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4a64:	4b47      	ldr	r3, [pc, #284]	; (4b84 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4a66:	681b      	ldr	r3, [r3, #0]
    4a68:	68db      	ldr	r3, [r3, #12]
    4a6a:	4a47      	ldr	r2, [pc, #284]	; (4b88 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4a6c:	6812      	ldr	r2, [r2, #0]
    4a6e:	4610      	mov	r0, r2
    4a70:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4a72:	4b44      	ldr	r3, [pc, #272]	; (4b84 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4a74:	681b      	ldr	r3, [r3, #0]
    4a76:	689b      	ldr	r3, [r3, #8]
    4a78:	4a43      	ldr	r2, [pc, #268]	; (4b88 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4a7a:	6812      	ldr	r2, [r2, #0]
    4a7c:	6812      	ldr	r2, [r2, #0]
    4a7e:	4610      	mov	r0, r2
    4a80:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    4a82:	4b38      	ldr	r3, [pc, #224]	; (4b64 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4a84:	681b      	ldr	r3, [r3, #0]
    4a86:	685b      	ldr	r3, [r3, #4]
    4a88:	4a44      	ldr	r2, [pc, #272]	; (4b9c <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    4a8a:	6812      	ldr	r2, [r2, #0]
    4a8c:	4610      	mov	r0, r2
    4a8e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    4a90:	4b36      	ldr	r3, [pc, #216]	; (4b6c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4a92:	681b      	ldr	r3, [r3, #0]
    4a94:	681b      	ldr	r3, [r3, #0]
    4a96:	4a42      	ldr	r2, [pc, #264]	; (4ba0 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    4a98:	6812      	ldr	r2, [r2, #0]
    4a9a:	4610      	mov	r0, r2
    4a9c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    4a9e:	4b35      	ldr	r3, [pc, #212]	; (4b74 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4aa0:	681b      	ldr	r3, [r3, #0]
    4aa2:	681b      	ldr	r3, [r3, #0]
    4aa4:	4a3f      	ldr	r2, [pc, #252]	; (4ba4 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    4aa6:	6812      	ldr	r2, [r2, #0]
    4aa8:	4610      	mov	r0, r2
    4aaa:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    4aac:	4b33      	ldr	r3, [pc, #204]	; (4b7c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4aae:	681b      	ldr	r3, [r3, #0]
    4ab0:	681b      	ldr	r3, [r3, #0]
    4ab2:	4a3d      	ldr	r2, [pc, #244]	; (4ba8 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    4ab4:	6812      	ldr	r2, [r2, #0]
    4ab6:	4610      	mov	r0, r2
    4ab8:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4aba:	e04a      	b.n	4b52 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4abc:	9b00      	ldr	r3, [sp, #0]
    4abe:	2b02      	cmp	r3, #2
    4ac0:	d149      	bne.n	4b56 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4ac2:	4b27      	ldr	r3, [pc, #156]	; (4b60 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4ac4:	2201      	movs	r2, #1
    4ac6:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4ac8:	4b32      	ldr	r3, [pc, #200]	; (4b94 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4aca:	681b      	ldr	r3, [r3, #0]
    4acc:	685b      	ldr	r3, [r3, #4]
    4ace:	4a32      	ldr	r2, [pc, #200]	; (4b98 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4ad0:	6812      	ldr	r2, [r2, #0]
    4ad2:	4610      	mov	r0, r2
    4ad4:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4ad6:	4b2d      	ldr	r3, [pc, #180]	; (4b8c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4ad8:	681b      	ldr	r3, [r3, #0]
    4ada:	691b      	ldr	r3, [r3, #16]
    4adc:	4a2c      	ldr	r2, [pc, #176]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4ade:	6812      	ldr	r2, [r2, #0]
    4ae0:	4610      	mov	r0, r2
    4ae2:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4ae4:	4b29      	ldr	r3, [pc, #164]	; (4b8c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4ae6:	681b      	ldr	r3, [r3, #0]
    4ae8:	689b      	ldr	r3, [r3, #8]
    4aea:	4a29      	ldr	r2, [pc, #164]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4aec:	6812      	ldr	r2, [r2, #0]
    4aee:	4610      	mov	r0, r2
    4af0:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4af2:	4b24      	ldr	r3, [pc, #144]	; (4b84 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4af4:	681b      	ldr	r3, [r3, #0]
    4af6:	68db      	ldr	r3, [r3, #12]
    4af8:	4a23      	ldr	r2, [pc, #140]	; (4b88 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4afa:	6812      	ldr	r2, [r2, #0]
    4afc:	4610      	mov	r0, r2
    4afe:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4b00:	4b20      	ldr	r3, [pc, #128]	; (4b84 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4b02:	681b      	ldr	r3, [r3, #0]
    4b04:	689b      	ldr	r3, [r3, #8]
    4b06:	4a20      	ldr	r2, [pc, #128]	; (4b88 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4b08:	6812      	ldr	r2, [r2, #0]
    4b0a:	6812      	ldr	r2, [r2, #0]
    4b0c:	4610      	mov	r0, r2
    4b0e:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    4b10:	4b26      	ldr	r3, [pc, #152]	; (4bac <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    4b12:	681b      	ldr	r3, [r3, #0]
    4b14:	685b      	ldr	r3, [r3, #4]
    4b16:	4a26      	ldr	r2, [pc, #152]	; (4bb0 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4b18:	6812      	ldr	r2, [r2, #0]
    4b1a:	4610      	mov	r0, r2
    4b1c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    4b1e:	4b25      	ldr	r3, [pc, #148]	; (4bb4 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    4b20:	681b      	ldr	r3, [r3, #0]
    4b22:	681b      	ldr	r3, [r3, #0]
    4b24:	4a24      	ldr	r2, [pc, #144]	; (4bb8 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    4b26:	6812      	ldr	r2, [r2, #0]
    4b28:	4610      	mov	r0, r2
    4b2a:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    4b2c:	4b23      	ldr	r3, [pc, #140]	; (4bbc <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    4b2e:	681b      	ldr	r3, [r3, #0]
    4b30:	681b      	ldr	r3, [r3, #0]
    4b32:	4a23      	ldr	r2, [pc, #140]	; (4bc0 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    4b34:	6812      	ldr	r2, [r2, #0]
    4b36:	4610      	mov	r0, r2
    4b38:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    4b3a:	4b22      	ldr	r3, [pc, #136]	; (4bc4 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    4b3c:	681b      	ldr	r3, [r3, #0]
    4b3e:	681b      	ldr	r3, [r3, #0]
    4b40:	4a21      	ldr	r2, [pc, #132]	; (4bc8 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    4b42:	6812      	ldr	r2, [r2, #0]
    4b44:	4610      	mov	r0, r2
    4b46:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4b48:	e005      	b.n	4b56 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    4b4a:	bf00      	nop
    4b4c:	e004      	b.n	4b58 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4b4e:	bf00      	nop
    4b50:	e002      	b.n	4b58 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4b52:	bf00      	nop
    4b54:	e000      	b.n	4b58 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4b56:	bf00      	nop
    }

}
    4b58:	bf00      	nop
    4b5a:	b003      	add	sp, #12
    4b5c:	f85d fb04 	ldr.w	pc, [sp], #4
    4b60:	1fff8b19 	.word	0x1fff8b19
    4b64:	1fff8bf8 	.word	0x1fff8bf8
    4b68:	1fff8c18 	.word	0x1fff8c18
    4b6c:	1fff8bfc 	.word	0x1fff8bfc
    4b70:	1fff8c20 	.word	0x1fff8c20
    4b74:	1fff8c00 	.word	0x1fff8c00
    4b78:	1fff8c28 	.word	0x1fff8c28
    4b7c:	1fff8c04 	.word	0x1fff8c04
    4b80:	1fff8c30 	.word	0x1fff8c30
    4b84:	1fff8bec 	.word	0x1fff8bec
    4b88:	1fff8c10 	.word	0x1fff8c10
    4b8c:	1fff8bf0 	.word	0x1fff8bf0
    4b90:	1fff8c0c 	.word	0x1fff8c0c
    4b94:	1fff8bf4 	.word	0x1fff8bf4
    4b98:	1fff8c08 	.word	0x1fff8c08
    4b9c:	1fff8c14 	.word	0x1fff8c14
    4ba0:	1fff8c1c 	.word	0x1fff8c1c
    4ba4:	1fff8c24 	.word	0x1fff8c24
    4ba8:	1fff8c2c 	.word	0x1fff8c2c
    4bac:	1fff8c34 	.word	0x1fff8c34
    4bb0:	1fff8c44 	.word	0x1fff8c44
    4bb4:	1fff8c38 	.word	0x1fff8c38
    4bb8:	1fff8c48 	.word	0x1fff8c48
    4bbc:	1fff8c3c 	.word	0x1fff8c3c
    4bc0:	1fff8c4c 	.word	0x1fff8c4c
    4bc4:	1fff8c40 	.word	0x1fff8c40
    4bc8:	1fff8c50 	.word	0x1fff8c50

00004bcc <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    4bcc:	b500      	push	{lr}
    4bce:	b083      	sub	sp, #12
    4bd0:	9001      	str	r0, [sp, #4]
    4bd2:	9100      	str	r1, [sp, #0]
    switch(Command)
    4bd4:	9b00      	ldr	r3, [sp, #0]
    4bd6:	2b04      	cmp	r3, #4
    4bd8:	d010      	beq.n	4bfc <Clock_Ip_Command+0x30>
    4bda:	9b00      	ldr	r3, [sp, #0]
    4bdc:	2b04      	cmp	r3, #4
    4bde:	d811      	bhi.n	4c04 <Clock_Ip_Command+0x38>
    4be0:	9b00      	ldr	r3, [sp, #0]
    4be2:	2b01      	cmp	r3, #1
    4be4:	d006      	beq.n	4bf4 <Clock_Ip_Command+0x28>
    4be6:	9b00      	ldr	r3, [sp, #0]
    4be8:	2b02      	cmp	r3, #2
    4bea:	d10b      	bne.n	4c04 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    4bec:	9801      	ldr	r0, [sp, #4]
    4bee:	f7ff fdb3 	bl	4758 <Clock_Ip_ClockInitializeObjects>
            break;
    4bf2:	e008      	b.n	4c06 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    4bf4:	9801      	ldr	r0, [sp, #4]
    4bf6:	f7ff f9db 	bl	3fb0 <Clock_Ip_SpecificPlatformInitClock>
            break;
    4bfa:	e004      	b.n	4c06 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    4bfc:	9801      	ldr	r0, [sp, #4]
    4bfe:	f7ff f8ed 	bl	3ddc <DisableSafeClock>
            break;
    4c02:	e000      	b.n	4c06 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    4c04:	bf00      	nop
    }
}
    4c06:	bf00      	nop
    4c08:	b003      	add	sp, #12
    4c0a:	f85d fb04 	ldr.w	pc, [sp], #4
    4c0e:	bf00      	nop

00004c10 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    4c10:	b500      	push	{lr}
    4c12:	b085      	sub	sp, #20
    4c14:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    4c16:	4a20      	ldr	r2, [pc, #128]	; (4c98 <Mcu_Init+0x88>)
    4c18:	9b01      	ldr	r3, [sp, #4]
    4c1a:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4c1c:	2300      	movs	r3, #0
    4c1e:	9303      	str	r3, [sp, #12]
    4c20:	e010      	b.n	4c44 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    4c22:	4b1d      	ldr	r3, [pc, #116]	; (4c98 <Mcu_Init+0x88>)
    4c24:	681b      	ldr	r3, [r3, #0]
    4c26:	6919      	ldr	r1, [r3, #16]
    4c28:	9a03      	ldr	r2, [sp, #12]
    4c2a:	4613      	mov	r3, r2
    4c2c:	005b      	lsls	r3, r3, #1
    4c2e:	4413      	add	r3, r2
    4c30:	009b      	lsls	r3, r3, #2
    4c32:	440b      	add	r3, r1
    4c34:	681b      	ldr	r3, [r3, #0]
    4c36:	9a03      	ldr	r2, [sp, #12]
    4c38:	b2d1      	uxtb	r1, r2
    4c3a:	4a18      	ldr	r2, [pc, #96]	; (4c9c <Mcu_Init+0x8c>)
    4c3c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4c3e:	9b03      	ldr	r3, [sp, #12]
    4c40:	3301      	adds	r3, #1
    4c42:	9303      	str	r3, [sp, #12]
    4c44:	4b14      	ldr	r3, [pc, #80]	; (4c98 <Mcu_Init+0x88>)
    4c46:	681b      	ldr	r3, [r3, #0]
    4c48:	689b      	ldr	r3, [r3, #8]
    4c4a:	9a03      	ldr	r2, [sp, #12]
    4c4c:	429a      	cmp	r2, r3
    4c4e:	d3e8      	bcc.n	4c22 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4c50:	2300      	movs	r3, #0
    4c52:	9303      	str	r3, [sp, #12]
    4c54:	e010      	b.n	4c78 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    4c56:	4b10      	ldr	r3, [pc, #64]	; (4c98 <Mcu_Init+0x88>)
    4c58:	681b      	ldr	r3, [r3, #0]
    4c5a:	6959      	ldr	r1, [r3, #20]
    4c5c:	9a03      	ldr	r2, [sp, #12]
    4c5e:	4613      	mov	r3, r2
    4c60:	01db      	lsls	r3, r3, #7
    4c62:	1a9b      	subs	r3, r3, r2
    4c64:	00db      	lsls	r3, r3, #3
    4c66:	440b      	add	r3, r1
    4c68:	681b      	ldr	r3, [r3, #0]
    4c6a:	9a03      	ldr	r2, [sp, #12]
    4c6c:	b2d1      	uxtb	r1, r2
    4c6e:	4a0c      	ldr	r2, [pc, #48]	; (4ca0 <Mcu_Init+0x90>)
    4c70:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4c72:	9b03      	ldr	r3, [sp, #12]
    4c74:	3301      	adds	r3, #1
    4c76:	9303      	str	r3, [sp, #12]
    4c78:	4b07      	ldr	r3, [pc, #28]	; (4c98 <Mcu_Init+0x88>)
    4c7a:	681b      	ldr	r3, [r3, #0]
    4c7c:	68db      	ldr	r3, [r3, #12]
    4c7e:	9a03      	ldr	r2, [sp, #12]
    4c80:	429a      	cmp	r2, r3
    4c82:	d3e8      	bcc.n	4c56 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    4c84:	4b04      	ldr	r3, [pc, #16]	; (4c98 <Mcu_Init+0x88>)
    4c86:	681b      	ldr	r3, [r3, #0]
    4c88:	699b      	ldr	r3, [r3, #24]
    4c8a:	4618      	mov	r0, r3
    4c8c:	f000 f88a 	bl	4da4 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4c90:	bf00      	nop
    4c92:	b005      	add	sp, #20
    4c94:	f85d fb04 	ldr.w	pc, [sp], #4
    4c98:	1fff8d2c 	.word	0x1fff8d2c
    4c9c:	1fff8d28 	.word	0x1fff8d28
    4ca0:	1fff8d24 	.word	0x1fff8d24

00004ca4 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    4ca4:	b084      	sub	sp, #16
    4ca6:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    4ca8:	2301      	movs	r3, #1
    4caa:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    4cae:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    4cb2:	4618      	mov	r0, r3
    4cb4:	b004      	add	sp, #16
    4cb6:	4770      	bx	lr

00004cb8 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    4cb8:	b500      	push	{lr}
    4cba:	b085      	sub	sp, #20
    4cbc:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    4cbe:	4a0e      	ldr	r2, [pc, #56]	; (4cf8 <Mcu_InitClock+0x40>)
    4cc0:	9b01      	ldr	r3, [sp, #4]
    4cc2:	4413      	add	r3, r2
    4cc4:	781b      	ldrb	r3, [r3, #0]
    4cc6:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    4cca:	4b0c      	ldr	r3, [pc, #48]	; (4cfc <Mcu_InitClock+0x44>)
    4ccc:	681b      	ldr	r3, [r3, #0]
    4cce:	6959      	ldr	r1, [r3, #20]
    4cd0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4cd4:	4613      	mov	r3, r2
    4cd6:	01db      	lsls	r3, r3, #7
    4cd8:	1a9b      	subs	r3, r3, r2
    4cda:	00db      	lsls	r3, r3, #3
    4cdc:	440b      	add	r3, r1
    4cde:	4618      	mov	r0, r3
    4ce0:	f000 f86a 	bl	4db8 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    4ce4:	2300      	movs	r3, #0
    4ce6:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    4cea:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    4cee:	4618      	mov	r0, r3
    4cf0:	b005      	add	sp, #20
    4cf2:	f85d fb04 	ldr.w	pc, [sp], #4
    4cf6:	bf00      	nop
    4cf8:	1fff8d24 	.word	0x1fff8d24
    4cfc:	1fff8d2c 	.word	0x1fff8d2c

00004d00 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    4d00:	b500      	push	{lr}
    4d02:	b085      	sub	sp, #20
    4d04:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    4d06:	4a0d      	ldr	r2, [pc, #52]	; (4d3c <Mcu_SetMode+0x3c>)
    4d08:	9b01      	ldr	r3, [sp, #4]
    4d0a:	4413      	add	r3, r2
    4d0c:	781b      	ldrb	r3, [r3, #0]
    4d0e:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    4d12:	f005 fabb 	bl	a28c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    4d16:	4b0a      	ldr	r3, [pc, #40]	; (4d40 <Mcu_SetMode+0x40>)
    4d18:	681b      	ldr	r3, [r3, #0]
    4d1a:	6919      	ldr	r1, [r3, #16]
    4d1c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4d20:	4613      	mov	r3, r2
    4d22:	005b      	lsls	r3, r3, #1
    4d24:	4413      	add	r3, r2
    4d26:	009b      	lsls	r3, r3, #2
    4d28:	440b      	add	r3, r1
    4d2a:	4618      	mov	r0, r3
    4d2c:	f000 f84e 	bl	4dcc <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    4d30:	f005 fad8 	bl	a2e4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4d34:	bf00      	nop
    4d36:	b005      	add	sp, #20
    4d38:	f85d fb04 	ldr.w	pc, [sp], #4
    4d3c:	1fff8d28 	.word	0x1fff8d28
    4d40:	1fff8d2c 	.word	0x1fff8d2c

00004d44 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    4d44:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    4d46:	2302      	movs	r3, #2
    4d48:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    4d4a:	9b01      	ldr	r3, [sp, #4]
}
    4d4c:	4618      	mov	r0, r3
    4d4e:	b002      	add	sp, #8
    4d50:	4770      	bx	lr

00004d52 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    4d52:	b500      	push	{lr}
    4d54:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    4d56:	f000 f843 	bl	4de0 <Mcu_Ipw_GetResetReason>
    4d5a:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    4d5c:	9b01      	ldr	r3, [sp, #4]
}
    4d5e:	4618      	mov	r0, r3
    4d60:	b003      	add	sp, #12
    4d62:	f85d fb04 	ldr.w	pc, [sp], #4

00004d66 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    4d66:	b500      	push	{lr}
    4d68:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    4d6a:	f000 f83f 	bl	4dec <Mcu_Ipw_GetResetRawValue>
    4d6e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    4d70:	9b01      	ldr	r3, [sp, #4]
}
    4d72:	4618      	mov	r0, r3
    4d74:	b003      	add	sp, #12
    4d76:	f85d fb04 	ldr.w	pc, [sp], #4

00004d7a <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4d7a:	b500      	push	{lr}
    4d7c:	b083      	sub	sp, #12
    4d7e:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    4d80:	9801      	ldr	r0, [sp, #4]
    4d82:	f000 f839 	bl	4df8 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    4d86:	bf00      	nop
    4d88:	b003      	add	sp, #12
    4d8a:	f85d fb04 	ldr.w	pc, [sp], #4

00004d8e <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    4d8e:	b082      	sub	sp, #8
    4d90:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    4d92:	4b03      	ldr	r3, [pc, #12]	; (4da0 <Mcu_ClkSrcFailureNotification+0x12>)
    4d94:	681b      	ldr	r3, [r3, #0]
    4d96:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    4d98:	bf00      	nop
    4d9a:	b002      	add	sp, #8
    4d9c:	4770      	bx	lr
    4d9e:	bf00      	nop
    4da0:	1fff8d2c 	.word	0x1fff8d2c

00004da4 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    4da4:	b500      	push	{lr}
    4da6:	b083      	sub	sp, #12
    4da8:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    4daa:	9801      	ldr	r0, [sp, #4]
    4dac:	f000 f882 	bl	4eb4 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    4db0:	bf00      	nop
    4db2:	b003      	add	sp, #12
    4db4:	f85d fb04 	ldr.w	pc, [sp], #4

00004db8 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    4db8:	b500      	push	{lr}
    4dba:	b083      	sub	sp, #12
    4dbc:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    4dbe:	9801      	ldr	r0, [sp, #4]
    4dc0:	f7fc fc6a 	bl	1698 <Clock_Ip_InitClock>
}
    4dc4:	bf00      	nop
    4dc6:	b003      	add	sp, #12
    4dc8:	f85d fb04 	ldr.w	pc, [sp], #4

00004dcc <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    4dcc:	b500      	push	{lr}
    4dce:	b083      	sub	sp, #12
    4dd0:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    4dd2:	9801      	ldr	r0, [sp, #4]
    4dd4:	f000 f820 	bl	4e18 <Power_Ip_SetMode>
}
    4dd8:	bf00      	nop
    4dda:	b003      	add	sp, #12
    4ddc:	f85d fb04 	ldr.w	pc, [sp], #4

00004de0 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    4de0:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    4de2:	f000 f84f 	bl	4e84 <Power_Ip_GetResetReason>
    4de6:	4603      	mov	r3, r0
}
    4de8:	4618      	mov	r0, r3
    4dea:	bd08      	pop	{r3, pc}

00004dec <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    4dec:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    4dee:	f000 f857 	bl	4ea0 <Power_Ip_GetResetRawValue>
    4df2:	4603      	mov	r3, r0
}
    4df4:	4618      	mov	r0, r3
    4df6:	bd08      	pop	{r3, pc}

00004df8 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4df8:	b500      	push	{lr}
    4dfa:	b083      	sub	sp, #12
    4dfc:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    4dfe:	9b01      	ldr	r3, [sp, #4]
    4e00:	2b00      	cmp	r3, #0
    4e02:	d102      	bne.n	4e0a <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    4e04:	f000 f86c 	bl	4ee0 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    4e08:	e001      	b.n	4e0e <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    4e0a:	f000 f86e 	bl	4eea <Power_Ip_EnableSleepOnExit>
}
    4e0e:	bf00      	nop
    4e10:	b003      	add	sp, #12
    4e12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00004e18 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4e18:	b500      	push	{lr}
    4e1a:	b085      	sub	sp, #20
    4e1c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    4e1e:	9b01      	ldr	r3, [sp, #4]
    4e20:	685b      	ldr	r3, [r3, #4]
    4e22:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    4e24:	9802      	ldr	r0, [sp, #8]
    4e26:	f000 f9f5 	bl	5214 <Power_Ip_SMC_ModeCheckEntry>
    4e2a:	4603      	mov	r3, r0
    4e2c:	2b00      	cmp	r3, #0
    4e2e:	d002      	beq.n	4e36 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e30:	2301      	movs	r3, #1
    4e32:	9303      	str	r3, [sp, #12]
    4e34:	e003      	b.n	4e3e <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    4e36:	9801      	ldr	r0, [sp, #4]
    4e38:	f000 fa1e 	bl	5278 <Power_Ip_SMC_ModeConfig>
    4e3c:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    4e3e:	9b03      	ldr	r3, [sp, #12]
    4e40:	2b01      	cmp	r3, #1
    4e42:	d103      	bne.n	4e4c <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4e44:	21ff      	movs	r1, #255	; 0xff
    4e46:	2003      	movs	r0, #3
    4e48:	f000 f8f4 	bl	5034 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    4e4c:	bf00      	nop
    4e4e:	b005      	add	sp, #20
    4e50:	f85d fb04 	ldr.w	pc, [sp], #4

00004e54 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    4e54:	b084      	sub	sp, #16
    4e56:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    4e58:	230c      	movs	r3, #12
    4e5a:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    4e5c:	4a08      	ldr	r2, [pc, #32]	; (4e80 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4e5e:	9b01      	ldr	r3, [sp, #4]
    4e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4e64:	2b0e      	cmp	r3, #14
    4e66:	d805      	bhi.n	4e74 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    4e68:	4a05      	ldr	r2, [pc, #20]	; (4e80 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4e6a:	9b01      	ldr	r3, [sp, #4]
    4e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4e70:	9303      	str	r3, [sp, #12]
    4e72:	e001      	b.n	4e78 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    4e74:	230c      	movs	r3, #12
    4e76:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    4e78:	9b03      	ldr	r3, [sp, #12]
}
    4e7a:	4618      	mov	r0, r3
    4e7c:	b004      	add	sp, #16
    4e7e:	4770      	bx	lr
    4e80:	0000bf18 	.word	0x0000bf18

00004e84 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    4e84:	b500      	push	{lr}
    4e86:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    4e88:	f000 f940 	bl	510c <Power_Ip_RCM_GetResetReason>
    4e8c:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    4e8e:	9801      	ldr	r0, [sp, #4]
    4e90:	f7ff ffe0 	bl	4e54 <Power_Ip_ConvertIntergeToResetType>
    4e94:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    4e96:	9b00      	ldr	r3, [sp, #0]
}
    4e98:	4618      	mov	r0, r3
    4e9a:	b003      	add	sp, #12
    4e9c:	f85d fb04 	ldr.w	pc, [sp], #4

00004ea0 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    4ea0:	b500      	push	{lr}
    4ea2:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    4ea4:	f000 f98a 	bl	51bc <Power_Ip_RCM_GetResetRawValue>
    4ea8:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    4eaa:	9b01      	ldr	r3, [sp, #4]
}
    4eac:	4618      	mov	r0, r3
    4eae:	b003      	add	sp, #12
    4eb0:	f85d fb04 	ldr.w	pc, [sp], #4

00004eb4 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    4eb4:	b500      	push	{lr}
    4eb6:	b083      	sub	sp, #12
    4eb8:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    4eba:	9b01      	ldr	r3, [sp, #4]
    4ebc:	681b      	ldr	r3, [r3, #0]
    4ebe:	4618      	mov	r0, r3
    4ec0:	f000 f90e 	bl	50e0 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    4ec4:	9b01      	ldr	r3, [sp, #4]
    4ec6:	685b      	ldr	r3, [r3, #4]
    4ec8:	4618      	mov	r0, r3
    4eca:	f000 f86d 	bl	4fa8 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    4ece:	9b01      	ldr	r3, [sp, #4]
    4ed0:	689b      	ldr	r3, [r3, #8]
    4ed2:	4618      	mov	r0, r3
    4ed4:	f000 f990 	bl	51f8 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    4ed8:	bf00      	nop
    4eda:	b003      	add	sp, #12
    4edc:	f85d fb04 	ldr.w	pc, [sp], #4

00004ee0 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    4ee0:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    4ee2:	f000 f811 	bl	4f08 <Power_Ip_CM4_DisableSleepOnExit>
}
    4ee6:	bf00      	nop
    4ee8:	bd08      	pop	{r3, pc}

00004eea <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    4eea:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    4eec:	f000 f820 	bl	4f30 <Power_Ip_CM4_EnableSleepOnExit>
}
    4ef0:	bf00      	nop
    4ef2:	bd08      	pop	{r3, pc}

00004ef4 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    4ef4:	b082      	sub	sp, #8
    4ef6:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    4ef8:	4a02      	ldr	r2, [pc, #8]	; (4f04 <Power_Ip_InstallNotificationsCallback+0x10>)
    4efa:	9b01      	ldr	r3, [sp, #4]
    4efc:	6013      	str	r3, [r2, #0]
}
    4efe:	bf00      	nop
    4f00:	b002      	add	sp, #8
    4f02:	4770      	bx	lr
    4f04:	1fff8b1c 	.word	0x1fff8b1c

00004f08 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    4f08:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f0a:	2300      	movs	r3, #0
    4f0c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f0e:	4b07      	ldr	r3, [pc, #28]	; (4f2c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4f10:	681b      	ldr	r3, [r3, #0]
    4f12:	685b      	ldr	r3, [r3, #4]
    4f14:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    4f16:	9b01      	ldr	r3, [sp, #4]
    4f18:	f023 0302 	bic.w	r3, r3, #2
    4f1c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f1e:	4b03      	ldr	r3, [pc, #12]	; (4f2c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4f20:	681b      	ldr	r3, [r3, #0]
    4f22:	9a01      	ldr	r2, [sp, #4]
    4f24:	605a      	str	r2, [r3, #4]
}
    4f26:	bf00      	nop
    4f28:	b002      	add	sp, #8
    4f2a:	4770      	bx	lr
    4f2c:	1fff8b20 	.word	0x1fff8b20

00004f30 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    4f30:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f32:	2300      	movs	r3, #0
    4f34:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f36:	4b07      	ldr	r3, [pc, #28]	; (4f54 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4f38:	681b      	ldr	r3, [r3, #0]
    4f3a:	685b      	ldr	r3, [r3, #4]
    4f3c:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    4f3e:	9b01      	ldr	r3, [sp, #4]
    4f40:	f043 0302 	orr.w	r3, r3, #2
    4f44:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f46:	4b03      	ldr	r3, [pc, #12]	; (4f54 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4f48:	681b      	ldr	r3, [r3, #0]
    4f4a:	9a01      	ldr	r2, [sp, #4]
    4f4c:	605a      	str	r2, [r3, #4]
}
    4f4e:	bf00      	nop
    4f50:	b002      	add	sp, #8
    4f52:	4770      	bx	lr
    4f54:	1fff8b20 	.word	0x1fff8b20

00004f58 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    4f58:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f5a:	2300      	movs	r3, #0
    4f5c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f5e:	4b07      	ldr	r3, [pc, #28]	; (4f7c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4f60:	681b      	ldr	r3, [r3, #0]
    4f62:	685b      	ldr	r3, [r3, #4]
    4f64:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    4f66:	9b01      	ldr	r3, [sp, #4]
    4f68:	f043 0304 	orr.w	r3, r3, #4
    4f6c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f6e:	4b03      	ldr	r3, [pc, #12]	; (4f7c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4f70:	681b      	ldr	r3, [r3, #0]
    4f72:	9a01      	ldr	r2, [sp, #4]
    4f74:	605a      	str	r2, [r3, #4]
}
    4f76:	bf00      	nop
    4f78:	b002      	add	sp, #8
    4f7a:	4770      	bx	lr
    4f7c:	1fff8b20 	.word	0x1fff8b20

00004f80 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    4f80:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f82:	2300      	movs	r3, #0
    4f84:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f86:	4b07      	ldr	r3, [pc, #28]	; (4fa4 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4f88:	681b      	ldr	r3, [r3, #0]
    4f8a:	685b      	ldr	r3, [r3, #4]
    4f8c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    4f8e:	9b01      	ldr	r3, [sp, #4]
    4f90:	f023 0304 	bic.w	r3, r3, #4
    4f94:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f96:	4b03      	ldr	r3, [pc, #12]	; (4fa4 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4f98:	681b      	ldr	r3, [r3, #0]
    4f9a:	9a01      	ldr	r2, [sp, #4]
    4f9c:	605a      	str	r2, [r3, #4]
}
    4f9e:	bf00      	nop
    4fa0:	b002      	add	sp, #8
    4fa2:	4770      	bx	lr
    4fa4:	1fff8b20 	.word	0x1fff8b20

00004fa8 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    4fa8:	b084      	sub	sp, #16
    4faa:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    4fac:	4b20      	ldr	r3, [pc, #128]	; (5030 <Power_Ip_PMC_PowerInit+0x88>)
    4fae:	781b      	ldrb	r3, [r3, #0]
    4fb0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    4fb4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fb8:	f003 030f 	and.w	r3, r3, #15
    4fbc:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    4fc0:	9b01      	ldr	r3, [sp, #4]
    4fc2:	781a      	ldrb	r2, [r3, #0]
    4fc4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fc8:	4313      	orrs	r3, r2
    4fca:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    4fce:	4a18      	ldr	r2, [pc, #96]	; (5030 <Power_Ip_PMC_PowerInit+0x88>)
    4fd0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fd4:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    4fd6:	4b16      	ldr	r3, [pc, #88]	; (5030 <Power_Ip_PMC_PowerInit+0x88>)
    4fd8:	785b      	ldrb	r3, [r3, #1]
    4fda:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    4fde:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fe2:	f003 031f 	and.w	r3, r3, #31
    4fe6:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    4fea:	9b01      	ldr	r3, [sp, #4]
    4fec:	785a      	ldrb	r2, [r3, #1]
    4fee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4ff2:	4313      	orrs	r3, r2
    4ff4:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    4ff8:	4a0d      	ldr	r2, [pc, #52]	; (5030 <Power_Ip_PMC_PowerInit+0x88>)
    4ffa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4ffe:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5000:	4b0b      	ldr	r3, [pc, #44]	; (5030 <Power_Ip_PMC_PowerInit+0x88>)
    5002:	789b      	ldrb	r3, [r3, #2]
    5004:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5008:	f89d 300f 	ldrb.w	r3, [sp, #15]
    500c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5010:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5014:	9b01      	ldr	r3, [sp, #4]
    5016:	789a      	ldrb	r2, [r3, #2]
    5018:	f89d 300f 	ldrb.w	r3, [sp, #15]
    501c:	4313      	orrs	r3, r2
    501e:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5022:	4a03      	ldr	r2, [pc, #12]	; (5030 <Power_Ip_PMC_PowerInit+0x88>)
    5024:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5028:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    502a:	bf00      	nop
    502c:	b004      	add	sp, #16
    502e:	4770      	bx	lr
    5030:	4007d000 	.word	0x4007d000

00005034 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5034:	b500      	push	{lr}
    5036:	b083      	sub	sp, #12
    5038:	9001      	str	r0, [sp, #4]
    503a:	460b      	mov	r3, r1
    503c:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5040:	4b05      	ldr	r3, [pc, #20]	; (5058 <Power_Ip_ReportPowerErrors+0x24>)
    5042:	681b      	ldr	r3, [r3, #0]
    5044:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5048:	4611      	mov	r1, r2
    504a:	9801      	ldr	r0, [sp, #4]
    504c:	4798      	blx	r3
}
    504e:	bf00      	nop
    5050:	b003      	add	sp, #12
    5052:	f85d fb04 	ldr.w	pc, [sp], #4
    5056:	bf00      	nop
    5058:	1fff8b1c 	.word	0x1fff8b1c

0000505c <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    505c:	b082      	sub	sp, #8
    505e:	9001      	str	r0, [sp, #4]
    5060:	460b      	mov	r3, r1
    5062:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5066:	bf00      	nop
    5068:	b002      	add	sp, #8
    506a:	4770      	bx	lr

0000506c <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    506c:	b500      	push	{lr}
    506e:	b085      	sub	sp, #20
    5070:	9003      	str	r0, [sp, #12]
    5072:	9102      	str	r1, [sp, #8]
    5074:	9201      	str	r2, [sp, #4]
    5076:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5078:	2000      	movs	r0, #0
    507a:	f7fc f83d 	bl	10f8 <OsIf_GetCounter>
    507e:	4602      	mov	r2, r0
    5080:	9b03      	ldr	r3, [sp, #12]
    5082:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5084:	9b02      	ldr	r3, [sp, #8]
    5086:	2200      	movs	r2, #0
    5088:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    508a:	2100      	movs	r1, #0
    508c:	9800      	ldr	r0, [sp, #0]
    508e:	f7fc f87f 	bl	1190 <OsIf_MicrosToTicks>
    5092:	4602      	mov	r2, r0
    5094:	9b01      	ldr	r3, [sp, #4]
    5096:	601a      	str	r2, [r3, #0]
}
    5098:	bf00      	nop
    509a:	b005      	add	sp, #20
    509c:	f85d fb04 	ldr.w	pc, [sp], #4

000050a0 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    50a0:	b500      	push	{lr}
    50a2:	b087      	sub	sp, #28
    50a4:	9003      	str	r0, [sp, #12]
    50a6:	9102      	str	r1, [sp, #8]
    50a8:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    50aa:	2300      	movs	r3, #0
    50ac:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    50b0:	2100      	movs	r1, #0
    50b2:	9803      	ldr	r0, [sp, #12]
    50b4:	f7fc f839 	bl	112a <OsIf_GetElapsed>
    50b8:	4602      	mov	r2, r0
    50ba:	9b02      	ldr	r3, [sp, #8]
    50bc:	681b      	ldr	r3, [r3, #0]
    50be:	441a      	add	r2, r3
    50c0:	9b02      	ldr	r3, [sp, #8]
    50c2:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    50c4:	9b02      	ldr	r3, [sp, #8]
    50c6:	681b      	ldr	r3, [r3, #0]
    50c8:	9a01      	ldr	r2, [sp, #4]
    50ca:	429a      	cmp	r2, r3
    50cc:	d802      	bhi.n	50d4 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    50ce:	2301      	movs	r3, #1
    50d0:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    50d4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    50d8:	4618      	mov	r0, r3
    50da:	b007      	add	sp, #28
    50dc:	f85d fb04 	ldr.w	pc, [sp], #4

000050e0 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    50e0:	b082      	sub	sp, #8
    50e2:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    50e4:	9b01      	ldr	r3, [sp, #4]
    50e6:	681a      	ldr	r2, [r3, #0]
    50e8:	4907      	ldr	r1, [pc, #28]	; (5108 <Power_Ip_RCM_ResetInit+0x28>)
    50ea:	f641 7307 	movw	r3, #7943	; 0x1f07
    50ee:	4013      	ands	r3, r2
    50f0:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    50f2:	9b01      	ldr	r3, [sp, #4]
    50f4:	685a      	ldr	r2, [r3, #4]
    50f6:	4904      	ldr	r1, [pc, #16]	; (5108 <Power_Ip_RCM_ResetInit+0x28>)
    50f8:	f642 73ff 	movw	r3, #12287	; 0x2fff
    50fc:	4013      	ands	r3, r2
    50fe:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5100:	bf00      	nop
    5102:	b002      	add	sp, #8
    5104:	4770      	bx	lr
    5106:	bf00      	nop
    5108:	4007f000 	.word	0x4007f000

0000510c <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    510c:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    510e:	230c      	movs	r3, #12
    5110:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5112:	2300      	movs	r3, #0
    5114:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5116:	2300      	movs	r3, #0
    5118:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    511a:	2300      	movs	r3, #0
    511c:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    511e:	4b25      	ldr	r3, [pc, #148]	; (51b4 <Power_Ip_RCM_GetResetReason+0xa8>)
    5120:	699a      	ldr	r2, [r3, #24]
    5122:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5126:	4013      	ands	r3, r2
    5128:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    512a:	9b03      	ldr	r3, [sp, #12]
    512c:	2b00      	cmp	r3, #0
    512e:	d008      	beq.n	5142 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5130:	4920      	ldr	r1, [pc, #128]	; (51b4 <Power_Ip_RCM_GetResetReason+0xa8>)
    5132:	9a03      	ldr	r2, [sp, #12]
    5134:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5138:	4013      	ands	r3, r2
    513a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    513c:	4a1e      	ldr	r2, [pc, #120]	; (51b8 <Power_Ip_RCM_GetResetReason+0xac>)
    513e:	9b03      	ldr	r3, [sp, #12]
    5140:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5142:	4b1d      	ldr	r3, [pc, #116]	; (51b8 <Power_Ip_RCM_GetResetReason+0xac>)
    5144:	681b      	ldr	r3, [r3, #0]
    5146:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5148:	9a02      	ldr	r2, [sp, #8]
    514a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    514e:	4013      	ands	r3, r2
    5150:	2b82      	cmp	r3, #130	; 0x82
    5152:	d102      	bne.n	515a <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5154:	2305      	movs	r3, #5
    5156:	9307      	str	r3, [sp, #28]
    5158:	e027      	b.n	51aa <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    515a:	2300      	movs	r3, #0
    515c:	9306      	str	r3, [sp, #24]
    515e:	e021      	b.n	51a4 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5160:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5164:	9b06      	ldr	r3, [sp, #24]
    5166:	fa22 f303 	lsr.w	r3, r2, r3
    516a:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    516c:	9a01      	ldr	r2, [sp, #4]
    516e:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5172:	4013      	ands	r3, r2
    5174:	2b00      	cmp	r3, #0
    5176:	d012      	beq.n	519e <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5178:	9a01      	ldr	r2, [sp, #4]
    517a:	9b02      	ldr	r3, [sp, #8]
    517c:	4013      	ands	r3, r2
    517e:	2b00      	cmp	r3, #0
    5180:	d00a      	beq.n	5198 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5182:	9b05      	ldr	r3, [sp, #20]
    5184:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5186:	9b04      	ldr	r3, [sp, #16]
    5188:	3301      	adds	r3, #1
    518a:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    518c:	9b04      	ldr	r3, [sp, #16]
    518e:	2b01      	cmp	r3, #1
    5190:	d902      	bls.n	5198 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5192:	230d      	movs	r3, #13
    5194:	9307      	str	r3, [sp, #28]
                        break;
    5196:	e008      	b.n	51aa <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5198:	9b05      	ldr	r3, [sp, #20]
    519a:	3301      	adds	r3, #1
    519c:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    519e:	9b06      	ldr	r3, [sp, #24]
    51a0:	3301      	adds	r3, #1
    51a2:	9306      	str	r3, [sp, #24]
    51a4:	9b06      	ldr	r3, [sp, #24]
    51a6:	2b1f      	cmp	r3, #31
    51a8:	d9da      	bls.n	5160 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    51aa:	9b07      	ldr	r3, [sp, #28]
}
    51ac:	4618      	mov	r0, r3
    51ae:	b008      	add	sp, #32
    51b0:	4770      	bx	lr
    51b2:	bf00      	nop
    51b4:	4007f000 	.word	0x4007f000
    51b8:	1fff8d30 	.word	0x1fff8d30

000051bc <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    51bc:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    51be:	4b0c      	ldr	r3, [pc, #48]	; (51f0 <Power_Ip_RCM_GetResetRawValue+0x34>)
    51c0:	699a      	ldr	r2, [r3, #24]
    51c2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    51c6:	4013      	ands	r3, r2
    51c8:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    51ca:	9b01      	ldr	r3, [sp, #4]
    51cc:	2b00      	cmp	r3, #0
    51ce:	d008      	beq.n	51e2 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    51d0:	4907      	ldr	r1, [pc, #28]	; (51f0 <Power_Ip_RCM_GetResetRawValue+0x34>)
    51d2:	9a01      	ldr	r2, [sp, #4]
    51d4:	f642 73ee 	movw	r3, #12270	; 0x2fee
    51d8:	4013      	ands	r3, r2
    51da:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    51dc:	4a05      	ldr	r2, [pc, #20]	; (51f4 <Power_Ip_RCM_GetResetRawValue+0x38>)
    51de:	9b01      	ldr	r3, [sp, #4]
    51e0:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    51e2:	4b04      	ldr	r3, [pc, #16]	; (51f4 <Power_Ip_RCM_GetResetRawValue+0x38>)
    51e4:	681b      	ldr	r3, [r3, #0]
    51e6:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    51e8:	9b00      	ldr	r3, [sp, #0]
}
    51ea:	4618      	mov	r0, r3
    51ec:	b002      	add	sp, #8
    51ee:	4770      	bx	lr
    51f0:	4007f000 	.word	0x4007f000
    51f4:	1fff8d30 	.word	0x1fff8d30

000051f8 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    51f8:	b082      	sub	sp, #8
    51fa:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    51fc:	9b01      	ldr	r3, [sp, #4]
    51fe:	681b      	ldr	r3, [r3, #0]
    5200:	4a03      	ldr	r2, [pc, #12]	; (5210 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5202:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5206:	6093      	str	r3, [r2, #8]
}
    5208:	bf00      	nop
    520a:	b002      	add	sp, #8
    520c:	4770      	bx	lr
    520e:	bf00      	nop
    5210:	4007e000 	.word	0x4007e000

00005214 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5214:	b084      	sub	sp, #16
    5216:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5218:	2301      	movs	r3, #1
    521a:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    521c:	4b15      	ldr	r3, [pc, #84]	; (5274 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    521e:	695b      	ldr	r3, [r3, #20]
    5220:	b2db      	uxtb	r3, r3
    5222:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5224:	9b01      	ldr	r3, [sp, #4]
    5226:	2b02      	cmp	r3, #2
    5228:	d012      	beq.n	5250 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    522a:	9b01      	ldr	r3, [sp, #4]
    522c:	2b02      	cmp	r3, #2
    522e:	d818      	bhi.n	5262 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5230:	9b01      	ldr	r3, [sp, #4]
    5232:	2b00      	cmp	r3, #0
    5234:	d003      	beq.n	523e <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5236:	9b01      	ldr	r3, [sp, #4]
    5238:	2b01      	cmp	r3, #1
    523a:	d003      	beq.n	5244 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    523c:	e011      	b.n	5262 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    523e:	2300      	movs	r3, #0
    5240:	9303      	str	r3, [sp, #12]
            break;
    5242:	e013      	b.n	526c <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5244:	9b02      	ldr	r3, [sp, #8]
    5246:	2b01      	cmp	r3, #1
    5248:	d10d      	bne.n	5266 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    524a:	2300      	movs	r3, #0
    524c:	9303      	str	r3, [sp, #12]
            break;
    524e:	e00a      	b.n	5266 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5250:	9b02      	ldr	r3, [sp, #8]
    5252:	2b01      	cmp	r3, #1
    5254:	d002      	beq.n	525c <Power_Ip_SMC_ModeCheckEntry+0x48>
    5256:	9b02      	ldr	r3, [sp, #8]
    5258:	2b10      	cmp	r3, #16
    525a:	d106      	bne.n	526a <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    525c:	2300      	movs	r3, #0
    525e:	9303      	str	r3, [sp, #12]
            break;
    5260:	e003      	b.n	526a <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5262:	bf00      	nop
    5264:	e002      	b.n	526c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5266:	bf00      	nop
    5268:	e000      	b.n	526c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    526a:	bf00      	nop
        }
    }

    return PowerModeCheck;
    526c:	9b03      	ldr	r3, [sp, #12]
}
    526e:	4618      	mov	r0, r3
    5270:	b004      	add	sp, #16
    5272:	4770      	bx	lr
    5274:	4007e000 	.word	0x4007e000

00005278 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5278:	b500      	push	{lr}
    527a:	b08b      	sub	sp, #44	; 0x2c
    527c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    527e:	2300      	movs	r3, #0
    5280:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5282:	2300      	movs	r3, #0
    5284:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5286:	2300      	movs	r3, #0
    5288:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    528c:	9b01      	ldr	r3, [sp, #4]
    528e:	685b      	ldr	r3, [r3, #4]
    5290:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5292:	9b08      	ldr	r3, [sp, #32]
    5294:	2b02      	cmp	r3, #2
    5296:	d076      	beq.n	5386 <Power_Ip_SMC_ModeConfig+0x10e>
    5298:	9b08      	ldr	r3, [sp, #32]
    529a:	2b02      	cmp	r3, #2
    529c:	f200 80ab 	bhi.w	53f6 <Power_Ip_SMC_ModeConfig+0x17e>
    52a0:	9b08      	ldr	r3, [sp, #32]
    52a2:	2b00      	cmp	r3, #0
    52a4:	d003      	beq.n	52ae <Power_Ip_SMC_ModeConfig+0x36>
    52a6:	9b08      	ldr	r3, [sp, #32]
    52a8:	2b01      	cmp	r3, #1
    52aa:	d034      	beq.n	5316 <Power_Ip_SMC_ModeConfig+0x9e>
    52ac:	e0a3      	b.n	53f6 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    52ae:	4b58      	ldr	r3, [pc, #352]	; (5410 <Power_Ip_SMC_ModeConfig+0x198>)
    52b0:	68db      	ldr	r3, [r3, #12]
    52b2:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    52b4:	9b06      	ldr	r3, [sp, #24]
    52b6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    52ba:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    52bc:	4a54      	ldr	r2, [pc, #336]	; (5410 <Power_Ip_SMC_ModeConfig+0x198>)
    52be:	9b06      	ldr	r3, [sp, #24]
    52c0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    52c2:	aa02      	add	r2, sp, #8
    52c4:	a903      	add	r1, sp, #12
    52c6:	a804      	add	r0, sp, #16
    52c8:	f24c 3350 	movw	r3, #50000	; 0xc350
    52cc:	f7ff fece 	bl	506c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    52d0:	9a02      	ldr	r2, [sp, #8]
    52d2:	a903      	add	r1, sp, #12
    52d4:	ab04      	add	r3, sp, #16
    52d6:	4618      	mov	r0, r3
    52d8:	f7ff fee2 	bl	50a0 <Power_Ip_TimeoutExpired>
    52dc:	4603      	mov	r3, r0
    52de:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    52e2:	4b4b      	ldr	r3, [pc, #300]	; (5410 <Power_Ip_SMC_ModeConfig+0x198>)
    52e4:	695b      	ldr	r3, [r3, #20]
    52e6:	f003 0301 	and.w	r3, r3, #1
    52ea:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    52ec:	9b05      	ldr	r3, [sp, #20]
    52ee:	2b01      	cmp	r3, #1
    52f0:	d006      	beq.n	5300 <Power_Ip_SMC_ModeConfig+0x88>
    52f2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    52f6:	f083 0301 	eor.w	r3, r3, #1
    52fa:	b2db      	uxtb	r3, r3
    52fc:	2b00      	cmp	r3, #0
    52fe:	d1e7      	bne.n	52d0 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5300:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5304:	2b00      	cmp	r3, #0
    5306:	d079      	beq.n	53fc <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5308:	2301      	movs	r3, #1
    530a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    530c:	21ff      	movs	r1, #255	; 0xff
    530e:	2000      	movs	r0, #0
    5310:	f7ff fe90 	bl	5034 <Power_Ip_ReportPowerErrors>
            }

            break;
    5314:	e072      	b.n	53fc <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5316:	4b3e      	ldr	r3, [pc, #248]	; (5410 <Power_Ip_SMC_ModeConfig+0x198>)
    5318:	68db      	ldr	r3, [r3, #12]
    531a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    531c:	9b06      	ldr	r3, [sp, #24]
    531e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5322:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5324:	9b06      	ldr	r3, [sp, #24]
    5326:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    532a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    532c:	4a38      	ldr	r2, [pc, #224]	; (5410 <Power_Ip_SMC_ModeConfig+0x198>)
    532e:	9b06      	ldr	r3, [sp, #24]
    5330:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5332:	aa02      	add	r2, sp, #8
    5334:	a903      	add	r1, sp, #12
    5336:	a804      	add	r0, sp, #16
    5338:	f24c 3350 	movw	r3, #50000	; 0xc350
    533c:	f7ff fe96 	bl	506c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5340:	9a02      	ldr	r2, [sp, #8]
    5342:	a903      	add	r1, sp, #12
    5344:	ab04      	add	r3, sp, #16
    5346:	4618      	mov	r0, r3
    5348:	f7ff feaa 	bl	50a0 <Power_Ip_TimeoutExpired>
    534c:	4603      	mov	r3, r0
    534e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5352:	4b2f      	ldr	r3, [pc, #188]	; (5410 <Power_Ip_SMC_ModeConfig+0x198>)
    5354:	695b      	ldr	r3, [r3, #20]
    5356:	f003 0380 	and.w	r3, r3, #128	; 0x80
    535a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    535c:	9b05      	ldr	r3, [sp, #20]
    535e:	2b80      	cmp	r3, #128	; 0x80
    5360:	d006      	beq.n	5370 <Power_Ip_SMC_ModeConfig+0xf8>
    5362:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5366:	f083 0301 	eor.w	r3, r3, #1
    536a:	b2db      	uxtb	r3, r3
    536c:	2b00      	cmp	r3, #0
    536e:	d1e7      	bne.n	5340 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5370:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5374:	2b00      	cmp	r3, #0
    5376:	d043      	beq.n	5400 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5378:	2301      	movs	r3, #1
    537a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    537c:	21ff      	movs	r1, #255	; 0xff
    537e:	2000      	movs	r0, #0
    5380:	f7ff fe58 	bl	5034 <Power_Ip_ReportPowerErrors>
            }

            break;
    5384:	e03c      	b.n	5400 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5386:	4b22      	ldr	r3, [pc, #136]	; (5410 <Power_Ip_SMC_ModeConfig+0x198>)
    5388:	68db      	ldr	r3, [r3, #12]
    538a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    538c:	9b06      	ldr	r3, [sp, #24]
    538e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5392:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5394:	9b06      	ldr	r3, [sp, #24]
    5396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    539a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    539c:	4a1c      	ldr	r2, [pc, #112]	; (5410 <Power_Ip_SMC_ModeConfig+0x198>)
    539e:	9b06      	ldr	r3, [sp, #24]
    53a0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    53a2:	aa02      	add	r2, sp, #8
    53a4:	a903      	add	r1, sp, #12
    53a6:	a804      	add	r0, sp, #16
    53a8:	f24c 3350 	movw	r3, #50000	; 0xc350
    53ac:	f7ff fe5e 	bl	506c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    53b0:	9a02      	ldr	r2, [sp, #8]
    53b2:	a903      	add	r1, sp, #12
    53b4:	ab04      	add	r3, sp, #16
    53b6:	4618      	mov	r0, r3
    53b8:	f7ff fe72 	bl	50a0 <Power_Ip_TimeoutExpired>
    53bc:	4603      	mov	r3, r0
    53be:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    53c2:	4b13      	ldr	r3, [pc, #76]	; (5410 <Power_Ip_SMC_ModeConfig+0x198>)
    53c4:	695b      	ldr	r3, [r3, #20]
    53c6:	f003 0304 	and.w	r3, r3, #4
    53ca:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    53cc:	9b05      	ldr	r3, [sp, #20]
    53ce:	2b04      	cmp	r3, #4
    53d0:	d006      	beq.n	53e0 <Power_Ip_SMC_ModeConfig+0x168>
    53d2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    53d6:	f083 0301 	eor.w	r3, r3, #1
    53da:	b2db      	uxtb	r3, r3
    53dc:	2b00      	cmp	r3, #0
    53de:	d1e7      	bne.n	53b0 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    53e0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    53e4:	2b00      	cmp	r3, #0
    53e6:	d00d      	beq.n	5404 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    53e8:	2301      	movs	r3, #1
    53ea:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    53ec:	21ff      	movs	r1, #255	; 0xff
    53ee:	2000      	movs	r0, #0
    53f0:	f7ff fe20 	bl	5034 <Power_Ip_ReportPowerErrors>
            }

            break;
    53f4:	e006      	b.n	5404 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    53f6:	2301      	movs	r3, #1
    53f8:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    53fa:	e004      	b.n	5406 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    53fc:	bf00      	nop
    53fe:	e002      	b.n	5406 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5400:	bf00      	nop
    5402:	e000      	b.n	5406 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5404:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5406:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5408:	4618      	mov	r0, r3
    540a:	b00b      	add	sp, #44	; 0x2c
    540c:	f85d fb04 	ldr.w	pc, [sp], #4
    5410:	4007e000 	.word	0x4007e000

00005414 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5414:	b500      	push	{lr}
    5416:	b085      	sub	sp, #20
    5418:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    541a:	9b01      	ldr	r3, [sp, #4]
    541c:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    541e:	9803      	ldr	r0, [sp, #12]
    5420:	f000 fbc8 	bl	5bb4 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5424:	4a03      	ldr	r2, [pc, #12]	; (5434 <Port_Init+0x20>)
    5426:	9b03      	ldr	r3, [sp, #12]
    5428:	6013      	str	r3, [r2, #0]
        }
    }
}
    542a:	bf00      	nop
    542c:	b005      	add	sp, #20
    542e:	f85d fb04 	ldr.w	pc, [sp], #4
    5432:	bf00      	nop
    5434:	1fff8d34 	.word	0x1fff8d34

00005438 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5438:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    543a:	4b03      	ldr	r3, [pc, #12]	; (5448 <Port_RefreshPortDirection+0x10>)
    543c:	681b      	ldr	r3, [r3, #0]
    543e:	4618      	mov	r0, r3
    5440:	f000 fc10 	bl	5c64 <Port_Ipw_RefreshPortDirection>
    }
}
    5444:	bf00      	nop
    5446:	bd08      	pop	{r3, pc}
    5448:	1fff8d34 	.word	0x1fff8d34

0000544c <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    544c:	b086      	sub	sp, #24
    544e:	9003      	str	r0, [sp, #12]
    5450:	9102      	str	r1, [sp, #8]
    5452:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5454:	23ff      	movs	r3, #255	; 0xff
    5456:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5458:	9b03      	ldr	r3, [sp, #12]
    545a:	4a39      	ldr	r2, [pc, #228]	; (5540 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    545c:	4293      	cmp	r3, r2
    545e:	d151      	bne.n	5504 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5460:	9b02      	ldr	r3, [sp, #8]
    5462:	2b10      	cmp	r3, #16
    5464:	d867      	bhi.n	5536 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5466:	a201      	add	r2, pc, #4	; (adr r2, 546c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    546c:	000054b1 	.word	0x000054b1
    5470:	000054bf 	.word	0x000054bf
    5474:	00005537 	.word	0x00005537
    5478:	00005537 	.word	0x00005537
    547c:	00005537 	.word	0x00005537
    5480:	00005537 	.word	0x00005537
    5484:	00005537 	.word	0x00005537
    5488:	00005537 	.word	0x00005537
    548c:	00005537 	.word	0x00005537
    5490:	00005537 	.word	0x00005537
    5494:	00005537 	.word	0x00005537
    5498:	00005537 	.word	0x00005537
    549c:	00005537 	.word	0x00005537
    54a0:	000054cd 	.word	0x000054cd
    54a4:	000054db 	.word	0x000054db
    54a8:	000054e9 	.word	0x000054e9
    54ac:	000054f7 	.word	0x000054f7
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    54b0:	2301      	movs	r3, #1
    54b2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    54b4:	9a05      	ldr	r2, [sp, #20]
    54b6:	9b01      	ldr	r3, [sp, #4]
    54b8:	4313      	orrs	r3, r2
    54ba:	9305      	str	r3, [sp, #20]
                break;
    54bc:	e03c      	b.n	5538 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    54be:	2302      	movs	r3, #2
    54c0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    54c2:	9a05      	ldr	r2, [sp, #20]
    54c4:	9b01      	ldr	r3, [sp, #4]
    54c6:	4313      	orrs	r3, r2
    54c8:	9305      	str	r3, [sp, #20]
                break;
    54ca:	e035      	b.n	5538 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    54cc:	2304      	movs	r3, #4
    54ce:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    54d0:	9a05      	ldr	r2, [sp, #20]
    54d2:	9b01      	ldr	r3, [sp, #4]
    54d4:	4313      	orrs	r3, r2
    54d6:	9305      	str	r3, [sp, #20]
                break;
    54d8:	e02e      	b.n	5538 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    54da:	2308      	movs	r3, #8
    54dc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    54de:	9a05      	ldr	r2, [sp, #20]
    54e0:	9b01      	ldr	r3, [sp, #4]
    54e2:	4313      	orrs	r3, r2
    54e4:	9305      	str	r3, [sp, #20]
                break;
    54e6:	e027      	b.n	5538 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    54e8:	230e      	movs	r3, #14
    54ea:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    54ec:	9a05      	ldr	r2, [sp, #20]
    54ee:	9b01      	ldr	r3, [sp, #4]
    54f0:	4013      	ands	r3, r2
    54f2:	9305      	str	r3, [sp, #20]
                break;
    54f4:	e020      	b.n	5538 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    54f6:	230d      	movs	r3, #13
    54f8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    54fa:	9a05      	ldr	r2, [sp, #20]
    54fc:	9b01      	ldr	r3, [sp, #4]
    54fe:	4013      	ands	r3, r2
    5500:	9305      	str	r3, [sp, #20]
                break;
    5502:	e019      	b.n	5538 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5504:	9b03      	ldr	r3, [sp, #12]
    5506:	4a0f      	ldr	r2, [pc, #60]	; (5544 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5508:	4293      	cmp	r3, r2
    550a:	d115      	bne.n	5538 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    550c:	9b02      	ldr	r3, [sp, #8]
    550e:	2b00      	cmp	r3, #0
    5510:	d003      	beq.n	551a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5512:	9b02      	ldr	r3, [sp, #8]
    5514:	2b01      	cmp	r3, #1
    5516:	d007      	beq.n	5528 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5518:	e00e      	b.n	5538 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    551a:	230b      	movs	r3, #11
    551c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    551e:	9a05      	ldr	r2, [sp, #20]
    5520:	9b01      	ldr	r3, [sp, #4]
    5522:	4013      	ands	r3, r2
    5524:	9305      	str	r3, [sp, #20]
                break;
    5526:	e007      	b.n	5538 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5528:	2307      	movs	r3, #7
    552a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    552c:	9a05      	ldr	r2, [sp, #20]
    552e:	9b01      	ldr	r3, [sp, #4]
    5530:	4013      	ands	r3, r2
    5532:	9305      	str	r3, [sp, #20]
                break;
    5534:	e000      	b.n	5538 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5536:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5538:	9b05      	ldr	r3, [sp, #20]
}
    553a:	4618      	mov	r0, r3
    553c:	b006      	add	sp, #24
    553e:	4770      	bx	lr
    5540:	4004a000 	.word	0x4004a000
    5544:	4004b000 	.word	0x4004b000

00005548 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5548:	b500      	push	{lr}
    554a:	b089      	sub	sp, #36	; 0x24
    554c:	9003      	str	r0, [sp, #12]
    554e:	9102      	str	r1, [sp, #8]
    5550:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    5552:	9b01      	ldr	r3, [sp, #4]
    5554:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5556:	9b01      	ldr	r3, [sp, #4]
    5558:	2b08      	cmp	r3, #8
    555a:	d121      	bne.n	55a0 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    555c:	4b13      	ldr	r3, [pc, #76]	; (55ac <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    555e:	685b      	ldr	r3, [r3, #4]
    5560:	f003 030f 	and.w	r3, r3, #15
    5564:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    5566:	9a06      	ldr	r2, [sp, #24]
    5568:	9902      	ldr	r1, [sp, #8]
    556a:	9803      	ldr	r0, [sp, #12]
    556c:	f7ff ff6e 	bl	544c <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    5570:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    5572:	9b05      	ldr	r3, [sp, #20]
    5574:	2bff      	cmp	r3, #255	; 0xff
    5576:	d011      	beq.n	559c <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    5578:	f005 f918 	bl	a7ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    557c:	4b0b      	ldr	r3, [pc, #44]	; (55ac <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    557e:	685b      	ldr	r3, [r3, #4]
    5580:	4a0a      	ldr	r2, [pc, #40]	; (55ac <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5582:	f023 030f 	bic.w	r3, r3, #15
    5586:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    5588:	4b08      	ldr	r3, [pc, #32]	; (55ac <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    558a:	685a      	ldr	r2, [r3, #4]
    558c:	9b05      	ldr	r3, [sp, #20]
    558e:	f003 030f 	and.w	r3, r3, #15
    5592:	4906      	ldr	r1, [pc, #24]	; (55ac <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5594:	4313      	orrs	r3, r2
    5596:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    5598:	f005 f934 	bl	a804 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    559c:	2300      	movs	r3, #0
    559e:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    55a0:	9b07      	ldr	r3, [sp, #28]
}
    55a2:	4618      	mov	r0, r3
    55a4:	b009      	add	sp, #36	; 0x24
    55a6:	f85d fb04 	ldr.w	pc, [sp], #4
    55aa:	bf00      	nop
    55ac:	40048000 	.word	0x40048000

000055b0 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    55b0:	b500      	push	{lr}
    55b2:	b087      	sub	sp, #28
    55b4:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    55b6:	2300      	movs	r3, #0
    55b8:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    55ba:	2300      	movs	r3, #0
    55bc:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    55be:	2300      	movs	r3, #0
    55c0:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    55c2:	9b01      	ldr	r3, [sp, #4]
    55c4:	68db      	ldr	r3, [r3, #12]
    55c6:	2b02      	cmp	r3, #2
    55c8:	d00a      	beq.n	55e0 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    55ca:	9b05      	ldr	r3, [sp, #20]
    55cc:	f043 0302 	orr.w	r3, r3, #2
    55d0:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    55d2:	9b01      	ldr	r3, [sp, #4]
    55d4:	68db      	ldr	r3, [r3, #12]
    55d6:	f003 0301 	and.w	r3, r3, #1
    55da:	9a05      	ldr	r2, [sp, #20]
    55dc:	4313      	orrs	r3, r2
    55de:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    55e0:	9b01      	ldr	r3, [sp, #4]
    55e2:	699b      	ldr	r3, [r3, #24]
    55e4:	019b      	lsls	r3, r3, #6
    55e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    55ea:	9a05      	ldr	r2, [sp, #20]
    55ec:	4313      	orrs	r3, r2
    55ee:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    55f0:	9b01      	ldr	r3, [sp, #4]
    55f2:	6a1b      	ldr	r3, [r3, #32]
    55f4:	03db      	lsls	r3, r3, #15
    55f6:	b29b      	uxth	r3, r3
    55f8:	9a05      	ldr	r2, [sp, #20]
    55fa:	4313      	orrs	r3, r2
    55fc:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    55fe:	9b01      	ldr	r3, [sp, #4]
    5600:	7f1b      	ldrb	r3, [r3, #28]
    5602:	2b00      	cmp	r3, #0
    5604:	d001      	beq.n	560a <Port_Ci_Port_Ip_PinInit+0x5a>
    5606:	2310      	movs	r3, #16
    5608:	e000      	b.n	560c <Port_Ci_Port_Ip_PinInit+0x5c>
    560a:	2300      	movs	r3, #0
    560c:	9a05      	ldr	r2, [sp, #20]
    560e:	4313      	orrs	r3, r2
    5610:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    5612:	9b01      	ldr	r3, [sp, #4]
    5614:	691b      	ldr	r3, [r3, #16]
    5616:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5618:	9b01      	ldr	r3, [sp, #4]
    561a:	6818      	ldr	r0, [r3, #0]
    561c:	9b01      	ldr	r3, [sp, #4]
    561e:	689b      	ldr	r3, [r3, #8]
    5620:	9a04      	ldr	r2, [sp, #16]
    5622:	4619      	mov	r1, r3
    5624:	f7ff ff90 	bl	5548 <Port_Ci_Port_Ip_ConfigureInterleave>
    5628:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    562a:	9b03      	ldr	r3, [sp, #12]
    562c:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    562e:	9b04      	ldr	r3, [sp, #16]
    5630:	021b      	lsls	r3, r3, #8
    5632:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5636:	9a05      	ldr	r2, [sp, #20]
    5638:	4313      	orrs	r3, r2
    563a:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    563c:	f004 ff1c 	bl	a478 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    5640:	9b01      	ldr	r3, [sp, #4]
    5642:	681b      	ldr	r3, [r3, #0]
    5644:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    5648:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    564a:	9b01      	ldr	r3, [sp, #4]
    564c:	689b      	ldr	r3, [r3, #8]
    564e:	2201      	movs	r2, #1
    5650:	fa02 f303 	lsl.w	r3, r2, r3
    5654:	43db      	mvns	r3, r3
    5656:	9a02      	ldr	r2, [sp, #8]
    5658:	4013      	ands	r3, r2
    565a:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    565c:	9b01      	ldr	r3, [sp, #4]
    565e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5662:	2b00      	cmp	r3, #0
    5664:	d001      	beq.n	566a <Port_Ci_Port_Ip_PinInit+0xba>
    5666:	2201      	movs	r2, #1
    5668:	e000      	b.n	566c <Port_Ci_Port_Ip_PinInit+0xbc>
    566a:	2200      	movs	r2, #0
    566c:	9b01      	ldr	r3, [sp, #4]
    566e:	689b      	ldr	r3, [r3, #8]
    5670:	fa02 f303 	lsl.w	r3, r2, r3
    5674:	9a02      	ldr	r2, [sp, #8]
    5676:	4313      	orrs	r3, r2
    5678:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    567a:	9b01      	ldr	r3, [sp, #4]
    567c:	681b      	ldr	r3, [r3, #0]
    567e:	9a02      	ldr	r2, [sp, #8]
    5680:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    5684:	f004 ff24 	bl	a4d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    5688:	9b04      	ldr	r3, [sp, #16]
    568a:	2b01      	cmp	r3, #1
    568c:	d16d      	bne.n	576a <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    568e:	9b01      	ldr	r3, [sp, #4]
    5690:	695b      	ldr	r3, [r3, #20]
    5692:	2b02      	cmp	r3, #2
    5694:	d138      	bne.n	5708 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    5696:	9b01      	ldr	r3, [sp, #4]
    5698:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    569c:	2b01      	cmp	r3, #1
    569e:	d10f      	bne.n	56c0 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    56a0:	f004 ff3c 	bl	a51c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    56a4:	9b01      	ldr	r3, [sp, #4]
    56a6:	685b      	ldr	r3, [r3, #4]
    56a8:	6859      	ldr	r1, [r3, #4]
    56aa:	9b01      	ldr	r3, [sp, #4]
    56ac:	689b      	ldr	r3, [r3, #8]
    56ae:	2201      	movs	r2, #1
    56b0:	409a      	lsls	r2, r3
    56b2:	9b01      	ldr	r3, [sp, #4]
    56b4:	685b      	ldr	r3, [r3, #4]
    56b6:	430a      	orrs	r2, r1
    56b8:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    56ba:	f004 ff5b 	bl	a574 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    56be:	e013      	b.n	56e8 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    56c0:	9b01      	ldr	r3, [sp, #4]
    56c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    56c6:	2b00      	cmp	r3, #0
    56c8:	d10e      	bne.n	56e8 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    56ca:	f004 ff79 	bl	a5c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    56ce:	9b01      	ldr	r3, [sp, #4]
    56d0:	685b      	ldr	r3, [r3, #4]
    56d2:	6899      	ldr	r1, [r3, #8]
    56d4:	9b01      	ldr	r3, [sp, #4]
    56d6:	689b      	ldr	r3, [r3, #8]
    56d8:	2201      	movs	r2, #1
    56da:	409a      	lsls	r2, r3
    56dc:	9b01      	ldr	r3, [sp, #4]
    56de:	685b      	ldr	r3, [r3, #4]
    56e0:	430a      	orrs	r2, r1
    56e2:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    56e4:	f004 ff98 	bl	a618 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    56e8:	f004 ffbc 	bl	a664 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    56ec:	9b01      	ldr	r3, [sp, #4]
    56ee:	685b      	ldr	r3, [r3, #4]
    56f0:	6959      	ldr	r1, [r3, #20]
    56f2:	9b01      	ldr	r3, [sp, #4]
    56f4:	689b      	ldr	r3, [r3, #8]
    56f6:	2201      	movs	r2, #1
    56f8:	409a      	lsls	r2, r3
    56fa:	9b01      	ldr	r3, [sp, #4]
    56fc:	685b      	ldr	r3, [r3, #4]
    56fe:	430a      	orrs	r2, r1
    5700:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5702:	f004 ffdb 	bl	a6bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    5706:	e030      	b.n	576a <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5708:	f004 ffac 	bl	a664 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    570c:	9b01      	ldr	r3, [sp, #4]
    570e:	685b      	ldr	r3, [r3, #4]
    5710:	6959      	ldr	r1, [r3, #20]
    5712:	9b01      	ldr	r3, [sp, #4]
    5714:	689b      	ldr	r3, [r3, #8]
    5716:	2201      	movs	r2, #1
    5718:	fa02 f303 	lsl.w	r3, r2, r3
    571c:	43da      	mvns	r2, r3
    571e:	9b01      	ldr	r3, [sp, #4]
    5720:	685b      	ldr	r3, [r3, #4]
    5722:	400a      	ands	r2, r1
    5724:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5726:	f004 ffc9 	bl	a6bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    572a:	f004 ffed 	bl	a708 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    572e:	9b01      	ldr	r3, [sp, #4]
    5730:	685b      	ldr	r3, [r3, #4]
    5732:	6999      	ldr	r1, [r3, #24]
    5734:	9b01      	ldr	r3, [sp, #4]
    5736:	689b      	ldr	r3, [r3, #8]
    5738:	2201      	movs	r2, #1
    573a:	fa02 f303 	lsl.w	r3, r2, r3
    573e:	43da      	mvns	r2, r3
    5740:	9b01      	ldr	r3, [sp, #4]
    5742:	685b      	ldr	r3, [r3, #4]
    5744:	400a      	ands	r2, r1
    5746:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    5748:	9b01      	ldr	r3, [sp, #4]
    574a:	695b      	ldr	r3, [r3, #20]
    574c:	2b03      	cmp	r3, #3
    574e:	d10a      	bne.n	5766 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    5750:	9b01      	ldr	r3, [sp, #4]
    5752:	685b      	ldr	r3, [r3, #4]
    5754:	6999      	ldr	r1, [r3, #24]
    5756:	9b01      	ldr	r3, [sp, #4]
    5758:	689b      	ldr	r3, [r3, #8]
    575a:	2201      	movs	r2, #1
    575c:	409a      	lsls	r2, r3
    575e:	9b01      	ldr	r3, [sp, #4]
    5760:	685b      	ldr	r3, [r3, #4]
    5762:	430a      	orrs	r2, r1
    5764:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    5766:	f004 fffb 	bl	a760 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    576a:	9b01      	ldr	r3, [sp, #4]
    576c:	681b      	ldr	r3, [r3, #0]
    576e:	9a01      	ldr	r2, [sp, #4]
    5770:	6892      	ldr	r2, [r2, #8]
    5772:	9905      	ldr	r1, [sp, #20]
    5774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5778:	bf00      	nop
    577a:	b007      	add	sp, #28
    577c:	f85d fb04 	ldr.w	pc, [sp], #4

00005780 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    5780:	b500      	push	{lr}
    5782:	b085      	sub	sp, #20
    5784:	9001      	str	r0, [sp, #4]
    5786:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    5788:	2300      	movs	r3, #0
    578a:	9303      	str	r3, [sp, #12]
    578c:	e00d      	b.n	57aa <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    578e:	9a03      	ldr	r2, [sp, #12]
    5790:	4613      	mov	r3, r2
    5792:	009b      	lsls	r3, r3, #2
    5794:	4413      	add	r3, r2
    5796:	00db      	lsls	r3, r3, #3
    5798:	461a      	mov	r2, r3
    579a:	9b00      	ldr	r3, [sp, #0]
    579c:	4413      	add	r3, r2
    579e:	4618      	mov	r0, r3
    57a0:	f7ff ff06 	bl	55b0 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    57a4:	9b03      	ldr	r3, [sp, #12]
    57a6:	3301      	adds	r3, #1
    57a8:	9303      	str	r3, [sp, #12]
    57aa:	9a03      	ldr	r2, [sp, #12]
    57ac:	9b01      	ldr	r3, [sp, #4]
    57ae:	429a      	cmp	r2, r3
    57b0:	d3ed      	bcc.n	578e <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    57b2:	2300      	movs	r3, #0
}
    57b4:	4618      	mov	r0, r3
    57b6:	b005      	add	sp, #20
    57b8:	f85d fb04 	ldr.w	pc, [sp], #4

000057bc <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    57bc:	b500      	push	{lr}
    57be:	b087      	sub	sp, #28
    57c0:	9003      	str	r0, [sp, #12]
    57c2:	9102      	str	r1, [sp, #8]
    57c4:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    57c6:	9a01      	ldr	r2, [sp, #4]
    57c8:	9902      	ldr	r1, [sp, #8]
    57ca:	9803      	ldr	r0, [sp, #12]
    57cc:	f7ff febc 	bl	5548 <Port_Ci_Port_Ip_ConfigureInterleave>
    57d0:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    57d2:	f005 f83d 	bl	a850 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    57d6:	9b03      	ldr	r3, [sp, #12]
    57d8:	9a02      	ldr	r2, [sp, #8]
    57da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    57de:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    57e0:	9b04      	ldr	r3, [sp, #16]
    57e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    57e6:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    57e8:	9b05      	ldr	r3, [sp, #20]
    57ea:	021b      	lsls	r3, r3, #8
    57ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    57f0:	9a04      	ldr	r2, [sp, #16]
    57f2:	4313      	orrs	r3, r2
    57f4:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    57f6:	9b03      	ldr	r3, [sp, #12]
    57f8:	9a02      	ldr	r2, [sp, #8]
    57fa:	9904      	ldr	r1, [sp, #16]
    57fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    5800:	f005 f852 	bl	a8a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    5804:	bf00      	nop
    5806:	b007      	add	sp, #28
    5808:	f85d fb04 	ldr.w	pc, [sp], #4

0000580c <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    580c:	b500      	push	{lr}
    580e:	b083      	sub	sp, #12
    5810:	9001      	str	r0, [sp, #4]
    5812:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    5814:	f005 f86e 	bl	a8f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    5818:	9b01      	ldr	r3, [sp, #4]
    581a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    581e:	2101      	movs	r1, #1
    5820:	9b00      	ldr	r3, [sp, #0]
    5822:	fa01 f303 	lsl.w	r3, r1, r3
    5826:	431a      	orrs	r2, r3
    5828:	9b01      	ldr	r3, [sp, #4]
    582a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    582e:	f005 f88d 	bl	a94c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    5832:	bf00      	nop
    5834:	b003      	add	sp, #12
    5836:	f85d fb04 	ldr.w	pc, [sp], #4

0000583a <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    583a:	b500      	push	{lr}
    583c:	b083      	sub	sp, #12
    583e:	9001      	str	r0, [sp, #4]
    5840:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    5842:	f005 f8a9 	bl	a998 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    5846:	9b01      	ldr	r3, [sp, #4]
    5848:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    584c:	2101      	movs	r1, #1
    584e:	9b00      	ldr	r3, [sp, #0]
    5850:	fa01 f303 	lsl.w	r3, r1, r3
    5854:	43db      	mvns	r3, r3
    5856:	401a      	ands	r2, r3
    5858:	9b01      	ldr	r3, [sp, #4]
    585a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    585e:	f005 f8c7 	bl	a9f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    5862:	bf00      	nop
    5864:	b003      	add	sp, #12
    5866:	f85d fb04 	ldr.w	pc, [sp], #4

0000586a <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    586a:	b082      	sub	sp, #8
    586c:	9001      	str	r0, [sp, #4]
    586e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    5870:	9b00      	ldr	r3, [sp, #0]
    5872:	785b      	ldrb	r3, [r3, #1]
    5874:	f003 0201 	and.w	r2, r3, #1
    5878:	9b01      	ldr	r3, [sp, #4]
    587a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    587e:	9b00      	ldr	r3, [sp, #0]
    5880:	789b      	ldrb	r3, [r3, #2]
    5882:	f003 021f 	and.w	r2, r3, #31
    5886:	9b01      	ldr	r3, [sp, #4]
    5888:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    588c:	bf00      	nop
    588e:	b002      	add	sp, #8
    5890:	4770      	bx	lr

00005892 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    5892:	b086      	sub	sp, #24
    5894:	9003      	str	r0, [sp, #12]
    5896:	9301      	str	r3, [sp, #4]
    5898:	460b      	mov	r3, r1
    589a:	f8ad 300a 	strh.w	r3, [sp, #10]
    589e:	4613      	mov	r3, r2
    58a0:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    58a4:	2300      	movs	r3, #0
    58a6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    58aa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58ae:	f043 0301 	orr.w	r3, r3, #1
    58b2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    58b6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58ba:	f043 0302 	orr.w	r3, r3, #2
    58be:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    58c2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58c6:	f043 0310 	orr.w	r3, r3, #16
    58ca:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    58ce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    58d6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    58da:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    58e2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    58e6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    58ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    58f2:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    58f6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    58fa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    58fe:	4013      	ands	r3, r2
    5900:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    5904:	9b01      	ldr	r3, [sp, #4]
    5906:	2b00      	cmp	r3, #0
    5908:	d003      	beq.n	5912 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    590a:	9b01      	ldr	r3, [sp, #4]
    590c:	2b01      	cmp	r3, #1
    590e:	d00a      	beq.n	5926 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    5910:	e013      	b.n	593a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    5912:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5916:	041a      	lsls	r2, r3, #16
    5918:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    591c:	431a      	orrs	r2, r3
    591e:	9b03      	ldr	r3, [sp, #12]
    5920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    5924:	e009      	b.n	593a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    5926:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    592a:	041a      	lsls	r2, r3, #16
    592c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5930:	431a      	orrs	r2, r3
    5932:	9b03      	ldr	r3, [sp, #12]
    5934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    5938:	bf00      	nop
    }
}
    593a:	bf00      	nop
    593c:	b006      	add	sp, #24
    593e:	4770      	bx	lr

00005940 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    5940:	b500      	push	{lr}
    5942:	b087      	sub	sp, #28
    5944:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    5946:	9b01      	ldr	r3, [sp, #4]
    5948:	885b      	ldrh	r3, [r3, #2]
    594a:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    594e:	9b01      	ldr	r3, [sp, #4]
    5950:	689b      	ldr	r3, [r3, #8]
    5952:	7a1b      	ldrb	r3, [r3, #8]
    5954:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    5958:	9b01      	ldr	r3, [sp, #4]
    595a:	689b      	ldr	r3, [r3, #8]
    595c:	681b      	ldr	r3, [r3, #0]
    595e:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    5960:	9b01      	ldr	r3, [sp, #4]
    5962:	689b      	ldr	r3, [r3, #8]
    5964:	685b      	ldr	r3, [r3, #4]
    5966:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5968:	2300      	movs	r3, #0
    596a:	f8ad 3016 	strh.w	r3, [sp, #22]
    596e:	e111      	b.n	5b94 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    5970:	9b02      	ldr	r3, [sp, #8]
    5972:	2b02      	cmp	r3, #2
    5974:	d169      	bne.n	5a4a <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    5976:	f89d 3013 	ldrb.w	r3, [sp, #19]
    597a:	2b01      	cmp	r3, #1
    597c:	d11a      	bne.n	59b4 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    597e:	9b01      	ldr	r3, [sp, #4]
    5980:	685a      	ldr	r2, [r3, #4]
    5982:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5986:	005b      	lsls	r3, r3, #1
    5988:	4413      	add	r3, r2
    598a:	881b      	ldrh	r3, [r3, #0]
    598c:	f003 021f 	and.w	r2, r3, #31
    5990:	9b01      	ldr	r3, [sp, #4]
    5992:	6859      	ldr	r1, [r3, #4]
    5994:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5998:	005b      	lsls	r3, r3, #1
    599a:	440b      	add	r3, r1
    599c:	881b      	ldrh	r3, [r3, #0]
    599e:	095b      	lsrs	r3, r3, #5
    59a0:	b29b      	uxth	r3, r3
    59a2:	4619      	mov	r1, r3
    59a4:	4b81      	ldr	r3, [pc, #516]	; (5bac <Port_Ipw_Init_UnusedPins+0x26c>)
    59a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    59aa:	2101      	movs	r1, #1
    59ac:	fa01 f202 	lsl.w	r2, r1, r2
    59b0:	605a      	str	r2, [r3, #4]
    59b2:	e01d      	b.n	59f0 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    59b4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    59b8:	2b00      	cmp	r3, #0
    59ba:	d119      	bne.n	59f0 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    59bc:	9b01      	ldr	r3, [sp, #4]
    59be:	685a      	ldr	r2, [r3, #4]
    59c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59c4:	005b      	lsls	r3, r3, #1
    59c6:	4413      	add	r3, r2
    59c8:	881b      	ldrh	r3, [r3, #0]
    59ca:	f003 021f 	and.w	r2, r3, #31
    59ce:	9b01      	ldr	r3, [sp, #4]
    59d0:	6859      	ldr	r1, [r3, #4]
    59d2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59d6:	005b      	lsls	r3, r3, #1
    59d8:	440b      	add	r3, r1
    59da:	881b      	ldrh	r3, [r3, #0]
    59dc:	095b      	lsrs	r3, r3, #5
    59de:	b29b      	uxth	r3, r3
    59e0:	4619      	mov	r1, r3
    59e2:	4b72      	ldr	r3, [pc, #456]	; (5bac <Port_Ipw_Init_UnusedPins+0x26c>)
    59e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    59e8:	2101      	movs	r1, #1
    59ea:	fa01 f202 	lsl.w	r2, r1, r2
    59ee:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    59f0:	f005 f824 	bl	aa3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    59f4:	9b01      	ldr	r3, [sp, #4]
    59f6:	685a      	ldr	r2, [r3, #4]
    59f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59fc:	005b      	lsls	r3, r3, #1
    59fe:	4413      	add	r3, r2
    5a00:	881b      	ldrh	r3, [r3, #0]
    5a02:	095b      	lsrs	r3, r3, #5
    5a04:	b29b      	uxth	r3, r3
    5a06:	461a      	mov	r2, r3
    5a08:	4b68      	ldr	r3, [pc, #416]	; (5bac <Port_Ipw_Init_UnusedPins+0x26c>)
    5a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5a0e:	6959      	ldr	r1, [r3, #20]
    5a10:	9b01      	ldr	r3, [sp, #4]
    5a12:	685a      	ldr	r2, [r3, #4]
    5a14:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a18:	005b      	lsls	r3, r3, #1
    5a1a:	4413      	add	r3, r2
    5a1c:	881b      	ldrh	r3, [r3, #0]
    5a1e:	f003 031f 	and.w	r3, r3, #31
    5a22:	2201      	movs	r2, #1
    5a24:	409a      	lsls	r2, r3
    5a26:	9b01      	ldr	r3, [sp, #4]
    5a28:	6858      	ldr	r0, [r3, #4]
    5a2a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a2e:	005b      	lsls	r3, r3, #1
    5a30:	4403      	add	r3, r0
    5a32:	881b      	ldrh	r3, [r3, #0]
    5a34:	095b      	lsrs	r3, r3, #5
    5a36:	b29b      	uxth	r3, r3
    5a38:	4618      	mov	r0, r3
    5a3a:	4b5c      	ldr	r3, [pc, #368]	; (5bac <Port_Ipw_Init_UnusedPins+0x26c>)
    5a3c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5a40:	430a      	orrs	r2, r1
    5a42:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5a44:	f005 f826 	bl	aa94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    5a48:	e086      	b.n	5b58 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5a4a:	f004 fff7 	bl	aa3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    5a4e:	9b01      	ldr	r3, [sp, #4]
    5a50:	685a      	ldr	r2, [r3, #4]
    5a52:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a56:	005b      	lsls	r3, r3, #1
    5a58:	4413      	add	r3, r2
    5a5a:	881b      	ldrh	r3, [r3, #0]
    5a5c:	095b      	lsrs	r3, r3, #5
    5a5e:	b29b      	uxth	r3, r3
    5a60:	461a      	mov	r2, r3
    5a62:	4b52      	ldr	r3, [pc, #328]	; (5bac <Port_Ipw_Init_UnusedPins+0x26c>)
    5a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5a68:	6959      	ldr	r1, [r3, #20]
    5a6a:	9b01      	ldr	r3, [sp, #4]
    5a6c:	685a      	ldr	r2, [r3, #4]
    5a6e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a72:	005b      	lsls	r3, r3, #1
    5a74:	4413      	add	r3, r2
    5a76:	881b      	ldrh	r3, [r3, #0]
    5a78:	f003 031f 	and.w	r3, r3, #31
    5a7c:	2201      	movs	r2, #1
    5a7e:	fa02 f303 	lsl.w	r3, r2, r3
    5a82:	43da      	mvns	r2, r3
    5a84:	9b01      	ldr	r3, [sp, #4]
    5a86:	6858      	ldr	r0, [r3, #4]
    5a88:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a8c:	005b      	lsls	r3, r3, #1
    5a8e:	4403      	add	r3, r0
    5a90:	881b      	ldrh	r3, [r3, #0]
    5a92:	095b      	lsrs	r3, r3, #5
    5a94:	b29b      	uxth	r3, r3
    5a96:	4618      	mov	r0, r3
    5a98:	4b44      	ldr	r3, [pc, #272]	; (5bac <Port_Ipw_Init_UnusedPins+0x26c>)
    5a9a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5a9e:	400a      	ands	r2, r1
    5aa0:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5aa2:	f004 fff7 	bl	aa94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    5aa6:	f005 f81b 	bl	aae0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5aaa:	9b01      	ldr	r3, [sp, #4]
    5aac:	685a      	ldr	r2, [r3, #4]
    5aae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ab2:	005b      	lsls	r3, r3, #1
    5ab4:	4413      	add	r3, r2
    5ab6:	881b      	ldrh	r3, [r3, #0]
    5ab8:	095b      	lsrs	r3, r3, #5
    5aba:	b29b      	uxth	r3, r3
    5abc:	461a      	mov	r2, r3
    5abe:	4b3b      	ldr	r3, [pc, #236]	; (5bac <Port_Ipw_Init_UnusedPins+0x26c>)
    5ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5ac4:	6999      	ldr	r1, [r3, #24]
    5ac6:	9b01      	ldr	r3, [sp, #4]
    5ac8:	685a      	ldr	r2, [r3, #4]
    5aca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ace:	005b      	lsls	r3, r3, #1
    5ad0:	4413      	add	r3, r2
    5ad2:	881b      	ldrh	r3, [r3, #0]
    5ad4:	f003 031f 	and.w	r3, r3, #31
    5ad8:	2201      	movs	r2, #1
    5ada:	fa02 f303 	lsl.w	r3, r2, r3
    5ade:	43da      	mvns	r2, r3
    5ae0:	9b01      	ldr	r3, [sp, #4]
    5ae2:	6858      	ldr	r0, [r3, #4]
    5ae4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ae8:	005b      	lsls	r3, r3, #1
    5aea:	4403      	add	r3, r0
    5aec:	881b      	ldrh	r3, [r3, #0]
    5aee:	095b      	lsrs	r3, r3, #5
    5af0:	b29b      	uxth	r3, r3
    5af2:	4618      	mov	r0, r3
    5af4:	4b2d      	ldr	r3, [pc, #180]	; (5bac <Port_Ipw_Init_UnusedPins+0x26c>)
    5af6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5afa:	400a      	ands	r2, r1
    5afc:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    5afe:	9b02      	ldr	r3, [sp, #8]
    5b00:	2b03      	cmp	r3, #3
    5b02:	d127      	bne.n	5b54 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5b04:	9b01      	ldr	r3, [sp, #4]
    5b06:	685a      	ldr	r2, [r3, #4]
    5b08:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b0c:	005b      	lsls	r3, r3, #1
    5b0e:	4413      	add	r3, r2
    5b10:	881b      	ldrh	r3, [r3, #0]
    5b12:	095b      	lsrs	r3, r3, #5
    5b14:	b29b      	uxth	r3, r3
    5b16:	461a      	mov	r2, r3
    5b18:	4b24      	ldr	r3, [pc, #144]	; (5bac <Port_Ipw_Init_UnusedPins+0x26c>)
    5b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b1e:	6999      	ldr	r1, [r3, #24]
    5b20:	9b01      	ldr	r3, [sp, #4]
    5b22:	685a      	ldr	r2, [r3, #4]
    5b24:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b28:	005b      	lsls	r3, r3, #1
    5b2a:	4413      	add	r3, r2
    5b2c:	881b      	ldrh	r3, [r3, #0]
    5b2e:	f003 031f 	and.w	r3, r3, #31
    5b32:	2201      	movs	r2, #1
    5b34:	409a      	lsls	r2, r3
    5b36:	9b01      	ldr	r3, [sp, #4]
    5b38:	6858      	ldr	r0, [r3, #4]
    5b3a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b3e:	005b      	lsls	r3, r3, #1
    5b40:	4403      	add	r3, r0
    5b42:	881b      	ldrh	r3, [r3, #0]
    5b44:	095b      	lsrs	r3, r3, #5
    5b46:	b29b      	uxth	r3, r3
    5b48:	4618      	mov	r0, r3
    5b4a:	4b18      	ldr	r3, [pc, #96]	; (5bac <Port_Ipw_Init_UnusedPins+0x26c>)
    5b4c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5b50:	430a      	orrs	r2, r1
    5b52:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    5b54:	f004 fff0 	bl	ab38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    5b58:	9b01      	ldr	r3, [sp, #4]
    5b5a:	685a      	ldr	r2, [r3, #4]
    5b5c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b60:	005b      	lsls	r3, r3, #1
    5b62:	4413      	add	r3, r2
    5b64:	881b      	ldrh	r3, [r3, #0]
    5b66:	095b      	lsrs	r3, r3, #5
    5b68:	b29b      	uxth	r3, r3
    5b6a:	461a      	mov	r2, r3
    5b6c:	4b10      	ldr	r3, [pc, #64]	; (5bb0 <Port_Ipw_Init_UnusedPins+0x270>)
    5b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b72:	9a01      	ldr	r2, [sp, #4]
    5b74:	6851      	ldr	r1, [r2, #4]
    5b76:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5b7a:	0052      	lsls	r2, r2, #1
    5b7c:	440a      	add	r2, r1
    5b7e:	8812      	ldrh	r2, [r2, #0]
    5b80:	f002 021f 	and.w	r2, r2, #31
    5b84:	9903      	ldr	r1, [sp, #12]
    5b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5b8a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b8e:	3301      	adds	r3, #1
    5b90:	f8ad 3016 	strh.w	r3, [sp, #22]
    5b94:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5b98:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5b9c:	429a      	cmp	r2, r3
    5b9e:	f4ff aee7 	bcc.w	5970 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    5ba2:	bf00      	nop
    5ba4:	bf00      	nop
    5ba6:	b007      	add	sp, #28
    5ba8:	f85d fb04 	ldr.w	pc, [sp], #4
    5bac:	0000bf68 	.word	0x0000bf68
    5bb0:	0000bf54 	.word	0x0000bf54

00005bb4 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    5bb4:	b500      	push	{lr}
    5bb6:	b085      	sub	sp, #20
    5bb8:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    5bba:	9b01      	ldr	r3, [sp, #4]
    5bbc:	7c1b      	ldrb	r3, [r3, #16]
    5bbe:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5bc2:	2300      	movs	r3, #0
    5bc4:	f8ad 300e 	strh.w	r3, [sp, #14]
    5bc8:	e035      	b.n	5c36 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    5bca:	9b01      	ldr	r3, [sp, #4]
    5bcc:	695a      	ldr	r2, [r3, #20]
    5bce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5bd2:	00db      	lsls	r3, r3, #3
    5bd4:	4413      	add	r3, r2
    5bd6:	781b      	ldrb	r3, [r3, #0]
    5bd8:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    5bdc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5be0:	4a1f      	ldr	r2, [pc, #124]	; (5c60 <Port_Ipw_Init+0xac>)
    5be2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5be6:	9b01      	ldr	r3, [sp, #4]
    5be8:	695a      	ldr	r2, [r3, #20]
    5bea:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5bee:	00db      	lsls	r3, r3, #3
    5bf0:	4413      	add	r3, r2
    5bf2:	4619      	mov	r1, r3
    5bf4:	f7ff fe39 	bl	586a <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    5bf8:	f005 f90c 	bl	ae14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    5bfc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5c00:	4a17      	ldr	r2, [pc, #92]	; (5c60 <Port_Ipw_Init+0xac>)
    5c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c06:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    5c0a:	9b01      	ldr	r3, [sp, #4]
    5c0c:	695a      	ldr	r2, [r3, #20]
    5c0e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5c12:	00db      	lsls	r3, r3, #3
    5c14:	4413      	add	r3, r2
    5c16:	685a      	ldr	r2, [r3, #4]
    5c18:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5c1c:	4810      	ldr	r0, [pc, #64]	; (5c60 <Port_Ipw_Init+0xac>)
    5c1e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5c22:	430a      	orrs	r2, r1
    5c24:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    5c28:	f005 f920 	bl	ae6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5c2c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5c30:	3301      	adds	r3, #1
    5c32:	f8ad 300e 	strh.w	r3, [sp, #14]
    5c36:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5c3a:	b29b      	uxth	r3, r3
    5c3c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5c40:	429a      	cmp	r2, r3
    5c42:	d3c2      	bcc.n	5bca <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    5c44:	9b01      	ldr	r3, [sp, #4]
    5c46:	6a1b      	ldr	r3, [r3, #32]
    5c48:	4619      	mov	r1, r3
    5c4a:	2002      	movs	r0, #2
    5c4c:	f7ff fd98 	bl	5780 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    5c50:	9801      	ldr	r0, [sp, #4]
    5c52:	f7ff fe75 	bl	5940 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    5c56:	bf00      	nop
    5c58:	b005      	add	sp, #20
    5c5a:	f85d fb04 	ldr.w	pc, [sp], #4
    5c5e:	bf00      	nop
    5c60:	0000bf54 	.word	0x0000bf54

00005c64 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    5c64:	b500      	push	{lr}
    5c66:	b085      	sub	sp, #20
    5c68:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    5c6a:	9b01      	ldr	r3, [sp, #4]
    5c6c:	881b      	ldrh	r3, [r3, #0]
    5c6e:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5c72:	2300      	movs	r3, #0
    5c74:	f8ad 300e 	strh.w	r3, [sp, #14]
    5c78:	e0d2      	b.n	5e20 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    5c7a:	9b01      	ldr	r3, [sp, #4]
    5c7c:	68d9      	ldr	r1, [r3, #12]
    5c7e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5c82:	4613      	mov	r3, r2
    5c84:	009b      	lsls	r3, r3, #2
    5c86:	4413      	add	r3, r2
    5c88:	009b      	lsls	r3, r3, #2
    5c8a:	440b      	add	r3, r1
    5c8c:	7c5b      	ldrb	r3, [r3, #17]
    5c8e:	f083 0301 	eor.w	r3, r3, #1
    5c92:	b2db      	uxtb	r3, r3
    5c94:	2b00      	cmp	r3, #0
    5c96:	f000 80be 	beq.w	5e16 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    5c9a:	9b01      	ldr	r3, [sp, #4]
    5c9c:	68d9      	ldr	r1, [r3, #12]
    5c9e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5ca2:	4613      	mov	r3, r2
    5ca4:	009b      	lsls	r3, r3, #2
    5ca6:	4413      	add	r3, r2
    5ca8:	009b      	lsls	r3, r3, #2
    5caa:	440b      	add	r3, r1
    5cac:	7c1b      	ldrb	r3, [r3, #16]
    5cae:	2b00      	cmp	r3, #0
    5cb0:	f000 80b1 	beq.w	5e16 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    5cb4:	9b01      	ldr	r3, [sp, #4]
    5cb6:	68d9      	ldr	r1, [r3, #12]
    5cb8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5cbc:	4613      	mov	r3, r2
    5cbe:	009b      	lsls	r3, r3, #2
    5cc0:	4413      	add	r3, r2
    5cc2:	009b      	lsls	r3, r3, #2
    5cc4:	440b      	add	r3, r1
    5cc6:	881b      	ldrh	r3, [r3, #0]
    5cc8:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5ccc:	9b01      	ldr	r3, [sp, #4]
    5cce:	68d9      	ldr	r1, [r3, #12]
    5cd0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5cd4:	4613      	mov	r3, r2
    5cd6:	009b      	lsls	r3, r3, #2
    5cd8:	4413      	add	r3, r2
    5cda:	009b      	lsls	r3, r3, #2
    5cdc:	440b      	add	r3, r1
    5cde:	68db      	ldr	r3, [r3, #12]
    5ce0:	2b02      	cmp	r3, #2
    5ce2:	d11d      	bne.n	5d20 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5ce4:	f005 f9de 	bl	b0a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5ce8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5cec:	095b      	lsrs	r3, r3, #5
    5cee:	b29b      	uxth	r3, r3
    5cf0:	461a      	mov	r2, r3
    5cf2:	4b51      	ldr	r3, [pc, #324]	; (5e38 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5cf8:	6959      	ldr	r1, [r3, #20]
    5cfa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5cfe:	f003 031f 	and.w	r3, r3, #31
    5d02:	2201      	movs	r2, #1
    5d04:	409a      	lsls	r2, r3
    5d06:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d0a:	095b      	lsrs	r3, r3, #5
    5d0c:	b29b      	uxth	r3, r3
    5d0e:	4618      	mov	r0, r3
    5d10:	4b49      	ldr	r3, [pc, #292]	; (5e38 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d12:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5d16:	430a      	orrs	r2, r1
    5d18:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5d1a:	f005 f9ef 	bl	b0fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    5d1e:	e07a      	b.n	5e16 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    5d20:	9b01      	ldr	r3, [sp, #4]
    5d22:	68d9      	ldr	r1, [r3, #12]
    5d24:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d28:	4613      	mov	r3, r2
    5d2a:	009b      	lsls	r3, r3, #2
    5d2c:	4413      	add	r3, r2
    5d2e:	009b      	lsls	r3, r3, #2
    5d30:	440b      	add	r3, r1
    5d32:	68db      	ldr	r3, [r3, #12]
    5d34:	2b01      	cmp	r3, #1
    5d36:	d00b      	beq.n	5d50 <Port_Ipw_RefreshPortDirection+0xec>
    5d38:	9b01      	ldr	r3, [sp, #4]
    5d3a:	68d9      	ldr	r1, [r3, #12]
    5d3c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d40:	4613      	mov	r3, r2
    5d42:	009b      	lsls	r3, r3, #2
    5d44:	4413      	add	r3, r2
    5d46:	009b      	lsls	r3, r3, #2
    5d48:	440b      	add	r3, r1
    5d4a:	68db      	ldr	r3, [r3, #12]
    5d4c:	2b03      	cmp	r3, #3
    5d4e:	d162      	bne.n	5e16 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5d50:	f005 f9a8 	bl	b0a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5d54:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d58:	095b      	lsrs	r3, r3, #5
    5d5a:	b29b      	uxth	r3, r3
    5d5c:	461a      	mov	r2, r3
    5d5e:	4b36      	ldr	r3, [pc, #216]	; (5e38 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5d64:	6959      	ldr	r1, [r3, #20]
    5d66:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d6a:	f003 031f 	and.w	r3, r3, #31
    5d6e:	2201      	movs	r2, #1
    5d70:	fa02 f303 	lsl.w	r3, r2, r3
    5d74:	43da      	mvns	r2, r3
    5d76:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d7a:	095b      	lsrs	r3, r3, #5
    5d7c:	b29b      	uxth	r3, r3
    5d7e:	4618      	mov	r0, r3
    5d80:	4b2d      	ldr	r3, [pc, #180]	; (5e38 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d82:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5d86:	400a      	ands	r2, r1
    5d88:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5d8a:	f005 f9b7 	bl	b0fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    5d8e:	f005 f9db 	bl	b148 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5d92:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d96:	095b      	lsrs	r3, r3, #5
    5d98:	b29b      	uxth	r3, r3
    5d9a:	461a      	mov	r2, r3
    5d9c:	4b26      	ldr	r3, [pc, #152]	; (5e38 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5da2:	6999      	ldr	r1, [r3, #24]
    5da4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5da8:	f003 031f 	and.w	r3, r3, #31
    5dac:	2201      	movs	r2, #1
    5dae:	fa02 f303 	lsl.w	r3, r2, r3
    5db2:	43da      	mvns	r2, r3
    5db4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5db8:	095b      	lsrs	r3, r3, #5
    5dba:	b29b      	uxth	r3, r3
    5dbc:	4618      	mov	r0, r3
    5dbe:	4b1e      	ldr	r3, [pc, #120]	; (5e38 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5dc0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5dc4:	400a      	ands	r2, r1
    5dc6:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5dc8:	9b01      	ldr	r3, [sp, #4]
    5dca:	68d9      	ldr	r1, [r3, #12]
    5dcc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5dd0:	4613      	mov	r3, r2
    5dd2:	009b      	lsls	r3, r3, #2
    5dd4:	4413      	add	r3, r2
    5dd6:	009b      	lsls	r3, r3, #2
    5dd8:	440b      	add	r3, r1
    5dda:	68db      	ldr	r3, [r3, #12]
    5ddc:	2b03      	cmp	r3, #3
    5dde:	d118      	bne.n	5e12 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5de0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5de4:	095b      	lsrs	r3, r3, #5
    5de6:	b29b      	uxth	r3, r3
    5de8:	461a      	mov	r2, r3
    5dea:	4b13      	ldr	r3, [pc, #76]	; (5e38 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5df0:	6999      	ldr	r1, [r3, #24]
    5df2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5df6:	f003 031f 	and.w	r3, r3, #31
    5dfa:	2201      	movs	r2, #1
    5dfc:	409a      	lsls	r2, r3
    5dfe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e02:	095b      	lsrs	r3, r3, #5
    5e04:	b29b      	uxth	r3, r3
    5e06:	4618      	mov	r0, r3
    5e08:	4b0b      	ldr	r3, [pc, #44]	; (5e38 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5e0a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5e0e:	430a      	orrs	r2, r1
    5e10:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    5e12:	f005 f9c5 	bl	b1a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5e16:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5e1a:	3301      	adds	r3, #1
    5e1c:	f8ad 300e 	strh.w	r3, [sp, #14]
    5e20:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5e24:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5e28:	429a      	cmp	r2, r3
    5e2a:	f4ff af26 	bcc.w	5c7a <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    5e2e:	bf00      	nop
    5e30:	bf00      	nop
    5e32:	b005      	add	sp, #20
    5e34:	f85d fb04 	ldr.w	pc, [sp], #4
    5e38:	0000bf68 	.word	0x0000bf68

00005e3c <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    5e3c:	b500      	push	{lr}
    5e3e:	b085      	sub	sp, #20
    5e40:	4603      	mov	r3, r0
    5e42:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5e46:	2300      	movs	r3, #0
    5e48:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    5e4c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5e50:	4618      	mov	r0, r3
    5e52:	f000 f871 	bl	5f38 <Dio_Ipw_ReadChannel>
    5e56:	4603      	mov	r3, r0
    5e58:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    5e5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5e60:	4618      	mov	r0, r3
    5e62:	b005      	add	sp, #20
    5e64:	f85d fb04 	ldr.w	pc, [sp], #4

00005e68 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    5e68:	b500      	push	{lr}
    5e6a:	b083      	sub	sp, #12
    5e6c:	4603      	mov	r3, r0
    5e6e:	460a      	mov	r2, r1
    5e70:	f8ad 3006 	strh.w	r3, [sp, #6]
    5e74:	4613      	mov	r3, r2
    5e76:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    5e7a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    5e7e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5e82:	4611      	mov	r1, r2
    5e84:	4618      	mov	r0, r3
    5e86:	f000 f87d 	bl	5f84 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    5e8a:	bf00      	nop
    5e8c:	b003      	add	sp, #12
    5e8e:	f85d fb04 	ldr.w	pc, [sp], #4

00005e92 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    5e92:	b500      	push	{lr}
    5e94:	b085      	sub	sp, #20
    5e96:	4603      	mov	r3, r0
    5e98:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5e9c:	2300      	movs	r3, #0
    5e9e:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    5ea2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5ea6:	4618      	mov	r0, r3
    5ea8:	f000 f892 	bl	5fd0 <Dio_Ipw_FlipChannel>
    5eac:	4603      	mov	r3, r0
    5eae:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    5eb2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5eb6:	4618      	mov	r0, r3
    5eb8:	b005      	add	sp, #20
    5eba:	f85d fb04 	ldr.w	pc, [sp], #4

00005ebe <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    5ebe:	b500      	push	{lr}
    5ec0:	b085      	sub	sp, #20
    5ec2:	4603      	mov	r3, r0
    5ec4:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5ec8:	2300      	movs	r3, #0
    5eca:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    5ecc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5ed0:	4618      	mov	r0, r3
    5ed2:	f000 f8b3 	bl	603c <Dio_Ipw_ReadPort>
    5ed6:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    5ed8:	9b03      	ldr	r3, [sp, #12]
}
    5eda:	4618      	mov	r0, r3
    5edc:	b005      	add	sp, #20
    5ede:	f85d fb04 	ldr.w	pc, [sp], #4

00005ee2 <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    5ee2:	b500      	push	{lr}
    5ee4:	b083      	sub	sp, #12
    5ee6:	4603      	mov	r3, r0
    5ee8:	9100      	str	r1, [sp, #0]
    5eea:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    5eee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5ef2:	9900      	ldr	r1, [sp, #0]
    5ef4:	4618      	mov	r0, r3
    5ef6:	f000 f8b9 	bl	606c <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    5efa:	bf00      	nop
    5efc:	b003      	add	sp, #12
    5efe:	f85d fb04 	ldr.w	pc, [sp], #4

00005f02 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    5f02:	b500      	push	{lr}
    5f04:	b085      	sub	sp, #20
    5f06:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5f08:	2300      	movs	r3, #0
    5f0a:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    5f0c:	9801      	ldr	r0, [sp, #4]
    5f0e:	f000 f8c5 	bl	609c <Dio_Ipw_ReadChannelGroup>
    5f12:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    5f14:	9b03      	ldr	r3, [sp, #12]
}
    5f16:	4618      	mov	r0, r3
    5f18:	b005      	add	sp, #20
    5f1a:	f85d fb04 	ldr.w	pc, [sp], #4

00005f1e <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    5f1e:	b500      	push	{lr}
    5f20:	b083      	sub	sp, #12
    5f22:	9001      	str	r0, [sp, #4]
    5f24:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    5f26:	9900      	ldr	r1, [sp, #0]
    5f28:	9801      	ldr	r0, [sp, #4]
    5f2a:	f000 f8d7 	bl	60dc <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    5f2e:	bf00      	nop
    5f30:	b003      	add	sp, #12
    5f32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005f38 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    5f38:	b500      	push	{lr}
    5f3a:	b087      	sub	sp, #28
    5f3c:	4603      	mov	r3, r0
    5f3e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    5f42:	2300      	movs	r3, #0
    5f44:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5f48:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5f4c:	095b      	lsrs	r3, r3, #5
    5f4e:	b29b      	uxth	r3, r3
    5f50:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    5f52:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5f56:	f003 031f 	and.w	r3, r3, #31
    5f5a:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    5f5c:	4a08      	ldr	r2, [pc, #32]	; (5f80 <Dio_Ipw_ReadChannel+0x48>)
    5f5e:	9b04      	ldr	r3, [sp, #16]
    5f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f64:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    5f66:	9903      	ldr	r1, [sp, #12]
    5f68:	9802      	ldr	r0, [sp, #8]
    5f6a:	f000 f940 	bl	61ee <Gpio_Dio_Ip_ReadPin>
    5f6e:	4603      	mov	r3, r0
    5f70:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    5f74:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5f78:	4618      	mov	r0, r3
    5f7a:	b007      	add	sp, #28
    5f7c:	f85d fb04 	ldr.w	pc, [sp], #4
    5f80:	1fff8b24 	.word	0x1fff8b24

00005f84 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    5f84:	b500      	push	{lr}
    5f86:	b087      	sub	sp, #28
    5f88:	4603      	mov	r3, r0
    5f8a:	460a      	mov	r2, r1
    5f8c:	f8ad 3006 	strh.w	r3, [sp, #6]
    5f90:	4613      	mov	r3, r2
    5f92:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5f96:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5f9a:	095b      	lsrs	r3, r3, #5
    5f9c:	b29b      	uxth	r3, r3
    5f9e:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    5fa0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5fa4:	f003 031f 	and.w	r3, r3, #31
    5fa8:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    5faa:	4a08      	ldr	r2, [pc, #32]	; (5fcc <Dio_Ipw_WriteChannel+0x48>)
    5fac:	9b05      	ldr	r3, [sp, #20]
    5fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fb2:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    5fb4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5fb8:	461a      	mov	r2, r3
    5fba:	9904      	ldr	r1, [sp, #16]
    5fbc:	9803      	ldr	r0, [sp, #12]
    5fbe:	f000 f8b7 	bl	6130 <Gpio_Dio_Ip_WritePin>
}
    5fc2:	bf00      	nop
    5fc4:	b007      	add	sp, #28
    5fc6:	f85d fb04 	ldr.w	pc, [sp], #4
    5fca:	bf00      	nop
    5fcc:	1fff8b24 	.word	0x1fff8b24

00005fd0 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    5fd0:	b500      	push	{lr}
    5fd2:	b089      	sub	sp, #36	; 0x24
    5fd4:	4603      	mov	r3, r0
    5fd6:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5fda:	2300      	movs	r3, #0
    5fdc:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5fe0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5fe4:	095b      	lsrs	r3, r3, #5
    5fe6:	b29b      	uxth	r3, r3
    5fe8:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    5fea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5fee:	f003 031f 	and.w	r3, r3, #31
    5ff2:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    5ff4:	4a10      	ldr	r2, [pc, #64]	; (6038 <Dio_Ipw_FlipChannel+0x68>)
    5ff6:	9b06      	ldr	r3, [sp, #24]
    5ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ffc:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    5ffe:	2201      	movs	r2, #1
    6000:	9b05      	ldr	r3, [sp, #20]
    6002:	fa02 f303 	lsl.w	r3, r2, r3
    6006:	4619      	mov	r1, r3
    6008:	9804      	ldr	r0, [sp, #16]
    600a:	f000 f8dc 	bl	61c6 <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    600e:	9804      	ldr	r0, [sp, #16]
    6010:	f000 f8bc 	bl	618c <Gpio_Dio_Ip_GetPinsOutput>
    6014:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    6016:	2201      	movs	r2, #1
    6018:	9b05      	ldr	r3, [sp, #20]
    601a:	409a      	lsls	r2, r3
    601c:	9b03      	ldr	r3, [sp, #12]
    601e:	401a      	ands	r2, r3
    6020:	9b05      	ldr	r3, [sp, #20]
    6022:	fa22 f303 	lsr.w	r3, r2, r3
    6026:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    602a:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    602e:	4618      	mov	r0, r3
    6030:	b009      	add	sp, #36	; 0x24
    6032:	f85d fb04 	ldr.w	pc, [sp], #4
    6036:	bf00      	nop
    6038:	1fff8b24 	.word	0x1fff8b24

0000603c <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    603c:	b500      	push	{lr}
    603e:	b085      	sub	sp, #20
    6040:	4603      	mov	r3, r0
    6042:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6046:	2300      	movs	r3, #0
    6048:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    604a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    604e:	4a06      	ldr	r2, [pc, #24]	; (6068 <Dio_Ipw_ReadPort+0x2c>)
    6050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6054:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6056:	9802      	ldr	r0, [sp, #8]
    6058:	f000 f8be 	bl	61d8 <Gpio_Dio_Ip_ReadPins>
    605c:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    605e:	9b03      	ldr	r3, [sp, #12]
}
    6060:	4618      	mov	r0, r3
    6062:	b005      	add	sp, #20
    6064:	f85d fb04 	ldr.w	pc, [sp], #4
    6068:	1fff8b24 	.word	0x1fff8b24

0000606c <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    606c:	b500      	push	{lr}
    606e:	b085      	sub	sp, #20
    6070:	4603      	mov	r3, r0
    6072:	9100      	str	r1, [sp, #0]
    6074:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    6078:	9b00      	ldr	r3, [sp, #0]
    607a:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    607c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6080:	4a05      	ldr	r2, [pc, #20]	; (6098 <Dio_Ipw_WritePort+0x2c>)
    6082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6086:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    6088:	9903      	ldr	r1, [sp, #12]
    608a:	9802      	ldr	r0, [sp, #8]
    608c:	f000 f875 	bl	617a <Gpio_Dio_Ip_WritePins>
}
    6090:	bf00      	nop
    6092:	b005      	add	sp, #20
    6094:	f85d fb04 	ldr.w	pc, [sp], #4
    6098:	1fff8b24 	.word	0x1fff8b24

0000609c <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    609c:	b500      	push	{lr}
    609e:	b087      	sub	sp, #28
    60a0:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    60a2:	2300      	movs	r3, #0
    60a4:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    60a6:	9b01      	ldr	r3, [sp, #4]
    60a8:	781b      	ldrb	r3, [r3, #0]
    60aa:	461a      	mov	r2, r3
    60ac:	4b0a      	ldr	r3, [pc, #40]	; (60d8 <Dio_Ipw_ReadChannelGroup+0x3c>)
    60ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    60b2:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    60b4:	9804      	ldr	r0, [sp, #16]
    60b6:	f000 f88f 	bl	61d8 <Gpio_Dio_Ip_ReadPins>
    60ba:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    60bc:	9b01      	ldr	r3, [sp, #4]
    60be:	685a      	ldr	r2, [r3, #4]
    60c0:	9b03      	ldr	r3, [sp, #12]
    60c2:	4013      	ands	r3, r2
    60c4:	9a01      	ldr	r2, [sp, #4]
    60c6:	7852      	ldrb	r2, [r2, #1]
    60c8:	40d3      	lsrs	r3, r2
    60ca:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    60cc:	9b05      	ldr	r3, [sp, #20]
}
    60ce:	4618      	mov	r0, r3
    60d0:	b007      	add	sp, #28
    60d2:	f85d fb04 	ldr.w	pc, [sp], #4
    60d6:	bf00      	nop
    60d8:	1fff8b24 	.word	0x1fff8b24

000060dc <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    60dc:	b500      	push	{lr}
    60de:	b087      	sub	sp, #28
    60e0:	9001      	str	r0, [sp, #4]
    60e2:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    60e4:	9b01      	ldr	r3, [sp, #4]
    60e6:	781b      	ldrb	r3, [r3, #0]
    60e8:	461a      	mov	r2, r3
    60ea:	4b10      	ldr	r3, [pc, #64]	; (612c <Dio_Ipw_WriteChannelGroup+0x50>)
    60ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    60f0:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    60f2:	9b01      	ldr	r3, [sp, #4]
    60f4:	785b      	ldrb	r3, [r3, #1]
    60f6:	461a      	mov	r2, r3
    60f8:	9b00      	ldr	r3, [sp, #0]
    60fa:	fa03 f202 	lsl.w	r2, r3, r2
    60fe:	9b01      	ldr	r3, [sp, #4]
    6100:	685b      	ldr	r3, [r3, #4]
    6102:	4013      	ands	r3, r2
    6104:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    6106:	9904      	ldr	r1, [sp, #16]
    6108:	9805      	ldr	r0, [sp, #20]
    610a:	f000 f84a 	bl	61a2 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    610e:	9b04      	ldr	r3, [sp, #16]
    6110:	43da      	mvns	r2, r3
    6112:	9b01      	ldr	r3, [sp, #4]
    6114:	685b      	ldr	r3, [r3, #4]
    6116:	4013      	ands	r3, r2
    6118:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    611a:	9903      	ldr	r1, [sp, #12]
    611c:	9805      	ldr	r0, [sp, #20]
    611e:	f000 f849 	bl	61b4 <Gpio_Dio_Ip_ClearPins>

}
    6122:	bf00      	nop
    6124:	b007      	add	sp, #28
    6126:	f85d fb04 	ldr.w	pc, [sp], #4
    612a:	bf00      	nop
    612c:	1fff8b24 	.word	0x1fff8b24

00006130 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    6130:	b500      	push	{lr}
    6132:	b087      	sub	sp, #28
    6134:	9003      	str	r0, [sp, #12]
    6136:	9102      	str	r1, [sp, #8]
    6138:	4613      	mov	r3, r2
    613a:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    613e:	f001 ff59 	bl	7ff4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    6142:	9b03      	ldr	r3, [sp, #12]
    6144:	681b      	ldr	r3, [r3, #0]
    6146:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    6148:	2201      	movs	r2, #1
    614a:	9b02      	ldr	r3, [sp, #8]
    614c:	fa02 f303 	lsl.w	r3, r2, r3
    6150:	43db      	mvns	r3, r3
    6152:	9a05      	ldr	r2, [sp, #20]
    6154:	4013      	ands	r3, r2
    6156:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    6158:	f89d 2007 	ldrb.w	r2, [sp, #7]
    615c:	9b02      	ldr	r3, [sp, #8]
    615e:	fa02 f303 	lsl.w	r3, r2, r3
    6162:	9a05      	ldr	r2, [sp, #20]
    6164:	4313      	orrs	r3, r2
    6166:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    6168:	9b03      	ldr	r3, [sp, #12]
    616a:	9a05      	ldr	r2, [sp, #20]
    616c:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    616e:	f001 ff6d 	bl	804c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    6172:	bf00      	nop
    6174:	b007      	add	sp, #28
    6176:	f85d fb04 	ldr.w	pc, [sp], #4

0000617a <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    617a:	b082      	sub	sp, #8
    617c:	9001      	str	r0, [sp, #4]
    617e:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    6180:	9b01      	ldr	r3, [sp, #4]
    6182:	9a00      	ldr	r2, [sp, #0]
    6184:	601a      	str	r2, [r3, #0]
}
    6186:	bf00      	nop
    6188:	b002      	add	sp, #8
    618a:	4770      	bx	lr

0000618c <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    618c:	b084      	sub	sp, #16
    618e:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6190:	2300      	movs	r3, #0
    6192:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    6194:	9b01      	ldr	r3, [sp, #4]
    6196:	681b      	ldr	r3, [r3, #0]
    6198:	9303      	str	r3, [sp, #12]
    return returnValue;
    619a:	9b03      	ldr	r3, [sp, #12]
}
    619c:	4618      	mov	r0, r3
    619e:	b004      	add	sp, #16
    61a0:	4770      	bx	lr

000061a2 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    61a2:	b082      	sub	sp, #8
    61a4:	9001      	str	r0, [sp, #4]
    61a6:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    61a8:	9b01      	ldr	r3, [sp, #4]
    61aa:	9a00      	ldr	r2, [sp, #0]
    61ac:	605a      	str	r2, [r3, #4]
}
    61ae:	bf00      	nop
    61b0:	b002      	add	sp, #8
    61b2:	4770      	bx	lr

000061b4 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    61b4:	b082      	sub	sp, #8
    61b6:	9001      	str	r0, [sp, #4]
    61b8:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    61ba:	9b01      	ldr	r3, [sp, #4]
    61bc:	9a00      	ldr	r2, [sp, #0]
    61be:	609a      	str	r2, [r3, #8]
}
    61c0:	bf00      	nop
    61c2:	b002      	add	sp, #8
    61c4:	4770      	bx	lr

000061c6 <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    61c6:	b082      	sub	sp, #8
    61c8:	9001      	str	r0, [sp, #4]
    61ca:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    61cc:	9b01      	ldr	r3, [sp, #4]
    61ce:	9a00      	ldr	r2, [sp, #0]
    61d0:	60da      	str	r2, [r3, #12]
}
    61d2:	bf00      	nop
    61d4:	b002      	add	sp, #8
    61d6:	4770      	bx	lr

000061d8 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    61d8:	b084      	sub	sp, #16
    61da:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    61dc:	2300      	movs	r3, #0
    61de:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    61e0:	9b01      	ldr	r3, [sp, #4]
    61e2:	691b      	ldr	r3, [r3, #16]
    61e4:	9303      	str	r3, [sp, #12]
    return returnValue;
    61e6:	9b03      	ldr	r3, [sp, #12]
}
    61e8:	4618      	mov	r0, r3
    61ea:	b004      	add	sp, #16
    61ec:	4770      	bx	lr

000061ee <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    61ee:	b084      	sub	sp, #16
    61f0:	9001      	str	r0, [sp, #4]
    61f2:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    61f4:	2300      	movs	r3, #0
    61f6:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    61fa:	9b01      	ldr	r3, [sp, #4]
    61fc:	691a      	ldr	r2, [r3, #16]
    61fe:	2101      	movs	r1, #1
    6200:	9b00      	ldr	r3, [sp, #0]
    6202:	fa01 f303 	lsl.w	r3, r1, r3
    6206:	401a      	ands	r2, r3
    6208:	9b00      	ldr	r3, [sp, #0]
    620a:	fa22 f303 	lsr.w	r3, r2, r3
    620e:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    6212:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6216:	4618      	mov	r0, r3
    6218:	b004      	add	sp, #16
    621a:	4770      	bx	lr

0000621c <Ftm_Gpt_Ip_GetChInterruptStatusFlag>:
 *
 * @return  TRUE if a channel (n) event has occurred, FALSE otherwise
 * @pre     The driver needs to be initialized.
 */
static inline boolean Ftm_Gpt_Ip_GetChInterruptStatusFlag(uint8 instance, uint8 channel)
{
    621c:	b082      	sub	sp, #8
    621e:	4603      	mov	r3, r0
    6220:	460a      	mov	r2, r1
    6222:	f88d 3007 	strb.w	r3, [sp, #7]
    6226:	4613      	mov	r3, r2
    6228:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->CONTROLS[channel].CSC & FTM_CSC_CHF_MASK)) ? TRUE : FALSE;
    622c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6230:	4a09      	ldr	r2, [pc, #36]	; (6258 <Ftm_Gpt_Ip_GetChInterruptStatusFlag+0x3c>)
    6232:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6236:	f89d 3006 	ldrb.w	r3, [sp, #6]
    623a:	3301      	adds	r3, #1
    623c:	00db      	lsls	r3, r3, #3
    623e:	4413      	add	r3, r2
    6240:	685b      	ldr	r3, [r3, #4]
    6242:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6246:	2b00      	cmp	r3, #0
    6248:	bf14      	ite	ne
    624a:	2301      	movne	r3, #1
    624c:	2300      	moveq	r3, #0
    624e:	b2db      	uxtb	r3, r3
}
    6250:	4618      	mov	r0, r3
    6252:	b002      	add	sp, #8
    6254:	4770      	bx	lr
    6256:	bf00      	nop
    6258:	0000bf7c 	.word	0x0000bf7c

0000625c <Ftm_Gpt_Ip_GetCntValue>:
*
* @return   current counter value
*
*/
static inline uint32 Ftm_Gpt_Ip_GetCntValue(uint8 instance)
{
    625c:	b082      	sub	sp, #8
    625e:	4603      	mov	r3, r0
    6260:	f88d 3007 	strb.w	r3, [sp, #7]
    return ftmGptBase[instance]->CNT;
    6264:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6268:	4a03      	ldr	r2, [pc, #12]	; (6278 <Ftm_Gpt_Ip_GetCntValue+0x1c>)
    626a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    626e:	685b      	ldr	r3, [r3, #4]
}
    6270:	4618      	mov	r0, r3
    6272:	b002      	add	sp, #8
    6274:	4770      	bx	lr
    6276:	bf00      	nop
    6278:	0000bf7c 	.word	0x0000bf7c

0000627c <Ftm_Gpt_Ip_GetCompareValue>:
 *
 * @return      compare value (CV)
 *
 */
static inline uint32 Ftm_Gpt_Ip_GetCompareValue(uint8 instance, uint8 channel)
{
    627c:	b082      	sub	sp, #8
    627e:	4603      	mov	r3, r0
    6280:	460a      	mov	r2, r1
    6282:	f88d 3007 	strb.w	r3, [sp, #7]
    6286:	4613      	mov	r3, r2
    6288:	f88d 3006 	strb.w	r3, [sp, #6]
    return ftmGptBase[instance]->CONTROLS[channel].CV;
    628c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6290:	4a05      	ldr	r2, [pc, #20]	; (62a8 <Ftm_Gpt_Ip_GetCompareValue+0x2c>)
    6292:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6296:	f89d 3006 	ldrb.w	r3, [sp, #6]
    629a:	3301      	adds	r3, #1
    629c:	00db      	lsls	r3, r3, #3
    629e:	4413      	add	r3, r2
    62a0:	689b      	ldr	r3, [r3, #8]
}
    62a2:	4618      	mov	r0, r3
    62a4:	b002      	add	sp, #8
    62a6:	4770      	bx	lr
    62a8:	0000bf7c 	.word	0x0000bf7c

000062ac <Ftm_Gpt_Ip_SetFreezeBits>:
 *
 * @return      void
 *
 */
static inline void Ftm_Gpt_Ip_SetFreezeBits(uint8 instance, boolean freezeBits)
{
    62ac:	b500      	push	{lr}
    62ae:	b085      	sub	sp, #20
    62b0:	4603      	mov	r3, r0
    62b2:	460a      	mov	r2, r1
    62b4:	f88d 3007 	strb.w	r3, [sp, #7]
    62b8:	4613      	mov	r3, r2
    62ba:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 freezeVal = (TRUE == freezeBits) ? 0UL : 3UL;
    62be:	f89d 3006 	ldrb.w	r3, [sp, #6]
    62c2:	2b00      	cmp	r3, #0
    62c4:	d001      	beq.n	62ca <Ftm_Gpt_Ip_SetFreezeBits+0x1e>
    62c6:	2300      	movs	r3, #0
    62c8:	e000      	b.n	62cc <Ftm_Gpt_Ip_SetFreezeBits+0x20>
    62ca:	2303      	movs	r3, #3
    62cc:	9303      	str	r3, [sp, #12]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17();
    62ce:	f002 fa69 	bl	87a4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17>
    ftmGptBase[instance]->CONF = (ftmGptBase[instance]->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(freezeVal);
    62d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62d6:	4a0c      	ldr	r2, [pc, #48]	; (6308 <Ftm_Gpt_Ip_SetFreezeBits+0x5c>)
    62d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    62e0:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
    62e4:	9b03      	ldr	r3, [sp, #12]
    62e6:	019b      	lsls	r3, r3, #6
    62e8:	b2da      	uxtb	r2, r3
    62ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62ee:	4806      	ldr	r0, [pc, #24]	; (6308 <Ftm_Gpt_Ip_SetFreezeBits+0x5c>)
    62f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    62f4:	430a      	orrs	r2, r1
    62f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17();
    62fa:	f002 fa7f 	bl	87fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17>
}
    62fe:	bf00      	nop
    6300:	b005      	add	sp, #20
    6302:	f85d fb04 	ldr.w	pc, [sp], #4
    6306:	bf00      	nop
    6308:	0000bf7c 	.word	0x0000bf7c

0000630c <Ftm_Gpt_Ip_SetCounterInitVal>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetCounterInitVal(uint8 instance, uint16 value)
{
    630c:	b082      	sub	sp, #8
    630e:	4603      	mov	r3, r0
    6310:	460a      	mov	r2, r1
    6312:	f88d 3007 	strb.w	r3, [sp, #7]
    6316:	4613      	mov	r3, r2
    6318:	f8ad 3004 	strh.w	r3, [sp, #4]
    ftmGptBase[instance]->CNTIN = (uint32)(((uint32)value << FTM_CNTIN_INIT_SHIFT) & FTM_CNTIN_INIT_MASK);
    631c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6320:	4a04      	ldr	r2, [pc, #16]	; (6334 <Ftm_Gpt_Ip_SetCounterInitVal+0x28>)
    6322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6326:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    632a:	64da      	str	r2, [r3, #76]	; 0x4c
}
    632c:	bf00      	nop
    632e:	b002      	add	sp, #8
    6330:	4770      	bx	lr
    6332:	bf00      	nop
    6334:	0000bf7c 	.word	0x0000bf7c

00006338 <Ftm_Gpt_Ip_SetCounter>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetCounter(uint8 instance, uint16 value)
{
    6338:	b082      	sub	sp, #8
    633a:	4603      	mov	r3, r0
    633c:	460a      	mov	r2, r1
    633e:	f88d 3007 	strb.w	r3, [sp, #7]
    6342:	4613      	mov	r3, r2
    6344:	f8ad 3004 	strh.w	r3, [sp, #4]
    ftmGptBase[instance]->CNT = (uint32)(((uint32)value << FTM_CNT_COUNT_SHIFT) & FTM_CNT_COUNT_MASK);
    6348:	f89d 3007 	ldrb.w	r3, [sp, #7]
    634c:	4a04      	ldr	r2, [pc, #16]	; (6360 <Ftm_Gpt_Ip_SetCounter+0x28>)
    634e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6352:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6356:	605a      	str	r2, [r3, #4]
}
    6358:	bf00      	nop
    635a:	b002      	add	sp, #8
    635c:	4770      	bx	lr
    635e:	bf00      	nop
    6360:	0000bf7c 	.word	0x0000bf7c

00006364 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>:
 *
 * @return      void
 * @pre         The driver needs to be initialized.
 */
static inline void Ftm_Gpt_Ip_ClearChInterruptStatusFlag(uint8 instance, uint8 channel)
{
    6364:	b082      	sub	sp, #8
    6366:	4603      	mov	r3, r0
    6368:	460a      	mov	r2, r1
    636a:	f88d 3007 	strb.w	r3, [sp, #7]
    636e:	4613      	mov	r3, r2
    6370:	f88d 3006 	strb.w	r3, [sp, #6]
    ftmGptBase[instance]-> CONTROLS[channel].CSC &= ~(FTM_CSC_CHF_MASK);
    6374:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6378:	4a0c      	ldr	r2, [pc, #48]	; (63ac <Ftm_Gpt_Ip_ClearChInterruptStatusFlag+0x48>)
    637a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    637e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6382:	3301      	adds	r3, #1
    6384:	00db      	lsls	r3, r3, #3
    6386:	4413      	add	r3, r2
    6388:	685a      	ldr	r2, [r3, #4]
    638a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    638e:	4907      	ldr	r1, [pc, #28]	; (63ac <Ftm_Gpt_Ip_ClearChInterruptStatusFlag+0x48>)
    6390:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    6394:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    639c:	3301      	adds	r3, #1
    639e:	00db      	lsls	r3, r3, #3
    63a0:	440b      	add	r3, r1
    63a2:	605a      	str	r2, [r3, #4]
}
    63a4:	bf00      	nop
    63a6:	b002      	add	sp, #8
    63a8:	4770      	bx	lr
    63aa:	bf00      	nop
    63ac:	0000bf7c 	.word	0x0000bf7c

000063b0 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>:
 * @param[in]   aboEn - Enables the FTM channel(n) interrupt
 *              - True : Enable the FTM channel(n) interrupt.
 *              - False: Disable the FTM channel(n) interrupt.
 */
static inline void Ftm_Gpt_Ip_SetChannelEnableInterrupt(uint8 instance, uint8 channel, boolean aboEn)
{
    63b0:	b082      	sub	sp, #8
    63b2:	4603      	mov	r3, r0
    63b4:	f88d 3007 	strb.w	r3, [sp, #7]
    63b8:	460b      	mov	r3, r1
    63ba:	f88d 3006 	strb.w	r3, [sp, #6]
    63be:	4613      	mov	r3, r2
    63c0:	f88d 3005 	strb.w	r3, [sp, #5]
    ftmGptBase[instance]-> CONTROLS[channel].CSC = (ftmGptBase[instance]-> CONTROLS[channel].CSC & ~(FTM_CSC_CHIE_MASK)) | FTM_CSC_CHIE((TRUE == aboEn) ? 1UL : 0UL);
    63c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    63c8:	4a10      	ldr	r2, [pc, #64]	; (640c <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x5c>)
    63ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    63ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
    63d2:	3301      	adds	r3, #1
    63d4:	00db      	lsls	r3, r3, #3
    63d6:	4413      	add	r3, r2
    63d8:	685b      	ldr	r3, [r3, #4]
    63da:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    63de:	f89d 3005 	ldrb.w	r3, [sp, #5]
    63e2:	2b00      	cmp	r3, #0
    63e4:	d001      	beq.n	63ea <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x3a>
    63e6:	2040      	movs	r0, #64	; 0x40
    63e8:	e000      	b.n	63ec <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x3c>
    63ea:	2000      	movs	r0, #0
    63ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    63f0:	4906      	ldr	r1, [pc, #24]	; (640c <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x5c>)
    63f2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    63f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    63fa:	4302      	orrs	r2, r0
    63fc:	3301      	adds	r3, #1
    63fe:	00db      	lsls	r3, r3, #3
    6400:	440b      	add	r3, r1
    6402:	605a      	str	r2, [r3, #4]
}
    6404:	bf00      	nop
    6406:	b002      	add	sp, #8
    6408:	4770      	bx	lr
    640a:	bf00      	nop
    640c:	0000bf7c 	.word	0x0000bf7c

00006410 <Ftm_Gpt_Ip_SetClockSource>:
 * @param[in]       instance    FTM hardware instance number
 *
 * @return      void
 */
static inline void Ftm_Gpt_Ip_SetClockSource(uint8 instance, Ftm_Gpt_Ip_ClockSource clocksource)
{
    6410:	b500      	push	{lr}
    6412:	b083      	sub	sp, #12
    6414:	4603      	mov	r3, r0
    6416:	9100      	str	r1, [sp, #0]
    6418:	f88d 3007 	strb.w	r3, [sp, #7]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21();
    641c:	f002 fa14 	bl	8848 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21>
    ftmGptBase[instance]->SC = (ftmGptBase[instance]->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(clocksource);
    6420:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6424:	4a0b      	ldr	r2, [pc, #44]	; (6454 <Ftm_Gpt_Ip_SetClockSource+0x44>)
    6426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    642a:	681b      	ldr	r3, [r3, #0]
    642c:	f023 0118 	bic.w	r1, r3, #24
    6430:	9b00      	ldr	r3, [sp, #0]
    6432:	00db      	lsls	r3, r3, #3
    6434:	f003 0218 	and.w	r2, r3, #24
    6438:	f89d 3007 	ldrb.w	r3, [sp, #7]
    643c:	4805      	ldr	r0, [pc, #20]	; (6454 <Ftm_Gpt_Ip_SetClockSource+0x44>)
    643e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6442:	430a      	orrs	r2, r1
    6444:	601a      	str	r2, [r3, #0]
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21();
    6446:	f002 fa2b 	bl	88a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21>
}
    644a:	bf00      	nop
    644c:	b003      	add	sp, #12
    644e:	f85d fb04 	ldr.w	pc, [sp], #4
    6452:	bf00      	nop
    6454:	0000bf7c 	.word	0x0000bf7c

00006458 <Ftm_Gpt_Ip_SetPrescaler>:
 *
 * @return        void
 *
 */
static inline void Ftm_Gpt_Ip_SetPrescaler(uint8 instance, uint8 prescalerValue)
{
    6458:	b500      	push	{lr}
    645a:	b083      	sub	sp, #12
    645c:	4603      	mov	r3, r0
    645e:	460a      	mov	r2, r1
    6460:	f88d 3007 	strb.w	r3, [sp, #7]
    6464:	4613      	mov	r3, r2
    6466:	f88d 3006 	strb.w	r3, [sp, #6]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22();
    646a:	f002 fa3f 	bl	88ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22>
    ftmGptBase[instance]->SC = (ftmGptBase[instance]->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(prescalerValue);
    646e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6472:	4a0b      	ldr	r2, [pc, #44]	; (64a0 <Ftm_Gpt_Ip_SetPrescaler+0x48>)
    6474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6478:	681b      	ldr	r3, [r3, #0]
    647a:	f023 0107 	bic.w	r1, r3, #7
    647e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6482:	f003 0207 	and.w	r2, r3, #7
    6486:	f89d 3007 	ldrb.w	r3, [sp, #7]
    648a:	4805      	ldr	r0, [pc, #20]	; (64a0 <Ftm_Gpt_Ip_SetPrescaler+0x48>)
    648c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6490:	430a      	orrs	r2, r1
    6492:	601a      	str	r2, [r3, #0]
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22();
    6494:	f002 fa56 	bl	8944 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22>
}
    6498:	bf00      	nop
    649a:	b003      	add	sp, #12
    649c:	f85d fb04 	ldr.w	pc, [sp], #4
    64a0:	0000bf7c 	.word	0x0000bf7c

000064a4 <Ftm_Gpt_Ip_SetEnFtmModule>:
 * @param[in]   enable
 *
 * @return      void
 */
static inline void Ftm_Gpt_Ip_SetEnFtmModule(uint8 instance, boolean enable)
{
    64a4:	b500      	push	{lr}
    64a6:	b083      	sub	sp, #12
    64a8:	4603      	mov	r3, r0
    64aa:	460a      	mov	r2, r1
    64ac:	f88d 3007 	strb.w	r3, [sp, #7]
    64b0:	4613      	mov	r3, r2
    64b2:	f88d 3006 	strb.w	r3, [sp, #6]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23();
    64b6:	f002 fa6b 	bl	8990 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23>
    {
        ftmGptBase[instance]->MODE &= ~(FTM_MODE_FTMEN_MASK);
    64ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64be:	4a13      	ldr	r2, [pc, #76]	; (650c <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    64c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    64c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64ca:	4910      	ldr	r1, [pc, #64]	; (650c <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    64cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    64d0:	f022 0201 	bic.w	r2, r2, #1
    64d4:	655a      	str	r2, [r3, #84]	; 0x54
        ftmGptBase[instance]->MODE |= FTM_MODE_FTMEN(enable ? 1UL : 0UL);
    64d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64da:	4a0c      	ldr	r2, [pc, #48]	; (650c <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    64dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    64e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    64e6:	2b00      	cmp	r3, #0
    64e8:	d001      	beq.n	64ee <Ftm_Gpt_Ip_SetEnFtmModule+0x4a>
    64ea:	2101      	movs	r1, #1
    64ec:	e000      	b.n	64f0 <Ftm_Gpt_Ip_SetEnFtmModule+0x4c>
    64ee:	2100      	movs	r1, #0
    64f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64f4:	4805      	ldr	r0, [pc, #20]	; (650c <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    64f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    64fa:	430a      	orrs	r2, r1
    64fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23();
    64fe:	f002 fa73 	bl	89e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23>
}
    6502:	bf00      	nop
    6504:	b003      	add	sp, #12
    6506:	f85d fb04 	ldr.w	pc, [sp], #4
    650a:	bf00      	nop
    650c:	0000bf7c 	.word	0x0000bf7c

00006510 <Ftm_Gpt_Ip_SetCompareValue>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetCompareValue(uint8 instance, uint8 channel, uint32 value)
{
    6510:	b082      	sub	sp, #8
    6512:	4603      	mov	r3, r0
    6514:	9200      	str	r2, [sp, #0]
    6516:	f88d 3007 	strb.w	r3, [sp, #7]
    651a:	460b      	mov	r3, r1
    651c:	f88d 3006 	strb.w	r3, [sp, #6]
    ftmGptBase[instance]-> CONTROLS[channel].CV = (uint32)((((uint32)value << FTM_CV_VAL_SHIFT) & FTM_CV_VAL_MASK));
    6520:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6524:	4a06      	ldr	r2, [pc, #24]	; (6540 <Ftm_Gpt_Ip_SetCompareValue+0x30>)
    6526:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    652a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    652e:	9a00      	ldr	r2, [sp, #0]
    6530:	b292      	uxth	r2, r2
    6532:	3301      	adds	r3, #1
    6534:	00db      	lsls	r3, r3, #3
    6536:	440b      	add	r3, r1
    6538:	609a      	str	r2, [r3, #8]

}
    653a:	bf00      	nop
    653c:	b002      	add	sp, #8
    653e:	4770      	bx	lr
    6540:	0000bf7c 	.word	0x0000bf7c

00006544 <Ftm_Gpt_Ip_WriteModulo>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_WriteModulo(uint8 instance, uint16 value)
{
    6544:	b082      	sub	sp, #8
    6546:	4603      	mov	r3, r0
    6548:	460a      	mov	r2, r1
    654a:	f88d 3007 	strb.w	r3, [sp, #7]
    654e:	4613      	mov	r3, r2
    6550:	f8ad 3004 	strh.w	r3, [sp, #4]
    ftmGptBase[instance]-> MOD = value;
    6554:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6558:	4a04      	ldr	r2, [pc, #16]	; (656c <Ftm_Gpt_Ip_WriteModulo+0x28>)
    655a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    655e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6562:	609a      	str	r2, [r3, #8]

}
    6564:	bf00      	nop
    6566:	b002      	add	sp, #8
    6568:	4770      	bx	lr
    656a:	bf00      	nop
    656c:	0000bf7c 	.word	0x0000bf7c

00006570 <Ftm_Gpt_Ip_ModeSelectA>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_ModeSelectA(uint8 instance, uint8 channel, boolean enable)
{
    6570:	b500      	push	{lr}
    6572:	b083      	sub	sp, #12
    6574:	4603      	mov	r3, r0
    6576:	f88d 3007 	strb.w	r3, [sp, #7]
    657a:	460b      	mov	r3, r1
    657c:	f88d 3006 	strb.w	r3, [sp, #6]
    6580:	4613      	mov	r3, r2
    6582:	f88d 3005 	strb.w	r3, [sp, #5]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24();
    6586:	f002 fa55 	bl	8a34 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24>
    if (TRUE == enable)
    658a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    658e:	2b00      	cmp	r3, #0
    6590:	d018      	beq.n	65c4 <Ftm_Gpt_Ip_ModeSelectA+0x54>
    {
        ftmGptBase[instance]->CONTROLS[channel].CSC |= FTM_CSC_MSA_MASK;
    6592:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6596:	4a1a      	ldr	r2, [pc, #104]	; (6600 <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    6598:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    659c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    65a0:	3301      	adds	r3, #1
    65a2:	00db      	lsls	r3, r3, #3
    65a4:	4413      	add	r3, r2
    65a6:	685a      	ldr	r2, [r3, #4]
    65a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65ac:	4914      	ldr	r1, [pc, #80]	; (6600 <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    65ae:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    65b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    65b6:	f042 0210 	orr.w	r2, r2, #16
    65ba:	3301      	adds	r3, #1
    65bc:	00db      	lsls	r3, r3, #3
    65be:	440b      	add	r3, r1
    65c0:	605a      	str	r2, [r3, #4]
    65c2:	e017      	b.n	65f4 <Ftm_Gpt_Ip_ModeSelectA+0x84>
    }
    else
    {
        ftmGptBase[instance]->CONTROLS[channel].CSC &= (~(FTM_CSC_MSA_MASK));
    65c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65c8:	4a0d      	ldr	r2, [pc, #52]	; (6600 <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    65ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    65ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
    65d2:	3301      	adds	r3, #1
    65d4:	00db      	lsls	r3, r3, #3
    65d6:	4413      	add	r3, r2
    65d8:	685a      	ldr	r2, [r3, #4]
    65da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65de:	4908      	ldr	r1, [pc, #32]	; (6600 <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    65e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    65e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    65e8:	f022 0210 	bic.w	r2, r2, #16
    65ec:	3301      	adds	r3, #1
    65ee:	00db      	lsls	r3, r3, #3
    65f0:	440b      	add	r3, r1
    65f2:	605a      	str	r2, [r3, #4]
    }
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24();
    65f4:	f002 fa4a 	bl	8a8c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24>
}
    65f8:	bf00      	nop
    65fa:	b003      	add	sp, #12
    65fc:	f85d fb04 	ldr.w	pc, [sp], #4
    6600:	0000bf7c 	.word	0x0000bf7c

00006604 <Ftm_Gpt_Ip_SetHalfCycleValue>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetHalfCycleValue(FTM_Type * const base, uint16 value)
{
    6604:	b082      	sub	sp, #8
    6606:	9001      	str	r0, [sp, #4]
    6608:	460b      	mov	r3, r1
    660a:	f8ad 3002 	strh.w	r3, [sp, #2]
    ((base)->HCR) = value;
    660e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    6612:	9b01      	ldr	r3, [sp, #4]
    6614:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    6618:	bf00      	nop
    661a:	b002      	add	sp, #8
    661c:	4770      	bx	lr

0000661e <Ftm_Gpt_Ip_GetChInterruptEnableFlag>:
 *
 * @return  TRUE if a channel (n) event has occurred, FALSE otherwise
 * @pre     The driver needs to be initialized.
 */
static inline boolean Ftm_Gpt_Ip_GetChInterruptEnableFlag(uint8 instance, uint8 channel)
{
    661e:	b082      	sub	sp, #8
    6620:	4603      	mov	r3, r0
    6622:	460a      	mov	r2, r1
    6624:	f88d 3007 	strb.w	r3, [sp, #7]
    6628:	4613      	mov	r3, r2
    662a:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->CONTROLS[channel].CSC & FTM_CSC_CHIE_MASK)) ? TRUE : FALSE;
    662e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6632:	4a09      	ldr	r2, [pc, #36]	; (6658 <Ftm_Gpt_Ip_GetChInterruptEnableFlag+0x3a>)
    6634:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6638:	f89d 3006 	ldrb.w	r3, [sp, #6]
    663c:	3301      	adds	r3, #1
    663e:	00db      	lsls	r3, r3, #3
    6640:	4413      	add	r3, r2
    6642:	685b      	ldr	r3, [r3, #4]
    6644:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6648:	2b00      	cmp	r3, #0
    664a:	bf14      	ite	ne
    664c:	2301      	movne	r3, #1
    664e:	2300      	moveq	r3, #0
    6650:	b2db      	uxtb	r3, r3
}
    6652:	4618      	mov	r0, r3
    6654:	b002      	add	sp, #8
    6656:	4770      	bx	lr
    6658:	0000bf7c 	.word	0x0000bf7c

0000665c <Ftm_Gpt_Ip_GetChannelEventStatus>:
 *         - True : A channel event has occurred
 *         - False: No channel event has occurred
 *
 */
static inline boolean Ftm_Gpt_Ip_GetChannelEventStatus(uint8 instance, uint8 channel)
{
    665c:	b082      	sub	sp, #8
    665e:	4603      	mov	r3, r0
    6660:	460a      	mov	r2, r1
    6662:	f88d 3007 	strb.w	r3, [sp, #7]
    6666:	4613      	mov	r3, r2
    6668:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->STATUS & (1UL << channel))) ? TRUE : FALSE;
    666c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6670:	4a08      	ldr	r2, [pc, #32]	; (6694 <Ftm_Gpt_Ip_GetChannelEventStatus+0x38>)
    6672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6676:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    6678:	f89d 3006 	ldrb.w	r3, [sp, #6]
    667c:	fa22 f303 	lsr.w	r3, r2, r3
    6680:	f003 0301 	and.w	r3, r3, #1
    6684:	2b00      	cmp	r3, #0
    6686:	bf14      	ite	ne
    6688:	2301      	movne	r3, #1
    668a:	2300      	moveq	r3, #0
    668c:	b2db      	uxtb	r3, r3
}
    668e:	4618      	mov	r0, r3
    6690:	b002      	add	sp, #8
    6692:	4770      	bx	lr
    6694:	0000bf7c 	.word	0x0000bf7c

00006698 <Ftm_Gpt_Ip_ProcessCommonInterrupt>:
* @param[in]     instance     FTM hardware instance number
* @param[in]     channel      FTM hardware channel number
* @implements    Ftm_Gpt_Ip_ProcessCommonInterrupt_Activity
*/
static void Ftm_Gpt_Ip_ProcessCommonInterrupt(uint8 instance, uint8 channel)
{
    6698:	b500      	push	{lr}
    669a:	b089      	sub	sp, #36	; 0x24
    669c:	4603      	mov	r3, r0
    669e:	460a      	mov	r2, r1
    66a0:	f88d 3007 	strb.w	r3, [sp, #7]
    66a4:	4613      	mov	r3, r2
    66a6:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Gpt_Ip_CallbackType     callback;
    uint8                       callbackParam;
    Ftm_Gpt_Ip_ChannelModeType  channelMode;

    uint32 targetValue;
    uint32 oldCmpValue = Ftm_Gpt_Ip_GetCompareValue(instance, channel);
    66aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
    66ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66b2:	4611      	mov	r1, r2
    66b4:	4618      	mov	r0, r3
    66b6:	f7ff fde1 	bl	627c <Ftm_Gpt_Ip_GetCompareValue>
    66ba:	9007      	str	r0, [sp, #28]

    if ((instance < FTM_INSTANCE_COUNT) && (channel < FTM_CONTROLS_COUNT))
    66bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66c0:	2b03      	cmp	r3, #3
    66c2:	f200 80a8 	bhi.w	6816 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
    66c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    66ca:	2b07      	cmp	r3, #7
    66cc:	f200 80a3 	bhi.w	6816 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
    {
        /* enter critical section */
        SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25();
    66d0:	f002 fa02 	bl	8ad8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25>
        {
            /* check if channel event is enabled */
            IsChEvEnabled = Ftm_Gpt_Ip_GetChInterruptEnableFlag(instance, channel);
    66d4:	f89d 2006 	ldrb.w	r2, [sp, #6]
    66d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66dc:	4611      	mov	r1, r2
    66de:	4618      	mov	r0, r3
    66e0:	f7ff ff9d 	bl	661e <Ftm_Gpt_Ip_GetChInterruptEnableFlag>
    66e4:	4603      	mov	r3, r0
    66e6:	f88d 301b 	strb.w	r3, [sp, #27]

            /* check if channel event has occurred */
            HasChEvOccurred = Ftm_Gpt_Ip_GetChInterruptStatusFlag(instance, channel);
    66ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
    66ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66f2:	4611      	mov	r1, r2
    66f4:	4618      	mov	r0, r3
    66f6:	f7ff fd91 	bl	621c <Ftm_Gpt_Ip_GetChInterruptStatusFlag>
    66fa:	4603      	mov	r3, r0
    66fc:	f88d 301a 	strb.w	r3, [sp, #26]

            /* Check for spurious interrupts */
            if (HasChEvOccurred && IsChEvEnabled)
    6700:	f89d 301a 	ldrb.w	r3, [sp, #26]
    6704:	2b00      	cmp	r3, #0
    6706:	d00b      	beq.n	6720 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x88>
    6708:	f89d 301b 	ldrb.w	r3, [sp, #27]
    670c:	2b00      	cmp	r3, #0
    670e:	d007      	beq.n	6720 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x88>
            {
                /* Clear interrupt flag */
                Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6710:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6714:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6718:	4611      	mov	r1, r2
    671a:	4618      	mov	r0, r3
    671c:	f7ff fe22 	bl	6364 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
            }
        }
        /* exit critical section */
        SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25();
    6720:	f002 fa06 	bl	8b30 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25>

        if (HasChEvOccurred && IsChEvEnabled)
    6724:	f89d 301a 	ldrb.w	r3, [sp, #26]
    6728:	2b00      	cmp	r3, #0
    672a:	d074      	beq.n	6816 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
    672c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    6730:	2b00      	cmp	r3, #0
    6732:	d070      	beq.n	6816 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
        {
            chInit          = Ftm_Gpt_Ip_u32ChState[instance][channel].chInit;
    6734:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6738:	f89d 3006 	ldrb.w	r3, [sp, #6]
    673c:	4938      	ldr	r1, [pc, #224]	; (6820 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    673e:	00d2      	lsls	r2, r2, #3
    6740:	4413      	add	r3, r2
    6742:	011b      	lsls	r3, r3, #4
    6744:	440b      	add	r3, r1
    6746:	781b      	ldrb	r3, [r3, #0]
    6748:	f88d 3019 	strb.w	r3, [sp, #25]
            callback        = Ftm_Gpt_Ip_u32ChState[instance][channel].callback;
    674c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6750:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6754:	4932      	ldr	r1, [pc, #200]	; (6820 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    6756:	00d2      	lsls	r2, r2, #3
    6758:	4413      	add	r3, r2
    675a:	011b      	lsls	r3, r3, #4
    675c:	440b      	add	r3, r1
    675e:	3304      	adds	r3, #4
    6760:	681b      	ldr	r3, [r3, #0]
    6762:	9305      	str	r3, [sp, #20]
            callbackParam   = Ftm_Gpt_Ip_u32ChState[instance][channel].callbackParam;
    6764:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6768:	f89d 3006 	ldrb.w	r3, [sp, #6]
    676c:	492c      	ldr	r1, [pc, #176]	; (6820 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    676e:	00d2      	lsls	r2, r2, #3
    6770:	4413      	add	r3, r2
    6772:	011b      	lsls	r3, r3, #4
    6774:	440b      	add	r3, r1
    6776:	3308      	adds	r3, #8
    6778:	781b      	ldrb	r3, [r3, #0]
    677a:	f88d 3013 	strb.w	r3, [sp, #19]

            /* Call GPT upper layer handler */
            if ((TRUE == chInit) && (NULL_PTR != callback))
    677e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    6782:	2b00      	cmp	r3, #0
    6784:	d007      	beq.n	6796 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0xfe>
    6786:	9b05      	ldr	r3, [sp, #20]
    6788:	2b00      	cmp	r3, #0
    678a:	d004      	beq.n	6796 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0xfe>
            {
                callback(callbackParam);
    678c:	f89d 2013 	ldrb.w	r2, [sp, #19]
    6790:	9b05      	ldr	r3, [sp, #20]
    6792:	4610      	mov	r0, r2
    6794:	4798      	blx	r3
                Ftm_Gpt_Ip_u32TargetValue[instance][channel] = Ftm_Gpt_Ip_u32NextTargetValue[instance][channel];
                Ftm_Gpt_Ip_u32NextTargetValue[instance][channel] = 0x0U;
            }
#endif
            /* Check if channel mode is ONE-SHOT */
            channelMode = Ftm_Gpt_Ip_u32ChState[instance][channel].channelMode;
    6796:	f89d 2007 	ldrb.w	r2, [sp, #7]
    679a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    679e:	4920      	ldr	r1, [pc, #128]	; (6820 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    67a0:	00d2      	lsls	r2, r2, #3
    67a2:	4413      	add	r3, r2
    67a4:	011b      	lsls	r3, r3, #4
    67a6:	440b      	add	r3, r1
    67a8:	330c      	adds	r3, #12
    67aa:	681b      	ldr	r3, [r3, #0]
    67ac:	9303      	str	r3, [sp, #12]
            if(FTM_GPT_IP_CH_MODE_ONESHOT == channelMode)
    67ae:	9b03      	ldr	r3, [sp, #12]
    67b0:	2b01      	cmp	r3, #1
    67b2:	d108      	bne.n	67c6 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x12e>
            {
                Ftm_Gpt_Ip_DisableChannelInterrupt(instance, channel);
    67b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
    67b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    67bc:	4611      	mov	r1, r2
    67be:	4618      	mov	r0, r3
    67c0:	f000 f9ce 	bl	6b60 <Ftm_Gpt_Ip_DisableChannelInterrupt>
                    Ftm_Gpt_Ip_SetCompareValue(instance, channel, (uint32)(oldCmpValue + targetValue));
                }
            }
        }
    }
}
    67c4:	e027      	b.n	6816 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
                targetValue = Ftm_Gpt_Ip_u32TargetValue[instance][channel];
    67c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    67ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
    67ce:	4915      	ldr	r1, [pc, #84]	; (6824 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x18c>)
    67d0:	00d2      	lsls	r2, r2, #3
    67d2:	4413      	add	r3, r2
    67d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    67d8:	9302      	str	r3, [sp, #8]
                if ((uint32)(oldCmpValue + targetValue) > FTM_CNT_MAX_VALUE)
    67da:	9a07      	ldr	r2, [sp, #28]
    67dc:	9b02      	ldr	r3, [sp, #8]
    67de:	4413      	add	r3, r2
    67e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    67e4:	d30d      	bcc.n	6802 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x16a>
                    Ftm_Gpt_Ip_SetCompareValue(instance, channel, (uint32)(targetValue - (FTM_CNT_MAX_VALUE - oldCmpValue)));
    67e6:	9a07      	ldr	r2, [sp, #28]
    67e8:	9b02      	ldr	r3, [sp, #8]
    67ea:	4413      	add	r3, r2
    67ec:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
    67f0:	3bff      	subs	r3, #255	; 0xff
    67f2:	f89d 1006 	ldrb.w	r1, [sp, #6]
    67f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    67fa:	461a      	mov	r2, r3
    67fc:	f7ff fe88 	bl	6510 <Ftm_Gpt_Ip_SetCompareValue>
}
    6800:	e009      	b.n	6816 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
                    Ftm_Gpt_Ip_SetCompareValue(instance, channel, (uint32)(oldCmpValue + targetValue));
    6802:	9a07      	ldr	r2, [sp, #28]
    6804:	9b02      	ldr	r3, [sp, #8]
    6806:	441a      	add	r2, r3
    6808:	f89d 1006 	ldrb.w	r1, [sp, #6]
    680c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6810:	4618      	mov	r0, r3
    6812:	f7ff fe7d 	bl	6510 <Ftm_Gpt_Ip_SetCompareValue>
}
    6816:	bf00      	nop
    6818:	b009      	add	sp, #36	; 0x24
    681a:	f85d fb04 	ldr.w	pc, [sp], #4
    681e:	bf00      	nop
    6820:	1fff8dc8 	.word	0x1fff8dc8
    6824:	1fff8d38 	.word	0x1fff8d38

00006828 <Ftm_Gpt_Ip_Init>:
* @return        void
* @pre           The data structure including the configuration set required for initializing the GPT driver
* @implements    Ftm_Gpt_Ip_Init_Activity
*/
void Ftm_Gpt_Ip_Init(uint8 instance, const Ftm_Gpt_Ip_InstanceConfigType *configPtr)
{
    6828:	b500      	push	{lr}
    682a:	b083      	sub	sp, #12
    682c:	4603      	mov	r3, r0
    682e:	9100      	str	r1, [sp, #0]
    6830:	f88d 3007 	strb.w	r3, [sp, #7]
#endif
    /* Enable register access from user mode, if enabled from configuration file */
    Call_Ftm_Gpt_Ip_SetUserAccessAllowed((uint32)ftmGptBase[instance]);

    /* Check the FTM counter modes */
    if (FTM_GPT_IP_MODE_UP_TIMER == configPtr->mode)
    6834:	9b00      	ldr	r3, [sp, #0]
    6836:	68db      	ldr	r3, [r3, #12]
    6838:	2b01      	cmp	r3, #1
    683a:	d12a      	bne.n	6892 <Ftm_Gpt_Ip_Init+0x6a>
    {
        /* Set clock and prescalerValue FTM */
        Ftm_Gpt_Ip_SetPrescaler(instance, configPtr->clockPrescaler);
    683c:	9b00      	ldr	r3, [sp, #0]
    683e:	7a1a      	ldrb	r2, [r3, #8]
    6840:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6844:	4611      	mov	r1, r2
    6846:	4618      	mov	r0, r3
    6848:	f7ff fe06 	bl	6458 <Ftm_Gpt_Ip_SetPrescaler>
        /* Set FTM counter clock source */
        Ftm_Gpt_Ip_SetClockSource(instance, configPtr->clocksource);
    684c:	9b00      	ldr	r3, [sp, #0]
    684e:	685a      	ldr	r2, [r3, #4]
    6850:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6854:	4611      	mov	r1, r2
    6856:	4618      	mov	r0, r3
    6858:	f7ff fdda 	bl	6410 <Ftm_Gpt_Ip_SetClockSource>

        /* Set freeze bits */
        Ftm_Gpt_Ip_SetFreezeBits(instance, configPtr->freezeBits);
    685c:	9b00      	ldr	r3, [sp, #0]
    685e:	781a      	ldrb	r2, [r3, #0]
    6860:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6864:	4611      	mov	r1, r2
    6866:	4618      	mov	r0, r3
    6868:	f7ff fd20 	bl	62ac <Ftm_Gpt_Ip_SetFreezeBits>

        /*Set Counter register and Initial Counter Value*/
        Ftm_Gpt_Ip_SetCounterInitVal(instance, 1U);
    686c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6870:	2101      	movs	r1, #1
    6872:	4618      	mov	r0, r3
    6874:	f7ff fd4a 	bl	630c <Ftm_Gpt_Ip_SetCounterInitVal>

        /* write the Ftm Modulo Register with 0xFFFF */
        Ftm_Gpt_Ip_WriteModulo(instance, 0xFFFFU);
    6878:	f89d 3007 	ldrb.w	r3, [sp, #7]
    687c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6880:	4618      	mov	r0, r3
    6882:	f7ff fe5f 	bl	6544 <Ftm_Gpt_Ip_WriteModulo>

        /* set FTM Enable bit */
        Ftm_Gpt_Ip_SetEnFtmModule(instance, TRUE);
    6886:	f89d 3007 	ldrb.w	r3, [sp, #7]
    688a:	2101      	movs	r1, #1
    688c:	4618      	mov	r0, r3
    688e:	f7ff fe09 	bl	64a4 <Ftm_Gpt_Ip_SetEnFtmModule>
#if (FTM_GPT_IP_SET_CLOCK_MODE == STD_ON)
    Ftm_Gpt_Ip_u32InstancePrescaler[instance].clockPrescaler = configPtr->clockPrescaler;
    Ftm_Gpt_Ip_u32InstancePrescaler[instance].clockAlternatePrescaler = configPtr->clockAlternatePrescaler;
#endif
    /* set FTM instance status to initialized */
    Ftm_Gpt_Ip_u32InstanceState[instance] = FTM_GPT_IP_STATUS_INITIALIZED;
    6892:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6896:	4a04      	ldr	r2, [pc, #16]	; (68a8 <Ftm_Gpt_Ip_Init+0x80>)
    6898:	2101      	movs	r1, #1
    689a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    689e:	bf00      	nop
    68a0:	b003      	add	sp, #12
    68a2:	f85d fb04 	ldr.w	pc, [sp], #4
    68a6:	bf00      	nop
    68a8:	1fff8db8 	.word	0x1fff8db8

000068ac <Ftm_Gpt_Ip_InitChannel>:
* @return        void
* @pre           The data structure including the configuration set required for initializing the GPT driver
* @implements    Ftm_Gpt_Ip_InitChannel_Activity
*/
void Ftm_Gpt_Ip_InitChannel(uint8 instance, const Ftm_Gpt_Ip_ChannelConfigType *configPtr)
{
    68ac:	b500      	push	{lr}
    68ae:	b083      	sub	sp, #12
    68b0:	4603      	mov	r3, r0
    68b2:	9100      	str	r1, [sp, #0]
    68b4:	f88d 3007 	strb.w	r3, [sp, #7]
    DevAssert(FTM_INSTANCE_COUNT > instance);
    DevAssert(FTM_CONTROLS_COUNT > configPtr->hwChannel);
#endif

    /* Disable channels interrupt bit */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, configPtr->hwChannel, FALSE);
    68b8:	9b00      	ldr	r3, [sp, #0]
    68ba:	7819      	ldrb	r1, [r3, #0]
    68bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68c0:	2200      	movs	r2, #0
    68c2:	4618      	mov	r0, r3
    68c4:	f7ff fd74 	bl	63b0 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear ClearInterruptFlag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, configPtr->hwChannel);
    68c8:	9b00      	ldr	r3, [sp, #0]
    68ca:	781a      	ldrb	r2, [r3, #0]
    68cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68d0:	4611      	mov	r1, r2
    68d2:	4618      	mov	r0, r3
    68d4:	f7ff fd46 	bl	6364 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Set Compare Value register to 0xFFFF */
    Ftm_Gpt_Ip_SetCompareValue(instance, configPtr->hwChannel, 0xFFFFU);
    68d8:	9b00      	ldr	r3, [sp, #0]
    68da:	7819      	ldrb	r1, [r3, #0]
    68dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    68e4:	4618      	mov	r0, r3
    68e6:	f7ff fe13 	bl	6510 <Ftm_Gpt_Ip_SetCompareValue>
    /* Set bit MSA */
    Ftm_Gpt_Ip_ModeSelectA(instance, configPtr->hwChannel, TRUE);
    68ea:	9b00      	ldr	r3, [sp, #0]
    68ec:	7819      	ldrb	r1, [r3, #0]
    68ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68f2:	2201      	movs	r2, #1
    68f4:	4618      	mov	r0, r3
    68f6:	f7ff fe3b 	bl	6570 <Ftm_Gpt_Ip_ModeSelectA>
     (defined FTM_4_CH_4_CH_5_ISR_USED) || (defined FTM_4_CH_6_CH_7_ISR_USED) || (defined FTM_5_CH_0_CH_1_ISR_USED) || \
     (defined FTM_5_CH_2_CH_3_ISR_USED) || (defined FTM_5_CH_4_CH_5_ISR_USED) || (defined FTM_5_CH_6_CH_7_ISR_USED) || \
     (defined FTM_6_CH_0_CH_1_ISR_USED) || (defined FTM_6_CH_2_CH_3_ISR_USED) || (defined FTM_6_CH_4_CH_5_ISR_USED) || \
     (defined FTM_6_CH_6_CH_7_ISR_USED) || (defined FTM_7_CH_0_CH_1_ISR_USED) || (defined FTM_7_CH_2_CH_3_ISR_USED) || \
     (defined FTM_7_CH_4_CH_5_ISR_USED) || (defined FTM_7_CH_6_CH_7_ISR_USED))
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].chInit = TRUE;
    68fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68fe:	9a00      	ldr	r2, [sp, #0]
    6900:	7812      	ldrb	r2, [r2, #0]
    6902:	4611      	mov	r1, r2
    6904:	4a1a      	ldr	r2, [pc, #104]	; (6970 <Ftm_Gpt_Ip_InitChannel+0xc4>)
    6906:	00db      	lsls	r3, r3, #3
    6908:	440b      	add	r3, r1
    690a:	011b      	lsls	r3, r3, #4
    690c:	4413      	add	r3, r2
    690e:	2201      	movs	r2, #1
    6910:	701a      	strb	r2, [r3, #0]
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].callback = configPtr->callback;
    6912:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6916:	9a00      	ldr	r2, [sp, #0]
    6918:	7812      	ldrb	r2, [r2, #0]
    691a:	4610      	mov	r0, r2
    691c:	9a00      	ldr	r2, [sp, #0]
    691e:	6852      	ldr	r2, [r2, #4]
    6920:	4913      	ldr	r1, [pc, #76]	; (6970 <Ftm_Gpt_Ip_InitChannel+0xc4>)
    6922:	00db      	lsls	r3, r3, #3
    6924:	4403      	add	r3, r0
    6926:	011b      	lsls	r3, r3, #4
    6928:	440b      	add	r3, r1
    692a:	3304      	adds	r3, #4
    692c:	601a      	str	r2, [r3, #0]
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].callbackParam = configPtr->callbackParam;
    692e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6932:	9a00      	ldr	r2, [sp, #0]
    6934:	7812      	ldrb	r2, [r2, #0]
    6936:	4610      	mov	r0, r2
    6938:	9a00      	ldr	r2, [sp, #0]
    693a:	7a11      	ldrb	r1, [r2, #8]
    693c:	4a0c      	ldr	r2, [pc, #48]	; (6970 <Ftm_Gpt_Ip_InitChannel+0xc4>)
    693e:	00db      	lsls	r3, r3, #3
    6940:	4403      	add	r3, r0
    6942:	011b      	lsls	r3, r3, #4
    6944:	4413      	add	r3, r2
    6946:	3308      	adds	r3, #8
    6948:	460a      	mov	r2, r1
    694a:	701a      	strb	r2, [r3, #0]
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].channelMode = configPtr->channelMode;
    694c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6950:	9a00      	ldr	r2, [sp, #0]
    6952:	7812      	ldrb	r2, [r2, #0]
    6954:	4610      	mov	r0, r2
    6956:	9a00      	ldr	r2, [sp, #0]
    6958:	68d2      	ldr	r2, [r2, #12]
    695a:	4905      	ldr	r1, [pc, #20]	; (6970 <Ftm_Gpt_Ip_InitChannel+0xc4>)
    695c:	00db      	lsls	r3, r3, #3
    695e:	4403      	add	r3, r0
    6960:	011b      	lsls	r3, r3, #4
    6962:	440b      	add	r3, r1
    6964:	330c      	adds	r3, #12
    6966:	601a      	str	r2, [r3, #0]
#endif
}
    6968:	bf00      	nop
    696a:	b003      	add	sp, #12
    696c:	f85d fb04 	ldr.w	pc, [sp], #4
    6970:	1fff8dc8 	.word	0x1fff8dc8

00006974 <Ftm_Gpt_Ip_Deinit>:
* @return        void
* @pre           The data structure including the configuration set required for initializing the GPT driver.
* @implements    Ftm_Gpt_Ip_Deinit_Activity
*/
void Ftm_Gpt_Ip_Deinit(uint8 instance)
{
    6974:	b500      	push	{lr}
    6976:	b085      	sub	sp, #20
    6978:	4603      	mov	r3, r0
    697a:	f88d 3007 	strb.w	r3, [sp, #7]
    #endif

    uint8 channelIndex;

    /* Reset all channels to default */
    for (channelIndex = 0; channelIndex < FTM_CONTROLS_COUNT; channelIndex++)
    697e:	2300      	movs	r3, #0
    6980:	f88d 300f 	strb.w	r3, [sp, #15]
    6984:	e014      	b.n	69b0 <Ftm_Gpt_Ip_Deinit+0x3c>
    {
        /* Disable interrupts */
        Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channelIndex, FALSE );
    6986:	f89d 100f 	ldrb.w	r1, [sp, #15]
    698a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    698e:	2200      	movs	r2, #0
    6990:	4618      	mov	r0, r3
    6992:	f7ff fd0d 	bl	63b0 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
        /*Clear interrupt flags*/
        Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channelIndex);
    6996:	f89d 200f 	ldrb.w	r2, [sp, #15]
    699a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    699e:	4611      	mov	r1, r2
    69a0:	4618      	mov	r0, r3
    69a2:	f7ff fcdf 	bl	6364 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    for (channelIndex = 0; channelIndex < FTM_CONTROLS_COUNT; channelIndex++)
    69a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    69aa:	3301      	adds	r3, #1
    69ac:	f88d 300f 	strb.w	r3, [sp, #15]
    69b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    69b4:	2b07      	cmp	r3, #7
    69b6:	d9e6      	bls.n	6986 <Ftm_Gpt_Ip_Deinit+0x12>
    }
    /* Set clock source as 'No clock'. This in effect disables the FTM counter */
    Ftm_Gpt_Ip_SetClockSource(instance, FTM_GPT_IP_CLOCK_SOURCE_NONE);
    69b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69bc:	2100      	movs	r1, #0
    69be:	4618      	mov	r0, r3
    69c0:	f7ff fd26 	bl	6410 <Ftm_Gpt_Ip_SetClockSource>
    /* clear FTM Enable bit */
    Ftm_Gpt_Ip_SetEnFtmModule(instance, FALSE);
    69c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69c8:	2100      	movs	r1, #0
    69ca:	4618      	mov	r0, r3
    69cc:	f7ff fd6a 	bl	64a4 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* clearde freeze bits */
    Ftm_Gpt_Ip_SetFreezeBits(instance, FALSE);
    69d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69d4:	2100      	movs	r1, #0
    69d6:	4618      	mov	r0, r3
    69d8:	f7ff fc68 	bl	62ac <Ftm_Gpt_Ip_SetFreezeBits>
    /* Set Counter register to 0 and Initial Counter Value to 0 */
    Ftm_Gpt_Ip_SetCounterInitVal(instance, 0U);
    69dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69e0:	2100      	movs	r1, #0
    69e2:	4618      	mov	r0, r3
    69e4:	f7ff fc92 	bl	630c <Ftm_Gpt_Ip_SetCounterInitVal>
    Ftm_Gpt_Ip_SetCounter(instance, 0U);
    69e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69ec:	2100      	movs	r1, #0
    69ee:	4618      	mov	r0, r3
    69f0:	f7ff fca2 	bl	6338 <Ftm_Gpt_Ip_SetCounter>
    /* set FTM instance status to uninitialized */
    Ftm_Gpt_Ip_u32InstanceState[instance] = FTM_GPT_IP_STATUS_UNINITIALIZED;
    69f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69f8:	4a03      	ldr	r2, [pc, #12]	; (6a08 <Ftm_Gpt_Ip_Deinit+0x94>)
    69fa:	2100      	movs	r1, #0
    69fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    6a00:	bf00      	nop
    6a02:	b005      	add	sp, #20
    6a04:	f85d fb04 	ldr.w	pc, [sp], #4
    6a08:	1fff8db8 	.word	0x1fff8db8

00006a0c <Ftm_Gpt_Ip_StartCounting>:
* @return        void
* @pre           The driver needs to be initialized. This function is called for starting the FTM timer channel.
* @implements    Ftm_Gpt_Ip_StartCounting_Activity
*/
void Ftm_Gpt_Ip_StartCounting(uint8 instance, uint8 channel, uint16 compareValue)
{
    6a0c:	b500      	push	{lr}
    6a0e:	b085      	sub	sp, #20
    6a10:	4603      	mov	r3, r0
    6a12:	f88d 3007 	strb.w	r3, [sp, #7]
    6a16:	460b      	mov	r3, r1
    6a18:	f88d 3006 	strb.w	r3, [sp, #6]
    6a1c:	4613      	mov	r3, r2
    6a1e:	f8ad 3004 	strh.w	r3, [sp, #4]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
    DevAssert(FTM_INSTANCE_COUNT > instance);
    DevAssert(FTM_CONTROLS_COUNT > channel);
#endif
    uint32 counterValue;
    uint32 currentCntValue = Ftm_Gpt_Ip_GetCntValue(instance);
    6a22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a26:	4618      	mov	r0, r3
    6a28:	f7ff fc18 	bl	625c <Ftm_Gpt_Ip_GetCntValue>
    6a2c:	9002      	str	r0, [sp, #8]

    if ((uint32)(currentCntValue + compareValue) > FTM_CNT_MAX_VALUE)
    6a2e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6a32:	9b02      	ldr	r3, [sp, #8]
    6a34:	4413      	add	r3, r2
    6a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    6a3a:	d308      	bcc.n	6a4e <Ftm_Gpt_Ip_StartCounting+0x42>
    {
        counterValue = (uint32)(compareValue - (FTM_CNT_MAX_VALUE - currentCntValue));
    6a3c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6a40:	9b02      	ldr	r3, [sp, #8]
    6a42:	4413      	add	r3, r2
    6a44:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
    6a48:	3bff      	subs	r3, #255	; 0xff
    6a4a:	9303      	str	r3, [sp, #12]
    6a4c:	e004      	b.n	6a58 <Ftm_Gpt_Ip_StartCounting+0x4c>
    }
    else
    {
        counterValue = (uint32)(currentCntValue + compareValue);
    6a4e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6a52:	9a02      	ldr	r2, [sp, #8]
    6a54:	4413      	add	r3, r2
    6a56:	9303      	str	r3, [sp, #12]
    }
    /* Set new compare value */
    Ftm_Gpt_Ip_SetCompareValue(instance, channel, counterValue);
    6a58:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6a5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a60:	9a03      	ldr	r2, [sp, #12]
    6a62:	4618      	mov	r0, r3
    6a64:	f7ff fd54 	bl	6510 <Ftm_Gpt_Ip_SetCompareValue>
    /* Save compare value */
    Ftm_Gpt_Ip_u32TargetValue[instance][channel] = compareValue;
    6a68:	f89d 1007 	ldrb.w	r1, [sp, #7]
    6a6c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6a70:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6a74:	480c      	ldr	r0, [pc, #48]	; (6aa8 <Ftm_Gpt_Ip_StartCounting+0x9c>)
    6a76:	00c9      	lsls	r1, r1, #3
    6a78:	440b      	add	r3, r1
    6a7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    /* Clear CHF flag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance,channel);
    6a7e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6a82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a86:	4611      	mov	r1, r2
    6a88:	4618      	mov	r0, r3
    6a8a:	f7ff fc6b 	bl	6364 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Enable interrupt */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, TRUE);
    6a8e:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6a92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a96:	2201      	movs	r2, #1
    6a98:	4618      	mov	r0, r3
    6a9a:	f7ff fc89 	bl	63b0 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>

}
    6a9e:	bf00      	nop
    6aa0:	b005      	add	sp, #20
    6aa2:	f85d fb04 	ldr.w	pc, [sp], #4
    6aa6:	bf00      	nop
    6aa8:	1fff8d38 	.word	0x1fff8d38

00006aac <Ftm_Gpt_Ip_StartTimer>:
 *                  - enables the FTM counter
 * @pre           The driver needs to be initialized.
 * @implements    Ftm_Gpt_Ip_StartTimer_Activity
 */
void Ftm_Gpt_Ip_StartTimer(uint8 instance, uint16 counterValue)
{
    6aac:	b500      	push	{lr}
    6aae:	b083      	sub	sp, #12
    6ab0:	4603      	mov	r3, r0
    6ab2:	460a      	mov	r2, r1
    6ab4:	f88d 3007 	strb.w	r3, [sp, #7]
    6ab8:	4613      	mov	r3, r2
    6aba:	f8ad 3004 	strh.w	r3, [sp, #4]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
    DevAssert(FTM_INSTANCE_COUNT > instance);
#endif
    if (instance < FTM_INSTANCE_COUNT)
    6abe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ac2:	2b03      	cmp	r3, #3
    6ac4:	d814      	bhi.n	6af0 <Ftm_Gpt_Ip_StartTimer+0x44>
    {
        if (FTM_GPT_IP_STATUS_INITIALIZED == Ftm_Gpt_Ip_u32InstanceState[instance])
    6ac6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6aca:	4a0b      	ldr	r2, [pc, #44]	; (6af8 <Ftm_Gpt_Ip_StartTimer+0x4c>)
    6acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ad0:	2b01      	cmp	r3, #1
    6ad2:	d10d      	bne.n	6af0 <Ftm_Gpt_Ip_StartTimer+0x44>
        {
            /* Set the new value counter */
            Ftm_Gpt_Ip_SetCounterInitVal(instance, counterValue);
    6ad4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6ad8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6adc:	4611      	mov	r1, r2
    6ade:	4618      	mov	r0, r3
    6ae0:	f7ff fc14 	bl	630c <Ftm_Gpt_Ip_SetCounterInitVal>
            /* set FTM Enable bit */
            Ftm_Gpt_Ip_SetEnFtmModule(instance, TRUE);
    6ae4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ae8:	2101      	movs	r1, #1
    6aea:	4618      	mov	r0, r3
    6aec:	f7ff fcda 	bl	64a4 <Ftm_Gpt_Ip_SetEnFtmModule>
        }
    }
}
    6af0:	bf00      	nop
    6af2:	b003      	add	sp, #12
    6af4:	f85d fb04 	ldr.w	pc, [sp], #4
    6af8:	1fff8db8 	.word	0x1fff8db8

00006afc <Ftm_Gpt_Ip_StopTimer>:
* @return        void
* @pre           The driver needs to be initialized. This function is called for stoping the FTM timer channel.
* @implements    Ftm_Gpt_Ip_StopTimer_Activity
*/
void Ftm_Gpt_Ip_StopTimer(uint8 instance)
{
    6afc:	b500      	push	{lr}
    6afe:	b083      	sub	sp, #12
    6b00:	4603      	mov	r3, r0
    6b02:	f88d 3007 	strb.w	r3, [sp, #7]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
DevAssert(FTM_INSTANCE_COUNT > instance);
#endif
    /* clear FTM Enable bit */
    Ftm_Gpt_Ip_SetEnFtmModule(instance, FALSE);
    6b06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b0a:	2100      	movs	r1, #0
    6b0c:	4618      	mov	r0, r3
    6b0e:	f7ff fcc9 	bl	64a4 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* Set clock source as 'No clock'. This in effect disables the FTM counter */
    Ftm_Gpt_Ip_SetClockSource(instance, FTM_GPT_IP_CLOCK_SOURCE_NONE);
    6b12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b16:	2100      	movs	r1, #0
    6b18:	4618      	mov	r0, r3
    6b1a:	f7ff fc79 	bl	6410 <Ftm_Gpt_Ip_SetClockSource>
}
    6b1e:	bf00      	nop
    6b20:	b003      	add	sp, #12
    6b22:	f85d fb04 	ldr.w	pc, [sp], #4

00006b26 <Ftm_Gpt_Ip_EnableChannelInterrupt>:
* @return       void
* @pre          The driver needs to be initialized.
* @implements   Ftm_Gpt_Ip_EnableChannelInterrupt_Activity
*/
void Ftm_Gpt_Ip_EnableChannelInterrupt(uint8 instance, uint8 channel)
{
    6b26:	b500      	push	{lr}
    6b28:	b083      	sub	sp, #12
    6b2a:	4603      	mov	r3, r0
    6b2c:	460a      	mov	r2, r1
    6b2e:	f88d 3007 	strb.w	r3, [sp, #7]
    6b32:	4613      	mov	r3, r2
    6b34:	f88d 3006 	strb.w	r3, [sp, #6]
DevAssert(FTM_INSTANCE_COUNT > instance);
DevAssert(FTM_CONTROLS_COUNT > channel);
#endif

     /* Clear interrupt flag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6b38:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6b3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b40:	4611      	mov	r1, r2
    6b42:	4618      	mov	r0, r3
    6b44:	f7ff fc0e 	bl	6364 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Enable channel interrupt */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, TRUE);
    6b48:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6b4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b50:	2201      	movs	r2, #1
    6b52:	4618      	mov	r0, r3
    6b54:	f7ff fc2c 	bl	63b0 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
}
    6b58:	bf00      	nop
    6b5a:	b003      	add	sp, #12
    6b5c:	f85d fb04 	ldr.w	pc, [sp], #4

00006b60 <Ftm_Gpt_Ip_DisableChannelInterrupt>:
* @return        void
* @pre           The driver needs to be initialized.
* @implements    Ftm_Gpt_Ip_DisableChannelInterrupt_Activity
*/
void Ftm_Gpt_Ip_DisableChannelInterrupt(uint8 instance, uint8 channel)
{
    6b60:	b500      	push	{lr}
    6b62:	b083      	sub	sp, #12
    6b64:	4603      	mov	r3, r0
    6b66:	460a      	mov	r2, r1
    6b68:	f88d 3007 	strb.w	r3, [sp, #7]
    6b6c:	4613      	mov	r3, r2
    6b6e:	f88d 3006 	strb.w	r3, [sp, #6]
DevAssert(FTM_INSTANCE_COUNT > instance);
DevAssert(FTM_CONTROLS_COUNT > channel);
#endif

    /* Disable interrupt */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, FALSE);
    6b72:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6b76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b7a:	2200      	movs	r2, #0
    6b7c:	4618      	mov	r0, r3
    6b7e:	f7ff fc17 	bl	63b0 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear interrupt flag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6b82:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6b86:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b8a:	4611      	mov	r1, r2
    6b8c:	4618      	mov	r0, r3
    6b8e:	f7ff fbe9 	bl	6364 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
}
    6b92:	bf00      	nop
    6b94:	b003      	add	sp, #12
    6b96:	f85d fb04 	ldr.w	pc, [sp], #4

00006b9a <Ftm_Gpt_Ip_SetHalfCycleReloadPoint>:
* @return
* @pre           The driver needs to be initialized.
* @implements    Ftm_Gpt_Ip_SetHalfCycleReloadPoint_Activity
*/
void Ftm_Gpt_Ip_SetHalfCycleReloadPoint(uint8 instance, uint16 reloadPoint)
{
    6b9a:	b500      	push	{lr}
    6b9c:	b083      	sub	sp, #12
    6b9e:	4603      	mov	r3, r0
    6ba0:	460a      	mov	r2, r1
    6ba2:	f88d 3007 	strb.w	r3, [sp, #7]
    6ba6:	4613      	mov	r3, r2
    6ba8:	f8ad 3004 	strh.w	r3, [sp, #4]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
DevAssert(FTM_INSTANCE_COUNT > instance);
#endif
    Ftm_Gpt_Ip_SetHalfCycleValue(ftmGptBase[instance], reloadPoint);
    6bac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bb0:	4a06      	ldr	r2, [pc, #24]	; (6bcc <Ftm_Gpt_Ip_SetHalfCycleReloadPoint+0x32>)
    6bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bb6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6bba:	4611      	mov	r1, r2
    6bbc:	4618      	mov	r0, r3
    6bbe:	f7ff fd21 	bl	6604 <Ftm_Gpt_Ip_SetHalfCycleValue>
}
    6bc2:	bf00      	nop
    6bc4:	b003      	add	sp, #12
    6bc6:	f85d fb04 	ldr.w	pc, [sp], #4
    6bca:	bf00      	nop
    6bcc:	0000bf7c 	.word	0x0000bf7c

00006bd0 <Ftm_Gpt_Ip_StartPredefTimer>:
* @param[in]  bFreezeEnable   enables/disables freeze bits
* @return     void
* @pre        The driver needs to be initialized
*/
void Ftm_Gpt_Ip_StartPredefTimer (uint8 instance,uint8 channel, uint8 uPrescaler, uint8 clocksource, boolean bFreezeEnable)
{
    6bd0:	b510      	push	{r4, lr}
    6bd2:	b082      	sub	sp, #8
    6bd4:	4604      	mov	r4, r0
    6bd6:	4608      	mov	r0, r1
    6bd8:	4611      	mov	r1, r2
    6bda:	461a      	mov	r2, r3
    6bdc:	4623      	mov	r3, r4
    6bde:	f88d 3007 	strb.w	r3, [sp, #7]
    6be2:	4603      	mov	r3, r0
    6be4:	f88d 3006 	strb.w	r3, [sp, #6]
    6be8:	460b      	mov	r3, r1
    6bea:	f88d 3005 	strb.w	r3, [sp, #5]
    6bee:	4613      	mov	r3, r2
    6bf0:	f88d 3004 	strb.w	r3, [sp, #4]

    /* Enable register access from user mode, if enabled from configuration file */
    Call_Ftm_Gpt_Ip_SetUserAccessAllowed((uint32)ftmGptBase[instance]);

    /* Disable all interrupts on this channel */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, FALSE);
    6bf4:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6bf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bfc:	2200      	movs	r2, #0
    6bfe:	4618      	mov	r0, r3
    6c00:	f7ff fbd6 	bl	63b0 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear interrupt flags */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6c04:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6c08:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c0c:	4611      	mov	r1, r2
    6c0e:	4618      	mov	r0, r3
    6c10:	f7ff fba8 	bl	6364 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Disable TOIE flags */
    ftmGptBase[instance]-> SC &= (~(FTM_SC_TOIE_MASK));
    6c14:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c18:	4a35      	ldr	r2, [pc, #212]	; (6cf0 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c1e:	681a      	ldr	r2, [r3, #0]
    6c20:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c24:	4932      	ldr	r1, [pc, #200]	; (6cf0 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    6c2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    6c2e:	601a      	str	r2, [r3, #0]
    /* Configure FTM as a Free-Running Timer by setting FTMEN=1, CTNIN=0, MOD=0xFFFF, QUADEN=0, CPWMS=0*/
    Ftm_Gpt_Ip_SetEnFtmModule(instance, TRUE);
    6c30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c34:	2101      	movs	r1, #1
    6c36:	4618      	mov	r0, r3
    6c38:	f7ff fc34 	bl	64a4 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* Initial Counter Value to 0 */
    Ftm_Gpt_Ip_SetCounterInitVal(instance, 0U);
    6c3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c40:	2100      	movs	r1, #0
    6c42:	4618      	mov	r0, r3
    6c44:	f7ff fb62 	bl	630c <Ftm_Gpt_Ip_SetCounterInitVal>
    /* write the Ftm Modulo Register with 0xFFFF */
    Ftm_Gpt_Ip_WriteModulo(instance, 0xFFFFU);
    6c48:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6c50:	4618      	mov	r0, r3
    6c52:	f7ff fc77 	bl	6544 <Ftm_Gpt_Ip_WriteModulo>
    /* Set Compare Value register to 0xFFFF */
    Ftm_Gpt_Ip_SetCompareValue(instance, channel, 0xFFFFU);
    6c56:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6c5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6c62:	4618      	mov	r0, r3
    6c64:	f7ff fc54 	bl	6510 <Ftm_Gpt_Ip_SetCompareValue>
    /* Enter EA_28*/
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26();
    6c68:	f001 ff88 	bl	8b7c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26>
    /* Clear bit QUADEN */
    ftmGptBase[instance]->QDCTRL &= (~(FTM_QDCTRL_QUADEN_MASK));
    6c6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c70:	4a1f      	ldr	r2, [pc, #124]	; (6cf0 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c76:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    6c7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c7e:	491c      	ldr	r1, [pc, #112]	; (6cf0 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    6c84:	f022 0201 	bic.w	r2, r2, #1
    6c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    /* Clear bit CPWMS */
    ftmGptBase[instance]->SC &= (~(FTM_SC_CPWMS_MASK));
    6c8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c90:	4a17      	ldr	r2, [pc, #92]	; (6cf0 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c96:	681a      	ldr	r2, [r3, #0]
    6c98:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c9c:	4914      	ldr	r1, [pc, #80]	; (6cf0 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    6ca2:	f022 0220 	bic.w	r2, r2, #32
    6ca6:	601a      	str	r2, [r3, #0]
    /* Exit EA_28*/
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26();
    6ca8:	f001 ff94 	bl	8bd4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26>

    /* Configure Predef Timer */
    Ftm_Gpt_Ip_SetPrescaler(instance, uPrescaler);
    6cac:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6cb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cb4:	4611      	mov	r1, r2
    6cb6:	4618      	mov	r0, r3
    6cb8:	f7ff fbce 	bl	6458 <Ftm_Gpt_Ip_SetPrescaler>
    /* Set FTM counter clock source */
    Ftm_Gpt_Ip_SetClockSource(instance, (Ftm_Gpt_Ip_ClockSource)clocksource);
    6cbc:	f89d 2004 	ldrb.w	r2, [sp, #4]
    6cc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cc4:	4611      	mov	r1, r2
    6cc6:	4618      	mov	r0, r3
    6cc8:	f7ff fba2 	bl	6410 <Ftm_Gpt_Ip_SetClockSource>
    /* Set freeze bits */
    Ftm_Gpt_Ip_SetFreezeBits(instance, bFreezeEnable);
    6ccc:	f89d 2010 	ldrb.w	r2, [sp, #16]
    6cd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cd4:	4611      	mov	r1, r2
    6cd6:	4618      	mov	r0, r3
    6cd8:	f7ff fae8 	bl	62ac <Ftm_Gpt_Ip_SetFreezeBits>
    /* Intialize FTM timer by writing any value to CNT register when CLKS not equal 0 */
    ftmGptBase[instance]->CNT = (uint32)(((uint32)1U << FTM_CNT_COUNT_SHIFT) & FTM_CNT_COUNT_MASK);
    6cdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ce0:	4a03      	ldr	r2, [pc, #12]	; (6cf0 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ce6:	2201      	movs	r2, #1
    6ce8:	605a      	str	r2, [r3, #4]
}
    6cea:	bf00      	nop
    6cec:	b002      	add	sp, #8
    6cee:	bd10      	pop	{r4, pc}
    6cf0:	0000bf7c 	.word	0x0000bf7c

00006cf4 <Ftm_Gpt_Ip_StopPredefTimer>:
* @return     void
* @pre        The driver needs to be initialized
*
*/
void Ftm_Gpt_Ip_StopPredefTimer (uint8 instance, uint8 channel)
{
    6cf4:	b500      	push	{lr}
    6cf6:	b083      	sub	sp, #12
    6cf8:	4603      	mov	r3, r0
    6cfa:	460a      	mov	r2, r1
    6cfc:	f88d 3007 	strb.w	r3, [sp, #7]
    6d00:	4613      	mov	r3, r2
    6d02:	f88d 3006 	strb.w	r3, [sp, #6]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
    DevAssert(FTM_INSTANCE_COUNT > instance);
    DevAssert(FTM_CONTROLS_COUNT > channel);
#endif
    /* Set clock source as 'No clock'. This in effect disables the FTM counter */
    Ftm_Gpt_Ip_SetClockSource(instance, FTM_GPT_IP_CLOCK_SOURCE_NONE);
    6d06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d0a:	2100      	movs	r1, #0
    6d0c:	4618      	mov	r0, r3
    6d0e:	f7ff fb7f 	bl	6410 <Ftm_Gpt_Ip_SetClockSource>
    /* Disable all interrupts on this channel */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, FALSE);
    6d12:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6d16:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d1a:	2200      	movs	r2, #0
    6d1c:	4618      	mov	r0, r3
    6d1e:	f7ff fb47 	bl	63b0 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear interrupt flags */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6d22:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6d26:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d2a:	4611      	mov	r1, r2
    6d2c:	4618      	mov	r0, r3
    6d2e:	f7ff fb19 	bl	6364 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* clear FTM Enable bit */
    Ftm_Gpt_Ip_SetEnFtmModule(instance, FALSE);
    6d32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d36:	2100      	movs	r1, #0
    6d38:	4618      	mov	r0, r3
    6d3a:	f7ff fbb3 	bl	64a4 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* Set Counter register to 0 and Initial Counter Value to 0 */
    Ftm_Gpt_Ip_SetCounterInitVal(instance, 0U);
    6d3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d42:	2100      	movs	r1, #0
    6d44:	4618      	mov	r0, r3
    6d46:	f7ff fae1 	bl	630c <Ftm_Gpt_Ip_SetCounterInitVal>
    Ftm_Gpt_Ip_SetCounter(instance, 0U);
    6d4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d4e:	2100      	movs	r1, #0
    6d50:	4618      	mov	r0, r3
    6d52:	f7ff faf1 	bl	6338 <Ftm_Gpt_Ip_SetCounter>
    Ftm_Gpt_Ip_SetCompareValue(instance, channel, 0U);
    6d56:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6d5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d5e:	2200      	movs	r2, #0
    6d60:	4618      	mov	r0, r3
    6d62:	f7ff fbd5 	bl	6510 <Ftm_Gpt_Ip_SetCompareValue>
    Ftm_Gpt_Ip_WriteModulo(instance, 0U );
    6d66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d6a:	2100      	movs	r1, #0
    6d6c:	4618      	mov	r0, r3
    6d6e:	f7ff fbe9 	bl	6544 <Ftm_Gpt_Ip_WriteModulo>
    /* Set bit MSA */
    Ftm_Gpt_Ip_ModeSelectA(instance, channel, FALSE);
    6d72:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6d76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d7a:	2200      	movs	r2, #0
    6d7c:	4618      	mov	r0, r3
    6d7e:	f7ff fbf7 	bl	6570 <Ftm_Gpt_Ip_ModeSelectA>
}
    6d82:	bf00      	nop
    6d84:	b003      	add	sp, #12
    6d86:	f85d fb04 	ldr.w	pc, [sp], #4

00006d8a <FTM_0_CH_0_CH_1_ISR>:
/**
 * @brief          Independent interrupt handler.
 * @details        Interrupt handler for FTM module 0 channel 0 - channel 1.
 */
ISR(FTM_0_CH_0_CH_1_ISR)
{
    6d8a:	b500      	push	{lr}
    6d8c:	b083      	sub	sp, #12
    uint8 channel = 0U;
    6d8e:	2300      	movs	r3, #0
    6d90:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 instance = 0U;
    6d94:	2300      	movs	r3, #0
    6d96:	f88d 3006 	strb.w	r3, [sp, #6]

    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6d9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6d9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6da2:	4611      	mov	r1, r2
    6da4:	4618      	mov	r0, r3
    6da6:	f7ff fc59 	bl	665c <Ftm_Gpt_Ip_GetChannelEventStatus>
    6daa:	4603      	mov	r3, r0
    6dac:	2b00      	cmp	r3, #0
    6dae:	d007      	beq.n	6dc0 <FTM_0_CH_0_CH_1_ISR+0x36>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6db0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6db4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6db8:	4611      	mov	r1, r2
    6dba:	4618      	mov	r0, r3
    6dbc:	f7ff fc6c 	bl	6698 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    channel++;
    6dc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6dc4:	3301      	adds	r3, #1
    6dc6:	f88d 3007 	strb.w	r3, [sp, #7]
    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6dca:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6dce:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6dd2:	4611      	mov	r1, r2
    6dd4:	4618      	mov	r0, r3
    6dd6:	f7ff fc41 	bl	665c <Ftm_Gpt_Ip_GetChannelEventStatus>
    6dda:	4603      	mov	r3, r0
    6ddc:	2b00      	cmp	r3, #0
    6dde:	d007      	beq.n	6df0 <FTM_0_CH_0_CH_1_ISR+0x66>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6de0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6de4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6de8:	4611      	mov	r1, r2
    6dea:	4618      	mov	r0, r3
    6dec:	f7ff fc54 	bl	6698 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    EXIT_INTERRUPT();
    6df0:	f3bf 8f4f 	dsb	sy
}
    6df4:	bf00      	nop
    6df6:	b003      	add	sp, #12
    6df8:	f85d fb04 	ldr.w	pc, [sp], #4

00006dfc <Gpt_ValidateChannelStatus>:
(
    uint8 u8ServiceId,
    Gpt_ChannelType channel,
    uint32 coreID
)
{
    6dfc:	b500      	push	{lr}
    6dfe:	b085      	sub	sp, #20
    6e00:	4603      	mov	r3, r0
    6e02:	9200      	str	r2, [sp, #0]
    6e04:	f88d 3007 	strb.w	r3, [sp, #7]
    6e08:	460b      	mov	r3, r1
    6e0a:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType returnValue = (Std_ReturnType)E_NOT_OK;
    6e0e:	2301      	movs	r3, #1
    6e10:	f88d 300f 	strb.w	r3, [sp, #15]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(u8ServiceId, channel, coreID))
    {
#endif
        if(channel < GPT_HW_CHANNEL_NUM)
    6e14:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e18:	2b01      	cmp	r3, #1
    6e1a:	d814      	bhi.n	6e46 <Gpt_ValidateChannelStatus+0x4a>
                    );
                }
                else
                {
    #else
                    if (GPT_STATUS_RUNNING == Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    6e1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e20:	490c      	ldr	r1, [pc, #48]	; (6e54 <Gpt_ValidateChannelStatus+0x58>)
    6e22:	9a00      	ldr	r2, [sp, #0]
    6e24:	0052      	lsls	r2, r2, #1
    6e26:	4413      	add	r3, r2
    6e28:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    6e2c:	2b04      	cmp	r3, #4
    6e2e:	d107      	bne.n	6e40 <Gpt_ValidateChannelStatus+0x44>
                    {
                        (void)Det_ReportRuntimeError\
    6e30:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e34:	230b      	movs	r3, #11
    6e36:	2100      	movs	r1, #0
    6e38:	2064      	movs	r0, #100	; 0x64
    6e3a:	f004 fc51 	bl	b6e0 <Det_ReportRuntimeError>
    6e3e:	e002      	b.n	6e46 <Gpt_ValidateChannelStatus+0x4a>
                        );
                    }
                    else
                    {
    #endif
                        returnValue = (Std_ReturnType)E_OK;
    6e40:	2300      	movs	r3, #0
    6e42:	f88d 300f 	strb.w	r3, [sp, #15]
    #endif
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
    return returnValue;
    6e46:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6e4a:	4618      	mov	r0, r3
    6e4c:	b005      	add	sp, #20
    6e4e:	f85d fb04 	ldr.w	pc, [sp], #4
    6e52:	bf00      	nop
    6e54:	1fff8fd0 	.word	0x1fff8fd0

00006e58 <Gpt_ValidateMode>:
static inline Std_ReturnType Gpt_ValidateMode
(
	uint8 u8ServiceId,
	uint32 coreID
)
{
    6e58:	b500      	push	{lr}
    6e5a:	b085      	sub	sp, #20
    6e5c:	4603      	mov	r3, r0
    6e5e:	9100      	str	r1, [sp, #0]
    6e60:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType returnValue;
    if (GPT_MODE_SLEEP == Gpt_eMode[coreID])
    6e64:	4a0c      	ldr	r2, [pc, #48]	; (6e98 <Gpt_ValidateMode+0x40>)
    6e66:	9b00      	ldr	r3, [sp, #0]
    6e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e6c:	2b01      	cmp	r3, #1
    6e6e:	d10a      	bne.n	6e86 <Gpt_ValidateMode+0x2e>
    {
        (void)Det_ReportRuntimeError\
    6e70:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e74:	230c      	movs	r3, #12
    6e76:	2100      	movs	r1, #0
    6e78:	2064      	movs	r0, #100	; 0x64
    6e7a:	f004 fc31 	bl	b6e0 <Det_ReportRuntimeError>
            (uint16)GPT_MODULE_ID,\
            (uint8)GPT_INSTANCE_ID,\
            (uint8)u8ServiceId,\
            (uint8)GPT_E_MODE\
        );
		returnValue = (Std_ReturnType)E_NOT_OK;
    6e7e:	2301      	movs	r3, #1
    6e80:	f88d 300f 	strb.w	r3, [sp, #15]
    6e84:	e002      	b.n	6e8c <Gpt_ValidateMode+0x34>
    }
    else
    {
        returnValue = (Std_ReturnType)E_OK;
    6e86:	2300      	movs	r3, #0
    6e88:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return returnValue;
    6e8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6e90:	4618      	mov	r0, r3
    6e92:	b005      	add	sp, #20
    6e94:	f85d fb04 	ldr.w	pc, [sp], #4
    6e98:	1fff8fc8 	.word	0x1fff8fc8

00006e9c <Gpt_ConvertChannelIndexToChannel>:
 *
 * */
static inline Gpt_ChannelType Gpt_ConvertChannelIndexToChannel(Gpt_ChannelType ChannelIndex,
                                                                              uint32 coreID
                                                                              )
{
    6e9c:	b084      	sub	sp, #16
    6e9e:	4603      	mov	r3, r0
    6ea0:	9100      	str	r1, [sp, #0]
    6ea2:	f88d 3007 	strb.w	r3, [sp, #7]
    Gpt_ChannelType Channel;

    for (Channel = 0U; Channel < GPT_HW_CHANNEL_NUM; ++Channel)
    6ea6:	2300      	movs	r3, #0
    6ea8:	f88d 300f 	strb.w	r3, [sp, #15]
    6eac:	e010      	b.n	6ed0 <Gpt_ConvertChannelIndexToChannel+0x34>
    {
        if(ChannelIndex == (*Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap)[Channel])
    6eae:	4a0e      	ldr	r2, [pc, #56]	; (6ee8 <Gpt_ConvertChannelIndexToChannel+0x4c>)
    6eb0:	9b00      	ldr	r3, [sp, #0]
    6eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6eb6:	695a      	ldr	r2, [r3, #20]
    6eb8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6ebc:	5cd3      	ldrb	r3, [r2, r3]
    6ebe:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6ec2:	429a      	cmp	r2, r3
    6ec4:	d009      	beq.n	6eda <Gpt_ConvertChannelIndexToChannel+0x3e>
    for (Channel = 0U; Channel < GPT_HW_CHANNEL_NUM; ++Channel)
    6ec6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6eca:	3301      	adds	r3, #1
    6ecc:	f88d 300f 	strb.w	r3, [sp, #15]
    6ed0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6ed4:	2b01      	cmp	r3, #1
    6ed6:	d9ea      	bls.n	6eae <Gpt_ConvertChannelIndexToChannel+0x12>
    6ed8:	e000      	b.n	6edc <Gpt_ConvertChannelIndexToChannel+0x40>
        {
            break;
    6eda:	bf00      	nop
        }
    }
    return Channel;
    6edc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6ee0:	4618      	mov	r0, r3
    6ee2:	b004      	add	sp, #16
    6ee4:	4770      	bx	lr
    6ee6:	bf00      	nop
    6ee8:	1fff8fcc 	.word	0x1fff8fcc

00006eec <Gpt_CheckStatusNotificationEnabled>:
 * @pre         Gpt_Init,  must be called before.
 *
 *
 * */
static inline void Gpt_CheckStatusNotificationEnabled(uint32 coreID)
{
    6eec:	b500      	push	{lr}
    6eee:	b085      	sub	sp, #20
    6ef0:	9001      	str	r0, [sp, #4]
    Gpt_ChannelType channel;
    Gpt_ChannelType ChannelIndex;

    /*Implements the behaviour for normal mode*/
    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    6ef2:	2300      	movs	r3, #0
    6ef4:	f88d 300f 	strb.w	r3, [sp, #15]
    6ef8:	e059      	b.n	6fae <Gpt_CheckStatusNotificationEnabled+0xc2>
    {
        channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    6efa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6efe:	9901      	ldr	r1, [sp, #4]
    6f00:	4618      	mov	r0, r3
    6f02:	f7ff ffcb 	bl	6e9c <Gpt_ConvertChannelIndexToChannel>
    6f06:	4603      	mov	r3, r0
    6f08:	f88d 300e 	strb.w	r3, [sp, #14]
        if(channel < GPT_HW_CHANNEL_NUM)
    6f0c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f10:	2b01      	cmp	r3, #1
    6f12:	d847      	bhi.n	6fa4 <Gpt_CheckStatusNotificationEnabled+0xb8>
        {
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
            if (TRUE == Gpt_aChannelInfo[coreID][channel].bNotificationEnabled)
    6f14:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f18:	492c      	ldr	r1, [pc, #176]	; (6fcc <Gpt_CheckStatusNotificationEnabled+0xe0>)
    6f1a:	9a01      	ldr	r2, [sp, #4]
    6f1c:	0052      	lsls	r2, r2, #1
    6f1e:	4413      	add	r3, r2
    6f20:	00db      	lsls	r3, r3, #3
    6f22:	440b      	add	r3, r1
    6f24:	791b      	ldrb	r3, [r3, #4]
    6f26:	2b00      	cmp	r3, #0
    6f28:	d011      	beq.n	6f4e <Gpt_CheckStatusNotificationEnabled+0x62>
            {
                /* Enable hardware interrupts */
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    6f2a:	4a29      	ldr	r2, [pc, #164]	; (6fd0 <Gpt_CheckStatusNotificationEnabled+0xe4>)
    6f2c:	9b01      	ldr	r3, [sp, #4]
    6f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f32:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    6f34:	f89d 200f 	ldrb.w	r2, [sp, #15]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    6f38:	4613      	mov	r3, r2
    6f3a:	005b      	lsls	r3, r3, #1
    6f3c:	4413      	add	r3, r2
    6f3e:	00db      	lsls	r3, r3, #3
    6f40:	440b      	add	r3, r1
    6f42:	3314      	adds	r3, #20
    6f44:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    6f46:	4618      	mov	r0, r3
    6f48:	f000 ff7a 	bl	7e40 <Gpt_Ipw_EnableInterrupt>
    6f4c:	e02a      	b.n	6fa4 <Gpt_CheckStatusNotificationEnabled+0xb8>
            else
            {
#endif
                /* Disable hardware interrupts if the channel is not running in the ONE-SHOT mode.
                This is needed because the channel state is updated by ISR for ONE-SHOT mode */
                if((GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus) || \
    6f4e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f52:	491e      	ldr	r1, [pc, #120]	; (6fcc <Gpt_CheckStatusNotificationEnabled+0xe0>)
    6f54:	9a01      	ldr	r2, [sp, #4]
    6f56:	0052      	lsls	r2, r2, #1
    6f58:	4413      	add	r3, r2
    6f5a:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    6f5e:	2b04      	cmp	r3, #4
    6f60:	d10f      	bne.n	6f82 <Gpt_CheckStatusNotificationEnabled+0x96>
                    (GPT_CH_MODE_CONTINUOUS == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    6f62:	4a1b      	ldr	r2, [pc, #108]	; (6fd0 <Gpt_CheckStatusNotificationEnabled+0xe4>)
    6f64:	9b01      	ldr	r3, [sp, #4]
    6f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f6a:	6859      	ldr	r1, [r3, #4]
    6f6c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6f70:	4613      	mov	r3, r2
    6f72:	005b      	lsls	r3, r3, #1
    6f74:	4413      	add	r3, r2
    6f76:	00db      	lsls	r3, r3, #3
    6f78:	440b      	add	r3, r1
    6f7a:	3310      	adds	r3, #16
    6f7c:	681b      	ldr	r3, [r3, #0]
                if((GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus) || \
    6f7e:	2b00      	cmp	r3, #0
    6f80:	d110      	bne.n	6fa4 <Gpt_CheckStatusNotificationEnabled+0xb8>
                    )
                {
                    /*Disable hardware interrupts*/
                    Gpt_Ipw_DisableInterrupt
                    (
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    6f82:	4a13      	ldr	r2, [pc, #76]	; (6fd0 <Gpt_CheckStatusNotificationEnabled+0xe4>)
    6f84:	9b01      	ldr	r3, [sp, #4]
    6f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f8a:	6859      	ldr	r1, [r3, #4]
                    Gpt_Ipw_DisableInterrupt
    6f8c:	f89d 200f 	ldrb.w	r2, [sp, #15]
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    6f90:	4613      	mov	r3, r2
    6f92:	005b      	lsls	r3, r3, #1
    6f94:	4413      	add	r3, r2
    6f96:	00db      	lsls	r3, r3, #3
    6f98:	440b      	add	r3, r1
    6f9a:	3314      	adds	r3, #20
    6f9c:	681b      	ldr	r3, [r3, #0]
                    Gpt_Ipw_DisableInterrupt
    6f9e:	4618      	mov	r0, r3
    6fa0:	f000 ff69 	bl	7e76 <Gpt_Ipw_DisableInterrupt>
    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    6fa4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6fa8:	3301      	adds	r3, #1
    6faa:	f88d 300f 	strb.w	r3, [sp, #15]
    6fae:	4a08      	ldr	r2, [pc, #32]	; (6fd0 <Gpt_CheckStatusNotificationEnabled+0xe4>)
    6fb0:	9b01      	ldr	r3, [sp, #4]
    6fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fb6:	781b      	ldrb	r3, [r3, #0]
    6fb8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6fbc:	429a      	cmp	r2, r3
    6fbe:	d39c      	bcc.n	6efa <Gpt_CheckStatusNotificationEnabled+0xe>
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
            }
#endif
        }
    }
}
    6fc0:	bf00      	nop
    6fc2:	bf00      	nop
    6fc4:	b005      	add	sp, #20
    6fc6:	f85d fb04 	ldr.w	pc, [sp], #4
    6fca:	bf00      	nop
    6fcc:	1fff8fd0 	.word	0x1fff8fd0
    6fd0:	1fff8fcc 	.word	0x1fff8fcc

00006fd4 <Gpt_CheckStatusWakeupEnabled>:
 * @pre         Gpt_Init, Gpt_SetMode must be called before.
 *
 *
 * */
static inline void Gpt_CheckStatusWakeupEnabled(uint32 coreID)
{
    6fd4:	b500      	push	{lr}
    6fd6:	b089      	sub	sp, #36	; 0x24
    6fd8:	9001      	str	r0, [sp, #4]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    6fda:	2300      	movs	r3, #0
    6fdc:	f88d 3008 	strb.w	r3, [sp, #8]
    6fe0:	2300      	movs	r3, #0
    6fe2:	9303      	str	r3, [sp, #12]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    6fe4:	ab02      	add	r3, sp, #8
    6fe6:	9306      	str	r3, [sp, #24]
    Gpt_ValueType uElapsedTime = 0U;
    6fe8:	2300      	movs	r3, #0
    6fea:	9305      	str	r3, [sp, #20]
#endif
    Gpt_ChannelType ChannelIndex;
    Gpt_ChannelType channel;

    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    6fec:	2300      	movs	r3, #0
    6fee:	f88d 301f 	strb.w	r3, [sp, #31]
    6ff2:	e09e      	b.n	7132 <Gpt_CheckStatusWakeupEnabled+0x15e>
    {
        channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    6ff4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6ff8:	9901      	ldr	r1, [sp, #4]
    6ffa:	4618      	mov	r0, r3
    6ffc:	f7ff ff4e 	bl	6e9c <Gpt_ConvertChannelIndexToChannel>
    7000:	4603      	mov	r3, r0
    7002:	f88d 3013 	strb.w	r3, [sp, #19]
        if(channel < GPT_HW_CHANNEL_NUM)
    7006:	f89d 3013 	ldrb.w	r3, [sp, #19]
    700a:	2b01      	cmp	r3, #1
    700c:	f200 808c 	bhi.w	7128 <Gpt_CheckStatusWakeupEnabled+0x154>
        {
            if (TRUE == Gpt_aChannelInfo[coreID][channel].bWakeupEnabled)
    7010:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7014:	494e      	ldr	r1, [pc, #312]	; (7150 <Gpt_CheckStatusWakeupEnabled+0x17c>)
    7016:	9a01      	ldr	r2, [sp, #4]
    7018:	0052      	lsls	r2, r2, #1
    701a:	4413      	add	r3, r2
    701c:	00db      	lsls	r3, r3, #3
    701e:	440b      	add	r3, r1
    7020:	795b      	ldrb	r3, [r3, #5]
    7022:	2b00      	cmp	r3, #0
    7024:	d011      	beq.n	704a <Gpt_CheckStatusWakeupEnabled+0x76>
            {
                /*Enable hardware interrupts*/
                Gpt_Ipw_EnableInterrupt(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    7026:	4a4b      	ldr	r2, [pc, #300]	; (7154 <Gpt_CheckStatusWakeupEnabled+0x180>)
    7028:	9b01      	ldr	r3, [sp, #4]
    702a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    702e:	6859      	ldr	r1, [r3, #4]
    7030:	f89d 201f 	ldrb.w	r2, [sp, #31]
    7034:	4613      	mov	r3, r2
    7036:	005b      	lsls	r3, r3, #1
    7038:	4413      	add	r3, r2
    703a:	00db      	lsls	r3, r3, #3
    703c:	440b      	add	r3, r1
    703e:	3314      	adds	r3, #20
    7040:	681b      	ldr	r3, [r3, #0]
    7042:	4618      	mov	r0, r3
    7044:	f000 fefc 	bl	7e40 <Gpt_Ipw_EnableInterrupt>
    7048:	e06e      	b.n	7128 <Gpt_CheckStatusWakeupEnabled+0x154>
            }
            else
            {
                /*Disable hardware interrupts*/
                Gpt_Ipw_DisableInterrupt(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    704a:	4a42      	ldr	r2, [pc, #264]	; (7154 <Gpt_CheckStatusWakeupEnabled+0x180>)
    704c:	9b01      	ldr	r3, [sp, #4]
    704e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7052:	6859      	ldr	r1, [r3, #4]
    7054:	f89d 201f 	ldrb.w	r2, [sp, #31]
    7058:	4613      	mov	r3, r2
    705a:	005b      	lsls	r3, r3, #1
    705c:	4413      	add	r3, r2
    705e:	00db      	lsls	r3, r3, #3
    7060:	440b      	add	r3, r1
    7062:	3314      	adds	r3, #20
    7064:	681b      	ldr	r3, [r3, #0]
    7066:	4618      	mov	r0, r3
    7068:	f000 ff05 	bl	7e76 <Gpt_Ipw_DisableInterrupt>
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                /*Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs
                can change the logical channel state between the checking of logical channel
                state and timestamp retrieval*/
                /* Get the elapsed  time  for later use by other API calls*/
                uElapsedTime = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    706c:	4a39      	ldr	r2, [pc, #228]	; (7154 <Gpt_CheckStatusWakeupEnabled+0x180>)
    706e:	9b01      	ldr	r3, [sp, #4]
    7070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7074:	6859      	ldr	r1, [r3, #4]
    7076:	f89d 201f 	ldrb.w	r2, [sp, #31]
    707a:	4613      	mov	r3, r2
    707c:	005b      	lsls	r3, r3, #1
    707e:	4413      	add	r3, r2
    7080:	00db      	lsls	r3, r3, #3
    7082:	440b      	add	r3, r1
    7084:	3314      	adds	r3, #20
    7086:	681b      	ldr	r3, [r3, #0]
    7088:	9906      	ldr	r1, [sp, #24]
    708a:	4618      	mov	r0, r3
    708c:	f000 fead 	bl	7dea <Gpt_Ipw_GetTimeElapsed>
    7090:	9005      	str	r0, [sp, #20]
#endif

                /*Stop  the running timer*/
                if (GPT_STATUS_RUNNING == Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    7092:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7096:	492e      	ldr	r1, [pc, #184]	; (7150 <Gpt_CheckStatusWakeupEnabled+0x17c>)
    7098:	9a01      	ldr	r2, [sp, #4]
    709a:	0052      	lsls	r2, r2, #1
    709c:	4413      	add	r3, r2
    709e:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    70a2:	2b04      	cmp	r3, #4
    70a4:	d140      	bne.n	7128 <Gpt_CheckStatusWakeupEnabled+0x154>
                {
                    if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    70a6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    70aa:	2b00      	cmp	r3, #0
    70ac:	d019      	beq.n	70e2 <Gpt_CheckStatusWakeupEnabled+0x10e>
                        (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    70ae:	4a29      	ldr	r2, [pc, #164]	; (7154 <Gpt_CheckStatusWakeupEnabled+0x180>)
    70b0:	9b01      	ldr	r3, [sp, #4]
    70b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70b6:	6859      	ldr	r1, [r3, #4]
    70b8:	f89d 201f 	ldrb.w	r2, [sp, #31]
    70bc:	4613      	mov	r3, r2
    70be:	005b      	lsls	r3, r3, #1
    70c0:	4413      	add	r3, r2
    70c2:	00db      	lsls	r3, r3, #3
    70c4:	440b      	add	r3, r1
    70c6:	3310      	adds	r3, #16
    70c8:	681b      	ldr	r3, [r3, #0]
                    if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    70ca:	2b01      	cmp	r3, #1
    70cc:	d109      	bne.n	70e2 <Gpt_CheckStatusWakeupEnabled+0x10e>
                        )
                    {
                        /*This action could be executed only when the function is called
                        during a critical section implemented by disabling all interrupts*/
                        /*Set the channel status to EXPIRED*/
                        Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_EXPIRED;
    70ce:	f89d 3013 	ldrb.w	r3, [sp, #19]
    70d2:	491f      	ldr	r1, [pc, #124]	; (7150 <Gpt_CheckStatusWakeupEnabled+0x17c>)
    70d4:	9a01      	ldr	r2, [sp, #4]
    70d6:	0052      	lsls	r2, r2, #1
    70d8:	4413      	add	r3, r2
    70da:	2203      	movs	r2, #3
    70dc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    70e0:	e011      	b.n	7106 <Gpt_CheckStatusWakeupEnabled+0x132>
                    }
                    else
                    {
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                        /* Store the stopping time for later use by other API calls*/
                        Gpt_aStopTime[coreID][channel] = uElapsedTime;
    70e2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    70e6:	491c      	ldr	r1, [pc, #112]	; (7158 <Gpt_CheckStatusWakeupEnabled+0x184>)
    70e8:	9a01      	ldr	r2, [sp, #4]
    70ea:	0052      	lsls	r2, r2, #1
    70ec:	4413      	add	r3, r2
    70ee:	9a05      	ldr	r2, [sp, #20]
    70f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
                        /* Set the channel status to STOPPED*/
                        Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_STOPPED;
    70f4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    70f8:	4915      	ldr	r1, [pc, #84]	; (7150 <Gpt_CheckStatusWakeupEnabled+0x17c>)
    70fa:	9a01      	ldr	r2, [sp, #4]
    70fc:	0052      	lsls	r2, r2, #1
    70fe:	4413      	add	r3, r2
    7100:	2202      	movs	r2, #2
    7102:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                    }
                    /* Call low level stop timer */
                    Gpt_Ipw_StopTimer
                    (
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7106:	4a13      	ldr	r2, [pc, #76]	; (7154 <Gpt_CheckStatusWakeupEnabled+0x180>)
    7108:	9b01      	ldr	r3, [sp, #4]
    710a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    710e:	6859      	ldr	r1, [r3, #4]
                    Gpt_Ipw_StopTimer
    7110:	f89d 201f 	ldrb.w	r2, [sp, #31]
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7114:	4613      	mov	r3, r2
    7116:	005b      	lsls	r3, r3, #1
    7118:	4413      	add	r3, r2
    711a:	00db      	lsls	r3, r3, #3
    711c:	440b      	add	r3, r1
    711e:	3314      	adds	r3, #20
    7120:	681b      	ldr	r3, [r3, #0]
                    Gpt_Ipw_StopTimer
    7122:	4618      	mov	r0, r3
    7124:	f000 fe77 	bl	7e16 <Gpt_Ipw_StopTimer>
    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7128:	f89d 301f 	ldrb.w	r3, [sp, #31]
    712c:	3301      	adds	r3, #1
    712e:	f88d 301f 	strb.w	r3, [sp, #31]
    7132:	4a08      	ldr	r2, [pc, #32]	; (7154 <Gpt_CheckStatusWakeupEnabled+0x180>)
    7134:	9b01      	ldr	r3, [sp, #4]
    7136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    713a:	781b      	ldrb	r3, [r3, #0]
    713c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    7140:	429a      	cmp	r2, r3
    7142:	f4ff af57 	bcc.w	6ff4 <Gpt_CheckStatusWakeupEnabled+0x20>
                    );
                }
            }
        }
    }
}
    7146:	bf00      	nop
    7148:	bf00      	nop
    714a:	b009      	add	sp, #36	; 0x24
    714c:	f85d fb04 	ldr.w	pc, [sp], #4
    7150:	1fff8fd0 	.word	0x1fff8fd0
    7154:	1fff8fcc 	.word	0x1fff8fcc
    7158:	1fff8fe0 	.word	0x1fff8fe0

0000715c <Gpt_Init>:
*
* @pre            The data structure including the configuration set required for initializing the GPT driver..
* @implements     Gpt_Init_Activity
*/
void Gpt_Init(const Gpt_ConfigType * configPtr)
{
    715c:	b500      	push	{lr}
    715e:	b087      	sub	sp, #28
    7160:	9001      	str	r0, [sp, #4]
    Gpt_ChannelType ChannelIndex;
    Gpt_ChannelType channel;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7162:	2300      	movs	r3, #0
    7164:	9304      	str	r3, [sp, #16]
        #else
            Gpt_pConfig[coreID] = &Gpt_Config;
        #endif
            (void)configPtr;
    #else
            Gpt_pConfig[coreID] = configPtr;
    7166:	493e      	ldr	r1, [pc, #248]	; (7260 <Gpt_Init+0x104>)
    7168:	9b04      	ldr	r3, [sp, #16]
    716a:	9a01      	ldr	r2, [sp, #4]
    716c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    #endif

#if(GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON)
            /*Initialize and Start Predef Timers.*/
            Gpt_Ipw_StartPredefTimer(Gpt_pConfig[coreID]);
    7170:	4a3b      	ldr	r2, [pc, #236]	; (7260 <Gpt_Init+0x104>)
    7172:	9b04      	ldr	r3, [sp, #16]
    7174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7178:	4618      	mov	r0, r3
    717a:	f000 fe85 	bl	7e88 <Gpt_Ipw_StartPredefTimer>
#endif
            Gpt_Ipw_InitInstances(Gpt_pConfig[coreID]);
    717e:	4a38      	ldr	r2, [pc, #224]	; (7260 <Gpt_Init+0x104>)
    7180:	9b04      	ldr	r3, [sp, #16]
    7182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7186:	4618      	mov	r0, r3
    7188:	f000 fdc4 	bl	7d14 <Gpt_Ipw_InitInstances>

            /*Initialize for each channel the runtime status informations.*/
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    718c:	2300      	movs	r3, #0
    718e:	f88d 3017 	strb.w	r3, [sp, #23]
    7192:	e052      	b.n	723a <Gpt_Init+0xde>
            {
                channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    7194:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7198:	9904      	ldr	r1, [sp, #16]
    719a:	4618      	mov	r0, r3
    719c:	f7ff fe7e 	bl	6e9c <Gpt_ConvertChannelIndexToChannel>
    71a0:	4603      	mov	r3, r0
    71a2:	f88d 300f 	strb.w	r3, [sp, #15]
                if(channel < GPT_HW_CHANNEL_NUM)
    71a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    71aa:	2b01      	cmp	r3, #1
    71ac:	d82f      	bhi.n	720e <Gpt_Init+0xb2>
                {
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
                    /*Disable notification*/
                    Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = FALSE;
    71ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    71b2:	492c      	ldr	r1, [pc, #176]	; (7264 <Gpt_Init+0x108>)
    71b4:	9a04      	ldr	r2, [sp, #16]
    71b6:	0052      	lsls	r2, r2, #1
    71b8:	4413      	add	r3, r2
    71ba:	00db      	lsls	r3, r3, #3
    71bc:	440b      	add	r3, r1
    71be:	2200      	movs	r2, #0
    71c0:	711a      	strb	r2, [r3, #4]
#endif

#if ((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON))
                    /*Disable wakeup*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = FALSE;
    71c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    71c6:	4927      	ldr	r1, [pc, #156]	; (7264 <Gpt_Init+0x108>)
    71c8:	9a04      	ldr	r2, [sp, #16]
    71ca:	0052      	lsls	r2, r2, #1
    71cc:	4413      	add	r3, r2
    71ce:	00db      	lsls	r3, r3, #3
    71d0:	440b      	add	r3, r1
    71d2:	2200      	movs	r2, #0
    71d4:	715a      	strb	r2, [r3, #5]
                    /*Clear wakeup generation status*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupGenerated = FALSE;
    71d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    71da:	4922      	ldr	r1, [pc, #136]	; (7264 <Gpt_Init+0x108>)
    71dc:	9a04      	ldr	r2, [sp, #16]
    71de:	0052      	lsls	r2, r2, #1
    71e0:	4413      	add	r3, r2
    71e2:	00db      	lsls	r3, r3, #3
    71e4:	440b      	add	r3, r1
    71e6:	2200      	movs	r2, #0
    71e8:	719a      	strb	r2, [r3, #6]
#endif
                    /* Initialize the running information of the channel*/
                    Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_INITIALIZED;
    71ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    71ee:	491d      	ldr	r1, [pc, #116]	; (7264 <Gpt_Init+0x108>)
    71f0:	9a04      	ldr	r2, [sp, #16]
    71f2:	0052      	lsls	r2, r2, #1
    71f4:	4413      	add	r3, r2
    71f6:	2201      	movs	r2, #1
    71f8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                    Gpt_aStopTime[coreID][channel] = 0U;
    71fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7200:	4919      	ldr	r1, [pc, #100]	; (7268 <Gpt_Init+0x10c>)
    7202:	9a04      	ldr	r2, [sp, #16]
    7204:	0052      	lsls	r2, r2, #1
    7206:	4413      	add	r3, r2
    7208:	2200      	movs	r2, #0
    720a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
                }

                /*Initialize hardware timer channel.*/
                Gpt_Ipw_Init(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    720e:	4a14      	ldr	r2, [pc, #80]	; (7260 <Gpt_Init+0x104>)
    7210:	9b04      	ldr	r3, [sp, #16]
    7212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7216:	6859      	ldr	r1, [r3, #4]
    7218:	f89d 2017 	ldrb.w	r2, [sp, #23]
    721c:	4613      	mov	r3, r2
    721e:	005b      	lsls	r3, r3, #1
    7220:	4413      	add	r3, r2
    7222:	00db      	lsls	r3, r3, #3
    7224:	440b      	add	r3, r1
    7226:	3314      	adds	r3, #20
    7228:	681b      	ldr	r3, [r3, #0]
    722a:	4618      	mov	r0, r3
    722c:	f000 fda9 	bl	7d82 <Gpt_Ipw_Init>
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7230:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7234:	3301      	adds	r3, #1
    7236:	f88d 3017 	strb.w	r3, [sp, #23]
    723a:	4a09      	ldr	r2, [pc, #36]	; (7260 <Gpt_Init+0x104>)
    723c:	9b04      	ldr	r3, [sp, #16]
    723e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7242:	781b      	ldrb	r3, [r3, #0]
    7244:	f89d 2017 	ldrb.w	r2, [sp, #23]
    7248:	429a      	cmp	r2, r3
    724a:	d3a3      	bcc.n	7194 <Gpt_Init+0x38>
            }
#if (((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON)) || \
     (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON) || \
     (GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON))
            /*Set the driver to normal mode*/
            Gpt_eMode[coreID] = GPT_MODE_NORMAL;
    724c:	4a07      	ldr	r2, [pc, #28]	; (726c <Gpt_Init+0x110>)
    724e:	9b04      	ldr	r3, [sp, #16]
    7250:	2100      	movs	r1, #0
    7252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#endif
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
    return;
    7256:	bf00      	nop
}
    7258:	b007      	add	sp, #28
    725a:	f85d fb04 	ldr.w	pc, [sp], #4
    725e:	bf00      	nop
    7260:	1fff8fcc 	.word	0x1fff8fcc
    7264:	1fff8fd0 	.word	0x1fff8fd0
    7268:	1fff8fe0 	.word	0x1fff8fe0
    726c:	1fff8fc8 	.word	0x1fff8fc8

00007270 <Gpt_DeInit>:
* @return  void
*
* @implements   Gpt_DeInit_Activity
*/
void Gpt_DeInit(void)
{
    7270:	b500      	push	{lr}
    7272:	b085      	sub	sp, #20
    Gpt_ChannelType channel;
    Gpt_ChannelType ChannelIndex;

    Std_ReturnType allChannelStatus = (Std_ReturnType)E_OK;
    7274:	2300      	movs	r3, #0
    7276:	f88d 300e 	strb.w	r3, [sp, #14]
    uint32 coreID = (uint32)Gpt_GetCoreID();
    727a:	2300      	movs	r3, #0
    727c:	9302      	str	r3, [sp, #8]
    /*Validate if the calling context is valid*/
    if((Std_ReturnType)E_OK == Gpt_ValidateGlobalCall(GPT_DEINIT_ID, coreID))
    {
#endif
        /* Initialize for each channel the runtime status informations.*/
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    727e:	2300      	movs	r3, #0
    7280:	f88d 300f 	strb.w	r3, [sp, #15]
    7284:	e01b      	b.n	72be <Gpt_DeInit+0x4e>
        {
            channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    7286:	f89d 300f 	ldrb.w	r3, [sp, #15]
    728a:	9902      	ldr	r1, [sp, #8]
    728c:	4618      	mov	r0, r3
    728e:	f7ff fe05 	bl	6e9c <Gpt_ConvertChannelIndexToChannel>
    7292:	4603      	mov	r3, r0
    7294:	f88d 3007 	strb.w	r3, [sp, #7]
            /*Check if the channel is not running.*/
            if((Std_ReturnType)E_NOT_OK == Gpt_ValidateChannelStatus(GPT_DEINIT_ID, channel, coreID))
    7298:	f89d 3007 	ldrb.w	r3, [sp, #7]
    729c:	9a02      	ldr	r2, [sp, #8]
    729e:	4619      	mov	r1, r3
    72a0:	2002      	movs	r0, #2
    72a2:	f7ff fdab 	bl	6dfc <Gpt_ValidateChannelStatus>
    72a6:	4603      	mov	r3, r0
    72a8:	2b01      	cmp	r3, #1
    72aa:	d103      	bne.n	72b4 <Gpt_DeInit+0x44>
            {
                allChannelStatus = (Std_ReturnType)E_NOT_OK;
    72ac:	2301      	movs	r3, #1
    72ae:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    72b2:	e00d      	b.n	72d0 <Gpt_DeInit+0x60>
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    72b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    72b8:	3301      	adds	r3, #1
    72ba:	f88d 300f 	strb.w	r3, [sp, #15]
    72be:	4a3f      	ldr	r2, [pc, #252]	; (73bc <Gpt_DeInit+0x14c>)
    72c0:	9b02      	ldr	r3, [sp, #8]
    72c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72c6:	781b      	ldrb	r3, [r3, #0]
    72c8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    72cc:	429a      	cmp	r2, r3
    72ce:	d3da      	bcc.n	7286 <Gpt_DeInit+0x16>
            }
        }

        if((Std_ReturnType)E_OK == allChannelStatus)
    72d0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    72d4:	2b00      	cmp	r3, #0
    72d6:	d16c      	bne.n	73b2 <Gpt_DeInit+0x142>
        {
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    72d8:	2300      	movs	r3, #0
    72da:	f88d 300f 	strb.w	r3, [sp, #15]
    72de:	e052      	b.n	7386 <Gpt_DeInit+0x116>
            {
                channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    72e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    72e4:	9902      	ldr	r1, [sp, #8]
    72e6:	4618      	mov	r0, r3
    72e8:	f7ff fdd8 	bl	6e9c <Gpt_ConvertChannelIndexToChannel>
    72ec:	4603      	mov	r3, r0
    72ee:	f88d 3007 	strb.w	r3, [sp, #7]
                if(channel < GPT_HW_CHANNEL_NUM)
    72f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    72f6:	2b01      	cmp	r3, #1
    72f8:	d840      	bhi.n	737c <Gpt_DeInit+0x10c>
                {
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
                    /*Disable notification*/
                    Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = FALSE;
    72fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    72fe:	4930      	ldr	r1, [pc, #192]	; (73c0 <Gpt_DeInit+0x150>)
    7300:	9a02      	ldr	r2, [sp, #8]
    7302:	0052      	lsls	r2, r2, #1
    7304:	4413      	add	r3, r2
    7306:	00db      	lsls	r3, r3, #3
    7308:	440b      	add	r3, r1
    730a:	2200      	movs	r2, #0
    730c:	711a      	strb	r2, [r3, #4]
#endif

#if ((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON))
                    /*Disable wakeup*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = FALSE;
    730e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7312:	492b      	ldr	r1, [pc, #172]	; (73c0 <Gpt_DeInit+0x150>)
    7314:	9a02      	ldr	r2, [sp, #8]
    7316:	0052      	lsls	r2, r2, #1
    7318:	4413      	add	r3, r2
    731a:	00db      	lsls	r3, r3, #3
    731c:	440b      	add	r3, r1
    731e:	2200      	movs	r2, #0
    7320:	715a      	strb	r2, [r3, #5]
                    /*Clear wakeup generation status*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupGenerated = FALSE;
    7322:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7326:	4926      	ldr	r1, [pc, #152]	; (73c0 <Gpt_DeInit+0x150>)
    7328:	9a02      	ldr	r2, [sp, #8]
    732a:	0052      	lsls	r2, r2, #1
    732c:	4413      	add	r3, r2
    732e:	00db      	lsls	r3, r3, #3
    7330:	440b      	add	r3, r1
    7332:	2200      	movs	r2, #0
    7334:	719a      	strb	r2, [r3, #6]
#endif
                    /* De initialize the running information of the channel*/
                    Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_UNINITIALIZED;
    7336:	f89d 3007 	ldrb.w	r3, [sp, #7]
    733a:	4921      	ldr	r1, [pc, #132]	; (73c0 <Gpt_DeInit+0x150>)
    733c:	9a02      	ldr	r2, [sp, #8]
    733e:	0052      	lsls	r2, r2, #1
    7340:	4413      	add	r3, r2
    7342:	2200      	movs	r2, #0
    7344:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                    Gpt_aStopTime[coreID][channel] = 0U;
    7348:	f89d 3007 	ldrb.w	r3, [sp, #7]
    734c:	491d      	ldr	r1, [pc, #116]	; (73c4 <Gpt_DeInit+0x154>)
    734e:	9a02      	ldr	r2, [sp, #8]
    7350:	0052      	lsls	r2, r2, #1
    7352:	4413      	add	r3, r2
    7354:	2200      	movs	r2, #0
    7356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
                    /*Initialize hardware timer channel.*/
                    Gpt_Ipw_DeInit
                    (
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    735a:	4a18      	ldr	r2, [pc, #96]	; (73bc <Gpt_DeInit+0x14c>)
    735c:	9b02      	ldr	r3, [sp, #8]
    735e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7362:	6859      	ldr	r1, [r3, #4]
                    Gpt_Ipw_DeInit
    7364:	f89d 200f 	ldrb.w	r2, [sp, #15]
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7368:	4613      	mov	r3, r2
    736a:	005b      	lsls	r3, r3, #1
    736c:	4413      	add	r3, r2
    736e:	00db      	lsls	r3, r3, #3
    7370:	440b      	add	r3, r1
    7372:	3314      	adds	r3, #20
    7374:	681b      	ldr	r3, [r3, #0]
                    Gpt_Ipw_DeInit
    7376:	4618      	mov	r0, r3
    7378:	f000 fd6b 	bl	7e52 <Gpt_Ipw_DeInit>
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    737c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7380:	3301      	adds	r3, #1
    7382:	f88d 300f 	strb.w	r3, [sp, #15]
    7386:	4a0d      	ldr	r2, [pc, #52]	; (73bc <Gpt_DeInit+0x14c>)
    7388:	9b02      	ldr	r3, [sp, #8]
    738a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    738e:	781b      	ldrb	r3, [r3, #0]
    7390:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7394:	429a      	cmp	r2, r3
    7396:	d3a3      	bcc.n	72e0 <Gpt_DeInit+0x70>
                }
            }

#if(GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON)
            /* Deinitialize and stop Predef timers.*/
            Gpt_Ipw_StopPredefTimer(Gpt_pConfig[coreID]);
    7398:	4a08      	ldr	r2, [pc, #32]	; (73bc <Gpt_DeInit+0x14c>)
    739a:	9b02      	ldr	r3, [sp, #8]
    739c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73a0:	4618      	mov	r0, r3
    73a2:	f000 fde3 	bl	7f6c <Gpt_Ipw_StopPredefTimer>
#endif
            /* Writing NULL to configuration pointer is mandatory because that variable
            is used to test the initialization of the driver */
            Gpt_pConfig[coreID] = NULL_PTR;
    73a6:	4a05      	ldr	r2, [pc, #20]	; (73bc <Gpt_DeInit+0x14c>)
    73a8:	9b02      	ldr	r3, [sp, #8]
    73aa:	2100      	movs	r1, #0
    73ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }

#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
    return;
    73b0:	bf00      	nop
    73b2:	bf00      	nop
}
    73b4:	b005      	add	sp, #20
    73b6:	f85d fb04 	ldr.w	pc, [sp], #4
    73ba:	bf00      	nop
    73bc:	1fff8fcc 	.word	0x1fff8fcc
    73c0:	1fff8fd0 	.word	0x1fff8fd0
    73c4:	1fff8fe0 	.word	0x1fff8fe0

000073c8 <Gpt_GetTimeElapsed>:
*
* @pre     The driver needs to be initialized.
* @implements Gpt_GetTimeElapsed_Activity
*/
Gpt_ValueType Gpt_GetTimeElapsed(Gpt_ChannelType channel)
{
    73c8:	b500      	push	{lr}
    73ca:	b089      	sub	sp, #36	; 0x24
    73cc:	4603      	mov	r3, r0
    73ce:	f88d 3007 	strb.w	r3, [sp, #7]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    73d2:	2300      	movs	r3, #0
    73d4:	f88d 3008 	strb.w	r3, [sp, #8]
    73d8:	2300      	movs	r3, #0
    73da:	9303      	str	r3, [sp, #12]
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    73dc:	ab02      	add	r3, sp, #8
    73de:	9306      	str	r3, [sp, #24]
    Gpt_ChannelType ChannelIndex;

    Gpt_ValueType returnValue = 0U;
    73e0:	2300      	movs	r3, #0
    73e2:	9307      	str	r3, [sp, #28]
    uint32 coreID = (uint32)Gpt_GetCoreID();
    73e4:	2300      	movs	r3, #0
    73e6:	9305      	str	r3, [sp, #20]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(GPT_TIMEELAPSED_ID, channel, coreID))
    {
#endif
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    73e8:	4a31      	ldr	r2, [pc, #196]	; (74b0 <Gpt_GetTimeElapsed+0xe8>)
    73ea:	9b05      	ldr	r3, [sp, #20]
    73ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73f0:	695a      	ldr	r2, [r3, #20]
    73f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    73f6:	5cd3      	ldrb	r3, [r2, r3]
    73f8:	f88d 3013 	strb.w	r3, [sp, #19]
        /*Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs can change
        the logical channel state between the checking of logical channel state and timestamp
        retrieval*/
        returnValue = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    73fc:	4a2c      	ldr	r2, [pc, #176]	; (74b0 <Gpt_GetTimeElapsed+0xe8>)
    73fe:	9b05      	ldr	r3, [sp, #20]
    7400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7404:	6859      	ldr	r1, [r3, #4]
    7406:	f89d 2013 	ldrb.w	r2, [sp, #19]
    740a:	4613      	mov	r3, r2
    740c:	005b      	lsls	r3, r3, #1
    740e:	4413      	add	r3, r2
    7410:	00db      	lsls	r3, r3, #3
    7412:	440b      	add	r3, r1
    7414:	3314      	adds	r3, #20
    7416:	681b      	ldr	r3, [r3, #0]
    7418:	9906      	ldr	r1, [sp, #24]
    741a:	4618      	mov	r0, r3
    741c:	f000 fce5 	bl	7dea <Gpt_Ipw_GetTimeElapsed>
    7420:	9007      	str	r0, [sp, #28]

        /*Check the channel status*/
        switch(Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    7422:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7426:	4923      	ldr	r1, [pc, #140]	; (74b4 <Gpt_GetTimeElapsed+0xec>)
    7428:	9a05      	ldr	r2, [sp, #20]
    742a:	0052      	lsls	r2, r2, #1
    742c:	4413      	add	r3, r2
    742e:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    7432:	3b01      	subs	r3, #1
    7434:	2b03      	cmp	r3, #3
    7436:	d832      	bhi.n	749e <Gpt_GetTimeElapsed+0xd6>
    7438:	a201      	add	r2, pc, #4	; (adr r2, 7440 <Gpt_GetTimeElapsed+0x78>)
    743a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    743e:	bf00      	nop
    7440:	0000747f 	.word	0x0000747f
    7444:	00007485 	.word	0x00007485
    7448:	00007499 	.word	0x00007499
    744c:	00007451 	.word	0x00007451
        {
            case GPT_STATUS_RUNNING:
            {
                /*Check if channel counter has already rollover*/
                if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    7450:	f89d 3008 	ldrb.w	r3, [sp, #8]
    7454:	2b00      	cmp	r3, #0
    7456:	d024      	beq.n	74a2 <Gpt_GetTimeElapsed+0xda>
                    (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    7458:	4a15      	ldr	r2, [pc, #84]	; (74b0 <Gpt_GetTimeElapsed+0xe8>)
    745a:	9b05      	ldr	r3, [sp, #20]
    745c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7460:	6859      	ldr	r1, [r3, #4]
    7462:	f89d 2013 	ldrb.w	r2, [sp, #19]
    7466:	4613      	mov	r3, r2
    7468:	005b      	lsls	r3, r3, #1
    746a:	4413      	add	r3, r2
    746c:	00db      	lsls	r3, r3, #3
    746e:	440b      	add	r3, r1
    7470:	3310      	adds	r3, #16
    7472:	681b      	ldr	r3, [r3, #0]
                if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    7474:	2b01      	cmp	r3, #1
    7476:	d114      	bne.n	74a2 <Gpt_GetTimeElapsed+0xda>
                   )
                {
                    /*The timer has already expired.The hardware timer status is not yet
                    synchronized with the logical timer status*/
                    returnValue = returnHwChannelInfo.uTargetTime;
    7478:	9b03      	ldr	r3, [sp, #12]
    747a:	9307      	str	r3, [sp, #28]
                }
            }
            break;
    747c:	e011      	b.n	74a2 <Gpt_GetTimeElapsed+0xda>
            case GPT_STATUS_INITIALIZED:
            {
                returnValue = 0U;
    747e:	2300      	movs	r3, #0
    7480:	9307      	str	r3, [sp, #28]
            }
            break;
    7482:	e00f      	b.n	74a4 <Gpt_GetTimeElapsed+0xdc>
            case GPT_STATUS_STOPPED:
            {
                /*Return elapsed time at the when the channel was stopped*/
                returnValue = Gpt_aStopTime[coreID][channel];
    7484:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7488:	490b      	ldr	r1, [pc, #44]	; (74b8 <Gpt_GetTimeElapsed+0xf0>)
    748a:	9a05      	ldr	r2, [sp, #20]
    748c:	0052      	lsls	r2, r2, #1
    748e:	4413      	add	r3, r2
    7490:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    7494:	9307      	str	r3, [sp, #28]
            }
            break;
    7496:	e005      	b.n	74a4 <Gpt_GetTimeElapsed+0xdc>
            case GPT_STATUS_EXPIRED:
            {
                returnValue = returnHwChannelInfo.uTargetTime;
    7498:	9b03      	ldr	r3, [sp, #12]
    749a:	9307      	str	r3, [sp, #28]
            }
            break;
    749c:	e002      	b.n	74a4 <Gpt_GetTimeElapsed+0xdc>
            default:
                /*Only the above four channel states are allowed when this function is called*/
                break;
    749e:	bf00      	nop
    74a0:	e000      	b.n	74a4 <Gpt_GetTimeElapsed+0xdc>
            break;
    74a2:	bf00      	nop
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif

    return returnValue;
    74a4:	9b07      	ldr	r3, [sp, #28]
}
    74a6:	4618      	mov	r0, r3
    74a8:	b009      	add	sp, #36	; 0x24
    74aa:	f85d fb04 	ldr.w	pc, [sp], #4
    74ae:	bf00      	nop
    74b0:	1fff8fcc 	.word	0x1fff8fcc
    74b4:	1fff8fd0 	.word	0x1fff8fd0
    74b8:	1fff8fe0 	.word	0x1fff8fe0

000074bc <Gpt_GetTimeRemaining>:
*
* @pre           The driver needs to be initialized.
* @implements    Gpt_GetTimeRemaining_Activity
*/
Gpt_ValueType Gpt_GetTimeRemaining(Gpt_ChannelType channel)
{
    74bc:	b500      	push	{lr}
    74be:	b089      	sub	sp, #36	; 0x24
    74c0:	4603      	mov	r3, r0
    74c2:	f88d 3007 	strb.w	r3, [sp, #7]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    74c6:	2300      	movs	r3, #0
    74c8:	f88d 3008 	strb.w	r3, [sp, #8]
    74cc:	2300      	movs	r3, #0
    74ce:	9303      	str	r3, [sp, #12]
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    74d0:	ab02      	add	r3, sp, #8
    74d2:	9306      	str	r3, [sp, #24]
    Gpt_ChannelType ChannelIndex;

    Gpt_ValueType returnValue = 0U;
    74d4:	2300      	movs	r3, #0
    74d6:	9307      	str	r3, [sp, #28]
    uint32 coreID = (uint32)Gpt_GetCoreID();
    74d8:	2300      	movs	r3, #0
    74da:	9305      	str	r3, [sp, #20]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(GPT_TIMEREMAINING_ID, channel, coreID))
    {
#endif
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    74dc:	4a33      	ldr	r2, [pc, #204]	; (75ac <Gpt_GetTimeRemaining+0xf0>)
    74de:	9b05      	ldr	r3, [sp, #20]
    74e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74e4:	695a      	ldr	r2, [r3, #20]
    74e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    74ea:	5cd3      	ldrb	r3, [r2, r3]
    74ec:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Calculate the remaining time from the elapsed time*/
        /* Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs can
        change the logical channel state between the checking of logical channel state
        and timestamps retrieval*/
        returnValue = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    74f0:	4a2e      	ldr	r2, [pc, #184]	; (75ac <Gpt_GetTimeRemaining+0xf0>)
    74f2:	9b05      	ldr	r3, [sp, #20]
    74f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74f8:	6859      	ldr	r1, [r3, #4]
    74fa:	f89d 2013 	ldrb.w	r2, [sp, #19]
    74fe:	4613      	mov	r3, r2
    7500:	005b      	lsls	r3, r3, #1
    7502:	4413      	add	r3, r2
    7504:	00db      	lsls	r3, r3, #3
    7506:	440b      	add	r3, r1
    7508:	3314      	adds	r3, #20
    750a:	681b      	ldr	r3, [r3, #0]
    750c:	9906      	ldr	r1, [sp, #24]
    750e:	4618      	mov	r0, r3
    7510:	f000 fc6b 	bl	7dea <Gpt_Ipw_GetTimeElapsed>
    7514:	9007      	str	r0, [sp, #28]

        /*Check the channel status*/
        switch(Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    7516:	f89d 3007 	ldrb.w	r3, [sp, #7]
    751a:	4925      	ldr	r1, [pc, #148]	; (75b0 <Gpt_GetTimeRemaining+0xf4>)
    751c:	9a05      	ldr	r2, [sp, #20]
    751e:	0052      	lsls	r2, r2, #1
    7520:	4413      	add	r3, r2
    7522:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    7526:	3b01      	subs	r3, #1
    7528:	2b03      	cmp	r3, #3
    752a:	d839      	bhi.n	75a0 <Gpt_GetTimeRemaining+0xe4>
    752c:	a201      	add	r2, pc, #4	; (adr r2, 7534 <Gpt_GetTimeRemaining+0x78>)
    752e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7532:	bf00      	nop
    7534:	0000757d 	.word	0x0000757d
    7538:	00007583 	.word	0x00007583
    753c:	0000759b 	.word	0x0000759b
    7540:	00007545 	.word	0x00007545
        {
            case GPT_STATUS_RUNNING:
            {
                /*Check if channel counter has already roll-over*/
                if((TRUE == returnHwChannelInfo.bChannelRollover) && \
    7544:	f89d 3008 	ldrb.w	r3, [sp, #8]
    7548:	2b00      	cmp	r3, #0
    754a:	d012      	beq.n	7572 <Gpt_GetTimeRemaining+0xb6>
                   (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    754c:	4a17      	ldr	r2, [pc, #92]	; (75ac <Gpt_GetTimeRemaining+0xf0>)
    754e:	9b05      	ldr	r3, [sp, #20]
    7550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7554:	6859      	ldr	r1, [r3, #4]
    7556:	f89d 2013 	ldrb.w	r2, [sp, #19]
    755a:	4613      	mov	r3, r2
    755c:	005b      	lsls	r3, r3, #1
    755e:	4413      	add	r3, r2
    7560:	00db      	lsls	r3, r3, #3
    7562:	440b      	add	r3, r1
    7564:	3310      	adds	r3, #16
    7566:	681b      	ldr	r3, [r3, #0]
                if((TRUE == returnHwChannelInfo.bChannelRollover) && \
    7568:	2b01      	cmp	r3, #1
    756a:	d102      	bne.n	7572 <Gpt_GetTimeRemaining+0xb6>
                  )
                {
                    /*The timer has already expired.The hardware timer status is not yet
                    synchronized with the logical timer status*/
                    returnValue = 0U;
    756c:	2300      	movs	r3, #0
    756e:	9307      	str	r3, [sp, #28]
                {
                    /*Calculate remaining time from elapsed time*/
                    returnValue = returnHwChannelInfo.uTargetTime - returnValue;
                }
            }
            break;
    7570:	e017      	b.n	75a2 <Gpt_GetTimeRemaining+0xe6>
                    returnValue = returnHwChannelInfo.uTargetTime - returnValue;
    7572:	9a03      	ldr	r2, [sp, #12]
    7574:	9b07      	ldr	r3, [sp, #28]
    7576:	1ad3      	subs	r3, r2, r3
    7578:	9307      	str	r3, [sp, #28]
            break;
    757a:	e012      	b.n	75a2 <Gpt_GetTimeRemaining+0xe6>
            case GPT_STATUS_INITIALIZED:
            {
                returnValue = 0U;
    757c:	2300      	movs	r3, #0
    757e:	9307      	str	r3, [sp, #28]
            }
            break;
    7580:	e00f      	b.n	75a2 <Gpt_GetTimeRemaining+0xe6>
            case GPT_STATUS_STOPPED:
            {
                returnValue = returnHwChannelInfo.uTargetTime-Gpt_aStopTime[coreID][channel];
    7582:	9a03      	ldr	r2, [sp, #12]
    7584:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7588:	480a      	ldr	r0, [pc, #40]	; (75b4 <Gpt_GetTimeRemaining+0xf8>)
    758a:	9905      	ldr	r1, [sp, #20]
    758c:	0049      	lsls	r1, r1, #1
    758e:	440b      	add	r3, r1
    7590:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    7594:	1ad3      	subs	r3, r2, r3
    7596:	9307      	str	r3, [sp, #28]
            }
            break;
    7598:	e003      	b.n	75a2 <Gpt_GetTimeRemaining+0xe6>
            case GPT_STATUS_EXPIRED:
            {
                returnValue = 0U;
    759a:	2300      	movs	r3, #0
    759c:	9307      	str	r3, [sp, #28]
            }
            break;
    759e:	e000      	b.n	75a2 <Gpt_GetTimeRemaining+0xe6>
            default:
                /*Only the above four channel states are allowed when this function is called*/
                break;
    75a0:	bf00      	nop
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif

    return returnValue;
    75a2:	9b07      	ldr	r3, [sp, #28]
}
    75a4:	4618      	mov	r0, r3
    75a6:	b009      	add	sp, #36	; 0x24
    75a8:	f85d fb04 	ldr.w	pc, [sp], #4
    75ac:	1fff8fcc 	.word	0x1fff8fcc
    75b0:	1fff8fd0 	.word	0x1fff8fd0
    75b4:	1fff8fe0 	.word	0x1fff8fe0

000075b8 <Gpt_StartTimer>:
void Gpt_StartTimer
(
    Gpt_ChannelType channel,
    Gpt_ValueType value
)
{
    75b8:	b500      	push	{lr}
    75ba:	b085      	sub	sp, #20
    75bc:	4603      	mov	r3, r0
    75be:	9100      	str	r1, [sp, #0]
    75c0:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    Std_ReturnType returnValue;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    75c4:	2300      	movs	r3, #0
    75c6:	9303      	str	r3, [sp, #12]

    if ((Std_ReturnType)E_OK == Gpt_ValidateChannelStatus(GPT_STARTTIMER_ID, channel, coreID))
    75c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75cc:	9a03      	ldr	r2, [sp, #12]
    75ce:	4619      	mov	r1, r3
    75d0:	2005      	movs	r0, #5
    75d2:	f7ff fc13 	bl	6dfc <Gpt_ValidateChannelStatus>
    75d6:	4603      	mov	r3, r0
    75d8:	2b00      	cmp	r3, #0
    75da:	d153      	bne.n	7684 <Gpt_StartTimer+0xcc>
    {
#if (GPT_VALIDATE_PARAM  == STD_ON)
        if ((Std_ReturnType)E_OK == Gpt_ValidateParamValue(GPT_STARTTIMER_ID, channel, value, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    75dc:	4a2b      	ldr	r2, [pc, #172]	; (768c <Gpt_StartTimer+0xd4>)
    75de:	9b03      	ldr	r3, [sp, #12]
    75e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75e4:	695a      	ldr	r2, [r3, #20]
    75e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75ea:	5cd3      	ldrb	r3, [r2, r3]
    75ec:	f88d 300b 	strb.w	r3, [sp, #11]
            /*Enable hardware interrupts for the one-shot mode to set the status of  channel*/
            if (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    75f0:	4a26      	ldr	r2, [pc, #152]	; (768c <Gpt_StartTimer+0xd4>)
    75f2:	9b03      	ldr	r3, [sp, #12]
    75f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75f8:	6859      	ldr	r1, [r3, #4]
    75fa:	f89d 200b 	ldrb.w	r2, [sp, #11]
    75fe:	4613      	mov	r3, r2
    7600:	005b      	lsls	r3, r3, #1
    7602:	4413      	add	r3, r2
    7604:	00db      	lsls	r3, r3, #3
    7606:	440b      	add	r3, r1
    7608:	3310      	adds	r3, #16
    760a:	681b      	ldr	r3, [r3, #0]
    760c:	2b01      	cmp	r3, #1
    760e:	d110      	bne.n	7632 <Gpt_StartTimer+0x7a>
            {
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7610:	4a1e      	ldr	r2, [pc, #120]	; (768c <Gpt_StartTimer+0xd4>)
    7612:	9b03      	ldr	r3, [sp, #12]
    7614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7618:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    761a:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    761e:	4613      	mov	r3, r2
    7620:	005b      	lsls	r3, r3, #1
    7622:	4413      	add	r3, r2
    7624:	00db      	lsls	r3, r3, #3
    7626:	440b      	add	r3, r1
    7628:	3314      	adds	r3, #20
    762a:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    762c:	4618      	mov	r0, r3
    762e:	f000 fc07 	bl	7e40 <Gpt_Ipw_EnableInterrupt>
                );
            }

            /* Change GPT channel status.Channel status change shall be made before to start
            the hardware in order to not change the channel status from EXPIRED to RUNNING*/
            Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_RUNNING;
    7632:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7636:	4916      	ldr	r1, [pc, #88]	; (7690 <Gpt_StartTimer+0xd8>)
    7638:	9a03      	ldr	r2, [sp, #12]
    763a:	0052      	lsls	r2, r2, #1
    763c:	4413      	add	r3, r2
    763e:	2204      	movs	r2, #4
    7640:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

            /* Call low level API */
            returnValue = Gpt_Ipw_StartTimer(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig),value);
    7644:	4a11      	ldr	r2, [pc, #68]	; (768c <Gpt_StartTimer+0xd4>)
    7646:	9b03      	ldr	r3, [sp, #12]
    7648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    764c:	6859      	ldr	r1, [r3, #4]
    764e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7652:	4613      	mov	r3, r2
    7654:	005b      	lsls	r3, r3, #1
    7656:	4413      	add	r3, r2
    7658:	00db      	lsls	r3, r3, #3
    765a:	440b      	add	r3, r1
    765c:	3314      	adds	r3, #20
    765e:	681b      	ldr	r3, [r3, #0]
    7660:	9900      	ldr	r1, [sp, #0]
    7662:	4618      	mov	r0, r3
    7664:	f000 fba2 	bl	7dac <Gpt_Ipw_StartTimer>
    7668:	4603      	mov	r3, r0
    766a:	f88d 300a 	strb.w	r3, [sp, #10]

            if((Std_ReturnType)E_OK != returnValue)
    766e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7672:	2b00      	cmp	r3, #0
    7674:	d006      	beq.n	7684 <Gpt_StartTimer+0xcc>
            {
                (void)Det_ReportRuntimeError\
    7676:	232b      	movs	r3, #43	; 0x2b
    7678:	2205      	movs	r2, #5
    767a:	2100      	movs	r1, #0
    767c:	2064      	movs	r0, #100	; 0x64
    767e:	f004 f82f 	bl	b6e0 <Det_ReportRuntimeError>
            }
#if (GPT_VALIDATE_PARAM  == STD_ON)
        }
#endif
    }
    return;
    7682:	bf00      	nop
    7684:	bf00      	nop
}
    7686:	b005      	add	sp, #20
    7688:	f85d fb04 	ldr.w	pc, [sp], #4
    768c:	1fff8fcc 	.word	0x1fff8fcc
    7690:	1fff8fd0 	.word	0x1fff8fd0

00007694 <Gpt_StopTimer>:
*
* @pre          The driver needs to be initialized. Gpt_StartTimer must be called before.
* @implements   Gpt_StopTimer_Activity
*/
void Gpt_StopTimer(Gpt_ChannelType channel)
{
    7694:	b500      	push	{lr}
    7696:	b089      	sub	sp, #36	; 0x24
    7698:	4603      	mov	r3, r0
    769a:	f88d 3007 	strb.w	r3, [sp, #7]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    769e:	2300      	movs	r3, #0
    76a0:	f88d 3008 	strb.w	r3, [sp, #8]
    76a4:	2300      	movs	r3, #0
    76a6:	9303      	str	r3, [sp, #12]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    76a8:	ab02      	add	r3, sp, #8
    76aa:	9307      	str	r3, [sp, #28]
    Gpt_ValueType uElapsedTime = 0U;
    76ac:	2300      	movs	r3, #0
    76ae:	9306      	str	r3, [sp, #24]
#endif
    Gpt_ChannelType ChannelIndex;

    uint32 coreID = (uint32)Gpt_GetCoreID();
    76b0:	2300      	movs	r3, #0
    76b2:	9305      	str	r3, [sp, #20]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(GPT_STOPTIMER_ID, channel, coreID))
    {
#endif
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    76b4:	4a36      	ldr	r2, [pc, #216]	; (7790 <Gpt_StopTimer+0xfc>)
    76b6:	9b05      	ldr	r3, [sp, #20]
    76b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76bc:	695a      	ldr	r2, [r3, #20]
    76be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76c2:	5cd3      	ldrb	r3, [r2, r3]
    76c4:	f88d 3013 	strb.w	r3, [sp, #19]
        /*Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs can change
        the logical channel state between the checking of logical channel state and timestamps
        retrieval*/
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
        /* Get the elapsed  time  for later use by other API calls*/
        uElapsedTime = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    76c8:	4a31      	ldr	r2, [pc, #196]	; (7790 <Gpt_StopTimer+0xfc>)
    76ca:	9b05      	ldr	r3, [sp, #20]
    76cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76d0:	6859      	ldr	r1, [r3, #4]
    76d2:	f89d 2013 	ldrb.w	r2, [sp, #19]
    76d6:	4613      	mov	r3, r2
    76d8:	005b      	lsls	r3, r3, #1
    76da:	4413      	add	r3, r2
    76dc:	00db      	lsls	r3, r3, #3
    76de:	440b      	add	r3, r1
    76e0:	3314      	adds	r3, #20
    76e2:	681b      	ldr	r3, [r3, #0]
    76e4:	9907      	ldr	r1, [sp, #28]
    76e6:	4618      	mov	r0, r3
    76e8:	f000 fb7f 	bl	7dea <Gpt_Ipw_GetTimeElapsed>
    76ec:	9006      	str	r0, [sp, #24]
#endif

        /*Check the logical channel status*/
        if (GPT_STATUS_RUNNING == Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    76ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76f2:	4928      	ldr	r1, [pc, #160]	; (7794 <Gpt_StopTimer+0x100>)
    76f4:	9a05      	ldr	r2, [sp, #20]
    76f6:	0052      	lsls	r2, r2, #1
    76f8:	4413      	add	r3, r2
    76fa:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    76fe:	2b04      	cmp	r3, #4
    7700:	d141      	bne.n	7786 <Gpt_StopTimer+0xf2>
        {
            /* Call low level stop timer */
            Gpt_Ipw_StopTimer(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    7702:	4a23      	ldr	r2, [pc, #140]	; (7790 <Gpt_StopTimer+0xfc>)
    7704:	9b05      	ldr	r3, [sp, #20]
    7706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    770a:	6859      	ldr	r1, [r3, #4]
    770c:	f89d 2013 	ldrb.w	r2, [sp, #19]
    7710:	4613      	mov	r3, r2
    7712:	005b      	lsls	r3, r3, #1
    7714:	4413      	add	r3, r2
    7716:	00db      	lsls	r3, r3, #3
    7718:	440b      	add	r3, r1
    771a:	3314      	adds	r3, #20
    771c:	681b      	ldr	r3, [r3, #0]
    771e:	4618      	mov	r0, r3
    7720:	f000 fb79 	bl	7e16 <Gpt_Ipw_StopTimer>

            if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    7724:	f89d 3008 	ldrb.w	r3, [sp, #8]
    7728:	2b00      	cmp	r3, #0
    772a:	d019      	beq.n	7760 <Gpt_StopTimer+0xcc>
                (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    772c:	4a18      	ldr	r2, [pc, #96]	; (7790 <Gpt_StopTimer+0xfc>)
    772e:	9b05      	ldr	r3, [sp, #20]
    7730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7734:	6859      	ldr	r1, [r3, #4]
    7736:	f89d 2013 	ldrb.w	r2, [sp, #19]
    773a:	4613      	mov	r3, r2
    773c:	005b      	lsls	r3, r3, #1
    773e:	4413      	add	r3, r2
    7740:	00db      	lsls	r3, r3, #3
    7742:	440b      	add	r3, r1
    7744:	3310      	adds	r3, #16
    7746:	681b      	ldr	r3, [r3, #0]
            if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    7748:	2b01      	cmp	r3, #1
    774a:	d109      	bne.n	7760 <Gpt_StopTimer+0xcc>
            )
            {
                /*This action could be executed only when the function is called during a critical
                section implemented by disabling all interrupts*/
                /*Set channel status to EXPIRED*/
                Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_EXPIRED;
    774c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7750:	4910      	ldr	r1, [pc, #64]	; (7794 <Gpt_StopTimer+0x100>)
    7752:	9a05      	ldr	r2, [sp, #20]
    7754:	0052      	lsls	r2, r2, #1
    7756:	4413      	add	r3, r2
    7758:	2203      	movs	r2, #3
    775a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    775e:	e011      	b.n	7784 <Gpt_StopTimer+0xf0>
            }
            else
            {
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                /* Store the stopping time for later use by other API calls*/
                Gpt_aStopTime[coreID][channel] = uElapsedTime;
    7760:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7764:	490c      	ldr	r1, [pc, #48]	; (7798 <Gpt_StopTimer+0x104>)
    7766:	9a05      	ldr	r2, [sp, #20]
    7768:	0052      	lsls	r2, r2, #1
    776a:	4413      	add	r3, r2
    776c:	9a06      	ldr	r2, [sp, #24]
    776e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

                /* Set GPT channel status to stopped*/
                Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_STOPPED;
    7772:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7776:	4907      	ldr	r1, [pc, #28]	; (7794 <Gpt_StopTimer+0x100>)
    7778:	9a05      	ldr	r2, [sp, #20]
    777a:	0052      	lsls	r2, r2, #1
    777c:	4413      	add	r3, r2
    777e:	2202      	movs	r2, #2
    7780:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            }
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
    return;
    7784:	bf00      	nop
    7786:	bf00      	nop
}
    7788:	b009      	add	sp, #36	; 0x24
    778a:	f85d fb04 	ldr.w	pc, [sp], #4
    778e:	bf00      	nop
    7790:	1fff8fcc 	.word	0x1fff8fcc
    7794:	1fff8fd0 	.word	0x1fff8fd0
    7798:	1fff8fe0 	.word	0x1fff8fe0

0000779c <Gpt_EnableNotification>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_EnableNotification_Activity
*/
void Gpt_EnableNotification(Gpt_ChannelType channel)
{
    779c:	b500      	push	{lr}
    779e:	b085      	sub	sp, #20
    77a0:	4603      	mov	r3, r0
    77a2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    77a6:	2300      	movs	r3, #0
    77a8:	9303      	str	r3, [sp, #12]
#endif
#if (GPT_VALIDATE_PARAM == STD_ON)
        if ((Std_ReturnType)E_OK == Gpt_ValidateChannelNotification(GPT_ENABLENOTIFICATION_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    77aa:	4a18      	ldr	r2, [pc, #96]	; (780c <Gpt_EnableNotification+0x70>)
    77ac:	9b03      	ldr	r3, [sp, #12]
    77ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77b2:	695a      	ldr	r2, [r3, #20]
    77b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77b8:	5cd3      	ldrb	r3, [r2, r3]
    77ba:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Set the enable notification attribute */
            Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = TRUE;
    77be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77c2:	4913      	ldr	r1, [pc, #76]	; (7810 <Gpt_EnableNotification+0x74>)
    77c4:	9a03      	ldr	r2, [sp, #12]
    77c6:	0052      	lsls	r2, r2, #1
    77c8:	4413      	add	r3, r2
    77ca:	00db      	lsls	r3, r3, #3
    77cc:	440b      	add	r3, r1
    77ce:	2201      	movs	r2, #1
    77d0:	711a      	strb	r2, [r3, #4]

            if (GPT_MODE_NORMAL == Gpt_eMode[coreID])
    77d2:	4a10      	ldr	r2, [pc, #64]	; (7814 <Gpt_EnableNotification+0x78>)
    77d4:	9b03      	ldr	r3, [sp, #12]
    77d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77da:	2b00      	cmp	r3, #0
    77dc:	d111      	bne.n	7802 <Gpt_EnableNotification+0x66>
            {
                /*Enable hardware interrupts*/
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    77de:	4a0b      	ldr	r2, [pc, #44]	; (780c <Gpt_EnableNotification+0x70>)
    77e0:	9b03      	ldr	r3, [sp, #12]
    77e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77e6:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    77e8:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    77ec:	4613      	mov	r3, r2
    77ee:	005b      	lsls	r3, r3, #1
    77f0:	4413      	add	r3, r2
    77f2:	00db      	lsls	r3, r3, #3
    77f4:	440b      	add	r3, r1
    77f6:	3314      	adds	r3, #20
    77f8:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    77fa:	4618      	mov	r0, r3
    77fc:	f000 fb20 	bl	7e40 <Gpt_Ipw_EnableInterrupt>
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif

    return;
    7800:	bf00      	nop
    7802:	bf00      	nop
}
    7804:	b005      	add	sp, #20
    7806:	f85d fb04 	ldr.w	pc, [sp], #4
    780a:	bf00      	nop
    780c:	1fff8fcc 	.word	0x1fff8fcc
    7810:	1fff8fd0 	.word	0x1fff8fd0
    7814:	1fff8fc8 	.word	0x1fff8fc8

00007818 <Gpt_DisableNotification>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_DisableNotification_Activity
*/
void Gpt_DisableNotification(Gpt_ChannelType channel)
{
    7818:	b500      	push	{lr}
    781a:	b085      	sub	sp, #20
    781c:	4603      	mov	r3, r0
    781e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7822:	2300      	movs	r3, #0
    7824:	9303      	str	r3, [sp, #12]
#endif
#if (GPT_VALIDATE_PARAM == STD_ON)
        if ((Std_ReturnType)E_OK == Gpt_ValidateChannelNotification(GPT_DISABLENOTIFICATION_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7826:	4a25      	ldr	r2, [pc, #148]	; (78bc <Gpt_DisableNotification+0xa4>)
    7828:	9b03      	ldr	r3, [sp, #12]
    782a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    782e:	695a      	ldr	r2, [r3, #20]
    7830:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7834:	5cd3      	ldrb	r3, [r2, r3]
    7836:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Set the enable notification attribute */
            Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = FALSE;
    783a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    783e:	4920      	ldr	r1, [pc, #128]	; (78c0 <Gpt_DisableNotification+0xa8>)
    7840:	9a03      	ldr	r2, [sp, #12]
    7842:	0052      	lsls	r2, r2, #1
    7844:	4413      	add	r3, r2
    7846:	00db      	lsls	r3, r3, #3
    7848:	440b      	add	r3, r1
    784a:	2200      	movs	r2, #0
    784c:	711a      	strb	r2, [r3, #4]

            /* Disable hardware interrupts if the channel is not running in the ONE-SHOT mode.
            This is needed because the channel state is updated by ISR for ONE-SHOT mode */
            if ((GPT_MODE_NORMAL == Gpt_eMode[coreID]) && \
    784e:	4a1d      	ldr	r2, [pc, #116]	; (78c4 <Gpt_DisableNotification+0xac>)
    7850:	9b03      	ldr	r3, [sp, #12]
    7852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7856:	2b00      	cmp	r3, #0
    7858:	d12b      	bne.n	78b2 <Gpt_DisableNotification+0x9a>
                ((GPT_CH_MODE_CONTINUOUS == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode) \
    785a:	4a18      	ldr	r2, [pc, #96]	; (78bc <Gpt_DisableNotification+0xa4>)
    785c:	9b03      	ldr	r3, [sp, #12]
    785e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7862:	6859      	ldr	r1, [r3, #4]
    7864:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7868:	4613      	mov	r3, r2
    786a:	005b      	lsls	r3, r3, #1
    786c:	4413      	add	r3, r2
    786e:	00db      	lsls	r3, r3, #3
    7870:	440b      	add	r3, r1
    7872:	3310      	adds	r3, #16
    7874:	681b      	ldr	r3, [r3, #0]
            if ((GPT_MODE_NORMAL == Gpt_eMode[coreID]) && \
    7876:	2b00      	cmp	r3, #0
    7878:	d009      	beq.n	788e <Gpt_DisableNotification+0x76>
                 || (GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    787a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    787e:	4910      	ldr	r1, [pc, #64]	; (78c0 <Gpt_DisableNotification+0xa8>)
    7880:	9a03      	ldr	r2, [sp, #12]
    7882:	0052      	lsls	r2, r2, #1
    7884:	4413      	add	r3, r2
    7886:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    788a:	2b04      	cmp	r3, #4
    788c:	d011      	beq.n	78b2 <Gpt_DisableNotification+0x9a>
               )
            {
                /*Disable hardware interrupts*/
                Gpt_Ipw_DisableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    788e:	4a0b      	ldr	r2, [pc, #44]	; (78bc <Gpt_DisableNotification+0xa4>)
    7890:	9b03      	ldr	r3, [sp, #12]
    7892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7896:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_DisableInterrupt
    7898:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    789c:	4613      	mov	r3, r2
    789e:	005b      	lsls	r3, r3, #1
    78a0:	4413      	add	r3, r2
    78a2:	00db      	lsls	r3, r3, #3
    78a4:	440b      	add	r3, r1
    78a6:	3314      	adds	r3, #20
    78a8:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_DisableInterrupt
    78aa:	4618      	mov	r0, r3
    78ac:	f000 fae3 	bl	7e76 <Gpt_Ipw_DisableInterrupt>
        }
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
    return;
    78b0:	bf00      	nop
    78b2:	bf00      	nop
}
    78b4:	b005      	add	sp, #20
    78b6:	f85d fb04 	ldr.w	pc, [sp], #4
    78ba:	bf00      	nop
    78bc:	1fff8fcc 	.word	0x1fff8fcc
    78c0:	1fff8fd0 	.word	0x1fff8fd0
    78c4:	1fff8fc8 	.word	0x1fff8fc8

000078c8 <Gpt_SetMode>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_SetMode_Activity
*/
void Gpt_SetMode(Gpt_ModeType Mode)
{
    78c8:	b500      	push	{lr}
    78ca:	b085      	sub	sp, #20
    78cc:	9001      	str	r0, [sp, #4]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_OFF)
    (void)Mode;
#endif

#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint32 coreID = (uint32)Gpt_GetCoreID();
    78ce:	2300      	movs	r3, #0
    78d0:	9303      	str	r3, [sp, #12]
        /*Validate the driver calling context*/
        if((Std_ReturnType)E_OK == Gpt_ValidateParamMode(Mode))
        {
#endif
            /*Implements the behaviour for the sleep mode */
            if(GPT_MODE_SLEEP == Mode)
    78d2:	9b01      	ldr	r3, [sp, #4]
    78d4:	2b01      	cmp	r3, #1
    78d6:	d10f      	bne.n	78f8 <Gpt_SetMode+0x30>
            {
                /* Check channel has wakeup enabled at runtime */
                Gpt_CheckStatusWakeupEnabled(coreID);
    78d8:	9803      	ldr	r0, [sp, #12]
    78da:	f7ff fb7b 	bl	6fd4 <Gpt_CheckStatusWakeupEnabled>

#if(GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON)
                /* De-initialize and Stop Predef Timers. */
                Gpt_Ipw_StopPredefTimer(Gpt_pConfig[coreID]);
    78de:	4a15      	ldr	r2, [pc, #84]	; (7934 <Gpt_SetMode+0x6c>)
    78e0:	9b03      	ldr	r3, [sp, #12]
    78e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78e6:	4618      	mov	r0, r3
    78e8:	f000 fb40 	bl	7f6c <Gpt_Ipw_StopPredefTimer>
#endif
#if (((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON)) || \
     (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON) || \
     (GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON))
                /* Set the driver mode to sleep */
                Gpt_eMode[coreID] = GPT_MODE_SLEEP;
    78ec:	4a12      	ldr	r2, [pc, #72]	; (7938 <Gpt_SetMode+0x70>)
    78ee:	9b03      	ldr	r3, [sp, #12]
    78f0:	2101      	movs	r1, #1
    78f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif

#endif /*GPT_REPORT_WAKEUP_SOURCE*/
    return;
    78f6:	e018      	b.n	792a <Gpt_SetMode+0x62>
            else if (GPT_MODE_NORMAL == Mode)
    78f8:	9b01      	ldr	r3, [sp, #4]
    78fa:	2b00      	cmp	r3, #0
    78fc:	d115      	bne.n	792a <Gpt_SetMode+0x62>
                   if ((Gpt_ModeType)GPT_MODE_SLEEP == Gpt_eMode[coreID])
    78fe:	4a0e      	ldr	r2, [pc, #56]	; (7938 <Gpt_SetMode+0x70>)
    7900:	9b03      	ldr	r3, [sp, #12]
    7902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7906:	2b01      	cmp	r3, #1
    7908:	d106      	bne.n	7918 <Gpt_SetMode+0x50>
                   Gpt_Ipw_StartPredefTimer(Gpt_pConfig[coreID]);
    790a:	4a0a      	ldr	r2, [pc, #40]	; (7934 <Gpt_SetMode+0x6c>)
    790c:	9b03      	ldr	r3, [sp, #12]
    790e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7912:	4618      	mov	r0, r3
    7914:	f000 fab8 	bl	7e88 <Gpt_Ipw_StartPredefTimer>
                Gpt_CheckStatusNotificationEnabled(coreID);
    7918:	9803      	ldr	r0, [sp, #12]
    791a:	f7ff fae7 	bl	6eec <Gpt_CheckStatusNotificationEnabled>
                Gpt_eMode[coreID] = GPT_MODE_NORMAL;
    791e:	4a06      	ldr	r2, [pc, #24]	; (7938 <Gpt_SetMode+0x70>)
    7920:	9b03      	ldr	r3, [sp, #12]
    7922:	2100      	movs	r1, #0
    7924:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return;
    7928:	bf00      	nop
    792a:	bf00      	nop
}
    792c:	b005      	add	sp, #20
    792e:	f85d fb04 	ldr.w	pc, [sp], #4
    7932:	bf00      	nop
    7934:	1fff8fcc 	.word	0x1fff8fcc
    7938:	1fff8fc8 	.word	0x1fff8fc8

0000793c <Gpt_DisableWakeup>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_DisableWakeup_Activity
*/
void Gpt_DisableWakeup(Gpt_ChannelType channel)
{
    793c:	b500      	push	{lr}
    793e:	b085      	sub	sp, #20
    7940:	4603      	mov	r3, r0
    7942:	f88d 3007 	strb.w	r3, [sp, #7]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7946:	2300      	movs	r3, #0
    7948:	9303      	str	r3, [sp, #12]

#if (GPT_VALIDATE_PARAM == STD_ON)
        if((Std_ReturnType)E_OK == Gpt_ValidateChannelWakeup(GPT_DISABLEWAKEUP_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    794a:	4a25      	ldr	r2, [pc, #148]	; (79e0 <Gpt_DisableWakeup+0xa4>)
    794c:	9b03      	ldr	r3, [sp, #12]
    794e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7952:	695a      	ldr	r2, [r3, #20]
    7954:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7958:	5cd3      	ldrb	r3, [r2, r3]
    795a:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Set the enable wakeup attribute */
            Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = FALSE;
    795e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7962:	4920      	ldr	r1, [pc, #128]	; (79e4 <Gpt_DisableWakeup+0xa8>)
    7964:	9a03      	ldr	r2, [sp, #12]
    7966:	0052      	lsls	r2, r2, #1
    7968:	4413      	add	r3, r2
    796a:	00db      	lsls	r3, r3, #3
    796c:	440b      	add	r3, r1
    796e:	2200      	movs	r2, #0
    7970:	715a      	strb	r2, [r3, #5]

            /* Disable hardware interrupts if the channel is not running in the ONE-SHOT mode.
            This is needed because the channel state is updated by ISR for ONE-SHOT mode */
            if ((GPT_MODE_SLEEP == Gpt_eMode[coreID]) && \
    7972:	4a1d      	ldr	r2, [pc, #116]	; (79e8 <Gpt_DisableWakeup+0xac>)
    7974:	9b03      	ldr	r3, [sp, #12]
    7976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    797a:	2b01      	cmp	r3, #1
    797c:	d12b      	bne.n	79d6 <Gpt_DisableWakeup+0x9a>
                ((GPT_CH_MODE_CONTINUOUS == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    797e:	4a18      	ldr	r2, [pc, #96]	; (79e0 <Gpt_DisableWakeup+0xa4>)
    7980:	9b03      	ldr	r3, [sp, #12]
    7982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7986:	6859      	ldr	r1, [r3, #4]
    7988:	f89d 200b 	ldrb.w	r2, [sp, #11]
    798c:	4613      	mov	r3, r2
    798e:	005b      	lsls	r3, r3, #1
    7990:	4413      	add	r3, r2
    7992:	00db      	lsls	r3, r3, #3
    7994:	440b      	add	r3, r1
    7996:	3310      	adds	r3, #16
    7998:	681b      	ldr	r3, [r3, #0]
            if ((GPT_MODE_SLEEP == Gpt_eMode[coreID]) && \
    799a:	2b00      	cmp	r3, #0
    799c:	d009      	beq.n	79b2 <Gpt_DisableWakeup+0x76>
                 || (GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    799e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    79a2:	4910      	ldr	r1, [pc, #64]	; (79e4 <Gpt_DisableWakeup+0xa8>)
    79a4:	9a03      	ldr	r2, [sp, #12]
    79a6:	0052      	lsls	r2, r2, #1
    79a8:	4413      	add	r3, r2
    79aa:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    79ae:	2b04      	cmp	r3, #4
    79b0:	d011      	beq.n	79d6 <Gpt_DisableWakeup+0x9a>
               )
            {
                /*Disable hardware interrupts*/
                Gpt_Ipw_DisableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    79b2:	4a0b      	ldr	r2, [pc, #44]	; (79e0 <Gpt_DisableWakeup+0xa4>)
    79b4:	9b03      	ldr	r3, [sp, #12]
    79b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79ba:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_DisableInterrupt
    79bc:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    79c0:	4613      	mov	r3, r2
    79c2:	005b      	lsls	r3, r3, #1
    79c4:	4413      	add	r3, r2
    79c6:	00db      	lsls	r3, r3, #3
    79c8:	440b      	add	r3, r1
    79ca:	3314      	adds	r3, #20
    79cc:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_DisableInterrupt
    79ce:	4618      	mov	r0, r3
    79d0:	f000 fa51 	bl	7e76 <Gpt_Ipw_DisableInterrupt>
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
#endif /*GPT_REPORT_WAKEUP_SOURCE*/
    return;
    79d4:	bf00      	nop
    79d6:	bf00      	nop
}
    79d8:	b005      	add	sp, #20
    79da:	f85d fb04 	ldr.w	pc, [sp], #4
    79de:	bf00      	nop
    79e0:	1fff8fcc 	.word	0x1fff8fcc
    79e4:	1fff8fd0 	.word	0x1fff8fd0
    79e8:	1fff8fc8 	.word	0x1fff8fc8

000079ec <Gpt_EnableWakeup>:
*
* @pre          The driver needs to be initialized. The channel must be configured as wakeup capable.
* @implements   Gpt_EnableWakeup_Activity
*/
void Gpt_EnableWakeup(Gpt_ChannelType channel)
{
    79ec:	b500      	push	{lr}
    79ee:	b085      	sub	sp, #20
    79f0:	4603      	mov	r3, r0
    79f2:	f88d 3007 	strb.w	r3, [sp, #7]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    79f6:	2300      	movs	r3, #0
    79f8:	9303      	str	r3, [sp, #12]
#endif
#if (GPT_VALIDATE_PARAM == STD_ON)
        if((Std_ReturnType)E_OK == Gpt_ValidateChannelWakeup(GPT_ENABLEWAKEUP_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    79fa:	4a18      	ldr	r2, [pc, #96]	; (7a5c <Gpt_EnableWakeup+0x70>)
    79fc:	9b03      	ldr	r3, [sp, #12]
    79fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a02:	695a      	ldr	r2, [r3, #20]
    7a04:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a08:	5cd3      	ldrb	r3, [r2, r3]
    7a0a:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Functionality implementation */
            /* Set the enable wakeup attribute */
            Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = TRUE;
    7a0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a12:	4913      	ldr	r1, [pc, #76]	; (7a60 <Gpt_EnableWakeup+0x74>)
    7a14:	9a03      	ldr	r2, [sp, #12]
    7a16:	0052      	lsls	r2, r2, #1
    7a18:	4413      	add	r3, r2
    7a1a:	00db      	lsls	r3, r3, #3
    7a1c:	440b      	add	r3, r1
    7a1e:	2201      	movs	r2, #1
    7a20:	715a      	strb	r2, [r3, #5]

            if (GPT_MODE_SLEEP == Gpt_eMode[coreID])
    7a22:	4a10      	ldr	r2, [pc, #64]	; (7a64 <Gpt_EnableWakeup+0x78>)
    7a24:	9b03      	ldr	r3, [sp, #12]
    7a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a2a:	2b01      	cmp	r3, #1
    7a2c:	d111      	bne.n	7a52 <Gpt_EnableWakeup+0x66>
            {
                /*Enable hardware interrupts*/
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7a2e:	4a0b      	ldr	r2, [pc, #44]	; (7a5c <Gpt_EnableWakeup+0x70>)
    7a30:	9b03      	ldr	r3, [sp, #12]
    7a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a36:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    7a38:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7a3c:	4613      	mov	r3, r2
    7a3e:	005b      	lsls	r3, r3, #1
    7a40:	4413      	add	r3, r2
    7a42:	00db      	lsls	r3, r3, #3
    7a44:	440b      	add	r3, r1
    7a46:	3314      	adds	r3, #20
    7a48:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    7a4a:	4618      	mov	r0, r3
    7a4c:	f000 f9f8 	bl	7e40 <Gpt_Ipw_EnableInterrupt>
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
#endif /*GPT_REPORT_WAKEUP_SOURCE*/
    return;
    7a50:	bf00      	nop
    7a52:	bf00      	nop
}
    7a54:	b005      	add	sp, #20
    7a56:	f85d fb04 	ldr.w	pc, [sp], #4
    7a5a:	bf00      	nop
    7a5c:	1fff8fcc 	.word	0x1fff8fcc
    7a60:	1fff8fd0 	.word	0x1fff8fd0
    7a64:	1fff8fc8 	.word	0x1fff8fc8

00007a68 <Gpt_CheckWakeup>:
*
* @pre          The driver needs to be initialized. The channel must be configured as wakeup capable.
* @implements   Gpt_CheckWakeup_Activity
*/
void Gpt_CheckWakeup(EcuM_WakeupSourceType wakeupSource)
{
    7a68:	b500      	push	{lr}
    7a6a:	b087      	sub	sp, #28
    7a6c:	9001      	str	r0, [sp, #4]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7a6e:	2300      	movs	r3, #0
    7a70:	9304      	str	r3, [sp, #16]
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    /*Validate the driver calling context*/
    if((Std_ReturnType)E_OK == Gpt_ValidateGlobalCall(GPT_CHECKWAKEUP_ID, coreID))
    {
#endif
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7a72:	2300      	movs	r3, #0
    7a74:	f88d 3017 	strb.w	r3, [sp, #23]
    7a78:	e03b      	b.n	7af2 <Gpt_CheckWakeup+0x8a>
        {
            channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    7a7a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7a7e:	9904      	ldr	r1, [sp, #16]
    7a80:	4618      	mov	r0, r3
    7a82:	f7ff fa0b 	bl	6e9c <Gpt_ConvertChannelIndexToChannel>
    7a86:	4603      	mov	r3, r0
    7a88:	f88d 300f 	strb.w	r3, [sp, #15]
            if(channel < GPT_HW_CHANNEL_NUM)
    7a8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7a90:	2b01      	cmp	r3, #1
    7a92:	d829      	bhi.n	7ae8 <Gpt_CheckWakeup+0x80>
            {
                if ((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_uWakeupSource) == wakeupSource) && \
    7a94:	4a1d      	ldr	r2, [pc, #116]	; (7b0c <Gpt_CheckWakeup+0xa4>)
    7a96:	9b04      	ldr	r3, [sp, #16]
    7a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a9c:	6859      	ldr	r1, [r3, #4]
    7a9e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    7aa2:	4613      	mov	r3, r2
    7aa4:	005b      	lsls	r3, r3, #1
    7aa6:	4413      	add	r3, r2
    7aa8:	00db      	lsls	r3, r3, #3
    7aaa:	440b      	add	r3, r1
    7aac:	3308      	adds	r3, #8
    7aae:	681b      	ldr	r3, [r3, #0]
    7ab0:	9a01      	ldr	r2, [sp, #4]
    7ab2:	429a      	cmp	r2, r3
    7ab4:	d118      	bne.n	7ae8 <Gpt_CheckWakeup+0x80>
                    ((boolean)TRUE == Gpt_aChannelInfo[coreID][channel].bWakeupGenerated)
    7ab6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7aba:	4915      	ldr	r1, [pc, #84]	; (7b10 <Gpt_CheckWakeup+0xa8>)
    7abc:	9a04      	ldr	r2, [sp, #16]
    7abe:	0052      	lsls	r2, r2, #1
    7ac0:	4413      	add	r3, r2
    7ac2:	00db      	lsls	r3, r3, #3
    7ac4:	440b      	add	r3, r1
    7ac6:	799b      	ldrb	r3, [r3, #6]
                if ((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_uWakeupSource) == wakeupSource) && \
    7ac8:	2b00      	cmp	r3, #0
    7aca:	d00d      	beq.n	7ae8 <Gpt_CheckWakeup+0x80>
                    )
                {
                    /*Reset the wakeup flag */
                    Gpt_aChannelInfo[coreID][channel].bWakeupGenerated = FALSE;
    7acc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ad0:	490f      	ldr	r1, [pc, #60]	; (7b10 <Gpt_CheckWakeup+0xa8>)
    7ad2:	9a04      	ldr	r2, [sp, #16]
    7ad4:	0052      	lsls	r2, r2, #1
    7ad6:	4413      	add	r3, r2
    7ad8:	00db      	lsls	r3, r3, #3
    7ada:	440b      	add	r3, r1
    7adc:	2200      	movs	r2, #0
    7ade:	719a      	strb	r2, [r3, #6]

                    /* Calling EcuM_SetWakeupEvent and exit*/
                    EcuM_SetWakeupEvent(wakeupSource);
    7ae0:	9801      	ldr	r0, [sp, #4]
    7ae2:	f000 fa73 	bl	7fcc <EcuM_SetWakeupEvent>

                    break;
    7ae6:	e00d      	b.n	7b04 <Gpt_CheckWakeup+0x9c>
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7ae8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7aec:	3301      	adds	r3, #1
    7aee:	f88d 3017 	strb.w	r3, [sp, #23]
    7af2:	4a06      	ldr	r2, [pc, #24]	; (7b0c <Gpt_CheckWakeup+0xa4>)
    7af4:	9b04      	ldr	r3, [sp, #16]
    7af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7afa:	781b      	ldrb	r3, [r3, #0]
    7afc:	f89d 2017 	ldrb.w	r2, [sp, #23]
    7b00:	429a      	cmp	r2, r3
    7b02:	d3ba      	bcc.n	7a7a <Gpt_CheckWakeup+0x12>
        }    /*for*/
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
#endif /* GPT_REPORT_WAKEUP_SOURCE */
    return;
    7b04:	bf00      	nop
}
    7b06:	b007      	add	sp, #28
    7b08:	f85d fb04 	ldr.w	pc, [sp], #4
    7b0c:	1fff8fcc 	.word	0x1fff8fcc
    7b10:	1fff8fd0 	.word	0x1fff8fd0

00007b14 <Gpt_ProcessCommonInterrupt>:
* @return       void
* @pre          The driver needs to be initialized.
* @implements   Gpt_ProcessCommonInterrupt_Activity
*/
void Gpt_ProcessCommonInterrupt(uint8 channel)
{
    7b14:	b500      	push	{lr}
    7b16:	b085      	sub	sp, #20
    7b18:	4603      	mov	r3, r0
    7b1a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7b1e:	2300      	movs	r3, #0
    7b20:	9303      	str	r3, [sp, #12]

    if (Gpt_pConfig[coreID] != NULL_PTR)
    7b22:	4a3d      	ldr	r2, [pc, #244]	; (7c18 <Gpt_ProcessCommonInterrupt+0x104>)
    7b24:	9b03      	ldr	r3, [sp, #12]
    7b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b2a:	2b00      	cmp	r3, #0
    7b2c:	d06f      	beq.n	7c0e <Gpt_ProcessCommonInterrupt+0xfa>
    {
        /* Extract the logical channel from the hardware to logic map table */
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7b2e:	4a3a      	ldr	r2, [pc, #232]	; (7c18 <Gpt_ProcessCommonInterrupt+0x104>)
    7b30:	9b03      	ldr	r3, [sp, #12]
    7b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b36:	695a      	ldr	r2, [r3, #20]
    7b38:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b3c:	5cd3      	ldrb	r3, [r2, r3]
    7b3e:	f88d 300b 	strb.w	r3, [sp, #11]

        /* Change the channel status for one-shot mode */
        if (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    7b42:	4a35      	ldr	r2, [pc, #212]	; (7c18 <Gpt_ProcessCommonInterrupt+0x104>)
    7b44:	9b03      	ldr	r3, [sp, #12]
    7b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b4a:	6859      	ldr	r1, [r3, #4]
    7b4c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7b50:	4613      	mov	r3, r2
    7b52:	005b      	lsls	r3, r3, #1
    7b54:	4413      	add	r3, r2
    7b56:	00db      	lsls	r3, r3, #3
    7b58:	440b      	add	r3, r1
    7b5a:	3310      	adds	r3, #16
    7b5c:	681b      	ldr	r3, [r3, #0]
    7b5e:	2b01      	cmp	r3, #1
    7b60:	d108      	bne.n	7b74 <Gpt_ProcessCommonInterrupt+0x60>
        {
            /* Change the channel status to expired */
            Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_EXPIRED;
    7b62:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b66:	492d      	ldr	r1, [pc, #180]	; (7c1c <Gpt_ProcessCommonInterrupt+0x108>)
    7b68:	9a03      	ldr	r2, [sp, #12]
    7b6a:	0052      	lsls	r2, r2, #1
    7b6c:	4413      	add	r3, r2
    7b6e:	2203      	movs	r2, #3
    7b70:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        }
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
        if ((GPT_MODE_NORMAL == Gpt_eMode[coreID]) && (TRUE == Gpt_aChannelInfo[coreID][channel].bNotificationEnabled))
    7b74:	4a2a      	ldr	r2, [pc, #168]	; (7c20 <Gpt_ProcessCommonInterrupt+0x10c>)
    7b76:	9b03      	ldr	r3, [sp, #12]
    7b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b7c:	2b00      	cmp	r3, #0
    7b7e:	d119      	bne.n	7bb4 <Gpt_ProcessCommonInterrupt+0xa0>
    7b80:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b84:	4925      	ldr	r1, [pc, #148]	; (7c1c <Gpt_ProcessCommonInterrupt+0x108>)
    7b86:	9a03      	ldr	r2, [sp, #12]
    7b88:	0052      	lsls	r2, r2, #1
    7b8a:	4413      	add	r3, r2
    7b8c:	00db      	lsls	r3, r3, #3
    7b8e:	440b      	add	r3, r1
    7b90:	791b      	ldrb	r3, [r3, #4]
    7b92:	2b00      	cmp	r3, #0
    7b94:	d00e      	beq.n	7bb4 <Gpt_ProcessCommonInterrupt+0xa0>
        {
            (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_pfNotification();
    7b96:	4a20      	ldr	r2, [pc, #128]	; (7c18 <Gpt_ProcessCommonInterrupt+0x104>)
    7b98:	9b03      	ldr	r3, [sp, #12]
    7b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b9e:	6859      	ldr	r1, [r3, #4]
    7ba0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7ba4:	4613      	mov	r3, r2
    7ba6:	005b      	lsls	r3, r3, #1
    7ba8:	4413      	add	r3, r2
    7baa:	00db      	lsls	r3, r3, #3
    7bac:	440b      	add	r3, r1
    7bae:	3304      	adds	r3, #4
    7bb0:	681b      	ldr	r3, [r3, #0]
    7bb2:	4798      	blx	r3
        }
#endif

#if (GPT_WAKEUP_FUNCTIONALITY_API == STD_ON)
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
        if ((GPT_MODE_SLEEP == Gpt_eMode[coreID]) && (TRUE == Gpt_aChannelInfo[coreID][channel].bWakeupEnabled))
    7bb4:	4a1a      	ldr	r2, [pc, #104]	; (7c20 <Gpt_ProcessCommonInterrupt+0x10c>)
    7bb6:	9b03      	ldr	r3, [sp, #12]
    7bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bbc:	2b01      	cmp	r3, #1
    7bbe:	d126      	bne.n	7c0e <Gpt_ProcessCommonInterrupt+0xfa>
    7bc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7bc4:	4915      	ldr	r1, [pc, #84]	; (7c1c <Gpt_ProcessCommonInterrupt+0x108>)
    7bc6:	9a03      	ldr	r2, [sp, #12]
    7bc8:	0052      	lsls	r2, r2, #1
    7bca:	4413      	add	r3, r2
    7bcc:	00db      	lsls	r3, r3, #3
    7bce:	440b      	add	r3, r1
    7bd0:	795b      	ldrb	r3, [r3, #5]
    7bd2:	2b00      	cmp	r3, #0
    7bd4:	d01b      	beq.n	7c0e <Gpt_ProcessCommonInterrupt+0xfa>
        {
            Gpt_aChannelInfo[coreID][channel].bWakeupGenerated =TRUE;
    7bd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7bda:	4910      	ldr	r1, [pc, #64]	; (7c1c <Gpt_ProcessCommonInterrupt+0x108>)
    7bdc:	9a03      	ldr	r2, [sp, #12]
    7bde:	0052      	lsls	r2, r2, #1
    7be0:	4413      	add	r3, r2
    7be2:	00db      	lsls	r3, r3, #3
    7be4:	440b      	add	r3, r1
    7be6:	2201      	movs	r2, #1
    7be8:	719a      	strb	r2, [r3, #6]
            EcuM_CheckWakeup((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_uWakeupSource);
    7bea:	4a0b      	ldr	r2, [pc, #44]	; (7c18 <Gpt_ProcessCommonInterrupt+0x104>)
    7bec:	9b03      	ldr	r3, [sp, #12]
    7bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bf2:	6859      	ldr	r1, [r3, #4]
    7bf4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7bf8:	4613      	mov	r3, r2
    7bfa:	005b      	lsls	r3, r3, #1
    7bfc:	4413      	add	r3, r2
    7bfe:	00db      	lsls	r3, r3, #3
    7c00:	440b      	add	r3, r1
    7c02:	3308      	adds	r3, #8
    7c04:	681b      	ldr	r3, [r3, #0]
    7c06:	4618      	mov	r0, r3
    7c08:	f000 f9ef 	bl	7fea <EcuM_CheckWakeup>
        }
#endif
#endif
    }
    return;
    7c0c:	bf00      	nop
    7c0e:	bf00      	nop
}
    7c10:	b005      	add	sp, #20
    7c12:	f85d fb04 	ldr.w	pc, [sp], #4
    7c16:	bf00      	nop
    7c18:	1fff8fcc 	.word	0x1fff8fcc
    7c1c:	1fff8fd0 	.word	0x1fff8fd0
    7c20:	1fff8fc8 	.word	0x1fff8fc8

00007c24 <Gpt_GetPredefTimerValue>:
Std_ReturnType Gpt_GetPredefTimerValue
(
    Gpt_PredefTimerType PredefTimer,
    uint32 * TimeValuePtr
)
{
    7c24:	b500      	push	{lr}
    7c26:	b085      	sub	sp, #20
    7c28:	9001      	str	r0, [sp, #4]
    7c2a:	9100      	str	r1, [sp, #0]
    Std_ReturnType returnValue;
    Gpt_ChannelType channel;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7c2c:	2300      	movs	r3, #0
    7c2e:	9303      	str	r3, [sp, #12]
            returnValue = Gpt_ValidateParamTypePredefTimer(PredefTimer, coreID);
            if((Std_ReturnType)E_OK == returnValue)
            {
#endif

               returnValue = Gpt_ValidateMode(GPT_GET_PREDEF_TIMERVALUE_ID, coreID);
    7c30:	9903      	ldr	r1, [sp, #12]
    7c32:	200d      	movs	r0, #13
    7c34:	f7ff f910 	bl	6e58 <Gpt_ValidateMode>
    7c38:	4603      	mov	r3, r0
    7c3a:	f88d 300b 	strb.w	r3, [sp, #11]
               if((Std_ReturnType)E_OK ==returnValue)
    7c3e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7c42:	2b00      	cmp	r3, #0
    7c44:	d112      	bne.n	7c6c <Gpt_GetPredefTimerValue+0x48>
               {

                        channel = (Gpt_ChannelType)PredefTimer;
    7c46:	9b01      	ldr	r3, [sp, #4]
    7c48:	f88d 300a 	strb.w	r3, [sp, #10]

                        Gpt_Ipw_GetPredefTimerValue((Gpt_pConfig[coreID]->Gpt_pChannelPredefConfigType)[channel], PredefTimer, TimeValuePtr);
    7c4c:	4a0c      	ldr	r2, [pc, #48]	; (7c80 <Gpt_GetPredefTimerValue+0x5c>)
    7c4e:	9b03      	ldr	r3, [sp, #12]
    7c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c54:	691a      	ldr	r2, [r3, #16]
    7c56:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7c5a:	009b      	lsls	r3, r3, #2
    7c5c:	4413      	add	r3, r2
    7c5e:	681b      	ldr	r3, [r3, #0]
    7c60:	9a00      	ldr	r2, [sp, #0]
    7c62:	9901      	ldr	r1, [sp, #4]
    7c64:	4618      	mov	r0, r3
    7c66:	f000 f943 	bl	7ef0 <Gpt_Ipw_GetPredefTimerValue>
    7c6a:	e002      	b.n	7c72 <Gpt_GetPredefTimerValue+0x4e>

               }
               else
               {
                   *TimeValuePtr = 0U;
    7c6c:	9b00      	ldr	r3, [sp, #0]
    7c6e:	2200      	movs	r2, #0
    7c70:	601a      	str	r2, [r3, #0]
        }
#endif
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
    return returnValue;
    7c72:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    7c76:	4618      	mov	r0, r3
    7c78:	b005      	add	sp, #20
    7c7a:	f85d fb04 	ldr.w	pc, [sp], #4
    7c7e:	bf00      	nop
    7c80:	1fff8fcc 	.word	0x1fff8fcc

00007c84 <Ftm_Gpt_Ip_GetChInterruptStatusFlag>:
{
    7c84:	b082      	sub	sp, #8
    7c86:	4603      	mov	r3, r0
    7c88:	460a      	mov	r2, r1
    7c8a:	f88d 3007 	strb.w	r3, [sp, #7]
    7c8e:	4613      	mov	r3, r2
    7c90:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->CONTROLS[channel].CSC & FTM_CSC_CHF_MASK)) ? TRUE : FALSE;
    7c94:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c98:	4a09      	ldr	r2, [pc, #36]	; (7cc0 <Ftm_Gpt_Ip_GetChInterruptStatusFlag+0x3c>)
    7c9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7c9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7ca2:	3301      	adds	r3, #1
    7ca4:	00db      	lsls	r3, r3, #3
    7ca6:	4413      	add	r3, r2
    7ca8:	685b      	ldr	r3, [r3, #4]
    7caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7cae:	2b00      	cmp	r3, #0
    7cb0:	bf14      	ite	ne
    7cb2:	2301      	movne	r3, #1
    7cb4:	2300      	moveq	r3, #0
    7cb6:	b2db      	uxtb	r3, r3
}
    7cb8:	4618      	mov	r0, r3
    7cba:	b002      	add	sp, #8
    7cbc:	4770      	bx	lr
    7cbe:	bf00      	nop
    7cc0:	0000bf7c 	.word	0x0000bf7c

00007cc4 <Ftm_Gpt_Ip_GetCntValue>:
{
    7cc4:	b082      	sub	sp, #8
    7cc6:	4603      	mov	r3, r0
    7cc8:	f88d 3007 	strb.w	r3, [sp, #7]
    return ftmGptBase[instance]->CNT;
    7ccc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7cd0:	4a03      	ldr	r2, [pc, #12]	; (7ce0 <Ftm_Gpt_Ip_GetCntValue+0x1c>)
    7cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cd6:	685b      	ldr	r3, [r3, #4]
}
    7cd8:	4618      	mov	r0, r3
    7cda:	b002      	add	sp, #8
    7cdc:	4770      	bx	lr
    7cde:	bf00      	nop
    7ce0:	0000bf7c 	.word	0x0000bf7c

00007ce4 <Ftm_Gpt_Ip_GetCompareValue>:
{
    7ce4:	b082      	sub	sp, #8
    7ce6:	4603      	mov	r3, r0
    7ce8:	460a      	mov	r2, r1
    7cea:	f88d 3007 	strb.w	r3, [sp, #7]
    7cee:	4613      	mov	r3, r2
    7cf0:	f88d 3006 	strb.w	r3, [sp, #6]
    return ftmGptBase[instance]->CONTROLS[channel].CV;
    7cf4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7cf8:	4a05      	ldr	r2, [pc, #20]	; (7d10 <Ftm_Gpt_Ip_GetCompareValue+0x2c>)
    7cfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7cfe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7d02:	3301      	adds	r3, #1
    7d04:	00db      	lsls	r3, r3, #3
    7d06:	4413      	add	r3, r2
    7d08:	689b      	ldr	r3, [r3, #8]
}
    7d0a:	4618      	mov	r0, r3
    7d0c:	b002      	add	sp, #8
    7d0e:	4770      	bx	lr
    7d10:	0000bf7c 	.word	0x0000bf7c

00007d14 <Gpt_Ipw_InitInstances>:
*
* @return       void
* @pre          The driver needs to be initialized.
*/
void Gpt_Ipw_InitInstances(const Gpt_ConfigType * configPtr)
{
    7d14:	b500      	push	{lr}
    7d16:	b085      	sub	sp, #20
    7d18:	9001      	str	r0, [sp, #4]

    uint8 index = 0U;
    7d1a:	2300      	movs	r3, #0
    7d1c:	f88d 300f 	strb.w	r3, [sp, #15]

    for(index = 0; index < configPtr->instanceCount; index++)
    7d20:	2300      	movs	r3, #0
    7d22:	f88d 300f 	strb.w	r3, [sp, #15]
    7d26:	e022      	b.n	7d6e <Gpt_Ipw_InitInstances+0x5a>
    {
        switch((*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].instanceType)
    7d28:	9b01      	ldr	r3, [sp, #4]
    7d2a:	68da      	ldr	r2, [r3, #12]
    7d2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7d30:	011b      	lsls	r3, r3, #4
    7d32:	4413      	add	r3, r2
    7d34:	681b      	ldr	r3, [r3, #0]
    7d36:	2b00      	cmp	r3, #0
    7d38:	d113      	bne.n	7d62 <Gpt_Ipw_InitInstances+0x4e>
        {
#if (FTM_GPT_IP_USED == STD_ON)
            case(GPT_FTM_MODULE):
            {
                Ftm_Gpt_Ip_Init((*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].instance,
    7d3a:	9b01      	ldr	r3, [sp, #4]
    7d3c:	68da      	ldr	r2, [r3, #12]
    7d3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7d42:	011b      	lsls	r3, r3, #4
    7d44:	4413      	add	r3, r2
    7d46:	3304      	adds	r3, #4
    7d48:	7818      	ldrb	r0, [r3, #0]
                                (*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].Gpt_Ipw_InstanceConfig.Ftm_Gpt_Ip_InstanceConfig);
    7d4a:	9b01      	ldr	r3, [sp, #4]
    7d4c:	68da      	ldr	r2, [r3, #12]
                Ftm_Gpt_Ip_Init((*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].instance,
    7d4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7d52:	011b      	lsls	r3, r3, #4
    7d54:	4413      	add	r3, r2
    7d56:	3308      	adds	r3, #8
    7d58:	681b      	ldr	r3, [r3, #0]
    7d5a:	4619      	mov	r1, r3
    7d5c:	f7fe fd64 	bl	6828 <Ftm_Gpt_Ip_Init>
            }
            break;
    7d60:	e000      	b.n	7d64 <Gpt_Ipw_InitInstances+0x50>
            break;
#endif

            default:
                /*This switch branch is empty because it shall not be executed for normal behaviour*/
            break;
    7d62:	bf00      	nop
    for(index = 0; index < configPtr->instanceCount; index++)
    7d64:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7d68:	3301      	adds	r3, #1
    7d6a:	f88d 300f 	strb.w	r3, [sp, #15]
    7d6e:	9b01      	ldr	r3, [sp, #4]
    7d70:	7a1b      	ldrb	r3, [r3, #8]
    7d72:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7d76:	429a      	cmp	r2, r3
    7d78:	d3d6      	bcc.n	7d28 <Gpt_Ipw_InitInstances+0x14>
        }
    }
    return;
    7d7a:	bf00      	nop
}
    7d7c:	b005      	add	sp, #20
    7d7e:	f85d fb04 	ldr.w	pc, [sp], #4

00007d82 <Gpt_Ipw_Init>:
* @param[in]    pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return       void
* @pre          The driver needs to be initialized.
*/
void Gpt_Ipw_Init(const Gpt_Ipw_HwChannelConfigType *pHwChannelConfig)
{
    7d82:	b500      	push	{lr}
    7d84:	b083      	sub	sp, #12
    7d86:	9001      	str	r0, [sp, #4]

    switch(pHwChannelConfig->instanceType)
    7d88:	9b01      	ldr	r3, [sp, #4]
    7d8a:	681b      	ldr	r3, [r3, #0]
    7d8c:	2b00      	cmp	r3, #0
    7d8e:	d108      	bne.n	7da2 <Gpt_Ipw_Init+0x20>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {
            Ftm_Gpt_Ip_InitChannel(pHwChannelConfig->instance,
    7d90:	9b01      	ldr	r3, [sp, #4]
    7d92:	791a      	ldrb	r2, [r3, #4]
    7d94:	9b01      	ldr	r3, [sp, #4]
    7d96:	689b      	ldr	r3, [r3, #8]
    7d98:	4619      	mov	r1, r3
    7d9a:	4610      	mov	r0, r2
    7d9c:	f7fe fd86 	bl	68ac <Ftm_Gpt_Ip_InitChannel>
                                   pHwChannelConfig->Gpt_Ipw_ChannelConfig.Ftm_Gpt_Ip_ChannelConfig);
        }
        break;
    7da0:	e000      	b.n	7da4 <Gpt_Ipw_Init+0x22>
        }
            break;
#endif
        default:
            /* This switch branch is empty because it shall not be executed for normal behaviour */
        break;
    7da2:	bf00      	nop
    }
    return;
    7da4:	bf00      	nop
}
    7da6:	b003      	add	sp, #12
    7da8:	f85d fb04 	ldr.w	pc, [sp], #4

00007dac <Gpt_Ipw_StartTimer>:
* @param[in]     uValue              Timeout period (in ticks) after which a notification shall occur (if enabled).
* @return        void
* @pre           The driver needs to be initialized.Call Gpt_StartTimer before.
*/
Std_ReturnType Gpt_Ipw_StartTimer(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig, Gpt_ValueType uValue)
{
    7dac:	b500      	push	{lr}
    7dae:	b085      	sub	sp, #20
    7db0:	9001      	str	r0, [sp, #4]
    7db2:	9100      	str	r1, [sp, #0]

    Std_ReturnType returnValue = (Std_ReturnType)E_NOT_OK;
    7db4:	2301      	movs	r3, #1
    7db6:	f88d 300f 	strb.w	r3, [sp, #15]

    switch(pHwChannelConfig->instanceType)
    7dba:	9b01      	ldr	r3, [sp, #4]
    7dbc:	681b      	ldr	r3, [r3, #0]
    7dbe:	2b00      	cmp	r3, #0
    7dc0:	d10c      	bne.n	7ddc <Gpt_Ipw_StartTimer+0x30>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
            {
                Ftm_Gpt_Ip_StartCounting(pHwChannelConfig->instance,
    7dc2:	9b01      	ldr	r3, [sp, #4]
    7dc4:	7918      	ldrb	r0, [r3, #4]
    7dc6:	9b01      	ldr	r3, [sp, #4]
    7dc8:	795b      	ldrb	r3, [r3, #5]
    7dca:	9a00      	ldr	r2, [sp, #0]
    7dcc:	b292      	uxth	r2, r2
    7dce:	4619      	mov	r1, r3
    7dd0:	f7fe fe1c 	bl	6a0c <Ftm_Gpt_Ip_StartCounting>
                                         pHwChannelConfig->channel,
                                         (uint16)uValue);
                returnValue = (Std_ReturnType)E_OK;
    7dd4:	2300      	movs	r3, #0
    7dd6:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        break;
    7dda:	e000      	b.n	7dde <Gpt_Ipw_StartTimer+0x32>
            }
            break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour */
        break;
    7ddc:	bf00      	nop
    }

    return returnValue;
    7dde:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7de2:	4618      	mov	r0, r3
    7de4:	b005      	add	sp, #20
    7de6:	f85d fb04 	ldr.w	pc, [sp], #4

00007dea <Gpt_Ipw_GetTimeElapsed>:
* @pre           The driver needs to be initialized.Call GetTimeElapsed before.
*
*/
Gpt_ValueType Gpt_Ipw_GetTimeElapsed(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig,
                                                      Gpt_HwChannelInfoType * pReturnHwChannelInfo)
{
    7dea:	b500      	push	{lr}
    7dec:	b085      	sub	sp, #20
    7dee:	9001      	str	r0, [sp, #4]
    7df0:	9100      	str	r1, [sp, #0]
    uint32 returnValue;

    switch(pHwChannelConfig->instanceType)
    7df2:	9b01      	ldr	r3, [sp, #4]
    7df4:	681b      	ldr	r3, [r3, #0]
    7df6:	2b00      	cmp	r3, #0
    7df8:	d105      	bne.n	7e06 <Gpt_Ipw_GetTimeElapsed+0x1c>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {
            returnValue = Gpt_Ipw_FtmGetTimeElapsed(pHwChannelConfig, pReturnHwChannelInfo);
    7dfa:	9900      	ldr	r1, [sp, #0]
    7dfc:	9801      	ldr	r0, [sp, #4]
    7dfe:	f7f8 fd93 	bl	928 <Gpt_Ipw_FtmGetTimeElapsed>
    7e02:	9003      	str	r0, [sp, #12]
        }
        break;
    7e04:	e002      	b.n	7e0c <Gpt_Ipw_GetTimeElapsed+0x22>
        break;
#endif

        default:
             /* This switch branch is empty because it shall not be executed for normal behaviour */
             returnValue = 0U;
    7e06:	2300      	movs	r3, #0
    7e08:	9303      	str	r3, [sp, #12]
        break;
    7e0a:	bf00      	nop
    }
    return (Gpt_ValueType)returnValue;
    7e0c:	9b03      	ldr	r3, [sp, #12]
}
    7e0e:	4618      	mov	r0, r3
    7e10:	b005      	add	sp, #20
    7e12:	f85d fb04 	ldr.w	pc, [sp], #4

00007e16 <Gpt_Ipw_StopTimer>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized.Call StopTimer before.
*/
void Gpt_Ipw_StopTimer(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    7e16:	b500      	push	{lr}
    7e18:	b083      	sub	sp, #12
    7e1a:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    7e1c:	9b01      	ldr	r3, [sp, #4]
    7e1e:	681b      	ldr	r3, [r3, #0]
    7e20:	2b00      	cmp	r3, #0
    7e22:	d108      	bne.n	7e36 <Gpt_Ipw_StopTimer+0x20>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {

            Ftm_Gpt_Ip_DisableChannelInterrupt(pHwChannelConfig->instance,
    7e24:	9b01      	ldr	r3, [sp, #4]
    7e26:	791a      	ldrb	r2, [r3, #4]
    7e28:	9b01      	ldr	r3, [sp, #4]
    7e2a:	795b      	ldrb	r3, [r3, #5]
    7e2c:	4619      	mov	r1, r3
    7e2e:	4610      	mov	r0, r2
    7e30:	f7fe fe96 	bl	6b60 <Ftm_Gpt_Ip_DisableChannelInterrupt>
                                               pHwChannelConfig->channel);
        }
        break;
    7e34:	e000      	b.n	7e38 <Gpt_Ipw_StopTimer+0x22>
        }
            break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    7e36:	bf00      	nop
    }

    return;
    7e38:	bf00      	nop
}
    7e3a:	b003      	add	sp, #12
    7e3c:	f85d fb04 	ldr.w	pc, [sp], #4

00007e40 <Gpt_Ipw_EnableInterrupt>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized.
*/
void Gpt_Ipw_EnableInterrupt(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    7e40:	b082      	sub	sp, #8
    7e42:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    7e44:	9b01      	ldr	r3, [sp, #4]
    7e46:	681b      	ldr	r3, [r3, #0]
    7e48:	2b00      	cmp	r3, #0
        }
        break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    7e4a:	bf00      	nop
    }

    return;
    7e4c:	bf00      	nop
}
    7e4e:	b002      	add	sp, #8
    7e50:	4770      	bx	lr

00007e52 <Gpt_Ipw_DeInit>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized. On/Off by the configuration parameter: GPT_DEINIT_API
*/
void Gpt_Ipw_DeInit(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    7e52:	b500      	push	{lr}
    7e54:	b083      	sub	sp, #12
    7e56:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    7e58:	9b01      	ldr	r3, [sp, #4]
    7e5a:	681b      	ldr	r3, [r3, #0]
    7e5c:	2b00      	cmp	r3, #0
    7e5e:	d105      	bne.n	7e6c <Gpt_Ipw_DeInit+0x1a>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {
           Ftm_Gpt_Ip_Deinit(pHwChannelConfig->instance);
    7e60:	9b01      	ldr	r3, [sp, #4]
    7e62:	791b      	ldrb	r3, [r3, #4]
    7e64:	4618      	mov	r0, r3
    7e66:	f7fe fd85 	bl	6974 <Ftm_Gpt_Ip_Deinit>
        }
        break;
    7e6a:	e000      	b.n	7e6e <Gpt_Ipw_DeInit+0x1c>
        }
        break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    7e6c:	bf00      	nop
    }
    return;
    7e6e:	bf00      	nop
}
    7e70:	b003      	add	sp, #12
    7e72:	f85d fb04 	ldr.w	pc, [sp], #4

00007e76 <Gpt_Ipw_DisableInterrupt>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized.On/Off by the configuration parameter: GPT_ENABLE_DISABLE_NOTIFICATION_API
*/
void Gpt_Ipw_DisableInterrupt(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    7e76:	b082      	sub	sp, #8
    7e78:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    7e7a:	9b01      	ldr	r3, [sp, #4]
    7e7c:	681b      	ldr	r3, [r3, #0]
    7e7e:	2b00      	cmp	r3, #0
        }
        break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    7e80:	bf00      	nop
    }

    return;
    7e82:	bf00      	nop
}
    7e84:	b002      	add	sp, #8
    7e86:	4770      	bx	lr

00007e88 <Gpt_Ipw_StartPredefTimer>:

void Gpt_Ipw_StartPredefTimer
(
    const Gpt_ConfigType * configPtr
)
{
    7e88:	b510      	push	{r4, lr}
    7e8a:	b086      	sub	sp, #24
    7e8c:	9003      	str	r0, [sp, #12]
    Gpt_ChannelType channel;
    const Gpt_HwPredefChannelConfigType * pHwChannelConfig;

    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    7e8e:	2300      	movs	r3, #0
    7e90:	f88d 3017 	strb.w	r3, [sp, #23]
    7e94:	e025      	b.n	7ee2 <Gpt_Ipw_StartPredefTimer+0x5a>
    {
        pHwChannelConfig = (configPtr->Gpt_pChannelPredefConfigType)[channel];
    7e96:	9b03      	ldr	r3, [sp, #12]
    7e98:	691a      	ldr	r2, [r3, #16]
    7e9a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7e9e:	009b      	lsls	r3, r3, #2
    7ea0:	4413      	add	r3, r2
    7ea2:	681b      	ldr	r3, [r3, #0]
    7ea4:	9304      	str	r3, [sp, #16]

        if(NULL_PTR != pHwChannelConfig)
    7ea6:	9b04      	ldr	r3, [sp, #16]
    7ea8:	2b00      	cmp	r3, #0
    7eaa:	d012      	beq.n	7ed2 <Gpt_Ipw_StartPredefTimer+0x4a>
        {
            switch(pHwChannelConfig->instanceType)
    7eac:	9b04      	ldr	r3, [sp, #16]
    7eae:	681b      	ldr	r3, [r3, #0]
    7eb0:	2b00      	cmp	r3, #0
    7eb2:	d110      	bne.n	7ed6 <Gpt_Ipw_StartPredefTimer+0x4e>
            {
#if (FTM_GPT_IP_USED == STD_ON)
            case GPT_FTM_MODULE:
            {
                Ftm_Gpt_Ip_StartPredefTimer(pHwChannelConfig->instance, \
    7eb4:	9b04      	ldr	r3, [sp, #16]
    7eb6:	7918      	ldrb	r0, [r3, #4]
    7eb8:	9b04      	ldr	r3, [sp, #16]
    7eba:	7959      	ldrb	r1, [r3, #5]
    7ebc:	9b04      	ldr	r3, [sp, #16]
    7ebe:	7a1a      	ldrb	r2, [r3, #8]
    7ec0:	9b04      	ldr	r3, [sp, #16]
    7ec2:	799c      	ldrb	r4, [r3, #6]
    7ec4:	9b04      	ldr	r3, [sp, #16]
    7ec6:	79db      	ldrb	r3, [r3, #7]
    7ec8:	9300      	str	r3, [sp, #0]
    7eca:	4623      	mov	r3, r4
    7ecc:	f7fe fe80 	bl	6bd0 <Ftm_Gpt_Ip_StartPredefTimer>
                                            pHwChannelConfig->channel, \
                                            pHwChannelConfig->Gpt_uPrescaler, \
                                            pHwChannelConfig->Gpt_uClockSource, \
                                            pHwChannelConfig->Gpt_bFreezeEnable);
            }
            break;
    7ed0:	e002      	b.n	7ed8 <Gpt_Ipw_StartPredefTimer+0x50>
#endif
            default:
                /*This switch branch is empty because it shall not be executed for normal behaviour*/
            break;
            }
        }
    7ed2:	bf00      	nop
    7ed4:	e000      	b.n	7ed8 <Gpt_Ipw_StartPredefTimer+0x50>
            break;
    7ed6:	bf00      	nop
    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    7ed8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7edc:	3301      	adds	r3, #1
    7ede:	f88d 3017 	strb.w	r3, [sp, #23]
    7ee2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7ee6:	2b03      	cmp	r3, #3
    7ee8:	d9d5      	bls.n	7e96 <Gpt_Ipw_StartPredefTimer+0xe>
    }

    return;
    7eea:	bf00      	nop
}
    7eec:	b006      	add	sp, #24
    7eee:	bd10      	pop	{r4, pc}

00007ef0 <Gpt_Ipw_GetPredefTimerValue>:
(
    const Gpt_HwPredefChannelConfigType * pHwChannelConfig,
    Gpt_PredefTimerType PredefTimer,
    uint32 * TimeValuePtr
)
{
    7ef0:	b500      	push	{lr}
    7ef2:	b087      	sub	sp, #28
    7ef4:	9003      	str	r0, [sp, #12]
    7ef6:	9102      	str	r1, [sp, #8]
    7ef8:	9201      	str	r2, [sp, #4]
    uint32 u32ReturnValue = 0U;
    7efa:	2300      	movs	r3, #0
    7efc:	9305      	str	r3, [sp, #20]
    switch(pHwChannelConfig->instanceType)
    7efe:	9b03      	ldr	r3, [sp, #12]
    7f00:	681b      	ldr	r3, [r3, #0]
    7f02:	2b00      	cmp	r3, #0
    7f04:	d106      	bne.n	7f14 <Gpt_Ipw_GetPredefTimerValue+0x24>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case GPT_FTM_MODULE:
        {
            u32ReturnValue = Ftm_Gpt_Ip_GetCntValue(pHwChannelConfig->instance);
    7f06:	9b03      	ldr	r3, [sp, #12]
    7f08:	791b      	ldrb	r3, [r3, #4]
    7f0a:	4618      	mov	r0, r3
    7f0c:	f7ff feda 	bl	7cc4 <Ftm_Gpt_Ip_GetCntValue>
    7f10:	9005      	str	r0, [sp, #20]
        }
        break;
    7f12:	e000      	b.n	7f16 <Gpt_Ipw_GetPredefTimerValue+0x26>
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    7f14:	bf00      	nop
    }
    if(0U != u32ReturnValue)
    7f16:	9b05      	ldr	r3, [sp, #20]
    7f18:	2b00      	cmp	r3, #0
    7f1a:	d020      	beq.n	7f5e <Gpt_Ipw_GetPredefTimerValue+0x6e>
    7f1c:	9b02      	ldr	r3, [sp, #8]
    7f1e:	2b03      	cmp	r3, #3
    7f20:	d81f      	bhi.n	7f62 <Gpt_Ipw_GetPredefTimerValue+0x72>
    7f22:	a201      	add	r2, pc, #4	; (adr r2, 7f28 <Gpt_Ipw_GetPredefTimerValue+0x38>)
    7f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7f28:	00007f39 	.word	0x00007f39
    7f2c:	00007f43 	.word	0x00007f43
    7f30:	00007f4f 	.word	0x00007f4f
    7f34:	00007f57 	.word	0x00007f57
    {
        switch(PredefTimer)
        {
            case GPT_PREDEF_TIMER_1US_16BIT:
                *TimeValuePtr = (0x0000FFFFU & u32ReturnValue);
    7f38:	9b05      	ldr	r3, [sp, #20]
    7f3a:	b29a      	uxth	r2, r3
    7f3c:	9b01      	ldr	r3, [sp, #4]
    7f3e:	601a      	str	r2, [r3, #0]
            break;
    7f40:	e010      	b.n	7f64 <Gpt_Ipw_GetPredefTimerValue+0x74>
            case GPT_PREDEF_TIMER_1US_24BIT:
                *TimeValuePtr = (0x00FFFFFFU & u32ReturnValue);
    7f42:	9b05      	ldr	r3, [sp, #20]
    7f44:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    7f48:	9b01      	ldr	r3, [sp, #4]
    7f4a:	601a      	str	r2, [r3, #0]
            break;
    7f4c:	e00a      	b.n	7f64 <Gpt_Ipw_GetPredefTimerValue+0x74>
            case GPT_PREDEF_TIMER_1US_32BIT:
                *TimeValuePtr = u32ReturnValue;
    7f4e:	9b01      	ldr	r3, [sp, #4]
    7f50:	9a05      	ldr	r2, [sp, #20]
    7f52:	601a      	str	r2, [r3, #0]
            break;
    7f54:	e006      	b.n	7f64 <Gpt_Ipw_GetPredefTimerValue+0x74>
            case GPT_PREDEF_TIMER_100US_32BIT:
                *TimeValuePtr = u32ReturnValue;
    7f56:	9b01      	ldr	r3, [sp, #4]
    7f58:	9a05      	ldr	r2, [sp, #20]
    7f5a:	601a      	str	r2, [r3, #0]
            break;
    7f5c:	e002      	b.n	7f64 <Gpt_Ipw_GetPredefTimerValue+0x74>
            default:
                /* 32bit timer */
            break;
        }
    }
    7f5e:	bf00      	nop
    7f60:	e000      	b.n	7f64 <Gpt_Ipw_GetPredefTimerValue+0x74>
            break;
    7f62:	bf00      	nop
    return;
    7f64:	bf00      	nop
}
    7f66:	b007      	add	sp, #28
    7f68:	f85d fb04 	ldr.w	pc, [sp], #4

00007f6c <Gpt_Ipw_StopPredefTimer>:
*/
void Gpt_Ipw_StopPredefTimer
(
    const Gpt_ConfigType * configPtr
)
{
    7f6c:	b500      	push	{lr}
    7f6e:	b085      	sub	sp, #20
    7f70:	9001      	str	r0, [sp, #4]
    Gpt_ChannelType channel;
    const Gpt_HwPredefChannelConfigType * pHwChannelConfig;

    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    7f72:	2300      	movs	r3, #0
    7f74:	f88d 300f 	strb.w	r3, [sp, #15]
    7f78:	e01f      	b.n	7fba <Gpt_Ipw_StopPredefTimer+0x4e>
    {

        pHwChannelConfig = (configPtr->Gpt_pChannelPredefConfigType)[channel];
    7f7a:	9b01      	ldr	r3, [sp, #4]
    7f7c:	691a      	ldr	r2, [r3, #16]
    7f7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7f82:	009b      	lsls	r3, r3, #2
    7f84:	4413      	add	r3, r2
    7f86:	681b      	ldr	r3, [r3, #0]
    7f88:	9302      	str	r3, [sp, #8]
        if(NULL_PTR != pHwChannelConfig)
    7f8a:	9b02      	ldr	r3, [sp, #8]
    7f8c:	2b00      	cmp	r3, #0
    7f8e:	d00c      	beq.n	7faa <Gpt_Ipw_StopPredefTimer+0x3e>
        {
            switch(pHwChannelConfig->instanceType)
    7f90:	9b02      	ldr	r3, [sp, #8]
    7f92:	681b      	ldr	r3, [r3, #0]
    7f94:	2b00      	cmp	r3, #0
    7f96:	d10a      	bne.n	7fae <Gpt_Ipw_StopPredefTimer+0x42>
            {
#if (FTM_GPT_IP_USED == STD_ON)
            case GPT_FTM_MODULE:
            {
                Ftm_Gpt_Ip_StopPredefTimer(pHwChannelConfig->instance, \
    7f98:	9b02      	ldr	r3, [sp, #8]
    7f9a:	791a      	ldrb	r2, [r3, #4]
    7f9c:	9b02      	ldr	r3, [sp, #8]
    7f9e:	795b      	ldrb	r3, [r3, #5]
    7fa0:	4619      	mov	r1, r3
    7fa2:	4610      	mov	r0, r2
    7fa4:	f7fe fea6 	bl	6cf4 <Ftm_Gpt_Ip_StopPredefTimer>
                                           pHwChannelConfig->channel);
            }
            break;
    7fa8:	e002      	b.n	7fb0 <Gpt_Ipw_StopPredefTimer+0x44>
#endif
            default:
                /*This switch branch is empty because it shall not be executed for normal behaviour*/
            break;
            }
        }
    7faa:	bf00      	nop
    7fac:	e000      	b.n	7fb0 <Gpt_Ipw_StopPredefTimer+0x44>
            break;
    7fae:	bf00      	nop
    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    7fb0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7fb4:	3301      	adds	r3, #1
    7fb6:	f88d 300f 	strb.w	r3, [sp, #15]
    7fba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7fbe:	2b03      	cmp	r3, #3
    7fc0:	d9db      	bls.n	7f7a <Gpt_Ipw_StopPredefTimer+0xe>
    }
    return;
    7fc2:	bf00      	nop
}
    7fc4:	b005      	add	sp, #20
    7fc6:	f85d fb04 	ldr.w	pc, [sp], #4
    7fca:	bf00      	nop

00007fcc <EcuM_SetWakeupEvent>:
* 
* @param[in]     events  last wakeup event
* 
*/
void EcuM_SetWakeupEvent(EcuM_WakeupSourceType events)
{
    7fcc:	b082      	sub	sp, #8
    7fce:	9001      	str	r0, [sp, #4]
    EcuMLastWakeupEvent = events;
    7fd0:	4a02      	ldr	r2, [pc, #8]	; (7fdc <EcuM_SetWakeupEvent+0x10>)
    7fd2:	9b01      	ldr	r3, [sp, #4]
    7fd4:	6013      	str	r3, [r2, #0]
}
    7fd6:	bf00      	nop
    7fd8:	b002      	add	sp, #8
    7fda:	4770      	bx	lr
    7fdc:	1fff8fe8 	.word	0x1fff8fe8

00007fe0 <EcuM_ValidateWakeupEvent>:
* @details This is a function stub only. Functionality is void in this implementation
* 
* @param[in]     events wakeup event to validate
*/
void EcuM_ValidateWakeupEvent(EcuM_WakeupSourceType events)
{
    7fe0:	b082      	sub	sp, #8
    7fe2:	9001      	str	r0, [sp, #4]
    (void)events;
}
    7fe4:	bf00      	nop
    7fe6:	b002      	add	sp, #8
    7fe8:	4770      	bx	lr

00007fea <EcuM_CheckWakeup>:
* 
* @param[in]     wakeupSource  wakeup source ID
* 
*/
void EcuM_CheckWakeup(EcuM_WakeupSourceType wakeupSource)
{
    7fea:	b082      	sub	sp, #8
    7fec:	9001      	str	r0, [sp, #4]
#endif
#ifdef TEST_ICU
    Icu_CheckWakeup(wakeupSource);
#endif
    (void)wakeupSource;
}
    7fee:	bf00      	nop
    7ff0:	b002      	add	sp, #8
    7ff2:	4770      	bx	lr

00007ff4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    7ff4:	b500      	push	{lr}
    7ff6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7ff8:	f7f8 fde2 	bl	bc0 <Sys_GetCoreID>
    7ffc:	4603      	mov	r3, r0
    7ffe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    8000:	4a10      	ldr	r2, [pc, #64]	; (8044 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    8002:	9b01      	ldr	r3, [sp, #4]
    8004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8008:	2b00      	cmp	r3, #0
    800a:	d10d      	bne.n	8028 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    800c:	f7f8 fcee 	bl	9ec <Dio_schm_read_msr>
    8010:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8012:	9b00      	ldr	r3, [sp, #0]
    8014:	f003 0301 	and.w	r3, r3, #1
    8018:	2b00      	cmp	r3, #0
    801a:	d100      	bne.n	801e <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    801c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    801e:	490a      	ldr	r1, [pc, #40]	; (8048 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    8020:	9b01      	ldr	r3, [sp, #4]
    8022:	9a00      	ldr	r2, [sp, #0]
    8024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    8028:	4a06      	ldr	r2, [pc, #24]	; (8044 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    802a:	9b01      	ldr	r3, [sp, #4]
    802c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8030:	1c5a      	adds	r2, r3, #1
    8032:	4904      	ldr	r1, [pc, #16]	; (8044 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    8034:	9b01      	ldr	r3, [sp, #4]
    8036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    803a:	bf00      	nop
    803c:	b003      	add	sp, #12
    803e:	f85d fb04 	ldr.w	pc, [sp], #4
    8042:	bf00      	nop
    8044:	1fff8ff0 	.word	0x1fff8ff0
    8048:	1fff8fec 	.word	0x1fff8fec

0000804c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    804c:	b500      	push	{lr}
    804e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8050:	f7f8 fdb6 	bl	bc0 <Sys_GetCoreID>
    8054:	4603      	mov	r3, r0
    8056:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    8058:	4a0d      	ldr	r2, [pc, #52]	; (8090 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    805a:	9b01      	ldr	r3, [sp, #4]
    805c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8060:	1e5a      	subs	r2, r3, #1
    8062:	490b      	ldr	r1, [pc, #44]	; (8090 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    8064:	9b01      	ldr	r3, [sp, #4]
    8066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    806a:	4a0a      	ldr	r2, [pc, #40]	; (8094 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    806c:	9b01      	ldr	r3, [sp, #4]
    806e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8072:	f003 0301 	and.w	r3, r3, #1
    8076:	2b00      	cmp	r3, #0
    8078:	d106      	bne.n	8088 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    807a:	4a05      	ldr	r2, [pc, #20]	; (8090 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    807c:	9b01      	ldr	r3, [sp, #4]
    807e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8082:	2b00      	cmp	r3, #0
    8084:	d100      	bne.n	8088 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8086:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8088:	bf00      	nop
    808a:	b003      	add	sp, #12
    808c:	f85d fb04 	ldr.w	pc, [sp], #4
    8090:	1fff8ff0 	.word	0x1fff8ff0
    8094:	1fff8fec 	.word	0x1fff8fec

00008098 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    8098:	b500      	push	{lr}
    809a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    809c:	f7f8 fd90 	bl	bc0 <Sys_GetCoreID>
    80a0:	4603      	mov	r3, r0
    80a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    80a4:	4a10      	ldr	r2, [pc, #64]	; (80e8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    80a6:	9b01      	ldr	r3, [sp, #4]
    80a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80ac:	2b00      	cmp	r3, #0
    80ae:	d10d      	bne.n	80cc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    80b0:	f7f8 fc9c 	bl	9ec <Dio_schm_read_msr>
    80b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    80b6:	9b00      	ldr	r3, [sp, #0]
    80b8:	f003 0301 	and.w	r3, r3, #1
    80bc:	2b00      	cmp	r3, #0
    80be:	d100      	bne.n	80c2 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    80c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    80c2:	490a      	ldr	r1, [pc, #40]	; (80ec <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    80c4:	9b01      	ldr	r3, [sp, #4]
    80c6:	9a00      	ldr	r2, [sp, #0]
    80c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    80cc:	4a06      	ldr	r2, [pc, #24]	; (80e8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    80ce:	9b01      	ldr	r3, [sp, #4]
    80d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80d4:	1c5a      	adds	r2, r3, #1
    80d6:	4904      	ldr	r1, [pc, #16]	; (80e8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    80d8:	9b01      	ldr	r3, [sp, #4]
    80da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    80de:	bf00      	nop
    80e0:	b003      	add	sp, #12
    80e2:	f85d fb04 	ldr.w	pc, [sp], #4
    80e6:	bf00      	nop
    80e8:	1fff8ff8 	.word	0x1fff8ff8
    80ec:	1fff8ff4 	.word	0x1fff8ff4

000080f0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    80f0:	b500      	push	{lr}
    80f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    80f4:	f7f8 fd64 	bl	bc0 <Sys_GetCoreID>
    80f8:	4603      	mov	r3, r0
    80fa:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    80fc:	4a0d      	ldr	r2, [pc, #52]	; (8134 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    80fe:	9b01      	ldr	r3, [sp, #4]
    8100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8104:	1e5a      	subs	r2, r3, #1
    8106:	490b      	ldr	r1, [pc, #44]	; (8134 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    8108:	9b01      	ldr	r3, [sp, #4]
    810a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    810e:	4a0a      	ldr	r2, [pc, #40]	; (8138 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    8110:	9b01      	ldr	r3, [sp, #4]
    8112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8116:	f003 0301 	and.w	r3, r3, #1
    811a:	2b00      	cmp	r3, #0
    811c:	d106      	bne.n	812c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    811e:	4a05      	ldr	r2, [pc, #20]	; (8134 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    8120:	9b01      	ldr	r3, [sp, #4]
    8122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8126:	2b00      	cmp	r3, #0
    8128:	d100      	bne.n	812c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    812a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    812c:	bf00      	nop
    812e:	b003      	add	sp, #12
    8130:	f85d fb04 	ldr.w	pc, [sp], #4
    8134:	1fff8ff8 	.word	0x1fff8ff8
    8138:	1fff8ff4 	.word	0x1fff8ff4

0000813c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00(void)
{
    813c:	b500      	push	{lr}
    813e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8140:	f7f8 fd3e 	bl	bc0 <Sys_GetCoreID>
    8144:	4603      	mov	r3, r0
    8146:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId])
    8148:	4a10      	ldr	r2, [pc, #64]	; (818c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x50>)
    814a:	9b01      	ldr	r3, [sp, #4]
    814c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8150:	2b00      	cmp	r3, #0
    8152:	d10d      	bne.n	8170 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8154:	f7f8 fc53 	bl	9fe <Gpt_schm_read_msr>
    8158:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    815a:	9b00      	ldr	r3, [sp, #0]
    815c:	f003 0301 	and.w	r3, r3, #1
    8160:	2b00      	cmp	r3, #0
    8162:	d100      	bne.n	8166 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8164:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    8166:	490a      	ldr	r1, [pc, #40]	; (8190 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x54>)
    8168:	9b01      	ldr	r3, [sp, #4]
    816a:	9a00      	ldr	r2, [sp, #0]
    816c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId]++;
    8170:	4a06      	ldr	r2, [pc, #24]	; (818c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x50>)
    8172:	9b01      	ldr	r3, [sp, #4]
    8174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8178:	1c5a      	adds	r2, r3, #1
    817a:	4904      	ldr	r1, [pc, #16]	; (818c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x50>)
    817c:	9b01      	ldr	r3, [sp, #4]
    817e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8182:	bf00      	nop
    8184:	b003      	add	sp, #12
    8186:	f85d fb04 	ldr.w	pc, [sp], #4
    818a:	bf00      	nop
    818c:	1fff9000 	.word	0x1fff9000
    8190:	1fff8ffc 	.word	0x1fff8ffc

00008194 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00(void)
{
    8194:	b500      	push	{lr}
    8196:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8198:	f7f8 fd12 	bl	bc0 <Sys_GetCoreID>
    819c:	4603      	mov	r3, r0
    819e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId]--;
    81a0:	4a0d      	ldr	r2, [pc, #52]	; (81d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x44>)
    81a2:	9b01      	ldr	r3, [sp, #4]
    81a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81a8:	1e5a      	subs	r2, r3, #1
    81aa:	490b      	ldr	r1, [pc, #44]	; (81d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x44>)
    81ac:	9b01      	ldr	r3, [sp, #4]
    81ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    81b2:	4a0a      	ldr	r2, [pc, #40]	; (81dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x48>)
    81b4:	9b01      	ldr	r3, [sp, #4]
    81b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81ba:	f003 0301 	and.w	r3, r3, #1
    81be:	2b00      	cmp	r3, #0
    81c0:	d106      	bne.n	81d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x3c>
    81c2:	4a05      	ldr	r2, [pc, #20]	; (81d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x44>)
    81c4:	9b01      	ldr	r3, [sp, #4]
    81c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81ca:	2b00      	cmp	r3, #0
    81cc:	d100      	bne.n	81d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    81ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    81d0:	bf00      	nop
    81d2:	b003      	add	sp, #12
    81d4:	f85d fb04 	ldr.w	pc, [sp], #4
    81d8:	1fff9000 	.word	0x1fff9000
    81dc:	1fff8ffc 	.word	0x1fff8ffc

000081e0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01(void)
{
    81e0:	b500      	push	{lr}
    81e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    81e4:	f7f8 fcec 	bl	bc0 <Sys_GetCoreID>
    81e8:	4603      	mov	r3, r0
    81ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId])
    81ec:	4a10      	ldr	r2, [pc, #64]	; (8230 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x50>)
    81ee:	9b01      	ldr	r3, [sp, #4]
    81f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81f4:	2b00      	cmp	r3, #0
    81f6:	d10d      	bne.n	8214 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    81f8:	f7f8 fc01 	bl	9fe <Gpt_schm_read_msr>
    81fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    81fe:	9b00      	ldr	r3, [sp, #0]
    8200:	f003 0301 	and.w	r3, r3, #1
    8204:	2b00      	cmp	r3, #0
    8206:	d100      	bne.n	820a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8208:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    820a:	490a      	ldr	r1, [pc, #40]	; (8234 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x54>)
    820c:	9b01      	ldr	r3, [sp, #4]
    820e:	9a00      	ldr	r2, [sp, #0]
    8210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId]++;
    8214:	4a06      	ldr	r2, [pc, #24]	; (8230 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x50>)
    8216:	9b01      	ldr	r3, [sp, #4]
    8218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    821c:	1c5a      	adds	r2, r3, #1
    821e:	4904      	ldr	r1, [pc, #16]	; (8230 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x50>)
    8220:	9b01      	ldr	r3, [sp, #4]
    8222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8226:	bf00      	nop
    8228:	b003      	add	sp, #12
    822a:	f85d fb04 	ldr.w	pc, [sp], #4
    822e:	bf00      	nop
    8230:	1fff9008 	.word	0x1fff9008
    8234:	1fff9004 	.word	0x1fff9004

00008238 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01(void)
{
    8238:	b500      	push	{lr}
    823a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    823c:	f7f8 fcc0 	bl	bc0 <Sys_GetCoreID>
    8240:	4603      	mov	r3, r0
    8242:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId]--;
    8244:	4a0d      	ldr	r2, [pc, #52]	; (827c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x44>)
    8246:	9b01      	ldr	r3, [sp, #4]
    8248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    824c:	1e5a      	subs	r2, r3, #1
    824e:	490b      	ldr	r1, [pc, #44]	; (827c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x44>)
    8250:	9b01      	ldr	r3, [sp, #4]
    8252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    8256:	4a0a      	ldr	r2, [pc, #40]	; (8280 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x48>)
    8258:	9b01      	ldr	r3, [sp, #4]
    825a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    825e:	f003 0301 	and.w	r3, r3, #1
    8262:	2b00      	cmp	r3, #0
    8264:	d106      	bne.n	8274 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x3c>
    8266:	4a05      	ldr	r2, [pc, #20]	; (827c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x44>)
    8268:	9b01      	ldr	r3, [sp, #4]
    826a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    826e:	2b00      	cmp	r3, #0
    8270:	d100      	bne.n	8274 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8272:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8274:	bf00      	nop
    8276:	b003      	add	sp, #12
    8278:	f85d fb04 	ldr.w	pc, [sp], #4
    827c:	1fff9008 	.word	0x1fff9008
    8280:	1fff9004 	.word	0x1fff9004

00008284 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02(void)
{
    8284:	b500      	push	{lr}
    8286:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8288:	f7f8 fc9a 	bl	bc0 <Sys_GetCoreID>
    828c:	4603      	mov	r3, r0
    828e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId])
    8290:	4a10      	ldr	r2, [pc, #64]	; (82d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x50>)
    8292:	9b01      	ldr	r3, [sp, #4]
    8294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8298:	2b00      	cmp	r3, #0
    829a:	d10d      	bne.n	82b8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    829c:	f7f8 fbaf 	bl	9fe <Gpt_schm_read_msr>
    82a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    82a2:	9b00      	ldr	r3, [sp, #0]
    82a4:	f003 0301 	and.w	r3, r3, #1
    82a8:	2b00      	cmp	r3, #0
    82aa:	d100      	bne.n	82ae <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    82ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    82ae:	490a      	ldr	r1, [pc, #40]	; (82d8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x54>)
    82b0:	9b01      	ldr	r3, [sp, #4]
    82b2:	9a00      	ldr	r2, [sp, #0]
    82b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId]++;
    82b8:	4a06      	ldr	r2, [pc, #24]	; (82d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x50>)
    82ba:	9b01      	ldr	r3, [sp, #4]
    82bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82c0:	1c5a      	adds	r2, r3, #1
    82c2:	4904      	ldr	r1, [pc, #16]	; (82d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x50>)
    82c4:	9b01      	ldr	r3, [sp, #4]
    82c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    82ca:	bf00      	nop
    82cc:	b003      	add	sp, #12
    82ce:	f85d fb04 	ldr.w	pc, [sp], #4
    82d2:	bf00      	nop
    82d4:	1fff9010 	.word	0x1fff9010
    82d8:	1fff900c 	.word	0x1fff900c

000082dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02(void)
{
    82dc:	b500      	push	{lr}
    82de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    82e0:	f7f8 fc6e 	bl	bc0 <Sys_GetCoreID>
    82e4:	4603      	mov	r3, r0
    82e6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId]--;
    82e8:	4a0d      	ldr	r2, [pc, #52]	; (8320 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x44>)
    82ea:	9b01      	ldr	r3, [sp, #4]
    82ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82f0:	1e5a      	subs	r2, r3, #1
    82f2:	490b      	ldr	r1, [pc, #44]	; (8320 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x44>)
    82f4:	9b01      	ldr	r3, [sp, #4]
    82f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    82fa:	4a0a      	ldr	r2, [pc, #40]	; (8324 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x48>)
    82fc:	9b01      	ldr	r3, [sp, #4]
    82fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8302:	f003 0301 	and.w	r3, r3, #1
    8306:	2b00      	cmp	r3, #0
    8308:	d106      	bne.n	8318 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x3c>
    830a:	4a05      	ldr	r2, [pc, #20]	; (8320 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x44>)
    830c:	9b01      	ldr	r3, [sp, #4]
    830e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8312:	2b00      	cmp	r3, #0
    8314:	d100      	bne.n	8318 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8316:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8318:	bf00      	nop
    831a:	b003      	add	sp, #12
    831c:	f85d fb04 	ldr.w	pc, [sp], #4
    8320:	1fff9010 	.word	0x1fff9010
    8324:	1fff900c 	.word	0x1fff900c

00008328 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03(void)
{
    8328:	b500      	push	{lr}
    832a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    832c:	f7f8 fc48 	bl	bc0 <Sys_GetCoreID>
    8330:	4603      	mov	r3, r0
    8332:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId])
    8334:	4a10      	ldr	r2, [pc, #64]	; (8378 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x50>)
    8336:	9b01      	ldr	r3, [sp, #4]
    8338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    833c:	2b00      	cmp	r3, #0
    833e:	d10d      	bne.n	835c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8340:	f7f8 fb5d 	bl	9fe <Gpt_schm_read_msr>
    8344:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8346:	9b00      	ldr	r3, [sp, #0]
    8348:	f003 0301 	and.w	r3, r3, #1
    834c:	2b00      	cmp	r3, #0
    834e:	d100      	bne.n	8352 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8350:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    8352:	490a      	ldr	r1, [pc, #40]	; (837c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x54>)
    8354:	9b01      	ldr	r3, [sp, #4]
    8356:	9a00      	ldr	r2, [sp, #0]
    8358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId]++;
    835c:	4a06      	ldr	r2, [pc, #24]	; (8378 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x50>)
    835e:	9b01      	ldr	r3, [sp, #4]
    8360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8364:	1c5a      	adds	r2, r3, #1
    8366:	4904      	ldr	r1, [pc, #16]	; (8378 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x50>)
    8368:	9b01      	ldr	r3, [sp, #4]
    836a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    836e:	bf00      	nop
    8370:	b003      	add	sp, #12
    8372:	f85d fb04 	ldr.w	pc, [sp], #4
    8376:	bf00      	nop
    8378:	1fff9018 	.word	0x1fff9018
    837c:	1fff9014 	.word	0x1fff9014

00008380 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03(void)
{
    8380:	b500      	push	{lr}
    8382:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8384:	f7f8 fc1c 	bl	bc0 <Sys_GetCoreID>
    8388:	4603      	mov	r3, r0
    838a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId]--;
    838c:	4a0d      	ldr	r2, [pc, #52]	; (83c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x44>)
    838e:	9b01      	ldr	r3, [sp, #4]
    8390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8394:	1e5a      	subs	r2, r3, #1
    8396:	490b      	ldr	r1, [pc, #44]	; (83c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x44>)
    8398:	9b01      	ldr	r3, [sp, #4]
    839a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    839e:	4a0a      	ldr	r2, [pc, #40]	; (83c8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x48>)
    83a0:	9b01      	ldr	r3, [sp, #4]
    83a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83a6:	f003 0301 	and.w	r3, r3, #1
    83aa:	2b00      	cmp	r3, #0
    83ac:	d106      	bne.n	83bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x3c>
    83ae:	4a05      	ldr	r2, [pc, #20]	; (83c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x44>)
    83b0:	9b01      	ldr	r3, [sp, #4]
    83b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83b6:	2b00      	cmp	r3, #0
    83b8:	d100      	bne.n	83bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    83ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    83bc:	bf00      	nop
    83be:	b003      	add	sp, #12
    83c0:	f85d fb04 	ldr.w	pc, [sp], #4
    83c4:	1fff9018 	.word	0x1fff9018
    83c8:	1fff9014 	.word	0x1fff9014

000083cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04(void)
{
    83cc:	b500      	push	{lr}
    83ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    83d0:	f7f8 fbf6 	bl	bc0 <Sys_GetCoreID>
    83d4:	4603      	mov	r3, r0
    83d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId])
    83d8:	4a10      	ldr	r2, [pc, #64]	; (841c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x50>)
    83da:	9b01      	ldr	r3, [sp, #4]
    83dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83e0:	2b00      	cmp	r3, #0
    83e2:	d10d      	bne.n	8400 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    83e4:	f7f8 fb0b 	bl	9fe <Gpt_schm_read_msr>
    83e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    83ea:	9b00      	ldr	r3, [sp, #0]
    83ec:	f003 0301 	and.w	r3, r3, #1
    83f0:	2b00      	cmp	r3, #0
    83f2:	d100      	bne.n	83f6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    83f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    83f6:	490a      	ldr	r1, [pc, #40]	; (8420 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x54>)
    83f8:	9b01      	ldr	r3, [sp, #4]
    83fa:	9a00      	ldr	r2, [sp, #0]
    83fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId]++;
    8400:	4a06      	ldr	r2, [pc, #24]	; (841c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x50>)
    8402:	9b01      	ldr	r3, [sp, #4]
    8404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8408:	1c5a      	adds	r2, r3, #1
    840a:	4904      	ldr	r1, [pc, #16]	; (841c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x50>)
    840c:	9b01      	ldr	r3, [sp, #4]
    840e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8412:	bf00      	nop
    8414:	b003      	add	sp, #12
    8416:	f85d fb04 	ldr.w	pc, [sp], #4
    841a:	bf00      	nop
    841c:	1fff9020 	.word	0x1fff9020
    8420:	1fff901c 	.word	0x1fff901c

00008424 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04(void)
{
    8424:	b500      	push	{lr}
    8426:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8428:	f7f8 fbca 	bl	bc0 <Sys_GetCoreID>
    842c:	4603      	mov	r3, r0
    842e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId]--;
    8430:	4a0d      	ldr	r2, [pc, #52]	; (8468 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x44>)
    8432:	9b01      	ldr	r3, [sp, #4]
    8434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8438:	1e5a      	subs	r2, r3, #1
    843a:	490b      	ldr	r1, [pc, #44]	; (8468 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x44>)
    843c:	9b01      	ldr	r3, [sp, #4]
    843e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    8442:	4a0a      	ldr	r2, [pc, #40]	; (846c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x48>)
    8444:	9b01      	ldr	r3, [sp, #4]
    8446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    844a:	f003 0301 	and.w	r3, r3, #1
    844e:	2b00      	cmp	r3, #0
    8450:	d106      	bne.n	8460 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x3c>
    8452:	4a05      	ldr	r2, [pc, #20]	; (8468 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x44>)
    8454:	9b01      	ldr	r3, [sp, #4]
    8456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    845a:	2b00      	cmp	r3, #0
    845c:	d100      	bne.n	8460 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    845e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8460:	bf00      	nop
    8462:	b003      	add	sp, #12
    8464:	f85d fb04 	ldr.w	pc, [sp], #4
    8468:	1fff9020 	.word	0x1fff9020
    846c:	1fff901c 	.word	0x1fff901c

00008470 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05(void)
{
    8470:	b500      	push	{lr}
    8472:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8474:	f7f8 fba4 	bl	bc0 <Sys_GetCoreID>
    8478:	4603      	mov	r3, r0
    847a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId])
    847c:	4a10      	ldr	r2, [pc, #64]	; (84c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x50>)
    847e:	9b01      	ldr	r3, [sp, #4]
    8480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8484:	2b00      	cmp	r3, #0
    8486:	d10d      	bne.n	84a4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8488:	f7f8 fab9 	bl	9fe <Gpt_schm_read_msr>
    848c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    848e:	9b00      	ldr	r3, [sp, #0]
    8490:	f003 0301 	and.w	r3, r3, #1
    8494:	2b00      	cmp	r3, #0
    8496:	d100      	bne.n	849a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8498:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    849a:	490a      	ldr	r1, [pc, #40]	; (84c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x54>)
    849c:	9b01      	ldr	r3, [sp, #4]
    849e:	9a00      	ldr	r2, [sp, #0]
    84a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId]++;
    84a4:	4a06      	ldr	r2, [pc, #24]	; (84c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x50>)
    84a6:	9b01      	ldr	r3, [sp, #4]
    84a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84ac:	1c5a      	adds	r2, r3, #1
    84ae:	4904      	ldr	r1, [pc, #16]	; (84c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x50>)
    84b0:	9b01      	ldr	r3, [sp, #4]
    84b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    84b6:	bf00      	nop
    84b8:	b003      	add	sp, #12
    84ba:	f85d fb04 	ldr.w	pc, [sp], #4
    84be:	bf00      	nop
    84c0:	1fff9028 	.word	0x1fff9028
    84c4:	1fff9024 	.word	0x1fff9024

000084c8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05(void)
{
    84c8:	b500      	push	{lr}
    84ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    84cc:	f7f8 fb78 	bl	bc0 <Sys_GetCoreID>
    84d0:	4603      	mov	r3, r0
    84d2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId]--;
    84d4:	4a0d      	ldr	r2, [pc, #52]	; (850c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x44>)
    84d6:	9b01      	ldr	r3, [sp, #4]
    84d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84dc:	1e5a      	subs	r2, r3, #1
    84de:	490b      	ldr	r1, [pc, #44]	; (850c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x44>)
    84e0:	9b01      	ldr	r3, [sp, #4]
    84e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    84e6:	4a0a      	ldr	r2, [pc, #40]	; (8510 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x48>)
    84e8:	9b01      	ldr	r3, [sp, #4]
    84ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84ee:	f003 0301 	and.w	r3, r3, #1
    84f2:	2b00      	cmp	r3, #0
    84f4:	d106      	bne.n	8504 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x3c>
    84f6:	4a05      	ldr	r2, [pc, #20]	; (850c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x44>)
    84f8:	9b01      	ldr	r3, [sp, #4]
    84fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84fe:	2b00      	cmp	r3, #0
    8500:	d100      	bne.n	8504 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8502:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8504:	bf00      	nop
    8506:	b003      	add	sp, #12
    8508:	f85d fb04 	ldr.w	pc, [sp], #4
    850c:	1fff9028 	.word	0x1fff9028
    8510:	1fff9024 	.word	0x1fff9024

00008514 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06(void)
{
    8514:	b500      	push	{lr}
    8516:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8518:	f7f8 fb52 	bl	bc0 <Sys_GetCoreID>
    851c:	4603      	mov	r3, r0
    851e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId])
    8520:	4a10      	ldr	r2, [pc, #64]	; (8564 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x50>)
    8522:	9b01      	ldr	r3, [sp, #4]
    8524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8528:	2b00      	cmp	r3, #0
    852a:	d10d      	bne.n	8548 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    852c:	f7f8 fa67 	bl	9fe <Gpt_schm_read_msr>
    8530:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8532:	9b00      	ldr	r3, [sp, #0]
    8534:	f003 0301 	and.w	r3, r3, #1
    8538:	2b00      	cmp	r3, #0
    853a:	d100      	bne.n	853e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    853c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    853e:	490a      	ldr	r1, [pc, #40]	; (8568 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x54>)
    8540:	9b01      	ldr	r3, [sp, #4]
    8542:	9a00      	ldr	r2, [sp, #0]
    8544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId]++;
    8548:	4a06      	ldr	r2, [pc, #24]	; (8564 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x50>)
    854a:	9b01      	ldr	r3, [sp, #4]
    854c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8550:	1c5a      	adds	r2, r3, #1
    8552:	4904      	ldr	r1, [pc, #16]	; (8564 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x50>)
    8554:	9b01      	ldr	r3, [sp, #4]
    8556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    855a:	bf00      	nop
    855c:	b003      	add	sp, #12
    855e:	f85d fb04 	ldr.w	pc, [sp], #4
    8562:	bf00      	nop
    8564:	1fff9030 	.word	0x1fff9030
    8568:	1fff902c 	.word	0x1fff902c

0000856c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06(void)
{
    856c:	b500      	push	{lr}
    856e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8570:	f7f8 fb26 	bl	bc0 <Sys_GetCoreID>
    8574:	4603      	mov	r3, r0
    8576:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId]--;
    8578:	4a0d      	ldr	r2, [pc, #52]	; (85b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x44>)
    857a:	9b01      	ldr	r3, [sp, #4]
    857c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8580:	1e5a      	subs	r2, r3, #1
    8582:	490b      	ldr	r1, [pc, #44]	; (85b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x44>)
    8584:	9b01      	ldr	r3, [sp, #4]
    8586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    858a:	4a0a      	ldr	r2, [pc, #40]	; (85b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x48>)
    858c:	9b01      	ldr	r3, [sp, #4]
    858e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8592:	f003 0301 	and.w	r3, r3, #1
    8596:	2b00      	cmp	r3, #0
    8598:	d106      	bne.n	85a8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x3c>
    859a:	4a05      	ldr	r2, [pc, #20]	; (85b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x44>)
    859c:	9b01      	ldr	r3, [sp, #4]
    859e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85a2:	2b00      	cmp	r3, #0
    85a4:	d100      	bne.n	85a8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    85a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    85a8:	bf00      	nop
    85aa:	b003      	add	sp, #12
    85ac:	f85d fb04 	ldr.w	pc, [sp], #4
    85b0:	1fff9030 	.word	0x1fff9030
    85b4:	1fff902c 	.word	0x1fff902c

000085b8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07(void)
{
    85b8:	b500      	push	{lr}
    85ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    85bc:	f7f8 fb00 	bl	bc0 <Sys_GetCoreID>
    85c0:	4603      	mov	r3, r0
    85c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId])
    85c4:	4a10      	ldr	r2, [pc, #64]	; (8608 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x50>)
    85c6:	9b01      	ldr	r3, [sp, #4]
    85c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85cc:	2b00      	cmp	r3, #0
    85ce:	d10d      	bne.n	85ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    85d0:	f7f8 fa15 	bl	9fe <Gpt_schm_read_msr>
    85d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    85d6:	9b00      	ldr	r3, [sp, #0]
    85d8:	f003 0301 	and.w	r3, r3, #1
    85dc:	2b00      	cmp	r3, #0
    85de:	d100      	bne.n	85e2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    85e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    85e2:	490a      	ldr	r1, [pc, #40]	; (860c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x54>)
    85e4:	9b01      	ldr	r3, [sp, #4]
    85e6:	9a00      	ldr	r2, [sp, #0]
    85e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId]++;
    85ec:	4a06      	ldr	r2, [pc, #24]	; (8608 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x50>)
    85ee:	9b01      	ldr	r3, [sp, #4]
    85f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85f4:	1c5a      	adds	r2, r3, #1
    85f6:	4904      	ldr	r1, [pc, #16]	; (8608 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x50>)
    85f8:	9b01      	ldr	r3, [sp, #4]
    85fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    85fe:	bf00      	nop
    8600:	b003      	add	sp, #12
    8602:	f85d fb04 	ldr.w	pc, [sp], #4
    8606:	bf00      	nop
    8608:	1fff9038 	.word	0x1fff9038
    860c:	1fff9034 	.word	0x1fff9034

00008610 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07(void)
{
    8610:	b500      	push	{lr}
    8612:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8614:	f7f8 fad4 	bl	bc0 <Sys_GetCoreID>
    8618:	4603      	mov	r3, r0
    861a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId]--;
    861c:	4a0d      	ldr	r2, [pc, #52]	; (8654 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x44>)
    861e:	9b01      	ldr	r3, [sp, #4]
    8620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8624:	1e5a      	subs	r2, r3, #1
    8626:	490b      	ldr	r1, [pc, #44]	; (8654 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x44>)
    8628:	9b01      	ldr	r3, [sp, #4]
    862a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    862e:	4a0a      	ldr	r2, [pc, #40]	; (8658 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x48>)
    8630:	9b01      	ldr	r3, [sp, #4]
    8632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8636:	f003 0301 	and.w	r3, r3, #1
    863a:	2b00      	cmp	r3, #0
    863c:	d106      	bne.n	864c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x3c>
    863e:	4a05      	ldr	r2, [pc, #20]	; (8654 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x44>)
    8640:	9b01      	ldr	r3, [sp, #4]
    8642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8646:	2b00      	cmp	r3, #0
    8648:	d100      	bne.n	864c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    864a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    864c:	bf00      	nop
    864e:	b003      	add	sp, #12
    8650:	f85d fb04 	ldr.w	pc, [sp], #4
    8654:	1fff9038 	.word	0x1fff9038
    8658:	1fff9034 	.word	0x1fff9034

0000865c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10(void)
{
    865c:	b500      	push	{lr}
    865e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8660:	f7f8 faae 	bl	bc0 <Sys_GetCoreID>
    8664:	4603      	mov	r3, r0
    8666:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId])
    8668:	4a10      	ldr	r2, [pc, #64]	; (86ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x50>)
    866a:	9b01      	ldr	r3, [sp, #4]
    866c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8670:	2b00      	cmp	r3, #0
    8672:	d10d      	bne.n	8690 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8674:	f7f8 f9c3 	bl	9fe <Gpt_schm_read_msr>
    8678:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    867a:	9b00      	ldr	r3, [sp, #0]
    867c:	f003 0301 	and.w	r3, r3, #1
    8680:	2b00      	cmp	r3, #0
    8682:	d100      	bne.n	8686 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8684:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    8686:	490a      	ldr	r1, [pc, #40]	; (86b0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x54>)
    8688:	9b01      	ldr	r3, [sp, #4]
    868a:	9a00      	ldr	r2, [sp, #0]
    868c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId]++;
    8690:	4a06      	ldr	r2, [pc, #24]	; (86ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x50>)
    8692:	9b01      	ldr	r3, [sp, #4]
    8694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8698:	1c5a      	adds	r2, r3, #1
    869a:	4904      	ldr	r1, [pc, #16]	; (86ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x50>)
    869c:	9b01      	ldr	r3, [sp, #4]
    869e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    86a2:	bf00      	nop
    86a4:	b003      	add	sp, #12
    86a6:	f85d fb04 	ldr.w	pc, [sp], #4
    86aa:	bf00      	nop
    86ac:	1fff9040 	.word	0x1fff9040
    86b0:	1fff903c 	.word	0x1fff903c

000086b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10(void)
{
    86b4:	b500      	push	{lr}
    86b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    86b8:	f7f8 fa82 	bl	bc0 <Sys_GetCoreID>
    86bc:	4603      	mov	r3, r0
    86be:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId]--;
    86c0:	4a0d      	ldr	r2, [pc, #52]	; (86f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x44>)
    86c2:	9b01      	ldr	r3, [sp, #4]
    86c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86c8:	1e5a      	subs	r2, r3, #1
    86ca:	490b      	ldr	r1, [pc, #44]	; (86f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x44>)
    86cc:	9b01      	ldr	r3, [sp, #4]
    86ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    86d2:	4a0a      	ldr	r2, [pc, #40]	; (86fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x48>)
    86d4:	9b01      	ldr	r3, [sp, #4]
    86d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86da:	f003 0301 	and.w	r3, r3, #1
    86de:	2b00      	cmp	r3, #0
    86e0:	d106      	bne.n	86f0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x3c>
    86e2:	4a05      	ldr	r2, [pc, #20]	; (86f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x44>)
    86e4:	9b01      	ldr	r3, [sp, #4]
    86e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86ea:	2b00      	cmp	r3, #0
    86ec:	d100      	bne.n	86f0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    86ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    86f0:	bf00      	nop
    86f2:	b003      	add	sp, #12
    86f4:	f85d fb04 	ldr.w	pc, [sp], #4
    86f8:	1fff9040 	.word	0x1fff9040
    86fc:	1fff903c 	.word	0x1fff903c

00008700 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11(void)
{
    8700:	b500      	push	{lr}
    8702:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8704:	f7f8 fa5c 	bl	bc0 <Sys_GetCoreID>
    8708:	4603      	mov	r3, r0
    870a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId])
    870c:	4a10      	ldr	r2, [pc, #64]	; (8750 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x50>)
    870e:	9b01      	ldr	r3, [sp, #4]
    8710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8714:	2b00      	cmp	r3, #0
    8716:	d10d      	bne.n	8734 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8718:	f7f8 f971 	bl	9fe <Gpt_schm_read_msr>
    871c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    871e:	9b00      	ldr	r3, [sp, #0]
    8720:	f003 0301 	and.w	r3, r3, #1
    8724:	2b00      	cmp	r3, #0
    8726:	d100      	bne.n	872a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8728:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    872a:	490a      	ldr	r1, [pc, #40]	; (8754 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x54>)
    872c:	9b01      	ldr	r3, [sp, #4]
    872e:	9a00      	ldr	r2, [sp, #0]
    8730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId]++;
    8734:	4a06      	ldr	r2, [pc, #24]	; (8750 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x50>)
    8736:	9b01      	ldr	r3, [sp, #4]
    8738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    873c:	1c5a      	adds	r2, r3, #1
    873e:	4904      	ldr	r1, [pc, #16]	; (8750 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x50>)
    8740:	9b01      	ldr	r3, [sp, #4]
    8742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8746:	bf00      	nop
    8748:	b003      	add	sp, #12
    874a:	f85d fb04 	ldr.w	pc, [sp], #4
    874e:	bf00      	nop
    8750:	1fff9048 	.word	0x1fff9048
    8754:	1fff9044 	.word	0x1fff9044

00008758 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11(void)
{
    8758:	b500      	push	{lr}
    875a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    875c:	f7f8 fa30 	bl	bc0 <Sys_GetCoreID>
    8760:	4603      	mov	r3, r0
    8762:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId]--;
    8764:	4a0d      	ldr	r2, [pc, #52]	; (879c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x44>)
    8766:	9b01      	ldr	r3, [sp, #4]
    8768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    876c:	1e5a      	subs	r2, r3, #1
    876e:	490b      	ldr	r1, [pc, #44]	; (879c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x44>)
    8770:	9b01      	ldr	r3, [sp, #4]
    8772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    8776:	4a0a      	ldr	r2, [pc, #40]	; (87a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x48>)
    8778:	9b01      	ldr	r3, [sp, #4]
    877a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    877e:	f003 0301 	and.w	r3, r3, #1
    8782:	2b00      	cmp	r3, #0
    8784:	d106      	bne.n	8794 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x3c>
    8786:	4a05      	ldr	r2, [pc, #20]	; (879c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x44>)
    8788:	9b01      	ldr	r3, [sp, #4]
    878a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    878e:	2b00      	cmp	r3, #0
    8790:	d100      	bne.n	8794 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8792:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8794:	bf00      	nop
    8796:	b003      	add	sp, #12
    8798:	f85d fb04 	ldr.w	pc, [sp], #4
    879c:	1fff9048 	.word	0x1fff9048
    87a0:	1fff9044 	.word	0x1fff9044

000087a4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17(void)
{
    87a4:	b500      	push	{lr}
    87a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    87a8:	f7f8 fa0a 	bl	bc0 <Sys_GetCoreID>
    87ac:	4603      	mov	r3, r0
    87ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId])
    87b0:	4a10      	ldr	r2, [pc, #64]	; (87f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x50>)
    87b2:	9b01      	ldr	r3, [sp, #4]
    87b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87b8:	2b00      	cmp	r3, #0
    87ba:	d10d      	bne.n	87d8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    87bc:	f7f8 f91f 	bl	9fe <Gpt_schm_read_msr>
    87c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    87c2:	9b00      	ldr	r3, [sp, #0]
    87c4:	f003 0301 	and.w	r3, r3, #1
    87c8:	2b00      	cmp	r3, #0
    87ca:	d100      	bne.n	87ce <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    87cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    87ce:	490a      	ldr	r1, [pc, #40]	; (87f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x54>)
    87d0:	9b01      	ldr	r3, [sp, #4]
    87d2:	9a00      	ldr	r2, [sp, #0]
    87d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId]++;
    87d8:	4a06      	ldr	r2, [pc, #24]	; (87f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x50>)
    87da:	9b01      	ldr	r3, [sp, #4]
    87dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87e0:	1c5a      	adds	r2, r3, #1
    87e2:	4904      	ldr	r1, [pc, #16]	; (87f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x50>)
    87e4:	9b01      	ldr	r3, [sp, #4]
    87e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    87ea:	bf00      	nop
    87ec:	b003      	add	sp, #12
    87ee:	f85d fb04 	ldr.w	pc, [sp], #4
    87f2:	bf00      	nop
    87f4:	1fff9050 	.word	0x1fff9050
    87f8:	1fff904c 	.word	0x1fff904c

000087fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17(void)
{
    87fc:	b500      	push	{lr}
    87fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8800:	f7f8 f9de 	bl	bc0 <Sys_GetCoreID>
    8804:	4603      	mov	r3, r0
    8806:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId]--;
    8808:	4a0d      	ldr	r2, [pc, #52]	; (8840 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x44>)
    880a:	9b01      	ldr	r3, [sp, #4]
    880c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8810:	1e5a      	subs	r2, r3, #1
    8812:	490b      	ldr	r1, [pc, #44]	; (8840 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x44>)
    8814:	9b01      	ldr	r3, [sp, #4]
    8816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    881a:	4a0a      	ldr	r2, [pc, #40]	; (8844 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x48>)
    881c:	9b01      	ldr	r3, [sp, #4]
    881e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8822:	f003 0301 	and.w	r3, r3, #1
    8826:	2b00      	cmp	r3, #0
    8828:	d106      	bne.n	8838 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x3c>
    882a:	4a05      	ldr	r2, [pc, #20]	; (8840 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x44>)
    882c:	9b01      	ldr	r3, [sp, #4]
    882e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8832:	2b00      	cmp	r3, #0
    8834:	d100      	bne.n	8838 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8836:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8838:	bf00      	nop
    883a:	b003      	add	sp, #12
    883c:	f85d fb04 	ldr.w	pc, [sp], #4
    8840:	1fff9050 	.word	0x1fff9050
    8844:	1fff904c 	.word	0x1fff904c

00008848 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21(void)
{
    8848:	b500      	push	{lr}
    884a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    884c:	f7f8 f9b8 	bl	bc0 <Sys_GetCoreID>
    8850:	4603      	mov	r3, r0
    8852:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId])
    8854:	4a10      	ldr	r2, [pc, #64]	; (8898 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x50>)
    8856:	9b01      	ldr	r3, [sp, #4]
    8858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    885c:	2b00      	cmp	r3, #0
    885e:	d10d      	bne.n	887c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8860:	f7f8 f8cd 	bl	9fe <Gpt_schm_read_msr>
    8864:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8866:	9b00      	ldr	r3, [sp, #0]
    8868:	f003 0301 	and.w	r3, r3, #1
    886c:	2b00      	cmp	r3, #0
    886e:	d100      	bne.n	8872 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8870:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    8872:	490a      	ldr	r1, [pc, #40]	; (889c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x54>)
    8874:	9b01      	ldr	r3, [sp, #4]
    8876:	9a00      	ldr	r2, [sp, #0]
    8878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId]++;
    887c:	4a06      	ldr	r2, [pc, #24]	; (8898 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x50>)
    887e:	9b01      	ldr	r3, [sp, #4]
    8880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8884:	1c5a      	adds	r2, r3, #1
    8886:	4904      	ldr	r1, [pc, #16]	; (8898 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x50>)
    8888:	9b01      	ldr	r3, [sp, #4]
    888a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    888e:	bf00      	nop
    8890:	b003      	add	sp, #12
    8892:	f85d fb04 	ldr.w	pc, [sp], #4
    8896:	bf00      	nop
    8898:	1fff9058 	.word	0x1fff9058
    889c:	1fff9054 	.word	0x1fff9054

000088a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21(void)
{
    88a0:	b500      	push	{lr}
    88a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    88a4:	f7f8 f98c 	bl	bc0 <Sys_GetCoreID>
    88a8:	4603      	mov	r3, r0
    88aa:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId]--;
    88ac:	4a0d      	ldr	r2, [pc, #52]	; (88e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x44>)
    88ae:	9b01      	ldr	r3, [sp, #4]
    88b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88b4:	1e5a      	subs	r2, r3, #1
    88b6:	490b      	ldr	r1, [pc, #44]	; (88e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x44>)
    88b8:	9b01      	ldr	r3, [sp, #4]
    88ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    88be:	4a0a      	ldr	r2, [pc, #40]	; (88e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x48>)
    88c0:	9b01      	ldr	r3, [sp, #4]
    88c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88c6:	f003 0301 	and.w	r3, r3, #1
    88ca:	2b00      	cmp	r3, #0
    88cc:	d106      	bne.n	88dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x3c>
    88ce:	4a05      	ldr	r2, [pc, #20]	; (88e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x44>)
    88d0:	9b01      	ldr	r3, [sp, #4]
    88d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88d6:	2b00      	cmp	r3, #0
    88d8:	d100      	bne.n	88dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    88da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    88dc:	bf00      	nop
    88de:	b003      	add	sp, #12
    88e0:	f85d fb04 	ldr.w	pc, [sp], #4
    88e4:	1fff9058 	.word	0x1fff9058
    88e8:	1fff9054 	.word	0x1fff9054

000088ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22(void)
{
    88ec:	b500      	push	{lr}
    88ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    88f0:	f7f8 f966 	bl	bc0 <Sys_GetCoreID>
    88f4:	4603      	mov	r3, r0
    88f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId])
    88f8:	4a10      	ldr	r2, [pc, #64]	; (893c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x50>)
    88fa:	9b01      	ldr	r3, [sp, #4]
    88fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8900:	2b00      	cmp	r3, #0
    8902:	d10d      	bne.n	8920 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8904:	f7f8 f87b 	bl	9fe <Gpt_schm_read_msr>
    8908:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    890a:	9b00      	ldr	r3, [sp, #0]
    890c:	f003 0301 	and.w	r3, r3, #1
    8910:	2b00      	cmp	r3, #0
    8912:	d100      	bne.n	8916 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8914:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    8916:	490a      	ldr	r1, [pc, #40]	; (8940 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x54>)
    8918:	9b01      	ldr	r3, [sp, #4]
    891a:	9a00      	ldr	r2, [sp, #0]
    891c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId]++;
    8920:	4a06      	ldr	r2, [pc, #24]	; (893c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x50>)
    8922:	9b01      	ldr	r3, [sp, #4]
    8924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8928:	1c5a      	adds	r2, r3, #1
    892a:	4904      	ldr	r1, [pc, #16]	; (893c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x50>)
    892c:	9b01      	ldr	r3, [sp, #4]
    892e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8932:	bf00      	nop
    8934:	b003      	add	sp, #12
    8936:	f85d fb04 	ldr.w	pc, [sp], #4
    893a:	bf00      	nop
    893c:	1fff9060 	.word	0x1fff9060
    8940:	1fff905c 	.word	0x1fff905c

00008944 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22(void)
{
    8944:	b500      	push	{lr}
    8946:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8948:	f7f8 f93a 	bl	bc0 <Sys_GetCoreID>
    894c:	4603      	mov	r3, r0
    894e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId]--;
    8950:	4a0d      	ldr	r2, [pc, #52]	; (8988 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x44>)
    8952:	9b01      	ldr	r3, [sp, #4]
    8954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8958:	1e5a      	subs	r2, r3, #1
    895a:	490b      	ldr	r1, [pc, #44]	; (8988 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x44>)
    895c:	9b01      	ldr	r3, [sp, #4]
    895e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    8962:	4a0a      	ldr	r2, [pc, #40]	; (898c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x48>)
    8964:	9b01      	ldr	r3, [sp, #4]
    8966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    896a:	f003 0301 	and.w	r3, r3, #1
    896e:	2b00      	cmp	r3, #0
    8970:	d106      	bne.n	8980 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x3c>
    8972:	4a05      	ldr	r2, [pc, #20]	; (8988 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x44>)
    8974:	9b01      	ldr	r3, [sp, #4]
    8976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    897a:	2b00      	cmp	r3, #0
    897c:	d100      	bne.n	8980 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    897e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8980:	bf00      	nop
    8982:	b003      	add	sp, #12
    8984:	f85d fb04 	ldr.w	pc, [sp], #4
    8988:	1fff9060 	.word	0x1fff9060
    898c:	1fff905c 	.word	0x1fff905c

00008990 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23(void)
{
    8990:	b500      	push	{lr}
    8992:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8994:	f7f8 f914 	bl	bc0 <Sys_GetCoreID>
    8998:	4603      	mov	r3, r0
    899a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId])
    899c:	4a10      	ldr	r2, [pc, #64]	; (89e0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x50>)
    899e:	9b01      	ldr	r3, [sp, #4]
    89a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89a4:	2b00      	cmp	r3, #0
    89a6:	d10d      	bne.n	89c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    89a8:	f7f8 f829 	bl	9fe <Gpt_schm_read_msr>
    89ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    89ae:	9b00      	ldr	r3, [sp, #0]
    89b0:	f003 0301 	and.w	r3, r3, #1
    89b4:	2b00      	cmp	r3, #0
    89b6:	d100      	bne.n	89ba <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    89b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    89ba:	490a      	ldr	r1, [pc, #40]	; (89e4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x54>)
    89bc:	9b01      	ldr	r3, [sp, #4]
    89be:	9a00      	ldr	r2, [sp, #0]
    89c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId]++;
    89c4:	4a06      	ldr	r2, [pc, #24]	; (89e0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x50>)
    89c6:	9b01      	ldr	r3, [sp, #4]
    89c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89cc:	1c5a      	adds	r2, r3, #1
    89ce:	4904      	ldr	r1, [pc, #16]	; (89e0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x50>)
    89d0:	9b01      	ldr	r3, [sp, #4]
    89d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    89d6:	bf00      	nop
    89d8:	b003      	add	sp, #12
    89da:	f85d fb04 	ldr.w	pc, [sp], #4
    89de:	bf00      	nop
    89e0:	1fff9068 	.word	0x1fff9068
    89e4:	1fff9064 	.word	0x1fff9064

000089e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23(void)
{
    89e8:	b500      	push	{lr}
    89ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    89ec:	f7f8 f8e8 	bl	bc0 <Sys_GetCoreID>
    89f0:	4603      	mov	r3, r0
    89f2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId]--;
    89f4:	4a0d      	ldr	r2, [pc, #52]	; (8a2c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x44>)
    89f6:	9b01      	ldr	r3, [sp, #4]
    89f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89fc:	1e5a      	subs	r2, r3, #1
    89fe:	490b      	ldr	r1, [pc, #44]	; (8a2c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x44>)
    8a00:	9b01      	ldr	r3, [sp, #4]
    8a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    8a06:	4a0a      	ldr	r2, [pc, #40]	; (8a30 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x48>)
    8a08:	9b01      	ldr	r3, [sp, #4]
    8a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a0e:	f003 0301 	and.w	r3, r3, #1
    8a12:	2b00      	cmp	r3, #0
    8a14:	d106      	bne.n	8a24 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x3c>
    8a16:	4a05      	ldr	r2, [pc, #20]	; (8a2c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x44>)
    8a18:	9b01      	ldr	r3, [sp, #4]
    8a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a1e:	2b00      	cmp	r3, #0
    8a20:	d100      	bne.n	8a24 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8a22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8a24:	bf00      	nop
    8a26:	b003      	add	sp, #12
    8a28:	f85d fb04 	ldr.w	pc, [sp], #4
    8a2c:	1fff9068 	.word	0x1fff9068
    8a30:	1fff9064 	.word	0x1fff9064

00008a34 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24(void)
{
    8a34:	b500      	push	{lr}
    8a36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8a38:	f7f8 f8c2 	bl	bc0 <Sys_GetCoreID>
    8a3c:	4603      	mov	r3, r0
    8a3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId])
    8a40:	4a10      	ldr	r2, [pc, #64]	; (8a84 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x50>)
    8a42:	9b01      	ldr	r3, [sp, #4]
    8a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a48:	2b00      	cmp	r3, #0
    8a4a:	d10d      	bne.n	8a68 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8a4c:	f7f7 ffd7 	bl	9fe <Gpt_schm_read_msr>
    8a50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8a52:	9b00      	ldr	r3, [sp, #0]
    8a54:	f003 0301 	and.w	r3, r3, #1
    8a58:	2b00      	cmp	r3, #0
    8a5a:	d100      	bne.n	8a5e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8a5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    8a5e:	490a      	ldr	r1, [pc, #40]	; (8a88 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x54>)
    8a60:	9b01      	ldr	r3, [sp, #4]
    8a62:	9a00      	ldr	r2, [sp, #0]
    8a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId]++;
    8a68:	4a06      	ldr	r2, [pc, #24]	; (8a84 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x50>)
    8a6a:	9b01      	ldr	r3, [sp, #4]
    8a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a70:	1c5a      	adds	r2, r3, #1
    8a72:	4904      	ldr	r1, [pc, #16]	; (8a84 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x50>)
    8a74:	9b01      	ldr	r3, [sp, #4]
    8a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8a7a:	bf00      	nop
    8a7c:	b003      	add	sp, #12
    8a7e:	f85d fb04 	ldr.w	pc, [sp], #4
    8a82:	bf00      	nop
    8a84:	1fff9070 	.word	0x1fff9070
    8a88:	1fff906c 	.word	0x1fff906c

00008a8c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24(void)
{
    8a8c:	b500      	push	{lr}
    8a8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8a90:	f7f8 f896 	bl	bc0 <Sys_GetCoreID>
    8a94:	4603      	mov	r3, r0
    8a96:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId]--;
    8a98:	4a0d      	ldr	r2, [pc, #52]	; (8ad0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x44>)
    8a9a:	9b01      	ldr	r3, [sp, #4]
    8a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8aa0:	1e5a      	subs	r2, r3, #1
    8aa2:	490b      	ldr	r1, [pc, #44]	; (8ad0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x44>)
    8aa4:	9b01      	ldr	r3, [sp, #4]
    8aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    8aaa:	4a0a      	ldr	r2, [pc, #40]	; (8ad4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x48>)
    8aac:	9b01      	ldr	r3, [sp, #4]
    8aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ab2:	f003 0301 	and.w	r3, r3, #1
    8ab6:	2b00      	cmp	r3, #0
    8ab8:	d106      	bne.n	8ac8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x3c>
    8aba:	4a05      	ldr	r2, [pc, #20]	; (8ad0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x44>)
    8abc:	9b01      	ldr	r3, [sp, #4]
    8abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ac2:	2b00      	cmp	r3, #0
    8ac4:	d100      	bne.n	8ac8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8ac6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8ac8:	bf00      	nop
    8aca:	b003      	add	sp, #12
    8acc:	f85d fb04 	ldr.w	pc, [sp], #4
    8ad0:	1fff9070 	.word	0x1fff9070
    8ad4:	1fff906c 	.word	0x1fff906c

00008ad8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25(void)
{
    8ad8:	b500      	push	{lr}
    8ada:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8adc:	f7f8 f870 	bl	bc0 <Sys_GetCoreID>
    8ae0:	4603      	mov	r3, r0
    8ae2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId])
    8ae4:	4a10      	ldr	r2, [pc, #64]	; (8b28 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x50>)
    8ae6:	9b01      	ldr	r3, [sp, #4]
    8ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8aec:	2b00      	cmp	r3, #0
    8aee:	d10d      	bne.n	8b0c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8af0:	f7f7 ff85 	bl	9fe <Gpt_schm_read_msr>
    8af4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8af6:	9b00      	ldr	r3, [sp, #0]
    8af8:	f003 0301 	and.w	r3, r3, #1
    8afc:	2b00      	cmp	r3, #0
    8afe:	d100      	bne.n	8b02 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8b00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    8b02:	490a      	ldr	r1, [pc, #40]	; (8b2c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x54>)
    8b04:	9b01      	ldr	r3, [sp, #4]
    8b06:	9a00      	ldr	r2, [sp, #0]
    8b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId]++;
    8b0c:	4a06      	ldr	r2, [pc, #24]	; (8b28 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x50>)
    8b0e:	9b01      	ldr	r3, [sp, #4]
    8b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b14:	1c5a      	adds	r2, r3, #1
    8b16:	4904      	ldr	r1, [pc, #16]	; (8b28 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x50>)
    8b18:	9b01      	ldr	r3, [sp, #4]
    8b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8b1e:	bf00      	nop
    8b20:	b003      	add	sp, #12
    8b22:	f85d fb04 	ldr.w	pc, [sp], #4
    8b26:	bf00      	nop
    8b28:	1fff9078 	.word	0x1fff9078
    8b2c:	1fff9074 	.word	0x1fff9074

00008b30 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25(void)
{
    8b30:	b500      	push	{lr}
    8b32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8b34:	f7f8 f844 	bl	bc0 <Sys_GetCoreID>
    8b38:	4603      	mov	r3, r0
    8b3a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId]--;
    8b3c:	4a0d      	ldr	r2, [pc, #52]	; (8b74 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x44>)
    8b3e:	9b01      	ldr	r3, [sp, #4]
    8b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b44:	1e5a      	subs	r2, r3, #1
    8b46:	490b      	ldr	r1, [pc, #44]	; (8b74 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x44>)
    8b48:	9b01      	ldr	r3, [sp, #4]
    8b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    8b4e:	4a0a      	ldr	r2, [pc, #40]	; (8b78 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x48>)
    8b50:	9b01      	ldr	r3, [sp, #4]
    8b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b56:	f003 0301 	and.w	r3, r3, #1
    8b5a:	2b00      	cmp	r3, #0
    8b5c:	d106      	bne.n	8b6c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x3c>
    8b5e:	4a05      	ldr	r2, [pc, #20]	; (8b74 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x44>)
    8b60:	9b01      	ldr	r3, [sp, #4]
    8b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b66:	2b00      	cmp	r3, #0
    8b68:	d100      	bne.n	8b6c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8b6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8b6c:	bf00      	nop
    8b6e:	b003      	add	sp, #12
    8b70:	f85d fb04 	ldr.w	pc, [sp], #4
    8b74:	1fff9078 	.word	0x1fff9078
    8b78:	1fff9074 	.word	0x1fff9074

00008b7c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26(void)
{
    8b7c:	b500      	push	{lr}
    8b7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8b80:	f7f8 f81e 	bl	bc0 <Sys_GetCoreID>
    8b84:	4603      	mov	r3, r0
    8b86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId])
    8b88:	4a10      	ldr	r2, [pc, #64]	; (8bcc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x50>)
    8b8a:	9b01      	ldr	r3, [sp, #4]
    8b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b90:	2b00      	cmp	r3, #0
    8b92:	d10d      	bne.n	8bb0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8b94:	f7f7 ff33 	bl	9fe <Gpt_schm_read_msr>
    8b98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8b9a:	9b00      	ldr	r3, [sp, #0]
    8b9c:	f003 0301 	and.w	r3, r3, #1
    8ba0:	2b00      	cmp	r3, #0
    8ba2:	d100      	bne.n	8ba6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8ba4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    8ba6:	490a      	ldr	r1, [pc, #40]	; (8bd0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x54>)
    8ba8:	9b01      	ldr	r3, [sp, #4]
    8baa:	9a00      	ldr	r2, [sp, #0]
    8bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId]++;
    8bb0:	4a06      	ldr	r2, [pc, #24]	; (8bcc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x50>)
    8bb2:	9b01      	ldr	r3, [sp, #4]
    8bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bb8:	1c5a      	adds	r2, r3, #1
    8bba:	4904      	ldr	r1, [pc, #16]	; (8bcc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x50>)
    8bbc:	9b01      	ldr	r3, [sp, #4]
    8bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8bc2:	bf00      	nop
    8bc4:	b003      	add	sp, #12
    8bc6:	f85d fb04 	ldr.w	pc, [sp], #4
    8bca:	bf00      	nop
    8bcc:	1fff9080 	.word	0x1fff9080
    8bd0:	1fff907c 	.word	0x1fff907c

00008bd4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26(void)
{
    8bd4:	b500      	push	{lr}
    8bd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8bd8:	f7f7 fff2 	bl	bc0 <Sys_GetCoreID>
    8bdc:	4603      	mov	r3, r0
    8bde:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId]--;
    8be0:	4a0d      	ldr	r2, [pc, #52]	; (8c18 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x44>)
    8be2:	9b01      	ldr	r3, [sp, #4]
    8be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8be8:	1e5a      	subs	r2, r3, #1
    8bea:	490b      	ldr	r1, [pc, #44]	; (8c18 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x44>)
    8bec:	9b01      	ldr	r3, [sp, #4]
    8bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    8bf2:	4a0a      	ldr	r2, [pc, #40]	; (8c1c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x48>)
    8bf4:	9b01      	ldr	r3, [sp, #4]
    8bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bfa:	f003 0301 	and.w	r3, r3, #1
    8bfe:	2b00      	cmp	r3, #0
    8c00:	d106      	bne.n	8c10 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x3c>
    8c02:	4a05      	ldr	r2, [pc, #20]	; (8c18 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x44>)
    8c04:	9b01      	ldr	r3, [sp, #4]
    8c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c0a:	2b00      	cmp	r3, #0
    8c0c:	d100      	bne.n	8c10 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8c0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8c10:	bf00      	nop
    8c12:	b003      	add	sp, #12
    8c14:	f85d fb04 	ldr.w	pc, [sp], #4
    8c18:	1fff9080 	.word	0x1fff9080
    8c1c:	1fff907c 	.word	0x1fff907c

00008c20 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29(void)
{
    8c20:	b500      	push	{lr}
    8c22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c24:	f7f7 ffcc 	bl	bc0 <Sys_GetCoreID>
    8c28:	4603      	mov	r3, r0
    8c2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId])
    8c2c:	4a10      	ldr	r2, [pc, #64]	; (8c70 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x50>)
    8c2e:	9b01      	ldr	r3, [sp, #4]
    8c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c34:	2b00      	cmp	r3, #0
    8c36:	d10d      	bne.n	8c54 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8c38:	f7f7 fee1 	bl	9fe <Gpt_schm_read_msr>
    8c3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8c3e:	9b00      	ldr	r3, [sp, #0]
    8c40:	f003 0301 	and.w	r3, r3, #1
    8c44:	2b00      	cmp	r3, #0
    8c46:	d100      	bne.n	8c4a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8c48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_29[u32CoreId] = msr;
    8c4a:	490a      	ldr	r1, [pc, #40]	; (8c74 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x54>)
    8c4c:	9b01      	ldr	r3, [sp, #4]
    8c4e:	9a00      	ldr	r2, [sp, #0]
    8c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId]++;
    8c54:	4a06      	ldr	r2, [pc, #24]	; (8c70 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x50>)
    8c56:	9b01      	ldr	r3, [sp, #4]
    8c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c5c:	1c5a      	adds	r2, r3, #1
    8c5e:	4904      	ldr	r1, [pc, #16]	; (8c70 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x50>)
    8c60:	9b01      	ldr	r3, [sp, #4]
    8c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8c66:	bf00      	nop
    8c68:	b003      	add	sp, #12
    8c6a:	f85d fb04 	ldr.w	pc, [sp], #4
    8c6e:	bf00      	nop
    8c70:	1fff9088 	.word	0x1fff9088
    8c74:	1fff9084 	.word	0x1fff9084

00008c78 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29(void)
{
    8c78:	b500      	push	{lr}
    8c7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c7c:	f7f7 ffa0 	bl	bc0 <Sys_GetCoreID>
    8c80:	4603      	mov	r3, r0
    8c82:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId]--;
    8c84:	4a0d      	ldr	r2, [pc, #52]	; (8cbc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x44>)
    8c86:	9b01      	ldr	r3, [sp, #4]
    8c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c8c:	1e5a      	subs	r2, r3, #1
    8c8e:	490b      	ldr	r1, [pc, #44]	; (8cbc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x44>)
    8c90:	9b01      	ldr	r3, [sp, #4]
    8c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
    8c96:	4a0a      	ldr	r2, [pc, #40]	; (8cc0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x48>)
    8c98:	9b01      	ldr	r3, [sp, #4]
    8c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c9e:	f003 0301 	and.w	r3, r3, #1
    8ca2:	2b00      	cmp	r3, #0
    8ca4:	d106      	bne.n	8cb4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x3c>
    8ca6:	4a05      	ldr	r2, [pc, #20]	; (8cbc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x44>)
    8ca8:	9b01      	ldr	r3, [sp, #4]
    8caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cae:	2b00      	cmp	r3, #0
    8cb0:	d100      	bne.n	8cb4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8cb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8cb4:	bf00      	nop
    8cb6:	b003      	add	sp, #12
    8cb8:	f85d fb04 	ldr.w	pc, [sp], #4
    8cbc:	1fff9088 	.word	0x1fff9088
    8cc0:	1fff9084 	.word	0x1fff9084

00008cc4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30(void)
{
    8cc4:	b500      	push	{lr}
    8cc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8cc8:	f7f7 ff7a 	bl	bc0 <Sys_GetCoreID>
    8ccc:	4603      	mov	r3, r0
    8cce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId])
    8cd0:	4a10      	ldr	r2, [pc, #64]	; (8d14 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x50>)
    8cd2:	9b01      	ldr	r3, [sp, #4]
    8cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cd8:	2b00      	cmp	r3, #0
    8cda:	d10d      	bne.n	8cf8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8cdc:	f7f7 fe8f 	bl	9fe <Gpt_schm_read_msr>
    8ce0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8ce2:	9b00      	ldr	r3, [sp, #0]
    8ce4:	f003 0301 	and.w	r3, r3, #1
    8ce8:	2b00      	cmp	r3, #0
    8cea:	d100      	bne.n	8cee <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8cec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_30[u32CoreId] = msr;
    8cee:	490a      	ldr	r1, [pc, #40]	; (8d18 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x54>)
    8cf0:	9b01      	ldr	r3, [sp, #4]
    8cf2:	9a00      	ldr	r2, [sp, #0]
    8cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId]++;
    8cf8:	4a06      	ldr	r2, [pc, #24]	; (8d14 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x50>)
    8cfa:	9b01      	ldr	r3, [sp, #4]
    8cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d00:	1c5a      	adds	r2, r3, #1
    8d02:	4904      	ldr	r1, [pc, #16]	; (8d14 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x50>)
    8d04:	9b01      	ldr	r3, [sp, #4]
    8d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8d0a:	bf00      	nop
    8d0c:	b003      	add	sp, #12
    8d0e:	f85d fb04 	ldr.w	pc, [sp], #4
    8d12:	bf00      	nop
    8d14:	1fff9090 	.word	0x1fff9090
    8d18:	1fff908c 	.word	0x1fff908c

00008d1c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30(void)
{
    8d1c:	b500      	push	{lr}
    8d1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8d20:	f7f7 ff4e 	bl	bc0 <Sys_GetCoreID>
    8d24:	4603      	mov	r3, r0
    8d26:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId]--;
    8d28:	4a0d      	ldr	r2, [pc, #52]	; (8d60 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x44>)
    8d2a:	9b01      	ldr	r3, [sp, #4]
    8d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d30:	1e5a      	subs	r2, r3, #1
    8d32:	490b      	ldr	r1, [pc, #44]	; (8d60 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x44>)
    8d34:	9b01      	ldr	r3, [sp, #4]
    8d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
    8d3a:	4a0a      	ldr	r2, [pc, #40]	; (8d64 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x48>)
    8d3c:	9b01      	ldr	r3, [sp, #4]
    8d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d42:	f003 0301 	and.w	r3, r3, #1
    8d46:	2b00      	cmp	r3, #0
    8d48:	d106      	bne.n	8d58 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x3c>
    8d4a:	4a05      	ldr	r2, [pc, #20]	; (8d60 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x44>)
    8d4c:	9b01      	ldr	r3, [sp, #4]
    8d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d52:	2b00      	cmp	r3, #0
    8d54:	d100      	bne.n	8d58 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8d56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8d58:	bf00      	nop
    8d5a:	b003      	add	sp, #12
    8d5c:	f85d fb04 	ldr.w	pc, [sp], #4
    8d60:	1fff9090 	.word	0x1fff9090
    8d64:	1fff908c 	.word	0x1fff908c

00008d68 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31(void)
{
    8d68:	b500      	push	{lr}
    8d6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8d6c:	f7f7 ff28 	bl	bc0 <Sys_GetCoreID>
    8d70:	4603      	mov	r3, r0
    8d72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId])
    8d74:	4a10      	ldr	r2, [pc, #64]	; (8db8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x50>)
    8d76:	9b01      	ldr	r3, [sp, #4]
    8d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d7c:	2b00      	cmp	r3, #0
    8d7e:	d10d      	bne.n	8d9c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8d80:	f7f7 fe3d 	bl	9fe <Gpt_schm_read_msr>
    8d84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8d86:	9b00      	ldr	r3, [sp, #0]
    8d88:	f003 0301 	and.w	r3, r3, #1
    8d8c:	2b00      	cmp	r3, #0
    8d8e:	d100      	bne.n	8d92 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8d90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_31[u32CoreId] = msr;
    8d92:	490a      	ldr	r1, [pc, #40]	; (8dbc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x54>)
    8d94:	9b01      	ldr	r3, [sp, #4]
    8d96:	9a00      	ldr	r2, [sp, #0]
    8d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId]++;
    8d9c:	4a06      	ldr	r2, [pc, #24]	; (8db8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x50>)
    8d9e:	9b01      	ldr	r3, [sp, #4]
    8da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8da4:	1c5a      	adds	r2, r3, #1
    8da6:	4904      	ldr	r1, [pc, #16]	; (8db8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x50>)
    8da8:	9b01      	ldr	r3, [sp, #4]
    8daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8dae:	bf00      	nop
    8db0:	b003      	add	sp, #12
    8db2:	f85d fb04 	ldr.w	pc, [sp], #4
    8db6:	bf00      	nop
    8db8:	1fff9098 	.word	0x1fff9098
    8dbc:	1fff9094 	.word	0x1fff9094

00008dc0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31(void)
{
    8dc0:	b500      	push	{lr}
    8dc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8dc4:	f7f7 fefc 	bl	bc0 <Sys_GetCoreID>
    8dc8:	4603      	mov	r3, r0
    8dca:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId]--;
    8dcc:	4a0d      	ldr	r2, [pc, #52]	; (8e04 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x44>)
    8dce:	9b01      	ldr	r3, [sp, #4]
    8dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dd4:	1e5a      	subs	r2, r3, #1
    8dd6:	490b      	ldr	r1, [pc, #44]	; (8e04 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x44>)
    8dd8:	9b01      	ldr	r3, [sp, #4]
    8dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
    8dde:	4a0a      	ldr	r2, [pc, #40]	; (8e08 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x48>)
    8de0:	9b01      	ldr	r3, [sp, #4]
    8de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8de6:	f003 0301 	and.w	r3, r3, #1
    8dea:	2b00      	cmp	r3, #0
    8dec:	d106      	bne.n	8dfc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x3c>
    8dee:	4a05      	ldr	r2, [pc, #20]	; (8e04 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x44>)
    8df0:	9b01      	ldr	r3, [sp, #4]
    8df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8df6:	2b00      	cmp	r3, #0
    8df8:	d100      	bne.n	8dfc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8dfa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8dfc:	bf00      	nop
    8dfe:	b003      	add	sp, #12
    8e00:	f85d fb04 	ldr.w	pc, [sp], #4
    8e04:	1fff9098 	.word	0x1fff9098
    8e08:	1fff9094 	.word	0x1fff9094

00008e0c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35(void)
{
    8e0c:	b500      	push	{lr}
    8e0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e10:	f7f7 fed6 	bl	bc0 <Sys_GetCoreID>
    8e14:	4603      	mov	r3, r0
    8e16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId])
    8e18:	4a10      	ldr	r2, [pc, #64]	; (8e5c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x50>)
    8e1a:	9b01      	ldr	r3, [sp, #4]
    8e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e20:	2b00      	cmp	r3, #0
    8e22:	d10d      	bne.n	8e40 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8e24:	f7f7 fdeb 	bl	9fe <Gpt_schm_read_msr>
    8e28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8e2a:	9b00      	ldr	r3, [sp, #0]
    8e2c:	f003 0301 	and.w	r3, r3, #1
    8e30:	2b00      	cmp	r3, #0
    8e32:	d100      	bne.n	8e36 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8e34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_35[u32CoreId] = msr;
    8e36:	490a      	ldr	r1, [pc, #40]	; (8e60 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x54>)
    8e38:	9b01      	ldr	r3, [sp, #4]
    8e3a:	9a00      	ldr	r2, [sp, #0]
    8e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId]++;
    8e40:	4a06      	ldr	r2, [pc, #24]	; (8e5c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x50>)
    8e42:	9b01      	ldr	r3, [sp, #4]
    8e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e48:	1c5a      	adds	r2, r3, #1
    8e4a:	4904      	ldr	r1, [pc, #16]	; (8e5c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x50>)
    8e4c:	9b01      	ldr	r3, [sp, #4]
    8e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8e52:	bf00      	nop
    8e54:	b003      	add	sp, #12
    8e56:	f85d fb04 	ldr.w	pc, [sp], #4
    8e5a:	bf00      	nop
    8e5c:	1fff90a0 	.word	0x1fff90a0
    8e60:	1fff909c 	.word	0x1fff909c

00008e64 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35(void)
{
    8e64:	b500      	push	{lr}
    8e66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e68:	f7f7 feaa 	bl	bc0 <Sys_GetCoreID>
    8e6c:	4603      	mov	r3, r0
    8e6e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId]--;
    8e70:	4a0d      	ldr	r2, [pc, #52]	; (8ea8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x44>)
    8e72:	9b01      	ldr	r3, [sp, #4]
    8e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e78:	1e5a      	subs	r2, r3, #1
    8e7a:	490b      	ldr	r1, [pc, #44]	; (8ea8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x44>)
    8e7c:	9b01      	ldr	r3, [sp, #4]
    8e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
    8e82:	4a0a      	ldr	r2, [pc, #40]	; (8eac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x48>)
    8e84:	9b01      	ldr	r3, [sp, #4]
    8e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e8a:	f003 0301 	and.w	r3, r3, #1
    8e8e:	2b00      	cmp	r3, #0
    8e90:	d106      	bne.n	8ea0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x3c>
    8e92:	4a05      	ldr	r2, [pc, #20]	; (8ea8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x44>)
    8e94:	9b01      	ldr	r3, [sp, #4]
    8e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e9a:	2b00      	cmp	r3, #0
    8e9c:	d100      	bne.n	8ea0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8e9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8ea0:	bf00      	nop
    8ea2:	b003      	add	sp, #12
    8ea4:	f85d fb04 	ldr.w	pc, [sp], #4
    8ea8:	1fff90a0 	.word	0x1fff90a0
    8eac:	1fff909c 	.word	0x1fff909c

00008eb0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36(void)
{
    8eb0:	b500      	push	{lr}
    8eb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8eb4:	f7f7 fe84 	bl	bc0 <Sys_GetCoreID>
    8eb8:	4603      	mov	r3, r0
    8eba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId])
    8ebc:	4a10      	ldr	r2, [pc, #64]	; (8f00 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x50>)
    8ebe:	9b01      	ldr	r3, [sp, #4]
    8ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ec4:	2b00      	cmp	r3, #0
    8ec6:	d10d      	bne.n	8ee4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8ec8:	f7f7 fd99 	bl	9fe <Gpt_schm_read_msr>
    8ecc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8ece:	9b00      	ldr	r3, [sp, #0]
    8ed0:	f003 0301 	and.w	r3, r3, #1
    8ed4:	2b00      	cmp	r3, #0
    8ed6:	d100      	bne.n	8eda <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8ed8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_36[u32CoreId] = msr;
    8eda:	490a      	ldr	r1, [pc, #40]	; (8f04 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x54>)
    8edc:	9b01      	ldr	r3, [sp, #4]
    8ede:	9a00      	ldr	r2, [sp, #0]
    8ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId]++;
    8ee4:	4a06      	ldr	r2, [pc, #24]	; (8f00 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x50>)
    8ee6:	9b01      	ldr	r3, [sp, #4]
    8ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8eec:	1c5a      	adds	r2, r3, #1
    8eee:	4904      	ldr	r1, [pc, #16]	; (8f00 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x50>)
    8ef0:	9b01      	ldr	r3, [sp, #4]
    8ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8ef6:	bf00      	nop
    8ef8:	b003      	add	sp, #12
    8efa:	f85d fb04 	ldr.w	pc, [sp], #4
    8efe:	bf00      	nop
    8f00:	1fff90a8 	.word	0x1fff90a8
    8f04:	1fff90a4 	.word	0x1fff90a4

00008f08 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36(void)
{
    8f08:	b500      	push	{lr}
    8f0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f0c:	f7f7 fe58 	bl	bc0 <Sys_GetCoreID>
    8f10:	4603      	mov	r3, r0
    8f12:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId]--;
    8f14:	4a0d      	ldr	r2, [pc, #52]	; (8f4c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x44>)
    8f16:	9b01      	ldr	r3, [sp, #4]
    8f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f1c:	1e5a      	subs	r2, r3, #1
    8f1e:	490b      	ldr	r1, [pc, #44]	; (8f4c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x44>)
    8f20:	9b01      	ldr	r3, [sp, #4]
    8f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
    8f26:	4a0a      	ldr	r2, [pc, #40]	; (8f50 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x48>)
    8f28:	9b01      	ldr	r3, [sp, #4]
    8f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f2e:	f003 0301 	and.w	r3, r3, #1
    8f32:	2b00      	cmp	r3, #0
    8f34:	d106      	bne.n	8f44 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x3c>
    8f36:	4a05      	ldr	r2, [pc, #20]	; (8f4c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x44>)
    8f38:	9b01      	ldr	r3, [sp, #4]
    8f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f3e:	2b00      	cmp	r3, #0
    8f40:	d100      	bne.n	8f44 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8f42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8f44:	bf00      	nop
    8f46:	b003      	add	sp, #12
    8f48:	f85d fb04 	ldr.w	pc, [sp], #4
    8f4c:	1fff90a8 	.word	0x1fff90a8
    8f50:	1fff90a4 	.word	0x1fff90a4

00008f54 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38(void)
{
    8f54:	b500      	push	{lr}
    8f56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f58:	f7f7 fe32 	bl	bc0 <Sys_GetCoreID>
    8f5c:	4603      	mov	r3, r0
    8f5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId])
    8f60:	4a10      	ldr	r2, [pc, #64]	; (8fa4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x50>)
    8f62:	9b01      	ldr	r3, [sp, #4]
    8f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f68:	2b00      	cmp	r3, #0
    8f6a:	d10d      	bne.n	8f88 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8f6c:	f7f7 fd47 	bl	9fe <Gpt_schm_read_msr>
    8f70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8f72:	9b00      	ldr	r3, [sp, #0]
    8f74:	f003 0301 	and.w	r3, r3, #1
    8f78:	2b00      	cmp	r3, #0
    8f7a:	d100      	bne.n	8f7e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8f7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_38[u32CoreId] = msr;
    8f7e:	490a      	ldr	r1, [pc, #40]	; (8fa8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x54>)
    8f80:	9b01      	ldr	r3, [sp, #4]
    8f82:	9a00      	ldr	r2, [sp, #0]
    8f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId]++;
    8f88:	4a06      	ldr	r2, [pc, #24]	; (8fa4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x50>)
    8f8a:	9b01      	ldr	r3, [sp, #4]
    8f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f90:	1c5a      	adds	r2, r3, #1
    8f92:	4904      	ldr	r1, [pc, #16]	; (8fa4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x50>)
    8f94:	9b01      	ldr	r3, [sp, #4]
    8f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8f9a:	bf00      	nop
    8f9c:	b003      	add	sp, #12
    8f9e:	f85d fb04 	ldr.w	pc, [sp], #4
    8fa2:	bf00      	nop
    8fa4:	1fff90b0 	.word	0x1fff90b0
    8fa8:	1fff90ac 	.word	0x1fff90ac

00008fac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38(void)
{
    8fac:	b500      	push	{lr}
    8fae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8fb0:	f7f7 fe06 	bl	bc0 <Sys_GetCoreID>
    8fb4:	4603      	mov	r3, r0
    8fb6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId]--;
    8fb8:	4a0d      	ldr	r2, [pc, #52]	; (8ff0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x44>)
    8fba:	9b01      	ldr	r3, [sp, #4]
    8fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fc0:	1e5a      	subs	r2, r3, #1
    8fc2:	490b      	ldr	r1, [pc, #44]	; (8ff0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x44>)
    8fc4:	9b01      	ldr	r3, [sp, #4]
    8fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
    8fca:	4a0a      	ldr	r2, [pc, #40]	; (8ff4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x48>)
    8fcc:	9b01      	ldr	r3, [sp, #4]
    8fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fd2:	f003 0301 	and.w	r3, r3, #1
    8fd6:	2b00      	cmp	r3, #0
    8fd8:	d106      	bne.n	8fe8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x3c>
    8fda:	4a05      	ldr	r2, [pc, #20]	; (8ff0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x44>)
    8fdc:	9b01      	ldr	r3, [sp, #4]
    8fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fe2:	2b00      	cmp	r3, #0
    8fe4:	d100      	bne.n	8fe8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8fe6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8fe8:	bf00      	nop
    8fea:	b003      	add	sp, #12
    8fec:	f85d fb04 	ldr.w	pc, [sp], #4
    8ff0:	1fff90b0 	.word	0x1fff90b0
    8ff4:	1fff90ac 	.word	0x1fff90ac

00008ff8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39(void)
{
    8ff8:	b500      	push	{lr}
    8ffa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8ffc:	f7f7 fde0 	bl	bc0 <Sys_GetCoreID>
    9000:	4603      	mov	r3, r0
    9002:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId])
    9004:	4a10      	ldr	r2, [pc, #64]	; (9048 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x50>)
    9006:	9b01      	ldr	r3, [sp, #4]
    9008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    900c:	2b00      	cmp	r3, #0
    900e:	d10d      	bne.n	902c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9010:	f7f7 fcf5 	bl	9fe <Gpt_schm_read_msr>
    9014:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9016:	9b00      	ldr	r3, [sp, #0]
    9018:	f003 0301 	and.w	r3, r3, #1
    901c:	2b00      	cmp	r3, #0
    901e:	d100      	bne.n	9022 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9020:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_39[u32CoreId] = msr;
    9022:	490a      	ldr	r1, [pc, #40]	; (904c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x54>)
    9024:	9b01      	ldr	r3, [sp, #4]
    9026:	9a00      	ldr	r2, [sp, #0]
    9028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId]++;
    902c:	4a06      	ldr	r2, [pc, #24]	; (9048 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x50>)
    902e:	9b01      	ldr	r3, [sp, #4]
    9030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9034:	1c5a      	adds	r2, r3, #1
    9036:	4904      	ldr	r1, [pc, #16]	; (9048 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x50>)
    9038:	9b01      	ldr	r3, [sp, #4]
    903a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    903e:	bf00      	nop
    9040:	b003      	add	sp, #12
    9042:	f85d fb04 	ldr.w	pc, [sp], #4
    9046:	bf00      	nop
    9048:	1fff90b8 	.word	0x1fff90b8
    904c:	1fff90b4 	.word	0x1fff90b4

00009050 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39(void)
{
    9050:	b500      	push	{lr}
    9052:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9054:	f7f7 fdb4 	bl	bc0 <Sys_GetCoreID>
    9058:	4603      	mov	r3, r0
    905a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId]--;
    905c:	4a0d      	ldr	r2, [pc, #52]	; (9094 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x44>)
    905e:	9b01      	ldr	r3, [sp, #4]
    9060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9064:	1e5a      	subs	r2, r3, #1
    9066:	490b      	ldr	r1, [pc, #44]	; (9094 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x44>)
    9068:	9b01      	ldr	r3, [sp, #4]
    906a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
    906e:	4a0a      	ldr	r2, [pc, #40]	; (9098 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x48>)
    9070:	9b01      	ldr	r3, [sp, #4]
    9072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9076:	f003 0301 	and.w	r3, r3, #1
    907a:	2b00      	cmp	r3, #0
    907c:	d106      	bne.n	908c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x3c>
    907e:	4a05      	ldr	r2, [pc, #20]	; (9094 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x44>)
    9080:	9b01      	ldr	r3, [sp, #4]
    9082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9086:	2b00      	cmp	r3, #0
    9088:	d100      	bne.n	908c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    908a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    908c:	bf00      	nop
    908e:	b003      	add	sp, #12
    9090:	f85d fb04 	ldr.w	pc, [sp], #4
    9094:	1fff90b8 	.word	0x1fff90b8
    9098:	1fff90b4 	.word	0x1fff90b4

0000909c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40(void)
{
    909c:	b500      	push	{lr}
    909e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    90a0:	f7f7 fd8e 	bl	bc0 <Sys_GetCoreID>
    90a4:	4603      	mov	r3, r0
    90a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId])
    90a8:	4a10      	ldr	r2, [pc, #64]	; (90ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x50>)
    90aa:	9b01      	ldr	r3, [sp, #4]
    90ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90b0:	2b00      	cmp	r3, #0
    90b2:	d10d      	bne.n	90d0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    90b4:	f7f7 fca3 	bl	9fe <Gpt_schm_read_msr>
    90b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    90ba:	9b00      	ldr	r3, [sp, #0]
    90bc:	f003 0301 	and.w	r3, r3, #1
    90c0:	2b00      	cmp	r3, #0
    90c2:	d100      	bne.n	90c6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    90c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_40[u32CoreId] = msr;
    90c6:	490a      	ldr	r1, [pc, #40]	; (90f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x54>)
    90c8:	9b01      	ldr	r3, [sp, #4]
    90ca:	9a00      	ldr	r2, [sp, #0]
    90cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId]++;
    90d0:	4a06      	ldr	r2, [pc, #24]	; (90ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x50>)
    90d2:	9b01      	ldr	r3, [sp, #4]
    90d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90d8:	1c5a      	adds	r2, r3, #1
    90da:	4904      	ldr	r1, [pc, #16]	; (90ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x50>)
    90dc:	9b01      	ldr	r3, [sp, #4]
    90de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    90e2:	bf00      	nop
    90e4:	b003      	add	sp, #12
    90e6:	f85d fb04 	ldr.w	pc, [sp], #4
    90ea:	bf00      	nop
    90ec:	1fff90c0 	.word	0x1fff90c0
    90f0:	1fff90bc 	.word	0x1fff90bc

000090f4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40(void)
{
    90f4:	b500      	push	{lr}
    90f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    90f8:	f7f7 fd62 	bl	bc0 <Sys_GetCoreID>
    90fc:	4603      	mov	r3, r0
    90fe:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId]--;
    9100:	4a0d      	ldr	r2, [pc, #52]	; (9138 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x44>)
    9102:	9b01      	ldr	r3, [sp, #4]
    9104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9108:	1e5a      	subs	r2, r3, #1
    910a:	490b      	ldr	r1, [pc, #44]	; (9138 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x44>)
    910c:	9b01      	ldr	r3, [sp, #4]
    910e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
    9112:	4a0a      	ldr	r2, [pc, #40]	; (913c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x48>)
    9114:	9b01      	ldr	r3, [sp, #4]
    9116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    911a:	f003 0301 	and.w	r3, r3, #1
    911e:	2b00      	cmp	r3, #0
    9120:	d106      	bne.n	9130 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x3c>
    9122:	4a05      	ldr	r2, [pc, #20]	; (9138 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x44>)
    9124:	9b01      	ldr	r3, [sp, #4]
    9126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    912a:	2b00      	cmp	r3, #0
    912c:	d100      	bne.n	9130 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    912e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9130:	bf00      	nop
    9132:	b003      	add	sp, #12
    9134:	f85d fb04 	ldr.w	pc, [sp], #4
    9138:	1fff90c0 	.word	0x1fff90c0
    913c:	1fff90bc 	.word	0x1fff90bc

00009140 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41(void)
{
    9140:	b500      	push	{lr}
    9142:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9144:	f7f7 fd3c 	bl	bc0 <Sys_GetCoreID>
    9148:	4603      	mov	r3, r0
    914a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId])
    914c:	4a10      	ldr	r2, [pc, #64]	; (9190 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x50>)
    914e:	9b01      	ldr	r3, [sp, #4]
    9150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9154:	2b00      	cmp	r3, #0
    9156:	d10d      	bne.n	9174 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9158:	f7f7 fc51 	bl	9fe <Gpt_schm_read_msr>
    915c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    915e:	9b00      	ldr	r3, [sp, #0]
    9160:	f003 0301 	and.w	r3, r3, #1
    9164:	2b00      	cmp	r3, #0
    9166:	d100      	bne.n	916a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9168:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_41[u32CoreId] = msr;
    916a:	490a      	ldr	r1, [pc, #40]	; (9194 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x54>)
    916c:	9b01      	ldr	r3, [sp, #4]
    916e:	9a00      	ldr	r2, [sp, #0]
    9170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId]++;
    9174:	4a06      	ldr	r2, [pc, #24]	; (9190 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x50>)
    9176:	9b01      	ldr	r3, [sp, #4]
    9178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    917c:	1c5a      	adds	r2, r3, #1
    917e:	4904      	ldr	r1, [pc, #16]	; (9190 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x50>)
    9180:	9b01      	ldr	r3, [sp, #4]
    9182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9186:	bf00      	nop
    9188:	b003      	add	sp, #12
    918a:	f85d fb04 	ldr.w	pc, [sp], #4
    918e:	bf00      	nop
    9190:	1fff90c8 	.word	0x1fff90c8
    9194:	1fff90c4 	.word	0x1fff90c4

00009198 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41(void)
{
    9198:	b500      	push	{lr}
    919a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    919c:	f7f7 fd10 	bl	bc0 <Sys_GetCoreID>
    91a0:	4603      	mov	r3, r0
    91a2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId]--;
    91a4:	4a0d      	ldr	r2, [pc, #52]	; (91dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x44>)
    91a6:	9b01      	ldr	r3, [sp, #4]
    91a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91ac:	1e5a      	subs	r2, r3, #1
    91ae:	490b      	ldr	r1, [pc, #44]	; (91dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x44>)
    91b0:	9b01      	ldr	r3, [sp, #4]
    91b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
    91b6:	4a0a      	ldr	r2, [pc, #40]	; (91e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x48>)
    91b8:	9b01      	ldr	r3, [sp, #4]
    91ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91be:	f003 0301 	and.w	r3, r3, #1
    91c2:	2b00      	cmp	r3, #0
    91c4:	d106      	bne.n	91d4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x3c>
    91c6:	4a05      	ldr	r2, [pc, #20]	; (91dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x44>)
    91c8:	9b01      	ldr	r3, [sp, #4]
    91ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91ce:	2b00      	cmp	r3, #0
    91d0:	d100      	bne.n	91d4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    91d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    91d4:	bf00      	nop
    91d6:	b003      	add	sp, #12
    91d8:	f85d fb04 	ldr.w	pc, [sp], #4
    91dc:	1fff90c8 	.word	0x1fff90c8
    91e0:	1fff90c4 	.word	0x1fff90c4

000091e4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42(void)
{
    91e4:	b500      	push	{lr}
    91e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    91e8:	f7f7 fcea 	bl	bc0 <Sys_GetCoreID>
    91ec:	4603      	mov	r3, r0
    91ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId])
    91f0:	4a10      	ldr	r2, [pc, #64]	; (9234 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x50>)
    91f2:	9b01      	ldr	r3, [sp, #4]
    91f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91f8:	2b00      	cmp	r3, #0
    91fa:	d10d      	bne.n	9218 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    91fc:	f7f7 fbff 	bl	9fe <Gpt_schm_read_msr>
    9200:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9202:	9b00      	ldr	r3, [sp, #0]
    9204:	f003 0301 	and.w	r3, r3, #1
    9208:	2b00      	cmp	r3, #0
    920a:	d100      	bne.n	920e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    920c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_42[u32CoreId] = msr;
    920e:	490a      	ldr	r1, [pc, #40]	; (9238 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x54>)
    9210:	9b01      	ldr	r3, [sp, #4]
    9212:	9a00      	ldr	r2, [sp, #0]
    9214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId]++;
    9218:	4a06      	ldr	r2, [pc, #24]	; (9234 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x50>)
    921a:	9b01      	ldr	r3, [sp, #4]
    921c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9220:	1c5a      	adds	r2, r3, #1
    9222:	4904      	ldr	r1, [pc, #16]	; (9234 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x50>)
    9224:	9b01      	ldr	r3, [sp, #4]
    9226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    922a:	bf00      	nop
    922c:	b003      	add	sp, #12
    922e:	f85d fb04 	ldr.w	pc, [sp], #4
    9232:	bf00      	nop
    9234:	1fff90d0 	.word	0x1fff90d0
    9238:	1fff90cc 	.word	0x1fff90cc

0000923c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42(void)
{
    923c:	b500      	push	{lr}
    923e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9240:	f7f7 fcbe 	bl	bc0 <Sys_GetCoreID>
    9244:	4603      	mov	r3, r0
    9246:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId]--;
    9248:	4a0d      	ldr	r2, [pc, #52]	; (9280 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x44>)
    924a:	9b01      	ldr	r3, [sp, #4]
    924c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9250:	1e5a      	subs	r2, r3, #1
    9252:	490b      	ldr	r1, [pc, #44]	; (9280 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x44>)
    9254:	9b01      	ldr	r3, [sp, #4]
    9256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
    925a:	4a0a      	ldr	r2, [pc, #40]	; (9284 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x48>)
    925c:	9b01      	ldr	r3, [sp, #4]
    925e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9262:	f003 0301 	and.w	r3, r3, #1
    9266:	2b00      	cmp	r3, #0
    9268:	d106      	bne.n	9278 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x3c>
    926a:	4a05      	ldr	r2, [pc, #20]	; (9280 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x44>)
    926c:	9b01      	ldr	r3, [sp, #4]
    926e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9272:	2b00      	cmp	r3, #0
    9274:	d100      	bne.n	9278 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9276:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9278:	bf00      	nop
    927a:	b003      	add	sp, #12
    927c:	f85d fb04 	ldr.w	pc, [sp], #4
    9280:	1fff90d0 	.word	0x1fff90d0
    9284:	1fff90cc 	.word	0x1fff90cc

00009288 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43(void)
{
    9288:	b500      	push	{lr}
    928a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    928c:	f7f7 fc98 	bl	bc0 <Sys_GetCoreID>
    9290:	4603      	mov	r3, r0
    9292:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId])
    9294:	4a10      	ldr	r2, [pc, #64]	; (92d8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x50>)
    9296:	9b01      	ldr	r3, [sp, #4]
    9298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    929c:	2b00      	cmp	r3, #0
    929e:	d10d      	bne.n	92bc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    92a0:	f7f7 fbad 	bl	9fe <Gpt_schm_read_msr>
    92a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    92a6:	9b00      	ldr	r3, [sp, #0]
    92a8:	f003 0301 	and.w	r3, r3, #1
    92ac:	2b00      	cmp	r3, #0
    92ae:	d100      	bne.n	92b2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    92b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_43[u32CoreId] = msr;
    92b2:	490a      	ldr	r1, [pc, #40]	; (92dc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x54>)
    92b4:	9b01      	ldr	r3, [sp, #4]
    92b6:	9a00      	ldr	r2, [sp, #0]
    92b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId]++;
    92bc:	4a06      	ldr	r2, [pc, #24]	; (92d8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x50>)
    92be:	9b01      	ldr	r3, [sp, #4]
    92c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92c4:	1c5a      	adds	r2, r3, #1
    92c6:	4904      	ldr	r1, [pc, #16]	; (92d8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x50>)
    92c8:	9b01      	ldr	r3, [sp, #4]
    92ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    92ce:	bf00      	nop
    92d0:	b003      	add	sp, #12
    92d2:	f85d fb04 	ldr.w	pc, [sp], #4
    92d6:	bf00      	nop
    92d8:	1fff90d8 	.word	0x1fff90d8
    92dc:	1fff90d4 	.word	0x1fff90d4

000092e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43(void)
{
    92e0:	b500      	push	{lr}
    92e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    92e4:	f7f7 fc6c 	bl	bc0 <Sys_GetCoreID>
    92e8:	4603      	mov	r3, r0
    92ea:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId]--;
    92ec:	4a0d      	ldr	r2, [pc, #52]	; (9324 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x44>)
    92ee:	9b01      	ldr	r3, [sp, #4]
    92f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92f4:	1e5a      	subs	r2, r3, #1
    92f6:	490b      	ldr	r1, [pc, #44]	; (9324 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x44>)
    92f8:	9b01      	ldr	r3, [sp, #4]
    92fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
    92fe:	4a0a      	ldr	r2, [pc, #40]	; (9328 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x48>)
    9300:	9b01      	ldr	r3, [sp, #4]
    9302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9306:	f003 0301 	and.w	r3, r3, #1
    930a:	2b00      	cmp	r3, #0
    930c:	d106      	bne.n	931c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x3c>
    930e:	4a05      	ldr	r2, [pc, #20]	; (9324 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x44>)
    9310:	9b01      	ldr	r3, [sp, #4]
    9312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9316:	2b00      	cmp	r3, #0
    9318:	d100      	bne.n	931c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    931a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    931c:	bf00      	nop
    931e:	b003      	add	sp, #12
    9320:	f85d fb04 	ldr.w	pc, [sp], #4
    9324:	1fff90d8 	.word	0x1fff90d8
    9328:	1fff90d4 	.word	0x1fff90d4

0000932c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44(void)
{
    932c:	b500      	push	{lr}
    932e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9330:	f7f7 fc46 	bl	bc0 <Sys_GetCoreID>
    9334:	4603      	mov	r3, r0
    9336:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId])
    9338:	4a10      	ldr	r2, [pc, #64]	; (937c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x50>)
    933a:	9b01      	ldr	r3, [sp, #4]
    933c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9340:	2b00      	cmp	r3, #0
    9342:	d10d      	bne.n	9360 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9344:	f7f7 fb5b 	bl	9fe <Gpt_schm_read_msr>
    9348:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    934a:	9b00      	ldr	r3, [sp, #0]
    934c:	f003 0301 	and.w	r3, r3, #1
    9350:	2b00      	cmp	r3, #0
    9352:	d100      	bne.n	9356 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9354:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_44[u32CoreId] = msr;
    9356:	490a      	ldr	r1, [pc, #40]	; (9380 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x54>)
    9358:	9b01      	ldr	r3, [sp, #4]
    935a:	9a00      	ldr	r2, [sp, #0]
    935c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId]++;
    9360:	4a06      	ldr	r2, [pc, #24]	; (937c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x50>)
    9362:	9b01      	ldr	r3, [sp, #4]
    9364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9368:	1c5a      	adds	r2, r3, #1
    936a:	4904      	ldr	r1, [pc, #16]	; (937c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x50>)
    936c:	9b01      	ldr	r3, [sp, #4]
    936e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9372:	bf00      	nop
    9374:	b003      	add	sp, #12
    9376:	f85d fb04 	ldr.w	pc, [sp], #4
    937a:	bf00      	nop
    937c:	1fff90e0 	.word	0x1fff90e0
    9380:	1fff90dc 	.word	0x1fff90dc

00009384 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44(void)
{
    9384:	b500      	push	{lr}
    9386:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9388:	f7f7 fc1a 	bl	bc0 <Sys_GetCoreID>
    938c:	4603      	mov	r3, r0
    938e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId]--;
    9390:	4a0d      	ldr	r2, [pc, #52]	; (93c8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x44>)
    9392:	9b01      	ldr	r3, [sp, #4]
    9394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9398:	1e5a      	subs	r2, r3, #1
    939a:	490b      	ldr	r1, [pc, #44]	; (93c8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x44>)
    939c:	9b01      	ldr	r3, [sp, #4]
    939e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
    93a2:	4a0a      	ldr	r2, [pc, #40]	; (93cc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x48>)
    93a4:	9b01      	ldr	r3, [sp, #4]
    93a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93aa:	f003 0301 	and.w	r3, r3, #1
    93ae:	2b00      	cmp	r3, #0
    93b0:	d106      	bne.n	93c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x3c>
    93b2:	4a05      	ldr	r2, [pc, #20]	; (93c8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x44>)
    93b4:	9b01      	ldr	r3, [sp, #4]
    93b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93ba:	2b00      	cmp	r3, #0
    93bc:	d100      	bne.n	93c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    93be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    93c0:	bf00      	nop
    93c2:	b003      	add	sp, #12
    93c4:	f85d fb04 	ldr.w	pc, [sp], #4
    93c8:	1fff90e0 	.word	0x1fff90e0
    93cc:	1fff90dc 	.word	0x1fff90dc

000093d0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45(void)
{
    93d0:	b500      	push	{lr}
    93d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    93d4:	f7f7 fbf4 	bl	bc0 <Sys_GetCoreID>
    93d8:	4603      	mov	r3, r0
    93da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId])
    93dc:	4a10      	ldr	r2, [pc, #64]	; (9420 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x50>)
    93de:	9b01      	ldr	r3, [sp, #4]
    93e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93e4:	2b00      	cmp	r3, #0
    93e6:	d10d      	bne.n	9404 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    93e8:	f7f7 fb09 	bl	9fe <Gpt_schm_read_msr>
    93ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    93ee:	9b00      	ldr	r3, [sp, #0]
    93f0:	f003 0301 	and.w	r3, r3, #1
    93f4:	2b00      	cmp	r3, #0
    93f6:	d100      	bne.n	93fa <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    93f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_45[u32CoreId] = msr;
    93fa:	490a      	ldr	r1, [pc, #40]	; (9424 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x54>)
    93fc:	9b01      	ldr	r3, [sp, #4]
    93fe:	9a00      	ldr	r2, [sp, #0]
    9400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId]++;
    9404:	4a06      	ldr	r2, [pc, #24]	; (9420 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x50>)
    9406:	9b01      	ldr	r3, [sp, #4]
    9408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    940c:	1c5a      	adds	r2, r3, #1
    940e:	4904      	ldr	r1, [pc, #16]	; (9420 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x50>)
    9410:	9b01      	ldr	r3, [sp, #4]
    9412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9416:	bf00      	nop
    9418:	b003      	add	sp, #12
    941a:	f85d fb04 	ldr.w	pc, [sp], #4
    941e:	bf00      	nop
    9420:	1fff90e8 	.word	0x1fff90e8
    9424:	1fff90e4 	.word	0x1fff90e4

00009428 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45(void)
{
    9428:	b500      	push	{lr}
    942a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    942c:	f7f7 fbc8 	bl	bc0 <Sys_GetCoreID>
    9430:	4603      	mov	r3, r0
    9432:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId]--;
    9434:	4a0d      	ldr	r2, [pc, #52]	; (946c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x44>)
    9436:	9b01      	ldr	r3, [sp, #4]
    9438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    943c:	1e5a      	subs	r2, r3, #1
    943e:	490b      	ldr	r1, [pc, #44]	; (946c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x44>)
    9440:	9b01      	ldr	r3, [sp, #4]
    9442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
    9446:	4a0a      	ldr	r2, [pc, #40]	; (9470 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x48>)
    9448:	9b01      	ldr	r3, [sp, #4]
    944a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    944e:	f003 0301 	and.w	r3, r3, #1
    9452:	2b00      	cmp	r3, #0
    9454:	d106      	bne.n	9464 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x3c>
    9456:	4a05      	ldr	r2, [pc, #20]	; (946c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x44>)
    9458:	9b01      	ldr	r3, [sp, #4]
    945a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    945e:	2b00      	cmp	r3, #0
    9460:	d100      	bne.n	9464 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9462:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9464:	bf00      	nop
    9466:	b003      	add	sp, #12
    9468:	f85d fb04 	ldr.w	pc, [sp], #4
    946c:	1fff90e8 	.word	0x1fff90e8
    9470:	1fff90e4 	.word	0x1fff90e4

00009474 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46(void)
{
    9474:	b500      	push	{lr}
    9476:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9478:	f7f7 fba2 	bl	bc0 <Sys_GetCoreID>
    947c:	4603      	mov	r3, r0
    947e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId])
    9480:	4a10      	ldr	r2, [pc, #64]	; (94c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x50>)
    9482:	9b01      	ldr	r3, [sp, #4]
    9484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9488:	2b00      	cmp	r3, #0
    948a:	d10d      	bne.n	94a8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    948c:	f7f7 fab7 	bl	9fe <Gpt_schm_read_msr>
    9490:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9492:	9b00      	ldr	r3, [sp, #0]
    9494:	f003 0301 	and.w	r3, r3, #1
    9498:	2b00      	cmp	r3, #0
    949a:	d100      	bne.n	949e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    949c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_46[u32CoreId] = msr;
    949e:	490a      	ldr	r1, [pc, #40]	; (94c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x54>)
    94a0:	9b01      	ldr	r3, [sp, #4]
    94a2:	9a00      	ldr	r2, [sp, #0]
    94a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId]++;
    94a8:	4a06      	ldr	r2, [pc, #24]	; (94c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x50>)
    94aa:	9b01      	ldr	r3, [sp, #4]
    94ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94b0:	1c5a      	adds	r2, r3, #1
    94b2:	4904      	ldr	r1, [pc, #16]	; (94c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x50>)
    94b4:	9b01      	ldr	r3, [sp, #4]
    94b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    94ba:	bf00      	nop
    94bc:	b003      	add	sp, #12
    94be:	f85d fb04 	ldr.w	pc, [sp], #4
    94c2:	bf00      	nop
    94c4:	1fff90f0 	.word	0x1fff90f0
    94c8:	1fff90ec 	.word	0x1fff90ec

000094cc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46(void)
{
    94cc:	b500      	push	{lr}
    94ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    94d0:	f7f7 fb76 	bl	bc0 <Sys_GetCoreID>
    94d4:	4603      	mov	r3, r0
    94d6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId]--;
    94d8:	4a0d      	ldr	r2, [pc, #52]	; (9510 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x44>)
    94da:	9b01      	ldr	r3, [sp, #4]
    94dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94e0:	1e5a      	subs	r2, r3, #1
    94e2:	490b      	ldr	r1, [pc, #44]	; (9510 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x44>)
    94e4:	9b01      	ldr	r3, [sp, #4]
    94e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
    94ea:	4a0a      	ldr	r2, [pc, #40]	; (9514 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x48>)
    94ec:	9b01      	ldr	r3, [sp, #4]
    94ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94f2:	f003 0301 	and.w	r3, r3, #1
    94f6:	2b00      	cmp	r3, #0
    94f8:	d106      	bne.n	9508 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x3c>
    94fa:	4a05      	ldr	r2, [pc, #20]	; (9510 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x44>)
    94fc:	9b01      	ldr	r3, [sp, #4]
    94fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9502:	2b00      	cmp	r3, #0
    9504:	d100      	bne.n	9508 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9506:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9508:	bf00      	nop
    950a:	b003      	add	sp, #12
    950c:	f85d fb04 	ldr.w	pc, [sp], #4
    9510:	1fff90f0 	.word	0x1fff90f0
    9514:	1fff90ec 	.word	0x1fff90ec

00009518 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50(void)
{
    9518:	b500      	push	{lr}
    951a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    951c:	f7f7 fb50 	bl	bc0 <Sys_GetCoreID>
    9520:	4603      	mov	r3, r0
    9522:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId])
    9524:	4a10      	ldr	r2, [pc, #64]	; (9568 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x50>)
    9526:	9b01      	ldr	r3, [sp, #4]
    9528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    952c:	2b00      	cmp	r3, #0
    952e:	d10d      	bne.n	954c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9530:	f7f7 fa65 	bl	9fe <Gpt_schm_read_msr>
    9534:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9536:	9b00      	ldr	r3, [sp, #0]
    9538:	f003 0301 	and.w	r3, r3, #1
    953c:	2b00      	cmp	r3, #0
    953e:	d100      	bne.n	9542 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9540:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_50[u32CoreId] = msr;
    9542:	490a      	ldr	r1, [pc, #40]	; (956c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x54>)
    9544:	9b01      	ldr	r3, [sp, #4]
    9546:	9a00      	ldr	r2, [sp, #0]
    9548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId]++;
    954c:	4a06      	ldr	r2, [pc, #24]	; (9568 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x50>)
    954e:	9b01      	ldr	r3, [sp, #4]
    9550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9554:	1c5a      	adds	r2, r3, #1
    9556:	4904      	ldr	r1, [pc, #16]	; (9568 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x50>)
    9558:	9b01      	ldr	r3, [sp, #4]
    955a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    955e:	bf00      	nop
    9560:	b003      	add	sp, #12
    9562:	f85d fb04 	ldr.w	pc, [sp], #4
    9566:	bf00      	nop
    9568:	1fff90f8 	.word	0x1fff90f8
    956c:	1fff90f4 	.word	0x1fff90f4

00009570 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50(void)
{
    9570:	b500      	push	{lr}
    9572:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9574:	f7f7 fb24 	bl	bc0 <Sys_GetCoreID>
    9578:	4603      	mov	r3, r0
    957a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId]--;
    957c:	4a0d      	ldr	r2, [pc, #52]	; (95b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x44>)
    957e:	9b01      	ldr	r3, [sp, #4]
    9580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9584:	1e5a      	subs	r2, r3, #1
    9586:	490b      	ldr	r1, [pc, #44]	; (95b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x44>)
    9588:	9b01      	ldr	r3, [sp, #4]
    958a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
    958e:	4a0a      	ldr	r2, [pc, #40]	; (95b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x48>)
    9590:	9b01      	ldr	r3, [sp, #4]
    9592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9596:	f003 0301 	and.w	r3, r3, #1
    959a:	2b00      	cmp	r3, #0
    959c:	d106      	bne.n	95ac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x3c>
    959e:	4a05      	ldr	r2, [pc, #20]	; (95b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x44>)
    95a0:	9b01      	ldr	r3, [sp, #4]
    95a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95a6:	2b00      	cmp	r3, #0
    95a8:	d100      	bne.n	95ac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    95aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    95ac:	bf00      	nop
    95ae:	b003      	add	sp, #12
    95b0:	f85d fb04 	ldr.w	pc, [sp], #4
    95b4:	1fff90f8 	.word	0x1fff90f8
    95b8:	1fff90f4 	.word	0x1fff90f4

000095bc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51(void)
{
    95bc:	b500      	push	{lr}
    95be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    95c0:	f7f7 fafe 	bl	bc0 <Sys_GetCoreID>
    95c4:	4603      	mov	r3, r0
    95c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId])
    95c8:	4a10      	ldr	r2, [pc, #64]	; (960c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x50>)
    95ca:	9b01      	ldr	r3, [sp, #4]
    95cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95d0:	2b00      	cmp	r3, #0
    95d2:	d10d      	bne.n	95f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    95d4:	f7f7 fa13 	bl	9fe <Gpt_schm_read_msr>
    95d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    95da:	9b00      	ldr	r3, [sp, #0]
    95dc:	f003 0301 	and.w	r3, r3, #1
    95e0:	2b00      	cmp	r3, #0
    95e2:	d100      	bne.n	95e6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    95e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_51[u32CoreId] = msr;
    95e6:	490a      	ldr	r1, [pc, #40]	; (9610 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x54>)
    95e8:	9b01      	ldr	r3, [sp, #4]
    95ea:	9a00      	ldr	r2, [sp, #0]
    95ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId]++;
    95f0:	4a06      	ldr	r2, [pc, #24]	; (960c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x50>)
    95f2:	9b01      	ldr	r3, [sp, #4]
    95f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95f8:	1c5a      	adds	r2, r3, #1
    95fa:	4904      	ldr	r1, [pc, #16]	; (960c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x50>)
    95fc:	9b01      	ldr	r3, [sp, #4]
    95fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9602:	bf00      	nop
    9604:	b003      	add	sp, #12
    9606:	f85d fb04 	ldr.w	pc, [sp], #4
    960a:	bf00      	nop
    960c:	1fff9100 	.word	0x1fff9100
    9610:	1fff90fc 	.word	0x1fff90fc

00009614 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51(void)
{
    9614:	b500      	push	{lr}
    9616:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9618:	f7f7 fad2 	bl	bc0 <Sys_GetCoreID>
    961c:	4603      	mov	r3, r0
    961e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId]--;
    9620:	4a0d      	ldr	r2, [pc, #52]	; (9658 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x44>)
    9622:	9b01      	ldr	r3, [sp, #4]
    9624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9628:	1e5a      	subs	r2, r3, #1
    962a:	490b      	ldr	r1, [pc, #44]	; (9658 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x44>)
    962c:	9b01      	ldr	r3, [sp, #4]
    962e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
    9632:	4a0a      	ldr	r2, [pc, #40]	; (965c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x48>)
    9634:	9b01      	ldr	r3, [sp, #4]
    9636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    963a:	f003 0301 	and.w	r3, r3, #1
    963e:	2b00      	cmp	r3, #0
    9640:	d106      	bne.n	9650 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x3c>
    9642:	4a05      	ldr	r2, [pc, #20]	; (9658 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x44>)
    9644:	9b01      	ldr	r3, [sp, #4]
    9646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    964a:	2b00      	cmp	r3, #0
    964c:	d100      	bne.n	9650 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    964e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9650:	bf00      	nop
    9652:	b003      	add	sp, #12
    9654:	f85d fb04 	ldr.w	pc, [sp], #4
    9658:	1fff9100 	.word	0x1fff9100
    965c:	1fff90fc 	.word	0x1fff90fc

00009660 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52(void)
{
    9660:	b500      	push	{lr}
    9662:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9664:	f7f7 faac 	bl	bc0 <Sys_GetCoreID>
    9668:	4603      	mov	r3, r0
    966a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId])
    966c:	4a10      	ldr	r2, [pc, #64]	; (96b0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x50>)
    966e:	9b01      	ldr	r3, [sp, #4]
    9670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9674:	2b00      	cmp	r3, #0
    9676:	d10d      	bne.n	9694 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9678:	f7f7 f9c1 	bl	9fe <Gpt_schm_read_msr>
    967c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    967e:	9b00      	ldr	r3, [sp, #0]
    9680:	f003 0301 	and.w	r3, r3, #1
    9684:	2b00      	cmp	r3, #0
    9686:	d100      	bne.n	968a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9688:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_52[u32CoreId] = msr;
    968a:	490a      	ldr	r1, [pc, #40]	; (96b4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x54>)
    968c:	9b01      	ldr	r3, [sp, #4]
    968e:	9a00      	ldr	r2, [sp, #0]
    9690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId]++;
    9694:	4a06      	ldr	r2, [pc, #24]	; (96b0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x50>)
    9696:	9b01      	ldr	r3, [sp, #4]
    9698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    969c:	1c5a      	adds	r2, r3, #1
    969e:	4904      	ldr	r1, [pc, #16]	; (96b0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x50>)
    96a0:	9b01      	ldr	r3, [sp, #4]
    96a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    96a6:	bf00      	nop
    96a8:	b003      	add	sp, #12
    96aa:	f85d fb04 	ldr.w	pc, [sp], #4
    96ae:	bf00      	nop
    96b0:	1fff9108 	.word	0x1fff9108
    96b4:	1fff9104 	.word	0x1fff9104

000096b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52(void)
{
    96b8:	b500      	push	{lr}
    96ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    96bc:	f7f7 fa80 	bl	bc0 <Sys_GetCoreID>
    96c0:	4603      	mov	r3, r0
    96c2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId]--;
    96c4:	4a0d      	ldr	r2, [pc, #52]	; (96fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x44>)
    96c6:	9b01      	ldr	r3, [sp, #4]
    96c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96cc:	1e5a      	subs	r2, r3, #1
    96ce:	490b      	ldr	r1, [pc, #44]	; (96fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x44>)
    96d0:	9b01      	ldr	r3, [sp, #4]
    96d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_52[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId]))         /*if interrupts were enabled*/
    96d6:	4a0a      	ldr	r2, [pc, #40]	; (9700 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x48>)
    96d8:	9b01      	ldr	r3, [sp, #4]
    96da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96de:	f003 0301 	and.w	r3, r3, #1
    96e2:	2b00      	cmp	r3, #0
    96e4:	d106      	bne.n	96f4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x3c>
    96e6:	4a05      	ldr	r2, [pc, #20]	; (96fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x44>)
    96e8:	9b01      	ldr	r3, [sp, #4]
    96ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96ee:	2b00      	cmp	r3, #0
    96f0:	d100      	bne.n	96f4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    96f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    96f4:	bf00      	nop
    96f6:	b003      	add	sp, #12
    96f8:	f85d fb04 	ldr.w	pc, [sp], #4
    96fc:	1fff9108 	.word	0x1fff9108
    9700:	1fff9104 	.word	0x1fff9104

00009704 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53(void)
{
    9704:	b500      	push	{lr}
    9706:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9708:	f7f7 fa5a 	bl	bc0 <Sys_GetCoreID>
    970c:	4603      	mov	r3, r0
    970e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId])
    9710:	4a10      	ldr	r2, [pc, #64]	; (9754 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x50>)
    9712:	9b01      	ldr	r3, [sp, #4]
    9714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9718:	2b00      	cmp	r3, #0
    971a:	d10d      	bne.n	9738 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    971c:	f7f7 f96f 	bl	9fe <Gpt_schm_read_msr>
    9720:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9722:	9b00      	ldr	r3, [sp, #0]
    9724:	f003 0301 	and.w	r3, r3, #1
    9728:	2b00      	cmp	r3, #0
    972a:	d100      	bne.n	972e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    972c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_53[u32CoreId] = msr;
    972e:	490a      	ldr	r1, [pc, #40]	; (9758 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x54>)
    9730:	9b01      	ldr	r3, [sp, #4]
    9732:	9a00      	ldr	r2, [sp, #0]
    9734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId]++;
    9738:	4a06      	ldr	r2, [pc, #24]	; (9754 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x50>)
    973a:	9b01      	ldr	r3, [sp, #4]
    973c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9740:	1c5a      	adds	r2, r3, #1
    9742:	4904      	ldr	r1, [pc, #16]	; (9754 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x50>)
    9744:	9b01      	ldr	r3, [sp, #4]
    9746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    974a:	bf00      	nop
    974c:	b003      	add	sp, #12
    974e:	f85d fb04 	ldr.w	pc, [sp], #4
    9752:	bf00      	nop
    9754:	1fff9110 	.word	0x1fff9110
    9758:	1fff910c 	.word	0x1fff910c

0000975c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53(void)
{
    975c:	b500      	push	{lr}
    975e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9760:	f7f7 fa2e 	bl	bc0 <Sys_GetCoreID>
    9764:	4603      	mov	r3, r0
    9766:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId]--;
    9768:	4a0d      	ldr	r2, [pc, #52]	; (97a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x44>)
    976a:	9b01      	ldr	r3, [sp, #4]
    976c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9770:	1e5a      	subs	r2, r3, #1
    9772:	490b      	ldr	r1, [pc, #44]	; (97a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x44>)
    9774:	9b01      	ldr	r3, [sp, #4]
    9776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_53[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId]))         /*if interrupts were enabled*/
    977a:	4a0a      	ldr	r2, [pc, #40]	; (97a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x48>)
    977c:	9b01      	ldr	r3, [sp, #4]
    977e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9782:	f003 0301 	and.w	r3, r3, #1
    9786:	2b00      	cmp	r3, #0
    9788:	d106      	bne.n	9798 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x3c>
    978a:	4a05      	ldr	r2, [pc, #20]	; (97a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x44>)
    978c:	9b01      	ldr	r3, [sp, #4]
    978e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9792:	2b00      	cmp	r3, #0
    9794:	d100      	bne.n	9798 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9796:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9798:	bf00      	nop
    979a:	b003      	add	sp, #12
    979c:	f85d fb04 	ldr.w	pc, [sp], #4
    97a0:	1fff9110 	.word	0x1fff9110
    97a4:	1fff910c 	.word	0x1fff910c

000097a8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54(void)
{
    97a8:	b500      	push	{lr}
    97aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    97ac:	f7f7 fa08 	bl	bc0 <Sys_GetCoreID>
    97b0:	4603      	mov	r3, r0
    97b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId])
    97b4:	4a10      	ldr	r2, [pc, #64]	; (97f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x50>)
    97b6:	9b01      	ldr	r3, [sp, #4]
    97b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97bc:	2b00      	cmp	r3, #0
    97be:	d10d      	bne.n	97dc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    97c0:	f7f7 f91d 	bl	9fe <Gpt_schm_read_msr>
    97c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    97c6:	9b00      	ldr	r3, [sp, #0]
    97c8:	f003 0301 	and.w	r3, r3, #1
    97cc:	2b00      	cmp	r3, #0
    97ce:	d100      	bne.n	97d2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    97d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_54[u32CoreId] = msr;
    97d2:	490a      	ldr	r1, [pc, #40]	; (97fc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x54>)
    97d4:	9b01      	ldr	r3, [sp, #4]
    97d6:	9a00      	ldr	r2, [sp, #0]
    97d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId]++;
    97dc:	4a06      	ldr	r2, [pc, #24]	; (97f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x50>)
    97de:	9b01      	ldr	r3, [sp, #4]
    97e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97e4:	1c5a      	adds	r2, r3, #1
    97e6:	4904      	ldr	r1, [pc, #16]	; (97f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x50>)
    97e8:	9b01      	ldr	r3, [sp, #4]
    97ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    97ee:	bf00      	nop
    97f0:	b003      	add	sp, #12
    97f2:	f85d fb04 	ldr.w	pc, [sp], #4
    97f6:	bf00      	nop
    97f8:	1fff9118 	.word	0x1fff9118
    97fc:	1fff9114 	.word	0x1fff9114

00009800 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54(void)
{
    9800:	b500      	push	{lr}
    9802:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9804:	f7f7 f9dc 	bl	bc0 <Sys_GetCoreID>
    9808:	4603      	mov	r3, r0
    980a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId]--;
    980c:	4a0d      	ldr	r2, [pc, #52]	; (9844 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x44>)
    980e:	9b01      	ldr	r3, [sp, #4]
    9810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9814:	1e5a      	subs	r2, r3, #1
    9816:	490b      	ldr	r1, [pc, #44]	; (9844 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x44>)
    9818:	9b01      	ldr	r3, [sp, #4]
    981a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
    981e:	4a0a      	ldr	r2, [pc, #40]	; (9848 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x48>)
    9820:	9b01      	ldr	r3, [sp, #4]
    9822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9826:	f003 0301 	and.w	r3, r3, #1
    982a:	2b00      	cmp	r3, #0
    982c:	d106      	bne.n	983c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x3c>
    982e:	4a05      	ldr	r2, [pc, #20]	; (9844 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x44>)
    9830:	9b01      	ldr	r3, [sp, #4]
    9832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9836:	2b00      	cmp	r3, #0
    9838:	d100      	bne.n	983c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    983a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    983c:	bf00      	nop
    983e:	b003      	add	sp, #12
    9840:	f85d fb04 	ldr.w	pc, [sp], #4
    9844:	1fff9118 	.word	0x1fff9118
    9848:	1fff9114 	.word	0x1fff9114

0000984c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55(void)
{
    984c:	b500      	push	{lr}
    984e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9850:	f7f7 f9b6 	bl	bc0 <Sys_GetCoreID>
    9854:	4603      	mov	r3, r0
    9856:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId])
    9858:	4a10      	ldr	r2, [pc, #64]	; (989c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x50>)
    985a:	9b01      	ldr	r3, [sp, #4]
    985c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9860:	2b00      	cmp	r3, #0
    9862:	d10d      	bne.n	9880 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9864:	f7f7 f8cb 	bl	9fe <Gpt_schm_read_msr>
    9868:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    986a:	9b00      	ldr	r3, [sp, #0]
    986c:	f003 0301 	and.w	r3, r3, #1
    9870:	2b00      	cmp	r3, #0
    9872:	d100      	bne.n	9876 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9874:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_55[u32CoreId] = msr;
    9876:	490a      	ldr	r1, [pc, #40]	; (98a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x54>)
    9878:	9b01      	ldr	r3, [sp, #4]
    987a:	9a00      	ldr	r2, [sp, #0]
    987c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId]++;
    9880:	4a06      	ldr	r2, [pc, #24]	; (989c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x50>)
    9882:	9b01      	ldr	r3, [sp, #4]
    9884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9888:	1c5a      	adds	r2, r3, #1
    988a:	4904      	ldr	r1, [pc, #16]	; (989c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x50>)
    988c:	9b01      	ldr	r3, [sp, #4]
    988e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9892:	bf00      	nop
    9894:	b003      	add	sp, #12
    9896:	f85d fb04 	ldr.w	pc, [sp], #4
    989a:	bf00      	nop
    989c:	1fff9120 	.word	0x1fff9120
    98a0:	1fff911c 	.word	0x1fff911c

000098a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55(void)
{
    98a4:	b500      	push	{lr}
    98a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    98a8:	f7f7 f98a 	bl	bc0 <Sys_GetCoreID>
    98ac:	4603      	mov	r3, r0
    98ae:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId]--;
    98b0:	4a0d      	ldr	r2, [pc, #52]	; (98e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x44>)
    98b2:	9b01      	ldr	r3, [sp, #4]
    98b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98b8:	1e5a      	subs	r2, r3, #1
    98ba:	490b      	ldr	r1, [pc, #44]	; (98e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x44>)
    98bc:	9b01      	ldr	r3, [sp, #4]
    98be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
    98c2:	4a0a      	ldr	r2, [pc, #40]	; (98ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x48>)
    98c4:	9b01      	ldr	r3, [sp, #4]
    98c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98ca:	f003 0301 	and.w	r3, r3, #1
    98ce:	2b00      	cmp	r3, #0
    98d0:	d106      	bne.n	98e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x3c>
    98d2:	4a05      	ldr	r2, [pc, #20]	; (98e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x44>)
    98d4:	9b01      	ldr	r3, [sp, #4]
    98d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98da:	2b00      	cmp	r3, #0
    98dc:	d100      	bne.n	98e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    98de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    98e0:	bf00      	nop
    98e2:	b003      	add	sp, #12
    98e4:	f85d fb04 	ldr.w	pc, [sp], #4
    98e8:	1fff9120 	.word	0x1fff9120
    98ec:	1fff911c 	.word	0x1fff911c

000098f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56(void)
{
    98f0:	b500      	push	{lr}
    98f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    98f4:	f7f7 f964 	bl	bc0 <Sys_GetCoreID>
    98f8:	4603      	mov	r3, r0
    98fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId])
    98fc:	4a10      	ldr	r2, [pc, #64]	; (9940 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x50>)
    98fe:	9b01      	ldr	r3, [sp, #4]
    9900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9904:	2b00      	cmp	r3, #0
    9906:	d10d      	bne.n	9924 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9908:	f7f7 f879 	bl	9fe <Gpt_schm_read_msr>
    990c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    990e:	9b00      	ldr	r3, [sp, #0]
    9910:	f003 0301 	and.w	r3, r3, #1
    9914:	2b00      	cmp	r3, #0
    9916:	d100      	bne.n	991a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9918:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_56[u32CoreId] = msr;
    991a:	490a      	ldr	r1, [pc, #40]	; (9944 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x54>)
    991c:	9b01      	ldr	r3, [sp, #4]
    991e:	9a00      	ldr	r2, [sp, #0]
    9920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId]++;
    9924:	4a06      	ldr	r2, [pc, #24]	; (9940 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x50>)
    9926:	9b01      	ldr	r3, [sp, #4]
    9928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    992c:	1c5a      	adds	r2, r3, #1
    992e:	4904      	ldr	r1, [pc, #16]	; (9940 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x50>)
    9930:	9b01      	ldr	r3, [sp, #4]
    9932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9936:	bf00      	nop
    9938:	b003      	add	sp, #12
    993a:	f85d fb04 	ldr.w	pc, [sp], #4
    993e:	bf00      	nop
    9940:	1fff9128 	.word	0x1fff9128
    9944:	1fff9124 	.word	0x1fff9124

00009948 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56(void)
{
    9948:	b500      	push	{lr}
    994a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    994c:	f7f7 f938 	bl	bc0 <Sys_GetCoreID>
    9950:	4603      	mov	r3, r0
    9952:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId]--;
    9954:	4a0d      	ldr	r2, [pc, #52]	; (998c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x44>)
    9956:	9b01      	ldr	r3, [sp, #4]
    9958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    995c:	1e5a      	subs	r2, r3, #1
    995e:	490b      	ldr	r1, [pc, #44]	; (998c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x44>)
    9960:	9b01      	ldr	r3, [sp, #4]
    9962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
    9966:	4a0a      	ldr	r2, [pc, #40]	; (9990 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x48>)
    9968:	9b01      	ldr	r3, [sp, #4]
    996a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    996e:	f003 0301 	and.w	r3, r3, #1
    9972:	2b00      	cmp	r3, #0
    9974:	d106      	bne.n	9984 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x3c>
    9976:	4a05      	ldr	r2, [pc, #20]	; (998c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x44>)
    9978:	9b01      	ldr	r3, [sp, #4]
    997a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    997e:	2b00      	cmp	r3, #0
    9980:	d100      	bne.n	9984 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9982:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9984:	bf00      	nop
    9986:	b003      	add	sp, #12
    9988:	f85d fb04 	ldr.w	pc, [sp], #4
    998c:	1fff9128 	.word	0x1fff9128
    9990:	1fff9124 	.word	0x1fff9124

00009994 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60(void)
{
    9994:	b500      	push	{lr}
    9996:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9998:	f7f7 f912 	bl	bc0 <Sys_GetCoreID>
    999c:	4603      	mov	r3, r0
    999e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId])
    99a0:	4a10      	ldr	r2, [pc, #64]	; (99e4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x50>)
    99a2:	9b01      	ldr	r3, [sp, #4]
    99a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99a8:	2b00      	cmp	r3, #0
    99aa:	d10d      	bne.n	99c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    99ac:	f7f7 f827 	bl	9fe <Gpt_schm_read_msr>
    99b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    99b2:	9b00      	ldr	r3, [sp, #0]
    99b4:	f003 0301 	and.w	r3, r3, #1
    99b8:	2b00      	cmp	r3, #0
    99ba:	d100      	bne.n	99be <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    99bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_60[u32CoreId] = msr;
    99be:	490a      	ldr	r1, [pc, #40]	; (99e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x54>)
    99c0:	9b01      	ldr	r3, [sp, #4]
    99c2:	9a00      	ldr	r2, [sp, #0]
    99c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId]++;
    99c8:	4a06      	ldr	r2, [pc, #24]	; (99e4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x50>)
    99ca:	9b01      	ldr	r3, [sp, #4]
    99cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99d0:	1c5a      	adds	r2, r3, #1
    99d2:	4904      	ldr	r1, [pc, #16]	; (99e4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x50>)
    99d4:	9b01      	ldr	r3, [sp, #4]
    99d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    99da:	bf00      	nop
    99dc:	b003      	add	sp, #12
    99de:	f85d fb04 	ldr.w	pc, [sp], #4
    99e2:	bf00      	nop
    99e4:	1fff9130 	.word	0x1fff9130
    99e8:	1fff912c 	.word	0x1fff912c

000099ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60(void)
{
    99ec:	b500      	push	{lr}
    99ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    99f0:	f7f7 f8e6 	bl	bc0 <Sys_GetCoreID>
    99f4:	4603      	mov	r3, r0
    99f6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId]--;
    99f8:	4a0d      	ldr	r2, [pc, #52]	; (9a30 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x44>)
    99fa:	9b01      	ldr	r3, [sp, #4]
    99fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a00:	1e5a      	subs	r2, r3, #1
    9a02:	490b      	ldr	r1, [pc, #44]	; (9a30 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x44>)
    9a04:	9b01      	ldr	r3, [sp, #4]
    9a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
    9a0a:	4a0a      	ldr	r2, [pc, #40]	; (9a34 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x48>)
    9a0c:	9b01      	ldr	r3, [sp, #4]
    9a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a12:	f003 0301 	and.w	r3, r3, #1
    9a16:	2b00      	cmp	r3, #0
    9a18:	d106      	bne.n	9a28 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x3c>
    9a1a:	4a05      	ldr	r2, [pc, #20]	; (9a30 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x44>)
    9a1c:	9b01      	ldr	r3, [sp, #4]
    9a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a22:	2b00      	cmp	r3, #0
    9a24:	d100      	bne.n	9a28 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9a26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9a28:	bf00      	nop
    9a2a:	b003      	add	sp, #12
    9a2c:	f85d fb04 	ldr.w	pc, [sp], #4
    9a30:	1fff9130 	.word	0x1fff9130
    9a34:	1fff912c 	.word	0x1fff912c

00009a38 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61(void)
{
    9a38:	b500      	push	{lr}
    9a3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a3c:	f7f7 f8c0 	bl	bc0 <Sys_GetCoreID>
    9a40:	4603      	mov	r3, r0
    9a42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId])
    9a44:	4a10      	ldr	r2, [pc, #64]	; (9a88 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x50>)
    9a46:	9b01      	ldr	r3, [sp, #4]
    9a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a4c:	2b00      	cmp	r3, #0
    9a4e:	d10d      	bne.n	9a6c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9a50:	f7f6 ffd5 	bl	9fe <Gpt_schm_read_msr>
    9a54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9a56:	9b00      	ldr	r3, [sp, #0]
    9a58:	f003 0301 	and.w	r3, r3, #1
    9a5c:	2b00      	cmp	r3, #0
    9a5e:	d100      	bne.n	9a62 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9a60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_61[u32CoreId] = msr;
    9a62:	490a      	ldr	r1, [pc, #40]	; (9a8c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x54>)
    9a64:	9b01      	ldr	r3, [sp, #4]
    9a66:	9a00      	ldr	r2, [sp, #0]
    9a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId]++;
    9a6c:	4a06      	ldr	r2, [pc, #24]	; (9a88 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x50>)
    9a6e:	9b01      	ldr	r3, [sp, #4]
    9a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a74:	1c5a      	adds	r2, r3, #1
    9a76:	4904      	ldr	r1, [pc, #16]	; (9a88 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x50>)
    9a78:	9b01      	ldr	r3, [sp, #4]
    9a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9a7e:	bf00      	nop
    9a80:	b003      	add	sp, #12
    9a82:	f85d fb04 	ldr.w	pc, [sp], #4
    9a86:	bf00      	nop
    9a88:	1fff9138 	.word	0x1fff9138
    9a8c:	1fff9134 	.word	0x1fff9134

00009a90 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61(void)
{
    9a90:	b500      	push	{lr}
    9a92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a94:	f7f7 f894 	bl	bc0 <Sys_GetCoreID>
    9a98:	4603      	mov	r3, r0
    9a9a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId]--;
    9a9c:	4a0d      	ldr	r2, [pc, #52]	; (9ad4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x44>)
    9a9e:	9b01      	ldr	r3, [sp, #4]
    9aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aa4:	1e5a      	subs	r2, r3, #1
    9aa6:	490b      	ldr	r1, [pc, #44]	; (9ad4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x44>)
    9aa8:	9b01      	ldr	r3, [sp, #4]
    9aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
    9aae:	4a0a      	ldr	r2, [pc, #40]	; (9ad8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x48>)
    9ab0:	9b01      	ldr	r3, [sp, #4]
    9ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ab6:	f003 0301 	and.w	r3, r3, #1
    9aba:	2b00      	cmp	r3, #0
    9abc:	d106      	bne.n	9acc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x3c>
    9abe:	4a05      	ldr	r2, [pc, #20]	; (9ad4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x44>)
    9ac0:	9b01      	ldr	r3, [sp, #4]
    9ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ac6:	2b00      	cmp	r3, #0
    9ac8:	d100      	bne.n	9acc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9aca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9acc:	bf00      	nop
    9ace:	b003      	add	sp, #12
    9ad0:	f85d fb04 	ldr.w	pc, [sp], #4
    9ad4:	1fff9138 	.word	0x1fff9138
    9ad8:	1fff9134 	.word	0x1fff9134

00009adc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62(void)
{
    9adc:	b500      	push	{lr}
    9ade:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9ae0:	f7f7 f86e 	bl	bc0 <Sys_GetCoreID>
    9ae4:	4603      	mov	r3, r0
    9ae6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId])
    9ae8:	4a10      	ldr	r2, [pc, #64]	; (9b2c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x50>)
    9aea:	9b01      	ldr	r3, [sp, #4]
    9aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9af0:	2b00      	cmp	r3, #0
    9af2:	d10d      	bne.n	9b10 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9af4:	f7f6 ff83 	bl	9fe <Gpt_schm_read_msr>
    9af8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9afa:	9b00      	ldr	r3, [sp, #0]
    9afc:	f003 0301 	and.w	r3, r3, #1
    9b00:	2b00      	cmp	r3, #0
    9b02:	d100      	bne.n	9b06 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9b04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_62[u32CoreId] = msr;
    9b06:	490a      	ldr	r1, [pc, #40]	; (9b30 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x54>)
    9b08:	9b01      	ldr	r3, [sp, #4]
    9b0a:	9a00      	ldr	r2, [sp, #0]
    9b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId]++;
    9b10:	4a06      	ldr	r2, [pc, #24]	; (9b2c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x50>)
    9b12:	9b01      	ldr	r3, [sp, #4]
    9b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b18:	1c5a      	adds	r2, r3, #1
    9b1a:	4904      	ldr	r1, [pc, #16]	; (9b2c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x50>)
    9b1c:	9b01      	ldr	r3, [sp, #4]
    9b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9b22:	bf00      	nop
    9b24:	b003      	add	sp, #12
    9b26:	f85d fb04 	ldr.w	pc, [sp], #4
    9b2a:	bf00      	nop
    9b2c:	1fff9140 	.word	0x1fff9140
    9b30:	1fff913c 	.word	0x1fff913c

00009b34 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62(void)
{
    9b34:	b500      	push	{lr}
    9b36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b38:	f7f7 f842 	bl	bc0 <Sys_GetCoreID>
    9b3c:	4603      	mov	r3, r0
    9b3e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId]--;
    9b40:	4a0d      	ldr	r2, [pc, #52]	; (9b78 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x44>)
    9b42:	9b01      	ldr	r3, [sp, #4]
    9b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b48:	1e5a      	subs	r2, r3, #1
    9b4a:	490b      	ldr	r1, [pc, #44]	; (9b78 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x44>)
    9b4c:	9b01      	ldr	r3, [sp, #4]
    9b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
    9b52:	4a0a      	ldr	r2, [pc, #40]	; (9b7c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x48>)
    9b54:	9b01      	ldr	r3, [sp, #4]
    9b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b5a:	f003 0301 	and.w	r3, r3, #1
    9b5e:	2b00      	cmp	r3, #0
    9b60:	d106      	bne.n	9b70 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x3c>
    9b62:	4a05      	ldr	r2, [pc, #20]	; (9b78 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x44>)
    9b64:	9b01      	ldr	r3, [sp, #4]
    9b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b6a:	2b00      	cmp	r3, #0
    9b6c:	d100      	bne.n	9b70 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9b6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9b70:	bf00      	nop
    9b72:	b003      	add	sp, #12
    9b74:	f85d fb04 	ldr.w	pc, [sp], #4
    9b78:	1fff9140 	.word	0x1fff9140
    9b7c:	1fff913c 	.word	0x1fff913c

00009b80 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63(void)
{
    9b80:	b500      	push	{lr}
    9b82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b84:	f7f7 f81c 	bl	bc0 <Sys_GetCoreID>
    9b88:	4603      	mov	r3, r0
    9b8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId])
    9b8c:	4a10      	ldr	r2, [pc, #64]	; (9bd0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x50>)
    9b8e:	9b01      	ldr	r3, [sp, #4]
    9b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b94:	2b00      	cmp	r3, #0
    9b96:	d10d      	bne.n	9bb4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9b98:	f7f6 ff31 	bl	9fe <Gpt_schm_read_msr>
    9b9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9b9e:	9b00      	ldr	r3, [sp, #0]
    9ba0:	f003 0301 	and.w	r3, r3, #1
    9ba4:	2b00      	cmp	r3, #0
    9ba6:	d100      	bne.n	9baa <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9ba8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_63[u32CoreId] = msr;
    9baa:	490a      	ldr	r1, [pc, #40]	; (9bd4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x54>)
    9bac:	9b01      	ldr	r3, [sp, #4]
    9bae:	9a00      	ldr	r2, [sp, #0]
    9bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId]++;
    9bb4:	4a06      	ldr	r2, [pc, #24]	; (9bd0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x50>)
    9bb6:	9b01      	ldr	r3, [sp, #4]
    9bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bbc:	1c5a      	adds	r2, r3, #1
    9bbe:	4904      	ldr	r1, [pc, #16]	; (9bd0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x50>)
    9bc0:	9b01      	ldr	r3, [sp, #4]
    9bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9bc6:	bf00      	nop
    9bc8:	b003      	add	sp, #12
    9bca:	f85d fb04 	ldr.w	pc, [sp], #4
    9bce:	bf00      	nop
    9bd0:	1fff9148 	.word	0x1fff9148
    9bd4:	1fff9144 	.word	0x1fff9144

00009bd8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63(void)
{
    9bd8:	b500      	push	{lr}
    9bda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9bdc:	f7f6 fff0 	bl	bc0 <Sys_GetCoreID>
    9be0:	4603      	mov	r3, r0
    9be2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId]--;
    9be4:	4a0d      	ldr	r2, [pc, #52]	; (9c1c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x44>)
    9be6:	9b01      	ldr	r3, [sp, #4]
    9be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bec:	1e5a      	subs	r2, r3, #1
    9bee:	490b      	ldr	r1, [pc, #44]	; (9c1c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x44>)
    9bf0:	9b01      	ldr	r3, [sp, #4]
    9bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
    9bf6:	4a0a      	ldr	r2, [pc, #40]	; (9c20 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x48>)
    9bf8:	9b01      	ldr	r3, [sp, #4]
    9bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bfe:	f003 0301 	and.w	r3, r3, #1
    9c02:	2b00      	cmp	r3, #0
    9c04:	d106      	bne.n	9c14 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x3c>
    9c06:	4a05      	ldr	r2, [pc, #20]	; (9c1c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x44>)
    9c08:	9b01      	ldr	r3, [sp, #4]
    9c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c0e:	2b00      	cmp	r3, #0
    9c10:	d100      	bne.n	9c14 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9c12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9c14:	bf00      	nop
    9c16:	b003      	add	sp, #12
    9c18:	f85d fb04 	ldr.w	pc, [sp], #4
    9c1c:	1fff9148 	.word	0x1fff9148
    9c20:	1fff9144 	.word	0x1fff9144

00009c24 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64(void)
{
    9c24:	b500      	push	{lr}
    9c26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9c28:	f7f6 ffca 	bl	bc0 <Sys_GetCoreID>
    9c2c:	4603      	mov	r3, r0
    9c2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId])
    9c30:	4a10      	ldr	r2, [pc, #64]	; (9c74 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x50>)
    9c32:	9b01      	ldr	r3, [sp, #4]
    9c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c38:	2b00      	cmp	r3, #0
    9c3a:	d10d      	bne.n	9c58 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9c3c:	f7f6 fedf 	bl	9fe <Gpt_schm_read_msr>
    9c40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9c42:	9b00      	ldr	r3, [sp, #0]
    9c44:	f003 0301 	and.w	r3, r3, #1
    9c48:	2b00      	cmp	r3, #0
    9c4a:	d100      	bne.n	9c4e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9c4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_64[u32CoreId] = msr;
    9c4e:	490a      	ldr	r1, [pc, #40]	; (9c78 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x54>)
    9c50:	9b01      	ldr	r3, [sp, #4]
    9c52:	9a00      	ldr	r2, [sp, #0]
    9c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId]++;
    9c58:	4a06      	ldr	r2, [pc, #24]	; (9c74 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x50>)
    9c5a:	9b01      	ldr	r3, [sp, #4]
    9c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c60:	1c5a      	adds	r2, r3, #1
    9c62:	4904      	ldr	r1, [pc, #16]	; (9c74 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x50>)
    9c64:	9b01      	ldr	r3, [sp, #4]
    9c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9c6a:	bf00      	nop
    9c6c:	b003      	add	sp, #12
    9c6e:	f85d fb04 	ldr.w	pc, [sp], #4
    9c72:	bf00      	nop
    9c74:	1fff9150 	.word	0x1fff9150
    9c78:	1fff914c 	.word	0x1fff914c

00009c7c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64(void)
{
    9c7c:	b500      	push	{lr}
    9c7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9c80:	f7f6 ff9e 	bl	bc0 <Sys_GetCoreID>
    9c84:	4603      	mov	r3, r0
    9c86:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId]--;
    9c88:	4a0d      	ldr	r2, [pc, #52]	; (9cc0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x44>)
    9c8a:	9b01      	ldr	r3, [sp, #4]
    9c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c90:	1e5a      	subs	r2, r3, #1
    9c92:	490b      	ldr	r1, [pc, #44]	; (9cc0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x44>)
    9c94:	9b01      	ldr	r3, [sp, #4]
    9c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
    9c9a:	4a0a      	ldr	r2, [pc, #40]	; (9cc4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x48>)
    9c9c:	9b01      	ldr	r3, [sp, #4]
    9c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ca2:	f003 0301 	and.w	r3, r3, #1
    9ca6:	2b00      	cmp	r3, #0
    9ca8:	d106      	bne.n	9cb8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x3c>
    9caa:	4a05      	ldr	r2, [pc, #20]	; (9cc0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x44>)
    9cac:	9b01      	ldr	r3, [sp, #4]
    9cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cb2:	2b00      	cmp	r3, #0
    9cb4:	d100      	bne.n	9cb8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9cb6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9cb8:	bf00      	nop
    9cba:	b003      	add	sp, #12
    9cbc:	f85d fb04 	ldr.w	pc, [sp], #4
    9cc0:	1fff9150 	.word	0x1fff9150
    9cc4:	1fff914c 	.word	0x1fff914c

00009cc8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65(void)
{
    9cc8:	b500      	push	{lr}
    9cca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9ccc:	f7f6 ff78 	bl	bc0 <Sys_GetCoreID>
    9cd0:	4603      	mov	r3, r0
    9cd2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId])
    9cd4:	4a10      	ldr	r2, [pc, #64]	; (9d18 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x50>)
    9cd6:	9b01      	ldr	r3, [sp, #4]
    9cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cdc:	2b00      	cmp	r3, #0
    9cde:	d10d      	bne.n	9cfc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9ce0:	f7f6 fe8d 	bl	9fe <Gpt_schm_read_msr>
    9ce4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9ce6:	9b00      	ldr	r3, [sp, #0]
    9ce8:	f003 0301 	and.w	r3, r3, #1
    9cec:	2b00      	cmp	r3, #0
    9cee:	d100      	bne.n	9cf2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9cf0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_65[u32CoreId] = msr;
    9cf2:	490a      	ldr	r1, [pc, #40]	; (9d1c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x54>)
    9cf4:	9b01      	ldr	r3, [sp, #4]
    9cf6:	9a00      	ldr	r2, [sp, #0]
    9cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId]++;
    9cfc:	4a06      	ldr	r2, [pc, #24]	; (9d18 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x50>)
    9cfe:	9b01      	ldr	r3, [sp, #4]
    9d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d04:	1c5a      	adds	r2, r3, #1
    9d06:	4904      	ldr	r1, [pc, #16]	; (9d18 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x50>)
    9d08:	9b01      	ldr	r3, [sp, #4]
    9d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9d0e:	bf00      	nop
    9d10:	b003      	add	sp, #12
    9d12:	f85d fb04 	ldr.w	pc, [sp], #4
    9d16:	bf00      	nop
    9d18:	1fff9158 	.word	0x1fff9158
    9d1c:	1fff9154 	.word	0x1fff9154

00009d20 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65(void)
{
    9d20:	b500      	push	{lr}
    9d22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9d24:	f7f6 ff4c 	bl	bc0 <Sys_GetCoreID>
    9d28:	4603      	mov	r3, r0
    9d2a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId]--;
    9d2c:	4a0d      	ldr	r2, [pc, #52]	; (9d64 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x44>)
    9d2e:	9b01      	ldr	r3, [sp, #4]
    9d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d34:	1e5a      	subs	r2, r3, #1
    9d36:	490b      	ldr	r1, [pc, #44]	; (9d64 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x44>)
    9d38:	9b01      	ldr	r3, [sp, #4]
    9d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
    9d3e:	4a0a      	ldr	r2, [pc, #40]	; (9d68 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x48>)
    9d40:	9b01      	ldr	r3, [sp, #4]
    9d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d46:	f003 0301 	and.w	r3, r3, #1
    9d4a:	2b00      	cmp	r3, #0
    9d4c:	d106      	bne.n	9d5c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x3c>
    9d4e:	4a05      	ldr	r2, [pc, #20]	; (9d64 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x44>)
    9d50:	9b01      	ldr	r3, [sp, #4]
    9d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d56:	2b00      	cmp	r3, #0
    9d58:	d100      	bne.n	9d5c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9d5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9d5c:	bf00      	nop
    9d5e:	b003      	add	sp, #12
    9d60:	f85d fb04 	ldr.w	pc, [sp], #4
    9d64:	1fff9158 	.word	0x1fff9158
    9d68:	1fff9154 	.word	0x1fff9154

00009d6c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66(void)
{
    9d6c:	b500      	push	{lr}
    9d6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9d70:	f7f6 ff26 	bl	bc0 <Sys_GetCoreID>
    9d74:	4603      	mov	r3, r0
    9d76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId])
    9d78:	4a10      	ldr	r2, [pc, #64]	; (9dbc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x50>)
    9d7a:	9b01      	ldr	r3, [sp, #4]
    9d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d80:	2b00      	cmp	r3, #0
    9d82:	d10d      	bne.n	9da0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9d84:	f7f6 fe3b 	bl	9fe <Gpt_schm_read_msr>
    9d88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9d8a:	9b00      	ldr	r3, [sp, #0]
    9d8c:	f003 0301 	and.w	r3, r3, #1
    9d90:	2b00      	cmp	r3, #0
    9d92:	d100      	bne.n	9d96 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9d94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_66[u32CoreId] = msr;
    9d96:	490a      	ldr	r1, [pc, #40]	; (9dc0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x54>)
    9d98:	9b01      	ldr	r3, [sp, #4]
    9d9a:	9a00      	ldr	r2, [sp, #0]
    9d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId]++;
    9da0:	4a06      	ldr	r2, [pc, #24]	; (9dbc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x50>)
    9da2:	9b01      	ldr	r3, [sp, #4]
    9da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9da8:	1c5a      	adds	r2, r3, #1
    9daa:	4904      	ldr	r1, [pc, #16]	; (9dbc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x50>)
    9dac:	9b01      	ldr	r3, [sp, #4]
    9dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9db2:	bf00      	nop
    9db4:	b003      	add	sp, #12
    9db6:	f85d fb04 	ldr.w	pc, [sp], #4
    9dba:	bf00      	nop
    9dbc:	1fff9160 	.word	0x1fff9160
    9dc0:	1fff915c 	.word	0x1fff915c

00009dc4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66(void)
{
    9dc4:	b500      	push	{lr}
    9dc6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9dc8:	f7f6 fefa 	bl	bc0 <Sys_GetCoreID>
    9dcc:	4603      	mov	r3, r0
    9dce:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId]--;
    9dd0:	4a0d      	ldr	r2, [pc, #52]	; (9e08 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x44>)
    9dd2:	9b01      	ldr	r3, [sp, #4]
    9dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dd8:	1e5a      	subs	r2, r3, #1
    9dda:	490b      	ldr	r1, [pc, #44]	; (9e08 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x44>)
    9ddc:	9b01      	ldr	r3, [sp, #4]
    9dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
    9de2:	4a0a      	ldr	r2, [pc, #40]	; (9e0c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x48>)
    9de4:	9b01      	ldr	r3, [sp, #4]
    9de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dea:	f003 0301 	and.w	r3, r3, #1
    9dee:	2b00      	cmp	r3, #0
    9df0:	d106      	bne.n	9e00 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x3c>
    9df2:	4a05      	ldr	r2, [pc, #20]	; (9e08 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x44>)
    9df4:	9b01      	ldr	r3, [sp, #4]
    9df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dfa:	2b00      	cmp	r3, #0
    9dfc:	d100      	bne.n	9e00 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9dfe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9e00:	bf00      	nop
    9e02:	b003      	add	sp, #12
    9e04:	f85d fb04 	ldr.w	pc, [sp], #4
    9e08:	1fff9160 	.word	0x1fff9160
    9e0c:	1fff915c 	.word	0x1fff915c

00009e10 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67(void)
{
    9e10:	b500      	push	{lr}
    9e12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e14:	f7f6 fed4 	bl	bc0 <Sys_GetCoreID>
    9e18:	4603      	mov	r3, r0
    9e1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId])
    9e1c:	4a10      	ldr	r2, [pc, #64]	; (9e60 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x50>)
    9e1e:	9b01      	ldr	r3, [sp, #4]
    9e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e24:	2b00      	cmp	r3, #0
    9e26:	d10d      	bne.n	9e44 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9e28:	f7f6 fde9 	bl	9fe <Gpt_schm_read_msr>
    9e2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9e2e:	9b00      	ldr	r3, [sp, #0]
    9e30:	f003 0301 	and.w	r3, r3, #1
    9e34:	2b00      	cmp	r3, #0
    9e36:	d100      	bne.n	9e3a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9e38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_67[u32CoreId] = msr;
    9e3a:	490a      	ldr	r1, [pc, #40]	; (9e64 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x54>)
    9e3c:	9b01      	ldr	r3, [sp, #4]
    9e3e:	9a00      	ldr	r2, [sp, #0]
    9e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId]++;
    9e44:	4a06      	ldr	r2, [pc, #24]	; (9e60 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x50>)
    9e46:	9b01      	ldr	r3, [sp, #4]
    9e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e4c:	1c5a      	adds	r2, r3, #1
    9e4e:	4904      	ldr	r1, [pc, #16]	; (9e60 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x50>)
    9e50:	9b01      	ldr	r3, [sp, #4]
    9e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9e56:	bf00      	nop
    9e58:	b003      	add	sp, #12
    9e5a:	f85d fb04 	ldr.w	pc, [sp], #4
    9e5e:	bf00      	nop
    9e60:	1fff9168 	.word	0x1fff9168
    9e64:	1fff9164 	.word	0x1fff9164

00009e68 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67(void)
{
    9e68:	b500      	push	{lr}
    9e6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e6c:	f7f6 fea8 	bl	bc0 <Sys_GetCoreID>
    9e70:	4603      	mov	r3, r0
    9e72:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId]--;
    9e74:	4a0d      	ldr	r2, [pc, #52]	; (9eac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x44>)
    9e76:	9b01      	ldr	r3, [sp, #4]
    9e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e7c:	1e5a      	subs	r2, r3, #1
    9e7e:	490b      	ldr	r1, [pc, #44]	; (9eac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x44>)
    9e80:	9b01      	ldr	r3, [sp, #4]
    9e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
    9e86:	4a0a      	ldr	r2, [pc, #40]	; (9eb0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x48>)
    9e88:	9b01      	ldr	r3, [sp, #4]
    9e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e8e:	f003 0301 	and.w	r3, r3, #1
    9e92:	2b00      	cmp	r3, #0
    9e94:	d106      	bne.n	9ea4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x3c>
    9e96:	4a05      	ldr	r2, [pc, #20]	; (9eac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x44>)
    9e98:	9b01      	ldr	r3, [sp, #4]
    9e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e9e:	2b00      	cmp	r3, #0
    9ea0:	d100      	bne.n	9ea4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9ea2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9ea4:	bf00      	nop
    9ea6:	b003      	add	sp, #12
    9ea8:	f85d fb04 	ldr.w	pc, [sp], #4
    9eac:	1fff9168 	.word	0x1fff9168
    9eb0:	1fff9164 	.word	0x1fff9164

00009eb4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68(void)
{
    9eb4:	b500      	push	{lr}
    9eb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9eb8:	f7f6 fe82 	bl	bc0 <Sys_GetCoreID>
    9ebc:	4603      	mov	r3, r0
    9ebe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId])
    9ec0:	4a10      	ldr	r2, [pc, #64]	; (9f04 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x50>)
    9ec2:	9b01      	ldr	r3, [sp, #4]
    9ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ec8:	2b00      	cmp	r3, #0
    9eca:	d10d      	bne.n	9ee8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9ecc:	f7f6 fd97 	bl	9fe <Gpt_schm_read_msr>
    9ed0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9ed2:	9b00      	ldr	r3, [sp, #0]
    9ed4:	f003 0301 	and.w	r3, r3, #1
    9ed8:	2b00      	cmp	r3, #0
    9eda:	d100      	bne.n	9ede <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9edc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_68[u32CoreId] = msr;
    9ede:	490a      	ldr	r1, [pc, #40]	; (9f08 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x54>)
    9ee0:	9b01      	ldr	r3, [sp, #4]
    9ee2:	9a00      	ldr	r2, [sp, #0]
    9ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId]++;
    9ee8:	4a06      	ldr	r2, [pc, #24]	; (9f04 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x50>)
    9eea:	9b01      	ldr	r3, [sp, #4]
    9eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ef0:	1c5a      	adds	r2, r3, #1
    9ef2:	4904      	ldr	r1, [pc, #16]	; (9f04 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x50>)
    9ef4:	9b01      	ldr	r3, [sp, #4]
    9ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9efa:	bf00      	nop
    9efc:	b003      	add	sp, #12
    9efe:	f85d fb04 	ldr.w	pc, [sp], #4
    9f02:	bf00      	nop
    9f04:	1fff9170 	.word	0x1fff9170
    9f08:	1fff916c 	.word	0x1fff916c

00009f0c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68(void)
{
    9f0c:	b500      	push	{lr}
    9f0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9f10:	f7f6 fe56 	bl	bc0 <Sys_GetCoreID>
    9f14:	4603      	mov	r3, r0
    9f16:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId]--;
    9f18:	4a0d      	ldr	r2, [pc, #52]	; (9f50 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x44>)
    9f1a:	9b01      	ldr	r3, [sp, #4]
    9f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f20:	1e5a      	subs	r2, r3, #1
    9f22:	490b      	ldr	r1, [pc, #44]	; (9f50 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x44>)
    9f24:	9b01      	ldr	r3, [sp, #4]
    9f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
    9f2a:	4a0a      	ldr	r2, [pc, #40]	; (9f54 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x48>)
    9f2c:	9b01      	ldr	r3, [sp, #4]
    9f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f32:	f003 0301 	and.w	r3, r3, #1
    9f36:	2b00      	cmp	r3, #0
    9f38:	d106      	bne.n	9f48 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x3c>
    9f3a:	4a05      	ldr	r2, [pc, #20]	; (9f50 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x44>)
    9f3c:	9b01      	ldr	r3, [sp, #4]
    9f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f42:	2b00      	cmp	r3, #0
    9f44:	d100      	bne.n	9f48 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9f46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9f48:	bf00      	nop
    9f4a:	b003      	add	sp, #12
    9f4c:	f85d fb04 	ldr.w	pc, [sp], #4
    9f50:	1fff9170 	.word	0x1fff9170
    9f54:	1fff916c 	.word	0x1fff916c

00009f58 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69(void)
{
    9f58:	b500      	push	{lr}
    9f5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9f5c:	f7f6 fe30 	bl	bc0 <Sys_GetCoreID>
    9f60:	4603      	mov	r3, r0
    9f62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId])
    9f64:	4a10      	ldr	r2, [pc, #64]	; (9fa8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x50>)
    9f66:	9b01      	ldr	r3, [sp, #4]
    9f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f6c:	2b00      	cmp	r3, #0
    9f6e:	d10d      	bne.n	9f8c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9f70:	f7f6 fd45 	bl	9fe <Gpt_schm_read_msr>
    9f74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9f76:	9b00      	ldr	r3, [sp, #0]
    9f78:	f003 0301 	and.w	r3, r3, #1
    9f7c:	2b00      	cmp	r3, #0
    9f7e:	d100      	bne.n	9f82 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9f80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_69[u32CoreId] = msr;
    9f82:	490a      	ldr	r1, [pc, #40]	; (9fac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x54>)
    9f84:	9b01      	ldr	r3, [sp, #4]
    9f86:	9a00      	ldr	r2, [sp, #0]
    9f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId]++;
    9f8c:	4a06      	ldr	r2, [pc, #24]	; (9fa8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x50>)
    9f8e:	9b01      	ldr	r3, [sp, #4]
    9f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f94:	1c5a      	adds	r2, r3, #1
    9f96:	4904      	ldr	r1, [pc, #16]	; (9fa8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x50>)
    9f98:	9b01      	ldr	r3, [sp, #4]
    9f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9f9e:	bf00      	nop
    9fa0:	b003      	add	sp, #12
    9fa2:	f85d fb04 	ldr.w	pc, [sp], #4
    9fa6:	bf00      	nop
    9fa8:	1fff9178 	.word	0x1fff9178
    9fac:	1fff9174 	.word	0x1fff9174

00009fb0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69(void)
{
    9fb0:	b500      	push	{lr}
    9fb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9fb4:	f7f6 fe04 	bl	bc0 <Sys_GetCoreID>
    9fb8:	4603      	mov	r3, r0
    9fba:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId]--;
    9fbc:	4a0d      	ldr	r2, [pc, #52]	; (9ff4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x44>)
    9fbe:	9b01      	ldr	r3, [sp, #4]
    9fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fc4:	1e5a      	subs	r2, r3, #1
    9fc6:	490b      	ldr	r1, [pc, #44]	; (9ff4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x44>)
    9fc8:	9b01      	ldr	r3, [sp, #4]
    9fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
    9fce:	4a0a      	ldr	r2, [pc, #40]	; (9ff8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x48>)
    9fd0:	9b01      	ldr	r3, [sp, #4]
    9fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fd6:	f003 0301 	and.w	r3, r3, #1
    9fda:	2b00      	cmp	r3, #0
    9fdc:	d106      	bne.n	9fec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x3c>
    9fde:	4a05      	ldr	r2, [pc, #20]	; (9ff4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x44>)
    9fe0:	9b01      	ldr	r3, [sp, #4]
    9fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fe6:	2b00      	cmp	r3, #0
    9fe8:	d100      	bne.n	9fec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9fea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9fec:	bf00      	nop
    9fee:	b003      	add	sp, #12
    9ff0:	f85d fb04 	ldr.w	pc, [sp], #4
    9ff4:	1fff9178 	.word	0x1fff9178
    9ff8:	1fff9174 	.word	0x1fff9174

00009ffc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70(void)
{
    9ffc:	b500      	push	{lr}
    9ffe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a000:	f7f6 fdde 	bl	bc0 <Sys_GetCoreID>
    a004:	4603      	mov	r3, r0
    a006:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId])
    a008:	4a10      	ldr	r2, [pc, #64]	; (a04c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x50>)
    a00a:	9b01      	ldr	r3, [sp, #4]
    a00c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a010:	2b00      	cmp	r3, #0
    a012:	d10d      	bne.n	a030 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a014:	f7f6 fcf3 	bl	9fe <Gpt_schm_read_msr>
    a018:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a01a:	9b00      	ldr	r3, [sp, #0]
    a01c:	f003 0301 	and.w	r3, r3, #1
    a020:	2b00      	cmp	r3, #0
    a022:	d100      	bne.n	a026 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a024:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_70[u32CoreId] = msr;
    a026:	490a      	ldr	r1, [pc, #40]	; (a050 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x54>)
    a028:	9b01      	ldr	r3, [sp, #4]
    a02a:	9a00      	ldr	r2, [sp, #0]
    a02c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId]++;
    a030:	4a06      	ldr	r2, [pc, #24]	; (a04c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x50>)
    a032:	9b01      	ldr	r3, [sp, #4]
    a034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a038:	1c5a      	adds	r2, r3, #1
    a03a:	4904      	ldr	r1, [pc, #16]	; (a04c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x50>)
    a03c:	9b01      	ldr	r3, [sp, #4]
    a03e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a042:	bf00      	nop
    a044:	b003      	add	sp, #12
    a046:	f85d fb04 	ldr.w	pc, [sp], #4
    a04a:	bf00      	nop
    a04c:	1fff9180 	.word	0x1fff9180
    a050:	1fff917c 	.word	0x1fff917c

0000a054 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70(void)
{
    a054:	b500      	push	{lr}
    a056:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a058:	f7f6 fdb2 	bl	bc0 <Sys_GetCoreID>
    a05c:	4603      	mov	r3, r0
    a05e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId]--;
    a060:	4a0d      	ldr	r2, [pc, #52]	; (a098 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x44>)
    a062:	9b01      	ldr	r3, [sp, #4]
    a064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a068:	1e5a      	subs	r2, r3, #1
    a06a:	490b      	ldr	r1, [pc, #44]	; (a098 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x44>)
    a06c:	9b01      	ldr	r3, [sp, #4]
    a06e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
    a072:	4a0a      	ldr	r2, [pc, #40]	; (a09c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x48>)
    a074:	9b01      	ldr	r3, [sp, #4]
    a076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a07a:	f003 0301 	and.w	r3, r3, #1
    a07e:	2b00      	cmp	r3, #0
    a080:	d106      	bne.n	a090 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x3c>
    a082:	4a05      	ldr	r2, [pc, #20]	; (a098 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x44>)
    a084:	9b01      	ldr	r3, [sp, #4]
    a086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a08a:	2b00      	cmp	r3, #0
    a08c:	d100      	bne.n	a090 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a08e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a090:	bf00      	nop
    a092:	b003      	add	sp, #12
    a094:	f85d fb04 	ldr.w	pc, [sp], #4
    a098:	1fff9180 	.word	0x1fff9180
    a09c:	1fff917c 	.word	0x1fff917c

0000a0a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71(void)
{
    a0a0:	b500      	push	{lr}
    a0a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a0a4:	f7f6 fd8c 	bl	bc0 <Sys_GetCoreID>
    a0a8:	4603      	mov	r3, r0
    a0aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId])
    a0ac:	4a10      	ldr	r2, [pc, #64]	; (a0f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x50>)
    a0ae:	9b01      	ldr	r3, [sp, #4]
    a0b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0b4:	2b00      	cmp	r3, #0
    a0b6:	d10d      	bne.n	a0d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a0b8:	f7f6 fca1 	bl	9fe <Gpt_schm_read_msr>
    a0bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a0be:	9b00      	ldr	r3, [sp, #0]
    a0c0:	f003 0301 	and.w	r3, r3, #1
    a0c4:	2b00      	cmp	r3, #0
    a0c6:	d100      	bne.n	a0ca <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a0c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_71[u32CoreId] = msr;
    a0ca:	490a      	ldr	r1, [pc, #40]	; (a0f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x54>)
    a0cc:	9b01      	ldr	r3, [sp, #4]
    a0ce:	9a00      	ldr	r2, [sp, #0]
    a0d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId]++;
    a0d4:	4a06      	ldr	r2, [pc, #24]	; (a0f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x50>)
    a0d6:	9b01      	ldr	r3, [sp, #4]
    a0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0dc:	1c5a      	adds	r2, r3, #1
    a0de:	4904      	ldr	r1, [pc, #16]	; (a0f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x50>)
    a0e0:	9b01      	ldr	r3, [sp, #4]
    a0e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a0e6:	bf00      	nop
    a0e8:	b003      	add	sp, #12
    a0ea:	f85d fb04 	ldr.w	pc, [sp], #4
    a0ee:	bf00      	nop
    a0f0:	1fff9188 	.word	0x1fff9188
    a0f4:	1fff9184 	.word	0x1fff9184

0000a0f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71(void)
{
    a0f8:	b500      	push	{lr}
    a0fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a0fc:	f7f6 fd60 	bl	bc0 <Sys_GetCoreID>
    a100:	4603      	mov	r3, r0
    a102:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId]--;
    a104:	4a0d      	ldr	r2, [pc, #52]	; (a13c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x44>)
    a106:	9b01      	ldr	r3, [sp, #4]
    a108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a10c:	1e5a      	subs	r2, r3, #1
    a10e:	490b      	ldr	r1, [pc, #44]	; (a13c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x44>)
    a110:	9b01      	ldr	r3, [sp, #4]
    a112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
    a116:	4a0a      	ldr	r2, [pc, #40]	; (a140 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x48>)
    a118:	9b01      	ldr	r3, [sp, #4]
    a11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a11e:	f003 0301 	and.w	r3, r3, #1
    a122:	2b00      	cmp	r3, #0
    a124:	d106      	bne.n	a134 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x3c>
    a126:	4a05      	ldr	r2, [pc, #20]	; (a13c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x44>)
    a128:	9b01      	ldr	r3, [sp, #4]
    a12a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a12e:	2b00      	cmp	r3, #0
    a130:	d100      	bne.n	a134 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a132:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a134:	bf00      	nop
    a136:	b003      	add	sp, #12
    a138:	f85d fb04 	ldr.w	pc, [sp], #4
    a13c:	1fff9188 	.word	0x1fff9188
    a140:	1fff9184 	.word	0x1fff9184

0000a144 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72(void)
{
    a144:	b500      	push	{lr}
    a146:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a148:	f7f6 fd3a 	bl	bc0 <Sys_GetCoreID>
    a14c:	4603      	mov	r3, r0
    a14e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId])
    a150:	4a10      	ldr	r2, [pc, #64]	; (a194 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x50>)
    a152:	9b01      	ldr	r3, [sp, #4]
    a154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a158:	2b00      	cmp	r3, #0
    a15a:	d10d      	bne.n	a178 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a15c:	f7f6 fc4f 	bl	9fe <Gpt_schm_read_msr>
    a160:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a162:	9b00      	ldr	r3, [sp, #0]
    a164:	f003 0301 	and.w	r3, r3, #1
    a168:	2b00      	cmp	r3, #0
    a16a:	d100      	bne.n	a16e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a16c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_72[u32CoreId] = msr;
    a16e:	490a      	ldr	r1, [pc, #40]	; (a198 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x54>)
    a170:	9b01      	ldr	r3, [sp, #4]
    a172:	9a00      	ldr	r2, [sp, #0]
    a174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId]++;
    a178:	4a06      	ldr	r2, [pc, #24]	; (a194 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x50>)
    a17a:	9b01      	ldr	r3, [sp, #4]
    a17c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a180:	1c5a      	adds	r2, r3, #1
    a182:	4904      	ldr	r1, [pc, #16]	; (a194 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x50>)
    a184:	9b01      	ldr	r3, [sp, #4]
    a186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a18a:	bf00      	nop
    a18c:	b003      	add	sp, #12
    a18e:	f85d fb04 	ldr.w	pc, [sp], #4
    a192:	bf00      	nop
    a194:	1fff9190 	.word	0x1fff9190
    a198:	1fff918c 	.word	0x1fff918c

0000a19c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72(void)
{
    a19c:	b500      	push	{lr}
    a19e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a1a0:	f7f6 fd0e 	bl	bc0 <Sys_GetCoreID>
    a1a4:	4603      	mov	r3, r0
    a1a6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId]--;
    a1a8:	4a0d      	ldr	r2, [pc, #52]	; (a1e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x44>)
    a1aa:	9b01      	ldr	r3, [sp, #4]
    a1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1b0:	1e5a      	subs	r2, r3, #1
    a1b2:	490b      	ldr	r1, [pc, #44]	; (a1e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x44>)
    a1b4:	9b01      	ldr	r3, [sp, #4]
    a1b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
    a1ba:	4a0a      	ldr	r2, [pc, #40]	; (a1e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x48>)
    a1bc:	9b01      	ldr	r3, [sp, #4]
    a1be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1c2:	f003 0301 	and.w	r3, r3, #1
    a1c6:	2b00      	cmp	r3, #0
    a1c8:	d106      	bne.n	a1d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x3c>
    a1ca:	4a05      	ldr	r2, [pc, #20]	; (a1e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x44>)
    a1cc:	9b01      	ldr	r3, [sp, #4]
    a1ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1d2:	2b00      	cmp	r3, #0
    a1d4:	d100      	bne.n	a1d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a1d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a1d8:	bf00      	nop
    a1da:	b003      	add	sp, #12
    a1dc:	f85d fb04 	ldr.w	pc, [sp], #4
    a1e0:	1fff9190 	.word	0x1fff9190
    a1e4:	1fff918c 	.word	0x1fff918c

0000a1e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73(void)
{
    a1e8:	b500      	push	{lr}
    a1ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a1ec:	f7f6 fce8 	bl	bc0 <Sys_GetCoreID>
    a1f0:	4603      	mov	r3, r0
    a1f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId])
    a1f4:	4a10      	ldr	r2, [pc, #64]	; (a238 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x50>)
    a1f6:	9b01      	ldr	r3, [sp, #4]
    a1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1fc:	2b00      	cmp	r3, #0
    a1fe:	d10d      	bne.n	a21c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a200:	f7f6 fbfd 	bl	9fe <Gpt_schm_read_msr>
    a204:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a206:	9b00      	ldr	r3, [sp, #0]
    a208:	f003 0301 	and.w	r3, r3, #1
    a20c:	2b00      	cmp	r3, #0
    a20e:	d100      	bne.n	a212 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a210:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_73[u32CoreId] = msr;
    a212:	490a      	ldr	r1, [pc, #40]	; (a23c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x54>)
    a214:	9b01      	ldr	r3, [sp, #4]
    a216:	9a00      	ldr	r2, [sp, #0]
    a218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId]++;
    a21c:	4a06      	ldr	r2, [pc, #24]	; (a238 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x50>)
    a21e:	9b01      	ldr	r3, [sp, #4]
    a220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a224:	1c5a      	adds	r2, r3, #1
    a226:	4904      	ldr	r1, [pc, #16]	; (a238 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x50>)
    a228:	9b01      	ldr	r3, [sp, #4]
    a22a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a22e:	bf00      	nop
    a230:	b003      	add	sp, #12
    a232:	f85d fb04 	ldr.w	pc, [sp], #4
    a236:	bf00      	nop
    a238:	1fff9198 	.word	0x1fff9198
    a23c:	1fff9194 	.word	0x1fff9194

0000a240 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73(void)
{
    a240:	b500      	push	{lr}
    a242:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a244:	f7f6 fcbc 	bl	bc0 <Sys_GetCoreID>
    a248:	4603      	mov	r3, r0
    a24a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId]--;
    a24c:	4a0d      	ldr	r2, [pc, #52]	; (a284 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x44>)
    a24e:	9b01      	ldr	r3, [sp, #4]
    a250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a254:	1e5a      	subs	r2, r3, #1
    a256:	490b      	ldr	r1, [pc, #44]	; (a284 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x44>)
    a258:	9b01      	ldr	r3, [sp, #4]
    a25a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
    a25e:	4a0a      	ldr	r2, [pc, #40]	; (a288 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x48>)
    a260:	9b01      	ldr	r3, [sp, #4]
    a262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a266:	f003 0301 	and.w	r3, r3, #1
    a26a:	2b00      	cmp	r3, #0
    a26c:	d106      	bne.n	a27c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x3c>
    a26e:	4a05      	ldr	r2, [pc, #20]	; (a284 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x44>)
    a270:	9b01      	ldr	r3, [sp, #4]
    a272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a276:	2b00      	cmp	r3, #0
    a278:	d100      	bne.n	a27c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a27a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a27c:	bf00      	nop
    a27e:	b003      	add	sp, #12
    a280:	f85d fb04 	ldr.w	pc, [sp], #4
    a284:	1fff9198 	.word	0x1fff9198
    a288:	1fff9194 	.word	0x1fff9194

0000a28c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    a28c:	b500      	push	{lr}
    a28e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a290:	f7f6 fc96 	bl	bc0 <Sys_GetCoreID>
    a294:	4603      	mov	r3, r0
    a296:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    a298:	4a10      	ldr	r2, [pc, #64]	; (a2dc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    a29a:	9b01      	ldr	r3, [sp, #4]
    a29c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2a0:	2b00      	cmp	r3, #0
    a2a2:	d10d      	bne.n	a2c0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a2a4:	f7f6 fbb4 	bl	a10 <Mcu_schm_read_msr>
    a2a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a2aa:	9b00      	ldr	r3, [sp, #0]
    a2ac:	f003 0301 	and.w	r3, r3, #1
    a2b0:	2b00      	cmp	r3, #0
    a2b2:	d100      	bne.n	a2b6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a2b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    a2b6:	490a      	ldr	r1, [pc, #40]	; (a2e0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    a2b8:	9b01      	ldr	r3, [sp, #4]
    a2ba:	9a00      	ldr	r2, [sp, #0]
    a2bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    a2c0:	4a06      	ldr	r2, [pc, #24]	; (a2dc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    a2c2:	9b01      	ldr	r3, [sp, #4]
    a2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2c8:	1c5a      	adds	r2, r3, #1
    a2ca:	4904      	ldr	r1, [pc, #16]	; (a2dc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    a2cc:	9b01      	ldr	r3, [sp, #4]
    a2ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a2d2:	bf00      	nop
    a2d4:	b003      	add	sp, #12
    a2d6:	f85d fb04 	ldr.w	pc, [sp], #4
    a2da:	bf00      	nop
    a2dc:	1fff91a0 	.word	0x1fff91a0
    a2e0:	1fff919c 	.word	0x1fff919c

0000a2e4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    a2e4:	b500      	push	{lr}
    a2e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a2e8:	f7f6 fc6a 	bl	bc0 <Sys_GetCoreID>
    a2ec:	4603      	mov	r3, r0
    a2ee:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    a2f0:	4a0d      	ldr	r2, [pc, #52]	; (a328 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    a2f2:	9b01      	ldr	r3, [sp, #4]
    a2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2f8:	1e5a      	subs	r2, r3, #1
    a2fa:	490b      	ldr	r1, [pc, #44]	; (a328 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    a2fc:	9b01      	ldr	r3, [sp, #4]
    a2fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    a302:	4a0a      	ldr	r2, [pc, #40]	; (a32c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    a304:	9b01      	ldr	r3, [sp, #4]
    a306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a30a:	f003 0301 	and.w	r3, r3, #1
    a30e:	2b00      	cmp	r3, #0
    a310:	d106      	bne.n	a320 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    a312:	4a05      	ldr	r2, [pc, #20]	; (a328 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    a314:	9b01      	ldr	r3, [sp, #4]
    a316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a31a:	2b00      	cmp	r3, #0
    a31c:	d100      	bne.n	a320 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a31e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a320:	bf00      	nop
    a322:	b003      	add	sp, #12
    a324:	f85d fb04 	ldr.w	pc, [sp], #4
    a328:	1fff91a0 	.word	0x1fff91a0
    a32c:	1fff919c 	.word	0x1fff919c

0000a330 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    a330:	b500      	push	{lr}
    a332:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a334:	f7f6 fc44 	bl	bc0 <Sys_GetCoreID>
    a338:	4603      	mov	r3, r0
    a33a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    a33c:	4a10      	ldr	r2, [pc, #64]	; (a380 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    a33e:	9b01      	ldr	r3, [sp, #4]
    a340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a344:	2b00      	cmp	r3, #0
    a346:	d10d      	bne.n	a364 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a348:	f7f6 fb62 	bl	a10 <Mcu_schm_read_msr>
    a34c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a34e:	9b00      	ldr	r3, [sp, #0]
    a350:	f003 0301 	and.w	r3, r3, #1
    a354:	2b00      	cmp	r3, #0
    a356:	d100      	bne.n	a35a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a358:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    a35a:	490a      	ldr	r1, [pc, #40]	; (a384 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    a35c:	9b01      	ldr	r3, [sp, #4]
    a35e:	9a00      	ldr	r2, [sp, #0]
    a360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    a364:	4a06      	ldr	r2, [pc, #24]	; (a380 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    a366:	9b01      	ldr	r3, [sp, #4]
    a368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a36c:	1c5a      	adds	r2, r3, #1
    a36e:	4904      	ldr	r1, [pc, #16]	; (a380 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    a370:	9b01      	ldr	r3, [sp, #4]
    a372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a376:	bf00      	nop
    a378:	b003      	add	sp, #12
    a37a:	f85d fb04 	ldr.w	pc, [sp], #4
    a37e:	bf00      	nop
    a380:	1fff91a8 	.word	0x1fff91a8
    a384:	1fff91a4 	.word	0x1fff91a4

0000a388 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    a388:	b500      	push	{lr}
    a38a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a38c:	f7f6 fc18 	bl	bc0 <Sys_GetCoreID>
    a390:	4603      	mov	r3, r0
    a392:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    a394:	4a0d      	ldr	r2, [pc, #52]	; (a3cc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    a396:	9b01      	ldr	r3, [sp, #4]
    a398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a39c:	1e5a      	subs	r2, r3, #1
    a39e:	490b      	ldr	r1, [pc, #44]	; (a3cc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    a3a0:	9b01      	ldr	r3, [sp, #4]
    a3a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    a3a6:	4a0a      	ldr	r2, [pc, #40]	; (a3d0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    a3a8:	9b01      	ldr	r3, [sp, #4]
    a3aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3ae:	f003 0301 	and.w	r3, r3, #1
    a3b2:	2b00      	cmp	r3, #0
    a3b4:	d106      	bne.n	a3c4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    a3b6:	4a05      	ldr	r2, [pc, #20]	; (a3cc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    a3b8:	9b01      	ldr	r3, [sp, #4]
    a3ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3be:	2b00      	cmp	r3, #0
    a3c0:	d100      	bne.n	a3c4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a3c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a3c4:	bf00      	nop
    a3c6:	b003      	add	sp, #12
    a3c8:	f85d fb04 	ldr.w	pc, [sp], #4
    a3cc:	1fff91a8 	.word	0x1fff91a8
    a3d0:	1fff91a4 	.word	0x1fff91a4

0000a3d4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    a3d4:	b500      	push	{lr}
    a3d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a3d8:	f7f6 fbf2 	bl	bc0 <Sys_GetCoreID>
    a3dc:	4603      	mov	r3, r0
    a3de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    a3e0:	4a10      	ldr	r2, [pc, #64]	; (a424 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    a3e2:	9b01      	ldr	r3, [sp, #4]
    a3e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3e8:	2b00      	cmp	r3, #0
    a3ea:	d10d      	bne.n	a408 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a3ec:	f7f6 fb10 	bl	a10 <Mcu_schm_read_msr>
    a3f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a3f2:	9b00      	ldr	r3, [sp, #0]
    a3f4:	f003 0301 	and.w	r3, r3, #1
    a3f8:	2b00      	cmp	r3, #0
    a3fa:	d100      	bne.n	a3fe <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a3fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    a3fe:	490a      	ldr	r1, [pc, #40]	; (a428 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    a400:	9b01      	ldr	r3, [sp, #4]
    a402:	9a00      	ldr	r2, [sp, #0]
    a404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    a408:	4a06      	ldr	r2, [pc, #24]	; (a424 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    a40a:	9b01      	ldr	r3, [sp, #4]
    a40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a410:	1c5a      	adds	r2, r3, #1
    a412:	4904      	ldr	r1, [pc, #16]	; (a424 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    a414:	9b01      	ldr	r3, [sp, #4]
    a416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a41a:	bf00      	nop
    a41c:	b003      	add	sp, #12
    a41e:	f85d fb04 	ldr.w	pc, [sp], #4
    a422:	bf00      	nop
    a424:	1fff91b0 	.word	0x1fff91b0
    a428:	1fff91ac 	.word	0x1fff91ac

0000a42c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    a42c:	b500      	push	{lr}
    a42e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a430:	f7f6 fbc6 	bl	bc0 <Sys_GetCoreID>
    a434:	4603      	mov	r3, r0
    a436:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    a438:	4a0d      	ldr	r2, [pc, #52]	; (a470 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    a43a:	9b01      	ldr	r3, [sp, #4]
    a43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a440:	1e5a      	subs	r2, r3, #1
    a442:	490b      	ldr	r1, [pc, #44]	; (a470 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    a444:	9b01      	ldr	r3, [sp, #4]
    a446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    a44a:	4a0a      	ldr	r2, [pc, #40]	; (a474 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    a44c:	9b01      	ldr	r3, [sp, #4]
    a44e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a452:	f003 0301 	and.w	r3, r3, #1
    a456:	2b00      	cmp	r3, #0
    a458:	d106      	bne.n	a468 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    a45a:	4a05      	ldr	r2, [pc, #20]	; (a470 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    a45c:	9b01      	ldr	r3, [sp, #4]
    a45e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a462:	2b00      	cmp	r3, #0
    a464:	d100      	bne.n	a468 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a466:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a468:	bf00      	nop
    a46a:	b003      	add	sp, #12
    a46c:	f85d fb04 	ldr.w	pc, [sp], #4
    a470:	1fff91b0 	.word	0x1fff91b0
    a474:	1fff91ac 	.word	0x1fff91ac

0000a478 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    a478:	b500      	push	{lr}
    a47a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a47c:	f7f6 fba0 	bl	bc0 <Sys_GetCoreID>
    a480:	4603      	mov	r3, r0
    a482:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    a484:	4a10      	ldr	r2, [pc, #64]	; (a4c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    a486:	9b01      	ldr	r3, [sp, #4]
    a488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a48c:	2b00      	cmp	r3, #0
    a48e:	d10d      	bne.n	a4ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a490:	f7f6 fac7 	bl	a22 <Port_schm_read_msr>
    a494:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a496:	9b00      	ldr	r3, [sp, #0]
    a498:	f003 0301 	and.w	r3, r3, #1
    a49c:	2b00      	cmp	r3, #0
    a49e:	d100      	bne.n	a4a2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a4a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    a4a2:	490a      	ldr	r1, [pc, #40]	; (a4cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    a4a4:	9b01      	ldr	r3, [sp, #4]
    a4a6:	9a00      	ldr	r2, [sp, #0]
    a4a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    a4ac:	4a06      	ldr	r2, [pc, #24]	; (a4c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    a4ae:	9b01      	ldr	r3, [sp, #4]
    a4b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4b4:	1c5a      	adds	r2, r3, #1
    a4b6:	4904      	ldr	r1, [pc, #16]	; (a4c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    a4b8:	9b01      	ldr	r3, [sp, #4]
    a4ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a4be:	bf00      	nop
    a4c0:	b003      	add	sp, #12
    a4c2:	f85d fb04 	ldr.w	pc, [sp], #4
    a4c6:	bf00      	nop
    a4c8:	1fff91b8 	.word	0x1fff91b8
    a4cc:	1fff91b4 	.word	0x1fff91b4

0000a4d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    a4d0:	b500      	push	{lr}
    a4d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a4d4:	f7f6 fb74 	bl	bc0 <Sys_GetCoreID>
    a4d8:	4603      	mov	r3, r0
    a4da:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    a4dc:	4a0d      	ldr	r2, [pc, #52]	; (a514 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    a4de:	9b01      	ldr	r3, [sp, #4]
    a4e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4e4:	1e5a      	subs	r2, r3, #1
    a4e6:	490b      	ldr	r1, [pc, #44]	; (a514 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    a4e8:	9b01      	ldr	r3, [sp, #4]
    a4ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    a4ee:	4a0a      	ldr	r2, [pc, #40]	; (a518 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    a4f0:	9b01      	ldr	r3, [sp, #4]
    a4f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4f6:	f003 0301 	and.w	r3, r3, #1
    a4fa:	2b00      	cmp	r3, #0
    a4fc:	d106      	bne.n	a50c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    a4fe:	4a05      	ldr	r2, [pc, #20]	; (a514 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    a500:	9b01      	ldr	r3, [sp, #4]
    a502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a506:	2b00      	cmp	r3, #0
    a508:	d100      	bne.n	a50c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a50a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a50c:	bf00      	nop
    a50e:	b003      	add	sp, #12
    a510:	f85d fb04 	ldr.w	pc, [sp], #4
    a514:	1fff91b8 	.word	0x1fff91b8
    a518:	1fff91b4 	.word	0x1fff91b4

0000a51c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    a51c:	b500      	push	{lr}
    a51e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a520:	f7f6 fb4e 	bl	bc0 <Sys_GetCoreID>
    a524:	4603      	mov	r3, r0
    a526:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    a528:	4a10      	ldr	r2, [pc, #64]	; (a56c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    a52a:	9b01      	ldr	r3, [sp, #4]
    a52c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a530:	2b00      	cmp	r3, #0
    a532:	d10d      	bne.n	a550 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a534:	f7f6 fa75 	bl	a22 <Port_schm_read_msr>
    a538:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a53a:	9b00      	ldr	r3, [sp, #0]
    a53c:	f003 0301 	and.w	r3, r3, #1
    a540:	2b00      	cmp	r3, #0
    a542:	d100      	bne.n	a546 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a544:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    a546:	490a      	ldr	r1, [pc, #40]	; (a570 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    a548:	9b01      	ldr	r3, [sp, #4]
    a54a:	9a00      	ldr	r2, [sp, #0]
    a54c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    a550:	4a06      	ldr	r2, [pc, #24]	; (a56c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    a552:	9b01      	ldr	r3, [sp, #4]
    a554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a558:	1c5a      	adds	r2, r3, #1
    a55a:	4904      	ldr	r1, [pc, #16]	; (a56c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    a55c:	9b01      	ldr	r3, [sp, #4]
    a55e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a562:	bf00      	nop
    a564:	b003      	add	sp, #12
    a566:	f85d fb04 	ldr.w	pc, [sp], #4
    a56a:	bf00      	nop
    a56c:	1fff91c0 	.word	0x1fff91c0
    a570:	1fff91bc 	.word	0x1fff91bc

0000a574 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    a574:	b500      	push	{lr}
    a576:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a578:	f7f6 fb22 	bl	bc0 <Sys_GetCoreID>
    a57c:	4603      	mov	r3, r0
    a57e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    a580:	4a0d      	ldr	r2, [pc, #52]	; (a5b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    a582:	9b01      	ldr	r3, [sp, #4]
    a584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a588:	1e5a      	subs	r2, r3, #1
    a58a:	490b      	ldr	r1, [pc, #44]	; (a5b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    a58c:	9b01      	ldr	r3, [sp, #4]
    a58e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    a592:	4a0a      	ldr	r2, [pc, #40]	; (a5bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    a594:	9b01      	ldr	r3, [sp, #4]
    a596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a59a:	f003 0301 	and.w	r3, r3, #1
    a59e:	2b00      	cmp	r3, #0
    a5a0:	d106      	bne.n	a5b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    a5a2:	4a05      	ldr	r2, [pc, #20]	; (a5b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    a5a4:	9b01      	ldr	r3, [sp, #4]
    a5a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5aa:	2b00      	cmp	r3, #0
    a5ac:	d100      	bne.n	a5b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a5ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a5b0:	bf00      	nop
    a5b2:	b003      	add	sp, #12
    a5b4:	f85d fb04 	ldr.w	pc, [sp], #4
    a5b8:	1fff91c0 	.word	0x1fff91c0
    a5bc:	1fff91bc 	.word	0x1fff91bc

0000a5c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    a5c0:	b500      	push	{lr}
    a5c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a5c4:	f7f6 fafc 	bl	bc0 <Sys_GetCoreID>
    a5c8:	4603      	mov	r3, r0
    a5ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    a5cc:	4a10      	ldr	r2, [pc, #64]	; (a610 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    a5ce:	9b01      	ldr	r3, [sp, #4]
    a5d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5d4:	2b00      	cmp	r3, #0
    a5d6:	d10d      	bne.n	a5f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a5d8:	f7f6 fa23 	bl	a22 <Port_schm_read_msr>
    a5dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a5de:	9b00      	ldr	r3, [sp, #0]
    a5e0:	f003 0301 	and.w	r3, r3, #1
    a5e4:	2b00      	cmp	r3, #0
    a5e6:	d100      	bne.n	a5ea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a5e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    a5ea:	490a      	ldr	r1, [pc, #40]	; (a614 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    a5ec:	9b01      	ldr	r3, [sp, #4]
    a5ee:	9a00      	ldr	r2, [sp, #0]
    a5f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    a5f4:	4a06      	ldr	r2, [pc, #24]	; (a610 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    a5f6:	9b01      	ldr	r3, [sp, #4]
    a5f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5fc:	1c5a      	adds	r2, r3, #1
    a5fe:	4904      	ldr	r1, [pc, #16]	; (a610 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    a600:	9b01      	ldr	r3, [sp, #4]
    a602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a606:	bf00      	nop
    a608:	b003      	add	sp, #12
    a60a:	f85d fb04 	ldr.w	pc, [sp], #4
    a60e:	bf00      	nop
    a610:	1fff91c8 	.word	0x1fff91c8
    a614:	1fff91c4 	.word	0x1fff91c4

0000a618 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    a618:	b500      	push	{lr}
    a61a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a61c:	f7f6 fad0 	bl	bc0 <Sys_GetCoreID>
    a620:	4603      	mov	r3, r0
    a622:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    a624:	4a0d      	ldr	r2, [pc, #52]	; (a65c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    a626:	9b01      	ldr	r3, [sp, #4]
    a628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a62c:	1e5a      	subs	r2, r3, #1
    a62e:	490b      	ldr	r1, [pc, #44]	; (a65c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    a630:	9b01      	ldr	r3, [sp, #4]
    a632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    a636:	4a0a      	ldr	r2, [pc, #40]	; (a660 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    a638:	9b01      	ldr	r3, [sp, #4]
    a63a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a63e:	f003 0301 	and.w	r3, r3, #1
    a642:	2b00      	cmp	r3, #0
    a644:	d106      	bne.n	a654 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    a646:	4a05      	ldr	r2, [pc, #20]	; (a65c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    a648:	9b01      	ldr	r3, [sp, #4]
    a64a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a64e:	2b00      	cmp	r3, #0
    a650:	d100      	bne.n	a654 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a652:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a654:	bf00      	nop
    a656:	b003      	add	sp, #12
    a658:	f85d fb04 	ldr.w	pc, [sp], #4
    a65c:	1fff91c8 	.word	0x1fff91c8
    a660:	1fff91c4 	.word	0x1fff91c4

0000a664 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    a664:	b500      	push	{lr}
    a666:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a668:	f7f6 faaa 	bl	bc0 <Sys_GetCoreID>
    a66c:	4603      	mov	r3, r0
    a66e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    a670:	4a10      	ldr	r2, [pc, #64]	; (a6b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    a672:	9b01      	ldr	r3, [sp, #4]
    a674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a678:	2b00      	cmp	r3, #0
    a67a:	d10d      	bne.n	a698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a67c:	f7f6 f9d1 	bl	a22 <Port_schm_read_msr>
    a680:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a682:	9b00      	ldr	r3, [sp, #0]
    a684:	f003 0301 	and.w	r3, r3, #1
    a688:	2b00      	cmp	r3, #0
    a68a:	d100      	bne.n	a68e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a68c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    a68e:	490a      	ldr	r1, [pc, #40]	; (a6b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    a690:	9b01      	ldr	r3, [sp, #4]
    a692:	9a00      	ldr	r2, [sp, #0]
    a694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    a698:	4a06      	ldr	r2, [pc, #24]	; (a6b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    a69a:	9b01      	ldr	r3, [sp, #4]
    a69c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6a0:	1c5a      	adds	r2, r3, #1
    a6a2:	4904      	ldr	r1, [pc, #16]	; (a6b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    a6a4:	9b01      	ldr	r3, [sp, #4]
    a6a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a6aa:	bf00      	nop
    a6ac:	b003      	add	sp, #12
    a6ae:	f85d fb04 	ldr.w	pc, [sp], #4
    a6b2:	bf00      	nop
    a6b4:	1fff91d0 	.word	0x1fff91d0
    a6b8:	1fff91cc 	.word	0x1fff91cc

0000a6bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    a6bc:	b500      	push	{lr}
    a6be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a6c0:	f7f6 fa7e 	bl	bc0 <Sys_GetCoreID>
    a6c4:	4603      	mov	r3, r0
    a6c6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    a6c8:	4a0d      	ldr	r2, [pc, #52]	; (a700 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    a6ca:	9b01      	ldr	r3, [sp, #4]
    a6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6d0:	1e5a      	subs	r2, r3, #1
    a6d2:	490b      	ldr	r1, [pc, #44]	; (a700 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    a6d4:	9b01      	ldr	r3, [sp, #4]
    a6d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    a6da:	4a0a      	ldr	r2, [pc, #40]	; (a704 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    a6dc:	9b01      	ldr	r3, [sp, #4]
    a6de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6e2:	f003 0301 	and.w	r3, r3, #1
    a6e6:	2b00      	cmp	r3, #0
    a6e8:	d106      	bne.n	a6f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    a6ea:	4a05      	ldr	r2, [pc, #20]	; (a700 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    a6ec:	9b01      	ldr	r3, [sp, #4]
    a6ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6f2:	2b00      	cmp	r3, #0
    a6f4:	d100      	bne.n	a6f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a6f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a6f8:	bf00      	nop
    a6fa:	b003      	add	sp, #12
    a6fc:	f85d fb04 	ldr.w	pc, [sp], #4
    a700:	1fff91d0 	.word	0x1fff91d0
    a704:	1fff91cc 	.word	0x1fff91cc

0000a708 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    a708:	b500      	push	{lr}
    a70a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a70c:	f7f6 fa58 	bl	bc0 <Sys_GetCoreID>
    a710:	4603      	mov	r3, r0
    a712:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    a714:	4a10      	ldr	r2, [pc, #64]	; (a758 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    a716:	9b01      	ldr	r3, [sp, #4]
    a718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a71c:	2b00      	cmp	r3, #0
    a71e:	d10d      	bne.n	a73c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a720:	f7f6 f97f 	bl	a22 <Port_schm_read_msr>
    a724:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a726:	9b00      	ldr	r3, [sp, #0]
    a728:	f003 0301 	and.w	r3, r3, #1
    a72c:	2b00      	cmp	r3, #0
    a72e:	d100      	bne.n	a732 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a730:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    a732:	490a      	ldr	r1, [pc, #40]	; (a75c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    a734:	9b01      	ldr	r3, [sp, #4]
    a736:	9a00      	ldr	r2, [sp, #0]
    a738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    a73c:	4a06      	ldr	r2, [pc, #24]	; (a758 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    a73e:	9b01      	ldr	r3, [sp, #4]
    a740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a744:	1c5a      	adds	r2, r3, #1
    a746:	4904      	ldr	r1, [pc, #16]	; (a758 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    a748:	9b01      	ldr	r3, [sp, #4]
    a74a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a74e:	bf00      	nop
    a750:	b003      	add	sp, #12
    a752:	f85d fb04 	ldr.w	pc, [sp], #4
    a756:	bf00      	nop
    a758:	1fff91d8 	.word	0x1fff91d8
    a75c:	1fff91d4 	.word	0x1fff91d4

0000a760 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    a760:	b500      	push	{lr}
    a762:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a764:	f7f6 fa2c 	bl	bc0 <Sys_GetCoreID>
    a768:	4603      	mov	r3, r0
    a76a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    a76c:	4a0d      	ldr	r2, [pc, #52]	; (a7a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    a76e:	9b01      	ldr	r3, [sp, #4]
    a770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a774:	1e5a      	subs	r2, r3, #1
    a776:	490b      	ldr	r1, [pc, #44]	; (a7a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    a778:	9b01      	ldr	r3, [sp, #4]
    a77a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    a77e:	4a0a      	ldr	r2, [pc, #40]	; (a7a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    a780:	9b01      	ldr	r3, [sp, #4]
    a782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a786:	f003 0301 	and.w	r3, r3, #1
    a78a:	2b00      	cmp	r3, #0
    a78c:	d106      	bne.n	a79c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    a78e:	4a05      	ldr	r2, [pc, #20]	; (a7a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    a790:	9b01      	ldr	r3, [sp, #4]
    a792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a796:	2b00      	cmp	r3, #0
    a798:	d100      	bne.n	a79c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a79a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a79c:	bf00      	nop
    a79e:	b003      	add	sp, #12
    a7a0:	f85d fb04 	ldr.w	pc, [sp], #4
    a7a4:	1fff91d8 	.word	0x1fff91d8
    a7a8:	1fff91d4 	.word	0x1fff91d4

0000a7ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    a7ac:	b500      	push	{lr}
    a7ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a7b0:	f7f6 fa06 	bl	bc0 <Sys_GetCoreID>
    a7b4:	4603      	mov	r3, r0
    a7b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    a7b8:	4a10      	ldr	r2, [pc, #64]	; (a7fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    a7ba:	9b01      	ldr	r3, [sp, #4]
    a7bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7c0:	2b00      	cmp	r3, #0
    a7c2:	d10d      	bne.n	a7e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a7c4:	f7f6 f92d 	bl	a22 <Port_schm_read_msr>
    a7c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a7ca:	9b00      	ldr	r3, [sp, #0]
    a7cc:	f003 0301 	and.w	r3, r3, #1
    a7d0:	2b00      	cmp	r3, #0
    a7d2:	d100      	bne.n	a7d6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a7d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    a7d6:	490a      	ldr	r1, [pc, #40]	; (a800 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    a7d8:	9b01      	ldr	r3, [sp, #4]
    a7da:	9a00      	ldr	r2, [sp, #0]
    a7dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    a7e0:	4a06      	ldr	r2, [pc, #24]	; (a7fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    a7e2:	9b01      	ldr	r3, [sp, #4]
    a7e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7e8:	1c5a      	adds	r2, r3, #1
    a7ea:	4904      	ldr	r1, [pc, #16]	; (a7fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    a7ec:	9b01      	ldr	r3, [sp, #4]
    a7ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a7f2:	bf00      	nop
    a7f4:	b003      	add	sp, #12
    a7f6:	f85d fb04 	ldr.w	pc, [sp], #4
    a7fa:	bf00      	nop
    a7fc:	1fff91e0 	.word	0x1fff91e0
    a800:	1fff91dc 	.word	0x1fff91dc

0000a804 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    a804:	b500      	push	{lr}
    a806:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a808:	f7f6 f9da 	bl	bc0 <Sys_GetCoreID>
    a80c:	4603      	mov	r3, r0
    a80e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    a810:	4a0d      	ldr	r2, [pc, #52]	; (a848 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    a812:	9b01      	ldr	r3, [sp, #4]
    a814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a818:	1e5a      	subs	r2, r3, #1
    a81a:	490b      	ldr	r1, [pc, #44]	; (a848 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    a81c:	9b01      	ldr	r3, [sp, #4]
    a81e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    a822:	4a0a      	ldr	r2, [pc, #40]	; (a84c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    a824:	9b01      	ldr	r3, [sp, #4]
    a826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a82a:	f003 0301 	and.w	r3, r3, #1
    a82e:	2b00      	cmp	r3, #0
    a830:	d106      	bne.n	a840 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    a832:	4a05      	ldr	r2, [pc, #20]	; (a848 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    a834:	9b01      	ldr	r3, [sp, #4]
    a836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a83a:	2b00      	cmp	r3, #0
    a83c:	d100      	bne.n	a840 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a83e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a840:	bf00      	nop
    a842:	b003      	add	sp, #12
    a844:	f85d fb04 	ldr.w	pc, [sp], #4
    a848:	1fff91e0 	.word	0x1fff91e0
    a84c:	1fff91dc 	.word	0x1fff91dc

0000a850 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    a850:	b500      	push	{lr}
    a852:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a854:	f7f6 f9b4 	bl	bc0 <Sys_GetCoreID>
    a858:	4603      	mov	r3, r0
    a85a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    a85c:	4a10      	ldr	r2, [pc, #64]	; (a8a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    a85e:	9b01      	ldr	r3, [sp, #4]
    a860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a864:	2b00      	cmp	r3, #0
    a866:	d10d      	bne.n	a884 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a868:	f7f6 f8db 	bl	a22 <Port_schm_read_msr>
    a86c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a86e:	9b00      	ldr	r3, [sp, #0]
    a870:	f003 0301 	and.w	r3, r3, #1
    a874:	2b00      	cmp	r3, #0
    a876:	d100      	bne.n	a87a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a878:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    a87a:	490a      	ldr	r1, [pc, #40]	; (a8a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    a87c:	9b01      	ldr	r3, [sp, #4]
    a87e:	9a00      	ldr	r2, [sp, #0]
    a880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    a884:	4a06      	ldr	r2, [pc, #24]	; (a8a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    a886:	9b01      	ldr	r3, [sp, #4]
    a888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a88c:	1c5a      	adds	r2, r3, #1
    a88e:	4904      	ldr	r1, [pc, #16]	; (a8a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    a890:	9b01      	ldr	r3, [sp, #4]
    a892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a896:	bf00      	nop
    a898:	b003      	add	sp, #12
    a89a:	f85d fb04 	ldr.w	pc, [sp], #4
    a89e:	bf00      	nop
    a8a0:	1fff91e8 	.word	0x1fff91e8
    a8a4:	1fff91e4 	.word	0x1fff91e4

0000a8a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    a8a8:	b500      	push	{lr}
    a8aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a8ac:	f7f6 f988 	bl	bc0 <Sys_GetCoreID>
    a8b0:	4603      	mov	r3, r0
    a8b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    a8b4:	4a0d      	ldr	r2, [pc, #52]	; (a8ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    a8b6:	9b01      	ldr	r3, [sp, #4]
    a8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8bc:	1e5a      	subs	r2, r3, #1
    a8be:	490b      	ldr	r1, [pc, #44]	; (a8ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    a8c0:	9b01      	ldr	r3, [sp, #4]
    a8c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    a8c6:	4a0a      	ldr	r2, [pc, #40]	; (a8f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    a8c8:	9b01      	ldr	r3, [sp, #4]
    a8ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8ce:	f003 0301 	and.w	r3, r3, #1
    a8d2:	2b00      	cmp	r3, #0
    a8d4:	d106      	bne.n	a8e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    a8d6:	4a05      	ldr	r2, [pc, #20]	; (a8ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    a8d8:	9b01      	ldr	r3, [sp, #4]
    a8da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8de:	2b00      	cmp	r3, #0
    a8e0:	d100      	bne.n	a8e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a8e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a8e4:	bf00      	nop
    a8e6:	b003      	add	sp, #12
    a8e8:	f85d fb04 	ldr.w	pc, [sp], #4
    a8ec:	1fff91e8 	.word	0x1fff91e8
    a8f0:	1fff91e4 	.word	0x1fff91e4

0000a8f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    a8f4:	b500      	push	{lr}
    a8f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a8f8:	f7f6 f962 	bl	bc0 <Sys_GetCoreID>
    a8fc:	4603      	mov	r3, r0
    a8fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    a900:	4a10      	ldr	r2, [pc, #64]	; (a944 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    a902:	9b01      	ldr	r3, [sp, #4]
    a904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a908:	2b00      	cmp	r3, #0
    a90a:	d10d      	bne.n	a928 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a90c:	f7f6 f889 	bl	a22 <Port_schm_read_msr>
    a910:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a912:	9b00      	ldr	r3, [sp, #0]
    a914:	f003 0301 	and.w	r3, r3, #1
    a918:	2b00      	cmp	r3, #0
    a91a:	d100      	bne.n	a91e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a91c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    a91e:	490a      	ldr	r1, [pc, #40]	; (a948 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    a920:	9b01      	ldr	r3, [sp, #4]
    a922:	9a00      	ldr	r2, [sp, #0]
    a924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    a928:	4a06      	ldr	r2, [pc, #24]	; (a944 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    a92a:	9b01      	ldr	r3, [sp, #4]
    a92c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a930:	1c5a      	adds	r2, r3, #1
    a932:	4904      	ldr	r1, [pc, #16]	; (a944 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    a934:	9b01      	ldr	r3, [sp, #4]
    a936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a93a:	bf00      	nop
    a93c:	b003      	add	sp, #12
    a93e:	f85d fb04 	ldr.w	pc, [sp], #4
    a942:	bf00      	nop
    a944:	1fff91f0 	.word	0x1fff91f0
    a948:	1fff91ec 	.word	0x1fff91ec

0000a94c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    a94c:	b500      	push	{lr}
    a94e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a950:	f7f6 f936 	bl	bc0 <Sys_GetCoreID>
    a954:	4603      	mov	r3, r0
    a956:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    a958:	4a0d      	ldr	r2, [pc, #52]	; (a990 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    a95a:	9b01      	ldr	r3, [sp, #4]
    a95c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a960:	1e5a      	subs	r2, r3, #1
    a962:	490b      	ldr	r1, [pc, #44]	; (a990 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    a964:	9b01      	ldr	r3, [sp, #4]
    a966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    a96a:	4a0a      	ldr	r2, [pc, #40]	; (a994 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    a96c:	9b01      	ldr	r3, [sp, #4]
    a96e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a972:	f003 0301 	and.w	r3, r3, #1
    a976:	2b00      	cmp	r3, #0
    a978:	d106      	bne.n	a988 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    a97a:	4a05      	ldr	r2, [pc, #20]	; (a990 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    a97c:	9b01      	ldr	r3, [sp, #4]
    a97e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a982:	2b00      	cmp	r3, #0
    a984:	d100      	bne.n	a988 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a986:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a988:	bf00      	nop
    a98a:	b003      	add	sp, #12
    a98c:	f85d fb04 	ldr.w	pc, [sp], #4
    a990:	1fff91f0 	.word	0x1fff91f0
    a994:	1fff91ec 	.word	0x1fff91ec

0000a998 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    a998:	b500      	push	{lr}
    a99a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a99c:	f7f6 f910 	bl	bc0 <Sys_GetCoreID>
    a9a0:	4603      	mov	r3, r0
    a9a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    a9a4:	4a10      	ldr	r2, [pc, #64]	; (a9e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    a9a6:	9b01      	ldr	r3, [sp, #4]
    a9a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9ac:	2b00      	cmp	r3, #0
    a9ae:	d10d      	bne.n	a9cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a9b0:	f7f6 f837 	bl	a22 <Port_schm_read_msr>
    a9b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a9b6:	9b00      	ldr	r3, [sp, #0]
    a9b8:	f003 0301 	and.w	r3, r3, #1
    a9bc:	2b00      	cmp	r3, #0
    a9be:	d100      	bne.n	a9c2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a9c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    a9c2:	490a      	ldr	r1, [pc, #40]	; (a9ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    a9c4:	9b01      	ldr	r3, [sp, #4]
    a9c6:	9a00      	ldr	r2, [sp, #0]
    a9c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    a9cc:	4a06      	ldr	r2, [pc, #24]	; (a9e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    a9ce:	9b01      	ldr	r3, [sp, #4]
    a9d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9d4:	1c5a      	adds	r2, r3, #1
    a9d6:	4904      	ldr	r1, [pc, #16]	; (a9e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    a9d8:	9b01      	ldr	r3, [sp, #4]
    a9da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a9de:	bf00      	nop
    a9e0:	b003      	add	sp, #12
    a9e2:	f85d fb04 	ldr.w	pc, [sp], #4
    a9e6:	bf00      	nop
    a9e8:	1fff91f8 	.word	0x1fff91f8
    a9ec:	1fff91f4 	.word	0x1fff91f4

0000a9f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    a9f0:	b500      	push	{lr}
    a9f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a9f4:	f7f6 f8e4 	bl	bc0 <Sys_GetCoreID>
    a9f8:	4603      	mov	r3, r0
    a9fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    a9fc:	4a0d      	ldr	r2, [pc, #52]	; (aa34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    a9fe:	9b01      	ldr	r3, [sp, #4]
    aa00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa04:	1e5a      	subs	r2, r3, #1
    aa06:	490b      	ldr	r1, [pc, #44]	; (aa34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    aa08:	9b01      	ldr	r3, [sp, #4]
    aa0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    aa0e:	4a0a      	ldr	r2, [pc, #40]	; (aa38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    aa10:	9b01      	ldr	r3, [sp, #4]
    aa12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa16:	f003 0301 	and.w	r3, r3, #1
    aa1a:	2b00      	cmp	r3, #0
    aa1c:	d106      	bne.n	aa2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    aa1e:	4a05      	ldr	r2, [pc, #20]	; (aa34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    aa20:	9b01      	ldr	r3, [sp, #4]
    aa22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa26:	2b00      	cmp	r3, #0
    aa28:	d100      	bne.n	aa2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aa2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aa2c:	bf00      	nop
    aa2e:	b003      	add	sp, #12
    aa30:	f85d fb04 	ldr.w	pc, [sp], #4
    aa34:	1fff91f8 	.word	0x1fff91f8
    aa38:	1fff91f4 	.word	0x1fff91f4

0000aa3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    aa3c:	b500      	push	{lr}
    aa3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aa40:	f7f6 f8be 	bl	bc0 <Sys_GetCoreID>
    aa44:	4603      	mov	r3, r0
    aa46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    aa48:	4a10      	ldr	r2, [pc, #64]	; (aa8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    aa4a:	9b01      	ldr	r3, [sp, #4]
    aa4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa50:	2b00      	cmp	r3, #0
    aa52:	d10d      	bne.n	aa70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aa54:	f7f5 ffe5 	bl	a22 <Port_schm_read_msr>
    aa58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aa5a:	9b00      	ldr	r3, [sp, #0]
    aa5c:	f003 0301 	and.w	r3, r3, #1
    aa60:	2b00      	cmp	r3, #0
    aa62:	d100      	bne.n	aa66 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aa64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    aa66:	490a      	ldr	r1, [pc, #40]	; (aa90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    aa68:	9b01      	ldr	r3, [sp, #4]
    aa6a:	9a00      	ldr	r2, [sp, #0]
    aa6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    aa70:	4a06      	ldr	r2, [pc, #24]	; (aa8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    aa72:	9b01      	ldr	r3, [sp, #4]
    aa74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa78:	1c5a      	adds	r2, r3, #1
    aa7a:	4904      	ldr	r1, [pc, #16]	; (aa8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    aa7c:	9b01      	ldr	r3, [sp, #4]
    aa7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aa82:	bf00      	nop
    aa84:	b003      	add	sp, #12
    aa86:	f85d fb04 	ldr.w	pc, [sp], #4
    aa8a:	bf00      	nop
    aa8c:	1fff9200 	.word	0x1fff9200
    aa90:	1fff91fc 	.word	0x1fff91fc

0000aa94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    aa94:	b500      	push	{lr}
    aa96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aa98:	f7f6 f892 	bl	bc0 <Sys_GetCoreID>
    aa9c:	4603      	mov	r3, r0
    aa9e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    aaa0:	4a0d      	ldr	r2, [pc, #52]	; (aad8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    aaa2:	9b01      	ldr	r3, [sp, #4]
    aaa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaa8:	1e5a      	subs	r2, r3, #1
    aaaa:	490b      	ldr	r1, [pc, #44]	; (aad8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    aaac:	9b01      	ldr	r3, [sp, #4]
    aaae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    aab2:	4a0a      	ldr	r2, [pc, #40]	; (aadc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    aab4:	9b01      	ldr	r3, [sp, #4]
    aab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaba:	f003 0301 	and.w	r3, r3, #1
    aabe:	2b00      	cmp	r3, #0
    aac0:	d106      	bne.n	aad0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    aac2:	4a05      	ldr	r2, [pc, #20]	; (aad8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    aac4:	9b01      	ldr	r3, [sp, #4]
    aac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaca:	2b00      	cmp	r3, #0
    aacc:	d100      	bne.n	aad0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aace:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aad0:	bf00      	nop
    aad2:	b003      	add	sp, #12
    aad4:	f85d fb04 	ldr.w	pc, [sp], #4
    aad8:	1fff9200 	.word	0x1fff9200
    aadc:	1fff91fc 	.word	0x1fff91fc

0000aae0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    aae0:	b500      	push	{lr}
    aae2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aae4:	f7f6 f86c 	bl	bc0 <Sys_GetCoreID>
    aae8:	4603      	mov	r3, r0
    aaea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    aaec:	4a10      	ldr	r2, [pc, #64]	; (ab30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    aaee:	9b01      	ldr	r3, [sp, #4]
    aaf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaf4:	2b00      	cmp	r3, #0
    aaf6:	d10d      	bne.n	ab14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aaf8:	f7f5 ff93 	bl	a22 <Port_schm_read_msr>
    aafc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aafe:	9b00      	ldr	r3, [sp, #0]
    ab00:	f003 0301 	and.w	r3, r3, #1
    ab04:	2b00      	cmp	r3, #0
    ab06:	d100      	bne.n	ab0a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ab08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    ab0a:	490a      	ldr	r1, [pc, #40]	; (ab34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    ab0c:	9b01      	ldr	r3, [sp, #4]
    ab0e:	9a00      	ldr	r2, [sp, #0]
    ab10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    ab14:	4a06      	ldr	r2, [pc, #24]	; (ab30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    ab16:	9b01      	ldr	r3, [sp, #4]
    ab18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab1c:	1c5a      	adds	r2, r3, #1
    ab1e:	4904      	ldr	r1, [pc, #16]	; (ab30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    ab20:	9b01      	ldr	r3, [sp, #4]
    ab22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ab26:	bf00      	nop
    ab28:	b003      	add	sp, #12
    ab2a:	f85d fb04 	ldr.w	pc, [sp], #4
    ab2e:	bf00      	nop
    ab30:	1fff9208 	.word	0x1fff9208
    ab34:	1fff9204 	.word	0x1fff9204

0000ab38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    ab38:	b500      	push	{lr}
    ab3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ab3c:	f7f6 f840 	bl	bc0 <Sys_GetCoreID>
    ab40:	4603      	mov	r3, r0
    ab42:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    ab44:	4a0d      	ldr	r2, [pc, #52]	; (ab7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    ab46:	9b01      	ldr	r3, [sp, #4]
    ab48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab4c:	1e5a      	subs	r2, r3, #1
    ab4e:	490b      	ldr	r1, [pc, #44]	; (ab7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    ab50:	9b01      	ldr	r3, [sp, #4]
    ab52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    ab56:	4a0a      	ldr	r2, [pc, #40]	; (ab80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    ab58:	9b01      	ldr	r3, [sp, #4]
    ab5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab5e:	f003 0301 	and.w	r3, r3, #1
    ab62:	2b00      	cmp	r3, #0
    ab64:	d106      	bne.n	ab74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    ab66:	4a05      	ldr	r2, [pc, #20]	; (ab7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    ab68:	9b01      	ldr	r3, [sp, #4]
    ab6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab6e:	2b00      	cmp	r3, #0
    ab70:	d100      	bne.n	ab74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ab72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ab74:	bf00      	nop
    ab76:	b003      	add	sp, #12
    ab78:	f85d fb04 	ldr.w	pc, [sp], #4
    ab7c:	1fff9208 	.word	0x1fff9208
    ab80:	1fff9204 	.word	0x1fff9204

0000ab84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    ab84:	b500      	push	{lr}
    ab86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ab88:	f7f6 f81a 	bl	bc0 <Sys_GetCoreID>
    ab8c:	4603      	mov	r3, r0
    ab8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    ab90:	4a10      	ldr	r2, [pc, #64]	; (abd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    ab92:	9b01      	ldr	r3, [sp, #4]
    ab94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab98:	2b00      	cmp	r3, #0
    ab9a:	d10d      	bne.n	abb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ab9c:	f7f5 ff41 	bl	a22 <Port_schm_read_msr>
    aba0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aba2:	9b00      	ldr	r3, [sp, #0]
    aba4:	f003 0301 	and.w	r3, r3, #1
    aba8:	2b00      	cmp	r3, #0
    abaa:	d100      	bne.n	abae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    abac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    abae:	490a      	ldr	r1, [pc, #40]	; (abd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    abb0:	9b01      	ldr	r3, [sp, #4]
    abb2:	9a00      	ldr	r2, [sp, #0]
    abb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    abb8:	4a06      	ldr	r2, [pc, #24]	; (abd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    abba:	9b01      	ldr	r3, [sp, #4]
    abbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abc0:	1c5a      	adds	r2, r3, #1
    abc2:	4904      	ldr	r1, [pc, #16]	; (abd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    abc4:	9b01      	ldr	r3, [sp, #4]
    abc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    abca:	bf00      	nop
    abcc:	b003      	add	sp, #12
    abce:	f85d fb04 	ldr.w	pc, [sp], #4
    abd2:	bf00      	nop
    abd4:	1fff9210 	.word	0x1fff9210
    abd8:	1fff920c 	.word	0x1fff920c

0000abdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    abdc:	b500      	push	{lr}
    abde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    abe0:	f7f5 ffee 	bl	bc0 <Sys_GetCoreID>
    abe4:	4603      	mov	r3, r0
    abe6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    abe8:	4a0d      	ldr	r2, [pc, #52]	; (ac20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    abea:	9b01      	ldr	r3, [sp, #4]
    abec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abf0:	1e5a      	subs	r2, r3, #1
    abf2:	490b      	ldr	r1, [pc, #44]	; (ac20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    abf4:	9b01      	ldr	r3, [sp, #4]
    abf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    abfa:	4a0a      	ldr	r2, [pc, #40]	; (ac24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    abfc:	9b01      	ldr	r3, [sp, #4]
    abfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac02:	f003 0301 	and.w	r3, r3, #1
    ac06:	2b00      	cmp	r3, #0
    ac08:	d106      	bne.n	ac18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    ac0a:	4a05      	ldr	r2, [pc, #20]	; (ac20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    ac0c:	9b01      	ldr	r3, [sp, #4]
    ac0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac12:	2b00      	cmp	r3, #0
    ac14:	d100      	bne.n	ac18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ac16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ac18:	bf00      	nop
    ac1a:	b003      	add	sp, #12
    ac1c:	f85d fb04 	ldr.w	pc, [sp], #4
    ac20:	1fff9210 	.word	0x1fff9210
    ac24:	1fff920c 	.word	0x1fff920c

0000ac28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    ac28:	b500      	push	{lr}
    ac2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ac2c:	f7f5 ffc8 	bl	bc0 <Sys_GetCoreID>
    ac30:	4603      	mov	r3, r0
    ac32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    ac34:	4a10      	ldr	r2, [pc, #64]	; (ac78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    ac36:	9b01      	ldr	r3, [sp, #4]
    ac38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac3c:	2b00      	cmp	r3, #0
    ac3e:	d10d      	bne.n	ac5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ac40:	f7f5 feef 	bl	a22 <Port_schm_read_msr>
    ac44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ac46:	9b00      	ldr	r3, [sp, #0]
    ac48:	f003 0301 	and.w	r3, r3, #1
    ac4c:	2b00      	cmp	r3, #0
    ac4e:	d100      	bne.n	ac52 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ac50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    ac52:	490a      	ldr	r1, [pc, #40]	; (ac7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    ac54:	9b01      	ldr	r3, [sp, #4]
    ac56:	9a00      	ldr	r2, [sp, #0]
    ac58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    ac5c:	4a06      	ldr	r2, [pc, #24]	; (ac78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    ac5e:	9b01      	ldr	r3, [sp, #4]
    ac60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac64:	1c5a      	adds	r2, r3, #1
    ac66:	4904      	ldr	r1, [pc, #16]	; (ac78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    ac68:	9b01      	ldr	r3, [sp, #4]
    ac6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ac6e:	bf00      	nop
    ac70:	b003      	add	sp, #12
    ac72:	f85d fb04 	ldr.w	pc, [sp], #4
    ac76:	bf00      	nop
    ac78:	1fff9218 	.word	0x1fff9218
    ac7c:	1fff9214 	.word	0x1fff9214

0000ac80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    ac80:	b500      	push	{lr}
    ac82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ac84:	f7f5 ff9c 	bl	bc0 <Sys_GetCoreID>
    ac88:	4603      	mov	r3, r0
    ac8a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    ac8c:	4a0d      	ldr	r2, [pc, #52]	; (acc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    ac8e:	9b01      	ldr	r3, [sp, #4]
    ac90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac94:	1e5a      	subs	r2, r3, #1
    ac96:	490b      	ldr	r1, [pc, #44]	; (acc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    ac98:	9b01      	ldr	r3, [sp, #4]
    ac9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    ac9e:	4a0a      	ldr	r2, [pc, #40]	; (acc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    aca0:	9b01      	ldr	r3, [sp, #4]
    aca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aca6:	f003 0301 	and.w	r3, r3, #1
    acaa:	2b00      	cmp	r3, #0
    acac:	d106      	bne.n	acbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    acae:	4a05      	ldr	r2, [pc, #20]	; (acc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    acb0:	9b01      	ldr	r3, [sp, #4]
    acb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acb6:	2b00      	cmp	r3, #0
    acb8:	d100      	bne.n	acbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    acba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    acbc:	bf00      	nop
    acbe:	b003      	add	sp, #12
    acc0:	f85d fb04 	ldr.w	pc, [sp], #4
    acc4:	1fff9218 	.word	0x1fff9218
    acc8:	1fff9214 	.word	0x1fff9214

0000accc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    accc:	b500      	push	{lr}
    acce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    acd0:	f7f5 ff76 	bl	bc0 <Sys_GetCoreID>
    acd4:	4603      	mov	r3, r0
    acd6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    acd8:	4a10      	ldr	r2, [pc, #64]	; (ad1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    acda:	9b01      	ldr	r3, [sp, #4]
    acdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ace0:	2b00      	cmp	r3, #0
    ace2:	d10d      	bne.n	ad00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ace4:	f7f5 fe9d 	bl	a22 <Port_schm_read_msr>
    ace8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    acea:	9b00      	ldr	r3, [sp, #0]
    acec:	f003 0301 	and.w	r3, r3, #1
    acf0:	2b00      	cmp	r3, #0
    acf2:	d100      	bne.n	acf6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    acf4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    acf6:	490a      	ldr	r1, [pc, #40]	; (ad20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    acf8:	9b01      	ldr	r3, [sp, #4]
    acfa:	9a00      	ldr	r2, [sp, #0]
    acfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    ad00:	4a06      	ldr	r2, [pc, #24]	; (ad1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    ad02:	9b01      	ldr	r3, [sp, #4]
    ad04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad08:	1c5a      	adds	r2, r3, #1
    ad0a:	4904      	ldr	r1, [pc, #16]	; (ad1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    ad0c:	9b01      	ldr	r3, [sp, #4]
    ad0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ad12:	bf00      	nop
    ad14:	b003      	add	sp, #12
    ad16:	f85d fb04 	ldr.w	pc, [sp], #4
    ad1a:	bf00      	nop
    ad1c:	1fff9220 	.word	0x1fff9220
    ad20:	1fff921c 	.word	0x1fff921c

0000ad24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    ad24:	b500      	push	{lr}
    ad26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad28:	f7f5 ff4a 	bl	bc0 <Sys_GetCoreID>
    ad2c:	4603      	mov	r3, r0
    ad2e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    ad30:	4a0d      	ldr	r2, [pc, #52]	; (ad68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    ad32:	9b01      	ldr	r3, [sp, #4]
    ad34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad38:	1e5a      	subs	r2, r3, #1
    ad3a:	490b      	ldr	r1, [pc, #44]	; (ad68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    ad3c:	9b01      	ldr	r3, [sp, #4]
    ad3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    ad42:	4a0a      	ldr	r2, [pc, #40]	; (ad6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    ad44:	9b01      	ldr	r3, [sp, #4]
    ad46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad4a:	f003 0301 	and.w	r3, r3, #1
    ad4e:	2b00      	cmp	r3, #0
    ad50:	d106      	bne.n	ad60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    ad52:	4a05      	ldr	r2, [pc, #20]	; (ad68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    ad54:	9b01      	ldr	r3, [sp, #4]
    ad56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad5a:	2b00      	cmp	r3, #0
    ad5c:	d100      	bne.n	ad60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ad5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ad60:	bf00      	nop
    ad62:	b003      	add	sp, #12
    ad64:	f85d fb04 	ldr.w	pc, [sp], #4
    ad68:	1fff9220 	.word	0x1fff9220
    ad6c:	1fff921c 	.word	0x1fff921c

0000ad70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    ad70:	b500      	push	{lr}
    ad72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad74:	f7f5 ff24 	bl	bc0 <Sys_GetCoreID>
    ad78:	4603      	mov	r3, r0
    ad7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    ad7c:	4a10      	ldr	r2, [pc, #64]	; (adc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    ad7e:	9b01      	ldr	r3, [sp, #4]
    ad80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad84:	2b00      	cmp	r3, #0
    ad86:	d10d      	bne.n	ada4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ad88:	f7f5 fe4b 	bl	a22 <Port_schm_read_msr>
    ad8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ad8e:	9b00      	ldr	r3, [sp, #0]
    ad90:	f003 0301 	and.w	r3, r3, #1
    ad94:	2b00      	cmp	r3, #0
    ad96:	d100      	bne.n	ad9a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ad98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    ad9a:	490a      	ldr	r1, [pc, #40]	; (adc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    ad9c:	9b01      	ldr	r3, [sp, #4]
    ad9e:	9a00      	ldr	r2, [sp, #0]
    ada0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    ada4:	4a06      	ldr	r2, [pc, #24]	; (adc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    ada6:	9b01      	ldr	r3, [sp, #4]
    ada8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adac:	1c5a      	adds	r2, r3, #1
    adae:	4904      	ldr	r1, [pc, #16]	; (adc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    adb0:	9b01      	ldr	r3, [sp, #4]
    adb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    adb6:	bf00      	nop
    adb8:	b003      	add	sp, #12
    adba:	f85d fb04 	ldr.w	pc, [sp], #4
    adbe:	bf00      	nop
    adc0:	1fff9228 	.word	0x1fff9228
    adc4:	1fff9224 	.word	0x1fff9224

0000adc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    adc8:	b500      	push	{lr}
    adca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    adcc:	f7f5 fef8 	bl	bc0 <Sys_GetCoreID>
    add0:	4603      	mov	r3, r0
    add2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    add4:	4a0d      	ldr	r2, [pc, #52]	; (ae0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    add6:	9b01      	ldr	r3, [sp, #4]
    add8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    addc:	1e5a      	subs	r2, r3, #1
    adde:	490b      	ldr	r1, [pc, #44]	; (ae0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    ade0:	9b01      	ldr	r3, [sp, #4]
    ade2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    ade6:	4a0a      	ldr	r2, [pc, #40]	; (ae10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    ade8:	9b01      	ldr	r3, [sp, #4]
    adea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adee:	f003 0301 	and.w	r3, r3, #1
    adf2:	2b00      	cmp	r3, #0
    adf4:	d106      	bne.n	ae04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    adf6:	4a05      	ldr	r2, [pc, #20]	; (ae0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    adf8:	9b01      	ldr	r3, [sp, #4]
    adfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adfe:	2b00      	cmp	r3, #0
    ae00:	d100      	bne.n	ae04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ae02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ae04:	bf00      	nop
    ae06:	b003      	add	sp, #12
    ae08:	f85d fb04 	ldr.w	pc, [sp], #4
    ae0c:	1fff9228 	.word	0x1fff9228
    ae10:	1fff9224 	.word	0x1fff9224

0000ae14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    ae14:	b500      	push	{lr}
    ae16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae18:	f7f5 fed2 	bl	bc0 <Sys_GetCoreID>
    ae1c:	4603      	mov	r3, r0
    ae1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    ae20:	4a10      	ldr	r2, [pc, #64]	; (ae64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    ae22:	9b01      	ldr	r3, [sp, #4]
    ae24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae28:	2b00      	cmp	r3, #0
    ae2a:	d10d      	bne.n	ae48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ae2c:	f7f5 fdf9 	bl	a22 <Port_schm_read_msr>
    ae30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ae32:	9b00      	ldr	r3, [sp, #0]
    ae34:	f003 0301 	and.w	r3, r3, #1
    ae38:	2b00      	cmp	r3, #0
    ae3a:	d100      	bne.n	ae3e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ae3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    ae3e:	490a      	ldr	r1, [pc, #40]	; (ae68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    ae40:	9b01      	ldr	r3, [sp, #4]
    ae42:	9a00      	ldr	r2, [sp, #0]
    ae44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    ae48:	4a06      	ldr	r2, [pc, #24]	; (ae64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    ae4a:	9b01      	ldr	r3, [sp, #4]
    ae4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae50:	1c5a      	adds	r2, r3, #1
    ae52:	4904      	ldr	r1, [pc, #16]	; (ae64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    ae54:	9b01      	ldr	r3, [sp, #4]
    ae56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ae5a:	bf00      	nop
    ae5c:	b003      	add	sp, #12
    ae5e:	f85d fb04 	ldr.w	pc, [sp], #4
    ae62:	bf00      	nop
    ae64:	1fff9230 	.word	0x1fff9230
    ae68:	1fff922c 	.word	0x1fff922c

0000ae6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    ae6c:	b500      	push	{lr}
    ae6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae70:	f7f5 fea6 	bl	bc0 <Sys_GetCoreID>
    ae74:	4603      	mov	r3, r0
    ae76:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    ae78:	4a0d      	ldr	r2, [pc, #52]	; (aeb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    ae7a:	9b01      	ldr	r3, [sp, #4]
    ae7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae80:	1e5a      	subs	r2, r3, #1
    ae82:	490b      	ldr	r1, [pc, #44]	; (aeb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    ae84:	9b01      	ldr	r3, [sp, #4]
    ae86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    ae8a:	4a0a      	ldr	r2, [pc, #40]	; (aeb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    ae8c:	9b01      	ldr	r3, [sp, #4]
    ae8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae92:	f003 0301 	and.w	r3, r3, #1
    ae96:	2b00      	cmp	r3, #0
    ae98:	d106      	bne.n	aea8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    ae9a:	4a05      	ldr	r2, [pc, #20]	; (aeb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    ae9c:	9b01      	ldr	r3, [sp, #4]
    ae9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aea2:	2b00      	cmp	r3, #0
    aea4:	d100      	bne.n	aea8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aea6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aea8:	bf00      	nop
    aeaa:	b003      	add	sp, #12
    aeac:	f85d fb04 	ldr.w	pc, [sp], #4
    aeb0:	1fff9230 	.word	0x1fff9230
    aeb4:	1fff922c 	.word	0x1fff922c

0000aeb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    aeb8:	b500      	push	{lr}
    aeba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aebc:	f7f5 fe80 	bl	bc0 <Sys_GetCoreID>
    aec0:	4603      	mov	r3, r0
    aec2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    aec4:	4a10      	ldr	r2, [pc, #64]	; (af08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    aec6:	9b01      	ldr	r3, [sp, #4]
    aec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aecc:	2b00      	cmp	r3, #0
    aece:	d10d      	bne.n	aeec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aed0:	f7f5 fda7 	bl	a22 <Port_schm_read_msr>
    aed4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aed6:	9b00      	ldr	r3, [sp, #0]
    aed8:	f003 0301 	and.w	r3, r3, #1
    aedc:	2b00      	cmp	r3, #0
    aede:	d100      	bne.n	aee2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aee0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    aee2:	490a      	ldr	r1, [pc, #40]	; (af0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    aee4:	9b01      	ldr	r3, [sp, #4]
    aee6:	9a00      	ldr	r2, [sp, #0]
    aee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    aeec:	4a06      	ldr	r2, [pc, #24]	; (af08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    aeee:	9b01      	ldr	r3, [sp, #4]
    aef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aef4:	1c5a      	adds	r2, r3, #1
    aef6:	4904      	ldr	r1, [pc, #16]	; (af08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    aef8:	9b01      	ldr	r3, [sp, #4]
    aefa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aefe:	bf00      	nop
    af00:	b003      	add	sp, #12
    af02:	f85d fb04 	ldr.w	pc, [sp], #4
    af06:	bf00      	nop
    af08:	1fff9238 	.word	0x1fff9238
    af0c:	1fff9234 	.word	0x1fff9234

0000af10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    af10:	b500      	push	{lr}
    af12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af14:	f7f5 fe54 	bl	bc0 <Sys_GetCoreID>
    af18:	4603      	mov	r3, r0
    af1a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    af1c:	4a0d      	ldr	r2, [pc, #52]	; (af54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    af1e:	9b01      	ldr	r3, [sp, #4]
    af20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af24:	1e5a      	subs	r2, r3, #1
    af26:	490b      	ldr	r1, [pc, #44]	; (af54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    af28:	9b01      	ldr	r3, [sp, #4]
    af2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    af2e:	4a0a      	ldr	r2, [pc, #40]	; (af58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    af30:	9b01      	ldr	r3, [sp, #4]
    af32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af36:	f003 0301 	and.w	r3, r3, #1
    af3a:	2b00      	cmp	r3, #0
    af3c:	d106      	bne.n	af4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    af3e:	4a05      	ldr	r2, [pc, #20]	; (af54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    af40:	9b01      	ldr	r3, [sp, #4]
    af42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af46:	2b00      	cmp	r3, #0
    af48:	d100      	bne.n	af4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    af4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    af4c:	bf00      	nop
    af4e:	b003      	add	sp, #12
    af50:	f85d fb04 	ldr.w	pc, [sp], #4
    af54:	1fff9238 	.word	0x1fff9238
    af58:	1fff9234 	.word	0x1fff9234

0000af5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    af5c:	b500      	push	{lr}
    af5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af60:	f7f5 fe2e 	bl	bc0 <Sys_GetCoreID>
    af64:	4603      	mov	r3, r0
    af66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    af68:	4a10      	ldr	r2, [pc, #64]	; (afac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    af6a:	9b01      	ldr	r3, [sp, #4]
    af6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af70:	2b00      	cmp	r3, #0
    af72:	d10d      	bne.n	af90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    af74:	f7f5 fd55 	bl	a22 <Port_schm_read_msr>
    af78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    af7a:	9b00      	ldr	r3, [sp, #0]
    af7c:	f003 0301 	and.w	r3, r3, #1
    af80:	2b00      	cmp	r3, #0
    af82:	d100      	bne.n	af86 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    af84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    af86:	490a      	ldr	r1, [pc, #40]	; (afb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    af88:	9b01      	ldr	r3, [sp, #4]
    af8a:	9a00      	ldr	r2, [sp, #0]
    af8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    af90:	4a06      	ldr	r2, [pc, #24]	; (afac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    af92:	9b01      	ldr	r3, [sp, #4]
    af94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af98:	1c5a      	adds	r2, r3, #1
    af9a:	4904      	ldr	r1, [pc, #16]	; (afac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    af9c:	9b01      	ldr	r3, [sp, #4]
    af9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    afa2:	bf00      	nop
    afa4:	b003      	add	sp, #12
    afa6:	f85d fb04 	ldr.w	pc, [sp], #4
    afaa:	bf00      	nop
    afac:	1fff9240 	.word	0x1fff9240
    afb0:	1fff923c 	.word	0x1fff923c

0000afb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    afb4:	b500      	push	{lr}
    afb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    afb8:	f7f5 fe02 	bl	bc0 <Sys_GetCoreID>
    afbc:	4603      	mov	r3, r0
    afbe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    afc0:	4a0d      	ldr	r2, [pc, #52]	; (aff8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    afc2:	9b01      	ldr	r3, [sp, #4]
    afc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afc8:	1e5a      	subs	r2, r3, #1
    afca:	490b      	ldr	r1, [pc, #44]	; (aff8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    afcc:	9b01      	ldr	r3, [sp, #4]
    afce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    afd2:	4a0a      	ldr	r2, [pc, #40]	; (affc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    afd4:	9b01      	ldr	r3, [sp, #4]
    afd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afda:	f003 0301 	and.w	r3, r3, #1
    afde:	2b00      	cmp	r3, #0
    afe0:	d106      	bne.n	aff0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    afe2:	4a05      	ldr	r2, [pc, #20]	; (aff8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    afe4:	9b01      	ldr	r3, [sp, #4]
    afe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afea:	2b00      	cmp	r3, #0
    afec:	d100      	bne.n	aff0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    afee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aff0:	bf00      	nop
    aff2:	b003      	add	sp, #12
    aff4:	f85d fb04 	ldr.w	pc, [sp], #4
    aff8:	1fff9240 	.word	0x1fff9240
    affc:	1fff923c 	.word	0x1fff923c

0000b000 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    b000:	b500      	push	{lr}
    b002:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b004:	f7f5 fddc 	bl	bc0 <Sys_GetCoreID>
    b008:	4603      	mov	r3, r0
    b00a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    b00c:	4a10      	ldr	r2, [pc, #64]	; (b050 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    b00e:	9b01      	ldr	r3, [sp, #4]
    b010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b014:	2b00      	cmp	r3, #0
    b016:	d10d      	bne.n	b034 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b018:	f7f5 fd03 	bl	a22 <Port_schm_read_msr>
    b01c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b01e:	9b00      	ldr	r3, [sp, #0]
    b020:	f003 0301 	and.w	r3, r3, #1
    b024:	2b00      	cmp	r3, #0
    b026:	d100      	bne.n	b02a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b028:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    b02a:	490a      	ldr	r1, [pc, #40]	; (b054 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    b02c:	9b01      	ldr	r3, [sp, #4]
    b02e:	9a00      	ldr	r2, [sp, #0]
    b030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    b034:	4a06      	ldr	r2, [pc, #24]	; (b050 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    b036:	9b01      	ldr	r3, [sp, #4]
    b038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b03c:	1c5a      	adds	r2, r3, #1
    b03e:	4904      	ldr	r1, [pc, #16]	; (b050 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    b040:	9b01      	ldr	r3, [sp, #4]
    b042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b046:	bf00      	nop
    b048:	b003      	add	sp, #12
    b04a:	f85d fb04 	ldr.w	pc, [sp], #4
    b04e:	bf00      	nop
    b050:	1fff9248 	.word	0x1fff9248
    b054:	1fff9244 	.word	0x1fff9244

0000b058 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    b058:	b500      	push	{lr}
    b05a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b05c:	f7f5 fdb0 	bl	bc0 <Sys_GetCoreID>
    b060:	4603      	mov	r3, r0
    b062:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    b064:	4a0d      	ldr	r2, [pc, #52]	; (b09c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    b066:	9b01      	ldr	r3, [sp, #4]
    b068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b06c:	1e5a      	subs	r2, r3, #1
    b06e:	490b      	ldr	r1, [pc, #44]	; (b09c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    b070:	9b01      	ldr	r3, [sp, #4]
    b072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    b076:	4a0a      	ldr	r2, [pc, #40]	; (b0a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    b078:	9b01      	ldr	r3, [sp, #4]
    b07a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b07e:	f003 0301 	and.w	r3, r3, #1
    b082:	2b00      	cmp	r3, #0
    b084:	d106      	bne.n	b094 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    b086:	4a05      	ldr	r2, [pc, #20]	; (b09c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    b088:	9b01      	ldr	r3, [sp, #4]
    b08a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b08e:	2b00      	cmp	r3, #0
    b090:	d100      	bne.n	b094 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b092:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b094:	bf00      	nop
    b096:	b003      	add	sp, #12
    b098:	f85d fb04 	ldr.w	pc, [sp], #4
    b09c:	1fff9248 	.word	0x1fff9248
    b0a0:	1fff9244 	.word	0x1fff9244

0000b0a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    b0a4:	b500      	push	{lr}
    b0a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b0a8:	f7f5 fd8a 	bl	bc0 <Sys_GetCoreID>
    b0ac:	4603      	mov	r3, r0
    b0ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    b0b0:	4a10      	ldr	r2, [pc, #64]	; (b0f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    b0b2:	9b01      	ldr	r3, [sp, #4]
    b0b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0b8:	2b00      	cmp	r3, #0
    b0ba:	d10d      	bne.n	b0d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b0bc:	f7f5 fcb1 	bl	a22 <Port_schm_read_msr>
    b0c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b0c2:	9b00      	ldr	r3, [sp, #0]
    b0c4:	f003 0301 	and.w	r3, r3, #1
    b0c8:	2b00      	cmp	r3, #0
    b0ca:	d100      	bne.n	b0ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b0cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    b0ce:	490a      	ldr	r1, [pc, #40]	; (b0f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    b0d0:	9b01      	ldr	r3, [sp, #4]
    b0d2:	9a00      	ldr	r2, [sp, #0]
    b0d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    b0d8:	4a06      	ldr	r2, [pc, #24]	; (b0f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    b0da:	9b01      	ldr	r3, [sp, #4]
    b0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0e0:	1c5a      	adds	r2, r3, #1
    b0e2:	4904      	ldr	r1, [pc, #16]	; (b0f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    b0e4:	9b01      	ldr	r3, [sp, #4]
    b0e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b0ea:	bf00      	nop
    b0ec:	b003      	add	sp, #12
    b0ee:	f85d fb04 	ldr.w	pc, [sp], #4
    b0f2:	bf00      	nop
    b0f4:	1fff9250 	.word	0x1fff9250
    b0f8:	1fff924c 	.word	0x1fff924c

0000b0fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    b0fc:	b500      	push	{lr}
    b0fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b100:	f7f5 fd5e 	bl	bc0 <Sys_GetCoreID>
    b104:	4603      	mov	r3, r0
    b106:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    b108:	4a0d      	ldr	r2, [pc, #52]	; (b140 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    b10a:	9b01      	ldr	r3, [sp, #4]
    b10c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b110:	1e5a      	subs	r2, r3, #1
    b112:	490b      	ldr	r1, [pc, #44]	; (b140 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    b114:	9b01      	ldr	r3, [sp, #4]
    b116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    b11a:	4a0a      	ldr	r2, [pc, #40]	; (b144 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    b11c:	9b01      	ldr	r3, [sp, #4]
    b11e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b122:	f003 0301 	and.w	r3, r3, #1
    b126:	2b00      	cmp	r3, #0
    b128:	d106      	bne.n	b138 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    b12a:	4a05      	ldr	r2, [pc, #20]	; (b140 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    b12c:	9b01      	ldr	r3, [sp, #4]
    b12e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b132:	2b00      	cmp	r3, #0
    b134:	d100      	bne.n	b138 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b136:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b138:	bf00      	nop
    b13a:	b003      	add	sp, #12
    b13c:	f85d fb04 	ldr.w	pc, [sp], #4
    b140:	1fff9250 	.word	0x1fff9250
    b144:	1fff924c 	.word	0x1fff924c

0000b148 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    b148:	b500      	push	{lr}
    b14a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b14c:	f7f5 fd38 	bl	bc0 <Sys_GetCoreID>
    b150:	4603      	mov	r3, r0
    b152:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    b154:	4a10      	ldr	r2, [pc, #64]	; (b198 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    b156:	9b01      	ldr	r3, [sp, #4]
    b158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b15c:	2b00      	cmp	r3, #0
    b15e:	d10d      	bne.n	b17c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b160:	f7f5 fc5f 	bl	a22 <Port_schm_read_msr>
    b164:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b166:	9b00      	ldr	r3, [sp, #0]
    b168:	f003 0301 	and.w	r3, r3, #1
    b16c:	2b00      	cmp	r3, #0
    b16e:	d100      	bne.n	b172 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b170:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    b172:	490a      	ldr	r1, [pc, #40]	; (b19c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    b174:	9b01      	ldr	r3, [sp, #4]
    b176:	9a00      	ldr	r2, [sp, #0]
    b178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    b17c:	4a06      	ldr	r2, [pc, #24]	; (b198 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    b17e:	9b01      	ldr	r3, [sp, #4]
    b180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b184:	1c5a      	adds	r2, r3, #1
    b186:	4904      	ldr	r1, [pc, #16]	; (b198 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    b188:	9b01      	ldr	r3, [sp, #4]
    b18a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b18e:	bf00      	nop
    b190:	b003      	add	sp, #12
    b192:	f85d fb04 	ldr.w	pc, [sp], #4
    b196:	bf00      	nop
    b198:	1fff9258 	.word	0x1fff9258
    b19c:	1fff9254 	.word	0x1fff9254

0000b1a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    b1a0:	b500      	push	{lr}
    b1a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b1a4:	f7f5 fd0c 	bl	bc0 <Sys_GetCoreID>
    b1a8:	4603      	mov	r3, r0
    b1aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    b1ac:	4a0d      	ldr	r2, [pc, #52]	; (b1e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    b1ae:	9b01      	ldr	r3, [sp, #4]
    b1b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1b4:	1e5a      	subs	r2, r3, #1
    b1b6:	490b      	ldr	r1, [pc, #44]	; (b1e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    b1b8:	9b01      	ldr	r3, [sp, #4]
    b1ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    b1be:	4a0a      	ldr	r2, [pc, #40]	; (b1e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    b1c0:	9b01      	ldr	r3, [sp, #4]
    b1c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1c6:	f003 0301 	and.w	r3, r3, #1
    b1ca:	2b00      	cmp	r3, #0
    b1cc:	d106      	bne.n	b1dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    b1ce:	4a05      	ldr	r2, [pc, #20]	; (b1e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    b1d0:	9b01      	ldr	r3, [sp, #4]
    b1d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1d6:	2b00      	cmp	r3, #0
    b1d8:	d100      	bne.n	b1dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b1da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b1dc:	bf00      	nop
    b1de:	b003      	add	sp, #12
    b1e0:	f85d fb04 	ldr.w	pc, [sp], #4
    b1e4:	1fff9258 	.word	0x1fff9258
    b1e8:	1fff9254 	.word	0x1fff9254

0000b1ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    b1ec:	b500      	push	{lr}
    b1ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b1f0:	f7f5 fce6 	bl	bc0 <Sys_GetCoreID>
    b1f4:	4603      	mov	r3, r0
    b1f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    b1f8:	4a10      	ldr	r2, [pc, #64]	; (b23c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    b1fa:	9b01      	ldr	r3, [sp, #4]
    b1fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b200:	2b00      	cmp	r3, #0
    b202:	d10d      	bne.n	b220 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b204:	f7f5 fc0d 	bl	a22 <Port_schm_read_msr>
    b208:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b20a:	9b00      	ldr	r3, [sp, #0]
    b20c:	f003 0301 	and.w	r3, r3, #1
    b210:	2b00      	cmp	r3, #0
    b212:	d100      	bne.n	b216 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b214:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    b216:	490a      	ldr	r1, [pc, #40]	; (b240 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    b218:	9b01      	ldr	r3, [sp, #4]
    b21a:	9a00      	ldr	r2, [sp, #0]
    b21c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    b220:	4a06      	ldr	r2, [pc, #24]	; (b23c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    b222:	9b01      	ldr	r3, [sp, #4]
    b224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b228:	1c5a      	adds	r2, r3, #1
    b22a:	4904      	ldr	r1, [pc, #16]	; (b23c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    b22c:	9b01      	ldr	r3, [sp, #4]
    b22e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b232:	bf00      	nop
    b234:	b003      	add	sp, #12
    b236:	f85d fb04 	ldr.w	pc, [sp], #4
    b23a:	bf00      	nop
    b23c:	1fff9260 	.word	0x1fff9260
    b240:	1fff925c 	.word	0x1fff925c

0000b244 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    b244:	b500      	push	{lr}
    b246:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b248:	f7f5 fcba 	bl	bc0 <Sys_GetCoreID>
    b24c:	4603      	mov	r3, r0
    b24e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    b250:	4a0d      	ldr	r2, [pc, #52]	; (b288 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    b252:	9b01      	ldr	r3, [sp, #4]
    b254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b258:	1e5a      	subs	r2, r3, #1
    b25a:	490b      	ldr	r1, [pc, #44]	; (b288 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    b25c:	9b01      	ldr	r3, [sp, #4]
    b25e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    b262:	4a0a      	ldr	r2, [pc, #40]	; (b28c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    b264:	9b01      	ldr	r3, [sp, #4]
    b266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b26a:	f003 0301 	and.w	r3, r3, #1
    b26e:	2b00      	cmp	r3, #0
    b270:	d106      	bne.n	b280 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    b272:	4a05      	ldr	r2, [pc, #20]	; (b288 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    b274:	9b01      	ldr	r3, [sp, #4]
    b276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b27a:	2b00      	cmp	r3, #0
    b27c:	d100      	bne.n	b280 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b27e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b280:	bf00      	nop
    b282:	b003      	add	sp, #12
    b284:	f85d fb04 	ldr.w	pc, [sp], #4
    b288:	1fff9260 	.word	0x1fff9260
    b28c:	1fff925c 	.word	0x1fff925c

0000b290 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    b290:	b500      	push	{lr}
    b292:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b294:	f7f5 fc94 	bl	bc0 <Sys_GetCoreID>
    b298:	4603      	mov	r3, r0
    b29a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    b29c:	4a10      	ldr	r2, [pc, #64]	; (b2e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    b29e:	9b01      	ldr	r3, [sp, #4]
    b2a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2a4:	2b00      	cmp	r3, #0
    b2a6:	d10d      	bne.n	b2c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b2a8:	f7f5 fbbb 	bl	a22 <Port_schm_read_msr>
    b2ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b2ae:	9b00      	ldr	r3, [sp, #0]
    b2b0:	f003 0301 	and.w	r3, r3, #1
    b2b4:	2b00      	cmp	r3, #0
    b2b6:	d100      	bne.n	b2ba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b2b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    b2ba:	490a      	ldr	r1, [pc, #40]	; (b2e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    b2bc:	9b01      	ldr	r3, [sp, #4]
    b2be:	9a00      	ldr	r2, [sp, #0]
    b2c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    b2c4:	4a06      	ldr	r2, [pc, #24]	; (b2e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    b2c6:	9b01      	ldr	r3, [sp, #4]
    b2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2cc:	1c5a      	adds	r2, r3, #1
    b2ce:	4904      	ldr	r1, [pc, #16]	; (b2e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    b2d0:	9b01      	ldr	r3, [sp, #4]
    b2d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b2d6:	bf00      	nop
    b2d8:	b003      	add	sp, #12
    b2da:	f85d fb04 	ldr.w	pc, [sp], #4
    b2de:	bf00      	nop
    b2e0:	1fff9268 	.word	0x1fff9268
    b2e4:	1fff9264 	.word	0x1fff9264

0000b2e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    b2e8:	b500      	push	{lr}
    b2ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b2ec:	f7f5 fc68 	bl	bc0 <Sys_GetCoreID>
    b2f0:	4603      	mov	r3, r0
    b2f2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    b2f4:	4a0d      	ldr	r2, [pc, #52]	; (b32c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    b2f6:	9b01      	ldr	r3, [sp, #4]
    b2f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2fc:	1e5a      	subs	r2, r3, #1
    b2fe:	490b      	ldr	r1, [pc, #44]	; (b32c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    b300:	9b01      	ldr	r3, [sp, #4]
    b302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    b306:	4a0a      	ldr	r2, [pc, #40]	; (b330 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    b308:	9b01      	ldr	r3, [sp, #4]
    b30a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b30e:	f003 0301 	and.w	r3, r3, #1
    b312:	2b00      	cmp	r3, #0
    b314:	d106      	bne.n	b324 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    b316:	4a05      	ldr	r2, [pc, #20]	; (b32c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    b318:	9b01      	ldr	r3, [sp, #4]
    b31a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b31e:	2b00      	cmp	r3, #0
    b320:	d100      	bne.n	b324 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b322:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b324:	bf00      	nop
    b326:	b003      	add	sp, #12
    b328:	f85d fb04 	ldr.w	pc, [sp], #4
    b32c:	1fff9268 	.word	0x1fff9268
    b330:	1fff9264 	.word	0x1fff9264

0000b334 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    b334:	b500      	push	{lr}
    b336:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b338:	f7f5 fc42 	bl	bc0 <Sys_GetCoreID>
    b33c:	4603      	mov	r3, r0
    b33e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    b340:	4a10      	ldr	r2, [pc, #64]	; (b384 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    b342:	9b01      	ldr	r3, [sp, #4]
    b344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b348:	2b00      	cmp	r3, #0
    b34a:	d10d      	bne.n	b368 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b34c:	f7f5 fb69 	bl	a22 <Port_schm_read_msr>
    b350:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b352:	9b00      	ldr	r3, [sp, #0]
    b354:	f003 0301 	and.w	r3, r3, #1
    b358:	2b00      	cmp	r3, #0
    b35a:	d100      	bne.n	b35e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b35c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    b35e:	490a      	ldr	r1, [pc, #40]	; (b388 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    b360:	9b01      	ldr	r3, [sp, #4]
    b362:	9a00      	ldr	r2, [sp, #0]
    b364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    b368:	4a06      	ldr	r2, [pc, #24]	; (b384 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    b36a:	9b01      	ldr	r3, [sp, #4]
    b36c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b370:	1c5a      	adds	r2, r3, #1
    b372:	4904      	ldr	r1, [pc, #16]	; (b384 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    b374:	9b01      	ldr	r3, [sp, #4]
    b376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b37a:	bf00      	nop
    b37c:	b003      	add	sp, #12
    b37e:	f85d fb04 	ldr.w	pc, [sp], #4
    b382:	bf00      	nop
    b384:	1fff9270 	.word	0x1fff9270
    b388:	1fff926c 	.word	0x1fff926c

0000b38c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    b38c:	b500      	push	{lr}
    b38e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b390:	f7f5 fc16 	bl	bc0 <Sys_GetCoreID>
    b394:	4603      	mov	r3, r0
    b396:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    b398:	4a0d      	ldr	r2, [pc, #52]	; (b3d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    b39a:	9b01      	ldr	r3, [sp, #4]
    b39c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3a0:	1e5a      	subs	r2, r3, #1
    b3a2:	490b      	ldr	r1, [pc, #44]	; (b3d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    b3a4:	9b01      	ldr	r3, [sp, #4]
    b3a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    b3aa:	4a0a      	ldr	r2, [pc, #40]	; (b3d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    b3ac:	9b01      	ldr	r3, [sp, #4]
    b3ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3b2:	f003 0301 	and.w	r3, r3, #1
    b3b6:	2b00      	cmp	r3, #0
    b3b8:	d106      	bne.n	b3c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    b3ba:	4a05      	ldr	r2, [pc, #20]	; (b3d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    b3bc:	9b01      	ldr	r3, [sp, #4]
    b3be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3c2:	2b00      	cmp	r3, #0
    b3c4:	d100      	bne.n	b3c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b3c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b3c8:	bf00      	nop
    b3ca:	b003      	add	sp, #12
    b3cc:	f85d fb04 	ldr.w	pc, [sp], #4
    b3d0:	1fff9270 	.word	0x1fff9270
    b3d4:	1fff926c 	.word	0x1fff926c

0000b3d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    b3d8:	b500      	push	{lr}
    b3da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b3dc:	f7f5 fbf0 	bl	bc0 <Sys_GetCoreID>
    b3e0:	4603      	mov	r3, r0
    b3e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    b3e4:	4a10      	ldr	r2, [pc, #64]	; (b428 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    b3e6:	9b01      	ldr	r3, [sp, #4]
    b3e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3ec:	2b00      	cmp	r3, #0
    b3ee:	d10d      	bne.n	b40c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b3f0:	f7f5 fb17 	bl	a22 <Port_schm_read_msr>
    b3f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b3f6:	9b00      	ldr	r3, [sp, #0]
    b3f8:	f003 0301 	and.w	r3, r3, #1
    b3fc:	2b00      	cmp	r3, #0
    b3fe:	d100      	bne.n	b402 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b400:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    b402:	490a      	ldr	r1, [pc, #40]	; (b42c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    b404:	9b01      	ldr	r3, [sp, #4]
    b406:	9a00      	ldr	r2, [sp, #0]
    b408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    b40c:	4a06      	ldr	r2, [pc, #24]	; (b428 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    b40e:	9b01      	ldr	r3, [sp, #4]
    b410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b414:	1c5a      	adds	r2, r3, #1
    b416:	4904      	ldr	r1, [pc, #16]	; (b428 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    b418:	9b01      	ldr	r3, [sp, #4]
    b41a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b41e:	bf00      	nop
    b420:	b003      	add	sp, #12
    b422:	f85d fb04 	ldr.w	pc, [sp], #4
    b426:	bf00      	nop
    b428:	1fff9278 	.word	0x1fff9278
    b42c:	1fff9274 	.word	0x1fff9274

0000b430 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    b430:	b500      	push	{lr}
    b432:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b434:	f7f5 fbc4 	bl	bc0 <Sys_GetCoreID>
    b438:	4603      	mov	r3, r0
    b43a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    b43c:	4a0d      	ldr	r2, [pc, #52]	; (b474 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    b43e:	9b01      	ldr	r3, [sp, #4]
    b440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b444:	1e5a      	subs	r2, r3, #1
    b446:	490b      	ldr	r1, [pc, #44]	; (b474 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    b448:	9b01      	ldr	r3, [sp, #4]
    b44a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    b44e:	4a0a      	ldr	r2, [pc, #40]	; (b478 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    b450:	9b01      	ldr	r3, [sp, #4]
    b452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b456:	f003 0301 	and.w	r3, r3, #1
    b45a:	2b00      	cmp	r3, #0
    b45c:	d106      	bne.n	b46c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    b45e:	4a05      	ldr	r2, [pc, #20]	; (b474 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    b460:	9b01      	ldr	r3, [sp, #4]
    b462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b466:	2b00      	cmp	r3, #0
    b468:	d100      	bne.n	b46c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b46a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b46c:	bf00      	nop
    b46e:	b003      	add	sp, #12
    b470:	f85d fb04 	ldr.w	pc, [sp], #4
    b474:	1fff9278 	.word	0x1fff9278
    b478:	1fff9274 	.word	0x1fff9274

0000b47c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    b47c:	b500      	push	{lr}
    b47e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b480:	f7f5 fb9e 	bl	bc0 <Sys_GetCoreID>
    b484:	4603      	mov	r3, r0
    b486:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    b488:	4a10      	ldr	r2, [pc, #64]	; (b4cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    b48a:	9b01      	ldr	r3, [sp, #4]
    b48c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b490:	2b00      	cmp	r3, #0
    b492:	d10d      	bne.n	b4b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b494:	f7f5 fac5 	bl	a22 <Port_schm_read_msr>
    b498:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b49a:	9b00      	ldr	r3, [sp, #0]
    b49c:	f003 0301 	and.w	r3, r3, #1
    b4a0:	2b00      	cmp	r3, #0
    b4a2:	d100      	bne.n	b4a6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b4a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    b4a6:	490a      	ldr	r1, [pc, #40]	; (b4d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    b4a8:	9b01      	ldr	r3, [sp, #4]
    b4aa:	9a00      	ldr	r2, [sp, #0]
    b4ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    b4b0:	4a06      	ldr	r2, [pc, #24]	; (b4cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    b4b2:	9b01      	ldr	r3, [sp, #4]
    b4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4b8:	1c5a      	adds	r2, r3, #1
    b4ba:	4904      	ldr	r1, [pc, #16]	; (b4cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    b4bc:	9b01      	ldr	r3, [sp, #4]
    b4be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b4c2:	bf00      	nop
    b4c4:	b003      	add	sp, #12
    b4c6:	f85d fb04 	ldr.w	pc, [sp], #4
    b4ca:	bf00      	nop
    b4cc:	1fff9280 	.word	0x1fff9280
    b4d0:	1fff927c 	.word	0x1fff927c

0000b4d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    b4d4:	b500      	push	{lr}
    b4d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4d8:	f7f5 fb72 	bl	bc0 <Sys_GetCoreID>
    b4dc:	4603      	mov	r3, r0
    b4de:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    b4e0:	4a0d      	ldr	r2, [pc, #52]	; (b518 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    b4e2:	9b01      	ldr	r3, [sp, #4]
    b4e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4e8:	1e5a      	subs	r2, r3, #1
    b4ea:	490b      	ldr	r1, [pc, #44]	; (b518 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    b4ec:	9b01      	ldr	r3, [sp, #4]
    b4ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    b4f2:	4a0a      	ldr	r2, [pc, #40]	; (b51c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    b4f4:	9b01      	ldr	r3, [sp, #4]
    b4f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4fa:	f003 0301 	and.w	r3, r3, #1
    b4fe:	2b00      	cmp	r3, #0
    b500:	d106      	bne.n	b510 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    b502:	4a05      	ldr	r2, [pc, #20]	; (b518 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    b504:	9b01      	ldr	r3, [sp, #4]
    b506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b50a:	2b00      	cmp	r3, #0
    b50c:	d100      	bne.n	b510 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b50e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b510:	bf00      	nop
    b512:	b003      	add	sp, #12
    b514:	f85d fb04 	ldr.w	pc, [sp], #4
    b518:	1fff9280 	.word	0x1fff9280
    b51c:	1fff927c 	.word	0x1fff927c

0000b520 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    b520:	b500      	push	{lr}
    b522:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b524:	f7f5 fb4c 	bl	bc0 <Sys_GetCoreID>
    b528:	4603      	mov	r3, r0
    b52a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    b52c:	4a10      	ldr	r2, [pc, #64]	; (b570 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    b52e:	9b01      	ldr	r3, [sp, #4]
    b530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b534:	2b00      	cmp	r3, #0
    b536:	d10d      	bne.n	b554 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b538:	f7f5 fa73 	bl	a22 <Port_schm_read_msr>
    b53c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b53e:	9b00      	ldr	r3, [sp, #0]
    b540:	f003 0301 	and.w	r3, r3, #1
    b544:	2b00      	cmp	r3, #0
    b546:	d100      	bne.n	b54a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b548:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    b54a:	490a      	ldr	r1, [pc, #40]	; (b574 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    b54c:	9b01      	ldr	r3, [sp, #4]
    b54e:	9a00      	ldr	r2, [sp, #0]
    b550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    b554:	4a06      	ldr	r2, [pc, #24]	; (b570 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    b556:	9b01      	ldr	r3, [sp, #4]
    b558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b55c:	1c5a      	adds	r2, r3, #1
    b55e:	4904      	ldr	r1, [pc, #16]	; (b570 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    b560:	9b01      	ldr	r3, [sp, #4]
    b562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b566:	bf00      	nop
    b568:	b003      	add	sp, #12
    b56a:	f85d fb04 	ldr.w	pc, [sp], #4
    b56e:	bf00      	nop
    b570:	1fff9288 	.word	0x1fff9288
    b574:	1fff9284 	.word	0x1fff9284

0000b578 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    b578:	b500      	push	{lr}
    b57a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b57c:	f7f5 fb20 	bl	bc0 <Sys_GetCoreID>
    b580:	4603      	mov	r3, r0
    b582:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    b584:	4a0d      	ldr	r2, [pc, #52]	; (b5bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    b586:	9b01      	ldr	r3, [sp, #4]
    b588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b58c:	1e5a      	subs	r2, r3, #1
    b58e:	490b      	ldr	r1, [pc, #44]	; (b5bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    b590:	9b01      	ldr	r3, [sp, #4]
    b592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    b596:	4a0a      	ldr	r2, [pc, #40]	; (b5c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    b598:	9b01      	ldr	r3, [sp, #4]
    b59a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b59e:	f003 0301 	and.w	r3, r3, #1
    b5a2:	2b00      	cmp	r3, #0
    b5a4:	d106      	bne.n	b5b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    b5a6:	4a05      	ldr	r2, [pc, #20]	; (b5bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    b5a8:	9b01      	ldr	r3, [sp, #4]
    b5aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5ae:	2b00      	cmp	r3, #0
    b5b0:	d100      	bne.n	b5b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b5b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b5b4:	bf00      	nop
    b5b6:	b003      	add	sp, #12
    b5b8:	f85d fb04 	ldr.w	pc, [sp], #4
    b5bc:	1fff9288 	.word	0x1fff9288
    b5c0:	1fff9284 	.word	0x1fff9284

0000b5c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    b5c4:	b500      	push	{lr}
    b5c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5c8:	f7f5 fafa 	bl	bc0 <Sys_GetCoreID>
    b5cc:	4603      	mov	r3, r0
    b5ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    b5d0:	4a10      	ldr	r2, [pc, #64]	; (b614 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    b5d2:	9b01      	ldr	r3, [sp, #4]
    b5d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5d8:	2b00      	cmp	r3, #0
    b5da:	d10d      	bne.n	b5f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b5dc:	f7f5 fa21 	bl	a22 <Port_schm_read_msr>
    b5e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b5e2:	9b00      	ldr	r3, [sp, #0]
    b5e4:	f003 0301 	and.w	r3, r3, #1
    b5e8:	2b00      	cmp	r3, #0
    b5ea:	d100      	bne.n	b5ee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b5ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    b5ee:	490a      	ldr	r1, [pc, #40]	; (b618 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    b5f0:	9b01      	ldr	r3, [sp, #4]
    b5f2:	9a00      	ldr	r2, [sp, #0]
    b5f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    b5f8:	4a06      	ldr	r2, [pc, #24]	; (b614 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    b5fa:	9b01      	ldr	r3, [sp, #4]
    b5fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b600:	1c5a      	adds	r2, r3, #1
    b602:	4904      	ldr	r1, [pc, #16]	; (b614 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    b604:	9b01      	ldr	r3, [sp, #4]
    b606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b60a:	bf00      	nop
    b60c:	b003      	add	sp, #12
    b60e:	f85d fb04 	ldr.w	pc, [sp], #4
    b612:	bf00      	nop
    b614:	1fff9290 	.word	0x1fff9290
    b618:	1fff928c 	.word	0x1fff928c

0000b61c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    b61c:	b500      	push	{lr}
    b61e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b620:	f7f5 face 	bl	bc0 <Sys_GetCoreID>
    b624:	4603      	mov	r3, r0
    b626:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    b628:	4a0d      	ldr	r2, [pc, #52]	; (b660 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    b62a:	9b01      	ldr	r3, [sp, #4]
    b62c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b630:	1e5a      	subs	r2, r3, #1
    b632:	490b      	ldr	r1, [pc, #44]	; (b660 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    b634:	9b01      	ldr	r3, [sp, #4]
    b636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    b63a:	4a0a      	ldr	r2, [pc, #40]	; (b664 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    b63c:	9b01      	ldr	r3, [sp, #4]
    b63e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b642:	f003 0301 	and.w	r3, r3, #1
    b646:	2b00      	cmp	r3, #0
    b648:	d106      	bne.n	b658 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    b64a:	4a05      	ldr	r2, [pc, #20]	; (b660 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    b64c:	9b01      	ldr	r3, [sp, #4]
    b64e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b652:	2b00      	cmp	r3, #0
    b654:	d100      	bne.n	b658 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b656:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b658:	bf00      	nop
    b65a:	b003      	add	sp, #12
    b65c:	f85d fb04 	ldr.w	pc, [sp], #4
    b660:	1fff9290 	.word	0x1fff9290
    b664:	1fff928c 	.word	0x1fff928c

0000b668 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    b668:	bf00      	nop
    b66a:	4770      	bx	lr

0000b66c <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    b66c:	b510      	push	{r4, lr}
    b66e:	b084      	sub	sp, #16
    b670:	4604      	mov	r4, r0
    b672:	4608      	mov	r0, r1
    b674:	4611      	mov	r1, r2
    b676:	461a      	mov	r2, r3
    b678:	4623      	mov	r3, r4
    b67a:	f8ad 3006 	strh.w	r3, [sp, #6]
    b67e:	4603      	mov	r3, r0
    b680:	f88d 3005 	strb.w	r3, [sp, #5]
    b684:	460b      	mov	r3, r1
    b686:	f88d 3004 	strb.w	r3, [sp, #4]
    b68a:	4613      	mov	r3, r2
    b68c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b690:	f7f5 fa96 	bl	bc0 <Sys_GetCoreID>
    b694:	4603      	mov	r3, r0
    b696:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    b698:	490d      	ldr	r1, [pc, #52]	; (b6d0 <Det_ReportError+0x64>)
    b69a:	9b03      	ldr	r3, [sp, #12]
    b69c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b6a0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    b6a4:	4a0b      	ldr	r2, [pc, #44]	; (b6d4 <Det_ReportError+0x68>)
    b6a6:	9b03      	ldr	r3, [sp, #12]
    b6a8:	4413      	add	r3, r2
    b6aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b6ae:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    b6b0:	4a09      	ldr	r2, [pc, #36]	; (b6d8 <Det_ReportError+0x6c>)
    b6b2:	9b03      	ldr	r3, [sp, #12]
    b6b4:	4413      	add	r3, r2
    b6b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b6ba:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    b6bc:	4a07      	ldr	r2, [pc, #28]	; (b6dc <Det_ReportError+0x70>)
    b6be:	9b03      	ldr	r3, [sp, #12]
    b6c0:	4413      	add	r3, r2
    b6c2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b6c6:	701a      	strb	r2, [r3, #0]

    return E_OK;
    b6c8:	2300      	movs	r3, #0
}
    b6ca:	4618      	mov	r0, r3
    b6cc:	b004      	add	sp, #16
    b6ce:	bd10      	pop	{r4, pc}
    b6d0:	1fff92bc 	.word	0x1fff92bc
    b6d4:	1fff9294 	.word	0x1fff9294
    b6d8:	1fff9298 	.word	0x1fff9298
    b6dc:	1fff929c 	.word	0x1fff929c

0000b6e0 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
    b6e0:	b510      	push	{r4, lr}
    b6e2:	b084      	sub	sp, #16
    b6e4:	4604      	mov	r4, r0
    b6e6:	4608      	mov	r0, r1
    b6e8:	4611      	mov	r1, r2
    b6ea:	461a      	mov	r2, r3
    b6ec:	4623      	mov	r3, r4
    b6ee:	f8ad 3006 	strh.w	r3, [sp, #6]
    b6f2:	4603      	mov	r3, r0
    b6f4:	f88d 3005 	strb.w	r3, [sp, #5]
    b6f8:	460b      	mov	r3, r1
    b6fa:	f88d 3004 	strb.w	r3, [sp, #4]
    b6fe:	4613      	mov	r3, r2
    b700:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b704:	f7f5 fa5c 	bl	bc0 <Sys_GetCoreID>
    b708:	4603      	mov	r3, r0
    b70a:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
    b70c:	490d      	ldr	r1, [pc, #52]	; (b744 <Det_ReportRuntimeError+0x64>)
    b70e:	9b03      	ldr	r3, [sp, #12]
    b710:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b714:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
    b718:	4a0b      	ldr	r2, [pc, #44]	; (b748 <Det_ReportRuntimeError+0x68>)
    b71a:	9b03      	ldr	r3, [sp, #12]
    b71c:	4413      	add	r3, r2
    b71e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b722:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
    b724:	4a09      	ldr	r2, [pc, #36]	; (b74c <Det_ReportRuntimeError+0x6c>)
    b726:	9b03      	ldr	r3, [sp, #12]
    b728:	4413      	add	r3, r2
    b72a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b72e:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
    b730:	4a07      	ldr	r2, [pc, #28]	; (b750 <Det_ReportRuntimeError+0x70>)
    b732:	9b03      	ldr	r3, [sp, #12]
    b734:	4413      	add	r3, r2
    b736:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b73a:	701a      	strb	r2, [r3, #0]

    return E_OK;
    b73c:	2300      	movs	r3, #0
}
    b73e:	4618      	mov	r0, r3
    b740:	b004      	add	sp, #16
    b742:	bd10      	pop	{r4, pc}
    b744:	1fff92c0 	.word	0x1fff92c0
    b748:	1fff92a0 	.word	0x1fff92a0
    b74c:	1fff92a4 	.word	0x1fff92a4
    b750:	1fff92a8 	.word	0x1fff92a8

0000b754 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
    b754:	b510      	push	{r4, lr}
    b756:	b084      	sub	sp, #16
    b758:	4604      	mov	r4, r0
    b75a:	4608      	mov	r0, r1
    b75c:	4611      	mov	r1, r2
    b75e:	461a      	mov	r2, r3
    b760:	4623      	mov	r3, r4
    b762:	f8ad 3006 	strh.w	r3, [sp, #6]
    b766:	4603      	mov	r3, r0
    b768:	f88d 3005 	strb.w	r3, [sp, #5]
    b76c:	460b      	mov	r3, r1
    b76e:	f88d 3004 	strb.w	r3, [sp, #4]
    b772:	4613      	mov	r3, r2
    b774:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b778:	f7f5 fa22 	bl	bc0 <Sys_GetCoreID>
    b77c:	4603      	mov	r3, r0
    b77e:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
    b780:	490d      	ldr	r1, [pc, #52]	; (b7b8 <Det_ReportTransientFault+0x64>)
    b782:	9b03      	ldr	r3, [sp, #12]
    b784:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b788:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
    b78c:	4a0b      	ldr	r2, [pc, #44]	; (b7bc <Det_ReportTransientFault+0x68>)
    b78e:	9b03      	ldr	r3, [sp, #12]
    b790:	4413      	add	r3, r2
    b792:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b796:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
    b798:	4a09      	ldr	r2, [pc, #36]	; (b7c0 <Det_ReportTransientFault+0x6c>)
    b79a:	9b03      	ldr	r3, [sp, #12]
    b79c:	4413      	add	r3, r2
    b79e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b7a2:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
    b7a4:	4a07      	ldr	r2, [pc, #28]	; (b7c4 <Det_ReportTransientFault+0x70>)
    b7a6:	9b03      	ldr	r3, [sp, #12]
    b7a8:	4413      	add	r3, r2
    b7aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b7ae:	701a      	strb	r2, [r3, #0]

    return E_OK;
    b7b0:	2300      	movs	r3, #0
}
    b7b2:	4618      	mov	r0, r3
    b7b4:	b004      	add	sp, #16
    b7b6:	bd10      	pop	{r4, pc}
    b7b8:	1fff92b8 	.word	0x1fff92b8
    b7bc:	1fff92ac 	.word	0x1fff92ac
    b7c0:	1fff92b0 	.word	0x1fff92b0
    b7c4:	1fff92b4 	.word	0x1fff92b4

0000b7c8 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
    b7c8:	bf00      	nop
    b7ca:	4770      	bx	lr

0000b7cc <Clock_Ip_au8DividerCallbackIndex>:
    b7cc:	0c00 0e0d 0201 0603 0409 0a07 0805 000b     ................

0000b7dc <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000b7ec <Clock_Ip_au8XoscCallbackIndex>:
    b7ec:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000b7fc <Clock_Ip_au8IrcoscCallbackIndex>:
    b7fc:	0100 0302 0004 0000 0000 0000 0000 0000     ................

0000b80c <Clock_Ip_au8GateCallbackIndex>:
    b80c:	0200 0601 0301 0104 0500 0000 0000 0000     ................

0000b81c <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000b82c <Clock_Ip_au8PllCallbackIndex>:
    b82c:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000b83c <Clock_Ip_au8SelectorCallbackIndex>:
    b83c:	0800 0a09 0109 0302 0504 0706 0000 0000     ................

0000b84c <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000b85c <Clock_Ip_au8CmuCallbackIndex>:
	...

0000b86c <Clock_Ip_au8ClockFeatures>:
	...
    b87c:	0000 0100 0000 0000 0000 0000 0002 0000     ................
    b88c:	0000 0000 0300 0000 0000 0000 0000 0004     ................
    b89c:	0000 0000 0000 0500 0000 0000 0000 0000     ................
    b8ac:	0006 0000 0000 0000 0100 0000 0000 0000     ................
    b8bc:	0000 0001 0000 0000 0000 0400 0000 0000     ................
    b8cc:	0000 0000 0005 0000 0001 0000 0401 0000     ................
    b8dc:	0200 0000 0100 0005 0000 0003 0000 0402     ................
    b8ec:	0000 0400 0000 0200 0005 0000 0005 0000     ................
    b8fc:	0403 0000 0600 0000 0300 0005 0000 0007     ................
    b90c:	0000 0500 0000 0000 0000 0000 0006 0000     ................
	...
    b94c:	0000 0005 0000 0000 0000 0600 0100 0000     ................
    b95c:	0000 0000 0007 0003 0000 0000 0000 0000     ................
    b96c:	0000 0000 0000 0006 0000 0000 0000 0700     ................
    b97c:	0100 0000 0000 0000 0008 0003 0000 0000     ................
	...
    b994:	0000 0009 0000 0000 0000 0a00 0100 0000     ................
    b9a4:	0000 0000 000b 0003 0000 0000 0000 0000     ................
    b9b4:	0000 0000 0000 000c 0000 0000 0000 0d00     ................
    b9c4:	0100 0000 0000 0000 000e 0003 0000 0000     ................
    b9d4:	0800 0000 0000 0000 0000 0009 0000 0000     ................
    b9e4:	0000 0a00 0000 0000 0000 0000 000b 0000     ................
    b9f4:	0000 0000 0b01 0000 0000 0000 0200 000b     ................
    ba04:	0000 0000 0000 0b03 0000 0000 0000 0000     ................
	...
    ba1c:	0400 0000 003b 003b 0000 0004 2700 2700     ....;.;......'.'
    ba2c:	0000 0100 0000 0000 0000 0000 0007 0000     ................
    ba3c:	7300 0000 0700 0000 0000 0032 0000 0009     .s........2.....
    ba4c:	0000 0200 0000 0700 0000 0000 0021 0000     ............!...
    ba5c:	0009 0000 0400 0000 0900 0000 0000 0003     ................
    ba6c:	0000 0007 0000 6100 0000 0700 0000 0000     .......a........
    ba7c:	0024 0000 0007 0000 2500 0000 0700 0000     $........%......
    ba8c:	0000 002b 0000 0004 5a00 5a00 0000 0700     ..+......Z.Z....
    ba9c:	0000 0000 0020 0000 0004 3800 3800 0000     .... ......8.8..
    baac:	0400 0000 0039 0039 0000 0004 3a00 3a00     ....9.9......:.:
    babc:	0000 0400 0000 0026 0026 0000 0004 6600     ......&.&......f
    bacc:	6600 0000 0400 0000 0037 0037 0000 0004     .f......7.7.....
    badc:	2c00 2c00 0000 0400 0000 002d 002d 0000     .,.,......-.-...
    baec:	0004 2e00 2e00 0000 0200 0000 4040 0040     ............@@@.
    bafc:	0000 0004 6a00 6a00 0000 0400 0000 006b     .....j.j......k.
    bb0c:	006b 0000 0004 6c00 6c00 0000 0900 0000     k......l.l......
    bb1c:	0000 0001 0000 0009 0000 0000 0000 0700     ................
    bb2c:	0000 0000 0036 0000 0007 0000 3100 0000     ....6........1..
    bb3c:	0700 0000 0000 0049 0000 0007 0000 4a00     ......I........J
    bb4c:	0000 0700 0000 0000 004b 0000 0007 0000     ........K.......
    bb5c:	4c00 0000 0700 0000 0000 004d 0000 0007     .L........M.....
    bb6c:	0000 3d00 0000 0300 0000 0000 0000 0000     ...=............

0000bb7c <Clock_Ip_au16SelectorEntryHardwareValue>:
    bb7c:	0a03 0101 0001 0101 0002 0404 0603 0200     ................
    bb8c:	0810 0001 0100 0202 0000 0000 0007 0000     ................
    bb9c:	0009 0000 0000 0000 0c0e 0000 0000 0000     ................
	...

0000bbd4 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    bbd4:	0000 0002 0300 0000 0601 0000 0000 0000     ................
	...

0000bc04 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    bc04:	0700 0000 0000 0000 0000 0202 0303 0101     ................
    bc14:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000bc34 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    bc34:	0001 0000 0000 0000 0000 0202 0303 0101     ................
    bc44:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000bc64 <Clock_Ip_au8DividerValueHardwareValue>:
    bc64:	0100 0002 0003 0000 0004 0000 0000 0000     ................
    bc74:	0005 0000 0000 0000 0000 0000 0000 0000     ................
    bc84:	0006 0000 0000 0000 0000 0000 0000 0000     ................
	...
    bca4:	0007 0000                                   ....

0000bca8 <Clock_Ip_apxScgPeriphAsyncDivs>:
    bca8:	4204 4006 4304 4006 4104 4006 4604 4006     .B.@.C.@.A.@.F.@

0000bcb8 <Clock_Ip_aeSourceTypeClockName>:
    bcb8:	0000 0000 0001 0000 0001 0000 0001 0000     ................
    bcc8:	0001 0000 0001 0000 0001 0000 0001 0000     ................
    bcd8:	0002 0000 0003 0000 0001 0000 0001 0000     ................
    bce8:	0001 0000 0001 0000 0002 0000 0002 0000     ................
    bcf8:	0003 0000 0003 0000 0001 0000 0001 0000     ................
    bd08:	0004 0000 0004 0000 0004 0000 0004 0000     ................
	...

0000bd74 <Clock_Ip_aeHwPllName>:
    bd74:	0009 0000                                   ....

0000bd78 <Clock_Ip_aeHwDfsName>:
    bd78:	0057 0000                                   W...

0000bd7c <Clock_Ip_axDividerCallbacks>:
    bd7c:	21b9 0000 21c3 0000 21dd 0000 21f7 0000     .!...!...!...!..
    bd8c:	2211 0000 222b 0000 2245 0000 225f 0000     ."..+"..E".._"..
    bd9c:	2279 0000 2293 0000 22ad 0000 22c7 0000     y"..."..."..."..
    bdac:	22e1 0000 22fb 0000 2315 0000               ."..."...#..

0000bdb8 <Clock_Ip_axDividerTriggerCallbacks>:
    bdb8:	2689 0000 2689 0000                         .&...&..

0000bdc0 <Clock_Ip_axExtOscCallbacks>:
    bdc0:	2695 0000 2695 0000 2695 0000 269f 0000     .&...&...&...&..
    bdd0:	2695 0000 26a9 0000 26c3 0000 26dd 0000     .&...&...&...&..
    bde0:	2761 0000 2775 0000                         a'..u'..

0000bde8 <Clock_Ip_axFracDivCallbacks>:
    bde8:	2935 0000 2935 0000 293f 0000               5)..5)..?)..

0000bdf4 <Clock_Ip_axGateCallbacks>:
    bdf4:	2959 0000 2963 0000 2a63 0000 2a7d 0000     Y)..c)..c*..}*..
    be04:	2a13 0000 2a2d 0000 29c3 0000 29dd 0000     .*..-*...)...)..
    be14:	2973 0000 298d 0000 2ab3 0000 2acd 0000     s)...)...*...*..
    be24:	2b03 0000 2b1d 0000                         .+...+..

0000be2c <Clock_Ip_axIntOscCallbacks>:
    be2c:	2cc9 0000 2cc9 0000 2cd3 0000 2cdd 0000     .,...,...,...,..
    be3c:	2cf7 0000 2d11 0000 2d25 0000 2d3f 0000     .,...-..%-..?-..
    be4c:	2d59 0000 2d6d 0000 2d87 0000 2da1 0000     Y-..m-...-...-..
    be5c:	2e49 0000 2e63 0000 2e7d 0000               I...c...}...

0000be68 <Clock_Ip_axCmuCallbacks>:
    be68:	3419 0000 3423 0000 342f 0000 3419 0000     .4..#4../4...4..

0000be78 <Clock_Ip_axPllCallbacks>:
    be78:	3439 0000 3439 0000 3443 0000 3439 0000     94..94..C4..94..
    be88:	344f 0000 3459 0000 3473 0000 348d 0000     O4..Y4..s4...4..
    be98:	3531 0000 351d 0000                         15...5..

0000bea0 <Clock_Ip_axPcfsCallbacks>:
    bea0:	368d 0000                                   .6..

0000bea4 <Clock_Ip_axSelectorCallbacks>:
    bea4:	3699 0000 3699 0000 36a3 0000 36bd 0000     .6...6...6...6..
    beb4:	3699 0000 36d7 0000 36f1 0000 370b 0000     .6...6...6...7..
    bec4:	3725 0000 373f 0000 3759 0000 3773 0000     %7..?7..Y7..s7..
    bed4:	378d 0000 37a7 0000 37c1 0000 37db 0000     .7...7...7...7..
    bee4:	37f5 0000 380f 0000 3829 0000 3843 0000     .7...8..)8..C8..
    bef4:	385d 0000 3877 0000                         ]8..w8..

0000befc <ClockSource>:
    befc:	0000 0000 0008 0000 0002 0000 0005 0000     ................
	...
    bf14:	0009 0000                                   ....

0000bf18 <ResetReasonArray>:
    bf18:	0000 0000 0001 0000 0002 0000 0003 0000     ................
    bf28:	0004 0000 0005 0000 0006 0000 0007 0000     ................
    bf38:	0008 0000 0009 0000 000a 0000 000b 0000     ................
    bf48:	000c 0000 000d 0000 000e 0000               ............

0000bf54 <Port_au32PortCiPortBaseAddr>:
    bf54:	9000 4004 a000 4004 b000 4004 c000 4004     ...@...@...@...@
    bf64:	d000 4004                                   ...@

0000bf68 <Port_au32PortCiGpioBaseAddr>:
    bf68:	f000 400f f040 400f f080 400f f0c0 400f     ...@@..@...@...@
    bf78:	f100 400f                                   ...@

0000bf7c <ftmGptBase>:
    bf7c:	8000 4003 9000 4003 a000 4003 6000 4002     ...@...@...@.`.@

0000bf8c <Mcu_aClockConfigPB>:
	...
    bf94:	0101 1c00 0010 0400 0029 0100 0005 0000     ........).......
    bfa4:	0001 0000 0000 0000 0057 0000 0000 0000     ........W.......
    bfb4:	0000 0000 0008 0000 1200 007a 0001 0000     ..........z.....
    bfc4:	0001 0000 0000 0000 0057 0000 0000 0000     ........W.......
    bfd4:	0057 0000 0000 0000 0000 0000 0000 0000     W...............
	...
    bff4:	0019 0000 0005 0000 001a 0000 0002 0000     ................
    c004:	001b 0000 0005 0000 002a 0000 0005 0000     ........*.......
    c014:	0028 0000 000e 0000 0029 0000 0001 0000     (.......).......
    c024:	0056 0000 001c 0000 0032 0000 002a 0000     V.......2...*...
    c034:	002b 0000 0014 0000 002c 0000 0014 0000     +.......,.......
    c044:	002d 0000 0014 0000 002e 0000 0014 0000     -...............
    c054:	003f 0000 000c 0000 0040 0000 0000 0000     ?.......@.......
    c064:	0041 0000 0000 0000 0042 0000 0000 0000     A.......B.......
    c074:	0031 0000 0000 0000 0045 0000 0000 0000     1.......E.......
    c084:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    c094:	0044 0000 0000 0000 0030 0000 0000 0000     D.......0.......
    c0a4:	003d 0000 0000 0000 0043 0000 0000 0000     =.......C.......
    c0b4:	0049 0000 0000 0000 004a 0000 0000 0000     I.......J.......
    c0c4:	004b 0000 0000 0000 0048 0000 0000 0000     K.......H.......
    c0d4:	000c 0000 0002 0000 0000 0000 000d 0000     ................
    c0e4:	0002 0000 0000 0000 000e 0000 0001 0000     ................
    c0f4:	0000 0000 000f 0000 0001 0000 0000 0000     ................
    c104:	001d 0000 0001 0000 0000 0000 001e 0000     ................
    c114:	0008 0000 0000 0000 001f 0000 0001 0000     ................
    c124:	0000 0000 0021 0000 0001 0000 0000 0000     ....!...........
    c134:	0022 0000 0002 0000 0000 0000 0023 0000     "...........#...
    c144:	0001 0000 0000 0000 0025 0000 0003 0000     ........%.......
    c154:	0000 0000 0026 0000 0004 0000 0000 0000     ....&...........
    c164:	0027 0000 0002 0000 0000 0000 0032 0000     '...........2...
    c174:	0001 0000 0000 0000 0048 0000 0001 0000     ........H.......
    c184:	0001 0000 0056 0000 0001 0000 0001 0000     ....V...........
    c194:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
    c1ac:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
    c1c4:	0057 0000 0000 0000 0057 0000 0057 0000     W.......W...W...
	...
    c1e0:	0014 0000 7d00 0000 0015 0000 7d00 0000     .....}.......}..
    c1f0:	0016 0000 7d00 0000 0017 0000 8000 0000     .....}..........
    c200:	0012 0000 0001 0000 0013 0000 0001 0000     ................
    c210:	0030 0000 0000 0000 0031 0000 0000 0000     0.......1.......
    c220:	0032 0000 0000 0000 0033 0000 0000 0000     2.......3.......
    c230:	0034 0000 0000 0000 0035 0000 0001 0000     4.......5.......
    c240:	0036 0000 0000 0000 0037 0000 0001 0000     6.......7.......
    c250:	0038 0000 0001 0000 0039 0000 0000 0000     8.......9.......
    c260:	003a 0000 0000 0000 003b 0000 0000 0000     :.......;.......
    c270:	003c 0000 0000 0000 003d 0000 0000 0000     <.......=.......
    c280:	003e 0000 0000 0000 003f 0000 0001 0000     >.......?.......
    c290:	0040 0000 0000 0000 0041 0000 0000 0000     @.......A.......
    c2a0:	0042 0000 0000 0000 0043 0000 0000 0000     B.......C.......
    c2b0:	0044 0000 0000 0000 0045 0000 0000 0000     D.......E.......
    c2c0:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    c2d0:	0048 0000 0000 0000 0049 0000 0000 0000     H.......I.......
    c2e0:	004a 0000 0000 0000 004b 0000 0000 0000     J.......K.......
    c2f0:	004c 0000 0001 0000 004d 0000 0001 0000     L.......M.......
    c300:	004e 0000 0000 0000 004f 0000 0000 0000     N.......O.......
    c310:	0050 0000 0001 0000 0051 0000 0001 0000     P.......Q.......
    c320:	0052 0000 0001 0000 0053 0000 0001 0000     R.......S.......
    c330:	0054 0000 0001 0000 0055 0000 0000 0000     T.......U.......
    c340:	0056 0000 0001 0000 0057 0000 0000 0000     V.......W.......
    c350:	0000 0000 0057 0000 0000 0000 0057 0000     ....W.......W...
	...

0000c384 <FTM_0_InitConfig_PB>:
    c384:	0000 0000 0003 0000 0007 0000 0001 0000     ................

0000c394 <FTM_0_ChannelConfig_PB>:
    c394:	0000 0000 7b15 0000 0000 0000 0000 0000     .....{..........
    c3a4:	0001 0000 7b15 0000 0001 0000 0000 0000     .....{..........

0000c3b4 <Gpt_pInitPredefTimerChannelPB>:
	...

0000c3c4 <u8GptChannelIdToIndexMap>:
    c3c4:	0100 0000                                   ....

0000c3c8 <Gpt_InitChannelPB>:
    c3c8:	0000 0000 08b1 0000 0000 0000 ffff 0000     ................
    c3d8:	0000 0000 8b48 1fff 0000 0000 08bd 0000     ....H...........
    c3e8:	0000 0000 ffff 0000 0000 0000 8b60 1fff     ............`...

0000c3f8 <Gpt_Config>:
    c3f8:	0002 0000 c3c8 0000 0001 0000 8b38 1fff     ............8...
    c408:	c3b4 0000 c3c4 0000                         ........

0000c410 <aIrqConfiguration>:
    c410:	0063 0000 0f01 0000 6d8b 0000               c........m..

0000c41c <intCtrlConfig>:
    c41c:	0001 0000 c410 0000                         ........

0000c424 <Mcu_Config>:
    c424:	005a 0000 0000 0000 0001 0000 0001 0000     Z...............
    c434:	c5c4 0000 bf8c 0000 c5d0 0000               ............

0000c440 <OsIf_xPredefinedConfig>:
    c440:	0000 0000 6c00 02dc                         .....l..

0000c448 <OsIf_apxPredefinedConfig>:
    c448:	c440 0000                                   @...

0000c44c <Platform_uConfiguration>:
    c44c:	c454 0000                                   T...

0000c450 <Platform_Config>:
    c450:	c44c 0000                                   L...

0000c454 <ipwConfig>:
    c454:	c41c 0000 0000 0000                         ........

0000c45c <g_pin_mux_InitConfigArr>:
    c45c:	c000 4004 f0c0 400f 0000 0000 0002 0000     ...@...@........
    c46c:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...
    c484:	c000 4004 f0c0 400f 0010 0000 0002 0000     ...@...@........
    c494:	0001 0000 0002 0000 0000 0000 0000 0000     ................
    c4a4:	0000 0000 0100 0000                         ........

0000c4ac <au8Port_PartitionList>:
    c4ac:	0001 0000                                   ....

0000c4b0 <au32Port_PinToPartitionMap>:
    c4b0:	0001 0000 0001 0000                         ........

0000c4b8 <Port_au16NoUnUsedPadsArrayDefault>:
    c4b8:	0000 0001 0002 0003 0006 0007 0008 0009     ................
    c4c8:	000b 000c 000d 000e 000f 0010 0011 0020     .............. .
    c4d8:	0021 0022 0023 0024 0025 0026 0027 0028     !.".#.$.%.&.'.(.
    c4e8:	0029 002a 002b 002c 002d 002e 002f 0030     ).*.+.,.-.../.0.
    c4f8:	0031 0040 0041 0042 0043 0046 0047 0048     1.@.A.B.C.F.G.H.
    c508:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
    c518:	0051 0061 0062 0063 0064 0065 0066 0067     Q.a.b.c.d.e.f.g.
    c528:	0068 0069 006a 006b 006c 006d 006e 006f     h.i.j.k.l.m.n.o.
    c538:	0071 0080 0081 0082 0083 0084 0085 0086     q...............
    c548:	0087 0088 0089 008a 008b 008c 008d 008e     ................
    c558:	008f 0090                                   ....

0000c55c <Port_UnUsedPin>:
    c55c:	0100 0000 0001 0000 0000 0000               ............

0000c568 <Port_aPinConfigDefault>:
    c568:	0060 0000 0100 0000 0000 0000 0002 0000     `...............
    c578:	0001 0001 0070 0000 0100 0000 0001 0000     ....p...........
    c588:	0002 0000 0001 0001                         ........

0000c590 <Port_Config>:
    c590:	0002 0052 c4b8 0000 c55c 0000 c568 0000     ..R.....\...h...
	...
    c5a8:	c4b0 0000 c4ac 0000 c45c 0000               ........\...

0000c5b4 <Power_Ip_RCM_ConfigPB>:
	...

0000c5bc <Power_Ip_PMC_ConfigPB>:
    c5bc:	0000 0000                                   ....

0000c5c0 <Power_Ip_SMC_ConfigPB>:
    c5c0:	0000 0000                                   ....

0000c5c4 <Power_Ip_aModeConfigPB>:
	...

0000c5d0 <Power_Ip_HwIPsConfigPB>:
    c5d0:	c5b4 0000 c5bc 0000 c5c0 0000               ............

0000c5dc <__INIT_TABLE>:
    c5dc:	00000002 	.word	0x00000002
    c5e0:	1fff8b10 	.word	0x1fff8b10
    c5e4:	0000c604 	.word	0x0000c604
    c5e8:	0000c66c 	.word	0x0000c66c
    c5ec:	1fff8800 	.word	0x1fff8800
    c5f0:	00000000 	.word	0x00000000
    c5f4:	00000310 	.word	0x00000310

0000c5f8 <__ZERO_TABLE>:
    c5f8:	00000001 	.word	0x00000001
    c5fc:	1fff8b80 	.word	0x1fff8b80
    c600:	1fff92d0 	.word	0x1fff92d0
