
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000bab 	.word	0x00000bab
  10:	00000bad 	.word	0x00000bad
  14:	00000baf 	.word	0x00000baf
  18:	00000bb1 	.word	0x00000bb1
	...
  2c:	00000bb3 	.word	0x00000bb3
  30:	00000bb5 	.word	0x00000bb5
  34:	00000000 	.word	0x00000000
  38:	00000bb7 	.word	0x00000bb7
  3c:	00000bb9 	.word	0x00000bb9
  40:	00000bbb 	.word	0x00000bbb
  44:	00000bbb 	.word	0x00000bbb
  48:	00000bbb 	.word	0x00000bbb
  4c:	00000bbb 	.word	0x00000bbb
  50:	00000bbb 	.word	0x00000bbb
  54:	00000bbb 	.word	0x00000bbb
  58:	00000bbb 	.word	0x00000bbb
  5c:	00000bbb 	.word	0x00000bbb
  60:	00000bbb 	.word	0x00000bbb
  64:	00000bbb 	.word	0x00000bbb
  68:	00000bbb 	.word	0x00000bbb
  6c:	00000bbb 	.word	0x00000bbb
  70:	00000bbb 	.word	0x00000bbb
  74:	00000bbb 	.word	0x00000bbb
  78:	00000bbb 	.word	0x00000bbb
  7c:	00000bbb 	.word	0x00000bbb
  80:	00000bbb 	.word	0x00000bbb
  84:	00000bbb 	.word	0x00000bbb
  88:	00000bbb 	.word	0x00000bbb
  8c:	00000bbb 	.word	0x00000bbb
  90:	00000bbb 	.word	0x00000bbb
  94:	00000bbb 	.word	0x00000bbb
  98:	00000bbb 	.word	0x00000bbb
  9c:	00000bbb 	.word	0x00000bbb
  a0:	00000bbb 	.word	0x00000bbb
  a4:	00000bbb 	.word	0x00000bbb
  a8:	00000bbb 	.word	0x00000bbb
  ac:	00000bbb 	.word	0x00000bbb
  b0:	00000bbb 	.word	0x00000bbb
  b4:	00000bbb 	.word	0x00000bbb
  b8:	00000bbb 	.word	0x00000bbb
  bc:	00000bbb 	.word	0x00000bbb
  c0:	00000bbb 	.word	0x00000bbb
  c4:	00000bbb 	.word	0x00000bbb
  c8:	00000bbb 	.word	0x00000bbb
  cc:	00000bbb 	.word	0x00000bbb
  d0:	00000bbb 	.word	0x00000bbb
  d4:	00000bbb 	.word	0x00000bbb
  d8:	00000bbb 	.word	0x00000bbb
  dc:	00000bbb 	.word	0x00000bbb
  e0:	00000bbb 	.word	0x00000bbb
  e4:	00000bbb 	.word	0x00000bbb
  e8:	00000bbb 	.word	0x00000bbb
  ec:	00000bbb 	.word	0x00000bbb
  f0:	00000bbb 	.word	0x00000bbb
  f4:	00000bbb 	.word	0x00000bbb
  f8:	00000bbb 	.word	0x00000bbb
  fc:	00000bbb 	.word	0x00000bbb
 100:	00000bbb 	.word	0x00000bbb
 104:	00000bbb 	.word	0x00000bbb
 108:	00000bbb 	.word	0x00000bbb
 10c:	00000bbb 	.word	0x00000bbb
 110:	00000bbb 	.word	0x00000bbb
 114:	00000bbb 	.word	0x00000bbb
 118:	00000bbb 	.word	0x00000bbb
 11c:	00000bbb 	.word	0x00000bbb
 120:	00000bbb 	.word	0x00000bbb
 124:	00000bbb 	.word	0x00000bbb
 128:	00000bbb 	.word	0x00000bbb
 12c:	00000bbb 	.word	0x00000bbb
 130:	00000bbb 	.word	0x00000bbb
 134:	00000bbb 	.word	0x00000bbb
 138:	00000bbb 	.word	0x00000bbb
 13c:	00000bbb 	.word	0x00000bbb
 140:	00000bbb 	.word	0x00000bbb
 144:	00000bbb 	.word	0x00000bbb
 148:	00000bbb 	.word	0x00000bbb
 14c:	00000bbb 	.word	0x00000bbb
 150:	00000bbb 	.word	0x00000bbb
 154:	00000bbb 	.word	0x00000bbb
 158:	00000bbb 	.word	0x00000bbb
 15c:	00000bbb 	.word	0x00000bbb
 160:	00000bbb 	.word	0x00000bbb
 164:	00000bbb 	.word	0x00000bbb
 168:	00000bbb 	.word	0x00000bbb
 16c:	00000bbb 	.word	0x00000bbb
 170:	00000bbb 	.word	0x00000bbb
 174:	00000bbb 	.word	0x00000bbb
 178:	00000bbb 	.word	0x00000bbb
 17c:	00000bbb 	.word	0x00000bbb
 180:	00000bbb 	.word	0x00000bbb
 184:	00000bbb 	.word	0x00000bbb
 188:	00000bbb 	.word	0x00000bbb
 18c:	00000bbb 	.word	0x00000bbb
 190:	00000bbb 	.word	0x00000bbb
 194:	00000bbb 	.word	0x00000bbb
 198:	00000bbb 	.word	0x00000bbb
 19c:	00000bbb 	.word	0x00000bbb
 1a0:	00000bbb 	.word	0x00000bbb
 1a4:	00000bbb 	.word	0x00000bbb
 1a8:	00000bbb 	.word	0x00000bbb
 1ac:	00000bbb 	.word	0x00000bbb
 1b0:	00000bbb 	.word	0x00000bbb
 1b4:	00000bbb 	.word	0x00000bbb
 1b8:	00000bbb 	.word	0x00000bbb
 1bc:	00000bbb 	.word	0x00000bbb
 1c0:	00000bbb 	.word	0x00000bbb
 1c4:	00000bbb 	.word	0x00000bbb
 1c8:	00000bbb 	.word	0x00000bbb
 1cc:	00000bbb 	.word	0x00000bbb
 1d0:	00000bbb 	.word	0x00000bbb
 1d4:	00000bbb 	.word	0x00000bbb
 1d8:	00000bbb 	.word	0x00000bbb
 1dc:	00000bbb 	.word	0x00000bbb
 1e0:	00000bbb 	.word	0x00000bbb
 1e4:	00000bbb 	.word	0x00000bbb
 1e8:	00000bbb 	.word	0x00000bbb
 1ec:	00000bbb 	.word	0x00000bbb
 1f0:	00000bbb 	.word	0x00000bbb
 1f4:	00000bbb 	.word	0x00000bbb
 1f8:	00000bbb 	.word	0x00000bbb
 1fc:	00000bbb 	.word	0x00000bbb
 200:	00000bbb 	.word	0x00000bbb
 204:	00000bbb 	.word	0x00000bbb
 208:	00000bbb 	.word	0x00000bbb
 20c:	00000bbb 	.word	0x00000bbb
 210:	00000bbb 	.word	0x00000bbb
 214:	00000bbb 	.word	0x00000bbb
 218:	00000bbb 	.word	0x00000bbb
 21c:	00000bbb 	.word	0x00000bbb
 220:	00000bbb 	.word	0x00000bbb
 224:	00000bbb 	.word	0x00000bbb
 228:	00000bbb 	.word	0x00000bbb
 22c:	00000bbb 	.word	0x00000bbb
 230:	00000bbb 	.word	0x00000bbb
 234:	00000bbb 	.word	0x00000bbb
 238:	00000bbb 	.word	0x00000bbb
 23c:	00000bbb 	.word	0x00000bbb
 240:	00000bbb 	.word	0x00000bbb
 244:	00000bbb 	.word	0x00000bbb
 248:	00000bbb 	.word	0x00000bbb
 24c:	00000bbb 	.word	0x00000bbb
 250:	00000bbb 	.word	0x00000bbb
 254:	00000bbb 	.word	0x00000bbb
 258:	00000bbb 	.word	0x00000bbb
 25c:	00000bbb 	.word	0x00000bbb
 260:	00000bbb 	.word	0x00000bbb
 264:	00000bbb 	.word	0x00000bbb
 268:	00000bbb 	.word	0x00000bbb
 26c:	00000bbb 	.word	0x00000bbb
 270:	00000bbb 	.word	0x00000bbb
 274:	00000bbb 	.word	0x00000bbb
 278:	00000bbb 	.word	0x00000bbb
 27c:	00000bbb 	.word	0x00000bbb
 280:	00000bbb 	.word	0x00000bbb
 284:	00000bbb 	.word	0x00000bbb
 288:	00000bbb 	.word	0x00000bbb
 28c:	00000bbb 	.word	0x00000bbb
 290:	00000bbb 	.word	0x00000bbb
 294:	00000bbb 	.word	0x00000bbb
 298:	00000bbb 	.word	0x00000bbb
 29c:	00000bbb 	.word	0x00000bbb
 2a0:	00000bbb 	.word	0x00000bbb
 2a4:	00000bbb 	.word	0x00000bbb
 2a8:	00000bbb 	.word	0x00000bbb
 2ac:	00000bbb 	.word	0x00000bbb
 2b0:	00000bbb 	.word	0x00000bbb
 2b4:	00000bbb 	.word	0x00000bbb
 2b8:	00000bbb 	.word	0x00000bbb
 2bc:	00000bbb 	.word	0x00000bbb
 2c0:	00000bbb 	.word	0x00000bbb
 2c4:	00000bbb 	.word	0x00000bbb
 2c8:	00000bbb 	.word	0x00000bbb
 2cc:	00000bbb 	.word	0x00000bbb
 2d0:	00000bbb 	.word	0x00000bbb
 2d4:	00000bbb 	.word	0x00000bbb
 2d8:	00000bbb 	.word	0x00000bbb
 2dc:	00000bbb 	.word	0x00000bbb
 2e0:	00000bbb 	.word	0x00000bbb
 2e4:	00000bbb 	.word	0x00000bbb
 2e8:	00000bbb 	.word	0x00000bbb
 2ec:	00000bbb 	.word	0x00000bbb
 2f0:	00000bbb 	.word	0x00000bbb
 2f4:	00000bbb 	.word	0x00000bbb
 2f8:	00000bbb 	.word	0x00000bbb
 2fc:	00000bbb 	.word	0x00000bbb
 300:	00000bbb 	.word	0x00000bbb
 304:	00000bbb 	.word	0x00000bbb
 308:	00000bbb 	.word	0x00000bbb
 30c:	00000bbb 	.word	0x00000bbb

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fac9 	bl	a18 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb88 	bl	ba0 <startup_go_to_user_mode>
     490:	f000 fa14 	bl	8bc <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff9298 	.word	0x1fff9298

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fad3 	bl	b44 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__BSS_SRAM_SIZE+0x12c>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__BSS_SRAM_SIZE+0x12c>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__BSS_SRAM_SIZE+0x130>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__BSS_SRAM_SIZE+0x130>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__BSS_SRAM_SIZE+0x126>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0x164>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__BSS_SRAM_SIZE+0xa4>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__BSS_SRAM_SIZE+0x15c>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__BSS_SRAM_SIZE+0x156>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__BSS_SRAM_SIZE+0x48>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__BSS_SRAM_SIZE+0x152>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__BSS_SRAM_SIZE+0x152>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__BSS_SRAM_SIZE+0x70>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__BSS_SRAM_SIZE+0x14a>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__BSS_SRAM_SIZE+0x14a>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__BSS_SRAM_SIZE+0x138>
     7c4:	d056      	beq.n	874 <__BSS_SRAM_SIZE+0x134>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0x168>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__BSS_SRAM_SIZE+0xf0>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__BSS_SRAM_SIZE+0x14e>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__BSS_SRAM_SIZE+0x14e>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__BSS_SRAM_SIZE+0x11e>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__BSS_SRAM_SIZE+0x146>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__BSS_SRAM_SIZE+0x146>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__BSS_SRAM_SIZE+0x86>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__BSS_SRAM_SIZE+0x86>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__BSS_SRAM_SIZE+0x11e>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__BSS_SRAM_SIZE+0x70>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__BSS_SRAM_SIZE+0xf0>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__BSS_SRAM_SIZE+0x48>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Gpt_Notification_0>:
void EcuM_Init( void );

/*This function is gonna be called on ISR from FTM0_CH0_CH1, it is basically a callback
called by FTM_0_CH_0_CH_1_ISR library function*/
void Gpt_Notification_0( void )
{
     8b0:	b508      	push	{r3, lr}
    /*here, we just toggle led connected to D0*/
    Dio_FlipChannel( DioConf_DioChannel_D0_BLUE_LED );
     8b2:	2060      	movs	r0, #96	; 0x60
     8b4:	f005 fadf 	bl	5e76 <Dio_FlipChannel>
}
     8b8:	bf00      	nop
     8ba:	bd08      	pop	{r3, pc}

000008bc <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8bc:	b508      	push	{r3, lr}
    EcuM_Init();
     8be:	f000 f809 	bl	8d4 <EcuM_Init>
    /*Start the timer and set it to Running state with a timeout of 100ms*/
    /*  Counter = ( Timeout * Tfrec ) / Preescler
        Counter = ( 0.100 * 48MHz ) / 128 = 37,500      */
    Gpt_StartTimer( GptConf_GptChannelConfiguration_GptChannelConfiguration_0, 37500u );
     8c2:	f249 217c 	movw	r1, #37500	; 0x927c
     8c6:	2000      	movs	r0, #0
     8c8:	f006 fe4e 	bl	7568 <Gpt_StartTimer>
    /*Enable notifications, Gpt_TimeoutCallback will be called on each timeout*/
    Gpt_EnableNotification( GptConf_GptChannelConfiguration_GptChannelConfiguration_0 );
     8cc:	2000      	movs	r0, #0
     8ce:	f006 ff39 	bl	7744 <Gpt_EnableNotification>

    while( 1u )
     8d2:	e7fe      	b.n	8d2 <main+0x16>

000008d4 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     8d4:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     8d6:	480a      	ldr	r0, [pc, #40]	; (900 <EcuM_Init+0x2c>)
     8d8:	f004 f98c 	bl	4bf4 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     8dc:	2000      	movs	r0, #0
     8de:	f004 f9dd 	bl	4c9c <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     8e2:	2000      	movs	r0, #0
     8e4:	f004 f9fe 	bl	4ce4 <Mcu_SetMode>
    
    /*Enable and setup interrupts*/
    Platform_Init( NULL_PTR );
     8e8:	2000      	movs	r0, #0
     8ea:	f000 faeb 	bl	ec4 <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration, for this case
    ports D16 and D0 are configured as output*/
    Port_Init( &Port_Config );
     8ee:	4805      	ldr	r0, [pc, #20]	; (904 <EcuM_Init+0x30>)
     8f0:	f004 fd82 	bl	53f8 <Port_Init>
    /*Apply Gpt configuration for FTM0 channel 0*/
    Gpt_Init( &Gpt_Config );
     8f4:	4804      	ldr	r0, [pc, #16]	; (908 <EcuM_Init+0x34>)
     8f6:	f006 fc1b 	bl	7130 <Gpt_Init>
}
     8fa:	bf00      	nop
     8fc:	bd08      	pop	{r3, pc}
     8fe:	bf00      	nop
     900:	0000c388 	.word	0x0000c388
     904:	0000c4f4 	.word	0x0000c4f4
     908:	0000c35c 	.word	0x0000c35c

0000090c <Gpt_Ipw_FtmGetTimeElapsed>:
#define GPT_START_SEC_CODE
#include "Gpt_MemMap.h"

#if (FTM_GPT_IP_USED == STD_ON)
static Gpt_ValueType Gpt_Ipw_FtmGetTimeElapsed(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig, Gpt_HwChannelInfoType * pReturnHwChannelInfo)
{
     90c:	b500      	push	{lr}
     90e:	b087      	sub	sp, #28
     910:	9001      	str	r0, [sp, #4]
     912:	9100      	str	r1, [sp, #0]
    Gpt_ValueType returnValue;
    boolean HasChEvOccurred;

    /* Read compare and counter registers */
    uint32 counterValue = Ftm_Gpt_Ip_GetCntValue(pHwChannelConfig->instance);
     914:	9b01      	ldr	r3, [sp, #4]
     916:	791b      	ldrb	r3, [r3, #4]
     918:	4618      	mov	r0, r3
     91a:	f007 f999 	bl	7c50 <Ftm_Gpt_Ip_GetCntValue>
     91e:	9004      	str	r0, [sp, #16]
    uint32 compareValue = Ftm_Gpt_Ip_GetCompareValue(pHwChannelConfig->instance, pHwChannelConfig->channel);
     920:	9b01      	ldr	r3, [sp, #4]
     922:	791a      	ldrb	r2, [r3, #4]
     924:	9b01      	ldr	r3, [sp, #4]
     926:	795b      	ldrb	r3, [r3, #5]
     928:	4619      	mov	r1, r3
     92a:	4610      	mov	r0, r2
     92c:	f007 f9a0 	bl	7c70 <Ftm_Gpt_Ip_GetCompareValue>
     930:	9003      	str	r0, [sp, #12]

    pReturnHwChannelInfo->uTargetTime = Ftm_Gpt_Ip_u32TargetValue[pHwChannelConfig->instance][pHwChannelConfig->channel];
     932:	9b01      	ldr	r3, [sp, #4]
     934:	791b      	ldrb	r3, [r3, #4]
     936:	4618      	mov	r0, r3
     938:	9b01      	ldr	r3, [sp, #4]
     93a:	795b      	ldrb	r3, [r3, #5]
     93c:	4619      	mov	r1, r3
     93e:	4a23      	ldr	r2, [pc, #140]	; (9cc <Gpt_Ipw_FtmGetTimeElapsed+0xc0>)
     940:	00c3      	lsls	r3, r0, #3
     942:	440b      	add	r3, r1
     944:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     948:	9b00      	ldr	r3, [sp, #0]
     94a:	605a      	str	r2, [r3, #4]

    /* Calculate the elapsed time */
    if (counterValue > compareValue)
     94c:	9a04      	ldr	r2, [sp, #16]
     94e:	9b03      	ldr	r3, [sp, #12]
     950:	429a      	cmp	r2, r3
     952:	d918      	bls.n	986 <Gpt_Ipw_FtmGetTimeElapsed+0x7a>
    {
        /* Counter value passed the set-up Target value - might have roll-over */
        if(((FTM_CNT_MAX_VALUE_U32 - counterValue) + compareValue) <= pReturnHwChannelInfo->uTargetTime)
     954:	9a03      	ldr	r2, [sp, #12]
     956:	9b04      	ldr	r3, [sp, #16]
     958:	1ad3      	subs	r3, r2, r3
     95a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
     95e:	33ff      	adds	r3, #255	; 0xff
     960:	9a00      	ldr	r2, [sp, #0]
     962:	6852      	ldr	r2, [r2, #4]
     964:	4293      	cmp	r3, r2
     966:	d80a      	bhi.n	97e <Gpt_Ipw_FtmGetTimeElapsed+0x72>
        {
            /* New compare value was read by register read - isr served in time - we have roll-over */
            returnValue =   (Gpt_ValueType)(    (   pReturnHwChannelInfo->uTargetTime - \
     968:	9b00      	ldr	r3, [sp, #0]
     96a:	685a      	ldr	r2, [r3, #4]
                                                    ((FTM_CNT_MAX_VALUE_U32 - counterValue) + compareValue) ) + \
     96c:	9904      	ldr	r1, [sp, #16]
     96e:	9b03      	ldr	r3, [sp, #12]
     970:	1acb      	subs	r3, r1, r3
            returnValue =   (Gpt_ValueType)(    (   pReturnHwChannelInfo->uTargetTime - \
     972:	4413      	add	r3, r2
     974:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
     978:	3bfe      	subs	r3, #254	; 0xfe
     97a:	9305      	str	r3, [sp, #20]
     97c:	e00a      	b.n	994 <Gpt_Ipw_FtmGetTimeElapsed+0x88>
                                                FTM_OVERFLOW_PAD_U32 );
        }
        else
        {
            /* There is an delay in serving ISR or updating u32CompareValue - report last timer time */
            returnValue = (Gpt_ValueType)(pReturnHwChannelInfo->uTargetTime);
     97e:	9b00      	ldr	r3, [sp, #0]
     980:	685b      	ldr	r3, [r3, #4]
     982:	9305      	str	r3, [sp, #20]
     984:	e006      	b.n	994 <Gpt_Ipw_FtmGetTimeElapsed+0x88>
        }
    }
    else
    {
        /* Timer in between ISRs period */
        returnValue = (Gpt_ValueType)(pReturnHwChannelInfo->uTargetTime - (compareValue - counterValue));
     986:	9b00      	ldr	r3, [sp, #0]
     988:	685a      	ldr	r2, [r3, #4]
     98a:	9904      	ldr	r1, [sp, #16]
     98c:	9b03      	ldr	r3, [sp, #12]
     98e:	1acb      	subs	r3, r1, r3
     990:	4413      	add	r3, r2
     992:	9305      	str	r3, [sp, #20]
    }

    /* check if channel event has occurred */
    HasChEvOccurred = Ftm_Gpt_Ip_GetChInterruptStatusFlag(pHwChannelConfig->instance, pHwChannelConfig->channel);
     994:	9b01      	ldr	r3, [sp, #4]
     996:	791a      	ldrb	r2, [r3, #4]
     998:	9b01      	ldr	r3, [sp, #4]
     99a:	795b      	ldrb	r3, [r3, #5]
     99c:	4619      	mov	r1, r3
     99e:	4610      	mov	r0, r2
     9a0:	f007 f936 	bl	7c10 <Ftm_Gpt_Ip_GetChInterruptStatusFlag>
     9a4:	4603      	mov	r3, r0
     9a6:	f88d 300b 	strb.w	r3, [sp, #11]

    /*Check interrupt status flag*/
    if (HasChEvOccurred)
     9aa:	f89d 300b 	ldrb.w	r3, [sp, #11]
     9ae:	2b00      	cmp	r3, #0
     9b0:	d003      	beq.n	9ba <Gpt_Ipw_FtmGetTimeElapsed+0xae>
    {
        /* Channel counter was roll-over */
        pReturnHwChannelInfo->bChannelRollover = TRUE;
     9b2:	9b00      	ldr	r3, [sp, #0]
     9b4:	2201      	movs	r2, #1
     9b6:	701a      	strb	r2, [r3, #0]
     9b8:	e002      	b.n	9c0 <Gpt_Ipw_FtmGetTimeElapsed+0xb4>
    }
    else
    {
        /* Channel counter was not rollover */
        pReturnHwChannelInfo->bChannelRollover = FALSE;
     9ba:	9b00      	ldr	r3, [sp, #0]
     9bc:	2200      	movs	r2, #0
     9be:	701a      	strb	r2, [r3, #0]
    }
    return returnValue;
     9c0:	9b05      	ldr	r3, [sp, #20]
}
     9c2:	4618      	mov	r0, r3
     9c4:	b007      	add	sp, #28
     9c6:	f85d fb04 	ldr.w	pc, [sp], #4
     9ca:	bf00      	nop
     9cc:	1fff8d18 	.word	0x1fff8d18

000009d0 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     9d0:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9d2:	f3ef 8310 	mrs	r3, PRIMASK
     9d6:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9d8:	4623      	mov	r3, r4
}
     9da:	4618      	mov	r0, r3
     9dc:	f85d 4b04 	ldr.w	r4, [sp], #4
     9e0:	4770      	bx	lr

000009e2 <Gpt_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Gpt_schm_read_msr(void)
{
     9e2:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9e4:	f3ef 8310 	mrs	r3, PRIMASK
     9e8:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9ea:	4623      	mov	r3, r4
}
     9ec:	4618      	mov	r0, r3
     9ee:	f85d 4b04 	ldr.w	r4, [sp], #4
     9f2:	4770      	bx	lr

000009f4 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     9f4:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9f6:	f3ef 8310 	mrs	r3, PRIMASK
     9fa:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9fc:	4623      	mov	r3, r4
}
     9fe:	4618      	mov	r0, r3
     a00:	f85d 4b04 	ldr.w	r4, [sp], #4
     a04:	4770      	bx	lr

00000a06 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     a06:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a08:	f3ef 8310 	mrs	r3, PRIMASK
     a0c:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a0e:	4623      	mov	r3, r4
}
     a10:	4618      	mov	r0, r3
     a12:	f85d 4b04 	ldr.w	r4, [sp], #4
     a16:	4770      	bx	lr

00000a18 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     a18:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     a1a:	2300      	movs	r3, #0
     a1c:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     a1e:	2300      	movs	r3, #0
     a20:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     a22:	2300      	movs	r3, #0
     a24:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     a26:	2300      	movs	r3, #0
     a28:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     a2a:	4b44      	ldr	r3, [pc, #272]	; (b3c <init_data_bss+0x124>)
     a2c:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     a2e:	4b44      	ldr	r3, [pc, #272]	; (b40 <init_data_bss+0x128>)
     a30:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     a32:	9b05      	ldr	r3, [sp, #20]
     a34:	681b      	ldr	r3, [r3, #0]
     a36:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     a38:	9b05      	ldr	r3, [sp, #20]
     a3a:	3304      	adds	r3, #4
     a3c:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     a3e:	9b05      	ldr	r3, [sp, #20]
     a40:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     a42:	2300      	movs	r3, #0
     a44:	9309      	str	r3, [sp, #36]	; 0x24
     a46:	e03d      	b.n	ac4 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a4a:	4613      	mov	r3, r2
     a4c:	005b      	lsls	r3, r3, #1
     a4e:	4413      	add	r3, r2
     a50:	009b      	lsls	r3, r3, #2
     a52:	461a      	mov	r2, r3
     a54:	9b03      	ldr	r3, [sp, #12]
     a56:	4413      	add	r3, r2
     a58:	685b      	ldr	r3, [r3, #4]
     a5a:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a5e:	4613      	mov	r3, r2
     a60:	005b      	lsls	r3, r3, #1
     a62:	4413      	add	r3, r2
     a64:	009b      	lsls	r3, r3, #2
     a66:	461a      	mov	r2, r3
     a68:	9b03      	ldr	r3, [sp, #12]
     a6a:	4413      	add	r3, r2
     a6c:	681b      	ldr	r3, [r3, #0]
     a6e:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     a70:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a72:	4613      	mov	r3, r2
     a74:	005b      	lsls	r3, r3, #1
     a76:	4413      	add	r3, r2
     a78:	009b      	lsls	r3, r3, #2
     a7a:	461a      	mov	r2, r3
     a7c:	9b03      	ldr	r3, [sp, #12]
     a7e:	4413      	add	r3, r2
     a80:	689b      	ldr	r3, [r3, #8]
     a82:	4619      	mov	r1, r3
     a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a86:	4613      	mov	r3, r2
     a88:	005b      	lsls	r3, r3, #1
     a8a:	4413      	add	r3, r2
     a8c:	009b      	lsls	r3, r3, #2
     a8e:	461a      	mov	r2, r3
     a90:	9b03      	ldr	r3, [sp, #12]
     a92:	4413      	add	r3, r2
     a94:	685b      	ldr	r3, [r3, #4]
     a96:	1acb      	subs	r3, r1, r3
     a98:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     a9a:	2300      	movs	r3, #0
     a9c:	9308      	str	r3, [sp, #32]
     a9e:	e00a      	b.n	ab6 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     aa0:	9a00      	ldr	r2, [sp, #0]
     aa2:	9b08      	ldr	r3, [sp, #32]
     aa4:	441a      	add	r2, r3
     aa6:	9901      	ldr	r1, [sp, #4]
     aa8:	9b08      	ldr	r3, [sp, #32]
     aaa:	440b      	add	r3, r1
     aac:	7812      	ldrb	r2, [r2, #0]
     aae:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     ab0:	9b08      	ldr	r3, [sp, #32]
     ab2:	3301      	adds	r3, #1
     ab4:	9308      	str	r3, [sp, #32]
     ab6:	9a08      	ldr	r2, [sp, #32]
     ab8:	9b06      	ldr	r3, [sp, #24]
     aba:	429a      	cmp	r2, r3
     abc:	d3f0      	bcc.n	aa0 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ac0:	3301      	adds	r3, #1
     ac2:	9309      	str	r3, [sp, #36]	; 0x24
     ac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ac6:	9b07      	ldr	r3, [sp, #28]
     ac8:	429a      	cmp	r2, r3
     aca:	d3bd      	bcc.n	a48 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     acc:	9b04      	ldr	r3, [sp, #16]
     ace:	681b      	ldr	r3, [r3, #0]
     ad0:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     ad2:	9b04      	ldr	r3, [sp, #16]
     ad4:	3304      	adds	r3, #4
     ad6:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     ad8:	9b04      	ldr	r3, [sp, #16]
     ada:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     adc:	2300      	movs	r3, #0
     ade:	9309      	str	r3, [sp, #36]	; 0x24
     ae0:	e024      	b.n	b2c <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ae4:	00db      	lsls	r3, r3, #3
     ae6:	9a02      	ldr	r2, [sp, #8]
     ae8:	4413      	add	r3, r2
     aea:	681b      	ldr	r3, [r3, #0]
     aec:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
     af0:	00db      	lsls	r3, r3, #3
     af2:	9a02      	ldr	r2, [sp, #8]
     af4:	4413      	add	r3, r2
     af6:	685b      	ldr	r3, [r3, #4]
     af8:	4619      	mov	r1, r3
     afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
     afc:	00db      	lsls	r3, r3, #3
     afe:	9a02      	ldr	r2, [sp, #8]
     b00:	4413      	add	r3, r2
     b02:	681b      	ldr	r3, [r3, #0]
     b04:	1acb      	subs	r3, r1, r3
     b06:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b08:	2300      	movs	r3, #0
     b0a:	9308      	str	r3, [sp, #32]
     b0c:	e007      	b.n	b1e <init_data_bss+0x106>
        {
            ram[j] = 0U;
     b0e:	9a01      	ldr	r2, [sp, #4]
     b10:	9b08      	ldr	r3, [sp, #32]
     b12:	4413      	add	r3, r2
     b14:	2200      	movs	r2, #0
     b16:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b18:	9b08      	ldr	r3, [sp, #32]
     b1a:	3301      	adds	r3, #1
     b1c:	9308      	str	r3, [sp, #32]
     b1e:	9a08      	ldr	r2, [sp, #32]
     b20:	9b06      	ldr	r3, [sp, #24]
     b22:	429a      	cmp	r2, r3
     b24:	d3f3      	bcc.n	b0e <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b28:	3301      	adds	r3, #1
     b2a:	9309      	str	r3, [sp, #36]	; 0x24
     b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b2e:	9b07      	ldr	r3, [sp, #28]
     b30:	429a      	cmp	r2, r3
     b32:	d3d6      	bcc.n	ae2 <init_data_bss+0xca>
        }
    }
}
     b34:	bf00      	nop
     b36:	bf00      	nop
     b38:	b00a      	add	sp, #40	; 0x28
     b3a:	4770      	bx	lr
     b3c:	0000c540 	.word	0x0000c540
     b40:	0000c55c 	.word	0x0000c55c

00000b44 <sys_m4_cache_init>:
{
     b44:	b084      	sub	sp, #16
     b46:	4603      	mov	r3, r0
     b48:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     b4c:	2300      	movs	r3, #0
     b4e:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     b52:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b56:	2b00      	cmp	r3, #0
     b58:	d118      	bne.n	b8c <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     b5a:	4b10      	ldr	r3, [pc, #64]	; (b9c <sys_m4_cache_init+0x58>)
     b5c:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     b60:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     b62:	4b0e      	ldr	r3, [pc, #56]	; (b9c <sys_m4_cache_init+0x58>)
     b64:	681b      	ldr	r3, [r3, #0]
     b66:	4a0d      	ldr	r2, [pc, #52]	; (b9c <sys_m4_cache_init+0x58>)
     b68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b6c:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     b6e:	bf00      	nop
     b70:	4b0a      	ldr	r3, [pc, #40]	; (b9c <sys_m4_cache_init+0x58>)
     b72:	681b      	ldr	r3, [r3, #0]
     b74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     b7c:	d0f8      	beq.n	b70 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     b7e:	4b07      	ldr	r3, [pc, #28]	; (b9c <sys_m4_cache_init+0x58>)
     b80:	681b      	ldr	r3, [r3, #0]
     b82:	4a06      	ldr	r2, [pc, #24]	; (b9c <sys_m4_cache_init+0x58>)
     b84:	f043 0301 	orr.w	r3, r3, #1
     b88:	6013      	str	r3, [r2, #0]
     b8a:	e002      	b.n	b92 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     b8c:	2301      	movs	r3, #1
     b8e:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     b92:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     b96:	4618      	mov	r0, r3
     b98:	b004      	add	sp, #16
     b9a:	4770      	bx	lr
     b9c:	e0082000 	.word	0xe0082000

00000ba0 <startup_go_to_user_mode>:
}
     ba0:	bf00      	nop
     ba2:	4770      	bx	lr

00000ba4 <Sys_GetCoreID>:
    return 0U;
     ba4:	2300      	movs	r3, #0
}
     ba6:	4618      	mov	r0, r3
     ba8:	4770      	bx	lr

00000baa <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     baa:	e7fe      	b.n	baa <HardFault_Handler>

00000bac <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     bac:	e7fe      	b.n	bac <MemManage_Handler>

00000bae <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     bae:	e7fe      	b.n	bae <BusFault_Handler>

00000bb0 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     bb0:	e7fe      	b.n	bb0 <UsageFault_Handler>

00000bb2 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     bb2:	e7fe      	b.n	bb2 <SVC_Handler>

00000bb4 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     bb4:	e7fe      	b.n	bb4 <DebugMon_Handler>

00000bb6 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     bb6:	e7fe      	b.n	bb6 <PendSV_Handler>

00000bb8 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     bb8:	e7fe      	b.n	bb8 <SysTick_Handler>

00000bba <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     bba:	e7fe      	b.n	bba <undefined_handler>

00000bbc <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     bbc:	b086      	sub	sp, #24
     bbe:	9003      	str	r0, [sp, #12]
     bc0:	9102      	str	r1, [sp, #8]
     bc2:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
     bc4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     bc8:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
     bcc:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
     bce:	9b01      	ldr	r3, [sp, #4]
     bd0:	2b00      	cmp	r3, #0
     bd2:	d007      	beq.n	be4 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
     bd4:	9b03      	ldr	r3, [sp, #12]
     bd6:	3310      	adds	r3, #16
     bd8:	009b      	lsls	r3, r3, #2
     bda:	9a05      	ldr	r2, [sp, #20]
     bdc:	4413      	add	r3, r2
     bde:	681a      	ldr	r2, [r3, #0]
     be0:	9b01      	ldr	r3, [sp, #4]
     be2:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
     be4:	9b03      	ldr	r3, [sp, #12]
     be6:	3310      	adds	r3, #16
     be8:	009b      	lsls	r3, r3, #2
     bea:	9a05      	ldr	r2, [sp, #20]
     bec:	4413      	add	r3, r2
     bee:	9a02      	ldr	r2, [sp, #8]
     bf0:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
     bf2:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
     bf6:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
     bfa:	bf00      	nop
     bfc:	b006      	add	sp, #24
     bfe:	4770      	bx	lr

00000c00 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
     c00:	b082      	sub	sp, #8
     c02:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     c04:	9b01      	ldr	r3, [sp, #4]
     c06:	f003 021f 	and.w	r2, r3, #31
     c0a:	4905      	ldr	r1, [pc, #20]	; (c20 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
     c0c:	9b01      	ldr	r3, [sp, #4]
     c0e:	095b      	lsrs	r3, r3, #5
     c10:	2001      	movs	r0, #1
     c12:	fa00 f202 	lsl.w	r2, r0, r2
     c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
     c1a:	bf00      	nop
     c1c:	b002      	add	sp, #8
     c1e:	4770      	bx	lr
     c20:	e000e100 	.word	0xe000e100

00000c24 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
     c24:	b082      	sub	sp, #8
     c26:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     c28:	9b01      	ldr	r3, [sp, #4]
     c2a:	f003 021f 	and.w	r2, r3, #31
     c2e:	4906      	ldr	r1, [pc, #24]	; (c48 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
     c30:	9b01      	ldr	r3, [sp, #4]
     c32:	095b      	lsrs	r3, r3, #5
     c34:	2001      	movs	r0, #1
     c36:	fa00 f202 	lsl.w	r2, r0, r2
     c3a:	3320      	adds	r3, #32
     c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
     c40:	bf00      	nop
     c42:	b002      	add	sp, #8
     c44:	4770      	bx	lr
     c46:	bf00      	nop
     c48:	e000e100 	.word	0xe000e100

00000c4c <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     c4c:	b084      	sub	sp, #16
     c4e:	9001      	str	r0, [sp, #4]
     c50:	460b      	mov	r3, r1
     c52:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
     c56:	2304      	movs	r3, #4
     c58:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
     c5c:	f89d 2003 	ldrb.w	r2, [sp, #3]
     c60:	f89d 300f 	ldrb.w	r3, [sp, #15]
     c64:	fa02 f103 	lsl.w	r1, r2, r3
     c68:	4a04      	ldr	r2, [pc, #16]	; (c7c <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
     c6a:	9b01      	ldr	r3, [sp, #4]
     c6c:	b2c9      	uxtb	r1, r1
     c6e:	4413      	add	r3, r2
     c70:	460a      	mov	r2, r1
     c72:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
     c76:	bf00      	nop
     c78:	b004      	add	sp, #16
     c7a:	4770      	bx	lr
     c7c:	e000e100 	.word	0xe000e100

00000c80 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
     c80:	b084      	sub	sp, #16
     c82:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
     c84:	2304      	movs	r3, #4
     c86:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
     c8a:	4a09      	ldr	r2, [pc, #36]	; (cb0 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
     c8c:	9b01      	ldr	r3, [sp, #4]
     c8e:	4413      	add	r3, r2
     c90:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
     c94:	b2db      	uxtb	r3, r3
     c96:	461a      	mov	r2, r3
     c98:	f89d 300f 	ldrb.w	r3, [sp, #15]
     c9c:	fa42 f303 	asr.w	r3, r2, r3
     ca0:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
     ca4:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     ca8:	4618      	mov	r0, r3
     caa:	b004      	add	sp, #16
     cac:	4770      	bx	lr
     cae:	bf00      	nop
     cb0:	e000e100 	.word	0xe000e100

00000cb4 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
     cb4:	b082      	sub	sp, #8
     cb6:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     cb8:	9b01      	ldr	r3, [sp, #4]
     cba:	f003 021f 	and.w	r2, r3, #31
     cbe:	4906      	ldr	r1, [pc, #24]	; (cd8 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
     cc0:	9b01      	ldr	r3, [sp, #4]
     cc2:	095b      	lsrs	r3, r3, #5
     cc4:	2001      	movs	r0, #1
     cc6:	fa00 f202 	lsl.w	r2, r0, r2
     cca:	3360      	adds	r3, #96	; 0x60
     ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
     cd0:	bf00      	nop
     cd2:	b002      	add	sp, #8
     cd4:	4770      	bx	lr
     cd6:	bf00      	nop
     cd8:	e000e100 	.word	0xe000e100

00000cdc <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
     cdc:	b500      	push	{lr}
     cde:	b085      	sub	sp, #20
     ce0:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     ce2:	2300      	movs	r3, #0
     ce4:	9303      	str	r3, [sp, #12]
     ce6:	e05d      	b.n	da4 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     ce8:	9b01      	ldr	r3, [sp, #4]
     cea:	6859      	ldr	r1, [r3, #4]
     cec:	9a03      	ldr	r2, [sp, #12]
     cee:	4613      	mov	r3, r2
     cf0:	005b      	lsls	r3, r3, #1
     cf2:	4413      	add	r3, r2
     cf4:	009b      	lsls	r3, r3, #2
     cf6:	440b      	add	r3, r1
     cf8:	681b      	ldr	r3, [r3, #0]
     cfa:	4618      	mov	r0, r3
     cfc:	f000 f899 	bl	e32 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d00:	9b01      	ldr	r3, [sp, #4]
     d02:	6859      	ldr	r1, [r3, #4]
     d04:	9a03      	ldr	r2, [sp, #12]
     d06:	4613      	mov	r3, r2
     d08:	005b      	lsls	r3, r3, #1
     d0a:	4413      	add	r3, r2
     d0c:	009b      	lsls	r3, r3, #2
     d0e:	440b      	add	r3, r1
     d10:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
     d12:	9b01      	ldr	r3, [sp, #4]
     d14:	6859      	ldr	r1, [r3, #4]
     d16:	9a03      	ldr	r2, [sp, #12]
     d18:	4613      	mov	r3, r2
     d1a:	005b      	lsls	r3, r3, #1
     d1c:	4413      	add	r3, r2
     d1e:	009b      	lsls	r3, r3, #2
     d20:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d22:	795b      	ldrb	r3, [r3, #5]
     d24:	4619      	mov	r1, r3
     d26:	f000 f869 	bl	dfc <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d2a:	9b01      	ldr	r3, [sp, #4]
     d2c:	6859      	ldr	r1, [r3, #4]
     d2e:	9a03      	ldr	r2, [sp, #12]
     d30:	4613      	mov	r3, r2
     d32:	005b      	lsls	r3, r3, #1
     d34:	4413      	add	r3, r2
     d36:	009b      	lsls	r3, r3, #2
     d38:	440b      	add	r3, r1
     d3a:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
     d3c:	9b01      	ldr	r3, [sp, #4]
     d3e:	6859      	ldr	r1, [r3, #4]
     d40:	9a03      	ldr	r2, [sp, #12]
     d42:	4613      	mov	r3, r2
     d44:	005b      	lsls	r3, r3, #1
     d46:	4413      	add	r3, r2
     d48:	009b      	lsls	r3, r3, #2
     d4a:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d4c:	689b      	ldr	r3, [r3, #8]
     d4e:	2200      	movs	r2, #0
     d50:	4619      	mov	r1, r3
     d52:	f000 f831 	bl	db8 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
     d56:	9b01      	ldr	r3, [sp, #4]
     d58:	6859      	ldr	r1, [r3, #4]
     d5a:	9a03      	ldr	r2, [sp, #12]
     d5c:	4613      	mov	r3, r2
     d5e:	005b      	lsls	r3, r3, #1
     d60:	4413      	add	r3, r2
     d62:	009b      	lsls	r3, r3, #2
     d64:	440b      	add	r3, r1
     d66:	791b      	ldrb	r3, [r3, #4]
     d68:	2b00      	cmp	r3, #0
     d6a:	d00c      	beq.n	d86 <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     d6c:	9b01      	ldr	r3, [sp, #4]
     d6e:	6859      	ldr	r1, [r3, #4]
     d70:	9a03      	ldr	r2, [sp, #12]
     d72:	4613      	mov	r3, r2
     d74:	005b      	lsls	r3, r3, #1
     d76:	4413      	add	r3, r2
     d78:	009b      	lsls	r3, r3, #2
     d7a:	440b      	add	r3, r1
     d7c:	681b      	ldr	r3, [r3, #0]
     d7e:	4618      	mov	r0, r3
     d80:	f000 f828 	bl	dd4 <IntCtrl_Ip_EnableIrq>
     d84:	e00b      	b.n	d9e <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     d86:	9b01      	ldr	r3, [sp, #4]
     d88:	6859      	ldr	r1, [r3, #4]
     d8a:	9a03      	ldr	r2, [sp, #12]
     d8c:	4613      	mov	r3, r2
     d8e:	005b      	lsls	r3, r3, #1
     d90:	4413      	add	r3, r2
     d92:	009b      	lsls	r3, r3, #2
     d94:	440b      	add	r3, r1
     d96:	681b      	ldr	r3, [r3, #0]
     d98:	4618      	mov	r0, r3
     d9a:	f000 f825 	bl	de8 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     d9e:	9b03      	ldr	r3, [sp, #12]
     da0:	3301      	adds	r3, #1
     da2:	9303      	str	r3, [sp, #12]
     da4:	9b01      	ldr	r3, [sp, #4]
     da6:	681b      	ldr	r3, [r3, #0]
     da8:	9a03      	ldr	r2, [sp, #12]
     daa:	429a      	cmp	r2, r3
     dac:	d39c      	bcc.n	ce8 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
     dae:	2300      	movs	r3, #0
}
     db0:	4618      	mov	r0, r3
     db2:	b005      	add	sp, #20
     db4:	f85d fb04 	ldr.w	pc, [sp], #4

00000db8 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     db8:	b500      	push	{lr}
     dba:	b085      	sub	sp, #20
     dbc:	9003      	str	r0, [sp, #12]
     dbe:	9102      	str	r1, [sp, #8]
     dc0:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
     dc2:	9a01      	ldr	r2, [sp, #4]
     dc4:	9902      	ldr	r1, [sp, #8]
     dc6:	9803      	ldr	r0, [sp, #12]
     dc8:	f7ff fef8 	bl	bbc <IntCtrl_Ip_InstallHandlerPrivileged>
}
     dcc:	bf00      	nop
     dce:	b005      	add	sp, #20
     dd0:	f85d fb04 	ldr.w	pc, [sp], #4

00000dd4 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
     dd4:	b500      	push	{lr}
     dd6:	b083      	sub	sp, #12
     dd8:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
     dda:	9801      	ldr	r0, [sp, #4]
     ddc:	f7ff ff10 	bl	c00 <IntCtrl_Ip_EnableIrqPrivileged>
}
     de0:	bf00      	nop
     de2:	b003      	add	sp, #12
     de4:	f85d fb04 	ldr.w	pc, [sp], #4

00000de8 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
     de8:	b500      	push	{lr}
     dea:	b083      	sub	sp, #12
     dec:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
     dee:	9801      	ldr	r0, [sp, #4]
     df0:	f7ff ff18 	bl	c24 <IntCtrl_Ip_DisableIrqPrivileged>
}
     df4:	bf00      	nop
     df6:	b003      	add	sp, #12
     df8:	f85d fb04 	ldr.w	pc, [sp], #4

00000dfc <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     dfc:	b500      	push	{lr}
     dfe:	b083      	sub	sp, #12
     e00:	9001      	str	r0, [sp, #4]
     e02:	460b      	mov	r3, r1
     e04:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
     e08:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e0c:	4619      	mov	r1, r3
     e0e:	9801      	ldr	r0, [sp, #4]
     e10:	f7ff ff1c 	bl	c4c <IntCtrl_Ip_SetPriorityPrivileged>
}
     e14:	bf00      	nop
     e16:	b003      	add	sp, #12
     e18:	f85d fb04 	ldr.w	pc, [sp], #4

00000e1c <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
     e1c:	b500      	push	{lr}
     e1e:	b083      	sub	sp, #12
     e20:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
     e22:	9801      	ldr	r0, [sp, #4]
     e24:	f7ff ff2c 	bl	c80 <IntCtrl_Ip_GetPriorityPrivileged>
     e28:	4603      	mov	r3, r0
}
     e2a:	4618      	mov	r0, r3
     e2c:	b003      	add	sp, #12
     e2e:	f85d fb04 	ldr.w	pc, [sp], #4

00000e32 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
     e32:	b500      	push	{lr}
     e34:	b083      	sub	sp, #12
     e36:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
     e38:	9801      	ldr	r0, [sp, #4]
     e3a:	f7ff ff3b 	bl	cb4 <IntCtrl_Ip_ClearPendingPrivileged>
}
     e3e:	bf00      	nop
     e40:	b003      	add	sp, #12
     e42:	f85d fb04 	ldr.w	pc, [sp], #4
     e46:	bf00      	nop

00000e48 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
     e48:	b500      	push	{lr}
     e4a:	b083      	sub	sp, #12
     e4c:	9001      	str	r0, [sp, #4]
     e4e:	460b      	mov	r3, r1
     e50:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
     e54:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e58:	2b00      	cmp	r3, #0
     e5a:	d003      	beq.n	e64 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
     e5c:	9801      	ldr	r0, [sp, #4]
     e5e:	f7ff ffb9 	bl	dd4 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
     e62:	e002      	b.n	e6a <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
     e64:	9801      	ldr	r0, [sp, #4]
     e66:	f7ff ffbf 	bl	de8 <IntCtrl_Ip_DisableIrq>
}
     e6a:	bf00      	nop
     e6c:	b003      	add	sp, #12
     e6e:	f85d fb04 	ldr.w	pc, [sp], #4

00000e72 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     e72:	b500      	push	{lr}
     e74:	b083      	sub	sp, #12
     e76:	9001      	str	r0, [sp, #4]
     e78:	460b      	mov	r3, r1
     e7a:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
     e7e:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e82:	4619      	mov	r1, r3
     e84:	9801      	ldr	r0, [sp, #4]
     e86:	f7ff ffb9 	bl	dfc <IntCtrl_Ip_SetPriority>
}
     e8a:	bf00      	nop
     e8c:	b003      	add	sp, #12
     e8e:	f85d fb04 	ldr.w	pc, [sp], #4

00000e92 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
     e92:	b500      	push	{lr}
     e94:	b083      	sub	sp, #12
     e96:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
     e98:	9801      	ldr	r0, [sp, #4]
     e9a:	f7ff ffbf 	bl	e1c <IntCtrl_Ip_GetPriority>
     e9e:	4603      	mov	r3, r0
}
     ea0:	4618      	mov	r0, r3
     ea2:	b003      	add	sp, #12
     ea4:	f85d fb04 	ldr.w	pc, [sp], #4

00000ea8 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     ea8:	b500      	push	{lr}
     eaa:	b085      	sub	sp, #20
     eac:	9003      	str	r0, [sp, #12]
     eae:	9102      	str	r1, [sp, #8]
     eb0:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
     eb2:	9a01      	ldr	r2, [sp, #4]
     eb4:	9902      	ldr	r1, [sp, #8]
     eb6:	9803      	ldr	r0, [sp, #12]
     eb8:	f7ff ff7e 	bl	db8 <IntCtrl_Ip_InstallHandler>
}
     ebc:	bf00      	nop
     ebe:	b005      	add	sp, #20
     ec0:	f85d fb04 	ldr.w	pc, [sp], #4

00000ec4 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
     ec4:	b500      	push	{lr}
     ec6:	b085      	sub	sp, #20
     ec8:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
     eca:	2300      	movs	r3, #0
     ecc:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
     ed0:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ed4:	4a05      	ldr	r2, [pc, #20]	; (eec <Platform_Init+0x28>)
     ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     eda:	681b      	ldr	r3, [r3, #0]
     edc:	4618      	mov	r0, r3
     ede:	f000 f8c7 	bl	1070 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
     ee2:	bf00      	nop
     ee4:	b005      	add	sp, #20
     ee6:	f85d fb04 	ldr.w	pc, [sp], #4
     eea:	bf00      	nop
     eec:	0000c3b4 	.word	0x0000c3b4

00000ef0 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
     ef0:	b500      	push	{lr}
     ef2:	b085      	sub	sp, #20
     ef4:	9001      	str	r0, [sp, #4]
     ef6:	460b      	mov	r3, r1
     ef8:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     efc:	2300      	movs	r3, #0
     efe:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
     f02:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f06:	4619      	mov	r1, r3
     f08:	9801      	ldr	r0, [sp, #4]
     f0a:	f7ff ff9d 	bl	e48 <Platform_Ipw_SetIrq>
    }
    return RetValue;
     f0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f12:	4618      	mov	r0, r3
     f14:	b005      	add	sp, #20
     f16:	f85d fb04 	ldr.w	pc, [sp], #4

00000f1a <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     f1a:	b500      	push	{lr}
     f1c:	b085      	sub	sp, #20
     f1e:	9001      	str	r0, [sp, #4]
     f20:	460b      	mov	r3, r1
     f22:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f26:	2300      	movs	r3, #0
     f28:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
     f2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f30:	4619      	mov	r1, r3
     f32:	9801      	ldr	r0, [sp, #4]
     f34:	f7ff ff9d 	bl	e72 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
     f38:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f3c:	4618      	mov	r0, r3
     f3e:	b005      	add	sp, #20
     f40:	f85d fb04 	ldr.w	pc, [sp], #4

00000f44 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
     f44:	b500      	push	{lr}
     f46:	b085      	sub	sp, #20
     f48:	9001      	str	r0, [sp, #4]
     f4a:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f4c:	2300      	movs	r3, #0
     f4e:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
     f52:	9801      	ldr	r0, [sp, #4]
     f54:	f7ff ff9d 	bl	e92 <Platform_Ipw_GetIrqPriority>
     f58:	4603      	mov	r3, r0
     f5a:	461a      	mov	r2, r3
     f5c:	9b00      	ldr	r3, [sp, #0]
     f5e:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
     f60:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f64:	4618      	mov	r0, r3
     f66:	b005      	add	sp, #20
     f68:	f85d fb04 	ldr.w	pc, [sp], #4

00000f6c <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
     f6c:	b500      	push	{lr}
     f6e:	b087      	sub	sp, #28
     f70:	9003      	str	r0, [sp, #12]
     f72:	9102      	str	r1, [sp, #8]
     f74:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f76:	2300      	movs	r3, #0
     f78:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
     f7c:	9a01      	ldr	r2, [sp, #4]
     f7e:	9902      	ldr	r1, [sp, #8]
     f80:	9803      	ldr	r0, [sp, #12]
     f82:	f7ff ff91 	bl	ea8 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
     f86:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
     f8a:	4618      	mov	r0, r3
     f8c:	b007      	add	sp, #28
     f8e:	f85d fb04 	ldr.w	pc, [sp], #4
     f92:	bf00      	nop

00000f94 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
     f94:	b500      	push	{lr}
     f96:	b085      	sub	sp, #20
     f98:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     f9a:	2300      	movs	r3, #0
     f9c:	9303      	str	r3, [sp, #12]
     f9e:	e05d      	b.n	105c <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     fa0:	9b01      	ldr	r3, [sp, #4]
     fa2:	6859      	ldr	r1, [r3, #4]
     fa4:	9a03      	ldr	r2, [sp, #12]
     fa6:	4613      	mov	r3, r2
     fa8:	005b      	lsls	r3, r3, #1
     faa:	4413      	add	r3, r2
     fac:	009b      	lsls	r3, r3, #2
     fae:	440b      	add	r3, r1
     fb0:	681b      	ldr	r3, [r3, #0]
     fb2:	4618      	mov	r0, r3
     fb4:	f7ff ff3d 	bl	e32 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     fb8:	9b01      	ldr	r3, [sp, #4]
     fba:	6859      	ldr	r1, [r3, #4]
     fbc:	9a03      	ldr	r2, [sp, #12]
     fbe:	4613      	mov	r3, r2
     fc0:	005b      	lsls	r3, r3, #1
     fc2:	4413      	add	r3, r2
     fc4:	009b      	lsls	r3, r3, #2
     fc6:	440b      	add	r3, r1
     fc8:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
     fca:	9b01      	ldr	r3, [sp, #4]
     fcc:	6859      	ldr	r1, [r3, #4]
     fce:	9a03      	ldr	r2, [sp, #12]
     fd0:	4613      	mov	r3, r2
     fd2:	005b      	lsls	r3, r3, #1
     fd4:	4413      	add	r3, r2
     fd6:	009b      	lsls	r3, r3, #2
     fd8:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     fda:	795b      	ldrb	r3, [r3, #5]
     fdc:	4619      	mov	r1, r3
     fde:	f7ff ff0d 	bl	dfc <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     fe2:	9b01      	ldr	r3, [sp, #4]
     fe4:	6859      	ldr	r1, [r3, #4]
     fe6:	9a03      	ldr	r2, [sp, #12]
     fe8:	4613      	mov	r3, r2
     fea:	005b      	lsls	r3, r3, #1
     fec:	4413      	add	r3, r2
     fee:	009b      	lsls	r3, r3, #2
     ff0:	440b      	add	r3, r1
     ff2:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
     ff4:	9b01      	ldr	r3, [sp, #4]
     ff6:	6859      	ldr	r1, [r3, #4]
     ff8:	9a03      	ldr	r2, [sp, #12]
     ffa:	4613      	mov	r3, r2
     ffc:	005b      	lsls	r3, r3, #1
     ffe:	4413      	add	r3, r2
    1000:	009b      	lsls	r3, r3, #2
    1002:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1004:	689b      	ldr	r3, [r3, #8]
    1006:	2200      	movs	r2, #0
    1008:	4619      	mov	r1, r3
    100a:	f7ff fed5 	bl	db8 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    100e:	9b01      	ldr	r3, [sp, #4]
    1010:	6859      	ldr	r1, [r3, #4]
    1012:	9a03      	ldr	r2, [sp, #12]
    1014:	4613      	mov	r3, r2
    1016:	005b      	lsls	r3, r3, #1
    1018:	4413      	add	r3, r2
    101a:	009b      	lsls	r3, r3, #2
    101c:	440b      	add	r3, r1
    101e:	791b      	ldrb	r3, [r3, #4]
    1020:	2b00      	cmp	r3, #0
    1022:	d00c      	beq.n	103e <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1024:	9b01      	ldr	r3, [sp, #4]
    1026:	6859      	ldr	r1, [r3, #4]
    1028:	9a03      	ldr	r2, [sp, #12]
    102a:	4613      	mov	r3, r2
    102c:	005b      	lsls	r3, r3, #1
    102e:	4413      	add	r3, r2
    1030:	009b      	lsls	r3, r3, #2
    1032:	440b      	add	r3, r1
    1034:	681b      	ldr	r3, [r3, #0]
    1036:	4618      	mov	r0, r3
    1038:	f7ff fecc 	bl	dd4 <IntCtrl_Ip_EnableIrq>
    103c:	e00b      	b.n	1056 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    103e:	9b01      	ldr	r3, [sp, #4]
    1040:	6859      	ldr	r1, [r3, #4]
    1042:	9a03      	ldr	r2, [sp, #12]
    1044:	4613      	mov	r3, r2
    1046:	005b      	lsls	r3, r3, #1
    1048:	4413      	add	r3, r2
    104a:	009b      	lsls	r3, r3, #2
    104c:	440b      	add	r3, r1
    104e:	681b      	ldr	r3, [r3, #0]
    1050:	4618      	mov	r0, r3
    1052:	f7ff fec9 	bl	de8 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1056:	9b03      	ldr	r3, [sp, #12]
    1058:	3301      	adds	r3, #1
    105a:	9303      	str	r3, [sp, #12]
    105c:	9b01      	ldr	r3, [sp, #4]
    105e:	681b      	ldr	r3, [r3, #0]
    1060:	9a03      	ldr	r2, [sp, #12]
    1062:	429a      	cmp	r2, r3
    1064:	d39c      	bcc.n	fa0 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1066:	2300      	movs	r3, #0
}
    1068:	4618      	mov	r0, r3
    106a:	b005      	add	sp, #20
    106c:	f85d fb04 	ldr.w	pc, [sp], #4

00001070 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1070:	b500      	push	{lr}
    1072:	b085      	sub	sp, #20
    1074:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1076:	2300      	movs	r3, #0
    1078:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    107c:	9b01      	ldr	r3, [sp, #4]
    107e:	681b      	ldr	r3, [r3, #0]
    1080:	2b00      	cmp	r3, #0
    1082:	d007      	beq.n	1094 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1084:	9b01      	ldr	r3, [sp, #4]
    1086:	681b      	ldr	r3, [r3, #0]
    1088:	4618      	mov	r0, r3
    108a:	f7ff ff83 	bl	f94 <Platform_Ipw_InitIntCtrl>
    108e:	4603      	mov	r3, r0
    1090:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1094:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1098:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    109a:	bf00      	nop
    109c:	b005      	add	sp, #20
    109e:	f85d fb04 	ldr.w	pc, [sp], #4

000010a2 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    10a2:	2300      	movs	r3, #0
}
    10a4:	4618      	mov	r0, r3
    10a6:	4770      	bx	lr

000010a8 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    10a8:	b082      	sub	sp, #8
    10aa:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    10ac:	2301      	movs	r3, #1
}
    10ae:	4618      	mov	r0, r3
    10b0:	b002      	add	sp, #8
    10b2:	4770      	bx	lr

000010b4 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    10b4:	b082      	sub	sp, #8
    10b6:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    10b8:	bf00      	nop
    10ba:	b002      	add	sp, #8
    10bc:	4770      	bx	lr

000010be <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    10be:	b082      	sub	sp, #8
    10c0:	9001      	str	r0, [sp, #4]
    return Micros;
    10c2:	9b01      	ldr	r3, [sp, #4]
}
    10c4:	4618      	mov	r0, r3
    10c6:	b002      	add	sp, #8
    10c8:	4770      	bx	lr

000010ca <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    10ca:	b500      	push	{lr}
    10cc:	b083      	sub	sp, #12
    10ce:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    10d0:	f000 f86c 	bl	11ac <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    10d4:	bf00      	nop
    10d6:	b003      	add	sp, #12
    10d8:	f85d fb04 	ldr.w	pc, [sp], #4

000010dc <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    10dc:	b500      	push	{lr}
    10de:	b085      	sub	sp, #20
    10e0:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    10e2:	2300      	movs	r3, #0
    10e4:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    10e6:	9b01      	ldr	r3, [sp, #4]
    10e8:	2b00      	cmp	r3, #0
    10ea:	d003      	beq.n	10f4 <OsIf_GetCounter+0x18>
    10ec:	9b01      	ldr	r3, [sp, #4]
    10ee:	2b01      	cmp	r3, #1
    10f0:	d004      	beq.n	10fc <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    10f2:	e007      	b.n	1104 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    10f4:	f7ff ffd5 	bl	10a2 <OsIf_Timer_Dummy_GetCounter>
    10f8:	9003      	str	r0, [sp, #12]
            break;
    10fa:	e003      	b.n	1104 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    10fc:	f000 f872 	bl	11e4 <OsIf_Timer_System_GetCounter>
    1100:	9003      	str	r0, [sp, #12]
            break;
    1102:	bf00      	nop
    }

    return Value;
    1104:	9b03      	ldr	r3, [sp, #12]
}
    1106:	4618      	mov	r0, r3
    1108:	b005      	add	sp, #20
    110a:	f85d fb04 	ldr.w	pc, [sp], #4

0000110e <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    110e:	b500      	push	{lr}
    1110:	b085      	sub	sp, #20
    1112:	9001      	str	r0, [sp, #4]
    1114:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1116:	2300      	movs	r3, #0
    1118:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    111a:	9b00      	ldr	r3, [sp, #0]
    111c:	2b00      	cmp	r3, #0
    111e:	d003      	beq.n	1128 <OsIf_GetElapsed+0x1a>
    1120:	9b00      	ldr	r3, [sp, #0]
    1122:	2b01      	cmp	r3, #1
    1124:	d005      	beq.n	1132 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1126:	e009      	b.n	113c <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1128:	9801      	ldr	r0, [sp, #4]
    112a:	f7ff ffbd 	bl	10a8 <OsIf_Timer_Dummy_GetElapsed>
    112e:	9003      	str	r0, [sp, #12]
            break;
    1130:	e004      	b.n	113c <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1132:	9801      	ldr	r0, [sp, #4]
    1134:	f000 f864 	bl	1200 <OsIf_Timer_System_GetElapsed>
    1138:	9003      	str	r0, [sp, #12]
            break;
    113a:	bf00      	nop
    }

    return Value;
    113c:	9b03      	ldr	r3, [sp, #12]
}
    113e:	4618      	mov	r0, r3
    1140:	b005      	add	sp, #20
    1142:	f85d fb04 	ldr.w	pc, [sp], #4

00001146 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1146:	b500      	push	{lr}
    1148:	b083      	sub	sp, #12
    114a:	9001      	str	r0, [sp, #4]
    114c:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    114e:	9b00      	ldr	r3, [sp, #0]
    1150:	2b00      	cmp	r3, #0
    1152:	d003      	beq.n	115c <OsIf_SetTimerFrequency+0x16>
    1154:	9b00      	ldr	r3, [sp, #0]
    1156:	2b01      	cmp	r3, #1
    1158:	d004      	beq.n	1164 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    115a:	e007      	b.n	116c <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    115c:	9801      	ldr	r0, [sp, #4]
    115e:	f7ff ffa9 	bl	10b4 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1162:	e003      	b.n	116c <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1164:	9801      	ldr	r0, [sp, #4]
    1166:	f000 f85b 	bl	1220 <OsIf_Timer_System_SetTimerFrequency>
            break;
    116a:	bf00      	nop
    }
}
    116c:	bf00      	nop
    116e:	b003      	add	sp, #12
    1170:	f85d fb04 	ldr.w	pc, [sp], #4

00001174 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1174:	b500      	push	{lr}
    1176:	b085      	sub	sp, #20
    1178:	9001      	str	r0, [sp, #4]
    117a:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    117c:	2300      	movs	r3, #0
    117e:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1180:	9b00      	ldr	r3, [sp, #0]
    1182:	2b00      	cmp	r3, #0
    1184:	d003      	beq.n	118e <OsIf_MicrosToTicks+0x1a>
    1186:	9b00      	ldr	r3, [sp, #0]
    1188:	2b01      	cmp	r3, #1
    118a:	d005      	beq.n	1198 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    118c:	e009      	b.n	11a2 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    118e:	9801      	ldr	r0, [sp, #4]
    1190:	f7ff ff95 	bl	10be <OsIf_Timer_Dummy_MicrosToTicks>
    1194:	9003      	str	r0, [sp, #12]
            break;
    1196:	e004      	b.n	11a2 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1198:	9801      	ldr	r0, [sp, #4]
    119a:	f000 f84f 	bl	123c <OsIf_Timer_System_MicrosToTicks>
    119e:	9003      	str	r0, [sp, #12]
            break;
    11a0:	bf00      	nop
    }

    return Value;
    11a2:	9b03      	ldr	r3, [sp, #12]
}
    11a4:	4618      	mov	r0, r3
    11a6:	b005      	add	sp, #20
    11a8:	f85d fb04 	ldr.w	pc, [sp], #4

000011ac <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    11ac:	b500      	push	{lr}
    11ae:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    11b0:	2300      	movs	r3, #0
    11b2:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    11b4:	4a09      	ldr	r2, [pc, #36]	; (11dc <OsIf_Timer_System_Init+0x30>)
    11b6:	9b01      	ldr	r3, [sp, #4]
    11b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    11bc:	685a      	ldr	r2, [r3, #4]
    11be:	4908      	ldr	r1, [pc, #32]	; (11e0 <OsIf_Timer_System_Init+0x34>)
    11c0:	9b01      	ldr	r3, [sp, #4]
    11c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    11c6:	4a06      	ldr	r2, [pc, #24]	; (11e0 <OsIf_Timer_System_Init+0x34>)
    11c8:	9b01      	ldr	r3, [sp, #4]
    11ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    11ce:	4618      	mov	r0, r3
    11d0:	f000 f868 	bl	12a4 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    11d4:	bf00      	nop
    11d6:	b003      	add	sp, #12
    11d8:	f85d fb04 	ldr.w	pc, [sp], #4
    11dc:	0000c3ac 	.word	0x0000c3ac
    11e0:	1fff8b60 	.word	0x1fff8b60

000011e4 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    11e4:	b500      	push	{lr}
    11e6:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    11e8:	2300      	movs	r3, #0
    11ea:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    11ec:	2300      	movs	r3, #0
    11ee:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    11f0:	f000 f86c 	bl	12cc <OsIf_Timer_System_Internal_GetCounter>
    11f4:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    11f6:	9b01      	ldr	r3, [sp, #4]
}
    11f8:	4618      	mov	r0, r3
    11fa:	b003      	add	sp, #12
    11fc:	f85d fb04 	ldr.w	pc, [sp], #4

00001200 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1200:	b500      	push	{lr}
    1202:	b085      	sub	sp, #20
    1204:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1206:	2300      	movs	r3, #0
    1208:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    120a:	2300      	movs	r3, #0
    120c:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    120e:	9801      	ldr	r0, [sp, #4]
    1210:	f000 f864 	bl	12dc <OsIf_Timer_System_Internal_GetElapsed>
    1214:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1216:	9b03      	ldr	r3, [sp, #12]
}
    1218:	4618      	mov	r0, r3
    121a:	b005      	add	sp, #20
    121c:	f85d fb04 	ldr.w	pc, [sp], #4

00001220 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1220:	b084      	sub	sp, #16
    1222:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1224:	2300      	movs	r3, #0
    1226:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1228:	4903      	ldr	r1, [pc, #12]	; (1238 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    122a:	9b03      	ldr	r3, [sp, #12]
    122c:	9a01      	ldr	r2, [sp, #4]
    122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1232:	bf00      	nop
    1234:	b004      	add	sp, #16
    1236:	4770      	bx	lr
    1238:	1fff8b60 	.word	0x1fff8b60

0000123c <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    123c:	b5f0      	push	{r4, r5, r6, r7, lr}
    123e:	b087      	sub	sp, #28
    1240:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1242:	2100      	movs	r1, #0
    1244:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1246:	2100      	movs	r1, #0
    1248:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    124a:	9901      	ldr	r1, [sp, #4]
    124c:	2000      	movs	r0, #0
    124e:	460e      	mov	r6, r1
    1250:	4607      	mov	r7, r0
    1252:	4812      	ldr	r0, [pc, #72]	; (129c <OsIf_Timer_System_MicrosToTicks+0x60>)
    1254:	9904      	ldr	r1, [sp, #16]
    1256:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    125a:	2000      	movs	r0, #0
    125c:	460c      	mov	r4, r1
    125e:	4605      	mov	r5, r0
    1260:	fb04 f007 	mul.w	r0, r4, r7
    1264:	fb06 f105 	mul.w	r1, r6, r5
    1268:	4401      	add	r1, r0
    126a:	fba6 2304 	umull	r2, r3, r6, r4
    126e:	4419      	add	r1, r3
    1270:	460b      	mov	r3, r1
    1272:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1276:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    127a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    127e:	4a08      	ldr	r2, [pc, #32]	; (12a0 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1280:	f04f 0300 	mov.w	r3, #0
    1284:	f7ff f98e 	bl	5a4 <__aeabi_uldivmod>
    1288:	4602      	mov	r2, r0
    128a:	460b      	mov	r3, r1
    128c:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1290:	9b02      	ldr	r3, [sp, #8]
    1292:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1294:	9b05      	ldr	r3, [sp, #20]
}
    1296:	4618      	mov	r0, r3
    1298:	b007      	add	sp, #28
    129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    129c:	1fff8b60 	.word	0x1fff8b60
    12a0:	000f4240 	.word	0x000f4240

000012a4 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    12a4:	b082      	sub	sp, #8
    12a6:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    12a8:	4b07      	ldr	r3, [pc, #28]	; (12c8 <OsIf_Timer_System_Internal_Init+0x24>)
    12aa:	2200      	movs	r2, #0
    12ac:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    12ae:	4b06      	ldr	r3, [pc, #24]	; (12c8 <OsIf_Timer_System_Internal_Init+0x24>)
    12b0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    12b4:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    12b6:	4b04      	ldr	r3, [pc, #16]	; (12c8 <OsIf_Timer_System_Internal_Init+0x24>)
    12b8:	2200      	movs	r2, #0
    12ba:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    12bc:	4b02      	ldr	r3, [pc, #8]	; (12c8 <OsIf_Timer_System_Internal_Init+0x24>)
    12be:	2205      	movs	r2, #5
    12c0:	601a      	str	r2, [r3, #0]
}
    12c2:	bf00      	nop
    12c4:	b002      	add	sp, #8
    12c6:	4770      	bx	lr
    12c8:	e000e010 	.word	0xe000e010

000012cc <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    12cc:	4b02      	ldr	r3, [pc, #8]	; (12d8 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    12ce:	689b      	ldr	r3, [r3, #8]
    12d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    12d4:	4618      	mov	r0, r3
    12d6:	4770      	bx	lr
    12d8:	e000e010 	.word	0xe000e010

000012dc <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    12dc:	b084      	sub	sp, #16
    12de:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    12e0:	4b10      	ldr	r3, [pc, #64]	; (1324 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    12e2:	689b      	ldr	r3, [r3, #8]
    12e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    12e8:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    12ea:	2300      	movs	r3, #0
    12ec:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    12ee:	9b01      	ldr	r3, [sp, #4]
    12f0:	681b      	ldr	r3, [r3, #0]
    12f2:	9a02      	ldr	r2, [sp, #8]
    12f4:	429a      	cmp	r2, r3
    12f6:	d909      	bls.n	130c <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    12f8:	9b01      	ldr	r3, [sp, #4]
    12fa:	681a      	ldr	r2, [r3, #0]
    12fc:	9b02      	ldr	r3, [sp, #8]
    12fe:	1ad3      	subs	r3, r2, r3
    1300:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1304:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1308:	9303      	str	r3, [sp, #12]
    130a:	e004      	b.n	1316 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    130c:	9b01      	ldr	r3, [sp, #4]
    130e:	681a      	ldr	r2, [r3, #0]
    1310:	9b02      	ldr	r3, [sp, #8]
    1312:	1ad3      	subs	r3, r2, r3
    1314:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1316:	9b01      	ldr	r3, [sp, #4]
    1318:	9a02      	ldr	r2, [sp, #8]
    131a:	601a      	str	r2, [r3, #0]

    return dif;
    131c:	9b03      	ldr	r3, [sp, #12]
}
    131e:	4618      	mov	r0, r3
    1320:	b004      	add	sp, #16
    1322:	4770      	bx	lr
    1324:	e000e010 	.word	0xe000e010

00001328 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1328:	b082      	sub	sp, #8
    132a:	9001      	str	r0, [sp, #4]
    132c:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    132e:	bf00      	nop
    1330:	b002      	add	sp, #8
    1332:	4770      	bx	lr

00001334 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1334:	b500      	push	{lr}
    1336:	b085      	sub	sp, #20
    1338:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    133a:	4b24      	ldr	r3, [pc, #144]	; (13cc <Clock_Ip_UpdateDriverContext+0x98>)
    133c:	2201      	movs	r2, #1
    133e:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1340:	4b23      	ldr	r3, [pc, #140]	; (13d0 <Clock_Ip_UpdateDriverContext+0x9c>)
    1342:	681b      	ldr	r3, [r3, #0]
    1344:	2102      	movs	r1, #2
    1346:	4618      	mov	r0, r3
    1348:	f003 fc32 	bl	4bb0 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    134c:	2300      	movs	r3, #0
    134e:	f88d 300f 	strb.w	r3, [sp, #15]
    1352:	e015      	b.n	1380 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1354:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1358:	9a01      	ldr	r2, [sp, #4]
    135a:	334a      	adds	r3, #74	; 0x4a
    135c:	00db      	lsls	r3, r3, #3
    135e:	4413      	add	r3, r2
    1360:	6858      	ldr	r0, [r3, #4]
    1362:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1366:	9a01      	ldr	r2, [sp, #4]
    1368:	334a      	adds	r3, #74	; 0x4a
    136a:	00db      	lsls	r3, r3, #3
    136c:	4413      	add	r3, r2
    136e:	689b      	ldr	r3, [r3, #8]
    1370:	4619      	mov	r1, r3
    1372:	f001 fadc 	bl	292e <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1376:	f89d 300f 	ldrb.w	r3, [sp, #15]
    137a:	3301      	adds	r3, #1
    137c:	f88d 300f 	strb.w	r3, [sp, #15]
    1380:	9b01      	ldr	r3, [sp, #4]
    1382:	7bdb      	ldrb	r3, [r3, #15]
    1384:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1388:	429a      	cmp	r2, r3
    138a:	d3e3      	bcc.n	1354 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    138c:	f000 f824 	bl	13d8 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1390:	2301      	movs	r3, #1
    1392:	f88d 300f 	strb.w	r3, [sp, #15]
    1396:	e00e      	b.n	13b6 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1398:	f89d 200f 	ldrb.w	r2, [sp, #15]
    139c:	9b01      	ldr	r3, [sp, #4]
    139e:	327e      	adds	r2, #126	; 0x7e
    13a0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    13a4:	490b      	ldr	r1, [pc, #44]	; (13d4 <Clock_Ip_UpdateDriverContext+0xa0>)
    13a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13aa:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    13ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13b0:	3301      	adds	r3, #1
    13b2:	f88d 300f 	strb.w	r3, [sp, #15]
    13b6:	9b01      	ldr	r3, [sp, #4]
    13b8:	7cdb      	ldrb	r3, [r3, #19]
    13ba:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13be:	429a      	cmp	r2, r3
    13c0:	d3ea      	bcc.n	1398 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    13c2:	bf00      	nop
    13c4:	bf00      	nop
    13c6:	b005      	add	sp, #20
    13c8:	f85d fb04 	ldr.w	pc, [sp], #4
    13cc:	1fff8b10 	.word	0x1fff8b10
    13d0:	1fff8b64 	.word	0x1fff8b64
    13d4:	1fff8b70 	.word	0x1fff8b70

000013d8 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    13d8:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    13da:	4b23      	ldr	r3, [pc, #140]	; (1468 <Clock_Ip_CallEmptyCallbacks+0x90>)
    13dc:	781b      	ldrb	r3, [r3, #0]
    13de:	f083 0301 	eor.w	r3, r3, #1
    13e2:	b2db      	uxtb	r3, r3
    13e4:	2b00      	cmp	r3, #0
    13e6:	d03d      	beq.n	1464 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    13e8:	4b1f      	ldr	r3, [pc, #124]	; (1468 <Clock_Ip_CallEmptyCallbacks+0x90>)
    13ea:	2201      	movs	r2, #1
    13ec:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    13ee:	4b1f      	ldr	r3, [pc, #124]	; (146c <Clock_Ip_CallEmptyCallbacks+0x94>)
    13f0:	685b      	ldr	r3, [r3, #4]
    13f2:	2100      	movs	r1, #0
    13f4:	2000      	movs	r0, #0
    13f6:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    13f8:	4b1c      	ldr	r3, [pc, #112]	; (146c <Clock_Ip_CallEmptyCallbacks+0x94>)
    13fa:	689b      	ldr	r3, [r3, #8]
    13fc:	2057      	movs	r0, #87	; 0x57
    13fe:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1400:	4b1b      	ldr	r3, [pc, #108]	; (1470 <Clock_Ip_CallEmptyCallbacks+0x98>)
    1402:	681b      	ldr	r3, [r3, #0]
    1404:	2000      	movs	r0, #0
    1406:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1408:	4b1a      	ldr	r3, [pc, #104]	; (1474 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    140a:	681b      	ldr	r3, [r3, #0]
    140c:	2000      	movs	r0, #0
    140e:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1410:	4b19      	ldr	r3, [pc, #100]	; (1478 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1412:	681b      	ldr	r3, [r3, #0]
    1414:	2000      	movs	r0, #0
    1416:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1418:	4b18      	ldr	r3, [pc, #96]	; (147c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    141a:	685b      	ldr	r3, [r3, #4]
    141c:	2000      	movs	r0, #0
    141e:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1420:	4b16      	ldr	r3, [pc, #88]	; (147c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1422:	689b      	ldr	r3, [r3, #8]
    1424:	2057      	movs	r0, #87	; 0x57
    1426:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1428:	4b15      	ldr	r3, [pc, #84]	; (1480 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    142a:	681b      	ldr	r3, [r3, #0]
    142c:	2000      	movs	r0, #0
    142e:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1430:	4b13      	ldr	r3, [pc, #76]	; (1480 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1432:	685b      	ldr	r3, [r3, #4]
    1434:	2100      	movs	r1, #0
    1436:	2057      	movs	r0, #87	; 0x57
    1438:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    143a:	4b12      	ldr	r3, [pc, #72]	; (1484 <Clock_Ip_CallEmptyCallbacks+0xac>)
    143c:	681b      	ldr	r3, [r3, #0]
    143e:	2000      	movs	r0, #0
    1440:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1442:	4b11      	ldr	r3, [pc, #68]	; (1488 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1444:	685b      	ldr	r3, [r3, #4]
    1446:	2000      	movs	r0, #0
    1448:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    144a:	4b0f      	ldr	r3, [pc, #60]	; (1488 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    144c:	689b      	ldr	r3, [r3, #8]
    144e:	2057      	movs	r0, #87	; 0x57
    1450:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1452:	4b0e      	ldr	r3, [pc, #56]	; (148c <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1454:	685b      	ldr	r3, [r3, #4]
    1456:	2000      	movs	r0, #0
    1458:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    145a:	4b0d      	ldr	r3, [pc, #52]	; (1490 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    145c:	681b      	ldr	r3, [r3, #0]
    145e:	2100      	movs	r1, #0
    1460:	2000      	movs	r0, #0
    1462:	4798      	blx	r3
    }
}
    1464:	bf00      	nop
    1466:	bd08      	pop	{r3, pc}
    1468:	1fff8b68 	.word	0x1fff8b68
    146c:	0000bdf4 	.word	0x0000bdf4
    1470:	0000bd08 	.word	0x0000bd08
    1474:	0000bd44 	.word	0x0000bd44
    1478:	0000bd4c 	.word	0x0000bd4c
    147c:	0000bd74 	.word	0x0000bd74
    1480:	0000bd80 	.word	0x0000bd80
    1484:	0000bdb8 	.word	0x0000bdb8
    1488:	0000be04 	.word	0x0000be04
    148c:	0000be30 	.word	0x0000be30
    1490:	0000be2c 	.word	0x0000be2c

00001494 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1494:	b500      	push	{lr}
    1496:	b085      	sub	sp, #20
    1498:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    149a:	9b01      	ldr	r3, [sp, #4]
    149c:	7adb      	ldrb	r3, [r3, #11]
    149e:	9303      	str	r3, [sp, #12]
    14a0:	e01f      	b.n	14e2 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    14a2:	9b03      	ldr	r3, [sp, #12]
    14a4:	1e5a      	subs	r2, r3, #1
    14a6:	9b01      	ldr	r3, [sp, #4]
    14a8:	320d      	adds	r2, #13
    14aa:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    14ae:	495a      	ldr	r1, [pc, #360]	; (1618 <Clock_Ip_ResetClockConfiguration+0x184>)
    14b0:	4613      	mov	r3, r2
    14b2:	00db      	lsls	r3, r3, #3
    14b4:	4413      	add	r3, r2
    14b6:	440b      	add	r3, r1
    14b8:	3301      	adds	r3, #1
    14ba:	781b      	ldrb	r3, [r3, #0]
    14bc:	461a      	mov	r2, r3
    14be:	4b57      	ldr	r3, [pc, #348]	; (161c <Clock_Ip_ResetClockConfiguration+0x188>)
    14c0:	5c9b      	ldrb	r3, [r3, r2]
    14c2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    14c4:	4a56      	ldr	r2, [pc, #344]	; (1620 <Clock_Ip_ResetClockConfiguration+0x18c>)
    14c6:	9b02      	ldr	r3, [sp, #8]
    14c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    14cc:	9a03      	ldr	r2, [sp, #12]
    14ce:	3a01      	subs	r2, #1
    14d0:	320d      	adds	r2, #13
    14d2:	00d2      	lsls	r2, r2, #3
    14d4:	9901      	ldr	r1, [sp, #4]
    14d6:	440a      	add	r2, r1
    14d8:	4610      	mov	r0, r2
    14da:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    14dc:	9b03      	ldr	r3, [sp, #12]
    14de:	3b01      	subs	r3, #1
    14e0:	9303      	str	r3, [sp, #12]
    14e2:	9b03      	ldr	r3, [sp, #12]
    14e4:	2b00      	cmp	r3, #0
    14e6:	d1dc      	bne.n	14a2 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    14e8:	9b01      	ldr	r3, [sp, #4]
    14ea:	7b9b      	ldrb	r3, [r3, #14]
    14ec:	9303      	str	r3, [sp, #12]
    14ee:	e026      	b.n	153e <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    14f0:	9b03      	ldr	r3, [sp, #12]
    14f2:	3b01      	subs	r3, #1
    14f4:	9a01      	ldr	r2, [sp, #4]
    14f6:	3324      	adds	r3, #36	; 0x24
    14f8:	011b      	lsls	r3, r3, #4
    14fa:	4413      	add	r3, r2
    14fc:	3304      	adds	r3, #4
    14fe:	681a      	ldr	r2, [r3, #0]
    1500:	4945      	ldr	r1, [pc, #276]	; (1618 <Clock_Ip_ResetClockConfiguration+0x184>)
    1502:	4613      	mov	r3, r2
    1504:	00db      	lsls	r3, r3, #3
    1506:	4413      	add	r3, r2
    1508:	440b      	add	r3, r1
    150a:	3301      	adds	r3, #1
    150c:	781b      	ldrb	r3, [r3, #0]
    150e:	461a      	mov	r2, r3
    1510:	4b44      	ldr	r3, [pc, #272]	; (1624 <Clock_Ip_ResetClockConfiguration+0x190>)
    1512:	5c9b      	ldrb	r3, [r3, r2]
    1514:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1516:	4944      	ldr	r1, [pc, #272]	; (1628 <Clock_Ip_ResetClockConfiguration+0x194>)
    1518:	9a02      	ldr	r2, [sp, #8]
    151a:	4613      	mov	r3, r2
    151c:	005b      	lsls	r3, r3, #1
    151e:	4413      	add	r3, r2
    1520:	009b      	lsls	r3, r3, #2
    1522:	440b      	add	r3, r1
    1524:	681b      	ldr	r3, [r3, #0]
    1526:	9a03      	ldr	r2, [sp, #12]
    1528:	3a01      	subs	r2, #1
    152a:	3224      	adds	r2, #36	; 0x24
    152c:	0112      	lsls	r2, r2, #4
    152e:	9901      	ldr	r1, [sp, #4]
    1530:	440a      	add	r2, r1
    1532:	3204      	adds	r2, #4
    1534:	4610      	mov	r0, r2
    1536:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1538:	9b03      	ldr	r3, [sp, #12]
    153a:	3b01      	subs	r3, #1
    153c:	9303      	str	r3, [sp, #12]
    153e:	9b03      	ldr	r3, [sp, #12]
    1540:	2b00      	cmp	r3, #0
    1542:	d1d5      	bne.n	14f0 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1544:	9b01      	ldr	r3, [sp, #4]
    1546:	7a9b      	ldrb	r3, [r3, #10]
    1548:	9303      	str	r3, [sp, #12]
    154a:	e02a      	b.n	15a2 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    154c:	9b03      	ldr	r3, [sp, #12]
    154e:	1e5a      	subs	r2, r3, #1
    1550:	9901      	ldr	r1, [sp, #4]
    1552:	4613      	mov	r3, r2
    1554:	009b      	lsls	r3, r3, #2
    1556:	4413      	add	r3, r2
    1558:	00db      	lsls	r3, r3, #3
    155a:	440b      	add	r3, r1
    155c:	3340      	adds	r3, #64	; 0x40
    155e:	681a      	ldr	r2, [r3, #0]
    1560:	492d      	ldr	r1, [pc, #180]	; (1618 <Clock_Ip_ResetClockConfiguration+0x184>)
    1562:	4613      	mov	r3, r2
    1564:	00db      	lsls	r3, r3, #3
    1566:	4413      	add	r3, r2
    1568:	440b      	add	r3, r1
    156a:	3301      	adds	r3, #1
    156c:	781b      	ldrb	r3, [r3, #0]
    156e:	461a      	mov	r2, r3
    1570:	4b2e      	ldr	r3, [pc, #184]	; (162c <Clock_Ip_ResetClockConfiguration+0x198>)
    1572:	5c9b      	ldrb	r3, [r3, r2]
    1574:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    1576:	492e      	ldr	r1, [pc, #184]	; (1630 <Clock_Ip_ResetClockConfiguration+0x19c>)
    1578:	9a02      	ldr	r2, [sp, #8]
    157a:	4613      	mov	r3, r2
    157c:	009b      	lsls	r3, r3, #2
    157e:	4413      	add	r3, r2
    1580:	009b      	lsls	r3, r3, #2
    1582:	440b      	add	r3, r1
    1584:	6819      	ldr	r1, [r3, #0]
    1586:	9b03      	ldr	r3, [sp, #12]
    1588:	1e5a      	subs	r2, r3, #1
    158a:	4613      	mov	r3, r2
    158c:	009b      	lsls	r3, r3, #2
    158e:	4413      	add	r3, r2
    1590:	00db      	lsls	r3, r3, #3
    1592:	3340      	adds	r3, #64	; 0x40
    1594:	9a01      	ldr	r2, [sp, #4]
    1596:	4413      	add	r3, r2
    1598:	4618      	mov	r0, r3
    159a:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    159c:	9b03      	ldr	r3, [sp, #12]
    159e:	3b01      	subs	r3, #1
    15a0:	9303      	str	r3, [sp, #12]
    15a2:	9b03      	ldr	r3, [sp, #12]
    15a4:	2b00      	cmp	r3, #0
    15a6:	d1d1      	bne.n	154c <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    15a8:	9b01      	ldr	r3, [sp, #4]
    15aa:	7a5b      	ldrb	r3, [r3, #9]
    15ac:	9303      	str	r3, [sp, #12]
    15ae:	e02b      	b.n	1608 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    15b0:	9b03      	ldr	r3, [sp, #12]
    15b2:	1e5a      	subs	r2, r3, #1
    15b4:	9901      	ldr	r1, [sp, #4]
    15b6:	4613      	mov	r3, r2
    15b8:	009b      	lsls	r3, r3, #2
    15ba:	4413      	add	r3, r2
    15bc:	009b      	lsls	r3, r3, #2
    15be:	440b      	add	r3, r1
    15c0:	332c      	adds	r3, #44	; 0x2c
    15c2:	681a      	ldr	r2, [r3, #0]
    15c4:	4914      	ldr	r1, [pc, #80]	; (1618 <Clock_Ip_ResetClockConfiguration+0x184>)
    15c6:	4613      	mov	r3, r2
    15c8:	00db      	lsls	r3, r3, #3
    15ca:	4413      	add	r3, r2
    15cc:	440b      	add	r3, r1
    15ce:	3301      	adds	r3, #1
    15d0:	781b      	ldrb	r3, [r3, #0]
    15d2:	461a      	mov	r2, r3
    15d4:	4b17      	ldr	r3, [pc, #92]	; (1634 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    15d6:	5c9b      	ldrb	r3, [r3, r2]
    15d8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    15da:	4917      	ldr	r1, [pc, #92]	; (1638 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    15dc:	9a02      	ldr	r2, [sp, #8]
    15de:	4613      	mov	r3, r2
    15e0:	009b      	lsls	r3, r3, #2
    15e2:	4413      	add	r3, r2
    15e4:	009b      	lsls	r3, r3, #2
    15e6:	440b      	add	r3, r1
    15e8:	6819      	ldr	r1, [r3, #0]
    15ea:	9b03      	ldr	r3, [sp, #12]
    15ec:	1e5a      	subs	r2, r3, #1
    15ee:	4613      	mov	r3, r2
    15f0:	009b      	lsls	r3, r3, #2
    15f2:	4413      	add	r3, r2
    15f4:	009b      	lsls	r3, r3, #2
    15f6:	3328      	adds	r3, #40	; 0x28
    15f8:	9a01      	ldr	r2, [sp, #4]
    15fa:	4413      	add	r3, r2
    15fc:	3304      	adds	r3, #4
    15fe:	4618      	mov	r0, r3
    1600:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1602:	9b03      	ldr	r3, [sp, #12]
    1604:	3b01      	subs	r3, #1
    1606:	9303      	str	r3, [sp, #12]
    1608:	9b03      	ldr	r3, [sp, #12]
    160a:	2b00      	cmp	r3, #0
    160c:	d1d0      	bne.n	15b0 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    160e:	bf00      	nop
    1610:	bf00      	nop
    1612:	b005      	add	sp, #20
    1614:	f85d fb04 	ldr.w	pc, [sp], #4
    1618:	0000b7f8 	.word	0x0000b7f8
    161c:	0000b7c8 	.word	0x0000b7c8
    1620:	0000be30 	.word	0x0000be30
    1624:	0000b7a8 	.word	0x0000b7a8
    1628:	0000bd74 	.word	0x0000bd74
    162c:	0000b7b8 	.word	0x0000b7b8
    1630:	0000be04 	.word	0x0000be04
    1634:	0000b778 	.word	0x0000b778
    1638:	0000bd4c 	.word	0x0000bd4c

0000163c <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    163c:	b500      	push	{lr}
    163e:	b085      	sub	sp, #20
    1640:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    1642:	2301      	movs	r3, #1
    1644:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    1646:	9801      	ldr	r0, [sp, #4]
    1648:	f000 f818 	bl	167c <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    164c:	4b0a      	ldr	r3, [pc, #40]	; (1678 <Clock_Ip_Init+0x3c>)
    164e:	781b      	ldrb	r3, [r3, #0]
    1650:	2b00      	cmp	r3, #0
    1652:	d00a      	beq.n	166a <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    1654:	f000 fb74 	bl	1d40 <Clock_Ip_GetPllStatus>
    1658:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    165a:	9b02      	ldr	r3, [sp, #8]
    165c:	2b00      	cmp	r3, #0
    165e:	d106      	bne.n	166e <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    1660:	f000 fbf2 	bl	1e48 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    1664:	2300      	movs	r3, #0
    1666:	9303      	str	r3, [sp, #12]
    1668:	e001      	b.n	166e <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    166a:	2300      	movs	r3, #0
    166c:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    166e:	9b03      	ldr	r3, [sp, #12]
}
    1670:	4618      	mov	r0, r3
    1672:	b005      	add	sp, #20
    1674:	f85d fb04 	ldr.w	pc, [sp], #4
    1678:	1fff8b6c 	.word	0x1fff8b6c

0000167c <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    167c:	b510      	push	{r4, lr}
    167e:	b084      	sub	sp, #16
    1680:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    1682:	4a9f      	ldr	r2, [pc, #636]	; (1900 <Clock_Ip_InitClock+0x284>)
    1684:	9b01      	ldr	r3, [sp, #4]
    1686:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    1688:	2101      	movs	r1, #1
    168a:	9801      	ldr	r0, [sp, #4]
    168c:	f003 fa90 	bl	4bb0 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1690:	4b9b      	ldr	r3, [pc, #620]	; (1900 <Clock_Ip_InitClock+0x284>)
    1692:	681b      	ldr	r3, [r3, #0]
    1694:	2b00      	cmp	r3, #0
    1696:	d030      	beq.n	16fa <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1698:	2300      	movs	r3, #0
    169a:	9303      	str	r3, [sp, #12]
    169c:	e027      	b.n	16ee <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    169e:	9901      	ldr	r1, [sp, #4]
    16a0:	9a03      	ldr	r2, [sp, #12]
    16a2:	4613      	mov	r3, r2
    16a4:	009b      	lsls	r3, r3, #2
    16a6:	4413      	add	r3, r2
    16a8:	009b      	lsls	r3, r3, #2
    16aa:	440b      	add	r3, r1
    16ac:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    16b0:	681a      	ldr	r2, [r3, #0]
    16b2:	4994      	ldr	r1, [pc, #592]	; (1904 <Clock_Ip_InitClock+0x288>)
    16b4:	4613      	mov	r3, r2
    16b6:	00db      	lsls	r3, r3, #3
    16b8:	4413      	add	r3, r2
    16ba:	440b      	add	r3, r1
    16bc:	3301      	adds	r3, #1
    16be:	781b      	ldrb	r3, [r3, #0]
    16c0:	461a      	mov	r2, r3
    16c2:	4b91      	ldr	r3, [pc, #580]	; (1908 <Clock_Ip_InitClock+0x28c>)
    16c4:	5c9b      	ldrb	r3, [r3, r2]
    16c6:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    16c8:	4a90      	ldr	r2, [pc, #576]	; (190c <Clock_Ip_InitClock+0x290>)
    16ca:	9b02      	ldr	r3, [sp, #8]
    16cc:	011b      	lsls	r3, r3, #4
    16ce:	4413      	add	r3, r2
    16d0:	6819      	ldr	r1, [r3, #0]
    16d2:	9a03      	ldr	r2, [sp, #12]
    16d4:	4613      	mov	r3, r2
    16d6:	009b      	lsls	r3, r3, #2
    16d8:	4413      	add	r3, r2
    16da:	009b      	lsls	r3, r3, #2
    16dc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    16e0:	9a01      	ldr	r2, [sp, #4]
    16e2:	4413      	add	r3, r2
    16e4:	4618      	mov	r0, r3
    16e6:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    16e8:	9b03      	ldr	r3, [sp, #12]
    16ea:	3301      	adds	r3, #1
    16ec:	9303      	str	r3, [sp, #12]
    16ee:	9b01      	ldr	r3, [sp, #4]
    16f0:	7c9b      	ldrb	r3, [r3, #18]
    16f2:	461a      	mov	r2, r3
    16f4:	9b03      	ldr	r3, [sp, #12]
    16f6:	4293      	cmp	r3, r2
    16f8:	d3d1      	bcc.n	169e <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    16fa:	9801      	ldr	r0, [sp, #4]
    16fc:	f7ff feca 	bl	1494 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1700:	2300      	movs	r3, #0
    1702:	9303      	str	r3, [sp, #12]
    1704:	e029      	b.n	175a <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1706:	9901      	ldr	r1, [sp, #4]
    1708:	9a03      	ldr	r2, [sp, #12]
    170a:	4613      	mov	r3, r2
    170c:	005b      	lsls	r3, r3, #1
    170e:	4413      	add	r3, r2
    1710:	009b      	lsls	r3, r3, #2
    1712:	440b      	add	r3, r1
    1714:	3314      	adds	r3, #20
    1716:	681a      	ldr	r2, [r3, #0]
    1718:	497a      	ldr	r1, [pc, #488]	; (1904 <Clock_Ip_InitClock+0x288>)
    171a:	4613      	mov	r3, r2
    171c:	00db      	lsls	r3, r3, #3
    171e:	4413      	add	r3, r2
    1720:	440b      	add	r3, r1
    1722:	3301      	adds	r3, #1
    1724:	781b      	ldrb	r3, [r3, #0]
    1726:	461a      	mov	r2, r3
    1728:	4b79      	ldr	r3, [pc, #484]	; (1910 <Clock_Ip_InitClock+0x294>)
    172a:	5c9b      	ldrb	r3, [r3, r2]
    172c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    172e:	4979      	ldr	r1, [pc, #484]	; (1914 <Clock_Ip_InitClock+0x298>)
    1730:	9a02      	ldr	r2, [sp, #8]
    1732:	4613      	mov	r3, r2
    1734:	005b      	lsls	r3, r3, #1
    1736:	4413      	add	r3, r2
    1738:	009b      	lsls	r3, r3, #2
    173a:	440b      	add	r3, r1
    173c:	6819      	ldr	r1, [r3, #0]
    173e:	9a03      	ldr	r2, [sp, #12]
    1740:	4613      	mov	r3, r2
    1742:	005b      	lsls	r3, r3, #1
    1744:	4413      	add	r3, r2
    1746:	009b      	lsls	r3, r3, #2
    1748:	3310      	adds	r3, #16
    174a:	9a01      	ldr	r2, [sp, #4]
    174c:	4413      	add	r3, r2
    174e:	3304      	adds	r3, #4
    1750:	4618      	mov	r0, r3
    1752:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1754:	9b03      	ldr	r3, [sp, #12]
    1756:	3301      	adds	r3, #1
    1758:	9303      	str	r3, [sp, #12]
    175a:	9b01      	ldr	r3, [sp, #4]
    175c:	7a1b      	ldrb	r3, [r3, #8]
    175e:	461a      	mov	r2, r3
    1760:	9b03      	ldr	r3, [sp, #12]
    1762:	4293      	cmp	r3, r2
    1764:	d3cf      	bcc.n	1706 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    1766:	2300      	movs	r3, #0
    1768:	9303      	str	r3, [sp, #12]
    176a:	e02a      	b.n	17c2 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    176c:	9901      	ldr	r1, [sp, #4]
    176e:	9a03      	ldr	r2, [sp, #12]
    1770:	4613      	mov	r3, r2
    1772:	009b      	lsls	r3, r3, #2
    1774:	4413      	add	r3, r2
    1776:	009b      	lsls	r3, r3, #2
    1778:	440b      	add	r3, r1
    177a:	332c      	adds	r3, #44	; 0x2c
    177c:	681a      	ldr	r2, [r3, #0]
    177e:	4961      	ldr	r1, [pc, #388]	; (1904 <Clock_Ip_InitClock+0x288>)
    1780:	4613      	mov	r3, r2
    1782:	00db      	lsls	r3, r3, #3
    1784:	4413      	add	r3, r2
    1786:	440b      	add	r3, r1
    1788:	3301      	adds	r3, #1
    178a:	781b      	ldrb	r3, [r3, #0]
    178c:	461a      	mov	r2, r3
    178e:	4b62      	ldr	r3, [pc, #392]	; (1918 <Clock_Ip_InitClock+0x29c>)
    1790:	5c9b      	ldrb	r3, [r3, r2]
    1792:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    1794:	4961      	ldr	r1, [pc, #388]	; (191c <Clock_Ip_InitClock+0x2a0>)
    1796:	9a02      	ldr	r2, [sp, #8]
    1798:	4613      	mov	r3, r2
    179a:	009b      	lsls	r3, r3, #2
    179c:	4413      	add	r3, r2
    179e:	009b      	lsls	r3, r3, #2
    17a0:	440b      	add	r3, r1
    17a2:	3304      	adds	r3, #4
    17a4:	6819      	ldr	r1, [r3, #0]
    17a6:	9a03      	ldr	r2, [sp, #12]
    17a8:	4613      	mov	r3, r2
    17aa:	009b      	lsls	r3, r3, #2
    17ac:	4413      	add	r3, r2
    17ae:	009b      	lsls	r3, r3, #2
    17b0:	3328      	adds	r3, #40	; 0x28
    17b2:	9a01      	ldr	r2, [sp, #4]
    17b4:	4413      	add	r3, r2
    17b6:	3304      	adds	r3, #4
    17b8:	4618      	mov	r0, r3
    17ba:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    17bc:	9b03      	ldr	r3, [sp, #12]
    17be:	3301      	adds	r3, #1
    17c0:	9303      	str	r3, [sp, #12]
    17c2:	9b01      	ldr	r3, [sp, #4]
    17c4:	7a5b      	ldrb	r3, [r3, #9]
    17c6:	461a      	mov	r2, r3
    17c8:	9b03      	ldr	r3, [sp, #12]
    17ca:	4293      	cmp	r3, r2
    17cc:	d3ce      	bcc.n	176c <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    17ce:	9801      	ldr	r0, [sp, #4]
    17d0:	f7ff fdb0 	bl	1334 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    17d4:	2300      	movs	r3, #0
    17d6:	9303      	str	r3, [sp, #12]
    17d8:	e028      	b.n	182c <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    17da:	9901      	ldr	r1, [sp, #4]
    17dc:	9a03      	ldr	r2, [sp, #12]
    17de:	4613      	mov	r3, r2
    17e0:	009b      	lsls	r3, r3, #2
    17e2:	4413      	add	r3, r2
    17e4:	009b      	lsls	r3, r3, #2
    17e6:	440b      	add	r3, r1
    17e8:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    17ec:	681a      	ldr	r2, [r3, #0]
    17ee:	4945      	ldr	r1, [pc, #276]	; (1904 <Clock_Ip_InitClock+0x288>)
    17f0:	4613      	mov	r3, r2
    17f2:	00db      	lsls	r3, r3, #3
    17f4:	4413      	add	r3, r2
    17f6:	440b      	add	r3, r1
    17f8:	3301      	adds	r3, #1
    17fa:	781b      	ldrb	r3, [r3, #0]
    17fc:	461a      	mov	r2, r3
    17fe:	4b48      	ldr	r3, [pc, #288]	; (1920 <Clock_Ip_InitClock+0x2a4>)
    1800:	5c9b      	ldrb	r3, [r3, r2]
    1802:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    1804:	4a47      	ldr	r2, [pc, #284]	; (1924 <Clock_Ip_InitClock+0x2a8>)
    1806:	9b02      	ldr	r3, [sp, #8]
    1808:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    180c:	9a03      	ldr	r2, [sp, #12]
    180e:	4613      	mov	r3, r2
    1810:	009b      	lsls	r3, r3, #2
    1812:	4413      	add	r3, r2
    1814:	009b      	lsls	r3, r3, #2
    1816:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    181a:	9a01      	ldr	r2, [sp, #4]
    181c:	4413      	add	r3, r2
    181e:	3304      	adds	r3, #4
    1820:	9903      	ldr	r1, [sp, #12]
    1822:	4618      	mov	r0, r3
    1824:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1826:	9b03      	ldr	r3, [sp, #12]
    1828:	3301      	adds	r3, #1
    182a:	9303      	str	r3, [sp, #12]
    182c:	9b01      	ldr	r3, [sp, #4]
    182e:	7c5b      	ldrb	r3, [r3, #17]
    1830:	461a      	mov	r2, r3
    1832:	9b03      	ldr	r3, [sp, #12]
    1834:	4293      	cmp	r3, r2
    1836:	d3d0      	bcc.n	17da <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1838:	2300      	movs	r3, #0
    183a:	9303      	str	r3, [sp, #12]
    183c:	e026      	b.n	188c <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    183e:	9901      	ldr	r1, [sp, #4]
    1840:	9a03      	ldr	r2, [sp, #12]
    1842:	4613      	mov	r3, r2
    1844:	005b      	lsls	r3, r3, #1
    1846:	4413      	add	r3, r2
    1848:	009b      	lsls	r3, r3, #2
    184a:	440b      	add	r3, r1
    184c:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1850:	681a      	ldr	r2, [r3, #0]
    1852:	492c      	ldr	r1, [pc, #176]	; (1904 <Clock_Ip_InitClock+0x288>)
    1854:	4613      	mov	r3, r2
    1856:	00db      	lsls	r3, r3, #3
    1858:	4413      	add	r3, r2
    185a:	440b      	add	r3, r1
    185c:	3301      	adds	r3, #1
    185e:	781b      	ldrb	r3, [r3, #0]
    1860:	461a      	mov	r2, r3
    1862:	4b31      	ldr	r3, [pc, #196]	; (1928 <Clock_Ip_InitClock+0x2ac>)
    1864:	5c9b      	ldrb	r3, [r3, r2]
    1866:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    1868:	4a30      	ldr	r2, [pc, #192]	; (192c <Clock_Ip_InitClock+0x2b0>)
    186a:	9b02      	ldr	r3, [sp, #8]
    186c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    1870:	9a03      	ldr	r2, [sp, #12]
    1872:	4613      	mov	r3, r2
    1874:	005b      	lsls	r3, r3, #1
    1876:	4413      	add	r3, r2
    1878:	009b      	lsls	r3, r3, #2
    187a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    187e:	9a01      	ldr	r2, [sp, #4]
    1880:	4413      	add	r3, r2
    1882:	4618      	mov	r0, r3
    1884:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1886:	9b03      	ldr	r3, [sp, #12]
    1888:	3301      	adds	r3, #1
    188a:	9303      	str	r3, [sp, #12]
    188c:	9b01      	ldr	r3, [sp, #4]
    188e:	7b5b      	ldrb	r3, [r3, #13]
    1890:	461a      	mov	r2, r3
    1892:	9b03      	ldr	r3, [sp, #12]
    1894:	4293      	cmp	r3, r2
    1896:	d3d2      	bcc.n	183e <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1898:	2300      	movs	r3, #0
    189a:	9303      	str	r3, [sp, #12]
    189c:	e026      	b.n	18ec <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    189e:	9901      	ldr	r1, [sp, #4]
    18a0:	9a03      	ldr	r2, [sp, #12]
    18a2:	4613      	mov	r3, r2
    18a4:	005b      	lsls	r3, r3, #1
    18a6:	4413      	add	r3, r2
    18a8:	009b      	lsls	r3, r3, #2
    18aa:	440b      	add	r3, r1
    18ac:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    18b0:	681a      	ldr	r2, [r3, #0]
    18b2:	4914      	ldr	r1, [pc, #80]	; (1904 <Clock_Ip_InitClock+0x288>)
    18b4:	4613      	mov	r3, r2
    18b6:	00db      	lsls	r3, r3, #3
    18b8:	4413      	add	r3, r2
    18ba:	440b      	add	r3, r1
    18bc:	3301      	adds	r3, #1
    18be:	781b      	ldrb	r3, [r3, #0]
    18c0:	461a      	mov	r2, r3
    18c2:	4b1b      	ldr	r3, [pc, #108]	; (1930 <Clock_Ip_InitClock+0x2b4>)
    18c4:	5c9b      	ldrb	r3, [r3, r2]
    18c6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    18c8:	4a1a      	ldr	r2, [pc, #104]	; (1934 <Clock_Ip_InitClock+0x2b8>)
    18ca:	9b02      	ldr	r3, [sp, #8]
    18cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    18d0:	9a03      	ldr	r2, [sp, #12]
    18d2:	4613      	mov	r3, r2
    18d4:	005b      	lsls	r3, r3, #1
    18d6:	4413      	add	r3, r2
    18d8:	009b      	lsls	r3, r3, #2
    18da:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    18de:	9a01      	ldr	r2, [sp, #4]
    18e0:	4413      	add	r3, r2
    18e2:	4618      	mov	r0, r3
    18e4:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    18e6:	9b03      	ldr	r3, [sp, #12]
    18e8:	3301      	adds	r3, #1
    18ea:	9303      	str	r3, [sp, #12]
    18ec:	9b01      	ldr	r3, [sp, #4]
    18ee:	7b1b      	ldrb	r3, [r3, #12]
    18f0:	461a      	mov	r2, r3
    18f2:	9b03      	ldr	r3, [sp, #12]
    18f4:	4293      	cmp	r3, r2
    18f6:	d3d2      	bcc.n	189e <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    18f8:	2300      	movs	r3, #0
    18fa:	9303      	str	r3, [sp, #12]
    18fc:	e044      	b.n	1988 <Clock_Ip_InitClock+0x30c>
    18fe:	bf00      	nop
    1900:	1fff8b64 	.word	0x1fff8b64
    1904:	0000b7f8 	.word	0x0000b7f8
    1908:	0000b7e8 	.word	0x0000b7e8
    190c:	0000bdf4 	.word	0x0000bdf4
    1910:	0000b788 	.word	0x0000b788
    1914:	0000bdb8 	.word	0x0000bdb8
    1918:	0000b778 	.word	0x0000b778
    191c:	0000bd4c 	.word	0x0000bd4c
    1920:	0000b7d8 	.word	0x0000b7d8
    1924:	0000be2c 	.word	0x0000be2c
    1928:	0000b768 	.word	0x0000b768
    192c:	0000bd44 	.word	0x0000bd44
    1930:	0000b758 	.word	0x0000b758
    1934:	0000bd08 	.word	0x0000bd08
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1938:	9901      	ldr	r1, [sp, #4]
    193a:	9a03      	ldr	r2, [sp, #12]
    193c:	4613      	mov	r3, r2
    193e:	005b      	lsls	r3, r3, #1
    1940:	4413      	add	r3, r2
    1942:	009b      	lsls	r3, r3, #2
    1944:	440b      	add	r3, r1
    1946:	f503 730e 	add.w	r3, r3, #568	; 0x238
    194a:	681a      	ldr	r2, [r3, #0]
    194c:	49ac      	ldr	r1, [pc, #688]	; (1c00 <Clock_Ip_InitClock+0x584>)
    194e:	4613      	mov	r3, r2
    1950:	00db      	lsls	r3, r3, #3
    1952:	4413      	add	r3, r2
    1954:	440b      	add	r3, r1
    1956:	3301      	adds	r3, #1
    1958:	781b      	ldrb	r3, [r3, #0]
    195a:	461a      	mov	r2, r3
    195c:	4ba9      	ldr	r3, [pc, #676]	; (1c04 <Clock_Ip_InitClock+0x588>)
    195e:	5c9b      	ldrb	r3, [r3, r2]
    1960:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    1962:	4aa9      	ldr	r2, [pc, #676]	; (1c08 <Clock_Ip_InitClock+0x58c>)
    1964:	9b02      	ldr	r3, [sp, #8]
    1966:	00db      	lsls	r3, r3, #3
    1968:	4413      	add	r3, r2
    196a:	6859      	ldr	r1, [r3, #4]
    196c:	9a03      	ldr	r2, [sp, #12]
    196e:	4613      	mov	r3, r2
    1970:	005b      	lsls	r3, r3, #1
    1972:	4413      	add	r3, r2
    1974:	009b      	lsls	r3, r3, #2
    1976:	f503 730e 	add.w	r3, r3, #568	; 0x238
    197a:	9a01      	ldr	r2, [sp, #4]
    197c:	4413      	add	r3, r2
    197e:	4618      	mov	r0, r3
    1980:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1982:	9b03      	ldr	r3, [sp, #12]
    1984:	3301      	adds	r3, #1
    1986:	9303      	str	r3, [sp, #12]
    1988:	9b01      	ldr	r3, [sp, #4]
    198a:	7b5b      	ldrb	r3, [r3, #13]
    198c:	461a      	mov	r2, r3
    198e:	9b03      	ldr	r3, [sp, #12]
    1990:	4293      	cmp	r3, r2
    1992:	d3d1      	bcc.n	1938 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1994:	2300      	movs	r3, #0
    1996:	9303      	str	r3, [sp, #12]
    1998:	e029      	b.n	19ee <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    199a:	9901      	ldr	r1, [sp, #4]
    199c:	9a03      	ldr	r2, [sp, #12]
    199e:	4613      	mov	r3, r2
    19a0:	009b      	lsls	r3, r3, #2
    19a2:	4413      	add	r3, r2
    19a4:	00db      	lsls	r3, r3, #3
    19a6:	440b      	add	r3, r1
    19a8:	3340      	adds	r3, #64	; 0x40
    19aa:	681a      	ldr	r2, [r3, #0]
    19ac:	4994      	ldr	r1, [pc, #592]	; (1c00 <Clock_Ip_InitClock+0x584>)
    19ae:	4613      	mov	r3, r2
    19b0:	00db      	lsls	r3, r3, #3
    19b2:	4413      	add	r3, r2
    19b4:	440b      	add	r3, r1
    19b6:	3301      	adds	r3, #1
    19b8:	781b      	ldrb	r3, [r3, #0]
    19ba:	461a      	mov	r2, r3
    19bc:	4b93      	ldr	r3, [pc, #588]	; (1c0c <Clock_Ip_InitClock+0x590>)
    19be:	5c9b      	ldrb	r3, [r3, r2]
    19c0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    19c2:	4993      	ldr	r1, [pc, #588]	; (1c10 <Clock_Ip_InitClock+0x594>)
    19c4:	9a02      	ldr	r2, [sp, #8]
    19c6:	4613      	mov	r3, r2
    19c8:	009b      	lsls	r3, r3, #2
    19ca:	4413      	add	r3, r2
    19cc:	009b      	lsls	r3, r3, #2
    19ce:	440b      	add	r3, r1
    19d0:	3304      	adds	r3, #4
    19d2:	6819      	ldr	r1, [r3, #0]
    19d4:	9a03      	ldr	r2, [sp, #12]
    19d6:	4613      	mov	r3, r2
    19d8:	009b      	lsls	r3, r3, #2
    19da:	4413      	add	r3, r2
    19dc:	00db      	lsls	r3, r3, #3
    19de:	3340      	adds	r3, #64	; 0x40
    19e0:	9a01      	ldr	r2, [sp, #4]
    19e2:	4413      	add	r3, r2
    19e4:	4618      	mov	r0, r3
    19e6:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    19e8:	9b03      	ldr	r3, [sp, #12]
    19ea:	3301      	adds	r3, #1
    19ec:	9303      	str	r3, [sp, #12]
    19ee:	9b01      	ldr	r3, [sp, #4]
    19f0:	7a9b      	ldrb	r3, [r3, #10]
    19f2:	461a      	mov	r2, r3
    19f4:	9b03      	ldr	r3, [sp, #12]
    19f6:	4293      	cmp	r3, r2
    19f8:	d3cf      	bcc.n	199a <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    19fa:	2300      	movs	r3, #0
    19fc:	9303      	str	r3, [sp, #12]
    19fe:	e029      	b.n	1a54 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1a00:	9901      	ldr	r1, [sp, #4]
    1a02:	9a03      	ldr	r2, [sp, #12]
    1a04:	4613      	mov	r3, r2
    1a06:	009b      	lsls	r3, r3, #2
    1a08:	4413      	add	r3, r2
    1a0a:	009b      	lsls	r3, r3, #2
    1a0c:	440b      	add	r3, r1
    1a0e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1a12:	681a      	ldr	r2, [r3, #0]
    1a14:	497a      	ldr	r1, [pc, #488]	; (1c00 <Clock_Ip_InitClock+0x584>)
    1a16:	4613      	mov	r3, r2
    1a18:	00db      	lsls	r3, r3, #3
    1a1a:	4413      	add	r3, r2
    1a1c:	440b      	add	r3, r1
    1a1e:	3301      	adds	r3, #1
    1a20:	781b      	ldrb	r3, [r3, #0]
    1a22:	461a      	mov	r2, r3
    1a24:	4b7b      	ldr	r3, [pc, #492]	; (1c14 <Clock_Ip_InitClock+0x598>)
    1a26:	5c9b      	ldrb	r3, [r3, r2]
    1a28:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    1a2a:	4a7b      	ldr	r2, [pc, #492]	; (1c18 <Clock_Ip_InitClock+0x59c>)
    1a2c:	9b02      	ldr	r3, [sp, #8]
    1a2e:	011b      	lsls	r3, r3, #4
    1a30:	4413      	add	r3, r2
    1a32:	3304      	adds	r3, #4
    1a34:	681c      	ldr	r4, [r3, #0]
    1a36:	9a03      	ldr	r2, [sp, #12]
    1a38:	4613      	mov	r3, r2
    1a3a:	009b      	lsls	r3, r3, #2
    1a3c:	4413      	add	r3, r2
    1a3e:	009b      	lsls	r3, r3, #2
    1a40:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1a44:	9a01      	ldr	r2, [sp, #4]
    1a46:	4413      	add	r3, r2
    1a48:	9903      	ldr	r1, [sp, #12]
    1a4a:	4618      	mov	r0, r3
    1a4c:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1a4e:	9b03      	ldr	r3, [sp, #12]
    1a50:	3301      	adds	r3, #1
    1a52:	9303      	str	r3, [sp, #12]
    1a54:	9b01      	ldr	r3, [sp, #4]
    1a56:	7c9b      	ldrb	r3, [r3, #18]
    1a58:	461a      	mov	r2, r3
    1a5a:	9b03      	ldr	r3, [sp, #12]
    1a5c:	4293      	cmp	r3, r2
    1a5e:	d3cf      	bcc.n	1a00 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1a60:	2300      	movs	r3, #0
    1a62:	9303      	str	r3, [sp, #12]
    1a64:	e02a      	b.n	1abc <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1a66:	9901      	ldr	r1, [sp, #4]
    1a68:	9a03      	ldr	r2, [sp, #12]
    1a6a:	4613      	mov	r3, r2
    1a6c:	009b      	lsls	r3, r3, #2
    1a6e:	4413      	add	r3, r2
    1a70:	009b      	lsls	r3, r3, #2
    1a72:	440b      	add	r3, r1
    1a74:	332c      	adds	r3, #44	; 0x2c
    1a76:	681a      	ldr	r2, [r3, #0]
    1a78:	4961      	ldr	r1, [pc, #388]	; (1c00 <Clock_Ip_InitClock+0x584>)
    1a7a:	4613      	mov	r3, r2
    1a7c:	00db      	lsls	r3, r3, #3
    1a7e:	4413      	add	r3, r2
    1a80:	440b      	add	r3, r1
    1a82:	3301      	adds	r3, #1
    1a84:	781b      	ldrb	r3, [r3, #0]
    1a86:	461a      	mov	r2, r3
    1a88:	4b64      	ldr	r3, [pc, #400]	; (1c1c <Clock_Ip_InitClock+0x5a0>)
    1a8a:	5c9b      	ldrb	r3, [r3, r2]
    1a8c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    1a8e:	4964      	ldr	r1, [pc, #400]	; (1c20 <Clock_Ip_InitClock+0x5a4>)
    1a90:	9a02      	ldr	r2, [sp, #8]
    1a92:	4613      	mov	r3, r2
    1a94:	009b      	lsls	r3, r3, #2
    1a96:	4413      	add	r3, r2
    1a98:	009b      	lsls	r3, r3, #2
    1a9a:	440b      	add	r3, r1
    1a9c:	3308      	adds	r3, #8
    1a9e:	6819      	ldr	r1, [r3, #0]
    1aa0:	9a03      	ldr	r2, [sp, #12]
    1aa2:	4613      	mov	r3, r2
    1aa4:	009b      	lsls	r3, r3, #2
    1aa6:	4413      	add	r3, r2
    1aa8:	009b      	lsls	r3, r3, #2
    1aaa:	3328      	adds	r3, #40	; 0x28
    1aac:	9a01      	ldr	r2, [sp, #4]
    1aae:	4413      	add	r3, r2
    1ab0:	3304      	adds	r3, #4
    1ab2:	4618      	mov	r0, r3
    1ab4:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1ab6:	9b03      	ldr	r3, [sp, #12]
    1ab8:	3301      	adds	r3, #1
    1aba:	9303      	str	r3, [sp, #12]
    1abc:	9b01      	ldr	r3, [sp, #4]
    1abe:	7a5b      	ldrb	r3, [r3, #9]
    1ac0:	461a      	mov	r2, r3
    1ac2:	9b03      	ldr	r3, [sp, #12]
    1ac4:	4293      	cmp	r3, r2
    1ac6:	d3ce      	bcc.n	1a66 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1ac8:	2300      	movs	r3, #0
    1aca:	9303      	str	r3, [sp, #12]
    1acc:	e029      	b.n	1b22 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1ace:	9901      	ldr	r1, [sp, #4]
    1ad0:	9a03      	ldr	r2, [sp, #12]
    1ad2:	4613      	mov	r3, r2
    1ad4:	009b      	lsls	r3, r3, #2
    1ad6:	4413      	add	r3, r2
    1ad8:	00db      	lsls	r3, r3, #3
    1ada:	440b      	add	r3, r1
    1adc:	3340      	adds	r3, #64	; 0x40
    1ade:	681a      	ldr	r2, [r3, #0]
    1ae0:	4947      	ldr	r1, [pc, #284]	; (1c00 <Clock_Ip_InitClock+0x584>)
    1ae2:	4613      	mov	r3, r2
    1ae4:	00db      	lsls	r3, r3, #3
    1ae6:	4413      	add	r3, r2
    1ae8:	440b      	add	r3, r1
    1aea:	3301      	adds	r3, #1
    1aec:	781b      	ldrb	r3, [r3, #0]
    1aee:	461a      	mov	r2, r3
    1af0:	4b46      	ldr	r3, [pc, #280]	; (1c0c <Clock_Ip_InitClock+0x590>)
    1af2:	5c9b      	ldrb	r3, [r3, r2]
    1af4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    1af6:	4946      	ldr	r1, [pc, #280]	; (1c10 <Clock_Ip_InitClock+0x594>)
    1af8:	9a02      	ldr	r2, [sp, #8]
    1afa:	4613      	mov	r3, r2
    1afc:	009b      	lsls	r3, r3, #2
    1afe:	4413      	add	r3, r2
    1b00:	009b      	lsls	r3, r3, #2
    1b02:	440b      	add	r3, r1
    1b04:	330c      	adds	r3, #12
    1b06:	6819      	ldr	r1, [r3, #0]
    1b08:	9a03      	ldr	r2, [sp, #12]
    1b0a:	4613      	mov	r3, r2
    1b0c:	009b      	lsls	r3, r3, #2
    1b0e:	4413      	add	r3, r2
    1b10:	00db      	lsls	r3, r3, #3
    1b12:	3340      	adds	r3, #64	; 0x40
    1b14:	9a01      	ldr	r2, [sp, #4]
    1b16:	4413      	add	r3, r2
    1b18:	4618      	mov	r0, r3
    1b1a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1b1c:	9b03      	ldr	r3, [sp, #12]
    1b1e:	3301      	adds	r3, #1
    1b20:	9303      	str	r3, [sp, #12]
    1b22:	9b01      	ldr	r3, [sp, #4]
    1b24:	7a9b      	ldrb	r3, [r3, #10]
    1b26:	461a      	mov	r2, r3
    1b28:	9b03      	ldr	r3, [sp, #12]
    1b2a:	4293      	cmp	r3, r2
    1b2c:	d3cf      	bcc.n	1ace <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1b2e:	2300      	movs	r3, #0
    1b30:	9303      	str	r3, [sp, #12]
    1b32:	e025      	b.n	1b80 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    1b34:	9a01      	ldr	r2, [sp, #4]
    1b36:	9b03      	ldr	r3, [sp, #12]
    1b38:	3324      	adds	r3, #36	; 0x24
    1b3a:	011b      	lsls	r3, r3, #4
    1b3c:	4413      	add	r3, r2
    1b3e:	3304      	adds	r3, #4
    1b40:	681a      	ldr	r2, [r3, #0]
    1b42:	492f      	ldr	r1, [pc, #188]	; (1c00 <Clock_Ip_InitClock+0x584>)
    1b44:	4613      	mov	r3, r2
    1b46:	00db      	lsls	r3, r3, #3
    1b48:	4413      	add	r3, r2
    1b4a:	440b      	add	r3, r1
    1b4c:	3301      	adds	r3, #1
    1b4e:	781b      	ldrb	r3, [r3, #0]
    1b50:	461a      	mov	r2, r3
    1b52:	4b34      	ldr	r3, [pc, #208]	; (1c24 <Clock_Ip_InitClock+0x5a8>)
    1b54:	5c9b      	ldrb	r3, [r3, r2]
    1b56:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    1b58:	4933      	ldr	r1, [pc, #204]	; (1c28 <Clock_Ip_InitClock+0x5ac>)
    1b5a:	9a02      	ldr	r2, [sp, #8]
    1b5c:	4613      	mov	r3, r2
    1b5e:	005b      	lsls	r3, r3, #1
    1b60:	4413      	add	r3, r2
    1b62:	009b      	lsls	r3, r3, #2
    1b64:	440b      	add	r3, r1
    1b66:	3304      	adds	r3, #4
    1b68:	681b      	ldr	r3, [r3, #0]
    1b6a:	9a03      	ldr	r2, [sp, #12]
    1b6c:	3224      	adds	r2, #36	; 0x24
    1b6e:	0112      	lsls	r2, r2, #4
    1b70:	9901      	ldr	r1, [sp, #4]
    1b72:	440a      	add	r2, r1
    1b74:	3204      	adds	r2, #4
    1b76:	4610      	mov	r0, r2
    1b78:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1b7a:	9b03      	ldr	r3, [sp, #12]
    1b7c:	3301      	adds	r3, #1
    1b7e:	9303      	str	r3, [sp, #12]
    1b80:	9b01      	ldr	r3, [sp, #4]
    1b82:	7b9b      	ldrb	r3, [r3, #14]
    1b84:	461a      	mov	r2, r3
    1b86:	9b03      	ldr	r3, [sp, #12]
    1b88:	4293      	cmp	r3, r2
    1b8a:	d3d3      	bcc.n	1b34 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    1b8c:	4b27      	ldr	r3, [pc, #156]	; (1c2c <Clock_Ip_InitClock+0x5b0>)
    1b8e:	2200      	movs	r2, #0
    1b90:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    1b92:	4b26      	ldr	r3, [pc, #152]	; (1c2c <Clock_Ip_InitClock+0x5b0>)
    1b94:	2200      	movs	r2, #0
    1b96:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    1b98:	4b24      	ldr	r3, [pc, #144]	; (1c2c <Clock_Ip_InitClock+0x5b0>)
    1b9a:	2201      	movs	r2, #1
    1b9c:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    1b9e:	4b23      	ldr	r3, [pc, #140]	; (1c2c <Clock_Ip_InitClock+0x5b0>)
    1ba0:	2200      	movs	r2, #0
    1ba2:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    1ba4:	f000 fa9c 	bl	20e0 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1ba8:	2300      	movs	r3, #0
    1baa:	9303      	str	r3, [sp, #12]
    1bac:	e04c      	b.n	1c48 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    1bae:	9a01      	ldr	r2, [sp, #4]
    1bb0:	9b03      	ldr	r3, [sp, #12]
    1bb2:	330d      	adds	r3, #13
    1bb4:	00db      	lsls	r3, r3, #3
    1bb6:	4413      	add	r3, r2
    1bb8:	685b      	ldr	r3, [r3, #4]
    1bba:	4a1d      	ldr	r2, [pc, #116]	; (1c30 <Clock_Ip_InitClock+0x5b4>)
    1bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1bc0:	2b03      	cmp	r3, #3
    1bc2:	d03b      	beq.n	1c3c <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1bc4:	9b01      	ldr	r3, [sp, #4]
    1bc6:	9a03      	ldr	r2, [sp, #12]
    1bc8:	320d      	adds	r2, #13
    1bca:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1bce:	490c      	ldr	r1, [pc, #48]	; (1c00 <Clock_Ip_InitClock+0x584>)
    1bd0:	4613      	mov	r3, r2
    1bd2:	00db      	lsls	r3, r3, #3
    1bd4:	4413      	add	r3, r2
    1bd6:	440b      	add	r3, r1
    1bd8:	3301      	adds	r3, #1
    1bda:	781b      	ldrb	r3, [r3, #0]
    1bdc:	461a      	mov	r2, r3
    1bde:	4b15      	ldr	r3, [pc, #84]	; (1c34 <Clock_Ip_InitClock+0x5b8>)
    1be0:	5c9b      	ldrb	r3, [r3, r2]
    1be2:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    1be4:	4a14      	ldr	r2, [pc, #80]	; (1c38 <Clock_Ip_InitClock+0x5bc>)
    1be6:	9b02      	ldr	r3, [sp, #8]
    1be8:	00db      	lsls	r3, r3, #3
    1bea:	4413      	add	r3, r2
    1bec:	685b      	ldr	r3, [r3, #4]
    1bee:	9a03      	ldr	r2, [sp, #12]
    1bf0:	320d      	adds	r2, #13
    1bf2:	00d2      	lsls	r2, r2, #3
    1bf4:	9901      	ldr	r1, [sp, #4]
    1bf6:	440a      	add	r2, r1
    1bf8:	4610      	mov	r0, r2
    1bfa:	4798      	blx	r3
    1bfc:	e021      	b.n	1c42 <Clock_Ip_InitClock+0x5c6>
    1bfe:	bf00      	nop
    1c00:	0000b7f8 	.word	0x0000b7f8
    1c04:	0000b768 	.word	0x0000b768
    1c08:	0000bd44 	.word	0x0000bd44
    1c0c:	0000b7b8 	.word	0x0000b7b8
    1c10:	0000be04 	.word	0x0000be04
    1c14:	0000b7e8 	.word	0x0000b7e8
    1c18:	0000bdf4 	.word	0x0000bdf4
    1c1c:	0000b778 	.word	0x0000b778
    1c20:	0000bd4c 	.word	0x0000bd4c
    1c24:	0000b7a8 	.word	0x0000b7a8
    1c28:	0000bd74 	.word	0x0000bd74
    1c2c:	1fff8b6c 	.word	0x1fff8b6c
    1c30:	0000bc44 	.word	0x0000bc44
    1c34:	0000b7c8 	.word	0x0000b7c8
    1c38:	0000be30 	.word	0x0000be30
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    1c3c:	4b3a      	ldr	r3, [pc, #232]	; (1d28 <Clock_Ip_InitClock+0x6ac>)
    1c3e:	2201      	movs	r2, #1
    1c40:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1c42:	9b03      	ldr	r3, [sp, #12]
    1c44:	3301      	adds	r3, #1
    1c46:	9303      	str	r3, [sp, #12]
    1c48:	9b01      	ldr	r3, [sp, #4]
    1c4a:	7adb      	ldrb	r3, [r3, #11]
    1c4c:	461a      	mov	r2, r3
    1c4e:	9b03      	ldr	r3, [sp, #12]
    1c50:	4293      	cmp	r3, r2
    1c52:	d3ac      	bcc.n	1bae <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    1c54:	4b34      	ldr	r3, [pc, #208]	; (1d28 <Clock_Ip_InitClock+0x6ac>)
    1c56:	781b      	ldrb	r3, [r3, #0]
    1c58:	f083 0301 	eor.w	r3, r3, #1
    1c5c:	b2db      	uxtb	r3, r3
    1c5e:	2b00      	cmp	r3, #0
    1c60:	d05e      	beq.n	1d20 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1c62:	2300      	movs	r3, #0
    1c64:	9303      	str	r3, [sp, #12]
    1c66:	e01f      	b.n	1ca8 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1c68:	9a01      	ldr	r2, [sp, #4]
    1c6a:	9b03      	ldr	r3, [sp, #12]
    1c6c:	334e      	adds	r3, #78	; 0x4e
    1c6e:	00db      	lsls	r3, r3, #3
    1c70:	4413      	add	r3, r2
    1c72:	685a      	ldr	r2, [r3, #4]
    1c74:	492d      	ldr	r1, [pc, #180]	; (1d2c <Clock_Ip_InitClock+0x6b0>)
    1c76:	4613      	mov	r3, r2
    1c78:	00db      	lsls	r3, r3, #3
    1c7a:	4413      	add	r3, r2
    1c7c:	440b      	add	r3, r1
    1c7e:	3301      	adds	r3, #1
    1c80:	781b      	ldrb	r3, [r3, #0]
    1c82:	461a      	mov	r2, r3
    1c84:	4b2a      	ldr	r3, [pc, #168]	; (1d30 <Clock_Ip_InitClock+0x6b4>)
    1c86:	5c9b      	ldrb	r3, [r3, r2]
    1c88:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    1c8a:	4a2a      	ldr	r2, [pc, #168]	; (1d34 <Clock_Ip_InitClock+0x6b8>)
    1c8c:	9b02      	ldr	r3, [sp, #8]
    1c8e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1c92:	9a03      	ldr	r2, [sp, #12]
    1c94:	324e      	adds	r2, #78	; 0x4e
    1c96:	00d2      	lsls	r2, r2, #3
    1c98:	9901      	ldr	r1, [sp, #4]
    1c9a:	440a      	add	r2, r1
    1c9c:	3204      	adds	r2, #4
    1c9e:	4610      	mov	r0, r2
    1ca0:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1ca2:	9b03      	ldr	r3, [sp, #12]
    1ca4:	3301      	adds	r3, #1
    1ca6:	9303      	str	r3, [sp, #12]
    1ca8:	9b01      	ldr	r3, [sp, #4]
    1caa:	7c1b      	ldrb	r3, [r3, #16]
    1cac:	461a      	mov	r2, r3
    1cae:	9b03      	ldr	r3, [sp, #12]
    1cb0:	4293      	cmp	r3, r2
    1cb2:	d3d9      	bcc.n	1c68 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1cb4:	2300      	movs	r3, #0
    1cb6:	9303      	str	r3, [sp, #12]
    1cb8:	e028      	b.n	1d0c <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1cba:	9901      	ldr	r1, [sp, #4]
    1cbc:	9a03      	ldr	r2, [sp, #12]
    1cbe:	4613      	mov	r3, r2
    1cc0:	009b      	lsls	r3, r3, #2
    1cc2:	4413      	add	r3, r2
    1cc4:	009b      	lsls	r3, r3, #2
    1cc6:	440b      	add	r3, r1
    1cc8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1ccc:	681a      	ldr	r2, [r3, #0]
    1cce:	4917      	ldr	r1, [pc, #92]	; (1d2c <Clock_Ip_InitClock+0x6b0>)
    1cd0:	4613      	mov	r3, r2
    1cd2:	00db      	lsls	r3, r3, #3
    1cd4:	4413      	add	r3, r2
    1cd6:	440b      	add	r3, r1
    1cd8:	3301      	adds	r3, #1
    1cda:	781b      	ldrb	r3, [r3, #0]
    1cdc:	461a      	mov	r2, r3
    1cde:	4b16      	ldr	r3, [pc, #88]	; (1d38 <Clock_Ip_InitClock+0x6bc>)
    1ce0:	5c9b      	ldrb	r3, [r3, r2]
    1ce2:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    1ce4:	4a15      	ldr	r2, [pc, #84]	; (1d3c <Clock_Ip_InitClock+0x6c0>)
    1ce6:	9b02      	ldr	r3, [sp, #8]
    1ce8:	011b      	lsls	r3, r3, #4
    1cea:	4413      	add	r3, r2
    1cec:	330c      	adds	r3, #12
    1cee:	6819      	ldr	r1, [r3, #0]
    1cf0:	9a03      	ldr	r2, [sp, #12]
    1cf2:	4613      	mov	r3, r2
    1cf4:	009b      	lsls	r3, r3, #2
    1cf6:	4413      	add	r3, r2
    1cf8:	009b      	lsls	r3, r3, #2
    1cfa:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1cfe:	9a01      	ldr	r2, [sp, #4]
    1d00:	4413      	add	r3, r2
    1d02:	4618      	mov	r0, r3
    1d04:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1d06:	9b03      	ldr	r3, [sp, #12]
    1d08:	3301      	adds	r3, #1
    1d0a:	9303      	str	r3, [sp, #12]
    1d0c:	9b01      	ldr	r3, [sp, #4]
    1d0e:	7c9b      	ldrb	r3, [r3, #18]
    1d10:	461a      	mov	r2, r3
    1d12:	9b03      	ldr	r3, [sp, #12]
    1d14:	4293      	cmp	r3, r2
    1d16:	d3d0      	bcc.n	1cba <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1d18:	2104      	movs	r1, #4
    1d1a:	9801      	ldr	r0, [sp, #4]
    1d1c:	f002 ff48 	bl	4bb0 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    1d20:	bf00      	nop
    1d22:	b004      	add	sp, #16
    1d24:	bd10      	pop	{r4, pc}
    1d26:	bf00      	nop
    1d28:	1fff8b6c 	.word	0x1fff8b6c
    1d2c:	0000b7f8 	.word	0x0000b7f8
    1d30:	0000b798 	.word	0x0000b798
    1d34:	0000bd80 	.word	0x0000bd80
    1d38:	0000b7e8 	.word	0x0000b7e8
    1d3c:	0000bdf4 	.word	0x0000bdf4

00001d40 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    1d40:	b500      	push	{lr}
    1d42:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    1d44:	2302      	movs	r3, #2
    1d46:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1d48:	2300      	movs	r3, #0
    1d4a:	9304      	str	r3, [sp, #16]
    1d4c:	e02c      	b.n	1da8 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    1d4e:	4a36      	ldr	r2, [pc, #216]	; (1e28 <Clock_Ip_GetPllStatus+0xe8>)
    1d50:	9b04      	ldr	r3, [sp, #16]
    1d52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1d56:	4935      	ldr	r1, [pc, #212]	; (1e2c <Clock_Ip_GetPllStatus+0xec>)
    1d58:	4613      	mov	r3, r2
    1d5a:	00db      	lsls	r3, r3, #3
    1d5c:	4413      	add	r3, r2
    1d5e:	440b      	add	r3, r1
    1d60:	3301      	adds	r3, #1
    1d62:	781b      	ldrb	r3, [r3, #0]
    1d64:	461a      	mov	r2, r3
    1d66:	4b32      	ldr	r3, [pc, #200]	; (1e30 <Clock_Ip_GetPllStatus+0xf0>)
    1d68:	5c9b      	ldrb	r3, [r3, r2]
    1d6a:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    1d6c:	4931      	ldr	r1, [pc, #196]	; (1e34 <Clock_Ip_GetPllStatus+0xf4>)
    1d6e:	9a03      	ldr	r2, [sp, #12]
    1d70:	4613      	mov	r3, r2
    1d72:	009b      	lsls	r3, r3, #2
    1d74:	4413      	add	r3, r2
    1d76:	009b      	lsls	r3, r3, #2
    1d78:	440b      	add	r3, r1
    1d7a:	3308      	adds	r3, #8
    1d7c:	681b      	ldr	r3, [r3, #0]
    1d7e:	492a      	ldr	r1, [pc, #168]	; (1e28 <Clock_Ip_GetPllStatus+0xe8>)
    1d80:	9a04      	ldr	r2, [sp, #16]
    1d82:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1d86:	4610      	mov	r0, r2
    1d88:	4798      	blx	r3
    1d8a:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    1d8c:	9b02      	ldr	r3, [sp, #8]
    1d8e:	2b01      	cmp	r3, #1
    1d90:	d102      	bne.n	1d98 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    1d92:	2301      	movs	r3, #1
    1d94:	9305      	str	r3, [sp, #20]
            break;
    1d96:	e00d      	b.n	1db4 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    1d98:	9b02      	ldr	r3, [sp, #8]
    1d9a:	2b02      	cmp	r3, #2
    1d9c:	d101      	bne.n	1da2 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    1d9e:	2300      	movs	r3, #0
    1da0:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1da2:	9b04      	ldr	r3, [sp, #16]
    1da4:	3301      	adds	r3, #1
    1da6:	9304      	str	r3, [sp, #16]
    1da8:	4b23      	ldr	r3, [pc, #140]	; (1e38 <Clock_Ip_GetPllStatus+0xf8>)
    1daa:	789b      	ldrb	r3, [r3, #2]
    1dac:	461a      	mov	r2, r3
    1dae:	9b04      	ldr	r3, [sp, #16]
    1db0:	4293      	cmp	r3, r2
    1db2:	d3cc      	bcc.n	1d4e <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    1db4:	9b05      	ldr	r3, [sp, #20]
    1db6:	2b00      	cmp	r3, #0
    1db8:	d130      	bne.n	1e1c <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1dba:	2300      	movs	r3, #0
    1dbc:	9304      	str	r3, [sp, #16]
    1dbe:	e027      	b.n	1e10 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    1dc0:	4a1e      	ldr	r2, [pc, #120]	; (1e3c <Clock_Ip_GetPllStatus+0xfc>)
    1dc2:	9b04      	ldr	r3, [sp, #16]
    1dc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1dc8:	4918      	ldr	r1, [pc, #96]	; (1e2c <Clock_Ip_GetPllStatus+0xec>)
    1dca:	4613      	mov	r3, r2
    1dcc:	00db      	lsls	r3, r3, #3
    1dce:	4413      	add	r3, r2
    1dd0:	440b      	add	r3, r1
    1dd2:	3301      	adds	r3, #1
    1dd4:	781b      	ldrb	r3, [r3, #0]
    1dd6:	461a      	mov	r2, r3
    1dd8:	4b19      	ldr	r3, [pc, #100]	; (1e40 <Clock_Ip_GetPllStatus+0x100>)
    1dda:	5c9b      	ldrb	r3, [r3, r2]
    1ddc:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    1dde:	4919      	ldr	r1, [pc, #100]	; (1e44 <Clock_Ip_GetPllStatus+0x104>)
    1de0:	9a03      	ldr	r2, [sp, #12]
    1de2:	4613      	mov	r3, r2
    1de4:	005b      	lsls	r3, r3, #1
    1de6:	4413      	add	r3, r2
    1de8:	009b      	lsls	r3, r3, #2
    1dea:	440b      	add	r3, r1
    1dec:	3308      	adds	r3, #8
    1dee:	681b      	ldr	r3, [r3, #0]
    1df0:	4912      	ldr	r1, [pc, #72]	; (1e3c <Clock_Ip_GetPllStatus+0xfc>)
    1df2:	9a04      	ldr	r2, [sp, #16]
    1df4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1df8:	4610      	mov	r0, r2
    1dfa:	4798      	blx	r3
    1dfc:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    1dfe:	9b01      	ldr	r3, [sp, #4]
    1e00:	2b01      	cmp	r3, #1
    1e02:	d102      	bne.n	1e0a <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    1e04:	2301      	movs	r3, #1
    1e06:	9305      	str	r3, [sp, #20]
                break;
    1e08:	e008      	b.n	1e1c <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1e0a:	9b04      	ldr	r3, [sp, #16]
    1e0c:	3301      	adds	r3, #1
    1e0e:	9304      	str	r3, [sp, #16]
    1e10:	4b09      	ldr	r3, [pc, #36]	; (1e38 <Clock_Ip_GetPllStatus+0xf8>)
    1e12:	78db      	ldrb	r3, [r3, #3]
    1e14:	461a      	mov	r2, r3
    1e16:	9b04      	ldr	r3, [sp, #16]
    1e18:	4293      	cmp	r3, r2
    1e1a:	d3d1      	bcc.n	1dc0 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    1e1c:	9b05      	ldr	r3, [sp, #20]
}
    1e1e:	4618      	mov	r0, r3
    1e20:	b007      	add	sp, #28
    1e22:	f85d fb04 	ldr.w	pc, [sp], #4
    1e26:	bf00      	nop
    1e28:	0000bd00 	.word	0x0000bd00
    1e2c:	0000b7f8 	.word	0x0000b7f8
    1e30:	0000b7b8 	.word	0x0000b7b8
    1e34:	0000be04 	.word	0x0000be04
    1e38:	1fff8b6c 	.word	0x1fff8b6c
    1e3c:	0000bd04 	.word	0x0000bd04
    1e40:	0000b7a8 	.word	0x0000b7a8
    1e44:	0000bd74 	.word	0x0000bd74

00001e48 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    1e48:	b500      	push	{lr}
    1e4a:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1e4c:	4b55      	ldr	r3, [pc, #340]	; (1fa4 <Clock_Ip_DistributePll+0x15c>)
    1e4e:	681b      	ldr	r3, [r3, #0]
    1e50:	2b00      	cmp	r3, #0
    1e52:	f000 80a2 	beq.w	1f9a <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1e56:	2300      	movs	r3, #0
    1e58:	9301      	str	r3, [sp, #4]
    1e5a:	e02c      	b.n	1eb6 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    1e5c:	4b51      	ldr	r3, [pc, #324]	; (1fa4 <Clock_Ip_DistributePll+0x15c>)
    1e5e:	681a      	ldr	r2, [r3, #0]
    1e60:	9b01      	ldr	r3, [sp, #4]
    1e62:	330d      	adds	r3, #13
    1e64:	00db      	lsls	r3, r3, #3
    1e66:	4413      	add	r3, r2
    1e68:	685b      	ldr	r3, [r3, #4]
    1e6a:	4a4f      	ldr	r2, [pc, #316]	; (1fa8 <Clock_Ip_DistributePll+0x160>)
    1e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e70:	2b03      	cmp	r3, #3
    1e72:	d11d      	bne.n	1eb0 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1e74:	4b4b      	ldr	r3, [pc, #300]	; (1fa4 <Clock_Ip_DistributePll+0x15c>)
    1e76:	681b      	ldr	r3, [r3, #0]
    1e78:	9a01      	ldr	r2, [sp, #4]
    1e7a:	320d      	adds	r2, #13
    1e7c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1e80:	494a      	ldr	r1, [pc, #296]	; (1fac <Clock_Ip_DistributePll+0x164>)
    1e82:	4613      	mov	r3, r2
    1e84:	00db      	lsls	r3, r3, #3
    1e86:	4413      	add	r3, r2
    1e88:	440b      	add	r3, r1
    1e8a:	3301      	adds	r3, #1
    1e8c:	781b      	ldrb	r3, [r3, #0]
    1e8e:	461a      	mov	r2, r3
    1e90:	4b47      	ldr	r3, [pc, #284]	; (1fb0 <Clock_Ip_DistributePll+0x168>)
    1e92:	5c9b      	ldrb	r3, [r3, r2]
    1e94:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    1e96:	4a47      	ldr	r2, [pc, #284]	; (1fb4 <Clock_Ip_DistributePll+0x16c>)
    1e98:	9b00      	ldr	r3, [sp, #0]
    1e9a:	00db      	lsls	r3, r3, #3
    1e9c:	4413      	add	r3, r2
    1e9e:	685b      	ldr	r3, [r3, #4]
    1ea0:	4a40      	ldr	r2, [pc, #256]	; (1fa4 <Clock_Ip_DistributePll+0x15c>)
    1ea2:	6811      	ldr	r1, [r2, #0]
    1ea4:	9a01      	ldr	r2, [sp, #4]
    1ea6:	320d      	adds	r2, #13
    1ea8:	00d2      	lsls	r2, r2, #3
    1eaa:	440a      	add	r2, r1
    1eac:	4610      	mov	r0, r2
    1eae:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1eb0:	9b01      	ldr	r3, [sp, #4]
    1eb2:	3301      	adds	r3, #1
    1eb4:	9301      	str	r3, [sp, #4]
    1eb6:	4b3b      	ldr	r3, [pc, #236]	; (1fa4 <Clock_Ip_DistributePll+0x15c>)
    1eb8:	681b      	ldr	r3, [r3, #0]
    1eba:	7adb      	ldrb	r3, [r3, #11]
    1ebc:	461a      	mov	r2, r3
    1ebe:	9b01      	ldr	r3, [sp, #4]
    1ec0:	4293      	cmp	r3, r2
    1ec2:	d3cb      	bcc.n	1e5c <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    1ec4:	4b3c      	ldr	r3, [pc, #240]	; (1fb8 <Clock_Ip_DistributePll+0x170>)
    1ec6:	781b      	ldrb	r3, [r3, #0]
    1ec8:	2b00      	cmp	r3, #0
    1eca:	d066      	beq.n	1f9a <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1ecc:	2300      	movs	r3, #0
    1ece:	9301      	str	r3, [sp, #4]
    1ed0:	e021      	b.n	1f16 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1ed2:	4b34      	ldr	r3, [pc, #208]	; (1fa4 <Clock_Ip_DistributePll+0x15c>)
    1ed4:	681a      	ldr	r2, [r3, #0]
    1ed6:	9b01      	ldr	r3, [sp, #4]
    1ed8:	334e      	adds	r3, #78	; 0x4e
    1eda:	00db      	lsls	r3, r3, #3
    1edc:	4413      	add	r3, r2
    1ede:	685a      	ldr	r2, [r3, #4]
    1ee0:	4932      	ldr	r1, [pc, #200]	; (1fac <Clock_Ip_DistributePll+0x164>)
    1ee2:	4613      	mov	r3, r2
    1ee4:	00db      	lsls	r3, r3, #3
    1ee6:	4413      	add	r3, r2
    1ee8:	440b      	add	r3, r1
    1eea:	3301      	adds	r3, #1
    1eec:	781b      	ldrb	r3, [r3, #0]
    1eee:	461a      	mov	r2, r3
    1ef0:	4b32      	ldr	r3, [pc, #200]	; (1fbc <Clock_Ip_DistributePll+0x174>)
    1ef2:	5c9b      	ldrb	r3, [r3, r2]
    1ef4:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    1ef6:	4a32      	ldr	r2, [pc, #200]	; (1fc0 <Clock_Ip_DistributePll+0x178>)
    1ef8:	9b00      	ldr	r3, [sp, #0]
    1efa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1efe:	4a29      	ldr	r2, [pc, #164]	; (1fa4 <Clock_Ip_DistributePll+0x15c>)
    1f00:	6811      	ldr	r1, [r2, #0]
    1f02:	9a01      	ldr	r2, [sp, #4]
    1f04:	324e      	adds	r2, #78	; 0x4e
    1f06:	00d2      	lsls	r2, r2, #3
    1f08:	440a      	add	r2, r1
    1f0a:	3204      	adds	r2, #4
    1f0c:	4610      	mov	r0, r2
    1f0e:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1f10:	9b01      	ldr	r3, [sp, #4]
    1f12:	3301      	adds	r3, #1
    1f14:	9301      	str	r3, [sp, #4]
    1f16:	4b23      	ldr	r3, [pc, #140]	; (1fa4 <Clock_Ip_DistributePll+0x15c>)
    1f18:	681b      	ldr	r3, [r3, #0]
    1f1a:	7c1b      	ldrb	r3, [r3, #16]
    1f1c:	461a      	mov	r2, r3
    1f1e:	9b01      	ldr	r3, [sp, #4]
    1f20:	4293      	cmp	r3, r2
    1f22:	d3d6      	bcc.n	1ed2 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1f24:	2300      	movs	r3, #0
    1f26:	9301      	str	r3, [sp, #4]
    1f28:	e02a      	b.n	1f80 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1f2a:	4b1e      	ldr	r3, [pc, #120]	; (1fa4 <Clock_Ip_DistributePll+0x15c>)
    1f2c:	6819      	ldr	r1, [r3, #0]
    1f2e:	9a01      	ldr	r2, [sp, #4]
    1f30:	4613      	mov	r3, r2
    1f32:	009b      	lsls	r3, r3, #2
    1f34:	4413      	add	r3, r2
    1f36:	009b      	lsls	r3, r3, #2
    1f38:	440b      	add	r3, r1
    1f3a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1f3e:	681a      	ldr	r2, [r3, #0]
    1f40:	491a      	ldr	r1, [pc, #104]	; (1fac <Clock_Ip_DistributePll+0x164>)
    1f42:	4613      	mov	r3, r2
    1f44:	00db      	lsls	r3, r3, #3
    1f46:	4413      	add	r3, r2
    1f48:	440b      	add	r3, r1
    1f4a:	3301      	adds	r3, #1
    1f4c:	781b      	ldrb	r3, [r3, #0]
    1f4e:	461a      	mov	r2, r3
    1f50:	4b1c      	ldr	r3, [pc, #112]	; (1fc4 <Clock_Ip_DistributePll+0x17c>)
    1f52:	5c9b      	ldrb	r3, [r3, r2]
    1f54:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    1f56:	4a1c      	ldr	r2, [pc, #112]	; (1fc8 <Clock_Ip_DistributePll+0x180>)
    1f58:	9b00      	ldr	r3, [sp, #0]
    1f5a:	011b      	lsls	r3, r3, #4
    1f5c:	4413      	add	r3, r2
    1f5e:	330c      	adds	r3, #12
    1f60:	6819      	ldr	r1, [r3, #0]
    1f62:	4b10      	ldr	r3, [pc, #64]	; (1fa4 <Clock_Ip_DistributePll+0x15c>)
    1f64:	6818      	ldr	r0, [r3, #0]
    1f66:	9a01      	ldr	r2, [sp, #4]
    1f68:	4613      	mov	r3, r2
    1f6a:	009b      	lsls	r3, r3, #2
    1f6c:	4413      	add	r3, r2
    1f6e:	009b      	lsls	r3, r3, #2
    1f70:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1f74:	4403      	add	r3, r0
    1f76:	4618      	mov	r0, r3
    1f78:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1f7a:	9b01      	ldr	r3, [sp, #4]
    1f7c:	3301      	adds	r3, #1
    1f7e:	9301      	str	r3, [sp, #4]
    1f80:	4b08      	ldr	r3, [pc, #32]	; (1fa4 <Clock_Ip_DistributePll+0x15c>)
    1f82:	681b      	ldr	r3, [r3, #0]
    1f84:	7c9b      	ldrb	r3, [r3, #18]
    1f86:	461a      	mov	r2, r3
    1f88:	9b01      	ldr	r3, [sp, #4]
    1f8a:	4293      	cmp	r3, r2
    1f8c:	d3cd      	bcc.n	1f2a <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1f8e:	4b05      	ldr	r3, [pc, #20]	; (1fa4 <Clock_Ip_DistributePll+0x15c>)
    1f90:	681b      	ldr	r3, [r3, #0]
    1f92:	2104      	movs	r1, #4
    1f94:	4618      	mov	r0, r3
    1f96:	f002 fe0b 	bl	4bb0 <Clock_Ip_Command>
        }
    }
}
    1f9a:	bf00      	nop
    1f9c:	b003      	add	sp, #12
    1f9e:	f85d fb04 	ldr.w	pc, [sp], #4
    1fa2:	bf00      	nop
    1fa4:	1fff8b64 	.word	0x1fff8b64
    1fa8:	0000bc44 	.word	0x0000bc44
    1fac:	0000b7f8 	.word	0x0000b7f8
    1fb0:	0000b7c8 	.word	0x0000b7c8
    1fb4:	0000be30 	.word	0x0000be30
    1fb8:	1fff8b6c 	.word	0x1fff8b6c
    1fbc:	0000b798 	.word	0x0000b798
    1fc0:	0000bd80 	.word	0x0000bd80
    1fc4:	0000b7e8 	.word	0x0000b7e8
    1fc8:	0000bdf4 	.word	0x0000bdf4

00001fcc <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    1fcc:	b500      	push	{lr}
    1fce:	b085      	sub	sp, #20
    1fd0:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1fd2:	490c      	ldr	r1, [pc, #48]	; (2004 <Clock_Ip_DisableClockMonitor+0x38>)
    1fd4:	9a01      	ldr	r2, [sp, #4]
    1fd6:	4613      	mov	r3, r2
    1fd8:	00db      	lsls	r3, r3, #3
    1fda:	4413      	add	r3, r2
    1fdc:	440b      	add	r3, r1
    1fde:	3301      	adds	r3, #1
    1fe0:	781b      	ldrb	r3, [r3, #0]
    1fe2:	461a      	mov	r2, r3
    1fe4:	4b08      	ldr	r3, [pc, #32]	; (2008 <Clock_Ip_DisableClockMonitor+0x3c>)
    1fe6:	5c9b      	ldrb	r3, [r3, r2]
    1fe8:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    1fea:	4a08      	ldr	r2, [pc, #32]	; (200c <Clock_Ip_DisableClockMonitor+0x40>)
    1fec:	9b03      	ldr	r3, [sp, #12]
    1fee:	011b      	lsls	r3, r3, #4
    1ff0:	4413      	add	r3, r2
    1ff2:	3308      	adds	r3, #8
    1ff4:	681b      	ldr	r3, [r3, #0]
    1ff6:	9801      	ldr	r0, [sp, #4]
    1ff8:	4798      	blx	r3
}
    1ffa:	bf00      	nop
    1ffc:	b005      	add	sp, #20
    1ffe:	f85d fb04 	ldr.w	pc, [sp], #4
    2002:	bf00      	nop
    2004:	0000b7f8 	.word	0x0000b7f8
    2008:	0000b7e8 	.word	0x0000b7e8
    200c:	0000bdf4 	.word	0x0000bdf4

00002010 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2010:	b082      	sub	sp, #8
    2012:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2014:	4a02      	ldr	r2, [pc, #8]	; (2020 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2016:	9b01      	ldr	r3, [sp, #4]
    2018:	6013      	str	r3, [r2, #0]
}
    201a:	bf00      	nop
    201c:	b002      	add	sp, #8
    201e:	4770      	bx	lr
    2020:	1fff8b14 	.word	0x1fff8b14

00002024 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2024:	b500      	push	{lr}
    2026:	b085      	sub	sp, #20
    2028:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    202a:	490c      	ldr	r1, [pc, #48]	; (205c <Clock_Ip_DisableModuleClock+0x38>)
    202c:	9a01      	ldr	r2, [sp, #4]
    202e:	4613      	mov	r3, r2
    2030:	00db      	lsls	r3, r3, #3
    2032:	4413      	add	r3, r2
    2034:	440b      	add	r3, r1
    2036:	3301      	adds	r3, #1
    2038:	781b      	ldrb	r3, [r3, #0]
    203a:	461a      	mov	r2, r3
    203c:	4b08      	ldr	r3, [pc, #32]	; (2060 <Clock_Ip_DisableModuleClock+0x3c>)
    203e:	5c9b      	ldrb	r3, [r3, r2]
    2040:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2042:	4a08      	ldr	r2, [pc, #32]	; (2064 <Clock_Ip_DisableModuleClock+0x40>)
    2044:	9b03      	ldr	r3, [sp, #12]
    2046:	00db      	lsls	r3, r3, #3
    2048:	4413      	add	r3, r2
    204a:	685b      	ldr	r3, [r3, #4]
    204c:	2101      	movs	r1, #1
    204e:	9801      	ldr	r0, [sp, #4]
    2050:	4798      	blx	r3
}
    2052:	bf00      	nop
    2054:	b005      	add	sp, #20
    2056:	f85d fb04 	ldr.w	pc, [sp], #4
    205a:	bf00      	nop
    205c:	0000b7f8 	.word	0x0000b7f8
    2060:	0000b798 	.word	0x0000b798
    2064:	0000bd80 	.word	0x0000bd80

00002068 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2068:	b500      	push	{lr}
    206a:	b085      	sub	sp, #20
    206c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    206e:	490c      	ldr	r1, [pc, #48]	; (20a0 <Clock_Ip_EnableModuleClock+0x38>)
    2070:	9a01      	ldr	r2, [sp, #4]
    2072:	4613      	mov	r3, r2
    2074:	00db      	lsls	r3, r3, #3
    2076:	4413      	add	r3, r2
    2078:	440b      	add	r3, r1
    207a:	3301      	adds	r3, #1
    207c:	781b      	ldrb	r3, [r3, #0]
    207e:	461a      	mov	r2, r3
    2080:	4b08      	ldr	r3, [pc, #32]	; (20a4 <Clock_Ip_EnableModuleClock+0x3c>)
    2082:	5c9b      	ldrb	r3, [r3, r2]
    2084:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2086:	4a08      	ldr	r2, [pc, #32]	; (20a8 <Clock_Ip_EnableModuleClock+0x40>)
    2088:	9b03      	ldr	r3, [sp, #12]
    208a:	00db      	lsls	r3, r3, #3
    208c:	4413      	add	r3, r2
    208e:	685b      	ldr	r3, [r3, #4]
    2090:	2100      	movs	r1, #0
    2092:	9801      	ldr	r0, [sp, #4]
    2094:	4798      	blx	r3
}
    2096:	bf00      	nop
    2098:	b005      	add	sp, #20
    209a:	f85d fb04 	ldr.w	pc, [sp], #4
    209e:	bf00      	nop
    20a0:	0000b7f8 	.word	0x0000b7f8
    20a4:	0000b798 	.word	0x0000b798
    20a8:	0000bd80 	.word	0x0000bd80

000020ac <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    20ac:	b500      	push	{lr}
    20ae:	b083      	sub	sp, #12
    20b0:	9001      	str	r0, [sp, #4]
    20b2:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    20b4:	4b08      	ldr	r3, [pc, #32]	; (20d8 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    20b6:	2200      	movs	r2, #0
    20b8:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    20ba:	4b08      	ldr	r3, [pc, #32]	; (20dc <Clock_Ip_PowerModeChangeNotification+0x30>)
    20bc:	681b      	ldr	r3, [r3, #0]
    20be:	2102      	movs	r1, #2
    20c0:	4618      	mov	r0, r3
    20c2:	f002 fd75 	bl	4bb0 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    20c6:	9900      	ldr	r1, [sp, #0]
    20c8:	9801      	ldr	r0, [sp, #4]
    20ca:	f002 fc51 	bl	4970 <Clock_Ip_ClockPowerModeChangeNotification>
}
    20ce:	bf00      	nop
    20d0:	b003      	add	sp, #12
    20d2:	f85d fb04 	ldr.w	pc, [sp], #4
    20d6:	bf00      	nop
    20d8:	1fff8b10 	.word	0x1fff8b10
    20dc:	1fff8b64 	.word	0x1fff8b64

000020e0 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    20e0:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    20e2:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    20e6:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    20e8:	4b06      	ldr	r3, [pc, #24]	; (2104 <Clock_Ip_SetWaitStates+0x24>)
    20ea:	785b      	ldrb	r3, [r3, #1]
    20ec:	2b00      	cmp	r3, #0
    20ee:	d005      	beq.n	20fc <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    20f0:	9b01      	ldr	r3, [sp, #4]
    20f2:	3b01      	subs	r3, #1
    20f4:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    20f6:	9b01      	ldr	r3, [sp, #4]
    20f8:	2b00      	cmp	r3, #0
    20fa:	d1f9      	bne.n	20f0 <Clock_Ip_SetWaitStates+0x10>
    }
}
    20fc:	bf00      	nop
    20fe:	b002      	add	sp, #8
    2100:	4770      	bx	lr
    2102:	bf00      	nop
    2104:	1fff8b6c 	.word	0x1fff8b6c

00002108 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2108:	b500      	push	{lr}
    210a:	b083      	sub	sp, #12
    210c:	9001      	str	r0, [sp, #4]
    210e:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2110:	4b04      	ldr	r3, [pc, #16]	; (2124 <Clock_Ip_ReportClockErrors+0x1c>)
    2112:	681b      	ldr	r3, [r3, #0]
    2114:	9900      	ldr	r1, [sp, #0]
    2116:	9801      	ldr	r0, [sp, #4]
    2118:	4798      	blx	r3
}
    211a:	bf00      	nop
    211c:	b003      	add	sp, #12
    211e:	f85d fb04 	ldr.w	pc, [sp], #4
    2122:	bf00      	nop
    2124:	1fff8b14 	.word	0x1fff8b14

00002128 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2128:	b500      	push	{lr}
    212a:	b085      	sub	sp, #20
    212c:	9003      	str	r0, [sp, #12]
    212e:	9102      	str	r1, [sp, #8]
    2130:	9201      	str	r2, [sp, #4]
    2132:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2134:	2000      	movs	r0, #0
    2136:	f7fe ffd1 	bl	10dc <OsIf_GetCounter>
    213a:	4602      	mov	r2, r0
    213c:	9b03      	ldr	r3, [sp, #12]
    213e:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2140:	9b02      	ldr	r3, [sp, #8]
    2142:	2200      	movs	r2, #0
    2144:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2146:	2100      	movs	r1, #0
    2148:	9800      	ldr	r0, [sp, #0]
    214a:	f7ff f813 	bl	1174 <OsIf_MicrosToTicks>
    214e:	4602      	mov	r2, r0
    2150:	9b01      	ldr	r3, [sp, #4]
    2152:	601a      	str	r2, [r3, #0]
}
    2154:	bf00      	nop
    2156:	b005      	add	sp, #20
    2158:	f85d fb04 	ldr.w	pc, [sp], #4

0000215c <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    215c:	b500      	push	{lr}
    215e:	b087      	sub	sp, #28
    2160:	9003      	str	r0, [sp, #12]
    2162:	9102      	str	r1, [sp, #8]
    2164:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2166:	2300      	movs	r3, #0
    2168:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    216c:	2100      	movs	r1, #0
    216e:	9803      	ldr	r0, [sp, #12]
    2170:	f7fe ffcd 	bl	110e <OsIf_GetElapsed>
    2174:	4602      	mov	r2, r0
    2176:	9b02      	ldr	r3, [sp, #8]
    2178:	681b      	ldr	r3, [r3, #0]
    217a:	441a      	add	r2, r3
    217c:	9b02      	ldr	r3, [sp, #8]
    217e:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2180:	9b02      	ldr	r3, [sp, #8]
    2182:	681b      	ldr	r3, [r3, #0]
    2184:	9a01      	ldr	r2, [sp, #4]
    2186:	429a      	cmp	r2, r3
    2188:	d802      	bhi.n	2190 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    218a:	2301      	movs	r3, #1
    218c:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2190:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2194:	4618      	mov	r0, r3
    2196:	b007      	add	sp, #28
    2198:	f85d fb04 	ldr.w	pc, [sp], #4

0000219c <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    219c:	b082      	sub	sp, #8
    219e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    21a0:	bf00      	nop
    21a2:	b002      	add	sp, #8
    21a4:	4770      	bx	lr

000021a6 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    21a6:	b500      	push	{lr}
    21a8:	b083      	sub	sp, #12
    21aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21ac:	9b01      	ldr	r3, [sp, #4]
    21ae:	2b00      	cmp	r3, #0
    21b0:	d002      	beq.n	21b8 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    21b2:	9801      	ldr	r0, [sp, #4]
    21b4:	f000 f8ad 	bl	2312 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    21b8:	bf00      	nop
    21ba:	b003      	add	sp, #12
    21bc:	f85d fb04 	ldr.w	pc, [sp], #4

000021c0 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    21c0:	b500      	push	{lr}
    21c2:	b083      	sub	sp, #12
    21c4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21c6:	9b01      	ldr	r3, [sp, #4]
    21c8:	2b00      	cmp	r3, #0
    21ca:	d002      	beq.n	21d2 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    21cc:	9801      	ldr	r0, [sp, #4]
    21ce:	f000 f8cd 	bl	236c <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    21d2:	bf00      	nop
    21d4:	b003      	add	sp, #12
    21d6:	f85d fb04 	ldr.w	pc, [sp], #4

000021da <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    21da:	b500      	push	{lr}
    21dc:	b083      	sub	sp, #12
    21de:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21e0:	9b01      	ldr	r3, [sp, #4]
    21e2:	2b00      	cmp	r3, #0
    21e4:	d002      	beq.n	21ec <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    21e6:	9801      	ldr	r0, [sp, #4]
    21e8:	f000 f8ee 	bl	23c8 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    21ec:	bf00      	nop
    21ee:	b003      	add	sp, #12
    21f0:	f85d fb04 	ldr.w	pc, [sp], #4

000021f4 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    21f4:	b500      	push	{lr}
    21f6:	b083      	sub	sp, #12
    21f8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21fa:	9b01      	ldr	r3, [sp, #4]
    21fc:	2b00      	cmp	r3, #0
    21fe:	d002      	beq.n	2206 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2200:	9801      	ldr	r0, [sp, #4]
    2202:	f000 f8f9 	bl	23f8 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2206:	bf00      	nop
    2208:	b003      	add	sp, #12
    220a:	f85d fb04 	ldr.w	pc, [sp], #4

0000220e <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    220e:	b500      	push	{lr}
    2210:	b083      	sub	sp, #12
    2212:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2214:	9b01      	ldr	r3, [sp, #4]
    2216:	2b00      	cmp	r3, #0
    2218:	d002      	beq.n	2220 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    221a:	9801      	ldr	r0, [sp, #4]
    221c:	f000 f904 	bl	2428 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2220:	bf00      	nop
    2222:	b003      	add	sp, #12
    2224:	f85d fb04 	ldr.w	pc, [sp], #4

00002228 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2228:	b500      	push	{lr}
    222a:	b083      	sub	sp, #12
    222c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    222e:	9b01      	ldr	r3, [sp, #4]
    2230:	2b00      	cmp	r3, #0
    2232:	d002      	beq.n	223a <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2234:	9801      	ldr	r0, [sp, #4]
    2236:	f000 f90f 	bl	2458 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    223a:	bf00      	nop
    223c:	b003      	add	sp, #12
    223e:	f85d fb04 	ldr.w	pc, [sp], #4

00002242 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2242:	b500      	push	{lr}
    2244:	b083      	sub	sp, #12
    2246:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2248:	9b01      	ldr	r3, [sp, #4]
    224a:	2b00      	cmp	r3, #0
    224c:	d002      	beq.n	2254 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    224e:	9801      	ldr	r0, [sp, #4]
    2250:	f000 f91a 	bl	2488 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2254:	bf00      	nop
    2256:	b003      	add	sp, #12
    2258:	f85d fb04 	ldr.w	pc, [sp], #4

0000225c <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    225c:	b500      	push	{lr}
    225e:	b083      	sub	sp, #12
    2260:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2262:	9b01      	ldr	r3, [sp, #4]
    2264:	2b00      	cmp	r3, #0
    2266:	d002      	beq.n	226e <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2268:	9801      	ldr	r0, [sp, #4]
    226a:	f000 f925 	bl	24b8 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    226e:	bf00      	nop
    2270:	b003      	add	sp, #12
    2272:	f85d fb04 	ldr.w	pc, [sp], #4

00002276 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2276:	b500      	push	{lr}
    2278:	b083      	sub	sp, #12
    227a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    227c:	9b01      	ldr	r3, [sp, #4]
    227e:	2b00      	cmp	r3, #0
    2280:	d002      	beq.n	2288 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2282:	9801      	ldr	r0, [sp, #4]
    2284:	f000 f930 	bl	24e8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2288:	bf00      	nop
    228a:	b003      	add	sp, #12
    228c:	f85d fb04 	ldr.w	pc, [sp], #4

00002290 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2290:	b500      	push	{lr}
    2292:	b083      	sub	sp, #12
    2294:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2296:	9b01      	ldr	r3, [sp, #4]
    2298:	2b00      	cmp	r3, #0
    229a:	d002      	beq.n	22a2 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    229c:	9801      	ldr	r0, [sp, #4]
    229e:	f000 f93b 	bl	2518 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22a2:	bf00      	nop
    22a4:	b003      	add	sp, #12
    22a6:	f85d fb04 	ldr.w	pc, [sp], #4

000022aa <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    22aa:	b500      	push	{lr}
    22ac:	b083      	sub	sp, #12
    22ae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22b0:	9b01      	ldr	r3, [sp, #4]
    22b2:	2b00      	cmp	r3, #0
    22b4:	d002      	beq.n	22bc <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    22b6:	9801      	ldr	r0, [sp, #4]
    22b8:	f000 f946 	bl	2548 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22bc:	bf00      	nop
    22be:	b003      	add	sp, #12
    22c0:	f85d fb04 	ldr.w	pc, [sp], #4

000022c4 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    22c4:	b500      	push	{lr}
    22c6:	b083      	sub	sp, #12
    22c8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22ca:	9b01      	ldr	r3, [sp, #4]
    22cc:	2b00      	cmp	r3, #0
    22ce:	d002      	beq.n	22d6 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    22d0:	9801      	ldr	r0, [sp, #4]
    22d2:	f000 f951 	bl	2578 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22d6:	bf00      	nop
    22d8:	b003      	add	sp, #12
    22da:	f85d fb04 	ldr.w	pc, [sp], #4

000022de <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    22de:	b500      	push	{lr}
    22e0:	b083      	sub	sp, #12
    22e2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22e4:	9b01      	ldr	r3, [sp, #4]
    22e6:	2b00      	cmp	r3, #0
    22e8:	d002      	beq.n	22f0 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    22ea:	9801      	ldr	r0, [sp, #4]
    22ec:	f000 f95e 	bl	25ac <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22f0:	bf00      	nop
    22f2:	b003      	add	sp, #12
    22f4:	f85d fb04 	ldr.w	pc, [sp], #4

000022f8 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    22f8:	b500      	push	{lr}
    22fa:	b083      	sub	sp, #12
    22fc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22fe:	9b01      	ldr	r3, [sp, #4]
    2300:	2b00      	cmp	r3, #0
    2302:	d002      	beq.n	230a <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2304:	9801      	ldr	r0, [sp, #4]
    2306:	f000 f98b 	bl	2620 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    230a:	bf00      	nop
    230c:	b003      	add	sp, #12
    230e:	f85d fb04 	ldr.w	pc, [sp], #4

00002312 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2312:	b086      	sub	sp, #24
    2314:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2316:	9b01      	ldr	r3, [sp, #4]
    2318:	681a      	ldr	r2, [r3, #0]
    231a:	4911      	ldr	r1, [pc, #68]	; (2360 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    231c:	4613      	mov	r3, r2
    231e:	00db      	lsls	r3, r3, #3
    2320:	4413      	add	r3, r2
    2322:	440b      	add	r3, r1
    2324:	781b      	ldrb	r3, [r3, #0]
    2326:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2328:	9b01      	ldr	r3, [sp, #4]
    232a:	685b      	ldr	r3, [r3, #4]
    232c:	4a0d      	ldr	r2, [pc, #52]	; (2364 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    232e:	5cd3      	ldrb	r3, [r2, r3]
    2330:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2332:	4a0d      	ldr	r2, [pc, #52]	; (2368 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2334:	9b05      	ldr	r3, [sp, #20]
    2336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    233a:	681b      	ldr	r3, [r3, #0]
    233c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    233e:	9b03      	ldr	r3, [sp, #12]
    2340:	f023 0307 	bic.w	r3, r3, #7
    2344:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2346:	9a03      	ldr	r2, [sp, #12]
    2348:	9b04      	ldr	r3, [sp, #16]
    234a:	4313      	orrs	r3, r2
    234c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    234e:	4a06      	ldr	r2, [pc, #24]	; (2368 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2350:	9b05      	ldr	r3, [sp, #20]
    2352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2356:	9a03      	ldr	r2, [sp, #12]
    2358:	601a      	str	r2, [r3, #0]
}
    235a:	bf00      	nop
    235c:	b006      	add	sp, #24
    235e:	4770      	bx	lr
    2360:	0000b7f8 	.word	0x0000b7f8
    2364:	0000bbf0 	.word	0x0000bbf0
    2368:	0000bc34 	.word	0x0000bc34

0000236c <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    236c:	b086      	sub	sp, #24
    236e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2370:	9b01      	ldr	r3, [sp, #4]
    2372:	681a      	ldr	r2, [r3, #0]
    2374:	4911      	ldr	r1, [pc, #68]	; (23bc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2376:	4613      	mov	r3, r2
    2378:	00db      	lsls	r3, r3, #3
    237a:	4413      	add	r3, r2
    237c:	440b      	add	r3, r1
    237e:	781b      	ldrb	r3, [r3, #0]
    2380:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2382:	9b01      	ldr	r3, [sp, #4]
    2384:	685b      	ldr	r3, [r3, #4]
    2386:	4a0e      	ldr	r2, [pc, #56]	; (23c0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2388:	5cd3      	ldrb	r3, [r2, r3]
    238a:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    238c:	4a0d      	ldr	r2, [pc, #52]	; (23c4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    238e:	9b05      	ldr	r3, [sp, #20]
    2390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2394:	681b      	ldr	r3, [r3, #0]
    2396:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2398:	9b03      	ldr	r3, [sp, #12]
    239a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    239e:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    23a0:	9b04      	ldr	r3, [sp, #16]
    23a2:	021b      	lsls	r3, r3, #8
    23a4:	9a03      	ldr	r2, [sp, #12]
    23a6:	4313      	orrs	r3, r2
    23a8:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    23aa:	4a06      	ldr	r2, [pc, #24]	; (23c4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    23ac:	9b05      	ldr	r3, [sp, #20]
    23ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    23b2:	9a03      	ldr	r2, [sp, #12]
    23b4:	601a      	str	r2, [r3, #0]
}
    23b6:	bf00      	nop
    23b8:	b006      	add	sp, #24
    23ba:	4770      	bx	lr
    23bc:	0000b7f8 	.word	0x0000b7f8
    23c0:	0000bbf0 	.word	0x0000bbf0
    23c4:	0000bc34 	.word	0x0000bc34

000023c8 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    23c8:	b084      	sub	sp, #16
    23ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    23cc:	4b09      	ldr	r3, [pc, #36]	; (23f4 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    23ce:	695b      	ldr	r3, [r3, #20]
    23d0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    23d2:	9b03      	ldr	r3, [sp, #12]
    23d4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    23d8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    23da:	9b01      	ldr	r3, [sp, #4]
    23dc:	685b      	ldr	r3, [r3, #4]
    23de:	3b01      	subs	r3, #1
    23e0:	041b      	lsls	r3, r3, #16
    23e2:	9a03      	ldr	r2, [sp, #12]
    23e4:	4313      	orrs	r3, r2
    23e6:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    23e8:	4a02      	ldr	r2, [pc, #8]	; (23f4 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    23ea:	9b03      	ldr	r3, [sp, #12]
    23ec:	6153      	str	r3, [r2, #20]
}
    23ee:	bf00      	nop
    23f0:	b004      	add	sp, #16
    23f2:	4770      	bx	lr
    23f4:	40064000 	.word	0x40064000

000023f8 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    23f8:	b084      	sub	sp, #16
    23fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    23fc:	4b09      	ldr	r3, [pc, #36]	; (2424 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    23fe:	695b      	ldr	r3, [r3, #20]
    2400:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2402:	9b03      	ldr	r3, [sp, #12]
    2404:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2408:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    240a:	9b01      	ldr	r3, [sp, #4]
    240c:	685b      	ldr	r3, [r3, #4]
    240e:	3b01      	subs	r3, #1
    2410:	011b      	lsls	r3, r3, #4
    2412:	9a03      	ldr	r2, [sp, #12]
    2414:	4313      	orrs	r3, r2
    2416:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2418:	4a02      	ldr	r2, [pc, #8]	; (2424 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    241a:	9b03      	ldr	r3, [sp, #12]
    241c:	6153      	str	r3, [r2, #20]
}
    241e:	bf00      	nop
    2420:	b004      	add	sp, #16
    2422:	4770      	bx	lr
    2424:	40064000 	.word	0x40064000

00002428 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2428:	b084      	sub	sp, #16
    242a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    242c:	4b09      	ldr	r3, [pc, #36]	; (2454 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    242e:	695b      	ldr	r3, [r3, #20]
    2430:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2432:	9b03      	ldr	r3, [sp, #12]
    2434:	f023 030f 	bic.w	r3, r3, #15
    2438:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    243a:	9b01      	ldr	r3, [sp, #4]
    243c:	685b      	ldr	r3, [r3, #4]
    243e:	3b01      	subs	r3, #1
    2440:	9a03      	ldr	r2, [sp, #12]
    2442:	4313      	orrs	r3, r2
    2444:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2446:	4a03      	ldr	r2, [pc, #12]	; (2454 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2448:	9b03      	ldr	r3, [sp, #12]
    244a:	6153      	str	r3, [r2, #20]
}
    244c:	bf00      	nop
    244e:	b004      	add	sp, #16
    2450:	4770      	bx	lr
    2452:	bf00      	nop
    2454:	40064000 	.word	0x40064000

00002458 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2458:	b084      	sub	sp, #16
    245a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    245c:	4b09      	ldr	r3, [pc, #36]	; (2484 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    245e:	699b      	ldr	r3, [r3, #24]
    2460:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2462:	9b03      	ldr	r3, [sp, #12]
    2464:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2468:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    246a:	9b01      	ldr	r3, [sp, #4]
    246c:	685b      	ldr	r3, [r3, #4]
    246e:	3b01      	subs	r3, #1
    2470:	041b      	lsls	r3, r3, #16
    2472:	9a03      	ldr	r2, [sp, #12]
    2474:	4313      	orrs	r3, r2
    2476:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2478:	4a02      	ldr	r2, [pc, #8]	; (2484 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    247a:	9b03      	ldr	r3, [sp, #12]
    247c:	6193      	str	r3, [r2, #24]
}
    247e:	bf00      	nop
    2480:	b004      	add	sp, #16
    2482:	4770      	bx	lr
    2484:	40064000 	.word	0x40064000

00002488 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2488:	b084      	sub	sp, #16
    248a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    248c:	4b09      	ldr	r3, [pc, #36]	; (24b4 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    248e:	699b      	ldr	r3, [r3, #24]
    2490:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2492:	9b03      	ldr	r3, [sp, #12]
    2494:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2498:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    249a:	9b01      	ldr	r3, [sp, #4]
    249c:	685b      	ldr	r3, [r3, #4]
    249e:	3b01      	subs	r3, #1
    24a0:	011b      	lsls	r3, r3, #4
    24a2:	9a03      	ldr	r2, [sp, #12]
    24a4:	4313      	orrs	r3, r2
    24a6:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    24a8:	4a02      	ldr	r2, [pc, #8]	; (24b4 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    24aa:	9b03      	ldr	r3, [sp, #12]
    24ac:	6193      	str	r3, [r2, #24]
}
    24ae:	bf00      	nop
    24b0:	b004      	add	sp, #16
    24b2:	4770      	bx	lr
    24b4:	40064000 	.word	0x40064000

000024b8 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24b8:	b084      	sub	sp, #16
    24ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    24bc:	4b09      	ldr	r3, [pc, #36]	; (24e4 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    24be:	699b      	ldr	r3, [r3, #24]
    24c0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    24c2:	9b03      	ldr	r3, [sp, #12]
    24c4:	f023 030f 	bic.w	r3, r3, #15
    24c8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    24ca:	9b01      	ldr	r3, [sp, #4]
    24cc:	685b      	ldr	r3, [r3, #4]
    24ce:	3b01      	subs	r3, #1
    24d0:	9a03      	ldr	r2, [sp, #12]
    24d2:	4313      	orrs	r3, r2
    24d4:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    24d6:	4a03      	ldr	r2, [pc, #12]	; (24e4 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    24d8:	9b03      	ldr	r3, [sp, #12]
    24da:	6193      	str	r3, [r2, #24]
}
    24dc:	bf00      	nop
    24de:	b004      	add	sp, #16
    24e0:	4770      	bx	lr
    24e2:	bf00      	nop
    24e4:	40064000 	.word	0x40064000

000024e8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24e8:	b084      	sub	sp, #16
    24ea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    24ec:	4b09      	ldr	r3, [pc, #36]	; (2514 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    24ee:	69db      	ldr	r3, [r3, #28]
    24f0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    24f2:	9b03      	ldr	r3, [sp, #12]
    24f4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    24f8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    24fa:	9b01      	ldr	r3, [sp, #4]
    24fc:	685b      	ldr	r3, [r3, #4]
    24fe:	3b01      	subs	r3, #1
    2500:	041b      	lsls	r3, r3, #16
    2502:	9a03      	ldr	r2, [sp, #12]
    2504:	4313      	orrs	r3, r2
    2506:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2508:	4a02      	ldr	r2, [pc, #8]	; (2514 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    250a:	9b03      	ldr	r3, [sp, #12]
    250c:	61d3      	str	r3, [r2, #28]
}
    250e:	bf00      	nop
    2510:	b004      	add	sp, #16
    2512:	4770      	bx	lr
    2514:	40064000 	.word	0x40064000

00002518 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2518:	b084      	sub	sp, #16
    251a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    251c:	4b09      	ldr	r3, [pc, #36]	; (2544 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    251e:	69db      	ldr	r3, [r3, #28]
    2520:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2522:	9b03      	ldr	r3, [sp, #12]
    2524:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2528:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    252a:	9b01      	ldr	r3, [sp, #4]
    252c:	685b      	ldr	r3, [r3, #4]
    252e:	3b01      	subs	r3, #1
    2530:	011b      	lsls	r3, r3, #4
    2532:	9a03      	ldr	r2, [sp, #12]
    2534:	4313      	orrs	r3, r2
    2536:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2538:	4a02      	ldr	r2, [pc, #8]	; (2544 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    253a:	9b03      	ldr	r3, [sp, #12]
    253c:	61d3      	str	r3, [r2, #28]
}
    253e:	bf00      	nop
    2540:	b004      	add	sp, #16
    2542:	4770      	bx	lr
    2544:	40064000 	.word	0x40064000

00002548 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2548:	b084      	sub	sp, #16
    254a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    254c:	4b09      	ldr	r3, [pc, #36]	; (2574 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    254e:	69db      	ldr	r3, [r3, #28]
    2550:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    2552:	9b03      	ldr	r3, [sp, #12]
    2554:	f023 030f 	bic.w	r3, r3, #15
    2558:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    255a:	9b01      	ldr	r3, [sp, #4]
    255c:	685b      	ldr	r3, [r3, #4]
    255e:	3b01      	subs	r3, #1
    2560:	9a03      	ldr	r2, [sp, #12]
    2562:	4313      	orrs	r3, r2
    2564:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2566:	4a03      	ldr	r2, [pc, #12]	; (2574 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2568:	9b03      	ldr	r3, [sp, #12]
    256a:	61d3      	str	r3, [r2, #28]
}
    256c:	bf00      	nop
    256e:	b004      	add	sp, #16
    2570:	4770      	bx	lr
    2572:	bf00      	nop
    2574:	40064000 	.word	0x40064000

00002578 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    2578:	b084      	sub	sp, #16
    257a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    257c:	4b0a      	ldr	r3, [pc, #40]	; (25a8 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    257e:	685b      	ldr	r3, [r3, #4]
    2580:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    2582:	9b03      	ldr	r3, [sp, #12]
    2584:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2588:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    258a:	9b01      	ldr	r3, [sp, #4]
    258c:	685b      	ldr	r3, [r3, #4]
    258e:	3b01      	subs	r3, #1
    2590:	021b      	lsls	r3, r3, #8
    2592:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2596:	9a03      	ldr	r2, [sp, #12]
    2598:	4313      	orrs	r3, r2
    259a:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    259c:	4a02      	ldr	r2, [pc, #8]	; (25a8 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    259e:	9b03      	ldr	r3, [sp, #12]
    25a0:	6053      	str	r3, [r2, #4]
}
    25a2:	bf00      	nop
    25a4:	b004      	add	sp, #16
    25a6:	4770      	bx	lr
    25a8:	40048000 	.word	0x40048000

000025ac <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    25ac:	b084      	sub	sp, #16
    25ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    25b0:	4919      	ldr	r1, [pc, #100]	; (2618 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    25b2:	9b01      	ldr	r3, [sp, #4]
    25b4:	681a      	ldr	r2, [r3, #0]
    25b6:	4819      	ldr	r0, [pc, #100]	; (261c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    25b8:	4613      	mov	r3, r2
    25ba:	00db      	lsls	r3, r3, #3
    25bc:	4413      	add	r3, r2
    25be:	4403      	add	r3, r0
    25c0:	3305      	adds	r3, #5
    25c2:	781b      	ldrb	r3, [r3, #0]
    25c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    25c8:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    25ca:	9b03      	ldr	r3, [sp, #12]
    25cc:	f023 030f 	bic.w	r3, r3, #15
    25d0:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    25d2:	9b01      	ldr	r3, [sp, #4]
    25d4:	685b      	ldr	r3, [r3, #4]
    25d6:	3b01      	subs	r3, #1
    25d8:	f003 0307 	and.w	r3, r3, #7
    25dc:	9a03      	ldr	r2, [sp, #12]
    25de:	4313      	orrs	r3, r2
    25e0:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    25e2:	9b01      	ldr	r3, [sp, #4]
    25e4:	7a1b      	ldrb	r3, [r3, #8]
    25e6:	3b01      	subs	r3, #1
    25e8:	00db      	lsls	r3, r3, #3
    25ea:	f003 0308 	and.w	r3, r3, #8
    25ee:	9a03      	ldr	r2, [sp, #12]
    25f0:	4313      	orrs	r3, r2
    25f2:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    25f4:	4908      	ldr	r1, [pc, #32]	; (2618 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    25f6:	9b01      	ldr	r3, [sp, #4]
    25f8:	681a      	ldr	r2, [r3, #0]
    25fa:	4808      	ldr	r0, [pc, #32]	; (261c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    25fc:	4613      	mov	r3, r2
    25fe:	00db      	lsls	r3, r3, #3
    2600:	4413      	add	r3, r2
    2602:	4403      	add	r3, r0
    2604:	3305      	adds	r3, #5
    2606:	781b      	ldrb	r3, [r3, #0]
    2608:	461a      	mov	r2, r3
    260a:	9b03      	ldr	r3, [sp, #12]
    260c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    2610:	bf00      	nop
    2612:	b004      	add	sp, #16
    2614:	4770      	bx	lr
    2616:	bf00      	nop
    2618:	40065000 	.word	0x40065000
    261c:	0000b7f8 	.word	0x0000b7f8

00002620 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2620:	b084      	sub	sp, #16
    2622:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2624:	4b10      	ldr	r3, [pc, #64]	; (2668 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2628:	4a0f      	ldr	r2, [pc, #60]	; (2668 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    262a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    262e:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    2630:	4b0d      	ldr	r3, [pc, #52]	; (2668 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2634:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    2636:	9b03      	ldr	r3, [sp, #12]
    2638:	f023 030f 	bic.w	r3, r3, #15
    263c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    263e:	9b01      	ldr	r3, [sp, #4]
    2640:	685b      	ldr	r3, [r3, #4]
    2642:	3b01      	subs	r3, #1
    2644:	005b      	lsls	r3, r3, #1
    2646:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    264a:	9b01      	ldr	r3, [sp, #4]
    264c:	7a1b      	ldrb	r3, [r3, #8]
    264e:	3b01      	subs	r3, #1
    2650:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2654:	4313      	orrs	r3, r2
    2656:	9a03      	ldr	r2, [sp, #12]
    2658:	4313      	orrs	r3, r2
    265a:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    265c:	4a02      	ldr	r2, [pc, #8]	; (2668 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    265e:	9b03      	ldr	r3, [sp, #12]
    2660:	6693      	str	r3, [r2, #104]	; 0x68
}
    2662:	bf00      	nop
    2664:	b004      	add	sp, #16
    2666:	4770      	bx	lr
    2668:	40048000 	.word	0x40048000

0000266c <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    266c:	b082      	sub	sp, #8
    266e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2670:	bf00      	nop
    2672:	b002      	add	sp, #8
    2674:	4770      	bx	lr
	...

00002678 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    2678:	b082      	sub	sp, #8
    267a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    267c:	bf00      	nop
    267e:	b002      	add	sp, #8
    2680:	4770      	bx	lr

00002682 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    2682:	b082      	sub	sp, #8
    2684:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    2686:	bf00      	nop
    2688:	b002      	add	sp, #8
    268a:	4770      	bx	lr

0000268c <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    268c:	b500      	push	{lr}
    268e:	b083      	sub	sp, #12
    2690:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2692:	9b01      	ldr	r3, [sp, #4]
    2694:	2b00      	cmp	r3, #0
    2696:	d002      	beq.n	269e <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    2698:	9801      	ldr	r0, [sp, #4]
    269a:	f000 f86a 	bl	2772 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    269e:	bf00      	nop
    26a0:	b003      	add	sp, #12
    26a2:	f85d fb04 	ldr.w	pc, [sp], #4

000026a6 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    26a6:	b500      	push	{lr}
    26a8:	b083      	sub	sp, #12
    26aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26ac:	9b01      	ldr	r3, [sp, #4]
    26ae:	2b00      	cmp	r3, #0
    26b0:	d002      	beq.n	26b8 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    26b2:	9801      	ldr	r0, [sp, #4]
    26b4:	f000 f884 	bl	27c0 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    26b8:	bf00      	nop
    26ba:	b003      	add	sp, #12
    26bc:	f85d fb04 	ldr.w	pc, [sp], #4

000026c0 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    26c0:	b500      	push	{lr}
    26c2:	b089      	sub	sp, #36	; 0x24
    26c4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    26c6:	2300      	movs	r3, #0
    26c8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    26cc:	9b01      	ldr	r3, [sp, #4]
    26ce:	2b00      	cmp	r3, #0
    26d0:	d031      	beq.n	2736 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    26d2:	4b1b      	ldr	r3, [pc, #108]	; (2740 <Clock_Ip_CompleteSOSC+0x80>)
    26d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    26d8:	f003 0301 	and.w	r3, r3, #1
    26dc:	2b00      	cmp	r3, #0
    26de:	d02a      	beq.n	2736 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    26e0:	aa03      	add	r2, sp, #12
    26e2:	a904      	add	r1, sp, #16
    26e4:	a805      	add	r0, sp, #20
    26e6:	f24c 3350 	movw	r3, #50000	; 0xc350
    26ea:	f7ff fd1d 	bl	2128 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    26ee:	4b14      	ldr	r3, [pc, #80]	; (2740 <Clock_Ip_CompleteSOSC+0x80>)
    26f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    26f4:	0e1b      	lsrs	r3, r3, #24
    26f6:	f003 0301 	and.w	r3, r3, #1
    26fa:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    26fc:	9a03      	ldr	r2, [sp, #12]
    26fe:	a904      	add	r1, sp, #16
    2700:	ab05      	add	r3, sp, #20
    2702:	4618      	mov	r0, r3
    2704:	f7ff fd2a 	bl	215c <Clock_Ip_TimeoutExpired>
    2708:	4603      	mov	r3, r0
    270a:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    270e:	9b06      	ldr	r3, [sp, #24]
    2710:	2b00      	cmp	r3, #0
    2712:	d106      	bne.n	2722 <Clock_Ip_CompleteSOSC+0x62>
    2714:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2718:	f083 0301 	eor.w	r3, r3, #1
    271c:	b2db      	uxtb	r3, r3
    271e:	2b00      	cmp	r3, #0
    2720:	d1e5      	bne.n	26ee <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    2722:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2726:	2b00      	cmp	r3, #0
    2728:	d005      	beq.n	2736 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    272a:	9b01      	ldr	r3, [sp, #4]
    272c:	681b      	ldr	r3, [r3, #0]
    272e:	4619      	mov	r1, r3
    2730:	2001      	movs	r0, #1
    2732:	f7ff fce9 	bl	2108 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    2736:	bf00      	nop
    2738:	b009      	add	sp, #36	; 0x24
    273a:	f85d fb04 	ldr.w	pc, [sp], #4
    273e:	bf00      	nop
    2740:	40064000 	.word	0x40064000

00002744 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    2744:	b500      	push	{lr}
    2746:	b083      	sub	sp, #12
    2748:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    274a:	9801      	ldr	r0, [sp, #4]
    274c:	f000 f8c0 	bl	28d0 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2750:	bf00      	nop
    2752:	b003      	add	sp, #12
    2754:	f85d fb04 	ldr.w	pc, [sp], #4

00002758 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2758:	b500      	push	{lr}
    275a:	b083      	sub	sp, #12
    275c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    275e:	9b01      	ldr	r3, [sp, #4]
    2760:	2b00      	cmp	r3, #0
    2762:	d002      	beq.n	276a <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    2764:	9801      	ldr	r0, [sp, #4]
    2766:	f000 f8c3 	bl	28f0 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    276a:	bf00      	nop
    276c:	b003      	add	sp, #12
    276e:	f85d fb04 	ldr.w	pc, [sp], #4

00002772 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2772:	b082      	sub	sp, #8
    2774:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    2776:	4b11      	ldr	r3, [pc, #68]	; (27bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2778:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    277c:	4a0f      	ldr	r2, [pc, #60]	; (27bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    277e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2782:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    2786:	4b0d      	ldr	r3, [pc, #52]	; (27bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2788:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    278c:	4a0b      	ldr	r2, [pc, #44]	; (27bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    278e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2792:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    2796:	4b09      	ldr	r3, [pc, #36]	; (27bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2798:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    279c:	4a07      	ldr	r2, [pc, #28]	; (27bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    279e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    27a2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    27a6:	4b05      	ldr	r3, [pc, #20]	; (27bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27ac:	4a03      	ldr	r2, [pc, #12]	; (27bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27ae:	f023 0301 	bic.w	r3, r3, #1
    27b2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    27b6:	bf00      	nop
    27b8:	b002      	add	sp, #8
    27ba:	4770      	bx	lr
    27bc:	40064000 	.word	0x40064000

000027c0 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    27c0:	b082      	sub	sp, #8
    27c2:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    27c4:	9b01      	ldr	r3, [sp, #4]
    27c6:	891b      	ldrh	r3, [r3, #8]
    27c8:	2b01      	cmp	r3, #1
    27ca:	d174      	bne.n	28b6 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    27cc:	9b01      	ldr	r3, [sp, #4]
    27ce:	7bdb      	ldrb	r3, [r3, #15]
    27d0:	2b00      	cmp	r3, #0
    27d2:	d002      	beq.n	27da <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    27d4:	2b01      	cmp	r3, #1
    27d6:	d009      	beq.n	27ec <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    27d8:	e011      	b.n	27fe <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    27da:	4b39      	ldr	r3, [pc, #228]	; (28c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    27dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    27e0:	4a37      	ldr	r2, [pc, #220]	; (28c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    27e2:	f023 0308 	bic.w	r3, r3, #8
    27e6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    27ea:	e008      	b.n	27fe <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    27ec:	4b34      	ldr	r3, [pc, #208]	; (28c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    27ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    27f2:	4a33      	ldr	r2, [pc, #204]	; (28c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    27f4:	f043 0308 	orr.w	r3, r3, #8
    27f8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    27fc:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    27fe:	4b30      	ldr	r3, [pc, #192]	; (28c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2800:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2804:	4a2e      	ldr	r2, [pc, #184]	; (28c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2806:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    280a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    280e:	9b01      	ldr	r3, [sp, #4]
    2810:	685b      	ldr	r3, [r3, #4]
    2812:	4a2c      	ldr	r2, [pc, #176]	; (28c4 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    2814:	4293      	cmp	r3, r2
    2816:	d90d      	bls.n	2834 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    2818:	9b01      	ldr	r3, [sp, #4]
    281a:	685b      	ldr	r3, [r3, #4]
    281c:	4a2a      	ldr	r2, [pc, #168]	; (28c8 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    281e:	4293      	cmp	r3, r2
    2820:	d208      	bcs.n	2834 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    2822:	4b27      	ldr	r3, [pc, #156]	; (28c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2824:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2828:	4a25      	ldr	r2, [pc, #148]	; (28c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    282a:	f043 0320 	orr.w	r3, r3, #32
    282e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2832:	e007      	b.n	2844 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    2834:	4b22      	ldr	r3, [pc, #136]	; (28c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2836:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    283a:	4a21      	ldr	r2, [pc, #132]	; (28c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    283c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    2840:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    2844:	9b01      	ldr	r3, [sp, #4]
    2846:	7b1b      	ldrb	r3, [r3, #12]
    2848:	2b00      	cmp	r3, #0
    284a:	d108      	bne.n	285e <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    284c:	4b1c      	ldr	r3, [pc, #112]	; (28c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    284e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2852:	4a1b      	ldr	r2, [pc, #108]	; (28c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2854:	f043 0304 	orr.w	r3, r3, #4
    2858:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    285c:	e007      	b.n	286e <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    285e:	4b18      	ldr	r3, [pc, #96]	; (28c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2860:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2864:	4a16      	ldr	r2, [pc, #88]	; (28c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2866:	f023 0304 	bic.w	r3, r3, #4
    286a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    286e:	9b01      	ldr	r3, [sp, #4]
    2870:	7c1b      	ldrb	r3, [r3, #16]
    2872:	2b02      	cmp	r3, #2
    2874:	d011      	beq.n	289a <Clock_Ip_SetSOSC_TrustedCall+0xda>
    2876:	2b02      	cmp	r3, #2
    2878:	dc14      	bgt.n	28a4 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    287a:	2b00      	cmp	r3, #0
    287c:	d002      	beq.n	2884 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    287e:	2b01      	cmp	r3, #1
    2880:	d005      	beq.n	288e <Clock_Ip_SetSOSC_TrustedCall+0xce>
    2882:	e00f      	b.n	28a4 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2884:	4b0e      	ldr	r3, [pc, #56]	; (28c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2886:	2201      	movs	r2, #1
    2888:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    288c:	e014      	b.n	28b8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    288e:	4b0c      	ldr	r3, [pc, #48]	; (28c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2890:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    2894:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2898:	e00e      	b.n	28b8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    289a:	4b09      	ldr	r3, [pc, #36]	; (28c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    289c:	4a0b      	ldr	r2, [pc, #44]	; (28cc <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    289e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    28a2:	e009      	b.n	28b8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    28a4:	4b06      	ldr	r3, [pc, #24]	; (28c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    28aa:	4a05      	ldr	r2, [pc, #20]	; (28c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28ac:	f043 0301 	orr.w	r3, r3, #1
    28b0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    28b4:	e000      	b.n	28b8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    28b6:	bf00      	nop
}
    28b8:	bf00      	nop
    28ba:	b002      	add	sp, #8
    28bc:	4770      	bx	lr
    28be:	bf00      	nop
    28c0:	40064000 	.word	0x40064000
    28c4:	003d08ff 	.word	0x003d08ff
    28c8:	007a1200 	.word	0x007a1200
    28cc:	00030001 	.word	0x00030001

000028d0 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    28d0:	b082      	sub	sp, #8
    28d2:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    28d4:	4b05      	ldr	r3, [pc, #20]	; (28ec <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    28d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    28da:	4a04      	ldr	r2, [pc, #16]	; (28ec <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    28dc:	f023 0301 	bic.w	r3, r3, #1
    28e0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    28e4:	bf00      	nop
    28e6:	b002      	add	sp, #8
    28e8:	4770      	bx	lr
    28ea:	bf00      	nop
    28ec:	40064000 	.word	0x40064000

000028f0 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    28f0:	b082      	sub	sp, #8
    28f2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    28f4:	9b01      	ldr	r3, [sp, #4]
    28f6:	891b      	ldrh	r3, [r3, #8]
    28f8:	2b01      	cmp	r3, #1
    28fa:	d107      	bne.n	290c <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    28fc:	4b05      	ldr	r3, [pc, #20]	; (2914 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    28fe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2902:	4a04      	ldr	r2, [pc, #16]	; (2914 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2904:	f043 0301 	orr.w	r3, r3, #1
    2908:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    290c:	bf00      	nop
    290e:	b002      	add	sp, #8
    2910:	4770      	bx	lr
    2912:	bf00      	nop
    2914:	40064000 	.word	0x40064000

00002918 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    2918:	b082      	sub	sp, #8
    291a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    291c:	bf00      	nop
    291e:	b002      	add	sp, #8
    2920:	4770      	bx	lr

00002922 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    2922:	b082      	sub	sp, #8
    2924:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    2926:	2300      	movs	r3, #0
}
    2928:	4618      	mov	r0, r3
    292a:	b002      	add	sp, #8
    292c:	4770      	bx	lr

0000292e <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    292e:	b082      	sub	sp, #8
    2930:	9001      	str	r0, [sp, #4]
    2932:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    2934:	bf00      	nop
    2936:	b002      	add	sp, #8
    2938:	4770      	bx	lr
	...

0000293c <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    293c:	b082      	sub	sp, #8
    293e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2940:	bf00      	nop
    2942:	b002      	add	sp, #8
    2944:	4770      	bx	lr

00002946 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    2946:	b082      	sub	sp, #8
    2948:	9001      	str	r0, [sp, #4]
    294a:	460b      	mov	r3, r1
    294c:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    2950:	bf00      	nop
    2952:	b002      	add	sp, #8
    2954:	4770      	bx	lr

00002956 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    2956:	b500      	push	{lr}
    2958:	b083      	sub	sp, #12
    295a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    295c:	9b01      	ldr	r3, [sp, #4]
    295e:	2b00      	cmp	r3, #0
    2960:	d002      	beq.n	2968 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    2962:	9801      	ldr	r0, [sp, #4]
    2964:	f000 f8e7 	bl	2b36 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2968:	bf00      	nop
    296a:	b003      	add	sp, #12
    296c:	f85d fb04 	ldr.w	pc, [sp], #4

00002970 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2970:	b500      	push	{lr}
    2972:	b085      	sub	sp, #20
    2974:	9001      	str	r0, [sp, #4]
    2976:	460b      	mov	r3, r1
    2978:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    297c:	9b01      	ldr	r3, [sp, #4]
    297e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2980:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2984:	2b00      	cmp	r3, #0
    2986:	d003      	beq.n	2990 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    2988:	2300      	movs	r3, #0
    298a:	f8ad 300c 	strh.w	r3, [sp, #12]
    298e:	e002      	b.n	2996 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2990:	2301      	movs	r3, #1
    2992:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    2996:	ab02      	add	r3, sp, #8
    2998:	4618      	mov	r0, r3
    299a:	f7ff ffdc 	bl	2956 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    299e:	bf00      	nop
    29a0:	b005      	add	sp, #20
    29a2:	f85d fb04 	ldr.w	pc, [sp], #4

000029a6 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    29a6:	b500      	push	{lr}
    29a8:	b083      	sub	sp, #12
    29aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    29ac:	9b01      	ldr	r3, [sp, #4]
    29ae:	2b00      	cmp	r3, #0
    29b0:	d002      	beq.n	29b8 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    29b2:	9801      	ldr	r0, [sp, #4]
    29b4:	f000 f8d6 	bl	2b64 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    29b8:	bf00      	nop
    29ba:	b003      	add	sp, #12
    29bc:	f85d fb04 	ldr.w	pc, [sp], #4

000029c0 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    29c0:	b500      	push	{lr}
    29c2:	b085      	sub	sp, #20
    29c4:	9001      	str	r0, [sp, #4]
    29c6:	460b      	mov	r3, r1
    29c8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    29cc:	9b01      	ldr	r3, [sp, #4]
    29ce:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    29d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    29d4:	2b00      	cmp	r3, #0
    29d6:	d003      	beq.n	29e0 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    29d8:	2300      	movs	r3, #0
    29da:	f8ad 300c 	strh.w	r3, [sp, #12]
    29de:	e002      	b.n	29e6 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    29e0:	2301      	movs	r3, #1
    29e2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    29e6:	ab02      	add	r3, sp, #8
    29e8:	4618      	mov	r0, r3
    29ea:	f7ff ffdc 	bl	29a6 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    29ee:	bf00      	nop
    29f0:	b005      	add	sp, #20
    29f2:	f85d fb04 	ldr.w	pc, [sp], #4

000029f6 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    29f6:	b500      	push	{lr}
    29f8:	b083      	sub	sp, #12
    29fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    29fc:	9b01      	ldr	r3, [sp, #4]
    29fe:	2b00      	cmp	r3, #0
    2a00:	d002      	beq.n	2a08 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    2a02:	9801      	ldr	r0, [sp, #4]
    2a04:	f000 f8c6 	bl	2b94 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a08:	bf00      	nop
    2a0a:	b003      	add	sp, #12
    2a0c:	f85d fb04 	ldr.w	pc, [sp], #4

00002a10 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a10:	b500      	push	{lr}
    2a12:	b085      	sub	sp, #20
    2a14:	9001      	str	r0, [sp, #4]
    2a16:	460b      	mov	r3, r1
    2a18:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2a1c:	9b01      	ldr	r3, [sp, #4]
    2a1e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2a20:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2a24:	2b00      	cmp	r3, #0
    2a26:	d003      	beq.n	2a30 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    2a28:	2300      	movs	r3, #0
    2a2a:	f8ad 300c 	strh.w	r3, [sp, #12]
    2a2e:	e002      	b.n	2a36 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2a30:	2301      	movs	r3, #1
    2a32:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    2a36:	ab02      	add	r3, sp, #8
    2a38:	4618      	mov	r0, r3
    2a3a:	f7ff ffdc 	bl	29f6 <Clock_Ip_ClockSetSimClkoutEnable>
}
    2a3e:	bf00      	nop
    2a40:	b005      	add	sp, #20
    2a42:	f85d fb04 	ldr.w	pc, [sp], #4

00002a46 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    2a46:	b500      	push	{lr}
    2a48:	b083      	sub	sp, #12
    2a4a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a4c:	9b01      	ldr	r3, [sp, #4]
    2a4e:	2b00      	cmp	r3, #0
    2a50:	d002      	beq.n	2a58 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    2a52:	9801      	ldr	r0, [sp, #4]
    2a54:	f000 f8b6 	bl	2bc4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a58:	bf00      	nop
    2a5a:	b003      	add	sp, #12
    2a5c:	f85d fb04 	ldr.w	pc, [sp], #4

00002a60 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a60:	b500      	push	{lr}
    2a62:	b085      	sub	sp, #20
    2a64:	9001      	str	r0, [sp, #4]
    2a66:	460b      	mov	r3, r1
    2a68:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2a6c:	9b01      	ldr	r3, [sp, #4]
    2a6e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2a70:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2a74:	2b00      	cmp	r3, #0
    2a76:	d003      	beq.n	2a80 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    2a78:	2300      	movs	r3, #0
    2a7a:	f8ad 300c 	strh.w	r3, [sp, #12]
    2a7e:	e002      	b.n	2a86 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2a80:	2301      	movs	r3, #1
    2a82:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    2a86:	ab02      	add	r3, sp, #8
    2a88:	4618      	mov	r0, r3
    2a8a:	f7ff ffdc 	bl	2a46 <Clock_Ip_ClockSetPccCgcEnable>
}
    2a8e:	bf00      	nop
    2a90:	b005      	add	sp, #20
    2a92:	f85d fb04 	ldr.w	pc, [sp], #4

00002a96 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    2a96:	b500      	push	{lr}
    2a98:	b083      	sub	sp, #12
    2a9a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a9c:	9b01      	ldr	r3, [sp, #4]
    2a9e:	2b00      	cmp	r3, #0
    2aa0:	d002      	beq.n	2aa8 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    2aa2:	9801      	ldr	r0, [sp, #4]
    2aa4:	f000 f8bc 	bl	2c20 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2aa8:	bf00      	nop
    2aaa:	b003      	add	sp, #12
    2aac:	f85d fb04 	ldr.w	pc, [sp], #4

00002ab0 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    2ab0:	b500      	push	{lr}
    2ab2:	b085      	sub	sp, #20
    2ab4:	9001      	str	r0, [sp, #4]
    2ab6:	460b      	mov	r3, r1
    2ab8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2abc:	9b01      	ldr	r3, [sp, #4]
    2abe:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2ac0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2ac4:	2b00      	cmp	r3, #0
    2ac6:	d003      	beq.n	2ad0 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    2ac8:	2300      	movs	r3, #0
    2aca:	f8ad 300c 	strh.w	r3, [sp, #12]
    2ace:	e002      	b.n	2ad6 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2ad0:	2301      	movs	r3, #1
    2ad2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    2ad6:	ab02      	add	r3, sp, #8
    2ad8:	4618      	mov	r0, r3
    2ada:	f7ff ffdc 	bl	2a96 <Clock_Ip_ClockSetSimGate>
}
    2ade:	bf00      	nop
    2ae0:	b005      	add	sp, #20
    2ae2:	f85d fb04 	ldr.w	pc, [sp], #4

00002ae6 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    2ae6:	b500      	push	{lr}
    2ae8:	b083      	sub	sp, #12
    2aea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2aec:	9b01      	ldr	r3, [sp, #4]
    2aee:	2b00      	cmp	r3, #0
    2af0:	d002      	beq.n	2af8 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    2af2:	9801      	ldr	r0, [sp, #4]
    2af4:	f000 f8c0 	bl	2c78 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2af8:	bf00      	nop
    2afa:	b003      	add	sp, #12
    2afc:	f85d fb04 	ldr.w	pc, [sp], #4

00002b00 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2b00:	b500      	push	{lr}
    2b02:	b085      	sub	sp, #20
    2b04:	9001      	str	r0, [sp, #4]
    2b06:	460b      	mov	r3, r1
    2b08:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2b0c:	9b01      	ldr	r3, [sp, #4]
    2b0e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2b10:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2b14:	2b00      	cmp	r3, #0
    2b16:	d003      	beq.n	2b20 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    2b18:	2300      	movs	r3, #0
    2b1a:	f8ad 300c 	strh.w	r3, [sp, #12]
    2b1e:	e002      	b.n	2b26 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2b20:	2301      	movs	r3, #1
    2b22:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    2b26:	ab02      	add	r3, sp, #8
    2b28:	4618      	mov	r0, r3
    2b2a:	f7ff ffdc 	bl	2ae6 <Clock_Ip_ClockSetSimTraceEnable>
}
    2b2e:	bf00      	nop
    2b30:	b005      	add	sp, #20
    2b32:	f85d fb04 	ldr.w	pc, [sp], #4

00002b36 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2b36:	b084      	sub	sp, #16
    2b38:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2b3a:	4b09      	ldr	r3, [pc, #36]	; (2b60 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2b3c:	691b      	ldr	r3, [r3, #16]
    2b3e:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    2b40:	9b03      	ldr	r3, [sp, #12]
    2b42:	f023 0301 	bic.w	r3, r3, #1
    2b46:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    2b48:	9b01      	ldr	r3, [sp, #4]
    2b4a:	889b      	ldrh	r3, [r3, #4]
    2b4c:	461a      	mov	r2, r3
    2b4e:	9b03      	ldr	r3, [sp, #12]
    2b50:	4313      	orrs	r3, r2
    2b52:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2b54:	4a02      	ldr	r2, [pc, #8]	; (2b60 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2b56:	9b03      	ldr	r3, [sp, #12]
    2b58:	6113      	str	r3, [r2, #16]
}
    2b5a:	bf00      	nop
    2b5c:	b004      	add	sp, #16
    2b5e:	4770      	bx	lr
    2b60:	40048000 	.word	0x40048000

00002b64 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2b64:	b084      	sub	sp, #16
    2b66:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2b68:	4b09      	ldr	r3, [pc, #36]	; (2b90 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2b6a:	691b      	ldr	r3, [r3, #16]
    2b6c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    2b6e:	9b03      	ldr	r3, [sp, #12]
    2b70:	f023 0302 	bic.w	r3, r3, #2
    2b74:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    2b76:	9b01      	ldr	r3, [sp, #4]
    2b78:	889b      	ldrh	r3, [r3, #4]
    2b7a:	005b      	lsls	r3, r3, #1
    2b7c:	9a03      	ldr	r2, [sp, #12]
    2b7e:	4313      	orrs	r3, r2
    2b80:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2b82:	4a03      	ldr	r2, [pc, #12]	; (2b90 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2b84:	9b03      	ldr	r3, [sp, #12]
    2b86:	6113      	str	r3, [r2, #16]
}
    2b88:	bf00      	nop
    2b8a:	b004      	add	sp, #16
    2b8c:	4770      	bx	lr
    2b8e:	bf00      	nop
    2b90:	40048000 	.word	0x40048000

00002b94 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2b94:	b084      	sub	sp, #16
    2b96:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2b98:	4b09      	ldr	r3, [pc, #36]	; (2bc0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2b9a:	685b      	ldr	r3, [r3, #4]
    2b9c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    2b9e:	9b03      	ldr	r3, [sp, #12]
    2ba0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2ba4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    2ba6:	9b01      	ldr	r3, [sp, #4]
    2ba8:	889b      	ldrh	r3, [r3, #4]
    2baa:	02db      	lsls	r3, r3, #11
    2bac:	9a03      	ldr	r2, [sp, #12]
    2bae:	4313      	orrs	r3, r2
    2bb0:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2bb2:	4a03      	ldr	r2, [pc, #12]	; (2bc0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2bb4:	9b03      	ldr	r3, [sp, #12]
    2bb6:	6053      	str	r3, [r2, #4]
}
    2bb8:	bf00      	nop
    2bba:	b004      	add	sp, #16
    2bbc:	4770      	bx	lr
    2bbe:	bf00      	nop
    2bc0:	40048000 	.word	0x40048000

00002bc4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2bc4:	b084      	sub	sp, #16
    2bc6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    2bc8:	4913      	ldr	r1, [pc, #76]	; (2c18 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2bca:	9b01      	ldr	r3, [sp, #4]
    2bcc:	681a      	ldr	r2, [r3, #0]
    2bce:	4813      	ldr	r0, [pc, #76]	; (2c1c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2bd0:	4613      	mov	r3, r2
    2bd2:	00db      	lsls	r3, r3, #3
    2bd4:	4413      	add	r3, r2
    2bd6:	4403      	add	r3, r0
    2bd8:	3306      	adds	r3, #6
    2bda:	781b      	ldrb	r3, [r3, #0]
    2bdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2be0:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    2be2:	9b03      	ldr	r3, [sp, #12]
    2be4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    2be8:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    2bea:	9b01      	ldr	r3, [sp, #4]
    2bec:	889b      	ldrh	r3, [r3, #4]
    2bee:	079b      	lsls	r3, r3, #30
    2bf0:	9a03      	ldr	r2, [sp, #12]
    2bf2:	4313      	orrs	r3, r2
    2bf4:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    2bf6:	4908      	ldr	r1, [pc, #32]	; (2c18 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2bf8:	9b01      	ldr	r3, [sp, #4]
    2bfa:	681a      	ldr	r2, [r3, #0]
    2bfc:	4807      	ldr	r0, [pc, #28]	; (2c1c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2bfe:	4613      	mov	r3, r2
    2c00:	00db      	lsls	r3, r3, #3
    2c02:	4413      	add	r3, r2
    2c04:	4403      	add	r3, r0
    2c06:	3306      	adds	r3, #6
    2c08:	781b      	ldrb	r3, [r3, #0]
    2c0a:	461a      	mov	r2, r3
    2c0c:	9b03      	ldr	r3, [sp, #12]
    2c0e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    2c12:	bf00      	nop
    2c14:	b004      	add	sp, #16
    2c16:	4770      	bx	lr
    2c18:	40065000 	.word	0x40065000
    2c1c:	0000b7f8 	.word	0x0000b7f8

00002c20 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2c20:	b086      	sub	sp, #24
    2c22:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    2c24:	9b01      	ldr	r3, [sp, #4]
    2c26:	889b      	ldrh	r3, [r3, #4]
    2c28:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    2c2a:	9b01      	ldr	r3, [sp, #4]
    2c2c:	681a      	ldr	r2, [r3, #0]
    2c2e:	4910      	ldr	r1, [pc, #64]	; (2c70 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    2c30:	4613      	mov	r3, r2
    2c32:	00db      	lsls	r3, r3, #3
    2c34:	4413      	add	r3, r2
    2c36:	440b      	add	r3, r1
    2c38:	3306      	adds	r3, #6
    2c3a:	781b      	ldrb	r3, [r3, #0]
    2c3c:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    2c3e:	4b0d      	ldr	r3, [pc, #52]	; (2c74 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2c42:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    2c44:	2201      	movs	r2, #1
    2c46:	9b04      	ldr	r3, [sp, #16]
    2c48:	fa02 f303 	lsl.w	r3, r2, r3
    2c4c:	43db      	mvns	r3, r3
    2c4e:	9a03      	ldr	r2, [sp, #12]
    2c50:	4013      	ands	r3, r2
    2c52:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    2c54:	9a05      	ldr	r2, [sp, #20]
    2c56:	9b04      	ldr	r3, [sp, #16]
    2c58:	fa02 f303 	lsl.w	r3, r2, r3
    2c5c:	9a03      	ldr	r2, [sp, #12]
    2c5e:	4313      	orrs	r3, r2
    2c60:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    2c62:	4a04      	ldr	r2, [pc, #16]	; (2c74 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2c64:	9b03      	ldr	r3, [sp, #12]
    2c66:	6413      	str	r3, [r2, #64]	; 0x40
}
    2c68:	bf00      	nop
    2c6a:	b006      	add	sp, #24
    2c6c:	4770      	bx	lr
    2c6e:	bf00      	nop
    2c70:	0000b7f8 	.word	0x0000b7f8
    2c74:	40048000 	.word	0x40048000

00002c78 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2c78:	b084      	sub	sp, #16
    2c7a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    2c7c:	4b0a      	ldr	r3, [pc, #40]	; (2ca8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2c80:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    2c82:	9b01      	ldr	r3, [sp, #4]
    2c84:	889b      	ldrh	r3, [r3, #4]
    2c86:	2b01      	cmp	r3, #1
    2c88:	d104      	bne.n	2c94 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    2c8a:	9b03      	ldr	r3, [sp, #12]
    2c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2c90:	9303      	str	r3, [sp, #12]
    2c92:	e003      	b.n	2c9c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2c94:	9b03      	ldr	r3, [sp, #12]
    2c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2c9a:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    2c9c:	4a02      	ldr	r2, [pc, #8]	; (2ca8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2c9e:	9b03      	ldr	r3, [sp, #12]
    2ca0:	6693      	str	r3, [r2, #104]	; 0x68
}
    2ca2:	bf00      	nop
    2ca4:	b004      	add	sp, #16
    2ca6:	4770      	bx	lr
    2ca8:	40048000 	.word	0x40048000

00002cac <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    2cac:	b082      	sub	sp, #8
    2cae:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2cb0:	bf00      	nop
    2cb2:	b002      	add	sp, #8
    2cb4:	4770      	bx	lr

00002cb6 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    2cb6:	b082      	sub	sp, #8
    2cb8:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2cba:	bf00      	nop
    2cbc:	b002      	add	sp, #8
    2cbe:	4770      	bx	lr

00002cc0 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2cc0:	b500      	push	{lr}
    2cc2:	b083      	sub	sp, #12
    2cc4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cc6:	9b01      	ldr	r3, [sp, #4]
    2cc8:	2b00      	cmp	r3, #0
    2cca:	d002      	beq.n	2cd2 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    2ccc:	9801      	ldr	r0, [sp, #4]
    2cce:	f000 f8d1 	bl	2e74 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cd2:	bf00      	nop
    2cd4:	b003      	add	sp, #12
    2cd6:	f85d fb04 	ldr.w	pc, [sp], #4

00002cda <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2cda:	b500      	push	{lr}
    2cdc:	b083      	sub	sp, #12
    2cde:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ce0:	9b01      	ldr	r3, [sp, #4]
    2ce2:	2b00      	cmp	r3, #0
    2ce4:	d002      	beq.n	2cec <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    2ce6:	9801      	ldr	r0, [sp, #4]
    2ce8:	f000 f950 	bl	2f8c <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cec:	bf00      	nop
    2cee:	b003      	add	sp, #12
    2cf0:	f85d fb04 	ldr.w	pc, [sp], #4

00002cf4 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    2cf4:	b500      	push	{lr}
    2cf6:	b083      	sub	sp, #12
    2cf8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    2cfa:	9801      	ldr	r0, [sp, #4]
    2cfc:	f000 f98e 	bl	301c <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2d00:	bf00      	nop
    2d02:	b003      	add	sp, #12
    2d04:	f85d fb04 	ldr.w	pc, [sp], #4

00002d08 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2d08:	b500      	push	{lr}
    2d0a:	b083      	sub	sp, #12
    2d0c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d0e:	9b01      	ldr	r3, [sp, #4]
    2d10:	2b00      	cmp	r3, #0
    2d12:	d002      	beq.n	2d1a <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    2d14:	9801      	ldr	r0, [sp, #4]
    2d16:	f000 f999 	bl	304c <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d1a:	bf00      	nop
    2d1c:	b003      	add	sp, #12
    2d1e:	f85d fb04 	ldr.w	pc, [sp], #4

00002d22 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2d22:	b500      	push	{lr}
    2d24:	b083      	sub	sp, #12
    2d26:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d28:	9b01      	ldr	r3, [sp, #4]
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d002      	beq.n	2d34 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    2d2e:	9801      	ldr	r0, [sp, #4]
    2d30:	f000 f9b0 	bl	3094 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d34:	bf00      	nop
    2d36:	b003      	add	sp, #12
    2d38:	f85d fb04 	ldr.w	pc, [sp], #4

00002d3c <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    2d3c:	b500      	push	{lr}
    2d3e:	b083      	sub	sp, #12
    2d40:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    2d42:	9801      	ldr	r0, [sp, #4]
    2d44:	f000 f9ba 	bl	30bc <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2d48:	bf00      	nop
    2d4a:	b003      	add	sp, #12
    2d4c:	f85d fb04 	ldr.w	pc, [sp], #4

00002d50 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2d50:	b500      	push	{lr}
    2d52:	b083      	sub	sp, #12
    2d54:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d56:	9b01      	ldr	r3, [sp, #4]
    2d58:	2b00      	cmp	r3, #0
    2d5a:	d002      	beq.n	2d62 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    2d5c:	9801      	ldr	r0, [sp, #4]
    2d5e:	f000 f9bd 	bl	30dc <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d62:	bf00      	nop
    2d64:	b003      	add	sp, #12
    2d66:	f85d fb04 	ldr.w	pc, [sp], #4

00002d6a <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2d6a:	b500      	push	{lr}
    2d6c:	b083      	sub	sp, #12
    2d6e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d70:	9b01      	ldr	r3, [sp, #4]
    2d72:	2b00      	cmp	r3, #0
    2d74:	d002      	beq.n	2d7c <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    2d76:	9801      	ldr	r0, [sp, #4]
    2d78:	f000 f9d4 	bl	3124 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d7c:	bf00      	nop
    2d7e:	b003      	add	sp, #12
    2d80:	f85d fb04 	ldr.w	pc, [sp], #4

00002d84 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    2d84:	b500      	push	{lr}
    2d86:	b083      	sub	sp, #12
    2d88:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    2d8a:	9801      	ldr	r0, [sp, #4]
    2d8c:	f000 f9de 	bl	314c <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2d90:	bf00      	nop
    2d92:	b003      	add	sp, #12
    2d94:	f85d fb04 	ldr.w	pc, [sp], #4

00002d98 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    2d98:	b500      	push	{lr}
    2d9a:	b089      	sub	sp, #36	; 0x24
    2d9c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    2d9e:	2300      	movs	r3, #0
    2da0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    2da4:	4b20      	ldr	r3, [pc, #128]	; (2e28 <SetInputSouceSytemClock+0x90>)
    2da6:	695b      	ldr	r3, [r3, #20]
    2da8:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    2daa:	9b06      	ldr	r3, [sp, #24]
    2dac:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    2db0:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    2db2:	9b01      	ldr	r3, [sp, #4]
    2db4:	061b      	lsls	r3, r3, #24
    2db6:	9a06      	ldr	r2, [sp, #24]
    2db8:	4313      	orrs	r3, r2
    2dba:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    2dbc:	4a1a      	ldr	r2, [pc, #104]	; (2e28 <SetInputSouceSytemClock+0x90>)
    2dbe:	9b06      	ldr	r3, [sp, #24]
    2dc0:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2dc2:	aa02      	add	r2, sp, #8
    2dc4:	a903      	add	r1, sp, #12
    2dc6:	a804      	add	r0, sp, #16
    2dc8:	f24c 3350 	movw	r3, #50000	; 0xc350
    2dcc:	f7ff f9ac 	bl	2128 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    2dd0:	4b15      	ldr	r3, [pc, #84]	; (2e28 <SetInputSouceSytemClock+0x90>)
    2dd2:	691b      	ldr	r3, [r3, #16]
    2dd4:	0e1b      	lsrs	r3, r3, #24
    2dd6:	f003 030f 	and.w	r3, r3, #15
    2dda:	9a01      	ldr	r2, [sp, #4]
    2ddc:	429a      	cmp	r2, r3
    2dde:	bf0c      	ite	eq
    2de0:	2301      	moveq	r3, #1
    2de2:	2300      	movne	r3, #0
    2de4:	b2db      	uxtb	r3, r3
    2de6:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2de8:	9a02      	ldr	r2, [sp, #8]
    2dea:	a903      	add	r1, sp, #12
    2dec:	ab04      	add	r3, sp, #16
    2dee:	4618      	mov	r0, r3
    2df0:	f7ff f9b4 	bl	215c <Clock_Ip_TimeoutExpired>
    2df4:	4603      	mov	r3, r0
    2df6:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    2dfa:	9b05      	ldr	r3, [sp, #20]
    2dfc:	2b00      	cmp	r3, #0
    2dfe:	d106      	bne.n	2e0e <SetInputSouceSytemClock+0x76>
    2e00:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e04:	f083 0301 	eor.w	r3, r3, #1
    2e08:	b2db      	uxtb	r3, r3
    2e0a:	2b00      	cmp	r3, #0
    2e0c:	d1e0      	bne.n	2dd0 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    2e0e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e12:	2b00      	cmp	r3, #0
    2e14:	d003      	beq.n	2e1e <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    2e16:	2105      	movs	r1, #5
    2e18:	2001      	movs	r0, #1
    2e1a:	f7ff f975 	bl	2108 <Clock_Ip_ReportClockErrors>
    }
}
    2e1e:	bf00      	nop
    2e20:	b009      	add	sp, #36	; 0x24
    2e22:	f85d fb04 	ldr.w	pc, [sp], #4
    2e26:	bf00      	nop
    2e28:	40064000 	.word	0x40064000

00002e2c <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2e2c:	b500      	push	{lr}
    2e2e:	b083      	sub	sp, #12
    2e30:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e32:	9b01      	ldr	r3, [sp, #4]
    2e34:	2b00      	cmp	r3, #0
    2e36:	d002      	beq.n	2e3e <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    2e38:	9801      	ldr	r0, [sp, #4]
    2e3a:	f000 f997 	bl	316c <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e3e:	bf00      	nop
    2e40:	b003      	add	sp, #12
    2e42:	f85d fb04 	ldr.w	pc, [sp], #4

00002e46 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2e46:	b500      	push	{lr}
    2e48:	b083      	sub	sp, #12
    2e4a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e4c:	9b01      	ldr	r3, [sp, #4]
    2e4e:	2b00      	cmp	r3, #0
    2e50:	d002      	beq.n	2e58 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    2e52:	9801      	ldr	r0, [sp, #4]
    2e54:	f000 fa7e 	bl	3354 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e58:	bf00      	nop
    2e5a:	b003      	add	sp, #12
    2e5c:	f85d fb04 	ldr.w	pc, [sp], #4

00002e60 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    2e60:	b500      	push	{lr}
    2e62:	b083      	sub	sp, #12
    2e64:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    2e66:	9801      	ldr	r0, [sp, #4]
    2e68:	f000 fab8 	bl	33dc <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2e6c:	bf00      	nop
    2e6e:	b003      	add	sp, #12
    2e70:	f85d fb04 	ldr.w	pc, [sp], #4

00002e74 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2e74:	b500      	push	{lr}
    2e76:	b08b      	sub	sp, #44	; 0x2c
    2e78:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2e7a:	2300      	movs	r3, #0
    2e7c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    2e80:	9b01      	ldr	r3, [sp, #4]
    2e82:	2b00      	cmp	r3, #0
    2e84:	d10b      	bne.n	2e9e <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    2e86:	2305      	movs	r3, #5
    2e88:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    2e8a:	2301      	movs	r3, #1
    2e8c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    2e90:	2301      	movs	r3, #1
    2e92:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    2e96:	2301      	movs	r3, #1
    2e98:	f88d 3010 	strb.w	r3, [sp, #16]
    2e9c:	e00e      	b.n	2ebc <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    2e9e:	9b01      	ldr	r3, [sp, #4]
    2ea0:	681b      	ldr	r3, [r3, #0]
    2ea2:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    2ea4:	9b01      	ldr	r3, [sp, #4]
    2ea6:	79db      	ldrb	r3, [r3, #7]
    2ea8:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    2eac:	9b01      	ldr	r3, [sp, #4]
    2eae:	889b      	ldrh	r3, [r3, #4]
    2eb0:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    2eb4:	9b01      	ldr	r3, [sp, #4]
    2eb6:	7a1b      	ldrb	r3, [r3, #8]
    2eb8:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2ebc:	4b32      	ldr	r3, [pc, #200]	; (2f88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ebe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ec2:	4a31      	ldr	r2, [pc, #196]	; (2f88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ec4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2ec8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    2ecc:	4b2e      	ldr	r3, [pc, #184]	; (2f88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ece:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ed2:	4a2d      	ldr	r2, [pc, #180]	; (2f88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ed4:	f023 0301 	bic.w	r3, r3, #1
    2ed8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2edc:	4b2a      	ldr	r3, [pc, #168]	; (2f88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ede:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ee2:	4a29      	ldr	r2, [pc, #164]	; (2f88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ee4:	f023 0304 	bic.w	r3, r3, #4
    2ee8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    2eec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    2ef0:	2b01      	cmp	r3, #1
    2ef2:	d144      	bne.n	2f7e <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    2ef4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2ef8:	4a23      	ldr	r2, [pc, #140]	; (2f88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2efa:	f003 0301 	and.w	r3, r3, #1
    2efe:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2f02:	4b21      	ldr	r3, [pc, #132]	; (2f88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f08:	4a1f      	ldr	r2, [pc, #124]	; (2f88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f0a:	f043 0301 	orr.w	r3, r3, #1
    2f0e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    2f12:	4b1d      	ldr	r3, [pc, #116]	; (2f88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f14:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2f18:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2f1c:	009b      	lsls	r3, r3, #2
    2f1e:	f003 0304 	and.w	r3, r3, #4
    2f22:	4919      	ldr	r1, [pc, #100]	; (2f88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f24:	4313      	orrs	r3, r2
    2f26:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2f2a:	aa05      	add	r2, sp, #20
    2f2c:	a906      	add	r1, sp, #24
    2f2e:	a807      	add	r0, sp, #28
    2f30:	f24c 3350 	movw	r3, #50000	; 0xc350
    2f34:	f7ff f8f8 	bl	2128 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2f38:	4b13      	ldr	r3, [pc, #76]	; (2f88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f3e:	0e1b      	lsrs	r3, r3, #24
    2f40:	f003 0301 	and.w	r3, r3, #1
    2f44:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2f46:	9a05      	ldr	r2, [sp, #20]
    2f48:	a906      	add	r1, sp, #24
    2f4a:	ab07      	add	r3, sp, #28
    2f4c:	4618      	mov	r0, r3
    2f4e:	f7ff f905 	bl	215c <Clock_Ip_TimeoutExpired>
    2f52:	4603      	mov	r3, r0
    2f54:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2f58:	9b08      	ldr	r3, [sp, #32]
    2f5a:	2b00      	cmp	r3, #0
    2f5c:	d106      	bne.n	2f6c <Clock_Ip_SetSirc_TrustedCall+0xf8>
    2f5e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2f62:	f083 0301 	eor.w	r3, r3, #1
    2f66:	b2db      	uxtb	r3, r3
    2f68:	2b00      	cmp	r3, #0
    2f6a:	d1e5      	bne.n	2f38 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    2f6c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2f70:	2b00      	cmp	r3, #0
    2f72:	d004      	beq.n	2f7e <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    2f74:	9b02      	ldr	r3, [sp, #8]
    2f76:	4619      	mov	r1, r3
    2f78:	2001      	movs	r0, #1
    2f7a:	f7ff f8c5 	bl	2108 <Clock_Ip_ReportClockErrors>
        }
    }
}
    2f7e:	bf00      	nop
    2f80:	b00b      	add	sp, #44	; 0x2c
    2f82:	f85d fb04 	ldr.w	pc, [sp], #4
    2f86:	bf00      	nop
    2f88:	40064000 	.word	0x40064000

00002f8c <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2f8c:	b500      	push	{lr}
    2f8e:	b089      	sub	sp, #36	; 0x24
    2f90:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2f92:	2300      	movs	r3, #0
    2f94:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2f98:	4b1f      	ldr	r3, [pc, #124]	; (3018 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2f9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f9e:	4a1e      	ldr	r2, [pc, #120]	; (3018 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fa0:	f043 0301 	orr.w	r3, r3, #1
    2fa4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    2fa8:	4b1b      	ldr	r3, [pc, #108]	; (3018 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2faa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fae:	4a1a      	ldr	r2, [pc, #104]	; (3018 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fb0:	f043 0304 	orr.w	r3, r3, #4
    2fb4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2fb8:	aa03      	add	r2, sp, #12
    2fba:	a904      	add	r1, sp, #16
    2fbc:	a805      	add	r0, sp, #20
    2fbe:	f24c 3350 	movw	r3, #50000	; 0xc350
    2fc2:	f7ff f8b1 	bl	2128 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2fc6:	4b14      	ldr	r3, [pc, #80]	; (3018 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fcc:	0e1b      	lsrs	r3, r3, #24
    2fce:	f003 0301 	and.w	r3, r3, #1
    2fd2:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2fd4:	9a03      	ldr	r2, [sp, #12]
    2fd6:	a904      	add	r1, sp, #16
    2fd8:	ab05      	add	r3, sp, #20
    2fda:	4618      	mov	r0, r3
    2fdc:	f7ff f8be 	bl	215c <Clock_Ip_TimeoutExpired>
    2fe0:	4603      	mov	r3, r0
    2fe2:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2fe6:	9b06      	ldr	r3, [sp, #24]
    2fe8:	2b00      	cmp	r3, #0
    2fea:	d106      	bne.n	2ffa <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    2fec:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2ff0:	f083 0301 	eor.w	r3, r3, #1
    2ff4:	b2db      	uxtb	r3, r3
    2ff6:	2b00      	cmp	r3, #0
    2ff8:	d1e5      	bne.n	2fc6 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    2ffa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2ffe:	2b00      	cmp	r3, #0
    3000:	d005      	beq.n	300e <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3002:	9b01      	ldr	r3, [sp, #4]
    3004:	681b      	ldr	r3, [r3, #0]
    3006:	4619      	mov	r1, r3
    3008:	2001      	movs	r0, #1
    300a:	f7ff f87d 	bl	2108 <Clock_Ip_ReportClockErrors>
    }
}
    300e:	bf00      	nop
    3010:	b009      	add	sp, #36	; 0x24
    3012:	f85d fb04 	ldr.w	pc, [sp], #4
    3016:	bf00      	nop
    3018:	40064000 	.word	0x40064000

0000301c <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    301c:	b082      	sub	sp, #8
    301e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3020:	4b09      	ldr	r3, [pc, #36]	; (3048 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3022:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3026:	4a08      	ldr	r2, [pc, #32]	; (3048 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3028:	f023 0301 	bic.w	r3, r3, #1
    302c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3030:	4b05      	ldr	r3, [pc, #20]	; (3048 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3032:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3036:	4a04      	ldr	r2, [pc, #16]	; (3048 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3038:	f023 0304 	bic.w	r3, r3, #4
    303c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3040:	bf00      	nop
    3042:	b002      	add	sp, #8
    3044:	4770      	bx	lr
    3046:	bf00      	nop
    3048:	40064000 	.word	0x40064000

0000304c <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    304c:	b082      	sub	sp, #8
    304e:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3050:	4b0f      	ldr	r3, [pc, #60]	; (3090 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3052:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3056:	4a0e      	ldr	r2, [pc, #56]	; (3090 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3058:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    305c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3060:	4b0b      	ldr	r3, [pc, #44]	; (3090 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3062:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3066:	4a0a      	ldr	r2, [pc, #40]	; (3090 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3068:	f023 0304 	bic.w	r3, r3, #4
    306c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3070:	4b07      	ldr	r3, [pc, #28]	; (3090 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3072:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3076:	9b01      	ldr	r3, [sp, #4]
    3078:	7a1b      	ldrb	r3, [r3, #8]
    307a:	009b      	lsls	r3, r3, #2
    307c:	f003 0304 	and.w	r3, r3, #4
    3080:	4903      	ldr	r1, [pc, #12]	; (3090 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3082:	4313      	orrs	r3, r2
    3084:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3088:	bf00      	nop
    308a:	b002      	add	sp, #8
    308c:	4770      	bx	lr
    308e:	bf00      	nop
    3090:	40064000 	.word	0x40064000

00003094 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3094:	b082      	sub	sp, #8
    3096:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3098:	9b01      	ldr	r3, [sp, #4]
    309a:	889b      	ldrh	r3, [r3, #4]
    309c:	2b01      	cmp	r3, #1
    309e:	d107      	bne.n	30b0 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    30a0:	4b05      	ldr	r3, [pc, #20]	; (30b8 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    30a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30a6:	4a04      	ldr	r2, [pc, #16]	; (30b8 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    30a8:	f043 0304 	orr.w	r3, r3, #4
    30ac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    30b0:	bf00      	nop
    30b2:	b002      	add	sp, #8
    30b4:	4770      	bx	lr
    30b6:	bf00      	nop
    30b8:	40064000 	.word	0x40064000

000030bc <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    30bc:	b082      	sub	sp, #8
    30be:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    30c0:	4b05      	ldr	r3, [pc, #20]	; (30d8 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    30c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30c6:	4a04      	ldr	r2, [pc, #16]	; (30d8 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    30c8:	f023 0304 	bic.w	r3, r3, #4
    30cc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    30d0:	bf00      	nop
    30d2:	b002      	add	sp, #8
    30d4:	4770      	bx	lr
    30d6:	bf00      	nop
    30d8:	40064000 	.word	0x40064000

000030dc <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    30dc:	b082      	sub	sp, #8
    30de:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    30e0:	4b0f      	ldr	r3, [pc, #60]	; (3120 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    30e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30e6:	4a0e      	ldr	r2, [pc, #56]	; (3120 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    30e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    30ec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    30f0:	4b0b      	ldr	r3, [pc, #44]	; (3120 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    30f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30f6:	4a0a      	ldr	r2, [pc, #40]	; (3120 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    30f8:	f023 0302 	bic.w	r3, r3, #2
    30fc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3100:	4b07      	ldr	r3, [pc, #28]	; (3120 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3102:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3106:	9b01      	ldr	r3, [sp, #4]
    3108:	7a5b      	ldrb	r3, [r3, #9]
    310a:	005b      	lsls	r3, r3, #1
    310c:	f003 0302 	and.w	r3, r3, #2
    3110:	4903      	ldr	r1, [pc, #12]	; (3120 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3112:	4313      	orrs	r3, r2
    3114:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3118:	bf00      	nop
    311a:	b002      	add	sp, #8
    311c:	4770      	bx	lr
    311e:	bf00      	nop
    3120:	40064000 	.word	0x40064000

00003124 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3124:	b082      	sub	sp, #8
    3126:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3128:	9b01      	ldr	r3, [sp, #4]
    312a:	889b      	ldrh	r3, [r3, #4]
    312c:	2b01      	cmp	r3, #1
    312e:	d107      	bne.n	3140 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3130:	4b05      	ldr	r3, [pc, #20]	; (3148 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3132:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3136:	4a04      	ldr	r2, [pc, #16]	; (3148 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3138:	f043 0302 	orr.w	r3, r3, #2
    313c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3140:	bf00      	nop
    3142:	b002      	add	sp, #8
    3144:	4770      	bx	lr
    3146:	bf00      	nop
    3148:	40064000 	.word	0x40064000

0000314c <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    314c:	b082      	sub	sp, #8
    314e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3150:	4b05      	ldr	r3, [pc, #20]	; (3168 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3152:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3156:	4a04      	ldr	r2, [pc, #16]	; (3168 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3158:	f023 0302 	bic.w	r3, r3, #2
    315c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3160:	bf00      	nop
    3162:	b002      	add	sp, #8
    3164:	4770      	bx	lr
    3166:	bf00      	nop
    3168:	40064000 	.word	0x40064000

0000316c <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    316c:	b500      	push	{lr}
    316e:	b08b      	sub	sp, #44	; 0x2c
    3170:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3172:	9b01      	ldr	r3, [sp, #4]
    3174:	681a      	ldr	r2, [r3, #0]
    3176:	4975      	ldr	r1, [pc, #468]	; (334c <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3178:	4613      	mov	r3, r2
    317a:	00db      	lsls	r3, r3, #3
    317c:	4413      	add	r3, r2
    317e:	440b      	add	r3, r1
    3180:	781b      	ldrb	r3, [r3, #0]
    3182:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3184:	2300      	movs	r3, #0
    3186:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    318a:	2300      	movs	r3, #0
    318c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3190:	4b6f      	ldr	r3, [pc, #444]	; (3350 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3192:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3196:	4a6e      	ldr	r2, [pc, #440]	; (3350 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3198:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    319c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    31a0:	4b6b      	ldr	r3, [pc, #428]	; (3350 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    31a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    31aa:	2b00      	cmp	r3, #0
    31ac:	d07d      	beq.n	32aa <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    31ae:	9b01      	ldr	r3, [sp, #4]
    31b0:	79db      	ldrb	r3, [r3, #7]
    31b2:	461a      	mov	r2, r3
    31b4:	4b66      	ldr	r3, [pc, #408]	; (3350 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31b6:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    31ba:	f003 0303 	and.w	r3, r3, #3
    31be:	429a      	cmp	r2, r3
    31c0:	d10b      	bne.n	31da <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    31c2:	9b01      	ldr	r3, [sp, #4]
    31c4:	799b      	ldrb	r3, [r3, #6]
    31c6:	461a      	mov	r2, r3
    31c8:	4b61      	ldr	r3, [pc, #388]	; (3350 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    31ce:	08db      	lsrs	r3, r3, #3
    31d0:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    31d4:	429a      	cmp	r2, r3
    31d6:	f000 80b4 	beq.w	3342 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    31da:	4b5d      	ldr	r3, [pc, #372]	; (3350 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    31e0:	f003 0301 	and.w	r3, r3, #1
    31e4:	2b00      	cmp	r3, #0
    31e6:	d105      	bne.n	31f4 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    31e8:	2301      	movs	r3, #1
    31ea:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    31ee:	2000      	movs	r0, #0
    31f0:	f7ff fd66 	bl	2cc0 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    31f4:	2002      	movs	r0, #2
    31f6:	f7ff fdcf 	bl	2d98 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    31fa:	4b55      	ldr	r3, [pc, #340]	; (3350 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31fc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3200:	4a53      	ldr	r2, [pc, #332]	; (3350 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3202:	f023 0301 	bic.w	r3, r3, #1
    3206:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    320a:	9b01      	ldr	r3, [sp, #4]
    320c:	889b      	ldrh	r3, [r3, #4]
    320e:	2b01      	cmp	r3, #1
    3210:	f040 8097 	bne.w	3342 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3214:	9b01      	ldr	r3, [sp, #4]
    3216:	79db      	ldrb	r3, [r3, #7]
    3218:	4a4d      	ldr	r2, [pc, #308]	; (3350 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    321a:	f003 0303 	and.w	r3, r3, #3
    321e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3222:	4b4b      	ldr	r3, [pc, #300]	; (3350 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3224:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3228:	9b01      	ldr	r3, [sp, #4]
    322a:	799b      	ldrb	r3, [r3, #6]
    322c:	00db      	lsls	r3, r3, #3
    322e:	f003 0308 	and.w	r3, r3, #8
    3232:	4313      	orrs	r3, r2
    3234:	4a46      	ldr	r2, [pc, #280]	; (3350 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3236:	f043 0301 	orr.w	r3, r3, #1
    323a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    323e:	aa03      	add	r2, sp, #12
    3240:	a904      	add	r1, sp, #16
    3242:	a805      	add	r0, sp, #20
    3244:	f24c 3350 	movw	r3, #50000	; 0xc350
    3248:	f7fe ff6e 	bl	2128 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    324c:	4b40      	ldr	r3, [pc, #256]	; (3350 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    324e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3252:	0e1b      	lsrs	r3, r3, #24
    3254:	f003 0301 	and.w	r3, r3, #1
    3258:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    325a:	9a03      	ldr	r2, [sp, #12]
    325c:	a904      	add	r1, sp, #16
    325e:	ab05      	add	r3, sp, #20
    3260:	4618      	mov	r0, r3
    3262:	f7fe ff7b 	bl	215c <Clock_Ip_TimeoutExpired>
    3266:	4603      	mov	r3, r0
    3268:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    326c:	9b06      	ldr	r3, [sp, #24]
    326e:	2b00      	cmp	r3, #0
    3270:	d106      	bne.n	3280 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3272:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3276:	f083 0301 	eor.w	r3, r3, #1
    327a:	b2db      	uxtb	r3, r3
    327c:	2b00      	cmp	r3, #0
    327e:	d1e5      	bne.n	324c <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3280:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3284:	2b00      	cmp	r3, #0
    3286:	d005      	beq.n	3294 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3288:	9b01      	ldr	r3, [sp, #4]
    328a:	681b      	ldr	r3, [r3, #0]
    328c:	4619      	mov	r1, r3
    328e:	2001      	movs	r0, #1
    3290:	f7fe ff3a 	bl	2108 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3294:	2003      	movs	r0, #3
    3296:	f7ff fd7f 	bl	2d98 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    329a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    329e:	2b00      	cmp	r3, #0
    32a0:	d04f      	beq.n	3342 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    32a2:	2002      	movs	r0, #2
    32a4:	f7ff fd26 	bl	2cf4 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    32a8:	e04b      	b.n	3342 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    32aa:	4b29      	ldr	r3, [pc, #164]	; (3350 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32ac:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    32b0:	4a27      	ldr	r2, [pc, #156]	; (3350 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32b2:	f023 0301 	bic.w	r3, r3, #1
    32b6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    32ba:	9b01      	ldr	r3, [sp, #4]
    32bc:	889b      	ldrh	r3, [r3, #4]
    32be:	2b01      	cmp	r3, #1
    32c0:	d13f      	bne.n	3342 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    32c2:	9b01      	ldr	r3, [sp, #4]
    32c4:	79db      	ldrb	r3, [r3, #7]
    32c6:	4a22      	ldr	r2, [pc, #136]	; (3350 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32c8:	f003 0303 	and.w	r3, r3, #3
    32cc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    32d0:	4b1f      	ldr	r3, [pc, #124]	; (3350 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32d2:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    32d6:	9b01      	ldr	r3, [sp, #4]
    32d8:	799b      	ldrb	r3, [r3, #6]
    32da:	00db      	lsls	r3, r3, #3
    32dc:	f003 0308 	and.w	r3, r3, #8
    32e0:	4313      	orrs	r3, r2
    32e2:	4a1b      	ldr	r2, [pc, #108]	; (3350 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32e4:	f043 0301 	orr.w	r3, r3, #1
    32e8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    32ec:	aa03      	add	r2, sp, #12
    32ee:	a904      	add	r1, sp, #16
    32f0:	a805      	add	r0, sp, #20
    32f2:	f24c 3350 	movw	r3, #50000	; 0xc350
    32f6:	f7fe ff17 	bl	2128 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    32fa:	4b15      	ldr	r3, [pc, #84]	; (3350 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32fc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3300:	0e1b      	lsrs	r3, r3, #24
    3302:	f003 0301 	and.w	r3, r3, #1
    3306:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3308:	9a03      	ldr	r2, [sp, #12]
    330a:	a904      	add	r1, sp, #16
    330c:	ab05      	add	r3, sp, #20
    330e:	4618      	mov	r0, r3
    3310:	f7fe ff24 	bl	215c <Clock_Ip_TimeoutExpired>
    3314:	4603      	mov	r3, r0
    3316:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    331a:	9b06      	ldr	r3, [sp, #24]
    331c:	2b00      	cmp	r3, #0
    331e:	d106      	bne.n	332e <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3320:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3324:	f083 0301 	eor.w	r3, r3, #1
    3328:	b2db      	uxtb	r3, r3
    332a:	2b00      	cmp	r3, #0
    332c:	d1e5      	bne.n	32fa <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    332e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3332:	2b00      	cmp	r3, #0
    3334:	d005      	beq.n	3342 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3336:	9b01      	ldr	r3, [sp, #4]
    3338:	681b      	ldr	r3, [r3, #0]
    333a:	4619      	mov	r1, r3
    333c:	2001      	movs	r0, #1
    333e:	f7fe fee3 	bl	2108 <Clock_Ip_ReportClockErrors>
}
    3342:	bf00      	nop
    3344:	b00b      	add	sp, #44	; 0x2c
    3346:	f85d fb04 	ldr.w	pc, [sp], #4
    334a:	bf00      	nop
    334c:	0000b7f8 	.word	0x0000b7f8
    3350:	40064000 	.word	0x40064000

00003354 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3354:	b500      	push	{lr}
    3356:	b089      	sub	sp, #36	; 0x24
    3358:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    335a:	2300      	movs	r3, #0
    335c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3360:	9b01      	ldr	r3, [sp, #4]
    3362:	889b      	ldrh	r3, [r3, #4]
    3364:	2b01      	cmp	r3, #1
    3366:	d132      	bne.n	33ce <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3368:	4b1b      	ldr	r3, [pc, #108]	; (33d8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    336a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    336e:	4a1a      	ldr	r2, [pc, #104]	; (33d8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3370:	f043 0301 	orr.w	r3, r3, #1
    3374:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3378:	aa03      	add	r2, sp, #12
    337a:	a904      	add	r1, sp, #16
    337c:	a805      	add	r0, sp, #20
    337e:	f24c 3350 	movw	r3, #50000	; 0xc350
    3382:	f7fe fed1 	bl	2128 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3386:	4b14      	ldr	r3, [pc, #80]	; (33d8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3388:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    338c:	0e1b      	lsrs	r3, r3, #24
    338e:	f003 0301 	and.w	r3, r3, #1
    3392:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3394:	9a03      	ldr	r2, [sp, #12]
    3396:	a904      	add	r1, sp, #16
    3398:	ab05      	add	r3, sp, #20
    339a:	4618      	mov	r0, r3
    339c:	f7fe fede 	bl	215c <Clock_Ip_TimeoutExpired>
    33a0:	4603      	mov	r3, r0
    33a2:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    33a6:	9b06      	ldr	r3, [sp, #24]
    33a8:	2b00      	cmp	r3, #0
    33aa:	d106      	bne.n	33ba <Clock_Ip_EnableFirc_TrustedCall+0x66>
    33ac:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33b0:	f083 0301 	eor.w	r3, r3, #1
    33b4:	b2db      	uxtb	r3, r3
    33b6:	2b00      	cmp	r3, #0
    33b8:	d1e5      	bne.n	3386 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    33ba:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33be:	2b00      	cmp	r3, #0
    33c0:	d005      	beq.n	33ce <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    33c2:	9b01      	ldr	r3, [sp, #4]
    33c4:	681b      	ldr	r3, [r3, #0]
    33c6:	4619      	mov	r1, r3
    33c8:	2001      	movs	r0, #1
    33ca:	f7fe fe9d 	bl	2108 <Clock_Ip_ReportClockErrors>
        }
    }
}
    33ce:	bf00      	nop
    33d0:	b009      	add	sp, #36	; 0x24
    33d2:	f85d fb04 	ldr.w	pc, [sp], #4
    33d6:	bf00      	nop
    33d8:	40064000 	.word	0x40064000

000033dc <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    33dc:	b082      	sub	sp, #8
    33de:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    33e0:	4b05      	ldr	r3, [pc, #20]	; (33f8 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    33e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    33e6:	4a04      	ldr	r2, [pc, #16]	; (33f8 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    33e8:	f023 0301 	bic.w	r3, r3, #1
    33ec:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    33f0:	bf00      	nop
    33f2:	b002      	add	sp, #8
    33f4:	4770      	bx	lr
    33f6:	bf00      	nop
    33f8:	40064000 	.word	0x40064000

000033fc <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    33fc:	b082      	sub	sp, #8
    33fe:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3400:	bf00      	nop
    3402:	b002      	add	sp, #8
    3404:	4770      	bx	lr

00003406 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3406:	b082      	sub	sp, #8
    3408:	9001      	str	r0, [sp, #4]
    340a:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    340c:	bf00      	nop
    340e:	b002      	add	sp, #8
    3410:	4770      	bx	lr

00003412 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3412:	b082      	sub	sp, #8
    3414:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3416:	bf00      	nop
    3418:	b002      	add	sp, #8
    341a:	4770      	bx	lr

0000341c <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    341c:	b082      	sub	sp, #8
    341e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3420:	bf00      	nop
    3422:	b002      	add	sp, #8
    3424:	4770      	bx	lr

00003426 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3426:	b082      	sub	sp, #8
    3428:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    342a:	2302      	movs	r3, #2
}
    342c:	4618      	mov	r0, r3
    342e:	b002      	add	sp, #8
    3430:	4770      	bx	lr

00003432 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3432:	b082      	sub	sp, #8
    3434:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3436:	bf00      	nop
    3438:	b002      	add	sp, #8
    343a:	4770      	bx	lr

0000343c <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    343c:	b500      	push	{lr}
    343e:	b083      	sub	sp, #12
    3440:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3442:	9b01      	ldr	r3, [sp, #4]
    3444:	2b00      	cmp	r3, #0
    3446:	d002      	beq.n	344e <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3448:	9801      	ldr	r0, [sp, #4]
    344a:	f000 f870 	bl	352e <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    344e:	bf00      	nop
    3450:	b003      	add	sp, #12
    3452:	f85d fb04 	ldr.w	pc, [sp], #4

00003456 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3456:	b500      	push	{lr}
    3458:	b083      	sub	sp, #12
    345a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    345c:	9b01      	ldr	r3, [sp, #4]
    345e:	2b00      	cmp	r3, #0
    3460:	d002      	beq.n	3468 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3462:	9801      	ldr	r0, [sp, #4]
    3464:	f000 f89a 	bl	359c <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3468:	bf00      	nop
    346a:	b003      	add	sp, #12
    346c:	f85d fb04 	ldr.w	pc, [sp], #4

00003470 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3470:	b500      	push	{lr}
    3472:	b089      	sub	sp, #36	; 0x24
    3474:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3476:	2301      	movs	r3, #1
    3478:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    347a:	2300      	movs	r3, #0
    347c:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3480:	4b1e      	ldr	r3, [pc, #120]	; (34fc <Clock_Ip_CompleteSpll+0x8c>)
    3482:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3486:	f003 0301 	and.w	r3, r3, #1
    348a:	2b00      	cmp	r3, #0
    348c:	d02f      	beq.n	34ee <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    348e:	aa02      	add	r2, sp, #8
    3490:	a903      	add	r1, sp, #12
    3492:	a804      	add	r0, sp, #16
    3494:	f24c 3350 	movw	r3, #50000	; 0xc350
    3498:	f7fe fe46 	bl	2128 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    349c:	4b17      	ldr	r3, [pc, #92]	; (34fc <Clock_Ip_CompleteSpll+0x8c>)
    349e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    34a2:	0e1b      	lsrs	r3, r3, #24
    34a4:	f003 0301 	and.w	r3, r3, #1
    34a8:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    34aa:	9a02      	ldr	r2, [sp, #8]
    34ac:	a903      	add	r1, sp, #12
    34ae:	ab04      	add	r3, sp, #16
    34b0:	4618      	mov	r0, r3
    34b2:	f7fe fe53 	bl	215c <Clock_Ip_TimeoutExpired>
    34b6:	4603      	mov	r3, r0
    34b8:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    34bc:	9b05      	ldr	r3, [sp, #20]
    34be:	2b00      	cmp	r3, #0
    34c0:	d106      	bne.n	34d0 <Clock_Ip_CompleteSpll+0x60>
    34c2:	f89d 301b 	ldrb.w	r3, [sp, #27]
    34c6:	f083 0301 	eor.w	r3, r3, #1
    34ca:	b2db      	uxtb	r3, r3
    34cc:	2b00      	cmp	r3, #0
    34ce:	d1e5      	bne.n	349c <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    34d0:	f89d 301b 	ldrb.w	r3, [sp, #27]
    34d4:	f083 0301 	eor.w	r3, r3, #1
    34d8:	b2db      	uxtb	r3, r3
    34da:	2b00      	cmp	r3, #0
    34dc:	d002      	beq.n	34e4 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    34de:	2302      	movs	r3, #2
    34e0:	9307      	str	r3, [sp, #28]
    34e2:	e006      	b.n	34f2 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    34e4:	9901      	ldr	r1, [sp, #4]
    34e6:	2001      	movs	r0, #1
    34e8:	f7fe fe0e 	bl	2108 <Clock_Ip_ReportClockErrors>
    34ec:	e001      	b.n	34f2 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    34ee:	2300      	movs	r3, #0
    34f0:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    34f2:	9b07      	ldr	r3, [sp, #28]
}
    34f4:	4618      	mov	r0, r3
    34f6:	b009      	add	sp, #36	; 0x24
    34f8:	f85d fb04 	ldr.w	pc, [sp], #4
    34fc:	40064000 	.word	0x40064000

00003500 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3500:	b500      	push	{lr}
    3502:	b083      	sub	sp, #12
    3504:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3506:	9801      	ldr	r0, [sp, #4]
    3508:	f000 f886 	bl	3618 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    350c:	bf00      	nop
    350e:	b003      	add	sp, #12
    3510:	f85d fb04 	ldr.w	pc, [sp], #4

00003514 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3514:	b500      	push	{lr}
    3516:	b083      	sub	sp, #12
    3518:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    351a:	9b01      	ldr	r3, [sp, #4]
    351c:	2b00      	cmp	r3, #0
    351e:	d002      	beq.n	3526 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3520:	9801      	ldr	r0, [sp, #4]
    3522:	f000 f891 	bl	3648 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3526:	bf00      	nop
    3528:	b003      	add	sp, #12
    352a:	f85d fb04 	ldr.w	pc, [sp], #4

0000352e <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    352e:	b082      	sub	sp, #8
    3530:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3532:	4b19      	ldr	r3, [pc, #100]	; (3598 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3534:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3538:	4a17      	ldr	r2, [pc, #92]	; (3598 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    353a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    353e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    3542:	4b15      	ldr	r3, [pc, #84]	; (3598 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3544:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3548:	4a13      	ldr	r2, [pc, #76]	; (3598 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    354a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    354e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    3552:	4b11      	ldr	r3, [pc, #68]	; (3598 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3554:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3558:	4a0f      	ldr	r2, [pc, #60]	; (3598 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    355a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    355e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3562:	4b0d      	ldr	r3, [pc, #52]	; (3598 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3564:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3568:	4a0b      	ldr	r2, [pc, #44]	; (3598 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    356a:	f023 0301 	bic.w	r3, r3, #1
    356e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    3572:	4b09      	ldr	r3, [pc, #36]	; (3598 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3574:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3578:	4a07      	ldr	r2, [pc, #28]	; (3598 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    357a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    357e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    3582:	4b05      	ldr	r3, [pc, #20]	; (3598 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3584:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3588:	4a03      	ldr	r2, [pc, #12]	; (3598 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    358a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    358e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    3592:	bf00      	nop
    3594:	b002      	add	sp, #8
    3596:	4770      	bx	lr
    3598:	40064000 	.word	0x40064000

0000359c <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    359c:	b082      	sub	sp, #8
    359e:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    35a0:	9b01      	ldr	r3, [sp, #4]
    35a2:	889b      	ldrh	r3, [r3, #4]
    35a4:	2b01      	cmp	r3, #1
    35a6:	d12f      	bne.n	3608 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    35a8:	4b1a      	ldr	r3, [pc, #104]	; (3614 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    35aa:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    35ae:	9b01      	ldr	r3, [sp, #4]
    35b0:	7b5b      	ldrb	r3, [r3, #13]
    35b2:	3b01      	subs	r3, #1
    35b4:	021b      	lsls	r3, r3, #8
    35b6:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    35ba:	9b01      	ldr	r3, [sp, #4]
    35bc:	7d1b      	ldrb	r3, [r3, #20]
    35be:	3b10      	subs	r3, #16
    35c0:	041b      	lsls	r3, r3, #16
    35c2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    35c6:	430b      	orrs	r3, r1
    35c8:	4912      	ldr	r1, [pc, #72]	; (3614 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    35ca:	4313      	orrs	r3, r2
    35cc:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    35d0:	9b01      	ldr	r3, [sp, #4]
    35d2:	7fdb      	ldrb	r3, [r3, #31]
    35d4:	2b02      	cmp	r3, #2
    35d6:	d011      	beq.n	35fc <Clock_Ip_SetSpll_TrustedCall+0x60>
    35d8:	2b02      	cmp	r3, #2
    35da:	dc17      	bgt.n	360c <Clock_Ip_SetSpll_TrustedCall+0x70>
    35dc:	2b00      	cmp	r3, #0
    35de:	d002      	beq.n	35e6 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    35e0:	2b01      	cmp	r3, #1
    35e2:	d005      	beq.n	35f0 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    35e4:	e012      	b.n	360c <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    35e6:	4b0b      	ldr	r3, [pc, #44]	; (3614 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    35e8:	2200      	movs	r2, #0
    35ea:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    35ee:	e00e      	b.n	360e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    35f0:	4b08      	ldr	r3, [pc, #32]	; (3614 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    35f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    35f6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    35fa:	e008      	b.n	360e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    35fc:	4b05      	ldr	r3, [pc, #20]	; (3614 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    35fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    3602:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3606:	e002      	b.n	360e <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    3608:	bf00      	nop
    360a:	e000      	b.n	360e <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    360c:	bf00      	nop
}
    360e:	bf00      	nop
    3610:	b002      	add	sp, #8
    3612:	4770      	bx	lr
    3614:	40064000 	.word	0x40064000

00003618 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    3618:	b082      	sub	sp, #8
    361a:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    361c:	4b09      	ldr	r3, [pc, #36]	; (3644 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    361e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3622:	4a08      	ldr	r2, [pc, #32]	; (3644 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3624:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3628:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    362c:	4b05      	ldr	r3, [pc, #20]	; (3644 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    362e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3632:	4a04      	ldr	r2, [pc, #16]	; (3644 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3634:	f023 0301 	bic.w	r3, r3, #1
    3638:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    363c:	bf00      	nop
    363e:	b002      	add	sp, #8
    3640:	4770      	bx	lr
    3642:	bf00      	nop
    3644:	40064000 	.word	0x40064000

00003648 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3648:	b082      	sub	sp, #8
    364a:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    364c:	9b01      	ldr	r3, [sp, #4]
    364e:	889b      	ldrh	r3, [r3, #4]
    3650:	2b01      	cmp	r3, #1
    3652:	d107      	bne.n	3664 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    3654:	4b05      	ldr	r3, [pc, #20]	; (366c <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3656:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    365a:	4a04      	ldr	r2, [pc, #16]	; (366c <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    365c:	f043 0301 	orr.w	r3, r3, #1
    3660:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    3664:	bf00      	nop
    3666:	b002      	add	sp, #8
    3668:	4770      	bx	lr
    366a:	bf00      	nop
    366c:	40064000 	.word	0x40064000

00003670 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    3670:	b082      	sub	sp, #8
    3672:	9001      	str	r0, [sp, #4]
    3674:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3676:	bf00      	nop
    3678:	b002      	add	sp, #8
    367a:	4770      	bx	lr

0000367c <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    367c:	b082      	sub	sp, #8
    367e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3680:	bf00      	nop
    3682:	b002      	add	sp, #8
    3684:	4770      	bx	lr

00003686 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3686:	b500      	push	{lr}
    3688:	b083      	sub	sp, #12
    368a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    368c:	9b01      	ldr	r3, [sp, #4]
    368e:	2b00      	cmp	r3, #0
    3690:	d002      	beq.n	3698 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    3692:	9801      	ldr	r0, [sp, #4]
    3694:	f000 f8ee 	bl	3874 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3698:	bf00      	nop
    369a:	b003      	add	sp, #12
    369c:	f85d fb04 	ldr.w	pc, [sp], #4

000036a0 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    36a0:	b500      	push	{lr}
    36a2:	b083      	sub	sp, #12
    36a4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36a6:	9b01      	ldr	r3, [sp, #4]
    36a8:	2b00      	cmp	r3, #0
    36aa:	d002      	beq.n	36b2 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    36ac:	9801      	ldr	r0, [sp, #4]
    36ae:	f000 f8ff 	bl	38b0 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36b2:	bf00      	nop
    36b4:	b003      	add	sp, #12
    36b6:	f85d fb04 	ldr.w	pc, [sp], #4

000036ba <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    36ba:	b500      	push	{lr}
    36bc:	b083      	sub	sp, #12
    36be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36c0:	9b01      	ldr	r3, [sp, #4]
    36c2:	2b00      	cmp	r3, #0
    36c4:	d002      	beq.n	36cc <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    36c6:	9801      	ldr	r0, [sp, #4]
    36c8:	f000 f912 	bl	38f0 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36cc:	bf00      	nop
    36ce:	b003      	add	sp, #12
    36d0:	f85d fb04 	ldr.w	pc, [sp], #4

000036d4 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    36d4:	b500      	push	{lr}
    36d6:	b083      	sub	sp, #12
    36d8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36da:	9b01      	ldr	r3, [sp, #4]
    36dc:	2b00      	cmp	r3, #0
    36de:	d002      	beq.n	36e6 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    36e0:	9801      	ldr	r0, [sp, #4]
    36e2:	f000 f925 	bl	3930 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36e6:	bf00      	nop
    36e8:	b003      	add	sp, #12
    36ea:	f85d fb04 	ldr.w	pc, [sp], #4

000036ee <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    36ee:	b500      	push	{lr}
    36f0:	b083      	sub	sp, #12
    36f2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36f4:	9b01      	ldr	r3, [sp, #4]
    36f6:	2b00      	cmp	r3, #0
    36f8:	d002      	beq.n	3700 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    36fa:	9801      	ldr	r0, [sp, #4]
    36fc:	f000 f936 	bl	396c <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3700:	bf00      	nop
    3702:	b003      	add	sp, #12
    3704:	f85d fb04 	ldr.w	pc, [sp], #4

00003708 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3708:	b500      	push	{lr}
    370a:	b083      	sub	sp, #12
    370c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    370e:	9b01      	ldr	r3, [sp, #4]
    3710:	2b00      	cmp	r3, #0
    3712:	d002      	beq.n	371a <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    3714:	9801      	ldr	r0, [sp, #4]
    3716:	f000 f949 	bl	39ac <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    371a:	bf00      	nop
    371c:	b003      	add	sp, #12
    371e:	f85d fb04 	ldr.w	pc, [sp], #4

00003722 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3722:	b500      	push	{lr}
    3724:	b083      	sub	sp, #12
    3726:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3728:	9b01      	ldr	r3, [sp, #4]
    372a:	2b00      	cmp	r3, #0
    372c:	d002      	beq.n	3734 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    372e:	9801      	ldr	r0, [sp, #4]
    3730:	f000 f958 	bl	39e4 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3734:	bf00      	nop
    3736:	b003      	add	sp, #12
    3738:	f85d fb04 	ldr.w	pc, [sp], #4

0000373c <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    373c:	b500      	push	{lr}
    373e:	b083      	sub	sp, #12
    3740:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3742:	9b01      	ldr	r3, [sp, #4]
    3744:	2b00      	cmp	r3, #0
    3746:	d002      	beq.n	374e <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    3748:	9801      	ldr	r0, [sp, #4]
    374a:	f000 f969 	bl	3a20 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    374e:	bf00      	nop
    3750:	b003      	add	sp, #12
    3752:	f85d fb04 	ldr.w	pc, [sp], #4

00003756 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3756:	b500      	push	{lr}
    3758:	b083      	sub	sp, #12
    375a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    375c:	9b01      	ldr	r3, [sp, #4]
    375e:	2b00      	cmp	r3, #0
    3760:	d002      	beq.n	3768 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    3762:	9801      	ldr	r0, [sp, #4]
    3764:	f000 f978 	bl	3a58 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3768:	bf00      	nop
    376a:	b003      	add	sp, #12
    376c:	f85d fb04 	ldr.w	pc, [sp], #4

00003770 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3770:	b500      	push	{lr}
    3772:	b083      	sub	sp, #12
    3774:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3776:	9b01      	ldr	r3, [sp, #4]
    3778:	2b00      	cmp	r3, #0
    377a:	d002      	beq.n	3782 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    377c:	9801      	ldr	r0, [sp, #4]
    377e:	f000 f989 	bl	3a94 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3782:	bf00      	nop
    3784:	b003      	add	sp, #12
    3786:	f85d fb04 	ldr.w	pc, [sp], #4

0000378a <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    378a:	b500      	push	{lr}
    378c:	b083      	sub	sp, #12
    378e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3790:	9b01      	ldr	r3, [sp, #4]
    3792:	2b00      	cmp	r3, #0
    3794:	d002      	beq.n	379c <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    3796:	9801      	ldr	r0, [sp, #4]
    3798:	f000 f998 	bl	3acc <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    379c:	bf00      	nop
    379e:	b003      	add	sp, #12
    37a0:	f85d fb04 	ldr.w	pc, [sp], #4

000037a4 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    37a4:	b500      	push	{lr}
    37a6:	b083      	sub	sp, #12
    37a8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37aa:	9b01      	ldr	r3, [sp, #4]
    37ac:	2b00      	cmp	r3, #0
    37ae:	d002      	beq.n	37b6 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    37b0:	9801      	ldr	r0, [sp, #4]
    37b2:	f000 f9a9 	bl	3b08 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37b6:	bf00      	nop
    37b8:	b003      	add	sp, #12
    37ba:	f85d fb04 	ldr.w	pc, [sp], #4

000037be <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    37be:	b500      	push	{lr}
    37c0:	b083      	sub	sp, #12
    37c2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37c4:	9b01      	ldr	r3, [sp, #4]
    37c6:	2b00      	cmp	r3, #0
    37c8:	d002      	beq.n	37d0 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    37ca:	9801      	ldr	r0, [sp, #4]
    37cc:	f000 f9e6 	bl	3b9c <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37d0:	bf00      	nop
    37d2:	b003      	add	sp, #12
    37d4:	f85d fb04 	ldr.w	pc, [sp], #4

000037d8 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    37d8:	b500      	push	{lr}
    37da:	b083      	sub	sp, #12
    37dc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37de:	9b01      	ldr	r3, [sp, #4]
    37e0:	2b00      	cmp	r3, #0
    37e2:	d002      	beq.n	37ea <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    37e4:	9801      	ldr	r0, [sp, #4]
    37e6:	f000 fa25 	bl	3c34 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37ea:	bf00      	nop
    37ec:	b003      	add	sp, #12
    37ee:	f85d fb04 	ldr.w	pc, [sp], #4

000037f2 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    37f2:	b500      	push	{lr}
    37f4:	b083      	sub	sp, #12
    37f6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37f8:	9b01      	ldr	r3, [sp, #4]
    37fa:	2b00      	cmp	r3, #0
    37fc:	d002      	beq.n	3804 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    37fe:	9801      	ldr	r0, [sp, #4]
    3800:	f000 fa2a 	bl	3c58 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3804:	bf00      	nop
    3806:	b003      	add	sp, #12
    3808:	f85d fb04 	ldr.w	pc, [sp], #4

0000380c <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    380c:	b500      	push	{lr}
    380e:	b083      	sub	sp, #12
    3810:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3812:	9b01      	ldr	r3, [sp, #4]
    3814:	2b00      	cmp	r3, #0
    3816:	d002      	beq.n	381e <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    3818:	9801      	ldr	r0, [sp, #4]
    381a:	f000 fa3b 	bl	3c94 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    381e:	bf00      	nop
    3820:	b003      	add	sp, #12
    3822:	f85d fb04 	ldr.w	pc, [sp], #4

00003826 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3826:	b500      	push	{lr}
    3828:	b083      	sub	sp, #12
    382a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    382c:	9b01      	ldr	r3, [sp, #4]
    382e:	2b00      	cmp	r3, #0
    3830:	d002      	beq.n	3838 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    3832:	9801      	ldr	r0, [sp, #4]
    3834:	f000 fa56 	bl	3ce4 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3838:	bf00      	nop
    383a:	b003      	add	sp, #12
    383c:	f85d fb04 	ldr.w	pc, [sp], #4

00003840 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3840:	b500      	push	{lr}
    3842:	b083      	sub	sp, #12
    3844:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3846:	9b01      	ldr	r3, [sp, #4]
    3848:	2b00      	cmp	r3, #0
    384a:	d002      	beq.n	3852 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    384c:	9801      	ldr	r0, [sp, #4]
    384e:	f000 fa79 	bl	3d44 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3852:	bf00      	nop
    3854:	b003      	add	sp, #12
    3856:	f85d fb04 	ldr.w	pc, [sp], #4

0000385a <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    385a:	b500      	push	{lr}
    385c:	b083      	sub	sp, #12
    385e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3860:	9b01      	ldr	r3, [sp, #4]
    3862:	2b00      	cmp	r3, #0
    3864:	d002      	beq.n	386c <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    3866:	9801      	ldr	r0, [sp, #4]
    3868:	f000 fa8a 	bl	3d80 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    386c:	bf00      	nop
    386e:	b003      	add	sp, #12
    3870:	f85d fb04 	ldr.w	pc, [sp], #4

00003874 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3874:	b084      	sub	sp, #16
    3876:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3878:	4b0b      	ldr	r3, [pc, #44]	; (38a8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    387a:	795b      	ldrb	r3, [r3, #5]
    387c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    387e:	4b0b      	ldr	r3, [pc, #44]	; (38ac <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    3880:	695b      	ldr	r3, [r3, #20]
    3882:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3884:	9b02      	ldr	r3, [sp, #8]
    3886:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    388a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    388c:	9b03      	ldr	r3, [sp, #12]
    388e:	061b      	lsls	r3, r3, #24
    3890:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3894:	9a02      	ldr	r2, [sp, #8]
    3896:	4313      	orrs	r3, r2
    3898:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    389a:	4a04      	ldr	r2, [pc, #16]	; (38ac <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    389c:	9b02      	ldr	r3, [sp, #8]
    389e:	6153      	str	r3, [r2, #20]
}
    38a0:	bf00      	nop
    38a2:	b004      	add	sp, #16
    38a4:	4770      	bx	lr
    38a6:	bf00      	nop
    38a8:	0000bb60 	.word	0x0000bb60
    38ac:	40064000 	.word	0x40064000

000038b0 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    38b0:	b084      	sub	sp, #16
    38b2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    38b4:	9b01      	ldr	r3, [sp, #4]
    38b6:	685b      	ldr	r3, [r3, #4]
    38b8:	4a0b      	ldr	r2, [pc, #44]	; (38e8 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    38ba:	5cd3      	ldrb	r3, [r2, r3]
    38bc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    38be:	4b0b      	ldr	r3, [pc, #44]	; (38ec <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    38c0:	695b      	ldr	r3, [r3, #20]
    38c2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    38c4:	9b02      	ldr	r3, [sp, #8]
    38c6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    38ca:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    38cc:	9b03      	ldr	r3, [sp, #12]
    38ce:	061b      	lsls	r3, r3, #24
    38d0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    38d4:	9a02      	ldr	r2, [sp, #8]
    38d6:	4313      	orrs	r3, r2
    38d8:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    38da:	4a04      	ldr	r2, [pc, #16]	; (38ec <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    38dc:	9b02      	ldr	r3, [sp, #8]
    38de:	6153      	str	r3, [r2, #20]
}
    38e0:	bf00      	nop
    38e2:	b004      	add	sp, #16
    38e4:	4770      	bx	lr
    38e6:	bf00      	nop
    38e8:	0000bb60 	.word	0x0000bb60
    38ec:	40064000 	.word	0x40064000

000038f0 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    38f0:	b084      	sub	sp, #16
    38f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    38f4:	9b01      	ldr	r3, [sp, #4]
    38f6:	685b      	ldr	r3, [r3, #4]
    38f8:	4a0b      	ldr	r2, [pc, #44]	; (3928 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    38fa:	5cd3      	ldrb	r3, [r2, r3]
    38fc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    38fe:	4b0b      	ldr	r3, [pc, #44]	; (392c <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3900:	699b      	ldr	r3, [r3, #24]
    3902:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    3904:	9b02      	ldr	r3, [sp, #8]
    3906:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    390a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    390c:	9b03      	ldr	r3, [sp, #12]
    390e:	061b      	lsls	r3, r3, #24
    3910:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3914:	9a02      	ldr	r2, [sp, #8]
    3916:	4313      	orrs	r3, r2
    3918:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    391a:	4a04      	ldr	r2, [pc, #16]	; (392c <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    391c:	9b02      	ldr	r3, [sp, #8]
    391e:	6193      	str	r3, [r2, #24]
}
    3920:	bf00      	nop
    3922:	b004      	add	sp, #16
    3924:	4770      	bx	lr
    3926:	bf00      	nop
    3928:	0000bb60 	.word	0x0000bb60
    392c:	40064000 	.word	0x40064000

00003930 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3930:	b084      	sub	sp, #16
    3932:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3934:	4b0b      	ldr	r3, [pc, #44]	; (3964 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    3936:	795b      	ldrb	r3, [r3, #5]
    3938:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    393a:	4b0b      	ldr	r3, [pc, #44]	; (3968 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    393c:	69db      	ldr	r3, [r3, #28]
    393e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3940:	9b02      	ldr	r3, [sp, #8]
    3942:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3946:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3948:	9b03      	ldr	r3, [sp, #12]
    394a:	061b      	lsls	r3, r3, #24
    394c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3950:	9a02      	ldr	r2, [sp, #8]
    3952:	4313      	orrs	r3, r2
    3954:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3956:	4a04      	ldr	r2, [pc, #16]	; (3968 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3958:	9b02      	ldr	r3, [sp, #8]
    395a:	61d3      	str	r3, [r2, #28]
}
    395c:	bf00      	nop
    395e:	b004      	add	sp, #16
    3960:	4770      	bx	lr
    3962:	bf00      	nop
    3964:	0000bb60 	.word	0x0000bb60
    3968:	40064000 	.word	0x40064000

0000396c <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    396c:	b084      	sub	sp, #16
    396e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3970:	9b01      	ldr	r3, [sp, #4]
    3972:	685b      	ldr	r3, [r3, #4]
    3974:	4a0b      	ldr	r2, [pc, #44]	; (39a4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    3976:	5cd3      	ldrb	r3, [r2, r3]
    3978:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    397a:	4b0b      	ldr	r3, [pc, #44]	; (39a8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    397c:	69db      	ldr	r3, [r3, #28]
    397e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3980:	9b02      	ldr	r3, [sp, #8]
    3982:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3986:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3988:	9b03      	ldr	r3, [sp, #12]
    398a:	061b      	lsls	r3, r3, #24
    398c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3990:	9a02      	ldr	r2, [sp, #8]
    3992:	4313      	orrs	r3, r2
    3994:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3996:	4a04      	ldr	r2, [pc, #16]	; (39a8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3998:	9b02      	ldr	r3, [sp, #8]
    399a:	61d3      	str	r3, [r2, #28]
}
    399c:	bf00      	nop
    399e:	b004      	add	sp, #16
    39a0:	4770      	bx	lr
    39a2:	bf00      	nop
    39a4:	0000bb60 	.word	0x0000bb60
    39a8:	40064000 	.word	0x40064000

000039ac <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    39ac:	b084      	sub	sp, #16
    39ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    39b0:	4b0a      	ldr	r3, [pc, #40]	; (39dc <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    39b2:	7b9b      	ldrb	r3, [r3, #14]
    39b4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    39b6:	4b0a      	ldr	r3, [pc, #40]	; (39e0 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    39b8:	691b      	ldr	r3, [r3, #16]
    39ba:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    39bc:	9b02      	ldr	r3, [sp, #8]
    39be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    39c2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    39c4:	9b03      	ldr	r3, [sp, #12]
    39c6:	011b      	lsls	r3, r3, #4
    39c8:	9a02      	ldr	r2, [sp, #8]
    39ca:	4313      	orrs	r3, r2
    39cc:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    39ce:	4a04      	ldr	r2, [pc, #16]	; (39e0 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    39d0:	9b02      	ldr	r3, [sp, #8]
    39d2:	6113      	str	r3, [r2, #16]
}
    39d4:	bf00      	nop
    39d6:	b004      	add	sp, #16
    39d8:	4770      	bx	lr
    39da:	bf00      	nop
    39dc:	0000bb08 	.word	0x0000bb08
    39e0:	40048000 	.word	0x40048000

000039e4 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    39e4:	b084      	sub	sp, #16
    39e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    39e8:	9b01      	ldr	r3, [sp, #4]
    39ea:	685b      	ldr	r3, [r3, #4]
    39ec:	4a0a      	ldr	r2, [pc, #40]	; (3a18 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    39ee:	5cd3      	ldrb	r3, [r2, r3]
    39f0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    39f2:	4b0a      	ldr	r3, [pc, #40]	; (3a1c <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    39f4:	691b      	ldr	r3, [r3, #16]
    39f6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    39f8:	9b02      	ldr	r3, [sp, #8]
    39fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    39fe:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3a00:	9b03      	ldr	r3, [sp, #12]
    3a02:	011b      	lsls	r3, r3, #4
    3a04:	9a02      	ldr	r2, [sp, #8]
    3a06:	4313      	orrs	r3, r2
    3a08:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a0a:	4a04      	ldr	r2, [pc, #16]	; (3a1c <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3a0c:	9b02      	ldr	r3, [sp, #8]
    3a0e:	6113      	str	r3, [r2, #16]
}
    3a10:	bf00      	nop
    3a12:	b004      	add	sp, #16
    3a14:	4770      	bx	lr
    3a16:	bf00      	nop
    3a18:	0000bb08 	.word	0x0000bb08
    3a1c:	40048000 	.word	0x40048000

00003a20 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a20:	b084      	sub	sp, #16
    3a22:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a24:	4b0a      	ldr	r3, [pc, #40]	; (3a50 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    3a26:	785b      	ldrb	r3, [r3, #1]
    3a28:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3a2a:	4b0a      	ldr	r3, [pc, #40]	; (3a54 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3a2c:	691b      	ldr	r3, [r3, #16]
    3a2e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3a30:	9b02      	ldr	r3, [sp, #8]
    3a32:	f023 030c 	bic.w	r3, r3, #12
    3a36:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3a38:	9b03      	ldr	r3, [sp, #12]
    3a3a:	009b      	lsls	r3, r3, #2
    3a3c:	9a02      	ldr	r2, [sp, #8]
    3a3e:	4313      	orrs	r3, r2
    3a40:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a42:	4a04      	ldr	r2, [pc, #16]	; (3a54 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3a44:	9b02      	ldr	r3, [sp, #8]
    3a46:	6113      	str	r3, [r2, #16]
}
    3a48:	bf00      	nop
    3a4a:	b004      	add	sp, #16
    3a4c:	4770      	bx	lr
    3a4e:	bf00      	nop
    3a50:	0000bbc0 	.word	0x0000bbc0
    3a54:	40048000 	.word	0x40048000

00003a58 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a58:	b084      	sub	sp, #16
    3a5a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a5c:	9b01      	ldr	r3, [sp, #4]
    3a5e:	685b      	ldr	r3, [r3, #4]
    3a60:	4a0a      	ldr	r2, [pc, #40]	; (3a8c <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    3a62:	5cd3      	ldrb	r3, [r2, r3]
    3a64:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3a66:	4b0a      	ldr	r3, [pc, #40]	; (3a90 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3a68:	691b      	ldr	r3, [r3, #16]
    3a6a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3a6c:	9b02      	ldr	r3, [sp, #8]
    3a6e:	f023 030c 	bic.w	r3, r3, #12
    3a72:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3a74:	9b03      	ldr	r3, [sp, #12]
    3a76:	009b      	lsls	r3, r3, #2
    3a78:	9a02      	ldr	r2, [sp, #8]
    3a7a:	4313      	orrs	r3, r2
    3a7c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a7e:	4a04      	ldr	r2, [pc, #16]	; (3a90 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3a80:	9b02      	ldr	r3, [sp, #8]
    3a82:	6113      	str	r3, [r2, #16]
}
    3a84:	bf00      	nop
    3a86:	b004      	add	sp, #16
    3a88:	4770      	bx	lr
    3a8a:	bf00      	nop
    3a8c:	0000bbc0 	.word	0x0000bbc0
    3a90:	40048000 	.word	0x40048000

00003a94 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a94:	b084      	sub	sp, #16
    3a96:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a98:	4b0a      	ldr	r3, [pc, #40]	; (3ac4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    3a9a:	795b      	ldrb	r3, [r3, #5]
    3a9c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    3a9e:	4b0a      	ldr	r3, [pc, #40]	; (3ac8 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3aa0:	6a1b      	ldr	r3, [r3, #32]
    3aa2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3aa4:	9b02      	ldr	r3, [sp, #8]
    3aa6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3aaa:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3aac:	9b03      	ldr	r3, [sp, #12]
    3aae:	061b      	lsls	r3, r3, #24
    3ab0:	9a02      	ldr	r2, [sp, #8]
    3ab2:	4313      	orrs	r3, r2
    3ab4:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3ab6:	4a04      	ldr	r2, [pc, #16]	; (3ac8 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3ab8:	9b02      	ldr	r3, [sp, #8]
    3aba:	6213      	str	r3, [r2, #32]
}
    3abc:	bf00      	nop
    3abe:	b004      	add	sp, #16
    3ac0:	4770      	bx	lr
    3ac2:	bf00      	nop
    3ac4:	0000bb60 	.word	0x0000bb60
    3ac8:	40064000 	.word	0x40064000

00003acc <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3acc:	b084      	sub	sp, #16
    3ace:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ad0:	9b01      	ldr	r3, [sp, #4]
    3ad2:	685b      	ldr	r3, [r3, #4]
    3ad4:	4a0a      	ldr	r2, [pc, #40]	; (3b00 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    3ad6:	5cd3      	ldrb	r3, [r2, r3]
    3ad8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    3ada:	4b0a      	ldr	r3, [pc, #40]	; (3b04 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3adc:	6a1b      	ldr	r3, [r3, #32]
    3ade:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3ae0:	9b02      	ldr	r3, [sp, #8]
    3ae2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3ae6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3ae8:	9b03      	ldr	r3, [sp, #12]
    3aea:	061b      	lsls	r3, r3, #24
    3aec:	9a02      	ldr	r2, [sp, #8]
    3aee:	4313      	orrs	r3, r2
    3af0:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3af2:	4a04      	ldr	r2, [pc, #16]	; (3b04 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3af4:	9b02      	ldr	r3, [sp, #8]
    3af6:	6213      	str	r3, [r2, #32]
}
    3af8:	bf00      	nop
    3afa:	b004      	add	sp, #16
    3afc:	4770      	bx	lr
    3afe:	bf00      	nop
    3b00:	0000bb60 	.word	0x0000bb60
    3b04:	40064000 	.word	0x40064000

00003b08 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b08:	b086      	sub	sp, #24
    3b0a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b0c:	4b20      	ldr	r3, [pc, #128]	; (3b90 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    3b0e:	795b      	ldrb	r3, [r3, #5]
    3b10:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3b12:	9b01      	ldr	r3, [sp, #4]
    3b14:	681a      	ldr	r2, [r3, #0]
    3b16:	491f      	ldr	r1, [pc, #124]	; (3b94 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    3b18:	4613      	mov	r3, r2
    3b1a:	00db      	lsls	r3, r3, #3
    3b1c:	4413      	add	r3, r2
    3b1e:	440b      	add	r3, r1
    3b20:	781b      	ldrb	r3, [r3, #0]
    3b22:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3b24:	4b1c      	ldr	r3, [pc, #112]	; (3b98 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3b26:	68db      	ldr	r3, [r3, #12]
    3b28:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3b2a:	9b03      	ldr	r3, [sp, #12]
    3b2c:	2b03      	cmp	r3, #3
    3b2e:	d813      	bhi.n	3b58 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3b30:	9b03      	ldr	r3, [sp, #12]
    3b32:	005b      	lsls	r3, r3, #1
    3b34:	3318      	adds	r3, #24
    3b36:	2203      	movs	r2, #3
    3b38:	fa02 f303 	lsl.w	r3, r2, r3
    3b3c:	43db      	mvns	r3, r3
    3b3e:	9a05      	ldr	r2, [sp, #20]
    3b40:	4013      	ands	r3, r2
    3b42:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3b44:	9b03      	ldr	r3, [sp, #12]
    3b46:	005b      	lsls	r3, r3, #1
    3b48:	3318      	adds	r3, #24
    3b4a:	9a04      	ldr	r2, [sp, #16]
    3b4c:	fa02 f303 	lsl.w	r3, r2, r3
    3b50:	9a05      	ldr	r2, [sp, #20]
    3b52:	4313      	orrs	r3, r2
    3b54:	9305      	str	r3, [sp, #20]
    3b56:	e014      	b.n	3b82 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3b58:	9b03      	ldr	r3, [sp, #12]
    3b5a:	3b04      	subs	r3, #4
    3b5c:	005b      	lsls	r3, r3, #1
    3b5e:	3310      	adds	r3, #16
    3b60:	2203      	movs	r2, #3
    3b62:	fa02 f303 	lsl.w	r3, r2, r3
    3b66:	43db      	mvns	r3, r3
    3b68:	9a05      	ldr	r2, [sp, #20]
    3b6a:	4013      	ands	r3, r2
    3b6c:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3b6e:	9b03      	ldr	r3, [sp, #12]
    3b70:	3b04      	subs	r3, #4
    3b72:	005b      	lsls	r3, r3, #1
    3b74:	3310      	adds	r3, #16
    3b76:	9a04      	ldr	r2, [sp, #16]
    3b78:	fa02 f303 	lsl.w	r3, r2, r3
    3b7c:	9a05      	ldr	r2, [sp, #20]
    3b7e:	4313      	orrs	r3, r2
    3b80:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3b82:	4a05      	ldr	r2, [pc, #20]	; (3b98 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3b84:	9b05      	ldr	r3, [sp, #20]
    3b86:	60d3      	str	r3, [r2, #12]
}
    3b88:	bf00      	nop
    3b8a:	b006      	add	sp, #24
    3b8c:	4770      	bx	lr
    3b8e:	bf00      	nop
    3b90:	0000bb08 	.word	0x0000bb08
    3b94:	0000b7f8 	.word	0x0000b7f8
    3b98:	40048000 	.word	0x40048000

00003b9c <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b9c:	b086      	sub	sp, #24
    3b9e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ba0:	9b01      	ldr	r3, [sp, #4]
    3ba2:	685b      	ldr	r3, [r3, #4]
    3ba4:	4a20      	ldr	r2, [pc, #128]	; (3c28 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    3ba6:	5cd3      	ldrb	r3, [r2, r3]
    3ba8:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3baa:	9b01      	ldr	r3, [sp, #4]
    3bac:	681a      	ldr	r2, [r3, #0]
    3bae:	491f      	ldr	r1, [pc, #124]	; (3c2c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    3bb0:	4613      	mov	r3, r2
    3bb2:	00db      	lsls	r3, r3, #3
    3bb4:	4413      	add	r3, r2
    3bb6:	440b      	add	r3, r1
    3bb8:	781b      	ldrb	r3, [r3, #0]
    3bba:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3bbc:	4b1c      	ldr	r3, [pc, #112]	; (3c30 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3bbe:	68db      	ldr	r3, [r3, #12]
    3bc0:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3bc2:	9b03      	ldr	r3, [sp, #12]
    3bc4:	2b03      	cmp	r3, #3
    3bc6:	d813      	bhi.n	3bf0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3bc8:	9b03      	ldr	r3, [sp, #12]
    3bca:	005b      	lsls	r3, r3, #1
    3bcc:	3318      	adds	r3, #24
    3bce:	2203      	movs	r2, #3
    3bd0:	fa02 f303 	lsl.w	r3, r2, r3
    3bd4:	43db      	mvns	r3, r3
    3bd6:	9a05      	ldr	r2, [sp, #20]
    3bd8:	4013      	ands	r3, r2
    3bda:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3bdc:	9b03      	ldr	r3, [sp, #12]
    3bde:	005b      	lsls	r3, r3, #1
    3be0:	3318      	adds	r3, #24
    3be2:	9a04      	ldr	r2, [sp, #16]
    3be4:	fa02 f303 	lsl.w	r3, r2, r3
    3be8:	9a05      	ldr	r2, [sp, #20]
    3bea:	4313      	orrs	r3, r2
    3bec:	9305      	str	r3, [sp, #20]
    3bee:	e014      	b.n	3c1a <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3bf0:	9b03      	ldr	r3, [sp, #12]
    3bf2:	3b04      	subs	r3, #4
    3bf4:	005b      	lsls	r3, r3, #1
    3bf6:	3310      	adds	r3, #16
    3bf8:	2203      	movs	r2, #3
    3bfa:	fa02 f303 	lsl.w	r3, r2, r3
    3bfe:	43db      	mvns	r3, r3
    3c00:	9a05      	ldr	r2, [sp, #20]
    3c02:	4013      	ands	r3, r2
    3c04:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3c06:	9b03      	ldr	r3, [sp, #12]
    3c08:	3b04      	subs	r3, #4
    3c0a:	005b      	lsls	r3, r3, #1
    3c0c:	3310      	adds	r3, #16
    3c0e:	9a04      	ldr	r2, [sp, #16]
    3c10:	fa02 f303 	lsl.w	r3, r2, r3
    3c14:	9a05      	ldr	r2, [sp, #20]
    3c16:	4313      	orrs	r3, r2
    3c18:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3c1a:	4a05      	ldr	r2, [pc, #20]	; (3c30 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3c1c:	9b05      	ldr	r3, [sp, #20]
    3c1e:	60d3      	str	r3, [r2, #12]
}
    3c20:	bf00      	nop
    3c22:	b006      	add	sp, #24
    3c24:	4770      	bx	lr
    3c26:	bf00      	nop
    3c28:	0000bb08 	.word	0x0000bb08
    3c2c:	0000b7f8 	.word	0x0000b7f8
    3c30:	40048000 	.word	0x40048000

00003c34 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c34:	b084      	sub	sp, #16
    3c36:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    3c38:	4b06      	ldr	r3, [pc, #24]	; (3c54 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3c3a:	685b      	ldr	r3, [r3, #4]
    3c3c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    3c3e:	9b03      	ldr	r3, [sp, #12]
    3c40:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    3c44:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3c46:	4a03      	ldr	r2, [pc, #12]	; (3c54 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3c48:	9b03      	ldr	r3, [sp, #12]
    3c4a:	6053      	str	r3, [r2, #4]
}
    3c4c:	bf00      	nop
    3c4e:	b004      	add	sp, #16
    3c50:	4770      	bx	lr
    3c52:	bf00      	nop
    3c54:	40048000 	.word	0x40048000

00003c58 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c58:	b084      	sub	sp, #16
    3c5a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3c5c:	9b01      	ldr	r3, [sp, #4]
    3c5e:	685b      	ldr	r3, [r3, #4]
    3c60:	4a0a      	ldr	r2, [pc, #40]	; (3c8c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    3c62:	5cd3      	ldrb	r3, [r2, r3]
    3c64:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    3c66:	4b0a      	ldr	r3, [pc, #40]	; (3c90 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3c68:	685b      	ldr	r3, [r3, #4]
    3c6a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    3c6c:	9b02      	ldr	r3, [sp, #8]
    3c6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3c72:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    3c74:	9b03      	ldr	r3, [sp, #12]
    3c76:	011b      	lsls	r3, r3, #4
    3c78:	9a02      	ldr	r2, [sp, #8]
    3c7a:	4313      	orrs	r3, r2
    3c7c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    3c7e:	4a04      	ldr	r2, [pc, #16]	; (3c90 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3c80:	9b02      	ldr	r3, [sp, #8]
    3c82:	6053      	str	r3, [r2, #4]
}
    3c84:	bf00      	nop
    3c86:	b004      	add	sp, #16
    3c88:	4770      	bx	lr
    3c8a:	bf00      	nop
    3c8c:	0000bb08 	.word	0x0000bb08
    3c90:	40048000 	.word	0x40048000

00003c94 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c94:	b084      	sub	sp, #16
    3c96:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3c98:	9b01      	ldr	r3, [sp, #4]
    3c9a:	681a      	ldr	r2, [r3, #0]
    3c9c:	490f      	ldr	r1, [pc, #60]	; (3cdc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    3c9e:	4613      	mov	r3, r2
    3ca0:	00db      	lsls	r3, r3, #3
    3ca2:	4413      	add	r3, r2
    3ca4:	440b      	add	r3, r1
    3ca6:	3304      	adds	r3, #4
    3ca8:	781b      	ldrb	r3, [r3, #0]
    3caa:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    3cac:	4a0c      	ldr	r2, [pc, #48]	; (3ce0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cae:	9b03      	ldr	r3, [sp, #12]
    3cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3cb4:	490a      	ldr	r1, [pc, #40]	; (3ce0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cb6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    3cba:	9b03      	ldr	r3, [sp, #12]
    3cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    3cc0:	4a07      	ldr	r2, [pc, #28]	; (3ce0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cc2:	9b03      	ldr	r3, [sp, #12]
    3cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3cc8:	4905      	ldr	r1, [pc, #20]	; (3ce0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cca:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    3cce:	9b03      	ldr	r3, [sp, #12]
    3cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3cd4:	bf00      	nop
    3cd6:	b004      	add	sp, #16
    3cd8:	4770      	bx	lr
    3cda:	bf00      	nop
    3cdc:	0000b7f8 	.word	0x0000b7f8
    3ce0:	40065000 	.word	0x40065000

00003ce4 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3ce4:	b086      	sub	sp, #24
    3ce6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3ce8:	9b01      	ldr	r3, [sp, #4]
    3cea:	681a      	ldr	r2, [r3, #0]
    3cec:	4912      	ldr	r1, [pc, #72]	; (3d38 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    3cee:	4613      	mov	r3, r2
    3cf0:	00db      	lsls	r3, r3, #3
    3cf2:	4413      	add	r3, r2
    3cf4:	440b      	add	r3, r1
    3cf6:	3304      	adds	r3, #4
    3cf8:	781b      	ldrb	r3, [r3, #0]
    3cfa:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3cfc:	9b01      	ldr	r3, [sp, #4]
    3cfe:	685b      	ldr	r3, [r3, #4]
    3d00:	4a0e      	ldr	r2, [pc, #56]	; (3d3c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    3d02:	5cd3      	ldrb	r3, [r2, r3]
    3d04:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    3d06:	4a0e      	ldr	r2, [pc, #56]	; (3d40 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3d08:	9b05      	ldr	r3, [sp, #20]
    3d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d0e:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    3d10:	9b03      	ldr	r3, [sp, #12]
    3d12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    3d16:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    3d18:	9b04      	ldr	r3, [sp, #16]
    3d1a:	061b      	lsls	r3, r3, #24
    3d1c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    3d20:	9a03      	ldr	r2, [sp, #12]
    3d22:	4313      	orrs	r3, r2
    3d24:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    3d26:	4906      	ldr	r1, [pc, #24]	; (3d40 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3d28:	9b05      	ldr	r3, [sp, #20]
    3d2a:	9a03      	ldr	r2, [sp, #12]
    3d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3d30:	bf00      	nop
    3d32:	b006      	add	sp, #24
    3d34:	4770      	bx	lr
    3d36:	bf00      	nop
    3d38:	0000b7f8 	.word	0x0000b7f8
    3d3c:	0000bb90 	.word	0x0000bb90
    3d40:	40065000 	.word	0x40065000

00003d44 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d44:	b084      	sub	sp, #16
    3d46:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d48:	4b0b      	ldr	r3, [pc, #44]	; (3d78 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    3d4a:	7f1b      	ldrb	r3, [r3, #28]
    3d4c:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    3d4e:	4b0b      	ldr	r3, [pc, #44]	; (3d7c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3d50:	685b      	ldr	r3, [r3, #4]
    3d52:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3d54:	9b02      	ldr	r3, [sp, #8]
    3d56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3d5a:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3d5c:	9b03      	ldr	r3, [sp, #12]
    3d5e:	031b      	lsls	r3, r3, #12
    3d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3d64:	9a02      	ldr	r2, [sp, #8]
    3d66:	4313      	orrs	r3, r2
    3d68:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3d6a:	4a04      	ldr	r2, [pc, #16]	; (3d7c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3d6c:	9b02      	ldr	r3, [sp, #8]
    3d6e:	6053      	str	r3, [r2, #4]
}
    3d70:	bf00      	nop
    3d72:	b004      	add	sp, #16
    3d74:	4770      	bx	lr
    3d76:	bf00      	nop
    3d78:	0000bb08 	.word	0x0000bb08
    3d7c:	40048000 	.word	0x40048000

00003d80 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d80:	b084      	sub	sp, #16
    3d82:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d84:	9b01      	ldr	r3, [sp, #4]
    3d86:	685b      	ldr	r3, [r3, #4]
    3d88:	4a0b      	ldr	r2, [pc, #44]	; (3db8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    3d8a:	5cd3      	ldrb	r3, [r2, r3]
    3d8c:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    3d8e:	4b0b      	ldr	r3, [pc, #44]	; (3dbc <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3d90:	685b      	ldr	r3, [r3, #4]
    3d92:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3d94:	9b02      	ldr	r3, [sp, #8]
    3d96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3d9a:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3d9c:	9b03      	ldr	r3, [sp, #12]
    3d9e:	031b      	lsls	r3, r3, #12
    3da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3da4:	9a02      	ldr	r2, [sp, #8]
    3da6:	4313      	orrs	r3, r2
    3da8:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3daa:	4a04      	ldr	r2, [pc, #16]	; (3dbc <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3dac:	9b02      	ldr	r3, [sp, #8]
    3dae:	6053      	str	r3, [r2, #4]
}
    3db0:	bf00      	nop
    3db2:	b004      	add	sp, #16
    3db4:	4770      	bx	lr
    3db6:	bf00      	nop
    3db8:	0000bb08 	.word	0x0000bb08
    3dbc:	40048000 	.word	0x40048000

00003dc0 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    3dc0:	b500      	push	{lr}
    3dc2:	b085      	sub	sp, #20
    3dc4:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    3dc6:	2300      	movs	r3, #0
    3dc8:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    3dcc:	9b01      	ldr	r3, [sp, #4]
    3dce:	2b00      	cmp	r3, #0
    3dd0:	d037      	beq.n	3e42 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3dd2:	2300      	movs	r3, #0
    3dd4:	9303      	str	r3, [sp, #12]
    3dd6:	e02b      	b.n	3e30 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3dd8:	4b29      	ldr	r3, [pc, #164]	; (3e80 <DisableSafeClock+0xc0>)
    3dda:	6819      	ldr	r1, [r3, #0]
    3ddc:	9a03      	ldr	r2, [sp, #12]
    3dde:	4613      	mov	r3, r2
    3de0:	005b      	lsls	r3, r3, #1
    3de2:	4413      	add	r3, r2
    3de4:	009b      	lsls	r3, r3, #2
    3de6:	440b      	add	r3, r1
    3de8:	3314      	adds	r3, #20
    3dea:	681b      	ldr	r3, [r3, #0]
    3dec:	2b05      	cmp	r3, #5
    3dee:	d11c      	bne.n	3e2a <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    3df0:	2301      	movs	r3, #1
    3df2:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    3df6:	4b22      	ldr	r3, [pc, #136]	; (3e80 <DisableSafeClock+0xc0>)
    3df8:	6819      	ldr	r1, [r3, #0]
    3dfa:	9a03      	ldr	r2, [sp, #12]
    3dfc:	4613      	mov	r3, r2
    3dfe:	005b      	lsls	r3, r3, #1
    3e00:	4413      	add	r3, r2
    3e02:	009b      	lsls	r3, r3, #2
    3e04:	440b      	add	r3, r1
    3e06:	3318      	adds	r3, #24
    3e08:	881b      	ldrh	r3, [r3, #0]
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d118      	bne.n	3e40 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3e0e:	4b1d      	ldr	r3, [pc, #116]	; (3e84 <DisableSafeClock+0xc4>)
    3e10:	791b      	ldrb	r3, [r3, #4]
    3e12:	4619      	mov	r1, r3
    3e14:	4a1c      	ldr	r2, [pc, #112]	; (3e88 <DisableSafeClock+0xc8>)
    3e16:	460b      	mov	r3, r1
    3e18:	005b      	lsls	r3, r3, #1
    3e1a:	440b      	add	r3, r1
    3e1c:	009b      	lsls	r3, r3, #2
    3e1e:	4413      	add	r3, r2
    3e20:	3308      	adds	r3, #8
    3e22:	681b      	ldr	r3, [r3, #0]
    3e24:	2005      	movs	r0, #5
    3e26:	4798      	blx	r3
                }
                break;
    3e28:	e00a      	b.n	3e40 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3e2a:	9b03      	ldr	r3, [sp, #12]
    3e2c:	3301      	adds	r3, #1
    3e2e:	9303      	str	r3, [sp, #12]
    3e30:	4b13      	ldr	r3, [pc, #76]	; (3e80 <DisableSafeClock+0xc0>)
    3e32:	681b      	ldr	r3, [r3, #0]
    3e34:	7a1b      	ldrb	r3, [r3, #8]
    3e36:	461a      	mov	r2, r3
    3e38:	9b03      	ldr	r3, [sp, #12]
    3e3a:	4293      	cmp	r3, r2
    3e3c:	d3cc      	bcc.n	3dd8 <DisableSafeClock+0x18>
    3e3e:	e000      	b.n	3e42 <DisableSafeClock+0x82>
                break;
    3e40:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    3e42:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3e46:	f083 0301 	eor.w	r3, r3, #1
    3e4a:	b2db      	uxtb	r3, r3
    3e4c:	2b00      	cmp	r3, #0
    3e4e:	d013      	beq.n	3e78 <DisableSafeClock+0xb8>
    3e50:	4b0e      	ldr	r3, [pc, #56]	; (3e8c <DisableSafeClock+0xcc>)
    3e52:	781b      	ldrb	r3, [r3, #0]
    3e54:	f083 0301 	eor.w	r3, r3, #1
    3e58:	b2db      	uxtb	r3, r3
    3e5a:	2b00      	cmp	r3, #0
    3e5c:	d00c      	beq.n	3e78 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3e5e:	4b09      	ldr	r3, [pc, #36]	; (3e84 <DisableSafeClock+0xc4>)
    3e60:	791b      	ldrb	r3, [r3, #4]
    3e62:	4619      	mov	r1, r3
    3e64:	4a08      	ldr	r2, [pc, #32]	; (3e88 <DisableSafeClock+0xc8>)
    3e66:	460b      	mov	r3, r1
    3e68:	005b      	lsls	r3, r3, #1
    3e6a:	440b      	add	r3, r1
    3e6c:	009b      	lsls	r3, r3, #2
    3e6e:	4413      	add	r3, r2
    3e70:	3308      	adds	r3, #8
    3e72:	681b      	ldr	r3, [r3, #0]
    3e74:	2005      	movs	r0, #5
    3e76:	4798      	blx	r3
    }
}
    3e78:	bf00      	nop
    3e7a:	b005      	add	sp, #20
    3e7c:	f85d fb04 	ldr.w	pc, [sp], #4
    3e80:	1fff8bc8 	.word	0x1fff8bc8
    3e84:	0000b788 	.word	0x0000b788
    3e88:	0000bdb8 	.word	0x0000bdb8
    3e8c:	1fff8b18 	.word	0x1fff8b18

00003e90 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    3e90:	4b06      	ldr	r3, [pc, #24]	; (3eac <SetFircToResetValue_TrustedCall+0x1c>)
    3e92:	2200      	movs	r2, #0
    3e94:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    3e98:	4b04      	ldr	r3, [pc, #16]	; (3eac <SetFircToResetValue_TrustedCall+0x1c>)
    3e9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e9e:	4a03      	ldr	r2, [pc, #12]	; (3eac <SetFircToResetValue_TrustedCall+0x1c>)
    3ea0:	f043 0301 	orr.w	r3, r3, #1
    3ea4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3ea8:	bf00      	nop
    3eaa:	4770      	bx	lr
    3eac:	40064000 	.word	0x40064000

00003eb0 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    3eb0:	b084      	sub	sp, #16
    3eb2:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    3eb4:	2303      	movs	r3, #3
    3eb6:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3eb8:	2300      	movs	r3, #0
    3eba:	9302      	str	r3, [sp, #8]
    3ebc:	e028      	b.n	3f10 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    3ebe:	9b01      	ldr	r3, [sp, #4]
    3ec0:	9a02      	ldr	r2, [sp, #8]
    3ec2:	320d      	adds	r2, #13
    3ec4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3ec8:	2b28      	cmp	r3, #40	; 0x28
    3eca:	d10b      	bne.n	3ee4 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3ecc:	9a01      	ldr	r2, [sp, #4]
    3ece:	9b02      	ldr	r3, [sp, #8]
    3ed0:	330d      	adds	r3, #13
    3ed2:	00db      	lsls	r3, r3, #3
    3ed4:	4413      	add	r3, r2
    3ed6:	685b      	ldr	r3, [r3, #4]
    3ed8:	4a2b      	ldr	r2, [pc, #172]	; (3f88 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    3eda:	5cd3      	ldrb	r3, [r2, r3]
    3edc:	011b      	lsls	r3, r3, #4
    3ede:	9a03      	ldr	r2, [sp, #12]
    3ee0:	4313      	orrs	r3, r2
    3ee2:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    3ee4:	9b01      	ldr	r3, [sp, #4]
    3ee6:	9a02      	ldr	r2, [sp, #8]
    3ee8:	320d      	adds	r2, #13
    3eea:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3eee:	2b29      	cmp	r3, #41	; 0x29
    3ef0:	d10b      	bne.n	3f0a <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3ef2:	9a01      	ldr	r2, [sp, #4]
    3ef4:	9b02      	ldr	r3, [sp, #8]
    3ef6:	330d      	adds	r3, #13
    3ef8:	00db      	lsls	r3, r3, #3
    3efa:	4413      	add	r3, r2
    3efc:	685b      	ldr	r3, [r3, #4]
    3efe:	4a23      	ldr	r2, [pc, #140]	; (3f8c <SetSimLpoclksRegister_TrustedCall+0xdc>)
    3f00:	5cd3      	ldrb	r3, [r2, r3]
    3f02:	009b      	lsls	r3, r3, #2
    3f04:	9a03      	ldr	r2, [sp, #12]
    3f06:	4313      	orrs	r3, r2
    3f08:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3f0a:	9b02      	ldr	r3, [sp, #8]
    3f0c:	3301      	adds	r3, #1
    3f0e:	9302      	str	r3, [sp, #8]
    3f10:	9b01      	ldr	r3, [sp, #4]
    3f12:	7adb      	ldrb	r3, [r3, #11]
    3f14:	461a      	mov	r2, r3
    3f16:	9b02      	ldr	r3, [sp, #8]
    3f18:	4293      	cmp	r3, r2
    3f1a:	d3d0      	bcc.n	3ebe <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3f1c:	2300      	movs	r3, #0
    3f1e:	9302      	str	r3, [sp, #8]
    3f20:	e026      	b.n	3f70 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    3f22:	9a01      	ldr	r2, [sp, #4]
    3f24:	9b02      	ldr	r3, [sp, #8]
    3f26:	334e      	adds	r3, #78	; 0x4e
    3f28:	00db      	lsls	r3, r3, #3
    3f2a:	4413      	add	r3, r2
    3f2c:	685b      	ldr	r3, [r3, #4]
    3f2e:	2b12      	cmp	r3, #18
    3f30:	d109      	bne.n	3f46 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3f32:	9a01      	ldr	r2, [sp, #4]
    3f34:	9b02      	ldr	r3, [sp, #8]
    3f36:	334e      	adds	r3, #78	; 0x4e
    3f38:	00db      	lsls	r3, r3, #3
    3f3a:	4413      	add	r3, r2
    3f3c:	891b      	ldrh	r3, [r3, #8]
    3f3e:	005b      	lsls	r3, r3, #1
    3f40:	9a03      	ldr	r2, [sp, #12]
    3f42:	4313      	orrs	r3, r2
    3f44:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    3f46:	9a01      	ldr	r2, [sp, #4]
    3f48:	9b02      	ldr	r3, [sp, #8]
    3f4a:	334e      	adds	r3, #78	; 0x4e
    3f4c:	00db      	lsls	r3, r3, #3
    3f4e:	4413      	add	r3, r2
    3f50:	685b      	ldr	r3, [r3, #4]
    3f52:	2b13      	cmp	r3, #19
    3f54:	d109      	bne.n	3f6a <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3f56:	9a01      	ldr	r2, [sp, #4]
    3f58:	9b02      	ldr	r3, [sp, #8]
    3f5a:	334e      	adds	r3, #78	; 0x4e
    3f5c:	00db      	lsls	r3, r3, #3
    3f5e:	4413      	add	r3, r2
    3f60:	891b      	ldrh	r3, [r3, #8]
    3f62:	461a      	mov	r2, r3
    3f64:	9b03      	ldr	r3, [sp, #12]
    3f66:	4313      	orrs	r3, r2
    3f68:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3f6a:	9b02      	ldr	r3, [sp, #8]
    3f6c:	3301      	adds	r3, #1
    3f6e:	9302      	str	r3, [sp, #8]
    3f70:	9b01      	ldr	r3, [sp, #4]
    3f72:	7c1b      	ldrb	r3, [r3, #16]
    3f74:	461a      	mov	r2, r3
    3f76:	9b02      	ldr	r3, [sp, #8]
    3f78:	4293      	cmp	r3, r2
    3f7a:	d3d2      	bcc.n	3f22 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    3f7c:	4a04      	ldr	r2, [pc, #16]	; (3f90 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    3f7e:	9b03      	ldr	r3, [sp, #12]
    3f80:	6113      	str	r3, [r2, #16]
}
    3f82:	bf00      	nop
    3f84:	b004      	add	sp, #16
    3f86:	4770      	bx	lr
    3f88:	0000bb08 	.word	0x0000bb08
    3f8c:	0000bbc0 	.word	0x0000bbc0
    3f90:	40048000 	.word	0x40048000

00003f94 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    3f94:	b500      	push	{lr}
    3f96:	b089      	sub	sp, #36	; 0x24
    3f98:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3f9a:	2300      	movs	r3, #0
    3f9c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    3fa0:	4a21      	ldr	r2, [pc, #132]	; (4028 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    3fa2:	9b01      	ldr	r3, [sp, #4]
    3fa4:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    3fa6:	4b21      	ldr	r3, [pc, #132]	; (402c <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3fa8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fac:	f003 0301 	and.w	r3, r3, #1
    3fb0:	2b00      	cmp	r3, #0
    3fb2:	d12e      	bne.n	4012 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    3fb4:	4b1e      	ldr	r3, [pc, #120]	; (4030 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3fb6:	2200      	movs	r2, #0
    3fb8:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    3fba:	f7ff ff69 	bl	3e90 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3fbe:	aa03      	add	r2, sp, #12
    3fc0:	a904      	add	r1, sp, #16
    3fc2:	a805      	add	r0, sp, #20
    3fc4:	f24c 3350 	movw	r3, #50000	; 0xc350
    3fc8:	f7fe f8ae 	bl	2128 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3fcc:	4b17      	ldr	r3, [pc, #92]	; (402c <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3fce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fd2:	0e1b      	lsrs	r3, r3, #24
    3fd4:	f003 0301 	and.w	r3, r3, #1
    3fd8:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3fda:	9a03      	ldr	r2, [sp, #12]
    3fdc:	a904      	add	r1, sp, #16
    3fde:	ab05      	add	r3, sp, #20
    3fe0:	4618      	mov	r0, r3
    3fe2:	f7fe f8bb 	bl	215c <Clock_Ip_TimeoutExpired>
    3fe6:	4603      	mov	r3, r0
    3fe8:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    3fec:	9b06      	ldr	r3, [sp, #24]
    3fee:	2b00      	cmp	r3, #0
    3ff0:	d106      	bne.n	4000 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    3ff2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ff6:	f083 0301 	eor.w	r3, r3, #1
    3ffa:	b2db      	uxtb	r3, r3
    3ffc:	2b00      	cmp	r3, #0
    3ffe:	d1e5      	bne.n	3fcc <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4000:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4004:	2b00      	cmp	r3, #0
    4006:	d007      	beq.n	4018 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4008:	2105      	movs	r1, #5
    400a:	2001      	movs	r0, #1
    400c:	f7fe f87c 	bl	2108 <Clock_Ip_ReportClockErrors>
    4010:	e002      	b.n	4018 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4012:	4b07      	ldr	r3, [pc, #28]	; (4030 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4014:	2201      	movs	r2, #1
    4016:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4018:	9801      	ldr	r0, [sp, #4]
    401a:	f7ff ff49 	bl	3eb0 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    401e:	bf00      	nop
    4020:	b009      	add	sp, #36	; 0x24
    4022:	f85d fb04 	ldr.w	pc, [sp], #4
    4026:	bf00      	nop
    4028:	1fff8bc8 	.word	0x1fff8bc8
    402c:	40064000 	.word	0x40064000
    4030:	1fff8b18 	.word	0x1fff8b18

00004034 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4034:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4036:	2300      	movs	r3, #0
    4038:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    403a:	4b29      	ldr	r3, [pc, #164]	; (40e0 <getFircConfig+0xac>)
    403c:	681b      	ldr	r3, [r3, #0]
    403e:	2b00      	cmp	r3, #0
    4040:	d024      	beq.n	408c <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4042:	2300      	movs	r3, #0
    4044:	9301      	str	r3, [sp, #4]
    4046:	e01a      	b.n	407e <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4048:	4b25      	ldr	r3, [pc, #148]	; (40e0 <getFircConfig+0xac>)
    404a:	6819      	ldr	r1, [r3, #0]
    404c:	9a01      	ldr	r2, [sp, #4]
    404e:	4613      	mov	r3, r2
    4050:	005b      	lsls	r3, r3, #1
    4052:	4413      	add	r3, r2
    4054:	009b      	lsls	r3, r3, #2
    4056:	440b      	add	r3, r1
    4058:	3314      	adds	r3, #20
    405a:	681b      	ldr	r3, [r3, #0]
    405c:	2b05      	cmp	r3, #5
    405e:	d10b      	bne.n	4078 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4060:	4b1f      	ldr	r3, [pc, #124]	; (40e0 <getFircConfig+0xac>)
    4062:	6819      	ldr	r1, [r3, #0]
    4064:	9a01      	ldr	r2, [sp, #4]
    4066:	4613      	mov	r3, r2
    4068:	005b      	lsls	r3, r3, #1
    406a:	4413      	add	r3, r2
    406c:	009b      	lsls	r3, r3, #2
    406e:	3310      	adds	r3, #16
    4070:	440b      	add	r3, r1
    4072:	3304      	adds	r3, #4
    4074:	9300      	str	r3, [sp, #0]
                break;
    4076:	e009      	b.n	408c <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4078:	9b01      	ldr	r3, [sp, #4]
    407a:	3301      	adds	r3, #1
    407c:	9301      	str	r3, [sp, #4]
    407e:	4b18      	ldr	r3, [pc, #96]	; (40e0 <getFircConfig+0xac>)
    4080:	681b      	ldr	r3, [r3, #0]
    4082:	7a1b      	ldrb	r3, [r3, #8]
    4084:	461a      	mov	r2, r3
    4086:	9b01      	ldr	r3, [sp, #4]
    4088:	4293      	cmp	r3, r2
    408a:	d3dd      	bcc.n	4048 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    408c:	9b00      	ldr	r3, [sp, #0]
    408e:	2b00      	cmp	r3, #0
    4090:	d121      	bne.n	40d6 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4092:	4b14      	ldr	r3, [pc, #80]	; (40e4 <getFircConfig+0xb0>)
    4094:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4096:	4b13      	ldr	r3, [pc, #76]	; (40e4 <getFircConfig+0xb0>)
    4098:	2205      	movs	r2, #5
    409a:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    409c:	4b12      	ldr	r3, [pc, #72]	; (40e8 <getFircConfig+0xb4>)
    409e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40a2:	b29b      	uxth	r3, r3
    40a4:	f003 0301 	and.w	r3, r3, #1
    40a8:	b29a      	uxth	r2, r3
    40aa:	4b0e      	ldr	r3, [pc, #56]	; (40e4 <getFircConfig+0xb0>)
    40ac:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    40ae:	4b0e      	ldr	r3, [pc, #56]	; (40e8 <getFircConfig+0xb4>)
    40b0:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    40b4:	b2db      	uxtb	r3, r3
    40b6:	f003 0303 	and.w	r3, r3, #3
    40ba:	b2da      	uxtb	r2, r3
    40bc:	4b09      	ldr	r3, [pc, #36]	; (40e4 <getFircConfig+0xb0>)
    40be:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    40c0:	4b09      	ldr	r3, [pc, #36]	; (40e8 <getFircConfig+0xb4>)
    40c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40c6:	b2db      	uxtb	r3, r3
    40c8:	10db      	asrs	r3, r3, #3
    40ca:	b2db      	uxtb	r3, r3
    40cc:	f003 0301 	and.w	r3, r3, #1
    40d0:	b2da      	uxtb	r2, r3
    40d2:	4b04      	ldr	r3, [pc, #16]	; (40e4 <getFircConfig+0xb0>)
    40d4:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    40d6:	9b00      	ldr	r3, [sp, #0]
}
    40d8:	4618      	mov	r0, r3
    40da:	b002      	add	sp, #8
    40dc:	4770      	bx	lr
    40de:	bf00      	nop
    40e0:	1fff8bc8 	.word	0x1fff8bc8
    40e4:	1fff8c34 	.word	0x1fff8c34
    40e8:	40064000 	.word	0x40064000

000040ec <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    40ec:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    40ee:	2300      	movs	r3, #0
    40f0:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    40f2:	4b20      	ldr	r3, [pc, #128]	; (4174 <getSoscConfig+0x88>)
    40f4:	681b      	ldr	r3, [r3, #0]
    40f6:	2b00      	cmp	r3, #0
    40f8:	d024      	beq.n	4144 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    40fa:	2300      	movs	r3, #0
    40fc:	9301      	str	r3, [sp, #4]
    40fe:	e01a      	b.n	4136 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4100:	4b1c      	ldr	r3, [pc, #112]	; (4174 <getSoscConfig+0x88>)
    4102:	6819      	ldr	r1, [r3, #0]
    4104:	9a01      	ldr	r2, [sp, #4]
    4106:	4613      	mov	r3, r2
    4108:	009b      	lsls	r3, r3, #2
    410a:	4413      	add	r3, r2
    410c:	009b      	lsls	r3, r3, #2
    410e:	440b      	add	r3, r1
    4110:	332c      	adds	r3, #44	; 0x2c
    4112:	681b      	ldr	r3, [r3, #0]
    4114:	2b08      	cmp	r3, #8
    4116:	d10b      	bne.n	4130 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4118:	4b16      	ldr	r3, [pc, #88]	; (4174 <getSoscConfig+0x88>)
    411a:	6819      	ldr	r1, [r3, #0]
    411c:	9a01      	ldr	r2, [sp, #4]
    411e:	4613      	mov	r3, r2
    4120:	009b      	lsls	r3, r3, #2
    4122:	4413      	add	r3, r2
    4124:	009b      	lsls	r3, r3, #2
    4126:	3328      	adds	r3, #40	; 0x28
    4128:	440b      	add	r3, r1
    412a:	3304      	adds	r3, #4
    412c:	9300      	str	r3, [sp, #0]
                break;
    412e:	e009      	b.n	4144 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4130:	9b01      	ldr	r3, [sp, #4]
    4132:	3301      	adds	r3, #1
    4134:	9301      	str	r3, [sp, #4]
    4136:	4b0f      	ldr	r3, [pc, #60]	; (4174 <getSoscConfig+0x88>)
    4138:	681b      	ldr	r3, [r3, #0]
    413a:	7a5b      	ldrb	r3, [r3, #9]
    413c:	461a      	mov	r2, r3
    413e:	9b01      	ldr	r3, [sp, #4]
    4140:	4293      	cmp	r3, r2
    4142:	d3dd      	bcc.n	4100 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4144:	9b00      	ldr	r3, [sp, #0]
    4146:	2b00      	cmp	r3, #0
    4148:	d110      	bne.n	416c <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    414a:	4b0b      	ldr	r3, [pc, #44]	; (4178 <getSoscConfig+0x8c>)
    414c:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    414e:	4b0a      	ldr	r3, [pc, #40]	; (4178 <getSoscConfig+0x8c>)
    4150:	2208      	movs	r2, #8
    4152:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4154:	4b09      	ldr	r3, [pc, #36]	; (417c <getSoscConfig+0x90>)
    4156:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    415a:	b29b      	uxth	r3, r3
    415c:	f003 0301 	and.w	r3, r3, #1
    4160:	b29a      	uxth	r2, r3
    4162:	4b05      	ldr	r3, [pc, #20]	; (4178 <getSoscConfig+0x8c>)
    4164:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4166:	4b04      	ldr	r3, [pc, #16]	; (4178 <getSoscConfig+0x8c>)
    4168:	4a05      	ldr	r2, [pc, #20]	; (4180 <getSoscConfig+0x94>)
    416a:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    416c:	9b00      	ldr	r3, [sp, #0]
}
    416e:	4618      	mov	r0, r3
    4170:	b002      	add	sp, #8
    4172:	4770      	bx	lr
    4174:	1fff8bc8 	.word	0x1fff8bc8
    4178:	1fff8c40 	.word	0x1fff8c40
    417c:	40064000 	.word	0x40064000
    4180:	02625a00 	.word	0x02625a00

00004184 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4184:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4186:	2300      	movs	r3, #0
    4188:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    418a:	4b28      	ldr	r3, [pc, #160]	; (422c <getSpllConfig+0xa8>)
    418c:	681b      	ldr	r3, [r3, #0]
    418e:	2b00      	cmp	r3, #0
    4190:	d023      	beq.n	41da <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4192:	2300      	movs	r3, #0
    4194:	9301      	str	r3, [sp, #4]
    4196:	e019      	b.n	41cc <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4198:	4b24      	ldr	r3, [pc, #144]	; (422c <getSpllConfig+0xa8>)
    419a:	6819      	ldr	r1, [r3, #0]
    419c:	9a01      	ldr	r2, [sp, #4]
    419e:	4613      	mov	r3, r2
    41a0:	009b      	lsls	r3, r3, #2
    41a2:	4413      	add	r3, r2
    41a4:	00db      	lsls	r3, r3, #3
    41a6:	440b      	add	r3, r1
    41a8:	3340      	adds	r3, #64	; 0x40
    41aa:	681b      	ldr	r3, [r3, #0]
    41ac:	2b09      	cmp	r3, #9
    41ae:	d10a      	bne.n	41c6 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    41b0:	4b1e      	ldr	r3, [pc, #120]	; (422c <getSpllConfig+0xa8>)
    41b2:	6819      	ldr	r1, [r3, #0]
    41b4:	9a01      	ldr	r2, [sp, #4]
    41b6:	4613      	mov	r3, r2
    41b8:	009b      	lsls	r3, r3, #2
    41ba:	4413      	add	r3, r2
    41bc:	00db      	lsls	r3, r3, #3
    41be:	3340      	adds	r3, #64	; 0x40
    41c0:	440b      	add	r3, r1
    41c2:	9300      	str	r3, [sp, #0]
                break;
    41c4:	e009      	b.n	41da <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    41c6:	9b01      	ldr	r3, [sp, #4]
    41c8:	3301      	adds	r3, #1
    41ca:	9301      	str	r3, [sp, #4]
    41cc:	4b17      	ldr	r3, [pc, #92]	; (422c <getSpllConfig+0xa8>)
    41ce:	681b      	ldr	r3, [r3, #0]
    41d0:	7a9b      	ldrb	r3, [r3, #10]
    41d2:	461a      	mov	r2, r3
    41d4:	9b01      	ldr	r3, [sp, #4]
    41d6:	4293      	cmp	r3, r2
    41d8:	d3de      	bcc.n	4198 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    41da:	9b00      	ldr	r3, [sp, #0]
    41dc:	2b00      	cmp	r3, #0
    41de:	d121      	bne.n	4224 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    41e0:	4b13      	ldr	r3, [pc, #76]	; (4230 <getSpllConfig+0xac>)
    41e2:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    41e4:	4b12      	ldr	r3, [pc, #72]	; (4230 <getSpllConfig+0xac>)
    41e6:	2209      	movs	r2, #9
    41e8:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    41ea:	4b12      	ldr	r3, [pc, #72]	; (4234 <getSpllConfig+0xb0>)
    41ec:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    41f0:	b29b      	uxth	r3, r3
    41f2:	f003 0301 	and.w	r3, r3, #1
    41f6:	b29a      	uxth	r2, r3
    41f8:	4b0d      	ldr	r3, [pc, #52]	; (4230 <getSpllConfig+0xac>)
    41fa:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    41fc:	4b0d      	ldr	r3, [pc, #52]	; (4234 <getSpllConfig+0xb0>)
    41fe:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4202:	0a1b      	lsrs	r3, r3, #8
    4204:	b2db      	uxtb	r3, r3
    4206:	f003 0307 	and.w	r3, r3, #7
    420a:	b2da      	uxtb	r2, r3
    420c:	4b08      	ldr	r3, [pc, #32]	; (4230 <getSpllConfig+0xac>)
    420e:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4210:	4b08      	ldr	r3, [pc, #32]	; (4234 <getSpllConfig+0xb0>)
    4212:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4216:	0c1b      	lsrs	r3, r3, #16
    4218:	b2db      	uxtb	r3, r3
    421a:	f003 031f 	and.w	r3, r3, #31
    421e:	b2da      	uxtb	r2, r3
    4220:	4b03      	ldr	r3, [pc, #12]	; (4230 <getSpllConfig+0xac>)
    4222:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4224:	9b00      	ldr	r3, [sp, #0]
}
    4226:	4618      	mov	r0, r3
    4228:	b002      	add	sp, #8
    422a:	4770      	bx	lr
    422c:	1fff8bc8 	.word	0x1fff8bc8
    4230:	1fff8c54 	.word	0x1fff8c54
    4234:	40064000 	.word	0x40064000

00004238 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4238:	b086      	sub	sp, #24
    423a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    423c:	2300      	movs	r3, #0
    423e:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4240:	9b01      	ldr	r3, [sp, #4]
    4242:	2b1b      	cmp	r3, #27
    4244:	d00f      	beq.n	4266 <getSelectorConfig+0x2e>
    4246:	9b01      	ldr	r3, [sp, #4]
    4248:	2b1b      	cmp	r3, #27
    424a:	d80f      	bhi.n	426c <getSelectorConfig+0x34>
    424c:	9b01      	ldr	r3, [sp, #4]
    424e:	2b19      	cmp	r3, #25
    4250:	d003      	beq.n	425a <getSelectorConfig+0x22>
    4252:	9b01      	ldr	r3, [sp, #4]
    4254:	2b1a      	cmp	r3, #26
    4256:	d003      	beq.n	4260 <getSelectorConfig+0x28>
    4258:	e008      	b.n	426c <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    425a:	2300      	movs	r3, #0
    425c:	9304      	str	r3, [sp, #16]
            break;
    425e:	e008      	b.n	4272 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4260:	2301      	movs	r3, #1
    4262:	9304      	str	r3, [sp, #16]
            break;
    4264:	e005      	b.n	4272 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4266:	2302      	movs	r3, #2
    4268:	9304      	str	r3, [sp, #16]
            break;
    426a:	e002      	b.n	4272 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    426c:	2300      	movs	r3, #0
    426e:	9304      	str	r3, [sp, #16]
            break;
    4270:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4272:	4b36      	ldr	r3, [pc, #216]	; (434c <getSelectorConfig+0x114>)
    4274:	681b      	ldr	r3, [r3, #0]
    4276:	2b00      	cmp	r3, #0
    4278:	d01d      	beq.n	42b6 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    427a:	2300      	movs	r3, #0
    427c:	9303      	str	r3, [sp, #12]
    427e:	e013      	b.n	42a8 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4280:	4b32      	ldr	r3, [pc, #200]	; (434c <getSelectorConfig+0x114>)
    4282:	681b      	ldr	r3, [r3, #0]
    4284:	9a03      	ldr	r2, [sp, #12]
    4286:	320d      	adds	r2, #13
    4288:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    428c:	9a01      	ldr	r2, [sp, #4]
    428e:	429a      	cmp	r2, r3
    4290:	d107      	bne.n	42a2 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4292:	4b2e      	ldr	r3, [pc, #184]	; (434c <getSelectorConfig+0x114>)
    4294:	681a      	ldr	r2, [r3, #0]
    4296:	9b03      	ldr	r3, [sp, #12]
    4298:	330d      	adds	r3, #13
    429a:	00db      	lsls	r3, r3, #3
    429c:	4413      	add	r3, r2
    429e:	9305      	str	r3, [sp, #20]
                break;
    42a0:	e009      	b.n	42b6 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    42a2:	9b03      	ldr	r3, [sp, #12]
    42a4:	3301      	adds	r3, #1
    42a6:	9303      	str	r3, [sp, #12]
    42a8:	4b28      	ldr	r3, [pc, #160]	; (434c <getSelectorConfig+0x114>)
    42aa:	681b      	ldr	r3, [r3, #0]
    42ac:	7adb      	ldrb	r3, [r3, #11]
    42ae:	461a      	mov	r2, r3
    42b0:	9b03      	ldr	r3, [sp, #12]
    42b2:	4293      	cmp	r3, r2
    42b4:	d3e4      	bcc.n	4280 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    42b6:	9b05      	ldr	r3, [sp, #20]
    42b8:	2b00      	cmp	r3, #0
    42ba:	d140      	bne.n	433e <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    42bc:	9b04      	ldr	r3, [sp, #16]
    42be:	00db      	lsls	r3, r3, #3
    42c0:	4a23      	ldr	r2, [pc, #140]	; (4350 <getSelectorConfig+0x118>)
    42c2:	4413      	add	r3, r2
    42c4:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    42c6:	4922      	ldr	r1, [pc, #136]	; (4350 <getSelectorConfig+0x118>)
    42c8:	9b04      	ldr	r3, [sp, #16]
    42ca:	9a01      	ldr	r2, [sp, #4]
    42cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    42d0:	9b01      	ldr	r3, [sp, #4]
    42d2:	2b1b      	cmp	r3, #27
    42d4:	d025      	beq.n	4322 <getSelectorConfig+0xea>
    42d6:	9b01      	ldr	r3, [sp, #4]
    42d8:	2b1b      	cmp	r3, #27
    42da:	d832      	bhi.n	4342 <getSelectorConfig+0x10a>
    42dc:	9b01      	ldr	r3, [sp, #4]
    42de:	2b19      	cmp	r3, #25
    42e0:	d003      	beq.n	42ea <getSelectorConfig+0xb2>
    42e2:	9b01      	ldr	r3, [sp, #4]
    42e4:	2b1a      	cmp	r3, #26
    42e6:	d00e      	beq.n	4306 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    42e8:	e02b      	b.n	4342 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    42ea:	4b1a      	ldr	r3, [pc, #104]	; (4354 <getSelectorConfig+0x11c>)
    42ec:	695b      	ldr	r3, [r3, #20]
    42ee:	0e1b      	lsrs	r3, r3, #24
    42f0:	f003 030f 	and.w	r3, r3, #15
    42f4:	4a18      	ldr	r2, [pc, #96]	; (4358 <getSelectorConfig+0x120>)
    42f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    42fa:	4915      	ldr	r1, [pc, #84]	; (4350 <getSelectorConfig+0x118>)
    42fc:	9b04      	ldr	r3, [sp, #16]
    42fe:	00db      	lsls	r3, r3, #3
    4300:	440b      	add	r3, r1
    4302:	605a      	str	r2, [r3, #4]
                break;
    4304:	e01e      	b.n	4344 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4306:	4b13      	ldr	r3, [pc, #76]	; (4354 <getSelectorConfig+0x11c>)
    4308:	699b      	ldr	r3, [r3, #24]
    430a:	0e1b      	lsrs	r3, r3, #24
    430c:	f003 030f 	and.w	r3, r3, #15
    4310:	4a11      	ldr	r2, [pc, #68]	; (4358 <getSelectorConfig+0x120>)
    4312:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4316:	490e      	ldr	r1, [pc, #56]	; (4350 <getSelectorConfig+0x118>)
    4318:	9b04      	ldr	r3, [sp, #16]
    431a:	00db      	lsls	r3, r3, #3
    431c:	440b      	add	r3, r1
    431e:	605a      	str	r2, [r3, #4]
                break;
    4320:	e010      	b.n	4344 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4322:	4b0c      	ldr	r3, [pc, #48]	; (4354 <getSelectorConfig+0x11c>)
    4324:	69db      	ldr	r3, [r3, #28]
    4326:	0e1b      	lsrs	r3, r3, #24
    4328:	f003 030f 	and.w	r3, r3, #15
    432c:	4a0a      	ldr	r2, [pc, #40]	; (4358 <getSelectorConfig+0x120>)
    432e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4332:	4907      	ldr	r1, [pc, #28]	; (4350 <getSelectorConfig+0x118>)
    4334:	9b04      	ldr	r3, [sp, #16]
    4336:	00db      	lsls	r3, r3, #3
    4338:	440b      	add	r3, r1
    433a:	605a      	str	r2, [r3, #4]
                break;
    433c:	e002      	b.n	4344 <getSelectorConfig+0x10c>
        }
    }
    433e:	bf00      	nop
    4340:	e000      	b.n	4344 <getSelectorConfig+0x10c>
                break;
    4342:	bf00      	nop

    return ReturnValue;
    4344:	9b05      	ldr	r3, [sp, #20]
}
    4346:	4618      	mov	r0, r3
    4348:	b006      	add	sp, #24
    434a:	4770      	bx	lr
    434c:	1fff8bc8 	.word	0x1fff8bc8
    4350:	1fff8c7c 	.word	0x1fff8c7c
    4354:	40064000 	.word	0x40064000
    4358:	0000be88 	.word	0x0000be88

0000435c <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    435c:	b086      	sub	sp, #24
    435e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4360:	2300      	movs	r3, #0
    4362:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4364:	2300      	movs	r3, #0
    4366:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4368:	9b01      	ldr	r3, [sp, #4]
    436a:	2b1f      	cmp	r3, #31
    436c:	d00f      	beq.n	438e <getCoreDividerConfig+0x32>
    436e:	9b01      	ldr	r3, [sp, #4]
    4370:	2b1f      	cmp	r3, #31
    4372:	d80f      	bhi.n	4394 <getCoreDividerConfig+0x38>
    4374:	9b01      	ldr	r3, [sp, #4]
    4376:	2b1d      	cmp	r3, #29
    4378:	d003      	beq.n	4382 <getCoreDividerConfig+0x26>
    437a:	9b01      	ldr	r3, [sp, #4]
    437c:	2b1e      	cmp	r3, #30
    437e:	d003      	beq.n	4388 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4380:	e008      	b.n	4394 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4382:	2300      	movs	r3, #0
    4384:	9304      	str	r3, [sp, #16]
            break;
    4386:	e006      	b.n	4396 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4388:	2301      	movs	r3, #1
    438a:	9304      	str	r3, [sp, #16]
            break;
    438c:	e003      	b.n	4396 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    438e:	2302      	movs	r3, #2
    4390:	9304      	str	r3, [sp, #16]
            break;
    4392:	e000      	b.n	4396 <getCoreDividerConfig+0x3a>
                break;
    4394:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4396:	4b41      	ldr	r3, [pc, #260]	; (449c <getCoreDividerConfig+0x140>)
    4398:	681b      	ldr	r3, [r3, #0]
    439a:	2b00      	cmp	r3, #0
    439c:	d026      	beq.n	43ec <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    439e:	2300      	movs	r3, #0
    43a0:	9303      	str	r3, [sp, #12]
    43a2:	e01c      	b.n	43de <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    43a4:	4b3d      	ldr	r3, [pc, #244]	; (449c <getCoreDividerConfig+0x140>)
    43a6:	6819      	ldr	r1, [r3, #0]
    43a8:	9a03      	ldr	r2, [sp, #12]
    43aa:	4613      	mov	r3, r2
    43ac:	005b      	lsls	r3, r3, #1
    43ae:	4413      	add	r3, r2
    43b0:	009b      	lsls	r3, r3, #2
    43b2:	440b      	add	r3, r1
    43b4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    43b8:	681b      	ldr	r3, [r3, #0]
    43ba:	9a01      	ldr	r2, [sp, #4]
    43bc:	429a      	cmp	r2, r3
    43be:	d10b      	bne.n	43d8 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    43c0:	4b36      	ldr	r3, [pc, #216]	; (449c <getCoreDividerConfig+0x140>)
    43c2:	6819      	ldr	r1, [r3, #0]
    43c4:	9a03      	ldr	r2, [sp, #12]
    43c6:	4613      	mov	r3, r2
    43c8:	005b      	lsls	r3, r3, #1
    43ca:	4413      	add	r3, r2
    43cc:	009b      	lsls	r3, r3, #2
    43ce:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    43d2:	440b      	add	r3, r1
    43d4:	9305      	str	r3, [sp, #20]
                break;
    43d6:	e009      	b.n	43ec <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    43d8:	9b03      	ldr	r3, [sp, #12]
    43da:	3301      	adds	r3, #1
    43dc:	9303      	str	r3, [sp, #12]
    43de:	4b2f      	ldr	r3, [pc, #188]	; (449c <getCoreDividerConfig+0x140>)
    43e0:	681b      	ldr	r3, [r3, #0]
    43e2:	7b1b      	ldrb	r3, [r3, #12]
    43e4:	461a      	mov	r2, r3
    43e6:	9b03      	ldr	r3, [sp, #12]
    43e8:	4293      	cmp	r3, r2
    43ea:	d3db      	bcc.n	43a4 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    43ec:	9b05      	ldr	r3, [sp, #20]
    43ee:	2b00      	cmp	r3, #0
    43f0:	d14d      	bne.n	448e <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    43f2:	9a04      	ldr	r2, [sp, #16]
    43f4:	4613      	mov	r3, r2
    43f6:	005b      	lsls	r3, r3, #1
    43f8:	4413      	add	r3, r2
    43fa:	009b      	lsls	r3, r3, #2
    43fc:	4a28      	ldr	r2, [pc, #160]	; (44a0 <getCoreDividerConfig+0x144>)
    43fe:	4413      	add	r3, r2
    4400:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4402:	4927      	ldr	r1, [pc, #156]	; (44a0 <getCoreDividerConfig+0x144>)
    4404:	9a04      	ldr	r2, [sp, #16]
    4406:	4613      	mov	r3, r2
    4408:	005b      	lsls	r3, r3, #1
    440a:	4413      	add	r3, r2
    440c:	009b      	lsls	r3, r3, #2
    440e:	440b      	add	r3, r1
    4410:	9a01      	ldr	r2, [sp, #4]
    4412:	601a      	str	r2, [r3, #0]
        switch(Name)
    4414:	9b01      	ldr	r3, [sp, #4]
    4416:	2b1f      	cmp	r3, #31
    4418:	d029      	beq.n	446e <getCoreDividerConfig+0x112>
    441a:	9b01      	ldr	r3, [sp, #4]
    441c:	2b1f      	cmp	r3, #31
    441e:	d838      	bhi.n	4492 <getCoreDividerConfig+0x136>
    4420:	9b01      	ldr	r3, [sp, #4]
    4422:	2b1d      	cmp	r3, #29
    4424:	d003      	beq.n	442e <getCoreDividerConfig+0xd2>
    4426:	9b01      	ldr	r3, [sp, #4]
    4428:	2b1e      	cmp	r3, #30
    442a:	d010      	beq.n	444e <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    442c:	e031      	b.n	4492 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    442e:	4b1d      	ldr	r3, [pc, #116]	; (44a4 <getCoreDividerConfig+0x148>)
    4430:	695b      	ldr	r3, [r3, #20]
    4432:	0c1b      	lsrs	r3, r3, #16
    4434:	f003 030f 	and.w	r3, r3, #15
    4438:	1c59      	adds	r1, r3, #1
    443a:	4819      	ldr	r0, [pc, #100]	; (44a0 <getCoreDividerConfig+0x144>)
    443c:	9a04      	ldr	r2, [sp, #16]
    443e:	4613      	mov	r3, r2
    4440:	005b      	lsls	r3, r3, #1
    4442:	4413      	add	r3, r2
    4444:	009b      	lsls	r3, r3, #2
    4446:	4403      	add	r3, r0
    4448:	3304      	adds	r3, #4
    444a:	6019      	str	r1, [r3, #0]
                break;
    444c:	e022      	b.n	4494 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    444e:	4b15      	ldr	r3, [pc, #84]	; (44a4 <getCoreDividerConfig+0x148>)
    4450:	699b      	ldr	r3, [r3, #24]
    4452:	0c1b      	lsrs	r3, r3, #16
    4454:	f003 030f 	and.w	r3, r3, #15
    4458:	1c59      	adds	r1, r3, #1
    445a:	4811      	ldr	r0, [pc, #68]	; (44a0 <getCoreDividerConfig+0x144>)
    445c:	9a04      	ldr	r2, [sp, #16]
    445e:	4613      	mov	r3, r2
    4460:	005b      	lsls	r3, r3, #1
    4462:	4413      	add	r3, r2
    4464:	009b      	lsls	r3, r3, #2
    4466:	4403      	add	r3, r0
    4468:	3304      	adds	r3, #4
    446a:	6019      	str	r1, [r3, #0]
                break;
    446c:	e012      	b.n	4494 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    446e:	4b0d      	ldr	r3, [pc, #52]	; (44a4 <getCoreDividerConfig+0x148>)
    4470:	69db      	ldr	r3, [r3, #28]
    4472:	0c1b      	lsrs	r3, r3, #16
    4474:	f003 030f 	and.w	r3, r3, #15
    4478:	1c59      	adds	r1, r3, #1
    447a:	4809      	ldr	r0, [pc, #36]	; (44a0 <getCoreDividerConfig+0x144>)
    447c:	9a04      	ldr	r2, [sp, #16]
    447e:	4613      	mov	r3, r2
    4480:	005b      	lsls	r3, r3, #1
    4482:	4413      	add	r3, r2
    4484:	009b      	lsls	r3, r3, #2
    4486:	4403      	add	r3, r0
    4488:	3304      	adds	r3, #4
    448a:	6019      	str	r1, [r3, #0]
                break;
    448c:	e002      	b.n	4494 <getCoreDividerConfig+0x138>
        }
    }
    448e:	bf00      	nop
    4490:	e000      	b.n	4494 <getCoreDividerConfig+0x138>
                break;
    4492:	bf00      	nop

    return ReturnValue;
    4494:	9b05      	ldr	r3, [sp, #20]
}
    4496:	4618      	mov	r0, r3
    4498:	b006      	add	sp, #24
    449a:	4770      	bx	lr
    449c:	1fff8bc8 	.word	0x1fff8bc8
    44a0:	1fff8c94 	.word	0x1fff8c94
    44a4:	40064000 	.word	0x40064000

000044a8 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    44a8:	b086      	sub	sp, #24
    44aa:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    44ac:	2300      	movs	r3, #0
    44ae:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    44b0:	2300      	movs	r3, #0
    44b2:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    44b4:	9b01      	ldr	r3, [sp, #4]
    44b6:	2b23      	cmp	r3, #35	; 0x23
    44b8:	d00f      	beq.n	44da <getBusDividerConfig+0x32>
    44ba:	9b01      	ldr	r3, [sp, #4]
    44bc:	2b23      	cmp	r3, #35	; 0x23
    44be:	d80f      	bhi.n	44e0 <getBusDividerConfig+0x38>
    44c0:	9b01      	ldr	r3, [sp, #4]
    44c2:	2b21      	cmp	r3, #33	; 0x21
    44c4:	d003      	beq.n	44ce <getBusDividerConfig+0x26>
    44c6:	9b01      	ldr	r3, [sp, #4]
    44c8:	2b22      	cmp	r3, #34	; 0x22
    44ca:	d003      	beq.n	44d4 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    44cc:	e008      	b.n	44e0 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    44ce:	2300      	movs	r3, #0
    44d0:	9304      	str	r3, [sp, #16]
            break;
    44d2:	e006      	b.n	44e2 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    44d4:	2301      	movs	r3, #1
    44d6:	9304      	str	r3, [sp, #16]
            break;
    44d8:	e003      	b.n	44e2 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    44da:	2302      	movs	r3, #2
    44dc:	9304      	str	r3, [sp, #16]
            break;
    44de:	e000      	b.n	44e2 <getBusDividerConfig+0x3a>
                break;
    44e0:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    44e2:	4b41      	ldr	r3, [pc, #260]	; (45e8 <getBusDividerConfig+0x140>)
    44e4:	681b      	ldr	r3, [r3, #0]
    44e6:	2b00      	cmp	r3, #0
    44e8:	d026      	beq.n	4538 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    44ea:	2300      	movs	r3, #0
    44ec:	9303      	str	r3, [sp, #12]
    44ee:	e01c      	b.n	452a <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    44f0:	4b3d      	ldr	r3, [pc, #244]	; (45e8 <getBusDividerConfig+0x140>)
    44f2:	6819      	ldr	r1, [r3, #0]
    44f4:	9a03      	ldr	r2, [sp, #12]
    44f6:	4613      	mov	r3, r2
    44f8:	005b      	lsls	r3, r3, #1
    44fa:	4413      	add	r3, r2
    44fc:	009b      	lsls	r3, r3, #2
    44fe:	440b      	add	r3, r1
    4500:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4504:	681b      	ldr	r3, [r3, #0]
    4506:	9a01      	ldr	r2, [sp, #4]
    4508:	429a      	cmp	r2, r3
    450a:	d10b      	bne.n	4524 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    450c:	4b36      	ldr	r3, [pc, #216]	; (45e8 <getBusDividerConfig+0x140>)
    450e:	6819      	ldr	r1, [r3, #0]
    4510:	9a03      	ldr	r2, [sp, #12]
    4512:	4613      	mov	r3, r2
    4514:	005b      	lsls	r3, r3, #1
    4516:	4413      	add	r3, r2
    4518:	009b      	lsls	r3, r3, #2
    451a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    451e:	440b      	add	r3, r1
    4520:	9305      	str	r3, [sp, #20]
                break;
    4522:	e009      	b.n	4538 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4524:	9b03      	ldr	r3, [sp, #12]
    4526:	3301      	adds	r3, #1
    4528:	9303      	str	r3, [sp, #12]
    452a:	4b2f      	ldr	r3, [pc, #188]	; (45e8 <getBusDividerConfig+0x140>)
    452c:	681b      	ldr	r3, [r3, #0]
    452e:	7b1b      	ldrb	r3, [r3, #12]
    4530:	461a      	mov	r2, r3
    4532:	9b03      	ldr	r3, [sp, #12]
    4534:	4293      	cmp	r3, r2
    4536:	d3db      	bcc.n	44f0 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4538:	9b05      	ldr	r3, [sp, #20]
    453a:	2b00      	cmp	r3, #0
    453c:	d14d      	bne.n	45da <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    453e:	9a04      	ldr	r2, [sp, #16]
    4540:	4613      	mov	r3, r2
    4542:	005b      	lsls	r3, r3, #1
    4544:	4413      	add	r3, r2
    4546:	009b      	lsls	r3, r3, #2
    4548:	4a28      	ldr	r2, [pc, #160]	; (45ec <getBusDividerConfig+0x144>)
    454a:	4413      	add	r3, r2
    454c:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    454e:	4927      	ldr	r1, [pc, #156]	; (45ec <getBusDividerConfig+0x144>)
    4550:	9a04      	ldr	r2, [sp, #16]
    4552:	4613      	mov	r3, r2
    4554:	005b      	lsls	r3, r3, #1
    4556:	4413      	add	r3, r2
    4558:	009b      	lsls	r3, r3, #2
    455a:	440b      	add	r3, r1
    455c:	9a01      	ldr	r2, [sp, #4]
    455e:	601a      	str	r2, [r3, #0]
        switch(Name)
    4560:	9b01      	ldr	r3, [sp, #4]
    4562:	2b23      	cmp	r3, #35	; 0x23
    4564:	d029      	beq.n	45ba <getBusDividerConfig+0x112>
    4566:	9b01      	ldr	r3, [sp, #4]
    4568:	2b23      	cmp	r3, #35	; 0x23
    456a:	d838      	bhi.n	45de <getBusDividerConfig+0x136>
    456c:	9b01      	ldr	r3, [sp, #4]
    456e:	2b21      	cmp	r3, #33	; 0x21
    4570:	d003      	beq.n	457a <getBusDividerConfig+0xd2>
    4572:	9b01      	ldr	r3, [sp, #4]
    4574:	2b22      	cmp	r3, #34	; 0x22
    4576:	d010      	beq.n	459a <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4578:	e031      	b.n	45de <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    457a:	4b1d      	ldr	r3, [pc, #116]	; (45f0 <getBusDividerConfig+0x148>)
    457c:	695b      	ldr	r3, [r3, #20]
    457e:	091b      	lsrs	r3, r3, #4
    4580:	f003 030f 	and.w	r3, r3, #15
    4584:	1c59      	adds	r1, r3, #1
    4586:	4819      	ldr	r0, [pc, #100]	; (45ec <getBusDividerConfig+0x144>)
    4588:	9a04      	ldr	r2, [sp, #16]
    458a:	4613      	mov	r3, r2
    458c:	005b      	lsls	r3, r3, #1
    458e:	4413      	add	r3, r2
    4590:	009b      	lsls	r3, r3, #2
    4592:	4403      	add	r3, r0
    4594:	3304      	adds	r3, #4
    4596:	6019      	str	r1, [r3, #0]
                break;
    4598:	e022      	b.n	45e0 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    459a:	4b15      	ldr	r3, [pc, #84]	; (45f0 <getBusDividerConfig+0x148>)
    459c:	699b      	ldr	r3, [r3, #24]
    459e:	091b      	lsrs	r3, r3, #4
    45a0:	f003 030f 	and.w	r3, r3, #15
    45a4:	1c59      	adds	r1, r3, #1
    45a6:	4811      	ldr	r0, [pc, #68]	; (45ec <getBusDividerConfig+0x144>)
    45a8:	9a04      	ldr	r2, [sp, #16]
    45aa:	4613      	mov	r3, r2
    45ac:	005b      	lsls	r3, r3, #1
    45ae:	4413      	add	r3, r2
    45b0:	009b      	lsls	r3, r3, #2
    45b2:	4403      	add	r3, r0
    45b4:	3304      	adds	r3, #4
    45b6:	6019      	str	r1, [r3, #0]
                break;
    45b8:	e012      	b.n	45e0 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    45ba:	4b0d      	ldr	r3, [pc, #52]	; (45f0 <getBusDividerConfig+0x148>)
    45bc:	69db      	ldr	r3, [r3, #28]
    45be:	091b      	lsrs	r3, r3, #4
    45c0:	f003 030f 	and.w	r3, r3, #15
    45c4:	1c59      	adds	r1, r3, #1
    45c6:	4809      	ldr	r0, [pc, #36]	; (45ec <getBusDividerConfig+0x144>)
    45c8:	9a04      	ldr	r2, [sp, #16]
    45ca:	4613      	mov	r3, r2
    45cc:	005b      	lsls	r3, r3, #1
    45ce:	4413      	add	r3, r2
    45d0:	009b      	lsls	r3, r3, #2
    45d2:	4403      	add	r3, r0
    45d4:	3304      	adds	r3, #4
    45d6:	6019      	str	r1, [r3, #0]
                break;
    45d8:	e002      	b.n	45e0 <getBusDividerConfig+0x138>
        }
    }
    45da:	bf00      	nop
    45dc:	e000      	b.n	45e0 <getBusDividerConfig+0x138>
                break;
    45de:	bf00      	nop

    return ReturnValue;
    45e0:	9b05      	ldr	r3, [sp, #20]
}
    45e2:	4618      	mov	r0, r3
    45e4:	b006      	add	sp, #24
    45e6:	4770      	bx	lr
    45e8:	1fff8bc8 	.word	0x1fff8bc8
    45ec:	1fff8cb8 	.word	0x1fff8cb8
    45f0:	40064000 	.word	0x40064000

000045f4 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    45f4:	b086      	sub	sp, #24
    45f6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    45f8:	2300      	movs	r3, #0
    45fa:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    45fc:	2300      	movs	r3, #0
    45fe:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4600:	9b01      	ldr	r3, [sp, #4]
    4602:	2b27      	cmp	r3, #39	; 0x27
    4604:	d00f      	beq.n	4626 <getSlowDividerConfig+0x32>
    4606:	9b01      	ldr	r3, [sp, #4]
    4608:	2b27      	cmp	r3, #39	; 0x27
    460a:	d80f      	bhi.n	462c <getSlowDividerConfig+0x38>
    460c:	9b01      	ldr	r3, [sp, #4]
    460e:	2b25      	cmp	r3, #37	; 0x25
    4610:	d003      	beq.n	461a <getSlowDividerConfig+0x26>
    4612:	9b01      	ldr	r3, [sp, #4]
    4614:	2b26      	cmp	r3, #38	; 0x26
    4616:	d003      	beq.n	4620 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4618:	e008      	b.n	462c <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    461a:	2300      	movs	r3, #0
    461c:	9304      	str	r3, [sp, #16]
            break;
    461e:	e006      	b.n	462e <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4620:	2301      	movs	r3, #1
    4622:	9304      	str	r3, [sp, #16]
            break;
    4624:	e003      	b.n	462e <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4626:	2302      	movs	r3, #2
    4628:	9304      	str	r3, [sp, #16]
            break;
    462a:	e000      	b.n	462e <getSlowDividerConfig+0x3a>
                break;
    462c:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    462e:	4b40      	ldr	r3, [pc, #256]	; (4730 <getSlowDividerConfig+0x13c>)
    4630:	681b      	ldr	r3, [r3, #0]
    4632:	2b00      	cmp	r3, #0
    4634:	d026      	beq.n	4684 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4636:	2300      	movs	r3, #0
    4638:	9303      	str	r3, [sp, #12]
    463a:	e01c      	b.n	4676 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    463c:	4b3c      	ldr	r3, [pc, #240]	; (4730 <getSlowDividerConfig+0x13c>)
    463e:	6819      	ldr	r1, [r3, #0]
    4640:	9a03      	ldr	r2, [sp, #12]
    4642:	4613      	mov	r3, r2
    4644:	005b      	lsls	r3, r3, #1
    4646:	4413      	add	r3, r2
    4648:	009b      	lsls	r3, r3, #2
    464a:	440b      	add	r3, r1
    464c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4650:	681b      	ldr	r3, [r3, #0]
    4652:	9a01      	ldr	r2, [sp, #4]
    4654:	429a      	cmp	r2, r3
    4656:	d10b      	bne.n	4670 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4658:	4b35      	ldr	r3, [pc, #212]	; (4730 <getSlowDividerConfig+0x13c>)
    465a:	6819      	ldr	r1, [r3, #0]
    465c:	9a03      	ldr	r2, [sp, #12]
    465e:	4613      	mov	r3, r2
    4660:	005b      	lsls	r3, r3, #1
    4662:	4413      	add	r3, r2
    4664:	009b      	lsls	r3, r3, #2
    4666:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    466a:	440b      	add	r3, r1
    466c:	9305      	str	r3, [sp, #20]
                break;
    466e:	e009      	b.n	4684 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4670:	9b03      	ldr	r3, [sp, #12]
    4672:	3301      	adds	r3, #1
    4674:	9303      	str	r3, [sp, #12]
    4676:	4b2e      	ldr	r3, [pc, #184]	; (4730 <getSlowDividerConfig+0x13c>)
    4678:	681b      	ldr	r3, [r3, #0]
    467a:	7b1b      	ldrb	r3, [r3, #12]
    467c:	461a      	mov	r2, r3
    467e:	9b03      	ldr	r3, [sp, #12]
    4680:	4293      	cmp	r3, r2
    4682:	d3db      	bcc.n	463c <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4684:	9b05      	ldr	r3, [sp, #20]
    4686:	2b00      	cmp	r3, #0
    4688:	d14a      	bne.n	4720 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    468a:	9a04      	ldr	r2, [sp, #16]
    468c:	4613      	mov	r3, r2
    468e:	005b      	lsls	r3, r3, #1
    4690:	4413      	add	r3, r2
    4692:	009b      	lsls	r3, r3, #2
    4694:	4a27      	ldr	r2, [pc, #156]	; (4734 <getSlowDividerConfig+0x140>)
    4696:	4413      	add	r3, r2
    4698:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    469a:	4926      	ldr	r1, [pc, #152]	; (4734 <getSlowDividerConfig+0x140>)
    469c:	9a04      	ldr	r2, [sp, #16]
    469e:	4613      	mov	r3, r2
    46a0:	005b      	lsls	r3, r3, #1
    46a2:	4413      	add	r3, r2
    46a4:	009b      	lsls	r3, r3, #2
    46a6:	440b      	add	r3, r1
    46a8:	9a01      	ldr	r2, [sp, #4]
    46aa:	601a      	str	r2, [r3, #0]
        switch(Name)
    46ac:	9b01      	ldr	r3, [sp, #4]
    46ae:	2b27      	cmp	r3, #39	; 0x27
    46b0:	d027      	beq.n	4702 <getSlowDividerConfig+0x10e>
    46b2:	9b01      	ldr	r3, [sp, #4]
    46b4:	2b27      	cmp	r3, #39	; 0x27
    46b6:	d835      	bhi.n	4724 <getSlowDividerConfig+0x130>
    46b8:	9b01      	ldr	r3, [sp, #4]
    46ba:	2b25      	cmp	r3, #37	; 0x25
    46bc:	d003      	beq.n	46c6 <getSlowDividerConfig+0xd2>
    46be:	9b01      	ldr	r3, [sp, #4]
    46c0:	2b26      	cmp	r3, #38	; 0x26
    46c2:	d00f      	beq.n	46e4 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    46c4:	e02e      	b.n	4724 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    46c6:	4b1c      	ldr	r3, [pc, #112]	; (4738 <getSlowDividerConfig+0x144>)
    46c8:	695b      	ldr	r3, [r3, #20]
    46ca:	f003 030f 	and.w	r3, r3, #15
    46ce:	1c59      	adds	r1, r3, #1
    46d0:	4818      	ldr	r0, [pc, #96]	; (4734 <getSlowDividerConfig+0x140>)
    46d2:	9a04      	ldr	r2, [sp, #16]
    46d4:	4613      	mov	r3, r2
    46d6:	005b      	lsls	r3, r3, #1
    46d8:	4413      	add	r3, r2
    46da:	009b      	lsls	r3, r3, #2
    46dc:	4403      	add	r3, r0
    46de:	3304      	adds	r3, #4
    46e0:	6019      	str	r1, [r3, #0]
                break;
    46e2:	e020      	b.n	4726 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    46e4:	4b14      	ldr	r3, [pc, #80]	; (4738 <getSlowDividerConfig+0x144>)
    46e6:	699b      	ldr	r3, [r3, #24]
    46e8:	f003 030f 	and.w	r3, r3, #15
    46ec:	1c59      	adds	r1, r3, #1
    46ee:	4811      	ldr	r0, [pc, #68]	; (4734 <getSlowDividerConfig+0x140>)
    46f0:	9a04      	ldr	r2, [sp, #16]
    46f2:	4613      	mov	r3, r2
    46f4:	005b      	lsls	r3, r3, #1
    46f6:	4413      	add	r3, r2
    46f8:	009b      	lsls	r3, r3, #2
    46fa:	4403      	add	r3, r0
    46fc:	3304      	adds	r3, #4
    46fe:	6019      	str	r1, [r3, #0]
                break;
    4700:	e011      	b.n	4726 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    4702:	4b0d      	ldr	r3, [pc, #52]	; (4738 <getSlowDividerConfig+0x144>)
    4704:	69db      	ldr	r3, [r3, #28]
    4706:	f003 030f 	and.w	r3, r3, #15
    470a:	1c59      	adds	r1, r3, #1
    470c:	4809      	ldr	r0, [pc, #36]	; (4734 <getSlowDividerConfig+0x140>)
    470e:	9a04      	ldr	r2, [sp, #16]
    4710:	4613      	mov	r3, r2
    4712:	005b      	lsls	r3, r3, #1
    4714:	4413      	add	r3, r2
    4716:	009b      	lsls	r3, r3, #2
    4718:	4403      	add	r3, r0
    471a:	3304      	adds	r3, #4
    471c:	6019      	str	r1, [r3, #0]
                break;
    471e:	e002      	b.n	4726 <getSlowDividerConfig+0x132>
        }
    }
    4720:	bf00      	nop
    4722:	e000      	b.n	4726 <getSlowDividerConfig+0x132>
                break;
    4724:	bf00      	nop

    return ReturnValue;
    4726:	9b05      	ldr	r3, [sp, #20]
}
    4728:	4618      	mov	r0, r3
    472a:	b006      	add	sp, #24
    472c:	4770      	bx	lr
    472e:	bf00      	nop
    4730:	1fff8bc8 	.word	0x1fff8bc8
    4734:	1fff8cdc 	.word	0x1fff8cdc
    4738:	40064000 	.word	0x40064000

0000473c <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    473c:	b500      	push	{lr}
    473e:	b083      	sub	sp, #12
    4740:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    4742:	4b64      	ldr	r3, [pc, #400]	; (48d4 <Clock_Ip_ClockInitializeObjects+0x198>)
    4744:	781b      	ldrb	r3, [r3, #0]
    4746:	f083 0301 	eor.w	r3, r3, #1
    474a:	b2db      	uxtb	r3, r3
    474c:	2b00      	cmp	r3, #0
    474e:	d05b      	beq.n	4808 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    4750:	4b60      	ldr	r3, [pc, #384]	; (48d4 <Clock_Ip_ClockInitializeObjects+0x198>)
    4752:	2201      	movs	r2, #1
    4754:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    4756:	4b60      	ldr	r3, [pc, #384]	; (48d8 <Clock_Ip_ClockInitializeObjects+0x19c>)
    4758:	785b      	ldrb	r3, [r3, #1]
    475a:	461a      	mov	r2, r3
    475c:	4613      	mov	r3, r2
    475e:	009b      	lsls	r3, r3, #2
    4760:	4413      	add	r3, r2
    4762:	009b      	lsls	r3, r3, #2
    4764:	4a5d      	ldr	r2, [pc, #372]	; (48dc <Clock_Ip_ClockInitializeObjects+0x1a0>)
    4766:	4413      	add	r3, r2
    4768:	4a5d      	ldr	r2, [pc, #372]	; (48e0 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    476a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    476c:	4b5d      	ldr	r3, [pc, #372]	; (48e4 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    476e:	785b      	ldrb	r3, [r3, #1]
    4770:	461a      	mov	r2, r3
    4772:	4613      	mov	r3, r2
    4774:	009b      	lsls	r3, r3, #2
    4776:	4413      	add	r3, r2
    4778:	009b      	lsls	r3, r3, #2
    477a:	4a5b      	ldr	r2, [pc, #364]	; (48e8 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    477c:	4413      	add	r3, r2
    477e:	4a5b      	ldr	r2, [pc, #364]	; (48ec <Clock_Ip_ClockInitializeObjects+0x1b0>)
    4780:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    4782:	4b5b      	ldr	r3, [pc, #364]	; (48f0 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    4784:	791b      	ldrb	r3, [r3, #4]
    4786:	461a      	mov	r2, r3
    4788:	4613      	mov	r3, r2
    478a:	005b      	lsls	r3, r3, #1
    478c:	4413      	add	r3, r2
    478e:	009b      	lsls	r3, r3, #2
    4790:	4a58      	ldr	r2, [pc, #352]	; (48f4 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    4792:	4413      	add	r3, r2
    4794:	4a58      	ldr	r2, [pc, #352]	; (48f8 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    4796:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    4798:	4b58      	ldr	r3, [pc, #352]	; (48fc <Clock_Ip_ClockInitializeObjects+0x1c0>)
    479a:	795b      	ldrb	r3, [r3, #5]
    479c:	00db      	lsls	r3, r3, #3
    479e:	4a58      	ldr	r2, [pc, #352]	; (4900 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    47a0:	4413      	add	r3, r2
    47a2:	4a58      	ldr	r2, [pc, #352]	; (4904 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    47a4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    47a6:	4b55      	ldr	r3, [pc, #340]	; (48fc <Clock_Ip_ClockInitializeObjects+0x1c0>)
    47a8:	79db      	ldrb	r3, [r3, #7]
    47aa:	00db      	lsls	r3, r3, #3
    47ac:	4a54      	ldr	r2, [pc, #336]	; (4900 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    47ae:	4413      	add	r3, r2
    47b0:	4a55      	ldr	r2, [pc, #340]	; (4908 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    47b2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    47b4:	4b55      	ldr	r3, [pc, #340]	; (490c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47b6:	799b      	ldrb	r3, [r3, #6]
    47b8:	009b      	lsls	r3, r3, #2
    47ba:	4a55      	ldr	r2, [pc, #340]	; (4910 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    47bc:	4413      	add	r3, r2
    47be:	4a55      	ldr	r2, [pc, #340]	; (4914 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    47c0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    47c2:	4b52      	ldr	r3, [pc, #328]	; (490c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47c4:	7a1b      	ldrb	r3, [r3, #8]
    47c6:	009b      	lsls	r3, r3, #2
    47c8:	4a51      	ldr	r2, [pc, #324]	; (4910 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    47ca:	4413      	add	r3, r2
    47cc:	4a52      	ldr	r2, [pc, #328]	; (4918 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    47ce:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    47d0:	4b4e      	ldr	r3, [pc, #312]	; (490c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47d2:	7a5b      	ldrb	r3, [r3, #9]
    47d4:	009b      	lsls	r3, r3, #2
    47d6:	4a4e      	ldr	r2, [pc, #312]	; (4910 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    47d8:	4413      	add	r3, r2
    47da:	4a50      	ldr	r2, [pc, #320]	; (491c <Clock_Ip_ClockInitializeObjects+0x1e0>)
    47dc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    47de:	4b4b      	ldr	r3, [pc, #300]	; (490c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47e0:	7adb      	ldrb	r3, [r3, #11]
    47e2:	009b      	lsls	r3, r3, #2
    47e4:	4a4a      	ldr	r2, [pc, #296]	; (4910 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    47e6:	4413      	add	r3, r2
    47e8:	4a4d      	ldr	r2, [pc, #308]	; (4920 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    47ea:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    47ec:	4b47      	ldr	r3, [pc, #284]	; (490c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47ee:	7b1b      	ldrb	r3, [r3, #12]
    47f0:	009b      	lsls	r3, r3, #2
    47f2:	4a47      	ldr	r2, [pc, #284]	; (4910 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    47f4:	4413      	add	r3, r2
    47f6:	4a4b      	ldr	r2, [pc, #300]	; (4924 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    47f8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    47fa:	4b44      	ldr	r3, [pc, #272]	; (490c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47fc:	7b9b      	ldrb	r3, [r3, #14]
    47fe:	009b      	lsls	r3, r3, #2
    4800:	4a43      	ldr	r2, [pc, #268]	; (4910 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4802:	4413      	add	r3, r2
    4804:	4a48      	ldr	r2, [pc, #288]	; (4928 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    4806:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    4808:	4b48      	ldr	r3, [pc, #288]	; (492c <Clock_Ip_ClockInitializeObjects+0x1f0>)
    480a:	781b      	ldrb	r3, [r3, #0]
    480c:	2b00      	cmp	r3, #0
    480e:	d002      	beq.n	4816 <Clock_Ip_ClockInitializeObjects+0xda>
    4810:	9b01      	ldr	r3, [sp, #4]
    4812:	2b00      	cmp	r3, #0
    4814:	d003      	beq.n	481e <Clock_Ip_ClockInitializeObjects+0xe2>
    4816:	4b46      	ldr	r3, [pc, #280]	; (4930 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    4818:	781b      	ldrb	r3, [r3, #0]
    481a:	2b00      	cmp	r3, #0
    481c:	d056      	beq.n	48cc <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    481e:	f7ff fc09 	bl	4034 <getFircConfig>
    4822:	4603      	mov	r3, r0
    4824:	4a43      	ldr	r2, [pc, #268]	; (4934 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    4826:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    4828:	f7ff fc60 	bl	40ec <getSoscConfig>
    482c:	4603      	mov	r3, r0
    482e:	4a42      	ldr	r2, [pc, #264]	; (4938 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    4830:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    4832:	f7ff fca7 	bl	4184 <getSpllConfig>
    4836:	4603      	mov	r3, r0
    4838:	4a40      	ldr	r2, [pc, #256]	; (493c <Clock_Ip_ClockInitializeObjects+0x200>)
    483a:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    483c:	2019      	movs	r0, #25
    483e:	f7ff fcfb 	bl	4238 <getSelectorConfig>
    4842:	4603      	mov	r3, r0
    4844:	4a3e      	ldr	r2, [pc, #248]	; (4940 <Clock_Ip_ClockInitializeObjects+0x204>)
    4846:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    4848:	201a      	movs	r0, #26
    484a:	f7ff fcf5 	bl	4238 <getSelectorConfig>
    484e:	4603      	mov	r3, r0
    4850:	4a3c      	ldr	r2, [pc, #240]	; (4944 <Clock_Ip_ClockInitializeObjects+0x208>)
    4852:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    4854:	201b      	movs	r0, #27
    4856:	f7ff fcef 	bl	4238 <getSelectorConfig>
    485a:	4603      	mov	r3, r0
    485c:	4a3a      	ldr	r2, [pc, #232]	; (4948 <Clock_Ip_ClockInitializeObjects+0x20c>)
    485e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    4860:	201d      	movs	r0, #29
    4862:	f7ff fd7b 	bl	435c <getCoreDividerConfig>
    4866:	4603      	mov	r3, r0
    4868:	4a38      	ldr	r2, [pc, #224]	; (494c <Clock_Ip_ClockInitializeObjects+0x210>)
    486a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    486c:	201e      	movs	r0, #30
    486e:	f7ff fd75 	bl	435c <getCoreDividerConfig>
    4872:	4603      	mov	r3, r0
    4874:	4a36      	ldr	r2, [pc, #216]	; (4950 <Clock_Ip_ClockInitializeObjects+0x214>)
    4876:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    4878:	201f      	movs	r0, #31
    487a:	f7ff fd6f 	bl	435c <getCoreDividerConfig>
    487e:	4603      	mov	r3, r0
    4880:	4a34      	ldr	r2, [pc, #208]	; (4954 <Clock_Ip_ClockInitializeObjects+0x218>)
    4882:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    4884:	2021      	movs	r0, #33	; 0x21
    4886:	f7ff fe0f 	bl	44a8 <getBusDividerConfig>
    488a:	4603      	mov	r3, r0
    488c:	4a32      	ldr	r2, [pc, #200]	; (4958 <Clock_Ip_ClockInitializeObjects+0x21c>)
    488e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    4890:	2022      	movs	r0, #34	; 0x22
    4892:	f7ff fe09 	bl	44a8 <getBusDividerConfig>
    4896:	4603      	mov	r3, r0
    4898:	4a30      	ldr	r2, [pc, #192]	; (495c <Clock_Ip_ClockInitializeObjects+0x220>)
    489a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    489c:	2023      	movs	r0, #35	; 0x23
    489e:	f7ff fe03 	bl	44a8 <getBusDividerConfig>
    48a2:	4603      	mov	r3, r0
    48a4:	4a2e      	ldr	r2, [pc, #184]	; (4960 <Clock_Ip_ClockInitializeObjects+0x224>)
    48a6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    48a8:	2025      	movs	r0, #37	; 0x25
    48aa:	f7ff fea3 	bl	45f4 <getSlowDividerConfig>
    48ae:	4603      	mov	r3, r0
    48b0:	4a2c      	ldr	r2, [pc, #176]	; (4964 <Clock_Ip_ClockInitializeObjects+0x228>)
    48b2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    48b4:	2026      	movs	r0, #38	; 0x26
    48b6:	f7ff fe9d 	bl	45f4 <getSlowDividerConfig>
    48ba:	4603      	mov	r3, r0
    48bc:	4a2a      	ldr	r2, [pc, #168]	; (4968 <Clock_Ip_ClockInitializeObjects+0x22c>)
    48be:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    48c0:	2027      	movs	r0, #39	; 0x27
    48c2:	f7ff fe97 	bl	45f4 <getSlowDividerConfig>
    48c6:	4603      	mov	r3, r0
    48c8:	4a28      	ldr	r2, [pc, #160]	; (496c <Clock_Ip_ClockInitializeObjects+0x230>)
    48ca:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    48cc:	bf00      	nop
    48ce:	b003      	add	sp, #12
    48d0:	f85d fb04 	ldr.w	pc, [sp], #4
    48d4:	1fff8d00 	.word	0x1fff8d00
    48d8:	0000b7b8 	.word	0x0000b7b8
    48dc:	0000be04 	.word	0x0000be04
    48e0:	1fff8bcc 	.word	0x1fff8bcc
    48e4:	0000b778 	.word	0x0000b778
    48e8:	0000bd4c 	.word	0x0000bd4c
    48ec:	1fff8bd0 	.word	0x1fff8bd0
    48f0:	0000b788 	.word	0x0000b788
    48f4:	0000bdb8 	.word	0x0000bdb8
    48f8:	1fff8bd4 	.word	0x1fff8bd4
    48fc:	0000b7c8 	.word	0x0000b7c8
    4900:	0000be30 	.word	0x0000be30
    4904:	1fff8bd8 	.word	0x1fff8bd8
    4908:	1fff8c14 	.word	0x1fff8c14
    490c:	0000b758 	.word	0x0000b758
    4910:	0000bd08 	.word	0x0000bd08
    4914:	1fff8bdc 	.word	0x1fff8bdc
    4918:	1fff8c18 	.word	0x1fff8c18
    491c:	1fff8be0 	.word	0x1fff8be0
    4920:	1fff8c1c 	.word	0x1fff8c1c
    4924:	1fff8be4 	.word	0x1fff8be4
    4928:	1fff8c20 	.word	0x1fff8c20
    492c:	1fff8b19 	.word	0x1fff8b19
    4930:	1fff8b10 	.word	0x1fff8b10
    4934:	1fff8be8 	.word	0x1fff8be8
    4938:	1fff8bec 	.word	0x1fff8bec
    493c:	1fff8bf0 	.word	0x1fff8bf0
    4940:	1fff8bf4 	.word	0x1fff8bf4
    4944:	1fff8bf8 	.word	0x1fff8bf8
    4948:	1fff8c24 	.word	0x1fff8c24
    494c:	1fff8bfc 	.word	0x1fff8bfc
    4950:	1fff8c00 	.word	0x1fff8c00
    4954:	1fff8c28 	.word	0x1fff8c28
    4958:	1fff8c04 	.word	0x1fff8c04
    495c:	1fff8c08 	.word	0x1fff8c08
    4960:	1fff8c2c 	.word	0x1fff8c2c
    4964:	1fff8c0c 	.word	0x1fff8c0c
    4968:	1fff8c10 	.word	0x1fff8c10
    496c:	1fff8c30 	.word	0x1fff8c30

00004970 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    4970:	b500      	push	{lr}
    4972:	b083      	sub	sp, #12
    4974:	9001      	str	r0, [sp, #4]
    4976:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    4978:	9b01      	ldr	r3, [sp, #4]
    497a:	2b03      	cmp	r3, #3
    497c:	f000 8090 	beq.w	4aa0 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    4980:	9b01      	ldr	r3, [sp, #4]
    4982:	2b03      	cmp	r3, #3
    4984:	f200 80d3 	bhi.w	4b2e <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    4988:	9b01      	ldr	r3, [sp, #4]
    498a:	2b00      	cmp	r3, #0
    498c:	d040      	beq.n	4a10 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    498e:	9b01      	ldr	r3, [sp, #4]
    4990:	3b01      	subs	r3, #1
    4992:	2b01      	cmp	r3, #1
    4994:	f200 80cb 	bhi.w	4b2e <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    4998:	9b00      	ldr	r3, [sp, #0]
    499a:	2b00      	cmp	r3, #0
    499c:	f040 80c9 	bne.w	4b32 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    49a0:	4b68      	ldr	r3, [pc, #416]	; (4b44 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    49a2:	2200      	movs	r2, #0
    49a4:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    49a6:	4b68      	ldr	r3, [pc, #416]	; (4b48 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    49a8:	681b      	ldr	r3, [r3, #0]
    49aa:	685b      	ldr	r3, [r3, #4]
    49ac:	4a67      	ldr	r2, [pc, #412]	; (4b4c <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    49ae:	6812      	ldr	r2, [r2, #0]
    49b0:	4610      	mov	r0, r2
    49b2:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    49b4:	4b66      	ldr	r3, [pc, #408]	; (4b50 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    49b6:	681b      	ldr	r3, [r3, #0]
    49b8:	681b      	ldr	r3, [r3, #0]
    49ba:	4a66      	ldr	r2, [pc, #408]	; (4b54 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    49bc:	6812      	ldr	r2, [r2, #0]
    49be:	4610      	mov	r0, r2
    49c0:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    49c2:	4b65      	ldr	r3, [pc, #404]	; (4b58 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    49c4:	681b      	ldr	r3, [r3, #0]
    49c6:	681b      	ldr	r3, [r3, #0]
    49c8:	4a64      	ldr	r2, [pc, #400]	; (4b5c <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    49ca:	6812      	ldr	r2, [r2, #0]
    49cc:	4610      	mov	r0, r2
    49ce:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    49d0:	4b63      	ldr	r3, [pc, #396]	; (4b60 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    49d2:	681b      	ldr	r3, [r3, #0]
    49d4:	681b      	ldr	r3, [r3, #0]
    49d6:	4a63      	ldr	r2, [pc, #396]	; (4b64 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    49d8:	6812      	ldr	r2, [r2, #0]
    49da:	4610      	mov	r0, r2
    49dc:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    49de:	4b62      	ldr	r3, [pc, #392]	; (4b68 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    49e0:	681b      	ldr	r3, [r3, #0]
    49e2:	691b      	ldr	r3, [r3, #16]
    49e4:	4a61      	ldr	r2, [pc, #388]	; (4b6c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    49e6:	6812      	ldr	r2, [r2, #0]
    49e8:	6812      	ldr	r2, [r2, #0]
    49ea:	4610      	mov	r0, r2
    49ec:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    49ee:	4b60      	ldr	r3, [pc, #384]	; (4b70 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    49f0:	681b      	ldr	r3, [r3, #0]
    49f2:	68db      	ldr	r3, [r3, #12]
    49f4:	4a5f      	ldr	r2, [pc, #380]	; (4b74 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    49f6:	6812      	ldr	r2, [r2, #0]
    49f8:	6812      	ldr	r2, [r2, #0]
    49fa:	4610      	mov	r0, r2
    49fc:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    49fe:	4b5e      	ldr	r3, [pc, #376]	; (4b78 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4a00:	681b      	ldr	r3, [r3, #0]
    4a02:	689b      	ldr	r3, [r3, #8]
    4a04:	4a5d      	ldr	r2, [pc, #372]	; (4b7c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4a06:	6812      	ldr	r2, [r2, #0]
    4a08:	6812      	ldr	r2, [r2, #0]
    4a0a:	4610      	mov	r0, r2
    4a0c:	4798      	blx	r3
            }
        }
        break;
    4a0e:	e090      	b.n	4b32 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4a10:	9b00      	ldr	r3, [sp, #0]
    4a12:	2b02      	cmp	r3, #2
    4a14:	f040 808f 	bne.w	4b36 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4a18:	4b4a      	ldr	r3, [pc, #296]	; (4b44 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4a1a:	2201      	movs	r2, #1
    4a1c:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4a1e:	4b56      	ldr	r3, [pc, #344]	; (4b78 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4a20:	681b      	ldr	r3, [r3, #0]
    4a22:	685b      	ldr	r3, [r3, #4]
    4a24:	4a55      	ldr	r2, [pc, #340]	; (4b7c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4a26:	6812      	ldr	r2, [r2, #0]
    4a28:	4610      	mov	r0, r2
    4a2a:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4a2c:	4b50      	ldr	r3, [pc, #320]	; (4b70 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a2e:	681b      	ldr	r3, [r3, #0]
    4a30:	691b      	ldr	r3, [r3, #16]
    4a32:	4a50      	ldr	r2, [pc, #320]	; (4b74 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4a34:	6812      	ldr	r2, [r2, #0]
    4a36:	4610      	mov	r0, r2
    4a38:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4a3a:	4b4d      	ldr	r3, [pc, #308]	; (4b70 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a3c:	681b      	ldr	r3, [r3, #0]
    4a3e:	689b      	ldr	r3, [r3, #8]
    4a40:	4a4c      	ldr	r2, [pc, #304]	; (4b74 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4a42:	6812      	ldr	r2, [r2, #0]
    4a44:	4610      	mov	r0, r2
    4a46:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4a48:	4b47      	ldr	r3, [pc, #284]	; (4b68 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4a4a:	681b      	ldr	r3, [r3, #0]
    4a4c:	68db      	ldr	r3, [r3, #12]
    4a4e:	4a47      	ldr	r2, [pc, #284]	; (4b6c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4a50:	6812      	ldr	r2, [r2, #0]
    4a52:	4610      	mov	r0, r2
    4a54:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4a56:	4b44      	ldr	r3, [pc, #272]	; (4b68 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4a58:	681b      	ldr	r3, [r3, #0]
    4a5a:	689b      	ldr	r3, [r3, #8]
    4a5c:	4a43      	ldr	r2, [pc, #268]	; (4b6c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4a5e:	6812      	ldr	r2, [r2, #0]
    4a60:	6812      	ldr	r2, [r2, #0]
    4a62:	4610      	mov	r0, r2
    4a64:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    4a66:	4b38      	ldr	r3, [pc, #224]	; (4b48 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4a68:	681b      	ldr	r3, [r3, #0]
    4a6a:	685b      	ldr	r3, [r3, #4]
    4a6c:	4a44      	ldr	r2, [pc, #272]	; (4b80 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    4a6e:	6812      	ldr	r2, [r2, #0]
    4a70:	4610      	mov	r0, r2
    4a72:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    4a74:	4b36      	ldr	r3, [pc, #216]	; (4b50 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4a76:	681b      	ldr	r3, [r3, #0]
    4a78:	681b      	ldr	r3, [r3, #0]
    4a7a:	4a42      	ldr	r2, [pc, #264]	; (4b84 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    4a7c:	6812      	ldr	r2, [r2, #0]
    4a7e:	4610      	mov	r0, r2
    4a80:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    4a82:	4b35      	ldr	r3, [pc, #212]	; (4b58 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4a84:	681b      	ldr	r3, [r3, #0]
    4a86:	681b      	ldr	r3, [r3, #0]
    4a88:	4a3f      	ldr	r2, [pc, #252]	; (4b88 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    4a8a:	6812      	ldr	r2, [r2, #0]
    4a8c:	4610      	mov	r0, r2
    4a8e:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    4a90:	4b33      	ldr	r3, [pc, #204]	; (4b60 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4a92:	681b      	ldr	r3, [r3, #0]
    4a94:	681b      	ldr	r3, [r3, #0]
    4a96:	4a3d      	ldr	r2, [pc, #244]	; (4b8c <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    4a98:	6812      	ldr	r2, [r2, #0]
    4a9a:	4610      	mov	r0, r2
    4a9c:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4a9e:	e04a      	b.n	4b36 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4aa0:	9b00      	ldr	r3, [sp, #0]
    4aa2:	2b02      	cmp	r3, #2
    4aa4:	d149      	bne.n	4b3a <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4aa6:	4b27      	ldr	r3, [pc, #156]	; (4b44 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4aa8:	2201      	movs	r2, #1
    4aaa:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4aac:	4b32      	ldr	r3, [pc, #200]	; (4b78 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4aae:	681b      	ldr	r3, [r3, #0]
    4ab0:	685b      	ldr	r3, [r3, #4]
    4ab2:	4a32      	ldr	r2, [pc, #200]	; (4b7c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4ab4:	6812      	ldr	r2, [r2, #0]
    4ab6:	4610      	mov	r0, r2
    4ab8:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4aba:	4b2d      	ldr	r3, [pc, #180]	; (4b70 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4abc:	681b      	ldr	r3, [r3, #0]
    4abe:	691b      	ldr	r3, [r3, #16]
    4ac0:	4a2c      	ldr	r2, [pc, #176]	; (4b74 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4ac2:	6812      	ldr	r2, [r2, #0]
    4ac4:	4610      	mov	r0, r2
    4ac6:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4ac8:	4b29      	ldr	r3, [pc, #164]	; (4b70 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4aca:	681b      	ldr	r3, [r3, #0]
    4acc:	689b      	ldr	r3, [r3, #8]
    4ace:	4a29      	ldr	r2, [pc, #164]	; (4b74 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4ad0:	6812      	ldr	r2, [r2, #0]
    4ad2:	4610      	mov	r0, r2
    4ad4:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4ad6:	4b24      	ldr	r3, [pc, #144]	; (4b68 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4ad8:	681b      	ldr	r3, [r3, #0]
    4ada:	68db      	ldr	r3, [r3, #12]
    4adc:	4a23      	ldr	r2, [pc, #140]	; (4b6c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4ade:	6812      	ldr	r2, [r2, #0]
    4ae0:	4610      	mov	r0, r2
    4ae2:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4ae4:	4b20      	ldr	r3, [pc, #128]	; (4b68 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4ae6:	681b      	ldr	r3, [r3, #0]
    4ae8:	689b      	ldr	r3, [r3, #8]
    4aea:	4a20      	ldr	r2, [pc, #128]	; (4b6c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4aec:	6812      	ldr	r2, [r2, #0]
    4aee:	6812      	ldr	r2, [r2, #0]
    4af0:	4610      	mov	r0, r2
    4af2:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    4af4:	4b26      	ldr	r3, [pc, #152]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    4af6:	681b      	ldr	r3, [r3, #0]
    4af8:	685b      	ldr	r3, [r3, #4]
    4afa:	4a26      	ldr	r2, [pc, #152]	; (4b94 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4afc:	6812      	ldr	r2, [r2, #0]
    4afe:	4610      	mov	r0, r2
    4b00:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    4b02:	4b25      	ldr	r3, [pc, #148]	; (4b98 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    4b04:	681b      	ldr	r3, [r3, #0]
    4b06:	681b      	ldr	r3, [r3, #0]
    4b08:	4a24      	ldr	r2, [pc, #144]	; (4b9c <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    4b0a:	6812      	ldr	r2, [r2, #0]
    4b0c:	4610      	mov	r0, r2
    4b0e:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    4b10:	4b23      	ldr	r3, [pc, #140]	; (4ba0 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    4b12:	681b      	ldr	r3, [r3, #0]
    4b14:	681b      	ldr	r3, [r3, #0]
    4b16:	4a23      	ldr	r2, [pc, #140]	; (4ba4 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    4b18:	6812      	ldr	r2, [r2, #0]
    4b1a:	4610      	mov	r0, r2
    4b1c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    4b1e:	4b22      	ldr	r3, [pc, #136]	; (4ba8 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    4b20:	681b      	ldr	r3, [r3, #0]
    4b22:	681b      	ldr	r3, [r3, #0]
    4b24:	4a21      	ldr	r2, [pc, #132]	; (4bac <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    4b26:	6812      	ldr	r2, [r2, #0]
    4b28:	4610      	mov	r0, r2
    4b2a:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4b2c:	e005      	b.n	4b3a <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    4b2e:	bf00      	nop
    4b30:	e004      	b.n	4b3c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4b32:	bf00      	nop
    4b34:	e002      	b.n	4b3c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4b36:	bf00      	nop
    4b38:	e000      	b.n	4b3c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4b3a:	bf00      	nop
    }

}
    4b3c:	bf00      	nop
    4b3e:	b003      	add	sp, #12
    4b40:	f85d fb04 	ldr.w	pc, [sp], #4
    4b44:	1fff8b19 	.word	0x1fff8b19
    4b48:	1fff8bd8 	.word	0x1fff8bd8
    4b4c:	1fff8bf8 	.word	0x1fff8bf8
    4b50:	1fff8bdc 	.word	0x1fff8bdc
    4b54:	1fff8c00 	.word	0x1fff8c00
    4b58:	1fff8be0 	.word	0x1fff8be0
    4b5c:	1fff8c08 	.word	0x1fff8c08
    4b60:	1fff8be4 	.word	0x1fff8be4
    4b64:	1fff8c10 	.word	0x1fff8c10
    4b68:	1fff8bcc 	.word	0x1fff8bcc
    4b6c:	1fff8bf0 	.word	0x1fff8bf0
    4b70:	1fff8bd0 	.word	0x1fff8bd0
    4b74:	1fff8bec 	.word	0x1fff8bec
    4b78:	1fff8bd4 	.word	0x1fff8bd4
    4b7c:	1fff8be8 	.word	0x1fff8be8
    4b80:	1fff8bf4 	.word	0x1fff8bf4
    4b84:	1fff8bfc 	.word	0x1fff8bfc
    4b88:	1fff8c04 	.word	0x1fff8c04
    4b8c:	1fff8c0c 	.word	0x1fff8c0c
    4b90:	1fff8c14 	.word	0x1fff8c14
    4b94:	1fff8c24 	.word	0x1fff8c24
    4b98:	1fff8c18 	.word	0x1fff8c18
    4b9c:	1fff8c28 	.word	0x1fff8c28
    4ba0:	1fff8c1c 	.word	0x1fff8c1c
    4ba4:	1fff8c2c 	.word	0x1fff8c2c
    4ba8:	1fff8c20 	.word	0x1fff8c20
    4bac:	1fff8c30 	.word	0x1fff8c30

00004bb0 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    4bb0:	b500      	push	{lr}
    4bb2:	b083      	sub	sp, #12
    4bb4:	9001      	str	r0, [sp, #4]
    4bb6:	9100      	str	r1, [sp, #0]
    switch(Command)
    4bb8:	9b00      	ldr	r3, [sp, #0]
    4bba:	2b04      	cmp	r3, #4
    4bbc:	d010      	beq.n	4be0 <Clock_Ip_Command+0x30>
    4bbe:	9b00      	ldr	r3, [sp, #0]
    4bc0:	2b04      	cmp	r3, #4
    4bc2:	d811      	bhi.n	4be8 <Clock_Ip_Command+0x38>
    4bc4:	9b00      	ldr	r3, [sp, #0]
    4bc6:	2b01      	cmp	r3, #1
    4bc8:	d006      	beq.n	4bd8 <Clock_Ip_Command+0x28>
    4bca:	9b00      	ldr	r3, [sp, #0]
    4bcc:	2b02      	cmp	r3, #2
    4bce:	d10b      	bne.n	4be8 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    4bd0:	9801      	ldr	r0, [sp, #4]
    4bd2:	f7ff fdb3 	bl	473c <Clock_Ip_ClockInitializeObjects>
            break;
    4bd6:	e008      	b.n	4bea <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    4bd8:	9801      	ldr	r0, [sp, #4]
    4bda:	f7ff f9db 	bl	3f94 <Clock_Ip_SpecificPlatformInitClock>
            break;
    4bde:	e004      	b.n	4bea <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    4be0:	9801      	ldr	r0, [sp, #4]
    4be2:	f7ff f8ed 	bl	3dc0 <DisableSafeClock>
            break;
    4be6:	e000      	b.n	4bea <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    4be8:	bf00      	nop
    }
}
    4bea:	bf00      	nop
    4bec:	b003      	add	sp, #12
    4bee:	f85d fb04 	ldr.w	pc, [sp], #4
    4bf2:	bf00      	nop

00004bf4 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    4bf4:	b500      	push	{lr}
    4bf6:	b085      	sub	sp, #20
    4bf8:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    4bfa:	4a20      	ldr	r2, [pc, #128]	; (4c7c <Mcu_Init+0x88>)
    4bfc:	9b01      	ldr	r3, [sp, #4]
    4bfe:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4c00:	2300      	movs	r3, #0
    4c02:	9303      	str	r3, [sp, #12]
    4c04:	e010      	b.n	4c28 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    4c06:	4b1d      	ldr	r3, [pc, #116]	; (4c7c <Mcu_Init+0x88>)
    4c08:	681b      	ldr	r3, [r3, #0]
    4c0a:	6919      	ldr	r1, [r3, #16]
    4c0c:	9a03      	ldr	r2, [sp, #12]
    4c0e:	4613      	mov	r3, r2
    4c10:	005b      	lsls	r3, r3, #1
    4c12:	4413      	add	r3, r2
    4c14:	009b      	lsls	r3, r3, #2
    4c16:	440b      	add	r3, r1
    4c18:	681b      	ldr	r3, [r3, #0]
    4c1a:	9a03      	ldr	r2, [sp, #12]
    4c1c:	b2d1      	uxtb	r1, r2
    4c1e:	4a18      	ldr	r2, [pc, #96]	; (4c80 <Mcu_Init+0x8c>)
    4c20:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4c22:	9b03      	ldr	r3, [sp, #12]
    4c24:	3301      	adds	r3, #1
    4c26:	9303      	str	r3, [sp, #12]
    4c28:	4b14      	ldr	r3, [pc, #80]	; (4c7c <Mcu_Init+0x88>)
    4c2a:	681b      	ldr	r3, [r3, #0]
    4c2c:	689b      	ldr	r3, [r3, #8]
    4c2e:	9a03      	ldr	r2, [sp, #12]
    4c30:	429a      	cmp	r2, r3
    4c32:	d3e8      	bcc.n	4c06 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4c34:	2300      	movs	r3, #0
    4c36:	9303      	str	r3, [sp, #12]
    4c38:	e010      	b.n	4c5c <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    4c3a:	4b10      	ldr	r3, [pc, #64]	; (4c7c <Mcu_Init+0x88>)
    4c3c:	681b      	ldr	r3, [r3, #0]
    4c3e:	6959      	ldr	r1, [r3, #20]
    4c40:	9a03      	ldr	r2, [sp, #12]
    4c42:	4613      	mov	r3, r2
    4c44:	01db      	lsls	r3, r3, #7
    4c46:	1a9b      	subs	r3, r3, r2
    4c48:	00db      	lsls	r3, r3, #3
    4c4a:	440b      	add	r3, r1
    4c4c:	681b      	ldr	r3, [r3, #0]
    4c4e:	9a03      	ldr	r2, [sp, #12]
    4c50:	b2d1      	uxtb	r1, r2
    4c52:	4a0c      	ldr	r2, [pc, #48]	; (4c84 <Mcu_Init+0x90>)
    4c54:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4c56:	9b03      	ldr	r3, [sp, #12]
    4c58:	3301      	adds	r3, #1
    4c5a:	9303      	str	r3, [sp, #12]
    4c5c:	4b07      	ldr	r3, [pc, #28]	; (4c7c <Mcu_Init+0x88>)
    4c5e:	681b      	ldr	r3, [r3, #0]
    4c60:	68db      	ldr	r3, [r3, #12]
    4c62:	9a03      	ldr	r2, [sp, #12]
    4c64:	429a      	cmp	r2, r3
    4c66:	d3e8      	bcc.n	4c3a <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    4c68:	4b04      	ldr	r3, [pc, #16]	; (4c7c <Mcu_Init+0x88>)
    4c6a:	681b      	ldr	r3, [r3, #0]
    4c6c:	699b      	ldr	r3, [r3, #24]
    4c6e:	4618      	mov	r0, r3
    4c70:	f000 f88a 	bl	4d88 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4c74:	bf00      	nop
    4c76:	b005      	add	sp, #20
    4c78:	f85d fb04 	ldr.w	pc, [sp], #4
    4c7c:	1fff8d0c 	.word	0x1fff8d0c
    4c80:	1fff8d08 	.word	0x1fff8d08
    4c84:	1fff8d04 	.word	0x1fff8d04

00004c88 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    4c88:	b084      	sub	sp, #16
    4c8a:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    4c8c:	2301      	movs	r3, #1
    4c8e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    4c92:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    4c96:	4618      	mov	r0, r3
    4c98:	b004      	add	sp, #16
    4c9a:	4770      	bx	lr

00004c9c <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    4c9c:	b500      	push	{lr}
    4c9e:	b085      	sub	sp, #20
    4ca0:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    4ca2:	4a0e      	ldr	r2, [pc, #56]	; (4cdc <Mcu_InitClock+0x40>)
    4ca4:	9b01      	ldr	r3, [sp, #4]
    4ca6:	4413      	add	r3, r2
    4ca8:	781b      	ldrb	r3, [r3, #0]
    4caa:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    4cae:	4b0c      	ldr	r3, [pc, #48]	; (4ce0 <Mcu_InitClock+0x44>)
    4cb0:	681b      	ldr	r3, [r3, #0]
    4cb2:	6959      	ldr	r1, [r3, #20]
    4cb4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4cb8:	4613      	mov	r3, r2
    4cba:	01db      	lsls	r3, r3, #7
    4cbc:	1a9b      	subs	r3, r3, r2
    4cbe:	00db      	lsls	r3, r3, #3
    4cc0:	440b      	add	r3, r1
    4cc2:	4618      	mov	r0, r3
    4cc4:	f000 f86a 	bl	4d9c <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    4cc8:	2300      	movs	r3, #0
    4cca:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    4cce:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    4cd2:	4618      	mov	r0, r3
    4cd4:	b005      	add	sp, #20
    4cd6:	f85d fb04 	ldr.w	pc, [sp], #4
    4cda:	bf00      	nop
    4cdc:	1fff8d04 	.word	0x1fff8d04
    4ce0:	1fff8d0c 	.word	0x1fff8d0c

00004ce4 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    4ce4:	b500      	push	{lr}
    4ce6:	b085      	sub	sp, #20
    4ce8:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    4cea:	4a0d      	ldr	r2, [pc, #52]	; (4d20 <Mcu_SetMode+0x3c>)
    4cec:	9b01      	ldr	r3, [sp, #4]
    4cee:	4413      	add	r3, r2
    4cf0:	781b      	ldrb	r3, [r3, #0]
    4cf2:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    4cf6:	f005 fa8f 	bl	a218 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    4cfa:	4b0a      	ldr	r3, [pc, #40]	; (4d24 <Mcu_SetMode+0x40>)
    4cfc:	681b      	ldr	r3, [r3, #0]
    4cfe:	6919      	ldr	r1, [r3, #16]
    4d00:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4d04:	4613      	mov	r3, r2
    4d06:	005b      	lsls	r3, r3, #1
    4d08:	4413      	add	r3, r2
    4d0a:	009b      	lsls	r3, r3, #2
    4d0c:	440b      	add	r3, r1
    4d0e:	4618      	mov	r0, r3
    4d10:	f000 f84e 	bl	4db0 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    4d14:	f005 faac 	bl	a270 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4d18:	bf00      	nop
    4d1a:	b005      	add	sp, #20
    4d1c:	f85d fb04 	ldr.w	pc, [sp], #4
    4d20:	1fff8d08 	.word	0x1fff8d08
    4d24:	1fff8d0c 	.word	0x1fff8d0c

00004d28 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    4d28:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    4d2a:	2302      	movs	r3, #2
    4d2c:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    4d2e:	9b01      	ldr	r3, [sp, #4]
}
    4d30:	4618      	mov	r0, r3
    4d32:	b002      	add	sp, #8
    4d34:	4770      	bx	lr

00004d36 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    4d36:	b500      	push	{lr}
    4d38:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    4d3a:	f000 f843 	bl	4dc4 <Mcu_Ipw_GetResetReason>
    4d3e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    4d40:	9b01      	ldr	r3, [sp, #4]
}
    4d42:	4618      	mov	r0, r3
    4d44:	b003      	add	sp, #12
    4d46:	f85d fb04 	ldr.w	pc, [sp], #4

00004d4a <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    4d4a:	b500      	push	{lr}
    4d4c:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    4d4e:	f000 f83f 	bl	4dd0 <Mcu_Ipw_GetResetRawValue>
    4d52:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    4d54:	9b01      	ldr	r3, [sp, #4]
}
    4d56:	4618      	mov	r0, r3
    4d58:	b003      	add	sp, #12
    4d5a:	f85d fb04 	ldr.w	pc, [sp], #4

00004d5e <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4d5e:	b500      	push	{lr}
    4d60:	b083      	sub	sp, #12
    4d62:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    4d64:	9801      	ldr	r0, [sp, #4]
    4d66:	f000 f839 	bl	4ddc <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    4d6a:	bf00      	nop
    4d6c:	b003      	add	sp, #12
    4d6e:	f85d fb04 	ldr.w	pc, [sp], #4

00004d72 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    4d72:	b082      	sub	sp, #8
    4d74:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    4d76:	4b03      	ldr	r3, [pc, #12]	; (4d84 <Mcu_ClkSrcFailureNotification+0x12>)
    4d78:	681b      	ldr	r3, [r3, #0]
    4d7a:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    4d7c:	bf00      	nop
    4d7e:	b002      	add	sp, #8
    4d80:	4770      	bx	lr
    4d82:	bf00      	nop
    4d84:	1fff8d0c 	.word	0x1fff8d0c

00004d88 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    4d88:	b500      	push	{lr}
    4d8a:	b083      	sub	sp, #12
    4d8c:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    4d8e:	9801      	ldr	r0, [sp, #4]
    4d90:	f000 f882 	bl	4e98 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    4d94:	bf00      	nop
    4d96:	b003      	add	sp, #12
    4d98:	f85d fb04 	ldr.w	pc, [sp], #4

00004d9c <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    4d9c:	b500      	push	{lr}
    4d9e:	b083      	sub	sp, #12
    4da0:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    4da2:	9801      	ldr	r0, [sp, #4]
    4da4:	f7fc fc6a 	bl	167c <Clock_Ip_InitClock>
}
    4da8:	bf00      	nop
    4daa:	b003      	add	sp, #12
    4dac:	f85d fb04 	ldr.w	pc, [sp], #4

00004db0 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    4db0:	b500      	push	{lr}
    4db2:	b083      	sub	sp, #12
    4db4:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    4db6:	9801      	ldr	r0, [sp, #4]
    4db8:	f000 f820 	bl	4dfc <Power_Ip_SetMode>
}
    4dbc:	bf00      	nop
    4dbe:	b003      	add	sp, #12
    4dc0:	f85d fb04 	ldr.w	pc, [sp], #4

00004dc4 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    4dc4:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    4dc6:	f000 f84f 	bl	4e68 <Power_Ip_GetResetReason>
    4dca:	4603      	mov	r3, r0
}
    4dcc:	4618      	mov	r0, r3
    4dce:	bd08      	pop	{r3, pc}

00004dd0 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    4dd0:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    4dd2:	f000 f857 	bl	4e84 <Power_Ip_GetResetRawValue>
    4dd6:	4603      	mov	r3, r0
}
    4dd8:	4618      	mov	r0, r3
    4dda:	bd08      	pop	{r3, pc}

00004ddc <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4ddc:	b500      	push	{lr}
    4dde:	b083      	sub	sp, #12
    4de0:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    4de2:	9b01      	ldr	r3, [sp, #4]
    4de4:	2b00      	cmp	r3, #0
    4de6:	d102      	bne.n	4dee <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    4de8:	f000 f86c 	bl	4ec4 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    4dec:	e001      	b.n	4df2 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    4dee:	f000 f86e 	bl	4ece <Power_Ip_EnableSleepOnExit>
}
    4df2:	bf00      	nop
    4df4:	b003      	add	sp, #12
    4df6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00004dfc <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4dfc:	b500      	push	{lr}
    4dfe:	b085      	sub	sp, #20
    4e00:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    4e02:	9b01      	ldr	r3, [sp, #4]
    4e04:	685b      	ldr	r3, [r3, #4]
    4e06:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    4e08:	9802      	ldr	r0, [sp, #8]
    4e0a:	f000 f9f5 	bl	51f8 <Power_Ip_SMC_ModeCheckEntry>
    4e0e:	4603      	mov	r3, r0
    4e10:	2b00      	cmp	r3, #0
    4e12:	d002      	beq.n	4e1a <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e14:	2301      	movs	r3, #1
    4e16:	9303      	str	r3, [sp, #12]
    4e18:	e003      	b.n	4e22 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    4e1a:	9801      	ldr	r0, [sp, #4]
    4e1c:	f000 fa1e 	bl	525c <Power_Ip_SMC_ModeConfig>
    4e20:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    4e22:	9b03      	ldr	r3, [sp, #12]
    4e24:	2b01      	cmp	r3, #1
    4e26:	d103      	bne.n	4e30 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4e28:	21ff      	movs	r1, #255	; 0xff
    4e2a:	2003      	movs	r0, #3
    4e2c:	f000 f8f4 	bl	5018 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    4e30:	bf00      	nop
    4e32:	b005      	add	sp, #20
    4e34:	f85d fb04 	ldr.w	pc, [sp], #4

00004e38 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    4e38:	b084      	sub	sp, #16
    4e3a:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    4e3c:	230c      	movs	r3, #12
    4e3e:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    4e40:	4a08      	ldr	r2, [pc, #32]	; (4e64 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4e42:	9b01      	ldr	r3, [sp, #4]
    4e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4e48:	2b0e      	cmp	r3, #14
    4e4a:	d805      	bhi.n	4e58 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    4e4c:	4a05      	ldr	r2, [pc, #20]	; (4e64 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4e4e:	9b01      	ldr	r3, [sp, #4]
    4e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4e54:	9303      	str	r3, [sp, #12]
    4e56:	e001      	b.n	4e5c <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    4e58:	230c      	movs	r3, #12
    4e5a:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    4e5c:	9b03      	ldr	r3, [sp, #12]
}
    4e5e:	4618      	mov	r0, r3
    4e60:	b004      	add	sp, #16
    4e62:	4770      	bx	lr
    4e64:	0000bea4 	.word	0x0000bea4

00004e68 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    4e68:	b500      	push	{lr}
    4e6a:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    4e6c:	f000 f940 	bl	50f0 <Power_Ip_RCM_GetResetReason>
    4e70:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    4e72:	9801      	ldr	r0, [sp, #4]
    4e74:	f7ff ffe0 	bl	4e38 <Power_Ip_ConvertIntergeToResetType>
    4e78:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    4e7a:	9b00      	ldr	r3, [sp, #0]
}
    4e7c:	4618      	mov	r0, r3
    4e7e:	b003      	add	sp, #12
    4e80:	f85d fb04 	ldr.w	pc, [sp], #4

00004e84 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    4e84:	b500      	push	{lr}
    4e86:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    4e88:	f000 f98a 	bl	51a0 <Power_Ip_RCM_GetResetRawValue>
    4e8c:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    4e8e:	9b01      	ldr	r3, [sp, #4]
}
    4e90:	4618      	mov	r0, r3
    4e92:	b003      	add	sp, #12
    4e94:	f85d fb04 	ldr.w	pc, [sp], #4

00004e98 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    4e98:	b500      	push	{lr}
    4e9a:	b083      	sub	sp, #12
    4e9c:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    4e9e:	9b01      	ldr	r3, [sp, #4]
    4ea0:	681b      	ldr	r3, [r3, #0]
    4ea2:	4618      	mov	r0, r3
    4ea4:	f000 f90e 	bl	50c4 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    4ea8:	9b01      	ldr	r3, [sp, #4]
    4eaa:	685b      	ldr	r3, [r3, #4]
    4eac:	4618      	mov	r0, r3
    4eae:	f000 f86d 	bl	4f8c <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    4eb2:	9b01      	ldr	r3, [sp, #4]
    4eb4:	689b      	ldr	r3, [r3, #8]
    4eb6:	4618      	mov	r0, r3
    4eb8:	f000 f990 	bl	51dc <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    4ebc:	bf00      	nop
    4ebe:	b003      	add	sp, #12
    4ec0:	f85d fb04 	ldr.w	pc, [sp], #4

00004ec4 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    4ec4:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    4ec6:	f000 f811 	bl	4eec <Power_Ip_CM4_DisableSleepOnExit>
}
    4eca:	bf00      	nop
    4ecc:	bd08      	pop	{r3, pc}

00004ece <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    4ece:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    4ed0:	f000 f820 	bl	4f14 <Power_Ip_CM4_EnableSleepOnExit>
}
    4ed4:	bf00      	nop
    4ed6:	bd08      	pop	{r3, pc}

00004ed8 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    4ed8:	b082      	sub	sp, #8
    4eda:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    4edc:	4a02      	ldr	r2, [pc, #8]	; (4ee8 <Power_Ip_InstallNotificationsCallback+0x10>)
    4ede:	9b01      	ldr	r3, [sp, #4]
    4ee0:	6013      	str	r3, [r2, #0]
}
    4ee2:	bf00      	nop
    4ee4:	b002      	add	sp, #8
    4ee6:	4770      	bx	lr
    4ee8:	1fff8b1c 	.word	0x1fff8b1c

00004eec <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    4eec:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4eee:	2300      	movs	r3, #0
    4ef0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4ef2:	4b07      	ldr	r3, [pc, #28]	; (4f10 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4ef4:	681b      	ldr	r3, [r3, #0]
    4ef6:	685b      	ldr	r3, [r3, #4]
    4ef8:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    4efa:	9b01      	ldr	r3, [sp, #4]
    4efc:	f023 0302 	bic.w	r3, r3, #2
    4f00:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f02:	4b03      	ldr	r3, [pc, #12]	; (4f10 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4f04:	681b      	ldr	r3, [r3, #0]
    4f06:	9a01      	ldr	r2, [sp, #4]
    4f08:	605a      	str	r2, [r3, #4]
}
    4f0a:	bf00      	nop
    4f0c:	b002      	add	sp, #8
    4f0e:	4770      	bx	lr
    4f10:	1fff8b20 	.word	0x1fff8b20

00004f14 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    4f14:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f16:	2300      	movs	r3, #0
    4f18:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f1a:	4b07      	ldr	r3, [pc, #28]	; (4f38 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4f1c:	681b      	ldr	r3, [r3, #0]
    4f1e:	685b      	ldr	r3, [r3, #4]
    4f20:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    4f22:	9b01      	ldr	r3, [sp, #4]
    4f24:	f043 0302 	orr.w	r3, r3, #2
    4f28:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f2a:	4b03      	ldr	r3, [pc, #12]	; (4f38 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4f2c:	681b      	ldr	r3, [r3, #0]
    4f2e:	9a01      	ldr	r2, [sp, #4]
    4f30:	605a      	str	r2, [r3, #4]
}
    4f32:	bf00      	nop
    4f34:	b002      	add	sp, #8
    4f36:	4770      	bx	lr
    4f38:	1fff8b20 	.word	0x1fff8b20

00004f3c <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    4f3c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f3e:	2300      	movs	r3, #0
    4f40:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f42:	4b07      	ldr	r3, [pc, #28]	; (4f60 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4f44:	681b      	ldr	r3, [r3, #0]
    4f46:	685b      	ldr	r3, [r3, #4]
    4f48:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    4f4a:	9b01      	ldr	r3, [sp, #4]
    4f4c:	f043 0304 	orr.w	r3, r3, #4
    4f50:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f52:	4b03      	ldr	r3, [pc, #12]	; (4f60 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4f54:	681b      	ldr	r3, [r3, #0]
    4f56:	9a01      	ldr	r2, [sp, #4]
    4f58:	605a      	str	r2, [r3, #4]
}
    4f5a:	bf00      	nop
    4f5c:	b002      	add	sp, #8
    4f5e:	4770      	bx	lr
    4f60:	1fff8b20 	.word	0x1fff8b20

00004f64 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    4f64:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f66:	2300      	movs	r3, #0
    4f68:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f6a:	4b07      	ldr	r3, [pc, #28]	; (4f88 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4f6c:	681b      	ldr	r3, [r3, #0]
    4f6e:	685b      	ldr	r3, [r3, #4]
    4f70:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    4f72:	9b01      	ldr	r3, [sp, #4]
    4f74:	f023 0304 	bic.w	r3, r3, #4
    4f78:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f7a:	4b03      	ldr	r3, [pc, #12]	; (4f88 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4f7c:	681b      	ldr	r3, [r3, #0]
    4f7e:	9a01      	ldr	r2, [sp, #4]
    4f80:	605a      	str	r2, [r3, #4]
}
    4f82:	bf00      	nop
    4f84:	b002      	add	sp, #8
    4f86:	4770      	bx	lr
    4f88:	1fff8b20 	.word	0x1fff8b20

00004f8c <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    4f8c:	b084      	sub	sp, #16
    4f8e:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    4f90:	4b20      	ldr	r3, [pc, #128]	; (5014 <Power_Ip_PMC_PowerInit+0x88>)
    4f92:	781b      	ldrb	r3, [r3, #0]
    4f94:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    4f98:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4f9c:	f003 030f 	and.w	r3, r3, #15
    4fa0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    4fa4:	9b01      	ldr	r3, [sp, #4]
    4fa6:	781a      	ldrb	r2, [r3, #0]
    4fa8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fac:	4313      	orrs	r3, r2
    4fae:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    4fb2:	4a18      	ldr	r2, [pc, #96]	; (5014 <Power_Ip_PMC_PowerInit+0x88>)
    4fb4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fb8:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    4fba:	4b16      	ldr	r3, [pc, #88]	; (5014 <Power_Ip_PMC_PowerInit+0x88>)
    4fbc:	785b      	ldrb	r3, [r3, #1]
    4fbe:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    4fc2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fc6:	f003 031f 	and.w	r3, r3, #31
    4fca:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    4fce:	9b01      	ldr	r3, [sp, #4]
    4fd0:	785a      	ldrb	r2, [r3, #1]
    4fd2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fd6:	4313      	orrs	r3, r2
    4fd8:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    4fdc:	4a0d      	ldr	r2, [pc, #52]	; (5014 <Power_Ip_PMC_PowerInit+0x88>)
    4fde:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fe2:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    4fe4:	4b0b      	ldr	r3, [pc, #44]	; (5014 <Power_Ip_PMC_PowerInit+0x88>)
    4fe6:	789b      	ldrb	r3, [r3, #2]
    4fe8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    4fec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4ff0:	f003 0338 	and.w	r3, r3, #56	; 0x38
    4ff4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    4ff8:	9b01      	ldr	r3, [sp, #4]
    4ffa:	789a      	ldrb	r2, [r3, #2]
    4ffc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5000:	4313      	orrs	r3, r2
    5002:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5006:	4a03      	ldr	r2, [pc, #12]	; (5014 <Power_Ip_PMC_PowerInit+0x88>)
    5008:	f89d 300f 	ldrb.w	r3, [sp, #15]
    500c:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    500e:	bf00      	nop
    5010:	b004      	add	sp, #16
    5012:	4770      	bx	lr
    5014:	4007d000 	.word	0x4007d000

00005018 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5018:	b500      	push	{lr}
    501a:	b083      	sub	sp, #12
    501c:	9001      	str	r0, [sp, #4]
    501e:	460b      	mov	r3, r1
    5020:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5024:	4b05      	ldr	r3, [pc, #20]	; (503c <Power_Ip_ReportPowerErrors+0x24>)
    5026:	681b      	ldr	r3, [r3, #0]
    5028:	f89d 2003 	ldrb.w	r2, [sp, #3]
    502c:	4611      	mov	r1, r2
    502e:	9801      	ldr	r0, [sp, #4]
    5030:	4798      	blx	r3
}
    5032:	bf00      	nop
    5034:	b003      	add	sp, #12
    5036:	f85d fb04 	ldr.w	pc, [sp], #4
    503a:	bf00      	nop
    503c:	1fff8b1c 	.word	0x1fff8b1c

00005040 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5040:	b082      	sub	sp, #8
    5042:	9001      	str	r0, [sp, #4]
    5044:	460b      	mov	r3, r1
    5046:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    504a:	bf00      	nop
    504c:	b002      	add	sp, #8
    504e:	4770      	bx	lr

00005050 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5050:	b500      	push	{lr}
    5052:	b085      	sub	sp, #20
    5054:	9003      	str	r0, [sp, #12]
    5056:	9102      	str	r1, [sp, #8]
    5058:	9201      	str	r2, [sp, #4]
    505a:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    505c:	2000      	movs	r0, #0
    505e:	f7fc f83d 	bl	10dc <OsIf_GetCounter>
    5062:	4602      	mov	r2, r0
    5064:	9b03      	ldr	r3, [sp, #12]
    5066:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5068:	9b02      	ldr	r3, [sp, #8]
    506a:	2200      	movs	r2, #0
    506c:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    506e:	2100      	movs	r1, #0
    5070:	9800      	ldr	r0, [sp, #0]
    5072:	f7fc f87f 	bl	1174 <OsIf_MicrosToTicks>
    5076:	4602      	mov	r2, r0
    5078:	9b01      	ldr	r3, [sp, #4]
    507a:	601a      	str	r2, [r3, #0]
}
    507c:	bf00      	nop
    507e:	b005      	add	sp, #20
    5080:	f85d fb04 	ldr.w	pc, [sp], #4

00005084 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5084:	b500      	push	{lr}
    5086:	b087      	sub	sp, #28
    5088:	9003      	str	r0, [sp, #12]
    508a:	9102      	str	r1, [sp, #8]
    508c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    508e:	2300      	movs	r3, #0
    5090:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5094:	2100      	movs	r1, #0
    5096:	9803      	ldr	r0, [sp, #12]
    5098:	f7fc f839 	bl	110e <OsIf_GetElapsed>
    509c:	4602      	mov	r2, r0
    509e:	9b02      	ldr	r3, [sp, #8]
    50a0:	681b      	ldr	r3, [r3, #0]
    50a2:	441a      	add	r2, r3
    50a4:	9b02      	ldr	r3, [sp, #8]
    50a6:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    50a8:	9b02      	ldr	r3, [sp, #8]
    50aa:	681b      	ldr	r3, [r3, #0]
    50ac:	9a01      	ldr	r2, [sp, #4]
    50ae:	429a      	cmp	r2, r3
    50b0:	d802      	bhi.n	50b8 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    50b2:	2301      	movs	r3, #1
    50b4:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    50b8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    50bc:	4618      	mov	r0, r3
    50be:	b007      	add	sp, #28
    50c0:	f85d fb04 	ldr.w	pc, [sp], #4

000050c4 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    50c4:	b082      	sub	sp, #8
    50c6:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    50c8:	9b01      	ldr	r3, [sp, #4]
    50ca:	681a      	ldr	r2, [r3, #0]
    50cc:	4907      	ldr	r1, [pc, #28]	; (50ec <Power_Ip_RCM_ResetInit+0x28>)
    50ce:	f641 7307 	movw	r3, #7943	; 0x1f07
    50d2:	4013      	ands	r3, r2
    50d4:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    50d6:	9b01      	ldr	r3, [sp, #4]
    50d8:	685a      	ldr	r2, [r3, #4]
    50da:	4904      	ldr	r1, [pc, #16]	; (50ec <Power_Ip_RCM_ResetInit+0x28>)
    50dc:	f642 73ff 	movw	r3, #12287	; 0x2fff
    50e0:	4013      	ands	r3, r2
    50e2:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    50e4:	bf00      	nop
    50e6:	b002      	add	sp, #8
    50e8:	4770      	bx	lr
    50ea:	bf00      	nop
    50ec:	4007f000 	.word	0x4007f000

000050f0 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    50f0:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    50f2:	230c      	movs	r3, #12
    50f4:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    50f6:	2300      	movs	r3, #0
    50f8:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    50fa:	2300      	movs	r3, #0
    50fc:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    50fe:	2300      	movs	r3, #0
    5100:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5102:	4b25      	ldr	r3, [pc, #148]	; (5198 <Power_Ip_RCM_GetResetReason+0xa8>)
    5104:	699a      	ldr	r2, [r3, #24]
    5106:	f642 73ee 	movw	r3, #12270	; 0x2fee
    510a:	4013      	ands	r3, r2
    510c:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    510e:	9b03      	ldr	r3, [sp, #12]
    5110:	2b00      	cmp	r3, #0
    5112:	d008      	beq.n	5126 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5114:	4920      	ldr	r1, [pc, #128]	; (5198 <Power_Ip_RCM_GetResetReason+0xa8>)
    5116:	9a03      	ldr	r2, [sp, #12]
    5118:	f642 73ee 	movw	r3, #12270	; 0x2fee
    511c:	4013      	ands	r3, r2
    511e:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5120:	4a1e      	ldr	r2, [pc, #120]	; (519c <Power_Ip_RCM_GetResetReason+0xac>)
    5122:	9b03      	ldr	r3, [sp, #12]
    5124:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5126:	4b1d      	ldr	r3, [pc, #116]	; (519c <Power_Ip_RCM_GetResetReason+0xac>)
    5128:	681b      	ldr	r3, [r3, #0]
    512a:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    512c:	9a02      	ldr	r2, [sp, #8]
    512e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5132:	4013      	ands	r3, r2
    5134:	2b82      	cmp	r3, #130	; 0x82
    5136:	d102      	bne.n	513e <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5138:	2305      	movs	r3, #5
    513a:	9307      	str	r3, [sp, #28]
    513c:	e027      	b.n	518e <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    513e:	2300      	movs	r3, #0
    5140:	9306      	str	r3, [sp, #24]
    5142:	e021      	b.n	5188 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5144:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5148:	9b06      	ldr	r3, [sp, #24]
    514a:	fa22 f303 	lsr.w	r3, r2, r3
    514e:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5150:	9a01      	ldr	r2, [sp, #4]
    5152:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5156:	4013      	ands	r3, r2
    5158:	2b00      	cmp	r3, #0
    515a:	d012      	beq.n	5182 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    515c:	9a01      	ldr	r2, [sp, #4]
    515e:	9b02      	ldr	r3, [sp, #8]
    5160:	4013      	ands	r3, r2
    5162:	2b00      	cmp	r3, #0
    5164:	d00a      	beq.n	517c <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5166:	9b05      	ldr	r3, [sp, #20]
    5168:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    516a:	9b04      	ldr	r3, [sp, #16]
    516c:	3301      	adds	r3, #1
    516e:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5170:	9b04      	ldr	r3, [sp, #16]
    5172:	2b01      	cmp	r3, #1
    5174:	d902      	bls.n	517c <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5176:	230d      	movs	r3, #13
    5178:	9307      	str	r3, [sp, #28]
                        break;
    517a:	e008      	b.n	518e <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    517c:	9b05      	ldr	r3, [sp, #20]
    517e:	3301      	adds	r3, #1
    5180:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5182:	9b06      	ldr	r3, [sp, #24]
    5184:	3301      	adds	r3, #1
    5186:	9306      	str	r3, [sp, #24]
    5188:	9b06      	ldr	r3, [sp, #24]
    518a:	2b1f      	cmp	r3, #31
    518c:	d9da      	bls.n	5144 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    518e:	9b07      	ldr	r3, [sp, #28]
}
    5190:	4618      	mov	r0, r3
    5192:	b008      	add	sp, #32
    5194:	4770      	bx	lr
    5196:	bf00      	nop
    5198:	4007f000 	.word	0x4007f000
    519c:	1fff8d10 	.word	0x1fff8d10

000051a0 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    51a0:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    51a2:	4b0c      	ldr	r3, [pc, #48]	; (51d4 <Power_Ip_RCM_GetResetRawValue+0x34>)
    51a4:	699a      	ldr	r2, [r3, #24]
    51a6:	f642 73ee 	movw	r3, #12270	; 0x2fee
    51aa:	4013      	ands	r3, r2
    51ac:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    51ae:	9b01      	ldr	r3, [sp, #4]
    51b0:	2b00      	cmp	r3, #0
    51b2:	d008      	beq.n	51c6 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    51b4:	4907      	ldr	r1, [pc, #28]	; (51d4 <Power_Ip_RCM_GetResetRawValue+0x34>)
    51b6:	9a01      	ldr	r2, [sp, #4]
    51b8:	f642 73ee 	movw	r3, #12270	; 0x2fee
    51bc:	4013      	ands	r3, r2
    51be:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    51c0:	4a05      	ldr	r2, [pc, #20]	; (51d8 <Power_Ip_RCM_GetResetRawValue+0x38>)
    51c2:	9b01      	ldr	r3, [sp, #4]
    51c4:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    51c6:	4b04      	ldr	r3, [pc, #16]	; (51d8 <Power_Ip_RCM_GetResetRawValue+0x38>)
    51c8:	681b      	ldr	r3, [r3, #0]
    51ca:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    51cc:	9b00      	ldr	r3, [sp, #0]
}
    51ce:	4618      	mov	r0, r3
    51d0:	b002      	add	sp, #8
    51d2:	4770      	bx	lr
    51d4:	4007f000 	.word	0x4007f000
    51d8:	1fff8d10 	.word	0x1fff8d10

000051dc <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    51dc:	b082      	sub	sp, #8
    51de:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    51e0:	9b01      	ldr	r3, [sp, #4]
    51e2:	681b      	ldr	r3, [r3, #0]
    51e4:	4a03      	ldr	r2, [pc, #12]	; (51f4 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    51e6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    51ea:	6093      	str	r3, [r2, #8]
}
    51ec:	bf00      	nop
    51ee:	b002      	add	sp, #8
    51f0:	4770      	bx	lr
    51f2:	bf00      	nop
    51f4:	4007e000 	.word	0x4007e000

000051f8 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    51f8:	b084      	sub	sp, #16
    51fa:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    51fc:	2301      	movs	r3, #1
    51fe:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5200:	4b15      	ldr	r3, [pc, #84]	; (5258 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5202:	695b      	ldr	r3, [r3, #20]
    5204:	b2db      	uxtb	r3, r3
    5206:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5208:	9b01      	ldr	r3, [sp, #4]
    520a:	2b02      	cmp	r3, #2
    520c:	d012      	beq.n	5234 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    520e:	9b01      	ldr	r3, [sp, #4]
    5210:	2b02      	cmp	r3, #2
    5212:	d818      	bhi.n	5246 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5214:	9b01      	ldr	r3, [sp, #4]
    5216:	2b00      	cmp	r3, #0
    5218:	d003      	beq.n	5222 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    521a:	9b01      	ldr	r3, [sp, #4]
    521c:	2b01      	cmp	r3, #1
    521e:	d003      	beq.n	5228 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5220:	e011      	b.n	5246 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5222:	2300      	movs	r3, #0
    5224:	9303      	str	r3, [sp, #12]
            break;
    5226:	e013      	b.n	5250 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5228:	9b02      	ldr	r3, [sp, #8]
    522a:	2b01      	cmp	r3, #1
    522c:	d10d      	bne.n	524a <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    522e:	2300      	movs	r3, #0
    5230:	9303      	str	r3, [sp, #12]
            break;
    5232:	e00a      	b.n	524a <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5234:	9b02      	ldr	r3, [sp, #8]
    5236:	2b01      	cmp	r3, #1
    5238:	d002      	beq.n	5240 <Power_Ip_SMC_ModeCheckEntry+0x48>
    523a:	9b02      	ldr	r3, [sp, #8]
    523c:	2b10      	cmp	r3, #16
    523e:	d106      	bne.n	524e <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5240:	2300      	movs	r3, #0
    5242:	9303      	str	r3, [sp, #12]
            break;
    5244:	e003      	b.n	524e <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5246:	bf00      	nop
    5248:	e002      	b.n	5250 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    524a:	bf00      	nop
    524c:	e000      	b.n	5250 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    524e:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5250:	9b03      	ldr	r3, [sp, #12]
}
    5252:	4618      	mov	r0, r3
    5254:	b004      	add	sp, #16
    5256:	4770      	bx	lr
    5258:	4007e000 	.word	0x4007e000

0000525c <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    525c:	b500      	push	{lr}
    525e:	b08b      	sub	sp, #44	; 0x2c
    5260:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5262:	2300      	movs	r3, #0
    5264:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5266:	2300      	movs	r3, #0
    5268:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    526a:	2300      	movs	r3, #0
    526c:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5270:	9b01      	ldr	r3, [sp, #4]
    5272:	685b      	ldr	r3, [r3, #4]
    5274:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5276:	9b08      	ldr	r3, [sp, #32]
    5278:	2b02      	cmp	r3, #2
    527a:	d076      	beq.n	536a <Power_Ip_SMC_ModeConfig+0x10e>
    527c:	9b08      	ldr	r3, [sp, #32]
    527e:	2b02      	cmp	r3, #2
    5280:	f200 80ab 	bhi.w	53da <Power_Ip_SMC_ModeConfig+0x17e>
    5284:	9b08      	ldr	r3, [sp, #32]
    5286:	2b00      	cmp	r3, #0
    5288:	d003      	beq.n	5292 <Power_Ip_SMC_ModeConfig+0x36>
    528a:	9b08      	ldr	r3, [sp, #32]
    528c:	2b01      	cmp	r3, #1
    528e:	d034      	beq.n	52fa <Power_Ip_SMC_ModeConfig+0x9e>
    5290:	e0a3      	b.n	53da <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5292:	4b58      	ldr	r3, [pc, #352]	; (53f4 <Power_Ip_SMC_ModeConfig+0x198>)
    5294:	68db      	ldr	r3, [r3, #12]
    5296:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5298:	9b06      	ldr	r3, [sp, #24]
    529a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    529e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    52a0:	4a54      	ldr	r2, [pc, #336]	; (53f4 <Power_Ip_SMC_ModeConfig+0x198>)
    52a2:	9b06      	ldr	r3, [sp, #24]
    52a4:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    52a6:	aa02      	add	r2, sp, #8
    52a8:	a903      	add	r1, sp, #12
    52aa:	a804      	add	r0, sp, #16
    52ac:	f24c 3350 	movw	r3, #50000	; 0xc350
    52b0:	f7ff fece 	bl	5050 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    52b4:	9a02      	ldr	r2, [sp, #8]
    52b6:	a903      	add	r1, sp, #12
    52b8:	ab04      	add	r3, sp, #16
    52ba:	4618      	mov	r0, r3
    52bc:	f7ff fee2 	bl	5084 <Power_Ip_TimeoutExpired>
    52c0:	4603      	mov	r3, r0
    52c2:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    52c6:	4b4b      	ldr	r3, [pc, #300]	; (53f4 <Power_Ip_SMC_ModeConfig+0x198>)
    52c8:	695b      	ldr	r3, [r3, #20]
    52ca:	f003 0301 	and.w	r3, r3, #1
    52ce:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    52d0:	9b05      	ldr	r3, [sp, #20]
    52d2:	2b01      	cmp	r3, #1
    52d4:	d006      	beq.n	52e4 <Power_Ip_SMC_ModeConfig+0x88>
    52d6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    52da:	f083 0301 	eor.w	r3, r3, #1
    52de:	b2db      	uxtb	r3, r3
    52e0:	2b00      	cmp	r3, #0
    52e2:	d1e7      	bne.n	52b4 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    52e4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    52e8:	2b00      	cmp	r3, #0
    52ea:	d079      	beq.n	53e0 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    52ec:	2301      	movs	r3, #1
    52ee:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    52f0:	21ff      	movs	r1, #255	; 0xff
    52f2:	2000      	movs	r0, #0
    52f4:	f7ff fe90 	bl	5018 <Power_Ip_ReportPowerErrors>
            }

            break;
    52f8:	e072      	b.n	53e0 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    52fa:	4b3e      	ldr	r3, [pc, #248]	; (53f4 <Power_Ip_SMC_ModeConfig+0x198>)
    52fc:	68db      	ldr	r3, [r3, #12]
    52fe:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5300:	9b06      	ldr	r3, [sp, #24]
    5302:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5306:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5308:	9b06      	ldr	r3, [sp, #24]
    530a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    530e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5310:	4a38      	ldr	r2, [pc, #224]	; (53f4 <Power_Ip_SMC_ModeConfig+0x198>)
    5312:	9b06      	ldr	r3, [sp, #24]
    5314:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5316:	aa02      	add	r2, sp, #8
    5318:	a903      	add	r1, sp, #12
    531a:	a804      	add	r0, sp, #16
    531c:	f24c 3350 	movw	r3, #50000	; 0xc350
    5320:	f7ff fe96 	bl	5050 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5324:	9a02      	ldr	r2, [sp, #8]
    5326:	a903      	add	r1, sp, #12
    5328:	ab04      	add	r3, sp, #16
    532a:	4618      	mov	r0, r3
    532c:	f7ff feaa 	bl	5084 <Power_Ip_TimeoutExpired>
    5330:	4603      	mov	r3, r0
    5332:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5336:	4b2f      	ldr	r3, [pc, #188]	; (53f4 <Power_Ip_SMC_ModeConfig+0x198>)
    5338:	695b      	ldr	r3, [r3, #20]
    533a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    533e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5340:	9b05      	ldr	r3, [sp, #20]
    5342:	2b80      	cmp	r3, #128	; 0x80
    5344:	d006      	beq.n	5354 <Power_Ip_SMC_ModeConfig+0xf8>
    5346:	f89d 301f 	ldrb.w	r3, [sp, #31]
    534a:	f083 0301 	eor.w	r3, r3, #1
    534e:	b2db      	uxtb	r3, r3
    5350:	2b00      	cmp	r3, #0
    5352:	d1e7      	bne.n	5324 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5354:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5358:	2b00      	cmp	r3, #0
    535a:	d043      	beq.n	53e4 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    535c:	2301      	movs	r3, #1
    535e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5360:	21ff      	movs	r1, #255	; 0xff
    5362:	2000      	movs	r0, #0
    5364:	f7ff fe58 	bl	5018 <Power_Ip_ReportPowerErrors>
            }

            break;
    5368:	e03c      	b.n	53e4 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    536a:	4b22      	ldr	r3, [pc, #136]	; (53f4 <Power_Ip_SMC_ModeConfig+0x198>)
    536c:	68db      	ldr	r3, [r3, #12]
    536e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5370:	9b06      	ldr	r3, [sp, #24]
    5372:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5376:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5378:	9b06      	ldr	r3, [sp, #24]
    537a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    537e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5380:	4a1c      	ldr	r2, [pc, #112]	; (53f4 <Power_Ip_SMC_ModeConfig+0x198>)
    5382:	9b06      	ldr	r3, [sp, #24]
    5384:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5386:	aa02      	add	r2, sp, #8
    5388:	a903      	add	r1, sp, #12
    538a:	a804      	add	r0, sp, #16
    538c:	f24c 3350 	movw	r3, #50000	; 0xc350
    5390:	f7ff fe5e 	bl	5050 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5394:	9a02      	ldr	r2, [sp, #8]
    5396:	a903      	add	r1, sp, #12
    5398:	ab04      	add	r3, sp, #16
    539a:	4618      	mov	r0, r3
    539c:	f7ff fe72 	bl	5084 <Power_Ip_TimeoutExpired>
    53a0:	4603      	mov	r3, r0
    53a2:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    53a6:	4b13      	ldr	r3, [pc, #76]	; (53f4 <Power_Ip_SMC_ModeConfig+0x198>)
    53a8:	695b      	ldr	r3, [r3, #20]
    53aa:	f003 0304 	and.w	r3, r3, #4
    53ae:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    53b0:	9b05      	ldr	r3, [sp, #20]
    53b2:	2b04      	cmp	r3, #4
    53b4:	d006      	beq.n	53c4 <Power_Ip_SMC_ModeConfig+0x168>
    53b6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    53ba:	f083 0301 	eor.w	r3, r3, #1
    53be:	b2db      	uxtb	r3, r3
    53c0:	2b00      	cmp	r3, #0
    53c2:	d1e7      	bne.n	5394 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    53c4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    53c8:	2b00      	cmp	r3, #0
    53ca:	d00d      	beq.n	53e8 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    53cc:	2301      	movs	r3, #1
    53ce:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    53d0:	21ff      	movs	r1, #255	; 0xff
    53d2:	2000      	movs	r0, #0
    53d4:	f7ff fe20 	bl	5018 <Power_Ip_ReportPowerErrors>
            }

            break;
    53d8:	e006      	b.n	53e8 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    53da:	2301      	movs	r3, #1
    53dc:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    53de:	e004      	b.n	53ea <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    53e0:	bf00      	nop
    53e2:	e002      	b.n	53ea <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    53e4:	bf00      	nop
    53e6:	e000      	b.n	53ea <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    53e8:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    53ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    53ec:	4618      	mov	r0, r3
    53ee:	b00b      	add	sp, #44	; 0x2c
    53f0:	f85d fb04 	ldr.w	pc, [sp], #4
    53f4:	4007e000 	.word	0x4007e000

000053f8 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    53f8:	b500      	push	{lr}
    53fa:	b085      	sub	sp, #20
    53fc:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    53fe:	9b01      	ldr	r3, [sp, #4]
    5400:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5402:	9803      	ldr	r0, [sp, #12]
    5404:	f000 fbc8 	bl	5b98 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5408:	4a03      	ldr	r2, [pc, #12]	; (5418 <Port_Init+0x20>)
    540a:	9b03      	ldr	r3, [sp, #12]
    540c:	6013      	str	r3, [r2, #0]
        }
    }
}
    540e:	bf00      	nop
    5410:	b005      	add	sp, #20
    5412:	f85d fb04 	ldr.w	pc, [sp], #4
    5416:	bf00      	nop
    5418:	1fff8d14 	.word	0x1fff8d14

0000541c <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    541c:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    541e:	4b03      	ldr	r3, [pc, #12]	; (542c <Port_RefreshPortDirection+0x10>)
    5420:	681b      	ldr	r3, [r3, #0]
    5422:	4618      	mov	r0, r3
    5424:	f000 fc10 	bl	5c48 <Port_Ipw_RefreshPortDirection>
    }
}
    5428:	bf00      	nop
    542a:	bd08      	pop	{r3, pc}
    542c:	1fff8d14 	.word	0x1fff8d14

00005430 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5430:	b086      	sub	sp, #24
    5432:	9003      	str	r0, [sp, #12]
    5434:	9102      	str	r1, [sp, #8]
    5436:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5438:	23ff      	movs	r3, #255	; 0xff
    543a:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    543c:	9b03      	ldr	r3, [sp, #12]
    543e:	4a39      	ldr	r2, [pc, #228]	; (5524 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5440:	4293      	cmp	r3, r2
    5442:	d151      	bne.n	54e8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5444:	9b02      	ldr	r3, [sp, #8]
    5446:	2b10      	cmp	r3, #16
    5448:	d867      	bhi.n	551a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    544a:	a201      	add	r2, pc, #4	; (adr r2, 5450 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5450:	00005495 	.word	0x00005495
    5454:	000054a3 	.word	0x000054a3
    5458:	0000551b 	.word	0x0000551b
    545c:	0000551b 	.word	0x0000551b
    5460:	0000551b 	.word	0x0000551b
    5464:	0000551b 	.word	0x0000551b
    5468:	0000551b 	.word	0x0000551b
    546c:	0000551b 	.word	0x0000551b
    5470:	0000551b 	.word	0x0000551b
    5474:	0000551b 	.word	0x0000551b
    5478:	0000551b 	.word	0x0000551b
    547c:	0000551b 	.word	0x0000551b
    5480:	0000551b 	.word	0x0000551b
    5484:	000054b1 	.word	0x000054b1
    5488:	000054bf 	.word	0x000054bf
    548c:	000054cd 	.word	0x000054cd
    5490:	000054db 	.word	0x000054db
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5494:	2301      	movs	r3, #1
    5496:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5498:	9a05      	ldr	r2, [sp, #20]
    549a:	9b01      	ldr	r3, [sp, #4]
    549c:	4313      	orrs	r3, r2
    549e:	9305      	str	r3, [sp, #20]
                break;
    54a0:	e03c      	b.n	551c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    54a2:	2302      	movs	r3, #2
    54a4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    54a6:	9a05      	ldr	r2, [sp, #20]
    54a8:	9b01      	ldr	r3, [sp, #4]
    54aa:	4313      	orrs	r3, r2
    54ac:	9305      	str	r3, [sp, #20]
                break;
    54ae:	e035      	b.n	551c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    54b0:	2304      	movs	r3, #4
    54b2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    54b4:	9a05      	ldr	r2, [sp, #20]
    54b6:	9b01      	ldr	r3, [sp, #4]
    54b8:	4313      	orrs	r3, r2
    54ba:	9305      	str	r3, [sp, #20]
                break;
    54bc:	e02e      	b.n	551c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    54be:	2308      	movs	r3, #8
    54c0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    54c2:	9a05      	ldr	r2, [sp, #20]
    54c4:	9b01      	ldr	r3, [sp, #4]
    54c6:	4313      	orrs	r3, r2
    54c8:	9305      	str	r3, [sp, #20]
                break;
    54ca:	e027      	b.n	551c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    54cc:	230e      	movs	r3, #14
    54ce:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    54d0:	9a05      	ldr	r2, [sp, #20]
    54d2:	9b01      	ldr	r3, [sp, #4]
    54d4:	4013      	ands	r3, r2
    54d6:	9305      	str	r3, [sp, #20]
                break;
    54d8:	e020      	b.n	551c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    54da:	230d      	movs	r3, #13
    54dc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    54de:	9a05      	ldr	r2, [sp, #20]
    54e0:	9b01      	ldr	r3, [sp, #4]
    54e2:	4013      	ands	r3, r2
    54e4:	9305      	str	r3, [sp, #20]
                break;
    54e6:	e019      	b.n	551c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    54e8:	9b03      	ldr	r3, [sp, #12]
    54ea:	4a0f      	ldr	r2, [pc, #60]	; (5528 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    54ec:	4293      	cmp	r3, r2
    54ee:	d115      	bne.n	551c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    54f0:	9b02      	ldr	r3, [sp, #8]
    54f2:	2b00      	cmp	r3, #0
    54f4:	d003      	beq.n	54fe <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    54f6:	9b02      	ldr	r3, [sp, #8]
    54f8:	2b01      	cmp	r3, #1
    54fa:	d007      	beq.n	550c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    54fc:	e00e      	b.n	551c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    54fe:	230b      	movs	r3, #11
    5500:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5502:	9a05      	ldr	r2, [sp, #20]
    5504:	9b01      	ldr	r3, [sp, #4]
    5506:	4013      	ands	r3, r2
    5508:	9305      	str	r3, [sp, #20]
                break;
    550a:	e007      	b.n	551c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    550c:	2307      	movs	r3, #7
    550e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5510:	9a05      	ldr	r2, [sp, #20]
    5512:	9b01      	ldr	r3, [sp, #4]
    5514:	4013      	ands	r3, r2
    5516:	9305      	str	r3, [sp, #20]
                break;
    5518:	e000      	b.n	551c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    551a:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    551c:	9b05      	ldr	r3, [sp, #20]
}
    551e:	4618      	mov	r0, r3
    5520:	b006      	add	sp, #24
    5522:	4770      	bx	lr
    5524:	4004a000 	.word	0x4004a000
    5528:	4004b000 	.word	0x4004b000

0000552c <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    552c:	b500      	push	{lr}
    552e:	b089      	sub	sp, #36	; 0x24
    5530:	9003      	str	r0, [sp, #12]
    5532:	9102      	str	r1, [sp, #8]
    5534:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    5536:	9b01      	ldr	r3, [sp, #4]
    5538:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    553a:	9b01      	ldr	r3, [sp, #4]
    553c:	2b08      	cmp	r3, #8
    553e:	d121      	bne.n	5584 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    5540:	4b13      	ldr	r3, [pc, #76]	; (5590 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5542:	685b      	ldr	r3, [r3, #4]
    5544:	f003 030f 	and.w	r3, r3, #15
    5548:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    554a:	9a06      	ldr	r2, [sp, #24]
    554c:	9902      	ldr	r1, [sp, #8]
    554e:	9803      	ldr	r0, [sp, #12]
    5550:	f7ff ff6e 	bl	5430 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    5554:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    5556:	9b05      	ldr	r3, [sp, #20]
    5558:	2bff      	cmp	r3, #255	; 0xff
    555a:	d011      	beq.n	5580 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    555c:	f005 f8ec 	bl	a738 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    5560:	4b0b      	ldr	r3, [pc, #44]	; (5590 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5562:	685b      	ldr	r3, [r3, #4]
    5564:	4a0a      	ldr	r2, [pc, #40]	; (5590 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5566:	f023 030f 	bic.w	r3, r3, #15
    556a:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    556c:	4b08      	ldr	r3, [pc, #32]	; (5590 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    556e:	685a      	ldr	r2, [r3, #4]
    5570:	9b05      	ldr	r3, [sp, #20]
    5572:	f003 030f 	and.w	r3, r3, #15
    5576:	4906      	ldr	r1, [pc, #24]	; (5590 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5578:	4313      	orrs	r3, r2
    557a:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    557c:	f005 f908 	bl	a790 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    5580:	2300      	movs	r3, #0
    5582:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    5584:	9b07      	ldr	r3, [sp, #28]
}
    5586:	4618      	mov	r0, r3
    5588:	b009      	add	sp, #36	; 0x24
    558a:	f85d fb04 	ldr.w	pc, [sp], #4
    558e:	bf00      	nop
    5590:	40048000 	.word	0x40048000

00005594 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    5594:	b500      	push	{lr}
    5596:	b087      	sub	sp, #28
    5598:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    559a:	2300      	movs	r3, #0
    559c:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    559e:	2300      	movs	r3, #0
    55a0:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    55a2:	2300      	movs	r3, #0
    55a4:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    55a6:	9b01      	ldr	r3, [sp, #4]
    55a8:	68db      	ldr	r3, [r3, #12]
    55aa:	2b02      	cmp	r3, #2
    55ac:	d00a      	beq.n	55c4 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    55ae:	9b05      	ldr	r3, [sp, #20]
    55b0:	f043 0302 	orr.w	r3, r3, #2
    55b4:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    55b6:	9b01      	ldr	r3, [sp, #4]
    55b8:	68db      	ldr	r3, [r3, #12]
    55ba:	f003 0301 	and.w	r3, r3, #1
    55be:	9a05      	ldr	r2, [sp, #20]
    55c0:	4313      	orrs	r3, r2
    55c2:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    55c4:	9b01      	ldr	r3, [sp, #4]
    55c6:	699b      	ldr	r3, [r3, #24]
    55c8:	019b      	lsls	r3, r3, #6
    55ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
    55ce:	9a05      	ldr	r2, [sp, #20]
    55d0:	4313      	orrs	r3, r2
    55d2:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    55d4:	9b01      	ldr	r3, [sp, #4]
    55d6:	6a1b      	ldr	r3, [r3, #32]
    55d8:	03db      	lsls	r3, r3, #15
    55da:	b29b      	uxth	r3, r3
    55dc:	9a05      	ldr	r2, [sp, #20]
    55de:	4313      	orrs	r3, r2
    55e0:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    55e2:	9b01      	ldr	r3, [sp, #4]
    55e4:	7f1b      	ldrb	r3, [r3, #28]
    55e6:	2b00      	cmp	r3, #0
    55e8:	d001      	beq.n	55ee <Port_Ci_Port_Ip_PinInit+0x5a>
    55ea:	2310      	movs	r3, #16
    55ec:	e000      	b.n	55f0 <Port_Ci_Port_Ip_PinInit+0x5c>
    55ee:	2300      	movs	r3, #0
    55f0:	9a05      	ldr	r2, [sp, #20]
    55f2:	4313      	orrs	r3, r2
    55f4:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    55f6:	9b01      	ldr	r3, [sp, #4]
    55f8:	691b      	ldr	r3, [r3, #16]
    55fa:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    55fc:	9b01      	ldr	r3, [sp, #4]
    55fe:	6818      	ldr	r0, [r3, #0]
    5600:	9b01      	ldr	r3, [sp, #4]
    5602:	689b      	ldr	r3, [r3, #8]
    5604:	9a04      	ldr	r2, [sp, #16]
    5606:	4619      	mov	r1, r3
    5608:	f7ff ff90 	bl	552c <Port_Ci_Port_Ip_ConfigureInterleave>
    560c:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    560e:	9b03      	ldr	r3, [sp, #12]
    5610:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    5612:	9b04      	ldr	r3, [sp, #16]
    5614:	021b      	lsls	r3, r3, #8
    5616:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    561a:	9a05      	ldr	r2, [sp, #20]
    561c:	4313      	orrs	r3, r2
    561e:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    5620:	f004 fef0 	bl	a404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    5624:	9b01      	ldr	r3, [sp, #4]
    5626:	681b      	ldr	r3, [r3, #0]
    5628:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    562c:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    562e:	9b01      	ldr	r3, [sp, #4]
    5630:	689b      	ldr	r3, [r3, #8]
    5632:	2201      	movs	r2, #1
    5634:	fa02 f303 	lsl.w	r3, r2, r3
    5638:	43db      	mvns	r3, r3
    563a:	9a02      	ldr	r2, [sp, #8]
    563c:	4013      	ands	r3, r2
    563e:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    5640:	9b01      	ldr	r3, [sp, #4]
    5642:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5646:	2b00      	cmp	r3, #0
    5648:	d001      	beq.n	564e <Port_Ci_Port_Ip_PinInit+0xba>
    564a:	2201      	movs	r2, #1
    564c:	e000      	b.n	5650 <Port_Ci_Port_Ip_PinInit+0xbc>
    564e:	2200      	movs	r2, #0
    5650:	9b01      	ldr	r3, [sp, #4]
    5652:	689b      	ldr	r3, [r3, #8]
    5654:	fa02 f303 	lsl.w	r3, r2, r3
    5658:	9a02      	ldr	r2, [sp, #8]
    565a:	4313      	orrs	r3, r2
    565c:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    565e:	9b01      	ldr	r3, [sp, #4]
    5660:	681b      	ldr	r3, [r3, #0]
    5662:	9a02      	ldr	r2, [sp, #8]
    5664:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    5668:	f004 fef8 	bl	a45c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    566c:	9b04      	ldr	r3, [sp, #16]
    566e:	2b01      	cmp	r3, #1
    5670:	d16d      	bne.n	574e <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    5672:	9b01      	ldr	r3, [sp, #4]
    5674:	695b      	ldr	r3, [r3, #20]
    5676:	2b02      	cmp	r3, #2
    5678:	d138      	bne.n	56ec <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    567a:	9b01      	ldr	r3, [sp, #4]
    567c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5680:	2b01      	cmp	r3, #1
    5682:	d10f      	bne.n	56a4 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    5684:	f004 ff10 	bl	a4a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    5688:	9b01      	ldr	r3, [sp, #4]
    568a:	685b      	ldr	r3, [r3, #4]
    568c:	6859      	ldr	r1, [r3, #4]
    568e:	9b01      	ldr	r3, [sp, #4]
    5690:	689b      	ldr	r3, [r3, #8]
    5692:	2201      	movs	r2, #1
    5694:	409a      	lsls	r2, r3
    5696:	9b01      	ldr	r3, [sp, #4]
    5698:	685b      	ldr	r3, [r3, #4]
    569a:	430a      	orrs	r2, r1
    569c:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    569e:	f004 ff2f 	bl	a500 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    56a2:	e013      	b.n	56cc <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    56a4:	9b01      	ldr	r3, [sp, #4]
    56a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    56aa:	2b00      	cmp	r3, #0
    56ac:	d10e      	bne.n	56cc <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    56ae:	f004 ff4d 	bl	a54c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    56b2:	9b01      	ldr	r3, [sp, #4]
    56b4:	685b      	ldr	r3, [r3, #4]
    56b6:	6899      	ldr	r1, [r3, #8]
    56b8:	9b01      	ldr	r3, [sp, #4]
    56ba:	689b      	ldr	r3, [r3, #8]
    56bc:	2201      	movs	r2, #1
    56be:	409a      	lsls	r2, r3
    56c0:	9b01      	ldr	r3, [sp, #4]
    56c2:	685b      	ldr	r3, [r3, #4]
    56c4:	430a      	orrs	r2, r1
    56c6:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    56c8:	f004 ff6c 	bl	a5a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    56cc:	f004 ff90 	bl	a5f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    56d0:	9b01      	ldr	r3, [sp, #4]
    56d2:	685b      	ldr	r3, [r3, #4]
    56d4:	6959      	ldr	r1, [r3, #20]
    56d6:	9b01      	ldr	r3, [sp, #4]
    56d8:	689b      	ldr	r3, [r3, #8]
    56da:	2201      	movs	r2, #1
    56dc:	409a      	lsls	r2, r3
    56de:	9b01      	ldr	r3, [sp, #4]
    56e0:	685b      	ldr	r3, [r3, #4]
    56e2:	430a      	orrs	r2, r1
    56e4:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    56e6:	f004 ffaf 	bl	a648 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    56ea:	e030      	b.n	574e <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    56ec:	f004 ff80 	bl	a5f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    56f0:	9b01      	ldr	r3, [sp, #4]
    56f2:	685b      	ldr	r3, [r3, #4]
    56f4:	6959      	ldr	r1, [r3, #20]
    56f6:	9b01      	ldr	r3, [sp, #4]
    56f8:	689b      	ldr	r3, [r3, #8]
    56fa:	2201      	movs	r2, #1
    56fc:	fa02 f303 	lsl.w	r3, r2, r3
    5700:	43da      	mvns	r2, r3
    5702:	9b01      	ldr	r3, [sp, #4]
    5704:	685b      	ldr	r3, [r3, #4]
    5706:	400a      	ands	r2, r1
    5708:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    570a:	f004 ff9d 	bl	a648 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    570e:	f004 ffc1 	bl	a694 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    5712:	9b01      	ldr	r3, [sp, #4]
    5714:	685b      	ldr	r3, [r3, #4]
    5716:	6999      	ldr	r1, [r3, #24]
    5718:	9b01      	ldr	r3, [sp, #4]
    571a:	689b      	ldr	r3, [r3, #8]
    571c:	2201      	movs	r2, #1
    571e:	fa02 f303 	lsl.w	r3, r2, r3
    5722:	43da      	mvns	r2, r3
    5724:	9b01      	ldr	r3, [sp, #4]
    5726:	685b      	ldr	r3, [r3, #4]
    5728:	400a      	ands	r2, r1
    572a:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    572c:	9b01      	ldr	r3, [sp, #4]
    572e:	695b      	ldr	r3, [r3, #20]
    5730:	2b03      	cmp	r3, #3
    5732:	d10a      	bne.n	574a <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    5734:	9b01      	ldr	r3, [sp, #4]
    5736:	685b      	ldr	r3, [r3, #4]
    5738:	6999      	ldr	r1, [r3, #24]
    573a:	9b01      	ldr	r3, [sp, #4]
    573c:	689b      	ldr	r3, [r3, #8]
    573e:	2201      	movs	r2, #1
    5740:	409a      	lsls	r2, r3
    5742:	9b01      	ldr	r3, [sp, #4]
    5744:	685b      	ldr	r3, [r3, #4]
    5746:	430a      	orrs	r2, r1
    5748:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    574a:	f004 ffcf 	bl	a6ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    574e:	9b01      	ldr	r3, [sp, #4]
    5750:	681b      	ldr	r3, [r3, #0]
    5752:	9a01      	ldr	r2, [sp, #4]
    5754:	6892      	ldr	r2, [r2, #8]
    5756:	9905      	ldr	r1, [sp, #20]
    5758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    575c:	bf00      	nop
    575e:	b007      	add	sp, #28
    5760:	f85d fb04 	ldr.w	pc, [sp], #4

00005764 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    5764:	b500      	push	{lr}
    5766:	b085      	sub	sp, #20
    5768:	9001      	str	r0, [sp, #4]
    576a:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    576c:	2300      	movs	r3, #0
    576e:	9303      	str	r3, [sp, #12]
    5770:	e00d      	b.n	578e <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    5772:	9a03      	ldr	r2, [sp, #12]
    5774:	4613      	mov	r3, r2
    5776:	009b      	lsls	r3, r3, #2
    5778:	4413      	add	r3, r2
    577a:	00db      	lsls	r3, r3, #3
    577c:	461a      	mov	r2, r3
    577e:	9b00      	ldr	r3, [sp, #0]
    5780:	4413      	add	r3, r2
    5782:	4618      	mov	r0, r3
    5784:	f7ff ff06 	bl	5594 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    5788:	9b03      	ldr	r3, [sp, #12]
    578a:	3301      	adds	r3, #1
    578c:	9303      	str	r3, [sp, #12]
    578e:	9a03      	ldr	r2, [sp, #12]
    5790:	9b01      	ldr	r3, [sp, #4]
    5792:	429a      	cmp	r2, r3
    5794:	d3ed      	bcc.n	5772 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    5796:	2300      	movs	r3, #0
}
    5798:	4618      	mov	r0, r3
    579a:	b005      	add	sp, #20
    579c:	f85d fb04 	ldr.w	pc, [sp], #4

000057a0 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    57a0:	b500      	push	{lr}
    57a2:	b087      	sub	sp, #28
    57a4:	9003      	str	r0, [sp, #12]
    57a6:	9102      	str	r1, [sp, #8]
    57a8:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    57aa:	9a01      	ldr	r2, [sp, #4]
    57ac:	9902      	ldr	r1, [sp, #8]
    57ae:	9803      	ldr	r0, [sp, #12]
    57b0:	f7ff febc 	bl	552c <Port_Ci_Port_Ip_ConfigureInterleave>
    57b4:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    57b6:	f005 f811 	bl	a7dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    57ba:	9b03      	ldr	r3, [sp, #12]
    57bc:	9a02      	ldr	r2, [sp, #8]
    57be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    57c2:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    57c4:	9b04      	ldr	r3, [sp, #16]
    57c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    57ca:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    57cc:	9b05      	ldr	r3, [sp, #20]
    57ce:	021b      	lsls	r3, r3, #8
    57d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    57d4:	9a04      	ldr	r2, [sp, #16]
    57d6:	4313      	orrs	r3, r2
    57d8:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    57da:	9b03      	ldr	r3, [sp, #12]
    57dc:	9a02      	ldr	r2, [sp, #8]
    57de:	9904      	ldr	r1, [sp, #16]
    57e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    57e4:	f005 f826 	bl	a834 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    57e8:	bf00      	nop
    57ea:	b007      	add	sp, #28
    57ec:	f85d fb04 	ldr.w	pc, [sp], #4

000057f0 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    57f0:	b500      	push	{lr}
    57f2:	b083      	sub	sp, #12
    57f4:	9001      	str	r0, [sp, #4]
    57f6:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    57f8:	f005 f842 	bl	a880 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    57fc:	9b01      	ldr	r3, [sp, #4]
    57fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    5802:	2101      	movs	r1, #1
    5804:	9b00      	ldr	r3, [sp, #0]
    5806:	fa01 f303 	lsl.w	r3, r1, r3
    580a:	431a      	orrs	r2, r3
    580c:	9b01      	ldr	r3, [sp, #4]
    580e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    5812:	f005 f861 	bl	a8d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    5816:	bf00      	nop
    5818:	b003      	add	sp, #12
    581a:	f85d fb04 	ldr.w	pc, [sp], #4

0000581e <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    581e:	b500      	push	{lr}
    5820:	b083      	sub	sp, #12
    5822:	9001      	str	r0, [sp, #4]
    5824:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    5826:	f005 f87d 	bl	a924 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    582a:	9b01      	ldr	r3, [sp, #4]
    582c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    5830:	2101      	movs	r1, #1
    5832:	9b00      	ldr	r3, [sp, #0]
    5834:	fa01 f303 	lsl.w	r3, r1, r3
    5838:	43db      	mvns	r3, r3
    583a:	401a      	ands	r2, r3
    583c:	9b01      	ldr	r3, [sp, #4]
    583e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    5842:	f005 f89b 	bl	a97c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    5846:	bf00      	nop
    5848:	b003      	add	sp, #12
    584a:	f85d fb04 	ldr.w	pc, [sp], #4

0000584e <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    584e:	b082      	sub	sp, #8
    5850:	9001      	str	r0, [sp, #4]
    5852:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    5854:	9b00      	ldr	r3, [sp, #0]
    5856:	785b      	ldrb	r3, [r3, #1]
    5858:	f003 0201 	and.w	r2, r3, #1
    585c:	9b01      	ldr	r3, [sp, #4]
    585e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    5862:	9b00      	ldr	r3, [sp, #0]
    5864:	789b      	ldrb	r3, [r3, #2]
    5866:	f003 021f 	and.w	r2, r3, #31
    586a:	9b01      	ldr	r3, [sp, #4]
    586c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    5870:	bf00      	nop
    5872:	b002      	add	sp, #8
    5874:	4770      	bx	lr

00005876 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    5876:	b086      	sub	sp, #24
    5878:	9003      	str	r0, [sp, #12]
    587a:	9301      	str	r3, [sp, #4]
    587c:	460b      	mov	r3, r1
    587e:	f8ad 300a 	strh.w	r3, [sp, #10]
    5882:	4613      	mov	r3, r2
    5884:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    5888:	2300      	movs	r3, #0
    588a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    588e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5892:	f043 0301 	orr.w	r3, r3, #1
    5896:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    589a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    589e:	f043 0302 	orr.w	r3, r3, #2
    58a2:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    58a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58aa:	f043 0310 	orr.w	r3, r3, #16
    58ae:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    58b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    58ba:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    58be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    58c6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    58ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    58d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    58d6:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    58da:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    58de:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    58e2:	4013      	ands	r3, r2
    58e4:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    58e8:	9b01      	ldr	r3, [sp, #4]
    58ea:	2b00      	cmp	r3, #0
    58ec:	d003      	beq.n	58f6 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    58ee:	9b01      	ldr	r3, [sp, #4]
    58f0:	2b01      	cmp	r3, #1
    58f2:	d00a      	beq.n	590a <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    58f4:	e013      	b.n	591e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    58f6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    58fa:	041a      	lsls	r2, r3, #16
    58fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5900:	431a      	orrs	r2, r3
    5902:	9b03      	ldr	r3, [sp, #12]
    5904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    5908:	e009      	b.n	591e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    590a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    590e:	041a      	lsls	r2, r3, #16
    5910:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5914:	431a      	orrs	r2, r3
    5916:	9b03      	ldr	r3, [sp, #12]
    5918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    591c:	bf00      	nop
    }
}
    591e:	bf00      	nop
    5920:	b006      	add	sp, #24
    5922:	4770      	bx	lr

00005924 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    5924:	b500      	push	{lr}
    5926:	b087      	sub	sp, #28
    5928:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    592a:	9b01      	ldr	r3, [sp, #4]
    592c:	885b      	ldrh	r3, [r3, #2]
    592e:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    5932:	9b01      	ldr	r3, [sp, #4]
    5934:	689b      	ldr	r3, [r3, #8]
    5936:	7a1b      	ldrb	r3, [r3, #8]
    5938:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    593c:	9b01      	ldr	r3, [sp, #4]
    593e:	689b      	ldr	r3, [r3, #8]
    5940:	681b      	ldr	r3, [r3, #0]
    5942:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    5944:	9b01      	ldr	r3, [sp, #4]
    5946:	689b      	ldr	r3, [r3, #8]
    5948:	685b      	ldr	r3, [r3, #4]
    594a:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    594c:	2300      	movs	r3, #0
    594e:	f8ad 3016 	strh.w	r3, [sp, #22]
    5952:	e111      	b.n	5b78 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    5954:	9b02      	ldr	r3, [sp, #8]
    5956:	2b02      	cmp	r3, #2
    5958:	d169      	bne.n	5a2e <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    595a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    595e:	2b01      	cmp	r3, #1
    5960:	d11a      	bne.n	5998 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5962:	9b01      	ldr	r3, [sp, #4]
    5964:	685a      	ldr	r2, [r3, #4]
    5966:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    596a:	005b      	lsls	r3, r3, #1
    596c:	4413      	add	r3, r2
    596e:	881b      	ldrh	r3, [r3, #0]
    5970:	f003 021f 	and.w	r2, r3, #31
    5974:	9b01      	ldr	r3, [sp, #4]
    5976:	6859      	ldr	r1, [r3, #4]
    5978:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    597c:	005b      	lsls	r3, r3, #1
    597e:	440b      	add	r3, r1
    5980:	881b      	ldrh	r3, [r3, #0]
    5982:	095b      	lsrs	r3, r3, #5
    5984:	b29b      	uxth	r3, r3
    5986:	4619      	mov	r1, r3
    5988:	4b81      	ldr	r3, [pc, #516]	; (5b90 <Port_Ipw_Init_UnusedPins+0x26c>)
    598a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    598e:	2101      	movs	r1, #1
    5990:	fa01 f202 	lsl.w	r2, r1, r2
    5994:	605a      	str	r2, [r3, #4]
    5996:	e01d      	b.n	59d4 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    5998:	f89d 3013 	ldrb.w	r3, [sp, #19]
    599c:	2b00      	cmp	r3, #0
    599e:	d119      	bne.n	59d4 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    59a0:	9b01      	ldr	r3, [sp, #4]
    59a2:	685a      	ldr	r2, [r3, #4]
    59a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59a8:	005b      	lsls	r3, r3, #1
    59aa:	4413      	add	r3, r2
    59ac:	881b      	ldrh	r3, [r3, #0]
    59ae:	f003 021f 	and.w	r2, r3, #31
    59b2:	9b01      	ldr	r3, [sp, #4]
    59b4:	6859      	ldr	r1, [r3, #4]
    59b6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59ba:	005b      	lsls	r3, r3, #1
    59bc:	440b      	add	r3, r1
    59be:	881b      	ldrh	r3, [r3, #0]
    59c0:	095b      	lsrs	r3, r3, #5
    59c2:	b29b      	uxth	r3, r3
    59c4:	4619      	mov	r1, r3
    59c6:	4b72      	ldr	r3, [pc, #456]	; (5b90 <Port_Ipw_Init_UnusedPins+0x26c>)
    59c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    59cc:	2101      	movs	r1, #1
    59ce:	fa01 f202 	lsl.w	r2, r1, r2
    59d2:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    59d4:	f004 fff8 	bl	a9c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    59d8:	9b01      	ldr	r3, [sp, #4]
    59da:	685a      	ldr	r2, [r3, #4]
    59dc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59e0:	005b      	lsls	r3, r3, #1
    59e2:	4413      	add	r3, r2
    59e4:	881b      	ldrh	r3, [r3, #0]
    59e6:	095b      	lsrs	r3, r3, #5
    59e8:	b29b      	uxth	r3, r3
    59ea:	461a      	mov	r2, r3
    59ec:	4b68      	ldr	r3, [pc, #416]	; (5b90 <Port_Ipw_Init_UnusedPins+0x26c>)
    59ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    59f2:	6959      	ldr	r1, [r3, #20]
    59f4:	9b01      	ldr	r3, [sp, #4]
    59f6:	685a      	ldr	r2, [r3, #4]
    59f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59fc:	005b      	lsls	r3, r3, #1
    59fe:	4413      	add	r3, r2
    5a00:	881b      	ldrh	r3, [r3, #0]
    5a02:	f003 031f 	and.w	r3, r3, #31
    5a06:	2201      	movs	r2, #1
    5a08:	409a      	lsls	r2, r3
    5a0a:	9b01      	ldr	r3, [sp, #4]
    5a0c:	6858      	ldr	r0, [r3, #4]
    5a0e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a12:	005b      	lsls	r3, r3, #1
    5a14:	4403      	add	r3, r0
    5a16:	881b      	ldrh	r3, [r3, #0]
    5a18:	095b      	lsrs	r3, r3, #5
    5a1a:	b29b      	uxth	r3, r3
    5a1c:	4618      	mov	r0, r3
    5a1e:	4b5c      	ldr	r3, [pc, #368]	; (5b90 <Port_Ipw_Init_UnusedPins+0x26c>)
    5a20:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5a24:	430a      	orrs	r2, r1
    5a26:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5a28:	f004 fffa 	bl	aa20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    5a2c:	e086      	b.n	5b3c <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5a2e:	f004 ffcb 	bl	a9c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    5a32:	9b01      	ldr	r3, [sp, #4]
    5a34:	685a      	ldr	r2, [r3, #4]
    5a36:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a3a:	005b      	lsls	r3, r3, #1
    5a3c:	4413      	add	r3, r2
    5a3e:	881b      	ldrh	r3, [r3, #0]
    5a40:	095b      	lsrs	r3, r3, #5
    5a42:	b29b      	uxth	r3, r3
    5a44:	461a      	mov	r2, r3
    5a46:	4b52      	ldr	r3, [pc, #328]	; (5b90 <Port_Ipw_Init_UnusedPins+0x26c>)
    5a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5a4c:	6959      	ldr	r1, [r3, #20]
    5a4e:	9b01      	ldr	r3, [sp, #4]
    5a50:	685a      	ldr	r2, [r3, #4]
    5a52:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a56:	005b      	lsls	r3, r3, #1
    5a58:	4413      	add	r3, r2
    5a5a:	881b      	ldrh	r3, [r3, #0]
    5a5c:	f003 031f 	and.w	r3, r3, #31
    5a60:	2201      	movs	r2, #1
    5a62:	fa02 f303 	lsl.w	r3, r2, r3
    5a66:	43da      	mvns	r2, r3
    5a68:	9b01      	ldr	r3, [sp, #4]
    5a6a:	6858      	ldr	r0, [r3, #4]
    5a6c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a70:	005b      	lsls	r3, r3, #1
    5a72:	4403      	add	r3, r0
    5a74:	881b      	ldrh	r3, [r3, #0]
    5a76:	095b      	lsrs	r3, r3, #5
    5a78:	b29b      	uxth	r3, r3
    5a7a:	4618      	mov	r0, r3
    5a7c:	4b44      	ldr	r3, [pc, #272]	; (5b90 <Port_Ipw_Init_UnusedPins+0x26c>)
    5a7e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5a82:	400a      	ands	r2, r1
    5a84:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5a86:	f004 ffcb 	bl	aa20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    5a8a:	f004 ffef 	bl	aa6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5a8e:	9b01      	ldr	r3, [sp, #4]
    5a90:	685a      	ldr	r2, [r3, #4]
    5a92:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a96:	005b      	lsls	r3, r3, #1
    5a98:	4413      	add	r3, r2
    5a9a:	881b      	ldrh	r3, [r3, #0]
    5a9c:	095b      	lsrs	r3, r3, #5
    5a9e:	b29b      	uxth	r3, r3
    5aa0:	461a      	mov	r2, r3
    5aa2:	4b3b      	ldr	r3, [pc, #236]	; (5b90 <Port_Ipw_Init_UnusedPins+0x26c>)
    5aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5aa8:	6999      	ldr	r1, [r3, #24]
    5aaa:	9b01      	ldr	r3, [sp, #4]
    5aac:	685a      	ldr	r2, [r3, #4]
    5aae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ab2:	005b      	lsls	r3, r3, #1
    5ab4:	4413      	add	r3, r2
    5ab6:	881b      	ldrh	r3, [r3, #0]
    5ab8:	f003 031f 	and.w	r3, r3, #31
    5abc:	2201      	movs	r2, #1
    5abe:	fa02 f303 	lsl.w	r3, r2, r3
    5ac2:	43da      	mvns	r2, r3
    5ac4:	9b01      	ldr	r3, [sp, #4]
    5ac6:	6858      	ldr	r0, [r3, #4]
    5ac8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5acc:	005b      	lsls	r3, r3, #1
    5ace:	4403      	add	r3, r0
    5ad0:	881b      	ldrh	r3, [r3, #0]
    5ad2:	095b      	lsrs	r3, r3, #5
    5ad4:	b29b      	uxth	r3, r3
    5ad6:	4618      	mov	r0, r3
    5ad8:	4b2d      	ldr	r3, [pc, #180]	; (5b90 <Port_Ipw_Init_UnusedPins+0x26c>)
    5ada:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5ade:	400a      	ands	r2, r1
    5ae0:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    5ae2:	9b02      	ldr	r3, [sp, #8]
    5ae4:	2b03      	cmp	r3, #3
    5ae6:	d127      	bne.n	5b38 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5ae8:	9b01      	ldr	r3, [sp, #4]
    5aea:	685a      	ldr	r2, [r3, #4]
    5aec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5af0:	005b      	lsls	r3, r3, #1
    5af2:	4413      	add	r3, r2
    5af4:	881b      	ldrh	r3, [r3, #0]
    5af6:	095b      	lsrs	r3, r3, #5
    5af8:	b29b      	uxth	r3, r3
    5afa:	461a      	mov	r2, r3
    5afc:	4b24      	ldr	r3, [pc, #144]	; (5b90 <Port_Ipw_Init_UnusedPins+0x26c>)
    5afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b02:	6999      	ldr	r1, [r3, #24]
    5b04:	9b01      	ldr	r3, [sp, #4]
    5b06:	685a      	ldr	r2, [r3, #4]
    5b08:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b0c:	005b      	lsls	r3, r3, #1
    5b0e:	4413      	add	r3, r2
    5b10:	881b      	ldrh	r3, [r3, #0]
    5b12:	f003 031f 	and.w	r3, r3, #31
    5b16:	2201      	movs	r2, #1
    5b18:	409a      	lsls	r2, r3
    5b1a:	9b01      	ldr	r3, [sp, #4]
    5b1c:	6858      	ldr	r0, [r3, #4]
    5b1e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b22:	005b      	lsls	r3, r3, #1
    5b24:	4403      	add	r3, r0
    5b26:	881b      	ldrh	r3, [r3, #0]
    5b28:	095b      	lsrs	r3, r3, #5
    5b2a:	b29b      	uxth	r3, r3
    5b2c:	4618      	mov	r0, r3
    5b2e:	4b18      	ldr	r3, [pc, #96]	; (5b90 <Port_Ipw_Init_UnusedPins+0x26c>)
    5b30:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5b34:	430a      	orrs	r2, r1
    5b36:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    5b38:	f004 ffc4 	bl	aac4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    5b3c:	9b01      	ldr	r3, [sp, #4]
    5b3e:	685a      	ldr	r2, [r3, #4]
    5b40:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b44:	005b      	lsls	r3, r3, #1
    5b46:	4413      	add	r3, r2
    5b48:	881b      	ldrh	r3, [r3, #0]
    5b4a:	095b      	lsrs	r3, r3, #5
    5b4c:	b29b      	uxth	r3, r3
    5b4e:	461a      	mov	r2, r3
    5b50:	4b10      	ldr	r3, [pc, #64]	; (5b94 <Port_Ipw_Init_UnusedPins+0x270>)
    5b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b56:	9a01      	ldr	r2, [sp, #4]
    5b58:	6851      	ldr	r1, [r2, #4]
    5b5a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5b5e:	0052      	lsls	r2, r2, #1
    5b60:	440a      	add	r2, r1
    5b62:	8812      	ldrh	r2, [r2, #0]
    5b64:	f002 021f 	and.w	r2, r2, #31
    5b68:	9903      	ldr	r1, [sp, #12]
    5b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5b6e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b72:	3301      	adds	r3, #1
    5b74:	f8ad 3016 	strh.w	r3, [sp, #22]
    5b78:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5b7c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5b80:	429a      	cmp	r2, r3
    5b82:	f4ff aee7 	bcc.w	5954 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    5b86:	bf00      	nop
    5b88:	bf00      	nop
    5b8a:	b007      	add	sp, #28
    5b8c:	f85d fb04 	ldr.w	pc, [sp], #4
    5b90:	0000bef4 	.word	0x0000bef4
    5b94:	0000bee0 	.word	0x0000bee0

00005b98 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    5b98:	b500      	push	{lr}
    5b9a:	b085      	sub	sp, #20
    5b9c:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    5b9e:	9b01      	ldr	r3, [sp, #4]
    5ba0:	7c1b      	ldrb	r3, [r3, #16]
    5ba2:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5ba6:	2300      	movs	r3, #0
    5ba8:	f8ad 300e 	strh.w	r3, [sp, #14]
    5bac:	e035      	b.n	5c1a <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    5bae:	9b01      	ldr	r3, [sp, #4]
    5bb0:	695a      	ldr	r2, [r3, #20]
    5bb2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5bb6:	00db      	lsls	r3, r3, #3
    5bb8:	4413      	add	r3, r2
    5bba:	781b      	ldrb	r3, [r3, #0]
    5bbc:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    5bc0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5bc4:	4a1f      	ldr	r2, [pc, #124]	; (5c44 <Port_Ipw_Init+0xac>)
    5bc6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5bca:	9b01      	ldr	r3, [sp, #4]
    5bcc:	695a      	ldr	r2, [r3, #20]
    5bce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5bd2:	00db      	lsls	r3, r3, #3
    5bd4:	4413      	add	r3, r2
    5bd6:	4619      	mov	r1, r3
    5bd8:	f7ff fe39 	bl	584e <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    5bdc:	f005 f8e0 	bl	ada0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    5be0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5be4:	4a17      	ldr	r2, [pc, #92]	; (5c44 <Port_Ipw_Init+0xac>)
    5be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5bea:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    5bee:	9b01      	ldr	r3, [sp, #4]
    5bf0:	695a      	ldr	r2, [r3, #20]
    5bf2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5bf6:	00db      	lsls	r3, r3, #3
    5bf8:	4413      	add	r3, r2
    5bfa:	685a      	ldr	r2, [r3, #4]
    5bfc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5c00:	4810      	ldr	r0, [pc, #64]	; (5c44 <Port_Ipw_Init+0xac>)
    5c02:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5c06:	430a      	orrs	r2, r1
    5c08:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    5c0c:	f005 f8f4 	bl	adf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5c10:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5c14:	3301      	adds	r3, #1
    5c16:	f8ad 300e 	strh.w	r3, [sp, #14]
    5c1a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5c1e:	b29b      	uxth	r3, r3
    5c20:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5c24:	429a      	cmp	r2, r3
    5c26:	d3c2      	bcc.n	5bae <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    5c28:	9b01      	ldr	r3, [sp, #4]
    5c2a:	6a1b      	ldr	r3, [r3, #32]
    5c2c:	4619      	mov	r1, r3
    5c2e:	2002      	movs	r0, #2
    5c30:	f7ff fd98 	bl	5764 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    5c34:	9801      	ldr	r0, [sp, #4]
    5c36:	f7ff fe75 	bl	5924 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    5c3a:	bf00      	nop
    5c3c:	b005      	add	sp, #20
    5c3e:	f85d fb04 	ldr.w	pc, [sp], #4
    5c42:	bf00      	nop
    5c44:	0000bee0 	.word	0x0000bee0

00005c48 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    5c48:	b500      	push	{lr}
    5c4a:	b085      	sub	sp, #20
    5c4c:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    5c4e:	9b01      	ldr	r3, [sp, #4]
    5c50:	881b      	ldrh	r3, [r3, #0]
    5c52:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5c56:	2300      	movs	r3, #0
    5c58:	f8ad 300e 	strh.w	r3, [sp, #14]
    5c5c:	e0d2      	b.n	5e04 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    5c5e:	9b01      	ldr	r3, [sp, #4]
    5c60:	68d9      	ldr	r1, [r3, #12]
    5c62:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5c66:	4613      	mov	r3, r2
    5c68:	009b      	lsls	r3, r3, #2
    5c6a:	4413      	add	r3, r2
    5c6c:	009b      	lsls	r3, r3, #2
    5c6e:	440b      	add	r3, r1
    5c70:	7c5b      	ldrb	r3, [r3, #17]
    5c72:	f083 0301 	eor.w	r3, r3, #1
    5c76:	b2db      	uxtb	r3, r3
    5c78:	2b00      	cmp	r3, #0
    5c7a:	f000 80be 	beq.w	5dfa <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    5c7e:	9b01      	ldr	r3, [sp, #4]
    5c80:	68d9      	ldr	r1, [r3, #12]
    5c82:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5c86:	4613      	mov	r3, r2
    5c88:	009b      	lsls	r3, r3, #2
    5c8a:	4413      	add	r3, r2
    5c8c:	009b      	lsls	r3, r3, #2
    5c8e:	440b      	add	r3, r1
    5c90:	7c1b      	ldrb	r3, [r3, #16]
    5c92:	2b00      	cmp	r3, #0
    5c94:	f000 80b1 	beq.w	5dfa <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    5c98:	9b01      	ldr	r3, [sp, #4]
    5c9a:	68d9      	ldr	r1, [r3, #12]
    5c9c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5ca0:	4613      	mov	r3, r2
    5ca2:	009b      	lsls	r3, r3, #2
    5ca4:	4413      	add	r3, r2
    5ca6:	009b      	lsls	r3, r3, #2
    5ca8:	440b      	add	r3, r1
    5caa:	881b      	ldrh	r3, [r3, #0]
    5cac:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5cb0:	9b01      	ldr	r3, [sp, #4]
    5cb2:	68d9      	ldr	r1, [r3, #12]
    5cb4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5cb8:	4613      	mov	r3, r2
    5cba:	009b      	lsls	r3, r3, #2
    5cbc:	4413      	add	r3, r2
    5cbe:	009b      	lsls	r3, r3, #2
    5cc0:	440b      	add	r3, r1
    5cc2:	68db      	ldr	r3, [r3, #12]
    5cc4:	2b02      	cmp	r3, #2
    5cc6:	d11d      	bne.n	5d04 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5cc8:	f005 f9b2 	bl	b030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5ccc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5cd0:	095b      	lsrs	r3, r3, #5
    5cd2:	b29b      	uxth	r3, r3
    5cd4:	461a      	mov	r2, r3
    5cd6:	4b51      	ldr	r3, [pc, #324]	; (5e1c <Port_Ipw_RefreshPortDirection+0x1d4>)
    5cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5cdc:	6959      	ldr	r1, [r3, #20]
    5cde:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5ce2:	f003 031f 	and.w	r3, r3, #31
    5ce6:	2201      	movs	r2, #1
    5ce8:	409a      	lsls	r2, r3
    5cea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5cee:	095b      	lsrs	r3, r3, #5
    5cf0:	b29b      	uxth	r3, r3
    5cf2:	4618      	mov	r0, r3
    5cf4:	4b49      	ldr	r3, [pc, #292]	; (5e1c <Port_Ipw_RefreshPortDirection+0x1d4>)
    5cf6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5cfa:	430a      	orrs	r2, r1
    5cfc:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5cfe:	f005 f9c3 	bl	b088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    5d02:	e07a      	b.n	5dfa <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    5d04:	9b01      	ldr	r3, [sp, #4]
    5d06:	68d9      	ldr	r1, [r3, #12]
    5d08:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d0c:	4613      	mov	r3, r2
    5d0e:	009b      	lsls	r3, r3, #2
    5d10:	4413      	add	r3, r2
    5d12:	009b      	lsls	r3, r3, #2
    5d14:	440b      	add	r3, r1
    5d16:	68db      	ldr	r3, [r3, #12]
    5d18:	2b01      	cmp	r3, #1
    5d1a:	d00b      	beq.n	5d34 <Port_Ipw_RefreshPortDirection+0xec>
    5d1c:	9b01      	ldr	r3, [sp, #4]
    5d1e:	68d9      	ldr	r1, [r3, #12]
    5d20:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d24:	4613      	mov	r3, r2
    5d26:	009b      	lsls	r3, r3, #2
    5d28:	4413      	add	r3, r2
    5d2a:	009b      	lsls	r3, r3, #2
    5d2c:	440b      	add	r3, r1
    5d2e:	68db      	ldr	r3, [r3, #12]
    5d30:	2b03      	cmp	r3, #3
    5d32:	d162      	bne.n	5dfa <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5d34:	f005 f97c 	bl	b030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5d38:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d3c:	095b      	lsrs	r3, r3, #5
    5d3e:	b29b      	uxth	r3, r3
    5d40:	461a      	mov	r2, r3
    5d42:	4b36      	ldr	r3, [pc, #216]	; (5e1c <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5d48:	6959      	ldr	r1, [r3, #20]
    5d4a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d4e:	f003 031f 	and.w	r3, r3, #31
    5d52:	2201      	movs	r2, #1
    5d54:	fa02 f303 	lsl.w	r3, r2, r3
    5d58:	43da      	mvns	r2, r3
    5d5a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d5e:	095b      	lsrs	r3, r3, #5
    5d60:	b29b      	uxth	r3, r3
    5d62:	4618      	mov	r0, r3
    5d64:	4b2d      	ldr	r3, [pc, #180]	; (5e1c <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d66:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5d6a:	400a      	ands	r2, r1
    5d6c:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5d6e:	f005 f98b 	bl	b088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    5d72:	f005 f9af 	bl	b0d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5d76:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d7a:	095b      	lsrs	r3, r3, #5
    5d7c:	b29b      	uxth	r3, r3
    5d7e:	461a      	mov	r2, r3
    5d80:	4b26      	ldr	r3, [pc, #152]	; (5e1c <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5d86:	6999      	ldr	r1, [r3, #24]
    5d88:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d8c:	f003 031f 	and.w	r3, r3, #31
    5d90:	2201      	movs	r2, #1
    5d92:	fa02 f303 	lsl.w	r3, r2, r3
    5d96:	43da      	mvns	r2, r3
    5d98:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d9c:	095b      	lsrs	r3, r3, #5
    5d9e:	b29b      	uxth	r3, r3
    5da0:	4618      	mov	r0, r3
    5da2:	4b1e      	ldr	r3, [pc, #120]	; (5e1c <Port_Ipw_RefreshPortDirection+0x1d4>)
    5da4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5da8:	400a      	ands	r2, r1
    5daa:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5dac:	9b01      	ldr	r3, [sp, #4]
    5dae:	68d9      	ldr	r1, [r3, #12]
    5db0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5db4:	4613      	mov	r3, r2
    5db6:	009b      	lsls	r3, r3, #2
    5db8:	4413      	add	r3, r2
    5dba:	009b      	lsls	r3, r3, #2
    5dbc:	440b      	add	r3, r1
    5dbe:	68db      	ldr	r3, [r3, #12]
    5dc0:	2b03      	cmp	r3, #3
    5dc2:	d118      	bne.n	5df6 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5dc4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5dc8:	095b      	lsrs	r3, r3, #5
    5dca:	b29b      	uxth	r3, r3
    5dcc:	461a      	mov	r2, r3
    5dce:	4b13      	ldr	r3, [pc, #76]	; (5e1c <Port_Ipw_RefreshPortDirection+0x1d4>)
    5dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5dd4:	6999      	ldr	r1, [r3, #24]
    5dd6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5dda:	f003 031f 	and.w	r3, r3, #31
    5dde:	2201      	movs	r2, #1
    5de0:	409a      	lsls	r2, r3
    5de2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5de6:	095b      	lsrs	r3, r3, #5
    5de8:	b29b      	uxth	r3, r3
    5dea:	4618      	mov	r0, r3
    5dec:	4b0b      	ldr	r3, [pc, #44]	; (5e1c <Port_Ipw_RefreshPortDirection+0x1d4>)
    5dee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5df2:	430a      	orrs	r2, r1
    5df4:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    5df6:	f005 f999 	bl	b12c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5dfa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5dfe:	3301      	adds	r3, #1
    5e00:	f8ad 300e 	strh.w	r3, [sp, #14]
    5e04:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5e08:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5e0c:	429a      	cmp	r2, r3
    5e0e:	f4ff af26 	bcc.w	5c5e <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    5e12:	bf00      	nop
    5e14:	bf00      	nop
    5e16:	b005      	add	sp, #20
    5e18:	f85d fb04 	ldr.w	pc, [sp], #4
    5e1c:	0000bef4 	.word	0x0000bef4

00005e20 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    5e20:	b500      	push	{lr}
    5e22:	b085      	sub	sp, #20
    5e24:	4603      	mov	r3, r0
    5e26:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5e2a:	2300      	movs	r3, #0
    5e2c:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    5e30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5e34:	4618      	mov	r0, r3
    5e36:	f000 f871 	bl	5f1c <Dio_Ipw_ReadChannel>
    5e3a:	4603      	mov	r3, r0
    5e3c:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    5e40:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5e44:	4618      	mov	r0, r3
    5e46:	b005      	add	sp, #20
    5e48:	f85d fb04 	ldr.w	pc, [sp], #4

00005e4c <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    5e4c:	b500      	push	{lr}
    5e4e:	b083      	sub	sp, #12
    5e50:	4603      	mov	r3, r0
    5e52:	460a      	mov	r2, r1
    5e54:	f8ad 3006 	strh.w	r3, [sp, #6]
    5e58:	4613      	mov	r3, r2
    5e5a:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    5e5e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    5e62:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5e66:	4611      	mov	r1, r2
    5e68:	4618      	mov	r0, r3
    5e6a:	f000 f87d 	bl	5f68 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    5e6e:	bf00      	nop
    5e70:	b003      	add	sp, #12
    5e72:	f85d fb04 	ldr.w	pc, [sp], #4

00005e76 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    5e76:	b500      	push	{lr}
    5e78:	b085      	sub	sp, #20
    5e7a:	4603      	mov	r3, r0
    5e7c:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5e80:	2300      	movs	r3, #0
    5e82:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    5e86:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5e8a:	4618      	mov	r0, r3
    5e8c:	f000 f892 	bl	5fb4 <Dio_Ipw_FlipChannel>
    5e90:	4603      	mov	r3, r0
    5e92:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    5e96:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5e9a:	4618      	mov	r0, r3
    5e9c:	b005      	add	sp, #20
    5e9e:	f85d fb04 	ldr.w	pc, [sp], #4

00005ea2 <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    5ea2:	b500      	push	{lr}
    5ea4:	b085      	sub	sp, #20
    5ea6:	4603      	mov	r3, r0
    5ea8:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5eac:	2300      	movs	r3, #0
    5eae:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    5eb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5eb4:	4618      	mov	r0, r3
    5eb6:	f000 f8b3 	bl	6020 <Dio_Ipw_ReadPort>
    5eba:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    5ebc:	9b03      	ldr	r3, [sp, #12]
}
    5ebe:	4618      	mov	r0, r3
    5ec0:	b005      	add	sp, #20
    5ec2:	f85d fb04 	ldr.w	pc, [sp], #4

00005ec6 <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    5ec6:	b500      	push	{lr}
    5ec8:	b083      	sub	sp, #12
    5eca:	4603      	mov	r3, r0
    5ecc:	9100      	str	r1, [sp, #0]
    5ece:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    5ed2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5ed6:	9900      	ldr	r1, [sp, #0]
    5ed8:	4618      	mov	r0, r3
    5eda:	f000 f8b9 	bl	6050 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    5ede:	bf00      	nop
    5ee0:	b003      	add	sp, #12
    5ee2:	f85d fb04 	ldr.w	pc, [sp], #4

00005ee6 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    5ee6:	b500      	push	{lr}
    5ee8:	b085      	sub	sp, #20
    5eea:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5eec:	2300      	movs	r3, #0
    5eee:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    5ef0:	9801      	ldr	r0, [sp, #4]
    5ef2:	f000 f8c5 	bl	6080 <Dio_Ipw_ReadChannelGroup>
    5ef6:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    5ef8:	9b03      	ldr	r3, [sp, #12]
}
    5efa:	4618      	mov	r0, r3
    5efc:	b005      	add	sp, #20
    5efe:	f85d fb04 	ldr.w	pc, [sp], #4

00005f02 <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    5f02:	b500      	push	{lr}
    5f04:	b083      	sub	sp, #12
    5f06:	9001      	str	r0, [sp, #4]
    5f08:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    5f0a:	9900      	ldr	r1, [sp, #0]
    5f0c:	9801      	ldr	r0, [sp, #4]
    5f0e:	f000 f8d7 	bl	60c0 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    5f12:	bf00      	nop
    5f14:	b003      	add	sp, #12
    5f16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005f1c <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    5f1c:	b500      	push	{lr}
    5f1e:	b087      	sub	sp, #28
    5f20:	4603      	mov	r3, r0
    5f22:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    5f26:	2300      	movs	r3, #0
    5f28:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5f2c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5f30:	095b      	lsrs	r3, r3, #5
    5f32:	b29b      	uxth	r3, r3
    5f34:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    5f36:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5f3a:	f003 031f 	and.w	r3, r3, #31
    5f3e:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    5f40:	4a08      	ldr	r2, [pc, #32]	; (5f64 <Dio_Ipw_ReadChannel+0x48>)
    5f42:	9b04      	ldr	r3, [sp, #16]
    5f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f48:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    5f4a:	9903      	ldr	r1, [sp, #12]
    5f4c:	9802      	ldr	r0, [sp, #8]
    5f4e:	f000 f940 	bl	61d2 <Gpio_Dio_Ip_ReadPin>
    5f52:	4603      	mov	r3, r0
    5f54:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    5f58:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5f5c:	4618      	mov	r0, r3
    5f5e:	b007      	add	sp, #28
    5f60:	f85d fb04 	ldr.w	pc, [sp], #4
    5f64:	1fff8b24 	.word	0x1fff8b24

00005f68 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    5f68:	b500      	push	{lr}
    5f6a:	b087      	sub	sp, #28
    5f6c:	4603      	mov	r3, r0
    5f6e:	460a      	mov	r2, r1
    5f70:	f8ad 3006 	strh.w	r3, [sp, #6]
    5f74:	4613      	mov	r3, r2
    5f76:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5f7a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5f7e:	095b      	lsrs	r3, r3, #5
    5f80:	b29b      	uxth	r3, r3
    5f82:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    5f84:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5f88:	f003 031f 	and.w	r3, r3, #31
    5f8c:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    5f8e:	4a08      	ldr	r2, [pc, #32]	; (5fb0 <Dio_Ipw_WriteChannel+0x48>)
    5f90:	9b05      	ldr	r3, [sp, #20]
    5f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f96:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    5f98:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5f9c:	461a      	mov	r2, r3
    5f9e:	9904      	ldr	r1, [sp, #16]
    5fa0:	9803      	ldr	r0, [sp, #12]
    5fa2:	f000 f8b7 	bl	6114 <Gpio_Dio_Ip_WritePin>
}
    5fa6:	bf00      	nop
    5fa8:	b007      	add	sp, #28
    5faa:	f85d fb04 	ldr.w	pc, [sp], #4
    5fae:	bf00      	nop
    5fb0:	1fff8b24 	.word	0x1fff8b24

00005fb4 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    5fb4:	b500      	push	{lr}
    5fb6:	b089      	sub	sp, #36	; 0x24
    5fb8:	4603      	mov	r3, r0
    5fba:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5fbe:	2300      	movs	r3, #0
    5fc0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5fc4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5fc8:	095b      	lsrs	r3, r3, #5
    5fca:	b29b      	uxth	r3, r3
    5fcc:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    5fce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5fd2:	f003 031f 	and.w	r3, r3, #31
    5fd6:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    5fd8:	4a10      	ldr	r2, [pc, #64]	; (601c <Dio_Ipw_FlipChannel+0x68>)
    5fda:	9b06      	ldr	r3, [sp, #24]
    5fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fe0:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    5fe2:	2201      	movs	r2, #1
    5fe4:	9b05      	ldr	r3, [sp, #20]
    5fe6:	fa02 f303 	lsl.w	r3, r2, r3
    5fea:	4619      	mov	r1, r3
    5fec:	9804      	ldr	r0, [sp, #16]
    5fee:	f000 f8dc 	bl	61aa <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    5ff2:	9804      	ldr	r0, [sp, #16]
    5ff4:	f000 f8bc 	bl	6170 <Gpio_Dio_Ip_GetPinsOutput>
    5ff8:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    5ffa:	2201      	movs	r2, #1
    5ffc:	9b05      	ldr	r3, [sp, #20]
    5ffe:	409a      	lsls	r2, r3
    6000:	9b03      	ldr	r3, [sp, #12]
    6002:	401a      	ands	r2, r3
    6004:	9b05      	ldr	r3, [sp, #20]
    6006:	fa22 f303 	lsr.w	r3, r2, r3
    600a:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    600e:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    6012:	4618      	mov	r0, r3
    6014:	b009      	add	sp, #36	; 0x24
    6016:	f85d fb04 	ldr.w	pc, [sp], #4
    601a:	bf00      	nop
    601c:	1fff8b24 	.word	0x1fff8b24

00006020 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    6020:	b500      	push	{lr}
    6022:	b085      	sub	sp, #20
    6024:	4603      	mov	r3, r0
    6026:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    602a:	2300      	movs	r3, #0
    602c:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    602e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6032:	4a06      	ldr	r2, [pc, #24]	; (604c <Dio_Ipw_ReadPort+0x2c>)
    6034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6038:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    603a:	9802      	ldr	r0, [sp, #8]
    603c:	f000 f8be 	bl	61bc <Gpio_Dio_Ip_ReadPins>
    6040:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    6042:	9b03      	ldr	r3, [sp, #12]
}
    6044:	4618      	mov	r0, r3
    6046:	b005      	add	sp, #20
    6048:	f85d fb04 	ldr.w	pc, [sp], #4
    604c:	1fff8b24 	.word	0x1fff8b24

00006050 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6050:	b500      	push	{lr}
    6052:	b085      	sub	sp, #20
    6054:	4603      	mov	r3, r0
    6056:	9100      	str	r1, [sp, #0]
    6058:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    605c:	9b00      	ldr	r3, [sp, #0]
    605e:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6060:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6064:	4a05      	ldr	r2, [pc, #20]	; (607c <Dio_Ipw_WritePort+0x2c>)
    6066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    606a:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    606c:	9903      	ldr	r1, [sp, #12]
    606e:	9802      	ldr	r0, [sp, #8]
    6070:	f000 f875 	bl	615e <Gpio_Dio_Ip_WritePins>
}
    6074:	bf00      	nop
    6076:	b005      	add	sp, #20
    6078:	f85d fb04 	ldr.w	pc, [sp], #4
    607c:	1fff8b24 	.word	0x1fff8b24

00006080 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    6080:	b500      	push	{lr}
    6082:	b087      	sub	sp, #28
    6084:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6086:	2300      	movs	r3, #0
    6088:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    608a:	9b01      	ldr	r3, [sp, #4]
    608c:	781b      	ldrb	r3, [r3, #0]
    608e:	461a      	mov	r2, r3
    6090:	4b0a      	ldr	r3, [pc, #40]	; (60bc <Dio_Ipw_ReadChannelGroup+0x3c>)
    6092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6096:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6098:	9804      	ldr	r0, [sp, #16]
    609a:	f000 f88f 	bl	61bc <Gpio_Dio_Ip_ReadPins>
    609e:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    60a0:	9b01      	ldr	r3, [sp, #4]
    60a2:	685a      	ldr	r2, [r3, #4]
    60a4:	9b03      	ldr	r3, [sp, #12]
    60a6:	4013      	ands	r3, r2
    60a8:	9a01      	ldr	r2, [sp, #4]
    60aa:	7852      	ldrb	r2, [r2, #1]
    60ac:	40d3      	lsrs	r3, r2
    60ae:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    60b0:	9b05      	ldr	r3, [sp, #20]
}
    60b2:	4618      	mov	r0, r3
    60b4:	b007      	add	sp, #28
    60b6:	f85d fb04 	ldr.w	pc, [sp], #4
    60ba:	bf00      	nop
    60bc:	1fff8b24 	.word	0x1fff8b24

000060c0 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    60c0:	b500      	push	{lr}
    60c2:	b087      	sub	sp, #28
    60c4:	9001      	str	r0, [sp, #4]
    60c6:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    60c8:	9b01      	ldr	r3, [sp, #4]
    60ca:	781b      	ldrb	r3, [r3, #0]
    60cc:	461a      	mov	r2, r3
    60ce:	4b10      	ldr	r3, [pc, #64]	; (6110 <Dio_Ipw_WriteChannelGroup+0x50>)
    60d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    60d4:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    60d6:	9b01      	ldr	r3, [sp, #4]
    60d8:	785b      	ldrb	r3, [r3, #1]
    60da:	461a      	mov	r2, r3
    60dc:	9b00      	ldr	r3, [sp, #0]
    60de:	fa03 f202 	lsl.w	r2, r3, r2
    60e2:	9b01      	ldr	r3, [sp, #4]
    60e4:	685b      	ldr	r3, [r3, #4]
    60e6:	4013      	ands	r3, r2
    60e8:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    60ea:	9904      	ldr	r1, [sp, #16]
    60ec:	9805      	ldr	r0, [sp, #20]
    60ee:	f000 f84a 	bl	6186 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    60f2:	9b04      	ldr	r3, [sp, #16]
    60f4:	43da      	mvns	r2, r3
    60f6:	9b01      	ldr	r3, [sp, #4]
    60f8:	685b      	ldr	r3, [r3, #4]
    60fa:	4013      	ands	r3, r2
    60fc:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    60fe:	9903      	ldr	r1, [sp, #12]
    6100:	9805      	ldr	r0, [sp, #20]
    6102:	f000 f849 	bl	6198 <Gpio_Dio_Ip_ClearPins>

}
    6106:	bf00      	nop
    6108:	b007      	add	sp, #28
    610a:	f85d fb04 	ldr.w	pc, [sp], #4
    610e:	bf00      	nop
    6110:	1fff8b24 	.word	0x1fff8b24

00006114 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    6114:	b500      	push	{lr}
    6116:	b087      	sub	sp, #28
    6118:	9003      	str	r0, [sp, #12]
    611a:	9102      	str	r1, [sp, #8]
    611c:	4613      	mov	r3, r2
    611e:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    6122:	f001 ff2d 	bl	7f80 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    6126:	9b03      	ldr	r3, [sp, #12]
    6128:	681b      	ldr	r3, [r3, #0]
    612a:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    612c:	2201      	movs	r2, #1
    612e:	9b02      	ldr	r3, [sp, #8]
    6130:	fa02 f303 	lsl.w	r3, r2, r3
    6134:	43db      	mvns	r3, r3
    6136:	9a05      	ldr	r2, [sp, #20]
    6138:	4013      	ands	r3, r2
    613a:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    613c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6140:	9b02      	ldr	r3, [sp, #8]
    6142:	fa02 f303 	lsl.w	r3, r2, r3
    6146:	9a05      	ldr	r2, [sp, #20]
    6148:	4313      	orrs	r3, r2
    614a:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    614c:	9b03      	ldr	r3, [sp, #12]
    614e:	9a05      	ldr	r2, [sp, #20]
    6150:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    6152:	f001 ff41 	bl	7fd8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    6156:	bf00      	nop
    6158:	b007      	add	sp, #28
    615a:	f85d fb04 	ldr.w	pc, [sp], #4

0000615e <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    615e:	b082      	sub	sp, #8
    6160:	9001      	str	r0, [sp, #4]
    6162:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    6164:	9b01      	ldr	r3, [sp, #4]
    6166:	9a00      	ldr	r2, [sp, #0]
    6168:	601a      	str	r2, [r3, #0]
}
    616a:	bf00      	nop
    616c:	b002      	add	sp, #8
    616e:	4770      	bx	lr

00006170 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    6170:	b084      	sub	sp, #16
    6172:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6174:	2300      	movs	r3, #0
    6176:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    6178:	9b01      	ldr	r3, [sp, #4]
    617a:	681b      	ldr	r3, [r3, #0]
    617c:	9303      	str	r3, [sp, #12]
    return returnValue;
    617e:	9b03      	ldr	r3, [sp, #12]
}
    6180:	4618      	mov	r0, r3
    6182:	b004      	add	sp, #16
    6184:	4770      	bx	lr

00006186 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6186:	b082      	sub	sp, #8
    6188:	9001      	str	r0, [sp, #4]
    618a:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    618c:	9b01      	ldr	r3, [sp, #4]
    618e:	9a00      	ldr	r2, [sp, #0]
    6190:	605a      	str	r2, [r3, #4]
}
    6192:	bf00      	nop
    6194:	b002      	add	sp, #8
    6196:	4770      	bx	lr

00006198 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6198:	b082      	sub	sp, #8
    619a:	9001      	str	r0, [sp, #4]
    619c:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    619e:	9b01      	ldr	r3, [sp, #4]
    61a0:	9a00      	ldr	r2, [sp, #0]
    61a2:	609a      	str	r2, [r3, #8]
}
    61a4:	bf00      	nop
    61a6:	b002      	add	sp, #8
    61a8:	4770      	bx	lr

000061aa <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    61aa:	b082      	sub	sp, #8
    61ac:	9001      	str	r0, [sp, #4]
    61ae:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    61b0:	9b01      	ldr	r3, [sp, #4]
    61b2:	9a00      	ldr	r2, [sp, #0]
    61b4:	60da      	str	r2, [r3, #12]
}
    61b6:	bf00      	nop
    61b8:	b002      	add	sp, #8
    61ba:	4770      	bx	lr

000061bc <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    61bc:	b084      	sub	sp, #16
    61be:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    61c0:	2300      	movs	r3, #0
    61c2:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    61c4:	9b01      	ldr	r3, [sp, #4]
    61c6:	691b      	ldr	r3, [r3, #16]
    61c8:	9303      	str	r3, [sp, #12]
    return returnValue;
    61ca:	9b03      	ldr	r3, [sp, #12]
}
    61cc:	4618      	mov	r0, r3
    61ce:	b004      	add	sp, #16
    61d0:	4770      	bx	lr

000061d2 <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    61d2:	b084      	sub	sp, #16
    61d4:	9001      	str	r0, [sp, #4]
    61d6:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    61d8:	2300      	movs	r3, #0
    61da:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    61de:	9b01      	ldr	r3, [sp, #4]
    61e0:	691a      	ldr	r2, [r3, #16]
    61e2:	2101      	movs	r1, #1
    61e4:	9b00      	ldr	r3, [sp, #0]
    61e6:	fa01 f303 	lsl.w	r3, r1, r3
    61ea:	401a      	ands	r2, r3
    61ec:	9b00      	ldr	r3, [sp, #0]
    61ee:	fa22 f303 	lsr.w	r3, r2, r3
    61f2:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    61f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    61fa:	4618      	mov	r0, r3
    61fc:	b004      	add	sp, #16
    61fe:	4770      	bx	lr

00006200 <Ftm_Gpt_Ip_GetChInterruptStatusFlag>:
 *
 * @return  TRUE if a channel (n) event has occurred, FALSE otherwise
 * @pre     The driver needs to be initialized.
 */
static inline boolean Ftm_Gpt_Ip_GetChInterruptStatusFlag(uint8 instance, uint8 channel)
{
    6200:	b082      	sub	sp, #8
    6202:	4603      	mov	r3, r0
    6204:	460a      	mov	r2, r1
    6206:	f88d 3007 	strb.w	r3, [sp, #7]
    620a:	4613      	mov	r3, r2
    620c:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->CONTROLS[channel].CSC & FTM_CSC_CHF_MASK)) ? TRUE : FALSE;
    6210:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6214:	4a09      	ldr	r2, [pc, #36]	; (623c <Ftm_Gpt_Ip_GetChInterruptStatusFlag+0x3c>)
    6216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    621a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    621e:	3301      	adds	r3, #1
    6220:	00db      	lsls	r3, r3, #3
    6222:	4413      	add	r3, r2
    6224:	685b      	ldr	r3, [r3, #4]
    6226:	f003 0380 	and.w	r3, r3, #128	; 0x80
    622a:	2b00      	cmp	r3, #0
    622c:	bf14      	ite	ne
    622e:	2301      	movne	r3, #1
    6230:	2300      	moveq	r3, #0
    6232:	b2db      	uxtb	r3, r3
}
    6234:	4618      	mov	r0, r3
    6236:	b002      	add	sp, #8
    6238:	4770      	bx	lr
    623a:	bf00      	nop
    623c:	0000bf08 	.word	0x0000bf08

00006240 <Ftm_Gpt_Ip_GetCntValue>:
*
* @return   current counter value
*
*/
static inline uint32 Ftm_Gpt_Ip_GetCntValue(uint8 instance)
{
    6240:	b082      	sub	sp, #8
    6242:	4603      	mov	r3, r0
    6244:	f88d 3007 	strb.w	r3, [sp, #7]
    return ftmGptBase[instance]->CNT;
    6248:	f89d 3007 	ldrb.w	r3, [sp, #7]
    624c:	4a03      	ldr	r2, [pc, #12]	; (625c <Ftm_Gpt_Ip_GetCntValue+0x1c>)
    624e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6252:	685b      	ldr	r3, [r3, #4]
}
    6254:	4618      	mov	r0, r3
    6256:	b002      	add	sp, #8
    6258:	4770      	bx	lr
    625a:	bf00      	nop
    625c:	0000bf08 	.word	0x0000bf08

00006260 <Ftm_Gpt_Ip_GetCompareValue>:
 *
 * @return      compare value (CV)
 *
 */
static inline uint32 Ftm_Gpt_Ip_GetCompareValue(uint8 instance, uint8 channel)
{
    6260:	b082      	sub	sp, #8
    6262:	4603      	mov	r3, r0
    6264:	460a      	mov	r2, r1
    6266:	f88d 3007 	strb.w	r3, [sp, #7]
    626a:	4613      	mov	r3, r2
    626c:	f88d 3006 	strb.w	r3, [sp, #6]
    return ftmGptBase[instance]->CONTROLS[channel].CV;
    6270:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6274:	4a05      	ldr	r2, [pc, #20]	; (628c <Ftm_Gpt_Ip_GetCompareValue+0x2c>)
    6276:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    627a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    627e:	3301      	adds	r3, #1
    6280:	00db      	lsls	r3, r3, #3
    6282:	4413      	add	r3, r2
    6284:	689b      	ldr	r3, [r3, #8]
}
    6286:	4618      	mov	r0, r3
    6288:	b002      	add	sp, #8
    628a:	4770      	bx	lr
    628c:	0000bf08 	.word	0x0000bf08

00006290 <Ftm_Gpt_Ip_SetFreezeBits>:
 *
 * @return      void
 *
 */
static inline void Ftm_Gpt_Ip_SetFreezeBits(uint8 instance, boolean freezeBits)
{
    6290:	b500      	push	{lr}
    6292:	b085      	sub	sp, #20
    6294:	4603      	mov	r3, r0
    6296:	460a      	mov	r2, r1
    6298:	f88d 3007 	strb.w	r3, [sp, #7]
    629c:	4613      	mov	r3, r2
    629e:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 freezeVal = (TRUE == freezeBits) ? 0UL : 3UL;
    62a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    62a6:	2b00      	cmp	r3, #0
    62a8:	d001      	beq.n	62ae <Ftm_Gpt_Ip_SetFreezeBits+0x1e>
    62aa:	2300      	movs	r3, #0
    62ac:	e000      	b.n	62b0 <Ftm_Gpt_Ip_SetFreezeBits+0x20>
    62ae:	2303      	movs	r3, #3
    62b0:	9303      	str	r3, [sp, #12]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17();
    62b2:	f002 fa3d 	bl	8730 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17>
    ftmGptBase[instance]->CONF = (ftmGptBase[instance]->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(freezeVal);
    62b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62ba:	4a0c      	ldr	r2, [pc, #48]	; (62ec <Ftm_Gpt_Ip_SetFreezeBits+0x5c>)
    62bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    62c4:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
    62c8:	9b03      	ldr	r3, [sp, #12]
    62ca:	019b      	lsls	r3, r3, #6
    62cc:	b2da      	uxtb	r2, r3
    62ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62d2:	4806      	ldr	r0, [pc, #24]	; (62ec <Ftm_Gpt_Ip_SetFreezeBits+0x5c>)
    62d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    62d8:	430a      	orrs	r2, r1
    62da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17();
    62de:	f002 fa53 	bl	8788 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17>
}
    62e2:	bf00      	nop
    62e4:	b005      	add	sp, #20
    62e6:	f85d fb04 	ldr.w	pc, [sp], #4
    62ea:	bf00      	nop
    62ec:	0000bf08 	.word	0x0000bf08

000062f0 <Ftm_Gpt_Ip_SetCounterInitVal>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetCounterInitVal(uint8 instance, uint16 value)
{
    62f0:	b082      	sub	sp, #8
    62f2:	4603      	mov	r3, r0
    62f4:	460a      	mov	r2, r1
    62f6:	f88d 3007 	strb.w	r3, [sp, #7]
    62fa:	4613      	mov	r3, r2
    62fc:	f8ad 3004 	strh.w	r3, [sp, #4]
    ftmGptBase[instance]->CNTIN = (uint32)(((uint32)value << FTM_CNTIN_INIT_SHIFT) & FTM_CNTIN_INIT_MASK);
    6300:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6304:	4a04      	ldr	r2, [pc, #16]	; (6318 <Ftm_Gpt_Ip_SetCounterInitVal+0x28>)
    6306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    630a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    630e:	64da      	str	r2, [r3, #76]	; 0x4c
}
    6310:	bf00      	nop
    6312:	b002      	add	sp, #8
    6314:	4770      	bx	lr
    6316:	bf00      	nop
    6318:	0000bf08 	.word	0x0000bf08

0000631c <Ftm_Gpt_Ip_SetCounter>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetCounter(uint8 instance, uint16 value)
{
    631c:	b082      	sub	sp, #8
    631e:	4603      	mov	r3, r0
    6320:	460a      	mov	r2, r1
    6322:	f88d 3007 	strb.w	r3, [sp, #7]
    6326:	4613      	mov	r3, r2
    6328:	f8ad 3004 	strh.w	r3, [sp, #4]
    ftmGptBase[instance]->CNT = (uint32)(((uint32)value << FTM_CNT_COUNT_SHIFT) & FTM_CNT_COUNT_MASK);
    632c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6330:	4a04      	ldr	r2, [pc, #16]	; (6344 <Ftm_Gpt_Ip_SetCounter+0x28>)
    6332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6336:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    633a:	605a      	str	r2, [r3, #4]
}
    633c:	bf00      	nop
    633e:	b002      	add	sp, #8
    6340:	4770      	bx	lr
    6342:	bf00      	nop
    6344:	0000bf08 	.word	0x0000bf08

00006348 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>:
 *
 * @return      void
 * @pre         The driver needs to be initialized.
 */
static inline void Ftm_Gpt_Ip_ClearChInterruptStatusFlag(uint8 instance, uint8 channel)
{
    6348:	b082      	sub	sp, #8
    634a:	4603      	mov	r3, r0
    634c:	460a      	mov	r2, r1
    634e:	f88d 3007 	strb.w	r3, [sp, #7]
    6352:	4613      	mov	r3, r2
    6354:	f88d 3006 	strb.w	r3, [sp, #6]
    ftmGptBase[instance]-> CONTROLS[channel].CSC &= ~(FTM_CSC_CHF_MASK);
    6358:	f89d 3007 	ldrb.w	r3, [sp, #7]
    635c:	4a0c      	ldr	r2, [pc, #48]	; (6390 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag+0x48>)
    635e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6362:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6366:	3301      	adds	r3, #1
    6368:	00db      	lsls	r3, r3, #3
    636a:	4413      	add	r3, r2
    636c:	685a      	ldr	r2, [r3, #4]
    636e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6372:	4907      	ldr	r1, [pc, #28]	; (6390 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag+0x48>)
    6374:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    6378:	f89d 3006 	ldrb.w	r3, [sp, #6]
    637c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    6380:	3301      	adds	r3, #1
    6382:	00db      	lsls	r3, r3, #3
    6384:	440b      	add	r3, r1
    6386:	605a      	str	r2, [r3, #4]
}
    6388:	bf00      	nop
    638a:	b002      	add	sp, #8
    638c:	4770      	bx	lr
    638e:	bf00      	nop
    6390:	0000bf08 	.word	0x0000bf08

00006394 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>:
 * @param[in]   aboEn - Enables the FTM channel(n) interrupt
 *              - True : Enable the FTM channel(n) interrupt.
 *              - False: Disable the FTM channel(n) interrupt.
 */
static inline void Ftm_Gpt_Ip_SetChannelEnableInterrupt(uint8 instance, uint8 channel, boolean aboEn)
{
    6394:	b082      	sub	sp, #8
    6396:	4603      	mov	r3, r0
    6398:	f88d 3007 	strb.w	r3, [sp, #7]
    639c:	460b      	mov	r3, r1
    639e:	f88d 3006 	strb.w	r3, [sp, #6]
    63a2:	4613      	mov	r3, r2
    63a4:	f88d 3005 	strb.w	r3, [sp, #5]
    ftmGptBase[instance]-> CONTROLS[channel].CSC = (ftmGptBase[instance]-> CONTROLS[channel].CSC & ~(FTM_CSC_CHIE_MASK)) | FTM_CSC_CHIE((TRUE == aboEn) ? 1UL : 0UL);
    63a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    63ac:	4a10      	ldr	r2, [pc, #64]	; (63f0 <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x5c>)
    63ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    63b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    63b6:	3301      	adds	r3, #1
    63b8:	00db      	lsls	r3, r3, #3
    63ba:	4413      	add	r3, r2
    63bc:	685b      	ldr	r3, [r3, #4]
    63be:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    63c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    63c6:	2b00      	cmp	r3, #0
    63c8:	d001      	beq.n	63ce <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x3a>
    63ca:	2040      	movs	r0, #64	; 0x40
    63cc:	e000      	b.n	63d0 <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x3c>
    63ce:	2000      	movs	r0, #0
    63d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    63d4:	4906      	ldr	r1, [pc, #24]	; (63f0 <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x5c>)
    63d6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    63da:	f89d 3006 	ldrb.w	r3, [sp, #6]
    63de:	4302      	orrs	r2, r0
    63e0:	3301      	adds	r3, #1
    63e2:	00db      	lsls	r3, r3, #3
    63e4:	440b      	add	r3, r1
    63e6:	605a      	str	r2, [r3, #4]
}
    63e8:	bf00      	nop
    63ea:	b002      	add	sp, #8
    63ec:	4770      	bx	lr
    63ee:	bf00      	nop
    63f0:	0000bf08 	.word	0x0000bf08

000063f4 <Ftm_Gpt_Ip_SetClockSource>:
 * @param[in]       instance    FTM hardware instance number
 *
 * @return      void
 */
static inline void Ftm_Gpt_Ip_SetClockSource(uint8 instance, Ftm_Gpt_Ip_ClockSource clocksource)
{
    63f4:	b500      	push	{lr}
    63f6:	b083      	sub	sp, #12
    63f8:	4603      	mov	r3, r0
    63fa:	9100      	str	r1, [sp, #0]
    63fc:	f88d 3007 	strb.w	r3, [sp, #7]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21();
    6400:	f002 f9e8 	bl	87d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21>
    ftmGptBase[instance]->SC = (ftmGptBase[instance]->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(clocksource);
    6404:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6408:	4a0b      	ldr	r2, [pc, #44]	; (6438 <Ftm_Gpt_Ip_SetClockSource+0x44>)
    640a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    640e:	681b      	ldr	r3, [r3, #0]
    6410:	f023 0118 	bic.w	r1, r3, #24
    6414:	9b00      	ldr	r3, [sp, #0]
    6416:	00db      	lsls	r3, r3, #3
    6418:	f003 0218 	and.w	r2, r3, #24
    641c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6420:	4805      	ldr	r0, [pc, #20]	; (6438 <Ftm_Gpt_Ip_SetClockSource+0x44>)
    6422:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6426:	430a      	orrs	r2, r1
    6428:	601a      	str	r2, [r3, #0]
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21();
    642a:	f002 f9ff 	bl	882c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21>
}
    642e:	bf00      	nop
    6430:	b003      	add	sp, #12
    6432:	f85d fb04 	ldr.w	pc, [sp], #4
    6436:	bf00      	nop
    6438:	0000bf08 	.word	0x0000bf08

0000643c <Ftm_Gpt_Ip_SetPrescaler>:
 *
 * @return        void
 *
 */
static inline void Ftm_Gpt_Ip_SetPrescaler(uint8 instance, uint8 prescalerValue)
{
    643c:	b500      	push	{lr}
    643e:	b083      	sub	sp, #12
    6440:	4603      	mov	r3, r0
    6442:	460a      	mov	r2, r1
    6444:	f88d 3007 	strb.w	r3, [sp, #7]
    6448:	4613      	mov	r3, r2
    644a:	f88d 3006 	strb.w	r3, [sp, #6]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22();
    644e:	f002 fa13 	bl	8878 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22>
    ftmGptBase[instance]->SC = (ftmGptBase[instance]->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(prescalerValue);
    6452:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6456:	4a0b      	ldr	r2, [pc, #44]	; (6484 <Ftm_Gpt_Ip_SetPrescaler+0x48>)
    6458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    645c:	681b      	ldr	r3, [r3, #0]
    645e:	f023 0107 	bic.w	r1, r3, #7
    6462:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6466:	f003 0207 	and.w	r2, r3, #7
    646a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    646e:	4805      	ldr	r0, [pc, #20]	; (6484 <Ftm_Gpt_Ip_SetPrescaler+0x48>)
    6470:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6474:	430a      	orrs	r2, r1
    6476:	601a      	str	r2, [r3, #0]
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22();
    6478:	f002 fa2a 	bl	88d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22>
}
    647c:	bf00      	nop
    647e:	b003      	add	sp, #12
    6480:	f85d fb04 	ldr.w	pc, [sp], #4
    6484:	0000bf08 	.word	0x0000bf08

00006488 <Ftm_Gpt_Ip_SetEnFtmModule>:
 * @param[in]   enable
 *
 * @return      void
 */
static inline void Ftm_Gpt_Ip_SetEnFtmModule(uint8 instance, boolean enable)
{
    6488:	b500      	push	{lr}
    648a:	b083      	sub	sp, #12
    648c:	4603      	mov	r3, r0
    648e:	460a      	mov	r2, r1
    6490:	f88d 3007 	strb.w	r3, [sp, #7]
    6494:	4613      	mov	r3, r2
    6496:	f88d 3006 	strb.w	r3, [sp, #6]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23();
    649a:	f002 fa3f 	bl	891c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23>
    {
        ftmGptBase[instance]->MODE &= ~(FTM_MODE_FTMEN_MASK);
    649e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64a2:	4a13      	ldr	r2, [pc, #76]	; (64f0 <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    64a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    64aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64ae:	4910      	ldr	r1, [pc, #64]	; (64f0 <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    64b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    64b4:	f022 0201 	bic.w	r2, r2, #1
    64b8:	655a      	str	r2, [r3, #84]	; 0x54
        ftmGptBase[instance]->MODE |= FTM_MODE_FTMEN(enable ? 1UL : 0UL);
    64ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64be:	4a0c      	ldr	r2, [pc, #48]	; (64f0 <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    64c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    64c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    64ca:	2b00      	cmp	r3, #0
    64cc:	d001      	beq.n	64d2 <Ftm_Gpt_Ip_SetEnFtmModule+0x4a>
    64ce:	2101      	movs	r1, #1
    64d0:	e000      	b.n	64d4 <Ftm_Gpt_Ip_SetEnFtmModule+0x4c>
    64d2:	2100      	movs	r1, #0
    64d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64d8:	4805      	ldr	r0, [pc, #20]	; (64f0 <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    64da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    64de:	430a      	orrs	r2, r1
    64e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23();
    64e2:	f002 fa47 	bl	8974 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23>
}
    64e6:	bf00      	nop
    64e8:	b003      	add	sp, #12
    64ea:	f85d fb04 	ldr.w	pc, [sp], #4
    64ee:	bf00      	nop
    64f0:	0000bf08 	.word	0x0000bf08

000064f4 <Ftm_Gpt_Ip_SetCompareValue>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetCompareValue(uint8 instance, uint8 channel, uint32 value)
{
    64f4:	b082      	sub	sp, #8
    64f6:	4603      	mov	r3, r0
    64f8:	9200      	str	r2, [sp, #0]
    64fa:	f88d 3007 	strb.w	r3, [sp, #7]
    64fe:	460b      	mov	r3, r1
    6500:	f88d 3006 	strb.w	r3, [sp, #6]
    ftmGptBase[instance]-> CONTROLS[channel].CV = (uint32)((((uint32)value << FTM_CV_VAL_SHIFT) & FTM_CV_VAL_MASK));
    6504:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6508:	4a06      	ldr	r2, [pc, #24]	; (6524 <Ftm_Gpt_Ip_SetCompareValue+0x30>)
    650a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    650e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6512:	9a00      	ldr	r2, [sp, #0]
    6514:	b292      	uxth	r2, r2
    6516:	3301      	adds	r3, #1
    6518:	00db      	lsls	r3, r3, #3
    651a:	440b      	add	r3, r1
    651c:	609a      	str	r2, [r3, #8]

}
    651e:	bf00      	nop
    6520:	b002      	add	sp, #8
    6522:	4770      	bx	lr
    6524:	0000bf08 	.word	0x0000bf08

00006528 <Ftm_Gpt_Ip_WriteModulo>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_WriteModulo(uint8 instance, uint16 value)
{
    6528:	b082      	sub	sp, #8
    652a:	4603      	mov	r3, r0
    652c:	460a      	mov	r2, r1
    652e:	f88d 3007 	strb.w	r3, [sp, #7]
    6532:	4613      	mov	r3, r2
    6534:	f8ad 3004 	strh.w	r3, [sp, #4]
    ftmGptBase[instance]-> MOD = value;
    6538:	f89d 3007 	ldrb.w	r3, [sp, #7]
    653c:	4a04      	ldr	r2, [pc, #16]	; (6550 <Ftm_Gpt_Ip_WriteModulo+0x28>)
    653e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6542:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6546:	609a      	str	r2, [r3, #8]

}
    6548:	bf00      	nop
    654a:	b002      	add	sp, #8
    654c:	4770      	bx	lr
    654e:	bf00      	nop
    6550:	0000bf08 	.word	0x0000bf08

00006554 <Ftm_Gpt_Ip_ModeSelectA>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_ModeSelectA(uint8 instance, uint8 channel, boolean enable)
{
    6554:	b500      	push	{lr}
    6556:	b083      	sub	sp, #12
    6558:	4603      	mov	r3, r0
    655a:	f88d 3007 	strb.w	r3, [sp, #7]
    655e:	460b      	mov	r3, r1
    6560:	f88d 3006 	strb.w	r3, [sp, #6]
    6564:	4613      	mov	r3, r2
    6566:	f88d 3005 	strb.w	r3, [sp, #5]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24();
    656a:	f002 fa29 	bl	89c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24>
    if (TRUE == enable)
    656e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6572:	2b00      	cmp	r3, #0
    6574:	d018      	beq.n	65a8 <Ftm_Gpt_Ip_ModeSelectA+0x54>
    {
        ftmGptBase[instance]->CONTROLS[channel].CSC |= FTM_CSC_MSA_MASK;
    6576:	f89d 3007 	ldrb.w	r3, [sp, #7]
    657a:	4a1a      	ldr	r2, [pc, #104]	; (65e4 <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    657c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6580:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6584:	3301      	adds	r3, #1
    6586:	00db      	lsls	r3, r3, #3
    6588:	4413      	add	r3, r2
    658a:	685a      	ldr	r2, [r3, #4]
    658c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6590:	4914      	ldr	r1, [pc, #80]	; (65e4 <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    6592:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    6596:	f89d 3006 	ldrb.w	r3, [sp, #6]
    659a:	f042 0210 	orr.w	r2, r2, #16
    659e:	3301      	adds	r3, #1
    65a0:	00db      	lsls	r3, r3, #3
    65a2:	440b      	add	r3, r1
    65a4:	605a      	str	r2, [r3, #4]
    65a6:	e017      	b.n	65d8 <Ftm_Gpt_Ip_ModeSelectA+0x84>
    }
    else
    {
        ftmGptBase[instance]->CONTROLS[channel].CSC &= (~(FTM_CSC_MSA_MASK));
    65a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65ac:	4a0d      	ldr	r2, [pc, #52]	; (65e4 <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    65ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    65b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    65b6:	3301      	adds	r3, #1
    65b8:	00db      	lsls	r3, r3, #3
    65ba:	4413      	add	r3, r2
    65bc:	685a      	ldr	r2, [r3, #4]
    65be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65c2:	4908      	ldr	r1, [pc, #32]	; (65e4 <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    65c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    65c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    65cc:	f022 0210 	bic.w	r2, r2, #16
    65d0:	3301      	adds	r3, #1
    65d2:	00db      	lsls	r3, r3, #3
    65d4:	440b      	add	r3, r1
    65d6:	605a      	str	r2, [r3, #4]
    }
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24();
    65d8:	f002 fa1e 	bl	8a18 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24>
}
    65dc:	bf00      	nop
    65de:	b003      	add	sp, #12
    65e0:	f85d fb04 	ldr.w	pc, [sp], #4
    65e4:	0000bf08 	.word	0x0000bf08

000065e8 <Ftm_Gpt_Ip_SetHalfCycleValue>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetHalfCycleValue(FTM_Type * const base, uint16 value)
{
    65e8:	b082      	sub	sp, #8
    65ea:	9001      	str	r0, [sp, #4]
    65ec:	460b      	mov	r3, r1
    65ee:	f8ad 3002 	strh.w	r3, [sp, #2]
    ((base)->HCR) = value;
    65f2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    65f6:	9b01      	ldr	r3, [sp, #4]
    65f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    65fc:	bf00      	nop
    65fe:	b002      	add	sp, #8
    6600:	4770      	bx	lr

00006602 <Ftm_Gpt_Ip_GetChInterruptEnableFlag>:
 *
 * @return  TRUE if a channel (n) event has occurred, FALSE otherwise
 * @pre     The driver needs to be initialized.
 */
static inline boolean Ftm_Gpt_Ip_GetChInterruptEnableFlag(uint8 instance, uint8 channel)
{
    6602:	b082      	sub	sp, #8
    6604:	4603      	mov	r3, r0
    6606:	460a      	mov	r2, r1
    6608:	f88d 3007 	strb.w	r3, [sp, #7]
    660c:	4613      	mov	r3, r2
    660e:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->CONTROLS[channel].CSC & FTM_CSC_CHIE_MASK)) ? TRUE : FALSE;
    6612:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6616:	4a09      	ldr	r2, [pc, #36]	; (663c <Ftm_Gpt_Ip_GetChInterruptEnableFlag+0x3a>)
    6618:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    661c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6620:	3301      	adds	r3, #1
    6622:	00db      	lsls	r3, r3, #3
    6624:	4413      	add	r3, r2
    6626:	685b      	ldr	r3, [r3, #4]
    6628:	f003 0340 	and.w	r3, r3, #64	; 0x40
    662c:	2b00      	cmp	r3, #0
    662e:	bf14      	ite	ne
    6630:	2301      	movne	r3, #1
    6632:	2300      	moveq	r3, #0
    6634:	b2db      	uxtb	r3, r3
}
    6636:	4618      	mov	r0, r3
    6638:	b002      	add	sp, #8
    663a:	4770      	bx	lr
    663c:	0000bf08 	.word	0x0000bf08

00006640 <Ftm_Gpt_Ip_GetChannelEventStatus>:
 *         - True : A channel event has occurred
 *         - False: No channel event has occurred
 *
 */
static inline boolean Ftm_Gpt_Ip_GetChannelEventStatus(uint8 instance, uint8 channel)
{
    6640:	b082      	sub	sp, #8
    6642:	4603      	mov	r3, r0
    6644:	460a      	mov	r2, r1
    6646:	f88d 3007 	strb.w	r3, [sp, #7]
    664a:	4613      	mov	r3, r2
    664c:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->STATUS & (1UL << channel))) ? TRUE : FALSE;
    6650:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6654:	4a08      	ldr	r2, [pc, #32]	; (6678 <Ftm_Gpt_Ip_GetChannelEventStatus+0x38>)
    6656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    665a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    665c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6660:	fa22 f303 	lsr.w	r3, r2, r3
    6664:	f003 0301 	and.w	r3, r3, #1
    6668:	2b00      	cmp	r3, #0
    666a:	bf14      	ite	ne
    666c:	2301      	movne	r3, #1
    666e:	2300      	moveq	r3, #0
    6670:	b2db      	uxtb	r3, r3
}
    6672:	4618      	mov	r0, r3
    6674:	b002      	add	sp, #8
    6676:	4770      	bx	lr
    6678:	0000bf08 	.word	0x0000bf08

0000667c <Ftm_Gpt_Ip_ProcessCommonInterrupt>:
* @param[in]     instance     FTM hardware instance number
* @param[in]     channel      FTM hardware channel number
* @implements    Ftm_Gpt_Ip_ProcessCommonInterrupt_Activity
*/
static void Ftm_Gpt_Ip_ProcessCommonInterrupt(uint8 instance, uint8 channel)
{
    667c:	b500      	push	{lr}
    667e:	b089      	sub	sp, #36	; 0x24
    6680:	4603      	mov	r3, r0
    6682:	460a      	mov	r2, r1
    6684:	f88d 3007 	strb.w	r3, [sp, #7]
    6688:	4613      	mov	r3, r2
    668a:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Gpt_Ip_CallbackType     callback;
    uint8                       callbackParam;
    Ftm_Gpt_Ip_ChannelModeType  channelMode;

    uint32 targetValue;
    uint32 oldCmpValue = Ftm_Gpt_Ip_GetCompareValue(instance, channel);
    668e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6692:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6696:	4611      	mov	r1, r2
    6698:	4618      	mov	r0, r3
    669a:	f7ff fde1 	bl	6260 <Ftm_Gpt_Ip_GetCompareValue>
    669e:	9007      	str	r0, [sp, #28]

    if ((instance < FTM_INSTANCE_COUNT) && (channel < FTM_CONTROLS_COUNT))
    66a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66a4:	2b03      	cmp	r3, #3
    66a6:	f200 80a8 	bhi.w	67fa <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
    66aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    66ae:	2b07      	cmp	r3, #7
    66b0:	f200 80a3 	bhi.w	67fa <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
    {
        /* enter critical section */
        SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25();
    66b4:	f002 f9d6 	bl	8a64 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25>
        {
            /* check if channel event is enabled */
            IsChEvEnabled = Ftm_Gpt_Ip_GetChInterruptEnableFlag(instance, channel);
    66b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
    66bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66c0:	4611      	mov	r1, r2
    66c2:	4618      	mov	r0, r3
    66c4:	f7ff ff9d 	bl	6602 <Ftm_Gpt_Ip_GetChInterruptEnableFlag>
    66c8:	4603      	mov	r3, r0
    66ca:	f88d 301b 	strb.w	r3, [sp, #27]

            /* check if channel event has occurred */
            HasChEvOccurred = Ftm_Gpt_Ip_GetChInterruptStatusFlag(instance, channel);
    66ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
    66d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66d6:	4611      	mov	r1, r2
    66d8:	4618      	mov	r0, r3
    66da:	f7ff fd91 	bl	6200 <Ftm_Gpt_Ip_GetChInterruptStatusFlag>
    66de:	4603      	mov	r3, r0
    66e0:	f88d 301a 	strb.w	r3, [sp, #26]

            /* Check for spurious interrupts */
            if (HasChEvOccurred && IsChEvEnabled)
    66e4:	f89d 301a 	ldrb.w	r3, [sp, #26]
    66e8:	2b00      	cmp	r3, #0
    66ea:	d00b      	beq.n	6704 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x88>
    66ec:	f89d 301b 	ldrb.w	r3, [sp, #27]
    66f0:	2b00      	cmp	r3, #0
    66f2:	d007      	beq.n	6704 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x88>
            {
                /* Clear interrupt flag */
                Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    66f4:	f89d 2006 	ldrb.w	r2, [sp, #6]
    66f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66fc:	4611      	mov	r1, r2
    66fe:	4618      	mov	r0, r3
    6700:	f7ff fe22 	bl	6348 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
            }
        }
        /* exit critical section */
        SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25();
    6704:	f002 f9da 	bl	8abc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25>

        if (HasChEvOccurred && IsChEvEnabled)
    6708:	f89d 301a 	ldrb.w	r3, [sp, #26]
    670c:	2b00      	cmp	r3, #0
    670e:	d074      	beq.n	67fa <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
    6710:	f89d 301b 	ldrb.w	r3, [sp, #27]
    6714:	2b00      	cmp	r3, #0
    6716:	d070      	beq.n	67fa <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
        {
            chInit          = Ftm_Gpt_Ip_u32ChState[instance][channel].chInit;
    6718:	f89d 2007 	ldrb.w	r2, [sp, #7]
    671c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6720:	4938      	ldr	r1, [pc, #224]	; (6804 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    6722:	00d2      	lsls	r2, r2, #3
    6724:	4413      	add	r3, r2
    6726:	011b      	lsls	r3, r3, #4
    6728:	440b      	add	r3, r1
    672a:	781b      	ldrb	r3, [r3, #0]
    672c:	f88d 3019 	strb.w	r3, [sp, #25]
            callback        = Ftm_Gpt_Ip_u32ChState[instance][channel].callback;
    6730:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6734:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6738:	4932      	ldr	r1, [pc, #200]	; (6804 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    673a:	00d2      	lsls	r2, r2, #3
    673c:	4413      	add	r3, r2
    673e:	011b      	lsls	r3, r3, #4
    6740:	440b      	add	r3, r1
    6742:	3304      	adds	r3, #4
    6744:	681b      	ldr	r3, [r3, #0]
    6746:	9305      	str	r3, [sp, #20]
            callbackParam   = Ftm_Gpt_Ip_u32ChState[instance][channel].callbackParam;
    6748:	f89d 2007 	ldrb.w	r2, [sp, #7]
    674c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6750:	492c      	ldr	r1, [pc, #176]	; (6804 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    6752:	00d2      	lsls	r2, r2, #3
    6754:	4413      	add	r3, r2
    6756:	011b      	lsls	r3, r3, #4
    6758:	440b      	add	r3, r1
    675a:	3308      	adds	r3, #8
    675c:	781b      	ldrb	r3, [r3, #0]
    675e:	f88d 3013 	strb.w	r3, [sp, #19]

            /* Call GPT upper layer handler */
            if ((TRUE == chInit) && (NULL_PTR != callback))
    6762:	f89d 3019 	ldrb.w	r3, [sp, #25]
    6766:	2b00      	cmp	r3, #0
    6768:	d007      	beq.n	677a <Ftm_Gpt_Ip_ProcessCommonInterrupt+0xfe>
    676a:	9b05      	ldr	r3, [sp, #20]
    676c:	2b00      	cmp	r3, #0
    676e:	d004      	beq.n	677a <Ftm_Gpt_Ip_ProcessCommonInterrupt+0xfe>
            {
                callback(callbackParam);
    6770:	f89d 2013 	ldrb.w	r2, [sp, #19]
    6774:	9b05      	ldr	r3, [sp, #20]
    6776:	4610      	mov	r0, r2
    6778:	4798      	blx	r3
                Ftm_Gpt_Ip_u32TargetValue[instance][channel] = Ftm_Gpt_Ip_u32NextTargetValue[instance][channel];
                Ftm_Gpt_Ip_u32NextTargetValue[instance][channel] = 0x0U;
            }
#endif
            /* Check if channel mode is ONE-SHOT */
            channelMode = Ftm_Gpt_Ip_u32ChState[instance][channel].channelMode;
    677a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    677e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6782:	4920      	ldr	r1, [pc, #128]	; (6804 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    6784:	00d2      	lsls	r2, r2, #3
    6786:	4413      	add	r3, r2
    6788:	011b      	lsls	r3, r3, #4
    678a:	440b      	add	r3, r1
    678c:	330c      	adds	r3, #12
    678e:	681b      	ldr	r3, [r3, #0]
    6790:	9303      	str	r3, [sp, #12]
            if(FTM_GPT_IP_CH_MODE_ONESHOT == channelMode)
    6792:	9b03      	ldr	r3, [sp, #12]
    6794:	2b01      	cmp	r3, #1
    6796:	d108      	bne.n	67aa <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x12e>
            {
                Ftm_Gpt_Ip_DisableChannelInterrupt(instance, channel);
    6798:	f89d 2006 	ldrb.w	r2, [sp, #6]
    679c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    67a0:	4611      	mov	r1, r2
    67a2:	4618      	mov	r0, r3
    67a4:	f000 f9ce 	bl	6b44 <Ftm_Gpt_Ip_DisableChannelInterrupt>
                    Ftm_Gpt_Ip_SetCompareValue(instance, channel, (uint32)(oldCmpValue + targetValue));
                }
            }
        }
    }
}
    67a8:	e027      	b.n	67fa <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
                targetValue = Ftm_Gpt_Ip_u32TargetValue[instance][channel];
    67aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
    67ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
    67b2:	4915      	ldr	r1, [pc, #84]	; (6808 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x18c>)
    67b4:	00d2      	lsls	r2, r2, #3
    67b6:	4413      	add	r3, r2
    67b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    67bc:	9302      	str	r3, [sp, #8]
                if ((uint32)(oldCmpValue + targetValue) > FTM_CNT_MAX_VALUE)
    67be:	9a07      	ldr	r2, [sp, #28]
    67c0:	9b02      	ldr	r3, [sp, #8]
    67c2:	4413      	add	r3, r2
    67c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    67c8:	d30d      	bcc.n	67e6 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x16a>
                    Ftm_Gpt_Ip_SetCompareValue(instance, channel, (uint32)(targetValue - (FTM_CNT_MAX_VALUE - oldCmpValue)));
    67ca:	9a07      	ldr	r2, [sp, #28]
    67cc:	9b02      	ldr	r3, [sp, #8]
    67ce:	4413      	add	r3, r2
    67d0:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
    67d4:	3bff      	subs	r3, #255	; 0xff
    67d6:	f89d 1006 	ldrb.w	r1, [sp, #6]
    67da:	f89d 0007 	ldrb.w	r0, [sp, #7]
    67de:	461a      	mov	r2, r3
    67e0:	f7ff fe88 	bl	64f4 <Ftm_Gpt_Ip_SetCompareValue>
}
    67e4:	e009      	b.n	67fa <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
                    Ftm_Gpt_Ip_SetCompareValue(instance, channel, (uint32)(oldCmpValue + targetValue));
    67e6:	9a07      	ldr	r2, [sp, #28]
    67e8:	9b02      	ldr	r3, [sp, #8]
    67ea:	441a      	add	r2, r3
    67ec:	f89d 1006 	ldrb.w	r1, [sp, #6]
    67f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    67f4:	4618      	mov	r0, r3
    67f6:	f7ff fe7d 	bl	64f4 <Ftm_Gpt_Ip_SetCompareValue>
}
    67fa:	bf00      	nop
    67fc:	b009      	add	sp, #36	; 0x24
    67fe:	f85d fb04 	ldr.w	pc, [sp], #4
    6802:	bf00      	nop
    6804:	1fff8da8 	.word	0x1fff8da8
    6808:	1fff8d18 	.word	0x1fff8d18

0000680c <Ftm_Gpt_Ip_Init>:
* @return        void
* @pre           The data structure including the configuration set required for initializing the GPT driver
* @implements    Ftm_Gpt_Ip_Init_Activity
*/
void Ftm_Gpt_Ip_Init(uint8 instance, const Ftm_Gpt_Ip_InstanceConfigType *configPtr)
{
    680c:	b500      	push	{lr}
    680e:	b083      	sub	sp, #12
    6810:	4603      	mov	r3, r0
    6812:	9100      	str	r1, [sp, #0]
    6814:	f88d 3007 	strb.w	r3, [sp, #7]
#endif
    /* Enable register access from user mode, if enabled from configuration file */
    Call_Ftm_Gpt_Ip_SetUserAccessAllowed((uint32)ftmGptBase[instance]);

    /* Check the FTM counter modes */
    if (FTM_GPT_IP_MODE_UP_TIMER == configPtr->mode)
    6818:	9b00      	ldr	r3, [sp, #0]
    681a:	68db      	ldr	r3, [r3, #12]
    681c:	2b01      	cmp	r3, #1
    681e:	d12a      	bne.n	6876 <Ftm_Gpt_Ip_Init+0x6a>
    {
        /* Set clock and prescalerValue FTM */
        Ftm_Gpt_Ip_SetPrescaler(instance, configPtr->clockPrescaler);
    6820:	9b00      	ldr	r3, [sp, #0]
    6822:	7a1a      	ldrb	r2, [r3, #8]
    6824:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6828:	4611      	mov	r1, r2
    682a:	4618      	mov	r0, r3
    682c:	f7ff fe06 	bl	643c <Ftm_Gpt_Ip_SetPrescaler>
        /* Set FTM counter clock source */
        Ftm_Gpt_Ip_SetClockSource(instance, configPtr->clocksource);
    6830:	9b00      	ldr	r3, [sp, #0]
    6832:	685a      	ldr	r2, [r3, #4]
    6834:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6838:	4611      	mov	r1, r2
    683a:	4618      	mov	r0, r3
    683c:	f7ff fdda 	bl	63f4 <Ftm_Gpt_Ip_SetClockSource>

        /* Set freeze bits */
        Ftm_Gpt_Ip_SetFreezeBits(instance, configPtr->freezeBits);
    6840:	9b00      	ldr	r3, [sp, #0]
    6842:	781a      	ldrb	r2, [r3, #0]
    6844:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6848:	4611      	mov	r1, r2
    684a:	4618      	mov	r0, r3
    684c:	f7ff fd20 	bl	6290 <Ftm_Gpt_Ip_SetFreezeBits>

        /*Set Counter register and Initial Counter Value*/
        Ftm_Gpt_Ip_SetCounterInitVal(instance, 1U);
    6850:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6854:	2101      	movs	r1, #1
    6856:	4618      	mov	r0, r3
    6858:	f7ff fd4a 	bl	62f0 <Ftm_Gpt_Ip_SetCounterInitVal>

        /* write the Ftm Modulo Register with 0xFFFF */
        Ftm_Gpt_Ip_WriteModulo(instance, 0xFFFFU);
    685c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6860:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6864:	4618      	mov	r0, r3
    6866:	f7ff fe5f 	bl	6528 <Ftm_Gpt_Ip_WriteModulo>

        /* set FTM Enable bit */
        Ftm_Gpt_Ip_SetEnFtmModule(instance, TRUE);
    686a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    686e:	2101      	movs	r1, #1
    6870:	4618      	mov	r0, r3
    6872:	f7ff fe09 	bl	6488 <Ftm_Gpt_Ip_SetEnFtmModule>
#if (FTM_GPT_IP_SET_CLOCK_MODE == STD_ON)
    Ftm_Gpt_Ip_u32InstancePrescaler[instance].clockPrescaler = configPtr->clockPrescaler;
    Ftm_Gpt_Ip_u32InstancePrescaler[instance].clockAlternatePrescaler = configPtr->clockAlternatePrescaler;
#endif
    /* set FTM instance status to initialized */
    Ftm_Gpt_Ip_u32InstanceState[instance] = FTM_GPT_IP_STATUS_INITIALIZED;
    6876:	f89d 3007 	ldrb.w	r3, [sp, #7]
    687a:	4a04      	ldr	r2, [pc, #16]	; (688c <Ftm_Gpt_Ip_Init+0x80>)
    687c:	2101      	movs	r1, #1
    687e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    6882:	bf00      	nop
    6884:	b003      	add	sp, #12
    6886:	f85d fb04 	ldr.w	pc, [sp], #4
    688a:	bf00      	nop
    688c:	1fff8d98 	.word	0x1fff8d98

00006890 <Ftm_Gpt_Ip_InitChannel>:
* @return        void
* @pre           The data structure including the configuration set required for initializing the GPT driver
* @implements    Ftm_Gpt_Ip_InitChannel_Activity
*/
void Ftm_Gpt_Ip_InitChannel(uint8 instance, const Ftm_Gpt_Ip_ChannelConfigType *configPtr)
{
    6890:	b500      	push	{lr}
    6892:	b083      	sub	sp, #12
    6894:	4603      	mov	r3, r0
    6896:	9100      	str	r1, [sp, #0]
    6898:	f88d 3007 	strb.w	r3, [sp, #7]
    DevAssert(FTM_INSTANCE_COUNT > instance);
    DevAssert(FTM_CONTROLS_COUNT > configPtr->hwChannel);
#endif

    /* Disable channels interrupt bit */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, configPtr->hwChannel, FALSE);
    689c:	9b00      	ldr	r3, [sp, #0]
    689e:	7819      	ldrb	r1, [r3, #0]
    68a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68a4:	2200      	movs	r2, #0
    68a6:	4618      	mov	r0, r3
    68a8:	f7ff fd74 	bl	6394 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear ClearInterruptFlag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, configPtr->hwChannel);
    68ac:	9b00      	ldr	r3, [sp, #0]
    68ae:	781a      	ldrb	r2, [r3, #0]
    68b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68b4:	4611      	mov	r1, r2
    68b6:	4618      	mov	r0, r3
    68b8:	f7ff fd46 	bl	6348 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Set Compare Value register to 0xFFFF */
    Ftm_Gpt_Ip_SetCompareValue(instance, configPtr->hwChannel, 0xFFFFU);
    68bc:	9b00      	ldr	r3, [sp, #0]
    68be:	7819      	ldrb	r1, [r3, #0]
    68c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    68c8:	4618      	mov	r0, r3
    68ca:	f7ff fe13 	bl	64f4 <Ftm_Gpt_Ip_SetCompareValue>
    /* Set bit MSA */
    Ftm_Gpt_Ip_ModeSelectA(instance, configPtr->hwChannel, TRUE);
    68ce:	9b00      	ldr	r3, [sp, #0]
    68d0:	7819      	ldrb	r1, [r3, #0]
    68d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68d6:	2201      	movs	r2, #1
    68d8:	4618      	mov	r0, r3
    68da:	f7ff fe3b 	bl	6554 <Ftm_Gpt_Ip_ModeSelectA>
     (defined FTM_4_CH_4_CH_5_ISR_USED) || (defined FTM_4_CH_6_CH_7_ISR_USED) || (defined FTM_5_CH_0_CH_1_ISR_USED) || \
     (defined FTM_5_CH_2_CH_3_ISR_USED) || (defined FTM_5_CH_4_CH_5_ISR_USED) || (defined FTM_5_CH_6_CH_7_ISR_USED) || \
     (defined FTM_6_CH_0_CH_1_ISR_USED) || (defined FTM_6_CH_2_CH_3_ISR_USED) || (defined FTM_6_CH_4_CH_5_ISR_USED) || \
     (defined FTM_6_CH_6_CH_7_ISR_USED) || (defined FTM_7_CH_0_CH_1_ISR_USED) || (defined FTM_7_CH_2_CH_3_ISR_USED) || \
     (defined FTM_7_CH_4_CH_5_ISR_USED) || (defined FTM_7_CH_6_CH_7_ISR_USED))
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].chInit = TRUE;
    68de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68e2:	9a00      	ldr	r2, [sp, #0]
    68e4:	7812      	ldrb	r2, [r2, #0]
    68e6:	4611      	mov	r1, r2
    68e8:	4a1a      	ldr	r2, [pc, #104]	; (6954 <Ftm_Gpt_Ip_InitChannel+0xc4>)
    68ea:	00db      	lsls	r3, r3, #3
    68ec:	440b      	add	r3, r1
    68ee:	011b      	lsls	r3, r3, #4
    68f0:	4413      	add	r3, r2
    68f2:	2201      	movs	r2, #1
    68f4:	701a      	strb	r2, [r3, #0]
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].callback = configPtr->callback;
    68f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68fa:	9a00      	ldr	r2, [sp, #0]
    68fc:	7812      	ldrb	r2, [r2, #0]
    68fe:	4610      	mov	r0, r2
    6900:	9a00      	ldr	r2, [sp, #0]
    6902:	6852      	ldr	r2, [r2, #4]
    6904:	4913      	ldr	r1, [pc, #76]	; (6954 <Ftm_Gpt_Ip_InitChannel+0xc4>)
    6906:	00db      	lsls	r3, r3, #3
    6908:	4403      	add	r3, r0
    690a:	011b      	lsls	r3, r3, #4
    690c:	440b      	add	r3, r1
    690e:	3304      	adds	r3, #4
    6910:	601a      	str	r2, [r3, #0]
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].callbackParam = configPtr->callbackParam;
    6912:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6916:	9a00      	ldr	r2, [sp, #0]
    6918:	7812      	ldrb	r2, [r2, #0]
    691a:	4610      	mov	r0, r2
    691c:	9a00      	ldr	r2, [sp, #0]
    691e:	7a11      	ldrb	r1, [r2, #8]
    6920:	4a0c      	ldr	r2, [pc, #48]	; (6954 <Ftm_Gpt_Ip_InitChannel+0xc4>)
    6922:	00db      	lsls	r3, r3, #3
    6924:	4403      	add	r3, r0
    6926:	011b      	lsls	r3, r3, #4
    6928:	4413      	add	r3, r2
    692a:	3308      	adds	r3, #8
    692c:	460a      	mov	r2, r1
    692e:	701a      	strb	r2, [r3, #0]
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].channelMode = configPtr->channelMode;
    6930:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6934:	9a00      	ldr	r2, [sp, #0]
    6936:	7812      	ldrb	r2, [r2, #0]
    6938:	4610      	mov	r0, r2
    693a:	9a00      	ldr	r2, [sp, #0]
    693c:	68d2      	ldr	r2, [r2, #12]
    693e:	4905      	ldr	r1, [pc, #20]	; (6954 <Ftm_Gpt_Ip_InitChannel+0xc4>)
    6940:	00db      	lsls	r3, r3, #3
    6942:	4403      	add	r3, r0
    6944:	011b      	lsls	r3, r3, #4
    6946:	440b      	add	r3, r1
    6948:	330c      	adds	r3, #12
    694a:	601a      	str	r2, [r3, #0]
#endif
}
    694c:	bf00      	nop
    694e:	b003      	add	sp, #12
    6950:	f85d fb04 	ldr.w	pc, [sp], #4
    6954:	1fff8da8 	.word	0x1fff8da8

00006958 <Ftm_Gpt_Ip_Deinit>:
* @return        void
* @pre           The data structure including the configuration set required for initializing the GPT driver.
* @implements    Ftm_Gpt_Ip_Deinit_Activity
*/
void Ftm_Gpt_Ip_Deinit(uint8 instance)
{
    6958:	b500      	push	{lr}
    695a:	b085      	sub	sp, #20
    695c:	4603      	mov	r3, r0
    695e:	f88d 3007 	strb.w	r3, [sp, #7]
    #endif

    uint8 channelIndex;

    /* Reset all channels to default */
    for (channelIndex = 0; channelIndex < FTM_CONTROLS_COUNT; channelIndex++)
    6962:	2300      	movs	r3, #0
    6964:	f88d 300f 	strb.w	r3, [sp, #15]
    6968:	e014      	b.n	6994 <Ftm_Gpt_Ip_Deinit+0x3c>
    {
        /* Disable interrupts */
        Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channelIndex, FALSE );
    696a:	f89d 100f 	ldrb.w	r1, [sp, #15]
    696e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6972:	2200      	movs	r2, #0
    6974:	4618      	mov	r0, r3
    6976:	f7ff fd0d 	bl	6394 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
        /*Clear interrupt flags*/
        Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channelIndex);
    697a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    697e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6982:	4611      	mov	r1, r2
    6984:	4618      	mov	r0, r3
    6986:	f7ff fcdf 	bl	6348 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    for (channelIndex = 0; channelIndex < FTM_CONTROLS_COUNT; channelIndex++)
    698a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    698e:	3301      	adds	r3, #1
    6990:	f88d 300f 	strb.w	r3, [sp, #15]
    6994:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6998:	2b07      	cmp	r3, #7
    699a:	d9e6      	bls.n	696a <Ftm_Gpt_Ip_Deinit+0x12>
    }
    /* Set clock source as 'No clock'. This in effect disables the FTM counter */
    Ftm_Gpt_Ip_SetClockSource(instance, FTM_GPT_IP_CLOCK_SOURCE_NONE);
    699c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69a0:	2100      	movs	r1, #0
    69a2:	4618      	mov	r0, r3
    69a4:	f7ff fd26 	bl	63f4 <Ftm_Gpt_Ip_SetClockSource>
    /* clear FTM Enable bit */
    Ftm_Gpt_Ip_SetEnFtmModule(instance, FALSE);
    69a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69ac:	2100      	movs	r1, #0
    69ae:	4618      	mov	r0, r3
    69b0:	f7ff fd6a 	bl	6488 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* clearde freeze bits */
    Ftm_Gpt_Ip_SetFreezeBits(instance, FALSE);
    69b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69b8:	2100      	movs	r1, #0
    69ba:	4618      	mov	r0, r3
    69bc:	f7ff fc68 	bl	6290 <Ftm_Gpt_Ip_SetFreezeBits>
    /* Set Counter register to 0 and Initial Counter Value to 0 */
    Ftm_Gpt_Ip_SetCounterInitVal(instance, 0U);
    69c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69c4:	2100      	movs	r1, #0
    69c6:	4618      	mov	r0, r3
    69c8:	f7ff fc92 	bl	62f0 <Ftm_Gpt_Ip_SetCounterInitVal>
    Ftm_Gpt_Ip_SetCounter(instance, 0U);
    69cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69d0:	2100      	movs	r1, #0
    69d2:	4618      	mov	r0, r3
    69d4:	f7ff fca2 	bl	631c <Ftm_Gpt_Ip_SetCounter>
    /* set FTM instance status to uninitialized */
    Ftm_Gpt_Ip_u32InstanceState[instance] = FTM_GPT_IP_STATUS_UNINITIALIZED;
    69d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69dc:	4a03      	ldr	r2, [pc, #12]	; (69ec <Ftm_Gpt_Ip_Deinit+0x94>)
    69de:	2100      	movs	r1, #0
    69e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    69e4:	bf00      	nop
    69e6:	b005      	add	sp, #20
    69e8:	f85d fb04 	ldr.w	pc, [sp], #4
    69ec:	1fff8d98 	.word	0x1fff8d98

000069f0 <Ftm_Gpt_Ip_StartCounting>:
* @return        void
* @pre           The driver needs to be initialized. This function is called for starting the FTM timer channel.
* @implements    Ftm_Gpt_Ip_StartCounting_Activity
*/
void Ftm_Gpt_Ip_StartCounting(uint8 instance, uint8 channel, uint16 compareValue)
{
    69f0:	b500      	push	{lr}
    69f2:	b085      	sub	sp, #20
    69f4:	4603      	mov	r3, r0
    69f6:	f88d 3007 	strb.w	r3, [sp, #7]
    69fa:	460b      	mov	r3, r1
    69fc:	f88d 3006 	strb.w	r3, [sp, #6]
    6a00:	4613      	mov	r3, r2
    6a02:	f8ad 3004 	strh.w	r3, [sp, #4]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
    DevAssert(FTM_INSTANCE_COUNT > instance);
    DevAssert(FTM_CONTROLS_COUNT > channel);
#endif
    uint32 counterValue;
    uint32 currentCntValue = Ftm_Gpt_Ip_GetCntValue(instance);
    6a06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a0a:	4618      	mov	r0, r3
    6a0c:	f7ff fc18 	bl	6240 <Ftm_Gpt_Ip_GetCntValue>
    6a10:	9002      	str	r0, [sp, #8]

    if ((uint32)(currentCntValue + compareValue) > FTM_CNT_MAX_VALUE)
    6a12:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6a16:	9b02      	ldr	r3, [sp, #8]
    6a18:	4413      	add	r3, r2
    6a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    6a1e:	d308      	bcc.n	6a32 <Ftm_Gpt_Ip_StartCounting+0x42>
    {
        counterValue = (uint32)(compareValue - (FTM_CNT_MAX_VALUE - currentCntValue));
    6a20:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6a24:	9b02      	ldr	r3, [sp, #8]
    6a26:	4413      	add	r3, r2
    6a28:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
    6a2c:	3bff      	subs	r3, #255	; 0xff
    6a2e:	9303      	str	r3, [sp, #12]
    6a30:	e004      	b.n	6a3c <Ftm_Gpt_Ip_StartCounting+0x4c>
    }
    else
    {
        counterValue = (uint32)(currentCntValue + compareValue);
    6a32:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6a36:	9a02      	ldr	r2, [sp, #8]
    6a38:	4413      	add	r3, r2
    6a3a:	9303      	str	r3, [sp, #12]
    }
    /* Set new compare value */
    Ftm_Gpt_Ip_SetCompareValue(instance, channel, counterValue);
    6a3c:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6a40:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a44:	9a03      	ldr	r2, [sp, #12]
    6a46:	4618      	mov	r0, r3
    6a48:	f7ff fd54 	bl	64f4 <Ftm_Gpt_Ip_SetCompareValue>
    /* Save compare value */
    Ftm_Gpt_Ip_u32TargetValue[instance][channel] = compareValue;
    6a4c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    6a50:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6a54:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6a58:	480c      	ldr	r0, [pc, #48]	; (6a8c <Ftm_Gpt_Ip_StartCounting+0x9c>)
    6a5a:	00c9      	lsls	r1, r1, #3
    6a5c:	440b      	add	r3, r1
    6a5e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    /* Clear CHF flag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance,channel);
    6a62:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6a66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a6a:	4611      	mov	r1, r2
    6a6c:	4618      	mov	r0, r3
    6a6e:	f7ff fc6b 	bl	6348 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Enable interrupt */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, TRUE);
    6a72:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6a76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a7a:	2201      	movs	r2, #1
    6a7c:	4618      	mov	r0, r3
    6a7e:	f7ff fc89 	bl	6394 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>

}
    6a82:	bf00      	nop
    6a84:	b005      	add	sp, #20
    6a86:	f85d fb04 	ldr.w	pc, [sp], #4
    6a8a:	bf00      	nop
    6a8c:	1fff8d18 	.word	0x1fff8d18

00006a90 <Ftm_Gpt_Ip_StartTimer>:
 *                  - enables the FTM counter
 * @pre           The driver needs to be initialized.
 * @implements    Ftm_Gpt_Ip_StartTimer_Activity
 */
void Ftm_Gpt_Ip_StartTimer(uint8 instance, uint16 counterValue)
{
    6a90:	b500      	push	{lr}
    6a92:	b083      	sub	sp, #12
    6a94:	4603      	mov	r3, r0
    6a96:	460a      	mov	r2, r1
    6a98:	f88d 3007 	strb.w	r3, [sp, #7]
    6a9c:	4613      	mov	r3, r2
    6a9e:	f8ad 3004 	strh.w	r3, [sp, #4]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
    DevAssert(FTM_INSTANCE_COUNT > instance);
#endif
    if (instance < FTM_INSTANCE_COUNT)
    6aa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6aa6:	2b03      	cmp	r3, #3
    6aa8:	d814      	bhi.n	6ad4 <Ftm_Gpt_Ip_StartTimer+0x44>
    {
        if (FTM_GPT_IP_STATUS_INITIALIZED == Ftm_Gpt_Ip_u32InstanceState[instance])
    6aaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6aae:	4a0b      	ldr	r2, [pc, #44]	; (6adc <Ftm_Gpt_Ip_StartTimer+0x4c>)
    6ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ab4:	2b01      	cmp	r3, #1
    6ab6:	d10d      	bne.n	6ad4 <Ftm_Gpt_Ip_StartTimer+0x44>
        {
            /* Set the new value counter */
            Ftm_Gpt_Ip_SetCounterInitVal(instance, counterValue);
    6ab8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6abc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ac0:	4611      	mov	r1, r2
    6ac2:	4618      	mov	r0, r3
    6ac4:	f7ff fc14 	bl	62f0 <Ftm_Gpt_Ip_SetCounterInitVal>
            /* set FTM Enable bit */
            Ftm_Gpt_Ip_SetEnFtmModule(instance, TRUE);
    6ac8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6acc:	2101      	movs	r1, #1
    6ace:	4618      	mov	r0, r3
    6ad0:	f7ff fcda 	bl	6488 <Ftm_Gpt_Ip_SetEnFtmModule>
        }
    }
}
    6ad4:	bf00      	nop
    6ad6:	b003      	add	sp, #12
    6ad8:	f85d fb04 	ldr.w	pc, [sp], #4
    6adc:	1fff8d98 	.word	0x1fff8d98

00006ae0 <Ftm_Gpt_Ip_StopTimer>:
* @return        void
* @pre           The driver needs to be initialized. This function is called for stoping the FTM timer channel.
* @implements    Ftm_Gpt_Ip_StopTimer_Activity
*/
void Ftm_Gpt_Ip_StopTimer(uint8 instance)
{
    6ae0:	b500      	push	{lr}
    6ae2:	b083      	sub	sp, #12
    6ae4:	4603      	mov	r3, r0
    6ae6:	f88d 3007 	strb.w	r3, [sp, #7]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
DevAssert(FTM_INSTANCE_COUNT > instance);
#endif
    /* clear FTM Enable bit */
    Ftm_Gpt_Ip_SetEnFtmModule(instance, FALSE);
    6aea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6aee:	2100      	movs	r1, #0
    6af0:	4618      	mov	r0, r3
    6af2:	f7ff fcc9 	bl	6488 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* Set clock source as 'No clock'. This in effect disables the FTM counter */
    Ftm_Gpt_Ip_SetClockSource(instance, FTM_GPT_IP_CLOCK_SOURCE_NONE);
    6af6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6afa:	2100      	movs	r1, #0
    6afc:	4618      	mov	r0, r3
    6afe:	f7ff fc79 	bl	63f4 <Ftm_Gpt_Ip_SetClockSource>
}
    6b02:	bf00      	nop
    6b04:	b003      	add	sp, #12
    6b06:	f85d fb04 	ldr.w	pc, [sp], #4

00006b0a <Ftm_Gpt_Ip_EnableChannelInterrupt>:
* @return       void
* @pre          The driver needs to be initialized.
* @implements   Ftm_Gpt_Ip_EnableChannelInterrupt_Activity
*/
void Ftm_Gpt_Ip_EnableChannelInterrupt(uint8 instance, uint8 channel)
{
    6b0a:	b500      	push	{lr}
    6b0c:	b083      	sub	sp, #12
    6b0e:	4603      	mov	r3, r0
    6b10:	460a      	mov	r2, r1
    6b12:	f88d 3007 	strb.w	r3, [sp, #7]
    6b16:	4613      	mov	r3, r2
    6b18:	f88d 3006 	strb.w	r3, [sp, #6]
DevAssert(FTM_INSTANCE_COUNT > instance);
DevAssert(FTM_CONTROLS_COUNT > channel);
#endif

     /* Clear interrupt flag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6b1c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6b20:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b24:	4611      	mov	r1, r2
    6b26:	4618      	mov	r0, r3
    6b28:	f7ff fc0e 	bl	6348 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Enable channel interrupt */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, TRUE);
    6b2c:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6b30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b34:	2201      	movs	r2, #1
    6b36:	4618      	mov	r0, r3
    6b38:	f7ff fc2c 	bl	6394 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
}
    6b3c:	bf00      	nop
    6b3e:	b003      	add	sp, #12
    6b40:	f85d fb04 	ldr.w	pc, [sp], #4

00006b44 <Ftm_Gpt_Ip_DisableChannelInterrupt>:
* @return        void
* @pre           The driver needs to be initialized.
* @implements    Ftm_Gpt_Ip_DisableChannelInterrupt_Activity
*/
void Ftm_Gpt_Ip_DisableChannelInterrupt(uint8 instance, uint8 channel)
{
    6b44:	b500      	push	{lr}
    6b46:	b083      	sub	sp, #12
    6b48:	4603      	mov	r3, r0
    6b4a:	460a      	mov	r2, r1
    6b4c:	f88d 3007 	strb.w	r3, [sp, #7]
    6b50:	4613      	mov	r3, r2
    6b52:	f88d 3006 	strb.w	r3, [sp, #6]
DevAssert(FTM_INSTANCE_COUNT > instance);
DevAssert(FTM_CONTROLS_COUNT > channel);
#endif

    /* Disable interrupt */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, FALSE);
    6b56:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6b5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b5e:	2200      	movs	r2, #0
    6b60:	4618      	mov	r0, r3
    6b62:	f7ff fc17 	bl	6394 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear interrupt flag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6b66:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6b6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b6e:	4611      	mov	r1, r2
    6b70:	4618      	mov	r0, r3
    6b72:	f7ff fbe9 	bl	6348 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
}
    6b76:	bf00      	nop
    6b78:	b003      	add	sp, #12
    6b7a:	f85d fb04 	ldr.w	pc, [sp], #4

00006b7e <Ftm_Gpt_Ip_SetHalfCycleReloadPoint>:
* @return
* @pre           The driver needs to be initialized.
* @implements    Ftm_Gpt_Ip_SetHalfCycleReloadPoint_Activity
*/
void Ftm_Gpt_Ip_SetHalfCycleReloadPoint(uint8 instance, uint16 reloadPoint)
{
    6b7e:	b500      	push	{lr}
    6b80:	b083      	sub	sp, #12
    6b82:	4603      	mov	r3, r0
    6b84:	460a      	mov	r2, r1
    6b86:	f88d 3007 	strb.w	r3, [sp, #7]
    6b8a:	4613      	mov	r3, r2
    6b8c:	f8ad 3004 	strh.w	r3, [sp, #4]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
DevAssert(FTM_INSTANCE_COUNT > instance);
#endif
    Ftm_Gpt_Ip_SetHalfCycleValue(ftmGptBase[instance], reloadPoint);
    6b90:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b94:	4a06      	ldr	r2, [pc, #24]	; (6bb0 <Ftm_Gpt_Ip_SetHalfCycleReloadPoint+0x32>)
    6b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b9a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6b9e:	4611      	mov	r1, r2
    6ba0:	4618      	mov	r0, r3
    6ba2:	f7ff fd21 	bl	65e8 <Ftm_Gpt_Ip_SetHalfCycleValue>
}
    6ba6:	bf00      	nop
    6ba8:	b003      	add	sp, #12
    6baa:	f85d fb04 	ldr.w	pc, [sp], #4
    6bae:	bf00      	nop
    6bb0:	0000bf08 	.word	0x0000bf08

00006bb4 <Ftm_Gpt_Ip_StartPredefTimer>:
* @param[in]  bFreezeEnable   enables/disables freeze bits
* @return     void
* @pre        The driver needs to be initialized
*/
void Ftm_Gpt_Ip_StartPredefTimer (uint8 instance,uint8 channel, uint8 uPrescaler, uint8 clocksource, boolean bFreezeEnable)
{
    6bb4:	b510      	push	{r4, lr}
    6bb6:	b082      	sub	sp, #8
    6bb8:	4604      	mov	r4, r0
    6bba:	4608      	mov	r0, r1
    6bbc:	4611      	mov	r1, r2
    6bbe:	461a      	mov	r2, r3
    6bc0:	4623      	mov	r3, r4
    6bc2:	f88d 3007 	strb.w	r3, [sp, #7]
    6bc6:	4603      	mov	r3, r0
    6bc8:	f88d 3006 	strb.w	r3, [sp, #6]
    6bcc:	460b      	mov	r3, r1
    6bce:	f88d 3005 	strb.w	r3, [sp, #5]
    6bd2:	4613      	mov	r3, r2
    6bd4:	f88d 3004 	strb.w	r3, [sp, #4]

    /* Enable register access from user mode, if enabled from configuration file */
    Call_Ftm_Gpt_Ip_SetUserAccessAllowed((uint32)ftmGptBase[instance]);

    /* Disable all interrupts on this channel */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, FALSE);
    6bd8:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6bdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6be0:	2200      	movs	r2, #0
    6be2:	4618      	mov	r0, r3
    6be4:	f7ff fbd6 	bl	6394 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear interrupt flags */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6be8:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6bec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bf0:	4611      	mov	r1, r2
    6bf2:	4618      	mov	r0, r3
    6bf4:	f7ff fba8 	bl	6348 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Disable TOIE flags */
    ftmGptBase[instance]-> SC &= (~(FTM_SC_TOIE_MASK));
    6bf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bfc:	4a35      	ldr	r2, [pc, #212]	; (6cd4 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c02:	681a      	ldr	r2, [r3, #0]
    6c04:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c08:	4932      	ldr	r1, [pc, #200]	; (6cd4 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    6c0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    6c12:	601a      	str	r2, [r3, #0]
    /* Configure FTM as a Free-Running Timer by setting FTMEN=1, CTNIN=0, MOD=0xFFFF, QUADEN=0, CPWMS=0*/
    Ftm_Gpt_Ip_SetEnFtmModule(instance, TRUE);
    6c14:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c18:	2101      	movs	r1, #1
    6c1a:	4618      	mov	r0, r3
    6c1c:	f7ff fc34 	bl	6488 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* Initial Counter Value to 0 */
    Ftm_Gpt_Ip_SetCounterInitVal(instance, 0U);
    6c20:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c24:	2100      	movs	r1, #0
    6c26:	4618      	mov	r0, r3
    6c28:	f7ff fb62 	bl	62f0 <Ftm_Gpt_Ip_SetCounterInitVal>
    /* write the Ftm Modulo Register with 0xFFFF */
    Ftm_Gpt_Ip_WriteModulo(instance, 0xFFFFU);
    6c2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c30:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6c34:	4618      	mov	r0, r3
    6c36:	f7ff fc77 	bl	6528 <Ftm_Gpt_Ip_WriteModulo>
    /* Set Compare Value register to 0xFFFF */
    Ftm_Gpt_Ip_SetCompareValue(instance, channel, 0xFFFFU);
    6c3a:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6c3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6c46:	4618      	mov	r0, r3
    6c48:	f7ff fc54 	bl	64f4 <Ftm_Gpt_Ip_SetCompareValue>
    /* Enter EA_28*/
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26();
    6c4c:	f001 ff5c 	bl	8b08 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26>
    /* Clear bit QUADEN */
    ftmGptBase[instance]->QDCTRL &= (~(FTM_QDCTRL_QUADEN_MASK));
    6c50:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c54:	4a1f      	ldr	r2, [pc, #124]	; (6cd4 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c5a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    6c5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c62:	491c      	ldr	r1, [pc, #112]	; (6cd4 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    6c68:	f022 0201 	bic.w	r2, r2, #1
    6c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    /* Clear bit CPWMS */
    ftmGptBase[instance]->SC &= (~(FTM_SC_CPWMS_MASK));
    6c70:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c74:	4a17      	ldr	r2, [pc, #92]	; (6cd4 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c7a:	681a      	ldr	r2, [r3, #0]
    6c7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c80:	4914      	ldr	r1, [pc, #80]	; (6cd4 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    6c86:	f022 0220 	bic.w	r2, r2, #32
    6c8a:	601a      	str	r2, [r3, #0]
    /* Exit EA_28*/
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26();
    6c8c:	f001 ff68 	bl	8b60 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26>

    /* Configure Predef Timer */
    Ftm_Gpt_Ip_SetPrescaler(instance, uPrescaler);
    6c90:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6c94:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c98:	4611      	mov	r1, r2
    6c9a:	4618      	mov	r0, r3
    6c9c:	f7ff fbce 	bl	643c <Ftm_Gpt_Ip_SetPrescaler>
    /* Set FTM counter clock source */
    Ftm_Gpt_Ip_SetClockSource(instance, (Ftm_Gpt_Ip_ClockSource)clocksource);
    6ca0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    6ca4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ca8:	4611      	mov	r1, r2
    6caa:	4618      	mov	r0, r3
    6cac:	f7ff fba2 	bl	63f4 <Ftm_Gpt_Ip_SetClockSource>
    /* Set freeze bits */
    Ftm_Gpt_Ip_SetFreezeBits(instance, bFreezeEnable);
    6cb0:	f89d 2010 	ldrb.w	r2, [sp, #16]
    6cb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cb8:	4611      	mov	r1, r2
    6cba:	4618      	mov	r0, r3
    6cbc:	f7ff fae8 	bl	6290 <Ftm_Gpt_Ip_SetFreezeBits>
    /* Intialize FTM timer by writing any value to CNT register when CLKS not equal 0 */
    ftmGptBase[instance]->CNT = (uint32)(((uint32)1U << FTM_CNT_COUNT_SHIFT) & FTM_CNT_COUNT_MASK);
    6cc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cc4:	4a03      	ldr	r2, [pc, #12]	; (6cd4 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cca:	2201      	movs	r2, #1
    6ccc:	605a      	str	r2, [r3, #4]
}
    6cce:	bf00      	nop
    6cd0:	b002      	add	sp, #8
    6cd2:	bd10      	pop	{r4, pc}
    6cd4:	0000bf08 	.word	0x0000bf08

00006cd8 <Ftm_Gpt_Ip_StopPredefTimer>:
* @return     void
* @pre        The driver needs to be initialized
*
*/
void Ftm_Gpt_Ip_StopPredefTimer (uint8 instance, uint8 channel)
{
    6cd8:	b500      	push	{lr}
    6cda:	b083      	sub	sp, #12
    6cdc:	4603      	mov	r3, r0
    6cde:	460a      	mov	r2, r1
    6ce0:	f88d 3007 	strb.w	r3, [sp, #7]
    6ce4:	4613      	mov	r3, r2
    6ce6:	f88d 3006 	strb.w	r3, [sp, #6]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
    DevAssert(FTM_INSTANCE_COUNT > instance);
    DevAssert(FTM_CONTROLS_COUNT > channel);
#endif
    /* Set clock source as 'No clock'. This in effect disables the FTM counter */
    Ftm_Gpt_Ip_SetClockSource(instance, FTM_GPT_IP_CLOCK_SOURCE_NONE);
    6cea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cee:	2100      	movs	r1, #0
    6cf0:	4618      	mov	r0, r3
    6cf2:	f7ff fb7f 	bl	63f4 <Ftm_Gpt_Ip_SetClockSource>
    /* Disable all interrupts on this channel */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, FALSE);
    6cf6:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6cfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cfe:	2200      	movs	r2, #0
    6d00:	4618      	mov	r0, r3
    6d02:	f7ff fb47 	bl	6394 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear interrupt flags */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6d06:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6d0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d0e:	4611      	mov	r1, r2
    6d10:	4618      	mov	r0, r3
    6d12:	f7ff fb19 	bl	6348 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* clear FTM Enable bit */
    Ftm_Gpt_Ip_SetEnFtmModule(instance, FALSE);
    6d16:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d1a:	2100      	movs	r1, #0
    6d1c:	4618      	mov	r0, r3
    6d1e:	f7ff fbb3 	bl	6488 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* Set Counter register to 0 and Initial Counter Value to 0 */
    Ftm_Gpt_Ip_SetCounterInitVal(instance, 0U);
    6d22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d26:	2100      	movs	r1, #0
    6d28:	4618      	mov	r0, r3
    6d2a:	f7ff fae1 	bl	62f0 <Ftm_Gpt_Ip_SetCounterInitVal>
    Ftm_Gpt_Ip_SetCounter(instance, 0U);
    6d2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d32:	2100      	movs	r1, #0
    6d34:	4618      	mov	r0, r3
    6d36:	f7ff faf1 	bl	631c <Ftm_Gpt_Ip_SetCounter>
    Ftm_Gpt_Ip_SetCompareValue(instance, channel, 0U);
    6d3a:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6d3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d42:	2200      	movs	r2, #0
    6d44:	4618      	mov	r0, r3
    6d46:	f7ff fbd5 	bl	64f4 <Ftm_Gpt_Ip_SetCompareValue>
    Ftm_Gpt_Ip_WriteModulo(instance, 0U );
    6d4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d4e:	2100      	movs	r1, #0
    6d50:	4618      	mov	r0, r3
    6d52:	f7ff fbe9 	bl	6528 <Ftm_Gpt_Ip_WriteModulo>
    /* Set bit MSA */
    Ftm_Gpt_Ip_ModeSelectA(instance, channel, FALSE);
    6d56:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6d5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d5e:	2200      	movs	r2, #0
    6d60:	4618      	mov	r0, r3
    6d62:	f7ff fbf7 	bl	6554 <Ftm_Gpt_Ip_ModeSelectA>
}
    6d66:	bf00      	nop
    6d68:	b003      	add	sp, #12
    6d6a:	f85d fb04 	ldr.w	pc, [sp], #4

00006d6e <FTM_0_CH_0_CH_1_ISR>:
/**
 * @brief          Independent interrupt handler.
 * @details        Interrupt handler for FTM module 0 channel 0 - channel 1.
 */
ISR(FTM_0_CH_0_CH_1_ISR)
{
    6d6e:	b500      	push	{lr}
    6d70:	b083      	sub	sp, #12
    uint8 channel = 0U;
    6d72:	2300      	movs	r3, #0
    6d74:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 instance = 0U;
    6d78:	2300      	movs	r3, #0
    6d7a:	f88d 3006 	strb.w	r3, [sp, #6]

    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6d7e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6d82:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6d86:	4611      	mov	r1, r2
    6d88:	4618      	mov	r0, r3
    6d8a:	f7ff fc59 	bl	6640 <Ftm_Gpt_Ip_GetChannelEventStatus>
    6d8e:	4603      	mov	r3, r0
    6d90:	2b00      	cmp	r3, #0
    6d92:	d007      	beq.n	6da4 <FTM_0_CH_0_CH_1_ISR+0x36>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6d94:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6d98:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6d9c:	4611      	mov	r1, r2
    6d9e:	4618      	mov	r0, r3
    6da0:	f7ff fc6c 	bl	667c <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    channel++;
    6da4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6da8:	3301      	adds	r3, #1
    6daa:	f88d 3007 	strb.w	r3, [sp, #7]
    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6dae:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6db2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6db6:	4611      	mov	r1, r2
    6db8:	4618      	mov	r0, r3
    6dba:	f7ff fc41 	bl	6640 <Ftm_Gpt_Ip_GetChannelEventStatus>
    6dbe:	4603      	mov	r3, r0
    6dc0:	2b00      	cmp	r3, #0
    6dc2:	d007      	beq.n	6dd4 <FTM_0_CH_0_CH_1_ISR+0x66>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6dc4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6dc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6dcc:	4611      	mov	r1, r2
    6dce:	4618      	mov	r0, r3
    6dd0:	f7ff fc54 	bl	667c <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    EXIT_INTERRUPT();
    6dd4:	f3bf 8f4f 	dsb	sy
}
    6dd8:	bf00      	nop
    6dda:	b003      	add	sp, #12
    6ddc:	f85d fb04 	ldr.w	pc, [sp], #4

00006de0 <Gpt_ValidateChannelStatus>:
(
    uint8 u8ServiceId,
    Gpt_ChannelType channel,
    uint32 coreID
)
{
    6de0:	b500      	push	{lr}
    6de2:	b085      	sub	sp, #20
    6de4:	4603      	mov	r3, r0
    6de6:	9200      	str	r2, [sp, #0]
    6de8:	f88d 3007 	strb.w	r3, [sp, #7]
    6dec:	460b      	mov	r3, r1
    6dee:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType returnValue = (Std_ReturnType)E_NOT_OK;
    6df2:	2301      	movs	r3, #1
    6df4:	f88d 300f 	strb.w	r3, [sp, #15]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(u8ServiceId, channel, coreID))
    {
#endif
        if(channel < GPT_HW_CHANNEL_NUM)
    6df8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6dfc:	2b00      	cmp	r3, #0
    6dfe:	d113      	bne.n	6e28 <Gpt_ValidateChannelStatus+0x48>
                    );
                }
                else
                {
    #else
                    if (GPT_STATUS_RUNNING == Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    6e00:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6e04:	490b      	ldr	r1, [pc, #44]	; (6e34 <Gpt_ValidateChannelStatus+0x54>)
    6e06:	9b00      	ldr	r3, [sp, #0]
    6e08:	4413      	add	r3, r2
    6e0a:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    6e0e:	2b04      	cmp	r3, #4
    6e10:	d107      	bne.n	6e22 <Gpt_ValidateChannelStatus+0x42>
                    {
                        (void)Det_ReportRuntimeError\
    6e12:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e16:	230b      	movs	r3, #11
    6e18:	2100      	movs	r1, #0
    6e1a:	2064      	movs	r0, #100	; 0x64
    6e1c:	f004 fc26 	bl	b66c <Det_ReportRuntimeError>
    6e20:	e002      	b.n	6e28 <Gpt_ValidateChannelStatus+0x48>
                        );
                    }
                    else
                    {
    #endif
                        returnValue = (Std_ReturnType)E_OK;
    6e22:	2300      	movs	r3, #0
    6e24:	f88d 300f 	strb.w	r3, [sp, #15]
    #endif
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
    return returnValue;
    6e28:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6e2c:	4618      	mov	r0, r3
    6e2e:	b005      	add	sp, #20
    6e30:	f85d fb04 	ldr.w	pc, [sp], #4
    6e34:	1fff8fb0 	.word	0x1fff8fb0

00006e38 <Gpt_ValidateMode>:
static inline Std_ReturnType Gpt_ValidateMode
(
	uint8 u8ServiceId,
	uint32 coreID
)
{
    6e38:	b500      	push	{lr}
    6e3a:	b085      	sub	sp, #20
    6e3c:	4603      	mov	r3, r0
    6e3e:	9100      	str	r1, [sp, #0]
    6e40:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType returnValue;
    if (GPT_MODE_SLEEP == Gpt_eMode[coreID])
    6e44:	4a0c      	ldr	r2, [pc, #48]	; (6e78 <Gpt_ValidateMode+0x40>)
    6e46:	9b00      	ldr	r3, [sp, #0]
    6e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e4c:	2b01      	cmp	r3, #1
    6e4e:	d10a      	bne.n	6e66 <Gpt_ValidateMode+0x2e>
    {
        (void)Det_ReportRuntimeError\
    6e50:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e54:	230c      	movs	r3, #12
    6e56:	2100      	movs	r1, #0
    6e58:	2064      	movs	r0, #100	; 0x64
    6e5a:	f004 fc07 	bl	b66c <Det_ReportRuntimeError>
            (uint16)GPT_MODULE_ID,\
            (uint8)GPT_INSTANCE_ID,\
            (uint8)u8ServiceId,\
            (uint8)GPT_E_MODE\
        );
		returnValue = (Std_ReturnType)E_NOT_OK;
    6e5e:	2301      	movs	r3, #1
    6e60:	f88d 300f 	strb.w	r3, [sp, #15]
    6e64:	e002      	b.n	6e6c <Gpt_ValidateMode+0x34>
    }
    else
    {
        returnValue = (Std_ReturnType)E_OK;
    6e66:	2300      	movs	r3, #0
    6e68:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return returnValue;
    6e6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6e70:	4618      	mov	r0, r3
    6e72:	b005      	add	sp, #20
    6e74:	f85d fb04 	ldr.w	pc, [sp], #4
    6e78:	1fff8fa8 	.word	0x1fff8fa8

00006e7c <Gpt_ConvertChannelIndexToChannel>:
 *
 * */
static inline Gpt_ChannelType Gpt_ConvertChannelIndexToChannel(Gpt_ChannelType ChannelIndex,
                                                                              uint32 coreID
                                                                              )
{
    6e7c:	b084      	sub	sp, #16
    6e7e:	4603      	mov	r3, r0
    6e80:	9100      	str	r1, [sp, #0]
    6e82:	f88d 3007 	strb.w	r3, [sp, #7]
    Gpt_ChannelType Channel;

    for (Channel = 0U; Channel < GPT_HW_CHANNEL_NUM; ++Channel)
    6e86:	2300      	movs	r3, #0
    6e88:	f88d 300f 	strb.w	r3, [sp, #15]
    6e8c:	e010      	b.n	6eb0 <Gpt_ConvertChannelIndexToChannel+0x34>
    {
        if(ChannelIndex == (*Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap)[Channel])
    6e8e:	4a0e      	ldr	r2, [pc, #56]	; (6ec8 <Gpt_ConvertChannelIndexToChannel+0x4c>)
    6e90:	9b00      	ldr	r3, [sp, #0]
    6e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e96:	695a      	ldr	r2, [r3, #20]
    6e98:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e9c:	5cd3      	ldrb	r3, [r2, r3]
    6e9e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6ea2:	429a      	cmp	r2, r3
    6ea4:	d009      	beq.n	6eba <Gpt_ConvertChannelIndexToChannel+0x3e>
    for (Channel = 0U; Channel < GPT_HW_CHANNEL_NUM; ++Channel)
    6ea6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6eaa:	3301      	adds	r3, #1
    6eac:	f88d 300f 	strb.w	r3, [sp, #15]
    6eb0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6eb4:	2b00      	cmp	r3, #0
    6eb6:	d0ea      	beq.n	6e8e <Gpt_ConvertChannelIndexToChannel+0x12>
    6eb8:	e000      	b.n	6ebc <Gpt_ConvertChannelIndexToChannel+0x40>
        {
            break;
    6eba:	bf00      	nop
        }
    }
    return Channel;
    6ebc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6ec0:	4618      	mov	r0, r3
    6ec2:	b004      	add	sp, #16
    6ec4:	4770      	bx	lr
    6ec6:	bf00      	nop
    6ec8:	1fff8fac 	.word	0x1fff8fac

00006ecc <Gpt_CheckStatusNotificationEnabled>:
 * @pre         Gpt_Init,  must be called before.
 *
 *
 * */
static inline void Gpt_CheckStatusNotificationEnabled(uint32 coreID)
{
    6ecc:	b500      	push	{lr}
    6ece:	b085      	sub	sp, #20
    6ed0:	9001      	str	r0, [sp, #4]
    Gpt_ChannelType channel;
    Gpt_ChannelType ChannelIndex;

    /*Implements the behaviour for normal mode*/
    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    6ed2:	2300      	movs	r3, #0
    6ed4:	f88d 300f 	strb.w	r3, [sp, #15]
    6ed8:	e057      	b.n	6f8a <Gpt_CheckStatusNotificationEnabled+0xbe>
    {
        channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    6eda:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6ede:	9901      	ldr	r1, [sp, #4]
    6ee0:	4618      	mov	r0, r3
    6ee2:	f7ff ffcb 	bl	6e7c <Gpt_ConvertChannelIndexToChannel>
    6ee6:	4603      	mov	r3, r0
    6ee8:	f88d 300e 	strb.w	r3, [sp, #14]
        if(channel < GPT_HW_CHANNEL_NUM)
    6eec:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6ef0:	2b00      	cmp	r3, #0
    6ef2:	d145      	bne.n	6f80 <Gpt_CheckStatusNotificationEnabled+0xb4>
        {
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
            if (TRUE == Gpt_aChannelInfo[coreID][channel].bNotificationEnabled)
    6ef4:	f89d 200e 	ldrb.w	r2, [sp, #14]
    6ef8:	492b      	ldr	r1, [pc, #172]	; (6fa8 <Gpt_CheckStatusNotificationEnabled+0xdc>)
    6efa:	9b01      	ldr	r3, [sp, #4]
    6efc:	4413      	add	r3, r2
    6efe:	00db      	lsls	r3, r3, #3
    6f00:	440b      	add	r3, r1
    6f02:	791b      	ldrb	r3, [r3, #4]
    6f04:	2b00      	cmp	r3, #0
    6f06:	d011      	beq.n	6f2c <Gpt_CheckStatusNotificationEnabled+0x60>
            {
                /* Enable hardware interrupts */
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    6f08:	4a28      	ldr	r2, [pc, #160]	; (6fac <Gpt_CheckStatusNotificationEnabled+0xe0>)
    6f0a:	9b01      	ldr	r3, [sp, #4]
    6f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f10:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    6f12:	f89d 200f 	ldrb.w	r2, [sp, #15]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    6f16:	4613      	mov	r3, r2
    6f18:	005b      	lsls	r3, r3, #1
    6f1a:	4413      	add	r3, r2
    6f1c:	00db      	lsls	r3, r3, #3
    6f1e:	440b      	add	r3, r1
    6f20:	3314      	adds	r3, #20
    6f22:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    6f24:	4618      	mov	r0, r3
    6f26:	f000 ff51 	bl	7dcc <Gpt_Ipw_EnableInterrupt>
    6f2a:	e029      	b.n	6f80 <Gpt_CheckStatusNotificationEnabled+0xb4>
            else
            {
#endif
                /* Disable hardware interrupts if the channel is not running in the ONE-SHOT mode.
                This is needed because the channel state is updated by ISR for ONE-SHOT mode */
                if((GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus) || \
    6f2c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    6f30:	491d      	ldr	r1, [pc, #116]	; (6fa8 <Gpt_CheckStatusNotificationEnabled+0xdc>)
    6f32:	9b01      	ldr	r3, [sp, #4]
    6f34:	4413      	add	r3, r2
    6f36:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    6f3a:	2b04      	cmp	r3, #4
    6f3c:	d10f      	bne.n	6f5e <Gpt_CheckStatusNotificationEnabled+0x92>
                    (GPT_CH_MODE_CONTINUOUS == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    6f3e:	4a1b      	ldr	r2, [pc, #108]	; (6fac <Gpt_CheckStatusNotificationEnabled+0xe0>)
    6f40:	9b01      	ldr	r3, [sp, #4]
    6f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f46:	6859      	ldr	r1, [r3, #4]
    6f48:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6f4c:	4613      	mov	r3, r2
    6f4e:	005b      	lsls	r3, r3, #1
    6f50:	4413      	add	r3, r2
    6f52:	00db      	lsls	r3, r3, #3
    6f54:	440b      	add	r3, r1
    6f56:	3310      	adds	r3, #16
    6f58:	681b      	ldr	r3, [r3, #0]
                if((GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus) || \
    6f5a:	2b00      	cmp	r3, #0
    6f5c:	d110      	bne.n	6f80 <Gpt_CheckStatusNotificationEnabled+0xb4>
                    )
                {
                    /*Disable hardware interrupts*/
                    Gpt_Ipw_DisableInterrupt
                    (
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    6f5e:	4a13      	ldr	r2, [pc, #76]	; (6fac <Gpt_CheckStatusNotificationEnabled+0xe0>)
    6f60:	9b01      	ldr	r3, [sp, #4]
    6f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f66:	6859      	ldr	r1, [r3, #4]
                    Gpt_Ipw_DisableInterrupt
    6f68:	f89d 200f 	ldrb.w	r2, [sp, #15]
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    6f6c:	4613      	mov	r3, r2
    6f6e:	005b      	lsls	r3, r3, #1
    6f70:	4413      	add	r3, r2
    6f72:	00db      	lsls	r3, r3, #3
    6f74:	440b      	add	r3, r1
    6f76:	3314      	adds	r3, #20
    6f78:	681b      	ldr	r3, [r3, #0]
                    Gpt_Ipw_DisableInterrupt
    6f7a:	4618      	mov	r0, r3
    6f7c:	f000 ff41 	bl	7e02 <Gpt_Ipw_DisableInterrupt>
    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    6f80:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6f84:	3301      	adds	r3, #1
    6f86:	f88d 300f 	strb.w	r3, [sp, #15]
    6f8a:	4a08      	ldr	r2, [pc, #32]	; (6fac <Gpt_CheckStatusNotificationEnabled+0xe0>)
    6f8c:	9b01      	ldr	r3, [sp, #4]
    6f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f92:	781b      	ldrb	r3, [r3, #0]
    6f94:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6f98:	429a      	cmp	r2, r3
    6f9a:	d39e      	bcc.n	6eda <Gpt_CheckStatusNotificationEnabled+0xe>
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
            }
#endif
        }
    }
}
    6f9c:	bf00      	nop
    6f9e:	bf00      	nop
    6fa0:	b005      	add	sp, #20
    6fa2:	f85d fb04 	ldr.w	pc, [sp], #4
    6fa6:	bf00      	nop
    6fa8:	1fff8fb0 	.word	0x1fff8fb0
    6fac:	1fff8fac 	.word	0x1fff8fac

00006fb0 <Gpt_CheckStatusWakeupEnabled>:
 * @pre         Gpt_Init, Gpt_SetMode must be called before.
 *
 *
 * */
static inline void Gpt_CheckStatusWakeupEnabled(uint32 coreID)
{
    6fb0:	b500      	push	{lr}
    6fb2:	b089      	sub	sp, #36	; 0x24
    6fb4:	9001      	str	r0, [sp, #4]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    6fb6:	2300      	movs	r3, #0
    6fb8:	f88d 3008 	strb.w	r3, [sp, #8]
    6fbc:	2300      	movs	r3, #0
    6fbe:	9303      	str	r3, [sp, #12]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    6fc0:	ab02      	add	r3, sp, #8
    6fc2:	9306      	str	r3, [sp, #24]
    Gpt_ValueType uElapsedTime = 0U;
    6fc4:	2300      	movs	r3, #0
    6fc6:	9305      	str	r3, [sp, #20]
#endif
    Gpt_ChannelType ChannelIndex;
    Gpt_ChannelType channel;

    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    6fc8:	2300      	movs	r3, #0
    6fca:	f88d 301f 	strb.w	r3, [sp, #31]
    6fce:	e099      	b.n	7104 <Gpt_CheckStatusWakeupEnabled+0x154>
    {
        channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    6fd0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6fd4:	9901      	ldr	r1, [sp, #4]
    6fd6:	4618      	mov	r0, r3
    6fd8:	f7ff ff50 	bl	6e7c <Gpt_ConvertChannelIndexToChannel>
    6fdc:	4603      	mov	r3, r0
    6fde:	f88d 3013 	strb.w	r3, [sp, #19]
        if(channel < GPT_HW_CHANNEL_NUM)
    6fe2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6fe6:	2b00      	cmp	r3, #0
    6fe8:	f040 8087 	bne.w	70fa <Gpt_CheckStatusWakeupEnabled+0x14a>
        {
            if (TRUE == Gpt_aChannelInfo[coreID][channel].bWakeupEnabled)
    6fec:	f89d 2013 	ldrb.w	r2, [sp, #19]
    6ff0:	494c      	ldr	r1, [pc, #304]	; (7124 <Gpt_CheckStatusWakeupEnabled+0x174>)
    6ff2:	9b01      	ldr	r3, [sp, #4]
    6ff4:	4413      	add	r3, r2
    6ff6:	00db      	lsls	r3, r3, #3
    6ff8:	440b      	add	r3, r1
    6ffa:	795b      	ldrb	r3, [r3, #5]
    6ffc:	2b00      	cmp	r3, #0
    6ffe:	d011      	beq.n	7024 <Gpt_CheckStatusWakeupEnabled+0x74>
            {
                /*Enable hardware interrupts*/
                Gpt_Ipw_EnableInterrupt(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    7000:	4a49      	ldr	r2, [pc, #292]	; (7128 <Gpt_CheckStatusWakeupEnabled+0x178>)
    7002:	9b01      	ldr	r3, [sp, #4]
    7004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7008:	6859      	ldr	r1, [r3, #4]
    700a:	f89d 201f 	ldrb.w	r2, [sp, #31]
    700e:	4613      	mov	r3, r2
    7010:	005b      	lsls	r3, r3, #1
    7012:	4413      	add	r3, r2
    7014:	00db      	lsls	r3, r3, #3
    7016:	440b      	add	r3, r1
    7018:	3314      	adds	r3, #20
    701a:	681b      	ldr	r3, [r3, #0]
    701c:	4618      	mov	r0, r3
    701e:	f000 fed5 	bl	7dcc <Gpt_Ipw_EnableInterrupt>
    7022:	e06a      	b.n	70fa <Gpt_CheckStatusWakeupEnabled+0x14a>
            }
            else
            {
                /*Disable hardware interrupts*/
                Gpt_Ipw_DisableInterrupt(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    7024:	4a40      	ldr	r2, [pc, #256]	; (7128 <Gpt_CheckStatusWakeupEnabled+0x178>)
    7026:	9b01      	ldr	r3, [sp, #4]
    7028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    702c:	6859      	ldr	r1, [r3, #4]
    702e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    7032:	4613      	mov	r3, r2
    7034:	005b      	lsls	r3, r3, #1
    7036:	4413      	add	r3, r2
    7038:	00db      	lsls	r3, r3, #3
    703a:	440b      	add	r3, r1
    703c:	3314      	adds	r3, #20
    703e:	681b      	ldr	r3, [r3, #0]
    7040:	4618      	mov	r0, r3
    7042:	f000 fede 	bl	7e02 <Gpt_Ipw_DisableInterrupt>
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                /*Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs
                can change the logical channel state between the checking of logical channel
                state and timestamp retrieval*/
                /* Get the elapsed  time  for later use by other API calls*/
                uElapsedTime = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    7046:	4a38      	ldr	r2, [pc, #224]	; (7128 <Gpt_CheckStatusWakeupEnabled+0x178>)
    7048:	9b01      	ldr	r3, [sp, #4]
    704a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    704e:	6859      	ldr	r1, [r3, #4]
    7050:	f89d 201f 	ldrb.w	r2, [sp, #31]
    7054:	4613      	mov	r3, r2
    7056:	005b      	lsls	r3, r3, #1
    7058:	4413      	add	r3, r2
    705a:	00db      	lsls	r3, r3, #3
    705c:	440b      	add	r3, r1
    705e:	3314      	adds	r3, #20
    7060:	681b      	ldr	r3, [r3, #0]
    7062:	9906      	ldr	r1, [sp, #24]
    7064:	4618      	mov	r0, r3
    7066:	f000 fe86 	bl	7d76 <Gpt_Ipw_GetTimeElapsed>
    706a:	9005      	str	r0, [sp, #20]
#endif

                /*Stop  the running timer*/
                if (GPT_STATUS_RUNNING == Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    706c:	f89d 2013 	ldrb.w	r2, [sp, #19]
    7070:	492c      	ldr	r1, [pc, #176]	; (7124 <Gpt_CheckStatusWakeupEnabled+0x174>)
    7072:	9b01      	ldr	r3, [sp, #4]
    7074:	4413      	add	r3, r2
    7076:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    707a:	2b04      	cmp	r3, #4
    707c:	d13d      	bne.n	70fa <Gpt_CheckStatusWakeupEnabled+0x14a>
                {
                    if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    707e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    7082:	2b00      	cmp	r3, #0
    7084:	d018      	beq.n	70b8 <Gpt_CheckStatusWakeupEnabled+0x108>
                        (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    7086:	4a28      	ldr	r2, [pc, #160]	; (7128 <Gpt_CheckStatusWakeupEnabled+0x178>)
    7088:	9b01      	ldr	r3, [sp, #4]
    708a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    708e:	6859      	ldr	r1, [r3, #4]
    7090:	f89d 201f 	ldrb.w	r2, [sp, #31]
    7094:	4613      	mov	r3, r2
    7096:	005b      	lsls	r3, r3, #1
    7098:	4413      	add	r3, r2
    709a:	00db      	lsls	r3, r3, #3
    709c:	440b      	add	r3, r1
    709e:	3310      	adds	r3, #16
    70a0:	681b      	ldr	r3, [r3, #0]
                    if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    70a2:	2b01      	cmp	r3, #1
    70a4:	d108      	bne.n	70b8 <Gpt_CheckStatusWakeupEnabled+0x108>
                        )
                    {
                        /*This action could be executed only when the function is called
                        during a critical section implemented by disabling all interrupts*/
                        /*Set the channel status to EXPIRED*/
                        Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_EXPIRED;
    70a6:	f89d 2013 	ldrb.w	r2, [sp, #19]
    70aa:	491e      	ldr	r1, [pc, #120]	; (7124 <Gpt_CheckStatusWakeupEnabled+0x174>)
    70ac:	9b01      	ldr	r3, [sp, #4]
    70ae:	4413      	add	r3, r2
    70b0:	2203      	movs	r2, #3
    70b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    70b6:	e00f      	b.n	70d8 <Gpt_CheckStatusWakeupEnabled+0x128>
                    }
                    else
                    {
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                        /* Store the stopping time for later use by other API calls*/
                        Gpt_aStopTime[coreID][channel] = uElapsedTime;
    70b8:	f89d 2013 	ldrb.w	r2, [sp, #19]
    70bc:	491b      	ldr	r1, [pc, #108]	; (712c <Gpt_CheckStatusWakeupEnabled+0x17c>)
    70be:	9b01      	ldr	r3, [sp, #4]
    70c0:	4413      	add	r3, r2
    70c2:	9a05      	ldr	r2, [sp, #20]
    70c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
                        /* Set the channel status to STOPPED*/
                        Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_STOPPED;
    70c8:	f89d 2013 	ldrb.w	r2, [sp, #19]
    70cc:	4915      	ldr	r1, [pc, #84]	; (7124 <Gpt_CheckStatusWakeupEnabled+0x174>)
    70ce:	9b01      	ldr	r3, [sp, #4]
    70d0:	4413      	add	r3, r2
    70d2:	2202      	movs	r2, #2
    70d4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                    }
                    /* Call low level stop timer */
                    Gpt_Ipw_StopTimer
                    (
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    70d8:	4a13      	ldr	r2, [pc, #76]	; (7128 <Gpt_CheckStatusWakeupEnabled+0x178>)
    70da:	9b01      	ldr	r3, [sp, #4]
    70dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70e0:	6859      	ldr	r1, [r3, #4]
                    Gpt_Ipw_StopTimer
    70e2:	f89d 201f 	ldrb.w	r2, [sp, #31]
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    70e6:	4613      	mov	r3, r2
    70e8:	005b      	lsls	r3, r3, #1
    70ea:	4413      	add	r3, r2
    70ec:	00db      	lsls	r3, r3, #3
    70ee:	440b      	add	r3, r1
    70f0:	3314      	adds	r3, #20
    70f2:	681b      	ldr	r3, [r3, #0]
                    Gpt_Ipw_StopTimer
    70f4:	4618      	mov	r0, r3
    70f6:	f000 fe54 	bl	7da2 <Gpt_Ipw_StopTimer>
    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    70fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    70fe:	3301      	adds	r3, #1
    7100:	f88d 301f 	strb.w	r3, [sp, #31]
    7104:	4a08      	ldr	r2, [pc, #32]	; (7128 <Gpt_CheckStatusWakeupEnabled+0x178>)
    7106:	9b01      	ldr	r3, [sp, #4]
    7108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    710c:	781b      	ldrb	r3, [r3, #0]
    710e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    7112:	429a      	cmp	r2, r3
    7114:	f4ff af5c 	bcc.w	6fd0 <Gpt_CheckStatusWakeupEnabled+0x20>
                    );
                }
            }
        }
    }
}
    7118:	bf00      	nop
    711a:	bf00      	nop
    711c:	b009      	add	sp, #36	; 0x24
    711e:	f85d fb04 	ldr.w	pc, [sp], #4
    7122:	bf00      	nop
    7124:	1fff8fb0 	.word	0x1fff8fb0
    7128:	1fff8fac 	.word	0x1fff8fac
    712c:	1fff8fb8 	.word	0x1fff8fb8

00007130 <Gpt_Init>:
*
* @pre            The data structure including the configuration set required for initializing the GPT driver..
* @implements     Gpt_Init_Activity
*/
void Gpt_Init(const Gpt_ConfigType * configPtr)
{
    7130:	b500      	push	{lr}
    7132:	b087      	sub	sp, #28
    7134:	9001      	str	r0, [sp, #4]
    Gpt_ChannelType ChannelIndex;
    Gpt_ChannelType channel;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7136:	2300      	movs	r3, #0
    7138:	9304      	str	r3, [sp, #16]
        #else
            Gpt_pConfig[coreID] = &Gpt_Config;
        #endif
            (void)configPtr;
    #else
            Gpt_pConfig[coreID] = configPtr;
    713a:	493b      	ldr	r1, [pc, #236]	; (7228 <Gpt_Init+0xf8>)
    713c:	9b04      	ldr	r3, [sp, #16]
    713e:	9a01      	ldr	r2, [sp, #4]
    7140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    #endif

#if(GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON)
            /*Initialize and Start Predef Timers.*/
            Gpt_Ipw_StartPredefTimer(Gpt_pConfig[coreID]);
    7144:	4a38      	ldr	r2, [pc, #224]	; (7228 <Gpt_Init+0xf8>)
    7146:	9b04      	ldr	r3, [sp, #16]
    7148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    714c:	4618      	mov	r0, r3
    714e:	f000 fe61 	bl	7e14 <Gpt_Ipw_StartPredefTimer>
#endif
            Gpt_Ipw_InitInstances(Gpt_pConfig[coreID]);
    7152:	4a35      	ldr	r2, [pc, #212]	; (7228 <Gpt_Init+0xf8>)
    7154:	9b04      	ldr	r3, [sp, #16]
    7156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    715a:	4618      	mov	r0, r3
    715c:	f000 fda0 	bl	7ca0 <Gpt_Ipw_InitInstances>

            /*Initialize for each channel the runtime status informations.*/
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7160:	2300      	movs	r3, #0
    7162:	f88d 3017 	strb.w	r3, [sp, #23]
    7166:	e04d      	b.n	7204 <Gpt_Init+0xd4>
            {
                channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    7168:	f89d 3017 	ldrb.w	r3, [sp, #23]
    716c:	9904      	ldr	r1, [sp, #16]
    716e:	4618      	mov	r0, r3
    7170:	f7ff fe84 	bl	6e7c <Gpt_ConvertChannelIndexToChannel>
    7174:	4603      	mov	r3, r0
    7176:	f88d 300f 	strb.w	r3, [sp, #15]
                if(channel < GPT_HW_CHANNEL_NUM)
    717a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    717e:	2b00      	cmp	r3, #0
    7180:	d12a      	bne.n	71d8 <Gpt_Init+0xa8>
                {
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
                    /*Disable notification*/
                    Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = FALSE;
    7182:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7186:	4929      	ldr	r1, [pc, #164]	; (722c <Gpt_Init+0xfc>)
    7188:	9b04      	ldr	r3, [sp, #16]
    718a:	4413      	add	r3, r2
    718c:	00db      	lsls	r3, r3, #3
    718e:	440b      	add	r3, r1
    7190:	2200      	movs	r2, #0
    7192:	711a      	strb	r2, [r3, #4]
#endif

#if ((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON))
                    /*Disable wakeup*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = FALSE;
    7194:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7198:	4924      	ldr	r1, [pc, #144]	; (722c <Gpt_Init+0xfc>)
    719a:	9b04      	ldr	r3, [sp, #16]
    719c:	4413      	add	r3, r2
    719e:	00db      	lsls	r3, r3, #3
    71a0:	440b      	add	r3, r1
    71a2:	2200      	movs	r2, #0
    71a4:	715a      	strb	r2, [r3, #5]
                    /*Clear wakeup generation status*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupGenerated = FALSE;
    71a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    71aa:	4920      	ldr	r1, [pc, #128]	; (722c <Gpt_Init+0xfc>)
    71ac:	9b04      	ldr	r3, [sp, #16]
    71ae:	4413      	add	r3, r2
    71b0:	00db      	lsls	r3, r3, #3
    71b2:	440b      	add	r3, r1
    71b4:	2200      	movs	r2, #0
    71b6:	719a      	strb	r2, [r3, #6]
#endif
                    /* Initialize the running information of the channel*/
                    Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_INITIALIZED;
    71b8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    71bc:	491b      	ldr	r1, [pc, #108]	; (722c <Gpt_Init+0xfc>)
    71be:	9b04      	ldr	r3, [sp, #16]
    71c0:	4413      	add	r3, r2
    71c2:	2201      	movs	r2, #1
    71c4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                    Gpt_aStopTime[coreID][channel] = 0U;
    71c8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    71cc:	4918      	ldr	r1, [pc, #96]	; (7230 <Gpt_Init+0x100>)
    71ce:	9b04      	ldr	r3, [sp, #16]
    71d0:	4413      	add	r3, r2
    71d2:	2200      	movs	r2, #0
    71d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
                }

                /*Initialize hardware timer channel.*/
                Gpt_Ipw_Init(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    71d8:	4a13      	ldr	r2, [pc, #76]	; (7228 <Gpt_Init+0xf8>)
    71da:	9b04      	ldr	r3, [sp, #16]
    71dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71e0:	6859      	ldr	r1, [r3, #4]
    71e2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    71e6:	4613      	mov	r3, r2
    71e8:	005b      	lsls	r3, r3, #1
    71ea:	4413      	add	r3, r2
    71ec:	00db      	lsls	r3, r3, #3
    71ee:	440b      	add	r3, r1
    71f0:	3314      	adds	r3, #20
    71f2:	681b      	ldr	r3, [r3, #0]
    71f4:	4618      	mov	r0, r3
    71f6:	f000 fd8a 	bl	7d0e <Gpt_Ipw_Init>
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    71fa:	f89d 3017 	ldrb.w	r3, [sp, #23]
    71fe:	3301      	adds	r3, #1
    7200:	f88d 3017 	strb.w	r3, [sp, #23]
    7204:	4a08      	ldr	r2, [pc, #32]	; (7228 <Gpt_Init+0xf8>)
    7206:	9b04      	ldr	r3, [sp, #16]
    7208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    720c:	781b      	ldrb	r3, [r3, #0]
    720e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    7212:	429a      	cmp	r2, r3
    7214:	d3a8      	bcc.n	7168 <Gpt_Init+0x38>
            }
#if (((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON)) || \
     (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON) || \
     (GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON))
            /*Set the driver to normal mode*/
            Gpt_eMode[coreID] = GPT_MODE_NORMAL;
    7216:	4a07      	ldr	r2, [pc, #28]	; (7234 <Gpt_Init+0x104>)
    7218:	9b04      	ldr	r3, [sp, #16]
    721a:	2100      	movs	r1, #0
    721c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#endif
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
    return;
    7220:	bf00      	nop
}
    7222:	b007      	add	sp, #28
    7224:	f85d fb04 	ldr.w	pc, [sp], #4
    7228:	1fff8fac 	.word	0x1fff8fac
    722c:	1fff8fb0 	.word	0x1fff8fb0
    7230:	1fff8fb8 	.word	0x1fff8fb8
    7234:	1fff8fa8 	.word	0x1fff8fa8

00007238 <Gpt_DeInit>:
* @return  void
*
* @implements   Gpt_DeInit_Activity
*/
void Gpt_DeInit(void)
{
    7238:	b500      	push	{lr}
    723a:	b085      	sub	sp, #20
    Gpt_ChannelType channel;
    Gpt_ChannelType ChannelIndex;

    Std_ReturnType allChannelStatus = (Std_ReturnType)E_OK;
    723c:	2300      	movs	r3, #0
    723e:	f88d 300e 	strb.w	r3, [sp, #14]
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7242:	2300      	movs	r3, #0
    7244:	9302      	str	r3, [sp, #8]
    /*Validate if the calling context is valid*/
    if((Std_ReturnType)E_OK == Gpt_ValidateGlobalCall(GPT_DEINIT_ID, coreID))
    {
#endif
        /* Initialize for each channel the runtime status informations.*/
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7246:	2300      	movs	r3, #0
    7248:	f88d 300f 	strb.w	r3, [sp, #15]
    724c:	e01b      	b.n	7286 <Gpt_DeInit+0x4e>
        {
            channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    724e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7252:	9902      	ldr	r1, [sp, #8]
    7254:	4618      	mov	r0, r3
    7256:	f7ff fe11 	bl	6e7c <Gpt_ConvertChannelIndexToChannel>
    725a:	4603      	mov	r3, r0
    725c:	f88d 3007 	strb.w	r3, [sp, #7]
            /*Check if the channel is not running.*/
            if((Std_ReturnType)E_NOT_OK == Gpt_ValidateChannelStatus(GPT_DEINIT_ID, channel, coreID))
    7260:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7264:	9a02      	ldr	r2, [sp, #8]
    7266:	4619      	mov	r1, r3
    7268:	2002      	movs	r0, #2
    726a:	f7ff fdb9 	bl	6de0 <Gpt_ValidateChannelStatus>
    726e:	4603      	mov	r3, r0
    7270:	2b01      	cmp	r3, #1
    7272:	d103      	bne.n	727c <Gpt_DeInit+0x44>
            {
                allChannelStatus = (Std_ReturnType)E_NOT_OK;
    7274:	2301      	movs	r3, #1
    7276:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    727a:	e00d      	b.n	7298 <Gpt_DeInit+0x60>
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    727c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7280:	3301      	adds	r3, #1
    7282:	f88d 300f 	strb.w	r3, [sp, #15]
    7286:	4a3c      	ldr	r2, [pc, #240]	; (7378 <Gpt_DeInit+0x140>)
    7288:	9b02      	ldr	r3, [sp, #8]
    728a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    728e:	781b      	ldrb	r3, [r3, #0]
    7290:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7294:	429a      	cmp	r2, r3
    7296:	d3da      	bcc.n	724e <Gpt_DeInit+0x16>
            }
        }

        if((Std_ReturnType)E_OK == allChannelStatus)
    7298:	f89d 300e 	ldrb.w	r3, [sp, #14]
    729c:	2b00      	cmp	r3, #0
    729e:	d167      	bne.n	7370 <Gpt_DeInit+0x138>
        {
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    72a0:	2300      	movs	r3, #0
    72a2:	f88d 300f 	strb.w	r3, [sp, #15]
    72a6:	e04d      	b.n	7344 <Gpt_DeInit+0x10c>
            {
                channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    72a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    72ac:	9902      	ldr	r1, [sp, #8]
    72ae:	4618      	mov	r0, r3
    72b0:	f7ff fde4 	bl	6e7c <Gpt_ConvertChannelIndexToChannel>
    72b4:	4603      	mov	r3, r0
    72b6:	f88d 3007 	strb.w	r3, [sp, #7]
                if(channel < GPT_HW_CHANNEL_NUM)
    72ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    72be:	2b00      	cmp	r3, #0
    72c0:	d13b      	bne.n	733a <Gpt_DeInit+0x102>
                {
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
                    /*Disable notification*/
                    Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = FALSE;
    72c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    72c6:	492d      	ldr	r1, [pc, #180]	; (737c <Gpt_DeInit+0x144>)
    72c8:	9b02      	ldr	r3, [sp, #8]
    72ca:	4413      	add	r3, r2
    72cc:	00db      	lsls	r3, r3, #3
    72ce:	440b      	add	r3, r1
    72d0:	2200      	movs	r2, #0
    72d2:	711a      	strb	r2, [r3, #4]
#endif

#if ((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON))
                    /*Disable wakeup*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = FALSE;
    72d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    72d8:	4928      	ldr	r1, [pc, #160]	; (737c <Gpt_DeInit+0x144>)
    72da:	9b02      	ldr	r3, [sp, #8]
    72dc:	4413      	add	r3, r2
    72de:	00db      	lsls	r3, r3, #3
    72e0:	440b      	add	r3, r1
    72e2:	2200      	movs	r2, #0
    72e4:	715a      	strb	r2, [r3, #5]
                    /*Clear wakeup generation status*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupGenerated = FALSE;
    72e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    72ea:	4924      	ldr	r1, [pc, #144]	; (737c <Gpt_DeInit+0x144>)
    72ec:	9b02      	ldr	r3, [sp, #8]
    72ee:	4413      	add	r3, r2
    72f0:	00db      	lsls	r3, r3, #3
    72f2:	440b      	add	r3, r1
    72f4:	2200      	movs	r2, #0
    72f6:	719a      	strb	r2, [r3, #6]
#endif
                    /* De initialize the running information of the channel*/
                    Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_UNINITIALIZED;
    72f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    72fc:	491f      	ldr	r1, [pc, #124]	; (737c <Gpt_DeInit+0x144>)
    72fe:	9b02      	ldr	r3, [sp, #8]
    7300:	4413      	add	r3, r2
    7302:	2200      	movs	r2, #0
    7304:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                    Gpt_aStopTime[coreID][channel] = 0U;
    7308:	f89d 2007 	ldrb.w	r2, [sp, #7]
    730c:	491c      	ldr	r1, [pc, #112]	; (7380 <Gpt_DeInit+0x148>)
    730e:	9b02      	ldr	r3, [sp, #8]
    7310:	4413      	add	r3, r2
    7312:	2200      	movs	r2, #0
    7314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
                    /*Initialize hardware timer channel.*/
                    Gpt_Ipw_DeInit
                    (
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7318:	4a17      	ldr	r2, [pc, #92]	; (7378 <Gpt_DeInit+0x140>)
    731a:	9b02      	ldr	r3, [sp, #8]
    731c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7320:	6859      	ldr	r1, [r3, #4]
                    Gpt_Ipw_DeInit
    7322:	f89d 200f 	ldrb.w	r2, [sp, #15]
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7326:	4613      	mov	r3, r2
    7328:	005b      	lsls	r3, r3, #1
    732a:	4413      	add	r3, r2
    732c:	00db      	lsls	r3, r3, #3
    732e:	440b      	add	r3, r1
    7330:	3314      	adds	r3, #20
    7332:	681b      	ldr	r3, [r3, #0]
                    Gpt_Ipw_DeInit
    7334:	4618      	mov	r0, r3
    7336:	f000 fd52 	bl	7dde <Gpt_Ipw_DeInit>
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    733a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    733e:	3301      	adds	r3, #1
    7340:	f88d 300f 	strb.w	r3, [sp, #15]
    7344:	4a0c      	ldr	r2, [pc, #48]	; (7378 <Gpt_DeInit+0x140>)
    7346:	9b02      	ldr	r3, [sp, #8]
    7348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    734c:	781b      	ldrb	r3, [r3, #0]
    734e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7352:	429a      	cmp	r2, r3
    7354:	d3a8      	bcc.n	72a8 <Gpt_DeInit+0x70>
                }
            }

#if(GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON)
            /* Deinitialize and stop Predef timers.*/
            Gpt_Ipw_StopPredefTimer(Gpt_pConfig[coreID]);
    7356:	4a08      	ldr	r2, [pc, #32]	; (7378 <Gpt_DeInit+0x140>)
    7358:	9b02      	ldr	r3, [sp, #8]
    735a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    735e:	4618      	mov	r0, r3
    7360:	f000 fdca 	bl	7ef8 <Gpt_Ipw_StopPredefTimer>
#endif
            /* Writing NULL to configuration pointer is mandatory because that variable
            is used to test the initialization of the driver */
            Gpt_pConfig[coreID] = NULL_PTR;
    7364:	4a04      	ldr	r2, [pc, #16]	; (7378 <Gpt_DeInit+0x140>)
    7366:	9b02      	ldr	r3, [sp, #8]
    7368:	2100      	movs	r1, #0
    736a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }

#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
    return;
    736e:	bf00      	nop
    7370:	bf00      	nop
}
    7372:	b005      	add	sp, #20
    7374:	f85d fb04 	ldr.w	pc, [sp], #4
    7378:	1fff8fac 	.word	0x1fff8fac
    737c:	1fff8fb0 	.word	0x1fff8fb0
    7380:	1fff8fb8 	.word	0x1fff8fb8

00007384 <Gpt_GetTimeElapsed>:
*
* @pre     The driver needs to be initialized.
* @implements Gpt_GetTimeElapsed_Activity
*/
Gpt_ValueType Gpt_GetTimeElapsed(Gpt_ChannelType channel)
{
    7384:	b500      	push	{lr}
    7386:	b089      	sub	sp, #36	; 0x24
    7388:	4603      	mov	r3, r0
    738a:	f88d 3007 	strb.w	r3, [sp, #7]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    738e:	2300      	movs	r3, #0
    7390:	f88d 3008 	strb.w	r3, [sp, #8]
    7394:	2300      	movs	r3, #0
    7396:	9303      	str	r3, [sp, #12]
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    7398:	ab02      	add	r3, sp, #8
    739a:	9306      	str	r3, [sp, #24]
    Gpt_ChannelType ChannelIndex;

    Gpt_ValueType returnValue = 0U;
    739c:	2300      	movs	r3, #0
    739e:	9307      	str	r3, [sp, #28]
    uint32 coreID = (uint32)Gpt_GetCoreID();
    73a0:	2300      	movs	r3, #0
    73a2:	9305      	str	r3, [sp, #20]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(GPT_TIMEELAPSED_ID, channel, coreID))
    {
#endif
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    73a4:	4a2f      	ldr	r2, [pc, #188]	; (7464 <Gpt_GetTimeElapsed+0xe0>)
    73a6:	9b05      	ldr	r3, [sp, #20]
    73a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73ac:	695a      	ldr	r2, [r3, #20]
    73ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    73b2:	5cd3      	ldrb	r3, [r2, r3]
    73b4:	f88d 3013 	strb.w	r3, [sp, #19]
        /*Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs can change
        the logical channel state between the checking of logical channel state and timestamp
        retrieval*/
        returnValue = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    73b8:	4a2a      	ldr	r2, [pc, #168]	; (7464 <Gpt_GetTimeElapsed+0xe0>)
    73ba:	9b05      	ldr	r3, [sp, #20]
    73bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73c0:	6859      	ldr	r1, [r3, #4]
    73c2:	f89d 2013 	ldrb.w	r2, [sp, #19]
    73c6:	4613      	mov	r3, r2
    73c8:	005b      	lsls	r3, r3, #1
    73ca:	4413      	add	r3, r2
    73cc:	00db      	lsls	r3, r3, #3
    73ce:	440b      	add	r3, r1
    73d0:	3314      	adds	r3, #20
    73d2:	681b      	ldr	r3, [r3, #0]
    73d4:	9906      	ldr	r1, [sp, #24]
    73d6:	4618      	mov	r0, r3
    73d8:	f000 fccd 	bl	7d76 <Gpt_Ipw_GetTimeElapsed>
    73dc:	9007      	str	r0, [sp, #28]

        /*Check the channel status*/
        switch(Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    73de:	f89d 2007 	ldrb.w	r2, [sp, #7]
    73e2:	4921      	ldr	r1, [pc, #132]	; (7468 <Gpt_GetTimeElapsed+0xe4>)
    73e4:	9b05      	ldr	r3, [sp, #20]
    73e6:	4413      	add	r3, r2
    73e8:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    73ec:	3b01      	subs	r3, #1
    73ee:	2b03      	cmp	r3, #3
    73f0:	d830      	bhi.n	7454 <Gpt_GetTimeElapsed+0xd0>
    73f2:	a201      	add	r2, pc, #4	; (adr r2, 73f8 <Gpt_GetTimeElapsed+0x74>)
    73f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    73f8:	00007437 	.word	0x00007437
    73fc:	0000743d 	.word	0x0000743d
    7400:	0000744f 	.word	0x0000744f
    7404:	00007409 	.word	0x00007409
        {
            case GPT_STATUS_RUNNING:
            {
                /*Check if channel counter has already rollover*/
                if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    7408:	f89d 3008 	ldrb.w	r3, [sp, #8]
    740c:	2b00      	cmp	r3, #0
    740e:	d023      	beq.n	7458 <Gpt_GetTimeElapsed+0xd4>
                    (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    7410:	4a14      	ldr	r2, [pc, #80]	; (7464 <Gpt_GetTimeElapsed+0xe0>)
    7412:	9b05      	ldr	r3, [sp, #20]
    7414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7418:	6859      	ldr	r1, [r3, #4]
    741a:	f89d 2013 	ldrb.w	r2, [sp, #19]
    741e:	4613      	mov	r3, r2
    7420:	005b      	lsls	r3, r3, #1
    7422:	4413      	add	r3, r2
    7424:	00db      	lsls	r3, r3, #3
    7426:	440b      	add	r3, r1
    7428:	3310      	adds	r3, #16
    742a:	681b      	ldr	r3, [r3, #0]
                if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    742c:	2b01      	cmp	r3, #1
    742e:	d113      	bne.n	7458 <Gpt_GetTimeElapsed+0xd4>
                   )
                {
                    /*The timer has already expired.The hardware timer status is not yet
                    synchronized with the logical timer status*/
                    returnValue = returnHwChannelInfo.uTargetTime;
    7430:	9b03      	ldr	r3, [sp, #12]
    7432:	9307      	str	r3, [sp, #28]
                }
            }
            break;
    7434:	e010      	b.n	7458 <Gpt_GetTimeElapsed+0xd4>
            case GPT_STATUS_INITIALIZED:
            {
                returnValue = 0U;
    7436:	2300      	movs	r3, #0
    7438:	9307      	str	r3, [sp, #28]
            }
            break;
    743a:	e00e      	b.n	745a <Gpt_GetTimeElapsed+0xd6>
            case GPT_STATUS_STOPPED:
            {
                /*Return elapsed time at the when the channel was stopped*/
                returnValue = Gpt_aStopTime[coreID][channel];
    743c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7440:	490a      	ldr	r1, [pc, #40]	; (746c <Gpt_GetTimeElapsed+0xe8>)
    7442:	9b05      	ldr	r3, [sp, #20]
    7444:	4413      	add	r3, r2
    7446:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    744a:	9307      	str	r3, [sp, #28]
            }
            break;
    744c:	e005      	b.n	745a <Gpt_GetTimeElapsed+0xd6>
            case GPT_STATUS_EXPIRED:
            {
                returnValue = returnHwChannelInfo.uTargetTime;
    744e:	9b03      	ldr	r3, [sp, #12]
    7450:	9307      	str	r3, [sp, #28]
            }
            break;
    7452:	e002      	b.n	745a <Gpt_GetTimeElapsed+0xd6>
            default:
                /*Only the above four channel states are allowed when this function is called*/
                break;
    7454:	bf00      	nop
    7456:	e000      	b.n	745a <Gpt_GetTimeElapsed+0xd6>
            break;
    7458:	bf00      	nop
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif

    return returnValue;
    745a:	9b07      	ldr	r3, [sp, #28]
}
    745c:	4618      	mov	r0, r3
    745e:	b009      	add	sp, #36	; 0x24
    7460:	f85d fb04 	ldr.w	pc, [sp], #4
    7464:	1fff8fac 	.word	0x1fff8fac
    7468:	1fff8fb0 	.word	0x1fff8fb0
    746c:	1fff8fb8 	.word	0x1fff8fb8

00007470 <Gpt_GetTimeRemaining>:
*
* @pre           The driver needs to be initialized.
* @implements    Gpt_GetTimeRemaining_Activity
*/
Gpt_ValueType Gpt_GetTimeRemaining(Gpt_ChannelType channel)
{
    7470:	b500      	push	{lr}
    7472:	b089      	sub	sp, #36	; 0x24
    7474:	4603      	mov	r3, r0
    7476:	f88d 3007 	strb.w	r3, [sp, #7]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    747a:	2300      	movs	r3, #0
    747c:	f88d 3008 	strb.w	r3, [sp, #8]
    7480:	2300      	movs	r3, #0
    7482:	9303      	str	r3, [sp, #12]
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    7484:	ab02      	add	r3, sp, #8
    7486:	9306      	str	r3, [sp, #24]
    Gpt_ChannelType ChannelIndex;

    Gpt_ValueType returnValue = 0U;
    7488:	2300      	movs	r3, #0
    748a:	9307      	str	r3, [sp, #28]
    uint32 coreID = (uint32)Gpt_GetCoreID();
    748c:	2300      	movs	r3, #0
    748e:	9305      	str	r3, [sp, #20]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(GPT_TIMEREMAINING_ID, channel, coreID))
    {
#endif
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7490:	4a32      	ldr	r2, [pc, #200]	; (755c <Gpt_GetTimeRemaining+0xec>)
    7492:	9b05      	ldr	r3, [sp, #20]
    7494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7498:	695a      	ldr	r2, [r3, #20]
    749a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    749e:	5cd3      	ldrb	r3, [r2, r3]
    74a0:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Calculate the remaining time from the elapsed time*/
        /* Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs can
        change the logical channel state between the checking of logical channel state
        and timestamps retrieval*/
        returnValue = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    74a4:	4a2d      	ldr	r2, [pc, #180]	; (755c <Gpt_GetTimeRemaining+0xec>)
    74a6:	9b05      	ldr	r3, [sp, #20]
    74a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74ac:	6859      	ldr	r1, [r3, #4]
    74ae:	f89d 2013 	ldrb.w	r2, [sp, #19]
    74b2:	4613      	mov	r3, r2
    74b4:	005b      	lsls	r3, r3, #1
    74b6:	4413      	add	r3, r2
    74b8:	00db      	lsls	r3, r3, #3
    74ba:	440b      	add	r3, r1
    74bc:	3314      	adds	r3, #20
    74be:	681b      	ldr	r3, [r3, #0]
    74c0:	9906      	ldr	r1, [sp, #24]
    74c2:	4618      	mov	r0, r3
    74c4:	f000 fc57 	bl	7d76 <Gpt_Ipw_GetTimeElapsed>
    74c8:	9007      	str	r0, [sp, #28]

        /*Check the channel status*/
        switch(Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    74ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
    74ce:	4924      	ldr	r1, [pc, #144]	; (7560 <Gpt_GetTimeRemaining+0xf0>)
    74d0:	9b05      	ldr	r3, [sp, #20]
    74d2:	4413      	add	r3, r2
    74d4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    74d8:	3b01      	subs	r3, #1
    74da:	2b03      	cmp	r3, #3
    74dc:	d837      	bhi.n	754e <Gpt_GetTimeRemaining+0xde>
    74de:	a201      	add	r2, pc, #4	; (adr r2, 74e4 <Gpt_GetTimeRemaining+0x74>)
    74e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    74e4:	0000752d 	.word	0x0000752d
    74e8:	00007533 	.word	0x00007533
    74ec:	00007549 	.word	0x00007549
    74f0:	000074f5 	.word	0x000074f5
        {
            case GPT_STATUS_RUNNING:
            {
                /*Check if channel counter has already roll-over*/
                if((TRUE == returnHwChannelInfo.bChannelRollover) && \
    74f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    74f8:	2b00      	cmp	r3, #0
    74fa:	d012      	beq.n	7522 <Gpt_GetTimeRemaining+0xb2>
                   (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    74fc:	4a17      	ldr	r2, [pc, #92]	; (755c <Gpt_GetTimeRemaining+0xec>)
    74fe:	9b05      	ldr	r3, [sp, #20]
    7500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7504:	6859      	ldr	r1, [r3, #4]
    7506:	f89d 2013 	ldrb.w	r2, [sp, #19]
    750a:	4613      	mov	r3, r2
    750c:	005b      	lsls	r3, r3, #1
    750e:	4413      	add	r3, r2
    7510:	00db      	lsls	r3, r3, #3
    7512:	440b      	add	r3, r1
    7514:	3310      	adds	r3, #16
    7516:	681b      	ldr	r3, [r3, #0]
                if((TRUE == returnHwChannelInfo.bChannelRollover) && \
    7518:	2b01      	cmp	r3, #1
    751a:	d102      	bne.n	7522 <Gpt_GetTimeRemaining+0xb2>
                  )
                {
                    /*The timer has already expired.The hardware timer status is not yet
                    synchronized with the logical timer status*/
                    returnValue = 0U;
    751c:	2300      	movs	r3, #0
    751e:	9307      	str	r3, [sp, #28]
                {
                    /*Calculate remaining time from elapsed time*/
                    returnValue = returnHwChannelInfo.uTargetTime - returnValue;
                }
            }
            break;
    7520:	e016      	b.n	7550 <Gpt_GetTimeRemaining+0xe0>
                    returnValue = returnHwChannelInfo.uTargetTime - returnValue;
    7522:	9a03      	ldr	r2, [sp, #12]
    7524:	9b07      	ldr	r3, [sp, #28]
    7526:	1ad3      	subs	r3, r2, r3
    7528:	9307      	str	r3, [sp, #28]
            break;
    752a:	e011      	b.n	7550 <Gpt_GetTimeRemaining+0xe0>
            case GPT_STATUS_INITIALIZED:
            {
                returnValue = 0U;
    752c:	2300      	movs	r3, #0
    752e:	9307      	str	r3, [sp, #28]
            }
            break;
    7530:	e00e      	b.n	7550 <Gpt_GetTimeRemaining+0xe0>
            case GPT_STATUS_STOPPED:
            {
                returnValue = returnHwChannelInfo.uTargetTime-Gpt_aStopTime[coreID][channel];
    7532:	9a03      	ldr	r2, [sp, #12]
    7534:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7538:	480a      	ldr	r0, [pc, #40]	; (7564 <Gpt_GetTimeRemaining+0xf4>)
    753a:	9b05      	ldr	r3, [sp, #20]
    753c:	440b      	add	r3, r1
    753e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    7542:	1ad3      	subs	r3, r2, r3
    7544:	9307      	str	r3, [sp, #28]
            }
            break;
    7546:	e003      	b.n	7550 <Gpt_GetTimeRemaining+0xe0>
            case GPT_STATUS_EXPIRED:
            {
                returnValue = 0U;
    7548:	2300      	movs	r3, #0
    754a:	9307      	str	r3, [sp, #28]
            }
            break;
    754c:	e000      	b.n	7550 <Gpt_GetTimeRemaining+0xe0>
            default:
                /*Only the above four channel states are allowed when this function is called*/
                break;
    754e:	bf00      	nop
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif

    return returnValue;
    7550:	9b07      	ldr	r3, [sp, #28]
}
    7552:	4618      	mov	r0, r3
    7554:	b009      	add	sp, #36	; 0x24
    7556:	f85d fb04 	ldr.w	pc, [sp], #4
    755a:	bf00      	nop
    755c:	1fff8fac 	.word	0x1fff8fac
    7560:	1fff8fb0 	.word	0x1fff8fb0
    7564:	1fff8fb8 	.word	0x1fff8fb8

00007568 <Gpt_StartTimer>:
void Gpt_StartTimer
(
    Gpt_ChannelType channel,
    Gpt_ValueType value
)
{
    7568:	b500      	push	{lr}
    756a:	b085      	sub	sp, #20
    756c:	4603      	mov	r3, r0
    756e:	9100      	str	r1, [sp, #0]
    7570:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    Std_ReturnType returnValue;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7574:	2300      	movs	r3, #0
    7576:	9303      	str	r3, [sp, #12]

    if ((Std_ReturnType)E_OK == Gpt_ValidateChannelStatus(GPT_STARTTIMER_ID, channel, coreID))
    7578:	f89d 3007 	ldrb.w	r3, [sp, #7]
    757c:	9a03      	ldr	r2, [sp, #12]
    757e:	4619      	mov	r1, r3
    7580:	2005      	movs	r0, #5
    7582:	f7ff fc2d 	bl	6de0 <Gpt_ValidateChannelStatus>
    7586:	4603      	mov	r3, r0
    7588:	2b00      	cmp	r3, #0
    758a:	d152      	bne.n	7632 <Gpt_StartTimer+0xca>
    {
#if (GPT_VALIDATE_PARAM  == STD_ON)
        if ((Std_ReturnType)E_OK == Gpt_ValidateParamValue(GPT_STARTTIMER_ID, channel, value, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    758c:	4a2b      	ldr	r2, [pc, #172]	; (763c <Gpt_StartTimer+0xd4>)
    758e:	9b03      	ldr	r3, [sp, #12]
    7590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7594:	695a      	ldr	r2, [r3, #20]
    7596:	f89d 3007 	ldrb.w	r3, [sp, #7]
    759a:	5cd3      	ldrb	r3, [r2, r3]
    759c:	f88d 300b 	strb.w	r3, [sp, #11]
            /*Enable hardware interrupts for the one-shot mode to set the status of  channel*/
            if (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    75a0:	4a26      	ldr	r2, [pc, #152]	; (763c <Gpt_StartTimer+0xd4>)
    75a2:	9b03      	ldr	r3, [sp, #12]
    75a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75a8:	6859      	ldr	r1, [r3, #4]
    75aa:	f89d 200b 	ldrb.w	r2, [sp, #11]
    75ae:	4613      	mov	r3, r2
    75b0:	005b      	lsls	r3, r3, #1
    75b2:	4413      	add	r3, r2
    75b4:	00db      	lsls	r3, r3, #3
    75b6:	440b      	add	r3, r1
    75b8:	3310      	adds	r3, #16
    75ba:	681b      	ldr	r3, [r3, #0]
    75bc:	2b01      	cmp	r3, #1
    75be:	d110      	bne.n	75e2 <Gpt_StartTimer+0x7a>
            {
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    75c0:	4a1e      	ldr	r2, [pc, #120]	; (763c <Gpt_StartTimer+0xd4>)
    75c2:	9b03      	ldr	r3, [sp, #12]
    75c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75c8:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    75ca:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    75ce:	4613      	mov	r3, r2
    75d0:	005b      	lsls	r3, r3, #1
    75d2:	4413      	add	r3, r2
    75d4:	00db      	lsls	r3, r3, #3
    75d6:	440b      	add	r3, r1
    75d8:	3314      	adds	r3, #20
    75da:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    75dc:	4618      	mov	r0, r3
    75de:	f000 fbf5 	bl	7dcc <Gpt_Ipw_EnableInterrupt>
                );
            }

            /* Change GPT channel status.Channel status change shall be made before to start
            the hardware in order to not change the channel status from EXPIRED to RUNNING*/
            Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_RUNNING;
    75e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    75e6:	4916      	ldr	r1, [pc, #88]	; (7640 <Gpt_StartTimer+0xd8>)
    75e8:	9b03      	ldr	r3, [sp, #12]
    75ea:	4413      	add	r3, r2
    75ec:	2204      	movs	r2, #4
    75ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

            /* Call low level API */
            returnValue = Gpt_Ipw_StartTimer(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig),value);
    75f2:	4a12      	ldr	r2, [pc, #72]	; (763c <Gpt_StartTimer+0xd4>)
    75f4:	9b03      	ldr	r3, [sp, #12]
    75f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75fa:	6859      	ldr	r1, [r3, #4]
    75fc:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7600:	4613      	mov	r3, r2
    7602:	005b      	lsls	r3, r3, #1
    7604:	4413      	add	r3, r2
    7606:	00db      	lsls	r3, r3, #3
    7608:	440b      	add	r3, r1
    760a:	3314      	adds	r3, #20
    760c:	681b      	ldr	r3, [r3, #0]
    760e:	9900      	ldr	r1, [sp, #0]
    7610:	4618      	mov	r0, r3
    7612:	f000 fb91 	bl	7d38 <Gpt_Ipw_StartTimer>
    7616:	4603      	mov	r3, r0
    7618:	f88d 300a 	strb.w	r3, [sp, #10]

            if((Std_ReturnType)E_OK != returnValue)
    761c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7620:	2b00      	cmp	r3, #0
    7622:	d006      	beq.n	7632 <Gpt_StartTimer+0xca>
            {
                (void)Det_ReportRuntimeError\
    7624:	232b      	movs	r3, #43	; 0x2b
    7626:	2205      	movs	r2, #5
    7628:	2100      	movs	r1, #0
    762a:	2064      	movs	r0, #100	; 0x64
    762c:	f004 f81e 	bl	b66c <Det_ReportRuntimeError>
            }
#if (GPT_VALIDATE_PARAM  == STD_ON)
        }
#endif
    }
    return;
    7630:	bf00      	nop
    7632:	bf00      	nop
}
    7634:	b005      	add	sp, #20
    7636:	f85d fb04 	ldr.w	pc, [sp], #4
    763a:	bf00      	nop
    763c:	1fff8fac 	.word	0x1fff8fac
    7640:	1fff8fb0 	.word	0x1fff8fb0

00007644 <Gpt_StopTimer>:
*
* @pre          The driver needs to be initialized. Gpt_StartTimer must be called before.
* @implements   Gpt_StopTimer_Activity
*/
void Gpt_StopTimer(Gpt_ChannelType channel)
{
    7644:	b500      	push	{lr}
    7646:	b089      	sub	sp, #36	; 0x24
    7648:	4603      	mov	r3, r0
    764a:	f88d 3007 	strb.w	r3, [sp, #7]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    764e:	2300      	movs	r3, #0
    7650:	f88d 3008 	strb.w	r3, [sp, #8]
    7654:	2300      	movs	r3, #0
    7656:	9303      	str	r3, [sp, #12]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    7658:	ab02      	add	r3, sp, #8
    765a:	9307      	str	r3, [sp, #28]
    Gpt_ValueType uElapsedTime = 0U;
    765c:	2300      	movs	r3, #0
    765e:	9306      	str	r3, [sp, #24]
#endif
    Gpt_ChannelType ChannelIndex;

    uint32 coreID = (uint32)Gpt_GetCoreID();
    7660:	2300      	movs	r3, #0
    7662:	9305      	str	r3, [sp, #20]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(GPT_STOPTIMER_ID, channel, coreID))
    {
#endif
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7664:	4a34      	ldr	r2, [pc, #208]	; (7738 <Gpt_StopTimer+0xf4>)
    7666:	9b05      	ldr	r3, [sp, #20]
    7668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    766c:	695a      	ldr	r2, [r3, #20]
    766e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7672:	5cd3      	ldrb	r3, [r2, r3]
    7674:	f88d 3013 	strb.w	r3, [sp, #19]
        /*Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs can change
        the logical channel state between the checking of logical channel state and timestamps
        retrieval*/
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
        /* Get the elapsed  time  for later use by other API calls*/
        uElapsedTime = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    7678:	4a2f      	ldr	r2, [pc, #188]	; (7738 <Gpt_StopTimer+0xf4>)
    767a:	9b05      	ldr	r3, [sp, #20]
    767c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7680:	6859      	ldr	r1, [r3, #4]
    7682:	f89d 2013 	ldrb.w	r2, [sp, #19]
    7686:	4613      	mov	r3, r2
    7688:	005b      	lsls	r3, r3, #1
    768a:	4413      	add	r3, r2
    768c:	00db      	lsls	r3, r3, #3
    768e:	440b      	add	r3, r1
    7690:	3314      	adds	r3, #20
    7692:	681b      	ldr	r3, [r3, #0]
    7694:	9907      	ldr	r1, [sp, #28]
    7696:	4618      	mov	r0, r3
    7698:	f000 fb6d 	bl	7d76 <Gpt_Ipw_GetTimeElapsed>
    769c:	9006      	str	r0, [sp, #24]
#endif

        /*Check the logical channel status*/
        if (GPT_STATUS_RUNNING == Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    769e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    76a2:	4926      	ldr	r1, [pc, #152]	; (773c <Gpt_StopTimer+0xf8>)
    76a4:	9b05      	ldr	r3, [sp, #20]
    76a6:	4413      	add	r3, r2
    76a8:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    76ac:	2b04      	cmp	r3, #4
    76ae:	d13e      	bne.n	772e <Gpt_StopTimer+0xea>
        {
            /* Call low level stop timer */
            Gpt_Ipw_StopTimer(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    76b0:	4a21      	ldr	r2, [pc, #132]	; (7738 <Gpt_StopTimer+0xf4>)
    76b2:	9b05      	ldr	r3, [sp, #20]
    76b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76b8:	6859      	ldr	r1, [r3, #4]
    76ba:	f89d 2013 	ldrb.w	r2, [sp, #19]
    76be:	4613      	mov	r3, r2
    76c0:	005b      	lsls	r3, r3, #1
    76c2:	4413      	add	r3, r2
    76c4:	00db      	lsls	r3, r3, #3
    76c6:	440b      	add	r3, r1
    76c8:	3314      	adds	r3, #20
    76ca:	681b      	ldr	r3, [r3, #0]
    76cc:	4618      	mov	r0, r3
    76ce:	f000 fb68 	bl	7da2 <Gpt_Ipw_StopTimer>

            if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    76d2:	f89d 3008 	ldrb.w	r3, [sp, #8]
    76d6:	2b00      	cmp	r3, #0
    76d8:	d018      	beq.n	770c <Gpt_StopTimer+0xc8>
                (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    76da:	4a17      	ldr	r2, [pc, #92]	; (7738 <Gpt_StopTimer+0xf4>)
    76dc:	9b05      	ldr	r3, [sp, #20]
    76de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76e2:	6859      	ldr	r1, [r3, #4]
    76e4:	f89d 2013 	ldrb.w	r2, [sp, #19]
    76e8:	4613      	mov	r3, r2
    76ea:	005b      	lsls	r3, r3, #1
    76ec:	4413      	add	r3, r2
    76ee:	00db      	lsls	r3, r3, #3
    76f0:	440b      	add	r3, r1
    76f2:	3310      	adds	r3, #16
    76f4:	681b      	ldr	r3, [r3, #0]
            if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    76f6:	2b01      	cmp	r3, #1
    76f8:	d108      	bne.n	770c <Gpt_StopTimer+0xc8>
            )
            {
                /*This action could be executed only when the function is called during a critical
                section implemented by disabling all interrupts*/
                /*Set channel status to EXPIRED*/
                Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_EXPIRED;
    76fa:	f89d 2007 	ldrb.w	r2, [sp, #7]
    76fe:	490f      	ldr	r1, [pc, #60]	; (773c <Gpt_StopTimer+0xf8>)
    7700:	9b05      	ldr	r3, [sp, #20]
    7702:	4413      	add	r3, r2
    7704:	2203      	movs	r2, #3
    7706:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    770a:	e00f      	b.n	772c <Gpt_StopTimer+0xe8>
            }
            else
            {
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                /* Store the stopping time for later use by other API calls*/
                Gpt_aStopTime[coreID][channel] = uElapsedTime;
    770c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7710:	490b      	ldr	r1, [pc, #44]	; (7740 <Gpt_StopTimer+0xfc>)
    7712:	9b05      	ldr	r3, [sp, #20]
    7714:	4413      	add	r3, r2
    7716:	9a06      	ldr	r2, [sp, #24]
    7718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

                /* Set GPT channel status to stopped*/
                Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_STOPPED;
    771c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7720:	4906      	ldr	r1, [pc, #24]	; (773c <Gpt_StopTimer+0xf8>)
    7722:	9b05      	ldr	r3, [sp, #20]
    7724:	4413      	add	r3, r2
    7726:	2202      	movs	r2, #2
    7728:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            }
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
    return;
    772c:	bf00      	nop
    772e:	bf00      	nop
}
    7730:	b009      	add	sp, #36	; 0x24
    7732:	f85d fb04 	ldr.w	pc, [sp], #4
    7736:	bf00      	nop
    7738:	1fff8fac 	.word	0x1fff8fac
    773c:	1fff8fb0 	.word	0x1fff8fb0
    7740:	1fff8fb8 	.word	0x1fff8fb8

00007744 <Gpt_EnableNotification>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_EnableNotification_Activity
*/
void Gpt_EnableNotification(Gpt_ChannelType channel)
{
    7744:	b500      	push	{lr}
    7746:	b085      	sub	sp, #20
    7748:	4603      	mov	r3, r0
    774a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    774e:	2300      	movs	r3, #0
    7750:	9303      	str	r3, [sp, #12]
#endif
#if (GPT_VALIDATE_PARAM == STD_ON)
        if ((Std_ReturnType)E_OK == Gpt_ValidateChannelNotification(GPT_ENABLENOTIFICATION_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7752:	4a17      	ldr	r2, [pc, #92]	; (77b0 <Gpt_EnableNotification+0x6c>)
    7754:	9b03      	ldr	r3, [sp, #12]
    7756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    775a:	695a      	ldr	r2, [r3, #20]
    775c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7760:	5cd3      	ldrb	r3, [r2, r3]
    7762:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Set the enable notification attribute */
            Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = TRUE;
    7766:	f89d 2007 	ldrb.w	r2, [sp, #7]
    776a:	4912      	ldr	r1, [pc, #72]	; (77b4 <Gpt_EnableNotification+0x70>)
    776c:	9b03      	ldr	r3, [sp, #12]
    776e:	4413      	add	r3, r2
    7770:	00db      	lsls	r3, r3, #3
    7772:	440b      	add	r3, r1
    7774:	2201      	movs	r2, #1
    7776:	711a      	strb	r2, [r3, #4]

            if (GPT_MODE_NORMAL == Gpt_eMode[coreID])
    7778:	4a0f      	ldr	r2, [pc, #60]	; (77b8 <Gpt_EnableNotification+0x74>)
    777a:	9b03      	ldr	r3, [sp, #12]
    777c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7780:	2b00      	cmp	r3, #0
    7782:	d111      	bne.n	77a8 <Gpt_EnableNotification+0x64>
            {
                /*Enable hardware interrupts*/
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7784:	4a0a      	ldr	r2, [pc, #40]	; (77b0 <Gpt_EnableNotification+0x6c>)
    7786:	9b03      	ldr	r3, [sp, #12]
    7788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    778c:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    778e:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7792:	4613      	mov	r3, r2
    7794:	005b      	lsls	r3, r3, #1
    7796:	4413      	add	r3, r2
    7798:	00db      	lsls	r3, r3, #3
    779a:	440b      	add	r3, r1
    779c:	3314      	adds	r3, #20
    779e:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    77a0:	4618      	mov	r0, r3
    77a2:	f000 fb13 	bl	7dcc <Gpt_Ipw_EnableInterrupt>
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif

    return;
    77a6:	bf00      	nop
    77a8:	bf00      	nop
}
    77aa:	b005      	add	sp, #20
    77ac:	f85d fb04 	ldr.w	pc, [sp], #4
    77b0:	1fff8fac 	.word	0x1fff8fac
    77b4:	1fff8fb0 	.word	0x1fff8fb0
    77b8:	1fff8fa8 	.word	0x1fff8fa8

000077bc <Gpt_DisableNotification>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_DisableNotification_Activity
*/
void Gpt_DisableNotification(Gpt_ChannelType channel)
{
    77bc:	b500      	push	{lr}
    77be:	b085      	sub	sp, #20
    77c0:	4603      	mov	r3, r0
    77c2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    77c6:	2300      	movs	r3, #0
    77c8:	9303      	str	r3, [sp, #12]
#endif
#if (GPT_VALIDATE_PARAM == STD_ON)
        if ((Std_ReturnType)E_OK == Gpt_ValidateChannelNotification(GPT_DISABLENOTIFICATION_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    77ca:	4a24      	ldr	r2, [pc, #144]	; (785c <Gpt_DisableNotification+0xa0>)
    77cc:	9b03      	ldr	r3, [sp, #12]
    77ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77d2:	695a      	ldr	r2, [r3, #20]
    77d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77d8:	5cd3      	ldrb	r3, [r2, r3]
    77da:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Set the enable notification attribute */
            Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = FALSE;
    77de:	f89d 2007 	ldrb.w	r2, [sp, #7]
    77e2:	491f      	ldr	r1, [pc, #124]	; (7860 <Gpt_DisableNotification+0xa4>)
    77e4:	9b03      	ldr	r3, [sp, #12]
    77e6:	4413      	add	r3, r2
    77e8:	00db      	lsls	r3, r3, #3
    77ea:	440b      	add	r3, r1
    77ec:	2200      	movs	r2, #0
    77ee:	711a      	strb	r2, [r3, #4]

            /* Disable hardware interrupts if the channel is not running in the ONE-SHOT mode.
            This is needed because the channel state is updated by ISR for ONE-SHOT mode */
            if ((GPT_MODE_NORMAL == Gpt_eMode[coreID]) && \
    77f0:	4a1c      	ldr	r2, [pc, #112]	; (7864 <Gpt_DisableNotification+0xa8>)
    77f2:	9b03      	ldr	r3, [sp, #12]
    77f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77f8:	2b00      	cmp	r3, #0
    77fa:	d12a      	bne.n	7852 <Gpt_DisableNotification+0x96>
                ((GPT_CH_MODE_CONTINUOUS == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode) \
    77fc:	4a17      	ldr	r2, [pc, #92]	; (785c <Gpt_DisableNotification+0xa0>)
    77fe:	9b03      	ldr	r3, [sp, #12]
    7800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7804:	6859      	ldr	r1, [r3, #4]
    7806:	f89d 200b 	ldrb.w	r2, [sp, #11]
    780a:	4613      	mov	r3, r2
    780c:	005b      	lsls	r3, r3, #1
    780e:	4413      	add	r3, r2
    7810:	00db      	lsls	r3, r3, #3
    7812:	440b      	add	r3, r1
    7814:	3310      	adds	r3, #16
    7816:	681b      	ldr	r3, [r3, #0]
            if ((GPT_MODE_NORMAL == Gpt_eMode[coreID]) && \
    7818:	2b00      	cmp	r3, #0
    781a:	d008      	beq.n	782e <Gpt_DisableNotification+0x72>
                 || (GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    781c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7820:	490f      	ldr	r1, [pc, #60]	; (7860 <Gpt_DisableNotification+0xa4>)
    7822:	9b03      	ldr	r3, [sp, #12]
    7824:	4413      	add	r3, r2
    7826:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    782a:	2b04      	cmp	r3, #4
    782c:	d011      	beq.n	7852 <Gpt_DisableNotification+0x96>
               )
            {
                /*Disable hardware interrupts*/
                Gpt_Ipw_DisableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    782e:	4a0b      	ldr	r2, [pc, #44]	; (785c <Gpt_DisableNotification+0xa0>)
    7830:	9b03      	ldr	r3, [sp, #12]
    7832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7836:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_DisableInterrupt
    7838:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    783c:	4613      	mov	r3, r2
    783e:	005b      	lsls	r3, r3, #1
    7840:	4413      	add	r3, r2
    7842:	00db      	lsls	r3, r3, #3
    7844:	440b      	add	r3, r1
    7846:	3314      	adds	r3, #20
    7848:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_DisableInterrupt
    784a:	4618      	mov	r0, r3
    784c:	f000 fad9 	bl	7e02 <Gpt_Ipw_DisableInterrupt>
        }
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
    return;
    7850:	bf00      	nop
    7852:	bf00      	nop
}
    7854:	b005      	add	sp, #20
    7856:	f85d fb04 	ldr.w	pc, [sp], #4
    785a:	bf00      	nop
    785c:	1fff8fac 	.word	0x1fff8fac
    7860:	1fff8fb0 	.word	0x1fff8fb0
    7864:	1fff8fa8 	.word	0x1fff8fa8

00007868 <Gpt_SetMode>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_SetMode_Activity
*/
void Gpt_SetMode(Gpt_ModeType Mode)
{
    7868:	b500      	push	{lr}
    786a:	b085      	sub	sp, #20
    786c:	9001      	str	r0, [sp, #4]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_OFF)
    (void)Mode;
#endif

#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint32 coreID = (uint32)Gpt_GetCoreID();
    786e:	2300      	movs	r3, #0
    7870:	9303      	str	r3, [sp, #12]
        /*Validate the driver calling context*/
        if((Std_ReturnType)E_OK == Gpt_ValidateParamMode(Mode))
        {
#endif
            /*Implements the behaviour for the sleep mode */
            if(GPT_MODE_SLEEP == Mode)
    7872:	9b01      	ldr	r3, [sp, #4]
    7874:	2b01      	cmp	r3, #1
    7876:	d10f      	bne.n	7898 <Gpt_SetMode+0x30>
            {
                /* Check channel has wakeup enabled at runtime */
                Gpt_CheckStatusWakeupEnabled(coreID);
    7878:	9803      	ldr	r0, [sp, #12]
    787a:	f7ff fb99 	bl	6fb0 <Gpt_CheckStatusWakeupEnabled>

#if(GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON)
                /* De-initialize and Stop Predef Timers. */
                Gpt_Ipw_StopPredefTimer(Gpt_pConfig[coreID]);
    787e:	4a15      	ldr	r2, [pc, #84]	; (78d4 <Gpt_SetMode+0x6c>)
    7880:	9b03      	ldr	r3, [sp, #12]
    7882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7886:	4618      	mov	r0, r3
    7888:	f000 fb36 	bl	7ef8 <Gpt_Ipw_StopPredefTimer>
#endif
#if (((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON)) || \
     (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON) || \
     (GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON))
                /* Set the driver mode to sleep */
                Gpt_eMode[coreID] = GPT_MODE_SLEEP;
    788c:	4a12      	ldr	r2, [pc, #72]	; (78d8 <Gpt_SetMode+0x70>)
    788e:	9b03      	ldr	r3, [sp, #12]
    7890:	2101      	movs	r1, #1
    7892:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif

#endif /*GPT_REPORT_WAKEUP_SOURCE*/
    return;
    7896:	e018      	b.n	78ca <Gpt_SetMode+0x62>
            else if (GPT_MODE_NORMAL == Mode)
    7898:	9b01      	ldr	r3, [sp, #4]
    789a:	2b00      	cmp	r3, #0
    789c:	d115      	bne.n	78ca <Gpt_SetMode+0x62>
                   if ((Gpt_ModeType)GPT_MODE_SLEEP == Gpt_eMode[coreID])
    789e:	4a0e      	ldr	r2, [pc, #56]	; (78d8 <Gpt_SetMode+0x70>)
    78a0:	9b03      	ldr	r3, [sp, #12]
    78a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78a6:	2b01      	cmp	r3, #1
    78a8:	d106      	bne.n	78b8 <Gpt_SetMode+0x50>
                   Gpt_Ipw_StartPredefTimer(Gpt_pConfig[coreID]);
    78aa:	4a0a      	ldr	r2, [pc, #40]	; (78d4 <Gpt_SetMode+0x6c>)
    78ac:	9b03      	ldr	r3, [sp, #12]
    78ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78b2:	4618      	mov	r0, r3
    78b4:	f000 faae 	bl	7e14 <Gpt_Ipw_StartPredefTimer>
                Gpt_CheckStatusNotificationEnabled(coreID);
    78b8:	9803      	ldr	r0, [sp, #12]
    78ba:	f7ff fb07 	bl	6ecc <Gpt_CheckStatusNotificationEnabled>
                Gpt_eMode[coreID] = GPT_MODE_NORMAL;
    78be:	4a06      	ldr	r2, [pc, #24]	; (78d8 <Gpt_SetMode+0x70>)
    78c0:	9b03      	ldr	r3, [sp, #12]
    78c2:	2100      	movs	r1, #0
    78c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return;
    78c8:	bf00      	nop
    78ca:	bf00      	nop
}
    78cc:	b005      	add	sp, #20
    78ce:	f85d fb04 	ldr.w	pc, [sp], #4
    78d2:	bf00      	nop
    78d4:	1fff8fac 	.word	0x1fff8fac
    78d8:	1fff8fa8 	.word	0x1fff8fa8

000078dc <Gpt_DisableWakeup>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_DisableWakeup_Activity
*/
void Gpt_DisableWakeup(Gpt_ChannelType channel)
{
    78dc:	b500      	push	{lr}
    78de:	b085      	sub	sp, #20
    78e0:	4603      	mov	r3, r0
    78e2:	f88d 3007 	strb.w	r3, [sp, #7]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    78e6:	2300      	movs	r3, #0
    78e8:	9303      	str	r3, [sp, #12]

#if (GPT_VALIDATE_PARAM == STD_ON)
        if((Std_ReturnType)E_OK == Gpt_ValidateChannelWakeup(GPT_DISABLEWAKEUP_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    78ea:	4a24      	ldr	r2, [pc, #144]	; (797c <Gpt_DisableWakeup+0xa0>)
    78ec:	9b03      	ldr	r3, [sp, #12]
    78ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78f2:	695a      	ldr	r2, [r3, #20]
    78f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78f8:	5cd3      	ldrb	r3, [r2, r3]
    78fa:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Set the enable wakeup attribute */
            Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = FALSE;
    78fe:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7902:	491f      	ldr	r1, [pc, #124]	; (7980 <Gpt_DisableWakeup+0xa4>)
    7904:	9b03      	ldr	r3, [sp, #12]
    7906:	4413      	add	r3, r2
    7908:	00db      	lsls	r3, r3, #3
    790a:	440b      	add	r3, r1
    790c:	2200      	movs	r2, #0
    790e:	715a      	strb	r2, [r3, #5]

            /* Disable hardware interrupts if the channel is not running in the ONE-SHOT mode.
            This is needed because the channel state is updated by ISR for ONE-SHOT mode */
            if ((GPT_MODE_SLEEP == Gpt_eMode[coreID]) && \
    7910:	4a1c      	ldr	r2, [pc, #112]	; (7984 <Gpt_DisableWakeup+0xa8>)
    7912:	9b03      	ldr	r3, [sp, #12]
    7914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7918:	2b01      	cmp	r3, #1
    791a:	d12a      	bne.n	7972 <Gpt_DisableWakeup+0x96>
                ((GPT_CH_MODE_CONTINUOUS == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    791c:	4a17      	ldr	r2, [pc, #92]	; (797c <Gpt_DisableWakeup+0xa0>)
    791e:	9b03      	ldr	r3, [sp, #12]
    7920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7924:	6859      	ldr	r1, [r3, #4]
    7926:	f89d 200b 	ldrb.w	r2, [sp, #11]
    792a:	4613      	mov	r3, r2
    792c:	005b      	lsls	r3, r3, #1
    792e:	4413      	add	r3, r2
    7930:	00db      	lsls	r3, r3, #3
    7932:	440b      	add	r3, r1
    7934:	3310      	adds	r3, #16
    7936:	681b      	ldr	r3, [r3, #0]
            if ((GPT_MODE_SLEEP == Gpt_eMode[coreID]) && \
    7938:	2b00      	cmp	r3, #0
    793a:	d008      	beq.n	794e <Gpt_DisableWakeup+0x72>
                 || (GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    793c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7940:	490f      	ldr	r1, [pc, #60]	; (7980 <Gpt_DisableWakeup+0xa4>)
    7942:	9b03      	ldr	r3, [sp, #12]
    7944:	4413      	add	r3, r2
    7946:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    794a:	2b04      	cmp	r3, #4
    794c:	d011      	beq.n	7972 <Gpt_DisableWakeup+0x96>
               )
            {
                /*Disable hardware interrupts*/
                Gpt_Ipw_DisableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    794e:	4a0b      	ldr	r2, [pc, #44]	; (797c <Gpt_DisableWakeup+0xa0>)
    7950:	9b03      	ldr	r3, [sp, #12]
    7952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7956:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_DisableInterrupt
    7958:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    795c:	4613      	mov	r3, r2
    795e:	005b      	lsls	r3, r3, #1
    7960:	4413      	add	r3, r2
    7962:	00db      	lsls	r3, r3, #3
    7964:	440b      	add	r3, r1
    7966:	3314      	adds	r3, #20
    7968:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_DisableInterrupt
    796a:	4618      	mov	r0, r3
    796c:	f000 fa49 	bl	7e02 <Gpt_Ipw_DisableInterrupt>
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
#endif /*GPT_REPORT_WAKEUP_SOURCE*/
    return;
    7970:	bf00      	nop
    7972:	bf00      	nop
}
    7974:	b005      	add	sp, #20
    7976:	f85d fb04 	ldr.w	pc, [sp], #4
    797a:	bf00      	nop
    797c:	1fff8fac 	.word	0x1fff8fac
    7980:	1fff8fb0 	.word	0x1fff8fb0
    7984:	1fff8fa8 	.word	0x1fff8fa8

00007988 <Gpt_EnableWakeup>:
*
* @pre          The driver needs to be initialized. The channel must be configured as wakeup capable.
* @implements   Gpt_EnableWakeup_Activity
*/
void Gpt_EnableWakeup(Gpt_ChannelType channel)
{
    7988:	b500      	push	{lr}
    798a:	b085      	sub	sp, #20
    798c:	4603      	mov	r3, r0
    798e:	f88d 3007 	strb.w	r3, [sp, #7]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7992:	2300      	movs	r3, #0
    7994:	9303      	str	r3, [sp, #12]
#endif
#if (GPT_VALIDATE_PARAM == STD_ON)
        if((Std_ReturnType)E_OK == Gpt_ValidateChannelWakeup(GPT_ENABLEWAKEUP_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7996:	4a17      	ldr	r2, [pc, #92]	; (79f4 <Gpt_EnableWakeup+0x6c>)
    7998:	9b03      	ldr	r3, [sp, #12]
    799a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    799e:	695a      	ldr	r2, [r3, #20]
    79a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    79a4:	5cd3      	ldrb	r3, [r2, r3]
    79a6:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Functionality implementation */
            /* Set the enable wakeup attribute */
            Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = TRUE;
    79aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
    79ae:	4912      	ldr	r1, [pc, #72]	; (79f8 <Gpt_EnableWakeup+0x70>)
    79b0:	9b03      	ldr	r3, [sp, #12]
    79b2:	4413      	add	r3, r2
    79b4:	00db      	lsls	r3, r3, #3
    79b6:	440b      	add	r3, r1
    79b8:	2201      	movs	r2, #1
    79ba:	715a      	strb	r2, [r3, #5]

            if (GPT_MODE_SLEEP == Gpt_eMode[coreID])
    79bc:	4a0f      	ldr	r2, [pc, #60]	; (79fc <Gpt_EnableWakeup+0x74>)
    79be:	9b03      	ldr	r3, [sp, #12]
    79c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79c4:	2b01      	cmp	r3, #1
    79c6:	d111      	bne.n	79ec <Gpt_EnableWakeup+0x64>
            {
                /*Enable hardware interrupts*/
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    79c8:	4a0a      	ldr	r2, [pc, #40]	; (79f4 <Gpt_EnableWakeup+0x6c>)
    79ca:	9b03      	ldr	r3, [sp, #12]
    79cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79d0:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    79d2:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    79d6:	4613      	mov	r3, r2
    79d8:	005b      	lsls	r3, r3, #1
    79da:	4413      	add	r3, r2
    79dc:	00db      	lsls	r3, r3, #3
    79de:	440b      	add	r3, r1
    79e0:	3314      	adds	r3, #20
    79e2:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    79e4:	4618      	mov	r0, r3
    79e6:	f000 f9f1 	bl	7dcc <Gpt_Ipw_EnableInterrupt>
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
#endif /*GPT_REPORT_WAKEUP_SOURCE*/
    return;
    79ea:	bf00      	nop
    79ec:	bf00      	nop
}
    79ee:	b005      	add	sp, #20
    79f0:	f85d fb04 	ldr.w	pc, [sp], #4
    79f4:	1fff8fac 	.word	0x1fff8fac
    79f8:	1fff8fb0 	.word	0x1fff8fb0
    79fc:	1fff8fa8 	.word	0x1fff8fa8

00007a00 <Gpt_CheckWakeup>:
*
* @pre          The driver needs to be initialized. The channel must be configured as wakeup capable.
* @implements   Gpt_CheckWakeup_Activity
*/
void Gpt_CheckWakeup(EcuM_WakeupSourceType wakeupSource)
{
    7a00:	b500      	push	{lr}
    7a02:	b087      	sub	sp, #28
    7a04:	9001      	str	r0, [sp, #4]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7a06:	2300      	movs	r3, #0
    7a08:	9304      	str	r3, [sp, #16]
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    /*Validate the driver calling context*/
    if((Std_ReturnType)E_OK == Gpt_ValidateGlobalCall(GPT_CHECKWAKEUP_ID, coreID))
    {
#endif
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7a0a:	2300      	movs	r3, #0
    7a0c:	f88d 3017 	strb.w	r3, [sp, #23]
    7a10:	e039      	b.n	7a86 <Gpt_CheckWakeup+0x86>
        {
            channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    7a12:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7a16:	9904      	ldr	r1, [sp, #16]
    7a18:	4618      	mov	r0, r3
    7a1a:	f7ff fa2f 	bl	6e7c <Gpt_ConvertChannelIndexToChannel>
    7a1e:	4603      	mov	r3, r0
    7a20:	f88d 300f 	strb.w	r3, [sp, #15]
            if(channel < GPT_HW_CHANNEL_NUM)
    7a24:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7a28:	2b00      	cmp	r3, #0
    7a2a:	d127      	bne.n	7a7c <Gpt_CheckWakeup+0x7c>
            {
                if ((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_uWakeupSource) == wakeupSource) && \
    7a2c:	4a1c      	ldr	r2, [pc, #112]	; (7aa0 <Gpt_CheckWakeup+0xa0>)
    7a2e:	9b04      	ldr	r3, [sp, #16]
    7a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a34:	6859      	ldr	r1, [r3, #4]
    7a36:	f89d 2017 	ldrb.w	r2, [sp, #23]
    7a3a:	4613      	mov	r3, r2
    7a3c:	005b      	lsls	r3, r3, #1
    7a3e:	4413      	add	r3, r2
    7a40:	00db      	lsls	r3, r3, #3
    7a42:	440b      	add	r3, r1
    7a44:	3308      	adds	r3, #8
    7a46:	681b      	ldr	r3, [r3, #0]
    7a48:	9a01      	ldr	r2, [sp, #4]
    7a4a:	429a      	cmp	r2, r3
    7a4c:	d116      	bne.n	7a7c <Gpt_CheckWakeup+0x7c>
                    ((boolean)TRUE == Gpt_aChannelInfo[coreID][channel].bWakeupGenerated)
    7a4e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7a52:	4914      	ldr	r1, [pc, #80]	; (7aa4 <Gpt_CheckWakeup+0xa4>)
    7a54:	9b04      	ldr	r3, [sp, #16]
    7a56:	4413      	add	r3, r2
    7a58:	00db      	lsls	r3, r3, #3
    7a5a:	440b      	add	r3, r1
    7a5c:	799b      	ldrb	r3, [r3, #6]
                if ((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_uWakeupSource) == wakeupSource) && \
    7a5e:	2b00      	cmp	r3, #0
    7a60:	d00c      	beq.n	7a7c <Gpt_CheckWakeup+0x7c>
                    )
                {
                    /*Reset the wakeup flag */
                    Gpt_aChannelInfo[coreID][channel].bWakeupGenerated = FALSE;
    7a62:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7a66:	490f      	ldr	r1, [pc, #60]	; (7aa4 <Gpt_CheckWakeup+0xa4>)
    7a68:	9b04      	ldr	r3, [sp, #16]
    7a6a:	4413      	add	r3, r2
    7a6c:	00db      	lsls	r3, r3, #3
    7a6e:	440b      	add	r3, r1
    7a70:	2200      	movs	r2, #0
    7a72:	719a      	strb	r2, [r3, #6]

                    /* Calling EcuM_SetWakeupEvent and exit*/
                    EcuM_SetWakeupEvent(wakeupSource);
    7a74:	9801      	ldr	r0, [sp, #4]
    7a76:	f000 fa6f 	bl	7f58 <EcuM_SetWakeupEvent>

                    break;
    7a7a:	e00d      	b.n	7a98 <Gpt_CheckWakeup+0x98>
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7a7c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7a80:	3301      	adds	r3, #1
    7a82:	f88d 3017 	strb.w	r3, [sp, #23]
    7a86:	4a06      	ldr	r2, [pc, #24]	; (7aa0 <Gpt_CheckWakeup+0xa0>)
    7a88:	9b04      	ldr	r3, [sp, #16]
    7a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a8e:	781b      	ldrb	r3, [r3, #0]
    7a90:	f89d 2017 	ldrb.w	r2, [sp, #23]
    7a94:	429a      	cmp	r2, r3
    7a96:	d3bc      	bcc.n	7a12 <Gpt_CheckWakeup+0x12>
        }    /*for*/
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
#endif /* GPT_REPORT_WAKEUP_SOURCE */
    return;
    7a98:	bf00      	nop
}
    7a9a:	b007      	add	sp, #28
    7a9c:	f85d fb04 	ldr.w	pc, [sp], #4
    7aa0:	1fff8fac 	.word	0x1fff8fac
    7aa4:	1fff8fb0 	.word	0x1fff8fb0

00007aa8 <Gpt_ProcessCommonInterrupt>:
* @return       void
* @pre          The driver needs to be initialized.
* @implements   Gpt_ProcessCommonInterrupt_Activity
*/
void Gpt_ProcessCommonInterrupt(uint8 channel)
{
    7aa8:	b500      	push	{lr}
    7aaa:	b085      	sub	sp, #20
    7aac:	4603      	mov	r3, r0
    7aae:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7ab2:	2300      	movs	r3, #0
    7ab4:	9303      	str	r3, [sp, #12]

    if (Gpt_pConfig[coreID] != NULL_PTR)
    7ab6:	4a3b      	ldr	r2, [pc, #236]	; (7ba4 <Gpt_ProcessCommonInterrupt+0xfc>)
    7ab8:	9b03      	ldr	r3, [sp, #12]
    7aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7abe:	2b00      	cmp	r3, #0
    7ac0:	d06b      	beq.n	7b9a <Gpt_ProcessCommonInterrupt+0xf2>
    {
        /* Extract the logical channel from the hardware to logic map table */
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7ac2:	4a38      	ldr	r2, [pc, #224]	; (7ba4 <Gpt_ProcessCommonInterrupt+0xfc>)
    7ac4:	9b03      	ldr	r3, [sp, #12]
    7ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7aca:	695a      	ldr	r2, [r3, #20]
    7acc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ad0:	5cd3      	ldrb	r3, [r2, r3]
    7ad2:	f88d 300b 	strb.w	r3, [sp, #11]

        /* Change the channel status for one-shot mode */
        if (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    7ad6:	4a33      	ldr	r2, [pc, #204]	; (7ba4 <Gpt_ProcessCommonInterrupt+0xfc>)
    7ad8:	9b03      	ldr	r3, [sp, #12]
    7ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ade:	6859      	ldr	r1, [r3, #4]
    7ae0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7ae4:	4613      	mov	r3, r2
    7ae6:	005b      	lsls	r3, r3, #1
    7ae8:	4413      	add	r3, r2
    7aea:	00db      	lsls	r3, r3, #3
    7aec:	440b      	add	r3, r1
    7aee:	3310      	adds	r3, #16
    7af0:	681b      	ldr	r3, [r3, #0]
    7af2:	2b01      	cmp	r3, #1
    7af4:	d107      	bne.n	7b06 <Gpt_ProcessCommonInterrupt+0x5e>
        {
            /* Change the channel status to expired */
            Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_EXPIRED;
    7af6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7afa:	492b      	ldr	r1, [pc, #172]	; (7ba8 <Gpt_ProcessCommonInterrupt+0x100>)
    7afc:	9b03      	ldr	r3, [sp, #12]
    7afe:	4413      	add	r3, r2
    7b00:	2203      	movs	r2, #3
    7b02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        }
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
        if ((GPT_MODE_NORMAL == Gpt_eMode[coreID]) && (TRUE == Gpt_aChannelInfo[coreID][channel].bNotificationEnabled))
    7b06:	4a29      	ldr	r2, [pc, #164]	; (7bac <Gpt_ProcessCommonInterrupt+0x104>)
    7b08:	9b03      	ldr	r3, [sp, #12]
    7b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b0e:	2b00      	cmp	r3, #0
    7b10:	d118      	bne.n	7b44 <Gpt_ProcessCommonInterrupt+0x9c>
    7b12:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7b16:	4924      	ldr	r1, [pc, #144]	; (7ba8 <Gpt_ProcessCommonInterrupt+0x100>)
    7b18:	9b03      	ldr	r3, [sp, #12]
    7b1a:	4413      	add	r3, r2
    7b1c:	00db      	lsls	r3, r3, #3
    7b1e:	440b      	add	r3, r1
    7b20:	791b      	ldrb	r3, [r3, #4]
    7b22:	2b00      	cmp	r3, #0
    7b24:	d00e      	beq.n	7b44 <Gpt_ProcessCommonInterrupt+0x9c>
        {
            (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_pfNotification();
    7b26:	4a1f      	ldr	r2, [pc, #124]	; (7ba4 <Gpt_ProcessCommonInterrupt+0xfc>)
    7b28:	9b03      	ldr	r3, [sp, #12]
    7b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b2e:	6859      	ldr	r1, [r3, #4]
    7b30:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7b34:	4613      	mov	r3, r2
    7b36:	005b      	lsls	r3, r3, #1
    7b38:	4413      	add	r3, r2
    7b3a:	00db      	lsls	r3, r3, #3
    7b3c:	440b      	add	r3, r1
    7b3e:	3304      	adds	r3, #4
    7b40:	681b      	ldr	r3, [r3, #0]
    7b42:	4798      	blx	r3
        }
#endif

#if (GPT_WAKEUP_FUNCTIONALITY_API == STD_ON)
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
        if ((GPT_MODE_SLEEP == Gpt_eMode[coreID]) && (TRUE == Gpt_aChannelInfo[coreID][channel].bWakeupEnabled))
    7b44:	4a19      	ldr	r2, [pc, #100]	; (7bac <Gpt_ProcessCommonInterrupt+0x104>)
    7b46:	9b03      	ldr	r3, [sp, #12]
    7b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b4c:	2b01      	cmp	r3, #1
    7b4e:	d124      	bne.n	7b9a <Gpt_ProcessCommonInterrupt+0xf2>
    7b50:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7b54:	4914      	ldr	r1, [pc, #80]	; (7ba8 <Gpt_ProcessCommonInterrupt+0x100>)
    7b56:	9b03      	ldr	r3, [sp, #12]
    7b58:	4413      	add	r3, r2
    7b5a:	00db      	lsls	r3, r3, #3
    7b5c:	440b      	add	r3, r1
    7b5e:	795b      	ldrb	r3, [r3, #5]
    7b60:	2b00      	cmp	r3, #0
    7b62:	d01a      	beq.n	7b9a <Gpt_ProcessCommonInterrupt+0xf2>
        {
            Gpt_aChannelInfo[coreID][channel].bWakeupGenerated =TRUE;
    7b64:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7b68:	490f      	ldr	r1, [pc, #60]	; (7ba8 <Gpt_ProcessCommonInterrupt+0x100>)
    7b6a:	9b03      	ldr	r3, [sp, #12]
    7b6c:	4413      	add	r3, r2
    7b6e:	00db      	lsls	r3, r3, #3
    7b70:	440b      	add	r3, r1
    7b72:	2201      	movs	r2, #1
    7b74:	719a      	strb	r2, [r3, #6]
            EcuM_CheckWakeup((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_uWakeupSource);
    7b76:	4a0b      	ldr	r2, [pc, #44]	; (7ba4 <Gpt_ProcessCommonInterrupt+0xfc>)
    7b78:	9b03      	ldr	r3, [sp, #12]
    7b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b7e:	6859      	ldr	r1, [r3, #4]
    7b80:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7b84:	4613      	mov	r3, r2
    7b86:	005b      	lsls	r3, r3, #1
    7b88:	4413      	add	r3, r2
    7b8a:	00db      	lsls	r3, r3, #3
    7b8c:	440b      	add	r3, r1
    7b8e:	3308      	adds	r3, #8
    7b90:	681b      	ldr	r3, [r3, #0]
    7b92:	4618      	mov	r0, r3
    7b94:	f000 f9ef 	bl	7f76 <EcuM_CheckWakeup>
        }
#endif
#endif
    }
    return;
    7b98:	bf00      	nop
    7b9a:	bf00      	nop
}
    7b9c:	b005      	add	sp, #20
    7b9e:	f85d fb04 	ldr.w	pc, [sp], #4
    7ba2:	bf00      	nop
    7ba4:	1fff8fac 	.word	0x1fff8fac
    7ba8:	1fff8fb0 	.word	0x1fff8fb0
    7bac:	1fff8fa8 	.word	0x1fff8fa8

00007bb0 <Gpt_GetPredefTimerValue>:
Std_ReturnType Gpt_GetPredefTimerValue
(
    Gpt_PredefTimerType PredefTimer,
    uint32 * TimeValuePtr
)
{
    7bb0:	b500      	push	{lr}
    7bb2:	b085      	sub	sp, #20
    7bb4:	9001      	str	r0, [sp, #4]
    7bb6:	9100      	str	r1, [sp, #0]
    Std_ReturnType returnValue;
    Gpt_ChannelType channel;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7bb8:	2300      	movs	r3, #0
    7bba:	9303      	str	r3, [sp, #12]
            returnValue = Gpt_ValidateParamTypePredefTimer(PredefTimer, coreID);
            if((Std_ReturnType)E_OK == returnValue)
            {
#endif

               returnValue = Gpt_ValidateMode(GPT_GET_PREDEF_TIMERVALUE_ID, coreID);
    7bbc:	9903      	ldr	r1, [sp, #12]
    7bbe:	200d      	movs	r0, #13
    7bc0:	f7ff f93a 	bl	6e38 <Gpt_ValidateMode>
    7bc4:	4603      	mov	r3, r0
    7bc6:	f88d 300b 	strb.w	r3, [sp, #11]
               if((Std_ReturnType)E_OK ==returnValue)
    7bca:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7bce:	2b00      	cmp	r3, #0
    7bd0:	d112      	bne.n	7bf8 <Gpt_GetPredefTimerValue+0x48>
               {

                        channel = (Gpt_ChannelType)PredefTimer;
    7bd2:	9b01      	ldr	r3, [sp, #4]
    7bd4:	f88d 300a 	strb.w	r3, [sp, #10]

                        Gpt_Ipw_GetPredefTimerValue((Gpt_pConfig[coreID]->Gpt_pChannelPredefConfigType)[channel], PredefTimer, TimeValuePtr);
    7bd8:	4a0c      	ldr	r2, [pc, #48]	; (7c0c <Gpt_GetPredefTimerValue+0x5c>)
    7bda:	9b03      	ldr	r3, [sp, #12]
    7bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7be0:	691a      	ldr	r2, [r3, #16]
    7be2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7be6:	009b      	lsls	r3, r3, #2
    7be8:	4413      	add	r3, r2
    7bea:	681b      	ldr	r3, [r3, #0]
    7bec:	9a00      	ldr	r2, [sp, #0]
    7bee:	9901      	ldr	r1, [sp, #4]
    7bf0:	4618      	mov	r0, r3
    7bf2:	f000 f943 	bl	7e7c <Gpt_Ipw_GetPredefTimerValue>
    7bf6:	e002      	b.n	7bfe <Gpt_GetPredefTimerValue+0x4e>

               }
               else
               {
                   *TimeValuePtr = 0U;
    7bf8:	9b00      	ldr	r3, [sp, #0]
    7bfa:	2200      	movs	r2, #0
    7bfc:	601a      	str	r2, [r3, #0]
        }
#endif
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
    return returnValue;
    7bfe:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    7c02:	4618      	mov	r0, r3
    7c04:	b005      	add	sp, #20
    7c06:	f85d fb04 	ldr.w	pc, [sp], #4
    7c0a:	bf00      	nop
    7c0c:	1fff8fac 	.word	0x1fff8fac

00007c10 <Ftm_Gpt_Ip_GetChInterruptStatusFlag>:
{
    7c10:	b082      	sub	sp, #8
    7c12:	4603      	mov	r3, r0
    7c14:	460a      	mov	r2, r1
    7c16:	f88d 3007 	strb.w	r3, [sp, #7]
    7c1a:	4613      	mov	r3, r2
    7c1c:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->CONTROLS[channel].CSC & FTM_CSC_CHF_MASK)) ? TRUE : FALSE;
    7c20:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c24:	4a09      	ldr	r2, [pc, #36]	; (7c4c <Ftm_Gpt_Ip_GetChInterruptStatusFlag+0x3c>)
    7c26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7c2a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7c2e:	3301      	adds	r3, #1
    7c30:	00db      	lsls	r3, r3, #3
    7c32:	4413      	add	r3, r2
    7c34:	685b      	ldr	r3, [r3, #4]
    7c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7c3a:	2b00      	cmp	r3, #0
    7c3c:	bf14      	ite	ne
    7c3e:	2301      	movne	r3, #1
    7c40:	2300      	moveq	r3, #0
    7c42:	b2db      	uxtb	r3, r3
}
    7c44:	4618      	mov	r0, r3
    7c46:	b002      	add	sp, #8
    7c48:	4770      	bx	lr
    7c4a:	bf00      	nop
    7c4c:	0000bf08 	.word	0x0000bf08

00007c50 <Ftm_Gpt_Ip_GetCntValue>:
{
    7c50:	b082      	sub	sp, #8
    7c52:	4603      	mov	r3, r0
    7c54:	f88d 3007 	strb.w	r3, [sp, #7]
    return ftmGptBase[instance]->CNT;
    7c58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c5c:	4a03      	ldr	r2, [pc, #12]	; (7c6c <Ftm_Gpt_Ip_GetCntValue+0x1c>)
    7c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c62:	685b      	ldr	r3, [r3, #4]
}
    7c64:	4618      	mov	r0, r3
    7c66:	b002      	add	sp, #8
    7c68:	4770      	bx	lr
    7c6a:	bf00      	nop
    7c6c:	0000bf08 	.word	0x0000bf08

00007c70 <Ftm_Gpt_Ip_GetCompareValue>:
{
    7c70:	b082      	sub	sp, #8
    7c72:	4603      	mov	r3, r0
    7c74:	460a      	mov	r2, r1
    7c76:	f88d 3007 	strb.w	r3, [sp, #7]
    7c7a:	4613      	mov	r3, r2
    7c7c:	f88d 3006 	strb.w	r3, [sp, #6]
    return ftmGptBase[instance]->CONTROLS[channel].CV;
    7c80:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c84:	4a05      	ldr	r2, [pc, #20]	; (7c9c <Ftm_Gpt_Ip_GetCompareValue+0x2c>)
    7c86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7c8a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7c8e:	3301      	adds	r3, #1
    7c90:	00db      	lsls	r3, r3, #3
    7c92:	4413      	add	r3, r2
    7c94:	689b      	ldr	r3, [r3, #8]
}
    7c96:	4618      	mov	r0, r3
    7c98:	b002      	add	sp, #8
    7c9a:	4770      	bx	lr
    7c9c:	0000bf08 	.word	0x0000bf08

00007ca0 <Gpt_Ipw_InitInstances>:
*
* @return       void
* @pre          The driver needs to be initialized.
*/
void Gpt_Ipw_InitInstances(const Gpt_ConfigType * configPtr)
{
    7ca0:	b500      	push	{lr}
    7ca2:	b085      	sub	sp, #20
    7ca4:	9001      	str	r0, [sp, #4]

    uint8 index = 0U;
    7ca6:	2300      	movs	r3, #0
    7ca8:	f88d 300f 	strb.w	r3, [sp, #15]

    for(index = 0; index < configPtr->instanceCount; index++)
    7cac:	2300      	movs	r3, #0
    7cae:	f88d 300f 	strb.w	r3, [sp, #15]
    7cb2:	e022      	b.n	7cfa <Gpt_Ipw_InitInstances+0x5a>
    {
        switch((*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].instanceType)
    7cb4:	9b01      	ldr	r3, [sp, #4]
    7cb6:	68da      	ldr	r2, [r3, #12]
    7cb8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7cbc:	011b      	lsls	r3, r3, #4
    7cbe:	4413      	add	r3, r2
    7cc0:	681b      	ldr	r3, [r3, #0]
    7cc2:	2b00      	cmp	r3, #0
    7cc4:	d113      	bne.n	7cee <Gpt_Ipw_InitInstances+0x4e>
        {
#if (FTM_GPT_IP_USED == STD_ON)
            case(GPT_FTM_MODULE):
            {
                Ftm_Gpt_Ip_Init((*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].instance,
    7cc6:	9b01      	ldr	r3, [sp, #4]
    7cc8:	68da      	ldr	r2, [r3, #12]
    7cca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7cce:	011b      	lsls	r3, r3, #4
    7cd0:	4413      	add	r3, r2
    7cd2:	3304      	adds	r3, #4
    7cd4:	7818      	ldrb	r0, [r3, #0]
                                (*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].Gpt_Ipw_InstanceConfig.Ftm_Gpt_Ip_InstanceConfig);
    7cd6:	9b01      	ldr	r3, [sp, #4]
    7cd8:	68da      	ldr	r2, [r3, #12]
                Ftm_Gpt_Ip_Init((*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].instance,
    7cda:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7cde:	011b      	lsls	r3, r3, #4
    7ce0:	4413      	add	r3, r2
    7ce2:	3308      	adds	r3, #8
    7ce4:	681b      	ldr	r3, [r3, #0]
    7ce6:	4619      	mov	r1, r3
    7ce8:	f7fe fd90 	bl	680c <Ftm_Gpt_Ip_Init>
            }
            break;
    7cec:	e000      	b.n	7cf0 <Gpt_Ipw_InitInstances+0x50>
            break;
#endif

            default:
                /*This switch branch is empty because it shall not be executed for normal behaviour*/
            break;
    7cee:	bf00      	nop
    for(index = 0; index < configPtr->instanceCount; index++)
    7cf0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7cf4:	3301      	adds	r3, #1
    7cf6:	f88d 300f 	strb.w	r3, [sp, #15]
    7cfa:	9b01      	ldr	r3, [sp, #4]
    7cfc:	7a1b      	ldrb	r3, [r3, #8]
    7cfe:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7d02:	429a      	cmp	r2, r3
    7d04:	d3d6      	bcc.n	7cb4 <Gpt_Ipw_InitInstances+0x14>
        }
    }
    return;
    7d06:	bf00      	nop
}
    7d08:	b005      	add	sp, #20
    7d0a:	f85d fb04 	ldr.w	pc, [sp], #4

00007d0e <Gpt_Ipw_Init>:
* @param[in]    pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return       void
* @pre          The driver needs to be initialized.
*/
void Gpt_Ipw_Init(const Gpt_Ipw_HwChannelConfigType *pHwChannelConfig)
{
    7d0e:	b500      	push	{lr}
    7d10:	b083      	sub	sp, #12
    7d12:	9001      	str	r0, [sp, #4]

    switch(pHwChannelConfig->instanceType)
    7d14:	9b01      	ldr	r3, [sp, #4]
    7d16:	681b      	ldr	r3, [r3, #0]
    7d18:	2b00      	cmp	r3, #0
    7d1a:	d108      	bne.n	7d2e <Gpt_Ipw_Init+0x20>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {
            Ftm_Gpt_Ip_InitChannel(pHwChannelConfig->instance,
    7d1c:	9b01      	ldr	r3, [sp, #4]
    7d1e:	791a      	ldrb	r2, [r3, #4]
    7d20:	9b01      	ldr	r3, [sp, #4]
    7d22:	689b      	ldr	r3, [r3, #8]
    7d24:	4619      	mov	r1, r3
    7d26:	4610      	mov	r0, r2
    7d28:	f7fe fdb2 	bl	6890 <Ftm_Gpt_Ip_InitChannel>
                                   pHwChannelConfig->Gpt_Ipw_ChannelConfig.Ftm_Gpt_Ip_ChannelConfig);
        }
        break;
    7d2c:	e000      	b.n	7d30 <Gpt_Ipw_Init+0x22>
        }
            break;
#endif
        default:
            /* This switch branch is empty because it shall not be executed for normal behaviour */
        break;
    7d2e:	bf00      	nop
    }
    return;
    7d30:	bf00      	nop
}
    7d32:	b003      	add	sp, #12
    7d34:	f85d fb04 	ldr.w	pc, [sp], #4

00007d38 <Gpt_Ipw_StartTimer>:
* @param[in]     uValue              Timeout period (in ticks) after which a notification shall occur (if enabled).
* @return        void
* @pre           The driver needs to be initialized.Call Gpt_StartTimer before.
*/
Std_ReturnType Gpt_Ipw_StartTimer(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig, Gpt_ValueType uValue)
{
    7d38:	b500      	push	{lr}
    7d3a:	b085      	sub	sp, #20
    7d3c:	9001      	str	r0, [sp, #4]
    7d3e:	9100      	str	r1, [sp, #0]

    Std_ReturnType returnValue = (Std_ReturnType)E_NOT_OK;
    7d40:	2301      	movs	r3, #1
    7d42:	f88d 300f 	strb.w	r3, [sp, #15]

    switch(pHwChannelConfig->instanceType)
    7d46:	9b01      	ldr	r3, [sp, #4]
    7d48:	681b      	ldr	r3, [r3, #0]
    7d4a:	2b00      	cmp	r3, #0
    7d4c:	d10c      	bne.n	7d68 <Gpt_Ipw_StartTimer+0x30>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
            {
                Ftm_Gpt_Ip_StartCounting(pHwChannelConfig->instance,
    7d4e:	9b01      	ldr	r3, [sp, #4]
    7d50:	7918      	ldrb	r0, [r3, #4]
    7d52:	9b01      	ldr	r3, [sp, #4]
    7d54:	795b      	ldrb	r3, [r3, #5]
    7d56:	9a00      	ldr	r2, [sp, #0]
    7d58:	b292      	uxth	r2, r2
    7d5a:	4619      	mov	r1, r3
    7d5c:	f7fe fe48 	bl	69f0 <Ftm_Gpt_Ip_StartCounting>
                                         pHwChannelConfig->channel,
                                         (uint16)uValue);
                returnValue = (Std_ReturnType)E_OK;
    7d60:	2300      	movs	r3, #0
    7d62:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        break;
    7d66:	e000      	b.n	7d6a <Gpt_Ipw_StartTimer+0x32>
            }
            break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour */
        break;
    7d68:	bf00      	nop
    }

    return returnValue;
    7d6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7d6e:	4618      	mov	r0, r3
    7d70:	b005      	add	sp, #20
    7d72:	f85d fb04 	ldr.w	pc, [sp], #4

00007d76 <Gpt_Ipw_GetTimeElapsed>:
* @pre           The driver needs to be initialized.Call GetTimeElapsed before.
*
*/
Gpt_ValueType Gpt_Ipw_GetTimeElapsed(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig,
                                                      Gpt_HwChannelInfoType * pReturnHwChannelInfo)
{
    7d76:	b500      	push	{lr}
    7d78:	b085      	sub	sp, #20
    7d7a:	9001      	str	r0, [sp, #4]
    7d7c:	9100      	str	r1, [sp, #0]
    uint32 returnValue;

    switch(pHwChannelConfig->instanceType)
    7d7e:	9b01      	ldr	r3, [sp, #4]
    7d80:	681b      	ldr	r3, [r3, #0]
    7d82:	2b00      	cmp	r3, #0
    7d84:	d105      	bne.n	7d92 <Gpt_Ipw_GetTimeElapsed+0x1c>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {
            returnValue = Gpt_Ipw_FtmGetTimeElapsed(pHwChannelConfig, pReturnHwChannelInfo);
    7d86:	9900      	ldr	r1, [sp, #0]
    7d88:	9801      	ldr	r0, [sp, #4]
    7d8a:	f7f8 fdbf 	bl	90c <Gpt_Ipw_FtmGetTimeElapsed>
    7d8e:	9003      	str	r0, [sp, #12]
        }
        break;
    7d90:	e002      	b.n	7d98 <Gpt_Ipw_GetTimeElapsed+0x22>
        break;
#endif

        default:
             /* This switch branch is empty because it shall not be executed for normal behaviour */
             returnValue = 0U;
    7d92:	2300      	movs	r3, #0
    7d94:	9303      	str	r3, [sp, #12]
        break;
    7d96:	bf00      	nop
    }
    return (Gpt_ValueType)returnValue;
    7d98:	9b03      	ldr	r3, [sp, #12]
}
    7d9a:	4618      	mov	r0, r3
    7d9c:	b005      	add	sp, #20
    7d9e:	f85d fb04 	ldr.w	pc, [sp], #4

00007da2 <Gpt_Ipw_StopTimer>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized.Call StopTimer before.
*/
void Gpt_Ipw_StopTimer(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    7da2:	b500      	push	{lr}
    7da4:	b083      	sub	sp, #12
    7da6:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    7da8:	9b01      	ldr	r3, [sp, #4]
    7daa:	681b      	ldr	r3, [r3, #0]
    7dac:	2b00      	cmp	r3, #0
    7dae:	d108      	bne.n	7dc2 <Gpt_Ipw_StopTimer+0x20>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {

            Ftm_Gpt_Ip_DisableChannelInterrupt(pHwChannelConfig->instance,
    7db0:	9b01      	ldr	r3, [sp, #4]
    7db2:	791a      	ldrb	r2, [r3, #4]
    7db4:	9b01      	ldr	r3, [sp, #4]
    7db6:	795b      	ldrb	r3, [r3, #5]
    7db8:	4619      	mov	r1, r3
    7dba:	4610      	mov	r0, r2
    7dbc:	f7fe fec2 	bl	6b44 <Ftm_Gpt_Ip_DisableChannelInterrupt>
                                               pHwChannelConfig->channel);
        }
        break;
    7dc0:	e000      	b.n	7dc4 <Gpt_Ipw_StopTimer+0x22>
        }
            break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    7dc2:	bf00      	nop
    }

    return;
    7dc4:	bf00      	nop
}
    7dc6:	b003      	add	sp, #12
    7dc8:	f85d fb04 	ldr.w	pc, [sp], #4

00007dcc <Gpt_Ipw_EnableInterrupt>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized.
*/
void Gpt_Ipw_EnableInterrupt(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    7dcc:	b082      	sub	sp, #8
    7dce:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    7dd0:	9b01      	ldr	r3, [sp, #4]
    7dd2:	681b      	ldr	r3, [r3, #0]
    7dd4:	2b00      	cmp	r3, #0
        }
        break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    7dd6:	bf00      	nop
    }

    return;
    7dd8:	bf00      	nop
}
    7dda:	b002      	add	sp, #8
    7ddc:	4770      	bx	lr

00007dde <Gpt_Ipw_DeInit>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized. On/Off by the configuration parameter: GPT_DEINIT_API
*/
void Gpt_Ipw_DeInit(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    7dde:	b500      	push	{lr}
    7de0:	b083      	sub	sp, #12
    7de2:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    7de4:	9b01      	ldr	r3, [sp, #4]
    7de6:	681b      	ldr	r3, [r3, #0]
    7de8:	2b00      	cmp	r3, #0
    7dea:	d105      	bne.n	7df8 <Gpt_Ipw_DeInit+0x1a>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {
           Ftm_Gpt_Ip_Deinit(pHwChannelConfig->instance);
    7dec:	9b01      	ldr	r3, [sp, #4]
    7dee:	791b      	ldrb	r3, [r3, #4]
    7df0:	4618      	mov	r0, r3
    7df2:	f7fe fdb1 	bl	6958 <Ftm_Gpt_Ip_Deinit>
        }
        break;
    7df6:	e000      	b.n	7dfa <Gpt_Ipw_DeInit+0x1c>
        }
        break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    7df8:	bf00      	nop
    }
    return;
    7dfa:	bf00      	nop
}
    7dfc:	b003      	add	sp, #12
    7dfe:	f85d fb04 	ldr.w	pc, [sp], #4

00007e02 <Gpt_Ipw_DisableInterrupt>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized.On/Off by the configuration parameter: GPT_ENABLE_DISABLE_NOTIFICATION_API
*/
void Gpt_Ipw_DisableInterrupt(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    7e02:	b082      	sub	sp, #8
    7e04:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    7e06:	9b01      	ldr	r3, [sp, #4]
    7e08:	681b      	ldr	r3, [r3, #0]
    7e0a:	2b00      	cmp	r3, #0
        }
        break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    7e0c:	bf00      	nop
    }

    return;
    7e0e:	bf00      	nop
}
    7e10:	b002      	add	sp, #8
    7e12:	4770      	bx	lr

00007e14 <Gpt_Ipw_StartPredefTimer>:

void Gpt_Ipw_StartPredefTimer
(
    const Gpt_ConfigType * configPtr
)
{
    7e14:	b510      	push	{r4, lr}
    7e16:	b086      	sub	sp, #24
    7e18:	9003      	str	r0, [sp, #12]
    Gpt_ChannelType channel;
    const Gpt_HwPredefChannelConfigType * pHwChannelConfig;

    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    7e1a:	2300      	movs	r3, #0
    7e1c:	f88d 3017 	strb.w	r3, [sp, #23]
    7e20:	e025      	b.n	7e6e <Gpt_Ipw_StartPredefTimer+0x5a>
    {
        pHwChannelConfig = (configPtr->Gpt_pChannelPredefConfigType)[channel];
    7e22:	9b03      	ldr	r3, [sp, #12]
    7e24:	691a      	ldr	r2, [r3, #16]
    7e26:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7e2a:	009b      	lsls	r3, r3, #2
    7e2c:	4413      	add	r3, r2
    7e2e:	681b      	ldr	r3, [r3, #0]
    7e30:	9304      	str	r3, [sp, #16]

        if(NULL_PTR != pHwChannelConfig)
    7e32:	9b04      	ldr	r3, [sp, #16]
    7e34:	2b00      	cmp	r3, #0
    7e36:	d012      	beq.n	7e5e <Gpt_Ipw_StartPredefTimer+0x4a>
        {
            switch(pHwChannelConfig->instanceType)
    7e38:	9b04      	ldr	r3, [sp, #16]
    7e3a:	681b      	ldr	r3, [r3, #0]
    7e3c:	2b00      	cmp	r3, #0
    7e3e:	d110      	bne.n	7e62 <Gpt_Ipw_StartPredefTimer+0x4e>
            {
#if (FTM_GPT_IP_USED == STD_ON)
            case GPT_FTM_MODULE:
            {
                Ftm_Gpt_Ip_StartPredefTimer(pHwChannelConfig->instance, \
    7e40:	9b04      	ldr	r3, [sp, #16]
    7e42:	7918      	ldrb	r0, [r3, #4]
    7e44:	9b04      	ldr	r3, [sp, #16]
    7e46:	7959      	ldrb	r1, [r3, #5]
    7e48:	9b04      	ldr	r3, [sp, #16]
    7e4a:	7a1a      	ldrb	r2, [r3, #8]
    7e4c:	9b04      	ldr	r3, [sp, #16]
    7e4e:	799c      	ldrb	r4, [r3, #6]
    7e50:	9b04      	ldr	r3, [sp, #16]
    7e52:	79db      	ldrb	r3, [r3, #7]
    7e54:	9300      	str	r3, [sp, #0]
    7e56:	4623      	mov	r3, r4
    7e58:	f7fe feac 	bl	6bb4 <Ftm_Gpt_Ip_StartPredefTimer>
                                            pHwChannelConfig->channel, \
                                            pHwChannelConfig->Gpt_uPrescaler, \
                                            pHwChannelConfig->Gpt_uClockSource, \
                                            pHwChannelConfig->Gpt_bFreezeEnable);
            }
            break;
    7e5c:	e002      	b.n	7e64 <Gpt_Ipw_StartPredefTimer+0x50>
#endif
            default:
                /*This switch branch is empty because it shall not be executed for normal behaviour*/
            break;
            }
        }
    7e5e:	bf00      	nop
    7e60:	e000      	b.n	7e64 <Gpt_Ipw_StartPredefTimer+0x50>
            break;
    7e62:	bf00      	nop
    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    7e64:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7e68:	3301      	adds	r3, #1
    7e6a:	f88d 3017 	strb.w	r3, [sp, #23]
    7e6e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7e72:	2b03      	cmp	r3, #3
    7e74:	d9d5      	bls.n	7e22 <Gpt_Ipw_StartPredefTimer+0xe>
    }

    return;
    7e76:	bf00      	nop
}
    7e78:	b006      	add	sp, #24
    7e7a:	bd10      	pop	{r4, pc}

00007e7c <Gpt_Ipw_GetPredefTimerValue>:
(
    const Gpt_HwPredefChannelConfigType * pHwChannelConfig,
    Gpt_PredefTimerType PredefTimer,
    uint32 * TimeValuePtr
)
{
    7e7c:	b500      	push	{lr}
    7e7e:	b087      	sub	sp, #28
    7e80:	9003      	str	r0, [sp, #12]
    7e82:	9102      	str	r1, [sp, #8]
    7e84:	9201      	str	r2, [sp, #4]
    uint32 u32ReturnValue = 0U;
    7e86:	2300      	movs	r3, #0
    7e88:	9305      	str	r3, [sp, #20]
    switch(pHwChannelConfig->instanceType)
    7e8a:	9b03      	ldr	r3, [sp, #12]
    7e8c:	681b      	ldr	r3, [r3, #0]
    7e8e:	2b00      	cmp	r3, #0
    7e90:	d106      	bne.n	7ea0 <Gpt_Ipw_GetPredefTimerValue+0x24>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case GPT_FTM_MODULE:
        {
            u32ReturnValue = Ftm_Gpt_Ip_GetCntValue(pHwChannelConfig->instance);
    7e92:	9b03      	ldr	r3, [sp, #12]
    7e94:	791b      	ldrb	r3, [r3, #4]
    7e96:	4618      	mov	r0, r3
    7e98:	f7ff feda 	bl	7c50 <Ftm_Gpt_Ip_GetCntValue>
    7e9c:	9005      	str	r0, [sp, #20]
        }
        break;
    7e9e:	e000      	b.n	7ea2 <Gpt_Ipw_GetPredefTimerValue+0x26>
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    7ea0:	bf00      	nop
    }
    if(0U != u32ReturnValue)
    7ea2:	9b05      	ldr	r3, [sp, #20]
    7ea4:	2b00      	cmp	r3, #0
    7ea6:	d020      	beq.n	7eea <Gpt_Ipw_GetPredefTimerValue+0x6e>
    7ea8:	9b02      	ldr	r3, [sp, #8]
    7eaa:	2b03      	cmp	r3, #3
    7eac:	d81f      	bhi.n	7eee <Gpt_Ipw_GetPredefTimerValue+0x72>
    7eae:	a201      	add	r2, pc, #4	; (adr r2, 7eb4 <Gpt_Ipw_GetPredefTimerValue+0x38>)
    7eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7eb4:	00007ec5 	.word	0x00007ec5
    7eb8:	00007ecf 	.word	0x00007ecf
    7ebc:	00007edb 	.word	0x00007edb
    7ec0:	00007ee3 	.word	0x00007ee3
    {
        switch(PredefTimer)
        {
            case GPT_PREDEF_TIMER_1US_16BIT:
                *TimeValuePtr = (0x0000FFFFU & u32ReturnValue);
    7ec4:	9b05      	ldr	r3, [sp, #20]
    7ec6:	b29a      	uxth	r2, r3
    7ec8:	9b01      	ldr	r3, [sp, #4]
    7eca:	601a      	str	r2, [r3, #0]
            break;
    7ecc:	e010      	b.n	7ef0 <Gpt_Ipw_GetPredefTimerValue+0x74>
            case GPT_PREDEF_TIMER_1US_24BIT:
                *TimeValuePtr = (0x00FFFFFFU & u32ReturnValue);
    7ece:	9b05      	ldr	r3, [sp, #20]
    7ed0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    7ed4:	9b01      	ldr	r3, [sp, #4]
    7ed6:	601a      	str	r2, [r3, #0]
            break;
    7ed8:	e00a      	b.n	7ef0 <Gpt_Ipw_GetPredefTimerValue+0x74>
            case GPT_PREDEF_TIMER_1US_32BIT:
                *TimeValuePtr = u32ReturnValue;
    7eda:	9b01      	ldr	r3, [sp, #4]
    7edc:	9a05      	ldr	r2, [sp, #20]
    7ede:	601a      	str	r2, [r3, #0]
            break;
    7ee0:	e006      	b.n	7ef0 <Gpt_Ipw_GetPredefTimerValue+0x74>
            case GPT_PREDEF_TIMER_100US_32BIT:
                *TimeValuePtr = u32ReturnValue;
    7ee2:	9b01      	ldr	r3, [sp, #4]
    7ee4:	9a05      	ldr	r2, [sp, #20]
    7ee6:	601a      	str	r2, [r3, #0]
            break;
    7ee8:	e002      	b.n	7ef0 <Gpt_Ipw_GetPredefTimerValue+0x74>
            default:
                /* 32bit timer */
            break;
        }
    }
    7eea:	bf00      	nop
    7eec:	e000      	b.n	7ef0 <Gpt_Ipw_GetPredefTimerValue+0x74>
            break;
    7eee:	bf00      	nop
    return;
    7ef0:	bf00      	nop
}
    7ef2:	b007      	add	sp, #28
    7ef4:	f85d fb04 	ldr.w	pc, [sp], #4

00007ef8 <Gpt_Ipw_StopPredefTimer>:
*/
void Gpt_Ipw_StopPredefTimer
(
    const Gpt_ConfigType * configPtr
)
{
    7ef8:	b500      	push	{lr}
    7efa:	b085      	sub	sp, #20
    7efc:	9001      	str	r0, [sp, #4]
    Gpt_ChannelType channel;
    const Gpt_HwPredefChannelConfigType * pHwChannelConfig;

    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    7efe:	2300      	movs	r3, #0
    7f00:	f88d 300f 	strb.w	r3, [sp, #15]
    7f04:	e01f      	b.n	7f46 <Gpt_Ipw_StopPredefTimer+0x4e>
    {

        pHwChannelConfig = (configPtr->Gpt_pChannelPredefConfigType)[channel];
    7f06:	9b01      	ldr	r3, [sp, #4]
    7f08:	691a      	ldr	r2, [r3, #16]
    7f0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7f0e:	009b      	lsls	r3, r3, #2
    7f10:	4413      	add	r3, r2
    7f12:	681b      	ldr	r3, [r3, #0]
    7f14:	9302      	str	r3, [sp, #8]
        if(NULL_PTR != pHwChannelConfig)
    7f16:	9b02      	ldr	r3, [sp, #8]
    7f18:	2b00      	cmp	r3, #0
    7f1a:	d00c      	beq.n	7f36 <Gpt_Ipw_StopPredefTimer+0x3e>
        {
            switch(pHwChannelConfig->instanceType)
    7f1c:	9b02      	ldr	r3, [sp, #8]
    7f1e:	681b      	ldr	r3, [r3, #0]
    7f20:	2b00      	cmp	r3, #0
    7f22:	d10a      	bne.n	7f3a <Gpt_Ipw_StopPredefTimer+0x42>
            {
#if (FTM_GPT_IP_USED == STD_ON)
            case GPT_FTM_MODULE:
            {
                Ftm_Gpt_Ip_StopPredefTimer(pHwChannelConfig->instance, \
    7f24:	9b02      	ldr	r3, [sp, #8]
    7f26:	791a      	ldrb	r2, [r3, #4]
    7f28:	9b02      	ldr	r3, [sp, #8]
    7f2a:	795b      	ldrb	r3, [r3, #5]
    7f2c:	4619      	mov	r1, r3
    7f2e:	4610      	mov	r0, r2
    7f30:	f7fe fed2 	bl	6cd8 <Ftm_Gpt_Ip_StopPredefTimer>
                                           pHwChannelConfig->channel);
            }
            break;
    7f34:	e002      	b.n	7f3c <Gpt_Ipw_StopPredefTimer+0x44>
#endif
            default:
                /*This switch branch is empty because it shall not be executed for normal behaviour*/
            break;
            }
        }
    7f36:	bf00      	nop
    7f38:	e000      	b.n	7f3c <Gpt_Ipw_StopPredefTimer+0x44>
            break;
    7f3a:	bf00      	nop
    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    7f3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7f40:	3301      	adds	r3, #1
    7f42:	f88d 300f 	strb.w	r3, [sp, #15]
    7f46:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7f4a:	2b03      	cmp	r3, #3
    7f4c:	d9db      	bls.n	7f06 <Gpt_Ipw_StopPredefTimer+0xe>
    }
    return;
    7f4e:	bf00      	nop
}
    7f50:	b005      	add	sp, #20
    7f52:	f85d fb04 	ldr.w	pc, [sp], #4
    7f56:	bf00      	nop

00007f58 <EcuM_SetWakeupEvent>:
* 
* @param[in]     events  last wakeup event
* 
*/
void EcuM_SetWakeupEvent(EcuM_WakeupSourceType events)
{
    7f58:	b082      	sub	sp, #8
    7f5a:	9001      	str	r0, [sp, #4]
    EcuMLastWakeupEvent = events;
    7f5c:	4a02      	ldr	r2, [pc, #8]	; (7f68 <EcuM_SetWakeupEvent+0x10>)
    7f5e:	9b01      	ldr	r3, [sp, #4]
    7f60:	6013      	str	r3, [r2, #0]
}
    7f62:	bf00      	nop
    7f64:	b002      	add	sp, #8
    7f66:	4770      	bx	lr
    7f68:	1fff8fbc 	.word	0x1fff8fbc

00007f6c <EcuM_ValidateWakeupEvent>:
* @details This is a function stub only. Functionality is void in this implementation
* 
* @param[in]     events wakeup event to validate
*/
void EcuM_ValidateWakeupEvent(EcuM_WakeupSourceType events)
{
    7f6c:	b082      	sub	sp, #8
    7f6e:	9001      	str	r0, [sp, #4]
    (void)events;
}
    7f70:	bf00      	nop
    7f72:	b002      	add	sp, #8
    7f74:	4770      	bx	lr

00007f76 <EcuM_CheckWakeup>:
* 
* @param[in]     wakeupSource  wakeup source ID
* 
*/
void EcuM_CheckWakeup(EcuM_WakeupSourceType wakeupSource)
{
    7f76:	b082      	sub	sp, #8
    7f78:	9001      	str	r0, [sp, #4]
#endif
#ifdef TEST_ICU
    Icu_CheckWakeup(wakeupSource);
#endif
    (void)wakeupSource;
}
    7f7a:	bf00      	nop
    7f7c:	b002      	add	sp, #8
    7f7e:	4770      	bx	lr

00007f80 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    7f80:	b500      	push	{lr}
    7f82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7f84:	f7f8 fe0e 	bl	ba4 <Sys_GetCoreID>
    7f88:	4603      	mov	r3, r0
    7f8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    7f8c:	4a10      	ldr	r2, [pc, #64]	; (7fd0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    7f8e:	9b01      	ldr	r3, [sp, #4]
    7f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f94:	2b00      	cmp	r3, #0
    7f96:	d10d      	bne.n	7fb4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7f98:	f7f8 fd1a 	bl	9d0 <Dio_schm_read_msr>
    7f9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7f9e:	9b00      	ldr	r3, [sp, #0]
    7fa0:	f003 0301 	and.w	r3, r3, #1
    7fa4:	2b00      	cmp	r3, #0
    7fa6:	d100      	bne.n	7faa <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7fa8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    7faa:	490a      	ldr	r1, [pc, #40]	; (7fd4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    7fac:	9b01      	ldr	r3, [sp, #4]
    7fae:	9a00      	ldr	r2, [sp, #0]
    7fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    7fb4:	4a06      	ldr	r2, [pc, #24]	; (7fd0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    7fb6:	9b01      	ldr	r3, [sp, #4]
    7fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fbc:	1c5a      	adds	r2, r3, #1
    7fbe:	4904      	ldr	r1, [pc, #16]	; (7fd0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    7fc0:	9b01      	ldr	r3, [sp, #4]
    7fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7fc6:	bf00      	nop
    7fc8:	b003      	add	sp, #12
    7fca:	f85d fb04 	ldr.w	pc, [sp], #4
    7fce:	bf00      	nop
    7fd0:	1fff8fc4 	.word	0x1fff8fc4
    7fd4:	1fff8fc0 	.word	0x1fff8fc0

00007fd8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    7fd8:	b500      	push	{lr}
    7fda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7fdc:	f7f8 fde2 	bl	ba4 <Sys_GetCoreID>
    7fe0:	4603      	mov	r3, r0
    7fe2:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    7fe4:	4a0d      	ldr	r2, [pc, #52]	; (801c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    7fe6:	9b01      	ldr	r3, [sp, #4]
    7fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fec:	1e5a      	subs	r2, r3, #1
    7fee:	490b      	ldr	r1, [pc, #44]	; (801c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    7ff0:	9b01      	ldr	r3, [sp, #4]
    7ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    7ff6:	4a0a      	ldr	r2, [pc, #40]	; (8020 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    7ff8:	9b01      	ldr	r3, [sp, #4]
    7ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ffe:	f003 0301 	and.w	r3, r3, #1
    8002:	2b00      	cmp	r3, #0
    8004:	d106      	bne.n	8014 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    8006:	4a05      	ldr	r2, [pc, #20]	; (801c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    8008:	9b01      	ldr	r3, [sp, #4]
    800a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    800e:	2b00      	cmp	r3, #0
    8010:	d100      	bne.n	8014 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8012:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8014:	bf00      	nop
    8016:	b003      	add	sp, #12
    8018:	f85d fb04 	ldr.w	pc, [sp], #4
    801c:	1fff8fc4 	.word	0x1fff8fc4
    8020:	1fff8fc0 	.word	0x1fff8fc0

00008024 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    8024:	b500      	push	{lr}
    8026:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8028:	f7f8 fdbc 	bl	ba4 <Sys_GetCoreID>
    802c:	4603      	mov	r3, r0
    802e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    8030:	4a10      	ldr	r2, [pc, #64]	; (8074 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    8032:	9b01      	ldr	r3, [sp, #4]
    8034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8038:	2b00      	cmp	r3, #0
    803a:	d10d      	bne.n	8058 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    803c:	f7f8 fcc8 	bl	9d0 <Dio_schm_read_msr>
    8040:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8042:	9b00      	ldr	r3, [sp, #0]
    8044:	f003 0301 	and.w	r3, r3, #1
    8048:	2b00      	cmp	r3, #0
    804a:	d100      	bne.n	804e <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    804c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    804e:	490a      	ldr	r1, [pc, #40]	; (8078 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    8050:	9b01      	ldr	r3, [sp, #4]
    8052:	9a00      	ldr	r2, [sp, #0]
    8054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    8058:	4a06      	ldr	r2, [pc, #24]	; (8074 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    805a:	9b01      	ldr	r3, [sp, #4]
    805c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8060:	1c5a      	adds	r2, r3, #1
    8062:	4904      	ldr	r1, [pc, #16]	; (8074 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    8064:	9b01      	ldr	r3, [sp, #4]
    8066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    806a:	bf00      	nop
    806c:	b003      	add	sp, #12
    806e:	f85d fb04 	ldr.w	pc, [sp], #4
    8072:	bf00      	nop
    8074:	1fff8fcc 	.word	0x1fff8fcc
    8078:	1fff8fc8 	.word	0x1fff8fc8

0000807c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    807c:	b500      	push	{lr}
    807e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8080:	f7f8 fd90 	bl	ba4 <Sys_GetCoreID>
    8084:	4603      	mov	r3, r0
    8086:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    8088:	4a0d      	ldr	r2, [pc, #52]	; (80c0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    808a:	9b01      	ldr	r3, [sp, #4]
    808c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8090:	1e5a      	subs	r2, r3, #1
    8092:	490b      	ldr	r1, [pc, #44]	; (80c0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    8094:	9b01      	ldr	r3, [sp, #4]
    8096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    809a:	4a0a      	ldr	r2, [pc, #40]	; (80c4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    809c:	9b01      	ldr	r3, [sp, #4]
    809e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80a2:	f003 0301 	and.w	r3, r3, #1
    80a6:	2b00      	cmp	r3, #0
    80a8:	d106      	bne.n	80b8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    80aa:	4a05      	ldr	r2, [pc, #20]	; (80c0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    80ac:	9b01      	ldr	r3, [sp, #4]
    80ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80b2:	2b00      	cmp	r3, #0
    80b4:	d100      	bne.n	80b8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    80b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    80b8:	bf00      	nop
    80ba:	b003      	add	sp, #12
    80bc:	f85d fb04 	ldr.w	pc, [sp], #4
    80c0:	1fff8fcc 	.word	0x1fff8fcc
    80c4:	1fff8fc8 	.word	0x1fff8fc8

000080c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00(void)
{
    80c8:	b500      	push	{lr}
    80ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    80cc:	f7f8 fd6a 	bl	ba4 <Sys_GetCoreID>
    80d0:	4603      	mov	r3, r0
    80d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId])
    80d4:	4a10      	ldr	r2, [pc, #64]	; (8118 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x50>)
    80d6:	9b01      	ldr	r3, [sp, #4]
    80d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80dc:	2b00      	cmp	r3, #0
    80de:	d10d      	bne.n	80fc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    80e0:	f7f8 fc7f 	bl	9e2 <Gpt_schm_read_msr>
    80e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    80e6:	9b00      	ldr	r3, [sp, #0]
    80e8:	f003 0301 	and.w	r3, r3, #1
    80ec:	2b00      	cmp	r3, #0
    80ee:	d100      	bne.n	80f2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    80f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    80f2:	490a      	ldr	r1, [pc, #40]	; (811c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x54>)
    80f4:	9b01      	ldr	r3, [sp, #4]
    80f6:	9a00      	ldr	r2, [sp, #0]
    80f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId]++;
    80fc:	4a06      	ldr	r2, [pc, #24]	; (8118 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x50>)
    80fe:	9b01      	ldr	r3, [sp, #4]
    8100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8104:	1c5a      	adds	r2, r3, #1
    8106:	4904      	ldr	r1, [pc, #16]	; (8118 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x50>)
    8108:	9b01      	ldr	r3, [sp, #4]
    810a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    810e:	bf00      	nop
    8110:	b003      	add	sp, #12
    8112:	f85d fb04 	ldr.w	pc, [sp], #4
    8116:	bf00      	nop
    8118:	1fff8fd4 	.word	0x1fff8fd4
    811c:	1fff8fd0 	.word	0x1fff8fd0

00008120 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00(void)
{
    8120:	b500      	push	{lr}
    8122:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8124:	f7f8 fd3e 	bl	ba4 <Sys_GetCoreID>
    8128:	4603      	mov	r3, r0
    812a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId]--;
    812c:	4a0d      	ldr	r2, [pc, #52]	; (8164 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x44>)
    812e:	9b01      	ldr	r3, [sp, #4]
    8130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8134:	1e5a      	subs	r2, r3, #1
    8136:	490b      	ldr	r1, [pc, #44]	; (8164 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x44>)
    8138:	9b01      	ldr	r3, [sp, #4]
    813a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    813e:	4a0a      	ldr	r2, [pc, #40]	; (8168 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x48>)
    8140:	9b01      	ldr	r3, [sp, #4]
    8142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8146:	f003 0301 	and.w	r3, r3, #1
    814a:	2b00      	cmp	r3, #0
    814c:	d106      	bne.n	815c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x3c>
    814e:	4a05      	ldr	r2, [pc, #20]	; (8164 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x44>)
    8150:	9b01      	ldr	r3, [sp, #4]
    8152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8156:	2b00      	cmp	r3, #0
    8158:	d100      	bne.n	815c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    815a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    815c:	bf00      	nop
    815e:	b003      	add	sp, #12
    8160:	f85d fb04 	ldr.w	pc, [sp], #4
    8164:	1fff8fd4 	.word	0x1fff8fd4
    8168:	1fff8fd0 	.word	0x1fff8fd0

0000816c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01(void)
{
    816c:	b500      	push	{lr}
    816e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8170:	f7f8 fd18 	bl	ba4 <Sys_GetCoreID>
    8174:	4603      	mov	r3, r0
    8176:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId])
    8178:	4a10      	ldr	r2, [pc, #64]	; (81bc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x50>)
    817a:	9b01      	ldr	r3, [sp, #4]
    817c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8180:	2b00      	cmp	r3, #0
    8182:	d10d      	bne.n	81a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8184:	f7f8 fc2d 	bl	9e2 <Gpt_schm_read_msr>
    8188:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    818a:	9b00      	ldr	r3, [sp, #0]
    818c:	f003 0301 	and.w	r3, r3, #1
    8190:	2b00      	cmp	r3, #0
    8192:	d100      	bne.n	8196 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8194:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    8196:	490a      	ldr	r1, [pc, #40]	; (81c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x54>)
    8198:	9b01      	ldr	r3, [sp, #4]
    819a:	9a00      	ldr	r2, [sp, #0]
    819c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId]++;
    81a0:	4a06      	ldr	r2, [pc, #24]	; (81bc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x50>)
    81a2:	9b01      	ldr	r3, [sp, #4]
    81a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81a8:	1c5a      	adds	r2, r3, #1
    81aa:	4904      	ldr	r1, [pc, #16]	; (81bc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x50>)
    81ac:	9b01      	ldr	r3, [sp, #4]
    81ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    81b2:	bf00      	nop
    81b4:	b003      	add	sp, #12
    81b6:	f85d fb04 	ldr.w	pc, [sp], #4
    81ba:	bf00      	nop
    81bc:	1fff8fdc 	.word	0x1fff8fdc
    81c0:	1fff8fd8 	.word	0x1fff8fd8

000081c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01(void)
{
    81c4:	b500      	push	{lr}
    81c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    81c8:	f7f8 fcec 	bl	ba4 <Sys_GetCoreID>
    81cc:	4603      	mov	r3, r0
    81ce:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId]--;
    81d0:	4a0d      	ldr	r2, [pc, #52]	; (8208 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x44>)
    81d2:	9b01      	ldr	r3, [sp, #4]
    81d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81d8:	1e5a      	subs	r2, r3, #1
    81da:	490b      	ldr	r1, [pc, #44]	; (8208 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x44>)
    81dc:	9b01      	ldr	r3, [sp, #4]
    81de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    81e2:	4a0a      	ldr	r2, [pc, #40]	; (820c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x48>)
    81e4:	9b01      	ldr	r3, [sp, #4]
    81e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81ea:	f003 0301 	and.w	r3, r3, #1
    81ee:	2b00      	cmp	r3, #0
    81f0:	d106      	bne.n	8200 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x3c>
    81f2:	4a05      	ldr	r2, [pc, #20]	; (8208 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x44>)
    81f4:	9b01      	ldr	r3, [sp, #4]
    81f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81fa:	2b00      	cmp	r3, #0
    81fc:	d100      	bne.n	8200 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    81fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8200:	bf00      	nop
    8202:	b003      	add	sp, #12
    8204:	f85d fb04 	ldr.w	pc, [sp], #4
    8208:	1fff8fdc 	.word	0x1fff8fdc
    820c:	1fff8fd8 	.word	0x1fff8fd8

00008210 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02(void)
{
    8210:	b500      	push	{lr}
    8212:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8214:	f7f8 fcc6 	bl	ba4 <Sys_GetCoreID>
    8218:	4603      	mov	r3, r0
    821a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId])
    821c:	4a10      	ldr	r2, [pc, #64]	; (8260 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x50>)
    821e:	9b01      	ldr	r3, [sp, #4]
    8220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8224:	2b00      	cmp	r3, #0
    8226:	d10d      	bne.n	8244 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8228:	f7f8 fbdb 	bl	9e2 <Gpt_schm_read_msr>
    822c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    822e:	9b00      	ldr	r3, [sp, #0]
    8230:	f003 0301 	and.w	r3, r3, #1
    8234:	2b00      	cmp	r3, #0
    8236:	d100      	bne.n	823a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8238:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    823a:	490a      	ldr	r1, [pc, #40]	; (8264 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x54>)
    823c:	9b01      	ldr	r3, [sp, #4]
    823e:	9a00      	ldr	r2, [sp, #0]
    8240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId]++;
    8244:	4a06      	ldr	r2, [pc, #24]	; (8260 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x50>)
    8246:	9b01      	ldr	r3, [sp, #4]
    8248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    824c:	1c5a      	adds	r2, r3, #1
    824e:	4904      	ldr	r1, [pc, #16]	; (8260 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x50>)
    8250:	9b01      	ldr	r3, [sp, #4]
    8252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8256:	bf00      	nop
    8258:	b003      	add	sp, #12
    825a:	f85d fb04 	ldr.w	pc, [sp], #4
    825e:	bf00      	nop
    8260:	1fff8fe4 	.word	0x1fff8fe4
    8264:	1fff8fe0 	.word	0x1fff8fe0

00008268 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02(void)
{
    8268:	b500      	push	{lr}
    826a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    826c:	f7f8 fc9a 	bl	ba4 <Sys_GetCoreID>
    8270:	4603      	mov	r3, r0
    8272:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId]--;
    8274:	4a0d      	ldr	r2, [pc, #52]	; (82ac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x44>)
    8276:	9b01      	ldr	r3, [sp, #4]
    8278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    827c:	1e5a      	subs	r2, r3, #1
    827e:	490b      	ldr	r1, [pc, #44]	; (82ac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x44>)
    8280:	9b01      	ldr	r3, [sp, #4]
    8282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    8286:	4a0a      	ldr	r2, [pc, #40]	; (82b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x48>)
    8288:	9b01      	ldr	r3, [sp, #4]
    828a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    828e:	f003 0301 	and.w	r3, r3, #1
    8292:	2b00      	cmp	r3, #0
    8294:	d106      	bne.n	82a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x3c>
    8296:	4a05      	ldr	r2, [pc, #20]	; (82ac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x44>)
    8298:	9b01      	ldr	r3, [sp, #4]
    829a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    829e:	2b00      	cmp	r3, #0
    82a0:	d100      	bne.n	82a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    82a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    82a4:	bf00      	nop
    82a6:	b003      	add	sp, #12
    82a8:	f85d fb04 	ldr.w	pc, [sp], #4
    82ac:	1fff8fe4 	.word	0x1fff8fe4
    82b0:	1fff8fe0 	.word	0x1fff8fe0

000082b4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03(void)
{
    82b4:	b500      	push	{lr}
    82b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    82b8:	f7f8 fc74 	bl	ba4 <Sys_GetCoreID>
    82bc:	4603      	mov	r3, r0
    82be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId])
    82c0:	4a10      	ldr	r2, [pc, #64]	; (8304 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x50>)
    82c2:	9b01      	ldr	r3, [sp, #4]
    82c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82c8:	2b00      	cmp	r3, #0
    82ca:	d10d      	bne.n	82e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    82cc:	f7f8 fb89 	bl	9e2 <Gpt_schm_read_msr>
    82d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    82d2:	9b00      	ldr	r3, [sp, #0]
    82d4:	f003 0301 	and.w	r3, r3, #1
    82d8:	2b00      	cmp	r3, #0
    82da:	d100      	bne.n	82de <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    82dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    82de:	490a      	ldr	r1, [pc, #40]	; (8308 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x54>)
    82e0:	9b01      	ldr	r3, [sp, #4]
    82e2:	9a00      	ldr	r2, [sp, #0]
    82e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId]++;
    82e8:	4a06      	ldr	r2, [pc, #24]	; (8304 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x50>)
    82ea:	9b01      	ldr	r3, [sp, #4]
    82ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82f0:	1c5a      	adds	r2, r3, #1
    82f2:	4904      	ldr	r1, [pc, #16]	; (8304 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x50>)
    82f4:	9b01      	ldr	r3, [sp, #4]
    82f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    82fa:	bf00      	nop
    82fc:	b003      	add	sp, #12
    82fe:	f85d fb04 	ldr.w	pc, [sp], #4
    8302:	bf00      	nop
    8304:	1fff8fec 	.word	0x1fff8fec
    8308:	1fff8fe8 	.word	0x1fff8fe8

0000830c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03(void)
{
    830c:	b500      	push	{lr}
    830e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8310:	f7f8 fc48 	bl	ba4 <Sys_GetCoreID>
    8314:	4603      	mov	r3, r0
    8316:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId]--;
    8318:	4a0d      	ldr	r2, [pc, #52]	; (8350 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x44>)
    831a:	9b01      	ldr	r3, [sp, #4]
    831c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8320:	1e5a      	subs	r2, r3, #1
    8322:	490b      	ldr	r1, [pc, #44]	; (8350 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x44>)
    8324:	9b01      	ldr	r3, [sp, #4]
    8326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    832a:	4a0a      	ldr	r2, [pc, #40]	; (8354 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x48>)
    832c:	9b01      	ldr	r3, [sp, #4]
    832e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8332:	f003 0301 	and.w	r3, r3, #1
    8336:	2b00      	cmp	r3, #0
    8338:	d106      	bne.n	8348 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x3c>
    833a:	4a05      	ldr	r2, [pc, #20]	; (8350 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x44>)
    833c:	9b01      	ldr	r3, [sp, #4]
    833e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8342:	2b00      	cmp	r3, #0
    8344:	d100      	bne.n	8348 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8346:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8348:	bf00      	nop
    834a:	b003      	add	sp, #12
    834c:	f85d fb04 	ldr.w	pc, [sp], #4
    8350:	1fff8fec 	.word	0x1fff8fec
    8354:	1fff8fe8 	.word	0x1fff8fe8

00008358 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04(void)
{
    8358:	b500      	push	{lr}
    835a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    835c:	f7f8 fc22 	bl	ba4 <Sys_GetCoreID>
    8360:	4603      	mov	r3, r0
    8362:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId])
    8364:	4a10      	ldr	r2, [pc, #64]	; (83a8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x50>)
    8366:	9b01      	ldr	r3, [sp, #4]
    8368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    836c:	2b00      	cmp	r3, #0
    836e:	d10d      	bne.n	838c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8370:	f7f8 fb37 	bl	9e2 <Gpt_schm_read_msr>
    8374:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8376:	9b00      	ldr	r3, [sp, #0]
    8378:	f003 0301 	and.w	r3, r3, #1
    837c:	2b00      	cmp	r3, #0
    837e:	d100      	bne.n	8382 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8380:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    8382:	490a      	ldr	r1, [pc, #40]	; (83ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x54>)
    8384:	9b01      	ldr	r3, [sp, #4]
    8386:	9a00      	ldr	r2, [sp, #0]
    8388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId]++;
    838c:	4a06      	ldr	r2, [pc, #24]	; (83a8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x50>)
    838e:	9b01      	ldr	r3, [sp, #4]
    8390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8394:	1c5a      	adds	r2, r3, #1
    8396:	4904      	ldr	r1, [pc, #16]	; (83a8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x50>)
    8398:	9b01      	ldr	r3, [sp, #4]
    839a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    839e:	bf00      	nop
    83a0:	b003      	add	sp, #12
    83a2:	f85d fb04 	ldr.w	pc, [sp], #4
    83a6:	bf00      	nop
    83a8:	1fff8ff4 	.word	0x1fff8ff4
    83ac:	1fff8ff0 	.word	0x1fff8ff0

000083b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04(void)
{
    83b0:	b500      	push	{lr}
    83b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    83b4:	f7f8 fbf6 	bl	ba4 <Sys_GetCoreID>
    83b8:	4603      	mov	r3, r0
    83ba:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId]--;
    83bc:	4a0d      	ldr	r2, [pc, #52]	; (83f4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x44>)
    83be:	9b01      	ldr	r3, [sp, #4]
    83c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83c4:	1e5a      	subs	r2, r3, #1
    83c6:	490b      	ldr	r1, [pc, #44]	; (83f4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x44>)
    83c8:	9b01      	ldr	r3, [sp, #4]
    83ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    83ce:	4a0a      	ldr	r2, [pc, #40]	; (83f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x48>)
    83d0:	9b01      	ldr	r3, [sp, #4]
    83d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83d6:	f003 0301 	and.w	r3, r3, #1
    83da:	2b00      	cmp	r3, #0
    83dc:	d106      	bne.n	83ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x3c>
    83de:	4a05      	ldr	r2, [pc, #20]	; (83f4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x44>)
    83e0:	9b01      	ldr	r3, [sp, #4]
    83e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83e6:	2b00      	cmp	r3, #0
    83e8:	d100      	bne.n	83ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    83ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    83ec:	bf00      	nop
    83ee:	b003      	add	sp, #12
    83f0:	f85d fb04 	ldr.w	pc, [sp], #4
    83f4:	1fff8ff4 	.word	0x1fff8ff4
    83f8:	1fff8ff0 	.word	0x1fff8ff0

000083fc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05(void)
{
    83fc:	b500      	push	{lr}
    83fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8400:	f7f8 fbd0 	bl	ba4 <Sys_GetCoreID>
    8404:	4603      	mov	r3, r0
    8406:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId])
    8408:	4a10      	ldr	r2, [pc, #64]	; (844c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x50>)
    840a:	9b01      	ldr	r3, [sp, #4]
    840c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8410:	2b00      	cmp	r3, #0
    8412:	d10d      	bne.n	8430 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8414:	f7f8 fae5 	bl	9e2 <Gpt_schm_read_msr>
    8418:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    841a:	9b00      	ldr	r3, [sp, #0]
    841c:	f003 0301 	and.w	r3, r3, #1
    8420:	2b00      	cmp	r3, #0
    8422:	d100      	bne.n	8426 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8424:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    8426:	490a      	ldr	r1, [pc, #40]	; (8450 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x54>)
    8428:	9b01      	ldr	r3, [sp, #4]
    842a:	9a00      	ldr	r2, [sp, #0]
    842c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId]++;
    8430:	4a06      	ldr	r2, [pc, #24]	; (844c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x50>)
    8432:	9b01      	ldr	r3, [sp, #4]
    8434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8438:	1c5a      	adds	r2, r3, #1
    843a:	4904      	ldr	r1, [pc, #16]	; (844c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x50>)
    843c:	9b01      	ldr	r3, [sp, #4]
    843e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8442:	bf00      	nop
    8444:	b003      	add	sp, #12
    8446:	f85d fb04 	ldr.w	pc, [sp], #4
    844a:	bf00      	nop
    844c:	1fff8ffc 	.word	0x1fff8ffc
    8450:	1fff8ff8 	.word	0x1fff8ff8

00008454 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05(void)
{
    8454:	b500      	push	{lr}
    8456:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8458:	f7f8 fba4 	bl	ba4 <Sys_GetCoreID>
    845c:	4603      	mov	r3, r0
    845e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId]--;
    8460:	4a0d      	ldr	r2, [pc, #52]	; (8498 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x44>)
    8462:	9b01      	ldr	r3, [sp, #4]
    8464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8468:	1e5a      	subs	r2, r3, #1
    846a:	490b      	ldr	r1, [pc, #44]	; (8498 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x44>)
    846c:	9b01      	ldr	r3, [sp, #4]
    846e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    8472:	4a0a      	ldr	r2, [pc, #40]	; (849c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x48>)
    8474:	9b01      	ldr	r3, [sp, #4]
    8476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    847a:	f003 0301 	and.w	r3, r3, #1
    847e:	2b00      	cmp	r3, #0
    8480:	d106      	bne.n	8490 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x3c>
    8482:	4a05      	ldr	r2, [pc, #20]	; (8498 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x44>)
    8484:	9b01      	ldr	r3, [sp, #4]
    8486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    848a:	2b00      	cmp	r3, #0
    848c:	d100      	bne.n	8490 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    848e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8490:	bf00      	nop
    8492:	b003      	add	sp, #12
    8494:	f85d fb04 	ldr.w	pc, [sp], #4
    8498:	1fff8ffc 	.word	0x1fff8ffc
    849c:	1fff8ff8 	.word	0x1fff8ff8

000084a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06(void)
{
    84a0:	b500      	push	{lr}
    84a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    84a4:	f7f8 fb7e 	bl	ba4 <Sys_GetCoreID>
    84a8:	4603      	mov	r3, r0
    84aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId])
    84ac:	4a10      	ldr	r2, [pc, #64]	; (84f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x50>)
    84ae:	9b01      	ldr	r3, [sp, #4]
    84b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84b4:	2b00      	cmp	r3, #0
    84b6:	d10d      	bne.n	84d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    84b8:	f7f8 fa93 	bl	9e2 <Gpt_schm_read_msr>
    84bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    84be:	9b00      	ldr	r3, [sp, #0]
    84c0:	f003 0301 	and.w	r3, r3, #1
    84c4:	2b00      	cmp	r3, #0
    84c6:	d100      	bne.n	84ca <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    84c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    84ca:	490a      	ldr	r1, [pc, #40]	; (84f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x54>)
    84cc:	9b01      	ldr	r3, [sp, #4]
    84ce:	9a00      	ldr	r2, [sp, #0]
    84d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId]++;
    84d4:	4a06      	ldr	r2, [pc, #24]	; (84f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x50>)
    84d6:	9b01      	ldr	r3, [sp, #4]
    84d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84dc:	1c5a      	adds	r2, r3, #1
    84de:	4904      	ldr	r1, [pc, #16]	; (84f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x50>)
    84e0:	9b01      	ldr	r3, [sp, #4]
    84e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    84e6:	bf00      	nop
    84e8:	b003      	add	sp, #12
    84ea:	f85d fb04 	ldr.w	pc, [sp], #4
    84ee:	bf00      	nop
    84f0:	1fff9004 	.word	0x1fff9004
    84f4:	1fff9000 	.word	0x1fff9000

000084f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06(void)
{
    84f8:	b500      	push	{lr}
    84fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    84fc:	f7f8 fb52 	bl	ba4 <Sys_GetCoreID>
    8500:	4603      	mov	r3, r0
    8502:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId]--;
    8504:	4a0d      	ldr	r2, [pc, #52]	; (853c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x44>)
    8506:	9b01      	ldr	r3, [sp, #4]
    8508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    850c:	1e5a      	subs	r2, r3, #1
    850e:	490b      	ldr	r1, [pc, #44]	; (853c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x44>)
    8510:	9b01      	ldr	r3, [sp, #4]
    8512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    8516:	4a0a      	ldr	r2, [pc, #40]	; (8540 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x48>)
    8518:	9b01      	ldr	r3, [sp, #4]
    851a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    851e:	f003 0301 	and.w	r3, r3, #1
    8522:	2b00      	cmp	r3, #0
    8524:	d106      	bne.n	8534 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x3c>
    8526:	4a05      	ldr	r2, [pc, #20]	; (853c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x44>)
    8528:	9b01      	ldr	r3, [sp, #4]
    852a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    852e:	2b00      	cmp	r3, #0
    8530:	d100      	bne.n	8534 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8532:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8534:	bf00      	nop
    8536:	b003      	add	sp, #12
    8538:	f85d fb04 	ldr.w	pc, [sp], #4
    853c:	1fff9004 	.word	0x1fff9004
    8540:	1fff9000 	.word	0x1fff9000

00008544 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07(void)
{
    8544:	b500      	push	{lr}
    8546:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8548:	f7f8 fb2c 	bl	ba4 <Sys_GetCoreID>
    854c:	4603      	mov	r3, r0
    854e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId])
    8550:	4a10      	ldr	r2, [pc, #64]	; (8594 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x50>)
    8552:	9b01      	ldr	r3, [sp, #4]
    8554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8558:	2b00      	cmp	r3, #0
    855a:	d10d      	bne.n	8578 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    855c:	f7f8 fa41 	bl	9e2 <Gpt_schm_read_msr>
    8560:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8562:	9b00      	ldr	r3, [sp, #0]
    8564:	f003 0301 	and.w	r3, r3, #1
    8568:	2b00      	cmp	r3, #0
    856a:	d100      	bne.n	856e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    856c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    856e:	490a      	ldr	r1, [pc, #40]	; (8598 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x54>)
    8570:	9b01      	ldr	r3, [sp, #4]
    8572:	9a00      	ldr	r2, [sp, #0]
    8574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId]++;
    8578:	4a06      	ldr	r2, [pc, #24]	; (8594 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x50>)
    857a:	9b01      	ldr	r3, [sp, #4]
    857c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8580:	1c5a      	adds	r2, r3, #1
    8582:	4904      	ldr	r1, [pc, #16]	; (8594 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x50>)
    8584:	9b01      	ldr	r3, [sp, #4]
    8586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    858a:	bf00      	nop
    858c:	b003      	add	sp, #12
    858e:	f85d fb04 	ldr.w	pc, [sp], #4
    8592:	bf00      	nop
    8594:	1fff900c 	.word	0x1fff900c
    8598:	1fff9008 	.word	0x1fff9008

0000859c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07(void)
{
    859c:	b500      	push	{lr}
    859e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    85a0:	f7f8 fb00 	bl	ba4 <Sys_GetCoreID>
    85a4:	4603      	mov	r3, r0
    85a6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId]--;
    85a8:	4a0d      	ldr	r2, [pc, #52]	; (85e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x44>)
    85aa:	9b01      	ldr	r3, [sp, #4]
    85ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85b0:	1e5a      	subs	r2, r3, #1
    85b2:	490b      	ldr	r1, [pc, #44]	; (85e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x44>)
    85b4:	9b01      	ldr	r3, [sp, #4]
    85b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    85ba:	4a0a      	ldr	r2, [pc, #40]	; (85e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x48>)
    85bc:	9b01      	ldr	r3, [sp, #4]
    85be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85c2:	f003 0301 	and.w	r3, r3, #1
    85c6:	2b00      	cmp	r3, #0
    85c8:	d106      	bne.n	85d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x3c>
    85ca:	4a05      	ldr	r2, [pc, #20]	; (85e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x44>)
    85cc:	9b01      	ldr	r3, [sp, #4]
    85ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85d2:	2b00      	cmp	r3, #0
    85d4:	d100      	bne.n	85d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    85d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    85d8:	bf00      	nop
    85da:	b003      	add	sp, #12
    85dc:	f85d fb04 	ldr.w	pc, [sp], #4
    85e0:	1fff900c 	.word	0x1fff900c
    85e4:	1fff9008 	.word	0x1fff9008

000085e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10(void)
{
    85e8:	b500      	push	{lr}
    85ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    85ec:	f7f8 fada 	bl	ba4 <Sys_GetCoreID>
    85f0:	4603      	mov	r3, r0
    85f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId])
    85f4:	4a10      	ldr	r2, [pc, #64]	; (8638 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x50>)
    85f6:	9b01      	ldr	r3, [sp, #4]
    85f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85fc:	2b00      	cmp	r3, #0
    85fe:	d10d      	bne.n	861c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8600:	f7f8 f9ef 	bl	9e2 <Gpt_schm_read_msr>
    8604:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8606:	9b00      	ldr	r3, [sp, #0]
    8608:	f003 0301 	and.w	r3, r3, #1
    860c:	2b00      	cmp	r3, #0
    860e:	d100      	bne.n	8612 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8610:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    8612:	490a      	ldr	r1, [pc, #40]	; (863c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x54>)
    8614:	9b01      	ldr	r3, [sp, #4]
    8616:	9a00      	ldr	r2, [sp, #0]
    8618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId]++;
    861c:	4a06      	ldr	r2, [pc, #24]	; (8638 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x50>)
    861e:	9b01      	ldr	r3, [sp, #4]
    8620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8624:	1c5a      	adds	r2, r3, #1
    8626:	4904      	ldr	r1, [pc, #16]	; (8638 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x50>)
    8628:	9b01      	ldr	r3, [sp, #4]
    862a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    862e:	bf00      	nop
    8630:	b003      	add	sp, #12
    8632:	f85d fb04 	ldr.w	pc, [sp], #4
    8636:	bf00      	nop
    8638:	1fff9014 	.word	0x1fff9014
    863c:	1fff9010 	.word	0x1fff9010

00008640 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10(void)
{
    8640:	b500      	push	{lr}
    8642:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8644:	f7f8 faae 	bl	ba4 <Sys_GetCoreID>
    8648:	4603      	mov	r3, r0
    864a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId]--;
    864c:	4a0d      	ldr	r2, [pc, #52]	; (8684 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x44>)
    864e:	9b01      	ldr	r3, [sp, #4]
    8650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8654:	1e5a      	subs	r2, r3, #1
    8656:	490b      	ldr	r1, [pc, #44]	; (8684 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x44>)
    8658:	9b01      	ldr	r3, [sp, #4]
    865a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    865e:	4a0a      	ldr	r2, [pc, #40]	; (8688 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x48>)
    8660:	9b01      	ldr	r3, [sp, #4]
    8662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8666:	f003 0301 	and.w	r3, r3, #1
    866a:	2b00      	cmp	r3, #0
    866c:	d106      	bne.n	867c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x3c>
    866e:	4a05      	ldr	r2, [pc, #20]	; (8684 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x44>)
    8670:	9b01      	ldr	r3, [sp, #4]
    8672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8676:	2b00      	cmp	r3, #0
    8678:	d100      	bne.n	867c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    867a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    867c:	bf00      	nop
    867e:	b003      	add	sp, #12
    8680:	f85d fb04 	ldr.w	pc, [sp], #4
    8684:	1fff9014 	.word	0x1fff9014
    8688:	1fff9010 	.word	0x1fff9010

0000868c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11(void)
{
    868c:	b500      	push	{lr}
    868e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8690:	f7f8 fa88 	bl	ba4 <Sys_GetCoreID>
    8694:	4603      	mov	r3, r0
    8696:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId])
    8698:	4a10      	ldr	r2, [pc, #64]	; (86dc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x50>)
    869a:	9b01      	ldr	r3, [sp, #4]
    869c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86a0:	2b00      	cmp	r3, #0
    86a2:	d10d      	bne.n	86c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    86a4:	f7f8 f99d 	bl	9e2 <Gpt_schm_read_msr>
    86a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    86aa:	9b00      	ldr	r3, [sp, #0]
    86ac:	f003 0301 	and.w	r3, r3, #1
    86b0:	2b00      	cmp	r3, #0
    86b2:	d100      	bne.n	86b6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    86b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    86b6:	490a      	ldr	r1, [pc, #40]	; (86e0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x54>)
    86b8:	9b01      	ldr	r3, [sp, #4]
    86ba:	9a00      	ldr	r2, [sp, #0]
    86bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId]++;
    86c0:	4a06      	ldr	r2, [pc, #24]	; (86dc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x50>)
    86c2:	9b01      	ldr	r3, [sp, #4]
    86c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86c8:	1c5a      	adds	r2, r3, #1
    86ca:	4904      	ldr	r1, [pc, #16]	; (86dc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x50>)
    86cc:	9b01      	ldr	r3, [sp, #4]
    86ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    86d2:	bf00      	nop
    86d4:	b003      	add	sp, #12
    86d6:	f85d fb04 	ldr.w	pc, [sp], #4
    86da:	bf00      	nop
    86dc:	1fff901c 	.word	0x1fff901c
    86e0:	1fff9018 	.word	0x1fff9018

000086e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11(void)
{
    86e4:	b500      	push	{lr}
    86e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    86e8:	f7f8 fa5c 	bl	ba4 <Sys_GetCoreID>
    86ec:	4603      	mov	r3, r0
    86ee:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId]--;
    86f0:	4a0d      	ldr	r2, [pc, #52]	; (8728 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x44>)
    86f2:	9b01      	ldr	r3, [sp, #4]
    86f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86f8:	1e5a      	subs	r2, r3, #1
    86fa:	490b      	ldr	r1, [pc, #44]	; (8728 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x44>)
    86fc:	9b01      	ldr	r3, [sp, #4]
    86fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    8702:	4a0a      	ldr	r2, [pc, #40]	; (872c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x48>)
    8704:	9b01      	ldr	r3, [sp, #4]
    8706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    870a:	f003 0301 	and.w	r3, r3, #1
    870e:	2b00      	cmp	r3, #0
    8710:	d106      	bne.n	8720 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x3c>
    8712:	4a05      	ldr	r2, [pc, #20]	; (8728 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x44>)
    8714:	9b01      	ldr	r3, [sp, #4]
    8716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    871a:	2b00      	cmp	r3, #0
    871c:	d100      	bne.n	8720 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    871e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8720:	bf00      	nop
    8722:	b003      	add	sp, #12
    8724:	f85d fb04 	ldr.w	pc, [sp], #4
    8728:	1fff901c 	.word	0x1fff901c
    872c:	1fff9018 	.word	0x1fff9018

00008730 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17(void)
{
    8730:	b500      	push	{lr}
    8732:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8734:	f7f8 fa36 	bl	ba4 <Sys_GetCoreID>
    8738:	4603      	mov	r3, r0
    873a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId])
    873c:	4a10      	ldr	r2, [pc, #64]	; (8780 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x50>)
    873e:	9b01      	ldr	r3, [sp, #4]
    8740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8744:	2b00      	cmp	r3, #0
    8746:	d10d      	bne.n	8764 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8748:	f7f8 f94b 	bl	9e2 <Gpt_schm_read_msr>
    874c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    874e:	9b00      	ldr	r3, [sp, #0]
    8750:	f003 0301 	and.w	r3, r3, #1
    8754:	2b00      	cmp	r3, #0
    8756:	d100      	bne.n	875a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8758:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    875a:	490a      	ldr	r1, [pc, #40]	; (8784 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x54>)
    875c:	9b01      	ldr	r3, [sp, #4]
    875e:	9a00      	ldr	r2, [sp, #0]
    8760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId]++;
    8764:	4a06      	ldr	r2, [pc, #24]	; (8780 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x50>)
    8766:	9b01      	ldr	r3, [sp, #4]
    8768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    876c:	1c5a      	adds	r2, r3, #1
    876e:	4904      	ldr	r1, [pc, #16]	; (8780 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x50>)
    8770:	9b01      	ldr	r3, [sp, #4]
    8772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8776:	bf00      	nop
    8778:	b003      	add	sp, #12
    877a:	f85d fb04 	ldr.w	pc, [sp], #4
    877e:	bf00      	nop
    8780:	1fff9024 	.word	0x1fff9024
    8784:	1fff9020 	.word	0x1fff9020

00008788 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17(void)
{
    8788:	b500      	push	{lr}
    878a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    878c:	f7f8 fa0a 	bl	ba4 <Sys_GetCoreID>
    8790:	4603      	mov	r3, r0
    8792:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId]--;
    8794:	4a0d      	ldr	r2, [pc, #52]	; (87cc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x44>)
    8796:	9b01      	ldr	r3, [sp, #4]
    8798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    879c:	1e5a      	subs	r2, r3, #1
    879e:	490b      	ldr	r1, [pc, #44]	; (87cc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x44>)
    87a0:	9b01      	ldr	r3, [sp, #4]
    87a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    87a6:	4a0a      	ldr	r2, [pc, #40]	; (87d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x48>)
    87a8:	9b01      	ldr	r3, [sp, #4]
    87aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87ae:	f003 0301 	and.w	r3, r3, #1
    87b2:	2b00      	cmp	r3, #0
    87b4:	d106      	bne.n	87c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x3c>
    87b6:	4a05      	ldr	r2, [pc, #20]	; (87cc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x44>)
    87b8:	9b01      	ldr	r3, [sp, #4]
    87ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87be:	2b00      	cmp	r3, #0
    87c0:	d100      	bne.n	87c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    87c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    87c4:	bf00      	nop
    87c6:	b003      	add	sp, #12
    87c8:	f85d fb04 	ldr.w	pc, [sp], #4
    87cc:	1fff9024 	.word	0x1fff9024
    87d0:	1fff9020 	.word	0x1fff9020

000087d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21(void)
{
    87d4:	b500      	push	{lr}
    87d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    87d8:	f7f8 f9e4 	bl	ba4 <Sys_GetCoreID>
    87dc:	4603      	mov	r3, r0
    87de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId])
    87e0:	4a10      	ldr	r2, [pc, #64]	; (8824 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x50>)
    87e2:	9b01      	ldr	r3, [sp, #4]
    87e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87e8:	2b00      	cmp	r3, #0
    87ea:	d10d      	bne.n	8808 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    87ec:	f7f8 f8f9 	bl	9e2 <Gpt_schm_read_msr>
    87f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    87f2:	9b00      	ldr	r3, [sp, #0]
    87f4:	f003 0301 	and.w	r3, r3, #1
    87f8:	2b00      	cmp	r3, #0
    87fa:	d100      	bne.n	87fe <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    87fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    87fe:	490a      	ldr	r1, [pc, #40]	; (8828 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x54>)
    8800:	9b01      	ldr	r3, [sp, #4]
    8802:	9a00      	ldr	r2, [sp, #0]
    8804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId]++;
    8808:	4a06      	ldr	r2, [pc, #24]	; (8824 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x50>)
    880a:	9b01      	ldr	r3, [sp, #4]
    880c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8810:	1c5a      	adds	r2, r3, #1
    8812:	4904      	ldr	r1, [pc, #16]	; (8824 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x50>)
    8814:	9b01      	ldr	r3, [sp, #4]
    8816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    881a:	bf00      	nop
    881c:	b003      	add	sp, #12
    881e:	f85d fb04 	ldr.w	pc, [sp], #4
    8822:	bf00      	nop
    8824:	1fff902c 	.word	0x1fff902c
    8828:	1fff9028 	.word	0x1fff9028

0000882c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21(void)
{
    882c:	b500      	push	{lr}
    882e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8830:	f7f8 f9b8 	bl	ba4 <Sys_GetCoreID>
    8834:	4603      	mov	r3, r0
    8836:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId]--;
    8838:	4a0d      	ldr	r2, [pc, #52]	; (8870 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x44>)
    883a:	9b01      	ldr	r3, [sp, #4]
    883c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8840:	1e5a      	subs	r2, r3, #1
    8842:	490b      	ldr	r1, [pc, #44]	; (8870 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x44>)
    8844:	9b01      	ldr	r3, [sp, #4]
    8846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    884a:	4a0a      	ldr	r2, [pc, #40]	; (8874 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x48>)
    884c:	9b01      	ldr	r3, [sp, #4]
    884e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8852:	f003 0301 	and.w	r3, r3, #1
    8856:	2b00      	cmp	r3, #0
    8858:	d106      	bne.n	8868 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x3c>
    885a:	4a05      	ldr	r2, [pc, #20]	; (8870 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x44>)
    885c:	9b01      	ldr	r3, [sp, #4]
    885e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8862:	2b00      	cmp	r3, #0
    8864:	d100      	bne.n	8868 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8866:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8868:	bf00      	nop
    886a:	b003      	add	sp, #12
    886c:	f85d fb04 	ldr.w	pc, [sp], #4
    8870:	1fff902c 	.word	0x1fff902c
    8874:	1fff9028 	.word	0x1fff9028

00008878 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22(void)
{
    8878:	b500      	push	{lr}
    887a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    887c:	f7f8 f992 	bl	ba4 <Sys_GetCoreID>
    8880:	4603      	mov	r3, r0
    8882:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId])
    8884:	4a10      	ldr	r2, [pc, #64]	; (88c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x50>)
    8886:	9b01      	ldr	r3, [sp, #4]
    8888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    888c:	2b00      	cmp	r3, #0
    888e:	d10d      	bne.n	88ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8890:	f7f8 f8a7 	bl	9e2 <Gpt_schm_read_msr>
    8894:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8896:	9b00      	ldr	r3, [sp, #0]
    8898:	f003 0301 	and.w	r3, r3, #1
    889c:	2b00      	cmp	r3, #0
    889e:	d100      	bne.n	88a2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    88a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    88a2:	490a      	ldr	r1, [pc, #40]	; (88cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x54>)
    88a4:	9b01      	ldr	r3, [sp, #4]
    88a6:	9a00      	ldr	r2, [sp, #0]
    88a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId]++;
    88ac:	4a06      	ldr	r2, [pc, #24]	; (88c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x50>)
    88ae:	9b01      	ldr	r3, [sp, #4]
    88b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88b4:	1c5a      	adds	r2, r3, #1
    88b6:	4904      	ldr	r1, [pc, #16]	; (88c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x50>)
    88b8:	9b01      	ldr	r3, [sp, #4]
    88ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    88be:	bf00      	nop
    88c0:	b003      	add	sp, #12
    88c2:	f85d fb04 	ldr.w	pc, [sp], #4
    88c6:	bf00      	nop
    88c8:	1fff9034 	.word	0x1fff9034
    88cc:	1fff9030 	.word	0x1fff9030

000088d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22(void)
{
    88d0:	b500      	push	{lr}
    88d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    88d4:	f7f8 f966 	bl	ba4 <Sys_GetCoreID>
    88d8:	4603      	mov	r3, r0
    88da:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId]--;
    88dc:	4a0d      	ldr	r2, [pc, #52]	; (8914 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x44>)
    88de:	9b01      	ldr	r3, [sp, #4]
    88e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88e4:	1e5a      	subs	r2, r3, #1
    88e6:	490b      	ldr	r1, [pc, #44]	; (8914 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x44>)
    88e8:	9b01      	ldr	r3, [sp, #4]
    88ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    88ee:	4a0a      	ldr	r2, [pc, #40]	; (8918 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x48>)
    88f0:	9b01      	ldr	r3, [sp, #4]
    88f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88f6:	f003 0301 	and.w	r3, r3, #1
    88fa:	2b00      	cmp	r3, #0
    88fc:	d106      	bne.n	890c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x3c>
    88fe:	4a05      	ldr	r2, [pc, #20]	; (8914 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x44>)
    8900:	9b01      	ldr	r3, [sp, #4]
    8902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8906:	2b00      	cmp	r3, #0
    8908:	d100      	bne.n	890c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    890a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    890c:	bf00      	nop
    890e:	b003      	add	sp, #12
    8910:	f85d fb04 	ldr.w	pc, [sp], #4
    8914:	1fff9034 	.word	0x1fff9034
    8918:	1fff9030 	.word	0x1fff9030

0000891c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23(void)
{
    891c:	b500      	push	{lr}
    891e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8920:	f7f8 f940 	bl	ba4 <Sys_GetCoreID>
    8924:	4603      	mov	r3, r0
    8926:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId])
    8928:	4a10      	ldr	r2, [pc, #64]	; (896c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x50>)
    892a:	9b01      	ldr	r3, [sp, #4]
    892c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8930:	2b00      	cmp	r3, #0
    8932:	d10d      	bne.n	8950 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8934:	f7f8 f855 	bl	9e2 <Gpt_schm_read_msr>
    8938:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    893a:	9b00      	ldr	r3, [sp, #0]
    893c:	f003 0301 	and.w	r3, r3, #1
    8940:	2b00      	cmp	r3, #0
    8942:	d100      	bne.n	8946 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8944:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    8946:	490a      	ldr	r1, [pc, #40]	; (8970 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x54>)
    8948:	9b01      	ldr	r3, [sp, #4]
    894a:	9a00      	ldr	r2, [sp, #0]
    894c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId]++;
    8950:	4a06      	ldr	r2, [pc, #24]	; (896c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x50>)
    8952:	9b01      	ldr	r3, [sp, #4]
    8954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8958:	1c5a      	adds	r2, r3, #1
    895a:	4904      	ldr	r1, [pc, #16]	; (896c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x50>)
    895c:	9b01      	ldr	r3, [sp, #4]
    895e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8962:	bf00      	nop
    8964:	b003      	add	sp, #12
    8966:	f85d fb04 	ldr.w	pc, [sp], #4
    896a:	bf00      	nop
    896c:	1fff903c 	.word	0x1fff903c
    8970:	1fff9038 	.word	0x1fff9038

00008974 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23(void)
{
    8974:	b500      	push	{lr}
    8976:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8978:	f7f8 f914 	bl	ba4 <Sys_GetCoreID>
    897c:	4603      	mov	r3, r0
    897e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId]--;
    8980:	4a0d      	ldr	r2, [pc, #52]	; (89b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x44>)
    8982:	9b01      	ldr	r3, [sp, #4]
    8984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8988:	1e5a      	subs	r2, r3, #1
    898a:	490b      	ldr	r1, [pc, #44]	; (89b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x44>)
    898c:	9b01      	ldr	r3, [sp, #4]
    898e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    8992:	4a0a      	ldr	r2, [pc, #40]	; (89bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x48>)
    8994:	9b01      	ldr	r3, [sp, #4]
    8996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    899a:	f003 0301 	and.w	r3, r3, #1
    899e:	2b00      	cmp	r3, #0
    89a0:	d106      	bne.n	89b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x3c>
    89a2:	4a05      	ldr	r2, [pc, #20]	; (89b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x44>)
    89a4:	9b01      	ldr	r3, [sp, #4]
    89a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89aa:	2b00      	cmp	r3, #0
    89ac:	d100      	bne.n	89b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    89ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    89b0:	bf00      	nop
    89b2:	b003      	add	sp, #12
    89b4:	f85d fb04 	ldr.w	pc, [sp], #4
    89b8:	1fff903c 	.word	0x1fff903c
    89bc:	1fff9038 	.word	0x1fff9038

000089c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24(void)
{
    89c0:	b500      	push	{lr}
    89c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    89c4:	f7f8 f8ee 	bl	ba4 <Sys_GetCoreID>
    89c8:	4603      	mov	r3, r0
    89ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId])
    89cc:	4a10      	ldr	r2, [pc, #64]	; (8a10 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x50>)
    89ce:	9b01      	ldr	r3, [sp, #4]
    89d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89d4:	2b00      	cmp	r3, #0
    89d6:	d10d      	bne.n	89f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    89d8:	f7f8 f803 	bl	9e2 <Gpt_schm_read_msr>
    89dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    89de:	9b00      	ldr	r3, [sp, #0]
    89e0:	f003 0301 	and.w	r3, r3, #1
    89e4:	2b00      	cmp	r3, #0
    89e6:	d100      	bne.n	89ea <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    89e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    89ea:	490a      	ldr	r1, [pc, #40]	; (8a14 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x54>)
    89ec:	9b01      	ldr	r3, [sp, #4]
    89ee:	9a00      	ldr	r2, [sp, #0]
    89f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId]++;
    89f4:	4a06      	ldr	r2, [pc, #24]	; (8a10 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x50>)
    89f6:	9b01      	ldr	r3, [sp, #4]
    89f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89fc:	1c5a      	adds	r2, r3, #1
    89fe:	4904      	ldr	r1, [pc, #16]	; (8a10 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x50>)
    8a00:	9b01      	ldr	r3, [sp, #4]
    8a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8a06:	bf00      	nop
    8a08:	b003      	add	sp, #12
    8a0a:	f85d fb04 	ldr.w	pc, [sp], #4
    8a0e:	bf00      	nop
    8a10:	1fff9044 	.word	0x1fff9044
    8a14:	1fff9040 	.word	0x1fff9040

00008a18 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24(void)
{
    8a18:	b500      	push	{lr}
    8a1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8a1c:	f7f8 f8c2 	bl	ba4 <Sys_GetCoreID>
    8a20:	4603      	mov	r3, r0
    8a22:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId]--;
    8a24:	4a0d      	ldr	r2, [pc, #52]	; (8a5c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x44>)
    8a26:	9b01      	ldr	r3, [sp, #4]
    8a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a2c:	1e5a      	subs	r2, r3, #1
    8a2e:	490b      	ldr	r1, [pc, #44]	; (8a5c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x44>)
    8a30:	9b01      	ldr	r3, [sp, #4]
    8a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    8a36:	4a0a      	ldr	r2, [pc, #40]	; (8a60 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x48>)
    8a38:	9b01      	ldr	r3, [sp, #4]
    8a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a3e:	f003 0301 	and.w	r3, r3, #1
    8a42:	2b00      	cmp	r3, #0
    8a44:	d106      	bne.n	8a54 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x3c>
    8a46:	4a05      	ldr	r2, [pc, #20]	; (8a5c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x44>)
    8a48:	9b01      	ldr	r3, [sp, #4]
    8a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a4e:	2b00      	cmp	r3, #0
    8a50:	d100      	bne.n	8a54 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8a52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8a54:	bf00      	nop
    8a56:	b003      	add	sp, #12
    8a58:	f85d fb04 	ldr.w	pc, [sp], #4
    8a5c:	1fff9044 	.word	0x1fff9044
    8a60:	1fff9040 	.word	0x1fff9040

00008a64 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25(void)
{
    8a64:	b500      	push	{lr}
    8a66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8a68:	f7f8 f89c 	bl	ba4 <Sys_GetCoreID>
    8a6c:	4603      	mov	r3, r0
    8a6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId])
    8a70:	4a10      	ldr	r2, [pc, #64]	; (8ab4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x50>)
    8a72:	9b01      	ldr	r3, [sp, #4]
    8a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a78:	2b00      	cmp	r3, #0
    8a7a:	d10d      	bne.n	8a98 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8a7c:	f7f7 ffb1 	bl	9e2 <Gpt_schm_read_msr>
    8a80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8a82:	9b00      	ldr	r3, [sp, #0]
    8a84:	f003 0301 	and.w	r3, r3, #1
    8a88:	2b00      	cmp	r3, #0
    8a8a:	d100      	bne.n	8a8e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8a8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    8a8e:	490a      	ldr	r1, [pc, #40]	; (8ab8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x54>)
    8a90:	9b01      	ldr	r3, [sp, #4]
    8a92:	9a00      	ldr	r2, [sp, #0]
    8a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId]++;
    8a98:	4a06      	ldr	r2, [pc, #24]	; (8ab4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x50>)
    8a9a:	9b01      	ldr	r3, [sp, #4]
    8a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8aa0:	1c5a      	adds	r2, r3, #1
    8aa2:	4904      	ldr	r1, [pc, #16]	; (8ab4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x50>)
    8aa4:	9b01      	ldr	r3, [sp, #4]
    8aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8aaa:	bf00      	nop
    8aac:	b003      	add	sp, #12
    8aae:	f85d fb04 	ldr.w	pc, [sp], #4
    8ab2:	bf00      	nop
    8ab4:	1fff904c 	.word	0x1fff904c
    8ab8:	1fff9048 	.word	0x1fff9048

00008abc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25(void)
{
    8abc:	b500      	push	{lr}
    8abe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8ac0:	f7f8 f870 	bl	ba4 <Sys_GetCoreID>
    8ac4:	4603      	mov	r3, r0
    8ac6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId]--;
    8ac8:	4a0d      	ldr	r2, [pc, #52]	; (8b00 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x44>)
    8aca:	9b01      	ldr	r3, [sp, #4]
    8acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ad0:	1e5a      	subs	r2, r3, #1
    8ad2:	490b      	ldr	r1, [pc, #44]	; (8b00 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x44>)
    8ad4:	9b01      	ldr	r3, [sp, #4]
    8ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    8ada:	4a0a      	ldr	r2, [pc, #40]	; (8b04 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x48>)
    8adc:	9b01      	ldr	r3, [sp, #4]
    8ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ae2:	f003 0301 	and.w	r3, r3, #1
    8ae6:	2b00      	cmp	r3, #0
    8ae8:	d106      	bne.n	8af8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x3c>
    8aea:	4a05      	ldr	r2, [pc, #20]	; (8b00 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x44>)
    8aec:	9b01      	ldr	r3, [sp, #4]
    8aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8af2:	2b00      	cmp	r3, #0
    8af4:	d100      	bne.n	8af8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8af6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8af8:	bf00      	nop
    8afa:	b003      	add	sp, #12
    8afc:	f85d fb04 	ldr.w	pc, [sp], #4
    8b00:	1fff904c 	.word	0x1fff904c
    8b04:	1fff9048 	.word	0x1fff9048

00008b08 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26(void)
{
    8b08:	b500      	push	{lr}
    8b0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8b0c:	f7f8 f84a 	bl	ba4 <Sys_GetCoreID>
    8b10:	4603      	mov	r3, r0
    8b12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId])
    8b14:	4a10      	ldr	r2, [pc, #64]	; (8b58 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x50>)
    8b16:	9b01      	ldr	r3, [sp, #4]
    8b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b1c:	2b00      	cmp	r3, #0
    8b1e:	d10d      	bne.n	8b3c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8b20:	f7f7 ff5f 	bl	9e2 <Gpt_schm_read_msr>
    8b24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8b26:	9b00      	ldr	r3, [sp, #0]
    8b28:	f003 0301 	and.w	r3, r3, #1
    8b2c:	2b00      	cmp	r3, #0
    8b2e:	d100      	bne.n	8b32 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8b30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    8b32:	490a      	ldr	r1, [pc, #40]	; (8b5c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x54>)
    8b34:	9b01      	ldr	r3, [sp, #4]
    8b36:	9a00      	ldr	r2, [sp, #0]
    8b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId]++;
    8b3c:	4a06      	ldr	r2, [pc, #24]	; (8b58 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x50>)
    8b3e:	9b01      	ldr	r3, [sp, #4]
    8b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b44:	1c5a      	adds	r2, r3, #1
    8b46:	4904      	ldr	r1, [pc, #16]	; (8b58 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x50>)
    8b48:	9b01      	ldr	r3, [sp, #4]
    8b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8b4e:	bf00      	nop
    8b50:	b003      	add	sp, #12
    8b52:	f85d fb04 	ldr.w	pc, [sp], #4
    8b56:	bf00      	nop
    8b58:	1fff9054 	.word	0x1fff9054
    8b5c:	1fff9050 	.word	0x1fff9050

00008b60 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26(void)
{
    8b60:	b500      	push	{lr}
    8b62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8b64:	f7f8 f81e 	bl	ba4 <Sys_GetCoreID>
    8b68:	4603      	mov	r3, r0
    8b6a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId]--;
    8b6c:	4a0d      	ldr	r2, [pc, #52]	; (8ba4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x44>)
    8b6e:	9b01      	ldr	r3, [sp, #4]
    8b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b74:	1e5a      	subs	r2, r3, #1
    8b76:	490b      	ldr	r1, [pc, #44]	; (8ba4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x44>)
    8b78:	9b01      	ldr	r3, [sp, #4]
    8b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    8b7e:	4a0a      	ldr	r2, [pc, #40]	; (8ba8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x48>)
    8b80:	9b01      	ldr	r3, [sp, #4]
    8b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b86:	f003 0301 	and.w	r3, r3, #1
    8b8a:	2b00      	cmp	r3, #0
    8b8c:	d106      	bne.n	8b9c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x3c>
    8b8e:	4a05      	ldr	r2, [pc, #20]	; (8ba4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x44>)
    8b90:	9b01      	ldr	r3, [sp, #4]
    8b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b96:	2b00      	cmp	r3, #0
    8b98:	d100      	bne.n	8b9c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8b9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8b9c:	bf00      	nop
    8b9e:	b003      	add	sp, #12
    8ba0:	f85d fb04 	ldr.w	pc, [sp], #4
    8ba4:	1fff9054 	.word	0x1fff9054
    8ba8:	1fff9050 	.word	0x1fff9050

00008bac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29(void)
{
    8bac:	b500      	push	{lr}
    8bae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8bb0:	f7f7 fff8 	bl	ba4 <Sys_GetCoreID>
    8bb4:	4603      	mov	r3, r0
    8bb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId])
    8bb8:	4a10      	ldr	r2, [pc, #64]	; (8bfc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x50>)
    8bba:	9b01      	ldr	r3, [sp, #4]
    8bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bc0:	2b00      	cmp	r3, #0
    8bc2:	d10d      	bne.n	8be0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8bc4:	f7f7 ff0d 	bl	9e2 <Gpt_schm_read_msr>
    8bc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8bca:	9b00      	ldr	r3, [sp, #0]
    8bcc:	f003 0301 	and.w	r3, r3, #1
    8bd0:	2b00      	cmp	r3, #0
    8bd2:	d100      	bne.n	8bd6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8bd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_29[u32CoreId] = msr;
    8bd6:	490a      	ldr	r1, [pc, #40]	; (8c00 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x54>)
    8bd8:	9b01      	ldr	r3, [sp, #4]
    8bda:	9a00      	ldr	r2, [sp, #0]
    8bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId]++;
    8be0:	4a06      	ldr	r2, [pc, #24]	; (8bfc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x50>)
    8be2:	9b01      	ldr	r3, [sp, #4]
    8be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8be8:	1c5a      	adds	r2, r3, #1
    8bea:	4904      	ldr	r1, [pc, #16]	; (8bfc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x50>)
    8bec:	9b01      	ldr	r3, [sp, #4]
    8bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8bf2:	bf00      	nop
    8bf4:	b003      	add	sp, #12
    8bf6:	f85d fb04 	ldr.w	pc, [sp], #4
    8bfa:	bf00      	nop
    8bfc:	1fff905c 	.word	0x1fff905c
    8c00:	1fff9058 	.word	0x1fff9058

00008c04 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29(void)
{
    8c04:	b500      	push	{lr}
    8c06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c08:	f7f7 ffcc 	bl	ba4 <Sys_GetCoreID>
    8c0c:	4603      	mov	r3, r0
    8c0e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId]--;
    8c10:	4a0d      	ldr	r2, [pc, #52]	; (8c48 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x44>)
    8c12:	9b01      	ldr	r3, [sp, #4]
    8c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c18:	1e5a      	subs	r2, r3, #1
    8c1a:	490b      	ldr	r1, [pc, #44]	; (8c48 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x44>)
    8c1c:	9b01      	ldr	r3, [sp, #4]
    8c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
    8c22:	4a0a      	ldr	r2, [pc, #40]	; (8c4c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x48>)
    8c24:	9b01      	ldr	r3, [sp, #4]
    8c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c2a:	f003 0301 	and.w	r3, r3, #1
    8c2e:	2b00      	cmp	r3, #0
    8c30:	d106      	bne.n	8c40 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x3c>
    8c32:	4a05      	ldr	r2, [pc, #20]	; (8c48 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x44>)
    8c34:	9b01      	ldr	r3, [sp, #4]
    8c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	d100      	bne.n	8c40 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8c3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8c40:	bf00      	nop
    8c42:	b003      	add	sp, #12
    8c44:	f85d fb04 	ldr.w	pc, [sp], #4
    8c48:	1fff905c 	.word	0x1fff905c
    8c4c:	1fff9058 	.word	0x1fff9058

00008c50 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30(void)
{
    8c50:	b500      	push	{lr}
    8c52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c54:	f7f7 ffa6 	bl	ba4 <Sys_GetCoreID>
    8c58:	4603      	mov	r3, r0
    8c5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId])
    8c5c:	4a10      	ldr	r2, [pc, #64]	; (8ca0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x50>)
    8c5e:	9b01      	ldr	r3, [sp, #4]
    8c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c64:	2b00      	cmp	r3, #0
    8c66:	d10d      	bne.n	8c84 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8c68:	f7f7 febb 	bl	9e2 <Gpt_schm_read_msr>
    8c6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8c6e:	9b00      	ldr	r3, [sp, #0]
    8c70:	f003 0301 	and.w	r3, r3, #1
    8c74:	2b00      	cmp	r3, #0
    8c76:	d100      	bne.n	8c7a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8c78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_30[u32CoreId] = msr;
    8c7a:	490a      	ldr	r1, [pc, #40]	; (8ca4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x54>)
    8c7c:	9b01      	ldr	r3, [sp, #4]
    8c7e:	9a00      	ldr	r2, [sp, #0]
    8c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId]++;
    8c84:	4a06      	ldr	r2, [pc, #24]	; (8ca0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x50>)
    8c86:	9b01      	ldr	r3, [sp, #4]
    8c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c8c:	1c5a      	adds	r2, r3, #1
    8c8e:	4904      	ldr	r1, [pc, #16]	; (8ca0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x50>)
    8c90:	9b01      	ldr	r3, [sp, #4]
    8c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8c96:	bf00      	nop
    8c98:	b003      	add	sp, #12
    8c9a:	f85d fb04 	ldr.w	pc, [sp], #4
    8c9e:	bf00      	nop
    8ca0:	1fff9064 	.word	0x1fff9064
    8ca4:	1fff9060 	.word	0x1fff9060

00008ca8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30(void)
{
    8ca8:	b500      	push	{lr}
    8caa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8cac:	f7f7 ff7a 	bl	ba4 <Sys_GetCoreID>
    8cb0:	4603      	mov	r3, r0
    8cb2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId]--;
    8cb4:	4a0d      	ldr	r2, [pc, #52]	; (8cec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x44>)
    8cb6:	9b01      	ldr	r3, [sp, #4]
    8cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cbc:	1e5a      	subs	r2, r3, #1
    8cbe:	490b      	ldr	r1, [pc, #44]	; (8cec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x44>)
    8cc0:	9b01      	ldr	r3, [sp, #4]
    8cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
    8cc6:	4a0a      	ldr	r2, [pc, #40]	; (8cf0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x48>)
    8cc8:	9b01      	ldr	r3, [sp, #4]
    8cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cce:	f003 0301 	and.w	r3, r3, #1
    8cd2:	2b00      	cmp	r3, #0
    8cd4:	d106      	bne.n	8ce4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x3c>
    8cd6:	4a05      	ldr	r2, [pc, #20]	; (8cec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x44>)
    8cd8:	9b01      	ldr	r3, [sp, #4]
    8cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cde:	2b00      	cmp	r3, #0
    8ce0:	d100      	bne.n	8ce4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8ce2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8ce4:	bf00      	nop
    8ce6:	b003      	add	sp, #12
    8ce8:	f85d fb04 	ldr.w	pc, [sp], #4
    8cec:	1fff9064 	.word	0x1fff9064
    8cf0:	1fff9060 	.word	0x1fff9060

00008cf4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31(void)
{
    8cf4:	b500      	push	{lr}
    8cf6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8cf8:	f7f7 ff54 	bl	ba4 <Sys_GetCoreID>
    8cfc:	4603      	mov	r3, r0
    8cfe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId])
    8d00:	4a10      	ldr	r2, [pc, #64]	; (8d44 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x50>)
    8d02:	9b01      	ldr	r3, [sp, #4]
    8d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d08:	2b00      	cmp	r3, #0
    8d0a:	d10d      	bne.n	8d28 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8d0c:	f7f7 fe69 	bl	9e2 <Gpt_schm_read_msr>
    8d10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8d12:	9b00      	ldr	r3, [sp, #0]
    8d14:	f003 0301 	and.w	r3, r3, #1
    8d18:	2b00      	cmp	r3, #0
    8d1a:	d100      	bne.n	8d1e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8d1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_31[u32CoreId] = msr;
    8d1e:	490a      	ldr	r1, [pc, #40]	; (8d48 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x54>)
    8d20:	9b01      	ldr	r3, [sp, #4]
    8d22:	9a00      	ldr	r2, [sp, #0]
    8d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId]++;
    8d28:	4a06      	ldr	r2, [pc, #24]	; (8d44 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x50>)
    8d2a:	9b01      	ldr	r3, [sp, #4]
    8d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d30:	1c5a      	adds	r2, r3, #1
    8d32:	4904      	ldr	r1, [pc, #16]	; (8d44 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x50>)
    8d34:	9b01      	ldr	r3, [sp, #4]
    8d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8d3a:	bf00      	nop
    8d3c:	b003      	add	sp, #12
    8d3e:	f85d fb04 	ldr.w	pc, [sp], #4
    8d42:	bf00      	nop
    8d44:	1fff906c 	.word	0x1fff906c
    8d48:	1fff9068 	.word	0x1fff9068

00008d4c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31(void)
{
    8d4c:	b500      	push	{lr}
    8d4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8d50:	f7f7 ff28 	bl	ba4 <Sys_GetCoreID>
    8d54:	4603      	mov	r3, r0
    8d56:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId]--;
    8d58:	4a0d      	ldr	r2, [pc, #52]	; (8d90 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x44>)
    8d5a:	9b01      	ldr	r3, [sp, #4]
    8d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d60:	1e5a      	subs	r2, r3, #1
    8d62:	490b      	ldr	r1, [pc, #44]	; (8d90 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x44>)
    8d64:	9b01      	ldr	r3, [sp, #4]
    8d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
    8d6a:	4a0a      	ldr	r2, [pc, #40]	; (8d94 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x48>)
    8d6c:	9b01      	ldr	r3, [sp, #4]
    8d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d72:	f003 0301 	and.w	r3, r3, #1
    8d76:	2b00      	cmp	r3, #0
    8d78:	d106      	bne.n	8d88 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x3c>
    8d7a:	4a05      	ldr	r2, [pc, #20]	; (8d90 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x44>)
    8d7c:	9b01      	ldr	r3, [sp, #4]
    8d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d82:	2b00      	cmp	r3, #0
    8d84:	d100      	bne.n	8d88 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8d86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8d88:	bf00      	nop
    8d8a:	b003      	add	sp, #12
    8d8c:	f85d fb04 	ldr.w	pc, [sp], #4
    8d90:	1fff906c 	.word	0x1fff906c
    8d94:	1fff9068 	.word	0x1fff9068

00008d98 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35(void)
{
    8d98:	b500      	push	{lr}
    8d9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8d9c:	f7f7 ff02 	bl	ba4 <Sys_GetCoreID>
    8da0:	4603      	mov	r3, r0
    8da2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId])
    8da4:	4a10      	ldr	r2, [pc, #64]	; (8de8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x50>)
    8da6:	9b01      	ldr	r3, [sp, #4]
    8da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dac:	2b00      	cmp	r3, #0
    8dae:	d10d      	bne.n	8dcc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8db0:	f7f7 fe17 	bl	9e2 <Gpt_schm_read_msr>
    8db4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8db6:	9b00      	ldr	r3, [sp, #0]
    8db8:	f003 0301 	and.w	r3, r3, #1
    8dbc:	2b00      	cmp	r3, #0
    8dbe:	d100      	bne.n	8dc2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8dc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_35[u32CoreId] = msr;
    8dc2:	490a      	ldr	r1, [pc, #40]	; (8dec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x54>)
    8dc4:	9b01      	ldr	r3, [sp, #4]
    8dc6:	9a00      	ldr	r2, [sp, #0]
    8dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId]++;
    8dcc:	4a06      	ldr	r2, [pc, #24]	; (8de8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x50>)
    8dce:	9b01      	ldr	r3, [sp, #4]
    8dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dd4:	1c5a      	adds	r2, r3, #1
    8dd6:	4904      	ldr	r1, [pc, #16]	; (8de8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x50>)
    8dd8:	9b01      	ldr	r3, [sp, #4]
    8dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8dde:	bf00      	nop
    8de0:	b003      	add	sp, #12
    8de2:	f85d fb04 	ldr.w	pc, [sp], #4
    8de6:	bf00      	nop
    8de8:	1fff9074 	.word	0x1fff9074
    8dec:	1fff9070 	.word	0x1fff9070

00008df0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35(void)
{
    8df0:	b500      	push	{lr}
    8df2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8df4:	f7f7 fed6 	bl	ba4 <Sys_GetCoreID>
    8df8:	4603      	mov	r3, r0
    8dfa:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId]--;
    8dfc:	4a0d      	ldr	r2, [pc, #52]	; (8e34 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x44>)
    8dfe:	9b01      	ldr	r3, [sp, #4]
    8e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e04:	1e5a      	subs	r2, r3, #1
    8e06:	490b      	ldr	r1, [pc, #44]	; (8e34 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x44>)
    8e08:	9b01      	ldr	r3, [sp, #4]
    8e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
    8e0e:	4a0a      	ldr	r2, [pc, #40]	; (8e38 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x48>)
    8e10:	9b01      	ldr	r3, [sp, #4]
    8e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e16:	f003 0301 	and.w	r3, r3, #1
    8e1a:	2b00      	cmp	r3, #0
    8e1c:	d106      	bne.n	8e2c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x3c>
    8e1e:	4a05      	ldr	r2, [pc, #20]	; (8e34 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x44>)
    8e20:	9b01      	ldr	r3, [sp, #4]
    8e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e26:	2b00      	cmp	r3, #0
    8e28:	d100      	bne.n	8e2c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8e2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8e2c:	bf00      	nop
    8e2e:	b003      	add	sp, #12
    8e30:	f85d fb04 	ldr.w	pc, [sp], #4
    8e34:	1fff9074 	.word	0x1fff9074
    8e38:	1fff9070 	.word	0x1fff9070

00008e3c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36(void)
{
    8e3c:	b500      	push	{lr}
    8e3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e40:	f7f7 feb0 	bl	ba4 <Sys_GetCoreID>
    8e44:	4603      	mov	r3, r0
    8e46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId])
    8e48:	4a10      	ldr	r2, [pc, #64]	; (8e8c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x50>)
    8e4a:	9b01      	ldr	r3, [sp, #4]
    8e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e50:	2b00      	cmp	r3, #0
    8e52:	d10d      	bne.n	8e70 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8e54:	f7f7 fdc5 	bl	9e2 <Gpt_schm_read_msr>
    8e58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8e5a:	9b00      	ldr	r3, [sp, #0]
    8e5c:	f003 0301 	and.w	r3, r3, #1
    8e60:	2b00      	cmp	r3, #0
    8e62:	d100      	bne.n	8e66 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8e64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_36[u32CoreId] = msr;
    8e66:	490a      	ldr	r1, [pc, #40]	; (8e90 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x54>)
    8e68:	9b01      	ldr	r3, [sp, #4]
    8e6a:	9a00      	ldr	r2, [sp, #0]
    8e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId]++;
    8e70:	4a06      	ldr	r2, [pc, #24]	; (8e8c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x50>)
    8e72:	9b01      	ldr	r3, [sp, #4]
    8e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e78:	1c5a      	adds	r2, r3, #1
    8e7a:	4904      	ldr	r1, [pc, #16]	; (8e8c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x50>)
    8e7c:	9b01      	ldr	r3, [sp, #4]
    8e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8e82:	bf00      	nop
    8e84:	b003      	add	sp, #12
    8e86:	f85d fb04 	ldr.w	pc, [sp], #4
    8e8a:	bf00      	nop
    8e8c:	1fff907c 	.word	0x1fff907c
    8e90:	1fff9078 	.word	0x1fff9078

00008e94 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36(void)
{
    8e94:	b500      	push	{lr}
    8e96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e98:	f7f7 fe84 	bl	ba4 <Sys_GetCoreID>
    8e9c:	4603      	mov	r3, r0
    8e9e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId]--;
    8ea0:	4a0d      	ldr	r2, [pc, #52]	; (8ed8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x44>)
    8ea2:	9b01      	ldr	r3, [sp, #4]
    8ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ea8:	1e5a      	subs	r2, r3, #1
    8eaa:	490b      	ldr	r1, [pc, #44]	; (8ed8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x44>)
    8eac:	9b01      	ldr	r3, [sp, #4]
    8eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
    8eb2:	4a0a      	ldr	r2, [pc, #40]	; (8edc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x48>)
    8eb4:	9b01      	ldr	r3, [sp, #4]
    8eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8eba:	f003 0301 	and.w	r3, r3, #1
    8ebe:	2b00      	cmp	r3, #0
    8ec0:	d106      	bne.n	8ed0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x3c>
    8ec2:	4a05      	ldr	r2, [pc, #20]	; (8ed8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x44>)
    8ec4:	9b01      	ldr	r3, [sp, #4]
    8ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8eca:	2b00      	cmp	r3, #0
    8ecc:	d100      	bne.n	8ed0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8ece:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8ed0:	bf00      	nop
    8ed2:	b003      	add	sp, #12
    8ed4:	f85d fb04 	ldr.w	pc, [sp], #4
    8ed8:	1fff907c 	.word	0x1fff907c
    8edc:	1fff9078 	.word	0x1fff9078

00008ee0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38(void)
{
    8ee0:	b500      	push	{lr}
    8ee2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8ee4:	f7f7 fe5e 	bl	ba4 <Sys_GetCoreID>
    8ee8:	4603      	mov	r3, r0
    8eea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId])
    8eec:	4a10      	ldr	r2, [pc, #64]	; (8f30 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x50>)
    8eee:	9b01      	ldr	r3, [sp, #4]
    8ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ef4:	2b00      	cmp	r3, #0
    8ef6:	d10d      	bne.n	8f14 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8ef8:	f7f7 fd73 	bl	9e2 <Gpt_schm_read_msr>
    8efc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8efe:	9b00      	ldr	r3, [sp, #0]
    8f00:	f003 0301 	and.w	r3, r3, #1
    8f04:	2b00      	cmp	r3, #0
    8f06:	d100      	bne.n	8f0a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8f08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_38[u32CoreId] = msr;
    8f0a:	490a      	ldr	r1, [pc, #40]	; (8f34 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x54>)
    8f0c:	9b01      	ldr	r3, [sp, #4]
    8f0e:	9a00      	ldr	r2, [sp, #0]
    8f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId]++;
    8f14:	4a06      	ldr	r2, [pc, #24]	; (8f30 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x50>)
    8f16:	9b01      	ldr	r3, [sp, #4]
    8f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f1c:	1c5a      	adds	r2, r3, #1
    8f1e:	4904      	ldr	r1, [pc, #16]	; (8f30 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x50>)
    8f20:	9b01      	ldr	r3, [sp, #4]
    8f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8f26:	bf00      	nop
    8f28:	b003      	add	sp, #12
    8f2a:	f85d fb04 	ldr.w	pc, [sp], #4
    8f2e:	bf00      	nop
    8f30:	1fff9084 	.word	0x1fff9084
    8f34:	1fff9080 	.word	0x1fff9080

00008f38 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38(void)
{
    8f38:	b500      	push	{lr}
    8f3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f3c:	f7f7 fe32 	bl	ba4 <Sys_GetCoreID>
    8f40:	4603      	mov	r3, r0
    8f42:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId]--;
    8f44:	4a0d      	ldr	r2, [pc, #52]	; (8f7c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x44>)
    8f46:	9b01      	ldr	r3, [sp, #4]
    8f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f4c:	1e5a      	subs	r2, r3, #1
    8f4e:	490b      	ldr	r1, [pc, #44]	; (8f7c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x44>)
    8f50:	9b01      	ldr	r3, [sp, #4]
    8f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
    8f56:	4a0a      	ldr	r2, [pc, #40]	; (8f80 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x48>)
    8f58:	9b01      	ldr	r3, [sp, #4]
    8f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f5e:	f003 0301 	and.w	r3, r3, #1
    8f62:	2b00      	cmp	r3, #0
    8f64:	d106      	bne.n	8f74 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x3c>
    8f66:	4a05      	ldr	r2, [pc, #20]	; (8f7c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x44>)
    8f68:	9b01      	ldr	r3, [sp, #4]
    8f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f6e:	2b00      	cmp	r3, #0
    8f70:	d100      	bne.n	8f74 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8f72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8f74:	bf00      	nop
    8f76:	b003      	add	sp, #12
    8f78:	f85d fb04 	ldr.w	pc, [sp], #4
    8f7c:	1fff9084 	.word	0x1fff9084
    8f80:	1fff9080 	.word	0x1fff9080

00008f84 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39(void)
{
    8f84:	b500      	push	{lr}
    8f86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f88:	f7f7 fe0c 	bl	ba4 <Sys_GetCoreID>
    8f8c:	4603      	mov	r3, r0
    8f8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId])
    8f90:	4a10      	ldr	r2, [pc, #64]	; (8fd4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x50>)
    8f92:	9b01      	ldr	r3, [sp, #4]
    8f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f98:	2b00      	cmp	r3, #0
    8f9a:	d10d      	bne.n	8fb8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8f9c:	f7f7 fd21 	bl	9e2 <Gpt_schm_read_msr>
    8fa0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8fa2:	9b00      	ldr	r3, [sp, #0]
    8fa4:	f003 0301 	and.w	r3, r3, #1
    8fa8:	2b00      	cmp	r3, #0
    8faa:	d100      	bne.n	8fae <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8fac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_39[u32CoreId] = msr;
    8fae:	490a      	ldr	r1, [pc, #40]	; (8fd8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x54>)
    8fb0:	9b01      	ldr	r3, [sp, #4]
    8fb2:	9a00      	ldr	r2, [sp, #0]
    8fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId]++;
    8fb8:	4a06      	ldr	r2, [pc, #24]	; (8fd4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x50>)
    8fba:	9b01      	ldr	r3, [sp, #4]
    8fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fc0:	1c5a      	adds	r2, r3, #1
    8fc2:	4904      	ldr	r1, [pc, #16]	; (8fd4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x50>)
    8fc4:	9b01      	ldr	r3, [sp, #4]
    8fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8fca:	bf00      	nop
    8fcc:	b003      	add	sp, #12
    8fce:	f85d fb04 	ldr.w	pc, [sp], #4
    8fd2:	bf00      	nop
    8fd4:	1fff908c 	.word	0x1fff908c
    8fd8:	1fff9088 	.word	0x1fff9088

00008fdc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39(void)
{
    8fdc:	b500      	push	{lr}
    8fde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8fe0:	f7f7 fde0 	bl	ba4 <Sys_GetCoreID>
    8fe4:	4603      	mov	r3, r0
    8fe6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId]--;
    8fe8:	4a0d      	ldr	r2, [pc, #52]	; (9020 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x44>)
    8fea:	9b01      	ldr	r3, [sp, #4]
    8fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ff0:	1e5a      	subs	r2, r3, #1
    8ff2:	490b      	ldr	r1, [pc, #44]	; (9020 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x44>)
    8ff4:	9b01      	ldr	r3, [sp, #4]
    8ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
    8ffa:	4a0a      	ldr	r2, [pc, #40]	; (9024 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x48>)
    8ffc:	9b01      	ldr	r3, [sp, #4]
    8ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9002:	f003 0301 	and.w	r3, r3, #1
    9006:	2b00      	cmp	r3, #0
    9008:	d106      	bne.n	9018 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x3c>
    900a:	4a05      	ldr	r2, [pc, #20]	; (9020 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x44>)
    900c:	9b01      	ldr	r3, [sp, #4]
    900e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9012:	2b00      	cmp	r3, #0
    9014:	d100      	bne.n	9018 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9016:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9018:	bf00      	nop
    901a:	b003      	add	sp, #12
    901c:	f85d fb04 	ldr.w	pc, [sp], #4
    9020:	1fff908c 	.word	0x1fff908c
    9024:	1fff9088 	.word	0x1fff9088

00009028 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40(void)
{
    9028:	b500      	push	{lr}
    902a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    902c:	f7f7 fdba 	bl	ba4 <Sys_GetCoreID>
    9030:	4603      	mov	r3, r0
    9032:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId])
    9034:	4a10      	ldr	r2, [pc, #64]	; (9078 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x50>)
    9036:	9b01      	ldr	r3, [sp, #4]
    9038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    903c:	2b00      	cmp	r3, #0
    903e:	d10d      	bne.n	905c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9040:	f7f7 fccf 	bl	9e2 <Gpt_schm_read_msr>
    9044:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9046:	9b00      	ldr	r3, [sp, #0]
    9048:	f003 0301 	and.w	r3, r3, #1
    904c:	2b00      	cmp	r3, #0
    904e:	d100      	bne.n	9052 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9050:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_40[u32CoreId] = msr;
    9052:	490a      	ldr	r1, [pc, #40]	; (907c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x54>)
    9054:	9b01      	ldr	r3, [sp, #4]
    9056:	9a00      	ldr	r2, [sp, #0]
    9058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId]++;
    905c:	4a06      	ldr	r2, [pc, #24]	; (9078 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x50>)
    905e:	9b01      	ldr	r3, [sp, #4]
    9060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9064:	1c5a      	adds	r2, r3, #1
    9066:	4904      	ldr	r1, [pc, #16]	; (9078 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x50>)
    9068:	9b01      	ldr	r3, [sp, #4]
    906a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    906e:	bf00      	nop
    9070:	b003      	add	sp, #12
    9072:	f85d fb04 	ldr.w	pc, [sp], #4
    9076:	bf00      	nop
    9078:	1fff9094 	.word	0x1fff9094
    907c:	1fff9090 	.word	0x1fff9090

00009080 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40(void)
{
    9080:	b500      	push	{lr}
    9082:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9084:	f7f7 fd8e 	bl	ba4 <Sys_GetCoreID>
    9088:	4603      	mov	r3, r0
    908a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId]--;
    908c:	4a0d      	ldr	r2, [pc, #52]	; (90c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x44>)
    908e:	9b01      	ldr	r3, [sp, #4]
    9090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9094:	1e5a      	subs	r2, r3, #1
    9096:	490b      	ldr	r1, [pc, #44]	; (90c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x44>)
    9098:	9b01      	ldr	r3, [sp, #4]
    909a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
    909e:	4a0a      	ldr	r2, [pc, #40]	; (90c8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x48>)
    90a0:	9b01      	ldr	r3, [sp, #4]
    90a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90a6:	f003 0301 	and.w	r3, r3, #1
    90aa:	2b00      	cmp	r3, #0
    90ac:	d106      	bne.n	90bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x3c>
    90ae:	4a05      	ldr	r2, [pc, #20]	; (90c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x44>)
    90b0:	9b01      	ldr	r3, [sp, #4]
    90b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90b6:	2b00      	cmp	r3, #0
    90b8:	d100      	bne.n	90bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    90ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    90bc:	bf00      	nop
    90be:	b003      	add	sp, #12
    90c0:	f85d fb04 	ldr.w	pc, [sp], #4
    90c4:	1fff9094 	.word	0x1fff9094
    90c8:	1fff9090 	.word	0x1fff9090

000090cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41(void)
{
    90cc:	b500      	push	{lr}
    90ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    90d0:	f7f7 fd68 	bl	ba4 <Sys_GetCoreID>
    90d4:	4603      	mov	r3, r0
    90d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId])
    90d8:	4a10      	ldr	r2, [pc, #64]	; (911c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x50>)
    90da:	9b01      	ldr	r3, [sp, #4]
    90dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90e0:	2b00      	cmp	r3, #0
    90e2:	d10d      	bne.n	9100 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    90e4:	f7f7 fc7d 	bl	9e2 <Gpt_schm_read_msr>
    90e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    90ea:	9b00      	ldr	r3, [sp, #0]
    90ec:	f003 0301 	and.w	r3, r3, #1
    90f0:	2b00      	cmp	r3, #0
    90f2:	d100      	bne.n	90f6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    90f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_41[u32CoreId] = msr;
    90f6:	490a      	ldr	r1, [pc, #40]	; (9120 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x54>)
    90f8:	9b01      	ldr	r3, [sp, #4]
    90fa:	9a00      	ldr	r2, [sp, #0]
    90fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId]++;
    9100:	4a06      	ldr	r2, [pc, #24]	; (911c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x50>)
    9102:	9b01      	ldr	r3, [sp, #4]
    9104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9108:	1c5a      	adds	r2, r3, #1
    910a:	4904      	ldr	r1, [pc, #16]	; (911c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x50>)
    910c:	9b01      	ldr	r3, [sp, #4]
    910e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9112:	bf00      	nop
    9114:	b003      	add	sp, #12
    9116:	f85d fb04 	ldr.w	pc, [sp], #4
    911a:	bf00      	nop
    911c:	1fff909c 	.word	0x1fff909c
    9120:	1fff9098 	.word	0x1fff9098

00009124 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41(void)
{
    9124:	b500      	push	{lr}
    9126:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9128:	f7f7 fd3c 	bl	ba4 <Sys_GetCoreID>
    912c:	4603      	mov	r3, r0
    912e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId]--;
    9130:	4a0d      	ldr	r2, [pc, #52]	; (9168 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x44>)
    9132:	9b01      	ldr	r3, [sp, #4]
    9134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9138:	1e5a      	subs	r2, r3, #1
    913a:	490b      	ldr	r1, [pc, #44]	; (9168 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x44>)
    913c:	9b01      	ldr	r3, [sp, #4]
    913e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
    9142:	4a0a      	ldr	r2, [pc, #40]	; (916c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x48>)
    9144:	9b01      	ldr	r3, [sp, #4]
    9146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    914a:	f003 0301 	and.w	r3, r3, #1
    914e:	2b00      	cmp	r3, #0
    9150:	d106      	bne.n	9160 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x3c>
    9152:	4a05      	ldr	r2, [pc, #20]	; (9168 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x44>)
    9154:	9b01      	ldr	r3, [sp, #4]
    9156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    915a:	2b00      	cmp	r3, #0
    915c:	d100      	bne.n	9160 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    915e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9160:	bf00      	nop
    9162:	b003      	add	sp, #12
    9164:	f85d fb04 	ldr.w	pc, [sp], #4
    9168:	1fff909c 	.word	0x1fff909c
    916c:	1fff9098 	.word	0x1fff9098

00009170 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42(void)
{
    9170:	b500      	push	{lr}
    9172:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9174:	f7f7 fd16 	bl	ba4 <Sys_GetCoreID>
    9178:	4603      	mov	r3, r0
    917a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId])
    917c:	4a10      	ldr	r2, [pc, #64]	; (91c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x50>)
    917e:	9b01      	ldr	r3, [sp, #4]
    9180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9184:	2b00      	cmp	r3, #0
    9186:	d10d      	bne.n	91a4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9188:	f7f7 fc2b 	bl	9e2 <Gpt_schm_read_msr>
    918c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    918e:	9b00      	ldr	r3, [sp, #0]
    9190:	f003 0301 	and.w	r3, r3, #1
    9194:	2b00      	cmp	r3, #0
    9196:	d100      	bne.n	919a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9198:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_42[u32CoreId] = msr;
    919a:	490a      	ldr	r1, [pc, #40]	; (91c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x54>)
    919c:	9b01      	ldr	r3, [sp, #4]
    919e:	9a00      	ldr	r2, [sp, #0]
    91a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId]++;
    91a4:	4a06      	ldr	r2, [pc, #24]	; (91c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x50>)
    91a6:	9b01      	ldr	r3, [sp, #4]
    91a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91ac:	1c5a      	adds	r2, r3, #1
    91ae:	4904      	ldr	r1, [pc, #16]	; (91c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x50>)
    91b0:	9b01      	ldr	r3, [sp, #4]
    91b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    91b6:	bf00      	nop
    91b8:	b003      	add	sp, #12
    91ba:	f85d fb04 	ldr.w	pc, [sp], #4
    91be:	bf00      	nop
    91c0:	1fff90a4 	.word	0x1fff90a4
    91c4:	1fff90a0 	.word	0x1fff90a0

000091c8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42(void)
{
    91c8:	b500      	push	{lr}
    91ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    91cc:	f7f7 fcea 	bl	ba4 <Sys_GetCoreID>
    91d0:	4603      	mov	r3, r0
    91d2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId]--;
    91d4:	4a0d      	ldr	r2, [pc, #52]	; (920c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x44>)
    91d6:	9b01      	ldr	r3, [sp, #4]
    91d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91dc:	1e5a      	subs	r2, r3, #1
    91de:	490b      	ldr	r1, [pc, #44]	; (920c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x44>)
    91e0:	9b01      	ldr	r3, [sp, #4]
    91e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
    91e6:	4a0a      	ldr	r2, [pc, #40]	; (9210 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x48>)
    91e8:	9b01      	ldr	r3, [sp, #4]
    91ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91ee:	f003 0301 	and.w	r3, r3, #1
    91f2:	2b00      	cmp	r3, #0
    91f4:	d106      	bne.n	9204 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x3c>
    91f6:	4a05      	ldr	r2, [pc, #20]	; (920c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x44>)
    91f8:	9b01      	ldr	r3, [sp, #4]
    91fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91fe:	2b00      	cmp	r3, #0
    9200:	d100      	bne.n	9204 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9202:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9204:	bf00      	nop
    9206:	b003      	add	sp, #12
    9208:	f85d fb04 	ldr.w	pc, [sp], #4
    920c:	1fff90a4 	.word	0x1fff90a4
    9210:	1fff90a0 	.word	0x1fff90a0

00009214 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43(void)
{
    9214:	b500      	push	{lr}
    9216:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9218:	f7f7 fcc4 	bl	ba4 <Sys_GetCoreID>
    921c:	4603      	mov	r3, r0
    921e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId])
    9220:	4a10      	ldr	r2, [pc, #64]	; (9264 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x50>)
    9222:	9b01      	ldr	r3, [sp, #4]
    9224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9228:	2b00      	cmp	r3, #0
    922a:	d10d      	bne.n	9248 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    922c:	f7f7 fbd9 	bl	9e2 <Gpt_schm_read_msr>
    9230:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9232:	9b00      	ldr	r3, [sp, #0]
    9234:	f003 0301 	and.w	r3, r3, #1
    9238:	2b00      	cmp	r3, #0
    923a:	d100      	bne.n	923e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    923c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_43[u32CoreId] = msr;
    923e:	490a      	ldr	r1, [pc, #40]	; (9268 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x54>)
    9240:	9b01      	ldr	r3, [sp, #4]
    9242:	9a00      	ldr	r2, [sp, #0]
    9244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId]++;
    9248:	4a06      	ldr	r2, [pc, #24]	; (9264 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x50>)
    924a:	9b01      	ldr	r3, [sp, #4]
    924c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9250:	1c5a      	adds	r2, r3, #1
    9252:	4904      	ldr	r1, [pc, #16]	; (9264 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x50>)
    9254:	9b01      	ldr	r3, [sp, #4]
    9256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    925a:	bf00      	nop
    925c:	b003      	add	sp, #12
    925e:	f85d fb04 	ldr.w	pc, [sp], #4
    9262:	bf00      	nop
    9264:	1fff90ac 	.word	0x1fff90ac
    9268:	1fff90a8 	.word	0x1fff90a8

0000926c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43(void)
{
    926c:	b500      	push	{lr}
    926e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9270:	f7f7 fc98 	bl	ba4 <Sys_GetCoreID>
    9274:	4603      	mov	r3, r0
    9276:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId]--;
    9278:	4a0d      	ldr	r2, [pc, #52]	; (92b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x44>)
    927a:	9b01      	ldr	r3, [sp, #4]
    927c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9280:	1e5a      	subs	r2, r3, #1
    9282:	490b      	ldr	r1, [pc, #44]	; (92b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x44>)
    9284:	9b01      	ldr	r3, [sp, #4]
    9286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
    928a:	4a0a      	ldr	r2, [pc, #40]	; (92b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x48>)
    928c:	9b01      	ldr	r3, [sp, #4]
    928e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9292:	f003 0301 	and.w	r3, r3, #1
    9296:	2b00      	cmp	r3, #0
    9298:	d106      	bne.n	92a8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x3c>
    929a:	4a05      	ldr	r2, [pc, #20]	; (92b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x44>)
    929c:	9b01      	ldr	r3, [sp, #4]
    929e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92a2:	2b00      	cmp	r3, #0
    92a4:	d100      	bne.n	92a8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    92a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    92a8:	bf00      	nop
    92aa:	b003      	add	sp, #12
    92ac:	f85d fb04 	ldr.w	pc, [sp], #4
    92b0:	1fff90ac 	.word	0x1fff90ac
    92b4:	1fff90a8 	.word	0x1fff90a8

000092b8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44(void)
{
    92b8:	b500      	push	{lr}
    92ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    92bc:	f7f7 fc72 	bl	ba4 <Sys_GetCoreID>
    92c0:	4603      	mov	r3, r0
    92c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId])
    92c4:	4a10      	ldr	r2, [pc, #64]	; (9308 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x50>)
    92c6:	9b01      	ldr	r3, [sp, #4]
    92c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92cc:	2b00      	cmp	r3, #0
    92ce:	d10d      	bne.n	92ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    92d0:	f7f7 fb87 	bl	9e2 <Gpt_schm_read_msr>
    92d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    92d6:	9b00      	ldr	r3, [sp, #0]
    92d8:	f003 0301 	and.w	r3, r3, #1
    92dc:	2b00      	cmp	r3, #0
    92de:	d100      	bne.n	92e2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    92e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_44[u32CoreId] = msr;
    92e2:	490a      	ldr	r1, [pc, #40]	; (930c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x54>)
    92e4:	9b01      	ldr	r3, [sp, #4]
    92e6:	9a00      	ldr	r2, [sp, #0]
    92e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId]++;
    92ec:	4a06      	ldr	r2, [pc, #24]	; (9308 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x50>)
    92ee:	9b01      	ldr	r3, [sp, #4]
    92f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92f4:	1c5a      	adds	r2, r3, #1
    92f6:	4904      	ldr	r1, [pc, #16]	; (9308 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x50>)
    92f8:	9b01      	ldr	r3, [sp, #4]
    92fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    92fe:	bf00      	nop
    9300:	b003      	add	sp, #12
    9302:	f85d fb04 	ldr.w	pc, [sp], #4
    9306:	bf00      	nop
    9308:	1fff90b4 	.word	0x1fff90b4
    930c:	1fff90b0 	.word	0x1fff90b0

00009310 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44(void)
{
    9310:	b500      	push	{lr}
    9312:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9314:	f7f7 fc46 	bl	ba4 <Sys_GetCoreID>
    9318:	4603      	mov	r3, r0
    931a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId]--;
    931c:	4a0d      	ldr	r2, [pc, #52]	; (9354 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x44>)
    931e:	9b01      	ldr	r3, [sp, #4]
    9320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9324:	1e5a      	subs	r2, r3, #1
    9326:	490b      	ldr	r1, [pc, #44]	; (9354 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x44>)
    9328:	9b01      	ldr	r3, [sp, #4]
    932a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
    932e:	4a0a      	ldr	r2, [pc, #40]	; (9358 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x48>)
    9330:	9b01      	ldr	r3, [sp, #4]
    9332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9336:	f003 0301 	and.w	r3, r3, #1
    933a:	2b00      	cmp	r3, #0
    933c:	d106      	bne.n	934c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x3c>
    933e:	4a05      	ldr	r2, [pc, #20]	; (9354 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x44>)
    9340:	9b01      	ldr	r3, [sp, #4]
    9342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9346:	2b00      	cmp	r3, #0
    9348:	d100      	bne.n	934c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    934a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    934c:	bf00      	nop
    934e:	b003      	add	sp, #12
    9350:	f85d fb04 	ldr.w	pc, [sp], #4
    9354:	1fff90b4 	.word	0x1fff90b4
    9358:	1fff90b0 	.word	0x1fff90b0

0000935c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45(void)
{
    935c:	b500      	push	{lr}
    935e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9360:	f7f7 fc20 	bl	ba4 <Sys_GetCoreID>
    9364:	4603      	mov	r3, r0
    9366:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId])
    9368:	4a10      	ldr	r2, [pc, #64]	; (93ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x50>)
    936a:	9b01      	ldr	r3, [sp, #4]
    936c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9370:	2b00      	cmp	r3, #0
    9372:	d10d      	bne.n	9390 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9374:	f7f7 fb35 	bl	9e2 <Gpt_schm_read_msr>
    9378:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    937a:	9b00      	ldr	r3, [sp, #0]
    937c:	f003 0301 	and.w	r3, r3, #1
    9380:	2b00      	cmp	r3, #0
    9382:	d100      	bne.n	9386 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9384:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_45[u32CoreId] = msr;
    9386:	490a      	ldr	r1, [pc, #40]	; (93b0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x54>)
    9388:	9b01      	ldr	r3, [sp, #4]
    938a:	9a00      	ldr	r2, [sp, #0]
    938c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId]++;
    9390:	4a06      	ldr	r2, [pc, #24]	; (93ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x50>)
    9392:	9b01      	ldr	r3, [sp, #4]
    9394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9398:	1c5a      	adds	r2, r3, #1
    939a:	4904      	ldr	r1, [pc, #16]	; (93ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x50>)
    939c:	9b01      	ldr	r3, [sp, #4]
    939e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    93a2:	bf00      	nop
    93a4:	b003      	add	sp, #12
    93a6:	f85d fb04 	ldr.w	pc, [sp], #4
    93aa:	bf00      	nop
    93ac:	1fff90bc 	.word	0x1fff90bc
    93b0:	1fff90b8 	.word	0x1fff90b8

000093b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45(void)
{
    93b4:	b500      	push	{lr}
    93b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    93b8:	f7f7 fbf4 	bl	ba4 <Sys_GetCoreID>
    93bc:	4603      	mov	r3, r0
    93be:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId]--;
    93c0:	4a0d      	ldr	r2, [pc, #52]	; (93f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x44>)
    93c2:	9b01      	ldr	r3, [sp, #4]
    93c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93c8:	1e5a      	subs	r2, r3, #1
    93ca:	490b      	ldr	r1, [pc, #44]	; (93f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x44>)
    93cc:	9b01      	ldr	r3, [sp, #4]
    93ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
    93d2:	4a0a      	ldr	r2, [pc, #40]	; (93fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x48>)
    93d4:	9b01      	ldr	r3, [sp, #4]
    93d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93da:	f003 0301 	and.w	r3, r3, #1
    93de:	2b00      	cmp	r3, #0
    93e0:	d106      	bne.n	93f0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x3c>
    93e2:	4a05      	ldr	r2, [pc, #20]	; (93f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x44>)
    93e4:	9b01      	ldr	r3, [sp, #4]
    93e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93ea:	2b00      	cmp	r3, #0
    93ec:	d100      	bne.n	93f0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    93ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    93f0:	bf00      	nop
    93f2:	b003      	add	sp, #12
    93f4:	f85d fb04 	ldr.w	pc, [sp], #4
    93f8:	1fff90bc 	.word	0x1fff90bc
    93fc:	1fff90b8 	.word	0x1fff90b8

00009400 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46(void)
{
    9400:	b500      	push	{lr}
    9402:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9404:	f7f7 fbce 	bl	ba4 <Sys_GetCoreID>
    9408:	4603      	mov	r3, r0
    940a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId])
    940c:	4a10      	ldr	r2, [pc, #64]	; (9450 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x50>)
    940e:	9b01      	ldr	r3, [sp, #4]
    9410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9414:	2b00      	cmp	r3, #0
    9416:	d10d      	bne.n	9434 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9418:	f7f7 fae3 	bl	9e2 <Gpt_schm_read_msr>
    941c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    941e:	9b00      	ldr	r3, [sp, #0]
    9420:	f003 0301 	and.w	r3, r3, #1
    9424:	2b00      	cmp	r3, #0
    9426:	d100      	bne.n	942a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9428:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_46[u32CoreId] = msr;
    942a:	490a      	ldr	r1, [pc, #40]	; (9454 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x54>)
    942c:	9b01      	ldr	r3, [sp, #4]
    942e:	9a00      	ldr	r2, [sp, #0]
    9430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId]++;
    9434:	4a06      	ldr	r2, [pc, #24]	; (9450 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x50>)
    9436:	9b01      	ldr	r3, [sp, #4]
    9438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    943c:	1c5a      	adds	r2, r3, #1
    943e:	4904      	ldr	r1, [pc, #16]	; (9450 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x50>)
    9440:	9b01      	ldr	r3, [sp, #4]
    9442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9446:	bf00      	nop
    9448:	b003      	add	sp, #12
    944a:	f85d fb04 	ldr.w	pc, [sp], #4
    944e:	bf00      	nop
    9450:	1fff90c4 	.word	0x1fff90c4
    9454:	1fff90c0 	.word	0x1fff90c0

00009458 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46(void)
{
    9458:	b500      	push	{lr}
    945a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    945c:	f7f7 fba2 	bl	ba4 <Sys_GetCoreID>
    9460:	4603      	mov	r3, r0
    9462:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId]--;
    9464:	4a0d      	ldr	r2, [pc, #52]	; (949c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x44>)
    9466:	9b01      	ldr	r3, [sp, #4]
    9468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    946c:	1e5a      	subs	r2, r3, #1
    946e:	490b      	ldr	r1, [pc, #44]	; (949c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x44>)
    9470:	9b01      	ldr	r3, [sp, #4]
    9472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
    9476:	4a0a      	ldr	r2, [pc, #40]	; (94a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x48>)
    9478:	9b01      	ldr	r3, [sp, #4]
    947a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    947e:	f003 0301 	and.w	r3, r3, #1
    9482:	2b00      	cmp	r3, #0
    9484:	d106      	bne.n	9494 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x3c>
    9486:	4a05      	ldr	r2, [pc, #20]	; (949c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x44>)
    9488:	9b01      	ldr	r3, [sp, #4]
    948a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    948e:	2b00      	cmp	r3, #0
    9490:	d100      	bne.n	9494 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9492:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9494:	bf00      	nop
    9496:	b003      	add	sp, #12
    9498:	f85d fb04 	ldr.w	pc, [sp], #4
    949c:	1fff90c4 	.word	0x1fff90c4
    94a0:	1fff90c0 	.word	0x1fff90c0

000094a4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50(void)
{
    94a4:	b500      	push	{lr}
    94a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    94a8:	f7f7 fb7c 	bl	ba4 <Sys_GetCoreID>
    94ac:	4603      	mov	r3, r0
    94ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId])
    94b0:	4a10      	ldr	r2, [pc, #64]	; (94f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x50>)
    94b2:	9b01      	ldr	r3, [sp, #4]
    94b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94b8:	2b00      	cmp	r3, #0
    94ba:	d10d      	bne.n	94d8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    94bc:	f7f7 fa91 	bl	9e2 <Gpt_schm_read_msr>
    94c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    94c2:	9b00      	ldr	r3, [sp, #0]
    94c4:	f003 0301 	and.w	r3, r3, #1
    94c8:	2b00      	cmp	r3, #0
    94ca:	d100      	bne.n	94ce <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    94cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_50[u32CoreId] = msr;
    94ce:	490a      	ldr	r1, [pc, #40]	; (94f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x54>)
    94d0:	9b01      	ldr	r3, [sp, #4]
    94d2:	9a00      	ldr	r2, [sp, #0]
    94d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId]++;
    94d8:	4a06      	ldr	r2, [pc, #24]	; (94f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x50>)
    94da:	9b01      	ldr	r3, [sp, #4]
    94dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94e0:	1c5a      	adds	r2, r3, #1
    94e2:	4904      	ldr	r1, [pc, #16]	; (94f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x50>)
    94e4:	9b01      	ldr	r3, [sp, #4]
    94e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    94ea:	bf00      	nop
    94ec:	b003      	add	sp, #12
    94ee:	f85d fb04 	ldr.w	pc, [sp], #4
    94f2:	bf00      	nop
    94f4:	1fff90cc 	.word	0x1fff90cc
    94f8:	1fff90c8 	.word	0x1fff90c8

000094fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50(void)
{
    94fc:	b500      	push	{lr}
    94fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9500:	f7f7 fb50 	bl	ba4 <Sys_GetCoreID>
    9504:	4603      	mov	r3, r0
    9506:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId]--;
    9508:	4a0d      	ldr	r2, [pc, #52]	; (9540 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x44>)
    950a:	9b01      	ldr	r3, [sp, #4]
    950c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9510:	1e5a      	subs	r2, r3, #1
    9512:	490b      	ldr	r1, [pc, #44]	; (9540 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x44>)
    9514:	9b01      	ldr	r3, [sp, #4]
    9516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
    951a:	4a0a      	ldr	r2, [pc, #40]	; (9544 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x48>)
    951c:	9b01      	ldr	r3, [sp, #4]
    951e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9522:	f003 0301 	and.w	r3, r3, #1
    9526:	2b00      	cmp	r3, #0
    9528:	d106      	bne.n	9538 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x3c>
    952a:	4a05      	ldr	r2, [pc, #20]	; (9540 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x44>)
    952c:	9b01      	ldr	r3, [sp, #4]
    952e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9532:	2b00      	cmp	r3, #0
    9534:	d100      	bne.n	9538 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9536:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9538:	bf00      	nop
    953a:	b003      	add	sp, #12
    953c:	f85d fb04 	ldr.w	pc, [sp], #4
    9540:	1fff90cc 	.word	0x1fff90cc
    9544:	1fff90c8 	.word	0x1fff90c8

00009548 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51(void)
{
    9548:	b500      	push	{lr}
    954a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    954c:	f7f7 fb2a 	bl	ba4 <Sys_GetCoreID>
    9550:	4603      	mov	r3, r0
    9552:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId])
    9554:	4a10      	ldr	r2, [pc, #64]	; (9598 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x50>)
    9556:	9b01      	ldr	r3, [sp, #4]
    9558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    955c:	2b00      	cmp	r3, #0
    955e:	d10d      	bne.n	957c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9560:	f7f7 fa3f 	bl	9e2 <Gpt_schm_read_msr>
    9564:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9566:	9b00      	ldr	r3, [sp, #0]
    9568:	f003 0301 	and.w	r3, r3, #1
    956c:	2b00      	cmp	r3, #0
    956e:	d100      	bne.n	9572 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9570:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_51[u32CoreId] = msr;
    9572:	490a      	ldr	r1, [pc, #40]	; (959c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x54>)
    9574:	9b01      	ldr	r3, [sp, #4]
    9576:	9a00      	ldr	r2, [sp, #0]
    9578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId]++;
    957c:	4a06      	ldr	r2, [pc, #24]	; (9598 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x50>)
    957e:	9b01      	ldr	r3, [sp, #4]
    9580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9584:	1c5a      	adds	r2, r3, #1
    9586:	4904      	ldr	r1, [pc, #16]	; (9598 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x50>)
    9588:	9b01      	ldr	r3, [sp, #4]
    958a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    958e:	bf00      	nop
    9590:	b003      	add	sp, #12
    9592:	f85d fb04 	ldr.w	pc, [sp], #4
    9596:	bf00      	nop
    9598:	1fff90d4 	.word	0x1fff90d4
    959c:	1fff90d0 	.word	0x1fff90d0

000095a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51(void)
{
    95a0:	b500      	push	{lr}
    95a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    95a4:	f7f7 fafe 	bl	ba4 <Sys_GetCoreID>
    95a8:	4603      	mov	r3, r0
    95aa:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId]--;
    95ac:	4a0d      	ldr	r2, [pc, #52]	; (95e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x44>)
    95ae:	9b01      	ldr	r3, [sp, #4]
    95b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95b4:	1e5a      	subs	r2, r3, #1
    95b6:	490b      	ldr	r1, [pc, #44]	; (95e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x44>)
    95b8:	9b01      	ldr	r3, [sp, #4]
    95ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
    95be:	4a0a      	ldr	r2, [pc, #40]	; (95e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x48>)
    95c0:	9b01      	ldr	r3, [sp, #4]
    95c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95c6:	f003 0301 	and.w	r3, r3, #1
    95ca:	2b00      	cmp	r3, #0
    95cc:	d106      	bne.n	95dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x3c>
    95ce:	4a05      	ldr	r2, [pc, #20]	; (95e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x44>)
    95d0:	9b01      	ldr	r3, [sp, #4]
    95d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95d6:	2b00      	cmp	r3, #0
    95d8:	d100      	bne.n	95dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    95da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    95dc:	bf00      	nop
    95de:	b003      	add	sp, #12
    95e0:	f85d fb04 	ldr.w	pc, [sp], #4
    95e4:	1fff90d4 	.word	0x1fff90d4
    95e8:	1fff90d0 	.word	0x1fff90d0

000095ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52(void)
{
    95ec:	b500      	push	{lr}
    95ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    95f0:	f7f7 fad8 	bl	ba4 <Sys_GetCoreID>
    95f4:	4603      	mov	r3, r0
    95f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId])
    95f8:	4a10      	ldr	r2, [pc, #64]	; (963c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x50>)
    95fa:	9b01      	ldr	r3, [sp, #4]
    95fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9600:	2b00      	cmp	r3, #0
    9602:	d10d      	bne.n	9620 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9604:	f7f7 f9ed 	bl	9e2 <Gpt_schm_read_msr>
    9608:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    960a:	9b00      	ldr	r3, [sp, #0]
    960c:	f003 0301 	and.w	r3, r3, #1
    9610:	2b00      	cmp	r3, #0
    9612:	d100      	bne.n	9616 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9614:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_52[u32CoreId] = msr;
    9616:	490a      	ldr	r1, [pc, #40]	; (9640 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x54>)
    9618:	9b01      	ldr	r3, [sp, #4]
    961a:	9a00      	ldr	r2, [sp, #0]
    961c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId]++;
    9620:	4a06      	ldr	r2, [pc, #24]	; (963c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x50>)
    9622:	9b01      	ldr	r3, [sp, #4]
    9624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9628:	1c5a      	adds	r2, r3, #1
    962a:	4904      	ldr	r1, [pc, #16]	; (963c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x50>)
    962c:	9b01      	ldr	r3, [sp, #4]
    962e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9632:	bf00      	nop
    9634:	b003      	add	sp, #12
    9636:	f85d fb04 	ldr.w	pc, [sp], #4
    963a:	bf00      	nop
    963c:	1fff90dc 	.word	0x1fff90dc
    9640:	1fff90d8 	.word	0x1fff90d8

00009644 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52(void)
{
    9644:	b500      	push	{lr}
    9646:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9648:	f7f7 faac 	bl	ba4 <Sys_GetCoreID>
    964c:	4603      	mov	r3, r0
    964e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId]--;
    9650:	4a0d      	ldr	r2, [pc, #52]	; (9688 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x44>)
    9652:	9b01      	ldr	r3, [sp, #4]
    9654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9658:	1e5a      	subs	r2, r3, #1
    965a:	490b      	ldr	r1, [pc, #44]	; (9688 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x44>)
    965c:	9b01      	ldr	r3, [sp, #4]
    965e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_52[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId]))         /*if interrupts were enabled*/
    9662:	4a0a      	ldr	r2, [pc, #40]	; (968c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x48>)
    9664:	9b01      	ldr	r3, [sp, #4]
    9666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    966a:	f003 0301 	and.w	r3, r3, #1
    966e:	2b00      	cmp	r3, #0
    9670:	d106      	bne.n	9680 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x3c>
    9672:	4a05      	ldr	r2, [pc, #20]	; (9688 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x44>)
    9674:	9b01      	ldr	r3, [sp, #4]
    9676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    967a:	2b00      	cmp	r3, #0
    967c:	d100      	bne.n	9680 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    967e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9680:	bf00      	nop
    9682:	b003      	add	sp, #12
    9684:	f85d fb04 	ldr.w	pc, [sp], #4
    9688:	1fff90dc 	.word	0x1fff90dc
    968c:	1fff90d8 	.word	0x1fff90d8

00009690 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53(void)
{
    9690:	b500      	push	{lr}
    9692:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9694:	f7f7 fa86 	bl	ba4 <Sys_GetCoreID>
    9698:	4603      	mov	r3, r0
    969a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId])
    969c:	4a10      	ldr	r2, [pc, #64]	; (96e0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x50>)
    969e:	9b01      	ldr	r3, [sp, #4]
    96a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96a4:	2b00      	cmp	r3, #0
    96a6:	d10d      	bne.n	96c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    96a8:	f7f7 f99b 	bl	9e2 <Gpt_schm_read_msr>
    96ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    96ae:	9b00      	ldr	r3, [sp, #0]
    96b0:	f003 0301 	and.w	r3, r3, #1
    96b4:	2b00      	cmp	r3, #0
    96b6:	d100      	bne.n	96ba <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    96b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_53[u32CoreId] = msr;
    96ba:	490a      	ldr	r1, [pc, #40]	; (96e4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x54>)
    96bc:	9b01      	ldr	r3, [sp, #4]
    96be:	9a00      	ldr	r2, [sp, #0]
    96c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId]++;
    96c4:	4a06      	ldr	r2, [pc, #24]	; (96e0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x50>)
    96c6:	9b01      	ldr	r3, [sp, #4]
    96c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96cc:	1c5a      	adds	r2, r3, #1
    96ce:	4904      	ldr	r1, [pc, #16]	; (96e0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x50>)
    96d0:	9b01      	ldr	r3, [sp, #4]
    96d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    96d6:	bf00      	nop
    96d8:	b003      	add	sp, #12
    96da:	f85d fb04 	ldr.w	pc, [sp], #4
    96de:	bf00      	nop
    96e0:	1fff90e4 	.word	0x1fff90e4
    96e4:	1fff90e0 	.word	0x1fff90e0

000096e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53(void)
{
    96e8:	b500      	push	{lr}
    96ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    96ec:	f7f7 fa5a 	bl	ba4 <Sys_GetCoreID>
    96f0:	4603      	mov	r3, r0
    96f2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId]--;
    96f4:	4a0d      	ldr	r2, [pc, #52]	; (972c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x44>)
    96f6:	9b01      	ldr	r3, [sp, #4]
    96f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96fc:	1e5a      	subs	r2, r3, #1
    96fe:	490b      	ldr	r1, [pc, #44]	; (972c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x44>)
    9700:	9b01      	ldr	r3, [sp, #4]
    9702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_53[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId]))         /*if interrupts were enabled*/
    9706:	4a0a      	ldr	r2, [pc, #40]	; (9730 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x48>)
    9708:	9b01      	ldr	r3, [sp, #4]
    970a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    970e:	f003 0301 	and.w	r3, r3, #1
    9712:	2b00      	cmp	r3, #0
    9714:	d106      	bne.n	9724 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x3c>
    9716:	4a05      	ldr	r2, [pc, #20]	; (972c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x44>)
    9718:	9b01      	ldr	r3, [sp, #4]
    971a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    971e:	2b00      	cmp	r3, #0
    9720:	d100      	bne.n	9724 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9722:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9724:	bf00      	nop
    9726:	b003      	add	sp, #12
    9728:	f85d fb04 	ldr.w	pc, [sp], #4
    972c:	1fff90e4 	.word	0x1fff90e4
    9730:	1fff90e0 	.word	0x1fff90e0

00009734 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54(void)
{
    9734:	b500      	push	{lr}
    9736:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9738:	f7f7 fa34 	bl	ba4 <Sys_GetCoreID>
    973c:	4603      	mov	r3, r0
    973e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId])
    9740:	4a10      	ldr	r2, [pc, #64]	; (9784 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x50>)
    9742:	9b01      	ldr	r3, [sp, #4]
    9744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9748:	2b00      	cmp	r3, #0
    974a:	d10d      	bne.n	9768 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    974c:	f7f7 f949 	bl	9e2 <Gpt_schm_read_msr>
    9750:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9752:	9b00      	ldr	r3, [sp, #0]
    9754:	f003 0301 	and.w	r3, r3, #1
    9758:	2b00      	cmp	r3, #0
    975a:	d100      	bne.n	975e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    975c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_54[u32CoreId] = msr;
    975e:	490a      	ldr	r1, [pc, #40]	; (9788 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x54>)
    9760:	9b01      	ldr	r3, [sp, #4]
    9762:	9a00      	ldr	r2, [sp, #0]
    9764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId]++;
    9768:	4a06      	ldr	r2, [pc, #24]	; (9784 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x50>)
    976a:	9b01      	ldr	r3, [sp, #4]
    976c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9770:	1c5a      	adds	r2, r3, #1
    9772:	4904      	ldr	r1, [pc, #16]	; (9784 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x50>)
    9774:	9b01      	ldr	r3, [sp, #4]
    9776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    977a:	bf00      	nop
    977c:	b003      	add	sp, #12
    977e:	f85d fb04 	ldr.w	pc, [sp], #4
    9782:	bf00      	nop
    9784:	1fff90ec 	.word	0x1fff90ec
    9788:	1fff90e8 	.word	0x1fff90e8

0000978c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54(void)
{
    978c:	b500      	push	{lr}
    978e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9790:	f7f7 fa08 	bl	ba4 <Sys_GetCoreID>
    9794:	4603      	mov	r3, r0
    9796:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId]--;
    9798:	4a0d      	ldr	r2, [pc, #52]	; (97d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x44>)
    979a:	9b01      	ldr	r3, [sp, #4]
    979c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97a0:	1e5a      	subs	r2, r3, #1
    97a2:	490b      	ldr	r1, [pc, #44]	; (97d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x44>)
    97a4:	9b01      	ldr	r3, [sp, #4]
    97a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
    97aa:	4a0a      	ldr	r2, [pc, #40]	; (97d4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x48>)
    97ac:	9b01      	ldr	r3, [sp, #4]
    97ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97b2:	f003 0301 	and.w	r3, r3, #1
    97b6:	2b00      	cmp	r3, #0
    97b8:	d106      	bne.n	97c8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x3c>
    97ba:	4a05      	ldr	r2, [pc, #20]	; (97d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x44>)
    97bc:	9b01      	ldr	r3, [sp, #4]
    97be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97c2:	2b00      	cmp	r3, #0
    97c4:	d100      	bne.n	97c8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    97c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    97c8:	bf00      	nop
    97ca:	b003      	add	sp, #12
    97cc:	f85d fb04 	ldr.w	pc, [sp], #4
    97d0:	1fff90ec 	.word	0x1fff90ec
    97d4:	1fff90e8 	.word	0x1fff90e8

000097d8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55(void)
{
    97d8:	b500      	push	{lr}
    97da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    97dc:	f7f7 f9e2 	bl	ba4 <Sys_GetCoreID>
    97e0:	4603      	mov	r3, r0
    97e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId])
    97e4:	4a10      	ldr	r2, [pc, #64]	; (9828 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x50>)
    97e6:	9b01      	ldr	r3, [sp, #4]
    97e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97ec:	2b00      	cmp	r3, #0
    97ee:	d10d      	bne.n	980c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    97f0:	f7f7 f8f7 	bl	9e2 <Gpt_schm_read_msr>
    97f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    97f6:	9b00      	ldr	r3, [sp, #0]
    97f8:	f003 0301 	and.w	r3, r3, #1
    97fc:	2b00      	cmp	r3, #0
    97fe:	d100      	bne.n	9802 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9800:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_55[u32CoreId] = msr;
    9802:	490a      	ldr	r1, [pc, #40]	; (982c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x54>)
    9804:	9b01      	ldr	r3, [sp, #4]
    9806:	9a00      	ldr	r2, [sp, #0]
    9808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId]++;
    980c:	4a06      	ldr	r2, [pc, #24]	; (9828 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x50>)
    980e:	9b01      	ldr	r3, [sp, #4]
    9810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9814:	1c5a      	adds	r2, r3, #1
    9816:	4904      	ldr	r1, [pc, #16]	; (9828 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x50>)
    9818:	9b01      	ldr	r3, [sp, #4]
    981a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    981e:	bf00      	nop
    9820:	b003      	add	sp, #12
    9822:	f85d fb04 	ldr.w	pc, [sp], #4
    9826:	bf00      	nop
    9828:	1fff90f4 	.word	0x1fff90f4
    982c:	1fff90f0 	.word	0x1fff90f0

00009830 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55(void)
{
    9830:	b500      	push	{lr}
    9832:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9834:	f7f7 f9b6 	bl	ba4 <Sys_GetCoreID>
    9838:	4603      	mov	r3, r0
    983a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId]--;
    983c:	4a0d      	ldr	r2, [pc, #52]	; (9874 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x44>)
    983e:	9b01      	ldr	r3, [sp, #4]
    9840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9844:	1e5a      	subs	r2, r3, #1
    9846:	490b      	ldr	r1, [pc, #44]	; (9874 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x44>)
    9848:	9b01      	ldr	r3, [sp, #4]
    984a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
    984e:	4a0a      	ldr	r2, [pc, #40]	; (9878 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x48>)
    9850:	9b01      	ldr	r3, [sp, #4]
    9852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9856:	f003 0301 	and.w	r3, r3, #1
    985a:	2b00      	cmp	r3, #0
    985c:	d106      	bne.n	986c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x3c>
    985e:	4a05      	ldr	r2, [pc, #20]	; (9874 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x44>)
    9860:	9b01      	ldr	r3, [sp, #4]
    9862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9866:	2b00      	cmp	r3, #0
    9868:	d100      	bne.n	986c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    986a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    986c:	bf00      	nop
    986e:	b003      	add	sp, #12
    9870:	f85d fb04 	ldr.w	pc, [sp], #4
    9874:	1fff90f4 	.word	0x1fff90f4
    9878:	1fff90f0 	.word	0x1fff90f0

0000987c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56(void)
{
    987c:	b500      	push	{lr}
    987e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9880:	f7f7 f990 	bl	ba4 <Sys_GetCoreID>
    9884:	4603      	mov	r3, r0
    9886:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId])
    9888:	4a10      	ldr	r2, [pc, #64]	; (98cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x50>)
    988a:	9b01      	ldr	r3, [sp, #4]
    988c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9890:	2b00      	cmp	r3, #0
    9892:	d10d      	bne.n	98b0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9894:	f7f7 f8a5 	bl	9e2 <Gpt_schm_read_msr>
    9898:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    989a:	9b00      	ldr	r3, [sp, #0]
    989c:	f003 0301 	and.w	r3, r3, #1
    98a0:	2b00      	cmp	r3, #0
    98a2:	d100      	bne.n	98a6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    98a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_56[u32CoreId] = msr;
    98a6:	490a      	ldr	r1, [pc, #40]	; (98d0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x54>)
    98a8:	9b01      	ldr	r3, [sp, #4]
    98aa:	9a00      	ldr	r2, [sp, #0]
    98ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId]++;
    98b0:	4a06      	ldr	r2, [pc, #24]	; (98cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x50>)
    98b2:	9b01      	ldr	r3, [sp, #4]
    98b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98b8:	1c5a      	adds	r2, r3, #1
    98ba:	4904      	ldr	r1, [pc, #16]	; (98cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x50>)
    98bc:	9b01      	ldr	r3, [sp, #4]
    98be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    98c2:	bf00      	nop
    98c4:	b003      	add	sp, #12
    98c6:	f85d fb04 	ldr.w	pc, [sp], #4
    98ca:	bf00      	nop
    98cc:	1fff90fc 	.word	0x1fff90fc
    98d0:	1fff90f8 	.word	0x1fff90f8

000098d4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56(void)
{
    98d4:	b500      	push	{lr}
    98d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    98d8:	f7f7 f964 	bl	ba4 <Sys_GetCoreID>
    98dc:	4603      	mov	r3, r0
    98de:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId]--;
    98e0:	4a0d      	ldr	r2, [pc, #52]	; (9918 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x44>)
    98e2:	9b01      	ldr	r3, [sp, #4]
    98e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98e8:	1e5a      	subs	r2, r3, #1
    98ea:	490b      	ldr	r1, [pc, #44]	; (9918 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x44>)
    98ec:	9b01      	ldr	r3, [sp, #4]
    98ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
    98f2:	4a0a      	ldr	r2, [pc, #40]	; (991c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x48>)
    98f4:	9b01      	ldr	r3, [sp, #4]
    98f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98fa:	f003 0301 	and.w	r3, r3, #1
    98fe:	2b00      	cmp	r3, #0
    9900:	d106      	bne.n	9910 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x3c>
    9902:	4a05      	ldr	r2, [pc, #20]	; (9918 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x44>)
    9904:	9b01      	ldr	r3, [sp, #4]
    9906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    990a:	2b00      	cmp	r3, #0
    990c:	d100      	bne.n	9910 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    990e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9910:	bf00      	nop
    9912:	b003      	add	sp, #12
    9914:	f85d fb04 	ldr.w	pc, [sp], #4
    9918:	1fff90fc 	.word	0x1fff90fc
    991c:	1fff90f8 	.word	0x1fff90f8

00009920 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60(void)
{
    9920:	b500      	push	{lr}
    9922:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9924:	f7f7 f93e 	bl	ba4 <Sys_GetCoreID>
    9928:	4603      	mov	r3, r0
    992a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId])
    992c:	4a10      	ldr	r2, [pc, #64]	; (9970 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x50>)
    992e:	9b01      	ldr	r3, [sp, #4]
    9930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9934:	2b00      	cmp	r3, #0
    9936:	d10d      	bne.n	9954 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9938:	f7f7 f853 	bl	9e2 <Gpt_schm_read_msr>
    993c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    993e:	9b00      	ldr	r3, [sp, #0]
    9940:	f003 0301 	and.w	r3, r3, #1
    9944:	2b00      	cmp	r3, #0
    9946:	d100      	bne.n	994a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9948:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_60[u32CoreId] = msr;
    994a:	490a      	ldr	r1, [pc, #40]	; (9974 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x54>)
    994c:	9b01      	ldr	r3, [sp, #4]
    994e:	9a00      	ldr	r2, [sp, #0]
    9950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId]++;
    9954:	4a06      	ldr	r2, [pc, #24]	; (9970 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x50>)
    9956:	9b01      	ldr	r3, [sp, #4]
    9958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    995c:	1c5a      	adds	r2, r3, #1
    995e:	4904      	ldr	r1, [pc, #16]	; (9970 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x50>)
    9960:	9b01      	ldr	r3, [sp, #4]
    9962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9966:	bf00      	nop
    9968:	b003      	add	sp, #12
    996a:	f85d fb04 	ldr.w	pc, [sp], #4
    996e:	bf00      	nop
    9970:	1fff9104 	.word	0x1fff9104
    9974:	1fff9100 	.word	0x1fff9100

00009978 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60(void)
{
    9978:	b500      	push	{lr}
    997a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    997c:	f7f7 f912 	bl	ba4 <Sys_GetCoreID>
    9980:	4603      	mov	r3, r0
    9982:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId]--;
    9984:	4a0d      	ldr	r2, [pc, #52]	; (99bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x44>)
    9986:	9b01      	ldr	r3, [sp, #4]
    9988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    998c:	1e5a      	subs	r2, r3, #1
    998e:	490b      	ldr	r1, [pc, #44]	; (99bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x44>)
    9990:	9b01      	ldr	r3, [sp, #4]
    9992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
    9996:	4a0a      	ldr	r2, [pc, #40]	; (99c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x48>)
    9998:	9b01      	ldr	r3, [sp, #4]
    999a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    999e:	f003 0301 	and.w	r3, r3, #1
    99a2:	2b00      	cmp	r3, #0
    99a4:	d106      	bne.n	99b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x3c>
    99a6:	4a05      	ldr	r2, [pc, #20]	; (99bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x44>)
    99a8:	9b01      	ldr	r3, [sp, #4]
    99aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99ae:	2b00      	cmp	r3, #0
    99b0:	d100      	bne.n	99b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    99b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    99b4:	bf00      	nop
    99b6:	b003      	add	sp, #12
    99b8:	f85d fb04 	ldr.w	pc, [sp], #4
    99bc:	1fff9104 	.word	0x1fff9104
    99c0:	1fff9100 	.word	0x1fff9100

000099c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61(void)
{
    99c4:	b500      	push	{lr}
    99c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    99c8:	f7f7 f8ec 	bl	ba4 <Sys_GetCoreID>
    99cc:	4603      	mov	r3, r0
    99ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId])
    99d0:	4a10      	ldr	r2, [pc, #64]	; (9a14 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x50>)
    99d2:	9b01      	ldr	r3, [sp, #4]
    99d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99d8:	2b00      	cmp	r3, #0
    99da:	d10d      	bne.n	99f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    99dc:	f7f7 f801 	bl	9e2 <Gpt_schm_read_msr>
    99e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    99e2:	9b00      	ldr	r3, [sp, #0]
    99e4:	f003 0301 	and.w	r3, r3, #1
    99e8:	2b00      	cmp	r3, #0
    99ea:	d100      	bne.n	99ee <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    99ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_61[u32CoreId] = msr;
    99ee:	490a      	ldr	r1, [pc, #40]	; (9a18 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x54>)
    99f0:	9b01      	ldr	r3, [sp, #4]
    99f2:	9a00      	ldr	r2, [sp, #0]
    99f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId]++;
    99f8:	4a06      	ldr	r2, [pc, #24]	; (9a14 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x50>)
    99fa:	9b01      	ldr	r3, [sp, #4]
    99fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a00:	1c5a      	adds	r2, r3, #1
    9a02:	4904      	ldr	r1, [pc, #16]	; (9a14 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x50>)
    9a04:	9b01      	ldr	r3, [sp, #4]
    9a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9a0a:	bf00      	nop
    9a0c:	b003      	add	sp, #12
    9a0e:	f85d fb04 	ldr.w	pc, [sp], #4
    9a12:	bf00      	nop
    9a14:	1fff910c 	.word	0x1fff910c
    9a18:	1fff9108 	.word	0x1fff9108

00009a1c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61(void)
{
    9a1c:	b500      	push	{lr}
    9a1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a20:	f7f7 f8c0 	bl	ba4 <Sys_GetCoreID>
    9a24:	4603      	mov	r3, r0
    9a26:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId]--;
    9a28:	4a0d      	ldr	r2, [pc, #52]	; (9a60 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x44>)
    9a2a:	9b01      	ldr	r3, [sp, #4]
    9a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a30:	1e5a      	subs	r2, r3, #1
    9a32:	490b      	ldr	r1, [pc, #44]	; (9a60 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x44>)
    9a34:	9b01      	ldr	r3, [sp, #4]
    9a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
    9a3a:	4a0a      	ldr	r2, [pc, #40]	; (9a64 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x48>)
    9a3c:	9b01      	ldr	r3, [sp, #4]
    9a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a42:	f003 0301 	and.w	r3, r3, #1
    9a46:	2b00      	cmp	r3, #0
    9a48:	d106      	bne.n	9a58 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x3c>
    9a4a:	4a05      	ldr	r2, [pc, #20]	; (9a60 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x44>)
    9a4c:	9b01      	ldr	r3, [sp, #4]
    9a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a52:	2b00      	cmp	r3, #0
    9a54:	d100      	bne.n	9a58 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9a56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9a58:	bf00      	nop
    9a5a:	b003      	add	sp, #12
    9a5c:	f85d fb04 	ldr.w	pc, [sp], #4
    9a60:	1fff910c 	.word	0x1fff910c
    9a64:	1fff9108 	.word	0x1fff9108

00009a68 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62(void)
{
    9a68:	b500      	push	{lr}
    9a6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a6c:	f7f7 f89a 	bl	ba4 <Sys_GetCoreID>
    9a70:	4603      	mov	r3, r0
    9a72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId])
    9a74:	4a10      	ldr	r2, [pc, #64]	; (9ab8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x50>)
    9a76:	9b01      	ldr	r3, [sp, #4]
    9a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a7c:	2b00      	cmp	r3, #0
    9a7e:	d10d      	bne.n	9a9c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9a80:	f7f6 ffaf 	bl	9e2 <Gpt_schm_read_msr>
    9a84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9a86:	9b00      	ldr	r3, [sp, #0]
    9a88:	f003 0301 	and.w	r3, r3, #1
    9a8c:	2b00      	cmp	r3, #0
    9a8e:	d100      	bne.n	9a92 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9a90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_62[u32CoreId] = msr;
    9a92:	490a      	ldr	r1, [pc, #40]	; (9abc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x54>)
    9a94:	9b01      	ldr	r3, [sp, #4]
    9a96:	9a00      	ldr	r2, [sp, #0]
    9a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId]++;
    9a9c:	4a06      	ldr	r2, [pc, #24]	; (9ab8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x50>)
    9a9e:	9b01      	ldr	r3, [sp, #4]
    9aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aa4:	1c5a      	adds	r2, r3, #1
    9aa6:	4904      	ldr	r1, [pc, #16]	; (9ab8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x50>)
    9aa8:	9b01      	ldr	r3, [sp, #4]
    9aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9aae:	bf00      	nop
    9ab0:	b003      	add	sp, #12
    9ab2:	f85d fb04 	ldr.w	pc, [sp], #4
    9ab6:	bf00      	nop
    9ab8:	1fff9114 	.word	0x1fff9114
    9abc:	1fff9110 	.word	0x1fff9110

00009ac0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62(void)
{
    9ac0:	b500      	push	{lr}
    9ac2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9ac4:	f7f7 f86e 	bl	ba4 <Sys_GetCoreID>
    9ac8:	4603      	mov	r3, r0
    9aca:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId]--;
    9acc:	4a0d      	ldr	r2, [pc, #52]	; (9b04 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x44>)
    9ace:	9b01      	ldr	r3, [sp, #4]
    9ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ad4:	1e5a      	subs	r2, r3, #1
    9ad6:	490b      	ldr	r1, [pc, #44]	; (9b04 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x44>)
    9ad8:	9b01      	ldr	r3, [sp, #4]
    9ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
    9ade:	4a0a      	ldr	r2, [pc, #40]	; (9b08 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x48>)
    9ae0:	9b01      	ldr	r3, [sp, #4]
    9ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ae6:	f003 0301 	and.w	r3, r3, #1
    9aea:	2b00      	cmp	r3, #0
    9aec:	d106      	bne.n	9afc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x3c>
    9aee:	4a05      	ldr	r2, [pc, #20]	; (9b04 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x44>)
    9af0:	9b01      	ldr	r3, [sp, #4]
    9af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9af6:	2b00      	cmp	r3, #0
    9af8:	d100      	bne.n	9afc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9afa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9afc:	bf00      	nop
    9afe:	b003      	add	sp, #12
    9b00:	f85d fb04 	ldr.w	pc, [sp], #4
    9b04:	1fff9114 	.word	0x1fff9114
    9b08:	1fff9110 	.word	0x1fff9110

00009b0c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63(void)
{
    9b0c:	b500      	push	{lr}
    9b0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b10:	f7f7 f848 	bl	ba4 <Sys_GetCoreID>
    9b14:	4603      	mov	r3, r0
    9b16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId])
    9b18:	4a10      	ldr	r2, [pc, #64]	; (9b5c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x50>)
    9b1a:	9b01      	ldr	r3, [sp, #4]
    9b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b20:	2b00      	cmp	r3, #0
    9b22:	d10d      	bne.n	9b40 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9b24:	f7f6 ff5d 	bl	9e2 <Gpt_schm_read_msr>
    9b28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9b2a:	9b00      	ldr	r3, [sp, #0]
    9b2c:	f003 0301 	and.w	r3, r3, #1
    9b30:	2b00      	cmp	r3, #0
    9b32:	d100      	bne.n	9b36 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9b34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_63[u32CoreId] = msr;
    9b36:	490a      	ldr	r1, [pc, #40]	; (9b60 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x54>)
    9b38:	9b01      	ldr	r3, [sp, #4]
    9b3a:	9a00      	ldr	r2, [sp, #0]
    9b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId]++;
    9b40:	4a06      	ldr	r2, [pc, #24]	; (9b5c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x50>)
    9b42:	9b01      	ldr	r3, [sp, #4]
    9b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b48:	1c5a      	adds	r2, r3, #1
    9b4a:	4904      	ldr	r1, [pc, #16]	; (9b5c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x50>)
    9b4c:	9b01      	ldr	r3, [sp, #4]
    9b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9b52:	bf00      	nop
    9b54:	b003      	add	sp, #12
    9b56:	f85d fb04 	ldr.w	pc, [sp], #4
    9b5a:	bf00      	nop
    9b5c:	1fff911c 	.word	0x1fff911c
    9b60:	1fff9118 	.word	0x1fff9118

00009b64 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63(void)
{
    9b64:	b500      	push	{lr}
    9b66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b68:	f7f7 f81c 	bl	ba4 <Sys_GetCoreID>
    9b6c:	4603      	mov	r3, r0
    9b6e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId]--;
    9b70:	4a0d      	ldr	r2, [pc, #52]	; (9ba8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x44>)
    9b72:	9b01      	ldr	r3, [sp, #4]
    9b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b78:	1e5a      	subs	r2, r3, #1
    9b7a:	490b      	ldr	r1, [pc, #44]	; (9ba8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x44>)
    9b7c:	9b01      	ldr	r3, [sp, #4]
    9b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
    9b82:	4a0a      	ldr	r2, [pc, #40]	; (9bac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x48>)
    9b84:	9b01      	ldr	r3, [sp, #4]
    9b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b8a:	f003 0301 	and.w	r3, r3, #1
    9b8e:	2b00      	cmp	r3, #0
    9b90:	d106      	bne.n	9ba0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x3c>
    9b92:	4a05      	ldr	r2, [pc, #20]	; (9ba8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x44>)
    9b94:	9b01      	ldr	r3, [sp, #4]
    9b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b9a:	2b00      	cmp	r3, #0
    9b9c:	d100      	bne.n	9ba0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9b9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9ba0:	bf00      	nop
    9ba2:	b003      	add	sp, #12
    9ba4:	f85d fb04 	ldr.w	pc, [sp], #4
    9ba8:	1fff911c 	.word	0x1fff911c
    9bac:	1fff9118 	.word	0x1fff9118

00009bb0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64(void)
{
    9bb0:	b500      	push	{lr}
    9bb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9bb4:	f7f6 fff6 	bl	ba4 <Sys_GetCoreID>
    9bb8:	4603      	mov	r3, r0
    9bba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId])
    9bbc:	4a10      	ldr	r2, [pc, #64]	; (9c00 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x50>)
    9bbe:	9b01      	ldr	r3, [sp, #4]
    9bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bc4:	2b00      	cmp	r3, #0
    9bc6:	d10d      	bne.n	9be4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9bc8:	f7f6 ff0b 	bl	9e2 <Gpt_schm_read_msr>
    9bcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9bce:	9b00      	ldr	r3, [sp, #0]
    9bd0:	f003 0301 	and.w	r3, r3, #1
    9bd4:	2b00      	cmp	r3, #0
    9bd6:	d100      	bne.n	9bda <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9bd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_64[u32CoreId] = msr;
    9bda:	490a      	ldr	r1, [pc, #40]	; (9c04 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x54>)
    9bdc:	9b01      	ldr	r3, [sp, #4]
    9bde:	9a00      	ldr	r2, [sp, #0]
    9be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId]++;
    9be4:	4a06      	ldr	r2, [pc, #24]	; (9c00 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x50>)
    9be6:	9b01      	ldr	r3, [sp, #4]
    9be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bec:	1c5a      	adds	r2, r3, #1
    9bee:	4904      	ldr	r1, [pc, #16]	; (9c00 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x50>)
    9bf0:	9b01      	ldr	r3, [sp, #4]
    9bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9bf6:	bf00      	nop
    9bf8:	b003      	add	sp, #12
    9bfa:	f85d fb04 	ldr.w	pc, [sp], #4
    9bfe:	bf00      	nop
    9c00:	1fff9124 	.word	0x1fff9124
    9c04:	1fff9120 	.word	0x1fff9120

00009c08 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64(void)
{
    9c08:	b500      	push	{lr}
    9c0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9c0c:	f7f6 ffca 	bl	ba4 <Sys_GetCoreID>
    9c10:	4603      	mov	r3, r0
    9c12:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId]--;
    9c14:	4a0d      	ldr	r2, [pc, #52]	; (9c4c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x44>)
    9c16:	9b01      	ldr	r3, [sp, #4]
    9c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c1c:	1e5a      	subs	r2, r3, #1
    9c1e:	490b      	ldr	r1, [pc, #44]	; (9c4c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x44>)
    9c20:	9b01      	ldr	r3, [sp, #4]
    9c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
    9c26:	4a0a      	ldr	r2, [pc, #40]	; (9c50 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x48>)
    9c28:	9b01      	ldr	r3, [sp, #4]
    9c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c2e:	f003 0301 	and.w	r3, r3, #1
    9c32:	2b00      	cmp	r3, #0
    9c34:	d106      	bne.n	9c44 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x3c>
    9c36:	4a05      	ldr	r2, [pc, #20]	; (9c4c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x44>)
    9c38:	9b01      	ldr	r3, [sp, #4]
    9c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c3e:	2b00      	cmp	r3, #0
    9c40:	d100      	bne.n	9c44 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9c42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9c44:	bf00      	nop
    9c46:	b003      	add	sp, #12
    9c48:	f85d fb04 	ldr.w	pc, [sp], #4
    9c4c:	1fff9124 	.word	0x1fff9124
    9c50:	1fff9120 	.word	0x1fff9120

00009c54 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65(void)
{
    9c54:	b500      	push	{lr}
    9c56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9c58:	f7f6 ffa4 	bl	ba4 <Sys_GetCoreID>
    9c5c:	4603      	mov	r3, r0
    9c5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId])
    9c60:	4a10      	ldr	r2, [pc, #64]	; (9ca4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x50>)
    9c62:	9b01      	ldr	r3, [sp, #4]
    9c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c68:	2b00      	cmp	r3, #0
    9c6a:	d10d      	bne.n	9c88 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9c6c:	f7f6 feb9 	bl	9e2 <Gpt_schm_read_msr>
    9c70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9c72:	9b00      	ldr	r3, [sp, #0]
    9c74:	f003 0301 	and.w	r3, r3, #1
    9c78:	2b00      	cmp	r3, #0
    9c7a:	d100      	bne.n	9c7e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9c7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_65[u32CoreId] = msr;
    9c7e:	490a      	ldr	r1, [pc, #40]	; (9ca8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x54>)
    9c80:	9b01      	ldr	r3, [sp, #4]
    9c82:	9a00      	ldr	r2, [sp, #0]
    9c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId]++;
    9c88:	4a06      	ldr	r2, [pc, #24]	; (9ca4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x50>)
    9c8a:	9b01      	ldr	r3, [sp, #4]
    9c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c90:	1c5a      	adds	r2, r3, #1
    9c92:	4904      	ldr	r1, [pc, #16]	; (9ca4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x50>)
    9c94:	9b01      	ldr	r3, [sp, #4]
    9c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9c9a:	bf00      	nop
    9c9c:	b003      	add	sp, #12
    9c9e:	f85d fb04 	ldr.w	pc, [sp], #4
    9ca2:	bf00      	nop
    9ca4:	1fff912c 	.word	0x1fff912c
    9ca8:	1fff9128 	.word	0x1fff9128

00009cac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65(void)
{
    9cac:	b500      	push	{lr}
    9cae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9cb0:	f7f6 ff78 	bl	ba4 <Sys_GetCoreID>
    9cb4:	4603      	mov	r3, r0
    9cb6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId]--;
    9cb8:	4a0d      	ldr	r2, [pc, #52]	; (9cf0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x44>)
    9cba:	9b01      	ldr	r3, [sp, #4]
    9cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cc0:	1e5a      	subs	r2, r3, #1
    9cc2:	490b      	ldr	r1, [pc, #44]	; (9cf0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x44>)
    9cc4:	9b01      	ldr	r3, [sp, #4]
    9cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
    9cca:	4a0a      	ldr	r2, [pc, #40]	; (9cf4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x48>)
    9ccc:	9b01      	ldr	r3, [sp, #4]
    9cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cd2:	f003 0301 	and.w	r3, r3, #1
    9cd6:	2b00      	cmp	r3, #0
    9cd8:	d106      	bne.n	9ce8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x3c>
    9cda:	4a05      	ldr	r2, [pc, #20]	; (9cf0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x44>)
    9cdc:	9b01      	ldr	r3, [sp, #4]
    9cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ce2:	2b00      	cmp	r3, #0
    9ce4:	d100      	bne.n	9ce8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9ce6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9ce8:	bf00      	nop
    9cea:	b003      	add	sp, #12
    9cec:	f85d fb04 	ldr.w	pc, [sp], #4
    9cf0:	1fff912c 	.word	0x1fff912c
    9cf4:	1fff9128 	.word	0x1fff9128

00009cf8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66(void)
{
    9cf8:	b500      	push	{lr}
    9cfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9cfc:	f7f6 ff52 	bl	ba4 <Sys_GetCoreID>
    9d00:	4603      	mov	r3, r0
    9d02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId])
    9d04:	4a10      	ldr	r2, [pc, #64]	; (9d48 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x50>)
    9d06:	9b01      	ldr	r3, [sp, #4]
    9d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d0c:	2b00      	cmp	r3, #0
    9d0e:	d10d      	bne.n	9d2c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9d10:	f7f6 fe67 	bl	9e2 <Gpt_schm_read_msr>
    9d14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9d16:	9b00      	ldr	r3, [sp, #0]
    9d18:	f003 0301 	and.w	r3, r3, #1
    9d1c:	2b00      	cmp	r3, #0
    9d1e:	d100      	bne.n	9d22 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9d20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_66[u32CoreId] = msr;
    9d22:	490a      	ldr	r1, [pc, #40]	; (9d4c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x54>)
    9d24:	9b01      	ldr	r3, [sp, #4]
    9d26:	9a00      	ldr	r2, [sp, #0]
    9d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId]++;
    9d2c:	4a06      	ldr	r2, [pc, #24]	; (9d48 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x50>)
    9d2e:	9b01      	ldr	r3, [sp, #4]
    9d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d34:	1c5a      	adds	r2, r3, #1
    9d36:	4904      	ldr	r1, [pc, #16]	; (9d48 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x50>)
    9d38:	9b01      	ldr	r3, [sp, #4]
    9d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9d3e:	bf00      	nop
    9d40:	b003      	add	sp, #12
    9d42:	f85d fb04 	ldr.w	pc, [sp], #4
    9d46:	bf00      	nop
    9d48:	1fff9134 	.word	0x1fff9134
    9d4c:	1fff9130 	.word	0x1fff9130

00009d50 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66(void)
{
    9d50:	b500      	push	{lr}
    9d52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9d54:	f7f6 ff26 	bl	ba4 <Sys_GetCoreID>
    9d58:	4603      	mov	r3, r0
    9d5a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId]--;
    9d5c:	4a0d      	ldr	r2, [pc, #52]	; (9d94 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x44>)
    9d5e:	9b01      	ldr	r3, [sp, #4]
    9d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d64:	1e5a      	subs	r2, r3, #1
    9d66:	490b      	ldr	r1, [pc, #44]	; (9d94 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x44>)
    9d68:	9b01      	ldr	r3, [sp, #4]
    9d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
    9d6e:	4a0a      	ldr	r2, [pc, #40]	; (9d98 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x48>)
    9d70:	9b01      	ldr	r3, [sp, #4]
    9d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d76:	f003 0301 	and.w	r3, r3, #1
    9d7a:	2b00      	cmp	r3, #0
    9d7c:	d106      	bne.n	9d8c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x3c>
    9d7e:	4a05      	ldr	r2, [pc, #20]	; (9d94 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x44>)
    9d80:	9b01      	ldr	r3, [sp, #4]
    9d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d86:	2b00      	cmp	r3, #0
    9d88:	d100      	bne.n	9d8c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9d8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9d8c:	bf00      	nop
    9d8e:	b003      	add	sp, #12
    9d90:	f85d fb04 	ldr.w	pc, [sp], #4
    9d94:	1fff9134 	.word	0x1fff9134
    9d98:	1fff9130 	.word	0x1fff9130

00009d9c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67(void)
{
    9d9c:	b500      	push	{lr}
    9d9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9da0:	f7f6 ff00 	bl	ba4 <Sys_GetCoreID>
    9da4:	4603      	mov	r3, r0
    9da6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId])
    9da8:	4a10      	ldr	r2, [pc, #64]	; (9dec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x50>)
    9daa:	9b01      	ldr	r3, [sp, #4]
    9dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9db0:	2b00      	cmp	r3, #0
    9db2:	d10d      	bne.n	9dd0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9db4:	f7f6 fe15 	bl	9e2 <Gpt_schm_read_msr>
    9db8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9dba:	9b00      	ldr	r3, [sp, #0]
    9dbc:	f003 0301 	and.w	r3, r3, #1
    9dc0:	2b00      	cmp	r3, #0
    9dc2:	d100      	bne.n	9dc6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9dc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_67[u32CoreId] = msr;
    9dc6:	490a      	ldr	r1, [pc, #40]	; (9df0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x54>)
    9dc8:	9b01      	ldr	r3, [sp, #4]
    9dca:	9a00      	ldr	r2, [sp, #0]
    9dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId]++;
    9dd0:	4a06      	ldr	r2, [pc, #24]	; (9dec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x50>)
    9dd2:	9b01      	ldr	r3, [sp, #4]
    9dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dd8:	1c5a      	adds	r2, r3, #1
    9dda:	4904      	ldr	r1, [pc, #16]	; (9dec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x50>)
    9ddc:	9b01      	ldr	r3, [sp, #4]
    9dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9de2:	bf00      	nop
    9de4:	b003      	add	sp, #12
    9de6:	f85d fb04 	ldr.w	pc, [sp], #4
    9dea:	bf00      	nop
    9dec:	1fff913c 	.word	0x1fff913c
    9df0:	1fff9138 	.word	0x1fff9138

00009df4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67(void)
{
    9df4:	b500      	push	{lr}
    9df6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9df8:	f7f6 fed4 	bl	ba4 <Sys_GetCoreID>
    9dfc:	4603      	mov	r3, r0
    9dfe:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId]--;
    9e00:	4a0d      	ldr	r2, [pc, #52]	; (9e38 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x44>)
    9e02:	9b01      	ldr	r3, [sp, #4]
    9e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e08:	1e5a      	subs	r2, r3, #1
    9e0a:	490b      	ldr	r1, [pc, #44]	; (9e38 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x44>)
    9e0c:	9b01      	ldr	r3, [sp, #4]
    9e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
    9e12:	4a0a      	ldr	r2, [pc, #40]	; (9e3c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x48>)
    9e14:	9b01      	ldr	r3, [sp, #4]
    9e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e1a:	f003 0301 	and.w	r3, r3, #1
    9e1e:	2b00      	cmp	r3, #0
    9e20:	d106      	bne.n	9e30 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x3c>
    9e22:	4a05      	ldr	r2, [pc, #20]	; (9e38 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x44>)
    9e24:	9b01      	ldr	r3, [sp, #4]
    9e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e2a:	2b00      	cmp	r3, #0
    9e2c:	d100      	bne.n	9e30 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9e2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9e30:	bf00      	nop
    9e32:	b003      	add	sp, #12
    9e34:	f85d fb04 	ldr.w	pc, [sp], #4
    9e38:	1fff913c 	.word	0x1fff913c
    9e3c:	1fff9138 	.word	0x1fff9138

00009e40 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68(void)
{
    9e40:	b500      	push	{lr}
    9e42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e44:	f7f6 feae 	bl	ba4 <Sys_GetCoreID>
    9e48:	4603      	mov	r3, r0
    9e4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId])
    9e4c:	4a10      	ldr	r2, [pc, #64]	; (9e90 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x50>)
    9e4e:	9b01      	ldr	r3, [sp, #4]
    9e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e54:	2b00      	cmp	r3, #0
    9e56:	d10d      	bne.n	9e74 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9e58:	f7f6 fdc3 	bl	9e2 <Gpt_schm_read_msr>
    9e5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9e5e:	9b00      	ldr	r3, [sp, #0]
    9e60:	f003 0301 	and.w	r3, r3, #1
    9e64:	2b00      	cmp	r3, #0
    9e66:	d100      	bne.n	9e6a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9e68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_68[u32CoreId] = msr;
    9e6a:	490a      	ldr	r1, [pc, #40]	; (9e94 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x54>)
    9e6c:	9b01      	ldr	r3, [sp, #4]
    9e6e:	9a00      	ldr	r2, [sp, #0]
    9e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId]++;
    9e74:	4a06      	ldr	r2, [pc, #24]	; (9e90 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x50>)
    9e76:	9b01      	ldr	r3, [sp, #4]
    9e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e7c:	1c5a      	adds	r2, r3, #1
    9e7e:	4904      	ldr	r1, [pc, #16]	; (9e90 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x50>)
    9e80:	9b01      	ldr	r3, [sp, #4]
    9e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9e86:	bf00      	nop
    9e88:	b003      	add	sp, #12
    9e8a:	f85d fb04 	ldr.w	pc, [sp], #4
    9e8e:	bf00      	nop
    9e90:	1fff9144 	.word	0x1fff9144
    9e94:	1fff9140 	.word	0x1fff9140

00009e98 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68(void)
{
    9e98:	b500      	push	{lr}
    9e9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e9c:	f7f6 fe82 	bl	ba4 <Sys_GetCoreID>
    9ea0:	4603      	mov	r3, r0
    9ea2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId]--;
    9ea4:	4a0d      	ldr	r2, [pc, #52]	; (9edc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x44>)
    9ea6:	9b01      	ldr	r3, [sp, #4]
    9ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9eac:	1e5a      	subs	r2, r3, #1
    9eae:	490b      	ldr	r1, [pc, #44]	; (9edc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x44>)
    9eb0:	9b01      	ldr	r3, [sp, #4]
    9eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
    9eb6:	4a0a      	ldr	r2, [pc, #40]	; (9ee0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x48>)
    9eb8:	9b01      	ldr	r3, [sp, #4]
    9eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ebe:	f003 0301 	and.w	r3, r3, #1
    9ec2:	2b00      	cmp	r3, #0
    9ec4:	d106      	bne.n	9ed4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x3c>
    9ec6:	4a05      	ldr	r2, [pc, #20]	; (9edc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x44>)
    9ec8:	9b01      	ldr	r3, [sp, #4]
    9eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ece:	2b00      	cmp	r3, #0
    9ed0:	d100      	bne.n	9ed4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9ed2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9ed4:	bf00      	nop
    9ed6:	b003      	add	sp, #12
    9ed8:	f85d fb04 	ldr.w	pc, [sp], #4
    9edc:	1fff9144 	.word	0x1fff9144
    9ee0:	1fff9140 	.word	0x1fff9140

00009ee4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69(void)
{
    9ee4:	b500      	push	{lr}
    9ee6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9ee8:	f7f6 fe5c 	bl	ba4 <Sys_GetCoreID>
    9eec:	4603      	mov	r3, r0
    9eee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId])
    9ef0:	4a10      	ldr	r2, [pc, #64]	; (9f34 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x50>)
    9ef2:	9b01      	ldr	r3, [sp, #4]
    9ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ef8:	2b00      	cmp	r3, #0
    9efa:	d10d      	bne.n	9f18 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9efc:	f7f6 fd71 	bl	9e2 <Gpt_schm_read_msr>
    9f00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9f02:	9b00      	ldr	r3, [sp, #0]
    9f04:	f003 0301 	and.w	r3, r3, #1
    9f08:	2b00      	cmp	r3, #0
    9f0a:	d100      	bne.n	9f0e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9f0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_69[u32CoreId] = msr;
    9f0e:	490a      	ldr	r1, [pc, #40]	; (9f38 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x54>)
    9f10:	9b01      	ldr	r3, [sp, #4]
    9f12:	9a00      	ldr	r2, [sp, #0]
    9f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId]++;
    9f18:	4a06      	ldr	r2, [pc, #24]	; (9f34 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x50>)
    9f1a:	9b01      	ldr	r3, [sp, #4]
    9f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f20:	1c5a      	adds	r2, r3, #1
    9f22:	4904      	ldr	r1, [pc, #16]	; (9f34 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x50>)
    9f24:	9b01      	ldr	r3, [sp, #4]
    9f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9f2a:	bf00      	nop
    9f2c:	b003      	add	sp, #12
    9f2e:	f85d fb04 	ldr.w	pc, [sp], #4
    9f32:	bf00      	nop
    9f34:	1fff914c 	.word	0x1fff914c
    9f38:	1fff9148 	.word	0x1fff9148

00009f3c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69(void)
{
    9f3c:	b500      	push	{lr}
    9f3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9f40:	f7f6 fe30 	bl	ba4 <Sys_GetCoreID>
    9f44:	4603      	mov	r3, r0
    9f46:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId]--;
    9f48:	4a0d      	ldr	r2, [pc, #52]	; (9f80 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x44>)
    9f4a:	9b01      	ldr	r3, [sp, #4]
    9f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f50:	1e5a      	subs	r2, r3, #1
    9f52:	490b      	ldr	r1, [pc, #44]	; (9f80 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x44>)
    9f54:	9b01      	ldr	r3, [sp, #4]
    9f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
    9f5a:	4a0a      	ldr	r2, [pc, #40]	; (9f84 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x48>)
    9f5c:	9b01      	ldr	r3, [sp, #4]
    9f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f62:	f003 0301 	and.w	r3, r3, #1
    9f66:	2b00      	cmp	r3, #0
    9f68:	d106      	bne.n	9f78 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x3c>
    9f6a:	4a05      	ldr	r2, [pc, #20]	; (9f80 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x44>)
    9f6c:	9b01      	ldr	r3, [sp, #4]
    9f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f72:	2b00      	cmp	r3, #0
    9f74:	d100      	bne.n	9f78 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9f76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9f78:	bf00      	nop
    9f7a:	b003      	add	sp, #12
    9f7c:	f85d fb04 	ldr.w	pc, [sp], #4
    9f80:	1fff914c 	.word	0x1fff914c
    9f84:	1fff9148 	.word	0x1fff9148

00009f88 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70(void)
{
    9f88:	b500      	push	{lr}
    9f8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9f8c:	f7f6 fe0a 	bl	ba4 <Sys_GetCoreID>
    9f90:	4603      	mov	r3, r0
    9f92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId])
    9f94:	4a10      	ldr	r2, [pc, #64]	; (9fd8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x50>)
    9f96:	9b01      	ldr	r3, [sp, #4]
    9f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f9c:	2b00      	cmp	r3, #0
    9f9e:	d10d      	bne.n	9fbc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9fa0:	f7f6 fd1f 	bl	9e2 <Gpt_schm_read_msr>
    9fa4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9fa6:	9b00      	ldr	r3, [sp, #0]
    9fa8:	f003 0301 	and.w	r3, r3, #1
    9fac:	2b00      	cmp	r3, #0
    9fae:	d100      	bne.n	9fb2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9fb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_70[u32CoreId] = msr;
    9fb2:	490a      	ldr	r1, [pc, #40]	; (9fdc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x54>)
    9fb4:	9b01      	ldr	r3, [sp, #4]
    9fb6:	9a00      	ldr	r2, [sp, #0]
    9fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId]++;
    9fbc:	4a06      	ldr	r2, [pc, #24]	; (9fd8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x50>)
    9fbe:	9b01      	ldr	r3, [sp, #4]
    9fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fc4:	1c5a      	adds	r2, r3, #1
    9fc6:	4904      	ldr	r1, [pc, #16]	; (9fd8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x50>)
    9fc8:	9b01      	ldr	r3, [sp, #4]
    9fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9fce:	bf00      	nop
    9fd0:	b003      	add	sp, #12
    9fd2:	f85d fb04 	ldr.w	pc, [sp], #4
    9fd6:	bf00      	nop
    9fd8:	1fff9154 	.word	0x1fff9154
    9fdc:	1fff9150 	.word	0x1fff9150

00009fe0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70(void)
{
    9fe0:	b500      	push	{lr}
    9fe2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9fe4:	f7f6 fdde 	bl	ba4 <Sys_GetCoreID>
    9fe8:	4603      	mov	r3, r0
    9fea:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId]--;
    9fec:	4a0d      	ldr	r2, [pc, #52]	; (a024 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x44>)
    9fee:	9b01      	ldr	r3, [sp, #4]
    9ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ff4:	1e5a      	subs	r2, r3, #1
    9ff6:	490b      	ldr	r1, [pc, #44]	; (a024 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x44>)
    9ff8:	9b01      	ldr	r3, [sp, #4]
    9ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
    9ffe:	4a0a      	ldr	r2, [pc, #40]	; (a028 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x48>)
    a000:	9b01      	ldr	r3, [sp, #4]
    a002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a006:	f003 0301 	and.w	r3, r3, #1
    a00a:	2b00      	cmp	r3, #0
    a00c:	d106      	bne.n	a01c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x3c>
    a00e:	4a05      	ldr	r2, [pc, #20]	; (a024 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x44>)
    a010:	9b01      	ldr	r3, [sp, #4]
    a012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a016:	2b00      	cmp	r3, #0
    a018:	d100      	bne.n	a01c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a01a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a01c:	bf00      	nop
    a01e:	b003      	add	sp, #12
    a020:	f85d fb04 	ldr.w	pc, [sp], #4
    a024:	1fff9154 	.word	0x1fff9154
    a028:	1fff9150 	.word	0x1fff9150

0000a02c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71(void)
{
    a02c:	b500      	push	{lr}
    a02e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a030:	f7f6 fdb8 	bl	ba4 <Sys_GetCoreID>
    a034:	4603      	mov	r3, r0
    a036:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId])
    a038:	4a10      	ldr	r2, [pc, #64]	; (a07c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x50>)
    a03a:	9b01      	ldr	r3, [sp, #4]
    a03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a040:	2b00      	cmp	r3, #0
    a042:	d10d      	bne.n	a060 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a044:	f7f6 fccd 	bl	9e2 <Gpt_schm_read_msr>
    a048:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a04a:	9b00      	ldr	r3, [sp, #0]
    a04c:	f003 0301 	and.w	r3, r3, #1
    a050:	2b00      	cmp	r3, #0
    a052:	d100      	bne.n	a056 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a054:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_71[u32CoreId] = msr;
    a056:	490a      	ldr	r1, [pc, #40]	; (a080 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x54>)
    a058:	9b01      	ldr	r3, [sp, #4]
    a05a:	9a00      	ldr	r2, [sp, #0]
    a05c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId]++;
    a060:	4a06      	ldr	r2, [pc, #24]	; (a07c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x50>)
    a062:	9b01      	ldr	r3, [sp, #4]
    a064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a068:	1c5a      	adds	r2, r3, #1
    a06a:	4904      	ldr	r1, [pc, #16]	; (a07c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x50>)
    a06c:	9b01      	ldr	r3, [sp, #4]
    a06e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a072:	bf00      	nop
    a074:	b003      	add	sp, #12
    a076:	f85d fb04 	ldr.w	pc, [sp], #4
    a07a:	bf00      	nop
    a07c:	1fff915c 	.word	0x1fff915c
    a080:	1fff9158 	.word	0x1fff9158

0000a084 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71(void)
{
    a084:	b500      	push	{lr}
    a086:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a088:	f7f6 fd8c 	bl	ba4 <Sys_GetCoreID>
    a08c:	4603      	mov	r3, r0
    a08e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId]--;
    a090:	4a0d      	ldr	r2, [pc, #52]	; (a0c8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x44>)
    a092:	9b01      	ldr	r3, [sp, #4]
    a094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a098:	1e5a      	subs	r2, r3, #1
    a09a:	490b      	ldr	r1, [pc, #44]	; (a0c8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x44>)
    a09c:	9b01      	ldr	r3, [sp, #4]
    a09e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
    a0a2:	4a0a      	ldr	r2, [pc, #40]	; (a0cc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x48>)
    a0a4:	9b01      	ldr	r3, [sp, #4]
    a0a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0aa:	f003 0301 	and.w	r3, r3, #1
    a0ae:	2b00      	cmp	r3, #0
    a0b0:	d106      	bne.n	a0c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x3c>
    a0b2:	4a05      	ldr	r2, [pc, #20]	; (a0c8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x44>)
    a0b4:	9b01      	ldr	r3, [sp, #4]
    a0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0ba:	2b00      	cmp	r3, #0
    a0bc:	d100      	bne.n	a0c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a0be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a0c0:	bf00      	nop
    a0c2:	b003      	add	sp, #12
    a0c4:	f85d fb04 	ldr.w	pc, [sp], #4
    a0c8:	1fff915c 	.word	0x1fff915c
    a0cc:	1fff9158 	.word	0x1fff9158

0000a0d0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72(void)
{
    a0d0:	b500      	push	{lr}
    a0d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a0d4:	f7f6 fd66 	bl	ba4 <Sys_GetCoreID>
    a0d8:	4603      	mov	r3, r0
    a0da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId])
    a0dc:	4a10      	ldr	r2, [pc, #64]	; (a120 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x50>)
    a0de:	9b01      	ldr	r3, [sp, #4]
    a0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0e4:	2b00      	cmp	r3, #0
    a0e6:	d10d      	bne.n	a104 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a0e8:	f7f6 fc7b 	bl	9e2 <Gpt_schm_read_msr>
    a0ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a0ee:	9b00      	ldr	r3, [sp, #0]
    a0f0:	f003 0301 	and.w	r3, r3, #1
    a0f4:	2b00      	cmp	r3, #0
    a0f6:	d100      	bne.n	a0fa <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a0f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_72[u32CoreId] = msr;
    a0fa:	490a      	ldr	r1, [pc, #40]	; (a124 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x54>)
    a0fc:	9b01      	ldr	r3, [sp, #4]
    a0fe:	9a00      	ldr	r2, [sp, #0]
    a100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId]++;
    a104:	4a06      	ldr	r2, [pc, #24]	; (a120 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x50>)
    a106:	9b01      	ldr	r3, [sp, #4]
    a108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a10c:	1c5a      	adds	r2, r3, #1
    a10e:	4904      	ldr	r1, [pc, #16]	; (a120 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x50>)
    a110:	9b01      	ldr	r3, [sp, #4]
    a112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a116:	bf00      	nop
    a118:	b003      	add	sp, #12
    a11a:	f85d fb04 	ldr.w	pc, [sp], #4
    a11e:	bf00      	nop
    a120:	1fff9164 	.word	0x1fff9164
    a124:	1fff9160 	.word	0x1fff9160

0000a128 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72(void)
{
    a128:	b500      	push	{lr}
    a12a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a12c:	f7f6 fd3a 	bl	ba4 <Sys_GetCoreID>
    a130:	4603      	mov	r3, r0
    a132:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId]--;
    a134:	4a0d      	ldr	r2, [pc, #52]	; (a16c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x44>)
    a136:	9b01      	ldr	r3, [sp, #4]
    a138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a13c:	1e5a      	subs	r2, r3, #1
    a13e:	490b      	ldr	r1, [pc, #44]	; (a16c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x44>)
    a140:	9b01      	ldr	r3, [sp, #4]
    a142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
    a146:	4a0a      	ldr	r2, [pc, #40]	; (a170 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x48>)
    a148:	9b01      	ldr	r3, [sp, #4]
    a14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a14e:	f003 0301 	and.w	r3, r3, #1
    a152:	2b00      	cmp	r3, #0
    a154:	d106      	bne.n	a164 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x3c>
    a156:	4a05      	ldr	r2, [pc, #20]	; (a16c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x44>)
    a158:	9b01      	ldr	r3, [sp, #4]
    a15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a15e:	2b00      	cmp	r3, #0
    a160:	d100      	bne.n	a164 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a162:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a164:	bf00      	nop
    a166:	b003      	add	sp, #12
    a168:	f85d fb04 	ldr.w	pc, [sp], #4
    a16c:	1fff9164 	.word	0x1fff9164
    a170:	1fff9160 	.word	0x1fff9160

0000a174 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73(void)
{
    a174:	b500      	push	{lr}
    a176:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a178:	f7f6 fd14 	bl	ba4 <Sys_GetCoreID>
    a17c:	4603      	mov	r3, r0
    a17e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId])
    a180:	4a10      	ldr	r2, [pc, #64]	; (a1c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x50>)
    a182:	9b01      	ldr	r3, [sp, #4]
    a184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a188:	2b00      	cmp	r3, #0
    a18a:	d10d      	bne.n	a1a8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a18c:	f7f6 fc29 	bl	9e2 <Gpt_schm_read_msr>
    a190:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a192:	9b00      	ldr	r3, [sp, #0]
    a194:	f003 0301 	and.w	r3, r3, #1
    a198:	2b00      	cmp	r3, #0
    a19a:	d100      	bne.n	a19e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a19c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_73[u32CoreId] = msr;
    a19e:	490a      	ldr	r1, [pc, #40]	; (a1c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x54>)
    a1a0:	9b01      	ldr	r3, [sp, #4]
    a1a2:	9a00      	ldr	r2, [sp, #0]
    a1a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId]++;
    a1a8:	4a06      	ldr	r2, [pc, #24]	; (a1c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x50>)
    a1aa:	9b01      	ldr	r3, [sp, #4]
    a1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1b0:	1c5a      	adds	r2, r3, #1
    a1b2:	4904      	ldr	r1, [pc, #16]	; (a1c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x50>)
    a1b4:	9b01      	ldr	r3, [sp, #4]
    a1b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a1ba:	bf00      	nop
    a1bc:	b003      	add	sp, #12
    a1be:	f85d fb04 	ldr.w	pc, [sp], #4
    a1c2:	bf00      	nop
    a1c4:	1fff916c 	.word	0x1fff916c
    a1c8:	1fff9168 	.word	0x1fff9168

0000a1cc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73(void)
{
    a1cc:	b500      	push	{lr}
    a1ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a1d0:	f7f6 fce8 	bl	ba4 <Sys_GetCoreID>
    a1d4:	4603      	mov	r3, r0
    a1d6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId]--;
    a1d8:	4a0d      	ldr	r2, [pc, #52]	; (a210 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x44>)
    a1da:	9b01      	ldr	r3, [sp, #4]
    a1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1e0:	1e5a      	subs	r2, r3, #1
    a1e2:	490b      	ldr	r1, [pc, #44]	; (a210 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x44>)
    a1e4:	9b01      	ldr	r3, [sp, #4]
    a1e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
    a1ea:	4a0a      	ldr	r2, [pc, #40]	; (a214 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x48>)
    a1ec:	9b01      	ldr	r3, [sp, #4]
    a1ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1f2:	f003 0301 	and.w	r3, r3, #1
    a1f6:	2b00      	cmp	r3, #0
    a1f8:	d106      	bne.n	a208 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x3c>
    a1fa:	4a05      	ldr	r2, [pc, #20]	; (a210 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x44>)
    a1fc:	9b01      	ldr	r3, [sp, #4]
    a1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a202:	2b00      	cmp	r3, #0
    a204:	d100      	bne.n	a208 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a206:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a208:	bf00      	nop
    a20a:	b003      	add	sp, #12
    a20c:	f85d fb04 	ldr.w	pc, [sp], #4
    a210:	1fff916c 	.word	0x1fff916c
    a214:	1fff9168 	.word	0x1fff9168

0000a218 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    a218:	b500      	push	{lr}
    a21a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a21c:	f7f6 fcc2 	bl	ba4 <Sys_GetCoreID>
    a220:	4603      	mov	r3, r0
    a222:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    a224:	4a10      	ldr	r2, [pc, #64]	; (a268 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    a226:	9b01      	ldr	r3, [sp, #4]
    a228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a22c:	2b00      	cmp	r3, #0
    a22e:	d10d      	bne.n	a24c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a230:	f7f6 fbe0 	bl	9f4 <Mcu_schm_read_msr>
    a234:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a236:	9b00      	ldr	r3, [sp, #0]
    a238:	f003 0301 	and.w	r3, r3, #1
    a23c:	2b00      	cmp	r3, #0
    a23e:	d100      	bne.n	a242 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a240:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    a242:	490a      	ldr	r1, [pc, #40]	; (a26c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    a244:	9b01      	ldr	r3, [sp, #4]
    a246:	9a00      	ldr	r2, [sp, #0]
    a248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    a24c:	4a06      	ldr	r2, [pc, #24]	; (a268 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    a24e:	9b01      	ldr	r3, [sp, #4]
    a250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a254:	1c5a      	adds	r2, r3, #1
    a256:	4904      	ldr	r1, [pc, #16]	; (a268 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    a258:	9b01      	ldr	r3, [sp, #4]
    a25a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a25e:	bf00      	nop
    a260:	b003      	add	sp, #12
    a262:	f85d fb04 	ldr.w	pc, [sp], #4
    a266:	bf00      	nop
    a268:	1fff9174 	.word	0x1fff9174
    a26c:	1fff9170 	.word	0x1fff9170

0000a270 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    a270:	b500      	push	{lr}
    a272:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a274:	f7f6 fc96 	bl	ba4 <Sys_GetCoreID>
    a278:	4603      	mov	r3, r0
    a27a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    a27c:	4a0d      	ldr	r2, [pc, #52]	; (a2b4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    a27e:	9b01      	ldr	r3, [sp, #4]
    a280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a284:	1e5a      	subs	r2, r3, #1
    a286:	490b      	ldr	r1, [pc, #44]	; (a2b4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    a288:	9b01      	ldr	r3, [sp, #4]
    a28a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    a28e:	4a0a      	ldr	r2, [pc, #40]	; (a2b8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    a290:	9b01      	ldr	r3, [sp, #4]
    a292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a296:	f003 0301 	and.w	r3, r3, #1
    a29a:	2b00      	cmp	r3, #0
    a29c:	d106      	bne.n	a2ac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    a29e:	4a05      	ldr	r2, [pc, #20]	; (a2b4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    a2a0:	9b01      	ldr	r3, [sp, #4]
    a2a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2a6:	2b00      	cmp	r3, #0
    a2a8:	d100      	bne.n	a2ac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a2aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a2ac:	bf00      	nop
    a2ae:	b003      	add	sp, #12
    a2b0:	f85d fb04 	ldr.w	pc, [sp], #4
    a2b4:	1fff9174 	.word	0x1fff9174
    a2b8:	1fff9170 	.word	0x1fff9170

0000a2bc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    a2bc:	b500      	push	{lr}
    a2be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a2c0:	f7f6 fc70 	bl	ba4 <Sys_GetCoreID>
    a2c4:	4603      	mov	r3, r0
    a2c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    a2c8:	4a10      	ldr	r2, [pc, #64]	; (a30c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    a2ca:	9b01      	ldr	r3, [sp, #4]
    a2cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2d0:	2b00      	cmp	r3, #0
    a2d2:	d10d      	bne.n	a2f0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a2d4:	f7f6 fb8e 	bl	9f4 <Mcu_schm_read_msr>
    a2d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a2da:	9b00      	ldr	r3, [sp, #0]
    a2dc:	f003 0301 	and.w	r3, r3, #1
    a2e0:	2b00      	cmp	r3, #0
    a2e2:	d100      	bne.n	a2e6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a2e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    a2e6:	490a      	ldr	r1, [pc, #40]	; (a310 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    a2e8:	9b01      	ldr	r3, [sp, #4]
    a2ea:	9a00      	ldr	r2, [sp, #0]
    a2ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    a2f0:	4a06      	ldr	r2, [pc, #24]	; (a30c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    a2f2:	9b01      	ldr	r3, [sp, #4]
    a2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2f8:	1c5a      	adds	r2, r3, #1
    a2fa:	4904      	ldr	r1, [pc, #16]	; (a30c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    a2fc:	9b01      	ldr	r3, [sp, #4]
    a2fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a302:	bf00      	nop
    a304:	b003      	add	sp, #12
    a306:	f85d fb04 	ldr.w	pc, [sp], #4
    a30a:	bf00      	nop
    a30c:	1fff917c 	.word	0x1fff917c
    a310:	1fff9178 	.word	0x1fff9178

0000a314 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    a314:	b500      	push	{lr}
    a316:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a318:	f7f6 fc44 	bl	ba4 <Sys_GetCoreID>
    a31c:	4603      	mov	r3, r0
    a31e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    a320:	4a0d      	ldr	r2, [pc, #52]	; (a358 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    a322:	9b01      	ldr	r3, [sp, #4]
    a324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a328:	1e5a      	subs	r2, r3, #1
    a32a:	490b      	ldr	r1, [pc, #44]	; (a358 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    a32c:	9b01      	ldr	r3, [sp, #4]
    a32e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    a332:	4a0a      	ldr	r2, [pc, #40]	; (a35c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    a334:	9b01      	ldr	r3, [sp, #4]
    a336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a33a:	f003 0301 	and.w	r3, r3, #1
    a33e:	2b00      	cmp	r3, #0
    a340:	d106      	bne.n	a350 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    a342:	4a05      	ldr	r2, [pc, #20]	; (a358 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    a344:	9b01      	ldr	r3, [sp, #4]
    a346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a34a:	2b00      	cmp	r3, #0
    a34c:	d100      	bne.n	a350 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a34e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a350:	bf00      	nop
    a352:	b003      	add	sp, #12
    a354:	f85d fb04 	ldr.w	pc, [sp], #4
    a358:	1fff917c 	.word	0x1fff917c
    a35c:	1fff9178 	.word	0x1fff9178

0000a360 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    a360:	b500      	push	{lr}
    a362:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a364:	f7f6 fc1e 	bl	ba4 <Sys_GetCoreID>
    a368:	4603      	mov	r3, r0
    a36a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    a36c:	4a10      	ldr	r2, [pc, #64]	; (a3b0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    a36e:	9b01      	ldr	r3, [sp, #4]
    a370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a374:	2b00      	cmp	r3, #0
    a376:	d10d      	bne.n	a394 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a378:	f7f6 fb3c 	bl	9f4 <Mcu_schm_read_msr>
    a37c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a37e:	9b00      	ldr	r3, [sp, #0]
    a380:	f003 0301 	and.w	r3, r3, #1
    a384:	2b00      	cmp	r3, #0
    a386:	d100      	bne.n	a38a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a388:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    a38a:	490a      	ldr	r1, [pc, #40]	; (a3b4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    a38c:	9b01      	ldr	r3, [sp, #4]
    a38e:	9a00      	ldr	r2, [sp, #0]
    a390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    a394:	4a06      	ldr	r2, [pc, #24]	; (a3b0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    a396:	9b01      	ldr	r3, [sp, #4]
    a398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a39c:	1c5a      	adds	r2, r3, #1
    a39e:	4904      	ldr	r1, [pc, #16]	; (a3b0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    a3a0:	9b01      	ldr	r3, [sp, #4]
    a3a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a3a6:	bf00      	nop
    a3a8:	b003      	add	sp, #12
    a3aa:	f85d fb04 	ldr.w	pc, [sp], #4
    a3ae:	bf00      	nop
    a3b0:	1fff9184 	.word	0x1fff9184
    a3b4:	1fff9180 	.word	0x1fff9180

0000a3b8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    a3b8:	b500      	push	{lr}
    a3ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a3bc:	f7f6 fbf2 	bl	ba4 <Sys_GetCoreID>
    a3c0:	4603      	mov	r3, r0
    a3c2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    a3c4:	4a0d      	ldr	r2, [pc, #52]	; (a3fc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    a3c6:	9b01      	ldr	r3, [sp, #4]
    a3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3cc:	1e5a      	subs	r2, r3, #1
    a3ce:	490b      	ldr	r1, [pc, #44]	; (a3fc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    a3d0:	9b01      	ldr	r3, [sp, #4]
    a3d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    a3d6:	4a0a      	ldr	r2, [pc, #40]	; (a400 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    a3d8:	9b01      	ldr	r3, [sp, #4]
    a3da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3de:	f003 0301 	and.w	r3, r3, #1
    a3e2:	2b00      	cmp	r3, #0
    a3e4:	d106      	bne.n	a3f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    a3e6:	4a05      	ldr	r2, [pc, #20]	; (a3fc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    a3e8:	9b01      	ldr	r3, [sp, #4]
    a3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3ee:	2b00      	cmp	r3, #0
    a3f0:	d100      	bne.n	a3f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a3f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a3f4:	bf00      	nop
    a3f6:	b003      	add	sp, #12
    a3f8:	f85d fb04 	ldr.w	pc, [sp], #4
    a3fc:	1fff9184 	.word	0x1fff9184
    a400:	1fff9180 	.word	0x1fff9180

0000a404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    a404:	b500      	push	{lr}
    a406:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a408:	f7f6 fbcc 	bl	ba4 <Sys_GetCoreID>
    a40c:	4603      	mov	r3, r0
    a40e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    a410:	4a10      	ldr	r2, [pc, #64]	; (a454 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    a412:	9b01      	ldr	r3, [sp, #4]
    a414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a418:	2b00      	cmp	r3, #0
    a41a:	d10d      	bne.n	a438 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a41c:	f7f6 faf3 	bl	a06 <Port_schm_read_msr>
    a420:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a422:	9b00      	ldr	r3, [sp, #0]
    a424:	f003 0301 	and.w	r3, r3, #1
    a428:	2b00      	cmp	r3, #0
    a42a:	d100      	bne.n	a42e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a42c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    a42e:	490a      	ldr	r1, [pc, #40]	; (a458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    a430:	9b01      	ldr	r3, [sp, #4]
    a432:	9a00      	ldr	r2, [sp, #0]
    a434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    a438:	4a06      	ldr	r2, [pc, #24]	; (a454 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    a43a:	9b01      	ldr	r3, [sp, #4]
    a43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a440:	1c5a      	adds	r2, r3, #1
    a442:	4904      	ldr	r1, [pc, #16]	; (a454 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    a444:	9b01      	ldr	r3, [sp, #4]
    a446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a44a:	bf00      	nop
    a44c:	b003      	add	sp, #12
    a44e:	f85d fb04 	ldr.w	pc, [sp], #4
    a452:	bf00      	nop
    a454:	1fff918c 	.word	0x1fff918c
    a458:	1fff9188 	.word	0x1fff9188

0000a45c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    a45c:	b500      	push	{lr}
    a45e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a460:	f7f6 fba0 	bl	ba4 <Sys_GetCoreID>
    a464:	4603      	mov	r3, r0
    a466:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    a468:	4a0d      	ldr	r2, [pc, #52]	; (a4a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    a46a:	9b01      	ldr	r3, [sp, #4]
    a46c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a470:	1e5a      	subs	r2, r3, #1
    a472:	490b      	ldr	r1, [pc, #44]	; (a4a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    a474:	9b01      	ldr	r3, [sp, #4]
    a476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    a47a:	4a0a      	ldr	r2, [pc, #40]	; (a4a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    a47c:	9b01      	ldr	r3, [sp, #4]
    a47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a482:	f003 0301 	and.w	r3, r3, #1
    a486:	2b00      	cmp	r3, #0
    a488:	d106      	bne.n	a498 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    a48a:	4a05      	ldr	r2, [pc, #20]	; (a4a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    a48c:	9b01      	ldr	r3, [sp, #4]
    a48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a492:	2b00      	cmp	r3, #0
    a494:	d100      	bne.n	a498 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a496:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a498:	bf00      	nop
    a49a:	b003      	add	sp, #12
    a49c:	f85d fb04 	ldr.w	pc, [sp], #4
    a4a0:	1fff918c 	.word	0x1fff918c
    a4a4:	1fff9188 	.word	0x1fff9188

0000a4a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    a4a8:	b500      	push	{lr}
    a4aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a4ac:	f7f6 fb7a 	bl	ba4 <Sys_GetCoreID>
    a4b0:	4603      	mov	r3, r0
    a4b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    a4b4:	4a10      	ldr	r2, [pc, #64]	; (a4f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    a4b6:	9b01      	ldr	r3, [sp, #4]
    a4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4bc:	2b00      	cmp	r3, #0
    a4be:	d10d      	bne.n	a4dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a4c0:	f7f6 faa1 	bl	a06 <Port_schm_read_msr>
    a4c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a4c6:	9b00      	ldr	r3, [sp, #0]
    a4c8:	f003 0301 	and.w	r3, r3, #1
    a4cc:	2b00      	cmp	r3, #0
    a4ce:	d100      	bne.n	a4d2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a4d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    a4d2:	490a      	ldr	r1, [pc, #40]	; (a4fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    a4d4:	9b01      	ldr	r3, [sp, #4]
    a4d6:	9a00      	ldr	r2, [sp, #0]
    a4d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    a4dc:	4a06      	ldr	r2, [pc, #24]	; (a4f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    a4de:	9b01      	ldr	r3, [sp, #4]
    a4e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4e4:	1c5a      	adds	r2, r3, #1
    a4e6:	4904      	ldr	r1, [pc, #16]	; (a4f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    a4e8:	9b01      	ldr	r3, [sp, #4]
    a4ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a4ee:	bf00      	nop
    a4f0:	b003      	add	sp, #12
    a4f2:	f85d fb04 	ldr.w	pc, [sp], #4
    a4f6:	bf00      	nop
    a4f8:	1fff9194 	.word	0x1fff9194
    a4fc:	1fff9190 	.word	0x1fff9190

0000a500 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    a500:	b500      	push	{lr}
    a502:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a504:	f7f6 fb4e 	bl	ba4 <Sys_GetCoreID>
    a508:	4603      	mov	r3, r0
    a50a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    a50c:	4a0d      	ldr	r2, [pc, #52]	; (a544 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    a50e:	9b01      	ldr	r3, [sp, #4]
    a510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a514:	1e5a      	subs	r2, r3, #1
    a516:	490b      	ldr	r1, [pc, #44]	; (a544 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    a518:	9b01      	ldr	r3, [sp, #4]
    a51a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    a51e:	4a0a      	ldr	r2, [pc, #40]	; (a548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    a520:	9b01      	ldr	r3, [sp, #4]
    a522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a526:	f003 0301 	and.w	r3, r3, #1
    a52a:	2b00      	cmp	r3, #0
    a52c:	d106      	bne.n	a53c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    a52e:	4a05      	ldr	r2, [pc, #20]	; (a544 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    a530:	9b01      	ldr	r3, [sp, #4]
    a532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a536:	2b00      	cmp	r3, #0
    a538:	d100      	bne.n	a53c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a53a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a53c:	bf00      	nop
    a53e:	b003      	add	sp, #12
    a540:	f85d fb04 	ldr.w	pc, [sp], #4
    a544:	1fff9194 	.word	0x1fff9194
    a548:	1fff9190 	.word	0x1fff9190

0000a54c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    a54c:	b500      	push	{lr}
    a54e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a550:	f7f6 fb28 	bl	ba4 <Sys_GetCoreID>
    a554:	4603      	mov	r3, r0
    a556:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    a558:	4a10      	ldr	r2, [pc, #64]	; (a59c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    a55a:	9b01      	ldr	r3, [sp, #4]
    a55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a560:	2b00      	cmp	r3, #0
    a562:	d10d      	bne.n	a580 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a564:	f7f6 fa4f 	bl	a06 <Port_schm_read_msr>
    a568:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a56a:	9b00      	ldr	r3, [sp, #0]
    a56c:	f003 0301 	and.w	r3, r3, #1
    a570:	2b00      	cmp	r3, #0
    a572:	d100      	bne.n	a576 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a574:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    a576:	490a      	ldr	r1, [pc, #40]	; (a5a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    a578:	9b01      	ldr	r3, [sp, #4]
    a57a:	9a00      	ldr	r2, [sp, #0]
    a57c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    a580:	4a06      	ldr	r2, [pc, #24]	; (a59c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    a582:	9b01      	ldr	r3, [sp, #4]
    a584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a588:	1c5a      	adds	r2, r3, #1
    a58a:	4904      	ldr	r1, [pc, #16]	; (a59c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    a58c:	9b01      	ldr	r3, [sp, #4]
    a58e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a592:	bf00      	nop
    a594:	b003      	add	sp, #12
    a596:	f85d fb04 	ldr.w	pc, [sp], #4
    a59a:	bf00      	nop
    a59c:	1fff919c 	.word	0x1fff919c
    a5a0:	1fff9198 	.word	0x1fff9198

0000a5a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    a5a4:	b500      	push	{lr}
    a5a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a5a8:	f7f6 fafc 	bl	ba4 <Sys_GetCoreID>
    a5ac:	4603      	mov	r3, r0
    a5ae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    a5b0:	4a0d      	ldr	r2, [pc, #52]	; (a5e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    a5b2:	9b01      	ldr	r3, [sp, #4]
    a5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5b8:	1e5a      	subs	r2, r3, #1
    a5ba:	490b      	ldr	r1, [pc, #44]	; (a5e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    a5bc:	9b01      	ldr	r3, [sp, #4]
    a5be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    a5c2:	4a0a      	ldr	r2, [pc, #40]	; (a5ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    a5c4:	9b01      	ldr	r3, [sp, #4]
    a5c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5ca:	f003 0301 	and.w	r3, r3, #1
    a5ce:	2b00      	cmp	r3, #0
    a5d0:	d106      	bne.n	a5e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    a5d2:	4a05      	ldr	r2, [pc, #20]	; (a5e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    a5d4:	9b01      	ldr	r3, [sp, #4]
    a5d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5da:	2b00      	cmp	r3, #0
    a5dc:	d100      	bne.n	a5e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a5de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a5e0:	bf00      	nop
    a5e2:	b003      	add	sp, #12
    a5e4:	f85d fb04 	ldr.w	pc, [sp], #4
    a5e8:	1fff919c 	.word	0x1fff919c
    a5ec:	1fff9198 	.word	0x1fff9198

0000a5f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    a5f0:	b500      	push	{lr}
    a5f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a5f4:	f7f6 fad6 	bl	ba4 <Sys_GetCoreID>
    a5f8:	4603      	mov	r3, r0
    a5fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    a5fc:	4a10      	ldr	r2, [pc, #64]	; (a640 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    a5fe:	9b01      	ldr	r3, [sp, #4]
    a600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a604:	2b00      	cmp	r3, #0
    a606:	d10d      	bne.n	a624 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a608:	f7f6 f9fd 	bl	a06 <Port_schm_read_msr>
    a60c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a60e:	9b00      	ldr	r3, [sp, #0]
    a610:	f003 0301 	and.w	r3, r3, #1
    a614:	2b00      	cmp	r3, #0
    a616:	d100      	bne.n	a61a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a618:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    a61a:	490a      	ldr	r1, [pc, #40]	; (a644 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    a61c:	9b01      	ldr	r3, [sp, #4]
    a61e:	9a00      	ldr	r2, [sp, #0]
    a620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    a624:	4a06      	ldr	r2, [pc, #24]	; (a640 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    a626:	9b01      	ldr	r3, [sp, #4]
    a628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a62c:	1c5a      	adds	r2, r3, #1
    a62e:	4904      	ldr	r1, [pc, #16]	; (a640 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    a630:	9b01      	ldr	r3, [sp, #4]
    a632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a636:	bf00      	nop
    a638:	b003      	add	sp, #12
    a63a:	f85d fb04 	ldr.w	pc, [sp], #4
    a63e:	bf00      	nop
    a640:	1fff91a4 	.word	0x1fff91a4
    a644:	1fff91a0 	.word	0x1fff91a0

0000a648 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    a648:	b500      	push	{lr}
    a64a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a64c:	f7f6 faaa 	bl	ba4 <Sys_GetCoreID>
    a650:	4603      	mov	r3, r0
    a652:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    a654:	4a0d      	ldr	r2, [pc, #52]	; (a68c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    a656:	9b01      	ldr	r3, [sp, #4]
    a658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a65c:	1e5a      	subs	r2, r3, #1
    a65e:	490b      	ldr	r1, [pc, #44]	; (a68c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    a660:	9b01      	ldr	r3, [sp, #4]
    a662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    a666:	4a0a      	ldr	r2, [pc, #40]	; (a690 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    a668:	9b01      	ldr	r3, [sp, #4]
    a66a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a66e:	f003 0301 	and.w	r3, r3, #1
    a672:	2b00      	cmp	r3, #0
    a674:	d106      	bne.n	a684 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    a676:	4a05      	ldr	r2, [pc, #20]	; (a68c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    a678:	9b01      	ldr	r3, [sp, #4]
    a67a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a67e:	2b00      	cmp	r3, #0
    a680:	d100      	bne.n	a684 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a682:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a684:	bf00      	nop
    a686:	b003      	add	sp, #12
    a688:	f85d fb04 	ldr.w	pc, [sp], #4
    a68c:	1fff91a4 	.word	0x1fff91a4
    a690:	1fff91a0 	.word	0x1fff91a0

0000a694 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    a694:	b500      	push	{lr}
    a696:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a698:	f7f6 fa84 	bl	ba4 <Sys_GetCoreID>
    a69c:	4603      	mov	r3, r0
    a69e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    a6a0:	4a10      	ldr	r2, [pc, #64]	; (a6e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    a6a2:	9b01      	ldr	r3, [sp, #4]
    a6a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6a8:	2b00      	cmp	r3, #0
    a6aa:	d10d      	bne.n	a6c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a6ac:	f7f6 f9ab 	bl	a06 <Port_schm_read_msr>
    a6b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a6b2:	9b00      	ldr	r3, [sp, #0]
    a6b4:	f003 0301 	and.w	r3, r3, #1
    a6b8:	2b00      	cmp	r3, #0
    a6ba:	d100      	bne.n	a6be <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a6bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    a6be:	490a      	ldr	r1, [pc, #40]	; (a6e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    a6c0:	9b01      	ldr	r3, [sp, #4]
    a6c2:	9a00      	ldr	r2, [sp, #0]
    a6c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    a6c8:	4a06      	ldr	r2, [pc, #24]	; (a6e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    a6ca:	9b01      	ldr	r3, [sp, #4]
    a6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6d0:	1c5a      	adds	r2, r3, #1
    a6d2:	4904      	ldr	r1, [pc, #16]	; (a6e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    a6d4:	9b01      	ldr	r3, [sp, #4]
    a6d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a6da:	bf00      	nop
    a6dc:	b003      	add	sp, #12
    a6de:	f85d fb04 	ldr.w	pc, [sp], #4
    a6e2:	bf00      	nop
    a6e4:	1fff91ac 	.word	0x1fff91ac
    a6e8:	1fff91a8 	.word	0x1fff91a8

0000a6ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    a6ec:	b500      	push	{lr}
    a6ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a6f0:	f7f6 fa58 	bl	ba4 <Sys_GetCoreID>
    a6f4:	4603      	mov	r3, r0
    a6f6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    a6f8:	4a0d      	ldr	r2, [pc, #52]	; (a730 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    a6fa:	9b01      	ldr	r3, [sp, #4]
    a6fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a700:	1e5a      	subs	r2, r3, #1
    a702:	490b      	ldr	r1, [pc, #44]	; (a730 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    a704:	9b01      	ldr	r3, [sp, #4]
    a706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    a70a:	4a0a      	ldr	r2, [pc, #40]	; (a734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    a70c:	9b01      	ldr	r3, [sp, #4]
    a70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a712:	f003 0301 	and.w	r3, r3, #1
    a716:	2b00      	cmp	r3, #0
    a718:	d106      	bne.n	a728 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    a71a:	4a05      	ldr	r2, [pc, #20]	; (a730 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    a71c:	9b01      	ldr	r3, [sp, #4]
    a71e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a722:	2b00      	cmp	r3, #0
    a724:	d100      	bne.n	a728 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a726:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a728:	bf00      	nop
    a72a:	b003      	add	sp, #12
    a72c:	f85d fb04 	ldr.w	pc, [sp], #4
    a730:	1fff91ac 	.word	0x1fff91ac
    a734:	1fff91a8 	.word	0x1fff91a8

0000a738 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    a738:	b500      	push	{lr}
    a73a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a73c:	f7f6 fa32 	bl	ba4 <Sys_GetCoreID>
    a740:	4603      	mov	r3, r0
    a742:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    a744:	4a10      	ldr	r2, [pc, #64]	; (a788 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    a746:	9b01      	ldr	r3, [sp, #4]
    a748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a74c:	2b00      	cmp	r3, #0
    a74e:	d10d      	bne.n	a76c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a750:	f7f6 f959 	bl	a06 <Port_schm_read_msr>
    a754:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a756:	9b00      	ldr	r3, [sp, #0]
    a758:	f003 0301 	and.w	r3, r3, #1
    a75c:	2b00      	cmp	r3, #0
    a75e:	d100      	bne.n	a762 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a760:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    a762:	490a      	ldr	r1, [pc, #40]	; (a78c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    a764:	9b01      	ldr	r3, [sp, #4]
    a766:	9a00      	ldr	r2, [sp, #0]
    a768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    a76c:	4a06      	ldr	r2, [pc, #24]	; (a788 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    a76e:	9b01      	ldr	r3, [sp, #4]
    a770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a774:	1c5a      	adds	r2, r3, #1
    a776:	4904      	ldr	r1, [pc, #16]	; (a788 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    a778:	9b01      	ldr	r3, [sp, #4]
    a77a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a77e:	bf00      	nop
    a780:	b003      	add	sp, #12
    a782:	f85d fb04 	ldr.w	pc, [sp], #4
    a786:	bf00      	nop
    a788:	1fff91b4 	.word	0x1fff91b4
    a78c:	1fff91b0 	.word	0x1fff91b0

0000a790 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    a790:	b500      	push	{lr}
    a792:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a794:	f7f6 fa06 	bl	ba4 <Sys_GetCoreID>
    a798:	4603      	mov	r3, r0
    a79a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    a79c:	4a0d      	ldr	r2, [pc, #52]	; (a7d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    a79e:	9b01      	ldr	r3, [sp, #4]
    a7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7a4:	1e5a      	subs	r2, r3, #1
    a7a6:	490b      	ldr	r1, [pc, #44]	; (a7d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    a7a8:	9b01      	ldr	r3, [sp, #4]
    a7aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    a7ae:	4a0a      	ldr	r2, [pc, #40]	; (a7d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    a7b0:	9b01      	ldr	r3, [sp, #4]
    a7b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7b6:	f003 0301 	and.w	r3, r3, #1
    a7ba:	2b00      	cmp	r3, #0
    a7bc:	d106      	bne.n	a7cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    a7be:	4a05      	ldr	r2, [pc, #20]	; (a7d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    a7c0:	9b01      	ldr	r3, [sp, #4]
    a7c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7c6:	2b00      	cmp	r3, #0
    a7c8:	d100      	bne.n	a7cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a7ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a7cc:	bf00      	nop
    a7ce:	b003      	add	sp, #12
    a7d0:	f85d fb04 	ldr.w	pc, [sp], #4
    a7d4:	1fff91b4 	.word	0x1fff91b4
    a7d8:	1fff91b0 	.word	0x1fff91b0

0000a7dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    a7dc:	b500      	push	{lr}
    a7de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a7e0:	f7f6 f9e0 	bl	ba4 <Sys_GetCoreID>
    a7e4:	4603      	mov	r3, r0
    a7e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    a7e8:	4a10      	ldr	r2, [pc, #64]	; (a82c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    a7ea:	9b01      	ldr	r3, [sp, #4]
    a7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7f0:	2b00      	cmp	r3, #0
    a7f2:	d10d      	bne.n	a810 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a7f4:	f7f6 f907 	bl	a06 <Port_schm_read_msr>
    a7f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a7fa:	9b00      	ldr	r3, [sp, #0]
    a7fc:	f003 0301 	and.w	r3, r3, #1
    a800:	2b00      	cmp	r3, #0
    a802:	d100      	bne.n	a806 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a804:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    a806:	490a      	ldr	r1, [pc, #40]	; (a830 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    a808:	9b01      	ldr	r3, [sp, #4]
    a80a:	9a00      	ldr	r2, [sp, #0]
    a80c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    a810:	4a06      	ldr	r2, [pc, #24]	; (a82c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    a812:	9b01      	ldr	r3, [sp, #4]
    a814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a818:	1c5a      	adds	r2, r3, #1
    a81a:	4904      	ldr	r1, [pc, #16]	; (a82c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    a81c:	9b01      	ldr	r3, [sp, #4]
    a81e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a822:	bf00      	nop
    a824:	b003      	add	sp, #12
    a826:	f85d fb04 	ldr.w	pc, [sp], #4
    a82a:	bf00      	nop
    a82c:	1fff91bc 	.word	0x1fff91bc
    a830:	1fff91b8 	.word	0x1fff91b8

0000a834 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    a834:	b500      	push	{lr}
    a836:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a838:	f7f6 f9b4 	bl	ba4 <Sys_GetCoreID>
    a83c:	4603      	mov	r3, r0
    a83e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    a840:	4a0d      	ldr	r2, [pc, #52]	; (a878 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    a842:	9b01      	ldr	r3, [sp, #4]
    a844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a848:	1e5a      	subs	r2, r3, #1
    a84a:	490b      	ldr	r1, [pc, #44]	; (a878 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    a84c:	9b01      	ldr	r3, [sp, #4]
    a84e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    a852:	4a0a      	ldr	r2, [pc, #40]	; (a87c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    a854:	9b01      	ldr	r3, [sp, #4]
    a856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a85a:	f003 0301 	and.w	r3, r3, #1
    a85e:	2b00      	cmp	r3, #0
    a860:	d106      	bne.n	a870 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    a862:	4a05      	ldr	r2, [pc, #20]	; (a878 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    a864:	9b01      	ldr	r3, [sp, #4]
    a866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a86a:	2b00      	cmp	r3, #0
    a86c:	d100      	bne.n	a870 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a86e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a870:	bf00      	nop
    a872:	b003      	add	sp, #12
    a874:	f85d fb04 	ldr.w	pc, [sp], #4
    a878:	1fff91bc 	.word	0x1fff91bc
    a87c:	1fff91b8 	.word	0x1fff91b8

0000a880 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    a880:	b500      	push	{lr}
    a882:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a884:	f7f6 f98e 	bl	ba4 <Sys_GetCoreID>
    a888:	4603      	mov	r3, r0
    a88a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    a88c:	4a10      	ldr	r2, [pc, #64]	; (a8d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    a88e:	9b01      	ldr	r3, [sp, #4]
    a890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a894:	2b00      	cmp	r3, #0
    a896:	d10d      	bne.n	a8b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a898:	f7f6 f8b5 	bl	a06 <Port_schm_read_msr>
    a89c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a89e:	9b00      	ldr	r3, [sp, #0]
    a8a0:	f003 0301 	and.w	r3, r3, #1
    a8a4:	2b00      	cmp	r3, #0
    a8a6:	d100      	bne.n	a8aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a8a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    a8aa:	490a      	ldr	r1, [pc, #40]	; (a8d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    a8ac:	9b01      	ldr	r3, [sp, #4]
    a8ae:	9a00      	ldr	r2, [sp, #0]
    a8b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    a8b4:	4a06      	ldr	r2, [pc, #24]	; (a8d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    a8b6:	9b01      	ldr	r3, [sp, #4]
    a8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8bc:	1c5a      	adds	r2, r3, #1
    a8be:	4904      	ldr	r1, [pc, #16]	; (a8d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    a8c0:	9b01      	ldr	r3, [sp, #4]
    a8c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a8c6:	bf00      	nop
    a8c8:	b003      	add	sp, #12
    a8ca:	f85d fb04 	ldr.w	pc, [sp], #4
    a8ce:	bf00      	nop
    a8d0:	1fff91c4 	.word	0x1fff91c4
    a8d4:	1fff91c0 	.word	0x1fff91c0

0000a8d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    a8d8:	b500      	push	{lr}
    a8da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a8dc:	f7f6 f962 	bl	ba4 <Sys_GetCoreID>
    a8e0:	4603      	mov	r3, r0
    a8e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    a8e4:	4a0d      	ldr	r2, [pc, #52]	; (a91c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    a8e6:	9b01      	ldr	r3, [sp, #4]
    a8e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8ec:	1e5a      	subs	r2, r3, #1
    a8ee:	490b      	ldr	r1, [pc, #44]	; (a91c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    a8f0:	9b01      	ldr	r3, [sp, #4]
    a8f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    a8f6:	4a0a      	ldr	r2, [pc, #40]	; (a920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    a8f8:	9b01      	ldr	r3, [sp, #4]
    a8fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8fe:	f003 0301 	and.w	r3, r3, #1
    a902:	2b00      	cmp	r3, #0
    a904:	d106      	bne.n	a914 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    a906:	4a05      	ldr	r2, [pc, #20]	; (a91c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    a908:	9b01      	ldr	r3, [sp, #4]
    a90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a90e:	2b00      	cmp	r3, #0
    a910:	d100      	bne.n	a914 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a912:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a914:	bf00      	nop
    a916:	b003      	add	sp, #12
    a918:	f85d fb04 	ldr.w	pc, [sp], #4
    a91c:	1fff91c4 	.word	0x1fff91c4
    a920:	1fff91c0 	.word	0x1fff91c0

0000a924 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    a924:	b500      	push	{lr}
    a926:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a928:	f7f6 f93c 	bl	ba4 <Sys_GetCoreID>
    a92c:	4603      	mov	r3, r0
    a92e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    a930:	4a10      	ldr	r2, [pc, #64]	; (a974 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    a932:	9b01      	ldr	r3, [sp, #4]
    a934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a938:	2b00      	cmp	r3, #0
    a93a:	d10d      	bne.n	a958 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a93c:	f7f6 f863 	bl	a06 <Port_schm_read_msr>
    a940:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a942:	9b00      	ldr	r3, [sp, #0]
    a944:	f003 0301 	and.w	r3, r3, #1
    a948:	2b00      	cmp	r3, #0
    a94a:	d100      	bne.n	a94e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a94c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    a94e:	490a      	ldr	r1, [pc, #40]	; (a978 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    a950:	9b01      	ldr	r3, [sp, #4]
    a952:	9a00      	ldr	r2, [sp, #0]
    a954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    a958:	4a06      	ldr	r2, [pc, #24]	; (a974 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    a95a:	9b01      	ldr	r3, [sp, #4]
    a95c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a960:	1c5a      	adds	r2, r3, #1
    a962:	4904      	ldr	r1, [pc, #16]	; (a974 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    a964:	9b01      	ldr	r3, [sp, #4]
    a966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a96a:	bf00      	nop
    a96c:	b003      	add	sp, #12
    a96e:	f85d fb04 	ldr.w	pc, [sp], #4
    a972:	bf00      	nop
    a974:	1fff91cc 	.word	0x1fff91cc
    a978:	1fff91c8 	.word	0x1fff91c8

0000a97c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    a97c:	b500      	push	{lr}
    a97e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a980:	f7f6 f910 	bl	ba4 <Sys_GetCoreID>
    a984:	4603      	mov	r3, r0
    a986:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    a988:	4a0d      	ldr	r2, [pc, #52]	; (a9c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    a98a:	9b01      	ldr	r3, [sp, #4]
    a98c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a990:	1e5a      	subs	r2, r3, #1
    a992:	490b      	ldr	r1, [pc, #44]	; (a9c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    a994:	9b01      	ldr	r3, [sp, #4]
    a996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    a99a:	4a0a      	ldr	r2, [pc, #40]	; (a9c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    a99c:	9b01      	ldr	r3, [sp, #4]
    a99e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9a2:	f003 0301 	and.w	r3, r3, #1
    a9a6:	2b00      	cmp	r3, #0
    a9a8:	d106      	bne.n	a9b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    a9aa:	4a05      	ldr	r2, [pc, #20]	; (a9c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    a9ac:	9b01      	ldr	r3, [sp, #4]
    a9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9b2:	2b00      	cmp	r3, #0
    a9b4:	d100      	bne.n	a9b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a9b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a9b8:	bf00      	nop
    a9ba:	b003      	add	sp, #12
    a9bc:	f85d fb04 	ldr.w	pc, [sp], #4
    a9c0:	1fff91cc 	.word	0x1fff91cc
    a9c4:	1fff91c8 	.word	0x1fff91c8

0000a9c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    a9c8:	b500      	push	{lr}
    a9ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a9cc:	f7f6 f8ea 	bl	ba4 <Sys_GetCoreID>
    a9d0:	4603      	mov	r3, r0
    a9d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    a9d4:	4a10      	ldr	r2, [pc, #64]	; (aa18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    a9d6:	9b01      	ldr	r3, [sp, #4]
    a9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9dc:	2b00      	cmp	r3, #0
    a9de:	d10d      	bne.n	a9fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a9e0:	f7f6 f811 	bl	a06 <Port_schm_read_msr>
    a9e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a9e6:	9b00      	ldr	r3, [sp, #0]
    a9e8:	f003 0301 	and.w	r3, r3, #1
    a9ec:	2b00      	cmp	r3, #0
    a9ee:	d100      	bne.n	a9f2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a9f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    a9f2:	490a      	ldr	r1, [pc, #40]	; (aa1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    a9f4:	9b01      	ldr	r3, [sp, #4]
    a9f6:	9a00      	ldr	r2, [sp, #0]
    a9f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    a9fc:	4a06      	ldr	r2, [pc, #24]	; (aa18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    a9fe:	9b01      	ldr	r3, [sp, #4]
    aa00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa04:	1c5a      	adds	r2, r3, #1
    aa06:	4904      	ldr	r1, [pc, #16]	; (aa18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    aa08:	9b01      	ldr	r3, [sp, #4]
    aa0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aa0e:	bf00      	nop
    aa10:	b003      	add	sp, #12
    aa12:	f85d fb04 	ldr.w	pc, [sp], #4
    aa16:	bf00      	nop
    aa18:	1fff91d4 	.word	0x1fff91d4
    aa1c:	1fff91d0 	.word	0x1fff91d0

0000aa20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    aa20:	b500      	push	{lr}
    aa22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aa24:	f7f6 f8be 	bl	ba4 <Sys_GetCoreID>
    aa28:	4603      	mov	r3, r0
    aa2a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    aa2c:	4a0d      	ldr	r2, [pc, #52]	; (aa64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    aa2e:	9b01      	ldr	r3, [sp, #4]
    aa30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa34:	1e5a      	subs	r2, r3, #1
    aa36:	490b      	ldr	r1, [pc, #44]	; (aa64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    aa38:	9b01      	ldr	r3, [sp, #4]
    aa3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    aa3e:	4a0a      	ldr	r2, [pc, #40]	; (aa68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    aa40:	9b01      	ldr	r3, [sp, #4]
    aa42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa46:	f003 0301 	and.w	r3, r3, #1
    aa4a:	2b00      	cmp	r3, #0
    aa4c:	d106      	bne.n	aa5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    aa4e:	4a05      	ldr	r2, [pc, #20]	; (aa64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    aa50:	9b01      	ldr	r3, [sp, #4]
    aa52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa56:	2b00      	cmp	r3, #0
    aa58:	d100      	bne.n	aa5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aa5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aa5c:	bf00      	nop
    aa5e:	b003      	add	sp, #12
    aa60:	f85d fb04 	ldr.w	pc, [sp], #4
    aa64:	1fff91d4 	.word	0x1fff91d4
    aa68:	1fff91d0 	.word	0x1fff91d0

0000aa6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    aa6c:	b500      	push	{lr}
    aa6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aa70:	f7f6 f898 	bl	ba4 <Sys_GetCoreID>
    aa74:	4603      	mov	r3, r0
    aa76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    aa78:	4a10      	ldr	r2, [pc, #64]	; (aabc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    aa7a:	9b01      	ldr	r3, [sp, #4]
    aa7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa80:	2b00      	cmp	r3, #0
    aa82:	d10d      	bne.n	aaa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aa84:	f7f5 ffbf 	bl	a06 <Port_schm_read_msr>
    aa88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aa8a:	9b00      	ldr	r3, [sp, #0]
    aa8c:	f003 0301 	and.w	r3, r3, #1
    aa90:	2b00      	cmp	r3, #0
    aa92:	d100      	bne.n	aa96 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aa94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    aa96:	490a      	ldr	r1, [pc, #40]	; (aac0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    aa98:	9b01      	ldr	r3, [sp, #4]
    aa9a:	9a00      	ldr	r2, [sp, #0]
    aa9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    aaa0:	4a06      	ldr	r2, [pc, #24]	; (aabc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    aaa2:	9b01      	ldr	r3, [sp, #4]
    aaa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaa8:	1c5a      	adds	r2, r3, #1
    aaaa:	4904      	ldr	r1, [pc, #16]	; (aabc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    aaac:	9b01      	ldr	r3, [sp, #4]
    aaae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aab2:	bf00      	nop
    aab4:	b003      	add	sp, #12
    aab6:	f85d fb04 	ldr.w	pc, [sp], #4
    aaba:	bf00      	nop
    aabc:	1fff91dc 	.word	0x1fff91dc
    aac0:	1fff91d8 	.word	0x1fff91d8

0000aac4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    aac4:	b500      	push	{lr}
    aac6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aac8:	f7f6 f86c 	bl	ba4 <Sys_GetCoreID>
    aacc:	4603      	mov	r3, r0
    aace:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    aad0:	4a0d      	ldr	r2, [pc, #52]	; (ab08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    aad2:	9b01      	ldr	r3, [sp, #4]
    aad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aad8:	1e5a      	subs	r2, r3, #1
    aada:	490b      	ldr	r1, [pc, #44]	; (ab08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    aadc:	9b01      	ldr	r3, [sp, #4]
    aade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    aae2:	4a0a      	ldr	r2, [pc, #40]	; (ab0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    aae4:	9b01      	ldr	r3, [sp, #4]
    aae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaea:	f003 0301 	and.w	r3, r3, #1
    aaee:	2b00      	cmp	r3, #0
    aaf0:	d106      	bne.n	ab00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    aaf2:	4a05      	ldr	r2, [pc, #20]	; (ab08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    aaf4:	9b01      	ldr	r3, [sp, #4]
    aaf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aafa:	2b00      	cmp	r3, #0
    aafc:	d100      	bne.n	ab00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aafe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ab00:	bf00      	nop
    ab02:	b003      	add	sp, #12
    ab04:	f85d fb04 	ldr.w	pc, [sp], #4
    ab08:	1fff91dc 	.word	0x1fff91dc
    ab0c:	1fff91d8 	.word	0x1fff91d8

0000ab10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    ab10:	b500      	push	{lr}
    ab12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ab14:	f7f6 f846 	bl	ba4 <Sys_GetCoreID>
    ab18:	4603      	mov	r3, r0
    ab1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    ab1c:	4a10      	ldr	r2, [pc, #64]	; (ab60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    ab1e:	9b01      	ldr	r3, [sp, #4]
    ab20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab24:	2b00      	cmp	r3, #0
    ab26:	d10d      	bne.n	ab44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ab28:	f7f5 ff6d 	bl	a06 <Port_schm_read_msr>
    ab2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ab2e:	9b00      	ldr	r3, [sp, #0]
    ab30:	f003 0301 	and.w	r3, r3, #1
    ab34:	2b00      	cmp	r3, #0
    ab36:	d100      	bne.n	ab3a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ab38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    ab3a:	490a      	ldr	r1, [pc, #40]	; (ab64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    ab3c:	9b01      	ldr	r3, [sp, #4]
    ab3e:	9a00      	ldr	r2, [sp, #0]
    ab40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    ab44:	4a06      	ldr	r2, [pc, #24]	; (ab60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    ab46:	9b01      	ldr	r3, [sp, #4]
    ab48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab4c:	1c5a      	adds	r2, r3, #1
    ab4e:	4904      	ldr	r1, [pc, #16]	; (ab60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    ab50:	9b01      	ldr	r3, [sp, #4]
    ab52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ab56:	bf00      	nop
    ab58:	b003      	add	sp, #12
    ab5a:	f85d fb04 	ldr.w	pc, [sp], #4
    ab5e:	bf00      	nop
    ab60:	1fff91e4 	.word	0x1fff91e4
    ab64:	1fff91e0 	.word	0x1fff91e0

0000ab68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    ab68:	b500      	push	{lr}
    ab6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ab6c:	f7f6 f81a 	bl	ba4 <Sys_GetCoreID>
    ab70:	4603      	mov	r3, r0
    ab72:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    ab74:	4a0d      	ldr	r2, [pc, #52]	; (abac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    ab76:	9b01      	ldr	r3, [sp, #4]
    ab78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab7c:	1e5a      	subs	r2, r3, #1
    ab7e:	490b      	ldr	r1, [pc, #44]	; (abac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    ab80:	9b01      	ldr	r3, [sp, #4]
    ab82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    ab86:	4a0a      	ldr	r2, [pc, #40]	; (abb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    ab88:	9b01      	ldr	r3, [sp, #4]
    ab8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab8e:	f003 0301 	and.w	r3, r3, #1
    ab92:	2b00      	cmp	r3, #0
    ab94:	d106      	bne.n	aba4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    ab96:	4a05      	ldr	r2, [pc, #20]	; (abac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    ab98:	9b01      	ldr	r3, [sp, #4]
    ab9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab9e:	2b00      	cmp	r3, #0
    aba0:	d100      	bne.n	aba4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aba2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aba4:	bf00      	nop
    aba6:	b003      	add	sp, #12
    aba8:	f85d fb04 	ldr.w	pc, [sp], #4
    abac:	1fff91e4 	.word	0x1fff91e4
    abb0:	1fff91e0 	.word	0x1fff91e0

0000abb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    abb4:	b500      	push	{lr}
    abb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    abb8:	f7f5 fff4 	bl	ba4 <Sys_GetCoreID>
    abbc:	4603      	mov	r3, r0
    abbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    abc0:	4a10      	ldr	r2, [pc, #64]	; (ac04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    abc2:	9b01      	ldr	r3, [sp, #4]
    abc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abc8:	2b00      	cmp	r3, #0
    abca:	d10d      	bne.n	abe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    abcc:	f7f5 ff1b 	bl	a06 <Port_schm_read_msr>
    abd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    abd2:	9b00      	ldr	r3, [sp, #0]
    abd4:	f003 0301 	and.w	r3, r3, #1
    abd8:	2b00      	cmp	r3, #0
    abda:	d100      	bne.n	abde <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    abdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    abde:	490a      	ldr	r1, [pc, #40]	; (ac08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    abe0:	9b01      	ldr	r3, [sp, #4]
    abe2:	9a00      	ldr	r2, [sp, #0]
    abe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    abe8:	4a06      	ldr	r2, [pc, #24]	; (ac04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    abea:	9b01      	ldr	r3, [sp, #4]
    abec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abf0:	1c5a      	adds	r2, r3, #1
    abf2:	4904      	ldr	r1, [pc, #16]	; (ac04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    abf4:	9b01      	ldr	r3, [sp, #4]
    abf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    abfa:	bf00      	nop
    abfc:	b003      	add	sp, #12
    abfe:	f85d fb04 	ldr.w	pc, [sp], #4
    ac02:	bf00      	nop
    ac04:	1fff91ec 	.word	0x1fff91ec
    ac08:	1fff91e8 	.word	0x1fff91e8

0000ac0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    ac0c:	b500      	push	{lr}
    ac0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ac10:	f7f5 ffc8 	bl	ba4 <Sys_GetCoreID>
    ac14:	4603      	mov	r3, r0
    ac16:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    ac18:	4a0d      	ldr	r2, [pc, #52]	; (ac50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    ac1a:	9b01      	ldr	r3, [sp, #4]
    ac1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac20:	1e5a      	subs	r2, r3, #1
    ac22:	490b      	ldr	r1, [pc, #44]	; (ac50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    ac24:	9b01      	ldr	r3, [sp, #4]
    ac26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    ac2a:	4a0a      	ldr	r2, [pc, #40]	; (ac54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    ac2c:	9b01      	ldr	r3, [sp, #4]
    ac2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac32:	f003 0301 	and.w	r3, r3, #1
    ac36:	2b00      	cmp	r3, #0
    ac38:	d106      	bne.n	ac48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    ac3a:	4a05      	ldr	r2, [pc, #20]	; (ac50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    ac3c:	9b01      	ldr	r3, [sp, #4]
    ac3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac42:	2b00      	cmp	r3, #0
    ac44:	d100      	bne.n	ac48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ac46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ac48:	bf00      	nop
    ac4a:	b003      	add	sp, #12
    ac4c:	f85d fb04 	ldr.w	pc, [sp], #4
    ac50:	1fff91ec 	.word	0x1fff91ec
    ac54:	1fff91e8 	.word	0x1fff91e8

0000ac58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    ac58:	b500      	push	{lr}
    ac5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ac5c:	f7f5 ffa2 	bl	ba4 <Sys_GetCoreID>
    ac60:	4603      	mov	r3, r0
    ac62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    ac64:	4a10      	ldr	r2, [pc, #64]	; (aca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    ac66:	9b01      	ldr	r3, [sp, #4]
    ac68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac6c:	2b00      	cmp	r3, #0
    ac6e:	d10d      	bne.n	ac8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ac70:	f7f5 fec9 	bl	a06 <Port_schm_read_msr>
    ac74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ac76:	9b00      	ldr	r3, [sp, #0]
    ac78:	f003 0301 	and.w	r3, r3, #1
    ac7c:	2b00      	cmp	r3, #0
    ac7e:	d100      	bne.n	ac82 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ac80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    ac82:	490a      	ldr	r1, [pc, #40]	; (acac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    ac84:	9b01      	ldr	r3, [sp, #4]
    ac86:	9a00      	ldr	r2, [sp, #0]
    ac88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    ac8c:	4a06      	ldr	r2, [pc, #24]	; (aca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    ac8e:	9b01      	ldr	r3, [sp, #4]
    ac90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac94:	1c5a      	adds	r2, r3, #1
    ac96:	4904      	ldr	r1, [pc, #16]	; (aca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    ac98:	9b01      	ldr	r3, [sp, #4]
    ac9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ac9e:	bf00      	nop
    aca0:	b003      	add	sp, #12
    aca2:	f85d fb04 	ldr.w	pc, [sp], #4
    aca6:	bf00      	nop
    aca8:	1fff91f4 	.word	0x1fff91f4
    acac:	1fff91f0 	.word	0x1fff91f0

0000acb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    acb0:	b500      	push	{lr}
    acb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    acb4:	f7f5 ff76 	bl	ba4 <Sys_GetCoreID>
    acb8:	4603      	mov	r3, r0
    acba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    acbc:	4a0d      	ldr	r2, [pc, #52]	; (acf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    acbe:	9b01      	ldr	r3, [sp, #4]
    acc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acc4:	1e5a      	subs	r2, r3, #1
    acc6:	490b      	ldr	r1, [pc, #44]	; (acf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    acc8:	9b01      	ldr	r3, [sp, #4]
    acca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    acce:	4a0a      	ldr	r2, [pc, #40]	; (acf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    acd0:	9b01      	ldr	r3, [sp, #4]
    acd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acd6:	f003 0301 	and.w	r3, r3, #1
    acda:	2b00      	cmp	r3, #0
    acdc:	d106      	bne.n	acec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    acde:	4a05      	ldr	r2, [pc, #20]	; (acf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    ace0:	9b01      	ldr	r3, [sp, #4]
    ace2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ace6:	2b00      	cmp	r3, #0
    ace8:	d100      	bne.n	acec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    acea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    acec:	bf00      	nop
    acee:	b003      	add	sp, #12
    acf0:	f85d fb04 	ldr.w	pc, [sp], #4
    acf4:	1fff91f4 	.word	0x1fff91f4
    acf8:	1fff91f0 	.word	0x1fff91f0

0000acfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    acfc:	b500      	push	{lr}
    acfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad00:	f7f5 ff50 	bl	ba4 <Sys_GetCoreID>
    ad04:	4603      	mov	r3, r0
    ad06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    ad08:	4a10      	ldr	r2, [pc, #64]	; (ad4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    ad0a:	9b01      	ldr	r3, [sp, #4]
    ad0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad10:	2b00      	cmp	r3, #0
    ad12:	d10d      	bne.n	ad30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ad14:	f7f5 fe77 	bl	a06 <Port_schm_read_msr>
    ad18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ad1a:	9b00      	ldr	r3, [sp, #0]
    ad1c:	f003 0301 	and.w	r3, r3, #1
    ad20:	2b00      	cmp	r3, #0
    ad22:	d100      	bne.n	ad26 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ad24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    ad26:	490a      	ldr	r1, [pc, #40]	; (ad50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    ad28:	9b01      	ldr	r3, [sp, #4]
    ad2a:	9a00      	ldr	r2, [sp, #0]
    ad2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    ad30:	4a06      	ldr	r2, [pc, #24]	; (ad4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    ad32:	9b01      	ldr	r3, [sp, #4]
    ad34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad38:	1c5a      	adds	r2, r3, #1
    ad3a:	4904      	ldr	r1, [pc, #16]	; (ad4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    ad3c:	9b01      	ldr	r3, [sp, #4]
    ad3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ad42:	bf00      	nop
    ad44:	b003      	add	sp, #12
    ad46:	f85d fb04 	ldr.w	pc, [sp], #4
    ad4a:	bf00      	nop
    ad4c:	1fff91fc 	.word	0x1fff91fc
    ad50:	1fff91f8 	.word	0x1fff91f8

0000ad54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    ad54:	b500      	push	{lr}
    ad56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad58:	f7f5 ff24 	bl	ba4 <Sys_GetCoreID>
    ad5c:	4603      	mov	r3, r0
    ad5e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    ad60:	4a0d      	ldr	r2, [pc, #52]	; (ad98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    ad62:	9b01      	ldr	r3, [sp, #4]
    ad64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad68:	1e5a      	subs	r2, r3, #1
    ad6a:	490b      	ldr	r1, [pc, #44]	; (ad98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    ad6c:	9b01      	ldr	r3, [sp, #4]
    ad6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    ad72:	4a0a      	ldr	r2, [pc, #40]	; (ad9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    ad74:	9b01      	ldr	r3, [sp, #4]
    ad76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad7a:	f003 0301 	and.w	r3, r3, #1
    ad7e:	2b00      	cmp	r3, #0
    ad80:	d106      	bne.n	ad90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    ad82:	4a05      	ldr	r2, [pc, #20]	; (ad98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    ad84:	9b01      	ldr	r3, [sp, #4]
    ad86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad8a:	2b00      	cmp	r3, #0
    ad8c:	d100      	bne.n	ad90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ad8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ad90:	bf00      	nop
    ad92:	b003      	add	sp, #12
    ad94:	f85d fb04 	ldr.w	pc, [sp], #4
    ad98:	1fff91fc 	.word	0x1fff91fc
    ad9c:	1fff91f8 	.word	0x1fff91f8

0000ada0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    ada0:	b500      	push	{lr}
    ada2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ada4:	f7f5 fefe 	bl	ba4 <Sys_GetCoreID>
    ada8:	4603      	mov	r3, r0
    adaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    adac:	4a10      	ldr	r2, [pc, #64]	; (adf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    adae:	9b01      	ldr	r3, [sp, #4]
    adb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adb4:	2b00      	cmp	r3, #0
    adb6:	d10d      	bne.n	add4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    adb8:	f7f5 fe25 	bl	a06 <Port_schm_read_msr>
    adbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    adbe:	9b00      	ldr	r3, [sp, #0]
    adc0:	f003 0301 	and.w	r3, r3, #1
    adc4:	2b00      	cmp	r3, #0
    adc6:	d100      	bne.n	adca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    adc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    adca:	490a      	ldr	r1, [pc, #40]	; (adf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    adcc:	9b01      	ldr	r3, [sp, #4]
    adce:	9a00      	ldr	r2, [sp, #0]
    add0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    add4:	4a06      	ldr	r2, [pc, #24]	; (adf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    add6:	9b01      	ldr	r3, [sp, #4]
    add8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    addc:	1c5a      	adds	r2, r3, #1
    adde:	4904      	ldr	r1, [pc, #16]	; (adf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    ade0:	9b01      	ldr	r3, [sp, #4]
    ade2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ade6:	bf00      	nop
    ade8:	b003      	add	sp, #12
    adea:	f85d fb04 	ldr.w	pc, [sp], #4
    adee:	bf00      	nop
    adf0:	1fff9204 	.word	0x1fff9204
    adf4:	1fff9200 	.word	0x1fff9200

0000adf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    adf8:	b500      	push	{lr}
    adfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    adfc:	f7f5 fed2 	bl	ba4 <Sys_GetCoreID>
    ae00:	4603      	mov	r3, r0
    ae02:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    ae04:	4a0d      	ldr	r2, [pc, #52]	; (ae3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    ae06:	9b01      	ldr	r3, [sp, #4]
    ae08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae0c:	1e5a      	subs	r2, r3, #1
    ae0e:	490b      	ldr	r1, [pc, #44]	; (ae3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    ae10:	9b01      	ldr	r3, [sp, #4]
    ae12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    ae16:	4a0a      	ldr	r2, [pc, #40]	; (ae40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    ae18:	9b01      	ldr	r3, [sp, #4]
    ae1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae1e:	f003 0301 	and.w	r3, r3, #1
    ae22:	2b00      	cmp	r3, #0
    ae24:	d106      	bne.n	ae34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    ae26:	4a05      	ldr	r2, [pc, #20]	; (ae3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    ae28:	9b01      	ldr	r3, [sp, #4]
    ae2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae2e:	2b00      	cmp	r3, #0
    ae30:	d100      	bne.n	ae34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ae32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ae34:	bf00      	nop
    ae36:	b003      	add	sp, #12
    ae38:	f85d fb04 	ldr.w	pc, [sp], #4
    ae3c:	1fff9204 	.word	0x1fff9204
    ae40:	1fff9200 	.word	0x1fff9200

0000ae44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    ae44:	b500      	push	{lr}
    ae46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae48:	f7f5 feac 	bl	ba4 <Sys_GetCoreID>
    ae4c:	4603      	mov	r3, r0
    ae4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    ae50:	4a10      	ldr	r2, [pc, #64]	; (ae94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    ae52:	9b01      	ldr	r3, [sp, #4]
    ae54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae58:	2b00      	cmp	r3, #0
    ae5a:	d10d      	bne.n	ae78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ae5c:	f7f5 fdd3 	bl	a06 <Port_schm_read_msr>
    ae60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ae62:	9b00      	ldr	r3, [sp, #0]
    ae64:	f003 0301 	and.w	r3, r3, #1
    ae68:	2b00      	cmp	r3, #0
    ae6a:	d100      	bne.n	ae6e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ae6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    ae6e:	490a      	ldr	r1, [pc, #40]	; (ae98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    ae70:	9b01      	ldr	r3, [sp, #4]
    ae72:	9a00      	ldr	r2, [sp, #0]
    ae74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    ae78:	4a06      	ldr	r2, [pc, #24]	; (ae94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    ae7a:	9b01      	ldr	r3, [sp, #4]
    ae7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae80:	1c5a      	adds	r2, r3, #1
    ae82:	4904      	ldr	r1, [pc, #16]	; (ae94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    ae84:	9b01      	ldr	r3, [sp, #4]
    ae86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ae8a:	bf00      	nop
    ae8c:	b003      	add	sp, #12
    ae8e:	f85d fb04 	ldr.w	pc, [sp], #4
    ae92:	bf00      	nop
    ae94:	1fff920c 	.word	0x1fff920c
    ae98:	1fff9208 	.word	0x1fff9208

0000ae9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    ae9c:	b500      	push	{lr}
    ae9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aea0:	f7f5 fe80 	bl	ba4 <Sys_GetCoreID>
    aea4:	4603      	mov	r3, r0
    aea6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    aea8:	4a0d      	ldr	r2, [pc, #52]	; (aee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    aeaa:	9b01      	ldr	r3, [sp, #4]
    aeac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aeb0:	1e5a      	subs	r2, r3, #1
    aeb2:	490b      	ldr	r1, [pc, #44]	; (aee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    aeb4:	9b01      	ldr	r3, [sp, #4]
    aeb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    aeba:	4a0a      	ldr	r2, [pc, #40]	; (aee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    aebc:	9b01      	ldr	r3, [sp, #4]
    aebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aec2:	f003 0301 	and.w	r3, r3, #1
    aec6:	2b00      	cmp	r3, #0
    aec8:	d106      	bne.n	aed8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    aeca:	4a05      	ldr	r2, [pc, #20]	; (aee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    aecc:	9b01      	ldr	r3, [sp, #4]
    aece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aed2:	2b00      	cmp	r3, #0
    aed4:	d100      	bne.n	aed8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aed6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aed8:	bf00      	nop
    aeda:	b003      	add	sp, #12
    aedc:	f85d fb04 	ldr.w	pc, [sp], #4
    aee0:	1fff920c 	.word	0x1fff920c
    aee4:	1fff9208 	.word	0x1fff9208

0000aee8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    aee8:	b500      	push	{lr}
    aeea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aeec:	f7f5 fe5a 	bl	ba4 <Sys_GetCoreID>
    aef0:	4603      	mov	r3, r0
    aef2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    aef4:	4a10      	ldr	r2, [pc, #64]	; (af38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    aef6:	9b01      	ldr	r3, [sp, #4]
    aef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aefc:	2b00      	cmp	r3, #0
    aefe:	d10d      	bne.n	af1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    af00:	f7f5 fd81 	bl	a06 <Port_schm_read_msr>
    af04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    af06:	9b00      	ldr	r3, [sp, #0]
    af08:	f003 0301 	and.w	r3, r3, #1
    af0c:	2b00      	cmp	r3, #0
    af0e:	d100      	bne.n	af12 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    af10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    af12:	490a      	ldr	r1, [pc, #40]	; (af3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    af14:	9b01      	ldr	r3, [sp, #4]
    af16:	9a00      	ldr	r2, [sp, #0]
    af18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    af1c:	4a06      	ldr	r2, [pc, #24]	; (af38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    af1e:	9b01      	ldr	r3, [sp, #4]
    af20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af24:	1c5a      	adds	r2, r3, #1
    af26:	4904      	ldr	r1, [pc, #16]	; (af38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    af28:	9b01      	ldr	r3, [sp, #4]
    af2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    af2e:	bf00      	nop
    af30:	b003      	add	sp, #12
    af32:	f85d fb04 	ldr.w	pc, [sp], #4
    af36:	bf00      	nop
    af38:	1fff9214 	.word	0x1fff9214
    af3c:	1fff9210 	.word	0x1fff9210

0000af40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    af40:	b500      	push	{lr}
    af42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af44:	f7f5 fe2e 	bl	ba4 <Sys_GetCoreID>
    af48:	4603      	mov	r3, r0
    af4a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    af4c:	4a0d      	ldr	r2, [pc, #52]	; (af84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    af4e:	9b01      	ldr	r3, [sp, #4]
    af50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af54:	1e5a      	subs	r2, r3, #1
    af56:	490b      	ldr	r1, [pc, #44]	; (af84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    af58:	9b01      	ldr	r3, [sp, #4]
    af5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    af5e:	4a0a      	ldr	r2, [pc, #40]	; (af88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    af60:	9b01      	ldr	r3, [sp, #4]
    af62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af66:	f003 0301 	and.w	r3, r3, #1
    af6a:	2b00      	cmp	r3, #0
    af6c:	d106      	bne.n	af7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    af6e:	4a05      	ldr	r2, [pc, #20]	; (af84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    af70:	9b01      	ldr	r3, [sp, #4]
    af72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af76:	2b00      	cmp	r3, #0
    af78:	d100      	bne.n	af7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    af7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    af7c:	bf00      	nop
    af7e:	b003      	add	sp, #12
    af80:	f85d fb04 	ldr.w	pc, [sp], #4
    af84:	1fff9214 	.word	0x1fff9214
    af88:	1fff9210 	.word	0x1fff9210

0000af8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    af8c:	b500      	push	{lr}
    af8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af90:	f7f5 fe08 	bl	ba4 <Sys_GetCoreID>
    af94:	4603      	mov	r3, r0
    af96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    af98:	4a10      	ldr	r2, [pc, #64]	; (afdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    af9a:	9b01      	ldr	r3, [sp, #4]
    af9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afa0:	2b00      	cmp	r3, #0
    afa2:	d10d      	bne.n	afc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    afa4:	f7f5 fd2f 	bl	a06 <Port_schm_read_msr>
    afa8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    afaa:	9b00      	ldr	r3, [sp, #0]
    afac:	f003 0301 	and.w	r3, r3, #1
    afb0:	2b00      	cmp	r3, #0
    afb2:	d100      	bne.n	afb6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    afb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    afb6:	490a      	ldr	r1, [pc, #40]	; (afe0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    afb8:	9b01      	ldr	r3, [sp, #4]
    afba:	9a00      	ldr	r2, [sp, #0]
    afbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    afc0:	4a06      	ldr	r2, [pc, #24]	; (afdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    afc2:	9b01      	ldr	r3, [sp, #4]
    afc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afc8:	1c5a      	adds	r2, r3, #1
    afca:	4904      	ldr	r1, [pc, #16]	; (afdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    afcc:	9b01      	ldr	r3, [sp, #4]
    afce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    afd2:	bf00      	nop
    afd4:	b003      	add	sp, #12
    afd6:	f85d fb04 	ldr.w	pc, [sp], #4
    afda:	bf00      	nop
    afdc:	1fff921c 	.word	0x1fff921c
    afe0:	1fff9218 	.word	0x1fff9218

0000afe4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    afe4:	b500      	push	{lr}
    afe6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    afe8:	f7f5 fddc 	bl	ba4 <Sys_GetCoreID>
    afec:	4603      	mov	r3, r0
    afee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    aff0:	4a0d      	ldr	r2, [pc, #52]	; (b028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    aff2:	9b01      	ldr	r3, [sp, #4]
    aff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aff8:	1e5a      	subs	r2, r3, #1
    affa:	490b      	ldr	r1, [pc, #44]	; (b028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    affc:	9b01      	ldr	r3, [sp, #4]
    affe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    b002:	4a0a      	ldr	r2, [pc, #40]	; (b02c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    b004:	9b01      	ldr	r3, [sp, #4]
    b006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b00a:	f003 0301 	and.w	r3, r3, #1
    b00e:	2b00      	cmp	r3, #0
    b010:	d106      	bne.n	b020 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    b012:	4a05      	ldr	r2, [pc, #20]	; (b028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    b014:	9b01      	ldr	r3, [sp, #4]
    b016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b01a:	2b00      	cmp	r3, #0
    b01c:	d100      	bne.n	b020 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b01e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b020:	bf00      	nop
    b022:	b003      	add	sp, #12
    b024:	f85d fb04 	ldr.w	pc, [sp], #4
    b028:	1fff921c 	.word	0x1fff921c
    b02c:	1fff9218 	.word	0x1fff9218

0000b030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    b030:	b500      	push	{lr}
    b032:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b034:	f7f5 fdb6 	bl	ba4 <Sys_GetCoreID>
    b038:	4603      	mov	r3, r0
    b03a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    b03c:	4a10      	ldr	r2, [pc, #64]	; (b080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    b03e:	9b01      	ldr	r3, [sp, #4]
    b040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b044:	2b00      	cmp	r3, #0
    b046:	d10d      	bne.n	b064 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b048:	f7f5 fcdd 	bl	a06 <Port_schm_read_msr>
    b04c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b04e:	9b00      	ldr	r3, [sp, #0]
    b050:	f003 0301 	and.w	r3, r3, #1
    b054:	2b00      	cmp	r3, #0
    b056:	d100      	bne.n	b05a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b058:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    b05a:	490a      	ldr	r1, [pc, #40]	; (b084 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    b05c:	9b01      	ldr	r3, [sp, #4]
    b05e:	9a00      	ldr	r2, [sp, #0]
    b060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    b064:	4a06      	ldr	r2, [pc, #24]	; (b080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    b066:	9b01      	ldr	r3, [sp, #4]
    b068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b06c:	1c5a      	adds	r2, r3, #1
    b06e:	4904      	ldr	r1, [pc, #16]	; (b080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    b070:	9b01      	ldr	r3, [sp, #4]
    b072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b076:	bf00      	nop
    b078:	b003      	add	sp, #12
    b07a:	f85d fb04 	ldr.w	pc, [sp], #4
    b07e:	bf00      	nop
    b080:	1fff9224 	.word	0x1fff9224
    b084:	1fff9220 	.word	0x1fff9220

0000b088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    b088:	b500      	push	{lr}
    b08a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b08c:	f7f5 fd8a 	bl	ba4 <Sys_GetCoreID>
    b090:	4603      	mov	r3, r0
    b092:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    b094:	4a0d      	ldr	r2, [pc, #52]	; (b0cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    b096:	9b01      	ldr	r3, [sp, #4]
    b098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b09c:	1e5a      	subs	r2, r3, #1
    b09e:	490b      	ldr	r1, [pc, #44]	; (b0cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    b0a0:	9b01      	ldr	r3, [sp, #4]
    b0a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    b0a6:	4a0a      	ldr	r2, [pc, #40]	; (b0d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    b0a8:	9b01      	ldr	r3, [sp, #4]
    b0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0ae:	f003 0301 	and.w	r3, r3, #1
    b0b2:	2b00      	cmp	r3, #0
    b0b4:	d106      	bne.n	b0c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    b0b6:	4a05      	ldr	r2, [pc, #20]	; (b0cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    b0b8:	9b01      	ldr	r3, [sp, #4]
    b0ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0be:	2b00      	cmp	r3, #0
    b0c0:	d100      	bne.n	b0c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b0c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b0c4:	bf00      	nop
    b0c6:	b003      	add	sp, #12
    b0c8:	f85d fb04 	ldr.w	pc, [sp], #4
    b0cc:	1fff9224 	.word	0x1fff9224
    b0d0:	1fff9220 	.word	0x1fff9220

0000b0d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    b0d4:	b500      	push	{lr}
    b0d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b0d8:	f7f5 fd64 	bl	ba4 <Sys_GetCoreID>
    b0dc:	4603      	mov	r3, r0
    b0de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    b0e0:	4a10      	ldr	r2, [pc, #64]	; (b124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    b0e2:	9b01      	ldr	r3, [sp, #4]
    b0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0e8:	2b00      	cmp	r3, #0
    b0ea:	d10d      	bne.n	b108 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b0ec:	f7f5 fc8b 	bl	a06 <Port_schm_read_msr>
    b0f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b0f2:	9b00      	ldr	r3, [sp, #0]
    b0f4:	f003 0301 	and.w	r3, r3, #1
    b0f8:	2b00      	cmp	r3, #0
    b0fa:	d100      	bne.n	b0fe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b0fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    b0fe:	490a      	ldr	r1, [pc, #40]	; (b128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    b100:	9b01      	ldr	r3, [sp, #4]
    b102:	9a00      	ldr	r2, [sp, #0]
    b104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    b108:	4a06      	ldr	r2, [pc, #24]	; (b124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    b10a:	9b01      	ldr	r3, [sp, #4]
    b10c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b110:	1c5a      	adds	r2, r3, #1
    b112:	4904      	ldr	r1, [pc, #16]	; (b124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    b114:	9b01      	ldr	r3, [sp, #4]
    b116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b11a:	bf00      	nop
    b11c:	b003      	add	sp, #12
    b11e:	f85d fb04 	ldr.w	pc, [sp], #4
    b122:	bf00      	nop
    b124:	1fff922c 	.word	0x1fff922c
    b128:	1fff9228 	.word	0x1fff9228

0000b12c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    b12c:	b500      	push	{lr}
    b12e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b130:	f7f5 fd38 	bl	ba4 <Sys_GetCoreID>
    b134:	4603      	mov	r3, r0
    b136:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    b138:	4a0d      	ldr	r2, [pc, #52]	; (b170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    b13a:	9b01      	ldr	r3, [sp, #4]
    b13c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b140:	1e5a      	subs	r2, r3, #1
    b142:	490b      	ldr	r1, [pc, #44]	; (b170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    b144:	9b01      	ldr	r3, [sp, #4]
    b146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    b14a:	4a0a      	ldr	r2, [pc, #40]	; (b174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    b14c:	9b01      	ldr	r3, [sp, #4]
    b14e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b152:	f003 0301 	and.w	r3, r3, #1
    b156:	2b00      	cmp	r3, #0
    b158:	d106      	bne.n	b168 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    b15a:	4a05      	ldr	r2, [pc, #20]	; (b170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    b15c:	9b01      	ldr	r3, [sp, #4]
    b15e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b162:	2b00      	cmp	r3, #0
    b164:	d100      	bne.n	b168 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b166:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b168:	bf00      	nop
    b16a:	b003      	add	sp, #12
    b16c:	f85d fb04 	ldr.w	pc, [sp], #4
    b170:	1fff922c 	.word	0x1fff922c
    b174:	1fff9228 	.word	0x1fff9228

0000b178 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    b178:	b500      	push	{lr}
    b17a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b17c:	f7f5 fd12 	bl	ba4 <Sys_GetCoreID>
    b180:	4603      	mov	r3, r0
    b182:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    b184:	4a10      	ldr	r2, [pc, #64]	; (b1c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    b186:	9b01      	ldr	r3, [sp, #4]
    b188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b18c:	2b00      	cmp	r3, #0
    b18e:	d10d      	bne.n	b1ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b190:	f7f5 fc39 	bl	a06 <Port_schm_read_msr>
    b194:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b196:	9b00      	ldr	r3, [sp, #0]
    b198:	f003 0301 	and.w	r3, r3, #1
    b19c:	2b00      	cmp	r3, #0
    b19e:	d100      	bne.n	b1a2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b1a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    b1a2:	490a      	ldr	r1, [pc, #40]	; (b1cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    b1a4:	9b01      	ldr	r3, [sp, #4]
    b1a6:	9a00      	ldr	r2, [sp, #0]
    b1a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    b1ac:	4a06      	ldr	r2, [pc, #24]	; (b1c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    b1ae:	9b01      	ldr	r3, [sp, #4]
    b1b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1b4:	1c5a      	adds	r2, r3, #1
    b1b6:	4904      	ldr	r1, [pc, #16]	; (b1c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    b1b8:	9b01      	ldr	r3, [sp, #4]
    b1ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b1be:	bf00      	nop
    b1c0:	b003      	add	sp, #12
    b1c2:	f85d fb04 	ldr.w	pc, [sp], #4
    b1c6:	bf00      	nop
    b1c8:	1fff9234 	.word	0x1fff9234
    b1cc:	1fff9230 	.word	0x1fff9230

0000b1d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    b1d0:	b500      	push	{lr}
    b1d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b1d4:	f7f5 fce6 	bl	ba4 <Sys_GetCoreID>
    b1d8:	4603      	mov	r3, r0
    b1da:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    b1dc:	4a0d      	ldr	r2, [pc, #52]	; (b214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    b1de:	9b01      	ldr	r3, [sp, #4]
    b1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1e4:	1e5a      	subs	r2, r3, #1
    b1e6:	490b      	ldr	r1, [pc, #44]	; (b214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    b1e8:	9b01      	ldr	r3, [sp, #4]
    b1ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    b1ee:	4a0a      	ldr	r2, [pc, #40]	; (b218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    b1f0:	9b01      	ldr	r3, [sp, #4]
    b1f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1f6:	f003 0301 	and.w	r3, r3, #1
    b1fa:	2b00      	cmp	r3, #0
    b1fc:	d106      	bne.n	b20c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    b1fe:	4a05      	ldr	r2, [pc, #20]	; (b214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    b200:	9b01      	ldr	r3, [sp, #4]
    b202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b206:	2b00      	cmp	r3, #0
    b208:	d100      	bne.n	b20c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b20a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b20c:	bf00      	nop
    b20e:	b003      	add	sp, #12
    b210:	f85d fb04 	ldr.w	pc, [sp], #4
    b214:	1fff9234 	.word	0x1fff9234
    b218:	1fff9230 	.word	0x1fff9230

0000b21c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    b21c:	b500      	push	{lr}
    b21e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b220:	f7f5 fcc0 	bl	ba4 <Sys_GetCoreID>
    b224:	4603      	mov	r3, r0
    b226:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    b228:	4a10      	ldr	r2, [pc, #64]	; (b26c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    b22a:	9b01      	ldr	r3, [sp, #4]
    b22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b230:	2b00      	cmp	r3, #0
    b232:	d10d      	bne.n	b250 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b234:	f7f5 fbe7 	bl	a06 <Port_schm_read_msr>
    b238:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b23a:	9b00      	ldr	r3, [sp, #0]
    b23c:	f003 0301 	and.w	r3, r3, #1
    b240:	2b00      	cmp	r3, #0
    b242:	d100      	bne.n	b246 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b244:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    b246:	490a      	ldr	r1, [pc, #40]	; (b270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    b248:	9b01      	ldr	r3, [sp, #4]
    b24a:	9a00      	ldr	r2, [sp, #0]
    b24c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    b250:	4a06      	ldr	r2, [pc, #24]	; (b26c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    b252:	9b01      	ldr	r3, [sp, #4]
    b254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b258:	1c5a      	adds	r2, r3, #1
    b25a:	4904      	ldr	r1, [pc, #16]	; (b26c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    b25c:	9b01      	ldr	r3, [sp, #4]
    b25e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b262:	bf00      	nop
    b264:	b003      	add	sp, #12
    b266:	f85d fb04 	ldr.w	pc, [sp], #4
    b26a:	bf00      	nop
    b26c:	1fff923c 	.word	0x1fff923c
    b270:	1fff9238 	.word	0x1fff9238

0000b274 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    b274:	b500      	push	{lr}
    b276:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b278:	f7f5 fc94 	bl	ba4 <Sys_GetCoreID>
    b27c:	4603      	mov	r3, r0
    b27e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    b280:	4a0d      	ldr	r2, [pc, #52]	; (b2b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    b282:	9b01      	ldr	r3, [sp, #4]
    b284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b288:	1e5a      	subs	r2, r3, #1
    b28a:	490b      	ldr	r1, [pc, #44]	; (b2b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    b28c:	9b01      	ldr	r3, [sp, #4]
    b28e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    b292:	4a0a      	ldr	r2, [pc, #40]	; (b2bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    b294:	9b01      	ldr	r3, [sp, #4]
    b296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b29a:	f003 0301 	and.w	r3, r3, #1
    b29e:	2b00      	cmp	r3, #0
    b2a0:	d106      	bne.n	b2b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    b2a2:	4a05      	ldr	r2, [pc, #20]	; (b2b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    b2a4:	9b01      	ldr	r3, [sp, #4]
    b2a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2aa:	2b00      	cmp	r3, #0
    b2ac:	d100      	bne.n	b2b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b2ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b2b0:	bf00      	nop
    b2b2:	b003      	add	sp, #12
    b2b4:	f85d fb04 	ldr.w	pc, [sp], #4
    b2b8:	1fff923c 	.word	0x1fff923c
    b2bc:	1fff9238 	.word	0x1fff9238

0000b2c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    b2c0:	b500      	push	{lr}
    b2c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b2c4:	f7f5 fc6e 	bl	ba4 <Sys_GetCoreID>
    b2c8:	4603      	mov	r3, r0
    b2ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    b2cc:	4a10      	ldr	r2, [pc, #64]	; (b310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    b2ce:	9b01      	ldr	r3, [sp, #4]
    b2d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2d4:	2b00      	cmp	r3, #0
    b2d6:	d10d      	bne.n	b2f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b2d8:	f7f5 fb95 	bl	a06 <Port_schm_read_msr>
    b2dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b2de:	9b00      	ldr	r3, [sp, #0]
    b2e0:	f003 0301 	and.w	r3, r3, #1
    b2e4:	2b00      	cmp	r3, #0
    b2e6:	d100      	bne.n	b2ea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b2e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    b2ea:	490a      	ldr	r1, [pc, #40]	; (b314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    b2ec:	9b01      	ldr	r3, [sp, #4]
    b2ee:	9a00      	ldr	r2, [sp, #0]
    b2f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    b2f4:	4a06      	ldr	r2, [pc, #24]	; (b310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    b2f6:	9b01      	ldr	r3, [sp, #4]
    b2f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2fc:	1c5a      	adds	r2, r3, #1
    b2fe:	4904      	ldr	r1, [pc, #16]	; (b310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    b300:	9b01      	ldr	r3, [sp, #4]
    b302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b306:	bf00      	nop
    b308:	b003      	add	sp, #12
    b30a:	f85d fb04 	ldr.w	pc, [sp], #4
    b30e:	bf00      	nop
    b310:	1fff9244 	.word	0x1fff9244
    b314:	1fff9240 	.word	0x1fff9240

0000b318 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    b318:	b500      	push	{lr}
    b31a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b31c:	f7f5 fc42 	bl	ba4 <Sys_GetCoreID>
    b320:	4603      	mov	r3, r0
    b322:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    b324:	4a0d      	ldr	r2, [pc, #52]	; (b35c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    b326:	9b01      	ldr	r3, [sp, #4]
    b328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b32c:	1e5a      	subs	r2, r3, #1
    b32e:	490b      	ldr	r1, [pc, #44]	; (b35c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    b330:	9b01      	ldr	r3, [sp, #4]
    b332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    b336:	4a0a      	ldr	r2, [pc, #40]	; (b360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    b338:	9b01      	ldr	r3, [sp, #4]
    b33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b33e:	f003 0301 	and.w	r3, r3, #1
    b342:	2b00      	cmp	r3, #0
    b344:	d106      	bne.n	b354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    b346:	4a05      	ldr	r2, [pc, #20]	; (b35c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    b348:	9b01      	ldr	r3, [sp, #4]
    b34a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b34e:	2b00      	cmp	r3, #0
    b350:	d100      	bne.n	b354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b352:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b354:	bf00      	nop
    b356:	b003      	add	sp, #12
    b358:	f85d fb04 	ldr.w	pc, [sp], #4
    b35c:	1fff9244 	.word	0x1fff9244
    b360:	1fff9240 	.word	0x1fff9240

0000b364 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    b364:	b500      	push	{lr}
    b366:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b368:	f7f5 fc1c 	bl	ba4 <Sys_GetCoreID>
    b36c:	4603      	mov	r3, r0
    b36e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    b370:	4a10      	ldr	r2, [pc, #64]	; (b3b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    b372:	9b01      	ldr	r3, [sp, #4]
    b374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b378:	2b00      	cmp	r3, #0
    b37a:	d10d      	bne.n	b398 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b37c:	f7f5 fb43 	bl	a06 <Port_schm_read_msr>
    b380:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b382:	9b00      	ldr	r3, [sp, #0]
    b384:	f003 0301 	and.w	r3, r3, #1
    b388:	2b00      	cmp	r3, #0
    b38a:	d100      	bne.n	b38e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b38c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    b38e:	490a      	ldr	r1, [pc, #40]	; (b3b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    b390:	9b01      	ldr	r3, [sp, #4]
    b392:	9a00      	ldr	r2, [sp, #0]
    b394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    b398:	4a06      	ldr	r2, [pc, #24]	; (b3b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    b39a:	9b01      	ldr	r3, [sp, #4]
    b39c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3a0:	1c5a      	adds	r2, r3, #1
    b3a2:	4904      	ldr	r1, [pc, #16]	; (b3b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    b3a4:	9b01      	ldr	r3, [sp, #4]
    b3a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b3aa:	bf00      	nop
    b3ac:	b003      	add	sp, #12
    b3ae:	f85d fb04 	ldr.w	pc, [sp], #4
    b3b2:	bf00      	nop
    b3b4:	1fff924c 	.word	0x1fff924c
    b3b8:	1fff9248 	.word	0x1fff9248

0000b3bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    b3bc:	b500      	push	{lr}
    b3be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b3c0:	f7f5 fbf0 	bl	ba4 <Sys_GetCoreID>
    b3c4:	4603      	mov	r3, r0
    b3c6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    b3c8:	4a0d      	ldr	r2, [pc, #52]	; (b400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    b3ca:	9b01      	ldr	r3, [sp, #4]
    b3cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3d0:	1e5a      	subs	r2, r3, #1
    b3d2:	490b      	ldr	r1, [pc, #44]	; (b400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    b3d4:	9b01      	ldr	r3, [sp, #4]
    b3d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    b3da:	4a0a      	ldr	r2, [pc, #40]	; (b404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    b3dc:	9b01      	ldr	r3, [sp, #4]
    b3de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3e2:	f003 0301 	and.w	r3, r3, #1
    b3e6:	2b00      	cmp	r3, #0
    b3e8:	d106      	bne.n	b3f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    b3ea:	4a05      	ldr	r2, [pc, #20]	; (b400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    b3ec:	9b01      	ldr	r3, [sp, #4]
    b3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3f2:	2b00      	cmp	r3, #0
    b3f4:	d100      	bne.n	b3f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b3f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b3f8:	bf00      	nop
    b3fa:	b003      	add	sp, #12
    b3fc:	f85d fb04 	ldr.w	pc, [sp], #4
    b400:	1fff924c 	.word	0x1fff924c
    b404:	1fff9248 	.word	0x1fff9248

0000b408 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    b408:	b500      	push	{lr}
    b40a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b40c:	f7f5 fbca 	bl	ba4 <Sys_GetCoreID>
    b410:	4603      	mov	r3, r0
    b412:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    b414:	4a10      	ldr	r2, [pc, #64]	; (b458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    b416:	9b01      	ldr	r3, [sp, #4]
    b418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b41c:	2b00      	cmp	r3, #0
    b41e:	d10d      	bne.n	b43c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b420:	f7f5 faf1 	bl	a06 <Port_schm_read_msr>
    b424:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b426:	9b00      	ldr	r3, [sp, #0]
    b428:	f003 0301 	and.w	r3, r3, #1
    b42c:	2b00      	cmp	r3, #0
    b42e:	d100      	bne.n	b432 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b430:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    b432:	490a      	ldr	r1, [pc, #40]	; (b45c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    b434:	9b01      	ldr	r3, [sp, #4]
    b436:	9a00      	ldr	r2, [sp, #0]
    b438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    b43c:	4a06      	ldr	r2, [pc, #24]	; (b458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    b43e:	9b01      	ldr	r3, [sp, #4]
    b440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b444:	1c5a      	adds	r2, r3, #1
    b446:	4904      	ldr	r1, [pc, #16]	; (b458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    b448:	9b01      	ldr	r3, [sp, #4]
    b44a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b44e:	bf00      	nop
    b450:	b003      	add	sp, #12
    b452:	f85d fb04 	ldr.w	pc, [sp], #4
    b456:	bf00      	nop
    b458:	1fff9254 	.word	0x1fff9254
    b45c:	1fff9250 	.word	0x1fff9250

0000b460 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    b460:	b500      	push	{lr}
    b462:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b464:	f7f5 fb9e 	bl	ba4 <Sys_GetCoreID>
    b468:	4603      	mov	r3, r0
    b46a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    b46c:	4a0d      	ldr	r2, [pc, #52]	; (b4a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    b46e:	9b01      	ldr	r3, [sp, #4]
    b470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b474:	1e5a      	subs	r2, r3, #1
    b476:	490b      	ldr	r1, [pc, #44]	; (b4a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    b478:	9b01      	ldr	r3, [sp, #4]
    b47a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    b47e:	4a0a      	ldr	r2, [pc, #40]	; (b4a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    b480:	9b01      	ldr	r3, [sp, #4]
    b482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b486:	f003 0301 	and.w	r3, r3, #1
    b48a:	2b00      	cmp	r3, #0
    b48c:	d106      	bne.n	b49c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    b48e:	4a05      	ldr	r2, [pc, #20]	; (b4a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    b490:	9b01      	ldr	r3, [sp, #4]
    b492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b496:	2b00      	cmp	r3, #0
    b498:	d100      	bne.n	b49c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b49a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b49c:	bf00      	nop
    b49e:	b003      	add	sp, #12
    b4a0:	f85d fb04 	ldr.w	pc, [sp], #4
    b4a4:	1fff9254 	.word	0x1fff9254
    b4a8:	1fff9250 	.word	0x1fff9250

0000b4ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    b4ac:	b500      	push	{lr}
    b4ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4b0:	f7f5 fb78 	bl	ba4 <Sys_GetCoreID>
    b4b4:	4603      	mov	r3, r0
    b4b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    b4b8:	4a10      	ldr	r2, [pc, #64]	; (b4fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    b4ba:	9b01      	ldr	r3, [sp, #4]
    b4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4c0:	2b00      	cmp	r3, #0
    b4c2:	d10d      	bne.n	b4e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b4c4:	f7f5 fa9f 	bl	a06 <Port_schm_read_msr>
    b4c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b4ca:	9b00      	ldr	r3, [sp, #0]
    b4cc:	f003 0301 	and.w	r3, r3, #1
    b4d0:	2b00      	cmp	r3, #0
    b4d2:	d100      	bne.n	b4d6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b4d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    b4d6:	490a      	ldr	r1, [pc, #40]	; (b500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    b4d8:	9b01      	ldr	r3, [sp, #4]
    b4da:	9a00      	ldr	r2, [sp, #0]
    b4dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    b4e0:	4a06      	ldr	r2, [pc, #24]	; (b4fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    b4e2:	9b01      	ldr	r3, [sp, #4]
    b4e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4e8:	1c5a      	adds	r2, r3, #1
    b4ea:	4904      	ldr	r1, [pc, #16]	; (b4fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    b4ec:	9b01      	ldr	r3, [sp, #4]
    b4ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b4f2:	bf00      	nop
    b4f4:	b003      	add	sp, #12
    b4f6:	f85d fb04 	ldr.w	pc, [sp], #4
    b4fa:	bf00      	nop
    b4fc:	1fff925c 	.word	0x1fff925c
    b500:	1fff9258 	.word	0x1fff9258

0000b504 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    b504:	b500      	push	{lr}
    b506:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b508:	f7f5 fb4c 	bl	ba4 <Sys_GetCoreID>
    b50c:	4603      	mov	r3, r0
    b50e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    b510:	4a0d      	ldr	r2, [pc, #52]	; (b548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    b512:	9b01      	ldr	r3, [sp, #4]
    b514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b518:	1e5a      	subs	r2, r3, #1
    b51a:	490b      	ldr	r1, [pc, #44]	; (b548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    b51c:	9b01      	ldr	r3, [sp, #4]
    b51e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    b522:	4a0a      	ldr	r2, [pc, #40]	; (b54c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    b524:	9b01      	ldr	r3, [sp, #4]
    b526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b52a:	f003 0301 	and.w	r3, r3, #1
    b52e:	2b00      	cmp	r3, #0
    b530:	d106      	bne.n	b540 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    b532:	4a05      	ldr	r2, [pc, #20]	; (b548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    b534:	9b01      	ldr	r3, [sp, #4]
    b536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b53a:	2b00      	cmp	r3, #0
    b53c:	d100      	bne.n	b540 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b53e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b540:	bf00      	nop
    b542:	b003      	add	sp, #12
    b544:	f85d fb04 	ldr.w	pc, [sp], #4
    b548:	1fff925c 	.word	0x1fff925c
    b54c:	1fff9258 	.word	0x1fff9258

0000b550 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    b550:	b500      	push	{lr}
    b552:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b554:	f7f5 fb26 	bl	ba4 <Sys_GetCoreID>
    b558:	4603      	mov	r3, r0
    b55a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    b55c:	4a10      	ldr	r2, [pc, #64]	; (b5a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    b55e:	9b01      	ldr	r3, [sp, #4]
    b560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b564:	2b00      	cmp	r3, #0
    b566:	d10d      	bne.n	b584 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b568:	f7f5 fa4d 	bl	a06 <Port_schm_read_msr>
    b56c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b56e:	9b00      	ldr	r3, [sp, #0]
    b570:	f003 0301 	and.w	r3, r3, #1
    b574:	2b00      	cmp	r3, #0
    b576:	d100      	bne.n	b57a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b578:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    b57a:	490a      	ldr	r1, [pc, #40]	; (b5a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    b57c:	9b01      	ldr	r3, [sp, #4]
    b57e:	9a00      	ldr	r2, [sp, #0]
    b580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    b584:	4a06      	ldr	r2, [pc, #24]	; (b5a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    b586:	9b01      	ldr	r3, [sp, #4]
    b588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b58c:	1c5a      	adds	r2, r3, #1
    b58e:	4904      	ldr	r1, [pc, #16]	; (b5a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    b590:	9b01      	ldr	r3, [sp, #4]
    b592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b596:	bf00      	nop
    b598:	b003      	add	sp, #12
    b59a:	f85d fb04 	ldr.w	pc, [sp], #4
    b59e:	bf00      	nop
    b5a0:	1fff9264 	.word	0x1fff9264
    b5a4:	1fff9260 	.word	0x1fff9260

0000b5a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    b5a8:	b500      	push	{lr}
    b5aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5ac:	f7f5 fafa 	bl	ba4 <Sys_GetCoreID>
    b5b0:	4603      	mov	r3, r0
    b5b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    b5b4:	4a0d      	ldr	r2, [pc, #52]	; (b5ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    b5b6:	9b01      	ldr	r3, [sp, #4]
    b5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5bc:	1e5a      	subs	r2, r3, #1
    b5be:	490b      	ldr	r1, [pc, #44]	; (b5ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    b5c0:	9b01      	ldr	r3, [sp, #4]
    b5c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    b5c6:	4a0a      	ldr	r2, [pc, #40]	; (b5f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    b5c8:	9b01      	ldr	r3, [sp, #4]
    b5ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5ce:	f003 0301 	and.w	r3, r3, #1
    b5d2:	2b00      	cmp	r3, #0
    b5d4:	d106      	bne.n	b5e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    b5d6:	4a05      	ldr	r2, [pc, #20]	; (b5ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    b5d8:	9b01      	ldr	r3, [sp, #4]
    b5da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5de:	2b00      	cmp	r3, #0
    b5e0:	d100      	bne.n	b5e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b5e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b5e4:	bf00      	nop
    b5e6:	b003      	add	sp, #12
    b5e8:	f85d fb04 	ldr.w	pc, [sp], #4
    b5ec:	1fff9264 	.word	0x1fff9264
    b5f0:	1fff9260 	.word	0x1fff9260

0000b5f4 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    b5f4:	bf00      	nop
    b5f6:	4770      	bx	lr

0000b5f8 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    b5f8:	b510      	push	{r4, lr}
    b5fa:	b084      	sub	sp, #16
    b5fc:	4604      	mov	r4, r0
    b5fe:	4608      	mov	r0, r1
    b600:	4611      	mov	r1, r2
    b602:	461a      	mov	r2, r3
    b604:	4623      	mov	r3, r4
    b606:	f8ad 3006 	strh.w	r3, [sp, #6]
    b60a:	4603      	mov	r3, r0
    b60c:	f88d 3005 	strb.w	r3, [sp, #5]
    b610:	460b      	mov	r3, r1
    b612:	f88d 3004 	strb.w	r3, [sp, #4]
    b616:	4613      	mov	r3, r2
    b618:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b61c:	f7f5 fac2 	bl	ba4 <Sys_GetCoreID>
    b620:	4603      	mov	r3, r0
    b622:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    b624:	490d      	ldr	r1, [pc, #52]	; (b65c <Det_ReportError+0x64>)
    b626:	9b03      	ldr	r3, [sp, #12]
    b628:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b62c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    b630:	4a0b      	ldr	r2, [pc, #44]	; (b660 <Det_ReportError+0x68>)
    b632:	9b03      	ldr	r3, [sp, #12]
    b634:	4413      	add	r3, r2
    b636:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b63a:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    b63c:	4a09      	ldr	r2, [pc, #36]	; (b664 <Det_ReportError+0x6c>)
    b63e:	9b03      	ldr	r3, [sp, #12]
    b640:	4413      	add	r3, r2
    b642:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b646:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    b648:	4a07      	ldr	r2, [pc, #28]	; (b668 <Det_ReportError+0x70>)
    b64a:	9b03      	ldr	r3, [sp, #12]
    b64c:	4413      	add	r3, r2
    b64e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b652:	701a      	strb	r2, [r3, #0]

    return E_OK;
    b654:	2300      	movs	r3, #0
}
    b656:	4618      	mov	r0, r3
    b658:	b004      	add	sp, #16
    b65a:	bd10      	pop	{r4, pc}
    b65c:	1fff9290 	.word	0x1fff9290
    b660:	1fff9268 	.word	0x1fff9268
    b664:	1fff926c 	.word	0x1fff926c
    b668:	1fff9270 	.word	0x1fff9270

0000b66c <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
    b66c:	b510      	push	{r4, lr}
    b66e:	b084      	sub	sp, #16
    b670:	4604      	mov	r4, r0
    b672:	4608      	mov	r0, r1
    b674:	4611      	mov	r1, r2
    b676:	461a      	mov	r2, r3
    b678:	4623      	mov	r3, r4
    b67a:	f8ad 3006 	strh.w	r3, [sp, #6]
    b67e:	4603      	mov	r3, r0
    b680:	f88d 3005 	strb.w	r3, [sp, #5]
    b684:	460b      	mov	r3, r1
    b686:	f88d 3004 	strb.w	r3, [sp, #4]
    b68a:	4613      	mov	r3, r2
    b68c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b690:	f7f5 fa88 	bl	ba4 <Sys_GetCoreID>
    b694:	4603      	mov	r3, r0
    b696:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
    b698:	490d      	ldr	r1, [pc, #52]	; (b6d0 <Det_ReportRuntimeError+0x64>)
    b69a:	9b03      	ldr	r3, [sp, #12]
    b69c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b6a0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
    b6a4:	4a0b      	ldr	r2, [pc, #44]	; (b6d4 <Det_ReportRuntimeError+0x68>)
    b6a6:	9b03      	ldr	r3, [sp, #12]
    b6a8:	4413      	add	r3, r2
    b6aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b6ae:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
    b6b0:	4a09      	ldr	r2, [pc, #36]	; (b6d8 <Det_ReportRuntimeError+0x6c>)
    b6b2:	9b03      	ldr	r3, [sp, #12]
    b6b4:	4413      	add	r3, r2
    b6b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b6ba:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
    b6bc:	4a07      	ldr	r2, [pc, #28]	; (b6dc <Det_ReportRuntimeError+0x70>)
    b6be:	9b03      	ldr	r3, [sp, #12]
    b6c0:	4413      	add	r3, r2
    b6c2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b6c6:	701a      	strb	r2, [r3, #0]

    return E_OK;
    b6c8:	2300      	movs	r3, #0
}
    b6ca:	4618      	mov	r0, r3
    b6cc:	b004      	add	sp, #16
    b6ce:	bd10      	pop	{r4, pc}
    b6d0:	1fff9294 	.word	0x1fff9294
    b6d4:	1fff9274 	.word	0x1fff9274
    b6d8:	1fff9278 	.word	0x1fff9278
    b6dc:	1fff927c 	.word	0x1fff927c

0000b6e0 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
    b6e0:	b510      	push	{r4, lr}
    b6e2:	b084      	sub	sp, #16
    b6e4:	4604      	mov	r4, r0
    b6e6:	4608      	mov	r0, r1
    b6e8:	4611      	mov	r1, r2
    b6ea:	461a      	mov	r2, r3
    b6ec:	4623      	mov	r3, r4
    b6ee:	f8ad 3006 	strh.w	r3, [sp, #6]
    b6f2:	4603      	mov	r3, r0
    b6f4:	f88d 3005 	strb.w	r3, [sp, #5]
    b6f8:	460b      	mov	r3, r1
    b6fa:	f88d 3004 	strb.w	r3, [sp, #4]
    b6fe:	4613      	mov	r3, r2
    b700:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b704:	f7f5 fa4e 	bl	ba4 <Sys_GetCoreID>
    b708:	4603      	mov	r3, r0
    b70a:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
    b70c:	490d      	ldr	r1, [pc, #52]	; (b744 <Det_ReportTransientFault+0x64>)
    b70e:	9b03      	ldr	r3, [sp, #12]
    b710:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b714:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
    b718:	4a0b      	ldr	r2, [pc, #44]	; (b748 <Det_ReportTransientFault+0x68>)
    b71a:	9b03      	ldr	r3, [sp, #12]
    b71c:	4413      	add	r3, r2
    b71e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b722:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
    b724:	4a09      	ldr	r2, [pc, #36]	; (b74c <Det_ReportTransientFault+0x6c>)
    b726:	9b03      	ldr	r3, [sp, #12]
    b728:	4413      	add	r3, r2
    b72a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b72e:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
    b730:	4a07      	ldr	r2, [pc, #28]	; (b750 <Det_ReportTransientFault+0x70>)
    b732:	9b03      	ldr	r3, [sp, #12]
    b734:	4413      	add	r3, r2
    b736:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b73a:	701a      	strb	r2, [r3, #0]

    return E_OK;
    b73c:	2300      	movs	r3, #0
}
    b73e:	4618      	mov	r0, r3
    b740:	b004      	add	sp, #16
    b742:	bd10      	pop	{r4, pc}
    b744:	1fff928c 	.word	0x1fff928c
    b748:	1fff9280 	.word	0x1fff9280
    b74c:	1fff9284 	.word	0x1fff9284
    b750:	1fff9288 	.word	0x1fff9288

0000b754 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
    b754:	bf00      	nop
    b756:	4770      	bx	lr

0000b758 <Clock_Ip_au8DividerCallbackIndex>:
    b758:	0c00 0e0d 0201 0603 0409 0a07 0805 000b     ................

0000b768 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000b778 <Clock_Ip_au8XoscCallbackIndex>:
    b778:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000b788 <Clock_Ip_au8IrcoscCallbackIndex>:
    b788:	0100 0302 0004 0000 0000 0000 0000 0000     ................

0000b798 <Clock_Ip_au8GateCallbackIndex>:
    b798:	0200 0601 0301 0104 0500 0000 0000 0000     ................

0000b7a8 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000b7b8 <Clock_Ip_au8PllCallbackIndex>:
    b7b8:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000b7c8 <Clock_Ip_au8SelectorCallbackIndex>:
    b7c8:	0800 0a09 0109 0302 0504 0706 0000 0000     ................

0000b7d8 <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000b7e8 <Clock_Ip_au8CmuCallbackIndex>:
	...

0000b7f8 <Clock_Ip_au8ClockFeatures>:
	...
    b808:	0000 0100 0000 0000 0000 0000 0002 0000     ................
    b818:	0000 0000 0300 0000 0000 0000 0000 0004     ................
    b828:	0000 0000 0000 0500 0000 0000 0000 0000     ................
    b838:	0006 0000 0000 0000 0100 0000 0000 0000     ................
    b848:	0000 0001 0000 0000 0000 0400 0000 0000     ................
    b858:	0000 0000 0005 0000 0001 0000 0401 0000     ................
    b868:	0200 0000 0100 0005 0000 0003 0000 0402     ................
    b878:	0000 0400 0000 0200 0005 0000 0005 0000     ................
    b888:	0403 0000 0600 0000 0300 0005 0000 0007     ................
    b898:	0000 0500 0000 0000 0000 0000 0006 0000     ................
	...
    b8d8:	0000 0005 0000 0000 0000 0600 0100 0000     ................
    b8e8:	0000 0000 0007 0003 0000 0000 0000 0000     ................
    b8f8:	0000 0000 0000 0006 0000 0000 0000 0700     ................
    b908:	0100 0000 0000 0000 0008 0003 0000 0000     ................
	...
    b920:	0000 0009 0000 0000 0000 0a00 0100 0000     ................
    b930:	0000 0000 000b 0003 0000 0000 0000 0000     ................
    b940:	0000 0000 0000 000c 0000 0000 0000 0d00     ................
    b950:	0100 0000 0000 0000 000e 0003 0000 0000     ................
    b960:	0800 0000 0000 0000 0000 0009 0000 0000     ................
    b970:	0000 0a00 0000 0000 0000 0000 000b 0000     ................
    b980:	0000 0000 0b01 0000 0000 0000 0200 000b     ................
    b990:	0000 0000 0000 0b03 0000 0000 0000 0000     ................
	...
    b9a8:	0400 0000 003b 003b 0000 0004 2700 2700     ....;.;......'.'
    b9b8:	0000 0100 0000 0000 0000 0000 0007 0000     ................
    b9c8:	7300 0000 0700 0000 0000 0032 0000 0009     .s........2.....
    b9d8:	0000 0200 0000 0700 0000 0000 0021 0000     ............!...
    b9e8:	0009 0000 0400 0000 0900 0000 0000 0003     ................
    b9f8:	0000 0007 0000 6100 0000 0700 0000 0000     .......a........
    ba08:	0024 0000 0007 0000 2500 0000 0700 0000     $........%......
    ba18:	0000 002b 0000 0004 5a00 5a00 0000 0700     ..+......Z.Z....
    ba28:	0000 0000 0020 0000 0004 3800 3800 0000     .... ......8.8..
    ba38:	0400 0000 0039 0039 0000 0004 3a00 3a00     ....9.9......:.:
    ba48:	0000 0400 0000 0026 0026 0000 0004 6600     ......&.&......f
    ba58:	6600 0000 0400 0000 0037 0037 0000 0004     .f......7.7.....
    ba68:	2c00 2c00 0000 0400 0000 002d 002d 0000     .,.,......-.-...
    ba78:	0004 2e00 2e00 0000 0200 0000 4040 0040     ............@@@.
    ba88:	0000 0004 6a00 6a00 0000 0400 0000 006b     .....j.j......k.
    ba98:	006b 0000 0004 6c00 6c00 0000 0900 0000     k......l.l......
    baa8:	0000 0001 0000 0009 0000 0000 0000 0700     ................
    bab8:	0000 0000 0036 0000 0007 0000 3100 0000     ....6........1..
    bac8:	0700 0000 0000 0049 0000 0007 0000 4a00     ......I........J
    bad8:	0000 0700 0000 0000 004b 0000 0007 0000     ........K.......
    bae8:	4c00 0000 0700 0000 0000 004d 0000 0007     .L........M.....
    baf8:	0000 3d00 0000 0300 0000 0000 0000 0000     ...=............

0000bb08 <Clock_Ip_au16SelectorEntryHardwareValue>:
    bb08:	0a03 0101 0001 0101 0002 0404 0603 0200     ................
    bb18:	0810 0001 0100 0202 0000 0000 0007 0000     ................
    bb28:	0009 0000 0000 0000 0c0e 0000 0000 0000     ................
	...

0000bb60 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    bb60:	0000 0002 0300 0000 0601 0000 0000 0000     ................
	...

0000bb90 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    bb90:	0700 0000 0000 0000 0000 0202 0303 0101     ................
    bba0:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000bbc0 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    bbc0:	0001 0000 0000 0000 0000 0202 0303 0101     ................
    bbd0:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000bbf0 <Clock_Ip_au8DividerValueHardwareValue>:
    bbf0:	0100 0002 0003 0000 0004 0000 0000 0000     ................
    bc00:	0005 0000 0000 0000 0000 0000 0000 0000     ................
    bc10:	0006 0000 0000 0000 0000 0000 0000 0000     ................
	...
    bc30:	0007 0000                                   ....

0000bc34 <Clock_Ip_apxScgPeriphAsyncDivs>:
    bc34:	4204 4006 4304 4006 4104 4006 4604 4006     .B.@.C.@.A.@.F.@

0000bc44 <Clock_Ip_aeSourceTypeClockName>:
    bc44:	0000 0000 0001 0000 0001 0000 0001 0000     ................
    bc54:	0001 0000 0001 0000 0001 0000 0001 0000     ................
    bc64:	0002 0000 0003 0000 0001 0000 0001 0000     ................
    bc74:	0001 0000 0001 0000 0002 0000 0002 0000     ................
    bc84:	0003 0000 0003 0000 0001 0000 0001 0000     ................
    bc94:	0004 0000 0004 0000 0004 0000 0004 0000     ................
	...

0000bd00 <Clock_Ip_aeHwPllName>:
    bd00:	0009 0000                                   ....

0000bd04 <Clock_Ip_aeHwDfsName>:
    bd04:	0057 0000                                   W...

0000bd08 <Clock_Ip_axDividerCallbacks>:
    bd08:	219d 0000 21a7 0000 21c1 0000 21db 0000     .!...!...!...!..
    bd18:	21f5 0000 220f 0000 2229 0000 2243 0000     .!..."..)"..C"..
    bd28:	225d 0000 2277 0000 2291 0000 22ab 0000     ]"..w"..."..."..
    bd38:	22c5 0000 22df 0000 22f9 0000               ."..."..."..

0000bd44 <Clock_Ip_axDividerTriggerCallbacks>:
    bd44:	266d 0000 266d 0000                         m&..m&..

0000bd4c <Clock_Ip_axExtOscCallbacks>:
    bd4c:	2679 0000 2679 0000 2679 0000 2683 0000     y&..y&..y&...&..
    bd5c:	2679 0000 268d 0000 26a7 0000 26c1 0000     y&...&...&...&..
    bd6c:	2745 0000 2759 0000                         E'..Y'..

0000bd74 <Clock_Ip_axFracDivCallbacks>:
    bd74:	2919 0000 2919 0000 2923 0000               .)...)..#)..

0000bd80 <Clock_Ip_axGateCallbacks>:
    bd80:	293d 0000 2947 0000 2a47 0000 2a61 0000     =)..G)..G*..a*..
    bd90:	29f7 0000 2a11 0000 29a7 0000 29c1 0000     .)...*...)...)..
    bda0:	2957 0000 2971 0000 2a97 0000 2ab1 0000     W)..q)...*...*..
    bdb0:	2ae7 0000 2b01 0000                         .*...+..

0000bdb8 <Clock_Ip_axIntOscCallbacks>:
    bdb8:	2cad 0000 2cad 0000 2cb7 0000 2cc1 0000     .,...,...,...,..
    bdc8:	2cdb 0000 2cf5 0000 2d09 0000 2d23 0000     .,...,...-..#-..
    bdd8:	2d3d 0000 2d51 0000 2d6b 0000 2d85 0000     =-..Q-..k-...-..
    bde8:	2e2d 0000 2e47 0000 2e61 0000               -...G...a...

0000bdf4 <Clock_Ip_axCmuCallbacks>:
    bdf4:	33fd 0000 3407 0000 3413 0000 33fd 0000     .3...4...4...3..

0000be04 <Clock_Ip_axPllCallbacks>:
    be04:	341d 0000 341d 0000 3427 0000 341d 0000     .4...4..'4...4..
    be14:	3433 0000 343d 0000 3457 0000 3471 0000     34..=4..W4..q4..
    be24:	3515 0000 3501 0000                         .5...5..

0000be2c <Clock_Ip_axPcfsCallbacks>:
    be2c:	3671 0000                                   q6..

0000be30 <Clock_Ip_axSelectorCallbacks>:
    be30:	367d 0000 367d 0000 3687 0000 36a1 0000     }6..}6...6...6..
    be40:	367d 0000 36bb 0000 36d5 0000 36ef 0000     }6...6...6...6..
    be50:	3709 0000 3723 0000 373d 0000 3757 0000     .7..#7..=7..W7..
    be60:	3771 0000 378b 0000 37a5 0000 37bf 0000     q7...7...7...7..
    be70:	37d9 0000 37f3 0000 380d 0000 3827 0000     .7...7...8..'8..
    be80:	3841 0000 385b 0000                         A8..[8..

0000be88 <ClockSource>:
    be88:	0000 0000 0008 0000 0002 0000 0005 0000     ................
	...
    bea0:	0009 0000                                   ....

0000bea4 <ResetReasonArray>:
    bea4:	0000 0000 0001 0000 0002 0000 0003 0000     ................
    beb4:	0004 0000 0005 0000 0006 0000 0007 0000     ................
    bec4:	0008 0000 0009 0000 000a 0000 000b 0000     ................
    bed4:	000c 0000 000d 0000 000e 0000               ............

0000bee0 <Port_au32PortCiPortBaseAddr>:
    bee0:	9000 4004 a000 4004 b000 4004 c000 4004     ...@...@...@...@
    bef0:	d000 4004                                   ...@

0000bef4 <Port_au32PortCiGpioBaseAddr>:
    bef4:	f000 400f f040 400f f080 400f f0c0 400f     ...@@..@...@...@
    bf04:	f100 400f                                   ...@

0000bf08 <ftmGptBase>:
    bf08:	8000 4003 9000 4003 a000 4003 6000 4002     ...@...@...@.`.@

0000bf18 <Mcu_aClockConfigPB>:
	...
    bf20:	0101 1c00 0010 0400 0029 0100 0005 0000     ........).......
    bf30:	0001 0000 0000 0000 0057 0000 0000 0000     ........W.......
    bf40:	0000 0000 0008 0000 1200 007a 0001 0000     ..........z.....
    bf50:	0001 0000 0000 0000 0057 0000 0000 0000     ........W.......
    bf60:	0057 0000 0000 0000 0000 0000 0000 0000     W...............
	...
    bf80:	0019 0000 0005 0000 001a 0000 0002 0000     ................
    bf90:	001b 0000 0005 0000 002a 0000 0005 0000     ........*.......
    bfa0:	0028 0000 000e 0000 0029 0000 0001 0000     (.......).......
    bfb0:	0056 0000 001c 0000 0032 0000 002a 0000     V.......2...*...
    bfc0:	002b 0000 0014 0000 002c 0000 0014 0000     +.......,.......
    bfd0:	002d 0000 0014 0000 002e 0000 0014 0000     -...............
    bfe0:	003f 0000 0000 0000 0040 0000 0000 0000     ?.......@.......
    bff0:	0041 0000 0000 0000 0042 0000 0000 0000     A.......B.......
    c000:	0031 0000 0000 0000 0045 0000 0000 0000     1.......E.......
    c010:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    c020:	0044 0000 0000 0000 0030 0000 0000 0000     D.......0.......
    c030:	003d 0000 0000 0000 0043 0000 0000 0000     =.......C.......
    c040:	0049 0000 0000 0000 004a 0000 0000 0000     I.......J.......
    c050:	004b 0000 0000 0000 0048 0000 0000 0000     K.......H.......
    c060:	000c 0000 0001 0000 0000 0000 000d 0000     ................
    c070:	0002 0000 0000 0000 000e 0000 0001 0000     ................
    c080:	0000 0000 000f 0000 0001 0000 0000 0000     ................
    c090:	001d 0000 0001 0000 0000 0000 001e 0000     ................
    c0a0:	0008 0000 0000 0000 001f 0000 0001 0000     ................
    c0b0:	0000 0000 0021 0000 0001 0000 0000 0000     ....!...........
    c0c0:	0022 0000 0002 0000 0000 0000 0023 0000     "...........#...
    c0d0:	0001 0000 0000 0000 0025 0000 0003 0000     ........%.......
    c0e0:	0000 0000 0026 0000 0004 0000 0000 0000     ....&...........
    c0f0:	0027 0000 0002 0000 0000 0000 0032 0000     '...........2...
    c100:	0001 0000 0000 0000 0048 0000 0001 0000     ........H.......
    c110:	0001 0000 0056 0000 0001 0000 0001 0000     ....V...........
    c120:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
    c138:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
    c150:	0057 0000 0000 0000 0057 0000 0057 0000     W.......W...W...
	...
    c16c:	0014 0000 7d00 0000 0015 0000 7d00 0000     .....}.......}..
    c17c:	0016 0000 7d00 0000 0017 0000 8000 0000     .....}..........
    c18c:	0012 0000 0001 0000 0013 0000 0001 0000     ................
    c19c:	0030 0000 0000 0000 0031 0000 0000 0000     0.......1.......
    c1ac:	0032 0000 0000 0000 0033 0000 0000 0000     2.......3.......
    c1bc:	0034 0000 0000 0000 0035 0000 0001 0000     4.......5.......
    c1cc:	0036 0000 0000 0000 0037 0000 0001 0000     6.......7.......
    c1dc:	0038 0000 0001 0000 0039 0000 0000 0000     8.......9.......
    c1ec:	003a 0000 0000 0000 003b 0000 0000 0000     :.......;.......
    c1fc:	003c 0000 0000 0000 003d 0000 0000 0000     <.......=.......
    c20c:	003e 0000 0000 0000 003f 0000 0001 0000     >.......?.......
    c21c:	0040 0000 0000 0000 0041 0000 0000 0000     @.......A.......
    c22c:	0042 0000 0000 0000 0043 0000 0000 0000     B.......C.......
    c23c:	0044 0000 0000 0000 0045 0000 0000 0000     D.......E.......
    c24c:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    c25c:	0048 0000 0000 0000 0049 0000 0000 0000     H.......I.......
    c26c:	004a 0000 0000 0000 004b 0000 0000 0000     J.......K.......
    c27c:	004c 0000 0001 0000 004d 0000 0001 0000     L.......M.......
    c28c:	004e 0000 0000 0000 004f 0000 0000 0000     N.......O.......
    c29c:	0050 0000 0001 0000 0051 0000 0001 0000     P.......Q.......
    c2ac:	0052 0000 0001 0000 0053 0000 0001 0000     R.......S.......
    c2bc:	0054 0000 0001 0000 0055 0000 0000 0000     T.......U.......
    c2cc:	0056 0000 0001 0000 0057 0000 0000 0000     V.......W.......
    c2dc:	0000 0000 0057 0000 0000 0000 0057 0000     ....W.......W...
	...

0000c310 <FTM_0_InitConfig_PB>:
    c310:	0000 0000 0001 0000 0007 0000 0001 0000     ................

0000c320 <FTM_0_ChannelConfig_PB>:
    c320:	0000 0000 7aa9 0000 0000 0000 0000 0000     .....z..........

0000c330 <Gpt_pInitPredefTimerChannelPB>:
	...

0000c340 <u8GptChannelIdToIndexMap>:
    c340:	0000 0000                                   ....

0000c344 <Gpt_InitChannelPB>:
    c344:	0000 0000 08b1 0000 0000 0000 ffff 0000     ................
    c354:	0000 0000 8b48 1fff                         ....H...

0000c35c <Gpt_Config>:
    c35c:	0001 0000 c344 0000 0001 0000 8b38 1fff     ....D.......8...
    c36c:	c330 0000 c340 0000                         0...@...

0000c374 <aIrqConfiguration>:
    c374:	0063 0000 0f01 0000 6d6f 0000               c.......om..

0000c380 <intCtrlConfig>:
    c380:	0001 0000 c374 0000                         ....t...

0000c388 <Mcu_Config>:
    c388:	005a 0000 0000 0000 0001 0000 0001 0000     Z...............
    c398:	c528 0000 bf18 0000 c534 0000               (.......4...

0000c3a4 <OsIf_xPredefinedConfig>:
    c3a4:	0000 0000 6c00 02dc                         .....l..

0000c3ac <OsIf_apxPredefinedConfig>:
    c3ac:	c3a4 0000                                   ....

0000c3b0 <Platform_uConfiguration>:
    c3b0:	c3b8 0000                                   ....

0000c3b4 <Platform_Config>:
    c3b4:	c3b0 0000                                   ....

0000c3b8 <ipwConfig>:
    c3b8:	c380 0000 0000 0000                         ........

0000c3c0 <g_pin_mux_InitConfigArr>:
    c3c0:	c000 4004 f0c0 400f 0000 0000 0002 0000     ...@...@........
    c3d0:	0001 0000 0002 0000 0000 0000 0000 0000     ................
    c3e0:	0000 0000 0100 0000 c000 4004 f0c0 400f     ...........@...@
    c3f0:	0010 0000 0002 0000 0001 0000 0002 0000     ................
	...
    c40c:	0100 0000                                   ....

0000c410 <au8Port_PartitionList>:
    c410:	0001 0000                                   ....

0000c414 <au32Port_PinToPartitionMap>:
    c414:	0001 0000 0001 0000                         ........

0000c41c <Port_au16NoUnUsedPadsArrayDefault>:
    c41c:	0000 0001 0002 0003 0006 0007 0008 0009     ................
    c42c:	000b 000c 000d 000e 000f 0010 0011 0020     .............. .
    c43c:	0021 0022 0023 0024 0025 0026 0027 0028     !.".#.$.%.&.'.(.
    c44c:	0029 002a 002b 002c 002d 002e 002f 0030     ).*.+.,.-.../.0.
    c45c:	0031 0040 0041 0042 0043 0046 0047 0048     1.@.A.B.C.F.G.H.
    c46c:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
    c47c:	0051 0061 0062 0063 0064 0065 0066 0067     Q.a.b.c.d.e.f.g.
    c48c:	0068 0069 006a 006b 006c 006d 006e 006f     h.i.j.k.l.m.n.o.
    c49c:	0071 0080 0081 0082 0083 0084 0085 0086     q...............
    c4ac:	0087 0088 0089 008a 008b 008c 008d 008e     ................
    c4bc:	008f 0090                                   ....

0000c4c0 <Port_UnUsedPin>:
    c4c0:	0100 0000 0001 0000 0000 0000               ............

0000c4cc <Port_aPinConfigDefault>:
    c4cc:	0060 0000 0100 0000 0001 0000 0002 0000     `...............
    c4dc:	0001 0001 0070 0000 0100 0000 0001 0000     ....p...........
    c4ec:	0002 0000 0001 0001                         ........

0000c4f4 <Port_Config>:
    c4f4:	0002 0052 c41c 0000 c4c0 0000 c4cc 0000     ..R.............
	...
    c50c:	c414 0000 c410 0000 c3c0 0000               ............

0000c518 <Power_Ip_RCM_ConfigPB>:
	...

0000c520 <Power_Ip_PMC_ConfigPB>:
    c520:	0000 0000                                   ....

0000c524 <Power_Ip_SMC_ConfigPB>:
    c524:	0000 0000                                   ....

0000c528 <Power_Ip_aModeConfigPB>:
	...

0000c534 <Power_Ip_HwIPsConfigPB>:
    c534:	c518 0000 c520 0000 c524 0000               .... ...$...

0000c540 <__INIT_TABLE>:
    c540:	00000002 	.word	0x00000002
    c544:	1fff8b10 	.word	0x1fff8b10
    c548:	0000c568 	.word	0x0000c568
    c54c:	0000c5b8 	.word	0x0000c5b8
    c550:	1fff8800 	.word	0x1fff8800
    c554:	00000000 	.word	0x00000000
    c558:	00000310 	.word	0x00000310

0000c55c <__ZERO_TABLE>:
    c55c:	00000001 	.word	0x00000001
    c560:	1fff8b60 	.word	0x1fff8b60
    c564:	1fff92a0 	.word	0x1fff92a0
