Ftm_Gpt_Ip_StopPredefTimer (uint8 instance, uint8 channel)
{
  <bb 2> :
  Ftm_Gpt_Ip_SetClockSource (instance, 0);
  Ftm_Gpt_Ip_SetChannelEnableInterrupt (instance, channel, 0);
  Ftm_Gpt_Ip_ClearChInterruptStatusFlag (instance, channel);
  Ftm_Gpt_Ip_SetEnFtmModule (instance, 0);
  Ftm_Gpt_Ip_SetCounterInitVal (instance, 0);
  Ftm_Gpt_Ip_SetCounter (instance, 0);
  Ftm_Gpt_Ip_SetCompareValue (instance, channel, 0);
  Ftm_Gpt_Ip_WriteModulo (instance, 0);
  Ftm_Gpt_Ip_ModeSelectA (instance, channel, 0);
  return;

}


Ftm_Gpt_Ip_StartPredefTimer (uint8 instance, uint8 channel, uint8 uPrescaler, uint8 clocksource, boolean bFreezeEnable)
{
  <bb 2> :
  Ftm_Gpt_Ip_SetChannelEnableInterrupt (instance, channel, 0);
  Ftm_Gpt_Ip_ClearChInterruptStatusFlag (instance, channel);
  _1 = (int) instance;
  _2 = ftmGptBase[_1];
  _3 = _2->SC;
  _4 = (int) instance;
  _5 = ftmGptBase[_4];
  _6 = _3 & 4294967039;
  _5->SC = _6;
  Ftm_Gpt_Ip_SetEnFtmModule (instance, 1);
  Ftm_Gpt_Ip_SetCounterInitVal (instance, 0);
  Ftm_Gpt_Ip_WriteModulo (instance, 65535);
  Ftm_Gpt_Ip_SetCompareValue (instance, channel, 65535);
  SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26 ();
  _7 = (int) instance;
  _8 = ftmGptBase[_7];
  _9 = _8->QDCTRL;
  _10 = (int) instance;
  _11 = ftmGptBase[_10];
  _12 = _9 & 4294967294;
  _11->QDCTRL = _12;
  _13 = (int) instance;
  _14 = ftmGptBase[_13];
  _15 = _14->SC;
  _16 = (int) instance;
  _17 = ftmGptBase[_16];
  _18 = _15 & 4294967263;
  _17->SC = _18;
  SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26 ();
  Ftm_Gpt_Ip_SetPrescaler (instance, uPrescaler);
  _19 = (<unnamed type>) clocksource;
  Ftm_Gpt_Ip_SetClockSource (instance, _19);
  Ftm_Gpt_Ip_SetFreezeBits (instance, bFreezeEnable);
  _20 = (int) instance;
  _21 = ftmGptBase[_20];
  _21->CNT = 1;
  return;

}


Ftm_Gpt_Ip_SetHalfCycleReloadPoint (uint8 instance, uint16 reloadPoint)
{
  <bb 2> :
  _1 = (int) instance;
  _2 = ftmGptBase[_1];
  Ftm_Gpt_Ip_SetHalfCycleValue (_2, reloadPoint);
  return;

}


Ftm_Gpt_Ip_DisableChannelInterrupt (uint8 instance, uint8 channel)
{
  <bb 2> :
  Ftm_Gpt_Ip_SetChannelEnableInterrupt (instance, channel, 0);
  Ftm_Gpt_Ip_ClearChInterruptStatusFlag (instance, channel);
  return;

}


Ftm_Gpt_Ip_EnableChannelInterrupt (uint8 instance, uint8 channel)
{
  <bb 2> :
  Ftm_Gpt_Ip_ClearChInterruptStatusFlag (instance, channel);
  Ftm_Gpt_Ip_SetChannelEnableInterrupt (instance, channel, 1);
  return;

}


Ftm_Gpt_Ip_StopTimer (uint8 instance)
{
  <bb 2> :
  Ftm_Gpt_Ip_SetEnFtmModule (instance, 0);
  Ftm_Gpt_Ip_SetClockSource (instance, 0);
  return;

}


Ftm_Gpt_Ip_StartTimer (uint8 instance, uint16 counterValue)
{
  <bb 2> :
  if (instance <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _1 = (int) instance;
  _2 = Ftm_Gpt_Ip_u32InstanceState[_1];
  if (_2 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Ftm_Gpt_Ip_SetCounterInitVal (instance, counterValue);
  Ftm_Gpt_Ip_SetEnFtmModule (instance, 1);

  <bb 5> :
  return;

}


Ftm_Gpt_Ip_StartCounting (uint8 instance, uint8 channel, uint16 compareValue)
{
  uint32 currentCntValue;
  uint32 counterValue;

  <bb 2> :
  currentCntValue = Ftm_Gpt_Ip_GetCntValue (instance);
  _1 = (long unsigned int) compareValue;
  _2 = currentCntValue + _1;
  if (_2 > 65535)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 = (long unsigned int) compareValue;
  _4 = currentCntValue + _3;
  counterValue = _4 + 4294901761;
  goto <bb 5>; [INV]

  <bb 4> :
  _5 = (long unsigned int) compareValue;
  counterValue = currentCntValue + _5;

  <bb 5> :
  Ftm_Gpt_Ip_SetCompareValue (instance, channel, counterValue);
  _6 = (int) instance;
  _7 = (int) channel;
  _8 = (long unsigned int) compareValue;
  Ftm_Gpt_Ip_u32TargetValue[_6][_7] = _8;
  Ftm_Gpt_Ip_ClearChInterruptStatusFlag (instance, channel);
  Ftm_Gpt_Ip_SetChannelEnableInterrupt (instance, channel, 1);
  return;

}


Ftm_Gpt_Ip_Deinit (uint8 instance)
{
  uint8 channelIndex;

  <bb 2> :
  channelIndex = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  Ftm_Gpt_Ip_SetChannelEnableInterrupt (instance, channelIndex, 0);
  Ftm_Gpt_Ip_ClearChInterruptStatusFlag (instance, channelIndex);
  channelIndex.3_1 = channelIndex;
  channelIndex = channelIndex.3_1 + 1;

  <bb 4> :
  if (channelIndex <= 7)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  Ftm_Gpt_Ip_SetClockSource (instance, 0);
  Ftm_Gpt_Ip_SetEnFtmModule (instance, 0);
  Ftm_Gpt_Ip_SetFreezeBits (instance, 0);
  Ftm_Gpt_Ip_SetCounterInitVal (instance, 0);
  Ftm_Gpt_Ip_SetCounter (instance, 0);
  _2 = (int) instance;
  Ftm_Gpt_Ip_u32InstanceState[_2] = 0;
  return;

}


Ftm_Gpt_Ip_InitChannel (uint8 instance, const struct Ftm_Gpt_Ip_ChannelConfigType * configPtr)
{
  <bb 2> :
  _1 = configPtr->hwChannel;
  Ftm_Gpt_Ip_SetChannelEnableInterrupt (instance, _1, 0);
  _2 = configPtr->hwChannel;
  Ftm_Gpt_Ip_ClearChInterruptStatusFlag (instance, _2);
  _3 = configPtr->hwChannel;
  Ftm_Gpt_Ip_SetCompareValue (instance, _3, 65535);
  _4 = configPtr->hwChannel;
  Ftm_Gpt_Ip_ModeSelectA (instance, _4, 1);
  return;

}


Ftm_Gpt_Ip_Init (uint8 instance, const struct Ftm_Gpt_Ip_InstanceConfigType * configPtr)
{
  <bb 2> :
  _1 = configPtr->mode;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = configPtr->clockPrescaler;
  Ftm_Gpt_Ip_SetPrescaler (instance, _2);
  _3 = configPtr->clocksource;
  Ftm_Gpt_Ip_SetClockSource (instance, _3);
  _4 = configPtr->freezeBits;
  Ftm_Gpt_Ip_SetFreezeBits (instance, _4);
  Ftm_Gpt_Ip_SetCounterInitVal (instance, 1);
  Ftm_Gpt_Ip_WriteModulo (instance, 65535);
  Ftm_Gpt_Ip_SetEnFtmModule (instance, 1);

  <bb 4> :
  _5 = (int) instance;
  Ftm_Gpt_Ip_u32InstanceState[_5] = 1;
  return;

}


Ftm_Gpt_Ip_SetHalfCycleValue (struct FTM_Type * const base, uint16 value)
{
  <bb 2> :
  _1 = (long unsigned int) value;
  base->HCR = _1;
  return;

}


Ftm_Gpt_Ip_ModeSelectA (uint8 instance, uint8 channel, boolean enable)
{
  <bb 2> :
  SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24 ();
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = (int) instance;
  _2 = ftmGptBase[_1];
  _3 = (int) channel;
  _4 = _2->CONTROLS[_3].CSC;
  _5 = (int) instance;
  _6 = ftmGptBase[_5];
  _7 = (int) channel;
  _8 = _4 | 16;
  _6->CONTROLS[_7].CSC = _8;
  goto <bb 5>; [INV]

  <bb 4> :
  _9 = (int) instance;
  _10 = ftmGptBase[_9];
  _11 = (int) channel;
  _12 = _10->CONTROLS[_11].CSC;
  _13 = (int) instance;
  _14 = ftmGptBase[_13];
  _15 = (int) channel;
  _16 = _12 & 4294967279;
  _14->CONTROLS[_15].CSC = _16;

  <bb 5> :
  SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24 ();
  return;

}


Ftm_Gpt_Ip_WriteModulo (uint8 instance, uint16 value)
{
  <bb 2> :
  _1 = (int) instance;
  _2 = ftmGptBase[_1];
  _3 = (long unsigned int) value;
  _2->MOD = _3;
  return;

}


Ftm_Gpt_Ip_SetCompareValue (uint8 instance, uint8 channel, uint32 value)
{
  <bb 2> :
  _1 = (int) instance;
  _2 = ftmGptBase[_1];
  _3 = (int) channel;
  _4 = value & 65535;
  _2->CONTROLS[_3].CV = _4;
  return;

}


Ftm_Gpt_Ip_SetEnFtmModule (uint8 instance, boolean enable)
{
  long unsigned int iftmp.1;

  <bb 2> :
  SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23 ();
  _1 = (int) instance;
  _2 = ftmGptBase[_1];
  _3 = _2->MODE;
  _4 = (int) instance;
  _5 = ftmGptBase[_4];
  _6 = _3 & 4294967294;
  _5->MODE = _6;
  _7 = (int) instance;
  _8 = ftmGptBase[_7];
  _9 = _8->MODE;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.1 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.1 = 0;

  <bb 5> :
  _10 = (int) instance;
  _11 = ftmGptBase[_10];
  _12 = iftmp.1 | _9;
  _11->MODE = _12;
  SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23 ();
  return;

}


Ftm_Gpt_Ip_SetPrescaler (uint8 instance, uint8 prescalerValue)
{
  <bb 2> :
  SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22 ();
  _1 = (int) instance;
  _2 = ftmGptBase[_1];
  _3 = _2->SC;
  _4 = _3 & 4294967288;
  _5 = (long unsigned int) prescalerValue;
  _6 = _5 & 7;
  _7 = (int) instance;
  _8 = ftmGptBase[_7];
  _9 = _4 | _6;
  _8->SC = _9;
  SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22 ();
  return;

}


Ftm_Gpt_Ip_SetClockSource (uint8 instance, Ftm_Gpt_Ip_ClockSource clocksource)
{
  <bb 2> :
  SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21 ();
  _1 = (int) instance;
  _2 = ftmGptBase[_1];
  _3 = _2->SC;
  _4 = _3 & 4294967271;
  _5 = clocksource << 3;
  _6 = _5 & 24;
  _7 = (int) instance;
  _8 = ftmGptBase[_7];
  _9 = _4 | _6;
  _8->SC = _9;
  SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21 ();
  return;

}


Ftm_Gpt_Ip_SetChannelEnableInterrupt (uint8 instance, uint8 channel, boolean aboEn)
{
  long unsigned int iftmp.2;

  <bb 2> :
  _1 = (int) instance;
  _2 = ftmGptBase[_1];
  _3 = (int) channel;
  _4 = _2->CONTROLS[_3].CSC;
  _5 = _4 & 4294967231;
  if (aboEn != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.2 = 64;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.2 = 0;

  <bb 5> :
  _6 = (int) instance;
  _7 = ftmGptBase[_6];
  _8 = (int) channel;
  _9 = iftmp.2 | _5;
  _7->CONTROLS[_8].CSC = _9;
  return;

}


Ftm_Gpt_Ip_ClearChInterruptStatusFlag (uint8 instance, uint8 channel)
{
  <bb 2> :
  _1 = (int) instance;
  _2 = ftmGptBase[_1];
  _3 = (int) channel;
  _4 = _2->CONTROLS[_3].CSC;
  _5 = (int) instance;
  _6 = ftmGptBase[_5];
  _7 = (int) channel;
  _8 = _4 & 4294967167;
  _6->CONTROLS[_7].CSC = _8;
  return;

}


Ftm_Gpt_Ip_SetCounter (uint8 instance, uint16 value)
{
  <bb 2> :
  _1 = (int) instance;
  _2 = ftmGptBase[_1];
  _3 = (long unsigned int) value;
  _2->CNT = _3;
  return;

}


Ftm_Gpt_Ip_SetCounterInitVal (uint8 instance, uint16 value)
{
  <bb 2> :
  _1 = (int) instance;
  _2 = ftmGptBase[_1];
  _3 = (long unsigned int) value;
  _2->CNTIN = _3;
  return;

}


Ftm_Gpt_Ip_SetFreezeBits (uint8 instance, boolean freezeBits)
{
  uint32 freezeVal;
  long unsigned int iftmp.0;

  <bb 2> :
  if (freezeBits != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.0 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.0 = 3;

  <bb 5> :
  freezeVal = iftmp.0;
  SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17 ();
  _1 = (int) instance;
  _2 = ftmGptBase[_1];
  _3 = _2->CONF;
  _4 = _3 & 4294967103;
  _5 = freezeVal << 6;
  _6 = _5 & 255;
  _7 = (int) instance;
  _8 = ftmGptBase[_7];
  _9 = _4 | _6;
  _8->CONF = _9;
  SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17 ();
  return;

}


Ftm_Gpt_Ip_GetCntValue (uint8 instance)
{
  uint32 D.5862;

  <bb 2> :
  _1 = (int) instance;
  _2 = ftmGptBase[_1];
  D.5862 = _2->CNT;

  <bb 3> :
<L0>:
  return D.5862;

}


