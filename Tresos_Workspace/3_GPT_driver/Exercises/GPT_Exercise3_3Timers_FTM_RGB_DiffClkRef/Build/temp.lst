
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000be3 	.word	0x00000be3
  10:	00000be5 	.word	0x00000be5
  14:	00000be7 	.word	0x00000be7
  18:	00000be9 	.word	0x00000be9
	...
  2c:	00000beb 	.word	0x00000beb
  30:	00000bed 	.word	0x00000bed
  34:	00000000 	.word	0x00000000
  38:	00000bef 	.word	0x00000bef
  3c:	00000bf1 	.word	0x00000bf1
  40:	00000bf3 	.word	0x00000bf3
  44:	00000bf3 	.word	0x00000bf3
  48:	00000bf3 	.word	0x00000bf3
  4c:	00000bf3 	.word	0x00000bf3
  50:	00000bf3 	.word	0x00000bf3
  54:	00000bf3 	.word	0x00000bf3
  58:	00000bf3 	.word	0x00000bf3
  5c:	00000bf3 	.word	0x00000bf3
  60:	00000bf3 	.word	0x00000bf3
  64:	00000bf3 	.word	0x00000bf3
  68:	00000bf3 	.word	0x00000bf3
  6c:	00000bf3 	.word	0x00000bf3
  70:	00000bf3 	.word	0x00000bf3
  74:	00000bf3 	.word	0x00000bf3
  78:	00000bf3 	.word	0x00000bf3
  7c:	00000bf3 	.word	0x00000bf3
  80:	00000bf3 	.word	0x00000bf3
  84:	00000bf3 	.word	0x00000bf3
  88:	00000bf3 	.word	0x00000bf3
  8c:	00000bf3 	.word	0x00000bf3
  90:	00000bf3 	.word	0x00000bf3
  94:	00000bf3 	.word	0x00000bf3
  98:	00000bf3 	.word	0x00000bf3
  9c:	00000bf3 	.word	0x00000bf3
  a0:	00000bf3 	.word	0x00000bf3
  a4:	00000bf3 	.word	0x00000bf3
  a8:	00000bf3 	.word	0x00000bf3
  ac:	00000bf3 	.word	0x00000bf3
  b0:	00000bf3 	.word	0x00000bf3
  b4:	00000bf3 	.word	0x00000bf3
  b8:	00000bf3 	.word	0x00000bf3
  bc:	00000bf3 	.word	0x00000bf3
  c0:	00000bf3 	.word	0x00000bf3
  c4:	00000bf3 	.word	0x00000bf3
  c8:	00000bf3 	.word	0x00000bf3
  cc:	00000bf3 	.word	0x00000bf3
  d0:	00000bf3 	.word	0x00000bf3
  d4:	00000bf3 	.word	0x00000bf3
  d8:	00000bf3 	.word	0x00000bf3
  dc:	00000bf3 	.word	0x00000bf3
  e0:	00000bf3 	.word	0x00000bf3
  e4:	00000bf3 	.word	0x00000bf3
  e8:	00000bf3 	.word	0x00000bf3
  ec:	00000bf3 	.word	0x00000bf3
  f0:	00000bf3 	.word	0x00000bf3
  f4:	00000bf3 	.word	0x00000bf3
  f8:	00000bf3 	.word	0x00000bf3
  fc:	00000bf3 	.word	0x00000bf3
 100:	00000bf3 	.word	0x00000bf3
 104:	00000bf3 	.word	0x00000bf3
 108:	00000bf3 	.word	0x00000bf3
 10c:	00000bf3 	.word	0x00000bf3
 110:	00000bf3 	.word	0x00000bf3
 114:	00000bf3 	.word	0x00000bf3
 118:	00000bf3 	.word	0x00000bf3
 11c:	00000bf3 	.word	0x00000bf3
 120:	00000bf3 	.word	0x00000bf3
 124:	00000bf3 	.word	0x00000bf3
 128:	00000bf3 	.word	0x00000bf3
 12c:	00000bf3 	.word	0x00000bf3
 130:	00000bf3 	.word	0x00000bf3
 134:	00000bf3 	.word	0x00000bf3
 138:	00000bf3 	.word	0x00000bf3
 13c:	00000bf3 	.word	0x00000bf3
 140:	00000bf3 	.word	0x00000bf3
 144:	00000bf3 	.word	0x00000bf3
 148:	00000bf3 	.word	0x00000bf3
 14c:	00000bf3 	.word	0x00000bf3
 150:	00000bf3 	.word	0x00000bf3
 154:	00000bf3 	.word	0x00000bf3
 158:	00000bf3 	.word	0x00000bf3
 15c:	00000bf3 	.word	0x00000bf3
 160:	00000bf3 	.word	0x00000bf3
 164:	00000bf3 	.word	0x00000bf3
 168:	00000bf3 	.word	0x00000bf3
 16c:	00000bf3 	.word	0x00000bf3
 170:	00000bf3 	.word	0x00000bf3
 174:	00000bf3 	.word	0x00000bf3
 178:	00000bf3 	.word	0x00000bf3
 17c:	00000bf3 	.word	0x00000bf3
 180:	00000bf3 	.word	0x00000bf3
 184:	00000bf3 	.word	0x00000bf3
 188:	00000bf3 	.word	0x00000bf3
 18c:	00000bf3 	.word	0x00000bf3
 190:	00000bf3 	.word	0x00000bf3
 194:	00000bf3 	.word	0x00000bf3
 198:	00000bf3 	.word	0x00000bf3
 19c:	00000bf3 	.word	0x00000bf3
 1a0:	00000bf3 	.word	0x00000bf3
 1a4:	00000bf3 	.word	0x00000bf3
 1a8:	00000bf3 	.word	0x00000bf3
 1ac:	00000bf3 	.word	0x00000bf3
 1b0:	00000bf3 	.word	0x00000bf3
 1b4:	00000bf3 	.word	0x00000bf3
 1b8:	00000bf3 	.word	0x00000bf3
 1bc:	00000bf3 	.word	0x00000bf3
 1c0:	00000bf3 	.word	0x00000bf3
 1c4:	00000bf3 	.word	0x00000bf3
 1c8:	00000bf3 	.word	0x00000bf3
 1cc:	00000bf3 	.word	0x00000bf3
 1d0:	00000bf3 	.word	0x00000bf3
 1d4:	00000bf3 	.word	0x00000bf3
 1d8:	00000bf3 	.word	0x00000bf3
 1dc:	00000bf3 	.word	0x00000bf3
 1e0:	00000bf3 	.word	0x00000bf3
 1e4:	00000bf3 	.word	0x00000bf3
 1e8:	00000bf3 	.word	0x00000bf3
 1ec:	00000bf3 	.word	0x00000bf3
 1f0:	00000bf3 	.word	0x00000bf3
 1f4:	00000bf3 	.word	0x00000bf3
 1f8:	00000bf3 	.word	0x00000bf3
 1fc:	00000bf3 	.word	0x00000bf3
 200:	00000bf3 	.word	0x00000bf3
 204:	00000bf3 	.word	0x00000bf3
 208:	00000bf3 	.word	0x00000bf3
 20c:	00000bf3 	.word	0x00000bf3
 210:	00000bf3 	.word	0x00000bf3
 214:	00000bf3 	.word	0x00000bf3
 218:	00000bf3 	.word	0x00000bf3
 21c:	00000bf3 	.word	0x00000bf3
 220:	00000bf3 	.word	0x00000bf3
 224:	00000bf3 	.word	0x00000bf3
 228:	00000bf3 	.word	0x00000bf3
 22c:	00000bf3 	.word	0x00000bf3
 230:	00000bf3 	.word	0x00000bf3
 234:	00000bf3 	.word	0x00000bf3
 238:	00000bf3 	.word	0x00000bf3
 23c:	00000bf3 	.word	0x00000bf3
 240:	00000bf3 	.word	0x00000bf3
 244:	00000bf3 	.word	0x00000bf3
 248:	00000bf3 	.word	0x00000bf3
 24c:	00000bf3 	.word	0x00000bf3
 250:	00000bf3 	.word	0x00000bf3
 254:	00000bf3 	.word	0x00000bf3
 258:	00000bf3 	.word	0x00000bf3
 25c:	00000bf3 	.word	0x00000bf3
 260:	00000bf3 	.word	0x00000bf3
 264:	00000bf3 	.word	0x00000bf3
 268:	00000bf3 	.word	0x00000bf3
 26c:	00000bf3 	.word	0x00000bf3
 270:	00000bf3 	.word	0x00000bf3
 274:	00000bf3 	.word	0x00000bf3
 278:	00000bf3 	.word	0x00000bf3
 27c:	00000bf3 	.word	0x00000bf3
 280:	00000bf3 	.word	0x00000bf3
 284:	00000bf3 	.word	0x00000bf3
 288:	00000bf3 	.word	0x00000bf3
 28c:	00000bf3 	.word	0x00000bf3
 290:	00000bf3 	.word	0x00000bf3
 294:	00000bf3 	.word	0x00000bf3
 298:	00000bf3 	.word	0x00000bf3
 29c:	00000bf3 	.word	0x00000bf3
 2a0:	00000bf3 	.word	0x00000bf3
 2a4:	00000bf3 	.word	0x00000bf3
 2a8:	00000bf3 	.word	0x00000bf3
 2ac:	00000bf3 	.word	0x00000bf3
 2b0:	00000bf3 	.word	0x00000bf3
 2b4:	00000bf3 	.word	0x00000bf3
 2b8:	00000bf3 	.word	0x00000bf3
 2bc:	00000bf3 	.word	0x00000bf3
 2c0:	00000bf3 	.word	0x00000bf3
 2c4:	00000bf3 	.word	0x00000bf3
 2c8:	00000bf3 	.word	0x00000bf3
 2cc:	00000bf3 	.word	0x00000bf3
 2d0:	00000bf3 	.word	0x00000bf3
 2d4:	00000bf3 	.word	0x00000bf3
 2d8:	00000bf3 	.word	0x00000bf3
 2dc:	00000bf3 	.word	0x00000bf3
 2e0:	00000bf3 	.word	0x00000bf3
 2e4:	00000bf3 	.word	0x00000bf3
 2e8:	00000bf3 	.word	0x00000bf3
 2ec:	00000bf3 	.word	0x00000bf3
 2f0:	00000bf3 	.word	0x00000bf3
 2f4:	00000bf3 	.word	0x00000bf3
 2f8:	00000bf3 	.word	0x00000bf3
 2fc:	00000bf3 	.word	0x00000bf3
 300:	00000bf3 	.word	0x00000bf3
 304:	00000bf3 	.word	0x00000bf3
 308:	00000bf3 	.word	0x00000bf3
 30c:	00000bf3 	.word	0x00000bf3

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fae5 	bl	a50 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fba4 	bl	bd8 <startup_go_to_user_mode>
     490:	f000 fa20 	bl	8d4 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff9300 	.word	0x1fff9300

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 faef 	bl	b7c <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__BSS_SRAM_SIZE+0x10c>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__BSS_SRAM_SIZE+0x10c>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__BSS_SRAM_SIZE+0x110>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__BSS_SRAM_SIZE+0x110>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__BSS_SRAM_SIZE+0x106>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0x144>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__BSS_SRAM_SIZE+0x84>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__BSS_SRAM_SIZE+0x13c>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__BSS_SRAM_SIZE+0x136>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__BSS_SRAM_SIZE+0x28>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__BSS_SRAM_SIZE+0x132>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__BSS_SRAM_SIZE+0x132>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__BSS_SRAM_SIZE+0x50>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__BSS_SRAM_SIZE+0x12a>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__BSS_SRAM_SIZE+0x12a>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__BSS_SRAM_SIZE+0x118>
     7c4:	d056      	beq.n	874 <__BSS_SRAM_SIZE+0x114>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0x148>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__BSS_SRAM_SIZE+0xd0>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__BSS_SRAM_SIZE+0x12e>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__BSS_SRAM_SIZE+0x12e>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__BSS_SRAM_SIZE+0xfe>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__BSS_SRAM_SIZE+0x126>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__BSS_SRAM_SIZE+0x126>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__BSS_SRAM_SIZE+0x66>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__BSS_SRAM_SIZE+0x66>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__BSS_SRAM_SIZE+0xfe>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__BSS_SRAM_SIZE+0x50>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__BSS_SRAM_SIZE+0xd0>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__BSS_SRAM_SIZE+0x28>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Gpt_TimeoutCallback_0>:
void EcuM_Init( void );

/*This function is gonna be called on ISR from FTM0_CH0, it is basically a callback
called by FTM_0_CH_0_ISR library function*/
void Gpt_TimeoutCallback_0( void )
{
     8b0:	b508      	push	{r3, lr}
    /*here, we just toggle led connected to C8*/
    Dio_FlipChannel( DioConf_DioChannel_D0_BLUE_LED );
     8b2:	2060      	movs	r0, #96	; 0x60
     8b4:	f005 fafb 	bl	5eae <Dio_FlipChannel>
}
     8b8:	bf00      	nop
     8ba:	bd08      	pop	{r3, pc}

000008bc <Gpt_TimeoutCallback_1>:

/*This function is gonna be called on ISR from FTM1_CH0, it is basically a callback
called by FTM_1_CH_0_ISR library function*/
void Gpt_TimeoutCallback_1( void )
{
     8bc:	b508      	push	{r3, lr}
    /*here, we just toggle led connected to C8*/
    Dio_FlipChannel( DioConf_DioChannel_D15_RED_LED );
     8be:	206f      	movs	r0, #111	; 0x6f
     8c0:	f005 faf5 	bl	5eae <Dio_FlipChannel>
}
     8c4:	bf00      	nop
     8c6:	bd08      	pop	{r3, pc}

000008c8 <Gpt_TimeoutCallback_2>:

/*This function is gonna be called on ISR from FTM2_CH0, it is basically a callback
called by FTM_2_CH_0_ISR library function*/
void Gpt_TimeoutCallback_2( void )
{
     8c8:	b508      	push	{r3, lr}
    /*here, we just toggle led connected to C9*/
    Dio_FlipChannel( DioConf_DioChannel_D16_GREEN_LED );
     8ca:	2070      	movs	r0, #112	; 0x70
     8cc:	f005 faef 	bl	5eae <Dio_FlipChannel>
}
     8d0:	bf00      	nop
     8d2:	bd08      	pop	{r3, pc}

000008d4 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8d4:	b508      	push	{r3, lr}
    EcuM_Init();
     8d6:	f000 f819 	bl	90c <EcuM_Init>

    /*Start the timer and set it to Running state with a timeout of 100ms*/
    /*  Tick frequency = ( 12MHz / 128 prescaler) = 93,750Hz
        Counter = ( 0.100s * 93750Hz )  = 9,375      
        FTM counter max value (MOD register) is 65,535, so it fits within the 16-bit counter range. */
    Gpt_StartTimer( GptConf_GptChannelConfiguration_GptChannelConfiguration_0, 9375u );
     8da:	f242 419f 	movw	r1, #9375	; 0x249f
     8de:	2000      	movs	r0, #0
     8e0:	f006 ff16 	bl	7710 <Gpt_StartTimer>
    /*Start the timer and set it to Running state with a timeout of 400ms*/
    /*  Tick frequency = ( 4MHz / 128 prescaler) = 31,250Hz
        Counter = ( 0.400s * 31250Hz prescaler)  = 12,500      
        FTM counter max value (MOD register) is 65,535, so it fits within the 16-bit counter range. */
    Gpt_StartTimer( GptConf_GptChannelConfiguration_GptChannelConfiguration_1, 12500u );    
     8e4:	f243 01d4 	movw	r1, #12500	; 0x30d4
     8e8:	2001      	movs	r0, #1
     8ea:	f006 ff11 	bl	7710 <Gpt_StartTimer>
    /*Start the timer and set it to Running state with a timeout of 800ms*/
    /*  Tick frequency = ( 8MHz / 128 prescaler) = 62,500Hz
        Counter = ( 0.800s * 62500Hz )  = 50,000      
        FTM counter max value (MOD register) is 65,535, so it fits within the 16-bit counter range. */
    Gpt_StartTimer( GptConf_GptChannelConfiguration_GptChannelConfiguration_1, 50000u );    
     8ee:	f24c 3150 	movw	r1, #50000	; 0xc350
     8f2:	2001      	movs	r0, #1
     8f4:	f006 ff0c 	bl	7710 <Gpt_StartTimer>
    /*Enable notifications, Gpt_TimeoutCallback will be called on each timeout*/
    Gpt_EnableNotification( GptConf_GptChannelConfiguration_GptChannelConfiguration_0 );
     8f8:	2000      	movs	r0, #0
     8fa:	f007 f805 	bl	7908 <Gpt_EnableNotification>
    Gpt_EnableNotification( GptConf_GptChannelConfiguration_GptChannelConfiguration_1 );
     8fe:	2001      	movs	r0, #1
     900:	f007 f802 	bl	7908 <Gpt_EnableNotification>
    Gpt_EnableNotification( GptConf_GptChannelConfiguration_GptChannelConfiguration_2 );
     904:	2002      	movs	r0, #2
     906:	f006 ffff 	bl	7908 <Gpt_EnableNotification>

    while( 1u )
     90a:	e7fe      	b.n	90a <main+0x36>

0000090c <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     90c:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     90e:	480a      	ldr	r0, [pc, #40]	; (938 <EcuM_Init+0x2c>)
     910:	f004 f98c 	bl	4c2c <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     914:	2000      	movs	r0, #0
     916:	f004 f9dd 	bl	4cd4 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     91a:	2000      	movs	r0, #0
     91c:	f004 f9fe 	bl	4d1c <Mcu_SetMode>
    
    /*Enable and setup interrupts*/
    Platform_Init( NULL_PTR );
     920:	2000      	movs	r0, #0
     922:	f000 faeb 	bl	efc <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration, for this case
    ports D0, D15 and D16 are configured as output*/
    Port_Init( &Port_Config );
     926:	4805      	ldr	r0, [pc, #20]	; (93c <EcuM_Init+0x30>)
     928:	f004 fd82 	bl	5430 <Port_Init>
    /*Apply Gpt configuration for FTM0 channel 0, FTM1 channel 0 and FTM2 channel 0*/
    Gpt_Init( &Gpt_Config );
     92c:	4804      	ldr	r0, [pc, #16]	; (940 <EcuM_Init+0x34>)
     92e:	f006 fca5 	bl	727c <Gpt_Init>
}
     932:	bf00      	nop
     934:	bd08      	pop	{r3, pc}
     936:	bf00      	nop
     938:	0000c620 	.word	0x0000c620
     93c:	0000c848 	.word	0x0000c848
     940:	0000c5dc 	.word	0x0000c5dc

00000944 <Gpt_Ipw_FtmGetTimeElapsed>:
#define GPT_START_SEC_CODE
#include "Gpt_MemMap.h"

#if (FTM_GPT_IP_USED == STD_ON)
static Gpt_ValueType Gpt_Ipw_FtmGetTimeElapsed(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig, Gpt_HwChannelInfoType * pReturnHwChannelInfo)
{
     944:	b500      	push	{lr}
     946:	b087      	sub	sp, #28
     948:	9001      	str	r0, [sp, #4]
     94a:	9100      	str	r1, [sp, #0]
    Gpt_ValueType returnValue;
    boolean HasChEvOccurred;

    /* Read compare and counter registers */
    uint32 counterValue = Ftm_Gpt_Ip_GetCntValue(pHwChannelConfig->instance);
     94c:	9b01      	ldr	r3, [sp, #4]
     94e:	791b      	ldrb	r3, [r3, #4]
     950:	4618      	mov	r0, r3
     952:	f007 fa85 	bl	7e60 <Ftm_Gpt_Ip_GetCntValue>
     956:	9004      	str	r0, [sp, #16]
    uint32 compareValue = Ftm_Gpt_Ip_GetCompareValue(pHwChannelConfig->instance, pHwChannelConfig->channel);
     958:	9b01      	ldr	r3, [sp, #4]
     95a:	791a      	ldrb	r2, [r3, #4]
     95c:	9b01      	ldr	r3, [sp, #4]
     95e:	795b      	ldrb	r3, [r3, #5]
     960:	4619      	mov	r1, r3
     962:	4610      	mov	r0, r2
     964:	f007 fa8c 	bl	7e80 <Ftm_Gpt_Ip_GetCompareValue>
     968:	9003      	str	r0, [sp, #12]

    pReturnHwChannelInfo->uTargetTime = Ftm_Gpt_Ip_u32TargetValue[pHwChannelConfig->instance][pHwChannelConfig->channel];
     96a:	9b01      	ldr	r3, [sp, #4]
     96c:	791b      	ldrb	r3, [r3, #4]
     96e:	4618      	mov	r0, r3
     970:	9b01      	ldr	r3, [sp, #4]
     972:	795b      	ldrb	r3, [r3, #5]
     974:	4619      	mov	r1, r3
     976:	4a23      	ldr	r2, [pc, #140]	; (a04 <Gpt_Ipw_FtmGetTimeElapsed+0xc0>)
     978:	00c3      	lsls	r3, r0, #3
     97a:	440b      	add	r3, r1
     97c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     980:	9b00      	ldr	r3, [sp, #0]
     982:	605a      	str	r2, [r3, #4]

    /* Calculate the elapsed time */
    if (counterValue > compareValue)
     984:	9a04      	ldr	r2, [sp, #16]
     986:	9b03      	ldr	r3, [sp, #12]
     988:	429a      	cmp	r2, r3
     98a:	d918      	bls.n	9be <Gpt_Ipw_FtmGetTimeElapsed+0x7a>
    {
        /* Counter value passed the set-up Target value - might have roll-over */
        if(((FTM_CNT_MAX_VALUE_U32 - counterValue) + compareValue) <= pReturnHwChannelInfo->uTargetTime)
     98c:	9a03      	ldr	r2, [sp, #12]
     98e:	9b04      	ldr	r3, [sp, #16]
     990:	1ad3      	subs	r3, r2, r3
     992:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
     996:	33ff      	adds	r3, #255	; 0xff
     998:	9a00      	ldr	r2, [sp, #0]
     99a:	6852      	ldr	r2, [r2, #4]
     99c:	4293      	cmp	r3, r2
     99e:	d80a      	bhi.n	9b6 <Gpt_Ipw_FtmGetTimeElapsed+0x72>
        {
            /* New compare value was read by register read - isr served in time - we have roll-over */
            returnValue =   (Gpt_ValueType)(    (   pReturnHwChannelInfo->uTargetTime - \
     9a0:	9b00      	ldr	r3, [sp, #0]
     9a2:	685a      	ldr	r2, [r3, #4]
                                                    ((FTM_CNT_MAX_VALUE_U32 - counterValue) + compareValue) ) + \
     9a4:	9904      	ldr	r1, [sp, #16]
     9a6:	9b03      	ldr	r3, [sp, #12]
     9a8:	1acb      	subs	r3, r1, r3
            returnValue =   (Gpt_ValueType)(    (   pReturnHwChannelInfo->uTargetTime - \
     9aa:	4413      	add	r3, r2
     9ac:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
     9b0:	3bfe      	subs	r3, #254	; 0xfe
     9b2:	9305      	str	r3, [sp, #20]
     9b4:	e00a      	b.n	9cc <Gpt_Ipw_FtmGetTimeElapsed+0x88>
                                                FTM_OVERFLOW_PAD_U32 );
        }
        else
        {
            /* There is an delay in serving ISR or updating u32CompareValue - report last timer time */
            returnValue = (Gpt_ValueType)(pReturnHwChannelInfo->uTargetTime);
     9b6:	9b00      	ldr	r3, [sp, #0]
     9b8:	685b      	ldr	r3, [r3, #4]
     9ba:	9305      	str	r3, [sp, #20]
     9bc:	e006      	b.n	9cc <Gpt_Ipw_FtmGetTimeElapsed+0x88>
        }
    }
    else
    {
        /* Timer in between ISRs period */
        returnValue = (Gpt_ValueType)(pReturnHwChannelInfo->uTargetTime - (compareValue - counterValue));
     9be:	9b00      	ldr	r3, [sp, #0]
     9c0:	685a      	ldr	r2, [r3, #4]
     9c2:	9904      	ldr	r1, [sp, #16]
     9c4:	9b03      	ldr	r3, [sp, #12]
     9c6:	1acb      	subs	r3, r1, r3
     9c8:	4413      	add	r3, r2
     9ca:	9305      	str	r3, [sp, #20]
    }

    /* check if channel event has occurred */
    HasChEvOccurred = Ftm_Gpt_Ip_GetChInterruptStatusFlag(pHwChannelConfig->instance, pHwChannelConfig->channel);
     9cc:	9b01      	ldr	r3, [sp, #4]
     9ce:	791a      	ldrb	r2, [r3, #4]
     9d0:	9b01      	ldr	r3, [sp, #4]
     9d2:	795b      	ldrb	r3, [r3, #5]
     9d4:	4619      	mov	r1, r3
     9d6:	4610      	mov	r0, r2
     9d8:	f007 fa22 	bl	7e20 <Ftm_Gpt_Ip_GetChInterruptStatusFlag>
     9dc:	4603      	mov	r3, r0
     9de:	f88d 300b 	strb.w	r3, [sp, #11]

    /*Check interrupt status flag*/
    if (HasChEvOccurred)
     9e2:	f89d 300b 	ldrb.w	r3, [sp, #11]
     9e6:	2b00      	cmp	r3, #0
     9e8:	d003      	beq.n	9f2 <Gpt_Ipw_FtmGetTimeElapsed+0xae>
    {
        /* Channel counter was roll-over */
        pReturnHwChannelInfo->bChannelRollover = TRUE;
     9ea:	9b00      	ldr	r3, [sp, #0]
     9ec:	2201      	movs	r2, #1
     9ee:	701a      	strb	r2, [r3, #0]
     9f0:	e002      	b.n	9f8 <Gpt_Ipw_FtmGetTimeElapsed+0xb4>
    }
    else
    {
        /* Channel counter was not rollover */
        pReturnHwChannelInfo->bChannelRollover = FALSE;
     9f2:	9b00      	ldr	r3, [sp, #0]
     9f4:	2200      	movs	r2, #0
     9f6:	701a      	strb	r2, [r3, #0]
    }
    return returnValue;
     9f8:	9b05      	ldr	r3, [sp, #20]
}
     9fa:	4618      	mov	r0, r3
     9fc:	b007      	add	sp, #28
     9fe:	f85d fb04 	ldr.w	pc, [sp], #4
     a02:	bf00      	nop
     a04:	1fff8d68 	.word	0x1fff8d68

00000a08 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     a08:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a0a:	f3ef 8310 	mrs	r3, PRIMASK
     a0e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a10:	4623      	mov	r3, r4
}
     a12:	4618      	mov	r0, r3
     a14:	f85d 4b04 	ldr.w	r4, [sp], #4
     a18:	4770      	bx	lr

00000a1a <Gpt_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Gpt_schm_read_msr(void)
{
     a1a:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a1c:	f3ef 8310 	mrs	r3, PRIMASK
     a20:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a22:	4623      	mov	r3, r4
}
     a24:	4618      	mov	r0, r3
     a26:	f85d 4b04 	ldr.w	r4, [sp], #4
     a2a:	4770      	bx	lr

00000a2c <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     a2c:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a2e:	f3ef 8310 	mrs	r3, PRIMASK
     a32:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a34:	4623      	mov	r3, r4
}
     a36:	4618      	mov	r0, r3
     a38:	f85d 4b04 	ldr.w	r4, [sp], #4
     a3c:	4770      	bx	lr

00000a3e <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     a3e:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a40:	f3ef 8310 	mrs	r3, PRIMASK
     a44:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a46:	4623      	mov	r3, r4
}
     a48:	4618      	mov	r0, r3
     a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
     a4e:	4770      	bx	lr

00000a50 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     a50:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     a52:	2300      	movs	r3, #0
     a54:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     a56:	2300      	movs	r3, #0
     a58:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     a5a:	2300      	movs	r3, #0
     a5c:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     a5e:	2300      	movs	r3, #0
     a60:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     a62:	4b44      	ldr	r3, [pc, #272]	; (b74 <init_data_bss+0x124>)
     a64:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     a66:	4b44      	ldr	r3, [pc, #272]	; (b78 <init_data_bss+0x128>)
     a68:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     a6a:	9b05      	ldr	r3, [sp, #20]
     a6c:	681b      	ldr	r3, [r3, #0]
     a6e:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     a70:	9b05      	ldr	r3, [sp, #20]
     a72:	3304      	adds	r3, #4
     a74:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     a76:	9b05      	ldr	r3, [sp, #20]
     a78:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     a7a:	2300      	movs	r3, #0
     a7c:	9309      	str	r3, [sp, #36]	; 0x24
     a7e:	e03d      	b.n	afc <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a82:	4613      	mov	r3, r2
     a84:	005b      	lsls	r3, r3, #1
     a86:	4413      	add	r3, r2
     a88:	009b      	lsls	r3, r3, #2
     a8a:	461a      	mov	r2, r3
     a8c:	9b03      	ldr	r3, [sp, #12]
     a8e:	4413      	add	r3, r2
     a90:	685b      	ldr	r3, [r3, #4]
     a92:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a96:	4613      	mov	r3, r2
     a98:	005b      	lsls	r3, r3, #1
     a9a:	4413      	add	r3, r2
     a9c:	009b      	lsls	r3, r3, #2
     a9e:	461a      	mov	r2, r3
     aa0:	9b03      	ldr	r3, [sp, #12]
     aa2:	4413      	add	r3, r2
     aa4:	681b      	ldr	r3, [r3, #0]
     aa6:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     aaa:	4613      	mov	r3, r2
     aac:	005b      	lsls	r3, r3, #1
     aae:	4413      	add	r3, r2
     ab0:	009b      	lsls	r3, r3, #2
     ab2:	461a      	mov	r2, r3
     ab4:	9b03      	ldr	r3, [sp, #12]
     ab6:	4413      	add	r3, r2
     ab8:	689b      	ldr	r3, [r3, #8]
     aba:	4619      	mov	r1, r3
     abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     abe:	4613      	mov	r3, r2
     ac0:	005b      	lsls	r3, r3, #1
     ac2:	4413      	add	r3, r2
     ac4:	009b      	lsls	r3, r3, #2
     ac6:	461a      	mov	r2, r3
     ac8:	9b03      	ldr	r3, [sp, #12]
     aca:	4413      	add	r3, r2
     acc:	685b      	ldr	r3, [r3, #4]
     ace:	1acb      	subs	r3, r1, r3
     ad0:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     ad2:	2300      	movs	r3, #0
     ad4:	9308      	str	r3, [sp, #32]
     ad6:	e00a      	b.n	aee <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     ad8:	9a00      	ldr	r2, [sp, #0]
     ada:	9b08      	ldr	r3, [sp, #32]
     adc:	441a      	add	r2, r3
     ade:	9901      	ldr	r1, [sp, #4]
     ae0:	9b08      	ldr	r3, [sp, #32]
     ae2:	440b      	add	r3, r1
     ae4:	7812      	ldrb	r2, [r2, #0]
     ae6:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     ae8:	9b08      	ldr	r3, [sp, #32]
     aea:	3301      	adds	r3, #1
     aec:	9308      	str	r3, [sp, #32]
     aee:	9a08      	ldr	r2, [sp, #32]
     af0:	9b06      	ldr	r3, [sp, #24]
     af2:	429a      	cmp	r2, r3
     af4:	d3f0      	bcc.n	ad8 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     af8:	3301      	adds	r3, #1
     afa:	9309      	str	r3, [sp, #36]	; 0x24
     afc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     afe:	9b07      	ldr	r3, [sp, #28]
     b00:	429a      	cmp	r2, r3
     b02:	d3bd      	bcc.n	a80 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     b04:	9b04      	ldr	r3, [sp, #16]
     b06:	681b      	ldr	r3, [r3, #0]
     b08:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     b0a:	9b04      	ldr	r3, [sp, #16]
     b0c:	3304      	adds	r3, #4
     b0e:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     b10:	9b04      	ldr	r3, [sp, #16]
     b12:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     b14:	2300      	movs	r3, #0
     b16:	9309      	str	r3, [sp, #36]	; 0x24
     b18:	e024      	b.n	b64 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b1c:	00db      	lsls	r3, r3, #3
     b1e:	9a02      	ldr	r2, [sp, #8]
     b20:	4413      	add	r3, r2
     b22:	681b      	ldr	r3, [r3, #0]
     b24:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b28:	00db      	lsls	r3, r3, #3
     b2a:	9a02      	ldr	r2, [sp, #8]
     b2c:	4413      	add	r3, r2
     b2e:	685b      	ldr	r3, [r3, #4]
     b30:	4619      	mov	r1, r3
     b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b34:	00db      	lsls	r3, r3, #3
     b36:	9a02      	ldr	r2, [sp, #8]
     b38:	4413      	add	r3, r2
     b3a:	681b      	ldr	r3, [r3, #0]
     b3c:	1acb      	subs	r3, r1, r3
     b3e:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b40:	2300      	movs	r3, #0
     b42:	9308      	str	r3, [sp, #32]
     b44:	e007      	b.n	b56 <init_data_bss+0x106>
        {
            ram[j] = 0U;
     b46:	9a01      	ldr	r2, [sp, #4]
     b48:	9b08      	ldr	r3, [sp, #32]
     b4a:	4413      	add	r3, r2
     b4c:	2200      	movs	r2, #0
     b4e:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b50:	9b08      	ldr	r3, [sp, #32]
     b52:	3301      	adds	r3, #1
     b54:	9308      	str	r3, [sp, #32]
     b56:	9a08      	ldr	r2, [sp, #32]
     b58:	9b06      	ldr	r3, [sp, #24]
     b5a:	429a      	cmp	r2, r3
     b5c:	d3f3      	bcc.n	b46 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b60:	3301      	adds	r3, #1
     b62:	9309      	str	r3, [sp, #36]	; 0x24
     b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b66:	9b07      	ldr	r3, [sp, #28]
     b68:	429a      	cmp	r2, r3
     b6a:	d3d6      	bcc.n	b1a <init_data_bss+0xca>
        }
    }
}
     b6c:	bf00      	nop
     b6e:	bf00      	nop
     b70:	b00a      	add	sp, #40	; 0x28
     b72:	4770      	bx	lr
     b74:	0000c894 	.word	0x0000c894
     b78:	0000c8b0 	.word	0x0000c8b0

00000b7c <sys_m4_cache_init>:
{
     b7c:	b084      	sub	sp, #16
     b7e:	4603      	mov	r3, r0
     b80:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     b84:	2300      	movs	r3, #0
     b86:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     b8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b8e:	2b00      	cmp	r3, #0
     b90:	d118      	bne.n	bc4 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     b92:	4b10      	ldr	r3, [pc, #64]	; (bd4 <sys_m4_cache_init+0x58>)
     b94:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     b98:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     b9a:	4b0e      	ldr	r3, [pc, #56]	; (bd4 <sys_m4_cache_init+0x58>)
     b9c:	681b      	ldr	r3, [r3, #0]
     b9e:	4a0d      	ldr	r2, [pc, #52]	; (bd4 <sys_m4_cache_init+0x58>)
     ba0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     ba4:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     ba6:	bf00      	nop
     ba8:	4b0a      	ldr	r3, [pc, #40]	; (bd4 <sys_m4_cache_init+0x58>)
     baa:	681b      	ldr	r3, [r3, #0]
     bac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     bb4:	d0f8      	beq.n	ba8 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     bb6:	4b07      	ldr	r3, [pc, #28]	; (bd4 <sys_m4_cache_init+0x58>)
     bb8:	681b      	ldr	r3, [r3, #0]
     bba:	4a06      	ldr	r2, [pc, #24]	; (bd4 <sys_m4_cache_init+0x58>)
     bbc:	f043 0301 	orr.w	r3, r3, #1
     bc0:	6013      	str	r3, [r2, #0]
     bc2:	e002      	b.n	bca <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     bc4:	2301      	movs	r3, #1
     bc6:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     bca:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     bce:	4618      	mov	r0, r3
     bd0:	b004      	add	sp, #16
     bd2:	4770      	bx	lr
     bd4:	e0082000 	.word	0xe0082000

00000bd8 <startup_go_to_user_mode>:
}
     bd8:	bf00      	nop
     bda:	4770      	bx	lr

00000bdc <Sys_GetCoreID>:
    return 0U;
     bdc:	2300      	movs	r3, #0
}
     bde:	4618      	mov	r0, r3
     be0:	4770      	bx	lr

00000be2 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     be2:	e7fe      	b.n	be2 <HardFault_Handler>

00000be4 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     be4:	e7fe      	b.n	be4 <MemManage_Handler>

00000be6 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     be6:	e7fe      	b.n	be6 <BusFault_Handler>

00000be8 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     be8:	e7fe      	b.n	be8 <UsageFault_Handler>

00000bea <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     bea:	e7fe      	b.n	bea <SVC_Handler>

00000bec <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     bec:	e7fe      	b.n	bec <DebugMon_Handler>

00000bee <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     bee:	e7fe      	b.n	bee <PendSV_Handler>

00000bf0 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     bf0:	e7fe      	b.n	bf0 <SysTick_Handler>

00000bf2 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     bf2:	e7fe      	b.n	bf2 <undefined_handler>

00000bf4 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     bf4:	b086      	sub	sp, #24
     bf6:	9003      	str	r0, [sp, #12]
     bf8:	9102      	str	r1, [sp, #8]
     bfa:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
     bfc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     c00:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
     c04:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
     c06:	9b01      	ldr	r3, [sp, #4]
     c08:	2b00      	cmp	r3, #0
     c0a:	d007      	beq.n	c1c <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
     c0c:	9b03      	ldr	r3, [sp, #12]
     c0e:	3310      	adds	r3, #16
     c10:	009b      	lsls	r3, r3, #2
     c12:	9a05      	ldr	r2, [sp, #20]
     c14:	4413      	add	r3, r2
     c16:	681a      	ldr	r2, [r3, #0]
     c18:	9b01      	ldr	r3, [sp, #4]
     c1a:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
     c1c:	9b03      	ldr	r3, [sp, #12]
     c1e:	3310      	adds	r3, #16
     c20:	009b      	lsls	r3, r3, #2
     c22:	9a05      	ldr	r2, [sp, #20]
     c24:	4413      	add	r3, r2
     c26:	9a02      	ldr	r2, [sp, #8]
     c28:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
     c2a:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
     c2e:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
     c32:	bf00      	nop
     c34:	b006      	add	sp, #24
     c36:	4770      	bx	lr

00000c38 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
     c38:	b082      	sub	sp, #8
     c3a:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     c3c:	9b01      	ldr	r3, [sp, #4]
     c3e:	f003 021f 	and.w	r2, r3, #31
     c42:	4905      	ldr	r1, [pc, #20]	; (c58 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
     c44:	9b01      	ldr	r3, [sp, #4]
     c46:	095b      	lsrs	r3, r3, #5
     c48:	2001      	movs	r0, #1
     c4a:	fa00 f202 	lsl.w	r2, r0, r2
     c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
     c52:	bf00      	nop
     c54:	b002      	add	sp, #8
     c56:	4770      	bx	lr
     c58:	e000e100 	.word	0xe000e100

00000c5c <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
     c5c:	b082      	sub	sp, #8
     c5e:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     c60:	9b01      	ldr	r3, [sp, #4]
     c62:	f003 021f 	and.w	r2, r3, #31
     c66:	4906      	ldr	r1, [pc, #24]	; (c80 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
     c68:	9b01      	ldr	r3, [sp, #4]
     c6a:	095b      	lsrs	r3, r3, #5
     c6c:	2001      	movs	r0, #1
     c6e:	fa00 f202 	lsl.w	r2, r0, r2
     c72:	3320      	adds	r3, #32
     c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
     c78:	bf00      	nop
     c7a:	b002      	add	sp, #8
     c7c:	4770      	bx	lr
     c7e:	bf00      	nop
     c80:	e000e100 	.word	0xe000e100

00000c84 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     c84:	b084      	sub	sp, #16
     c86:	9001      	str	r0, [sp, #4]
     c88:	460b      	mov	r3, r1
     c8a:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
     c8e:	2304      	movs	r3, #4
     c90:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
     c94:	f89d 2003 	ldrb.w	r2, [sp, #3]
     c98:	f89d 300f 	ldrb.w	r3, [sp, #15]
     c9c:	fa02 f103 	lsl.w	r1, r2, r3
     ca0:	4a04      	ldr	r2, [pc, #16]	; (cb4 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
     ca2:	9b01      	ldr	r3, [sp, #4]
     ca4:	b2c9      	uxtb	r1, r1
     ca6:	4413      	add	r3, r2
     ca8:	460a      	mov	r2, r1
     caa:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
     cae:	bf00      	nop
     cb0:	b004      	add	sp, #16
     cb2:	4770      	bx	lr
     cb4:	e000e100 	.word	0xe000e100

00000cb8 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
     cb8:	b084      	sub	sp, #16
     cba:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
     cbc:	2304      	movs	r3, #4
     cbe:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
     cc2:	4a09      	ldr	r2, [pc, #36]	; (ce8 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
     cc4:	9b01      	ldr	r3, [sp, #4]
     cc6:	4413      	add	r3, r2
     cc8:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
     ccc:	b2db      	uxtb	r3, r3
     cce:	461a      	mov	r2, r3
     cd0:	f89d 300f 	ldrb.w	r3, [sp, #15]
     cd4:	fa42 f303 	asr.w	r3, r2, r3
     cd8:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
     cdc:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     ce0:	4618      	mov	r0, r3
     ce2:	b004      	add	sp, #16
     ce4:	4770      	bx	lr
     ce6:	bf00      	nop
     ce8:	e000e100 	.word	0xe000e100

00000cec <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
     cec:	b082      	sub	sp, #8
     cee:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     cf0:	9b01      	ldr	r3, [sp, #4]
     cf2:	f003 021f 	and.w	r2, r3, #31
     cf6:	4906      	ldr	r1, [pc, #24]	; (d10 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
     cf8:	9b01      	ldr	r3, [sp, #4]
     cfa:	095b      	lsrs	r3, r3, #5
     cfc:	2001      	movs	r0, #1
     cfe:	fa00 f202 	lsl.w	r2, r0, r2
     d02:	3360      	adds	r3, #96	; 0x60
     d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
     d08:	bf00      	nop
     d0a:	b002      	add	sp, #8
     d0c:	4770      	bx	lr
     d0e:	bf00      	nop
     d10:	e000e100 	.word	0xe000e100

00000d14 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
     d14:	b500      	push	{lr}
     d16:	b085      	sub	sp, #20
     d18:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     d1a:	2300      	movs	r3, #0
     d1c:	9303      	str	r3, [sp, #12]
     d1e:	e05d      	b.n	ddc <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     d20:	9b01      	ldr	r3, [sp, #4]
     d22:	6859      	ldr	r1, [r3, #4]
     d24:	9a03      	ldr	r2, [sp, #12]
     d26:	4613      	mov	r3, r2
     d28:	005b      	lsls	r3, r3, #1
     d2a:	4413      	add	r3, r2
     d2c:	009b      	lsls	r3, r3, #2
     d2e:	440b      	add	r3, r1
     d30:	681b      	ldr	r3, [r3, #0]
     d32:	4618      	mov	r0, r3
     d34:	f000 f899 	bl	e6a <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d38:	9b01      	ldr	r3, [sp, #4]
     d3a:	6859      	ldr	r1, [r3, #4]
     d3c:	9a03      	ldr	r2, [sp, #12]
     d3e:	4613      	mov	r3, r2
     d40:	005b      	lsls	r3, r3, #1
     d42:	4413      	add	r3, r2
     d44:	009b      	lsls	r3, r3, #2
     d46:	440b      	add	r3, r1
     d48:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
     d4a:	9b01      	ldr	r3, [sp, #4]
     d4c:	6859      	ldr	r1, [r3, #4]
     d4e:	9a03      	ldr	r2, [sp, #12]
     d50:	4613      	mov	r3, r2
     d52:	005b      	lsls	r3, r3, #1
     d54:	4413      	add	r3, r2
     d56:	009b      	lsls	r3, r3, #2
     d58:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d5a:	795b      	ldrb	r3, [r3, #5]
     d5c:	4619      	mov	r1, r3
     d5e:	f000 f869 	bl	e34 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d62:	9b01      	ldr	r3, [sp, #4]
     d64:	6859      	ldr	r1, [r3, #4]
     d66:	9a03      	ldr	r2, [sp, #12]
     d68:	4613      	mov	r3, r2
     d6a:	005b      	lsls	r3, r3, #1
     d6c:	4413      	add	r3, r2
     d6e:	009b      	lsls	r3, r3, #2
     d70:	440b      	add	r3, r1
     d72:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
     d74:	9b01      	ldr	r3, [sp, #4]
     d76:	6859      	ldr	r1, [r3, #4]
     d78:	9a03      	ldr	r2, [sp, #12]
     d7a:	4613      	mov	r3, r2
     d7c:	005b      	lsls	r3, r3, #1
     d7e:	4413      	add	r3, r2
     d80:	009b      	lsls	r3, r3, #2
     d82:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d84:	689b      	ldr	r3, [r3, #8]
     d86:	2200      	movs	r2, #0
     d88:	4619      	mov	r1, r3
     d8a:	f000 f831 	bl	df0 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
     d8e:	9b01      	ldr	r3, [sp, #4]
     d90:	6859      	ldr	r1, [r3, #4]
     d92:	9a03      	ldr	r2, [sp, #12]
     d94:	4613      	mov	r3, r2
     d96:	005b      	lsls	r3, r3, #1
     d98:	4413      	add	r3, r2
     d9a:	009b      	lsls	r3, r3, #2
     d9c:	440b      	add	r3, r1
     d9e:	791b      	ldrb	r3, [r3, #4]
     da0:	2b00      	cmp	r3, #0
     da2:	d00c      	beq.n	dbe <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     da4:	9b01      	ldr	r3, [sp, #4]
     da6:	6859      	ldr	r1, [r3, #4]
     da8:	9a03      	ldr	r2, [sp, #12]
     daa:	4613      	mov	r3, r2
     dac:	005b      	lsls	r3, r3, #1
     dae:	4413      	add	r3, r2
     db0:	009b      	lsls	r3, r3, #2
     db2:	440b      	add	r3, r1
     db4:	681b      	ldr	r3, [r3, #0]
     db6:	4618      	mov	r0, r3
     db8:	f000 f828 	bl	e0c <IntCtrl_Ip_EnableIrq>
     dbc:	e00b      	b.n	dd6 <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     dbe:	9b01      	ldr	r3, [sp, #4]
     dc0:	6859      	ldr	r1, [r3, #4]
     dc2:	9a03      	ldr	r2, [sp, #12]
     dc4:	4613      	mov	r3, r2
     dc6:	005b      	lsls	r3, r3, #1
     dc8:	4413      	add	r3, r2
     dca:	009b      	lsls	r3, r3, #2
     dcc:	440b      	add	r3, r1
     dce:	681b      	ldr	r3, [r3, #0]
     dd0:	4618      	mov	r0, r3
     dd2:	f000 f825 	bl	e20 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     dd6:	9b03      	ldr	r3, [sp, #12]
     dd8:	3301      	adds	r3, #1
     dda:	9303      	str	r3, [sp, #12]
     ddc:	9b01      	ldr	r3, [sp, #4]
     dde:	681b      	ldr	r3, [r3, #0]
     de0:	9a03      	ldr	r2, [sp, #12]
     de2:	429a      	cmp	r2, r3
     de4:	d39c      	bcc.n	d20 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
     de6:	2300      	movs	r3, #0
}
     de8:	4618      	mov	r0, r3
     dea:	b005      	add	sp, #20
     dec:	f85d fb04 	ldr.w	pc, [sp], #4

00000df0 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     df0:	b500      	push	{lr}
     df2:	b085      	sub	sp, #20
     df4:	9003      	str	r0, [sp, #12]
     df6:	9102      	str	r1, [sp, #8]
     df8:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
     dfa:	9a01      	ldr	r2, [sp, #4]
     dfc:	9902      	ldr	r1, [sp, #8]
     dfe:	9803      	ldr	r0, [sp, #12]
     e00:	f7ff fef8 	bl	bf4 <IntCtrl_Ip_InstallHandlerPrivileged>
}
     e04:	bf00      	nop
     e06:	b005      	add	sp, #20
     e08:	f85d fb04 	ldr.w	pc, [sp], #4

00000e0c <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
     e0c:	b500      	push	{lr}
     e0e:	b083      	sub	sp, #12
     e10:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
     e12:	9801      	ldr	r0, [sp, #4]
     e14:	f7ff ff10 	bl	c38 <IntCtrl_Ip_EnableIrqPrivileged>
}
     e18:	bf00      	nop
     e1a:	b003      	add	sp, #12
     e1c:	f85d fb04 	ldr.w	pc, [sp], #4

00000e20 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
     e20:	b500      	push	{lr}
     e22:	b083      	sub	sp, #12
     e24:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
     e26:	9801      	ldr	r0, [sp, #4]
     e28:	f7ff ff18 	bl	c5c <IntCtrl_Ip_DisableIrqPrivileged>
}
     e2c:	bf00      	nop
     e2e:	b003      	add	sp, #12
     e30:	f85d fb04 	ldr.w	pc, [sp], #4

00000e34 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     e34:	b500      	push	{lr}
     e36:	b083      	sub	sp, #12
     e38:	9001      	str	r0, [sp, #4]
     e3a:	460b      	mov	r3, r1
     e3c:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
     e40:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e44:	4619      	mov	r1, r3
     e46:	9801      	ldr	r0, [sp, #4]
     e48:	f7ff ff1c 	bl	c84 <IntCtrl_Ip_SetPriorityPrivileged>
}
     e4c:	bf00      	nop
     e4e:	b003      	add	sp, #12
     e50:	f85d fb04 	ldr.w	pc, [sp], #4

00000e54 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
     e54:	b500      	push	{lr}
     e56:	b083      	sub	sp, #12
     e58:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
     e5a:	9801      	ldr	r0, [sp, #4]
     e5c:	f7ff ff2c 	bl	cb8 <IntCtrl_Ip_GetPriorityPrivileged>
     e60:	4603      	mov	r3, r0
}
     e62:	4618      	mov	r0, r3
     e64:	b003      	add	sp, #12
     e66:	f85d fb04 	ldr.w	pc, [sp], #4

00000e6a <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
     e6a:	b500      	push	{lr}
     e6c:	b083      	sub	sp, #12
     e6e:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
     e70:	9801      	ldr	r0, [sp, #4]
     e72:	f7ff ff3b 	bl	cec <IntCtrl_Ip_ClearPendingPrivileged>
}
     e76:	bf00      	nop
     e78:	b003      	add	sp, #12
     e7a:	f85d fb04 	ldr.w	pc, [sp], #4
     e7e:	bf00      	nop

00000e80 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
     e80:	b500      	push	{lr}
     e82:	b083      	sub	sp, #12
     e84:	9001      	str	r0, [sp, #4]
     e86:	460b      	mov	r3, r1
     e88:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
     e8c:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e90:	2b00      	cmp	r3, #0
     e92:	d003      	beq.n	e9c <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
     e94:	9801      	ldr	r0, [sp, #4]
     e96:	f7ff ffb9 	bl	e0c <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
     e9a:	e002      	b.n	ea2 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
     e9c:	9801      	ldr	r0, [sp, #4]
     e9e:	f7ff ffbf 	bl	e20 <IntCtrl_Ip_DisableIrq>
}
     ea2:	bf00      	nop
     ea4:	b003      	add	sp, #12
     ea6:	f85d fb04 	ldr.w	pc, [sp], #4

00000eaa <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     eaa:	b500      	push	{lr}
     eac:	b083      	sub	sp, #12
     eae:	9001      	str	r0, [sp, #4]
     eb0:	460b      	mov	r3, r1
     eb2:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
     eb6:	f89d 3003 	ldrb.w	r3, [sp, #3]
     eba:	4619      	mov	r1, r3
     ebc:	9801      	ldr	r0, [sp, #4]
     ebe:	f7ff ffb9 	bl	e34 <IntCtrl_Ip_SetPriority>
}
     ec2:	bf00      	nop
     ec4:	b003      	add	sp, #12
     ec6:	f85d fb04 	ldr.w	pc, [sp], #4

00000eca <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
     eca:	b500      	push	{lr}
     ecc:	b083      	sub	sp, #12
     ece:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
     ed0:	9801      	ldr	r0, [sp, #4]
     ed2:	f7ff ffbf 	bl	e54 <IntCtrl_Ip_GetPriority>
     ed6:	4603      	mov	r3, r0
}
     ed8:	4618      	mov	r0, r3
     eda:	b003      	add	sp, #12
     edc:	f85d fb04 	ldr.w	pc, [sp], #4

00000ee0 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     ee0:	b500      	push	{lr}
     ee2:	b085      	sub	sp, #20
     ee4:	9003      	str	r0, [sp, #12]
     ee6:	9102      	str	r1, [sp, #8]
     ee8:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
     eea:	9a01      	ldr	r2, [sp, #4]
     eec:	9902      	ldr	r1, [sp, #8]
     eee:	9803      	ldr	r0, [sp, #12]
     ef0:	f7ff ff7e 	bl	df0 <IntCtrl_Ip_InstallHandler>
}
     ef4:	bf00      	nop
     ef6:	b005      	add	sp, #20
     ef8:	f85d fb04 	ldr.w	pc, [sp], #4

00000efc <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
     efc:	b500      	push	{lr}
     efe:	b085      	sub	sp, #20
     f00:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
     f02:	2300      	movs	r3, #0
     f04:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
     f08:	f89d 300f 	ldrb.w	r3, [sp, #15]
     f0c:	4a05      	ldr	r2, [pc, #20]	; (f24 <Platform_Init+0x28>)
     f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     f12:	681b      	ldr	r3, [r3, #0]
     f14:	4618      	mov	r0, r3
     f16:	f000 f8c7 	bl	10a8 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
     f1a:	bf00      	nop
     f1c:	b005      	add	sp, #20
     f1e:	f85d fb04 	ldr.w	pc, [sp], #4
     f22:	bf00      	nop
     f24:	0000c64c 	.word	0x0000c64c

00000f28 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
     f28:	b500      	push	{lr}
     f2a:	b085      	sub	sp, #20
     f2c:	9001      	str	r0, [sp, #4]
     f2e:	460b      	mov	r3, r1
     f30:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f34:	2300      	movs	r3, #0
     f36:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
     f3a:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f3e:	4619      	mov	r1, r3
     f40:	9801      	ldr	r0, [sp, #4]
     f42:	f7ff ff9d 	bl	e80 <Platform_Ipw_SetIrq>
    }
    return RetValue;
     f46:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f4a:	4618      	mov	r0, r3
     f4c:	b005      	add	sp, #20
     f4e:	f85d fb04 	ldr.w	pc, [sp], #4

00000f52 <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     f52:	b500      	push	{lr}
     f54:	b085      	sub	sp, #20
     f56:	9001      	str	r0, [sp, #4]
     f58:	460b      	mov	r3, r1
     f5a:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f5e:	2300      	movs	r3, #0
     f60:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
     f64:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f68:	4619      	mov	r1, r3
     f6a:	9801      	ldr	r0, [sp, #4]
     f6c:	f7ff ff9d 	bl	eaa <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
     f70:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f74:	4618      	mov	r0, r3
     f76:	b005      	add	sp, #20
     f78:	f85d fb04 	ldr.w	pc, [sp], #4

00000f7c <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
     f7c:	b500      	push	{lr}
     f7e:	b085      	sub	sp, #20
     f80:	9001      	str	r0, [sp, #4]
     f82:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f84:	2300      	movs	r3, #0
     f86:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
     f8a:	9801      	ldr	r0, [sp, #4]
     f8c:	f7ff ff9d 	bl	eca <Platform_Ipw_GetIrqPriority>
     f90:	4603      	mov	r3, r0
     f92:	461a      	mov	r2, r3
     f94:	9b00      	ldr	r3, [sp, #0]
     f96:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
     f98:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f9c:	4618      	mov	r0, r3
     f9e:	b005      	add	sp, #20
     fa0:	f85d fb04 	ldr.w	pc, [sp], #4

00000fa4 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
     fa4:	b500      	push	{lr}
     fa6:	b087      	sub	sp, #28
     fa8:	9003      	str	r0, [sp, #12]
     faa:	9102      	str	r1, [sp, #8]
     fac:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     fae:	2300      	movs	r3, #0
     fb0:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
     fb4:	9a01      	ldr	r2, [sp, #4]
     fb6:	9902      	ldr	r1, [sp, #8]
     fb8:	9803      	ldr	r0, [sp, #12]
     fba:	f7ff ff91 	bl	ee0 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
     fbe:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
     fc2:	4618      	mov	r0, r3
     fc4:	b007      	add	sp, #28
     fc6:	f85d fb04 	ldr.w	pc, [sp], #4
     fca:	bf00      	nop

00000fcc <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
     fcc:	b500      	push	{lr}
     fce:	b085      	sub	sp, #20
     fd0:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     fd2:	2300      	movs	r3, #0
     fd4:	9303      	str	r3, [sp, #12]
     fd6:	e05d      	b.n	1094 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     fd8:	9b01      	ldr	r3, [sp, #4]
     fda:	6859      	ldr	r1, [r3, #4]
     fdc:	9a03      	ldr	r2, [sp, #12]
     fde:	4613      	mov	r3, r2
     fe0:	005b      	lsls	r3, r3, #1
     fe2:	4413      	add	r3, r2
     fe4:	009b      	lsls	r3, r3, #2
     fe6:	440b      	add	r3, r1
     fe8:	681b      	ldr	r3, [r3, #0]
     fea:	4618      	mov	r0, r3
     fec:	f7ff ff3d 	bl	e6a <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     ff0:	9b01      	ldr	r3, [sp, #4]
     ff2:	6859      	ldr	r1, [r3, #4]
     ff4:	9a03      	ldr	r2, [sp, #12]
     ff6:	4613      	mov	r3, r2
     ff8:	005b      	lsls	r3, r3, #1
     ffa:	4413      	add	r3, r2
     ffc:	009b      	lsls	r3, r3, #2
     ffe:	440b      	add	r3, r1
    1000:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1002:	9b01      	ldr	r3, [sp, #4]
    1004:	6859      	ldr	r1, [r3, #4]
    1006:	9a03      	ldr	r2, [sp, #12]
    1008:	4613      	mov	r3, r2
    100a:	005b      	lsls	r3, r3, #1
    100c:	4413      	add	r3, r2
    100e:	009b      	lsls	r3, r3, #2
    1010:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1012:	795b      	ldrb	r3, [r3, #5]
    1014:	4619      	mov	r1, r3
    1016:	f7ff ff0d 	bl	e34 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    101a:	9b01      	ldr	r3, [sp, #4]
    101c:	6859      	ldr	r1, [r3, #4]
    101e:	9a03      	ldr	r2, [sp, #12]
    1020:	4613      	mov	r3, r2
    1022:	005b      	lsls	r3, r3, #1
    1024:	4413      	add	r3, r2
    1026:	009b      	lsls	r3, r3, #2
    1028:	440b      	add	r3, r1
    102a:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    102c:	9b01      	ldr	r3, [sp, #4]
    102e:	6859      	ldr	r1, [r3, #4]
    1030:	9a03      	ldr	r2, [sp, #12]
    1032:	4613      	mov	r3, r2
    1034:	005b      	lsls	r3, r3, #1
    1036:	4413      	add	r3, r2
    1038:	009b      	lsls	r3, r3, #2
    103a:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    103c:	689b      	ldr	r3, [r3, #8]
    103e:	2200      	movs	r2, #0
    1040:	4619      	mov	r1, r3
    1042:	f7ff fed5 	bl	df0 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1046:	9b01      	ldr	r3, [sp, #4]
    1048:	6859      	ldr	r1, [r3, #4]
    104a:	9a03      	ldr	r2, [sp, #12]
    104c:	4613      	mov	r3, r2
    104e:	005b      	lsls	r3, r3, #1
    1050:	4413      	add	r3, r2
    1052:	009b      	lsls	r3, r3, #2
    1054:	440b      	add	r3, r1
    1056:	791b      	ldrb	r3, [r3, #4]
    1058:	2b00      	cmp	r3, #0
    105a:	d00c      	beq.n	1076 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    105c:	9b01      	ldr	r3, [sp, #4]
    105e:	6859      	ldr	r1, [r3, #4]
    1060:	9a03      	ldr	r2, [sp, #12]
    1062:	4613      	mov	r3, r2
    1064:	005b      	lsls	r3, r3, #1
    1066:	4413      	add	r3, r2
    1068:	009b      	lsls	r3, r3, #2
    106a:	440b      	add	r3, r1
    106c:	681b      	ldr	r3, [r3, #0]
    106e:	4618      	mov	r0, r3
    1070:	f7ff fecc 	bl	e0c <IntCtrl_Ip_EnableIrq>
    1074:	e00b      	b.n	108e <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1076:	9b01      	ldr	r3, [sp, #4]
    1078:	6859      	ldr	r1, [r3, #4]
    107a:	9a03      	ldr	r2, [sp, #12]
    107c:	4613      	mov	r3, r2
    107e:	005b      	lsls	r3, r3, #1
    1080:	4413      	add	r3, r2
    1082:	009b      	lsls	r3, r3, #2
    1084:	440b      	add	r3, r1
    1086:	681b      	ldr	r3, [r3, #0]
    1088:	4618      	mov	r0, r3
    108a:	f7ff fec9 	bl	e20 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    108e:	9b03      	ldr	r3, [sp, #12]
    1090:	3301      	adds	r3, #1
    1092:	9303      	str	r3, [sp, #12]
    1094:	9b01      	ldr	r3, [sp, #4]
    1096:	681b      	ldr	r3, [r3, #0]
    1098:	9a03      	ldr	r2, [sp, #12]
    109a:	429a      	cmp	r2, r3
    109c:	d39c      	bcc.n	fd8 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    109e:	2300      	movs	r3, #0
}
    10a0:	4618      	mov	r0, r3
    10a2:	b005      	add	sp, #20
    10a4:	f85d fb04 	ldr.w	pc, [sp], #4

000010a8 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    10a8:	b500      	push	{lr}
    10aa:	b085      	sub	sp, #20
    10ac:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    10ae:	2300      	movs	r3, #0
    10b0:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    10b4:	9b01      	ldr	r3, [sp, #4]
    10b6:	681b      	ldr	r3, [r3, #0]
    10b8:	2b00      	cmp	r3, #0
    10ba:	d007      	beq.n	10cc <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    10bc:	9b01      	ldr	r3, [sp, #4]
    10be:	681b      	ldr	r3, [r3, #0]
    10c0:	4618      	mov	r0, r3
    10c2:	f7ff ff83 	bl	fcc <Platform_Ipw_InitIntCtrl>
    10c6:	4603      	mov	r3, r0
    10c8:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    10cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    10d0:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    10d2:	bf00      	nop
    10d4:	b005      	add	sp, #20
    10d6:	f85d fb04 	ldr.w	pc, [sp], #4

000010da <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    10da:	2300      	movs	r3, #0
}
    10dc:	4618      	mov	r0, r3
    10de:	4770      	bx	lr

000010e0 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    10e0:	b082      	sub	sp, #8
    10e2:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    10e4:	2301      	movs	r3, #1
}
    10e6:	4618      	mov	r0, r3
    10e8:	b002      	add	sp, #8
    10ea:	4770      	bx	lr

000010ec <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    10ec:	b082      	sub	sp, #8
    10ee:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    10f0:	bf00      	nop
    10f2:	b002      	add	sp, #8
    10f4:	4770      	bx	lr

000010f6 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    10f6:	b082      	sub	sp, #8
    10f8:	9001      	str	r0, [sp, #4]
    return Micros;
    10fa:	9b01      	ldr	r3, [sp, #4]
}
    10fc:	4618      	mov	r0, r3
    10fe:	b002      	add	sp, #8
    1100:	4770      	bx	lr

00001102 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1102:	b500      	push	{lr}
    1104:	b083      	sub	sp, #12
    1106:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1108:	f000 f86c 	bl	11e4 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    110c:	bf00      	nop
    110e:	b003      	add	sp, #12
    1110:	f85d fb04 	ldr.w	pc, [sp], #4

00001114 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1114:	b500      	push	{lr}
    1116:	b085      	sub	sp, #20
    1118:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    111a:	2300      	movs	r3, #0
    111c:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    111e:	9b01      	ldr	r3, [sp, #4]
    1120:	2b00      	cmp	r3, #0
    1122:	d003      	beq.n	112c <OsIf_GetCounter+0x18>
    1124:	9b01      	ldr	r3, [sp, #4]
    1126:	2b01      	cmp	r3, #1
    1128:	d004      	beq.n	1134 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    112a:	e007      	b.n	113c <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    112c:	f7ff ffd5 	bl	10da <OsIf_Timer_Dummy_GetCounter>
    1130:	9003      	str	r0, [sp, #12]
            break;
    1132:	e003      	b.n	113c <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1134:	f000 f872 	bl	121c <OsIf_Timer_System_GetCounter>
    1138:	9003      	str	r0, [sp, #12]
            break;
    113a:	bf00      	nop
    }

    return Value;
    113c:	9b03      	ldr	r3, [sp, #12]
}
    113e:	4618      	mov	r0, r3
    1140:	b005      	add	sp, #20
    1142:	f85d fb04 	ldr.w	pc, [sp], #4

00001146 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1146:	b500      	push	{lr}
    1148:	b085      	sub	sp, #20
    114a:	9001      	str	r0, [sp, #4]
    114c:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    114e:	2300      	movs	r3, #0
    1150:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1152:	9b00      	ldr	r3, [sp, #0]
    1154:	2b00      	cmp	r3, #0
    1156:	d003      	beq.n	1160 <OsIf_GetElapsed+0x1a>
    1158:	9b00      	ldr	r3, [sp, #0]
    115a:	2b01      	cmp	r3, #1
    115c:	d005      	beq.n	116a <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    115e:	e009      	b.n	1174 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1160:	9801      	ldr	r0, [sp, #4]
    1162:	f7ff ffbd 	bl	10e0 <OsIf_Timer_Dummy_GetElapsed>
    1166:	9003      	str	r0, [sp, #12]
            break;
    1168:	e004      	b.n	1174 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    116a:	9801      	ldr	r0, [sp, #4]
    116c:	f000 f864 	bl	1238 <OsIf_Timer_System_GetElapsed>
    1170:	9003      	str	r0, [sp, #12]
            break;
    1172:	bf00      	nop
    }

    return Value;
    1174:	9b03      	ldr	r3, [sp, #12]
}
    1176:	4618      	mov	r0, r3
    1178:	b005      	add	sp, #20
    117a:	f85d fb04 	ldr.w	pc, [sp], #4

0000117e <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    117e:	b500      	push	{lr}
    1180:	b083      	sub	sp, #12
    1182:	9001      	str	r0, [sp, #4]
    1184:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1186:	9b00      	ldr	r3, [sp, #0]
    1188:	2b00      	cmp	r3, #0
    118a:	d003      	beq.n	1194 <OsIf_SetTimerFrequency+0x16>
    118c:	9b00      	ldr	r3, [sp, #0]
    118e:	2b01      	cmp	r3, #1
    1190:	d004      	beq.n	119c <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1192:	e007      	b.n	11a4 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1194:	9801      	ldr	r0, [sp, #4]
    1196:	f7ff ffa9 	bl	10ec <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    119a:	e003      	b.n	11a4 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    119c:	9801      	ldr	r0, [sp, #4]
    119e:	f000 f85b 	bl	1258 <OsIf_Timer_System_SetTimerFrequency>
            break;
    11a2:	bf00      	nop
    }
}
    11a4:	bf00      	nop
    11a6:	b003      	add	sp, #12
    11a8:	f85d fb04 	ldr.w	pc, [sp], #4

000011ac <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    11ac:	b500      	push	{lr}
    11ae:	b085      	sub	sp, #20
    11b0:	9001      	str	r0, [sp, #4]
    11b2:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    11b4:	2300      	movs	r3, #0
    11b6:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    11b8:	9b00      	ldr	r3, [sp, #0]
    11ba:	2b00      	cmp	r3, #0
    11bc:	d003      	beq.n	11c6 <OsIf_MicrosToTicks+0x1a>
    11be:	9b00      	ldr	r3, [sp, #0]
    11c0:	2b01      	cmp	r3, #1
    11c2:	d005      	beq.n	11d0 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    11c4:	e009      	b.n	11da <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    11c6:	9801      	ldr	r0, [sp, #4]
    11c8:	f7ff ff95 	bl	10f6 <OsIf_Timer_Dummy_MicrosToTicks>
    11cc:	9003      	str	r0, [sp, #12]
            break;
    11ce:	e004      	b.n	11da <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    11d0:	9801      	ldr	r0, [sp, #4]
    11d2:	f000 f84f 	bl	1274 <OsIf_Timer_System_MicrosToTicks>
    11d6:	9003      	str	r0, [sp, #12]
            break;
    11d8:	bf00      	nop
    }

    return Value;
    11da:	9b03      	ldr	r3, [sp, #12]
}
    11dc:	4618      	mov	r0, r3
    11de:	b005      	add	sp, #20
    11e0:	f85d fb04 	ldr.w	pc, [sp], #4

000011e4 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    11e4:	b500      	push	{lr}
    11e6:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    11e8:	2300      	movs	r3, #0
    11ea:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    11ec:	4a09      	ldr	r2, [pc, #36]	; (1214 <OsIf_Timer_System_Init+0x30>)
    11ee:	9b01      	ldr	r3, [sp, #4]
    11f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    11f4:	685a      	ldr	r2, [r3, #4]
    11f6:	4908      	ldr	r1, [pc, #32]	; (1218 <OsIf_Timer_System_Init+0x34>)
    11f8:	9b01      	ldr	r3, [sp, #4]
    11fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    11fe:	4a06      	ldr	r2, [pc, #24]	; (1218 <OsIf_Timer_System_Init+0x34>)
    1200:	9b01      	ldr	r3, [sp, #4]
    1202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1206:	4618      	mov	r0, r3
    1208:	f000 f868 	bl	12dc <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    120c:	bf00      	nop
    120e:	b003      	add	sp, #12
    1210:	f85d fb04 	ldr.w	pc, [sp], #4
    1214:	0000c644 	.word	0x0000c644
    1218:	1fff8bb0 	.word	0x1fff8bb0

0000121c <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    121c:	b500      	push	{lr}
    121e:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1220:	2300      	movs	r3, #0
    1222:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1224:	2300      	movs	r3, #0
    1226:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1228:	f000 f86c 	bl	1304 <OsIf_Timer_System_Internal_GetCounter>
    122c:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    122e:	9b01      	ldr	r3, [sp, #4]
}
    1230:	4618      	mov	r0, r3
    1232:	b003      	add	sp, #12
    1234:	f85d fb04 	ldr.w	pc, [sp], #4

00001238 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1238:	b500      	push	{lr}
    123a:	b085      	sub	sp, #20
    123c:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    123e:	2300      	movs	r3, #0
    1240:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1242:	2300      	movs	r3, #0
    1244:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1246:	9801      	ldr	r0, [sp, #4]
    1248:	f000 f864 	bl	1314 <OsIf_Timer_System_Internal_GetElapsed>
    124c:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    124e:	9b03      	ldr	r3, [sp, #12]
}
    1250:	4618      	mov	r0, r3
    1252:	b005      	add	sp, #20
    1254:	f85d fb04 	ldr.w	pc, [sp], #4

00001258 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1258:	b084      	sub	sp, #16
    125a:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    125c:	2300      	movs	r3, #0
    125e:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1260:	4903      	ldr	r1, [pc, #12]	; (1270 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1262:	9b03      	ldr	r3, [sp, #12]
    1264:	9a01      	ldr	r2, [sp, #4]
    1266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    126a:	bf00      	nop
    126c:	b004      	add	sp, #16
    126e:	4770      	bx	lr
    1270:	1fff8bb0 	.word	0x1fff8bb0

00001274 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1274:	b5f0      	push	{r4, r5, r6, r7, lr}
    1276:	b087      	sub	sp, #28
    1278:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    127a:	2100      	movs	r1, #0
    127c:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    127e:	2100      	movs	r1, #0
    1280:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1282:	9901      	ldr	r1, [sp, #4]
    1284:	2000      	movs	r0, #0
    1286:	460e      	mov	r6, r1
    1288:	4607      	mov	r7, r0
    128a:	4812      	ldr	r0, [pc, #72]	; (12d4 <OsIf_Timer_System_MicrosToTicks+0x60>)
    128c:	9904      	ldr	r1, [sp, #16]
    128e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1292:	2000      	movs	r0, #0
    1294:	460c      	mov	r4, r1
    1296:	4605      	mov	r5, r0
    1298:	fb04 f007 	mul.w	r0, r4, r7
    129c:	fb06 f105 	mul.w	r1, r6, r5
    12a0:	4401      	add	r1, r0
    12a2:	fba6 2304 	umull	r2, r3, r6, r4
    12a6:	4419      	add	r1, r3
    12a8:	460b      	mov	r3, r1
    12aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    12ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    12b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    12b6:	4a08      	ldr	r2, [pc, #32]	; (12d8 <OsIf_Timer_System_MicrosToTicks+0x64>)
    12b8:	f04f 0300 	mov.w	r3, #0
    12bc:	f7ff f972 	bl	5a4 <__aeabi_uldivmod>
    12c0:	4602      	mov	r2, r0
    12c2:	460b      	mov	r3, r1
    12c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    12c8:	9b02      	ldr	r3, [sp, #8]
    12ca:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    12cc:	9b05      	ldr	r3, [sp, #20]
}
    12ce:	4618      	mov	r0, r3
    12d0:	b007      	add	sp, #28
    12d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12d4:	1fff8bb0 	.word	0x1fff8bb0
    12d8:	000f4240 	.word	0x000f4240

000012dc <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    12dc:	b082      	sub	sp, #8
    12de:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    12e0:	4b07      	ldr	r3, [pc, #28]	; (1300 <OsIf_Timer_System_Internal_Init+0x24>)
    12e2:	2200      	movs	r2, #0
    12e4:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    12e6:	4b06      	ldr	r3, [pc, #24]	; (1300 <OsIf_Timer_System_Internal_Init+0x24>)
    12e8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    12ec:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    12ee:	4b04      	ldr	r3, [pc, #16]	; (1300 <OsIf_Timer_System_Internal_Init+0x24>)
    12f0:	2200      	movs	r2, #0
    12f2:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    12f4:	4b02      	ldr	r3, [pc, #8]	; (1300 <OsIf_Timer_System_Internal_Init+0x24>)
    12f6:	2205      	movs	r2, #5
    12f8:	601a      	str	r2, [r3, #0]
}
    12fa:	bf00      	nop
    12fc:	b002      	add	sp, #8
    12fe:	4770      	bx	lr
    1300:	e000e010 	.word	0xe000e010

00001304 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1304:	4b02      	ldr	r3, [pc, #8]	; (1310 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1306:	689b      	ldr	r3, [r3, #8]
    1308:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    130c:	4618      	mov	r0, r3
    130e:	4770      	bx	lr
    1310:	e000e010 	.word	0xe000e010

00001314 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1314:	b084      	sub	sp, #16
    1316:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1318:	4b10      	ldr	r3, [pc, #64]	; (135c <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    131a:	689b      	ldr	r3, [r3, #8]
    131c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1320:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1322:	2300      	movs	r3, #0
    1324:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1326:	9b01      	ldr	r3, [sp, #4]
    1328:	681b      	ldr	r3, [r3, #0]
    132a:	9a02      	ldr	r2, [sp, #8]
    132c:	429a      	cmp	r2, r3
    132e:	d909      	bls.n	1344 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1330:	9b01      	ldr	r3, [sp, #4]
    1332:	681a      	ldr	r2, [r3, #0]
    1334:	9b02      	ldr	r3, [sp, #8]
    1336:	1ad3      	subs	r3, r2, r3
    1338:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    133c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1340:	9303      	str	r3, [sp, #12]
    1342:	e004      	b.n	134e <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1344:	9b01      	ldr	r3, [sp, #4]
    1346:	681a      	ldr	r2, [r3, #0]
    1348:	9b02      	ldr	r3, [sp, #8]
    134a:	1ad3      	subs	r3, r2, r3
    134c:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    134e:	9b01      	ldr	r3, [sp, #4]
    1350:	9a02      	ldr	r2, [sp, #8]
    1352:	601a      	str	r2, [r3, #0]

    return dif;
    1354:	9b03      	ldr	r3, [sp, #12]
}
    1356:	4618      	mov	r0, r3
    1358:	b004      	add	sp, #16
    135a:	4770      	bx	lr
    135c:	e000e010 	.word	0xe000e010

00001360 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1360:	b082      	sub	sp, #8
    1362:	9001      	str	r0, [sp, #4]
    1364:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1366:	bf00      	nop
    1368:	b002      	add	sp, #8
    136a:	4770      	bx	lr

0000136c <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    136c:	b500      	push	{lr}
    136e:	b085      	sub	sp, #20
    1370:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1372:	4b24      	ldr	r3, [pc, #144]	; (1404 <Clock_Ip_UpdateDriverContext+0x98>)
    1374:	2201      	movs	r2, #1
    1376:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1378:	4b23      	ldr	r3, [pc, #140]	; (1408 <Clock_Ip_UpdateDriverContext+0x9c>)
    137a:	681b      	ldr	r3, [r3, #0]
    137c:	2102      	movs	r1, #2
    137e:	4618      	mov	r0, r3
    1380:	f003 fc32 	bl	4be8 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1384:	2300      	movs	r3, #0
    1386:	f88d 300f 	strb.w	r3, [sp, #15]
    138a:	e015      	b.n	13b8 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    138c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1390:	9a01      	ldr	r2, [sp, #4]
    1392:	334a      	adds	r3, #74	; 0x4a
    1394:	00db      	lsls	r3, r3, #3
    1396:	4413      	add	r3, r2
    1398:	6858      	ldr	r0, [r3, #4]
    139a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    139e:	9a01      	ldr	r2, [sp, #4]
    13a0:	334a      	adds	r3, #74	; 0x4a
    13a2:	00db      	lsls	r3, r3, #3
    13a4:	4413      	add	r3, r2
    13a6:	689b      	ldr	r3, [r3, #8]
    13a8:	4619      	mov	r1, r3
    13aa:	f001 fadc 	bl	2966 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    13ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13b2:	3301      	adds	r3, #1
    13b4:	f88d 300f 	strb.w	r3, [sp, #15]
    13b8:	9b01      	ldr	r3, [sp, #4]
    13ba:	7bdb      	ldrb	r3, [r3, #15]
    13bc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13c0:	429a      	cmp	r2, r3
    13c2:	d3e3      	bcc.n	138c <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    13c4:	f000 f824 	bl	1410 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    13c8:	2301      	movs	r3, #1
    13ca:	f88d 300f 	strb.w	r3, [sp, #15]
    13ce:	e00e      	b.n	13ee <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    13d0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13d4:	9b01      	ldr	r3, [sp, #4]
    13d6:	327e      	adds	r2, #126	; 0x7e
    13d8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    13dc:	490b      	ldr	r1, [pc, #44]	; (140c <Clock_Ip_UpdateDriverContext+0xa0>)
    13de:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13e2:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    13e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13e8:	3301      	adds	r3, #1
    13ea:	f88d 300f 	strb.w	r3, [sp, #15]
    13ee:	9b01      	ldr	r3, [sp, #4]
    13f0:	7cdb      	ldrb	r3, [r3, #19]
    13f2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13f6:	429a      	cmp	r2, r3
    13f8:	d3ea      	bcc.n	13d0 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    13fa:	bf00      	nop
    13fc:	bf00      	nop
    13fe:	b005      	add	sp, #20
    1400:	f85d fb04 	ldr.w	pc, [sp], #4
    1404:	1fff8b10 	.word	0x1fff8b10
    1408:	1fff8bb4 	.word	0x1fff8bb4
    140c:	1fff8bc0 	.word	0x1fff8bc0

00001410 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1410:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1412:	4b23      	ldr	r3, [pc, #140]	; (14a0 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1414:	781b      	ldrb	r3, [r3, #0]
    1416:	f083 0301 	eor.w	r3, r3, #1
    141a:	b2db      	uxtb	r3, r3
    141c:	2b00      	cmp	r3, #0
    141e:	d03d      	beq.n	149c <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1420:	4b1f      	ldr	r3, [pc, #124]	; (14a0 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1422:	2201      	movs	r2, #1
    1424:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1426:	4b1f      	ldr	r3, [pc, #124]	; (14a4 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1428:	685b      	ldr	r3, [r3, #4]
    142a:	2100      	movs	r1, #0
    142c:	2000      	movs	r0, #0
    142e:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1430:	4b1c      	ldr	r3, [pc, #112]	; (14a4 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1432:	689b      	ldr	r3, [r3, #8]
    1434:	2057      	movs	r0, #87	; 0x57
    1436:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1438:	4b1b      	ldr	r3, [pc, #108]	; (14a8 <Clock_Ip_CallEmptyCallbacks+0x98>)
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	2000      	movs	r0, #0
    143e:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1440:	4b1a      	ldr	r3, [pc, #104]	; (14ac <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1442:	681b      	ldr	r3, [r3, #0]
    1444:	2000      	movs	r0, #0
    1446:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1448:	4b19      	ldr	r3, [pc, #100]	; (14b0 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    144a:	681b      	ldr	r3, [r3, #0]
    144c:	2000      	movs	r0, #0
    144e:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1450:	4b18      	ldr	r3, [pc, #96]	; (14b4 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1452:	685b      	ldr	r3, [r3, #4]
    1454:	2000      	movs	r0, #0
    1456:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1458:	4b16      	ldr	r3, [pc, #88]	; (14b4 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    145a:	689b      	ldr	r3, [r3, #8]
    145c:	2057      	movs	r0, #87	; 0x57
    145e:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1460:	4b15      	ldr	r3, [pc, #84]	; (14b8 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1462:	681b      	ldr	r3, [r3, #0]
    1464:	2000      	movs	r0, #0
    1466:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1468:	4b13      	ldr	r3, [pc, #76]	; (14b8 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    146a:	685b      	ldr	r3, [r3, #4]
    146c:	2100      	movs	r1, #0
    146e:	2057      	movs	r0, #87	; 0x57
    1470:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1472:	4b12      	ldr	r3, [pc, #72]	; (14bc <Clock_Ip_CallEmptyCallbacks+0xac>)
    1474:	681b      	ldr	r3, [r3, #0]
    1476:	2000      	movs	r0, #0
    1478:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    147a:	4b11      	ldr	r3, [pc, #68]	; (14c0 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    147c:	685b      	ldr	r3, [r3, #4]
    147e:	2000      	movs	r0, #0
    1480:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1482:	4b0f      	ldr	r3, [pc, #60]	; (14c0 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1484:	689b      	ldr	r3, [r3, #8]
    1486:	2057      	movs	r0, #87	; 0x57
    1488:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    148a:	4b0e      	ldr	r3, [pc, #56]	; (14c4 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    148c:	685b      	ldr	r3, [r3, #4]
    148e:	2000      	movs	r0, #0
    1490:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1492:	4b0d      	ldr	r3, [pc, #52]	; (14c8 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1494:	681b      	ldr	r3, [r3, #0]
    1496:	2100      	movs	r1, #0
    1498:	2000      	movs	r0, #0
    149a:	4798      	blx	r3
    }
}
    149c:	bf00      	nop
    149e:	bd08      	pop	{r3, pc}
    14a0:	1fff8bb8 	.word	0x1fff8bb8
    14a4:	0000c004 	.word	0x0000c004
    14a8:	0000bf18 	.word	0x0000bf18
    14ac:	0000bf54 	.word	0x0000bf54
    14b0:	0000bf5c 	.word	0x0000bf5c
    14b4:	0000bf84 	.word	0x0000bf84
    14b8:	0000bf90 	.word	0x0000bf90
    14bc:	0000bfc8 	.word	0x0000bfc8
    14c0:	0000c014 	.word	0x0000c014
    14c4:	0000c040 	.word	0x0000c040
    14c8:	0000c03c 	.word	0x0000c03c

000014cc <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    14cc:	b500      	push	{lr}
    14ce:	b085      	sub	sp, #20
    14d0:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    14d2:	9b01      	ldr	r3, [sp, #4]
    14d4:	7adb      	ldrb	r3, [r3, #11]
    14d6:	9303      	str	r3, [sp, #12]
    14d8:	e01f      	b.n	151a <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    14da:	9b03      	ldr	r3, [sp, #12]
    14dc:	1e5a      	subs	r2, r3, #1
    14de:	9b01      	ldr	r3, [sp, #4]
    14e0:	320d      	adds	r2, #13
    14e2:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    14e6:	495a      	ldr	r1, [pc, #360]	; (1650 <Clock_Ip_ResetClockConfiguration+0x184>)
    14e8:	4613      	mov	r3, r2
    14ea:	00db      	lsls	r3, r3, #3
    14ec:	4413      	add	r3, r2
    14ee:	440b      	add	r3, r1
    14f0:	3301      	adds	r3, #1
    14f2:	781b      	ldrb	r3, [r3, #0]
    14f4:	461a      	mov	r2, r3
    14f6:	4b57      	ldr	r3, [pc, #348]	; (1654 <Clock_Ip_ResetClockConfiguration+0x188>)
    14f8:	5c9b      	ldrb	r3, [r3, r2]
    14fa:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    14fc:	4a56      	ldr	r2, [pc, #344]	; (1658 <Clock_Ip_ResetClockConfiguration+0x18c>)
    14fe:	9b02      	ldr	r3, [sp, #8]
    1500:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1504:	9a03      	ldr	r2, [sp, #12]
    1506:	3a01      	subs	r2, #1
    1508:	320d      	adds	r2, #13
    150a:	00d2      	lsls	r2, r2, #3
    150c:	9901      	ldr	r1, [sp, #4]
    150e:	440a      	add	r2, r1
    1510:	4610      	mov	r0, r2
    1512:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1514:	9b03      	ldr	r3, [sp, #12]
    1516:	3b01      	subs	r3, #1
    1518:	9303      	str	r3, [sp, #12]
    151a:	9b03      	ldr	r3, [sp, #12]
    151c:	2b00      	cmp	r3, #0
    151e:	d1dc      	bne.n	14da <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1520:	9b01      	ldr	r3, [sp, #4]
    1522:	7b9b      	ldrb	r3, [r3, #14]
    1524:	9303      	str	r3, [sp, #12]
    1526:	e026      	b.n	1576 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1528:	9b03      	ldr	r3, [sp, #12]
    152a:	3b01      	subs	r3, #1
    152c:	9a01      	ldr	r2, [sp, #4]
    152e:	3324      	adds	r3, #36	; 0x24
    1530:	011b      	lsls	r3, r3, #4
    1532:	4413      	add	r3, r2
    1534:	3304      	adds	r3, #4
    1536:	681a      	ldr	r2, [r3, #0]
    1538:	4945      	ldr	r1, [pc, #276]	; (1650 <Clock_Ip_ResetClockConfiguration+0x184>)
    153a:	4613      	mov	r3, r2
    153c:	00db      	lsls	r3, r3, #3
    153e:	4413      	add	r3, r2
    1540:	440b      	add	r3, r1
    1542:	3301      	adds	r3, #1
    1544:	781b      	ldrb	r3, [r3, #0]
    1546:	461a      	mov	r2, r3
    1548:	4b44      	ldr	r3, [pc, #272]	; (165c <Clock_Ip_ResetClockConfiguration+0x190>)
    154a:	5c9b      	ldrb	r3, [r3, r2]
    154c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    154e:	4944      	ldr	r1, [pc, #272]	; (1660 <Clock_Ip_ResetClockConfiguration+0x194>)
    1550:	9a02      	ldr	r2, [sp, #8]
    1552:	4613      	mov	r3, r2
    1554:	005b      	lsls	r3, r3, #1
    1556:	4413      	add	r3, r2
    1558:	009b      	lsls	r3, r3, #2
    155a:	440b      	add	r3, r1
    155c:	681b      	ldr	r3, [r3, #0]
    155e:	9a03      	ldr	r2, [sp, #12]
    1560:	3a01      	subs	r2, #1
    1562:	3224      	adds	r2, #36	; 0x24
    1564:	0112      	lsls	r2, r2, #4
    1566:	9901      	ldr	r1, [sp, #4]
    1568:	440a      	add	r2, r1
    156a:	3204      	adds	r2, #4
    156c:	4610      	mov	r0, r2
    156e:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1570:	9b03      	ldr	r3, [sp, #12]
    1572:	3b01      	subs	r3, #1
    1574:	9303      	str	r3, [sp, #12]
    1576:	9b03      	ldr	r3, [sp, #12]
    1578:	2b00      	cmp	r3, #0
    157a:	d1d5      	bne.n	1528 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    157c:	9b01      	ldr	r3, [sp, #4]
    157e:	7a9b      	ldrb	r3, [r3, #10]
    1580:	9303      	str	r3, [sp, #12]
    1582:	e02a      	b.n	15da <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1584:	9b03      	ldr	r3, [sp, #12]
    1586:	1e5a      	subs	r2, r3, #1
    1588:	9901      	ldr	r1, [sp, #4]
    158a:	4613      	mov	r3, r2
    158c:	009b      	lsls	r3, r3, #2
    158e:	4413      	add	r3, r2
    1590:	00db      	lsls	r3, r3, #3
    1592:	440b      	add	r3, r1
    1594:	3340      	adds	r3, #64	; 0x40
    1596:	681a      	ldr	r2, [r3, #0]
    1598:	492d      	ldr	r1, [pc, #180]	; (1650 <Clock_Ip_ResetClockConfiguration+0x184>)
    159a:	4613      	mov	r3, r2
    159c:	00db      	lsls	r3, r3, #3
    159e:	4413      	add	r3, r2
    15a0:	440b      	add	r3, r1
    15a2:	3301      	adds	r3, #1
    15a4:	781b      	ldrb	r3, [r3, #0]
    15a6:	461a      	mov	r2, r3
    15a8:	4b2e      	ldr	r3, [pc, #184]	; (1664 <Clock_Ip_ResetClockConfiguration+0x198>)
    15aa:	5c9b      	ldrb	r3, [r3, r2]
    15ac:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    15ae:	492e      	ldr	r1, [pc, #184]	; (1668 <Clock_Ip_ResetClockConfiguration+0x19c>)
    15b0:	9a02      	ldr	r2, [sp, #8]
    15b2:	4613      	mov	r3, r2
    15b4:	009b      	lsls	r3, r3, #2
    15b6:	4413      	add	r3, r2
    15b8:	009b      	lsls	r3, r3, #2
    15ba:	440b      	add	r3, r1
    15bc:	6819      	ldr	r1, [r3, #0]
    15be:	9b03      	ldr	r3, [sp, #12]
    15c0:	1e5a      	subs	r2, r3, #1
    15c2:	4613      	mov	r3, r2
    15c4:	009b      	lsls	r3, r3, #2
    15c6:	4413      	add	r3, r2
    15c8:	00db      	lsls	r3, r3, #3
    15ca:	3340      	adds	r3, #64	; 0x40
    15cc:	9a01      	ldr	r2, [sp, #4]
    15ce:	4413      	add	r3, r2
    15d0:	4618      	mov	r0, r3
    15d2:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    15d4:	9b03      	ldr	r3, [sp, #12]
    15d6:	3b01      	subs	r3, #1
    15d8:	9303      	str	r3, [sp, #12]
    15da:	9b03      	ldr	r3, [sp, #12]
    15dc:	2b00      	cmp	r3, #0
    15de:	d1d1      	bne.n	1584 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    15e0:	9b01      	ldr	r3, [sp, #4]
    15e2:	7a5b      	ldrb	r3, [r3, #9]
    15e4:	9303      	str	r3, [sp, #12]
    15e6:	e02b      	b.n	1640 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    15e8:	9b03      	ldr	r3, [sp, #12]
    15ea:	1e5a      	subs	r2, r3, #1
    15ec:	9901      	ldr	r1, [sp, #4]
    15ee:	4613      	mov	r3, r2
    15f0:	009b      	lsls	r3, r3, #2
    15f2:	4413      	add	r3, r2
    15f4:	009b      	lsls	r3, r3, #2
    15f6:	440b      	add	r3, r1
    15f8:	332c      	adds	r3, #44	; 0x2c
    15fa:	681a      	ldr	r2, [r3, #0]
    15fc:	4914      	ldr	r1, [pc, #80]	; (1650 <Clock_Ip_ResetClockConfiguration+0x184>)
    15fe:	4613      	mov	r3, r2
    1600:	00db      	lsls	r3, r3, #3
    1602:	4413      	add	r3, r2
    1604:	440b      	add	r3, r1
    1606:	3301      	adds	r3, #1
    1608:	781b      	ldrb	r3, [r3, #0]
    160a:	461a      	mov	r2, r3
    160c:	4b17      	ldr	r3, [pc, #92]	; (166c <Clock_Ip_ResetClockConfiguration+0x1a0>)
    160e:	5c9b      	ldrb	r3, [r3, r2]
    1610:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    1612:	4917      	ldr	r1, [pc, #92]	; (1670 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1614:	9a02      	ldr	r2, [sp, #8]
    1616:	4613      	mov	r3, r2
    1618:	009b      	lsls	r3, r3, #2
    161a:	4413      	add	r3, r2
    161c:	009b      	lsls	r3, r3, #2
    161e:	440b      	add	r3, r1
    1620:	6819      	ldr	r1, [r3, #0]
    1622:	9b03      	ldr	r3, [sp, #12]
    1624:	1e5a      	subs	r2, r3, #1
    1626:	4613      	mov	r3, r2
    1628:	009b      	lsls	r3, r3, #2
    162a:	4413      	add	r3, r2
    162c:	009b      	lsls	r3, r3, #2
    162e:	3328      	adds	r3, #40	; 0x28
    1630:	9a01      	ldr	r2, [sp, #4]
    1632:	4413      	add	r3, r2
    1634:	3304      	adds	r3, #4
    1636:	4618      	mov	r0, r3
    1638:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    163a:	9b03      	ldr	r3, [sp, #12]
    163c:	3b01      	subs	r3, #1
    163e:	9303      	str	r3, [sp, #12]
    1640:	9b03      	ldr	r3, [sp, #12]
    1642:	2b00      	cmp	r3, #0
    1644:	d1d0      	bne.n	15e8 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    1646:	bf00      	nop
    1648:	bf00      	nop
    164a:	b005      	add	sp, #20
    164c:	f85d fb04 	ldr.w	pc, [sp], #4
    1650:	0000ba08 	.word	0x0000ba08
    1654:	0000b9d8 	.word	0x0000b9d8
    1658:	0000c040 	.word	0x0000c040
    165c:	0000b9b8 	.word	0x0000b9b8
    1660:	0000bf84 	.word	0x0000bf84
    1664:	0000b9c8 	.word	0x0000b9c8
    1668:	0000c014 	.word	0x0000c014
    166c:	0000b988 	.word	0x0000b988
    1670:	0000bf5c 	.word	0x0000bf5c

00001674 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    1674:	b500      	push	{lr}
    1676:	b085      	sub	sp, #20
    1678:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    167a:	2301      	movs	r3, #1
    167c:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    167e:	9801      	ldr	r0, [sp, #4]
    1680:	f000 f818 	bl	16b4 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    1684:	4b0a      	ldr	r3, [pc, #40]	; (16b0 <Clock_Ip_Init+0x3c>)
    1686:	781b      	ldrb	r3, [r3, #0]
    1688:	2b00      	cmp	r3, #0
    168a:	d00a      	beq.n	16a2 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    168c:	f000 fb74 	bl	1d78 <Clock_Ip_GetPllStatus>
    1690:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    1692:	9b02      	ldr	r3, [sp, #8]
    1694:	2b00      	cmp	r3, #0
    1696:	d106      	bne.n	16a6 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    1698:	f000 fbf2 	bl	1e80 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    169c:	2300      	movs	r3, #0
    169e:	9303      	str	r3, [sp, #12]
    16a0:	e001      	b.n	16a6 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    16a2:	2300      	movs	r3, #0
    16a4:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    16a6:	9b03      	ldr	r3, [sp, #12]
}
    16a8:	4618      	mov	r0, r3
    16aa:	b005      	add	sp, #20
    16ac:	f85d fb04 	ldr.w	pc, [sp], #4
    16b0:	1fff8bbc 	.word	0x1fff8bbc

000016b4 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    16b4:	b510      	push	{r4, lr}
    16b6:	b084      	sub	sp, #16
    16b8:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    16ba:	4a9f      	ldr	r2, [pc, #636]	; (1938 <Clock_Ip_InitClock+0x284>)
    16bc:	9b01      	ldr	r3, [sp, #4]
    16be:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    16c0:	2101      	movs	r1, #1
    16c2:	9801      	ldr	r0, [sp, #4]
    16c4:	f003 fa90 	bl	4be8 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    16c8:	4b9b      	ldr	r3, [pc, #620]	; (1938 <Clock_Ip_InitClock+0x284>)
    16ca:	681b      	ldr	r3, [r3, #0]
    16cc:	2b00      	cmp	r3, #0
    16ce:	d030      	beq.n	1732 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    16d0:	2300      	movs	r3, #0
    16d2:	9303      	str	r3, [sp, #12]
    16d4:	e027      	b.n	1726 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    16d6:	9901      	ldr	r1, [sp, #4]
    16d8:	9a03      	ldr	r2, [sp, #12]
    16da:	4613      	mov	r3, r2
    16dc:	009b      	lsls	r3, r3, #2
    16de:	4413      	add	r3, r2
    16e0:	009b      	lsls	r3, r3, #2
    16e2:	440b      	add	r3, r1
    16e4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    16e8:	681a      	ldr	r2, [r3, #0]
    16ea:	4994      	ldr	r1, [pc, #592]	; (193c <Clock_Ip_InitClock+0x288>)
    16ec:	4613      	mov	r3, r2
    16ee:	00db      	lsls	r3, r3, #3
    16f0:	4413      	add	r3, r2
    16f2:	440b      	add	r3, r1
    16f4:	3301      	adds	r3, #1
    16f6:	781b      	ldrb	r3, [r3, #0]
    16f8:	461a      	mov	r2, r3
    16fa:	4b91      	ldr	r3, [pc, #580]	; (1940 <Clock_Ip_InitClock+0x28c>)
    16fc:	5c9b      	ldrb	r3, [r3, r2]
    16fe:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    1700:	4a90      	ldr	r2, [pc, #576]	; (1944 <Clock_Ip_InitClock+0x290>)
    1702:	9b02      	ldr	r3, [sp, #8]
    1704:	011b      	lsls	r3, r3, #4
    1706:	4413      	add	r3, r2
    1708:	6819      	ldr	r1, [r3, #0]
    170a:	9a03      	ldr	r2, [sp, #12]
    170c:	4613      	mov	r3, r2
    170e:	009b      	lsls	r3, r3, #2
    1710:	4413      	add	r3, r2
    1712:	009b      	lsls	r3, r3, #2
    1714:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1718:	9a01      	ldr	r2, [sp, #4]
    171a:	4413      	add	r3, r2
    171c:	4618      	mov	r0, r3
    171e:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1720:	9b03      	ldr	r3, [sp, #12]
    1722:	3301      	adds	r3, #1
    1724:	9303      	str	r3, [sp, #12]
    1726:	9b01      	ldr	r3, [sp, #4]
    1728:	7c9b      	ldrb	r3, [r3, #18]
    172a:	461a      	mov	r2, r3
    172c:	9b03      	ldr	r3, [sp, #12]
    172e:	4293      	cmp	r3, r2
    1730:	d3d1      	bcc.n	16d6 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    1732:	9801      	ldr	r0, [sp, #4]
    1734:	f7ff feca 	bl	14cc <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1738:	2300      	movs	r3, #0
    173a:	9303      	str	r3, [sp, #12]
    173c:	e029      	b.n	1792 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    173e:	9901      	ldr	r1, [sp, #4]
    1740:	9a03      	ldr	r2, [sp, #12]
    1742:	4613      	mov	r3, r2
    1744:	005b      	lsls	r3, r3, #1
    1746:	4413      	add	r3, r2
    1748:	009b      	lsls	r3, r3, #2
    174a:	440b      	add	r3, r1
    174c:	3314      	adds	r3, #20
    174e:	681a      	ldr	r2, [r3, #0]
    1750:	497a      	ldr	r1, [pc, #488]	; (193c <Clock_Ip_InitClock+0x288>)
    1752:	4613      	mov	r3, r2
    1754:	00db      	lsls	r3, r3, #3
    1756:	4413      	add	r3, r2
    1758:	440b      	add	r3, r1
    175a:	3301      	adds	r3, #1
    175c:	781b      	ldrb	r3, [r3, #0]
    175e:	461a      	mov	r2, r3
    1760:	4b79      	ldr	r3, [pc, #484]	; (1948 <Clock_Ip_InitClock+0x294>)
    1762:	5c9b      	ldrb	r3, [r3, r2]
    1764:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    1766:	4979      	ldr	r1, [pc, #484]	; (194c <Clock_Ip_InitClock+0x298>)
    1768:	9a02      	ldr	r2, [sp, #8]
    176a:	4613      	mov	r3, r2
    176c:	005b      	lsls	r3, r3, #1
    176e:	4413      	add	r3, r2
    1770:	009b      	lsls	r3, r3, #2
    1772:	440b      	add	r3, r1
    1774:	6819      	ldr	r1, [r3, #0]
    1776:	9a03      	ldr	r2, [sp, #12]
    1778:	4613      	mov	r3, r2
    177a:	005b      	lsls	r3, r3, #1
    177c:	4413      	add	r3, r2
    177e:	009b      	lsls	r3, r3, #2
    1780:	3310      	adds	r3, #16
    1782:	9a01      	ldr	r2, [sp, #4]
    1784:	4413      	add	r3, r2
    1786:	3304      	adds	r3, #4
    1788:	4618      	mov	r0, r3
    178a:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    178c:	9b03      	ldr	r3, [sp, #12]
    178e:	3301      	adds	r3, #1
    1790:	9303      	str	r3, [sp, #12]
    1792:	9b01      	ldr	r3, [sp, #4]
    1794:	7a1b      	ldrb	r3, [r3, #8]
    1796:	461a      	mov	r2, r3
    1798:	9b03      	ldr	r3, [sp, #12]
    179a:	4293      	cmp	r3, r2
    179c:	d3cf      	bcc.n	173e <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    179e:	2300      	movs	r3, #0
    17a0:	9303      	str	r3, [sp, #12]
    17a2:	e02a      	b.n	17fa <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    17a4:	9901      	ldr	r1, [sp, #4]
    17a6:	9a03      	ldr	r2, [sp, #12]
    17a8:	4613      	mov	r3, r2
    17aa:	009b      	lsls	r3, r3, #2
    17ac:	4413      	add	r3, r2
    17ae:	009b      	lsls	r3, r3, #2
    17b0:	440b      	add	r3, r1
    17b2:	332c      	adds	r3, #44	; 0x2c
    17b4:	681a      	ldr	r2, [r3, #0]
    17b6:	4961      	ldr	r1, [pc, #388]	; (193c <Clock_Ip_InitClock+0x288>)
    17b8:	4613      	mov	r3, r2
    17ba:	00db      	lsls	r3, r3, #3
    17bc:	4413      	add	r3, r2
    17be:	440b      	add	r3, r1
    17c0:	3301      	adds	r3, #1
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	461a      	mov	r2, r3
    17c6:	4b62      	ldr	r3, [pc, #392]	; (1950 <Clock_Ip_InitClock+0x29c>)
    17c8:	5c9b      	ldrb	r3, [r3, r2]
    17ca:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    17cc:	4961      	ldr	r1, [pc, #388]	; (1954 <Clock_Ip_InitClock+0x2a0>)
    17ce:	9a02      	ldr	r2, [sp, #8]
    17d0:	4613      	mov	r3, r2
    17d2:	009b      	lsls	r3, r3, #2
    17d4:	4413      	add	r3, r2
    17d6:	009b      	lsls	r3, r3, #2
    17d8:	440b      	add	r3, r1
    17da:	3304      	adds	r3, #4
    17dc:	6819      	ldr	r1, [r3, #0]
    17de:	9a03      	ldr	r2, [sp, #12]
    17e0:	4613      	mov	r3, r2
    17e2:	009b      	lsls	r3, r3, #2
    17e4:	4413      	add	r3, r2
    17e6:	009b      	lsls	r3, r3, #2
    17e8:	3328      	adds	r3, #40	; 0x28
    17ea:	9a01      	ldr	r2, [sp, #4]
    17ec:	4413      	add	r3, r2
    17ee:	3304      	adds	r3, #4
    17f0:	4618      	mov	r0, r3
    17f2:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    17f4:	9b03      	ldr	r3, [sp, #12]
    17f6:	3301      	adds	r3, #1
    17f8:	9303      	str	r3, [sp, #12]
    17fa:	9b01      	ldr	r3, [sp, #4]
    17fc:	7a5b      	ldrb	r3, [r3, #9]
    17fe:	461a      	mov	r2, r3
    1800:	9b03      	ldr	r3, [sp, #12]
    1802:	4293      	cmp	r3, r2
    1804:	d3ce      	bcc.n	17a4 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    1806:	9801      	ldr	r0, [sp, #4]
    1808:	f7ff fdb0 	bl	136c <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    180c:	2300      	movs	r3, #0
    180e:	9303      	str	r3, [sp, #12]
    1810:	e028      	b.n	1864 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    1812:	9901      	ldr	r1, [sp, #4]
    1814:	9a03      	ldr	r2, [sp, #12]
    1816:	4613      	mov	r3, r2
    1818:	009b      	lsls	r3, r3, #2
    181a:	4413      	add	r3, r2
    181c:	009b      	lsls	r3, r3, #2
    181e:	440b      	add	r3, r1
    1820:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1824:	681a      	ldr	r2, [r3, #0]
    1826:	4945      	ldr	r1, [pc, #276]	; (193c <Clock_Ip_InitClock+0x288>)
    1828:	4613      	mov	r3, r2
    182a:	00db      	lsls	r3, r3, #3
    182c:	4413      	add	r3, r2
    182e:	440b      	add	r3, r1
    1830:	3301      	adds	r3, #1
    1832:	781b      	ldrb	r3, [r3, #0]
    1834:	461a      	mov	r2, r3
    1836:	4b48      	ldr	r3, [pc, #288]	; (1958 <Clock_Ip_InitClock+0x2a4>)
    1838:	5c9b      	ldrb	r3, [r3, r2]
    183a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    183c:	4a47      	ldr	r2, [pc, #284]	; (195c <Clock_Ip_InitClock+0x2a8>)
    183e:	9b02      	ldr	r3, [sp, #8]
    1840:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1844:	9a03      	ldr	r2, [sp, #12]
    1846:	4613      	mov	r3, r2
    1848:	009b      	lsls	r3, r3, #2
    184a:	4413      	add	r3, r2
    184c:	009b      	lsls	r3, r3, #2
    184e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    1852:	9a01      	ldr	r2, [sp, #4]
    1854:	4413      	add	r3, r2
    1856:	3304      	adds	r3, #4
    1858:	9903      	ldr	r1, [sp, #12]
    185a:	4618      	mov	r0, r3
    185c:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    185e:	9b03      	ldr	r3, [sp, #12]
    1860:	3301      	adds	r3, #1
    1862:	9303      	str	r3, [sp, #12]
    1864:	9b01      	ldr	r3, [sp, #4]
    1866:	7c5b      	ldrb	r3, [r3, #17]
    1868:	461a      	mov	r2, r3
    186a:	9b03      	ldr	r3, [sp, #12]
    186c:	4293      	cmp	r3, r2
    186e:	d3d0      	bcc.n	1812 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1870:	2300      	movs	r3, #0
    1872:	9303      	str	r3, [sp, #12]
    1874:	e026      	b.n	18c4 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1876:	9901      	ldr	r1, [sp, #4]
    1878:	9a03      	ldr	r2, [sp, #12]
    187a:	4613      	mov	r3, r2
    187c:	005b      	lsls	r3, r3, #1
    187e:	4413      	add	r3, r2
    1880:	009b      	lsls	r3, r3, #2
    1882:	440b      	add	r3, r1
    1884:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1888:	681a      	ldr	r2, [r3, #0]
    188a:	492c      	ldr	r1, [pc, #176]	; (193c <Clock_Ip_InitClock+0x288>)
    188c:	4613      	mov	r3, r2
    188e:	00db      	lsls	r3, r3, #3
    1890:	4413      	add	r3, r2
    1892:	440b      	add	r3, r1
    1894:	3301      	adds	r3, #1
    1896:	781b      	ldrb	r3, [r3, #0]
    1898:	461a      	mov	r2, r3
    189a:	4b31      	ldr	r3, [pc, #196]	; (1960 <Clock_Ip_InitClock+0x2ac>)
    189c:	5c9b      	ldrb	r3, [r3, r2]
    189e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    18a0:	4a30      	ldr	r2, [pc, #192]	; (1964 <Clock_Ip_InitClock+0x2b0>)
    18a2:	9b02      	ldr	r3, [sp, #8]
    18a4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    18a8:	9a03      	ldr	r2, [sp, #12]
    18aa:	4613      	mov	r3, r2
    18ac:	005b      	lsls	r3, r3, #1
    18ae:	4413      	add	r3, r2
    18b0:	009b      	lsls	r3, r3, #2
    18b2:	f503 730e 	add.w	r3, r3, #568	; 0x238
    18b6:	9a01      	ldr	r2, [sp, #4]
    18b8:	4413      	add	r3, r2
    18ba:	4618      	mov	r0, r3
    18bc:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    18be:	9b03      	ldr	r3, [sp, #12]
    18c0:	3301      	adds	r3, #1
    18c2:	9303      	str	r3, [sp, #12]
    18c4:	9b01      	ldr	r3, [sp, #4]
    18c6:	7b5b      	ldrb	r3, [r3, #13]
    18c8:	461a      	mov	r2, r3
    18ca:	9b03      	ldr	r3, [sp, #12]
    18cc:	4293      	cmp	r3, r2
    18ce:	d3d2      	bcc.n	1876 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    18d0:	2300      	movs	r3, #0
    18d2:	9303      	str	r3, [sp, #12]
    18d4:	e026      	b.n	1924 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    18d6:	9901      	ldr	r1, [sp, #4]
    18d8:	9a03      	ldr	r2, [sp, #12]
    18da:	4613      	mov	r3, r2
    18dc:	005b      	lsls	r3, r3, #1
    18de:	4413      	add	r3, r2
    18e0:	009b      	lsls	r3, r3, #2
    18e2:	440b      	add	r3, r1
    18e4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    18e8:	681a      	ldr	r2, [r3, #0]
    18ea:	4914      	ldr	r1, [pc, #80]	; (193c <Clock_Ip_InitClock+0x288>)
    18ec:	4613      	mov	r3, r2
    18ee:	00db      	lsls	r3, r3, #3
    18f0:	4413      	add	r3, r2
    18f2:	440b      	add	r3, r1
    18f4:	3301      	adds	r3, #1
    18f6:	781b      	ldrb	r3, [r3, #0]
    18f8:	461a      	mov	r2, r3
    18fa:	4b1b      	ldr	r3, [pc, #108]	; (1968 <Clock_Ip_InitClock+0x2b4>)
    18fc:	5c9b      	ldrb	r3, [r3, r2]
    18fe:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    1900:	4a1a      	ldr	r2, [pc, #104]	; (196c <Clock_Ip_InitClock+0x2b8>)
    1902:	9b02      	ldr	r3, [sp, #8]
    1904:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    1908:	9a03      	ldr	r2, [sp, #12]
    190a:	4613      	mov	r3, r2
    190c:	005b      	lsls	r3, r3, #1
    190e:	4413      	add	r3, r2
    1910:	009b      	lsls	r3, r3, #2
    1912:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1916:	9a01      	ldr	r2, [sp, #4]
    1918:	4413      	add	r3, r2
    191a:	4618      	mov	r0, r3
    191c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    191e:	9b03      	ldr	r3, [sp, #12]
    1920:	3301      	adds	r3, #1
    1922:	9303      	str	r3, [sp, #12]
    1924:	9b01      	ldr	r3, [sp, #4]
    1926:	7b1b      	ldrb	r3, [r3, #12]
    1928:	461a      	mov	r2, r3
    192a:	9b03      	ldr	r3, [sp, #12]
    192c:	4293      	cmp	r3, r2
    192e:	d3d2      	bcc.n	18d6 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1930:	2300      	movs	r3, #0
    1932:	9303      	str	r3, [sp, #12]
    1934:	e044      	b.n	19c0 <Clock_Ip_InitClock+0x30c>
    1936:	bf00      	nop
    1938:	1fff8bb4 	.word	0x1fff8bb4
    193c:	0000ba08 	.word	0x0000ba08
    1940:	0000b9f8 	.word	0x0000b9f8
    1944:	0000c004 	.word	0x0000c004
    1948:	0000b998 	.word	0x0000b998
    194c:	0000bfc8 	.word	0x0000bfc8
    1950:	0000b988 	.word	0x0000b988
    1954:	0000bf5c 	.word	0x0000bf5c
    1958:	0000b9e8 	.word	0x0000b9e8
    195c:	0000c03c 	.word	0x0000c03c
    1960:	0000b978 	.word	0x0000b978
    1964:	0000bf54 	.word	0x0000bf54
    1968:	0000b968 	.word	0x0000b968
    196c:	0000bf18 	.word	0x0000bf18
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1970:	9901      	ldr	r1, [sp, #4]
    1972:	9a03      	ldr	r2, [sp, #12]
    1974:	4613      	mov	r3, r2
    1976:	005b      	lsls	r3, r3, #1
    1978:	4413      	add	r3, r2
    197a:	009b      	lsls	r3, r3, #2
    197c:	440b      	add	r3, r1
    197e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1982:	681a      	ldr	r2, [r3, #0]
    1984:	49ac      	ldr	r1, [pc, #688]	; (1c38 <Clock_Ip_InitClock+0x584>)
    1986:	4613      	mov	r3, r2
    1988:	00db      	lsls	r3, r3, #3
    198a:	4413      	add	r3, r2
    198c:	440b      	add	r3, r1
    198e:	3301      	adds	r3, #1
    1990:	781b      	ldrb	r3, [r3, #0]
    1992:	461a      	mov	r2, r3
    1994:	4ba9      	ldr	r3, [pc, #676]	; (1c3c <Clock_Ip_InitClock+0x588>)
    1996:	5c9b      	ldrb	r3, [r3, r2]
    1998:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    199a:	4aa9      	ldr	r2, [pc, #676]	; (1c40 <Clock_Ip_InitClock+0x58c>)
    199c:	9b02      	ldr	r3, [sp, #8]
    199e:	00db      	lsls	r3, r3, #3
    19a0:	4413      	add	r3, r2
    19a2:	6859      	ldr	r1, [r3, #4]
    19a4:	9a03      	ldr	r2, [sp, #12]
    19a6:	4613      	mov	r3, r2
    19a8:	005b      	lsls	r3, r3, #1
    19aa:	4413      	add	r3, r2
    19ac:	009b      	lsls	r3, r3, #2
    19ae:	f503 730e 	add.w	r3, r3, #568	; 0x238
    19b2:	9a01      	ldr	r2, [sp, #4]
    19b4:	4413      	add	r3, r2
    19b6:	4618      	mov	r0, r3
    19b8:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    19ba:	9b03      	ldr	r3, [sp, #12]
    19bc:	3301      	adds	r3, #1
    19be:	9303      	str	r3, [sp, #12]
    19c0:	9b01      	ldr	r3, [sp, #4]
    19c2:	7b5b      	ldrb	r3, [r3, #13]
    19c4:	461a      	mov	r2, r3
    19c6:	9b03      	ldr	r3, [sp, #12]
    19c8:	4293      	cmp	r3, r2
    19ca:	d3d1      	bcc.n	1970 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    19cc:	2300      	movs	r3, #0
    19ce:	9303      	str	r3, [sp, #12]
    19d0:	e029      	b.n	1a26 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    19d2:	9901      	ldr	r1, [sp, #4]
    19d4:	9a03      	ldr	r2, [sp, #12]
    19d6:	4613      	mov	r3, r2
    19d8:	009b      	lsls	r3, r3, #2
    19da:	4413      	add	r3, r2
    19dc:	00db      	lsls	r3, r3, #3
    19de:	440b      	add	r3, r1
    19e0:	3340      	adds	r3, #64	; 0x40
    19e2:	681a      	ldr	r2, [r3, #0]
    19e4:	4994      	ldr	r1, [pc, #592]	; (1c38 <Clock_Ip_InitClock+0x584>)
    19e6:	4613      	mov	r3, r2
    19e8:	00db      	lsls	r3, r3, #3
    19ea:	4413      	add	r3, r2
    19ec:	440b      	add	r3, r1
    19ee:	3301      	adds	r3, #1
    19f0:	781b      	ldrb	r3, [r3, #0]
    19f2:	461a      	mov	r2, r3
    19f4:	4b93      	ldr	r3, [pc, #588]	; (1c44 <Clock_Ip_InitClock+0x590>)
    19f6:	5c9b      	ldrb	r3, [r3, r2]
    19f8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    19fa:	4993      	ldr	r1, [pc, #588]	; (1c48 <Clock_Ip_InitClock+0x594>)
    19fc:	9a02      	ldr	r2, [sp, #8]
    19fe:	4613      	mov	r3, r2
    1a00:	009b      	lsls	r3, r3, #2
    1a02:	4413      	add	r3, r2
    1a04:	009b      	lsls	r3, r3, #2
    1a06:	440b      	add	r3, r1
    1a08:	3304      	adds	r3, #4
    1a0a:	6819      	ldr	r1, [r3, #0]
    1a0c:	9a03      	ldr	r2, [sp, #12]
    1a0e:	4613      	mov	r3, r2
    1a10:	009b      	lsls	r3, r3, #2
    1a12:	4413      	add	r3, r2
    1a14:	00db      	lsls	r3, r3, #3
    1a16:	3340      	adds	r3, #64	; 0x40
    1a18:	9a01      	ldr	r2, [sp, #4]
    1a1a:	4413      	add	r3, r2
    1a1c:	4618      	mov	r0, r3
    1a1e:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1a20:	9b03      	ldr	r3, [sp, #12]
    1a22:	3301      	adds	r3, #1
    1a24:	9303      	str	r3, [sp, #12]
    1a26:	9b01      	ldr	r3, [sp, #4]
    1a28:	7a9b      	ldrb	r3, [r3, #10]
    1a2a:	461a      	mov	r2, r3
    1a2c:	9b03      	ldr	r3, [sp, #12]
    1a2e:	4293      	cmp	r3, r2
    1a30:	d3cf      	bcc.n	19d2 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1a32:	2300      	movs	r3, #0
    1a34:	9303      	str	r3, [sp, #12]
    1a36:	e029      	b.n	1a8c <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1a38:	9901      	ldr	r1, [sp, #4]
    1a3a:	9a03      	ldr	r2, [sp, #12]
    1a3c:	4613      	mov	r3, r2
    1a3e:	009b      	lsls	r3, r3, #2
    1a40:	4413      	add	r3, r2
    1a42:	009b      	lsls	r3, r3, #2
    1a44:	440b      	add	r3, r1
    1a46:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1a4a:	681a      	ldr	r2, [r3, #0]
    1a4c:	497a      	ldr	r1, [pc, #488]	; (1c38 <Clock_Ip_InitClock+0x584>)
    1a4e:	4613      	mov	r3, r2
    1a50:	00db      	lsls	r3, r3, #3
    1a52:	4413      	add	r3, r2
    1a54:	440b      	add	r3, r1
    1a56:	3301      	adds	r3, #1
    1a58:	781b      	ldrb	r3, [r3, #0]
    1a5a:	461a      	mov	r2, r3
    1a5c:	4b7b      	ldr	r3, [pc, #492]	; (1c4c <Clock_Ip_InitClock+0x598>)
    1a5e:	5c9b      	ldrb	r3, [r3, r2]
    1a60:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    1a62:	4a7b      	ldr	r2, [pc, #492]	; (1c50 <Clock_Ip_InitClock+0x59c>)
    1a64:	9b02      	ldr	r3, [sp, #8]
    1a66:	011b      	lsls	r3, r3, #4
    1a68:	4413      	add	r3, r2
    1a6a:	3304      	adds	r3, #4
    1a6c:	681c      	ldr	r4, [r3, #0]
    1a6e:	9a03      	ldr	r2, [sp, #12]
    1a70:	4613      	mov	r3, r2
    1a72:	009b      	lsls	r3, r3, #2
    1a74:	4413      	add	r3, r2
    1a76:	009b      	lsls	r3, r3, #2
    1a78:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1a7c:	9a01      	ldr	r2, [sp, #4]
    1a7e:	4413      	add	r3, r2
    1a80:	9903      	ldr	r1, [sp, #12]
    1a82:	4618      	mov	r0, r3
    1a84:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1a86:	9b03      	ldr	r3, [sp, #12]
    1a88:	3301      	adds	r3, #1
    1a8a:	9303      	str	r3, [sp, #12]
    1a8c:	9b01      	ldr	r3, [sp, #4]
    1a8e:	7c9b      	ldrb	r3, [r3, #18]
    1a90:	461a      	mov	r2, r3
    1a92:	9b03      	ldr	r3, [sp, #12]
    1a94:	4293      	cmp	r3, r2
    1a96:	d3cf      	bcc.n	1a38 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1a98:	2300      	movs	r3, #0
    1a9a:	9303      	str	r3, [sp, #12]
    1a9c:	e02a      	b.n	1af4 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1a9e:	9901      	ldr	r1, [sp, #4]
    1aa0:	9a03      	ldr	r2, [sp, #12]
    1aa2:	4613      	mov	r3, r2
    1aa4:	009b      	lsls	r3, r3, #2
    1aa6:	4413      	add	r3, r2
    1aa8:	009b      	lsls	r3, r3, #2
    1aaa:	440b      	add	r3, r1
    1aac:	332c      	adds	r3, #44	; 0x2c
    1aae:	681a      	ldr	r2, [r3, #0]
    1ab0:	4961      	ldr	r1, [pc, #388]	; (1c38 <Clock_Ip_InitClock+0x584>)
    1ab2:	4613      	mov	r3, r2
    1ab4:	00db      	lsls	r3, r3, #3
    1ab6:	4413      	add	r3, r2
    1ab8:	440b      	add	r3, r1
    1aba:	3301      	adds	r3, #1
    1abc:	781b      	ldrb	r3, [r3, #0]
    1abe:	461a      	mov	r2, r3
    1ac0:	4b64      	ldr	r3, [pc, #400]	; (1c54 <Clock_Ip_InitClock+0x5a0>)
    1ac2:	5c9b      	ldrb	r3, [r3, r2]
    1ac4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    1ac6:	4964      	ldr	r1, [pc, #400]	; (1c58 <Clock_Ip_InitClock+0x5a4>)
    1ac8:	9a02      	ldr	r2, [sp, #8]
    1aca:	4613      	mov	r3, r2
    1acc:	009b      	lsls	r3, r3, #2
    1ace:	4413      	add	r3, r2
    1ad0:	009b      	lsls	r3, r3, #2
    1ad2:	440b      	add	r3, r1
    1ad4:	3308      	adds	r3, #8
    1ad6:	6819      	ldr	r1, [r3, #0]
    1ad8:	9a03      	ldr	r2, [sp, #12]
    1ada:	4613      	mov	r3, r2
    1adc:	009b      	lsls	r3, r3, #2
    1ade:	4413      	add	r3, r2
    1ae0:	009b      	lsls	r3, r3, #2
    1ae2:	3328      	adds	r3, #40	; 0x28
    1ae4:	9a01      	ldr	r2, [sp, #4]
    1ae6:	4413      	add	r3, r2
    1ae8:	3304      	adds	r3, #4
    1aea:	4618      	mov	r0, r3
    1aec:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1aee:	9b03      	ldr	r3, [sp, #12]
    1af0:	3301      	adds	r3, #1
    1af2:	9303      	str	r3, [sp, #12]
    1af4:	9b01      	ldr	r3, [sp, #4]
    1af6:	7a5b      	ldrb	r3, [r3, #9]
    1af8:	461a      	mov	r2, r3
    1afa:	9b03      	ldr	r3, [sp, #12]
    1afc:	4293      	cmp	r3, r2
    1afe:	d3ce      	bcc.n	1a9e <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1b00:	2300      	movs	r3, #0
    1b02:	9303      	str	r3, [sp, #12]
    1b04:	e029      	b.n	1b5a <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1b06:	9901      	ldr	r1, [sp, #4]
    1b08:	9a03      	ldr	r2, [sp, #12]
    1b0a:	4613      	mov	r3, r2
    1b0c:	009b      	lsls	r3, r3, #2
    1b0e:	4413      	add	r3, r2
    1b10:	00db      	lsls	r3, r3, #3
    1b12:	440b      	add	r3, r1
    1b14:	3340      	adds	r3, #64	; 0x40
    1b16:	681a      	ldr	r2, [r3, #0]
    1b18:	4947      	ldr	r1, [pc, #284]	; (1c38 <Clock_Ip_InitClock+0x584>)
    1b1a:	4613      	mov	r3, r2
    1b1c:	00db      	lsls	r3, r3, #3
    1b1e:	4413      	add	r3, r2
    1b20:	440b      	add	r3, r1
    1b22:	3301      	adds	r3, #1
    1b24:	781b      	ldrb	r3, [r3, #0]
    1b26:	461a      	mov	r2, r3
    1b28:	4b46      	ldr	r3, [pc, #280]	; (1c44 <Clock_Ip_InitClock+0x590>)
    1b2a:	5c9b      	ldrb	r3, [r3, r2]
    1b2c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    1b2e:	4946      	ldr	r1, [pc, #280]	; (1c48 <Clock_Ip_InitClock+0x594>)
    1b30:	9a02      	ldr	r2, [sp, #8]
    1b32:	4613      	mov	r3, r2
    1b34:	009b      	lsls	r3, r3, #2
    1b36:	4413      	add	r3, r2
    1b38:	009b      	lsls	r3, r3, #2
    1b3a:	440b      	add	r3, r1
    1b3c:	330c      	adds	r3, #12
    1b3e:	6819      	ldr	r1, [r3, #0]
    1b40:	9a03      	ldr	r2, [sp, #12]
    1b42:	4613      	mov	r3, r2
    1b44:	009b      	lsls	r3, r3, #2
    1b46:	4413      	add	r3, r2
    1b48:	00db      	lsls	r3, r3, #3
    1b4a:	3340      	adds	r3, #64	; 0x40
    1b4c:	9a01      	ldr	r2, [sp, #4]
    1b4e:	4413      	add	r3, r2
    1b50:	4618      	mov	r0, r3
    1b52:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1b54:	9b03      	ldr	r3, [sp, #12]
    1b56:	3301      	adds	r3, #1
    1b58:	9303      	str	r3, [sp, #12]
    1b5a:	9b01      	ldr	r3, [sp, #4]
    1b5c:	7a9b      	ldrb	r3, [r3, #10]
    1b5e:	461a      	mov	r2, r3
    1b60:	9b03      	ldr	r3, [sp, #12]
    1b62:	4293      	cmp	r3, r2
    1b64:	d3cf      	bcc.n	1b06 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1b66:	2300      	movs	r3, #0
    1b68:	9303      	str	r3, [sp, #12]
    1b6a:	e025      	b.n	1bb8 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    1b6c:	9a01      	ldr	r2, [sp, #4]
    1b6e:	9b03      	ldr	r3, [sp, #12]
    1b70:	3324      	adds	r3, #36	; 0x24
    1b72:	011b      	lsls	r3, r3, #4
    1b74:	4413      	add	r3, r2
    1b76:	3304      	adds	r3, #4
    1b78:	681a      	ldr	r2, [r3, #0]
    1b7a:	492f      	ldr	r1, [pc, #188]	; (1c38 <Clock_Ip_InitClock+0x584>)
    1b7c:	4613      	mov	r3, r2
    1b7e:	00db      	lsls	r3, r3, #3
    1b80:	4413      	add	r3, r2
    1b82:	440b      	add	r3, r1
    1b84:	3301      	adds	r3, #1
    1b86:	781b      	ldrb	r3, [r3, #0]
    1b88:	461a      	mov	r2, r3
    1b8a:	4b34      	ldr	r3, [pc, #208]	; (1c5c <Clock_Ip_InitClock+0x5a8>)
    1b8c:	5c9b      	ldrb	r3, [r3, r2]
    1b8e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    1b90:	4933      	ldr	r1, [pc, #204]	; (1c60 <Clock_Ip_InitClock+0x5ac>)
    1b92:	9a02      	ldr	r2, [sp, #8]
    1b94:	4613      	mov	r3, r2
    1b96:	005b      	lsls	r3, r3, #1
    1b98:	4413      	add	r3, r2
    1b9a:	009b      	lsls	r3, r3, #2
    1b9c:	440b      	add	r3, r1
    1b9e:	3304      	adds	r3, #4
    1ba0:	681b      	ldr	r3, [r3, #0]
    1ba2:	9a03      	ldr	r2, [sp, #12]
    1ba4:	3224      	adds	r2, #36	; 0x24
    1ba6:	0112      	lsls	r2, r2, #4
    1ba8:	9901      	ldr	r1, [sp, #4]
    1baa:	440a      	add	r2, r1
    1bac:	3204      	adds	r2, #4
    1bae:	4610      	mov	r0, r2
    1bb0:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1bb2:	9b03      	ldr	r3, [sp, #12]
    1bb4:	3301      	adds	r3, #1
    1bb6:	9303      	str	r3, [sp, #12]
    1bb8:	9b01      	ldr	r3, [sp, #4]
    1bba:	7b9b      	ldrb	r3, [r3, #14]
    1bbc:	461a      	mov	r2, r3
    1bbe:	9b03      	ldr	r3, [sp, #12]
    1bc0:	4293      	cmp	r3, r2
    1bc2:	d3d3      	bcc.n	1b6c <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    1bc4:	4b27      	ldr	r3, [pc, #156]	; (1c64 <Clock_Ip_InitClock+0x5b0>)
    1bc6:	2200      	movs	r2, #0
    1bc8:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    1bca:	4b26      	ldr	r3, [pc, #152]	; (1c64 <Clock_Ip_InitClock+0x5b0>)
    1bcc:	2200      	movs	r2, #0
    1bce:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    1bd0:	4b24      	ldr	r3, [pc, #144]	; (1c64 <Clock_Ip_InitClock+0x5b0>)
    1bd2:	2201      	movs	r2, #1
    1bd4:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    1bd6:	4b23      	ldr	r3, [pc, #140]	; (1c64 <Clock_Ip_InitClock+0x5b0>)
    1bd8:	2200      	movs	r2, #0
    1bda:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    1bdc:	f000 fa9c 	bl	2118 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1be0:	2300      	movs	r3, #0
    1be2:	9303      	str	r3, [sp, #12]
    1be4:	e04c      	b.n	1c80 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    1be6:	9a01      	ldr	r2, [sp, #4]
    1be8:	9b03      	ldr	r3, [sp, #12]
    1bea:	330d      	adds	r3, #13
    1bec:	00db      	lsls	r3, r3, #3
    1bee:	4413      	add	r3, r2
    1bf0:	685b      	ldr	r3, [r3, #4]
    1bf2:	4a1d      	ldr	r2, [pc, #116]	; (1c68 <Clock_Ip_InitClock+0x5b4>)
    1bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1bf8:	2b03      	cmp	r3, #3
    1bfa:	d03b      	beq.n	1c74 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1bfc:	9b01      	ldr	r3, [sp, #4]
    1bfe:	9a03      	ldr	r2, [sp, #12]
    1c00:	320d      	adds	r2, #13
    1c02:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1c06:	490c      	ldr	r1, [pc, #48]	; (1c38 <Clock_Ip_InitClock+0x584>)
    1c08:	4613      	mov	r3, r2
    1c0a:	00db      	lsls	r3, r3, #3
    1c0c:	4413      	add	r3, r2
    1c0e:	440b      	add	r3, r1
    1c10:	3301      	adds	r3, #1
    1c12:	781b      	ldrb	r3, [r3, #0]
    1c14:	461a      	mov	r2, r3
    1c16:	4b15      	ldr	r3, [pc, #84]	; (1c6c <Clock_Ip_InitClock+0x5b8>)
    1c18:	5c9b      	ldrb	r3, [r3, r2]
    1c1a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    1c1c:	4a14      	ldr	r2, [pc, #80]	; (1c70 <Clock_Ip_InitClock+0x5bc>)
    1c1e:	9b02      	ldr	r3, [sp, #8]
    1c20:	00db      	lsls	r3, r3, #3
    1c22:	4413      	add	r3, r2
    1c24:	685b      	ldr	r3, [r3, #4]
    1c26:	9a03      	ldr	r2, [sp, #12]
    1c28:	320d      	adds	r2, #13
    1c2a:	00d2      	lsls	r2, r2, #3
    1c2c:	9901      	ldr	r1, [sp, #4]
    1c2e:	440a      	add	r2, r1
    1c30:	4610      	mov	r0, r2
    1c32:	4798      	blx	r3
    1c34:	e021      	b.n	1c7a <Clock_Ip_InitClock+0x5c6>
    1c36:	bf00      	nop
    1c38:	0000ba08 	.word	0x0000ba08
    1c3c:	0000b978 	.word	0x0000b978
    1c40:	0000bf54 	.word	0x0000bf54
    1c44:	0000b9c8 	.word	0x0000b9c8
    1c48:	0000c014 	.word	0x0000c014
    1c4c:	0000b9f8 	.word	0x0000b9f8
    1c50:	0000c004 	.word	0x0000c004
    1c54:	0000b988 	.word	0x0000b988
    1c58:	0000bf5c 	.word	0x0000bf5c
    1c5c:	0000b9b8 	.word	0x0000b9b8
    1c60:	0000bf84 	.word	0x0000bf84
    1c64:	1fff8bbc 	.word	0x1fff8bbc
    1c68:	0000be54 	.word	0x0000be54
    1c6c:	0000b9d8 	.word	0x0000b9d8
    1c70:	0000c040 	.word	0x0000c040
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    1c74:	4b3a      	ldr	r3, [pc, #232]	; (1d60 <Clock_Ip_InitClock+0x6ac>)
    1c76:	2201      	movs	r2, #1
    1c78:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1c7a:	9b03      	ldr	r3, [sp, #12]
    1c7c:	3301      	adds	r3, #1
    1c7e:	9303      	str	r3, [sp, #12]
    1c80:	9b01      	ldr	r3, [sp, #4]
    1c82:	7adb      	ldrb	r3, [r3, #11]
    1c84:	461a      	mov	r2, r3
    1c86:	9b03      	ldr	r3, [sp, #12]
    1c88:	4293      	cmp	r3, r2
    1c8a:	d3ac      	bcc.n	1be6 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    1c8c:	4b34      	ldr	r3, [pc, #208]	; (1d60 <Clock_Ip_InitClock+0x6ac>)
    1c8e:	781b      	ldrb	r3, [r3, #0]
    1c90:	f083 0301 	eor.w	r3, r3, #1
    1c94:	b2db      	uxtb	r3, r3
    1c96:	2b00      	cmp	r3, #0
    1c98:	d05e      	beq.n	1d58 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1c9a:	2300      	movs	r3, #0
    1c9c:	9303      	str	r3, [sp, #12]
    1c9e:	e01f      	b.n	1ce0 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1ca0:	9a01      	ldr	r2, [sp, #4]
    1ca2:	9b03      	ldr	r3, [sp, #12]
    1ca4:	334e      	adds	r3, #78	; 0x4e
    1ca6:	00db      	lsls	r3, r3, #3
    1ca8:	4413      	add	r3, r2
    1caa:	685a      	ldr	r2, [r3, #4]
    1cac:	492d      	ldr	r1, [pc, #180]	; (1d64 <Clock_Ip_InitClock+0x6b0>)
    1cae:	4613      	mov	r3, r2
    1cb0:	00db      	lsls	r3, r3, #3
    1cb2:	4413      	add	r3, r2
    1cb4:	440b      	add	r3, r1
    1cb6:	3301      	adds	r3, #1
    1cb8:	781b      	ldrb	r3, [r3, #0]
    1cba:	461a      	mov	r2, r3
    1cbc:	4b2a      	ldr	r3, [pc, #168]	; (1d68 <Clock_Ip_InitClock+0x6b4>)
    1cbe:	5c9b      	ldrb	r3, [r3, r2]
    1cc0:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    1cc2:	4a2a      	ldr	r2, [pc, #168]	; (1d6c <Clock_Ip_InitClock+0x6b8>)
    1cc4:	9b02      	ldr	r3, [sp, #8]
    1cc6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1cca:	9a03      	ldr	r2, [sp, #12]
    1ccc:	324e      	adds	r2, #78	; 0x4e
    1cce:	00d2      	lsls	r2, r2, #3
    1cd0:	9901      	ldr	r1, [sp, #4]
    1cd2:	440a      	add	r2, r1
    1cd4:	3204      	adds	r2, #4
    1cd6:	4610      	mov	r0, r2
    1cd8:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1cda:	9b03      	ldr	r3, [sp, #12]
    1cdc:	3301      	adds	r3, #1
    1cde:	9303      	str	r3, [sp, #12]
    1ce0:	9b01      	ldr	r3, [sp, #4]
    1ce2:	7c1b      	ldrb	r3, [r3, #16]
    1ce4:	461a      	mov	r2, r3
    1ce6:	9b03      	ldr	r3, [sp, #12]
    1ce8:	4293      	cmp	r3, r2
    1cea:	d3d9      	bcc.n	1ca0 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1cec:	2300      	movs	r3, #0
    1cee:	9303      	str	r3, [sp, #12]
    1cf0:	e028      	b.n	1d44 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1cf2:	9901      	ldr	r1, [sp, #4]
    1cf4:	9a03      	ldr	r2, [sp, #12]
    1cf6:	4613      	mov	r3, r2
    1cf8:	009b      	lsls	r3, r3, #2
    1cfa:	4413      	add	r3, r2
    1cfc:	009b      	lsls	r3, r3, #2
    1cfe:	440b      	add	r3, r1
    1d00:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1d04:	681a      	ldr	r2, [r3, #0]
    1d06:	4917      	ldr	r1, [pc, #92]	; (1d64 <Clock_Ip_InitClock+0x6b0>)
    1d08:	4613      	mov	r3, r2
    1d0a:	00db      	lsls	r3, r3, #3
    1d0c:	4413      	add	r3, r2
    1d0e:	440b      	add	r3, r1
    1d10:	3301      	adds	r3, #1
    1d12:	781b      	ldrb	r3, [r3, #0]
    1d14:	461a      	mov	r2, r3
    1d16:	4b16      	ldr	r3, [pc, #88]	; (1d70 <Clock_Ip_InitClock+0x6bc>)
    1d18:	5c9b      	ldrb	r3, [r3, r2]
    1d1a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    1d1c:	4a15      	ldr	r2, [pc, #84]	; (1d74 <Clock_Ip_InitClock+0x6c0>)
    1d1e:	9b02      	ldr	r3, [sp, #8]
    1d20:	011b      	lsls	r3, r3, #4
    1d22:	4413      	add	r3, r2
    1d24:	330c      	adds	r3, #12
    1d26:	6819      	ldr	r1, [r3, #0]
    1d28:	9a03      	ldr	r2, [sp, #12]
    1d2a:	4613      	mov	r3, r2
    1d2c:	009b      	lsls	r3, r3, #2
    1d2e:	4413      	add	r3, r2
    1d30:	009b      	lsls	r3, r3, #2
    1d32:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1d36:	9a01      	ldr	r2, [sp, #4]
    1d38:	4413      	add	r3, r2
    1d3a:	4618      	mov	r0, r3
    1d3c:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1d3e:	9b03      	ldr	r3, [sp, #12]
    1d40:	3301      	adds	r3, #1
    1d42:	9303      	str	r3, [sp, #12]
    1d44:	9b01      	ldr	r3, [sp, #4]
    1d46:	7c9b      	ldrb	r3, [r3, #18]
    1d48:	461a      	mov	r2, r3
    1d4a:	9b03      	ldr	r3, [sp, #12]
    1d4c:	4293      	cmp	r3, r2
    1d4e:	d3d0      	bcc.n	1cf2 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1d50:	2104      	movs	r1, #4
    1d52:	9801      	ldr	r0, [sp, #4]
    1d54:	f002 ff48 	bl	4be8 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    1d58:	bf00      	nop
    1d5a:	b004      	add	sp, #16
    1d5c:	bd10      	pop	{r4, pc}
    1d5e:	bf00      	nop
    1d60:	1fff8bbc 	.word	0x1fff8bbc
    1d64:	0000ba08 	.word	0x0000ba08
    1d68:	0000b9a8 	.word	0x0000b9a8
    1d6c:	0000bf90 	.word	0x0000bf90
    1d70:	0000b9f8 	.word	0x0000b9f8
    1d74:	0000c004 	.word	0x0000c004

00001d78 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    1d78:	b500      	push	{lr}
    1d7a:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    1d7c:	2302      	movs	r3, #2
    1d7e:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1d80:	2300      	movs	r3, #0
    1d82:	9304      	str	r3, [sp, #16]
    1d84:	e02c      	b.n	1de0 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    1d86:	4a36      	ldr	r2, [pc, #216]	; (1e60 <Clock_Ip_GetPllStatus+0xe8>)
    1d88:	9b04      	ldr	r3, [sp, #16]
    1d8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1d8e:	4935      	ldr	r1, [pc, #212]	; (1e64 <Clock_Ip_GetPllStatus+0xec>)
    1d90:	4613      	mov	r3, r2
    1d92:	00db      	lsls	r3, r3, #3
    1d94:	4413      	add	r3, r2
    1d96:	440b      	add	r3, r1
    1d98:	3301      	adds	r3, #1
    1d9a:	781b      	ldrb	r3, [r3, #0]
    1d9c:	461a      	mov	r2, r3
    1d9e:	4b32      	ldr	r3, [pc, #200]	; (1e68 <Clock_Ip_GetPllStatus+0xf0>)
    1da0:	5c9b      	ldrb	r3, [r3, r2]
    1da2:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    1da4:	4931      	ldr	r1, [pc, #196]	; (1e6c <Clock_Ip_GetPllStatus+0xf4>)
    1da6:	9a03      	ldr	r2, [sp, #12]
    1da8:	4613      	mov	r3, r2
    1daa:	009b      	lsls	r3, r3, #2
    1dac:	4413      	add	r3, r2
    1dae:	009b      	lsls	r3, r3, #2
    1db0:	440b      	add	r3, r1
    1db2:	3308      	adds	r3, #8
    1db4:	681b      	ldr	r3, [r3, #0]
    1db6:	492a      	ldr	r1, [pc, #168]	; (1e60 <Clock_Ip_GetPllStatus+0xe8>)
    1db8:	9a04      	ldr	r2, [sp, #16]
    1dba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1dbe:	4610      	mov	r0, r2
    1dc0:	4798      	blx	r3
    1dc2:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    1dc4:	9b02      	ldr	r3, [sp, #8]
    1dc6:	2b01      	cmp	r3, #1
    1dc8:	d102      	bne.n	1dd0 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    1dca:	2301      	movs	r3, #1
    1dcc:	9305      	str	r3, [sp, #20]
            break;
    1dce:	e00d      	b.n	1dec <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    1dd0:	9b02      	ldr	r3, [sp, #8]
    1dd2:	2b02      	cmp	r3, #2
    1dd4:	d101      	bne.n	1dda <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    1dd6:	2300      	movs	r3, #0
    1dd8:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1dda:	9b04      	ldr	r3, [sp, #16]
    1ddc:	3301      	adds	r3, #1
    1dde:	9304      	str	r3, [sp, #16]
    1de0:	4b23      	ldr	r3, [pc, #140]	; (1e70 <Clock_Ip_GetPllStatus+0xf8>)
    1de2:	789b      	ldrb	r3, [r3, #2]
    1de4:	461a      	mov	r2, r3
    1de6:	9b04      	ldr	r3, [sp, #16]
    1de8:	4293      	cmp	r3, r2
    1dea:	d3cc      	bcc.n	1d86 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    1dec:	9b05      	ldr	r3, [sp, #20]
    1dee:	2b00      	cmp	r3, #0
    1df0:	d130      	bne.n	1e54 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1df2:	2300      	movs	r3, #0
    1df4:	9304      	str	r3, [sp, #16]
    1df6:	e027      	b.n	1e48 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    1df8:	4a1e      	ldr	r2, [pc, #120]	; (1e74 <Clock_Ip_GetPllStatus+0xfc>)
    1dfa:	9b04      	ldr	r3, [sp, #16]
    1dfc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1e00:	4918      	ldr	r1, [pc, #96]	; (1e64 <Clock_Ip_GetPllStatus+0xec>)
    1e02:	4613      	mov	r3, r2
    1e04:	00db      	lsls	r3, r3, #3
    1e06:	4413      	add	r3, r2
    1e08:	440b      	add	r3, r1
    1e0a:	3301      	adds	r3, #1
    1e0c:	781b      	ldrb	r3, [r3, #0]
    1e0e:	461a      	mov	r2, r3
    1e10:	4b19      	ldr	r3, [pc, #100]	; (1e78 <Clock_Ip_GetPllStatus+0x100>)
    1e12:	5c9b      	ldrb	r3, [r3, r2]
    1e14:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    1e16:	4919      	ldr	r1, [pc, #100]	; (1e7c <Clock_Ip_GetPllStatus+0x104>)
    1e18:	9a03      	ldr	r2, [sp, #12]
    1e1a:	4613      	mov	r3, r2
    1e1c:	005b      	lsls	r3, r3, #1
    1e1e:	4413      	add	r3, r2
    1e20:	009b      	lsls	r3, r3, #2
    1e22:	440b      	add	r3, r1
    1e24:	3308      	adds	r3, #8
    1e26:	681b      	ldr	r3, [r3, #0]
    1e28:	4912      	ldr	r1, [pc, #72]	; (1e74 <Clock_Ip_GetPllStatus+0xfc>)
    1e2a:	9a04      	ldr	r2, [sp, #16]
    1e2c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1e30:	4610      	mov	r0, r2
    1e32:	4798      	blx	r3
    1e34:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    1e36:	9b01      	ldr	r3, [sp, #4]
    1e38:	2b01      	cmp	r3, #1
    1e3a:	d102      	bne.n	1e42 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    1e3c:	2301      	movs	r3, #1
    1e3e:	9305      	str	r3, [sp, #20]
                break;
    1e40:	e008      	b.n	1e54 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1e42:	9b04      	ldr	r3, [sp, #16]
    1e44:	3301      	adds	r3, #1
    1e46:	9304      	str	r3, [sp, #16]
    1e48:	4b09      	ldr	r3, [pc, #36]	; (1e70 <Clock_Ip_GetPllStatus+0xf8>)
    1e4a:	78db      	ldrb	r3, [r3, #3]
    1e4c:	461a      	mov	r2, r3
    1e4e:	9b04      	ldr	r3, [sp, #16]
    1e50:	4293      	cmp	r3, r2
    1e52:	d3d1      	bcc.n	1df8 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    1e54:	9b05      	ldr	r3, [sp, #20]
}
    1e56:	4618      	mov	r0, r3
    1e58:	b007      	add	sp, #28
    1e5a:	f85d fb04 	ldr.w	pc, [sp], #4
    1e5e:	bf00      	nop
    1e60:	0000bf10 	.word	0x0000bf10
    1e64:	0000ba08 	.word	0x0000ba08
    1e68:	0000b9c8 	.word	0x0000b9c8
    1e6c:	0000c014 	.word	0x0000c014
    1e70:	1fff8bbc 	.word	0x1fff8bbc
    1e74:	0000bf14 	.word	0x0000bf14
    1e78:	0000b9b8 	.word	0x0000b9b8
    1e7c:	0000bf84 	.word	0x0000bf84

00001e80 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    1e80:	b500      	push	{lr}
    1e82:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1e84:	4b55      	ldr	r3, [pc, #340]	; (1fdc <Clock_Ip_DistributePll+0x15c>)
    1e86:	681b      	ldr	r3, [r3, #0]
    1e88:	2b00      	cmp	r3, #0
    1e8a:	f000 80a2 	beq.w	1fd2 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1e8e:	2300      	movs	r3, #0
    1e90:	9301      	str	r3, [sp, #4]
    1e92:	e02c      	b.n	1eee <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    1e94:	4b51      	ldr	r3, [pc, #324]	; (1fdc <Clock_Ip_DistributePll+0x15c>)
    1e96:	681a      	ldr	r2, [r3, #0]
    1e98:	9b01      	ldr	r3, [sp, #4]
    1e9a:	330d      	adds	r3, #13
    1e9c:	00db      	lsls	r3, r3, #3
    1e9e:	4413      	add	r3, r2
    1ea0:	685b      	ldr	r3, [r3, #4]
    1ea2:	4a4f      	ldr	r2, [pc, #316]	; (1fe0 <Clock_Ip_DistributePll+0x160>)
    1ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1ea8:	2b03      	cmp	r3, #3
    1eaa:	d11d      	bne.n	1ee8 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1eac:	4b4b      	ldr	r3, [pc, #300]	; (1fdc <Clock_Ip_DistributePll+0x15c>)
    1eae:	681b      	ldr	r3, [r3, #0]
    1eb0:	9a01      	ldr	r2, [sp, #4]
    1eb2:	320d      	adds	r2, #13
    1eb4:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1eb8:	494a      	ldr	r1, [pc, #296]	; (1fe4 <Clock_Ip_DistributePll+0x164>)
    1eba:	4613      	mov	r3, r2
    1ebc:	00db      	lsls	r3, r3, #3
    1ebe:	4413      	add	r3, r2
    1ec0:	440b      	add	r3, r1
    1ec2:	3301      	adds	r3, #1
    1ec4:	781b      	ldrb	r3, [r3, #0]
    1ec6:	461a      	mov	r2, r3
    1ec8:	4b47      	ldr	r3, [pc, #284]	; (1fe8 <Clock_Ip_DistributePll+0x168>)
    1eca:	5c9b      	ldrb	r3, [r3, r2]
    1ecc:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    1ece:	4a47      	ldr	r2, [pc, #284]	; (1fec <Clock_Ip_DistributePll+0x16c>)
    1ed0:	9b00      	ldr	r3, [sp, #0]
    1ed2:	00db      	lsls	r3, r3, #3
    1ed4:	4413      	add	r3, r2
    1ed6:	685b      	ldr	r3, [r3, #4]
    1ed8:	4a40      	ldr	r2, [pc, #256]	; (1fdc <Clock_Ip_DistributePll+0x15c>)
    1eda:	6811      	ldr	r1, [r2, #0]
    1edc:	9a01      	ldr	r2, [sp, #4]
    1ede:	320d      	adds	r2, #13
    1ee0:	00d2      	lsls	r2, r2, #3
    1ee2:	440a      	add	r2, r1
    1ee4:	4610      	mov	r0, r2
    1ee6:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1ee8:	9b01      	ldr	r3, [sp, #4]
    1eea:	3301      	adds	r3, #1
    1eec:	9301      	str	r3, [sp, #4]
    1eee:	4b3b      	ldr	r3, [pc, #236]	; (1fdc <Clock_Ip_DistributePll+0x15c>)
    1ef0:	681b      	ldr	r3, [r3, #0]
    1ef2:	7adb      	ldrb	r3, [r3, #11]
    1ef4:	461a      	mov	r2, r3
    1ef6:	9b01      	ldr	r3, [sp, #4]
    1ef8:	4293      	cmp	r3, r2
    1efa:	d3cb      	bcc.n	1e94 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    1efc:	4b3c      	ldr	r3, [pc, #240]	; (1ff0 <Clock_Ip_DistributePll+0x170>)
    1efe:	781b      	ldrb	r3, [r3, #0]
    1f00:	2b00      	cmp	r3, #0
    1f02:	d066      	beq.n	1fd2 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1f04:	2300      	movs	r3, #0
    1f06:	9301      	str	r3, [sp, #4]
    1f08:	e021      	b.n	1f4e <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1f0a:	4b34      	ldr	r3, [pc, #208]	; (1fdc <Clock_Ip_DistributePll+0x15c>)
    1f0c:	681a      	ldr	r2, [r3, #0]
    1f0e:	9b01      	ldr	r3, [sp, #4]
    1f10:	334e      	adds	r3, #78	; 0x4e
    1f12:	00db      	lsls	r3, r3, #3
    1f14:	4413      	add	r3, r2
    1f16:	685a      	ldr	r2, [r3, #4]
    1f18:	4932      	ldr	r1, [pc, #200]	; (1fe4 <Clock_Ip_DistributePll+0x164>)
    1f1a:	4613      	mov	r3, r2
    1f1c:	00db      	lsls	r3, r3, #3
    1f1e:	4413      	add	r3, r2
    1f20:	440b      	add	r3, r1
    1f22:	3301      	adds	r3, #1
    1f24:	781b      	ldrb	r3, [r3, #0]
    1f26:	461a      	mov	r2, r3
    1f28:	4b32      	ldr	r3, [pc, #200]	; (1ff4 <Clock_Ip_DistributePll+0x174>)
    1f2a:	5c9b      	ldrb	r3, [r3, r2]
    1f2c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    1f2e:	4a32      	ldr	r2, [pc, #200]	; (1ff8 <Clock_Ip_DistributePll+0x178>)
    1f30:	9b00      	ldr	r3, [sp, #0]
    1f32:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f36:	4a29      	ldr	r2, [pc, #164]	; (1fdc <Clock_Ip_DistributePll+0x15c>)
    1f38:	6811      	ldr	r1, [r2, #0]
    1f3a:	9a01      	ldr	r2, [sp, #4]
    1f3c:	324e      	adds	r2, #78	; 0x4e
    1f3e:	00d2      	lsls	r2, r2, #3
    1f40:	440a      	add	r2, r1
    1f42:	3204      	adds	r2, #4
    1f44:	4610      	mov	r0, r2
    1f46:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1f48:	9b01      	ldr	r3, [sp, #4]
    1f4a:	3301      	adds	r3, #1
    1f4c:	9301      	str	r3, [sp, #4]
    1f4e:	4b23      	ldr	r3, [pc, #140]	; (1fdc <Clock_Ip_DistributePll+0x15c>)
    1f50:	681b      	ldr	r3, [r3, #0]
    1f52:	7c1b      	ldrb	r3, [r3, #16]
    1f54:	461a      	mov	r2, r3
    1f56:	9b01      	ldr	r3, [sp, #4]
    1f58:	4293      	cmp	r3, r2
    1f5a:	d3d6      	bcc.n	1f0a <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1f5c:	2300      	movs	r3, #0
    1f5e:	9301      	str	r3, [sp, #4]
    1f60:	e02a      	b.n	1fb8 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1f62:	4b1e      	ldr	r3, [pc, #120]	; (1fdc <Clock_Ip_DistributePll+0x15c>)
    1f64:	6819      	ldr	r1, [r3, #0]
    1f66:	9a01      	ldr	r2, [sp, #4]
    1f68:	4613      	mov	r3, r2
    1f6a:	009b      	lsls	r3, r3, #2
    1f6c:	4413      	add	r3, r2
    1f6e:	009b      	lsls	r3, r3, #2
    1f70:	440b      	add	r3, r1
    1f72:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1f76:	681a      	ldr	r2, [r3, #0]
    1f78:	491a      	ldr	r1, [pc, #104]	; (1fe4 <Clock_Ip_DistributePll+0x164>)
    1f7a:	4613      	mov	r3, r2
    1f7c:	00db      	lsls	r3, r3, #3
    1f7e:	4413      	add	r3, r2
    1f80:	440b      	add	r3, r1
    1f82:	3301      	adds	r3, #1
    1f84:	781b      	ldrb	r3, [r3, #0]
    1f86:	461a      	mov	r2, r3
    1f88:	4b1c      	ldr	r3, [pc, #112]	; (1ffc <Clock_Ip_DistributePll+0x17c>)
    1f8a:	5c9b      	ldrb	r3, [r3, r2]
    1f8c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    1f8e:	4a1c      	ldr	r2, [pc, #112]	; (2000 <Clock_Ip_DistributePll+0x180>)
    1f90:	9b00      	ldr	r3, [sp, #0]
    1f92:	011b      	lsls	r3, r3, #4
    1f94:	4413      	add	r3, r2
    1f96:	330c      	adds	r3, #12
    1f98:	6819      	ldr	r1, [r3, #0]
    1f9a:	4b10      	ldr	r3, [pc, #64]	; (1fdc <Clock_Ip_DistributePll+0x15c>)
    1f9c:	6818      	ldr	r0, [r3, #0]
    1f9e:	9a01      	ldr	r2, [sp, #4]
    1fa0:	4613      	mov	r3, r2
    1fa2:	009b      	lsls	r3, r3, #2
    1fa4:	4413      	add	r3, r2
    1fa6:	009b      	lsls	r3, r3, #2
    1fa8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1fac:	4403      	add	r3, r0
    1fae:	4618      	mov	r0, r3
    1fb0:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1fb2:	9b01      	ldr	r3, [sp, #4]
    1fb4:	3301      	adds	r3, #1
    1fb6:	9301      	str	r3, [sp, #4]
    1fb8:	4b08      	ldr	r3, [pc, #32]	; (1fdc <Clock_Ip_DistributePll+0x15c>)
    1fba:	681b      	ldr	r3, [r3, #0]
    1fbc:	7c9b      	ldrb	r3, [r3, #18]
    1fbe:	461a      	mov	r2, r3
    1fc0:	9b01      	ldr	r3, [sp, #4]
    1fc2:	4293      	cmp	r3, r2
    1fc4:	d3cd      	bcc.n	1f62 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1fc6:	4b05      	ldr	r3, [pc, #20]	; (1fdc <Clock_Ip_DistributePll+0x15c>)
    1fc8:	681b      	ldr	r3, [r3, #0]
    1fca:	2104      	movs	r1, #4
    1fcc:	4618      	mov	r0, r3
    1fce:	f002 fe0b 	bl	4be8 <Clock_Ip_Command>
        }
    }
}
    1fd2:	bf00      	nop
    1fd4:	b003      	add	sp, #12
    1fd6:	f85d fb04 	ldr.w	pc, [sp], #4
    1fda:	bf00      	nop
    1fdc:	1fff8bb4 	.word	0x1fff8bb4
    1fe0:	0000be54 	.word	0x0000be54
    1fe4:	0000ba08 	.word	0x0000ba08
    1fe8:	0000b9d8 	.word	0x0000b9d8
    1fec:	0000c040 	.word	0x0000c040
    1ff0:	1fff8bbc 	.word	0x1fff8bbc
    1ff4:	0000b9a8 	.word	0x0000b9a8
    1ff8:	0000bf90 	.word	0x0000bf90
    1ffc:	0000b9f8 	.word	0x0000b9f8
    2000:	0000c004 	.word	0x0000c004

00002004 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2004:	b500      	push	{lr}
    2006:	b085      	sub	sp, #20
    2008:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    200a:	490c      	ldr	r1, [pc, #48]	; (203c <Clock_Ip_DisableClockMonitor+0x38>)
    200c:	9a01      	ldr	r2, [sp, #4]
    200e:	4613      	mov	r3, r2
    2010:	00db      	lsls	r3, r3, #3
    2012:	4413      	add	r3, r2
    2014:	440b      	add	r3, r1
    2016:	3301      	adds	r3, #1
    2018:	781b      	ldrb	r3, [r3, #0]
    201a:	461a      	mov	r2, r3
    201c:	4b08      	ldr	r3, [pc, #32]	; (2040 <Clock_Ip_DisableClockMonitor+0x3c>)
    201e:	5c9b      	ldrb	r3, [r3, r2]
    2020:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2022:	4a08      	ldr	r2, [pc, #32]	; (2044 <Clock_Ip_DisableClockMonitor+0x40>)
    2024:	9b03      	ldr	r3, [sp, #12]
    2026:	011b      	lsls	r3, r3, #4
    2028:	4413      	add	r3, r2
    202a:	3308      	adds	r3, #8
    202c:	681b      	ldr	r3, [r3, #0]
    202e:	9801      	ldr	r0, [sp, #4]
    2030:	4798      	blx	r3
}
    2032:	bf00      	nop
    2034:	b005      	add	sp, #20
    2036:	f85d fb04 	ldr.w	pc, [sp], #4
    203a:	bf00      	nop
    203c:	0000ba08 	.word	0x0000ba08
    2040:	0000b9f8 	.word	0x0000b9f8
    2044:	0000c004 	.word	0x0000c004

00002048 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2048:	b082      	sub	sp, #8
    204a:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    204c:	4a02      	ldr	r2, [pc, #8]	; (2058 <Clock_Ip_InstallNotificationsCallback+0x10>)
    204e:	9b01      	ldr	r3, [sp, #4]
    2050:	6013      	str	r3, [r2, #0]
}
    2052:	bf00      	nop
    2054:	b002      	add	sp, #8
    2056:	4770      	bx	lr
    2058:	1fff8b14 	.word	0x1fff8b14

0000205c <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    205c:	b500      	push	{lr}
    205e:	b085      	sub	sp, #20
    2060:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2062:	490c      	ldr	r1, [pc, #48]	; (2094 <Clock_Ip_DisableModuleClock+0x38>)
    2064:	9a01      	ldr	r2, [sp, #4]
    2066:	4613      	mov	r3, r2
    2068:	00db      	lsls	r3, r3, #3
    206a:	4413      	add	r3, r2
    206c:	440b      	add	r3, r1
    206e:	3301      	adds	r3, #1
    2070:	781b      	ldrb	r3, [r3, #0]
    2072:	461a      	mov	r2, r3
    2074:	4b08      	ldr	r3, [pc, #32]	; (2098 <Clock_Ip_DisableModuleClock+0x3c>)
    2076:	5c9b      	ldrb	r3, [r3, r2]
    2078:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    207a:	4a08      	ldr	r2, [pc, #32]	; (209c <Clock_Ip_DisableModuleClock+0x40>)
    207c:	9b03      	ldr	r3, [sp, #12]
    207e:	00db      	lsls	r3, r3, #3
    2080:	4413      	add	r3, r2
    2082:	685b      	ldr	r3, [r3, #4]
    2084:	2101      	movs	r1, #1
    2086:	9801      	ldr	r0, [sp, #4]
    2088:	4798      	blx	r3
}
    208a:	bf00      	nop
    208c:	b005      	add	sp, #20
    208e:	f85d fb04 	ldr.w	pc, [sp], #4
    2092:	bf00      	nop
    2094:	0000ba08 	.word	0x0000ba08
    2098:	0000b9a8 	.word	0x0000b9a8
    209c:	0000bf90 	.word	0x0000bf90

000020a0 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    20a0:	b500      	push	{lr}
    20a2:	b085      	sub	sp, #20
    20a4:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    20a6:	490c      	ldr	r1, [pc, #48]	; (20d8 <Clock_Ip_EnableModuleClock+0x38>)
    20a8:	9a01      	ldr	r2, [sp, #4]
    20aa:	4613      	mov	r3, r2
    20ac:	00db      	lsls	r3, r3, #3
    20ae:	4413      	add	r3, r2
    20b0:	440b      	add	r3, r1
    20b2:	3301      	adds	r3, #1
    20b4:	781b      	ldrb	r3, [r3, #0]
    20b6:	461a      	mov	r2, r3
    20b8:	4b08      	ldr	r3, [pc, #32]	; (20dc <Clock_Ip_EnableModuleClock+0x3c>)
    20ba:	5c9b      	ldrb	r3, [r3, r2]
    20bc:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    20be:	4a08      	ldr	r2, [pc, #32]	; (20e0 <Clock_Ip_EnableModuleClock+0x40>)
    20c0:	9b03      	ldr	r3, [sp, #12]
    20c2:	00db      	lsls	r3, r3, #3
    20c4:	4413      	add	r3, r2
    20c6:	685b      	ldr	r3, [r3, #4]
    20c8:	2100      	movs	r1, #0
    20ca:	9801      	ldr	r0, [sp, #4]
    20cc:	4798      	blx	r3
}
    20ce:	bf00      	nop
    20d0:	b005      	add	sp, #20
    20d2:	f85d fb04 	ldr.w	pc, [sp], #4
    20d6:	bf00      	nop
    20d8:	0000ba08 	.word	0x0000ba08
    20dc:	0000b9a8 	.word	0x0000b9a8
    20e0:	0000bf90 	.word	0x0000bf90

000020e4 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    20e4:	b500      	push	{lr}
    20e6:	b083      	sub	sp, #12
    20e8:	9001      	str	r0, [sp, #4]
    20ea:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    20ec:	4b08      	ldr	r3, [pc, #32]	; (2110 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    20ee:	2200      	movs	r2, #0
    20f0:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    20f2:	4b08      	ldr	r3, [pc, #32]	; (2114 <Clock_Ip_PowerModeChangeNotification+0x30>)
    20f4:	681b      	ldr	r3, [r3, #0]
    20f6:	2102      	movs	r1, #2
    20f8:	4618      	mov	r0, r3
    20fa:	f002 fd75 	bl	4be8 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    20fe:	9900      	ldr	r1, [sp, #0]
    2100:	9801      	ldr	r0, [sp, #4]
    2102:	f002 fc51 	bl	49a8 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2106:	bf00      	nop
    2108:	b003      	add	sp, #12
    210a:	f85d fb04 	ldr.w	pc, [sp], #4
    210e:	bf00      	nop
    2110:	1fff8b10 	.word	0x1fff8b10
    2114:	1fff8bb4 	.word	0x1fff8bb4

00002118 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2118:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    211a:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    211e:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2120:	4b06      	ldr	r3, [pc, #24]	; (213c <Clock_Ip_SetWaitStates+0x24>)
    2122:	785b      	ldrb	r3, [r3, #1]
    2124:	2b00      	cmp	r3, #0
    2126:	d005      	beq.n	2134 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2128:	9b01      	ldr	r3, [sp, #4]
    212a:	3b01      	subs	r3, #1
    212c:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    212e:	9b01      	ldr	r3, [sp, #4]
    2130:	2b00      	cmp	r3, #0
    2132:	d1f9      	bne.n	2128 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2134:	bf00      	nop
    2136:	b002      	add	sp, #8
    2138:	4770      	bx	lr
    213a:	bf00      	nop
    213c:	1fff8bbc 	.word	0x1fff8bbc

00002140 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2140:	b500      	push	{lr}
    2142:	b083      	sub	sp, #12
    2144:	9001      	str	r0, [sp, #4]
    2146:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2148:	4b04      	ldr	r3, [pc, #16]	; (215c <Clock_Ip_ReportClockErrors+0x1c>)
    214a:	681b      	ldr	r3, [r3, #0]
    214c:	9900      	ldr	r1, [sp, #0]
    214e:	9801      	ldr	r0, [sp, #4]
    2150:	4798      	blx	r3
}
    2152:	bf00      	nop
    2154:	b003      	add	sp, #12
    2156:	f85d fb04 	ldr.w	pc, [sp], #4
    215a:	bf00      	nop
    215c:	1fff8b14 	.word	0x1fff8b14

00002160 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2160:	b500      	push	{lr}
    2162:	b085      	sub	sp, #20
    2164:	9003      	str	r0, [sp, #12]
    2166:	9102      	str	r1, [sp, #8]
    2168:	9201      	str	r2, [sp, #4]
    216a:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    216c:	2000      	movs	r0, #0
    216e:	f7fe ffd1 	bl	1114 <OsIf_GetCounter>
    2172:	4602      	mov	r2, r0
    2174:	9b03      	ldr	r3, [sp, #12]
    2176:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2178:	9b02      	ldr	r3, [sp, #8]
    217a:	2200      	movs	r2, #0
    217c:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    217e:	2100      	movs	r1, #0
    2180:	9800      	ldr	r0, [sp, #0]
    2182:	f7ff f813 	bl	11ac <OsIf_MicrosToTicks>
    2186:	4602      	mov	r2, r0
    2188:	9b01      	ldr	r3, [sp, #4]
    218a:	601a      	str	r2, [r3, #0]
}
    218c:	bf00      	nop
    218e:	b005      	add	sp, #20
    2190:	f85d fb04 	ldr.w	pc, [sp], #4

00002194 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2194:	b500      	push	{lr}
    2196:	b087      	sub	sp, #28
    2198:	9003      	str	r0, [sp, #12]
    219a:	9102      	str	r1, [sp, #8]
    219c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    219e:	2300      	movs	r3, #0
    21a0:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    21a4:	2100      	movs	r1, #0
    21a6:	9803      	ldr	r0, [sp, #12]
    21a8:	f7fe ffcd 	bl	1146 <OsIf_GetElapsed>
    21ac:	4602      	mov	r2, r0
    21ae:	9b02      	ldr	r3, [sp, #8]
    21b0:	681b      	ldr	r3, [r3, #0]
    21b2:	441a      	add	r2, r3
    21b4:	9b02      	ldr	r3, [sp, #8]
    21b6:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    21b8:	9b02      	ldr	r3, [sp, #8]
    21ba:	681b      	ldr	r3, [r3, #0]
    21bc:	9a01      	ldr	r2, [sp, #4]
    21be:	429a      	cmp	r2, r3
    21c0:	d802      	bhi.n	21c8 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    21c2:	2301      	movs	r3, #1
    21c4:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    21c8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    21cc:	4618      	mov	r0, r3
    21ce:	b007      	add	sp, #28
    21d0:	f85d fb04 	ldr.w	pc, [sp], #4

000021d4 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    21d4:	b082      	sub	sp, #8
    21d6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    21d8:	bf00      	nop
    21da:	b002      	add	sp, #8
    21dc:	4770      	bx	lr

000021de <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    21de:	b500      	push	{lr}
    21e0:	b083      	sub	sp, #12
    21e2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21e4:	9b01      	ldr	r3, [sp, #4]
    21e6:	2b00      	cmp	r3, #0
    21e8:	d002      	beq.n	21f0 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    21ea:	9801      	ldr	r0, [sp, #4]
    21ec:	f000 f8ad 	bl	234a <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    21f0:	bf00      	nop
    21f2:	b003      	add	sp, #12
    21f4:	f85d fb04 	ldr.w	pc, [sp], #4

000021f8 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    21f8:	b500      	push	{lr}
    21fa:	b083      	sub	sp, #12
    21fc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21fe:	9b01      	ldr	r3, [sp, #4]
    2200:	2b00      	cmp	r3, #0
    2202:	d002      	beq.n	220a <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2204:	9801      	ldr	r0, [sp, #4]
    2206:	f000 f8cd 	bl	23a4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    220a:	bf00      	nop
    220c:	b003      	add	sp, #12
    220e:	f85d fb04 	ldr.w	pc, [sp], #4

00002212 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2212:	b500      	push	{lr}
    2214:	b083      	sub	sp, #12
    2216:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2218:	9b01      	ldr	r3, [sp, #4]
    221a:	2b00      	cmp	r3, #0
    221c:	d002      	beq.n	2224 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    221e:	9801      	ldr	r0, [sp, #4]
    2220:	f000 f8ee 	bl	2400 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2224:	bf00      	nop
    2226:	b003      	add	sp, #12
    2228:	f85d fb04 	ldr.w	pc, [sp], #4

0000222c <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    222c:	b500      	push	{lr}
    222e:	b083      	sub	sp, #12
    2230:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2232:	9b01      	ldr	r3, [sp, #4]
    2234:	2b00      	cmp	r3, #0
    2236:	d002      	beq.n	223e <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2238:	9801      	ldr	r0, [sp, #4]
    223a:	f000 f8f9 	bl	2430 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    223e:	bf00      	nop
    2240:	b003      	add	sp, #12
    2242:	f85d fb04 	ldr.w	pc, [sp], #4

00002246 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2246:	b500      	push	{lr}
    2248:	b083      	sub	sp, #12
    224a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    224c:	9b01      	ldr	r3, [sp, #4]
    224e:	2b00      	cmp	r3, #0
    2250:	d002      	beq.n	2258 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2252:	9801      	ldr	r0, [sp, #4]
    2254:	f000 f904 	bl	2460 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2258:	bf00      	nop
    225a:	b003      	add	sp, #12
    225c:	f85d fb04 	ldr.w	pc, [sp], #4

00002260 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2260:	b500      	push	{lr}
    2262:	b083      	sub	sp, #12
    2264:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2266:	9b01      	ldr	r3, [sp, #4]
    2268:	2b00      	cmp	r3, #0
    226a:	d002      	beq.n	2272 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    226c:	9801      	ldr	r0, [sp, #4]
    226e:	f000 f90f 	bl	2490 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2272:	bf00      	nop
    2274:	b003      	add	sp, #12
    2276:	f85d fb04 	ldr.w	pc, [sp], #4

0000227a <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    227a:	b500      	push	{lr}
    227c:	b083      	sub	sp, #12
    227e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2280:	9b01      	ldr	r3, [sp, #4]
    2282:	2b00      	cmp	r3, #0
    2284:	d002      	beq.n	228c <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2286:	9801      	ldr	r0, [sp, #4]
    2288:	f000 f91a 	bl	24c0 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    228c:	bf00      	nop
    228e:	b003      	add	sp, #12
    2290:	f85d fb04 	ldr.w	pc, [sp], #4

00002294 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2294:	b500      	push	{lr}
    2296:	b083      	sub	sp, #12
    2298:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    229a:	9b01      	ldr	r3, [sp, #4]
    229c:	2b00      	cmp	r3, #0
    229e:	d002      	beq.n	22a6 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    22a0:	9801      	ldr	r0, [sp, #4]
    22a2:	f000 f925 	bl	24f0 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22a6:	bf00      	nop
    22a8:	b003      	add	sp, #12
    22aa:	f85d fb04 	ldr.w	pc, [sp], #4

000022ae <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    22ae:	b500      	push	{lr}
    22b0:	b083      	sub	sp, #12
    22b2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22b4:	9b01      	ldr	r3, [sp, #4]
    22b6:	2b00      	cmp	r3, #0
    22b8:	d002      	beq.n	22c0 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    22ba:	9801      	ldr	r0, [sp, #4]
    22bc:	f000 f930 	bl	2520 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22c0:	bf00      	nop
    22c2:	b003      	add	sp, #12
    22c4:	f85d fb04 	ldr.w	pc, [sp], #4

000022c8 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    22c8:	b500      	push	{lr}
    22ca:	b083      	sub	sp, #12
    22cc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22ce:	9b01      	ldr	r3, [sp, #4]
    22d0:	2b00      	cmp	r3, #0
    22d2:	d002      	beq.n	22da <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    22d4:	9801      	ldr	r0, [sp, #4]
    22d6:	f000 f93b 	bl	2550 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22da:	bf00      	nop
    22dc:	b003      	add	sp, #12
    22de:	f85d fb04 	ldr.w	pc, [sp], #4

000022e2 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    22e2:	b500      	push	{lr}
    22e4:	b083      	sub	sp, #12
    22e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22e8:	9b01      	ldr	r3, [sp, #4]
    22ea:	2b00      	cmp	r3, #0
    22ec:	d002      	beq.n	22f4 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    22ee:	9801      	ldr	r0, [sp, #4]
    22f0:	f000 f946 	bl	2580 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22f4:	bf00      	nop
    22f6:	b003      	add	sp, #12
    22f8:	f85d fb04 	ldr.w	pc, [sp], #4

000022fc <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    22fc:	b500      	push	{lr}
    22fe:	b083      	sub	sp, #12
    2300:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2302:	9b01      	ldr	r3, [sp, #4]
    2304:	2b00      	cmp	r3, #0
    2306:	d002      	beq.n	230e <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2308:	9801      	ldr	r0, [sp, #4]
    230a:	f000 f951 	bl	25b0 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    230e:	bf00      	nop
    2310:	b003      	add	sp, #12
    2312:	f85d fb04 	ldr.w	pc, [sp], #4

00002316 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2316:	b500      	push	{lr}
    2318:	b083      	sub	sp, #12
    231a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    231c:	9b01      	ldr	r3, [sp, #4]
    231e:	2b00      	cmp	r3, #0
    2320:	d002      	beq.n	2328 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2322:	9801      	ldr	r0, [sp, #4]
    2324:	f000 f95e 	bl	25e4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2328:	bf00      	nop
    232a:	b003      	add	sp, #12
    232c:	f85d fb04 	ldr.w	pc, [sp], #4

00002330 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2330:	b500      	push	{lr}
    2332:	b083      	sub	sp, #12
    2334:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2336:	9b01      	ldr	r3, [sp, #4]
    2338:	2b00      	cmp	r3, #0
    233a:	d002      	beq.n	2342 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    233c:	9801      	ldr	r0, [sp, #4]
    233e:	f000 f98b 	bl	2658 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2342:	bf00      	nop
    2344:	b003      	add	sp, #12
    2346:	f85d fb04 	ldr.w	pc, [sp], #4

0000234a <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    234a:	b086      	sub	sp, #24
    234c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    234e:	9b01      	ldr	r3, [sp, #4]
    2350:	681a      	ldr	r2, [r3, #0]
    2352:	4911      	ldr	r1, [pc, #68]	; (2398 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2354:	4613      	mov	r3, r2
    2356:	00db      	lsls	r3, r3, #3
    2358:	4413      	add	r3, r2
    235a:	440b      	add	r3, r1
    235c:	781b      	ldrb	r3, [r3, #0]
    235e:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2360:	9b01      	ldr	r3, [sp, #4]
    2362:	685b      	ldr	r3, [r3, #4]
    2364:	4a0d      	ldr	r2, [pc, #52]	; (239c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2366:	5cd3      	ldrb	r3, [r2, r3]
    2368:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    236a:	4a0d      	ldr	r2, [pc, #52]	; (23a0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    236c:	9b05      	ldr	r3, [sp, #20]
    236e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2372:	681b      	ldr	r3, [r3, #0]
    2374:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2376:	9b03      	ldr	r3, [sp, #12]
    2378:	f023 0307 	bic.w	r3, r3, #7
    237c:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    237e:	9a03      	ldr	r2, [sp, #12]
    2380:	9b04      	ldr	r3, [sp, #16]
    2382:	4313      	orrs	r3, r2
    2384:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2386:	4a06      	ldr	r2, [pc, #24]	; (23a0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2388:	9b05      	ldr	r3, [sp, #20]
    238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    238e:	9a03      	ldr	r2, [sp, #12]
    2390:	601a      	str	r2, [r3, #0]
}
    2392:	bf00      	nop
    2394:	b006      	add	sp, #24
    2396:	4770      	bx	lr
    2398:	0000ba08 	.word	0x0000ba08
    239c:	0000be00 	.word	0x0000be00
    23a0:	0000be44 	.word	0x0000be44

000023a4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    23a4:	b086      	sub	sp, #24
    23a6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    23a8:	9b01      	ldr	r3, [sp, #4]
    23aa:	681a      	ldr	r2, [r3, #0]
    23ac:	4911      	ldr	r1, [pc, #68]	; (23f4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    23ae:	4613      	mov	r3, r2
    23b0:	00db      	lsls	r3, r3, #3
    23b2:	4413      	add	r3, r2
    23b4:	440b      	add	r3, r1
    23b6:	781b      	ldrb	r3, [r3, #0]
    23b8:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    23ba:	9b01      	ldr	r3, [sp, #4]
    23bc:	685b      	ldr	r3, [r3, #4]
    23be:	4a0e      	ldr	r2, [pc, #56]	; (23f8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    23c0:	5cd3      	ldrb	r3, [r2, r3]
    23c2:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    23c4:	4a0d      	ldr	r2, [pc, #52]	; (23fc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    23c6:	9b05      	ldr	r3, [sp, #20]
    23c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    23cc:	681b      	ldr	r3, [r3, #0]
    23ce:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    23d0:	9b03      	ldr	r3, [sp, #12]
    23d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    23d6:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    23d8:	9b04      	ldr	r3, [sp, #16]
    23da:	021b      	lsls	r3, r3, #8
    23dc:	9a03      	ldr	r2, [sp, #12]
    23de:	4313      	orrs	r3, r2
    23e0:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    23e2:	4a06      	ldr	r2, [pc, #24]	; (23fc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    23e4:	9b05      	ldr	r3, [sp, #20]
    23e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    23ea:	9a03      	ldr	r2, [sp, #12]
    23ec:	601a      	str	r2, [r3, #0]
}
    23ee:	bf00      	nop
    23f0:	b006      	add	sp, #24
    23f2:	4770      	bx	lr
    23f4:	0000ba08 	.word	0x0000ba08
    23f8:	0000be00 	.word	0x0000be00
    23fc:	0000be44 	.word	0x0000be44

00002400 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2400:	b084      	sub	sp, #16
    2402:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2404:	4b09      	ldr	r3, [pc, #36]	; (242c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2406:	695b      	ldr	r3, [r3, #20]
    2408:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    240a:	9b03      	ldr	r3, [sp, #12]
    240c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2410:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2412:	9b01      	ldr	r3, [sp, #4]
    2414:	685b      	ldr	r3, [r3, #4]
    2416:	3b01      	subs	r3, #1
    2418:	041b      	lsls	r3, r3, #16
    241a:	9a03      	ldr	r2, [sp, #12]
    241c:	4313      	orrs	r3, r2
    241e:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2420:	4a02      	ldr	r2, [pc, #8]	; (242c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2422:	9b03      	ldr	r3, [sp, #12]
    2424:	6153      	str	r3, [r2, #20]
}
    2426:	bf00      	nop
    2428:	b004      	add	sp, #16
    242a:	4770      	bx	lr
    242c:	40064000 	.word	0x40064000

00002430 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2430:	b084      	sub	sp, #16
    2432:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2434:	4b09      	ldr	r3, [pc, #36]	; (245c <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2436:	695b      	ldr	r3, [r3, #20]
    2438:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    243a:	9b03      	ldr	r3, [sp, #12]
    243c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2440:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2442:	9b01      	ldr	r3, [sp, #4]
    2444:	685b      	ldr	r3, [r3, #4]
    2446:	3b01      	subs	r3, #1
    2448:	011b      	lsls	r3, r3, #4
    244a:	9a03      	ldr	r2, [sp, #12]
    244c:	4313      	orrs	r3, r2
    244e:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2450:	4a02      	ldr	r2, [pc, #8]	; (245c <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2452:	9b03      	ldr	r3, [sp, #12]
    2454:	6153      	str	r3, [r2, #20]
}
    2456:	bf00      	nop
    2458:	b004      	add	sp, #16
    245a:	4770      	bx	lr
    245c:	40064000 	.word	0x40064000

00002460 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2460:	b084      	sub	sp, #16
    2462:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2464:	4b09      	ldr	r3, [pc, #36]	; (248c <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2466:	695b      	ldr	r3, [r3, #20]
    2468:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    246a:	9b03      	ldr	r3, [sp, #12]
    246c:	f023 030f 	bic.w	r3, r3, #15
    2470:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2472:	9b01      	ldr	r3, [sp, #4]
    2474:	685b      	ldr	r3, [r3, #4]
    2476:	3b01      	subs	r3, #1
    2478:	9a03      	ldr	r2, [sp, #12]
    247a:	4313      	orrs	r3, r2
    247c:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    247e:	4a03      	ldr	r2, [pc, #12]	; (248c <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2480:	9b03      	ldr	r3, [sp, #12]
    2482:	6153      	str	r3, [r2, #20]
}
    2484:	bf00      	nop
    2486:	b004      	add	sp, #16
    2488:	4770      	bx	lr
    248a:	bf00      	nop
    248c:	40064000 	.word	0x40064000

00002490 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2490:	b084      	sub	sp, #16
    2492:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2494:	4b09      	ldr	r3, [pc, #36]	; (24bc <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2496:	699b      	ldr	r3, [r3, #24]
    2498:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    249a:	9b03      	ldr	r3, [sp, #12]
    249c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    24a0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    24a2:	9b01      	ldr	r3, [sp, #4]
    24a4:	685b      	ldr	r3, [r3, #4]
    24a6:	3b01      	subs	r3, #1
    24a8:	041b      	lsls	r3, r3, #16
    24aa:	9a03      	ldr	r2, [sp, #12]
    24ac:	4313      	orrs	r3, r2
    24ae:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    24b0:	4a02      	ldr	r2, [pc, #8]	; (24bc <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    24b2:	9b03      	ldr	r3, [sp, #12]
    24b4:	6193      	str	r3, [r2, #24]
}
    24b6:	bf00      	nop
    24b8:	b004      	add	sp, #16
    24ba:	4770      	bx	lr
    24bc:	40064000 	.word	0x40064000

000024c0 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24c0:	b084      	sub	sp, #16
    24c2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    24c4:	4b09      	ldr	r3, [pc, #36]	; (24ec <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    24c6:	699b      	ldr	r3, [r3, #24]
    24c8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    24ca:	9b03      	ldr	r3, [sp, #12]
    24cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    24d0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    24d2:	9b01      	ldr	r3, [sp, #4]
    24d4:	685b      	ldr	r3, [r3, #4]
    24d6:	3b01      	subs	r3, #1
    24d8:	011b      	lsls	r3, r3, #4
    24da:	9a03      	ldr	r2, [sp, #12]
    24dc:	4313      	orrs	r3, r2
    24de:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    24e0:	4a02      	ldr	r2, [pc, #8]	; (24ec <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    24e2:	9b03      	ldr	r3, [sp, #12]
    24e4:	6193      	str	r3, [r2, #24]
}
    24e6:	bf00      	nop
    24e8:	b004      	add	sp, #16
    24ea:	4770      	bx	lr
    24ec:	40064000 	.word	0x40064000

000024f0 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24f0:	b084      	sub	sp, #16
    24f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    24f4:	4b09      	ldr	r3, [pc, #36]	; (251c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    24f6:	699b      	ldr	r3, [r3, #24]
    24f8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    24fa:	9b03      	ldr	r3, [sp, #12]
    24fc:	f023 030f 	bic.w	r3, r3, #15
    2500:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2502:	9b01      	ldr	r3, [sp, #4]
    2504:	685b      	ldr	r3, [r3, #4]
    2506:	3b01      	subs	r3, #1
    2508:	9a03      	ldr	r2, [sp, #12]
    250a:	4313      	orrs	r3, r2
    250c:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    250e:	4a03      	ldr	r2, [pc, #12]	; (251c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2510:	9b03      	ldr	r3, [sp, #12]
    2512:	6193      	str	r3, [r2, #24]
}
    2514:	bf00      	nop
    2516:	b004      	add	sp, #16
    2518:	4770      	bx	lr
    251a:	bf00      	nop
    251c:	40064000 	.word	0x40064000

00002520 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2520:	b084      	sub	sp, #16
    2522:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2524:	4b09      	ldr	r3, [pc, #36]	; (254c <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2526:	69db      	ldr	r3, [r3, #28]
    2528:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    252a:	9b03      	ldr	r3, [sp, #12]
    252c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2530:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2532:	9b01      	ldr	r3, [sp, #4]
    2534:	685b      	ldr	r3, [r3, #4]
    2536:	3b01      	subs	r3, #1
    2538:	041b      	lsls	r3, r3, #16
    253a:	9a03      	ldr	r2, [sp, #12]
    253c:	4313      	orrs	r3, r2
    253e:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2540:	4a02      	ldr	r2, [pc, #8]	; (254c <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2542:	9b03      	ldr	r3, [sp, #12]
    2544:	61d3      	str	r3, [r2, #28]
}
    2546:	bf00      	nop
    2548:	b004      	add	sp, #16
    254a:	4770      	bx	lr
    254c:	40064000 	.word	0x40064000

00002550 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2550:	b084      	sub	sp, #16
    2552:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2554:	4b09      	ldr	r3, [pc, #36]	; (257c <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2556:	69db      	ldr	r3, [r3, #28]
    2558:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    255a:	9b03      	ldr	r3, [sp, #12]
    255c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2560:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2562:	9b01      	ldr	r3, [sp, #4]
    2564:	685b      	ldr	r3, [r3, #4]
    2566:	3b01      	subs	r3, #1
    2568:	011b      	lsls	r3, r3, #4
    256a:	9a03      	ldr	r2, [sp, #12]
    256c:	4313      	orrs	r3, r2
    256e:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2570:	4a02      	ldr	r2, [pc, #8]	; (257c <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2572:	9b03      	ldr	r3, [sp, #12]
    2574:	61d3      	str	r3, [r2, #28]
}
    2576:	bf00      	nop
    2578:	b004      	add	sp, #16
    257a:	4770      	bx	lr
    257c:	40064000 	.word	0x40064000

00002580 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2580:	b084      	sub	sp, #16
    2582:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2584:	4b09      	ldr	r3, [pc, #36]	; (25ac <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2586:	69db      	ldr	r3, [r3, #28]
    2588:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    258a:	9b03      	ldr	r3, [sp, #12]
    258c:	f023 030f 	bic.w	r3, r3, #15
    2590:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    2592:	9b01      	ldr	r3, [sp, #4]
    2594:	685b      	ldr	r3, [r3, #4]
    2596:	3b01      	subs	r3, #1
    2598:	9a03      	ldr	r2, [sp, #12]
    259a:	4313      	orrs	r3, r2
    259c:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    259e:	4a03      	ldr	r2, [pc, #12]	; (25ac <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    25a0:	9b03      	ldr	r3, [sp, #12]
    25a2:	61d3      	str	r3, [r2, #28]
}
    25a4:	bf00      	nop
    25a6:	b004      	add	sp, #16
    25a8:	4770      	bx	lr
    25aa:	bf00      	nop
    25ac:	40064000 	.word	0x40064000

000025b0 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    25b0:	b084      	sub	sp, #16
    25b2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    25b4:	4b0a      	ldr	r3, [pc, #40]	; (25e0 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    25b6:	685b      	ldr	r3, [r3, #4]
    25b8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    25ba:	9b03      	ldr	r3, [sp, #12]
    25bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    25c0:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    25c2:	9b01      	ldr	r3, [sp, #4]
    25c4:	685b      	ldr	r3, [r3, #4]
    25c6:	3b01      	subs	r3, #1
    25c8:	021b      	lsls	r3, r3, #8
    25ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    25ce:	9a03      	ldr	r2, [sp, #12]
    25d0:	4313      	orrs	r3, r2
    25d2:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    25d4:	4a02      	ldr	r2, [pc, #8]	; (25e0 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    25d6:	9b03      	ldr	r3, [sp, #12]
    25d8:	6053      	str	r3, [r2, #4]
}
    25da:	bf00      	nop
    25dc:	b004      	add	sp, #16
    25de:	4770      	bx	lr
    25e0:	40048000 	.word	0x40048000

000025e4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    25e4:	b084      	sub	sp, #16
    25e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    25e8:	4919      	ldr	r1, [pc, #100]	; (2650 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    25ea:	9b01      	ldr	r3, [sp, #4]
    25ec:	681a      	ldr	r2, [r3, #0]
    25ee:	4819      	ldr	r0, [pc, #100]	; (2654 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    25f0:	4613      	mov	r3, r2
    25f2:	00db      	lsls	r3, r3, #3
    25f4:	4413      	add	r3, r2
    25f6:	4403      	add	r3, r0
    25f8:	3305      	adds	r3, #5
    25fa:	781b      	ldrb	r3, [r3, #0]
    25fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2600:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    2602:	9b03      	ldr	r3, [sp, #12]
    2604:	f023 030f 	bic.w	r3, r3, #15
    2608:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    260a:	9b01      	ldr	r3, [sp, #4]
    260c:	685b      	ldr	r3, [r3, #4]
    260e:	3b01      	subs	r3, #1
    2610:	f003 0307 	and.w	r3, r3, #7
    2614:	9a03      	ldr	r2, [sp, #12]
    2616:	4313      	orrs	r3, r2
    2618:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    261a:	9b01      	ldr	r3, [sp, #4]
    261c:	7a1b      	ldrb	r3, [r3, #8]
    261e:	3b01      	subs	r3, #1
    2620:	00db      	lsls	r3, r3, #3
    2622:	f003 0308 	and.w	r3, r3, #8
    2626:	9a03      	ldr	r2, [sp, #12]
    2628:	4313      	orrs	r3, r2
    262a:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    262c:	4908      	ldr	r1, [pc, #32]	; (2650 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    262e:	9b01      	ldr	r3, [sp, #4]
    2630:	681a      	ldr	r2, [r3, #0]
    2632:	4808      	ldr	r0, [pc, #32]	; (2654 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2634:	4613      	mov	r3, r2
    2636:	00db      	lsls	r3, r3, #3
    2638:	4413      	add	r3, r2
    263a:	4403      	add	r3, r0
    263c:	3305      	adds	r3, #5
    263e:	781b      	ldrb	r3, [r3, #0]
    2640:	461a      	mov	r2, r3
    2642:	9b03      	ldr	r3, [sp, #12]
    2644:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    2648:	bf00      	nop
    264a:	b004      	add	sp, #16
    264c:	4770      	bx	lr
    264e:	bf00      	nop
    2650:	40065000 	.word	0x40065000
    2654:	0000ba08 	.word	0x0000ba08

00002658 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2658:	b084      	sub	sp, #16
    265a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    265c:	4b10      	ldr	r3, [pc, #64]	; (26a0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    265e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2660:	4a0f      	ldr	r2, [pc, #60]	; (26a0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2666:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    2668:	4b0d      	ldr	r3, [pc, #52]	; (26a0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    266a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    266c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    266e:	9b03      	ldr	r3, [sp, #12]
    2670:	f023 030f 	bic.w	r3, r3, #15
    2674:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2676:	9b01      	ldr	r3, [sp, #4]
    2678:	685b      	ldr	r3, [r3, #4]
    267a:	3b01      	subs	r3, #1
    267c:	005b      	lsls	r3, r3, #1
    267e:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    2682:	9b01      	ldr	r3, [sp, #4]
    2684:	7a1b      	ldrb	r3, [r3, #8]
    2686:	3b01      	subs	r3, #1
    2688:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    268c:	4313      	orrs	r3, r2
    268e:	9a03      	ldr	r2, [sp, #12]
    2690:	4313      	orrs	r3, r2
    2692:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    2694:	4a02      	ldr	r2, [pc, #8]	; (26a0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2696:	9b03      	ldr	r3, [sp, #12]
    2698:	6693      	str	r3, [r2, #104]	; 0x68
}
    269a:	bf00      	nop
    269c:	b004      	add	sp, #16
    269e:	4770      	bx	lr
    26a0:	40048000 	.word	0x40048000

000026a4 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    26a4:	b082      	sub	sp, #8
    26a6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    26a8:	bf00      	nop
    26aa:	b002      	add	sp, #8
    26ac:	4770      	bx	lr
	...

000026b0 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    26b0:	b082      	sub	sp, #8
    26b2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    26b4:	bf00      	nop
    26b6:	b002      	add	sp, #8
    26b8:	4770      	bx	lr

000026ba <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    26ba:	b082      	sub	sp, #8
    26bc:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    26be:	bf00      	nop
    26c0:	b002      	add	sp, #8
    26c2:	4770      	bx	lr

000026c4 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    26c4:	b500      	push	{lr}
    26c6:	b083      	sub	sp, #12
    26c8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26ca:	9b01      	ldr	r3, [sp, #4]
    26cc:	2b00      	cmp	r3, #0
    26ce:	d002      	beq.n	26d6 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    26d0:	9801      	ldr	r0, [sp, #4]
    26d2:	f000 f86a 	bl	27aa <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    26d6:	bf00      	nop
    26d8:	b003      	add	sp, #12
    26da:	f85d fb04 	ldr.w	pc, [sp], #4

000026de <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    26de:	b500      	push	{lr}
    26e0:	b083      	sub	sp, #12
    26e2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26e4:	9b01      	ldr	r3, [sp, #4]
    26e6:	2b00      	cmp	r3, #0
    26e8:	d002      	beq.n	26f0 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    26ea:	9801      	ldr	r0, [sp, #4]
    26ec:	f000 f884 	bl	27f8 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    26f0:	bf00      	nop
    26f2:	b003      	add	sp, #12
    26f4:	f85d fb04 	ldr.w	pc, [sp], #4

000026f8 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    26f8:	b500      	push	{lr}
    26fa:	b089      	sub	sp, #36	; 0x24
    26fc:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    26fe:	2300      	movs	r3, #0
    2700:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    2704:	9b01      	ldr	r3, [sp, #4]
    2706:	2b00      	cmp	r3, #0
    2708:	d031      	beq.n	276e <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    270a:	4b1b      	ldr	r3, [pc, #108]	; (2778 <Clock_Ip_CompleteSOSC+0x80>)
    270c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2710:	f003 0301 	and.w	r3, r3, #1
    2714:	2b00      	cmp	r3, #0
    2716:	d02a      	beq.n	276e <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2718:	aa03      	add	r2, sp, #12
    271a:	a904      	add	r1, sp, #16
    271c:	a805      	add	r0, sp, #20
    271e:	f24c 3350 	movw	r3, #50000	; 0xc350
    2722:	f7ff fd1d 	bl	2160 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    2726:	4b14      	ldr	r3, [pc, #80]	; (2778 <Clock_Ip_CompleteSOSC+0x80>)
    2728:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    272c:	0e1b      	lsrs	r3, r3, #24
    272e:	f003 0301 	and.w	r3, r3, #1
    2732:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2734:	9a03      	ldr	r2, [sp, #12]
    2736:	a904      	add	r1, sp, #16
    2738:	ab05      	add	r3, sp, #20
    273a:	4618      	mov	r0, r3
    273c:	f7ff fd2a 	bl	2194 <Clock_Ip_TimeoutExpired>
    2740:	4603      	mov	r3, r0
    2742:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    2746:	9b06      	ldr	r3, [sp, #24]
    2748:	2b00      	cmp	r3, #0
    274a:	d106      	bne.n	275a <Clock_Ip_CompleteSOSC+0x62>
    274c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2750:	f083 0301 	eor.w	r3, r3, #1
    2754:	b2db      	uxtb	r3, r3
    2756:	2b00      	cmp	r3, #0
    2758:	d1e5      	bne.n	2726 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    275a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    275e:	2b00      	cmp	r3, #0
    2760:	d005      	beq.n	276e <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2762:	9b01      	ldr	r3, [sp, #4]
    2764:	681b      	ldr	r3, [r3, #0]
    2766:	4619      	mov	r1, r3
    2768:	2001      	movs	r0, #1
    276a:	f7ff fce9 	bl	2140 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    276e:	bf00      	nop
    2770:	b009      	add	sp, #36	; 0x24
    2772:	f85d fb04 	ldr.w	pc, [sp], #4
    2776:	bf00      	nop
    2778:	40064000 	.word	0x40064000

0000277c <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    277c:	b500      	push	{lr}
    277e:	b083      	sub	sp, #12
    2780:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    2782:	9801      	ldr	r0, [sp, #4]
    2784:	f000 f8c0 	bl	2908 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2788:	bf00      	nop
    278a:	b003      	add	sp, #12
    278c:	f85d fb04 	ldr.w	pc, [sp], #4

00002790 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2790:	b500      	push	{lr}
    2792:	b083      	sub	sp, #12
    2794:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2796:	9b01      	ldr	r3, [sp, #4]
    2798:	2b00      	cmp	r3, #0
    279a:	d002      	beq.n	27a2 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    279c:	9801      	ldr	r0, [sp, #4]
    279e:	f000 f8c3 	bl	2928 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    27a2:	bf00      	nop
    27a4:	b003      	add	sp, #12
    27a6:	f85d fb04 	ldr.w	pc, [sp], #4

000027aa <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    27aa:	b082      	sub	sp, #8
    27ac:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    27ae:	4b11      	ldr	r3, [pc, #68]	; (27f4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27b4:	4a0f      	ldr	r2, [pc, #60]	; (27f4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    27ba:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    27be:	4b0d      	ldr	r3, [pc, #52]	; (27f4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27c0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27c4:	4a0b      	ldr	r2, [pc, #44]	; (27f4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    27ca:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    27ce:	4b09      	ldr	r3, [pc, #36]	; (27f4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27d0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27d4:	4a07      	ldr	r2, [pc, #28]	; (27f4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27d6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    27da:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    27de:	4b05      	ldr	r3, [pc, #20]	; (27f4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27e4:	4a03      	ldr	r2, [pc, #12]	; (27f4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27e6:	f023 0301 	bic.w	r3, r3, #1
    27ea:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    27ee:	bf00      	nop
    27f0:	b002      	add	sp, #8
    27f2:	4770      	bx	lr
    27f4:	40064000 	.word	0x40064000

000027f8 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    27f8:	b082      	sub	sp, #8
    27fa:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    27fc:	9b01      	ldr	r3, [sp, #4]
    27fe:	891b      	ldrh	r3, [r3, #8]
    2800:	2b01      	cmp	r3, #1
    2802:	d174      	bne.n	28ee <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    2804:	9b01      	ldr	r3, [sp, #4]
    2806:	7bdb      	ldrb	r3, [r3, #15]
    2808:	2b00      	cmp	r3, #0
    280a:	d002      	beq.n	2812 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    280c:	2b01      	cmp	r3, #1
    280e:	d009      	beq.n	2824 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    2810:	e011      	b.n	2836 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    2812:	4b39      	ldr	r3, [pc, #228]	; (28f8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2814:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2818:	4a37      	ldr	r2, [pc, #220]	; (28f8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    281a:	f023 0308 	bic.w	r3, r3, #8
    281e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2822:	e008      	b.n	2836 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    2824:	4b34      	ldr	r3, [pc, #208]	; (28f8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2826:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    282a:	4a33      	ldr	r2, [pc, #204]	; (28f8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    282c:	f043 0308 	orr.w	r3, r3, #8
    2830:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2834:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    2836:	4b30      	ldr	r3, [pc, #192]	; (28f8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2838:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    283c:	4a2e      	ldr	r2, [pc, #184]	; (28f8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    283e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    2842:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    2846:	9b01      	ldr	r3, [sp, #4]
    2848:	685b      	ldr	r3, [r3, #4]
    284a:	4a2c      	ldr	r2, [pc, #176]	; (28fc <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    284c:	4293      	cmp	r3, r2
    284e:	d90d      	bls.n	286c <Clock_Ip_SetSOSC_TrustedCall+0x74>
    2850:	9b01      	ldr	r3, [sp, #4]
    2852:	685b      	ldr	r3, [r3, #4]
    2854:	4a2a      	ldr	r2, [pc, #168]	; (2900 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    2856:	4293      	cmp	r3, r2
    2858:	d208      	bcs.n	286c <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    285a:	4b27      	ldr	r3, [pc, #156]	; (28f8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    285c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2860:	4a25      	ldr	r2, [pc, #148]	; (28f8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2862:	f043 0320 	orr.w	r3, r3, #32
    2866:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    286a:	e007      	b.n	287c <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    286c:	4b22      	ldr	r3, [pc, #136]	; (28f8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    286e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2872:	4a21      	ldr	r2, [pc, #132]	; (28f8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2874:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    2878:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    287c:	9b01      	ldr	r3, [sp, #4]
    287e:	7b1b      	ldrb	r3, [r3, #12]
    2880:	2b00      	cmp	r3, #0
    2882:	d108      	bne.n	2896 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    2884:	4b1c      	ldr	r3, [pc, #112]	; (28f8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2886:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    288a:	4a1b      	ldr	r2, [pc, #108]	; (28f8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    288c:	f043 0304 	orr.w	r3, r3, #4
    2890:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2894:	e007      	b.n	28a6 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    2896:	4b18      	ldr	r3, [pc, #96]	; (28f8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2898:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    289c:	4a16      	ldr	r2, [pc, #88]	; (28f8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    289e:	f023 0304 	bic.w	r3, r3, #4
    28a2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    28a6:	9b01      	ldr	r3, [sp, #4]
    28a8:	7c1b      	ldrb	r3, [r3, #16]
    28aa:	2b02      	cmp	r3, #2
    28ac:	d011      	beq.n	28d2 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    28ae:	2b02      	cmp	r3, #2
    28b0:	dc14      	bgt.n	28dc <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    28b2:	2b00      	cmp	r3, #0
    28b4:	d002      	beq.n	28bc <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    28b6:	2b01      	cmp	r3, #1
    28b8:	d005      	beq.n	28c6 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    28ba:	e00f      	b.n	28dc <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    28bc:	4b0e      	ldr	r3, [pc, #56]	; (28f8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28be:	2201      	movs	r2, #1
    28c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    28c4:	e014      	b.n	28f0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    28c6:	4b0c      	ldr	r3, [pc, #48]	; (28f8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28c8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    28cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    28d0:	e00e      	b.n	28f0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    28d2:	4b09      	ldr	r3, [pc, #36]	; (28f8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28d4:	4a0b      	ldr	r2, [pc, #44]	; (2904 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    28d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    28da:	e009      	b.n	28f0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    28dc:	4b06      	ldr	r3, [pc, #24]	; (28f8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    28e2:	4a05      	ldr	r2, [pc, #20]	; (28f8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28e4:	f043 0301 	orr.w	r3, r3, #1
    28e8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    28ec:	e000      	b.n	28f0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    28ee:	bf00      	nop
}
    28f0:	bf00      	nop
    28f2:	b002      	add	sp, #8
    28f4:	4770      	bx	lr
    28f6:	bf00      	nop
    28f8:	40064000 	.word	0x40064000
    28fc:	003d08ff 	.word	0x003d08ff
    2900:	007a1200 	.word	0x007a1200
    2904:	00030001 	.word	0x00030001

00002908 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    2908:	b082      	sub	sp, #8
    290a:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    290c:	4b05      	ldr	r3, [pc, #20]	; (2924 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    290e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2912:	4a04      	ldr	r2, [pc, #16]	; (2924 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2914:	f023 0301 	bic.w	r3, r3, #1
    2918:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    291c:	bf00      	nop
    291e:	b002      	add	sp, #8
    2920:	4770      	bx	lr
    2922:	bf00      	nop
    2924:	40064000 	.word	0x40064000

00002928 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2928:	b082      	sub	sp, #8
    292a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    292c:	9b01      	ldr	r3, [sp, #4]
    292e:	891b      	ldrh	r3, [r3, #8]
    2930:	2b01      	cmp	r3, #1
    2932:	d107      	bne.n	2944 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2934:	4b05      	ldr	r3, [pc, #20]	; (294c <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2936:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    293a:	4a04      	ldr	r2, [pc, #16]	; (294c <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    293c:	f043 0301 	orr.w	r3, r3, #1
    2940:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    2944:	bf00      	nop
    2946:	b002      	add	sp, #8
    2948:	4770      	bx	lr
    294a:	bf00      	nop
    294c:	40064000 	.word	0x40064000

00002950 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    2950:	b082      	sub	sp, #8
    2952:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2954:	bf00      	nop
    2956:	b002      	add	sp, #8
    2958:	4770      	bx	lr

0000295a <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    295a:	b082      	sub	sp, #8
    295c:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    295e:	2300      	movs	r3, #0
}
    2960:	4618      	mov	r0, r3
    2962:	b002      	add	sp, #8
    2964:	4770      	bx	lr

00002966 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    2966:	b082      	sub	sp, #8
    2968:	9001      	str	r0, [sp, #4]
    296a:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    296c:	bf00      	nop
    296e:	b002      	add	sp, #8
    2970:	4770      	bx	lr
	...

00002974 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    2974:	b082      	sub	sp, #8
    2976:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2978:	bf00      	nop
    297a:	b002      	add	sp, #8
    297c:	4770      	bx	lr

0000297e <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    297e:	b082      	sub	sp, #8
    2980:	9001      	str	r0, [sp, #4]
    2982:	460b      	mov	r3, r1
    2984:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    2988:	bf00      	nop
    298a:	b002      	add	sp, #8
    298c:	4770      	bx	lr

0000298e <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    298e:	b500      	push	{lr}
    2990:	b083      	sub	sp, #12
    2992:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2994:	9b01      	ldr	r3, [sp, #4]
    2996:	2b00      	cmp	r3, #0
    2998:	d002      	beq.n	29a0 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    299a:	9801      	ldr	r0, [sp, #4]
    299c:	f000 f8e7 	bl	2b6e <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    29a0:	bf00      	nop
    29a2:	b003      	add	sp, #12
    29a4:	f85d fb04 	ldr.w	pc, [sp], #4

000029a8 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    29a8:	b500      	push	{lr}
    29aa:	b085      	sub	sp, #20
    29ac:	9001      	str	r0, [sp, #4]
    29ae:	460b      	mov	r3, r1
    29b0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    29b4:	9b01      	ldr	r3, [sp, #4]
    29b6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    29b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    29bc:	2b00      	cmp	r3, #0
    29be:	d003      	beq.n	29c8 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    29c0:	2300      	movs	r3, #0
    29c2:	f8ad 300c 	strh.w	r3, [sp, #12]
    29c6:	e002      	b.n	29ce <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    29c8:	2301      	movs	r3, #1
    29ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    29ce:	ab02      	add	r3, sp, #8
    29d0:	4618      	mov	r0, r3
    29d2:	f7ff ffdc 	bl	298e <Clock_Ip_ClockSetSimLPO1KEnable>
}
    29d6:	bf00      	nop
    29d8:	b005      	add	sp, #20
    29da:	f85d fb04 	ldr.w	pc, [sp], #4

000029de <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    29de:	b500      	push	{lr}
    29e0:	b083      	sub	sp, #12
    29e2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    29e4:	9b01      	ldr	r3, [sp, #4]
    29e6:	2b00      	cmp	r3, #0
    29e8:	d002      	beq.n	29f0 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    29ea:	9801      	ldr	r0, [sp, #4]
    29ec:	f000 f8d6 	bl	2b9c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    29f0:	bf00      	nop
    29f2:	b003      	add	sp, #12
    29f4:	f85d fb04 	ldr.w	pc, [sp], #4

000029f8 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    29f8:	b500      	push	{lr}
    29fa:	b085      	sub	sp, #20
    29fc:	9001      	str	r0, [sp, #4]
    29fe:	460b      	mov	r3, r1
    2a00:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2a04:	9b01      	ldr	r3, [sp, #4]
    2a06:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2a08:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d003      	beq.n	2a18 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    2a10:	2300      	movs	r3, #0
    2a12:	f8ad 300c 	strh.w	r3, [sp, #12]
    2a16:	e002      	b.n	2a1e <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2a18:	2301      	movs	r3, #1
    2a1a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    2a1e:	ab02      	add	r3, sp, #8
    2a20:	4618      	mov	r0, r3
    2a22:	f7ff ffdc 	bl	29de <Clock_Ip_ClockSetSimLPO32KEnable>
}
    2a26:	bf00      	nop
    2a28:	b005      	add	sp, #20
    2a2a:	f85d fb04 	ldr.w	pc, [sp], #4

00002a2e <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    2a2e:	b500      	push	{lr}
    2a30:	b083      	sub	sp, #12
    2a32:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a34:	9b01      	ldr	r3, [sp, #4]
    2a36:	2b00      	cmp	r3, #0
    2a38:	d002      	beq.n	2a40 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    2a3a:	9801      	ldr	r0, [sp, #4]
    2a3c:	f000 f8c6 	bl	2bcc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a40:	bf00      	nop
    2a42:	b003      	add	sp, #12
    2a44:	f85d fb04 	ldr.w	pc, [sp], #4

00002a48 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a48:	b500      	push	{lr}
    2a4a:	b085      	sub	sp, #20
    2a4c:	9001      	str	r0, [sp, #4]
    2a4e:	460b      	mov	r3, r1
    2a50:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2a54:	9b01      	ldr	r3, [sp, #4]
    2a56:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2a58:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2a5c:	2b00      	cmp	r3, #0
    2a5e:	d003      	beq.n	2a68 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    2a60:	2300      	movs	r3, #0
    2a62:	f8ad 300c 	strh.w	r3, [sp, #12]
    2a66:	e002      	b.n	2a6e <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2a68:	2301      	movs	r3, #1
    2a6a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    2a6e:	ab02      	add	r3, sp, #8
    2a70:	4618      	mov	r0, r3
    2a72:	f7ff ffdc 	bl	2a2e <Clock_Ip_ClockSetSimClkoutEnable>
}
    2a76:	bf00      	nop
    2a78:	b005      	add	sp, #20
    2a7a:	f85d fb04 	ldr.w	pc, [sp], #4

00002a7e <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    2a7e:	b500      	push	{lr}
    2a80:	b083      	sub	sp, #12
    2a82:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a84:	9b01      	ldr	r3, [sp, #4]
    2a86:	2b00      	cmp	r3, #0
    2a88:	d002      	beq.n	2a90 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    2a8a:	9801      	ldr	r0, [sp, #4]
    2a8c:	f000 f8b6 	bl	2bfc <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a90:	bf00      	nop
    2a92:	b003      	add	sp, #12
    2a94:	f85d fb04 	ldr.w	pc, [sp], #4

00002a98 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a98:	b500      	push	{lr}
    2a9a:	b085      	sub	sp, #20
    2a9c:	9001      	str	r0, [sp, #4]
    2a9e:	460b      	mov	r3, r1
    2aa0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2aa4:	9b01      	ldr	r3, [sp, #4]
    2aa6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2aa8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2aac:	2b00      	cmp	r3, #0
    2aae:	d003      	beq.n	2ab8 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    2ab0:	2300      	movs	r3, #0
    2ab2:	f8ad 300c 	strh.w	r3, [sp, #12]
    2ab6:	e002      	b.n	2abe <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2ab8:	2301      	movs	r3, #1
    2aba:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    2abe:	ab02      	add	r3, sp, #8
    2ac0:	4618      	mov	r0, r3
    2ac2:	f7ff ffdc 	bl	2a7e <Clock_Ip_ClockSetPccCgcEnable>
}
    2ac6:	bf00      	nop
    2ac8:	b005      	add	sp, #20
    2aca:	f85d fb04 	ldr.w	pc, [sp], #4

00002ace <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    2ace:	b500      	push	{lr}
    2ad0:	b083      	sub	sp, #12
    2ad2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ad4:	9b01      	ldr	r3, [sp, #4]
    2ad6:	2b00      	cmp	r3, #0
    2ad8:	d002      	beq.n	2ae0 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    2ada:	9801      	ldr	r0, [sp, #4]
    2adc:	f000 f8bc 	bl	2c58 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ae0:	bf00      	nop
    2ae2:	b003      	add	sp, #12
    2ae4:	f85d fb04 	ldr.w	pc, [sp], #4

00002ae8 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    2ae8:	b500      	push	{lr}
    2aea:	b085      	sub	sp, #20
    2aec:	9001      	str	r0, [sp, #4]
    2aee:	460b      	mov	r3, r1
    2af0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2af4:	9b01      	ldr	r3, [sp, #4]
    2af6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2af8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2afc:	2b00      	cmp	r3, #0
    2afe:	d003      	beq.n	2b08 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    2b00:	2300      	movs	r3, #0
    2b02:	f8ad 300c 	strh.w	r3, [sp, #12]
    2b06:	e002      	b.n	2b0e <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2b08:	2301      	movs	r3, #1
    2b0a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    2b0e:	ab02      	add	r3, sp, #8
    2b10:	4618      	mov	r0, r3
    2b12:	f7ff ffdc 	bl	2ace <Clock_Ip_ClockSetSimGate>
}
    2b16:	bf00      	nop
    2b18:	b005      	add	sp, #20
    2b1a:	f85d fb04 	ldr.w	pc, [sp], #4

00002b1e <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    2b1e:	b500      	push	{lr}
    2b20:	b083      	sub	sp, #12
    2b22:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b24:	9b01      	ldr	r3, [sp, #4]
    2b26:	2b00      	cmp	r3, #0
    2b28:	d002      	beq.n	2b30 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    2b2a:	9801      	ldr	r0, [sp, #4]
    2b2c:	f000 f8c0 	bl	2cb0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b30:	bf00      	nop
    2b32:	b003      	add	sp, #12
    2b34:	f85d fb04 	ldr.w	pc, [sp], #4

00002b38 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2b38:	b500      	push	{lr}
    2b3a:	b085      	sub	sp, #20
    2b3c:	9001      	str	r0, [sp, #4]
    2b3e:	460b      	mov	r3, r1
    2b40:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2b44:	9b01      	ldr	r3, [sp, #4]
    2b46:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2b48:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2b4c:	2b00      	cmp	r3, #0
    2b4e:	d003      	beq.n	2b58 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    2b50:	2300      	movs	r3, #0
    2b52:	f8ad 300c 	strh.w	r3, [sp, #12]
    2b56:	e002      	b.n	2b5e <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2b58:	2301      	movs	r3, #1
    2b5a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    2b5e:	ab02      	add	r3, sp, #8
    2b60:	4618      	mov	r0, r3
    2b62:	f7ff ffdc 	bl	2b1e <Clock_Ip_ClockSetSimTraceEnable>
}
    2b66:	bf00      	nop
    2b68:	b005      	add	sp, #20
    2b6a:	f85d fb04 	ldr.w	pc, [sp], #4

00002b6e <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2b6e:	b084      	sub	sp, #16
    2b70:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2b72:	4b09      	ldr	r3, [pc, #36]	; (2b98 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2b74:	691b      	ldr	r3, [r3, #16]
    2b76:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    2b78:	9b03      	ldr	r3, [sp, #12]
    2b7a:	f023 0301 	bic.w	r3, r3, #1
    2b7e:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    2b80:	9b01      	ldr	r3, [sp, #4]
    2b82:	889b      	ldrh	r3, [r3, #4]
    2b84:	461a      	mov	r2, r3
    2b86:	9b03      	ldr	r3, [sp, #12]
    2b88:	4313      	orrs	r3, r2
    2b8a:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2b8c:	4a02      	ldr	r2, [pc, #8]	; (2b98 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2b8e:	9b03      	ldr	r3, [sp, #12]
    2b90:	6113      	str	r3, [r2, #16]
}
    2b92:	bf00      	nop
    2b94:	b004      	add	sp, #16
    2b96:	4770      	bx	lr
    2b98:	40048000 	.word	0x40048000

00002b9c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2b9c:	b084      	sub	sp, #16
    2b9e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2ba0:	4b09      	ldr	r3, [pc, #36]	; (2bc8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2ba2:	691b      	ldr	r3, [r3, #16]
    2ba4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    2ba6:	9b03      	ldr	r3, [sp, #12]
    2ba8:	f023 0302 	bic.w	r3, r3, #2
    2bac:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    2bae:	9b01      	ldr	r3, [sp, #4]
    2bb0:	889b      	ldrh	r3, [r3, #4]
    2bb2:	005b      	lsls	r3, r3, #1
    2bb4:	9a03      	ldr	r2, [sp, #12]
    2bb6:	4313      	orrs	r3, r2
    2bb8:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2bba:	4a03      	ldr	r2, [pc, #12]	; (2bc8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2bbc:	9b03      	ldr	r3, [sp, #12]
    2bbe:	6113      	str	r3, [r2, #16]
}
    2bc0:	bf00      	nop
    2bc2:	b004      	add	sp, #16
    2bc4:	4770      	bx	lr
    2bc6:	bf00      	nop
    2bc8:	40048000 	.word	0x40048000

00002bcc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2bcc:	b084      	sub	sp, #16
    2bce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2bd0:	4b09      	ldr	r3, [pc, #36]	; (2bf8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2bd2:	685b      	ldr	r3, [r3, #4]
    2bd4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    2bd6:	9b03      	ldr	r3, [sp, #12]
    2bd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2bdc:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    2bde:	9b01      	ldr	r3, [sp, #4]
    2be0:	889b      	ldrh	r3, [r3, #4]
    2be2:	02db      	lsls	r3, r3, #11
    2be4:	9a03      	ldr	r2, [sp, #12]
    2be6:	4313      	orrs	r3, r2
    2be8:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2bea:	4a03      	ldr	r2, [pc, #12]	; (2bf8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2bec:	9b03      	ldr	r3, [sp, #12]
    2bee:	6053      	str	r3, [r2, #4]
}
    2bf0:	bf00      	nop
    2bf2:	b004      	add	sp, #16
    2bf4:	4770      	bx	lr
    2bf6:	bf00      	nop
    2bf8:	40048000 	.word	0x40048000

00002bfc <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2bfc:	b084      	sub	sp, #16
    2bfe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    2c00:	4913      	ldr	r1, [pc, #76]	; (2c50 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2c02:	9b01      	ldr	r3, [sp, #4]
    2c04:	681a      	ldr	r2, [r3, #0]
    2c06:	4813      	ldr	r0, [pc, #76]	; (2c54 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2c08:	4613      	mov	r3, r2
    2c0a:	00db      	lsls	r3, r3, #3
    2c0c:	4413      	add	r3, r2
    2c0e:	4403      	add	r3, r0
    2c10:	3306      	adds	r3, #6
    2c12:	781b      	ldrb	r3, [r3, #0]
    2c14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2c18:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    2c1a:	9b03      	ldr	r3, [sp, #12]
    2c1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    2c20:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    2c22:	9b01      	ldr	r3, [sp, #4]
    2c24:	889b      	ldrh	r3, [r3, #4]
    2c26:	079b      	lsls	r3, r3, #30
    2c28:	9a03      	ldr	r2, [sp, #12]
    2c2a:	4313      	orrs	r3, r2
    2c2c:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    2c2e:	4908      	ldr	r1, [pc, #32]	; (2c50 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2c30:	9b01      	ldr	r3, [sp, #4]
    2c32:	681a      	ldr	r2, [r3, #0]
    2c34:	4807      	ldr	r0, [pc, #28]	; (2c54 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2c36:	4613      	mov	r3, r2
    2c38:	00db      	lsls	r3, r3, #3
    2c3a:	4413      	add	r3, r2
    2c3c:	4403      	add	r3, r0
    2c3e:	3306      	adds	r3, #6
    2c40:	781b      	ldrb	r3, [r3, #0]
    2c42:	461a      	mov	r2, r3
    2c44:	9b03      	ldr	r3, [sp, #12]
    2c46:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    2c4a:	bf00      	nop
    2c4c:	b004      	add	sp, #16
    2c4e:	4770      	bx	lr
    2c50:	40065000 	.word	0x40065000
    2c54:	0000ba08 	.word	0x0000ba08

00002c58 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2c58:	b086      	sub	sp, #24
    2c5a:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    2c5c:	9b01      	ldr	r3, [sp, #4]
    2c5e:	889b      	ldrh	r3, [r3, #4]
    2c60:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    2c62:	9b01      	ldr	r3, [sp, #4]
    2c64:	681a      	ldr	r2, [r3, #0]
    2c66:	4910      	ldr	r1, [pc, #64]	; (2ca8 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    2c68:	4613      	mov	r3, r2
    2c6a:	00db      	lsls	r3, r3, #3
    2c6c:	4413      	add	r3, r2
    2c6e:	440b      	add	r3, r1
    2c70:	3306      	adds	r3, #6
    2c72:	781b      	ldrb	r3, [r3, #0]
    2c74:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    2c76:	4b0d      	ldr	r3, [pc, #52]	; (2cac <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2c7a:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    2c7c:	2201      	movs	r2, #1
    2c7e:	9b04      	ldr	r3, [sp, #16]
    2c80:	fa02 f303 	lsl.w	r3, r2, r3
    2c84:	43db      	mvns	r3, r3
    2c86:	9a03      	ldr	r2, [sp, #12]
    2c88:	4013      	ands	r3, r2
    2c8a:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    2c8c:	9a05      	ldr	r2, [sp, #20]
    2c8e:	9b04      	ldr	r3, [sp, #16]
    2c90:	fa02 f303 	lsl.w	r3, r2, r3
    2c94:	9a03      	ldr	r2, [sp, #12]
    2c96:	4313      	orrs	r3, r2
    2c98:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    2c9a:	4a04      	ldr	r2, [pc, #16]	; (2cac <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2c9c:	9b03      	ldr	r3, [sp, #12]
    2c9e:	6413      	str	r3, [r2, #64]	; 0x40
}
    2ca0:	bf00      	nop
    2ca2:	b006      	add	sp, #24
    2ca4:	4770      	bx	lr
    2ca6:	bf00      	nop
    2ca8:	0000ba08 	.word	0x0000ba08
    2cac:	40048000 	.word	0x40048000

00002cb0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2cb0:	b084      	sub	sp, #16
    2cb2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    2cb4:	4b0a      	ldr	r3, [pc, #40]	; (2ce0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2cb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2cb8:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    2cba:	9b01      	ldr	r3, [sp, #4]
    2cbc:	889b      	ldrh	r3, [r3, #4]
    2cbe:	2b01      	cmp	r3, #1
    2cc0:	d104      	bne.n	2ccc <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    2cc2:	9b03      	ldr	r3, [sp, #12]
    2cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2cc8:	9303      	str	r3, [sp, #12]
    2cca:	e003      	b.n	2cd4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2ccc:	9b03      	ldr	r3, [sp, #12]
    2cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2cd2:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    2cd4:	4a02      	ldr	r2, [pc, #8]	; (2ce0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2cd6:	9b03      	ldr	r3, [sp, #12]
    2cd8:	6693      	str	r3, [r2, #104]	; 0x68
}
    2cda:	bf00      	nop
    2cdc:	b004      	add	sp, #16
    2cde:	4770      	bx	lr
    2ce0:	40048000 	.word	0x40048000

00002ce4 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    2ce4:	b082      	sub	sp, #8
    2ce6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2ce8:	bf00      	nop
    2cea:	b002      	add	sp, #8
    2cec:	4770      	bx	lr

00002cee <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    2cee:	b082      	sub	sp, #8
    2cf0:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2cf2:	bf00      	nop
    2cf4:	b002      	add	sp, #8
    2cf6:	4770      	bx	lr

00002cf8 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2cf8:	b500      	push	{lr}
    2cfa:	b083      	sub	sp, #12
    2cfc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cfe:	9b01      	ldr	r3, [sp, #4]
    2d00:	2b00      	cmp	r3, #0
    2d02:	d002      	beq.n	2d0a <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    2d04:	9801      	ldr	r0, [sp, #4]
    2d06:	f000 f8d1 	bl	2eac <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d0a:	bf00      	nop
    2d0c:	b003      	add	sp, #12
    2d0e:	f85d fb04 	ldr.w	pc, [sp], #4

00002d12 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2d12:	b500      	push	{lr}
    2d14:	b083      	sub	sp, #12
    2d16:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d18:	9b01      	ldr	r3, [sp, #4]
    2d1a:	2b00      	cmp	r3, #0
    2d1c:	d002      	beq.n	2d24 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    2d1e:	9801      	ldr	r0, [sp, #4]
    2d20:	f000 f950 	bl	2fc4 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d24:	bf00      	nop
    2d26:	b003      	add	sp, #12
    2d28:	f85d fb04 	ldr.w	pc, [sp], #4

00002d2c <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    2d2c:	b500      	push	{lr}
    2d2e:	b083      	sub	sp, #12
    2d30:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    2d32:	9801      	ldr	r0, [sp, #4]
    2d34:	f000 f98e 	bl	3054 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2d38:	bf00      	nop
    2d3a:	b003      	add	sp, #12
    2d3c:	f85d fb04 	ldr.w	pc, [sp], #4

00002d40 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2d40:	b500      	push	{lr}
    2d42:	b083      	sub	sp, #12
    2d44:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d46:	9b01      	ldr	r3, [sp, #4]
    2d48:	2b00      	cmp	r3, #0
    2d4a:	d002      	beq.n	2d52 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    2d4c:	9801      	ldr	r0, [sp, #4]
    2d4e:	f000 f999 	bl	3084 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d52:	bf00      	nop
    2d54:	b003      	add	sp, #12
    2d56:	f85d fb04 	ldr.w	pc, [sp], #4

00002d5a <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2d5a:	b500      	push	{lr}
    2d5c:	b083      	sub	sp, #12
    2d5e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d60:	9b01      	ldr	r3, [sp, #4]
    2d62:	2b00      	cmp	r3, #0
    2d64:	d002      	beq.n	2d6c <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    2d66:	9801      	ldr	r0, [sp, #4]
    2d68:	f000 f9b0 	bl	30cc <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d6c:	bf00      	nop
    2d6e:	b003      	add	sp, #12
    2d70:	f85d fb04 	ldr.w	pc, [sp], #4

00002d74 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    2d74:	b500      	push	{lr}
    2d76:	b083      	sub	sp, #12
    2d78:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    2d7a:	9801      	ldr	r0, [sp, #4]
    2d7c:	f000 f9ba 	bl	30f4 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2d80:	bf00      	nop
    2d82:	b003      	add	sp, #12
    2d84:	f85d fb04 	ldr.w	pc, [sp], #4

00002d88 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2d88:	b500      	push	{lr}
    2d8a:	b083      	sub	sp, #12
    2d8c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d8e:	9b01      	ldr	r3, [sp, #4]
    2d90:	2b00      	cmp	r3, #0
    2d92:	d002      	beq.n	2d9a <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    2d94:	9801      	ldr	r0, [sp, #4]
    2d96:	f000 f9bd 	bl	3114 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d9a:	bf00      	nop
    2d9c:	b003      	add	sp, #12
    2d9e:	f85d fb04 	ldr.w	pc, [sp], #4

00002da2 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2da2:	b500      	push	{lr}
    2da4:	b083      	sub	sp, #12
    2da6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2da8:	9b01      	ldr	r3, [sp, #4]
    2daa:	2b00      	cmp	r3, #0
    2dac:	d002      	beq.n	2db4 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    2dae:	9801      	ldr	r0, [sp, #4]
    2db0:	f000 f9d4 	bl	315c <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2db4:	bf00      	nop
    2db6:	b003      	add	sp, #12
    2db8:	f85d fb04 	ldr.w	pc, [sp], #4

00002dbc <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    2dbc:	b500      	push	{lr}
    2dbe:	b083      	sub	sp, #12
    2dc0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    2dc2:	9801      	ldr	r0, [sp, #4]
    2dc4:	f000 f9de 	bl	3184 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2dc8:	bf00      	nop
    2dca:	b003      	add	sp, #12
    2dcc:	f85d fb04 	ldr.w	pc, [sp], #4

00002dd0 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    2dd0:	b500      	push	{lr}
    2dd2:	b089      	sub	sp, #36	; 0x24
    2dd4:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    2dd6:	2300      	movs	r3, #0
    2dd8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    2ddc:	4b20      	ldr	r3, [pc, #128]	; (2e60 <SetInputSouceSytemClock+0x90>)
    2dde:	695b      	ldr	r3, [r3, #20]
    2de0:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    2de2:	9b06      	ldr	r3, [sp, #24]
    2de4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    2de8:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    2dea:	9b01      	ldr	r3, [sp, #4]
    2dec:	061b      	lsls	r3, r3, #24
    2dee:	9a06      	ldr	r2, [sp, #24]
    2df0:	4313      	orrs	r3, r2
    2df2:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    2df4:	4a1a      	ldr	r2, [pc, #104]	; (2e60 <SetInputSouceSytemClock+0x90>)
    2df6:	9b06      	ldr	r3, [sp, #24]
    2df8:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2dfa:	aa02      	add	r2, sp, #8
    2dfc:	a903      	add	r1, sp, #12
    2dfe:	a804      	add	r0, sp, #16
    2e00:	f24c 3350 	movw	r3, #50000	; 0xc350
    2e04:	f7ff f9ac 	bl	2160 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    2e08:	4b15      	ldr	r3, [pc, #84]	; (2e60 <SetInputSouceSytemClock+0x90>)
    2e0a:	691b      	ldr	r3, [r3, #16]
    2e0c:	0e1b      	lsrs	r3, r3, #24
    2e0e:	f003 030f 	and.w	r3, r3, #15
    2e12:	9a01      	ldr	r2, [sp, #4]
    2e14:	429a      	cmp	r2, r3
    2e16:	bf0c      	ite	eq
    2e18:	2301      	moveq	r3, #1
    2e1a:	2300      	movne	r3, #0
    2e1c:	b2db      	uxtb	r3, r3
    2e1e:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2e20:	9a02      	ldr	r2, [sp, #8]
    2e22:	a903      	add	r1, sp, #12
    2e24:	ab04      	add	r3, sp, #16
    2e26:	4618      	mov	r0, r3
    2e28:	f7ff f9b4 	bl	2194 <Clock_Ip_TimeoutExpired>
    2e2c:	4603      	mov	r3, r0
    2e2e:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    2e32:	9b05      	ldr	r3, [sp, #20]
    2e34:	2b00      	cmp	r3, #0
    2e36:	d106      	bne.n	2e46 <SetInputSouceSytemClock+0x76>
    2e38:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e3c:	f083 0301 	eor.w	r3, r3, #1
    2e40:	b2db      	uxtb	r3, r3
    2e42:	2b00      	cmp	r3, #0
    2e44:	d1e0      	bne.n	2e08 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    2e46:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e4a:	2b00      	cmp	r3, #0
    2e4c:	d003      	beq.n	2e56 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    2e4e:	2105      	movs	r1, #5
    2e50:	2001      	movs	r0, #1
    2e52:	f7ff f975 	bl	2140 <Clock_Ip_ReportClockErrors>
    }
}
    2e56:	bf00      	nop
    2e58:	b009      	add	sp, #36	; 0x24
    2e5a:	f85d fb04 	ldr.w	pc, [sp], #4
    2e5e:	bf00      	nop
    2e60:	40064000 	.word	0x40064000

00002e64 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2e64:	b500      	push	{lr}
    2e66:	b083      	sub	sp, #12
    2e68:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e6a:	9b01      	ldr	r3, [sp, #4]
    2e6c:	2b00      	cmp	r3, #0
    2e6e:	d002      	beq.n	2e76 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    2e70:	9801      	ldr	r0, [sp, #4]
    2e72:	f000 f997 	bl	31a4 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e76:	bf00      	nop
    2e78:	b003      	add	sp, #12
    2e7a:	f85d fb04 	ldr.w	pc, [sp], #4

00002e7e <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2e7e:	b500      	push	{lr}
    2e80:	b083      	sub	sp, #12
    2e82:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e84:	9b01      	ldr	r3, [sp, #4]
    2e86:	2b00      	cmp	r3, #0
    2e88:	d002      	beq.n	2e90 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    2e8a:	9801      	ldr	r0, [sp, #4]
    2e8c:	f000 fa7e 	bl	338c <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e90:	bf00      	nop
    2e92:	b003      	add	sp, #12
    2e94:	f85d fb04 	ldr.w	pc, [sp], #4

00002e98 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    2e98:	b500      	push	{lr}
    2e9a:	b083      	sub	sp, #12
    2e9c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    2e9e:	9801      	ldr	r0, [sp, #4]
    2ea0:	f000 fab8 	bl	3414 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2ea4:	bf00      	nop
    2ea6:	b003      	add	sp, #12
    2ea8:	f85d fb04 	ldr.w	pc, [sp], #4

00002eac <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2eac:	b500      	push	{lr}
    2eae:	b08b      	sub	sp, #44	; 0x2c
    2eb0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2eb2:	2300      	movs	r3, #0
    2eb4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    2eb8:	9b01      	ldr	r3, [sp, #4]
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d10b      	bne.n	2ed6 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    2ebe:	2305      	movs	r3, #5
    2ec0:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    2ec2:	2301      	movs	r3, #1
    2ec4:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    2ec8:	2301      	movs	r3, #1
    2eca:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    2ece:	2301      	movs	r3, #1
    2ed0:	f88d 3010 	strb.w	r3, [sp, #16]
    2ed4:	e00e      	b.n	2ef4 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    2ed6:	9b01      	ldr	r3, [sp, #4]
    2ed8:	681b      	ldr	r3, [r3, #0]
    2eda:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    2edc:	9b01      	ldr	r3, [sp, #4]
    2ede:	79db      	ldrb	r3, [r3, #7]
    2ee0:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    2ee4:	9b01      	ldr	r3, [sp, #4]
    2ee6:	889b      	ldrh	r3, [r3, #4]
    2ee8:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    2eec:	9b01      	ldr	r3, [sp, #4]
    2eee:	7a1b      	ldrb	r3, [r3, #8]
    2ef0:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2ef4:	4b32      	ldr	r3, [pc, #200]	; (2fc0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ef6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2efa:	4a31      	ldr	r2, [pc, #196]	; (2fc0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2efc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2f00:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    2f04:	4b2e      	ldr	r3, [pc, #184]	; (2fc0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f0a:	4a2d      	ldr	r2, [pc, #180]	; (2fc0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f0c:	f023 0301 	bic.w	r3, r3, #1
    2f10:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2f14:	4b2a      	ldr	r3, [pc, #168]	; (2fc0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f1a:	4a29      	ldr	r2, [pc, #164]	; (2fc0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f1c:	f023 0304 	bic.w	r3, r3, #4
    2f20:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    2f24:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    2f28:	2b01      	cmp	r3, #1
    2f2a:	d144      	bne.n	2fb6 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    2f2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2f30:	4a23      	ldr	r2, [pc, #140]	; (2fc0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f32:	f003 0301 	and.w	r3, r3, #1
    2f36:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2f3a:	4b21      	ldr	r3, [pc, #132]	; (2fc0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f40:	4a1f      	ldr	r2, [pc, #124]	; (2fc0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f42:	f043 0301 	orr.w	r3, r3, #1
    2f46:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    2f4a:	4b1d      	ldr	r3, [pc, #116]	; (2fc0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f4c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2f50:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2f54:	009b      	lsls	r3, r3, #2
    2f56:	f003 0304 	and.w	r3, r3, #4
    2f5a:	4919      	ldr	r1, [pc, #100]	; (2fc0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f5c:	4313      	orrs	r3, r2
    2f5e:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2f62:	aa05      	add	r2, sp, #20
    2f64:	a906      	add	r1, sp, #24
    2f66:	a807      	add	r0, sp, #28
    2f68:	f24c 3350 	movw	r3, #50000	; 0xc350
    2f6c:	f7ff f8f8 	bl	2160 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2f70:	4b13      	ldr	r3, [pc, #76]	; (2fc0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f76:	0e1b      	lsrs	r3, r3, #24
    2f78:	f003 0301 	and.w	r3, r3, #1
    2f7c:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2f7e:	9a05      	ldr	r2, [sp, #20]
    2f80:	a906      	add	r1, sp, #24
    2f82:	ab07      	add	r3, sp, #28
    2f84:	4618      	mov	r0, r3
    2f86:	f7ff f905 	bl	2194 <Clock_Ip_TimeoutExpired>
    2f8a:	4603      	mov	r3, r0
    2f8c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2f90:	9b08      	ldr	r3, [sp, #32]
    2f92:	2b00      	cmp	r3, #0
    2f94:	d106      	bne.n	2fa4 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    2f96:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2f9a:	f083 0301 	eor.w	r3, r3, #1
    2f9e:	b2db      	uxtb	r3, r3
    2fa0:	2b00      	cmp	r3, #0
    2fa2:	d1e5      	bne.n	2f70 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    2fa4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2fa8:	2b00      	cmp	r3, #0
    2faa:	d004      	beq.n	2fb6 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    2fac:	9b02      	ldr	r3, [sp, #8]
    2fae:	4619      	mov	r1, r3
    2fb0:	2001      	movs	r0, #1
    2fb2:	f7ff f8c5 	bl	2140 <Clock_Ip_ReportClockErrors>
        }
    }
}
    2fb6:	bf00      	nop
    2fb8:	b00b      	add	sp, #44	; 0x2c
    2fba:	f85d fb04 	ldr.w	pc, [sp], #4
    2fbe:	bf00      	nop
    2fc0:	40064000 	.word	0x40064000

00002fc4 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2fc4:	b500      	push	{lr}
    2fc6:	b089      	sub	sp, #36	; 0x24
    2fc8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2fca:	2300      	movs	r3, #0
    2fcc:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2fd0:	4b1f      	ldr	r3, [pc, #124]	; (3050 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fd6:	4a1e      	ldr	r2, [pc, #120]	; (3050 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fd8:	f043 0301 	orr.w	r3, r3, #1
    2fdc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    2fe0:	4b1b      	ldr	r3, [pc, #108]	; (3050 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fe2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fe6:	4a1a      	ldr	r2, [pc, #104]	; (3050 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fe8:	f043 0304 	orr.w	r3, r3, #4
    2fec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2ff0:	aa03      	add	r2, sp, #12
    2ff2:	a904      	add	r1, sp, #16
    2ff4:	a805      	add	r0, sp, #20
    2ff6:	f24c 3350 	movw	r3, #50000	; 0xc350
    2ffa:	f7ff f8b1 	bl	2160 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2ffe:	4b14      	ldr	r3, [pc, #80]	; (3050 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3000:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3004:	0e1b      	lsrs	r3, r3, #24
    3006:	f003 0301 	and.w	r3, r3, #1
    300a:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    300c:	9a03      	ldr	r2, [sp, #12]
    300e:	a904      	add	r1, sp, #16
    3010:	ab05      	add	r3, sp, #20
    3012:	4618      	mov	r0, r3
    3014:	f7ff f8be 	bl	2194 <Clock_Ip_TimeoutExpired>
    3018:	4603      	mov	r3, r0
    301a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    301e:	9b06      	ldr	r3, [sp, #24]
    3020:	2b00      	cmp	r3, #0
    3022:	d106      	bne.n	3032 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3024:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3028:	f083 0301 	eor.w	r3, r3, #1
    302c:	b2db      	uxtb	r3, r3
    302e:	2b00      	cmp	r3, #0
    3030:	d1e5      	bne.n	2ffe <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3032:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3036:	2b00      	cmp	r3, #0
    3038:	d005      	beq.n	3046 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    303a:	9b01      	ldr	r3, [sp, #4]
    303c:	681b      	ldr	r3, [r3, #0]
    303e:	4619      	mov	r1, r3
    3040:	2001      	movs	r0, #1
    3042:	f7ff f87d 	bl	2140 <Clock_Ip_ReportClockErrors>
    }
}
    3046:	bf00      	nop
    3048:	b009      	add	sp, #36	; 0x24
    304a:	f85d fb04 	ldr.w	pc, [sp], #4
    304e:	bf00      	nop
    3050:	40064000 	.word	0x40064000

00003054 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3054:	b082      	sub	sp, #8
    3056:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3058:	4b09      	ldr	r3, [pc, #36]	; (3080 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    305a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    305e:	4a08      	ldr	r2, [pc, #32]	; (3080 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3060:	f023 0301 	bic.w	r3, r3, #1
    3064:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3068:	4b05      	ldr	r3, [pc, #20]	; (3080 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    306a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    306e:	4a04      	ldr	r2, [pc, #16]	; (3080 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3070:	f023 0304 	bic.w	r3, r3, #4
    3074:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3078:	bf00      	nop
    307a:	b002      	add	sp, #8
    307c:	4770      	bx	lr
    307e:	bf00      	nop
    3080:	40064000 	.word	0x40064000

00003084 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3084:	b082      	sub	sp, #8
    3086:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3088:	4b0f      	ldr	r3, [pc, #60]	; (30c8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    308a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    308e:	4a0e      	ldr	r2, [pc, #56]	; (30c8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3090:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3094:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3098:	4b0b      	ldr	r3, [pc, #44]	; (30c8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    309a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    309e:	4a0a      	ldr	r2, [pc, #40]	; (30c8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    30a0:	f023 0304 	bic.w	r3, r3, #4
    30a4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    30a8:	4b07      	ldr	r3, [pc, #28]	; (30c8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    30aa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    30ae:	9b01      	ldr	r3, [sp, #4]
    30b0:	7a1b      	ldrb	r3, [r3, #8]
    30b2:	009b      	lsls	r3, r3, #2
    30b4:	f003 0304 	and.w	r3, r3, #4
    30b8:	4903      	ldr	r1, [pc, #12]	; (30c8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    30ba:	4313      	orrs	r3, r2
    30bc:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    30c0:	bf00      	nop
    30c2:	b002      	add	sp, #8
    30c4:	4770      	bx	lr
    30c6:	bf00      	nop
    30c8:	40064000 	.word	0x40064000

000030cc <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    30cc:	b082      	sub	sp, #8
    30ce:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    30d0:	9b01      	ldr	r3, [sp, #4]
    30d2:	889b      	ldrh	r3, [r3, #4]
    30d4:	2b01      	cmp	r3, #1
    30d6:	d107      	bne.n	30e8 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    30d8:	4b05      	ldr	r3, [pc, #20]	; (30f0 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    30da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30de:	4a04      	ldr	r2, [pc, #16]	; (30f0 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    30e0:	f043 0304 	orr.w	r3, r3, #4
    30e4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    30e8:	bf00      	nop
    30ea:	b002      	add	sp, #8
    30ec:	4770      	bx	lr
    30ee:	bf00      	nop
    30f0:	40064000 	.word	0x40064000

000030f4 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    30f4:	b082      	sub	sp, #8
    30f6:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    30f8:	4b05      	ldr	r3, [pc, #20]	; (3110 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    30fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30fe:	4a04      	ldr	r2, [pc, #16]	; (3110 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3100:	f023 0304 	bic.w	r3, r3, #4
    3104:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3108:	bf00      	nop
    310a:	b002      	add	sp, #8
    310c:	4770      	bx	lr
    310e:	bf00      	nop
    3110:	40064000 	.word	0x40064000

00003114 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3114:	b082      	sub	sp, #8
    3116:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3118:	4b0f      	ldr	r3, [pc, #60]	; (3158 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    311a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    311e:	4a0e      	ldr	r2, [pc, #56]	; (3158 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3120:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3124:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3128:	4b0b      	ldr	r3, [pc, #44]	; (3158 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    312a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    312e:	4a0a      	ldr	r2, [pc, #40]	; (3158 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3130:	f023 0302 	bic.w	r3, r3, #2
    3134:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3138:	4b07      	ldr	r3, [pc, #28]	; (3158 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    313a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    313e:	9b01      	ldr	r3, [sp, #4]
    3140:	7a5b      	ldrb	r3, [r3, #9]
    3142:	005b      	lsls	r3, r3, #1
    3144:	f003 0302 	and.w	r3, r3, #2
    3148:	4903      	ldr	r1, [pc, #12]	; (3158 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    314a:	4313      	orrs	r3, r2
    314c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3150:	bf00      	nop
    3152:	b002      	add	sp, #8
    3154:	4770      	bx	lr
    3156:	bf00      	nop
    3158:	40064000 	.word	0x40064000

0000315c <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    315c:	b082      	sub	sp, #8
    315e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3160:	9b01      	ldr	r3, [sp, #4]
    3162:	889b      	ldrh	r3, [r3, #4]
    3164:	2b01      	cmp	r3, #1
    3166:	d107      	bne.n	3178 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3168:	4b05      	ldr	r3, [pc, #20]	; (3180 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    316a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    316e:	4a04      	ldr	r2, [pc, #16]	; (3180 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3170:	f043 0302 	orr.w	r3, r3, #2
    3174:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3178:	bf00      	nop
    317a:	b002      	add	sp, #8
    317c:	4770      	bx	lr
    317e:	bf00      	nop
    3180:	40064000 	.word	0x40064000

00003184 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3184:	b082      	sub	sp, #8
    3186:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3188:	4b05      	ldr	r3, [pc, #20]	; (31a0 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    318a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    318e:	4a04      	ldr	r2, [pc, #16]	; (31a0 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3190:	f023 0302 	bic.w	r3, r3, #2
    3194:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3198:	bf00      	nop
    319a:	b002      	add	sp, #8
    319c:	4770      	bx	lr
    319e:	bf00      	nop
    31a0:	40064000 	.word	0x40064000

000031a4 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    31a4:	b500      	push	{lr}
    31a6:	b08b      	sub	sp, #44	; 0x2c
    31a8:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    31aa:	9b01      	ldr	r3, [sp, #4]
    31ac:	681a      	ldr	r2, [r3, #0]
    31ae:	4975      	ldr	r1, [pc, #468]	; (3384 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    31b0:	4613      	mov	r3, r2
    31b2:	00db      	lsls	r3, r3, #3
    31b4:	4413      	add	r3, r2
    31b6:	440b      	add	r3, r1
    31b8:	781b      	ldrb	r3, [r3, #0]
    31ba:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    31bc:	2300      	movs	r3, #0
    31be:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    31c2:	2300      	movs	r3, #0
    31c4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    31c8:	4b6f      	ldr	r3, [pc, #444]	; (3388 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    31ce:	4a6e      	ldr	r2, [pc, #440]	; (3388 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    31d4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    31d8:	4b6b      	ldr	r3, [pc, #428]	; (3388 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    31de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    31e2:	2b00      	cmp	r3, #0
    31e4:	d07d      	beq.n	32e2 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    31e6:	9b01      	ldr	r3, [sp, #4]
    31e8:	79db      	ldrb	r3, [r3, #7]
    31ea:	461a      	mov	r2, r3
    31ec:	4b66      	ldr	r3, [pc, #408]	; (3388 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31ee:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    31f2:	f003 0303 	and.w	r3, r3, #3
    31f6:	429a      	cmp	r2, r3
    31f8:	d10b      	bne.n	3212 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    31fa:	9b01      	ldr	r3, [sp, #4]
    31fc:	799b      	ldrb	r3, [r3, #6]
    31fe:	461a      	mov	r2, r3
    3200:	4b61      	ldr	r3, [pc, #388]	; (3388 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3202:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3206:	08db      	lsrs	r3, r3, #3
    3208:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    320c:	429a      	cmp	r2, r3
    320e:	f000 80b4 	beq.w	337a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3212:	4b5d      	ldr	r3, [pc, #372]	; (3388 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3214:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3218:	f003 0301 	and.w	r3, r3, #1
    321c:	2b00      	cmp	r3, #0
    321e:	d105      	bne.n	322c <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3220:	2301      	movs	r3, #1
    3222:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3226:	2000      	movs	r0, #0
    3228:	f7ff fd66 	bl	2cf8 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    322c:	2002      	movs	r0, #2
    322e:	f7ff fdcf 	bl	2dd0 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3232:	4b55      	ldr	r3, [pc, #340]	; (3388 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3234:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3238:	4a53      	ldr	r2, [pc, #332]	; (3388 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    323a:	f023 0301 	bic.w	r3, r3, #1
    323e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3242:	9b01      	ldr	r3, [sp, #4]
    3244:	889b      	ldrh	r3, [r3, #4]
    3246:	2b01      	cmp	r3, #1
    3248:	f040 8097 	bne.w	337a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    324c:	9b01      	ldr	r3, [sp, #4]
    324e:	79db      	ldrb	r3, [r3, #7]
    3250:	4a4d      	ldr	r2, [pc, #308]	; (3388 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3252:	f003 0303 	and.w	r3, r3, #3
    3256:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    325a:	4b4b      	ldr	r3, [pc, #300]	; (3388 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    325c:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3260:	9b01      	ldr	r3, [sp, #4]
    3262:	799b      	ldrb	r3, [r3, #6]
    3264:	00db      	lsls	r3, r3, #3
    3266:	f003 0308 	and.w	r3, r3, #8
    326a:	4313      	orrs	r3, r2
    326c:	4a46      	ldr	r2, [pc, #280]	; (3388 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    326e:	f043 0301 	orr.w	r3, r3, #1
    3272:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3276:	aa03      	add	r2, sp, #12
    3278:	a904      	add	r1, sp, #16
    327a:	a805      	add	r0, sp, #20
    327c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3280:	f7fe ff6e 	bl	2160 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3284:	4b40      	ldr	r3, [pc, #256]	; (3388 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3286:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    328a:	0e1b      	lsrs	r3, r3, #24
    328c:	f003 0301 	and.w	r3, r3, #1
    3290:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3292:	9a03      	ldr	r2, [sp, #12]
    3294:	a904      	add	r1, sp, #16
    3296:	ab05      	add	r3, sp, #20
    3298:	4618      	mov	r0, r3
    329a:	f7fe ff7b 	bl	2194 <Clock_Ip_TimeoutExpired>
    329e:	4603      	mov	r3, r0
    32a0:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    32a4:	9b06      	ldr	r3, [sp, #24]
    32a6:	2b00      	cmp	r3, #0
    32a8:	d106      	bne.n	32b8 <Clock_Ip_SetFirc_TrustedCall+0x114>
    32aa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    32ae:	f083 0301 	eor.w	r3, r3, #1
    32b2:	b2db      	uxtb	r3, r3
    32b4:	2b00      	cmp	r3, #0
    32b6:	d1e5      	bne.n	3284 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    32b8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    32bc:	2b00      	cmp	r3, #0
    32be:	d005      	beq.n	32cc <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    32c0:	9b01      	ldr	r3, [sp, #4]
    32c2:	681b      	ldr	r3, [r3, #0]
    32c4:	4619      	mov	r1, r3
    32c6:	2001      	movs	r0, #1
    32c8:	f7fe ff3a 	bl	2140 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    32cc:	2003      	movs	r0, #3
    32ce:	f7ff fd7f 	bl	2dd0 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    32d2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    32d6:	2b00      	cmp	r3, #0
    32d8:	d04f      	beq.n	337a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    32da:	2002      	movs	r0, #2
    32dc:	f7ff fd26 	bl	2d2c <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    32e0:	e04b      	b.n	337a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    32e2:	4b29      	ldr	r3, [pc, #164]	; (3388 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32e4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    32e8:	4a27      	ldr	r2, [pc, #156]	; (3388 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32ea:	f023 0301 	bic.w	r3, r3, #1
    32ee:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    32f2:	9b01      	ldr	r3, [sp, #4]
    32f4:	889b      	ldrh	r3, [r3, #4]
    32f6:	2b01      	cmp	r3, #1
    32f8:	d13f      	bne.n	337a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    32fa:	9b01      	ldr	r3, [sp, #4]
    32fc:	79db      	ldrb	r3, [r3, #7]
    32fe:	4a22      	ldr	r2, [pc, #136]	; (3388 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3300:	f003 0303 	and.w	r3, r3, #3
    3304:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3308:	4b1f      	ldr	r3, [pc, #124]	; (3388 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    330a:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    330e:	9b01      	ldr	r3, [sp, #4]
    3310:	799b      	ldrb	r3, [r3, #6]
    3312:	00db      	lsls	r3, r3, #3
    3314:	f003 0308 	and.w	r3, r3, #8
    3318:	4313      	orrs	r3, r2
    331a:	4a1b      	ldr	r2, [pc, #108]	; (3388 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    331c:	f043 0301 	orr.w	r3, r3, #1
    3320:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3324:	aa03      	add	r2, sp, #12
    3326:	a904      	add	r1, sp, #16
    3328:	a805      	add	r0, sp, #20
    332a:	f24c 3350 	movw	r3, #50000	; 0xc350
    332e:	f7fe ff17 	bl	2160 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3332:	4b15      	ldr	r3, [pc, #84]	; (3388 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3334:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3338:	0e1b      	lsrs	r3, r3, #24
    333a:	f003 0301 	and.w	r3, r3, #1
    333e:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3340:	9a03      	ldr	r2, [sp, #12]
    3342:	a904      	add	r1, sp, #16
    3344:	ab05      	add	r3, sp, #20
    3346:	4618      	mov	r0, r3
    3348:	f7fe ff24 	bl	2194 <Clock_Ip_TimeoutExpired>
    334c:	4603      	mov	r3, r0
    334e:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3352:	9b06      	ldr	r3, [sp, #24]
    3354:	2b00      	cmp	r3, #0
    3356:	d106      	bne.n	3366 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3358:	f89d 301f 	ldrb.w	r3, [sp, #31]
    335c:	f083 0301 	eor.w	r3, r3, #1
    3360:	b2db      	uxtb	r3, r3
    3362:	2b00      	cmp	r3, #0
    3364:	d1e5      	bne.n	3332 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3366:	f89d 301f 	ldrb.w	r3, [sp, #31]
    336a:	2b00      	cmp	r3, #0
    336c:	d005      	beq.n	337a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    336e:	9b01      	ldr	r3, [sp, #4]
    3370:	681b      	ldr	r3, [r3, #0]
    3372:	4619      	mov	r1, r3
    3374:	2001      	movs	r0, #1
    3376:	f7fe fee3 	bl	2140 <Clock_Ip_ReportClockErrors>
}
    337a:	bf00      	nop
    337c:	b00b      	add	sp, #44	; 0x2c
    337e:	f85d fb04 	ldr.w	pc, [sp], #4
    3382:	bf00      	nop
    3384:	0000ba08 	.word	0x0000ba08
    3388:	40064000 	.word	0x40064000

0000338c <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    338c:	b500      	push	{lr}
    338e:	b089      	sub	sp, #36	; 0x24
    3390:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3392:	2300      	movs	r3, #0
    3394:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3398:	9b01      	ldr	r3, [sp, #4]
    339a:	889b      	ldrh	r3, [r3, #4]
    339c:	2b01      	cmp	r3, #1
    339e:	d132      	bne.n	3406 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    33a0:	4b1b      	ldr	r3, [pc, #108]	; (3410 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    33a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    33a6:	4a1a      	ldr	r2, [pc, #104]	; (3410 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    33a8:	f043 0301 	orr.w	r3, r3, #1
    33ac:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    33b0:	aa03      	add	r2, sp, #12
    33b2:	a904      	add	r1, sp, #16
    33b4:	a805      	add	r0, sp, #20
    33b6:	f24c 3350 	movw	r3, #50000	; 0xc350
    33ba:	f7fe fed1 	bl	2160 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    33be:	4b14      	ldr	r3, [pc, #80]	; (3410 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    33c0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    33c4:	0e1b      	lsrs	r3, r3, #24
    33c6:	f003 0301 	and.w	r3, r3, #1
    33ca:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    33cc:	9a03      	ldr	r2, [sp, #12]
    33ce:	a904      	add	r1, sp, #16
    33d0:	ab05      	add	r3, sp, #20
    33d2:	4618      	mov	r0, r3
    33d4:	f7fe fede 	bl	2194 <Clock_Ip_TimeoutExpired>
    33d8:	4603      	mov	r3, r0
    33da:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    33de:	9b06      	ldr	r3, [sp, #24]
    33e0:	2b00      	cmp	r3, #0
    33e2:	d106      	bne.n	33f2 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    33e4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33e8:	f083 0301 	eor.w	r3, r3, #1
    33ec:	b2db      	uxtb	r3, r3
    33ee:	2b00      	cmp	r3, #0
    33f0:	d1e5      	bne.n	33be <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    33f2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33f6:	2b00      	cmp	r3, #0
    33f8:	d005      	beq.n	3406 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    33fa:	9b01      	ldr	r3, [sp, #4]
    33fc:	681b      	ldr	r3, [r3, #0]
    33fe:	4619      	mov	r1, r3
    3400:	2001      	movs	r0, #1
    3402:	f7fe fe9d 	bl	2140 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3406:	bf00      	nop
    3408:	b009      	add	sp, #36	; 0x24
    340a:	f85d fb04 	ldr.w	pc, [sp], #4
    340e:	bf00      	nop
    3410:	40064000 	.word	0x40064000

00003414 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3414:	b082      	sub	sp, #8
    3416:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3418:	4b05      	ldr	r3, [pc, #20]	; (3430 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    341a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    341e:	4a04      	ldr	r2, [pc, #16]	; (3430 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3420:	f023 0301 	bic.w	r3, r3, #1
    3424:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3428:	bf00      	nop
    342a:	b002      	add	sp, #8
    342c:	4770      	bx	lr
    342e:	bf00      	nop
    3430:	40064000 	.word	0x40064000

00003434 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3434:	b082      	sub	sp, #8
    3436:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3438:	bf00      	nop
    343a:	b002      	add	sp, #8
    343c:	4770      	bx	lr

0000343e <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    343e:	b082      	sub	sp, #8
    3440:	9001      	str	r0, [sp, #4]
    3442:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3444:	bf00      	nop
    3446:	b002      	add	sp, #8
    3448:	4770      	bx	lr

0000344a <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    344a:	b082      	sub	sp, #8
    344c:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    344e:	bf00      	nop
    3450:	b002      	add	sp, #8
    3452:	4770      	bx	lr

00003454 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3454:	b082      	sub	sp, #8
    3456:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3458:	bf00      	nop
    345a:	b002      	add	sp, #8
    345c:	4770      	bx	lr

0000345e <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    345e:	b082      	sub	sp, #8
    3460:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3462:	2302      	movs	r3, #2
}
    3464:	4618      	mov	r0, r3
    3466:	b002      	add	sp, #8
    3468:	4770      	bx	lr

0000346a <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    346a:	b082      	sub	sp, #8
    346c:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    346e:	bf00      	nop
    3470:	b002      	add	sp, #8
    3472:	4770      	bx	lr

00003474 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3474:	b500      	push	{lr}
    3476:	b083      	sub	sp, #12
    3478:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    347a:	9b01      	ldr	r3, [sp, #4]
    347c:	2b00      	cmp	r3, #0
    347e:	d002      	beq.n	3486 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3480:	9801      	ldr	r0, [sp, #4]
    3482:	f000 f870 	bl	3566 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3486:	bf00      	nop
    3488:	b003      	add	sp, #12
    348a:	f85d fb04 	ldr.w	pc, [sp], #4

0000348e <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    348e:	b500      	push	{lr}
    3490:	b083      	sub	sp, #12
    3492:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3494:	9b01      	ldr	r3, [sp, #4]
    3496:	2b00      	cmp	r3, #0
    3498:	d002      	beq.n	34a0 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    349a:	9801      	ldr	r0, [sp, #4]
    349c:	f000 f89a 	bl	35d4 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34a0:	bf00      	nop
    34a2:	b003      	add	sp, #12
    34a4:	f85d fb04 	ldr.w	pc, [sp], #4

000034a8 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    34a8:	b500      	push	{lr}
    34aa:	b089      	sub	sp, #36	; 0x24
    34ac:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    34ae:	2301      	movs	r3, #1
    34b0:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    34b2:	2300      	movs	r3, #0
    34b4:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    34b8:	4b1e      	ldr	r3, [pc, #120]	; (3534 <Clock_Ip_CompleteSpll+0x8c>)
    34ba:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    34be:	f003 0301 	and.w	r3, r3, #1
    34c2:	2b00      	cmp	r3, #0
    34c4:	d02f      	beq.n	3526 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    34c6:	aa02      	add	r2, sp, #8
    34c8:	a903      	add	r1, sp, #12
    34ca:	a804      	add	r0, sp, #16
    34cc:	f24c 3350 	movw	r3, #50000	; 0xc350
    34d0:	f7fe fe46 	bl	2160 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    34d4:	4b17      	ldr	r3, [pc, #92]	; (3534 <Clock_Ip_CompleteSpll+0x8c>)
    34d6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    34da:	0e1b      	lsrs	r3, r3, #24
    34dc:	f003 0301 	and.w	r3, r3, #1
    34e0:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    34e2:	9a02      	ldr	r2, [sp, #8]
    34e4:	a903      	add	r1, sp, #12
    34e6:	ab04      	add	r3, sp, #16
    34e8:	4618      	mov	r0, r3
    34ea:	f7fe fe53 	bl	2194 <Clock_Ip_TimeoutExpired>
    34ee:	4603      	mov	r3, r0
    34f0:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    34f4:	9b05      	ldr	r3, [sp, #20]
    34f6:	2b00      	cmp	r3, #0
    34f8:	d106      	bne.n	3508 <Clock_Ip_CompleteSpll+0x60>
    34fa:	f89d 301b 	ldrb.w	r3, [sp, #27]
    34fe:	f083 0301 	eor.w	r3, r3, #1
    3502:	b2db      	uxtb	r3, r3
    3504:	2b00      	cmp	r3, #0
    3506:	d1e5      	bne.n	34d4 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3508:	f89d 301b 	ldrb.w	r3, [sp, #27]
    350c:	f083 0301 	eor.w	r3, r3, #1
    3510:	b2db      	uxtb	r3, r3
    3512:	2b00      	cmp	r3, #0
    3514:	d002      	beq.n	351c <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3516:	2302      	movs	r3, #2
    3518:	9307      	str	r3, [sp, #28]
    351a:	e006      	b.n	352a <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    351c:	9901      	ldr	r1, [sp, #4]
    351e:	2001      	movs	r0, #1
    3520:	f7fe fe0e 	bl	2140 <Clock_Ip_ReportClockErrors>
    3524:	e001      	b.n	352a <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3526:	2300      	movs	r3, #0
    3528:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    352a:	9b07      	ldr	r3, [sp, #28]
}
    352c:	4618      	mov	r0, r3
    352e:	b009      	add	sp, #36	; 0x24
    3530:	f85d fb04 	ldr.w	pc, [sp], #4
    3534:	40064000 	.word	0x40064000

00003538 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3538:	b500      	push	{lr}
    353a:	b083      	sub	sp, #12
    353c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    353e:	9801      	ldr	r0, [sp, #4]
    3540:	f000 f886 	bl	3650 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3544:	bf00      	nop
    3546:	b003      	add	sp, #12
    3548:	f85d fb04 	ldr.w	pc, [sp], #4

0000354c <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    354c:	b500      	push	{lr}
    354e:	b083      	sub	sp, #12
    3550:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3552:	9b01      	ldr	r3, [sp, #4]
    3554:	2b00      	cmp	r3, #0
    3556:	d002      	beq.n	355e <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3558:	9801      	ldr	r0, [sp, #4]
    355a:	f000 f891 	bl	3680 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    355e:	bf00      	nop
    3560:	b003      	add	sp, #12
    3562:	f85d fb04 	ldr.w	pc, [sp], #4

00003566 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3566:	b082      	sub	sp, #8
    3568:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    356a:	4b19      	ldr	r3, [pc, #100]	; (35d0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    356c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3570:	4a17      	ldr	r2, [pc, #92]	; (35d0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3572:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3576:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    357a:	4b15      	ldr	r3, [pc, #84]	; (35d0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    357c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3580:	4a13      	ldr	r2, [pc, #76]	; (35d0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3586:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    358a:	4b11      	ldr	r3, [pc, #68]	; (35d0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    358c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3590:	4a0f      	ldr	r2, [pc, #60]	; (35d0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3592:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3596:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    359a:	4b0d      	ldr	r3, [pc, #52]	; (35d0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    359c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    35a0:	4a0b      	ldr	r2, [pc, #44]	; (35d0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35a2:	f023 0301 	bic.w	r3, r3, #1
    35a6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    35aa:	4b09      	ldr	r3, [pc, #36]	; (35d0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35ac:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    35b0:	4a07      	ldr	r2, [pc, #28]	; (35d0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    35b6:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    35ba:	4b05      	ldr	r3, [pc, #20]	; (35d0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35bc:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    35c0:	4a03      	ldr	r2, [pc, #12]	; (35d0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    35c6:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    35ca:	bf00      	nop
    35cc:	b002      	add	sp, #8
    35ce:	4770      	bx	lr
    35d0:	40064000 	.word	0x40064000

000035d4 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    35d4:	b082      	sub	sp, #8
    35d6:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    35d8:	9b01      	ldr	r3, [sp, #4]
    35da:	889b      	ldrh	r3, [r3, #4]
    35dc:	2b01      	cmp	r3, #1
    35de:	d12f      	bne.n	3640 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    35e0:	4b1a      	ldr	r3, [pc, #104]	; (364c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    35e2:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    35e6:	9b01      	ldr	r3, [sp, #4]
    35e8:	7b5b      	ldrb	r3, [r3, #13]
    35ea:	3b01      	subs	r3, #1
    35ec:	021b      	lsls	r3, r3, #8
    35ee:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    35f2:	9b01      	ldr	r3, [sp, #4]
    35f4:	7d1b      	ldrb	r3, [r3, #20]
    35f6:	3b10      	subs	r3, #16
    35f8:	041b      	lsls	r3, r3, #16
    35fa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    35fe:	430b      	orrs	r3, r1
    3600:	4912      	ldr	r1, [pc, #72]	; (364c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3602:	4313      	orrs	r3, r2
    3604:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3608:	9b01      	ldr	r3, [sp, #4]
    360a:	7fdb      	ldrb	r3, [r3, #31]
    360c:	2b02      	cmp	r3, #2
    360e:	d011      	beq.n	3634 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3610:	2b02      	cmp	r3, #2
    3612:	dc17      	bgt.n	3644 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3614:	2b00      	cmp	r3, #0
    3616:	d002      	beq.n	361e <Clock_Ip_SetSpll_TrustedCall+0x4a>
    3618:	2b01      	cmp	r3, #1
    361a:	d005      	beq.n	3628 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    361c:	e012      	b.n	3644 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    361e:	4b0b      	ldr	r3, [pc, #44]	; (364c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3620:	2200      	movs	r2, #0
    3622:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3626:	e00e      	b.n	3646 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3628:	4b08      	ldr	r3, [pc, #32]	; (364c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    362a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    362e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3632:	e008      	b.n	3646 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3634:	4b05      	ldr	r3, [pc, #20]	; (364c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3636:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    363a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    363e:	e002      	b.n	3646 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    3640:	bf00      	nop
    3642:	e000      	b.n	3646 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    3644:	bf00      	nop
}
    3646:	bf00      	nop
    3648:	b002      	add	sp, #8
    364a:	4770      	bx	lr
    364c:	40064000 	.word	0x40064000

00003650 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    3650:	b082      	sub	sp, #8
    3652:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3654:	4b09      	ldr	r3, [pc, #36]	; (367c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3656:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    365a:	4a08      	ldr	r2, [pc, #32]	; (367c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    365c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3660:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3664:	4b05      	ldr	r3, [pc, #20]	; (367c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3666:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    366a:	4a04      	ldr	r2, [pc, #16]	; (367c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    366c:	f023 0301 	bic.w	r3, r3, #1
    3670:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    3674:	bf00      	nop
    3676:	b002      	add	sp, #8
    3678:	4770      	bx	lr
    367a:	bf00      	nop
    367c:	40064000 	.word	0x40064000

00003680 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3680:	b082      	sub	sp, #8
    3682:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3684:	9b01      	ldr	r3, [sp, #4]
    3686:	889b      	ldrh	r3, [r3, #4]
    3688:	2b01      	cmp	r3, #1
    368a:	d107      	bne.n	369c <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    368c:	4b05      	ldr	r3, [pc, #20]	; (36a4 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    368e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3692:	4a04      	ldr	r2, [pc, #16]	; (36a4 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3694:	f043 0301 	orr.w	r3, r3, #1
    3698:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    369c:	bf00      	nop
    369e:	b002      	add	sp, #8
    36a0:	4770      	bx	lr
    36a2:	bf00      	nop
    36a4:	40064000 	.word	0x40064000

000036a8 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    36a8:	b082      	sub	sp, #8
    36aa:	9001      	str	r0, [sp, #4]
    36ac:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    36ae:	bf00      	nop
    36b0:	b002      	add	sp, #8
    36b2:	4770      	bx	lr

000036b4 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    36b4:	b082      	sub	sp, #8
    36b6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    36b8:	bf00      	nop
    36ba:	b002      	add	sp, #8
    36bc:	4770      	bx	lr

000036be <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    36be:	b500      	push	{lr}
    36c0:	b083      	sub	sp, #12
    36c2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36c4:	9b01      	ldr	r3, [sp, #4]
    36c6:	2b00      	cmp	r3, #0
    36c8:	d002      	beq.n	36d0 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    36ca:	9801      	ldr	r0, [sp, #4]
    36cc:	f000 f8ee 	bl	38ac <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36d0:	bf00      	nop
    36d2:	b003      	add	sp, #12
    36d4:	f85d fb04 	ldr.w	pc, [sp], #4

000036d8 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    36d8:	b500      	push	{lr}
    36da:	b083      	sub	sp, #12
    36dc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36de:	9b01      	ldr	r3, [sp, #4]
    36e0:	2b00      	cmp	r3, #0
    36e2:	d002      	beq.n	36ea <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    36e4:	9801      	ldr	r0, [sp, #4]
    36e6:	f000 f8ff 	bl	38e8 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36ea:	bf00      	nop
    36ec:	b003      	add	sp, #12
    36ee:	f85d fb04 	ldr.w	pc, [sp], #4

000036f2 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    36f2:	b500      	push	{lr}
    36f4:	b083      	sub	sp, #12
    36f6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36f8:	9b01      	ldr	r3, [sp, #4]
    36fa:	2b00      	cmp	r3, #0
    36fc:	d002      	beq.n	3704 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    36fe:	9801      	ldr	r0, [sp, #4]
    3700:	f000 f912 	bl	3928 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3704:	bf00      	nop
    3706:	b003      	add	sp, #12
    3708:	f85d fb04 	ldr.w	pc, [sp], #4

0000370c <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    370c:	b500      	push	{lr}
    370e:	b083      	sub	sp, #12
    3710:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3712:	9b01      	ldr	r3, [sp, #4]
    3714:	2b00      	cmp	r3, #0
    3716:	d002      	beq.n	371e <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    3718:	9801      	ldr	r0, [sp, #4]
    371a:	f000 f925 	bl	3968 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    371e:	bf00      	nop
    3720:	b003      	add	sp, #12
    3722:	f85d fb04 	ldr.w	pc, [sp], #4

00003726 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3726:	b500      	push	{lr}
    3728:	b083      	sub	sp, #12
    372a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    372c:	9b01      	ldr	r3, [sp, #4]
    372e:	2b00      	cmp	r3, #0
    3730:	d002      	beq.n	3738 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    3732:	9801      	ldr	r0, [sp, #4]
    3734:	f000 f936 	bl	39a4 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3738:	bf00      	nop
    373a:	b003      	add	sp, #12
    373c:	f85d fb04 	ldr.w	pc, [sp], #4

00003740 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3740:	b500      	push	{lr}
    3742:	b083      	sub	sp, #12
    3744:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3746:	9b01      	ldr	r3, [sp, #4]
    3748:	2b00      	cmp	r3, #0
    374a:	d002      	beq.n	3752 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    374c:	9801      	ldr	r0, [sp, #4]
    374e:	f000 f949 	bl	39e4 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3752:	bf00      	nop
    3754:	b003      	add	sp, #12
    3756:	f85d fb04 	ldr.w	pc, [sp], #4

0000375a <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    375a:	b500      	push	{lr}
    375c:	b083      	sub	sp, #12
    375e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3760:	9b01      	ldr	r3, [sp, #4]
    3762:	2b00      	cmp	r3, #0
    3764:	d002      	beq.n	376c <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    3766:	9801      	ldr	r0, [sp, #4]
    3768:	f000 f958 	bl	3a1c <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    376c:	bf00      	nop
    376e:	b003      	add	sp, #12
    3770:	f85d fb04 	ldr.w	pc, [sp], #4

00003774 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3774:	b500      	push	{lr}
    3776:	b083      	sub	sp, #12
    3778:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    377a:	9b01      	ldr	r3, [sp, #4]
    377c:	2b00      	cmp	r3, #0
    377e:	d002      	beq.n	3786 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    3780:	9801      	ldr	r0, [sp, #4]
    3782:	f000 f969 	bl	3a58 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3786:	bf00      	nop
    3788:	b003      	add	sp, #12
    378a:	f85d fb04 	ldr.w	pc, [sp], #4

0000378e <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    378e:	b500      	push	{lr}
    3790:	b083      	sub	sp, #12
    3792:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3794:	9b01      	ldr	r3, [sp, #4]
    3796:	2b00      	cmp	r3, #0
    3798:	d002      	beq.n	37a0 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    379a:	9801      	ldr	r0, [sp, #4]
    379c:	f000 f978 	bl	3a90 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37a0:	bf00      	nop
    37a2:	b003      	add	sp, #12
    37a4:	f85d fb04 	ldr.w	pc, [sp], #4

000037a8 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    37a8:	b500      	push	{lr}
    37aa:	b083      	sub	sp, #12
    37ac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37ae:	9b01      	ldr	r3, [sp, #4]
    37b0:	2b00      	cmp	r3, #0
    37b2:	d002      	beq.n	37ba <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    37b4:	9801      	ldr	r0, [sp, #4]
    37b6:	f000 f989 	bl	3acc <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37ba:	bf00      	nop
    37bc:	b003      	add	sp, #12
    37be:	f85d fb04 	ldr.w	pc, [sp], #4

000037c2 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    37c2:	b500      	push	{lr}
    37c4:	b083      	sub	sp, #12
    37c6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37c8:	9b01      	ldr	r3, [sp, #4]
    37ca:	2b00      	cmp	r3, #0
    37cc:	d002      	beq.n	37d4 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    37ce:	9801      	ldr	r0, [sp, #4]
    37d0:	f000 f998 	bl	3b04 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37d4:	bf00      	nop
    37d6:	b003      	add	sp, #12
    37d8:	f85d fb04 	ldr.w	pc, [sp], #4

000037dc <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    37dc:	b500      	push	{lr}
    37de:	b083      	sub	sp, #12
    37e0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37e2:	9b01      	ldr	r3, [sp, #4]
    37e4:	2b00      	cmp	r3, #0
    37e6:	d002      	beq.n	37ee <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    37e8:	9801      	ldr	r0, [sp, #4]
    37ea:	f000 f9a9 	bl	3b40 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37ee:	bf00      	nop
    37f0:	b003      	add	sp, #12
    37f2:	f85d fb04 	ldr.w	pc, [sp], #4

000037f6 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    37f6:	b500      	push	{lr}
    37f8:	b083      	sub	sp, #12
    37fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37fc:	9b01      	ldr	r3, [sp, #4]
    37fe:	2b00      	cmp	r3, #0
    3800:	d002      	beq.n	3808 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    3802:	9801      	ldr	r0, [sp, #4]
    3804:	f000 f9e6 	bl	3bd4 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3808:	bf00      	nop
    380a:	b003      	add	sp, #12
    380c:	f85d fb04 	ldr.w	pc, [sp], #4

00003810 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3810:	b500      	push	{lr}
    3812:	b083      	sub	sp, #12
    3814:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3816:	9b01      	ldr	r3, [sp, #4]
    3818:	2b00      	cmp	r3, #0
    381a:	d002      	beq.n	3822 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    381c:	9801      	ldr	r0, [sp, #4]
    381e:	f000 fa25 	bl	3c6c <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3822:	bf00      	nop
    3824:	b003      	add	sp, #12
    3826:	f85d fb04 	ldr.w	pc, [sp], #4

0000382a <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    382a:	b500      	push	{lr}
    382c:	b083      	sub	sp, #12
    382e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3830:	9b01      	ldr	r3, [sp, #4]
    3832:	2b00      	cmp	r3, #0
    3834:	d002      	beq.n	383c <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    3836:	9801      	ldr	r0, [sp, #4]
    3838:	f000 fa2a 	bl	3c90 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    383c:	bf00      	nop
    383e:	b003      	add	sp, #12
    3840:	f85d fb04 	ldr.w	pc, [sp], #4

00003844 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3844:	b500      	push	{lr}
    3846:	b083      	sub	sp, #12
    3848:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    384a:	9b01      	ldr	r3, [sp, #4]
    384c:	2b00      	cmp	r3, #0
    384e:	d002      	beq.n	3856 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    3850:	9801      	ldr	r0, [sp, #4]
    3852:	f000 fa3b 	bl	3ccc <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3856:	bf00      	nop
    3858:	b003      	add	sp, #12
    385a:	f85d fb04 	ldr.w	pc, [sp], #4

0000385e <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    385e:	b500      	push	{lr}
    3860:	b083      	sub	sp, #12
    3862:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3864:	9b01      	ldr	r3, [sp, #4]
    3866:	2b00      	cmp	r3, #0
    3868:	d002      	beq.n	3870 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    386a:	9801      	ldr	r0, [sp, #4]
    386c:	f000 fa56 	bl	3d1c <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3870:	bf00      	nop
    3872:	b003      	add	sp, #12
    3874:	f85d fb04 	ldr.w	pc, [sp], #4

00003878 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3878:	b500      	push	{lr}
    387a:	b083      	sub	sp, #12
    387c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    387e:	9b01      	ldr	r3, [sp, #4]
    3880:	2b00      	cmp	r3, #0
    3882:	d002      	beq.n	388a <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    3884:	9801      	ldr	r0, [sp, #4]
    3886:	f000 fa79 	bl	3d7c <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    388a:	bf00      	nop
    388c:	b003      	add	sp, #12
    388e:	f85d fb04 	ldr.w	pc, [sp], #4

00003892 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3892:	b500      	push	{lr}
    3894:	b083      	sub	sp, #12
    3896:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3898:	9b01      	ldr	r3, [sp, #4]
    389a:	2b00      	cmp	r3, #0
    389c:	d002      	beq.n	38a4 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    389e:	9801      	ldr	r0, [sp, #4]
    38a0:	f000 fa8a 	bl	3db8 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38a4:	bf00      	nop
    38a6:	b003      	add	sp, #12
    38a8:	f85d fb04 	ldr.w	pc, [sp], #4

000038ac <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    38ac:	b084      	sub	sp, #16
    38ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    38b0:	4b0b      	ldr	r3, [pc, #44]	; (38e0 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    38b2:	795b      	ldrb	r3, [r3, #5]
    38b4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    38b6:	4b0b      	ldr	r3, [pc, #44]	; (38e4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    38b8:	695b      	ldr	r3, [r3, #20]
    38ba:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    38bc:	9b02      	ldr	r3, [sp, #8]
    38be:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    38c2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    38c4:	9b03      	ldr	r3, [sp, #12]
    38c6:	061b      	lsls	r3, r3, #24
    38c8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    38cc:	9a02      	ldr	r2, [sp, #8]
    38ce:	4313      	orrs	r3, r2
    38d0:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    38d2:	4a04      	ldr	r2, [pc, #16]	; (38e4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    38d4:	9b02      	ldr	r3, [sp, #8]
    38d6:	6153      	str	r3, [r2, #20]
}
    38d8:	bf00      	nop
    38da:	b004      	add	sp, #16
    38dc:	4770      	bx	lr
    38de:	bf00      	nop
    38e0:	0000bd70 	.word	0x0000bd70
    38e4:	40064000 	.word	0x40064000

000038e8 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    38e8:	b084      	sub	sp, #16
    38ea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    38ec:	9b01      	ldr	r3, [sp, #4]
    38ee:	685b      	ldr	r3, [r3, #4]
    38f0:	4a0b      	ldr	r2, [pc, #44]	; (3920 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    38f2:	5cd3      	ldrb	r3, [r2, r3]
    38f4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    38f6:	4b0b      	ldr	r3, [pc, #44]	; (3924 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    38f8:	695b      	ldr	r3, [r3, #20]
    38fa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    38fc:	9b02      	ldr	r3, [sp, #8]
    38fe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3902:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3904:	9b03      	ldr	r3, [sp, #12]
    3906:	061b      	lsls	r3, r3, #24
    3908:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    390c:	9a02      	ldr	r2, [sp, #8]
    390e:	4313      	orrs	r3, r2
    3910:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3912:	4a04      	ldr	r2, [pc, #16]	; (3924 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3914:	9b02      	ldr	r3, [sp, #8]
    3916:	6153      	str	r3, [r2, #20]
}
    3918:	bf00      	nop
    391a:	b004      	add	sp, #16
    391c:	4770      	bx	lr
    391e:	bf00      	nop
    3920:	0000bd70 	.word	0x0000bd70
    3924:	40064000 	.word	0x40064000

00003928 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3928:	b084      	sub	sp, #16
    392a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    392c:	9b01      	ldr	r3, [sp, #4]
    392e:	685b      	ldr	r3, [r3, #4]
    3930:	4a0b      	ldr	r2, [pc, #44]	; (3960 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    3932:	5cd3      	ldrb	r3, [r2, r3]
    3934:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    3936:	4b0b      	ldr	r3, [pc, #44]	; (3964 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3938:	699b      	ldr	r3, [r3, #24]
    393a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    393c:	9b02      	ldr	r3, [sp, #8]
    393e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3942:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    3944:	9b03      	ldr	r3, [sp, #12]
    3946:	061b      	lsls	r3, r3, #24
    3948:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    394c:	9a02      	ldr	r2, [sp, #8]
    394e:	4313      	orrs	r3, r2
    3950:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    3952:	4a04      	ldr	r2, [pc, #16]	; (3964 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3954:	9b02      	ldr	r3, [sp, #8]
    3956:	6193      	str	r3, [r2, #24]
}
    3958:	bf00      	nop
    395a:	b004      	add	sp, #16
    395c:	4770      	bx	lr
    395e:	bf00      	nop
    3960:	0000bd70 	.word	0x0000bd70
    3964:	40064000 	.word	0x40064000

00003968 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3968:	b084      	sub	sp, #16
    396a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    396c:	4b0b      	ldr	r3, [pc, #44]	; (399c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    396e:	795b      	ldrb	r3, [r3, #5]
    3970:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    3972:	4b0b      	ldr	r3, [pc, #44]	; (39a0 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3974:	69db      	ldr	r3, [r3, #28]
    3976:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3978:	9b02      	ldr	r3, [sp, #8]
    397a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    397e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3980:	9b03      	ldr	r3, [sp, #12]
    3982:	061b      	lsls	r3, r3, #24
    3984:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3988:	9a02      	ldr	r2, [sp, #8]
    398a:	4313      	orrs	r3, r2
    398c:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    398e:	4a04      	ldr	r2, [pc, #16]	; (39a0 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3990:	9b02      	ldr	r3, [sp, #8]
    3992:	61d3      	str	r3, [r2, #28]
}
    3994:	bf00      	nop
    3996:	b004      	add	sp, #16
    3998:	4770      	bx	lr
    399a:	bf00      	nop
    399c:	0000bd70 	.word	0x0000bd70
    39a0:	40064000 	.word	0x40064000

000039a4 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    39a4:	b084      	sub	sp, #16
    39a6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    39a8:	9b01      	ldr	r3, [sp, #4]
    39aa:	685b      	ldr	r3, [r3, #4]
    39ac:	4a0b      	ldr	r2, [pc, #44]	; (39dc <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    39ae:	5cd3      	ldrb	r3, [r2, r3]
    39b0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    39b2:	4b0b      	ldr	r3, [pc, #44]	; (39e0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    39b4:	69db      	ldr	r3, [r3, #28]
    39b6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    39b8:	9b02      	ldr	r3, [sp, #8]
    39ba:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    39be:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    39c0:	9b03      	ldr	r3, [sp, #12]
    39c2:	061b      	lsls	r3, r3, #24
    39c4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    39c8:	9a02      	ldr	r2, [sp, #8]
    39ca:	4313      	orrs	r3, r2
    39cc:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    39ce:	4a04      	ldr	r2, [pc, #16]	; (39e0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    39d0:	9b02      	ldr	r3, [sp, #8]
    39d2:	61d3      	str	r3, [r2, #28]
}
    39d4:	bf00      	nop
    39d6:	b004      	add	sp, #16
    39d8:	4770      	bx	lr
    39da:	bf00      	nop
    39dc:	0000bd70 	.word	0x0000bd70
    39e0:	40064000 	.word	0x40064000

000039e4 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    39e4:	b084      	sub	sp, #16
    39e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    39e8:	4b0a      	ldr	r3, [pc, #40]	; (3a14 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    39ea:	7b9b      	ldrb	r3, [r3, #14]
    39ec:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    39ee:	4b0a      	ldr	r3, [pc, #40]	; (3a18 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    39f0:	691b      	ldr	r3, [r3, #16]
    39f2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    39f4:	9b02      	ldr	r3, [sp, #8]
    39f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    39fa:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    39fc:	9b03      	ldr	r3, [sp, #12]
    39fe:	011b      	lsls	r3, r3, #4
    3a00:	9a02      	ldr	r2, [sp, #8]
    3a02:	4313      	orrs	r3, r2
    3a04:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a06:	4a04      	ldr	r2, [pc, #16]	; (3a18 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3a08:	9b02      	ldr	r3, [sp, #8]
    3a0a:	6113      	str	r3, [r2, #16]
}
    3a0c:	bf00      	nop
    3a0e:	b004      	add	sp, #16
    3a10:	4770      	bx	lr
    3a12:	bf00      	nop
    3a14:	0000bd18 	.word	0x0000bd18
    3a18:	40048000 	.word	0x40048000

00003a1c <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a1c:	b084      	sub	sp, #16
    3a1e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a20:	9b01      	ldr	r3, [sp, #4]
    3a22:	685b      	ldr	r3, [r3, #4]
    3a24:	4a0a      	ldr	r2, [pc, #40]	; (3a50 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    3a26:	5cd3      	ldrb	r3, [r2, r3]
    3a28:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    3a2a:	4b0a      	ldr	r3, [pc, #40]	; (3a54 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3a2c:	691b      	ldr	r3, [r3, #16]
    3a2e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3a30:	9b02      	ldr	r3, [sp, #8]
    3a32:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3a36:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3a38:	9b03      	ldr	r3, [sp, #12]
    3a3a:	011b      	lsls	r3, r3, #4
    3a3c:	9a02      	ldr	r2, [sp, #8]
    3a3e:	4313      	orrs	r3, r2
    3a40:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a42:	4a04      	ldr	r2, [pc, #16]	; (3a54 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3a44:	9b02      	ldr	r3, [sp, #8]
    3a46:	6113      	str	r3, [r2, #16]
}
    3a48:	bf00      	nop
    3a4a:	b004      	add	sp, #16
    3a4c:	4770      	bx	lr
    3a4e:	bf00      	nop
    3a50:	0000bd18 	.word	0x0000bd18
    3a54:	40048000 	.word	0x40048000

00003a58 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a58:	b084      	sub	sp, #16
    3a5a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a5c:	4b0a      	ldr	r3, [pc, #40]	; (3a88 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    3a5e:	785b      	ldrb	r3, [r3, #1]
    3a60:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3a62:	4b0a      	ldr	r3, [pc, #40]	; (3a8c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3a64:	691b      	ldr	r3, [r3, #16]
    3a66:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3a68:	9b02      	ldr	r3, [sp, #8]
    3a6a:	f023 030c 	bic.w	r3, r3, #12
    3a6e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3a70:	9b03      	ldr	r3, [sp, #12]
    3a72:	009b      	lsls	r3, r3, #2
    3a74:	9a02      	ldr	r2, [sp, #8]
    3a76:	4313      	orrs	r3, r2
    3a78:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a7a:	4a04      	ldr	r2, [pc, #16]	; (3a8c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3a7c:	9b02      	ldr	r3, [sp, #8]
    3a7e:	6113      	str	r3, [r2, #16]
}
    3a80:	bf00      	nop
    3a82:	b004      	add	sp, #16
    3a84:	4770      	bx	lr
    3a86:	bf00      	nop
    3a88:	0000bdd0 	.word	0x0000bdd0
    3a8c:	40048000 	.word	0x40048000

00003a90 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a90:	b084      	sub	sp, #16
    3a92:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a94:	9b01      	ldr	r3, [sp, #4]
    3a96:	685b      	ldr	r3, [r3, #4]
    3a98:	4a0a      	ldr	r2, [pc, #40]	; (3ac4 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    3a9a:	5cd3      	ldrb	r3, [r2, r3]
    3a9c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3a9e:	4b0a      	ldr	r3, [pc, #40]	; (3ac8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3aa0:	691b      	ldr	r3, [r3, #16]
    3aa2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3aa4:	9b02      	ldr	r3, [sp, #8]
    3aa6:	f023 030c 	bic.w	r3, r3, #12
    3aaa:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3aac:	9b03      	ldr	r3, [sp, #12]
    3aae:	009b      	lsls	r3, r3, #2
    3ab0:	9a02      	ldr	r2, [sp, #8]
    3ab2:	4313      	orrs	r3, r2
    3ab4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3ab6:	4a04      	ldr	r2, [pc, #16]	; (3ac8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3ab8:	9b02      	ldr	r3, [sp, #8]
    3aba:	6113      	str	r3, [r2, #16]
}
    3abc:	bf00      	nop
    3abe:	b004      	add	sp, #16
    3ac0:	4770      	bx	lr
    3ac2:	bf00      	nop
    3ac4:	0000bdd0 	.word	0x0000bdd0
    3ac8:	40048000 	.word	0x40048000

00003acc <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3acc:	b084      	sub	sp, #16
    3ace:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ad0:	4b0a      	ldr	r3, [pc, #40]	; (3afc <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    3ad2:	795b      	ldrb	r3, [r3, #5]
    3ad4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    3ad6:	4b0a      	ldr	r3, [pc, #40]	; (3b00 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3ad8:	6a1b      	ldr	r3, [r3, #32]
    3ada:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3adc:	9b02      	ldr	r3, [sp, #8]
    3ade:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3ae2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3ae4:	9b03      	ldr	r3, [sp, #12]
    3ae6:	061b      	lsls	r3, r3, #24
    3ae8:	9a02      	ldr	r2, [sp, #8]
    3aea:	4313      	orrs	r3, r2
    3aec:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3aee:	4a04      	ldr	r2, [pc, #16]	; (3b00 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3af0:	9b02      	ldr	r3, [sp, #8]
    3af2:	6213      	str	r3, [r2, #32]
}
    3af4:	bf00      	nop
    3af6:	b004      	add	sp, #16
    3af8:	4770      	bx	lr
    3afa:	bf00      	nop
    3afc:	0000bd70 	.word	0x0000bd70
    3b00:	40064000 	.word	0x40064000

00003b04 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b04:	b084      	sub	sp, #16
    3b06:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b08:	9b01      	ldr	r3, [sp, #4]
    3b0a:	685b      	ldr	r3, [r3, #4]
    3b0c:	4a0a      	ldr	r2, [pc, #40]	; (3b38 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    3b0e:	5cd3      	ldrb	r3, [r2, r3]
    3b10:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    3b12:	4b0a      	ldr	r3, [pc, #40]	; (3b3c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3b14:	6a1b      	ldr	r3, [r3, #32]
    3b16:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3b18:	9b02      	ldr	r3, [sp, #8]
    3b1a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3b1e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3b20:	9b03      	ldr	r3, [sp, #12]
    3b22:	061b      	lsls	r3, r3, #24
    3b24:	9a02      	ldr	r2, [sp, #8]
    3b26:	4313      	orrs	r3, r2
    3b28:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3b2a:	4a04      	ldr	r2, [pc, #16]	; (3b3c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3b2c:	9b02      	ldr	r3, [sp, #8]
    3b2e:	6213      	str	r3, [r2, #32]
}
    3b30:	bf00      	nop
    3b32:	b004      	add	sp, #16
    3b34:	4770      	bx	lr
    3b36:	bf00      	nop
    3b38:	0000bd70 	.word	0x0000bd70
    3b3c:	40064000 	.word	0x40064000

00003b40 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b40:	b086      	sub	sp, #24
    3b42:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b44:	4b20      	ldr	r3, [pc, #128]	; (3bc8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    3b46:	795b      	ldrb	r3, [r3, #5]
    3b48:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3b4a:	9b01      	ldr	r3, [sp, #4]
    3b4c:	681a      	ldr	r2, [r3, #0]
    3b4e:	491f      	ldr	r1, [pc, #124]	; (3bcc <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    3b50:	4613      	mov	r3, r2
    3b52:	00db      	lsls	r3, r3, #3
    3b54:	4413      	add	r3, r2
    3b56:	440b      	add	r3, r1
    3b58:	781b      	ldrb	r3, [r3, #0]
    3b5a:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3b5c:	4b1c      	ldr	r3, [pc, #112]	; (3bd0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3b5e:	68db      	ldr	r3, [r3, #12]
    3b60:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3b62:	9b03      	ldr	r3, [sp, #12]
    3b64:	2b03      	cmp	r3, #3
    3b66:	d813      	bhi.n	3b90 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3b68:	9b03      	ldr	r3, [sp, #12]
    3b6a:	005b      	lsls	r3, r3, #1
    3b6c:	3318      	adds	r3, #24
    3b6e:	2203      	movs	r2, #3
    3b70:	fa02 f303 	lsl.w	r3, r2, r3
    3b74:	43db      	mvns	r3, r3
    3b76:	9a05      	ldr	r2, [sp, #20]
    3b78:	4013      	ands	r3, r2
    3b7a:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3b7c:	9b03      	ldr	r3, [sp, #12]
    3b7e:	005b      	lsls	r3, r3, #1
    3b80:	3318      	adds	r3, #24
    3b82:	9a04      	ldr	r2, [sp, #16]
    3b84:	fa02 f303 	lsl.w	r3, r2, r3
    3b88:	9a05      	ldr	r2, [sp, #20]
    3b8a:	4313      	orrs	r3, r2
    3b8c:	9305      	str	r3, [sp, #20]
    3b8e:	e014      	b.n	3bba <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3b90:	9b03      	ldr	r3, [sp, #12]
    3b92:	3b04      	subs	r3, #4
    3b94:	005b      	lsls	r3, r3, #1
    3b96:	3310      	adds	r3, #16
    3b98:	2203      	movs	r2, #3
    3b9a:	fa02 f303 	lsl.w	r3, r2, r3
    3b9e:	43db      	mvns	r3, r3
    3ba0:	9a05      	ldr	r2, [sp, #20]
    3ba2:	4013      	ands	r3, r2
    3ba4:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3ba6:	9b03      	ldr	r3, [sp, #12]
    3ba8:	3b04      	subs	r3, #4
    3baa:	005b      	lsls	r3, r3, #1
    3bac:	3310      	adds	r3, #16
    3bae:	9a04      	ldr	r2, [sp, #16]
    3bb0:	fa02 f303 	lsl.w	r3, r2, r3
    3bb4:	9a05      	ldr	r2, [sp, #20]
    3bb6:	4313      	orrs	r3, r2
    3bb8:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3bba:	4a05      	ldr	r2, [pc, #20]	; (3bd0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3bbc:	9b05      	ldr	r3, [sp, #20]
    3bbe:	60d3      	str	r3, [r2, #12]
}
    3bc0:	bf00      	nop
    3bc2:	b006      	add	sp, #24
    3bc4:	4770      	bx	lr
    3bc6:	bf00      	nop
    3bc8:	0000bd18 	.word	0x0000bd18
    3bcc:	0000ba08 	.word	0x0000ba08
    3bd0:	40048000 	.word	0x40048000

00003bd4 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3bd4:	b086      	sub	sp, #24
    3bd6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3bd8:	9b01      	ldr	r3, [sp, #4]
    3bda:	685b      	ldr	r3, [r3, #4]
    3bdc:	4a20      	ldr	r2, [pc, #128]	; (3c60 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    3bde:	5cd3      	ldrb	r3, [r2, r3]
    3be0:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3be2:	9b01      	ldr	r3, [sp, #4]
    3be4:	681a      	ldr	r2, [r3, #0]
    3be6:	491f      	ldr	r1, [pc, #124]	; (3c64 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    3be8:	4613      	mov	r3, r2
    3bea:	00db      	lsls	r3, r3, #3
    3bec:	4413      	add	r3, r2
    3bee:	440b      	add	r3, r1
    3bf0:	781b      	ldrb	r3, [r3, #0]
    3bf2:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3bf4:	4b1c      	ldr	r3, [pc, #112]	; (3c68 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3bf6:	68db      	ldr	r3, [r3, #12]
    3bf8:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3bfa:	9b03      	ldr	r3, [sp, #12]
    3bfc:	2b03      	cmp	r3, #3
    3bfe:	d813      	bhi.n	3c28 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3c00:	9b03      	ldr	r3, [sp, #12]
    3c02:	005b      	lsls	r3, r3, #1
    3c04:	3318      	adds	r3, #24
    3c06:	2203      	movs	r2, #3
    3c08:	fa02 f303 	lsl.w	r3, r2, r3
    3c0c:	43db      	mvns	r3, r3
    3c0e:	9a05      	ldr	r2, [sp, #20]
    3c10:	4013      	ands	r3, r2
    3c12:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3c14:	9b03      	ldr	r3, [sp, #12]
    3c16:	005b      	lsls	r3, r3, #1
    3c18:	3318      	adds	r3, #24
    3c1a:	9a04      	ldr	r2, [sp, #16]
    3c1c:	fa02 f303 	lsl.w	r3, r2, r3
    3c20:	9a05      	ldr	r2, [sp, #20]
    3c22:	4313      	orrs	r3, r2
    3c24:	9305      	str	r3, [sp, #20]
    3c26:	e014      	b.n	3c52 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3c28:	9b03      	ldr	r3, [sp, #12]
    3c2a:	3b04      	subs	r3, #4
    3c2c:	005b      	lsls	r3, r3, #1
    3c2e:	3310      	adds	r3, #16
    3c30:	2203      	movs	r2, #3
    3c32:	fa02 f303 	lsl.w	r3, r2, r3
    3c36:	43db      	mvns	r3, r3
    3c38:	9a05      	ldr	r2, [sp, #20]
    3c3a:	4013      	ands	r3, r2
    3c3c:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3c3e:	9b03      	ldr	r3, [sp, #12]
    3c40:	3b04      	subs	r3, #4
    3c42:	005b      	lsls	r3, r3, #1
    3c44:	3310      	adds	r3, #16
    3c46:	9a04      	ldr	r2, [sp, #16]
    3c48:	fa02 f303 	lsl.w	r3, r2, r3
    3c4c:	9a05      	ldr	r2, [sp, #20]
    3c4e:	4313      	orrs	r3, r2
    3c50:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3c52:	4a05      	ldr	r2, [pc, #20]	; (3c68 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3c54:	9b05      	ldr	r3, [sp, #20]
    3c56:	60d3      	str	r3, [r2, #12]
}
    3c58:	bf00      	nop
    3c5a:	b006      	add	sp, #24
    3c5c:	4770      	bx	lr
    3c5e:	bf00      	nop
    3c60:	0000bd18 	.word	0x0000bd18
    3c64:	0000ba08 	.word	0x0000ba08
    3c68:	40048000 	.word	0x40048000

00003c6c <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c6c:	b084      	sub	sp, #16
    3c6e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    3c70:	4b06      	ldr	r3, [pc, #24]	; (3c8c <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3c72:	685b      	ldr	r3, [r3, #4]
    3c74:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    3c76:	9b03      	ldr	r3, [sp, #12]
    3c78:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    3c7c:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3c7e:	4a03      	ldr	r2, [pc, #12]	; (3c8c <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3c80:	9b03      	ldr	r3, [sp, #12]
    3c82:	6053      	str	r3, [r2, #4]
}
    3c84:	bf00      	nop
    3c86:	b004      	add	sp, #16
    3c88:	4770      	bx	lr
    3c8a:	bf00      	nop
    3c8c:	40048000 	.word	0x40048000

00003c90 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c90:	b084      	sub	sp, #16
    3c92:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3c94:	9b01      	ldr	r3, [sp, #4]
    3c96:	685b      	ldr	r3, [r3, #4]
    3c98:	4a0a      	ldr	r2, [pc, #40]	; (3cc4 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    3c9a:	5cd3      	ldrb	r3, [r2, r3]
    3c9c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    3c9e:	4b0a      	ldr	r3, [pc, #40]	; (3cc8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3ca0:	685b      	ldr	r3, [r3, #4]
    3ca2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    3ca4:	9b02      	ldr	r3, [sp, #8]
    3ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3caa:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    3cac:	9b03      	ldr	r3, [sp, #12]
    3cae:	011b      	lsls	r3, r3, #4
    3cb0:	9a02      	ldr	r2, [sp, #8]
    3cb2:	4313      	orrs	r3, r2
    3cb4:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    3cb6:	4a04      	ldr	r2, [pc, #16]	; (3cc8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3cb8:	9b02      	ldr	r3, [sp, #8]
    3cba:	6053      	str	r3, [r2, #4]
}
    3cbc:	bf00      	nop
    3cbe:	b004      	add	sp, #16
    3cc0:	4770      	bx	lr
    3cc2:	bf00      	nop
    3cc4:	0000bd18 	.word	0x0000bd18
    3cc8:	40048000 	.word	0x40048000

00003ccc <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3ccc:	b084      	sub	sp, #16
    3cce:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3cd0:	9b01      	ldr	r3, [sp, #4]
    3cd2:	681a      	ldr	r2, [r3, #0]
    3cd4:	490f      	ldr	r1, [pc, #60]	; (3d14 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    3cd6:	4613      	mov	r3, r2
    3cd8:	00db      	lsls	r3, r3, #3
    3cda:	4413      	add	r3, r2
    3cdc:	440b      	add	r3, r1
    3cde:	3304      	adds	r3, #4
    3ce0:	781b      	ldrb	r3, [r3, #0]
    3ce2:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    3ce4:	4a0c      	ldr	r2, [pc, #48]	; (3d18 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3ce6:	9b03      	ldr	r3, [sp, #12]
    3ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3cec:	490a      	ldr	r1, [pc, #40]	; (3d18 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    3cf2:	9b03      	ldr	r3, [sp, #12]
    3cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    3cf8:	4a07      	ldr	r2, [pc, #28]	; (3d18 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cfa:	9b03      	ldr	r3, [sp, #12]
    3cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d00:	4905      	ldr	r1, [pc, #20]	; (3d18 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3d02:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    3d06:	9b03      	ldr	r3, [sp, #12]
    3d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3d0c:	bf00      	nop
    3d0e:	b004      	add	sp, #16
    3d10:	4770      	bx	lr
    3d12:	bf00      	nop
    3d14:	0000ba08 	.word	0x0000ba08
    3d18:	40065000 	.word	0x40065000

00003d1c <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d1c:	b086      	sub	sp, #24
    3d1e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3d20:	9b01      	ldr	r3, [sp, #4]
    3d22:	681a      	ldr	r2, [r3, #0]
    3d24:	4912      	ldr	r1, [pc, #72]	; (3d70 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    3d26:	4613      	mov	r3, r2
    3d28:	00db      	lsls	r3, r3, #3
    3d2a:	4413      	add	r3, r2
    3d2c:	440b      	add	r3, r1
    3d2e:	3304      	adds	r3, #4
    3d30:	781b      	ldrb	r3, [r3, #0]
    3d32:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d34:	9b01      	ldr	r3, [sp, #4]
    3d36:	685b      	ldr	r3, [r3, #4]
    3d38:	4a0e      	ldr	r2, [pc, #56]	; (3d74 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    3d3a:	5cd3      	ldrb	r3, [r2, r3]
    3d3c:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    3d3e:	4a0e      	ldr	r2, [pc, #56]	; (3d78 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3d40:	9b05      	ldr	r3, [sp, #20]
    3d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d46:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    3d48:	9b03      	ldr	r3, [sp, #12]
    3d4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    3d4e:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    3d50:	9b04      	ldr	r3, [sp, #16]
    3d52:	061b      	lsls	r3, r3, #24
    3d54:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    3d58:	9a03      	ldr	r2, [sp, #12]
    3d5a:	4313      	orrs	r3, r2
    3d5c:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    3d5e:	4906      	ldr	r1, [pc, #24]	; (3d78 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3d60:	9b05      	ldr	r3, [sp, #20]
    3d62:	9a03      	ldr	r2, [sp, #12]
    3d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3d68:	bf00      	nop
    3d6a:	b006      	add	sp, #24
    3d6c:	4770      	bx	lr
    3d6e:	bf00      	nop
    3d70:	0000ba08 	.word	0x0000ba08
    3d74:	0000bda0 	.word	0x0000bda0
    3d78:	40065000 	.word	0x40065000

00003d7c <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d7c:	b084      	sub	sp, #16
    3d7e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d80:	4b0b      	ldr	r3, [pc, #44]	; (3db0 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    3d82:	7f1b      	ldrb	r3, [r3, #28]
    3d84:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    3d86:	4b0b      	ldr	r3, [pc, #44]	; (3db4 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3d88:	685b      	ldr	r3, [r3, #4]
    3d8a:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3d8c:	9b02      	ldr	r3, [sp, #8]
    3d8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3d92:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3d94:	9b03      	ldr	r3, [sp, #12]
    3d96:	031b      	lsls	r3, r3, #12
    3d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3d9c:	9a02      	ldr	r2, [sp, #8]
    3d9e:	4313      	orrs	r3, r2
    3da0:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3da2:	4a04      	ldr	r2, [pc, #16]	; (3db4 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3da4:	9b02      	ldr	r3, [sp, #8]
    3da6:	6053      	str	r3, [r2, #4]
}
    3da8:	bf00      	nop
    3daa:	b004      	add	sp, #16
    3dac:	4770      	bx	lr
    3dae:	bf00      	nop
    3db0:	0000bd18 	.word	0x0000bd18
    3db4:	40048000 	.word	0x40048000

00003db8 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3db8:	b084      	sub	sp, #16
    3dba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3dbc:	9b01      	ldr	r3, [sp, #4]
    3dbe:	685b      	ldr	r3, [r3, #4]
    3dc0:	4a0b      	ldr	r2, [pc, #44]	; (3df0 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    3dc2:	5cd3      	ldrb	r3, [r2, r3]
    3dc4:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    3dc6:	4b0b      	ldr	r3, [pc, #44]	; (3df4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3dc8:	685b      	ldr	r3, [r3, #4]
    3dca:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3dcc:	9b02      	ldr	r3, [sp, #8]
    3dce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3dd2:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3dd4:	9b03      	ldr	r3, [sp, #12]
    3dd6:	031b      	lsls	r3, r3, #12
    3dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3ddc:	9a02      	ldr	r2, [sp, #8]
    3dde:	4313      	orrs	r3, r2
    3de0:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3de2:	4a04      	ldr	r2, [pc, #16]	; (3df4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3de4:	9b02      	ldr	r3, [sp, #8]
    3de6:	6053      	str	r3, [r2, #4]
}
    3de8:	bf00      	nop
    3dea:	b004      	add	sp, #16
    3dec:	4770      	bx	lr
    3dee:	bf00      	nop
    3df0:	0000bd18 	.word	0x0000bd18
    3df4:	40048000 	.word	0x40048000

00003df8 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    3df8:	b500      	push	{lr}
    3dfa:	b085      	sub	sp, #20
    3dfc:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    3dfe:	2300      	movs	r3, #0
    3e00:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    3e04:	9b01      	ldr	r3, [sp, #4]
    3e06:	2b00      	cmp	r3, #0
    3e08:	d037      	beq.n	3e7a <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3e0a:	2300      	movs	r3, #0
    3e0c:	9303      	str	r3, [sp, #12]
    3e0e:	e02b      	b.n	3e68 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3e10:	4b29      	ldr	r3, [pc, #164]	; (3eb8 <DisableSafeClock+0xc0>)
    3e12:	6819      	ldr	r1, [r3, #0]
    3e14:	9a03      	ldr	r2, [sp, #12]
    3e16:	4613      	mov	r3, r2
    3e18:	005b      	lsls	r3, r3, #1
    3e1a:	4413      	add	r3, r2
    3e1c:	009b      	lsls	r3, r3, #2
    3e1e:	440b      	add	r3, r1
    3e20:	3314      	adds	r3, #20
    3e22:	681b      	ldr	r3, [r3, #0]
    3e24:	2b05      	cmp	r3, #5
    3e26:	d11c      	bne.n	3e62 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    3e28:	2301      	movs	r3, #1
    3e2a:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    3e2e:	4b22      	ldr	r3, [pc, #136]	; (3eb8 <DisableSafeClock+0xc0>)
    3e30:	6819      	ldr	r1, [r3, #0]
    3e32:	9a03      	ldr	r2, [sp, #12]
    3e34:	4613      	mov	r3, r2
    3e36:	005b      	lsls	r3, r3, #1
    3e38:	4413      	add	r3, r2
    3e3a:	009b      	lsls	r3, r3, #2
    3e3c:	440b      	add	r3, r1
    3e3e:	3318      	adds	r3, #24
    3e40:	881b      	ldrh	r3, [r3, #0]
    3e42:	2b00      	cmp	r3, #0
    3e44:	d118      	bne.n	3e78 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3e46:	4b1d      	ldr	r3, [pc, #116]	; (3ebc <DisableSafeClock+0xc4>)
    3e48:	791b      	ldrb	r3, [r3, #4]
    3e4a:	4619      	mov	r1, r3
    3e4c:	4a1c      	ldr	r2, [pc, #112]	; (3ec0 <DisableSafeClock+0xc8>)
    3e4e:	460b      	mov	r3, r1
    3e50:	005b      	lsls	r3, r3, #1
    3e52:	440b      	add	r3, r1
    3e54:	009b      	lsls	r3, r3, #2
    3e56:	4413      	add	r3, r2
    3e58:	3308      	adds	r3, #8
    3e5a:	681b      	ldr	r3, [r3, #0]
    3e5c:	2005      	movs	r0, #5
    3e5e:	4798      	blx	r3
                }
                break;
    3e60:	e00a      	b.n	3e78 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3e62:	9b03      	ldr	r3, [sp, #12]
    3e64:	3301      	adds	r3, #1
    3e66:	9303      	str	r3, [sp, #12]
    3e68:	4b13      	ldr	r3, [pc, #76]	; (3eb8 <DisableSafeClock+0xc0>)
    3e6a:	681b      	ldr	r3, [r3, #0]
    3e6c:	7a1b      	ldrb	r3, [r3, #8]
    3e6e:	461a      	mov	r2, r3
    3e70:	9b03      	ldr	r3, [sp, #12]
    3e72:	4293      	cmp	r3, r2
    3e74:	d3cc      	bcc.n	3e10 <DisableSafeClock+0x18>
    3e76:	e000      	b.n	3e7a <DisableSafeClock+0x82>
                break;
    3e78:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    3e7a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3e7e:	f083 0301 	eor.w	r3, r3, #1
    3e82:	b2db      	uxtb	r3, r3
    3e84:	2b00      	cmp	r3, #0
    3e86:	d013      	beq.n	3eb0 <DisableSafeClock+0xb8>
    3e88:	4b0e      	ldr	r3, [pc, #56]	; (3ec4 <DisableSafeClock+0xcc>)
    3e8a:	781b      	ldrb	r3, [r3, #0]
    3e8c:	f083 0301 	eor.w	r3, r3, #1
    3e90:	b2db      	uxtb	r3, r3
    3e92:	2b00      	cmp	r3, #0
    3e94:	d00c      	beq.n	3eb0 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3e96:	4b09      	ldr	r3, [pc, #36]	; (3ebc <DisableSafeClock+0xc4>)
    3e98:	791b      	ldrb	r3, [r3, #4]
    3e9a:	4619      	mov	r1, r3
    3e9c:	4a08      	ldr	r2, [pc, #32]	; (3ec0 <DisableSafeClock+0xc8>)
    3e9e:	460b      	mov	r3, r1
    3ea0:	005b      	lsls	r3, r3, #1
    3ea2:	440b      	add	r3, r1
    3ea4:	009b      	lsls	r3, r3, #2
    3ea6:	4413      	add	r3, r2
    3ea8:	3308      	adds	r3, #8
    3eaa:	681b      	ldr	r3, [r3, #0]
    3eac:	2005      	movs	r0, #5
    3eae:	4798      	blx	r3
    }
}
    3eb0:	bf00      	nop
    3eb2:	b005      	add	sp, #20
    3eb4:	f85d fb04 	ldr.w	pc, [sp], #4
    3eb8:	1fff8c18 	.word	0x1fff8c18
    3ebc:	0000b998 	.word	0x0000b998
    3ec0:	0000bfc8 	.word	0x0000bfc8
    3ec4:	1fff8b18 	.word	0x1fff8b18

00003ec8 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    3ec8:	4b06      	ldr	r3, [pc, #24]	; (3ee4 <SetFircToResetValue_TrustedCall+0x1c>)
    3eca:	2200      	movs	r2, #0
    3ecc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    3ed0:	4b04      	ldr	r3, [pc, #16]	; (3ee4 <SetFircToResetValue_TrustedCall+0x1c>)
    3ed2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ed6:	4a03      	ldr	r2, [pc, #12]	; (3ee4 <SetFircToResetValue_TrustedCall+0x1c>)
    3ed8:	f043 0301 	orr.w	r3, r3, #1
    3edc:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3ee0:	bf00      	nop
    3ee2:	4770      	bx	lr
    3ee4:	40064000 	.word	0x40064000

00003ee8 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    3ee8:	b084      	sub	sp, #16
    3eea:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    3eec:	2303      	movs	r3, #3
    3eee:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3ef0:	2300      	movs	r3, #0
    3ef2:	9302      	str	r3, [sp, #8]
    3ef4:	e028      	b.n	3f48 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    3ef6:	9b01      	ldr	r3, [sp, #4]
    3ef8:	9a02      	ldr	r2, [sp, #8]
    3efa:	320d      	adds	r2, #13
    3efc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3f00:	2b28      	cmp	r3, #40	; 0x28
    3f02:	d10b      	bne.n	3f1c <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3f04:	9a01      	ldr	r2, [sp, #4]
    3f06:	9b02      	ldr	r3, [sp, #8]
    3f08:	330d      	adds	r3, #13
    3f0a:	00db      	lsls	r3, r3, #3
    3f0c:	4413      	add	r3, r2
    3f0e:	685b      	ldr	r3, [r3, #4]
    3f10:	4a2b      	ldr	r2, [pc, #172]	; (3fc0 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    3f12:	5cd3      	ldrb	r3, [r2, r3]
    3f14:	011b      	lsls	r3, r3, #4
    3f16:	9a03      	ldr	r2, [sp, #12]
    3f18:	4313      	orrs	r3, r2
    3f1a:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    3f1c:	9b01      	ldr	r3, [sp, #4]
    3f1e:	9a02      	ldr	r2, [sp, #8]
    3f20:	320d      	adds	r2, #13
    3f22:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3f26:	2b29      	cmp	r3, #41	; 0x29
    3f28:	d10b      	bne.n	3f42 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3f2a:	9a01      	ldr	r2, [sp, #4]
    3f2c:	9b02      	ldr	r3, [sp, #8]
    3f2e:	330d      	adds	r3, #13
    3f30:	00db      	lsls	r3, r3, #3
    3f32:	4413      	add	r3, r2
    3f34:	685b      	ldr	r3, [r3, #4]
    3f36:	4a23      	ldr	r2, [pc, #140]	; (3fc4 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    3f38:	5cd3      	ldrb	r3, [r2, r3]
    3f3a:	009b      	lsls	r3, r3, #2
    3f3c:	9a03      	ldr	r2, [sp, #12]
    3f3e:	4313      	orrs	r3, r2
    3f40:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3f42:	9b02      	ldr	r3, [sp, #8]
    3f44:	3301      	adds	r3, #1
    3f46:	9302      	str	r3, [sp, #8]
    3f48:	9b01      	ldr	r3, [sp, #4]
    3f4a:	7adb      	ldrb	r3, [r3, #11]
    3f4c:	461a      	mov	r2, r3
    3f4e:	9b02      	ldr	r3, [sp, #8]
    3f50:	4293      	cmp	r3, r2
    3f52:	d3d0      	bcc.n	3ef6 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3f54:	2300      	movs	r3, #0
    3f56:	9302      	str	r3, [sp, #8]
    3f58:	e026      	b.n	3fa8 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    3f5a:	9a01      	ldr	r2, [sp, #4]
    3f5c:	9b02      	ldr	r3, [sp, #8]
    3f5e:	334e      	adds	r3, #78	; 0x4e
    3f60:	00db      	lsls	r3, r3, #3
    3f62:	4413      	add	r3, r2
    3f64:	685b      	ldr	r3, [r3, #4]
    3f66:	2b12      	cmp	r3, #18
    3f68:	d109      	bne.n	3f7e <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3f6a:	9a01      	ldr	r2, [sp, #4]
    3f6c:	9b02      	ldr	r3, [sp, #8]
    3f6e:	334e      	adds	r3, #78	; 0x4e
    3f70:	00db      	lsls	r3, r3, #3
    3f72:	4413      	add	r3, r2
    3f74:	891b      	ldrh	r3, [r3, #8]
    3f76:	005b      	lsls	r3, r3, #1
    3f78:	9a03      	ldr	r2, [sp, #12]
    3f7a:	4313      	orrs	r3, r2
    3f7c:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    3f7e:	9a01      	ldr	r2, [sp, #4]
    3f80:	9b02      	ldr	r3, [sp, #8]
    3f82:	334e      	adds	r3, #78	; 0x4e
    3f84:	00db      	lsls	r3, r3, #3
    3f86:	4413      	add	r3, r2
    3f88:	685b      	ldr	r3, [r3, #4]
    3f8a:	2b13      	cmp	r3, #19
    3f8c:	d109      	bne.n	3fa2 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3f8e:	9a01      	ldr	r2, [sp, #4]
    3f90:	9b02      	ldr	r3, [sp, #8]
    3f92:	334e      	adds	r3, #78	; 0x4e
    3f94:	00db      	lsls	r3, r3, #3
    3f96:	4413      	add	r3, r2
    3f98:	891b      	ldrh	r3, [r3, #8]
    3f9a:	461a      	mov	r2, r3
    3f9c:	9b03      	ldr	r3, [sp, #12]
    3f9e:	4313      	orrs	r3, r2
    3fa0:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3fa2:	9b02      	ldr	r3, [sp, #8]
    3fa4:	3301      	adds	r3, #1
    3fa6:	9302      	str	r3, [sp, #8]
    3fa8:	9b01      	ldr	r3, [sp, #4]
    3faa:	7c1b      	ldrb	r3, [r3, #16]
    3fac:	461a      	mov	r2, r3
    3fae:	9b02      	ldr	r3, [sp, #8]
    3fb0:	4293      	cmp	r3, r2
    3fb2:	d3d2      	bcc.n	3f5a <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    3fb4:	4a04      	ldr	r2, [pc, #16]	; (3fc8 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    3fb6:	9b03      	ldr	r3, [sp, #12]
    3fb8:	6113      	str	r3, [r2, #16]
}
    3fba:	bf00      	nop
    3fbc:	b004      	add	sp, #16
    3fbe:	4770      	bx	lr
    3fc0:	0000bd18 	.word	0x0000bd18
    3fc4:	0000bdd0 	.word	0x0000bdd0
    3fc8:	40048000 	.word	0x40048000

00003fcc <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    3fcc:	b500      	push	{lr}
    3fce:	b089      	sub	sp, #36	; 0x24
    3fd0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3fd2:	2300      	movs	r3, #0
    3fd4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    3fd8:	4a21      	ldr	r2, [pc, #132]	; (4060 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    3fda:	9b01      	ldr	r3, [sp, #4]
    3fdc:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    3fde:	4b21      	ldr	r3, [pc, #132]	; (4064 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3fe0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fe4:	f003 0301 	and.w	r3, r3, #1
    3fe8:	2b00      	cmp	r3, #0
    3fea:	d12e      	bne.n	404a <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    3fec:	4b1e      	ldr	r3, [pc, #120]	; (4068 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3fee:	2200      	movs	r2, #0
    3ff0:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    3ff2:	f7ff ff69 	bl	3ec8 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3ff6:	aa03      	add	r2, sp, #12
    3ff8:	a904      	add	r1, sp, #16
    3ffa:	a805      	add	r0, sp, #20
    3ffc:	f24c 3350 	movw	r3, #50000	; 0xc350
    4000:	f7fe f8ae 	bl	2160 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4004:	4b17      	ldr	r3, [pc, #92]	; (4064 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4006:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    400a:	0e1b      	lsrs	r3, r3, #24
    400c:	f003 0301 	and.w	r3, r3, #1
    4010:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4012:	9a03      	ldr	r2, [sp, #12]
    4014:	a904      	add	r1, sp, #16
    4016:	ab05      	add	r3, sp, #20
    4018:	4618      	mov	r0, r3
    401a:	f7fe f8bb 	bl	2194 <Clock_Ip_TimeoutExpired>
    401e:	4603      	mov	r3, r0
    4020:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4024:	9b06      	ldr	r3, [sp, #24]
    4026:	2b00      	cmp	r3, #0
    4028:	d106      	bne.n	4038 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    402a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    402e:	f083 0301 	eor.w	r3, r3, #1
    4032:	b2db      	uxtb	r3, r3
    4034:	2b00      	cmp	r3, #0
    4036:	d1e5      	bne.n	4004 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4038:	f89d 301f 	ldrb.w	r3, [sp, #31]
    403c:	2b00      	cmp	r3, #0
    403e:	d007      	beq.n	4050 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4040:	2105      	movs	r1, #5
    4042:	2001      	movs	r0, #1
    4044:	f7fe f87c 	bl	2140 <Clock_Ip_ReportClockErrors>
    4048:	e002      	b.n	4050 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    404a:	4b07      	ldr	r3, [pc, #28]	; (4068 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    404c:	2201      	movs	r2, #1
    404e:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4050:	9801      	ldr	r0, [sp, #4]
    4052:	f7ff ff49 	bl	3ee8 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4056:	bf00      	nop
    4058:	b009      	add	sp, #36	; 0x24
    405a:	f85d fb04 	ldr.w	pc, [sp], #4
    405e:	bf00      	nop
    4060:	1fff8c18 	.word	0x1fff8c18
    4064:	40064000 	.word	0x40064000
    4068:	1fff8b18 	.word	0x1fff8b18

0000406c <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    406c:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    406e:	2300      	movs	r3, #0
    4070:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4072:	4b29      	ldr	r3, [pc, #164]	; (4118 <getFircConfig+0xac>)
    4074:	681b      	ldr	r3, [r3, #0]
    4076:	2b00      	cmp	r3, #0
    4078:	d024      	beq.n	40c4 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    407a:	2300      	movs	r3, #0
    407c:	9301      	str	r3, [sp, #4]
    407e:	e01a      	b.n	40b6 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4080:	4b25      	ldr	r3, [pc, #148]	; (4118 <getFircConfig+0xac>)
    4082:	6819      	ldr	r1, [r3, #0]
    4084:	9a01      	ldr	r2, [sp, #4]
    4086:	4613      	mov	r3, r2
    4088:	005b      	lsls	r3, r3, #1
    408a:	4413      	add	r3, r2
    408c:	009b      	lsls	r3, r3, #2
    408e:	440b      	add	r3, r1
    4090:	3314      	adds	r3, #20
    4092:	681b      	ldr	r3, [r3, #0]
    4094:	2b05      	cmp	r3, #5
    4096:	d10b      	bne.n	40b0 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4098:	4b1f      	ldr	r3, [pc, #124]	; (4118 <getFircConfig+0xac>)
    409a:	6819      	ldr	r1, [r3, #0]
    409c:	9a01      	ldr	r2, [sp, #4]
    409e:	4613      	mov	r3, r2
    40a0:	005b      	lsls	r3, r3, #1
    40a2:	4413      	add	r3, r2
    40a4:	009b      	lsls	r3, r3, #2
    40a6:	3310      	adds	r3, #16
    40a8:	440b      	add	r3, r1
    40aa:	3304      	adds	r3, #4
    40ac:	9300      	str	r3, [sp, #0]
                break;
    40ae:	e009      	b.n	40c4 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    40b0:	9b01      	ldr	r3, [sp, #4]
    40b2:	3301      	adds	r3, #1
    40b4:	9301      	str	r3, [sp, #4]
    40b6:	4b18      	ldr	r3, [pc, #96]	; (4118 <getFircConfig+0xac>)
    40b8:	681b      	ldr	r3, [r3, #0]
    40ba:	7a1b      	ldrb	r3, [r3, #8]
    40bc:	461a      	mov	r2, r3
    40be:	9b01      	ldr	r3, [sp, #4]
    40c0:	4293      	cmp	r3, r2
    40c2:	d3dd      	bcc.n	4080 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    40c4:	9b00      	ldr	r3, [sp, #0]
    40c6:	2b00      	cmp	r3, #0
    40c8:	d121      	bne.n	410e <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    40ca:	4b14      	ldr	r3, [pc, #80]	; (411c <getFircConfig+0xb0>)
    40cc:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    40ce:	4b13      	ldr	r3, [pc, #76]	; (411c <getFircConfig+0xb0>)
    40d0:	2205      	movs	r2, #5
    40d2:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    40d4:	4b12      	ldr	r3, [pc, #72]	; (4120 <getFircConfig+0xb4>)
    40d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40da:	b29b      	uxth	r3, r3
    40dc:	f003 0301 	and.w	r3, r3, #1
    40e0:	b29a      	uxth	r2, r3
    40e2:	4b0e      	ldr	r3, [pc, #56]	; (411c <getFircConfig+0xb0>)
    40e4:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    40e6:	4b0e      	ldr	r3, [pc, #56]	; (4120 <getFircConfig+0xb4>)
    40e8:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    40ec:	b2db      	uxtb	r3, r3
    40ee:	f003 0303 	and.w	r3, r3, #3
    40f2:	b2da      	uxtb	r2, r3
    40f4:	4b09      	ldr	r3, [pc, #36]	; (411c <getFircConfig+0xb0>)
    40f6:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    40f8:	4b09      	ldr	r3, [pc, #36]	; (4120 <getFircConfig+0xb4>)
    40fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40fe:	b2db      	uxtb	r3, r3
    4100:	10db      	asrs	r3, r3, #3
    4102:	b2db      	uxtb	r3, r3
    4104:	f003 0301 	and.w	r3, r3, #1
    4108:	b2da      	uxtb	r2, r3
    410a:	4b04      	ldr	r3, [pc, #16]	; (411c <getFircConfig+0xb0>)
    410c:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    410e:	9b00      	ldr	r3, [sp, #0]
}
    4110:	4618      	mov	r0, r3
    4112:	b002      	add	sp, #8
    4114:	4770      	bx	lr
    4116:	bf00      	nop
    4118:	1fff8c18 	.word	0x1fff8c18
    411c:	1fff8c84 	.word	0x1fff8c84
    4120:	40064000 	.word	0x40064000

00004124 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4124:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4126:	2300      	movs	r3, #0
    4128:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    412a:	4b20      	ldr	r3, [pc, #128]	; (41ac <getSoscConfig+0x88>)
    412c:	681b      	ldr	r3, [r3, #0]
    412e:	2b00      	cmp	r3, #0
    4130:	d024      	beq.n	417c <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4132:	2300      	movs	r3, #0
    4134:	9301      	str	r3, [sp, #4]
    4136:	e01a      	b.n	416e <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4138:	4b1c      	ldr	r3, [pc, #112]	; (41ac <getSoscConfig+0x88>)
    413a:	6819      	ldr	r1, [r3, #0]
    413c:	9a01      	ldr	r2, [sp, #4]
    413e:	4613      	mov	r3, r2
    4140:	009b      	lsls	r3, r3, #2
    4142:	4413      	add	r3, r2
    4144:	009b      	lsls	r3, r3, #2
    4146:	440b      	add	r3, r1
    4148:	332c      	adds	r3, #44	; 0x2c
    414a:	681b      	ldr	r3, [r3, #0]
    414c:	2b08      	cmp	r3, #8
    414e:	d10b      	bne.n	4168 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4150:	4b16      	ldr	r3, [pc, #88]	; (41ac <getSoscConfig+0x88>)
    4152:	6819      	ldr	r1, [r3, #0]
    4154:	9a01      	ldr	r2, [sp, #4]
    4156:	4613      	mov	r3, r2
    4158:	009b      	lsls	r3, r3, #2
    415a:	4413      	add	r3, r2
    415c:	009b      	lsls	r3, r3, #2
    415e:	3328      	adds	r3, #40	; 0x28
    4160:	440b      	add	r3, r1
    4162:	3304      	adds	r3, #4
    4164:	9300      	str	r3, [sp, #0]
                break;
    4166:	e009      	b.n	417c <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4168:	9b01      	ldr	r3, [sp, #4]
    416a:	3301      	adds	r3, #1
    416c:	9301      	str	r3, [sp, #4]
    416e:	4b0f      	ldr	r3, [pc, #60]	; (41ac <getSoscConfig+0x88>)
    4170:	681b      	ldr	r3, [r3, #0]
    4172:	7a5b      	ldrb	r3, [r3, #9]
    4174:	461a      	mov	r2, r3
    4176:	9b01      	ldr	r3, [sp, #4]
    4178:	4293      	cmp	r3, r2
    417a:	d3dd      	bcc.n	4138 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    417c:	9b00      	ldr	r3, [sp, #0]
    417e:	2b00      	cmp	r3, #0
    4180:	d110      	bne.n	41a4 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4182:	4b0b      	ldr	r3, [pc, #44]	; (41b0 <getSoscConfig+0x8c>)
    4184:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4186:	4b0a      	ldr	r3, [pc, #40]	; (41b0 <getSoscConfig+0x8c>)
    4188:	2208      	movs	r2, #8
    418a:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    418c:	4b09      	ldr	r3, [pc, #36]	; (41b4 <getSoscConfig+0x90>)
    418e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4192:	b29b      	uxth	r3, r3
    4194:	f003 0301 	and.w	r3, r3, #1
    4198:	b29a      	uxth	r2, r3
    419a:	4b05      	ldr	r3, [pc, #20]	; (41b0 <getSoscConfig+0x8c>)
    419c:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    419e:	4b04      	ldr	r3, [pc, #16]	; (41b0 <getSoscConfig+0x8c>)
    41a0:	4a05      	ldr	r2, [pc, #20]	; (41b8 <getSoscConfig+0x94>)
    41a2:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    41a4:	9b00      	ldr	r3, [sp, #0]
}
    41a6:	4618      	mov	r0, r3
    41a8:	b002      	add	sp, #8
    41aa:	4770      	bx	lr
    41ac:	1fff8c18 	.word	0x1fff8c18
    41b0:	1fff8c90 	.word	0x1fff8c90
    41b4:	40064000 	.word	0x40064000
    41b8:	02625a00 	.word	0x02625a00

000041bc <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    41bc:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    41be:	2300      	movs	r3, #0
    41c0:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    41c2:	4b28      	ldr	r3, [pc, #160]	; (4264 <getSpllConfig+0xa8>)
    41c4:	681b      	ldr	r3, [r3, #0]
    41c6:	2b00      	cmp	r3, #0
    41c8:	d023      	beq.n	4212 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    41ca:	2300      	movs	r3, #0
    41cc:	9301      	str	r3, [sp, #4]
    41ce:	e019      	b.n	4204 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    41d0:	4b24      	ldr	r3, [pc, #144]	; (4264 <getSpllConfig+0xa8>)
    41d2:	6819      	ldr	r1, [r3, #0]
    41d4:	9a01      	ldr	r2, [sp, #4]
    41d6:	4613      	mov	r3, r2
    41d8:	009b      	lsls	r3, r3, #2
    41da:	4413      	add	r3, r2
    41dc:	00db      	lsls	r3, r3, #3
    41de:	440b      	add	r3, r1
    41e0:	3340      	adds	r3, #64	; 0x40
    41e2:	681b      	ldr	r3, [r3, #0]
    41e4:	2b09      	cmp	r3, #9
    41e6:	d10a      	bne.n	41fe <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    41e8:	4b1e      	ldr	r3, [pc, #120]	; (4264 <getSpllConfig+0xa8>)
    41ea:	6819      	ldr	r1, [r3, #0]
    41ec:	9a01      	ldr	r2, [sp, #4]
    41ee:	4613      	mov	r3, r2
    41f0:	009b      	lsls	r3, r3, #2
    41f2:	4413      	add	r3, r2
    41f4:	00db      	lsls	r3, r3, #3
    41f6:	3340      	adds	r3, #64	; 0x40
    41f8:	440b      	add	r3, r1
    41fa:	9300      	str	r3, [sp, #0]
                break;
    41fc:	e009      	b.n	4212 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    41fe:	9b01      	ldr	r3, [sp, #4]
    4200:	3301      	adds	r3, #1
    4202:	9301      	str	r3, [sp, #4]
    4204:	4b17      	ldr	r3, [pc, #92]	; (4264 <getSpllConfig+0xa8>)
    4206:	681b      	ldr	r3, [r3, #0]
    4208:	7a9b      	ldrb	r3, [r3, #10]
    420a:	461a      	mov	r2, r3
    420c:	9b01      	ldr	r3, [sp, #4]
    420e:	4293      	cmp	r3, r2
    4210:	d3de      	bcc.n	41d0 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4212:	9b00      	ldr	r3, [sp, #0]
    4214:	2b00      	cmp	r3, #0
    4216:	d121      	bne.n	425c <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4218:	4b13      	ldr	r3, [pc, #76]	; (4268 <getSpllConfig+0xac>)
    421a:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    421c:	4b12      	ldr	r3, [pc, #72]	; (4268 <getSpllConfig+0xac>)
    421e:	2209      	movs	r2, #9
    4220:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4222:	4b12      	ldr	r3, [pc, #72]	; (426c <getSpllConfig+0xb0>)
    4224:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4228:	b29b      	uxth	r3, r3
    422a:	f003 0301 	and.w	r3, r3, #1
    422e:	b29a      	uxth	r2, r3
    4230:	4b0d      	ldr	r3, [pc, #52]	; (4268 <getSpllConfig+0xac>)
    4232:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4234:	4b0d      	ldr	r3, [pc, #52]	; (426c <getSpllConfig+0xb0>)
    4236:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    423a:	0a1b      	lsrs	r3, r3, #8
    423c:	b2db      	uxtb	r3, r3
    423e:	f003 0307 	and.w	r3, r3, #7
    4242:	b2da      	uxtb	r2, r3
    4244:	4b08      	ldr	r3, [pc, #32]	; (4268 <getSpllConfig+0xac>)
    4246:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4248:	4b08      	ldr	r3, [pc, #32]	; (426c <getSpllConfig+0xb0>)
    424a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    424e:	0c1b      	lsrs	r3, r3, #16
    4250:	b2db      	uxtb	r3, r3
    4252:	f003 031f 	and.w	r3, r3, #31
    4256:	b2da      	uxtb	r2, r3
    4258:	4b03      	ldr	r3, [pc, #12]	; (4268 <getSpllConfig+0xac>)
    425a:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    425c:	9b00      	ldr	r3, [sp, #0]
}
    425e:	4618      	mov	r0, r3
    4260:	b002      	add	sp, #8
    4262:	4770      	bx	lr
    4264:	1fff8c18 	.word	0x1fff8c18
    4268:	1fff8ca4 	.word	0x1fff8ca4
    426c:	40064000 	.word	0x40064000

00004270 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4270:	b086      	sub	sp, #24
    4272:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4274:	2300      	movs	r3, #0
    4276:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4278:	9b01      	ldr	r3, [sp, #4]
    427a:	2b1b      	cmp	r3, #27
    427c:	d00f      	beq.n	429e <getSelectorConfig+0x2e>
    427e:	9b01      	ldr	r3, [sp, #4]
    4280:	2b1b      	cmp	r3, #27
    4282:	d80f      	bhi.n	42a4 <getSelectorConfig+0x34>
    4284:	9b01      	ldr	r3, [sp, #4]
    4286:	2b19      	cmp	r3, #25
    4288:	d003      	beq.n	4292 <getSelectorConfig+0x22>
    428a:	9b01      	ldr	r3, [sp, #4]
    428c:	2b1a      	cmp	r3, #26
    428e:	d003      	beq.n	4298 <getSelectorConfig+0x28>
    4290:	e008      	b.n	42a4 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4292:	2300      	movs	r3, #0
    4294:	9304      	str	r3, [sp, #16]
            break;
    4296:	e008      	b.n	42aa <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4298:	2301      	movs	r3, #1
    429a:	9304      	str	r3, [sp, #16]
            break;
    429c:	e005      	b.n	42aa <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    429e:	2302      	movs	r3, #2
    42a0:	9304      	str	r3, [sp, #16]
            break;
    42a2:	e002      	b.n	42aa <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    42a4:	2300      	movs	r3, #0
    42a6:	9304      	str	r3, [sp, #16]
            break;
    42a8:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    42aa:	4b36      	ldr	r3, [pc, #216]	; (4384 <getSelectorConfig+0x114>)
    42ac:	681b      	ldr	r3, [r3, #0]
    42ae:	2b00      	cmp	r3, #0
    42b0:	d01d      	beq.n	42ee <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    42b2:	2300      	movs	r3, #0
    42b4:	9303      	str	r3, [sp, #12]
    42b6:	e013      	b.n	42e0 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    42b8:	4b32      	ldr	r3, [pc, #200]	; (4384 <getSelectorConfig+0x114>)
    42ba:	681b      	ldr	r3, [r3, #0]
    42bc:	9a03      	ldr	r2, [sp, #12]
    42be:	320d      	adds	r2, #13
    42c0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    42c4:	9a01      	ldr	r2, [sp, #4]
    42c6:	429a      	cmp	r2, r3
    42c8:	d107      	bne.n	42da <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    42ca:	4b2e      	ldr	r3, [pc, #184]	; (4384 <getSelectorConfig+0x114>)
    42cc:	681a      	ldr	r2, [r3, #0]
    42ce:	9b03      	ldr	r3, [sp, #12]
    42d0:	330d      	adds	r3, #13
    42d2:	00db      	lsls	r3, r3, #3
    42d4:	4413      	add	r3, r2
    42d6:	9305      	str	r3, [sp, #20]
                break;
    42d8:	e009      	b.n	42ee <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    42da:	9b03      	ldr	r3, [sp, #12]
    42dc:	3301      	adds	r3, #1
    42de:	9303      	str	r3, [sp, #12]
    42e0:	4b28      	ldr	r3, [pc, #160]	; (4384 <getSelectorConfig+0x114>)
    42e2:	681b      	ldr	r3, [r3, #0]
    42e4:	7adb      	ldrb	r3, [r3, #11]
    42e6:	461a      	mov	r2, r3
    42e8:	9b03      	ldr	r3, [sp, #12]
    42ea:	4293      	cmp	r3, r2
    42ec:	d3e4      	bcc.n	42b8 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    42ee:	9b05      	ldr	r3, [sp, #20]
    42f0:	2b00      	cmp	r3, #0
    42f2:	d140      	bne.n	4376 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    42f4:	9b04      	ldr	r3, [sp, #16]
    42f6:	00db      	lsls	r3, r3, #3
    42f8:	4a23      	ldr	r2, [pc, #140]	; (4388 <getSelectorConfig+0x118>)
    42fa:	4413      	add	r3, r2
    42fc:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    42fe:	4922      	ldr	r1, [pc, #136]	; (4388 <getSelectorConfig+0x118>)
    4300:	9b04      	ldr	r3, [sp, #16]
    4302:	9a01      	ldr	r2, [sp, #4]
    4304:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4308:	9b01      	ldr	r3, [sp, #4]
    430a:	2b1b      	cmp	r3, #27
    430c:	d025      	beq.n	435a <getSelectorConfig+0xea>
    430e:	9b01      	ldr	r3, [sp, #4]
    4310:	2b1b      	cmp	r3, #27
    4312:	d832      	bhi.n	437a <getSelectorConfig+0x10a>
    4314:	9b01      	ldr	r3, [sp, #4]
    4316:	2b19      	cmp	r3, #25
    4318:	d003      	beq.n	4322 <getSelectorConfig+0xb2>
    431a:	9b01      	ldr	r3, [sp, #4]
    431c:	2b1a      	cmp	r3, #26
    431e:	d00e      	beq.n	433e <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4320:	e02b      	b.n	437a <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4322:	4b1a      	ldr	r3, [pc, #104]	; (438c <getSelectorConfig+0x11c>)
    4324:	695b      	ldr	r3, [r3, #20]
    4326:	0e1b      	lsrs	r3, r3, #24
    4328:	f003 030f 	and.w	r3, r3, #15
    432c:	4a18      	ldr	r2, [pc, #96]	; (4390 <getSelectorConfig+0x120>)
    432e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4332:	4915      	ldr	r1, [pc, #84]	; (4388 <getSelectorConfig+0x118>)
    4334:	9b04      	ldr	r3, [sp, #16]
    4336:	00db      	lsls	r3, r3, #3
    4338:	440b      	add	r3, r1
    433a:	605a      	str	r2, [r3, #4]
                break;
    433c:	e01e      	b.n	437c <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    433e:	4b13      	ldr	r3, [pc, #76]	; (438c <getSelectorConfig+0x11c>)
    4340:	699b      	ldr	r3, [r3, #24]
    4342:	0e1b      	lsrs	r3, r3, #24
    4344:	f003 030f 	and.w	r3, r3, #15
    4348:	4a11      	ldr	r2, [pc, #68]	; (4390 <getSelectorConfig+0x120>)
    434a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    434e:	490e      	ldr	r1, [pc, #56]	; (4388 <getSelectorConfig+0x118>)
    4350:	9b04      	ldr	r3, [sp, #16]
    4352:	00db      	lsls	r3, r3, #3
    4354:	440b      	add	r3, r1
    4356:	605a      	str	r2, [r3, #4]
                break;
    4358:	e010      	b.n	437c <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    435a:	4b0c      	ldr	r3, [pc, #48]	; (438c <getSelectorConfig+0x11c>)
    435c:	69db      	ldr	r3, [r3, #28]
    435e:	0e1b      	lsrs	r3, r3, #24
    4360:	f003 030f 	and.w	r3, r3, #15
    4364:	4a0a      	ldr	r2, [pc, #40]	; (4390 <getSelectorConfig+0x120>)
    4366:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    436a:	4907      	ldr	r1, [pc, #28]	; (4388 <getSelectorConfig+0x118>)
    436c:	9b04      	ldr	r3, [sp, #16]
    436e:	00db      	lsls	r3, r3, #3
    4370:	440b      	add	r3, r1
    4372:	605a      	str	r2, [r3, #4]
                break;
    4374:	e002      	b.n	437c <getSelectorConfig+0x10c>
        }
    }
    4376:	bf00      	nop
    4378:	e000      	b.n	437c <getSelectorConfig+0x10c>
                break;
    437a:	bf00      	nop

    return ReturnValue;
    437c:	9b05      	ldr	r3, [sp, #20]
}
    437e:	4618      	mov	r0, r3
    4380:	b006      	add	sp, #24
    4382:	4770      	bx	lr
    4384:	1fff8c18 	.word	0x1fff8c18
    4388:	1fff8ccc 	.word	0x1fff8ccc
    438c:	40064000 	.word	0x40064000
    4390:	0000c098 	.word	0x0000c098

00004394 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4394:	b086      	sub	sp, #24
    4396:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4398:	2300      	movs	r3, #0
    439a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    439c:	2300      	movs	r3, #0
    439e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    43a0:	9b01      	ldr	r3, [sp, #4]
    43a2:	2b1f      	cmp	r3, #31
    43a4:	d00f      	beq.n	43c6 <getCoreDividerConfig+0x32>
    43a6:	9b01      	ldr	r3, [sp, #4]
    43a8:	2b1f      	cmp	r3, #31
    43aa:	d80f      	bhi.n	43cc <getCoreDividerConfig+0x38>
    43ac:	9b01      	ldr	r3, [sp, #4]
    43ae:	2b1d      	cmp	r3, #29
    43b0:	d003      	beq.n	43ba <getCoreDividerConfig+0x26>
    43b2:	9b01      	ldr	r3, [sp, #4]
    43b4:	2b1e      	cmp	r3, #30
    43b6:	d003      	beq.n	43c0 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    43b8:	e008      	b.n	43cc <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    43ba:	2300      	movs	r3, #0
    43bc:	9304      	str	r3, [sp, #16]
            break;
    43be:	e006      	b.n	43ce <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    43c0:	2301      	movs	r3, #1
    43c2:	9304      	str	r3, [sp, #16]
            break;
    43c4:	e003      	b.n	43ce <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    43c6:	2302      	movs	r3, #2
    43c8:	9304      	str	r3, [sp, #16]
            break;
    43ca:	e000      	b.n	43ce <getCoreDividerConfig+0x3a>
                break;
    43cc:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    43ce:	4b41      	ldr	r3, [pc, #260]	; (44d4 <getCoreDividerConfig+0x140>)
    43d0:	681b      	ldr	r3, [r3, #0]
    43d2:	2b00      	cmp	r3, #0
    43d4:	d026      	beq.n	4424 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    43d6:	2300      	movs	r3, #0
    43d8:	9303      	str	r3, [sp, #12]
    43da:	e01c      	b.n	4416 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    43dc:	4b3d      	ldr	r3, [pc, #244]	; (44d4 <getCoreDividerConfig+0x140>)
    43de:	6819      	ldr	r1, [r3, #0]
    43e0:	9a03      	ldr	r2, [sp, #12]
    43e2:	4613      	mov	r3, r2
    43e4:	005b      	lsls	r3, r3, #1
    43e6:	4413      	add	r3, r2
    43e8:	009b      	lsls	r3, r3, #2
    43ea:	440b      	add	r3, r1
    43ec:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    43f0:	681b      	ldr	r3, [r3, #0]
    43f2:	9a01      	ldr	r2, [sp, #4]
    43f4:	429a      	cmp	r2, r3
    43f6:	d10b      	bne.n	4410 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    43f8:	4b36      	ldr	r3, [pc, #216]	; (44d4 <getCoreDividerConfig+0x140>)
    43fa:	6819      	ldr	r1, [r3, #0]
    43fc:	9a03      	ldr	r2, [sp, #12]
    43fe:	4613      	mov	r3, r2
    4400:	005b      	lsls	r3, r3, #1
    4402:	4413      	add	r3, r2
    4404:	009b      	lsls	r3, r3, #2
    4406:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    440a:	440b      	add	r3, r1
    440c:	9305      	str	r3, [sp, #20]
                break;
    440e:	e009      	b.n	4424 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4410:	9b03      	ldr	r3, [sp, #12]
    4412:	3301      	adds	r3, #1
    4414:	9303      	str	r3, [sp, #12]
    4416:	4b2f      	ldr	r3, [pc, #188]	; (44d4 <getCoreDividerConfig+0x140>)
    4418:	681b      	ldr	r3, [r3, #0]
    441a:	7b1b      	ldrb	r3, [r3, #12]
    441c:	461a      	mov	r2, r3
    441e:	9b03      	ldr	r3, [sp, #12]
    4420:	4293      	cmp	r3, r2
    4422:	d3db      	bcc.n	43dc <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4424:	9b05      	ldr	r3, [sp, #20]
    4426:	2b00      	cmp	r3, #0
    4428:	d14d      	bne.n	44c6 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    442a:	9a04      	ldr	r2, [sp, #16]
    442c:	4613      	mov	r3, r2
    442e:	005b      	lsls	r3, r3, #1
    4430:	4413      	add	r3, r2
    4432:	009b      	lsls	r3, r3, #2
    4434:	4a28      	ldr	r2, [pc, #160]	; (44d8 <getCoreDividerConfig+0x144>)
    4436:	4413      	add	r3, r2
    4438:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    443a:	4927      	ldr	r1, [pc, #156]	; (44d8 <getCoreDividerConfig+0x144>)
    443c:	9a04      	ldr	r2, [sp, #16]
    443e:	4613      	mov	r3, r2
    4440:	005b      	lsls	r3, r3, #1
    4442:	4413      	add	r3, r2
    4444:	009b      	lsls	r3, r3, #2
    4446:	440b      	add	r3, r1
    4448:	9a01      	ldr	r2, [sp, #4]
    444a:	601a      	str	r2, [r3, #0]
        switch(Name)
    444c:	9b01      	ldr	r3, [sp, #4]
    444e:	2b1f      	cmp	r3, #31
    4450:	d029      	beq.n	44a6 <getCoreDividerConfig+0x112>
    4452:	9b01      	ldr	r3, [sp, #4]
    4454:	2b1f      	cmp	r3, #31
    4456:	d838      	bhi.n	44ca <getCoreDividerConfig+0x136>
    4458:	9b01      	ldr	r3, [sp, #4]
    445a:	2b1d      	cmp	r3, #29
    445c:	d003      	beq.n	4466 <getCoreDividerConfig+0xd2>
    445e:	9b01      	ldr	r3, [sp, #4]
    4460:	2b1e      	cmp	r3, #30
    4462:	d010      	beq.n	4486 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4464:	e031      	b.n	44ca <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4466:	4b1d      	ldr	r3, [pc, #116]	; (44dc <getCoreDividerConfig+0x148>)
    4468:	695b      	ldr	r3, [r3, #20]
    446a:	0c1b      	lsrs	r3, r3, #16
    446c:	f003 030f 	and.w	r3, r3, #15
    4470:	1c59      	adds	r1, r3, #1
    4472:	4819      	ldr	r0, [pc, #100]	; (44d8 <getCoreDividerConfig+0x144>)
    4474:	9a04      	ldr	r2, [sp, #16]
    4476:	4613      	mov	r3, r2
    4478:	005b      	lsls	r3, r3, #1
    447a:	4413      	add	r3, r2
    447c:	009b      	lsls	r3, r3, #2
    447e:	4403      	add	r3, r0
    4480:	3304      	adds	r3, #4
    4482:	6019      	str	r1, [r3, #0]
                break;
    4484:	e022      	b.n	44cc <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4486:	4b15      	ldr	r3, [pc, #84]	; (44dc <getCoreDividerConfig+0x148>)
    4488:	699b      	ldr	r3, [r3, #24]
    448a:	0c1b      	lsrs	r3, r3, #16
    448c:	f003 030f 	and.w	r3, r3, #15
    4490:	1c59      	adds	r1, r3, #1
    4492:	4811      	ldr	r0, [pc, #68]	; (44d8 <getCoreDividerConfig+0x144>)
    4494:	9a04      	ldr	r2, [sp, #16]
    4496:	4613      	mov	r3, r2
    4498:	005b      	lsls	r3, r3, #1
    449a:	4413      	add	r3, r2
    449c:	009b      	lsls	r3, r3, #2
    449e:	4403      	add	r3, r0
    44a0:	3304      	adds	r3, #4
    44a2:	6019      	str	r1, [r3, #0]
                break;
    44a4:	e012      	b.n	44cc <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    44a6:	4b0d      	ldr	r3, [pc, #52]	; (44dc <getCoreDividerConfig+0x148>)
    44a8:	69db      	ldr	r3, [r3, #28]
    44aa:	0c1b      	lsrs	r3, r3, #16
    44ac:	f003 030f 	and.w	r3, r3, #15
    44b0:	1c59      	adds	r1, r3, #1
    44b2:	4809      	ldr	r0, [pc, #36]	; (44d8 <getCoreDividerConfig+0x144>)
    44b4:	9a04      	ldr	r2, [sp, #16]
    44b6:	4613      	mov	r3, r2
    44b8:	005b      	lsls	r3, r3, #1
    44ba:	4413      	add	r3, r2
    44bc:	009b      	lsls	r3, r3, #2
    44be:	4403      	add	r3, r0
    44c0:	3304      	adds	r3, #4
    44c2:	6019      	str	r1, [r3, #0]
                break;
    44c4:	e002      	b.n	44cc <getCoreDividerConfig+0x138>
        }
    }
    44c6:	bf00      	nop
    44c8:	e000      	b.n	44cc <getCoreDividerConfig+0x138>
                break;
    44ca:	bf00      	nop

    return ReturnValue;
    44cc:	9b05      	ldr	r3, [sp, #20]
}
    44ce:	4618      	mov	r0, r3
    44d0:	b006      	add	sp, #24
    44d2:	4770      	bx	lr
    44d4:	1fff8c18 	.word	0x1fff8c18
    44d8:	1fff8ce4 	.word	0x1fff8ce4
    44dc:	40064000 	.word	0x40064000

000044e0 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    44e0:	b086      	sub	sp, #24
    44e2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    44e4:	2300      	movs	r3, #0
    44e6:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    44e8:	2300      	movs	r3, #0
    44ea:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    44ec:	9b01      	ldr	r3, [sp, #4]
    44ee:	2b23      	cmp	r3, #35	; 0x23
    44f0:	d00f      	beq.n	4512 <getBusDividerConfig+0x32>
    44f2:	9b01      	ldr	r3, [sp, #4]
    44f4:	2b23      	cmp	r3, #35	; 0x23
    44f6:	d80f      	bhi.n	4518 <getBusDividerConfig+0x38>
    44f8:	9b01      	ldr	r3, [sp, #4]
    44fa:	2b21      	cmp	r3, #33	; 0x21
    44fc:	d003      	beq.n	4506 <getBusDividerConfig+0x26>
    44fe:	9b01      	ldr	r3, [sp, #4]
    4500:	2b22      	cmp	r3, #34	; 0x22
    4502:	d003      	beq.n	450c <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4504:	e008      	b.n	4518 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4506:	2300      	movs	r3, #0
    4508:	9304      	str	r3, [sp, #16]
            break;
    450a:	e006      	b.n	451a <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    450c:	2301      	movs	r3, #1
    450e:	9304      	str	r3, [sp, #16]
            break;
    4510:	e003      	b.n	451a <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4512:	2302      	movs	r3, #2
    4514:	9304      	str	r3, [sp, #16]
            break;
    4516:	e000      	b.n	451a <getBusDividerConfig+0x3a>
                break;
    4518:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    451a:	4b41      	ldr	r3, [pc, #260]	; (4620 <getBusDividerConfig+0x140>)
    451c:	681b      	ldr	r3, [r3, #0]
    451e:	2b00      	cmp	r3, #0
    4520:	d026      	beq.n	4570 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4522:	2300      	movs	r3, #0
    4524:	9303      	str	r3, [sp, #12]
    4526:	e01c      	b.n	4562 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4528:	4b3d      	ldr	r3, [pc, #244]	; (4620 <getBusDividerConfig+0x140>)
    452a:	6819      	ldr	r1, [r3, #0]
    452c:	9a03      	ldr	r2, [sp, #12]
    452e:	4613      	mov	r3, r2
    4530:	005b      	lsls	r3, r3, #1
    4532:	4413      	add	r3, r2
    4534:	009b      	lsls	r3, r3, #2
    4536:	440b      	add	r3, r1
    4538:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    453c:	681b      	ldr	r3, [r3, #0]
    453e:	9a01      	ldr	r2, [sp, #4]
    4540:	429a      	cmp	r2, r3
    4542:	d10b      	bne.n	455c <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4544:	4b36      	ldr	r3, [pc, #216]	; (4620 <getBusDividerConfig+0x140>)
    4546:	6819      	ldr	r1, [r3, #0]
    4548:	9a03      	ldr	r2, [sp, #12]
    454a:	4613      	mov	r3, r2
    454c:	005b      	lsls	r3, r3, #1
    454e:	4413      	add	r3, r2
    4550:	009b      	lsls	r3, r3, #2
    4552:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4556:	440b      	add	r3, r1
    4558:	9305      	str	r3, [sp, #20]
                break;
    455a:	e009      	b.n	4570 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    455c:	9b03      	ldr	r3, [sp, #12]
    455e:	3301      	adds	r3, #1
    4560:	9303      	str	r3, [sp, #12]
    4562:	4b2f      	ldr	r3, [pc, #188]	; (4620 <getBusDividerConfig+0x140>)
    4564:	681b      	ldr	r3, [r3, #0]
    4566:	7b1b      	ldrb	r3, [r3, #12]
    4568:	461a      	mov	r2, r3
    456a:	9b03      	ldr	r3, [sp, #12]
    456c:	4293      	cmp	r3, r2
    456e:	d3db      	bcc.n	4528 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4570:	9b05      	ldr	r3, [sp, #20]
    4572:	2b00      	cmp	r3, #0
    4574:	d14d      	bne.n	4612 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4576:	9a04      	ldr	r2, [sp, #16]
    4578:	4613      	mov	r3, r2
    457a:	005b      	lsls	r3, r3, #1
    457c:	4413      	add	r3, r2
    457e:	009b      	lsls	r3, r3, #2
    4580:	4a28      	ldr	r2, [pc, #160]	; (4624 <getBusDividerConfig+0x144>)
    4582:	4413      	add	r3, r2
    4584:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    4586:	4927      	ldr	r1, [pc, #156]	; (4624 <getBusDividerConfig+0x144>)
    4588:	9a04      	ldr	r2, [sp, #16]
    458a:	4613      	mov	r3, r2
    458c:	005b      	lsls	r3, r3, #1
    458e:	4413      	add	r3, r2
    4590:	009b      	lsls	r3, r3, #2
    4592:	440b      	add	r3, r1
    4594:	9a01      	ldr	r2, [sp, #4]
    4596:	601a      	str	r2, [r3, #0]
        switch(Name)
    4598:	9b01      	ldr	r3, [sp, #4]
    459a:	2b23      	cmp	r3, #35	; 0x23
    459c:	d029      	beq.n	45f2 <getBusDividerConfig+0x112>
    459e:	9b01      	ldr	r3, [sp, #4]
    45a0:	2b23      	cmp	r3, #35	; 0x23
    45a2:	d838      	bhi.n	4616 <getBusDividerConfig+0x136>
    45a4:	9b01      	ldr	r3, [sp, #4]
    45a6:	2b21      	cmp	r3, #33	; 0x21
    45a8:	d003      	beq.n	45b2 <getBusDividerConfig+0xd2>
    45aa:	9b01      	ldr	r3, [sp, #4]
    45ac:	2b22      	cmp	r3, #34	; 0x22
    45ae:	d010      	beq.n	45d2 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    45b0:	e031      	b.n	4616 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    45b2:	4b1d      	ldr	r3, [pc, #116]	; (4628 <getBusDividerConfig+0x148>)
    45b4:	695b      	ldr	r3, [r3, #20]
    45b6:	091b      	lsrs	r3, r3, #4
    45b8:	f003 030f 	and.w	r3, r3, #15
    45bc:	1c59      	adds	r1, r3, #1
    45be:	4819      	ldr	r0, [pc, #100]	; (4624 <getBusDividerConfig+0x144>)
    45c0:	9a04      	ldr	r2, [sp, #16]
    45c2:	4613      	mov	r3, r2
    45c4:	005b      	lsls	r3, r3, #1
    45c6:	4413      	add	r3, r2
    45c8:	009b      	lsls	r3, r3, #2
    45ca:	4403      	add	r3, r0
    45cc:	3304      	adds	r3, #4
    45ce:	6019      	str	r1, [r3, #0]
                break;
    45d0:	e022      	b.n	4618 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    45d2:	4b15      	ldr	r3, [pc, #84]	; (4628 <getBusDividerConfig+0x148>)
    45d4:	699b      	ldr	r3, [r3, #24]
    45d6:	091b      	lsrs	r3, r3, #4
    45d8:	f003 030f 	and.w	r3, r3, #15
    45dc:	1c59      	adds	r1, r3, #1
    45de:	4811      	ldr	r0, [pc, #68]	; (4624 <getBusDividerConfig+0x144>)
    45e0:	9a04      	ldr	r2, [sp, #16]
    45e2:	4613      	mov	r3, r2
    45e4:	005b      	lsls	r3, r3, #1
    45e6:	4413      	add	r3, r2
    45e8:	009b      	lsls	r3, r3, #2
    45ea:	4403      	add	r3, r0
    45ec:	3304      	adds	r3, #4
    45ee:	6019      	str	r1, [r3, #0]
                break;
    45f0:	e012      	b.n	4618 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    45f2:	4b0d      	ldr	r3, [pc, #52]	; (4628 <getBusDividerConfig+0x148>)
    45f4:	69db      	ldr	r3, [r3, #28]
    45f6:	091b      	lsrs	r3, r3, #4
    45f8:	f003 030f 	and.w	r3, r3, #15
    45fc:	1c59      	adds	r1, r3, #1
    45fe:	4809      	ldr	r0, [pc, #36]	; (4624 <getBusDividerConfig+0x144>)
    4600:	9a04      	ldr	r2, [sp, #16]
    4602:	4613      	mov	r3, r2
    4604:	005b      	lsls	r3, r3, #1
    4606:	4413      	add	r3, r2
    4608:	009b      	lsls	r3, r3, #2
    460a:	4403      	add	r3, r0
    460c:	3304      	adds	r3, #4
    460e:	6019      	str	r1, [r3, #0]
                break;
    4610:	e002      	b.n	4618 <getBusDividerConfig+0x138>
        }
    }
    4612:	bf00      	nop
    4614:	e000      	b.n	4618 <getBusDividerConfig+0x138>
                break;
    4616:	bf00      	nop

    return ReturnValue;
    4618:	9b05      	ldr	r3, [sp, #20]
}
    461a:	4618      	mov	r0, r3
    461c:	b006      	add	sp, #24
    461e:	4770      	bx	lr
    4620:	1fff8c18 	.word	0x1fff8c18
    4624:	1fff8d08 	.word	0x1fff8d08
    4628:	40064000 	.word	0x40064000

0000462c <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    462c:	b086      	sub	sp, #24
    462e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4630:	2300      	movs	r3, #0
    4632:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4634:	2300      	movs	r3, #0
    4636:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4638:	9b01      	ldr	r3, [sp, #4]
    463a:	2b27      	cmp	r3, #39	; 0x27
    463c:	d00f      	beq.n	465e <getSlowDividerConfig+0x32>
    463e:	9b01      	ldr	r3, [sp, #4]
    4640:	2b27      	cmp	r3, #39	; 0x27
    4642:	d80f      	bhi.n	4664 <getSlowDividerConfig+0x38>
    4644:	9b01      	ldr	r3, [sp, #4]
    4646:	2b25      	cmp	r3, #37	; 0x25
    4648:	d003      	beq.n	4652 <getSlowDividerConfig+0x26>
    464a:	9b01      	ldr	r3, [sp, #4]
    464c:	2b26      	cmp	r3, #38	; 0x26
    464e:	d003      	beq.n	4658 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4650:	e008      	b.n	4664 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4652:	2300      	movs	r3, #0
    4654:	9304      	str	r3, [sp, #16]
            break;
    4656:	e006      	b.n	4666 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4658:	2301      	movs	r3, #1
    465a:	9304      	str	r3, [sp, #16]
            break;
    465c:	e003      	b.n	4666 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    465e:	2302      	movs	r3, #2
    4660:	9304      	str	r3, [sp, #16]
            break;
    4662:	e000      	b.n	4666 <getSlowDividerConfig+0x3a>
                break;
    4664:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4666:	4b40      	ldr	r3, [pc, #256]	; (4768 <getSlowDividerConfig+0x13c>)
    4668:	681b      	ldr	r3, [r3, #0]
    466a:	2b00      	cmp	r3, #0
    466c:	d026      	beq.n	46bc <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    466e:	2300      	movs	r3, #0
    4670:	9303      	str	r3, [sp, #12]
    4672:	e01c      	b.n	46ae <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4674:	4b3c      	ldr	r3, [pc, #240]	; (4768 <getSlowDividerConfig+0x13c>)
    4676:	6819      	ldr	r1, [r3, #0]
    4678:	9a03      	ldr	r2, [sp, #12]
    467a:	4613      	mov	r3, r2
    467c:	005b      	lsls	r3, r3, #1
    467e:	4413      	add	r3, r2
    4680:	009b      	lsls	r3, r3, #2
    4682:	440b      	add	r3, r1
    4684:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4688:	681b      	ldr	r3, [r3, #0]
    468a:	9a01      	ldr	r2, [sp, #4]
    468c:	429a      	cmp	r2, r3
    468e:	d10b      	bne.n	46a8 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4690:	4b35      	ldr	r3, [pc, #212]	; (4768 <getSlowDividerConfig+0x13c>)
    4692:	6819      	ldr	r1, [r3, #0]
    4694:	9a03      	ldr	r2, [sp, #12]
    4696:	4613      	mov	r3, r2
    4698:	005b      	lsls	r3, r3, #1
    469a:	4413      	add	r3, r2
    469c:	009b      	lsls	r3, r3, #2
    469e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    46a2:	440b      	add	r3, r1
    46a4:	9305      	str	r3, [sp, #20]
                break;
    46a6:	e009      	b.n	46bc <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    46a8:	9b03      	ldr	r3, [sp, #12]
    46aa:	3301      	adds	r3, #1
    46ac:	9303      	str	r3, [sp, #12]
    46ae:	4b2e      	ldr	r3, [pc, #184]	; (4768 <getSlowDividerConfig+0x13c>)
    46b0:	681b      	ldr	r3, [r3, #0]
    46b2:	7b1b      	ldrb	r3, [r3, #12]
    46b4:	461a      	mov	r2, r3
    46b6:	9b03      	ldr	r3, [sp, #12]
    46b8:	4293      	cmp	r3, r2
    46ba:	d3db      	bcc.n	4674 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    46bc:	9b05      	ldr	r3, [sp, #20]
    46be:	2b00      	cmp	r3, #0
    46c0:	d14a      	bne.n	4758 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    46c2:	9a04      	ldr	r2, [sp, #16]
    46c4:	4613      	mov	r3, r2
    46c6:	005b      	lsls	r3, r3, #1
    46c8:	4413      	add	r3, r2
    46ca:	009b      	lsls	r3, r3, #2
    46cc:	4a27      	ldr	r2, [pc, #156]	; (476c <getSlowDividerConfig+0x140>)
    46ce:	4413      	add	r3, r2
    46d0:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    46d2:	4926      	ldr	r1, [pc, #152]	; (476c <getSlowDividerConfig+0x140>)
    46d4:	9a04      	ldr	r2, [sp, #16]
    46d6:	4613      	mov	r3, r2
    46d8:	005b      	lsls	r3, r3, #1
    46da:	4413      	add	r3, r2
    46dc:	009b      	lsls	r3, r3, #2
    46de:	440b      	add	r3, r1
    46e0:	9a01      	ldr	r2, [sp, #4]
    46e2:	601a      	str	r2, [r3, #0]
        switch(Name)
    46e4:	9b01      	ldr	r3, [sp, #4]
    46e6:	2b27      	cmp	r3, #39	; 0x27
    46e8:	d027      	beq.n	473a <getSlowDividerConfig+0x10e>
    46ea:	9b01      	ldr	r3, [sp, #4]
    46ec:	2b27      	cmp	r3, #39	; 0x27
    46ee:	d835      	bhi.n	475c <getSlowDividerConfig+0x130>
    46f0:	9b01      	ldr	r3, [sp, #4]
    46f2:	2b25      	cmp	r3, #37	; 0x25
    46f4:	d003      	beq.n	46fe <getSlowDividerConfig+0xd2>
    46f6:	9b01      	ldr	r3, [sp, #4]
    46f8:	2b26      	cmp	r3, #38	; 0x26
    46fa:	d00f      	beq.n	471c <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    46fc:	e02e      	b.n	475c <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    46fe:	4b1c      	ldr	r3, [pc, #112]	; (4770 <getSlowDividerConfig+0x144>)
    4700:	695b      	ldr	r3, [r3, #20]
    4702:	f003 030f 	and.w	r3, r3, #15
    4706:	1c59      	adds	r1, r3, #1
    4708:	4818      	ldr	r0, [pc, #96]	; (476c <getSlowDividerConfig+0x140>)
    470a:	9a04      	ldr	r2, [sp, #16]
    470c:	4613      	mov	r3, r2
    470e:	005b      	lsls	r3, r3, #1
    4710:	4413      	add	r3, r2
    4712:	009b      	lsls	r3, r3, #2
    4714:	4403      	add	r3, r0
    4716:	3304      	adds	r3, #4
    4718:	6019      	str	r1, [r3, #0]
                break;
    471a:	e020      	b.n	475e <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    471c:	4b14      	ldr	r3, [pc, #80]	; (4770 <getSlowDividerConfig+0x144>)
    471e:	699b      	ldr	r3, [r3, #24]
    4720:	f003 030f 	and.w	r3, r3, #15
    4724:	1c59      	adds	r1, r3, #1
    4726:	4811      	ldr	r0, [pc, #68]	; (476c <getSlowDividerConfig+0x140>)
    4728:	9a04      	ldr	r2, [sp, #16]
    472a:	4613      	mov	r3, r2
    472c:	005b      	lsls	r3, r3, #1
    472e:	4413      	add	r3, r2
    4730:	009b      	lsls	r3, r3, #2
    4732:	4403      	add	r3, r0
    4734:	3304      	adds	r3, #4
    4736:	6019      	str	r1, [r3, #0]
                break;
    4738:	e011      	b.n	475e <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    473a:	4b0d      	ldr	r3, [pc, #52]	; (4770 <getSlowDividerConfig+0x144>)
    473c:	69db      	ldr	r3, [r3, #28]
    473e:	f003 030f 	and.w	r3, r3, #15
    4742:	1c59      	adds	r1, r3, #1
    4744:	4809      	ldr	r0, [pc, #36]	; (476c <getSlowDividerConfig+0x140>)
    4746:	9a04      	ldr	r2, [sp, #16]
    4748:	4613      	mov	r3, r2
    474a:	005b      	lsls	r3, r3, #1
    474c:	4413      	add	r3, r2
    474e:	009b      	lsls	r3, r3, #2
    4750:	4403      	add	r3, r0
    4752:	3304      	adds	r3, #4
    4754:	6019      	str	r1, [r3, #0]
                break;
    4756:	e002      	b.n	475e <getSlowDividerConfig+0x132>
        }
    }
    4758:	bf00      	nop
    475a:	e000      	b.n	475e <getSlowDividerConfig+0x132>
                break;
    475c:	bf00      	nop

    return ReturnValue;
    475e:	9b05      	ldr	r3, [sp, #20]
}
    4760:	4618      	mov	r0, r3
    4762:	b006      	add	sp, #24
    4764:	4770      	bx	lr
    4766:	bf00      	nop
    4768:	1fff8c18 	.word	0x1fff8c18
    476c:	1fff8d2c 	.word	0x1fff8d2c
    4770:	40064000 	.word	0x40064000

00004774 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    4774:	b500      	push	{lr}
    4776:	b083      	sub	sp, #12
    4778:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    477a:	4b64      	ldr	r3, [pc, #400]	; (490c <Clock_Ip_ClockInitializeObjects+0x198>)
    477c:	781b      	ldrb	r3, [r3, #0]
    477e:	f083 0301 	eor.w	r3, r3, #1
    4782:	b2db      	uxtb	r3, r3
    4784:	2b00      	cmp	r3, #0
    4786:	d05b      	beq.n	4840 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    4788:	4b60      	ldr	r3, [pc, #384]	; (490c <Clock_Ip_ClockInitializeObjects+0x198>)
    478a:	2201      	movs	r2, #1
    478c:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    478e:	4b60      	ldr	r3, [pc, #384]	; (4910 <Clock_Ip_ClockInitializeObjects+0x19c>)
    4790:	785b      	ldrb	r3, [r3, #1]
    4792:	461a      	mov	r2, r3
    4794:	4613      	mov	r3, r2
    4796:	009b      	lsls	r3, r3, #2
    4798:	4413      	add	r3, r2
    479a:	009b      	lsls	r3, r3, #2
    479c:	4a5d      	ldr	r2, [pc, #372]	; (4914 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    479e:	4413      	add	r3, r2
    47a0:	4a5d      	ldr	r2, [pc, #372]	; (4918 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    47a2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    47a4:	4b5d      	ldr	r3, [pc, #372]	; (491c <Clock_Ip_ClockInitializeObjects+0x1a8>)
    47a6:	785b      	ldrb	r3, [r3, #1]
    47a8:	461a      	mov	r2, r3
    47aa:	4613      	mov	r3, r2
    47ac:	009b      	lsls	r3, r3, #2
    47ae:	4413      	add	r3, r2
    47b0:	009b      	lsls	r3, r3, #2
    47b2:	4a5b      	ldr	r2, [pc, #364]	; (4920 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    47b4:	4413      	add	r3, r2
    47b6:	4a5b      	ldr	r2, [pc, #364]	; (4924 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    47b8:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    47ba:	4b5b      	ldr	r3, [pc, #364]	; (4928 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    47bc:	791b      	ldrb	r3, [r3, #4]
    47be:	461a      	mov	r2, r3
    47c0:	4613      	mov	r3, r2
    47c2:	005b      	lsls	r3, r3, #1
    47c4:	4413      	add	r3, r2
    47c6:	009b      	lsls	r3, r3, #2
    47c8:	4a58      	ldr	r2, [pc, #352]	; (492c <Clock_Ip_ClockInitializeObjects+0x1b8>)
    47ca:	4413      	add	r3, r2
    47cc:	4a58      	ldr	r2, [pc, #352]	; (4930 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    47ce:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    47d0:	4b58      	ldr	r3, [pc, #352]	; (4934 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    47d2:	795b      	ldrb	r3, [r3, #5]
    47d4:	00db      	lsls	r3, r3, #3
    47d6:	4a58      	ldr	r2, [pc, #352]	; (4938 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    47d8:	4413      	add	r3, r2
    47da:	4a58      	ldr	r2, [pc, #352]	; (493c <Clock_Ip_ClockInitializeObjects+0x1c8>)
    47dc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    47de:	4b55      	ldr	r3, [pc, #340]	; (4934 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    47e0:	79db      	ldrb	r3, [r3, #7]
    47e2:	00db      	lsls	r3, r3, #3
    47e4:	4a54      	ldr	r2, [pc, #336]	; (4938 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    47e6:	4413      	add	r3, r2
    47e8:	4a55      	ldr	r2, [pc, #340]	; (4940 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    47ea:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    47ec:	4b55      	ldr	r3, [pc, #340]	; (4944 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47ee:	799b      	ldrb	r3, [r3, #6]
    47f0:	009b      	lsls	r3, r3, #2
    47f2:	4a55      	ldr	r2, [pc, #340]	; (4948 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    47f4:	4413      	add	r3, r2
    47f6:	4a55      	ldr	r2, [pc, #340]	; (494c <Clock_Ip_ClockInitializeObjects+0x1d8>)
    47f8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    47fa:	4b52      	ldr	r3, [pc, #328]	; (4944 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47fc:	7a1b      	ldrb	r3, [r3, #8]
    47fe:	009b      	lsls	r3, r3, #2
    4800:	4a51      	ldr	r2, [pc, #324]	; (4948 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4802:	4413      	add	r3, r2
    4804:	4a52      	ldr	r2, [pc, #328]	; (4950 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    4806:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    4808:	4b4e      	ldr	r3, [pc, #312]	; (4944 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    480a:	7a5b      	ldrb	r3, [r3, #9]
    480c:	009b      	lsls	r3, r3, #2
    480e:	4a4e      	ldr	r2, [pc, #312]	; (4948 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4810:	4413      	add	r3, r2
    4812:	4a50      	ldr	r2, [pc, #320]	; (4954 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4814:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    4816:	4b4b      	ldr	r3, [pc, #300]	; (4944 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4818:	7adb      	ldrb	r3, [r3, #11]
    481a:	009b      	lsls	r3, r3, #2
    481c:	4a4a      	ldr	r2, [pc, #296]	; (4948 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    481e:	4413      	add	r3, r2
    4820:	4a4d      	ldr	r2, [pc, #308]	; (4958 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    4822:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    4824:	4b47      	ldr	r3, [pc, #284]	; (4944 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4826:	7b1b      	ldrb	r3, [r3, #12]
    4828:	009b      	lsls	r3, r3, #2
    482a:	4a47      	ldr	r2, [pc, #284]	; (4948 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    482c:	4413      	add	r3, r2
    482e:	4a4b      	ldr	r2, [pc, #300]	; (495c <Clock_Ip_ClockInitializeObjects+0x1e8>)
    4830:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    4832:	4b44      	ldr	r3, [pc, #272]	; (4944 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4834:	7b9b      	ldrb	r3, [r3, #14]
    4836:	009b      	lsls	r3, r3, #2
    4838:	4a43      	ldr	r2, [pc, #268]	; (4948 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    483a:	4413      	add	r3, r2
    483c:	4a48      	ldr	r2, [pc, #288]	; (4960 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    483e:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    4840:	4b48      	ldr	r3, [pc, #288]	; (4964 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    4842:	781b      	ldrb	r3, [r3, #0]
    4844:	2b00      	cmp	r3, #0
    4846:	d002      	beq.n	484e <Clock_Ip_ClockInitializeObjects+0xda>
    4848:	9b01      	ldr	r3, [sp, #4]
    484a:	2b00      	cmp	r3, #0
    484c:	d003      	beq.n	4856 <Clock_Ip_ClockInitializeObjects+0xe2>
    484e:	4b46      	ldr	r3, [pc, #280]	; (4968 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    4850:	781b      	ldrb	r3, [r3, #0]
    4852:	2b00      	cmp	r3, #0
    4854:	d056      	beq.n	4904 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    4856:	f7ff fc09 	bl	406c <getFircConfig>
    485a:	4603      	mov	r3, r0
    485c:	4a43      	ldr	r2, [pc, #268]	; (496c <Clock_Ip_ClockInitializeObjects+0x1f8>)
    485e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    4860:	f7ff fc60 	bl	4124 <getSoscConfig>
    4864:	4603      	mov	r3, r0
    4866:	4a42      	ldr	r2, [pc, #264]	; (4970 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    4868:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    486a:	f7ff fca7 	bl	41bc <getSpllConfig>
    486e:	4603      	mov	r3, r0
    4870:	4a40      	ldr	r2, [pc, #256]	; (4974 <Clock_Ip_ClockInitializeObjects+0x200>)
    4872:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    4874:	2019      	movs	r0, #25
    4876:	f7ff fcfb 	bl	4270 <getSelectorConfig>
    487a:	4603      	mov	r3, r0
    487c:	4a3e      	ldr	r2, [pc, #248]	; (4978 <Clock_Ip_ClockInitializeObjects+0x204>)
    487e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    4880:	201a      	movs	r0, #26
    4882:	f7ff fcf5 	bl	4270 <getSelectorConfig>
    4886:	4603      	mov	r3, r0
    4888:	4a3c      	ldr	r2, [pc, #240]	; (497c <Clock_Ip_ClockInitializeObjects+0x208>)
    488a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    488c:	201b      	movs	r0, #27
    488e:	f7ff fcef 	bl	4270 <getSelectorConfig>
    4892:	4603      	mov	r3, r0
    4894:	4a3a      	ldr	r2, [pc, #232]	; (4980 <Clock_Ip_ClockInitializeObjects+0x20c>)
    4896:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    4898:	201d      	movs	r0, #29
    489a:	f7ff fd7b 	bl	4394 <getCoreDividerConfig>
    489e:	4603      	mov	r3, r0
    48a0:	4a38      	ldr	r2, [pc, #224]	; (4984 <Clock_Ip_ClockInitializeObjects+0x210>)
    48a2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    48a4:	201e      	movs	r0, #30
    48a6:	f7ff fd75 	bl	4394 <getCoreDividerConfig>
    48aa:	4603      	mov	r3, r0
    48ac:	4a36      	ldr	r2, [pc, #216]	; (4988 <Clock_Ip_ClockInitializeObjects+0x214>)
    48ae:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    48b0:	201f      	movs	r0, #31
    48b2:	f7ff fd6f 	bl	4394 <getCoreDividerConfig>
    48b6:	4603      	mov	r3, r0
    48b8:	4a34      	ldr	r2, [pc, #208]	; (498c <Clock_Ip_ClockInitializeObjects+0x218>)
    48ba:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    48bc:	2021      	movs	r0, #33	; 0x21
    48be:	f7ff fe0f 	bl	44e0 <getBusDividerConfig>
    48c2:	4603      	mov	r3, r0
    48c4:	4a32      	ldr	r2, [pc, #200]	; (4990 <Clock_Ip_ClockInitializeObjects+0x21c>)
    48c6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    48c8:	2022      	movs	r0, #34	; 0x22
    48ca:	f7ff fe09 	bl	44e0 <getBusDividerConfig>
    48ce:	4603      	mov	r3, r0
    48d0:	4a30      	ldr	r2, [pc, #192]	; (4994 <Clock_Ip_ClockInitializeObjects+0x220>)
    48d2:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    48d4:	2023      	movs	r0, #35	; 0x23
    48d6:	f7ff fe03 	bl	44e0 <getBusDividerConfig>
    48da:	4603      	mov	r3, r0
    48dc:	4a2e      	ldr	r2, [pc, #184]	; (4998 <Clock_Ip_ClockInitializeObjects+0x224>)
    48de:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    48e0:	2025      	movs	r0, #37	; 0x25
    48e2:	f7ff fea3 	bl	462c <getSlowDividerConfig>
    48e6:	4603      	mov	r3, r0
    48e8:	4a2c      	ldr	r2, [pc, #176]	; (499c <Clock_Ip_ClockInitializeObjects+0x228>)
    48ea:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    48ec:	2026      	movs	r0, #38	; 0x26
    48ee:	f7ff fe9d 	bl	462c <getSlowDividerConfig>
    48f2:	4603      	mov	r3, r0
    48f4:	4a2a      	ldr	r2, [pc, #168]	; (49a0 <Clock_Ip_ClockInitializeObjects+0x22c>)
    48f6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    48f8:	2027      	movs	r0, #39	; 0x27
    48fa:	f7ff fe97 	bl	462c <getSlowDividerConfig>
    48fe:	4603      	mov	r3, r0
    4900:	4a28      	ldr	r2, [pc, #160]	; (49a4 <Clock_Ip_ClockInitializeObjects+0x230>)
    4902:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    4904:	bf00      	nop
    4906:	b003      	add	sp, #12
    4908:	f85d fb04 	ldr.w	pc, [sp], #4
    490c:	1fff8d50 	.word	0x1fff8d50
    4910:	0000b9c8 	.word	0x0000b9c8
    4914:	0000c014 	.word	0x0000c014
    4918:	1fff8c1c 	.word	0x1fff8c1c
    491c:	0000b988 	.word	0x0000b988
    4920:	0000bf5c 	.word	0x0000bf5c
    4924:	1fff8c20 	.word	0x1fff8c20
    4928:	0000b998 	.word	0x0000b998
    492c:	0000bfc8 	.word	0x0000bfc8
    4930:	1fff8c24 	.word	0x1fff8c24
    4934:	0000b9d8 	.word	0x0000b9d8
    4938:	0000c040 	.word	0x0000c040
    493c:	1fff8c28 	.word	0x1fff8c28
    4940:	1fff8c64 	.word	0x1fff8c64
    4944:	0000b968 	.word	0x0000b968
    4948:	0000bf18 	.word	0x0000bf18
    494c:	1fff8c2c 	.word	0x1fff8c2c
    4950:	1fff8c68 	.word	0x1fff8c68
    4954:	1fff8c30 	.word	0x1fff8c30
    4958:	1fff8c6c 	.word	0x1fff8c6c
    495c:	1fff8c34 	.word	0x1fff8c34
    4960:	1fff8c70 	.word	0x1fff8c70
    4964:	1fff8b19 	.word	0x1fff8b19
    4968:	1fff8b10 	.word	0x1fff8b10
    496c:	1fff8c38 	.word	0x1fff8c38
    4970:	1fff8c3c 	.word	0x1fff8c3c
    4974:	1fff8c40 	.word	0x1fff8c40
    4978:	1fff8c44 	.word	0x1fff8c44
    497c:	1fff8c48 	.word	0x1fff8c48
    4980:	1fff8c74 	.word	0x1fff8c74
    4984:	1fff8c4c 	.word	0x1fff8c4c
    4988:	1fff8c50 	.word	0x1fff8c50
    498c:	1fff8c78 	.word	0x1fff8c78
    4990:	1fff8c54 	.word	0x1fff8c54
    4994:	1fff8c58 	.word	0x1fff8c58
    4998:	1fff8c7c 	.word	0x1fff8c7c
    499c:	1fff8c5c 	.word	0x1fff8c5c
    49a0:	1fff8c60 	.word	0x1fff8c60
    49a4:	1fff8c80 	.word	0x1fff8c80

000049a8 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    49a8:	b500      	push	{lr}
    49aa:	b083      	sub	sp, #12
    49ac:	9001      	str	r0, [sp, #4]
    49ae:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    49b0:	9b01      	ldr	r3, [sp, #4]
    49b2:	2b03      	cmp	r3, #3
    49b4:	f000 8090 	beq.w	4ad8 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    49b8:	9b01      	ldr	r3, [sp, #4]
    49ba:	2b03      	cmp	r3, #3
    49bc:	f200 80d3 	bhi.w	4b66 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    49c0:	9b01      	ldr	r3, [sp, #4]
    49c2:	2b00      	cmp	r3, #0
    49c4:	d040      	beq.n	4a48 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    49c6:	9b01      	ldr	r3, [sp, #4]
    49c8:	3b01      	subs	r3, #1
    49ca:	2b01      	cmp	r3, #1
    49cc:	f200 80cb 	bhi.w	4b66 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    49d0:	9b00      	ldr	r3, [sp, #0]
    49d2:	2b00      	cmp	r3, #0
    49d4:	f040 80c9 	bne.w	4b6a <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    49d8:	4b68      	ldr	r3, [pc, #416]	; (4b7c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    49da:	2200      	movs	r2, #0
    49dc:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    49de:	4b68      	ldr	r3, [pc, #416]	; (4b80 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    49e0:	681b      	ldr	r3, [r3, #0]
    49e2:	685b      	ldr	r3, [r3, #4]
    49e4:	4a67      	ldr	r2, [pc, #412]	; (4b84 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    49e6:	6812      	ldr	r2, [r2, #0]
    49e8:	4610      	mov	r0, r2
    49ea:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    49ec:	4b66      	ldr	r3, [pc, #408]	; (4b88 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    49ee:	681b      	ldr	r3, [r3, #0]
    49f0:	681b      	ldr	r3, [r3, #0]
    49f2:	4a66      	ldr	r2, [pc, #408]	; (4b8c <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    49f4:	6812      	ldr	r2, [r2, #0]
    49f6:	4610      	mov	r0, r2
    49f8:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    49fa:	4b65      	ldr	r3, [pc, #404]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    49fc:	681b      	ldr	r3, [r3, #0]
    49fe:	681b      	ldr	r3, [r3, #0]
    4a00:	4a64      	ldr	r2, [pc, #400]	; (4b94 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    4a02:	6812      	ldr	r2, [r2, #0]
    4a04:	4610      	mov	r0, r2
    4a06:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    4a08:	4b63      	ldr	r3, [pc, #396]	; (4b98 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4a0a:	681b      	ldr	r3, [r3, #0]
    4a0c:	681b      	ldr	r3, [r3, #0]
    4a0e:	4a63      	ldr	r2, [pc, #396]	; (4b9c <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    4a10:	6812      	ldr	r2, [r2, #0]
    4a12:	4610      	mov	r0, r2
    4a14:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    4a16:	4b62      	ldr	r3, [pc, #392]	; (4ba0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4a18:	681b      	ldr	r3, [r3, #0]
    4a1a:	691b      	ldr	r3, [r3, #16]
    4a1c:	4a61      	ldr	r2, [pc, #388]	; (4ba4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4a1e:	6812      	ldr	r2, [r2, #0]
    4a20:	6812      	ldr	r2, [r2, #0]
    4a22:	4610      	mov	r0, r2
    4a24:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    4a26:	4b60      	ldr	r3, [pc, #384]	; (4ba8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a28:	681b      	ldr	r3, [r3, #0]
    4a2a:	68db      	ldr	r3, [r3, #12]
    4a2c:	4a5f      	ldr	r2, [pc, #380]	; (4bac <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4a2e:	6812      	ldr	r2, [r2, #0]
    4a30:	6812      	ldr	r2, [r2, #0]
    4a32:	4610      	mov	r0, r2
    4a34:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    4a36:	4b5e      	ldr	r3, [pc, #376]	; (4bb0 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4a38:	681b      	ldr	r3, [r3, #0]
    4a3a:	689b      	ldr	r3, [r3, #8]
    4a3c:	4a5d      	ldr	r2, [pc, #372]	; (4bb4 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4a3e:	6812      	ldr	r2, [r2, #0]
    4a40:	6812      	ldr	r2, [r2, #0]
    4a42:	4610      	mov	r0, r2
    4a44:	4798      	blx	r3
            }
        }
        break;
    4a46:	e090      	b.n	4b6a <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4a48:	9b00      	ldr	r3, [sp, #0]
    4a4a:	2b02      	cmp	r3, #2
    4a4c:	f040 808f 	bne.w	4b6e <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4a50:	4b4a      	ldr	r3, [pc, #296]	; (4b7c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4a52:	2201      	movs	r2, #1
    4a54:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4a56:	4b56      	ldr	r3, [pc, #344]	; (4bb0 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4a58:	681b      	ldr	r3, [r3, #0]
    4a5a:	685b      	ldr	r3, [r3, #4]
    4a5c:	4a55      	ldr	r2, [pc, #340]	; (4bb4 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4a5e:	6812      	ldr	r2, [r2, #0]
    4a60:	4610      	mov	r0, r2
    4a62:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4a64:	4b50      	ldr	r3, [pc, #320]	; (4ba8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a66:	681b      	ldr	r3, [r3, #0]
    4a68:	691b      	ldr	r3, [r3, #16]
    4a6a:	4a50      	ldr	r2, [pc, #320]	; (4bac <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4a6c:	6812      	ldr	r2, [r2, #0]
    4a6e:	4610      	mov	r0, r2
    4a70:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4a72:	4b4d      	ldr	r3, [pc, #308]	; (4ba8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a74:	681b      	ldr	r3, [r3, #0]
    4a76:	689b      	ldr	r3, [r3, #8]
    4a78:	4a4c      	ldr	r2, [pc, #304]	; (4bac <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4a7a:	6812      	ldr	r2, [r2, #0]
    4a7c:	4610      	mov	r0, r2
    4a7e:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4a80:	4b47      	ldr	r3, [pc, #284]	; (4ba0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4a82:	681b      	ldr	r3, [r3, #0]
    4a84:	68db      	ldr	r3, [r3, #12]
    4a86:	4a47      	ldr	r2, [pc, #284]	; (4ba4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4a88:	6812      	ldr	r2, [r2, #0]
    4a8a:	4610      	mov	r0, r2
    4a8c:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4a8e:	4b44      	ldr	r3, [pc, #272]	; (4ba0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4a90:	681b      	ldr	r3, [r3, #0]
    4a92:	689b      	ldr	r3, [r3, #8]
    4a94:	4a43      	ldr	r2, [pc, #268]	; (4ba4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4a96:	6812      	ldr	r2, [r2, #0]
    4a98:	6812      	ldr	r2, [r2, #0]
    4a9a:	4610      	mov	r0, r2
    4a9c:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    4a9e:	4b38      	ldr	r3, [pc, #224]	; (4b80 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4aa0:	681b      	ldr	r3, [r3, #0]
    4aa2:	685b      	ldr	r3, [r3, #4]
    4aa4:	4a44      	ldr	r2, [pc, #272]	; (4bb8 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    4aa6:	6812      	ldr	r2, [r2, #0]
    4aa8:	4610      	mov	r0, r2
    4aaa:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    4aac:	4b36      	ldr	r3, [pc, #216]	; (4b88 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4aae:	681b      	ldr	r3, [r3, #0]
    4ab0:	681b      	ldr	r3, [r3, #0]
    4ab2:	4a42      	ldr	r2, [pc, #264]	; (4bbc <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    4ab4:	6812      	ldr	r2, [r2, #0]
    4ab6:	4610      	mov	r0, r2
    4ab8:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    4aba:	4b35      	ldr	r3, [pc, #212]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4abc:	681b      	ldr	r3, [r3, #0]
    4abe:	681b      	ldr	r3, [r3, #0]
    4ac0:	4a3f      	ldr	r2, [pc, #252]	; (4bc0 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    4ac2:	6812      	ldr	r2, [r2, #0]
    4ac4:	4610      	mov	r0, r2
    4ac6:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    4ac8:	4b33      	ldr	r3, [pc, #204]	; (4b98 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4aca:	681b      	ldr	r3, [r3, #0]
    4acc:	681b      	ldr	r3, [r3, #0]
    4ace:	4a3d      	ldr	r2, [pc, #244]	; (4bc4 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    4ad0:	6812      	ldr	r2, [r2, #0]
    4ad2:	4610      	mov	r0, r2
    4ad4:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4ad6:	e04a      	b.n	4b6e <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4ad8:	9b00      	ldr	r3, [sp, #0]
    4ada:	2b02      	cmp	r3, #2
    4adc:	d149      	bne.n	4b72 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4ade:	4b27      	ldr	r3, [pc, #156]	; (4b7c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4ae0:	2201      	movs	r2, #1
    4ae2:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4ae4:	4b32      	ldr	r3, [pc, #200]	; (4bb0 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4ae6:	681b      	ldr	r3, [r3, #0]
    4ae8:	685b      	ldr	r3, [r3, #4]
    4aea:	4a32      	ldr	r2, [pc, #200]	; (4bb4 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4aec:	6812      	ldr	r2, [r2, #0]
    4aee:	4610      	mov	r0, r2
    4af0:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4af2:	4b2d      	ldr	r3, [pc, #180]	; (4ba8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4af4:	681b      	ldr	r3, [r3, #0]
    4af6:	691b      	ldr	r3, [r3, #16]
    4af8:	4a2c      	ldr	r2, [pc, #176]	; (4bac <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4afa:	6812      	ldr	r2, [r2, #0]
    4afc:	4610      	mov	r0, r2
    4afe:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4b00:	4b29      	ldr	r3, [pc, #164]	; (4ba8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4b02:	681b      	ldr	r3, [r3, #0]
    4b04:	689b      	ldr	r3, [r3, #8]
    4b06:	4a29      	ldr	r2, [pc, #164]	; (4bac <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4b08:	6812      	ldr	r2, [r2, #0]
    4b0a:	4610      	mov	r0, r2
    4b0c:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4b0e:	4b24      	ldr	r3, [pc, #144]	; (4ba0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4b10:	681b      	ldr	r3, [r3, #0]
    4b12:	68db      	ldr	r3, [r3, #12]
    4b14:	4a23      	ldr	r2, [pc, #140]	; (4ba4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4b16:	6812      	ldr	r2, [r2, #0]
    4b18:	4610      	mov	r0, r2
    4b1a:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4b1c:	4b20      	ldr	r3, [pc, #128]	; (4ba0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4b1e:	681b      	ldr	r3, [r3, #0]
    4b20:	689b      	ldr	r3, [r3, #8]
    4b22:	4a20      	ldr	r2, [pc, #128]	; (4ba4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4b24:	6812      	ldr	r2, [r2, #0]
    4b26:	6812      	ldr	r2, [r2, #0]
    4b28:	4610      	mov	r0, r2
    4b2a:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    4b2c:	4b26      	ldr	r3, [pc, #152]	; (4bc8 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    4b2e:	681b      	ldr	r3, [r3, #0]
    4b30:	685b      	ldr	r3, [r3, #4]
    4b32:	4a26      	ldr	r2, [pc, #152]	; (4bcc <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4b34:	6812      	ldr	r2, [r2, #0]
    4b36:	4610      	mov	r0, r2
    4b38:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    4b3a:	4b25      	ldr	r3, [pc, #148]	; (4bd0 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    4b3c:	681b      	ldr	r3, [r3, #0]
    4b3e:	681b      	ldr	r3, [r3, #0]
    4b40:	4a24      	ldr	r2, [pc, #144]	; (4bd4 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    4b42:	6812      	ldr	r2, [r2, #0]
    4b44:	4610      	mov	r0, r2
    4b46:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    4b48:	4b23      	ldr	r3, [pc, #140]	; (4bd8 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    4b4a:	681b      	ldr	r3, [r3, #0]
    4b4c:	681b      	ldr	r3, [r3, #0]
    4b4e:	4a23      	ldr	r2, [pc, #140]	; (4bdc <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    4b50:	6812      	ldr	r2, [r2, #0]
    4b52:	4610      	mov	r0, r2
    4b54:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    4b56:	4b22      	ldr	r3, [pc, #136]	; (4be0 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    4b58:	681b      	ldr	r3, [r3, #0]
    4b5a:	681b      	ldr	r3, [r3, #0]
    4b5c:	4a21      	ldr	r2, [pc, #132]	; (4be4 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    4b5e:	6812      	ldr	r2, [r2, #0]
    4b60:	4610      	mov	r0, r2
    4b62:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4b64:	e005      	b.n	4b72 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    4b66:	bf00      	nop
    4b68:	e004      	b.n	4b74 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4b6a:	bf00      	nop
    4b6c:	e002      	b.n	4b74 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4b6e:	bf00      	nop
    4b70:	e000      	b.n	4b74 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4b72:	bf00      	nop
    }

}
    4b74:	bf00      	nop
    4b76:	b003      	add	sp, #12
    4b78:	f85d fb04 	ldr.w	pc, [sp], #4
    4b7c:	1fff8b19 	.word	0x1fff8b19
    4b80:	1fff8c28 	.word	0x1fff8c28
    4b84:	1fff8c48 	.word	0x1fff8c48
    4b88:	1fff8c2c 	.word	0x1fff8c2c
    4b8c:	1fff8c50 	.word	0x1fff8c50
    4b90:	1fff8c30 	.word	0x1fff8c30
    4b94:	1fff8c58 	.word	0x1fff8c58
    4b98:	1fff8c34 	.word	0x1fff8c34
    4b9c:	1fff8c60 	.word	0x1fff8c60
    4ba0:	1fff8c1c 	.word	0x1fff8c1c
    4ba4:	1fff8c40 	.word	0x1fff8c40
    4ba8:	1fff8c20 	.word	0x1fff8c20
    4bac:	1fff8c3c 	.word	0x1fff8c3c
    4bb0:	1fff8c24 	.word	0x1fff8c24
    4bb4:	1fff8c38 	.word	0x1fff8c38
    4bb8:	1fff8c44 	.word	0x1fff8c44
    4bbc:	1fff8c4c 	.word	0x1fff8c4c
    4bc0:	1fff8c54 	.word	0x1fff8c54
    4bc4:	1fff8c5c 	.word	0x1fff8c5c
    4bc8:	1fff8c64 	.word	0x1fff8c64
    4bcc:	1fff8c74 	.word	0x1fff8c74
    4bd0:	1fff8c68 	.word	0x1fff8c68
    4bd4:	1fff8c78 	.word	0x1fff8c78
    4bd8:	1fff8c6c 	.word	0x1fff8c6c
    4bdc:	1fff8c7c 	.word	0x1fff8c7c
    4be0:	1fff8c70 	.word	0x1fff8c70
    4be4:	1fff8c80 	.word	0x1fff8c80

00004be8 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    4be8:	b500      	push	{lr}
    4bea:	b083      	sub	sp, #12
    4bec:	9001      	str	r0, [sp, #4]
    4bee:	9100      	str	r1, [sp, #0]
    switch(Command)
    4bf0:	9b00      	ldr	r3, [sp, #0]
    4bf2:	2b04      	cmp	r3, #4
    4bf4:	d010      	beq.n	4c18 <Clock_Ip_Command+0x30>
    4bf6:	9b00      	ldr	r3, [sp, #0]
    4bf8:	2b04      	cmp	r3, #4
    4bfa:	d811      	bhi.n	4c20 <Clock_Ip_Command+0x38>
    4bfc:	9b00      	ldr	r3, [sp, #0]
    4bfe:	2b01      	cmp	r3, #1
    4c00:	d006      	beq.n	4c10 <Clock_Ip_Command+0x28>
    4c02:	9b00      	ldr	r3, [sp, #0]
    4c04:	2b02      	cmp	r3, #2
    4c06:	d10b      	bne.n	4c20 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    4c08:	9801      	ldr	r0, [sp, #4]
    4c0a:	f7ff fdb3 	bl	4774 <Clock_Ip_ClockInitializeObjects>
            break;
    4c0e:	e008      	b.n	4c22 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    4c10:	9801      	ldr	r0, [sp, #4]
    4c12:	f7ff f9db 	bl	3fcc <Clock_Ip_SpecificPlatformInitClock>
            break;
    4c16:	e004      	b.n	4c22 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    4c18:	9801      	ldr	r0, [sp, #4]
    4c1a:	f7ff f8ed 	bl	3df8 <DisableSafeClock>
            break;
    4c1e:	e000      	b.n	4c22 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    4c20:	bf00      	nop
    }
}
    4c22:	bf00      	nop
    4c24:	b003      	add	sp, #12
    4c26:	f85d fb04 	ldr.w	pc, [sp], #4
    4c2a:	bf00      	nop

00004c2c <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    4c2c:	b500      	push	{lr}
    4c2e:	b085      	sub	sp, #20
    4c30:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    4c32:	4a20      	ldr	r2, [pc, #128]	; (4cb4 <Mcu_Init+0x88>)
    4c34:	9b01      	ldr	r3, [sp, #4]
    4c36:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4c38:	2300      	movs	r3, #0
    4c3a:	9303      	str	r3, [sp, #12]
    4c3c:	e010      	b.n	4c60 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    4c3e:	4b1d      	ldr	r3, [pc, #116]	; (4cb4 <Mcu_Init+0x88>)
    4c40:	681b      	ldr	r3, [r3, #0]
    4c42:	6919      	ldr	r1, [r3, #16]
    4c44:	9a03      	ldr	r2, [sp, #12]
    4c46:	4613      	mov	r3, r2
    4c48:	005b      	lsls	r3, r3, #1
    4c4a:	4413      	add	r3, r2
    4c4c:	009b      	lsls	r3, r3, #2
    4c4e:	440b      	add	r3, r1
    4c50:	681b      	ldr	r3, [r3, #0]
    4c52:	9a03      	ldr	r2, [sp, #12]
    4c54:	b2d1      	uxtb	r1, r2
    4c56:	4a18      	ldr	r2, [pc, #96]	; (4cb8 <Mcu_Init+0x8c>)
    4c58:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4c5a:	9b03      	ldr	r3, [sp, #12]
    4c5c:	3301      	adds	r3, #1
    4c5e:	9303      	str	r3, [sp, #12]
    4c60:	4b14      	ldr	r3, [pc, #80]	; (4cb4 <Mcu_Init+0x88>)
    4c62:	681b      	ldr	r3, [r3, #0]
    4c64:	689b      	ldr	r3, [r3, #8]
    4c66:	9a03      	ldr	r2, [sp, #12]
    4c68:	429a      	cmp	r2, r3
    4c6a:	d3e8      	bcc.n	4c3e <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4c6c:	2300      	movs	r3, #0
    4c6e:	9303      	str	r3, [sp, #12]
    4c70:	e010      	b.n	4c94 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    4c72:	4b10      	ldr	r3, [pc, #64]	; (4cb4 <Mcu_Init+0x88>)
    4c74:	681b      	ldr	r3, [r3, #0]
    4c76:	6959      	ldr	r1, [r3, #20]
    4c78:	9a03      	ldr	r2, [sp, #12]
    4c7a:	4613      	mov	r3, r2
    4c7c:	01db      	lsls	r3, r3, #7
    4c7e:	1a9b      	subs	r3, r3, r2
    4c80:	00db      	lsls	r3, r3, #3
    4c82:	440b      	add	r3, r1
    4c84:	681b      	ldr	r3, [r3, #0]
    4c86:	9a03      	ldr	r2, [sp, #12]
    4c88:	b2d1      	uxtb	r1, r2
    4c8a:	4a0c      	ldr	r2, [pc, #48]	; (4cbc <Mcu_Init+0x90>)
    4c8c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4c8e:	9b03      	ldr	r3, [sp, #12]
    4c90:	3301      	adds	r3, #1
    4c92:	9303      	str	r3, [sp, #12]
    4c94:	4b07      	ldr	r3, [pc, #28]	; (4cb4 <Mcu_Init+0x88>)
    4c96:	681b      	ldr	r3, [r3, #0]
    4c98:	68db      	ldr	r3, [r3, #12]
    4c9a:	9a03      	ldr	r2, [sp, #12]
    4c9c:	429a      	cmp	r2, r3
    4c9e:	d3e8      	bcc.n	4c72 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    4ca0:	4b04      	ldr	r3, [pc, #16]	; (4cb4 <Mcu_Init+0x88>)
    4ca2:	681b      	ldr	r3, [r3, #0]
    4ca4:	699b      	ldr	r3, [r3, #24]
    4ca6:	4618      	mov	r0, r3
    4ca8:	f000 f88a 	bl	4dc0 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4cac:	bf00      	nop
    4cae:	b005      	add	sp, #20
    4cb0:	f85d fb04 	ldr.w	pc, [sp], #4
    4cb4:	1fff8d5c 	.word	0x1fff8d5c
    4cb8:	1fff8d58 	.word	0x1fff8d58
    4cbc:	1fff8d54 	.word	0x1fff8d54

00004cc0 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    4cc0:	b084      	sub	sp, #16
    4cc2:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    4cc4:	2301      	movs	r3, #1
    4cc6:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    4cca:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    4cce:	4618      	mov	r0, r3
    4cd0:	b004      	add	sp, #16
    4cd2:	4770      	bx	lr

00004cd4 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    4cd4:	b500      	push	{lr}
    4cd6:	b085      	sub	sp, #20
    4cd8:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    4cda:	4a0e      	ldr	r2, [pc, #56]	; (4d14 <Mcu_InitClock+0x40>)
    4cdc:	9b01      	ldr	r3, [sp, #4]
    4cde:	4413      	add	r3, r2
    4ce0:	781b      	ldrb	r3, [r3, #0]
    4ce2:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    4ce6:	4b0c      	ldr	r3, [pc, #48]	; (4d18 <Mcu_InitClock+0x44>)
    4ce8:	681b      	ldr	r3, [r3, #0]
    4cea:	6959      	ldr	r1, [r3, #20]
    4cec:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4cf0:	4613      	mov	r3, r2
    4cf2:	01db      	lsls	r3, r3, #7
    4cf4:	1a9b      	subs	r3, r3, r2
    4cf6:	00db      	lsls	r3, r3, #3
    4cf8:	440b      	add	r3, r1
    4cfa:	4618      	mov	r0, r3
    4cfc:	f000 f86a 	bl	4dd4 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    4d00:	2300      	movs	r3, #0
    4d02:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    4d06:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    4d0a:	4618      	mov	r0, r3
    4d0c:	b005      	add	sp, #20
    4d0e:	f85d fb04 	ldr.w	pc, [sp], #4
    4d12:	bf00      	nop
    4d14:	1fff8d54 	.word	0x1fff8d54
    4d18:	1fff8d5c 	.word	0x1fff8d5c

00004d1c <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    4d1c:	b500      	push	{lr}
    4d1e:	b085      	sub	sp, #20
    4d20:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    4d22:	4a0d      	ldr	r2, [pc, #52]	; (4d58 <Mcu_SetMode+0x3c>)
    4d24:	9b01      	ldr	r3, [sp, #4]
    4d26:	4413      	add	r3, r2
    4d28:	781b      	ldrb	r3, [r3, #0]
    4d2a:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    4d2e:	f005 fb7b 	bl	a428 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    4d32:	4b0a      	ldr	r3, [pc, #40]	; (4d5c <Mcu_SetMode+0x40>)
    4d34:	681b      	ldr	r3, [r3, #0]
    4d36:	6919      	ldr	r1, [r3, #16]
    4d38:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4d3c:	4613      	mov	r3, r2
    4d3e:	005b      	lsls	r3, r3, #1
    4d40:	4413      	add	r3, r2
    4d42:	009b      	lsls	r3, r3, #2
    4d44:	440b      	add	r3, r1
    4d46:	4618      	mov	r0, r3
    4d48:	f000 f84e 	bl	4de8 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    4d4c:	f005 fb98 	bl	a480 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4d50:	bf00      	nop
    4d52:	b005      	add	sp, #20
    4d54:	f85d fb04 	ldr.w	pc, [sp], #4
    4d58:	1fff8d58 	.word	0x1fff8d58
    4d5c:	1fff8d5c 	.word	0x1fff8d5c

00004d60 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    4d60:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    4d62:	2302      	movs	r3, #2
    4d64:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    4d66:	9b01      	ldr	r3, [sp, #4]
}
    4d68:	4618      	mov	r0, r3
    4d6a:	b002      	add	sp, #8
    4d6c:	4770      	bx	lr

00004d6e <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    4d6e:	b500      	push	{lr}
    4d70:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    4d72:	f000 f843 	bl	4dfc <Mcu_Ipw_GetResetReason>
    4d76:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    4d78:	9b01      	ldr	r3, [sp, #4]
}
    4d7a:	4618      	mov	r0, r3
    4d7c:	b003      	add	sp, #12
    4d7e:	f85d fb04 	ldr.w	pc, [sp], #4

00004d82 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    4d82:	b500      	push	{lr}
    4d84:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    4d86:	f000 f83f 	bl	4e08 <Mcu_Ipw_GetResetRawValue>
    4d8a:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    4d8c:	9b01      	ldr	r3, [sp, #4]
}
    4d8e:	4618      	mov	r0, r3
    4d90:	b003      	add	sp, #12
    4d92:	f85d fb04 	ldr.w	pc, [sp], #4

00004d96 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4d96:	b500      	push	{lr}
    4d98:	b083      	sub	sp, #12
    4d9a:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    4d9c:	9801      	ldr	r0, [sp, #4]
    4d9e:	f000 f839 	bl	4e14 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    4da2:	bf00      	nop
    4da4:	b003      	add	sp, #12
    4da6:	f85d fb04 	ldr.w	pc, [sp], #4

00004daa <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    4daa:	b082      	sub	sp, #8
    4dac:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    4dae:	4b03      	ldr	r3, [pc, #12]	; (4dbc <Mcu_ClkSrcFailureNotification+0x12>)
    4db0:	681b      	ldr	r3, [r3, #0]
    4db2:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    4db4:	bf00      	nop
    4db6:	b002      	add	sp, #8
    4db8:	4770      	bx	lr
    4dba:	bf00      	nop
    4dbc:	1fff8d5c 	.word	0x1fff8d5c

00004dc0 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    4dc0:	b500      	push	{lr}
    4dc2:	b083      	sub	sp, #12
    4dc4:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    4dc6:	9801      	ldr	r0, [sp, #4]
    4dc8:	f000 f882 	bl	4ed0 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    4dcc:	bf00      	nop
    4dce:	b003      	add	sp, #12
    4dd0:	f85d fb04 	ldr.w	pc, [sp], #4

00004dd4 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    4dd4:	b500      	push	{lr}
    4dd6:	b083      	sub	sp, #12
    4dd8:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    4dda:	9801      	ldr	r0, [sp, #4]
    4ddc:	f7fc fc6a 	bl	16b4 <Clock_Ip_InitClock>
}
    4de0:	bf00      	nop
    4de2:	b003      	add	sp, #12
    4de4:	f85d fb04 	ldr.w	pc, [sp], #4

00004de8 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    4de8:	b500      	push	{lr}
    4dea:	b083      	sub	sp, #12
    4dec:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    4dee:	9801      	ldr	r0, [sp, #4]
    4df0:	f000 f820 	bl	4e34 <Power_Ip_SetMode>
}
    4df4:	bf00      	nop
    4df6:	b003      	add	sp, #12
    4df8:	f85d fb04 	ldr.w	pc, [sp], #4

00004dfc <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    4dfc:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    4dfe:	f000 f84f 	bl	4ea0 <Power_Ip_GetResetReason>
    4e02:	4603      	mov	r3, r0
}
    4e04:	4618      	mov	r0, r3
    4e06:	bd08      	pop	{r3, pc}

00004e08 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    4e08:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    4e0a:	f000 f857 	bl	4ebc <Power_Ip_GetResetRawValue>
    4e0e:	4603      	mov	r3, r0
}
    4e10:	4618      	mov	r0, r3
    4e12:	bd08      	pop	{r3, pc}

00004e14 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4e14:	b500      	push	{lr}
    4e16:	b083      	sub	sp, #12
    4e18:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    4e1a:	9b01      	ldr	r3, [sp, #4]
    4e1c:	2b00      	cmp	r3, #0
    4e1e:	d102      	bne.n	4e26 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    4e20:	f000 f86c 	bl	4efc <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    4e24:	e001      	b.n	4e2a <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    4e26:	f000 f86e 	bl	4f06 <Power_Ip_EnableSleepOnExit>
}
    4e2a:	bf00      	nop
    4e2c:	b003      	add	sp, #12
    4e2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00004e34 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4e34:	b500      	push	{lr}
    4e36:	b085      	sub	sp, #20
    4e38:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    4e3a:	9b01      	ldr	r3, [sp, #4]
    4e3c:	685b      	ldr	r3, [r3, #4]
    4e3e:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    4e40:	9802      	ldr	r0, [sp, #8]
    4e42:	f000 f9f5 	bl	5230 <Power_Ip_SMC_ModeCheckEntry>
    4e46:	4603      	mov	r3, r0
    4e48:	2b00      	cmp	r3, #0
    4e4a:	d002      	beq.n	4e52 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e4c:	2301      	movs	r3, #1
    4e4e:	9303      	str	r3, [sp, #12]
    4e50:	e003      	b.n	4e5a <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    4e52:	9801      	ldr	r0, [sp, #4]
    4e54:	f000 fa1e 	bl	5294 <Power_Ip_SMC_ModeConfig>
    4e58:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    4e5a:	9b03      	ldr	r3, [sp, #12]
    4e5c:	2b01      	cmp	r3, #1
    4e5e:	d103      	bne.n	4e68 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4e60:	21ff      	movs	r1, #255	; 0xff
    4e62:	2003      	movs	r0, #3
    4e64:	f000 f8f4 	bl	5050 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    4e68:	bf00      	nop
    4e6a:	b005      	add	sp, #20
    4e6c:	f85d fb04 	ldr.w	pc, [sp], #4

00004e70 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    4e70:	b084      	sub	sp, #16
    4e72:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    4e74:	230c      	movs	r3, #12
    4e76:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    4e78:	4a08      	ldr	r2, [pc, #32]	; (4e9c <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4e7a:	9b01      	ldr	r3, [sp, #4]
    4e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4e80:	2b0e      	cmp	r3, #14
    4e82:	d805      	bhi.n	4e90 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    4e84:	4a05      	ldr	r2, [pc, #20]	; (4e9c <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4e86:	9b01      	ldr	r3, [sp, #4]
    4e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4e8c:	9303      	str	r3, [sp, #12]
    4e8e:	e001      	b.n	4e94 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    4e90:	230c      	movs	r3, #12
    4e92:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    4e94:	9b03      	ldr	r3, [sp, #12]
}
    4e96:	4618      	mov	r0, r3
    4e98:	b004      	add	sp, #16
    4e9a:	4770      	bx	lr
    4e9c:	0000c0b4 	.word	0x0000c0b4

00004ea0 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    4ea0:	b500      	push	{lr}
    4ea2:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    4ea4:	f000 f940 	bl	5128 <Power_Ip_RCM_GetResetReason>
    4ea8:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    4eaa:	9801      	ldr	r0, [sp, #4]
    4eac:	f7ff ffe0 	bl	4e70 <Power_Ip_ConvertIntergeToResetType>
    4eb0:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    4eb2:	9b00      	ldr	r3, [sp, #0]
}
    4eb4:	4618      	mov	r0, r3
    4eb6:	b003      	add	sp, #12
    4eb8:	f85d fb04 	ldr.w	pc, [sp], #4

00004ebc <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    4ebc:	b500      	push	{lr}
    4ebe:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    4ec0:	f000 f98a 	bl	51d8 <Power_Ip_RCM_GetResetRawValue>
    4ec4:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    4ec6:	9b01      	ldr	r3, [sp, #4]
}
    4ec8:	4618      	mov	r0, r3
    4eca:	b003      	add	sp, #12
    4ecc:	f85d fb04 	ldr.w	pc, [sp], #4

00004ed0 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    4ed0:	b500      	push	{lr}
    4ed2:	b083      	sub	sp, #12
    4ed4:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    4ed6:	9b01      	ldr	r3, [sp, #4]
    4ed8:	681b      	ldr	r3, [r3, #0]
    4eda:	4618      	mov	r0, r3
    4edc:	f000 f90e 	bl	50fc <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    4ee0:	9b01      	ldr	r3, [sp, #4]
    4ee2:	685b      	ldr	r3, [r3, #4]
    4ee4:	4618      	mov	r0, r3
    4ee6:	f000 f86d 	bl	4fc4 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    4eea:	9b01      	ldr	r3, [sp, #4]
    4eec:	689b      	ldr	r3, [r3, #8]
    4eee:	4618      	mov	r0, r3
    4ef0:	f000 f990 	bl	5214 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    4ef4:	bf00      	nop
    4ef6:	b003      	add	sp, #12
    4ef8:	f85d fb04 	ldr.w	pc, [sp], #4

00004efc <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    4efc:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    4efe:	f000 f811 	bl	4f24 <Power_Ip_CM4_DisableSleepOnExit>
}
    4f02:	bf00      	nop
    4f04:	bd08      	pop	{r3, pc}

00004f06 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    4f06:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    4f08:	f000 f820 	bl	4f4c <Power_Ip_CM4_EnableSleepOnExit>
}
    4f0c:	bf00      	nop
    4f0e:	bd08      	pop	{r3, pc}

00004f10 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    4f10:	b082      	sub	sp, #8
    4f12:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    4f14:	4a02      	ldr	r2, [pc, #8]	; (4f20 <Power_Ip_InstallNotificationsCallback+0x10>)
    4f16:	9b01      	ldr	r3, [sp, #4]
    4f18:	6013      	str	r3, [r2, #0]
}
    4f1a:	bf00      	nop
    4f1c:	b002      	add	sp, #8
    4f1e:	4770      	bx	lr
    4f20:	1fff8b1c 	.word	0x1fff8b1c

00004f24 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    4f24:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f26:	2300      	movs	r3, #0
    4f28:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f2a:	4b07      	ldr	r3, [pc, #28]	; (4f48 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4f2c:	681b      	ldr	r3, [r3, #0]
    4f2e:	685b      	ldr	r3, [r3, #4]
    4f30:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    4f32:	9b01      	ldr	r3, [sp, #4]
    4f34:	f023 0302 	bic.w	r3, r3, #2
    4f38:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f3a:	4b03      	ldr	r3, [pc, #12]	; (4f48 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4f3c:	681b      	ldr	r3, [r3, #0]
    4f3e:	9a01      	ldr	r2, [sp, #4]
    4f40:	605a      	str	r2, [r3, #4]
}
    4f42:	bf00      	nop
    4f44:	b002      	add	sp, #8
    4f46:	4770      	bx	lr
    4f48:	1fff8b20 	.word	0x1fff8b20

00004f4c <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    4f4c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f4e:	2300      	movs	r3, #0
    4f50:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f52:	4b07      	ldr	r3, [pc, #28]	; (4f70 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4f54:	681b      	ldr	r3, [r3, #0]
    4f56:	685b      	ldr	r3, [r3, #4]
    4f58:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    4f5a:	9b01      	ldr	r3, [sp, #4]
    4f5c:	f043 0302 	orr.w	r3, r3, #2
    4f60:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f62:	4b03      	ldr	r3, [pc, #12]	; (4f70 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4f64:	681b      	ldr	r3, [r3, #0]
    4f66:	9a01      	ldr	r2, [sp, #4]
    4f68:	605a      	str	r2, [r3, #4]
}
    4f6a:	bf00      	nop
    4f6c:	b002      	add	sp, #8
    4f6e:	4770      	bx	lr
    4f70:	1fff8b20 	.word	0x1fff8b20

00004f74 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    4f74:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f76:	2300      	movs	r3, #0
    4f78:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f7a:	4b07      	ldr	r3, [pc, #28]	; (4f98 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4f7c:	681b      	ldr	r3, [r3, #0]
    4f7e:	685b      	ldr	r3, [r3, #4]
    4f80:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    4f82:	9b01      	ldr	r3, [sp, #4]
    4f84:	f043 0304 	orr.w	r3, r3, #4
    4f88:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f8a:	4b03      	ldr	r3, [pc, #12]	; (4f98 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4f8c:	681b      	ldr	r3, [r3, #0]
    4f8e:	9a01      	ldr	r2, [sp, #4]
    4f90:	605a      	str	r2, [r3, #4]
}
    4f92:	bf00      	nop
    4f94:	b002      	add	sp, #8
    4f96:	4770      	bx	lr
    4f98:	1fff8b20 	.word	0x1fff8b20

00004f9c <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    4f9c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f9e:	2300      	movs	r3, #0
    4fa0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4fa2:	4b07      	ldr	r3, [pc, #28]	; (4fc0 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4fa4:	681b      	ldr	r3, [r3, #0]
    4fa6:	685b      	ldr	r3, [r3, #4]
    4fa8:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    4faa:	9b01      	ldr	r3, [sp, #4]
    4fac:	f023 0304 	bic.w	r3, r3, #4
    4fb0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4fb2:	4b03      	ldr	r3, [pc, #12]	; (4fc0 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4fb4:	681b      	ldr	r3, [r3, #0]
    4fb6:	9a01      	ldr	r2, [sp, #4]
    4fb8:	605a      	str	r2, [r3, #4]
}
    4fba:	bf00      	nop
    4fbc:	b002      	add	sp, #8
    4fbe:	4770      	bx	lr
    4fc0:	1fff8b20 	.word	0x1fff8b20

00004fc4 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    4fc4:	b084      	sub	sp, #16
    4fc6:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    4fc8:	4b20      	ldr	r3, [pc, #128]	; (504c <Power_Ip_PMC_PowerInit+0x88>)
    4fca:	781b      	ldrb	r3, [r3, #0]
    4fcc:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    4fd0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fd4:	f003 030f 	and.w	r3, r3, #15
    4fd8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    4fdc:	9b01      	ldr	r3, [sp, #4]
    4fde:	781a      	ldrb	r2, [r3, #0]
    4fe0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fe4:	4313      	orrs	r3, r2
    4fe6:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    4fea:	4a18      	ldr	r2, [pc, #96]	; (504c <Power_Ip_PMC_PowerInit+0x88>)
    4fec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4ff0:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    4ff2:	4b16      	ldr	r3, [pc, #88]	; (504c <Power_Ip_PMC_PowerInit+0x88>)
    4ff4:	785b      	ldrb	r3, [r3, #1]
    4ff6:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    4ffa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4ffe:	f003 031f 	and.w	r3, r3, #31
    5002:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5006:	9b01      	ldr	r3, [sp, #4]
    5008:	785a      	ldrb	r2, [r3, #1]
    500a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    500e:	4313      	orrs	r3, r2
    5010:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5014:	4a0d      	ldr	r2, [pc, #52]	; (504c <Power_Ip_PMC_PowerInit+0x88>)
    5016:	f89d 300f 	ldrb.w	r3, [sp, #15]
    501a:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    501c:	4b0b      	ldr	r3, [pc, #44]	; (504c <Power_Ip_PMC_PowerInit+0x88>)
    501e:	789b      	ldrb	r3, [r3, #2]
    5020:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5024:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5028:	f003 0338 	and.w	r3, r3, #56	; 0x38
    502c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5030:	9b01      	ldr	r3, [sp, #4]
    5032:	789a      	ldrb	r2, [r3, #2]
    5034:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5038:	4313      	orrs	r3, r2
    503a:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    503e:	4a03      	ldr	r2, [pc, #12]	; (504c <Power_Ip_PMC_PowerInit+0x88>)
    5040:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5044:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5046:	bf00      	nop
    5048:	b004      	add	sp, #16
    504a:	4770      	bx	lr
    504c:	4007d000 	.word	0x4007d000

00005050 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5050:	b500      	push	{lr}
    5052:	b083      	sub	sp, #12
    5054:	9001      	str	r0, [sp, #4]
    5056:	460b      	mov	r3, r1
    5058:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    505c:	4b05      	ldr	r3, [pc, #20]	; (5074 <Power_Ip_ReportPowerErrors+0x24>)
    505e:	681b      	ldr	r3, [r3, #0]
    5060:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5064:	4611      	mov	r1, r2
    5066:	9801      	ldr	r0, [sp, #4]
    5068:	4798      	blx	r3
}
    506a:	bf00      	nop
    506c:	b003      	add	sp, #12
    506e:	f85d fb04 	ldr.w	pc, [sp], #4
    5072:	bf00      	nop
    5074:	1fff8b1c 	.word	0x1fff8b1c

00005078 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5078:	b082      	sub	sp, #8
    507a:	9001      	str	r0, [sp, #4]
    507c:	460b      	mov	r3, r1
    507e:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5082:	bf00      	nop
    5084:	b002      	add	sp, #8
    5086:	4770      	bx	lr

00005088 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5088:	b500      	push	{lr}
    508a:	b085      	sub	sp, #20
    508c:	9003      	str	r0, [sp, #12]
    508e:	9102      	str	r1, [sp, #8]
    5090:	9201      	str	r2, [sp, #4]
    5092:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5094:	2000      	movs	r0, #0
    5096:	f7fc f83d 	bl	1114 <OsIf_GetCounter>
    509a:	4602      	mov	r2, r0
    509c:	9b03      	ldr	r3, [sp, #12]
    509e:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    50a0:	9b02      	ldr	r3, [sp, #8]
    50a2:	2200      	movs	r2, #0
    50a4:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    50a6:	2100      	movs	r1, #0
    50a8:	9800      	ldr	r0, [sp, #0]
    50aa:	f7fc f87f 	bl	11ac <OsIf_MicrosToTicks>
    50ae:	4602      	mov	r2, r0
    50b0:	9b01      	ldr	r3, [sp, #4]
    50b2:	601a      	str	r2, [r3, #0]
}
    50b4:	bf00      	nop
    50b6:	b005      	add	sp, #20
    50b8:	f85d fb04 	ldr.w	pc, [sp], #4

000050bc <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    50bc:	b500      	push	{lr}
    50be:	b087      	sub	sp, #28
    50c0:	9003      	str	r0, [sp, #12]
    50c2:	9102      	str	r1, [sp, #8]
    50c4:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    50c6:	2300      	movs	r3, #0
    50c8:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    50cc:	2100      	movs	r1, #0
    50ce:	9803      	ldr	r0, [sp, #12]
    50d0:	f7fc f839 	bl	1146 <OsIf_GetElapsed>
    50d4:	4602      	mov	r2, r0
    50d6:	9b02      	ldr	r3, [sp, #8]
    50d8:	681b      	ldr	r3, [r3, #0]
    50da:	441a      	add	r2, r3
    50dc:	9b02      	ldr	r3, [sp, #8]
    50de:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    50e0:	9b02      	ldr	r3, [sp, #8]
    50e2:	681b      	ldr	r3, [r3, #0]
    50e4:	9a01      	ldr	r2, [sp, #4]
    50e6:	429a      	cmp	r2, r3
    50e8:	d802      	bhi.n	50f0 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    50ea:	2301      	movs	r3, #1
    50ec:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    50f0:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    50f4:	4618      	mov	r0, r3
    50f6:	b007      	add	sp, #28
    50f8:	f85d fb04 	ldr.w	pc, [sp], #4

000050fc <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    50fc:	b082      	sub	sp, #8
    50fe:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5100:	9b01      	ldr	r3, [sp, #4]
    5102:	681a      	ldr	r2, [r3, #0]
    5104:	4907      	ldr	r1, [pc, #28]	; (5124 <Power_Ip_RCM_ResetInit+0x28>)
    5106:	f641 7307 	movw	r3, #7943	; 0x1f07
    510a:	4013      	ands	r3, r2
    510c:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    510e:	9b01      	ldr	r3, [sp, #4]
    5110:	685a      	ldr	r2, [r3, #4]
    5112:	4904      	ldr	r1, [pc, #16]	; (5124 <Power_Ip_RCM_ResetInit+0x28>)
    5114:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5118:	4013      	ands	r3, r2
    511a:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    511c:	bf00      	nop
    511e:	b002      	add	sp, #8
    5120:	4770      	bx	lr
    5122:	bf00      	nop
    5124:	4007f000 	.word	0x4007f000

00005128 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5128:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    512a:	230c      	movs	r3, #12
    512c:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    512e:	2300      	movs	r3, #0
    5130:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5132:	2300      	movs	r3, #0
    5134:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5136:	2300      	movs	r3, #0
    5138:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    513a:	4b25      	ldr	r3, [pc, #148]	; (51d0 <Power_Ip_RCM_GetResetReason+0xa8>)
    513c:	699a      	ldr	r2, [r3, #24]
    513e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5142:	4013      	ands	r3, r2
    5144:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5146:	9b03      	ldr	r3, [sp, #12]
    5148:	2b00      	cmp	r3, #0
    514a:	d008      	beq.n	515e <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    514c:	4920      	ldr	r1, [pc, #128]	; (51d0 <Power_Ip_RCM_GetResetReason+0xa8>)
    514e:	9a03      	ldr	r2, [sp, #12]
    5150:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5154:	4013      	ands	r3, r2
    5156:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5158:	4a1e      	ldr	r2, [pc, #120]	; (51d4 <Power_Ip_RCM_GetResetReason+0xac>)
    515a:	9b03      	ldr	r3, [sp, #12]
    515c:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    515e:	4b1d      	ldr	r3, [pc, #116]	; (51d4 <Power_Ip_RCM_GetResetReason+0xac>)
    5160:	681b      	ldr	r3, [r3, #0]
    5162:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5164:	9a02      	ldr	r2, [sp, #8]
    5166:	f642 73ee 	movw	r3, #12270	; 0x2fee
    516a:	4013      	ands	r3, r2
    516c:	2b82      	cmp	r3, #130	; 0x82
    516e:	d102      	bne.n	5176 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5170:	2305      	movs	r3, #5
    5172:	9307      	str	r3, [sp, #28]
    5174:	e027      	b.n	51c6 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5176:	2300      	movs	r3, #0
    5178:	9306      	str	r3, [sp, #24]
    517a:	e021      	b.n	51c0 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    517c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5180:	9b06      	ldr	r3, [sp, #24]
    5182:	fa22 f303 	lsr.w	r3, r2, r3
    5186:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5188:	9a01      	ldr	r2, [sp, #4]
    518a:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    518e:	4013      	ands	r3, r2
    5190:	2b00      	cmp	r3, #0
    5192:	d012      	beq.n	51ba <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5194:	9a01      	ldr	r2, [sp, #4]
    5196:	9b02      	ldr	r3, [sp, #8]
    5198:	4013      	ands	r3, r2
    519a:	2b00      	cmp	r3, #0
    519c:	d00a      	beq.n	51b4 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    519e:	9b05      	ldr	r3, [sp, #20]
    51a0:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    51a2:	9b04      	ldr	r3, [sp, #16]
    51a4:	3301      	adds	r3, #1
    51a6:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    51a8:	9b04      	ldr	r3, [sp, #16]
    51aa:	2b01      	cmp	r3, #1
    51ac:	d902      	bls.n	51b4 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    51ae:	230d      	movs	r3, #13
    51b0:	9307      	str	r3, [sp, #28]
                        break;
    51b2:	e008      	b.n	51c6 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    51b4:	9b05      	ldr	r3, [sp, #20]
    51b6:	3301      	adds	r3, #1
    51b8:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    51ba:	9b06      	ldr	r3, [sp, #24]
    51bc:	3301      	adds	r3, #1
    51be:	9306      	str	r3, [sp, #24]
    51c0:	9b06      	ldr	r3, [sp, #24]
    51c2:	2b1f      	cmp	r3, #31
    51c4:	d9da      	bls.n	517c <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    51c6:	9b07      	ldr	r3, [sp, #28]
}
    51c8:	4618      	mov	r0, r3
    51ca:	b008      	add	sp, #32
    51cc:	4770      	bx	lr
    51ce:	bf00      	nop
    51d0:	4007f000 	.word	0x4007f000
    51d4:	1fff8d60 	.word	0x1fff8d60

000051d8 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    51d8:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    51da:	4b0c      	ldr	r3, [pc, #48]	; (520c <Power_Ip_RCM_GetResetRawValue+0x34>)
    51dc:	699a      	ldr	r2, [r3, #24]
    51de:	f642 73ee 	movw	r3, #12270	; 0x2fee
    51e2:	4013      	ands	r3, r2
    51e4:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    51e6:	9b01      	ldr	r3, [sp, #4]
    51e8:	2b00      	cmp	r3, #0
    51ea:	d008      	beq.n	51fe <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    51ec:	4907      	ldr	r1, [pc, #28]	; (520c <Power_Ip_RCM_GetResetRawValue+0x34>)
    51ee:	9a01      	ldr	r2, [sp, #4]
    51f0:	f642 73ee 	movw	r3, #12270	; 0x2fee
    51f4:	4013      	ands	r3, r2
    51f6:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    51f8:	4a05      	ldr	r2, [pc, #20]	; (5210 <Power_Ip_RCM_GetResetRawValue+0x38>)
    51fa:	9b01      	ldr	r3, [sp, #4]
    51fc:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    51fe:	4b04      	ldr	r3, [pc, #16]	; (5210 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5200:	681b      	ldr	r3, [r3, #0]
    5202:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5204:	9b00      	ldr	r3, [sp, #0]
}
    5206:	4618      	mov	r0, r3
    5208:	b002      	add	sp, #8
    520a:	4770      	bx	lr
    520c:	4007f000 	.word	0x4007f000
    5210:	1fff8d60 	.word	0x1fff8d60

00005214 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5214:	b082      	sub	sp, #8
    5216:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5218:	9b01      	ldr	r3, [sp, #4]
    521a:	681b      	ldr	r3, [r3, #0]
    521c:	4a03      	ldr	r2, [pc, #12]	; (522c <Power_Ip_SMC_AllowedModesConfig+0x18>)
    521e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5222:	6093      	str	r3, [r2, #8]
}
    5224:	bf00      	nop
    5226:	b002      	add	sp, #8
    5228:	4770      	bx	lr
    522a:	bf00      	nop
    522c:	4007e000 	.word	0x4007e000

00005230 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5230:	b084      	sub	sp, #16
    5232:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5234:	2301      	movs	r3, #1
    5236:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5238:	4b15      	ldr	r3, [pc, #84]	; (5290 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    523a:	695b      	ldr	r3, [r3, #20]
    523c:	b2db      	uxtb	r3, r3
    523e:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5240:	9b01      	ldr	r3, [sp, #4]
    5242:	2b02      	cmp	r3, #2
    5244:	d012      	beq.n	526c <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5246:	9b01      	ldr	r3, [sp, #4]
    5248:	2b02      	cmp	r3, #2
    524a:	d818      	bhi.n	527e <Power_Ip_SMC_ModeCheckEntry+0x4e>
    524c:	9b01      	ldr	r3, [sp, #4]
    524e:	2b00      	cmp	r3, #0
    5250:	d003      	beq.n	525a <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5252:	9b01      	ldr	r3, [sp, #4]
    5254:	2b01      	cmp	r3, #1
    5256:	d003      	beq.n	5260 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5258:	e011      	b.n	527e <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    525a:	2300      	movs	r3, #0
    525c:	9303      	str	r3, [sp, #12]
            break;
    525e:	e013      	b.n	5288 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5260:	9b02      	ldr	r3, [sp, #8]
    5262:	2b01      	cmp	r3, #1
    5264:	d10d      	bne.n	5282 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5266:	2300      	movs	r3, #0
    5268:	9303      	str	r3, [sp, #12]
            break;
    526a:	e00a      	b.n	5282 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    526c:	9b02      	ldr	r3, [sp, #8]
    526e:	2b01      	cmp	r3, #1
    5270:	d002      	beq.n	5278 <Power_Ip_SMC_ModeCheckEntry+0x48>
    5272:	9b02      	ldr	r3, [sp, #8]
    5274:	2b10      	cmp	r3, #16
    5276:	d106      	bne.n	5286 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5278:	2300      	movs	r3, #0
    527a:	9303      	str	r3, [sp, #12]
            break;
    527c:	e003      	b.n	5286 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    527e:	bf00      	nop
    5280:	e002      	b.n	5288 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5282:	bf00      	nop
    5284:	e000      	b.n	5288 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5286:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5288:	9b03      	ldr	r3, [sp, #12]
}
    528a:	4618      	mov	r0, r3
    528c:	b004      	add	sp, #16
    528e:	4770      	bx	lr
    5290:	4007e000 	.word	0x4007e000

00005294 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5294:	b500      	push	{lr}
    5296:	b08b      	sub	sp, #44	; 0x2c
    5298:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    529a:	2300      	movs	r3, #0
    529c:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    529e:	2300      	movs	r3, #0
    52a0:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    52a2:	2300      	movs	r3, #0
    52a4:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    52a8:	9b01      	ldr	r3, [sp, #4]
    52aa:	685b      	ldr	r3, [r3, #4]
    52ac:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    52ae:	9b08      	ldr	r3, [sp, #32]
    52b0:	2b02      	cmp	r3, #2
    52b2:	d076      	beq.n	53a2 <Power_Ip_SMC_ModeConfig+0x10e>
    52b4:	9b08      	ldr	r3, [sp, #32]
    52b6:	2b02      	cmp	r3, #2
    52b8:	f200 80ab 	bhi.w	5412 <Power_Ip_SMC_ModeConfig+0x17e>
    52bc:	9b08      	ldr	r3, [sp, #32]
    52be:	2b00      	cmp	r3, #0
    52c0:	d003      	beq.n	52ca <Power_Ip_SMC_ModeConfig+0x36>
    52c2:	9b08      	ldr	r3, [sp, #32]
    52c4:	2b01      	cmp	r3, #1
    52c6:	d034      	beq.n	5332 <Power_Ip_SMC_ModeConfig+0x9e>
    52c8:	e0a3      	b.n	5412 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    52ca:	4b58      	ldr	r3, [pc, #352]	; (542c <Power_Ip_SMC_ModeConfig+0x198>)
    52cc:	68db      	ldr	r3, [r3, #12]
    52ce:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    52d0:	9b06      	ldr	r3, [sp, #24]
    52d2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    52d6:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    52d8:	4a54      	ldr	r2, [pc, #336]	; (542c <Power_Ip_SMC_ModeConfig+0x198>)
    52da:	9b06      	ldr	r3, [sp, #24]
    52dc:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    52de:	aa02      	add	r2, sp, #8
    52e0:	a903      	add	r1, sp, #12
    52e2:	a804      	add	r0, sp, #16
    52e4:	f24c 3350 	movw	r3, #50000	; 0xc350
    52e8:	f7ff fece 	bl	5088 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    52ec:	9a02      	ldr	r2, [sp, #8]
    52ee:	a903      	add	r1, sp, #12
    52f0:	ab04      	add	r3, sp, #16
    52f2:	4618      	mov	r0, r3
    52f4:	f7ff fee2 	bl	50bc <Power_Ip_TimeoutExpired>
    52f8:	4603      	mov	r3, r0
    52fa:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    52fe:	4b4b      	ldr	r3, [pc, #300]	; (542c <Power_Ip_SMC_ModeConfig+0x198>)
    5300:	695b      	ldr	r3, [r3, #20]
    5302:	f003 0301 	and.w	r3, r3, #1
    5306:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5308:	9b05      	ldr	r3, [sp, #20]
    530a:	2b01      	cmp	r3, #1
    530c:	d006      	beq.n	531c <Power_Ip_SMC_ModeConfig+0x88>
    530e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5312:	f083 0301 	eor.w	r3, r3, #1
    5316:	b2db      	uxtb	r3, r3
    5318:	2b00      	cmp	r3, #0
    531a:	d1e7      	bne.n	52ec <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    531c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5320:	2b00      	cmp	r3, #0
    5322:	d079      	beq.n	5418 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5324:	2301      	movs	r3, #1
    5326:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5328:	21ff      	movs	r1, #255	; 0xff
    532a:	2000      	movs	r0, #0
    532c:	f7ff fe90 	bl	5050 <Power_Ip_ReportPowerErrors>
            }

            break;
    5330:	e072      	b.n	5418 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5332:	4b3e      	ldr	r3, [pc, #248]	; (542c <Power_Ip_SMC_ModeConfig+0x198>)
    5334:	68db      	ldr	r3, [r3, #12]
    5336:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5338:	9b06      	ldr	r3, [sp, #24]
    533a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    533e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5340:	9b06      	ldr	r3, [sp, #24]
    5342:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5346:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5348:	4a38      	ldr	r2, [pc, #224]	; (542c <Power_Ip_SMC_ModeConfig+0x198>)
    534a:	9b06      	ldr	r3, [sp, #24]
    534c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    534e:	aa02      	add	r2, sp, #8
    5350:	a903      	add	r1, sp, #12
    5352:	a804      	add	r0, sp, #16
    5354:	f24c 3350 	movw	r3, #50000	; 0xc350
    5358:	f7ff fe96 	bl	5088 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    535c:	9a02      	ldr	r2, [sp, #8]
    535e:	a903      	add	r1, sp, #12
    5360:	ab04      	add	r3, sp, #16
    5362:	4618      	mov	r0, r3
    5364:	f7ff feaa 	bl	50bc <Power_Ip_TimeoutExpired>
    5368:	4603      	mov	r3, r0
    536a:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    536e:	4b2f      	ldr	r3, [pc, #188]	; (542c <Power_Ip_SMC_ModeConfig+0x198>)
    5370:	695b      	ldr	r3, [r3, #20]
    5372:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5376:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5378:	9b05      	ldr	r3, [sp, #20]
    537a:	2b80      	cmp	r3, #128	; 0x80
    537c:	d006      	beq.n	538c <Power_Ip_SMC_ModeConfig+0xf8>
    537e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5382:	f083 0301 	eor.w	r3, r3, #1
    5386:	b2db      	uxtb	r3, r3
    5388:	2b00      	cmp	r3, #0
    538a:	d1e7      	bne.n	535c <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    538c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5390:	2b00      	cmp	r3, #0
    5392:	d043      	beq.n	541c <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5394:	2301      	movs	r3, #1
    5396:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5398:	21ff      	movs	r1, #255	; 0xff
    539a:	2000      	movs	r0, #0
    539c:	f7ff fe58 	bl	5050 <Power_Ip_ReportPowerErrors>
            }

            break;
    53a0:	e03c      	b.n	541c <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    53a2:	4b22      	ldr	r3, [pc, #136]	; (542c <Power_Ip_SMC_ModeConfig+0x198>)
    53a4:	68db      	ldr	r3, [r3, #12]
    53a6:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    53a8:	9b06      	ldr	r3, [sp, #24]
    53aa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    53ae:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    53b0:	9b06      	ldr	r3, [sp, #24]
    53b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    53b6:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    53b8:	4a1c      	ldr	r2, [pc, #112]	; (542c <Power_Ip_SMC_ModeConfig+0x198>)
    53ba:	9b06      	ldr	r3, [sp, #24]
    53bc:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    53be:	aa02      	add	r2, sp, #8
    53c0:	a903      	add	r1, sp, #12
    53c2:	a804      	add	r0, sp, #16
    53c4:	f24c 3350 	movw	r3, #50000	; 0xc350
    53c8:	f7ff fe5e 	bl	5088 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    53cc:	9a02      	ldr	r2, [sp, #8]
    53ce:	a903      	add	r1, sp, #12
    53d0:	ab04      	add	r3, sp, #16
    53d2:	4618      	mov	r0, r3
    53d4:	f7ff fe72 	bl	50bc <Power_Ip_TimeoutExpired>
    53d8:	4603      	mov	r3, r0
    53da:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    53de:	4b13      	ldr	r3, [pc, #76]	; (542c <Power_Ip_SMC_ModeConfig+0x198>)
    53e0:	695b      	ldr	r3, [r3, #20]
    53e2:	f003 0304 	and.w	r3, r3, #4
    53e6:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    53e8:	9b05      	ldr	r3, [sp, #20]
    53ea:	2b04      	cmp	r3, #4
    53ec:	d006      	beq.n	53fc <Power_Ip_SMC_ModeConfig+0x168>
    53ee:	f89d 301f 	ldrb.w	r3, [sp, #31]
    53f2:	f083 0301 	eor.w	r3, r3, #1
    53f6:	b2db      	uxtb	r3, r3
    53f8:	2b00      	cmp	r3, #0
    53fa:	d1e7      	bne.n	53cc <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    53fc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5400:	2b00      	cmp	r3, #0
    5402:	d00d      	beq.n	5420 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5404:	2301      	movs	r3, #1
    5406:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5408:	21ff      	movs	r1, #255	; 0xff
    540a:	2000      	movs	r0, #0
    540c:	f7ff fe20 	bl	5050 <Power_Ip_ReportPowerErrors>
            }

            break;
    5410:	e006      	b.n	5420 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5412:	2301      	movs	r3, #1
    5414:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5416:	e004      	b.n	5422 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5418:	bf00      	nop
    541a:	e002      	b.n	5422 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    541c:	bf00      	nop
    541e:	e000      	b.n	5422 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5420:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5422:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5424:	4618      	mov	r0, r3
    5426:	b00b      	add	sp, #44	; 0x2c
    5428:	f85d fb04 	ldr.w	pc, [sp], #4
    542c:	4007e000 	.word	0x4007e000

00005430 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5430:	b500      	push	{lr}
    5432:	b085      	sub	sp, #20
    5434:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5436:	9b01      	ldr	r3, [sp, #4]
    5438:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    543a:	9803      	ldr	r0, [sp, #12]
    543c:	f000 fbc8 	bl	5bd0 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5440:	4a03      	ldr	r2, [pc, #12]	; (5450 <Port_Init+0x20>)
    5442:	9b03      	ldr	r3, [sp, #12]
    5444:	6013      	str	r3, [r2, #0]
        }
    }
}
    5446:	bf00      	nop
    5448:	b005      	add	sp, #20
    544a:	f85d fb04 	ldr.w	pc, [sp], #4
    544e:	bf00      	nop
    5450:	1fff8d64 	.word	0x1fff8d64

00005454 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5454:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5456:	4b03      	ldr	r3, [pc, #12]	; (5464 <Port_RefreshPortDirection+0x10>)
    5458:	681b      	ldr	r3, [r3, #0]
    545a:	4618      	mov	r0, r3
    545c:	f000 fc10 	bl	5c80 <Port_Ipw_RefreshPortDirection>
    }
}
    5460:	bf00      	nop
    5462:	bd08      	pop	{r3, pc}
    5464:	1fff8d64 	.word	0x1fff8d64

00005468 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5468:	b086      	sub	sp, #24
    546a:	9003      	str	r0, [sp, #12]
    546c:	9102      	str	r1, [sp, #8]
    546e:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5470:	23ff      	movs	r3, #255	; 0xff
    5472:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5474:	9b03      	ldr	r3, [sp, #12]
    5476:	4a39      	ldr	r2, [pc, #228]	; (555c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5478:	4293      	cmp	r3, r2
    547a:	d151      	bne.n	5520 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    547c:	9b02      	ldr	r3, [sp, #8]
    547e:	2b10      	cmp	r3, #16
    5480:	d867      	bhi.n	5552 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5482:	a201      	add	r2, pc, #4	; (adr r2, 5488 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5488:	000054cd 	.word	0x000054cd
    548c:	000054db 	.word	0x000054db
    5490:	00005553 	.word	0x00005553
    5494:	00005553 	.word	0x00005553
    5498:	00005553 	.word	0x00005553
    549c:	00005553 	.word	0x00005553
    54a0:	00005553 	.word	0x00005553
    54a4:	00005553 	.word	0x00005553
    54a8:	00005553 	.word	0x00005553
    54ac:	00005553 	.word	0x00005553
    54b0:	00005553 	.word	0x00005553
    54b4:	00005553 	.word	0x00005553
    54b8:	00005553 	.word	0x00005553
    54bc:	000054e9 	.word	0x000054e9
    54c0:	000054f7 	.word	0x000054f7
    54c4:	00005505 	.word	0x00005505
    54c8:	00005513 	.word	0x00005513
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    54cc:	2301      	movs	r3, #1
    54ce:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    54d0:	9a05      	ldr	r2, [sp, #20]
    54d2:	9b01      	ldr	r3, [sp, #4]
    54d4:	4313      	orrs	r3, r2
    54d6:	9305      	str	r3, [sp, #20]
                break;
    54d8:	e03c      	b.n	5554 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    54da:	2302      	movs	r3, #2
    54dc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    54de:	9a05      	ldr	r2, [sp, #20]
    54e0:	9b01      	ldr	r3, [sp, #4]
    54e2:	4313      	orrs	r3, r2
    54e4:	9305      	str	r3, [sp, #20]
                break;
    54e6:	e035      	b.n	5554 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    54e8:	2304      	movs	r3, #4
    54ea:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    54ec:	9a05      	ldr	r2, [sp, #20]
    54ee:	9b01      	ldr	r3, [sp, #4]
    54f0:	4313      	orrs	r3, r2
    54f2:	9305      	str	r3, [sp, #20]
                break;
    54f4:	e02e      	b.n	5554 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    54f6:	2308      	movs	r3, #8
    54f8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    54fa:	9a05      	ldr	r2, [sp, #20]
    54fc:	9b01      	ldr	r3, [sp, #4]
    54fe:	4313      	orrs	r3, r2
    5500:	9305      	str	r3, [sp, #20]
                break;
    5502:	e027      	b.n	5554 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5504:	230e      	movs	r3, #14
    5506:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5508:	9a05      	ldr	r2, [sp, #20]
    550a:	9b01      	ldr	r3, [sp, #4]
    550c:	4013      	ands	r3, r2
    550e:	9305      	str	r3, [sp, #20]
                break;
    5510:	e020      	b.n	5554 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5512:	230d      	movs	r3, #13
    5514:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5516:	9a05      	ldr	r2, [sp, #20]
    5518:	9b01      	ldr	r3, [sp, #4]
    551a:	4013      	ands	r3, r2
    551c:	9305      	str	r3, [sp, #20]
                break;
    551e:	e019      	b.n	5554 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5520:	9b03      	ldr	r3, [sp, #12]
    5522:	4a0f      	ldr	r2, [pc, #60]	; (5560 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5524:	4293      	cmp	r3, r2
    5526:	d115      	bne.n	5554 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5528:	9b02      	ldr	r3, [sp, #8]
    552a:	2b00      	cmp	r3, #0
    552c:	d003      	beq.n	5536 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    552e:	9b02      	ldr	r3, [sp, #8]
    5530:	2b01      	cmp	r3, #1
    5532:	d007      	beq.n	5544 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5534:	e00e      	b.n	5554 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5536:	230b      	movs	r3, #11
    5538:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    553a:	9a05      	ldr	r2, [sp, #20]
    553c:	9b01      	ldr	r3, [sp, #4]
    553e:	4013      	ands	r3, r2
    5540:	9305      	str	r3, [sp, #20]
                break;
    5542:	e007      	b.n	5554 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5544:	2307      	movs	r3, #7
    5546:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5548:	9a05      	ldr	r2, [sp, #20]
    554a:	9b01      	ldr	r3, [sp, #4]
    554c:	4013      	ands	r3, r2
    554e:	9305      	str	r3, [sp, #20]
                break;
    5550:	e000      	b.n	5554 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5552:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5554:	9b05      	ldr	r3, [sp, #20]
}
    5556:	4618      	mov	r0, r3
    5558:	b006      	add	sp, #24
    555a:	4770      	bx	lr
    555c:	4004a000 	.word	0x4004a000
    5560:	4004b000 	.word	0x4004b000

00005564 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5564:	b500      	push	{lr}
    5566:	b089      	sub	sp, #36	; 0x24
    5568:	9003      	str	r0, [sp, #12]
    556a:	9102      	str	r1, [sp, #8]
    556c:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    556e:	9b01      	ldr	r3, [sp, #4]
    5570:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5572:	9b01      	ldr	r3, [sp, #4]
    5574:	2b08      	cmp	r3, #8
    5576:	d121      	bne.n	55bc <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    5578:	4b13      	ldr	r3, [pc, #76]	; (55c8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    557a:	685b      	ldr	r3, [r3, #4]
    557c:	f003 030f 	and.w	r3, r3, #15
    5580:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    5582:	9a06      	ldr	r2, [sp, #24]
    5584:	9902      	ldr	r1, [sp, #8]
    5586:	9803      	ldr	r0, [sp, #12]
    5588:	f7ff ff6e 	bl	5468 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    558c:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    558e:	9b05      	ldr	r3, [sp, #20]
    5590:	2bff      	cmp	r3, #255	; 0xff
    5592:	d011      	beq.n	55b8 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    5594:	f005 f9d8 	bl	a948 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    5598:	4b0b      	ldr	r3, [pc, #44]	; (55c8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    559a:	685b      	ldr	r3, [r3, #4]
    559c:	4a0a      	ldr	r2, [pc, #40]	; (55c8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    559e:	f023 030f 	bic.w	r3, r3, #15
    55a2:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    55a4:	4b08      	ldr	r3, [pc, #32]	; (55c8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    55a6:	685a      	ldr	r2, [r3, #4]
    55a8:	9b05      	ldr	r3, [sp, #20]
    55aa:	f003 030f 	and.w	r3, r3, #15
    55ae:	4906      	ldr	r1, [pc, #24]	; (55c8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    55b0:	4313      	orrs	r3, r2
    55b2:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    55b4:	f005 f9f4 	bl	a9a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    55b8:	2300      	movs	r3, #0
    55ba:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    55bc:	9b07      	ldr	r3, [sp, #28]
}
    55be:	4618      	mov	r0, r3
    55c0:	b009      	add	sp, #36	; 0x24
    55c2:	f85d fb04 	ldr.w	pc, [sp], #4
    55c6:	bf00      	nop
    55c8:	40048000 	.word	0x40048000

000055cc <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    55cc:	b500      	push	{lr}
    55ce:	b087      	sub	sp, #28
    55d0:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    55d2:	2300      	movs	r3, #0
    55d4:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    55d6:	2300      	movs	r3, #0
    55d8:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    55da:	2300      	movs	r3, #0
    55dc:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    55de:	9b01      	ldr	r3, [sp, #4]
    55e0:	68db      	ldr	r3, [r3, #12]
    55e2:	2b02      	cmp	r3, #2
    55e4:	d00a      	beq.n	55fc <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    55e6:	9b05      	ldr	r3, [sp, #20]
    55e8:	f043 0302 	orr.w	r3, r3, #2
    55ec:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    55ee:	9b01      	ldr	r3, [sp, #4]
    55f0:	68db      	ldr	r3, [r3, #12]
    55f2:	f003 0301 	and.w	r3, r3, #1
    55f6:	9a05      	ldr	r2, [sp, #20]
    55f8:	4313      	orrs	r3, r2
    55fa:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    55fc:	9b01      	ldr	r3, [sp, #4]
    55fe:	699b      	ldr	r3, [r3, #24]
    5600:	019b      	lsls	r3, r3, #6
    5602:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5606:	9a05      	ldr	r2, [sp, #20]
    5608:	4313      	orrs	r3, r2
    560a:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    560c:	9b01      	ldr	r3, [sp, #4]
    560e:	6a1b      	ldr	r3, [r3, #32]
    5610:	03db      	lsls	r3, r3, #15
    5612:	b29b      	uxth	r3, r3
    5614:	9a05      	ldr	r2, [sp, #20]
    5616:	4313      	orrs	r3, r2
    5618:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    561a:	9b01      	ldr	r3, [sp, #4]
    561c:	7f1b      	ldrb	r3, [r3, #28]
    561e:	2b00      	cmp	r3, #0
    5620:	d001      	beq.n	5626 <Port_Ci_Port_Ip_PinInit+0x5a>
    5622:	2310      	movs	r3, #16
    5624:	e000      	b.n	5628 <Port_Ci_Port_Ip_PinInit+0x5c>
    5626:	2300      	movs	r3, #0
    5628:	9a05      	ldr	r2, [sp, #20]
    562a:	4313      	orrs	r3, r2
    562c:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    562e:	9b01      	ldr	r3, [sp, #4]
    5630:	691b      	ldr	r3, [r3, #16]
    5632:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5634:	9b01      	ldr	r3, [sp, #4]
    5636:	6818      	ldr	r0, [r3, #0]
    5638:	9b01      	ldr	r3, [sp, #4]
    563a:	689b      	ldr	r3, [r3, #8]
    563c:	9a04      	ldr	r2, [sp, #16]
    563e:	4619      	mov	r1, r3
    5640:	f7ff ff90 	bl	5564 <Port_Ci_Port_Ip_ConfigureInterleave>
    5644:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    5646:	9b03      	ldr	r3, [sp, #12]
    5648:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    564a:	9b04      	ldr	r3, [sp, #16]
    564c:	021b      	lsls	r3, r3, #8
    564e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5652:	9a05      	ldr	r2, [sp, #20]
    5654:	4313      	orrs	r3, r2
    5656:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    5658:	f004 ffdc 	bl	a614 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    565c:	9b01      	ldr	r3, [sp, #4]
    565e:	681b      	ldr	r3, [r3, #0]
    5660:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    5664:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    5666:	9b01      	ldr	r3, [sp, #4]
    5668:	689b      	ldr	r3, [r3, #8]
    566a:	2201      	movs	r2, #1
    566c:	fa02 f303 	lsl.w	r3, r2, r3
    5670:	43db      	mvns	r3, r3
    5672:	9a02      	ldr	r2, [sp, #8]
    5674:	4013      	ands	r3, r2
    5676:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    5678:	9b01      	ldr	r3, [sp, #4]
    567a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    567e:	2b00      	cmp	r3, #0
    5680:	d001      	beq.n	5686 <Port_Ci_Port_Ip_PinInit+0xba>
    5682:	2201      	movs	r2, #1
    5684:	e000      	b.n	5688 <Port_Ci_Port_Ip_PinInit+0xbc>
    5686:	2200      	movs	r2, #0
    5688:	9b01      	ldr	r3, [sp, #4]
    568a:	689b      	ldr	r3, [r3, #8]
    568c:	fa02 f303 	lsl.w	r3, r2, r3
    5690:	9a02      	ldr	r2, [sp, #8]
    5692:	4313      	orrs	r3, r2
    5694:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    5696:	9b01      	ldr	r3, [sp, #4]
    5698:	681b      	ldr	r3, [r3, #0]
    569a:	9a02      	ldr	r2, [sp, #8]
    569c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    56a0:	f004 ffe4 	bl	a66c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    56a4:	9b04      	ldr	r3, [sp, #16]
    56a6:	2b01      	cmp	r3, #1
    56a8:	d16d      	bne.n	5786 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    56aa:	9b01      	ldr	r3, [sp, #4]
    56ac:	695b      	ldr	r3, [r3, #20]
    56ae:	2b02      	cmp	r3, #2
    56b0:	d138      	bne.n	5724 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    56b2:	9b01      	ldr	r3, [sp, #4]
    56b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    56b8:	2b01      	cmp	r3, #1
    56ba:	d10f      	bne.n	56dc <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    56bc:	f004 fffc 	bl	a6b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    56c0:	9b01      	ldr	r3, [sp, #4]
    56c2:	685b      	ldr	r3, [r3, #4]
    56c4:	6859      	ldr	r1, [r3, #4]
    56c6:	9b01      	ldr	r3, [sp, #4]
    56c8:	689b      	ldr	r3, [r3, #8]
    56ca:	2201      	movs	r2, #1
    56cc:	409a      	lsls	r2, r3
    56ce:	9b01      	ldr	r3, [sp, #4]
    56d0:	685b      	ldr	r3, [r3, #4]
    56d2:	430a      	orrs	r2, r1
    56d4:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    56d6:	f005 f81b 	bl	a710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    56da:	e013      	b.n	5704 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    56dc:	9b01      	ldr	r3, [sp, #4]
    56de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    56e2:	2b00      	cmp	r3, #0
    56e4:	d10e      	bne.n	5704 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    56e6:	f005 f839 	bl	a75c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    56ea:	9b01      	ldr	r3, [sp, #4]
    56ec:	685b      	ldr	r3, [r3, #4]
    56ee:	6899      	ldr	r1, [r3, #8]
    56f0:	9b01      	ldr	r3, [sp, #4]
    56f2:	689b      	ldr	r3, [r3, #8]
    56f4:	2201      	movs	r2, #1
    56f6:	409a      	lsls	r2, r3
    56f8:	9b01      	ldr	r3, [sp, #4]
    56fa:	685b      	ldr	r3, [r3, #4]
    56fc:	430a      	orrs	r2, r1
    56fe:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    5700:	f005 f858 	bl	a7b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5704:	f005 f87c 	bl	a800 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    5708:	9b01      	ldr	r3, [sp, #4]
    570a:	685b      	ldr	r3, [r3, #4]
    570c:	6959      	ldr	r1, [r3, #20]
    570e:	9b01      	ldr	r3, [sp, #4]
    5710:	689b      	ldr	r3, [r3, #8]
    5712:	2201      	movs	r2, #1
    5714:	409a      	lsls	r2, r3
    5716:	9b01      	ldr	r3, [sp, #4]
    5718:	685b      	ldr	r3, [r3, #4]
    571a:	430a      	orrs	r2, r1
    571c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    571e:	f005 f89b 	bl	a858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    5722:	e030      	b.n	5786 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5724:	f005 f86c 	bl	a800 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    5728:	9b01      	ldr	r3, [sp, #4]
    572a:	685b      	ldr	r3, [r3, #4]
    572c:	6959      	ldr	r1, [r3, #20]
    572e:	9b01      	ldr	r3, [sp, #4]
    5730:	689b      	ldr	r3, [r3, #8]
    5732:	2201      	movs	r2, #1
    5734:	fa02 f303 	lsl.w	r3, r2, r3
    5738:	43da      	mvns	r2, r3
    573a:	9b01      	ldr	r3, [sp, #4]
    573c:	685b      	ldr	r3, [r3, #4]
    573e:	400a      	ands	r2, r1
    5740:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5742:	f005 f889 	bl	a858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    5746:	f005 f8ad 	bl	a8a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    574a:	9b01      	ldr	r3, [sp, #4]
    574c:	685b      	ldr	r3, [r3, #4]
    574e:	6999      	ldr	r1, [r3, #24]
    5750:	9b01      	ldr	r3, [sp, #4]
    5752:	689b      	ldr	r3, [r3, #8]
    5754:	2201      	movs	r2, #1
    5756:	fa02 f303 	lsl.w	r3, r2, r3
    575a:	43da      	mvns	r2, r3
    575c:	9b01      	ldr	r3, [sp, #4]
    575e:	685b      	ldr	r3, [r3, #4]
    5760:	400a      	ands	r2, r1
    5762:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    5764:	9b01      	ldr	r3, [sp, #4]
    5766:	695b      	ldr	r3, [r3, #20]
    5768:	2b03      	cmp	r3, #3
    576a:	d10a      	bne.n	5782 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    576c:	9b01      	ldr	r3, [sp, #4]
    576e:	685b      	ldr	r3, [r3, #4]
    5770:	6999      	ldr	r1, [r3, #24]
    5772:	9b01      	ldr	r3, [sp, #4]
    5774:	689b      	ldr	r3, [r3, #8]
    5776:	2201      	movs	r2, #1
    5778:	409a      	lsls	r2, r3
    577a:	9b01      	ldr	r3, [sp, #4]
    577c:	685b      	ldr	r3, [r3, #4]
    577e:	430a      	orrs	r2, r1
    5780:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    5782:	f005 f8bb 	bl	a8fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    5786:	9b01      	ldr	r3, [sp, #4]
    5788:	681b      	ldr	r3, [r3, #0]
    578a:	9a01      	ldr	r2, [sp, #4]
    578c:	6892      	ldr	r2, [r2, #8]
    578e:	9905      	ldr	r1, [sp, #20]
    5790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5794:	bf00      	nop
    5796:	b007      	add	sp, #28
    5798:	f85d fb04 	ldr.w	pc, [sp], #4

0000579c <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    579c:	b500      	push	{lr}
    579e:	b085      	sub	sp, #20
    57a0:	9001      	str	r0, [sp, #4]
    57a2:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    57a4:	2300      	movs	r3, #0
    57a6:	9303      	str	r3, [sp, #12]
    57a8:	e00d      	b.n	57c6 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    57aa:	9a03      	ldr	r2, [sp, #12]
    57ac:	4613      	mov	r3, r2
    57ae:	009b      	lsls	r3, r3, #2
    57b0:	4413      	add	r3, r2
    57b2:	00db      	lsls	r3, r3, #3
    57b4:	461a      	mov	r2, r3
    57b6:	9b00      	ldr	r3, [sp, #0]
    57b8:	4413      	add	r3, r2
    57ba:	4618      	mov	r0, r3
    57bc:	f7ff ff06 	bl	55cc <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    57c0:	9b03      	ldr	r3, [sp, #12]
    57c2:	3301      	adds	r3, #1
    57c4:	9303      	str	r3, [sp, #12]
    57c6:	9a03      	ldr	r2, [sp, #12]
    57c8:	9b01      	ldr	r3, [sp, #4]
    57ca:	429a      	cmp	r2, r3
    57cc:	d3ed      	bcc.n	57aa <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    57ce:	2300      	movs	r3, #0
}
    57d0:	4618      	mov	r0, r3
    57d2:	b005      	add	sp, #20
    57d4:	f85d fb04 	ldr.w	pc, [sp], #4

000057d8 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    57d8:	b500      	push	{lr}
    57da:	b087      	sub	sp, #28
    57dc:	9003      	str	r0, [sp, #12]
    57de:	9102      	str	r1, [sp, #8]
    57e0:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    57e2:	9a01      	ldr	r2, [sp, #4]
    57e4:	9902      	ldr	r1, [sp, #8]
    57e6:	9803      	ldr	r0, [sp, #12]
    57e8:	f7ff febc 	bl	5564 <Port_Ci_Port_Ip_ConfigureInterleave>
    57ec:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    57ee:	f005 f8fd 	bl	a9ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    57f2:	9b03      	ldr	r3, [sp, #12]
    57f4:	9a02      	ldr	r2, [sp, #8]
    57f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    57fa:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    57fc:	9b04      	ldr	r3, [sp, #16]
    57fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    5802:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    5804:	9b05      	ldr	r3, [sp, #20]
    5806:	021b      	lsls	r3, r3, #8
    5808:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    580c:	9a04      	ldr	r2, [sp, #16]
    580e:	4313      	orrs	r3, r2
    5810:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    5812:	9b03      	ldr	r3, [sp, #12]
    5814:	9a02      	ldr	r2, [sp, #8]
    5816:	9904      	ldr	r1, [sp, #16]
    5818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    581c:	f005 f912 	bl	aa44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    5820:	bf00      	nop
    5822:	b007      	add	sp, #28
    5824:	f85d fb04 	ldr.w	pc, [sp], #4

00005828 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5828:	b500      	push	{lr}
    582a:	b083      	sub	sp, #12
    582c:	9001      	str	r0, [sp, #4]
    582e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    5830:	f005 f92e 	bl	aa90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    5834:	9b01      	ldr	r3, [sp, #4]
    5836:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    583a:	2101      	movs	r1, #1
    583c:	9b00      	ldr	r3, [sp, #0]
    583e:	fa01 f303 	lsl.w	r3, r1, r3
    5842:	431a      	orrs	r2, r3
    5844:	9b01      	ldr	r3, [sp, #4]
    5846:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    584a:	f005 f94d 	bl	aae8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    584e:	bf00      	nop
    5850:	b003      	add	sp, #12
    5852:	f85d fb04 	ldr.w	pc, [sp], #4

00005856 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5856:	b500      	push	{lr}
    5858:	b083      	sub	sp, #12
    585a:	9001      	str	r0, [sp, #4]
    585c:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    585e:	f005 f969 	bl	ab34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    5862:	9b01      	ldr	r3, [sp, #4]
    5864:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    5868:	2101      	movs	r1, #1
    586a:	9b00      	ldr	r3, [sp, #0]
    586c:	fa01 f303 	lsl.w	r3, r1, r3
    5870:	43db      	mvns	r3, r3
    5872:	401a      	ands	r2, r3
    5874:	9b01      	ldr	r3, [sp, #4]
    5876:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    587a:	f005 f987 	bl	ab8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    587e:	bf00      	nop
    5880:	b003      	add	sp, #12
    5882:	f85d fb04 	ldr.w	pc, [sp], #4

00005886 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    5886:	b082      	sub	sp, #8
    5888:	9001      	str	r0, [sp, #4]
    588a:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    588c:	9b00      	ldr	r3, [sp, #0]
    588e:	785b      	ldrb	r3, [r3, #1]
    5890:	f003 0201 	and.w	r2, r3, #1
    5894:	9b01      	ldr	r3, [sp, #4]
    5896:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    589a:	9b00      	ldr	r3, [sp, #0]
    589c:	789b      	ldrb	r3, [r3, #2]
    589e:	f003 021f 	and.w	r2, r3, #31
    58a2:	9b01      	ldr	r3, [sp, #4]
    58a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    58a8:	bf00      	nop
    58aa:	b002      	add	sp, #8
    58ac:	4770      	bx	lr

000058ae <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    58ae:	b086      	sub	sp, #24
    58b0:	9003      	str	r0, [sp, #12]
    58b2:	9301      	str	r3, [sp, #4]
    58b4:	460b      	mov	r3, r1
    58b6:	f8ad 300a 	strh.w	r3, [sp, #10]
    58ba:	4613      	mov	r3, r2
    58bc:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    58c0:	2300      	movs	r3, #0
    58c2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    58c6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58ca:	f043 0301 	orr.w	r3, r3, #1
    58ce:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    58d2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58d6:	f043 0302 	orr.w	r3, r3, #2
    58da:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    58de:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58e2:	f043 0310 	orr.w	r3, r3, #16
    58e6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    58ea:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    58f2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    58f6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    58fe:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    5902:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    590a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    590e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    5912:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5916:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    591a:	4013      	ands	r3, r2
    591c:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    5920:	9b01      	ldr	r3, [sp, #4]
    5922:	2b00      	cmp	r3, #0
    5924:	d003      	beq.n	592e <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    5926:	9b01      	ldr	r3, [sp, #4]
    5928:	2b01      	cmp	r3, #1
    592a:	d00a      	beq.n	5942 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    592c:	e013      	b.n	5956 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    592e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5932:	041a      	lsls	r2, r3, #16
    5934:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5938:	431a      	orrs	r2, r3
    593a:	9b03      	ldr	r3, [sp, #12]
    593c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    5940:	e009      	b.n	5956 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    5942:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5946:	041a      	lsls	r2, r3, #16
    5948:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    594c:	431a      	orrs	r2, r3
    594e:	9b03      	ldr	r3, [sp, #12]
    5950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    5954:	bf00      	nop
    }
}
    5956:	bf00      	nop
    5958:	b006      	add	sp, #24
    595a:	4770      	bx	lr

0000595c <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    595c:	b500      	push	{lr}
    595e:	b087      	sub	sp, #28
    5960:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    5962:	9b01      	ldr	r3, [sp, #4]
    5964:	885b      	ldrh	r3, [r3, #2]
    5966:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    596a:	9b01      	ldr	r3, [sp, #4]
    596c:	689b      	ldr	r3, [r3, #8]
    596e:	7a1b      	ldrb	r3, [r3, #8]
    5970:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    5974:	9b01      	ldr	r3, [sp, #4]
    5976:	689b      	ldr	r3, [r3, #8]
    5978:	681b      	ldr	r3, [r3, #0]
    597a:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    597c:	9b01      	ldr	r3, [sp, #4]
    597e:	689b      	ldr	r3, [r3, #8]
    5980:	685b      	ldr	r3, [r3, #4]
    5982:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5984:	2300      	movs	r3, #0
    5986:	f8ad 3016 	strh.w	r3, [sp, #22]
    598a:	e111      	b.n	5bb0 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    598c:	9b02      	ldr	r3, [sp, #8]
    598e:	2b02      	cmp	r3, #2
    5990:	d169      	bne.n	5a66 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    5992:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5996:	2b01      	cmp	r3, #1
    5998:	d11a      	bne.n	59d0 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    599a:	9b01      	ldr	r3, [sp, #4]
    599c:	685a      	ldr	r2, [r3, #4]
    599e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59a2:	005b      	lsls	r3, r3, #1
    59a4:	4413      	add	r3, r2
    59a6:	881b      	ldrh	r3, [r3, #0]
    59a8:	f003 021f 	and.w	r2, r3, #31
    59ac:	9b01      	ldr	r3, [sp, #4]
    59ae:	6859      	ldr	r1, [r3, #4]
    59b0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59b4:	005b      	lsls	r3, r3, #1
    59b6:	440b      	add	r3, r1
    59b8:	881b      	ldrh	r3, [r3, #0]
    59ba:	095b      	lsrs	r3, r3, #5
    59bc:	b29b      	uxth	r3, r3
    59be:	4619      	mov	r1, r3
    59c0:	4b81      	ldr	r3, [pc, #516]	; (5bc8 <Port_Ipw_Init_UnusedPins+0x26c>)
    59c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    59c6:	2101      	movs	r1, #1
    59c8:	fa01 f202 	lsl.w	r2, r1, r2
    59cc:	605a      	str	r2, [r3, #4]
    59ce:	e01d      	b.n	5a0c <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    59d0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    59d4:	2b00      	cmp	r3, #0
    59d6:	d119      	bne.n	5a0c <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    59d8:	9b01      	ldr	r3, [sp, #4]
    59da:	685a      	ldr	r2, [r3, #4]
    59dc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59e0:	005b      	lsls	r3, r3, #1
    59e2:	4413      	add	r3, r2
    59e4:	881b      	ldrh	r3, [r3, #0]
    59e6:	f003 021f 	and.w	r2, r3, #31
    59ea:	9b01      	ldr	r3, [sp, #4]
    59ec:	6859      	ldr	r1, [r3, #4]
    59ee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59f2:	005b      	lsls	r3, r3, #1
    59f4:	440b      	add	r3, r1
    59f6:	881b      	ldrh	r3, [r3, #0]
    59f8:	095b      	lsrs	r3, r3, #5
    59fa:	b29b      	uxth	r3, r3
    59fc:	4619      	mov	r1, r3
    59fe:	4b72      	ldr	r3, [pc, #456]	; (5bc8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5a00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5a04:	2101      	movs	r1, #1
    5a06:	fa01 f202 	lsl.w	r2, r1, r2
    5a0a:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5a0c:	f005 f8e4 	bl	abd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5a10:	9b01      	ldr	r3, [sp, #4]
    5a12:	685a      	ldr	r2, [r3, #4]
    5a14:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a18:	005b      	lsls	r3, r3, #1
    5a1a:	4413      	add	r3, r2
    5a1c:	881b      	ldrh	r3, [r3, #0]
    5a1e:	095b      	lsrs	r3, r3, #5
    5a20:	b29b      	uxth	r3, r3
    5a22:	461a      	mov	r2, r3
    5a24:	4b68      	ldr	r3, [pc, #416]	; (5bc8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5a2a:	6959      	ldr	r1, [r3, #20]
    5a2c:	9b01      	ldr	r3, [sp, #4]
    5a2e:	685a      	ldr	r2, [r3, #4]
    5a30:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a34:	005b      	lsls	r3, r3, #1
    5a36:	4413      	add	r3, r2
    5a38:	881b      	ldrh	r3, [r3, #0]
    5a3a:	f003 031f 	and.w	r3, r3, #31
    5a3e:	2201      	movs	r2, #1
    5a40:	409a      	lsls	r2, r3
    5a42:	9b01      	ldr	r3, [sp, #4]
    5a44:	6858      	ldr	r0, [r3, #4]
    5a46:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a4a:	005b      	lsls	r3, r3, #1
    5a4c:	4403      	add	r3, r0
    5a4e:	881b      	ldrh	r3, [r3, #0]
    5a50:	095b      	lsrs	r3, r3, #5
    5a52:	b29b      	uxth	r3, r3
    5a54:	4618      	mov	r0, r3
    5a56:	4b5c      	ldr	r3, [pc, #368]	; (5bc8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5a58:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5a5c:	430a      	orrs	r2, r1
    5a5e:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5a60:	f005 f8e6 	bl	ac30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    5a64:	e086      	b.n	5b74 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5a66:	f005 f8b7 	bl	abd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    5a6a:	9b01      	ldr	r3, [sp, #4]
    5a6c:	685a      	ldr	r2, [r3, #4]
    5a6e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a72:	005b      	lsls	r3, r3, #1
    5a74:	4413      	add	r3, r2
    5a76:	881b      	ldrh	r3, [r3, #0]
    5a78:	095b      	lsrs	r3, r3, #5
    5a7a:	b29b      	uxth	r3, r3
    5a7c:	461a      	mov	r2, r3
    5a7e:	4b52      	ldr	r3, [pc, #328]	; (5bc8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5a84:	6959      	ldr	r1, [r3, #20]
    5a86:	9b01      	ldr	r3, [sp, #4]
    5a88:	685a      	ldr	r2, [r3, #4]
    5a8a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a8e:	005b      	lsls	r3, r3, #1
    5a90:	4413      	add	r3, r2
    5a92:	881b      	ldrh	r3, [r3, #0]
    5a94:	f003 031f 	and.w	r3, r3, #31
    5a98:	2201      	movs	r2, #1
    5a9a:	fa02 f303 	lsl.w	r3, r2, r3
    5a9e:	43da      	mvns	r2, r3
    5aa0:	9b01      	ldr	r3, [sp, #4]
    5aa2:	6858      	ldr	r0, [r3, #4]
    5aa4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5aa8:	005b      	lsls	r3, r3, #1
    5aaa:	4403      	add	r3, r0
    5aac:	881b      	ldrh	r3, [r3, #0]
    5aae:	095b      	lsrs	r3, r3, #5
    5ab0:	b29b      	uxth	r3, r3
    5ab2:	4618      	mov	r0, r3
    5ab4:	4b44      	ldr	r3, [pc, #272]	; (5bc8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5ab6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5aba:	400a      	ands	r2, r1
    5abc:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5abe:	f005 f8b7 	bl	ac30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    5ac2:	f005 f8db 	bl	ac7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5ac6:	9b01      	ldr	r3, [sp, #4]
    5ac8:	685a      	ldr	r2, [r3, #4]
    5aca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ace:	005b      	lsls	r3, r3, #1
    5ad0:	4413      	add	r3, r2
    5ad2:	881b      	ldrh	r3, [r3, #0]
    5ad4:	095b      	lsrs	r3, r3, #5
    5ad6:	b29b      	uxth	r3, r3
    5ad8:	461a      	mov	r2, r3
    5ada:	4b3b      	ldr	r3, [pc, #236]	; (5bc8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5ae0:	6999      	ldr	r1, [r3, #24]
    5ae2:	9b01      	ldr	r3, [sp, #4]
    5ae4:	685a      	ldr	r2, [r3, #4]
    5ae6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5aea:	005b      	lsls	r3, r3, #1
    5aec:	4413      	add	r3, r2
    5aee:	881b      	ldrh	r3, [r3, #0]
    5af0:	f003 031f 	and.w	r3, r3, #31
    5af4:	2201      	movs	r2, #1
    5af6:	fa02 f303 	lsl.w	r3, r2, r3
    5afa:	43da      	mvns	r2, r3
    5afc:	9b01      	ldr	r3, [sp, #4]
    5afe:	6858      	ldr	r0, [r3, #4]
    5b00:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b04:	005b      	lsls	r3, r3, #1
    5b06:	4403      	add	r3, r0
    5b08:	881b      	ldrh	r3, [r3, #0]
    5b0a:	095b      	lsrs	r3, r3, #5
    5b0c:	b29b      	uxth	r3, r3
    5b0e:	4618      	mov	r0, r3
    5b10:	4b2d      	ldr	r3, [pc, #180]	; (5bc8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5b12:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5b16:	400a      	ands	r2, r1
    5b18:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    5b1a:	9b02      	ldr	r3, [sp, #8]
    5b1c:	2b03      	cmp	r3, #3
    5b1e:	d127      	bne.n	5b70 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5b20:	9b01      	ldr	r3, [sp, #4]
    5b22:	685a      	ldr	r2, [r3, #4]
    5b24:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b28:	005b      	lsls	r3, r3, #1
    5b2a:	4413      	add	r3, r2
    5b2c:	881b      	ldrh	r3, [r3, #0]
    5b2e:	095b      	lsrs	r3, r3, #5
    5b30:	b29b      	uxth	r3, r3
    5b32:	461a      	mov	r2, r3
    5b34:	4b24      	ldr	r3, [pc, #144]	; (5bc8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b3a:	6999      	ldr	r1, [r3, #24]
    5b3c:	9b01      	ldr	r3, [sp, #4]
    5b3e:	685a      	ldr	r2, [r3, #4]
    5b40:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b44:	005b      	lsls	r3, r3, #1
    5b46:	4413      	add	r3, r2
    5b48:	881b      	ldrh	r3, [r3, #0]
    5b4a:	f003 031f 	and.w	r3, r3, #31
    5b4e:	2201      	movs	r2, #1
    5b50:	409a      	lsls	r2, r3
    5b52:	9b01      	ldr	r3, [sp, #4]
    5b54:	6858      	ldr	r0, [r3, #4]
    5b56:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b5a:	005b      	lsls	r3, r3, #1
    5b5c:	4403      	add	r3, r0
    5b5e:	881b      	ldrh	r3, [r3, #0]
    5b60:	095b      	lsrs	r3, r3, #5
    5b62:	b29b      	uxth	r3, r3
    5b64:	4618      	mov	r0, r3
    5b66:	4b18      	ldr	r3, [pc, #96]	; (5bc8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5b68:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5b6c:	430a      	orrs	r2, r1
    5b6e:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    5b70:	f005 f8b0 	bl	acd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    5b74:	9b01      	ldr	r3, [sp, #4]
    5b76:	685a      	ldr	r2, [r3, #4]
    5b78:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b7c:	005b      	lsls	r3, r3, #1
    5b7e:	4413      	add	r3, r2
    5b80:	881b      	ldrh	r3, [r3, #0]
    5b82:	095b      	lsrs	r3, r3, #5
    5b84:	b29b      	uxth	r3, r3
    5b86:	461a      	mov	r2, r3
    5b88:	4b10      	ldr	r3, [pc, #64]	; (5bcc <Port_Ipw_Init_UnusedPins+0x270>)
    5b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b8e:	9a01      	ldr	r2, [sp, #4]
    5b90:	6851      	ldr	r1, [r2, #4]
    5b92:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5b96:	0052      	lsls	r2, r2, #1
    5b98:	440a      	add	r2, r1
    5b9a:	8812      	ldrh	r2, [r2, #0]
    5b9c:	f002 021f 	and.w	r2, r2, #31
    5ba0:	9903      	ldr	r1, [sp, #12]
    5ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5ba6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5baa:	3301      	adds	r3, #1
    5bac:	f8ad 3016 	strh.w	r3, [sp, #22]
    5bb0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5bb4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5bb8:	429a      	cmp	r2, r3
    5bba:	f4ff aee7 	bcc.w	598c <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    5bbe:	bf00      	nop
    5bc0:	bf00      	nop
    5bc2:	b007      	add	sp, #28
    5bc4:	f85d fb04 	ldr.w	pc, [sp], #4
    5bc8:	0000c104 	.word	0x0000c104
    5bcc:	0000c0f0 	.word	0x0000c0f0

00005bd0 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    5bd0:	b500      	push	{lr}
    5bd2:	b085      	sub	sp, #20
    5bd4:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    5bd6:	9b01      	ldr	r3, [sp, #4]
    5bd8:	7c1b      	ldrb	r3, [r3, #16]
    5bda:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5bde:	2300      	movs	r3, #0
    5be0:	f8ad 300e 	strh.w	r3, [sp, #14]
    5be4:	e035      	b.n	5c52 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    5be6:	9b01      	ldr	r3, [sp, #4]
    5be8:	695a      	ldr	r2, [r3, #20]
    5bea:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5bee:	00db      	lsls	r3, r3, #3
    5bf0:	4413      	add	r3, r2
    5bf2:	781b      	ldrb	r3, [r3, #0]
    5bf4:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    5bf8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5bfc:	4a1f      	ldr	r2, [pc, #124]	; (5c7c <Port_Ipw_Init+0xac>)
    5bfe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5c02:	9b01      	ldr	r3, [sp, #4]
    5c04:	695a      	ldr	r2, [r3, #20]
    5c06:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5c0a:	00db      	lsls	r3, r3, #3
    5c0c:	4413      	add	r3, r2
    5c0e:	4619      	mov	r1, r3
    5c10:	f7ff fe39 	bl	5886 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    5c14:	f005 f9cc 	bl	afb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    5c18:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5c1c:	4a17      	ldr	r2, [pc, #92]	; (5c7c <Port_Ipw_Init+0xac>)
    5c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c22:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    5c26:	9b01      	ldr	r3, [sp, #4]
    5c28:	695a      	ldr	r2, [r3, #20]
    5c2a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5c2e:	00db      	lsls	r3, r3, #3
    5c30:	4413      	add	r3, r2
    5c32:	685a      	ldr	r2, [r3, #4]
    5c34:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5c38:	4810      	ldr	r0, [pc, #64]	; (5c7c <Port_Ipw_Init+0xac>)
    5c3a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5c3e:	430a      	orrs	r2, r1
    5c40:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    5c44:	f005 f9e0 	bl	b008 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5c48:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5c4c:	3301      	adds	r3, #1
    5c4e:	f8ad 300e 	strh.w	r3, [sp, #14]
    5c52:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5c56:	b29b      	uxth	r3, r3
    5c58:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5c5c:	429a      	cmp	r2, r3
    5c5e:	d3c2      	bcc.n	5be6 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    5c60:	9b01      	ldr	r3, [sp, #4]
    5c62:	6a1b      	ldr	r3, [r3, #32]
    5c64:	4619      	mov	r1, r3
    5c66:	2005      	movs	r0, #5
    5c68:	f7ff fd98 	bl	579c <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    5c6c:	9801      	ldr	r0, [sp, #4]
    5c6e:	f7ff fe75 	bl	595c <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    5c72:	bf00      	nop
    5c74:	b005      	add	sp, #20
    5c76:	f85d fb04 	ldr.w	pc, [sp], #4
    5c7a:	bf00      	nop
    5c7c:	0000c0f0 	.word	0x0000c0f0

00005c80 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    5c80:	b500      	push	{lr}
    5c82:	b085      	sub	sp, #20
    5c84:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    5c86:	9b01      	ldr	r3, [sp, #4]
    5c88:	881b      	ldrh	r3, [r3, #0]
    5c8a:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5c8e:	2300      	movs	r3, #0
    5c90:	f8ad 300e 	strh.w	r3, [sp, #14]
    5c94:	e0d2      	b.n	5e3c <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    5c96:	9b01      	ldr	r3, [sp, #4]
    5c98:	68d9      	ldr	r1, [r3, #12]
    5c9a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5c9e:	4613      	mov	r3, r2
    5ca0:	009b      	lsls	r3, r3, #2
    5ca2:	4413      	add	r3, r2
    5ca4:	009b      	lsls	r3, r3, #2
    5ca6:	440b      	add	r3, r1
    5ca8:	7c5b      	ldrb	r3, [r3, #17]
    5caa:	f083 0301 	eor.w	r3, r3, #1
    5cae:	b2db      	uxtb	r3, r3
    5cb0:	2b00      	cmp	r3, #0
    5cb2:	f000 80be 	beq.w	5e32 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    5cb6:	9b01      	ldr	r3, [sp, #4]
    5cb8:	68d9      	ldr	r1, [r3, #12]
    5cba:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5cbe:	4613      	mov	r3, r2
    5cc0:	009b      	lsls	r3, r3, #2
    5cc2:	4413      	add	r3, r2
    5cc4:	009b      	lsls	r3, r3, #2
    5cc6:	440b      	add	r3, r1
    5cc8:	7c1b      	ldrb	r3, [r3, #16]
    5cca:	2b00      	cmp	r3, #0
    5ccc:	f000 80b1 	beq.w	5e32 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    5cd0:	9b01      	ldr	r3, [sp, #4]
    5cd2:	68d9      	ldr	r1, [r3, #12]
    5cd4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5cd8:	4613      	mov	r3, r2
    5cda:	009b      	lsls	r3, r3, #2
    5cdc:	4413      	add	r3, r2
    5cde:	009b      	lsls	r3, r3, #2
    5ce0:	440b      	add	r3, r1
    5ce2:	881b      	ldrh	r3, [r3, #0]
    5ce4:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5ce8:	9b01      	ldr	r3, [sp, #4]
    5cea:	68d9      	ldr	r1, [r3, #12]
    5cec:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5cf0:	4613      	mov	r3, r2
    5cf2:	009b      	lsls	r3, r3, #2
    5cf4:	4413      	add	r3, r2
    5cf6:	009b      	lsls	r3, r3, #2
    5cf8:	440b      	add	r3, r1
    5cfa:	68db      	ldr	r3, [r3, #12]
    5cfc:	2b02      	cmp	r3, #2
    5cfe:	d11d      	bne.n	5d3c <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5d00:	f005 fa9e 	bl	b240 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5d04:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d08:	095b      	lsrs	r3, r3, #5
    5d0a:	b29b      	uxth	r3, r3
    5d0c:	461a      	mov	r2, r3
    5d0e:	4b51      	ldr	r3, [pc, #324]	; (5e54 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5d14:	6959      	ldr	r1, [r3, #20]
    5d16:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d1a:	f003 031f 	and.w	r3, r3, #31
    5d1e:	2201      	movs	r2, #1
    5d20:	409a      	lsls	r2, r3
    5d22:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d26:	095b      	lsrs	r3, r3, #5
    5d28:	b29b      	uxth	r3, r3
    5d2a:	4618      	mov	r0, r3
    5d2c:	4b49      	ldr	r3, [pc, #292]	; (5e54 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d2e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5d32:	430a      	orrs	r2, r1
    5d34:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5d36:	f005 faaf 	bl	b298 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    5d3a:	e07a      	b.n	5e32 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    5d3c:	9b01      	ldr	r3, [sp, #4]
    5d3e:	68d9      	ldr	r1, [r3, #12]
    5d40:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d44:	4613      	mov	r3, r2
    5d46:	009b      	lsls	r3, r3, #2
    5d48:	4413      	add	r3, r2
    5d4a:	009b      	lsls	r3, r3, #2
    5d4c:	440b      	add	r3, r1
    5d4e:	68db      	ldr	r3, [r3, #12]
    5d50:	2b01      	cmp	r3, #1
    5d52:	d00b      	beq.n	5d6c <Port_Ipw_RefreshPortDirection+0xec>
    5d54:	9b01      	ldr	r3, [sp, #4]
    5d56:	68d9      	ldr	r1, [r3, #12]
    5d58:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d5c:	4613      	mov	r3, r2
    5d5e:	009b      	lsls	r3, r3, #2
    5d60:	4413      	add	r3, r2
    5d62:	009b      	lsls	r3, r3, #2
    5d64:	440b      	add	r3, r1
    5d66:	68db      	ldr	r3, [r3, #12]
    5d68:	2b03      	cmp	r3, #3
    5d6a:	d162      	bne.n	5e32 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5d6c:	f005 fa68 	bl	b240 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5d70:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d74:	095b      	lsrs	r3, r3, #5
    5d76:	b29b      	uxth	r3, r3
    5d78:	461a      	mov	r2, r3
    5d7a:	4b36      	ldr	r3, [pc, #216]	; (5e54 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5d80:	6959      	ldr	r1, [r3, #20]
    5d82:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d86:	f003 031f 	and.w	r3, r3, #31
    5d8a:	2201      	movs	r2, #1
    5d8c:	fa02 f303 	lsl.w	r3, r2, r3
    5d90:	43da      	mvns	r2, r3
    5d92:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d96:	095b      	lsrs	r3, r3, #5
    5d98:	b29b      	uxth	r3, r3
    5d9a:	4618      	mov	r0, r3
    5d9c:	4b2d      	ldr	r3, [pc, #180]	; (5e54 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d9e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5da2:	400a      	ands	r2, r1
    5da4:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5da6:	f005 fa77 	bl	b298 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    5daa:	f005 fa9b 	bl	b2e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5dae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5db2:	095b      	lsrs	r3, r3, #5
    5db4:	b29b      	uxth	r3, r3
    5db6:	461a      	mov	r2, r3
    5db8:	4b26      	ldr	r3, [pc, #152]	; (5e54 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5dbe:	6999      	ldr	r1, [r3, #24]
    5dc0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5dc4:	f003 031f 	and.w	r3, r3, #31
    5dc8:	2201      	movs	r2, #1
    5dca:	fa02 f303 	lsl.w	r3, r2, r3
    5dce:	43da      	mvns	r2, r3
    5dd0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5dd4:	095b      	lsrs	r3, r3, #5
    5dd6:	b29b      	uxth	r3, r3
    5dd8:	4618      	mov	r0, r3
    5dda:	4b1e      	ldr	r3, [pc, #120]	; (5e54 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5ddc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5de0:	400a      	ands	r2, r1
    5de2:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5de4:	9b01      	ldr	r3, [sp, #4]
    5de6:	68d9      	ldr	r1, [r3, #12]
    5de8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5dec:	4613      	mov	r3, r2
    5dee:	009b      	lsls	r3, r3, #2
    5df0:	4413      	add	r3, r2
    5df2:	009b      	lsls	r3, r3, #2
    5df4:	440b      	add	r3, r1
    5df6:	68db      	ldr	r3, [r3, #12]
    5df8:	2b03      	cmp	r3, #3
    5dfa:	d118      	bne.n	5e2e <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5dfc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e00:	095b      	lsrs	r3, r3, #5
    5e02:	b29b      	uxth	r3, r3
    5e04:	461a      	mov	r2, r3
    5e06:	4b13      	ldr	r3, [pc, #76]	; (5e54 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5e0c:	6999      	ldr	r1, [r3, #24]
    5e0e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e12:	f003 031f 	and.w	r3, r3, #31
    5e16:	2201      	movs	r2, #1
    5e18:	409a      	lsls	r2, r3
    5e1a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e1e:	095b      	lsrs	r3, r3, #5
    5e20:	b29b      	uxth	r3, r3
    5e22:	4618      	mov	r0, r3
    5e24:	4b0b      	ldr	r3, [pc, #44]	; (5e54 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5e26:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5e2a:	430a      	orrs	r2, r1
    5e2c:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    5e2e:	f005 fa85 	bl	b33c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5e32:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5e36:	3301      	adds	r3, #1
    5e38:	f8ad 300e 	strh.w	r3, [sp, #14]
    5e3c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5e40:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5e44:	429a      	cmp	r2, r3
    5e46:	f4ff af26 	bcc.w	5c96 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    5e4a:	bf00      	nop
    5e4c:	bf00      	nop
    5e4e:	b005      	add	sp, #20
    5e50:	f85d fb04 	ldr.w	pc, [sp], #4
    5e54:	0000c104 	.word	0x0000c104

00005e58 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    5e58:	b500      	push	{lr}
    5e5a:	b085      	sub	sp, #20
    5e5c:	4603      	mov	r3, r0
    5e5e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5e62:	2300      	movs	r3, #0
    5e64:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    5e68:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5e6c:	4618      	mov	r0, r3
    5e6e:	f000 f871 	bl	5f54 <Dio_Ipw_ReadChannel>
    5e72:	4603      	mov	r3, r0
    5e74:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    5e78:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5e7c:	4618      	mov	r0, r3
    5e7e:	b005      	add	sp, #20
    5e80:	f85d fb04 	ldr.w	pc, [sp], #4

00005e84 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    5e84:	b500      	push	{lr}
    5e86:	b083      	sub	sp, #12
    5e88:	4603      	mov	r3, r0
    5e8a:	460a      	mov	r2, r1
    5e8c:	f8ad 3006 	strh.w	r3, [sp, #6]
    5e90:	4613      	mov	r3, r2
    5e92:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    5e96:	f89d 2005 	ldrb.w	r2, [sp, #5]
    5e9a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5e9e:	4611      	mov	r1, r2
    5ea0:	4618      	mov	r0, r3
    5ea2:	f000 f87d 	bl	5fa0 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    5ea6:	bf00      	nop
    5ea8:	b003      	add	sp, #12
    5eaa:	f85d fb04 	ldr.w	pc, [sp], #4

00005eae <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    5eae:	b500      	push	{lr}
    5eb0:	b085      	sub	sp, #20
    5eb2:	4603      	mov	r3, r0
    5eb4:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5eb8:	2300      	movs	r3, #0
    5eba:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    5ebe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5ec2:	4618      	mov	r0, r3
    5ec4:	f000 f892 	bl	5fec <Dio_Ipw_FlipChannel>
    5ec8:	4603      	mov	r3, r0
    5eca:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    5ece:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5ed2:	4618      	mov	r0, r3
    5ed4:	b005      	add	sp, #20
    5ed6:	f85d fb04 	ldr.w	pc, [sp], #4

00005eda <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    5eda:	b500      	push	{lr}
    5edc:	b085      	sub	sp, #20
    5ede:	4603      	mov	r3, r0
    5ee0:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5ee4:	2300      	movs	r3, #0
    5ee6:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    5ee8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5eec:	4618      	mov	r0, r3
    5eee:	f000 f8b3 	bl	6058 <Dio_Ipw_ReadPort>
    5ef2:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    5ef4:	9b03      	ldr	r3, [sp, #12]
}
    5ef6:	4618      	mov	r0, r3
    5ef8:	b005      	add	sp, #20
    5efa:	f85d fb04 	ldr.w	pc, [sp], #4

00005efe <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    5efe:	b500      	push	{lr}
    5f00:	b083      	sub	sp, #12
    5f02:	4603      	mov	r3, r0
    5f04:	9100      	str	r1, [sp, #0]
    5f06:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    5f0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5f0e:	9900      	ldr	r1, [sp, #0]
    5f10:	4618      	mov	r0, r3
    5f12:	f000 f8b9 	bl	6088 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    5f16:	bf00      	nop
    5f18:	b003      	add	sp, #12
    5f1a:	f85d fb04 	ldr.w	pc, [sp], #4

00005f1e <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    5f1e:	b500      	push	{lr}
    5f20:	b085      	sub	sp, #20
    5f22:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5f24:	2300      	movs	r3, #0
    5f26:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    5f28:	9801      	ldr	r0, [sp, #4]
    5f2a:	f000 f8c5 	bl	60b8 <Dio_Ipw_ReadChannelGroup>
    5f2e:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    5f30:	9b03      	ldr	r3, [sp, #12]
}
    5f32:	4618      	mov	r0, r3
    5f34:	b005      	add	sp, #20
    5f36:	f85d fb04 	ldr.w	pc, [sp], #4

00005f3a <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    5f3a:	b500      	push	{lr}
    5f3c:	b083      	sub	sp, #12
    5f3e:	9001      	str	r0, [sp, #4]
    5f40:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    5f42:	9900      	ldr	r1, [sp, #0]
    5f44:	9801      	ldr	r0, [sp, #4]
    5f46:	f000 f8d7 	bl	60f8 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    5f4a:	bf00      	nop
    5f4c:	b003      	add	sp, #12
    5f4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005f54 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    5f54:	b500      	push	{lr}
    5f56:	b087      	sub	sp, #28
    5f58:	4603      	mov	r3, r0
    5f5a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    5f5e:	2300      	movs	r3, #0
    5f60:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5f64:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5f68:	095b      	lsrs	r3, r3, #5
    5f6a:	b29b      	uxth	r3, r3
    5f6c:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    5f6e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5f72:	f003 031f 	and.w	r3, r3, #31
    5f76:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    5f78:	4a08      	ldr	r2, [pc, #32]	; (5f9c <Dio_Ipw_ReadChannel+0x48>)
    5f7a:	9b04      	ldr	r3, [sp, #16]
    5f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f80:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    5f82:	9903      	ldr	r1, [sp, #12]
    5f84:	9802      	ldr	r0, [sp, #8]
    5f86:	f000 f940 	bl	620a <Gpio_Dio_Ip_ReadPin>
    5f8a:	4603      	mov	r3, r0
    5f8c:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    5f90:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5f94:	4618      	mov	r0, r3
    5f96:	b007      	add	sp, #28
    5f98:	f85d fb04 	ldr.w	pc, [sp], #4
    5f9c:	1fff8b24 	.word	0x1fff8b24

00005fa0 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    5fa0:	b500      	push	{lr}
    5fa2:	b087      	sub	sp, #28
    5fa4:	4603      	mov	r3, r0
    5fa6:	460a      	mov	r2, r1
    5fa8:	f8ad 3006 	strh.w	r3, [sp, #6]
    5fac:	4613      	mov	r3, r2
    5fae:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5fb2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5fb6:	095b      	lsrs	r3, r3, #5
    5fb8:	b29b      	uxth	r3, r3
    5fba:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    5fbc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5fc0:	f003 031f 	and.w	r3, r3, #31
    5fc4:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    5fc6:	4a08      	ldr	r2, [pc, #32]	; (5fe8 <Dio_Ipw_WriteChannel+0x48>)
    5fc8:	9b05      	ldr	r3, [sp, #20]
    5fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fce:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    5fd0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5fd4:	461a      	mov	r2, r3
    5fd6:	9904      	ldr	r1, [sp, #16]
    5fd8:	9803      	ldr	r0, [sp, #12]
    5fda:	f000 f8b7 	bl	614c <Gpio_Dio_Ip_WritePin>
}
    5fde:	bf00      	nop
    5fe0:	b007      	add	sp, #28
    5fe2:	f85d fb04 	ldr.w	pc, [sp], #4
    5fe6:	bf00      	nop
    5fe8:	1fff8b24 	.word	0x1fff8b24

00005fec <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    5fec:	b500      	push	{lr}
    5fee:	b089      	sub	sp, #36	; 0x24
    5ff0:	4603      	mov	r3, r0
    5ff2:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5ff6:	2300      	movs	r3, #0
    5ff8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5ffc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6000:	095b      	lsrs	r3, r3, #5
    6002:	b29b      	uxth	r3, r3
    6004:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6006:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    600a:	f003 031f 	and.w	r3, r3, #31
    600e:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6010:	4a10      	ldr	r2, [pc, #64]	; (6054 <Dio_Ipw_FlipChannel+0x68>)
    6012:	9b06      	ldr	r3, [sp, #24]
    6014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6018:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    601a:	2201      	movs	r2, #1
    601c:	9b05      	ldr	r3, [sp, #20]
    601e:	fa02 f303 	lsl.w	r3, r2, r3
    6022:	4619      	mov	r1, r3
    6024:	9804      	ldr	r0, [sp, #16]
    6026:	f000 f8dc 	bl	61e2 <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    602a:	9804      	ldr	r0, [sp, #16]
    602c:	f000 f8bc 	bl	61a8 <Gpio_Dio_Ip_GetPinsOutput>
    6030:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    6032:	2201      	movs	r2, #1
    6034:	9b05      	ldr	r3, [sp, #20]
    6036:	409a      	lsls	r2, r3
    6038:	9b03      	ldr	r3, [sp, #12]
    603a:	401a      	ands	r2, r3
    603c:	9b05      	ldr	r3, [sp, #20]
    603e:	fa22 f303 	lsr.w	r3, r2, r3
    6042:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    6046:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    604a:	4618      	mov	r0, r3
    604c:	b009      	add	sp, #36	; 0x24
    604e:	f85d fb04 	ldr.w	pc, [sp], #4
    6052:	bf00      	nop
    6054:	1fff8b24 	.word	0x1fff8b24

00006058 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    6058:	b500      	push	{lr}
    605a:	b085      	sub	sp, #20
    605c:	4603      	mov	r3, r0
    605e:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6062:	2300      	movs	r3, #0
    6064:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6066:	f89d 3007 	ldrb.w	r3, [sp, #7]
    606a:	4a06      	ldr	r2, [pc, #24]	; (6084 <Dio_Ipw_ReadPort+0x2c>)
    606c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6070:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6072:	9802      	ldr	r0, [sp, #8]
    6074:	f000 f8be 	bl	61f4 <Gpio_Dio_Ip_ReadPins>
    6078:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    607a:	9b03      	ldr	r3, [sp, #12]
}
    607c:	4618      	mov	r0, r3
    607e:	b005      	add	sp, #20
    6080:	f85d fb04 	ldr.w	pc, [sp], #4
    6084:	1fff8b24 	.word	0x1fff8b24

00006088 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6088:	b500      	push	{lr}
    608a:	b085      	sub	sp, #20
    608c:	4603      	mov	r3, r0
    608e:	9100      	str	r1, [sp, #0]
    6090:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    6094:	9b00      	ldr	r3, [sp, #0]
    6096:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6098:	f89d 3007 	ldrb.w	r3, [sp, #7]
    609c:	4a05      	ldr	r2, [pc, #20]	; (60b4 <Dio_Ipw_WritePort+0x2c>)
    609e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60a2:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    60a4:	9903      	ldr	r1, [sp, #12]
    60a6:	9802      	ldr	r0, [sp, #8]
    60a8:	f000 f875 	bl	6196 <Gpio_Dio_Ip_WritePins>
}
    60ac:	bf00      	nop
    60ae:	b005      	add	sp, #20
    60b0:	f85d fb04 	ldr.w	pc, [sp], #4
    60b4:	1fff8b24 	.word	0x1fff8b24

000060b8 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    60b8:	b500      	push	{lr}
    60ba:	b087      	sub	sp, #28
    60bc:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    60be:	2300      	movs	r3, #0
    60c0:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    60c2:	9b01      	ldr	r3, [sp, #4]
    60c4:	781b      	ldrb	r3, [r3, #0]
    60c6:	461a      	mov	r2, r3
    60c8:	4b0a      	ldr	r3, [pc, #40]	; (60f4 <Dio_Ipw_ReadChannelGroup+0x3c>)
    60ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    60ce:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    60d0:	9804      	ldr	r0, [sp, #16]
    60d2:	f000 f88f 	bl	61f4 <Gpio_Dio_Ip_ReadPins>
    60d6:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    60d8:	9b01      	ldr	r3, [sp, #4]
    60da:	685a      	ldr	r2, [r3, #4]
    60dc:	9b03      	ldr	r3, [sp, #12]
    60de:	4013      	ands	r3, r2
    60e0:	9a01      	ldr	r2, [sp, #4]
    60e2:	7852      	ldrb	r2, [r2, #1]
    60e4:	40d3      	lsrs	r3, r2
    60e6:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    60e8:	9b05      	ldr	r3, [sp, #20]
}
    60ea:	4618      	mov	r0, r3
    60ec:	b007      	add	sp, #28
    60ee:	f85d fb04 	ldr.w	pc, [sp], #4
    60f2:	bf00      	nop
    60f4:	1fff8b24 	.word	0x1fff8b24

000060f8 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    60f8:	b500      	push	{lr}
    60fa:	b087      	sub	sp, #28
    60fc:	9001      	str	r0, [sp, #4]
    60fe:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6100:	9b01      	ldr	r3, [sp, #4]
    6102:	781b      	ldrb	r3, [r3, #0]
    6104:	461a      	mov	r2, r3
    6106:	4b10      	ldr	r3, [pc, #64]	; (6148 <Dio_Ipw_WriteChannelGroup+0x50>)
    6108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    610c:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    610e:	9b01      	ldr	r3, [sp, #4]
    6110:	785b      	ldrb	r3, [r3, #1]
    6112:	461a      	mov	r2, r3
    6114:	9b00      	ldr	r3, [sp, #0]
    6116:	fa03 f202 	lsl.w	r2, r3, r2
    611a:	9b01      	ldr	r3, [sp, #4]
    611c:	685b      	ldr	r3, [r3, #4]
    611e:	4013      	ands	r3, r2
    6120:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    6122:	9904      	ldr	r1, [sp, #16]
    6124:	9805      	ldr	r0, [sp, #20]
    6126:	f000 f84a 	bl	61be <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    612a:	9b04      	ldr	r3, [sp, #16]
    612c:	43da      	mvns	r2, r3
    612e:	9b01      	ldr	r3, [sp, #4]
    6130:	685b      	ldr	r3, [r3, #4]
    6132:	4013      	ands	r3, r2
    6134:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    6136:	9903      	ldr	r1, [sp, #12]
    6138:	9805      	ldr	r0, [sp, #20]
    613a:	f000 f849 	bl	61d0 <Gpio_Dio_Ip_ClearPins>

}
    613e:	bf00      	nop
    6140:	b007      	add	sp, #28
    6142:	f85d fb04 	ldr.w	pc, [sp], #4
    6146:	bf00      	nop
    6148:	1fff8b24 	.word	0x1fff8b24

0000614c <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    614c:	b500      	push	{lr}
    614e:	b087      	sub	sp, #28
    6150:	9003      	str	r0, [sp, #12]
    6152:	9102      	str	r1, [sp, #8]
    6154:	4613      	mov	r3, r2
    6156:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    615a:	f002 f819 	bl	8190 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    615e:	9b03      	ldr	r3, [sp, #12]
    6160:	681b      	ldr	r3, [r3, #0]
    6162:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    6164:	2201      	movs	r2, #1
    6166:	9b02      	ldr	r3, [sp, #8]
    6168:	fa02 f303 	lsl.w	r3, r2, r3
    616c:	43db      	mvns	r3, r3
    616e:	9a05      	ldr	r2, [sp, #20]
    6170:	4013      	ands	r3, r2
    6172:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    6174:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6178:	9b02      	ldr	r3, [sp, #8]
    617a:	fa02 f303 	lsl.w	r3, r2, r3
    617e:	9a05      	ldr	r2, [sp, #20]
    6180:	4313      	orrs	r3, r2
    6182:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    6184:	9b03      	ldr	r3, [sp, #12]
    6186:	9a05      	ldr	r2, [sp, #20]
    6188:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    618a:	f002 f82d 	bl	81e8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    618e:	bf00      	nop
    6190:	b007      	add	sp, #28
    6192:	f85d fb04 	ldr.w	pc, [sp], #4

00006196 <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6196:	b082      	sub	sp, #8
    6198:	9001      	str	r0, [sp, #4]
    619a:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    619c:	9b01      	ldr	r3, [sp, #4]
    619e:	9a00      	ldr	r2, [sp, #0]
    61a0:	601a      	str	r2, [r3, #0]
}
    61a2:	bf00      	nop
    61a4:	b002      	add	sp, #8
    61a6:	4770      	bx	lr

000061a8 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    61a8:	b084      	sub	sp, #16
    61aa:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    61ac:	2300      	movs	r3, #0
    61ae:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    61b0:	9b01      	ldr	r3, [sp, #4]
    61b2:	681b      	ldr	r3, [r3, #0]
    61b4:	9303      	str	r3, [sp, #12]
    return returnValue;
    61b6:	9b03      	ldr	r3, [sp, #12]
}
    61b8:	4618      	mov	r0, r3
    61ba:	b004      	add	sp, #16
    61bc:	4770      	bx	lr

000061be <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    61be:	b082      	sub	sp, #8
    61c0:	9001      	str	r0, [sp, #4]
    61c2:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    61c4:	9b01      	ldr	r3, [sp, #4]
    61c6:	9a00      	ldr	r2, [sp, #0]
    61c8:	605a      	str	r2, [r3, #4]
}
    61ca:	bf00      	nop
    61cc:	b002      	add	sp, #8
    61ce:	4770      	bx	lr

000061d0 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    61d0:	b082      	sub	sp, #8
    61d2:	9001      	str	r0, [sp, #4]
    61d4:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    61d6:	9b01      	ldr	r3, [sp, #4]
    61d8:	9a00      	ldr	r2, [sp, #0]
    61da:	609a      	str	r2, [r3, #8]
}
    61dc:	bf00      	nop
    61de:	b002      	add	sp, #8
    61e0:	4770      	bx	lr

000061e2 <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    61e2:	b082      	sub	sp, #8
    61e4:	9001      	str	r0, [sp, #4]
    61e6:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    61e8:	9b01      	ldr	r3, [sp, #4]
    61ea:	9a00      	ldr	r2, [sp, #0]
    61ec:	60da      	str	r2, [r3, #12]
}
    61ee:	bf00      	nop
    61f0:	b002      	add	sp, #8
    61f2:	4770      	bx	lr

000061f4 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    61f4:	b084      	sub	sp, #16
    61f6:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    61f8:	2300      	movs	r3, #0
    61fa:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    61fc:	9b01      	ldr	r3, [sp, #4]
    61fe:	691b      	ldr	r3, [r3, #16]
    6200:	9303      	str	r3, [sp, #12]
    return returnValue;
    6202:	9b03      	ldr	r3, [sp, #12]
}
    6204:	4618      	mov	r0, r3
    6206:	b004      	add	sp, #16
    6208:	4770      	bx	lr

0000620a <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    620a:	b084      	sub	sp, #16
    620c:	9001      	str	r0, [sp, #4]
    620e:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    6210:	2300      	movs	r3, #0
    6212:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    6216:	9b01      	ldr	r3, [sp, #4]
    6218:	691a      	ldr	r2, [r3, #16]
    621a:	2101      	movs	r1, #1
    621c:	9b00      	ldr	r3, [sp, #0]
    621e:	fa01 f303 	lsl.w	r3, r1, r3
    6222:	401a      	ands	r2, r3
    6224:	9b00      	ldr	r3, [sp, #0]
    6226:	fa22 f303 	lsr.w	r3, r2, r3
    622a:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    622e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6232:	4618      	mov	r0, r3
    6234:	b004      	add	sp, #16
    6236:	4770      	bx	lr

00006238 <Ftm_Gpt_Ip_GetChInterruptStatusFlag>:
 *
 * @return  TRUE if a channel (n) event has occurred, FALSE otherwise
 * @pre     The driver needs to be initialized.
 */
static inline boolean Ftm_Gpt_Ip_GetChInterruptStatusFlag(uint8 instance, uint8 channel)
{
    6238:	b082      	sub	sp, #8
    623a:	4603      	mov	r3, r0
    623c:	460a      	mov	r2, r1
    623e:	f88d 3007 	strb.w	r3, [sp, #7]
    6242:	4613      	mov	r3, r2
    6244:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->CONTROLS[channel].CSC & FTM_CSC_CHF_MASK)) ? TRUE : FALSE;
    6248:	f89d 3007 	ldrb.w	r3, [sp, #7]
    624c:	4a09      	ldr	r2, [pc, #36]	; (6274 <Ftm_Gpt_Ip_GetChInterruptStatusFlag+0x3c>)
    624e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6252:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6256:	3301      	adds	r3, #1
    6258:	00db      	lsls	r3, r3, #3
    625a:	4413      	add	r3, r2
    625c:	685b      	ldr	r3, [r3, #4]
    625e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6262:	2b00      	cmp	r3, #0
    6264:	bf14      	ite	ne
    6266:	2301      	movne	r3, #1
    6268:	2300      	moveq	r3, #0
    626a:	b2db      	uxtb	r3, r3
}
    626c:	4618      	mov	r0, r3
    626e:	b002      	add	sp, #8
    6270:	4770      	bx	lr
    6272:	bf00      	nop
    6274:	0000c118 	.word	0x0000c118

00006278 <Ftm_Gpt_Ip_GetCntValue>:
*
* @return   current counter value
*
*/
static inline uint32 Ftm_Gpt_Ip_GetCntValue(uint8 instance)
{
    6278:	b082      	sub	sp, #8
    627a:	4603      	mov	r3, r0
    627c:	f88d 3007 	strb.w	r3, [sp, #7]
    return ftmGptBase[instance]->CNT;
    6280:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6284:	4a03      	ldr	r2, [pc, #12]	; (6294 <Ftm_Gpt_Ip_GetCntValue+0x1c>)
    6286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    628a:	685b      	ldr	r3, [r3, #4]
}
    628c:	4618      	mov	r0, r3
    628e:	b002      	add	sp, #8
    6290:	4770      	bx	lr
    6292:	bf00      	nop
    6294:	0000c118 	.word	0x0000c118

00006298 <Ftm_Gpt_Ip_GetCompareValue>:
 *
 * @return      compare value (CV)
 *
 */
static inline uint32 Ftm_Gpt_Ip_GetCompareValue(uint8 instance, uint8 channel)
{
    6298:	b082      	sub	sp, #8
    629a:	4603      	mov	r3, r0
    629c:	460a      	mov	r2, r1
    629e:	f88d 3007 	strb.w	r3, [sp, #7]
    62a2:	4613      	mov	r3, r2
    62a4:	f88d 3006 	strb.w	r3, [sp, #6]
    return ftmGptBase[instance]->CONTROLS[channel].CV;
    62a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62ac:	4a05      	ldr	r2, [pc, #20]	; (62c4 <Ftm_Gpt_Ip_GetCompareValue+0x2c>)
    62ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    62b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    62b6:	3301      	adds	r3, #1
    62b8:	00db      	lsls	r3, r3, #3
    62ba:	4413      	add	r3, r2
    62bc:	689b      	ldr	r3, [r3, #8]
}
    62be:	4618      	mov	r0, r3
    62c0:	b002      	add	sp, #8
    62c2:	4770      	bx	lr
    62c4:	0000c118 	.word	0x0000c118

000062c8 <Ftm_Gpt_Ip_SetFreezeBits>:
 *
 * @return      void
 *
 */
static inline void Ftm_Gpt_Ip_SetFreezeBits(uint8 instance, boolean freezeBits)
{
    62c8:	b500      	push	{lr}
    62ca:	b085      	sub	sp, #20
    62cc:	4603      	mov	r3, r0
    62ce:	460a      	mov	r2, r1
    62d0:	f88d 3007 	strb.w	r3, [sp, #7]
    62d4:	4613      	mov	r3, r2
    62d6:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 freezeVal = (TRUE == freezeBits) ? 0UL : 3UL;
    62da:	f89d 3006 	ldrb.w	r3, [sp, #6]
    62de:	2b00      	cmp	r3, #0
    62e0:	d001      	beq.n	62e6 <Ftm_Gpt_Ip_SetFreezeBits+0x1e>
    62e2:	2300      	movs	r3, #0
    62e4:	e000      	b.n	62e8 <Ftm_Gpt_Ip_SetFreezeBits+0x20>
    62e6:	2303      	movs	r3, #3
    62e8:	9303      	str	r3, [sp, #12]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17();
    62ea:	f002 fb29 	bl	8940 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17>
    ftmGptBase[instance]->CONF = (ftmGptBase[instance]->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(freezeVal);
    62ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62f2:	4a0c      	ldr	r2, [pc, #48]	; (6324 <Ftm_Gpt_Ip_SetFreezeBits+0x5c>)
    62f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    62fc:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
    6300:	9b03      	ldr	r3, [sp, #12]
    6302:	019b      	lsls	r3, r3, #6
    6304:	b2da      	uxtb	r2, r3
    6306:	f89d 3007 	ldrb.w	r3, [sp, #7]
    630a:	4806      	ldr	r0, [pc, #24]	; (6324 <Ftm_Gpt_Ip_SetFreezeBits+0x5c>)
    630c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6310:	430a      	orrs	r2, r1
    6312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17();
    6316:	f002 fb3f 	bl	8998 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17>
}
    631a:	bf00      	nop
    631c:	b005      	add	sp, #20
    631e:	f85d fb04 	ldr.w	pc, [sp], #4
    6322:	bf00      	nop
    6324:	0000c118 	.word	0x0000c118

00006328 <Ftm_Gpt_Ip_SetCounterInitVal>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetCounterInitVal(uint8 instance, uint16 value)
{
    6328:	b082      	sub	sp, #8
    632a:	4603      	mov	r3, r0
    632c:	460a      	mov	r2, r1
    632e:	f88d 3007 	strb.w	r3, [sp, #7]
    6332:	4613      	mov	r3, r2
    6334:	f8ad 3004 	strh.w	r3, [sp, #4]
    ftmGptBase[instance]->CNTIN = (uint32)(((uint32)value << FTM_CNTIN_INIT_SHIFT) & FTM_CNTIN_INIT_MASK);
    6338:	f89d 3007 	ldrb.w	r3, [sp, #7]
    633c:	4a04      	ldr	r2, [pc, #16]	; (6350 <Ftm_Gpt_Ip_SetCounterInitVal+0x28>)
    633e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6342:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6346:	64da      	str	r2, [r3, #76]	; 0x4c
}
    6348:	bf00      	nop
    634a:	b002      	add	sp, #8
    634c:	4770      	bx	lr
    634e:	bf00      	nop
    6350:	0000c118 	.word	0x0000c118

00006354 <Ftm_Gpt_Ip_SetCounter>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetCounter(uint8 instance, uint16 value)
{
    6354:	b082      	sub	sp, #8
    6356:	4603      	mov	r3, r0
    6358:	460a      	mov	r2, r1
    635a:	f88d 3007 	strb.w	r3, [sp, #7]
    635e:	4613      	mov	r3, r2
    6360:	f8ad 3004 	strh.w	r3, [sp, #4]
    ftmGptBase[instance]->CNT = (uint32)(((uint32)value << FTM_CNT_COUNT_SHIFT) & FTM_CNT_COUNT_MASK);
    6364:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6368:	4a04      	ldr	r2, [pc, #16]	; (637c <Ftm_Gpt_Ip_SetCounter+0x28>)
    636a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    636e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6372:	605a      	str	r2, [r3, #4]
}
    6374:	bf00      	nop
    6376:	b002      	add	sp, #8
    6378:	4770      	bx	lr
    637a:	bf00      	nop
    637c:	0000c118 	.word	0x0000c118

00006380 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>:
 *
 * @return      void
 * @pre         The driver needs to be initialized.
 */
static inline void Ftm_Gpt_Ip_ClearChInterruptStatusFlag(uint8 instance, uint8 channel)
{
    6380:	b082      	sub	sp, #8
    6382:	4603      	mov	r3, r0
    6384:	460a      	mov	r2, r1
    6386:	f88d 3007 	strb.w	r3, [sp, #7]
    638a:	4613      	mov	r3, r2
    638c:	f88d 3006 	strb.w	r3, [sp, #6]
    ftmGptBase[instance]-> CONTROLS[channel].CSC &= ~(FTM_CSC_CHF_MASK);
    6390:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6394:	4a0c      	ldr	r2, [pc, #48]	; (63c8 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag+0x48>)
    6396:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    639a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    639e:	3301      	adds	r3, #1
    63a0:	00db      	lsls	r3, r3, #3
    63a2:	4413      	add	r3, r2
    63a4:	685a      	ldr	r2, [r3, #4]
    63a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    63aa:	4907      	ldr	r1, [pc, #28]	; (63c8 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag+0x48>)
    63ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    63b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    63b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    63b8:	3301      	adds	r3, #1
    63ba:	00db      	lsls	r3, r3, #3
    63bc:	440b      	add	r3, r1
    63be:	605a      	str	r2, [r3, #4]
}
    63c0:	bf00      	nop
    63c2:	b002      	add	sp, #8
    63c4:	4770      	bx	lr
    63c6:	bf00      	nop
    63c8:	0000c118 	.word	0x0000c118

000063cc <Ftm_Gpt_Ip_SetChannelEnableInterrupt>:
 * @param[in]   aboEn - Enables the FTM channel(n) interrupt
 *              - True : Enable the FTM channel(n) interrupt.
 *              - False: Disable the FTM channel(n) interrupt.
 */
static inline void Ftm_Gpt_Ip_SetChannelEnableInterrupt(uint8 instance, uint8 channel, boolean aboEn)
{
    63cc:	b082      	sub	sp, #8
    63ce:	4603      	mov	r3, r0
    63d0:	f88d 3007 	strb.w	r3, [sp, #7]
    63d4:	460b      	mov	r3, r1
    63d6:	f88d 3006 	strb.w	r3, [sp, #6]
    63da:	4613      	mov	r3, r2
    63dc:	f88d 3005 	strb.w	r3, [sp, #5]
    ftmGptBase[instance]-> CONTROLS[channel].CSC = (ftmGptBase[instance]-> CONTROLS[channel].CSC & ~(FTM_CSC_CHIE_MASK)) | FTM_CSC_CHIE((TRUE == aboEn) ? 1UL : 0UL);
    63e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    63e4:	4a10      	ldr	r2, [pc, #64]	; (6428 <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x5c>)
    63e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    63ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
    63ee:	3301      	adds	r3, #1
    63f0:	00db      	lsls	r3, r3, #3
    63f2:	4413      	add	r3, r2
    63f4:	685b      	ldr	r3, [r3, #4]
    63f6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    63fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
    63fe:	2b00      	cmp	r3, #0
    6400:	d001      	beq.n	6406 <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x3a>
    6402:	2040      	movs	r0, #64	; 0x40
    6404:	e000      	b.n	6408 <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x3c>
    6406:	2000      	movs	r0, #0
    6408:	f89d 3007 	ldrb.w	r3, [sp, #7]
    640c:	4906      	ldr	r1, [pc, #24]	; (6428 <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x5c>)
    640e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    6412:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6416:	4302      	orrs	r2, r0
    6418:	3301      	adds	r3, #1
    641a:	00db      	lsls	r3, r3, #3
    641c:	440b      	add	r3, r1
    641e:	605a      	str	r2, [r3, #4]
}
    6420:	bf00      	nop
    6422:	b002      	add	sp, #8
    6424:	4770      	bx	lr
    6426:	bf00      	nop
    6428:	0000c118 	.word	0x0000c118

0000642c <Ftm_Gpt_Ip_SetClockSource>:
 * @param[in]       instance    FTM hardware instance number
 *
 * @return      void
 */
static inline void Ftm_Gpt_Ip_SetClockSource(uint8 instance, Ftm_Gpt_Ip_ClockSource clocksource)
{
    642c:	b500      	push	{lr}
    642e:	b083      	sub	sp, #12
    6430:	4603      	mov	r3, r0
    6432:	9100      	str	r1, [sp, #0]
    6434:	f88d 3007 	strb.w	r3, [sp, #7]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21();
    6438:	f002 fad4 	bl	89e4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21>
    ftmGptBase[instance]->SC = (ftmGptBase[instance]->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(clocksource);
    643c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6440:	4a0b      	ldr	r2, [pc, #44]	; (6470 <Ftm_Gpt_Ip_SetClockSource+0x44>)
    6442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6446:	681b      	ldr	r3, [r3, #0]
    6448:	f023 0118 	bic.w	r1, r3, #24
    644c:	9b00      	ldr	r3, [sp, #0]
    644e:	00db      	lsls	r3, r3, #3
    6450:	f003 0218 	and.w	r2, r3, #24
    6454:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6458:	4805      	ldr	r0, [pc, #20]	; (6470 <Ftm_Gpt_Ip_SetClockSource+0x44>)
    645a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    645e:	430a      	orrs	r2, r1
    6460:	601a      	str	r2, [r3, #0]
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21();
    6462:	f002 faeb 	bl	8a3c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21>
}
    6466:	bf00      	nop
    6468:	b003      	add	sp, #12
    646a:	f85d fb04 	ldr.w	pc, [sp], #4
    646e:	bf00      	nop
    6470:	0000c118 	.word	0x0000c118

00006474 <Ftm_Gpt_Ip_SetPrescaler>:
 *
 * @return        void
 *
 */
static inline void Ftm_Gpt_Ip_SetPrescaler(uint8 instance, uint8 prescalerValue)
{
    6474:	b500      	push	{lr}
    6476:	b083      	sub	sp, #12
    6478:	4603      	mov	r3, r0
    647a:	460a      	mov	r2, r1
    647c:	f88d 3007 	strb.w	r3, [sp, #7]
    6480:	4613      	mov	r3, r2
    6482:	f88d 3006 	strb.w	r3, [sp, #6]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22();
    6486:	f002 faff 	bl	8a88 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22>
    ftmGptBase[instance]->SC = (ftmGptBase[instance]->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(prescalerValue);
    648a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    648e:	4a0b      	ldr	r2, [pc, #44]	; (64bc <Ftm_Gpt_Ip_SetPrescaler+0x48>)
    6490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6494:	681b      	ldr	r3, [r3, #0]
    6496:	f023 0107 	bic.w	r1, r3, #7
    649a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    649e:	f003 0207 	and.w	r2, r3, #7
    64a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64a6:	4805      	ldr	r0, [pc, #20]	; (64bc <Ftm_Gpt_Ip_SetPrescaler+0x48>)
    64a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    64ac:	430a      	orrs	r2, r1
    64ae:	601a      	str	r2, [r3, #0]
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22();
    64b0:	f002 fb16 	bl	8ae0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22>
}
    64b4:	bf00      	nop
    64b6:	b003      	add	sp, #12
    64b8:	f85d fb04 	ldr.w	pc, [sp], #4
    64bc:	0000c118 	.word	0x0000c118

000064c0 <Ftm_Gpt_Ip_SetEnFtmModule>:
 * @param[in]   enable
 *
 * @return      void
 */
static inline void Ftm_Gpt_Ip_SetEnFtmModule(uint8 instance, boolean enable)
{
    64c0:	b500      	push	{lr}
    64c2:	b083      	sub	sp, #12
    64c4:	4603      	mov	r3, r0
    64c6:	460a      	mov	r2, r1
    64c8:	f88d 3007 	strb.w	r3, [sp, #7]
    64cc:	4613      	mov	r3, r2
    64ce:	f88d 3006 	strb.w	r3, [sp, #6]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23();
    64d2:	f002 fb2b 	bl	8b2c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23>
    {
        ftmGptBase[instance]->MODE &= ~(FTM_MODE_FTMEN_MASK);
    64d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64da:	4a13      	ldr	r2, [pc, #76]	; (6528 <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    64dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    64e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64e6:	4910      	ldr	r1, [pc, #64]	; (6528 <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    64e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    64ec:	f022 0201 	bic.w	r2, r2, #1
    64f0:	655a      	str	r2, [r3, #84]	; 0x54
        ftmGptBase[instance]->MODE |= FTM_MODE_FTMEN(enable ? 1UL : 0UL);
    64f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64f6:	4a0c      	ldr	r2, [pc, #48]	; (6528 <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    64f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    64fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6502:	2b00      	cmp	r3, #0
    6504:	d001      	beq.n	650a <Ftm_Gpt_Ip_SetEnFtmModule+0x4a>
    6506:	2101      	movs	r1, #1
    6508:	e000      	b.n	650c <Ftm_Gpt_Ip_SetEnFtmModule+0x4c>
    650a:	2100      	movs	r1, #0
    650c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6510:	4805      	ldr	r0, [pc, #20]	; (6528 <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    6512:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6516:	430a      	orrs	r2, r1
    6518:	655a      	str	r2, [r3, #84]	; 0x54
    }
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23();
    651a:	f002 fb33 	bl	8b84 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23>
}
    651e:	bf00      	nop
    6520:	b003      	add	sp, #12
    6522:	f85d fb04 	ldr.w	pc, [sp], #4
    6526:	bf00      	nop
    6528:	0000c118 	.word	0x0000c118

0000652c <Ftm_Gpt_Ip_SetCompareValue>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetCompareValue(uint8 instance, uint8 channel, uint32 value)
{
    652c:	b082      	sub	sp, #8
    652e:	4603      	mov	r3, r0
    6530:	9200      	str	r2, [sp, #0]
    6532:	f88d 3007 	strb.w	r3, [sp, #7]
    6536:	460b      	mov	r3, r1
    6538:	f88d 3006 	strb.w	r3, [sp, #6]
    ftmGptBase[instance]-> CONTROLS[channel].CV = (uint32)((((uint32)value << FTM_CV_VAL_SHIFT) & FTM_CV_VAL_MASK));
    653c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6540:	4a06      	ldr	r2, [pc, #24]	; (655c <Ftm_Gpt_Ip_SetCompareValue+0x30>)
    6542:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    6546:	f89d 3006 	ldrb.w	r3, [sp, #6]
    654a:	9a00      	ldr	r2, [sp, #0]
    654c:	b292      	uxth	r2, r2
    654e:	3301      	adds	r3, #1
    6550:	00db      	lsls	r3, r3, #3
    6552:	440b      	add	r3, r1
    6554:	609a      	str	r2, [r3, #8]

}
    6556:	bf00      	nop
    6558:	b002      	add	sp, #8
    655a:	4770      	bx	lr
    655c:	0000c118 	.word	0x0000c118

00006560 <Ftm_Gpt_Ip_WriteModulo>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_WriteModulo(uint8 instance, uint16 value)
{
    6560:	b082      	sub	sp, #8
    6562:	4603      	mov	r3, r0
    6564:	460a      	mov	r2, r1
    6566:	f88d 3007 	strb.w	r3, [sp, #7]
    656a:	4613      	mov	r3, r2
    656c:	f8ad 3004 	strh.w	r3, [sp, #4]
    ftmGptBase[instance]-> MOD = value;
    6570:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6574:	4a04      	ldr	r2, [pc, #16]	; (6588 <Ftm_Gpt_Ip_WriteModulo+0x28>)
    6576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    657a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    657e:	609a      	str	r2, [r3, #8]

}
    6580:	bf00      	nop
    6582:	b002      	add	sp, #8
    6584:	4770      	bx	lr
    6586:	bf00      	nop
    6588:	0000c118 	.word	0x0000c118

0000658c <Ftm_Gpt_Ip_ModeSelectA>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_ModeSelectA(uint8 instance, uint8 channel, boolean enable)
{
    658c:	b500      	push	{lr}
    658e:	b083      	sub	sp, #12
    6590:	4603      	mov	r3, r0
    6592:	f88d 3007 	strb.w	r3, [sp, #7]
    6596:	460b      	mov	r3, r1
    6598:	f88d 3006 	strb.w	r3, [sp, #6]
    659c:	4613      	mov	r3, r2
    659e:	f88d 3005 	strb.w	r3, [sp, #5]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24();
    65a2:	f002 fb15 	bl	8bd0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24>
    if (TRUE == enable)
    65a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    65aa:	2b00      	cmp	r3, #0
    65ac:	d018      	beq.n	65e0 <Ftm_Gpt_Ip_ModeSelectA+0x54>
    {
        ftmGptBase[instance]->CONTROLS[channel].CSC |= FTM_CSC_MSA_MASK;
    65ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65b2:	4a1a      	ldr	r2, [pc, #104]	; (661c <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    65b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    65b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    65bc:	3301      	adds	r3, #1
    65be:	00db      	lsls	r3, r3, #3
    65c0:	4413      	add	r3, r2
    65c2:	685a      	ldr	r2, [r3, #4]
    65c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65c8:	4914      	ldr	r1, [pc, #80]	; (661c <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    65ca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    65ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
    65d2:	f042 0210 	orr.w	r2, r2, #16
    65d6:	3301      	adds	r3, #1
    65d8:	00db      	lsls	r3, r3, #3
    65da:	440b      	add	r3, r1
    65dc:	605a      	str	r2, [r3, #4]
    65de:	e017      	b.n	6610 <Ftm_Gpt_Ip_ModeSelectA+0x84>
    }
    else
    {
        ftmGptBase[instance]->CONTROLS[channel].CSC &= (~(FTM_CSC_MSA_MASK));
    65e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65e4:	4a0d      	ldr	r2, [pc, #52]	; (661c <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    65e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    65ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
    65ee:	3301      	adds	r3, #1
    65f0:	00db      	lsls	r3, r3, #3
    65f2:	4413      	add	r3, r2
    65f4:	685a      	ldr	r2, [r3, #4]
    65f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65fa:	4908      	ldr	r1, [pc, #32]	; (661c <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    65fc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    6600:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6604:	f022 0210 	bic.w	r2, r2, #16
    6608:	3301      	adds	r3, #1
    660a:	00db      	lsls	r3, r3, #3
    660c:	440b      	add	r3, r1
    660e:	605a      	str	r2, [r3, #4]
    }
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24();
    6610:	f002 fb0a 	bl	8c28 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24>
}
    6614:	bf00      	nop
    6616:	b003      	add	sp, #12
    6618:	f85d fb04 	ldr.w	pc, [sp], #4
    661c:	0000c118 	.word	0x0000c118

00006620 <Ftm_Gpt_Ip_SetHalfCycleValue>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetHalfCycleValue(FTM_Type * const base, uint16 value)
{
    6620:	b082      	sub	sp, #8
    6622:	9001      	str	r0, [sp, #4]
    6624:	460b      	mov	r3, r1
    6626:	f8ad 3002 	strh.w	r3, [sp, #2]
    ((base)->HCR) = value;
    662a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    662e:	9b01      	ldr	r3, [sp, #4]
    6630:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    6634:	bf00      	nop
    6636:	b002      	add	sp, #8
    6638:	4770      	bx	lr

0000663a <Ftm_Gpt_Ip_GetChInterruptEnableFlag>:
 *
 * @return  TRUE if a channel (n) event has occurred, FALSE otherwise
 * @pre     The driver needs to be initialized.
 */
static inline boolean Ftm_Gpt_Ip_GetChInterruptEnableFlag(uint8 instance, uint8 channel)
{
    663a:	b082      	sub	sp, #8
    663c:	4603      	mov	r3, r0
    663e:	460a      	mov	r2, r1
    6640:	f88d 3007 	strb.w	r3, [sp, #7]
    6644:	4613      	mov	r3, r2
    6646:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->CONTROLS[channel].CSC & FTM_CSC_CHIE_MASK)) ? TRUE : FALSE;
    664a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    664e:	4a09      	ldr	r2, [pc, #36]	; (6674 <Ftm_Gpt_Ip_GetChInterruptEnableFlag+0x3a>)
    6650:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6654:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6658:	3301      	adds	r3, #1
    665a:	00db      	lsls	r3, r3, #3
    665c:	4413      	add	r3, r2
    665e:	685b      	ldr	r3, [r3, #4]
    6660:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6664:	2b00      	cmp	r3, #0
    6666:	bf14      	ite	ne
    6668:	2301      	movne	r3, #1
    666a:	2300      	moveq	r3, #0
    666c:	b2db      	uxtb	r3, r3
}
    666e:	4618      	mov	r0, r3
    6670:	b002      	add	sp, #8
    6672:	4770      	bx	lr
    6674:	0000c118 	.word	0x0000c118

00006678 <Ftm_Gpt_Ip_GetChannelEventStatus>:
 *         - True : A channel event has occurred
 *         - False: No channel event has occurred
 *
 */
static inline boolean Ftm_Gpt_Ip_GetChannelEventStatus(uint8 instance, uint8 channel)
{
    6678:	b082      	sub	sp, #8
    667a:	4603      	mov	r3, r0
    667c:	460a      	mov	r2, r1
    667e:	f88d 3007 	strb.w	r3, [sp, #7]
    6682:	4613      	mov	r3, r2
    6684:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->STATUS & (1UL << channel))) ? TRUE : FALSE;
    6688:	f89d 3007 	ldrb.w	r3, [sp, #7]
    668c:	4a08      	ldr	r2, [pc, #32]	; (66b0 <Ftm_Gpt_Ip_GetChannelEventStatus+0x38>)
    668e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6692:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    6694:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6698:	fa22 f303 	lsr.w	r3, r2, r3
    669c:	f003 0301 	and.w	r3, r3, #1
    66a0:	2b00      	cmp	r3, #0
    66a2:	bf14      	ite	ne
    66a4:	2301      	movne	r3, #1
    66a6:	2300      	moveq	r3, #0
    66a8:	b2db      	uxtb	r3, r3
}
    66aa:	4618      	mov	r0, r3
    66ac:	b002      	add	sp, #8
    66ae:	4770      	bx	lr
    66b0:	0000c118 	.word	0x0000c118

000066b4 <Ftm_Gpt_Ip_ProcessCommonInterrupt>:
* @param[in]     instance     FTM hardware instance number
* @param[in]     channel      FTM hardware channel number
* @implements    Ftm_Gpt_Ip_ProcessCommonInterrupt_Activity
*/
static void Ftm_Gpt_Ip_ProcessCommonInterrupt(uint8 instance, uint8 channel)
{
    66b4:	b500      	push	{lr}
    66b6:	b089      	sub	sp, #36	; 0x24
    66b8:	4603      	mov	r3, r0
    66ba:	460a      	mov	r2, r1
    66bc:	f88d 3007 	strb.w	r3, [sp, #7]
    66c0:	4613      	mov	r3, r2
    66c2:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Gpt_Ip_CallbackType     callback;
    uint8                       callbackParam;
    Ftm_Gpt_Ip_ChannelModeType  channelMode;

    uint32 targetValue;
    uint32 oldCmpValue = Ftm_Gpt_Ip_GetCompareValue(instance, channel);
    66c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
    66ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66ce:	4611      	mov	r1, r2
    66d0:	4618      	mov	r0, r3
    66d2:	f7ff fde1 	bl	6298 <Ftm_Gpt_Ip_GetCompareValue>
    66d6:	9007      	str	r0, [sp, #28]

    if ((instance < FTM_INSTANCE_COUNT) && (channel < FTM_CONTROLS_COUNT))
    66d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66dc:	2b03      	cmp	r3, #3
    66de:	f200 80a8 	bhi.w	6832 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
    66e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    66e6:	2b07      	cmp	r3, #7
    66e8:	f200 80a3 	bhi.w	6832 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
    {
        /* enter critical section */
        SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25();
    66ec:	f002 fac2 	bl	8c74 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25>
        {
            /* check if channel event is enabled */
            IsChEvEnabled = Ftm_Gpt_Ip_GetChInterruptEnableFlag(instance, channel);
    66f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    66f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66f8:	4611      	mov	r1, r2
    66fa:	4618      	mov	r0, r3
    66fc:	f7ff ff9d 	bl	663a <Ftm_Gpt_Ip_GetChInterruptEnableFlag>
    6700:	4603      	mov	r3, r0
    6702:	f88d 301b 	strb.w	r3, [sp, #27]

            /* check if channel event has occurred */
            HasChEvOccurred = Ftm_Gpt_Ip_GetChInterruptStatusFlag(instance, channel);
    6706:	f89d 2006 	ldrb.w	r2, [sp, #6]
    670a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    670e:	4611      	mov	r1, r2
    6710:	4618      	mov	r0, r3
    6712:	f7ff fd91 	bl	6238 <Ftm_Gpt_Ip_GetChInterruptStatusFlag>
    6716:	4603      	mov	r3, r0
    6718:	f88d 301a 	strb.w	r3, [sp, #26]

            /* Check for spurious interrupts */
            if (HasChEvOccurred && IsChEvEnabled)
    671c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    6720:	2b00      	cmp	r3, #0
    6722:	d00b      	beq.n	673c <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x88>
    6724:	f89d 301b 	ldrb.w	r3, [sp, #27]
    6728:	2b00      	cmp	r3, #0
    672a:	d007      	beq.n	673c <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x88>
            {
                /* Clear interrupt flag */
                Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    672c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6730:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6734:	4611      	mov	r1, r2
    6736:	4618      	mov	r0, r3
    6738:	f7ff fe22 	bl	6380 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
            }
        }
        /* exit critical section */
        SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25();
    673c:	f002 fac6 	bl	8ccc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25>

        if (HasChEvOccurred && IsChEvEnabled)
    6740:	f89d 301a 	ldrb.w	r3, [sp, #26]
    6744:	2b00      	cmp	r3, #0
    6746:	d074      	beq.n	6832 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
    6748:	f89d 301b 	ldrb.w	r3, [sp, #27]
    674c:	2b00      	cmp	r3, #0
    674e:	d070      	beq.n	6832 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
        {
            chInit          = Ftm_Gpt_Ip_u32ChState[instance][channel].chInit;
    6750:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6754:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6758:	4938      	ldr	r1, [pc, #224]	; (683c <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    675a:	00d2      	lsls	r2, r2, #3
    675c:	4413      	add	r3, r2
    675e:	011b      	lsls	r3, r3, #4
    6760:	440b      	add	r3, r1
    6762:	781b      	ldrb	r3, [r3, #0]
    6764:	f88d 3019 	strb.w	r3, [sp, #25]
            callback        = Ftm_Gpt_Ip_u32ChState[instance][channel].callback;
    6768:	f89d 2007 	ldrb.w	r2, [sp, #7]
    676c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6770:	4932      	ldr	r1, [pc, #200]	; (683c <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    6772:	00d2      	lsls	r2, r2, #3
    6774:	4413      	add	r3, r2
    6776:	011b      	lsls	r3, r3, #4
    6778:	440b      	add	r3, r1
    677a:	3304      	adds	r3, #4
    677c:	681b      	ldr	r3, [r3, #0]
    677e:	9305      	str	r3, [sp, #20]
            callbackParam   = Ftm_Gpt_Ip_u32ChState[instance][channel].callbackParam;
    6780:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6784:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6788:	492c      	ldr	r1, [pc, #176]	; (683c <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    678a:	00d2      	lsls	r2, r2, #3
    678c:	4413      	add	r3, r2
    678e:	011b      	lsls	r3, r3, #4
    6790:	440b      	add	r3, r1
    6792:	3308      	adds	r3, #8
    6794:	781b      	ldrb	r3, [r3, #0]
    6796:	f88d 3013 	strb.w	r3, [sp, #19]

            /* Call GPT upper layer handler */
            if ((TRUE == chInit) && (NULL_PTR != callback))
    679a:	f89d 3019 	ldrb.w	r3, [sp, #25]
    679e:	2b00      	cmp	r3, #0
    67a0:	d007      	beq.n	67b2 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0xfe>
    67a2:	9b05      	ldr	r3, [sp, #20]
    67a4:	2b00      	cmp	r3, #0
    67a6:	d004      	beq.n	67b2 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0xfe>
            {
                callback(callbackParam);
    67a8:	f89d 2013 	ldrb.w	r2, [sp, #19]
    67ac:	9b05      	ldr	r3, [sp, #20]
    67ae:	4610      	mov	r0, r2
    67b0:	4798      	blx	r3
                Ftm_Gpt_Ip_u32TargetValue[instance][channel] = Ftm_Gpt_Ip_u32NextTargetValue[instance][channel];
                Ftm_Gpt_Ip_u32NextTargetValue[instance][channel] = 0x0U;
            }
#endif
            /* Check if channel mode is ONE-SHOT */
            channelMode = Ftm_Gpt_Ip_u32ChState[instance][channel].channelMode;
    67b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    67b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    67ba:	4920      	ldr	r1, [pc, #128]	; (683c <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    67bc:	00d2      	lsls	r2, r2, #3
    67be:	4413      	add	r3, r2
    67c0:	011b      	lsls	r3, r3, #4
    67c2:	440b      	add	r3, r1
    67c4:	330c      	adds	r3, #12
    67c6:	681b      	ldr	r3, [r3, #0]
    67c8:	9303      	str	r3, [sp, #12]
            if(FTM_GPT_IP_CH_MODE_ONESHOT == channelMode)
    67ca:	9b03      	ldr	r3, [sp, #12]
    67cc:	2b01      	cmp	r3, #1
    67ce:	d108      	bne.n	67e2 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x12e>
            {
                Ftm_Gpt_Ip_DisableChannelInterrupt(instance, channel);
    67d0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    67d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    67d8:	4611      	mov	r1, r2
    67da:	4618      	mov	r0, r3
    67dc:	f000 f9ce 	bl	6b7c <Ftm_Gpt_Ip_DisableChannelInterrupt>
                    Ftm_Gpt_Ip_SetCompareValue(instance, channel, (uint32)(oldCmpValue + targetValue));
                }
            }
        }
    }
}
    67e0:	e027      	b.n	6832 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
                targetValue = Ftm_Gpt_Ip_u32TargetValue[instance][channel];
    67e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    67e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    67ea:	4915      	ldr	r1, [pc, #84]	; (6840 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x18c>)
    67ec:	00d2      	lsls	r2, r2, #3
    67ee:	4413      	add	r3, r2
    67f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    67f4:	9302      	str	r3, [sp, #8]
                if ((uint32)(oldCmpValue + targetValue) > FTM_CNT_MAX_VALUE)
    67f6:	9a07      	ldr	r2, [sp, #28]
    67f8:	9b02      	ldr	r3, [sp, #8]
    67fa:	4413      	add	r3, r2
    67fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    6800:	d30d      	bcc.n	681e <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x16a>
                    Ftm_Gpt_Ip_SetCompareValue(instance, channel, (uint32)(targetValue - (FTM_CNT_MAX_VALUE - oldCmpValue)));
    6802:	9a07      	ldr	r2, [sp, #28]
    6804:	9b02      	ldr	r3, [sp, #8]
    6806:	4413      	add	r3, r2
    6808:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
    680c:	3bff      	subs	r3, #255	; 0xff
    680e:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6812:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6816:	461a      	mov	r2, r3
    6818:	f7ff fe88 	bl	652c <Ftm_Gpt_Ip_SetCompareValue>
}
    681c:	e009      	b.n	6832 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
                    Ftm_Gpt_Ip_SetCompareValue(instance, channel, (uint32)(oldCmpValue + targetValue));
    681e:	9a07      	ldr	r2, [sp, #28]
    6820:	9b02      	ldr	r3, [sp, #8]
    6822:	441a      	add	r2, r3
    6824:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6828:	f89d 3007 	ldrb.w	r3, [sp, #7]
    682c:	4618      	mov	r0, r3
    682e:	f7ff fe7d 	bl	652c <Ftm_Gpt_Ip_SetCompareValue>
}
    6832:	bf00      	nop
    6834:	b009      	add	sp, #36	; 0x24
    6836:	f85d fb04 	ldr.w	pc, [sp], #4
    683a:	bf00      	nop
    683c:	1fff8df8 	.word	0x1fff8df8
    6840:	1fff8d68 	.word	0x1fff8d68

00006844 <Ftm_Gpt_Ip_Init>:
* @return        void
* @pre           The data structure including the configuration set required for initializing the GPT driver
* @implements    Ftm_Gpt_Ip_Init_Activity
*/
void Ftm_Gpt_Ip_Init(uint8 instance, const Ftm_Gpt_Ip_InstanceConfigType *configPtr)
{
    6844:	b500      	push	{lr}
    6846:	b083      	sub	sp, #12
    6848:	4603      	mov	r3, r0
    684a:	9100      	str	r1, [sp, #0]
    684c:	f88d 3007 	strb.w	r3, [sp, #7]
#endif
    /* Enable register access from user mode, if enabled from configuration file */
    Call_Ftm_Gpt_Ip_SetUserAccessAllowed((uint32)ftmGptBase[instance]);

    /* Check the FTM counter modes */
    if (FTM_GPT_IP_MODE_UP_TIMER == configPtr->mode)
    6850:	9b00      	ldr	r3, [sp, #0]
    6852:	68db      	ldr	r3, [r3, #12]
    6854:	2b01      	cmp	r3, #1
    6856:	d12a      	bne.n	68ae <Ftm_Gpt_Ip_Init+0x6a>
    {
        /* Set clock and prescalerValue FTM */
        Ftm_Gpt_Ip_SetPrescaler(instance, configPtr->clockPrescaler);
    6858:	9b00      	ldr	r3, [sp, #0]
    685a:	7a1a      	ldrb	r2, [r3, #8]
    685c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6860:	4611      	mov	r1, r2
    6862:	4618      	mov	r0, r3
    6864:	f7ff fe06 	bl	6474 <Ftm_Gpt_Ip_SetPrescaler>
        /* Set FTM counter clock source */
        Ftm_Gpt_Ip_SetClockSource(instance, configPtr->clocksource);
    6868:	9b00      	ldr	r3, [sp, #0]
    686a:	685a      	ldr	r2, [r3, #4]
    686c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6870:	4611      	mov	r1, r2
    6872:	4618      	mov	r0, r3
    6874:	f7ff fdda 	bl	642c <Ftm_Gpt_Ip_SetClockSource>

        /* Set freeze bits */
        Ftm_Gpt_Ip_SetFreezeBits(instance, configPtr->freezeBits);
    6878:	9b00      	ldr	r3, [sp, #0]
    687a:	781a      	ldrb	r2, [r3, #0]
    687c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6880:	4611      	mov	r1, r2
    6882:	4618      	mov	r0, r3
    6884:	f7ff fd20 	bl	62c8 <Ftm_Gpt_Ip_SetFreezeBits>

        /*Set Counter register and Initial Counter Value*/
        Ftm_Gpt_Ip_SetCounterInitVal(instance, 1U);
    6888:	f89d 3007 	ldrb.w	r3, [sp, #7]
    688c:	2101      	movs	r1, #1
    688e:	4618      	mov	r0, r3
    6890:	f7ff fd4a 	bl	6328 <Ftm_Gpt_Ip_SetCounterInitVal>

        /* write the Ftm Modulo Register with 0xFFFF */
        Ftm_Gpt_Ip_WriteModulo(instance, 0xFFFFU);
    6894:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6898:	f64f 71ff 	movw	r1, #65535	; 0xffff
    689c:	4618      	mov	r0, r3
    689e:	f7ff fe5f 	bl	6560 <Ftm_Gpt_Ip_WriteModulo>

        /* set FTM Enable bit */
        Ftm_Gpt_Ip_SetEnFtmModule(instance, TRUE);
    68a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68a6:	2101      	movs	r1, #1
    68a8:	4618      	mov	r0, r3
    68aa:	f7ff fe09 	bl	64c0 <Ftm_Gpt_Ip_SetEnFtmModule>
#if (FTM_GPT_IP_SET_CLOCK_MODE == STD_ON)
    Ftm_Gpt_Ip_u32InstancePrescaler[instance].clockPrescaler = configPtr->clockPrescaler;
    Ftm_Gpt_Ip_u32InstancePrescaler[instance].clockAlternatePrescaler = configPtr->clockAlternatePrescaler;
#endif
    /* set FTM instance status to initialized */
    Ftm_Gpt_Ip_u32InstanceState[instance] = FTM_GPT_IP_STATUS_INITIALIZED;
    68ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68b2:	4a04      	ldr	r2, [pc, #16]	; (68c4 <Ftm_Gpt_Ip_Init+0x80>)
    68b4:	2101      	movs	r1, #1
    68b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    68ba:	bf00      	nop
    68bc:	b003      	add	sp, #12
    68be:	f85d fb04 	ldr.w	pc, [sp], #4
    68c2:	bf00      	nop
    68c4:	1fff8de8 	.word	0x1fff8de8

000068c8 <Ftm_Gpt_Ip_InitChannel>:
* @return        void
* @pre           The data structure including the configuration set required for initializing the GPT driver
* @implements    Ftm_Gpt_Ip_InitChannel_Activity
*/
void Ftm_Gpt_Ip_InitChannel(uint8 instance, const Ftm_Gpt_Ip_ChannelConfigType *configPtr)
{
    68c8:	b500      	push	{lr}
    68ca:	b083      	sub	sp, #12
    68cc:	4603      	mov	r3, r0
    68ce:	9100      	str	r1, [sp, #0]
    68d0:	f88d 3007 	strb.w	r3, [sp, #7]
    DevAssert(FTM_INSTANCE_COUNT > instance);
    DevAssert(FTM_CONTROLS_COUNT > configPtr->hwChannel);
#endif

    /* Disable channels interrupt bit */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, configPtr->hwChannel, FALSE);
    68d4:	9b00      	ldr	r3, [sp, #0]
    68d6:	7819      	ldrb	r1, [r3, #0]
    68d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68dc:	2200      	movs	r2, #0
    68de:	4618      	mov	r0, r3
    68e0:	f7ff fd74 	bl	63cc <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear ClearInterruptFlag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, configPtr->hwChannel);
    68e4:	9b00      	ldr	r3, [sp, #0]
    68e6:	781a      	ldrb	r2, [r3, #0]
    68e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68ec:	4611      	mov	r1, r2
    68ee:	4618      	mov	r0, r3
    68f0:	f7ff fd46 	bl	6380 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Set Compare Value register to 0xFFFF */
    Ftm_Gpt_Ip_SetCompareValue(instance, configPtr->hwChannel, 0xFFFFU);
    68f4:	9b00      	ldr	r3, [sp, #0]
    68f6:	7819      	ldrb	r1, [r3, #0]
    68f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6900:	4618      	mov	r0, r3
    6902:	f7ff fe13 	bl	652c <Ftm_Gpt_Ip_SetCompareValue>
    /* Set bit MSA */
    Ftm_Gpt_Ip_ModeSelectA(instance, configPtr->hwChannel, TRUE);
    6906:	9b00      	ldr	r3, [sp, #0]
    6908:	7819      	ldrb	r1, [r3, #0]
    690a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    690e:	2201      	movs	r2, #1
    6910:	4618      	mov	r0, r3
    6912:	f7ff fe3b 	bl	658c <Ftm_Gpt_Ip_ModeSelectA>
     (defined FTM_4_CH_4_CH_5_ISR_USED) || (defined FTM_4_CH_6_CH_7_ISR_USED) || (defined FTM_5_CH_0_CH_1_ISR_USED) || \
     (defined FTM_5_CH_2_CH_3_ISR_USED) || (defined FTM_5_CH_4_CH_5_ISR_USED) || (defined FTM_5_CH_6_CH_7_ISR_USED) || \
     (defined FTM_6_CH_0_CH_1_ISR_USED) || (defined FTM_6_CH_2_CH_3_ISR_USED) || (defined FTM_6_CH_4_CH_5_ISR_USED) || \
     (defined FTM_6_CH_6_CH_7_ISR_USED) || (defined FTM_7_CH_0_CH_1_ISR_USED) || (defined FTM_7_CH_2_CH_3_ISR_USED) || \
     (defined FTM_7_CH_4_CH_5_ISR_USED) || (defined FTM_7_CH_6_CH_7_ISR_USED))
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].chInit = TRUE;
    6916:	f89d 3007 	ldrb.w	r3, [sp, #7]
    691a:	9a00      	ldr	r2, [sp, #0]
    691c:	7812      	ldrb	r2, [r2, #0]
    691e:	4611      	mov	r1, r2
    6920:	4a1a      	ldr	r2, [pc, #104]	; (698c <Ftm_Gpt_Ip_InitChannel+0xc4>)
    6922:	00db      	lsls	r3, r3, #3
    6924:	440b      	add	r3, r1
    6926:	011b      	lsls	r3, r3, #4
    6928:	4413      	add	r3, r2
    692a:	2201      	movs	r2, #1
    692c:	701a      	strb	r2, [r3, #0]
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].callback = configPtr->callback;
    692e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6932:	9a00      	ldr	r2, [sp, #0]
    6934:	7812      	ldrb	r2, [r2, #0]
    6936:	4610      	mov	r0, r2
    6938:	9a00      	ldr	r2, [sp, #0]
    693a:	6852      	ldr	r2, [r2, #4]
    693c:	4913      	ldr	r1, [pc, #76]	; (698c <Ftm_Gpt_Ip_InitChannel+0xc4>)
    693e:	00db      	lsls	r3, r3, #3
    6940:	4403      	add	r3, r0
    6942:	011b      	lsls	r3, r3, #4
    6944:	440b      	add	r3, r1
    6946:	3304      	adds	r3, #4
    6948:	601a      	str	r2, [r3, #0]
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].callbackParam = configPtr->callbackParam;
    694a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    694e:	9a00      	ldr	r2, [sp, #0]
    6950:	7812      	ldrb	r2, [r2, #0]
    6952:	4610      	mov	r0, r2
    6954:	9a00      	ldr	r2, [sp, #0]
    6956:	7a11      	ldrb	r1, [r2, #8]
    6958:	4a0c      	ldr	r2, [pc, #48]	; (698c <Ftm_Gpt_Ip_InitChannel+0xc4>)
    695a:	00db      	lsls	r3, r3, #3
    695c:	4403      	add	r3, r0
    695e:	011b      	lsls	r3, r3, #4
    6960:	4413      	add	r3, r2
    6962:	3308      	adds	r3, #8
    6964:	460a      	mov	r2, r1
    6966:	701a      	strb	r2, [r3, #0]
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].channelMode = configPtr->channelMode;
    6968:	f89d 3007 	ldrb.w	r3, [sp, #7]
    696c:	9a00      	ldr	r2, [sp, #0]
    696e:	7812      	ldrb	r2, [r2, #0]
    6970:	4610      	mov	r0, r2
    6972:	9a00      	ldr	r2, [sp, #0]
    6974:	68d2      	ldr	r2, [r2, #12]
    6976:	4905      	ldr	r1, [pc, #20]	; (698c <Ftm_Gpt_Ip_InitChannel+0xc4>)
    6978:	00db      	lsls	r3, r3, #3
    697a:	4403      	add	r3, r0
    697c:	011b      	lsls	r3, r3, #4
    697e:	440b      	add	r3, r1
    6980:	330c      	adds	r3, #12
    6982:	601a      	str	r2, [r3, #0]
#endif
}
    6984:	bf00      	nop
    6986:	b003      	add	sp, #12
    6988:	f85d fb04 	ldr.w	pc, [sp], #4
    698c:	1fff8df8 	.word	0x1fff8df8

00006990 <Ftm_Gpt_Ip_Deinit>:
* @return        void
* @pre           The data structure including the configuration set required for initializing the GPT driver.
* @implements    Ftm_Gpt_Ip_Deinit_Activity
*/
void Ftm_Gpt_Ip_Deinit(uint8 instance)
{
    6990:	b500      	push	{lr}
    6992:	b085      	sub	sp, #20
    6994:	4603      	mov	r3, r0
    6996:	f88d 3007 	strb.w	r3, [sp, #7]
    #endif

    uint8 channelIndex;

    /* Reset all channels to default */
    for (channelIndex = 0; channelIndex < FTM_CONTROLS_COUNT; channelIndex++)
    699a:	2300      	movs	r3, #0
    699c:	f88d 300f 	strb.w	r3, [sp, #15]
    69a0:	e014      	b.n	69cc <Ftm_Gpt_Ip_Deinit+0x3c>
    {
        /* Disable interrupts */
        Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channelIndex, FALSE );
    69a2:	f89d 100f 	ldrb.w	r1, [sp, #15]
    69a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69aa:	2200      	movs	r2, #0
    69ac:	4618      	mov	r0, r3
    69ae:	f7ff fd0d 	bl	63cc <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
        /*Clear interrupt flags*/
        Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channelIndex);
    69b2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    69b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69ba:	4611      	mov	r1, r2
    69bc:	4618      	mov	r0, r3
    69be:	f7ff fcdf 	bl	6380 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    for (channelIndex = 0; channelIndex < FTM_CONTROLS_COUNT; channelIndex++)
    69c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    69c6:	3301      	adds	r3, #1
    69c8:	f88d 300f 	strb.w	r3, [sp, #15]
    69cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    69d0:	2b07      	cmp	r3, #7
    69d2:	d9e6      	bls.n	69a2 <Ftm_Gpt_Ip_Deinit+0x12>
    }
    /* Set clock source as 'No clock'. This in effect disables the FTM counter */
    Ftm_Gpt_Ip_SetClockSource(instance, FTM_GPT_IP_CLOCK_SOURCE_NONE);
    69d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69d8:	2100      	movs	r1, #0
    69da:	4618      	mov	r0, r3
    69dc:	f7ff fd26 	bl	642c <Ftm_Gpt_Ip_SetClockSource>
    /* clear FTM Enable bit */
    Ftm_Gpt_Ip_SetEnFtmModule(instance, FALSE);
    69e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69e4:	2100      	movs	r1, #0
    69e6:	4618      	mov	r0, r3
    69e8:	f7ff fd6a 	bl	64c0 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* clearde freeze bits */
    Ftm_Gpt_Ip_SetFreezeBits(instance, FALSE);
    69ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69f0:	2100      	movs	r1, #0
    69f2:	4618      	mov	r0, r3
    69f4:	f7ff fc68 	bl	62c8 <Ftm_Gpt_Ip_SetFreezeBits>
    /* Set Counter register to 0 and Initial Counter Value to 0 */
    Ftm_Gpt_Ip_SetCounterInitVal(instance, 0U);
    69f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69fc:	2100      	movs	r1, #0
    69fe:	4618      	mov	r0, r3
    6a00:	f7ff fc92 	bl	6328 <Ftm_Gpt_Ip_SetCounterInitVal>
    Ftm_Gpt_Ip_SetCounter(instance, 0U);
    6a04:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a08:	2100      	movs	r1, #0
    6a0a:	4618      	mov	r0, r3
    6a0c:	f7ff fca2 	bl	6354 <Ftm_Gpt_Ip_SetCounter>
    /* set FTM instance status to uninitialized */
    Ftm_Gpt_Ip_u32InstanceState[instance] = FTM_GPT_IP_STATUS_UNINITIALIZED;
    6a10:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a14:	4a03      	ldr	r2, [pc, #12]	; (6a24 <Ftm_Gpt_Ip_Deinit+0x94>)
    6a16:	2100      	movs	r1, #0
    6a18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    6a1c:	bf00      	nop
    6a1e:	b005      	add	sp, #20
    6a20:	f85d fb04 	ldr.w	pc, [sp], #4
    6a24:	1fff8de8 	.word	0x1fff8de8

00006a28 <Ftm_Gpt_Ip_StartCounting>:
* @return        void
* @pre           The driver needs to be initialized. This function is called for starting the FTM timer channel.
* @implements    Ftm_Gpt_Ip_StartCounting_Activity
*/
void Ftm_Gpt_Ip_StartCounting(uint8 instance, uint8 channel, uint16 compareValue)
{
    6a28:	b500      	push	{lr}
    6a2a:	b085      	sub	sp, #20
    6a2c:	4603      	mov	r3, r0
    6a2e:	f88d 3007 	strb.w	r3, [sp, #7]
    6a32:	460b      	mov	r3, r1
    6a34:	f88d 3006 	strb.w	r3, [sp, #6]
    6a38:	4613      	mov	r3, r2
    6a3a:	f8ad 3004 	strh.w	r3, [sp, #4]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
    DevAssert(FTM_INSTANCE_COUNT > instance);
    DevAssert(FTM_CONTROLS_COUNT > channel);
#endif
    uint32 counterValue;
    uint32 currentCntValue = Ftm_Gpt_Ip_GetCntValue(instance);
    6a3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a42:	4618      	mov	r0, r3
    6a44:	f7ff fc18 	bl	6278 <Ftm_Gpt_Ip_GetCntValue>
    6a48:	9002      	str	r0, [sp, #8]

    if ((uint32)(currentCntValue + compareValue) > FTM_CNT_MAX_VALUE)
    6a4a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6a4e:	9b02      	ldr	r3, [sp, #8]
    6a50:	4413      	add	r3, r2
    6a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    6a56:	d308      	bcc.n	6a6a <Ftm_Gpt_Ip_StartCounting+0x42>
    {
        counterValue = (uint32)(compareValue - (FTM_CNT_MAX_VALUE - currentCntValue));
    6a58:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6a5c:	9b02      	ldr	r3, [sp, #8]
    6a5e:	4413      	add	r3, r2
    6a60:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
    6a64:	3bff      	subs	r3, #255	; 0xff
    6a66:	9303      	str	r3, [sp, #12]
    6a68:	e004      	b.n	6a74 <Ftm_Gpt_Ip_StartCounting+0x4c>
    }
    else
    {
        counterValue = (uint32)(currentCntValue + compareValue);
    6a6a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6a6e:	9a02      	ldr	r2, [sp, #8]
    6a70:	4413      	add	r3, r2
    6a72:	9303      	str	r3, [sp, #12]
    }
    /* Set new compare value */
    Ftm_Gpt_Ip_SetCompareValue(instance, channel, counterValue);
    6a74:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6a78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a7c:	9a03      	ldr	r2, [sp, #12]
    6a7e:	4618      	mov	r0, r3
    6a80:	f7ff fd54 	bl	652c <Ftm_Gpt_Ip_SetCompareValue>
    /* Save compare value */
    Ftm_Gpt_Ip_u32TargetValue[instance][channel] = compareValue;
    6a84:	f89d 1007 	ldrb.w	r1, [sp, #7]
    6a88:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6a8c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6a90:	480c      	ldr	r0, [pc, #48]	; (6ac4 <Ftm_Gpt_Ip_StartCounting+0x9c>)
    6a92:	00c9      	lsls	r1, r1, #3
    6a94:	440b      	add	r3, r1
    6a96:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    /* Clear CHF flag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance,channel);
    6a9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6a9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6aa2:	4611      	mov	r1, r2
    6aa4:	4618      	mov	r0, r3
    6aa6:	f7ff fc6b 	bl	6380 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Enable interrupt */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, TRUE);
    6aaa:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6aae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ab2:	2201      	movs	r2, #1
    6ab4:	4618      	mov	r0, r3
    6ab6:	f7ff fc89 	bl	63cc <Ftm_Gpt_Ip_SetChannelEnableInterrupt>

}
    6aba:	bf00      	nop
    6abc:	b005      	add	sp, #20
    6abe:	f85d fb04 	ldr.w	pc, [sp], #4
    6ac2:	bf00      	nop
    6ac4:	1fff8d68 	.word	0x1fff8d68

00006ac8 <Ftm_Gpt_Ip_StartTimer>:
 *                  - enables the FTM counter
 * @pre           The driver needs to be initialized.
 * @implements    Ftm_Gpt_Ip_StartTimer_Activity
 */
void Ftm_Gpt_Ip_StartTimer(uint8 instance, uint16 counterValue)
{
    6ac8:	b500      	push	{lr}
    6aca:	b083      	sub	sp, #12
    6acc:	4603      	mov	r3, r0
    6ace:	460a      	mov	r2, r1
    6ad0:	f88d 3007 	strb.w	r3, [sp, #7]
    6ad4:	4613      	mov	r3, r2
    6ad6:	f8ad 3004 	strh.w	r3, [sp, #4]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
    DevAssert(FTM_INSTANCE_COUNT > instance);
#endif
    if (instance < FTM_INSTANCE_COUNT)
    6ada:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ade:	2b03      	cmp	r3, #3
    6ae0:	d814      	bhi.n	6b0c <Ftm_Gpt_Ip_StartTimer+0x44>
    {
        if (FTM_GPT_IP_STATUS_INITIALIZED == Ftm_Gpt_Ip_u32InstanceState[instance])
    6ae2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ae6:	4a0b      	ldr	r2, [pc, #44]	; (6b14 <Ftm_Gpt_Ip_StartTimer+0x4c>)
    6ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6aec:	2b01      	cmp	r3, #1
    6aee:	d10d      	bne.n	6b0c <Ftm_Gpt_Ip_StartTimer+0x44>
        {
            /* Set the new value counter */
            Ftm_Gpt_Ip_SetCounterInitVal(instance, counterValue);
    6af0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6af4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6af8:	4611      	mov	r1, r2
    6afa:	4618      	mov	r0, r3
    6afc:	f7ff fc14 	bl	6328 <Ftm_Gpt_Ip_SetCounterInitVal>
            /* set FTM Enable bit */
            Ftm_Gpt_Ip_SetEnFtmModule(instance, TRUE);
    6b00:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b04:	2101      	movs	r1, #1
    6b06:	4618      	mov	r0, r3
    6b08:	f7ff fcda 	bl	64c0 <Ftm_Gpt_Ip_SetEnFtmModule>
        }
    }
}
    6b0c:	bf00      	nop
    6b0e:	b003      	add	sp, #12
    6b10:	f85d fb04 	ldr.w	pc, [sp], #4
    6b14:	1fff8de8 	.word	0x1fff8de8

00006b18 <Ftm_Gpt_Ip_StopTimer>:
* @return        void
* @pre           The driver needs to be initialized. This function is called for stoping the FTM timer channel.
* @implements    Ftm_Gpt_Ip_StopTimer_Activity
*/
void Ftm_Gpt_Ip_StopTimer(uint8 instance)
{
    6b18:	b500      	push	{lr}
    6b1a:	b083      	sub	sp, #12
    6b1c:	4603      	mov	r3, r0
    6b1e:	f88d 3007 	strb.w	r3, [sp, #7]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
DevAssert(FTM_INSTANCE_COUNT > instance);
#endif
    /* clear FTM Enable bit */
    Ftm_Gpt_Ip_SetEnFtmModule(instance, FALSE);
    6b22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b26:	2100      	movs	r1, #0
    6b28:	4618      	mov	r0, r3
    6b2a:	f7ff fcc9 	bl	64c0 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* Set clock source as 'No clock'. This in effect disables the FTM counter */
    Ftm_Gpt_Ip_SetClockSource(instance, FTM_GPT_IP_CLOCK_SOURCE_NONE);
    6b2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b32:	2100      	movs	r1, #0
    6b34:	4618      	mov	r0, r3
    6b36:	f7ff fc79 	bl	642c <Ftm_Gpt_Ip_SetClockSource>
}
    6b3a:	bf00      	nop
    6b3c:	b003      	add	sp, #12
    6b3e:	f85d fb04 	ldr.w	pc, [sp], #4

00006b42 <Ftm_Gpt_Ip_EnableChannelInterrupt>:
* @return       void
* @pre          The driver needs to be initialized.
* @implements   Ftm_Gpt_Ip_EnableChannelInterrupt_Activity
*/
void Ftm_Gpt_Ip_EnableChannelInterrupt(uint8 instance, uint8 channel)
{
    6b42:	b500      	push	{lr}
    6b44:	b083      	sub	sp, #12
    6b46:	4603      	mov	r3, r0
    6b48:	460a      	mov	r2, r1
    6b4a:	f88d 3007 	strb.w	r3, [sp, #7]
    6b4e:	4613      	mov	r3, r2
    6b50:	f88d 3006 	strb.w	r3, [sp, #6]
DevAssert(FTM_INSTANCE_COUNT > instance);
DevAssert(FTM_CONTROLS_COUNT > channel);
#endif

     /* Clear interrupt flag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6b54:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6b58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b5c:	4611      	mov	r1, r2
    6b5e:	4618      	mov	r0, r3
    6b60:	f7ff fc0e 	bl	6380 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Enable channel interrupt */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, TRUE);
    6b64:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6b68:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b6c:	2201      	movs	r2, #1
    6b6e:	4618      	mov	r0, r3
    6b70:	f7ff fc2c 	bl	63cc <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
}
    6b74:	bf00      	nop
    6b76:	b003      	add	sp, #12
    6b78:	f85d fb04 	ldr.w	pc, [sp], #4

00006b7c <Ftm_Gpt_Ip_DisableChannelInterrupt>:
* @return        void
* @pre           The driver needs to be initialized.
* @implements    Ftm_Gpt_Ip_DisableChannelInterrupt_Activity
*/
void Ftm_Gpt_Ip_DisableChannelInterrupt(uint8 instance, uint8 channel)
{
    6b7c:	b500      	push	{lr}
    6b7e:	b083      	sub	sp, #12
    6b80:	4603      	mov	r3, r0
    6b82:	460a      	mov	r2, r1
    6b84:	f88d 3007 	strb.w	r3, [sp, #7]
    6b88:	4613      	mov	r3, r2
    6b8a:	f88d 3006 	strb.w	r3, [sp, #6]
DevAssert(FTM_INSTANCE_COUNT > instance);
DevAssert(FTM_CONTROLS_COUNT > channel);
#endif

    /* Disable interrupt */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, FALSE);
    6b8e:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6b92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b96:	2200      	movs	r2, #0
    6b98:	4618      	mov	r0, r3
    6b9a:	f7ff fc17 	bl	63cc <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear interrupt flag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6b9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6ba2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ba6:	4611      	mov	r1, r2
    6ba8:	4618      	mov	r0, r3
    6baa:	f7ff fbe9 	bl	6380 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
}
    6bae:	bf00      	nop
    6bb0:	b003      	add	sp, #12
    6bb2:	f85d fb04 	ldr.w	pc, [sp], #4

00006bb6 <Ftm_Gpt_Ip_SetHalfCycleReloadPoint>:
* @return
* @pre           The driver needs to be initialized.
* @implements    Ftm_Gpt_Ip_SetHalfCycleReloadPoint_Activity
*/
void Ftm_Gpt_Ip_SetHalfCycleReloadPoint(uint8 instance, uint16 reloadPoint)
{
    6bb6:	b500      	push	{lr}
    6bb8:	b083      	sub	sp, #12
    6bba:	4603      	mov	r3, r0
    6bbc:	460a      	mov	r2, r1
    6bbe:	f88d 3007 	strb.w	r3, [sp, #7]
    6bc2:	4613      	mov	r3, r2
    6bc4:	f8ad 3004 	strh.w	r3, [sp, #4]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
DevAssert(FTM_INSTANCE_COUNT > instance);
#endif
    Ftm_Gpt_Ip_SetHalfCycleValue(ftmGptBase[instance], reloadPoint);
    6bc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bcc:	4a06      	ldr	r2, [pc, #24]	; (6be8 <Ftm_Gpt_Ip_SetHalfCycleReloadPoint+0x32>)
    6bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bd2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6bd6:	4611      	mov	r1, r2
    6bd8:	4618      	mov	r0, r3
    6bda:	f7ff fd21 	bl	6620 <Ftm_Gpt_Ip_SetHalfCycleValue>
}
    6bde:	bf00      	nop
    6be0:	b003      	add	sp, #12
    6be2:	f85d fb04 	ldr.w	pc, [sp], #4
    6be6:	bf00      	nop
    6be8:	0000c118 	.word	0x0000c118

00006bec <Ftm_Gpt_Ip_StartPredefTimer>:
* @param[in]  bFreezeEnable   enables/disables freeze bits
* @return     void
* @pre        The driver needs to be initialized
*/
void Ftm_Gpt_Ip_StartPredefTimer (uint8 instance,uint8 channel, uint8 uPrescaler, uint8 clocksource, boolean bFreezeEnable)
{
    6bec:	b510      	push	{r4, lr}
    6bee:	b082      	sub	sp, #8
    6bf0:	4604      	mov	r4, r0
    6bf2:	4608      	mov	r0, r1
    6bf4:	4611      	mov	r1, r2
    6bf6:	461a      	mov	r2, r3
    6bf8:	4623      	mov	r3, r4
    6bfa:	f88d 3007 	strb.w	r3, [sp, #7]
    6bfe:	4603      	mov	r3, r0
    6c00:	f88d 3006 	strb.w	r3, [sp, #6]
    6c04:	460b      	mov	r3, r1
    6c06:	f88d 3005 	strb.w	r3, [sp, #5]
    6c0a:	4613      	mov	r3, r2
    6c0c:	f88d 3004 	strb.w	r3, [sp, #4]

    /* Enable register access from user mode, if enabled from configuration file */
    Call_Ftm_Gpt_Ip_SetUserAccessAllowed((uint32)ftmGptBase[instance]);

    /* Disable all interrupts on this channel */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, FALSE);
    6c10:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6c14:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c18:	2200      	movs	r2, #0
    6c1a:	4618      	mov	r0, r3
    6c1c:	f7ff fbd6 	bl	63cc <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear interrupt flags */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6c20:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6c24:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c28:	4611      	mov	r1, r2
    6c2a:	4618      	mov	r0, r3
    6c2c:	f7ff fba8 	bl	6380 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Disable TOIE flags */
    ftmGptBase[instance]-> SC &= (~(FTM_SC_TOIE_MASK));
    6c30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c34:	4a35      	ldr	r2, [pc, #212]	; (6d0c <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c3a:	681a      	ldr	r2, [r3, #0]
    6c3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c40:	4932      	ldr	r1, [pc, #200]	; (6d0c <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    6c46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    6c4a:	601a      	str	r2, [r3, #0]
    /* Configure FTM as a Free-Running Timer by setting FTMEN=1, CTNIN=0, MOD=0xFFFF, QUADEN=0, CPWMS=0*/
    Ftm_Gpt_Ip_SetEnFtmModule(instance, TRUE);
    6c4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c50:	2101      	movs	r1, #1
    6c52:	4618      	mov	r0, r3
    6c54:	f7ff fc34 	bl	64c0 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* Initial Counter Value to 0 */
    Ftm_Gpt_Ip_SetCounterInitVal(instance, 0U);
    6c58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c5c:	2100      	movs	r1, #0
    6c5e:	4618      	mov	r0, r3
    6c60:	f7ff fb62 	bl	6328 <Ftm_Gpt_Ip_SetCounterInitVal>
    /* write the Ftm Modulo Register with 0xFFFF */
    Ftm_Gpt_Ip_WriteModulo(instance, 0xFFFFU);
    6c64:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c68:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6c6c:	4618      	mov	r0, r3
    6c6e:	f7ff fc77 	bl	6560 <Ftm_Gpt_Ip_WriteModulo>
    /* Set Compare Value register to 0xFFFF */
    Ftm_Gpt_Ip_SetCompareValue(instance, channel, 0xFFFFU);
    6c72:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6c76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6c7e:	4618      	mov	r0, r3
    6c80:	f7ff fc54 	bl	652c <Ftm_Gpt_Ip_SetCompareValue>
    /* Enter EA_28*/
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26();
    6c84:	f002 f848 	bl	8d18 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26>
    /* Clear bit QUADEN */
    ftmGptBase[instance]->QDCTRL &= (~(FTM_QDCTRL_QUADEN_MASK));
    6c88:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c8c:	4a1f      	ldr	r2, [pc, #124]	; (6d0c <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c92:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    6c96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c9a:	491c      	ldr	r1, [pc, #112]	; (6d0c <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    6ca0:	f022 0201 	bic.w	r2, r2, #1
    6ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    /* Clear bit CPWMS */
    ftmGptBase[instance]->SC &= (~(FTM_SC_CPWMS_MASK));
    6ca8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cac:	4a17      	ldr	r2, [pc, #92]	; (6d0c <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cb2:	681a      	ldr	r2, [r3, #0]
    6cb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cb8:	4914      	ldr	r1, [pc, #80]	; (6d0c <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6cba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    6cbe:	f022 0220 	bic.w	r2, r2, #32
    6cc2:	601a      	str	r2, [r3, #0]
    /* Exit EA_28*/
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26();
    6cc4:	f002 f854 	bl	8d70 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26>

    /* Configure Predef Timer */
    Ftm_Gpt_Ip_SetPrescaler(instance, uPrescaler);
    6cc8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6ccc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cd0:	4611      	mov	r1, r2
    6cd2:	4618      	mov	r0, r3
    6cd4:	f7ff fbce 	bl	6474 <Ftm_Gpt_Ip_SetPrescaler>
    /* Set FTM counter clock source */
    Ftm_Gpt_Ip_SetClockSource(instance, (Ftm_Gpt_Ip_ClockSource)clocksource);
    6cd8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    6cdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ce0:	4611      	mov	r1, r2
    6ce2:	4618      	mov	r0, r3
    6ce4:	f7ff fba2 	bl	642c <Ftm_Gpt_Ip_SetClockSource>
    /* Set freeze bits */
    Ftm_Gpt_Ip_SetFreezeBits(instance, bFreezeEnable);
    6ce8:	f89d 2010 	ldrb.w	r2, [sp, #16]
    6cec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cf0:	4611      	mov	r1, r2
    6cf2:	4618      	mov	r0, r3
    6cf4:	f7ff fae8 	bl	62c8 <Ftm_Gpt_Ip_SetFreezeBits>
    /* Intialize FTM timer by writing any value to CNT register when CLKS not equal 0 */
    ftmGptBase[instance]->CNT = (uint32)(((uint32)1U << FTM_CNT_COUNT_SHIFT) & FTM_CNT_COUNT_MASK);
    6cf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cfc:	4a03      	ldr	r2, [pc, #12]	; (6d0c <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d02:	2201      	movs	r2, #1
    6d04:	605a      	str	r2, [r3, #4]
}
    6d06:	bf00      	nop
    6d08:	b002      	add	sp, #8
    6d0a:	bd10      	pop	{r4, pc}
    6d0c:	0000c118 	.word	0x0000c118

00006d10 <Ftm_Gpt_Ip_StopPredefTimer>:
* @return     void
* @pre        The driver needs to be initialized
*
*/
void Ftm_Gpt_Ip_StopPredefTimer (uint8 instance, uint8 channel)
{
    6d10:	b500      	push	{lr}
    6d12:	b083      	sub	sp, #12
    6d14:	4603      	mov	r3, r0
    6d16:	460a      	mov	r2, r1
    6d18:	f88d 3007 	strb.w	r3, [sp, #7]
    6d1c:	4613      	mov	r3, r2
    6d1e:	f88d 3006 	strb.w	r3, [sp, #6]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
    DevAssert(FTM_INSTANCE_COUNT > instance);
    DevAssert(FTM_CONTROLS_COUNT > channel);
#endif
    /* Set clock source as 'No clock'. This in effect disables the FTM counter */
    Ftm_Gpt_Ip_SetClockSource(instance, FTM_GPT_IP_CLOCK_SOURCE_NONE);
    6d22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d26:	2100      	movs	r1, #0
    6d28:	4618      	mov	r0, r3
    6d2a:	f7ff fb7f 	bl	642c <Ftm_Gpt_Ip_SetClockSource>
    /* Disable all interrupts on this channel */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, FALSE);
    6d2e:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6d32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d36:	2200      	movs	r2, #0
    6d38:	4618      	mov	r0, r3
    6d3a:	f7ff fb47 	bl	63cc <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear interrupt flags */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6d3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6d42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d46:	4611      	mov	r1, r2
    6d48:	4618      	mov	r0, r3
    6d4a:	f7ff fb19 	bl	6380 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* clear FTM Enable bit */
    Ftm_Gpt_Ip_SetEnFtmModule(instance, FALSE);
    6d4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d52:	2100      	movs	r1, #0
    6d54:	4618      	mov	r0, r3
    6d56:	f7ff fbb3 	bl	64c0 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* Set Counter register to 0 and Initial Counter Value to 0 */
    Ftm_Gpt_Ip_SetCounterInitVal(instance, 0U);
    6d5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d5e:	2100      	movs	r1, #0
    6d60:	4618      	mov	r0, r3
    6d62:	f7ff fae1 	bl	6328 <Ftm_Gpt_Ip_SetCounterInitVal>
    Ftm_Gpt_Ip_SetCounter(instance, 0U);
    6d66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d6a:	2100      	movs	r1, #0
    6d6c:	4618      	mov	r0, r3
    6d6e:	f7ff faf1 	bl	6354 <Ftm_Gpt_Ip_SetCounter>
    Ftm_Gpt_Ip_SetCompareValue(instance, channel, 0U);
    6d72:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6d76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d7a:	2200      	movs	r2, #0
    6d7c:	4618      	mov	r0, r3
    6d7e:	f7ff fbd5 	bl	652c <Ftm_Gpt_Ip_SetCompareValue>
    Ftm_Gpt_Ip_WriteModulo(instance, 0U );
    6d82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d86:	2100      	movs	r1, #0
    6d88:	4618      	mov	r0, r3
    6d8a:	f7ff fbe9 	bl	6560 <Ftm_Gpt_Ip_WriteModulo>
    /* Set bit MSA */
    Ftm_Gpt_Ip_ModeSelectA(instance, channel, FALSE);
    6d8e:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6d92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d96:	2200      	movs	r2, #0
    6d98:	4618      	mov	r0, r3
    6d9a:	f7ff fbf7 	bl	658c <Ftm_Gpt_Ip_ModeSelectA>
}
    6d9e:	bf00      	nop
    6da0:	b003      	add	sp, #12
    6da2:	f85d fb04 	ldr.w	pc, [sp], #4

00006da6 <FTM_0_CH_0_CH_1_ISR>:
/**
 * @brief          Independent interrupt handler.
 * @details        Interrupt handler for FTM module 0 channel 0 - channel 1.
 */
ISR(FTM_0_CH_0_CH_1_ISR)
{
    6da6:	b500      	push	{lr}
    6da8:	b083      	sub	sp, #12
    uint8 channel = 0U;
    6daa:	2300      	movs	r3, #0
    6dac:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 instance = 0U;
    6db0:	2300      	movs	r3, #0
    6db2:	f88d 3006 	strb.w	r3, [sp, #6]

    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6db6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6dba:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6dbe:	4611      	mov	r1, r2
    6dc0:	4618      	mov	r0, r3
    6dc2:	f7ff fc59 	bl	6678 <Ftm_Gpt_Ip_GetChannelEventStatus>
    6dc6:	4603      	mov	r3, r0
    6dc8:	2b00      	cmp	r3, #0
    6dca:	d007      	beq.n	6ddc <FTM_0_CH_0_CH_1_ISR+0x36>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6dcc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6dd0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6dd4:	4611      	mov	r1, r2
    6dd6:	4618      	mov	r0, r3
    6dd8:	f7ff fc6c 	bl	66b4 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    channel++;
    6ddc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6de0:	3301      	adds	r3, #1
    6de2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6de6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6dea:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6dee:	4611      	mov	r1, r2
    6df0:	4618      	mov	r0, r3
    6df2:	f7ff fc41 	bl	6678 <Ftm_Gpt_Ip_GetChannelEventStatus>
    6df6:	4603      	mov	r3, r0
    6df8:	2b00      	cmp	r3, #0
    6dfa:	d007      	beq.n	6e0c <FTM_0_CH_0_CH_1_ISR+0x66>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6dfc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e00:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e04:	4611      	mov	r1, r2
    6e06:	4618      	mov	r0, r3
    6e08:	f7ff fc54 	bl	66b4 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    EXIT_INTERRUPT();
    6e0c:	f3bf 8f4f 	dsb	sy
}
    6e10:	bf00      	nop
    6e12:	b003      	add	sp, #12
    6e14:	f85d fb04 	ldr.w	pc, [sp], #4

00006e18 <FTM_1_CH_0_CH_1_ISR>:
/**
 * @brief          Independent interrupt handler.
 * @details        Interrupt handler for FTM module 1 channel 0 - channel 1.
 */
ISR(FTM_1_CH_0_CH_1_ISR)
{
    6e18:	b500      	push	{lr}
    6e1a:	b083      	sub	sp, #12
    uint8 channel = 0U;
    6e1c:	2300      	movs	r3, #0
    6e1e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 instance = 1U;
    6e22:	2301      	movs	r3, #1
    6e24:	f88d 3006 	strb.w	r3, [sp, #6]

    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6e28:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e2c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e30:	4611      	mov	r1, r2
    6e32:	4618      	mov	r0, r3
    6e34:	f7ff fc20 	bl	6678 <Ftm_Gpt_Ip_GetChannelEventStatus>
    6e38:	4603      	mov	r3, r0
    6e3a:	2b00      	cmp	r3, #0
    6e3c:	d007      	beq.n	6e4e <FTM_1_CH_0_CH_1_ISR+0x36>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6e3e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e42:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e46:	4611      	mov	r1, r2
    6e48:	4618      	mov	r0, r3
    6e4a:	f7ff fc33 	bl	66b4 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    channel++;
    6e4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e52:	3301      	adds	r3, #1
    6e54:	f88d 3007 	strb.w	r3, [sp, #7]
    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6e58:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e5c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e60:	4611      	mov	r1, r2
    6e62:	4618      	mov	r0, r3
    6e64:	f7ff fc08 	bl	6678 <Ftm_Gpt_Ip_GetChannelEventStatus>
    6e68:	4603      	mov	r3, r0
    6e6a:	2b00      	cmp	r3, #0
    6e6c:	d007      	beq.n	6e7e <FTM_1_CH_0_CH_1_ISR+0x66>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6e6e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e72:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e76:	4611      	mov	r1, r2
    6e78:	4618      	mov	r0, r3
    6e7a:	f7ff fc1b 	bl	66b4 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    EXIT_INTERRUPT();
    6e7e:	f3bf 8f4f 	dsb	sy
}
    6e82:	bf00      	nop
    6e84:	b003      	add	sp, #12
    6e86:	f85d fb04 	ldr.w	pc, [sp], #4

00006e8a <FTM_2_CH_0_CH_1_ISR>:
/**
 * @brief          Independent interrupt handler.
 * @details        Interrupt handler for FTM module 2 channel 0 - channel 1.
 */
ISR(FTM_2_CH_0_CH_1_ISR)
{
    6e8a:	b500      	push	{lr}
    6e8c:	b083      	sub	sp, #12
    uint8 channel = 0U;
    6e8e:	2300      	movs	r3, #0
    6e90:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 instance = 2U;
    6e94:	2302      	movs	r3, #2
    6e96:	f88d 3006 	strb.w	r3, [sp, #6]

    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6e9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6ea2:	4611      	mov	r1, r2
    6ea4:	4618      	mov	r0, r3
    6ea6:	f7ff fbe7 	bl	6678 <Ftm_Gpt_Ip_GetChannelEventStatus>
    6eaa:	4603      	mov	r3, r0
    6eac:	2b00      	cmp	r3, #0
    6eae:	d007      	beq.n	6ec0 <FTM_2_CH_0_CH_1_ISR+0x36>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6eb0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6eb4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6eb8:	4611      	mov	r1, r2
    6eba:	4618      	mov	r0, r3
    6ebc:	f7ff fbfa 	bl	66b4 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    channel++;
    6ec0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ec4:	3301      	adds	r3, #1
    6ec6:	f88d 3007 	strb.w	r3, [sp, #7]
    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6eca:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6ece:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6ed2:	4611      	mov	r1, r2
    6ed4:	4618      	mov	r0, r3
    6ed6:	f7ff fbcf 	bl	6678 <Ftm_Gpt_Ip_GetChannelEventStatus>
    6eda:	4603      	mov	r3, r0
    6edc:	2b00      	cmp	r3, #0
    6ede:	d007      	beq.n	6ef0 <FTM_2_CH_0_CH_1_ISR+0x66>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6ee0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6ee4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6ee8:	4611      	mov	r1, r2
    6eea:	4618      	mov	r0, r3
    6eec:	f7ff fbe2 	bl	66b4 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    EXIT_INTERRUPT();
    6ef0:	f3bf 8f4f 	dsb	sy
}
    6ef4:	bf00      	nop
    6ef6:	b003      	add	sp, #12
    6ef8:	f85d fb04 	ldr.w	pc, [sp], #4

00006efc <Gpt_ValidateChannelStatus>:
(
    uint8 u8ServiceId,
    Gpt_ChannelType channel,
    uint32 coreID
)
{
    6efc:	b500      	push	{lr}
    6efe:	b085      	sub	sp, #20
    6f00:	4603      	mov	r3, r0
    6f02:	9200      	str	r2, [sp, #0]
    6f04:	f88d 3007 	strb.w	r3, [sp, #7]
    6f08:	460b      	mov	r3, r1
    6f0a:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType returnValue = (Std_ReturnType)E_NOT_OK;
    6f0e:	2301      	movs	r3, #1
    6f10:	f88d 300f 	strb.w	r3, [sp, #15]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(u8ServiceId, channel, coreID))
    {
#endif
        if(channel < GPT_HW_CHANNEL_NUM)
    6f14:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6f18:	2b02      	cmp	r3, #2
    6f1a:	d816      	bhi.n	6f4a <Gpt_ValidateChannelStatus+0x4e>
                    );
                }
                else
                {
    #else
                    if (GPT_STATUS_RUNNING == Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    6f1c:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6f20:	480d      	ldr	r0, [pc, #52]	; (6f58 <Gpt_ValidateChannelStatus+0x5c>)
    6f22:	9a00      	ldr	r2, [sp, #0]
    6f24:	4613      	mov	r3, r2
    6f26:	005b      	lsls	r3, r3, #1
    6f28:	4413      	add	r3, r2
    6f2a:	440b      	add	r3, r1
    6f2c:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
    6f30:	2b04      	cmp	r3, #4
    6f32:	d107      	bne.n	6f44 <Gpt_ValidateChannelStatus+0x48>
                    {
                        (void)Det_ReportRuntimeError\
    6f34:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6f38:	230b      	movs	r3, #11
    6f3a:	2100      	movs	r1, #0
    6f3c:	2064      	movs	r0, #100	; 0x64
    6f3e:	f004 fc9d 	bl	b87c <Det_ReportRuntimeError>
    6f42:	e002      	b.n	6f4a <Gpt_ValidateChannelStatus+0x4e>
                        );
                    }
                    else
                    {
    #endif
                        returnValue = (Std_ReturnType)E_OK;
    6f44:	2300      	movs	r3, #0
    6f46:	f88d 300f 	strb.w	r3, [sp, #15]
    #endif
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
    return returnValue;
    6f4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6f4e:	4618      	mov	r0, r3
    6f50:	b005      	add	sp, #20
    6f52:	f85d fb04 	ldr.w	pc, [sp], #4
    6f56:	bf00      	nop
    6f58:	1fff9000 	.word	0x1fff9000

00006f5c <Gpt_ValidateMode>:
static inline Std_ReturnType Gpt_ValidateMode
(
	uint8 u8ServiceId,
	uint32 coreID
)
{
    6f5c:	b500      	push	{lr}
    6f5e:	b085      	sub	sp, #20
    6f60:	4603      	mov	r3, r0
    6f62:	9100      	str	r1, [sp, #0]
    6f64:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType returnValue;
    if (GPT_MODE_SLEEP == Gpt_eMode[coreID])
    6f68:	4a0c      	ldr	r2, [pc, #48]	; (6f9c <Gpt_ValidateMode+0x40>)
    6f6a:	9b00      	ldr	r3, [sp, #0]
    6f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f70:	2b01      	cmp	r3, #1
    6f72:	d10a      	bne.n	6f8a <Gpt_ValidateMode+0x2e>
    {
        (void)Det_ReportRuntimeError\
    6f74:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6f78:	230c      	movs	r3, #12
    6f7a:	2100      	movs	r1, #0
    6f7c:	2064      	movs	r0, #100	; 0x64
    6f7e:	f004 fc7d 	bl	b87c <Det_ReportRuntimeError>
            (uint16)GPT_MODULE_ID,\
            (uint8)GPT_INSTANCE_ID,\
            (uint8)u8ServiceId,\
            (uint8)GPT_E_MODE\
        );
		returnValue = (Std_ReturnType)E_NOT_OK;
    6f82:	2301      	movs	r3, #1
    6f84:	f88d 300f 	strb.w	r3, [sp, #15]
    6f88:	e002      	b.n	6f90 <Gpt_ValidateMode+0x34>
    }
    else
    {
        returnValue = (Std_ReturnType)E_OK;
    6f8a:	2300      	movs	r3, #0
    6f8c:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return returnValue;
    6f90:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6f94:	4618      	mov	r0, r3
    6f96:	b005      	add	sp, #20
    6f98:	f85d fb04 	ldr.w	pc, [sp], #4
    6f9c:	1fff8ff8 	.word	0x1fff8ff8

00006fa0 <Gpt_ConvertChannelIndexToChannel>:
 *
 * */
static inline Gpt_ChannelType Gpt_ConvertChannelIndexToChannel(Gpt_ChannelType ChannelIndex,
                                                                              uint32 coreID
                                                                              )
{
    6fa0:	b084      	sub	sp, #16
    6fa2:	4603      	mov	r3, r0
    6fa4:	9100      	str	r1, [sp, #0]
    6fa6:	f88d 3007 	strb.w	r3, [sp, #7]
    Gpt_ChannelType Channel;

    for (Channel = 0U; Channel < GPT_HW_CHANNEL_NUM; ++Channel)
    6faa:	2300      	movs	r3, #0
    6fac:	f88d 300f 	strb.w	r3, [sp, #15]
    6fb0:	e010      	b.n	6fd4 <Gpt_ConvertChannelIndexToChannel+0x34>
    {
        if(ChannelIndex == (*Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap)[Channel])
    6fb2:	4a0e      	ldr	r2, [pc, #56]	; (6fec <Gpt_ConvertChannelIndexToChannel+0x4c>)
    6fb4:	9b00      	ldr	r3, [sp, #0]
    6fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fba:	695a      	ldr	r2, [r3, #20]
    6fbc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6fc0:	5cd3      	ldrb	r3, [r2, r3]
    6fc2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6fc6:	429a      	cmp	r2, r3
    6fc8:	d009      	beq.n	6fde <Gpt_ConvertChannelIndexToChannel+0x3e>
    for (Channel = 0U; Channel < GPT_HW_CHANNEL_NUM; ++Channel)
    6fca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6fce:	3301      	adds	r3, #1
    6fd0:	f88d 300f 	strb.w	r3, [sp, #15]
    6fd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6fd8:	2b02      	cmp	r3, #2
    6fda:	d9ea      	bls.n	6fb2 <Gpt_ConvertChannelIndexToChannel+0x12>
    6fdc:	e000      	b.n	6fe0 <Gpt_ConvertChannelIndexToChannel+0x40>
        {
            break;
    6fde:	bf00      	nop
        }
    }
    return Channel;
    6fe0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6fe4:	4618      	mov	r0, r3
    6fe6:	b004      	add	sp, #16
    6fe8:	4770      	bx	lr
    6fea:	bf00      	nop
    6fec:	1fff8ffc 	.word	0x1fff8ffc

00006ff0 <Gpt_CheckStatusNotificationEnabled>:
 * @pre         Gpt_Init,  must be called before.
 *
 *
 * */
static inline void Gpt_CheckStatusNotificationEnabled(uint32 coreID)
{
    6ff0:	b500      	push	{lr}
    6ff2:	b085      	sub	sp, #20
    6ff4:	9001      	str	r0, [sp, #4]
    Gpt_ChannelType channel;
    Gpt_ChannelType ChannelIndex;

    /*Implements the behaviour for normal mode*/
    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    6ff6:	2300      	movs	r3, #0
    6ff8:	f88d 300f 	strb.w	r3, [sp, #15]
    6ffc:	e05d      	b.n	70ba <Gpt_CheckStatusNotificationEnabled+0xca>
    {
        channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    6ffe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7002:	9901      	ldr	r1, [sp, #4]
    7004:	4618      	mov	r0, r3
    7006:	f7ff ffcb 	bl	6fa0 <Gpt_ConvertChannelIndexToChannel>
    700a:	4603      	mov	r3, r0
    700c:	f88d 300e 	strb.w	r3, [sp, #14]
        if(channel < GPT_HW_CHANNEL_NUM)
    7010:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7014:	2b02      	cmp	r3, #2
    7016:	d84b      	bhi.n	70b0 <Gpt_CheckStatusNotificationEnabled+0xc0>
        {
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
            if (TRUE == Gpt_aChannelInfo[coreID][channel].bNotificationEnabled)
    7018:	f89d 100e 	ldrb.w	r1, [sp, #14]
    701c:	482e      	ldr	r0, [pc, #184]	; (70d8 <Gpt_CheckStatusNotificationEnabled+0xe8>)
    701e:	9a01      	ldr	r2, [sp, #4]
    7020:	4613      	mov	r3, r2
    7022:	005b      	lsls	r3, r3, #1
    7024:	4413      	add	r3, r2
    7026:	440b      	add	r3, r1
    7028:	00db      	lsls	r3, r3, #3
    702a:	4403      	add	r3, r0
    702c:	791b      	ldrb	r3, [r3, #4]
    702e:	2b00      	cmp	r3, #0
    7030:	d011      	beq.n	7056 <Gpt_CheckStatusNotificationEnabled+0x66>
            {
                /* Enable hardware interrupts */
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7032:	4a2a      	ldr	r2, [pc, #168]	; (70dc <Gpt_CheckStatusNotificationEnabled+0xec>)
    7034:	9b01      	ldr	r3, [sp, #4]
    7036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    703a:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    703c:	f89d 200f 	ldrb.w	r2, [sp, #15]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7040:	4613      	mov	r3, r2
    7042:	005b      	lsls	r3, r3, #1
    7044:	4413      	add	r3, r2
    7046:	00db      	lsls	r3, r3, #3
    7048:	440b      	add	r3, r1
    704a:	3314      	adds	r3, #20
    704c:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    704e:	4618      	mov	r0, r3
    7050:	f000 ffc4 	bl	7fdc <Gpt_Ipw_EnableInterrupt>
    7054:	e02c      	b.n	70b0 <Gpt_CheckStatusNotificationEnabled+0xc0>
            else
            {
#endif
                /* Disable hardware interrupts if the channel is not running in the ONE-SHOT mode.
                This is needed because the channel state is updated by ISR for ONE-SHOT mode */
                if((GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus) || \
    7056:	f89d 100e 	ldrb.w	r1, [sp, #14]
    705a:	481f      	ldr	r0, [pc, #124]	; (70d8 <Gpt_CheckStatusNotificationEnabled+0xe8>)
    705c:	9a01      	ldr	r2, [sp, #4]
    705e:	4613      	mov	r3, r2
    7060:	005b      	lsls	r3, r3, #1
    7062:	4413      	add	r3, r2
    7064:	440b      	add	r3, r1
    7066:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
    706a:	2b04      	cmp	r3, #4
    706c:	d10f      	bne.n	708e <Gpt_CheckStatusNotificationEnabled+0x9e>
                    (GPT_CH_MODE_CONTINUOUS == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    706e:	4a1b      	ldr	r2, [pc, #108]	; (70dc <Gpt_CheckStatusNotificationEnabled+0xec>)
    7070:	9b01      	ldr	r3, [sp, #4]
    7072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7076:	6859      	ldr	r1, [r3, #4]
    7078:	f89d 200f 	ldrb.w	r2, [sp, #15]
    707c:	4613      	mov	r3, r2
    707e:	005b      	lsls	r3, r3, #1
    7080:	4413      	add	r3, r2
    7082:	00db      	lsls	r3, r3, #3
    7084:	440b      	add	r3, r1
    7086:	3310      	adds	r3, #16
    7088:	681b      	ldr	r3, [r3, #0]
                if((GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus) || \
    708a:	2b00      	cmp	r3, #0
    708c:	d110      	bne.n	70b0 <Gpt_CheckStatusNotificationEnabled+0xc0>
                    )
                {
                    /*Disable hardware interrupts*/
                    Gpt_Ipw_DisableInterrupt
                    (
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    708e:	4a13      	ldr	r2, [pc, #76]	; (70dc <Gpt_CheckStatusNotificationEnabled+0xec>)
    7090:	9b01      	ldr	r3, [sp, #4]
    7092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7096:	6859      	ldr	r1, [r3, #4]
                    Gpt_Ipw_DisableInterrupt
    7098:	f89d 200f 	ldrb.w	r2, [sp, #15]
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    709c:	4613      	mov	r3, r2
    709e:	005b      	lsls	r3, r3, #1
    70a0:	4413      	add	r3, r2
    70a2:	00db      	lsls	r3, r3, #3
    70a4:	440b      	add	r3, r1
    70a6:	3314      	adds	r3, #20
    70a8:	681b      	ldr	r3, [r3, #0]
                    Gpt_Ipw_DisableInterrupt
    70aa:	4618      	mov	r0, r3
    70ac:	f000 ffb1 	bl	8012 <Gpt_Ipw_DisableInterrupt>
    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    70b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70b4:	3301      	adds	r3, #1
    70b6:	f88d 300f 	strb.w	r3, [sp, #15]
    70ba:	4a08      	ldr	r2, [pc, #32]	; (70dc <Gpt_CheckStatusNotificationEnabled+0xec>)
    70bc:	9b01      	ldr	r3, [sp, #4]
    70be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70c2:	781b      	ldrb	r3, [r3, #0]
    70c4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    70c8:	429a      	cmp	r2, r3
    70ca:	d398      	bcc.n	6ffe <Gpt_CheckStatusNotificationEnabled+0xe>
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
            }
#endif
        }
    }
}
    70cc:	bf00      	nop
    70ce:	bf00      	nop
    70d0:	b005      	add	sp, #20
    70d2:	f85d fb04 	ldr.w	pc, [sp], #4
    70d6:	bf00      	nop
    70d8:	1fff9000 	.word	0x1fff9000
    70dc:	1fff8ffc 	.word	0x1fff8ffc

000070e0 <Gpt_CheckStatusWakeupEnabled>:
 * @pre         Gpt_Init, Gpt_SetMode must be called before.
 *
 *
 * */
static inline void Gpt_CheckStatusWakeupEnabled(uint32 coreID)
{
    70e0:	b500      	push	{lr}
    70e2:	b089      	sub	sp, #36	; 0x24
    70e4:	9001      	str	r0, [sp, #4]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    70e6:	2300      	movs	r3, #0
    70e8:	f88d 3008 	strb.w	r3, [sp, #8]
    70ec:	2300      	movs	r3, #0
    70ee:	9303      	str	r3, [sp, #12]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    70f0:	ab02      	add	r3, sp, #8
    70f2:	9306      	str	r3, [sp, #24]
    Gpt_ValueType uElapsedTime = 0U;
    70f4:	2300      	movs	r3, #0
    70f6:	9305      	str	r3, [sp, #20]
#endif
    Gpt_ChannelType ChannelIndex;
    Gpt_ChannelType channel;

    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    70f8:	2300      	movs	r3, #0
    70fa:	f88d 301f 	strb.w	r3, [sp, #31]
    70fe:	e0a8      	b.n	7252 <Gpt_CheckStatusWakeupEnabled+0x172>
    {
        channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    7100:	f89d 301f 	ldrb.w	r3, [sp, #31]
    7104:	9901      	ldr	r1, [sp, #4]
    7106:	4618      	mov	r0, r3
    7108:	f7ff ff4a 	bl	6fa0 <Gpt_ConvertChannelIndexToChannel>
    710c:	4603      	mov	r3, r0
    710e:	f88d 3013 	strb.w	r3, [sp, #19]
        if(channel < GPT_HW_CHANNEL_NUM)
    7112:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7116:	2b02      	cmp	r3, #2
    7118:	f200 8096 	bhi.w	7248 <Gpt_CheckStatusWakeupEnabled+0x168>
        {
            if (TRUE == Gpt_aChannelInfo[coreID][channel].bWakeupEnabled)
    711c:	f89d 1013 	ldrb.w	r1, [sp, #19]
    7120:	4853      	ldr	r0, [pc, #332]	; (7270 <Gpt_CheckStatusWakeupEnabled+0x190>)
    7122:	9a01      	ldr	r2, [sp, #4]
    7124:	4613      	mov	r3, r2
    7126:	005b      	lsls	r3, r3, #1
    7128:	4413      	add	r3, r2
    712a:	440b      	add	r3, r1
    712c:	00db      	lsls	r3, r3, #3
    712e:	4403      	add	r3, r0
    7130:	795b      	ldrb	r3, [r3, #5]
    7132:	2b00      	cmp	r3, #0
    7134:	d011      	beq.n	715a <Gpt_CheckStatusWakeupEnabled+0x7a>
            {
                /*Enable hardware interrupts*/
                Gpt_Ipw_EnableInterrupt(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    7136:	4a4f      	ldr	r2, [pc, #316]	; (7274 <Gpt_CheckStatusWakeupEnabled+0x194>)
    7138:	9b01      	ldr	r3, [sp, #4]
    713a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    713e:	6859      	ldr	r1, [r3, #4]
    7140:	f89d 201f 	ldrb.w	r2, [sp, #31]
    7144:	4613      	mov	r3, r2
    7146:	005b      	lsls	r3, r3, #1
    7148:	4413      	add	r3, r2
    714a:	00db      	lsls	r3, r3, #3
    714c:	440b      	add	r3, r1
    714e:	3314      	adds	r3, #20
    7150:	681b      	ldr	r3, [r3, #0]
    7152:	4618      	mov	r0, r3
    7154:	f000 ff42 	bl	7fdc <Gpt_Ipw_EnableInterrupt>
    7158:	e076      	b.n	7248 <Gpt_CheckStatusWakeupEnabled+0x168>
            }
            else
            {
                /*Disable hardware interrupts*/
                Gpt_Ipw_DisableInterrupt(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    715a:	4a46      	ldr	r2, [pc, #280]	; (7274 <Gpt_CheckStatusWakeupEnabled+0x194>)
    715c:	9b01      	ldr	r3, [sp, #4]
    715e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7162:	6859      	ldr	r1, [r3, #4]
    7164:	f89d 201f 	ldrb.w	r2, [sp, #31]
    7168:	4613      	mov	r3, r2
    716a:	005b      	lsls	r3, r3, #1
    716c:	4413      	add	r3, r2
    716e:	00db      	lsls	r3, r3, #3
    7170:	440b      	add	r3, r1
    7172:	3314      	adds	r3, #20
    7174:	681b      	ldr	r3, [r3, #0]
    7176:	4618      	mov	r0, r3
    7178:	f000 ff4b 	bl	8012 <Gpt_Ipw_DisableInterrupt>
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                /*Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs
                can change the logical channel state between the checking of logical channel
                state and timestamp retrieval*/
                /* Get the elapsed  time  for later use by other API calls*/
                uElapsedTime = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    717c:	4a3d      	ldr	r2, [pc, #244]	; (7274 <Gpt_CheckStatusWakeupEnabled+0x194>)
    717e:	9b01      	ldr	r3, [sp, #4]
    7180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7184:	6859      	ldr	r1, [r3, #4]
    7186:	f89d 201f 	ldrb.w	r2, [sp, #31]
    718a:	4613      	mov	r3, r2
    718c:	005b      	lsls	r3, r3, #1
    718e:	4413      	add	r3, r2
    7190:	00db      	lsls	r3, r3, #3
    7192:	440b      	add	r3, r1
    7194:	3314      	adds	r3, #20
    7196:	681b      	ldr	r3, [r3, #0]
    7198:	9906      	ldr	r1, [sp, #24]
    719a:	4618      	mov	r0, r3
    719c:	f000 fef3 	bl	7f86 <Gpt_Ipw_GetTimeElapsed>
    71a0:	9005      	str	r0, [sp, #20]
#endif

                /*Stop  the running timer*/
                if (GPT_STATUS_RUNNING == Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    71a2:	f89d 1013 	ldrb.w	r1, [sp, #19]
    71a6:	4832      	ldr	r0, [pc, #200]	; (7270 <Gpt_CheckStatusWakeupEnabled+0x190>)
    71a8:	9a01      	ldr	r2, [sp, #4]
    71aa:	4613      	mov	r3, r2
    71ac:	005b      	lsls	r3, r3, #1
    71ae:	4413      	add	r3, r2
    71b0:	440b      	add	r3, r1
    71b2:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
    71b6:	2b04      	cmp	r3, #4
    71b8:	d146      	bne.n	7248 <Gpt_CheckStatusWakeupEnabled+0x168>
                {
                    if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    71ba:	f89d 3008 	ldrb.w	r3, [sp, #8]
    71be:	2b00      	cmp	r3, #0
    71c0:	d01b      	beq.n	71fa <Gpt_CheckStatusWakeupEnabled+0x11a>
                        (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    71c2:	4a2c      	ldr	r2, [pc, #176]	; (7274 <Gpt_CheckStatusWakeupEnabled+0x194>)
    71c4:	9b01      	ldr	r3, [sp, #4]
    71c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71ca:	6859      	ldr	r1, [r3, #4]
    71cc:	f89d 201f 	ldrb.w	r2, [sp, #31]
    71d0:	4613      	mov	r3, r2
    71d2:	005b      	lsls	r3, r3, #1
    71d4:	4413      	add	r3, r2
    71d6:	00db      	lsls	r3, r3, #3
    71d8:	440b      	add	r3, r1
    71da:	3310      	adds	r3, #16
    71dc:	681b      	ldr	r3, [r3, #0]
                    if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    71de:	2b01      	cmp	r3, #1
    71e0:	d10b      	bne.n	71fa <Gpt_CheckStatusWakeupEnabled+0x11a>
                        )
                    {
                        /*This action could be executed only when the function is called
                        during a critical section implemented by disabling all interrupts*/
                        /*Set the channel status to EXPIRED*/
                        Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_EXPIRED;
    71e2:	f89d 1013 	ldrb.w	r1, [sp, #19]
    71e6:	4822      	ldr	r0, [pc, #136]	; (7270 <Gpt_CheckStatusWakeupEnabled+0x190>)
    71e8:	9a01      	ldr	r2, [sp, #4]
    71ea:	4613      	mov	r3, r2
    71ec:	005b      	lsls	r3, r3, #1
    71ee:	4413      	add	r3, r2
    71f0:	440b      	add	r3, r1
    71f2:	2203      	movs	r2, #3
    71f4:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    71f8:	e015      	b.n	7226 <Gpt_CheckStatusWakeupEnabled+0x146>
                    }
                    else
                    {
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                        /* Store the stopping time for later use by other API calls*/
                        Gpt_aStopTime[coreID][channel] = uElapsedTime;
    71fa:	f89d 1013 	ldrb.w	r1, [sp, #19]
    71fe:	481e      	ldr	r0, [pc, #120]	; (7278 <Gpt_CheckStatusWakeupEnabled+0x198>)
    7200:	9a01      	ldr	r2, [sp, #4]
    7202:	4613      	mov	r3, r2
    7204:	005b      	lsls	r3, r3, #1
    7206:	4413      	add	r3, r2
    7208:	440b      	add	r3, r1
    720a:	9a05      	ldr	r2, [sp, #20]
    720c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
#endif
                        /* Set the channel status to STOPPED*/
                        Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_STOPPED;
    7210:	f89d 1013 	ldrb.w	r1, [sp, #19]
    7214:	4816      	ldr	r0, [pc, #88]	; (7270 <Gpt_CheckStatusWakeupEnabled+0x190>)
    7216:	9a01      	ldr	r2, [sp, #4]
    7218:	4613      	mov	r3, r2
    721a:	005b      	lsls	r3, r3, #1
    721c:	4413      	add	r3, r2
    721e:	440b      	add	r3, r1
    7220:	2202      	movs	r2, #2
    7222:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
                    }
                    /* Call low level stop timer */
                    Gpt_Ipw_StopTimer
                    (
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7226:	4a13      	ldr	r2, [pc, #76]	; (7274 <Gpt_CheckStatusWakeupEnabled+0x194>)
    7228:	9b01      	ldr	r3, [sp, #4]
    722a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    722e:	6859      	ldr	r1, [r3, #4]
                    Gpt_Ipw_StopTimer
    7230:	f89d 201f 	ldrb.w	r2, [sp, #31]
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7234:	4613      	mov	r3, r2
    7236:	005b      	lsls	r3, r3, #1
    7238:	4413      	add	r3, r2
    723a:	00db      	lsls	r3, r3, #3
    723c:	440b      	add	r3, r1
    723e:	3314      	adds	r3, #20
    7240:	681b      	ldr	r3, [r3, #0]
                    Gpt_Ipw_StopTimer
    7242:	4618      	mov	r0, r3
    7244:	f000 feb5 	bl	7fb2 <Gpt_Ipw_StopTimer>
    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7248:	f89d 301f 	ldrb.w	r3, [sp, #31]
    724c:	3301      	adds	r3, #1
    724e:	f88d 301f 	strb.w	r3, [sp, #31]
    7252:	4a08      	ldr	r2, [pc, #32]	; (7274 <Gpt_CheckStatusWakeupEnabled+0x194>)
    7254:	9b01      	ldr	r3, [sp, #4]
    7256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    725a:	781b      	ldrb	r3, [r3, #0]
    725c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    7260:	429a      	cmp	r2, r3
    7262:	f4ff af4d 	bcc.w	7100 <Gpt_CheckStatusWakeupEnabled+0x20>
                    );
                }
            }
        }
    }
}
    7266:	bf00      	nop
    7268:	bf00      	nop
    726a:	b009      	add	sp, #36	; 0x24
    726c:	f85d fb04 	ldr.w	pc, [sp], #4
    7270:	1fff9000 	.word	0x1fff9000
    7274:	1fff8ffc 	.word	0x1fff8ffc
    7278:	1fff9018 	.word	0x1fff9018

0000727c <Gpt_Init>:
*
* @pre            The data structure including the configuration set required for initializing the GPT driver..
* @implements     Gpt_Init_Activity
*/
void Gpt_Init(const Gpt_ConfigType * configPtr)
{
    727c:	b500      	push	{lr}
    727e:	b087      	sub	sp, #28
    7280:	9001      	str	r0, [sp, #4]
    Gpt_ChannelType ChannelIndex;
    Gpt_ChannelType channel;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7282:	2300      	movs	r3, #0
    7284:	9304      	str	r3, [sp, #16]
        #else
            Gpt_pConfig[coreID] = &Gpt_Config;
        #endif
            (void)configPtr;
    #else
            Gpt_pConfig[coreID] = configPtr;
    7286:	4943      	ldr	r1, [pc, #268]	; (7394 <Gpt_Init+0x118>)
    7288:	9b04      	ldr	r3, [sp, #16]
    728a:	9a01      	ldr	r2, [sp, #4]
    728c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    #endif

#if(GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON)
            /*Initialize and Start Predef Timers.*/
            Gpt_Ipw_StartPredefTimer(Gpt_pConfig[coreID]);
    7290:	4a40      	ldr	r2, [pc, #256]	; (7394 <Gpt_Init+0x118>)
    7292:	9b04      	ldr	r3, [sp, #16]
    7294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7298:	4618      	mov	r0, r3
    729a:	f000 fec3 	bl	8024 <Gpt_Ipw_StartPredefTimer>
#endif
            Gpt_Ipw_InitInstances(Gpt_pConfig[coreID]);
    729e:	4a3d      	ldr	r2, [pc, #244]	; (7394 <Gpt_Init+0x118>)
    72a0:	9b04      	ldr	r3, [sp, #16]
    72a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72a6:	4618      	mov	r0, r3
    72a8:	f000 fe02 	bl	7eb0 <Gpt_Ipw_InitInstances>

            /*Initialize for each channel the runtime status informations.*/
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    72ac:	2300      	movs	r3, #0
    72ae:	f88d 3017 	strb.w	r3, [sp, #23]
    72b2:	e05c      	b.n	736e <Gpt_Init+0xf2>
            {
                channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    72b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    72b8:	9904      	ldr	r1, [sp, #16]
    72ba:	4618      	mov	r0, r3
    72bc:	f7ff fe70 	bl	6fa0 <Gpt_ConvertChannelIndexToChannel>
    72c0:	4603      	mov	r3, r0
    72c2:	f88d 300f 	strb.w	r3, [sp, #15]
                if(channel < GPT_HW_CHANNEL_NUM)
    72c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    72ca:	2b02      	cmp	r3, #2
    72cc:	d839      	bhi.n	7342 <Gpt_Init+0xc6>
                {
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
                    /*Disable notification*/
                    Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = FALSE;
    72ce:	f89d 100f 	ldrb.w	r1, [sp, #15]
    72d2:	4831      	ldr	r0, [pc, #196]	; (7398 <Gpt_Init+0x11c>)
    72d4:	9a04      	ldr	r2, [sp, #16]
    72d6:	4613      	mov	r3, r2
    72d8:	005b      	lsls	r3, r3, #1
    72da:	4413      	add	r3, r2
    72dc:	440b      	add	r3, r1
    72de:	00db      	lsls	r3, r3, #3
    72e0:	4403      	add	r3, r0
    72e2:	2200      	movs	r2, #0
    72e4:	711a      	strb	r2, [r3, #4]
#endif

#if ((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON))
                    /*Disable wakeup*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = FALSE;
    72e6:	f89d 100f 	ldrb.w	r1, [sp, #15]
    72ea:	482b      	ldr	r0, [pc, #172]	; (7398 <Gpt_Init+0x11c>)
    72ec:	9a04      	ldr	r2, [sp, #16]
    72ee:	4613      	mov	r3, r2
    72f0:	005b      	lsls	r3, r3, #1
    72f2:	4413      	add	r3, r2
    72f4:	440b      	add	r3, r1
    72f6:	00db      	lsls	r3, r3, #3
    72f8:	4403      	add	r3, r0
    72fa:	2200      	movs	r2, #0
    72fc:	715a      	strb	r2, [r3, #5]
                    /*Clear wakeup generation status*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupGenerated = FALSE;
    72fe:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7302:	4825      	ldr	r0, [pc, #148]	; (7398 <Gpt_Init+0x11c>)
    7304:	9a04      	ldr	r2, [sp, #16]
    7306:	4613      	mov	r3, r2
    7308:	005b      	lsls	r3, r3, #1
    730a:	4413      	add	r3, r2
    730c:	440b      	add	r3, r1
    730e:	00db      	lsls	r3, r3, #3
    7310:	4403      	add	r3, r0
    7312:	2200      	movs	r2, #0
    7314:	719a      	strb	r2, [r3, #6]
#endif
                    /* Initialize the running information of the channel*/
                    Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_INITIALIZED;
    7316:	f89d 100f 	ldrb.w	r1, [sp, #15]
    731a:	481f      	ldr	r0, [pc, #124]	; (7398 <Gpt_Init+0x11c>)
    731c:	9a04      	ldr	r2, [sp, #16]
    731e:	4613      	mov	r3, r2
    7320:	005b      	lsls	r3, r3, #1
    7322:	4413      	add	r3, r2
    7324:	440b      	add	r3, r1
    7326:	2201      	movs	r2, #1
    7328:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                    Gpt_aStopTime[coreID][channel] = 0U;
    732c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7330:	481a      	ldr	r0, [pc, #104]	; (739c <Gpt_Init+0x120>)
    7332:	9a04      	ldr	r2, [sp, #16]
    7334:	4613      	mov	r3, r2
    7336:	005b      	lsls	r3, r3, #1
    7338:	4413      	add	r3, r2
    733a:	440b      	add	r3, r1
    733c:	2200      	movs	r2, #0
    733e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
#endif
                }

                /*Initialize hardware timer channel.*/
                Gpt_Ipw_Init(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    7342:	4a14      	ldr	r2, [pc, #80]	; (7394 <Gpt_Init+0x118>)
    7344:	9b04      	ldr	r3, [sp, #16]
    7346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    734a:	6859      	ldr	r1, [r3, #4]
    734c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    7350:	4613      	mov	r3, r2
    7352:	005b      	lsls	r3, r3, #1
    7354:	4413      	add	r3, r2
    7356:	00db      	lsls	r3, r3, #3
    7358:	440b      	add	r3, r1
    735a:	3314      	adds	r3, #20
    735c:	681b      	ldr	r3, [r3, #0]
    735e:	4618      	mov	r0, r3
    7360:	f000 fddd 	bl	7f1e <Gpt_Ipw_Init>
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7364:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7368:	3301      	adds	r3, #1
    736a:	f88d 3017 	strb.w	r3, [sp, #23]
    736e:	4a09      	ldr	r2, [pc, #36]	; (7394 <Gpt_Init+0x118>)
    7370:	9b04      	ldr	r3, [sp, #16]
    7372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7376:	781b      	ldrb	r3, [r3, #0]
    7378:	f89d 2017 	ldrb.w	r2, [sp, #23]
    737c:	429a      	cmp	r2, r3
    737e:	d399      	bcc.n	72b4 <Gpt_Init+0x38>
            }
#if (((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON)) || \
     (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON) || \
     (GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON))
            /*Set the driver to normal mode*/
            Gpt_eMode[coreID] = GPT_MODE_NORMAL;
    7380:	4a07      	ldr	r2, [pc, #28]	; (73a0 <Gpt_Init+0x124>)
    7382:	9b04      	ldr	r3, [sp, #16]
    7384:	2100      	movs	r1, #0
    7386:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#endif
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
    return;
    738a:	bf00      	nop
}
    738c:	b007      	add	sp, #28
    738e:	f85d fb04 	ldr.w	pc, [sp], #4
    7392:	bf00      	nop
    7394:	1fff8ffc 	.word	0x1fff8ffc
    7398:	1fff9000 	.word	0x1fff9000
    739c:	1fff9018 	.word	0x1fff9018
    73a0:	1fff8ff8 	.word	0x1fff8ff8

000073a4 <Gpt_DeInit>:
* @return  void
*
* @implements   Gpt_DeInit_Activity
*/
void Gpt_DeInit(void)
{
    73a4:	b500      	push	{lr}
    73a6:	b085      	sub	sp, #20
    Gpt_ChannelType channel;
    Gpt_ChannelType ChannelIndex;

    Std_ReturnType allChannelStatus = (Std_ReturnType)E_OK;
    73a8:	2300      	movs	r3, #0
    73aa:	f88d 300e 	strb.w	r3, [sp, #14]
    uint32 coreID = (uint32)Gpt_GetCoreID();
    73ae:	2300      	movs	r3, #0
    73b0:	9302      	str	r3, [sp, #8]
    /*Validate if the calling context is valid*/
    if((Std_ReturnType)E_OK == Gpt_ValidateGlobalCall(GPT_DEINIT_ID, coreID))
    {
#endif
        /* Initialize for each channel the runtime status informations.*/
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    73b2:	2300      	movs	r3, #0
    73b4:	f88d 300f 	strb.w	r3, [sp, #15]
    73b8:	e01b      	b.n	73f2 <Gpt_DeInit+0x4e>
        {
            channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    73ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    73be:	9902      	ldr	r1, [sp, #8]
    73c0:	4618      	mov	r0, r3
    73c2:	f7ff fded 	bl	6fa0 <Gpt_ConvertChannelIndexToChannel>
    73c6:	4603      	mov	r3, r0
    73c8:	f88d 3007 	strb.w	r3, [sp, #7]
            /*Check if the channel is not running.*/
            if((Std_ReturnType)E_NOT_OK == Gpt_ValidateChannelStatus(GPT_DEINIT_ID, channel, coreID))
    73cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    73d0:	9a02      	ldr	r2, [sp, #8]
    73d2:	4619      	mov	r1, r3
    73d4:	2002      	movs	r0, #2
    73d6:	f7ff fd91 	bl	6efc <Gpt_ValidateChannelStatus>
    73da:	4603      	mov	r3, r0
    73dc:	2b01      	cmp	r3, #1
    73de:	d103      	bne.n	73e8 <Gpt_DeInit+0x44>
            {
                allChannelStatus = (Std_ReturnType)E_NOT_OK;
    73e0:	2301      	movs	r3, #1
    73e2:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    73e6:	e00d      	b.n	7404 <Gpt_DeInit+0x60>
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    73e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    73ec:	3301      	adds	r3, #1
    73ee:	f88d 300f 	strb.w	r3, [sp, #15]
    73f2:	4a44      	ldr	r2, [pc, #272]	; (7504 <Gpt_DeInit+0x160>)
    73f4:	9b02      	ldr	r3, [sp, #8]
    73f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73fa:	781b      	ldrb	r3, [r3, #0]
    73fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7400:	429a      	cmp	r2, r3
    7402:	d3da      	bcc.n	73ba <Gpt_DeInit+0x16>
            }
        }

        if((Std_ReturnType)E_OK == allChannelStatus)
    7404:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7408:	2b00      	cmp	r3, #0
    740a:	d176      	bne.n	74fa <Gpt_DeInit+0x156>
        {
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    740c:	2300      	movs	r3, #0
    740e:	f88d 300f 	strb.w	r3, [sp, #15]
    7412:	e05c      	b.n	74ce <Gpt_DeInit+0x12a>
            {
                channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    7414:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7418:	9902      	ldr	r1, [sp, #8]
    741a:	4618      	mov	r0, r3
    741c:	f7ff fdc0 	bl	6fa0 <Gpt_ConvertChannelIndexToChannel>
    7420:	4603      	mov	r3, r0
    7422:	f88d 3007 	strb.w	r3, [sp, #7]
                if(channel < GPT_HW_CHANNEL_NUM)
    7426:	f89d 3007 	ldrb.w	r3, [sp, #7]
    742a:	2b02      	cmp	r3, #2
    742c:	d84a      	bhi.n	74c4 <Gpt_DeInit+0x120>
                {
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
                    /*Disable notification*/
                    Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = FALSE;
    742e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7432:	4835      	ldr	r0, [pc, #212]	; (7508 <Gpt_DeInit+0x164>)
    7434:	9a02      	ldr	r2, [sp, #8]
    7436:	4613      	mov	r3, r2
    7438:	005b      	lsls	r3, r3, #1
    743a:	4413      	add	r3, r2
    743c:	440b      	add	r3, r1
    743e:	00db      	lsls	r3, r3, #3
    7440:	4403      	add	r3, r0
    7442:	2200      	movs	r2, #0
    7444:	711a      	strb	r2, [r3, #4]
#endif

#if ((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON))
                    /*Disable wakeup*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = FALSE;
    7446:	f89d 1007 	ldrb.w	r1, [sp, #7]
    744a:	482f      	ldr	r0, [pc, #188]	; (7508 <Gpt_DeInit+0x164>)
    744c:	9a02      	ldr	r2, [sp, #8]
    744e:	4613      	mov	r3, r2
    7450:	005b      	lsls	r3, r3, #1
    7452:	4413      	add	r3, r2
    7454:	440b      	add	r3, r1
    7456:	00db      	lsls	r3, r3, #3
    7458:	4403      	add	r3, r0
    745a:	2200      	movs	r2, #0
    745c:	715a      	strb	r2, [r3, #5]
                    /*Clear wakeup generation status*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupGenerated = FALSE;
    745e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7462:	4829      	ldr	r0, [pc, #164]	; (7508 <Gpt_DeInit+0x164>)
    7464:	9a02      	ldr	r2, [sp, #8]
    7466:	4613      	mov	r3, r2
    7468:	005b      	lsls	r3, r3, #1
    746a:	4413      	add	r3, r2
    746c:	440b      	add	r3, r1
    746e:	00db      	lsls	r3, r3, #3
    7470:	4403      	add	r3, r0
    7472:	2200      	movs	r2, #0
    7474:	719a      	strb	r2, [r3, #6]
#endif
                    /* De initialize the running information of the channel*/
                    Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_UNINITIALIZED;
    7476:	f89d 1007 	ldrb.w	r1, [sp, #7]
    747a:	4823      	ldr	r0, [pc, #140]	; (7508 <Gpt_DeInit+0x164>)
    747c:	9a02      	ldr	r2, [sp, #8]
    747e:	4613      	mov	r3, r2
    7480:	005b      	lsls	r3, r3, #1
    7482:	4413      	add	r3, r2
    7484:	440b      	add	r3, r1
    7486:	2200      	movs	r2, #0
    7488:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                    Gpt_aStopTime[coreID][channel] = 0U;
    748c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7490:	481e      	ldr	r0, [pc, #120]	; (750c <Gpt_DeInit+0x168>)
    7492:	9a02      	ldr	r2, [sp, #8]
    7494:	4613      	mov	r3, r2
    7496:	005b      	lsls	r3, r3, #1
    7498:	4413      	add	r3, r2
    749a:	440b      	add	r3, r1
    749c:	2200      	movs	r2, #0
    749e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
#endif
                    /*Initialize hardware timer channel.*/
                    Gpt_Ipw_DeInit
                    (
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    74a2:	4a18      	ldr	r2, [pc, #96]	; (7504 <Gpt_DeInit+0x160>)
    74a4:	9b02      	ldr	r3, [sp, #8]
    74a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74aa:	6859      	ldr	r1, [r3, #4]
                    Gpt_Ipw_DeInit
    74ac:	f89d 200f 	ldrb.w	r2, [sp, #15]
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    74b0:	4613      	mov	r3, r2
    74b2:	005b      	lsls	r3, r3, #1
    74b4:	4413      	add	r3, r2
    74b6:	00db      	lsls	r3, r3, #3
    74b8:	440b      	add	r3, r1
    74ba:	3314      	adds	r3, #20
    74bc:	681b      	ldr	r3, [r3, #0]
                    Gpt_Ipw_DeInit
    74be:	4618      	mov	r0, r3
    74c0:	f000 fd95 	bl	7fee <Gpt_Ipw_DeInit>
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    74c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    74c8:	3301      	adds	r3, #1
    74ca:	f88d 300f 	strb.w	r3, [sp, #15]
    74ce:	4a0d      	ldr	r2, [pc, #52]	; (7504 <Gpt_DeInit+0x160>)
    74d0:	9b02      	ldr	r3, [sp, #8]
    74d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74d6:	781b      	ldrb	r3, [r3, #0]
    74d8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    74dc:	429a      	cmp	r2, r3
    74de:	d399      	bcc.n	7414 <Gpt_DeInit+0x70>
                }
            }

#if(GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON)
            /* Deinitialize and stop Predef timers.*/
            Gpt_Ipw_StopPredefTimer(Gpt_pConfig[coreID]);
    74e0:	4a08      	ldr	r2, [pc, #32]	; (7504 <Gpt_DeInit+0x160>)
    74e2:	9b02      	ldr	r3, [sp, #8]
    74e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74e8:	4618      	mov	r0, r3
    74ea:	f000 fe0d 	bl	8108 <Gpt_Ipw_StopPredefTimer>
#endif
            /* Writing NULL to configuration pointer is mandatory because that variable
            is used to test the initialization of the driver */
            Gpt_pConfig[coreID] = NULL_PTR;
    74ee:	4a05      	ldr	r2, [pc, #20]	; (7504 <Gpt_DeInit+0x160>)
    74f0:	9b02      	ldr	r3, [sp, #8]
    74f2:	2100      	movs	r1, #0
    74f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }

#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
    return;
    74f8:	bf00      	nop
    74fa:	bf00      	nop
}
    74fc:	b005      	add	sp, #20
    74fe:	f85d fb04 	ldr.w	pc, [sp], #4
    7502:	bf00      	nop
    7504:	1fff8ffc 	.word	0x1fff8ffc
    7508:	1fff9000 	.word	0x1fff9000
    750c:	1fff9018 	.word	0x1fff9018

00007510 <Gpt_GetTimeElapsed>:
*
* @pre     The driver needs to be initialized.
* @implements Gpt_GetTimeElapsed_Activity
*/
Gpt_ValueType Gpt_GetTimeElapsed(Gpt_ChannelType channel)
{
    7510:	b500      	push	{lr}
    7512:	b089      	sub	sp, #36	; 0x24
    7514:	4603      	mov	r3, r0
    7516:	f88d 3007 	strb.w	r3, [sp, #7]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    751a:	2300      	movs	r3, #0
    751c:	f88d 3008 	strb.w	r3, [sp, #8]
    7520:	2300      	movs	r3, #0
    7522:	9303      	str	r3, [sp, #12]
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    7524:	ab02      	add	r3, sp, #8
    7526:	9306      	str	r3, [sp, #24]
    Gpt_ChannelType ChannelIndex;

    Gpt_ValueType returnValue = 0U;
    7528:	2300      	movs	r3, #0
    752a:	9307      	str	r3, [sp, #28]
    uint32 coreID = (uint32)Gpt_GetCoreID();
    752c:	2300      	movs	r3, #0
    752e:	9305      	str	r3, [sp, #20]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(GPT_TIMEELAPSED_ID, channel, coreID))
    {
#endif
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7530:	4a33      	ldr	r2, [pc, #204]	; (7600 <Gpt_GetTimeElapsed+0xf0>)
    7532:	9b05      	ldr	r3, [sp, #20]
    7534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7538:	695a      	ldr	r2, [r3, #20]
    753a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    753e:	5cd3      	ldrb	r3, [r2, r3]
    7540:	f88d 3013 	strb.w	r3, [sp, #19]
        /*Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs can change
        the logical channel state between the checking of logical channel state and timestamp
        retrieval*/
        returnValue = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    7544:	4a2e      	ldr	r2, [pc, #184]	; (7600 <Gpt_GetTimeElapsed+0xf0>)
    7546:	9b05      	ldr	r3, [sp, #20]
    7548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    754c:	6859      	ldr	r1, [r3, #4]
    754e:	f89d 2013 	ldrb.w	r2, [sp, #19]
    7552:	4613      	mov	r3, r2
    7554:	005b      	lsls	r3, r3, #1
    7556:	4413      	add	r3, r2
    7558:	00db      	lsls	r3, r3, #3
    755a:	440b      	add	r3, r1
    755c:	3314      	adds	r3, #20
    755e:	681b      	ldr	r3, [r3, #0]
    7560:	9906      	ldr	r1, [sp, #24]
    7562:	4618      	mov	r0, r3
    7564:	f000 fd0f 	bl	7f86 <Gpt_Ipw_GetTimeElapsed>
    7568:	9007      	str	r0, [sp, #28]

        /*Check the channel status*/
        switch(Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    756a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    756e:	4825      	ldr	r0, [pc, #148]	; (7604 <Gpt_GetTimeElapsed+0xf4>)
    7570:	9a05      	ldr	r2, [sp, #20]
    7572:	4613      	mov	r3, r2
    7574:	005b      	lsls	r3, r3, #1
    7576:	4413      	add	r3, r2
    7578:	440b      	add	r3, r1
    757a:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
    757e:	3b01      	subs	r3, #1
    7580:	2b03      	cmp	r3, #3
    7582:	d834      	bhi.n	75ee <Gpt_GetTimeElapsed+0xde>
    7584:	a201      	add	r2, pc, #4	; (adr r2, 758c <Gpt_GetTimeElapsed+0x7c>)
    7586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    758a:	bf00      	nop
    758c:	000075cb 	.word	0x000075cb
    7590:	000075d1 	.word	0x000075d1
    7594:	000075e9 	.word	0x000075e9
    7598:	0000759d 	.word	0x0000759d
        {
            case GPT_STATUS_RUNNING:
            {
                /*Check if channel counter has already rollover*/
                if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    759c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    75a0:	2b00      	cmp	r3, #0
    75a2:	d026      	beq.n	75f2 <Gpt_GetTimeElapsed+0xe2>
                    (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    75a4:	4a16      	ldr	r2, [pc, #88]	; (7600 <Gpt_GetTimeElapsed+0xf0>)
    75a6:	9b05      	ldr	r3, [sp, #20]
    75a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75ac:	6859      	ldr	r1, [r3, #4]
    75ae:	f89d 2013 	ldrb.w	r2, [sp, #19]
    75b2:	4613      	mov	r3, r2
    75b4:	005b      	lsls	r3, r3, #1
    75b6:	4413      	add	r3, r2
    75b8:	00db      	lsls	r3, r3, #3
    75ba:	440b      	add	r3, r1
    75bc:	3310      	adds	r3, #16
    75be:	681b      	ldr	r3, [r3, #0]
                if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    75c0:	2b01      	cmp	r3, #1
    75c2:	d116      	bne.n	75f2 <Gpt_GetTimeElapsed+0xe2>
                   )
                {
                    /*The timer has already expired.The hardware timer status is not yet
                    synchronized with the logical timer status*/
                    returnValue = returnHwChannelInfo.uTargetTime;
    75c4:	9b03      	ldr	r3, [sp, #12]
    75c6:	9307      	str	r3, [sp, #28]
                }
            }
            break;
    75c8:	e013      	b.n	75f2 <Gpt_GetTimeElapsed+0xe2>
            case GPT_STATUS_INITIALIZED:
            {
                returnValue = 0U;
    75ca:	2300      	movs	r3, #0
    75cc:	9307      	str	r3, [sp, #28]
            }
            break;
    75ce:	e011      	b.n	75f4 <Gpt_GetTimeElapsed+0xe4>
            case GPT_STATUS_STOPPED:
            {
                /*Return elapsed time at the when the channel was stopped*/
                returnValue = Gpt_aStopTime[coreID][channel];
    75d0:	f89d 1007 	ldrb.w	r1, [sp, #7]
    75d4:	480c      	ldr	r0, [pc, #48]	; (7608 <Gpt_GetTimeElapsed+0xf8>)
    75d6:	9a05      	ldr	r2, [sp, #20]
    75d8:	4613      	mov	r3, r2
    75da:	005b      	lsls	r3, r3, #1
    75dc:	4413      	add	r3, r2
    75de:	440b      	add	r3, r1
    75e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    75e4:	9307      	str	r3, [sp, #28]
            }
            break;
    75e6:	e005      	b.n	75f4 <Gpt_GetTimeElapsed+0xe4>
            case GPT_STATUS_EXPIRED:
            {
                returnValue = returnHwChannelInfo.uTargetTime;
    75e8:	9b03      	ldr	r3, [sp, #12]
    75ea:	9307      	str	r3, [sp, #28]
            }
            break;
    75ec:	e002      	b.n	75f4 <Gpt_GetTimeElapsed+0xe4>
            default:
                /*Only the above four channel states are allowed when this function is called*/
                break;
    75ee:	bf00      	nop
    75f0:	e000      	b.n	75f4 <Gpt_GetTimeElapsed+0xe4>
            break;
    75f2:	bf00      	nop
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif

    return returnValue;
    75f4:	9b07      	ldr	r3, [sp, #28]
}
    75f6:	4618      	mov	r0, r3
    75f8:	b009      	add	sp, #36	; 0x24
    75fa:	f85d fb04 	ldr.w	pc, [sp], #4
    75fe:	bf00      	nop
    7600:	1fff8ffc 	.word	0x1fff8ffc
    7604:	1fff9000 	.word	0x1fff9000
    7608:	1fff9018 	.word	0x1fff9018

0000760c <Gpt_GetTimeRemaining>:
*
* @pre           The driver needs to be initialized.
* @implements    Gpt_GetTimeRemaining_Activity
*/
Gpt_ValueType Gpt_GetTimeRemaining(Gpt_ChannelType channel)
{
    760c:	b510      	push	{r4, lr}
    760e:	b088      	sub	sp, #32
    7610:	4603      	mov	r3, r0
    7612:	f88d 3007 	strb.w	r3, [sp, #7]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    7616:	2300      	movs	r3, #0
    7618:	f88d 3008 	strb.w	r3, [sp, #8]
    761c:	2300      	movs	r3, #0
    761e:	9303      	str	r3, [sp, #12]
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    7620:	ab02      	add	r3, sp, #8
    7622:	9306      	str	r3, [sp, #24]
    Gpt_ChannelType ChannelIndex;

    Gpt_ValueType returnValue = 0U;
    7624:	2300      	movs	r3, #0
    7626:	9307      	str	r3, [sp, #28]
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7628:	2300      	movs	r3, #0
    762a:	9305      	str	r3, [sp, #20]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(GPT_TIMEREMAINING_ID, channel, coreID))
    {
#endif
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    762c:	4a35      	ldr	r2, [pc, #212]	; (7704 <Gpt_GetTimeRemaining+0xf8>)
    762e:	9b05      	ldr	r3, [sp, #20]
    7630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7634:	695a      	ldr	r2, [r3, #20]
    7636:	f89d 3007 	ldrb.w	r3, [sp, #7]
    763a:	5cd3      	ldrb	r3, [r2, r3]
    763c:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Calculate the remaining time from the elapsed time*/
        /* Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs can
        change the logical channel state between the checking of logical channel state
        and timestamps retrieval*/
        returnValue = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    7640:	4a30      	ldr	r2, [pc, #192]	; (7704 <Gpt_GetTimeRemaining+0xf8>)
    7642:	9b05      	ldr	r3, [sp, #20]
    7644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7648:	6859      	ldr	r1, [r3, #4]
    764a:	f89d 2013 	ldrb.w	r2, [sp, #19]
    764e:	4613      	mov	r3, r2
    7650:	005b      	lsls	r3, r3, #1
    7652:	4413      	add	r3, r2
    7654:	00db      	lsls	r3, r3, #3
    7656:	440b      	add	r3, r1
    7658:	3314      	adds	r3, #20
    765a:	681b      	ldr	r3, [r3, #0]
    765c:	9906      	ldr	r1, [sp, #24]
    765e:	4618      	mov	r0, r3
    7660:	f000 fc91 	bl	7f86 <Gpt_Ipw_GetTimeElapsed>
    7664:	9007      	str	r0, [sp, #28]

        /*Check the channel status*/
        switch(Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    7666:	f89d 1007 	ldrb.w	r1, [sp, #7]
    766a:	4827      	ldr	r0, [pc, #156]	; (7708 <Gpt_GetTimeRemaining+0xfc>)
    766c:	9a05      	ldr	r2, [sp, #20]
    766e:	4613      	mov	r3, r2
    7670:	005b      	lsls	r3, r3, #1
    7672:	4413      	add	r3, r2
    7674:	440b      	add	r3, r1
    7676:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
    767a:	3b01      	subs	r3, #1
    767c:	2b03      	cmp	r3, #3
    767e:	d83b      	bhi.n	76f8 <Gpt_GetTimeRemaining+0xec>
    7680:	a201      	add	r2, pc, #4	; (adr r2, 7688 <Gpt_GetTimeRemaining+0x7c>)
    7682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7686:	bf00      	nop
    7688:	000076d1 	.word	0x000076d1
    768c:	000076d7 	.word	0x000076d7
    7690:	000076f3 	.word	0x000076f3
    7694:	00007699 	.word	0x00007699
        {
            case GPT_STATUS_RUNNING:
            {
                /*Check if channel counter has already roll-over*/
                if((TRUE == returnHwChannelInfo.bChannelRollover) && \
    7698:	f89d 3008 	ldrb.w	r3, [sp, #8]
    769c:	2b00      	cmp	r3, #0
    769e:	d012      	beq.n	76c6 <Gpt_GetTimeRemaining+0xba>
                   (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    76a0:	4a18      	ldr	r2, [pc, #96]	; (7704 <Gpt_GetTimeRemaining+0xf8>)
    76a2:	9b05      	ldr	r3, [sp, #20]
    76a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76a8:	6859      	ldr	r1, [r3, #4]
    76aa:	f89d 2013 	ldrb.w	r2, [sp, #19]
    76ae:	4613      	mov	r3, r2
    76b0:	005b      	lsls	r3, r3, #1
    76b2:	4413      	add	r3, r2
    76b4:	00db      	lsls	r3, r3, #3
    76b6:	440b      	add	r3, r1
    76b8:	3310      	adds	r3, #16
    76ba:	681b      	ldr	r3, [r3, #0]
                if((TRUE == returnHwChannelInfo.bChannelRollover) && \
    76bc:	2b01      	cmp	r3, #1
    76be:	d102      	bne.n	76c6 <Gpt_GetTimeRemaining+0xba>
                  )
                {
                    /*The timer has already expired.The hardware timer status is not yet
                    synchronized with the logical timer status*/
                    returnValue = 0U;
    76c0:	2300      	movs	r3, #0
    76c2:	9307      	str	r3, [sp, #28]
                {
                    /*Calculate remaining time from elapsed time*/
                    returnValue = returnHwChannelInfo.uTargetTime - returnValue;
                }
            }
            break;
    76c4:	e019      	b.n	76fa <Gpt_GetTimeRemaining+0xee>
                    returnValue = returnHwChannelInfo.uTargetTime - returnValue;
    76c6:	9a03      	ldr	r2, [sp, #12]
    76c8:	9b07      	ldr	r3, [sp, #28]
    76ca:	1ad3      	subs	r3, r2, r3
    76cc:	9307      	str	r3, [sp, #28]
            break;
    76ce:	e014      	b.n	76fa <Gpt_GetTimeRemaining+0xee>
            case GPT_STATUS_INITIALIZED:
            {
                returnValue = 0U;
    76d0:	2300      	movs	r3, #0
    76d2:	9307      	str	r3, [sp, #28]
            }
            break;
    76d4:	e011      	b.n	76fa <Gpt_GetTimeRemaining+0xee>
            case GPT_STATUS_STOPPED:
            {
                returnValue = returnHwChannelInfo.uTargetTime-Gpt_aStopTime[coreID][channel];
    76d6:	9903      	ldr	r1, [sp, #12]
    76d8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    76dc:	4c0b      	ldr	r4, [pc, #44]	; (770c <Gpt_GetTimeRemaining+0x100>)
    76de:	9a05      	ldr	r2, [sp, #20]
    76e0:	4613      	mov	r3, r2
    76e2:	005b      	lsls	r3, r3, #1
    76e4:	4413      	add	r3, r2
    76e6:	4403      	add	r3, r0
    76e8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    76ec:	1acb      	subs	r3, r1, r3
    76ee:	9307      	str	r3, [sp, #28]
            }
            break;
    76f0:	e003      	b.n	76fa <Gpt_GetTimeRemaining+0xee>
            case GPT_STATUS_EXPIRED:
            {
                returnValue = 0U;
    76f2:	2300      	movs	r3, #0
    76f4:	9307      	str	r3, [sp, #28]
            }
            break;
    76f6:	e000      	b.n	76fa <Gpt_GetTimeRemaining+0xee>
            default:
                /*Only the above four channel states are allowed when this function is called*/
                break;
    76f8:	bf00      	nop
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif

    return returnValue;
    76fa:	9b07      	ldr	r3, [sp, #28]
}
    76fc:	4618      	mov	r0, r3
    76fe:	b008      	add	sp, #32
    7700:	bd10      	pop	{r4, pc}
    7702:	bf00      	nop
    7704:	1fff8ffc 	.word	0x1fff8ffc
    7708:	1fff9000 	.word	0x1fff9000
    770c:	1fff9018 	.word	0x1fff9018

00007710 <Gpt_StartTimer>:
void Gpt_StartTimer
(
    Gpt_ChannelType channel,
    Gpt_ValueType value
)
{
    7710:	b500      	push	{lr}
    7712:	b085      	sub	sp, #20
    7714:	4603      	mov	r3, r0
    7716:	9100      	str	r1, [sp, #0]
    7718:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    Std_ReturnType returnValue;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    771c:	2300      	movs	r3, #0
    771e:	9303      	str	r3, [sp, #12]

    if ((Std_ReturnType)E_OK == Gpt_ValidateChannelStatus(GPT_STARTTIMER_ID, channel, coreID))
    7720:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7724:	9a03      	ldr	r2, [sp, #12]
    7726:	4619      	mov	r1, r3
    7728:	2005      	movs	r0, #5
    772a:	f7ff fbe7 	bl	6efc <Gpt_ValidateChannelStatus>
    772e:	4603      	mov	r3, r0
    7730:	2b00      	cmp	r3, #0
    7732:	d155      	bne.n	77e0 <Gpt_StartTimer+0xd0>
    {
#if (GPT_VALIDATE_PARAM  == STD_ON)
        if ((Std_ReturnType)E_OK == Gpt_ValidateParamValue(GPT_STARTTIMER_ID, channel, value, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7734:	4a2c      	ldr	r2, [pc, #176]	; (77e8 <Gpt_StartTimer+0xd8>)
    7736:	9b03      	ldr	r3, [sp, #12]
    7738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    773c:	695a      	ldr	r2, [r3, #20]
    773e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7742:	5cd3      	ldrb	r3, [r2, r3]
    7744:	f88d 300b 	strb.w	r3, [sp, #11]
            /*Enable hardware interrupts for the one-shot mode to set the status of  channel*/
            if (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    7748:	4a27      	ldr	r2, [pc, #156]	; (77e8 <Gpt_StartTimer+0xd8>)
    774a:	9b03      	ldr	r3, [sp, #12]
    774c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7750:	6859      	ldr	r1, [r3, #4]
    7752:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7756:	4613      	mov	r3, r2
    7758:	005b      	lsls	r3, r3, #1
    775a:	4413      	add	r3, r2
    775c:	00db      	lsls	r3, r3, #3
    775e:	440b      	add	r3, r1
    7760:	3310      	adds	r3, #16
    7762:	681b      	ldr	r3, [r3, #0]
    7764:	2b01      	cmp	r3, #1
    7766:	d110      	bne.n	778a <Gpt_StartTimer+0x7a>
            {
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7768:	4a1f      	ldr	r2, [pc, #124]	; (77e8 <Gpt_StartTimer+0xd8>)
    776a:	9b03      	ldr	r3, [sp, #12]
    776c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7770:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    7772:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7776:	4613      	mov	r3, r2
    7778:	005b      	lsls	r3, r3, #1
    777a:	4413      	add	r3, r2
    777c:	00db      	lsls	r3, r3, #3
    777e:	440b      	add	r3, r1
    7780:	3314      	adds	r3, #20
    7782:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    7784:	4618      	mov	r0, r3
    7786:	f000 fc29 	bl	7fdc <Gpt_Ipw_EnableInterrupt>
                );
            }

            /* Change GPT channel status.Channel status change shall be made before to start
            the hardware in order to not change the channel status from EXPIRED to RUNNING*/
            Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_RUNNING;
    778a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    778e:	4817      	ldr	r0, [pc, #92]	; (77ec <Gpt_StartTimer+0xdc>)
    7790:	9a03      	ldr	r2, [sp, #12]
    7792:	4613      	mov	r3, r2
    7794:	005b      	lsls	r3, r3, #1
    7796:	4413      	add	r3, r2
    7798:	440b      	add	r3, r1
    779a:	2204      	movs	r2, #4
    779c:	f840 2033 	str.w	r2, [r0, r3, lsl #3]

            /* Call low level API */
            returnValue = Gpt_Ipw_StartTimer(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig),value);
    77a0:	4a11      	ldr	r2, [pc, #68]	; (77e8 <Gpt_StartTimer+0xd8>)
    77a2:	9b03      	ldr	r3, [sp, #12]
    77a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77a8:	6859      	ldr	r1, [r3, #4]
    77aa:	f89d 200b 	ldrb.w	r2, [sp, #11]
    77ae:	4613      	mov	r3, r2
    77b0:	005b      	lsls	r3, r3, #1
    77b2:	4413      	add	r3, r2
    77b4:	00db      	lsls	r3, r3, #3
    77b6:	440b      	add	r3, r1
    77b8:	3314      	adds	r3, #20
    77ba:	681b      	ldr	r3, [r3, #0]
    77bc:	9900      	ldr	r1, [sp, #0]
    77be:	4618      	mov	r0, r3
    77c0:	f000 fbc2 	bl	7f48 <Gpt_Ipw_StartTimer>
    77c4:	4603      	mov	r3, r0
    77c6:	f88d 300a 	strb.w	r3, [sp, #10]

            if((Std_ReturnType)E_OK != returnValue)
    77ca:	f89d 300a 	ldrb.w	r3, [sp, #10]
    77ce:	2b00      	cmp	r3, #0
    77d0:	d006      	beq.n	77e0 <Gpt_StartTimer+0xd0>
            {
                (void)Det_ReportRuntimeError\
    77d2:	232b      	movs	r3, #43	; 0x2b
    77d4:	2205      	movs	r2, #5
    77d6:	2100      	movs	r1, #0
    77d8:	2064      	movs	r0, #100	; 0x64
    77da:	f004 f84f 	bl	b87c <Det_ReportRuntimeError>
            }
#if (GPT_VALIDATE_PARAM  == STD_ON)
        }
#endif
    }
    return;
    77de:	bf00      	nop
    77e0:	bf00      	nop
}
    77e2:	b005      	add	sp, #20
    77e4:	f85d fb04 	ldr.w	pc, [sp], #4
    77e8:	1fff8ffc 	.word	0x1fff8ffc
    77ec:	1fff9000 	.word	0x1fff9000

000077f0 <Gpt_StopTimer>:
*
* @pre          The driver needs to be initialized. Gpt_StartTimer must be called before.
* @implements   Gpt_StopTimer_Activity
*/
void Gpt_StopTimer(Gpt_ChannelType channel)
{
    77f0:	b500      	push	{lr}
    77f2:	b089      	sub	sp, #36	; 0x24
    77f4:	4603      	mov	r3, r0
    77f6:	f88d 3007 	strb.w	r3, [sp, #7]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    77fa:	2300      	movs	r3, #0
    77fc:	f88d 3008 	strb.w	r3, [sp, #8]
    7800:	2300      	movs	r3, #0
    7802:	9303      	str	r3, [sp, #12]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    7804:	ab02      	add	r3, sp, #8
    7806:	9307      	str	r3, [sp, #28]
    Gpt_ValueType uElapsedTime = 0U;
    7808:	2300      	movs	r3, #0
    780a:	9306      	str	r3, [sp, #24]
#endif
    Gpt_ChannelType ChannelIndex;

    uint32 coreID = (uint32)Gpt_GetCoreID();
    780c:	2300      	movs	r3, #0
    780e:	9305      	str	r3, [sp, #20]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(GPT_STOPTIMER_ID, channel, coreID))
    {
#endif
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7810:	4a3a      	ldr	r2, [pc, #232]	; (78fc <Gpt_StopTimer+0x10c>)
    7812:	9b05      	ldr	r3, [sp, #20]
    7814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7818:	695a      	ldr	r2, [r3, #20]
    781a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    781e:	5cd3      	ldrb	r3, [r2, r3]
    7820:	f88d 3013 	strb.w	r3, [sp, #19]
        /*Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs can change
        the logical channel state between the checking of logical channel state and timestamps
        retrieval*/
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
        /* Get the elapsed  time  for later use by other API calls*/
        uElapsedTime = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    7824:	4a35      	ldr	r2, [pc, #212]	; (78fc <Gpt_StopTimer+0x10c>)
    7826:	9b05      	ldr	r3, [sp, #20]
    7828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    782c:	6859      	ldr	r1, [r3, #4]
    782e:	f89d 2013 	ldrb.w	r2, [sp, #19]
    7832:	4613      	mov	r3, r2
    7834:	005b      	lsls	r3, r3, #1
    7836:	4413      	add	r3, r2
    7838:	00db      	lsls	r3, r3, #3
    783a:	440b      	add	r3, r1
    783c:	3314      	adds	r3, #20
    783e:	681b      	ldr	r3, [r3, #0]
    7840:	9907      	ldr	r1, [sp, #28]
    7842:	4618      	mov	r0, r3
    7844:	f000 fb9f 	bl	7f86 <Gpt_Ipw_GetTimeElapsed>
    7848:	9006      	str	r0, [sp, #24]
#endif

        /*Check the logical channel status*/
        if (GPT_STATUS_RUNNING == Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    784a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    784e:	482c      	ldr	r0, [pc, #176]	; (7900 <Gpt_StopTimer+0x110>)
    7850:	9a05      	ldr	r2, [sp, #20]
    7852:	4613      	mov	r3, r2
    7854:	005b      	lsls	r3, r3, #1
    7856:	4413      	add	r3, r2
    7858:	440b      	add	r3, r1
    785a:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
    785e:	2b04      	cmp	r3, #4
    7860:	d147      	bne.n	78f2 <Gpt_StopTimer+0x102>
        {
            /* Call low level stop timer */
            Gpt_Ipw_StopTimer(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    7862:	4a26      	ldr	r2, [pc, #152]	; (78fc <Gpt_StopTimer+0x10c>)
    7864:	9b05      	ldr	r3, [sp, #20]
    7866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    786a:	6859      	ldr	r1, [r3, #4]
    786c:	f89d 2013 	ldrb.w	r2, [sp, #19]
    7870:	4613      	mov	r3, r2
    7872:	005b      	lsls	r3, r3, #1
    7874:	4413      	add	r3, r2
    7876:	00db      	lsls	r3, r3, #3
    7878:	440b      	add	r3, r1
    787a:	3314      	adds	r3, #20
    787c:	681b      	ldr	r3, [r3, #0]
    787e:	4618      	mov	r0, r3
    7880:	f000 fb97 	bl	7fb2 <Gpt_Ipw_StopTimer>

            if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    7884:	f89d 3008 	ldrb.w	r3, [sp, #8]
    7888:	2b00      	cmp	r3, #0
    788a:	d01b      	beq.n	78c4 <Gpt_StopTimer+0xd4>
                (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    788c:	4a1b      	ldr	r2, [pc, #108]	; (78fc <Gpt_StopTimer+0x10c>)
    788e:	9b05      	ldr	r3, [sp, #20]
    7890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7894:	6859      	ldr	r1, [r3, #4]
    7896:	f89d 2013 	ldrb.w	r2, [sp, #19]
    789a:	4613      	mov	r3, r2
    789c:	005b      	lsls	r3, r3, #1
    789e:	4413      	add	r3, r2
    78a0:	00db      	lsls	r3, r3, #3
    78a2:	440b      	add	r3, r1
    78a4:	3310      	adds	r3, #16
    78a6:	681b      	ldr	r3, [r3, #0]
            if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    78a8:	2b01      	cmp	r3, #1
    78aa:	d10b      	bne.n	78c4 <Gpt_StopTimer+0xd4>
            )
            {
                /*This action could be executed only when the function is called during a critical
                section implemented by disabling all interrupts*/
                /*Set channel status to EXPIRED*/
                Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_EXPIRED;
    78ac:	f89d 1007 	ldrb.w	r1, [sp, #7]
    78b0:	4813      	ldr	r0, [pc, #76]	; (7900 <Gpt_StopTimer+0x110>)
    78b2:	9a05      	ldr	r2, [sp, #20]
    78b4:	4613      	mov	r3, r2
    78b6:	005b      	lsls	r3, r3, #1
    78b8:	4413      	add	r3, r2
    78ba:	440b      	add	r3, r1
    78bc:	2203      	movs	r2, #3
    78be:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    78c2:	e015      	b.n	78f0 <Gpt_StopTimer+0x100>
            }
            else
            {
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                /* Store the stopping time for later use by other API calls*/
                Gpt_aStopTime[coreID][channel] = uElapsedTime;
    78c4:	f89d 1007 	ldrb.w	r1, [sp, #7]
    78c8:	480e      	ldr	r0, [pc, #56]	; (7904 <Gpt_StopTimer+0x114>)
    78ca:	9a05      	ldr	r2, [sp, #20]
    78cc:	4613      	mov	r3, r2
    78ce:	005b      	lsls	r3, r3, #1
    78d0:	4413      	add	r3, r2
    78d2:	440b      	add	r3, r1
    78d4:	9a06      	ldr	r2, [sp, #24]
    78d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
#endif

                /* Set GPT channel status to stopped*/
                Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_STOPPED;
    78da:	f89d 1007 	ldrb.w	r1, [sp, #7]
    78de:	4808      	ldr	r0, [pc, #32]	; (7900 <Gpt_StopTimer+0x110>)
    78e0:	9a05      	ldr	r2, [sp, #20]
    78e2:	4613      	mov	r3, r2
    78e4:	005b      	lsls	r3, r3, #1
    78e6:	4413      	add	r3, r2
    78e8:	440b      	add	r3, r1
    78ea:	2202      	movs	r2, #2
    78ec:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
            }
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
    return;
    78f0:	bf00      	nop
    78f2:	bf00      	nop
}
    78f4:	b009      	add	sp, #36	; 0x24
    78f6:	f85d fb04 	ldr.w	pc, [sp], #4
    78fa:	bf00      	nop
    78fc:	1fff8ffc 	.word	0x1fff8ffc
    7900:	1fff9000 	.word	0x1fff9000
    7904:	1fff9018 	.word	0x1fff9018

00007908 <Gpt_EnableNotification>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_EnableNotification_Activity
*/
void Gpt_EnableNotification(Gpt_ChannelType channel)
{
    7908:	b500      	push	{lr}
    790a:	b085      	sub	sp, #20
    790c:	4603      	mov	r3, r0
    790e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7912:	2300      	movs	r3, #0
    7914:	9303      	str	r3, [sp, #12]
#endif
#if (GPT_VALIDATE_PARAM == STD_ON)
        if ((Std_ReturnType)E_OK == Gpt_ValidateChannelNotification(GPT_ENABLENOTIFICATION_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7916:	4a19      	ldr	r2, [pc, #100]	; (797c <Gpt_EnableNotification+0x74>)
    7918:	9b03      	ldr	r3, [sp, #12]
    791a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    791e:	695a      	ldr	r2, [r3, #20]
    7920:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7924:	5cd3      	ldrb	r3, [r2, r3]
    7926:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Set the enable notification attribute */
            Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = TRUE;
    792a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    792e:	4814      	ldr	r0, [pc, #80]	; (7980 <Gpt_EnableNotification+0x78>)
    7930:	9a03      	ldr	r2, [sp, #12]
    7932:	4613      	mov	r3, r2
    7934:	005b      	lsls	r3, r3, #1
    7936:	4413      	add	r3, r2
    7938:	440b      	add	r3, r1
    793a:	00db      	lsls	r3, r3, #3
    793c:	4403      	add	r3, r0
    793e:	2201      	movs	r2, #1
    7940:	711a      	strb	r2, [r3, #4]

            if (GPT_MODE_NORMAL == Gpt_eMode[coreID])
    7942:	4a10      	ldr	r2, [pc, #64]	; (7984 <Gpt_EnableNotification+0x7c>)
    7944:	9b03      	ldr	r3, [sp, #12]
    7946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    794a:	2b00      	cmp	r3, #0
    794c:	d111      	bne.n	7972 <Gpt_EnableNotification+0x6a>
            {
                /*Enable hardware interrupts*/
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    794e:	4a0b      	ldr	r2, [pc, #44]	; (797c <Gpt_EnableNotification+0x74>)
    7950:	9b03      	ldr	r3, [sp, #12]
    7952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7956:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    7958:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    795c:	4613      	mov	r3, r2
    795e:	005b      	lsls	r3, r3, #1
    7960:	4413      	add	r3, r2
    7962:	00db      	lsls	r3, r3, #3
    7964:	440b      	add	r3, r1
    7966:	3314      	adds	r3, #20
    7968:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    796a:	4618      	mov	r0, r3
    796c:	f000 fb36 	bl	7fdc <Gpt_Ipw_EnableInterrupt>
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif

    return;
    7970:	bf00      	nop
    7972:	bf00      	nop
}
    7974:	b005      	add	sp, #20
    7976:	f85d fb04 	ldr.w	pc, [sp], #4
    797a:	bf00      	nop
    797c:	1fff8ffc 	.word	0x1fff8ffc
    7980:	1fff9000 	.word	0x1fff9000
    7984:	1fff8ff8 	.word	0x1fff8ff8

00007988 <Gpt_DisableNotification>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_DisableNotification_Activity
*/
void Gpt_DisableNotification(Gpt_ChannelType channel)
{
    7988:	b500      	push	{lr}
    798a:	b085      	sub	sp, #20
    798c:	4603      	mov	r3, r0
    798e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7992:	2300      	movs	r3, #0
    7994:	9303      	str	r3, [sp, #12]
#endif
#if (GPT_VALIDATE_PARAM == STD_ON)
        if ((Std_ReturnType)E_OK == Gpt_ValidateChannelNotification(GPT_DISABLENOTIFICATION_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7996:	4a27      	ldr	r2, [pc, #156]	; (7a34 <Gpt_DisableNotification+0xac>)
    7998:	9b03      	ldr	r3, [sp, #12]
    799a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    799e:	695a      	ldr	r2, [r3, #20]
    79a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    79a4:	5cd3      	ldrb	r3, [r2, r3]
    79a6:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Set the enable notification attribute */
            Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = FALSE;
    79aa:	f89d 1007 	ldrb.w	r1, [sp, #7]
    79ae:	4822      	ldr	r0, [pc, #136]	; (7a38 <Gpt_DisableNotification+0xb0>)
    79b0:	9a03      	ldr	r2, [sp, #12]
    79b2:	4613      	mov	r3, r2
    79b4:	005b      	lsls	r3, r3, #1
    79b6:	4413      	add	r3, r2
    79b8:	440b      	add	r3, r1
    79ba:	00db      	lsls	r3, r3, #3
    79bc:	4403      	add	r3, r0
    79be:	2200      	movs	r2, #0
    79c0:	711a      	strb	r2, [r3, #4]

            /* Disable hardware interrupts if the channel is not running in the ONE-SHOT mode.
            This is needed because the channel state is updated by ISR for ONE-SHOT mode */
            if ((GPT_MODE_NORMAL == Gpt_eMode[coreID]) && \
    79c2:	4a1e      	ldr	r2, [pc, #120]	; (7a3c <Gpt_DisableNotification+0xb4>)
    79c4:	9b03      	ldr	r3, [sp, #12]
    79c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79ca:	2b00      	cmp	r3, #0
    79cc:	d12d      	bne.n	7a2a <Gpt_DisableNotification+0xa2>
                ((GPT_CH_MODE_CONTINUOUS == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode) \
    79ce:	4a19      	ldr	r2, [pc, #100]	; (7a34 <Gpt_DisableNotification+0xac>)
    79d0:	9b03      	ldr	r3, [sp, #12]
    79d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79d6:	6859      	ldr	r1, [r3, #4]
    79d8:	f89d 200b 	ldrb.w	r2, [sp, #11]
    79dc:	4613      	mov	r3, r2
    79de:	005b      	lsls	r3, r3, #1
    79e0:	4413      	add	r3, r2
    79e2:	00db      	lsls	r3, r3, #3
    79e4:	440b      	add	r3, r1
    79e6:	3310      	adds	r3, #16
    79e8:	681b      	ldr	r3, [r3, #0]
            if ((GPT_MODE_NORMAL == Gpt_eMode[coreID]) && \
    79ea:	2b00      	cmp	r3, #0
    79ec:	d00b      	beq.n	7a06 <Gpt_DisableNotification+0x7e>
                 || (GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    79ee:	f89d 1007 	ldrb.w	r1, [sp, #7]
    79f2:	4811      	ldr	r0, [pc, #68]	; (7a38 <Gpt_DisableNotification+0xb0>)
    79f4:	9a03      	ldr	r2, [sp, #12]
    79f6:	4613      	mov	r3, r2
    79f8:	005b      	lsls	r3, r3, #1
    79fa:	4413      	add	r3, r2
    79fc:	440b      	add	r3, r1
    79fe:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
    7a02:	2b04      	cmp	r3, #4
    7a04:	d011      	beq.n	7a2a <Gpt_DisableNotification+0xa2>
               )
            {
                /*Disable hardware interrupts*/
                Gpt_Ipw_DisableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7a06:	4a0b      	ldr	r2, [pc, #44]	; (7a34 <Gpt_DisableNotification+0xac>)
    7a08:	9b03      	ldr	r3, [sp, #12]
    7a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a0e:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_DisableInterrupt
    7a10:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7a14:	4613      	mov	r3, r2
    7a16:	005b      	lsls	r3, r3, #1
    7a18:	4413      	add	r3, r2
    7a1a:	00db      	lsls	r3, r3, #3
    7a1c:	440b      	add	r3, r1
    7a1e:	3314      	adds	r3, #20
    7a20:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_DisableInterrupt
    7a22:	4618      	mov	r0, r3
    7a24:	f000 faf5 	bl	8012 <Gpt_Ipw_DisableInterrupt>
        }
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
    return;
    7a28:	bf00      	nop
    7a2a:	bf00      	nop
}
    7a2c:	b005      	add	sp, #20
    7a2e:	f85d fb04 	ldr.w	pc, [sp], #4
    7a32:	bf00      	nop
    7a34:	1fff8ffc 	.word	0x1fff8ffc
    7a38:	1fff9000 	.word	0x1fff9000
    7a3c:	1fff8ff8 	.word	0x1fff8ff8

00007a40 <Gpt_SetMode>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_SetMode_Activity
*/
void Gpt_SetMode(Gpt_ModeType Mode)
{
    7a40:	b500      	push	{lr}
    7a42:	b085      	sub	sp, #20
    7a44:	9001      	str	r0, [sp, #4]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_OFF)
    (void)Mode;
#endif

#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7a46:	2300      	movs	r3, #0
    7a48:	9303      	str	r3, [sp, #12]
        /*Validate the driver calling context*/
        if((Std_ReturnType)E_OK == Gpt_ValidateParamMode(Mode))
        {
#endif
            /*Implements the behaviour for the sleep mode */
            if(GPT_MODE_SLEEP == Mode)
    7a4a:	9b01      	ldr	r3, [sp, #4]
    7a4c:	2b01      	cmp	r3, #1
    7a4e:	d10f      	bne.n	7a70 <Gpt_SetMode+0x30>
            {
                /* Check channel has wakeup enabled at runtime */
                Gpt_CheckStatusWakeupEnabled(coreID);
    7a50:	9803      	ldr	r0, [sp, #12]
    7a52:	f7ff fb45 	bl	70e0 <Gpt_CheckStatusWakeupEnabled>

#if(GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON)
                /* De-initialize and Stop Predef Timers. */
                Gpt_Ipw_StopPredefTimer(Gpt_pConfig[coreID]);
    7a56:	4a15      	ldr	r2, [pc, #84]	; (7aac <Gpt_SetMode+0x6c>)
    7a58:	9b03      	ldr	r3, [sp, #12]
    7a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a5e:	4618      	mov	r0, r3
    7a60:	f000 fb52 	bl	8108 <Gpt_Ipw_StopPredefTimer>
#endif
#if (((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON)) || \
     (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON) || \
     (GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON))
                /* Set the driver mode to sleep */
                Gpt_eMode[coreID] = GPT_MODE_SLEEP;
    7a64:	4a12      	ldr	r2, [pc, #72]	; (7ab0 <Gpt_SetMode+0x70>)
    7a66:	9b03      	ldr	r3, [sp, #12]
    7a68:	2101      	movs	r1, #1
    7a6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif

#endif /*GPT_REPORT_WAKEUP_SOURCE*/
    return;
    7a6e:	e018      	b.n	7aa2 <Gpt_SetMode+0x62>
            else if (GPT_MODE_NORMAL == Mode)
    7a70:	9b01      	ldr	r3, [sp, #4]
    7a72:	2b00      	cmp	r3, #0
    7a74:	d115      	bne.n	7aa2 <Gpt_SetMode+0x62>
                   if ((Gpt_ModeType)GPT_MODE_SLEEP == Gpt_eMode[coreID])
    7a76:	4a0e      	ldr	r2, [pc, #56]	; (7ab0 <Gpt_SetMode+0x70>)
    7a78:	9b03      	ldr	r3, [sp, #12]
    7a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a7e:	2b01      	cmp	r3, #1
    7a80:	d106      	bne.n	7a90 <Gpt_SetMode+0x50>
                   Gpt_Ipw_StartPredefTimer(Gpt_pConfig[coreID]);
    7a82:	4a0a      	ldr	r2, [pc, #40]	; (7aac <Gpt_SetMode+0x6c>)
    7a84:	9b03      	ldr	r3, [sp, #12]
    7a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a8a:	4618      	mov	r0, r3
    7a8c:	f000 faca 	bl	8024 <Gpt_Ipw_StartPredefTimer>
                Gpt_CheckStatusNotificationEnabled(coreID);
    7a90:	9803      	ldr	r0, [sp, #12]
    7a92:	f7ff faad 	bl	6ff0 <Gpt_CheckStatusNotificationEnabled>
                Gpt_eMode[coreID] = GPT_MODE_NORMAL;
    7a96:	4a06      	ldr	r2, [pc, #24]	; (7ab0 <Gpt_SetMode+0x70>)
    7a98:	9b03      	ldr	r3, [sp, #12]
    7a9a:	2100      	movs	r1, #0
    7a9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return;
    7aa0:	bf00      	nop
    7aa2:	bf00      	nop
}
    7aa4:	b005      	add	sp, #20
    7aa6:	f85d fb04 	ldr.w	pc, [sp], #4
    7aaa:	bf00      	nop
    7aac:	1fff8ffc 	.word	0x1fff8ffc
    7ab0:	1fff8ff8 	.word	0x1fff8ff8

00007ab4 <Gpt_DisableWakeup>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_DisableWakeup_Activity
*/
void Gpt_DisableWakeup(Gpt_ChannelType channel)
{
    7ab4:	b500      	push	{lr}
    7ab6:	b085      	sub	sp, #20
    7ab8:	4603      	mov	r3, r0
    7aba:	f88d 3007 	strb.w	r3, [sp, #7]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7abe:	2300      	movs	r3, #0
    7ac0:	9303      	str	r3, [sp, #12]

#if (GPT_VALIDATE_PARAM == STD_ON)
        if((Std_ReturnType)E_OK == Gpt_ValidateChannelWakeup(GPT_DISABLEWAKEUP_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7ac2:	4a27      	ldr	r2, [pc, #156]	; (7b60 <Gpt_DisableWakeup+0xac>)
    7ac4:	9b03      	ldr	r3, [sp, #12]
    7ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7aca:	695a      	ldr	r2, [r3, #20]
    7acc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ad0:	5cd3      	ldrb	r3, [r2, r3]
    7ad2:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Set the enable wakeup attribute */
            Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = FALSE;
    7ad6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7ada:	4822      	ldr	r0, [pc, #136]	; (7b64 <Gpt_DisableWakeup+0xb0>)
    7adc:	9a03      	ldr	r2, [sp, #12]
    7ade:	4613      	mov	r3, r2
    7ae0:	005b      	lsls	r3, r3, #1
    7ae2:	4413      	add	r3, r2
    7ae4:	440b      	add	r3, r1
    7ae6:	00db      	lsls	r3, r3, #3
    7ae8:	4403      	add	r3, r0
    7aea:	2200      	movs	r2, #0
    7aec:	715a      	strb	r2, [r3, #5]

            /* Disable hardware interrupts if the channel is not running in the ONE-SHOT mode.
            This is needed because the channel state is updated by ISR for ONE-SHOT mode */
            if ((GPT_MODE_SLEEP == Gpt_eMode[coreID]) && \
    7aee:	4a1e      	ldr	r2, [pc, #120]	; (7b68 <Gpt_DisableWakeup+0xb4>)
    7af0:	9b03      	ldr	r3, [sp, #12]
    7af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7af6:	2b01      	cmp	r3, #1
    7af8:	d12d      	bne.n	7b56 <Gpt_DisableWakeup+0xa2>
                ((GPT_CH_MODE_CONTINUOUS == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    7afa:	4a19      	ldr	r2, [pc, #100]	; (7b60 <Gpt_DisableWakeup+0xac>)
    7afc:	9b03      	ldr	r3, [sp, #12]
    7afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b02:	6859      	ldr	r1, [r3, #4]
    7b04:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7b08:	4613      	mov	r3, r2
    7b0a:	005b      	lsls	r3, r3, #1
    7b0c:	4413      	add	r3, r2
    7b0e:	00db      	lsls	r3, r3, #3
    7b10:	440b      	add	r3, r1
    7b12:	3310      	adds	r3, #16
    7b14:	681b      	ldr	r3, [r3, #0]
            if ((GPT_MODE_SLEEP == Gpt_eMode[coreID]) && \
    7b16:	2b00      	cmp	r3, #0
    7b18:	d00b      	beq.n	7b32 <Gpt_DisableWakeup+0x7e>
                 || (GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    7b1a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7b1e:	4811      	ldr	r0, [pc, #68]	; (7b64 <Gpt_DisableWakeup+0xb0>)
    7b20:	9a03      	ldr	r2, [sp, #12]
    7b22:	4613      	mov	r3, r2
    7b24:	005b      	lsls	r3, r3, #1
    7b26:	4413      	add	r3, r2
    7b28:	440b      	add	r3, r1
    7b2a:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
    7b2e:	2b04      	cmp	r3, #4
    7b30:	d011      	beq.n	7b56 <Gpt_DisableWakeup+0xa2>
               )
            {
                /*Disable hardware interrupts*/
                Gpt_Ipw_DisableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7b32:	4a0b      	ldr	r2, [pc, #44]	; (7b60 <Gpt_DisableWakeup+0xac>)
    7b34:	9b03      	ldr	r3, [sp, #12]
    7b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b3a:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_DisableInterrupt
    7b3c:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7b40:	4613      	mov	r3, r2
    7b42:	005b      	lsls	r3, r3, #1
    7b44:	4413      	add	r3, r2
    7b46:	00db      	lsls	r3, r3, #3
    7b48:	440b      	add	r3, r1
    7b4a:	3314      	adds	r3, #20
    7b4c:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_DisableInterrupt
    7b4e:	4618      	mov	r0, r3
    7b50:	f000 fa5f 	bl	8012 <Gpt_Ipw_DisableInterrupt>
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
#endif /*GPT_REPORT_WAKEUP_SOURCE*/
    return;
    7b54:	bf00      	nop
    7b56:	bf00      	nop
}
    7b58:	b005      	add	sp, #20
    7b5a:	f85d fb04 	ldr.w	pc, [sp], #4
    7b5e:	bf00      	nop
    7b60:	1fff8ffc 	.word	0x1fff8ffc
    7b64:	1fff9000 	.word	0x1fff9000
    7b68:	1fff8ff8 	.word	0x1fff8ff8

00007b6c <Gpt_EnableWakeup>:
*
* @pre          The driver needs to be initialized. The channel must be configured as wakeup capable.
* @implements   Gpt_EnableWakeup_Activity
*/
void Gpt_EnableWakeup(Gpt_ChannelType channel)
{
    7b6c:	b500      	push	{lr}
    7b6e:	b085      	sub	sp, #20
    7b70:	4603      	mov	r3, r0
    7b72:	f88d 3007 	strb.w	r3, [sp, #7]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7b76:	2300      	movs	r3, #0
    7b78:	9303      	str	r3, [sp, #12]
#endif
#if (GPT_VALIDATE_PARAM == STD_ON)
        if((Std_ReturnType)E_OK == Gpt_ValidateChannelWakeup(GPT_ENABLEWAKEUP_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7b7a:	4a19      	ldr	r2, [pc, #100]	; (7be0 <Gpt_EnableWakeup+0x74>)
    7b7c:	9b03      	ldr	r3, [sp, #12]
    7b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b82:	695a      	ldr	r2, [r3, #20]
    7b84:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b88:	5cd3      	ldrb	r3, [r2, r3]
    7b8a:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Functionality implementation */
            /* Set the enable wakeup attribute */
            Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = TRUE;
    7b8e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7b92:	4814      	ldr	r0, [pc, #80]	; (7be4 <Gpt_EnableWakeup+0x78>)
    7b94:	9a03      	ldr	r2, [sp, #12]
    7b96:	4613      	mov	r3, r2
    7b98:	005b      	lsls	r3, r3, #1
    7b9a:	4413      	add	r3, r2
    7b9c:	440b      	add	r3, r1
    7b9e:	00db      	lsls	r3, r3, #3
    7ba0:	4403      	add	r3, r0
    7ba2:	2201      	movs	r2, #1
    7ba4:	715a      	strb	r2, [r3, #5]

            if (GPT_MODE_SLEEP == Gpt_eMode[coreID])
    7ba6:	4a10      	ldr	r2, [pc, #64]	; (7be8 <Gpt_EnableWakeup+0x7c>)
    7ba8:	9b03      	ldr	r3, [sp, #12]
    7baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bae:	2b01      	cmp	r3, #1
    7bb0:	d111      	bne.n	7bd6 <Gpt_EnableWakeup+0x6a>
            {
                /*Enable hardware interrupts*/
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7bb2:	4a0b      	ldr	r2, [pc, #44]	; (7be0 <Gpt_EnableWakeup+0x74>)
    7bb4:	9b03      	ldr	r3, [sp, #12]
    7bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bba:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    7bbc:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7bc0:	4613      	mov	r3, r2
    7bc2:	005b      	lsls	r3, r3, #1
    7bc4:	4413      	add	r3, r2
    7bc6:	00db      	lsls	r3, r3, #3
    7bc8:	440b      	add	r3, r1
    7bca:	3314      	adds	r3, #20
    7bcc:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    7bce:	4618      	mov	r0, r3
    7bd0:	f000 fa04 	bl	7fdc <Gpt_Ipw_EnableInterrupt>
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
#endif /*GPT_REPORT_WAKEUP_SOURCE*/
    return;
    7bd4:	bf00      	nop
    7bd6:	bf00      	nop
}
    7bd8:	b005      	add	sp, #20
    7bda:	f85d fb04 	ldr.w	pc, [sp], #4
    7bde:	bf00      	nop
    7be0:	1fff8ffc 	.word	0x1fff8ffc
    7be4:	1fff9000 	.word	0x1fff9000
    7be8:	1fff8ff8 	.word	0x1fff8ff8

00007bec <Gpt_CheckWakeup>:
*
* @pre          The driver needs to be initialized. The channel must be configured as wakeup capable.
* @implements   Gpt_CheckWakeup_Activity
*/
void Gpt_CheckWakeup(EcuM_WakeupSourceType wakeupSource)
{
    7bec:	b500      	push	{lr}
    7bee:	b087      	sub	sp, #28
    7bf0:	9001      	str	r0, [sp, #4]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7bf2:	2300      	movs	r3, #0
    7bf4:	9304      	str	r3, [sp, #16]
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    /*Validate the driver calling context*/
    if((Std_ReturnType)E_OK == Gpt_ValidateGlobalCall(GPT_CHECKWAKEUP_ID, coreID))
    {
#endif
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7bf6:	2300      	movs	r3, #0
    7bf8:	f88d 3017 	strb.w	r3, [sp, #23]
    7bfc:	e03f      	b.n	7c7e <Gpt_CheckWakeup+0x92>
        {
            channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    7bfe:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7c02:	9904      	ldr	r1, [sp, #16]
    7c04:	4618      	mov	r0, r3
    7c06:	f7ff f9cb 	bl	6fa0 <Gpt_ConvertChannelIndexToChannel>
    7c0a:	4603      	mov	r3, r0
    7c0c:	f88d 300f 	strb.w	r3, [sp, #15]
            if(channel < GPT_HW_CHANNEL_NUM)
    7c10:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7c14:	2b02      	cmp	r3, #2
    7c16:	d82d      	bhi.n	7c74 <Gpt_CheckWakeup+0x88>
            {
                if ((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_uWakeupSource) == wakeupSource) && \
    7c18:	4a1f      	ldr	r2, [pc, #124]	; (7c98 <Gpt_CheckWakeup+0xac>)
    7c1a:	9b04      	ldr	r3, [sp, #16]
    7c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c20:	6859      	ldr	r1, [r3, #4]
    7c22:	f89d 2017 	ldrb.w	r2, [sp, #23]
    7c26:	4613      	mov	r3, r2
    7c28:	005b      	lsls	r3, r3, #1
    7c2a:	4413      	add	r3, r2
    7c2c:	00db      	lsls	r3, r3, #3
    7c2e:	440b      	add	r3, r1
    7c30:	3308      	adds	r3, #8
    7c32:	681b      	ldr	r3, [r3, #0]
    7c34:	9a01      	ldr	r2, [sp, #4]
    7c36:	429a      	cmp	r2, r3
    7c38:	d11c      	bne.n	7c74 <Gpt_CheckWakeup+0x88>
                    ((boolean)TRUE == Gpt_aChannelInfo[coreID][channel].bWakeupGenerated)
    7c3a:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7c3e:	4817      	ldr	r0, [pc, #92]	; (7c9c <Gpt_CheckWakeup+0xb0>)
    7c40:	9a04      	ldr	r2, [sp, #16]
    7c42:	4613      	mov	r3, r2
    7c44:	005b      	lsls	r3, r3, #1
    7c46:	4413      	add	r3, r2
    7c48:	440b      	add	r3, r1
    7c4a:	00db      	lsls	r3, r3, #3
    7c4c:	4403      	add	r3, r0
    7c4e:	799b      	ldrb	r3, [r3, #6]
                if ((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_uWakeupSource) == wakeupSource) && \
    7c50:	2b00      	cmp	r3, #0
    7c52:	d00f      	beq.n	7c74 <Gpt_CheckWakeup+0x88>
                    )
                {
                    /*Reset the wakeup flag */
                    Gpt_aChannelInfo[coreID][channel].bWakeupGenerated = FALSE;
    7c54:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7c58:	4810      	ldr	r0, [pc, #64]	; (7c9c <Gpt_CheckWakeup+0xb0>)
    7c5a:	9a04      	ldr	r2, [sp, #16]
    7c5c:	4613      	mov	r3, r2
    7c5e:	005b      	lsls	r3, r3, #1
    7c60:	4413      	add	r3, r2
    7c62:	440b      	add	r3, r1
    7c64:	00db      	lsls	r3, r3, #3
    7c66:	4403      	add	r3, r0
    7c68:	2200      	movs	r2, #0
    7c6a:	719a      	strb	r2, [r3, #6]

                    /* Calling EcuM_SetWakeupEvent and exit*/
                    EcuM_SetWakeupEvent(wakeupSource);
    7c6c:	9801      	ldr	r0, [sp, #4]
    7c6e:	f000 fa7b 	bl	8168 <EcuM_SetWakeupEvent>

                    break;
    7c72:	e00d      	b.n	7c90 <Gpt_CheckWakeup+0xa4>
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7c74:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7c78:	3301      	adds	r3, #1
    7c7a:	f88d 3017 	strb.w	r3, [sp, #23]
    7c7e:	4a06      	ldr	r2, [pc, #24]	; (7c98 <Gpt_CheckWakeup+0xac>)
    7c80:	9b04      	ldr	r3, [sp, #16]
    7c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c86:	781b      	ldrb	r3, [r3, #0]
    7c88:	f89d 2017 	ldrb.w	r2, [sp, #23]
    7c8c:	429a      	cmp	r2, r3
    7c8e:	d3b6      	bcc.n	7bfe <Gpt_CheckWakeup+0x12>
        }    /*for*/
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
#endif /* GPT_REPORT_WAKEUP_SOURCE */
    return;
    7c90:	bf00      	nop
}
    7c92:	b007      	add	sp, #28
    7c94:	f85d fb04 	ldr.w	pc, [sp], #4
    7c98:	1fff8ffc 	.word	0x1fff8ffc
    7c9c:	1fff9000 	.word	0x1fff9000

00007ca0 <Gpt_ProcessCommonInterrupt>:
* @return       void
* @pre          The driver needs to be initialized.
* @implements   Gpt_ProcessCommonInterrupt_Activity
*/
void Gpt_ProcessCommonInterrupt(uint8 channel)
{
    7ca0:	b500      	push	{lr}
    7ca2:	b085      	sub	sp, #20
    7ca4:	4603      	mov	r3, r0
    7ca6:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7caa:	2300      	movs	r3, #0
    7cac:	9303      	str	r3, [sp, #12]

    if (Gpt_pConfig[coreID] != NULL_PTR)
    7cae:	4a41      	ldr	r2, [pc, #260]	; (7db4 <Gpt_ProcessCommonInterrupt+0x114>)
    7cb0:	9b03      	ldr	r3, [sp, #12]
    7cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cb6:	2b00      	cmp	r3, #0
    7cb8:	d077      	beq.n	7daa <Gpt_ProcessCommonInterrupt+0x10a>
    {
        /* Extract the logical channel from the hardware to logic map table */
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7cba:	4a3e      	ldr	r2, [pc, #248]	; (7db4 <Gpt_ProcessCommonInterrupt+0x114>)
    7cbc:	9b03      	ldr	r3, [sp, #12]
    7cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cc2:	695a      	ldr	r2, [r3, #20]
    7cc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7cc8:	5cd3      	ldrb	r3, [r2, r3]
    7cca:	f88d 300b 	strb.w	r3, [sp, #11]

        /* Change the channel status for one-shot mode */
        if (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    7cce:	4a39      	ldr	r2, [pc, #228]	; (7db4 <Gpt_ProcessCommonInterrupt+0x114>)
    7cd0:	9b03      	ldr	r3, [sp, #12]
    7cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cd6:	6859      	ldr	r1, [r3, #4]
    7cd8:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7cdc:	4613      	mov	r3, r2
    7cde:	005b      	lsls	r3, r3, #1
    7ce0:	4413      	add	r3, r2
    7ce2:	00db      	lsls	r3, r3, #3
    7ce4:	440b      	add	r3, r1
    7ce6:	3310      	adds	r3, #16
    7ce8:	681b      	ldr	r3, [r3, #0]
    7cea:	2b01      	cmp	r3, #1
    7cec:	d10a      	bne.n	7d04 <Gpt_ProcessCommonInterrupt+0x64>
        {
            /* Change the channel status to expired */
            Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_EXPIRED;
    7cee:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7cf2:	4831      	ldr	r0, [pc, #196]	; (7db8 <Gpt_ProcessCommonInterrupt+0x118>)
    7cf4:	9a03      	ldr	r2, [sp, #12]
    7cf6:	4613      	mov	r3, r2
    7cf8:	005b      	lsls	r3, r3, #1
    7cfa:	4413      	add	r3, r2
    7cfc:	440b      	add	r3, r1
    7cfe:	2203      	movs	r2, #3
    7d00:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
        }
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
        if ((GPT_MODE_NORMAL == Gpt_eMode[coreID]) && (TRUE == Gpt_aChannelInfo[coreID][channel].bNotificationEnabled))
    7d04:	4a2d      	ldr	r2, [pc, #180]	; (7dbc <Gpt_ProcessCommonInterrupt+0x11c>)
    7d06:	9b03      	ldr	r3, [sp, #12]
    7d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d0c:	2b00      	cmp	r3, #0
    7d0e:	d11b      	bne.n	7d48 <Gpt_ProcessCommonInterrupt+0xa8>
    7d10:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7d14:	4828      	ldr	r0, [pc, #160]	; (7db8 <Gpt_ProcessCommonInterrupt+0x118>)
    7d16:	9a03      	ldr	r2, [sp, #12]
    7d18:	4613      	mov	r3, r2
    7d1a:	005b      	lsls	r3, r3, #1
    7d1c:	4413      	add	r3, r2
    7d1e:	440b      	add	r3, r1
    7d20:	00db      	lsls	r3, r3, #3
    7d22:	4403      	add	r3, r0
    7d24:	791b      	ldrb	r3, [r3, #4]
    7d26:	2b00      	cmp	r3, #0
    7d28:	d00e      	beq.n	7d48 <Gpt_ProcessCommonInterrupt+0xa8>
        {
            (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_pfNotification();
    7d2a:	4a22      	ldr	r2, [pc, #136]	; (7db4 <Gpt_ProcessCommonInterrupt+0x114>)
    7d2c:	9b03      	ldr	r3, [sp, #12]
    7d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d32:	6859      	ldr	r1, [r3, #4]
    7d34:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7d38:	4613      	mov	r3, r2
    7d3a:	005b      	lsls	r3, r3, #1
    7d3c:	4413      	add	r3, r2
    7d3e:	00db      	lsls	r3, r3, #3
    7d40:	440b      	add	r3, r1
    7d42:	3304      	adds	r3, #4
    7d44:	681b      	ldr	r3, [r3, #0]
    7d46:	4798      	blx	r3
        }
#endif

#if (GPT_WAKEUP_FUNCTIONALITY_API == STD_ON)
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
        if ((GPT_MODE_SLEEP == Gpt_eMode[coreID]) && (TRUE == Gpt_aChannelInfo[coreID][channel].bWakeupEnabled))
    7d48:	4a1c      	ldr	r2, [pc, #112]	; (7dbc <Gpt_ProcessCommonInterrupt+0x11c>)
    7d4a:	9b03      	ldr	r3, [sp, #12]
    7d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d50:	2b01      	cmp	r3, #1
    7d52:	d12a      	bne.n	7daa <Gpt_ProcessCommonInterrupt+0x10a>
    7d54:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7d58:	4817      	ldr	r0, [pc, #92]	; (7db8 <Gpt_ProcessCommonInterrupt+0x118>)
    7d5a:	9a03      	ldr	r2, [sp, #12]
    7d5c:	4613      	mov	r3, r2
    7d5e:	005b      	lsls	r3, r3, #1
    7d60:	4413      	add	r3, r2
    7d62:	440b      	add	r3, r1
    7d64:	00db      	lsls	r3, r3, #3
    7d66:	4403      	add	r3, r0
    7d68:	795b      	ldrb	r3, [r3, #5]
    7d6a:	2b00      	cmp	r3, #0
    7d6c:	d01d      	beq.n	7daa <Gpt_ProcessCommonInterrupt+0x10a>
        {
            Gpt_aChannelInfo[coreID][channel].bWakeupGenerated =TRUE;
    7d6e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7d72:	4811      	ldr	r0, [pc, #68]	; (7db8 <Gpt_ProcessCommonInterrupt+0x118>)
    7d74:	9a03      	ldr	r2, [sp, #12]
    7d76:	4613      	mov	r3, r2
    7d78:	005b      	lsls	r3, r3, #1
    7d7a:	4413      	add	r3, r2
    7d7c:	440b      	add	r3, r1
    7d7e:	00db      	lsls	r3, r3, #3
    7d80:	4403      	add	r3, r0
    7d82:	2201      	movs	r2, #1
    7d84:	719a      	strb	r2, [r3, #6]
            EcuM_CheckWakeup((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_uWakeupSource);
    7d86:	4a0b      	ldr	r2, [pc, #44]	; (7db4 <Gpt_ProcessCommonInterrupt+0x114>)
    7d88:	9b03      	ldr	r3, [sp, #12]
    7d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d8e:	6859      	ldr	r1, [r3, #4]
    7d90:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7d94:	4613      	mov	r3, r2
    7d96:	005b      	lsls	r3, r3, #1
    7d98:	4413      	add	r3, r2
    7d9a:	00db      	lsls	r3, r3, #3
    7d9c:	440b      	add	r3, r1
    7d9e:	3308      	adds	r3, #8
    7da0:	681b      	ldr	r3, [r3, #0]
    7da2:	4618      	mov	r0, r3
    7da4:	f000 f9ef 	bl	8186 <EcuM_CheckWakeup>
        }
#endif
#endif
    }
    return;
    7da8:	bf00      	nop
    7daa:	bf00      	nop
}
    7dac:	b005      	add	sp, #20
    7dae:	f85d fb04 	ldr.w	pc, [sp], #4
    7db2:	bf00      	nop
    7db4:	1fff8ffc 	.word	0x1fff8ffc
    7db8:	1fff9000 	.word	0x1fff9000
    7dbc:	1fff8ff8 	.word	0x1fff8ff8

00007dc0 <Gpt_GetPredefTimerValue>:
Std_ReturnType Gpt_GetPredefTimerValue
(
    Gpt_PredefTimerType PredefTimer,
    uint32 * TimeValuePtr
)
{
    7dc0:	b500      	push	{lr}
    7dc2:	b085      	sub	sp, #20
    7dc4:	9001      	str	r0, [sp, #4]
    7dc6:	9100      	str	r1, [sp, #0]
    Std_ReturnType returnValue;
    Gpt_ChannelType channel;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7dc8:	2300      	movs	r3, #0
    7dca:	9303      	str	r3, [sp, #12]
            returnValue = Gpt_ValidateParamTypePredefTimer(PredefTimer, coreID);
            if((Std_ReturnType)E_OK == returnValue)
            {
#endif

               returnValue = Gpt_ValidateMode(GPT_GET_PREDEF_TIMERVALUE_ID, coreID);
    7dcc:	9903      	ldr	r1, [sp, #12]
    7dce:	200d      	movs	r0, #13
    7dd0:	f7ff f8c4 	bl	6f5c <Gpt_ValidateMode>
    7dd4:	4603      	mov	r3, r0
    7dd6:	f88d 300b 	strb.w	r3, [sp, #11]
               if((Std_ReturnType)E_OK ==returnValue)
    7dda:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7dde:	2b00      	cmp	r3, #0
    7de0:	d112      	bne.n	7e08 <Gpt_GetPredefTimerValue+0x48>
               {

                        channel = (Gpt_ChannelType)PredefTimer;
    7de2:	9b01      	ldr	r3, [sp, #4]
    7de4:	f88d 300a 	strb.w	r3, [sp, #10]

                        Gpt_Ipw_GetPredefTimerValue((Gpt_pConfig[coreID]->Gpt_pChannelPredefConfigType)[channel], PredefTimer, TimeValuePtr);
    7de8:	4a0c      	ldr	r2, [pc, #48]	; (7e1c <Gpt_GetPredefTimerValue+0x5c>)
    7dea:	9b03      	ldr	r3, [sp, #12]
    7dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7df0:	691a      	ldr	r2, [r3, #16]
    7df2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7df6:	009b      	lsls	r3, r3, #2
    7df8:	4413      	add	r3, r2
    7dfa:	681b      	ldr	r3, [r3, #0]
    7dfc:	9a00      	ldr	r2, [sp, #0]
    7dfe:	9901      	ldr	r1, [sp, #4]
    7e00:	4618      	mov	r0, r3
    7e02:	f000 f943 	bl	808c <Gpt_Ipw_GetPredefTimerValue>
    7e06:	e002      	b.n	7e0e <Gpt_GetPredefTimerValue+0x4e>

               }
               else
               {
                   *TimeValuePtr = 0U;
    7e08:	9b00      	ldr	r3, [sp, #0]
    7e0a:	2200      	movs	r2, #0
    7e0c:	601a      	str	r2, [r3, #0]
        }
#endif
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
    return returnValue;
    7e0e:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    7e12:	4618      	mov	r0, r3
    7e14:	b005      	add	sp, #20
    7e16:	f85d fb04 	ldr.w	pc, [sp], #4
    7e1a:	bf00      	nop
    7e1c:	1fff8ffc 	.word	0x1fff8ffc

00007e20 <Ftm_Gpt_Ip_GetChInterruptStatusFlag>:
{
    7e20:	b082      	sub	sp, #8
    7e22:	4603      	mov	r3, r0
    7e24:	460a      	mov	r2, r1
    7e26:	f88d 3007 	strb.w	r3, [sp, #7]
    7e2a:	4613      	mov	r3, r2
    7e2c:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->CONTROLS[channel].CSC & FTM_CSC_CHF_MASK)) ? TRUE : FALSE;
    7e30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e34:	4a09      	ldr	r2, [pc, #36]	; (7e5c <Ftm_Gpt_Ip_GetChInterruptStatusFlag+0x3c>)
    7e36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7e3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e3e:	3301      	adds	r3, #1
    7e40:	00db      	lsls	r3, r3, #3
    7e42:	4413      	add	r3, r2
    7e44:	685b      	ldr	r3, [r3, #4]
    7e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7e4a:	2b00      	cmp	r3, #0
    7e4c:	bf14      	ite	ne
    7e4e:	2301      	movne	r3, #1
    7e50:	2300      	moveq	r3, #0
    7e52:	b2db      	uxtb	r3, r3
}
    7e54:	4618      	mov	r0, r3
    7e56:	b002      	add	sp, #8
    7e58:	4770      	bx	lr
    7e5a:	bf00      	nop
    7e5c:	0000c118 	.word	0x0000c118

00007e60 <Ftm_Gpt_Ip_GetCntValue>:
{
    7e60:	b082      	sub	sp, #8
    7e62:	4603      	mov	r3, r0
    7e64:	f88d 3007 	strb.w	r3, [sp, #7]
    return ftmGptBase[instance]->CNT;
    7e68:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e6c:	4a03      	ldr	r2, [pc, #12]	; (7e7c <Ftm_Gpt_Ip_GetCntValue+0x1c>)
    7e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e72:	685b      	ldr	r3, [r3, #4]
}
    7e74:	4618      	mov	r0, r3
    7e76:	b002      	add	sp, #8
    7e78:	4770      	bx	lr
    7e7a:	bf00      	nop
    7e7c:	0000c118 	.word	0x0000c118

00007e80 <Ftm_Gpt_Ip_GetCompareValue>:
{
    7e80:	b082      	sub	sp, #8
    7e82:	4603      	mov	r3, r0
    7e84:	460a      	mov	r2, r1
    7e86:	f88d 3007 	strb.w	r3, [sp, #7]
    7e8a:	4613      	mov	r3, r2
    7e8c:	f88d 3006 	strb.w	r3, [sp, #6]
    return ftmGptBase[instance]->CONTROLS[channel].CV;
    7e90:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e94:	4a05      	ldr	r2, [pc, #20]	; (7eac <Ftm_Gpt_Ip_GetCompareValue+0x2c>)
    7e96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7e9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e9e:	3301      	adds	r3, #1
    7ea0:	00db      	lsls	r3, r3, #3
    7ea2:	4413      	add	r3, r2
    7ea4:	689b      	ldr	r3, [r3, #8]
}
    7ea6:	4618      	mov	r0, r3
    7ea8:	b002      	add	sp, #8
    7eaa:	4770      	bx	lr
    7eac:	0000c118 	.word	0x0000c118

00007eb0 <Gpt_Ipw_InitInstances>:
*
* @return       void
* @pre          The driver needs to be initialized.
*/
void Gpt_Ipw_InitInstances(const Gpt_ConfigType * configPtr)
{
    7eb0:	b500      	push	{lr}
    7eb2:	b085      	sub	sp, #20
    7eb4:	9001      	str	r0, [sp, #4]

    uint8 index = 0U;
    7eb6:	2300      	movs	r3, #0
    7eb8:	f88d 300f 	strb.w	r3, [sp, #15]

    for(index = 0; index < configPtr->instanceCount; index++)
    7ebc:	2300      	movs	r3, #0
    7ebe:	f88d 300f 	strb.w	r3, [sp, #15]
    7ec2:	e022      	b.n	7f0a <Gpt_Ipw_InitInstances+0x5a>
    {
        switch((*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].instanceType)
    7ec4:	9b01      	ldr	r3, [sp, #4]
    7ec6:	68da      	ldr	r2, [r3, #12]
    7ec8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ecc:	011b      	lsls	r3, r3, #4
    7ece:	4413      	add	r3, r2
    7ed0:	681b      	ldr	r3, [r3, #0]
    7ed2:	2b00      	cmp	r3, #0
    7ed4:	d113      	bne.n	7efe <Gpt_Ipw_InitInstances+0x4e>
        {
#if (FTM_GPT_IP_USED == STD_ON)
            case(GPT_FTM_MODULE):
            {
                Ftm_Gpt_Ip_Init((*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].instance,
    7ed6:	9b01      	ldr	r3, [sp, #4]
    7ed8:	68da      	ldr	r2, [r3, #12]
    7eda:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ede:	011b      	lsls	r3, r3, #4
    7ee0:	4413      	add	r3, r2
    7ee2:	3304      	adds	r3, #4
    7ee4:	7818      	ldrb	r0, [r3, #0]
                                (*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].Gpt_Ipw_InstanceConfig.Ftm_Gpt_Ip_InstanceConfig);
    7ee6:	9b01      	ldr	r3, [sp, #4]
    7ee8:	68da      	ldr	r2, [r3, #12]
                Ftm_Gpt_Ip_Init((*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].instance,
    7eea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7eee:	011b      	lsls	r3, r3, #4
    7ef0:	4413      	add	r3, r2
    7ef2:	3308      	adds	r3, #8
    7ef4:	681b      	ldr	r3, [r3, #0]
    7ef6:	4619      	mov	r1, r3
    7ef8:	f7fe fca4 	bl	6844 <Ftm_Gpt_Ip_Init>
            }
            break;
    7efc:	e000      	b.n	7f00 <Gpt_Ipw_InitInstances+0x50>
            break;
#endif

            default:
                /*This switch branch is empty because it shall not be executed for normal behaviour*/
            break;
    7efe:	bf00      	nop
    for(index = 0; index < configPtr->instanceCount; index++)
    7f00:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7f04:	3301      	adds	r3, #1
    7f06:	f88d 300f 	strb.w	r3, [sp, #15]
    7f0a:	9b01      	ldr	r3, [sp, #4]
    7f0c:	7a1b      	ldrb	r3, [r3, #8]
    7f0e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7f12:	429a      	cmp	r2, r3
    7f14:	d3d6      	bcc.n	7ec4 <Gpt_Ipw_InitInstances+0x14>
        }
    }
    return;
    7f16:	bf00      	nop
}
    7f18:	b005      	add	sp, #20
    7f1a:	f85d fb04 	ldr.w	pc, [sp], #4

00007f1e <Gpt_Ipw_Init>:
* @param[in]    pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return       void
* @pre          The driver needs to be initialized.
*/
void Gpt_Ipw_Init(const Gpt_Ipw_HwChannelConfigType *pHwChannelConfig)
{
    7f1e:	b500      	push	{lr}
    7f20:	b083      	sub	sp, #12
    7f22:	9001      	str	r0, [sp, #4]

    switch(pHwChannelConfig->instanceType)
    7f24:	9b01      	ldr	r3, [sp, #4]
    7f26:	681b      	ldr	r3, [r3, #0]
    7f28:	2b00      	cmp	r3, #0
    7f2a:	d108      	bne.n	7f3e <Gpt_Ipw_Init+0x20>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {
            Ftm_Gpt_Ip_InitChannel(pHwChannelConfig->instance,
    7f2c:	9b01      	ldr	r3, [sp, #4]
    7f2e:	791a      	ldrb	r2, [r3, #4]
    7f30:	9b01      	ldr	r3, [sp, #4]
    7f32:	689b      	ldr	r3, [r3, #8]
    7f34:	4619      	mov	r1, r3
    7f36:	4610      	mov	r0, r2
    7f38:	f7fe fcc6 	bl	68c8 <Ftm_Gpt_Ip_InitChannel>
                                   pHwChannelConfig->Gpt_Ipw_ChannelConfig.Ftm_Gpt_Ip_ChannelConfig);
        }
        break;
    7f3c:	e000      	b.n	7f40 <Gpt_Ipw_Init+0x22>
        }
            break;
#endif
        default:
            /* This switch branch is empty because it shall not be executed for normal behaviour */
        break;
    7f3e:	bf00      	nop
    }
    return;
    7f40:	bf00      	nop
}
    7f42:	b003      	add	sp, #12
    7f44:	f85d fb04 	ldr.w	pc, [sp], #4

00007f48 <Gpt_Ipw_StartTimer>:
* @param[in]     uValue              Timeout period (in ticks) after which a notification shall occur (if enabled).
* @return        void
* @pre           The driver needs to be initialized.Call Gpt_StartTimer before.
*/
Std_ReturnType Gpt_Ipw_StartTimer(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig, Gpt_ValueType uValue)
{
    7f48:	b500      	push	{lr}
    7f4a:	b085      	sub	sp, #20
    7f4c:	9001      	str	r0, [sp, #4]
    7f4e:	9100      	str	r1, [sp, #0]

    Std_ReturnType returnValue = (Std_ReturnType)E_NOT_OK;
    7f50:	2301      	movs	r3, #1
    7f52:	f88d 300f 	strb.w	r3, [sp, #15]

    switch(pHwChannelConfig->instanceType)
    7f56:	9b01      	ldr	r3, [sp, #4]
    7f58:	681b      	ldr	r3, [r3, #0]
    7f5a:	2b00      	cmp	r3, #0
    7f5c:	d10c      	bne.n	7f78 <Gpt_Ipw_StartTimer+0x30>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
            {
                Ftm_Gpt_Ip_StartCounting(pHwChannelConfig->instance,
    7f5e:	9b01      	ldr	r3, [sp, #4]
    7f60:	7918      	ldrb	r0, [r3, #4]
    7f62:	9b01      	ldr	r3, [sp, #4]
    7f64:	795b      	ldrb	r3, [r3, #5]
    7f66:	9a00      	ldr	r2, [sp, #0]
    7f68:	b292      	uxth	r2, r2
    7f6a:	4619      	mov	r1, r3
    7f6c:	f7fe fd5c 	bl	6a28 <Ftm_Gpt_Ip_StartCounting>
                                         pHwChannelConfig->channel,
                                         (uint16)uValue);
                returnValue = (Std_ReturnType)E_OK;
    7f70:	2300      	movs	r3, #0
    7f72:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        break;
    7f76:	e000      	b.n	7f7a <Gpt_Ipw_StartTimer+0x32>
            }
            break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour */
        break;
    7f78:	bf00      	nop
    }

    return returnValue;
    7f7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7f7e:	4618      	mov	r0, r3
    7f80:	b005      	add	sp, #20
    7f82:	f85d fb04 	ldr.w	pc, [sp], #4

00007f86 <Gpt_Ipw_GetTimeElapsed>:
* @pre           The driver needs to be initialized.Call GetTimeElapsed before.
*
*/
Gpt_ValueType Gpt_Ipw_GetTimeElapsed(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig,
                                                      Gpt_HwChannelInfoType * pReturnHwChannelInfo)
{
    7f86:	b500      	push	{lr}
    7f88:	b085      	sub	sp, #20
    7f8a:	9001      	str	r0, [sp, #4]
    7f8c:	9100      	str	r1, [sp, #0]
    uint32 returnValue;

    switch(pHwChannelConfig->instanceType)
    7f8e:	9b01      	ldr	r3, [sp, #4]
    7f90:	681b      	ldr	r3, [r3, #0]
    7f92:	2b00      	cmp	r3, #0
    7f94:	d105      	bne.n	7fa2 <Gpt_Ipw_GetTimeElapsed+0x1c>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {
            returnValue = Gpt_Ipw_FtmGetTimeElapsed(pHwChannelConfig, pReturnHwChannelInfo);
    7f96:	9900      	ldr	r1, [sp, #0]
    7f98:	9801      	ldr	r0, [sp, #4]
    7f9a:	f7f8 fcd3 	bl	944 <Gpt_Ipw_FtmGetTimeElapsed>
    7f9e:	9003      	str	r0, [sp, #12]
        }
        break;
    7fa0:	e002      	b.n	7fa8 <Gpt_Ipw_GetTimeElapsed+0x22>
        break;
#endif

        default:
             /* This switch branch is empty because it shall not be executed for normal behaviour */
             returnValue = 0U;
    7fa2:	2300      	movs	r3, #0
    7fa4:	9303      	str	r3, [sp, #12]
        break;
    7fa6:	bf00      	nop
    }
    return (Gpt_ValueType)returnValue;
    7fa8:	9b03      	ldr	r3, [sp, #12]
}
    7faa:	4618      	mov	r0, r3
    7fac:	b005      	add	sp, #20
    7fae:	f85d fb04 	ldr.w	pc, [sp], #4

00007fb2 <Gpt_Ipw_StopTimer>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized.Call StopTimer before.
*/
void Gpt_Ipw_StopTimer(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    7fb2:	b500      	push	{lr}
    7fb4:	b083      	sub	sp, #12
    7fb6:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    7fb8:	9b01      	ldr	r3, [sp, #4]
    7fba:	681b      	ldr	r3, [r3, #0]
    7fbc:	2b00      	cmp	r3, #0
    7fbe:	d108      	bne.n	7fd2 <Gpt_Ipw_StopTimer+0x20>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {

            Ftm_Gpt_Ip_DisableChannelInterrupt(pHwChannelConfig->instance,
    7fc0:	9b01      	ldr	r3, [sp, #4]
    7fc2:	791a      	ldrb	r2, [r3, #4]
    7fc4:	9b01      	ldr	r3, [sp, #4]
    7fc6:	795b      	ldrb	r3, [r3, #5]
    7fc8:	4619      	mov	r1, r3
    7fca:	4610      	mov	r0, r2
    7fcc:	f7fe fdd6 	bl	6b7c <Ftm_Gpt_Ip_DisableChannelInterrupt>
                                               pHwChannelConfig->channel);
        }
        break;
    7fd0:	e000      	b.n	7fd4 <Gpt_Ipw_StopTimer+0x22>
        }
            break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    7fd2:	bf00      	nop
    }

    return;
    7fd4:	bf00      	nop
}
    7fd6:	b003      	add	sp, #12
    7fd8:	f85d fb04 	ldr.w	pc, [sp], #4

00007fdc <Gpt_Ipw_EnableInterrupt>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized.
*/
void Gpt_Ipw_EnableInterrupt(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    7fdc:	b082      	sub	sp, #8
    7fde:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    7fe0:	9b01      	ldr	r3, [sp, #4]
    7fe2:	681b      	ldr	r3, [r3, #0]
    7fe4:	2b00      	cmp	r3, #0
        }
        break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    7fe6:	bf00      	nop
    }

    return;
    7fe8:	bf00      	nop
}
    7fea:	b002      	add	sp, #8
    7fec:	4770      	bx	lr

00007fee <Gpt_Ipw_DeInit>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized. On/Off by the configuration parameter: GPT_DEINIT_API
*/
void Gpt_Ipw_DeInit(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    7fee:	b500      	push	{lr}
    7ff0:	b083      	sub	sp, #12
    7ff2:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    7ff4:	9b01      	ldr	r3, [sp, #4]
    7ff6:	681b      	ldr	r3, [r3, #0]
    7ff8:	2b00      	cmp	r3, #0
    7ffa:	d105      	bne.n	8008 <Gpt_Ipw_DeInit+0x1a>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {
           Ftm_Gpt_Ip_Deinit(pHwChannelConfig->instance);
    7ffc:	9b01      	ldr	r3, [sp, #4]
    7ffe:	791b      	ldrb	r3, [r3, #4]
    8000:	4618      	mov	r0, r3
    8002:	f7fe fcc5 	bl	6990 <Ftm_Gpt_Ip_Deinit>
        }
        break;
    8006:	e000      	b.n	800a <Gpt_Ipw_DeInit+0x1c>
        }
        break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    8008:	bf00      	nop
    }
    return;
    800a:	bf00      	nop
}
    800c:	b003      	add	sp, #12
    800e:	f85d fb04 	ldr.w	pc, [sp], #4

00008012 <Gpt_Ipw_DisableInterrupt>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized.On/Off by the configuration parameter: GPT_ENABLE_DISABLE_NOTIFICATION_API
*/
void Gpt_Ipw_DisableInterrupt(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    8012:	b082      	sub	sp, #8
    8014:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    8016:	9b01      	ldr	r3, [sp, #4]
    8018:	681b      	ldr	r3, [r3, #0]
    801a:	2b00      	cmp	r3, #0
        }
        break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    801c:	bf00      	nop
    }

    return;
    801e:	bf00      	nop
}
    8020:	b002      	add	sp, #8
    8022:	4770      	bx	lr

00008024 <Gpt_Ipw_StartPredefTimer>:

void Gpt_Ipw_StartPredefTimer
(
    const Gpt_ConfigType * configPtr
)
{
    8024:	b510      	push	{r4, lr}
    8026:	b086      	sub	sp, #24
    8028:	9003      	str	r0, [sp, #12]
    Gpt_ChannelType channel;
    const Gpt_HwPredefChannelConfigType * pHwChannelConfig;

    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    802a:	2300      	movs	r3, #0
    802c:	f88d 3017 	strb.w	r3, [sp, #23]
    8030:	e025      	b.n	807e <Gpt_Ipw_StartPredefTimer+0x5a>
    {
        pHwChannelConfig = (configPtr->Gpt_pChannelPredefConfigType)[channel];
    8032:	9b03      	ldr	r3, [sp, #12]
    8034:	691a      	ldr	r2, [r3, #16]
    8036:	f89d 3017 	ldrb.w	r3, [sp, #23]
    803a:	009b      	lsls	r3, r3, #2
    803c:	4413      	add	r3, r2
    803e:	681b      	ldr	r3, [r3, #0]
    8040:	9304      	str	r3, [sp, #16]

        if(NULL_PTR != pHwChannelConfig)
    8042:	9b04      	ldr	r3, [sp, #16]
    8044:	2b00      	cmp	r3, #0
    8046:	d012      	beq.n	806e <Gpt_Ipw_StartPredefTimer+0x4a>
        {
            switch(pHwChannelConfig->instanceType)
    8048:	9b04      	ldr	r3, [sp, #16]
    804a:	681b      	ldr	r3, [r3, #0]
    804c:	2b00      	cmp	r3, #0
    804e:	d110      	bne.n	8072 <Gpt_Ipw_StartPredefTimer+0x4e>
            {
#if (FTM_GPT_IP_USED == STD_ON)
            case GPT_FTM_MODULE:
            {
                Ftm_Gpt_Ip_StartPredefTimer(pHwChannelConfig->instance, \
    8050:	9b04      	ldr	r3, [sp, #16]
    8052:	7918      	ldrb	r0, [r3, #4]
    8054:	9b04      	ldr	r3, [sp, #16]
    8056:	7959      	ldrb	r1, [r3, #5]
    8058:	9b04      	ldr	r3, [sp, #16]
    805a:	7a1a      	ldrb	r2, [r3, #8]
    805c:	9b04      	ldr	r3, [sp, #16]
    805e:	799c      	ldrb	r4, [r3, #6]
    8060:	9b04      	ldr	r3, [sp, #16]
    8062:	79db      	ldrb	r3, [r3, #7]
    8064:	9300      	str	r3, [sp, #0]
    8066:	4623      	mov	r3, r4
    8068:	f7fe fdc0 	bl	6bec <Ftm_Gpt_Ip_StartPredefTimer>
                                            pHwChannelConfig->channel, \
                                            pHwChannelConfig->Gpt_uPrescaler, \
                                            pHwChannelConfig->Gpt_uClockSource, \
                                            pHwChannelConfig->Gpt_bFreezeEnable);
            }
            break;
    806c:	e002      	b.n	8074 <Gpt_Ipw_StartPredefTimer+0x50>
#endif
            default:
                /*This switch branch is empty because it shall not be executed for normal behaviour*/
            break;
            }
        }
    806e:	bf00      	nop
    8070:	e000      	b.n	8074 <Gpt_Ipw_StartPredefTimer+0x50>
            break;
    8072:	bf00      	nop
    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    8074:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8078:	3301      	adds	r3, #1
    807a:	f88d 3017 	strb.w	r3, [sp, #23]
    807e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8082:	2b03      	cmp	r3, #3
    8084:	d9d5      	bls.n	8032 <Gpt_Ipw_StartPredefTimer+0xe>
    }

    return;
    8086:	bf00      	nop
}
    8088:	b006      	add	sp, #24
    808a:	bd10      	pop	{r4, pc}

0000808c <Gpt_Ipw_GetPredefTimerValue>:
(
    const Gpt_HwPredefChannelConfigType * pHwChannelConfig,
    Gpt_PredefTimerType PredefTimer,
    uint32 * TimeValuePtr
)
{
    808c:	b500      	push	{lr}
    808e:	b087      	sub	sp, #28
    8090:	9003      	str	r0, [sp, #12]
    8092:	9102      	str	r1, [sp, #8]
    8094:	9201      	str	r2, [sp, #4]
    uint32 u32ReturnValue = 0U;
    8096:	2300      	movs	r3, #0
    8098:	9305      	str	r3, [sp, #20]
    switch(pHwChannelConfig->instanceType)
    809a:	9b03      	ldr	r3, [sp, #12]
    809c:	681b      	ldr	r3, [r3, #0]
    809e:	2b00      	cmp	r3, #0
    80a0:	d106      	bne.n	80b0 <Gpt_Ipw_GetPredefTimerValue+0x24>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case GPT_FTM_MODULE:
        {
            u32ReturnValue = Ftm_Gpt_Ip_GetCntValue(pHwChannelConfig->instance);
    80a2:	9b03      	ldr	r3, [sp, #12]
    80a4:	791b      	ldrb	r3, [r3, #4]
    80a6:	4618      	mov	r0, r3
    80a8:	f7ff feda 	bl	7e60 <Ftm_Gpt_Ip_GetCntValue>
    80ac:	9005      	str	r0, [sp, #20]
        }
        break;
    80ae:	e000      	b.n	80b2 <Gpt_Ipw_GetPredefTimerValue+0x26>
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    80b0:	bf00      	nop
    }
    if(0U != u32ReturnValue)
    80b2:	9b05      	ldr	r3, [sp, #20]
    80b4:	2b00      	cmp	r3, #0
    80b6:	d020      	beq.n	80fa <Gpt_Ipw_GetPredefTimerValue+0x6e>
    80b8:	9b02      	ldr	r3, [sp, #8]
    80ba:	2b03      	cmp	r3, #3
    80bc:	d81f      	bhi.n	80fe <Gpt_Ipw_GetPredefTimerValue+0x72>
    80be:	a201      	add	r2, pc, #4	; (adr r2, 80c4 <Gpt_Ipw_GetPredefTimerValue+0x38>)
    80c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    80c4:	000080d5 	.word	0x000080d5
    80c8:	000080df 	.word	0x000080df
    80cc:	000080eb 	.word	0x000080eb
    80d0:	000080f3 	.word	0x000080f3
    {
        switch(PredefTimer)
        {
            case GPT_PREDEF_TIMER_1US_16BIT:
                *TimeValuePtr = (0x0000FFFFU & u32ReturnValue);
    80d4:	9b05      	ldr	r3, [sp, #20]
    80d6:	b29a      	uxth	r2, r3
    80d8:	9b01      	ldr	r3, [sp, #4]
    80da:	601a      	str	r2, [r3, #0]
            break;
    80dc:	e010      	b.n	8100 <Gpt_Ipw_GetPredefTimerValue+0x74>
            case GPT_PREDEF_TIMER_1US_24BIT:
                *TimeValuePtr = (0x00FFFFFFU & u32ReturnValue);
    80de:	9b05      	ldr	r3, [sp, #20]
    80e0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    80e4:	9b01      	ldr	r3, [sp, #4]
    80e6:	601a      	str	r2, [r3, #0]
            break;
    80e8:	e00a      	b.n	8100 <Gpt_Ipw_GetPredefTimerValue+0x74>
            case GPT_PREDEF_TIMER_1US_32BIT:
                *TimeValuePtr = u32ReturnValue;
    80ea:	9b01      	ldr	r3, [sp, #4]
    80ec:	9a05      	ldr	r2, [sp, #20]
    80ee:	601a      	str	r2, [r3, #0]
            break;
    80f0:	e006      	b.n	8100 <Gpt_Ipw_GetPredefTimerValue+0x74>
            case GPT_PREDEF_TIMER_100US_32BIT:
                *TimeValuePtr = u32ReturnValue;
    80f2:	9b01      	ldr	r3, [sp, #4]
    80f4:	9a05      	ldr	r2, [sp, #20]
    80f6:	601a      	str	r2, [r3, #0]
            break;
    80f8:	e002      	b.n	8100 <Gpt_Ipw_GetPredefTimerValue+0x74>
            default:
                /* 32bit timer */
            break;
        }
    }
    80fa:	bf00      	nop
    80fc:	e000      	b.n	8100 <Gpt_Ipw_GetPredefTimerValue+0x74>
            break;
    80fe:	bf00      	nop
    return;
    8100:	bf00      	nop
}
    8102:	b007      	add	sp, #28
    8104:	f85d fb04 	ldr.w	pc, [sp], #4

00008108 <Gpt_Ipw_StopPredefTimer>:
*/
void Gpt_Ipw_StopPredefTimer
(
    const Gpt_ConfigType * configPtr
)
{
    8108:	b500      	push	{lr}
    810a:	b085      	sub	sp, #20
    810c:	9001      	str	r0, [sp, #4]
    Gpt_ChannelType channel;
    const Gpt_HwPredefChannelConfigType * pHwChannelConfig;

    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    810e:	2300      	movs	r3, #0
    8110:	f88d 300f 	strb.w	r3, [sp, #15]
    8114:	e01f      	b.n	8156 <Gpt_Ipw_StopPredefTimer+0x4e>
    {

        pHwChannelConfig = (configPtr->Gpt_pChannelPredefConfigType)[channel];
    8116:	9b01      	ldr	r3, [sp, #4]
    8118:	691a      	ldr	r2, [r3, #16]
    811a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    811e:	009b      	lsls	r3, r3, #2
    8120:	4413      	add	r3, r2
    8122:	681b      	ldr	r3, [r3, #0]
    8124:	9302      	str	r3, [sp, #8]
        if(NULL_PTR != pHwChannelConfig)
    8126:	9b02      	ldr	r3, [sp, #8]
    8128:	2b00      	cmp	r3, #0
    812a:	d00c      	beq.n	8146 <Gpt_Ipw_StopPredefTimer+0x3e>
        {
            switch(pHwChannelConfig->instanceType)
    812c:	9b02      	ldr	r3, [sp, #8]
    812e:	681b      	ldr	r3, [r3, #0]
    8130:	2b00      	cmp	r3, #0
    8132:	d10a      	bne.n	814a <Gpt_Ipw_StopPredefTimer+0x42>
            {
#if (FTM_GPT_IP_USED == STD_ON)
            case GPT_FTM_MODULE:
            {
                Ftm_Gpt_Ip_StopPredefTimer(pHwChannelConfig->instance, \
    8134:	9b02      	ldr	r3, [sp, #8]
    8136:	791a      	ldrb	r2, [r3, #4]
    8138:	9b02      	ldr	r3, [sp, #8]
    813a:	795b      	ldrb	r3, [r3, #5]
    813c:	4619      	mov	r1, r3
    813e:	4610      	mov	r0, r2
    8140:	f7fe fde6 	bl	6d10 <Ftm_Gpt_Ip_StopPredefTimer>
                                           pHwChannelConfig->channel);
            }
            break;
    8144:	e002      	b.n	814c <Gpt_Ipw_StopPredefTimer+0x44>
#endif
            default:
                /*This switch branch is empty because it shall not be executed for normal behaviour*/
            break;
            }
        }
    8146:	bf00      	nop
    8148:	e000      	b.n	814c <Gpt_Ipw_StopPredefTimer+0x44>
            break;
    814a:	bf00      	nop
    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    814c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8150:	3301      	adds	r3, #1
    8152:	f88d 300f 	strb.w	r3, [sp, #15]
    8156:	f89d 300f 	ldrb.w	r3, [sp, #15]
    815a:	2b03      	cmp	r3, #3
    815c:	d9db      	bls.n	8116 <Gpt_Ipw_StopPredefTimer+0xe>
    }
    return;
    815e:	bf00      	nop
}
    8160:	b005      	add	sp, #20
    8162:	f85d fb04 	ldr.w	pc, [sp], #4
    8166:	bf00      	nop

00008168 <EcuM_SetWakeupEvent>:
* 
* @param[in]     events  last wakeup event
* 
*/
void EcuM_SetWakeupEvent(EcuM_WakeupSourceType events)
{
    8168:	b082      	sub	sp, #8
    816a:	9001      	str	r0, [sp, #4]
    EcuMLastWakeupEvent = events;
    816c:	4a02      	ldr	r2, [pc, #8]	; (8178 <EcuM_SetWakeupEvent+0x10>)
    816e:	9b01      	ldr	r3, [sp, #4]
    8170:	6013      	str	r3, [r2, #0]
}
    8172:	bf00      	nop
    8174:	b002      	add	sp, #8
    8176:	4770      	bx	lr
    8178:	1fff9024 	.word	0x1fff9024

0000817c <EcuM_ValidateWakeupEvent>:
* @details This is a function stub only. Functionality is void in this implementation
* 
* @param[in]     events wakeup event to validate
*/
void EcuM_ValidateWakeupEvent(EcuM_WakeupSourceType events)
{
    817c:	b082      	sub	sp, #8
    817e:	9001      	str	r0, [sp, #4]
    (void)events;
}
    8180:	bf00      	nop
    8182:	b002      	add	sp, #8
    8184:	4770      	bx	lr

00008186 <EcuM_CheckWakeup>:
* 
* @param[in]     wakeupSource  wakeup source ID
* 
*/
void EcuM_CheckWakeup(EcuM_WakeupSourceType wakeupSource)
{
    8186:	b082      	sub	sp, #8
    8188:	9001      	str	r0, [sp, #4]
#endif
#ifdef TEST_ICU
    Icu_CheckWakeup(wakeupSource);
#endif
    (void)wakeupSource;
}
    818a:	bf00      	nop
    818c:	b002      	add	sp, #8
    818e:	4770      	bx	lr

00008190 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    8190:	b500      	push	{lr}
    8192:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8194:	f7f8 fd22 	bl	bdc <Sys_GetCoreID>
    8198:	4603      	mov	r3, r0
    819a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    819c:	4a10      	ldr	r2, [pc, #64]	; (81e0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    819e:	9b01      	ldr	r3, [sp, #4]
    81a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81a4:	2b00      	cmp	r3, #0
    81a6:	d10d      	bne.n	81c4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    81a8:	f7f8 fc2e 	bl	a08 <Dio_schm_read_msr>
    81ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    81ae:	9b00      	ldr	r3, [sp, #0]
    81b0:	f003 0301 	and.w	r3, r3, #1
    81b4:	2b00      	cmp	r3, #0
    81b6:	d100      	bne.n	81ba <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    81b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    81ba:	490a      	ldr	r1, [pc, #40]	; (81e4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    81bc:	9b01      	ldr	r3, [sp, #4]
    81be:	9a00      	ldr	r2, [sp, #0]
    81c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    81c4:	4a06      	ldr	r2, [pc, #24]	; (81e0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    81c6:	9b01      	ldr	r3, [sp, #4]
    81c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81cc:	1c5a      	adds	r2, r3, #1
    81ce:	4904      	ldr	r1, [pc, #16]	; (81e0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    81d0:	9b01      	ldr	r3, [sp, #4]
    81d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    81d6:	bf00      	nop
    81d8:	b003      	add	sp, #12
    81da:	f85d fb04 	ldr.w	pc, [sp], #4
    81de:	bf00      	nop
    81e0:	1fff902c 	.word	0x1fff902c
    81e4:	1fff9028 	.word	0x1fff9028

000081e8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    81e8:	b500      	push	{lr}
    81ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    81ec:	f7f8 fcf6 	bl	bdc <Sys_GetCoreID>
    81f0:	4603      	mov	r3, r0
    81f2:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    81f4:	4a0d      	ldr	r2, [pc, #52]	; (822c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    81f6:	9b01      	ldr	r3, [sp, #4]
    81f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81fc:	1e5a      	subs	r2, r3, #1
    81fe:	490b      	ldr	r1, [pc, #44]	; (822c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    8200:	9b01      	ldr	r3, [sp, #4]
    8202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    8206:	4a0a      	ldr	r2, [pc, #40]	; (8230 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    8208:	9b01      	ldr	r3, [sp, #4]
    820a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    820e:	f003 0301 	and.w	r3, r3, #1
    8212:	2b00      	cmp	r3, #0
    8214:	d106      	bne.n	8224 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    8216:	4a05      	ldr	r2, [pc, #20]	; (822c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    8218:	9b01      	ldr	r3, [sp, #4]
    821a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    821e:	2b00      	cmp	r3, #0
    8220:	d100      	bne.n	8224 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8222:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8224:	bf00      	nop
    8226:	b003      	add	sp, #12
    8228:	f85d fb04 	ldr.w	pc, [sp], #4
    822c:	1fff902c 	.word	0x1fff902c
    8230:	1fff9028 	.word	0x1fff9028

00008234 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    8234:	b500      	push	{lr}
    8236:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8238:	f7f8 fcd0 	bl	bdc <Sys_GetCoreID>
    823c:	4603      	mov	r3, r0
    823e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    8240:	4a10      	ldr	r2, [pc, #64]	; (8284 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    8242:	9b01      	ldr	r3, [sp, #4]
    8244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8248:	2b00      	cmp	r3, #0
    824a:	d10d      	bne.n	8268 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    824c:	f7f8 fbdc 	bl	a08 <Dio_schm_read_msr>
    8250:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8252:	9b00      	ldr	r3, [sp, #0]
    8254:	f003 0301 	and.w	r3, r3, #1
    8258:	2b00      	cmp	r3, #0
    825a:	d100      	bne.n	825e <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    825c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    825e:	490a      	ldr	r1, [pc, #40]	; (8288 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    8260:	9b01      	ldr	r3, [sp, #4]
    8262:	9a00      	ldr	r2, [sp, #0]
    8264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    8268:	4a06      	ldr	r2, [pc, #24]	; (8284 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    826a:	9b01      	ldr	r3, [sp, #4]
    826c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8270:	1c5a      	adds	r2, r3, #1
    8272:	4904      	ldr	r1, [pc, #16]	; (8284 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    8274:	9b01      	ldr	r3, [sp, #4]
    8276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    827a:	bf00      	nop
    827c:	b003      	add	sp, #12
    827e:	f85d fb04 	ldr.w	pc, [sp], #4
    8282:	bf00      	nop
    8284:	1fff9034 	.word	0x1fff9034
    8288:	1fff9030 	.word	0x1fff9030

0000828c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    828c:	b500      	push	{lr}
    828e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8290:	f7f8 fca4 	bl	bdc <Sys_GetCoreID>
    8294:	4603      	mov	r3, r0
    8296:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    8298:	4a0d      	ldr	r2, [pc, #52]	; (82d0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    829a:	9b01      	ldr	r3, [sp, #4]
    829c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82a0:	1e5a      	subs	r2, r3, #1
    82a2:	490b      	ldr	r1, [pc, #44]	; (82d0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    82a4:	9b01      	ldr	r3, [sp, #4]
    82a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    82aa:	4a0a      	ldr	r2, [pc, #40]	; (82d4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    82ac:	9b01      	ldr	r3, [sp, #4]
    82ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82b2:	f003 0301 	and.w	r3, r3, #1
    82b6:	2b00      	cmp	r3, #0
    82b8:	d106      	bne.n	82c8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    82ba:	4a05      	ldr	r2, [pc, #20]	; (82d0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    82bc:	9b01      	ldr	r3, [sp, #4]
    82be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82c2:	2b00      	cmp	r3, #0
    82c4:	d100      	bne.n	82c8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    82c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    82c8:	bf00      	nop
    82ca:	b003      	add	sp, #12
    82cc:	f85d fb04 	ldr.w	pc, [sp], #4
    82d0:	1fff9034 	.word	0x1fff9034
    82d4:	1fff9030 	.word	0x1fff9030

000082d8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00(void)
{
    82d8:	b500      	push	{lr}
    82da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    82dc:	f7f8 fc7e 	bl	bdc <Sys_GetCoreID>
    82e0:	4603      	mov	r3, r0
    82e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId])
    82e4:	4a10      	ldr	r2, [pc, #64]	; (8328 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x50>)
    82e6:	9b01      	ldr	r3, [sp, #4]
    82e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82ec:	2b00      	cmp	r3, #0
    82ee:	d10d      	bne.n	830c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    82f0:	f7f8 fb93 	bl	a1a <Gpt_schm_read_msr>
    82f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    82f6:	9b00      	ldr	r3, [sp, #0]
    82f8:	f003 0301 	and.w	r3, r3, #1
    82fc:	2b00      	cmp	r3, #0
    82fe:	d100      	bne.n	8302 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8300:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    8302:	490a      	ldr	r1, [pc, #40]	; (832c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x54>)
    8304:	9b01      	ldr	r3, [sp, #4]
    8306:	9a00      	ldr	r2, [sp, #0]
    8308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId]++;
    830c:	4a06      	ldr	r2, [pc, #24]	; (8328 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x50>)
    830e:	9b01      	ldr	r3, [sp, #4]
    8310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8314:	1c5a      	adds	r2, r3, #1
    8316:	4904      	ldr	r1, [pc, #16]	; (8328 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x50>)
    8318:	9b01      	ldr	r3, [sp, #4]
    831a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    831e:	bf00      	nop
    8320:	b003      	add	sp, #12
    8322:	f85d fb04 	ldr.w	pc, [sp], #4
    8326:	bf00      	nop
    8328:	1fff903c 	.word	0x1fff903c
    832c:	1fff9038 	.word	0x1fff9038

00008330 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00(void)
{
    8330:	b500      	push	{lr}
    8332:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8334:	f7f8 fc52 	bl	bdc <Sys_GetCoreID>
    8338:	4603      	mov	r3, r0
    833a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId]--;
    833c:	4a0d      	ldr	r2, [pc, #52]	; (8374 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x44>)
    833e:	9b01      	ldr	r3, [sp, #4]
    8340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8344:	1e5a      	subs	r2, r3, #1
    8346:	490b      	ldr	r1, [pc, #44]	; (8374 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x44>)
    8348:	9b01      	ldr	r3, [sp, #4]
    834a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    834e:	4a0a      	ldr	r2, [pc, #40]	; (8378 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x48>)
    8350:	9b01      	ldr	r3, [sp, #4]
    8352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8356:	f003 0301 	and.w	r3, r3, #1
    835a:	2b00      	cmp	r3, #0
    835c:	d106      	bne.n	836c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x3c>
    835e:	4a05      	ldr	r2, [pc, #20]	; (8374 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x44>)
    8360:	9b01      	ldr	r3, [sp, #4]
    8362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8366:	2b00      	cmp	r3, #0
    8368:	d100      	bne.n	836c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    836a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    836c:	bf00      	nop
    836e:	b003      	add	sp, #12
    8370:	f85d fb04 	ldr.w	pc, [sp], #4
    8374:	1fff903c 	.word	0x1fff903c
    8378:	1fff9038 	.word	0x1fff9038

0000837c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01(void)
{
    837c:	b500      	push	{lr}
    837e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8380:	f7f8 fc2c 	bl	bdc <Sys_GetCoreID>
    8384:	4603      	mov	r3, r0
    8386:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId])
    8388:	4a10      	ldr	r2, [pc, #64]	; (83cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x50>)
    838a:	9b01      	ldr	r3, [sp, #4]
    838c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8390:	2b00      	cmp	r3, #0
    8392:	d10d      	bne.n	83b0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8394:	f7f8 fb41 	bl	a1a <Gpt_schm_read_msr>
    8398:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    839a:	9b00      	ldr	r3, [sp, #0]
    839c:	f003 0301 	and.w	r3, r3, #1
    83a0:	2b00      	cmp	r3, #0
    83a2:	d100      	bne.n	83a6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    83a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    83a6:	490a      	ldr	r1, [pc, #40]	; (83d0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x54>)
    83a8:	9b01      	ldr	r3, [sp, #4]
    83aa:	9a00      	ldr	r2, [sp, #0]
    83ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId]++;
    83b0:	4a06      	ldr	r2, [pc, #24]	; (83cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x50>)
    83b2:	9b01      	ldr	r3, [sp, #4]
    83b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83b8:	1c5a      	adds	r2, r3, #1
    83ba:	4904      	ldr	r1, [pc, #16]	; (83cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x50>)
    83bc:	9b01      	ldr	r3, [sp, #4]
    83be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    83c2:	bf00      	nop
    83c4:	b003      	add	sp, #12
    83c6:	f85d fb04 	ldr.w	pc, [sp], #4
    83ca:	bf00      	nop
    83cc:	1fff9044 	.word	0x1fff9044
    83d0:	1fff9040 	.word	0x1fff9040

000083d4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01(void)
{
    83d4:	b500      	push	{lr}
    83d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    83d8:	f7f8 fc00 	bl	bdc <Sys_GetCoreID>
    83dc:	4603      	mov	r3, r0
    83de:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId]--;
    83e0:	4a0d      	ldr	r2, [pc, #52]	; (8418 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x44>)
    83e2:	9b01      	ldr	r3, [sp, #4]
    83e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83e8:	1e5a      	subs	r2, r3, #1
    83ea:	490b      	ldr	r1, [pc, #44]	; (8418 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x44>)
    83ec:	9b01      	ldr	r3, [sp, #4]
    83ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    83f2:	4a0a      	ldr	r2, [pc, #40]	; (841c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x48>)
    83f4:	9b01      	ldr	r3, [sp, #4]
    83f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83fa:	f003 0301 	and.w	r3, r3, #1
    83fe:	2b00      	cmp	r3, #0
    8400:	d106      	bne.n	8410 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x3c>
    8402:	4a05      	ldr	r2, [pc, #20]	; (8418 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x44>)
    8404:	9b01      	ldr	r3, [sp, #4]
    8406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    840a:	2b00      	cmp	r3, #0
    840c:	d100      	bne.n	8410 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    840e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8410:	bf00      	nop
    8412:	b003      	add	sp, #12
    8414:	f85d fb04 	ldr.w	pc, [sp], #4
    8418:	1fff9044 	.word	0x1fff9044
    841c:	1fff9040 	.word	0x1fff9040

00008420 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02(void)
{
    8420:	b500      	push	{lr}
    8422:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8424:	f7f8 fbda 	bl	bdc <Sys_GetCoreID>
    8428:	4603      	mov	r3, r0
    842a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId])
    842c:	4a10      	ldr	r2, [pc, #64]	; (8470 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x50>)
    842e:	9b01      	ldr	r3, [sp, #4]
    8430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8434:	2b00      	cmp	r3, #0
    8436:	d10d      	bne.n	8454 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8438:	f7f8 faef 	bl	a1a <Gpt_schm_read_msr>
    843c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    843e:	9b00      	ldr	r3, [sp, #0]
    8440:	f003 0301 	and.w	r3, r3, #1
    8444:	2b00      	cmp	r3, #0
    8446:	d100      	bne.n	844a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8448:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    844a:	490a      	ldr	r1, [pc, #40]	; (8474 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x54>)
    844c:	9b01      	ldr	r3, [sp, #4]
    844e:	9a00      	ldr	r2, [sp, #0]
    8450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId]++;
    8454:	4a06      	ldr	r2, [pc, #24]	; (8470 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x50>)
    8456:	9b01      	ldr	r3, [sp, #4]
    8458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    845c:	1c5a      	adds	r2, r3, #1
    845e:	4904      	ldr	r1, [pc, #16]	; (8470 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x50>)
    8460:	9b01      	ldr	r3, [sp, #4]
    8462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8466:	bf00      	nop
    8468:	b003      	add	sp, #12
    846a:	f85d fb04 	ldr.w	pc, [sp], #4
    846e:	bf00      	nop
    8470:	1fff904c 	.word	0x1fff904c
    8474:	1fff9048 	.word	0x1fff9048

00008478 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02(void)
{
    8478:	b500      	push	{lr}
    847a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    847c:	f7f8 fbae 	bl	bdc <Sys_GetCoreID>
    8480:	4603      	mov	r3, r0
    8482:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId]--;
    8484:	4a0d      	ldr	r2, [pc, #52]	; (84bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x44>)
    8486:	9b01      	ldr	r3, [sp, #4]
    8488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    848c:	1e5a      	subs	r2, r3, #1
    848e:	490b      	ldr	r1, [pc, #44]	; (84bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x44>)
    8490:	9b01      	ldr	r3, [sp, #4]
    8492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    8496:	4a0a      	ldr	r2, [pc, #40]	; (84c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x48>)
    8498:	9b01      	ldr	r3, [sp, #4]
    849a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    849e:	f003 0301 	and.w	r3, r3, #1
    84a2:	2b00      	cmp	r3, #0
    84a4:	d106      	bne.n	84b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x3c>
    84a6:	4a05      	ldr	r2, [pc, #20]	; (84bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x44>)
    84a8:	9b01      	ldr	r3, [sp, #4]
    84aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84ae:	2b00      	cmp	r3, #0
    84b0:	d100      	bne.n	84b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    84b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    84b4:	bf00      	nop
    84b6:	b003      	add	sp, #12
    84b8:	f85d fb04 	ldr.w	pc, [sp], #4
    84bc:	1fff904c 	.word	0x1fff904c
    84c0:	1fff9048 	.word	0x1fff9048

000084c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03(void)
{
    84c4:	b500      	push	{lr}
    84c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    84c8:	f7f8 fb88 	bl	bdc <Sys_GetCoreID>
    84cc:	4603      	mov	r3, r0
    84ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId])
    84d0:	4a10      	ldr	r2, [pc, #64]	; (8514 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x50>)
    84d2:	9b01      	ldr	r3, [sp, #4]
    84d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84d8:	2b00      	cmp	r3, #0
    84da:	d10d      	bne.n	84f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    84dc:	f7f8 fa9d 	bl	a1a <Gpt_schm_read_msr>
    84e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    84e2:	9b00      	ldr	r3, [sp, #0]
    84e4:	f003 0301 	and.w	r3, r3, #1
    84e8:	2b00      	cmp	r3, #0
    84ea:	d100      	bne.n	84ee <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    84ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    84ee:	490a      	ldr	r1, [pc, #40]	; (8518 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x54>)
    84f0:	9b01      	ldr	r3, [sp, #4]
    84f2:	9a00      	ldr	r2, [sp, #0]
    84f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId]++;
    84f8:	4a06      	ldr	r2, [pc, #24]	; (8514 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x50>)
    84fa:	9b01      	ldr	r3, [sp, #4]
    84fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8500:	1c5a      	adds	r2, r3, #1
    8502:	4904      	ldr	r1, [pc, #16]	; (8514 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x50>)
    8504:	9b01      	ldr	r3, [sp, #4]
    8506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    850a:	bf00      	nop
    850c:	b003      	add	sp, #12
    850e:	f85d fb04 	ldr.w	pc, [sp], #4
    8512:	bf00      	nop
    8514:	1fff9054 	.word	0x1fff9054
    8518:	1fff9050 	.word	0x1fff9050

0000851c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03(void)
{
    851c:	b500      	push	{lr}
    851e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8520:	f7f8 fb5c 	bl	bdc <Sys_GetCoreID>
    8524:	4603      	mov	r3, r0
    8526:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId]--;
    8528:	4a0d      	ldr	r2, [pc, #52]	; (8560 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x44>)
    852a:	9b01      	ldr	r3, [sp, #4]
    852c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8530:	1e5a      	subs	r2, r3, #1
    8532:	490b      	ldr	r1, [pc, #44]	; (8560 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x44>)
    8534:	9b01      	ldr	r3, [sp, #4]
    8536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    853a:	4a0a      	ldr	r2, [pc, #40]	; (8564 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x48>)
    853c:	9b01      	ldr	r3, [sp, #4]
    853e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8542:	f003 0301 	and.w	r3, r3, #1
    8546:	2b00      	cmp	r3, #0
    8548:	d106      	bne.n	8558 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x3c>
    854a:	4a05      	ldr	r2, [pc, #20]	; (8560 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x44>)
    854c:	9b01      	ldr	r3, [sp, #4]
    854e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8552:	2b00      	cmp	r3, #0
    8554:	d100      	bne.n	8558 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8556:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8558:	bf00      	nop
    855a:	b003      	add	sp, #12
    855c:	f85d fb04 	ldr.w	pc, [sp], #4
    8560:	1fff9054 	.word	0x1fff9054
    8564:	1fff9050 	.word	0x1fff9050

00008568 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04(void)
{
    8568:	b500      	push	{lr}
    856a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    856c:	f7f8 fb36 	bl	bdc <Sys_GetCoreID>
    8570:	4603      	mov	r3, r0
    8572:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId])
    8574:	4a10      	ldr	r2, [pc, #64]	; (85b8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x50>)
    8576:	9b01      	ldr	r3, [sp, #4]
    8578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    857c:	2b00      	cmp	r3, #0
    857e:	d10d      	bne.n	859c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8580:	f7f8 fa4b 	bl	a1a <Gpt_schm_read_msr>
    8584:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8586:	9b00      	ldr	r3, [sp, #0]
    8588:	f003 0301 	and.w	r3, r3, #1
    858c:	2b00      	cmp	r3, #0
    858e:	d100      	bne.n	8592 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8590:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    8592:	490a      	ldr	r1, [pc, #40]	; (85bc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x54>)
    8594:	9b01      	ldr	r3, [sp, #4]
    8596:	9a00      	ldr	r2, [sp, #0]
    8598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId]++;
    859c:	4a06      	ldr	r2, [pc, #24]	; (85b8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x50>)
    859e:	9b01      	ldr	r3, [sp, #4]
    85a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85a4:	1c5a      	adds	r2, r3, #1
    85a6:	4904      	ldr	r1, [pc, #16]	; (85b8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x50>)
    85a8:	9b01      	ldr	r3, [sp, #4]
    85aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    85ae:	bf00      	nop
    85b0:	b003      	add	sp, #12
    85b2:	f85d fb04 	ldr.w	pc, [sp], #4
    85b6:	bf00      	nop
    85b8:	1fff905c 	.word	0x1fff905c
    85bc:	1fff9058 	.word	0x1fff9058

000085c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04(void)
{
    85c0:	b500      	push	{lr}
    85c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    85c4:	f7f8 fb0a 	bl	bdc <Sys_GetCoreID>
    85c8:	4603      	mov	r3, r0
    85ca:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId]--;
    85cc:	4a0d      	ldr	r2, [pc, #52]	; (8604 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x44>)
    85ce:	9b01      	ldr	r3, [sp, #4]
    85d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85d4:	1e5a      	subs	r2, r3, #1
    85d6:	490b      	ldr	r1, [pc, #44]	; (8604 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x44>)
    85d8:	9b01      	ldr	r3, [sp, #4]
    85da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    85de:	4a0a      	ldr	r2, [pc, #40]	; (8608 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x48>)
    85e0:	9b01      	ldr	r3, [sp, #4]
    85e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85e6:	f003 0301 	and.w	r3, r3, #1
    85ea:	2b00      	cmp	r3, #0
    85ec:	d106      	bne.n	85fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x3c>
    85ee:	4a05      	ldr	r2, [pc, #20]	; (8604 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x44>)
    85f0:	9b01      	ldr	r3, [sp, #4]
    85f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85f6:	2b00      	cmp	r3, #0
    85f8:	d100      	bne.n	85fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    85fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    85fc:	bf00      	nop
    85fe:	b003      	add	sp, #12
    8600:	f85d fb04 	ldr.w	pc, [sp], #4
    8604:	1fff905c 	.word	0x1fff905c
    8608:	1fff9058 	.word	0x1fff9058

0000860c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05(void)
{
    860c:	b500      	push	{lr}
    860e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8610:	f7f8 fae4 	bl	bdc <Sys_GetCoreID>
    8614:	4603      	mov	r3, r0
    8616:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId])
    8618:	4a10      	ldr	r2, [pc, #64]	; (865c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x50>)
    861a:	9b01      	ldr	r3, [sp, #4]
    861c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8620:	2b00      	cmp	r3, #0
    8622:	d10d      	bne.n	8640 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8624:	f7f8 f9f9 	bl	a1a <Gpt_schm_read_msr>
    8628:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    862a:	9b00      	ldr	r3, [sp, #0]
    862c:	f003 0301 	and.w	r3, r3, #1
    8630:	2b00      	cmp	r3, #0
    8632:	d100      	bne.n	8636 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8634:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    8636:	490a      	ldr	r1, [pc, #40]	; (8660 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x54>)
    8638:	9b01      	ldr	r3, [sp, #4]
    863a:	9a00      	ldr	r2, [sp, #0]
    863c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId]++;
    8640:	4a06      	ldr	r2, [pc, #24]	; (865c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x50>)
    8642:	9b01      	ldr	r3, [sp, #4]
    8644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8648:	1c5a      	adds	r2, r3, #1
    864a:	4904      	ldr	r1, [pc, #16]	; (865c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x50>)
    864c:	9b01      	ldr	r3, [sp, #4]
    864e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8652:	bf00      	nop
    8654:	b003      	add	sp, #12
    8656:	f85d fb04 	ldr.w	pc, [sp], #4
    865a:	bf00      	nop
    865c:	1fff9064 	.word	0x1fff9064
    8660:	1fff9060 	.word	0x1fff9060

00008664 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05(void)
{
    8664:	b500      	push	{lr}
    8666:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8668:	f7f8 fab8 	bl	bdc <Sys_GetCoreID>
    866c:	4603      	mov	r3, r0
    866e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId]--;
    8670:	4a0d      	ldr	r2, [pc, #52]	; (86a8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x44>)
    8672:	9b01      	ldr	r3, [sp, #4]
    8674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8678:	1e5a      	subs	r2, r3, #1
    867a:	490b      	ldr	r1, [pc, #44]	; (86a8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x44>)
    867c:	9b01      	ldr	r3, [sp, #4]
    867e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    8682:	4a0a      	ldr	r2, [pc, #40]	; (86ac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x48>)
    8684:	9b01      	ldr	r3, [sp, #4]
    8686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    868a:	f003 0301 	and.w	r3, r3, #1
    868e:	2b00      	cmp	r3, #0
    8690:	d106      	bne.n	86a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x3c>
    8692:	4a05      	ldr	r2, [pc, #20]	; (86a8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x44>)
    8694:	9b01      	ldr	r3, [sp, #4]
    8696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    869a:	2b00      	cmp	r3, #0
    869c:	d100      	bne.n	86a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    869e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    86a0:	bf00      	nop
    86a2:	b003      	add	sp, #12
    86a4:	f85d fb04 	ldr.w	pc, [sp], #4
    86a8:	1fff9064 	.word	0x1fff9064
    86ac:	1fff9060 	.word	0x1fff9060

000086b0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06(void)
{
    86b0:	b500      	push	{lr}
    86b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    86b4:	f7f8 fa92 	bl	bdc <Sys_GetCoreID>
    86b8:	4603      	mov	r3, r0
    86ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId])
    86bc:	4a10      	ldr	r2, [pc, #64]	; (8700 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x50>)
    86be:	9b01      	ldr	r3, [sp, #4]
    86c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86c4:	2b00      	cmp	r3, #0
    86c6:	d10d      	bne.n	86e4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    86c8:	f7f8 f9a7 	bl	a1a <Gpt_schm_read_msr>
    86cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    86ce:	9b00      	ldr	r3, [sp, #0]
    86d0:	f003 0301 	and.w	r3, r3, #1
    86d4:	2b00      	cmp	r3, #0
    86d6:	d100      	bne.n	86da <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    86d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    86da:	490a      	ldr	r1, [pc, #40]	; (8704 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x54>)
    86dc:	9b01      	ldr	r3, [sp, #4]
    86de:	9a00      	ldr	r2, [sp, #0]
    86e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId]++;
    86e4:	4a06      	ldr	r2, [pc, #24]	; (8700 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x50>)
    86e6:	9b01      	ldr	r3, [sp, #4]
    86e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86ec:	1c5a      	adds	r2, r3, #1
    86ee:	4904      	ldr	r1, [pc, #16]	; (8700 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x50>)
    86f0:	9b01      	ldr	r3, [sp, #4]
    86f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    86f6:	bf00      	nop
    86f8:	b003      	add	sp, #12
    86fa:	f85d fb04 	ldr.w	pc, [sp], #4
    86fe:	bf00      	nop
    8700:	1fff906c 	.word	0x1fff906c
    8704:	1fff9068 	.word	0x1fff9068

00008708 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06(void)
{
    8708:	b500      	push	{lr}
    870a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    870c:	f7f8 fa66 	bl	bdc <Sys_GetCoreID>
    8710:	4603      	mov	r3, r0
    8712:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId]--;
    8714:	4a0d      	ldr	r2, [pc, #52]	; (874c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x44>)
    8716:	9b01      	ldr	r3, [sp, #4]
    8718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    871c:	1e5a      	subs	r2, r3, #1
    871e:	490b      	ldr	r1, [pc, #44]	; (874c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x44>)
    8720:	9b01      	ldr	r3, [sp, #4]
    8722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    8726:	4a0a      	ldr	r2, [pc, #40]	; (8750 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x48>)
    8728:	9b01      	ldr	r3, [sp, #4]
    872a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    872e:	f003 0301 	and.w	r3, r3, #1
    8732:	2b00      	cmp	r3, #0
    8734:	d106      	bne.n	8744 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x3c>
    8736:	4a05      	ldr	r2, [pc, #20]	; (874c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x44>)
    8738:	9b01      	ldr	r3, [sp, #4]
    873a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    873e:	2b00      	cmp	r3, #0
    8740:	d100      	bne.n	8744 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8742:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8744:	bf00      	nop
    8746:	b003      	add	sp, #12
    8748:	f85d fb04 	ldr.w	pc, [sp], #4
    874c:	1fff906c 	.word	0x1fff906c
    8750:	1fff9068 	.word	0x1fff9068

00008754 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07(void)
{
    8754:	b500      	push	{lr}
    8756:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8758:	f7f8 fa40 	bl	bdc <Sys_GetCoreID>
    875c:	4603      	mov	r3, r0
    875e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId])
    8760:	4a10      	ldr	r2, [pc, #64]	; (87a4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x50>)
    8762:	9b01      	ldr	r3, [sp, #4]
    8764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8768:	2b00      	cmp	r3, #0
    876a:	d10d      	bne.n	8788 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    876c:	f7f8 f955 	bl	a1a <Gpt_schm_read_msr>
    8770:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8772:	9b00      	ldr	r3, [sp, #0]
    8774:	f003 0301 	and.w	r3, r3, #1
    8778:	2b00      	cmp	r3, #0
    877a:	d100      	bne.n	877e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    877c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    877e:	490a      	ldr	r1, [pc, #40]	; (87a8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x54>)
    8780:	9b01      	ldr	r3, [sp, #4]
    8782:	9a00      	ldr	r2, [sp, #0]
    8784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId]++;
    8788:	4a06      	ldr	r2, [pc, #24]	; (87a4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x50>)
    878a:	9b01      	ldr	r3, [sp, #4]
    878c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8790:	1c5a      	adds	r2, r3, #1
    8792:	4904      	ldr	r1, [pc, #16]	; (87a4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x50>)
    8794:	9b01      	ldr	r3, [sp, #4]
    8796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    879a:	bf00      	nop
    879c:	b003      	add	sp, #12
    879e:	f85d fb04 	ldr.w	pc, [sp], #4
    87a2:	bf00      	nop
    87a4:	1fff9074 	.word	0x1fff9074
    87a8:	1fff9070 	.word	0x1fff9070

000087ac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07(void)
{
    87ac:	b500      	push	{lr}
    87ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    87b0:	f7f8 fa14 	bl	bdc <Sys_GetCoreID>
    87b4:	4603      	mov	r3, r0
    87b6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId]--;
    87b8:	4a0d      	ldr	r2, [pc, #52]	; (87f0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x44>)
    87ba:	9b01      	ldr	r3, [sp, #4]
    87bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87c0:	1e5a      	subs	r2, r3, #1
    87c2:	490b      	ldr	r1, [pc, #44]	; (87f0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x44>)
    87c4:	9b01      	ldr	r3, [sp, #4]
    87c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    87ca:	4a0a      	ldr	r2, [pc, #40]	; (87f4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x48>)
    87cc:	9b01      	ldr	r3, [sp, #4]
    87ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87d2:	f003 0301 	and.w	r3, r3, #1
    87d6:	2b00      	cmp	r3, #0
    87d8:	d106      	bne.n	87e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x3c>
    87da:	4a05      	ldr	r2, [pc, #20]	; (87f0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x44>)
    87dc:	9b01      	ldr	r3, [sp, #4]
    87de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87e2:	2b00      	cmp	r3, #0
    87e4:	d100      	bne.n	87e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    87e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    87e8:	bf00      	nop
    87ea:	b003      	add	sp, #12
    87ec:	f85d fb04 	ldr.w	pc, [sp], #4
    87f0:	1fff9074 	.word	0x1fff9074
    87f4:	1fff9070 	.word	0x1fff9070

000087f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10(void)
{
    87f8:	b500      	push	{lr}
    87fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    87fc:	f7f8 f9ee 	bl	bdc <Sys_GetCoreID>
    8800:	4603      	mov	r3, r0
    8802:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId])
    8804:	4a10      	ldr	r2, [pc, #64]	; (8848 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x50>)
    8806:	9b01      	ldr	r3, [sp, #4]
    8808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    880c:	2b00      	cmp	r3, #0
    880e:	d10d      	bne.n	882c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8810:	f7f8 f903 	bl	a1a <Gpt_schm_read_msr>
    8814:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8816:	9b00      	ldr	r3, [sp, #0]
    8818:	f003 0301 	and.w	r3, r3, #1
    881c:	2b00      	cmp	r3, #0
    881e:	d100      	bne.n	8822 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8820:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    8822:	490a      	ldr	r1, [pc, #40]	; (884c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x54>)
    8824:	9b01      	ldr	r3, [sp, #4]
    8826:	9a00      	ldr	r2, [sp, #0]
    8828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId]++;
    882c:	4a06      	ldr	r2, [pc, #24]	; (8848 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x50>)
    882e:	9b01      	ldr	r3, [sp, #4]
    8830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8834:	1c5a      	adds	r2, r3, #1
    8836:	4904      	ldr	r1, [pc, #16]	; (8848 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x50>)
    8838:	9b01      	ldr	r3, [sp, #4]
    883a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    883e:	bf00      	nop
    8840:	b003      	add	sp, #12
    8842:	f85d fb04 	ldr.w	pc, [sp], #4
    8846:	bf00      	nop
    8848:	1fff907c 	.word	0x1fff907c
    884c:	1fff9078 	.word	0x1fff9078

00008850 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10(void)
{
    8850:	b500      	push	{lr}
    8852:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8854:	f7f8 f9c2 	bl	bdc <Sys_GetCoreID>
    8858:	4603      	mov	r3, r0
    885a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId]--;
    885c:	4a0d      	ldr	r2, [pc, #52]	; (8894 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x44>)
    885e:	9b01      	ldr	r3, [sp, #4]
    8860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8864:	1e5a      	subs	r2, r3, #1
    8866:	490b      	ldr	r1, [pc, #44]	; (8894 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x44>)
    8868:	9b01      	ldr	r3, [sp, #4]
    886a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    886e:	4a0a      	ldr	r2, [pc, #40]	; (8898 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x48>)
    8870:	9b01      	ldr	r3, [sp, #4]
    8872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8876:	f003 0301 	and.w	r3, r3, #1
    887a:	2b00      	cmp	r3, #0
    887c:	d106      	bne.n	888c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x3c>
    887e:	4a05      	ldr	r2, [pc, #20]	; (8894 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x44>)
    8880:	9b01      	ldr	r3, [sp, #4]
    8882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8886:	2b00      	cmp	r3, #0
    8888:	d100      	bne.n	888c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    888a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    888c:	bf00      	nop
    888e:	b003      	add	sp, #12
    8890:	f85d fb04 	ldr.w	pc, [sp], #4
    8894:	1fff907c 	.word	0x1fff907c
    8898:	1fff9078 	.word	0x1fff9078

0000889c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11(void)
{
    889c:	b500      	push	{lr}
    889e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    88a0:	f7f8 f99c 	bl	bdc <Sys_GetCoreID>
    88a4:	4603      	mov	r3, r0
    88a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId])
    88a8:	4a10      	ldr	r2, [pc, #64]	; (88ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x50>)
    88aa:	9b01      	ldr	r3, [sp, #4]
    88ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88b0:	2b00      	cmp	r3, #0
    88b2:	d10d      	bne.n	88d0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    88b4:	f7f8 f8b1 	bl	a1a <Gpt_schm_read_msr>
    88b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    88ba:	9b00      	ldr	r3, [sp, #0]
    88bc:	f003 0301 	and.w	r3, r3, #1
    88c0:	2b00      	cmp	r3, #0
    88c2:	d100      	bne.n	88c6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    88c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    88c6:	490a      	ldr	r1, [pc, #40]	; (88f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x54>)
    88c8:	9b01      	ldr	r3, [sp, #4]
    88ca:	9a00      	ldr	r2, [sp, #0]
    88cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId]++;
    88d0:	4a06      	ldr	r2, [pc, #24]	; (88ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x50>)
    88d2:	9b01      	ldr	r3, [sp, #4]
    88d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88d8:	1c5a      	adds	r2, r3, #1
    88da:	4904      	ldr	r1, [pc, #16]	; (88ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x50>)
    88dc:	9b01      	ldr	r3, [sp, #4]
    88de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    88e2:	bf00      	nop
    88e4:	b003      	add	sp, #12
    88e6:	f85d fb04 	ldr.w	pc, [sp], #4
    88ea:	bf00      	nop
    88ec:	1fff9084 	.word	0x1fff9084
    88f0:	1fff9080 	.word	0x1fff9080

000088f4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11(void)
{
    88f4:	b500      	push	{lr}
    88f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    88f8:	f7f8 f970 	bl	bdc <Sys_GetCoreID>
    88fc:	4603      	mov	r3, r0
    88fe:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId]--;
    8900:	4a0d      	ldr	r2, [pc, #52]	; (8938 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x44>)
    8902:	9b01      	ldr	r3, [sp, #4]
    8904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8908:	1e5a      	subs	r2, r3, #1
    890a:	490b      	ldr	r1, [pc, #44]	; (8938 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x44>)
    890c:	9b01      	ldr	r3, [sp, #4]
    890e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    8912:	4a0a      	ldr	r2, [pc, #40]	; (893c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x48>)
    8914:	9b01      	ldr	r3, [sp, #4]
    8916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    891a:	f003 0301 	and.w	r3, r3, #1
    891e:	2b00      	cmp	r3, #0
    8920:	d106      	bne.n	8930 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x3c>
    8922:	4a05      	ldr	r2, [pc, #20]	; (8938 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x44>)
    8924:	9b01      	ldr	r3, [sp, #4]
    8926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    892a:	2b00      	cmp	r3, #0
    892c:	d100      	bne.n	8930 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    892e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8930:	bf00      	nop
    8932:	b003      	add	sp, #12
    8934:	f85d fb04 	ldr.w	pc, [sp], #4
    8938:	1fff9084 	.word	0x1fff9084
    893c:	1fff9080 	.word	0x1fff9080

00008940 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17(void)
{
    8940:	b500      	push	{lr}
    8942:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8944:	f7f8 f94a 	bl	bdc <Sys_GetCoreID>
    8948:	4603      	mov	r3, r0
    894a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId])
    894c:	4a10      	ldr	r2, [pc, #64]	; (8990 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x50>)
    894e:	9b01      	ldr	r3, [sp, #4]
    8950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8954:	2b00      	cmp	r3, #0
    8956:	d10d      	bne.n	8974 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8958:	f7f8 f85f 	bl	a1a <Gpt_schm_read_msr>
    895c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    895e:	9b00      	ldr	r3, [sp, #0]
    8960:	f003 0301 	and.w	r3, r3, #1
    8964:	2b00      	cmp	r3, #0
    8966:	d100      	bne.n	896a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8968:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    896a:	490a      	ldr	r1, [pc, #40]	; (8994 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x54>)
    896c:	9b01      	ldr	r3, [sp, #4]
    896e:	9a00      	ldr	r2, [sp, #0]
    8970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId]++;
    8974:	4a06      	ldr	r2, [pc, #24]	; (8990 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x50>)
    8976:	9b01      	ldr	r3, [sp, #4]
    8978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    897c:	1c5a      	adds	r2, r3, #1
    897e:	4904      	ldr	r1, [pc, #16]	; (8990 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x50>)
    8980:	9b01      	ldr	r3, [sp, #4]
    8982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8986:	bf00      	nop
    8988:	b003      	add	sp, #12
    898a:	f85d fb04 	ldr.w	pc, [sp], #4
    898e:	bf00      	nop
    8990:	1fff908c 	.word	0x1fff908c
    8994:	1fff9088 	.word	0x1fff9088

00008998 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17(void)
{
    8998:	b500      	push	{lr}
    899a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    899c:	f7f8 f91e 	bl	bdc <Sys_GetCoreID>
    89a0:	4603      	mov	r3, r0
    89a2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId]--;
    89a4:	4a0d      	ldr	r2, [pc, #52]	; (89dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x44>)
    89a6:	9b01      	ldr	r3, [sp, #4]
    89a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89ac:	1e5a      	subs	r2, r3, #1
    89ae:	490b      	ldr	r1, [pc, #44]	; (89dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x44>)
    89b0:	9b01      	ldr	r3, [sp, #4]
    89b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    89b6:	4a0a      	ldr	r2, [pc, #40]	; (89e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x48>)
    89b8:	9b01      	ldr	r3, [sp, #4]
    89ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89be:	f003 0301 	and.w	r3, r3, #1
    89c2:	2b00      	cmp	r3, #0
    89c4:	d106      	bne.n	89d4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x3c>
    89c6:	4a05      	ldr	r2, [pc, #20]	; (89dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x44>)
    89c8:	9b01      	ldr	r3, [sp, #4]
    89ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89ce:	2b00      	cmp	r3, #0
    89d0:	d100      	bne.n	89d4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    89d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    89d4:	bf00      	nop
    89d6:	b003      	add	sp, #12
    89d8:	f85d fb04 	ldr.w	pc, [sp], #4
    89dc:	1fff908c 	.word	0x1fff908c
    89e0:	1fff9088 	.word	0x1fff9088

000089e4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21(void)
{
    89e4:	b500      	push	{lr}
    89e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    89e8:	f7f8 f8f8 	bl	bdc <Sys_GetCoreID>
    89ec:	4603      	mov	r3, r0
    89ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId])
    89f0:	4a10      	ldr	r2, [pc, #64]	; (8a34 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x50>)
    89f2:	9b01      	ldr	r3, [sp, #4]
    89f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89f8:	2b00      	cmp	r3, #0
    89fa:	d10d      	bne.n	8a18 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    89fc:	f7f8 f80d 	bl	a1a <Gpt_schm_read_msr>
    8a00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8a02:	9b00      	ldr	r3, [sp, #0]
    8a04:	f003 0301 	and.w	r3, r3, #1
    8a08:	2b00      	cmp	r3, #0
    8a0a:	d100      	bne.n	8a0e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8a0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    8a0e:	490a      	ldr	r1, [pc, #40]	; (8a38 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x54>)
    8a10:	9b01      	ldr	r3, [sp, #4]
    8a12:	9a00      	ldr	r2, [sp, #0]
    8a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId]++;
    8a18:	4a06      	ldr	r2, [pc, #24]	; (8a34 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x50>)
    8a1a:	9b01      	ldr	r3, [sp, #4]
    8a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a20:	1c5a      	adds	r2, r3, #1
    8a22:	4904      	ldr	r1, [pc, #16]	; (8a34 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x50>)
    8a24:	9b01      	ldr	r3, [sp, #4]
    8a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8a2a:	bf00      	nop
    8a2c:	b003      	add	sp, #12
    8a2e:	f85d fb04 	ldr.w	pc, [sp], #4
    8a32:	bf00      	nop
    8a34:	1fff9094 	.word	0x1fff9094
    8a38:	1fff9090 	.word	0x1fff9090

00008a3c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21(void)
{
    8a3c:	b500      	push	{lr}
    8a3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8a40:	f7f8 f8cc 	bl	bdc <Sys_GetCoreID>
    8a44:	4603      	mov	r3, r0
    8a46:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId]--;
    8a48:	4a0d      	ldr	r2, [pc, #52]	; (8a80 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x44>)
    8a4a:	9b01      	ldr	r3, [sp, #4]
    8a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a50:	1e5a      	subs	r2, r3, #1
    8a52:	490b      	ldr	r1, [pc, #44]	; (8a80 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x44>)
    8a54:	9b01      	ldr	r3, [sp, #4]
    8a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    8a5a:	4a0a      	ldr	r2, [pc, #40]	; (8a84 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x48>)
    8a5c:	9b01      	ldr	r3, [sp, #4]
    8a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a62:	f003 0301 	and.w	r3, r3, #1
    8a66:	2b00      	cmp	r3, #0
    8a68:	d106      	bne.n	8a78 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x3c>
    8a6a:	4a05      	ldr	r2, [pc, #20]	; (8a80 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x44>)
    8a6c:	9b01      	ldr	r3, [sp, #4]
    8a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a72:	2b00      	cmp	r3, #0
    8a74:	d100      	bne.n	8a78 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8a76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8a78:	bf00      	nop
    8a7a:	b003      	add	sp, #12
    8a7c:	f85d fb04 	ldr.w	pc, [sp], #4
    8a80:	1fff9094 	.word	0x1fff9094
    8a84:	1fff9090 	.word	0x1fff9090

00008a88 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22(void)
{
    8a88:	b500      	push	{lr}
    8a8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8a8c:	f7f8 f8a6 	bl	bdc <Sys_GetCoreID>
    8a90:	4603      	mov	r3, r0
    8a92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId])
    8a94:	4a10      	ldr	r2, [pc, #64]	; (8ad8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x50>)
    8a96:	9b01      	ldr	r3, [sp, #4]
    8a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a9c:	2b00      	cmp	r3, #0
    8a9e:	d10d      	bne.n	8abc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8aa0:	f7f7 ffbb 	bl	a1a <Gpt_schm_read_msr>
    8aa4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8aa6:	9b00      	ldr	r3, [sp, #0]
    8aa8:	f003 0301 	and.w	r3, r3, #1
    8aac:	2b00      	cmp	r3, #0
    8aae:	d100      	bne.n	8ab2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8ab0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    8ab2:	490a      	ldr	r1, [pc, #40]	; (8adc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x54>)
    8ab4:	9b01      	ldr	r3, [sp, #4]
    8ab6:	9a00      	ldr	r2, [sp, #0]
    8ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId]++;
    8abc:	4a06      	ldr	r2, [pc, #24]	; (8ad8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x50>)
    8abe:	9b01      	ldr	r3, [sp, #4]
    8ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ac4:	1c5a      	adds	r2, r3, #1
    8ac6:	4904      	ldr	r1, [pc, #16]	; (8ad8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x50>)
    8ac8:	9b01      	ldr	r3, [sp, #4]
    8aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8ace:	bf00      	nop
    8ad0:	b003      	add	sp, #12
    8ad2:	f85d fb04 	ldr.w	pc, [sp], #4
    8ad6:	bf00      	nop
    8ad8:	1fff909c 	.word	0x1fff909c
    8adc:	1fff9098 	.word	0x1fff9098

00008ae0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22(void)
{
    8ae0:	b500      	push	{lr}
    8ae2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8ae4:	f7f8 f87a 	bl	bdc <Sys_GetCoreID>
    8ae8:	4603      	mov	r3, r0
    8aea:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId]--;
    8aec:	4a0d      	ldr	r2, [pc, #52]	; (8b24 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x44>)
    8aee:	9b01      	ldr	r3, [sp, #4]
    8af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8af4:	1e5a      	subs	r2, r3, #1
    8af6:	490b      	ldr	r1, [pc, #44]	; (8b24 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x44>)
    8af8:	9b01      	ldr	r3, [sp, #4]
    8afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    8afe:	4a0a      	ldr	r2, [pc, #40]	; (8b28 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x48>)
    8b00:	9b01      	ldr	r3, [sp, #4]
    8b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b06:	f003 0301 	and.w	r3, r3, #1
    8b0a:	2b00      	cmp	r3, #0
    8b0c:	d106      	bne.n	8b1c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x3c>
    8b0e:	4a05      	ldr	r2, [pc, #20]	; (8b24 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x44>)
    8b10:	9b01      	ldr	r3, [sp, #4]
    8b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b16:	2b00      	cmp	r3, #0
    8b18:	d100      	bne.n	8b1c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8b1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8b1c:	bf00      	nop
    8b1e:	b003      	add	sp, #12
    8b20:	f85d fb04 	ldr.w	pc, [sp], #4
    8b24:	1fff909c 	.word	0x1fff909c
    8b28:	1fff9098 	.word	0x1fff9098

00008b2c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23(void)
{
    8b2c:	b500      	push	{lr}
    8b2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8b30:	f7f8 f854 	bl	bdc <Sys_GetCoreID>
    8b34:	4603      	mov	r3, r0
    8b36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId])
    8b38:	4a10      	ldr	r2, [pc, #64]	; (8b7c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x50>)
    8b3a:	9b01      	ldr	r3, [sp, #4]
    8b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b40:	2b00      	cmp	r3, #0
    8b42:	d10d      	bne.n	8b60 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8b44:	f7f7 ff69 	bl	a1a <Gpt_schm_read_msr>
    8b48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8b4a:	9b00      	ldr	r3, [sp, #0]
    8b4c:	f003 0301 	and.w	r3, r3, #1
    8b50:	2b00      	cmp	r3, #0
    8b52:	d100      	bne.n	8b56 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8b54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    8b56:	490a      	ldr	r1, [pc, #40]	; (8b80 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x54>)
    8b58:	9b01      	ldr	r3, [sp, #4]
    8b5a:	9a00      	ldr	r2, [sp, #0]
    8b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId]++;
    8b60:	4a06      	ldr	r2, [pc, #24]	; (8b7c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x50>)
    8b62:	9b01      	ldr	r3, [sp, #4]
    8b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b68:	1c5a      	adds	r2, r3, #1
    8b6a:	4904      	ldr	r1, [pc, #16]	; (8b7c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x50>)
    8b6c:	9b01      	ldr	r3, [sp, #4]
    8b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8b72:	bf00      	nop
    8b74:	b003      	add	sp, #12
    8b76:	f85d fb04 	ldr.w	pc, [sp], #4
    8b7a:	bf00      	nop
    8b7c:	1fff90a4 	.word	0x1fff90a4
    8b80:	1fff90a0 	.word	0x1fff90a0

00008b84 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23(void)
{
    8b84:	b500      	push	{lr}
    8b86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8b88:	f7f8 f828 	bl	bdc <Sys_GetCoreID>
    8b8c:	4603      	mov	r3, r0
    8b8e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId]--;
    8b90:	4a0d      	ldr	r2, [pc, #52]	; (8bc8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x44>)
    8b92:	9b01      	ldr	r3, [sp, #4]
    8b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b98:	1e5a      	subs	r2, r3, #1
    8b9a:	490b      	ldr	r1, [pc, #44]	; (8bc8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x44>)
    8b9c:	9b01      	ldr	r3, [sp, #4]
    8b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    8ba2:	4a0a      	ldr	r2, [pc, #40]	; (8bcc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x48>)
    8ba4:	9b01      	ldr	r3, [sp, #4]
    8ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8baa:	f003 0301 	and.w	r3, r3, #1
    8bae:	2b00      	cmp	r3, #0
    8bb0:	d106      	bne.n	8bc0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x3c>
    8bb2:	4a05      	ldr	r2, [pc, #20]	; (8bc8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x44>)
    8bb4:	9b01      	ldr	r3, [sp, #4]
    8bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bba:	2b00      	cmp	r3, #0
    8bbc:	d100      	bne.n	8bc0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8bbe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8bc0:	bf00      	nop
    8bc2:	b003      	add	sp, #12
    8bc4:	f85d fb04 	ldr.w	pc, [sp], #4
    8bc8:	1fff90a4 	.word	0x1fff90a4
    8bcc:	1fff90a0 	.word	0x1fff90a0

00008bd0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24(void)
{
    8bd0:	b500      	push	{lr}
    8bd2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8bd4:	f7f8 f802 	bl	bdc <Sys_GetCoreID>
    8bd8:	4603      	mov	r3, r0
    8bda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId])
    8bdc:	4a10      	ldr	r2, [pc, #64]	; (8c20 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x50>)
    8bde:	9b01      	ldr	r3, [sp, #4]
    8be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8be4:	2b00      	cmp	r3, #0
    8be6:	d10d      	bne.n	8c04 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8be8:	f7f7 ff17 	bl	a1a <Gpt_schm_read_msr>
    8bec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8bee:	9b00      	ldr	r3, [sp, #0]
    8bf0:	f003 0301 	and.w	r3, r3, #1
    8bf4:	2b00      	cmp	r3, #0
    8bf6:	d100      	bne.n	8bfa <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8bf8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    8bfa:	490a      	ldr	r1, [pc, #40]	; (8c24 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x54>)
    8bfc:	9b01      	ldr	r3, [sp, #4]
    8bfe:	9a00      	ldr	r2, [sp, #0]
    8c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId]++;
    8c04:	4a06      	ldr	r2, [pc, #24]	; (8c20 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x50>)
    8c06:	9b01      	ldr	r3, [sp, #4]
    8c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c0c:	1c5a      	adds	r2, r3, #1
    8c0e:	4904      	ldr	r1, [pc, #16]	; (8c20 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x50>)
    8c10:	9b01      	ldr	r3, [sp, #4]
    8c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8c16:	bf00      	nop
    8c18:	b003      	add	sp, #12
    8c1a:	f85d fb04 	ldr.w	pc, [sp], #4
    8c1e:	bf00      	nop
    8c20:	1fff90ac 	.word	0x1fff90ac
    8c24:	1fff90a8 	.word	0x1fff90a8

00008c28 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24(void)
{
    8c28:	b500      	push	{lr}
    8c2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c2c:	f7f7 ffd6 	bl	bdc <Sys_GetCoreID>
    8c30:	4603      	mov	r3, r0
    8c32:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId]--;
    8c34:	4a0d      	ldr	r2, [pc, #52]	; (8c6c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x44>)
    8c36:	9b01      	ldr	r3, [sp, #4]
    8c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c3c:	1e5a      	subs	r2, r3, #1
    8c3e:	490b      	ldr	r1, [pc, #44]	; (8c6c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x44>)
    8c40:	9b01      	ldr	r3, [sp, #4]
    8c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    8c46:	4a0a      	ldr	r2, [pc, #40]	; (8c70 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x48>)
    8c48:	9b01      	ldr	r3, [sp, #4]
    8c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c4e:	f003 0301 	and.w	r3, r3, #1
    8c52:	2b00      	cmp	r3, #0
    8c54:	d106      	bne.n	8c64 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x3c>
    8c56:	4a05      	ldr	r2, [pc, #20]	; (8c6c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x44>)
    8c58:	9b01      	ldr	r3, [sp, #4]
    8c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c5e:	2b00      	cmp	r3, #0
    8c60:	d100      	bne.n	8c64 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8c62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8c64:	bf00      	nop
    8c66:	b003      	add	sp, #12
    8c68:	f85d fb04 	ldr.w	pc, [sp], #4
    8c6c:	1fff90ac 	.word	0x1fff90ac
    8c70:	1fff90a8 	.word	0x1fff90a8

00008c74 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25(void)
{
    8c74:	b500      	push	{lr}
    8c76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c78:	f7f7 ffb0 	bl	bdc <Sys_GetCoreID>
    8c7c:	4603      	mov	r3, r0
    8c7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId])
    8c80:	4a10      	ldr	r2, [pc, #64]	; (8cc4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x50>)
    8c82:	9b01      	ldr	r3, [sp, #4]
    8c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c88:	2b00      	cmp	r3, #0
    8c8a:	d10d      	bne.n	8ca8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8c8c:	f7f7 fec5 	bl	a1a <Gpt_schm_read_msr>
    8c90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8c92:	9b00      	ldr	r3, [sp, #0]
    8c94:	f003 0301 	and.w	r3, r3, #1
    8c98:	2b00      	cmp	r3, #0
    8c9a:	d100      	bne.n	8c9e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8c9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    8c9e:	490a      	ldr	r1, [pc, #40]	; (8cc8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x54>)
    8ca0:	9b01      	ldr	r3, [sp, #4]
    8ca2:	9a00      	ldr	r2, [sp, #0]
    8ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId]++;
    8ca8:	4a06      	ldr	r2, [pc, #24]	; (8cc4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x50>)
    8caa:	9b01      	ldr	r3, [sp, #4]
    8cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cb0:	1c5a      	adds	r2, r3, #1
    8cb2:	4904      	ldr	r1, [pc, #16]	; (8cc4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x50>)
    8cb4:	9b01      	ldr	r3, [sp, #4]
    8cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8cba:	bf00      	nop
    8cbc:	b003      	add	sp, #12
    8cbe:	f85d fb04 	ldr.w	pc, [sp], #4
    8cc2:	bf00      	nop
    8cc4:	1fff90b4 	.word	0x1fff90b4
    8cc8:	1fff90b0 	.word	0x1fff90b0

00008ccc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25(void)
{
    8ccc:	b500      	push	{lr}
    8cce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8cd0:	f7f7 ff84 	bl	bdc <Sys_GetCoreID>
    8cd4:	4603      	mov	r3, r0
    8cd6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId]--;
    8cd8:	4a0d      	ldr	r2, [pc, #52]	; (8d10 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x44>)
    8cda:	9b01      	ldr	r3, [sp, #4]
    8cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ce0:	1e5a      	subs	r2, r3, #1
    8ce2:	490b      	ldr	r1, [pc, #44]	; (8d10 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x44>)
    8ce4:	9b01      	ldr	r3, [sp, #4]
    8ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    8cea:	4a0a      	ldr	r2, [pc, #40]	; (8d14 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x48>)
    8cec:	9b01      	ldr	r3, [sp, #4]
    8cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cf2:	f003 0301 	and.w	r3, r3, #1
    8cf6:	2b00      	cmp	r3, #0
    8cf8:	d106      	bne.n	8d08 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x3c>
    8cfa:	4a05      	ldr	r2, [pc, #20]	; (8d10 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x44>)
    8cfc:	9b01      	ldr	r3, [sp, #4]
    8cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d02:	2b00      	cmp	r3, #0
    8d04:	d100      	bne.n	8d08 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8d06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8d08:	bf00      	nop
    8d0a:	b003      	add	sp, #12
    8d0c:	f85d fb04 	ldr.w	pc, [sp], #4
    8d10:	1fff90b4 	.word	0x1fff90b4
    8d14:	1fff90b0 	.word	0x1fff90b0

00008d18 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26(void)
{
    8d18:	b500      	push	{lr}
    8d1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8d1c:	f7f7 ff5e 	bl	bdc <Sys_GetCoreID>
    8d20:	4603      	mov	r3, r0
    8d22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId])
    8d24:	4a10      	ldr	r2, [pc, #64]	; (8d68 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x50>)
    8d26:	9b01      	ldr	r3, [sp, #4]
    8d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d2c:	2b00      	cmp	r3, #0
    8d2e:	d10d      	bne.n	8d4c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8d30:	f7f7 fe73 	bl	a1a <Gpt_schm_read_msr>
    8d34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8d36:	9b00      	ldr	r3, [sp, #0]
    8d38:	f003 0301 	and.w	r3, r3, #1
    8d3c:	2b00      	cmp	r3, #0
    8d3e:	d100      	bne.n	8d42 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8d40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    8d42:	490a      	ldr	r1, [pc, #40]	; (8d6c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x54>)
    8d44:	9b01      	ldr	r3, [sp, #4]
    8d46:	9a00      	ldr	r2, [sp, #0]
    8d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId]++;
    8d4c:	4a06      	ldr	r2, [pc, #24]	; (8d68 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x50>)
    8d4e:	9b01      	ldr	r3, [sp, #4]
    8d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d54:	1c5a      	adds	r2, r3, #1
    8d56:	4904      	ldr	r1, [pc, #16]	; (8d68 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x50>)
    8d58:	9b01      	ldr	r3, [sp, #4]
    8d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8d5e:	bf00      	nop
    8d60:	b003      	add	sp, #12
    8d62:	f85d fb04 	ldr.w	pc, [sp], #4
    8d66:	bf00      	nop
    8d68:	1fff90bc 	.word	0x1fff90bc
    8d6c:	1fff90b8 	.word	0x1fff90b8

00008d70 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26(void)
{
    8d70:	b500      	push	{lr}
    8d72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8d74:	f7f7 ff32 	bl	bdc <Sys_GetCoreID>
    8d78:	4603      	mov	r3, r0
    8d7a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId]--;
    8d7c:	4a0d      	ldr	r2, [pc, #52]	; (8db4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x44>)
    8d7e:	9b01      	ldr	r3, [sp, #4]
    8d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d84:	1e5a      	subs	r2, r3, #1
    8d86:	490b      	ldr	r1, [pc, #44]	; (8db4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x44>)
    8d88:	9b01      	ldr	r3, [sp, #4]
    8d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    8d8e:	4a0a      	ldr	r2, [pc, #40]	; (8db8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x48>)
    8d90:	9b01      	ldr	r3, [sp, #4]
    8d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d96:	f003 0301 	and.w	r3, r3, #1
    8d9a:	2b00      	cmp	r3, #0
    8d9c:	d106      	bne.n	8dac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x3c>
    8d9e:	4a05      	ldr	r2, [pc, #20]	; (8db4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x44>)
    8da0:	9b01      	ldr	r3, [sp, #4]
    8da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8da6:	2b00      	cmp	r3, #0
    8da8:	d100      	bne.n	8dac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8daa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8dac:	bf00      	nop
    8dae:	b003      	add	sp, #12
    8db0:	f85d fb04 	ldr.w	pc, [sp], #4
    8db4:	1fff90bc 	.word	0x1fff90bc
    8db8:	1fff90b8 	.word	0x1fff90b8

00008dbc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29(void)
{
    8dbc:	b500      	push	{lr}
    8dbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8dc0:	f7f7 ff0c 	bl	bdc <Sys_GetCoreID>
    8dc4:	4603      	mov	r3, r0
    8dc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId])
    8dc8:	4a10      	ldr	r2, [pc, #64]	; (8e0c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x50>)
    8dca:	9b01      	ldr	r3, [sp, #4]
    8dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dd0:	2b00      	cmp	r3, #0
    8dd2:	d10d      	bne.n	8df0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8dd4:	f7f7 fe21 	bl	a1a <Gpt_schm_read_msr>
    8dd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8dda:	9b00      	ldr	r3, [sp, #0]
    8ddc:	f003 0301 	and.w	r3, r3, #1
    8de0:	2b00      	cmp	r3, #0
    8de2:	d100      	bne.n	8de6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8de4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_29[u32CoreId] = msr;
    8de6:	490a      	ldr	r1, [pc, #40]	; (8e10 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x54>)
    8de8:	9b01      	ldr	r3, [sp, #4]
    8dea:	9a00      	ldr	r2, [sp, #0]
    8dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId]++;
    8df0:	4a06      	ldr	r2, [pc, #24]	; (8e0c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x50>)
    8df2:	9b01      	ldr	r3, [sp, #4]
    8df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8df8:	1c5a      	adds	r2, r3, #1
    8dfa:	4904      	ldr	r1, [pc, #16]	; (8e0c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x50>)
    8dfc:	9b01      	ldr	r3, [sp, #4]
    8dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8e02:	bf00      	nop
    8e04:	b003      	add	sp, #12
    8e06:	f85d fb04 	ldr.w	pc, [sp], #4
    8e0a:	bf00      	nop
    8e0c:	1fff90c4 	.word	0x1fff90c4
    8e10:	1fff90c0 	.word	0x1fff90c0

00008e14 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29(void)
{
    8e14:	b500      	push	{lr}
    8e16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e18:	f7f7 fee0 	bl	bdc <Sys_GetCoreID>
    8e1c:	4603      	mov	r3, r0
    8e1e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId]--;
    8e20:	4a0d      	ldr	r2, [pc, #52]	; (8e58 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x44>)
    8e22:	9b01      	ldr	r3, [sp, #4]
    8e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e28:	1e5a      	subs	r2, r3, #1
    8e2a:	490b      	ldr	r1, [pc, #44]	; (8e58 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x44>)
    8e2c:	9b01      	ldr	r3, [sp, #4]
    8e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
    8e32:	4a0a      	ldr	r2, [pc, #40]	; (8e5c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x48>)
    8e34:	9b01      	ldr	r3, [sp, #4]
    8e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e3a:	f003 0301 	and.w	r3, r3, #1
    8e3e:	2b00      	cmp	r3, #0
    8e40:	d106      	bne.n	8e50 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x3c>
    8e42:	4a05      	ldr	r2, [pc, #20]	; (8e58 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x44>)
    8e44:	9b01      	ldr	r3, [sp, #4]
    8e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e4a:	2b00      	cmp	r3, #0
    8e4c:	d100      	bne.n	8e50 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8e4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8e50:	bf00      	nop
    8e52:	b003      	add	sp, #12
    8e54:	f85d fb04 	ldr.w	pc, [sp], #4
    8e58:	1fff90c4 	.word	0x1fff90c4
    8e5c:	1fff90c0 	.word	0x1fff90c0

00008e60 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30(void)
{
    8e60:	b500      	push	{lr}
    8e62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e64:	f7f7 feba 	bl	bdc <Sys_GetCoreID>
    8e68:	4603      	mov	r3, r0
    8e6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId])
    8e6c:	4a10      	ldr	r2, [pc, #64]	; (8eb0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x50>)
    8e6e:	9b01      	ldr	r3, [sp, #4]
    8e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e74:	2b00      	cmp	r3, #0
    8e76:	d10d      	bne.n	8e94 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8e78:	f7f7 fdcf 	bl	a1a <Gpt_schm_read_msr>
    8e7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8e7e:	9b00      	ldr	r3, [sp, #0]
    8e80:	f003 0301 	and.w	r3, r3, #1
    8e84:	2b00      	cmp	r3, #0
    8e86:	d100      	bne.n	8e8a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8e88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_30[u32CoreId] = msr;
    8e8a:	490a      	ldr	r1, [pc, #40]	; (8eb4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x54>)
    8e8c:	9b01      	ldr	r3, [sp, #4]
    8e8e:	9a00      	ldr	r2, [sp, #0]
    8e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId]++;
    8e94:	4a06      	ldr	r2, [pc, #24]	; (8eb0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x50>)
    8e96:	9b01      	ldr	r3, [sp, #4]
    8e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e9c:	1c5a      	adds	r2, r3, #1
    8e9e:	4904      	ldr	r1, [pc, #16]	; (8eb0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x50>)
    8ea0:	9b01      	ldr	r3, [sp, #4]
    8ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8ea6:	bf00      	nop
    8ea8:	b003      	add	sp, #12
    8eaa:	f85d fb04 	ldr.w	pc, [sp], #4
    8eae:	bf00      	nop
    8eb0:	1fff90cc 	.word	0x1fff90cc
    8eb4:	1fff90c8 	.word	0x1fff90c8

00008eb8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30(void)
{
    8eb8:	b500      	push	{lr}
    8eba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8ebc:	f7f7 fe8e 	bl	bdc <Sys_GetCoreID>
    8ec0:	4603      	mov	r3, r0
    8ec2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId]--;
    8ec4:	4a0d      	ldr	r2, [pc, #52]	; (8efc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x44>)
    8ec6:	9b01      	ldr	r3, [sp, #4]
    8ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ecc:	1e5a      	subs	r2, r3, #1
    8ece:	490b      	ldr	r1, [pc, #44]	; (8efc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x44>)
    8ed0:	9b01      	ldr	r3, [sp, #4]
    8ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
    8ed6:	4a0a      	ldr	r2, [pc, #40]	; (8f00 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x48>)
    8ed8:	9b01      	ldr	r3, [sp, #4]
    8eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ede:	f003 0301 	and.w	r3, r3, #1
    8ee2:	2b00      	cmp	r3, #0
    8ee4:	d106      	bne.n	8ef4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x3c>
    8ee6:	4a05      	ldr	r2, [pc, #20]	; (8efc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x44>)
    8ee8:	9b01      	ldr	r3, [sp, #4]
    8eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8eee:	2b00      	cmp	r3, #0
    8ef0:	d100      	bne.n	8ef4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8ef2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8ef4:	bf00      	nop
    8ef6:	b003      	add	sp, #12
    8ef8:	f85d fb04 	ldr.w	pc, [sp], #4
    8efc:	1fff90cc 	.word	0x1fff90cc
    8f00:	1fff90c8 	.word	0x1fff90c8

00008f04 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31(void)
{
    8f04:	b500      	push	{lr}
    8f06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f08:	f7f7 fe68 	bl	bdc <Sys_GetCoreID>
    8f0c:	4603      	mov	r3, r0
    8f0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId])
    8f10:	4a10      	ldr	r2, [pc, #64]	; (8f54 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x50>)
    8f12:	9b01      	ldr	r3, [sp, #4]
    8f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f18:	2b00      	cmp	r3, #0
    8f1a:	d10d      	bne.n	8f38 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8f1c:	f7f7 fd7d 	bl	a1a <Gpt_schm_read_msr>
    8f20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8f22:	9b00      	ldr	r3, [sp, #0]
    8f24:	f003 0301 	and.w	r3, r3, #1
    8f28:	2b00      	cmp	r3, #0
    8f2a:	d100      	bne.n	8f2e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8f2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_31[u32CoreId] = msr;
    8f2e:	490a      	ldr	r1, [pc, #40]	; (8f58 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x54>)
    8f30:	9b01      	ldr	r3, [sp, #4]
    8f32:	9a00      	ldr	r2, [sp, #0]
    8f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId]++;
    8f38:	4a06      	ldr	r2, [pc, #24]	; (8f54 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x50>)
    8f3a:	9b01      	ldr	r3, [sp, #4]
    8f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f40:	1c5a      	adds	r2, r3, #1
    8f42:	4904      	ldr	r1, [pc, #16]	; (8f54 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x50>)
    8f44:	9b01      	ldr	r3, [sp, #4]
    8f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8f4a:	bf00      	nop
    8f4c:	b003      	add	sp, #12
    8f4e:	f85d fb04 	ldr.w	pc, [sp], #4
    8f52:	bf00      	nop
    8f54:	1fff90d4 	.word	0x1fff90d4
    8f58:	1fff90d0 	.word	0x1fff90d0

00008f5c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31(void)
{
    8f5c:	b500      	push	{lr}
    8f5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f60:	f7f7 fe3c 	bl	bdc <Sys_GetCoreID>
    8f64:	4603      	mov	r3, r0
    8f66:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId]--;
    8f68:	4a0d      	ldr	r2, [pc, #52]	; (8fa0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x44>)
    8f6a:	9b01      	ldr	r3, [sp, #4]
    8f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f70:	1e5a      	subs	r2, r3, #1
    8f72:	490b      	ldr	r1, [pc, #44]	; (8fa0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x44>)
    8f74:	9b01      	ldr	r3, [sp, #4]
    8f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
    8f7a:	4a0a      	ldr	r2, [pc, #40]	; (8fa4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x48>)
    8f7c:	9b01      	ldr	r3, [sp, #4]
    8f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f82:	f003 0301 	and.w	r3, r3, #1
    8f86:	2b00      	cmp	r3, #0
    8f88:	d106      	bne.n	8f98 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x3c>
    8f8a:	4a05      	ldr	r2, [pc, #20]	; (8fa0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x44>)
    8f8c:	9b01      	ldr	r3, [sp, #4]
    8f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f92:	2b00      	cmp	r3, #0
    8f94:	d100      	bne.n	8f98 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8f96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8f98:	bf00      	nop
    8f9a:	b003      	add	sp, #12
    8f9c:	f85d fb04 	ldr.w	pc, [sp], #4
    8fa0:	1fff90d4 	.word	0x1fff90d4
    8fa4:	1fff90d0 	.word	0x1fff90d0

00008fa8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35(void)
{
    8fa8:	b500      	push	{lr}
    8faa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8fac:	f7f7 fe16 	bl	bdc <Sys_GetCoreID>
    8fb0:	4603      	mov	r3, r0
    8fb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId])
    8fb4:	4a10      	ldr	r2, [pc, #64]	; (8ff8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x50>)
    8fb6:	9b01      	ldr	r3, [sp, #4]
    8fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fbc:	2b00      	cmp	r3, #0
    8fbe:	d10d      	bne.n	8fdc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8fc0:	f7f7 fd2b 	bl	a1a <Gpt_schm_read_msr>
    8fc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8fc6:	9b00      	ldr	r3, [sp, #0]
    8fc8:	f003 0301 	and.w	r3, r3, #1
    8fcc:	2b00      	cmp	r3, #0
    8fce:	d100      	bne.n	8fd2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8fd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_35[u32CoreId] = msr;
    8fd2:	490a      	ldr	r1, [pc, #40]	; (8ffc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x54>)
    8fd4:	9b01      	ldr	r3, [sp, #4]
    8fd6:	9a00      	ldr	r2, [sp, #0]
    8fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId]++;
    8fdc:	4a06      	ldr	r2, [pc, #24]	; (8ff8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x50>)
    8fde:	9b01      	ldr	r3, [sp, #4]
    8fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fe4:	1c5a      	adds	r2, r3, #1
    8fe6:	4904      	ldr	r1, [pc, #16]	; (8ff8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x50>)
    8fe8:	9b01      	ldr	r3, [sp, #4]
    8fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8fee:	bf00      	nop
    8ff0:	b003      	add	sp, #12
    8ff2:	f85d fb04 	ldr.w	pc, [sp], #4
    8ff6:	bf00      	nop
    8ff8:	1fff90dc 	.word	0x1fff90dc
    8ffc:	1fff90d8 	.word	0x1fff90d8

00009000 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35(void)
{
    9000:	b500      	push	{lr}
    9002:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9004:	f7f7 fdea 	bl	bdc <Sys_GetCoreID>
    9008:	4603      	mov	r3, r0
    900a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId]--;
    900c:	4a0d      	ldr	r2, [pc, #52]	; (9044 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x44>)
    900e:	9b01      	ldr	r3, [sp, #4]
    9010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9014:	1e5a      	subs	r2, r3, #1
    9016:	490b      	ldr	r1, [pc, #44]	; (9044 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x44>)
    9018:	9b01      	ldr	r3, [sp, #4]
    901a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
    901e:	4a0a      	ldr	r2, [pc, #40]	; (9048 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x48>)
    9020:	9b01      	ldr	r3, [sp, #4]
    9022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9026:	f003 0301 	and.w	r3, r3, #1
    902a:	2b00      	cmp	r3, #0
    902c:	d106      	bne.n	903c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x3c>
    902e:	4a05      	ldr	r2, [pc, #20]	; (9044 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x44>)
    9030:	9b01      	ldr	r3, [sp, #4]
    9032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9036:	2b00      	cmp	r3, #0
    9038:	d100      	bne.n	903c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    903a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    903c:	bf00      	nop
    903e:	b003      	add	sp, #12
    9040:	f85d fb04 	ldr.w	pc, [sp], #4
    9044:	1fff90dc 	.word	0x1fff90dc
    9048:	1fff90d8 	.word	0x1fff90d8

0000904c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36(void)
{
    904c:	b500      	push	{lr}
    904e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9050:	f7f7 fdc4 	bl	bdc <Sys_GetCoreID>
    9054:	4603      	mov	r3, r0
    9056:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId])
    9058:	4a10      	ldr	r2, [pc, #64]	; (909c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x50>)
    905a:	9b01      	ldr	r3, [sp, #4]
    905c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9060:	2b00      	cmp	r3, #0
    9062:	d10d      	bne.n	9080 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9064:	f7f7 fcd9 	bl	a1a <Gpt_schm_read_msr>
    9068:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    906a:	9b00      	ldr	r3, [sp, #0]
    906c:	f003 0301 	and.w	r3, r3, #1
    9070:	2b00      	cmp	r3, #0
    9072:	d100      	bne.n	9076 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9074:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_36[u32CoreId] = msr;
    9076:	490a      	ldr	r1, [pc, #40]	; (90a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x54>)
    9078:	9b01      	ldr	r3, [sp, #4]
    907a:	9a00      	ldr	r2, [sp, #0]
    907c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId]++;
    9080:	4a06      	ldr	r2, [pc, #24]	; (909c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x50>)
    9082:	9b01      	ldr	r3, [sp, #4]
    9084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9088:	1c5a      	adds	r2, r3, #1
    908a:	4904      	ldr	r1, [pc, #16]	; (909c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x50>)
    908c:	9b01      	ldr	r3, [sp, #4]
    908e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9092:	bf00      	nop
    9094:	b003      	add	sp, #12
    9096:	f85d fb04 	ldr.w	pc, [sp], #4
    909a:	bf00      	nop
    909c:	1fff90e4 	.word	0x1fff90e4
    90a0:	1fff90e0 	.word	0x1fff90e0

000090a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36(void)
{
    90a4:	b500      	push	{lr}
    90a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    90a8:	f7f7 fd98 	bl	bdc <Sys_GetCoreID>
    90ac:	4603      	mov	r3, r0
    90ae:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId]--;
    90b0:	4a0d      	ldr	r2, [pc, #52]	; (90e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x44>)
    90b2:	9b01      	ldr	r3, [sp, #4]
    90b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90b8:	1e5a      	subs	r2, r3, #1
    90ba:	490b      	ldr	r1, [pc, #44]	; (90e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x44>)
    90bc:	9b01      	ldr	r3, [sp, #4]
    90be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
    90c2:	4a0a      	ldr	r2, [pc, #40]	; (90ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x48>)
    90c4:	9b01      	ldr	r3, [sp, #4]
    90c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90ca:	f003 0301 	and.w	r3, r3, #1
    90ce:	2b00      	cmp	r3, #0
    90d0:	d106      	bne.n	90e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x3c>
    90d2:	4a05      	ldr	r2, [pc, #20]	; (90e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x44>)
    90d4:	9b01      	ldr	r3, [sp, #4]
    90d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90da:	2b00      	cmp	r3, #0
    90dc:	d100      	bne.n	90e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    90de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    90e0:	bf00      	nop
    90e2:	b003      	add	sp, #12
    90e4:	f85d fb04 	ldr.w	pc, [sp], #4
    90e8:	1fff90e4 	.word	0x1fff90e4
    90ec:	1fff90e0 	.word	0x1fff90e0

000090f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38(void)
{
    90f0:	b500      	push	{lr}
    90f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    90f4:	f7f7 fd72 	bl	bdc <Sys_GetCoreID>
    90f8:	4603      	mov	r3, r0
    90fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId])
    90fc:	4a10      	ldr	r2, [pc, #64]	; (9140 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x50>)
    90fe:	9b01      	ldr	r3, [sp, #4]
    9100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9104:	2b00      	cmp	r3, #0
    9106:	d10d      	bne.n	9124 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9108:	f7f7 fc87 	bl	a1a <Gpt_schm_read_msr>
    910c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    910e:	9b00      	ldr	r3, [sp, #0]
    9110:	f003 0301 	and.w	r3, r3, #1
    9114:	2b00      	cmp	r3, #0
    9116:	d100      	bne.n	911a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9118:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_38[u32CoreId] = msr;
    911a:	490a      	ldr	r1, [pc, #40]	; (9144 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x54>)
    911c:	9b01      	ldr	r3, [sp, #4]
    911e:	9a00      	ldr	r2, [sp, #0]
    9120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId]++;
    9124:	4a06      	ldr	r2, [pc, #24]	; (9140 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x50>)
    9126:	9b01      	ldr	r3, [sp, #4]
    9128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    912c:	1c5a      	adds	r2, r3, #1
    912e:	4904      	ldr	r1, [pc, #16]	; (9140 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x50>)
    9130:	9b01      	ldr	r3, [sp, #4]
    9132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9136:	bf00      	nop
    9138:	b003      	add	sp, #12
    913a:	f85d fb04 	ldr.w	pc, [sp], #4
    913e:	bf00      	nop
    9140:	1fff90ec 	.word	0x1fff90ec
    9144:	1fff90e8 	.word	0x1fff90e8

00009148 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38(void)
{
    9148:	b500      	push	{lr}
    914a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    914c:	f7f7 fd46 	bl	bdc <Sys_GetCoreID>
    9150:	4603      	mov	r3, r0
    9152:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId]--;
    9154:	4a0d      	ldr	r2, [pc, #52]	; (918c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x44>)
    9156:	9b01      	ldr	r3, [sp, #4]
    9158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    915c:	1e5a      	subs	r2, r3, #1
    915e:	490b      	ldr	r1, [pc, #44]	; (918c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x44>)
    9160:	9b01      	ldr	r3, [sp, #4]
    9162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
    9166:	4a0a      	ldr	r2, [pc, #40]	; (9190 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x48>)
    9168:	9b01      	ldr	r3, [sp, #4]
    916a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    916e:	f003 0301 	and.w	r3, r3, #1
    9172:	2b00      	cmp	r3, #0
    9174:	d106      	bne.n	9184 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x3c>
    9176:	4a05      	ldr	r2, [pc, #20]	; (918c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x44>)
    9178:	9b01      	ldr	r3, [sp, #4]
    917a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    917e:	2b00      	cmp	r3, #0
    9180:	d100      	bne.n	9184 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9182:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9184:	bf00      	nop
    9186:	b003      	add	sp, #12
    9188:	f85d fb04 	ldr.w	pc, [sp], #4
    918c:	1fff90ec 	.word	0x1fff90ec
    9190:	1fff90e8 	.word	0x1fff90e8

00009194 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39(void)
{
    9194:	b500      	push	{lr}
    9196:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9198:	f7f7 fd20 	bl	bdc <Sys_GetCoreID>
    919c:	4603      	mov	r3, r0
    919e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId])
    91a0:	4a10      	ldr	r2, [pc, #64]	; (91e4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x50>)
    91a2:	9b01      	ldr	r3, [sp, #4]
    91a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91a8:	2b00      	cmp	r3, #0
    91aa:	d10d      	bne.n	91c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    91ac:	f7f7 fc35 	bl	a1a <Gpt_schm_read_msr>
    91b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    91b2:	9b00      	ldr	r3, [sp, #0]
    91b4:	f003 0301 	and.w	r3, r3, #1
    91b8:	2b00      	cmp	r3, #0
    91ba:	d100      	bne.n	91be <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    91bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_39[u32CoreId] = msr;
    91be:	490a      	ldr	r1, [pc, #40]	; (91e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x54>)
    91c0:	9b01      	ldr	r3, [sp, #4]
    91c2:	9a00      	ldr	r2, [sp, #0]
    91c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId]++;
    91c8:	4a06      	ldr	r2, [pc, #24]	; (91e4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x50>)
    91ca:	9b01      	ldr	r3, [sp, #4]
    91cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91d0:	1c5a      	adds	r2, r3, #1
    91d2:	4904      	ldr	r1, [pc, #16]	; (91e4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x50>)
    91d4:	9b01      	ldr	r3, [sp, #4]
    91d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    91da:	bf00      	nop
    91dc:	b003      	add	sp, #12
    91de:	f85d fb04 	ldr.w	pc, [sp], #4
    91e2:	bf00      	nop
    91e4:	1fff90f4 	.word	0x1fff90f4
    91e8:	1fff90f0 	.word	0x1fff90f0

000091ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39(void)
{
    91ec:	b500      	push	{lr}
    91ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    91f0:	f7f7 fcf4 	bl	bdc <Sys_GetCoreID>
    91f4:	4603      	mov	r3, r0
    91f6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId]--;
    91f8:	4a0d      	ldr	r2, [pc, #52]	; (9230 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x44>)
    91fa:	9b01      	ldr	r3, [sp, #4]
    91fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9200:	1e5a      	subs	r2, r3, #1
    9202:	490b      	ldr	r1, [pc, #44]	; (9230 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x44>)
    9204:	9b01      	ldr	r3, [sp, #4]
    9206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
    920a:	4a0a      	ldr	r2, [pc, #40]	; (9234 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x48>)
    920c:	9b01      	ldr	r3, [sp, #4]
    920e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9212:	f003 0301 	and.w	r3, r3, #1
    9216:	2b00      	cmp	r3, #0
    9218:	d106      	bne.n	9228 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x3c>
    921a:	4a05      	ldr	r2, [pc, #20]	; (9230 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x44>)
    921c:	9b01      	ldr	r3, [sp, #4]
    921e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9222:	2b00      	cmp	r3, #0
    9224:	d100      	bne.n	9228 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9226:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9228:	bf00      	nop
    922a:	b003      	add	sp, #12
    922c:	f85d fb04 	ldr.w	pc, [sp], #4
    9230:	1fff90f4 	.word	0x1fff90f4
    9234:	1fff90f0 	.word	0x1fff90f0

00009238 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40(void)
{
    9238:	b500      	push	{lr}
    923a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    923c:	f7f7 fcce 	bl	bdc <Sys_GetCoreID>
    9240:	4603      	mov	r3, r0
    9242:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId])
    9244:	4a10      	ldr	r2, [pc, #64]	; (9288 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x50>)
    9246:	9b01      	ldr	r3, [sp, #4]
    9248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    924c:	2b00      	cmp	r3, #0
    924e:	d10d      	bne.n	926c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9250:	f7f7 fbe3 	bl	a1a <Gpt_schm_read_msr>
    9254:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9256:	9b00      	ldr	r3, [sp, #0]
    9258:	f003 0301 	and.w	r3, r3, #1
    925c:	2b00      	cmp	r3, #0
    925e:	d100      	bne.n	9262 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9260:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_40[u32CoreId] = msr;
    9262:	490a      	ldr	r1, [pc, #40]	; (928c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x54>)
    9264:	9b01      	ldr	r3, [sp, #4]
    9266:	9a00      	ldr	r2, [sp, #0]
    9268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId]++;
    926c:	4a06      	ldr	r2, [pc, #24]	; (9288 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x50>)
    926e:	9b01      	ldr	r3, [sp, #4]
    9270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9274:	1c5a      	adds	r2, r3, #1
    9276:	4904      	ldr	r1, [pc, #16]	; (9288 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x50>)
    9278:	9b01      	ldr	r3, [sp, #4]
    927a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    927e:	bf00      	nop
    9280:	b003      	add	sp, #12
    9282:	f85d fb04 	ldr.w	pc, [sp], #4
    9286:	bf00      	nop
    9288:	1fff90fc 	.word	0x1fff90fc
    928c:	1fff90f8 	.word	0x1fff90f8

00009290 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40(void)
{
    9290:	b500      	push	{lr}
    9292:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9294:	f7f7 fca2 	bl	bdc <Sys_GetCoreID>
    9298:	4603      	mov	r3, r0
    929a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId]--;
    929c:	4a0d      	ldr	r2, [pc, #52]	; (92d4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x44>)
    929e:	9b01      	ldr	r3, [sp, #4]
    92a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92a4:	1e5a      	subs	r2, r3, #1
    92a6:	490b      	ldr	r1, [pc, #44]	; (92d4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x44>)
    92a8:	9b01      	ldr	r3, [sp, #4]
    92aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
    92ae:	4a0a      	ldr	r2, [pc, #40]	; (92d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x48>)
    92b0:	9b01      	ldr	r3, [sp, #4]
    92b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92b6:	f003 0301 	and.w	r3, r3, #1
    92ba:	2b00      	cmp	r3, #0
    92bc:	d106      	bne.n	92cc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x3c>
    92be:	4a05      	ldr	r2, [pc, #20]	; (92d4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x44>)
    92c0:	9b01      	ldr	r3, [sp, #4]
    92c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92c6:	2b00      	cmp	r3, #0
    92c8:	d100      	bne.n	92cc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    92ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    92cc:	bf00      	nop
    92ce:	b003      	add	sp, #12
    92d0:	f85d fb04 	ldr.w	pc, [sp], #4
    92d4:	1fff90fc 	.word	0x1fff90fc
    92d8:	1fff90f8 	.word	0x1fff90f8

000092dc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41(void)
{
    92dc:	b500      	push	{lr}
    92de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    92e0:	f7f7 fc7c 	bl	bdc <Sys_GetCoreID>
    92e4:	4603      	mov	r3, r0
    92e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId])
    92e8:	4a10      	ldr	r2, [pc, #64]	; (932c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x50>)
    92ea:	9b01      	ldr	r3, [sp, #4]
    92ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92f0:	2b00      	cmp	r3, #0
    92f2:	d10d      	bne.n	9310 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    92f4:	f7f7 fb91 	bl	a1a <Gpt_schm_read_msr>
    92f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    92fa:	9b00      	ldr	r3, [sp, #0]
    92fc:	f003 0301 	and.w	r3, r3, #1
    9300:	2b00      	cmp	r3, #0
    9302:	d100      	bne.n	9306 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9304:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_41[u32CoreId] = msr;
    9306:	490a      	ldr	r1, [pc, #40]	; (9330 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x54>)
    9308:	9b01      	ldr	r3, [sp, #4]
    930a:	9a00      	ldr	r2, [sp, #0]
    930c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId]++;
    9310:	4a06      	ldr	r2, [pc, #24]	; (932c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x50>)
    9312:	9b01      	ldr	r3, [sp, #4]
    9314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9318:	1c5a      	adds	r2, r3, #1
    931a:	4904      	ldr	r1, [pc, #16]	; (932c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x50>)
    931c:	9b01      	ldr	r3, [sp, #4]
    931e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9322:	bf00      	nop
    9324:	b003      	add	sp, #12
    9326:	f85d fb04 	ldr.w	pc, [sp], #4
    932a:	bf00      	nop
    932c:	1fff9104 	.word	0x1fff9104
    9330:	1fff9100 	.word	0x1fff9100

00009334 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41(void)
{
    9334:	b500      	push	{lr}
    9336:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9338:	f7f7 fc50 	bl	bdc <Sys_GetCoreID>
    933c:	4603      	mov	r3, r0
    933e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId]--;
    9340:	4a0d      	ldr	r2, [pc, #52]	; (9378 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x44>)
    9342:	9b01      	ldr	r3, [sp, #4]
    9344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9348:	1e5a      	subs	r2, r3, #1
    934a:	490b      	ldr	r1, [pc, #44]	; (9378 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x44>)
    934c:	9b01      	ldr	r3, [sp, #4]
    934e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
    9352:	4a0a      	ldr	r2, [pc, #40]	; (937c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x48>)
    9354:	9b01      	ldr	r3, [sp, #4]
    9356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    935a:	f003 0301 	and.w	r3, r3, #1
    935e:	2b00      	cmp	r3, #0
    9360:	d106      	bne.n	9370 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x3c>
    9362:	4a05      	ldr	r2, [pc, #20]	; (9378 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x44>)
    9364:	9b01      	ldr	r3, [sp, #4]
    9366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    936a:	2b00      	cmp	r3, #0
    936c:	d100      	bne.n	9370 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    936e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9370:	bf00      	nop
    9372:	b003      	add	sp, #12
    9374:	f85d fb04 	ldr.w	pc, [sp], #4
    9378:	1fff9104 	.word	0x1fff9104
    937c:	1fff9100 	.word	0x1fff9100

00009380 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42(void)
{
    9380:	b500      	push	{lr}
    9382:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9384:	f7f7 fc2a 	bl	bdc <Sys_GetCoreID>
    9388:	4603      	mov	r3, r0
    938a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId])
    938c:	4a10      	ldr	r2, [pc, #64]	; (93d0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x50>)
    938e:	9b01      	ldr	r3, [sp, #4]
    9390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9394:	2b00      	cmp	r3, #0
    9396:	d10d      	bne.n	93b4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9398:	f7f7 fb3f 	bl	a1a <Gpt_schm_read_msr>
    939c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    939e:	9b00      	ldr	r3, [sp, #0]
    93a0:	f003 0301 	and.w	r3, r3, #1
    93a4:	2b00      	cmp	r3, #0
    93a6:	d100      	bne.n	93aa <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    93a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_42[u32CoreId] = msr;
    93aa:	490a      	ldr	r1, [pc, #40]	; (93d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x54>)
    93ac:	9b01      	ldr	r3, [sp, #4]
    93ae:	9a00      	ldr	r2, [sp, #0]
    93b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId]++;
    93b4:	4a06      	ldr	r2, [pc, #24]	; (93d0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x50>)
    93b6:	9b01      	ldr	r3, [sp, #4]
    93b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93bc:	1c5a      	adds	r2, r3, #1
    93be:	4904      	ldr	r1, [pc, #16]	; (93d0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x50>)
    93c0:	9b01      	ldr	r3, [sp, #4]
    93c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    93c6:	bf00      	nop
    93c8:	b003      	add	sp, #12
    93ca:	f85d fb04 	ldr.w	pc, [sp], #4
    93ce:	bf00      	nop
    93d0:	1fff910c 	.word	0x1fff910c
    93d4:	1fff9108 	.word	0x1fff9108

000093d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42(void)
{
    93d8:	b500      	push	{lr}
    93da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    93dc:	f7f7 fbfe 	bl	bdc <Sys_GetCoreID>
    93e0:	4603      	mov	r3, r0
    93e2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId]--;
    93e4:	4a0d      	ldr	r2, [pc, #52]	; (941c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x44>)
    93e6:	9b01      	ldr	r3, [sp, #4]
    93e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93ec:	1e5a      	subs	r2, r3, #1
    93ee:	490b      	ldr	r1, [pc, #44]	; (941c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x44>)
    93f0:	9b01      	ldr	r3, [sp, #4]
    93f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
    93f6:	4a0a      	ldr	r2, [pc, #40]	; (9420 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x48>)
    93f8:	9b01      	ldr	r3, [sp, #4]
    93fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93fe:	f003 0301 	and.w	r3, r3, #1
    9402:	2b00      	cmp	r3, #0
    9404:	d106      	bne.n	9414 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x3c>
    9406:	4a05      	ldr	r2, [pc, #20]	; (941c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x44>)
    9408:	9b01      	ldr	r3, [sp, #4]
    940a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    940e:	2b00      	cmp	r3, #0
    9410:	d100      	bne.n	9414 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9412:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9414:	bf00      	nop
    9416:	b003      	add	sp, #12
    9418:	f85d fb04 	ldr.w	pc, [sp], #4
    941c:	1fff910c 	.word	0x1fff910c
    9420:	1fff9108 	.word	0x1fff9108

00009424 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43(void)
{
    9424:	b500      	push	{lr}
    9426:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9428:	f7f7 fbd8 	bl	bdc <Sys_GetCoreID>
    942c:	4603      	mov	r3, r0
    942e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId])
    9430:	4a10      	ldr	r2, [pc, #64]	; (9474 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x50>)
    9432:	9b01      	ldr	r3, [sp, #4]
    9434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9438:	2b00      	cmp	r3, #0
    943a:	d10d      	bne.n	9458 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    943c:	f7f7 faed 	bl	a1a <Gpt_schm_read_msr>
    9440:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9442:	9b00      	ldr	r3, [sp, #0]
    9444:	f003 0301 	and.w	r3, r3, #1
    9448:	2b00      	cmp	r3, #0
    944a:	d100      	bne.n	944e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    944c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_43[u32CoreId] = msr;
    944e:	490a      	ldr	r1, [pc, #40]	; (9478 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x54>)
    9450:	9b01      	ldr	r3, [sp, #4]
    9452:	9a00      	ldr	r2, [sp, #0]
    9454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId]++;
    9458:	4a06      	ldr	r2, [pc, #24]	; (9474 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x50>)
    945a:	9b01      	ldr	r3, [sp, #4]
    945c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9460:	1c5a      	adds	r2, r3, #1
    9462:	4904      	ldr	r1, [pc, #16]	; (9474 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x50>)
    9464:	9b01      	ldr	r3, [sp, #4]
    9466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    946a:	bf00      	nop
    946c:	b003      	add	sp, #12
    946e:	f85d fb04 	ldr.w	pc, [sp], #4
    9472:	bf00      	nop
    9474:	1fff9114 	.word	0x1fff9114
    9478:	1fff9110 	.word	0x1fff9110

0000947c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43(void)
{
    947c:	b500      	push	{lr}
    947e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9480:	f7f7 fbac 	bl	bdc <Sys_GetCoreID>
    9484:	4603      	mov	r3, r0
    9486:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId]--;
    9488:	4a0d      	ldr	r2, [pc, #52]	; (94c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x44>)
    948a:	9b01      	ldr	r3, [sp, #4]
    948c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9490:	1e5a      	subs	r2, r3, #1
    9492:	490b      	ldr	r1, [pc, #44]	; (94c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x44>)
    9494:	9b01      	ldr	r3, [sp, #4]
    9496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
    949a:	4a0a      	ldr	r2, [pc, #40]	; (94c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x48>)
    949c:	9b01      	ldr	r3, [sp, #4]
    949e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94a2:	f003 0301 	and.w	r3, r3, #1
    94a6:	2b00      	cmp	r3, #0
    94a8:	d106      	bne.n	94b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x3c>
    94aa:	4a05      	ldr	r2, [pc, #20]	; (94c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x44>)
    94ac:	9b01      	ldr	r3, [sp, #4]
    94ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94b2:	2b00      	cmp	r3, #0
    94b4:	d100      	bne.n	94b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    94b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    94b8:	bf00      	nop
    94ba:	b003      	add	sp, #12
    94bc:	f85d fb04 	ldr.w	pc, [sp], #4
    94c0:	1fff9114 	.word	0x1fff9114
    94c4:	1fff9110 	.word	0x1fff9110

000094c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44(void)
{
    94c8:	b500      	push	{lr}
    94ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    94cc:	f7f7 fb86 	bl	bdc <Sys_GetCoreID>
    94d0:	4603      	mov	r3, r0
    94d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId])
    94d4:	4a10      	ldr	r2, [pc, #64]	; (9518 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x50>)
    94d6:	9b01      	ldr	r3, [sp, #4]
    94d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94dc:	2b00      	cmp	r3, #0
    94de:	d10d      	bne.n	94fc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    94e0:	f7f7 fa9b 	bl	a1a <Gpt_schm_read_msr>
    94e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    94e6:	9b00      	ldr	r3, [sp, #0]
    94e8:	f003 0301 	and.w	r3, r3, #1
    94ec:	2b00      	cmp	r3, #0
    94ee:	d100      	bne.n	94f2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    94f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_44[u32CoreId] = msr;
    94f2:	490a      	ldr	r1, [pc, #40]	; (951c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x54>)
    94f4:	9b01      	ldr	r3, [sp, #4]
    94f6:	9a00      	ldr	r2, [sp, #0]
    94f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId]++;
    94fc:	4a06      	ldr	r2, [pc, #24]	; (9518 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x50>)
    94fe:	9b01      	ldr	r3, [sp, #4]
    9500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9504:	1c5a      	adds	r2, r3, #1
    9506:	4904      	ldr	r1, [pc, #16]	; (9518 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x50>)
    9508:	9b01      	ldr	r3, [sp, #4]
    950a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    950e:	bf00      	nop
    9510:	b003      	add	sp, #12
    9512:	f85d fb04 	ldr.w	pc, [sp], #4
    9516:	bf00      	nop
    9518:	1fff911c 	.word	0x1fff911c
    951c:	1fff9118 	.word	0x1fff9118

00009520 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44(void)
{
    9520:	b500      	push	{lr}
    9522:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9524:	f7f7 fb5a 	bl	bdc <Sys_GetCoreID>
    9528:	4603      	mov	r3, r0
    952a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId]--;
    952c:	4a0d      	ldr	r2, [pc, #52]	; (9564 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x44>)
    952e:	9b01      	ldr	r3, [sp, #4]
    9530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9534:	1e5a      	subs	r2, r3, #1
    9536:	490b      	ldr	r1, [pc, #44]	; (9564 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x44>)
    9538:	9b01      	ldr	r3, [sp, #4]
    953a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
    953e:	4a0a      	ldr	r2, [pc, #40]	; (9568 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x48>)
    9540:	9b01      	ldr	r3, [sp, #4]
    9542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9546:	f003 0301 	and.w	r3, r3, #1
    954a:	2b00      	cmp	r3, #0
    954c:	d106      	bne.n	955c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x3c>
    954e:	4a05      	ldr	r2, [pc, #20]	; (9564 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x44>)
    9550:	9b01      	ldr	r3, [sp, #4]
    9552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9556:	2b00      	cmp	r3, #0
    9558:	d100      	bne.n	955c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    955a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    955c:	bf00      	nop
    955e:	b003      	add	sp, #12
    9560:	f85d fb04 	ldr.w	pc, [sp], #4
    9564:	1fff911c 	.word	0x1fff911c
    9568:	1fff9118 	.word	0x1fff9118

0000956c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45(void)
{
    956c:	b500      	push	{lr}
    956e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9570:	f7f7 fb34 	bl	bdc <Sys_GetCoreID>
    9574:	4603      	mov	r3, r0
    9576:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId])
    9578:	4a10      	ldr	r2, [pc, #64]	; (95bc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x50>)
    957a:	9b01      	ldr	r3, [sp, #4]
    957c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9580:	2b00      	cmp	r3, #0
    9582:	d10d      	bne.n	95a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9584:	f7f7 fa49 	bl	a1a <Gpt_schm_read_msr>
    9588:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    958a:	9b00      	ldr	r3, [sp, #0]
    958c:	f003 0301 	and.w	r3, r3, #1
    9590:	2b00      	cmp	r3, #0
    9592:	d100      	bne.n	9596 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9594:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_45[u32CoreId] = msr;
    9596:	490a      	ldr	r1, [pc, #40]	; (95c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x54>)
    9598:	9b01      	ldr	r3, [sp, #4]
    959a:	9a00      	ldr	r2, [sp, #0]
    959c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId]++;
    95a0:	4a06      	ldr	r2, [pc, #24]	; (95bc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x50>)
    95a2:	9b01      	ldr	r3, [sp, #4]
    95a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95a8:	1c5a      	adds	r2, r3, #1
    95aa:	4904      	ldr	r1, [pc, #16]	; (95bc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x50>)
    95ac:	9b01      	ldr	r3, [sp, #4]
    95ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    95b2:	bf00      	nop
    95b4:	b003      	add	sp, #12
    95b6:	f85d fb04 	ldr.w	pc, [sp], #4
    95ba:	bf00      	nop
    95bc:	1fff9124 	.word	0x1fff9124
    95c0:	1fff9120 	.word	0x1fff9120

000095c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45(void)
{
    95c4:	b500      	push	{lr}
    95c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    95c8:	f7f7 fb08 	bl	bdc <Sys_GetCoreID>
    95cc:	4603      	mov	r3, r0
    95ce:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId]--;
    95d0:	4a0d      	ldr	r2, [pc, #52]	; (9608 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x44>)
    95d2:	9b01      	ldr	r3, [sp, #4]
    95d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95d8:	1e5a      	subs	r2, r3, #1
    95da:	490b      	ldr	r1, [pc, #44]	; (9608 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x44>)
    95dc:	9b01      	ldr	r3, [sp, #4]
    95de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
    95e2:	4a0a      	ldr	r2, [pc, #40]	; (960c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x48>)
    95e4:	9b01      	ldr	r3, [sp, #4]
    95e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95ea:	f003 0301 	and.w	r3, r3, #1
    95ee:	2b00      	cmp	r3, #0
    95f0:	d106      	bne.n	9600 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x3c>
    95f2:	4a05      	ldr	r2, [pc, #20]	; (9608 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x44>)
    95f4:	9b01      	ldr	r3, [sp, #4]
    95f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95fa:	2b00      	cmp	r3, #0
    95fc:	d100      	bne.n	9600 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    95fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9600:	bf00      	nop
    9602:	b003      	add	sp, #12
    9604:	f85d fb04 	ldr.w	pc, [sp], #4
    9608:	1fff9124 	.word	0x1fff9124
    960c:	1fff9120 	.word	0x1fff9120

00009610 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46(void)
{
    9610:	b500      	push	{lr}
    9612:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9614:	f7f7 fae2 	bl	bdc <Sys_GetCoreID>
    9618:	4603      	mov	r3, r0
    961a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId])
    961c:	4a10      	ldr	r2, [pc, #64]	; (9660 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x50>)
    961e:	9b01      	ldr	r3, [sp, #4]
    9620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9624:	2b00      	cmp	r3, #0
    9626:	d10d      	bne.n	9644 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9628:	f7f7 f9f7 	bl	a1a <Gpt_schm_read_msr>
    962c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    962e:	9b00      	ldr	r3, [sp, #0]
    9630:	f003 0301 	and.w	r3, r3, #1
    9634:	2b00      	cmp	r3, #0
    9636:	d100      	bne.n	963a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9638:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_46[u32CoreId] = msr;
    963a:	490a      	ldr	r1, [pc, #40]	; (9664 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x54>)
    963c:	9b01      	ldr	r3, [sp, #4]
    963e:	9a00      	ldr	r2, [sp, #0]
    9640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId]++;
    9644:	4a06      	ldr	r2, [pc, #24]	; (9660 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x50>)
    9646:	9b01      	ldr	r3, [sp, #4]
    9648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    964c:	1c5a      	adds	r2, r3, #1
    964e:	4904      	ldr	r1, [pc, #16]	; (9660 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x50>)
    9650:	9b01      	ldr	r3, [sp, #4]
    9652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9656:	bf00      	nop
    9658:	b003      	add	sp, #12
    965a:	f85d fb04 	ldr.w	pc, [sp], #4
    965e:	bf00      	nop
    9660:	1fff912c 	.word	0x1fff912c
    9664:	1fff9128 	.word	0x1fff9128

00009668 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46(void)
{
    9668:	b500      	push	{lr}
    966a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    966c:	f7f7 fab6 	bl	bdc <Sys_GetCoreID>
    9670:	4603      	mov	r3, r0
    9672:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId]--;
    9674:	4a0d      	ldr	r2, [pc, #52]	; (96ac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x44>)
    9676:	9b01      	ldr	r3, [sp, #4]
    9678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    967c:	1e5a      	subs	r2, r3, #1
    967e:	490b      	ldr	r1, [pc, #44]	; (96ac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x44>)
    9680:	9b01      	ldr	r3, [sp, #4]
    9682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
    9686:	4a0a      	ldr	r2, [pc, #40]	; (96b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x48>)
    9688:	9b01      	ldr	r3, [sp, #4]
    968a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    968e:	f003 0301 	and.w	r3, r3, #1
    9692:	2b00      	cmp	r3, #0
    9694:	d106      	bne.n	96a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x3c>
    9696:	4a05      	ldr	r2, [pc, #20]	; (96ac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x44>)
    9698:	9b01      	ldr	r3, [sp, #4]
    969a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    969e:	2b00      	cmp	r3, #0
    96a0:	d100      	bne.n	96a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    96a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    96a4:	bf00      	nop
    96a6:	b003      	add	sp, #12
    96a8:	f85d fb04 	ldr.w	pc, [sp], #4
    96ac:	1fff912c 	.word	0x1fff912c
    96b0:	1fff9128 	.word	0x1fff9128

000096b4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50(void)
{
    96b4:	b500      	push	{lr}
    96b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    96b8:	f7f7 fa90 	bl	bdc <Sys_GetCoreID>
    96bc:	4603      	mov	r3, r0
    96be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId])
    96c0:	4a10      	ldr	r2, [pc, #64]	; (9704 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x50>)
    96c2:	9b01      	ldr	r3, [sp, #4]
    96c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96c8:	2b00      	cmp	r3, #0
    96ca:	d10d      	bne.n	96e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    96cc:	f7f7 f9a5 	bl	a1a <Gpt_schm_read_msr>
    96d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    96d2:	9b00      	ldr	r3, [sp, #0]
    96d4:	f003 0301 	and.w	r3, r3, #1
    96d8:	2b00      	cmp	r3, #0
    96da:	d100      	bne.n	96de <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    96dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_50[u32CoreId] = msr;
    96de:	490a      	ldr	r1, [pc, #40]	; (9708 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x54>)
    96e0:	9b01      	ldr	r3, [sp, #4]
    96e2:	9a00      	ldr	r2, [sp, #0]
    96e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId]++;
    96e8:	4a06      	ldr	r2, [pc, #24]	; (9704 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x50>)
    96ea:	9b01      	ldr	r3, [sp, #4]
    96ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96f0:	1c5a      	adds	r2, r3, #1
    96f2:	4904      	ldr	r1, [pc, #16]	; (9704 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x50>)
    96f4:	9b01      	ldr	r3, [sp, #4]
    96f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    96fa:	bf00      	nop
    96fc:	b003      	add	sp, #12
    96fe:	f85d fb04 	ldr.w	pc, [sp], #4
    9702:	bf00      	nop
    9704:	1fff9134 	.word	0x1fff9134
    9708:	1fff9130 	.word	0x1fff9130

0000970c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50(void)
{
    970c:	b500      	push	{lr}
    970e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9710:	f7f7 fa64 	bl	bdc <Sys_GetCoreID>
    9714:	4603      	mov	r3, r0
    9716:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId]--;
    9718:	4a0d      	ldr	r2, [pc, #52]	; (9750 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x44>)
    971a:	9b01      	ldr	r3, [sp, #4]
    971c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9720:	1e5a      	subs	r2, r3, #1
    9722:	490b      	ldr	r1, [pc, #44]	; (9750 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x44>)
    9724:	9b01      	ldr	r3, [sp, #4]
    9726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
    972a:	4a0a      	ldr	r2, [pc, #40]	; (9754 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x48>)
    972c:	9b01      	ldr	r3, [sp, #4]
    972e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9732:	f003 0301 	and.w	r3, r3, #1
    9736:	2b00      	cmp	r3, #0
    9738:	d106      	bne.n	9748 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x3c>
    973a:	4a05      	ldr	r2, [pc, #20]	; (9750 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x44>)
    973c:	9b01      	ldr	r3, [sp, #4]
    973e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9742:	2b00      	cmp	r3, #0
    9744:	d100      	bne.n	9748 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9746:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9748:	bf00      	nop
    974a:	b003      	add	sp, #12
    974c:	f85d fb04 	ldr.w	pc, [sp], #4
    9750:	1fff9134 	.word	0x1fff9134
    9754:	1fff9130 	.word	0x1fff9130

00009758 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51(void)
{
    9758:	b500      	push	{lr}
    975a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    975c:	f7f7 fa3e 	bl	bdc <Sys_GetCoreID>
    9760:	4603      	mov	r3, r0
    9762:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId])
    9764:	4a10      	ldr	r2, [pc, #64]	; (97a8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x50>)
    9766:	9b01      	ldr	r3, [sp, #4]
    9768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    976c:	2b00      	cmp	r3, #0
    976e:	d10d      	bne.n	978c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9770:	f7f7 f953 	bl	a1a <Gpt_schm_read_msr>
    9774:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9776:	9b00      	ldr	r3, [sp, #0]
    9778:	f003 0301 	and.w	r3, r3, #1
    977c:	2b00      	cmp	r3, #0
    977e:	d100      	bne.n	9782 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9780:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_51[u32CoreId] = msr;
    9782:	490a      	ldr	r1, [pc, #40]	; (97ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x54>)
    9784:	9b01      	ldr	r3, [sp, #4]
    9786:	9a00      	ldr	r2, [sp, #0]
    9788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId]++;
    978c:	4a06      	ldr	r2, [pc, #24]	; (97a8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x50>)
    978e:	9b01      	ldr	r3, [sp, #4]
    9790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9794:	1c5a      	adds	r2, r3, #1
    9796:	4904      	ldr	r1, [pc, #16]	; (97a8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x50>)
    9798:	9b01      	ldr	r3, [sp, #4]
    979a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    979e:	bf00      	nop
    97a0:	b003      	add	sp, #12
    97a2:	f85d fb04 	ldr.w	pc, [sp], #4
    97a6:	bf00      	nop
    97a8:	1fff913c 	.word	0x1fff913c
    97ac:	1fff9138 	.word	0x1fff9138

000097b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51(void)
{
    97b0:	b500      	push	{lr}
    97b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    97b4:	f7f7 fa12 	bl	bdc <Sys_GetCoreID>
    97b8:	4603      	mov	r3, r0
    97ba:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId]--;
    97bc:	4a0d      	ldr	r2, [pc, #52]	; (97f4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x44>)
    97be:	9b01      	ldr	r3, [sp, #4]
    97c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97c4:	1e5a      	subs	r2, r3, #1
    97c6:	490b      	ldr	r1, [pc, #44]	; (97f4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x44>)
    97c8:	9b01      	ldr	r3, [sp, #4]
    97ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
    97ce:	4a0a      	ldr	r2, [pc, #40]	; (97f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x48>)
    97d0:	9b01      	ldr	r3, [sp, #4]
    97d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97d6:	f003 0301 	and.w	r3, r3, #1
    97da:	2b00      	cmp	r3, #0
    97dc:	d106      	bne.n	97ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x3c>
    97de:	4a05      	ldr	r2, [pc, #20]	; (97f4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x44>)
    97e0:	9b01      	ldr	r3, [sp, #4]
    97e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97e6:	2b00      	cmp	r3, #0
    97e8:	d100      	bne.n	97ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    97ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    97ec:	bf00      	nop
    97ee:	b003      	add	sp, #12
    97f0:	f85d fb04 	ldr.w	pc, [sp], #4
    97f4:	1fff913c 	.word	0x1fff913c
    97f8:	1fff9138 	.word	0x1fff9138

000097fc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52(void)
{
    97fc:	b500      	push	{lr}
    97fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9800:	f7f7 f9ec 	bl	bdc <Sys_GetCoreID>
    9804:	4603      	mov	r3, r0
    9806:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId])
    9808:	4a10      	ldr	r2, [pc, #64]	; (984c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x50>)
    980a:	9b01      	ldr	r3, [sp, #4]
    980c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9810:	2b00      	cmp	r3, #0
    9812:	d10d      	bne.n	9830 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9814:	f7f7 f901 	bl	a1a <Gpt_schm_read_msr>
    9818:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    981a:	9b00      	ldr	r3, [sp, #0]
    981c:	f003 0301 	and.w	r3, r3, #1
    9820:	2b00      	cmp	r3, #0
    9822:	d100      	bne.n	9826 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9824:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_52[u32CoreId] = msr;
    9826:	490a      	ldr	r1, [pc, #40]	; (9850 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x54>)
    9828:	9b01      	ldr	r3, [sp, #4]
    982a:	9a00      	ldr	r2, [sp, #0]
    982c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId]++;
    9830:	4a06      	ldr	r2, [pc, #24]	; (984c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x50>)
    9832:	9b01      	ldr	r3, [sp, #4]
    9834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9838:	1c5a      	adds	r2, r3, #1
    983a:	4904      	ldr	r1, [pc, #16]	; (984c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x50>)
    983c:	9b01      	ldr	r3, [sp, #4]
    983e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9842:	bf00      	nop
    9844:	b003      	add	sp, #12
    9846:	f85d fb04 	ldr.w	pc, [sp], #4
    984a:	bf00      	nop
    984c:	1fff9144 	.word	0x1fff9144
    9850:	1fff9140 	.word	0x1fff9140

00009854 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52(void)
{
    9854:	b500      	push	{lr}
    9856:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9858:	f7f7 f9c0 	bl	bdc <Sys_GetCoreID>
    985c:	4603      	mov	r3, r0
    985e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId]--;
    9860:	4a0d      	ldr	r2, [pc, #52]	; (9898 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x44>)
    9862:	9b01      	ldr	r3, [sp, #4]
    9864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9868:	1e5a      	subs	r2, r3, #1
    986a:	490b      	ldr	r1, [pc, #44]	; (9898 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x44>)
    986c:	9b01      	ldr	r3, [sp, #4]
    986e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_52[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId]))         /*if interrupts were enabled*/
    9872:	4a0a      	ldr	r2, [pc, #40]	; (989c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x48>)
    9874:	9b01      	ldr	r3, [sp, #4]
    9876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    987a:	f003 0301 	and.w	r3, r3, #1
    987e:	2b00      	cmp	r3, #0
    9880:	d106      	bne.n	9890 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x3c>
    9882:	4a05      	ldr	r2, [pc, #20]	; (9898 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x44>)
    9884:	9b01      	ldr	r3, [sp, #4]
    9886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    988a:	2b00      	cmp	r3, #0
    988c:	d100      	bne.n	9890 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    988e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9890:	bf00      	nop
    9892:	b003      	add	sp, #12
    9894:	f85d fb04 	ldr.w	pc, [sp], #4
    9898:	1fff9144 	.word	0x1fff9144
    989c:	1fff9140 	.word	0x1fff9140

000098a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53(void)
{
    98a0:	b500      	push	{lr}
    98a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    98a4:	f7f7 f99a 	bl	bdc <Sys_GetCoreID>
    98a8:	4603      	mov	r3, r0
    98aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId])
    98ac:	4a10      	ldr	r2, [pc, #64]	; (98f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x50>)
    98ae:	9b01      	ldr	r3, [sp, #4]
    98b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98b4:	2b00      	cmp	r3, #0
    98b6:	d10d      	bne.n	98d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    98b8:	f7f7 f8af 	bl	a1a <Gpt_schm_read_msr>
    98bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    98be:	9b00      	ldr	r3, [sp, #0]
    98c0:	f003 0301 	and.w	r3, r3, #1
    98c4:	2b00      	cmp	r3, #0
    98c6:	d100      	bne.n	98ca <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    98c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_53[u32CoreId] = msr;
    98ca:	490a      	ldr	r1, [pc, #40]	; (98f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x54>)
    98cc:	9b01      	ldr	r3, [sp, #4]
    98ce:	9a00      	ldr	r2, [sp, #0]
    98d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId]++;
    98d4:	4a06      	ldr	r2, [pc, #24]	; (98f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x50>)
    98d6:	9b01      	ldr	r3, [sp, #4]
    98d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98dc:	1c5a      	adds	r2, r3, #1
    98de:	4904      	ldr	r1, [pc, #16]	; (98f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x50>)
    98e0:	9b01      	ldr	r3, [sp, #4]
    98e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    98e6:	bf00      	nop
    98e8:	b003      	add	sp, #12
    98ea:	f85d fb04 	ldr.w	pc, [sp], #4
    98ee:	bf00      	nop
    98f0:	1fff914c 	.word	0x1fff914c
    98f4:	1fff9148 	.word	0x1fff9148

000098f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53(void)
{
    98f8:	b500      	push	{lr}
    98fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    98fc:	f7f7 f96e 	bl	bdc <Sys_GetCoreID>
    9900:	4603      	mov	r3, r0
    9902:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId]--;
    9904:	4a0d      	ldr	r2, [pc, #52]	; (993c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x44>)
    9906:	9b01      	ldr	r3, [sp, #4]
    9908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    990c:	1e5a      	subs	r2, r3, #1
    990e:	490b      	ldr	r1, [pc, #44]	; (993c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x44>)
    9910:	9b01      	ldr	r3, [sp, #4]
    9912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_53[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId]))         /*if interrupts were enabled*/
    9916:	4a0a      	ldr	r2, [pc, #40]	; (9940 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x48>)
    9918:	9b01      	ldr	r3, [sp, #4]
    991a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    991e:	f003 0301 	and.w	r3, r3, #1
    9922:	2b00      	cmp	r3, #0
    9924:	d106      	bne.n	9934 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x3c>
    9926:	4a05      	ldr	r2, [pc, #20]	; (993c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x44>)
    9928:	9b01      	ldr	r3, [sp, #4]
    992a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    992e:	2b00      	cmp	r3, #0
    9930:	d100      	bne.n	9934 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9932:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9934:	bf00      	nop
    9936:	b003      	add	sp, #12
    9938:	f85d fb04 	ldr.w	pc, [sp], #4
    993c:	1fff914c 	.word	0x1fff914c
    9940:	1fff9148 	.word	0x1fff9148

00009944 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54(void)
{
    9944:	b500      	push	{lr}
    9946:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9948:	f7f7 f948 	bl	bdc <Sys_GetCoreID>
    994c:	4603      	mov	r3, r0
    994e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId])
    9950:	4a10      	ldr	r2, [pc, #64]	; (9994 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x50>)
    9952:	9b01      	ldr	r3, [sp, #4]
    9954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9958:	2b00      	cmp	r3, #0
    995a:	d10d      	bne.n	9978 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    995c:	f7f7 f85d 	bl	a1a <Gpt_schm_read_msr>
    9960:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9962:	9b00      	ldr	r3, [sp, #0]
    9964:	f003 0301 	and.w	r3, r3, #1
    9968:	2b00      	cmp	r3, #0
    996a:	d100      	bne.n	996e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    996c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_54[u32CoreId] = msr;
    996e:	490a      	ldr	r1, [pc, #40]	; (9998 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x54>)
    9970:	9b01      	ldr	r3, [sp, #4]
    9972:	9a00      	ldr	r2, [sp, #0]
    9974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId]++;
    9978:	4a06      	ldr	r2, [pc, #24]	; (9994 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x50>)
    997a:	9b01      	ldr	r3, [sp, #4]
    997c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9980:	1c5a      	adds	r2, r3, #1
    9982:	4904      	ldr	r1, [pc, #16]	; (9994 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x50>)
    9984:	9b01      	ldr	r3, [sp, #4]
    9986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    998a:	bf00      	nop
    998c:	b003      	add	sp, #12
    998e:	f85d fb04 	ldr.w	pc, [sp], #4
    9992:	bf00      	nop
    9994:	1fff9154 	.word	0x1fff9154
    9998:	1fff9150 	.word	0x1fff9150

0000999c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54(void)
{
    999c:	b500      	push	{lr}
    999e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    99a0:	f7f7 f91c 	bl	bdc <Sys_GetCoreID>
    99a4:	4603      	mov	r3, r0
    99a6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId]--;
    99a8:	4a0d      	ldr	r2, [pc, #52]	; (99e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x44>)
    99aa:	9b01      	ldr	r3, [sp, #4]
    99ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99b0:	1e5a      	subs	r2, r3, #1
    99b2:	490b      	ldr	r1, [pc, #44]	; (99e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x44>)
    99b4:	9b01      	ldr	r3, [sp, #4]
    99b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
    99ba:	4a0a      	ldr	r2, [pc, #40]	; (99e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x48>)
    99bc:	9b01      	ldr	r3, [sp, #4]
    99be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99c2:	f003 0301 	and.w	r3, r3, #1
    99c6:	2b00      	cmp	r3, #0
    99c8:	d106      	bne.n	99d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x3c>
    99ca:	4a05      	ldr	r2, [pc, #20]	; (99e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x44>)
    99cc:	9b01      	ldr	r3, [sp, #4]
    99ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99d2:	2b00      	cmp	r3, #0
    99d4:	d100      	bne.n	99d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    99d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    99d8:	bf00      	nop
    99da:	b003      	add	sp, #12
    99dc:	f85d fb04 	ldr.w	pc, [sp], #4
    99e0:	1fff9154 	.word	0x1fff9154
    99e4:	1fff9150 	.word	0x1fff9150

000099e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55(void)
{
    99e8:	b500      	push	{lr}
    99ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    99ec:	f7f7 f8f6 	bl	bdc <Sys_GetCoreID>
    99f0:	4603      	mov	r3, r0
    99f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId])
    99f4:	4a10      	ldr	r2, [pc, #64]	; (9a38 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x50>)
    99f6:	9b01      	ldr	r3, [sp, #4]
    99f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99fc:	2b00      	cmp	r3, #0
    99fe:	d10d      	bne.n	9a1c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9a00:	f7f7 f80b 	bl	a1a <Gpt_schm_read_msr>
    9a04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9a06:	9b00      	ldr	r3, [sp, #0]
    9a08:	f003 0301 	and.w	r3, r3, #1
    9a0c:	2b00      	cmp	r3, #0
    9a0e:	d100      	bne.n	9a12 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9a10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_55[u32CoreId] = msr;
    9a12:	490a      	ldr	r1, [pc, #40]	; (9a3c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x54>)
    9a14:	9b01      	ldr	r3, [sp, #4]
    9a16:	9a00      	ldr	r2, [sp, #0]
    9a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId]++;
    9a1c:	4a06      	ldr	r2, [pc, #24]	; (9a38 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x50>)
    9a1e:	9b01      	ldr	r3, [sp, #4]
    9a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a24:	1c5a      	adds	r2, r3, #1
    9a26:	4904      	ldr	r1, [pc, #16]	; (9a38 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x50>)
    9a28:	9b01      	ldr	r3, [sp, #4]
    9a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9a2e:	bf00      	nop
    9a30:	b003      	add	sp, #12
    9a32:	f85d fb04 	ldr.w	pc, [sp], #4
    9a36:	bf00      	nop
    9a38:	1fff915c 	.word	0x1fff915c
    9a3c:	1fff9158 	.word	0x1fff9158

00009a40 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55(void)
{
    9a40:	b500      	push	{lr}
    9a42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a44:	f7f7 f8ca 	bl	bdc <Sys_GetCoreID>
    9a48:	4603      	mov	r3, r0
    9a4a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId]--;
    9a4c:	4a0d      	ldr	r2, [pc, #52]	; (9a84 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x44>)
    9a4e:	9b01      	ldr	r3, [sp, #4]
    9a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a54:	1e5a      	subs	r2, r3, #1
    9a56:	490b      	ldr	r1, [pc, #44]	; (9a84 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x44>)
    9a58:	9b01      	ldr	r3, [sp, #4]
    9a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
    9a5e:	4a0a      	ldr	r2, [pc, #40]	; (9a88 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x48>)
    9a60:	9b01      	ldr	r3, [sp, #4]
    9a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a66:	f003 0301 	and.w	r3, r3, #1
    9a6a:	2b00      	cmp	r3, #0
    9a6c:	d106      	bne.n	9a7c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x3c>
    9a6e:	4a05      	ldr	r2, [pc, #20]	; (9a84 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x44>)
    9a70:	9b01      	ldr	r3, [sp, #4]
    9a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a76:	2b00      	cmp	r3, #0
    9a78:	d100      	bne.n	9a7c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9a7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9a7c:	bf00      	nop
    9a7e:	b003      	add	sp, #12
    9a80:	f85d fb04 	ldr.w	pc, [sp], #4
    9a84:	1fff915c 	.word	0x1fff915c
    9a88:	1fff9158 	.word	0x1fff9158

00009a8c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56(void)
{
    9a8c:	b500      	push	{lr}
    9a8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a90:	f7f7 f8a4 	bl	bdc <Sys_GetCoreID>
    9a94:	4603      	mov	r3, r0
    9a96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId])
    9a98:	4a10      	ldr	r2, [pc, #64]	; (9adc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x50>)
    9a9a:	9b01      	ldr	r3, [sp, #4]
    9a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aa0:	2b00      	cmp	r3, #0
    9aa2:	d10d      	bne.n	9ac0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9aa4:	f7f6 ffb9 	bl	a1a <Gpt_schm_read_msr>
    9aa8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9aaa:	9b00      	ldr	r3, [sp, #0]
    9aac:	f003 0301 	and.w	r3, r3, #1
    9ab0:	2b00      	cmp	r3, #0
    9ab2:	d100      	bne.n	9ab6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9ab4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_56[u32CoreId] = msr;
    9ab6:	490a      	ldr	r1, [pc, #40]	; (9ae0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x54>)
    9ab8:	9b01      	ldr	r3, [sp, #4]
    9aba:	9a00      	ldr	r2, [sp, #0]
    9abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId]++;
    9ac0:	4a06      	ldr	r2, [pc, #24]	; (9adc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x50>)
    9ac2:	9b01      	ldr	r3, [sp, #4]
    9ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ac8:	1c5a      	adds	r2, r3, #1
    9aca:	4904      	ldr	r1, [pc, #16]	; (9adc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x50>)
    9acc:	9b01      	ldr	r3, [sp, #4]
    9ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9ad2:	bf00      	nop
    9ad4:	b003      	add	sp, #12
    9ad6:	f85d fb04 	ldr.w	pc, [sp], #4
    9ada:	bf00      	nop
    9adc:	1fff9164 	.word	0x1fff9164
    9ae0:	1fff9160 	.word	0x1fff9160

00009ae4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56(void)
{
    9ae4:	b500      	push	{lr}
    9ae6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9ae8:	f7f7 f878 	bl	bdc <Sys_GetCoreID>
    9aec:	4603      	mov	r3, r0
    9aee:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId]--;
    9af0:	4a0d      	ldr	r2, [pc, #52]	; (9b28 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x44>)
    9af2:	9b01      	ldr	r3, [sp, #4]
    9af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9af8:	1e5a      	subs	r2, r3, #1
    9afa:	490b      	ldr	r1, [pc, #44]	; (9b28 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x44>)
    9afc:	9b01      	ldr	r3, [sp, #4]
    9afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
    9b02:	4a0a      	ldr	r2, [pc, #40]	; (9b2c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x48>)
    9b04:	9b01      	ldr	r3, [sp, #4]
    9b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b0a:	f003 0301 	and.w	r3, r3, #1
    9b0e:	2b00      	cmp	r3, #0
    9b10:	d106      	bne.n	9b20 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x3c>
    9b12:	4a05      	ldr	r2, [pc, #20]	; (9b28 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x44>)
    9b14:	9b01      	ldr	r3, [sp, #4]
    9b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b1a:	2b00      	cmp	r3, #0
    9b1c:	d100      	bne.n	9b20 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9b1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9b20:	bf00      	nop
    9b22:	b003      	add	sp, #12
    9b24:	f85d fb04 	ldr.w	pc, [sp], #4
    9b28:	1fff9164 	.word	0x1fff9164
    9b2c:	1fff9160 	.word	0x1fff9160

00009b30 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60(void)
{
    9b30:	b500      	push	{lr}
    9b32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b34:	f7f7 f852 	bl	bdc <Sys_GetCoreID>
    9b38:	4603      	mov	r3, r0
    9b3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId])
    9b3c:	4a10      	ldr	r2, [pc, #64]	; (9b80 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x50>)
    9b3e:	9b01      	ldr	r3, [sp, #4]
    9b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b44:	2b00      	cmp	r3, #0
    9b46:	d10d      	bne.n	9b64 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9b48:	f7f6 ff67 	bl	a1a <Gpt_schm_read_msr>
    9b4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9b4e:	9b00      	ldr	r3, [sp, #0]
    9b50:	f003 0301 	and.w	r3, r3, #1
    9b54:	2b00      	cmp	r3, #0
    9b56:	d100      	bne.n	9b5a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9b58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_60[u32CoreId] = msr;
    9b5a:	490a      	ldr	r1, [pc, #40]	; (9b84 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x54>)
    9b5c:	9b01      	ldr	r3, [sp, #4]
    9b5e:	9a00      	ldr	r2, [sp, #0]
    9b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId]++;
    9b64:	4a06      	ldr	r2, [pc, #24]	; (9b80 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x50>)
    9b66:	9b01      	ldr	r3, [sp, #4]
    9b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b6c:	1c5a      	adds	r2, r3, #1
    9b6e:	4904      	ldr	r1, [pc, #16]	; (9b80 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x50>)
    9b70:	9b01      	ldr	r3, [sp, #4]
    9b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9b76:	bf00      	nop
    9b78:	b003      	add	sp, #12
    9b7a:	f85d fb04 	ldr.w	pc, [sp], #4
    9b7e:	bf00      	nop
    9b80:	1fff916c 	.word	0x1fff916c
    9b84:	1fff9168 	.word	0x1fff9168

00009b88 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60(void)
{
    9b88:	b500      	push	{lr}
    9b8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b8c:	f7f7 f826 	bl	bdc <Sys_GetCoreID>
    9b90:	4603      	mov	r3, r0
    9b92:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId]--;
    9b94:	4a0d      	ldr	r2, [pc, #52]	; (9bcc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x44>)
    9b96:	9b01      	ldr	r3, [sp, #4]
    9b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b9c:	1e5a      	subs	r2, r3, #1
    9b9e:	490b      	ldr	r1, [pc, #44]	; (9bcc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x44>)
    9ba0:	9b01      	ldr	r3, [sp, #4]
    9ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
    9ba6:	4a0a      	ldr	r2, [pc, #40]	; (9bd0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x48>)
    9ba8:	9b01      	ldr	r3, [sp, #4]
    9baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bae:	f003 0301 	and.w	r3, r3, #1
    9bb2:	2b00      	cmp	r3, #0
    9bb4:	d106      	bne.n	9bc4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x3c>
    9bb6:	4a05      	ldr	r2, [pc, #20]	; (9bcc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x44>)
    9bb8:	9b01      	ldr	r3, [sp, #4]
    9bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bbe:	2b00      	cmp	r3, #0
    9bc0:	d100      	bne.n	9bc4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9bc2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9bc4:	bf00      	nop
    9bc6:	b003      	add	sp, #12
    9bc8:	f85d fb04 	ldr.w	pc, [sp], #4
    9bcc:	1fff916c 	.word	0x1fff916c
    9bd0:	1fff9168 	.word	0x1fff9168

00009bd4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61(void)
{
    9bd4:	b500      	push	{lr}
    9bd6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9bd8:	f7f7 f800 	bl	bdc <Sys_GetCoreID>
    9bdc:	4603      	mov	r3, r0
    9bde:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId])
    9be0:	4a10      	ldr	r2, [pc, #64]	; (9c24 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x50>)
    9be2:	9b01      	ldr	r3, [sp, #4]
    9be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9be8:	2b00      	cmp	r3, #0
    9bea:	d10d      	bne.n	9c08 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9bec:	f7f6 ff15 	bl	a1a <Gpt_schm_read_msr>
    9bf0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9bf2:	9b00      	ldr	r3, [sp, #0]
    9bf4:	f003 0301 	and.w	r3, r3, #1
    9bf8:	2b00      	cmp	r3, #0
    9bfa:	d100      	bne.n	9bfe <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9bfc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_61[u32CoreId] = msr;
    9bfe:	490a      	ldr	r1, [pc, #40]	; (9c28 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x54>)
    9c00:	9b01      	ldr	r3, [sp, #4]
    9c02:	9a00      	ldr	r2, [sp, #0]
    9c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId]++;
    9c08:	4a06      	ldr	r2, [pc, #24]	; (9c24 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x50>)
    9c0a:	9b01      	ldr	r3, [sp, #4]
    9c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c10:	1c5a      	adds	r2, r3, #1
    9c12:	4904      	ldr	r1, [pc, #16]	; (9c24 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x50>)
    9c14:	9b01      	ldr	r3, [sp, #4]
    9c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9c1a:	bf00      	nop
    9c1c:	b003      	add	sp, #12
    9c1e:	f85d fb04 	ldr.w	pc, [sp], #4
    9c22:	bf00      	nop
    9c24:	1fff9174 	.word	0x1fff9174
    9c28:	1fff9170 	.word	0x1fff9170

00009c2c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61(void)
{
    9c2c:	b500      	push	{lr}
    9c2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9c30:	f7f6 ffd4 	bl	bdc <Sys_GetCoreID>
    9c34:	4603      	mov	r3, r0
    9c36:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId]--;
    9c38:	4a0d      	ldr	r2, [pc, #52]	; (9c70 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x44>)
    9c3a:	9b01      	ldr	r3, [sp, #4]
    9c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c40:	1e5a      	subs	r2, r3, #1
    9c42:	490b      	ldr	r1, [pc, #44]	; (9c70 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x44>)
    9c44:	9b01      	ldr	r3, [sp, #4]
    9c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
    9c4a:	4a0a      	ldr	r2, [pc, #40]	; (9c74 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x48>)
    9c4c:	9b01      	ldr	r3, [sp, #4]
    9c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c52:	f003 0301 	and.w	r3, r3, #1
    9c56:	2b00      	cmp	r3, #0
    9c58:	d106      	bne.n	9c68 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x3c>
    9c5a:	4a05      	ldr	r2, [pc, #20]	; (9c70 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x44>)
    9c5c:	9b01      	ldr	r3, [sp, #4]
    9c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c62:	2b00      	cmp	r3, #0
    9c64:	d100      	bne.n	9c68 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9c66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9c68:	bf00      	nop
    9c6a:	b003      	add	sp, #12
    9c6c:	f85d fb04 	ldr.w	pc, [sp], #4
    9c70:	1fff9174 	.word	0x1fff9174
    9c74:	1fff9170 	.word	0x1fff9170

00009c78 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62(void)
{
    9c78:	b500      	push	{lr}
    9c7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9c7c:	f7f6 ffae 	bl	bdc <Sys_GetCoreID>
    9c80:	4603      	mov	r3, r0
    9c82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId])
    9c84:	4a10      	ldr	r2, [pc, #64]	; (9cc8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x50>)
    9c86:	9b01      	ldr	r3, [sp, #4]
    9c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c8c:	2b00      	cmp	r3, #0
    9c8e:	d10d      	bne.n	9cac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9c90:	f7f6 fec3 	bl	a1a <Gpt_schm_read_msr>
    9c94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9c96:	9b00      	ldr	r3, [sp, #0]
    9c98:	f003 0301 	and.w	r3, r3, #1
    9c9c:	2b00      	cmp	r3, #0
    9c9e:	d100      	bne.n	9ca2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9ca0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_62[u32CoreId] = msr;
    9ca2:	490a      	ldr	r1, [pc, #40]	; (9ccc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x54>)
    9ca4:	9b01      	ldr	r3, [sp, #4]
    9ca6:	9a00      	ldr	r2, [sp, #0]
    9ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId]++;
    9cac:	4a06      	ldr	r2, [pc, #24]	; (9cc8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x50>)
    9cae:	9b01      	ldr	r3, [sp, #4]
    9cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cb4:	1c5a      	adds	r2, r3, #1
    9cb6:	4904      	ldr	r1, [pc, #16]	; (9cc8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x50>)
    9cb8:	9b01      	ldr	r3, [sp, #4]
    9cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9cbe:	bf00      	nop
    9cc0:	b003      	add	sp, #12
    9cc2:	f85d fb04 	ldr.w	pc, [sp], #4
    9cc6:	bf00      	nop
    9cc8:	1fff917c 	.word	0x1fff917c
    9ccc:	1fff9178 	.word	0x1fff9178

00009cd0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62(void)
{
    9cd0:	b500      	push	{lr}
    9cd2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9cd4:	f7f6 ff82 	bl	bdc <Sys_GetCoreID>
    9cd8:	4603      	mov	r3, r0
    9cda:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId]--;
    9cdc:	4a0d      	ldr	r2, [pc, #52]	; (9d14 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x44>)
    9cde:	9b01      	ldr	r3, [sp, #4]
    9ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ce4:	1e5a      	subs	r2, r3, #1
    9ce6:	490b      	ldr	r1, [pc, #44]	; (9d14 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x44>)
    9ce8:	9b01      	ldr	r3, [sp, #4]
    9cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
    9cee:	4a0a      	ldr	r2, [pc, #40]	; (9d18 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x48>)
    9cf0:	9b01      	ldr	r3, [sp, #4]
    9cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cf6:	f003 0301 	and.w	r3, r3, #1
    9cfa:	2b00      	cmp	r3, #0
    9cfc:	d106      	bne.n	9d0c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x3c>
    9cfe:	4a05      	ldr	r2, [pc, #20]	; (9d14 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x44>)
    9d00:	9b01      	ldr	r3, [sp, #4]
    9d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d06:	2b00      	cmp	r3, #0
    9d08:	d100      	bne.n	9d0c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9d0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9d0c:	bf00      	nop
    9d0e:	b003      	add	sp, #12
    9d10:	f85d fb04 	ldr.w	pc, [sp], #4
    9d14:	1fff917c 	.word	0x1fff917c
    9d18:	1fff9178 	.word	0x1fff9178

00009d1c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63(void)
{
    9d1c:	b500      	push	{lr}
    9d1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9d20:	f7f6 ff5c 	bl	bdc <Sys_GetCoreID>
    9d24:	4603      	mov	r3, r0
    9d26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId])
    9d28:	4a10      	ldr	r2, [pc, #64]	; (9d6c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x50>)
    9d2a:	9b01      	ldr	r3, [sp, #4]
    9d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d30:	2b00      	cmp	r3, #0
    9d32:	d10d      	bne.n	9d50 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9d34:	f7f6 fe71 	bl	a1a <Gpt_schm_read_msr>
    9d38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9d3a:	9b00      	ldr	r3, [sp, #0]
    9d3c:	f003 0301 	and.w	r3, r3, #1
    9d40:	2b00      	cmp	r3, #0
    9d42:	d100      	bne.n	9d46 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9d44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_63[u32CoreId] = msr;
    9d46:	490a      	ldr	r1, [pc, #40]	; (9d70 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x54>)
    9d48:	9b01      	ldr	r3, [sp, #4]
    9d4a:	9a00      	ldr	r2, [sp, #0]
    9d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId]++;
    9d50:	4a06      	ldr	r2, [pc, #24]	; (9d6c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x50>)
    9d52:	9b01      	ldr	r3, [sp, #4]
    9d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d58:	1c5a      	adds	r2, r3, #1
    9d5a:	4904      	ldr	r1, [pc, #16]	; (9d6c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x50>)
    9d5c:	9b01      	ldr	r3, [sp, #4]
    9d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9d62:	bf00      	nop
    9d64:	b003      	add	sp, #12
    9d66:	f85d fb04 	ldr.w	pc, [sp], #4
    9d6a:	bf00      	nop
    9d6c:	1fff9184 	.word	0x1fff9184
    9d70:	1fff9180 	.word	0x1fff9180

00009d74 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63(void)
{
    9d74:	b500      	push	{lr}
    9d76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9d78:	f7f6 ff30 	bl	bdc <Sys_GetCoreID>
    9d7c:	4603      	mov	r3, r0
    9d7e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId]--;
    9d80:	4a0d      	ldr	r2, [pc, #52]	; (9db8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x44>)
    9d82:	9b01      	ldr	r3, [sp, #4]
    9d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d88:	1e5a      	subs	r2, r3, #1
    9d8a:	490b      	ldr	r1, [pc, #44]	; (9db8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x44>)
    9d8c:	9b01      	ldr	r3, [sp, #4]
    9d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
    9d92:	4a0a      	ldr	r2, [pc, #40]	; (9dbc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x48>)
    9d94:	9b01      	ldr	r3, [sp, #4]
    9d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d9a:	f003 0301 	and.w	r3, r3, #1
    9d9e:	2b00      	cmp	r3, #0
    9da0:	d106      	bne.n	9db0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x3c>
    9da2:	4a05      	ldr	r2, [pc, #20]	; (9db8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x44>)
    9da4:	9b01      	ldr	r3, [sp, #4]
    9da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9daa:	2b00      	cmp	r3, #0
    9dac:	d100      	bne.n	9db0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9dae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9db0:	bf00      	nop
    9db2:	b003      	add	sp, #12
    9db4:	f85d fb04 	ldr.w	pc, [sp], #4
    9db8:	1fff9184 	.word	0x1fff9184
    9dbc:	1fff9180 	.word	0x1fff9180

00009dc0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64(void)
{
    9dc0:	b500      	push	{lr}
    9dc2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9dc4:	f7f6 ff0a 	bl	bdc <Sys_GetCoreID>
    9dc8:	4603      	mov	r3, r0
    9dca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId])
    9dcc:	4a10      	ldr	r2, [pc, #64]	; (9e10 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x50>)
    9dce:	9b01      	ldr	r3, [sp, #4]
    9dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dd4:	2b00      	cmp	r3, #0
    9dd6:	d10d      	bne.n	9df4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9dd8:	f7f6 fe1f 	bl	a1a <Gpt_schm_read_msr>
    9ddc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9dde:	9b00      	ldr	r3, [sp, #0]
    9de0:	f003 0301 	and.w	r3, r3, #1
    9de4:	2b00      	cmp	r3, #0
    9de6:	d100      	bne.n	9dea <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9de8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_64[u32CoreId] = msr;
    9dea:	490a      	ldr	r1, [pc, #40]	; (9e14 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x54>)
    9dec:	9b01      	ldr	r3, [sp, #4]
    9dee:	9a00      	ldr	r2, [sp, #0]
    9df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId]++;
    9df4:	4a06      	ldr	r2, [pc, #24]	; (9e10 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x50>)
    9df6:	9b01      	ldr	r3, [sp, #4]
    9df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dfc:	1c5a      	adds	r2, r3, #1
    9dfe:	4904      	ldr	r1, [pc, #16]	; (9e10 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x50>)
    9e00:	9b01      	ldr	r3, [sp, #4]
    9e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9e06:	bf00      	nop
    9e08:	b003      	add	sp, #12
    9e0a:	f85d fb04 	ldr.w	pc, [sp], #4
    9e0e:	bf00      	nop
    9e10:	1fff918c 	.word	0x1fff918c
    9e14:	1fff9188 	.word	0x1fff9188

00009e18 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64(void)
{
    9e18:	b500      	push	{lr}
    9e1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e1c:	f7f6 fede 	bl	bdc <Sys_GetCoreID>
    9e20:	4603      	mov	r3, r0
    9e22:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId]--;
    9e24:	4a0d      	ldr	r2, [pc, #52]	; (9e5c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x44>)
    9e26:	9b01      	ldr	r3, [sp, #4]
    9e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e2c:	1e5a      	subs	r2, r3, #1
    9e2e:	490b      	ldr	r1, [pc, #44]	; (9e5c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x44>)
    9e30:	9b01      	ldr	r3, [sp, #4]
    9e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
    9e36:	4a0a      	ldr	r2, [pc, #40]	; (9e60 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x48>)
    9e38:	9b01      	ldr	r3, [sp, #4]
    9e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e3e:	f003 0301 	and.w	r3, r3, #1
    9e42:	2b00      	cmp	r3, #0
    9e44:	d106      	bne.n	9e54 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x3c>
    9e46:	4a05      	ldr	r2, [pc, #20]	; (9e5c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x44>)
    9e48:	9b01      	ldr	r3, [sp, #4]
    9e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e4e:	2b00      	cmp	r3, #0
    9e50:	d100      	bne.n	9e54 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9e52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9e54:	bf00      	nop
    9e56:	b003      	add	sp, #12
    9e58:	f85d fb04 	ldr.w	pc, [sp], #4
    9e5c:	1fff918c 	.word	0x1fff918c
    9e60:	1fff9188 	.word	0x1fff9188

00009e64 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65(void)
{
    9e64:	b500      	push	{lr}
    9e66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e68:	f7f6 feb8 	bl	bdc <Sys_GetCoreID>
    9e6c:	4603      	mov	r3, r0
    9e6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId])
    9e70:	4a10      	ldr	r2, [pc, #64]	; (9eb4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x50>)
    9e72:	9b01      	ldr	r3, [sp, #4]
    9e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e78:	2b00      	cmp	r3, #0
    9e7a:	d10d      	bne.n	9e98 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9e7c:	f7f6 fdcd 	bl	a1a <Gpt_schm_read_msr>
    9e80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9e82:	9b00      	ldr	r3, [sp, #0]
    9e84:	f003 0301 	and.w	r3, r3, #1
    9e88:	2b00      	cmp	r3, #0
    9e8a:	d100      	bne.n	9e8e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9e8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_65[u32CoreId] = msr;
    9e8e:	490a      	ldr	r1, [pc, #40]	; (9eb8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x54>)
    9e90:	9b01      	ldr	r3, [sp, #4]
    9e92:	9a00      	ldr	r2, [sp, #0]
    9e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId]++;
    9e98:	4a06      	ldr	r2, [pc, #24]	; (9eb4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x50>)
    9e9a:	9b01      	ldr	r3, [sp, #4]
    9e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ea0:	1c5a      	adds	r2, r3, #1
    9ea2:	4904      	ldr	r1, [pc, #16]	; (9eb4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x50>)
    9ea4:	9b01      	ldr	r3, [sp, #4]
    9ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9eaa:	bf00      	nop
    9eac:	b003      	add	sp, #12
    9eae:	f85d fb04 	ldr.w	pc, [sp], #4
    9eb2:	bf00      	nop
    9eb4:	1fff9194 	.word	0x1fff9194
    9eb8:	1fff9190 	.word	0x1fff9190

00009ebc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65(void)
{
    9ebc:	b500      	push	{lr}
    9ebe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9ec0:	f7f6 fe8c 	bl	bdc <Sys_GetCoreID>
    9ec4:	4603      	mov	r3, r0
    9ec6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId]--;
    9ec8:	4a0d      	ldr	r2, [pc, #52]	; (9f00 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x44>)
    9eca:	9b01      	ldr	r3, [sp, #4]
    9ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ed0:	1e5a      	subs	r2, r3, #1
    9ed2:	490b      	ldr	r1, [pc, #44]	; (9f00 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x44>)
    9ed4:	9b01      	ldr	r3, [sp, #4]
    9ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
    9eda:	4a0a      	ldr	r2, [pc, #40]	; (9f04 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x48>)
    9edc:	9b01      	ldr	r3, [sp, #4]
    9ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ee2:	f003 0301 	and.w	r3, r3, #1
    9ee6:	2b00      	cmp	r3, #0
    9ee8:	d106      	bne.n	9ef8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x3c>
    9eea:	4a05      	ldr	r2, [pc, #20]	; (9f00 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x44>)
    9eec:	9b01      	ldr	r3, [sp, #4]
    9eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ef2:	2b00      	cmp	r3, #0
    9ef4:	d100      	bne.n	9ef8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9ef6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9ef8:	bf00      	nop
    9efa:	b003      	add	sp, #12
    9efc:	f85d fb04 	ldr.w	pc, [sp], #4
    9f00:	1fff9194 	.word	0x1fff9194
    9f04:	1fff9190 	.word	0x1fff9190

00009f08 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66(void)
{
    9f08:	b500      	push	{lr}
    9f0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9f0c:	f7f6 fe66 	bl	bdc <Sys_GetCoreID>
    9f10:	4603      	mov	r3, r0
    9f12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId])
    9f14:	4a10      	ldr	r2, [pc, #64]	; (9f58 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x50>)
    9f16:	9b01      	ldr	r3, [sp, #4]
    9f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f1c:	2b00      	cmp	r3, #0
    9f1e:	d10d      	bne.n	9f3c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9f20:	f7f6 fd7b 	bl	a1a <Gpt_schm_read_msr>
    9f24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9f26:	9b00      	ldr	r3, [sp, #0]
    9f28:	f003 0301 	and.w	r3, r3, #1
    9f2c:	2b00      	cmp	r3, #0
    9f2e:	d100      	bne.n	9f32 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9f30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_66[u32CoreId] = msr;
    9f32:	490a      	ldr	r1, [pc, #40]	; (9f5c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x54>)
    9f34:	9b01      	ldr	r3, [sp, #4]
    9f36:	9a00      	ldr	r2, [sp, #0]
    9f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId]++;
    9f3c:	4a06      	ldr	r2, [pc, #24]	; (9f58 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x50>)
    9f3e:	9b01      	ldr	r3, [sp, #4]
    9f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f44:	1c5a      	adds	r2, r3, #1
    9f46:	4904      	ldr	r1, [pc, #16]	; (9f58 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x50>)
    9f48:	9b01      	ldr	r3, [sp, #4]
    9f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9f4e:	bf00      	nop
    9f50:	b003      	add	sp, #12
    9f52:	f85d fb04 	ldr.w	pc, [sp], #4
    9f56:	bf00      	nop
    9f58:	1fff919c 	.word	0x1fff919c
    9f5c:	1fff9198 	.word	0x1fff9198

00009f60 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66(void)
{
    9f60:	b500      	push	{lr}
    9f62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9f64:	f7f6 fe3a 	bl	bdc <Sys_GetCoreID>
    9f68:	4603      	mov	r3, r0
    9f6a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId]--;
    9f6c:	4a0d      	ldr	r2, [pc, #52]	; (9fa4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x44>)
    9f6e:	9b01      	ldr	r3, [sp, #4]
    9f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f74:	1e5a      	subs	r2, r3, #1
    9f76:	490b      	ldr	r1, [pc, #44]	; (9fa4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x44>)
    9f78:	9b01      	ldr	r3, [sp, #4]
    9f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
    9f7e:	4a0a      	ldr	r2, [pc, #40]	; (9fa8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x48>)
    9f80:	9b01      	ldr	r3, [sp, #4]
    9f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f86:	f003 0301 	and.w	r3, r3, #1
    9f8a:	2b00      	cmp	r3, #0
    9f8c:	d106      	bne.n	9f9c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x3c>
    9f8e:	4a05      	ldr	r2, [pc, #20]	; (9fa4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x44>)
    9f90:	9b01      	ldr	r3, [sp, #4]
    9f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f96:	2b00      	cmp	r3, #0
    9f98:	d100      	bne.n	9f9c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9f9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9f9c:	bf00      	nop
    9f9e:	b003      	add	sp, #12
    9fa0:	f85d fb04 	ldr.w	pc, [sp], #4
    9fa4:	1fff919c 	.word	0x1fff919c
    9fa8:	1fff9198 	.word	0x1fff9198

00009fac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67(void)
{
    9fac:	b500      	push	{lr}
    9fae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9fb0:	f7f6 fe14 	bl	bdc <Sys_GetCoreID>
    9fb4:	4603      	mov	r3, r0
    9fb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId])
    9fb8:	4a10      	ldr	r2, [pc, #64]	; (9ffc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x50>)
    9fba:	9b01      	ldr	r3, [sp, #4]
    9fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fc0:	2b00      	cmp	r3, #0
    9fc2:	d10d      	bne.n	9fe0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9fc4:	f7f6 fd29 	bl	a1a <Gpt_schm_read_msr>
    9fc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9fca:	9b00      	ldr	r3, [sp, #0]
    9fcc:	f003 0301 	and.w	r3, r3, #1
    9fd0:	2b00      	cmp	r3, #0
    9fd2:	d100      	bne.n	9fd6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9fd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_67[u32CoreId] = msr;
    9fd6:	490a      	ldr	r1, [pc, #40]	; (a000 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x54>)
    9fd8:	9b01      	ldr	r3, [sp, #4]
    9fda:	9a00      	ldr	r2, [sp, #0]
    9fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId]++;
    9fe0:	4a06      	ldr	r2, [pc, #24]	; (9ffc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x50>)
    9fe2:	9b01      	ldr	r3, [sp, #4]
    9fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fe8:	1c5a      	adds	r2, r3, #1
    9fea:	4904      	ldr	r1, [pc, #16]	; (9ffc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x50>)
    9fec:	9b01      	ldr	r3, [sp, #4]
    9fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9ff2:	bf00      	nop
    9ff4:	b003      	add	sp, #12
    9ff6:	f85d fb04 	ldr.w	pc, [sp], #4
    9ffa:	bf00      	nop
    9ffc:	1fff91a4 	.word	0x1fff91a4
    a000:	1fff91a0 	.word	0x1fff91a0

0000a004 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67(void)
{
    a004:	b500      	push	{lr}
    a006:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a008:	f7f6 fde8 	bl	bdc <Sys_GetCoreID>
    a00c:	4603      	mov	r3, r0
    a00e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId]--;
    a010:	4a0d      	ldr	r2, [pc, #52]	; (a048 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x44>)
    a012:	9b01      	ldr	r3, [sp, #4]
    a014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a018:	1e5a      	subs	r2, r3, #1
    a01a:	490b      	ldr	r1, [pc, #44]	; (a048 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x44>)
    a01c:	9b01      	ldr	r3, [sp, #4]
    a01e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
    a022:	4a0a      	ldr	r2, [pc, #40]	; (a04c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x48>)
    a024:	9b01      	ldr	r3, [sp, #4]
    a026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a02a:	f003 0301 	and.w	r3, r3, #1
    a02e:	2b00      	cmp	r3, #0
    a030:	d106      	bne.n	a040 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x3c>
    a032:	4a05      	ldr	r2, [pc, #20]	; (a048 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x44>)
    a034:	9b01      	ldr	r3, [sp, #4]
    a036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a03a:	2b00      	cmp	r3, #0
    a03c:	d100      	bne.n	a040 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a03e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a040:	bf00      	nop
    a042:	b003      	add	sp, #12
    a044:	f85d fb04 	ldr.w	pc, [sp], #4
    a048:	1fff91a4 	.word	0x1fff91a4
    a04c:	1fff91a0 	.word	0x1fff91a0

0000a050 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68(void)
{
    a050:	b500      	push	{lr}
    a052:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a054:	f7f6 fdc2 	bl	bdc <Sys_GetCoreID>
    a058:	4603      	mov	r3, r0
    a05a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId])
    a05c:	4a10      	ldr	r2, [pc, #64]	; (a0a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x50>)
    a05e:	9b01      	ldr	r3, [sp, #4]
    a060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a064:	2b00      	cmp	r3, #0
    a066:	d10d      	bne.n	a084 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a068:	f7f6 fcd7 	bl	a1a <Gpt_schm_read_msr>
    a06c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a06e:	9b00      	ldr	r3, [sp, #0]
    a070:	f003 0301 	and.w	r3, r3, #1
    a074:	2b00      	cmp	r3, #0
    a076:	d100      	bne.n	a07a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a078:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_68[u32CoreId] = msr;
    a07a:	490a      	ldr	r1, [pc, #40]	; (a0a4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x54>)
    a07c:	9b01      	ldr	r3, [sp, #4]
    a07e:	9a00      	ldr	r2, [sp, #0]
    a080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId]++;
    a084:	4a06      	ldr	r2, [pc, #24]	; (a0a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x50>)
    a086:	9b01      	ldr	r3, [sp, #4]
    a088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a08c:	1c5a      	adds	r2, r3, #1
    a08e:	4904      	ldr	r1, [pc, #16]	; (a0a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x50>)
    a090:	9b01      	ldr	r3, [sp, #4]
    a092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a096:	bf00      	nop
    a098:	b003      	add	sp, #12
    a09a:	f85d fb04 	ldr.w	pc, [sp], #4
    a09e:	bf00      	nop
    a0a0:	1fff91ac 	.word	0x1fff91ac
    a0a4:	1fff91a8 	.word	0x1fff91a8

0000a0a8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68(void)
{
    a0a8:	b500      	push	{lr}
    a0aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a0ac:	f7f6 fd96 	bl	bdc <Sys_GetCoreID>
    a0b0:	4603      	mov	r3, r0
    a0b2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId]--;
    a0b4:	4a0d      	ldr	r2, [pc, #52]	; (a0ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x44>)
    a0b6:	9b01      	ldr	r3, [sp, #4]
    a0b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0bc:	1e5a      	subs	r2, r3, #1
    a0be:	490b      	ldr	r1, [pc, #44]	; (a0ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x44>)
    a0c0:	9b01      	ldr	r3, [sp, #4]
    a0c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
    a0c6:	4a0a      	ldr	r2, [pc, #40]	; (a0f0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x48>)
    a0c8:	9b01      	ldr	r3, [sp, #4]
    a0ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0ce:	f003 0301 	and.w	r3, r3, #1
    a0d2:	2b00      	cmp	r3, #0
    a0d4:	d106      	bne.n	a0e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x3c>
    a0d6:	4a05      	ldr	r2, [pc, #20]	; (a0ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x44>)
    a0d8:	9b01      	ldr	r3, [sp, #4]
    a0da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0de:	2b00      	cmp	r3, #0
    a0e0:	d100      	bne.n	a0e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a0e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a0e4:	bf00      	nop
    a0e6:	b003      	add	sp, #12
    a0e8:	f85d fb04 	ldr.w	pc, [sp], #4
    a0ec:	1fff91ac 	.word	0x1fff91ac
    a0f0:	1fff91a8 	.word	0x1fff91a8

0000a0f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69(void)
{
    a0f4:	b500      	push	{lr}
    a0f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a0f8:	f7f6 fd70 	bl	bdc <Sys_GetCoreID>
    a0fc:	4603      	mov	r3, r0
    a0fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId])
    a100:	4a10      	ldr	r2, [pc, #64]	; (a144 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x50>)
    a102:	9b01      	ldr	r3, [sp, #4]
    a104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a108:	2b00      	cmp	r3, #0
    a10a:	d10d      	bne.n	a128 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a10c:	f7f6 fc85 	bl	a1a <Gpt_schm_read_msr>
    a110:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a112:	9b00      	ldr	r3, [sp, #0]
    a114:	f003 0301 	and.w	r3, r3, #1
    a118:	2b00      	cmp	r3, #0
    a11a:	d100      	bne.n	a11e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a11c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_69[u32CoreId] = msr;
    a11e:	490a      	ldr	r1, [pc, #40]	; (a148 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x54>)
    a120:	9b01      	ldr	r3, [sp, #4]
    a122:	9a00      	ldr	r2, [sp, #0]
    a124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId]++;
    a128:	4a06      	ldr	r2, [pc, #24]	; (a144 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x50>)
    a12a:	9b01      	ldr	r3, [sp, #4]
    a12c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a130:	1c5a      	adds	r2, r3, #1
    a132:	4904      	ldr	r1, [pc, #16]	; (a144 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x50>)
    a134:	9b01      	ldr	r3, [sp, #4]
    a136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a13a:	bf00      	nop
    a13c:	b003      	add	sp, #12
    a13e:	f85d fb04 	ldr.w	pc, [sp], #4
    a142:	bf00      	nop
    a144:	1fff91b4 	.word	0x1fff91b4
    a148:	1fff91b0 	.word	0x1fff91b0

0000a14c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69(void)
{
    a14c:	b500      	push	{lr}
    a14e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a150:	f7f6 fd44 	bl	bdc <Sys_GetCoreID>
    a154:	4603      	mov	r3, r0
    a156:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId]--;
    a158:	4a0d      	ldr	r2, [pc, #52]	; (a190 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x44>)
    a15a:	9b01      	ldr	r3, [sp, #4]
    a15c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a160:	1e5a      	subs	r2, r3, #1
    a162:	490b      	ldr	r1, [pc, #44]	; (a190 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x44>)
    a164:	9b01      	ldr	r3, [sp, #4]
    a166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
    a16a:	4a0a      	ldr	r2, [pc, #40]	; (a194 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x48>)
    a16c:	9b01      	ldr	r3, [sp, #4]
    a16e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a172:	f003 0301 	and.w	r3, r3, #1
    a176:	2b00      	cmp	r3, #0
    a178:	d106      	bne.n	a188 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x3c>
    a17a:	4a05      	ldr	r2, [pc, #20]	; (a190 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x44>)
    a17c:	9b01      	ldr	r3, [sp, #4]
    a17e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a182:	2b00      	cmp	r3, #0
    a184:	d100      	bne.n	a188 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a186:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a188:	bf00      	nop
    a18a:	b003      	add	sp, #12
    a18c:	f85d fb04 	ldr.w	pc, [sp], #4
    a190:	1fff91b4 	.word	0x1fff91b4
    a194:	1fff91b0 	.word	0x1fff91b0

0000a198 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70(void)
{
    a198:	b500      	push	{lr}
    a19a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a19c:	f7f6 fd1e 	bl	bdc <Sys_GetCoreID>
    a1a0:	4603      	mov	r3, r0
    a1a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId])
    a1a4:	4a10      	ldr	r2, [pc, #64]	; (a1e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x50>)
    a1a6:	9b01      	ldr	r3, [sp, #4]
    a1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1ac:	2b00      	cmp	r3, #0
    a1ae:	d10d      	bne.n	a1cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a1b0:	f7f6 fc33 	bl	a1a <Gpt_schm_read_msr>
    a1b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a1b6:	9b00      	ldr	r3, [sp, #0]
    a1b8:	f003 0301 	and.w	r3, r3, #1
    a1bc:	2b00      	cmp	r3, #0
    a1be:	d100      	bne.n	a1c2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a1c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_70[u32CoreId] = msr;
    a1c2:	490a      	ldr	r1, [pc, #40]	; (a1ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x54>)
    a1c4:	9b01      	ldr	r3, [sp, #4]
    a1c6:	9a00      	ldr	r2, [sp, #0]
    a1c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId]++;
    a1cc:	4a06      	ldr	r2, [pc, #24]	; (a1e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x50>)
    a1ce:	9b01      	ldr	r3, [sp, #4]
    a1d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1d4:	1c5a      	adds	r2, r3, #1
    a1d6:	4904      	ldr	r1, [pc, #16]	; (a1e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x50>)
    a1d8:	9b01      	ldr	r3, [sp, #4]
    a1da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a1de:	bf00      	nop
    a1e0:	b003      	add	sp, #12
    a1e2:	f85d fb04 	ldr.w	pc, [sp], #4
    a1e6:	bf00      	nop
    a1e8:	1fff91bc 	.word	0x1fff91bc
    a1ec:	1fff91b8 	.word	0x1fff91b8

0000a1f0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70(void)
{
    a1f0:	b500      	push	{lr}
    a1f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a1f4:	f7f6 fcf2 	bl	bdc <Sys_GetCoreID>
    a1f8:	4603      	mov	r3, r0
    a1fa:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId]--;
    a1fc:	4a0d      	ldr	r2, [pc, #52]	; (a234 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x44>)
    a1fe:	9b01      	ldr	r3, [sp, #4]
    a200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a204:	1e5a      	subs	r2, r3, #1
    a206:	490b      	ldr	r1, [pc, #44]	; (a234 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x44>)
    a208:	9b01      	ldr	r3, [sp, #4]
    a20a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
    a20e:	4a0a      	ldr	r2, [pc, #40]	; (a238 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x48>)
    a210:	9b01      	ldr	r3, [sp, #4]
    a212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a216:	f003 0301 	and.w	r3, r3, #1
    a21a:	2b00      	cmp	r3, #0
    a21c:	d106      	bne.n	a22c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x3c>
    a21e:	4a05      	ldr	r2, [pc, #20]	; (a234 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x44>)
    a220:	9b01      	ldr	r3, [sp, #4]
    a222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a226:	2b00      	cmp	r3, #0
    a228:	d100      	bne.n	a22c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a22a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a22c:	bf00      	nop
    a22e:	b003      	add	sp, #12
    a230:	f85d fb04 	ldr.w	pc, [sp], #4
    a234:	1fff91bc 	.word	0x1fff91bc
    a238:	1fff91b8 	.word	0x1fff91b8

0000a23c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71(void)
{
    a23c:	b500      	push	{lr}
    a23e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a240:	f7f6 fccc 	bl	bdc <Sys_GetCoreID>
    a244:	4603      	mov	r3, r0
    a246:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId])
    a248:	4a10      	ldr	r2, [pc, #64]	; (a28c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x50>)
    a24a:	9b01      	ldr	r3, [sp, #4]
    a24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a250:	2b00      	cmp	r3, #0
    a252:	d10d      	bne.n	a270 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a254:	f7f6 fbe1 	bl	a1a <Gpt_schm_read_msr>
    a258:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a25a:	9b00      	ldr	r3, [sp, #0]
    a25c:	f003 0301 	and.w	r3, r3, #1
    a260:	2b00      	cmp	r3, #0
    a262:	d100      	bne.n	a266 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a264:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_71[u32CoreId] = msr;
    a266:	490a      	ldr	r1, [pc, #40]	; (a290 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x54>)
    a268:	9b01      	ldr	r3, [sp, #4]
    a26a:	9a00      	ldr	r2, [sp, #0]
    a26c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId]++;
    a270:	4a06      	ldr	r2, [pc, #24]	; (a28c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x50>)
    a272:	9b01      	ldr	r3, [sp, #4]
    a274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a278:	1c5a      	adds	r2, r3, #1
    a27a:	4904      	ldr	r1, [pc, #16]	; (a28c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x50>)
    a27c:	9b01      	ldr	r3, [sp, #4]
    a27e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a282:	bf00      	nop
    a284:	b003      	add	sp, #12
    a286:	f85d fb04 	ldr.w	pc, [sp], #4
    a28a:	bf00      	nop
    a28c:	1fff91c4 	.word	0x1fff91c4
    a290:	1fff91c0 	.word	0x1fff91c0

0000a294 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71(void)
{
    a294:	b500      	push	{lr}
    a296:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a298:	f7f6 fca0 	bl	bdc <Sys_GetCoreID>
    a29c:	4603      	mov	r3, r0
    a29e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId]--;
    a2a0:	4a0d      	ldr	r2, [pc, #52]	; (a2d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x44>)
    a2a2:	9b01      	ldr	r3, [sp, #4]
    a2a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2a8:	1e5a      	subs	r2, r3, #1
    a2aa:	490b      	ldr	r1, [pc, #44]	; (a2d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x44>)
    a2ac:	9b01      	ldr	r3, [sp, #4]
    a2ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
    a2b2:	4a0a      	ldr	r2, [pc, #40]	; (a2dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x48>)
    a2b4:	9b01      	ldr	r3, [sp, #4]
    a2b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2ba:	f003 0301 	and.w	r3, r3, #1
    a2be:	2b00      	cmp	r3, #0
    a2c0:	d106      	bne.n	a2d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x3c>
    a2c2:	4a05      	ldr	r2, [pc, #20]	; (a2d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x44>)
    a2c4:	9b01      	ldr	r3, [sp, #4]
    a2c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2ca:	2b00      	cmp	r3, #0
    a2cc:	d100      	bne.n	a2d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a2ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a2d0:	bf00      	nop
    a2d2:	b003      	add	sp, #12
    a2d4:	f85d fb04 	ldr.w	pc, [sp], #4
    a2d8:	1fff91c4 	.word	0x1fff91c4
    a2dc:	1fff91c0 	.word	0x1fff91c0

0000a2e0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72(void)
{
    a2e0:	b500      	push	{lr}
    a2e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a2e4:	f7f6 fc7a 	bl	bdc <Sys_GetCoreID>
    a2e8:	4603      	mov	r3, r0
    a2ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId])
    a2ec:	4a10      	ldr	r2, [pc, #64]	; (a330 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x50>)
    a2ee:	9b01      	ldr	r3, [sp, #4]
    a2f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2f4:	2b00      	cmp	r3, #0
    a2f6:	d10d      	bne.n	a314 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a2f8:	f7f6 fb8f 	bl	a1a <Gpt_schm_read_msr>
    a2fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a2fe:	9b00      	ldr	r3, [sp, #0]
    a300:	f003 0301 	and.w	r3, r3, #1
    a304:	2b00      	cmp	r3, #0
    a306:	d100      	bne.n	a30a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a308:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_72[u32CoreId] = msr;
    a30a:	490a      	ldr	r1, [pc, #40]	; (a334 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x54>)
    a30c:	9b01      	ldr	r3, [sp, #4]
    a30e:	9a00      	ldr	r2, [sp, #0]
    a310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId]++;
    a314:	4a06      	ldr	r2, [pc, #24]	; (a330 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x50>)
    a316:	9b01      	ldr	r3, [sp, #4]
    a318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a31c:	1c5a      	adds	r2, r3, #1
    a31e:	4904      	ldr	r1, [pc, #16]	; (a330 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x50>)
    a320:	9b01      	ldr	r3, [sp, #4]
    a322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a326:	bf00      	nop
    a328:	b003      	add	sp, #12
    a32a:	f85d fb04 	ldr.w	pc, [sp], #4
    a32e:	bf00      	nop
    a330:	1fff91cc 	.word	0x1fff91cc
    a334:	1fff91c8 	.word	0x1fff91c8

0000a338 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72(void)
{
    a338:	b500      	push	{lr}
    a33a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a33c:	f7f6 fc4e 	bl	bdc <Sys_GetCoreID>
    a340:	4603      	mov	r3, r0
    a342:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId]--;
    a344:	4a0d      	ldr	r2, [pc, #52]	; (a37c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x44>)
    a346:	9b01      	ldr	r3, [sp, #4]
    a348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a34c:	1e5a      	subs	r2, r3, #1
    a34e:	490b      	ldr	r1, [pc, #44]	; (a37c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x44>)
    a350:	9b01      	ldr	r3, [sp, #4]
    a352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
    a356:	4a0a      	ldr	r2, [pc, #40]	; (a380 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x48>)
    a358:	9b01      	ldr	r3, [sp, #4]
    a35a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a35e:	f003 0301 	and.w	r3, r3, #1
    a362:	2b00      	cmp	r3, #0
    a364:	d106      	bne.n	a374 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x3c>
    a366:	4a05      	ldr	r2, [pc, #20]	; (a37c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x44>)
    a368:	9b01      	ldr	r3, [sp, #4]
    a36a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a36e:	2b00      	cmp	r3, #0
    a370:	d100      	bne.n	a374 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a372:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a374:	bf00      	nop
    a376:	b003      	add	sp, #12
    a378:	f85d fb04 	ldr.w	pc, [sp], #4
    a37c:	1fff91cc 	.word	0x1fff91cc
    a380:	1fff91c8 	.word	0x1fff91c8

0000a384 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73(void)
{
    a384:	b500      	push	{lr}
    a386:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a388:	f7f6 fc28 	bl	bdc <Sys_GetCoreID>
    a38c:	4603      	mov	r3, r0
    a38e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId])
    a390:	4a10      	ldr	r2, [pc, #64]	; (a3d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x50>)
    a392:	9b01      	ldr	r3, [sp, #4]
    a394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a398:	2b00      	cmp	r3, #0
    a39a:	d10d      	bne.n	a3b8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a39c:	f7f6 fb3d 	bl	a1a <Gpt_schm_read_msr>
    a3a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a3a2:	9b00      	ldr	r3, [sp, #0]
    a3a4:	f003 0301 	and.w	r3, r3, #1
    a3a8:	2b00      	cmp	r3, #0
    a3aa:	d100      	bne.n	a3ae <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a3ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_73[u32CoreId] = msr;
    a3ae:	490a      	ldr	r1, [pc, #40]	; (a3d8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x54>)
    a3b0:	9b01      	ldr	r3, [sp, #4]
    a3b2:	9a00      	ldr	r2, [sp, #0]
    a3b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId]++;
    a3b8:	4a06      	ldr	r2, [pc, #24]	; (a3d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x50>)
    a3ba:	9b01      	ldr	r3, [sp, #4]
    a3bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3c0:	1c5a      	adds	r2, r3, #1
    a3c2:	4904      	ldr	r1, [pc, #16]	; (a3d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x50>)
    a3c4:	9b01      	ldr	r3, [sp, #4]
    a3c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a3ca:	bf00      	nop
    a3cc:	b003      	add	sp, #12
    a3ce:	f85d fb04 	ldr.w	pc, [sp], #4
    a3d2:	bf00      	nop
    a3d4:	1fff91d4 	.word	0x1fff91d4
    a3d8:	1fff91d0 	.word	0x1fff91d0

0000a3dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73(void)
{
    a3dc:	b500      	push	{lr}
    a3de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a3e0:	f7f6 fbfc 	bl	bdc <Sys_GetCoreID>
    a3e4:	4603      	mov	r3, r0
    a3e6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId]--;
    a3e8:	4a0d      	ldr	r2, [pc, #52]	; (a420 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x44>)
    a3ea:	9b01      	ldr	r3, [sp, #4]
    a3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3f0:	1e5a      	subs	r2, r3, #1
    a3f2:	490b      	ldr	r1, [pc, #44]	; (a420 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x44>)
    a3f4:	9b01      	ldr	r3, [sp, #4]
    a3f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
    a3fa:	4a0a      	ldr	r2, [pc, #40]	; (a424 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x48>)
    a3fc:	9b01      	ldr	r3, [sp, #4]
    a3fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a402:	f003 0301 	and.w	r3, r3, #1
    a406:	2b00      	cmp	r3, #0
    a408:	d106      	bne.n	a418 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x3c>
    a40a:	4a05      	ldr	r2, [pc, #20]	; (a420 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x44>)
    a40c:	9b01      	ldr	r3, [sp, #4]
    a40e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a412:	2b00      	cmp	r3, #0
    a414:	d100      	bne.n	a418 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a416:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a418:	bf00      	nop
    a41a:	b003      	add	sp, #12
    a41c:	f85d fb04 	ldr.w	pc, [sp], #4
    a420:	1fff91d4 	.word	0x1fff91d4
    a424:	1fff91d0 	.word	0x1fff91d0

0000a428 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    a428:	b500      	push	{lr}
    a42a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a42c:	f7f6 fbd6 	bl	bdc <Sys_GetCoreID>
    a430:	4603      	mov	r3, r0
    a432:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    a434:	4a10      	ldr	r2, [pc, #64]	; (a478 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    a436:	9b01      	ldr	r3, [sp, #4]
    a438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a43c:	2b00      	cmp	r3, #0
    a43e:	d10d      	bne.n	a45c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a440:	f7f6 faf4 	bl	a2c <Mcu_schm_read_msr>
    a444:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a446:	9b00      	ldr	r3, [sp, #0]
    a448:	f003 0301 	and.w	r3, r3, #1
    a44c:	2b00      	cmp	r3, #0
    a44e:	d100      	bne.n	a452 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a450:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    a452:	490a      	ldr	r1, [pc, #40]	; (a47c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    a454:	9b01      	ldr	r3, [sp, #4]
    a456:	9a00      	ldr	r2, [sp, #0]
    a458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    a45c:	4a06      	ldr	r2, [pc, #24]	; (a478 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    a45e:	9b01      	ldr	r3, [sp, #4]
    a460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a464:	1c5a      	adds	r2, r3, #1
    a466:	4904      	ldr	r1, [pc, #16]	; (a478 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    a468:	9b01      	ldr	r3, [sp, #4]
    a46a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a46e:	bf00      	nop
    a470:	b003      	add	sp, #12
    a472:	f85d fb04 	ldr.w	pc, [sp], #4
    a476:	bf00      	nop
    a478:	1fff91dc 	.word	0x1fff91dc
    a47c:	1fff91d8 	.word	0x1fff91d8

0000a480 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    a480:	b500      	push	{lr}
    a482:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a484:	f7f6 fbaa 	bl	bdc <Sys_GetCoreID>
    a488:	4603      	mov	r3, r0
    a48a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    a48c:	4a0d      	ldr	r2, [pc, #52]	; (a4c4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    a48e:	9b01      	ldr	r3, [sp, #4]
    a490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a494:	1e5a      	subs	r2, r3, #1
    a496:	490b      	ldr	r1, [pc, #44]	; (a4c4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    a498:	9b01      	ldr	r3, [sp, #4]
    a49a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    a49e:	4a0a      	ldr	r2, [pc, #40]	; (a4c8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    a4a0:	9b01      	ldr	r3, [sp, #4]
    a4a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4a6:	f003 0301 	and.w	r3, r3, #1
    a4aa:	2b00      	cmp	r3, #0
    a4ac:	d106      	bne.n	a4bc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    a4ae:	4a05      	ldr	r2, [pc, #20]	; (a4c4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    a4b0:	9b01      	ldr	r3, [sp, #4]
    a4b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4b6:	2b00      	cmp	r3, #0
    a4b8:	d100      	bne.n	a4bc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a4ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a4bc:	bf00      	nop
    a4be:	b003      	add	sp, #12
    a4c0:	f85d fb04 	ldr.w	pc, [sp], #4
    a4c4:	1fff91dc 	.word	0x1fff91dc
    a4c8:	1fff91d8 	.word	0x1fff91d8

0000a4cc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    a4cc:	b500      	push	{lr}
    a4ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a4d0:	f7f6 fb84 	bl	bdc <Sys_GetCoreID>
    a4d4:	4603      	mov	r3, r0
    a4d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    a4d8:	4a10      	ldr	r2, [pc, #64]	; (a51c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    a4da:	9b01      	ldr	r3, [sp, #4]
    a4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4e0:	2b00      	cmp	r3, #0
    a4e2:	d10d      	bne.n	a500 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a4e4:	f7f6 faa2 	bl	a2c <Mcu_schm_read_msr>
    a4e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a4ea:	9b00      	ldr	r3, [sp, #0]
    a4ec:	f003 0301 	and.w	r3, r3, #1
    a4f0:	2b00      	cmp	r3, #0
    a4f2:	d100      	bne.n	a4f6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a4f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    a4f6:	490a      	ldr	r1, [pc, #40]	; (a520 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    a4f8:	9b01      	ldr	r3, [sp, #4]
    a4fa:	9a00      	ldr	r2, [sp, #0]
    a4fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    a500:	4a06      	ldr	r2, [pc, #24]	; (a51c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    a502:	9b01      	ldr	r3, [sp, #4]
    a504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a508:	1c5a      	adds	r2, r3, #1
    a50a:	4904      	ldr	r1, [pc, #16]	; (a51c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    a50c:	9b01      	ldr	r3, [sp, #4]
    a50e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a512:	bf00      	nop
    a514:	b003      	add	sp, #12
    a516:	f85d fb04 	ldr.w	pc, [sp], #4
    a51a:	bf00      	nop
    a51c:	1fff91e4 	.word	0x1fff91e4
    a520:	1fff91e0 	.word	0x1fff91e0

0000a524 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    a524:	b500      	push	{lr}
    a526:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a528:	f7f6 fb58 	bl	bdc <Sys_GetCoreID>
    a52c:	4603      	mov	r3, r0
    a52e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    a530:	4a0d      	ldr	r2, [pc, #52]	; (a568 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    a532:	9b01      	ldr	r3, [sp, #4]
    a534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a538:	1e5a      	subs	r2, r3, #1
    a53a:	490b      	ldr	r1, [pc, #44]	; (a568 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    a53c:	9b01      	ldr	r3, [sp, #4]
    a53e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    a542:	4a0a      	ldr	r2, [pc, #40]	; (a56c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    a544:	9b01      	ldr	r3, [sp, #4]
    a546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a54a:	f003 0301 	and.w	r3, r3, #1
    a54e:	2b00      	cmp	r3, #0
    a550:	d106      	bne.n	a560 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    a552:	4a05      	ldr	r2, [pc, #20]	; (a568 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    a554:	9b01      	ldr	r3, [sp, #4]
    a556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a55a:	2b00      	cmp	r3, #0
    a55c:	d100      	bne.n	a560 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a55e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a560:	bf00      	nop
    a562:	b003      	add	sp, #12
    a564:	f85d fb04 	ldr.w	pc, [sp], #4
    a568:	1fff91e4 	.word	0x1fff91e4
    a56c:	1fff91e0 	.word	0x1fff91e0

0000a570 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    a570:	b500      	push	{lr}
    a572:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a574:	f7f6 fb32 	bl	bdc <Sys_GetCoreID>
    a578:	4603      	mov	r3, r0
    a57a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    a57c:	4a10      	ldr	r2, [pc, #64]	; (a5c0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    a57e:	9b01      	ldr	r3, [sp, #4]
    a580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a584:	2b00      	cmp	r3, #0
    a586:	d10d      	bne.n	a5a4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a588:	f7f6 fa50 	bl	a2c <Mcu_schm_read_msr>
    a58c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a58e:	9b00      	ldr	r3, [sp, #0]
    a590:	f003 0301 	and.w	r3, r3, #1
    a594:	2b00      	cmp	r3, #0
    a596:	d100      	bne.n	a59a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a598:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    a59a:	490a      	ldr	r1, [pc, #40]	; (a5c4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    a59c:	9b01      	ldr	r3, [sp, #4]
    a59e:	9a00      	ldr	r2, [sp, #0]
    a5a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    a5a4:	4a06      	ldr	r2, [pc, #24]	; (a5c0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    a5a6:	9b01      	ldr	r3, [sp, #4]
    a5a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5ac:	1c5a      	adds	r2, r3, #1
    a5ae:	4904      	ldr	r1, [pc, #16]	; (a5c0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    a5b0:	9b01      	ldr	r3, [sp, #4]
    a5b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a5b6:	bf00      	nop
    a5b8:	b003      	add	sp, #12
    a5ba:	f85d fb04 	ldr.w	pc, [sp], #4
    a5be:	bf00      	nop
    a5c0:	1fff91ec 	.word	0x1fff91ec
    a5c4:	1fff91e8 	.word	0x1fff91e8

0000a5c8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    a5c8:	b500      	push	{lr}
    a5ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a5cc:	f7f6 fb06 	bl	bdc <Sys_GetCoreID>
    a5d0:	4603      	mov	r3, r0
    a5d2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    a5d4:	4a0d      	ldr	r2, [pc, #52]	; (a60c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    a5d6:	9b01      	ldr	r3, [sp, #4]
    a5d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5dc:	1e5a      	subs	r2, r3, #1
    a5de:	490b      	ldr	r1, [pc, #44]	; (a60c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    a5e0:	9b01      	ldr	r3, [sp, #4]
    a5e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    a5e6:	4a0a      	ldr	r2, [pc, #40]	; (a610 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    a5e8:	9b01      	ldr	r3, [sp, #4]
    a5ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5ee:	f003 0301 	and.w	r3, r3, #1
    a5f2:	2b00      	cmp	r3, #0
    a5f4:	d106      	bne.n	a604 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    a5f6:	4a05      	ldr	r2, [pc, #20]	; (a60c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    a5f8:	9b01      	ldr	r3, [sp, #4]
    a5fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5fe:	2b00      	cmp	r3, #0
    a600:	d100      	bne.n	a604 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a602:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a604:	bf00      	nop
    a606:	b003      	add	sp, #12
    a608:	f85d fb04 	ldr.w	pc, [sp], #4
    a60c:	1fff91ec 	.word	0x1fff91ec
    a610:	1fff91e8 	.word	0x1fff91e8

0000a614 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    a614:	b500      	push	{lr}
    a616:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a618:	f7f6 fae0 	bl	bdc <Sys_GetCoreID>
    a61c:	4603      	mov	r3, r0
    a61e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    a620:	4a10      	ldr	r2, [pc, #64]	; (a664 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    a622:	9b01      	ldr	r3, [sp, #4]
    a624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a628:	2b00      	cmp	r3, #0
    a62a:	d10d      	bne.n	a648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a62c:	f7f6 fa07 	bl	a3e <Port_schm_read_msr>
    a630:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a632:	9b00      	ldr	r3, [sp, #0]
    a634:	f003 0301 	and.w	r3, r3, #1
    a638:	2b00      	cmp	r3, #0
    a63a:	d100      	bne.n	a63e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a63c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    a63e:	490a      	ldr	r1, [pc, #40]	; (a668 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    a640:	9b01      	ldr	r3, [sp, #4]
    a642:	9a00      	ldr	r2, [sp, #0]
    a644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    a648:	4a06      	ldr	r2, [pc, #24]	; (a664 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    a64a:	9b01      	ldr	r3, [sp, #4]
    a64c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a650:	1c5a      	adds	r2, r3, #1
    a652:	4904      	ldr	r1, [pc, #16]	; (a664 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    a654:	9b01      	ldr	r3, [sp, #4]
    a656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a65a:	bf00      	nop
    a65c:	b003      	add	sp, #12
    a65e:	f85d fb04 	ldr.w	pc, [sp], #4
    a662:	bf00      	nop
    a664:	1fff91f4 	.word	0x1fff91f4
    a668:	1fff91f0 	.word	0x1fff91f0

0000a66c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    a66c:	b500      	push	{lr}
    a66e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a670:	f7f6 fab4 	bl	bdc <Sys_GetCoreID>
    a674:	4603      	mov	r3, r0
    a676:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    a678:	4a0d      	ldr	r2, [pc, #52]	; (a6b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    a67a:	9b01      	ldr	r3, [sp, #4]
    a67c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a680:	1e5a      	subs	r2, r3, #1
    a682:	490b      	ldr	r1, [pc, #44]	; (a6b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    a684:	9b01      	ldr	r3, [sp, #4]
    a686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    a68a:	4a0a      	ldr	r2, [pc, #40]	; (a6b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    a68c:	9b01      	ldr	r3, [sp, #4]
    a68e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a692:	f003 0301 	and.w	r3, r3, #1
    a696:	2b00      	cmp	r3, #0
    a698:	d106      	bne.n	a6a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    a69a:	4a05      	ldr	r2, [pc, #20]	; (a6b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    a69c:	9b01      	ldr	r3, [sp, #4]
    a69e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6a2:	2b00      	cmp	r3, #0
    a6a4:	d100      	bne.n	a6a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a6a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a6a8:	bf00      	nop
    a6aa:	b003      	add	sp, #12
    a6ac:	f85d fb04 	ldr.w	pc, [sp], #4
    a6b0:	1fff91f4 	.word	0x1fff91f4
    a6b4:	1fff91f0 	.word	0x1fff91f0

0000a6b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    a6b8:	b500      	push	{lr}
    a6ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a6bc:	f7f6 fa8e 	bl	bdc <Sys_GetCoreID>
    a6c0:	4603      	mov	r3, r0
    a6c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    a6c4:	4a10      	ldr	r2, [pc, #64]	; (a708 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    a6c6:	9b01      	ldr	r3, [sp, #4]
    a6c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6cc:	2b00      	cmp	r3, #0
    a6ce:	d10d      	bne.n	a6ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a6d0:	f7f6 f9b5 	bl	a3e <Port_schm_read_msr>
    a6d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a6d6:	9b00      	ldr	r3, [sp, #0]
    a6d8:	f003 0301 	and.w	r3, r3, #1
    a6dc:	2b00      	cmp	r3, #0
    a6de:	d100      	bne.n	a6e2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a6e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    a6e2:	490a      	ldr	r1, [pc, #40]	; (a70c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    a6e4:	9b01      	ldr	r3, [sp, #4]
    a6e6:	9a00      	ldr	r2, [sp, #0]
    a6e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    a6ec:	4a06      	ldr	r2, [pc, #24]	; (a708 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    a6ee:	9b01      	ldr	r3, [sp, #4]
    a6f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6f4:	1c5a      	adds	r2, r3, #1
    a6f6:	4904      	ldr	r1, [pc, #16]	; (a708 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    a6f8:	9b01      	ldr	r3, [sp, #4]
    a6fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a6fe:	bf00      	nop
    a700:	b003      	add	sp, #12
    a702:	f85d fb04 	ldr.w	pc, [sp], #4
    a706:	bf00      	nop
    a708:	1fff91fc 	.word	0x1fff91fc
    a70c:	1fff91f8 	.word	0x1fff91f8

0000a710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    a710:	b500      	push	{lr}
    a712:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a714:	f7f6 fa62 	bl	bdc <Sys_GetCoreID>
    a718:	4603      	mov	r3, r0
    a71a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    a71c:	4a0d      	ldr	r2, [pc, #52]	; (a754 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    a71e:	9b01      	ldr	r3, [sp, #4]
    a720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a724:	1e5a      	subs	r2, r3, #1
    a726:	490b      	ldr	r1, [pc, #44]	; (a754 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    a728:	9b01      	ldr	r3, [sp, #4]
    a72a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    a72e:	4a0a      	ldr	r2, [pc, #40]	; (a758 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    a730:	9b01      	ldr	r3, [sp, #4]
    a732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a736:	f003 0301 	and.w	r3, r3, #1
    a73a:	2b00      	cmp	r3, #0
    a73c:	d106      	bne.n	a74c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    a73e:	4a05      	ldr	r2, [pc, #20]	; (a754 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    a740:	9b01      	ldr	r3, [sp, #4]
    a742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a746:	2b00      	cmp	r3, #0
    a748:	d100      	bne.n	a74c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a74a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a74c:	bf00      	nop
    a74e:	b003      	add	sp, #12
    a750:	f85d fb04 	ldr.w	pc, [sp], #4
    a754:	1fff91fc 	.word	0x1fff91fc
    a758:	1fff91f8 	.word	0x1fff91f8

0000a75c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    a75c:	b500      	push	{lr}
    a75e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a760:	f7f6 fa3c 	bl	bdc <Sys_GetCoreID>
    a764:	4603      	mov	r3, r0
    a766:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    a768:	4a10      	ldr	r2, [pc, #64]	; (a7ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    a76a:	9b01      	ldr	r3, [sp, #4]
    a76c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a770:	2b00      	cmp	r3, #0
    a772:	d10d      	bne.n	a790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a774:	f7f6 f963 	bl	a3e <Port_schm_read_msr>
    a778:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a77a:	9b00      	ldr	r3, [sp, #0]
    a77c:	f003 0301 	and.w	r3, r3, #1
    a780:	2b00      	cmp	r3, #0
    a782:	d100      	bne.n	a786 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a784:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    a786:	490a      	ldr	r1, [pc, #40]	; (a7b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    a788:	9b01      	ldr	r3, [sp, #4]
    a78a:	9a00      	ldr	r2, [sp, #0]
    a78c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    a790:	4a06      	ldr	r2, [pc, #24]	; (a7ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    a792:	9b01      	ldr	r3, [sp, #4]
    a794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a798:	1c5a      	adds	r2, r3, #1
    a79a:	4904      	ldr	r1, [pc, #16]	; (a7ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    a79c:	9b01      	ldr	r3, [sp, #4]
    a79e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a7a2:	bf00      	nop
    a7a4:	b003      	add	sp, #12
    a7a6:	f85d fb04 	ldr.w	pc, [sp], #4
    a7aa:	bf00      	nop
    a7ac:	1fff9204 	.word	0x1fff9204
    a7b0:	1fff9200 	.word	0x1fff9200

0000a7b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    a7b4:	b500      	push	{lr}
    a7b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a7b8:	f7f6 fa10 	bl	bdc <Sys_GetCoreID>
    a7bc:	4603      	mov	r3, r0
    a7be:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    a7c0:	4a0d      	ldr	r2, [pc, #52]	; (a7f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    a7c2:	9b01      	ldr	r3, [sp, #4]
    a7c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7c8:	1e5a      	subs	r2, r3, #1
    a7ca:	490b      	ldr	r1, [pc, #44]	; (a7f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    a7cc:	9b01      	ldr	r3, [sp, #4]
    a7ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    a7d2:	4a0a      	ldr	r2, [pc, #40]	; (a7fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    a7d4:	9b01      	ldr	r3, [sp, #4]
    a7d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7da:	f003 0301 	and.w	r3, r3, #1
    a7de:	2b00      	cmp	r3, #0
    a7e0:	d106      	bne.n	a7f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    a7e2:	4a05      	ldr	r2, [pc, #20]	; (a7f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    a7e4:	9b01      	ldr	r3, [sp, #4]
    a7e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7ea:	2b00      	cmp	r3, #0
    a7ec:	d100      	bne.n	a7f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a7ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a7f0:	bf00      	nop
    a7f2:	b003      	add	sp, #12
    a7f4:	f85d fb04 	ldr.w	pc, [sp], #4
    a7f8:	1fff9204 	.word	0x1fff9204
    a7fc:	1fff9200 	.word	0x1fff9200

0000a800 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    a800:	b500      	push	{lr}
    a802:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a804:	f7f6 f9ea 	bl	bdc <Sys_GetCoreID>
    a808:	4603      	mov	r3, r0
    a80a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    a80c:	4a10      	ldr	r2, [pc, #64]	; (a850 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    a80e:	9b01      	ldr	r3, [sp, #4]
    a810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a814:	2b00      	cmp	r3, #0
    a816:	d10d      	bne.n	a834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a818:	f7f6 f911 	bl	a3e <Port_schm_read_msr>
    a81c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a81e:	9b00      	ldr	r3, [sp, #0]
    a820:	f003 0301 	and.w	r3, r3, #1
    a824:	2b00      	cmp	r3, #0
    a826:	d100      	bne.n	a82a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a828:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    a82a:	490a      	ldr	r1, [pc, #40]	; (a854 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    a82c:	9b01      	ldr	r3, [sp, #4]
    a82e:	9a00      	ldr	r2, [sp, #0]
    a830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    a834:	4a06      	ldr	r2, [pc, #24]	; (a850 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    a836:	9b01      	ldr	r3, [sp, #4]
    a838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a83c:	1c5a      	adds	r2, r3, #1
    a83e:	4904      	ldr	r1, [pc, #16]	; (a850 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    a840:	9b01      	ldr	r3, [sp, #4]
    a842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a846:	bf00      	nop
    a848:	b003      	add	sp, #12
    a84a:	f85d fb04 	ldr.w	pc, [sp], #4
    a84e:	bf00      	nop
    a850:	1fff920c 	.word	0x1fff920c
    a854:	1fff9208 	.word	0x1fff9208

0000a858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    a858:	b500      	push	{lr}
    a85a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a85c:	f7f6 f9be 	bl	bdc <Sys_GetCoreID>
    a860:	4603      	mov	r3, r0
    a862:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    a864:	4a0d      	ldr	r2, [pc, #52]	; (a89c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    a866:	9b01      	ldr	r3, [sp, #4]
    a868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a86c:	1e5a      	subs	r2, r3, #1
    a86e:	490b      	ldr	r1, [pc, #44]	; (a89c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    a870:	9b01      	ldr	r3, [sp, #4]
    a872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    a876:	4a0a      	ldr	r2, [pc, #40]	; (a8a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    a878:	9b01      	ldr	r3, [sp, #4]
    a87a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a87e:	f003 0301 	and.w	r3, r3, #1
    a882:	2b00      	cmp	r3, #0
    a884:	d106      	bne.n	a894 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    a886:	4a05      	ldr	r2, [pc, #20]	; (a89c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    a888:	9b01      	ldr	r3, [sp, #4]
    a88a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a88e:	2b00      	cmp	r3, #0
    a890:	d100      	bne.n	a894 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a892:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a894:	bf00      	nop
    a896:	b003      	add	sp, #12
    a898:	f85d fb04 	ldr.w	pc, [sp], #4
    a89c:	1fff920c 	.word	0x1fff920c
    a8a0:	1fff9208 	.word	0x1fff9208

0000a8a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    a8a4:	b500      	push	{lr}
    a8a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a8a8:	f7f6 f998 	bl	bdc <Sys_GetCoreID>
    a8ac:	4603      	mov	r3, r0
    a8ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    a8b0:	4a10      	ldr	r2, [pc, #64]	; (a8f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    a8b2:	9b01      	ldr	r3, [sp, #4]
    a8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8b8:	2b00      	cmp	r3, #0
    a8ba:	d10d      	bne.n	a8d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a8bc:	f7f6 f8bf 	bl	a3e <Port_schm_read_msr>
    a8c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a8c2:	9b00      	ldr	r3, [sp, #0]
    a8c4:	f003 0301 	and.w	r3, r3, #1
    a8c8:	2b00      	cmp	r3, #0
    a8ca:	d100      	bne.n	a8ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a8cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    a8ce:	490a      	ldr	r1, [pc, #40]	; (a8f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    a8d0:	9b01      	ldr	r3, [sp, #4]
    a8d2:	9a00      	ldr	r2, [sp, #0]
    a8d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    a8d8:	4a06      	ldr	r2, [pc, #24]	; (a8f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    a8da:	9b01      	ldr	r3, [sp, #4]
    a8dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8e0:	1c5a      	adds	r2, r3, #1
    a8e2:	4904      	ldr	r1, [pc, #16]	; (a8f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    a8e4:	9b01      	ldr	r3, [sp, #4]
    a8e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a8ea:	bf00      	nop
    a8ec:	b003      	add	sp, #12
    a8ee:	f85d fb04 	ldr.w	pc, [sp], #4
    a8f2:	bf00      	nop
    a8f4:	1fff9214 	.word	0x1fff9214
    a8f8:	1fff9210 	.word	0x1fff9210

0000a8fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    a8fc:	b500      	push	{lr}
    a8fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a900:	f7f6 f96c 	bl	bdc <Sys_GetCoreID>
    a904:	4603      	mov	r3, r0
    a906:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    a908:	4a0d      	ldr	r2, [pc, #52]	; (a940 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    a90a:	9b01      	ldr	r3, [sp, #4]
    a90c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a910:	1e5a      	subs	r2, r3, #1
    a912:	490b      	ldr	r1, [pc, #44]	; (a940 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    a914:	9b01      	ldr	r3, [sp, #4]
    a916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    a91a:	4a0a      	ldr	r2, [pc, #40]	; (a944 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    a91c:	9b01      	ldr	r3, [sp, #4]
    a91e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a922:	f003 0301 	and.w	r3, r3, #1
    a926:	2b00      	cmp	r3, #0
    a928:	d106      	bne.n	a938 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    a92a:	4a05      	ldr	r2, [pc, #20]	; (a940 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    a92c:	9b01      	ldr	r3, [sp, #4]
    a92e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a932:	2b00      	cmp	r3, #0
    a934:	d100      	bne.n	a938 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a936:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a938:	bf00      	nop
    a93a:	b003      	add	sp, #12
    a93c:	f85d fb04 	ldr.w	pc, [sp], #4
    a940:	1fff9214 	.word	0x1fff9214
    a944:	1fff9210 	.word	0x1fff9210

0000a948 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    a948:	b500      	push	{lr}
    a94a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a94c:	f7f6 f946 	bl	bdc <Sys_GetCoreID>
    a950:	4603      	mov	r3, r0
    a952:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    a954:	4a10      	ldr	r2, [pc, #64]	; (a998 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    a956:	9b01      	ldr	r3, [sp, #4]
    a958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a95c:	2b00      	cmp	r3, #0
    a95e:	d10d      	bne.n	a97c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a960:	f7f6 f86d 	bl	a3e <Port_schm_read_msr>
    a964:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a966:	9b00      	ldr	r3, [sp, #0]
    a968:	f003 0301 	and.w	r3, r3, #1
    a96c:	2b00      	cmp	r3, #0
    a96e:	d100      	bne.n	a972 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a970:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    a972:	490a      	ldr	r1, [pc, #40]	; (a99c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    a974:	9b01      	ldr	r3, [sp, #4]
    a976:	9a00      	ldr	r2, [sp, #0]
    a978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    a97c:	4a06      	ldr	r2, [pc, #24]	; (a998 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    a97e:	9b01      	ldr	r3, [sp, #4]
    a980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a984:	1c5a      	adds	r2, r3, #1
    a986:	4904      	ldr	r1, [pc, #16]	; (a998 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    a988:	9b01      	ldr	r3, [sp, #4]
    a98a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a98e:	bf00      	nop
    a990:	b003      	add	sp, #12
    a992:	f85d fb04 	ldr.w	pc, [sp], #4
    a996:	bf00      	nop
    a998:	1fff921c 	.word	0x1fff921c
    a99c:	1fff9218 	.word	0x1fff9218

0000a9a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    a9a0:	b500      	push	{lr}
    a9a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a9a4:	f7f6 f91a 	bl	bdc <Sys_GetCoreID>
    a9a8:	4603      	mov	r3, r0
    a9aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    a9ac:	4a0d      	ldr	r2, [pc, #52]	; (a9e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    a9ae:	9b01      	ldr	r3, [sp, #4]
    a9b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9b4:	1e5a      	subs	r2, r3, #1
    a9b6:	490b      	ldr	r1, [pc, #44]	; (a9e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    a9b8:	9b01      	ldr	r3, [sp, #4]
    a9ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    a9be:	4a0a      	ldr	r2, [pc, #40]	; (a9e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    a9c0:	9b01      	ldr	r3, [sp, #4]
    a9c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9c6:	f003 0301 	and.w	r3, r3, #1
    a9ca:	2b00      	cmp	r3, #0
    a9cc:	d106      	bne.n	a9dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    a9ce:	4a05      	ldr	r2, [pc, #20]	; (a9e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    a9d0:	9b01      	ldr	r3, [sp, #4]
    a9d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9d6:	2b00      	cmp	r3, #0
    a9d8:	d100      	bne.n	a9dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a9da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a9dc:	bf00      	nop
    a9de:	b003      	add	sp, #12
    a9e0:	f85d fb04 	ldr.w	pc, [sp], #4
    a9e4:	1fff921c 	.word	0x1fff921c
    a9e8:	1fff9218 	.word	0x1fff9218

0000a9ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    a9ec:	b500      	push	{lr}
    a9ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a9f0:	f7f6 f8f4 	bl	bdc <Sys_GetCoreID>
    a9f4:	4603      	mov	r3, r0
    a9f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    a9f8:	4a10      	ldr	r2, [pc, #64]	; (aa3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    a9fa:	9b01      	ldr	r3, [sp, #4]
    a9fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa00:	2b00      	cmp	r3, #0
    aa02:	d10d      	bne.n	aa20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aa04:	f7f6 f81b 	bl	a3e <Port_schm_read_msr>
    aa08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aa0a:	9b00      	ldr	r3, [sp, #0]
    aa0c:	f003 0301 	and.w	r3, r3, #1
    aa10:	2b00      	cmp	r3, #0
    aa12:	d100      	bne.n	aa16 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aa14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    aa16:	490a      	ldr	r1, [pc, #40]	; (aa40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    aa18:	9b01      	ldr	r3, [sp, #4]
    aa1a:	9a00      	ldr	r2, [sp, #0]
    aa1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    aa20:	4a06      	ldr	r2, [pc, #24]	; (aa3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    aa22:	9b01      	ldr	r3, [sp, #4]
    aa24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa28:	1c5a      	adds	r2, r3, #1
    aa2a:	4904      	ldr	r1, [pc, #16]	; (aa3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    aa2c:	9b01      	ldr	r3, [sp, #4]
    aa2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aa32:	bf00      	nop
    aa34:	b003      	add	sp, #12
    aa36:	f85d fb04 	ldr.w	pc, [sp], #4
    aa3a:	bf00      	nop
    aa3c:	1fff9224 	.word	0x1fff9224
    aa40:	1fff9220 	.word	0x1fff9220

0000aa44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    aa44:	b500      	push	{lr}
    aa46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aa48:	f7f6 f8c8 	bl	bdc <Sys_GetCoreID>
    aa4c:	4603      	mov	r3, r0
    aa4e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    aa50:	4a0d      	ldr	r2, [pc, #52]	; (aa88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    aa52:	9b01      	ldr	r3, [sp, #4]
    aa54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa58:	1e5a      	subs	r2, r3, #1
    aa5a:	490b      	ldr	r1, [pc, #44]	; (aa88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    aa5c:	9b01      	ldr	r3, [sp, #4]
    aa5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    aa62:	4a0a      	ldr	r2, [pc, #40]	; (aa8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    aa64:	9b01      	ldr	r3, [sp, #4]
    aa66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa6a:	f003 0301 	and.w	r3, r3, #1
    aa6e:	2b00      	cmp	r3, #0
    aa70:	d106      	bne.n	aa80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    aa72:	4a05      	ldr	r2, [pc, #20]	; (aa88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    aa74:	9b01      	ldr	r3, [sp, #4]
    aa76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa7a:	2b00      	cmp	r3, #0
    aa7c:	d100      	bne.n	aa80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aa7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aa80:	bf00      	nop
    aa82:	b003      	add	sp, #12
    aa84:	f85d fb04 	ldr.w	pc, [sp], #4
    aa88:	1fff9224 	.word	0x1fff9224
    aa8c:	1fff9220 	.word	0x1fff9220

0000aa90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    aa90:	b500      	push	{lr}
    aa92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aa94:	f7f6 f8a2 	bl	bdc <Sys_GetCoreID>
    aa98:	4603      	mov	r3, r0
    aa9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    aa9c:	4a10      	ldr	r2, [pc, #64]	; (aae0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    aa9e:	9b01      	ldr	r3, [sp, #4]
    aaa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaa4:	2b00      	cmp	r3, #0
    aaa6:	d10d      	bne.n	aac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aaa8:	f7f5 ffc9 	bl	a3e <Port_schm_read_msr>
    aaac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aaae:	9b00      	ldr	r3, [sp, #0]
    aab0:	f003 0301 	and.w	r3, r3, #1
    aab4:	2b00      	cmp	r3, #0
    aab6:	d100      	bne.n	aaba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aab8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    aaba:	490a      	ldr	r1, [pc, #40]	; (aae4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    aabc:	9b01      	ldr	r3, [sp, #4]
    aabe:	9a00      	ldr	r2, [sp, #0]
    aac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    aac4:	4a06      	ldr	r2, [pc, #24]	; (aae0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    aac6:	9b01      	ldr	r3, [sp, #4]
    aac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aacc:	1c5a      	adds	r2, r3, #1
    aace:	4904      	ldr	r1, [pc, #16]	; (aae0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    aad0:	9b01      	ldr	r3, [sp, #4]
    aad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aad6:	bf00      	nop
    aad8:	b003      	add	sp, #12
    aada:	f85d fb04 	ldr.w	pc, [sp], #4
    aade:	bf00      	nop
    aae0:	1fff922c 	.word	0x1fff922c
    aae4:	1fff9228 	.word	0x1fff9228

0000aae8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    aae8:	b500      	push	{lr}
    aaea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aaec:	f7f6 f876 	bl	bdc <Sys_GetCoreID>
    aaf0:	4603      	mov	r3, r0
    aaf2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    aaf4:	4a0d      	ldr	r2, [pc, #52]	; (ab2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    aaf6:	9b01      	ldr	r3, [sp, #4]
    aaf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aafc:	1e5a      	subs	r2, r3, #1
    aafe:	490b      	ldr	r1, [pc, #44]	; (ab2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    ab00:	9b01      	ldr	r3, [sp, #4]
    ab02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    ab06:	4a0a      	ldr	r2, [pc, #40]	; (ab30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    ab08:	9b01      	ldr	r3, [sp, #4]
    ab0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab0e:	f003 0301 	and.w	r3, r3, #1
    ab12:	2b00      	cmp	r3, #0
    ab14:	d106      	bne.n	ab24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    ab16:	4a05      	ldr	r2, [pc, #20]	; (ab2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    ab18:	9b01      	ldr	r3, [sp, #4]
    ab1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab1e:	2b00      	cmp	r3, #0
    ab20:	d100      	bne.n	ab24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ab22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ab24:	bf00      	nop
    ab26:	b003      	add	sp, #12
    ab28:	f85d fb04 	ldr.w	pc, [sp], #4
    ab2c:	1fff922c 	.word	0x1fff922c
    ab30:	1fff9228 	.word	0x1fff9228

0000ab34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    ab34:	b500      	push	{lr}
    ab36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ab38:	f7f6 f850 	bl	bdc <Sys_GetCoreID>
    ab3c:	4603      	mov	r3, r0
    ab3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    ab40:	4a10      	ldr	r2, [pc, #64]	; (ab84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    ab42:	9b01      	ldr	r3, [sp, #4]
    ab44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab48:	2b00      	cmp	r3, #0
    ab4a:	d10d      	bne.n	ab68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ab4c:	f7f5 ff77 	bl	a3e <Port_schm_read_msr>
    ab50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ab52:	9b00      	ldr	r3, [sp, #0]
    ab54:	f003 0301 	and.w	r3, r3, #1
    ab58:	2b00      	cmp	r3, #0
    ab5a:	d100      	bne.n	ab5e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ab5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    ab5e:	490a      	ldr	r1, [pc, #40]	; (ab88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    ab60:	9b01      	ldr	r3, [sp, #4]
    ab62:	9a00      	ldr	r2, [sp, #0]
    ab64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    ab68:	4a06      	ldr	r2, [pc, #24]	; (ab84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    ab6a:	9b01      	ldr	r3, [sp, #4]
    ab6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab70:	1c5a      	adds	r2, r3, #1
    ab72:	4904      	ldr	r1, [pc, #16]	; (ab84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    ab74:	9b01      	ldr	r3, [sp, #4]
    ab76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ab7a:	bf00      	nop
    ab7c:	b003      	add	sp, #12
    ab7e:	f85d fb04 	ldr.w	pc, [sp], #4
    ab82:	bf00      	nop
    ab84:	1fff9234 	.word	0x1fff9234
    ab88:	1fff9230 	.word	0x1fff9230

0000ab8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    ab8c:	b500      	push	{lr}
    ab8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ab90:	f7f6 f824 	bl	bdc <Sys_GetCoreID>
    ab94:	4603      	mov	r3, r0
    ab96:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    ab98:	4a0d      	ldr	r2, [pc, #52]	; (abd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    ab9a:	9b01      	ldr	r3, [sp, #4]
    ab9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aba0:	1e5a      	subs	r2, r3, #1
    aba2:	490b      	ldr	r1, [pc, #44]	; (abd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    aba4:	9b01      	ldr	r3, [sp, #4]
    aba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    abaa:	4a0a      	ldr	r2, [pc, #40]	; (abd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    abac:	9b01      	ldr	r3, [sp, #4]
    abae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abb2:	f003 0301 	and.w	r3, r3, #1
    abb6:	2b00      	cmp	r3, #0
    abb8:	d106      	bne.n	abc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    abba:	4a05      	ldr	r2, [pc, #20]	; (abd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    abbc:	9b01      	ldr	r3, [sp, #4]
    abbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abc2:	2b00      	cmp	r3, #0
    abc4:	d100      	bne.n	abc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    abc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    abc8:	bf00      	nop
    abca:	b003      	add	sp, #12
    abcc:	f85d fb04 	ldr.w	pc, [sp], #4
    abd0:	1fff9234 	.word	0x1fff9234
    abd4:	1fff9230 	.word	0x1fff9230

0000abd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    abd8:	b500      	push	{lr}
    abda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    abdc:	f7f5 fffe 	bl	bdc <Sys_GetCoreID>
    abe0:	4603      	mov	r3, r0
    abe2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    abe4:	4a10      	ldr	r2, [pc, #64]	; (ac28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    abe6:	9b01      	ldr	r3, [sp, #4]
    abe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abec:	2b00      	cmp	r3, #0
    abee:	d10d      	bne.n	ac0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    abf0:	f7f5 ff25 	bl	a3e <Port_schm_read_msr>
    abf4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    abf6:	9b00      	ldr	r3, [sp, #0]
    abf8:	f003 0301 	and.w	r3, r3, #1
    abfc:	2b00      	cmp	r3, #0
    abfe:	d100      	bne.n	ac02 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ac00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    ac02:	490a      	ldr	r1, [pc, #40]	; (ac2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    ac04:	9b01      	ldr	r3, [sp, #4]
    ac06:	9a00      	ldr	r2, [sp, #0]
    ac08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    ac0c:	4a06      	ldr	r2, [pc, #24]	; (ac28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    ac0e:	9b01      	ldr	r3, [sp, #4]
    ac10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac14:	1c5a      	adds	r2, r3, #1
    ac16:	4904      	ldr	r1, [pc, #16]	; (ac28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    ac18:	9b01      	ldr	r3, [sp, #4]
    ac1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ac1e:	bf00      	nop
    ac20:	b003      	add	sp, #12
    ac22:	f85d fb04 	ldr.w	pc, [sp], #4
    ac26:	bf00      	nop
    ac28:	1fff923c 	.word	0x1fff923c
    ac2c:	1fff9238 	.word	0x1fff9238

0000ac30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    ac30:	b500      	push	{lr}
    ac32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ac34:	f7f5 ffd2 	bl	bdc <Sys_GetCoreID>
    ac38:	4603      	mov	r3, r0
    ac3a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    ac3c:	4a0d      	ldr	r2, [pc, #52]	; (ac74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    ac3e:	9b01      	ldr	r3, [sp, #4]
    ac40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac44:	1e5a      	subs	r2, r3, #1
    ac46:	490b      	ldr	r1, [pc, #44]	; (ac74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    ac48:	9b01      	ldr	r3, [sp, #4]
    ac4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    ac4e:	4a0a      	ldr	r2, [pc, #40]	; (ac78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    ac50:	9b01      	ldr	r3, [sp, #4]
    ac52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac56:	f003 0301 	and.w	r3, r3, #1
    ac5a:	2b00      	cmp	r3, #0
    ac5c:	d106      	bne.n	ac6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    ac5e:	4a05      	ldr	r2, [pc, #20]	; (ac74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    ac60:	9b01      	ldr	r3, [sp, #4]
    ac62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac66:	2b00      	cmp	r3, #0
    ac68:	d100      	bne.n	ac6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ac6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ac6c:	bf00      	nop
    ac6e:	b003      	add	sp, #12
    ac70:	f85d fb04 	ldr.w	pc, [sp], #4
    ac74:	1fff923c 	.word	0x1fff923c
    ac78:	1fff9238 	.word	0x1fff9238

0000ac7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    ac7c:	b500      	push	{lr}
    ac7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ac80:	f7f5 ffac 	bl	bdc <Sys_GetCoreID>
    ac84:	4603      	mov	r3, r0
    ac86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    ac88:	4a10      	ldr	r2, [pc, #64]	; (accc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    ac8a:	9b01      	ldr	r3, [sp, #4]
    ac8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac90:	2b00      	cmp	r3, #0
    ac92:	d10d      	bne.n	acb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ac94:	f7f5 fed3 	bl	a3e <Port_schm_read_msr>
    ac98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ac9a:	9b00      	ldr	r3, [sp, #0]
    ac9c:	f003 0301 	and.w	r3, r3, #1
    aca0:	2b00      	cmp	r3, #0
    aca2:	d100      	bne.n	aca6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aca4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    aca6:	490a      	ldr	r1, [pc, #40]	; (acd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    aca8:	9b01      	ldr	r3, [sp, #4]
    acaa:	9a00      	ldr	r2, [sp, #0]
    acac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    acb0:	4a06      	ldr	r2, [pc, #24]	; (accc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    acb2:	9b01      	ldr	r3, [sp, #4]
    acb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acb8:	1c5a      	adds	r2, r3, #1
    acba:	4904      	ldr	r1, [pc, #16]	; (accc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    acbc:	9b01      	ldr	r3, [sp, #4]
    acbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    acc2:	bf00      	nop
    acc4:	b003      	add	sp, #12
    acc6:	f85d fb04 	ldr.w	pc, [sp], #4
    acca:	bf00      	nop
    accc:	1fff9244 	.word	0x1fff9244
    acd0:	1fff9240 	.word	0x1fff9240

0000acd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    acd4:	b500      	push	{lr}
    acd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    acd8:	f7f5 ff80 	bl	bdc <Sys_GetCoreID>
    acdc:	4603      	mov	r3, r0
    acde:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    ace0:	4a0d      	ldr	r2, [pc, #52]	; (ad18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    ace2:	9b01      	ldr	r3, [sp, #4]
    ace4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ace8:	1e5a      	subs	r2, r3, #1
    acea:	490b      	ldr	r1, [pc, #44]	; (ad18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    acec:	9b01      	ldr	r3, [sp, #4]
    acee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    acf2:	4a0a      	ldr	r2, [pc, #40]	; (ad1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    acf4:	9b01      	ldr	r3, [sp, #4]
    acf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acfa:	f003 0301 	and.w	r3, r3, #1
    acfe:	2b00      	cmp	r3, #0
    ad00:	d106      	bne.n	ad10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    ad02:	4a05      	ldr	r2, [pc, #20]	; (ad18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    ad04:	9b01      	ldr	r3, [sp, #4]
    ad06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad0a:	2b00      	cmp	r3, #0
    ad0c:	d100      	bne.n	ad10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ad0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ad10:	bf00      	nop
    ad12:	b003      	add	sp, #12
    ad14:	f85d fb04 	ldr.w	pc, [sp], #4
    ad18:	1fff9244 	.word	0x1fff9244
    ad1c:	1fff9240 	.word	0x1fff9240

0000ad20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    ad20:	b500      	push	{lr}
    ad22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad24:	f7f5 ff5a 	bl	bdc <Sys_GetCoreID>
    ad28:	4603      	mov	r3, r0
    ad2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    ad2c:	4a10      	ldr	r2, [pc, #64]	; (ad70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    ad2e:	9b01      	ldr	r3, [sp, #4]
    ad30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad34:	2b00      	cmp	r3, #0
    ad36:	d10d      	bne.n	ad54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ad38:	f7f5 fe81 	bl	a3e <Port_schm_read_msr>
    ad3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ad3e:	9b00      	ldr	r3, [sp, #0]
    ad40:	f003 0301 	and.w	r3, r3, #1
    ad44:	2b00      	cmp	r3, #0
    ad46:	d100      	bne.n	ad4a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ad48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    ad4a:	490a      	ldr	r1, [pc, #40]	; (ad74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    ad4c:	9b01      	ldr	r3, [sp, #4]
    ad4e:	9a00      	ldr	r2, [sp, #0]
    ad50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    ad54:	4a06      	ldr	r2, [pc, #24]	; (ad70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    ad56:	9b01      	ldr	r3, [sp, #4]
    ad58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad5c:	1c5a      	adds	r2, r3, #1
    ad5e:	4904      	ldr	r1, [pc, #16]	; (ad70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    ad60:	9b01      	ldr	r3, [sp, #4]
    ad62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ad66:	bf00      	nop
    ad68:	b003      	add	sp, #12
    ad6a:	f85d fb04 	ldr.w	pc, [sp], #4
    ad6e:	bf00      	nop
    ad70:	1fff924c 	.word	0x1fff924c
    ad74:	1fff9248 	.word	0x1fff9248

0000ad78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    ad78:	b500      	push	{lr}
    ad7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad7c:	f7f5 ff2e 	bl	bdc <Sys_GetCoreID>
    ad80:	4603      	mov	r3, r0
    ad82:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    ad84:	4a0d      	ldr	r2, [pc, #52]	; (adbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    ad86:	9b01      	ldr	r3, [sp, #4]
    ad88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad8c:	1e5a      	subs	r2, r3, #1
    ad8e:	490b      	ldr	r1, [pc, #44]	; (adbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    ad90:	9b01      	ldr	r3, [sp, #4]
    ad92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    ad96:	4a0a      	ldr	r2, [pc, #40]	; (adc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    ad98:	9b01      	ldr	r3, [sp, #4]
    ad9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad9e:	f003 0301 	and.w	r3, r3, #1
    ada2:	2b00      	cmp	r3, #0
    ada4:	d106      	bne.n	adb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    ada6:	4a05      	ldr	r2, [pc, #20]	; (adbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    ada8:	9b01      	ldr	r3, [sp, #4]
    adaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adae:	2b00      	cmp	r3, #0
    adb0:	d100      	bne.n	adb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    adb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    adb4:	bf00      	nop
    adb6:	b003      	add	sp, #12
    adb8:	f85d fb04 	ldr.w	pc, [sp], #4
    adbc:	1fff924c 	.word	0x1fff924c
    adc0:	1fff9248 	.word	0x1fff9248

0000adc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    adc4:	b500      	push	{lr}
    adc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    adc8:	f7f5 ff08 	bl	bdc <Sys_GetCoreID>
    adcc:	4603      	mov	r3, r0
    adce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    add0:	4a10      	ldr	r2, [pc, #64]	; (ae14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    add2:	9b01      	ldr	r3, [sp, #4]
    add4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    add8:	2b00      	cmp	r3, #0
    adda:	d10d      	bne.n	adf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    addc:	f7f5 fe2f 	bl	a3e <Port_schm_read_msr>
    ade0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ade2:	9b00      	ldr	r3, [sp, #0]
    ade4:	f003 0301 	and.w	r3, r3, #1
    ade8:	2b00      	cmp	r3, #0
    adea:	d100      	bne.n	adee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    adec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    adee:	490a      	ldr	r1, [pc, #40]	; (ae18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    adf0:	9b01      	ldr	r3, [sp, #4]
    adf2:	9a00      	ldr	r2, [sp, #0]
    adf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    adf8:	4a06      	ldr	r2, [pc, #24]	; (ae14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    adfa:	9b01      	ldr	r3, [sp, #4]
    adfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae00:	1c5a      	adds	r2, r3, #1
    ae02:	4904      	ldr	r1, [pc, #16]	; (ae14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    ae04:	9b01      	ldr	r3, [sp, #4]
    ae06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ae0a:	bf00      	nop
    ae0c:	b003      	add	sp, #12
    ae0e:	f85d fb04 	ldr.w	pc, [sp], #4
    ae12:	bf00      	nop
    ae14:	1fff9254 	.word	0x1fff9254
    ae18:	1fff9250 	.word	0x1fff9250

0000ae1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    ae1c:	b500      	push	{lr}
    ae1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae20:	f7f5 fedc 	bl	bdc <Sys_GetCoreID>
    ae24:	4603      	mov	r3, r0
    ae26:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    ae28:	4a0d      	ldr	r2, [pc, #52]	; (ae60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    ae2a:	9b01      	ldr	r3, [sp, #4]
    ae2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae30:	1e5a      	subs	r2, r3, #1
    ae32:	490b      	ldr	r1, [pc, #44]	; (ae60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    ae34:	9b01      	ldr	r3, [sp, #4]
    ae36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    ae3a:	4a0a      	ldr	r2, [pc, #40]	; (ae64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    ae3c:	9b01      	ldr	r3, [sp, #4]
    ae3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae42:	f003 0301 	and.w	r3, r3, #1
    ae46:	2b00      	cmp	r3, #0
    ae48:	d106      	bne.n	ae58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    ae4a:	4a05      	ldr	r2, [pc, #20]	; (ae60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    ae4c:	9b01      	ldr	r3, [sp, #4]
    ae4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae52:	2b00      	cmp	r3, #0
    ae54:	d100      	bne.n	ae58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ae56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ae58:	bf00      	nop
    ae5a:	b003      	add	sp, #12
    ae5c:	f85d fb04 	ldr.w	pc, [sp], #4
    ae60:	1fff9254 	.word	0x1fff9254
    ae64:	1fff9250 	.word	0x1fff9250

0000ae68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    ae68:	b500      	push	{lr}
    ae6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae6c:	f7f5 feb6 	bl	bdc <Sys_GetCoreID>
    ae70:	4603      	mov	r3, r0
    ae72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    ae74:	4a10      	ldr	r2, [pc, #64]	; (aeb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    ae76:	9b01      	ldr	r3, [sp, #4]
    ae78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae7c:	2b00      	cmp	r3, #0
    ae7e:	d10d      	bne.n	ae9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ae80:	f7f5 fddd 	bl	a3e <Port_schm_read_msr>
    ae84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ae86:	9b00      	ldr	r3, [sp, #0]
    ae88:	f003 0301 	and.w	r3, r3, #1
    ae8c:	2b00      	cmp	r3, #0
    ae8e:	d100      	bne.n	ae92 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ae90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    ae92:	490a      	ldr	r1, [pc, #40]	; (aebc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    ae94:	9b01      	ldr	r3, [sp, #4]
    ae96:	9a00      	ldr	r2, [sp, #0]
    ae98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    ae9c:	4a06      	ldr	r2, [pc, #24]	; (aeb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    ae9e:	9b01      	ldr	r3, [sp, #4]
    aea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aea4:	1c5a      	adds	r2, r3, #1
    aea6:	4904      	ldr	r1, [pc, #16]	; (aeb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    aea8:	9b01      	ldr	r3, [sp, #4]
    aeaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aeae:	bf00      	nop
    aeb0:	b003      	add	sp, #12
    aeb2:	f85d fb04 	ldr.w	pc, [sp], #4
    aeb6:	bf00      	nop
    aeb8:	1fff925c 	.word	0x1fff925c
    aebc:	1fff9258 	.word	0x1fff9258

0000aec0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    aec0:	b500      	push	{lr}
    aec2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aec4:	f7f5 fe8a 	bl	bdc <Sys_GetCoreID>
    aec8:	4603      	mov	r3, r0
    aeca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    aecc:	4a0d      	ldr	r2, [pc, #52]	; (af04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    aece:	9b01      	ldr	r3, [sp, #4]
    aed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aed4:	1e5a      	subs	r2, r3, #1
    aed6:	490b      	ldr	r1, [pc, #44]	; (af04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    aed8:	9b01      	ldr	r3, [sp, #4]
    aeda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    aede:	4a0a      	ldr	r2, [pc, #40]	; (af08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    aee0:	9b01      	ldr	r3, [sp, #4]
    aee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aee6:	f003 0301 	and.w	r3, r3, #1
    aeea:	2b00      	cmp	r3, #0
    aeec:	d106      	bne.n	aefc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    aeee:	4a05      	ldr	r2, [pc, #20]	; (af04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    aef0:	9b01      	ldr	r3, [sp, #4]
    aef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aef6:	2b00      	cmp	r3, #0
    aef8:	d100      	bne.n	aefc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aefa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aefc:	bf00      	nop
    aefe:	b003      	add	sp, #12
    af00:	f85d fb04 	ldr.w	pc, [sp], #4
    af04:	1fff925c 	.word	0x1fff925c
    af08:	1fff9258 	.word	0x1fff9258

0000af0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    af0c:	b500      	push	{lr}
    af0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af10:	f7f5 fe64 	bl	bdc <Sys_GetCoreID>
    af14:	4603      	mov	r3, r0
    af16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    af18:	4a10      	ldr	r2, [pc, #64]	; (af5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    af1a:	9b01      	ldr	r3, [sp, #4]
    af1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af20:	2b00      	cmp	r3, #0
    af22:	d10d      	bne.n	af40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    af24:	f7f5 fd8b 	bl	a3e <Port_schm_read_msr>
    af28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    af2a:	9b00      	ldr	r3, [sp, #0]
    af2c:	f003 0301 	and.w	r3, r3, #1
    af30:	2b00      	cmp	r3, #0
    af32:	d100      	bne.n	af36 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    af34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    af36:	490a      	ldr	r1, [pc, #40]	; (af60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    af38:	9b01      	ldr	r3, [sp, #4]
    af3a:	9a00      	ldr	r2, [sp, #0]
    af3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    af40:	4a06      	ldr	r2, [pc, #24]	; (af5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    af42:	9b01      	ldr	r3, [sp, #4]
    af44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af48:	1c5a      	adds	r2, r3, #1
    af4a:	4904      	ldr	r1, [pc, #16]	; (af5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    af4c:	9b01      	ldr	r3, [sp, #4]
    af4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    af52:	bf00      	nop
    af54:	b003      	add	sp, #12
    af56:	f85d fb04 	ldr.w	pc, [sp], #4
    af5a:	bf00      	nop
    af5c:	1fff9264 	.word	0x1fff9264
    af60:	1fff9260 	.word	0x1fff9260

0000af64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    af64:	b500      	push	{lr}
    af66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af68:	f7f5 fe38 	bl	bdc <Sys_GetCoreID>
    af6c:	4603      	mov	r3, r0
    af6e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    af70:	4a0d      	ldr	r2, [pc, #52]	; (afa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    af72:	9b01      	ldr	r3, [sp, #4]
    af74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af78:	1e5a      	subs	r2, r3, #1
    af7a:	490b      	ldr	r1, [pc, #44]	; (afa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    af7c:	9b01      	ldr	r3, [sp, #4]
    af7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    af82:	4a0a      	ldr	r2, [pc, #40]	; (afac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    af84:	9b01      	ldr	r3, [sp, #4]
    af86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af8a:	f003 0301 	and.w	r3, r3, #1
    af8e:	2b00      	cmp	r3, #0
    af90:	d106      	bne.n	afa0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    af92:	4a05      	ldr	r2, [pc, #20]	; (afa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    af94:	9b01      	ldr	r3, [sp, #4]
    af96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af9a:	2b00      	cmp	r3, #0
    af9c:	d100      	bne.n	afa0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    af9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    afa0:	bf00      	nop
    afa2:	b003      	add	sp, #12
    afa4:	f85d fb04 	ldr.w	pc, [sp], #4
    afa8:	1fff9264 	.word	0x1fff9264
    afac:	1fff9260 	.word	0x1fff9260

0000afb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    afb0:	b500      	push	{lr}
    afb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    afb4:	f7f5 fe12 	bl	bdc <Sys_GetCoreID>
    afb8:	4603      	mov	r3, r0
    afba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    afbc:	4a10      	ldr	r2, [pc, #64]	; (b000 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    afbe:	9b01      	ldr	r3, [sp, #4]
    afc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afc4:	2b00      	cmp	r3, #0
    afc6:	d10d      	bne.n	afe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    afc8:	f7f5 fd39 	bl	a3e <Port_schm_read_msr>
    afcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    afce:	9b00      	ldr	r3, [sp, #0]
    afd0:	f003 0301 	and.w	r3, r3, #1
    afd4:	2b00      	cmp	r3, #0
    afd6:	d100      	bne.n	afda <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    afd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    afda:	490a      	ldr	r1, [pc, #40]	; (b004 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    afdc:	9b01      	ldr	r3, [sp, #4]
    afde:	9a00      	ldr	r2, [sp, #0]
    afe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    afe4:	4a06      	ldr	r2, [pc, #24]	; (b000 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    afe6:	9b01      	ldr	r3, [sp, #4]
    afe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afec:	1c5a      	adds	r2, r3, #1
    afee:	4904      	ldr	r1, [pc, #16]	; (b000 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    aff0:	9b01      	ldr	r3, [sp, #4]
    aff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aff6:	bf00      	nop
    aff8:	b003      	add	sp, #12
    affa:	f85d fb04 	ldr.w	pc, [sp], #4
    affe:	bf00      	nop
    b000:	1fff926c 	.word	0x1fff926c
    b004:	1fff9268 	.word	0x1fff9268

0000b008 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    b008:	b500      	push	{lr}
    b00a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b00c:	f7f5 fde6 	bl	bdc <Sys_GetCoreID>
    b010:	4603      	mov	r3, r0
    b012:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    b014:	4a0d      	ldr	r2, [pc, #52]	; (b04c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    b016:	9b01      	ldr	r3, [sp, #4]
    b018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b01c:	1e5a      	subs	r2, r3, #1
    b01e:	490b      	ldr	r1, [pc, #44]	; (b04c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    b020:	9b01      	ldr	r3, [sp, #4]
    b022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    b026:	4a0a      	ldr	r2, [pc, #40]	; (b050 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    b028:	9b01      	ldr	r3, [sp, #4]
    b02a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b02e:	f003 0301 	and.w	r3, r3, #1
    b032:	2b00      	cmp	r3, #0
    b034:	d106      	bne.n	b044 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    b036:	4a05      	ldr	r2, [pc, #20]	; (b04c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    b038:	9b01      	ldr	r3, [sp, #4]
    b03a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b03e:	2b00      	cmp	r3, #0
    b040:	d100      	bne.n	b044 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b042:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b044:	bf00      	nop
    b046:	b003      	add	sp, #12
    b048:	f85d fb04 	ldr.w	pc, [sp], #4
    b04c:	1fff926c 	.word	0x1fff926c
    b050:	1fff9268 	.word	0x1fff9268

0000b054 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    b054:	b500      	push	{lr}
    b056:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b058:	f7f5 fdc0 	bl	bdc <Sys_GetCoreID>
    b05c:	4603      	mov	r3, r0
    b05e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    b060:	4a10      	ldr	r2, [pc, #64]	; (b0a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    b062:	9b01      	ldr	r3, [sp, #4]
    b064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b068:	2b00      	cmp	r3, #0
    b06a:	d10d      	bne.n	b088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b06c:	f7f5 fce7 	bl	a3e <Port_schm_read_msr>
    b070:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b072:	9b00      	ldr	r3, [sp, #0]
    b074:	f003 0301 	and.w	r3, r3, #1
    b078:	2b00      	cmp	r3, #0
    b07a:	d100      	bne.n	b07e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b07c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    b07e:	490a      	ldr	r1, [pc, #40]	; (b0a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    b080:	9b01      	ldr	r3, [sp, #4]
    b082:	9a00      	ldr	r2, [sp, #0]
    b084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    b088:	4a06      	ldr	r2, [pc, #24]	; (b0a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    b08a:	9b01      	ldr	r3, [sp, #4]
    b08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b090:	1c5a      	adds	r2, r3, #1
    b092:	4904      	ldr	r1, [pc, #16]	; (b0a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    b094:	9b01      	ldr	r3, [sp, #4]
    b096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b09a:	bf00      	nop
    b09c:	b003      	add	sp, #12
    b09e:	f85d fb04 	ldr.w	pc, [sp], #4
    b0a2:	bf00      	nop
    b0a4:	1fff9274 	.word	0x1fff9274
    b0a8:	1fff9270 	.word	0x1fff9270

0000b0ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    b0ac:	b500      	push	{lr}
    b0ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b0b0:	f7f5 fd94 	bl	bdc <Sys_GetCoreID>
    b0b4:	4603      	mov	r3, r0
    b0b6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    b0b8:	4a0d      	ldr	r2, [pc, #52]	; (b0f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    b0ba:	9b01      	ldr	r3, [sp, #4]
    b0bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0c0:	1e5a      	subs	r2, r3, #1
    b0c2:	490b      	ldr	r1, [pc, #44]	; (b0f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    b0c4:	9b01      	ldr	r3, [sp, #4]
    b0c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    b0ca:	4a0a      	ldr	r2, [pc, #40]	; (b0f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    b0cc:	9b01      	ldr	r3, [sp, #4]
    b0ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0d2:	f003 0301 	and.w	r3, r3, #1
    b0d6:	2b00      	cmp	r3, #0
    b0d8:	d106      	bne.n	b0e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    b0da:	4a05      	ldr	r2, [pc, #20]	; (b0f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    b0dc:	9b01      	ldr	r3, [sp, #4]
    b0de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0e2:	2b00      	cmp	r3, #0
    b0e4:	d100      	bne.n	b0e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b0e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b0e8:	bf00      	nop
    b0ea:	b003      	add	sp, #12
    b0ec:	f85d fb04 	ldr.w	pc, [sp], #4
    b0f0:	1fff9274 	.word	0x1fff9274
    b0f4:	1fff9270 	.word	0x1fff9270

0000b0f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    b0f8:	b500      	push	{lr}
    b0fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b0fc:	f7f5 fd6e 	bl	bdc <Sys_GetCoreID>
    b100:	4603      	mov	r3, r0
    b102:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    b104:	4a10      	ldr	r2, [pc, #64]	; (b148 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    b106:	9b01      	ldr	r3, [sp, #4]
    b108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b10c:	2b00      	cmp	r3, #0
    b10e:	d10d      	bne.n	b12c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b110:	f7f5 fc95 	bl	a3e <Port_schm_read_msr>
    b114:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b116:	9b00      	ldr	r3, [sp, #0]
    b118:	f003 0301 	and.w	r3, r3, #1
    b11c:	2b00      	cmp	r3, #0
    b11e:	d100      	bne.n	b122 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b120:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    b122:	490a      	ldr	r1, [pc, #40]	; (b14c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    b124:	9b01      	ldr	r3, [sp, #4]
    b126:	9a00      	ldr	r2, [sp, #0]
    b128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    b12c:	4a06      	ldr	r2, [pc, #24]	; (b148 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    b12e:	9b01      	ldr	r3, [sp, #4]
    b130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b134:	1c5a      	adds	r2, r3, #1
    b136:	4904      	ldr	r1, [pc, #16]	; (b148 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    b138:	9b01      	ldr	r3, [sp, #4]
    b13a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b13e:	bf00      	nop
    b140:	b003      	add	sp, #12
    b142:	f85d fb04 	ldr.w	pc, [sp], #4
    b146:	bf00      	nop
    b148:	1fff927c 	.word	0x1fff927c
    b14c:	1fff9278 	.word	0x1fff9278

0000b150 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    b150:	b500      	push	{lr}
    b152:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b154:	f7f5 fd42 	bl	bdc <Sys_GetCoreID>
    b158:	4603      	mov	r3, r0
    b15a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    b15c:	4a0d      	ldr	r2, [pc, #52]	; (b194 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    b15e:	9b01      	ldr	r3, [sp, #4]
    b160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b164:	1e5a      	subs	r2, r3, #1
    b166:	490b      	ldr	r1, [pc, #44]	; (b194 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    b168:	9b01      	ldr	r3, [sp, #4]
    b16a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    b16e:	4a0a      	ldr	r2, [pc, #40]	; (b198 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    b170:	9b01      	ldr	r3, [sp, #4]
    b172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b176:	f003 0301 	and.w	r3, r3, #1
    b17a:	2b00      	cmp	r3, #0
    b17c:	d106      	bne.n	b18c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    b17e:	4a05      	ldr	r2, [pc, #20]	; (b194 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    b180:	9b01      	ldr	r3, [sp, #4]
    b182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b186:	2b00      	cmp	r3, #0
    b188:	d100      	bne.n	b18c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b18a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b18c:	bf00      	nop
    b18e:	b003      	add	sp, #12
    b190:	f85d fb04 	ldr.w	pc, [sp], #4
    b194:	1fff927c 	.word	0x1fff927c
    b198:	1fff9278 	.word	0x1fff9278

0000b19c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    b19c:	b500      	push	{lr}
    b19e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b1a0:	f7f5 fd1c 	bl	bdc <Sys_GetCoreID>
    b1a4:	4603      	mov	r3, r0
    b1a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    b1a8:	4a10      	ldr	r2, [pc, #64]	; (b1ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    b1aa:	9b01      	ldr	r3, [sp, #4]
    b1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1b0:	2b00      	cmp	r3, #0
    b1b2:	d10d      	bne.n	b1d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b1b4:	f7f5 fc43 	bl	a3e <Port_schm_read_msr>
    b1b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b1ba:	9b00      	ldr	r3, [sp, #0]
    b1bc:	f003 0301 	and.w	r3, r3, #1
    b1c0:	2b00      	cmp	r3, #0
    b1c2:	d100      	bne.n	b1c6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b1c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    b1c6:	490a      	ldr	r1, [pc, #40]	; (b1f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    b1c8:	9b01      	ldr	r3, [sp, #4]
    b1ca:	9a00      	ldr	r2, [sp, #0]
    b1cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    b1d0:	4a06      	ldr	r2, [pc, #24]	; (b1ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    b1d2:	9b01      	ldr	r3, [sp, #4]
    b1d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1d8:	1c5a      	adds	r2, r3, #1
    b1da:	4904      	ldr	r1, [pc, #16]	; (b1ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    b1dc:	9b01      	ldr	r3, [sp, #4]
    b1de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b1e2:	bf00      	nop
    b1e4:	b003      	add	sp, #12
    b1e6:	f85d fb04 	ldr.w	pc, [sp], #4
    b1ea:	bf00      	nop
    b1ec:	1fff9284 	.word	0x1fff9284
    b1f0:	1fff9280 	.word	0x1fff9280

0000b1f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    b1f4:	b500      	push	{lr}
    b1f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b1f8:	f7f5 fcf0 	bl	bdc <Sys_GetCoreID>
    b1fc:	4603      	mov	r3, r0
    b1fe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    b200:	4a0d      	ldr	r2, [pc, #52]	; (b238 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    b202:	9b01      	ldr	r3, [sp, #4]
    b204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b208:	1e5a      	subs	r2, r3, #1
    b20a:	490b      	ldr	r1, [pc, #44]	; (b238 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    b20c:	9b01      	ldr	r3, [sp, #4]
    b20e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    b212:	4a0a      	ldr	r2, [pc, #40]	; (b23c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    b214:	9b01      	ldr	r3, [sp, #4]
    b216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b21a:	f003 0301 	and.w	r3, r3, #1
    b21e:	2b00      	cmp	r3, #0
    b220:	d106      	bne.n	b230 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    b222:	4a05      	ldr	r2, [pc, #20]	; (b238 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    b224:	9b01      	ldr	r3, [sp, #4]
    b226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b22a:	2b00      	cmp	r3, #0
    b22c:	d100      	bne.n	b230 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b22e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b230:	bf00      	nop
    b232:	b003      	add	sp, #12
    b234:	f85d fb04 	ldr.w	pc, [sp], #4
    b238:	1fff9284 	.word	0x1fff9284
    b23c:	1fff9280 	.word	0x1fff9280

0000b240 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    b240:	b500      	push	{lr}
    b242:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b244:	f7f5 fcca 	bl	bdc <Sys_GetCoreID>
    b248:	4603      	mov	r3, r0
    b24a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    b24c:	4a10      	ldr	r2, [pc, #64]	; (b290 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    b24e:	9b01      	ldr	r3, [sp, #4]
    b250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b254:	2b00      	cmp	r3, #0
    b256:	d10d      	bne.n	b274 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b258:	f7f5 fbf1 	bl	a3e <Port_schm_read_msr>
    b25c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b25e:	9b00      	ldr	r3, [sp, #0]
    b260:	f003 0301 	and.w	r3, r3, #1
    b264:	2b00      	cmp	r3, #0
    b266:	d100      	bne.n	b26a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b268:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    b26a:	490a      	ldr	r1, [pc, #40]	; (b294 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    b26c:	9b01      	ldr	r3, [sp, #4]
    b26e:	9a00      	ldr	r2, [sp, #0]
    b270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    b274:	4a06      	ldr	r2, [pc, #24]	; (b290 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    b276:	9b01      	ldr	r3, [sp, #4]
    b278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b27c:	1c5a      	adds	r2, r3, #1
    b27e:	4904      	ldr	r1, [pc, #16]	; (b290 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    b280:	9b01      	ldr	r3, [sp, #4]
    b282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b286:	bf00      	nop
    b288:	b003      	add	sp, #12
    b28a:	f85d fb04 	ldr.w	pc, [sp], #4
    b28e:	bf00      	nop
    b290:	1fff928c 	.word	0x1fff928c
    b294:	1fff9288 	.word	0x1fff9288

0000b298 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    b298:	b500      	push	{lr}
    b29a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b29c:	f7f5 fc9e 	bl	bdc <Sys_GetCoreID>
    b2a0:	4603      	mov	r3, r0
    b2a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    b2a4:	4a0d      	ldr	r2, [pc, #52]	; (b2dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    b2a6:	9b01      	ldr	r3, [sp, #4]
    b2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2ac:	1e5a      	subs	r2, r3, #1
    b2ae:	490b      	ldr	r1, [pc, #44]	; (b2dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    b2b0:	9b01      	ldr	r3, [sp, #4]
    b2b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    b2b6:	4a0a      	ldr	r2, [pc, #40]	; (b2e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    b2b8:	9b01      	ldr	r3, [sp, #4]
    b2ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2be:	f003 0301 	and.w	r3, r3, #1
    b2c2:	2b00      	cmp	r3, #0
    b2c4:	d106      	bne.n	b2d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    b2c6:	4a05      	ldr	r2, [pc, #20]	; (b2dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    b2c8:	9b01      	ldr	r3, [sp, #4]
    b2ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2ce:	2b00      	cmp	r3, #0
    b2d0:	d100      	bne.n	b2d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b2d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b2d4:	bf00      	nop
    b2d6:	b003      	add	sp, #12
    b2d8:	f85d fb04 	ldr.w	pc, [sp], #4
    b2dc:	1fff928c 	.word	0x1fff928c
    b2e0:	1fff9288 	.word	0x1fff9288

0000b2e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    b2e4:	b500      	push	{lr}
    b2e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b2e8:	f7f5 fc78 	bl	bdc <Sys_GetCoreID>
    b2ec:	4603      	mov	r3, r0
    b2ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    b2f0:	4a10      	ldr	r2, [pc, #64]	; (b334 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    b2f2:	9b01      	ldr	r3, [sp, #4]
    b2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2f8:	2b00      	cmp	r3, #0
    b2fa:	d10d      	bne.n	b318 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b2fc:	f7f5 fb9f 	bl	a3e <Port_schm_read_msr>
    b300:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b302:	9b00      	ldr	r3, [sp, #0]
    b304:	f003 0301 	and.w	r3, r3, #1
    b308:	2b00      	cmp	r3, #0
    b30a:	d100      	bne.n	b30e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b30c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    b30e:	490a      	ldr	r1, [pc, #40]	; (b338 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    b310:	9b01      	ldr	r3, [sp, #4]
    b312:	9a00      	ldr	r2, [sp, #0]
    b314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    b318:	4a06      	ldr	r2, [pc, #24]	; (b334 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    b31a:	9b01      	ldr	r3, [sp, #4]
    b31c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b320:	1c5a      	adds	r2, r3, #1
    b322:	4904      	ldr	r1, [pc, #16]	; (b334 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    b324:	9b01      	ldr	r3, [sp, #4]
    b326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b32a:	bf00      	nop
    b32c:	b003      	add	sp, #12
    b32e:	f85d fb04 	ldr.w	pc, [sp], #4
    b332:	bf00      	nop
    b334:	1fff9294 	.word	0x1fff9294
    b338:	1fff9290 	.word	0x1fff9290

0000b33c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    b33c:	b500      	push	{lr}
    b33e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b340:	f7f5 fc4c 	bl	bdc <Sys_GetCoreID>
    b344:	4603      	mov	r3, r0
    b346:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    b348:	4a0d      	ldr	r2, [pc, #52]	; (b380 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    b34a:	9b01      	ldr	r3, [sp, #4]
    b34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b350:	1e5a      	subs	r2, r3, #1
    b352:	490b      	ldr	r1, [pc, #44]	; (b380 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    b354:	9b01      	ldr	r3, [sp, #4]
    b356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    b35a:	4a0a      	ldr	r2, [pc, #40]	; (b384 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    b35c:	9b01      	ldr	r3, [sp, #4]
    b35e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b362:	f003 0301 	and.w	r3, r3, #1
    b366:	2b00      	cmp	r3, #0
    b368:	d106      	bne.n	b378 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    b36a:	4a05      	ldr	r2, [pc, #20]	; (b380 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    b36c:	9b01      	ldr	r3, [sp, #4]
    b36e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b372:	2b00      	cmp	r3, #0
    b374:	d100      	bne.n	b378 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b376:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b378:	bf00      	nop
    b37a:	b003      	add	sp, #12
    b37c:	f85d fb04 	ldr.w	pc, [sp], #4
    b380:	1fff9294 	.word	0x1fff9294
    b384:	1fff9290 	.word	0x1fff9290

0000b388 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    b388:	b500      	push	{lr}
    b38a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b38c:	f7f5 fc26 	bl	bdc <Sys_GetCoreID>
    b390:	4603      	mov	r3, r0
    b392:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    b394:	4a10      	ldr	r2, [pc, #64]	; (b3d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    b396:	9b01      	ldr	r3, [sp, #4]
    b398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b39c:	2b00      	cmp	r3, #0
    b39e:	d10d      	bne.n	b3bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b3a0:	f7f5 fb4d 	bl	a3e <Port_schm_read_msr>
    b3a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b3a6:	9b00      	ldr	r3, [sp, #0]
    b3a8:	f003 0301 	and.w	r3, r3, #1
    b3ac:	2b00      	cmp	r3, #0
    b3ae:	d100      	bne.n	b3b2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b3b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    b3b2:	490a      	ldr	r1, [pc, #40]	; (b3dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    b3b4:	9b01      	ldr	r3, [sp, #4]
    b3b6:	9a00      	ldr	r2, [sp, #0]
    b3b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    b3bc:	4a06      	ldr	r2, [pc, #24]	; (b3d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    b3be:	9b01      	ldr	r3, [sp, #4]
    b3c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3c4:	1c5a      	adds	r2, r3, #1
    b3c6:	4904      	ldr	r1, [pc, #16]	; (b3d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    b3c8:	9b01      	ldr	r3, [sp, #4]
    b3ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b3ce:	bf00      	nop
    b3d0:	b003      	add	sp, #12
    b3d2:	f85d fb04 	ldr.w	pc, [sp], #4
    b3d6:	bf00      	nop
    b3d8:	1fff929c 	.word	0x1fff929c
    b3dc:	1fff9298 	.word	0x1fff9298

0000b3e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    b3e0:	b500      	push	{lr}
    b3e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b3e4:	f7f5 fbfa 	bl	bdc <Sys_GetCoreID>
    b3e8:	4603      	mov	r3, r0
    b3ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    b3ec:	4a0d      	ldr	r2, [pc, #52]	; (b424 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    b3ee:	9b01      	ldr	r3, [sp, #4]
    b3f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3f4:	1e5a      	subs	r2, r3, #1
    b3f6:	490b      	ldr	r1, [pc, #44]	; (b424 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    b3f8:	9b01      	ldr	r3, [sp, #4]
    b3fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    b3fe:	4a0a      	ldr	r2, [pc, #40]	; (b428 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    b400:	9b01      	ldr	r3, [sp, #4]
    b402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b406:	f003 0301 	and.w	r3, r3, #1
    b40a:	2b00      	cmp	r3, #0
    b40c:	d106      	bne.n	b41c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    b40e:	4a05      	ldr	r2, [pc, #20]	; (b424 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    b410:	9b01      	ldr	r3, [sp, #4]
    b412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b416:	2b00      	cmp	r3, #0
    b418:	d100      	bne.n	b41c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b41a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b41c:	bf00      	nop
    b41e:	b003      	add	sp, #12
    b420:	f85d fb04 	ldr.w	pc, [sp], #4
    b424:	1fff929c 	.word	0x1fff929c
    b428:	1fff9298 	.word	0x1fff9298

0000b42c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    b42c:	b500      	push	{lr}
    b42e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b430:	f7f5 fbd4 	bl	bdc <Sys_GetCoreID>
    b434:	4603      	mov	r3, r0
    b436:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    b438:	4a10      	ldr	r2, [pc, #64]	; (b47c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    b43a:	9b01      	ldr	r3, [sp, #4]
    b43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b440:	2b00      	cmp	r3, #0
    b442:	d10d      	bne.n	b460 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b444:	f7f5 fafb 	bl	a3e <Port_schm_read_msr>
    b448:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b44a:	9b00      	ldr	r3, [sp, #0]
    b44c:	f003 0301 	and.w	r3, r3, #1
    b450:	2b00      	cmp	r3, #0
    b452:	d100      	bne.n	b456 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b454:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    b456:	490a      	ldr	r1, [pc, #40]	; (b480 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    b458:	9b01      	ldr	r3, [sp, #4]
    b45a:	9a00      	ldr	r2, [sp, #0]
    b45c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    b460:	4a06      	ldr	r2, [pc, #24]	; (b47c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    b462:	9b01      	ldr	r3, [sp, #4]
    b464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b468:	1c5a      	adds	r2, r3, #1
    b46a:	4904      	ldr	r1, [pc, #16]	; (b47c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    b46c:	9b01      	ldr	r3, [sp, #4]
    b46e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b472:	bf00      	nop
    b474:	b003      	add	sp, #12
    b476:	f85d fb04 	ldr.w	pc, [sp], #4
    b47a:	bf00      	nop
    b47c:	1fff92a4 	.word	0x1fff92a4
    b480:	1fff92a0 	.word	0x1fff92a0

0000b484 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    b484:	b500      	push	{lr}
    b486:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b488:	f7f5 fba8 	bl	bdc <Sys_GetCoreID>
    b48c:	4603      	mov	r3, r0
    b48e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    b490:	4a0d      	ldr	r2, [pc, #52]	; (b4c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    b492:	9b01      	ldr	r3, [sp, #4]
    b494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b498:	1e5a      	subs	r2, r3, #1
    b49a:	490b      	ldr	r1, [pc, #44]	; (b4c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    b49c:	9b01      	ldr	r3, [sp, #4]
    b49e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    b4a2:	4a0a      	ldr	r2, [pc, #40]	; (b4cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    b4a4:	9b01      	ldr	r3, [sp, #4]
    b4a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4aa:	f003 0301 	and.w	r3, r3, #1
    b4ae:	2b00      	cmp	r3, #0
    b4b0:	d106      	bne.n	b4c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    b4b2:	4a05      	ldr	r2, [pc, #20]	; (b4c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    b4b4:	9b01      	ldr	r3, [sp, #4]
    b4b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4ba:	2b00      	cmp	r3, #0
    b4bc:	d100      	bne.n	b4c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b4be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b4c0:	bf00      	nop
    b4c2:	b003      	add	sp, #12
    b4c4:	f85d fb04 	ldr.w	pc, [sp], #4
    b4c8:	1fff92a4 	.word	0x1fff92a4
    b4cc:	1fff92a0 	.word	0x1fff92a0

0000b4d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    b4d0:	b500      	push	{lr}
    b4d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4d4:	f7f5 fb82 	bl	bdc <Sys_GetCoreID>
    b4d8:	4603      	mov	r3, r0
    b4da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    b4dc:	4a10      	ldr	r2, [pc, #64]	; (b520 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    b4de:	9b01      	ldr	r3, [sp, #4]
    b4e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4e4:	2b00      	cmp	r3, #0
    b4e6:	d10d      	bne.n	b504 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b4e8:	f7f5 faa9 	bl	a3e <Port_schm_read_msr>
    b4ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b4ee:	9b00      	ldr	r3, [sp, #0]
    b4f0:	f003 0301 	and.w	r3, r3, #1
    b4f4:	2b00      	cmp	r3, #0
    b4f6:	d100      	bne.n	b4fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b4f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    b4fa:	490a      	ldr	r1, [pc, #40]	; (b524 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    b4fc:	9b01      	ldr	r3, [sp, #4]
    b4fe:	9a00      	ldr	r2, [sp, #0]
    b500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    b504:	4a06      	ldr	r2, [pc, #24]	; (b520 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    b506:	9b01      	ldr	r3, [sp, #4]
    b508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b50c:	1c5a      	adds	r2, r3, #1
    b50e:	4904      	ldr	r1, [pc, #16]	; (b520 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    b510:	9b01      	ldr	r3, [sp, #4]
    b512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b516:	bf00      	nop
    b518:	b003      	add	sp, #12
    b51a:	f85d fb04 	ldr.w	pc, [sp], #4
    b51e:	bf00      	nop
    b520:	1fff92ac 	.word	0x1fff92ac
    b524:	1fff92a8 	.word	0x1fff92a8

0000b528 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    b528:	b500      	push	{lr}
    b52a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b52c:	f7f5 fb56 	bl	bdc <Sys_GetCoreID>
    b530:	4603      	mov	r3, r0
    b532:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    b534:	4a0d      	ldr	r2, [pc, #52]	; (b56c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    b536:	9b01      	ldr	r3, [sp, #4]
    b538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b53c:	1e5a      	subs	r2, r3, #1
    b53e:	490b      	ldr	r1, [pc, #44]	; (b56c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    b540:	9b01      	ldr	r3, [sp, #4]
    b542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    b546:	4a0a      	ldr	r2, [pc, #40]	; (b570 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    b548:	9b01      	ldr	r3, [sp, #4]
    b54a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b54e:	f003 0301 	and.w	r3, r3, #1
    b552:	2b00      	cmp	r3, #0
    b554:	d106      	bne.n	b564 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    b556:	4a05      	ldr	r2, [pc, #20]	; (b56c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    b558:	9b01      	ldr	r3, [sp, #4]
    b55a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b55e:	2b00      	cmp	r3, #0
    b560:	d100      	bne.n	b564 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b562:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b564:	bf00      	nop
    b566:	b003      	add	sp, #12
    b568:	f85d fb04 	ldr.w	pc, [sp], #4
    b56c:	1fff92ac 	.word	0x1fff92ac
    b570:	1fff92a8 	.word	0x1fff92a8

0000b574 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    b574:	b500      	push	{lr}
    b576:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b578:	f7f5 fb30 	bl	bdc <Sys_GetCoreID>
    b57c:	4603      	mov	r3, r0
    b57e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    b580:	4a10      	ldr	r2, [pc, #64]	; (b5c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    b582:	9b01      	ldr	r3, [sp, #4]
    b584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b588:	2b00      	cmp	r3, #0
    b58a:	d10d      	bne.n	b5a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b58c:	f7f5 fa57 	bl	a3e <Port_schm_read_msr>
    b590:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b592:	9b00      	ldr	r3, [sp, #0]
    b594:	f003 0301 	and.w	r3, r3, #1
    b598:	2b00      	cmp	r3, #0
    b59a:	d100      	bne.n	b59e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b59c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    b59e:	490a      	ldr	r1, [pc, #40]	; (b5c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    b5a0:	9b01      	ldr	r3, [sp, #4]
    b5a2:	9a00      	ldr	r2, [sp, #0]
    b5a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    b5a8:	4a06      	ldr	r2, [pc, #24]	; (b5c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    b5aa:	9b01      	ldr	r3, [sp, #4]
    b5ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5b0:	1c5a      	adds	r2, r3, #1
    b5b2:	4904      	ldr	r1, [pc, #16]	; (b5c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    b5b4:	9b01      	ldr	r3, [sp, #4]
    b5b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b5ba:	bf00      	nop
    b5bc:	b003      	add	sp, #12
    b5be:	f85d fb04 	ldr.w	pc, [sp], #4
    b5c2:	bf00      	nop
    b5c4:	1fff92b4 	.word	0x1fff92b4
    b5c8:	1fff92b0 	.word	0x1fff92b0

0000b5cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    b5cc:	b500      	push	{lr}
    b5ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5d0:	f7f5 fb04 	bl	bdc <Sys_GetCoreID>
    b5d4:	4603      	mov	r3, r0
    b5d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    b5d8:	4a0d      	ldr	r2, [pc, #52]	; (b610 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    b5da:	9b01      	ldr	r3, [sp, #4]
    b5dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5e0:	1e5a      	subs	r2, r3, #1
    b5e2:	490b      	ldr	r1, [pc, #44]	; (b610 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    b5e4:	9b01      	ldr	r3, [sp, #4]
    b5e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    b5ea:	4a0a      	ldr	r2, [pc, #40]	; (b614 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    b5ec:	9b01      	ldr	r3, [sp, #4]
    b5ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5f2:	f003 0301 	and.w	r3, r3, #1
    b5f6:	2b00      	cmp	r3, #0
    b5f8:	d106      	bne.n	b608 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    b5fa:	4a05      	ldr	r2, [pc, #20]	; (b610 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    b5fc:	9b01      	ldr	r3, [sp, #4]
    b5fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b602:	2b00      	cmp	r3, #0
    b604:	d100      	bne.n	b608 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b606:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b608:	bf00      	nop
    b60a:	b003      	add	sp, #12
    b60c:	f85d fb04 	ldr.w	pc, [sp], #4
    b610:	1fff92b4 	.word	0x1fff92b4
    b614:	1fff92b0 	.word	0x1fff92b0

0000b618 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    b618:	b500      	push	{lr}
    b61a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b61c:	f7f5 fade 	bl	bdc <Sys_GetCoreID>
    b620:	4603      	mov	r3, r0
    b622:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    b624:	4a10      	ldr	r2, [pc, #64]	; (b668 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    b626:	9b01      	ldr	r3, [sp, #4]
    b628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b62c:	2b00      	cmp	r3, #0
    b62e:	d10d      	bne.n	b64c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b630:	f7f5 fa05 	bl	a3e <Port_schm_read_msr>
    b634:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b636:	9b00      	ldr	r3, [sp, #0]
    b638:	f003 0301 	and.w	r3, r3, #1
    b63c:	2b00      	cmp	r3, #0
    b63e:	d100      	bne.n	b642 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b640:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    b642:	490a      	ldr	r1, [pc, #40]	; (b66c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    b644:	9b01      	ldr	r3, [sp, #4]
    b646:	9a00      	ldr	r2, [sp, #0]
    b648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    b64c:	4a06      	ldr	r2, [pc, #24]	; (b668 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    b64e:	9b01      	ldr	r3, [sp, #4]
    b650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b654:	1c5a      	adds	r2, r3, #1
    b656:	4904      	ldr	r1, [pc, #16]	; (b668 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    b658:	9b01      	ldr	r3, [sp, #4]
    b65a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b65e:	bf00      	nop
    b660:	b003      	add	sp, #12
    b662:	f85d fb04 	ldr.w	pc, [sp], #4
    b666:	bf00      	nop
    b668:	1fff92bc 	.word	0x1fff92bc
    b66c:	1fff92b8 	.word	0x1fff92b8

0000b670 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    b670:	b500      	push	{lr}
    b672:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b674:	f7f5 fab2 	bl	bdc <Sys_GetCoreID>
    b678:	4603      	mov	r3, r0
    b67a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    b67c:	4a0d      	ldr	r2, [pc, #52]	; (b6b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    b67e:	9b01      	ldr	r3, [sp, #4]
    b680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b684:	1e5a      	subs	r2, r3, #1
    b686:	490b      	ldr	r1, [pc, #44]	; (b6b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    b688:	9b01      	ldr	r3, [sp, #4]
    b68a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    b68e:	4a0a      	ldr	r2, [pc, #40]	; (b6b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    b690:	9b01      	ldr	r3, [sp, #4]
    b692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b696:	f003 0301 	and.w	r3, r3, #1
    b69a:	2b00      	cmp	r3, #0
    b69c:	d106      	bne.n	b6ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    b69e:	4a05      	ldr	r2, [pc, #20]	; (b6b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    b6a0:	9b01      	ldr	r3, [sp, #4]
    b6a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6a6:	2b00      	cmp	r3, #0
    b6a8:	d100      	bne.n	b6ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b6aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b6ac:	bf00      	nop
    b6ae:	b003      	add	sp, #12
    b6b0:	f85d fb04 	ldr.w	pc, [sp], #4
    b6b4:	1fff92bc 	.word	0x1fff92bc
    b6b8:	1fff92b8 	.word	0x1fff92b8

0000b6bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    b6bc:	b500      	push	{lr}
    b6be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b6c0:	f7f5 fa8c 	bl	bdc <Sys_GetCoreID>
    b6c4:	4603      	mov	r3, r0
    b6c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    b6c8:	4a10      	ldr	r2, [pc, #64]	; (b70c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    b6ca:	9b01      	ldr	r3, [sp, #4]
    b6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6d0:	2b00      	cmp	r3, #0
    b6d2:	d10d      	bne.n	b6f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b6d4:	f7f5 f9b3 	bl	a3e <Port_schm_read_msr>
    b6d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b6da:	9b00      	ldr	r3, [sp, #0]
    b6dc:	f003 0301 	and.w	r3, r3, #1
    b6e0:	2b00      	cmp	r3, #0
    b6e2:	d100      	bne.n	b6e6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b6e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    b6e6:	490a      	ldr	r1, [pc, #40]	; (b710 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    b6e8:	9b01      	ldr	r3, [sp, #4]
    b6ea:	9a00      	ldr	r2, [sp, #0]
    b6ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    b6f0:	4a06      	ldr	r2, [pc, #24]	; (b70c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    b6f2:	9b01      	ldr	r3, [sp, #4]
    b6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6f8:	1c5a      	adds	r2, r3, #1
    b6fa:	4904      	ldr	r1, [pc, #16]	; (b70c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    b6fc:	9b01      	ldr	r3, [sp, #4]
    b6fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b702:	bf00      	nop
    b704:	b003      	add	sp, #12
    b706:	f85d fb04 	ldr.w	pc, [sp], #4
    b70a:	bf00      	nop
    b70c:	1fff92c4 	.word	0x1fff92c4
    b710:	1fff92c0 	.word	0x1fff92c0

0000b714 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    b714:	b500      	push	{lr}
    b716:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b718:	f7f5 fa60 	bl	bdc <Sys_GetCoreID>
    b71c:	4603      	mov	r3, r0
    b71e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    b720:	4a0d      	ldr	r2, [pc, #52]	; (b758 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    b722:	9b01      	ldr	r3, [sp, #4]
    b724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b728:	1e5a      	subs	r2, r3, #1
    b72a:	490b      	ldr	r1, [pc, #44]	; (b758 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    b72c:	9b01      	ldr	r3, [sp, #4]
    b72e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    b732:	4a0a      	ldr	r2, [pc, #40]	; (b75c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    b734:	9b01      	ldr	r3, [sp, #4]
    b736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b73a:	f003 0301 	and.w	r3, r3, #1
    b73e:	2b00      	cmp	r3, #0
    b740:	d106      	bne.n	b750 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    b742:	4a05      	ldr	r2, [pc, #20]	; (b758 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    b744:	9b01      	ldr	r3, [sp, #4]
    b746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b74a:	2b00      	cmp	r3, #0
    b74c:	d100      	bne.n	b750 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b74e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b750:	bf00      	nop
    b752:	b003      	add	sp, #12
    b754:	f85d fb04 	ldr.w	pc, [sp], #4
    b758:	1fff92c4 	.word	0x1fff92c4
    b75c:	1fff92c0 	.word	0x1fff92c0

0000b760 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    b760:	b500      	push	{lr}
    b762:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b764:	f7f5 fa3a 	bl	bdc <Sys_GetCoreID>
    b768:	4603      	mov	r3, r0
    b76a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    b76c:	4a10      	ldr	r2, [pc, #64]	; (b7b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    b76e:	9b01      	ldr	r3, [sp, #4]
    b770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b774:	2b00      	cmp	r3, #0
    b776:	d10d      	bne.n	b794 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b778:	f7f5 f961 	bl	a3e <Port_schm_read_msr>
    b77c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b77e:	9b00      	ldr	r3, [sp, #0]
    b780:	f003 0301 	and.w	r3, r3, #1
    b784:	2b00      	cmp	r3, #0
    b786:	d100      	bne.n	b78a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b788:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    b78a:	490a      	ldr	r1, [pc, #40]	; (b7b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    b78c:	9b01      	ldr	r3, [sp, #4]
    b78e:	9a00      	ldr	r2, [sp, #0]
    b790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    b794:	4a06      	ldr	r2, [pc, #24]	; (b7b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    b796:	9b01      	ldr	r3, [sp, #4]
    b798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b79c:	1c5a      	adds	r2, r3, #1
    b79e:	4904      	ldr	r1, [pc, #16]	; (b7b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    b7a0:	9b01      	ldr	r3, [sp, #4]
    b7a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b7a6:	bf00      	nop
    b7a8:	b003      	add	sp, #12
    b7aa:	f85d fb04 	ldr.w	pc, [sp], #4
    b7ae:	bf00      	nop
    b7b0:	1fff92cc 	.word	0x1fff92cc
    b7b4:	1fff92c8 	.word	0x1fff92c8

0000b7b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    b7b8:	b500      	push	{lr}
    b7ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b7bc:	f7f5 fa0e 	bl	bdc <Sys_GetCoreID>
    b7c0:	4603      	mov	r3, r0
    b7c2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    b7c4:	4a0d      	ldr	r2, [pc, #52]	; (b7fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    b7c6:	9b01      	ldr	r3, [sp, #4]
    b7c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7cc:	1e5a      	subs	r2, r3, #1
    b7ce:	490b      	ldr	r1, [pc, #44]	; (b7fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    b7d0:	9b01      	ldr	r3, [sp, #4]
    b7d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    b7d6:	4a0a      	ldr	r2, [pc, #40]	; (b800 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    b7d8:	9b01      	ldr	r3, [sp, #4]
    b7da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7de:	f003 0301 	and.w	r3, r3, #1
    b7e2:	2b00      	cmp	r3, #0
    b7e4:	d106      	bne.n	b7f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    b7e6:	4a05      	ldr	r2, [pc, #20]	; (b7fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    b7e8:	9b01      	ldr	r3, [sp, #4]
    b7ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7ee:	2b00      	cmp	r3, #0
    b7f0:	d100      	bne.n	b7f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b7f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b7f4:	bf00      	nop
    b7f6:	b003      	add	sp, #12
    b7f8:	f85d fb04 	ldr.w	pc, [sp], #4
    b7fc:	1fff92cc 	.word	0x1fff92cc
    b800:	1fff92c8 	.word	0x1fff92c8

0000b804 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    b804:	bf00      	nop
    b806:	4770      	bx	lr

0000b808 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    b808:	b510      	push	{r4, lr}
    b80a:	b084      	sub	sp, #16
    b80c:	4604      	mov	r4, r0
    b80e:	4608      	mov	r0, r1
    b810:	4611      	mov	r1, r2
    b812:	461a      	mov	r2, r3
    b814:	4623      	mov	r3, r4
    b816:	f8ad 3006 	strh.w	r3, [sp, #6]
    b81a:	4603      	mov	r3, r0
    b81c:	f88d 3005 	strb.w	r3, [sp, #5]
    b820:	460b      	mov	r3, r1
    b822:	f88d 3004 	strb.w	r3, [sp, #4]
    b826:	4613      	mov	r3, r2
    b828:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b82c:	f7f5 f9d6 	bl	bdc <Sys_GetCoreID>
    b830:	4603      	mov	r3, r0
    b832:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    b834:	490d      	ldr	r1, [pc, #52]	; (b86c <Det_ReportError+0x64>)
    b836:	9b03      	ldr	r3, [sp, #12]
    b838:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b83c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    b840:	4a0b      	ldr	r2, [pc, #44]	; (b870 <Det_ReportError+0x68>)
    b842:	9b03      	ldr	r3, [sp, #12]
    b844:	4413      	add	r3, r2
    b846:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b84a:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    b84c:	4a09      	ldr	r2, [pc, #36]	; (b874 <Det_ReportError+0x6c>)
    b84e:	9b03      	ldr	r3, [sp, #12]
    b850:	4413      	add	r3, r2
    b852:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b856:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    b858:	4a07      	ldr	r2, [pc, #28]	; (b878 <Det_ReportError+0x70>)
    b85a:	9b03      	ldr	r3, [sp, #12]
    b85c:	4413      	add	r3, r2
    b85e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b862:	701a      	strb	r2, [r3, #0]

    return E_OK;
    b864:	2300      	movs	r3, #0
}
    b866:	4618      	mov	r0, r3
    b868:	b004      	add	sp, #16
    b86a:	bd10      	pop	{r4, pc}
    b86c:	1fff92f8 	.word	0x1fff92f8
    b870:	1fff92d0 	.word	0x1fff92d0
    b874:	1fff92d4 	.word	0x1fff92d4
    b878:	1fff92d8 	.word	0x1fff92d8

0000b87c <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
    b87c:	b510      	push	{r4, lr}
    b87e:	b084      	sub	sp, #16
    b880:	4604      	mov	r4, r0
    b882:	4608      	mov	r0, r1
    b884:	4611      	mov	r1, r2
    b886:	461a      	mov	r2, r3
    b888:	4623      	mov	r3, r4
    b88a:	f8ad 3006 	strh.w	r3, [sp, #6]
    b88e:	4603      	mov	r3, r0
    b890:	f88d 3005 	strb.w	r3, [sp, #5]
    b894:	460b      	mov	r3, r1
    b896:	f88d 3004 	strb.w	r3, [sp, #4]
    b89a:	4613      	mov	r3, r2
    b89c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b8a0:	f7f5 f99c 	bl	bdc <Sys_GetCoreID>
    b8a4:	4603      	mov	r3, r0
    b8a6:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
    b8a8:	490d      	ldr	r1, [pc, #52]	; (b8e0 <Det_ReportRuntimeError+0x64>)
    b8aa:	9b03      	ldr	r3, [sp, #12]
    b8ac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b8b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
    b8b4:	4a0b      	ldr	r2, [pc, #44]	; (b8e4 <Det_ReportRuntimeError+0x68>)
    b8b6:	9b03      	ldr	r3, [sp, #12]
    b8b8:	4413      	add	r3, r2
    b8ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b8be:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
    b8c0:	4a09      	ldr	r2, [pc, #36]	; (b8e8 <Det_ReportRuntimeError+0x6c>)
    b8c2:	9b03      	ldr	r3, [sp, #12]
    b8c4:	4413      	add	r3, r2
    b8c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b8ca:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
    b8cc:	4a07      	ldr	r2, [pc, #28]	; (b8ec <Det_ReportRuntimeError+0x70>)
    b8ce:	9b03      	ldr	r3, [sp, #12]
    b8d0:	4413      	add	r3, r2
    b8d2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b8d6:	701a      	strb	r2, [r3, #0]

    return E_OK;
    b8d8:	2300      	movs	r3, #0
}
    b8da:	4618      	mov	r0, r3
    b8dc:	b004      	add	sp, #16
    b8de:	bd10      	pop	{r4, pc}
    b8e0:	1fff92fc 	.word	0x1fff92fc
    b8e4:	1fff92dc 	.word	0x1fff92dc
    b8e8:	1fff92e0 	.word	0x1fff92e0
    b8ec:	1fff92e4 	.word	0x1fff92e4

0000b8f0 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
    b8f0:	b510      	push	{r4, lr}
    b8f2:	b084      	sub	sp, #16
    b8f4:	4604      	mov	r4, r0
    b8f6:	4608      	mov	r0, r1
    b8f8:	4611      	mov	r1, r2
    b8fa:	461a      	mov	r2, r3
    b8fc:	4623      	mov	r3, r4
    b8fe:	f8ad 3006 	strh.w	r3, [sp, #6]
    b902:	4603      	mov	r3, r0
    b904:	f88d 3005 	strb.w	r3, [sp, #5]
    b908:	460b      	mov	r3, r1
    b90a:	f88d 3004 	strb.w	r3, [sp, #4]
    b90e:	4613      	mov	r3, r2
    b910:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b914:	f7f5 f962 	bl	bdc <Sys_GetCoreID>
    b918:	4603      	mov	r3, r0
    b91a:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
    b91c:	490d      	ldr	r1, [pc, #52]	; (b954 <Det_ReportTransientFault+0x64>)
    b91e:	9b03      	ldr	r3, [sp, #12]
    b920:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b924:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
    b928:	4a0b      	ldr	r2, [pc, #44]	; (b958 <Det_ReportTransientFault+0x68>)
    b92a:	9b03      	ldr	r3, [sp, #12]
    b92c:	4413      	add	r3, r2
    b92e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b932:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
    b934:	4a09      	ldr	r2, [pc, #36]	; (b95c <Det_ReportTransientFault+0x6c>)
    b936:	9b03      	ldr	r3, [sp, #12]
    b938:	4413      	add	r3, r2
    b93a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b93e:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
    b940:	4a07      	ldr	r2, [pc, #28]	; (b960 <Det_ReportTransientFault+0x70>)
    b942:	9b03      	ldr	r3, [sp, #12]
    b944:	4413      	add	r3, r2
    b946:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b94a:	701a      	strb	r2, [r3, #0]

    return E_OK;
    b94c:	2300      	movs	r3, #0
}
    b94e:	4618      	mov	r0, r3
    b950:	b004      	add	sp, #16
    b952:	bd10      	pop	{r4, pc}
    b954:	1fff92f4 	.word	0x1fff92f4
    b958:	1fff92e8 	.word	0x1fff92e8
    b95c:	1fff92ec 	.word	0x1fff92ec
    b960:	1fff92f0 	.word	0x1fff92f0

0000b964 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
    b964:	bf00      	nop
    b966:	4770      	bx	lr

0000b968 <Clock_Ip_au8DividerCallbackIndex>:
    b968:	0c00 0e0d 0201 0603 0409 0a07 0805 000b     ................

0000b978 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000b988 <Clock_Ip_au8XoscCallbackIndex>:
    b988:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000b998 <Clock_Ip_au8IrcoscCallbackIndex>:
    b998:	0100 0302 0004 0000 0000 0000 0000 0000     ................

0000b9a8 <Clock_Ip_au8GateCallbackIndex>:
    b9a8:	0200 0601 0301 0104 0500 0000 0000 0000     ................

0000b9b8 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000b9c8 <Clock_Ip_au8PllCallbackIndex>:
    b9c8:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000b9d8 <Clock_Ip_au8SelectorCallbackIndex>:
    b9d8:	0800 0a09 0109 0302 0504 0706 0000 0000     ................

0000b9e8 <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000b9f8 <Clock_Ip_au8CmuCallbackIndex>:
	...

0000ba08 <Clock_Ip_au8ClockFeatures>:
	...
    ba18:	0000 0100 0000 0000 0000 0000 0002 0000     ................
    ba28:	0000 0000 0300 0000 0000 0000 0000 0004     ................
    ba38:	0000 0000 0000 0500 0000 0000 0000 0000     ................
    ba48:	0006 0000 0000 0000 0100 0000 0000 0000     ................
    ba58:	0000 0001 0000 0000 0000 0400 0000 0000     ................
    ba68:	0000 0000 0005 0000 0001 0000 0401 0000     ................
    ba78:	0200 0000 0100 0005 0000 0003 0000 0402     ................
    ba88:	0000 0400 0000 0200 0005 0000 0005 0000     ................
    ba98:	0403 0000 0600 0000 0300 0005 0000 0007     ................
    baa8:	0000 0500 0000 0000 0000 0000 0006 0000     ................
	...
    bae8:	0000 0005 0000 0000 0000 0600 0100 0000     ................
    baf8:	0000 0000 0007 0003 0000 0000 0000 0000     ................
    bb08:	0000 0000 0000 0006 0000 0000 0000 0700     ................
    bb18:	0100 0000 0000 0000 0008 0003 0000 0000     ................
	...
    bb30:	0000 0009 0000 0000 0000 0a00 0100 0000     ................
    bb40:	0000 0000 000b 0003 0000 0000 0000 0000     ................
    bb50:	0000 0000 0000 000c 0000 0000 0000 0d00     ................
    bb60:	0100 0000 0000 0000 000e 0003 0000 0000     ................
    bb70:	0800 0000 0000 0000 0000 0009 0000 0000     ................
    bb80:	0000 0a00 0000 0000 0000 0000 000b 0000     ................
    bb90:	0000 0000 0b01 0000 0000 0000 0200 000b     ................
    bba0:	0000 0000 0000 0b03 0000 0000 0000 0000     ................
	...
    bbb8:	0400 0000 003b 003b 0000 0004 2700 2700     ....;.;......'.'
    bbc8:	0000 0100 0000 0000 0000 0000 0007 0000     ................
    bbd8:	7300 0000 0700 0000 0000 0032 0000 0009     .s........2.....
    bbe8:	0000 0200 0000 0700 0000 0000 0021 0000     ............!...
    bbf8:	0009 0000 0400 0000 0900 0000 0000 0003     ................
    bc08:	0000 0007 0000 6100 0000 0700 0000 0000     .......a........
    bc18:	0024 0000 0007 0000 2500 0000 0700 0000     $........%......
    bc28:	0000 002b 0000 0004 5a00 5a00 0000 0700     ..+......Z.Z....
    bc38:	0000 0000 0020 0000 0004 3800 3800 0000     .... ......8.8..
    bc48:	0400 0000 0039 0039 0000 0004 3a00 3a00     ....9.9......:.:
    bc58:	0000 0400 0000 0026 0026 0000 0004 6600     ......&.&......f
    bc68:	6600 0000 0400 0000 0037 0037 0000 0004     .f......7.7.....
    bc78:	2c00 2c00 0000 0400 0000 002d 002d 0000     .,.,......-.-...
    bc88:	0004 2e00 2e00 0000 0200 0000 4040 0040     ............@@@.
    bc98:	0000 0004 6a00 6a00 0000 0400 0000 006b     .....j.j......k.
    bca8:	006b 0000 0004 6c00 6c00 0000 0900 0000     k......l.l......
    bcb8:	0000 0001 0000 0009 0000 0000 0000 0700     ................
    bcc8:	0000 0000 0036 0000 0007 0000 3100 0000     ....6........1..
    bcd8:	0700 0000 0000 0049 0000 0007 0000 4a00     ......I........J
    bce8:	0000 0700 0000 0000 004b 0000 0007 0000     ........K.......
    bcf8:	4c00 0000 0700 0000 0000 004d 0000 0007     .L........M.....
    bd08:	0000 3d00 0000 0300 0000 0000 0000 0000     ...=............

0000bd18 <Clock_Ip_au16SelectorEntryHardwareValue>:
    bd18:	0a03 0101 0001 0101 0002 0404 0603 0200     ................
    bd28:	0810 0001 0100 0202 0000 0000 0007 0000     ................
    bd38:	0009 0000 0000 0000 0c0e 0000 0000 0000     ................
	...

0000bd70 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    bd70:	0000 0002 0300 0000 0601 0000 0000 0000     ................
	...

0000bda0 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    bda0:	0700 0000 0000 0000 0000 0202 0303 0101     ................
    bdb0:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000bdd0 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    bdd0:	0001 0000 0000 0000 0000 0202 0303 0101     ................
    bde0:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000be00 <Clock_Ip_au8DividerValueHardwareValue>:
    be00:	0100 0002 0003 0000 0004 0000 0000 0000     ................
    be10:	0005 0000 0000 0000 0000 0000 0000 0000     ................
    be20:	0006 0000 0000 0000 0000 0000 0000 0000     ................
	...
    be40:	0007 0000                                   ....

0000be44 <Clock_Ip_apxScgPeriphAsyncDivs>:
    be44:	4204 4006 4304 4006 4104 4006 4604 4006     .B.@.C.@.A.@.F.@

0000be54 <Clock_Ip_aeSourceTypeClockName>:
    be54:	0000 0000 0001 0000 0001 0000 0001 0000     ................
    be64:	0001 0000 0001 0000 0001 0000 0001 0000     ................
    be74:	0002 0000 0003 0000 0001 0000 0001 0000     ................
    be84:	0001 0000 0001 0000 0002 0000 0002 0000     ................
    be94:	0003 0000 0003 0000 0001 0000 0001 0000     ................
    bea4:	0004 0000 0004 0000 0004 0000 0004 0000     ................
	...

0000bf10 <Clock_Ip_aeHwPllName>:
    bf10:	0009 0000                                   ....

0000bf14 <Clock_Ip_aeHwDfsName>:
    bf14:	0057 0000                                   W...

0000bf18 <Clock_Ip_axDividerCallbacks>:
    bf18:	21d5 0000 21df 0000 21f9 0000 2213 0000     .!...!...!..."..
    bf28:	222d 0000 2247 0000 2261 0000 227b 0000     -"..G"..a"..{"..
    bf38:	2295 0000 22af 0000 22c9 0000 22e3 0000     ."..."..."..."..
    bf48:	22fd 0000 2317 0000 2331 0000               ."...#..1#..

0000bf54 <Clock_Ip_axDividerTriggerCallbacks>:
    bf54:	26a5 0000 26a5 0000                         .&...&..

0000bf5c <Clock_Ip_axExtOscCallbacks>:
    bf5c:	26b1 0000 26b1 0000 26b1 0000 26bb 0000     .&...&...&...&..
    bf6c:	26b1 0000 26c5 0000 26df 0000 26f9 0000     .&...&...&...&..
    bf7c:	277d 0000 2791 0000                         }'...'..

0000bf84 <Clock_Ip_axFracDivCallbacks>:
    bf84:	2951 0000 2951 0000 295b 0000               Q)..Q)..[)..

0000bf90 <Clock_Ip_axGateCallbacks>:
    bf90:	2975 0000 297f 0000 2a7f 0000 2a99 0000     u)...)...*...*..
    bfa0:	2a2f 0000 2a49 0000 29df 0000 29f9 0000     /*..I*...)...)..
    bfb0:	298f 0000 29a9 0000 2acf 0000 2ae9 0000     .)...)...*...*..
    bfc0:	2b1f 0000 2b39 0000                         .+..9+..

0000bfc8 <Clock_Ip_axIntOscCallbacks>:
    bfc8:	2ce5 0000 2ce5 0000 2cef 0000 2cf9 0000     .,...,...,...,..
    bfd8:	2d13 0000 2d2d 0000 2d41 0000 2d5b 0000     .-..--..A-..[-..
    bfe8:	2d75 0000 2d89 0000 2da3 0000 2dbd 0000     u-...-...-...-..
    bff8:	2e65 0000 2e7f 0000 2e99 0000               e...........

0000c004 <Clock_Ip_axCmuCallbacks>:
    c004:	3435 0000 343f 0000 344b 0000 3435 0000     54..?4..K4..54..

0000c014 <Clock_Ip_axPllCallbacks>:
    c014:	3455 0000 3455 0000 345f 0000 3455 0000     U4..U4.._4..U4..
    c024:	346b 0000 3475 0000 348f 0000 34a9 0000     k4..u4...4...4..
    c034:	354d 0000 3539 0000                         M5..95..

0000c03c <Clock_Ip_axPcfsCallbacks>:
    c03c:	36a9 0000                                   .6..

0000c040 <Clock_Ip_axSelectorCallbacks>:
    c040:	36b5 0000 36b5 0000 36bf 0000 36d9 0000     .6...6...6...6..
    c050:	36b5 0000 36f3 0000 370d 0000 3727 0000     .6...6...7..'7..
    c060:	3741 0000 375b 0000 3775 0000 378f 0000     A7..[7..u7...7..
    c070:	37a9 0000 37c3 0000 37dd 0000 37f7 0000     .7...7...7...7..
    c080:	3811 0000 382b 0000 3845 0000 385f 0000     .8..+8..E8.._8..
    c090:	3879 0000 3893 0000                         y8...8..

0000c098 <ClockSource>:
    c098:	0000 0000 0008 0000 0002 0000 0005 0000     ................
	...
    c0b0:	0009 0000                                   ....

0000c0b4 <ResetReasonArray>:
    c0b4:	0000 0000 0001 0000 0002 0000 0003 0000     ................
    c0c4:	0004 0000 0005 0000 0006 0000 0007 0000     ................
    c0d4:	0008 0000 0009 0000 000a 0000 000b 0000     ................
    c0e4:	000c 0000 000d 0000 000e 0000               ............

0000c0f0 <Port_au32PortCiPortBaseAddr>:
    c0f0:	9000 4004 a000 4004 b000 4004 c000 4004     ...@...@...@...@
    c100:	d000 4004                                   ...@

0000c104 <Port_au32PortCiGpioBaseAddr>:
    c104:	f000 400f f040 400f f080 400f f0c0 400f     ...@@..@...@...@
    c114:	f100 400f                                   ...@

0000c118 <ftmGptBase>:
    c118:	8000 4003 9000 4003 a000 4003 6000 4002     ...@...@...@.`.@

0000c128 <Mcu_aClockConfigPB>:
	...
    c130:	0102 1c00 0012 0400 0029 0100 0002 0000     ........).......
    c140:	0001 0100 0001 0000 0005 0000 0001 0000     ................
    c150:	0000 0000 0008 0000 1200 007a 0001 0000     ..........z.....
    c160:	0001 0000 0000 0000 0057 0000 0000 0000     ........W.......
    c170:	0057 0000 0000 0000 0000 0000 0000 0000     W...............
	...
    c190:	0019 0000 0005 0000 001a 0000 0002 0000     ................
    c1a0:	001b 0000 0005 0000 002a 0000 0005 0000     ........*.......
    c1b0:	0028 0000 000e 0000 0029 0000 0001 0000     (.......).......
    c1c0:	0056 0000 001c 0000 0032 0000 002a 0000     V.......2...*...
    c1d0:	002b 0000 0014 0000 002c 0000 0014 0000     +.......,.......
    c1e0:	002d 0000 0014 0000 002e 0000 0014 0000     -...............
    c1f0:	003f 0000 000c 0000 0040 0000 000a 0000     ?.......@.......
    c200:	0041 0000 000e 0000 0042 0000 0000 0000     A.......B.......
    c210:	0031 0000 0000 0000 0045 0000 0000 0000     1.......E.......
    c220:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    c230:	0044 0000 0000 0000 0030 0000 0000 0000     D.......0.......
    c240:	003d 0000 0000 0000 0043 0000 0000 0000     =.......C.......
    c250:	0049 0000 0000 0000 004a 0000 0000 0000     I.......J.......
    c260:	004b 0000 0000 0000 0048 0000 0000 0000     K.......H.......
    c270:	000a 0000 0001 0000 0000 0000 000b 0000     ................
    c280:	0002 0000 0000 0000 000c 0000 0004 0000     ................
    c290:	0000 0000 000d 0000 0004 0000 0000 0000     ................
    c2a0:	000e 0000 0001 0000 0000 0000 000f 0000     ................
    c2b0:	0001 0000 0000 0000 001d 0000 0001 0000     ................
    c2c0:	0000 0000 001e 0000 0008 0000 0000 0000     ................
    c2d0:	001f 0000 0001 0000 0000 0000 0021 0000     ............!...
    c2e0:	0001 0000 0000 0000 0022 0000 0002 0000     ........".......
    c2f0:	0000 0000 0023 0000 0001 0000 0000 0000     ....#...........
    c300:	0025 0000 0003 0000 0000 0000 0026 0000     %...........&...
    c310:	0004 0000 0000 0000 0027 0000 0002 0000     ........'.......
    c320:	0000 0000 0032 0000 0001 0000 0000 0000     ....2...........
    c330:	0048 0000 0001 0000 0001 0000 0056 0000     H...........V...
    c340:	0001 0000 0001 0000 0057 0000 0000 0000     ........W.......
    c350:	0000 0000 0057 0000 0000 0000 0000 0000     ....W...........
    c360:	0057 0000 0000 0000 0057 0000 0057 0000     W.......W...W...
	...
    c37c:	0014 0000 7d00 0000 0015 0000 7d00 0000     .....}.......}..
    c38c:	0016 0000 7d00 0000 0017 0000 8000 0000     .....}..........
    c39c:	0012 0000 0001 0000 0013 0000 0001 0000     ................
    c3ac:	0030 0000 0000 0000 0031 0000 0000 0000     0.......1.......
    c3bc:	0032 0000 0000 0000 0033 0000 0000 0000     2.......3.......
    c3cc:	0034 0000 0000 0000 0035 0000 0001 0000     4.......5.......
    c3dc:	0036 0000 0000 0000 0037 0000 0001 0000     6.......7.......
    c3ec:	0038 0000 0001 0000 0039 0000 0000 0000     8.......9.......
    c3fc:	003a 0000 0000 0000 003b 0000 0000 0000     :.......;.......
    c40c:	003c 0000 0000 0000 003d 0000 0000 0000     <.......=.......
    c41c:	003e 0000 0000 0000 003f 0000 0001 0000     >.......?.......
    c42c:	0040 0000 0001 0000 0041 0000 0001 0000     @.......A.......
    c43c:	0042 0000 0000 0000 0043 0000 0000 0000     B.......C.......
    c44c:	0044 0000 0000 0000 0045 0000 0000 0000     D.......E.......
    c45c:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    c46c:	0048 0000 0000 0000 0049 0000 0000 0000     H.......I.......
    c47c:	004a 0000 0000 0000 004b 0000 0000 0000     J.......K.......
    c48c:	004c 0000 0001 0000 004d 0000 0001 0000     L.......M.......
    c49c:	004e 0000 0000 0000 004f 0000 0000 0000     N.......O.......
    c4ac:	0050 0000 0001 0000 0051 0000 0001 0000     P.......Q.......
    c4bc:	0052 0000 0001 0000 0053 0000 0001 0000     R.......S.......
    c4cc:	0054 0000 0001 0000 0055 0000 0000 0000     T.......U.......
    c4dc:	0056 0000 0001 0000 0057 0000 0000 0000     V.......W.......
    c4ec:	0000 0000 0057 0000 0000 0000 0057 0000     ....W.......W...
	...

0000c520 <FTM_0_InitConfig_PB>:
    c520:	0000 0000 0003 0000 0007 0000 0001 0000     ................

0000c530 <FTM_1_InitConfig_PB>:
    c530:	0000 0000 0003 0000 0007 0000 0001 0000     ................

0000c540 <FTM_2_InitConfig_PB>:
    c540:	0000 0000 0003 0000 0007 0000 0001 0000     ................

0000c550 <FTM_0_ChannelConfig_PB>:
    c550:	0000 0000 7ca1 0000 0000 0000 0000 0000     .....|..........

0000c560 <FTM_1_ChannelConfig_PB>:
    c560:	0000 0000 7ca1 0000 0001 0000 0000 0000     .....|..........

0000c570 <FTM_2_ChannelConfig_PB>:
    c570:	0000 0000 7ca1 0000 0002 0000 0000 0000     .....|..........

0000c580 <Gpt_pInitPredefTimerChannelPB>:
	...

0000c590 <u8GptChannelIdToIndexMap>:
    c590:	0100 0002                                   ....

0000c594 <Gpt_InitChannelPB>:
    c594:	0000 0000 08b1 0000 0000 0000 ffff 0000     ................
    c5a4:	0000 0000 8b68 1fff 0000 0000 08bd 0000     ....h...........
    c5b4:	0000 0000 ffff 0000 0000 0000 8b80 1fff     ................
    c5c4:	0000 0000 08c9 0000 0000 0000 ffff 0000     ................
    c5d4:	0000 0000 8b98 1fff                         ........

0000c5dc <Gpt_Config>:
    c5dc:	0003 0000 c594 0000 0003 0000 8b38 1fff     ............8...
    c5ec:	c580 0000 c590 0000                         ........

0000c5f4 <aIrqConfiguration>:
    c5f4:	0063 0000 0f01 0000 6da7 0000 0069 0000     c........m..i...
    c604:	0f01 0000 6e19 0000 006f 0000 0f01 0000     .....n..o.......
    c614:	6e8b 0000                                   .n..

0000c618 <intCtrlConfig>:
    c618:	0003 0000 c5f4 0000                         ........

0000c620 <Mcu_Config>:
    c620:	005a 0000 0000 0000 0001 0000 0001 0000     Z...............
    c630:	c87c 0000 c128 0000 c888 0000               |...(.......

0000c63c <OsIf_xPredefinedConfig>:
    c63c:	0000 0000 6c00 02dc                         .....l..

0000c644 <OsIf_apxPredefinedConfig>:
    c644:	c63c 0000                                   <...

0000c648 <Platform_uConfiguration>:
    c648:	c650 0000                                   P...

0000c64c <Platform_Config>:
    c64c:	c648 0000                                   H...

0000c650 <ipwConfig>:
    c650:	c618 0000 0000 0000                         ........

0000c658 <g_pin_mux_InitConfigArr>:
    c658:	c000 4004 f0c0 400f 0000 0000 0002 0000     ...@...@........
    c668:	0001 0000 0002 0000 0000 0000 0000 0000     ................
    c678:	0000 0000 0100 0000 c000 4004 f0c0 400f     ...........@...@
    c688:	0010 0000 0002 0000 0001 0000 0002 0000     ................
	...
    c6a4:	0100 0000 c000 4004 f0c0 400f 000f 0000     .......@...@....
    c6b4:	0002 0000 0001 0000 0002 0000 0000 0000     ................
	...
    c6cc:	0100 0000 b000 4004 f080 400f 0008 0000     .......@...@....
    c6dc:	0002 0000 0001 0000 0002 0000 0000 0000     ................
	...
    c6f8:	b000 4004 f080 400f 0009 0000 0002 0000     ...@...@........
    c708:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...

0000c720 <au8Port_PartitionList>:
    c720:	0001 0000                                   ....

0000c724 <au32Port_PinToPartitionMap>:
    c724:	0001 0000 0001 0000 0001 0000 0001 0000     ................
    c734:	0001 0000                                   ....

0000c738 <Port_au16NoUnUsedPadsArrayDefault>:
    c738:	0000 0001 0002 0003 0006 0007 0008 0009     ................
    c748:	000b 000c 000d 000e 000f 0010 0011 0020     .............. .
    c758:	0021 0022 0023 0024 0025 0026 0027 0028     !.".#.$.%.&.'.(.
    c768:	0029 002a 002b 002c 002d 002e 002f 0030     ).*.+.,.-.../.0.
    c778:	0031 0040 0041 0042 0043 0046 0047 004a     1.@.A.B.C.F.G.J.
    c788:	004b 004c 004d 004e 004f 0050 0051 0061     K.L.M.N.O.P.Q.a.
    c798:	0062 0063 0064 0065 0066 0067 0068 0069     b.c.d.e.f.g.h.i.
    c7a8:	006a 006b 006c 006d 006e 0071 0080 0081     j.k.l.m.n.q.....
    c7b8:	0082 0083 0084 0085 0086 0087 0088 0089     ................
    c7c8:	008a 008b 008c 008d 008e 008f 0090 0000     ................

0000c7d8 <Port_UnUsedPin>:
    c7d8:	0100 0000 0001 0000 0000 0000               ............

0000c7e4 <Port_aPinConfigDefault>:
    c7e4:	0060 0000 0100 0000 0001 0000 0002 0000     `...............
    c7f4:	0001 0001 0070 0000 0100 0000 0001 0000     ....p...........
    c804:	0002 0000 0001 0001 006f 0000 0100 0000     ........o.......
    c814:	0001 0000 0002 0000 0001 0001 0048 0000     ............H...
    c824:	0100 0000 0000 0000 0002 0000 0001 0001     ................
    c834:	0049 0000 0100 0000 0000 0000 0002 0000     I...............
    c844:	0001 0001                                   ....

0000c848 <Port_Config>:
    c848:	0005 004f c738 0000 c7d8 0000 c7e4 0000     ..O.8...........
	...
    c860:	c724 0000 c720 0000 c658 0000               $... ...X...

0000c86c <Power_Ip_RCM_ConfigPB>:
	...

0000c874 <Power_Ip_PMC_ConfigPB>:
    c874:	0000 0000                                   ....

0000c878 <Power_Ip_SMC_ConfigPB>:
    c878:	0000 0000                                   ....

0000c87c <Power_Ip_aModeConfigPB>:
	...

0000c888 <Power_Ip_HwIPsConfigPB>:
    c888:	c86c 0000 c874 0000 c878 0000               l...t...x...

0000c894 <__INIT_TABLE>:
    c894:	00000002 	.word	0x00000002
    c898:	1fff8b10 	.word	0x1fff8b10
    c89c:	0000c8bc 	.word	0x0000c8bc
    c8a0:	0000c95c 	.word	0x0000c95c
    c8a4:	1fff8800 	.word	0x1fff8800
    c8a8:	00000000 	.word	0x00000000
    c8ac:	00000310 	.word	0x00000310

0000c8b0 <__ZERO_TABLE>:
    c8b0:	00000001 	.word	0x00000001
    c8b4:	1fff8bb0 	.word	0x1fff8bb0
    c8b8:	1fff9310 	.word	0x1fff9310
