
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000bd3 	.word	0x00000bd3
  10:	00000bd5 	.word	0x00000bd5
  14:	00000bd7 	.word	0x00000bd7
  18:	00000bd9 	.word	0x00000bd9
	...
  2c:	00000bdb 	.word	0x00000bdb
  30:	00000bdd 	.word	0x00000bdd
  34:	00000000 	.word	0x00000000
  38:	00000bdf 	.word	0x00000bdf
  3c:	00000be1 	.word	0x00000be1
  40:	00000be3 	.word	0x00000be3
  44:	00000be3 	.word	0x00000be3
  48:	00000be3 	.word	0x00000be3
  4c:	00000be3 	.word	0x00000be3
  50:	00000be3 	.word	0x00000be3
  54:	00000be3 	.word	0x00000be3
  58:	00000be3 	.word	0x00000be3
  5c:	00000be3 	.word	0x00000be3
  60:	00000be3 	.word	0x00000be3
  64:	00000be3 	.word	0x00000be3
  68:	00000be3 	.word	0x00000be3
  6c:	00000be3 	.word	0x00000be3
  70:	00000be3 	.word	0x00000be3
  74:	00000be3 	.word	0x00000be3
  78:	00000be3 	.word	0x00000be3
  7c:	00000be3 	.word	0x00000be3
  80:	00000be3 	.word	0x00000be3
  84:	00000be3 	.word	0x00000be3
  88:	00000be3 	.word	0x00000be3
  8c:	00000be3 	.word	0x00000be3
  90:	00000be3 	.word	0x00000be3
  94:	00000be3 	.word	0x00000be3
  98:	00000be3 	.word	0x00000be3
  9c:	00000be3 	.word	0x00000be3
  a0:	00000be3 	.word	0x00000be3
  a4:	00000be3 	.word	0x00000be3
  a8:	00000be3 	.word	0x00000be3
  ac:	00000be3 	.word	0x00000be3
  b0:	00000be3 	.word	0x00000be3
  b4:	00000be3 	.word	0x00000be3
  b8:	00000be3 	.word	0x00000be3
  bc:	00000be3 	.word	0x00000be3
  c0:	00000be3 	.word	0x00000be3
  c4:	00000be3 	.word	0x00000be3
  c8:	00000be3 	.word	0x00000be3
  cc:	00000be3 	.word	0x00000be3
  d0:	00000be3 	.word	0x00000be3
  d4:	00000be3 	.word	0x00000be3
  d8:	00000be3 	.word	0x00000be3
  dc:	00000be3 	.word	0x00000be3
  e0:	00000be3 	.word	0x00000be3
  e4:	00000be3 	.word	0x00000be3
  e8:	00000be3 	.word	0x00000be3
  ec:	00000be3 	.word	0x00000be3
  f0:	00000be3 	.word	0x00000be3
  f4:	00000be3 	.word	0x00000be3
  f8:	00000be3 	.word	0x00000be3
  fc:	00000be3 	.word	0x00000be3
 100:	00000be3 	.word	0x00000be3
 104:	00000be3 	.word	0x00000be3
 108:	00000be3 	.word	0x00000be3
 10c:	00000be3 	.word	0x00000be3
 110:	00000be3 	.word	0x00000be3
 114:	00000be3 	.word	0x00000be3
 118:	00000be3 	.word	0x00000be3
 11c:	00000be3 	.word	0x00000be3
 120:	00000be3 	.word	0x00000be3
 124:	00000be3 	.word	0x00000be3
 128:	00000be3 	.word	0x00000be3
 12c:	00000be3 	.word	0x00000be3
 130:	00000be3 	.word	0x00000be3
 134:	00000be3 	.word	0x00000be3
 138:	00000be3 	.word	0x00000be3
 13c:	00000be3 	.word	0x00000be3
 140:	00000be3 	.word	0x00000be3
 144:	00000be3 	.word	0x00000be3
 148:	00000be3 	.word	0x00000be3
 14c:	00000be3 	.word	0x00000be3
 150:	00000be3 	.word	0x00000be3
 154:	00000be3 	.word	0x00000be3
 158:	00000be3 	.word	0x00000be3
 15c:	00000be3 	.word	0x00000be3
 160:	00000be3 	.word	0x00000be3
 164:	00000be3 	.word	0x00000be3
 168:	00000be3 	.word	0x00000be3
 16c:	00000be3 	.word	0x00000be3
 170:	00000be3 	.word	0x00000be3
 174:	00000be3 	.word	0x00000be3
 178:	00000be3 	.word	0x00000be3
 17c:	00000be3 	.word	0x00000be3
 180:	00000be3 	.word	0x00000be3
 184:	00000be3 	.word	0x00000be3
 188:	00000be3 	.word	0x00000be3
 18c:	00000be3 	.word	0x00000be3
 190:	00000be3 	.word	0x00000be3
 194:	00000be3 	.word	0x00000be3
 198:	00000be3 	.word	0x00000be3
 19c:	00000be3 	.word	0x00000be3
 1a0:	00000be3 	.word	0x00000be3
 1a4:	00000be3 	.word	0x00000be3
 1a8:	00000be3 	.word	0x00000be3
 1ac:	00000be3 	.word	0x00000be3
 1b0:	00000be3 	.word	0x00000be3
 1b4:	00000be3 	.word	0x00000be3
 1b8:	00000be3 	.word	0x00000be3
 1bc:	00000be3 	.word	0x00000be3
 1c0:	00000be3 	.word	0x00000be3
 1c4:	00000be3 	.word	0x00000be3
 1c8:	00000be3 	.word	0x00000be3
 1cc:	00000be3 	.word	0x00000be3
 1d0:	00000be3 	.word	0x00000be3
 1d4:	00000be3 	.word	0x00000be3
 1d8:	00000be3 	.word	0x00000be3
 1dc:	00000be3 	.word	0x00000be3
 1e0:	00000be3 	.word	0x00000be3
 1e4:	00000be3 	.word	0x00000be3
 1e8:	00000be3 	.word	0x00000be3
 1ec:	00000be3 	.word	0x00000be3
 1f0:	00000be3 	.word	0x00000be3
 1f4:	00000be3 	.word	0x00000be3
 1f8:	00000be3 	.word	0x00000be3
 1fc:	00000be3 	.word	0x00000be3
 200:	00000be3 	.word	0x00000be3
 204:	00000be3 	.word	0x00000be3
 208:	00000be3 	.word	0x00000be3
 20c:	00000be3 	.word	0x00000be3
 210:	00000be3 	.word	0x00000be3
 214:	00000be3 	.word	0x00000be3
 218:	00000be3 	.word	0x00000be3
 21c:	00000be3 	.word	0x00000be3
 220:	00000be3 	.word	0x00000be3
 224:	00000be3 	.word	0x00000be3
 228:	00000be3 	.word	0x00000be3
 22c:	00000be3 	.word	0x00000be3
 230:	00000be3 	.word	0x00000be3
 234:	00000be3 	.word	0x00000be3
 238:	00000be3 	.word	0x00000be3
 23c:	00000be3 	.word	0x00000be3
 240:	00000be3 	.word	0x00000be3
 244:	00000be3 	.word	0x00000be3
 248:	00000be3 	.word	0x00000be3
 24c:	00000be3 	.word	0x00000be3
 250:	00000be3 	.word	0x00000be3
 254:	00000be3 	.word	0x00000be3
 258:	00000be3 	.word	0x00000be3
 25c:	00000be3 	.word	0x00000be3
 260:	00000be3 	.word	0x00000be3
 264:	00000be3 	.word	0x00000be3
 268:	00000be3 	.word	0x00000be3
 26c:	00000be3 	.word	0x00000be3
 270:	00000be3 	.word	0x00000be3
 274:	00000be3 	.word	0x00000be3
 278:	00000be3 	.word	0x00000be3
 27c:	00000be3 	.word	0x00000be3
 280:	00000be3 	.word	0x00000be3
 284:	00000be3 	.word	0x00000be3
 288:	00000be3 	.word	0x00000be3
 28c:	00000be3 	.word	0x00000be3
 290:	00000be3 	.word	0x00000be3
 294:	00000be3 	.word	0x00000be3
 298:	00000be3 	.word	0x00000be3
 29c:	00000be3 	.word	0x00000be3
 2a0:	00000be3 	.word	0x00000be3
 2a4:	00000be3 	.word	0x00000be3
 2a8:	00000be3 	.word	0x00000be3
 2ac:	00000be3 	.word	0x00000be3
 2b0:	00000be3 	.word	0x00000be3
 2b4:	00000be3 	.word	0x00000be3
 2b8:	00000be3 	.word	0x00000be3
 2bc:	00000be3 	.word	0x00000be3
 2c0:	00000be3 	.word	0x00000be3
 2c4:	00000be3 	.word	0x00000be3
 2c8:	00000be3 	.word	0x00000be3
 2cc:	00000be3 	.word	0x00000be3
 2d0:	00000be3 	.word	0x00000be3
 2d4:	00000be3 	.word	0x00000be3
 2d8:	00000be3 	.word	0x00000be3
 2dc:	00000be3 	.word	0x00000be3
 2e0:	00000be3 	.word	0x00000be3
 2e4:	00000be3 	.word	0x00000be3
 2e8:	00000be3 	.word	0x00000be3
 2ec:	00000be3 	.word	0x00000be3
 2f0:	00000be3 	.word	0x00000be3
 2f4:	00000be3 	.word	0x00000be3
 2f8:	00000be3 	.word	0x00000be3
 2fc:	00000be3 	.word	0x00000be3
 300:	00000be3 	.word	0x00000be3
 304:	00000be3 	.word	0x00000be3
 308:	00000be3 	.word	0x00000be3
 30c:	00000be3 	.word	0x00000be3

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fadd 	bl	a40 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb9c 	bl	bc8 <startup_go_to_user_mode>
     490:	f000 fa20 	bl	8d4 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff92d4 	.word	0x1fff92d4

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fae7 	bl	b6c <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__BSS_SRAM_SIZE+0x11c>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__BSS_SRAM_SIZE+0x11c>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__BSS_SRAM_SIZE+0x120>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__BSS_SRAM_SIZE+0x120>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__BSS_SRAM_SIZE+0x116>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0x154>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__BSS_SRAM_SIZE+0x94>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__BSS_SRAM_SIZE+0x14c>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__BSS_SRAM_SIZE+0x146>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__BSS_SRAM_SIZE+0x38>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__BSS_SRAM_SIZE+0x142>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__BSS_SRAM_SIZE+0x142>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__BSS_SRAM_SIZE+0x60>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__BSS_SRAM_SIZE+0x13a>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__BSS_SRAM_SIZE+0x13a>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__BSS_SRAM_SIZE+0x128>
     7c4:	d056      	beq.n	874 <__BSS_SRAM_SIZE+0x124>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0x158>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__BSS_SRAM_SIZE+0xe0>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__BSS_SRAM_SIZE+0x13e>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__BSS_SRAM_SIZE+0x13e>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__BSS_SRAM_SIZE+0x10e>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__BSS_SRAM_SIZE+0x136>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__BSS_SRAM_SIZE+0x136>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__BSS_SRAM_SIZE+0x76>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__BSS_SRAM_SIZE+0x76>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__BSS_SRAM_SIZE+0x10e>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__BSS_SRAM_SIZE+0x60>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__BSS_SRAM_SIZE+0xe0>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__BSS_SRAM_SIZE+0x38>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Gpt_TimeoutCallback_1>:
void EcuM_Init( void );

/*This function is gonna be called on ISR from FTM1_CH0, it is basically a callback
called by FTM_1_CH_0_ISR library function*/
void Gpt_TimeoutCallback_1( void )
{
     8b0:	b508      	push	{r3, lr}
    /*here, we just toggle led connected to C8*/
    Dio_FlipChannel( DioConf_DioChannel_C8_BIT0 );
     8b2:	2048      	movs	r0, #72	; 0x48
     8b4:	f005 faf3 	bl	5e9e <Dio_FlipChannel>
    Dio_FlipChannel( DioConf_DioChannel_D0_BLUE_LED );
     8b8:	2060      	movs	r0, #96	; 0x60
     8ba:	f005 faf0 	bl	5e9e <Dio_FlipChannel>
}
     8be:	bf00      	nop
     8c0:	bd08      	pop	{r3, pc}

000008c2 <Gpt_TimeoutCallback_2>:

/*This function is gonna be called on ISR from FTM2_CH0, it is basically a callback
called by FTM_2_CH_0_ISR library function*/
void Gpt_TimeoutCallback_2( void )
{
     8c2:	b508      	push	{r3, lr}
    /*here, we just toggle led connected to C9*/
    Dio_FlipChannel( DioConf_DioChannel_C9_BIT1 );
     8c4:	2049      	movs	r0, #73	; 0x49
     8c6:	f005 faea 	bl	5e9e <Dio_FlipChannel>
    Dio_FlipChannel( DioConf_DioChannel_D16_GREEN_LED );
     8ca:	2070      	movs	r0, #112	; 0x70
     8cc:	f005 fae7 	bl	5e9e <Dio_FlipChannel>
}
     8d0:	bf00      	nop
     8d2:	bd08      	pop	{r3, pc}

000008d4 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8d4:	b508      	push	{r3, lr}
    EcuM_Init();
     8d6:	f000 f811 	bl	8fc <EcuM_Init>
        /*Start the timer and set it to Running state with a timeout of 100ms*/
        /*  Tick frequency = ( 12MHz / 128 ) = 93,750Hz
            Counter = ( 0.100s * 93750Hz )  = 9,375      
            FTM counter max value (MOD register) is 65,535, so it fits within the 16-bit counter range. */

        Gpt_StartTimer( GptConf_GptChannelConfiguration_GptChannelConfiguration_0, 9375u );
     8da:	f242 419f 	movw	r1, #9375	; 0x249f
     8de:	2000      	movs	r0, #0
     8e0:	f006 feaa 	bl	7638 <Gpt_StartTimer>

        /*Start the timer and set it to Running state with a timeout of 300ms*/
        /*  Tick frequency = ( 12MHz / 128 ) = 93,750Hz
            Counter = ( 0.300s * 93750Hz )  = 28,125      
            FTM counter max value (MOD register) is 65,535, so it fits within the 16-bit counter range. */
        Gpt_StartTimer( GptConf_GptChannelConfiguration_GptChannelConfiguration_1, 28125u );    
     8e4:	f646 51dd 	movw	r1, #28125	; 0x6ddd
     8e8:	2001      	movs	r0, #1
     8ea:	f006 fea5 	bl	7638 <Gpt_StartTimer>

        /*Enable notifications, Gpt_TimeoutCallback will be called on each timeout*/
        Gpt_EnableNotification( GptConf_GptChannelConfiguration_GptChannelConfiguration_0 );
     8ee:	2000      	movs	r0, #0
     8f0:	f006 ff94 	bl	781c <Gpt_EnableNotification>
        Gpt_EnableNotification( GptConf_GptChannelConfiguration_GptChannelConfiguration_1 );
     8f4:	2001      	movs	r0, #1
     8f6:	f006 ff91 	bl	781c <Gpt_EnableNotification>
        Gpt_StartTimer( GptConf_GptChannelConfiguration_GptChannelConfiguration_0, 9375u );
     8fa:	e7ee      	b.n	8da <main+0x6>

000008fc <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     8fc:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     8fe:	480a      	ldr	r0, [pc, #40]	; (928 <EcuM_Init+0x2c>)
     900:	f004 f98c 	bl	4c1c <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     904:	2000      	movs	r0, #0
     906:	f004 f9dd 	bl	4cc4 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     90a:	2000      	movs	r0, #0
     90c:	f004 f9fe 	bl	4d0c <Mcu_SetMode>
    
    /*Enable and setup interrupts*/
    Platform_Init( NULL_PTR );
     910:	2000      	movs	r0, #0
     912:	f000 faeb 	bl	eec <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration, for this case
    ports C8 and C9 are configured as output*/
    Port_Init( &Port_Config );
     916:	4805      	ldr	r0, [pc, #20]	; (92c <EcuM_Init+0x30>)
     918:	f004 fd82 	bl	5420 <Port_Init>
    /*Apply Gpt configuration for FTM1 channel 0 and FTM2 channel 0*/
    Gpt_Init( &Gpt_Config );
     91c:	4804      	ldr	r0, [pc, #16]	; (930 <EcuM_Init+0x34>)
     91e:	f006 fc5d 	bl	71dc <Gpt_Init>
}
     922:	bf00      	nop
     924:	bd08      	pop	{r3, pc}
     926:	bf00      	nop
     928:	0000c4c0 	.word	0x0000c4c0
     92c:	0000c6a8 	.word	0x0000c6a8
     930:	0000c488 	.word	0x0000c488

00000934 <Gpt_Ipw_FtmGetTimeElapsed>:
#define GPT_START_SEC_CODE
#include "Gpt_MemMap.h"

#if (FTM_GPT_IP_USED == STD_ON)
static Gpt_ValueType Gpt_Ipw_FtmGetTimeElapsed(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig, Gpt_HwChannelInfoType * pReturnHwChannelInfo)
{
     934:	b500      	push	{lr}
     936:	b087      	sub	sp, #28
     938:	9001      	str	r0, [sp, #4]
     93a:	9100      	str	r1, [sp, #0]
    Gpt_ValueType returnValue;
    boolean HasChEvOccurred;

    /* Read compare and counter registers */
    uint32 counterValue = Ftm_Gpt_Ip_GetCntValue(pHwChannelConfig->instance);
     93c:	9b01      	ldr	r3, [sp, #4]
     93e:	791b      	ldrb	r3, [r3, #4]
     940:	4618      	mov	r0, r3
     942:	f007 f9ff 	bl	7d44 <Ftm_Gpt_Ip_GetCntValue>
     946:	9004      	str	r0, [sp, #16]
    uint32 compareValue = Ftm_Gpt_Ip_GetCompareValue(pHwChannelConfig->instance, pHwChannelConfig->channel);
     948:	9b01      	ldr	r3, [sp, #4]
     94a:	791a      	ldrb	r2, [r3, #4]
     94c:	9b01      	ldr	r3, [sp, #4]
     94e:	795b      	ldrb	r3, [r3, #5]
     950:	4619      	mov	r1, r3
     952:	4610      	mov	r0, r2
     954:	f007 fa06 	bl	7d64 <Ftm_Gpt_Ip_GetCompareValue>
     958:	9003      	str	r0, [sp, #12]

    pReturnHwChannelInfo->uTargetTime = Ftm_Gpt_Ip_u32TargetValue[pHwChannelConfig->instance][pHwChannelConfig->channel];
     95a:	9b01      	ldr	r3, [sp, #4]
     95c:	791b      	ldrb	r3, [r3, #4]
     95e:	4618      	mov	r0, r3
     960:	9b01      	ldr	r3, [sp, #4]
     962:	795b      	ldrb	r3, [r3, #5]
     964:	4619      	mov	r1, r3
     966:	4a23      	ldr	r2, [pc, #140]	; (9f4 <Gpt_Ipw_FtmGetTimeElapsed+0xc0>)
     968:	00c3      	lsls	r3, r0, #3
     96a:	440b      	add	r3, r1
     96c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     970:	9b00      	ldr	r3, [sp, #0]
     972:	605a      	str	r2, [r3, #4]

    /* Calculate the elapsed time */
    if (counterValue > compareValue)
     974:	9a04      	ldr	r2, [sp, #16]
     976:	9b03      	ldr	r3, [sp, #12]
     978:	429a      	cmp	r2, r3
     97a:	d918      	bls.n	9ae <Gpt_Ipw_FtmGetTimeElapsed+0x7a>
    {
        /* Counter value passed the set-up Target value - might have roll-over */
        if(((FTM_CNT_MAX_VALUE_U32 - counterValue) + compareValue) <= pReturnHwChannelInfo->uTargetTime)
     97c:	9a03      	ldr	r2, [sp, #12]
     97e:	9b04      	ldr	r3, [sp, #16]
     980:	1ad3      	subs	r3, r2, r3
     982:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
     986:	33ff      	adds	r3, #255	; 0xff
     988:	9a00      	ldr	r2, [sp, #0]
     98a:	6852      	ldr	r2, [r2, #4]
     98c:	4293      	cmp	r3, r2
     98e:	d80a      	bhi.n	9a6 <Gpt_Ipw_FtmGetTimeElapsed+0x72>
        {
            /* New compare value was read by register read - isr served in time - we have roll-over */
            returnValue =   (Gpt_ValueType)(    (   pReturnHwChannelInfo->uTargetTime - \
     990:	9b00      	ldr	r3, [sp, #0]
     992:	685a      	ldr	r2, [r3, #4]
                                                    ((FTM_CNT_MAX_VALUE_U32 - counterValue) + compareValue) ) + \
     994:	9904      	ldr	r1, [sp, #16]
     996:	9b03      	ldr	r3, [sp, #12]
     998:	1acb      	subs	r3, r1, r3
            returnValue =   (Gpt_ValueType)(    (   pReturnHwChannelInfo->uTargetTime - \
     99a:	4413      	add	r3, r2
     99c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
     9a0:	3bfe      	subs	r3, #254	; 0xfe
     9a2:	9305      	str	r3, [sp, #20]
     9a4:	e00a      	b.n	9bc <Gpt_Ipw_FtmGetTimeElapsed+0x88>
                                                FTM_OVERFLOW_PAD_U32 );
        }
        else
        {
            /* There is an delay in serving ISR or updating u32CompareValue - report last timer time */
            returnValue = (Gpt_ValueType)(pReturnHwChannelInfo->uTargetTime);
     9a6:	9b00      	ldr	r3, [sp, #0]
     9a8:	685b      	ldr	r3, [r3, #4]
     9aa:	9305      	str	r3, [sp, #20]
     9ac:	e006      	b.n	9bc <Gpt_Ipw_FtmGetTimeElapsed+0x88>
        }
    }
    else
    {
        /* Timer in between ISRs period */
        returnValue = (Gpt_ValueType)(pReturnHwChannelInfo->uTargetTime - (compareValue - counterValue));
     9ae:	9b00      	ldr	r3, [sp, #0]
     9b0:	685a      	ldr	r2, [r3, #4]
     9b2:	9904      	ldr	r1, [sp, #16]
     9b4:	9b03      	ldr	r3, [sp, #12]
     9b6:	1acb      	subs	r3, r1, r3
     9b8:	4413      	add	r3, r2
     9ba:	9305      	str	r3, [sp, #20]
    }

    /* check if channel event has occurred */
    HasChEvOccurred = Ftm_Gpt_Ip_GetChInterruptStatusFlag(pHwChannelConfig->instance, pHwChannelConfig->channel);
     9bc:	9b01      	ldr	r3, [sp, #4]
     9be:	791a      	ldrb	r2, [r3, #4]
     9c0:	9b01      	ldr	r3, [sp, #4]
     9c2:	795b      	ldrb	r3, [r3, #5]
     9c4:	4619      	mov	r1, r3
     9c6:	4610      	mov	r0, r2
     9c8:	f007 f99c 	bl	7d04 <Ftm_Gpt_Ip_GetChInterruptStatusFlag>
     9cc:	4603      	mov	r3, r0
     9ce:	f88d 300b 	strb.w	r3, [sp, #11]

    /*Check interrupt status flag*/
    if (HasChEvOccurred)
     9d2:	f89d 300b 	ldrb.w	r3, [sp, #11]
     9d6:	2b00      	cmp	r3, #0
     9d8:	d003      	beq.n	9e2 <Gpt_Ipw_FtmGetTimeElapsed+0xae>
    {
        /* Channel counter was roll-over */
        pReturnHwChannelInfo->bChannelRollover = TRUE;
     9da:	9b00      	ldr	r3, [sp, #0]
     9dc:	2201      	movs	r2, #1
     9de:	701a      	strb	r2, [r3, #0]
     9e0:	e002      	b.n	9e8 <Gpt_Ipw_FtmGetTimeElapsed+0xb4>
    }
    else
    {
        /* Channel counter was not rollover */
        pReturnHwChannelInfo->bChannelRollover = FALSE;
     9e2:	9b00      	ldr	r3, [sp, #0]
     9e4:	2200      	movs	r2, #0
     9e6:	701a      	strb	r2, [r3, #0]
    }
    return returnValue;
     9e8:	9b05      	ldr	r3, [sp, #20]
}
     9ea:	4618      	mov	r0, r3
     9ec:	b007      	add	sp, #28
     9ee:	f85d fb04 	ldr.w	pc, [sp], #4
     9f2:	bf00      	nop
     9f4:	1fff8d48 	.word	0x1fff8d48

000009f8 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     9f8:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9fa:	f3ef 8310 	mrs	r3, PRIMASK
     9fe:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a00:	4623      	mov	r3, r4
}
     a02:	4618      	mov	r0, r3
     a04:	f85d 4b04 	ldr.w	r4, [sp], #4
     a08:	4770      	bx	lr

00000a0a <Gpt_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Gpt_schm_read_msr(void)
{
     a0a:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a0c:	f3ef 8310 	mrs	r3, PRIMASK
     a10:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a12:	4623      	mov	r3, r4
}
     a14:	4618      	mov	r0, r3
     a16:	f85d 4b04 	ldr.w	r4, [sp], #4
     a1a:	4770      	bx	lr

00000a1c <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     a1c:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a1e:	f3ef 8310 	mrs	r3, PRIMASK
     a22:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a24:	4623      	mov	r3, r4
}
     a26:	4618      	mov	r0, r3
     a28:	f85d 4b04 	ldr.w	r4, [sp], #4
     a2c:	4770      	bx	lr

00000a2e <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     a2e:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a30:	f3ef 8310 	mrs	r3, PRIMASK
     a34:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a36:	4623      	mov	r3, r4
}
     a38:	4618      	mov	r0, r3
     a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
     a3e:	4770      	bx	lr

00000a40 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     a40:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     a42:	2300      	movs	r3, #0
     a44:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     a46:	2300      	movs	r3, #0
     a48:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     a4a:	2300      	movs	r3, #0
     a4c:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     a4e:	2300      	movs	r3, #0
     a50:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     a52:	4b44      	ldr	r3, [pc, #272]	; (b64 <init_data_bss+0x124>)
     a54:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     a56:	4b44      	ldr	r3, [pc, #272]	; (b68 <init_data_bss+0x128>)
     a58:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     a5a:	9b05      	ldr	r3, [sp, #20]
     a5c:	681b      	ldr	r3, [r3, #0]
     a5e:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     a60:	9b05      	ldr	r3, [sp, #20]
     a62:	3304      	adds	r3, #4
     a64:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     a66:	9b05      	ldr	r3, [sp, #20]
     a68:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     a6a:	2300      	movs	r3, #0
     a6c:	9309      	str	r3, [sp, #36]	; 0x24
     a6e:	e03d      	b.n	aec <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     a70:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a72:	4613      	mov	r3, r2
     a74:	005b      	lsls	r3, r3, #1
     a76:	4413      	add	r3, r2
     a78:	009b      	lsls	r3, r3, #2
     a7a:	461a      	mov	r2, r3
     a7c:	9b03      	ldr	r3, [sp, #12]
     a7e:	4413      	add	r3, r2
     a80:	685b      	ldr	r3, [r3, #4]
     a82:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a86:	4613      	mov	r3, r2
     a88:	005b      	lsls	r3, r3, #1
     a8a:	4413      	add	r3, r2
     a8c:	009b      	lsls	r3, r3, #2
     a8e:	461a      	mov	r2, r3
     a90:	9b03      	ldr	r3, [sp, #12]
     a92:	4413      	add	r3, r2
     a94:	681b      	ldr	r3, [r3, #0]
     a96:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     a98:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a9a:	4613      	mov	r3, r2
     a9c:	005b      	lsls	r3, r3, #1
     a9e:	4413      	add	r3, r2
     aa0:	009b      	lsls	r3, r3, #2
     aa2:	461a      	mov	r2, r3
     aa4:	9b03      	ldr	r3, [sp, #12]
     aa6:	4413      	add	r3, r2
     aa8:	689b      	ldr	r3, [r3, #8]
     aaa:	4619      	mov	r1, r3
     aac:	9a09      	ldr	r2, [sp, #36]	; 0x24
     aae:	4613      	mov	r3, r2
     ab0:	005b      	lsls	r3, r3, #1
     ab2:	4413      	add	r3, r2
     ab4:	009b      	lsls	r3, r3, #2
     ab6:	461a      	mov	r2, r3
     ab8:	9b03      	ldr	r3, [sp, #12]
     aba:	4413      	add	r3, r2
     abc:	685b      	ldr	r3, [r3, #4]
     abe:	1acb      	subs	r3, r1, r3
     ac0:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     ac2:	2300      	movs	r3, #0
     ac4:	9308      	str	r3, [sp, #32]
     ac6:	e00a      	b.n	ade <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     ac8:	9a00      	ldr	r2, [sp, #0]
     aca:	9b08      	ldr	r3, [sp, #32]
     acc:	441a      	add	r2, r3
     ace:	9901      	ldr	r1, [sp, #4]
     ad0:	9b08      	ldr	r3, [sp, #32]
     ad2:	440b      	add	r3, r1
     ad4:	7812      	ldrb	r2, [r2, #0]
     ad6:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     ad8:	9b08      	ldr	r3, [sp, #32]
     ada:	3301      	adds	r3, #1
     adc:	9308      	str	r3, [sp, #32]
     ade:	9a08      	ldr	r2, [sp, #32]
     ae0:	9b06      	ldr	r3, [sp, #24]
     ae2:	429a      	cmp	r2, r3
     ae4:	d3f0      	bcc.n	ac8 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ae8:	3301      	adds	r3, #1
     aea:	9309      	str	r3, [sp, #36]	; 0x24
     aec:	9a09      	ldr	r2, [sp, #36]	; 0x24
     aee:	9b07      	ldr	r3, [sp, #28]
     af0:	429a      	cmp	r2, r3
     af2:	d3bd      	bcc.n	a70 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     af4:	9b04      	ldr	r3, [sp, #16]
     af6:	681b      	ldr	r3, [r3, #0]
     af8:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     afa:	9b04      	ldr	r3, [sp, #16]
     afc:	3304      	adds	r3, #4
     afe:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     b00:	9b04      	ldr	r3, [sp, #16]
     b02:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     b04:	2300      	movs	r3, #0
     b06:	9309      	str	r3, [sp, #36]	; 0x24
     b08:	e024      	b.n	b54 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b0c:	00db      	lsls	r3, r3, #3
     b0e:	9a02      	ldr	r2, [sp, #8]
     b10:	4413      	add	r3, r2
     b12:	681b      	ldr	r3, [r3, #0]
     b14:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b18:	00db      	lsls	r3, r3, #3
     b1a:	9a02      	ldr	r2, [sp, #8]
     b1c:	4413      	add	r3, r2
     b1e:	685b      	ldr	r3, [r3, #4]
     b20:	4619      	mov	r1, r3
     b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b24:	00db      	lsls	r3, r3, #3
     b26:	9a02      	ldr	r2, [sp, #8]
     b28:	4413      	add	r3, r2
     b2a:	681b      	ldr	r3, [r3, #0]
     b2c:	1acb      	subs	r3, r1, r3
     b2e:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b30:	2300      	movs	r3, #0
     b32:	9308      	str	r3, [sp, #32]
     b34:	e007      	b.n	b46 <init_data_bss+0x106>
        {
            ram[j] = 0U;
     b36:	9a01      	ldr	r2, [sp, #4]
     b38:	9b08      	ldr	r3, [sp, #32]
     b3a:	4413      	add	r3, r2
     b3c:	2200      	movs	r2, #0
     b3e:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b40:	9b08      	ldr	r3, [sp, #32]
     b42:	3301      	adds	r3, #1
     b44:	9308      	str	r3, [sp, #32]
     b46:	9a08      	ldr	r2, [sp, #32]
     b48:	9b06      	ldr	r3, [sp, #24]
     b4a:	429a      	cmp	r2, r3
     b4c:	d3f3      	bcc.n	b36 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b50:	3301      	adds	r3, #1
     b52:	9309      	str	r3, [sp, #36]	; 0x24
     b54:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b56:	9b07      	ldr	r3, [sp, #28]
     b58:	429a      	cmp	r2, r3
     b5a:	d3d6      	bcc.n	b0a <init_data_bss+0xca>
        }
    }
}
     b5c:	bf00      	nop
     b5e:	bf00      	nop
     b60:	b00a      	add	sp, #40	; 0x28
     b62:	4770      	bx	lr
     b64:	0000c6f4 	.word	0x0000c6f4
     b68:	0000c710 	.word	0x0000c710

00000b6c <sys_m4_cache_init>:
{
     b6c:	b084      	sub	sp, #16
     b6e:	4603      	mov	r3, r0
     b70:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     b74:	2300      	movs	r3, #0
     b76:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     b7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b7e:	2b00      	cmp	r3, #0
     b80:	d118      	bne.n	bb4 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     b82:	4b10      	ldr	r3, [pc, #64]	; (bc4 <sys_m4_cache_init+0x58>)
     b84:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     b88:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     b8a:	4b0e      	ldr	r3, [pc, #56]	; (bc4 <sys_m4_cache_init+0x58>)
     b8c:	681b      	ldr	r3, [r3, #0]
     b8e:	4a0d      	ldr	r2, [pc, #52]	; (bc4 <sys_m4_cache_init+0x58>)
     b90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b94:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     b96:	bf00      	nop
     b98:	4b0a      	ldr	r3, [pc, #40]	; (bc4 <sys_m4_cache_init+0x58>)
     b9a:	681b      	ldr	r3, [r3, #0]
     b9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     ba4:	d0f8      	beq.n	b98 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     ba6:	4b07      	ldr	r3, [pc, #28]	; (bc4 <sys_m4_cache_init+0x58>)
     ba8:	681b      	ldr	r3, [r3, #0]
     baa:	4a06      	ldr	r2, [pc, #24]	; (bc4 <sys_m4_cache_init+0x58>)
     bac:	f043 0301 	orr.w	r3, r3, #1
     bb0:	6013      	str	r3, [r2, #0]
     bb2:	e002      	b.n	bba <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     bb4:	2301      	movs	r3, #1
     bb6:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     bba:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     bbe:	4618      	mov	r0, r3
     bc0:	b004      	add	sp, #16
     bc2:	4770      	bx	lr
     bc4:	e0082000 	.word	0xe0082000

00000bc8 <startup_go_to_user_mode>:
}
     bc8:	bf00      	nop
     bca:	4770      	bx	lr

00000bcc <Sys_GetCoreID>:
    return 0U;
     bcc:	2300      	movs	r3, #0
}
     bce:	4618      	mov	r0, r3
     bd0:	4770      	bx	lr

00000bd2 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     bd2:	e7fe      	b.n	bd2 <HardFault_Handler>

00000bd4 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     bd4:	e7fe      	b.n	bd4 <MemManage_Handler>

00000bd6 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     bd6:	e7fe      	b.n	bd6 <BusFault_Handler>

00000bd8 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     bd8:	e7fe      	b.n	bd8 <UsageFault_Handler>

00000bda <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     bda:	e7fe      	b.n	bda <SVC_Handler>

00000bdc <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     bdc:	e7fe      	b.n	bdc <DebugMon_Handler>

00000bde <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     bde:	e7fe      	b.n	bde <PendSV_Handler>

00000be0 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     be0:	e7fe      	b.n	be0 <SysTick_Handler>

00000be2 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     be2:	e7fe      	b.n	be2 <undefined_handler>

00000be4 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     be4:	b086      	sub	sp, #24
     be6:	9003      	str	r0, [sp, #12]
     be8:	9102      	str	r1, [sp, #8]
     bea:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
     bec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     bf0:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
     bf4:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
     bf6:	9b01      	ldr	r3, [sp, #4]
     bf8:	2b00      	cmp	r3, #0
     bfa:	d007      	beq.n	c0c <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
     bfc:	9b03      	ldr	r3, [sp, #12]
     bfe:	3310      	adds	r3, #16
     c00:	009b      	lsls	r3, r3, #2
     c02:	9a05      	ldr	r2, [sp, #20]
     c04:	4413      	add	r3, r2
     c06:	681a      	ldr	r2, [r3, #0]
     c08:	9b01      	ldr	r3, [sp, #4]
     c0a:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
     c0c:	9b03      	ldr	r3, [sp, #12]
     c0e:	3310      	adds	r3, #16
     c10:	009b      	lsls	r3, r3, #2
     c12:	9a05      	ldr	r2, [sp, #20]
     c14:	4413      	add	r3, r2
     c16:	9a02      	ldr	r2, [sp, #8]
     c18:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
     c1a:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
     c1e:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
     c22:	bf00      	nop
     c24:	b006      	add	sp, #24
     c26:	4770      	bx	lr

00000c28 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
     c28:	b082      	sub	sp, #8
     c2a:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     c2c:	9b01      	ldr	r3, [sp, #4]
     c2e:	f003 021f 	and.w	r2, r3, #31
     c32:	4905      	ldr	r1, [pc, #20]	; (c48 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
     c34:	9b01      	ldr	r3, [sp, #4]
     c36:	095b      	lsrs	r3, r3, #5
     c38:	2001      	movs	r0, #1
     c3a:	fa00 f202 	lsl.w	r2, r0, r2
     c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
     c42:	bf00      	nop
     c44:	b002      	add	sp, #8
     c46:	4770      	bx	lr
     c48:	e000e100 	.word	0xe000e100

00000c4c <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
     c4c:	b082      	sub	sp, #8
     c4e:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     c50:	9b01      	ldr	r3, [sp, #4]
     c52:	f003 021f 	and.w	r2, r3, #31
     c56:	4906      	ldr	r1, [pc, #24]	; (c70 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
     c58:	9b01      	ldr	r3, [sp, #4]
     c5a:	095b      	lsrs	r3, r3, #5
     c5c:	2001      	movs	r0, #1
     c5e:	fa00 f202 	lsl.w	r2, r0, r2
     c62:	3320      	adds	r3, #32
     c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
     c68:	bf00      	nop
     c6a:	b002      	add	sp, #8
     c6c:	4770      	bx	lr
     c6e:	bf00      	nop
     c70:	e000e100 	.word	0xe000e100

00000c74 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     c74:	b084      	sub	sp, #16
     c76:	9001      	str	r0, [sp, #4]
     c78:	460b      	mov	r3, r1
     c7a:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
     c7e:	2304      	movs	r3, #4
     c80:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
     c84:	f89d 2003 	ldrb.w	r2, [sp, #3]
     c88:	f89d 300f 	ldrb.w	r3, [sp, #15]
     c8c:	fa02 f103 	lsl.w	r1, r2, r3
     c90:	4a04      	ldr	r2, [pc, #16]	; (ca4 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
     c92:	9b01      	ldr	r3, [sp, #4]
     c94:	b2c9      	uxtb	r1, r1
     c96:	4413      	add	r3, r2
     c98:	460a      	mov	r2, r1
     c9a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
     c9e:	bf00      	nop
     ca0:	b004      	add	sp, #16
     ca2:	4770      	bx	lr
     ca4:	e000e100 	.word	0xe000e100

00000ca8 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
     ca8:	b084      	sub	sp, #16
     caa:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
     cac:	2304      	movs	r3, #4
     cae:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
     cb2:	4a09      	ldr	r2, [pc, #36]	; (cd8 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
     cb4:	9b01      	ldr	r3, [sp, #4]
     cb6:	4413      	add	r3, r2
     cb8:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
     cbc:	b2db      	uxtb	r3, r3
     cbe:	461a      	mov	r2, r3
     cc0:	f89d 300f 	ldrb.w	r3, [sp, #15]
     cc4:	fa42 f303 	asr.w	r3, r2, r3
     cc8:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
     ccc:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     cd0:	4618      	mov	r0, r3
     cd2:	b004      	add	sp, #16
     cd4:	4770      	bx	lr
     cd6:	bf00      	nop
     cd8:	e000e100 	.word	0xe000e100

00000cdc <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
     cdc:	b082      	sub	sp, #8
     cde:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     ce0:	9b01      	ldr	r3, [sp, #4]
     ce2:	f003 021f 	and.w	r2, r3, #31
     ce6:	4906      	ldr	r1, [pc, #24]	; (d00 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
     ce8:	9b01      	ldr	r3, [sp, #4]
     cea:	095b      	lsrs	r3, r3, #5
     cec:	2001      	movs	r0, #1
     cee:	fa00 f202 	lsl.w	r2, r0, r2
     cf2:	3360      	adds	r3, #96	; 0x60
     cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
     cf8:	bf00      	nop
     cfa:	b002      	add	sp, #8
     cfc:	4770      	bx	lr
     cfe:	bf00      	nop
     d00:	e000e100 	.word	0xe000e100

00000d04 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
     d04:	b500      	push	{lr}
     d06:	b085      	sub	sp, #20
     d08:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     d0a:	2300      	movs	r3, #0
     d0c:	9303      	str	r3, [sp, #12]
     d0e:	e05d      	b.n	dcc <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     d10:	9b01      	ldr	r3, [sp, #4]
     d12:	6859      	ldr	r1, [r3, #4]
     d14:	9a03      	ldr	r2, [sp, #12]
     d16:	4613      	mov	r3, r2
     d18:	005b      	lsls	r3, r3, #1
     d1a:	4413      	add	r3, r2
     d1c:	009b      	lsls	r3, r3, #2
     d1e:	440b      	add	r3, r1
     d20:	681b      	ldr	r3, [r3, #0]
     d22:	4618      	mov	r0, r3
     d24:	f000 f899 	bl	e5a <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d28:	9b01      	ldr	r3, [sp, #4]
     d2a:	6859      	ldr	r1, [r3, #4]
     d2c:	9a03      	ldr	r2, [sp, #12]
     d2e:	4613      	mov	r3, r2
     d30:	005b      	lsls	r3, r3, #1
     d32:	4413      	add	r3, r2
     d34:	009b      	lsls	r3, r3, #2
     d36:	440b      	add	r3, r1
     d38:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
     d3a:	9b01      	ldr	r3, [sp, #4]
     d3c:	6859      	ldr	r1, [r3, #4]
     d3e:	9a03      	ldr	r2, [sp, #12]
     d40:	4613      	mov	r3, r2
     d42:	005b      	lsls	r3, r3, #1
     d44:	4413      	add	r3, r2
     d46:	009b      	lsls	r3, r3, #2
     d48:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d4a:	795b      	ldrb	r3, [r3, #5]
     d4c:	4619      	mov	r1, r3
     d4e:	f000 f869 	bl	e24 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d52:	9b01      	ldr	r3, [sp, #4]
     d54:	6859      	ldr	r1, [r3, #4]
     d56:	9a03      	ldr	r2, [sp, #12]
     d58:	4613      	mov	r3, r2
     d5a:	005b      	lsls	r3, r3, #1
     d5c:	4413      	add	r3, r2
     d5e:	009b      	lsls	r3, r3, #2
     d60:	440b      	add	r3, r1
     d62:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
     d64:	9b01      	ldr	r3, [sp, #4]
     d66:	6859      	ldr	r1, [r3, #4]
     d68:	9a03      	ldr	r2, [sp, #12]
     d6a:	4613      	mov	r3, r2
     d6c:	005b      	lsls	r3, r3, #1
     d6e:	4413      	add	r3, r2
     d70:	009b      	lsls	r3, r3, #2
     d72:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d74:	689b      	ldr	r3, [r3, #8]
     d76:	2200      	movs	r2, #0
     d78:	4619      	mov	r1, r3
     d7a:	f000 f831 	bl	de0 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
     d7e:	9b01      	ldr	r3, [sp, #4]
     d80:	6859      	ldr	r1, [r3, #4]
     d82:	9a03      	ldr	r2, [sp, #12]
     d84:	4613      	mov	r3, r2
     d86:	005b      	lsls	r3, r3, #1
     d88:	4413      	add	r3, r2
     d8a:	009b      	lsls	r3, r3, #2
     d8c:	440b      	add	r3, r1
     d8e:	791b      	ldrb	r3, [r3, #4]
     d90:	2b00      	cmp	r3, #0
     d92:	d00c      	beq.n	dae <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     d94:	9b01      	ldr	r3, [sp, #4]
     d96:	6859      	ldr	r1, [r3, #4]
     d98:	9a03      	ldr	r2, [sp, #12]
     d9a:	4613      	mov	r3, r2
     d9c:	005b      	lsls	r3, r3, #1
     d9e:	4413      	add	r3, r2
     da0:	009b      	lsls	r3, r3, #2
     da2:	440b      	add	r3, r1
     da4:	681b      	ldr	r3, [r3, #0]
     da6:	4618      	mov	r0, r3
     da8:	f000 f828 	bl	dfc <IntCtrl_Ip_EnableIrq>
     dac:	e00b      	b.n	dc6 <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     dae:	9b01      	ldr	r3, [sp, #4]
     db0:	6859      	ldr	r1, [r3, #4]
     db2:	9a03      	ldr	r2, [sp, #12]
     db4:	4613      	mov	r3, r2
     db6:	005b      	lsls	r3, r3, #1
     db8:	4413      	add	r3, r2
     dba:	009b      	lsls	r3, r3, #2
     dbc:	440b      	add	r3, r1
     dbe:	681b      	ldr	r3, [r3, #0]
     dc0:	4618      	mov	r0, r3
     dc2:	f000 f825 	bl	e10 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     dc6:	9b03      	ldr	r3, [sp, #12]
     dc8:	3301      	adds	r3, #1
     dca:	9303      	str	r3, [sp, #12]
     dcc:	9b01      	ldr	r3, [sp, #4]
     dce:	681b      	ldr	r3, [r3, #0]
     dd0:	9a03      	ldr	r2, [sp, #12]
     dd2:	429a      	cmp	r2, r3
     dd4:	d39c      	bcc.n	d10 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
     dd6:	2300      	movs	r3, #0
}
     dd8:	4618      	mov	r0, r3
     dda:	b005      	add	sp, #20
     ddc:	f85d fb04 	ldr.w	pc, [sp], #4

00000de0 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     de0:	b500      	push	{lr}
     de2:	b085      	sub	sp, #20
     de4:	9003      	str	r0, [sp, #12]
     de6:	9102      	str	r1, [sp, #8]
     de8:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
     dea:	9a01      	ldr	r2, [sp, #4]
     dec:	9902      	ldr	r1, [sp, #8]
     dee:	9803      	ldr	r0, [sp, #12]
     df0:	f7ff fef8 	bl	be4 <IntCtrl_Ip_InstallHandlerPrivileged>
}
     df4:	bf00      	nop
     df6:	b005      	add	sp, #20
     df8:	f85d fb04 	ldr.w	pc, [sp], #4

00000dfc <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
     dfc:	b500      	push	{lr}
     dfe:	b083      	sub	sp, #12
     e00:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
     e02:	9801      	ldr	r0, [sp, #4]
     e04:	f7ff ff10 	bl	c28 <IntCtrl_Ip_EnableIrqPrivileged>
}
     e08:	bf00      	nop
     e0a:	b003      	add	sp, #12
     e0c:	f85d fb04 	ldr.w	pc, [sp], #4

00000e10 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
     e10:	b500      	push	{lr}
     e12:	b083      	sub	sp, #12
     e14:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
     e16:	9801      	ldr	r0, [sp, #4]
     e18:	f7ff ff18 	bl	c4c <IntCtrl_Ip_DisableIrqPrivileged>
}
     e1c:	bf00      	nop
     e1e:	b003      	add	sp, #12
     e20:	f85d fb04 	ldr.w	pc, [sp], #4

00000e24 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     e24:	b500      	push	{lr}
     e26:	b083      	sub	sp, #12
     e28:	9001      	str	r0, [sp, #4]
     e2a:	460b      	mov	r3, r1
     e2c:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
     e30:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e34:	4619      	mov	r1, r3
     e36:	9801      	ldr	r0, [sp, #4]
     e38:	f7ff ff1c 	bl	c74 <IntCtrl_Ip_SetPriorityPrivileged>
}
     e3c:	bf00      	nop
     e3e:	b003      	add	sp, #12
     e40:	f85d fb04 	ldr.w	pc, [sp], #4

00000e44 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
     e44:	b500      	push	{lr}
     e46:	b083      	sub	sp, #12
     e48:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
     e4a:	9801      	ldr	r0, [sp, #4]
     e4c:	f7ff ff2c 	bl	ca8 <IntCtrl_Ip_GetPriorityPrivileged>
     e50:	4603      	mov	r3, r0
}
     e52:	4618      	mov	r0, r3
     e54:	b003      	add	sp, #12
     e56:	f85d fb04 	ldr.w	pc, [sp], #4

00000e5a <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
     e5a:	b500      	push	{lr}
     e5c:	b083      	sub	sp, #12
     e5e:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
     e60:	9801      	ldr	r0, [sp, #4]
     e62:	f7ff ff3b 	bl	cdc <IntCtrl_Ip_ClearPendingPrivileged>
}
     e66:	bf00      	nop
     e68:	b003      	add	sp, #12
     e6a:	f85d fb04 	ldr.w	pc, [sp], #4
     e6e:	bf00      	nop

00000e70 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
     e70:	b500      	push	{lr}
     e72:	b083      	sub	sp, #12
     e74:	9001      	str	r0, [sp, #4]
     e76:	460b      	mov	r3, r1
     e78:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
     e7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e80:	2b00      	cmp	r3, #0
     e82:	d003      	beq.n	e8c <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
     e84:	9801      	ldr	r0, [sp, #4]
     e86:	f7ff ffb9 	bl	dfc <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
     e8a:	e002      	b.n	e92 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
     e8c:	9801      	ldr	r0, [sp, #4]
     e8e:	f7ff ffbf 	bl	e10 <IntCtrl_Ip_DisableIrq>
}
     e92:	bf00      	nop
     e94:	b003      	add	sp, #12
     e96:	f85d fb04 	ldr.w	pc, [sp], #4

00000e9a <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     e9a:	b500      	push	{lr}
     e9c:	b083      	sub	sp, #12
     e9e:	9001      	str	r0, [sp, #4]
     ea0:	460b      	mov	r3, r1
     ea2:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
     ea6:	f89d 3003 	ldrb.w	r3, [sp, #3]
     eaa:	4619      	mov	r1, r3
     eac:	9801      	ldr	r0, [sp, #4]
     eae:	f7ff ffb9 	bl	e24 <IntCtrl_Ip_SetPriority>
}
     eb2:	bf00      	nop
     eb4:	b003      	add	sp, #12
     eb6:	f85d fb04 	ldr.w	pc, [sp], #4

00000eba <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
     eba:	b500      	push	{lr}
     ebc:	b083      	sub	sp, #12
     ebe:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
     ec0:	9801      	ldr	r0, [sp, #4]
     ec2:	f7ff ffbf 	bl	e44 <IntCtrl_Ip_GetPriority>
     ec6:	4603      	mov	r3, r0
}
     ec8:	4618      	mov	r0, r3
     eca:	b003      	add	sp, #12
     ecc:	f85d fb04 	ldr.w	pc, [sp], #4

00000ed0 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     ed0:	b500      	push	{lr}
     ed2:	b085      	sub	sp, #20
     ed4:	9003      	str	r0, [sp, #12]
     ed6:	9102      	str	r1, [sp, #8]
     ed8:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
     eda:	9a01      	ldr	r2, [sp, #4]
     edc:	9902      	ldr	r1, [sp, #8]
     ede:	9803      	ldr	r0, [sp, #12]
     ee0:	f7ff ff7e 	bl	de0 <IntCtrl_Ip_InstallHandler>
}
     ee4:	bf00      	nop
     ee6:	b005      	add	sp, #20
     ee8:	f85d fb04 	ldr.w	pc, [sp], #4

00000eec <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
     eec:	b500      	push	{lr}
     eee:	b085      	sub	sp, #20
     ef0:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
     ef2:	2300      	movs	r3, #0
     ef4:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
     ef8:	f89d 300f 	ldrb.w	r3, [sp, #15]
     efc:	4a05      	ldr	r2, [pc, #20]	; (f14 <Platform_Init+0x28>)
     efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     f02:	681b      	ldr	r3, [r3, #0]
     f04:	4618      	mov	r0, r3
     f06:	f000 f8c7 	bl	1098 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
     f0a:	bf00      	nop
     f0c:	b005      	add	sp, #20
     f0e:	f85d fb04 	ldr.w	pc, [sp], #4
     f12:	bf00      	nop
     f14:	0000c4ec 	.word	0x0000c4ec

00000f18 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
     f18:	b500      	push	{lr}
     f1a:	b085      	sub	sp, #20
     f1c:	9001      	str	r0, [sp, #4]
     f1e:	460b      	mov	r3, r1
     f20:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f24:	2300      	movs	r3, #0
     f26:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
     f2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f2e:	4619      	mov	r1, r3
     f30:	9801      	ldr	r0, [sp, #4]
     f32:	f7ff ff9d 	bl	e70 <Platform_Ipw_SetIrq>
    }
    return RetValue;
     f36:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f3a:	4618      	mov	r0, r3
     f3c:	b005      	add	sp, #20
     f3e:	f85d fb04 	ldr.w	pc, [sp], #4

00000f42 <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     f42:	b500      	push	{lr}
     f44:	b085      	sub	sp, #20
     f46:	9001      	str	r0, [sp, #4]
     f48:	460b      	mov	r3, r1
     f4a:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f4e:	2300      	movs	r3, #0
     f50:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
     f54:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f58:	4619      	mov	r1, r3
     f5a:	9801      	ldr	r0, [sp, #4]
     f5c:	f7ff ff9d 	bl	e9a <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
     f60:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f64:	4618      	mov	r0, r3
     f66:	b005      	add	sp, #20
     f68:	f85d fb04 	ldr.w	pc, [sp], #4

00000f6c <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
     f6c:	b500      	push	{lr}
     f6e:	b085      	sub	sp, #20
     f70:	9001      	str	r0, [sp, #4]
     f72:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f74:	2300      	movs	r3, #0
     f76:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
     f7a:	9801      	ldr	r0, [sp, #4]
     f7c:	f7ff ff9d 	bl	eba <Platform_Ipw_GetIrqPriority>
     f80:	4603      	mov	r3, r0
     f82:	461a      	mov	r2, r3
     f84:	9b00      	ldr	r3, [sp, #0]
     f86:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
     f88:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f8c:	4618      	mov	r0, r3
     f8e:	b005      	add	sp, #20
     f90:	f85d fb04 	ldr.w	pc, [sp], #4

00000f94 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
     f94:	b500      	push	{lr}
     f96:	b087      	sub	sp, #28
     f98:	9003      	str	r0, [sp, #12]
     f9a:	9102      	str	r1, [sp, #8]
     f9c:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f9e:	2300      	movs	r3, #0
     fa0:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
     fa4:	9a01      	ldr	r2, [sp, #4]
     fa6:	9902      	ldr	r1, [sp, #8]
     fa8:	9803      	ldr	r0, [sp, #12]
     faa:	f7ff ff91 	bl	ed0 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
     fae:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
     fb2:	4618      	mov	r0, r3
     fb4:	b007      	add	sp, #28
     fb6:	f85d fb04 	ldr.w	pc, [sp], #4
     fba:	bf00      	nop

00000fbc <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
     fbc:	b500      	push	{lr}
     fbe:	b085      	sub	sp, #20
     fc0:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     fc2:	2300      	movs	r3, #0
     fc4:	9303      	str	r3, [sp, #12]
     fc6:	e05d      	b.n	1084 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     fc8:	9b01      	ldr	r3, [sp, #4]
     fca:	6859      	ldr	r1, [r3, #4]
     fcc:	9a03      	ldr	r2, [sp, #12]
     fce:	4613      	mov	r3, r2
     fd0:	005b      	lsls	r3, r3, #1
     fd2:	4413      	add	r3, r2
     fd4:	009b      	lsls	r3, r3, #2
     fd6:	440b      	add	r3, r1
     fd8:	681b      	ldr	r3, [r3, #0]
     fda:	4618      	mov	r0, r3
     fdc:	f7ff ff3d 	bl	e5a <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     fe0:	9b01      	ldr	r3, [sp, #4]
     fe2:	6859      	ldr	r1, [r3, #4]
     fe4:	9a03      	ldr	r2, [sp, #12]
     fe6:	4613      	mov	r3, r2
     fe8:	005b      	lsls	r3, r3, #1
     fea:	4413      	add	r3, r2
     fec:	009b      	lsls	r3, r3, #2
     fee:	440b      	add	r3, r1
     ff0:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
     ff2:	9b01      	ldr	r3, [sp, #4]
     ff4:	6859      	ldr	r1, [r3, #4]
     ff6:	9a03      	ldr	r2, [sp, #12]
     ff8:	4613      	mov	r3, r2
     ffa:	005b      	lsls	r3, r3, #1
     ffc:	4413      	add	r3, r2
     ffe:	009b      	lsls	r3, r3, #2
    1000:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1002:	795b      	ldrb	r3, [r3, #5]
    1004:	4619      	mov	r1, r3
    1006:	f7ff ff0d 	bl	e24 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    100a:	9b01      	ldr	r3, [sp, #4]
    100c:	6859      	ldr	r1, [r3, #4]
    100e:	9a03      	ldr	r2, [sp, #12]
    1010:	4613      	mov	r3, r2
    1012:	005b      	lsls	r3, r3, #1
    1014:	4413      	add	r3, r2
    1016:	009b      	lsls	r3, r3, #2
    1018:	440b      	add	r3, r1
    101a:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    101c:	9b01      	ldr	r3, [sp, #4]
    101e:	6859      	ldr	r1, [r3, #4]
    1020:	9a03      	ldr	r2, [sp, #12]
    1022:	4613      	mov	r3, r2
    1024:	005b      	lsls	r3, r3, #1
    1026:	4413      	add	r3, r2
    1028:	009b      	lsls	r3, r3, #2
    102a:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    102c:	689b      	ldr	r3, [r3, #8]
    102e:	2200      	movs	r2, #0
    1030:	4619      	mov	r1, r3
    1032:	f7ff fed5 	bl	de0 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1036:	9b01      	ldr	r3, [sp, #4]
    1038:	6859      	ldr	r1, [r3, #4]
    103a:	9a03      	ldr	r2, [sp, #12]
    103c:	4613      	mov	r3, r2
    103e:	005b      	lsls	r3, r3, #1
    1040:	4413      	add	r3, r2
    1042:	009b      	lsls	r3, r3, #2
    1044:	440b      	add	r3, r1
    1046:	791b      	ldrb	r3, [r3, #4]
    1048:	2b00      	cmp	r3, #0
    104a:	d00c      	beq.n	1066 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    104c:	9b01      	ldr	r3, [sp, #4]
    104e:	6859      	ldr	r1, [r3, #4]
    1050:	9a03      	ldr	r2, [sp, #12]
    1052:	4613      	mov	r3, r2
    1054:	005b      	lsls	r3, r3, #1
    1056:	4413      	add	r3, r2
    1058:	009b      	lsls	r3, r3, #2
    105a:	440b      	add	r3, r1
    105c:	681b      	ldr	r3, [r3, #0]
    105e:	4618      	mov	r0, r3
    1060:	f7ff fecc 	bl	dfc <IntCtrl_Ip_EnableIrq>
    1064:	e00b      	b.n	107e <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1066:	9b01      	ldr	r3, [sp, #4]
    1068:	6859      	ldr	r1, [r3, #4]
    106a:	9a03      	ldr	r2, [sp, #12]
    106c:	4613      	mov	r3, r2
    106e:	005b      	lsls	r3, r3, #1
    1070:	4413      	add	r3, r2
    1072:	009b      	lsls	r3, r3, #2
    1074:	440b      	add	r3, r1
    1076:	681b      	ldr	r3, [r3, #0]
    1078:	4618      	mov	r0, r3
    107a:	f7ff fec9 	bl	e10 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    107e:	9b03      	ldr	r3, [sp, #12]
    1080:	3301      	adds	r3, #1
    1082:	9303      	str	r3, [sp, #12]
    1084:	9b01      	ldr	r3, [sp, #4]
    1086:	681b      	ldr	r3, [r3, #0]
    1088:	9a03      	ldr	r2, [sp, #12]
    108a:	429a      	cmp	r2, r3
    108c:	d39c      	bcc.n	fc8 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    108e:	2300      	movs	r3, #0
}
    1090:	4618      	mov	r0, r3
    1092:	b005      	add	sp, #20
    1094:	f85d fb04 	ldr.w	pc, [sp], #4

00001098 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1098:	b500      	push	{lr}
    109a:	b085      	sub	sp, #20
    109c:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    109e:	2300      	movs	r3, #0
    10a0:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    10a4:	9b01      	ldr	r3, [sp, #4]
    10a6:	681b      	ldr	r3, [r3, #0]
    10a8:	2b00      	cmp	r3, #0
    10aa:	d007      	beq.n	10bc <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    10ac:	9b01      	ldr	r3, [sp, #4]
    10ae:	681b      	ldr	r3, [r3, #0]
    10b0:	4618      	mov	r0, r3
    10b2:	f7ff ff83 	bl	fbc <Platform_Ipw_InitIntCtrl>
    10b6:	4603      	mov	r3, r0
    10b8:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    10bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    10c0:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    10c2:	bf00      	nop
    10c4:	b005      	add	sp, #20
    10c6:	f85d fb04 	ldr.w	pc, [sp], #4

000010ca <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    10ca:	2300      	movs	r3, #0
}
    10cc:	4618      	mov	r0, r3
    10ce:	4770      	bx	lr

000010d0 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    10d0:	b082      	sub	sp, #8
    10d2:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    10d4:	2301      	movs	r3, #1
}
    10d6:	4618      	mov	r0, r3
    10d8:	b002      	add	sp, #8
    10da:	4770      	bx	lr

000010dc <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    10dc:	b082      	sub	sp, #8
    10de:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    10e0:	bf00      	nop
    10e2:	b002      	add	sp, #8
    10e4:	4770      	bx	lr

000010e6 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    10e6:	b082      	sub	sp, #8
    10e8:	9001      	str	r0, [sp, #4]
    return Micros;
    10ea:	9b01      	ldr	r3, [sp, #4]
}
    10ec:	4618      	mov	r0, r3
    10ee:	b002      	add	sp, #8
    10f0:	4770      	bx	lr

000010f2 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    10f2:	b500      	push	{lr}
    10f4:	b083      	sub	sp, #12
    10f6:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    10f8:	f000 f86c 	bl	11d4 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    10fc:	bf00      	nop
    10fe:	b003      	add	sp, #12
    1100:	f85d fb04 	ldr.w	pc, [sp], #4

00001104 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1104:	b500      	push	{lr}
    1106:	b085      	sub	sp, #20
    1108:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    110a:	2300      	movs	r3, #0
    110c:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    110e:	9b01      	ldr	r3, [sp, #4]
    1110:	2b00      	cmp	r3, #0
    1112:	d003      	beq.n	111c <OsIf_GetCounter+0x18>
    1114:	9b01      	ldr	r3, [sp, #4]
    1116:	2b01      	cmp	r3, #1
    1118:	d004      	beq.n	1124 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    111a:	e007      	b.n	112c <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    111c:	f7ff ffd5 	bl	10ca <OsIf_Timer_Dummy_GetCounter>
    1120:	9003      	str	r0, [sp, #12]
            break;
    1122:	e003      	b.n	112c <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1124:	f000 f872 	bl	120c <OsIf_Timer_System_GetCounter>
    1128:	9003      	str	r0, [sp, #12]
            break;
    112a:	bf00      	nop
    }

    return Value;
    112c:	9b03      	ldr	r3, [sp, #12]
}
    112e:	4618      	mov	r0, r3
    1130:	b005      	add	sp, #20
    1132:	f85d fb04 	ldr.w	pc, [sp], #4

00001136 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1136:	b500      	push	{lr}
    1138:	b085      	sub	sp, #20
    113a:	9001      	str	r0, [sp, #4]
    113c:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    113e:	2300      	movs	r3, #0
    1140:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1142:	9b00      	ldr	r3, [sp, #0]
    1144:	2b00      	cmp	r3, #0
    1146:	d003      	beq.n	1150 <OsIf_GetElapsed+0x1a>
    1148:	9b00      	ldr	r3, [sp, #0]
    114a:	2b01      	cmp	r3, #1
    114c:	d005      	beq.n	115a <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    114e:	e009      	b.n	1164 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1150:	9801      	ldr	r0, [sp, #4]
    1152:	f7ff ffbd 	bl	10d0 <OsIf_Timer_Dummy_GetElapsed>
    1156:	9003      	str	r0, [sp, #12]
            break;
    1158:	e004      	b.n	1164 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    115a:	9801      	ldr	r0, [sp, #4]
    115c:	f000 f864 	bl	1228 <OsIf_Timer_System_GetElapsed>
    1160:	9003      	str	r0, [sp, #12]
            break;
    1162:	bf00      	nop
    }

    return Value;
    1164:	9b03      	ldr	r3, [sp, #12]
}
    1166:	4618      	mov	r0, r3
    1168:	b005      	add	sp, #20
    116a:	f85d fb04 	ldr.w	pc, [sp], #4

0000116e <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    116e:	b500      	push	{lr}
    1170:	b083      	sub	sp, #12
    1172:	9001      	str	r0, [sp, #4]
    1174:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1176:	9b00      	ldr	r3, [sp, #0]
    1178:	2b00      	cmp	r3, #0
    117a:	d003      	beq.n	1184 <OsIf_SetTimerFrequency+0x16>
    117c:	9b00      	ldr	r3, [sp, #0]
    117e:	2b01      	cmp	r3, #1
    1180:	d004      	beq.n	118c <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1182:	e007      	b.n	1194 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1184:	9801      	ldr	r0, [sp, #4]
    1186:	f7ff ffa9 	bl	10dc <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    118a:	e003      	b.n	1194 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    118c:	9801      	ldr	r0, [sp, #4]
    118e:	f000 f85b 	bl	1248 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1192:	bf00      	nop
    }
}
    1194:	bf00      	nop
    1196:	b003      	add	sp, #12
    1198:	f85d fb04 	ldr.w	pc, [sp], #4

0000119c <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    119c:	b500      	push	{lr}
    119e:	b085      	sub	sp, #20
    11a0:	9001      	str	r0, [sp, #4]
    11a2:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    11a4:	2300      	movs	r3, #0
    11a6:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    11a8:	9b00      	ldr	r3, [sp, #0]
    11aa:	2b00      	cmp	r3, #0
    11ac:	d003      	beq.n	11b6 <OsIf_MicrosToTicks+0x1a>
    11ae:	9b00      	ldr	r3, [sp, #0]
    11b0:	2b01      	cmp	r3, #1
    11b2:	d005      	beq.n	11c0 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    11b4:	e009      	b.n	11ca <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    11b6:	9801      	ldr	r0, [sp, #4]
    11b8:	f7ff ff95 	bl	10e6 <OsIf_Timer_Dummy_MicrosToTicks>
    11bc:	9003      	str	r0, [sp, #12]
            break;
    11be:	e004      	b.n	11ca <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    11c0:	9801      	ldr	r0, [sp, #4]
    11c2:	f000 f84f 	bl	1264 <OsIf_Timer_System_MicrosToTicks>
    11c6:	9003      	str	r0, [sp, #12]
            break;
    11c8:	bf00      	nop
    }

    return Value;
    11ca:	9b03      	ldr	r3, [sp, #12]
}
    11cc:	4618      	mov	r0, r3
    11ce:	b005      	add	sp, #20
    11d0:	f85d fb04 	ldr.w	pc, [sp], #4

000011d4 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    11d4:	b500      	push	{lr}
    11d6:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    11d8:	2300      	movs	r3, #0
    11da:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    11dc:	4a09      	ldr	r2, [pc, #36]	; (1204 <OsIf_Timer_System_Init+0x30>)
    11de:	9b01      	ldr	r3, [sp, #4]
    11e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    11e4:	685a      	ldr	r2, [r3, #4]
    11e6:	4908      	ldr	r1, [pc, #32]	; (1208 <OsIf_Timer_System_Init+0x34>)
    11e8:	9b01      	ldr	r3, [sp, #4]
    11ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    11ee:	4a06      	ldr	r2, [pc, #24]	; (1208 <OsIf_Timer_System_Init+0x34>)
    11f0:	9b01      	ldr	r3, [sp, #4]
    11f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    11f6:	4618      	mov	r0, r3
    11f8:	f000 f868 	bl	12cc <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    11fc:	bf00      	nop
    11fe:	b003      	add	sp, #12
    1200:	f85d fb04 	ldr.w	pc, [sp], #4
    1204:	0000c4e4 	.word	0x0000c4e4
    1208:	1fff8b90 	.word	0x1fff8b90

0000120c <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    120c:	b500      	push	{lr}
    120e:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1210:	2300      	movs	r3, #0
    1212:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1214:	2300      	movs	r3, #0
    1216:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1218:	f000 f86c 	bl	12f4 <OsIf_Timer_System_Internal_GetCounter>
    121c:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    121e:	9b01      	ldr	r3, [sp, #4]
}
    1220:	4618      	mov	r0, r3
    1222:	b003      	add	sp, #12
    1224:	f85d fb04 	ldr.w	pc, [sp], #4

00001228 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1228:	b500      	push	{lr}
    122a:	b085      	sub	sp, #20
    122c:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    122e:	2300      	movs	r3, #0
    1230:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1232:	2300      	movs	r3, #0
    1234:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1236:	9801      	ldr	r0, [sp, #4]
    1238:	f000 f864 	bl	1304 <OsIf_Timer_System_Internal_GetElapsed>
    123c:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    123e:	9b03      	ldr	r3, [sp, #12]
}
    1240:	4618      	mov	r0, r3
    1242:	b005      	add	sp, #20
    1244:	f85d fb04 	ldr.w	pc, [sp], #4

00001248 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1248:	b084      	sub	sp, #16
    124a:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    124c:	2300      	movs	r3, #0
    124e:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1250:	4903      	ldr	r1, [pc, #12]	; (1260 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1252:	9b03      	ldr	r3, [sp, #12]
    1254:	9a01      	ldr	r2, [sp, #4]
    1256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    125a:	bf00      	nop
    125c:	b004      	add	sp, #16
    125e:	4770      	bx	lr
    1260:	1fff8b90 	.word	0x1fff8b90

00001264 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1264:	b5f0      	push	{r4, r5, r6, r7, lr}
    1266:	b087      	sub	sp, #28
    1268:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    126a:	2100      	movs	r1, #0
    126c:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    126e:	2100      	movs	r1, #0
    1270:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1272:	9901      	ldr	r1, [sp, #4]
    1274:	2000      	movs	r0, #0
    1276:	460e      	mov	r6, r1
    1278:	4607      	mov	r7, r0
    127a:	4812      	ldr	r0, [pc, #72]	; (12c4 <OsIf_Timer_System_MicrosToTicks+0x60>)
    127c:	9904      	ldr	r1, [sp, #16]
    127e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1282:	2000      	movs	r0, #0
    1284:	460c      	mov	r4, r1
    1286:	4605      	mov	r5, r0
    1288:	fb04 f007 	mul.w	r0, r4, r7
    128c:	fb06 f105 	mul.w	r1, r6, r5
    1290:	4401      	add	r1, r0
    1292:	fba6 2304 	umull	r2, r3, r6, r4
    1296:	4419      	add	r1, r3
    1298:	460b      	mov	r3, r1
    129a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    129e:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    12a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    12a6:	4a08      	ldr	r2, [pc, #32]	; (12c8 <OsIf_Timer_System_MicrosToTicks+0x64>)
    12a8:	f04f 0300 	mov.w	r3, #0
    12ac:	f7ff f97a 	bl	5a4 <__aeabi_uldivmod>
    12b0:	4602      	mov	r2, r0
    12b2:	460b      	mov	r3, r1
    12b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    12b8:	9b02      	ldr	r3, [sp, #8]
    12ba:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    12bc:	9b05      	ldr	r3, [sp, #20]
}
    12be:	4618      	mov	r0, r3
    12c0:	b007      	add	sp, #28
    12c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12c4:	1fff8b90 	.word	0x1fff8b90
    12c8:	000f4240 	.word	0x000f4240

000012cc <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    12cc:	b082      	sub	sp, #8
    12ce:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    12d0:	4b07      	ldr	r3, [pc, #28]	; (12f0 <OsIf_Timer_System_Internal_Init+0x24>)
    12d2:	2200      	movs	r2, #0
    12d4:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    12d6:	4b06      	ldr	r3, [pc, #24]	; (12f0 <OsIf_Timer_System_Internal_Init+0x24>)
    12d8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    12dc:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    12de:	4b04      	ldr	r3, [pc, #16]	; (12f0 <OsIf_Timer_System_Internal_Init+0x24>)
    12e0:	2200      	movs	r2, #0
    12e2:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    12e4:	4b02      	ldr	r3, [pc, #8]	; (12f0 <OsIf_Timer_System_Internal_Init+0x24>)
    12e6:	2205      	movs	r2, #5
    12e8:	601a      	str	r2, [r3, #0]
}
    12ea:	bf00      	nop
    12ec:	b002      	add	sp, #8
    12ee:	4770      	bx	lr
    12f0:	e000e010 	.word	0xe000e010

000012f4 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    12f4:	4b02      	ldr	r3, [pc, #8]	; (1300 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    12f6:	689b      	ldr	r3, [r3, #8]
    12f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    12fc:	4618      	mov	r0, r3
    12fe:	4770      	bx	lr
    1300:	e000e010 	.word	0xe000e010

00001304 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1304:	b084      	sub	sp, #16
    1306:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1308:	4b10      	ldr	r3, [pc, #64]	; (134c <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    130a:	689b      	ldr	r3, [r3, #8]
    130c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1310:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1312:	2300      	movs	r3, #0
    1314:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1316:	9b01      	ldr	r3, [sp, #4]
    1318:	681b      	ldr	r3, [r3, #0]
    131a:	9a02      	ldr	r2, [sp, #8]
    131c:	429a      	cmp	r2, r3
    131e:	d909      	bls.n	1334 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1320:	9b01      	ldr	r3, [sp, #4]
    1322:	681a      	ldr	r2, [r3, #0]
    1324:	9b02      	ldr	r3, [sp, #8]
    1326:	1ad3      	subs	r3, r2, r3
    1328:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    132c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1330:	9303      	str	r3, [sp, #12]
    1332:	e004      	b.n	133e <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1334:	9b01      	ldr	r3, [sp, #4]
    1336:	681a      	ldr	r2, [r3, #0]
    1338:	9b02      	ldr	r3, [sp, #8]
    133a:	1ad3      	subs	r3, r2, r3
    133c:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    133e:	9b01      	ldr	r3, [sp, #4]
    1340:	9a02      	ldr	r2, [sp, #8]
    1342:	601a      	str	r2, [r3, #0]

    return dif;
    1344:	9b03      	ldr	r3, [sp, #12]
}
    1346:	4618      	mov	r0, r3
    1348:	b004      	add	sp, #16
    134a:	4770      	bx	lr
    134c:	e000e010 	.word	0xe000e010

00001350 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1350:	b082      	sub	sp, #8
    1352:	9001      	str	r0, [sp, #4]
    1354:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1356:	bf00      	nop
    1358:	b002      	add	sp, #8
    135a:	4770      	bx	lr

0000135c <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    135c:	b500      	push	{lr}
    135e:	b085      	sub	sp, #20
    1360:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1362:	4b24      	ldr	r3, [pc, #144]	; (13f4 <Clock_Ip_UpdateDriverContext+0x98>)
    1364:	2201      	movs	r2, #1
    1366:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1368:	4b23      	ldr	r3, [pc, #140]	; (13f8 <Clock_Ip_UpdateDriverContext+0x9c>)
    136a:	681b      	ldr	r3, [r3, #0]
    136c:	2102      	movs	r1, #2
    136e:	4618      	mov	r0, r3
    1370:	f003 fc32 	bl	4bd8 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1374:	2300      	movs	r3, #0
    1376:	f88d 300f 	strb.w	r3, [sp, #15]
    137a:	e015      	b.n	13a8 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    137c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1380:	9a01      	ldr	r2, [sp, #4]
    1382:	334a      	adds	r3, #74	; 0x4a
    1384:	00db      	lsls	r3, r3, #3
    1386:	4413      	add	r3, r2
    1388:	6858      	ldr	r0, [r3, #4]
    138a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    138e:	9a01      	ldr	r2, [sp, #4]
    1390:	334a      	adds	r3, #74	; 0x4a
    1392:	00db      	lsls	r3, r3, #3
    1394:	4413      	add	r3, r2
    1396:	689b      	ldr	r3, [r3, #8]
    1398:	4619      	mov	r1, r3
    139a:	f001 fadc 	bl	2956 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    139e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13a2:	3301      	adds	r3, #1
    13a4:	f88d 300f 	strb.w	r3, [sp, #15]
    13a8:	9b01      	ldr	r3, [sp, #4]
    13aa:	7bdb      	ldrb	r3, [r3, #15]
    13ac:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13b0:	429a      	cmp	r2, r3
    13b2:	d3e3      	bcc.n	137c <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    13b4:	f000 f824 	bl	1400 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    13b8:	2301      	movs	r3, #1
    13ba:	f88d 300f 	strb.w	r3, [sp, #15]
    13be:	e00e      	b.n	13de <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    13c0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13c4:	9b01      	ldr	r3, [sp, #4]
    13c6:	327e      	adds	r2, #126	; 0x7e
    13c8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    13cc:	490b      	ldr	r1, [pc, #44]	; (13fc <Clock_Ip_UpdateDriverContext+0xa0>)
    13ce:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13d2:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    13d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13d8:	3301      	adds	r3, #1
    13da:	f88d 300f 	strb.w	r3, [sp, #15]
    13de:	9b01      	ldr	r3, [sp, #4]
    13e0:	7cdb      	ldrb	r3, [r3, #19]
    13e2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13e6:	429a      	cmp	r2, r3
    13e8:	d3ea      	bcc.n	13c0 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    13ea:	bf00      	nop
    13ec:	bf00      	nop
    13ee:	b005      	add	sp, #20
    13f0:	f85d fb04 	ldr.w	pc, [sp], #4
    13f4:	1fff8b10 	.word	0x1fff8b10
    13f8:	1fff8b94 	.word	0x1fff8b94
    13fc:	1fff8ba0 	.word	0x1fff8ba0

00001400 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1400:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1402:	4b23      	ldr	r3, [pc, #140]	; (1490 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1404:	781b      	ldrb	r3, [r3, #0]
    1406:	f083 0301 	eor.w	r3, r3, #1
    140a:	b2db      	uxtb	r3, r3
    140c:	2b00      	cmp	r3, #0
    140e:	d03d      	beq.n	148c <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1410:	4b1f      	ldr	r3, [pc, #124]	; (1490 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1412:	2201      	movs	r2, #1
    1414:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1416:	4b1f      	ldr	r3, [pc, #124]	; (1494 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1418:	685b      	ldr	r3, [r3, #4]
    141a:	2100      	movs	r1, #0
    141c:	2000      	movs	r0, #0
    141e:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1420:	4b1c      	ldr	r3, [pc, #112]	; (1494 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1422:	689b      	ldr	r3, [r3, #8]
    1424:	2057      	movs	r0, #87	; 0x57
    1426:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1428:	4b1b      	ldr	r3, [pc, #108]	; (1498 <Clock_Ip_CallEmptyCallbacks+0x98>)
    142a:	681b      	ldr	r3, [r3, #0]
    142c:	2000      	movs	r0, #0
    142e:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1430:	4b1a      	ldr	r3, [pc, #104]	; (149c <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1432:	681b      	ldr	r3, [r3, #0]
    1434:	2000      	movs	r0, #0
    1436:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1438:	4b19      	ldr	r3, [pc, #100]	; (14a0 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	2000      	movs	r0, #0
    143e:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1440:	4b18      	ldr	r3, [pc, #96]	; (14a4 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1442:	685b      	ldr	r3, [r3, #4]
    1444:	2000      	movs	r0, #0
    1446:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1448:	4b16      	ldr	r3, [pc, #88]	; (14a4 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    144a:	689b      	ldr	r3, [r3, #8]
    144c:	2057      	movs	r0, #87	; 0x57
    144e:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1450:	4b15      	ldr	r3, [pc, #84]	; (14a8 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1452:	681b      	ldr	r3, [r3, #0]
    1454:	2000      	movs	r0, #0
    1456:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1458:	4b13      	ldr	r3, [pc, #76]	; (14a8 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    145a:	685b      	ldr	r3, [r3, #4]
    145c:	2100      	movs	r1, #0
    145e:	2057      	movs	r0, #87	; 0x57
    1460:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1462:	4b12      	ldr	r3, [pc, #72]	; (14ac <Clock_Ip_CallEmptyCallbacks+0xac>)
    1464:	681b      	ldr	r3, [r3, #0]
    1466:	2000      	movs	r0, #0
    1468:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    146a:	4b11      	ldr	r3, [pc, #68]	; (14b0 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    146c:	685b      	ldr	r3, [r3, #4]
    146e:	2000      	movs	r0, #0
    1470:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1472:	4b0f      	ldr	r3, [pc, #60]	; (14b0 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1474:	689b      	ldr	r3, [r3, #8]
    1476:	2057      	movs	r0, #87	; 0x57
    1478:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    147a:	4b0e      	ldr	r3, [pc, #56]	; (14b4 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    147c:	685b      	ldr	r3, [r3, #4]
    147e:	2000      	movs	r0, #0
    1480:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1482:	4b0d      	ldr	r3, [pc, #52]	; (14b8 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1484:	681b      	ldr	r3, [r3, #0]
    1486:	2100      	movs	r1, #0
    1488:	2000      	movs	r0, #0
    148a:	4798      	blx	r3
    }
}
    148c:	bf00      	nop
    148e:	bd08      	pop	{r3, pc}
    1490:	1fff8b98 	.word	0x1fff8b98
    1494:	0000bee8 	.word	0x0000bee8
    1498:	0000bdfc 	.word	0x0000bdfc
    149c:	0000be38 	.word	0x0000be38
    14a0:	0000be40 	.word	0x0000be40
    14a4:	0000be68 	.word	0x0000be68
    14a8:	0000be74 	.word	0x0000be74
    14ac:	0000beac 	.word	0x0000beac
    14b0:	0000bef8 	.word	0x0000bef8
    14b4:	0000bf24 	.word	0x0000bf24
    14b8:	0000bf20 	.word	0x0000bf20

000014bc <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    14bc:	b500      	push	{lr}
    14be:	b085      	sub	sp, #20
    14c0:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    14c2:	9b01      	ldr	r3, [sp, #4]
    14c4:	7adb      	ldrb	r3, [r3, #11]
    14c6:	9303      	str	r3, [sp, #12]
    14c8:	e01f      	b.n	150a <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    14ca:	9b03      	ldr	r3, [sp, #12]
    14cc:	1e5a      	subs	r2, r3, #1
    14ce:	9b01      	ldr	r3, [sp, #4]
    14d0:	320d      	adds	r2, #13
    14d2:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    14d6:	495a      	ldr	r1, [pc, #360]	; (1640 <Clock_Ip_ResetClockConfiguration+0x184>)
    14d8:	4613      	mov	r3, r2
    14da:	00db      	lsls	r3, r3, #3
    14dc:	4413      	add	r3, r2
    14de:	440b      	add	r3, r1
    14e0:	3301      	adds	r3, #1
    14e2:	781b      	ldrb	r3, [r3, #0]
    14e4:	461a      	mov	r2, r3
    14e6:	4b57      	ldr	r3, [pc, #348]	; (1644 <Clock_Ip_ResetClockConfiguration+0x188>)
    14e8:	5c9b      	ldrb	r3, [r3, r2]
    14ea:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    14ec:	4a56      	ldr	r2, [pc, #344]	; (1648 <Clock_Ip_ResetClockConfiguration+0x18c>)
    14ee:	9b02      	ldr	r3, [sp, #8]
    14f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    14f4:	9a03      	ldr	r2, [sp, #12]
    14f6:	3a01      	subs	r2, #1
    14f8:	320d      	adds	r2, #13
    14fa:	00d2      	lsls	r2, r2, #3
    14fc:	9901      	ldr	r1, [sp, #4]
    14fe:	440a      	add	r2, r1
    1500:	4610      	mov	r0, r2
    1502:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1504:	9b03      	ldr	r3, [sp, #12]
    1506:	3b01      	subs	r3, #1
    1508:	9303      	str	r3, [sp, #12]
    150a:	9b03      	ldr	r3, [sp, #12]
    150c:	2b00      	cmp	r3, #0
    150e:	d1dc      	bne.n	14ca <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1510:	9b01      	ldr	r3, [sp, #4]
    1512:	7b9b      	ldrb	r3, [r3, #14]
    1514:	9303      	str	r3, [sp, #12]
    1516:	e026      	b.n	1566 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1518:	9b03      	ldr	r3, [sp, #12]
    151a:	3b01      	subs	r3, #1
    151c:	9a01      	ldr	r2, [sp, #4]
    151e:	3324      	adds	r3, #36	; 0x24
    1520:	011b      	lsls	r3, r3, #4
    1522:	4413      	add	r3, r2
    1524:	3304      	adds	r3, #4
    1526:	681a      	ldr	r2, [r3, #0]
    1528:	4945      	ldr	r1, [pc, #276]	; (1640 <Clock_Ip_ResetClockConfiguration+0x184>)
    152a:	4613      	mov	r3, r2
    152c:	00db      	lsls	r3, r3, #3
    152e:	4413      	add	r3, r2
    1530:	440b      	add	r3, r1
    1532:	3301      	adds	r3, #1
    1534:	781b      	ldrb	r3, [r3, #0]
    1536:	461a      	mov	r2, r3
    1538:	4b44      	ldr	r3, [pc, #272]	; (164c <Clock_Ip_ResetClockConfiguration+0x190>)
    153a:	5c9b      	ldrb	r3, [r3, r2]
    153c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    153e:	4944      	ldr	r1, [pc, #272]	; (1650 <Clock_Ip_ResetClockConfiguration+0x194>)
    1540:	9a02      	ldr	r2, [sp, #8]
    1542:	4613      	mov	r3, r2
    1544:	005b      	lsls	r3, r3, #1
    1546:	4413      	add	r3, r2
    1548:	009b      	lsls	r3, r3, #2
    154a:	440b      	add	r3, r1
    154c:	681b      	ldr	r3, [r3, #0]
    154e:	9a03      	ldr	r2, [sp, #12]
    1550:	3a01      	subs	r2, #1
    1552:	3224      	adds	r2, #36	; 0x24
    1554:	0112      	lsls	r2, r2, #4
    1556:	9901      	ldr	r1, [sp, #4]
    1558:	440a      	add	r2, r1
    155a:	3204      	adds	r2, #4
    155c:	4610      	mov	r0, r2
    155e:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1560:	9b03      	ldr	r3, [sp, #12]
    1562:	3b01      	subs	r3, #1
    1564:	9303      	str	r3, [sp, #12]
    1566:	9b03      	ldr	r3, [sp, #12]
    1568:	2b00      	cmp	r3, #0
    156a:	d1d5      	bne.n	1518 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    156c:	9b01      	ldr	r3, [sp, #4]
    156e:	7a9b      	ldrb	r3, [r3, #10]
    1570:	9303      	str	r3, [sp, #12]
    1572:	e02a      	b.n	15ca <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1574:	9b03      	ldr	r3, [sp, #12]
    1576:	1e5a      	subs	r2, r3, #1
    1578:	9901      	ldr	r1, [sp, #4]
    157a:	4613      	mov	r3, r2
    157c:	009b      	lsls	r3, r3, #2
    157e:	4413      	add	r3, r2
    1580:	00db      	lsls	r3, r3, #3
    1582:	440b      	add	r3, r1
    1584:	3340      	adds	r3, #64	; 0x40
    1586:	681a      	ldr	r2, [r3, #0]
    1588:	492d      	ldr	r1, [pc, #180]	; (1640 <Clock_Ip_ResetClockConfiguration+0x184>)
    158a:	4613      	mov	r3, r2
    158c:	00db      	lsls	r3, r3, #3
    158e:	4413      	add	r3, r2
    1590:	440b      	add	r3, r1
    1592:	3301      	adds	r3, #1
    1594:	781b      	ldrb	r3, [r3, #0]
    1596:	461a      	mov	r2, r3
    1598:	4b2e      	ldr	r3, [pc, #184]	; (1654 <Clock_Ip_ResetClockConfiguration+0x198>)
    159a:	5c9b      	ldrb	r3, [r3, r2]
    159c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    159e:	492e      	ldr	r1, [pc, #184]	; (1658 <Clock_Ip_ResetClockConfiguration+0x19c>)
    15a0:	9a02      	ldr	r2, [sp, #8]
    15a2:	4613      	mov	r3, r2
    15a4:	009b      	lsls	r3, r3, #2
    15a6:	4413      	add	r3, r2
    15a8:	009b      	lsls	r3, r3, #2
    15aa:	440b      	add	r3, r1
    15ac:	6819      	ldr	r1, [r3, #0]
    15ae:	9b03      	ldr	r3, [sp, #12]
    15b0:	1e5a      	subs	r2, r3, #1
    15b2:	4613      	mov	r3, r2
    15b4:	009b      	lsls	r3, r3, #2
    15b6:	4413      	add	r3, r2
    15b8:	00db      	lsls	r3, r3, #3
    15ba:	3340      	adds	r3, #64	; 0x40
    15bc:	9a01      	ldr	r2, [sp, #4]
    15be:	4413      	add	r3, r2
    15c0:	4618      	mov	r0, r3
    15c2:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    15c4:	9b03      	ldr	r3, [sp, #12]
    15c6:	3b01      	subs	r3, #1
    15c8:	9303      	str	r3, [sp, #12]
    15ca:	9b03      	ldr	r3, [sp, #12]
    15cc:	2b00      	cmp	r3, #0
    15ce:	d1d1      	bne.n	1574 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    15d0:	9b01      	ldr	r3, [sp, #4]
    15d2:	7a5b      	ldrb	r3, [r3, #9]
    15d4:	9303      	str	r3, [sp, #12]
    15d6:	e02b      	b.n	1630 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    15d8:	9b03      	ldr	r3, [sp, #12]
    15da:	1e5a      	subs	r2, r3, #1
    15dc:	9901      	ldr	r1, [sp, #4]
    15de:	4613      	mov	r3, r2
    15e0:	009b      	lsls	r3, r3, #2
    15e2:	4413      	add	r3, r2
    15e4:	009b      	lsls	r3, r3, #2
    15e6:	440b      	add	r3, r1
    15e8:	332c      	adds	r3, #44	; 0x2c
    15ea:	681a      	ldr	r2, [r3, #0]
    15ec:	4914      	ldr	r1, [pc, #80]	; (1640 <Clock_Ip_ResetClockConfiguration+0x184>)
    15ee:	4613      	mov	r3, r2
    15f0:	00db      	lsls	r3, r3, #3
    15f2:	4413      	add	r3, r2
    15f4:	440b      	add	r3, r1
    15f6:	3301      	adds	r3, #1
    15f8:	781b      	ldrb	r3, [r3, #0]
    15fa:	461a      	mov	r2, r3
    15fc:	4b17      	ldr	r3, [pc, #92]	; (165c <Clock_Ip_ResetClockConfiguration+0x1a0>)
    15fe:	5c9b      	ldrb	r3, [r3, r2]
    1600:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    1602:	4917      	ldr	r1, [pc, #92]	; (1660 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1604:	9a02      	ldr	r2, [sp, #8]
    1606:	4613      	mov	r3, r2
    1608:	009b      	lsls	r3, r3, #2
    160a:	4413      	add	r3, r2
    160c:	009b      	lsls	r3, r3, #2
    160e:	440b      	add	r3, r1
    1610:	6819      	ldr	r1, [r3, #0]
    1612:	9b03      	ldr	r3, [sp, #12]
    1614:	1e5a      	subs	r2, r3, #1
    1616:	4613      	mov	r3, r2
    1618:	009b      	lsls	r3, r3, #2
    161a:	4413      	add	r3, r2
    161c:	009b      	lsls	r3, r3, #2
    161e:	3328      	adds	r3, #40	; 0x28
    1620:	9a01      	ldr	r2, [sp, #4]
    1622:	4413      	add	r3, r2
    1624:	3304      	adds	r3, #4
    1626:	4618      	mov	r0, r3
    1628:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    162a:	9b03      	ldr	r3, [sp, #12]
    162c:	3b01      	subs	r3, #1
    162e:	9303      	str	r3, [sp, #12]
    1630:	9b03      	ldr	r3, [sp, #12]
    1632:	2b00      	cmp	r3, #0
    1634:	d1d0      	bne.n	15d8 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    1636:	bf00      	nop
    1638:	bf00      	nop
    163a:	b005      	add	sp, #20
    163c:	f85d fb04 	ldr.w	pc, [sp], #4
    1640:	0000b8ec 	.word	0x0000b8ec
    1644:	0000b8bc 	.word	0x0000b8bc
    1648:	0000bf24 	.word	0x0000bf24
    164c:	0000b89c 	.word	0x0000b89c
    1650:	0000be68 	.word	0x0000be68
    1654:	0000b8ac 	.word	0x0000b8ac
    1658:	0000bef8 	.word	0x0000bef8
    165c:	0000b86c 	.word	0x0000b86c
    1660:	0000be40 	.word	0x0000be40

00001664 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    1664:	b500      	push	{lr}
    1666:	b085      	sub	sp, #20
    1668:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    166a:	2301      	movs	r3, #1
    166c:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    166e:	9801      	ldr	r0, [sp, #4]
    1670:	f000 f818 	bl	16a4 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    1674:	4b0a      	ldr	r3, [pc, #40]	; (16a0 <Clock_Ip_Init+0x3c>)
    1676:	781b      	ldrb	r3, [r3, #0]
    1678:	2b00      	cmp	r3, #0
    167a:	d00a      	beq.n	1692 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    167c:	f000 fb74 	bl	1d68 <Clock_Ip_GetPllStatus>
    1680:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    1682:	9b02      	ldr	r3, [sp, #8]
    1684:	2b00      	cmp	r3, #0
    1686:	d106      	bne.n	1696 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    1688:	f000 fbf2 	bl	1e70 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    168c:	2300      	movs	r3, #0
    168e:	9303      	str	r3, [sp, #12]
    1690:	e001      	b.n	1696 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    1692:	2300      	movs	r3, #0
    1694:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    1696:	9b03      	ldr	r3, [sp, #12]
}
    1698:	4618      	mov	r0, r3
    169a:	b005      	add	sp, #20
    169c:	f85d fb04 	ldr.w	pc, [sp], #4
    16a0:	1fff8b9c 	.word	0x1fff8b9c

000016a4 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    16a4:	b510      	push	{r4, lr}
    16a6:	b084      	sub	sp, #16
    16a8:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    16aa:	4a9f      	ldr	r2, [pc, #636]	; (1928 <Clock_Ip_InitClock+0x284>)
    16ac:	9b01      	ldr	r3, [sp, #4]
    16ae:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    16b0:	2101      	movs	r1, #1
    16b2:	9801      	ldr	r0, [sp, #4]
    16b4:	f003 fa90 	bl	4bd8 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    16b8:	4b9b      	ldr	r3, [pc, #620]	; (1928 <Clock_Ip_InitClock+0x284>)
    16ba:	681b      	ldr	r3, [r3, #0]
    16bc:	2b00      	cmp	r3, #0
    16be:	d030      	beq.n	1722 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    16c0:	2300      	movs	r3, #0
    16c2:	9303      	str	r3, [sp, #12]
    16c4:	e027      	b.n	1716 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    16c6:	9901      	ldr	r1, [sp, #4]
    16c8:	9a03      	ldr	r2, [sp, #12]
    16ca:	4613      	mov	r3, r2
    16cc:	009b      	lsls	r3, r3, #2
    16ce:	4413      	add	r3, r2
    16d0:	009b      	lsls	r3, r3, #2
    16d2:	440b      	add	r3, r1
    16d4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    16d8:	681a      	ldr	r2, [r3, #0]
    16da:	4994      	ldr	r1, [pc, #592]	; (192c <Clock_Ip_InitClock+0x288>)
    16dc:	4613      	mov	r3, r2
    16de:	00db      	lsls	r3, r3, #3
    16e0:	4413      	add	r3, r2
    16e2:	440b      	add	r3, r1
    16e4:	3301      	adds	r3, #1
    16e6:	781b      	ldrb	r3, [r3, #0]
    16e8:	461a      	mov	r2, r3
    16ea:	4b91      	ldr	r3, [pc, #580]	; (1930 <Clock_Ip_InitClock+0x28c>)
    16ec:	5c9b      	ldrb	r3, [r3, r2]
    16ee:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    16f0:	4a90      	ldr	r2, [pc, #576]	; (1934 <Clock_Ip_InitClock+0x290>)
    16f2:	9b02      	ldr	r3, [sp, #8]
    16f4:	011b      	lsls	r3, r3, #4
    16f6:	4413      	add	r3, r2
    16f8:	6819      	ldr	r1, [r3, #0]
    16fa:	9a03      	ldr	r2, [sp, #12]
    16fc:	4613      	mov	r3, r2
    16fe:	009b      	lsls	r3, r3, #2
    1700:	4413      	add	r3, r2
    1702:	009b      	lsls	r3, r3, #2
    1704:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1708:	9a01      	ldr	r2, [sp, #4]
    170a:	4413      	add	r3, r2
    170c:	4618      	mov	r0, r3
    170e:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1710:	9b03      	ldr	r3, [sp, #12]
    1712:	3301      	adds	r3, #1
    1714:	9303      	str	r3, [sp, #12]
    1716:	9b01      	ldr	r3, [sp, #4]
    1718:	7c9b      	ldrb	r3, [r3, #18]
    171a:	461a      	mov	r2, r3
    171c:	9b03      	ldr	r3, [sp, #12]
    171e:	4293      	cmp	r3, r2
    1720:	d3d1      	bcc.n	16c6 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    1722:	9801      	ldr	r0, [sp, #4]
    1724:	f7ff feca 	bl	14bc <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1728:	2300      	movs	r3, #0
    172a:	9303      	str	r3, [sp, #12]
    172c:	e029      	b.n	1782 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    172e:	9901      	ldr	r1, [sp, #4]
    1730:	9a03      	ldr	r2, [sp, #12]
    1732:	4613      	mov	r3, r2
    1734:	005b      	lsls	r3, r3, #1
    1736:	4413      	add	r3, r2
    1738:	009b      	lsls	r3, r3, #2
    173a:	440b      	add	r3, r1
    173c:	3314      	adds	r3, #20
    173e:	681a      	ldr	r2, [r3, #0]
    1740:	497a      	ldr	r1, [pc, #488]	; (192c <Clock_Ip_InitClock+0x288>)
    1742:	4613      	mov	r3, r2
    1744:	00db      	lsls	r3, r3, #3
    1746:	4413      	add	r3, r2
    1748:	440b      	add	r3, r1
    174a:	3301      	adds	r3, #1
    174c:	781b      	ldrb	r3, [r3, #0]
    174e:	461a      	mov	r2, r3
    1750:	4b79      	ldr	r3, [pc, #484]	; (1938 <Clock_Ip_InitClock+0x294>)
    1752:	5c9b      	ldrb	r3, [r3, r2]
    1754:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    1756:	4979      	ldr	r1, [pc, #484]	; (193c <Clock_Ip_InitClock+0x298>)
    1758:	9a02      	ldr	r2, [sp, #8]
    175a:	4613      	mov	r3, r2
    175c:	005b      	lsls	r3, r3, #1
    175e:	4413      	add	r3, r2
    1760:	009b      	lsls	r3, r3, #2
    1762:	440b      	add	r3, r1
    1764:	6819      	ldr	r1, [r3, #0]
    1766:	9a03      	ldr	r2, [sp, #12]
    1768:	4613      	mov	r3, r2
    176a:	005b      	lsls	r3, r3, #1
    176c:	4413      	add	r3, r2
    176e:	009b      	lsls	r3, r3, #2
    1770:	3310      	adds	r3, #16
    1772:	9a01      	ldr	r2, [sp, #4]
    1774:	4413      	add	r3, r2
    1776:	3304      	adds	r3, #4
    1778:	4618      	mov	r0, r3
    177a:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    177c:	9b03      	ldr	r3, [sp, #12]
    177e:	3301      	adds	r3, #1
    1780:	9303      	str	r3, [sp, #12]
    1782:	9b01      	ldr	r3, [sp, #4]
    1784:	7a1b      	ldrb	r3, [r3, #8]
    1786:	461a      	mov	r2, r3
    1788:	9b03      	ldr	r3, [sp, #12]
    178a:	4293      	cmp	r3, r2
    178c:	d3cf      	bcc.n	172e <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    178e:	2300      	movs	r3, #0
    1790:	9303      	str	r3, [sp, #12]
    1792:	e02a      	b.n	17ea <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1794:	9901      	ldr	r1, [sp, #4]
    1796:	9a03      	ldr	r2, [sp, #12]
    1798:	4613      	mov	r3, r2
    179a:	009b      	lsls	r3, r3, #2
    179c:	4413      	add	r3, r2
    179e:	009b      	lsls	r3, r3, #2
    17a0:	440b      	add	r3, r1
    17a2:	332c      	adds	r3, #44	; 0x2c
    17a4:	681a      	ldr	r2, [r3, #0]
    17a6:	4961      	ldr	r1, [pc, #388]	; (192c <Clock_Ip_InitClock+0x288>)
    17a8:	4613      	mov	r3, r2
    17aa:	00db      	lsls	r3, r3, #3
    17ac:	4413      	add	r3, r2
    17ae:	440b      	add	r3, r1
    17b0:	3301      	adds	r3, #1
    17b2:	781b      	ldrb	r3, [r3, #0]
    17b4:	461a      	mov	r2, r3
    17b6:	4b62      	ldr	r3, [pc, #392]	; (1940 <Clock_Ip_InitClock+0x29c>)
    17b8:	5c9b      	ldrb	r3, [r3, r2]
    17ba:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    17bc:	4961      	ldr	r1, [pc, #388]	; (1944 <Clock_Ip_InitClock+0x2a0>)
    17be:	9a02      	ldr	r2, [sp, #8]
    17c0:	4613      	mov	r3, r2
    17c2:	009b      	lsls	r3, r3, #2
    17c4:	4413      	add	r3, r2
    17c6:	009b      	lsls	r3, r3, #2
    17c8:	440b      	add	r3, r1
    17ca:	3304      	adds	r3, #4
    17cc:	6819      	ldr	r1, [r3, #0]
    17ce:	9a03      	ldr	r2, [sp, #12]
    17d0:	4613      	mov	r3, r2
    17d2:	009b      	lsls	r3, r3, #2
    17d4:	4413      	add	r3, r2
    17d6:	009b      	lsls	r3, r3, #2
    17d8:	3328      	adds	r3, #40	; 0x28
    17da:	9a01      	ldr	r2, [sp, #4]
    17dc:	4413      	add	r3, r2
    17de:	3304      	adds	r3, #4
    17e0:	4618      	mov	r0, r3
    17e2:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    17e4:	9b03      	ldr	r3, [sp, #12]
    17e6:	3301      	adds	r3, #1
    17e8:	9303      	str	r3, [sp, #12]
    17ea:	9b01      	ldr	r3, [sp, #4]
    17ec:	7a5b      	ldrb	r3, [r3, #9]
    17ee:	461a      	mov	r2, r3
    17f0:	9b03      	ldr	r3, [sp, #12]
    17f2:	4293      	cmp	r3, r2
    17f4:	d3ce      	bcc.n	1794 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    17f6:	9801      	ldr	r0, [sp, #4]
    17f8:	f7ff fdb0 	bl	135c <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    17fc:	2300      	movs	r3, #0
    17fe:	9303      	str	r3, [sp, #12]
    1800:	e028      	b.n	1854 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    1802:	9901      	ldr	r1, [sp, #4]
    1804:	9a03      	ldr	r2, [sp, #12]
    1806:	4613      	mov	r3, r2
    1808:	009b      	lsls	r3, r3, #2
    180a:	4413      	add	r3, r2
    180c:	009b      	lsls	r3, r3, #2
    180e:	440b      	add	r3, r1
    1810:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1814:	681a      	ldr	r2, [r3, #0]
    1816:	4945      	ldr	r1, [pc, #276]	; (192c <Clock_Ip_InitClock+0x288>)
    1818:	4613      	mov	r3, r2
    181a:	00db      	lsls	r3, r3, #3
    181c:	4413      	add	r3, r2
    181e:	440b      	add	r3, r1
    1820:	3301      	adds	r3, #1
    1822:	781b      	ldrb	r3, [r3, #0]
    1824:	461a      	mov	r2, r3
    1826:	4b48      	ldr	r3, [pc, #288]	; (1948 <Clock_Ip_InitClock+0x2a4>)
    1828:	5c9b      	ldrb	r3, [r3, r2]
    182a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    182c:	4a47      	ldr	r2, [pc, #284]	; (194c <Clock_Ip_InitClock+0x2a8>)
    182e:	9b02      	ldr	r3, [sp, #8]
    1830:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1834:	9a03      	ldr	r2, [sp, #12]
    1836:	4613      	mov	r3, r2
    1838:	009b      	lsls	r3, r3, #2
    183a:	4413      	add	r3, r2
    183c:	009b      	lsls	r3, r3, #2
    183e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    1842:	9a01      	ldr	r2, [sp, #4]
    1844:	4413      	add	r3, r2
    1846:	3304      	adds	r3, #4
    1848:	9903      	ldr	r1, [sp, #12]
    184a:	4618      	mov	r0, r3
    184c:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    184e:	9b03      	ldr	r3, [sp, #12]
    1850:	3301      	adds	r3, #1
    1852:	9303      	str	r3, [sp, #12]
    1854:	9b01      	ldr	r3, [sp, #4]
    1856:	7c5b      	ldrb	r3, [r3, #17]
    1858:	461a      	mov	r2, r3
    185a:	9b03      	ldr	r3, [sp, #12]
    185c:	4293      	cmp	r3, r2
    185e:	d3d0      	bcc.n	1802 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1860:	2300      	movs	r3, #0
    1862:	9303      	str	r3, [sp, #12]
    1864:	e026      	b.n	18b4 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1866:	9901      	ldr	r1, [sp, #4]
    1868:	9a03      	ldr	r2, [sp, #12]
    186a:	4613      	mov	r3, r2
    186c:	005b      	lsls	r3, r3, #1
    186e:	4413      	add	r3, r2
    1870:	009b      	lsls	r3, r3, #2
    1872:	440b      	add	r3, r1
    1874:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1878:	681a      	ldr	r2, [r3, #0]
    187a:	492c      	ldr	r1, [pc, #176]	; (192c <Clock_Ip_InitClock+0x288>)
    187c:	4613      	mov	r3, r2
    187e:	00db      	lsls	r3, r3, #3
    1880:	4413      	add	r3, r2
    1882:	440b      	add	r3, r1
    1884:	3301      	adds	r3, #1
    1886:	781b      	ldrb	r3, [r3, #0]
    1888:	461a      	mov	r2, r3
    188a:	4b31      	ldr	r3, [pc, #196]	; (1950 <Clock_Ip_InitClock+0x2ac>)
    188c:	5c9b      	ldrb	r3, [r3, r2]
    188e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    1890:	4a30      	ldr	r2, [pc, #192]	; (1954 <Clock_Ip_InitClock+0x2b0>)
    1892:	9b02      	ldr	r3, [sp, #8]
    1894:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    1898:	9a03      	ldr	r2, [sp, #12]
    189a:	4613      	mov	r3, r2
    189c:	005b      	lsls	r3, r3, #1
    189e:	4413      	add	r3, r2
    18a0:	009b      	lsls	r3, r3, #2
    18a2:	f503 730e 	add.w	r3, r3, #568	; 0x238
    18a6:	9a01      	ldr	r2, [sp, #4]
    18a8:	4413      	add	r3, r2
    18aa:	4618      	mov	r0, r3
    18ac:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    18ae:	9b03      	ldr	r3, [sp, #12]
    18b0:	3301      	adds	r3, #1
    18b2:	9303      	str	r3, [sp, #12]
    18b4:	9b01      	ldr	r3, [sp, #4]
    18b6:	7b5b      	ldrb	r3, [r3, #13]
    18b8:	461a      	mov	r2, r3
    18ba:	9b03      	ldr	r3, [sp, #12]
    18bc:	4293      	cmp	r3, r2
    18be:	d3d2      	bcc.n	1866 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    18c0:	2300      	movs	r3, #0
    18c2:	9303      	str	r3, [sp, #12]
    18c4:	e026      	b.n	1914 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    18c6:	9901      	ldr	r1, [sp, #4]
    18c8:	9a03      	ldr	r2, [sp, #12]
    18ca:	4613      	mov	r3, r2
    18cc:	005b      	lsls	r3, r3, #1
    18ce:	4413      	add	r3, r2
    18d0:	009b      	lsls	r3, r3, #2
    18d2:	440b      	add	r3, r1
    18d4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    18d8:	681a      	ldr	r2, [r3, #0]
    18da:	4914      	ldr	r1, [pc, #80]	; (192c <Clock_Ip_InitClock+0x288>)
    18dc:	4613      	mov	r3, r2
    18de:	00db      	lsls	r3, r3, #3
    18e0:	4413      	add	r3, r2
    18e2:	440b      	add	r3, r1
    18e4:	3301      	adds	r3, #1
    18e6:	781b      	ldrb	r3, [r3, #0]
    18e8:	461a      	mov	r2, r3
    18ea:	4b1b      	ldr	r3, [pc, #108]	; (1958 <Clock_Ip_InitClock+0x2b4>)
    18ec:	5c9b      	ldrb	r3, [r3, r2]
    18ee:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    18f0:	4a1a      	ldr	r2, [pc, #104]	; (195c <Clock_Ip_InitClock+0x2b8>)
    18f2:	9b02      	ldr	r3, [sp, #8]
    18f4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    18f8:	9a03      	ldr	r2, [sp, #12]
    18fa:	4613      	mov	r3, r2
    18fc:	005b      	lsls	r3, r3, #1
    18fe:	4413      	add	r3, r2
    1900:	009b      	lsls	r3, r3, #2
    1902:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1906:	9a01      	ldr	r2, [sp, #4]
    1908:	4413      	add	r3, r2
    190a:	4618      	mov	r0, r3
    190c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    190e:	9b03      	ldr	r3, [sp, #12]
    1910:	3301      	adds	r3, #1
    1912:	9303      	str	r3, [sp, #12]
    1914:	9b01      	ldr	r3, [sp, #4]
    1916:	7b1b      	ldrb	r3, [r3, #12]
    1918:	461a      	mov	r2, r3
    191a:	9b03      	ldr	r3, [sp, #12]
    191c:	4293      	cmp	r3, r2
    191e:	d3d2      	bcc.n	18c6 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1920:	2300      	movs	r3, #0
    1922:	9303      	str	r3, [sp, #12]
    1924:	e044      	b.n	19b0 <Clock_Ip_InitClock+0x30c>
    1926:	bf00      	nop
    1928:	1fff8b94 	.word	0x1fff8b94
    192c:	0000b8ec 	.word	0x0000b8ec
    1930:	0000b8dc 	.word	0x0000b8dc
    1934:	0000bee8 	.word	0x0000bee8
    1938:	0000b87c 	.word	0x0000b87c
    193c:	0000beac 	.word	0x0000beac
    1940:	0000b86c 	.word	0x0000b86c
    1944:	0000be40 	.word	0x0000be40
    1948:	0000b8cc 	.word	0x0000b8cc
    194c:	0000bf20 	.word	0x0000bf20
    1950:	0000b85c 	.word	0x0000b85c
    1954:	0000be38 	.word	0x0000be38
    1958:	0000b84c 	.word	0x0000b84c
    195c:	0000bdfc 	.word	0x0000bdfc
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1960:	9901      	ldr	r1, [sp, #4]
    1962:	9a03      	ldr	r2, [sp, #12]
    1964:	4613      	mov	r3, r2
    1966:	005b      	lsls	r3, r3, #1
    1968:	4413      	add	r3, r2
    196a:	009b      	lsls	r3, r3, #2
    196c:	440b      	add	r3, r1
    196e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1972:	681a      	ldr	r2, [r3, #0]
    1974:	49ac      	ldr	r1, [pc, #688]	; (1c28 <Clock_Ip_InitClock+0x584>)
    1976:	4613      	mov	r3, r2
    1978:	00db      	lsls	r3, r3, #3
    197a:	4413      	add	r3, r2
    197c:	440b      	add	r3, r1
    197e:	3301      	adds	r3, #1
    1980:	781b      	ldrb	r3, [r3, #0]
    1982:	461a      	mov	r2, r3
    1984:	4ba9      	ldr	r3, [pc, #676]	; (1c2c <Clock_Ip_InitClock+0x588>)
    1986:	5c9b      	ldrb	r3, [r3, r2]
    1988:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    198a:	4aa9      	ldr	r2, [pc, #676]	; (1c30 <Clock_Ip_InitClock+0x58c>)
    198c:	9b02      	ldr	r3, [sp, #8]
    198e:	00db      	lsls	r3, r3, #3
    1990:	4413      	add	r3, r2
    1992:	6859      	ldr	r1, [r3, #4]
    1994:	9a03      	ldr	r2, [sp, #12]
    1996:	4613      	mov	r3, r2
    1998:	005b      	lsls	r3, r3, #1
    199a:	4413      	add	r3, r2
    199c:	009b      	lsls	r3, r3, #2
    199e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    19a2:	9a01      	ldr	r2, [sp, #4]
    19a4:	4413      	add	r3, r2
    19a6:	4618      	mov	r0, r3
    19a8:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    19aa:	9b03      	ldr	r3, [sp, #12]
    19ac:	3301      	adds	r3, #1
    19ae:	9303      	str	r3, [sp, #12]
    19b0:	9b01      	ldr	r3, [sp, #4]
    19b2:	7b5b      	ldrb	r3, [r3, #13]
    19b4:	461a      	mov	r2, r3
    19b6:	9b03      	ldr	r3, [sp, #12]
    19b8:	4293      	cmp	r3, r2
    19ba:	d3d1      	bcc.n	1960 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    19bc:	2300      	movs	r3, #0
    19be:	9303      	str	r3, [sp, #12]
    19c0:	e029      	b.n	1a16 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    19c2:	9901      	ldr	r1, [sp, #4]
    19c4:	9a03      	ldr	r2, [sp, #12]
    19c6:	4613      	mov	r3, r2
    19c8:	009b      	lsls	r3, r3, #2
    19ca:	4413      	add	r3, r2
    19cc:	00db      	lsls	r3, r3, #3
    19ce:	440b      	add	r3, r1
    19d0:	3340      	adds	r3, #64	; 0x40
    19d2:	681a      	ldr	r2, [r3, #0]
    19d4:	4994      	ldr	r1, [pc, #592]	; (1c28 <Clock_Ip_InitClock+0x584>)
    19d6:	4613      	mov	r3, r2
    19d8:	00db      	lsls	r3, r3, #3
    19da:	4413      	add	r3, r2
    19dc:	440b      	add	r3, r1
    19de:	3301      	adds	r3, #1
    19e0:	781b      	ldrb	r3, [r3, #0]
    19e2:	461a      	mov	r2, r3
    19e4:	4b93      	ldr	r3, [pc, #588]	; (1c34 <Clock_Ip_InitClock+0x590>)
    19e6:	5c9b      	ldrb	r3, [r3, r2]
    19e8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    19ea:	4993      	ldr	r1, [pc, #588]	; (1c38 <Clock_Ip_InitClock+0x594>)
    19ec:	9a02      	ldr	r2, [sp, #8]
    19ee:	4613      	mov	r3, r2
    19f0:	009b      	lsls	r3, r3, #2
    19f2:	4413      	add	r3, r2
    19f4:	009b      	lsls	r3, r3, #2
    19f6:	440b      	add	r3, r1
    19f8:	3304      	adds	r3, #4
    19fa:	6819      	ldr	r1, [r3, #0]
    19fc:	9a03      	ldr	r2, [sp, #12]
    19fe:	4613      	mov	r3, r2
    1a00:	009b      	lsls	r3, r3, #2
    1a02:	4413      	add	r3, r2
    1a04:	00db      	lsls	r3, r3, #3
    1a06:	3340      	adds	r3, #64	; 0x40
    1a08:	9a01      	ldr	r2, [sp, #4]
    1a0a:	4413      	add	r3, r2
    1a0c:	4618      	mov	r0, r3
    1a0e:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1a10:	9b03      	ldr	r3, [sp, #12]
    1a12:	3301      	adds	r3, #1
    1a14:	9303      	str	r3, [sp, #12]
    1a16:	9b01      	ldr	r3, [sp, #4]
    1a18:	7a9b      	ldrb	r3, [r3, #10]
    1a1a:	461a      	mov	r2, r3
    1a1c:	9b03      	ldr	r3, [sp, #12]
    1a1e:	4293      	cmp	r3, r2
    1a20:	d3cf      	bcc.n	19c2 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1a22:	2300      	movs	r3, #0
    1a24:	9303      	str	r3, [sp, #12]
    1a26:	e029      	b.n	1a7c <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1a28:	9901      	ldr	r1, [sp, #4]
    1a2a:	9a03      	ldr	r2, [sp, #12]
    1a2c:	4613      	mov	r3, r2
    1a2e:	009b      	lsls	r3, r3, #2
    1a30:	4413      	add	r3, r2
    1a32:	009b      	lsls	r3, r3, #2
    1a34:	440b      	add	r3, r1
    1a36:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1a3a:	681a      	ldr	r2, [r3, #0]
    1a3c:	497a      	ldr	r1, [pc, #488]	; (1c28 <Clock_Ip_InitClock+0x584>)
    1a3e:	4613      	mov	r3, r2
    1a40:	00db      	lsls	r3, r3, #3
    1a42:	4413      	add	r3, r2
    1a44:	440b      	add	r3, r1
    1a46:	3301      	adds	r3, #1
    1a48:	781b      	ldrb	r3, [r3, #0]
    1a4a:	461a      	mov	r2, r3
    1a4c:	4b7b      	ldr	r3, [pc, #492]	; (1c3c <Clock_Ip_InitClock+0x598>)
    1a4e:	5c9b      	ldrb	r3, [r3, r2]
    1a50:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    1a52:	4a7b      	ldr	r2, [pc, #492]	; (1c40 <Clock_Ip_InitClock+0x59c>)
    1a54:	9b02      	ldr	r3, [sp, #8]
    1a56:	011b      	lsls	r3, r3, #4
    1a58:	4413      	add	r3, r2
    1a5a:	3304      	adds	r3, #4
    1a5c:	681c      	ldr	r4, [r3, #0]
    1a5e:	9a03      	ldr	r2, [sp, #12]
    1a60:	4613      	mov	r3, r2
    1a62:	009b      	lsls	r3, r3, #2
    1a64:	4413      	add	r3, r2
    1a66:	009b      	lsls	r3, r3, #2
    1a68:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1a6c:	9a01      	ldr	r2, [sp, #4]
    1a6e:	4413      	add	r3, r2
    1a70:	9903      	ldr	r1, [sp, #12]
    1a72:	4618      	mov	r0, r3
    1a74:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1a76:	9b03      	ldr	r3, [sp, #12]
    1a78:	3301      	adds	r3, #1
    1a7a:	9303      	str	r3, [sp, #12]
    1a7c:	9b01      	ldr	r3, [sp, #4]
    1a7e:	7c9b      	ldrb	r3, [r3, #18]
    1a80:	461a      	mov	r2, r3
    1a82:	9b03      	ldr	r3, [sp, #12]
    1a84:	4293      	cmp	r3, r2
    1a86:	d3cf      	bcc.n	1a28 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1a88:	2300      	movs	r3, #0
    1a8a:	9303      	str	r3, [sp, #12]
    1a8c:	e02a      	b.n	1ae4 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1a8e:	9901      	ldr	r1, [sp, #4]
    1a90:	9a03      	ldr	r2, [sp, #12]
    1a92:	4613      	mov	r3, r2
    1a94:	009b      	lsls	r3, r3, #2
    1a96:	4413      	add	r3, r2
    1a98:	009b      	lsls	r3, r3, #2
    1a9a:	440b      	add	r3, r1
    1a9c:	332c      	adds	r3, #44	; 0x2c
    1a9e:	681a      	ldr	r2, [r3, #0]
    1aa0:	4961      	ldr	r1, [pc, #388]	; (1c28 <Clock_Ip_InitClock+0x584>)
    1aa2:	4613      	mov	r3, r2
    1aa4:	00db      	lsls	r3, r3, #3
    1aa6:	4413      	add	r3, r2
    1aa8:	440b      	add	r3, r1
    1aaa:	3301      	adds	r3, #1
    1aac:	781b      	ldrb	r3, [r3, #0]
    1aae:	461a      	mov	r2, r3
    1ab0:	4b64      	ldr	r3, [pc, #400]	; (1c44 <Clock_Ip_InitClock+0x5a0>)
    1ab2:	5c9b      	ldrb	r3, [r3, r2]
    1ab4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    1ab6:	4964      	ldr	r1, [pc, #400]	; (1c48 <Clock_Ip_InitClock+0x5a4>)
    1ab8:	9a02      	ldr	r2, [sp, #8]
    1aba:	4613      	mov	r3, r2
    1abc:	009b      	lsls	r3, r3, #2
    1abe:	4413      	add	r3, r2
    1ac0:	009b      	lsls	r3, r3, #2
    1ac2:	440b      	add	r3, r1
    1ac4:	3308      	adds	r3, #8
    1ac6:	6819      	ldr	r1, [r3, #0]
    1ac8:	9a03      	ldr	r2, [sp, #12]
    1aca:	4613      	mov	r3, r2
    1acc:	009b      	lsls	r3, r3, #2
    1ace:	4413      	add	r3, r2
    1ad0:	009b      	lsls	r3, r3, #2
    1ad2:	3328      	adds	r3, #40	; 0x28
    1ad4:	9a01      	ldr	r2, [sp, #4]
    1ad6:	4413      	add	r3, r2
    1ad8:	3304      	adds	r3, #4
    1ada:	4618      	mov	r0, r3
    1adc:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1ade:	9b03      	ldr	r3, [sp, #12]
    1ae0:	3301      	adds	r3, #1
    1ae2:	9303      	str	r3, [sp, #12]
    1ae4:	9b01      	ldr	r3, [sp, #4]
    1ae6:	7a5b      	ldrb	r3, [r3, #9]
    1ae8:	461a      	mov	r2, r3
    1aea:	9b03      	ldr	r3, [sp, #12]
    1aec:	4293      	cmp	r3, r2
    1aee:	d3ce      	bcc.n	1a8e <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1af0:	2300      	movs	r3, #0
    1af2:	9303      	str	r3, [sp, #12]
    1af4:	e029      	b.n	1b4a <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1af6:	9901      	ldr	r1, [sp, #4]
    1af8:	9a03      	ldr	r2, [sp, #12]
    1afa:	4613      	mov	r3, r2
    1afc:	009b      	lsls	r3, r3, #2
    1afe:	4413      	add	r3, r2
    1b00:	00db      	lsls	r3, r3, #3
    1b02:	440b      	add	r3, r1
    1b04:	3340      	adds	r3, #64	; 0x40
    1b06:	681a      	ldr	r2, [r3, #0]
    1b08:	4947      	ldr	r1, [pc, #284]	; (1c28 <Clock_Ip_InitClock+0x584>)
    1b0a:	4613      	mov	r3, r2
    1b0c:	00db      	lsls	r3, r3, #3
    1b0e:	4413      	add	r3, r2
    1b10:	440b      	add	r3, r1
    1b12:	3301      	adds	r3, #1
    1b14:	781b      	ldrb	r3, [r3, #0]
    1b16:	461a      	mov	r2, r3
    1b18:	4b46      	ldr	r3, [pc, #280]	; (1c34 <Clock_Ip_InitClock+0x590>)
    1b1a:	5c9b      	ldrb	r3, [r3, r2]
    1b1c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    1b1e:	4946      	ldr	r1, [pc, #280]	; (1c38 <Clock_Ip_InitClock+0x594>)
    1b20:	9a02      	ldr	r2, [sp, #8]
    1b22:	4613      	mov	r3, r2
    1b24:	009b      	lsls	r3, r3, #2
    1b26:	4413      	add	r3, r2
    1b28:	009b      	lsls	r3, r3, #2
    1b2a:	440b      	add	r3, r1
    1b2c:	330c      	adds	r3, #12
    1b2e:	6819      	ldr	r1, [r3, #0]
    1b30:	9a03      	ldr	r2, [sp, #12]
    1b32:	4613      	mov	r3, r2
    1b34:	009b      	lsls	r3, r3, #2
    1b36:	4413      	add	r3, r2
    1b38:	00db      	lsls	r3, r3, #3
    1b3a:	3340      	adds	r3, #64	; 0x40
    1b3c:	9a01      	ldr	r2, [sp, #4]
    1b3e:	4413      	add	r3, r2
    1b40:	4618      	mov	r0, r3
    1b42:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1b44:	9b03      	ldr	r3, [sp, #12]
    1b46:	3301      	adds	r3, #1
    1b48:	9303      	str	r3, [sp, #12]
    1b4a:	9b01      	ldr	r3, [sp, #4]
    1b4c:	7a9b      	ldrb	r3, [r3, #10]
    1b4e:	461a      	mov	r2, r3
    1b50:	9b03      	ldr	r3, [sp, #12]
    1b52:	4293      	cmp	r3, r2
    1b54:	d3cf      	bcc.n	1af6 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1b56:	2300      	movs	r3, #0
    1b58:	9303      	str	r3, [sp, #12]
    1b5a:	e025      	b.n	1ba8 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    1b5c:	9a01      	ldr	r2, [sp, #4]
    1b5e:	9b03      	ldr	r3, [sp, #12]
    1b60:	3324      	adds	r3, #36	; 0x24
    1b62:	011b      	lsls	r3, r3, #4
    1b64:	4413      	add	r3, r2
    1b66:	3304      	adds	r3, #4
    1b68:	681a      	ldr	r2, [r3, #0]
    1b6a:	492f      	ldr	r1, [pc, #188]	; (1c28 <Clock_Ip_InitClock+0x584>)
    1b6c:	4613      	mov	r3, r2
    1b6e:	00db      	lsls	r3, r3, #3
    1b70:	4413      	add	r3, r2
    1b72:	440b      	add	r3, r1
    1b74:	3301      	adds	r3, #1
    1b76:	781b      	ldrb	r3, [r3, #0]
    1b78:	461a      	mov	r2, r3
    1b7a:	4b34      	ldr	r3, [pc, #208]	; (1c4c <Clock_Ip_InitClock+0x5a8>)
    1b7c:	5c9b      	ldrb	r3, [r3, r2]
    1b7e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    1b80:	4933      	ldr	r1, [pc, #204]	; (1c50 <Clock_Ip_InitClock+0x5ac>)
    1b82:	9a02      	ldr	r2, [sp, #8]
    1b84:	4613      	mov	r3, r2
    1b86:	005b      	lsls	r3, r3, #1
    1b88:	4413      	add	r3, r2
    1b8a:	009b      	lsls	r3, r3, #2
    1b8c:	440b      	add	r3, r1
    1b8e:	3304      	adds	r3, #4
    1b90:	681b      	ldr	r3, [r3, #0]
    1b92:	9a03      	ldr	r2, [sp, #12]
    1b94:	3224      	adds	r2, #36	; 0x24
    1b96:	0112      	lsls	r2, r2, #4
    1b98:	9901      	ldr	r1, [sp, #4]
    1b9a:	440a      	add	r2, r1
    1b9c:	3204      	adds	r2, #4
    1b9e:	4610      	mov	r0, r2
    1ba0:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1ba2:	9b03      	ldr	r3, [sp, #12]
    1ba4:	3301      	adds	r3, #1
    1ba6:	9303      	str	r3, [sp, #12]
    1ba8:	9b01      	ldr	r3, [sp, #4]
    1baa:	7b9b      	ldrb	r3, [r3, #14]
    1bac:	461a      	mov	r2, r3
    1bae:	9b03      	ldr	r3, [sp, #12]
    1bb0:	4293      	cmp	r3, r2
    1bb2:	d3d3      	bcc.n	1b5c <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    1bb4:	4b27      	ldr	r3, [pc, #156]	; (1c54 <Clock_Ip_InitClock+0x5b0>)
    1bb6:	2200      	movs	r2, #0
    1bb8:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    1bba:	4b26      	ldr	r3, [pc, #152]	; (1c54 <Clock_Ip_InitClock+0x5b0>)
    1bbc:	2200      	movs	r2, #0
    1bbe:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    1bc0:	4b24      	ldr	r3, [pc, #144]	; (1c54 <Clock_Ip_InitClock+0x5b0>)
    1bc2:	2201      	movs	r2, #1
    1bc4:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    1bc6:	4b23      	ldr	r3, [pc, #140]	; (1c54 <Clock_Ip_InitClock+0x5b0>)
    1bc8:	2200      	movs	r2, #0
    1bca:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    1bcc:	f000 fa9c 	bl	2108 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1bd0:	2300      	movs	r3, #0
    1bd2:	9303      	str	r3, [sp, #12]
    1bd4:	e04c      	b.n	1c70 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    1bd6:	9a01      	ldr	r2, [sp, #4]
    1bd8:	9b03      	ldr	r3, [sp, #12]
    1bda:	330d      	adds	r3, #13
    1bdc:	00db      	lsls	r3, r3, #3
    1bde:	4413      	add	r3, r2
    1be0:	685b      	ldr	r3, [r3, #4]
    1be2:	4a1d      	ldr	r2, [pc, #116]	; (1c58 <Clock_Ip_InitClock+0x5b4>)
    1be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1be8:	2b03      	cmp	r3, #3
    1bea:	d03b      	beq.n	1c64 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1bec:	9b01      	ldr	r3, [sp, #4]
    1bee:	9a03      	ldr	r2, [sp, #12]
    1bf0:	320d      	adds	r2, #13
    1bf2:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1bf6:	490c      	ldr	r1, [pc, #48]	; (1c28 <Clock_Ip_InitClock+0x584>)
    1bf8:	4613      	mov	r3, r2
    1bfa:	00db      	lsls	r3, r3, #3
    1bfc:	4413      	add	r3, r2
    1bfe:	440b      	add	r3, r1
    1c00:	3301      	adds	r3, #1
    1c02:	781b      	ldrb	r3, [r3, #0]
    1c04:	461a      	mov	r2, r3
    1c06:	4b15      	ldr	r3, [pc, #84]	; (1c5c <Clock_Ip_InitClock+0x5b8>)
    1c08:	5c9b      	ldrb	r3, [r3, r2]
    1c0a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    1c0c:	4a14      	ldr	r2, [pc, #80]	; (1c60 <Clock_Ip_InitClock+0x5bc>)
    1c0e:	9b02      	ldr	r3, [sp, #8]
    1c10:	00db      	lsls	r3, r3, #3
    1c12:	4413      	add	r3, r2
    1c14:	685b      	ldr	r3, [r3, #4]
    1c16:	9a03      	ldr	r2, [sp, #12]
    1c18:	320d      	adds	r2, #13
    1c1a:	00d2      	lsls	r2, r2, #3
    1c1c:	9901      	ldr	r1, [sp, #4]
    1c1e:	440a      	add	r2, r1
    1c20:	4610      	mov	r0, r2
    1c22:	4798      	blx	r3
    1c24:	e021      	b.n	1c6a <Clock_Ip_InitClock+0x5c6>
    1c26:	bf00      	nop
    1c28:	0000b8ec 	.word	0x0000b8ec
    1c2c:	0000b85c 	.word	0x0000b85c
    1c30:	0000be38 	.word	0x0000be38
    1c34:	0000b8ac 	.word	0x0000b8ac
    1c38:	0000bef8 	.word	0x0000bef8
    1c3c:	0000b8dc 	.word	0x0000b8dc
    1c40:	0000bee8 	.word	0x0000bee8
    1c44:	0000b86c 	.word	0x0000b86c
    1c48:	0000be40 	.word	0x0000be40
    1c4c:	0000b89c 	.word	0x0000b89c
    1c50:	0000be68 	.word	0x0000be68
    1c54:	1fff8b9c 	.word	0x1fff8b9c
    1c58:	0000bd38 	.word	0x0000bd38
    1c5c:	0000b8bc 	.word	0x0000b8bc
    1c60:	0000bf24 	.word	0x0000bf24
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    1c64:	4b3a      	ldr	r3, [pc, #232]	; (1d50 <Clock_Ip_InitClock+0x6ac>)
    1c66:	2201      	movs	r2, #1
    1c68:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1c6a:	9b03      	ldr	r3, [sp, #12]
    1c6c:	3301      	adds	r3, #1
    1c6e:	9303      	str	r3, [sp, #12]
    1c70:	9b01      	ldr	r3, [sp, #4]
    1c72:	7adb      	ldrb	r3, [r3, #11]
    1c74:	461a      	mov	r2, r3
    1c76:	9b03      	ldr	r3, [sp, #12]
    1c78:	4293      	cmp	r3, r2
    1c7a:	d3ac      	bcc.n	1bd6 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    1c7c:	4b34      	ldr	r3, [pc, #208]	; (1d50 <Clock_Ip_InitClock+0x6ac>)
    1c7e:	781b      	ldrb	r3, [r3, #0]
    1c80:	f083 0301 	eor.w	r3, r3, #1
    1c84:	b2db      	uxtb	r3, r3
    1c86:	2b00      	cmp	r3, #0
    1c88:	d05e      	beq.n	1d48 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1c8a:	2300      	movs	r3, #0
    1c8c:	9303      	str	r3, [sp, #12]
    1c8e:	e01f      	b.n	1cd0 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1c90:	9a01      	ldr	r2, [sp, #4]
    1c92:	9b03      	ldr	r3, [sp, #12]
    1c94:	334e      	adds	r3, #78	; 0x4e
    1c96:	00db      	lsls	r3, r3, #3
    1c98:	4413      	add	r3, r2
    1c9a:	685a      	ldr	r2, [r3, #4]
    1c9c:	492d      	ldr	r1, [pc, #180]	; (1d54 <Clock_Ip_InitClock+0x6b0>)
    1c9e:	4613      	mov	r3, r2
    1ca0:	00db      	lsls	r3, r3, #3
    1ca2:	4413      	add	r3, r2
    1ca4:	440b      	add	r3, r1
    1ca6:	3301      	adds	r3, #1
    1ca8:	781b      	ldrb	r3, [r3, #0]
    1caa:	461a      	mov	r2, r3
    1cac:	4b2a      	ldr	r3, [pc, #168]	; (1d58 <Clock_Ip_InitClock+0x6b4>)
    1cae:	5c9b      	ldrb	r3, [r3, r2]
    1cb0:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    1cb2:	4a2a      	ldr	r2, [pc, #168]	; (1d5c <Clock_Ip_InitClock+0x6b8>)
    1cb4:	9b02      	ldr	r3, [sp, #8]
    1cb6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1cba:	9a03      	ldr	r2, [sp, #12]
    1cbc:	324e      	adds	r2, #78	; 0x4e
    1cbe:	00d2      	lsls	r2, r2, #3
    1cc0:	9901      	ldr	r1, [sp, #4]
    1cc2:	440a      	add	r2, r1
    1cc4:	3204      	adds	r2, #4
    1cc6:	4610      	mov	r0, r2
    1cc8:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1cca:	9b03      	ldr	r3, [sp, #12]
    1ccc:	3301      	adds	r3, #1
    1cce:	9303      	str	r3, [sp, #12]
    1cd0:	9b01      	ldr	r3, [sp, #4]
    1cd2:	7c1b      	ldrb	r3, [r3, #16]
    1cd4:	461a      	mov	r2, r3
    1cd6:	9b03      	ldr	r3, [sp, #12]
    1cd8:	4293      	cmp	r3, r2
    1cda:	d3d9      	bcc.n	1c90 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1cdc:	2300      	movs	r3, #0
    1cde:	9303      	str	r3, [sp, #12]
    1ce0:	e028      	b.n	1d34 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1ce2:	9901      	ldr	r1, [sp, #4]
    1ce4:	9a03      	ldr	r2, [sp, #12]
    1ce6:	4613      	mov	r3, r2
    1ce8:	009b      	lsls	r3, r3, #2
    1cea:	4413      	add	r3, r2
    1cec:	009b      	lsls	r3, r3, #2
    1cee:	440b      	add	r3, r1
    1cf0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1cf4:	681a      	ldr	r2, [r3, #0]
    1cf6:	4917      	ldr	r1, [pc, #92]	; (1d54 <Clock_Ip_InitClock+0x6b0>)
    1cf8:	4613      	mov	r3, r2
    1cfa:	00db      	lsls	r3, r3, #3
    1cfc:	4413      	add	r3, r2
    1cfe:	440b      	add	r3, r1
    1d00:	3301      	adds	r3, #1
    1d02:	781b      	ldrb	r3, [r3, #0]
    1d04:	461a      	mov	r2, r3
    1d06:	4b16      	ldr	r3, [pc, #88]	; (1d60 <Clock_Ip_InitClock+0x6bc>)
    1d08:	5c9b      	ldrb	r3, [r3, r2]
    1d0a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    1d0c:	4a15      	ldr	r2, [pc, #84]	; (1d64 <Clock_Ip_InitClock+0x6c0>)
    1d0e:	9b02      	ldr	r3, [sp, #8]
    1d10:	011b      	lsls	r3, r3, #4
    1d12:	4413      	add	r3, r2
    1d14:	330c      	adds	r3, #12
    1d16:	6819      	ldr	r1, [r3, #0]
    1d18:	9a03      	ldr	r2, [sp, #12]
    1d1a:	4613      	mov	r3, r2
    1d1c:	009b      	lsls	r3, r3, #2
    1d1e:	4413      	add	r3, r2
    1d20:	009b      	lsls	r3, r3, #2
    1d22:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1d26:	9a01      	ldr	r2, [sp, #4]
    1d28:	4413      	add	r3, r2
    1d2a:	4618      	mov	r0, r3
    1d2c:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1d2e:	9b03      	ldr	r3, [sp, #12]
    1d30:	3301      	adds	r3, #1
    1d32:	9303      	str	r3, [sp, #12]
    1d34:	9b01      	ldr	r3, [sp, #4]
    1d36:	7c9b      	ldrb	r3, [r3, #18]
    1d38:	461a      	mov	r2, r3
    1d3a:	9b03      	ldr	r3, [sp, #12]
    1d3c:	4293      	cmp	r3, r2
    1d3e:	d3d0      	bcc.n	1ce2 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1d40:	2104      	movs	r1, #4
    1d42:	9801      	ldr	r0, [sp, #4]
    1d44:	f002 ff48 	bl	4bd8 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    1d48:	bf00      	nop
    1d4a:	b004      	add	sp, #16
    1d4c:	bd10      	pop	{r4, pc}
    1d4e:	bf00      	nop
    1d50:	1fff8b9c 	.word	0x1fff8b9c
    1d54:	0000b8ec 	.word	0x0000b8ec
    1d58:	0000b88c 	.word	0x0000b88c
    1d5c:	0000be74 	.word	0x0000be74
    1d60:	0000b8dc 	.word	0x0000b8dc
    1d64:	0000bee8 	.word	0x0000bee8

00001d68 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    1d68:	b500      	push	{lr}
    1d6a:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    1d6c:	2302      	movs	r3, #2
    1d6e:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1d70:	2300      	movs	r3, #0
    1d72:	9304      	str	r3, [sp, #16]
    1d74:	e02c      	b.n	1dd0 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    1d76:	4a36      	ldr	r2, [pc, #216]	; (1e50 <Clock_Ip_GetPllStatus+0xe8>)
    1d78:	9b04      	ldr	r3, [sp, #16]
    1d7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1d7e:	4935      	ldr	r1, [pc, #212]	; (1e54 <Clock_Ip_GetPllStatus+0xec>)
    1d80:	4613      	mov	r3, r2
    1d82:	00db      	lsls	r3, r3, #3
    1d84:	4413      	add	r3, r2
    1d86:	440b      	add	r3, r1
    1d88:	3301      	adds	r3, #1
    1d8a:	781b      	ldrb	r3, [r3, #0]
    1d8c:	461a      	mov	r2, r3
    1d8e:	4b32      	ldr	r3, [pc, #200]	; (1e58 <Clock_Ip_GetPllStatus+0xf0>)
    1d90:	5c9b      	ldrb	r3, [r3, r2]
    1d92:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    1d94:	4931      	ldr	r1, [pc, #196]	; (1e5c <Clock_Ip_GetPllStatus+0xf4>)
    1d96:	9a03      	ldr	r2, [sp, #12]
    1d98:	4613      	mov	r3, r2
    1d9a:	009b      	lsls	r3, r3, #2
    1d9c:	4413      	add	r3, r2
    1d9e:	009b      	lsls	r3, r3, #2
    1da0:	440b      	add	r3, r1
    1da2:	3308      	adds	r3, #8
    1da4:	681b      	ldr	r3, [r3, #0]
    1da6:	492a      	ldr	r1, [pc, #168]	; (1e50 <Clock_Ip_GetPllStatus+0xe8>)
    1da8:	9a04      	ldr	r2, [sp, #16]
    1daa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1dae:	4610      	mov	r0, r2
    1db0:	4798      	blx	r3
    1db2:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    1db4:	9b02      	ldr	r3, [sp, #8]
    1db6:	2b01      	cmp	r3, #1
    1db8:	d102      	bne.n	1dc0 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    1dba:	2301      	movs	r3, #1
    1dbc:	9305      	str	r3, [sp, #20]
            break;
    1dbe:	e00d      	b.n	1ddc <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    1dc0:	9b02      	ldr	r3, [sp, #8]
    1dc2:	2b02      	cmp	r3, #2
    1dc4:	d101      	bne.n	1dca <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    1dc6:	2300      	movs	r3, #0
    1dc8:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1dca:	9b04      	ldr	r3, [sp, #16]
    1dcc:	3301      	adds	r3, #1
    1dce:	9304      	str	r3, [sp, #16]
    1dd0:	4b23      	ldr	r3, [pc, #140]	; (1e60 <Clock_Ip_GetPllStatus+0xf8>)
    1dd2:	789b      	ldrb	r3, [r3, #2]
    1dd4:	461a      	mov	r2, r3
    1dd6:	9b04      	ldr	r3, [sp, #16]
    1dd8:	4293      	cmp	r3, r2
    1dda:	d3cc      	bcc.n	1d76 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    1ddc:	9b05      	ldr	r3, [sp, #20]
    1dde:	2b00      	cmp	r3, #0
    1de0:	d130      	bne.n	1e44 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1de2:	2300      	movs	r3, #0
    1de4:	9304      	str	r3, [sp, #16]
    1de6:	e027      	b.n	1e38 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    1de8:	4a1e      	ldr	r2, [pc, #120]	; (1e64 <Clock_Ip_GetPllStatus+0xfc>)
    1dea:	9b04      	ldr	r3, [sp, #16]
    1dec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1df0:	4918      	ldr	r1, [pc, #96]	; (1e54 <Clock_Ip_GetPllStatus+0xec>)
    1df2:	4613      	mov	r3, r2
    1df4:	00db      	lsls	r3, r3, #3
    1df6:	4413      	add	r3, r2
    1df8:	440b      	add	r3, r1
    1dfa:	3301      	adds	r3, #1
    1dfc:	781b      	ldrb	r3, [r3, #0]
    1dfe:	461a      	mov	r2, r3
    1e00:	4b19      	ldr	r3, [pc, #100]	; (1e68 <Clock_Ip_GetPllStatus+0x100>)
    1e02:	5c9b      	ldrb	r3, [r3, r2]
    1e04:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    1e06:	4919      	ldr	r1, [pc, #100]	; (1e6c <Clock_Ip_GetPllStatus+0x104>)
    1e08:	9a03      	ldr	r2, [sp, #12]
    1e0a:	4613      	mov	r3, r2
    1e0c:	005b      	lsls	r3, r3, #1
    1e0e:	4413      	add	r3, r2
    1e10:	009b      	lsls	r3, r3, #2
    1e12:	440b      	add	r3, r1
    1e14:	3308      	adds	r3, #8
    1e16:	681b      	ldr	r3, [r3, #0]
    1e18:	4912      	ldr	r1, [pc, #72]	; (1e64 <Clock_Ip_GetPllStatus+0xfc>)
    1e1a:	9a04      	ldr	r2, [sp, #16]
    1e1c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1e20:	4610      	mov	r0, r2
    1e22:	4798      	blx	r3
    1e24:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    1e26:	9b01      	ldr	r3, [sp, #4]
    1e28:	2b01      	cmp	r3, #1
    1e2a:	d102      	bne.n	1e32 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    1e2c:	2301      	movs	r3, #1
    1e2e:	9305      	str	r3, [sp, #20]
                break;
    1e30:	e008      	b.n	1e44 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1e32:	9b04      	ldr	r3, [sp, #16]
    1e34:	3301      	adds	r3, #1
    1e36:	9304      	str	r3, [sp, #16]
    1e38:	4b09      	ldr	r3, [pc, #36]	; (1e60 <Clock_Ip_GetPllStatus+0xf8>)
    1e3a:	78db      	ldrb	r3, [r3, #3]
    1e3c:	461a      	mov	r2, r3
    1e3e:	9b04      	ldr	r3, [sp, #16]
    1e40:	4293      	cmp	r3, r2
    1e42:	d3d1      	bcc.n	1de8 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    1e44:	9b05      	ldr	r3, [sp, #20]
}
    1e46:	4618      	mov	r0, r3
    1e48:	b007      	add	sp, #28
    1e4a:	f85d fb04 	ldr.w	pc, [sp], #4
    1e4e:	bf00      	nop
    1e50:	0000bdf4 	.word	0x0000bdf4
    1e54:	0000b8ec 	.word	0x0000b8ec
    1e58:	0000b8ac 	.word	0x0000b8ac
    1e5c:	0000bef8 	.word	0x0000bef8
    1e60:	1fff8b9c 	.word	0x1fff8b9c
    1e64:	0000bdf8 	.word	0x0000bdf8
    1e68:	0000b89c 	.word	0x0000b89c
    1e6c:	0000be68 	.word	0x0000be68

00001e70 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    1e70:	b500      	push	{lr}
    1e72:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1e74:	4b55      	ldr	r3, [pc, #340]	; (1fcc <Clock_Ip_DistributePll+0x15c>)
    1e76:	681b      	ldr	r3, [r3, #0]
    1e78:	2b00      	cmp	r3, #0
    1e7a:	f000 80a2 	beq.w	1fc2 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1e7e:	2300      	movs	r3, #0
    1e80:	9301      	str	r3, [sp, #4]
    1e82:	e02c      	b.n	1ede <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    1e84:	4b51      	ldr	r3, [pc, #324]	; (1fcc <Clock_Ip_DistributePll+0x15c>)
    1e86:	681a      	ldr	r2, [r3, #0]
    1e88:	9b01      	ldr	r3, [sp, #4]
    1e8a:	330d      	adds	r3, #13
    1e8c:	00db      	lsls	r3, r3, #3
    1e8e:	4413      	add	r3, r2
    1e90:	685b      	ldr	r3, [r3, #4]
    1e92:	4a4f      	ldr	r2, [pc, #316]	; (1fd0 <Clock_Ip_DistributePll+0x160>)
    1e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e98:	2b03      	cmp	r3, #3
    1e9a:	d11d      	bne.n	1ed8 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1e9c:	4b4b      	ldr	r3, [pc, #300]	; (1fcc <Clock_Ip_DistributePll+0x15c>)
    1e9e:	681b      	ldr	r3, [r3, #0]
    1ea0:	9a01      	ldr	r2, [sp, #4]
    1ea2:	320d      	adds	r2, #13
    1ea4:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1ea8:	494a      	ldr	r1, [pc, #296]	; (1fd4 <Clock_Ip_DistributePll+0x164>)
    1eaa:	4613      	mov	r3, r2
    1eac:	00db      	lsls	r3, r3, #3
    1eae:	4413      	add	r3, r2
    1eb0:	440b      	add	r3, r1
    1eb2:	3301      	adds	r3, #1
    1eb4:	781b      	ldrb	r3, [r3, #0]
    1eb6:	461a      	mov	r2, r3
    1eb8:	4b47      	ldr	r3, [pc, #284]	; (1fd8 <Clock_Ip_DistributePll+0x168>)
    1eba:	5c9b      	ldrb	r3, [r3, r2]
    1ebc:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    1ebe:	4a47      	ldr	r2, [pc, #284]	; (1fdc <Clock_Ip_DistributePll+0x16c>)
    1ec0:	9b00      	ldr	r3, [sp, #0]
    1ec2:	00db      	lsls	r3, r3, #3
    1ec4:	4413      	add	r3, r2
    1ec6:	685b      	ldr	r3, [r3, #4]
    1ec8:	4a40      	ldr	r2, [pc, #256]	; (1fcc <Clock_Ip_DistributePll+0x15c>)
    1eca:	6811      	ldr	r1, [r2, #0]
    1ecc:	9a01      	ldr	r2, [sp, #4]
    1ece:	320d      	adds	r2, #13
    1ed0:	00d2      	lsls	r2, r2, #3
    1ed2:	440a      	add	r2, r1
    1ed4:	4610      	mov	r0, r2
    1ed6:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1ed8:	9b01      	ldr	r3, [sp, #4]
    1eda:	3301      	adds	r3, #1
    1edc:	9301      	str	r3, [sp, #4]
    1ede:	4b3b      	ldr	r3, [pc, #236]	; (1fcc <Clock_Ip_DistributePll+0x15c>)
    1ee0:	681b      	ldr	r3, [r3, #0]
    1ee2:	7adb      	ldrb	r3, [r3, #11]
    1ee4:	461a      	mov	r2, r3
    1ee6:	9b01      	ldr	r3, [sp, #4]
    1ee8:	4293      	cmp	r3, r2
    1eea:	d3cb      	bcc.n	1e84 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    1eec:	4b3c      	ldr	r3, [pc, #240]	; (1fe0 <Clock_Ip_DistributePll+0x170>)
    1eee:	781b      	ldrb	r3, [r3, #0]
    1ef0:	2b00      	cmp	r3, #0
    1ef2:	d066      	beq.n	1fc2 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1ef4:	2300      	movs	r3, #0
    1ef6:	9301      	str	r3, [sp, #4]
    1ef8:	e021      	b.n	1f3e <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1efa:	4b34      	ldr	r3, [pc, #208]	; (1fcc <Clock_Ip_DistributePll+0x15c>)
    1efc:	681a      	ldr	r2, [r3, #0]
    1efe:	9b01      	ldr	r3, [sp, #4]
    1f00:	334e      	adds	r3, #78	; 0x4e
    1f02:	00db      	lsls	r3, r3, #3
    1f04:	4413      	add	r3, r2
    1f06:	685a      	ldr	r2, [r3, #4]
    1f08:	4932      	ldr	r1, [pc, #200]	; (1fd4 <Clock_Ip_DistributePll+0x164>)
    1f0a:	4613      	mov	r3, r2
    1f0c:	00db      	lsls	r3, r3, #3
    1f0e:	4413      	add	r3, r2
    1f10:	440b      	add	r3, r1
    1f12:	3301      	adds	r3, #1
    1f14:	781b      	ldrb	r3, [r3, #0]
    1f16:	461a      	mov	r2, r3
    1f18:	4b32      	ldr	r3, [pc, #200]	; (1fe4 <Clock_Ip_DistributePll+0x174>)
    1f1a:	5c9b      	ldrb	r3, [r3, r2]
    1f1c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    1f1e:	4a32      	ldr	r2, [pc, #200]	; (1fe8 <Clock_Ip_DistributePll+0x178>)
    1f20:	9b00      	ldr	r3, [sp, #0]
    1f22:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f26:	4a29      	ldr	r2, [pc, #164]	; (1fcc <Clock_Ip_DistributePll+0x15c>)
    1f28:	6811      	ldr	r1, [r2, #0]
    1f2a:	9a01      	ldr	r2, [sp, #4]
    1f2c:	324e      	adds	r2, #78	; 0x4e
    1f2e:	00d2      	lsls	r2, r2, #3
    1f30:	440a      	add	r2, r1
    1f32:	3204      	adds	r2, #4
    1f34:	4610      	mov	r0, r2
    1f36:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1f38:	9b01      	ldr	r3, [sp, #4]
    1f3a:	3301      	adds	r3, #1
    1f3c:	9301      	str	r3, [sp, #4]
    1f3e:	4b23      	ldr	r3, [pc, #140]	; (1fcc <Clock_Ip_DistributePll+0x15c>)
    1f40:	681b      	ldr	r3, [r3, #0]
    1f42:	7c1b      	ldrb	r3, [r3, #16]
    1f44:	461a      	mov	r2, r3
    1f46:	9b01      	ldr	r3, [sp, #4]
    1f48:	4293      	cmp	r3, r2
    1f4a:	d3d6      	bcc.n	1efa <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1f4c:	2300      	movs	r3, #0
    1f4e:	9301      	str	r3, [sp, #4]
    1f50:	e02a      	b.n	1fa8 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1f52:	4b1e      	ldr	r3, [pc, #120]	; (1fcc <Clock_Ip_DistributePll+0x15c>)
    1f54:	6819      	ldr	r1, [r3, #0]
    1f56:	9a01      	ldr	r2, [sp, #4]
    1f58:	4613      	mov	r3, r2
    1f5a:	009b      	lsls	r3, r3, #2
    1f5c:	4413      	add	r3, r2
    1f5e:	009b      	lsls	r3, r3, #2
    1f60:	440b      	add	r3, r1
    1f62:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1f66:	681a      	ldr	r2, [r3, #0]
    1f68:	491a      	ldr	r1, [pc, #104]	; (1fd4 <Clock_Ip_DistributePll+0x164>)
    1f6a:	4613      	mov	r3, r2
    1f6c:	00db      	lsls	r3, r3, #3
    1f6e:	4413      	add	r3, r2
    1f70:	440b      	add	r3, r1
    1f72:	3301      	adds	r3, #1
    1f74:	781b      	ldrb	r3, [r3, #0]
    1f76:	461a      	mov	r2, r3
    1f78:	4b1c      	ldr	r3, [pc, #112]	; (1fec <Clock_Ip_DistributePll+0x17c>)
    1f7a:	5c9b      	ldrb	r3, [r3, r2]
    1f7c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    1f7e:	4a1c      	ldr	r2, [pc, #112]	; (1ff0 <Clock_Ip_DistributePll+0x180>)
    1f80:	9b00      	ldr	r3, [sp, #0]
    1f82:	011b      	lsls	r3, r3, #4
    1f84:	4413      	add	r3, r2
    1f86:	330c      	adds	r3, #12
    1f88:	6819      	ldr	r1, [r3, #0]
    1f8a:	4b10      	ldr	r3, [pc, #64]	; (1fcc <Clock_Ip_DistributePll+0x15c>)
    1f8c:	6818      	ldr	r0, [r3, #0]
    1f8e:	9a01      	ldr	r2, [sp, #4]
    1f90:	4613      	mov	r3, r2
    1f92:	009b      	lsls	r3, r3, #2
    1f94:	4413      	add	r3, r2
    1f96:	009b      	lsls	r3, r3, #2
    1f98:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1f9c:	4403      	add	r3, r0
    1f9e:	4618      	mov	r0, r3
    1fa0:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1fa2:	9b01      	ldr	r3, [sp, #4]
    1fa4:	3301      	adds	r3, #1
    1fa6:	9301      	str	r3, [sp, #4]
    1fa8:	4b08      	ldr	r3, [pc, #32]	; (1fcc <Clock_Ip_DistributePll+0x15c>)
    1faa:	681b      	ldr	r3, [r3, #0]
    1fac:	7c9b      	ldrb	r3, [r3, #18]
    1fae:	461a      	mov	r2, r3
    1fb0:	9b01      	ldr	r3, [sp, #4]
    1fb2:	4293      	cmp	r3, r2
    1fb4:	d3cd      	bcc.n	1f52 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1fb6:	4b05      	ldr	r3, [pc, #20]	; (1fcc <Clock_Ip_DistributePll+0x15c>)
    1fb8:	681b      	ldr	r3, [r3, #0]
    1fba:	2104      	movs	r1, #4
    1fbc:	4618      	mov	r0, r3
    1fbe:	f002 fe0b 	bl	4bd8 <Clock_Ip_Command>
        }
    }
}
    1fc2:	bf00      	nop
    1fc4:	b003      	add	sp, #12
    1fc6:	f85d fb04 	ldr.w	pc, [sp], #4
    1fca:	bf00      	nop
    1fcc:	1fff8b94 	.word	0x1fff8b94
    1fd0:	0000bd38 	.word	0x0000bd38
    1fd4:	0000b8ec 	.word	0x0000b8ec
    1fd8:	0000b8bc 	.word	0x0000b8bc
    1fdc:	0000bf24 	.word	0x0000bf24
    1fe0:	1fff8b9c 	.word	0x1fff8b9c
    1fe4:	0000b88c 	.word	0x0000b88c
    1fe8:	0000be74 	.word	0x0000be74
    1fec:	0000b8dc 	.word	0x0000b8dc
    1ff0:	0000bee8 	.word	0x0000bee8

00001ff4 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    1ff4:	b500      	push	{lr}
    1ff6:	b085      	sub	sp, #20
    1ff8:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1ffa:	490c      	ldr	r1, [pc, #48]	; (202c <Clock_Ip_DisableClockMonitor+0x38>)
    1ffc:	9a01      	ldr	r2, [sp, #4]
    1ffe:	4613      	mov	r3, r2
    2000:	00db      	lsls	r3, r3, #3
    2002:	4413      	add	r3, r2
    2004:	440b      	add	r3, r1
    2006:	3301      	adds	r3, #1
    2008:	781b      	ldrb	r3, [r3, #0]
    200a:	461a      	mov	r2, r3
    200c:	4b08      	ldr	r3, [pc, #32]	; (2030 <Clock_Ip_DisableClockMonitor+0x3c>)
    200e:	5c9b      	ldrb	r3, [r3, r2]
    2010:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2012:	4a08      	ldr	r2, [pc, #32]	; (2034 <Clock_Ip_DisableClockMonitor+0x40>)
    2014:	9b03      	ldr	r3, [sp, #12]
    2016:	011b      	lsls	r3, r3, #4
    2018:	4413      	add	r3, r2
    201a:	3308      	adds	r3, #8
    201c:	681b      	ldr	r3, [r3, #0]
    201e:	9801      	ldr	r0, [sp, #4]
    2020:	4798      	blx	r3
}
    2022:	bf00      	nop
    2024:	b005      	add	sp, #20
    2026:	f85d fb04 	ldr.w	pc, [sp], #4
    202a:	bf00      	nop
    202c:	0000b8ec 	.word	0x0000b8ec
    2030:	0000b8dc 	.word	0x0000b8dc
    2034:	0000bee8 	.word	0x0000bee8

00002038 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2038:	b082      	sub	sp, #8
    203a:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    203c:	4a02      	ldr	r2, [pc, #8]	; (2048 <Clock_Ip_InstallNotificationsCallback+0x10>)
    203e:	9b01      	ldr	r3, [sp, #4]
    2040:	6013      	str	r3, [r2, #0]
}
    2042:	bf00      	nop
    2044:	b002      	add	sp, #8
    2046:	4770      	bx	lr
    2048:	1fff8b14 	.word	0x1fff8b14

0000204c <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    204c:	b500      	push	{lr}
    204e:	b085      	sub	sp, #20
    2050:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2052:	490c      	ldr	r1, [pc, #48]	; (2084 <Clock_Ip_DisableModuleClock+0x38>)
    2054:	9a01      	ldr	r2, [sp, #4]
    2056:	4613      	mov	r3, r2
    2058:	00db      	lsls	r3, r3, #3
    205a:	4413      	add	r3, r2
    205c:	440b      	add	r3, r1
    205e:	3301      	adds	r3, #1
    2060:	781b      	ldrb	r3, [r3, #0]
    2062:	461a      	mov	r2, r3
    2064:	4b08      	ldr	r3, [pc, #32]	; (2088 <Clock_Ip_DisableModuleClock+0x3c>)
    2066:	5c9b      	ldrb	r3, [r3, r2]
    2068:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    206a:	4a08      	ldr	r2, [pc, #32]	; (208c <Clock_Ip_DisableModuleClock+0x40>)
    206c:	9b03      	ldr	r3, [sp, #12]
    206e:	00db      	lsls	r3, r3, #3
    2070:	4413      	add	r3, r2
    2072:	685b      	ldr	r3, [r3, #4]
    2074:	2101      	movs	r1, #1
    2076:	9801      	ldr	r0, [sp, #4]
    2078:	4798      	blx	r3
}
    207a:	bf00      	nop
    207c:	b005      	add	sp, #20
    207e:	f85d fb04 	ldr.w	pc, [sp], #4
    2082:	bf00      	nop
    2084:	0000b8ec 	.word	0x0000b8ec
    2088:	0000b88c 	.word	0x0000b88c
    208c:	0000be74 	.word	0x0000be74

00002090 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2090:	b500      	push	{lr}
    2092:	b085      	sub	sp, #20
    2094:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2096:	490c      	ldr	r1, [pc, #48]	; (20c8 <Clock_Ip_EnableModuleClock+0x38>)
    2098:	9a01      	ldr	r2, [sp, #4]
    209a:	4613      	mov	r3, r2
    209c:	00db      	lsls	r3, r3, #3
    209e:	4413      	add	r3, r2
    20a0:	440b      	add	r3, r1
    20a2:	3301      	adds	r3, #1
    20a4:	781b      	ldrb	r3, [r3, #0]
    20a6:	461a      	mov	r2, r3
    20a8:	4b08      	ldr	r3, [pc, #32]	; (20cc <Clock_Ip_EnableModuleClock+0x3c>)
    20aa:	5c9b      	ldrb	r3, [r3, r2]
    20ac:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    20ae:	4a08      	ldr	r2, [pc, #32]	; (20d0 <Clock_Ip_EnableModuleClock+0x40>)
    20b0:	9b03      	ldr	r3, [sp, #12]
    20b2:	00db      	lsls	r3, r3, #3
    20b4:	4413      	add	r3, r2
    20b6:	685b      	ldr	r3, [r3, #4]
    20b8:	2100      	movs	r1, #0
    20ba:	9801      	ldr	r0, [sp, #4]
    20bc:	4798      	blx	r3
}
    20be:	bf00      	nop
    20c0:	b005      	add	sp, #20
    20c2:	f85d fb04 	ldr.w	pc, [sp], #4
    20c6:	bf00      	nop
    20c8:	0000b8ec 	.word	0x0000b8ec
    20cc:	0000b88c 	.word	0x0000b88c
    20d0:	0000be74 	.word	0x0000be74

000020d4 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    20d4:	b500      	push	{lr}
    20d6:	b083      	sub	sp, #12
    20d8:	9001      	str	r0, [sp, #4]
    20da:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    20de:	2200      	movs	r2, #0
    20e0:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    20e2:	4b08      	ldr	r3, [pc, #32]	; (2104 <Clock_Ip_PowerModeChangeNotification+0x30>)
    20e4:	681b      	ldr	r3, [r3, #0]
    20e6:	2102      	movs	r1, #2
    20e8:	4618      	mov	r0, r3
    20ea:	f002 fd75 	bl	4bd8 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    20ee:	9900      	ldr	r1, [sp, #0]
    20f0:	9801      	ldr	r0, [sp, #4]
    20f2:	f002 fc51 	bl	4998 <Clock_Ip_ClockPowerModeChangeNotification>
}
    20f6:	bf00      	nop
    20f8:	b003      	add	sp, #12
    20fa:	f85d fb04 	ldr.w	pc, [sp], #4
    20fe:	bf00      	nop
    2100:	1fff8b10 	.word	0x1fff8b10
    2104:	1fff8b94 	.word	0x1fff8b94

00002108 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2108:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    210a:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    210e:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2110:	4b06      	ldr	r3, [pc, #24]	; (212c <Clock_Ip_SetWaitStates+0x24>)
    2112:	785b      	ldrb	r3, [r3, #1]
    2114:	2b00      	cmp	r3, #0
    2116:	d005      	beq.n	2124 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2118:	9b01      	ldr	r3, [sp, #4]
    211a:	3b01      	subs	r3, #1
    211c:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    211e:	9b01      	ldr	r3, [sp, #4]
    2120:	2b00      	cmp	r3, #0
    2122:	d1f9      	bne.n	2118 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2124:	bf00      	nop
    2126:	b002      	add	sp, #8
    2128:	4770      	bx	lr
    212a:	bf00      	nop
    212c:	1fff8b9c 	.word	0x1fff8b9c

00002130 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2130:	b500      	push	{lr}
    2132:	b083      	sub	sp, #12
    2134:	9001      	str	r0, [sp, #4]
    2136:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2138:	4b04      	ldr	r3, [pc, #16]	; (214c <Clock_Ip_ReportClockErrors+0x1c>)
    213a:	681b      	ldr	r3, [r3, #0]
    213c:	9900      	ldr	r1, [sp, #0]
    213e:	9801      	ldr	r0, [sp, #4]
    2140:	4798      	blx	r3
}
    2142:	bf00      	nop
    2144:	b003      	add	sp, #12
    2146:	f85d fb04 	ldr.w	pc, [sp], #4
    214a:	bf00      	nop
    214c:	1fff8b14 	.word	0x1fff8b14

00002150 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2150:	b500      	push	{lr}
    2152:	b085      	sub	sp, #20
    2154:	9003      	str	r0, [sp, #12]
    2156:	9102      	str	r1, [sp, #8]
    2158:	9201      	str	r2, [sp, #4]
    215a:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    215c:	2000      	movs	r0, #0
    215e:	f7fe ffd1 	bl	1104 <OsIf_GetCounter>
    2162:	4602      	mov	r2, r0
    2164:	9b03      	ldr	r3, [sp, #12]
    2166:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2168:	9b02      	ldr	r3, [sp, #8]
    216a:	2200      	movs	r2, #0
    216c:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    216e:	2100      	movs	r1, #0
    2170:	9800      	ldr	r0, [sp, #0]
    2172:	f7ff f813 	bl	119c <OsIf_MicrosToTicks>
    2176:	4602      	mov	r2, r0
    2178:	9b01      	ldr	r3, [sp, #4]
    217a:	601a      	str	r2, [r3, #0]
}
    217c:	bf00      	nop
    217e:	b005      	add	sp, #20
    2180:	f85d fb04 	ldr.w	pc, [sp], #4

00002184 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2184:	b500      	push	{lr}
    2186:	b087      	sub	sp, #28
    2188:	9003      	str	r0, [sp, #12]
    218a:	9102      	str	r1, [sp, #8]
    218c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    218e:	2300      	movs	r3, #0
    2190:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2194:	2100      	movs	r1, #0
    2196:	9803      	ldr	r0, [sp, #12]
    2198:	f7fe ffcd 	bl	1136 <OsIf_GetElapsed>
    219c:	4602      	mov	r2, r0
    219e:	9b02      	ldr	r3, [sp, #8]
    21a0:	681b      	ldr	r3, [r3, #0]
    21a2:	441a      	add	r2, r3
    21a4:	9b02      	ldr	r3, [sp, #8]
    21a6:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    21a8:	9b02      	ldr	r3, [sp, #8]
    21aa:	681b      	ldr	r3, [r3, #0]
    21ac:	9a01      	ldr	r2, [sp, #4]
    21ae:	429a      	cmp	r2, r3
    21b0:	d802      	bhi.n	21b8 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    21b2:	2301      	movs	r3, #1
    21b4:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    21b8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    21bc:	4618      	mov	r0, r3
    21be:	b007      	add	sp, #28
    21c0:	f85d fb04 	ldr.w	pc, [sp], #4

000021c4 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    21c4:	b082      	sub	sp, #8
    21c6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    21c8:	bf00      	nop
    21ca:	b002      	add	sp, #8
    21cc:	4770      	bx	lr

000021ce <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    21ce:	b500      	push	{lr}
    21d0:	b083      	sub	sp, #12
    21d2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21d4:	9b01      	ldr	r3, [sp, #4]
    21d6:	2b00      	cmp	r3, #0
    21d8:	d002      	beq.n	21e0 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    21da:	9801      	ldr	r0, [sp, #4]
    21dc:	f000 f8ad 	bl	233a <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    21e0:	bf00      	nop
    21e2:	b003      	add	sp, #12
    21e4:	f85d fb04 	ldr.w	pc, [sp], #4

000021e8 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    21e8:	b500      	push	{lr}
    21ea:	b083      	sub	sp, #12
    21ec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21ee:	9b01      	ldr	r3, [sp, #4]
    21f0:	2b00      	cmp	r3, #0
    21f2:	d002      	beq.n	21fa <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    21f4:	9801      	ldr	r0, [sp, #4]
    21f6:	f000 f8cd 	bl	2394 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    21fa:	bf00      	nop
    21fc:	b003      	add	sp, #12
    21fe:	f85d fb04 	ldr.w	pc, [sp], #4

00002202 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2202:	b500      	push	{lr}
    2204:	b083      	sub	sp, #12
    2206:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2208:	9b01      	ldr	r3, [sp, #4]
    220a:	2b00      	cmp	r3, #0
    220c:	d002      	beq.n	2214 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    220e:	9801      	ldr	r0, [sp, #4]
    2210:	f000 f8ee 	bl	23f0 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2214:	bf00      	nop
    2216:	b003      	add	sp, #12
    2218:	f85d fb04 	ldr.w	pc, [sp], #4

0000221c <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    221c:	b500      	push	{lr}
    221e:	b083      	sub	sp, #12
    2220:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2222:	9b01      	ldr	r3, [sp, #4]
    2224:	2b00      	cmp	r3, #0
    2226:	d002      	beq.n	222e <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2228:	9801      	ldr	r0, [sp, #4]
    222a:	f000 f8f9 	bl	2420 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    222e:	bf00      	nop
    2230:	b003      	add	sp, #12
    2232:	f85d fb04 	ldr.w	pc, [sp], #4

00002236 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2236:	b500      	push	{lr}
    2238:	b083      	sub	sp, #12
    223a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    223c:	9b01      	ldr	r3, [sp, #4]
    223e:	2b00      	cmp	r3, #0
    2240:	d002      	beq.n	2248 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2242:	9801      	ldr	r0, [sp, #4]
    2244:	f000 f904 	bl	2450 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2248:	bf00      	nop
    224a:	b003      	add	sp, #12
    224c:	f85d fb04 	ldr.w	pc, [sp], #4

00002250 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2250:	b500      	push	{lr}
    2252:	b083      	sub	sp, #12
    2254:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2256:	9b01      	ldr	r3, [sp, #4]
    2258:	2b00      	cmp	r3, #0
    225a:	d002      	beq.n	2262 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    225c:	9801      	ldr	r0, [sp, #4]
    225e:	f000 f90f 	bl	2480 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2262:	bf00      	nop
    2264:	b003      	add	sp, #12
    2266:	f85d fb04 	ldr.w	pc, [sp], #4

0000226a <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    226a:	b500      	push	{lr}
    226c:	b083      	sub	sp, #12
    226e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2270:	9b01      	ldr	r3, [sp, #4]
    2272:	2b00      	cmp	r3, #0
    2274:	d002      	beq.n	227c <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2276:	9801      	ldr	r0, [sp, #4]
    2278:	f000 f91a 	bl	24b0 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    227c:	bf00      	nop
    227e:	b003      	add	sp, #12
    2280:	f85d fb04 	ldr.w	pc, [sp], #4

00002284 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2284:	b500      	push	{lr}
    2286:	b083      	sub	sp, #12
    2288:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    228a:	9b01      	ldr	r3, [sp, #4]
    228c:	2b00      	cmp	r3, #0
    228e:	d002      	beq.n	2296 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2290:	9801      	ldr	r0, [sp, #4]
    2292:	f000 f925 	bl	24e0 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2296:	bf00      	nop
    2298:	b003      	add	sp, #12
    229a:	f85d fb04 	ldr.w	pc, [sp], #4

0000229e <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    229e:	b500      	push	{lr}
    22a0:	b083      	sub	sp, #12
    22a2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22a4:	9b01      	ldr	r3, [sp, #4]
    22a6:	2b00      	cmp	r3, #0
    22a8:	d002      	beq.n	22b0 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    22aa:	9801      	ldr	r0, [sp, #4]
    22ac:	f000 f930 	bl	2510 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22b0:	bf00      	nop
    22b2:	b003      	add	sp, #12
    22b4:	f85d fb04 	ldr.w	pc, [sp], #4

000022b8 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    22b8:	b500      	push	{lr}
    22ba:	b083      	sub	sp, #12
    22bc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22be:	9b01      	ldr	r3, [sp, #4]
    22c0:	2b00      	cmp	r3, #0
    22c2:	d002      	beq.n	22ca <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    22c4:	9801      	ldr	r0, [sp, #4]
    22c6:	f000 f93b 	bl	2540 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22ca:	bf00      	nop
    22cc:	b003      	add	sp, #12
    22ce:	f85d fb04 	ldr.w	pc, [sp], #4

000022d2 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    22d2:	b500      	push	{lr}
    22d4:	b083      	sub	sp, #12
    22d6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22d8:	9b01      	ldr	r3, [sp, #4]
    22da:	2b00      	cmp	r3, #0
    22dc:	d002      	beq.n	22e4 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    22de:	9801      	ldr	r0, [sp, #4]
    22e0:	f000 f946 	bl	2570 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22e4:	bf00      	nop
    22e6:	b003      	add	sp, #12
    22e8:	f85d fb04 	ldr.w	pc, [sp], #4

000022ec <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    22ec:	b500      	push	{lr}
    22ee:	b083      	sub	sp, #12
    22f0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22f2:	9b01      	ldr	r3, [sp, #4]
    22f4:	2b00      	cmp	r3, #0
    22f6:	d002      	beq.n	22fe <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    22f8:	9801      	ldr	r0, [sp, #4]
    22fa:	f000 f951 	bl	25a0 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22fe:	bf00      	nop
    2300:	b003      	add	sp, #12
    2302:	f85d fb04 	ldr.w	pc, [sp], #4

00002306 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2306:	b500      	push	{lr}
    2308:	b083      	sub	sp, #12
    230a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    230c:	9b01      	ldr	r3, [sp, #4]
    230e:	2b00      	cmp	r3, #0
    2310:	d002      	beq.n	2318 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2312:	9801      	ldr	r0, [sp, #4]
    2314:	f000 f95e 	bl	25d4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2318:	bf00      	nop
    231a:	b003      	add	sp, #12
    231c:	f85d fb04 	ldr.w	pc, [sp], #4

00002320 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2320:	b500      	push	{lr}
    2322:	b083      	sub	sp, #12
    2324:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2326:	9b01      	ldr	r3, [sp, #4]
    2328:	2b00      	cmp	r3, #0
    232a:	d002      	beq.n	2332 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    232c:	9801      	ldr	r0, [sp, #4]
    232e:	f000 f98b 	bl	2648 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2332:	bf00      	nop
    2334:	b003      	add	sp, #12
    2336:	f85d fb04 	ldr.w	pc, [sp], #4

0000233a <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    233a:	b086      	sub	sp, #24
    233c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    233e:	9b01      	ldr	r3, [sp, #4]
    2340:	681a      	ldr	r2, [r3, #0]
    2342:	4911      	ldr	r1, [pc, #68]	; (2388 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2344:	4613      	mov	r3, r2
    2346:	00db      	lsls	r3, r3, #3
    2348:	4413      	add	r3, r2
    234a:	440b      	add	r3, r1
    234c:	781b      	ldrb	r3, [r3, #0]
    234e:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2350:	9b01      	ldr	r3, [sp, #4]
    2352:	685b      	ldr	r3, [r3, #4]
    2354:	4a0d      	ldr	r2, [pc, #52]	; (238c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2356:	5cd3      	ldrb	r3, [r2, r3]
    2358:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    235a:	4a0d      	ldr	r2, [pc, #52]	; (2390 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    235c:	9b05      	ldr	r3, [sp, #20]
    235e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2362:	681b      	ldr	r3, [r3, #0]
    2364:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2366:	9b03      	ldr	r3, [sp, #12]
    2368:	f023 0307 	bic.w	r3, r3, #7
    236c:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    236e:	9a03      	ldr	r2, [sp, #12]
    2370:	9b04      	ldr	r3, [sp, #16]
    2372:	4313      	orrs	r3, r2
    2374:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2376:	4a06      	ldr	r2, [pc, #24]	; (2390 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2378:	9b05      	ldr	r3, [sp, #20]
    237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    237e:	9a03      	ldr	r2, [sp, #12]
    2380:	601a      	str	r2, [r3, #0]
}
    2382:	bf00      	nop
    2384:	b006      	add	sp, #24
    2386:	4770      	bx	lr
    2388:	0000b8ec 	.word	0x0000b8ec
    238c:	0000bce4 	.word	0x0000bce4
    2390:	0000bd28 	.word	0x0000bd28

00002394 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2394:	b086      	sub	sp, #24
    2396:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2398:	9b01      	ldr	r3, [sp, #4]
    239a:	681a      	ldr	r2, [r3, #0]
    239c:	4911      	ldr	r1, [pc, #68]	; (23e4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    239e:	4613      	mov	r3, r2
    23a0:	00db      	lsls	r3, r3, #3
    23a2:	4413      	add	r3, r2
    23a4:	440b      	add	r3, r1
    23a6:	781b      	ldrb	r3, [r3, #0]
    23a8:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    23aa:	9b01      	ldr	r3, [sp, #4]
    23ac:	685b      	ldr	r3, [r3, #4]
    23ae:	4a0e      	ldr	r2, [pc, #56]	; (23e8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    23b0:	5cd3      	ldrb	r3, [r2, r3]
    23b2:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    23b4:	4a0d      	ldr	r2, [pc, #52]	; (23ec <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    23b6:	9b05      	ldr	r3, [sp, #20]
    23b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    23bc:	681b      	ldr	r3, [r3, #0]
    23be:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    23c0:	9b03      	ldr	r3, [sp, #12]
    23c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    23c6:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    23c8:	9b04      	ldr	r3, [sp, #16]
    23ca:	021b      	lsls	r3, r3, #8
    23cc:	9a03      	ldr	r2, [sp, #12]
    23ce:	4313      	orrs	r3, r2
    23d0:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    23d2:	4a06      	ldr	r2, [pc, #24]	; (23ec <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    23d4:	9b05      	ldr	r3, [sp, #20]
    23d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    23da:	9a03      	ldr	r2, [sp, #12]
    23dc:	601a      	str	r2, [r3, #0]
}
    23de:	bf00      	nop
    23e0:	b006      	add	sp, #24
    23e2:	4770      	bx	lr
    23e4:	0000b8ec 	.word	0x0000b8ec
    23e8:	0000bce4 	.word	0x0000bce4
    23ec:	0000bd28 	.word	0x0000bd28

000023f0 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    23f0:	b084      	sub	sp, #16
    23f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    23f4:	4b09      	ldr	r3, [pc, #36]	; (241c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    23f6:	695b      	ldr	r3, [r3, #20]
    23f8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    23fa:	9b03      	ldr	r3, [sp, #12]
    23fc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2400:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2402:	9b01      	ldr	r3, [sp, #4]
    2404:	685b      	ldr	r3, [r3, #4]
    2406:	3b01      	subs	r3, #1
    2408:	041b      	lsls	r3, r3, #16
    240a:	9a03      	ldr	r2, [sp, #12]
    240c:	4313      	orrs	r3, r2
    240e:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2410:	4a02      	ldr	r2, [pc, #8]	; (241c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2412:	9b03      	ldr	r3, [sp, #12]
    2414:	6153      	str	r3, [r2, #20]
}
    2416:	bf00      	nop
    2418:	b004      	add	sp, #16
    241a:	4770      	bx	lr
    241c:	40064000 	.word	0x40064000

00002420 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2420:	b084      	sub	sp, #16
    2422:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2424:	4b09      	ldr	r3, [pc, #36]	; (244c <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2426:	695b      	ldr	r3, [r3, #20]
    2428:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    242a:	9b03      	ldr	r3, [sp, #12]
    242c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2430:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2432:	9b01      	ldr	r3, [sp, #4]
    2434:	685b      	ldr	r3, [r3, #4]
    2436:	3b01      	subs	r3, #1
    2438:	011b      	lsls	r3, r3, #4
    243a:	9a03      	ldr	r2, [sp, #12]
    243c:	4313      	orrs	r3, r2
    243e:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2440:	4a02      	ldr	r2, [pc, #8]	; (244c <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2442:	9b03      	ldr	r3, [sp, #12]
    2444:	6153      	str	r3, [r2, #20]
}
    2446:	bf00      	nop
    2448:	b004      	add	sp, #16
    244a:	4770      	bx	lr
    244c:	40064000 	.word	0x40064000

00002450 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2450:	b084      	sub	sp, #16
    2452:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2454:	4b09      	ldr	r3, [pc, #36]	; (247c <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2456:	695b      	ldr	r3, [r3, #20]
    2458:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    245a:	9b03      	ldr	r3, [sp, #12]
    245c:	f023 030f 	bic.w	r3, r3, #15
    2460:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2462:	9b01      	ldr	r3, [sp, #4]
    2464:	685b      	ldr	r3, [r3, #4]
    2466:	3b01      	subs	r3, #1
    2468:	9a03      	ldr	r2, [sp, #12]
    246a:	4313      	orrs	r3, r2
    246c:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    246e:	4a03      	ldr	r2, [pc, #12]	; (247c <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2470:	9b03      	ldr	r3, [sp, #12]
    2472:	6153      	str	r3, [r2, #20]
}
    2474:	bf00      	nop
    2476:	b004      	add	sp, #16
    2478:	4770      	bx	lr
    247a:	bf00      	nop
    247c:	40064000 	.word	0x40064000

00002480 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2480:	b084      	sub	sp, #16
    2482:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2484:	4b09      	ldr	r3, [pc, #36]	; (24ac <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2486:	699b      	ldr	r3, [r3, #24]
    2488:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    248a:	9b03      	ldr	r3, [sp, #12]
    248c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2490:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2492:	9b01      	ldr	r3, [sp, #4]
    2494:	685b      	ldr	r3, [r3, #4]
    2496:	3b01      	subs	r3, #1
    2498:	041b      	lsls	r3, r3, #16
    249a:	9a03      	ldr	r2, [sp, #12]
    249c:	4313      	orrs	r3, r2
    249e:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    24a0:	4a02      	ldr	r2, [pc, #8]	; (24ac <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    24a2:	9b03      	ldr	r3, [sp, #12]
    24a4:	6193      	str	r3, [r2, #24]
}
    24a6:	bf00      	nop
    24a8:	b004      	add	sp, #16
    24aa:	4770      	bx	lr
    24ac:	40064000 	.word	0x40064000

000024b0 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24b0:	b084      	sub	sp, #16
    24b2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    24b4:	4b09      	ldr	r3, [pc, #36]	; (24dc <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    24b6:	699b      	ldr	r3, [r3, #24]
    24b8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    24ba:	9b03      	ldr	r3, [sp, #12]
    24bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    24c0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    24c2:	9b01      	ldr	r3, [sp, #4]
    24c4:	685b      	ldr	r3, [r3, #4]
    24c6:	3b01      	subs	r3, #1
    24c8:	011b      	lsls	r3, r3, #4
    24ca:	9a03      	ldr	r2, [sp, #12]
    24cc:	4313      	orrs	r3, r2
    24ce:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    24d0:	4a02      	ldr	r2, [pc, #8]	; (24dc <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    24d2:	9b03      	ldr	r3, [sp, #12]
    24d4:	6193      	str	r3, [r2, #24]
}
    24d6:	bf00      	nop
    24d8:	b004      	add	sp, #16
    24da:	4770      	bx	lr
    24dc:	40064000 	.word	0x40064000

000024e0 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24e0:	b084      	sub	sp, #16
    24e2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    24e4:	4b09      	ldr	r3, [pc, #36]	; (250c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    24e6:	699b      	ldr	r3, [r3, #24]
    24e8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    24ea:	9b03      	ldr	r3, [sp, #12]
    24ec:	f023 030f 	bic.w	r3, r3, #15
    24f0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    24f2:	9b01      	ldr	r3, [sp, #4]
    24f4:	685b      	ldr	r3, [r3, #4]
    24f6:	3b01      	subs	r3, #1
    24f8:	9a03      	ldr	r2, [sp, #12]
    24fa:	4313      	orrs	r3, r2
    24fc:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    24fe:	4a03      	ldr	r2, [pc, #12]	; (250c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2500:	9b03      	ldr	r3, [sp, #12]
    2502:	6193      	str	r3, [r2, #24]
}
    2504:	bf00      	nop
    2506:	b004      	add	sp, #16
    2508:	4770      	bx	lr
    250a:	bf00      	nop
    250c:	40064000 	.word	0x40064000

00002510 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2510:	b084      	sub	sp, #16
    2512:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2514:	4b09      	ldr	r3, [pc, #36]	; (253c <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2516:	69db      	ldr	r3, [r3, #28]
    2518:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    251a:	9b03      	ldr	r3, [sp, #12]
    251c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2520:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2522:	9b01      	ldr	r3, [sp, #4]
    2524:	685b      	ldr	r3, [r3, #4]
    2526:	3b01      	subs	r3, #1
    2528:	041b      	lsls	r3, r3, #16
    252a:	9a03      	ldr	r2, [sp, #12]
    252c:	4313      	orrs	r3, r2
    252e:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2530:	4a02      	ldr	r2, [pc, #8]	; (253c <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2532:	9b03      	ldr	r3, [sp, #12]
    2534:	61d3      	str	r3, [r2, #28]
}
    2536:	bf00      	nop
    2538:	b004      	add	sp, #16
    253a:	4770      	bx	lr
    253c:	40064000 	.word	0x40064000

00002540 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2540:	b084      	sub	sp, #16
    2542:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2544:	4b09      	ldr	r3, [pc, #36]	; (256c <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2546:	69db      	ldr	r3, [r3, #28]
    2548:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    254a:	9b03      	ldr	r3, [sp, #12]
    254c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2550:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2552:	9b01      	ldr	r3, [sp, #4]
    2554:	685b      	ldr	r3, [r3, #4]
    2556:	3b01      	subs	r3, #1
    2558:	011b      	lsls	r3, r3, #4
    255a:	9a03      	ldr	r2, [sp, #12]
    255c:	4313      	orrs	r3, r2
    255e:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2560:	4a02      	ldr	r2, [pc, #8]	; (256c <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2562:	9b03      	ldr	r3, [sp, #12]
    2564:	61d3      	str	r3, [r2, #28]
}
    2566:	bf00      	nop
    2568:	b004      	add	sp, #16
    256a:	4770      	bx	lr
    256c:	40064000 	.word	0x40064000

00002570 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2570:	b084      	sub	sp, #16
    2572:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2574:	4b09      	ldr	r3, [pc, #36]	; (259c <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2576:	69db      	ldr	r3, [r3, #28]
    2578:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    257a:	9b03      	ldr	r3, [sp, #12]
    257c:	f023 030f 	bic.w	r3, r3, #15
    2580:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    2582:	9b01      	ldr	r3, [sp, #4]
    2584:	685b      	ldr	r3, [r3, #4]
    2586:	3b01      	subs	r3, #1
    2588:	9a03      	ldr	r2, [sp, #12]
    258a:	4313      	orrs	r3, r2
    258c:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    258e:	4a03      	ldr	r2, [pc, #12]	; (259c <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2590:	9b03      	ldr	r3, [sp, #12]
    2592:	61d3      	str	r3, [r2, #28]
}
    2594:	bf00      	nop
    2596:	b004      	add	sp, #16
    2598:	4770      	bx	lr
    259a:	bf00      	nop
    259c:	40064000 	.word	0x40064000

000025a0 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    25a0:	b084      	sub	sp, #16
    25a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    25a4:	4b0a      	ldr	r3, [pc, #40]	; (25d0 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    25a6:	685b      	ldr	r3, [r3, #4]
    25a8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    25aa:	9b03      	ldr	r3, [sp, #12]
    25ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    25b0:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    25b2:	9b01      	ldr	r3, [sp, #4]
    25b4:	685b      	ldr	r3, [r3, #4]
    25b6:	3b01      	subs	r3, #1
    25b8:	021b      	lsls	r3, r3, #8
    25ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    25be:	9a03      	ldr	r2, [sp, #12]
    25c0:	4313      	orrs	r3, r2
    25c2:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    25c4:	4a02      	ldr	r2, [pc, #8]	; (25d0 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    25c6:	9b03      	ldr	r3, [sp, #12]
    25c8:	6053      	str	r3, [r2, #4]
}
    25ca:	bf00      	nop
    25cc:	b004      	add	sp, #16
    25ce:	4770      	bx	lr
    25d0:	40048000 	.word	0x40048000

000025d4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    25d4:	b084      	sub	sp, #16
    25d6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    25d8:	4919      	ldr	r1, [pc, #100]	; (2640 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    25da:	9b01      	ldr	r3, [sp, #4]
    25dc:	681a      	ldr	r2, [r3, #0]
    25de:	4819      	ldr	r0, [pc, #100]	; (2644 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    25e0:	4613      	mov	r3, r2
    25e2:	00db      	lsls	r3, r3, #3
    25e4:	4413      	add	r3, r2
    25e6:	4403      	add	r3, r0
    25e8:	3305      	adds	r3, #5
    25ea:	781b      	ldrb	r3, [r3, #0]
    25ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    25f0:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    25f2:	9b03      	ldr	r3, [sp, #12]
    25f4:	f023 030f 	bic.w	r3, r3, #15
    25f8:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    25fa:	9b01      	ldr	r3, [sp, #4]
    25fc:	685b      	ldr	r3, [r3, #4]
    25fe:	3b01      	subs	r3, #1
    2600:	f003 0307 	and.w	r3, r3, #7
    2604:	9a03      	ldr	r2, [sp, #12]
    2606:	4313      	orrs	r3, r2
    2608:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    260a:	9b01      	ldr	r3, [sp, #4]
    260c:	7a1b      	ldrb	r3, [r3, #8]
    260e:	3b01      	subs	r3, #1
    2610:	00db      	lsls	r3, r3, #3
    2612:	f003 0308 	and.w	r3, r3, #8
    2616:	9a03      	ldr	r2, [sp, #12]
    2618:	4313      	orrs	r3, r2
    261a:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    261c:	4908      	ldr	r1, [pc, #32]	; (2640 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    261e:	9b01      	ldr	r3, [sp, #4]
    2620:	681a      	ldr	r2, [r3, #0]
    2622:	4808      	ldr	r0, [pc, #32]	; (2644 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2624:	4613      	mov	r3, r2
    2626:	00db      	lsls	r3, r3, #3
    2628:	4413      	add	r3, r2
    262a:	4403      	add	r3, r0
    262c:	3305      	adds	r3, #5
    262e:	781b      	ldrb	r3, [r3, #0]
    2630:	461a      	mov	r2, r3
    2632:	9b03      	ldr	r3, [sp, #12]
    2634:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    2638:	bf00      	nop
    263a:	b004      	add	sp, #16
    263c:	4770      	bx	lr
    263e:	bf00      	nop
    2640:	40065000 	.word	0x40065000
    2644:	0000b8ec 	.word	0x0000b8ec

00002648 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2648:	b084      	sub	sp, #16
    264a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    264c:	4b10      	ldr	r3, [pc, #64]	; (2690 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    264e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2650:	4a0f      	ldr	r2, [pc, #60]	; (2690 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2656:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    2658:	4b0d      	ldr	r3, [pc, #52]	; (2690 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    265a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    265c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    265e:	9b03      	ldr	r3, [sp, #12]
    2660:	f023 030f 	bic.w	r3, r3, #15
    2664:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2666:	9b01      	ldr	r3, [sp, #4]
    2668:	685b      	ldr	r3, [r3, #4]
    266a:	3b01      	subs	r3, #1
    266c:	005b      	lsls	r3, r3, #1
    266e:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    2672:	9b01      	ldr	r3, [sp, #4]
    2674:	7a1b      	ldrb	r3, [r3, #8]
    2676:	3b01      	subs	r3, #1
    2678:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    267c:	4313      	orrs	r3, r2
    267e:	9a03      	ldr	r2, [sp, #12]
    2680:	4313      	orrs	r3, r2
    2682:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    2684:	4a02      	ldr	r2, [pc, #8]	; (2690 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2686:	9b03      	ldr	r3, [sp, #12]
    2688:	6693      	str	r3, [r2, #104]	; 0x68
}
    268a:	bf00      	nop
    268c:	b004      	add	sp, #16
    268e:	4770      	bx	lr
    2690:	40048000 	.word	0x40048000

00002694 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    2694:	b082      	sub	sp, #8
    2696:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2698:	bf00      	nop
    269a:	b002      	add	sp, #8
    269c:	4770      	bx	lr
	...

000026a0 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    26a0:	b082      	sub	sp, #8
    26a2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    26a4:	bf00      	nop
    26a6:	b002      	add	sp, #8
    26a8:	4770      	bx	lr

000026aa <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    26aa:	b082      	sub	sp, #8
    26ac:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    26ae:	bf00      	nop
    26b0:	b002      	add	sp, #8
    26b2:	4770      	bx	lr

000026b4 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    26b4:	b500      	push	{lr}
    26b6:	b083      	sub	sp, #12
    26b8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26ba:	9b01      	ldr	r3, [sp, #4]
    26bc:	2b00      	cmp	r3, #0
    26be:	d002      	beq.n	26c6 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    26c0:	9801      	ldr	r0, [sp, #4]
    26c2:	f000 f86a 	bl	279a <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    26c6:	bf00      	nop
    26c8:	b003      	add	sp, #12
    26ca:	f85d fb04 	ldr.w	pc, [sp], #4

000026ce <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    26ce:	b500      	push	{lr}
    26d0:	b083      	sub	sp, #12
    26d2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26d4:	9b01      	ldr	r3, [sp, #4]
    26d6:	2b00      	cmp	r3, #0
    26d8:	d002      	beq.n	26e0 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    26da:	9801      	ldr	r0, [sp, #4]
    26dc:	f000 f884 	bl	27e8 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    26e0:	bf00      	nop
    26e2:	b003      	add	sp, #12
    26e4:	f85d fb04 	ldr.w	pc, [sp], #4

000026e8 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    26e8:	b500      	push	{lr}
    26ea:	b089      	sub	sp, #36	; 0x24
    26ec:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    26ee:	2300      	movs	r3, #0
    26f0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    26f4:	9b01      	ldr	r3, [sp, #4]
    26f6:	2b00      	cmp	r3, #0
    26f8:	d031      	beq.n	275e <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    26fa:	4b1b      	ldr	r3, [pc, #108]	; (2768 <Clock_Ip_CompleteSOSC+0x80>)
    26fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2700:	f003 0301 	and.w	r3, r3, #1
    2704:	2b00      	cmp	r3, #0
    2706:	d02a      	beq.n	275e <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2708:	aa03      	add	r2, sp, #12
    270a:	a904      	add	r1, sp, #16
    270c:	a805      	add	r0, sp, #20
    270e:	f24c 3350 	movw	r3, #50000	; 0xc350
    2712:	f7ff fd1d 	bl	2150 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    2716:	4b14      	ldr	r3, [pc, #80]	; (2768 <Clock_Ip_CompleteSOSC+0x80>)
    2718:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    271c:	0e1b      	lsrs	r3, r3, #24
    271e:	f003 0301 	and.w	r3, r3, #1
    2722:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2724:	9a03      	ldr	r2, [sp, #12]
    2726:	a904      	add	r1, sp, #16
    2728:	ab05      	add	r3, sp, #20
    272a:	4618      	mov	r0, r3
    272c:	f7ff fd2a 	bl	2184 <Clock_Ip_TimeoutExpired>
    2730:	4603      	mov	r3, r0
    2732:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    2736:	9b06      	ldr	r3, [sp, #24]
    2738:	2b00      	cmp	r3, #0
    273a:	d106      	bne.n	274a <Clock_Ip_CompleteSOSC+0x62>
    273c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2740:	f083 0301 	eor.w	r3, r3, #1
    2744:	b2db      	uxtb	r3, r3
    2746:	2b00      	cmp	r3, #0
    2748:	d1e5      	bne.n	2716 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    274a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    274e:	2b00      	cmp	r3, #0
    2750:	d005      	beq.n	275e <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2752:	9b01      	ldr	r3, [sp, #4]
    2754:	681b      	ldr	r3, [r3, #0]
    2756:	4619      	mov	r1, r3
    2758:	2001      	movs	r0, #1
    275a:	f7ff fce9 	bl	2130 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    275e:	bf00      	nop
    2760:	b009      	add	sp, #36	; 0x24
    2762:	f85d fb04 	ldr.w	pc, [sp], #4
    2766:	bf00      	nop
    2768:	40064000 	.word	0x40064000

0000276c <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    276c:	b500      	push	{lr}
    276e:	b083      	sub	sp, #12
    2770:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    2772:	9801      	ldr	r0, [sp, #4]
    2774:	f000 f8c0 	bl	28f8 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2778:	bf00      	nop
    277a:	b003      	add	sp, #12
    277c:	f85d fb04 	ldr.w	pc, [sp], #4

00002780 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2780:	b500      	push	{lr}
    2782:	b083      	sub	sp, #12
    2784:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2786:	9b01      	ldr	r3, [sp, #4]
    2788:	2b00      	cmp	r3, #0
    278a:	d002      	beq.n	2792 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    278c:	9801      	ldr	r0, [sp, #4]
    278e:	f000 f8c3 	bl	2918 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2792:	bf00      	nop
    2794:	b003      	add	sp, #12
    2796:	f85d fb04 	ldr.w	pc, [sp], #4

0000279a <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    279a:	b082      	sub	sp, #8
    279c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    279e:	4b11      	ldr	r3, [pc, #68]	; (27e4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27a4:	4a0f      	ldr	r2, [pc, #60]	; (27e4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    27aa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    27ae:	4b0d      	ldr	r3, [pc, #52]	; (27e4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27b4:	4a0b      	ldr	r2, [pc, #44]	; (27e4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    27ba:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    27be:	4b09      	ldr	r3, [pc, #36]	; (27e4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27c0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27c4:	4a07      	ldr	r2, [pc, #28]	; (27e4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27c6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    27ca:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    27ce:	4b05      	ldr	r3, [pc, #20]	; (27e4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27d0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27d4:	4a03      	ldr	r2, [pc, #12]	; (27e4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27d6:	f023 0301 	bic.w	r3, r3, #1
    27da:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    27de:	bf00      	nop
    27e0:	b002      	add	sp, #8
    27e2:	4770      	bx	lr
    27e4:	40064000 	.word	0x40064000

000027e8 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    27e8:	b082      	sub	sp, #8
    27ea:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    27ec:	9b01      	ldr	r3, [sp, #4]
    27ee:	891b      	ldrh	r3, [r3, #8]
    27f0:	2b01      	cmp	r3, #1
    27f2:	d174      	bne.n	28de <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    27f4:	9b01      	ldr	r3, [sp, #4]
    27f6:	7bdb      	ldrb	r3, [r3, #15]
    27f8:	2b00      	cmp	r3, #0
    27fa:	d002      	beq.n	2802 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    27fc:	2b01      	cmp	r3, #1
    27fe:	d009      	beq.n	2814 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    2800:	e011      	b.n	2826 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    2802:	4b39      	ldr	r3, [pc, #228]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2804:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2808:	4a37      	ldr	r2, [pc, #220]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    280a:	f023 0308 	bic.w	r3, r3, #8
    280e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2812:	e008      	b.n	2826 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    2814:	4b34      	ldr	r3, [pc, #208]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2816:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    281a:	4a33      	ldr	r2, [pc, #204]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    281c:	f043 0308 	orr.w	r3, r3, #8
    2820:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2824:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    2826:	4b30      	ldr	r3, [pc, #192]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2828:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    282c:	4a2e      	ldr	r2, [pc, #184]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    282e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    2832:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    2836:	9b01      	ldr	r3, [sp, #4]
    2838:	685b      	ldr	r3, [r3, #4]
    283a:	4a2c      	ldr	r2, [pc, #176]	; (28ec <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    283c:	4293      	cmp	r3, r2
    283e:	d90d      	bls.n	285c <Clock_Ip_SetSOSC_TrustedCall+0x74>
    2840:	9b01      	ldr	r3, [sp, #4]
    2842:	685b      	ldr	r3, [r3, #4]
    2844:	4a2a      	ldr	r2, [pc, #168]	; (28f0 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    2846:	4293      	cmp	r3, r2
    2848:	d208      	bcs.n	285c <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    284a:	4b27      	ldr	r3, [pc, #156]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    284c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2850:	4a25      	ldr	r2, [pc, #148]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2852:	f043 0320 	orr.w	r3, r3, #32
    2856:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    285a:	e007      	b.n	286c <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    285c:	4b22      	ldr	r3, [pc, #136]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    285e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2862:	4a21      	ldr	r2, [pc, #132]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2864:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    2868:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    286c:	9b01      	ldr	r3, [sp, #4]
    286e:	7b1b      	ldrb	r3, [r3, #12]
    2870:	2b00      	cmp	r3, #0
    2872:	d108      	bne.n	2886 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    2874:	4b1c      	ldr	r3, [pc, #112]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2876:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    287a:	4a1b      	ldr	r2, [pc, #108]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    287c:	f043 0304 	orr.w	r3, r3, #4
    2880:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2884:	e007      	b.n	2896 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    2886:	4b18      	ldr	r3, [pc, #96]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2888:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    288c:	4a16      	ldr	r2, [pc, #88]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    288e:	f023 0304 	bic.w	r3, r3, #4
    2892:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    2896:	9b01      	ldr	r3, [sp, #4]
    2898:	7c1b      	ldrb	r3, [r3, #16]
    289a:	2b02      	cmp	r3, #2
    289c:	d011      	beq.n	28c2 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    289e:	2b02      	cmp	r3, #2
    28a0:	dc14      	bgt.n	28cc <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    28a2:	2b00      	cmp	r3, #0
    28a4:	d002      	beq.n	28ac <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    28a6:	2b01      	cmp	r3, #1
    28a8:	d005      	beq.n	28b6 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    28aa:	e00f      	b.n	28cc <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    28ac:	4b0e      	ldr	r3, [pc, #56]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28ae:	2201      	movs	r2, #1
    28b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    28b4:	e014      	b.n	28e0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    28b6:	4b0c      	ldr	r3, [pc, #48]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28b8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    28bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    28c0:	e00e      	b.n	28e0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    28c2:	4b09      	ldr	r3, [pc, #36]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28c4:	4a0b      	ldr	r2, [pc, #44]	; (28f4 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    28c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    28ca:	e009      	b.n	28e0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    28cc:	4b06      	ldr	r3, [pc, #24]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    28d2:	4a05      	ldr	r2, [pc, #20]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28d4:	f043 0301 	orr.w	r3, r3, #1
    28d8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    28dc:	e000      	b.n	28e0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    28de:	bf00      	nop
}
    28e0:	bf00      	nop
    28e2:	b002      	add	sp, #8
    28e4:	4770      	bx	lr
    28e6:	bf00      	nop
    28e8:	40064000 	.word	0x40064000
    28ec:	003d08ff 	.word	0x003d08ff
    28f0:	007a1200 	.word	0x007a1200
    28f4:	00030001 	.word	0x00030001

000028f8 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    28f8:	b082      	sub	sp, #8
    28fa:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    28fc:	4b05      	ldr	r3, [pc, #20]	; (2914 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    28fe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2902:	4a04      	ldr	r2, [pc, #16]	; (2914 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2904:	f023 0301 	bic.w	r3, r3, #1
    2908:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    290c:	bf00      	nop
    290e:	b002      	add	sp, #8
    2910:	4770      	bx	lr
    2912:	bf00      	nop
    2914:	40064000 	.word	0x40064000

00002918 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2918:	b082      	sub	sp, #8
    291a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    291c:	9b01      	ldr	r3, [sp, #4]
    291e:	891b      	ldrh	r3, [r3, #8]
    2920:	2b01      	cmp	r3, #1
    2922:	d107      	bne.n	2934 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2924:	4b05      	ldr	r3, [pc, #20]	; (293c <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2926:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    292a:	4a04      	ldr	r2, [pc, #16]	; (293c <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    292c:	f043 0301 	orr.w	r3, r3, #1
    2930:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    2934:	bf00      	nop
    2936:	b002      	add	sp, #8
    2938:	4770      	bx	lr
    293a:	bf00      	nop
    293c:	40064000 	.word	0x40064000

00002940 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    2940:	b082      	sub	sp, #8
    2942:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2944:	bf00      	nop
    2946:	b002      	add	sp, #8
    2948:	4770      	bx	lr

0000294a <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    294a:	b082      	sub	sp, #8
    294c:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    294e:	2300      	movs	r3, #0
}
    2950:	4618      	mov	r0, r3
    2952:	b002      	add	sp, #8
    2954:	4770      	bx	lr

00002956 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    2956:	b082      	sub	sp, #8
    2958:	9001      	str	r0, [sp, #4]
    295a:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    295c:	bf00      	nop
    295e:	b002      	add	sp, #8
    2960:	4770      	bx	lr
	...

00002964 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    2964:	b082      	sub	sp, #8
    2966:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2968:	bf00      	nop
    296a:	b002      	add	sp, #8
    296c:	4770      	bx	lr

0000296e <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    296e:	b082      	sub	sp, #8
    2970:	9001      	str	r0, [sp, #4]
    2972:	460b      	mov	r3, r1
    2974:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    2978:	bf00      	nop
    297a:	b002      	add	sp, #8
    297c:	4770      	bx	lr

0000297e <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    297e:	b500      	push	{lr}
    2980:	b083      	sub	sp, #12
    2982:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2984:	9b01      	ldr	r3, [sp, #4]
    2986:	2b00      	cmp	r3, #0
    2988:	d002      	beq.n	2990 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    298a:	9801      	ldr	r0, [sp, #4]
    298c:	f000 f8e7 	bl	2b5e <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2990:	bf00      	nop
    2992:	b003      	add	sp, #12
    2994:	f85d fb04 	ldr.w	pc, [sp], #4

00002998 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2998:	b500      	push	{lr}
    299a:	b085      	sub	sp, #20
    299c:	9001      	str	r0, [sp, #4]
    299e:	460b      	mov	r3, r1
    29a0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    29a4:	9b01      	ldr	r3, [sp, #4]
    29a6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    29a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    29ac:	2b00      	cmp	r3, #0
    29ae:	d003      	beq.n	29b8 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    29b0:	2300      	movs	r3, #0
    29b2:	f8ad 300c 	strh.w	r3, [sp, #12]
    29b6:	e002      	b.n	29be <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    29b8:	2301      	movs	r3, #1
    29ba:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    29be:	ab02      	add	r3, sp, #8
    29c0:	4618      	mov	r0, r3
    29c2:	f7ff ffdc 	bl	297e <Clock_Ip_ClockSetSimLPO1KEnable>
}
    29c6:	bf00      	nop
    29c8:	b005      	add	sp, #20
    29ca:	f85d fb04 	ldr.w	pc, [sp], #4

000029ce <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    29ce:	b500      	push	{lr}
    29d0:	b083      	sub	sp, #12
    29d2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    29d4:	9b01      	ldr	r3, [sp, #4]
    29d6:	2b00      	cmp	r3, #0
    29d8:	d002      	beq.n	29e0 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    29da:	9801      	ldr	r0, [sp, #4]
    29dc:	f000 f8d6 	bl	2b8c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    29e0:	bf00      	nop
    29e2:	b003      	add	sp, #12
    29e4:	f85d fb04 	ldr.w	pc, [sp], #4

000029e8 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    29e8:	b500      	push	{lr}
    29ea:	b085      	sub	sp, #20
    29ec:	9001      	str	r0, [sp, #4]
    29ee:	460b      	mov	r3, r1
    29f0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    29f4:	9b01      	ldr	r3, [sp, #4]
    29f6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    29f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    29fc:	2b00      	cmp	r3, #0
    29fe:	d003      	beq.n	2a08 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    2a00:	2300      	movs	r3, #0
    2a02:	f8ad 300c 	strh.w	r3, [sp, #12]
    2a06:	e002      	b.n	2a0e <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2a08:	2301      	movs	r3, #1
    2a0a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    2a0e:	ab02      	add	r3, sp, #8
    2a10:	4618      	mov	r0, r3
    2a12:	f7ff ffdc 	bl	29ce <Clock_Ip_ClockSetSimLPO32KEnable>
}
    2a16:	bf00      	nop
    2a18:	b005      	add	sp, #20
    2a1a:	f85d fb04 	ldr.w	pc, [sp], #4

00002a1e <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    2a1e:	b500      	push	{lr}
    2a20:	b083      	sub	sp, #12
    2a22:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a24:	9b01      	ldr	r3, [sp, #4]
    2a26:	2b00      	cmp	r3, #0
    2a28:	d002      	beq.n	2a30 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    2a2a:	9801      	ldr	r0, [sp, #4]
    2a2c:	f000 f8c6 	bl	2bbc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a30:	bf00      	nop
    2a32:	b003      	add	sp, #12
    2a34:	f85d fb04 	ldr.w	pc, [sp], #4

00002a38 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a38:	b500      	push	{lr}
    2a3a:	b085      	sub	sp, #20
    2a3c:	9001      	str	r0, [sp, #4]
    2a3e:	460b      	mov	r3, r1
    2a40:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2a44:	9b01      	ldr	r3, [sp, #4]
    2a46:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2a48:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2a4c:	2b00      	cmp	r3, #0
    2a4e:	d003      	beq.n	2a58 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    2a50:	2300      	movs	r3, #0
    2a52:	f8ad 300c 	strh.w	r3, [sp, #12]
    2a56:	e002      	b.n	2a5e <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2a58:	2301      	movs	r3, #1
    2a5a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    2a5e:	ab02      	add	r3, sp, #8
    2a60:	4618      	mov	r0, r3
    2a62:	f7ff ffdc 	bl	2a1e <Clock_Ip_ClockSetSimClkoutEnable>
}
    2a66:	bf00      	nop
    2a68:	b005      	add	sp, #20
    2a6a:	f85d fb04 	ldr.w	pc, [sp], #4

00002a6e <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    2a6e:	b500      	push	{lr}
    2a70:	b083      	sub	sp, #12
    2a72:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a74:	9b01      	ldr	r3, [sp, #4]
    2a76:	2b00      	cmp	r3, #0
    2a78:	d002      	beq.n	2a80 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    2a7a:	9801      	ldr	r0, [sp, #4]
    2a7c:	f000 f8b6 	bl	2bec <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a80:	bf00      	nop
    2a82:	b003      	add	sp, #12
    2a84:	f85d fb04 	ldr.w	pc, [sp], #4

00002a88 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a88:	b500      	push	{lr}
    2a8a:	b085      	sub	sp, #20
    2a8c:	9001      	str	r0, [sp, #4]
    2a8e:	460b      	mov	r3, r1
    2a90:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2a94:	9b01      	ldr	r3, [sp, #4]
    2a96:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2a98:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2a9c:	2b00      	cmp	r3, #0
    2a9e:	d003      	beq.n	2aa8 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    2aa0:	2300      	movs	r3, #0
    2aa2:	f8ad 300c 	strh.w	r3, [sp, #12]
    2aa6:	e002      	b.n	2aae <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2aa8:	2301      	movs	r3, #1
    2aaa:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    2aae:	ab02      	add	r3, sp, #8
    2ab0:	4618      	mov	r0, r3
    2ab2:	f7ff ffdc 	bl	2a6e <Clock_Ip_ClockSetPccCgcEnable>
}
    2ab6:	bf00      	nop
    2ab8:	b005      	add	sp, #20
    2aba:	f85d fb04 	ldr.w	pc, [sp], #4

00002abe <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    2abe:	b500      	push	{lr}
    2ac0:	b083      	sub	sp, #12
    2ac2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ac4:	9b01      	ldr	r3, [sp, #4]
    2ac6:	2b00      	cmp	r3, #0
    2ac8:	d002      	beq.n	2ad0 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    2aca:	9801      	ldr	r0, [sp, #4]
    2acc:	f000 f8bc 	bl	2c48 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ad0:	bf00      	nop
    2ad2:	b003      	add	sp, #12
    2ad4:	f85d fb04 	ldr.w	pc, [sp], #4

00002ad8 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    2ad8:	b500      	push	{lr}
    2ada:	b085      	sub	sp, #20
    2adc:	9001      	str	r0, [sp, #4]
    2ade:	460b      	mov	r3, r1
    2ae0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2ae4:	9b01      	ldr	r3, [sp, #4]
    2ae6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2ae8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2aec:	2b00      	cmp	r3, #0
    2aee:	d003      	beq.n	2af8 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    2af0:	2300      	movs	r3, #0
    2af2:	f8ad 300c 	strh.w	r3, [sp, #12]
    2af6:	e002      	b.n	2afe <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2af8:	2301      	movs	r3, #1
    2afa:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    2afe:	ab02      	add	r3, sp, #8
    2b00:	4618      	mov	r0, r3
    2b02:	f7ff ffdc 	bl	2abe <Clock_Ip_ClockSetSimGate>
}
    2b06:	bf00      	nop
    2b08:	b005      	add	sp, #20
    2b0a:	f85d fb04 	ldr.w	pc, [sp], #4

00002b0e <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    2b0e:	b500      	push	{lr}
    2b10:	b083      	sub	sp, #12
    2b12:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b14:	9b01      	ldr	r3, [sp, #4]
    2b16:	2b00      	cmp	r3, #0
    2b18:	d002      	beq.n	2b20 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    2b1a:	9801      	ldr	r0, [sp, #4]
    2b1c:	f000 f8c0 	bl	2ca0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b20:	bf00      	nop
    2b22:	b003      	add	sp, #12
    2b24:	f85d fb04 	ldr.w	pc, [sp], #4

00002b28 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2b28:	b500      	push	{lr}
    2b2a:	b085      	sub	sp, #20
    2b2c:	9001      	str	r0, [sp, #4]
    2b2e:	460b      	mov	r3, r1
    2b30:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2b34:	9b01      	ldr	r3, [sp, #4]
    2b36:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2b38:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2b3c:	2b00      	cmp	r3, #0
    2b3e:	d003      	beq.n	2b48 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    2b40:	2300      	movs	r3, #0
    2b42:	f8ad 300c 	strh.w	r3, [sp, #12]
    2b46:	e002      	b.n	2b4e <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2b48:	2301      	movs	r3, #1
    2b4a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    2b4e:	ab02      	add	r3, sp, #8
    2b50:	4618      	mov	r0, r3
    2b52:	f7ff ffdc 	bl	2b0e <Clock_Ip_ClockSetSimTraceEnable>
}
    2b56:	bf00      	nop
    2b58:	b005      	add	sp, #20
    2b5a:	f85d fb04 	ldr.w	pc, [sp], #4

00002b5e <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2b5e:	b084      	sub	sp, #16
    2b60:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2b62:	4b09      	ldr	r3, [pc, #36]	; (2b88 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2b64:	691b      	ldr	r3, [r3, #16]
    2b66:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    2b68:	9b03      	ldr	r3, [sp, #12]
    2b6a:	f023 0301 	bic.w	r3, r3, #1
    2b6e:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    2b70:	9b01      	ldr	r3, [sp, #4]
    2b72:	889b      	ldrh	r3, [r3, #4]
    2b74:	461a      	mov	r2, r3
    2b76:	9b03      	ldr	r3, [sp, #12]
    2b78:	4313      	orrs	r3, r2
    2b7a:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2b7c:	4a02      	ldr	r2, [pc, #8]	; (2b88 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2b7e:	9b03      	ldr	r3, [sp, #12]
    2b80:	6113      	str	r3, [r2, #16]
}
    2b82:	bf00      	nop
    2b84:	b004      	add	sp, #16
    2b86:	4770      	bx	lr
    2b88:	40048000 	.word	0x40048000

00002b8c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2b8c:	b084      	sub	sp, #16
    2b8e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2b90:	4b09      	ldr	r3, [pc, #36]	; (2bb8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2b92:	691b      	ldr	r3, [r3, #16]
    2b94:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    2b96:	9b03      	ldr	r3, [sp, #12]
    2b98:	f023 0302 	bic.w	r3, r3, #2
    2b9c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    2b9e:	9b01      	ldr	r3, [sp, #4]
    2ba0:	889b      	ldrh	r3, [r3, #4]
    2ba2:	005b      	lsls	r3, r3, #1
    2ba4:	9a03      	ldr	r2, [sp, #12]
    2ba6:	4313      	orrs	r3, r2
    2ba8:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2baa:	4a03      	ldr	r2, [pc, #12]	; (2bb8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2bac:	9b03      	ldr	r3, [sp, #12]
    2bae:	6113      	str	r3, [r2, #16]
}
    2bb0:	bf00      	nop
    2bb2:	b004      	add	sp, #16
    2bb4:	4770      	bx	lr
    2bb6:	bf00      	nop
    2bb8:	40048000 	.word	0x40048000

00002bbc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2bbc:	b084      	sub	sp, #16
    2bbe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2bc0:	4b09      	ldr	r3, [pc, #36]	; (2be8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2bc2:	685b      	ldr	r3, [r3, #4]
    2bc4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    2bc6:	9b03      	ldr	r3, [sp, #12]
    2bc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2bcc:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    2bce:	9b01      	ldr	r3, [sp, #4]
    2bd0:	889b      	ldrh	r3, [r3, #4]
    2bd2:	02db      	lsls	r3, r3, #11
    2bd4:	9a03      	ldr	r2, [sp, #12]
    2bd6:	4313      	orrs	r3, r2
    2bd8:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2bda:	4a03      	ldr	r2, [pc, #12]	; (2be8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2bdc:	9b03      	ldr	r3, [sp, #12]
    2bde:	6053      	str	r3, [r2, #4]
}
    2be0:	bf00      	nop
    2be2:	b004      	add	sp, #16
    2be4:	4770      	bx	lr
    2be6:	bf00      	nop
    2be8:	40048000 	.word	0x40048000

00002bec <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2bec:	b084      	sub	sp, #16
    2bee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    2bf0:	4913      	ldr	r1, [pc, #76]	; (2c40 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2bf2:	9b01      	ldr	r3, [sp, #4]
    2bf4:	681a      	ldr	r2, [r3, #0]
    2bf6:	4813      	ldr	r0, [pc, #76]	; (2c44 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2bf8:	4613      	mov	r3, r2
    2bfa:	00db      	lsls	r3, r3, #3
    2bfc:	4413      	add	r3, r2
    2bfe:	4403      	add	r3, r0
    2c00:	3306      	adds	r3, #6
    2c02:	781b      	ldrb	r3, [r3, #0]
    2c04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2c08:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    2c0a:	9b03      	ldr	r3, [sp, #12]
    2c0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    2c10:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    2c12:	9b01      	ldr	r3, [sp, #4]
    2c14:	889b      	ldrh	r3, [r3, #4]
    2c16:	079b      	lsls	r3, r3, #30
    2c18:	9a03      	ldr	r2, [sp, #12]
    2c1a:	4313      	orrs	r3, r2
    2c1c:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    2c1e:	4908      	ldr	r1, [pc, #32]	; (2c40 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2c20:	9b01      	ldr	r3, [sp, #4]
    2c22:	681a      	ldr	r2, [r3, #0]
    2c24:	4807      	ldr	r0, [pc, #28]	; (2c44 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2c26:	4613      	mov	r3, r2
    2c28:	00db      	lsls	r3, r3, #3
    2c2a:	4413      	add	r3, r2
    2c2c:	4403      	add	r3, r0
    2c2e:	3306      	adds	r3, #6
    2c30:	781b      	ldrb	r3, [r3, #0]
    2c32:	461a      	mov	r2, r3
    2c34:	9b03      	ldr	r3, [sp, #12]
    2c36:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    2c3a:	bf00      	nop
    2c3c:	b004      	add	sp, #16
    2c3e:	4770      	bx	lr
    2c40:	40065000 	.word	0x40065000
    2c44:	0000b8ec 	.word	0x0000b8ec

00002c48 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2c48:	b086      	sub	sp, #24
    2c4a:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    2c4c:	9b01      	ldr	r3, [sp, #4]
    2c4e:	889b      	ldrh	r3, [r3, #4]
    2c50:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    2c52:	9b01      	ldr	r3, [sp, #4]
    2c54:	681a      	ldr	r2, [r3, #0]
    2c56:	4910      	ldr	r1, [pc, #64]	; (2c98 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    2c58:	4613      	mov	r3, r2
    2c5a:	00db      	lsls	r3, r3, #3
    2c5c:	4413      	add	r3, r2
    2c5e:	440b      	add	r3, r1
    2c60:	3306      	adds	r3, #6
    2c62:	781b      	ldrb	r3, [r3, #0]
    2c64:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    2c66:	4b0d      	ldr	r3, [pc, #52]	; (2c9c <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2c6a:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    2c6c:	2201      	movs	r2, #1
    2c6e:	9b04      	ldr	r3, [sp, #16]
    2c70:	fa02 f303 	lsl.w	r3, r2, r3
    2c74:	43db      	mvns	r3, r3
    2c76:	9a03      	ldr	r2, [sp, #12]
    2c78:	4013      	ands	r3, r2
    2c7a:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    2c7c:	9a05      	ldr	r2, [sp, #20]
    2c7e:	9b04      	ldr	r3, [sp, #16]
    2c80:	fa02 f303 	lsl.w	r3, r2, r3
    2c84:	9a03      	ldr	r2, [sp, #12]
    2c86:	4313      	orrs	r3, r2
    2c88:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    2c8a:	4a04      	ldr	r2, [pc, #16]	; (2c9c <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2c8c:	9b03      	ldr	r3, [sp, #12]
    2c8e:	6413      	str	r3, [r2, #64]	; 0x40
}
    2c90:	bf00      	nop
    2c92:	b006      	add	sp, #24
    2c94:	4770      	bx	lr
    2c96:	bf00      	nop
    2c98:	0000b8ec 	.word	0x0000b8ec
    2c9c:	40048000 	.word	0x40048000

00002ca0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2ca0:	b084      	sub	sp, #16
    2ca2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    2ca4:	4b0a      	ldr	r3, [pc, #40]	; (2cd0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2ca8:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    2caa:	9b01      	ldr	r3, [sp, #4]
    2cac:	889b      	ldrh	r3, [r3, #4]
    2cae:	2b01      	cmp	r3, #1
    2cb0:	d104      	bne.n	2cbc <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    2cb2:	9b03      	ldr	r3, [sp, #12]
    2cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2cb8:	9303      	str	r3, [sp, #12]
    2cba:	e003      	b.n	2cc4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2cbc:	9b03      	ldr	r3, [sp, #12]
    2cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2cc2:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    2cc4:	4a02      	ldr	r2, [pc, #8]	; (2cd0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2cc6:	9b03      	ldr	r3, [sp, #12]
    2cc8:	6693      	str	r3, [r2, #104]	; 0x68
}
    2cca:	bf00      	nop
    2ccc:	b004      	add	sp, #16
    2cce:	4770      	bx	lr
    2cd0:	40048000 	.word	0x40048000

00002cd4 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    2cd4:	b082      	sub	sp, #8
    2cd6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2cd8:	bf00      	nop
    2cda:	b002      	add	sp, #8
    2cdc:	4770      	bx	lr

00002cde <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    2cde:	b082      	sub	sp, #8
    2ce0:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2ce2:	bf00      	nop
    2ce4:	b002      	add	sp, #8
    2ce6:	4770      	bx	lr

00002ce8 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2ce8:	b500      	push	{lr}
    2cea:	b083      	sub	sp, #12
    2cec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cee:	9b01      	ldr	r3, [sp, #4]
    2cf0:	2b00      	cmp	r3, #0
    2cf2:	d002      	beq.n	2cfa <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    2cf4:	9801      	ldr	r0, [sp, #4]
    2cf6:	f000 f8d1 	bl	2e9c <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cfa:	bf00      	nop
    2cfc:	b003      	add	sp, #12
    2cfe:	f85d fb04 	ldr.w	pc, [sp], #4

00002d02 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2d02:	b500      	push	{lr}
    2d04:	b083      	sub	sp, #12
    2d06:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d08:	9b01      	ldr	r3, [sp, #4]
    2d0a:	2b00      	cmp	r3, #0
    2d0c:	d002      	beq.n	2d14 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    2d0e:	9801      	ldr	r0, [sp, #4]
    2d10:	f000 f950 	bl	2fb4 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d14:	bf00      	nop
    2d16:	b003      	add	sp, #12
    2d18:	f85d fb04 	ldr.w	pc, [sp], #4

00002d1c <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    2d1c:	b500      	push	{lr}
    2d1e:	b083      	sub	sp, #12
    2d20:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    2d22:	9801      	ldr	r0, [sp, #4]
    2d24:	f000 f98e 	bl	3044 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2d28:	bf00      	nop
    2d2a:	b003      	add	sp, #12
    2d2c:	f85d fb04 	ldr.w	pc, [sp], #4

00002d30 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2d30:	b500      	push	{lr}
    2d32:	b083      	sub	sp, #12
    2d34:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d36:	9b01      	ldr	r3, [sp, #4]
    2d38:	2b00      	cmp	r3, #0
    2d3a:	d002      	beq.n	2d42 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    2d3c:	9801      	ldr	r0, [sp, #4]
    2d3e:	f000 f999 	bl	3074 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d42:	bf00      	nop
    2d44:	b003      	add	sp, #12
    2d46:	f85d fb04 	ldr.w	pc, [sp], #4

00002d4a <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2d4a:	b500      	push	{lr}
    2d4c:	b083      	sub	sp, #12
    2d4e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d50:	9b01      	ldr	r3, [sp, #4]
    2d52:	2b00      	cmp	r3, #0
    2d54:	d002      	beq.n	2d5c <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    2d56:	9801      	ldr	r0, [sp, #4]
    2d58:	f000 f9b0 	bl	30bc <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d5c:	bf00      	nop
    2d5e:	b003      	add	sp, #12
    2d60:	f85d fb04 	ldr.w	pc, [sp], #4

00002d64 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    2d64:	b500      	push	{lr}
    2d66:	b083      	sub	sp, #12
    2d68:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    2d6a:	9801      	ldr	r0, [sp, #4]
    2d6c:	f000 f9ba 	bl	30e4 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2d70:	bf00      	nop
    2d72:	b003      	add	sp, #12
    2d74:	f85d fb04 	ldr.w	pc, [sp], #4

00002d78 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2d78:	b500      	push	{lr}
    2d7a:	b083      	sub	sp, #12
    2d7c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d7e:	9b01      	ldr	r3, [sp, #4]
    2d80:	2b00      	cmp	r3, #0
    2d82:	d002      	beq.n	2d8a <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    2d84:	9801      	ldr	r0, [sp, #4]
    2d86:	f000 f9bd 	bl	3104 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d8a:	bf00      	nop
    2d8c:	b003      	add	sp, #12
    2d8e:	f85d fb04 	ldr.w	pc, [sp], #4

00002d92 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2d92:	b500      	push	{lr}
    2d94:	b083      	sub	sp, #12
    2d96:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d98:	9b01      	ldr	r3, [sp, #4]
    2d9a:	2b00      	cmp	r3, #0
    2d9c:	d002      	beq.n	2da4 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    2d9e:	9801      	ldr	r0, [sp, #4]
    2da0:	f000 f9d4 	bl	314c <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2da4:	bf00      	nop
    2da6:	b003      	add	sp, #12
    2da8:	f85d fb04 	ldr.w	pc, [sp], #4

00002dac <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    2dac:	b500      	push	{lr}
    2dae:	b083      	sub	sp, #12
    2db0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    2db2:	9801      	ldr	r0, [sp, #4]
    2db4:	f000 f9de 	bl	3174 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2db8:	bf00      	nop
    2dba:	b003      	add	sp, #12
    2dbc:	f85d fb04 	ldr.w	pc, [sp], #4

00002dc0 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    2dc0:	b500      	push	{lr}
    2dc2:	b089      	sub	sp, #36	; 0x24
    2dc4:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    2dc6:	2300      	movs	r3, #0
    2dc8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    2dcc:	4b20      	ldr	r3, [pc, #128]	; (2e50 <SetInputSouceSytemClock+0x90>)
    2dce:	695b      	ldr	r3, [r3, #20]
    2dd0:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    2dd2:	9b06      	ldr	r3, [sp, #24]
    2dd4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    2dd8:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    2dda:	9b01      	ldr	r3, [sp, #4]
    2ddc:	061b      	lsls	r3, r3, #24
    2dde:	9a06      	ldr	r2, [sp, #24]
    2de0:	4313      	orrs	r3, r2
    2de2:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    2de4:	4a1a      	ldr	r2, [pc, #104]	; (2e50 <SetInputSouceSytemClock+0x90>)
    2de6:	9b06      	ldr	r3, [sp, #24]
    2de8:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2dea:	aa02      	add	r2, sp, #8
    2dec:	a903      	add	r1, sp, #12
    2dee:	a804      	add	r0, sp, #16
    2df0:	f24c 3350 	movw	r3, #50000	; 0xc350
    2df4:	f7ff f9ac 	bl	2150 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    2df8:	4b15      	ldr	r3, [pc, #84]	; (2e50 <SetInputSouceSytemClock+0x90>)
    2dfa:	691b      	ldr	r3, [r3, #16]
    2dfc:	0e1b      	lsrs	r3, r3, #24
    2dfe:	f003 030f 	and.w	r3, r3, #15
    2e02:	9a01      	ldr	r2, [sp, #4]
    2e04:	429a      	cmp	r2, r3
    2e06:	bf0c      	ite	eq
    2e08:	2301      	moveq	r3, #1
    2e0a:	2300      	movne	r3, #0
    2e0c:	b2db      	uxtb	r3, r3
    2e0e:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2e10:	9a02      	ldr	r2, [sp, #8]
    2e12:	a903      	add	r1, sp, #12
    2e14:	ab04      	add	r3, sp, #16
    2e16:	4618      	mov	r0, r3
    2e18:	f7ff f9b4 	bl	2184 <Clock_Ip_TimeoutExpired>
    2e1c:	4603      	mov	r3, r0
    2e1e:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    2e22:	9b05      	ldr	r3, [sp, #20]
    2e24:	2b00      	cmp	r3, #0
    2e26:	d106      	bne.n	2e36 <SetInputSouceSytemClock+0x76>
    2e28:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e2c:	f083 0301 	eor.w	r3, r3, #1
    2e30:	b2db      	uxtb	r3, r3
    2e32:	2b00      	cmp	r3, #0
    2e34:	d1e0      	bne.n	2df8 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    2e36:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e3a:	2b00      	cmp	r3, #0
    2e3c:	d003      	beq.n	2e46 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    2e3e:	2105      	movs	r1, #5
    2e40:	2001      	movs	r0, #1
    2e42:	f7ff f975 	bl	2130 <Clock_Ip_ReportClockErrors>
    }
}
    2e46:	bf00      	nop
    2e48:	b009      	add	sp, #36	; 0x24
    2e4a:	f85d fb04 	ldr.w	pc, [sp], #4
    2e4e:	bf00      	nop
    2e50:	40064000 	.word	0x40064000

00002e54 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2e54:	b500      	push	{lr}
    2e56:	b083      	sub	sp, #12
    2e58:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e5a:	9b01      	ldr	r3, [sp, #4]
    2e5c:	2b00      	cmp	r3, #0
    2e5e:	d002      	beq.n	2e66 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    2e60:	9801      	ldr	r0, [sp, #4]
    2e62:	f000 f997 	bl	3194 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e66:	bf00      	nop
    2e68:	b003      	add	sp, #12
    2e6a:	f85d fb04 	ldr.w	pc, [sp], #4

00002e6e <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2e6e:	b500      	push	{lr}
    2e70:	b083      	sub	sp, #12
    2e72:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e74:	9b01      	ldr	r3, [sp, #4]
    2e76:	2b00      	cmp	r3, #0
    2e78:	d002      	beq.n	2e80 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    2e7a:	9801      	ldr	r0, [sp, #4]
    2e7c:	f000 fa7e 	bl	337c <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e80:	bf00      	nop
    2e82:	b003      	add	sp, #12
    2e84:	f85d fb04 	ldr.w	pc, [sp], #4

00002e88 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    2e88:	b500      	push	{lr}
    2e8a:	b083      	sub	sp, #12
    2e8c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    2e8e:	9801      	ldr	r0, [sp, #4]
    2e90:	f000 fab8 	bl	3404 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2e94:	bf00      	nop
    2e96:	b003      	add	sp, #12
    2e98:	f85d fb04 	ldr.w	pc, [sp], #4

00002e9c <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2e9c:	b500      	push	{lr}
    2e9e:	b08b      	sub	sp, #44	; 0x2c
    2ea0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2ea2:	2300      	movs	r3, #0
    2ea4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    2ea8:	9b01      	ldr	r3, [sp, #4]
    2eaa:	2b00      	cmp	r3, #0
    2eac:	d10b      	bne.n	2ec6 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    2eae:	2305      	movs	r3, #5
    2eb0:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    2eb2:	2301      	movs	r3, #1
    2eb4:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    2eb8:	2301      	movs	r3, #1
    2eba:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    2ebe:	2301      	movs	r3, #1
    2ec0:	f88d 3010 	strb.w	r3, [sp, #16]
    2ec4:	e00e      	b.n	2ee4 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    2ec6:	9b01      	ldr	r3, [sp, #4]
    2ec8:	681b      	ldr	r3, [r3, #0]
    2eca:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    2ecc:	9b01      	ldr	r3, [sp, #4]
    2ece:	79db      	ldrb	r3, [r3, #7]
    2ed0:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    2ed4:	9b01      	ldr	r3, [sp, #4]
    2ed6:	889b      	ldrh	r3, [r3, #4]
    2ed8:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    2edc:	9b01      	ldr	r3, [sp, #4]
    2ede:	7a1b      	ldrb	r3, [r3, #8]
    2ee0:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2ee4:	4b32      	ldr	r3, [pc, #200]	; (2fb0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ee6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2eea:	4a31      	ldr	r2, [pc, #196]	; (2fb0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2eec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2ef0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    2ef4:	4b2e      	ldr	r3, [pc, #184]	; (2fb0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ef6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2efa:	4a2d      	ldr	r2, [pc, #180]	; (2fb0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2efc:	f023 0301 	bic.w	r3, r3, #1
    2f00:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2f04:	4b2a      	ldr	r3, [pc, #168]	; (2fb0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f0a:	4a29      	ldr	r2, [pc, #164]	; (2fb0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f0c:	f023 0304 	bic.w	r3, r3, #4
    2f10:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    2f14:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    2f18:	2b01      	cmp	r3, #1
    2f1a:	d144      	bne.n	2fa6 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    2f1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2f20:	4a23      	ldr	r2, [pc, #140]	; (2fb0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f22:	f003 0301 	and.w	r3, r3, #1
    2f26:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2f2a:	4b21      	ldr	r3, [pc, #132]	; (2fb0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f30:	4a1f      	ldr	r2, [pc, #124]	; (2fb0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f32:	f043 0301 	orr.w	r3, r3, #1
    2f36:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    2f3a:	4b1d      	ldr	r3, [pc, #116]	; (2fb0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f3c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2f40:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2f44:	009b      	lsls	r3, r3, #2
    2f46:	f003 0304 	and.w	r3, r3, #4
    2f4a:	4919      	ldr	r1, [pc, #100]	; (2fb0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f4c:	4313      	orrs	r3, r2
    2f4e:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2f52:	aa05      	add	r2, sp, #20
    2f54:	a906      	add	r1, sp, #24
    2f56:	a807      	add	r0, sp, #28
    2f58:	f24c 3350 	movw	r3, #50000	; 0xc350
    2f5c:	f7ff f8f8 	bl	2150 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2f60:	4b13      	ldr	r3, [pc, #76]	; (2fb0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f66:	0e1b      	lsrs	r3, r3, #24
    2f68:	f003 0301 	and.w	r3, r3, #1
    2f6c:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2f6e:	9a05      	ldr	r2, [sp, #20]
    2f70:	a906      	add	r1, sp, #24
    2f72:	ab07      	add	r3, sp, #28
    2f74:	4618      	mov	r0, r3
    2f76:	f7ff f905 	bl	2184 <Clock_Ip_TimeoutExpired>
    2f7a:	4603      	mov	r3, r0
    2f7c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2f80:	9b08      	ldr	r3, [sp, #32]
    2f82:	2b00      	cmp	r3, #0
    2f84:	d106      	bne.n	2f94 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    2f86:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2f8a:	f083 0301 	eor.w	r3, r3, #1
    2f8e:	b2db      	uxtb	r3, r3
    2f90:	2b00      	cmp	r3, #0
    2f92:	d1e5      	bne.n	2f60 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    2f94:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2f98:	2b00      	cmp	r3, #0
    2f9a:	d004      	beq.n	2fa6 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    2f9c:	9b02      	ldr	r3, [sp, #8]
    2f9e:	4619      	mov	r1, r3
    2fa0:	2001      	movs	r0, #1
    2fa2:	f7ff f8c5 	bl	2130 <Clock_Ip_ReportClockErrors>
        }
    }
}
    2fa6:	bf00      	nop
    2fa8:	b00b      	add	sp, #44	; 0x2c
    2faa:	f85d fb04 	ldr.w	pc, [sp], #4
    2fae:	bf00      	nop
    2fb0:	40064000 	.word	0x40064000

00002fb4 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2fb4:	b500      	push	{lr}
    2fb6:	b089      	sub	sp, #36	; 0x24
    2fb8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2fba:	2300      	movs	r3, #0
    2fbc:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2fc0:	4b1f      	ldr	r3, [pc, #124]	; (3040 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fc6:	4a1e      	ldr	r2, [pc, #120]	; (3040 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fc8:	f043 0301 	orr.w	r3, r3, #1
    2fcc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    2fd0:	4b1b      	ldr	r3, [pc, #108]	; (3040 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fd6:	4a1a      	ldr	r2, [pc, #104]	; (3040 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fd8:	f043 0304 	orr.w	r3, r3, #4
    2fdc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2fe0:	aa03      	add	r2, sp, #12
    2fe2:	a904      	add	r1, sp, #16
    2fe4:	a805      	add	r0, sp, #20
    2fe6:	f24c 3350 	movw	r3, #50000	; 0xc350
    2fea:	f7ff f8b1 	bl	2150 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2fee:	4b14      	ldr	r3, [pc, #80]	; (3040 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2ff0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ff4:	0e1b      	lsrs	r3, r3, #24
    2ff6:	f003 0301 	and.w	r3, r3, #1
    2ffa:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2ffc:	9a03      	ldr	r2, [sp, #12]
    2ffe:	a904      	add	r1, sp, #16
    3000:	ab05      	add	r3, sp, #20
    3002:	4618      	mov	r0, r3
    3004:	f7ff f8be 	bl	2184 <Clock_Ip_TimeoutExpired>
    3008:	4603      	mov	r3, r0
    300a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    300e:	9b06      	ldr	r3, [sp, #24]
    3010:	2b00      	cmp	r3, #0
    3012:	d106      	bne.n	3022 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3014:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3018:	f083 0301 	eor.w	r3, r3, #1
    301c:	b2db      	uxtb	r3, r3
    301e:	2b00      	cmp	r3, #0
    3020:	d1e5      	bne.n	2fee <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3022:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3026:	2b00      	cmp	r3, #0
    3028:	d005      	beq.n	3036 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    302a:	9b01      	ldr	r3, [sp, #4]
    302c:	681b      	ldr	r3, [r3, #0]
    302e:	4619      	mov	r1, r3
    3030:	2001      	movs	r0, #1
    3032:	f7ff f87d 	bl	2130 <Clock_Ip_ReportClockErrors>
    }
}
    3036:	bf00      	nop
    3038:	b009      	add	sp, #36	; 0x24
    303a:	f85d fb04 	ldr.w	pc, [sp], #4
    303e:	bf00      	nop
    3040:	40064000 	.word	0x40064000

00003044 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3044:	b082      	sub	sp, #8
    3046:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3048:	4b09      	ldr	r3, [pc, #36]	; (3070 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    304a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    304e:	4a08      	ldr	r2, [pc, #32]	; (3070 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3050:	f023 0301 	bic.w	r3, r3, #1
    3054:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3058:	4b05      	ldr	r3, [pc, #20]	; (3070 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    305a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    305e:	4a04      	ldr	r2, [pc, #16]	; (3070 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3060:	f023 0304 	bic.w	r3, r3, #4
    3064:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3068:	bf00      	nop
    306a:	b002      	add	sp, #8
    306c:	4770      	bx	lr
    306e:	bf00      	nop
    3070:	40064000 	.word	0x40064000

00003074 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3074:	b082      	sub	sp, #8
    3076:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3078:	4b0f      	ldr	r3, [pc, #60]	; (30b8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    307a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    307e:	4a0e      	ldr	r2, [pc, #56]	; (30b8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3080:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3084:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3088:	4b0b      	ldr	r3, [pc, #44]	; (30b8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    308a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    308e:	4a0a      	ldr	r2, [pc, #40]	; (30b8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3090:	f023 0304 	bic.w	r3, r3, #4
    3094:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3098:	4b07      	ldr	r3, [pc, #28]	; (30b8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    309a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    309e:	9b01      	ldr	r3, [sp, #4]
    30a0:	7a1b      	ldrb	r3, [r3, #8]
    30a2:	009b      	lsls	r3, r3, #2
    30a4:	f003 0304 	and.w	r3, r3, #4
    30a8:	4903      	ldr	r1, [pc, #12]	; (30b8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    30aa:	4313      	orrs	r3, r2
    30ac:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    30b0:	bf00      	nop
    30b2:	b002      	add	sp, #8
    30b4:	4770      	bx	lr
    30b6:	bf00      	nop
    30b8:	40064000 	.word	0x40064000

000030bc <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    30bc:	b082      	sub	sp, #8
    30be:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    30c0:	9b01      	ldr	r3, [sp, #4]
    30c2:	889b      	ldrh	r3, [r3, #4]
    30c4:	2b01      	cmp	r3, #1
    30c6:	d107      	bne.n	30d8 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    30c8:	4b05      	ldr	r3, [pc, #20]	; (30e0 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    30ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30ce:	4a04      	ldr	r2, [pc, #16]	; (30e0 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    30d0:	f043 0304 	orr.w	r3, r3, #4
    30d4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    30d8:	bf00      	nop
    30da:	b002      	add	sp, #8
    30dc:	4770      	bx	lr
    30de:	bf00      	nop
    30e0:	40064000 	.word	0x40064000

000030e4 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    30e4:	b082      	sub	sp, #8
    30e6:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    30e8:	4b05      	ldr	r3, [pc, #20]	; (3100 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    30ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30ee:	4a04      	ldr	r2, [pc, #16]	; (3100 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    30f0:	f023 0304 	bic.w	r3, r3, #4
    30f4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    30f8:	bf00      	nop
    30fa:	b002      	add	sp, #8
    30fc:	4770      	bx	lr
    30fe:	bf00      	nop
    3100:	40064000 	.word	0x40064000

00003104 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3104:	b082      	sub	sp, #8
    3106:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3108:	4b0f      	ldr	r3, [pc, #60]	; (3148 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    310a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    310e:	4a0e      	ldr	r2, [pc, #56]	; (3148 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3110:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3114:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3118:	4b0b      	ldr	r3, [pc, #44]	; (3148 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    311a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    311e:	4a0a      	ldr	r2, [pc, #40]	; (3148 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3120:	f023 0302 	bic.w	r3, r3, #2
    3124:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3128:	4b07      	ldr	r3, [pc, #28]	; (3148 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    312a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    312e:	9b01      	ldr	r3, [sp, #4]
    3130:	7a5b      	ldrb	r3, [r3, #9]
    3132:	005b      	lsls	r3, r3, #1
    3134:	f003 0302 	and.w	r3, r3, #2
    3138:	4903      	ldr	r1, [pc, #12]	; (3148 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    313a:	4313      	orrs	r3, r2
    313c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3140:	bf00      	nop
    3142:	b002      	add	sp, #8
    3144:	4770      	bx	lr
    3146:	bf00      	nop
    3148:	40064000 	.word	0x40064000

0000314c <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    314c:	b082      	sub	sp, #8
    314e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3150:	9b01      	ldr	r3, [sp, #4]
    3152:	889b      	ldrh	r3, [r3, #4]
    3154:	2b01      	cmp	r3, #1
    3156:	d107      	bne.n	3168 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3158:	4b05      	ldr	r3, [pc, #20]	; (3170 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    315a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    315e:	4a04      	ldr	r2, [pc, #16]	; (3170 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3160:	f043 0302 	orr.w	r3, r3, #2
    3164:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3168:	bf00      	nop
    316a:	b002      	add	sp, #8
    316c:	4770      	bx	lr
    316e:	bf00      	nop
    3170:	40064000 	.word	0x40064000

00003174 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3174:	b082      	sub	sp, #8
    3176:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3178:	4b05      	ldr	r3, [pc, #20]	; (3190 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    317a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    317e:	4a04      	ldr	r2, [pc, #16]	; (3190 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3180:	f023 0302 	bic.w	r3, r3, #2
    3184:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3188:	bf00      	nop
    318a:	b002      	add	sp, #8
    318c:	4770      	bx	lr
    318e:	bf00      	nop
    3190:	40064000 	.word	0x40064000

00003194 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3194:	b500      	push	{lr}
    3196:	b08b      	sub	sp, #44	; 0x2c
    3198:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    319a:	9b01      	ldr	r3, [sp, #4]
    319c:	681a      	ldr	r2, [r3, #0]
    319e:	4975      	ldr	r1, [pc, #468]	; (3374 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    31a0:	4613      	mov	r3, r2
    31a2:	00db      	lsls	r3, r3, #3
    31a4:	4413      	add	r3, r2
    31a6:	440b      	add	r3, r1
    31a8:	781b      	ldrb	r3, [r3, #0]
    31aa:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    31ac:	2300      	movs	r3, #0
    31ae:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    31b2:	2300      	movs	r3, #0
    31b4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    31b8:	4b6f      	ldr	r3, [pc, #444]	; (3378 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    31be:	4a6e      	ldr	r2, [pc, #440]	; (3378 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    31c4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    31c8:	4b6b      	ldr	r3, [pc, #428]	; (3378 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    31ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    31d2:	2b00      	cmp	r3, #0
    31d4:	d07d      	beq.n	32d2 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    31d6:	9b01      	ldr	r3, [sp, #4]
    31d8:	79db      	ldrb	r3, [r3, #7]
    31da:	461a      	mov	r2, r3
    31dc:	4b66      	ldr	r3, [pc, #408]	; (3378 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31de:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    31e2:	f003 0303 	and.w	r3, r3, #3
    31e6:	429a      	cmp	r2, r3
    31e8:	d10b      	bne.n	3202 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    31ea:	9b01      	ldr	r3, [sp, #4]
    31ec:	799b      	ldrb	r3, [r3, #6]
    31ee:	461a      	mov	r2, r3
    31f0:	4b61      	ldr	r3, [pc, #388]	; (3378 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    31f6:	08db      	lsrs	r3, r3, #3
    31f8:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    31fc:	429a      	cmp	r2, r3
    31fe:	f000 80b4 	beq.w	336a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3202:	4b5d      	ldr	r3, [pc, #372]	; (3378 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3204:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3208:	f003 0301 	and.w	r3, r3, #1
    320c:	2b00      	cmp	r3, #0
    320e:	d105      	bne.n	321c <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3210:	2301      	movs	r3, #1
    3212:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3216:	2000      	movs	r0, #0
    3218:	f7ff fd66 	bl	2ce8 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    321c:	2002      	movs	r0, #2
    321e:	f7ff fdcf 	bl	2dc0 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3222:	4b55      	ldr	r3, [pc, #340]	; (3378 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3224:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3228:	4a53      	ldr	r2, [pc, #332]	; (3378 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    322a:	f023 0301 	bic.w	r3, r3, #1
    322e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3232:	9b01      	ldr	r3, [sp, #4]
    3234:	889b      	ldrh	r3, [r3, #4]
    3236:	2b01      	cmp	r3, #1
    3238:	f040 8097 	bne.w	336a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    323c:	9b01      	ldr	r3, [sp, #4]
    323e:	79db      	ldrb	r3, [r3, #7]
    3240:	4a4d      	ldr	r2, [pc, #308]	; (3378 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3242:	f003 0303 	and.w	r3, r3, #3
    3246:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    324a:	4b4b      	ldr	r3, [pc, #300]	; (3378 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    324c:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3250:	9b01      	ldr	r3, [sp, #4]
    3252:	799b      	ldrb	r3, [r3, #6]
    3254:	00db      	lsls	r3, r3, #3
    3256:	f003 0308 	and.w	r3, r3, #8
    325a:	4313      	orrs	r3, r2
    325c:	4a46      	ldr	r2, [pc, #280]	; (3378 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    325e:	f043 0301 	orr.w	r3, r3, #1
    3262:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3266:	aa03      	add	r2, sp, #12
    3268:	a904      	add	r1, sp, #16
    326a:	a805      	add	r0, sp, #20
    326c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3270:	f7fe ff6e 	bl	2150 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3274:	4b40      	ldr	r3, [pc, #256]	; (3378 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3276:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    327a:	0e1b      	lsrs	r3, r3, #24
    327c:	f003 0301 	and.w	r3, r3, #1
    3280:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3282:	9a03      	ldr	r2, [sp, #12]
    3284:	a904      	add	r1, sp, #16
    3286:	ab05      	add	r3, sp, #20
    3288:	4618      	mov	r0, r3
    328a:	f7fe ff7b 	bl	2184 <Clock_Ip_TimeoutExpired>
    328e:	4603      	mov	r3, r0
    3290:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3294:	9b06      	ldr	r3, [sp, #24]
    3296:	2b00      	cmp	r3, #0
    3298:	d106      	bne.n	32a8 <Clock_Ip_SetFirc_TrustedCall+0x114>
    329a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    329e:	f083 0301 	eor.w	r3, r3, #1
    32a2:	b2db      	uxtb	r3, r3
    32a4:	2b00      	cmp	r3, #0
    32a6:	d1e5      	bne.n	3274 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    32a8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    32ac:	2b00      	cmp	r3, #0
    32ae:	d005      	beq.n	32bc <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    32b0:	9b01      	ldr	r3, [sp, #4]
    32b2:	681b      	ldr	r3, [r3, #0]
    32b4:	4619      	mov	r1, r3
    32b6:	2001      	movs	r0, #1
    32b8:	f7fe ff3a 	bl	2130 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    32bc:	2003      	movs	r0, #3
    32be:	f7ff fd7f 	bl	2dc0 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    32c2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    32c6:	2b00      	cmp	r3, #0
    32c8:	d04f      	beq.n	336a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    32ca:	2002      	movs	r0, #2
    32cc:	f7ff fd26 	bl	2d1c <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    32d0:	e04b      	b.n	336a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    32d2:	4b29      	ldr	r3, [pc, #164]	; (3378 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32d4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    32d8:	4a27      	ldr	r2, [pc, #156]	; (3378 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32da:	f023 0301 	bic.w	r3, r3, #1
    32de:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    32e2:	9b01      	ldr	r3, [sp, #4]
    32e4:	889b      	ldrh	r3, [r3, #4]
    32e6:	2b01      	cmp	r3, #1
    32e8:	d13f      	bne.n	336a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    32ea:	9b01      	ldr	r3, [sp, #4]
    32ec:	79db      	ldrb	r3, [r3, #7]
    32ee:	4a22      	ldr	r2, [pc, #136]	; (3378 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32f0:	f003 0303 	and.w	r3, r3, #3
    32f4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    32f8:	4b1f      	ldr	r3, [pc, #124]	; (3378 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32fa:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    32fe:	9b01      	ldr	r3, [sp, #4]
    3300:	799b      	ldrb	r3, [r3, #6]
    3302:	00db      	lsls	r3, r3, #3
    3304:	f003 0308 	and.w	r3, r3, #8
    3308:	4313      	orrs	r3, r2
    330a:	4a1b      	ldr	r2, [pc, #108]	; (3378 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    330c:	f043 0301 	orr.w	r3, r3, #1
    3310:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3314:	aa03      	add	r2, sp, #12
    3316:	a904      	add	r1, sp, #16
    3318:	a805      	add	r0, sp, #20
    331a:	f24c 3350 	movw	r3, #50000	; 0xc350
    331e:	f7fe ff17 	bl	2150 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3322:	4b15      	ldr	r3, [pc, #84]	; (3378 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3324:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3328:	0e1b      	lsrs	r3, r3, #24
    332a:	f003 0301 	and.w	r3, r3, #1
    332e:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3330:	9a03      	ldr	r2, [sp, #12]
    3332:	a904      	add	r1, sp, #16
    3334:	ab05      	add	r3, sp, #20
    3336:	4618      	mov	r0, r3
    3338:	f7fe ff24 	bl	2184 <Clock_Ip_TimeoutExpired>
    333c:	4603      	mov	r3, r0
    333e:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3342:	9b06      	ldr	r3, [sp, #24]
    3344:	2b00      	cmp	r3, #0
    3346:	d106      	bne.n	3356 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3348:	f89d 301f 	ldrb.w	r3, [sp, #31]
    334c:	f083 0301 	eor.w	r3, r3, #1
    3350:	b2db      	uxtb	r3, r3
    3352:	2b00      	cmp	r3, #0
    3354:	d1e5      	bne.n	3322 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3356:	f89d 301f 	ldrb.w	r3, [sp, #31]
    335a:	2b00      	cmp	r3, #0
    335c:	d005      	beq.n	336a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    335e:	9b01      	ldr	r3, [sp, #4]
    3360:	681b      	ldr	r3, [r3, #0]
    3362:	4619      	mov	r1, r3
    3364:	2001      	movs	r0, #1
    3366:	f7fe fee3 	bl	2130 <Clock_Ip_ReportClockErrors>
}
    336a:	bf00      	nop
    336c:	b00b      	add	sp, #44	; 0x2c
    336e:	f85d fb04 	ldr.w	pc, [sp], #4
    3372:	bf00      	nop
    3374:	0000b8ec 	.word	0x0000b8ec
    3378:	40064000 	.word	0x40064000

0000337c <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    337c:	b500      	push	{lr}
    337e:	b089      	sub	sp, #36	; 0x24
    3380:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3382:	2300      	movs	r3, #0
    3384:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3388:	9b01      	ldr	r3, [sp, #4]
    338a:	889b      	ldrh	r3, [r3, #4]
    338c:	2b01      	cmp	r3, #1
    338e:	d132      	bne.n	33f6 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3390:	4b1b      	ldr	r3, [pc, #108]	; (3400 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3392:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3396:	4a1a      	ldr	r2, [pc, #104]	; (3400 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3398:	f043 0301 	orr.w	r3, r3, #1
    339c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    33a0:	aa03      	add	r2, sp, #12
    33a2:	a904      	add	r1, sp, #16
    33a4:	a805      	add	r0, sp, #20
    33a6:	f24c 3350 	movw	r3, #50000	; 0xc350
    33aa:	f7fe fed1 	bl	2150 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    33ae:	4b14      	ldr	r3, [pc, #80]	; (3400 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    33b0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    33b4:	0e1b      	lsrs	r3, r3, #24
    33b6:	f003 0301 	and.w	r3, r3, #1
    33ba:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    33bc:	9a03      	ldr	r2, [sp, #12]
    33be:	a904      	add	r1, sp, #16
    33c0:	ab05      	add	r3, sp, #20
    33c2:	4618      	mov	r0, r3
    33c4:	f7fe fede 	bl	2184 <Clock_Ip_TimeoutExpired>
    33c8:	4603      	mov	r3, r0
    33ca:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    33ce:	9b06      	ldr	r3, [sp, #24]
    33d0:	2b00      	cmp	r3, #0
    33d2:	d106      	bne.n	33e2 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    33d4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33d8:	f083 0301 	eor.w	r3, r3, #1
    33dc:	b2db      	uxtb	r3, r3
    33de:	2b00      	cmp	r3, #0
    33e0:	d1e5      	bne.n	33ae <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    33e2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33e6:	2b00      	cmp	r3, #0
    33e8:	d005      	beq.n	33f6 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    33ea:	9b01      	ldr	r3, [sp, #4]
    33ec:	681b      	ldr	r3, [r3, #0]
    33ee:	4619      	mov	r1, r3
    33f0:	2001      	movs	r0, #1
    33f2:	f7fe fe9d 	bl	2130 <Clock_Ip_ReportClockErrors>
        }
    }
}
    33f6:	bf00      	nop
    33f8:	b009      	add	sp, #36	; 0x24
    33fa:	f85d fb04 	ldr.w	pc, [sp], #4
    33fe:	bf00      	nop
    3400:	40064000 	.word	0x40064000

00003404 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3404:	b082      	sub	sp, #8
    3406:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3408:	4b05      	ldr	r3, [pc, #20]	; (3420 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    340a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    340e:	4a04      	ldr	r2, [pc, #16]	; (3420 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3410:	f023 0301 	bic.w	r3, r3, #1
    3414:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3418:	bf00      	nop
    341a:	b002      	add	sp, #8
    341c:	4770      	bx	lr
    341e:	bf00      	nop
    3420:	40064000 	.word	0x40064000

00003424 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3424:	b082      	sub	sp, #8
    3426:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3428:	bf00      	nop
    342a:	b002      	add	sp, #8
    342c:	4770      	bx	lr

0000342e <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    342e:	b082      	sub	sp, #8
    3430:	9001      	str	r0, [sp, #4]
    3432:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3434:	bf00      	nop
    3436:	b002      	add	sp, #8
    3438:	4770      	bx	lr

0000343a <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    343a:	b082      	sub	sp, #8
    343c:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    343e:	bf00      	nop
    3440:	b002      	add	sp, #8
    3442:	4770      	bx	lr

00003444 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3444:	b082      	sub	sp, #8
    3446:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3448:	bf00      	nop
    344a:	b002      	add	sp, #8
    344c:	4770      	bx	lr

0000344e <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    344e:	b082      	sub	sp, #8
    3450:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3452:	2302      	movs	r3, #2
}
    3454:	4618      	mov	r0, r3
    3456:	b002      	add	sp, #8
    3458:	4770      	bx	lr

0000345a <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    345a:	b082      	sub	sp, #8
    345c:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    345e:	bf00      	nop
    3460:	b002      	add	sp, #8
    3462:	4770      	bx	lr

00003464 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3464:	b500      	push	{lr}
    3466:	b083      	sub	sp, #12
    3468:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    346a:	9b01      	ldr	r3, [sp, #4]
    346c:	2b00      	cmp	r3, #0
    346e:	d002      	beq.n	3476 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3470:	9801      	ldr	r0, [sp, #4]
    3472:	f000 f870 	bl	3556 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3476:	bf00      	nop
    3478:	b003      	add	sp, #12
    347a:	f85d fb04 	ldr.w	pc, [sp], #4

0000347e <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    347e:	b500      	push	{lr}
    3480:	b083      	sub	sp, #12
    3482:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3484:	9b01      	ldr	r3, [sp, #4]
    3486:	2b00      	cmp	r3, #0
    3488:	d002      	beq.n	3490 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    348a:	9801      	ldr	r0, [sp, #4]
    348c:	f000 f89a 	bl	35c4 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3490:	bf00      	nop
    3492:	b003      	add	sp, #12
    3494:	f85d fb04 	ldr.w	pc, [sp], #4

00003498 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3498:	b500      	push	{lr}
    349a:	b089      	sub	sp, #36	; 0x24
    349c:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    349e:	2301      	movs	r3, #1
    34a0:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    34a2:	2300      	movs	r3, #0
    34a4:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    34a8:	4b1e      	ldr	r3, [pc, #120]	; (3524 <Clock_Ip_CompleteSpll+0x8c>)
    34aa:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    34ae:	f003 0301 	and.w	r3, r3, #1
    34b2:	2b00      	cmp	r3, #0
    34b4:	d02f      	beq.n	3516 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    34b6:	aa02      	add	r2, sp, #8
    34b8:	a903      	add	r1, sp, #12
    34ba:	a804      	add	r0, sp, #16
    34bc:	f24c 3350 	movw	r3, #50000	; 0xc350
    34c0:	f7fe fe46 	bl	2150 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    34c4:	4b17      	ldr	r3, [pc, #92]	; (3524 <Clock_Ip_CompleteSpll+0x8c>)
    34c6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    34ca:	0e1b      	lsrs	r3, r3, #24
    34cc:	f003 0301 	and.w	r3, r3, #1
    34d0:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    34d2:	9a02      	ldr	r2, [sp, #8]
    34d4:	a903      	add	r1, sp, #12
    34d6:	ab04      	add	r3, sp, #16
    34d8:	4618      	mov	r0, r3
    34da:	f7fe fe53 	bl	2184 <Clock_Ip_TimeoutExpired>
    34de:	4603      	mov	r3, r0
    34e0:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    34e4:	9b05      	ldr	r3, [sp, #20]
    34e6:	2b00      	cmp	r3, #0
    34e8:	d106      	bne.n	34f8 <Clock_Ip_CompleteSpll+0x60>
    34ea:	f89d 301b 	ldrb.w	r3, [sp, #27]
    34ee:	f083 0301 	eor.w	r3, r3, #1
    34f2:	b2db      	uxtb	r3, r3
    34f4:	2b00      	cmp	r3, #0
    34f6:	d1e5      	bne.n	34c4 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    34f8:	f89d 301b 	ldrb.w	r3, [sp, #27]
    34fc:	f083 0301 	eor.w	r3, r3, #1
    3500:	b2db      	uxtb	r3, r3
    3502:	2b00      	cmp	r3, #0
    3504:	d002      	beq.n	350c <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3506:	2302      	movs	r3, #2
    3508:	9307      	str	r3, [sp, #28]
    350a:	e006      	b.n	351a <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    350c:	9901      	ldr	r1, [sp, #4]
    350e:	2001      	movs	r0, #1
    3510:	f7fe fe0e 	bl	2130 <Clock_Ip_ReportClockErrors>
    3514:	e001      	b.n	351a <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3516:	2300      	movs	r3, #0
    3518:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    351a:	9b07      	ldr	r3, [sp, #28]
}
    351c:	4618      	mov	r0, r3
    351e:	b009      	add	sp, #36	; 0x24
    3520:	f85d fb04 	ldr.w	pc, [sp], #4
    3524:	40064000 	.word	0x40064000

00003528 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3528:	b500      	push	{lr}
    352a:	b083      	sub	sp, #12
    352c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    352e:	9801      	ldr	r0, [sp, #4]
    3530:	f000 f886 	bl	3640 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3534:	bf00      	nop
    3536:	b003      	add	sp, #12
    3538:	f85d fb04 	ldr.w	pc, [sp], #4

0000353c <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    353c:	b500      	push	{lr}
    353e:	b083      	sub	sp, #12
    3540:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3542:	9b01      	ldr	r3, [sp, #4]
    3544:	2b00      	cmp	r3, #0
    3546:	d002      	beq.n	354e <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3548:	9801      	ldr	r0, [sp, #4]
    354a:	f000 f891 	bl	3670 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    354e:	bf00      	nop
    3550:	b003      	add	sp, #12
    3552:	f85d fb04 	ldr.w	pc, [sp], #4

00003556 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3556:	b082      	sub	sp, #8
    3558:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    355a:	4b19      	ldr	r3, [pc, #100]	; (35c0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    355c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3560:	4a17      	ldr	r2, [pc, #92]	; (35c0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3562:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3566:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    356a:	4b15      	ldr	r3, [pc, #84]	; (35c0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    356c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3570:	4a13      	ldr	r2, [pc, #76]	; (35c0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3576:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    357a:	4b11      	ldr	r3, [pc, #68]	; (35c0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    357c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3580:	4a0f      	ldr	r2, [pc, #60]	; (35c0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3582:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3586:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    358a:	4b0d      	ldr	r3, [pc, #52]	; (35c0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    358c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3590:	4a0b      	ldr	r2, [pc, #44]	; (35c0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3592:	f023 0301 	bic.w	r3, r3, #1
    3596:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    359a:	4b09      	ldr	r3, [pc, #36]	; (35c0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    359c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    35a0:	4a07      	ldr	r2, [pc, #28]	; (35c0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    35a6:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    35aa:	4b05      	ldr	r3, [pc, #20]	; (35c0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35ac:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    35b0:	4a03      	ldr	r2, [pc, #12]	; (35c0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    35b6:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    35ba:	bf00      	nop
    35bc:	b002      	add	sp, #8
    35be:	4770      	bx	lr
    35c0:	40064000 	.word	0x40064000

000035c4 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    35c4:	b082      	sub	sp, #8
    35c6:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    35c8:	9b01      	ldr	r3, [sp, #4]
    35ca:	889b      	ldrh	r3, [r3, #4]
    35cc:	2b01      	cmp	r3, #1
    35ce:	d12f      	bne.n	3630 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    35d0:	4b1a      	ldr	r3, [pc, #104]	; (363c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    35d2:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    35d6:	9b01      	ldr	r3, [sp, #4]
    35d8:	7b5b      	ldrb	r3, [r3, #13]
    35da:	3b01      	subs	r3, #1
    35dc:	021b      	lsls	r3, r3, #8
    35de:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    35e2:	9b01      	ldr	r3, [sp, #4]
    35e4:	7d1b      	ldrb	r3, [r3, #20]
    35e6:	3b10      	subs	r3, #16
    35e8:	041b      	lsls	r3, r3, #16
    35ea:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    35ee:	430b      	orrs	r3, r1
    35f0:	4912      	ldr	r1, [pc, #72]	; (363c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    35f2:	4313      	orrs	r3, r2
    35f4:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    35f8:	9b01      	ldr	r3, [sp, #4]
    35fa:	7fdb      	ldrb	r3, [r3, #31]
    35fc:	2b02      	cmp	r3, #2
    35fe:	d011      	beq.n	3624 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3600:	2b02      	cmp	r3, #2
    3602:	dc17      	bgt.n	3634 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3604:	2b00      	cmp	r3, #0
    3606:	d002      	beq.n	360e <Clock_Ip_SetSpll_TrustedCall+0x4a>
    3608:	2b01      	cmp	r3, #1
    360a:	d005      	beq.n	3618 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    360c:	e012      	b.n	3634 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    360e:	4b0b      	ldr	r3, [pc, #44]	; (363c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3610:	2200      	movs	r2, #0
    3612:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3616:	e00e      	b.n	3636 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3618:	4b08      	ldr	r3, [pc, #32]	; (363c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    361a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    361e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3622:	e008      	b.n	3636 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3624:	4b05      	ldr	r3, [pc, #20]	; (363c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3626:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    362a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    362e:	e002      	b.n	3636 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    3630:	bf00      	nop
    3632:	e000      	b.n	3636 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    3634:	bf00      	nop
}
    3636:	bf00      	nop
    3638:	b002      	add	sp, #8
    363a:	4770      	bx	lr
    363c:	40064000 	.word	0x40064000

00003640 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    3640:	b082      	sub	sp, #8
    3642:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3644:	4b09      	ldr	r3, [pc, #36]	; (366c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3646:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    364a:	4a08      	ldr	r2, [pc, #32]	; (366c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    364c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3650:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3654:	4b05      	ldr	r3, [pc, #20]	; (366c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3656:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    365a:	4a04      	ldr	r2, [pc, #16]	; (366c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    365c:	f023 0301 	bic.w	r3, r3, #1
    3660:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    3664:	bf00      	nop
    3666:	b002      	add	sp, #8
    3668:	4770      	bx	lr
    366a:	bf00      	nop
    366c:	40064000 	.word	0x40064000

00003670 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3670:	b082      	sub	sp, #8
    3672:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3674:	9b01      	ldr	r3, [sp, #4]
    3676:	889b      	ldrh	r3, [r3, #4]
    3678:	2b01      	cmp	r3, #1
    367a:	d107      	bne.n	368c <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    367c:	4b05      	ldr	r3, [pc, #20]	; (3694 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    367e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3682:	4a04      	ldr	r2, [pc, #16]	; (3694 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3684:	f043 0301 	orr.w	r3, r3, #1
    3688:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    368c:	bf00      	nop
    368e:	b002      	add	sp, #8
    3690:	4770      	bx	lr
    3692:	bf00      	nop
    3694:	40064000 	.word	0x40064000

00003698 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    3698:	b082      	sub	sp, #8
    369a:	9001      	str	r0, [sp, #4]
    369c:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    369e:	bf00      	nop
    36a0:	b002      	add	sp, #8
    36a2:	4770      	bx	lr

000036a4 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    36a4:	b082      	sub	sp, #8
    36a6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    36a8:	bf00      	nop
    36aa:	b002      	add	sp, #8
    36ac:	4770      	bx	lr

000036ae <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    36ae:	b500      	push	{lr}
    36b0:	b083      	sub	sp, #12
    36b2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36b4:	9b01      	ldr	r3, [sp, #4]
    36b6:	2b00      	cmp	r3, #0
    36b8:	d002      	beq.n	36c0 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    36ba:	9801      	ldr	r0, [sp, #4]
    36bc:	f000 f8ee 	bl	389c <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36c0:	bf00      	nop
    36c2:	b003      	add	sp, #12
    36c4:	f85d fb04 	ldr.w	pc, [sp], #4

000036c8 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    36c8:	b500      	push	{lr}
    36ca:	b083      	sub	sp, #12
    36cc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36ce:	9b01      	ldr	r3, [sp, #4]
    36d0:	2b00      	cmp	r3, #0
    36d2:	d002      	beq.n	36da <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    36d4:	9801      	ldr	r0, [sp, #4]
    36d6:	f000 f8ff 	bl	38d8 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36da:	bf00      	nop
    36dc:	b003      	add	sp, #12
    36de:	f85d fb04 	ldr.w	pc, [sp], #4

000036e2 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    36e2:	b500      	push	{lr}
    36e4:	b083      	sub	sp, #12
    36e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36e8:	9b01      	ldr	r3, [sp, #4]
    36ea:	2b00      	cmp	r3, #0
    36ec:	d002      	beq.n	36f4 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    36ee:	9801      	ldr	r0, [sp, #4]
    36f0:	f000 f912 	bl	3918 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36f4:	bf00      	nop
    36f6:	b003      	add	sp, #12
    36f8:	f85d fb04 	ldr.w	pc, [sp], #4

000036fc <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    36fc:	b500      	push	{lr}
    36fe:	b083      	sub	sp, #12
    3700:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3702:	9b01      	ldr	r3, [sp, #4]
    3704:	2b00      	cmp	r3, #0
    3706:	d002      	beq.n	370e <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    3708:	9801      	ldr	r0, [sp, #4]
    370a:	f000 f925 	bl	3958 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    370e:	bf00      	nop
    3710:	b003      	add	sp, #12
    3712:	f85d fb04 	ldr.w	pc, [sp], #4

00003716 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3716:	b500      	push	{lr}
    3718:	b083      	sub	sp, #12
    371a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    371c:	9b01      	ldr	r3, [sp, #4]
    371e:	2b00      	cmp	r3, #0
    3720:	d002      	beq.n	3728 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    3722:	9801      	ldr	r0, [sp, #4]
    3724:	f000 f936 	bl	3994 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3728:	bf00      	nop
    372a:	b003      	add	sp, #12
    372c:	f85d fb04 	ldr.w	pc, [sp], #4

00003730 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3730:	b500      	push	{lr}
    3732:	b083      	sub	sp, #12
    3734:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3736:	9b01      	ldr	r3, [sp, #4]
    3738:	2b00      	cmp	r3, #0
    373a:	d002      	beq.n	3742 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    373c:	9801      	ldr	r0, [sp, #4]
    373e:	f000 f949 	bl	39d4 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3742:	bf00      	nop
    3744:	b003      	add	sp, #12
    3746:	f85d fb04 	ldr.w	pc, [sp], #4

0000374a <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    374a:	b500      	push	{lr}
    374c:	b083      	sub	sp, #12
    374e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3750:	9b01      	ldr	r3, [sp, #4]
    3752:	2b00      	cmp	r3, #0
    3754:	d002      	beq.n	375c <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    3756:	9801      	ldr	r0, [sp, #4]
    3758:	f000 f958 	bl	3a0c <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    375c:	bf00      	nop
    375e:	b003      	add	sp, #12
    3760:	f85d fb04 	ldr.w	pc, [sp], #4

00003764 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3764:	b500      	push	{lr}
    3766:	b083      	sub	sp, #12
    3768:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    376a:	9b01      	ldr	r3, [sp, #4]
    376c:	2b00      	cmp	r3, #0
    376e:	d002      	beq.n	3776 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    3770:	9801      	ldr	r0, [sp, #4]
    3772:	f000 f969 	bl	3a48 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3776:	bf00      	nop
    3778:	b003      	add	sp, #12
    377a:	f85d fb04 	ldr.w	pc, [sp], #4

0000377e <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    377e:	b500      	push	{lr}
    3780:	b083      	sub	sp, #12
    3782:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3784:	9b01      	ldr	r3, [sp, #4]
    3786:	2b00      	cmp	r3, #0
    3788:	d002      	beq.n	3790 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    378a:	9801      	ldr	r0, [sp, #4]
    378c:	f000 f978 	bl	3a80 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3790:	bf00      	nop
    3792:	b003      	add	sp, #12
    3794:	f85d fb04 	ldr.w	pc, [sp], #4

00003798 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3798:	b500      	push	{lr}
    379a:	b083      	sub	sp, #12
    379c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    379e:	9b01      	ldr	r3, [sp, #4]
    37a0:	2b00      	cmp	r3, #0
    37a2:	d002      	beq.n	37aa <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    37a4:	9801      	ldr	r0, [sp, #4]
    37a6:	f000 f989 	bl	3abc <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37aa:	bf00      	nop
    37ac:	b003      	add	sp, #12
    37ae:	f85d fb04 	ldr.w	pc, [sp], #4

000037b2 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    37b2:	b500      	push	{lr}
    37b4:	b083      	sub	sp, #12
    37b6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37b8:	9b01      	ldr	r3, [sp, #4]
    37ba:	2b00      	cmp	r3, #0
    37bc:	d002      	beq.n	37c4 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    37be:	9801      	ldr	r0, [sp, #4]
    37c0:	f000 f998 	bl	3af4 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37c4:	bf00      	nop
    37c6:	b003      	add	sp, #12
    37c8:	f85d fb04 	ldr.w	pc, [sp], #4

000037cc <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    37cc:	b500      	push	{lr}
    37ce:	b083      	sub	sp, #12
    37d0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37d2:	9b01      	ldr	r3, [sp, #4]
    37d4:	2b00      	cmp	r3, #0
    37d6:	d002      	beq.n	37de <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    37d8:	9801      	ldr	r0, [sp, #4]
    37da:	f000 f9a9 	bl	3b30 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37de:	bf00      	nop
    37e0:	b003      	add	sp, #12
    37e2:	f85d fb04 	ldr.w	pc, [sp], #4

000037e6 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    37e6:	b500      	push	{lr}
    37e8:	b083      	sub	sp, #12
    37ea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37ec:	9b01      	ldr	r3, [sp, #4]
    37ee:	2b00      	cmp	r3, #0
    37f0:	d002      	beq.n	37f8 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    37f2:	9801      	ldr	r0, [sp, #4]
    37f4:	f000 f9e6 	bl	3bc4 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37f8:	bf00      	nop
    37fa:	b003      	add	sp, #12
    37fc:	f85d fb04 	ldr.w	pc, [sp], #4

00003800 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3800:	b500      	push	{lr}
    3802:	b083      	sub	sp, #12
    3804:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3806:	9b01      	ldr	r3, [sp, #4]
    3808:	2b00      	cmp	r3, #0
    380a:	d002      	beq.n	3812 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    380c:	9801      	ldr	r0, [sp, #4]
    380e:	f000 fa25 	bl	3c5c <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3812:	bf00      	nop
    3814:	b003      	add	sp, #12
    3816:	f85d fb04 	ldr.w	pc, [sp], #4

0000381a <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    381a:	b500      	push	{lr}
    381c:	b083      	sub	sp, #12
    381e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3820:	9b01      	ldr	r3, [sp, #4]
    3822:	2b00      	cmp	r3, #0
    3824:	d002      	beq.n	382c <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    3826:	9801      	ldr	r0, [sp, #4]
    3828:	f000 fa2a 	bl	3c80 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    382c:	bf00      	nop
    382e:	b003      	add	sp, #12
    3830:	f85d fb04 	ldr.w	pc, [sp], #4

00003834 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3834:	b500      	push	{lr}
    3836:	b083      	sub	sp, #12
    3838:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    383a:	9b01      	ldr	r3, [sp, #4]
    383c:	2b00      	cmp	r3, #0
    383e:	d002      	beq.n	3846 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    3840:	9801      	ldr	r0, [sp, #4]
    3842:	f000 fa3b 	bl	3cbc <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3846:	bf00      	nop
    3848:	b003      	add	sp, #12
    384a:	f85d fb04 	ldr.w	pc, [sp], #4

0000384e <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    384e:	b500      	push	{lr}
    3850:	b083      	sub	sp, #12
    3852:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3854:	9b01      	ldr	r3, [sp, #4]
    3856:	2b00      	cmp	r3, #0
    3858:	d002      	beq.n	3860 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    385a:	9801      	ldr	r0, [sp, #4]
    385c:	f000 fa56 	bl	3d0c <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3860:	bf00      	nop
    3862:	b003      	add	sp, #12
    3864:	f85d fb04 	ldr.w	pc, [sp], #4

00003868 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3868:	b500      	push	{lr}
    386a:	b083      	sub	sp, #12
    386c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    386e:	9b01      	ldr	r3, [sp, #4]
    3870:	2b00      	cmp	r3, #0
    3872:	d002      	beq.n	387a <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    3874:	9801      	ldr	r0, [sp, #4]
    3876:	f000 fa79 	bl	3d6c <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    387a:	bf00      	nop
    387c:	b003      	add	sp, #12
    387e:	f85d fb04 	ldr.w	pc, [sp], #4

00003882 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3882:	b500      	push	{lr}
    3884:	b083      	sub	sp, #12
    3886:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3888:	9b01      	ldr	r3, [sp, #4]
    388a:	2b00      	cmp	r3, #0
    388c:	d002      	beq.n	3894 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    388e:	9801      	ldr	r0, [sp, #4]
    3890:	f000 fa8a 	bl	3da8 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3894:	bf00      	nop
    3896:	b003      	add	sp, #12
    3898:	f85d fb04 	ldr.w	pc, [sp], #4

0000389c <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    389c:	b084      	sub	sp, #16
    389e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    38a0:	4b0b      	ldr	r3, [pc, #44]	; (38d0 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    38a2:	795b      	ldrb	r3, [r3, #5]
    38a4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    38a6:	4b0b      	ldr	r3, [pc, #44]	; (38d4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    38a8:	695b      	ldr	r3, [r3, #20]
    38aa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    38ac:	9b02      	ldr	r3, [sp, #8]
    38ae:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    38b2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    38b4:	9b03      	ldr	r3, [sp, #12]
    38b6:	061b      	lsls	r3, r3, #24
    38b8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    38bc:	9a02      	ldr	r2, [sp, #8]
    38be:	4313      	orrs	r3, r2
    38c0:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    38c2:	4a04      	ldr	r2, [pc, #16]	; (38d4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    38c4:	9b02      	ldr	r3, [sp, #8]
    38c6:	6153      	str	r3, [r2, #20]
}
    38c8:	bf00      	nop
    38ca:	b004      	add	sp, #16
    38cc:	4770      	bx	lr
    38ce:	bf00      	nop
    38d0:	0000bc54 	.word	0x0000bc54
    38d4:	40064000 	.word	0x40064000

000038d8 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    38d8:	b084      	sub	sp, #16
    38da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    38dc:	9b01      	ldr	r3, [sp, #4]
    38de:	685b      	ldr	r3, [r3, #4]
    38e0:	4a0b      	ldr	r2, [pc, #44]	; (3910 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    38e2:	5cd3      	ldrb	r3, [r2, r3]
    38e4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    38e6:	4b0b      	ldr	r3, [pc, #44]	; (3914 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    38e8:	695b      	ldr	r3, [r3, #20]
    38ea:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    38ec:	9b02      	ldr	r3, [sp, #8]
    38ee:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    38f2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    38f4:	9b03      	ldr	r3, [sp, #12]
    38f6:	061b      	lsls	r3, r3, #24
    38f8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    38fc:	9a02      	ldr	r2, [sp, #8]
    38fe:	4313      	orrs	r3, r2
    3900:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3902:	4a04      	ldr	r2, [pc, #16]	; (3914 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3904:	9b02      	ldr	r3, [sp, #8]
    3906:	6153      	str	r3, [r2, #20]
}
    3908:	bf00      	nop
    390a:	b004      	add	sp, #16
    390c:	4770      	bx	lr
    390e:	bf00      	nop
    3910:	0000bc54 	.word	0x0000bc54
    3914:	40064000 	.word	0x40064000

00003918 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3918:	b084      	sub	sp, #16
    391a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    391c:	9b01      	ldr	r3, [sp, #4]
    391e:	685b      	ldr	r3, [r3, #4]
    3920:	4a0b      	ldr	r2, [pc, #44]	; (3950 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    3922:	5cd3      	ldrb	r3, [r2, r3]
    3924:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    3926:	4b0b      	ldr	r3, [pc, #44]	; (3954 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3928:	699b      	ldr	r3, [r3, #24]
    392a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    392c:	9b02      	ldr	r3, [sp, #8]
    392e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3932:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    3934:	9b03      	ldr	r3, [sp, #12]
    3936:	061b      	lsls	r3, r3, #24
    3938:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    393c:	9a02      	ldr	r2, [sp, #8]
    393e:	4313      	orrs	r3, r2
    3940:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    3942:	4a04      	ldr	r2, [pc, #16]	; (3954 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3944:	9b02      	ldr	r3, [sp, #8]
    3946:	6193      	str	r3, [r2, #24]
}
    3948:	bf00      	nop
    394a:	b004      	add	sp, #16
    394c:	4770      	bx	lr
    394e:	bf00      	nop
    3950:	0000bc54 	.word	0x0000bc54
    3954:	40064000 	.word	0x40064000

00003958 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3958:	b084      	sub	sp, #16
    395a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    395c:	4b0b      	ldr	r3, [pc, #44]	; (398c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    395e:	795b      	ldrb	r3, [r3, #5]
    3960:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    3962:	4b0b      	ldr	r3, [pc, #44]	; (3990 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3964:	69db      	ldr	r3, [r3, #28]
    3966:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3968:	9b02      	ldr	r3, [sp, #8]
    396a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    396e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3970:	9b03      	ldr	r3, [sp, #12]
    3972:	061b      	lsls	r3, r3, #24
    3974:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3978:	9a02      	ldr	r2, [sp, #8]
    397a:	4313      	orrs	r3, r2
    397c:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    397e:	4a04      	ldr	r2, [pc, #16]	; (3990 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3980:	9b02      	ldr	r3, [sp, #8]
    3982:	61d3      	str	r3, [r2, #28]
}
    3984:	bf00      	nop
    3986:	b004      	add	sp, #16
    3988:	4770      	bx	lr
    398a:	bf00      	nop
    398c:	0000bc54 	.word	0x0000bc54
    3990:	40064000 	.word	0x40064000

00003994 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3994:	b084      	sub	sp, #16
    3996:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3998:	9b01      	ldr	r3, [sp, #4]
    399a:	685b      	ldr	r3, [r3, #4]
    399c:	4a0b      	ldr	r2, [pc, #44]	; (39cc <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    399e:	5cd3      	ldrb	r3, [r2, r3]
    39a0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    39a2:	4b0b      	ldr	r3, [pc, #44]	; (39d0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    39a4:	69db      	ldr	r3, [r3, #28]
    39a6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    39a8:	9b02      	ldr	r3, [sp, #8]
    39aa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    39ae:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    39b0:	9b03      	ldr	r3, [sp, #12]
    39b2:	061b      	lsls	r3, r3, #24
    39b4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    39b8:	9a02      	ldr	r2, [sp, #8]
    39ba:	4313      	orrs	r3, r2
    39bc:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    39be:	4a04      	ldr	r2, [pc, #16]	; (39d0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    39c0:	9b02      	ldr	r3, [sp, #8]
    39c2:	61d3      	str	r3, [r2, #28]
}
    39c4:	bf00      	nop
    39c6:	b004      	add	sp, #16
    39c8:	4770      	bx	lr
    39ca:	bf00      	nop
    39cc:	0000bc54 	.word	0x0000bc54
    39d0:	40064000 	.word	0x40064000

000039d4 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    39d4:	b084      	sub	sp, #16
    39d6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    39d8:	4b0a      	ldr	r3, [pc, #40]	; (3a04 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    39da:	7b9b      	ldrb	r3, [r3, #14]
    39dc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    39de:	4b0a      	ldr	r3, [pc, #40]	; (3a08 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    39e0:	691b      	ldr	r3, [r3, #16]
    39e2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    39e4:	9b02      	ldr	r3, [sp, #8]
    39e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    39ea:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    39ec:	9b03      	ldr	r3, [sp, #12]
    39ee:	011b      	lsls	r3, r3, #4
    39f0:	9a02      	ldr	r2, [sp, #8]
    39f2:	4313      	orrs	r3, r2
    39f4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    39f6:	4a04      	ldr	r2, [pc, #16]	; (3a08 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    39f8:	9b02      	ldr	r3, [sp, #8]
    39fa:	6113      	str	r3, [r2, #16]
}
    39fc:	bf00      	nop
    39fe:	b004      	add	sp, #16
    3a00:	4770      	bx	lr
    3a02:	bf00      	nop
    3a04:	0000bbfc 	.word	0x0000bbfc
    3a08:	40048000 	.word	0x40048000

00003a0c <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a0c:	b084      	sub	sp, #16
    3a0e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a10:	9b01      	ldr	r3, [sp, #4]
    3a12:	685b      	ldr	r3, [r3, #4]
    3a14:	4a0a      	ldr	r2, [pc, #40]	; (3a40 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    3a16:	5cd3      	ldrb	r3, [r2, r3]
    3a18:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    3a1a:	4b0a      	ldr	r3, [pc, #40]	; (3a44 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3a1c:	691b      	ldr	r3, [r3, #16]
    3a1e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3a20:	9b02      	ldr	r3, [sp, #8]
    3a22:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3a26:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3a28:	9b03      	ldr	r3, [sp, #12]
    3a2a:	011b      	lsls	r3, r3, #4
    3a2c:	9a02      	ldr	r2, [sp, #8]
    3a2e:	4313      	orrs	r3, r2
    3a30:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a32:	4a04      	ldr	r2, [pc, #16]	; (3a44 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3a34:	9b02      	ldr	r3, [sp, #8]
    3a36:	6113      	str	r3, [r2, #16]
}
    3a38:	bf00      	nop
    3a3a:	b004      	add	sp, #16
    3a3c:	4770      	bx	lr
    3a3e:	bf00      	nop
    3a40:	0000bbfc 	.word	0x0000bbfc
    3a44:	40048000 	.word	0x40048000

00003a48 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a48:	b084      	sub	sp, #16
    3a4a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a4c:	4b0a      	ldr	r3, [pc, #40]	; (3a78 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    3a4e:	785b      	ldrb	r3, [r3, #1]
    3a50:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3a52:	4b0a      	ldr	r3, [pc, #40]	; (3a7c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3a54:	691b      	ldr	r3, [r3, #16]
    3a56:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3a58:	9b02      	ldr	r3, [sp, #8]
    3a5a:	f023 030c 	bic.w	r3, r3, #12
    3a5e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3a60:	9b03      	ldr	r3, [sp, #12]
    3a62:	009b      	lsls	r3, r3, #2
    3a64:	9a02      	ldr	r2, [sp, #8]
    3a66:	4313      	orrs	r3, r2
    3a68:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a6a:	4a04      	ldr	r2, [pc, #16]	; (3a7c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3a6c:	9b02      	ldr	r3, [sp, #8]
    3a6e:	6113      	str	r3, [r2, #16]
}
    3a70:	bf00      	nop
    3a72:	b004      	add	sp, #16
    3a74:	4770      	bx	lr
    3a76:	bf00      	nop
    3a78:	0000bcb4 	.word	0x0000bcb4
    3a7c:	40048000 	.word	0x40048000

00003a80 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a80:	b084      	sub	sp, #16
    3a82:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a84:	9b01      	ldr	r3, [sp, #4]
    3a86:	685b      	ldr	r3, [r3, #4]
    3a88:	4a0a      	ldr	r2, [pc, #40]	; (3ab4 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    3a8a:	5cd3      	ldrb	r3, [r2, r3]
    3a8c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3a8e:	4b0a      	ldr	r3, [pc, #40]	; (3ab8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3a90:	691b      	ldr	r3, [r3, #16]
    3a92:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3a94:	9b02      	ldr	r3, [sp, #8]
    3a96:	f023 030c 	bic.w	r3, r3, #12
    3a9a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3a9c:	9b03      	ldr	r3, [sp, #12]
    3a9e:	009b      	lsls	r3, r3, #2
    3aa0:	9a02      	ldr	r2, [sp, #8]
    3aa2:	4313      	orrs	r3, r2
    3aa4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3aa6:	4a04      	ldr	r2, [pc, #16]	; (3ab8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3aa8:	9b02      	ldr	r3, [sp, #8]
    3aaa:	6113      	str	r3, [r2, #16]
}
    3aac:	bf00      	nop
    3aae:	b004      	add	sp, #16
    3ab0:	4770      	bx	lr
    3ab2:	bf00      	nop
    3ab4:	0000bcb4 	.word	0x0000bcb4
    3ab8:	40048000 	.word	0x40048000

00003abc <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3abc:	b084      	sub	sp, #16
    3abe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ac0:	4b0a      	ldr	r3, [pc, #40]	; (3aec <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    3ac2:	795b      	ldrb	r3, [r3, #5]
    3ac4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    3ac6:	4b0a      	ldr	r3, [pc, #40]	; (3af0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3ac8:	6a1b      	ldr	r3, [r3, #32]
    3aca:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3acc:	9b02      	ldr	r3, [sp, #8]
    3ace:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3ad2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3ad4:	9b03      	ldr	r3, [sp, #12]
    3ad6:	061b      	lsls	r3, r3, #24
    3ad8:	9a02      	ldr	r2, [sp, #8]
    3ada:	4313      	orrs	r3, r2
    3adc:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3ade:	4a04      	ldr	r2, [pc, #16]	; (3af0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3ae0:	9b02      	ldr	r3, [sp, #8]
    3ae2:	6213      	str	r3, [r2, #32]
}
    3ae4:	bf00      	nop
    3ae6:	b004      	add	sp, #16
    3ae8:	4770      	bx	lr
    3aea:	bf00      	nop
    3aec:	0000bc54 	.word	0x0000bc54
    3af0:	40064000 	.word	0x40064000

00003af4 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3af4:	b084      	sub	sp, #16
    3af6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3af8:	9b01      	ldr	r3, [sp, #4]
    3afa:	685b      	ldr	r3, [r3, #4]
    3afc:	4a0a      	ldr	r2, [pc, #40]	; (3b28 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    3afe:	5cd3      	ldrb	r3, [r2, r3]
    3b00:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    3b02:	4b0a      	ldr	r3, [pc, #40]	; (3b2c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3b04:	6a1b      	ldr	r3, [r3, #32]
    3b06:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3b08:	9b02      	ldr	r3, [sp, #8]
    3b0a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3b0e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3b10:	9b03      	ldr	r3, [sp, #12]
    3b12:	061b      	lsls	r3, r3, #24
    3b14:	9a02      	ldr	r2, [sp, #8]
    3b16:	4313      	orrs	r3, r2
    3b18:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3b1a:	4a04      	ldr	r2, [pc, #16]	; (3b2c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3b1c:	9b02      	ldr	r3, [sp, #8]
    3b1e:	6213      	str	r3, [r2, #32]
}
    3b20:	bf00      	nop
    3b22:	b004      	add	sp, #16
    3b24:	4770      	bx	lr
    3b26:	bf00      	nop
    3b28:	0000bc54 	.word	0x0000bc54
    3b2c:	40064000 	.word	0x40064000

00003b30 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b30:	b086      	sub	sp, #24
    3b32:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b34:	4b20      	ldr	r3, [pc, #128]	; (3bb8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    3b36:	795b      	ldrb	r3, [r3, #5]
    3b38:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3b3a:	9b01      	ldr	r3, [sp, #4]
    3b3c:	681a      	ldr	r2, [r3, #0]
    3b3e:	491f      	ldr	r1, [pc, #124]	; (3bbc <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    3b40:	4613      	mov	r3, r2
    3b42:	00db      	lsls	r3, r3, #3
    3b44:	4413      	add	r3, r2
    3b46:	440b      	add	r3, r1
    3b48:	781b      	ldrb	r3, [r3, #0]
    3b4a:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3b4c:	4b1c      	ldr	r3, [pc, #112]	; (3bc0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3b4e:	68db      	ldr	r3, [r3, #12]
    3b50:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3b52:	9b03      	ldr	r3, [sp, #12]
    3b54:	2b03      	cmp	r3, #3
    3b56:	d813      	bhi.n	3b80 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3b58:	9b03      	ldr	r3, [sp, #12]
    3b5a:	005b      	lsls	r3, r3, #1
    3b5c:	3318      	adds	r3, #24
    3b5e:	2203      	movs	r2, #3
    3b60:	fa02 f303 	lsl.w	r3, r2, r3
    3b64:	43db      	mvns	r3, r3
    3b66:	9a05      	ldr	r2, [sp, #20]
    3b68:	4013      	ands	r3, r2
    3b6a:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3b6c:	9b03      	ldr	r3, [sp, #12]
    3b6e:	005b      	lsls	r3, r3, #1
    3b70:	3318      	adds	r3, #24
    3b72:	9a04      	ldr	r2, [sp, #16]
    3b74:	fa02 f303 	lsl.w	r3, r2, r3
    3b78:	9a05      	ldr	r2, [sp, #20]
    3b7a:	4313      	orrs	r3, r2
    3b7c:	9305      	str	r3, [sp, #20]
    3b7e:	e014      	b.n	3baa <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3b80:	9b03      	ldr	r3, [sp, #12]
    3b82:	3b04      	subs	r3, #4
    3b84:	005b      	lsls	r3, r3, #1
    3b86:	3310      	adds	r3, #16
    3b88:	2203      	movs	r2, #3
    3b8a:	fa02 f303 	lsl.w	r3, r2, r3
    3b8e:	43db      	mvns	r3, r3
    3b90:	9a05      	ldr	r2, [sp, #20]
    3b92:	4013      	ands	r3, r2
    3b94:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3b96:	9b03      	ldr	r3, [sp, #12]
    3b98:	3b04      	subs	r3, #4
    3b9a:	005b      	lsls	r3, r3, #1
    3b9c:	3310      	adds	r3, #16
    3b9e:	9a04      	ldr	r2, [sp, #16]
    3ba0:	fa02 f303 	lsl.w	r3, r2, r3
    3ba4:	9a05      	ldr	r2, [sp, #20]
    3ba6:	4313      	orrs	r3, r2
    3ba8:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3baa:	4a05      	ldr	r2, [pc, #20]	; (3bc0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3bac:	9b05      	ldr	r3, [sp, #20]
    3bae:	60d3      	str	r3, [r2, #12]
}
    3bb0:	bf00      	nop
    3bb2:	b006      	add	sp, #24
    3bb4:	4770      	bx	lr
    3bb6:	bf00      	nop
    3bb8:	0000bbfc 	.word	0x0000bbfc
    3bbc:	0000b8ec 	.word	0x0000b8ec
    3bc0:	40048000 	.word	0x40048000

00003bc4 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3bc4:	b086      	sub	sp, #24
    3bc6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3bc8:	9b01      	ldr	r3, [sp, #4]
    3bca:	685b      	ldr	r3, [r3, #4]
    3bcc:	4a20      	ldr	r2, [pc, #128]	; (3c50 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    3bce:	5cd3      	ldrb	r3, [r2, r3]
    3bd0:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3bd2:	9b01      	ldr	r3, [sp, #4]
    3bd4:	681a      	ldr	r2, [r3, #0]
    3bd6:	491f      	ldr	r1, [pc, #124]	; (3c54 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    3bd8:	4613      	mov	r3, r2
    3bda:	00db      	lsls	r3, r3, #3
    3bdc:	4413      	add	r3, r2
    3bde:	440b      	add	r3, r1
    3be0:	781b      	ldrb	r3, [r3, #0]
    3be2:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3be4:	4b1c      	ldr	r3, [pc, #112]	; (3c58 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3be6:	68db      	ldr	r3, [r3, #12]
    3be8:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3bea:	9b03      	ldr	r3, [sp, #12]
    3bec:	2b03      	cmp	r3, #3
    3bee:	d813      	bhi.n	3c18 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3bf0:	9b03      	ldr	r3, [sp, #12]
    3bf2:	005b      	lsls	r3, r3, #1
    3bf4:	3318      	adds	r3, #24
    3bf6:	2203      	movs	r2, #3
    3bf8:	fa02 f303 	lsl.w	r3, r2, r3
    3bfc:	43db      	mvns	r3, r3
    3bfe:	9a05      	ldr	r2, [sp, #20]
    3c00:	4013      	ands	r3, r2
    3c02:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3c04:	9b03      	ldr	r3, [sp, #12]
    3c06:	005b      	lsls	r3, r3, #1
    3c08:	3318      	adds	r3, #24
    3c0a:	9a04      	ldr	r2, [sp, #16]
    3c0c:	fa02 f303 	lsl.w	r3, r2, r3
    3c10:	9a05      	ldr	r2, [sp, #20]
    3c12:	4313      	orrs	r3, r2
    3c14:	9305      	str	r3, [sp, #20]
    3c16:	e014      	b.n	3c42 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3c18:	9b03      	ldr	r3, [sp, #12]
    3c1a:	3b04      	subs	r3, #4
    3c1c:	005b      	lsls	r3, r3, #1
    3c1e:	3310      	adds	r3, #16
    3c20:	2203      	movs	r2, #3
    3c22:	fa02 f303 	lsl.w	r3, r2, r3
    3c26:	43db      	mvns	r3, r3
    3c28:	9a05      	ldr	r2, [sp, #20]
    3c2a:	4013      	ands	r3, r2
    3c2c:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3c2e:	9b03      	ldr	r3, [sp, #12]
    3c30:	3b04      	subs	r3, #4
    3c32:	005b      	lsls	r3, r3, #1
    3c34:	3310      	adds	r3, #16
    3c36:	9a04      	ldr	r2, [sp, #16]
    3c38:	fa02 f303 	lsl.w	r3, r2, r3
    3c3c:	9a05      	ldr	r2, [sp, #20]
    3c3e:	4313      	orrs	r3, r2
    3c40:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3c42:	4a05      	ldr	r2, [pc, #20]	; (3c58 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3c44:	9b05      	ldr	r3, [sp, #20]
    3c46:	60d3      	str	r3, [r2, #12]
}
    3c48:	bf00      	nop
    3c4a:	b006      	add	sp, #24
    3c4c:	4770      	bx	lr
    3c4e:	bf00      	nop
    3c50:	0000bbfc 	.word	0x0000bbfc
    3c54:	0000b8ec 	.word	0x0000b8ec
    3c58:	40048000 	.word	0x40048000

00003c5c <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c5c:	b084      	sub	sp, #16
    3c5e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    3c60:	4b06      	ldr	r3, [pc, #24]	; (3c7c <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3c62:	685b      	ldr	r3, [r3, #4]
    3c64:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    3c66:	9b03      	ldr	r3, [sp, #12]
    3c68:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    3c6c:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3c6e:	4a03      	ldr	r2, [pc, #12]	; (3c7c <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3c70:	9b03      	ldr	r3, [sp, #12]
    3c72:	6053      	str	r3, [r2, #4]
}
    3c74:	bf00      	nop
    3c76:	b004      	add	sp, #16
    3c78:	4770      	bx	lr
    3c7a:	bf00      	nop
    3c7c:	40048000 	.word	0x40048000

00003c80 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c80:	b084      	sub	sp, #16
    3c82:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3c84:	9b01      	ldr	r3, [sp, #4]
    3c86:	685b      	ldr	r3, [r3, #4]
    3c88:	4a0a      	ldr	r2, [pc, #40]	; (3cb4 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    3c8a:	5cd3      	ldrb	r3, [r2, r3]
    3c8c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    3c8e:	4b0a      	ldr	r3, [pc, #40]	; (3cb8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3c90:	685b      	ldr	r3, [r3, #4]
    3c92:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    3c94:	9b02      	ldr	r3, [sp, #8]
    3c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3c9a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    3c9c:	9b03      	ldr	r3, [sp, #12]
    3c9e:	011b      	lsls	r3, r3, #4
    3ca0:	9a02      	ldr	r2, [sp, #8]
    3ca2:	4313      	orrs	r3, r2
    3ca4:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    3ca6:	4a04      	ldr	r2, [pc, #16]	; (3cb8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3ca8:	9b02      	ldr	r3, [sp, #8]
    3caa:	6053      	str	r3, [r2, #4]
}
    3cac:	bf00      	nop
    3cae:	b004      	add	sp, #16
    3cb0:	4770      	bx	lr
    3cb2:	bf00      	nop
    3cb4:	0000bbfc 	.word	0x0000bbfc
    3cb8:	40048000 	.word	0x40048000

00003cbc <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3cbc:	b084      	sub	sp, #16
    3cbe:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3cc0:	9b01      	ldr	r3, [sp, #4]
    3cc2:	681a      	ldr	r2, [r3, #0]
    3cc4:	490f      	ldr	r1, [pc, #60]	; (3d04 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    3cc6:	4613      	mov	r3, r2
    3cc8:	00db      	lsls	r3, r3, #3
    3cca:	4413      	add	r3, r2
    3ccc:	440b      	add	r3, r1
    3cce:	3304      	adds	r3, #4
    3cd0:	781b      	ldrb	r3, [r3, #0]
    3cd2:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    3cd4:	4a0c      	ldr	r2, [pc, #48]	; (3d08 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cd6:	9b03      	ldr	r3, [sp, #12]
    3cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3cdc:	490a      	ldr	r1, [pc, #40]	; (3d08 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cde:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    3ce2:	9b03      	ldr	r3, [sp, #12]
    3ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    3ce8:	4a07      	ldr	r2, [pc, #28]	; (3d08 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cea:	9b03      	ldr	r3, [sp, #12]
    3cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3cf0:	4905      	ldr	r1, [pc, #20]	; (3d08 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cf2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    3cf6:	9b03      	ldr	r3, [sp, #12]
    3cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3cfc:	bf00      	nop
    3cfe:	b004      	add	sp, #16
    3d00:	4770      	bx	lr
    3d02:	bf00      	nop
    3d04:	0000b8ec 	.word	0x0000b8ec
    3d08:	40065000 	.word	0x40065000

00003d0c <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d0c:	b086      	sub	sp, #24
    3d0e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3d10:	9b01      	ldr	r3, [sp, #4]
    3d12:	681a      	ldr	r2, [r3, #0]
    3d14:	4912      	ldr	r1, [pc, #72]	; (3d60 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    3d16:	4613      	mov	r3, r2
    3d18:	00db      	lsls	r3, r3, #3
    3d1a:	4413      	add	r3, r2
    3d1c:	440b      	add	r3, r1
    3d1e:	3304      	adds	r3, #4
    3d20:	781b      	ldrb	r3, [r3, #0]
    3d22:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d24:	9b01      	ldr	r3, [sp, #4]
    3d26:	685b      	ldr	r3, [r3, #4]
    3d28:	4a0e      	ldr	r2, [pc, #56]	; (3d64 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    3d2a:	5cd3      	ldrb	r3, [r2, r3]
    3d2c:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    3d2e:	4a0e      	ldr	r2, [pc, #56]	; (3d68 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3d30:	9b05      	ldr	r3, [sp, #20]
    3d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d36:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    3d38:	9b03      	ldr	r3, [sp, #12]
    3d3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    3d3e:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    3d40:	9b04      	ldr	r3, [sp, #16]
    3d42:	061b      	lsls	r3, r3, #24
    3d44:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    3d48:	9a03      	ldr	r2, [sp, #12]
    3d4a:	4313      	orrs	r3, r2
    3d4c:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    3d4e:	4906      	ldr	r1, [pc, #24]	; (3d68 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3d50:	9b05      	ldr	r3, [sp, #20]
    3d52:	9a03      	ldr	r2, [sp, #12]
    3d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3d58:	bf00      	nop
    3d5a:	b006      	add	sp, #24
    3d5c:	4770      	bx	lr
    3d5e:	bf00      	nop
    3d60:	0000b8ec 	.word	0x0000b8ec
    3d64:	0000bc84 	.word	0x0000bc84
    3d68:	40065000 	.word	0x40065000

00003d6c <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d6c:	b084      	sub	sp, #16
    3d6e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d70:	4b0b      	ldr	r3, [pc, #44]	; (3da0 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    3d72:	7f1b      	ldrb	r3, [r3, #28]
    3d74:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    3d76:	4b0b      	ldr	r3, [pc, #44]	; (3da4 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3d78:	685b      	ldr	r3, [r3, #4]
    3d7a:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3d7c:	9b02      	ldr	r3, [sp, #8]
    3d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3d82:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3d84:	9b03      	ldr	r3, [sp, #12]
    3d86:	031b      	lsls	r3, r3, #12
    3d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3d8c:	9a02      	ldr	r2, [sp, #8]
    3d8e:	4313      	orrs	r3, r2
    3d90:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3d92:	4a04      	ldr	r2, [pc, #16]	; (3da4 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3d94:	9b02      	ldr	r3, [sp, #8]
    3d96:	6053      	str	r3, [r2, #4]
}
    3d98:	bf00      	nop
    3d9a:	b004      	add	sp, #16
    3d9c:	4770      	bx	lr
    3d9e:	bf00      	nop
    3da0:	0000bbfc 	.word	0x0000bbfc
    3da4:	40048000 	.word	0x40048000

00003da8 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3da8:	b084      	sub	sp, #16
    3daa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3dac:	9b01      	ldr	r3, [sp, #4]
    3dae:	685b      	ldr	r3, [r3, #4]
    3db0:	4a0b      	ldr	r2, [pc, #44]	; (3de0 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    3db2:	5cd3      	ldrb	r3, [r2, r3]
    3db4:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    3db6:	4b0b      	ldr	r3, [pc, #44]	; (3de4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3db8:	685b      	ldr	r3, [r3, #4]
    3dba:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3dbc:	9b02      	ldr	r3, [sp, #8]
    3dbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3dc2:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3dc4:	9b03      	ldr	r3, [sp, #12]
    3dc6:	031b      	lsls	r3, r3, #12
    3dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3dcc:	9a02      	ldr	r2, [sp, #8]
    3dce:	4313      	orrs	r3, r2
    3dd0:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3dd2:	4a04      	ldr	r2, [pc, #16]	; (3de4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3dd4:	9b02      	ldr	r3, [sp, #8]
    3dd6:	6053      	str	r3, [r2, #4]
}
    3dd8:	bf00      	nop
    3dda:	b004      	add	sp, #16
    3ddc:	4770      	bx	lr
    3dde:	bf00      	nop
    3de0:	0000bbfc 	.word	0x0000bbfc
    3de4:	40048000 	.word	0x40048000

00003de8 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    3de8:	b500      	push	{lr}
    3dea:	b085      	sub	sp, #20
    3dec:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    3dee:	2300      	movs	r3, #0
    3df0:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    3df4:	9b01      	ldr	r3, [sp, #4]
    3df6:	2b00      	cmp	r3, #0
    3df8:	d037      	beq.n	3e6a <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3dfa:	2300      	movs	r3, #0
    3dfc:	9303      	str	r3, [sp, #12]
    3dfe:	e02b      	b.n	3e58 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3e00:	4b29      	ldr	r3, [pc, #164]	; (3ea8 <DisableSafeClock+0xc0>)
    3e02:	6819      	ldr	r1, [r3, #0]
    3e04:	9a03      	ldr	r2, [sp, #12]
    3e06:	4613      	mov	r3, r2
    3e08:	005b      	lsls	r3, r3, #1
    3e0a:	4413      	add	r3, r2
    3e0c:	009b      	lsls	r3, r3, #2
    3e0e:	440b      	add	r3, r1
    3e10:	3314      	adds	r3, #20
    3e12:	681b      	ldr	r3, [r3, #0]
    3e14:	2b05      	cmp	r3, #5
    3e16:	d11c      	bne.n	3e52 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    3e18:	2301      	movs	r3, #1
    3e1a:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    3e1e:	4b22      	ldr	r3, [pc, #136]	; (3ea8 <DisableSafeClock+0xc0>)
    3e20:	6819      	ldr	r1, [r3, #0]
    3e22:	9a03      	ldr	r2, [sp, #12]
    3e24:	4613      	mov	r3, r2
    3e26:	005b      	lsls	r3, r3, #1
    3e28:	4413      	add	r3, r2
    3e2a:	009b      	lsls	r3, r3, #2
    3e2c:	440b      	add	r3, r1
    3e2e:	3318      	adds	r3, #24
    3e30:	881b      	ldrh	r3, [r3, #0]
    3e32:	2b00      	cmp	r3, #0
    3e34:	d118      	bne.n	3e68 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3e36:	4b1d      	ldr	r3, [pc, #116]	; (3eac <DisableSafeClock+0xc4>)
    3e38:	791b      	ldrb	r3, [r3, #4]
    3e3a:	4619      	mov	r1, r3
    3e3c:	4a1c      	ldr	r2, [pc, #112]	; (3eb0 <DisableSafeClock+0xc8>)
    3e3e:	460b      	mov	r3, r1
    3e40:	005b      	lsls	r3, r3, #1
    3e42:	440b      	add	r3, r1
    3e44:	009b      	lsls	r3, r3, #2
    3e46:	4413      	add	r3, r2
    3e48:	3308      	adds	r3, #8
    3e4a:	681b      	ldr	r3, [r3, #0]
    3e4c:	2005      	movs	r0, #5
    3e4e:	4798      	blx	r3
                }
                break;
    3e50:	e00a      	b.n	3e68 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3e52:	9b03      	ldr	r3, [sp, #12]
    3e54:	3301      	adds	r3, #1
    3e56:	9303      	str	r3, [sp, #12]
    3e58:	4b13      	ldr	r3, [pc, #76]	; (3ea8 <DisableSafeClock+0xc0>)
    3e5a:	681b      	ldr	r3, [r3, #0]
    3e5c:	7a1b      	ldrb	r3, [r3, #8]
    3e5e:	461a      	mov	r2, r3
    3e60:	9b03      	ldr	r3, [sp, #12]
    3e62:	4293      	cmp	r3, r2
    3e64:	d3cc      	bcc.n	3e00 <DisableSafeClock+0x18>
    3e66:	e000      	b.n	3e6a <DisableSafeClock+0x82>
                break;
    3e68:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    3e6a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3e6e:	f083 0301 	eor.w	r3, r3, #1
    3e72:	b2db      	uxtb	r3, r3
    3e74:	2b00      	cmp	r3, #0
    3e76:	d013      	beq.n	3ea0 <DisableSafeClock+0xb8>
    3e78:	4b0e      	ldr	r3, [pc, #56]	; (3eb4 <DisableSafeClock+0xcc>)
    3e7a:	781b      	ldrb	r3, [r3, #0]
    3e7c:	f083 0301 	eor.w	r3, r3, #1
    3e80:	b2db      	uxtb	r3, r3
    3e82:	2b00      	cmp	r3, #0
    3e84:	d00c      	beq.n	3ea0 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3e86:	4b09      	ldr	r3, [pc, #36]	; (3eac <DisableSafeClock+0xc4>)
    3e88:	791b      	ldrb	r3, [r3, #4]
    3e8a:	4619      	mov	r1, r3
    3e8c:	4a08      	ldr	r2, [pc, #32]	; (3eb0 <DisableSafeClock+0xc8>)
    3e8e:	460b      	mov	r3, r1
    3e90:	005b      	lsls	r3, r3, #1
    3e92:	440b      	add	r3, r1
    3e94:	009b      	lsls	r3, r3, #2
    3e96:	4413      	add	r3, r2
    3e98:	3308      	adds	r3, #8
    3e9a:	681b      	ldr	r3, [r3, #0]
    3e9c:	2005      	movs	r0, #5
    3e9e:	4798      	blx	r3
    }
}
    3ea0:	bf00      	nop
    3ea2:	b005      	add	sp, #20
    3ea4:	f85d fb04 	ldr.w	pc, [sp], #4
    3ea8:	1fff8bf8 	.word	0x1fff8bf8
    3eac:	0000b87c 	.word	0x0000b87c
    3eb0:	0000beac 	.word	0x0000beac
    3eb4:	1fff8b18 	.word	0x1fff8b18

00003eb8 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    3eb8:	4b06      	ldr	r3, [pc, #24]	; (3ed4 <SetFircToResetValue_TrustedCall+0x1c>)
    3eba:	2200      	movs	r2, #0
    3ebc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    3ec0:	4b04      	ldr	r3, [pc, #16]	; (3ed4 <SetFircToResetValue_TrustedCall+0x1c>)
    3ec2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ec6:	4a03      	ldr	r2, [pc, #12]	; (3ed4 <SetFircToResetValue_TrustedCall+0x1c>)
    3ec8:	f043 0301 	orr.w	r3, r3, #1
    3ecc:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3ed0:	bf00      	nop
    3ed2:	4770      	bx	lr
    3ed4:	40064000 	.word	0x40064000

00003ed8 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    3ed8:	b084      	sub	sp, #16
    3eda:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    3edc:	2303      	movs	r3, #3
    3ede:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3ee0:	2300      	movs	r3, #0
    3ee2:	9302      	str	r3, [sp, #8]
    3ee4:	e028      	b.n	3f38 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    3ee6:	9b01      	ldr	r3, [sp, #4]
    3ee8:	9a02      	ldr	r2, [sp, #8]
    3eea:	320d      	adds	r2, #13
    3eec:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3ef0:	2b28      	cmp	r3, #40	; 0x28
    3ef2:	d10b      	bne.n	3f0c <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3ef4:	9a01      	ldr	r2, [sp, #4]
    3ef6:	9b02      	ldr	r3, [sp, #8]
    3ef8:	330d      	adds	r3, #13
    3efa:	00db      	lsls	r3, r3, #3
    3efc:	4413      	add	r3, r2
    3efe:	685b      	ldr	r3, [r3, #4]
    3f00:	4a2b      	ldr	r2, [pc, #172]	; (3fb0 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    3f02:	5cd3      	ldrb	r3, [r2, r3]
    3f04:	011b      	lsls	r3, r3, #4
    3f06:	9a03      	ldr	r2, [sp, #12]
    3f08:	4313      	orrs	r3, r2
    3f0a:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    3f0c:	9b01      	ldr	r3, [sp, #4]
    3f0e:	9a02      	ldr	r2, [sp, #8]
    3f10:	320d      	adds	r2, #13
    3f12:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3f16:	2b29      	cmp	r3, #41	; 0x29
    3f18:	d10b      	bne.n	3f32 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3f1a:	9a01      	ldr	r2, [sp, #4]
    3f1c:	9b02      	ldr	r3, [sp, #8]
    3f1e:	330d      	adds	r3, #13
    3f20:	00db      	lsls	r3, r3, #3
    3f22:	4413      	add	r3, r2
    3f24:	685b      	ldr	r3, [r3, #4]
    3f26:	4a23      	ldr	r2, [pc, #140]	; (3fb4 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    3f28:	5cd3      	ldrb	r3, [r2, r3]
    3f2a:	009b      	lsls	r3, r3, #2
    3f2c:	9a03      	ldr	r2, [sp, #12]
    3f2e:	4313      	orrs	r3, r2
    3f30:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3f32:	9b02      	ldr	r3, [sp, #8]
    3f34:	3301      	adds	r3, #1
    3f36:	9302      	str	r3, [sp, #8]
    3f38:	9b01      	ldr	r3, [sp, #4]
    3f3a:	7adb      	ldrb	r3, [r3, #11]
    3f3c:	461a      	mov	r2, r3
    3f3e:	9b02      	ldr	r3, [sp, #8]
    3f40:	4293      	cmp	r3, r2
    3f42:	d3d0      	bcc.n	3ee6 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3f44:	2300      	movs	r3, #0
    3f46:	9302      	str	r3, [sp, #8]
    3f48:	e026      	b.n	3f98 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    3f4a:	9a01      	ldr	r2, [sp, #4]
    3f4c:	9b02      	ldr	r3, [sp, #8]
    3f4e:	334e      	adds	r3, #78	; 0x4e
    3f50:	00db      	lsls	r3, r3, #3
    3f52:	4413      	add	r3, r2
    3f54:	685b      	ldr	r3, [r3, #4]
    3f56:	2b12      	cmp	r3, #18
    3f58:	d109      	bne.n	3f6e <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3f5a:	9a01      	ldr	r2, [sp, #4]
    3f5c:	9b02      	ldr	r3, [sp, #8]
    3f5e:	334e      	adds	r3, #78	; 0x4e
    3f60:	00db      	lsls	r3, r3, #3
    3f62:	4413      	add	r3, r2
    3f64:	891b      	ldrh	r3, [r3, #8]
    3f66:	005b      	lsls	r3, r3, #1
    3f68:	9a03      	ldr	r2, [sp, #12]
    3f6a:	4313      	orrs	r3, r2
    3f6c:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    3f6e:	9a01      	ldr	r2, [sp, #4]
    3f70:	9b02      	ldr	r3, [sp, #8]
    3f72:	334e      	adds	r3, #78	; 0x4e
    3f74:	00db      	lsls	r3, r3, #3
    3f76:	4413      	add	r3, r2
    3f78:	685b      	ldr	r3, [r3, #4]
    3f7a:	2b13      	cmp	r3, #19
    3f7c:	d109      	bne.n	3f92 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3f7e:	9a01      	ldr	r2, [sp, #4]
    3f80:	9b02      	ldr	r3, [sp, #8]
    3f82:	334e      	adds	r3, #78	; 0x4e
    3f84:	00db      	lsls	r3, r3, #3
    3f86:	4413      	add	r3, r2
    3f88:	891b      	ldrh	r3, [r3, #8]
    3f8a:	461a      	mov	r2, r3
    3f8c:	9b03      	ldr	r3, [sp, #12]
    3f8e:	4313      	orrs	r3, r2
    3f90:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3f92:	9b02      	ldr	r3, [sp, #8]
    3f94:	3301      	adds	r3, #1
    3f96:	9302      	str	r3, [sp, #8]
    3f98:	9b01      	ldr	r3, [sp, #4]
    3f9a:	7c1b      	ldrb	r3, [r3, #16]
    3f9c:	461a      	mov	r2, r3
    3f9e:	9b02      	ldr	r3, [sp, #8]
    3fa0:	4293      	cmp	r3, r2
    3fa2:	d3d2      	bcc.n	3f4a <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    3fa4:	4a04      	ldr	r2, [pc, #16]	; (3fb8 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    3fa6:	9b03      	ldr	r3, [sp, #12]
    3fa8:	6113      	str	r3, [r2, #16]
}
    3faa:	bf00      	nop
    3fac:	b004      	add	sp, #16
    3fae:	4770      	bx	lr
    3fb0:	0000bbfc 	.word	0x0000bbfc
    3fb4:	0000bcb4 	.word	0x0000bcb4
    3fb8:	40048000 	.word	0x40048000

00003fbc <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    3fbc:	b500      	push	{lr}
    3fbe:	b089      	sub	sp, #36	; 0x24
    3fc0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3fc2:	2300      	movs	r3, #0
    3fc4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    3fc8:	4a21      	ldr	r2, [pc, #132]	; (4050 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    3fca:	9b01      	ldr	r3, [sp, #4]
    3fcc:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    3fce:	4b21      	ldr	r3, [pc, #132]	; (4054 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3fd0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fd4:	f003 0301 	and.w	r3, r3, #1
    3fd8:	2b00      	cmp	r3, #0
    3fda:	d12e      	bne.n	403a <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    3fdc:	4b1e      	ldr	r3, [pc, #120]	; (4058 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3fde:	2200      	movs	r2, #0
    3fe0:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    3fe2:	f7ff ff69 	bl	3eb8 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3fe6:	aa03      	add	r2, sp, #12
    3fe8:	a904      	add	r1, sp, #16
    3fea:	a805      	add	r0, sp, #20
    3fec:	f24c 3350 	movw	r3, #50000	; 0xc350
    3ff0:	f7fe f8ae 	bl	2150 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3ff4:	4b17      	ldr	r3, [pc, #92]	; (4054 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3ff6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ffa:	0e1b      	lsrs	r3, r3, #24
    3ffc:	f003 0301 	and.w	r3, r3, #1
    4000:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4002:	9a03      	ldr	r2, [sp, #12]
    4004:	a904      	add	r1, sp, #16
    4006:	ab05      	add	r3, sp, #20
    4008:	4618      	mov	r0, r3
    400a:	f7fe f8bb 	bl	2184 <Clock_Ip_TimeoutExpired>
    400e:	4603      	mov	r3, r0
    4010:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4014:	9b06      	ldr	r3, [sp, #24]
    4016:	2b00      	cmp	r3, #0
    4018:	d106      	bne.n	4028 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    401a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    401e:	f083 0301 	eor.w	r3, r3, #1
    4022:	b2db      	uxtb	r3, r3
    4024:	2b00      	cmp	r3, #0
    4026:	d1e5      	bne.n	3ff4 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4028:	f89d 301f 	ldrb.w	r3, [sp, #31]
    402c:	2b00      	cmp	r3, #0
    402e:	d007      	beq.n	4040 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4030:	2105      	movs	r1, #5
    4032:	2001      	movs	r0, #1
    4034:	f7fe f87c 	bl	2130 <Clock_Ip_ReportClockErrors>
    4038:	e002      	b.n	4040 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    403a:	4b07      	ldr	r3, [pc, #28]	; (4058 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    403c:	2201      	movs	r2, #1
    403e:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4040:	9801      	ldr	r0, [sp, #4]
    4042:	f7ff ff49 	bl	3ed8 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4046:	bf00      	nop
    4048:	b009      	add	sp, #36	; 0x24
    404a:	f85d fb04 	ldr.w	pc, [sp], #4
    404e:	bf00      	nop
    4050:	1fff8bf8 	.word	0x1fff8bf8
    4054:	40064000 	.word	0x40064000
    4058:	1fff8b18 	.word	0x1fff8b18

0000405c <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    405c:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    405e:	2300      	movs	r3, #0
    4060:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4062:	4b29      	ldr	r3, [pc, #164]	; (4108 <getFircConfig+0xac>)
    4064:	681b      	ldr	r3, [r3, #0]
    4066:	2b00      	cmp	r3, #0
    4068:	d024      	beq.n	40b4 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    406a:	2300      	movs	r3, #0
    406c:	9301      	str	r3, [sp, #4]
    406e:	e01a      	b.n	40a6 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4070:	4b25      	ldr	r3, [pc, #148]	; (4108 <getFircConfig+0xac>)
    4072:	6819      	ldr	r1, [r3, #0]
    4074:	9a01      	ldr	r2, [sp, #4]
    4076:	4613      	mov	r3, r2
    4078:	005b      	lsls	r3, r3, #1
    407a:	4413      	add	r3, r2
    407c:	009b      	lsls	r3, r3, #2
    407e:	440b      	add	r3, r1
    4080:	3314      	adds	r3, #20
    4082:	681b      	ldr	r3, [r3, #0]
    4084:	2b05      	cmp	r3, #5
    4086:	d10b      	bne.n	40a0 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4088:	4b1f      	ldr	r3, [pc, #124]	; (4108 <getFircConfig+0xac>)
    408a:	6819      	ldr	r1, [r3, #0]
    408c:	9a01      	ldr	r2, [sp, #4]
    408e:	4613      	mov	r3, r2
    4090:	005b      	lsls	r3, r3, #1
    4092:	4413      	add	r3, r2
    4094:	009b      	lsls	r3, r3, #2
    4096:	3310      	adds	r3, #16
    4098:	440b      	add	r3, r1
    409a:	3304      	adds	r3, #4
    409c:	9300      	str	r3, [sp, #0]
                break;
    409e:	e009      	b.n	40b4 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    40a0:	9b01      	ldr	r3, [sp, #4]
    40a2:	3301      	adds	r3, #1
    40a4:	9301      	str	r3, [sp, #4]
    40a6:	4b18      	ldr	r3, [pc, #96]	; (4108 <getFircConfig+0xac>)
    40a8:	681b      	ldr	r3, [r3, #0]
    40aa:	7a1b      	ldrb	r3, [r3, #8]
    40ac:	461a      	mov	r2, r3
    40ae:	9b01      	ldr	r3, [sp, #4]
    40b0:	4293      	cmp	r3, r2
    40b2:	d3dd      	bcc.n	4070 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    40b4:	9b00      	ldr	r3, [sp, #0]
    40b6:	2b00      	cmp	r3, #0
    40b8:	d121      	bne.n	40fe <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    40ba:	4b14      	ldr	r3, [pc, #80]	; (410c <getFircConfig+0xb0>)
    40bc:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    40be:	4b13      	ldr	r3, [pc, #76]	; (410c <getFircConfig+0xb0>)
    40c0:	2205      	movs	r2, #5
    40c2:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    40c4:	4b12      	ldr	r3, [pc, #72]	; (4110 <getFircConfig+0xb4>)
    40c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40ca:	b29b      	uxth	r3, r3
    40cc:	f003 0301 	and.w	r3, r3, #1
    40d0:	b29a      	uxth	r2, r3
    40d2:	4b0e      	ldr	r3, [pc, #56]	; (410c <getFircConfig+0xb0>)
    40d4:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    40d6:	4b0e      	ldr	r3, [pc, #56]	; (4110 <getFircConfig+0xb4>)
    40d8:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    40dc:	b2db      	uxtb	r3, r3
    40de:	f003 0303 	and.w	r3, r3, #3
    40e2:	b2da      	uxtb	r2, r3
    40e4:	4b09      	ldr	r3, [pc, #36]	; (410c <getFircConfig+0xb0>)
    40e6:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    40e8:	4b09      	ldr	r3, [pc, #36]	; (4110 <getFircConfig+0xb4>)
    40ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40ee:	b2db      	uxtb	r3, r3
    40f0:	10db      	asrs	r3, r3, #3
    40f2:	b2db      	uxtb	r3, r3
    40f4:	f003 0301 	and.w	r3, r3, #1
    40f8:	b2da      	uxtb	r2, r3
    40fa:	4b04      	ldr	r3, [pc, #16]	; (410c <getFircConfig+0xb0>)
    40fc:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    40fe:	9b00      	ldr	r3, [sp, #0]
}
    4100:	4618      	mov	r0, r3
    4102:	b002      	add	sp, #8
    4104:	4770      	bx	lr
    4106:	bf00      	nop
    4108:	1fff8bf8 	.word	0x1fff8bf8
    410c:	1fff8c64 	.word	0x1fff8c64
    4110:	40064000 	.word	0x40064000

00004114 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4114:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4116:	2300      	movs	r3, #0
    4118:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    411a:	4b20      	ldr	r3, [pc, #128]	; (419c <getSoscConfig+0x88>)
    411c:	681b      	ldr	r3, [r3, #0]
    411e:	2b00      	cmp	r3, #0
    4120:	d024      	beq.n	416c <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4122:	2300      	movs	r3, #0
    4124:	9301      	str	r3, [sp, #4]
    4126:	e01a      	b.n	415e <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4128:	4b1c      	ldr	r3, [pc, #112]	; (419c <getSoscConfig+0x88>)
    412a:	6819      	ldr	r1, [r3, #0]
    412c:	9a01      	ldr	r2, [sp, #4]
    412e:	4613      	mov	r3, r2
    4130:	009b      	lsls	r3, r3, #2
    4132:	4413      	add	r3, r2
    4134:	009b      	lsls	r3, r3, #2
    4136:	440b      	add	r3, r1
    4138:	332c      	adds	r3, #44	; 0x2c
    413a:	681b      	ldr	r3, [r3, #0]
    413c:	2b08      	cmp	r3, #8
    413e:	d10b      	bne.n	4158 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4140:	4b16      	ldr	r3, [pc, #88]	; (419c <getSoscConfig+0x88>)
    4142:	6819      	ldr	r1, [r3, #0]
    4144:	9a01      	ldr	r2, [sp, #4]
    4146:	4613      	mov	r3, r2
    4148:	009b      	lsls	r3, r3, #2
    414a:	4413      	add	r3, r2
    414c:	009b      	lsls	r3, r3, #2
    414e:	3328      	adds	r3, #40	; 0x28
    4150:	440b      	add	r3, r1
    4152:	3304      	adds	r3, #4
    4154:	9300      	str	r3, [sp, #0]
                break;
    4156:	e009      	b.n	416c <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4158:	9b01      	ldr	r3, [sp, #4]
    415a:	3301      	adds	r3, #1
    415c:	9301      	str	r3, [sp, #4]
    415e:	4b0f      	ldr	r3, [pc, #60]	; (419c <getSoscConfig+0x88>)
    4160:	681b      	ldr	r3, [r3, #0]
    4162:	7a5b      	ldrb	r3, [r3, #9]
    4164:	461a      	mov	r2, r3
    4166:	9b01      	ldr	r3, [sp, #4]
    4168:	4293      	cmp	r3, r2
    416a:	d3dd      	bcc.n	4128 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    416c:	9b00      	ldr	r3, [sp, #0]
    416e:	2b00      	cmp	r3, #0
    4170:	d110      	bne.n	4194 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4172:	4b0b      	ldr	r3, [pc, #44]	; (41a0 <getSoscConfig+0x8c>)
    4174:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4176:	4b0a      	ldr	r3, [pc, #40]	; (41a0 <getSoscConfig+0x8c>)
    4178:	2208      	movs	r2, #8
    417a:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    417c:	4b09      	ldr	r3, [pc, #36]	; (41a4 <getSoscConfig+0x90>)
    417e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4182:	b29b      	uxth	r3, r3
    4184:	f003 0301 	and.w	r3, r3, #1
    4188:	b29a      	uxth	r2, r3
    418a:	4b05      	ldr	r3, [pc, #20]	; (41a0 <getSoscConfig+0x8c>)
    418c:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    418e:	4b04      	ldr	r3, [pc, #16]	; (41a0 <getSoscConfig+0x8c>)
    4190:	4a05      	ldr	r2, [pc, #20]	; (41a8 <getSoscConfig+0x94>)
    4192:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4194:	9b00      	ldr	r3, [sp, #0]
}
    4196:	4618      	mov	r0, r3
    4198:	b002      	add	sp, #8
    419a:	4770      	bx	lr
    419c:	1fff8bf8 	.word	0x1fff8bf8
    41a0:	1fff8c70 	.word	0x1fff8c70
    41a4:	40064000 	.word	0x40064000
    41a8:	02625a00 	.word	0x02625a00

000041ac <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    41ac:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    41ae:	2300      	movs	r3, #0
    41b0:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    41b2:	4b28      	ldr	r3, [pc, #160]	; (4254 <getSpllConfig+0xa8>)
    41b4:	681b      	ldr	r3, [r3, #0]
    41b6:	2b00      	cmp	r3, #0
    41b8:	d023      	beq.n	4202 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    41ba:	2300      	movs	r3, #0
    41bc:	9301      	str	r3, [sp, #4]
    41be:	e019      	b.n	41f4 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    41c0:	4b24      	ldr	r3, [pc, #144]	; (4254 <getSpllConfig+0xa8>)
    41c2:	6819      	ldr	r1, [r3, #0]
    41c4:	9a01      	ldr	r2, [sp, #4]
    41c6:	4613      	mov	r3, r2
    41c8:	009b      	lsls	r3, r3, #2
    41ca:	4413      	add	r3, r2
    41cc:	00db      	lsls	r3, r3, #3
    41ce:	440b      	add	r3, r1
    41d0:	3340      	adds	r3, #64	; 0x40
    41d2:	681b      	ldr	r3, [r3, #0]
    41d4:	2b09      	cmp	r3, #9
    41d6:	d10a      	bne.n	41ee <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    41d8:	4b1e      	ldr	r3, [pc, #120]	; (4254 <getSpllConfig+0xa8>)
    41da:	6819      	ldr	r1, [r3, #0]
    41dc:	9a01      	ldr	r2, [sp, #4]
    41de:	4613      	mov	r3, r2
    41e0:	009b      	lsls	r3, r3, #2
    41e2:	4413      	add	r3, r2
    41e4:	00db      	lsls	r3, r3, #3
    41e6:	3340      	adds	r3, #64	; 0x40
    41e8:	440b      	add	r3, r1
    41ea:	9300      	str	r3, [sp, #0]
                break;
    41ec:	e009      	b.n	4202 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    41ee:	9b01      	ldr	r3, [sp, #4]
    41f0:	3301      	adds	r3, #1
    41f2:	9301      	str	r3, [sp, #4]
    41f4:	4b17      	ldr	r3, [pc, #92]	; (4254 <getSpllConfig+0xa8>)
    41f6:	681b      	ldr	r3, [r3, #0]
    41f8:	7a9b      	ldrb	r3, [r3, #10]
    41fa:	461a      	mov	r2, r3
    41fc:	9b01      	ldr	r3, [sp, #4]
    41fe:	4293      	cmp	r3, r2
    4200:	d3de      	bcc.n	41c0 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4202:	9b00      	ldr	r3, [sp, #0]
    4204:	2b00      	cmp	r3, #0
    4206:	d121      	bne.n	424c <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4208:	4b13      	ldr	r3, [pc, #76]	; (4258 <getSpllConfig+0xac>)
    420a:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    420c:	4b12      	ldr	r3, [pc, #72]	; (4258 <getSpllConfig+0xac>)
    420e:	2209      	movs	r2, #9
    4210:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4212:	4b12      	ldr	r3, [pc, #72]	; (425c <getSpllConfig+0xb0>)
    4214:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4218:	b29b      	uxth	r3, r3
    421a:	f003 0301 	and.w	r3, r3, #1
    421e:	b29a      	uxth	r2, r3
    4220:	4b0d      	ldr	r3, [pc, #52]	; (4258 <getSpllConfig+0xac>)
    4222:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4224:	4b0d      	ldr	r3, [pc, #52]	; (425c <getSpllConfig+0xb0>)
    4226:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    422a:	0a1b      	lsrs	r3, r3, #8
    422c:	b2db      	uxtb	r3, r3
    422e:	f003 0307 	and.w	r3, r3, #7
    4232:	b2da      	uxtb	r2, r3
    4234:	4b08      	ldr	r3, [pc, #32]	; (4258 <getSpllConfig+0xac>)
    4236:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4238:	4b08      	ldr	r3, [pc, #32]	; (425c <getSpllConfig+0xb0>)
    423a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    423e:	0c1b      	lsrs	r3, r3, #16
    4240:	b2db      	uxtb	r3, r3
    4242:	f003 031f 	and.w	r3, r3, #31
    4246:	b2da      	uxtb	r2, r3
    4248:	4b03      	ldr	r3, [pc, #12]	; (4258 <getSpllConfig+0xac>)
    424a:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    424c:	9b00      	ldr	r3, [sp, #0]
}
    424e:	4618      	mov	r0, r3
    4250:	b002      	add	sp, #8
    4252:	4770      	bx	lr
    4254:	1fff8bf8 	.word	0x1fff8bf8
    4258:	1fff8c84 	.word	0x1fff8c84
    425c:	40064000 	.word	0x40064000

00004260 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4260:	b086      	sub	sp, #24
    4262:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4264:	2300      	movs	r3, #0
    4266:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4268:	9b01      	ldr	r3, [sp, #4]
    426a:	2b1b      	cmp	r3, #27
    426c:	d00f      	beq.n	428e <getSelectorConfig+0x2e>
    426e:	9b01      	ldr	r3, [sp, #4]
    4270:	2b1b      	cmp	r3, #27
    4272:	d80f      	bhi.n	4294 <getSelectorConfig+0x34>
    4274:	9b01      	ldr	r3, [sp, #4]
    4276:	2b19      	cmp	r3, #25
    4278:	d003      	beq.n	4282 <getSelectorConfig+0x22>
    427a:	9b01      	ldr	r3, [sp, #4]
    427c:	2b1a      	cmp	r3, #26
    427e:	d003      	beq.n	4288 <getSelectorConfig+0x28>
    4280:	e008      	b.n	4294 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4282:	2300      	movs	r3, #0
    4284:	9304      	str	r3, [sp, #16]
            break;
    4286:	e008      	b.n	429a <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4288:	2301      	movs	r3, #1
    428a:	9304      	str	r3, [sp, #16]
            break;
    428c:	e005      	b.n	429a <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    428e:	2302      	movs	r3, #2
    4290:	9304      	str	r3, [sp, #16]
            break;
    4292:	e002      	b.n	429a <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4294:	2300      	movs	r3, #0
    4296:	9304      	str	r3, [sp, #16]
            break;
    4298:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    429a:	4b36      	ldr	r3, [pc, #216]	; (4374 <getSelectorConfig+0x114>)
    429c:	681b      	ldr	r3, [r3, #0]
    429e:	2b00      	cmp	r3, #0
    42a0:	d01d      	beq.n	42de <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    42a2:	2300      	movs	r3, #0
    42a4:	9303      	str	r3, [sp, #12]
    42a6:	e013      	b.n	42d0 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    42a8:	4b32      	ldr	r3, [pc, #200]	; (4374 <getSelectorConfig+0x114>)
    42aa:	681b      	ldr	r3, [r3, #0]
    42ac:	9a03      	ldr	r2, [sp, #12]
    42ae:	320d      	adds	r2, #13
    42b0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    42b4:	9a01      	ldr	r2, [sp, #4]
    42b6:	429a      	cmp	r2, r3
    42b8:	d107      	bne.n	42ca <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    42ba:	4b2e      	ldr	r3, [pc, #184]	; (4374 <getSelectorConfig+0x114>)
    42bc:	681a      	ldr	r2, [r3, #0]
    42be:	9b03      	ldr	r3, [sp, #12]
    42c0:	330d      	adds	r3, #13
    42c2:	00db      	lsls	r3, r3, #3
    42c4:	4413      	add	r3, r2
    42c6:	9305      	str	r3, [sp, #20]
                break;
    42c8:	e009      	b.n	42de <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    42ca:	9b03      	ldr	r3, [sp, #12]
    42cc:	3301      	adds	r3, #1
    42ce:	9303      	str	r3, [sp, #12]
    42d0:	4b28      	ldr	r3, [pc, #160]	; (4374 <getSelectorConfig+0x114>)
    42d2:	681b      	ldr	r3, [r3, #0]
    42d4:	7adb      	ldrb	r3, [r3, #11]
    42d6:	461a      	mov	r2, r3
    42d8:	9b03      	ldr	r3, [sp, #12]
    42da:	4293      	cmp	r3, r2
    42dc:	d3e4      	bcc.n	42a8 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    42de:	9b05      	ldr	r3, [sp, #20]
    42e0:	2b00      	cmp	r3, #0
    42e2:	d140      	bne.n	4366 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    42e4:	9b04      	ldr	r3, [sp, #16]
    42e6:	00db      	lsls	r3, r3, #3
    42e8:	4a23      	ldr	r2, [pc, #140]	; (4378 <getSelectorConfig+0x118>)
    42ea:	4413      	add	r3, r2
    42ec:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    42ee:	4922      	ldr	r1, [pc, #136]	; (4378 <getSelectorConfig+0x118>)
    42f0:	9b04      	ldr	r3, [sp, #16]
    42f2:	9a01      	ldr	r2, [sp, #4]
    42f4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    42f8:	9b01      	ldr	r3, [sp, #4]
    42fa:	2b1b      	cmp	r3, #27
    42fc:	d025      	beq.n	434a <getSelectorConfig+0xea>
    42fe:	9b01      	ldr	r3, [sp, #4]
    4300:	2b1b      	cmp	r3, #27
    4302:	d832      	bhi.n	436a <getSelectorConfig+0x10a>
    4304:	9b01      	ldr	r3, [sp, #4]
    4306:	2b19      	cmp	r3, #25
    4308:	d003      	beq.n	4312 <getSelectorConfig+0xb2>
    430a:	9b01      	ldr	r3, [sp, #4]
    430c:	2b1a      	cmp	r3, #26
    430e:	d00e      	beq.n	432e <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4310:	e02b      	b.n	436a <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4312:	4b1a      	ldr	r3, [pc, #104]	; (437c <getSelectorConfig+0x11c>)
    4314:	695b      	ldr	r3, [r3, #20]
    4316:	0e1b      	lsrs	r3, r3, #24
    4318:	f003 030f 	and.w	r3, r3, #15
    431c:	4a18      	ldr	r2, [pc, #96]	; (4380 <getSelectorConfig+0x120>)
    431e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4322:	4915      	ldr	r1, [pc, #84]	; (4378 <getSelectorConfig+0x118>)
    4324:	9b04      	ldr	r3, [sp, #16]
    4326:	00db      	lsls	r3, r3, #3
    4328:	440b      	add	r3, r1
    432a:	605a      	str	r2, [r3, #4]
                break;
    432c:	e01e      	b.n	436c <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    432e:	4b13      	ldr	r3, [pc, #76]	; (437c <getSelectorConfig+0x11c>)
    4330:	699b      	ldr	r3, [r3, #24]
    4332:	0e1b      	lsrs	r3, r3, #24
    4334:	f003 030f 	and.w	r3, r3, #15
    4338:	4a11      	ldr	r2, [pc, #68]	; (4380 <getSelectorConfig+0x120>)
    433a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    433e:	490e      	ldr	r1, [pc, #56]	; (4378 <getSelectorConfig+0x118>)
    4340:	9b04      	ldr	r3, [sp, #16]
    4342:	00db      	lsls	r3, r3, #3
    4344:	440b      	add	r3, r1
    4346:	605a      	str	r2, [r3, #4]
                break;
    4348:	e010      	b.n	436c <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    434a:	4b0c      	ldr	r3, [pc, #48]	; (437c <getSelectorConfig+0x11c>)
    434c:	69db      	ldr	r3, [r3, #28]
    434e:	0e1b      	lsrs	r3, r3, #24
    4350:	f003 030f 	and.w	r3, r3, #15
    4354:	4a0a      	ldr	r2, [pc, #40]	; (4380 <getSelectorConfig+0x120>)
    4356:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    435a:	4907      	ldr	r1, [pc, #28]	; (4378 <getSelectorConfig+0x118>)
    435c:	9b04      	ldr	r3, [sp, #16]
    435e:	00db      	lsls	r3, r3, #3
    4360:	440b      	add	r3, r1
    4362:	605a      	str	r2, [r3, #4]
                break;
    4364:	e002      	b.n	436c <getSelectorConfig+0x10c>
        }
    }
    4366:	bf00      	nop
    4368:	e000      	b.n	436c <getSelectorConfig+0x10c>
                break;
    436a:	bf00      	nop

    return ReturnValue;
    436c:	9b05      	ldr	r3, [sp, #20]
}
    436e:	4618      	mov	r0, r3
    4370:	b006      	add	sp, #24
    4372:	4770      	bx	lr
    4374:	1fff8bf8 	.word	0x1fff8bf8
    4378:	1fff8cac 	.word	0x1fff8cac
    437c:	40064000 	.word	0x40064000
    4380:	0000bf7c 	.word	0x0000bf7c

00004384 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4384:	b086      	sub	sp, #24
    4386:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4388:	2300      	movs	r3, #0
    438a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    438c:	2300      	movs	r3, #0
    438e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4390:	9b01      	ldr	r3, [sp, #4]
    4392:	2b1f      	cmp	r3, #31
    4394:	d00f      	beq.n	43b6 <getCoreDividerConfig+0x32>
    4396:	9b01      	ldr	r3, [sp, #4]
    4398:	2b1f      	cmp	r3, #31
    439a:	d80f      	bhi.n	43bc <getCoreDividerConfig+0x38>
    439c:	9b01      	ldr	r3, [sp, #4]
    439e:	2b1d      	cmp	r3, #29
    43a0:	d003      	beq.n	43aa <getCoreDividerConfig+0x26>
    43a2:	9b01      	ldr	r3, [sp, #4]
    43a4:	2b1e      	cmp	r3, #30
    43a6:	d003      	beq.n	43b0 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    43a8:	e008      	b.n	43bc <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    43aa:	2300      	movs	r3, #0
    43ac:	9304      	str	r3, [sp, #16]
            break;
    43ae:	e006      	b.n	43be <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    43b0:	2301      	movs	r3, #1
    43b2:	9304      	str	r3, [sp, #16]
            break;
    43b4:	e003      	b.n	43be <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    43b6:	2302      	movs	r3, #2
    43b8:	9304      	str	r3, [sp, #16]
            break;
    43ba:	e000      	b.n	43be <getCoreDividerConfig+0x3a>
                break;
    43bc:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    43be:	4b41      	ldr	r3, [pc, #260]	; (44c4 <getCoreDividerConfig+0x140>)
    43c0:	681b      	ldr	r3, [r3, #0]
    43c2:	2b00      	cmp	r3, #0
    43c4:	d026      	beq.n	4414 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    43c6:	2300      	movs	r3, #0
    43c8:	9303      	str	r3, [sp, #12]
    43ca:	e01c      	b.n	4406 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    43cc:	4b3d      	ldr	r3, [pc, #244]	; (44c4 <getCoreDividerConfig+0x140>)
    43ce:	6819      	ldr	r1, [r3, #0]
    43d0:	9a03      	ldr	r2, [sp, #12]
    43d2:	4613      	mov	r3, r2
    43d4:	005b      	lsls	r3, r3, #1
    43d6:	4413      	add	r3, r2
    43d8:	009b      	lsls	r3, r3, #2
    43da:	440b      	add	r3, r1
    43dc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    43e0:	681b      	ldr	r3, [r3, #0]
    43e2:	9a01      	ldr	r2, [sp, #4]
    43e4:	429a      	cmp	r2, r3
    43e6:	d10b      	bne.n	4400 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    43e8:	4b36      	ldr	r3, [pc, #216]	; (44c4 <getCoreDividerConfig+0x140>)
    43ea:	6819      	ldr	r1, [r3, #0]
    43ec:	9a03      	ldr	r2, [sp, #12]
    43ee:	4613      	mov	r3, r2
    43f0:	005b      	lsls	r3, r3, #1
    43f2:	4413      	add	r3, r2
    43f4:	009b      	lsls	r3, r3, #2
    43f6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    43fa:	440b      	add	r3, r1
    43fc:	9305      	str	r3, [sp, #20]
                break;
    43fe:	e009      	b.n	4414 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4400:	9b03      	ldr	r3, [sp, #12]
    4402:	3301      	adds	r3, #1
    4404:	9303      	str	r3, [sp, #12]
    4406:	4b2f      	ldr	r3, [pc, #188]	; (44c4 <getCoreDividerConfig+0x140>)
    4408:	681b      	ldr	r3, [r3, #0]
    440a:	7b1b      	ldrb	r3, [r3, #12]
    440c:	461a      	mov	r2, r3
    440e:	9b03      	ldr	r3, [sp, #12]
    4410:	4293      	cmp	r3, r2
    4412:	d3db      	bcc.n	43cc <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4414:	9b05      	ldr	r3, [sp, #20]
    4416:	2b00      	cmp	r3, #0
    4418:	d14d      	bne.n	44b6 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    441a:	9a04      	ldr	r2, [sp, #16]
    441c:	4613      	mov	r3, r2
    441e:	005b      	lsls	r3, r3, #1
    4420:	4413      	add	r3, r2
    4422:	009b      	lsls	r3, r3, #2
    4424:	4a28      	ldr	r2, [pc, #160]	; (44c8 <getCoreDividerConfig+0x144>)
    4426:	4413      	add	r3, r2
    4428:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    442a:	4927      	ldr	r1, [pc, #156]	; (44c8 <getCoreDividerConfig+0x144>)
    442c:	9a04      	ldr	r2, [sp, #16]
    442e:	4613      	mov	r3, r2
    4430:	005b      	lsls	r3, r3, #1
    4432:	4413      	add	r3, r2
    4434:	009b      	lsls	r3, r3, #2
    4436:	440b      	add	r3, r1
    4438:	9a01      	ldr	r2, [sp, #4]
    443a:	601a      	str	r2, [r3, #0]
        switch(Name)
    443c:	9b01      	ldr	r3, [sp, #4]
    443e:	2b1f      	cmp	r3, #31
    4440:	d029      	beq.n	4496 <getCoreDividerConfig+0x112>
    4442:	9b01      	ldr	r3, [sp, #4]
    4444:	2b1f      	cmp	r3, #31
    4446:	d838      	bhi.n	44ba <getCoreDividerConfig+0x136>
    4448:	9b01      	ldr	r3, [sp, #4]
    444a:	2b1d      	cmp	r3, #29
    444c:	d003      	beq.n	4456 <getCoreDividerConfig+0xd2>
    444e:	9b01      	ldr	r3, [sp, #4]
    4450:	2b1e      	cmp	r3, #30
    4452:	d010      	beq.n	4476 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4454:	e031      	b.n	44ba <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4456:	4b1d      	ldr	r3, [pc, #116]	; (44cc <getCoreDividerConfig+0x148>)
    4458:	695b      	ldr	r3, [r3, #20]
    445a:	0c1b      	lsrs	r3, r3, #16
    445c:	f003 030f 	and.w	r3, r3, #15
    4460:	1c59      	adds	r1, r3, #1
    4462:	4819      	ldr	r0, [pc, #100]	; (44c8 <getCoreDividerConfig+0x144>)
    4464:	9a04      	ldr	r2, [sp, #16]
    4466:	4613      	mov	r3, r2
    4468:	005b      	lsls	r3, r3, #1
    446a:	4413      	add	r3, r2
    446c:	009b      	lsls	r3, r3, #2
    446e:	4403      	add	r3, r0
    4470:	3304      	adds	r3, #4
    4472:	6019      	str	r1, [r3, #0]
                break;
    4474:	e022      	b.n	44bc <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4476:	4b15      	ldr	r3, [pc, #84]	; (44cc <getCoreDividerConfig+0x148>)
    4478:	699b      	ldr	r3, [r3, #24]
    447a:	0c1b      	lsrs	r3, r3, #16
    447c:	f003 030f 	and.w	r3, r3, #15
    4480:	1c59      	adds	r1, r3, #1
    4482:	4811      	ldr	r0, [pc, #68]	; (44c8 <getCoreDividerConfig+0x144>)
    4484:	9a04      	ldr	r2, [sp, #16]
    4486:	4613      	mov	r3, r2
    4488:	005b      	lsls	r3, r3, #1
    448a:	4413      	add	r3, r2
    448c:	009b      	lsls	r3, r3, #2
    448e:	4403      	add	r3, r0
    4490:	3304      	adds	r3, #4
    4492:	6019      	str	r1, [r3, #0]
                break;
    4494:	e012      	b.n	44bc <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4496:	4b0d      	ldr	r3, [pc, #52]	; (44cc <getCoreDividerConfig+0x148>)
    4498:	69db      	ldr	r3, [r3, #28]
    449a:	0c1b      	lsrs	r3, r3, #16
    449c:	f003 030f 	and.w	r3, r3, #15
    44a0:	1c59      	adds	r1, r3, #1
    44a2:	4809      	ldr	r0, [pc, #36]	; (44c8 <getCoreDividerConfig+0x144>)
    44a4:	9a04      	ldr	r2, [sp, #16]
    44a6:	4613      	mov	r3, r2
    44a8:	005b      	lsls	r3, r3, #1
    44aa:	4413      	add	r3, r2
    44ac:	009b      	lsls	r3, r3, #2
    44ae:	4403      	add	r3, r0
    44b0:	3304      	adds	r3, #4
    44b2:	6019      	str	r1, [r3, #0]
                break;
    44b4:	e002      	b.n	44bc <getCoreDividerConfig+0x138>
        }
    }
    44b6:	bf00      	nop
    44b8:	e000      	b.n	44bc <getCoreDividerConfig+0x138>
                break;
    44ba:	bf00      	nop

    return ReturnValue;
    44bc:	9b05      	ldr	r3, [sp, #20]
}
    44be:	4618      	mov	r0, r3
    44c0:	b006      	add	sp, #24
    44c2:	4770      	bx	lr
    44c4:	1fff8bf8 	.word	0x1fff8bf8
    44c8:	1fff8cc4 	.word	0x1fff8cc4
    44cc:	40064000 	.word	0x40064000

000044d0 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    44d0:	b086      	sub	sp, #24
    44d2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    44d4:	2300      	movs	r3, #0
    44d6:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    44d8:	2300      	movs	r3, #0
    44da:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    44dc:	9b01      	ldr	r3, [sp, #4]
    44de:	2b23      	cmp	r3, #35	; 0x23
    44e0:	d00f      	beq.n	4502 <getBusDividerConfig+0x32>
    44e2:	9b01      	ldr	r3, [sp, #4]
    44e4:	2b23      	cmp	r3, #35	; 0x23
    44e6:	d80f      	bhi.n	4508 <getBusDividerConfig+0x38>
    44e8:	9b01      	ldr	r3, [sp, #4]
    44ea:	2b21      	cmp	r3, #33	; 0x21
    44ec:	d003      	beq.n	44f6 <getBusDividerConfig+0x26>
    44ee:	9b01      	ldr	r3, [sp, #4]
    44f0:	2b22      	cmp	r3, #34	; 0x22
    44f2:	d003      	beq.n	44fc <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    44f4:	e008      	b.n	4508 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    44f6:	2300      	movs	r3, #0
    44f8:	9304      	str	r3, [sp, #16]
            break;
    44fa:	e006      	b.n	450a <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    44fc:	2301      	movs	r3, #1
    44fe:	9304      	str	r3, [sp, #16]
            break;
    4500:	e003      	b.n	450a <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4502:	2302      	movs	r3, #2
    4504:	9304      	str	r3, [sp, #16]
            break;
    4506:	e000      	b.n	450a <getBusDividerConfig+0x3a>
                break;
    4508:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    450a:	4b41      	ldr	r3, [pc, #260]	; (4610 <getBusDividerConfig+0x140>)
    450c:	681b      	ldr	r3, [r3, #0]
    450e:	2b00      	cmp	r3, #0
    4510:	d026      	beq.n	4560 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4512:	2300      	movs	r3, #0
    4514:	9303      	str	r3, [sp, #12]
    4516:	e01c      	b.n	4552 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4518:	4b3d      	ldr	r3, [pc, #244]	; (4610 <getBusDividerConfig+0x140>)
    451a:	6819      	ldr	r1, [r3, #0]
    451c:	9a03      	ldr	r2, [sp, #12]
    451e:	4613      	mov	r3, r2
    4520:	005b      	lsls	r3, r3, #1
    4522:	4413      	add	r3, r2
    4524:	009b      	lsls	r3, r3, #2
    4526:	440b      	add	r3, r1
    4528:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    452c:	681b      	ldr	r3, [r3, #0]
    452e:	9a01      	ldr	r2, [sp, #4]
    4530:	429a      	cmp	r2, r3
    4532:	d10b      	bne.n	454c <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4534:	4b36      	ldr	r3, [pc, #216]	; (4610 <getBusDividerConfig+0x140>)
    4536:	6819      	ldr	r1, [r3, #0]
    4538:	9a03      	ldr	r2, [sp, #12]
    453a:	4613      	mov	r3, r2
    453c:	005b      	lsls	r3, r3, #1
    453e:	4413      	add	r3, r2
    4540:	009b      	lsls	r3, r3, #2
    4542:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4546:	440b      	add	r3, r1
    4548:	9305      	str	r3, [sp, #20]
                break;
    454a:	e009      	b.n	4560 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    454c:	9b03      	ldr	r3, [sp, #12]
    454e:	3301      	adds	r3, #1
    4550:	9303      	str	r3, [sp, #12]
    4552:	4b2f      	ldr	r3, [pc, #188]	; (4610 <getBusDividerConfig+0x140>)
    4554:	681b      	ldr	r3, [r3, #0]
    4556:	7b1b      	ldrb	r3, [r3, #12]
    4558:	461a      	mov	r2, r3
    455a:	9b03      	ldr	r3, [sp, #12]
    455c:	4293      	cmp	r3, r2
    455e:	d3db      	bcc.n	4518 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4560:	9b05      	ldr	r3, [sp, #20]
    4562:	2b00      	cmp	r3, #0
    4564:	d14d      	bne.n	4602 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4566:	9a04      	ldr	r2, [sp, #16]
    4568:	4613      	mov	r3, r2
    456a:	005b      	lsls	r3, r3, #1
    456c:	4413      	add	r3, r2
    456e:	009b      	lsls	r3, r3, #2
    4570:	4a28      	ldr	r2, [pc, #160]	; (4614 <getBusDividerConfig+0x144>)
    4572:	4413      	add	r3, r2
    4574:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    4576:	4927      	ldr	r1, [pc, #156]	; (4614 <getBusDividerConfig+0x144>)
    4578:	9a04      	ldr	r2, [sp, #16]
    457a:	4613      	mov	r3, r2
    457c:	005b      	lsls	r3, r3, #1
    457e:	4413      	add	r3, r2
    4580:	009b      	lsls	r3, r3, #2
    4582:	440b      	add	r3, r1
    4584:	9a01      	ldr	r2, [sp, #4]
    4586:	601a      	str	r2, [r3, #0]
        switch(Name)
    4588:	9b01      	ldr	r3, [sp, #4]
    458a:	2b23      	cmp	r3, #35	; 0x23
    458c:	d029      	beq.n	45e2 <getBusDividerConfig+0x112>
    458e:	9b01      	ldr	r3, [sp, #4]
    4590:	2b23      	cmp	r3, #35	; 0x23
    4592:	d838      	bhi.n	4606 <getBusDividerConfig+0x136>
    4594:	9b01      	ldr	r3, [sp, #4]
    4596:	2b21      	cmp	r3, #33	; 0x21
    4598:	d003      	beq.n	45a2 <getBusDividerConfig+0xd2>
    459a:	9b01      	ldr	r3, [sp, #4]
    459c:	2b22      	cmp	r3, #34	; 0x22
    459e:	d010      	beq.n	45c2 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    45a0:	e031      	b.n	4606 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    45a2:	4b1d      	ldr	r3, [pc, #116]	; (4618 <getBusDividerConfig+0x148>)
    45a4:	695b      	ldr	r3, [r3, #20]
    45a6:	091b      	lsrs	r3, r3, #4
    45a8:	f003 030f 	and.w	r3, r3, #15
    45ac:	1c59      	adds	r1, r3, #1
    45ae:	4819      	ldr	r0, [pc, #100]	; (4614 <getBusDividerConfig+0x144>)
    45b0:	9a04      	ldr	r2, [sp, #16]
    45b2:	4613      	mov	r3, r2
    45b4:	005b      	lsls	r3, r3, #1
    45b6:	4413      	add	r3, r2
    45b8:	009b      	lsls	r3, r3, #2
    45ba:	4403      	add	r3, r0
    45bc:	3304      	adds	r3, #4
    45be:	6019      	str	r1, [r3, #0]
                break;
    45c0:	e022      	b.n	4608 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    45c2:	4b15      	ldr	r3, [pc, #84]	; (4618 <getBusDividerConfig+0x148>)
    45c4:	699b      	ldr	r3, [r3, #24]
    45c6:	091b      	lsrs	r3, r3, #4
    45c8:	f003 030f 	and.w	r3, r3, #15
    45cc:	1c59      	adds	r1, r3, #1
    45ce:	4811      	ldr	r0, [pc, #68]	; (4614 <getBusDividerConfig+0x144>)
    45d0:	9a04      	ldr	r2, [sp, #16]
    45d2:	4613      	mov	r3, r2
    45d4:	005b      	lsls	r3, r3, #1
    45d6:	4413      	add	r3, r2
    45d8:	009b      	lsls	r3, r3, #2
    45da:	4403      	add	r3, r0
    45dc:	3304      	adds	r3, #4
    45de:	6019      	str	r1, [r3, #0]
                break;
    45e0:	e012      	b.n	4608 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    45e2:	4b0d      	ldr	r3, [pc, #52]	; (4618 <getBusDividerConfig+0x148>)
    45e4:	69db      	ldr	r3, [r3, #28]
    45e6:	091b      	lsrs	r3, r3, #4
    45e8:	f003 030f 	and.w	r3, r3, #15
    45ec:	1c59      	adds	r1, r3, #1
    45ee:	4809      	ldr	r0, [pc, #36]	; (4614 <getBusDividerConfig+0x144>)
    45f0:	9a04      	ldr	r2, [sp, #16]
    45f2:	4613      	mov	r3, r2
    45f4:	005b      	lsls	r3, r3, #1
    45f6:	4413      	add	r3, r2
    45f8:	009b      	lsls	r3, r3, #2
    45fa:	4403      	add	r3, r0
    45fc:	3304      	adds	r3, #4
    45fe:	6019      	str	r1, [r3, #0]
                break;
    4600:	e002      	b.n	4608 <getBusDividerConfig+0x138>
        }
    }
    4602:	bf00      	nop
    4604:	e000      	b.n	4608 <getBusDividerConfig+0x138>
                break;
    4606:	bf00      	nop

    return ReturnValue;
    4608:	9b05      	ldr	r3, [sp, #20]
}
    460a:	4618      	mov	r0, r3
    460c:	b006      	add	sp, #24
    460e:	4770      	bx	lr
    4610:	1fff8bf8 	.word	0x1fff8bf8
    4614:	1fff8ce8 	.word	0x1fff8ce8
    4618:	40064000 	.word	0x40064000

0000461c <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    461c:	b086      	sub	sp, #24
    461e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4620:	2300      	movs	r3, #0
    4622:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4624:	2300      	movs	r3, #0
    4626:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4628:	9b01      	ldr	r3, [sp, #4]
    462a:	2b27      	cmp	r3, #39	; 0x27
    462c:	d00f      	beq.n	464e <getSlowDividerConfig+0x32>
    462e:	9b01      	ldr	r3, [sp, #4]
    4630:	2b27      	cmp	r3, #39	; 0x27
    4632:	d80f      	bhi.n	4654 <getSlowDividerConfig+0x38>
    4634:	9b01      	ldr	r3, [sp, #4]
    4636:	2b25      	cmp	r3, #37	; 0x25
    4638:	d003      	beq.n	4642 <getSlowDividerConfig+0x26>
    463a:	9b01      	ldr	r3, [sp, #4]
    463c:	2b26      	cmp	r3, #38	; 0x26
    463e:	d003      	beq.n	4648 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4640:	e008      	b.n	4654 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4642:	2300      	movs	r3, #0
    4644:	9304      	str	r3, [sp, #16]
            break;
    4646:	e006      	b.n	4656 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4648:	2301      	movs	r3, #1
    464a:	9304      	str	r3, [sp, #16]
            break;
    464c:	e003      	b.n	4656 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    464e:	2302      	movs	r3, #2
    4650:	9304      	str	r3, [sp, #16]
            break;
    4652:	e000      	b.n	4656 <getSlowDividerConfig+0x3a>
                break;
    4654:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4656:	4b40      	ldr	r3, [pc, #256]	; (4758 <getSlowDividerConfig+0x13c>)
    4658:	681b      	ldr	r3, [r3, #0]
    465a:	2b00      	cmp	r3, #0
    465c:	d026      	beq.n	46ac <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    465e:	2300      	movs	r3, #0
    4660:	9303      	str	r3, [sp, #12]
    4662:	e01c      	b.n	469e <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4664:	4b3c      	ldr	r3, [pc, #240]	; (4758 <getSlowDividerConfig+0x13c>)
    4666:	6819      	ldr	r1, [r3, #0]
    4668:	9a03      	ldr	r2, [sp, #12]
    466a:	4613      	mov	r3, r2
    466c:	005b      	lsls	r3, r3, #1
    466e:	4413      	add	r3, r2
    4670:	009b      	lsls	r3, r3, #2
    4672:	440b      	add	r3, r1
    4674:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4678:	681b      	ldr	r3, [r3, #0]
    467a:	9a01      	ldr	r2, [sp, #4]
    467c:	429a      	cmp	r2, r3
    467e:	d10b      	bne.n	4698 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4680:	4b35      	ldr	r3, [pc, #212]	; (4758 <getSlowDividerConfig+0x13c>)
    4682:	6819      	ldr	r1, [r3, #0]
    4684:	9a03      	ldr	r2, [sp, #12]
    4686:	4613      	mov	r3, r2
    4688:	005b      	lsls	r3, r3, #1
    468a:	4413      	add	r3, r2
    468c:	009b      	lsls	r3, r3, #2
    468e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4692:	440b      	add	r3, r1
    4694:	9305      	str	r3, [sp, #20]
                break;
    4696:	e009      	b.n	46ac <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4698:	9b03      	ldr	r3, [sp, #12]
    469a:	3301      	adds	r3, #1
    469c:	9303      	str	r3, [sp, #12]
    469e:	4b2e      	ldr	r3, [pc, #184]	; (4758 <getSlowDividerConfig+0x13c>)
    46a0:	681b      	ldr	r3, [r3, #0]
    46a2:	7b1b      	ldrb	r3, [r3, #12]
    46a4:	461a      	mov	r2, r3
    46a6:	9b03      	ldr	r3, [sp, #12]
    46a8:	4293      	cmp	r3, r2
    46aa:	d3db      	bcc.n	4664 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    46ac:	9b05      	ldr	r3, [sp, #20]
    46ae:	2b00      	cmp	r3, #0
    46b0:	d14a      	bne.n	4748 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    46b2:	9a04      	ldr	r2, [sp, #16]
    46b4:	4613      	mov	r3, r2
    46b6:	005b      	lsls	r3, r3, #1
    46b8:	4413      	add	r3, r2
    46ba:	009b      	lsls	r3, r3, #2
    46bc:	4a27      	ldr	r2, [pc, #156]	; (475c <getSlowDividerConfig+0x140>)
    46be:	4413      	add	r3, r2
    46c0:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    46c2:	4926      	ldr	r1, [pc, #152]	; (475c <getSlowDividerConfig+0x140>)
    46c4:	9a04      	ldr	r2, [sp, #16]
    46c6:	4613      	mov	r3, r2
    46c8:	005b      	lsls	r3, r3, #1
    46ca:	4413      	add	r3, r2
    46cc:	009b      	lsls	r3, r3, #2
    46ce:	440b      	add	r3, r1
    46d0:	9a01      	ldr	r2, [sp, #4]
    46d2:	601a      	str	r2, [r3, #0]
        switch(Name)
    46d4:	9b01      	ldr	r3, [sp, #4]
    46d6:	2b27      	cmp	r3, #39	; 0x27
    46d8:	d027      	beq.n	472a <getSlowDividerConfig+0x10e>
    46da:	9b01      	ldr	r3, [sp, #4]
    46dc:	2b27      	cmp	r3, #39	; 0x27
    46de:	d835      	bhi.n	474c <getSlowDividerConfig+0x130>
    46e0:	9b01      	ldr	r3, [sp, #4]
    46e2:	2b25      	cmp	r3, #37	; 0x25
    46e4:	d003      	beq.n	46ee <getSlowDividerConfig+0xd2>
    46e6:	9b01      	ldr	r3, [sp, #4]
    46e8:	2b26      	cmp	r3, #38	; 0x26
    46ea:	d00f      	beq.n	470c <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    46ec:	e02e      	b.n	474c <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    46ee:	4b1c      	ldr	r3, [pc, #112]	; (4760 <getSlowDividerConfig+0x144>)
    46f0:	695b      	ldr	r3, [r3, #20]
    46f2:	f003 030f 	and.w	r3, r3, #15
    46f6:	1c59      	adds	r1, r3, #1
    46f8:	4818      	ldr	r0, [pc, #96]	; (475c <getSlowDividerConfig+0x140>)
    46fa:	9a04      	ldr	r2, [sp, #16]
    46fc:	4613      	mov	r3, r2
    46fe:	005b      	lsls	r3, r3, #1
    4700:	4413      	add	r3, r2
    4702:	009b      	lsls	r3, r3, #2
    4704:	4403      	add	r3, r0
    4706:	3304      	adds	r3, #4
    4708:	6019      	str	r1, [r3, #0]
                break;
    470a:	e020      	b.n	474e <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    470c:	4b14      	ldr	r3, [pc, #80]	; (4760 <getSlowDividerConfig+0x144>)
    470e:	699b      	ldr	r3, [r3, #24]
    4710:	f003 030f 	and.w	r3, r3, #15
    4714:	1c59      	adds	r1, r3, #1
    4716:	4811      	ldr	r0, [pc, #68]	; (475c <getSlowDividerConfig+0x140>)
    4718:	9a04      	ldr	r2, [sp, #16]
    471a:	4613      	mov	r3, r2
    471c:	005b      	lsls	r3, r3, #1
    471e:	4413      	add	r3, r2
    4720:	009b      	lsls	r3, r3, #2
    4722:	4403      	add	r3, r0
    4724:	3304      	adds	r3, #4
    4726:	6019      	str	r1, [r3, #0]
                break;
    4728:	e011      	b.n	474e <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    472a:	4b0d      	ldr	r3, [pc, #52]	; (4760 <getSlowDividerConfig+0x144>)
    472c:	69db      	ldr	r3, [r3, #28]
    472e:	f003 030f 	and.w	r3, r3, #15
    4732:	1c59      	adds	r1, r3, #1
    4734:	4809      	ldr	r0, [pc, #36]	; (475c <getSlowDividerConfig+0x140>)
    4736:	9a04      	ldr	r2, [sp, #16]
    4738:	4613      	mov	r3, r2
    473a:	005b      	lsls	r3, r3, #1
    473c:	4413      	add	r3, r2
    473e:	009b      	lsls	r3, r3, #2
    4740:	4403      	add	r3, r0
    4742:	3304      	adds	r3, #4
    4744:	6019      	str	r1, [r3, #0]
                break;
    4746:	e002      	b.n	474e <getSlowDividerConfig+0x132>
        }
    }
    4748:	bf00      	nop
    474a:	e000      	b.n	474e <getSlowDividerConfig+0x132>
                break;
    474c:	bf00      	nop

    return ReturnValue;
    474e:	9b05      	ldr	r3, [sp, #20]
}
    4750:	4618      	mov	r0, r3
    4752:	b006      	add	sp, #24
    4754:	4770      	bx	lr
    4756:	bf00      	nop
    4758:	1fff8bf8 	.word	0x1fff8bf8
    475c:	1fff8d0c 	.word	0x1fff8d0c
    4760:	40064000 	.word	0x40064000

00004764 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    4764:	b500      	push	{lr}
    4766:	b083      	sub	sp, #12
    4768:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    476a:	4b64      	ldr	r3, [pc, #400]	; (48fc <Clock_Ip_ClockInitializeObjects+0x198>)
    476c:	781b      	ldrb	r3, [r3, #0]
    476e:	f083 0301 	eor.w	r3, r3, #1
    4772:	b2db      	uxtb	r3, r3
    4774:	2b00      	cmp	r3, #0
    4776:	d05b      	beq.n	4830 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    4778:	4b60      	ldr	r3, [pc, #384]	; (48fc <Clock_Ip_ClockInitializeObjects+0x198>)
    477a:	2201      	movs	r2, #1
    477c:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    477e:	4b60      	ldr	r3, [pc, #384]	; (4900 <Clock_Ip_ClockInitializeObjects+0x19c>)
    4780:	785b      	ldrb	r3, [r3, #1]
    4782:	461a      	mov	r2, r3
    4784:	4613      	mov	r3, r2
    4786:	009b      	lsls	r3, r3, #2
    4788:	4413      	add	r3, r2
    478a:	009b      	lsls	r3, r3, #2
    478c:	4a5d      	ldr	r2, [pc, #372]	; (4904 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    478e:	4413      	add	r3, r2
    4790:	4a5d      	ldr	r2, [pc, #372]	; (4908 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    4792:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    4794:	4b5d      	ldr	r3, [pc, #372]	; (490c <Clock_Ip_ClockInitializeObjects+0x1a8>)
    4796:	785b      	ldrb	r3, [r3, #1]
    4798:	461a      	mov	r2, r3
    479a:	4613      	mov	r3, r2
    479c:	009b      	lsls	r3, r3, #2
    479e:	4413      	add	r3, r2
    47a0:	009b      	lsls	r3, r3, #2
    47a2:	4a5b      	ldr	r2, [pc, #364]	; (4910 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    47a4:	4413      	add	r3, r2
    47a6:	4a5b      	ldr	r2, [pc, #364]	; (4914 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    47a8:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    47aa:	4b5b      	ldr	r3, [pc, #364]	; (4918 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    47ac:	791b      	ldrb	r3, [r3, #4]
    47ae:	461a      	mov	r2, r3
    47b0:	4613      	mov	r3, r2
    47b2:	005b      	lsls	r3, r3, #1
    47b4:	4413      	add	r3, r2
    47b6:	009b      	lsls	r3, r3, #2
    47b8:	4a58      	ldr	r2, [pc, #352]	; (491c <Clock_Ip_ClockInitializeObjects+0x1b8>)
    47ba:	4413      	add	r3, r2
    47bc:	4a58      	ldr	r2, [pc, #352]	; (4920 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    47be:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    47c0:	4b58      	ldr	r3, [pc, #352]	; (4924 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    47c2:	795b      	ldrb	r3, [r3, #5]
    47c4:	00db      	lsls	r3, r3, #3
    47c6:	4a58      	ldr	r2, [pc, #352]	; (4928 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    47c8:	4413      	add	r3, r2
    47ca:	4a58      	ldr	r2, [pc, #352]	; (492c <Clock_Ip_ClockInitializeObjects+0x1c8>)
    47cc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    47ce:	4b55      	ldr	r3, [pc, #340]	; (4924 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    47d0:	79db      	ldrb	r3, [r3, #7]
    47d2:	00db      	lsls	r3, r3, #3
    47d4:	4a54      	ldr	r2, [pc, #336]	; (4928 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    47d6:	4413      	add	r3, r2
    47d8:	4a55      	ldr	r2, [pc, #340]	; (4930 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    47da:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    47dc:	4b55      	ldr	r3, [pc, #340]	; (4934 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47de:	799b      	ldrb	r3, [r3, #6]
    47e0:	009b      	lsls	r3, r3, #2
    47e2:	4a55      	ldr	r2, [pc, #340]	; (4938 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    47e4:	4413      	add	r3, r2
    47e6:	4a55      	ldr	r2, [pc, #340]	; (493c <Clock_Ip_ClockInitializeObjects+0x1d8>)
    47e8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    47ea:	4b52      	ldr	r3, [pc, #328]	; (4934 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47ec:	7a1b      	ldrb	r3, [r3, #8]
    47ee:	009b      	lsls	r3, r3, #2
    47f0:	4a51      	ldr	r2, [pc, #324]	; (4938 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    47f2:	4413      	add	r3, r2
    47f4:	4a52      	ldr	r2, [pc, #328]	; (4940 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    47f6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    47f8:	4b4e      	ldr	r3, [pc, #312]	; (4934 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47fa:	7a5b      	ldrb	r3, [r3, #9]
    47fc:	009b      	lsls	r3, r3, #2
    47fe:	4a4e      	ldr	r2, [pc, #312]	; (4938 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4800:	4413      	add	r3, r2
    4802:	4a50      	ldr	r2, [pc, #320]	; (4944 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4804:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    4806:	4b4b      	ldr	r3, [pc, #300]	; (4934 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4808:	7adb      	ldrb	r3, [r3, #11]
    480a:	009b      	lsls	r3, r3, #2
    480c:	4a4a      	ldr	r2, [pc, #296]	; (4938 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    480e:	4413      	add	r3, r2
    4810:	4a4d      	ldr	r2, [pc, #308]	; (4948 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    4812:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    4814:	4b47      	ldr	r3, [pc, #284]	; (4934 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4816:	7b1b      	ldrb	r3, [r3, #12]
    4818:	009b      	lsls	r3, r3, #2
    481a:	4a47      	ldr	r2, [pc, #284]	; (4938 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    481c:	4413      	add	r3, r2
    481e:	4a4b      	ldr	r2, [pc, #300]	; (494c <Clock_Ip_ClockInitializeObjects+0x1e8>)
    4820:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    4822:	4b44      	ldr	r3, [pc, #272]	; (4934 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4824:	7b9b      	ldrb	r3, [r3, #14]
    4826:	009b      	lsls	r3, r3, #2
    4828:	4a43      	ldr	r2, [pc, #268]	; (4938 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    482a:	4413      	add	r3, r2
    482c:	4a48      	ldr	r2, [pc, #288]	; (4950 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    482e:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    4830:	4b48      	ldr	r3, [pc, #288]	; (4954 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    4832:	781b      	ldrb	r3, [r3, #0]
    4834:	2b00      	cmp	r3, #0
    4836:	d002      	beq.n	483e <Clock_Ip_ClockInitializeObjects+0xda>
    4838:	9b01      	ldr	r3, [sp, #4]
    483a:	2b00      	cmp	r3, #0
    483c:	d003      	beq.n	4846 <Clock_Ip_ClockInitializeObjects+0xe2>
    483e:	4b46      	ldr	r3, [pc, #280]	; (4958 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    4840:	781b      	ldrb	r3, [r3, #0]
    4842:	2b00      	cmp	r3, #0
    4844:	d056      	beq.n	48f4 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    4846:	f7ff fc09 	bl	405c <getFircConfig>
    484a:	4603      	mov	r3, r0
    484c:	4a43      	ldr	r2, [pc, #268]	; (495c <Clock_Ip_ClockInitializeObjects+0x1f8>)
    484e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    4850:	f7ff fc60 	bl	4114 <getSoscConfig>
    4854:	4603      	mov	r3, r0
    4856:	4a42      	ldr	r2, [pc, #264]	; (4960 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    4858:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    485a:	f7ff fca7 	bl	41ac <getSpllConfig>
    485e:	4603      	mov	r3, r0
    4860:	4a40      	ldr	r2, [pc, #256]	; (4964 <Clock_Ip_ClockInitializeObjects+0x200>)
    4862:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    4864:	2019      	movs	r0, #25
    4866:	f7ff fcfb 	bl	4260 <getSelectorConfig>
    486a:	4603      	mov	r3, r0
    486c:	4a3e      	ldr	r2, [pc, #248]	; (4968 <Clock_Ip_ClockInitializeObjects+0x204>)
    486e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    4870:	201a      	movs	r0, #26
    4872:	f7ff fcf5 	bl	4260 <getSelectorConfig>
    4876:	4603      	mov	r3, r0
    4878:	4a3c      	ldr	r2, [pc, #240]	; (496c <Clock_Ip_ClockInitializeObjects+0x208>)
    487a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    487c:	201b      	movs	r0, #27
    487e:	f7ff fcef 	bl	4260 <getSelectorConfig>
    4882:	4603      	mov	r3, r0
    4884:	4a3a      	ldr	r2, [pc, #232]	; (4970 <Clock_Ip_ClockInitializeObjects+0x20c>)
    4886:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    4888:	201d      	movs	r0, #29
    488a:	f7ff fd7b 	bl	4384 <getCoreDividerConfig>
    488e:	4603      	mov	r3, r0
    4890:	4a38      	ldr	r2, [pc, #224]	; (4974 <Clock_Ip_ClockInitializeObjects+0x210>)
    4892:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    4894:	201e      	movs	r0, #30
    4896:	f7ff fd75 	bl	4384 <getCoreDividerConfig>
    489a:	4603      	mov	r3, r0
    489c:	4a36      	ldr	r2, [pc, #216]	; (4978 <Clock_Ip_ClockInitializeObjects+0x214>)
    489e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    48a0:	201f      	movs	r0, #31
    48a2:	f7ff fd6f 	bl	4384 <getCoreDividerConfig>
    48a6:	4603      	mov	r3, r0
    48a8:	4a34      	ldr	r2, [pc, #208]	; (497c <Clock_Ip_ClockInitializeObjects+0x218>)
    48aa:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    48ac:	2021      	movs	r0, #33	; 0x21
    48ae:	f7ff fe0f 	bl	44d0 <getBusDividerConfig>
    48b2:	4603      	mov	r3, r0
    48b4:	4a32      	ldr	r2, [pc, #200]	; (4980 <Clock_Ip_ClockInitializeObjects+0x21c>)
    48b6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    48b8:	2022      	movs	r0, #34	; 0x22
    48ba:	f7ff fe09 	bl	44d0 <getBusDividerConfig>
    48be:	4603      	mov	r3, r0
    48c0:	4a30      	ldr	r2, [pc, #192]	; (4984 <Clock_Ip_ClockInitializeObjects+0x220>)
    48c2:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    48c4:	2023      	movs	r0, #35	; 0x23
    48c6:	f7ff fe03 	bl	44d0 <getBusDividerConfig>
    48ca:	4603      	mov	r3, r0
    48cc:	4a2e      	ldr	r2, [pc, #184]	; (4988 <Clock_Ip_ClockInitializeObjects+0x224>)
    48ce:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    48d0:	2025      	movs	r0, #37	; 0x25
    48d2:	f7ff fea3 	bl	461c <getSlowDividerConfig>
    48d6:	4603      	mov	r3, r0
    48d8:	4a2c      	ldr	r2, [pc, #176]	; (498c <Clock_Ip_ClockInitializeObjects+0x228>)
    48da:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    48dc:	2026      	movs	r0, #38	; 0x26
    48de:	f7ff fe9d 	bl	461c <getSlowDividerConfig>
    48e2:	4603      	mov	r3, r0
    48e4:	4a2a      	ldr	r2, [pc, #168]	; (4990 <Clock_Ip_ClockInitializeObjects+0x22c>)
    48e6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    48e8:	2027      	movs	r0, #39	; 0x27
    48ea:	f7ff fe97 	bl	461c <getSlowDividerConfig>
    48ee:	4603      	mov	r3, r0
    48f0:	4a28      	ldr	r2, [pc, #160]	; (4994 <Clock_Ip_ClockInitializeObjects+0x230>)
    48f2:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    48f4:	bf00      	nop
    48f6:	b003      	add	sp, #12
    48f8:	f85d fb04 	ldr.w	pc, [sp], #4
    48fc:	1fff8d30 	.word	0x1fff8d30
    4900:	0000b8ac 	.word	0x0000b8ac
    4904:	0000bef8 	.word	0x0000bef8
    4908:	1fff8bfc 	.word	0x1fff8bfc
    490c:	0000b86c 	.word	0x0000b86c
    4910:	0000be40 	.word	0x0000be40
    4914:	1fff8c00 	.word	0x1fff8c00
    4918:	0000b87c 	.word	0x0000b87c
    491c:	0000beac 	.word	0x0000beac
    4920:	1fff8c04 	.word	0x1fff8c04
    4924:	0000b8bc 	.word	0x0000b8bc
    4928:	0000bf24 	.word	0x0000bf24
    492c:	1fff8c08 	.word	0x1fff8c08
    4930:	1fff8c44 	.word	0x1fff8c44
    4934:	0000b84c 	.word	0x0000b84c
    4938:	0000bdfc 	.word	0x0000bdfc
    493c:	1fff8c0c 	.word	0x1fff8c0c
    4940:	1fff8c48 	.word	0x1fff8c48
    4944:	1fff8c10 	.word	0x1fff8c10
    4948:	1fff8c4c 	.word	0x1fff8c4c
    494c:	1fff8c14 	.word	0x1fff8c14
    4950:	1fff8c50 	.word	0x1fff8c50
    4954:	1fff8b19 	.word	0x1fff8b19
    4958:	1fff8b10 	.word	0x1fff8b10
    495c:	1fff8c18 	.word	0x1fff8c18
    4960:	1fff8c1c 	.word	0x1fff8c1c
    4964:	1fff8c20 	.word	0x1fff8c20
    4968:	1fff8c24 	.word	0x1fff8c24
    496c:	1fff8c28 	.word	0x1fff8c28
    4970:	1fff8c54 	.word	0x1fff8c54
    4974:	1fff8c2c 	.word	0x1fff8c2c
    4978:	1fff8c30 	.word	0x1fff8c30
    497c:	1fff8c58 	.word	0x1fff8c58
    4980:	1fff8c34 	.word	0x1fff8c34
    4984:	1fff8c38 	.word	0x1fff8c38
    4988:	1fff8c5c 	.word	0x1fff8c5c
    498c:	1fff8c3c 	.word	0x1fff8c3c
    4990:	1fff8c40 	.word	0x1fff8c40
    4994:	1fff8c60 	.word	0x1fff8c60

00004998 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    4998:	b500      	push	{lr}
    499a:	b083      	sub	sp, #12
    499c:	9001      	str	r0, [sp, #4]
    499e:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    49a0:	9b01      	ldr	r3, [sp, #4]
    49a2:	2b03      	cmp	r3, #3
    49a4:	f000 8090 	beq.w	4ac8 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    49a8:	9b01      	ldr	r3, [sp, #4]
    49aa:	2b03      	cmp	r3, #3
    49ac:	f200 80d3 	bhi.w	4b56 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    49b0:	9b01      	ldr	r3, [sp, #4]
    49b2:	2b00      	cmp	r3, #0
    49b4:	d040      	beq.n	4a38 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    49b6:	9b01      	ldr	r3, [sp, #4]
    49b8:	3b01      	subs	r3, #1
    49ba:	2b01      	cmp	r3, #1
    49bc:	f200 80cb 	bhi.w	4b56 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    49c0:	9b00      	ldr	r3, [sp, #0]
    49c2:	2b00      	cmp	r3, #0
    49c4:	f040 80c9 	bne.w	4b5a <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    49c8:	4b68      	ldr	r3, [pc, #416]	; (4b6c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    49ca:	2200      	movs	r2, #0
    49cc:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    49ce:	4b68      	ldr	r3, [pc, #416]	; (4b70 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    49d0:	681b      	ldr	r3, [r3, #0]
    49d2:	685b      	ldr	r3, [r3, #4]
    49d4:	4a67      	ldr	r2, [pc, #412]	; (4b74 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    49d6:	6812      	ldr	r2, [r2, #0]
    49d8:	4610      	mov	r0, r2
    49da:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    49dc:	4b66      	ldr	r3, [pc, #408]	; (4b78 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    49de:	681b      	ldr	r3, [r3, #0]
    49e0:	681b      	ldr	r3, [r3, #0]
    49e2:	4a66      	ldr	r2, [pc, #408]	; (4b7c <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    49e4:	6812      	ldr	r2, [r2, #0]
    49e6:	4610      	mov	r0, r2
    49e8:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    49ea:	4b65      	ldr	r3, [pc, #404]	; (4b80 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    49ec:	681b      	ldr	r3, [r3, #0]
    49ee:	681b      	ldr	r3, [r3, #0]
    49f0:	4a64      	ldr	r2, [pc, #400]	; (4b84 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    49f2:	6812      	ldr	r2, [r2, #0]
    49f4:	4610      	mov	r0, r2
    49f6:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    49f8:	4b63      	ldr	r3, [pc, #396]	; (4b88 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    49fa:	681b      	ldr	r3, [r3, #0]
    49fc:	681b      	ldr	r3, [r3, #0]
    49fe:	4a63      	ldr	r2, [pc, #396]	; (4b8c <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    4a00:	6812      	ldr	r2, [r2, #0]
    4a02:	4610      	mov	r0, r2
    4a04:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    4a06:	4b62      	ldr	r3, [pc, #392]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4a08:	681b      	ldr	r3, [r3, #0]
    4a0a:	691b      	ldr	r3, [r3, #16]
    4a0c:	4a61      	ldr	r2, [pc, #388]	; (4b94 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4a0e:	6812      	ldr	r2, [r2, #0]
    4a10:	6812      	ldr	r2, [r2, #0]
    4a12:	4610      	mov	r0, r2
    4a14:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    4a16:	4b60      	ldr	r3, [pc, #384]	; (4b98 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a18:	681b      	ldr	r3, [r3, #0]
    4a1a:	68db      	ldr	r3, [r3, #12]
    4a1c:	4a5f      	ldr	r2, [pc, #380]	; (4b9c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4a1e:	6812      	ldr	r2, [r2, #0]
    4a20:	6812      	ldr	r2, [r2, #0]
    4a22:	4610      	mov	r0, r2
    4a24:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    4a26:	4b5e      	ldr	r3, [pc, #376]	; (4ba0 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4a28:	681b      	ldr	r3, [r3, #0]
    4a2a:	689b      	ldr	r3, [r3, #8]
    4a2c:	4a5d      	ldr	r2, [pc, #372]	; (4ba4 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4a2e:	6812      	ldr	r2, [r2, #0]
    4a30:	6812      	ldr	r2, [r2, #0]
    4a32:	4610      	mov	r0, r2
    4a34:	4798      	blx	r3
            }
        }
        break;
    4a36:	e090      	b.n	4b5a <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4a38:	9b00      	ldr	r3, [sp, #0]
    4a3a:	2b02      	cmp	r3, #2
    4a3c:	f040 808f 	bne.w	4b5e <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4a40:	4b4a      	ldr	r3, [pc, #296]	; (4b6c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4a42:	2201      	movs	r2, #1
    4a44:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4a46:	4b56      	ldr	r3, [pc, #344]	; (4ba0 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4a48:	681b      	ldr	r3, [r3, #0]
    4a4a:	685b      	ldr	r3, [r3, #4]
    4a4c:	4a55      	ldr	r2, [pc, #340]	; (4ba4 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4a4e:	6812      	ldr	r2, [r2, #0]
    4a50:	4610      	mov	r0, r2
    4a52:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4a54:	4b50      	ldr	r3, [pc, #320]	; (4b98 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a56:	681b      	ldr	r3, [r3, #0]
    4a58:	691b      	ldr	r3, [r3, #16]
    4a5a:	4a50      	ldr	r2, [pc, #320]	; (4b9c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4a5c:	6812      	ldr	r2, [r2, #0]
    4a5e:	4610      	mov	r0, r2
    4a60:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4a62:	4b4d      	ldr	r3, [pc, #308]	; (4b98 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a64:	681b      	ldr	r3, [r3, #0]
    4a66:	689b      	ldr	r3, [r3, #8]
    4a68:	4a4c      	ldr	r2, [pc, #304]	; (4b9c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4a6a:	6812      	ldr	r2, [r2, #0]
    4a6c:	4610      	mov	r0, r2
    4a6e:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4a70:	4b47      	ldr	r3, [pc, #284]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4a72:	681b      	ldr	r3, [r3, #0]
    4a74:	68db      	ldr	r3, [r3, #12]
    4a76:	4a47      	ldr	r2, [pc, #284]	; (4b94 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4a78:	6812      	ldr	r2, [r2, #0]
    4a7a:	4610      	mov	r0, r2
    4a7c:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4a7e:	4b44      	ldr	r3, [pc, #272]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4a80:	681b      	ldr	r3, [r3, #0]
    4a82:	689b      	ldr	r3, [r3, #8]
    4a84:	4a43      	ldr	r2, [pc, #268]	; (4b94 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4a86:	6812      	ldr	r2, [r2, #0]
    4a88:	6812      	ldr	r2, [r2, #0]
    4a8a:	4610      	mov	r0, r2
    4a8c:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    4a8e:	4b38      	ldr	r3, [pc, #224]	; (4b70 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4a90:	681b      	ldr	r3, [r3, #0]
    4a92:	685b      	ldr	r3, [r3, #4]
    4a94:	4a44      	ldr	r2, [pc, #272]	; (4ba8 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    4a96:	6812      	ldr	r2, [r2, #0]
    4a98:	4610      	mov	r0, r2
    4a9a:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    4a9c:	4b36      	ldr	r3, [pc, #216]	; (4b78 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4a9e:	681b      	ldr	r3, [r3, #0]
    4aa0:	681b      	ldr	r3, [r3, #0]
    4aa2:	4a42      	ldr	r2, [pc, #264]	; (4bac <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    4aa4:	6812      	ldr	r2, [r2, #0]
    4aa6:	4610      	mov	r0, r2
    4aa8:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    4aaa:	4b35      	ldr	r3, [pc, #212]	; (4b80 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4aac:	681b      	ldr	r3, [r3, #0]
    4aae:	681b      	ldr	r3, [r3, #0]
    4ab0:	4a3f      	ldr	r2, [pc, #252]	; (4bb0 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    4ab2:	6812      	ldr	r2, [r2, #0]
    4ab4:	4610      	mov	r0, r2
    4ab6:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    4ab8:	4b33      	ldr	r3, [pc, #204]	; (4b88 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4aba:	681b      	ldr	r3, [r3, #0]
    4abc:	681b      	ldr	r3, [r3, #0]
    4abe:	4a3d      	ldr	r2, [pc, #244]	; (4bb4 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    4ac0:	6812      	ldr	r2, [r2, #0]
    4ac2:	4610      	mov	r0, r2
    4ac4:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4ac6:	e04a      	b.n	4b5e <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4ac8:	9b00      	ldr	r3, [sp, #0]
    4aca:	2b02      	cmp	r3, #2
    4acc:	d149      	bne.n	4b62 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4ace:	4b27      	ldr	r3, [pc, #156]	; (4b6c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4ad0:	2201      	movs	r2, #1
    4ad2:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4ad4:	4b32      	ldr	r3, [pc, #200]	; (4ba0 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4ad6:	681b      	ldr	r3, [r3, #0]
    4ad8:	685b      	ldr	r3, [r3, #4]
    4ada:	4a32      	ldr	r2, [pc, #200]	; (4ba4 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4adc:	6812      	ldr	r2, [r2, #0]
    4ade:	4610      	mov	r0, r2
    4ae0:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4ae2:	4b2d      	ldr	r3, [pc, #180]	; (4b98 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4ae4:	681b      	ldr	r3, [r3, #0]
    4ae6:	691b      	ldr	r3, [r3, #16]
    4ae8:	4a2c      	ldr	r2, [pc, #176]	; (4b9c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4aea:	6812      	ldr	r2, [r2, #0]
    4aec:	4610      	mov	r0, r2
    4aee:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4af0:	4b29      	ldr	r3, [pc, #164]	; (4b98 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4af2:	681b      	ldr	r3, [r3, #0]
    4af4:	689b      	ldr	r3, [r3, #8]
    4af6:	4a29      	ldr	r2, [pc, #164]	; (4b9c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4af8:	6812      	ldr	r2, [r2, #0]
    4afa:	4610      	mov	r0, r2
    4afc:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4afe:	4b24      	ldr	r3, [pc, #144]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4b00:	681b      	ldr	r3, [r3, #0]
    4b02:	68db      	ldr	r3, [r3, #12]
    4b04:	4a23      	ldr	r2, [pc, #140]	; (4b94 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4b06:	6812      	ldr	r2, [r2, #0]
    4b08:	4610      	mov	r0, r2
    4b0a:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4b0c:	4b20      	ldr	r3, [pc, #128]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4b0e:	681b      	ldr	r3, [r3, #0]
    4b10:	689b      	ldr	r3, [r3, #8]
    4b12:	4a20      	ldr	r2, [pc, #128]	; (4b94 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4b14:	6812      	ldr	r2, [r2, #0]
    4b16:	6812      	ldr	r2, [r2, #0]
    4b18:	4610      	mov	r0, r2
    4b1a:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    4b1c:	4b26      	ldr	r3, [pc, #152]	; (4bb8 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    4b1e:	681b      	ldr	r3, [r3, #0]
    4b20:	685b      	ldr	r3, [r3, #4]
    4b22:	4a26      	ldr	r2, [pc, #152]	; (4bbc <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4b24:	6812      	ldr	r2, [r2, #0]
    4b26:	4610      	mov	r0, r2
    4b28:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    4b2a:	4b25      	ldr	r3, [pc, #148]	; (4bc0 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    4b2c:	681b      	ldr	r3, [r3, #0]
    4b2e:	681b      	ldr	r3, [r3, #0]
    4b30:	4a24      	ldr	r2, [pc, #144]	; (4bc4 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    4b32:	6812      	ldr	r2, [r2, #0]
    4b34:	4610      	mov	r0, r2
    4b36:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    4b38:	4b23      	ldr	r3, [pc, #140]	; (4bc8 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    4b3a:	681b      	ldr	r3, [r3, #0]
    4b3c:	681b      	ldr	r3, [r3, #0]
    4b3e:	4a23      	ldr	r2, [pc, #140]	; (4bcc <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    4b40:	6812      	ldr	r2, [r2, #0]
    4b42:	4610      	mov	r0, r2
    4b44:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    4b46:	4b22      	ldr	r3, [pc, #136]	; (4bd0 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    4b48:	681b      	ldr	r3, [r3, #0]
    4b4a:	681b      	ldr	r3, [r3, #0]
    4b4c:	4a21      	ldr	r2, [pc, #132]	; (4bd4 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    4b4e:	6812      	ldr	r2, [r2, #0]
    4b50:	4610      	mov	r0, r2
    4b52:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4b54:	e005      	b.n	4b62 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    4b56:	bf00      	nop
    4b58:	e004      	b.n	4b64 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4b5a:	bf00      	nop
    4b5c:	e002      	b.n	4b64 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4b5e:	bf00      	nop
    4b60:	e000      	b.n	4b64 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4b62:	bf00      	nop
    }

}
    4b64:	bf00      	nop
    4b66:	b003      	add	sp, #12
    4b68:	f85d fb04 	ldr.w	pc, [sp], #4
    4b6c:	1fff8b19 	.word	0x1fff8b19
    4b70:	1fff8c08 	.word	0x1fff8c08
    4b74:	1fff8c28 	.word	0x1fff8c28
    4b78:	1fff8c0c 	.word	0x1fff8c0c
    4b7c:	1fff8c30 	.word	0x1fff8c30
    4b80:	1fff8c10 	.word	0x1fff8c10
    4b84:	1fff8c38 	.word	0x1fff8c38
    4b88:	1fff8c14 	.word	0x1fff8c14
    4b8c:	1fff8c40 	.word	0x1fff8c40
    4b90:	1fff8bfc 	.word	0x1fff8bfc
    4b94:	1fff8c20 	.word	0x1fff8c20
    4b98:	1fff8c00 	.word	0x1fff8c00
    4b9c:	1fff8c1c 	.word	0x1fff8c1c
    4ba0:	1fff8c04 	.word	0x1fff8c04
    4ba4:	1fff8c18 	.word	0x1fff8c18
    4ba8:	1fff8c24 	.word	0x1fff8c24
    4bac:	1fff8c2c 	.word	0x1fff8c2c
    4bb0:	1fff8c34 	.word	0x1fff8c34
    4bb4:	1fff8c3c 	.word	0x1fff8c3c
    4bb8:	1fff8c44 	.word	0x1fff8c44
    4bbc:	1fff8c54 	.word	0x1fff8c54
    4bc0:	1fff8c48 	.word	0x1fff8c48
    4bc4:	1fff8c58 	.word	0x1fff8c58
    4bc8:	1fff8c4c 	.word	0x1fff8c4c
    4bcc:	1fff8c5c 	.word	0x1fff8c5c
    4bd0:	1fff8c50 	.word	0x1fff8c50
    4bd4:	1fff8c60 	.word	0x1fff8c60

00004bd8 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    4bd8:	b500      	push	{lr}
    4bda:	b083      	sub	sp, #12
    4bdc:	9001      	str	r0, [sp, #4]
    4bde:	9100      	str	r1, [sp, #0]
    switch(Command)
    4be0:	9b00      	ldr	r3, [sp, #0]
    4be2:	2b04      	cmp	r3, #4
    4be4:	d010      	beq.n	4c08 <Clock_Ip_Command+0x30>
    4be6:	9b00      	ldr	r3, [sp, #0]
    4be8:	2b04      	cmp	r3, #4
    4bea:	d811      	bhi.n	4c10 <Clock_Ip_Command+0x38>
    4bec:	9b00      	ldr	r3, [sp, #0]
    4bee:	2b01      	cmp	r3, #1
    4bf0:	d006      	beq.n	4c00 <Clock_Ip_Command+0x28>
    4bf2:	9b00      	ldr	r3, [sp, #0]
    4bf4:	2b02      	cmp	r3, #2
    4bf6:	d10b      	bne.n	4c10 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    4bf8:	9801      	ldr	r0, [sp, #4]
    4bfa:	f7ff fdb3 	bl	4764 <Clock_Ip_ClockInitializeObjects>
            break;
    4bfe:	e008      	b.n	4c12 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    4c00:	9801      	ldr	r0, [sp, #4]
    4c02:	f7ff f9db 	bl	3fbc <Clock_Ip_SpecificPlatformInitClock>
            break;
    4c06:	e004      	b.n	4c12 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    4c08:	9801      	ldr	r0, [sp, #4]
    4c0a:	f7ff f8ed 	bl	3de8 <DisableSafeClock>
            break;
    4c0e:	e000      	b.n	4c12 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    4c10:	bf00      	nop
    }
}
    4c12:	bf00      	nop
    4c14:	b003      	add	sp, #12
    4c16:	f85d fb04 	ldr.w	pc, [sp], #4
    4c1a:	bf00      	nop

00004c1c <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    4c1c:	b500      	push	{lr}
    4c1e:	b085      	sub	sp, #20
    4c20:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    4c22:	4a20      	ldr	r2, [pc, #128]	; (4ca4 <Mcu_Init+0x88>)
    4c24:	9b01      	ldr	r3, [sp, #4]
    4c26:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4c28:	2300      	movs	r3, #0
    4c2a:	9303      	str	r3, [sp, #12]
    4c2c:	e010      	b.n	4c50 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    4c2e:	4b1d      	ldr	r3, [pc, #116]	; (4ca4 <Mcu_Init+0x88>)
    4c30:	681b      	ldr	r3, [r3, #0]
    4c32:	6919      	ldr	r1, [r3, #16]
    4c34:	9a03      	ldr	r2, [sp, #12]
    4c36:	4613      	mov	r3, r2
    4c38:	005b      	lsls	r3, r3, #1
    4c3a:	4413      	add	r3, r2
    4c3c:	009b      	lsls	r3, r3, #2
    4c3e:	440b      	add	r3, r1
    4c40:	681b      	ldr	r3, [r3, #0]
    4c42:	9a03      	ldr	r2, [sp, #12]
    4c44:	b2d1      	uxtb	r1, r2
    4c46:	4a18      	ldr	r2, [pc, #96]	; (4ca8 <Mcu_Init+0x8c>)
    4c48:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4c4a:	9b03      	ldr	r3, [sp, #12]
    4c4c:	3301      	adds	r3, #1
    4c4e:	9303      	str	r3, [sp, #12]
    4c50:	4b14      	ldr	r3, [pc, #80]	; (4ca4 <Mcu_Init+0x88>)
    4c52:	681b      	ldr	r3, [r3, #0]
    4c54:	689b      	ldr	r3, [r3, #8]
    4c56:	9a03      	ldr	r2, [sp, #12]
    4c58:	429a      	cmp	r2, r3
    4c5a:	d3e8      	bcc.n	4c2e <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4c5c:	2300      	movs	r3, #0
    4c5e:	9303      	str	r3, [sp, #12]
    4c60:	e010      	b.n	4c84 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    4c62:	4b10      	ldr	r3, [pc, #64]	; (4ca4 <Mcu_Init+0x88>)
    4c64:	681b      	ldr	r3, [r3, #0]
    4c66:	6959      	ldr	r1, [r3, #20]
    4c68:	9a03      	ldr	r2, [sp, #12]
    4c6a:	4613      	mov	r3, r2
    4c6c:	01db      	lsls	r3, r3, #7
    4c6e:	1a9b      	subs	r3, r3, r2
    4c70:	00db      	lsls	r3, r3, #3
    4c72:	440b      	add	r3, r1
    4c74:	681b      	ldr	r3, [r3, #0]
    4c76:	9a03      	ldr	r2, [sp, #12]
    4c78:	b2d1      	uxtb	r1, r2
    4c7a:	4a0c      	ldr	r2, [pc, #48]	; (4cac <Mcu_Init+0x90>)
    4c7c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4c7e:	9b03      	ldr	r3, [sp, #12]
    4c80:	3301      	adds	r3, #1
    4c82:	9303      	str	r3, [sp, #12]
    4c84:	4b07      	ldr	r3, [pc, #28]	; (4ca4 <Mcu_Init+0x88>)
    4c86:	681b      	ldr	r3, [r3, #0]
    4c88:	68db      	ldr	r3, [r3, #12]
    4c8a:	9a03      	ldr	r2, [sp, #12]
    4c8c:	429a      	cmp	r2, r3
    4c8e:	d3e8      	bcc.n	4c62 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    4c90:	4b04      	ldr	r3, [pc, #16]	; (4ca4 <Mcu_Init+0x88>)
    4c92:	681b      	ldr	r3, [r3, #0]
    4c94:	699b      	ldr	r3, [r3, #24]
    4c96:	4618      	mov	r0, r3
    4c98:	f000 f88a 	bl	4db0 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4c9c:	bf00      	nop
    4c9e:	b005      	add	sp, #20
    4ca0:	f85d fb04 	ldr.w	pc, [sp], #4
    4ca4:	1fff8d3c 	.word	0x1fff8d3c
    4ca8:	1fff8d38 	.word	0x1fff8d38
    4cac:	1fff8d34 	.word	0x1fff8d34

00004cb0 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    4cb0:	b084      	sub	sp, #16
    4cb2:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    4cb4:	2301      	movs	r3, #1
    4cb6:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    4cba:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    4cbe:	4618      	mov	r0, r3
    4cc0:	b004      	add	sp, #16
    4cc2:	4770      	bx	lr

00004cc4 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    4cc4:	b500      	push	{lr}
    4cc6:	b085      	sub	sp, #20
    4cc8:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    4cca:	4a0e      	ldr	r2, [pc, #56]	; (4d04 <Mcu_InitClock+0x40>)
    4ccc:	9b01      	ldr	r3, [sp, #4]
    4cce:	4413      	add	r3, r2
    4cd0:	781b      	ldrb	r3, [r3, #0]
    4cd2:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    4cd6:	4b0c      	ldr	r3, [pc, #48]	; (4d08 <Mcu_InitClock+0x44>)
    4cd8:	681b      	ldr	r3, [r3, #0]
    4cda:	6959      	ldr	r1, [r3, #20]
    4cdc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4ce0:	4613      	mov	r3, r2
    4ce2:	01db      	lsls	r3, r3, #7
    4ce4:	1a9b      	subs	r3, r3, r2
    4ce6:	00db      	lsls	r3, r3, #3
    4ce8:	440b      	add	r3, r1
    4cea:	4618      	mov	r0, r3
    4cec:	f000 f86a 	bl	4dc4 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    4cf0:	2300      	movs	r3, #0
    4cf2:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    4cf6:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    4cfa:	4618      	mov	r0, r3
    4cfc:	b005      	add	sp, #20
    4cfe:	f85d fb04 	ldr.w	pc, [sp], #4
    4d02:	bf00      	nop
    4d04:	1fff8d34 	.word	0x1fff8d34
    4d08:	1fff8d3c 	.word	0x1fff8d3c

00004d0c <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    4d0c:	b500      	push	{lr}
    4d0e:	b085      	sub	sp, #20
    4d10:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    4d12:	4a0d      	ldr	r2, [pc, #52]	; (4d48 <Mcu_SetMode+0x3c>)
    4d14:	9b01      	ldr	r3, [sp, #4]
    4d16:	4413      	add	r3, r2
    4d18:	781b      	ldrb	r3, [r3, #0]
    4d1a:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    4d1e:	f005 faf5 	bl	a30c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    4d22:	4b0a      	ldr	r3, [pc, #40]	; (4d4c <Mcu_SetMode+0x40>)
    4d24:	681b      	ldr	r3, [r3, #0]
    4d26:	6919      	ldr	r1, [r3, #16]
    4d28:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4d2c:	4613      	mov	r3, r2
    4d2e:	005b      	lsls	r3, r3, #1
    4d30:	4413      	add	r3, r2
    4d32:	009b      	lsls	r3, r3, #2
    4d34:	440b      	add	r3, r1
    4d36:	4618      	mov	r0, r3
    4d38:	f000 f84e 	bl	4dd8 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    4d3c:	f005 fb12 	bl	a364 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4d40:	bf00      	nop
    4d42:	b005      	add	sp, #20
    4d44:	f85d fb04 	ldr.w	pc, [sp], #4
    4d48:	1fff8d38 	.word	0x1fff8d38
    4d4c:	1fff8d3c 	.word	0x1fff8d3c

00004d50 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    4d50:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    4d52:	2302      	movs	r3, #2
    4d54:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    4d56:	9b01      	ldr	r3, [sp, #4]
}
    4d58:	4618      	mov	r0, r3
    4d5a:	b002      	add	sp, #8
    4d5c:	4770      	bx	lr

00004d5e <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    4d5e:	b500      	push	{lr}
    4d60:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    4d62:	f000 f843 	bl	4dec <Mcu_Ipw_GetResetReason>
    4d66:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    4d68:	9b01      	ldr	r3, [sp, #4]
}
    4d6a:	4618      	mov	r0, r3
    4d6c:	b003      	add	sp, #12
    4d6e:	f85d fb04 	ldr.w	pc, [sp], #4

00004d72 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    4d72:	b500      	push	{lr}
    4d74:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    4d76:	f000 f83f 	bl	4df8 <Mcu_Ipw_GetResetRawValue>
    4d7a:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    4d7c:	9b01      	ldr	r3, [sp, #4]
}
    4d7e:	4618      	mov	r0, r3
    4d80:	b003      	add	sp, #12
    4d82:	f85d fb04 	ldr.w	pc, [sp], #4

00004d86 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4d86:	b500      	push	{lr}
    4d88:	b083      	sub	sp, #12
    4d8a:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    4d8c:	9801      	ldr	r0, [sp, #4]
    4d8e:	f000 f839 	bl	4e04 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    4d92:	bf00      	nop
    4d94:	b003      	add	sp, #12
    4d96:	f85d fb04 	ldr.w	pc, [sp], #4

00004d9a <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    4d9a:	b082      	sub	sp, #8
    4d9c:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    4d9e:	4b03      	ldr	r3, [pc, #12]	; (4dac <Mcu_ClkSrcFailureNotification+0x12>)
    4da0:	681b      	ldr	r3, [r3, #0]
    4da2:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    4da4:	bf00      	nop
    4da6:	b002      	add	sp, #8
    4da8:	4770      	bx	lr
    4daa:	bf00      	nop
    4dac:	1fff8d3c 	.word	0x1fff8d3c

00004db0 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    4db0:	b500      	push	{lr}
    4db2:	b083      	sub	sp, #12
    4db4:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    4db6:	9801      	ldr	r0, [sp, #4]
    4db8:	f000 f882 	bl	4ec0 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    4dbc:	bf00      	nop
    4dbe:	b003      	add	sp, #12
    4dc0:	f85d fb04 	ldr.w	pc, [sp], #4

00004dc4 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    4dc4:	b500      	push	{lr}
    4dc6:	b083      	sub	sp, #12
    4dc8:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    4dca:	9801      	ldr	r0, [sp, #4]
    4dcc:	f7fc fc6a 	bl	16a4 <Clock_Ip_InitClock>
}
    4dd0:	bf00      	nop
    4dd2:	b003      	add	sp, #12
    4dd4:	f85d fb04 	ldr.w	pc, [sp], #4

00004dd8 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    4dd8:	b500      	push	{lr}
    4dda:	b083      	sub	sp, #12
    4ddc:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    4dde:	9801      	ldr	r0, [sp, #4]
    4de0:	f000 f820 	bl	4e24 <Power_Ip_SetMode>
}
    4de4:	bf00      	nop
    4de6:	b003      	add	sp, #12
    4de8:	f85d fb04 	ldr.w	pc, [sp], #4

00004dec <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    4dec:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    4dee:	f000 f84f 	bl	4e90 <Power_Ip_GetResetReason>
    4df2:	4603      	mov	r3, r0
}
    4df4:	4618      	mov	r0, r3
    4df6:	bd08      	pop	{r3, pc}

00004df8 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    4df8:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    4dfa:	f000 f857 	bl	4eac <Power_Ip_GetResetRawValue>
    4dfe:	4603      	mov	r3, r0
}
    4e00:	4618      	mov	r0, r3
    4e02:	bd08      	pop	{r3, pc}

00004e04 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4e04:	b500      	push	{lr}
    4e06:	b083      	sub	sp, #12
    4e08:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    4e0a:	9b01      	ldr	r3, [sp, #4]
    4e0c:	2b00      	cmp	r3, #0
    4e0e:	d102      	bne.n	4e16 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    4e10:	f000 f86c 	bl	4eec <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    4e14:	e001      	b.n	4e1a <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    4e16:	f000 f86e 	bl	4ef6 <Power_Ip_EnableSleepOnExit>
}
    4e1a:	bf00      	nop
    4e1c:	b003      	add	sp, #12
    4e1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00004e24 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4e24:	b500      	push	{lr}
    4e26:	b085      	sub	sp, #20
    4e28:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    4e2a:	9b01      	ldr	r3, [sp, #4]
    4e2c:	685b      	ldr	r3, [r3, #4]
    4e2e:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    4e30:	9802      	ldr	r0, [sp, #8]
    4e32:	f000 f9f5 	bl	5220 <Power_Ip_SMC_ModeCheckEntry>
    4e36:	4603      	mov	r3, r0
    4e38:	2b00      	cmp	r3, #0
    4e3a:	d002      	beq.n	4e42 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e3c:	2301      	movs	r3, #1
    4e3e:	9303      	str	r3, [sp, #12]
    4e40:	e003      	b.n	4e4a <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    4e42:	9801      	ldr	r0, [sp, #4]
    4e44:	f000 fa1e 	bl	5284 <Power_Ip_SMC_ModeConfig>
    4e48:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    4e4a:	9b03      	ldr	r3, [sp, #12]
    4e4c:	2b01      	cmp	r3, #1
    4e4e:	d103      	bne.n	4e58 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4e50:	21ff      	movs	r1, #255	; 0xff
    4e52:	2003      	movs	r0, #3
    4e54:	f000 f8f4 	bl	5040 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    4e58:	bf00      	nop
    4e5a:	b005      	add	sp, #20
    4e5c:	f85d fb04 	ldr.w	pc, [sp], #4

00004e60 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    4e60:	b084      	sub	sp, #16
    4e62:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    4e64:	230c      	movs	r3, #12
    4e66:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    4e68:	4a08      	ldr	r2, [pc, #32]	; (4e8c <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4e6a:	9b01      	ldr	r3, [sp, #4]
    4e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4e70:	2b0e      	cmp	r3, #14
    4e72:	d805      	bhi.n	4e80 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    4e74:	4a05      	ldr	r2, [pc, #20]	; (4e8c <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4e76:	9b01      	ldr	r3, [sp, #4]
    4e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4e7c:	9303      	str	r3, [sp, #12]
    4e7e:	e001      	b.n	4e84 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    4e80:	230c      	movs	r3, #12
    4e82:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    4e84:	9b03      	ldr	r3, [sp, #12]
}
    4e86:	4618      	mov	r0, r3
    4e88:	b004      	add	sp, #16
    4e8a:	4770      	bx	lr
    4e8c:	0000bf98 	.word	0x0000bf98

00004e90 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    4e90:	b500      	push	{lr}
    4e92:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    4e94:	f000 f940 	bl	5118 <Power_Ip_RCM_GetResetReason>
    4e98:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    4e9a:	9801      	ldr	r0, [sp, #4]
    4e9c:	f7ff ffe0 	bl	4e60 <Power_Ip_ConvertIntergeToResetType>
    4ea0:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    4ea2:	9b00      	ldr	r3, [sp, #0]
}
    4ea4:	4618      	mov	r0, r3
    4ea6:	b003      	add	sp, #12
    4ea8:	f85d fb04 	ldr.w	pc, [sp], #4

00004eac <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    4eac:	b500      	push	{lr}
    4eae:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    4eb0:	f000 f98a 	bl	51c8 <Power_Ip_RCM_GetResetRawValue>
    4eb4:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    4eb6:	9b01      	ldr	r3, [sp, #4]
}
    4eb8:	4618      	mov	r0, r3
    4eba:	b003      	add	sp, #12
    4ebc:	f85d fb04 	ldr.w	pc, [sp], #4

00004ec0 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    4ec0:	b500      	push	{lr}
    4ec2:	b083      	sub	sp, #12
    4ec4:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    4ec6:	9b01      	ldr	r3, [sp, #4]
    4ec8:	681b      	ldr	r3, [r3, #0]
    4eca:	4618      	mov	r0, r3
    4ecc:	f000 f90e 	bl	50ec <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    4ed0:	9b01      	ldr	r3, [sp, #4]
    4ed2:	685b      	ldr	r3, [r3, #4]
    4ed4:	4618      	mov	r0, r3
    4ed6:	f000 f86d 	bl	4fb4 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    4eda:	9b01      	ldr	r3, [sp, #4]
    4edc:	689b      	ldr	r3, [r3, #8]
    4ede:	4618      	mov	r0, r3
    4ee0:	f000 f990 	bl	5204 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    4ee4:	bf00      	nop
    4ee6:	b003      	add	sp, #12
    4ee8:	f85d fb04 	ldr.w	pc, [sp], #4

00004eec <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    4eec:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    4eee:	f000 f811 	bl	4f14 <Power_Ip_CM4_DisableSleepOnExit>
}
    4ef2:	bf00      	nop
    4ef4:	bd08      	pop	{r3, pc}

00004ef6 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    4ef6:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    4ef8:	f000 f820 	bl	4f3c <Power_Ip_CM4_EnableSleepOnExit>
}
    4efc:	bf00      	nop
    4efe:	bd08      	pop	{r3, pc}

00004f00 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    4f00:	b082      	sub	sp, #8
    4f02:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    4f04:	4a02      	ldr	r2, [pc, #8]	; (4f10 <Power_Ip_InstallNotificationsCallback+0x10>)
    4f06:	9b01      	ldr	r3, [sp, #4]
    4f08:	6013      	str	r3, [r2, #0]
}
    4f0a:	bf00      	nop
    4f0c:	b002      	add	sp, #8
    4f0e:	4770      	bx	lr
    4f10:	1fff8b1c 	.word	0x1fff8b1c

00004f14 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    4f14:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f16:	2300      	movs	r3, #0
    4f18:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f1a:	4b07      	ldr	r3, [pc, #28]	; (4f38 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4f1c:	681b      	ldr	r3, [r3, #0]
    4f1e:	685b      	ldr	r3, [r3, #4]
    4f20:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    4f22:	9b01      	ldr	r3, [sp, #4]
    4f24:	f023 0302 	bic.w	r3, r3, #2
    4f28:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f2a:	4b03      	ldr	r3, [pc, #12]	; (4f38 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4f2c:	681b      	ldr	r3, [r3, #0]
    4f2e:	9a01      	ldr	r2, [sp, #4]
    4f30:	605a      	str	r2, [r3, #4]
}
    4f32:	bf00      	nop
    4f34:	b002      	add	sp, #8
    4f36:	4770      	bx	lr
    4f38:	1fff8b20 	.word	0x1fff8b20

00004f3c <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    4f3c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f3e:	2300      	movs	r3, #0
    4f40:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f42:	4b07      	ldr	r3, [pc, #28]	; (4f60 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4f44:	681b      	ldr	r3, [r3, #0]
    4f46:	685b      	ldr	r3, [r3, #4]
    4f48:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    4f4a:	9b01      	ldr	r3, [sp, #4]
    4f4c:	f043 0302 	orr.w	r3, r3, #2
    4f50:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f52:	4b03      	ldr	r3, [pc, #12]	; (4f60 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4f54:	681b      	ldr	r3, [r3, #0]
    4f56:	9a01      	ldr	r2, [sp, #4]
    4f58:	605a      	str	r2, [r3, #4]
}
    4f5a:	bf00      	nop
    4f5c:	b002      	add	sp, #8
    4f5e:	4770      	bx	lr
    4f60:	1fff8b20 	.word	0x1fff8b20

00004f64 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    4f64:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f66:	2300      	movs	r3, #0
    4f68:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f6a:	4b07      	ldr	r3, [pc, #28]	; (4f88 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4f6c:	681b      	ldr	r3, [r3, #0]
    4f6e:	685b      	ldr	r3, [r3, #4]
    4f70:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    4f72:	9b01      	ldr	r3, [sp, #4]
    4f74:	f043 0304 	orr.w	r3, r3, #4
    4f78:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f7a:	4b03      	ldr	r3, [pc, #12]	; (4f88 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4f7c:	681b      	ldr	r3, [r3, #0]
    4f7e:	9a01      	ldr	r2, [sp, #4]
    4f80:	605a      	str	r2, [r3, #4]
}
    4f82:	bf00      	nop
    4f84:	b002      	add	sp, #8
    4f86:	4770      	bx	lr
    4f88:	1fff8b20 	.word	0x1fff8b20

00004f8c <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    4f8c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f8e:	2300      	movs	r3, #0
    4f90:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f92:	4b07      	ldr	r3, [pc, #28]	; (4fb0 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4f94:	681b      	ldr	r3, [r3, #0]
    4f96:	685b      	ldr	r3, [r3, #4]
    4f98:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    4f9a:	9b01      	ldr	r3, [sp, #4]
    4f9c:	f023 0304 	bic.w	r3, r3, #4
    4fa0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4fa2:	4b03      	ldr	r3, [pc, #12]	; (4fb0 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4fa4:	681b      	ldr	r3, [r3, #0]
    4fa6:	9a01      	ldr	r2, [sp, #4]
    4fa8:	605a      	str	r2, [r3, #4]
}
    4faa:	bf00      	nop
    4fac:	b002      	add	sp, #8
    4fae:	4770      	bx	lr
    4fb0:	1fff8b20 	.word	0x1fff8b20

00004fb4 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    4fb4:	b084      	sub	sp, #16
    4fb6:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    4fb8:	4b20      	ldr	r3, [pc, #128]	; (503c <Power_Ip_PMC_PowerInit+0x88>)
    4fba:	781b      	ldrb	r3, [r3, #0]
    4fbc:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    4fc0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fc4:	f003 030f 	and.w	r3, r3, #15
    4fc8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    4fcc:	9b01      	ldr	r3, [sp, #4]
    4fce:	781a      	ldrb	r2, [r3, #0]
    4fd0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fd4:	4313      	orrs	r3, r2
    4fd6:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    4fda:	4a18      	ldr	r2, [pc, #96]	; (503c <Power_Ip_PMC_PowerInit+0x88>)
    4fdc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fe0:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    4fe2:	4b16      	ldr	r3, [pc, #88]	; (503c <Power_Ip_PMC_PowerInit+0x88>)
    4fe4:	785b      	ldrb	r3, [r3, #1]
    4fe6:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    4fea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fee:	f003 031f 	and.w	r3, r3, #31
    4ff2:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    4ff6:	9b01      	ldr	r3, [sp, #4]
    4ff8:	785a      	ldrb	r2, [r3, #1]
    4ffa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4ffe:	4313      	orrs	r3, r2
    5000:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5004:	4a0d      	ldr	r2, [pc, #52]	; (503c <Power_Ip_PMC_PowerInit+0x88>)
    5006:	f89d 300f 	ldrb.w	r3, [sp, #15]
    500a:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    500c:	4b0b      	ldr	r3, [pc, #44]	; (503c <Power_Ip_PMC_PowerInit+0x88>)
    500e:	789b      	ldrb	r3, [r3, #2]
    5010:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5014:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5018:	f003 0338 	and.w	r3, r3, #56	; 0x38
    501c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5020:	9b01      	ldr	r3, [sp, #4]
    5022:	789a      	ldrb	r2, [r3, #2]
    5024:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5028:	4313      	orrs	r3, r2
    502a:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    502e:	4a03      	ldr	r2, [pc, #12]	; (503c <Power_Ip_PMC_PowerInit+0x88>)
    5030:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5034:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5036:	bf00      	nop
    5038:	b004      	add	sp, #16
    503a:	4770      	bx	lr
    503c:	4007d000 	.word	0x4007d000

00005040 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5040:	b500      	push	{lr}
    5042:	b083      	sub	sp, #12
    5044:	9001      	str	r0, [sp, #4]
    5046:	460b      	mov	r3, r1
    5048:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    504c:	4b05      	ldr	r3, [pc, #20]	; (5064 <Power_Ip_ReportPowerErrors+0x24>)
    504e:	681b      	ldr	r3, [r3, #0]
    5050:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5054:	4611      	mov	r1, r2
    5056:	9801      	ldr	r0, [sp, #4]
    5058:	4798      	blx	r3
}
    505a:	bf00      	nop
    505c:	b003      	add	sp, #12
    505e:	f85d fb04 	ldr.w	pc, [sp], #4
    5062:	bf00      	nop
    5064:	1fff8b1c 	.word	0x1fff8b1c

00005068 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5068:	b082      	sub	sp, #8
    506a:	9001      	str	r0, [sp, #4]
    506c:	460b      	mov	r3, r1
    506e:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5072:	bf00      	nop
    5074:	b002      	add	sp, #8
    5076:	4770      	bx	lr

00005078 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5078:	b500      	push	{lr}
    507a:	b085      	sub	sp, #20
    507c:	9003      	str	r0, [sp, #12]
    507e:	9102      	str	r1, [sp, #8]
    5080:	9201      	str	r2, [sp, #4]
    5082:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5084:	2000      	movs	r0, #0
    5086:	f7fc f83d 	bl	1104 <OsIf_GetCounter>
    508a:	4602      	mov	r2, r0
    508c:	9b03      	ldr	r3, [sp, #12]
    508e:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5090:	9b02      	ldr	r3, [sp, #8]
    5092:	2200      	movs	r2, #0
    5094:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5096:	2100      	movs	r1, #0
    5098:	9800      	ldr	r0, [sp, #0]
    509a:	f7fc f87f 	bl	119c <OsIf_MicrosToTicks>
    509e:	4602      	mov	r2, r0
    50a0:	9b01      	ldr	r3, [sp, #4]
    50a2:	601a      	str	r2, [r3, #0]
}
    50a4:	bf00      	nop
    50a6:	b005      	add	sp, #20
    50a8:	f85d fb04 	ldr.w	pc, [sp], #4

000050ac <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    50ac:	b500      	push	{lr}
    50ae:	b087      	sub	sp, #28
    50b0:	9003      	str	r0, [sp, #12]
    50b2:	9102      	str	r1, [sp, #8]
    50b4:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    50b6:	2300      	movs	r3, #0
    50b8:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    50bc:	2100      	movs	r1, #0
    50be:	9803      	ldr	r0, [sp, #12]
    50c0:	f7fc f839 	bl	1136 <OsIf_GetElapsed>
    50c4:	4602      	mov	r2, r0
    50c6:	9b02      	ldr	r3, [sp, #8]
    50c8:	681b      	ldr	r3, [r3, #0]
    50ca:	441a      	add	r2, r3
    50cc:	9b02      	ldr	r3, [sp, #8]
    50ce:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    50d0:	9b02      	ldr	r3, [sp, #8]
    50d2:	681b      	ldr	r3, [r3, #0]
    50d4:	9a01      	ldr	r2, [sp, #4]
    50d6:	429a      	cmp	r2, r3
    50d8:	d802      	bhi.n	50e0 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    50da:	2301      	movs	r3, #1
    50dc:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    50e0:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    50e4:	4618      	mov	r0, r3
    50e6:	b007      	add	sp, #28
    50e8:	f85d fb04 	ldr.w	pc, [sp], #4

000050ec <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    50ec:	b082      	sub	sp, #8
    50ee:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    50f0:	9b01      	ldr	r3, [sp, #4]
    50f2:	681a      	ldr	r2, [r3, #0]
    50f4:	4907      	ldr	r1, [pc, #28]	; (5114 <Power_Ip_RCM_ResetInit+0x28>)
    50f6:	f641 7307 	movw	r3, #7943	; 0x1f07
    50fa:	4013      	ands	r3, r2
    50fc:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    50fe:	9b01      	ldr	r3, [sp, #4]
    5100:	685a      	ldr	r2, [r3, #4]
    5102:	4904      	ldr	r1, [pc, #16]	; (5114 <Power_Ip_RCM_ResetInit+0x28>)
    5104:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5108:	4013      	ands	r3, r2
    510a:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    510c:	bf00      	nop
    510e:	b002      	add	sp, #8
    5110:	4770      	bx	lr
    5112:	bf00      	nop
    5114:	4007f000 	.word	0x4007f000

00005118 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5118:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    511a:	230c      	movs	r3, #12
    511c:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    511e:	2300      	movs	r3, #0
    5120:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5122:	2300      	movs	r3, #0
    5124:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5126:	2300      	movs	r3, #0
    5128:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    512a:	4b25      	ldr	r3, [pc, #148]	; (51c0 <Power_Ip_RCM_GetResetReason+0xa8>)
    512c:	699a      	ldr	r2, [r3, #24]
    512e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5132:	4013      	ands	r3, r2
    5134:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5136:	9b03      	ldr	r3, [sp, #12]
    5138:	2b00      	cmp	r3, #0
    513a:	d008      	beq.n	514e <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    513c:	4920      	ldr	r1, [pc, #128]	; (51c0 <Power_Ip_RCM_GetResetReason+0xa8>)
    513e:	9a03      	ldr	r2, [sp, #12]
    5140:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5144:	4013      	ands	r3, r2
    5146:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5148:	4a1e      	ldr	r2, [pc, #120]	; (51c4 <Power_Ip_RCM_GetResetReason+0xac>)
    514a:	9b03      	ldr	r3, [sp, #12]
    514c:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    514e:	4b1d      	ldr	r3, [pc, #116]	; (51c4 <Power_Ip_RCM_GetResetReason+0xac>)
    5150:	681b      	ldr	r3, [r3, #0]
    5152:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5154:	9a02      	ldr	r2, [sp, #8]
    5156:	f642 73ee 	movw	r3, #12270	; 0x2fee
    515a:	4013      	ands	r3, r2
    515c:	2b82      	cmp	r3, #130	; 0x82
    515e:	d102      	bne.n	5166 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5160:	2305      	movs	r3, #5
    5162:	9307      	str	r3, [sp, #28]
    5164:	e027      	b.n	51b6 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5166:	2300      	movs	r3, #0
    5168:	9306      	str	r3, [sp, #24]
    516a:	e021      	b.n	51b0 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    516c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5170:	9b06      	ldr	r3, [sp, #24]
    5172:	fa22 f303 	lsr.w	r3, r2, r3
    5176:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5178:	9a01      	ldr	r2, [sp, #4]
    517a:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    517e:	4013      	ands	r3, r2
    5180:	2b00      	cmp	r3, #0
    5182:	d012      	beq.n	51aa <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5184:	9a01      	ldr	r2, [sp, #4]
    5186:	9b02      	ldr	r3, [sp, #8]
    5188:	4013      	ands	r3, r2
    518a:	2b00      	cmp	r3, #0
    518c:	d00a      	beq.n	51a4 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    518e:	9b05      	ldr	r3, [sp, #20]
    5190:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5192:	9b04      	ldr	r3, [sp, #16]
    5194:	3301      	adds	r3, #1
    5196:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5198:	9b04      	ldr	r3, [sp, #16]
    519a:	2b01      	cmp	r3, #1
    519c:	d902      	bls.n	51a4 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    519e:	230d      	movs	r3, #13
    51a0:	9307      	str	r3, [sp, #28]
                        break;
    51a2:	e008      	b.n	51b6 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    51a4:	9b05      	ldr	r3, [sp, #20]
    51a6:	3301      	adds	r3, #1
    51a8:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    51aa:	9b06      	ldr	r3, [sp, #24]
    51ac:	3301      	adds	r3, #1
    51ae:	9306      	str	r3, [sp, #24]
    51b0:	9b06      	ldr	r3, [sp, #24]
    51b2:	2b1f      	cmp	r3, #31
    51b4:	d9da      	bls.n	516c <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    51b6:	9b07      	ldr	r3, [sp, #28]
}
    51b8:	4618      	mov	r0, r3
    51ba:	b008      	add	sp, #32
    51bc:	4770      	bx	lr
    51be:	bf00      	nop
    51c0:	4007f000 	.word	0x4007f000
    51c4:	1fff8d40 	.word	0x1fff8d40

000051c8 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    51c8:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    51ca:	4b0c      	ldr	r3, [pc, #48]	; (51fc <Power_Ip_RCM_GetResetRawValue+0x34>)
    51cc:	699a      	ldr	r2, [r3, #24]
    51ce:	f642 73ee 	movw	r3, #12270	; 0x2fee
    51d2:	4013      	ands	r3, r2
    51d4:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    51d6:	9b01      	ldr	r3, [sp, #4]
    51d8:	2b00      	cmp	r3, #0
    51da:	d008      	beq.n	51ee <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    51dc:	4907      	ldr	r1, [pc, #28]	; (51fc <Power_Ip_RCM_GetResetRawValue+0x34>)
    51de:	9a01      	ldr	r2, [sp, #4]
    51e0:	f642 73ee 	movw	r3, #12270	; 0x2fee
    51e4:	4013      	ands	r3, r2
    51e6:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    51e8:	4a05      	ldr	r2, [pc, #20]	; (5200 <Power_Ip_RCM_GetResetRawValue+0x38>)
    51ea:	9b01      	ldr	r3, [sp, #4]
    51ec:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    51ee:	4b04      	ldr	r3, [pc, #16]	; (5200 <Power_Ip_RCM_GetResetRawValue+0x38>)
    51f0:	681b      	ldr	r3, [r3, #0]
    51f2:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    51f4:	9b00      	ldr	r3, [sp, #0]
}
    51f6:	4618      	mov	r0, r3
    51f8:	b002      	add	sp, #8
    51fa:	4770      	bx	lr
    51fc:	4007f000 	.word	0x4007f000
    5200:	1fff8d40 	.word	0x1fff8d40

00005204 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5204:	b082      	sub	sp, #8
    5206:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5208:	9b01      	ldr	r3, [sp, #4]
    520a:	681b      	ldr	r3, [r3, #0]
    520c:	4a03      	ldr	r2, [pc, #12]	; (521c <Power_Ip_SMC_AllowedModesConfig+0x18>)
    520e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5212:	6093      	str	r3, [r2, #8]
}
    5214:	bf00      	nop
    5216:	b002      	add	sp, #8
    5218:	4770      	bx	lr
    521a:	bf00      	nop
    521c:	4007e000 	.word	0x4007e000

00005220 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5220:	b084      	sub	sp, #16
    5222:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5224:	2301      	movs	r3, #1
    5226:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5228:	4b15      	ldr	r3, [pc, #84]	; (5280 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    522a:	695b      	ldr	r3, [r3, #20]
    522c:	b2db      	uxtb	r3, r3
    522e:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5230:	9b01      	ldr	r3, [sp, #4]
    5232:	2b02      	cmp	r3, #2
    5234:	d012      	beq.n	525c <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5236:	9b01      	ldr	r3, [sp, #4]
    5238:	2b02      	cmp	r3, #2
    523a:	d818      	bhi.n	526e <Power_Ip_SMC_ModeCheckEntry+0x4e>
    523c:	9b01      	ldr	r3, [sp, #4]
    523e:	2b00      	cmp	r3, #0
    5240:	d003      	beq.n	524a <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5242:	9b01      	ldr	r3, [sp, #4]
    5244:	2b01      	cmp	r3, #1
    5246:	d003      	beq.n	5250 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5248:	e011      	b.n	526e <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    524a:	2300      	movs	r3, #0
    524c:	9303      	str	r3, [sp, #12]
            break;
    524e:	e013      	b.n	5278 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5250:	9b02      	ldr	r3, [sp, #8]
    5252:	2b01      	cmp	r3, #1
    5254:	d10d      	bne.n	5272 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5256:	2300      	movs	r3, #0
    5258:	9303      	str	r3, [sp, #12]
            break;
    525a:	e00a      	b.n	5272 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    525c:	9b02      	ldr	r3, [sp, #8]
    525e:	2b01      	cmp	r3, #1
    5260:	d002      	beq.n	5268 <Power_Ip_SMC_ModeCheckEntry+0x48>
    5262:	9b02      	ldr	r3, [sp, #8]
    5264:	2b10      	cmp	r3, #16
    5266:	d106      	bne.n	5276 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5268:	2300      	movs	r3, #0
    526a:	9303      	str	r3, [sp, #12]
            break;
    526c:	e003      	b.n	5276 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    526e:	bf00      	nop
    5270:	e002      	b.n	5278 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5272:	bf00      	nop
    5274:	e000      	b.n	5278 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5276:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5278:	9b03      	ldr	r3, [sp, #12]
}
    527a:	4618      	mov	r0, r3
    527c:	b004      	add	sp, #16
    527e:	4770      	bx	lr
    5280:	4007e000 	.word	0x4007e000

00005284 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5284:	b500      	push	{lr}
    5286:	b08b      	sub	sp, #44	; 0x2c
    5288:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    528a:	2300      	movs	r3, #0
    528c:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    528e:	2300      	movs	r3, #0
    5290:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5292:	2300      	movs	r3, #0
    5294:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5298:	9b01      	ldr	r3, [sp, #4]
    529a:	685b      	ldr	r3, [r3, #4]
    529c:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    529e:	9b08      	ldr	r3, [sp, #32]
    52a0:	2b02      	cmp	r3, #2
    52a2:	d076      	beq.n	5392 <Power_Ip_SMC_ModeConfig+0x10e>
    52a4:	9b08      	ldr	r3, [sp, #32]
    52a6:	2b02      	cmp	r3, #2
    52a8:	f200 80ab 	bhi.w	5402 <Power_Ip_SMC_ModeConfig+0x17e>
    52ac:	9b08      	ldr	r3, [sp, #32]
    52ae:	2b00      	cmp	r3, #0
    52b0:	d003      	beq.n	52ba <Power_Ip_SMC_ModeConfig+0x36>
    52b2:	9b08      	ldr	r3, [sp, #32]
    52b4:	2b01      	cmp	r3, #1
    52b6:	d034      	beq.n	5322 <Power_Ip_SMC_ModeConfig+0x9e>
    52b8:	e0a3      	b.n	5402 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    52ba:	4b58      	ldr	r3, [pc, #352]	; (541c <Power_Ip_SMC_ModeConfig+0x198>)
    52bc:	68db      	ldr	r3, [r3, #12]
    52be:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    52c0:	9b06      	ldr	r3, [sp, #24]
    52c2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    52c6:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    52c8:	4a54      	ldr	r2, [pc, #336]	; (541c <Power_Ip_SMC_ModeConfig+0x198>)
    52ca:	9b06      	ldr	r3, [sp, #24]
    52cc:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    52ce:	aa02      	add	r2, sp, #8
    52d0:	a903      	add	r1, sp, #12
    52d2:	a804      	add	r0, sp, #16
    52d4:	f24c 3350 	movw	r3, #50000	; 0xc350
    52d8:	f7ff fece 	bl	5078 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    52dc:	9a02      	ldr	r2, [sp, #8]
    52de:	a903      	add	r1, sp, #12
    52e0:	ab04      	add	r3, sp, #16
    52e2:	4618      	mov	r0, r3
    52e4:	f7ff fee2 	bl	50ac <Power_Ip_TimeoutExpired>
    52e8:	4603      	mov	r3, r0
    52ea:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    52ee:	4b4b      	ldr	r3, [pc, #300]	; (541c <Power_Ip_SMC_ModeConfig+0x198>)
    52f0:	695b      	ldr	r3, [r3, #20]
    52f2:	f003 0301 	and.w	r3, r3, #1
    52f6:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    52f8:	9b05      	ldr	r3, [sp, #20]
    52fa:	2b01      	cmp	r3, #1
    52fc:	d006      	beq.n	530c <Power_Ip_SMC_ModeConfig+0x88>
    52fe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5302:	f083 0301 	eor.w	r3, r3, #1
    5306:	b2db      	uxtb	r3, r3
    5308:	2b00      	cmp	r3, #0
    530a:	d1e7      	bne.n	52dc <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    530c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5310:	2b00      	cmp	r3, #0
    5312:	d079      	beq.n	5408 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5314:	2301      	movs	r3, #1
    5316:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5318:	21ff      	movs	r1, #255	; 0xff
    531a:	2000      	movs	r0, #0
    531c:	f7ff fe90 	bl	5040 <Power_Ip_ReportPowerErrors>
            }

            break;
    5320:	e072      	b.n	5408 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5322:	4b3e      	ldr	r3, [pc, #248]	; (541c <Power_Ip_SMC_ModeConfig+0x198>)
    5324:	68db      	ldr	r3, [r3, #12]
    5326:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5328:	9b06      	ldr	r3, [sp, #24]
    532a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    532e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5330:	9b06      	ldr	r3, [sp, #24]
    5332:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5336:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5338:	4a38      	ldr	r2, [pc, #224]	; (541c <Power_Ip_SMC_ModeConfig+0x198>)
    533a:	9b06      	ldr	r3, [sp, #24]
    533c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    533e:	aa02      	add	r2, sp, #8
    5340:	a903      	add	r1, sp, #12
    5342:	a804      	add	r0, sp, #16
    5344:	f24c 3350 	movw	r3, #50000	; 0xc350
    5348:	f7ff fe96 	bl	5078 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    534c:	9a02      	ldr	r2, [sp, #8]
    534e:	a903      	add	r1, sp, #12
    5350:	ab04      	add	r3, sp, #16
    5352:	4618      	mov	r0, r3
    5354:	f7ff feaa 	bl	50ac <Power_Ip_TimeoutExpired>
    5358:	4603      	mov	r3, r0
    535a:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    535e:	4b2f      	ldr	r3, [pc, #188]	; (541c <Power_Ip_SMC_ModeConfig+0x198>)
    5360:	695b      	ldr	r3, [r3, #20]
    5362:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5366:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5368:	9b05      	ldr	r3, [sp, #20]
    536a:	2b80      	cmp	r3, #128	; 0x80
    536c:	d006      	beq.n	537c <Power_Ip_SMC_ModeConfig+0xf8>
    536e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5372:	f083 0301 	eor.w	r3, r3, #1
    5376:	b2db      	uxtb	r3, r3
    5378:	2b00      	cmp	r3, #0
    537a:	d1e7      	bne.n	534c <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    537c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5380:	2b00      	cmp	r3, #0
    5382:	d043      	beq.n	540c <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5384:	2301      	movs	r3, #1
    5386:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5388:	21ff      	movs	r1, #255	; 0xff
    538a:	2000      	movs	r0, #0
    538c:	f7ff fe58 	bl	5040 <Power_Ip_ReportPowerErrors>
            }

            break;
    5390:	e03c      	b.n	540c <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5392:	4b22      	ldr	r3, [pc, #136]	; (541c <Power_Ip_SMC_ModeConfig+0x198>)
    5394:	68db      	ldr	r3, [r3, #12]
    5396:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5398:	9b06      	ldr	r3, [sp, #24]
    539a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    539e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    53a0:	9b06      	ldr	r3, [sp, #24]
    53a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    53a6:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    53a8:	4a1c      	ldr	r2, [pc, #112]	; (541c <Power_Ip_SMC_ModeConfig+0x198>)
    53aa:	9b06      	ldr	r3, [sp, #24]
    53ac:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    53ae:	aa02      	add	r2, sp, #8
    53b0:	a903      	add	r1, sp, #12
    53b2:	a804      	add	r0, sp, #16
    53b4:	f24c 3350 	movw	r3, #50000	; 0xc350
    53b8:	f7ff fe5e 	bl	5078 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    53bc:	9a02      	ldr	r2, [sp, #8]
    53be:	a903      	add	r1, sp, #12
    53c0:	ab04      	add	r3, sp, #16
    53c2:	4618      	mov	r0, r3
    53c4:	f7ff fe72 	bl	50ac <Power_Ip_TimeoutExpired>
    53c8:	4603      	mov	r3, r0
    53ca:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    53ce:	4b13      	ldr	r3, [pc, #76]	; (541c <Power_Ip_SMC_ModeConfig+0x198>)
    53d0:	695b      	ldr	r3, [r3, #20]
    53d2:	f003 0304 	and.w	r3, r3, #4
    53d6:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    53d8:	9b05      	ldr	r3, [sp, #20]
    53da:	2b04      	cmp	r3, #4
    53dc:	d006      	beq.n	53ec <Power_Ip_SMC_ModeConfig+0x168>
    53de:	f89d 301f 	ldrb.w	r3, [sp, #31]
    53e2:	f083 0301 	eor.w	r3, r3, #1
    53e6:	b2db      	uxtb	r3, r3
    53e8:	2b00      	cmp	r3, #0
    53ea:	d1e7      	bne.n	53bc <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    53ec:	f89d 301f 	ldrb.w	r3, [sp, #31]
    53f0:	2b00      	cmp	r3, #0
    53f2:	d00d      	beq.n	5410 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    53f4:	2301      	movs	r3, #1
    53f6:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    53f8:	21ff      	movs	r1, #255	; 0xff
    53fa:	2000      	movs	r0, #0
    53fc:	f7ff fe20 	bl	5040 <Power_Ip_ReportPowerErrors>
            }

            break;
    5400:	e006      	b.n	5410 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5402:	2301      	movs	r3, #1
    5404:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5406:	e004      	b.n	5412 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5408:	bf00      	nop
    540a:	e002      	b.n	5412 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    540c:	bf00      	nop
    540e:	e000      	b.n	5412 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5410:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5412:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5414:	4618      	mov	r0, r3
    5416:	b00b      	add	sp, #44	; 0x2c
    5418:	f85d fb04 	ldr.w	pc, [sp], #4
    541c:	4007e000 	.word	0x4007e000

00005420 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5420:	b500      	push	{lr}
    5422:	b085      	sub	sp, #20
    5424:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5426:	9b01      	ldr	r3, [sp, #4]
    5428:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    542a:	9803      	ldr	r0, [sp, #12]
    542c:	f000 fbc8 	bl	5bc0 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5430:	4a03      	ldr	r2, [pc, #12]	; (5440 <Port_Init+0x20>)
    5432:	9b03      	ldr	r3, [sp, #12]
    5434:	6013      	str	r3, [r2, #0]
        }
    }
}
    5436:	bf00      	nop
    5438:	b005      	add	sp, #20
    543a:	f85d fb04 	ldr.w	pc, [sp], #4
    543e:	bf00      	nop
    5440:	1fff8d44 	.word	0x1fff8d44

00005444 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5444:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5446:	4b03      	ldr	r3, [pc, #12]	; (5454 <Port_RefreshPortDirection+0x10>)
    5448:	681b      	ldr	r3, [r3, #0]
    544a:	4618      	mov	r0, r3
    544c:	f000 fc10 	bl	5c70 <Port_Ipw_RefreshPortDirection>
    }
}
    5450:	bf00      	nop
    5452:	bd08      	pop	{r3, pc}
    5454:	1fff8d44 	.word	0x1fff8d44

00005458 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5458:	b086      	sub	sp, #24
    545a:	9003      	str	r0, [sp, #12]
    545c:	9102      	str	r1, [sp, #8]
    545e:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5460:	23ff      	movs	r3, #255	; 0xff
    5462:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5464:	9b03      	ldr	r3, [sp, #12]
    5466:	4a39      	ldr	r2, [pc, #228]	; (554c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5468:	4293      	cmp	r3, r2
    546a:	d151      	bne.n	5510 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    546c:	9b02      	ldr	r3, [sp, #8]
    546e:	2b10      	cmp	r3, #16
    5470:	d867      	bhi.n	5542 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5472:	a201      	add	r2, pc, #4	; (adr r2, 5478 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5478:	000054bd 	.word	0x000054bd
    547c:	000054cb 	.word	0x000054cb
    5480:	00005543 	.word	0x00005543
    5484:	00005543 	.word	0x00005543
    5488:	00005543 	.word	0x00005543
    548c:	00005543 	.word	0x00005543
    5490:	00005543 	.word	0x00005543
    5494:	00005543 	.word	0x00005543
    5498:	00005543 	.word	0x00005543
    549c:	00005543 	.word	0x00005543
    54a0:	00005543 	.word	0x00005543
    54a4:	00005543 	.word	0x00005543
    54a8:	00005543 	.word	0x00005543
    54ac:	000054d9 	.word	0x000054d9
    54b0:	000054e7 	.word	0x000054e7
    54b4:	000054f5 	.word	0x000054f5
    54b8:	00005503 	.word	0x00005503
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    54bc:	2301      	movs	r3, #1
    54be:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    54c0:	9a05      	ldr	r2, [sp, #20]
    54c2:	9b01      	ldr	r3, [sp, #4]
    54c4:	4313      	orrs	r3, r2
    54c6:	9305      	str	r3, [sp, #20]
                break;
    54c8:	e03c      	b.n	5544 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    54ca:	2302      	movs	r3, #2
    54cc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    54ce:	9a05      	ldr	r2, [sp, #20]
    54d0:	9b01      	ldr	r3, [sp, #4]
    54d2:	4313      	orrs	r3, r2
    54d4:	9305      	str	r3, [sp, #20]
                break;
    54d6:	e035      	b.n	5544 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    54d8:	2304      	movs	r3, #4
    54da:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    54dc:	9a05      	ldr	r2, [sp, #20]
    54de:	9b01      	ldr	r3, [sp, #4]
    54e0:	4313      	orrs	r3, r2
    54e2:	9305      	str	r3, [sp, #20]
                break;
    54e4:	e02e      	b.n	5544 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    54e6:	2308      	movs	r3, #8
    54e8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    54ea:	9a05      	ldr	r2, [sp, #20]
    54ec:	9b01      	ldr	r3, [sp, #4]
    54ee:	4313      	orrs	r3, r2
    54f0:	9305      	str	r3, [sp, #20]
                break;
    54f2:	e027      	b.n	5544 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    54f4:	230e      	movs	r3, #14
    54f6:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    54f8:	9a05      	ldr	r2, [sp, #20]
    54fa:	9b01      	ldr	r3, [sp, #4]
    54fc:	4013      	ands	r3, r2
    54fe:	9305      	str	r3, [sp, #20]
                break;
    5500:	e020      	b.n	5544 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5502:	230d      	movs	r3, #13
    5504:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5506:	9a05      	ldr	r2, [sp, #20]
    5508:	9b01      	ldr	r3, [sp, #4]
    550a:	4013      	ands	r3, r2
    550c:	9305      	str	r3, [sp, #20]
                break;
    550e:	e019      	b.n	5544 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5510:	9b03      	ldr	r3, [sp, #12]
    5512:	4a0f      	ldr	r2, [pc, #60]	; (5550 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5514:	4293      	cmp	r3, r2
    5516:	d115      	bne.n	5544 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5518:	9b02      	ldr	r3, [sp, #8]
    551a:	2b00      	cmp	r3, #0
    551c:	d003      	beq.n	5526 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    551e:	9b02      	ldr	r3, [sp, #8]
    5520:	2b01      	cmp	r3, #1
    5522:	d007      	beq.n	5534 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5524:	e00e      	b.n	5544 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5526:	230b      	movs	r3, #11
    5528:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    552a:	9a05      	ldr	r2, [sp, #20]
    552c:	9b01      	ldr	r3, [sp, #4]
    552e:	4013      	ands	r3, r2
    5530:	9305      	str	r3, [sp, #20]
                break;
    5532:	e007      	b.n	5544 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5534:	2307      	movs	r3, #7
    5536:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5538:	9a05      	ldr	r2, [sp, #20]
    553a:	9b01      	ldr	r3, [sp, #4]
    553c:	4013      	ands	r3, r2
    553e:	9305      	str	r3, [sp, #20]
                break;
    5540:	e000      	b.n	5544 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5542:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5544:	9b05      	ldr	r3, [sp, #20]
}
    5546:	4618      	mov	r0, r3
    5548:	b006      	add	sp, #24
    554a:	4770      	bx	lr
    554c:	4004a000 	.word	0x4004a000
    5550:	4004b000 	.word	0x4004b000

00005554 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5554:	b500      	push	{lr}
    5556:	b089      	sub	sp, #36	; 0x24
    5558:	9003      	str	r0, [sp, #12]
    555a:	9102      	str	r1, [sp, #8]
    555c:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    555e:	9b01      	ldr	r3, [sp, #4]
    5560:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5562:	9b01      	ldr	r3, [sp, #4]
    5564:	2b08      	cmp	r3, #8
    5566:	d121      	bne.n	55ac <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    5568:	4b13      	ldr	r3, [pc, #76]	; (55b8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    556a:	685b      	ldr	r3, [r3, #4]
    556c:	f003 030f 	and.w	r3, r3, #15
    5570:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    5572:	9a06      	ldr	r2, [sp, #24]
    5574:	9902      	ldr	r1, [sp, #8]
    5576:	9803      	ldr	r0, [sp, #12]
    5578:	f7ff ff6e 	bl	5458 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    557c:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    557e:	9b05      	ldr	r3, [sp, #20]
    5580:	2bff      	cmp	r3, #255	; 0xff
    5582:	d011      	beq.n	55a8 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    5584:	f005 f952 	bl	a82c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    5588:	4b0b      	ldr	r3, [pc, #44]	; (55b8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    558a:	685b      	ldr	r3, [r3, #4]
    558c:	4a0a      	ldr	r2, [pc, #40]	; (55b8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    558e:	f023 030f 	bic.w	r3, r3, #15
    5592:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    5594:	4b08      	ldr	r3, [pc, #32]	; (55b8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5596:	685a      	ldr	r2, [r3, #4]
    5598:	9b05      	ldr	r3, [sp, #20]
    559a:	f003 030f 	and.w	r3, r3, #15
    559e:	4906      	ldr	r1, [pc, #24]	; (55b8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    55a0:	4313      	orrs	r3, r2
    55a2:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    55a4:	f005 f96e 	bl	a884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    55a8:	2300      	movs	r3, #0
    55aa:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    55ac:	9b07      	ldr	r3, [sp, #28]
}
    55ae:	4618      	mov	r0, r3
    55b0:	b009      	add	sp, #36	; 0x24
    55b2:	f85d fb04 	ldr.w	pc, [sp], #4
    55b6:	bf00      	nop
    55b8:	40048000 	.word	0x40048000

000055bc <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    55bc:	b500      	push	{lr}
    55be:	b087      	sub	sp, #28
    55c0:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    55c2:	2300      	movs	r3, #0
    55c4:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    55c6:	2300      	movs	r3, #0
    55c8:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    55ca:	2300      	movs	r3, #0
    55cc:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    55ce:	9b01      	ldr	r3, [sp, #4]
    55d0:	68db      	ldr	r3, [r3, #12]
    55d2:	2b02      	cmp	r3, #2
    55d4:	d00a      	beq.n	55ec <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    55d6:	9b05      	ldr	r3, [sp, #20]
    55d8:	f043 0302 	orr.w	r3, r3, #2
    55dc:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    55de:	9b01      	ldr	r3, [sp, #4]
    55e0:	68db      	ldr	r3, [r3, #12]
    55e2:	f003 0301 	and.w	r3, r3, #1
    55e6:	9a05      	ldr	r2, [sp, #20]
    55e8:	4313      	orrs	r3, r2
    55ea:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    55ec:	9b01      	ldr	r3, [sp, #4]
    55ee:	699b      	ldr	r3, [r3, #24]
    55f0:	019b      	lsls	r3, r3, #6
    55f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    55f6:	9a05      	ldr	r2, [sp, #20]
    55f8:	4313      	orrs	r3, r2
    55fa:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    55fc:	9b01      	ldr	r3, [sp, #4]
    55fe:	6a1b      	ldr	r3, [r3, #32]
    5600:	03db      	lsls	r3, r3, #15
    5602:	b29b      	uxth	r3, r3
    5604:	9a05      	ldr	r2, [sp, #20]
    5606:	4313      	orrs	r3, r2
    5608:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    560a:	9b01      	ldr	r3, [sp, #4]
    560c:	7f1b      	ldrb	r3, [r3, #28]
    560e:	2b00      	cmp	r3, #0
    5610:	d001      	beq.n	5616 <Port_Ci_Port_Ip_PinInit+0x5a>
    5612:	2310      	movs	r3, #16
    5614:	e000      	b.n	5618 <Port_Ci_Port_Ip_PinInit+0x5c>
    5616:	2300      	movs	r3, #0
    5618:	9a05      	ldr	r2, [sp, #20]
    561a:	4313      	orrs	r3, r2
    561c:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    561e:	9b01      	ldr	r3, [sp, #4]
    5620:	691b      	ldr	r3, [r3, #16]
    5622:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5624:	9b01      	ldr	r3, [sp, #4]
    5626:	6818      	ldr	r0, [r3, #0]
    5628:	9b01      	ldr	r3, [sp, #4]
    562a:	689b      	ldr	r3, [r3, #8]
    562c:	9a04      	ldr	r2, [sp, #16]
    562e:	4619      	mov	r1, r3
    5630:	f7ff ff90 	bl	5554 <Port_Ci_Port_Ip_ConfigureInterleave>
    5634:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    5636:	9b03      	ldr	r3, [sp, #12]
    5638:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    563a:	9b04      	ldr	r3, [sp, #16]
    563c:	021b      	lsls	r3, r3, #8
    563e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5642:	9a05      	ldr	r2, [sp, #20]
    5644:	4313      	orrs	r3, r2
    5646:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    5648:	f004 ff56 	bl	a4f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    564c:	9b01      	ldr	r3, [sp, #4]
    564e:	681b      	ldr	r3, [r3, #0]
    5650:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    5654:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    5656:	9b01      	ldr	r3, [sp, #4]
    5658:	689b      	ldr	r3, [r3, #8]
    565a:	2201      	movs	r2, #1
    565c:	fa02 f303 	lsl.w	r3, r2, r3
    5660:	43db      	mvns	r3, r3
    5662:	9a02      	ldr	r2, [sp, #8]
    5664:	4013      	ands	r3, r2
    5666:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    5668:	9b01      	ldr	r3, [sp, #4]
    566a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    566e:	2b00      	cmp	r3, #0
    5670:	d001      	beq.n	5676 <Port_Ci_Port_Ip_PinInit+0xba>
    5672:	2201      	movs	r2, #1
    5674:	e000      	b.n	5678 <Port_Ci_Port_Ip_PinInit+0xbc>
    5676:	2200      	movs	r2, #0
    5678:	9b01      	ldr	r3, [sp, #4]
    567a:	689b      	ldr	r3, [r3, #8]
    567c:	fa02 f303 	lsl.w	r3, r2, r3
    5680:	9a02      	ldr	r2, [sp, #8]
    5682:	4313      	orrs	r3, r2
    5684:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    5686:	9b01      	ldr	r3, [sp, #4]
    5688:	681b      	ldr	r3, [r3, #0]
    568a:	9a02      	ldr	r2, [sp, #8]
    568c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    5690:	f004 ff5e 	bl	a550 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    5694:	9b04      	ldr	r3, [sp, #16]
    5696:	2b01      	cmp	r3, #1
    5698:	d16d      	bne.n	5776 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    569a:	9b01      	ldr	r3, [sp, #4]
    569c:	695b      	ldr	r3, [r3, #20]
    569e:	2b02      	cmp	r3, #2
    56a0:	d138      	bne.n	5714 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    56a2:	9b01      	ldr	r3, [sp, #4]
    56a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    56a8:	2b01      	cmp	r3, #1
    56aa:	d10f      	bne.n	56cc <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    56ac:	f004 ff76 	bl	a59c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    56b0:	9b01      	ldr	r3, [sp, #4]
    56b2:	685b      	ldr	r3, [r3, #4]
    56b4:	6859      	ldr	r1, [r3, #4]
    56b6:	9b01      	ldr	r3, [sp, #4]
    56b8:	689b      	ldr	r3, [r3, #8]
    56ba:	2201      	movs	r2, #1
    56bc:	409a      	lsls	r2, r3
    56be:	9b01      	ldr	r3, [sp, #4]
    56c0:	685b      	ldr	r3, [r3, #4]
    56c2:	430a      	orrs	r2, r1
    56c4:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    56c6:	f004 ff95 	bl	a5f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    56ca:	e013      	b.n	56f4 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    56cc:	9b01      	ldr	r3, [sp, #4]
    56ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    56d2:	2b00      	cmp	r3, #0
    56d4:	d10e      	bne.n	56f4 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    56d6:	f004 ffb3 	bl	a640 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    56da:	9b01      	ldr	r3, [sp, #4]
    56dc:	685b      	ldr	r3, [r3, #4]
    56de:	6899      	ldr	r1, [r3, #8]
    56e0:	9b01      	ldr	r3, [sp, #4]
    56e2:	689b      	ldr	r3, [r3, #8]
    56e4:	2201      	movs	r2, #1
    56e6:	409a      	lsls	r2, r3
    56e8:	9b01      	ldr	r3, [sp, #4]
    56ea:	685b      	ldr	r3, [r3, #4]
    56ec:	430a      	orrs	r2, r1
    56ee:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    56f0:	f004 ffd2 	bl	a698 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    56f4:	f004 fff6 	bl	a6e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    56f8:	9b01      	ldr	r3, [sp, #4]
    56fa:	685b      	ldr	r3, [r3, #4]
    56fc:	6959      	ldr	r1, [r3, #20]
    56fe:	9b01      	ldr	r3, [sp, #4]
    5700:	689b      	ldr	r3, [r3, #8]
    5702:	2201      	movs	r2, #1
    5704:	409a      	lsls	r2, r3
    5706:	9b01      	ldr	r3, [sp, #4]
    5708:	685b      	ldr	r3, [r3, #4]
    570a:	430a      	orrs	r2, r1
    570c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    570e:	f005 f815 	bl	a73c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    5712:	e030      	b.n	5776 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5714:	f004 ffe6 	bl	a6e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    5718:	9b01      	ldr	r3, [sp, #4]
    571a:	685b      	ldr	r3, [r3, #4]
    571c:	6959      	ldr	r1, [r3, #20]
    571e:	9b01      	ldr	r3, [sp, #4]
    5720:	689b      	ldr	r3, [r3, #8]
    5722:	2201      	movs	r2, #1
    5724:	fa02 f303 	lsl.w	r3, r2, r3
    5728:	43da      	mvns	r2, r3
    572a:	9b01      	ldr	r3, [sp, #4]
    572c:	685b      	ldr	r3, [r3, #4]
    572e:	400a      	ands	r2, r1
    5730:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5732:	f005 f803 	bl	a73c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    5736:	f005 f827 	bl	a788 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    573a:	9b01      	ldr	r3, [sp, #4]
    573c:	685b      	ldr	r3, [r3, #4]
    573e:	6999      	ldr	r1, [r3, #24]
    5740:	9b01      	ldr	r3, [sp, #4]
    5742:	689b      	ldr	r3, [r3, #8]
    5744:	2201      	movs	r2, #1
    5746:	fa02 f303 	lsl.w	r3, r2, r3
    574a:	43da      	mvns	r2, r3
    574c:	9b01      	ldr	r3, [sp, #4]
    574e:	685b      	ldr	r3, [r3, #4]
    5750:	400a      	ands	r2, r1
    5752:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    5754:	9b01      	ldr	r3, [sp, #4]
    5756:	695b      	ldr	r3, [r3, #20]
    5758:	2b03      	cmp	r3, #3
    575a:	d10a      	bne.n	5772 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    575c:	9b01      	ldr	r3, [sp, #4]
    575e:	685b      	ldr	r3, [r3, #4]
    5760:	6999      	ldr	r1, [r3, #24]
    5762:	9b01      	ldr	r3, [sp, #4]
    5764:	689b      	ldr	r3, [r3, #8]
    5766:	2201      	movs	r2, #1
    5768:	409a      	lsls	r2, r3
    576a:	9b01      	ldr	r3, [sp, #4]
    576c:	685b      	ldr	r3, [r3, #4]
    576e:	430a      	orrs	r2, r1
    5770:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    5772:	f005 f835 	bl	a7e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    5776:	9b01      	ldr	r3, [sp, #4]
    5778:	681b      	ldr	r3, [r3, #0]
    577a:	9a01      	ldr	r2, [sp, #4]
    577c:	6892      	ldr	r2, [r2, #8]
    577e:	9905      	ldr	r1, [sp, #20]
    5780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5784:	bf00      	nop
    5786:	b007      	add	sp, #28
    5788:	f85d fb04 	ldr.w	pc, [sp], #4

0000578c <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    578c:	b500      	push	{lr}
    578e:	b085      	sub	sp, #20
    5790:	9001      	str	r0, [sp, #4]
    5792:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    5794:	2300      	movs	r3, #0
    5796:	9303      	str	r3, [sp, #12]
    5798:	e00d      	b.n	57b6 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    579a:	9a03      	ldr	r2, [sp, #12]
    579c:	4613      	mov	r3, r2
    579e:	009b      	lsls	r3, r3, #2
    57a0:	4413      	add	r3, r2
    57a2:	00db      	lsls	r3, r3, #3
    57a4:	461a      	mov	r2, r3
    57a6:	9b00      	ldr	r3, [sp, #0]
    57a8:	4413      	add	r3, r2
    57aa:	4618      	mov	r0, r3
    57ac:	f7ff ff06 	bl	55bc <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    57b0:	9b03      	ldr	r3, [sp, #12]
    57b2:	3301      	adds	r3, #1
    57b4:	9303      	str	r3, [sp, #12]
    57b6:	9a03      	ldr	r2, [sp, #12]
    57b8:	9b01      	ldr	r3, [sp, #4]
    57ba:	429a      	cmp	r2, r3
    57bc:	d3ed      	bcc.n	579a <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    57be:	2300      	movs	r3, #0
}
    57c0:	4618      	mov	r0, r3
    57c2:	b005      	add	sp, #20
    57c4:	f85d fb04 	ldr.w	pc, [sp], #4

000057c8 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    57c8:	b500      	push	{lr}
    57ca:	b087      	sub	sp, #28
    57cc:	9003      	str	r0, [sp, #12]
    57ce:	9102      	str	r1, [sp, #8]
    57d0:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    57d2:	9a01      	ldr	r2, [sp, #4]
    57d4:	9902      	ldr	r1, [sp, #8]
    57d6:	9803      	ldr	r0, [sp, #12]
    57d8:	f7ff febc 	bl	5554 <Port_Ci_Port_Ip_ConfigureInterleave>
    57dc:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    57de:	f005 f877 	bl	a8d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    57e2:	9b03      	ldr	r3, [sp, #12]
    57e4:	9a02      	ldr	r2, [sp, #8]
    57e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    57ea:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    57ec:	9b04      	ldr	r3, [sp, #16]
    57ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    57f2:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    57f4:	9b05      	ldr	r3, [sp, #20]
    57f6:	021b      	lsls	r3, r3, #8
    57f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    57fc:	9a04      	ldr	r2, [sp, #16]
    57fe:	4313      	orrs	r3, r2
    5800:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    5802:	9b03      	ldr	r3, [sp, #12]
    5804:	9a02      	ldr	r2, [sp, #8]
    5806:	9904      	ldr	r1, [sp, #16]
    5808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    580c:	f005 f88c 	bl	a928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    5810:	bf00      	nop
    5812:	b007      	add	sp, #28
    5814:	f85d fb04 	ldr.w	pc, [sp], #4

00005818 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5818:	b500      	push	{lr}
    581a:	b083      	sub	sp, #12
    581c:	9001      	str	r0, [sp, #4]
    581e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    5820:	f005 f8a8 	bl	a974 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    5824:	9b01      	ldr	r3, [sp, #4]
    5826:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    582a:	2101      	movs	r1, #1
    582c:	9b00      	ldr	r3, [sp, #0]
    582e:	fa01 f303 	lsl.w	r3, r1, r3
    5832:	431a      	orrs	r2, r3
    5834:	9b01      	ldr	r3, [sp, #4]
    5836:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    583a:	f005 f8c7 	bl	a9cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    583e:	bf00      	nop
    5840:	b003      	add	sp, #12
    5842:	f85d fb04 	ldr.w	pc, [sp], #4

00005846 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5846:	b500      	push	{lr}
    5848:	b083      	sub	sp, #12
    584a:	9001      	str	r0, [sp, #4]
    584c:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    584e:	f005 f8e3 	bl	aa18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    5852:	9b01      	ldr	r3, [sp, #4]
    5854:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    5858:	2101      	movs	r1, #1
    585a:	9b00      	ldr	r3, [sp, #0]
    585c:	fa01 f303 	lsl.w	r3, r1, r3
    5860:	43db      	mvns	r3, r3
    5862:	401a      	ands	r2, r3
    5864:	9b01      	ldr	r3, [sp, #4]
    5866:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    586a:	f005 f901 	bl	aa70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    586e:	bf00      	nop
    5870:	b003      	add	sp, #12
    5872:	f85d fb04 	ldr.w	pc, [sp], #4

00005876 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    5876:	b082      	sub	sp, #8
    5878:	9001      	str	r0, [sp, #4]
    587a:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    587c:	9b00      	ldr	r3, [sp, #0]
    587e:	785b      	ldrb	r3, [r3, #1]
    5880:	f003 0201 	and.w	r2, r3, #1
    5884:	9b01      	ldr	r3, [sp, #4]
    5886:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    588a:	9b00      	ldr	r3, [sp, #0]
    588c:	789b      	ldrb	r3, [r3, #2]
    588e:	f003 021f 	and.w	r2, r3, #31
    5892:	9b01      	ldr	r3, [sp, #4]
    5894:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    5898:	bf00      	nop
    589a:	b002      	add	sp, #8
    589c:	4770      	bx	lr

0000589e <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    589e:	b086      	sub	sp, #24
    58a0:	9003      	str	r0, [sp, #12]
    58a2:	9301      	str	r3, [sp, #4]
    58a4:	460b      	mov	r3, r1
    58a6:	f8ad 300a 	strh.w	r3, [sp, #10]
    58aa:	4613      	mov	r3, r2
    58ac:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    58b0:	2300      	movs	r3, #0
    58b2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    58b6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58ba:	f043 0301 	orr.w	r3, r3, #1
    58be:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    58c2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58c6:	f043 0302 	orr.w	r3, r3, #2
    58ca:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    58ce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58d2:	f043 0310 	orr.w	r3, r3, #16
    58d6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    58da:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    58e2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    58e6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    58ee:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    58f2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    58fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    58fe:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    5902:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5906:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    590a:	4013      	ands	r3, r2
    590c:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    5910:	9b01      	ldr	r3, [sp, #4]
    5912:	2b00      	cmp	r3, #0
    5914:	d003      	beq.n	591e <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    5916:	9b01      	ldr	r3, [sp, #4]
    5918:	2b01      	cmp	r3, #1
    591a:	d00a      	beq.n	5932 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    591c:	e013      	b.n	5946 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    591e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5922:	041a      	lsls	r2, r3, #16
    5924:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5928:	431a      	orrs	r2, r3
    592a:	9b03      	ldr	r3, [sp, #12]
    592c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    5930:	e009      	b.n	5946 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    5932:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5936:	041a      	lsls	r2, r3, #16
    5938:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    593c:	431a      	orrs	r2, r3
    593e:	9b03      	ldr	r3, [sp, #12]
    5940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    5944:	bf00      	nop
    }
}
    5946:	bf00      	nop
    5948:	b006      	add	sp, #24
    594a:	4770      	bx	lr

0000594c <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    594c:	b500      	push	{lr}
    594e:	b087      	sub	sp, #28
    5950:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    5952:	9b01      	ldr	r3, [sp, #4]
    5954:	885b      	ldrh	r3, [r3, #2]
    5956:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    595a:	9b01      	ldr	r3, [sp, #4]
    595c:	689b      	ldr	r3, [r3, #8]
    595e:	7a1b      	ldrb	r3, [r3, #8]
    5960:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    5964:	9b01      	ldr	r3, [sp, #4]
    5966:	689b      	ldr	r3, [r3, #8]
    5968:	681b      	ldr	r3, [r3, #0]
    596a:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    596c:	9b01      	ldr	r3, [sp, #4]
    596e:	689b      	ldr	r3, [r3, #8]
    5970:	685b      	ldr	r3, [r3, #4]
    5972:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5974:	2300      	movs	r3, #0
    5976:	f8ad 3016 	strh.w	r3, [sp, #22]
    597a:	e111      	b.n	5ba0 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    597c:	9b02      	ldr	r3, [sp, #8]
    597e:	2b02      	cmp	r3, #2
    5980:	d169      	bne.n	5a56 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    5982:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5986:	2b01      	cmp	r3, #1
    5988:	d11a      	bne.n	59c0 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    598a:	9b01      	ldr	r3, [sp, #4]
    598c:	685a      	ldr	r2, [r3, #4]
    598e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5992:	005b      	lsls	r3, r3, #1
    5994:	4413      	add	r3, r2
    5996:	881b      	ldrh	r3, [r3, #0]
    5998:	f003 021f 	and.w	r2, r3, #31
    599c:	9b01      	ldr	r3, [sp, #4]
    599e:	6859      	ldr	r1, [r3, #4]
    59a0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59a4:	005b      	lsls	r3, r3, #1
    59a6:	440b      	add	r3, r1
    59a8:	881b      	ldrh	r3, [r3, #0]
    59aa:	095b      	lsrs	r3, r3, #5
    59ac:	b29b      	uxth	r3, r3
    59ae:	4619      	mov	r1, r3
    59b0:	4b81      	ldr	r3, [pc, #516]	; (5bb8 <Port_Ipw_Init_UnusedPins+0x26c>)
    59b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    59b6:	2101      	movs	r1, #1
    59b8:	fa01 f202 	lsl.w	r2, r1, r2
    59bc:	605a      	str	r2, [r3, #4]
    59be:	e01d      	b.n	59fc <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    59c0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    59c4:	2b00      	cmp	r3, #0
    59c6:	d119      	bne.n	59fc <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    59c8:	9b01      	ldr	r3, [sp, #4]
    59ca:	685a      	ldr	r2, [r3, #4]
    59cc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59d0:	005b      	lsls	r3, r3, #1
    59d2:	4413      	add	r3, r2
    59d4:	881b      	ldrh	r3, [r3, #0]
    59d6:	f003 021f 	and.w	r2, r3, #31
    59da:	9b01      	ldr	r3, [sp, #4]
    59dc:	6859      	ldr	r1, [r3, #4]
    59de:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59e2:	005b      	lsls	r3, r3, #1
    59e4:	440b      	add	r3, r1
    59e6:	881b      	ldrh	r3, [r3, #0]
    59e8:	095b      	lsrs	r3, r3, #5
    59ea:	b29b      	uxth	r3, r3
    59ec:	4619      	mov	r1, r3
    59ee:	4b72      	ldr	r3, [pc, #456]	; (5bb8 <Port_Ipw_Init_UnusedPins+0x26c>)
    59f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    59f4:	2101      	movs	r1, #1
    59f6:	fa01 f202 	lsl.w	r2, r1, r2
    59fa:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    59fc:	f005 f85e 	bl	aabc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5a00:	9b01      	ldr	r3, [sp, #4]
    5a02:	685a      	ldr	r2, [r3, #4]
    5a04:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a08:	005b      	lsls	r3, r3, #1
    5a0a:	4413      	add	r3, r2
    5a0c:	881b      	ldrh	r3, [r3, #0]
    5a0e:	095b      	lsrs	r3, r3, #5
    5a10:	b29b      	uxth	r3, r3
    5a12:	461a      	mov	r2, r3
    5a14:	4b68      	ldr	r3, [pc, #416]	; (5bb8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5a1a:	6959      	ldr	r1, [r3, #20]
    5a1c:	9b01      	ldr	r3, [sp, #4]
    5a1e:	685a      	ldr	r2, [r3, #4]
    5a20:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a24:	005b      	lsls	r3, r3, #1
    5a26:	4413      	add	r3, r2
    5a28:	881b      	ldrh	r3, [r3, #0]
    5a2a:	f003 031f 	and.w	r3, r3, #31
    5a2e:	2201      	movs	r2, #1
    5a30:	409a      	lsls	r2, r3
    5a32:	9b01      	ldr	r3, [sp, #4]
    5a34:	6858      	ldr	r0, [r3, #4]
    5a36:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a3a:	005b      	lsls	r3, r3, #1
    5a3c:	4403      	add	r3, r0
    5a3e:	881b      	ldrh	r3, [r3, #0]
    5a40:	095b      	lsrs	r3, r3, #5
    5a42:	b29b      	uxth	r3, r3
    5a44:	4618      	mov	r0, r3
    5a46:	4b5c      	ldr	r3, [pc, #368]	; (5bb8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5a48:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5a4c:	430a      	orrs	r2, r1
    5a4e:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5a50:	f005 f860 	bl	ab14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    5a54:	e086      	b.n	5b64 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5a56:	f005 f831 	bl	aabc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    5a5a:	9b01      	ldr	r3, [sp, #4]
    5a5c:	685a      	ldr	r2, [r3, #4]
    5a5e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a62:	005b      	lsls	r3, r3, #1
    5a64:	4413      	add	r3, r2
    5a66:	881b      	ldrh	r3, [r3, #0]
    5a68:	095b      	lsrs	r3, r3, #5
    5a6a:	b29b      	uxth	r3, r3
    5a6c:	461a      	mov	r2, r3
    5a6e:	4b52      	ldr	r3, [pc, #328]	; (5bb8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5a74:	6959      	ldr	r1, [r3, #20]
    5a76:	9b01      	ldr	r3, [sp, #4]
    5a78:	685a      	ldr	r2, [r3, #4]
    5a7a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a7e:	005b      	lsls	r3, r3, #1
    5a80:	4413      	add	r3, r2
    5a82:	881b      	ldrh	r3, [r3, #0]
    5a84:	f003 031f 	and.w	r3, r3, #31
    5a88:	2201      	movs	r2, #1
    5a8a:	fa02 f303 	lsl.w	r3, r2, r3
    5a8e:	43da      	mvns	r2, r3
    5a90:	9b01      	ldr	r3, [sp, #4]
    5a92:	6858      	ldr	r0, [r3, #4]
    5a94:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a98:	005b      	lsls	r3, r3, #1
    5a9a:	4403      	add	r3, r0
    5a9c:	881b      	ldrh	r3, [r3, #0]
    5a9e:	095b      	lsrs	r3, r3, #5
    5aa0:	b29b      	uxth	r3, r3
    5aa2:	4618      	mov	r0, r3
    5aa4:	4b44      	ldr	r3, [pc, #272]	; (5bb8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5aa6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5aaa:	400a      	ands	r2, r1
    5aac:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5aae:	f005 f831 	bl	ab14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    5ab2:	f005 f855 	bl	ab60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5ab6:	9b01      	ldr	r3, [sp, #4]
    5ab8:	685a      	ldr	r2, [r3, #4]
    5aba:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5abe:	005b      	lsls	r3, r3, #1
    5ac0:	4413      	add	r3, r2
    5ac2:	881b      	ldrh	r3, [r3, #0]
    5ac4:	095b      	lsrs	r3, r3, #5
    5ac6:	b29b      	uxth	r3, r3
    5ac8:	461a      	mov	r2, r3
    5aca:	4b3b      	ldr	r3, [pc, #236]	; (5bb8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5ad0:	6999      	ldr	r1, [r3, #24]
    5ad2:	9b01      	ldr	r3, [sp, #4]
    5ad4:	685a      	ldr	r2, [r3, #4]
    5ad6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ada:	005b      	lsls	r3, r3, #1
    5adc:	4413      	add	r3, r2
    5ade:	881b      	ldrh	r3, [r3, #0]
    5ae0:	f003 031f 	and.w	r3, r3, #31
    5ae4:	2201      	movs	r2, #1
    5ae6:	fa02 f303 	lsl.w	r3, r2, r3
    5aea:	43da      	mvns	r2, r3
    5aec:	9b01      	ldr	r3, [sp, #4]
    5aee:	6858      	ldr	r0, [r3, #4]
    5af0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5af4:	005b      	lsls	r3, r3, #1
    5af6:	4403      	add	r3, r0
    5af8:	881b      	ldrh	r3, [r3, #0]
    5afa:	095b      	lsrs	r3, r3, #5
    5afc:	b29b      	uxth	r3, r3
    5afe:	4618      	mov	r0, r3
    5b00:	4b2d      	ldr	r3, [pc, #180]	; (5bb8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5b02:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5b06:	400a      	ands	r2, r1
    5b08:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    5b0a:	9b02      	ldr	r3, [sp, #8]
    5b0c:	2b03      	cmp	r3, #3
    5b0e:	d127      	bne.n	5b60 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5b10:	9b01      	ldr	r3, [sp, #4]
    5b12:	685a      	ldr	r2, [r3, #4]
    5b14:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b18:	005b      	lsls	r3, r3, #1
    5b1a:	4413      	add	r3, r2
    5b1c:	881b      	ldrh	r3, [r3, #0]
    5b1e:	095b      	lsrs	r3, r3, #5
    5b20:	b29b      	uxth	r3, r3
    5b22:	461a      	mov	r2, r3
    5b24:	4b24      	ldr	r3, [pc, #144]	; (5bb8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b2a:	6999      	ldr	r1, [r3, #24]
    5b2c:	9b01      	ldr	r3, [sp, #4]
    5b2e:	685a      	ldr	r2, [r3, #4]
    5b30:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b34:	005b      	lsls	r3, r3, #1
    5b36:	4413      	add	r3, r2
    5b38:	881b      	ldrh	r3, [r3, #0]
    5b3a:	f003 031f 	and.w	r3, r3, #31
    5b3e:	2201      	movs	r2, #1
    5b40:	409a      	lsls	r2, r3
    5b42:	9b01      	ldr	r3, [sp, #4]
    5b44:	6858      	ldr	r0, [r3, #4]
    5b46:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b4a:	005b      	lsls	r3, r3, #1
    5b4c:	4403      	add	r3, r0
    5b4e:	881b      	ldrh	r3, [r3, #0]
    5b50:	095b      	lsrs	r3, r3, #5
    5b52:	b29b      	uxth	r3, r3
    5b54:	4618      	mov	r0, r3
    5b56:	4b18      	ldr	r3, [pc, #96]	; (5bb8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5b58:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5b5c:	430a      	orrs	r2, r1
    5b5e:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    5b60:	f005 f82a 	bl	abb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    5b64:	9b01      	ldr	r3, [sp, #4]
    5b66:	685a      	ldr	r2, [r3, #4]
    5b68:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b6c:	005b      	lsls	r3, r3, #1
    5b6e:	4413      	add	r3, r2
    5b70:	881b      	ldrh	r3, [r3, #0]
    5b72:	095b      	lsrs	r3, r3, #5
    5b74:	b29b      	uxth	r3, r3
    5b76:	461a      	mov	r2, r3
    5b78:	4b10      	ldr	r3, [pc, #64]	; (5bbc <Port_Ipw_Init_UnusedPins+0x270>)
    5b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b7e:	9a01      	ldr	r2, [sp, #4]
    5b80:	6851      	ldr	r1, [r2, #4]
    5b82:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5b86:	0052      	lsls	r2, r2, #1
    5b88:	440a      	add	r2, r1
    5b8a:	8812      	ldrh	r2, [r2, #0]
    5b8c:	f002 021f 	and.w	r2, r2, #31
    5b90:	9903      	ldr	r1, [sp, #12]
    5b92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5b96:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b9a:	3301      	adds	r3, #1
    5b9c:	f8ad 3016 	strh.w	r3, [sp, #22]
    5ba0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5ba4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5ba8:	429a      	cmp	r2, r3
    5baa:	f4ff aee7 	bcc.w	597c <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    5bae:	bf00      	nop
    5bb0:	bf00      	nop
    5bb2:	b007      	add	sp, #28
    5bb4:	f85d fb04 	ldr.w	pc, [sp], #4
    5bb8:	0000bfe8 	.word	0x0000bfe8
    5bbc:	0000bfd4 	.word	0x0000bfd4

00005bc0 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    5bc0:	b500      	push	{lr}
    5bc2:	b085      	sub	sp, #20
    5bc4:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    5bc6:	9b01      	ldr	r3, [sp, #4]
    5bc8:	7c1b      	ldrb	r3, [r3, #16]
    5bca:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5bce:	2300      	movs	r3, #0
    5bd0:	f8ad 300e 	strh.w	r3, [sp, #14]
    5bd4:	e035      	b.n	5c42 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    5bd6:	9b01      	ldr	r3, [sp, #4]
    5bd8:	695a      	ldr	r2, [r3, #20]
    5bda:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5bde:	00db      	lsls	r3, r3, #3
    5be0:	4413      	add	r3, r2
    5be2:	781b      	ldrb	r3, [r3, #0]
    5be4:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    5be8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5bec:	4a1f      	ldr	r2, [pc, #124]	; (5c6c <Port_Ipw_Init+0xac>)
    5bee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5bf2:	9b01      	ldr	r3, [sp, #4]
    5bf4:	695a      	ldr	r2, [r3, #20]
    5bf6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5bfa:	00db      	lsls	r3, r3, #3
    5bfc:	4413      	add	r3, r2
    5bfe:	4619      	mov	r1, r3
    5c00:	f7ff fe39 	bl	5876 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    5c04:	f005 f946 	bl	ae94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    5c08:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5c0c:	4a17      	ldr	r2, [pc, #92]	; (5c6c <Port_Ipw_Init+0xac>)
    5c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c12:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    5c16:	9b01      	ldr	r3, [sp, #4]
    5c18:	695a      	ldr	r2, [r3, #20]
    5c1a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5c1e:	00db      	lsls	r3, r3, #3
    5c20:	4413      	add	r3, r2
    5c22:	685a      	ldr	r2, [r3, #4]
    5c24:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5c28:	4810      	ldr	r0, [pc, #64]	; (5c6c <Port_Ipw_Init+0xac>)
    5c2a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5c2e:	430a      	orrs	r2, r1
    5c30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    5c34:	f005 f95a 	bl	aeec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5c38:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5c3c:	3301      	adds	r3, #1
    5c3e:	f8ad 300e 	strh.w	r3, [sp, #14]
    5c42:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5c46:	b29b      	uxth	r3, r3
    5c48:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5c4c:	429a      	cmp	r2, r3
    5c4e:	d3c2      	bcc.n	5bd6 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    5c50:	9b01      	ldr	r3, [sp, #4]
    5c52:	6a1b      	ldr	r3, [r3, #32]
    5c54:	4619      	mov	r1, r3
    5c56:	2004      	movs	r0, #4
    5c58:	f7ff fd98 	bl	578c <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    5c5c:	9801      	ldr	r0, [sp, #4]
    5c5e:	f7ff fe75 	bl	594c <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    5c62:	bf00      	nop
    5c64:	b005      	add	sp, #20
    5c66:	f85d fb04 	ldr.w	pc, [sp], #4
    5c6a:	bf00      	nop
    5c6c:	0000bfd4 	.word	0x0000bfd4

00005c70 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    5c70:	b500      	push	{lr}
    5c72:	b085      	sub	sp, #20
    5c74:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    5c76:	9b01      	ldr	r3, [sp, #4]
    5c78:	881b      	ldrh	r3, [r3, #0]
    5c7a:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5c7e:	2300      	movs	r3, #0
    5c80:	f8ad 300e 	strh.w	r3, [sp, #14]
    5c84:	e0d2      	b.n	5e2c <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    5c86:	9b01      	ldr	r3, [sp, #4]
    5c88:	68d9      	ldr	r1, [r3, #12]
    5c8a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5c8e:	4613      	mov	r3, r2
    5c90:	009b      	lsls	r3, r3, #2
    5c92:	4413      	add	r3, r2
    5c94:	009b      	lsls	r3, r3, #2
    5c96:	440b      	add	r3, r1
    5c98:	7c5b      	ldrb	r3, [r3, #17]
    5c9a:	f083 0301 	eor.w	r3, r3, #1
    5c9e:	b2db      	uxtb	r3, r3
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	f000 80be 	beq.w	5e22 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    5ca6:	9b01      	ldr	r3, [sp, #4]
    5ca8:	68d9      	ldr	r1, [r3, #12]
    5caa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5cae:	4613      	mov	r3, r2
    5cb0:	009b      	lsls	r3, r3, #2
    5cb2:	4413      	add	r3, r2
    5cb4:	009b      	lsls	r3, r3, #2
    5cb6:	440b      	add	r3, r1
    5cb8:	7c1b      	ldrb	r3, [r3, #16]
    5cba:	2b00      	cmp	r3, #0
    5cbc:	f000 80b1 	beq.w	5e22 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    5cc0:	9b01      	ldr	r3, [sp, #4]
    5cc2:	68d9      	ldr	r1, [r3, #12]
    5cc4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5cc8:	4613      	mov	r3, r2
    5cca:	009b      	lsls	r3, r3, #2
    5ccc:	4413      	add	r3, r2
    5cce:	009b      	lsls	r3, r3, #2
    5cd0:	440b      	add	r3, r1
    5cd2:	881b      	ldrh	r3, [r3, #0]
    5cd4:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5cd8:	9b01      	ldr	r3, [sp, #4]
    5cda:	68d9      	ldr	r1, [r3, #12]
    5cdc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5ce0:	4613      	mov	r3, r2
    5ce2:	009b      	lsls	r3, r3, #2
    5ce4:	4413      	add	r3, r2
    5ce6:	009b      	lsls	r3, r3, #2
    5ce8:	440b      	add	r3, r1
    5cea:	68db      	ldr	r3, [r3, #12]
    5cec:	2b02      	cmp	r3, #2
    5cee:	d11d      	bne.n	5d2c <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5cf0:	f005 fa18 	bl	b124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5cf4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5cf8:	095b      	lsrs	r3, r3, #5
    5cfa:	b29b      	uxth	r3, r3
    5cfc:	461a      	mov	r2, r3
    5cfe:	4b51      	ldr	r3, [pc, #324]	; (5e44 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5d04:	6959      	ldr	r1, [r3, #20]
    5d06:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d0a:	f003 031f 	and.w	r3, r3, #31
    5d0e:	2201      	movs	r2, #1
    5d10:	409a      	lsls	r2, r3
    5d12:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d16:	095b      	lsrs	r3, r3, #5
    5d18:	b29b      	uxth	r3, r3
    5d1a:	4618      	mov	r0, r3
    5d1c:	4b49      	ldr	r3, [pc, #292]	; (5e44 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d1e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5d22:	430a      	orrs	r2, r1
    5d24:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5d26:	f005 fa29 	bl	b17c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    5d2a:	e07a      	b.n	5e22 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    5d2c:	9b01      	ldr	r3, [sp, #4]
    5d2e:	68d9      	ldr	r1, [r3, #12]
    5d30:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d34:	4613      	mov	r3, r2
    5d36:	009b      	lsls	r3, r3, #2
    5d38:	4413      	add	r3, r2
    5d3a:	009b      	lsls	r3, r3, #2
    5d3c:	440b      	add	r3, r1
    5d3e:	68db      	ldr	r3, [r3, #12]
    5d40:	2b01      	cmp	r3, #1
    5d42:	d00b      	beq.n	5d5c <Port_Ipw_RefreshPortDirection+0xec>
    5d44:	9b01      	ldr	r3, [sp, #4]
    5d46:	68d9      	ldr	r1, [r3, #12]
    5d48:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d4c:	4613      	mov	r3, r2
    5d4e:	009b      	lsls	r3, r3, #2
    5d50:	4413      	add	r3, r2
    5d52:	009b      	lsls	r3, r3, #2
    5d54:	440b      	add	r3, r1
    5d56:	68db      	ldr	r3, [r3, #12]
    5d58:	2b03      	cmp	r3, #3
    5d5a:	d162      	bne.n	5e22 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5d5c:	f005 f9e2 	bl	b124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5d60:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d64:	095b      	lsrs	r3, r3, #5
    5d66:	b29b      	uxth	r3, r3
    5d68:	461a      	mov	r2, r3
    5d6a:	4b36      	ldr	r3, [pc, #216]	; (5e44 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5d70:	6959      	ldr	r1, [r3, #20]
    5d72:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d76:	f003 031f 	and.w	r3, r3, #31
    5d7a:	2201      	movs	r2, #1
    5d7c:	fa02 f303 	lsl.w	r3, r2, r3
    5d80:	43da      	mvns	r2, r3
    5d82:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d86:	095b      	lsrs	r3, r3, #5
    5d88:	b29b      	uxth	r3, r3
    5d8a:	4618      	mov	r0, r3
    5d8c:	4b2d      	ldr	r3, [pc, #180]	; (5e44 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d8e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5d92:	400a      	ands	r2, r1
    5d94:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5d96:	f005 f9f1 	bl	b17c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    5d9a:	f005 fa15 	bl	b1c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5d9e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5da2:	095b      	lsrs	r3, r3, #5
    5da4:	b29b      	uxth	r3, r3
    5da6:	461a      	mov	r2, r3
    5da8:	4b26      	ldr	r3, [pc, #152]	; (5e44 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5dae:	6999      	ldr	r1, [r3, #24]
    5db0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5db4:	f003 031f 	and.w	r3, r3, #31
    5db8:	2201      	movs	r2, #1
    5dba:	fa02 f303 	lsl.w	r3, r2, r3
    5dbe:	43da      	mvns	r2, r3
    5dc0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5dc4:	095b      	lsrs	r3, r3, #5
    5dc6:	b29b      	uxth	r3, r3
    5dc8:	4618      	mov	r0, r3
    5dca:	4b1e      	ldr	r3, [pc, #120]	; (5e44 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5dcc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5dd0:	400a      	ands	r2, r1
    5dd2:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5dd4:	9b01      	ldr	r3, [sp, #4]
    5dd6:	68d9      	ldr	r1, [r3, #12]
    5dd8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5ddc:	4613      	mov	r3, r2
    5dde:	009b      	lsls	r3, r3, #2
    5de0:	4413      	add	r3, r2
    5de2:	009b      	lsls	r3, r3, #2
    5de4:	440b      	add	r3, r1
    5de6:	68db      	ldr	r3, [r3, #12]
    5de8:	2b03      	cmp	r3, #3
    5dea:	d118      	bne.n	5e1e <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5dec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5df0:	095b      	lsrs	r3, r3, #5
    5df2:	b29b      	uxth	r3, r3
    5df4:	461a      	mov	r2, r3
    5df6:	4b13      	ldr	r3, [pc, #76]	; (5e44 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5dfc:	6999      	ldr	r1, [r3, #24]
    5dfe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e02:	f003 031f 	and.w	r3, r3, #31
    5e06:	2201      	movs	r2, #1
    5e08:	409a      	lsls	r2, r3
    5e0a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e0e:	095b      	lsrs	r3, r3, #5
    5e10:	b29b      	uxth	r3, r3
    5e12:	4618      	mov	r0, r3
    5e14:	4b0b      	ldr	r3, [pc, #44]	; (5e44 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5e16:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5e1a:	430a      	orrs	r2, r1
    5e1c:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    5e1e:	f005 f9ff 	bl	b220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5e22:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5e26:	3301      	adds	r3, #1
    5e28:	f8ad 300e 	strh.w	r3, [sp, #14]
    5e2c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5e30:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5e34:	429a      	cmp	r2, r3
    5e36:	f4ff af26 	bcc.w	5c86 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    5e3a:	bf00      	nop
    5e3c:	bf00      	nop
    5e3e:	b005      	add	sp, #20
    5e40:	f85d fb04 	ldr.w	pc, [sp], #4
    5e44:	0000bfe8 	.word	0x0000bfe8

00005e48 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    5e48:	b500      	push	{lr}
    5e4a:	b085      	sub	sp, #20
    5e4c:	4603      	mov	r3, r0
    5e4e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5e52:	2300      	movs	r3, #0
    5e54:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    5e58:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5e5c:	4618      	mov	r0, r3
    5e5e:	f000 f871 	bl	5f44 <Dio_Ipw_ReadChannel>
    5e62:	4603      	mov	r3, r0
    5e64:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    5e68:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5e6c:	4618      	mov	r0, r3
    5e6e:	b005      	add	sp, #20
    5e70:	f85d fb04 	ldr.w	pc, [sp], #4

00005e74 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    5e74:	b500      	push	{lr}
    5e76:	b083      	sub	sp, #12
    5e78:	4603      	mov	r3, r0
    5e7a:	460a      	mov	r2, r1
    5e7c:	f8ad 3006 	strh.w	r3, [sp, #6]
    5e80:	4613      	mov	r3, r2
    5e82:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    5e86:	f89d 2005 	ldrb.w	r2, [sp, #5]
    5e8a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5e8e:	4611      	mov	r1, r2
    5e90:	4618      	mov	r0, r3
    5e92:	f000 f87d 	bl	5f90 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    5e96:	bf00      	nop
    5e98:	b003      	add	sp, #12
    5e9a:	f85d fb04 	ldr.w	pc, [sp], #4

00005e9e <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    5e9e:	b500      	push	{lr}
    5ea0:	b085      	sub	sp, #20
    5ea2:	4603      	mov	r3, r0
    5ea4:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5ea8:	2300      	movs	r3, #0
    5eaa:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    5eae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5eb2:	4618      	mov	r0, r3
    5eb4:	f000 f892 	bl	5fdc <Dio_Ipw_FlipChannel>
    5eb8:	4603      	mov	r3, r0
    5eba:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    5ebe:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5ec2:	4618      	mov	r0, r3
    5ec4:	b005      	add	sp, #20
    5ec6:	f85d fb04 	ldr.w	pc, [sp], #4

00005eca <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    5eca:	b500      	push	{lr}
    5ecc:	b085      	sub	sp, #20
    5ece:	4603      	mov	r3, r0
    5ed0:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5ed4:	2300      	movs	r3, #0
    5ed6:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    5ed8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5edc:	4618      	mov	r0, r3
    5ede:	f000 f8b3 	bl	6048 <Dio_Ipw_ReadPort>
    5ee2:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    5ee4:	9b03      	ldr	r3, [sp, #12]
}
    5ee6:	4618      	mov	r0, r3
    5ee8:	b005      	add	sp, #20
    5eea:	f85d fb04 	ldr.w	pc, [sp], #4

00005eee <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    5eee:	b500      	push	{lr}
    5ef0:	b083      	sub	sp, #12
    5ef2:	4603      	mov	r3, r0
    5ef4:	9100      	str	r1, [sp, #0]
    5ef6:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    5efa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5efe:	9900      	ldr	r1, [sp, #0]
    5f00:	4618      	mov	r0, r3
    5f02:	f000 f8b9 	bl	6078 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    5f06:	bf00      	nop
    5f08:	b003      	add	sp, #12
    5f0a:	f85d fb04 	ldr.w	pc, [sp], #4

00005f0e <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    5f0e:	b500      	push	{lr}
    5f10:	b085      	sub	sp, #20
    5f12:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5f14:	2300      	movs	r3, #0
    5f16:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    5f18:	9801      	ldr	r0, [sp, #4]
    5f1a:	f000 f8c5 	bl	60a8 <Dio_Ipw_ReadChannelGroup>
    5f1e:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    5f20:	9b03      	ldr	r3, [sp, #12]
}
    5f22:	4618      	mov	r0, r3
    5f24:	b005      	add	sp, #20
    5f26:	f85d fb04 	ldr.w	pc, [sp], #4

00005f2a <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    5f2a:	b500      	push	{lr}
    5f2c:	b083      	sub	sp, #12
    5f2e:	9001      	str	r0, [sp, #4]
    5f30:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    5f32:	9900      	ldr	r1, [sp, #0]
    5f34:	9801      	ldr	r0, [sp, #4]
    5f36:	f000 f8d7 	bl	60e8 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    5f3a:	bf00      	nop
    5f3c:	b003      	add	sp, #12
    5f3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005f44 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    5f44:	b500      	push	{lr}
    5f46:	b087      	sub	sp, #28
    5f48:	4603      	mov	r3, r0
    5f4a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    5f4e:	2300      	movs	r3, #0
    5f50:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5f54:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5f58:	095b      	lsrs	r3, r3, #5
    5f5a:	b29b      	uxth	r3, r3
    5f5c:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    5f5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5f62:	f003 031f 	and.w	r3, r3, #31
    5f66:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    5f68:	4a08      	ldr	r2, [pc, #32]	; (5f8c <Dio_Ipw_ReadChannel+0x48>)
    5f6a:	9b04      	ldr	r3, [sp, #16]
    5f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f70:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    5f72:	9903      	ldr	r1, [sp, #12]
    5f74:	9802      	ldr	r0, [sp, #8]
    5f76:	f000 f940 	bl	61fa <Gpio_Dio_Ip_ReadPin>
    5f7a:	4603      	mov	r3, r0
    5f7c:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    5f80:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5f84:	4618      	mov	r0, r3
    5f86:	b007      	add	sp, #28
    5f88:	f85d fb04 	ldr.w	pc, [sp], #4
    5f8c:	1fff8b24 	.word	0x1fff8b24

00005f90 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    5f90:	b500      	push	{lr}
    5f92:	b087      	sub	sp, #28
    5f94:	4603      	mov	r3, r0
    5f96:	460a      	mov	r2, r1
    5f98:	f8ad 3006 	strh.w	r3, [sp, #6]
    5f9c:	4613      	mov	r3, r2
    5f9e:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5fa2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5fa6:	095b      	lsrs	r3, r3, #5
    5fa8:	b29b      	uxth	r3, r3
    5faa:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    5fac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5fb0:	f003 031f 	and.w	r3, r3, #31
    5fb4:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    5fb6:	4a08      	ldr	r2, [pc, #32]	; (5fd8 <Dio_Ipw_WriteChannel+0x48>)
    5fb8:	9b05      	ldr	r3, [sp, #20]
    5fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fbe:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    5fc0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5fc4:	461a      	mov	r2, r3
    5fc6:	9904      	ldr	r1, [sp, #16]
    5fc8:	9803      	ldr	r0, [sp, #12]
    5fca:	f000 f8b7 	bl	613c <Gpio_Dio_Ip_WritePin>
}
    5fce:	bf00      	nop
    5fd0:	b007      	add	sp, #28
    5fd2:	f85d fb04 	ldr.w	pc, [sp], #4
    5fd6:	bf00      	nop
    5fd8:	1fff8b24 	.word	0x1fff8b24

00005fdc <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    5fdc:	b500      	push	{lr}
    5fde:	b089      	sub	sp, #36	; 0x24
    5fe0:	4603      	mov	r3, r0
    5fe2:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5fe6:	2300      	movs	r3, #0
    5fe8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5fec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5ff0:	095b      	lsrs	r3, r3, #5
    5ff2:	b29b      	uxth	r3, r3
    5ff4:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    5ff6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5ffa:	f003 031f 	and.w	r3, r3, #31
    5ffe:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6000:	4a10      	ldr	r2, [pc, #64]	; (6044 <Dio_Ipw_FlipChannel+0x68>)
    6002:	9b06      	ldr	r3, [sp, #24]
    6004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6008:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    600a:	2201      	movs	r2, #1
    600c:	9b05      	ldr	r3, [sp, #20]
    600e:	fa02 f303 	lsl.w	r3, r2, r3
    6012:	4619      	mov	r1, r3
    6014:	9804      	ldr	r0, [sp, #16]
    6016:	f000 f8dc 	bl	61d2 <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    601a:	9804      	ldr	r0, [sp, #16]
    601c:	f000 f8bc 	bl	6198 <Gpio_Dio_Ip_GetPinsOutput>
    6020:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    6022:	2201      	movs	r2, #1
    6024:	9b05      	ldr	r3, [sp, #20]
    6026:	409a      	lsls	r2, r3
    6028:	9b03      	ldr	r3, [sp, #12]
    602a:	401a      	ands	r2, r3
    602c:	9b05      	ldr	r3, [sp, #20]
    602e:	fa22 f303 	lsr.w	r3, r2, r3
    6032:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    6036:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    603a:	4618      	mov	r0, r3
    603c:	b009      	add	sp, #36	; 0x24
    603e:	f85d fb04 	ldr.w	pc, [sp], #4
    6042:	bf00      	nop
    6044:	1fff8b24 	.word	0x1fff8b24

00006048 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    6048:	b500      	push	{lr}
    604a:	b085      	sub	sp, #20
    604c:	4603      	mov	r3, r0
    604e:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6052:	2300      	movs	r3, #0
    6054:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6056:	f89d 3007 	ldrb.w	r3, [sp, #7]
    605a:	4a06      	ldr	r2, [pc, #24]	; (6074 <Dio_Ipw_ReadPort+0x2c>)
    605c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6060:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6062:	9802      	ldr	r0, [sp, #8]
    6064:	f000 f8be 	bl	61e4 <Gpio_Dio_Ip_ReadPins>
    6068:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    606a:	9b03      	ldr	r3, [sp, #12]
}
    606c:	4618      	mov	r0, r3
    606e:	b005      	add	sp, #20
    6070:	f85d fb04 	ldr.w	pc, [sp], #4
    6074:	1fff8b24 	.word	0x1fff8b24

00006078 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6078:	b500      	push	{lr}
    607a:	b085      	sub	sp, #20
    607c:	4603      	mov	r3, r0
    607e:	9100      	str	r1, [sp, #0]
    6080:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    6084:	9b00      	ldr	r3, [sp, #0]
    6086:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6088:	f89d 3007 	ldrb.w	r3, [sp, #7]
    608c:	4a05      	ldr	r2, [pc, #20]	; (60a4 <Dio_Ipw_WritePort+0x2c>)
    608e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6092:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    6094:	9903      	ldr	r1, [sp, #12]
    6096:	9802      	ldr	r0, [sp, #8]
    6098:	f000 f875 	bl	6186 <Gpio_Dio_Ip_WritePins>
}
    609c:	bf00      	nop
    609e:	b005      	add	sp, #20
    60a0:	f85d fb04 	ldr.w	pc, [sp], #4
    60a4:	1fff8b24 	.word	0x1fff8b24

000060a8 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    60a8:	b500      	push	{lr}
    60aa:	b087      	sub	sp, #28
    60ac:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    60ae:	2300      	movs	r3, #0
    60b0:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    60b2:	9b01      	ldr	r3, [sp, #4]
    60b4:	781b      	ldrb	r3, [r3, #0]
    60b6:	461a      	mov	r2, r3
    60b8:	4b0a      	ldr	r3, [pc, #40]	; (60e4 <Dio_Ipw_ReadChannelGroup+0x3c>)
    60ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    60be:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    60c0:	9804      	ldr	r0, [sp, #16]
    60c2:	f000 f88f 	bl	61e4 <Gpio_Dio_Ip_ReadPins>
    60c6:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    60c8:	9b01      	ldr	r3, [sp, #4]
    60ca:	685a      	ldr	r2, [r3, #4]
    60cc:	9b03      	ldr	r3, [sp, #12]
    60ce:	4013      	ands	r3, r2
    60d0:	9a01      	ldr	r2, [sp, #4]
    60d2:	7852      	ldrb	r2, [r2, #1]
    60d4:	40d3      	lsrs	r3, r2
    60d6:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    60d8:	9b05      	ldr	r3, [sp, #20]
}
    60da:	4618      	mov	r0, r3
    60dc:	b007      	add	sp, #28
    60de:	f85d fb04 	ldr.w	pc, [sp], #4
    60e2:	bf00      	nop
    60e4:	1fff8b24 	.word	0x1fff8b24

000060e8 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    60e8:	b500      	push	{lr}
    60ea:	b087      	sub	sp, #28
    60ec:	9001      	str	r0, [sp, #4]
    60ee:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    60f0:	9b01      	ldr	r3, [sp, #4]
    60f2:	781b      	ldrb	r3, [r3, #0]
    60f4:	461a      	mov	r2, r3
    60f6:	4b10      	ldr	r3, [pc, #64]	; (6138 <Dio_Ipw_WriteChannelGroup+0x50>)
    60f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    60fc:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    60fe:	9b01      	ldr	r3, [sp, #4]
    6100:	785b      	ldrb	r3, [r3, #1]
    6102:	461a      	mov	r2, r3
    6104:	9b00      	ldr	r3, [sp, #0]
    6106:	fa03 f202 	lsl.w	r2, r3, r2
    610a:	9b01      	ldr	r3, [sp, #4]
    610c:	685b      	ldr	r3, [r3, #4]
    610e:	4013      	ands	r3, r2
    6110:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    6112:	9904      	ldr	r1, [sp, #16]
    6114:	9805      	ldr	r0, [sp, #20]
    6116:	f000 f84a 	bl	61ae <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    611a:	9b04      	ldr	r3, [sp, #16]
    611c:	43da      	mvns	r2, r3
    611e:	9b01      	ldr	r3, [sp, #4]
    6120:	685b      	ldr	r3, [r3, #4]
    6122:	4013      	ands	r3, r2
    6124:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    6126:	9903      	ldr	r1, [sp, #12]
    6128:	9805      	ldr	r0, [sp, #20]
    612a:	f000 f849 	bl	61c0 <Gpio_Dio_Ip_ClearPins>

}
    612e:	bf00      	nop
    6130:	b007      	add	sp, #28
    6132:	f85d fb04 	ldr.w	pc, [sp], #4
    6136:	bf00      	nop
    6138:	1fff8b24 	.word	0x1fff8b24

0000613c <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    613c:	b500      	push	{lr}
    613e:	b087      	sub	sp, #28
    6140:	9003      	str	r0, [sp, #12]
    6142:	9102      	str	r1, [sp, #8]
    6144:	4613      	mov	r3, r2
    6146:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    614a:	f001 ff93 	bl	8074 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    614e:	9b03      	ldr	r3, [sp, #12]
    6150:	681b      	ldr	r3, [r3, #0]
    6152:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    6154:	2201      	movs	r2, #1
    6156:	9b02      	ldr	r3, [sp, #8]
    6158:	fa02 f303 	lsl.w	r3, r2, r3
    615c:	43db      	mvns	r3, r3
    615e:	9a05      	ldr	r2, [sp, #20]
    6160:	4013      	ands	r3, r2
    6162:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    6164:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6168:	9b02      	ldr	r3, [sp, #8]
    616a:	fa02 f303 	lsl.w	r3, r2, r3
    616e:	9a05      	ldr	r2, [sp, #20]
    6170:	4313      	orrs	r3, r2
    6172:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    6174:	9b03      	ldr	r3, [sp, #12]
    6176:	9a05      	ldr	r2, [sp, #20]
    6178:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    617a:	f001 ffa7 	bl	80cc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    617e:	bf00      	nop
    6180:	b007      	add	sp, #28
    6182:	f85d fb04 	ldr.w	pc, [sp], #4

00006186 <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6186:	b082      	sub	sp, #8
    6188:	9001      	str	r0, [sp, #4]
    618a:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    618c:	9b01      	ldr	r3, [sp, #4]
    618e:	9a00      	ldr	r2, [sp, #0]
    6190:	601a      	str	r2, [r3, #0]
}
    6192:	bf00      	nop
    6194:	b002      	add	sp, #8
    6196:	4770      	bx	lr

00006198 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    6198:	b084      	sub	sp, #16
    619a:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    619c:	2300      	movs	r3, #0
    619e:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    61a0:	9b01      	ldr	r3, [sp, #4]
    61a2:	681b      	ldr	r3, [r3, #0]
    61a4:	9303      	str	r3, [sp, #12]
    return returnValue;
    61a6:	9b03      	ldr	r3, [sp, #12]
}
    61a8:	4618      	mov	r0, r3
    61aa:	b004      	add	sp, #16
    61ac:	4770      	bx	lr

000061ae <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    61ae:	b082      	sub	sp, #8
    61b0:	9001      	str	r0, [sp, #4]
    61b2:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    61b4:	9b01      	ldr	r3, [sp, #4]
    61b6:	9a00      	ldr	r2, [sp, #0]
    61b8:	605a      	str	r2, [r3, #4]
}
    61ba:	bf00      	nop
    61bc:	b002      	add	sp, #8
    61be:	4770      	bx	lr

000061c0 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    61c0:	b082      	sub	sp, #8
    61c2:	9001      	str	r0, [sp, #4]
    61c4:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    61c6:	9b01      	ldr	r3, [sp, #4]
    61c8:	9a00      	ldr	r2, [sp, #0]
    61ca:	609a      	str	r2, [r3, #8]
}
    61cc:	bf00      	nop
    61ce:	b002      	add	sp, #8
    61d0:	4770      	bx	lr

000061d2 <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    61d2:	b082      	sub	sp, #8
    61d4:	9001      	str	r0, [sp, #4]
    61d6:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    61d8:	9b01      	ldr	r3, [sp, #4]
    61da:	9a00      	ldr	r2, [sp, #0]
    61dc:	60da      	str	r2, [r3, #12]
}
    61de:	bf00      	nop
    61e0:	b002      	add	sp, #8
    61e2:	4770      	bx	lr

000061e4 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    61e4:	b084      	sub	sp, #16
    61e6:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    61e8:	2300      	movs	r3, #0
    61ea:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    61ec:	9b01      	ldr	r3, [sp, #4]
    61ee:	691b      	ldr	r3, [r3, #16]
    61f0:	9303      	str	r3, [sp, #12]
    return returnValue;
    61f2:	9b03      	ldr	r3, [sp, #12]
}
    61f4:	4618      	mov	r0, r3
    61f6:	b004      	add	sp, #16
    61f8:	4770      	bx	lr

000061fa <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    61fa:	b084      	sub	sp, #16
    61fc:	9001      	str	r0, [sp, #4]
    61fe:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    6200:	2300      	movs	r3, #0
    6202:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    6206:	9b01      	ldr	r3, [sp, #4]
    6208:	691a      	ldr	r2, [r3, #16]
    620a:	2101      	movs	r1, #1
    620c:	9b00      	ldr	r3, [sp, #0]
    620e:	fa01 f303 	lsl.w	r3, r1, r3
    6212:	401a      	ands	r2, r3
    6214:	9b00      	ldr	r3, [sp, #0]
    6216:	fa22 f303 	lsr.w	r3, r2, r3
    621a:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    621e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6222:	4618      	mov	r0, r3
    6224:	b004      	add	sp, #16
    6226:	4770      	bx	lr

00006228 <Ftm_Gpt_Ip_GetChInterruptStatusFlag>:
 *
 * @return  TRUE if a channel (n) event has occurred, FALSE otherwise
 * @pre     The driver needs to be initialized.
 */
static inline boolean Ftm_Gpt_Ip_GetChInterruptStatusFlag(uint8 instance, uint8 channel)
{
    6228:	b082      	sub	sp, #8
    622a:	4603      	mov	r3, r0
    622c:	460a      	mov	r2, r1
    622e:	f88d 3007 	strb.w	r3, [sp, #7]
    6232:	4613      	mov	r3, r2
    6234:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->CONTROLS[channel].CSC & FTM_CSC_CHF_MASK)) ? TRUE : FALSE;
    6238:	f89d 3007 	ldrb.w	r3, [sp, #7]
    623c:	4a09      	ldr	r2, [pc, #36]	; (6264 <Ftm_Gpt_Ip_GetChInterruptStatusFlag+0x3c>)
    623e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6242:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6246:	3301      	adds	r3, #1
    6248:	00db      	lsls	r3, r3, #3
    624a:	4413      	add	r3, r2
    624c:	685b      	ldr	r3, [r3, #4]
    624e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6252:	2b00      	cmp	r3, #0
    6254:	bf14      	ite	ne
    6256:	2301      	movne	r3, #1
    6258:	2300      	moveq	r3, #0
    625a:	b2db      	uxtb	r3, r3
}
    625c:	4618      	mov	r0, r3
    625e:	b002      	add	sp, #8
    6260:	4770      	bx	lr
    6262:	bf00      	nop
    6264:	0000bffc 	.word	0x0000bffc

00006268 <Ftm_Gpt_Ip_GetCntValue>:
*
* @return   current counter value
*
*/
static inline uint32 Ftm_Gpt_Ip_GetCntValue(uint8 instance)
{
    6268:	b082      	sub	sp, #8
    626a:	4603      	mov	r3, r0
    626c:	f88d 3007 	strb.w	r3, [sp, #7]
    return ftmGptBase[instance]->CNT;
    6270:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6274:	4a03      	ldr	r2, [pc, #12]	; (6284 <Ftm_Gpt_Ip_GetCntValue+0x1c>)
    6276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    627a:	685b      	ldr	r3, [r3, #4]
}
    627c:	4618      	mov	r0, r3
    627e:	b002      	add	sp, #8
    6280:	4770      	bx	lr
    6282:	bf00      	nop
    6284:	0000bffc 	.word	0x0000bffc

00006288 <Ftm_Gpt_Ip_GetCompareValue>:
 *
 * @return      compare value (CV)
 *
 */
static inline uint32 Ftm_Gpt_Ip_GetCompareValue(uint8 instance, uint8 channel)
{
    6288:	b082      	sub	sp, #8
    628a:	4603      	mov	r3, r0
    628c:	460a      	mov	r2, r1
    628e:	f88d 3007 	strb.w	r3, [sp, #7]
    6292:	4613      	mov	r3, r2
    6294:	f88d 3006 	strb.w	r3, [sp, #6]
    return ftmGptBase[instance]->CONTROLS[channel].CV;
    6298:	f89d 3007 	ldrb.w	r3, [sp, #7]
    629c:	4a05      	ldr	r2, [pc, #20]	; (62b4 <Ftm_Gpt_Ip_GetCompareValue+0x2c>)
    629e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    62a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    62a6:	3301      	adds	r3, #1
    62a8:	00db      	lsls	r3, r3, #3
    62aa:	4413      	add	r3, r2
    62ac:	689b      	ldr	r3, [r3, #8]
}
    62ae:	4618      	mov	r0, r3
    62b0:	b002      	add	sp, #8
    62b2:	4770      	bx	lr
    62b4:	0000bffc 	.word	0x0000bffc

000062b8 <Ftm_Gpt_Ip_SetFreezeBits>:
 *
 * @return      void
 *
 */
static inline void Ftm_Gpt_Ip_SetFreezeBits(uint8 instance, boolean freezeBits)
{
    62b8:	b500      	push	{lr}
    62ba:	b085      	sub	sp, #20
    62bc:	4603      	mov	r3, r0
    62be:	460a      	mov	r2, r1
    62c0:	f88d 3007 	strb.w	r3, [sp, #7]
    62c4:	4613      	mov	r3, r2
    62c6:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 freezeVal = (TRUE == freezeBits) ? 0UL : 3UL;
    62ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
    62ce:	2b00      	cmp	r3, #0
    62d0:	d001      	beq.n	62d6 <Ftm_Gpt_Ip_SetFreezeBits+0x1e>
    62d2:	2300      	movs	r3, #0
    62d4:	e000      	b.n	62d8 <Ftm_Gpt_Ip_SetFreezeBits+0x20>
    62d6:	2303      	movs	r3, #3
    62d8:	9303      	str	r3, [sp, #12]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17();
    62da:	f002 faa3 	bl	8824 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17>
    ftmGptBase[instance]->CONF = (ftmGptBase[instance]->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(freezeVal);
    62de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62e2:	4a0c      	ldr	r2, [pc, #48]	; (6314 <Ftm_Gpt_Ip_SetFreezeBits+0x5c>)
    62e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    62ec:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
    62f0:	9b03      	ldr	r3, [sp, #12]
    62f2:	019b      	lsls	r3, r3, #6
    62f4:	b2da      	uxtb	r2, r3
    62f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62fa:	4806      	ldr	r0, [pc, #24]	; (6314 <Ftm_Gpt_Ip_SetFreezeBits+0x5c>)
    62fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6300:	430a      	orrs	r2, r1
    6302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17();
    6306:	f002 fab9 	bl	887c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17>
}
    630a:	bf00      	nop
    630c:	b005      	add	sp, #20
    630e:	f85d fb04 	ldr.w	pc, [sp], #4
    6312:	bf00      	nop
    6314:	0000bffc 	.word	0x0000bffc

00006318 <Ftm_Gpt_Ip_SetCounterInitVal>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetCounterInitVal(uint8 instance, uint16 value)
{
    6318:	b082      	sub	sp, #8
    631a:	4603      	mov	r3, r0
    631c:	460a      	mov	r2, r1
    631e:	f88d 3007 	strb.w	r3, [sp, #7]
    6322:	4613      	mov	r3, r2
    6324:	f8ad 3004 	strh.w	r3, [sp, #4]
    ftmGptBase[instance]->CNTIN = (uint32)(((uint32)value << FTM_CNTIN_INIT_SHIFT) & FTM_CNTIN_INIT_MASK);
    6328:	f89d 3007 	ldrb.w	r3, [sp, #7]
    632c:	4a04      	ldr	r2, [pc, #16]	; (6340 <Ftm_Gpt_Ip_SetCounterInitVal+0x28>)
    632e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6332:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6336:	64da      	str	r2, [r3, #76]	; 0x4c
}
    6338:	bf00      	nop
    633a:	b002      	add	sp, #8
    633c:	4770      	bx	lr
    633e:	bf00      	nop
    6340:	0000bffc 	.word	0x0000bffc

00006344 <Ftm_Gpt_Ip_SetCounter>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetCounter(uint8 instance, uint16 value)
{
    6344:	b082      	sub	sp, #8
    6346:	4603      	mov	r3, r0
    6348:	460a      	mov	r2, r1
    634a:	f88d 3007 	strb.w	r3, [sp, #7]
    634e:	4613      	mov	r3, r2
    6350:	f8ad 3004 	strh.w	r3, [sp, #4]
    ftmGptBase[instance]->CNT = (uint32)(((uint32)value << FTM_CNT_COUNT_SHIFT) & FTM_CNT_COUNT_MASK);
    6354:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6358:	4a04      	ldr	r2, [pc, #16]	; (636c <Ftm_Gpt_Ip_SetCounter+0x28>)
    635a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    635e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6362:	605a      	str	r2, [r3, #4]
}
    6364:	bf00      	nop
    6366:	b002      	add	sp, #8
    6368:	4770      	bx	lr
    636a:	bf00      	nop
    636c:	0000bffc 	.word	0x0000bffc

00006370 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>:
 *
 * @return      void
 * @pre         The driver needs to be initialized.
 */
static inline void Ftm_Gpt_Ip_ClearChInterruptStatusFlag(uint8 instance, uint8 channel)
{
    6370:	b082      	sub	sp, #8
    6372:	4603      	mov	r3, r0
    6374:	460a      	mov	r2, r1
    6376:	f88d 3007 	strb.w	r3, [sp, #7]
    637a:	4613      	mov	r3, r2
    637c:	f88d 3006 	strb.w	r3, [sp, #6]
    ftmGptBase[instance]-> CONTROLS[channel].CSC &= ~(FTM_CSC_CHF_MASK);
    6380:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6384:	4a0c      	ldr	r2, [pc, #48]	; (63b8 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag+0x48>)
    6386:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    638a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    638e:	3301      	adds	r3, #1
    6390:	00db      	lsls	r3, r3, #3
    6392:	4413      	add	r3, r2
    6394:	685a      	ldr	r2, [r3, #4]
    6396:	f89d 3007 	ldrb.w	r3, [sp, #7]
    639a:	4907      	ldr	r1, [pc, #28]	; (63b8 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag+0x48>)
    639c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    63a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    63a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    63a8:	3301      	adds	r3, #1
    63aa:	00db      	lsls	r3, r3, #3
    63ac:	440b      	add	r3, r1
    63ae:	605a      	str	r2, [r3, #4]
}
    63b0:	bf00      	nop
    63b2:	b002      	add	sp, #8
    63b4:	4770      	bx	lr
    63b6:	bf00      	nop
    63b8:	0000bffc 	.word	0x0000bffc

000063bc <Ftm_Gpt_Ip_SetChannelEnableInterrupt>:
 * @param[in]   aboEn - Enables the FTM channel(n) interrupt
 *              - True : Enable the FTM channel(n) interrupt.
 *              - False: Disable the FTM channel(n) interrupt.
 */
static inline void Ftm_Gpt_Ip_SetChannelEnableInterrupt(uint8 instance, uint8 channel, boolean aboEn)
{
    63bc:	b082      	sub	sp, #8
    63be:	4603      	mov	r3, r0
    63c0:	f88d 3007 	strb.w	r3, [sp, #7]
    63c4:	460b      	mov	r3, r1
    63c6:	f88d 3006 	strb.w	r3, [sp, #6]
    63ca:	4613      	mov	r3, r2
    63cc:	f88d 3005 	strb.w	r3, [sp, #5]
    ftmGptBase[instance]-> CONTROLS[channel].CSC = (ftmGptBase[instance]-> CONTROLS[channel].CSC & ~(FTM_CSC_CHIE_MASK)) | FTM_CSC_CHIE((TRUE == aboEn) ? 1UL : 0UL);
    63d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    63d4:	4a10      	ldr	r2, [pc, #64]	; (6418 <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x5c>)
    63d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    63da:	f89d 3006 	ldrb.w	r3, [sp, #6]
    63de:	3301      	adds	r3, #1
    63e0:	00db      	lsls	r3, r3, #3
    63e2:	4413      	add	r3, r2
    63e4:	685b      	ldr	r3, [r3, #4]
    63e6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    63ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
    63ee:	2b00      	cmp	r3, #0
    63f0:	d001      	beq.n	63f6 <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x3a>
    63f2:	2040      	movs	r0, #64	; 0x40
    63f4:	e000      	b.n	63f8 <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x3c>
    63f6:	2000      	movs	r0, #0
    63f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    63fc:	4906      	ldr	r1, [pc, #24]	; (6418 <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x5c>)
    63fe:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    6402:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6406:	4302      	orrs	r2, r0
    6408:	3301      	adds	r3, #1
    640a:	00db      	lsls	r3, r3, #3
    640c:	440b      	add	r3, r1
    640e:	605a      	str	r2, [r3, #4]
}
    6410:	bf00      	nop
    6412:	b002      	add	sp, #8
    6414:	4770      	bx	lr
    6416:	bf00      	nop
    6418:	0000bffc 	.word	0x0000bffc

0000641c <Ftm_Gpt_Ip_SetClockSource>:
 * @param[in]       instance    FTM hardware instance number
 *
 * @return      void
 */
static inline void Ftm_Gpt_Ip_SetClockSource(uint8 instance, Ftm_Gpt_Ip_ClockSource clocksource)
{
    641c:	b500      	push	{lr}
    641e:	b083      	sub	sp, #12
    6420:	4603      	mov	r3, r0
    6422:	9100      	str	r1, [sp, #0]
    6424:	f88d 3007 	strb.w	r3, [sp, #7]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21();
    6428:	f002 fa4e 	bl	88c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21>
    ftmGptBase[instance]->SC = (ftmGptBase[instance]->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(clocksource);
    642c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6430:	4a0b      	ldr	r2, [pc, #44]	; (6460 <Ftm_Gpt_Ip_SetClockSource+0x44>)
    6432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6436:	681b      	ldr	r3, [r3, #0]
    6438:	f023 0118 	bic.w	r1, r3, #24
    643c:	9b00      	ldr	r3, [sp, #0]
    643e:	00db      	lsls	r3, r3, #3
    6440:	f003 0218 	and.w	r2, r3, #24
    6444:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6448:	4805      	ldr	r0, [pc, #20]	; (6460 <Ftm_Gpt_Ip_SetClockSource+0x44>)
    644a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    644e:	430a      	orrs	r2, r1
    6450:	601a      	str	r2, [r3, #0]
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21();
    6452:	f002 fa65 	bl	8920 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21>
}
    6456:	bf00      	nop
    6458:	b003      	add	sp, #12
    645a:	f85d fb04 	ldr.w	pc, [sp], #4
    645e:	bf00      	nop
    6460:	0000bffc 	.word	0x0000bffc

00006464 <Ftm_Gpt_Ip_SetPrescaler>:
 *
 * @return        void
 *
 */
static inline void Ftm_Gpt_Ip_SetPrescaler(uint8 instance, uint8 prescalerValue)
{
    6464:	b500      	push	{lr}
    6466:	b083      	sub	sp, #12
    6468:	4603      	mov	r3, r0
    646a:	460a      	mov	r2, r1
    646c:	f88d 3007 	strb.w	r3, [sp, #7]
    6470:	4613      	mov	r3, r2
    6472:	f88d 3006 	strb.w	r3, [sp, #6]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22();
    6476:	f002 fa79 	bl	896c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22>
    ftmGptBase[instance]->SC = (ftmGptBase[instance]->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(prescalerValue);
    647a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    647e:	4a0b      	ldr	r2, [pc, #44]	; (64ac <Ftm_Gpt_Ip_SetPrescaler+0x48>)
    6480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6484:	681b      	ldr	r3, [r3, #0]
    6486:	f023 0107 	bic.w	r1, r3, #7
    648a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    648e:	f003 0207 	and.w	r2, r3, #7
    6492:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6496:	4805      	ldr	r0, [pc, #20]	; (64ac <Ftm_Gpt_Ip_SetPrescaler+0x48>)
    6498:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    649c:	430a      	orrs	r2, r1
    649e:	601a      	str	r2, [r3, #0]
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22();
    64a0:	f002 fa90 	bl	89c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22>
}
    64a4:	bf00      	nop
    64a6:	b003      	add	sp, #12
    64a8:	f85d fb04 	ldr.w	pc, [sp], #4
    64ac:	0000bffc 	.word	0x0000bffc

000064b0 <Ftm_Gpt_Ip_SetEnFtmModule>:
 * @param[in]   enable
 *
 * @return      void
 */
static inline void Ftm_Gpt_Ip_SetEnFtmModule(uint8 instance, boolean enable)
{
    64b0:	b500      	push	{lr}
    64b2:	b083      	sub	sp, #12
    64b4:	4603      	mov	r3, r0
    64b6:	460a      	mov	r2, r1
    64b8:	f88d 3007 	strb.w	r3, [sp, #7]
    64bc:	4613      	mov	r3, r2
    64be:	f88d 3006 	strb.w	r3, [sp, #6]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23();
    64c2:	f002 faa5 	bl	8a10 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23>
    {
        ftmGptBase[instance]->MODE &= ~(FTM_MODE_FTMEN_MASK);
    64c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64ca:	4a13      	ldr	r2, [pc, #76]	; (6518 <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    64cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    64d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64d6:	4910      	ldr	r1, [pc, #64]	; (6518 <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    64d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    64dc:	f022 0201 	bic.w	r2, r2, #1
    64e0:	655a      	str	r2, [r3, #84]	; 0x54
        ftmGptBase[instance]->MODE |= FTM_MODE_FTMEN(enable ? 1UL : 0UL);
    64e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64e6:	4a0c      	ldr	r2, [pc, #48]	; (6518 <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    64e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    64ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    64f2:	2b00      	cmp	r3, #0
    64f4:	d001      	beq.n	64fa <Ftm_Gpt_Ip_SetEnFtmModule+0x4a>
    64f6:	2101      	movs	r1, #1
    64f8:	e000      	b.n	64fc <Ftm_Gpt_Ip_SetEnFtmModule+0x4c>
    64fa:	2100      	movs	r1, #0
    64fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6500:	4805      	ldr	r0, [pc, #20]	; (6518 <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    6502:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6506:	430a      	orrs	r2, r1
    6508:	655a      	str	r2, [r3, #84]	; 0x54
    }
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23();
    650a:	f002 faad 	bl	8a68 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23>
}
    650e:	bf00      	nop
    6510:	b003      	add	sp, #12
    6512:	f85d fb04 	ldr.w	pc, [sp], #4
    6516:	bf00      	nop
    6518:	0000bffc 	.word	0x0000bffc

0000651c <Ftm_Gpt_Ip_SetCompareValue>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetCompareValue(uint8 instance, uint8 channel, uint32 value)
{
    651c:	b082      	sub	sp, #8
    651e:	4603      	mov	r3, r0
    6520:	9200      	str	r2, [sp, #0]
    6522:	f88d 3007 	strb.w	r3, [sp, #7]
    6526:	460b      	mov	r3, r1
    6528:	f88d 3006 	strb.w	r3, [sp, #6]
    ftmGptBase[instance]-> CONTROLS[channel].CV = (uint32)((((uint32)value << FTM_CV_VAL_SHIFT) & FTM_CV_VAL_MASK));
    652c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6530:	4a06      	ldr	r2, [pc, #24]	; (654c <Ftm_Gpt_Ip_SetCompareValue+0x30>)
    6532:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    6536:	f89d 3006 	ldrb.w	r3, [sp, #6]
    653a:	9a00      	ldr	r2, [sp, #0]
    653c:	b292      	uxth	r2, r2
    653e:	3301      	adds	r3, #1
    6540:	00db      	lsls	r3, r3, #3
    6542:	440b      	add	r3, r1
    6544:	609a      	str	r2, [r3, #8]

}
    6546:	bf00      	nop
    6548:	b002      	add	sp, #8
    654a:	4770      	bx	lr
    654c:	0000bffc 	.word	0x0000bffc

00006550 <Ftm_Gpt_Ip_WriteModulo>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_WriteModulo(uint8 instance, uint16 value)
{
    6550:	b082      	sub	sp, #8
    6552:	4603      	mov	r3, r0
    6554:	460a      	mov	r2, r1
    6556:	f88d 3007 	strb.w	r3, [sp, #7]
    655a:	4613      	mov	r3, r2
    655c:	f8ad 3004 	strh.w	r3, [sp, #4]
    ftmGptBase[instance]-> MOD = value;
    6560:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6564:	4a04      	ldr	r2, [pc, #16]	; (6578 <Ftm_Gpt_Ip_WriteModulo+0x28>)
    6566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    656a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    656e:	609a      	str	r2, [r3, #8]

}
    6570:	bf00      	nop
    6572:	b002      	add	sp, #8
    6574:	4770      	bx	lr
    6576:	bf00      	nop
    6578:	0000bffc 	.word	0x0000bffc

0000657c <Ftm_Gpt_Ip_ModeSelectA>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_ModeSelectA(uint8 instance, uint8 channel, boolean enable)
{
    657c:	b500      	push	{lr}
    657e:	b083      	sub	sp, #12
    6580:	4603      	mov	r3, r0
    6582:	f88d 3007 	strb.w	r3, [sp, #7]
    6586:	460b      	mov	r3, r1
    6588:	f88d 3006 	strb.w	r3, [sp, #6]
    658c:	4613      	mov	r3, r2
    658e:	f88d 3005 	strb.w	r3, [sp, #5]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24();
    6592:	f002 fa8f 	bl	8ab4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24>
    if (TRUE == enable)
    6596:	f89d 3005 	ldrb.w	r3, [sp, #5]
    659a:	2b00      	cmp	r3, #0
    659c:	d018      	beq.n	65d0 <Ftm_Gpt_Ip_ModeSelectA+0x54>
    {
        ftmGptBase[instance]->CONTROLS[channel].CSC |= FTM_CSC_MSA_MASK;
    659e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65a2:	4a1a      	ldr	r2, [pc, #104]	; (660c <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    65a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    65a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    65ac:	3301      	adds	r3, #1
    65ae:	00db      	lsls	r3, r3, #3
    65b0:	4413      	add	r3, r2
    65b2:	685a      	ldr	r2, [r3, #4]
    65b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65b8:	4914      	ldr	r1, [pc, #80]	; (660c <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    65ba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    65be:	f89d 3006 	ldrb.w	r3, [sp, #6]
    65c2:	f042 0210 	orr.w	r2, r2, #16
    65c6:	3301      	adds	r3, #1
    65c8:	00db      	lsls	r3, r3, #3
    65ca:	440b      	add	r3, r1
    65cc:	605a      	str	r2, [r3, #4]
    65ce:	e017      	b.n	6600 <Ftm_Gpt_Ip_ModeSelectA+0x84>
    }
    else
    {
        ftmGptBase[instance]->CONTROLS[channel].CSC &= (~(FTM_CSC_MSA_MASK));
    65d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65d4:	4a0d      	ldr	r2, [pc, #52]	; (660c <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    65d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    65da:	f89d 3006 	ldrb.w	r3, [sp, #6]
    65de:	3301      	adds	r3, #1
    65e0:	00db      	lsls	r3, r3, #3
    65e2:	4413      	add	r3, r2
    65e4:	685a      	ldr	r2, [r3, #4]
    65e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65ea:	4908      	ldr	r1, [pc, #32]	; (660c <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    65ec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    65f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    65f4:	f022 0210 	bic.w	r2, r2, #16
    65f8:	3301      	adds	r3, #1
    65fa:	00db      	lsls	r3, r3, #3
    65fc:	440b      	add	r3, r1
    65fe:	605a      	str	r2, [r3, #4]
    }
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24();
    6600:	f002 fa84 	bl	8b0c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24>
}
    6604:	bf00      	nop
    6606:	b003      	add	sp, #12
    6608:	f85d fb04 	ldr.w	pc, [sp], #4
    660c:	0000bffc 	.word	0x0000bffc

00006610 <Ftm_Gpt_Ip_SetHalfCycleValue>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetHalfCycleValue(FTM_Type * const base, uint16 value)
{
    6610:	b082      	sub	sp, #8
    6612:	9001      	str	r0, [sp, #4]
    6614:	460b      	mov	r3, r1
    6616:	f8ad 3002 	strh.w	r3, [sp, #2]
    ((base)->HCR) = value;
    661a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    661e:	9b01      	ldr	r3, [sp, #4]
    6620:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    6624:	bf00      	nop
    6626:	b002      	add	sp, #8
    6628:	4770      	bx	lr

0000662a <Ftm_Gpt_Ip_GetChInterruptEnableFlag>:
 *
 * @return  TRUE if a channel (n) event has occurred, FALSE otherwise
 * @pre     The driver needs to be initialized.
 */
static inline boolean Ftm_Gpt_Ip_GetChInterruptEnableFlag(uint8 instance, uint8 channel)
{
    662a:	b082      	sub	sp, #8
    662c:	4603      	mov	r3, r0
    662e:	460a      	mov	r2, r1
    6630:	f88d 3007 	strb.w	r3, [sp, #7]
    6634:	4613      	mov	r3, r2
    6636:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->CONTROLS[channel].CSC & FTM_CSC_CHIE_MASK)) ? TRUE : FALSE;
    663a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    663e:	4a09      	ldr	r2, [pc, #36]	; (6664 <Ftm_Gpt_Ip_GetChInterruptEnableFlag+0x3a>)
    6640:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6644:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6648:	3301      	adds	r3, #1
    664a:	00db      	lsls	r3, r3, #3
    664c:	4413      	add	r3, r2
    664e:	685b      	ldr	r3, [r3, #4]
    6650:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6654:	2b00      	cmp	r3, #0
    6656:	bf14      	ite	ne
    6658:	2301      	movne	r3, #1
    665a:	2300      	moveq	r3, #0
    665c:	b2db      	uxtb	r3, r3
}
    665e:	4618      	mov	r0, r3
    6660:	b002      	add	sp, #8
    6662:	4770      	bx	lr
    6664:	0000bffc 	.word	0x0000bffc

00006668 <Ftm_Gpt_Ip_GetChannelEventStatus>:
 *         - True : A channel event has occurred
 *         - False: No channel event has occurred
 *
 */
static inline boolean Ftm_Gpt_Ip_GetChannelEventStatus(uint8 instance, uint8 channel)
{
    6668:	b082      	sub	sp, #8
    666a:	4603      	mov	r3, r0
    666c:	460a      	mov	r2, r1
    666e:	f88d 3007 	strb.w	r3, [sp, #7]
    6672:	4613      	mov	r3, r2
    6674:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->STATUS & (1UL << channel))) ? TRUE : FALSE;
    6678:	f89d 3007 	ldrb.w	r3, [sp, #7]
    667c:	4a08      	ldr	r2, [pc, #32]	; (66a0 <Ftm_Gpt_Ip_GetChannelEventStatus+0x38>)
    667e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6682:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    6684:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6688:	fa22 f303 	lsr.w	r3, r2, r3
    668c:	f003 0301 	and.w	r3, r3, #1
    6690:	2b00      	cmp	r3, #0
    6692:	bf14      	ite	ne
    6694:	2301      	movne	r3, #1
    6696:	2300      	moveq	r3, #0
    6698:	b2db      	uxtb	r3, r3
}
    669a:	4618      	mov	r0, r3
    669c:	b002      	add	sp, #8
    669e:	4770      	bx	lr
    66a0:	0000bffc 	.word	0x0000bffc

000066a4 <Ftm_Gpt_Ip_ProcessCommonInterrupt>:
* @param[in]     instance     FTM hardware instance number
* @param[in]     channel      FTM hardware channel number
* @implements    Ftm_Gpt_Ip_ProcessCommonInterrupt_Activity
*/
static void Ftm_Gpt_Ip_ProcessCommonInterrupt(uint8 instance, uint8 channel)
{
    66a4:	b500      	push	{lr}
    66a6:	b089      	sub	sp, #36	; 0x24
    66a8:	4603      	mov	r3, r0
    66aa:	460a      	mov	r2, r1
    66ac:	f88d 3007 	strb.w	r3, [sp, #7]
    66b0:	4613      	mov	r3, r2
    66b2:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Gpt_Ip_CallbackType     callback;
    uint8                       callbackParam;
    Ftm_Gpt_Ip_ChannelModeType  channelMode;

    uint32 targetValue;
    uint32 oldCmpValue = Ftm_Gpt_Ip_GetCompareValue(instance, channel);
    66b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
    66ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66be:	4611      	mov	r1, r2
    66c0:	4618      	mov	r0, r3
    66c2:	f7ff fde1 	bl	6288 <Ftm_Gpt_Ip_GetCompareValue>
    66c6:	9007      	str	r0, [sp, #28]

    if ((instance < FTM_INSTANCE_COUNT) && (channel < FTM_CONTROLS_COUNT))
    66c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66cc:	2b03      	cmp	r3, #3
    66ce:	f200 80a8 	bhi.w	6822 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
    66d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    66d6:	2b07      	cmp	r3, #7
    66d8:	f200 80a3 	bhi.w	6822 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
    {
        /* enter critical section */
        SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25();
    66dc:	f002 fa3c 	bl	8b58 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25>
        {
            /* check if channel event is enabled */
            IsChEvEnabled = Ftm_Gpt_Ip_GetChInterruptEnableFlag(instance, channel);
    66e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    66e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66e8:	4611      	mov	r1, r2
    66ea:	4618      	mov	r0, r3
    66ec:	f7ff ff9d 	bl	662a <Ftm_Gpt_Ip_GetChInterruptEnableFlag>
    66f0:	4603      	mov	r3, r0
    66f2:	f88d 301b 	strb.w	r3, [sp, #27]

            /* check if channel event has occurred */
            HasChEvOccurred = Ftm_Gpt_Ip_GetChInterruptStatusFlag(instance, channel);
    66f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
    66fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66fe:	4611      	mov	r1, r2
    6700:	4618      	mov	r0, r3
    6702:	f7ff fd91 	bl	6228 <Ftm_Gpt_Ip_GetChInterruptStatusFlag>
    6706:	4603      	mov	r3, r0
    6708:	f88d 301a 	strb.w	r3, [sp, #26]

            /* Check for spurious interrupts */
            if (HasChEvOccurred && IsChEvEnabled)
    670c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    6710:	2b00      	cmp	r3, #0
    6712:	d00b      	beq.n	672c <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x88>
    6714:	f89d 301b 	ldrb.w	r3, [sp, #27]
    6718:	2b00      	cmp	r3, #0
    671a:	d007      	beq.n	672c <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x88>
            {
                /* Clear interrupt flag */
                Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    671c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6720:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6724:	4611      	mov	r1, r2
    6726:	4618      	mov	r0, r3
    6728:	f7ff fe22 	bl	6370 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
            }
        }
        /* exit critical section */
        SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25();
    672c:	f002 fa40 	bl	8bb0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25>

        if (HasChEvOccurred && IsChEvEnabled)
    6730:	f89d 301a 	ldrb.w	r3, [sp, #26]
    6734:	2b00      	cmp	r3, #0
    6736:	d074      	beq.n	6822 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
    6738:	f89d 301b 	ldrb.w	r3, [sp, #27]
    673c:	2b00      	cmp	r3, #0
    673e:	d070      	beq.n	6822 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
        {
            chInit          = Ftm_Gpt_Ip_u32ChState[instance][channel].chInit;
    6740:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6744:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6748:	4938      	ldr	r1, [pc, #224]	; (682c <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    674a:	00d2      	lsls	r2, r2, #3
    674c:	4413      	add	r3, r2
    674e:	011b      	lsls	r3, r3, #4
    6750:	440b      	add	r3, r1
    6752:	781b      	ldrb	r3, [r3, #0]
    6754:	f88d 3019 	strb.w	r3, [sp, #25]
            callback        = Ftm_Gpt_Ip_u32ChState[instance][channel].callback;
    6758:	f89d 2007 	ldrb.w	r2, [sp, #7]
    675c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6760:	4932      	ldr	r1, [pc, #200]	; (682c <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    6762:	00d2      	lsls	r2, r2, #3
    6764:	4413      	add	r3, r2
    6766:	011b      	lsls	r3, r3, #4
    6768:	440b      	add	r3, r1
    676a:	3304      	adds	r3, #4
    676c:	681b      	ldr	r3, [r3, #0]
    676e:	9305      	str	r3, [sp, #20]
            callbackParam   = Ftm_Gpt_Ip_u32ChState[instance][channel].callbackParam;
    6770:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6774:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6778:	492c      	ldr	r1, [pc, #176]	; (682c <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    677a:	00d2      	lsls	r2, r2, #3
    677c:	4413      	add	r3, r2
    677e:	011b      	lsls	r3, r3, #4
    6780:	440b      	add	r3, r1
    6782:	3308      	adds	r3, #8
    6784:	781b      	ldrb	r3, [r3, #0]
    6786:	f88d 3013 	strb.w	r3, [sp, #19]

            /* Call GPT upper layer handler */
            if ((TRUE == chInit) && (NULL_PTR != callback))
    678a:	f89d 3019 	ldrb.w	r3, [sp, #25]
    678e:	2b00      	cmp	r3, #0
    6790:	d007      	beq.n	67a2 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0xfe>
    6792:	9b05      	ldr	r3, [sp, #20]
    6794:	2b00      	cmp	r3, #0
    6796:	d004      	beq.n	67a2 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0xfe>
            {
                callback(callbackParam);
    6798:	f89d 2013 	ldrb.w	r2, [sp, #19]
    679c:	9b05      	ldr	r3, [sp, #20]
    679e:	4610      	mov	r0, r2
    67a0:	4798      	blx	r3
                Ftm_Gpt_Ip_u32TargetValue[instance][channel] = Ftm_Gpt_Ip_u32NextTargetValue[instance][channel];
                Ftm_Gpt_Ip_u32NextTargetValue[instance][channel] = 0x0U;
            }
#endif
            /* Check if channel mode is ONE-SHOT */
            channelMode = Ftm_Gpt_Ip_u32ChState[instance][channel].channelMode;
    67a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    67a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    67aa:	4920      	ldr	r1, [pc, #128]	; (682c <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    67ac:	00d2      	lsls	r2, r2, #3
    67ae:	4413      	add	r3, r2
    67b0:	011b      	lsls	r3, r3, #4
    67b2:	440b      	add	r3, r1
    67b4:	330c      	adds	r3, #12
    67b6:	681b      	ldr	r3, [r3, #0]
    67b8:	9303      	str	r3, [sp, #12]
            if(FTM_GPT_IP_CH_MODE_ONESHOT == channelMode)
    67ba:	9b03      	ldr	r3, [sp, #12]
    67bc:	2b01      	cmp	r3, #1
    67be:	d108      	bne.n	67d2 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x12e>
            {
                Ftm_Gpt_Ip_DisableChannelInterrupt(instance, channel);
    67c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    67c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    67c8:	4611      	mov	r1, r2
    67ca:	4618      	mov	r0, r3
    67cc:	f000 f9ce 	bl	6b6c <Ftm_Gpt_Ip_DisableChannelInterrupt>
                    Ftm_Gpt_Ip_SetCompareValue(instance, channel, (uint32)(oldCmpValue + targetValue));
                }
            }
        }
    }
}
    67d0:	e027      	b.n	6822 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
                targetValue = Ftm_Gpt_Ip_u32TargetValue[instance][channel];
    67d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    67d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    67da:	4915      	ldr	r1, [pc, #84]	; (6830 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x18c>)
    67dc:	00d2      	lsls	r2, r2, #3
    67de:	4413      	add	r3, r2
    67e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    67e4:	9302      	str	r3, [sp, #8]
                if ((uint32)(oldCmpValue + targetValue) > FTM_CNT_MAX_VALUE)
    67e6:	9a07      	ldr	r2, [sp, #28]
    67e8:	9b02      	ldr	r3, [sp, #8]
    67ea:	4413      	add	r3, r2
    67ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    67f0:	d30d      	bcc.n	680e <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x16a>
                    Ftm_Gpt_Ip_SetCompareValue(instance, channel, (uint32)(targetValue - (FTM_CNT_MAX_VALUE - oldCmpValue)));
    67f2:	9a07      	ldr	r2, [sp, #28]
    67f4:	9b02      	ldr	r3, [sp, #8]
    67f6:	4413      	add	r3, r2
    67f8:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
    67fc:	3bff      	subs	r3, #255	; 0xff
    67fe:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6802:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6806:	461a      	mov	r2, r3
    6808:	f7ff fe88 	bl	651c <Ftm_Gpt_Ip_SetCompareValue>
}
    680c:	e009      	b.n	6822 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
                    Ftm_Gpt_Ip_SetCompareValue(instance, channel, (uint32)(oldCmpValue + targetValue));
    680e:	9a07      	ldr	r2, [sp, #28]
    6810:	9b02      	ldr	r3, [sp, #8]
    6812:	441a      	add	r2, r3
    6814:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6818:	f89d 3007 	ldrb.w	r3, [sp, #7]
    681c:	4618      	mov	r0, r3
    681e:	f7ff fe7d 	bl	651c <Ftm_Gpt_Ip_SetCompareValue>
}
    6822:	bf00      	nop
    6824:	b009      	add	sp, #36	; 0x24
    6826:	f85d fb04 	ldr.w	pc, [sp], #4
    682a:	bf00      	nop
    682c:	1fff8dd8 	.word	0x1fff8dd8
    6830:	1fff8d48 	.word	0x1fff8d48

00006834 <Ftm_Gpt_Ip_Init>:
* @return        void
* @pre           The data structure including the configuration set required for initializing the GPT driver
* @implements    Ftm_Gpt_Ip_Init_Activity
*/
void Ftm_Gpt_Ip_Init(uint8 instance, const Ftm_Gpt_Ip_InstanceConfigType *configPtr)
{
    6834:	b500      	push	{lr}
    6836:	b083      	sub	sp, #12
    6838:	4603      	mov	r3, r0
    683a:	9100      	str	r1, [sp, #0]
    683c:	f88d 3007 	strb.w	r3, [sp, #7]
#endif
    /* Enable register access from user mode, if enabled from configuration file */
    Call_Ftm_Gpt_Ip_SetUserAccessAllowed((uint32)ftmGptBase[instance]);

    /* Check the FTM counter modes */
    if (FTM_GPT_IP_MODE_UP_TIMER == configPtr->mode)
    6840:	9b00      	ldr	r3, [sp, #0]
    6842:	68db      	ldr	r3, [r3, #12]
    6844:	2b01      	cmp	r3, #1
    6846:	d12a      	bne.n	689e <Ftm_Gpt_Ip_Init+0x6a>
    {
        /* Set clock and prescalerValue FTM */
        Ftm_Gpt_Ip_SetPrescaler(instance, configPtr->clockPrescaler);
    6848:	9b00      	ldr	r3, [sp, #0]
    684a:	7a1a      	ldrb	r2, [r3, #8]
    684c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6850:	4611      	mov	r1, r2
    6852:	4618      	mov	r0, r3
    6854:	f7ff fe06 	bl	6464 <Ftm_Gpt_Ip_SetPrescaler>
        /* Set FTM counter clock source */
        Ftm_Gpt_Ip_SetClockSource(instance, configPtr->clocksource);
    6858:	9b00      	ldr	r3, [sp, #0]
    685a:	685a      	ldr	r2, [r3, #4]
    685c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6860:	4611      	mov	r1, r2
    6862:	4618      	mov	r0, r3
    6864:	f7ff fdda 	bl	641c <Ftm_Gpt_Ip_SetClockSource>

        /* Set freeze bits */
        Ftm_Gpt_Ip_SetFreezeBits(instance, configPtr->freezeBits);
    6868:	9b00      	ldr	r3, [sp, #0]
    686a:	781a      	ldrb	r2, [r3, #0]
    686c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6870:	4611      	mov	r1, r2
    6872:	4618      	mov	r0, r3
    6874:	f7ff fd20 	bl	62b8 <Ftm_Gpt_Ip_SetFreezeBits>

        /*Set Counter register and Initial Counter Value*/
        Ftm_Gpt_Ip_SetCounterInitVal(instance, 1U);
    6878:	f89d 3007 	ldrb.w	r3, [sp, #7]
    687c:	2101      	movs	r1, #1
    687e:	4618      	mov	r0, r3
    6880:	f7ff fd4a 	bl	6318 <Ftm_Gpt_Ip_SetCounterInitVal>

        /* write the Ftm Modulo Register with 0xFFFF */
        Ftm_Gpt_Ip_WriteModulo(instance, 0xFFFFU);
    6884:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6888:	f64f 71ff 	movw	r1, #65535	; 0xffff
    688c:	4618      	mov	r0, r3
    688e:	f7ff fe5f 	bl	6550 <Ftm_Gpt_Ip_WriteModulo>

        /* set FTM Enable bit */
        Ftm_Gpt_Ip_SetEnFtmModule(instance, TRUE);
    6892:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6896:	2101      	movs	r1, #1
    6898:	4618      	mov	r0, r3
    689a:	f7ff fe09 	bl	64b0 <Ftm_Gpt_Ip_SetEnFtmModule>
#if (FTM_GPT_IP_SET_CLOCK_MODE == STD_ON)
    Ftm_Gpt_Ip_u32InstancePrescaler[instance].clockPrescaler = configPtr->clockPrescaler;
    Ftm_Gpt_Ip_u32InstancePrescaler[instance].clockAlternatePrescaler = configPtr->clockAlternatePrescaler;
#endif
    /* set FTM instance status to initialized */
    Ftm_Gpt_Ip_u32InstanceState[instance] = FTM_GPT_IP_STATUS_INITIALIZED;
    689e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68a2:	4a04      	ldr	r2, [pc, #16]	; (68b4 <Ftm_Gpt_Ip_Init+0x80>)
    68a4:	2101      	movs	r1, #1
    68a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    68aa:	bf00      	nop
    68ac:	b003      	add	sp, #12
    68ae:	f85d fb04 	ldr.w	pc, [sp], #4
    68b2:	bf00      	nop
    68b4:	1fff8dc8 	.word	0x1fff8dc8

000068b8 <Ftm_Gpt_Ip_InitChannel>:
* @return        void
* @pre           The data structure including the configuration set required for initializing the GPT driver
* @implements    Ftm_Gpt_Ip_InitChannel_Activity
*/
void Ftm_Gpt_Ip_InitChannel(uint8 instance, const Ftm_Gpt_Ip_ChannelConfigType *configPtr)
{
    68b8:	b500      	push	{lr}
    68ba:	b083      	sub	sp, #12
    68bc:	4603      	mov	r3, r0
    68be:	9100      	str	r1, [sp, #0]
    68c0:	f88d 3007 	strb.w	r3, [sp, #7]
    DevAssert(FTM_INSTANCE_COUNT > instance);
    DevAssert(FTM_CONTROLS_COUNT > configPtr->hwChannel);
#endif

    /* Disable channels interrupt bit */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, configPtr->hwChannel, FALSE);
    68c4:	9b00      	ldr	r3, [sp, #0]
    68c6:	7819      	ldrb	r1, [r3, #0]
    68c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68cc:	2200      	movs	r2, #0
    68ce:	4618      	mov	r0, r3
    68d0:	f7ff fd74 	bl	63bc <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear ClearInterruptFlag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, configPtr->hwChannel);
    68d4:	9b00      	ldr	r3, [sp, #0]
    68d6:	781a      	ldrb	r2, [r3, #0]
    68d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68dc:	4611      	mov	r1, r2
    68de:	4618      	mov	r0, r3
    68e0:	f7ff fd46 	bl	6370 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Set Compare Value register to 0xFFFF */
    Ftm_Gpt_Ip_SetCompareValue(instance, configPtr->hwChannel, 0xFFFFU);
    68e4:	9b00      	ldr	r3, [sp, #0]
    68e6:	7819      	ldrb	r1, [r3, #0]
    68e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
    68f0:	4618      	mov	r0, r3
    68f2:	f7ff fe13 	bl	651c <Ftm_Gpt_Ip_SetCompareValue>
    /* Set bit MSA */
    Ftm_Gpt_Ip_ModeSelectA(instance, configPtr->hwChannel, TRUE);
    68f6:	9b00      	ldr	r3, [sp, #0]
    68f8:	7819      	ldrb	r1, [r3, #0]
    68fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68fe:	2201      	movs	r2, #1
    6900:	4618      	mov	r0, r3
    6902:	f7ff fe3b 	bl	657c <Ftm_Gpt_Ip_ModeSelectA>
     (defined FTM_4_CH_4_CH_5_ISR_USED) || (defined FTM_4_CH_6_CH_7_ISR_USED) || (defined FTM_5_CH_0_CH_1_ISR_USED) || \
     (defined FTM_5_CH_2_CH_3_ISR_USED) || (defined FTM_5_CH_4_CH_5_ISR_USED) || (defined FTM_5_CH_6_CH_7_ISR_USED) || \
     (defined FTM_6_CH_0_CH_1_ISR_USED) || (defined FTM_6_CH_2_CH_3_ISR_USED) || (defined FTM_6_CH_4_CH_5_ISR_USED) || \
     (defined FTM_6_CH_6_CH_7_ISR_USED) || (defined FTM_7_CH_0_CH_1_ISR_USED) || (defined FTM_7_CH_2_CH_3_ISR_USED) || \
     (defined FTM_7_CH_4_CH_5_ISR_USED) || (defined FTM_7_CH_6_CH_7_ISR_USED))
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].chInit = TRUE;
    6906:	f89d 3007 	ldrb.w	r3, [sp, #7]
    690a:	9a00      	ldr	r2, [sp, #0]
    690c:	7812      	ldrb	r2, [r2, #0]
    690e:	4611      	mov	r1, r2
    6910:	4a1a      	ldr	r2, [pc, #104]	; (697c <Ftm_Gpt_Ip_InitChannel+0xc4>)
    6912:	00db      	lsls	r3, r3, #3
    6914:	440b      	add	r3, r1
    6916:	011b      	lsls	r3, r3, #4
    6918:	4413      	add	r3, r2
    691a:	2201      	movs	r2, #1
    691c:	701a      	strb	r2, [r3, #0]
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].callback = configPtr->callback;
    691e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6922:	9a00      	ldr	r2, [sp, #0]
    6924:	7812      	ldrb	r2, [r2, #0]
    6926:	4610      	mov	r0, r2
    6928:	9a00      	ldr	r2, [sp, #0]
    692a:	6852      	ldr	r2, [r2, #4]
    692c:	4913      	ldr	r1, [pc, #76]	; (697c <Ftm_Gpt_Ip_InitChannel+0xc4>)
    692e:	00db      	lsls	r3, r3, #3
    6930:	4403      	add	r3, r0
    6932:	011b      	lsls	r3, r3, #4
    6934:	440b      	add	r3, r1
    6936:	3304      	adds	r3, #4
    6938:	601a      	str	r2, [r3, #0]
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].callbackParam = configPtr->callbackParam;
    693a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    693e:	9a00      	ldr	r2, [sp, #0]
    6940:	7812      	ldrb	r2, [r2, #0]
    6942:	4610      	mov	r0, r2
    6944:	9a00      	ldr	r2, [sp, #0]
    6946:	7a11      	ldrb	r1, [r2, #8]
    6948:	4a0c      	ldr	r2, [pc, #48]	; (697c <Ftm_Gpt_Ip_InitChannel+0xc4>)
    694a:	00db      	lsls	r3, r3, #3
    694c:	4403      	add	r3, r0
    694e:	011b      	lsls	r3, r3, #4
    6950:	4413      	add	r3, r2
    6952:	3308      	adds	r3, #8
    6954:	460a      	mov	r2, r1
    6956:	701a      	strb	r2, [r3, #0]
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].channelMode = configPtr->channelMode;
    6958:	f89d 3007 	ldrb.w	r3, [sp, #7]
    695c:	9a00      	ldr	r2, [sp, #0]
    695e:	7812      	ldrb	r2, [r2, #0]
    6960:	4610      	mov	r0, r2
    6962:	9a00      	ldr	r2, [sp, #0]
    6964:	68d2      	ldr	r2, [r2, #12]
    6966:	4905      	ldr	r1, [pc, #20]	; (697c <Ftm_Gpt_Ip_InitChannel+0xc4>)
    6968:	00db      	lsls	r3, r3, #3
    696a:	4403      	add	r3, r0
    696c:	011b      	lsls	r3, r3, #4
    696e:	440b      	add	r3, r1
    6970:	330c      	adds	r3, #12
    6972:	601a      	str	r2, [r3, #0]
#endif
}
    6974:	bf00      	nop
    6976:	b003      	add	sp, #12
    6978:	f85d fb04 	ldr.w	pc, [sp], #4
    697c:	1fff8dd8 	.word	0x1fff8dd8

00006980 <Ftm_Gpt_Ip_Deinit>:
* @return        void
* @pre           The data structure including the configuration set required for initializing the GPT driver.
* @implements    Ftm_Gpt_Ip_Deinit_Activity
*/
void Ftm_Gpt_Ip_Deinit(uint8 instance)
{
    6980:	b500      	push	{lr}
    6982:	b085      	sub	sp, #20
    6984:	4603      	mov	r3, r0
    6986:	f88d 3007 	strb.w	r3, [sp, #7]
    #endif

    uint8 channelIndex;

    /* Reset all channels to default */
    for (channelIndex = 0; channelIndex < FTM_CONTROLS_COUNT; channelIndex++)
    698a:	2300      	movs	r3, #0
    698c:	f88d 300f 	strb.w	r3, [sp, #15]
    6990:	e014      	b.n	69bc <Ftm_Gpt_Ip_Deinit+0x3c>
    {
        /* Disable interrupts */
        Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channelIndex, FALSE );
    6992:	f89d 100f 	ldrb.w	r1, [sp, #15]
    6996:	f89d 3007 	ldrb.w	r3, [sp, #7]
    699a:	2200      	movs	r2, #0
    699c:	4618      	mov	r0, r3
    699e:	f7ff fd0d 	bl	63bc <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
        /*Clear interrupt flags*/
        Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channelIndex);
    69a2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    69a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69aa:	4611      	mov	r1, r2
    69ac:	4618      	mov	r0, r3
    69ae:	f7ff fcdf 	bl	6370 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    for (channelIndex = 0; channelIndex < FTM_CONTROLS_COUNT; channelIndex++)
    69b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    69b6:	3301      	adds	r3, #1
    69b8:	f88d 300f 	strb.w	r3, [sp, #15]
    69bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    69c0:	2b07      	cmp	r3, #7
    69c2:	d9e6      	bls.n	6992 <Ftm_Gpt_Ip_Deinit+0x12>
    }
    /* Set clock source as 'No clock'. This in effect disables the FTM counter */
    Ftm_Gpt_Ip_SetClockSource(instance, FTM_GPT_IP_CLOCK_SOURCE_NONE);
    69c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69c8:	2100      	movs	r1, #0
    69ca:	4618      	mov	r0, r3
    69cc:	f7ff fd26 	bl	641c <Ftm_Gpt_Ip_SetClockSource>
    /* clear FTM Enable bit */
    Ftm_Gpt_Ip_SetEnFtmModule(instance, FALSE);
    69d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69d4:	2100      	movs	r1, #0
    69d6:	4618      	mov	r0, r3
    69d8:	f7ff fd6a 	bl	64b0 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* clearde freeze bits */
    Ftm_Gpt_Ip_SetFreezeBits(instance, FALSE);
    69dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69e0:	2100      	movs	r1, #0
    69e2:	4618      	mov	r0, r3
    69e4:	f7ff fc68 	bl	62b8 <Ftm_Gpt_Ip_SetFreezeBits>
    /* Set Counter register to 0 and Initial Counter Value to 0 */
    Ftm_Gpt_Ip_SetCounterInitVal(instance, 0U);
    69e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69ec:	2100      	movs	r1, #0
    69ee:	4618      	mov	r0, r3
    69f0:	f7ff fc92 	bl	6318 <Ftm_Gpt_Ip_SetCounterInitVal>
    Ftm_Gpt_Ip_SetCounter(instance, 0U);
    69f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69f8:	2100      	movs	r1, #0
    69fa:	4618      	mov	r0, r3
    69fc:	f7ff fca2 	bl	6344 <Ftm_Gpt_Ip_SetCounter>
    /* set FTM instance status to uninitialized */
    Ftm_Gpt_Ip_u32InstanceState[instance] = FTM_GPT_IP_STATUS_UNINITIALIZED;
    6a00:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a04:	4a03      	ldr	r2, [pc, #12]	; (6a14 <Ftm_Gpt_Ip_Deinit+0x94>)
    6a06:	2100      	movs	r1, #0
    6a08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    6a0c:	bf00      	nop
    6a0e:	b005      	add	sp, #20
    6a10:	f85d fb04 	ldr.w	pc, [sp], #4
    6a14:	1fff8dc8 	.word	0x1fff8dc8

00006a18 <Ftm_Gpt_Ip_StartCounting>:
* @return        void
* @pre           The driver needs to be initialized. This function is called for starting the FTM timer channel.
* @implements    Ftm_Gpt_Ip_StartCounting_Activity
*/
void Ftm_Gpt_Ip_StartCounting(uint8 instance, uint8 channel, uint16 compareValue)
{
    6a18:	b500      	push	{lr}
    6a1a:	b085      	sub	sp, #20
    6a1c:	4603      	mov	r3, r0
    6a1e:	f88d 3007 	strb.w	r3, [sp, #7]
    6a22:	460b      	mov	r3, r1
    6a24:	f88d 3006 	strb.w	r3, [sp, #6]
    6a28:	4613      	mov	r3, r2
    6a2a:	f8ad 3004 	strh.w	r3, [sp, #4]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
    DevAssert(FTM_INSTANCE_COUNT > instance);
    DevAssert(FTM_CONTROLS_COUNT > channel);
#endif
    uint32 counterValue;
    uint32 currentCntValue = Ftm_Gpt_Ip_GetCntValue(instance);
    6a2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a32:	4618      	mov	r0, r3
    6a34:	f7ff fc18 	bl	6268 <Ftm_Gpt_Ip_GetCntValue>
    6a38:	9002      	str	r0, [sp, #8]

    if ((uint32)(currentCntValue + compareValue) > FTM_CNT_MAX_VALUE)
    6a3a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6a3e:	9b02      	ldr	r3, [sp, #8]
    6a40:	4413      	add	r3, r2
    6a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    6a46:	d308      	bcc.n	6a5a <Ftm_Gpt_Ip_StartCounting+0x42>
    {
        counterValue = (uint32)(compareValue - (FTM_CNT_MAX_VALUE - currentCntValue));
    6a48:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6a4c:	9b02      	ldr	r3, [sp, #8]
    6a4e:	4413      	add	r3, r2
    6a50:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
    6a54:	3bff      	subs	r3, #255	; 0xff
    6a56:	9303      	str	r3, [sp, #12]
    6a58:	e004      	b.n	6a64 <Ftm_Gpt_Ip_StartCounting+0x4c>
    }
    else
    {
        counterValue = (uint32)(currentCntValue + compareValue);
    6a5a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6a5e:	9a02      	ldr	r2, [sp, #8]
    6a60:	4413      	add	r3, r2
    6a62:	9303      	str	r3, [sp, #12]
    }
    /* Set new compare value */
    Ftm_Gpt_Ip_SetCompareValue(instance, channel, counterValue);
    6a64:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6a68:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a6c:	9a03      	ldr	r2, [sp, #12]
    6a6e:	4618      	mov	r0, r3
    6a70:	f7ff fd54 	bl	651c <Ftm_Gpt_Ip_SetCompareValue>
    /* Save compare value */
    Ftm_Gpt_Ip_u32TargetValue[instance][channel] = compareValue;
    6a74:	f89d 1007 	ldrb.w	r1, [sp, #7]
    6a78:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6a7c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6a80:	480c      	ldr	r0, [pc, #48]	; (6ab4 <Ftm_Gpt_Ip_StartCounting+0x9c>)
    6a82:	00c9      	lsls	r1, r1, #3
    6a84:	440b      	add	r3, r1
    6a86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    /* Clear CHF flag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance,channel);
    6a8a:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6a8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a92:	4611      	mov	r1, r2
    6a94:	4618      	mov	r0, r3
    6a96:	f7ff fc6b 	bl	6370 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Enable interrupt */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, TRUE);
    6a9a:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6a9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6aa2:	2201      	movs	r2, #1
    6aa4:	4618      	mov	r0, r3
    6aa6:	f7ff fc89 	bl	63bc <Ftm_Gpt_Ip_SetChannelEnableInterrupt>

}
    6aaa:	bf00      	nop
    6aac:	b005      	add	sp, #20
    6aae:	f85d fb04 	ldr.w	pc, [sp], #4
    6ab2:	bf00      	nop
    6ab4:	1fff8d48 	.word	0x1fff8d48

00006ab8 <Ftm_Gpt_Ip_StartTimer>:
 *                  - enables the FTM counter
 * @pre           The driver needs to be initialized.
 * @implements    Ftm_Gpt_Ip_StartTimer_Activity
 */
void Ftm_Gpt_Ip_StartTimer(uint8 instance, uint16 counterValue)
{
    6ab8:	b500      	push	{lr}
    6aba:	b083      	sub	sp, #12
    6abc:	4603      	mov	r3, r0
    6abe:	460a      	mov	r2, r1
    6ac0:	f88d 3007 	strb.w	r3, [sp, #7]
    6ac4:	4613      	mov	r3, r2
    6ac6:	f8ad 3004 	strh.w	r3, [sp, #4]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
    DevAssert(FTM_INSTANCE_COUNT > instance);
#endif
    if (instance < FTM_INSTANCE_COUNT)
    6aca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ace:	2b03      	cmp	r3, #3
    6ad0:	d814      	bhi.n	6afc <Ftm_Gpt_Ip_StartTimer+0x44>
    {
        if (FTM_GPT_IP_STATUS_INITIALIZED == Ftm_Gpt_Ip_u32InstanceState[instance])
    6ad2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ad6:	4a0b      	ldr	r2, [pc, #44]	; (6b04 <Ftm_Gpt_Ip_StartTimer+0x4c>)
    6ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6adc:	2b01      	cmp	r3, #1
    6ade:	d10d      	bne.n	6afc <Ftm_Gpt_Ip_StartTimer+0x44>
        {
            /* Set the new value counter */
            Ftm_Gpt_Ip_SetCounterInitVal(instance, counterValue);
    6ae0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6ae4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ae8:	4611      	mov	r1, r2
    6aea:	4618      	mov	r0, r3
    6aec:	f7ff fc14 	bl	6318 <Ftm_Gpt_Ip_SetCounterInitVal>
            /* set FTM Enable bit */
            Ftm_Gpt_Ip_SetEnFtmModule(instance, TRUE);
    6af0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6af4:	2101      	movs	r1, #1
    6af6:	4618      	mov	r0, r3
    6af8:	f7ff fcda 	bl	64b0 <Ftm_Gpt_Ip_SetEnFtmModule>
        }
    }
}
    6afc:	bf00      	nop
    6afe:	b003      	add	sp, #12
    6b00:	f85d fb04 	ldr.w	pc, [sp], #4
    6b04:	1fff8dc8 	.word	0x1fff8dc8

00006b08 <Ftm_Gpt_Ip_StopTimer>:
* @return        void
* @pre           The driver needs to be initialized. This function is called for stoping the FTM timer channel.
* @implements    Ftm_Gpt_Ip_StopTimer_Activity
*/
void Ftm_Gpt_Ip_StopTimer(uint8 instance)
{
    6b08:	b500      	push	{lr}
    6b0a:	b083      	sub	sp, #12
    6b0c:	4603      	mov	r3, r0
    6b0e:	f88d 3007 	strb.w	r3, [sp, #7]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
DevAssert(FTM_INSTANCE_COUNT > instance);
#endif
    /* clear FTM Enable bit */
    Ftm_Gpt_Ip_SetEnFtmModule(instance, FALSE);
    6b12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b16:	2100      	movs	r1, #0
    6b18:	4618      	mov	r0, r3
    6b1a:	f7ff fcc9 	bl	64b0 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* Set clock source as 'No clock'. This in effect disables the FTM counter */
    Ftm_Gpt_Ip_SetClockSource(instance, FTM_GPT_IP_CLOCK_SOURCE_NONE);
    6b1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b22:	2100      	movs	r1, #0
    6b24:	4618      	mov	r0, r3
    6b26:	f7ff fc79 	bl	641c <Ftm_Gpt_Ip_SetClockSource>
}
    6b2a:	bf00      	nop
    6b2c:	b003      	add	sp, #12
    6b2e:	f85d fb04 	ldr.w	pc, [sp], #4

00006b32 <Ftm_Gpt_Ip_EnableChannelInterrupt>:
* @return       void
* @pre          The driver needs to be initialized.
* @implements   Ftm_Gpt_Ip_EnableChannelInterrupt_Activity
*/
void Ftm_Gpt_Ip_EnableChannelInterrupt(uint8 instance, uint8 channel)
{
    6b32:	b500      	push	{lr}
    6b34:	b083      	sub	sp, #12
    6b36:	4603      	mov	r3, r0
    6b38:	460a      	mov	r2, r1
    6b3a:	f88d 3007 	strb.w	r3, [sp, #7]
    6b3e:	4613      	mov	r3, r2
    6b40:	f88d 3006 	strb.w	r3, [sp, #6]
DevAssert(FTM_INSTANCE_COUNT > instance);
DevAssert(FTM_CONTROLS_COUNT > channel);
#endif

     /* Clear interrupt flag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6b44:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6b48:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b4c:	4611      	mov	r1, r2
    6b4e:	4618      	mov	r0, r3
    6b50:	f7ff fc0e 	bl	6370 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Enable channel interrupt */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, TRUE);
    6b54:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6b58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b5c:	2201      	movs	r2, #1
    6b5e:	4618      	mov	r0, r3
    6b60:	f7ff fc2c 	bl	63bc <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
}
    6b64:	bf00      	nop
    6b66:	b003      	add	sp, #12
    6b68:	f85d fb04 	ldr.w	pc, [sp], #4

00006b6c <Ftm_Gpt_Ip_DisableChannelInterrupt>:
* @return        void
* @pre           The driver needs to be initialized.
* @implements    Ftm_Gpt_Ip_DisableChannelInterrupt_Activity
*/
void Ftm_Gpt_Ip_DisableChannelInterrupt(uint8 instance, uint8 channel)
{
    6b6c:	b500      	push	{lr}
    6b6e:	b083      	sub	sp, #12
    6b70:	4603      	mov	r3, r0
    6b72:	460a      	mov	r2, r1
    6b74:	f88d 3007 	strb.w	r3, [sp, #7]
    6b78:	4613      	mov	r3, r2
    6b7a:	f88d 3006 	strb.w	r3, [sp, #6]
DevAssert(FTM_INSTANCE_COUNT > instance);
DevAssert(FTM_CONTROLS_COUNT > channel);
#endif

    /* Disable interrupt */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, FALSE);
    6b7e:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6b82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b86:	2200      	movs	r2, #0
    6b88:	4618      	mov	r0, r3
    6b8a:	f7ff fc17 	bl	63bc <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear interrupt flag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6b8e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6b92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b96:	4611      	mov	r1, r2
    6b98:	4618      	mov	r0, r3
    6b9a:	f7ff fbe9 	bl	6370 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
}
    6b9e:	bf00      	nop
    6ba0:	b003      	add	sp, #12
    6ba2:	f85d fb04 	ldr.w	pc, [sp], #4

00006ba6 <Ftm_Gpt_Ip_SetHalfCycleReloadPoint>:
* @return
* @pre           The driver needs to be initialized.
* @implements    Ftm_Gpt_Ip_SetHalfCycleReloadPoint_Activity
*/
void Ftm_Gpt_Ip_SetHalfCycleReloadPoint(uint8 instance, uint16 reloadPoint)
{
    6ba6:	b500      	push	{lr}
    6ba8:	b083      	sub	sp, #12
    6baa:	4603      	mov	r3, r0
    6bac:	460a      	mov	r2, r1
    6bae:	f88d 3007 	strb.w	r3, [sp, #7]
    6bb2:	4613      	mov	r3, r2
    6bb4:	f8ad 3004 	strh.w	r3, [sp, #4]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
DevAssert(FTM_INSTANCE_COUNT > instance);
#endif
    Ftm_Gpt_Ip_SetHalfCycleValue(ftmGptBase[instance], reloadPoint);
    6bb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bbc:	4a06      	ldr	r2, [pc, #24]	; (6bd8 <Ftm_Gpt_Ip_SetHalfCycleReloadPoint+0x32>)
    6bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bc2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6bc6:	4611      	mov	r1, r2
    6bc8:	4618      	mov	r0, r3
    6bca:	f7ff fd21 	bl	6610 <Ftm_Gpt_Ip_SetHalfCycleValue>
}
    6bce:	bf00      	nop
    6bd0:	b003      	add	sp, #12
    6bd2:	f85d fb04 	ldr.w	pc, [sp], #4
    6bd6:	bf00      	nop
    6bd8:	0000bffc 	.word	0x0000bffc

00006bdc <Ftm_Gpt_Ip_StartPredefTimer>:
* @param[in]  bFreezeEnable   enables/disables freeze bits
* @return     void
* @pre        The driver needs to be initialized
*/
void Ftm_Gpt_Ip_StartPredefTimer (uint8 instance,uint8 channel, uint8 uPrescaler, uint8 clocksource, boolean bFreezeEnable)
{
    6bdc:	b510      	push	{r4, lr}
    6bde:	b082      	sub	sp, #8
    6be0:	4604      	mov	r4, r0
    6be2:	4608      	mov	r0, r1
    6be4:	4611      	mov	r1, r2
    6be6:	461a      	mov	r2, r3
    6be8:	4623      	mov	r3, r4
    6bea:	f88d 3007 	strb.w	r3, [sp, #7]
    6bee:	4603      	mov	r3, r0
    6bf0:	f88d 3006 	strb.w	r3, [sp, #6]
    6bf4:	460b      	mov	r3, r1
    6bf6:	f88d 3005 	strb.w	r3, [sp, #5]
    6bfa:	4613      	mov	r3, r2
    6bfc:	f88d 3004 	strb.w	r3, [sp, #4]

    /* Enable register access from user mode, if enabled from configuration file */
    Call_Ftm_Gpt_Ip_SetUserAccessAllowed((uint32)ftmGptBase[instance]);

    /* Disable all interrupts on this channel */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, FALSE);
    6c00:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6c04:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c08:	2200      	movs	r2, #0
    6c0a:	4618      	mov	r0, r3
    6c0c:	f7ff fbd6 	bl	63bc <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear interrupt flags */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6c10:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6c14:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c18:	4611      	mov	r1, r2
    6c1a:	4618      	mov	r0, r3
    6c1c:	f7ff fba8 	bl	6370 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Disable TOIE flags */
    ftmGptBase[instance]-> SC &= (~(FTM_SC_TOIE_MASK));
    6c20:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c24:	4a35      	ldr	r2, [pc, #212]	; (6cfc <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c2a:	681a      	ldr	r2, [r3, #0]
    6c2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c30:	4932      	ldr	r1, [pc, #200]	; (6cfc <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    6c36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    6c3a:	601a      	str	r2, [r3, #0]
    /* Configure FTM as a Free-Running Timer by setting FTMEN=1, CTNIN=0, MOD=0xFFFF, QUADEN=0, CPWMS=0*/
    Ftm_Gpt_Ip_SetEnFtmModule(instance, TRUE);
    6c3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c40:	2101      	movs	r1, #1
    6c42:	4618      	mov	r0, r3
    6c44:	f7ff fc34 	bl	64b0 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* Initial Counter Value to 0 */
    Ftm_Gpt_Ip_SetCounterInitVal(instance, 0U);
    6c48:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c4c:	2100      	movs	r1, #0
    6c4e:	4618      	mov	r0, r3
    6c50:	f7ff fb62 	bl	6318 <Ftm_Gpt_Ip_SetCounterInitVal>
    /* write the Ftm Modulo Register with 0xFFFF */
    Ftm_Gpt_Ip_WriteModulo(instance, 0xFFFFU);
    6c54:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c58:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6c5c:	4618      	mov	r0, r3
    6c5e:	f7ff fc77 	bl	6550 <Ftm_Gpt_Ip_WriteModulo>
    /* Set Compare Value register to 0xFFFF */
    Ftm_Gpt_Ip_SetCompareValue(instance, channel, 0xFFFFU);
    6c62:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6c66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6c6e:	4618      	mov	r0, r3
    6c70:	f7ff fc54 	bl	651c <Ftm_Gpt_Ip_SetCompareValue>
    /* Enter EA_28*/
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26();
    6c74:	f001 ffc2 	bl	8bfc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26>
    /* Clear bit QUADEN */
    ftmGptBase[instance]->QDCTRL &= (~(FTM_QDCTRL_QUADEN_MASK));
    6c78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c7c:	4a1f      	ldr	r2, [pc, #124]	; (6cfc <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c82:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    6c86:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c8a:	491c      	ldr	r1, [pc, #112]	; (6cfc <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    6c90:	f022 0201 	bic.w	r2, r2, #1
    6c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    /* Clear bit CPWMS */
    ftmGptBase[instance]->SC &= (~(FTM_SC_CPWMS_MASK));
    6c98:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c9c:	4a17      	ldr	r2, [pc, #92]	; (6cfc <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ca2:	681a      	ldr	r2, [r3, #0]
    6ca4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ca8:	4914      	ldr	r1, [pc, #80]	; (6cfc <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6caa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    6cae:	f022 0220 	bic.w	r2, r2, #32
    6cb2:	601a      	str	r2, [r3, #0]
    /* Exit EA_28*/
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26();
    6cb4:	f001 ffce 	bl	8c54 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26>

    /* Configure Predef Timer */
    Ftm_Gpt_Ip_SetPrescaler(instance, uPrescaler);
    6cb8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6cbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cc0:	4611      	mov	r1, r2
    6cc2:	4618      	mov	r0, r3
    6cc4:	f7ff fbce 	bl	6464 <Ftm_Gpt_Ip_SetPrescaler>
    /* Set FTM counter clock source */
    Ftm_Gpt_Ip_SetClockSource(instance, (Ftm_Gpt_Ip_ClockSource)clocksource);
    6cc8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    6ccc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cd0:	4611      	mov	r1, r2
    6cd2:	4618      	mov	r0, r3
    6cd4:	f7ff fba2 	bl	641c <Ftm_Gpt_Ip_SetClockSource>
    /* Set freeze bits */
    Ftm_Gpt_Ip_SetFreezeBits(instance, bFreezeEnable);
    6cd8:	f89d 2010 	ldrb.w	r2, [sp, #16]
    6cdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ce0:	4611      	mov	r1, r2
    6ce2:	4618      	mov	r0, r3
    6ce4:	f7ff fae8 	bl	62b8 <Ftm_Gpt_Ip_SetFreezeBits>
    /* Intialize FTM timer by writing any value to CNT register when CLKS not equal 0 */
    ftmGptBase[instance]->CNT = (uint32)(((uint32)1U << FTM_CNT_COUNT_SHIFT) & FTM_CNT_COUNT_MASK);
    6ce8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cec:	4a03      	ldr	r2, [pc, #12]	; (6cfc <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cf2:	2201      	movs	r2, #1
    6cf4:	605a      	str	r2, [r3, #4]
}
    6cf6:	bf00      	nop
    6cf8:	b002      	add	sp, #8
    6cfa:	bd10      	pop	{r4, pc}
    6cfc:	0000bffc 	.word	0x0000bffc

00006d00 <Ftm_Gpt_Ip_StopPredefTimer>:
* @return     void
* @pre        The driver needs to be initialized
*
*/
void Ftm_Gpt_Ip_StopPredefTimer (uint8 instance, uint8 channel)
{
    6d00:	b500      	push	{lr}
    6d02:	b083      	sub	sp, #12
    6d04:	4603      	mov	r3, r0
    6d06:	460a      	mov	r2, r1
    6d08:	f88d 3007 	strb.w	r3, [sp, #7]
    6d0c:	4613      	mov	r3, r2
    6d0e:	f88d 3006 	strb.w	r3, [sp, #6]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
    DevAssert(FTM_INSTANCE_COUNT > instance);
    DevAssert(FTM_CONTROLS_COUNT > channel);
#endif
    /* Set clock source as 'No clock'. This in effect disables the FTM counter */
    Ftm_Gpt_Ip_SetClockSource(instance, FTM_GPT_IP_CLOCK_SOURCE_NONE);
    6d12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d16:	2100      	movs	r1, #0
    6d18:	4618      	mov	r0, r3
    6d1a:	f7ff fb7f 	bl	641c <Ftm_Gpt_Ip_SetClockSource>
    /* Disable all interrupts on this channel */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, FALSE);
    6d1e:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6d22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d26:	2200      	movs	r2, #0
    6d28:	4618      	mov	r0, r3
    6d2a:	f7ff fb47 	bl	63bc <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear interrupt flags */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6d2e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6d32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d36:	4611      	mov	r1, r2
    6d38:	4618      	mov	r0, r3
    6d3a:	f7ff fb19 	bl	6370 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* clear FTM Enable bit */
    Ftm_Gpt_Ip_SetEnFtmModule(instance, FALSE);
    6d3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d42:	2100      	movs	r1, #0
    6d44:	4618      	mov	r0, r3
    6d46:	f7ff fbb3 	bl	64b0 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* Set Counter register to 0 and Initial Counter Value to 0 */
    Ftm_Gpt_Ip_SetCounterInitVal(instance, 0U);
    6d4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d4e:	2100      	movs	r1, #0
    6d50:	4618      	mov	r0, r3
    6d52:	f7ff fae1 	bl	6318 <Ftm_Gpt_Ip_SetCounterInitVal>
    Ftm_Gpt_Ip_SetCounter(instance, 0U);
    6d56:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d5a:	2100      	movs	r1, #0
    6d5c:	4618      	mov	r0, r3
    6d5e:	f7ff faf1 	bl	6344 <Ftm_Gpt_Ip_SetCounter>
    Ftm_Gpt_Ip_SetCompareValue(instance, channel, 0U);
    6d62:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6d66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d6a:	2200      	movs	r2, #0
    6d6c:	4618      	mov	r0, r3
    6d6e:	f7ff fbd5 	bl	651c <Ftm_Gpt_Ip_SetCompareValue>
    Ftm_Gpt_Ip_WriteModulo(instance, 0U );
    6d72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d76:	2100      	movs	r1, #0
    6d78:	4618      	mov	r0, r3
    6d7a:	f7ff fbe9 	bl	6550 <Ftm_Gpt_Ip_WriteModulo>
    /* Set bit MSA */
    Ftm_Gpt_Ip_ModeSelectA(instance, channel, FALSE);
    6d7e:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6d82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d86:	2200      	movs	r2, #0
    6d88:	4618      	mov	r0, r3
    6d8a:	f7ff fbf7 	bl	657c <Ftm_Gpt_Ip_ModeSelectA>
}
    6d8e:	bf00      	nop
    6d90:	b003      	add	sp, #12
    6d92:	f85d fb04 	ldr.w	pc, [sp], #4

00006d96 <FTM_1_CH_0_CH_1_ISR>:
/**
 * @brief          Independent interrupt handler.
 * @details        Interrupt handler for FTM module 1 channel 0 - channel 1.
 */
ISR(FTM_1_CH_0_CH_1_ISR)
{
    6d96:	b500      	push	{lr}
    6d98:	b083      	sub	sp, #12
    uint8 channel = 0U;
    6d9a:	2300      	movs	r3, #0
    6d9c:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 instance = 1U;
    6da0:	2301      	movs	r3, #1
    6da2:	f88d 3006 	strb.w	r3, [sp, #6]

    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6da6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6daa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6dae:	4611      	mov	r1, r2
    6db0:	4618      	mov	r0, r3
    6db2:	f7ff fc59 	bl	6668 <Ftm_Gpt_Ip_GetChannelEventStatus>
    6db6:	4603      	mov	r3, r0
    6db8:	2b00      	cmp	r3, #0
    6dba:	d007      	beq.n	6dcc <FTM_1_CH_0_CH_1_ISR+0x36>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6dbc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6dc0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6dc4:	4611      	mov	r1, r2
    6dc6:	4618      	mov	r0, r3
    6dc8:	f7ff fc6c 	bl	66a4 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    channel++;
    6dcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6dd0:	3301      	adds	r3, #1
    6dd2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6dd6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6dda:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6dde:	4611      	mov	r1, r2
    6de0:	4618      	mov	r0, r3
    6de2:	f7ff fc41 	bl	6668 <Ftm_Gpt_Ip_GetChannelEventStatus>
    6de6:	4603      	mov	r3, r0
    6de8:	2b00      	cmp	r3, #0
    6dea:	d007      	beq.n	6dfc <FTM_1_CH_0_CH_1_ISR+0x66>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6dec:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6df0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6df4:	4611      	mov	r1, r2
    6df6:	4618      	mov	r0, r3
    6df8:	f7ff fc54 	bl	66a4 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    EXIT_INTERRUPT();
    6dfc:	f3bf 8f4f 	dsb	sy
}
    6e00:	bf00      	nop
    6e02:	b003      	add	sp, #12
    6e04:	f85d fb04 	ldr.w	pc, [sp], #4

00006e08 <FTM_2_CH_0_CH_1_ISR>:
/**
 * @brief          Independent interrupt handler.
 * @details        Interrupt handler for FTM module 2 channel 0 - channel 1.
 */
ISR(FTM_2_CH_0_CH_1_ISR)
{
    6e08:	b500      	push	{lr}
    6e0a:	b083      	sub	sp, #12
    uint8 channel = 0U;
    6e0c:	2300      	movs	r3, #0
    6e0e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 instance = 2U;
    6e12:	2302      	movs	r3, #2
    6e14:	f88d 3006 	strb.w	r3, [sp, #6]

    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6e18:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e20:	4611      	mov	r1, r2
    6e22:	4618      	mov	r0, r3
    6e24:	f7ff fc20 	bl	6668 <Ftm_Gpt_Ip_GetChannelEventStatus>
    6e28:	4603      	mov	r3, r0
    6e2a:	2b00      	cmp	r3, #0
    6e2c:	d007      	beq.n	6e3e <FTM_2_CH_0_CH_1_ISR+0x36>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6e2e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e32:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e36:	4611      	mov	r1, r2
    6e38:	4618      	mov	r0, r3
    6e3a:	f7ff fc33 	bl	66a4 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    channel++;
    6e3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e42:	3301      	adds	r3, #1
    6e44:	f88d 3007 	strb.w	r3, [sp, #7]
    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6e48:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e4c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e50:	4611      	mov	r1, r2
    6e52:	4618      	mov	r0, r3
    6e54:	f7ff fc08 	bl	6668 <Ftm_Gpt_Ip_GetChannelEventStatus>
    6e58:	4603      	mov	r3, r0
    6e5a:	2b00      	cmp	r3, #0
    6e5c:	d007      	beq.n	6e6e <FTM_2_CH_0_CH_1_ISR+0x66>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6e5e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e62:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e66:	4611      	mov	r1, r2
    6e68:	4618      	mov	r0, r3
    6e6a:	f7ff fc1b 	bl	66a4 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    EXIT_INTERRUPT();
    6e6e:	f3bf 8f4f 	dsb	sy
}
    6e72:	bf00      	nop
    6e74:	b003      	add	sp, #12
    6e76:	f85d fb04 	ldr.w	pc, [sp], #4
    6e7a:	bf00      	nop

00006e7c <Gpt_ValidateChannelStatus>:
(
    uint8 u8ServiceId,
    Gpt_ChannelType channel,
    uint32 coreID
)
{
    6e7c:	b500      	push	{lr}
    6e7e:	b085      	sub	sp, #20
    6e80:	4603      	mov	r3, r0
    6e82:	9200      	str	r2, [sp, #0]
    6e84:	f88d 3007 	strb.w	r3, [sp, #7]
    6e88:	460b      	mov	r3, r1
    6e8a:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType returnValue = (Std_ReturnType)E_NOT_OK;
    6e8e:	2301      	movs	r3, #1
    6e90:	f88d 300f 	strb.w	r3, [sp, #15]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(u8ServiceId, channel, coreID))
    {
#endif
        if(channel < GPT_HW_CHANNEL_NUM)
    6e94:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e98:	2b01      	cmp	r3, #1
    6e9a:	d814      	bhi.n	6ec6 <Gpt_ValidateChannelStatus+0x4a>
                    );
                }
                else
                {
    #else
                    if (GPT_STATUS_RUNNING == Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    6e9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6ea0:	490c      	ldr	r1, [pc, #48]	; (6ed4 <Gpt_ValidateChannelStatus+0x58>)
    6ea2:	9a00      	ldr	r2, [sp, #0]
    6ea4:	0052      	lsls	r2, r2, #1
    6ea6:	4413      	add	r3, r2
    6ea8:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    6eac:	2b04      	cmp	r3, #4
    6eae:	d107      	bne.n	6ec0 <Gpt_ValidateChannelStatus+0x44>
                    {
                        (void)Det_ReportRuntimeError\
    6eb0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6eb4:	230b      	movs	r3, #11
    6eb6:	2100      	movs	r1, #0
    6eb8:	2064      	movs	r0, #100	; 0x64
    6eba:	f004 fc51 	bl	b760 <Det_ReportRuntimeError>
    6ebe:	e002      	b.n	6ec6 <Gpt_ValidateChannelStatus+0x4a>
                        );
                    }
                    else
                    {
    #endif
                        returnValue = (Std_ReturnType)E_OK;
    6ec0:	2300      	movs	r3, #0
    6ec2:	f88d 300f 	strb.w	r3, [sp, #15]
    #endif
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
    return returnValue;
    6ec6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6eca:	4618      	mov	r0, r3
    6ecc:	b005      	add	sp, #20
    6ece:	f85d fb04 	ldr.w	pc, [sp], #4
    6ed2:	bf00      	nop
    6ed4:	1fff8fe0 	.word	0x1fff8fe0

00006ed8 <Gpt_ValidateMode>:
static inline Std_ReturnType Gpt_ValidateMode
(
	uint8 u8ServiceId,
	uint32 coreID
)
{
    6ed8:	b500      	push	{lr}
    6eda:	b085      	sub	sp, #20
    6edc:	4603      	mov	r3, r0
    6ede:	9100      	str	r1, [sp, #0]
    6ee0:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType returnValue;
    if (GPT_MODE_SLEEP == Gpt_eMode[coreID])
    6ee4:	4a0c      	ldr	r2, [pc, #48]	; (6f18 <Gpt_ValidateMode+0x40>)
    6ee6:	9b00      	ldr	r3, [sp, #0]
    6ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6eec:	2b01      	cmp	r3, #1
    6eee:	d10a      	bne.n	6f06 <Gpt_ValidateMode+0x2e>
    {
        (void)Det_ReportRuntimeError\
    6ef0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6ef4:	230c      	movs	r3, #12
    6ef6:	2100      	movs	r1, #0
    6ef8:	2064      	movs	r0, #100	; 0x64
    6efa:	f004 fc31 	bl	b760 <Det_ReportRuntimeError>
            (uint16)GPT_MODULE_ID,\
            (uint8)GPT_INSTANCE_ID,\
            (uint8)u8ServiceId,\
            (uint8)GPT_E_MODE\
        );
		returnValue = (Std_ReturnType)E_NOT_OK;
    6efe:	2301      	movs	r3, #1
    6f00:	f88d 300f 	strb.w	r3, [sp, #15]
    6f04:	e002      	b.n	6f0c <Gpt_ValidateMode+0x34>
    }
    else
    {
        returnValue = (Std_ReturnType)E_OK;
    6f06:	2300      	movs	r3, #0
    6f08:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return returnValue;
    6f0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6f10:	4618      	mov	r0, r3
    6f12:	b005      	add	sp, #20
    6f14:	f85d fb04 	ldr.w	pc, [sp], #4
    6f18:	1fff8fd8 	.word	0x1fff8fd8

00006f1c <Gpt_ConvertChannelIndexToChannel>:
 *
 * */
static inline Gpt_ChannelType Gpt_ConvertChannelIndexToChannel(Gpt_ChannelType ChannelIndex,
                                                                              uint32 coreID
                                                                              )
{
    6f1c:	b084      	sub	sp, #16
    6f1e:	4603      	mov	r3, r0
    6f20:	9100      	str	r1, [sp, #0]
    6f22:	f88d 3007 	strb.w	r3, [sp, #7]
    Gpt_ChannelType Channel;

    for (Channel = 0U; Channel < GPT_HW_CHANNEL_NUM; ++Channel)
    6f26:	2300      	movs	r3, #0
    6f28:	f88d 300f 	strb.w	r3, [sp, #15]
    6f2c:	e010      	b.n	6f50 <Gpt_ConvertChannelIndexToChannel+0x34>
    {
        if(ChannelIndex == (*Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap)[Channel])
    6f2e:	4a0e      	ldr	r2, [pc, #56]	; (6f68 <Gpt_ConvertChannelIndexToChannel+0x4c>)
    6f30:	9b00      	ldr	r3, [sp, #0]
    6f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f36:	695a      	ldr	r2, [r3, #20]
    6f38:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6f3c:	5cd3      	ldrb	r3, [r2, r3]
    6f3e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6f42:	429a      	cmp	r2, r3
    6f44:	d009      	beq.n	6f5a <Gpt_ConvertChannelIndexToChannel+0x3e>
    for (Channel = 0U; Channel < GPT_HW_CHANNEL_NUM; ++Channel)
    6f46:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6f4a:	3301      	adds	r3, #1
    6f4c:	f88d 300f 	strb.w	r3, [sp, #15]
    6f50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6f54:	2b01      	cmp	r3, #1
    6f56:	d9ea      	bls.n	6f2e <Gpt_ConvertChannelIndexToChannel+0x12>
    6f58:	e000      	b.n	6f5c <Gpt_ConvertChannelIndexToChannel+0x40>
        {
            break;
    6f5a:	bf00      	nop
        }
    }
    return Channel;
    6f5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6f60:	4618      	mov	r0, r3
    6f62:	b004      	add	sp, #16
    6f64:	4770      	bx	lr
    6f66:	bf00      	nop
    6f68:	1fff8fdc 	.word	0x1fff8fdc

00006f6c <Gpt_CheckStatusNotificationEnabled>:
 * @pre         Gpt_Init,  must be called before.
 *
 *
 * */
static inline void Gpt_CheckStatusNotificationEnabled(uint32 coreID)
{
    6f6c:	b500      	push	{lr}
    6f6e:	b085      	sub	sp, #20
    6f70:	9001      	str	r0, [sp, #4]
    Gpt_ChannelType channel;
    Gpt_ChannelType ChannelIndex;

    /*Implements the behaviour for normal mode*/
    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    6f72:	2300      	movs	r3, #0
    6f74:	f88d 300f 	strb.w	r3, [sp, #15]
    6f78:	e059      	b.n	702e <Gpt_CheckStatusNotificationEnabled+0xc2>
    {
        channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    6f7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6f7e:	9901      	ldr	r1, [sp, #4]
    6f80:	4618      	mov	r0, r3
    6f82:	f7ff ffcb 	bl	6f1c <Gpt_ConvertChannelIndexToChannel>
    6f86:	4603      	mov	r3, r0
    6f88:	f88d 300e 	strb.w	r3, [sp, #14]
        if(channel < GPT_HW_CHANNEL_NUM)
    6f8c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f90:	2b01      	cmp	r3, #1
    6f92:	d847      	bhi.n	7024 <Gpt_CheckStatusNotificationEnabled+0xb8>
        {
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
            if (TRUE == Gpt_aChannelInfo[coreID][channel].bNotificationEnabled)
    6f94:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f98:	492c      	ldr	r1, [pc, #176]	; (704c <Gpt_CheckStatusNotificationEnabled+0xe0>)
    6f9a:	9a01      	ldr	r2, [sp, #4]
    6f9c:	0052      	lsls	r2, r2, #1
    6f9e:	4413      	add	r3, r2
    6fa0:	00db      	lsls	r3, r3, #3
    6fa2:	440b      	add	r3, r1
    6fa4:	791b      	ldrb	r3, [r3, #4]
    6fa6:	2b00      	cmp	r3, #0
    6fa8:	d011      	beq.n	6fce <Gpt_CheckStatusNotificationEnabled+0x62>
            {
                /* Enable hardware interrupts */
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    6faa:	4a29      	ldr	r2, [pc, #164]	; (7050 <Gpt_CheckStatusNotificationEnabled+0xe4>)
    6fac:	9b01      	ldr	r3, [sp, #4]
    6fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fb2:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    6fb4:	f89d 200f 	ldrb.w	r2, [sp, #15]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    6fb8:	4613      	mov	r3, r2
    6fba:	005b      	lsls	r3, r3, #1
    6fbc:	4413      	add	r3, r2
    6fbe:	00db      	lsls	r3, r3, #3
    6fc0:	440b      	add	r3, r1
    6fc2:	3314      	adds	r3, #20
    6fc4:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    6fc6:	4618      	mov	r0, r3
    6fc8:	f000 ff7a 	bl	7ec0 <Gpt_Ipw_EnableInterrupt>
    6fcc:	e02a      	b.n	7024 <Gpt_CheckStatusNotificationEnabled+0xb8>
            else
            {
#endif
                /* Disable hardware interrupts if the channel is not running in the ONE-SHOT mode.
                This is needed because the channel state is updated by ISR for ONE-SHOT mode */
                if((GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus) || \
    6fce:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6fd2:	491e      	ldr	r1, [pc, #120]	; (704c <Gpt_CheckStatusNotificationEnabled+0xe0>)
    6fd4:	9a01      	ldr	r2, [sp, #4]
    6fd6:	0052      	lsls	r2, r2, #1
    6fd8:	4413      	add	r3, r2
    6fda:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    6fde:	2b04      	cmp	r3, #4
    6fe0:	d10f      	bne.n	7002 <Gpt_CheckStatusNotificationEnabled+0x96>
                    (GPT_CH_MODE_CONTINUOUS == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    6fe2:	4a1b      	ldr	r2, [pc, #108]	; (7050 <Gpt_CheckStatusNotificationEnabled+0xe4>)
    6fe4:	9b01      	ldr	r3, [sp, #4]
    6fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fea:	6859      	ldr	r1, [r3, #4]
    6fec:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6ff0:	4613      	mov	r3, r2
    6ff2:	005b      	lsls	r3, r3, #1
    6ff4:	4413      	add	r3, r2
    6ff6:	00db      	lsls	r3, r3, #3
    6ff8:	440b      	add	r3, r1
    6ffa:	3310      	adds	r3, #16
    6ffc:	681b      	ldr	r3, [r3, #0]
                if((GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus) || \
    6ffe:	2b00      	cmp	r3, #0
    7000:	d110      	bne.n	7024 <Gpt_CheckStatusNotificationEnabled+0xb8>
                    )
                {
                    /*Disable hardware interrupts*/
                    Gpt_Ipw_DisableInterrupt
                    (
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7002:	4a13      	ldr	r2, [pc, #76]	; (7050 <Gpt_CheckStatusNotificationEnabled+0xe4>)
    7004:	9b01      	ldr	r3, [sp, #4]
    7006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    700a:	6859      	ldr	r1, [r3, #4]
                    Gpt_Ipw_DisableInterrupt
    700c:	f89d 200f 	ldrb.w	r2, [sp, #15]
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7010:	4613      	mov	r3, r2
    7012:	005b      	lsls	r3, r3, #1
    7014:	4413      	add	r3, r2
    7016:	00db      	lsls	r3, r3, #3
    7018:	440b      	add	r3, r1
    701a:	3314      	adds	r3, #20
    701c:	681b      	ldr	r3, [r3, #0]
                    Gpt_Ipw_DisableInterrupt
    701e:	4618      	mov	r0, r3
    7020:	f000 ff69 	bl	7ef6 <Gpt_Ipw_DisableInterrupt>
    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7024:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7028:	3301      	adds	r3, #1
    702a:	f88d 300f 	strb.w	r3, [sp, #15]
    702e:	4a08      	ldr	r2, [pc, #32]	; (7050 <Gpt_CheckStatusNotificationEnabled+0xe4>)
    7030:	9b01      	ldr	r3, [sp, #4]
    7032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7036:	781b      	ldrb	r3, [r3, #0]
    7038:	f89d 200f 	ldrb.w	r2, [sp, #15]
    703c:	429a      	cmp	r2, r3
    703e:	d39c      	bcc.n	6f7a <Gpt_CheckStatusNotificationEnabled+0xe>
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
            }
#endif
        }
    }
}
    7040:	bf00      	nop
    7042:	bf00      	nop
    7044:	b005      	add	sp, #20
    7046:	f85d fb04 	ldr.w	pc, [sp], #4
    704a:	bf00      	nop
    704c:	1fff8fe0 	.word	0x1fff8fe0
    7050:	1fff8fdc 	.word	0x1fff8fdc

00007054 <Gpt_CheckStatusWakeupEnabled>:
 * @pre         Gpt_Init, Gpt_SetMode must be called before.
 *
 *
 * */
static inline void Gpt_CheckStatusWakeupEnabled(uint32 coreID)
{
    7054:	b500      	push	{lr}
    7056:	b089      	sub	sp, #36	; 0x24
    7058:	9001      	str	r0, [sp, #4]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    705a:	2300      	movs	r3, #0
    705c:	f88d 3008 	strb.w	r3, [sp, #8]
    7060:	2300      	movs	r3, #0
    7062:	9303      	str	r3, [sp, #12]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    7064:	ab02      	add	r3, sp, #8
    7066:	9306      	str	r3, [sp, #24]
    Gpt_ValueType uElapsedTime = 0U;
    7068:	2300      	movs	r3, #0
    706a:	9305      	str	r3, [sp, #20]
#endif
    Gpt_ChannelType ChannelIndex;
    Gpt_ChannelType channel;

    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    706c:	2300      	movs	r3, #0
    706e:	f88d 301f 	strb.w	r3, [sp, #31]
    7072:	e09e      	b.n	71b2 <Gpt_CheckStatusWakeupEnabled+0x15e>
    {
        channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    7074:	f89d 301f 	ldrb.w	r3, [sp, #31]
    7078:	9901      	ldr	r1, [sp, #4]
    707a:	4618      	mov	r0, r3
    707c:	f7ff ff4e 	bl	6f1c <Gpt_ConvertChannelIndexToChannel>
    7080:	4603      	mov	r3, r0
    7082:	f88d 3013 	strb.w	r3, [sp, #19]
        if(channel < GPT_HW_CHANNEL_NUM)
    7086:	f89d 3013 	ldrb.w	r3, [sp, #19]
    708a:	2b01      	cmp	r3, #1
    708c:	f200 808c 	bhi.w	71a8 <Gpt_CheckStatusWakeupEnabled+0x154>
        {
            if (TRUE == Gpt_aChannelInfo[coreID][channel].bWakeupEnabled)
    7090:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7094:	494e      	ldr	r1, [pc, #312]	; (71d0 <Gpt_CheckStatusWakeupEnabled+0x17c>)
    7096:	9a01      	ldr	r2, [sp, #4]
    7098:	0052      	lsls	r2, r2, #1
    709a:	4413      	add	r3, r2
    709c:	00db      	lsls	r3, r3, #3
    709e:	440b      	add	r3, r1
    70a0:	795b      	ldrb	r3, [r3, #5]
    70a2:	2b00      	cmp	r3, #0
    70a4:	d011      	beq.n	70ca <Gpt_CheckStatusWakeupEnabled+0x76>
            {
                /*Enable hardware interrupts*/
                Gpt_Ipw_EnableInterrupt(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    70a6:	4a4b      	ldr	r2, [pc, #300]	; (71d4 <Gpt_CheckStatusWakeupEnabled+0x180>)
    70a8:	9b01      	ldr	r3, [sp, #4]
    70aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70ae:	6859      	ldr	r1, [r3, #4]
    70b0:	f89d 201f 	ldrb.w	r2, [sp, #31]
    70b4:	4613      	mov	r3, r2
    70b6:	005b      	lsls	r3, r3, #1
    70b8:	4413      	add	r3, r2
    70ba:	00db      	lsls	r3, r3, #3
    70bc:	440b      	add	r3, r1
    70be:	3314      	adds	r3, #20
    70c0:	681b      	ldr	r3, [r3, #0]
    70c2:	4618      	mov	r0, r3
    70c4:	f000 fefc 	bl	7ec0 <Gpt_Ipw_EnableInterrupt>
    70c8:	e06e      	b.n	71a8 <Gpt_CheckStatusWakeupEnabled+0x154>
            }
            else
            {
                /*Disable hardware interrupts*/
                Gpt_Ipw_DisableInterrupt(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    70ca:	4a42      	ldr	r2, [pc, #264]	; (71d4 <Gpt_CheckStatusWakeupEnabled+0x180>)
    70cc:	9b01      	ldr	r3, [sp, #4]
    70ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70d2:	6859      	ldr	r1, [r3, #4]
    70d4:	f89d 201f 	ldrb.w	r2, [sp, #31]
    70d8:	4613      	mov	r3, r2
    70da:	005b      	lsls	r3, r3, #1
    70dc:	4413      	add	r3, r2
    70de:	00db      	lsls	r3, r3, #3
    70e0:	440b      	add	r3, r1
    70e2:	3314      	adds	r3, #20
    70e4:	681b      	ldr	r3, [r3, #0]
    70e6:	4618      	mov	r0, r3
    70e8:	f000 ff05 	bl	7ef6 <Gpt_Ipw_DisableInterrupt>
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                /*Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs
                can change the logical channel state between the checking of logical channel
                state and timestamp retrieval*/
                /* Get the elapsed  time  for later use by other API calls*/
                uElapsedTime = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    70ec:	4a39      	ldr	r2, [pc, #228]	; (71d4 <Gpt_CheckStatusWakeupEnabled+0x180>)
    70ee:	9b01      	ldr	r3, [sp, #4]
    70f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70f4:	6859      	ldr	r1, [r3, #4]
    70f6:	f89d 201f 	ldrb.w	r2, [sp, #31]
    70fa:	4613      	mov	r3, r2
    70fc:	005b      	lsls	r3, r3, #1
    70fe:	4413      	add	r3, r2
    7100:	00db      	lsls	r3, r3, #3
    7102:	440b      	add	r3, r1
    7104:	3314      	adds	r3, #20
    7106:	681b      	ldr	r3, [r3, #0]
    7108:	9906      	ldr	r1, [sp, #24]
    710a:	4618      	mov	r0, r3
    710c:	f000 fead 	bl	7e6a <Gpt_Ipw_GetTimeElapsed>
    7110:	9005      	str	r0, [sp, #20]
#endif

                /*Stop  the running timer*/
                if (GPT_STATUS_RUNNING == Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    7112:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7116:	492e      	ldr	r1, [pc, #184]	; (71d0 <Gpt_CheckStatusWakeupEnabled+0x17c>)
    7118:	9a01      	ldr	r2, [sp, #4]
    711a:	0052      	lsls	r2, r2, #1
    711c:	4413      	add	r3, r2
    711e:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    7122:	2b04      	cmp	r3, #4
    7124:	d140      	bne.n	71a8 <Gpt_CheckStatusWakeupEnabled+0x154>
                {
                    if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    7126:	f89d 3008 	ldrb.w	r3, [sp, #8]
    712a:	2b00      	cmp	r3, #0
    712c:	d019      	beq.n	7162 <Gpt_CheckStatusWakeupEnabled+0x10e>
                        (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    712e:	4a29      	ldr	r2, [pc, #164]	; (71d4 <Gpt_CheckStatusWakeupEnabled+0x180>)
    7130:	9b01      	ldr	r3, [sp, #4]
    7132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7136:	6859      	ldr	r1, [r3, #4]
    7138:	f89d 201f 	ldrb.w	r2, [sp, #31]
    713c:	4613      	mov	r3, r2
    713e:	005b      	lsls	r3, r3, #1
    7140:	4413      	add	r3, r2
    7142:	00db      	lsls	r3, r3, #3
    7144:	440b      	add	r3, r1
    7146:	3310      	adds	r3, #16
    7148:	681b      	ldr	r3, [r3, #0]
                    if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    714a:	2b01      	cmp	r3, #1
    714c:	d109      	bne.n	7162 <Gpt_CheckStatusWakeupEnabled+0x10e>
                        )
                    {
                        /*This action could be executed only when the function is called
                        during a critical section implemented by disabling all interrupts*/
                        /*Set the channel status to EXPIRED*/
                        Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_EXPIRED;
    714e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7152:	491f      	ldr	r1, [pc, #124]	; (71d0 <Gpt_CheckStatusWakeupEnabled+0x17c>)
    7154:	9a01      	ldr	r2, [sp, #4]
    7156:	0052      	lsls	r2, r2, #1
    7158:	4413      	add	r3, r2
    715a:	2203      	movs	r2, #3
    715c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    7160:	e011      	b.n	7186 <Gpt_CheckStatusWakeupEnabled+0x132>
                    }
                    else
                    {
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                        /* Store the stopping time for later use by other API calls*/
                        Gpt_aStopTime[coreID][channel] = uElapsedTime;
    7162:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7166:	491c      	ldr	r1, [pc, #112]	; (71d8 <Gpt_CheckStatusWakeupEnabled+0x184>)
    7168:	9a01      	ldr	r2, [sp, #4]
    716a:	0052      	lsls	r2, r2, #1
    716c:	4413      	add	r3, r2
    716e:	9a05      	ldr	r2, [sp, #20]
    7170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
                        /* Set the channel status to STOPPED*/
                        Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_STOPPED;
    7174:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7178:	4915      	ldr	r1, [pc, #84]	; (71d0 <Gpt_CheckStatusWakeupEnabled+0x17c>)
    717a:	9a01      	ldr	r2, [sp, #4]
    717c:	0052      	lsls	r2, r2, #1
    717e:	4413      	add	r3, r2
    7180:	2202      	movs	r2, #2
    7182:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                    }
                    /* Call low level stop timer */
                    Gpt_Ipw_StopTimer
                    (
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7186:	4a13      	ldr	r2, [pc, #76]	; (71d4 <Gpt_CheckStatusWakeupEnabled+0x180>)
    7188:	9b01      	ldr	r3, [sp, #4]
    718a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    718e:	6859      	ldr	r1, [r3, #4]
                    Gpt_Ipw_StopTimer
    7190:	f89d 201f 	ldrb.w	r2, [sp, #31]
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7194:	4613      	mov	r3, r2
    7196:	005b      	lsls	r3, r3, #1
    7198:	4413      	add	r3, r2
    719a:	00db      	lsls	r3, r3, #3
    719c:	440b      	add	r3, r1
    719e:	3314      	adds	r3, #20
    71a0:	681b      	ldr	r3, [r3, #0]
                    Gpt_Ipw_StopTimer
    71a2:	4618      	mov	r0, r3
    71a4:	f000 fe77 	bl	7e96 <Gpt_Ipw_StopTimer>
    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    71a8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    71ac:	3301      	adds	r3, #1
    71ae:	f88d 301f 	strb.w	r3, [sp, #31]
    71b2:	4a08      	ldr	r2, [pc, #32]	; (71d4 <Gpt_CheckStatusWakeupEnabled+0x180>)
    71b4:	9b01      	ldr	r3, [sp, #4]
    71b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71ba:	781b      	ldrb	r3, [r3, #0]
    71bc:	f89d 201f 	ldrb.w	r2, [sp, #31]
    71c0:	429a      	cmp	r2, r3
    71c2:	f4ff af57 	bcc.w	7074 <Gpt_CheckStatusWakeupEnabled+0x20>
                    );
                }
            }
        }
    }
}
    71c6:	bf00      	nop
    71c8:	bf00      	nop
    71ca:	b009      	add	sp, #36	; 0x24
    71cc:	f85d fb04 	ldr.w	pc, [sp], #4
    71d0:	1fff8fe0 	.word	0x1fff8fe0
    71d4:	1fff8fdc 	.word	0x1fff8fdc
    71d8:	1fff8ff0 	.word	0x1fff8ff0

000071dc <Gpt_Init>:
*
* @pre            The data structure including the configuration set required for initializing the GPT driver..
* @implements     Gpt_Init_Activity
*/
void Gpt_Init(const Gpt_ConfigType * configPtr)
{
    71dc:	b500      	push	{lr}
    71de:	b087      	sub	sp, #28
    71e0:	9001      	str	r0, [sp, #4]
    Gpt_ChannelType ChannelIndex;
    Gpt_ChannelType channel;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    71e2:	2300      	movs	r3, #0
    71e4:	9304      	str	r3, [sp, #16]
        #else
            Gpt_pConfig[coreID] = &Gpt_Config;
        #endif
            (void)configPtr;
    #else
            Gpt_pConfig[coreID] = configPtr;
    71e6:	493e      	ldr	r1, [pc, #248]	; (72e0 <Gpt_Init+0x104>)
    71e8:	9b04      	ldr	r3, [sp, #16]
    71ea:	9a01      	ldr	r2, [sp, #4]
    71ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    #endif

#if(GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON)
            /*Initialize and Start Predef Timers.*/
            Gpt_Ipw_StartPredefTimer(Gpt_pConfig[coreID]);
    71f0:	4a3b      	ldr	r2, [pc, #236]	; (72e0 <Gpt_Init+0x104>)
    71f2:	9b04      	ldr	r3, [sp, #16]
    71f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71f8:	4618      	mov	r0, r3
    71fa:	f000 fe85 	bl	7f08 <Gpt_Ipw_StartPredefTimer>
#endif
            Gpt_Ipw_InitInstances(Gpt_pConfig[coreID]);
    71fe:	4a38      	ldr	r2, [pc, #224]	; (72e0 <Gpt_Init+0x104>)
    7200:	9b04      	ldr	r3, [sp, #16]
    7202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7206:	4618      	mov	r0, r3
    7208:	f000 fdc4 	bl	7d94 <Gpt_Ipw_InitInstances>

            /*Initialize for each channel the runtime status informations.*/
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    720c:	2300      	movs	r3, #0
    720e:	f88d 3017 	strb.w	r3, [sp, #23]
    7212:	e052      	b.n	72ba <Gpt_Init+0xde>
            {
                channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    7214:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7218:	9904      	ldr	r1, [sp, #16]
    721a:	4618      	mov	r0, r3
    721c:	f7ff fe7e 	bl	6f1c <Gpt_ConvertChannelIndexToChannel>
    7220:	4603      	mov	r3, r0
    7222:	f88d 300f 	strb.w	r3, [sp, #15]
                if(channel < GPT_HW_CHANNEL_NUM)
    7226:	f89d 300f 	ldrb.w	r3, [sp, #15]
    722a:	2b01      	cmp	r3, #1
    722c:	d82f      	bhi.n	728e <Gpt_Init+0xb2>
                {
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
                    /*Disable notification*/
                    Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = FALSE;
    722e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7232:	492c      	ldr	r1, [pc, #176]	; (72e4 <Gpt_Init+0x108>)
    7234:	9a04      	ldr	r2, [sp, #16]
    7236:	0052      	lsls	r2, r2, #1
    7238:	4413      	add	r3, r2
    723a:	00db      	lsls	r3, r3, #3
    723c:	440b      	add	r3, r1
    723e:	2200      	movs	r2, #0
    7240:	711a      	strb	r2, [r3, #4]
#endif

#if ((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON))
                    /*Disable wakeup*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = FALSE;
    7242:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7246:	4927      	ldr	r1, [pc, #156]	; (72e4 <Gpt_Init+0x108>)
    7248:	9a04      	ldr	r2, [sp, #16]
    724a:	0052      	lsls	r2, r2, #1
    724c:	4413      	add	r3, r2
    724e:	00db      	lsls	r3, r3, #3
    7250:	440b      	add	r3, r1
    7252:	2200      	movs	r2, #0
    7254:	715a      	strb	r2, [r3, #5]
                    /*Clear wakeup generation status*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupGenerated = FALSE;
    7256:	f89d 300f 	ldrb.w	r3, [sp, #15]
    725a:	4922      	ldr	r1, [pc, #136]	; (72e4 <Gpt_Init+0x108>)
    725c:	9a04      	ldr	r2, [sp, #16]
    725e:	0052      	lsls	r2, r2, #1
    7260:	4413      	add	r3, r2
    7262:	00db      	lsls	r3, r3, #3
    7264:	440b      	add	r3, r1
    7266:	2200      	movs	r2, #0
    7268:	719a      	strb	r2, [r3, #6]
#endif
                    /* Initialize the running information of the channel*/
                    Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_INITIALIZED;
    726a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    726e:	491d      	ldr	r1, [pc, #116]	; (72e4 <Gpt_Init+0x108>)
    7270:	9a04      	ldr	r2, [sp, #16]
    7272:	0052      	lsls	r2, r2, #1
    7274:	4413      	add	r3, r2
    7276:	2201      	movs	r2, #1
    7278:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                    Gpt_aStopTime[coreID][channel] = 0U;
    727c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7280:	4919      	ldr	r1, [pc, #100]	; (72e8 <Gpt_Init+0x10c>)
    7282:	9a04      	ldr	r2, [sp, #16]
    7284:	0052      	lsls	r2, r2, #1
    7286:	4413      	add	r3, r2
    7288:	2200      	movs	r2, #0
    728a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
                }

                /*Initialize hardware timer channel.*/
                Gpt_Ipw_Init(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    728e:	4a14      	ldr	r2, [pc, #80]	; (72e0 <Gpt_Init+0x104>)
    7290:	9b04      	ldr	r3, [sp, #16]
    7292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7296:	6859      	ldr	r1, [r3, #4]
    7298:	f89d 2017 	ldrb.w	r2, [sp, #23]
    729c:	4613      	mov	r3, r2
    729e:	005b      	lsls	r3, r3, #1
    72a0:	4413      	add	r3, r2
    72a2:	00db      	lsls	r3, r3, #3
    72a4:	440b      	add	r3, r1
    72a6:	3314      	adds	r3, #20
    72a8:	681b      	ldr	r3, [r3, #0]
    72aa:	4618      	mov	r0, r3
    72ac:	f000 fda9 	bl	7e02 <Gpt_Ipw_Init>
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    72b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    72b4:	3301      	adds	r3, #1
    72b6:	f88d 3017 	strb.w	r3, [sp, #23]
    72ba:	4a09      	ldr	r2, [pc, #36]	; (72e0 <Gpt_Init+0x104>)
    72bc:	9b04      	ldr	r3, [sp, #16]
    72be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72c2:	781b      	ldrb	r3, [r3, #0]
    72c4:	f89d 2017 	ldrb.w	r2, [sp, #23]
    72c8:	429a      	cmp	r2, r3
    72ca:	d3a3      	bcc.n	7214 <Gpt_Init+0x38>
            }
#if (((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON)) || \
     (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON) || \
     (GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON))
            /*Set the driver to normal mode*/
            Gpt_eMode[coreID] = GPT_MODE_NORMAL;
    72cc:	4a07      	ldr	r2, [pc, #28]	; (72ec <Gpt_Init+0x110>)
    72ce:	9b04      	ldr	r3, [sp, #16]
    72d0:	2100      	movs	r1, #0
    72d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#endif
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
    return;
    72d6:	bf00      	nop
}
    72d8:	b007      	add	sp, #28
    72da:	f85d fb04 	ldr.w	pc, [sp], #4
    72de:	bf00      	nop
    72e0:	1fff8fdc 	.word	0x1fff8fdc
    72e4:	1fff8fe0 	.word	0x1fff8fe0
    72e8:	1fff8ff0 	.word	0x1fff8ff0
    72ec:	1fff8fd8 	.word	0x1fff8fd8

000072f0 <Gpt_DeInit>:
* @return  void
*
* @implements   Gpt_DeInit_Activity
*/
void Gpt_DeInit(void)
{
    72f0:	b500      	push	{lr}
    72f2:	b085      	sub	sp, #20
    Gpt_ChannelType channel;
    Gpt_ChannelType ChannelIndex;

    Std_ReturnType allChannelStatus = (Std_ReturnType)E_OK;
    72f4:	2300      	movs	r3, #0
    72f6:	f88d 300e 	strb.w	r3, [sp, #14]
    uint32 coreID = (uint32)Gpt_GetCoreID();
    72fa:	2300      	movs	r3, #0
    72fc:	9302      	str	r3, [sp, #8]
    /*Validate if the calling context is valid*/
    if((Std_ReturnType)E_OK == Gpt_ValidateGlobalCall(GPT_DEINIT_ID, coreID))
    {
#endif
        /* Initialize for each channel the runtime status informations.*/
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    72fe:	2300      	movs	r3, #0
    7300:	f88d 300f 	strb.w	r3, [sp, #15]
    7304:	e01b      	b.n	733e <Gpt_DeInit+0x4e>
        {
            channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    7306:	f89d 300f 	ldrb.w	r3, [sp, #15]
    730a:	9902      	ldr	r1, [sp, #8]
    730c:	4618      	mov	r0, r3
    730e:	f7ff fe05 	bl	6f1c <Gpt_ConvertChannelIndexToChannel>
    7312:	4603      	mov	r3, r0
    7314:	f88d 3007 	strb.w	r3, [sp, #7]
            /*Check if the channel is not running.*/
            if((Std_ReturnType)E_NOT_OK == Gpt_ValidateChannelStatus(GPT_DEINIT_ID, channel, coreID))
    7318:	f89d 3007 	ldrb.w	r3, [sp, #7]
    731c:	9a02      	ldr	r2, [sp, #8]
    731e:	4619      	mov	r1, r3
    7320:	2002      	movs	r0, #2
    7322:	f7ff fdab 	bl	6e7c <Gpt_ValidateChannelStatus>
    7326:	4603      	mov	r3, r0
    7328:	2b01      	cmp	r3, #1
    732a:	d103      	bne.n	7334 <Gpt_DeInit+0x44>
            {
                allChannelStatus = (Std_ReturnType)E_NOT_OK;
    732c:	2301      	movs	r3, #1
    732e:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    7332:	e00d      	b.n	7350 <Gpt_DeInit+0x60>
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7334:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7338:	3301      	adds	r3, #1
    733a:	f88d 300f 	strb.w	r3, [sp, #15]
    733e:	4a3f      	ldr	r2, [pc, #252]	; (743c <Gpt_DeInit+0x14c>)
    7340:	9b02      	ldr	r3, [sp, #8]
    7342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7346:	781b      	ldrb	r3, [r3, #0]
    7348:	f89d 200f 	ldrb.w	r2, [sp, #15]
    734c:	429a      	cmp	r2, r3
    734e:	d3da      	bcc.n	7306 <Gpt_DeInit+0x16>
            }
        }

        if((Std_ReturnType)E_OK == allChannelStatus)
    7350:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7354:	2b00      	cmp	r3, #0
    7356:	d16c      	bne.n	7432 <Gpt_DeInit+0x142>
        {
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7358:	2300      	movs	r3, #0
    735a:	f88d 300f 	strb.w	r3, [sp, #15]
    735e:	e052      	b.n	7406 <Gpt_DeInit+0x116>
            {
                channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    7360:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7364:	9902      	ldr	r1, [sp, #8]
    7366:	4618      	mov	r0, r3
    7368:	f7ff fdd8 	bl	6f1c <Gpt_ConvertChannelIndexToChannel>
    736c:	4603      	mov	r3, r0
    736e:	f88d 3007 	strb.w	r3, [sp, #7]
                if(channel < GPT_HW_CHANNEL_NUM)
    7372:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7376:	2b01      	cmp	r3, #1
    7378:	d840      	bhi.n	73fc <Gpt_DeInit+0x10c>
                {
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
                    /*Disable notification*/
                    Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = FALSE;
    737a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    737e:	4930      	ldr	r1, [pc, #192]	; (7440 <Gpt_DeInit+0x150>)
    7380:	9a02      	ldr	r2, [sp, #8]
    7382:	0052      	lsls	r2, r2, #1
    7384:	4413      	add	r3, r2
    7386:	00db      	lsls	r3, r3, #3
    7388:	440b      	add	r3, r1
    738a:	2200      	movs	r2, #0
    738c:	711a      	strb	r2, [r3, #4]
#endif

#if ((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON))
                    /*Disable wakeup*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = FALSE;
    738e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7392:	492b      	ldr	r1, [pc, #172]	; (7440 <Gpt_DeInit+0x150>)
    7394:	9a02      	ldr	r2, [sp, #8]
    7396:	0052      	lsls	r2, r2, #1
    7398:	4413      	add	r3, r2
    739a:	00db      	lsls	r3, r3, #3
    739c:	440b      	add	r3, r1
    739e:	2200      	movs	r2, #0
    73a0:	715a      	strb	r2, [r3, #5]
                    /*Clear wakeup generation status*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupGenerated = FALSE;
    73a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    73a6:	4926      	ldr	r1, [pc, #152]	; (7440 <Gpt_DeInit+0x150>)
    73a8:	9a02      	ldr	r2, [sp, #8]
    73aa:	0052      	lsls	r2, r2, #1
    73ac:	4413      	add	r3, r2
    73ae:	00db      	lsls	r3, r3, #3
    73b0:	440b      	add	r3, r1
    73b2:	2200      	movs	r2, #0
    73b4:	719a      	strb	r2, [r3, #6]
#endif
                    /* De initialize the running information of the channel*/
                    Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_UNINITIALIZED;
    73b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    73ba:	4921      	ldr	r1, [pc, #132]	; (7440 <Gpt_DeInit+0x150>)
    73bc:	9a02      	ldr	r2, [sp, #8]
    73be:	0052      	lsls	r2, r2, #1
    73c0:	4413      	add	r3, r2
    73c2:	2200      	movs	r2, #0
    73c4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                    Gpt_aStopTime[coreID][channel] = 0U;
    73c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    73cc:	491d      	ldr	r1, [pc, #116]	; (7444 <Gpt_DeInit+0x154>)
    73ce:	9a02      	ldr	r2, [sp, #8]
    73d0:	0052      	lsls	r2, r2, #1
    73d2:	4413      	add	r3, r2
    73d4:	2200      	movs	r2, #0
    73d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
                    /*Initialize hardware timer channel.*/
                    Gpt_Ipw_DeInit
                    (
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    73da:	4a18      	ldr	r2, [pc, #96]	; (743c <Gpt_DeInit+0x14c>)
    73dc:	9b02      	ldr	r3, [sp, #8]
    73de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73e2:	6859      	ldr	r1, [r3, #4]
                    Gpt_Ipw_DeInit
    73e4:	f89d 200f 	ldrb.w	r2, [sp, #15]
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    73e8:	4613      	mov	r3, r2
    73ea:	005b      	lsls	r3, r3, #1
    73ec:	4413      	add	r3, r2
    73ee:	00db      	lsls	r3, r3, #3
    73f0:	440b      	add	r3, r1
    73f2:	3314      	adds	r3, #20
    73f4:	681b      	ldr	r3, [r3, #0]
                    Gpt_Ipw_DeInit
    73f6:	4618      	mov	r0, r3
    73f8:	f000 fd6b 	bl	7ed2 <Gpt_Ipw_DeInit>
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    73fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7400:	3301      	adds	r3, #1
    7402:	f88d 300f 	strb.w	r3, [sp, #15]
    7406:	4a0d      	ldr	r2, [pc, #52]	; (743c <Gpt_DeInit+0x14c>)
    7408:	9b02      	ldr	r3, [sp, #8]
    740a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    740e:	781b      	ldrb	r3, [r3, #0]
    7410:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7414:	429a      	cmp	r2, r3
    7416:	d3a3      	bcc.n	7360 <Gpt_DeInit+0x70>
                }
            }

#if(GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON)
            /* Deinitialize and stop Predef timers.*/
            Gpt_Ipw_StopPredefTimer(Gpt_pConfig[coreID]);
    7418:	4a08      	ldr	r2, [pc, #32]	; (743c <Gpt_DeInit+0x14c>)
    741a:	9b02      	ldr	r3, [sp, #8]
    741c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7420:	4618      	mov	r0, r3
    7422:	f000 fde3 	bl	7fec <Gpt_Ipw_StopPredefTimer>
#endif
            /* Writing NULL to configuration pointer is mandatory because that variable
            is used to test the initialization of the driver */
            Gpt_pConfig[coreID] = NULL_PTR;
    7426:	4a05      	ldr	r2, [pc, #20]	; (743c <Gpt_DeInit+0x14c>)
    7428:	9b02      	ldr	r3, [sp, #8]
    742a:	2100      	movs	r1, #0
    742c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }

#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
    return;
    7430:	bf00      	nop
    7432:	bf00      	nop
}
    7434:	b005      	add	sp, #20
    7436:	f85d fb04 	ldr.w	pc, [sp], #4
    743a:	bf00      	nop
    743c:	1fff8fdc 	.word	0x1fff8fdc
    7440:	1fff8fe0 	.word	0x1fff8fe0
    7444:	1fff8ff0 	.word	0x1fff8ff0

00007448 <Gpt_GetTimeElapsed>:
*
* @pre     The driver needs to be initialized.
* @implements Gpt_GetTimeElapsed_Activity
*/
Gpt_ValueType Gpt_GetTimeElapsed(Gpt_ChannelType channel)
{
    7448:	b500      	push	{lr}
    744a:	b089      	sub	sp, #36	; 0x24
    744c:	4603      	mov	r3, r0
    744e:	f88d 3007 	strb.w	r3, [sp, #7]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    7452:	2300      	movs	r3, #0
    7454:	f88d 3008 	strb.w	r3, [sp, #8]
    7458:	2300      	movs	r3, #0
    745a:	9303      	str	r3, [sp, #12]
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    745c:	ab02      	add	r3, sp, #8
    745e:	9306      	str	r3, [sp, #24]
    Gpt_ChannelType ChannelIndex;

    Gpt_ValueType returnValue = 0U;
    7460:	2300      	movs	r3, #0
    7462:	9307      	str	r3, [sp, #28]
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7464:	2300      	movs	r3, #0
    7466:	9305      	str	r3, [sp, #20]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(GPT_TIMEELAPSED_ID, channel, coreID))
    {
#endif
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7468:	4a31      	ldr	r2, [pc, #196]	; (7530 <Gpt_GetTimeElapsed+0xe8>)
    746a:	9b05      	ldr	r3, [sp, #20]
    746c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7470:	695a      	ldr	r2, [r3, #20]
    7472:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7476:	5cd3      	ldrb	r3, [r2, r3]
    7478:	f88d 3013 	strb.w	r3, [sp, #19]
        /*Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs can change
        the logical channel state between the checking of logical channel state and timestamp
        retrieval*/
        returnValue = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    747c:	4a2c      	ldr	r2, [pc, #176]	; (7530 <Gpt_GetTimeElapsed+0xe8>)
    747e:	9b05      	ldr	r3, [sp, #20]
    7480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7484:	6859      	ldr	r1, [r3, #4]
    7486:	f89d 2013 	ldrb.w	r2, [sp, #19]
    748a:	4613      	mov	r3, r2
    748c:	005b      	lsls	r3, r3, #1
    748e:	4413      	add	r3, r2
    7490:	00db      	lsls	r3, r3, #3
    7492:	440b      	add	r3, r1
    7494:	3314      	adds	r3, #20
    7496:	681b      	ldr	r3, [r3, #0]
    7498:	9906      	ldr	r1, [sp, #24]
    749a:	4618      	mov	r0, r3
    749c:	f000 fce5 	bl	7e6a <Gpt_Ipw_GetTimeElapsed>
    74a0:	9007      	str	r0, [sp, #28]

        /*Check the channel status*/
        switch(Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    74a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    74a6:	4923      	ldr	r1, [pc, #140]	; (7534 <Gpt_GetTimeElapsed+0xec>)
    74a8:	9a05      	ldr	r2, [sp, #20]
    74aa:	0052      	lsls	r2, r2, #1
    74ac:	4413      	add	r3, r2
    74ae:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    74b2:	3b01      	subs	r3, #1
    74b4:	2b03      	cmp	r3, #3
    74b6:	d832      	bhi.n	751e <Gpt_GetTimeElapsed+0xd6>
    74b8:	a201      	add	r2, pc, #4	; (adr r2, 74c0 <Gpt_GetTimeElapsed+0x78>)
    74ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    74be:	bf00      	nop
    74c0:	000074ff 	.word	0x000074ff
    74c4:	00007505 	.word	0x00007505
    74c8:	00007519 	.word	0x00007519
    74cc:	000074d1 	.word	0x000074d1
        {
            case GPT_STATUS_RUNNING:
            {
                /*Check if channel counter has already rollover*/
                if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    74d0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    74d4:	2b00      	cmp	r3, #0
    74d6:	d024      	beq.n	7522 <Gpt_GetTimeElapsed+0xda>
                    (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    74d8:	4a15      	ldr	r2, [pc, #84]	; (7530 <Gpt_GetTimeElapsed+0xe8>)
    74da:	9b05      	ldr	r3, [sp, #20]
    74dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74e0:	6859      	ldr	r1, [r3, #4]
    74e2:	f89d 2013 	ldrb.w	r2, [sp, #19]
    74e6:	4613      	mov	r3, r2
    74e8:	005b      	lsls	r3, r3, #1
    74ea:	4413      	add	r3, r2
    74ec:	00db      	lsls	r3, r3, #3
    74ee:	440b      	add	r3, r1
    74f0:	3310      	adds	r3, #16
    74f2:	681b      	ldr	r3, [r3, #0]
                if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    74f4:	2b01      	cmp	r3, #1
    74f6:	d114      	bne.n	7522 <Gpt_GetTimeElapsed+0xda>
                   )
                {
                    /*The timer has already expired.The hardware timer status is not yet
                    synchronized with the logical timer status*/
                    returnValue = returnHwChannelInfo.uTargetTime;
    74f8:	9b03      	ldr	r3, [sp, #12]
    74fa:	9307      	str	r3, [sp, #28]
                }
            }
            break;
    74fc:	e011      	b.n	7522 <Gpt_GetTimeElapsed+0xda>
            case GPT_STATUS_INITIALIZED:
            {
                returnValue = 0U;
    74fe:	2300      	movs	r3, #0
    7500:	9307      	str	r3, [sp, #28]
            }
            break;
    7502:	e00f      	b.n	7524 <Gpt_GetTimeElapsed+0xdc>
            case GPT_STATUS_STOPPED:
            {
                /*Return elapsed time at the when the channel was stopped*/
                returnValue = Gpt_aStopTime[coreID][channel];
    7504:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7508:	490b      	ldr	r1, [pc, #44]	; (7538 <Gpt_GetTimeElapsed+0xf0>)
    750a:	9a05      	ldr	r2, [sp, #20]
    750c:	0052      	lsls	r2, r2, #1
    750e:	4413      	add	r3, r2
    7510:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    7514:	9307      	str	r3, [sp, #28]
            }
            break;
    7516:	e005      	b.n	7524 <Gpt_GetTimeElapsed+0xdc>
            case GPT_STATUS_EXPIRED:
            {
                returnValue = returnHwChannelInfo.uTargetTime;
    7518:	9b03      	ldr	r3, [sp, #12]
    751a:	9307      	str	r3, [sp, #28]
            }
            break;
    751c:	e002      	b.n	7524 <Gpt_GetTimeElapsed+0xdc>
            default:
                /*Only the above four channel states are allowed when this function is called*/
                break;
    751e:	bf00      	nop
    7520:	e000      	b.n	7524 <Gpt_GetTimeElapsed+0xdc>
            break;
    7522:	bf00      	nop
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif

    return returnValue;
    7524:	9b07      	ldr	r3, [sp, #28]
}
    7526:	4618      	mov	r0, r3
    7528:	b009      	add	sp, #36	; 0x24
    752a:	f85d fb04 	ldr.w	pc, [sp], #4
    752e:	bf00      	nop
    7530:	1fff8fdc 	.word	0x1fff8fdc
    7534:	1fff8fe0 	.word	0x1fff8fe0
    7538:	1fff8ff0 	.word	0x1fff8ff0

0000753c <Gpt_GetTimeRemaining>:
*
* @pre           The driver needs to be initialized.
* @implements    Gpt_GetTimeRemaining_Activity
*/
Gpt_ValueType Gpt_GetTimeRemaining(Gpt_ChannelType channel)
{
    753c:	b500      	push	{lr}
    753e:	b089      	sub	sp, #36	; 0x24
    7540:	4603      	mov	r3, r0
    7542:	f88d 3007 	strb.w	r3, [sp, #7]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    7546:	2300      	movs	r3, #0
    7548:	f88d 3008 	strb.w	r3, [sp, #8]
    754c:	2300      	movs	r3, #0
    754e:	9303      	str	r3, [sp, #12]
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    7550:	ab02      	add	r3, sp, #8
    7552:	9306      	str	r3, [sp, #24]
    Gpt_ChannelType ChannelIndex;

    Gpt_ValueType returnValue = 0U;
    7554:	2300      	movs	r3, #0
    7556:	9307      	str	r3, [sp, #28]
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7558:	2300      	movs	r3, #0
    755a:	9305      	str	r3, [sp, #20]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(GPT_TIMEREMAINING_ID, channel, coreID))
    {
#endif
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    755c:	4a33      	ldr	r2, [pc, #204]	; (762c <Gpt_GetTimeRemaining+0xf0>)
    755e:	9b05      	ldr	r3, [sp, #20]
    7560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7564:	695a      	ldr	r2, [r3, #20]
    7566:	f89d 3007 	ldrb.w	r3, [sp, #7]
    756a:	5cd3      	ldrb	r3, [r2, r3]
    756c:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Calculate the remaining time from the elapsed time*/
        /* Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs can
        change the logical channel state between the checking of logical channel state
        and timestamps retrieval*/
        returnValue = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    7570:	4a2e      	ldr	r2, [pc, #184]	; (762c <Gpt_GetTimeRemaining+0xf0>)
    7572:	9b05      	ldr	r3, [sp, #20]
    7574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7578:	6859      	ldr	r1, [r3, #4]
    757a:	f89d 2013 	ldrb.w	r2, [sp, #19]
    757e:	4613      	mov	r3, r2
    7580:	005b      	lsls	r3, r3, #1
    7582:	4413      	add	r3, r2
    7584:	00db      	lsls	r3, r3, #3
    7586:	440b      	add	r3, r1
    7588:	3314      	adds	r3, #20
    758a:	681b      	ldr	r3, [r3, #0]
    758c:	9906      	ldr	r1, [sp, #24]
    758e:	4618      	mov	r0, r3
    7590:	f000 fc6b 	bl	7e6a <Gpt_Ipw_GetTimeElapsed>
    7594:	9007      	str	r0, [sp, #28]

        /*Check the channel status*/
        switch(Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    7596:	f89d 3007 	ldrb.w	r3, [sp, #7]
    759a:	4925      	ldr	r1, [pc, #148]	; (7630 <Gpt_GetTimeRemaining+0xf4>)
    759c:	9a05      	ldr	r2, [sp, #20]
    759e:	0052      	lsls	r2, r2, #1
    75a0:	4413      	add	r3, r2
    75a2:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    75a6:	3b01      	subs	r3, #1
    75a8:	2b03      	cmp	r3, #3
    75aa:	d839      	bhi.n	7620 <Gpt_GetTimeRemaining+0xe4>
    75ac:	a201      	add	r2, pc, #4	; (adr r2, 75b4 <Gpt_GetTimeRemaining+0x78>)
    75ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    75b2:	bf00      	nop
    75b4:	000075fd 	.word	0x000075fd
    75b8:	00007603 	.word	0x00007603
    75bc:	0000761b 	.word	0x0000761b
    75c0:	000075c5 	.word	0x000075c5
        {
            case GPT_STATUS_RUNNING:
            {
                /*Check if channel counter has already roll-over*/
                if((TRUE == returnHwChannelInfo.bChannelRollover) && \
    75c4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    75c8:	2b00      	cmp	r3, #0
    75ca:	d012      	beq.n	75f2 <Gpt_GetTimeRemaining+0xb6>
                   (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    75cc:	4a17      	ldr	r2, [pc, #92]	; (762c <Gpt_GetTimeRemaining+0xf0>)
    75ce:	9b05      	ldr	r3, [sp, #20]
    75d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75d4:	6859      	ldr	r1, [r3, #4]
    75d6:	f89d 2013 	ldrb.w	r2, [sp, #19]
    75da:	4613      	mov	r3, r2
    75dc:	005b      	lsls	r3, r3, #1
    75de:	4413      	add	r3, r2
    75e0:	00db      	lsls	r3, r3, #3
    75e2:	440b      	add	r3, r1
    75e4:	3310      	adds	r3, #16
    75e6:	681b      	ldr	r3, [r3, #0]
                if((TRUE == returnHwChannelInfo.bChannelRollover) && \
    75e8:	2b01      	cmp	r3, #1
    75ea:	d102      	bne.n	75f2 <Gpt_GetTimeRemaining+0xb6>
                  )
                {
                    /*The timer has already expired.The hardware timer status is not yet
                    synchronized with the logical timer status*/
                    returnValue = 0U;
    75ec:	2300      	movs	r3, #0
    75ee:	9307      	str	r3, [sp, #28]
                {
                    /*Calculate remaining time from elapsed time*/
                    returnValue = returnHwChannelInfo.uTargetTime - returnValue;
                }
            }
            break;
    75f0:	e017      	b.n	7622 <Gpt_GetTimeRemaining+0xe6>
                    returnValue = returnHwChannelInfo.uTargetTime - returnValue;
    75f2:	9a03      	ldr	r2, [sp, #12]
    75f4:	9b07      	ldr	r3, [sp, #28]
    75f6:	1ad3      	subs	r3, r2, r3
    75f8:	9307      	str	r3, [sp, #28]
            break;
    75fa:	e012      	b.n	7622 <Gpt_GetTimeRemaining+0xe6>
            case GPT_STATUS_INITIALIZED:
            {
                returnValue = 0U;
    75fc:	2300      	movs	r3, #0
    75fe:	9307      	str	r3, [sp, #28]
            }
            break;
    7600:	e00f      	b.n	7622 <Gpt_GetTimeRemaining+0xe6>
            case GPT_STATUS_STOPPED:
            {
                returnValue = returnHwChannelInfo.uTargetTime-Gpt_aStopTime[coreID][channel];
    7602:	9a03      	ldr	r2, [sp, #12]
    7604:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7608:	480a      	ldr	r0, [pc, #40]	; (7634 <Gpt_GetTimeRemaining+0xf8>)
    760a:	9905      	ldr	r1, [sp, #20]
    760c:	0049      	lsls	r1, r1, #1
    760e:	440b      	add	r3, r1
    7610:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    7614:	1ad3      	subs	r3, r2, r3
    7616:	9307      	str	r3, [sp, #28]
            }
            break;
    7618:	e003      	b.n	7622 <Gpt_GetTimeRemaining+0xe6>
            case GPT_STATUS_EXPIRED:
            {
                returnValue = 0U;
    761a:	2300      	movs	r3, #0
    761c:	9307      	str	r3, [sp, #28]
            }
            break;
    761e:	e000      	b.n	7622 <Gpt_GetTimeRemaining+0xe6>
            default:
                /*Only the above four channel states are allowed when this function is called*/
                break;
    7620:	bf00      	nop
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif

    return returnValue;
    7622:	9b07      	ldr	r3, [sp, #28]
}
    7624:	4618      	mov	r0, r3
    7626:	b009      	add	sp, #36	; 0x24
    7628:	f85d fb04 	ldr.w	pc, [sp], #4
    762c:	1fff8fdc 	.word	0x1fff8fdc
    7630:	1fff8fe0 	.word	0x1fff8fe0
    7634:	1fff8ff0 	.word	0x1fff8ff0

00007638 <Gpt_StartTimer>:
void Gpt_StartTimer
(
    Gpt_ChannelType channel,
    Gpt_ValueType value
)
{
    7638:	b500      	push	{lr}
    763a:	b085      	sub	sp, #20
    763c:	4603      	mov	r3, r0
    763e:	9100      	str	r1, [sp, #0]
    7640:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    Std_ReturnType returnValue;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7644:	2300      	movs	r3, #0
    7646:	9303      	str	r3, [sp, #12]

    if ((Std_ReturnType)E_OK == Gpt_ValidateChannelStatus(GPT_STARTTIMER_ID, channel, coreID))
    7648:	f89d 3007 	ldrb.w	r3, [sp, #7]
    764c:	9a03      	ldr	r2, [sp, #12]
    764e:	4619      	mov	r1, r3
    7650:	2005      	movs	r0, #5
    7652:	f7ff fc13 	bl	6e7c <Gpt_ValidateChannelStatus>
    7656:	4603      	mov	r3, r0
    7658:	2b00      	cmp	r3, #0
    765a:	d153      	bne.n	7704 <Gpt_StartTimer+0xcc>
    {
#if (GPT_VALIDATE_PARAM  == STD_ON)
        if ((Std_ReturnType)E_OK == Gpt_ValidateParamValue(GPT_STARTTIMER_ID, channel, value, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    765c:	4a2b      	ldr	r2, [pc, #172]	; (770c <Gpt_StartTimer+0xd4>)
    765e:	9b03      	ldr	r3, [sp, #12]
    7660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7664:	695a      	ldr	r2, [r3, #20]
    7666:	f89d 3007 	ldrb.w	r3, [sp, #7]
    766a:	5cd3      	ldrb	r3, [r2, r3]
    766c:	f88d 300b 	strb.w	r3, [sp, #11]
            /*Enable hardware interrupts for the one-shot mode to set the status of  channel*/
            if (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    7670:	4a26      	ldr	r2, [pc, #152]	; (770c <Gpt_StartTimer+0xd4>)
    7672:	9b03      	ldr	r3, [sp, #12]
    7674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7678:	6859      	ldr	r1, [r3, #4]
    767a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    767e:	4613      	mov	r3, r2
    7680:	005b      	lsls	r3, r3, #1
    7682:	4413      	add	r3, r2
    7684:	00db      	lsls	r3, r3, #3
    7686:	440b      	add	r3, r1
    7688:	3310      	adds	r3, #16
    768a:	681b      	ldr	r3, [r3, #0]
    768c:	2b01      	cmp	r3, #1
    768e:	d110      	bne.n	76b2 <Gpt_StartTimer+0x7a>
            {
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7690:	4a1e      	ldr	r2, [pc, #120]	; (770c <Gpt_StartTimer+0xd4>)
    7692:	9b03      	ldr	r3, [sp, #12]
    7694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7698:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    769a:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    769e:	4613      	mov	r3, r2
    76a0:	005b      	lsls	r3, r3, #1
    76a2:	4413      	add	r3, r2
    76a4:	00db      	lsls	r3, r3, #3
    76a6:	440b      	add	r3, r1
    76a8:	3314      	adds	r3, #20
    76aa:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    76ac:	4618      	mov	r0, r3
    76ae:	f000 fc07 	bl	7ec0 <Gpt_Ipw_EnableInterrupt>
                );
            }

            /* Change GPT channel status.Channel status change shall be made before to start
            the hardware in order to not change the channel status from EXPIRED to RUNNING*/
            Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_RUNNING;
    76b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76b6:	4916      	ldr	r1, [pc, #88]	; (7710 <Gpt_StartTimer+0xd8>)
    76b8:	9a03      	ldr	r2, [sp, #12]
    76ba:	0052      	lsls	r2, r2, #1
    76bc:	4413      	add	r3, r2
    76be:	2204      	movs	r2, #4
    76c0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

            /* Call low level API */
            returnValue = Gpt_Ipw_StartTimer(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig),value);
    76c4:	4a11      	ldr	r2, [pc, #68]	; (770c <Gpt_StartTimer+0xd4>)
    76c6:	9b03      	ldr	r3, [sp, #12]
    76c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76cc:	6859      	ldr	r1, [r3, #4]
    76ce:	f89d 200b 	ldrb.w	r2, [sp, #11]
    76d2:	4613      	mov	r3, r2
    76d4:	005b      	lsls	r3, r3, #1
    76d6:	4413      	add	r3, r2
    76d8:	00db      	lsls	r3, r3, #3
    76da:	440b      	add	r3, r1
    76dc:	3314      	adds	r3, #20
    76de:	681b      	ldr	r3, [r3, #0]
    76e0:	9900      	ldr	r1, [sp, #0]
    76e2:	4618      	mov	r0, r3
    76e4:	f000 fba2 	bl	7e2c <Gpt_Ipw_StartTimer>
    76e8:	4603      	mov	r3, r0
    76ea:	f88d 300a 	strb.w	r3, [sp, #10]

            if((Std_ReturnType)E_OK != returnValue)
    76ee:	f89d 300a 	ldrb.w	r3, [sp, #10]
    76f2:	2b00      	cmp	r3, #0
    76f4:	d006      	beq.n	7704 <Gpt_StartTimer+0xcc>
            {
                (void)Det_ReportRuntimeError\
    76f6:	232b      	movs	r3, #43	; 0x2b
    76f8:	2205      	movs	r2, #5
    76fa:	2100      	movs	r1, #0
    76fc:	2064      	movs	r0, #100	; 0x64
    76fe:	f004 f82f 	bl	b760 <Det_ReportRuntimeError>
            }
#if (GPT_VALIDATE_PARAM  == STD_ON)
        }
#endif
    }
    return;
    7702:	bf00      	nop
    7704:	bf00      	nop
}
    7706:	b005      	add	sp, #20
    7708:	f85d fb04 	ldr.w	pc, [sp], #4
    770c:	1fff8fdc 	.word	0x1fff8fdc
    7710:	1fff8fe0 	.word	0x1fff8fe0

00007714 <Gpt_StopTimer>:
*
* @pre          The driver needs to be initialized. Gpt_StartTimer must be called before.
* @implements   Gpt_StopTimer_Activity
*/
void Gpt_StopTimer(Gpt_ChannelType channel)
{
    7714:	b500      	push	{lr}
    7716:	b089      	sub	sp, #36	; 0x24
    7718:	4603      	mov	r3, r0
    771a:	f88d 3007 	strb.w	r3, [sp, #7]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    771e:	2300      	movs	r3, #0
    7720:	f88d 3008 	strb.w	r3, [sp, #8]
    7724:	2300      	movs	r3, #0
    7726:	9303      	str	r3, [sp, #12]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    7728:	ab02      	add	r3, sp, #8
    772a:	9307      	str	r3, [sp, #28]
    Gpt_ValueType uElapsedTime = 0U;
    772c:	2300      	movs	r3, #0
    772e:	9306      	str	r3, [sp, #24]
#endif
    Gpt_ChannelType ChannelIndex;

    uint32 coreID = (uint32)Gpt_GetCoreID();
    7730:	2300      	movs	r3, #0
    7732:	9305      	str	r3, [sp, #20]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(GPT_STOPTIMER_ID, channel, coreID))
    {
#endif
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7734:	4a36      	ldr	r2, [pc, #216]	; (7810 <Gpt_StopTimer+0xfc>)
    7736:	9b05      	ldr	r3, [sp, #20]
    7738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    773c:	695a      	ldr	r2, [r3, #20]
    773e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7742:	5cd3      	ldrb	r3, [r2, r3]
    7744:	f88d 3013 	strb.w	r3, [sp, #19]
        /*Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs can change
        the logical channel state between the checking of logical channel state and timestamps
        retrieval*/
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
        /* Get the elapsed  time  for later use by other API calls*/
        uElapsedTime = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    7748:	4a31      	ldr	r2, [pc, #196]	; (7810 <Gpt_StopTimer+0xfc>)
    774a:	9b05      	ldr	r3, [sp, #20]
    774c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7750:	6859      	ldr	r1, [r3, #4]
    7752:	f89d 2013 	ldrb.w	r2, [sp, #19]
    7756:	4613      	mov	r3, r2
    7758:	005b      	lsls	r3, r3, #1
    775a:	4413      	add	r3, r2
    775c:	00db      	lsls	r3, r3, #3
    775e:	440b      	add	r3, r1
    7760:	3314      	adds	r3, #20
    7762:	681b      	ldr	r3, [r3, #0]
    7764:	9907      	ldr	r1, [sp, #28]
    7766:	4618      	mov	r0, r3
    7768:	f000 fb7f 	bl	7e6a <Gpt_Ipw_GetTimeElapsed>
    776c:	9006      	str	r0, [sp, #24]
#endif

        /*Check the logical channel status*/
        if (GPT_STATUS_RUNNING == Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    776e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7772:	4928      	ldr	r1, [pc, #160]	; (7814 <Gpt_StopTimer+0x100>)
    7774:	9a05      	ldr	r2, [sp, #20]
    7776:	0052      	lsls	r2, r2, #1
    7778:	4413      	add	r3, r2
    777a:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    777e:	2b04      	cmp	r3, #4
    7780:	d141      	bne.n	7806 <Gpt_StopTimer+0xf2>
        {
            /* Call low level stop timer */
            Gpt_Ipw_StopTimer(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    7782:	4a23      	ldr	r2, [pc, #140]	; (7810 <Gpt_StopTimer+0xfc>)
    7784:	9b05      	ldr	r3, [sp, #20]
    7786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    778a:	6859      	ldr	r1, [r3, #4]
    778c:	f89d 2013 	ldrb.w	r2, [sp, #19]
    7790:	4613      	mov	r3, r2
    7792:	005b      	lsls	r3, r3, #1
    7794:	4413      	add	r3, r2
    7796:	00db      	lsls	r3, r3, #3
    7798:	440b      	add	r3, r1
    779a:	3314      	adds	r3, #20
    779c:	681b      	ldr	r3, [r3, #0]
    779e:	4618      	mov	r0, r3
    77a0:	f000 fb79 	bl	7e96 <Gpt_Ipw_StopTimer>

            if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    77a4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    77a8:	2b00      	cmp	r3, #0
    77aa:	d019      	beq.n	77e0 <Gpt_StopTimer+0xcc>
                (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    77ac:	4a18      	ldr	r2, [pc, #96]	; (7810 <Gpt_StopTimer+0xfc>)
    77ae:	9b05      	ldr	r3, [sp, #20]
    77b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77b4:	6859      	ldr	r1, [r3, #4]
    77b6:	f89d 2013 	ldrb.w	r2, [sp, #19]
    77ba:	4613      	mov	r3, r2
    77bc:	005b      	lsls	r3, r3, #1
    77be:	4413      	add	r3, r2
    77c0:	00db      	lsls	r3, r3, #3
    77c2:	440b      	add	r3, r1
    77c4:	3310      	adds	r3, #16
    77c6:	681b      	ldr	r3, [r3, #0]
            if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    77c8:	2b01      	cmp	r3, #1
    77ca:	d109      	bne.n	77e0 <Gpt_StopTimer+0xcc>
            )
            {
                /*This action could be executed only when the function is called during a critical
                section implemented by disabling all interrupts*/
                /*Set channel status to EXPIRED*/
                Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_EXPIRED;
    77cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77d0:	4910      	ldr	r1, [pc, #64]	; (7814 <Gpt_StopTimer+0x100>)
    77d2:	9a05      	ldr	r2, [sp, #20]
    77d4:	0052      	lsls	r2, r2, #1
    77d6:	4413      	add	r3, r2
    77d8:	2203      	movs	r2, #3
    77da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    77de:	e011      	b.n	7804 <Gpt_StopTimer+0xf0>
            }
            else
            {
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                /* Store the stopping time for later use by other API calls*/
                Gpt_aStopTime[coreID][channel] = uElapsedTime;
    77e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77e4:	490c      	ldr	r1, [pc, #48]	; (7818 <Gpt_StopTimer+0x104>)
    77e6:	9a05      	ldr	r2, [sp, #20]
    77e8:	0052      	lsls	r2, r2, #1
    77ea:	4413      	add	r3, r2
    77ec:	9a06      	ldr	r2, [sp, #24]
    77ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

                /* Set GPT channel status to stopped*/
                Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_STOPPED;
    77f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77f6:	4907      	ldr	r1, [pc, #28]	; (7814 <Gpt_StopTimer+0x100>)
    77f8:	9a05      	ldr	r2, [sp, #20]
    77fa:	0052      	lsls	r2, r2, #1
    77fc:	4413      	add	r3, r2
    77fe:	2202      	movs	r2, #2
    7800:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            }
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
    return;
    7804:	bf00      	nop
    7806:	bf00      	nop
}
    7808:	b009      	add	sp, #36	; 0x24
    780a:	f85d fb04 	ldr.w	pc, [sp], #4
    780e:	bf00      	nop
    7810:	1fff8fdc 	.word	0x1fff8fdc
    7814:	1fff8fe0 	.word	0x1fff8fe0
    7818:	1fff8ff0 	.word	0x1fff8ff0

0000781c <Gpt_EnableNotification>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_EnableNotification_Activity
*/
void Gpt_EnableNotification(Gpt_ChannelType channel)
{
    781c:	b500      	push	{lr}
    781e:	b085      	sub	sp, #20
    7820:	4603      	mov	r3, r0
    7822:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7826:	2300      	movs	r3, #0
    7828:	9303      	str	r3, [sp, #12]
#endif
#if (GPT_VALIDATE_PARAM == STD_ON)
        if ((Std_ReturnType)E_OK == Gpt_ValidateChannelNotification(GPT_ENABLENOTIFICATION_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    782a:	4a18      	ldr	r2, [pc, #96]	; (788c <Gpt_EnableNotification+0x70>)
    782c:	9b03      	ldr	r3, [sp, #12]
    782e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7832:	695a      	ldr	r2, [r3, #20]
    7834:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7838:	5cd3      	ldrb	r3, [r2, r3]
    783a:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Set the enable notification attribute */
            Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = TRUE;
    783e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7842:	4913      	ldr	r1, [pc, #76]	; (7890 <Gpt_EnableNotification+0x74>)
    7844:	9a03      	ldr	r2, [sp, #12]
    7846:	0052      	lsls	r2, r2, #1
    7848:	4413      	add	r3, r2
    784a:	00db      	lsls	r3, r3, #3
    784c:	440b      	add	r3, r1
    784e:	2201      	movs	r2, #1
    7850:	711a      	strb	r2, [r3, #4]

            if (GPT_MODE_NORMAL == Gpt_eMode[coreID])
    7852:	4a10      	ldr	r2, [pc, #64]	; (7894 <Gpt_EnableNotification+0x78>)
    7854:	9b03      	ldr	r3, [sp, #12]
    7856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    785a:	2b00      	cmp	r3, #0
    785c:	d111      	bne.n	7882 <Gpt_EnableNotification+0x66>
            {
                /*Enable hardware interrupts*/
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    785e:	4a0b      	ldr	r2, [pc, #44]	; (788c <Gpt_EnableNotification+0x70>)
    7860:	9b03      	ldr	r3, [sp, #12]
    7862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7866:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    7868:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    786c:	4613      	mov	r3, r2
    786e:	005b      	lsls	r3, r3, #1
    7870:	4413      	add	r3, r2
    7872:	00db      	lsls	r3, r3, #3
    7874:	440b      	add	r3, r1
    7876:	3314      	adds	r3, #20
    7878:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    787a:	4618      	mov	r0, r3
    787c:	f000 fb20 	bl	7ec0 <Gpt_Ipw_EnableInterrupt>
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif

    return;
    7880:	bf00      	nop
    7882:	bf00      	nop
}
    7884:	b005      	add	sp, #20
    7886:	f85d fb04 	ldr.w	pc, [sp], #4
    788a:	bf00      	nop
    788c:	1fff8fdc 	.word	0x1fff8fdc
    7890:	1fff8fe0 	.word	0x1fff8fe0
    7894:	1fff8fd8 	.word	0x1fff8fd8

00007898 <Gpt_DisableNotification>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_DisableNotification_Activity
*/
void Gpt_DisableNotification(Gpt_ChannelType channel)
{
    7898:	b500      	push	{lr}
    789a:	b085      	sub	sp, #20
    789c:	4603      	mov	r3, r0
    789e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    78a2:	2300      	movs	r3, #0
    78a4:	9303      	str	r3, [sp, #12]
#endif
#if (GPT_VALIDATE_PARAM == STD_ON)
        if ((Std_ReturnType)E_OK == Gpt_ValidateChannelNotification(GPT_DISABLENOTIFICATION_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    78a6:	4a25      	ldr	r2, [pc, #148]	; (793c <Gpt_DisableNotification+0xa4>)
    78a8:	9b03      	ldr	r3, [sp, #12]
    78aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78ae:	695a      	ldr	r2, [r3, #20]
    78b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78b4:	5cd3      	ldrb	r3, [r2, r3]
    78b6:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Set the enable notification attribute */
            Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = FALSE;
    78ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78be:	4920      	ldr	r1, [pc, #128]	; (7940 <Gpt_DisableNotification+0xa8>)
    78c0:	9a03      	ldr	r2, [sp, #12]
    78c2:	0052      	lsls	r2, r2, #1
    78c4:	4413      	add	r3, r2
    78c6:	00db      	lsls	r3, r3, #3
    78c8:	440b      	add	r3, r1
    78ca:	2200      	movs	r2, #0
    78cc:	711a      	strb	r2, [r3, #4]

            /* Disable hardware interrupts if the channel is not running in the ONE-SHOT mode.
            This is needed because the channel state is updated by ISR for ONE-SHOT mode */
            if ((GPT_MODE_NORMAL == Gpt_eMode[coreID]) && \
    78ce:	4a1d      	ldr	r2, [pc, #116]	; (7944 <Gpt_DisableNotification+0xac>)
    78d0:	9b03      	ldr	r3, [sp, #12]
    78d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78d6:	2b00      	cmp	r3, #0
    78d8:	d12b      	bne.n	7932 <Gpt_DisableNotification+0x9a>
                ((GPT_CH_MODE_CONTINUOUS == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode) \
    78da:	4a18      	ldr	r2, [pc, #96]	; (793c <Gpt_DisableNotification+0xa4>)
    78dc:	9b03      	ldr	r3, [sp, #12]
    78de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78e2:	6859      	ldr	r1, [r3, #4]
    78e4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    78e8:	4613      	mov	r3, r2
    78ea:	005b      	lsls	r3, r3, #1
    78ec:	4413      	add	r3, r2
    78ee:	00db      	lsls	r3, r3, #3
    78f0:	440b      	add	r3, r1
    78f2:	3310      	adds	r3, #16
    78f4:	681b      	ldr	r3, [r3, #0]
            if ((GPT_MODE_NORMAL == Gpt_eMode[coreID]) && \
    78f6:	2b00      	cmp	r3, #0
    78f8:	d009      	beq.n	790e <Gpt_DisableNotification+0x76>
                 || (GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    78fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78fe:	4910      	ldr	r1, [pc, #64]	; (7940 <Gpt_DisableNotification+0xa8>)
    7900:	9a03      	ldr	r2, [sp, #12]
    7902:	0052      	lsls	r2, r2, #1
    7904:	4413      	add	r3, r2
    7906:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    790a:	2b04      	cmp	r3, #4
    790c:	d011      	beq.n	7932 <Gpt_DisableNotification+0x9a>
               )
            {
                /*Disable hardware interrupts*/
                Gpt_Ipw_DisableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    790e:	4a0b      	ldr	r2, [pc, #44]	; (793c <Gpt_DisableNotification+0xa4>)
    7910:	9b03      	ldr	r3, [sp, #12]
    7912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7916:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_DisableInterrupt
    7918:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    791c:	4613      	mov	r3, r2
    791e:	005b      	lsls	r3, r3, #1
    7920:	4413      	add	r3, r2
    7922:	00db      	lsls	r3, r3, #3
    7924:	440b      	add	r3, r1
    7926:	3314      	adds	r3, #20
    7928:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_DisableInterrupt
    792a:	4618      	mov	r0, r3
    792c:	f000 fae3 	bl	7ef6 <Gpt_Ipw_DisableInterrupt>
        }
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
    return;
    7930:	bf00      	nop
    7932:	bf00      	nop
}
    7934:	b005      	add	sp, #20
    7936:	f85d fb04 	ldr.w	pc, [sp], #4
    793a:	bf00      	nop
    793c:	1fff8fdc 	.word	0x1fff8fdc
    7940:	1fff8fe0 	.word	0x1fff8fe0
    7944:	1fff8fd8 	.word	0x1fff8fd8

00007948 <Gpt_SetMode>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_SetMode_Activity
*/
void Gpt_SetMode(Gpt_ModeType Mode)
{
    7948:	b500      	push	{lr}
    794a:	b085      	sub	sp, #20
    794c:	9001      	str	r0, [sp, #4]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_OFF)
    (void)Mode;
#endif

#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint32 coreID = (uint32)Gpt_GetCoreID();
    794e:	2300      	movs	r3, #0
    7950:	9303      	str	r3, [sp, #12]
        /*Validate the driver calling context*/
        if((Std_ReturnType)E_OK == Gpt_ValidateParamMode(Mode))
        {
#endif
            /*Implements the behaviour for the sleep mode */
            if(GPT_MODE_SLEEP == Mode)
    7952:	9b01      	ldr	r3, [sp, #4]
    7954:	2b01      	cmp	r3, #1
    7956:	d10f      	bne.n	7978 <Gpt_SetMode+0x30>
            {
                /* Check channel has wakeup enabled at runtime */
                Gpt_CheckStatusWakeupEnabled(coreID);
    7958:	9803      	ldr	r0, [sp, #12]
    795a:	f7ff fb7b 	bl	7054 <Gpt_CheckStatusWakeupEnabled>

#if(GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON)
                /* De-initialize and Stop Predef Timers. */
                Gpt_Ipw_StopPredefTimer(Gpt_pConfig[coreID]);
    795e:	4a15      	ldr	r2, [pc, #84]	; (79b4 <Gpt_SetMode+0x6c>)
    7960:	9b03      	ldr	r3, [sp, #12]
    7962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7966:	4618      	mov	r0, r3
    7968:	f000 fb40 	bl	7fec <Gpt_Ipw_StopPredefTimer>
#endif
#if (((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON)) || \
     (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON) || \
     (GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON))
                /* Set the driver mode to sleep */
                Gpt_eMode[coreID] = GPT_MODE_SLEEP;
    796c:	4a12      	ldr	r2, [pc, #72]	; (79b8 <Gpt_SetMode+0x70>)
    796e:	9b03      	ldr	r3, [sp, #12]
    7970:	2101      	movs	r1, #1
    7972:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif

#endif /*GPT_REPORT_WAKEUP_SOURCE*/
    return;
    7976:	e018      	b.n	79aa <Gpt_SetMode+0x62>
            else if (GPT_MODE_NORMAL == Mode)
    7978:	9b01      	ldr	r3, [sp, #4]
    797a:	2b00      	cmp	r3, #0
    797c:	d115      	bne.n	79aa <Gpt_SetMode+0x62>
                   if ((Gpt_ModeType)GPT_MODE_SLEEP == Gpt_eMode[coreID])
    797e:	4a0e      	ldr	r2, [pc, #56]	; (79b8 <Gpt_SetMode+0x70>)
    7980:	9b03      	ldr	r3, [sp, #12]
    7982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7986:	2b01      	cmp	r3, #1
    7988:	d106      	bne.n	7998 <Gpt_SetMode+0x50>
                   Gpt_Ipw_StartPredefTimer(Gpt_pConfig[coreID]);
    798a:	4a0a      	ldr	r2, [pc, #40]	; (79b4 <Gpt_SetMode+0x6c>)
    798c:	9b03      	ldr	r3, [sp, #12]
    798e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7992:	4618      	mov	r0, r3
    7994:	f000 fab8 	bl	7f08 <Gpt_Ipw_StartPredefTimer>
                Gpt_CheckStatusNotificationEnabled(coreID);
    7998:	9803      	ldr	r0, [sp, #12]
    799a:	f7ff fae7 	bl	6f6c <Gpt_CheckStatusNotificationEnabled>
                Gpt_eMode[coreID] = GPT_MODE_NORMAL;
    799e:	4a06      	ldr	r2, [pc, #24]	; (79b8 <Gpt_SetMode+0x70>)
    79a0:	9b03      	ldr	r3, [sp, #12]
    79a2:	2100      	movs	r1, #0
    79a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return;
    79a8:	bf00      	nop
    79aa:	bf00      	nop
}
    79ac:	b005      	add	sp, #20
    79ae:	f85d fb04 	ldr.w	pc, [sp], #4
    79b2:	bf00      	nop
    79b4:	1fff8fdc 	.word	0x1fff8fdc
    79b8:	1fff8fd8 	.word	0x1fff8fd8

000079bc <Gpt_DisableWakeup>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_DisableWakeup_Activity
*/
void Gpt_DisableWakeup(Gpt_ChannelType channel)
{
    79bc:	b500      	push	{lr}
    79be:	b085      	sub	sp, #20
    79c0:	4603      	mov	r3, r0
    79c2:	f88d 3007 	strb.w	r3, [sp, #7]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    79c6:	2300      	movs	r3, #0
    79c8:	9303      	str	r3, [sp, #12]

#if (GPT_VALIDATE_PARAM == STD_ON)
        if((Std_ReturnType)E_OK == Gpt_ValidateChannelWakeup(GPT_DISABLEWAKEUP_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    79ca:	4a25      	ldr	r2, [pc, #148]	; (7a60 <Gpt_DisableWakeup+0xa4>)
    79cc:	9b03      	ldr	r3, [sp, #12]
    79ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79d2:	695a      	ldr	r2, [r3, #20]
    79d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    79d8:	5cd3      	ldrb	r3, [r2, r3]
    79da:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Set the enable wakeup attribute */
            Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = FALSE;
    79de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    79e2:	4920      	ldr	r1, [pc, #128]	; (7a64 <Gpt_DisableWakeup+0xa8>)
    79e4:	9a03      	ldr	r2, [sp, #12]
    79e6:	0052      	lsls	r2, r2, #1
    79e8:	4413      	add	r3, r2
    79ea:	00db      	lsls	r3, r3, #3
    79ec:	440b      	add	r3, r1
    79ee:	2200      	movs	r2, #0
    79f0:	715a      	strb	r2, [r3, #5]

            /* Disable hardware interrupts if the channel is not running in the ONE-SHOT mode.
            This is needed because the channel state is updated by ISR for ONE-SHOT mode */
            if ((GPT_MODE_SLEEP == Gpt_eMode[coreID]) && \
    79f2:	4a1d      	ldr	r2, [pc, #116]	; (7a68 <Gpt_DisableWakeup+0xac>)
    79f4:	9b03      	ldr	r3, [sp, #12]
    79f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79fa:	2b01      	cmp	r3, #1
    79fc:	d12b      	bne.n	7a56 <Gpt_DisableWakeup+0x9a>
                ((GPT_CH_MODE_CONTINUOUS == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    79fe:	4a18      	ldr	r2, [pc, #96]	; (7a60 <Gpt_DisableWakeup+0xa4>)
    7a00:	9b03      	ldr	r3, [sp, #12]
    7a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a06:	6859      	ldr	r1, [r3, #4]
    7a08:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7a0c:	4613      	mov	r3, r2
    7a0e:	005b      	lsls	r3, r3, #1
    7a10:	4413      	add	r3, r2
    7a12:	00db      	lsls	r3, r3, #3
    7a14:	440b      	add	r3, r1
    7a16:	3310      	adds	r3, #16
    7a18:	681b      	ldr	r3, [r3, #0]
            if ((GPT_MODE_SLEEP == Gpt_eMode[coreID]) && \
    7a1a:	2b00      	cmp	r3, #0
    7a1c:	d009      	beq.n	7a32 <Gpt_DisableWakeup+0x76>
                 || (GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    7a1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a22:	4910      	ldr	r1, [pc, #64]	; (7a64 <Gpt_DisableWakeup+0xa8>)
    7a24:	9a03      	ldr	r2, [sp, #12]
    7a26:	0052      	lsls	r2, r2, #1
    7a28:	4413      	add	r3, r2
    7a2a:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    7a2e:	2b04      	cmp	r3, #4
    7a30:	d011      	beq.n	7a56 <Gpt_DisableWakeup+0x9a>
               )
            {
                /*Disable hardware interrupts*/
                Gpt_Ipw_DisableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7a32:	4a0b      	ldr	r2, [pc, #44]	; (7a60 <Gpt_DisableWakeup+0xa4>)
    7a34:	9b03      	ldr	r3, [sp, #12]
    7a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a3a:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_DisableInterrupt
    7a3c:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7a40:	4613      	mov	r3, r2
    7a42:	005b      	lsls	r3, r3, #1
    7a44:	4413      	add	r3, r2
    7a46:	00db      	lsls	r3, r3, #3
    7a48:	440b      	add	r3, r1
    7a4a:	3314      	adds	r3, #20
    7a4c:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_DisableInterrupt
    7a4e:	4618      	mov	r0, r3
    7a50:	f000 fa51 	bl	7ef6 <Gpt_Ipw_DisableInterrupt>
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
#endif /*GPT_REPORT_WAKEUP_SOURCE*/
    return;
    7a54:	bf00      	nop
    7a56:	bf00      	nop
}
    7a58:	b005      	add	sp, #20
    7a5a:	f85d fb04 	ldr.w	pc, [sp], #4
    7a5e:	bf00      	nop
    7a60:	1fff8fdc 	.word	0x1fff8fdc
    7a64:	1fff8fe0 	.word	0x1fff8fe0
    7a68:	1fff8fd8 	.word	0x1fff8fd8

00007a6c <Gpt_EnableWakeup>:
*
* @pre          The driver needs to be initialized. The channel must be configured as wakeup capable.
* @implements   Gpt_EnableWakeup_Activity
*/
void Gpt_EnableWakeup(Gpt_ChannelType channel)
{
    7a6c:	b500      	push	{lr}
    7a6e:	b085      	sub	sp, #20
    7a70:	4603      	mov	r3, r0
    7a72:	f88d 3007 	strb.w	r3, [sp, #7]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7a76:	2300      	movs	r3, #0
    7a78:	9303      	str	r3, [sp, #12]
#endif
#if (GPT_VALIDATE_PARAM == STD_ON)
        if((Std_ReturnType)E_OK == Gpt_ValidateChannelWakeup(GPT_ENABLEWAKEUP_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7a7a:	4a18      	ldr	r2, [pc, #96]	; (7adc <Gpt_EnableWakeup+0x70>)
    7a7c:	9b03      	ldr	r3, [sp, #12]
    7a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a82:	695a      	ldr	r2, [r3, #20]
    7a84:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a88:	5cd3      	ldrb	r3, [r2, r3]
    7a8a:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Functionality implementation */
            /* Set the enable wakeup attribute */
            Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = TRUE;
    7a8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a92:	4913      	ldr	r1, [pc, #76]	; (7ae0 <Gpt_EnableWakeup+0x74>)
    7a94:	9a03      	ldr	r2, [sp, #12]
    7a96:	0052      	lsls	r2, r2, #1
    7a98:	4413      	add	r3, r2
    7a9a:	00db      	lsls	r3, r3, #3
    7a9c:	440b      	add	r3, r1
    7a9e:	2201      	movs	r2, #1
    7aa0:	715a      	strb	r2, [r3, #5]

            if (GPT_MODE_SLEEP == Gpt_eMode[coreID])
    7aa2:	4a10      	ldr	r2, [pc, #64]	; (7ae4 <Gpt_EnableWakeup+0x78>)
    7aa4:	9b03      	ldr	r3, [sp, #12]
    7aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7aaa:	2b01      	cmp	r3, #1
    7aac:	d111      	bne.n	7ad2 <Gpt_EnableWakeup+0x66>
            {
                /*Enable hardware interrupts*/
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7aae:	4a0b      	ldr	r2, [pc, #44]	; (7adc <Gpt_EnableWakeup+0x70>)
    7ab0:	9b03      	ldr	r3, [sp, #12]
    7ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ab6:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    7ab8:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7abc:	4613      	mov	r3, r2
    7abe:	005b      	lsls	r3, r3, #1
    7ac0:	4413      	add	r3, r2
    7ac2:	00db      	lsls	r3, r3, #3
    7ac4:	440b      	add	r3, r1
    7ac6:	3314      	adds	r3, #20
    7ac8:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    7aca:	4618      	mov	r0, r3
    7acc:	f000 f9f8 	bl	7ec0 <Gpt_Ipw_EnableInterrupt>
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
#endif /*GPT_REPORT_WAKEUP_SOURCE*/
    return;
    7ad0:	bf00      	nop
    7ad2:	bf00      	nop
}
    7ad4:	b005      	add	sp, #20
    7ad6:	f85d fb04 	ldr.w	pc, [sp], #4
    7ada:	bf00      	nop
    7adc:	1fff8fdc 	.word	0x1fff8fdc
    7ae0:	1fff8fe0 	.word	0x1fff8fe0
    7ae4:	1fff8fd8 	.word	0x1fff8fd8

00007ae8 <Gpt_CheckWakeup>:
*
* @pre          The driver needs to be initialized. The channel must be configured as wakeup capable.
* @implements   Gpt_CheckWakeup_Activity
*/
void Gpt_CheckWakeup(EcuM_WakeupSourceType wakeupSource)
{
    7ae8:	b500      	push	{lr}
    7aea:	b087      	sub	sp, #28
    7aec:	9001      	str	r0, [sp, #4]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7aee:	2300      	movs	r3, #0
    7af0:	9304      	str	r3, [sp, #16]
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    /*Validate the driver calling context*/
    if((Std_ReturnType)E_OK == Gpt_ValidateGlobalCall(GPT_CHECKWAKEUP_ID, coreID))
    {
#endif
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7af2:	2300      	movs	r3, #0
    7af4:	f88d 3017 	strb.w	r3, [sp, #23]
    7af8:	e03b      	b.n	7b72 <Gpt_CheckWakeup+0x8a>
        {
            channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    7afa:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7afe:	9904      	ldr	r1, [sp, #16]
    7b00:	4618      	mov	r0, r3
    7b02:	f7ff fa0b 	bl	6f1c <Gpt_ConvertChannelIndexToChannel>
    7b06:	4603      	mov	r3, r0
    7b08:	f88d 300f 	strb.w	r3, [sp, #15]
            if(channel < GPT_HW_CHANNEL_NUM)
    7b0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7b10:	2b01      	cmp	r3, #1
    7b12:	d829      	bhi.n	7b68 <Gpt_CheckWakeup+0x80>
            {
                if ((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_uWakeupSource) == wakeupSource) && \
    7b14:	4a1d      	ldr	r2, [pc, #116]	; (7b8c <Gpt_CheckWakeup+0xa4>)
    7b16:	9b04      	ldr	r3, [sp, #16]
    7b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b1c:	6859      	ldr	r1, [r3, #4]
    7b1e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    7b22:	4613      	mov	r3, r2
    7b24:	005b      	lsls	r3, r3, #1
    7b26:	4413      	add	r3, r2
    7b28:	00db      	lsls	r3, r3, #3
    7b2a:	440b      	add	r3, r1
    7b2c:	3308      	adds	r3, #8
    7b2e:	681b      	ldr	r3, [r3, #0]
    7b30:	9a01      	ldr	r2, [sp, #4]
    7b32:	429a      	cmp	r2, r3
    7b34:	d118      	bne.n	7b68 <Gpt_CheckWakeup+0x80>
                    ((boolean)TRUE == Gpt_aChannelInfo[coreID][channel].bWakeupGenerated)
    7b36:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7b3a:	4915      	ldr	r1, [pc, #84]	; (7b90 <Gpt_CheckWakeup+0xa8>)
    7b3c:	9a04      	ldr	r2, [sp, #16]
    7b3e:	0052      	lsls	r2, r2, #1
    7b40:	4413      	add	r3, r2
    7b42:	00db      	lsls	r3, r3, #3
    7b44:	440b      	add	r3, r1
    7b46:	799b      	ldrb	r3, [r3, #6]
                if ((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_uWakeupSource) == wakeupSource) && \
    7b48:	2b00      	cmp	r3, #0
    7b4a:	d00d      	beq.n	7b68 <Gpt_CheckWakeup+0x80>
                    )
                {
                    /*Reset the wakeup flag */
                    Gpt_aChannelInfo[coreID][channel].bWakeupGenerated = FALSE;
    7b4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7b50:	490f      	ldr	r1, [pc, #60]	; (7b90 <Gpt_CheckWakeup+0xa8>)
    7b52:	9a04      	ldr	r2, [sp, #16]
    7b54:	0052      	lsls	r2, r2, #1
    7b56:	4413      	add	r3, r2
    7b58:	00db      	lsls	r3, r3, #3
    7b5a:	440b      	add	r3, r1
    7b5c:	2200      	movs	r2, #0
    7b5e:	719a      	strb	r2, [r3, #6]

                    /* Calling EcuM_SetWakeupEvent and exit*/
                    EcuM_SetWakeupEvent(wakeupSource);
    7b60:	9801      	ldr	r0, [sp, #4]
    7b62:	f000 fa73 	bl	804c <EcuM_SetWakeupEvent>

                    break;
    7b66:	e00d      	b.n	7b84 <Gpt_CheckWakeup+0x9c>
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7b68:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7b6c:	3301      	adds	r3, #1
    7b6e:	f88d 3017 	strb.w	r3, [sp, #23]
    7b72:	4a06      	ldr	r2, [pc, #24]	; (7b8c <Gpt_CheckWakeup+0xa4>)
    7b74:	9b04      	ldr	r3, [sp, #16]
    7b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b7a:	781b      	ldrb	r3, [r3, #0]
    7b7c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    7b80:	429a      	cmp	r2, r3
    7b82:	d3ba      	bcc.n	7afa <Gpt_CheckWakeup+0x12>
        }    /*for*/
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
#endif /* GPT_REPORT_WAKEUP_SOURCE */
    return;
    7b84:	bf00      	nop
}
    7b86:	b007      	add	sp, #28
    7b88:	f85d fb04 	ldr.w	pc, [sp], #4
    7b8c:	1fff8fdc 	.word	0x1fff8fdc
    7b90:	1fff8fe0 	.word	0x1fff8fe0

00007b94 <Gpt_ProcessCommonInterrupt>:
* @return       void
* @pre          The driver needs to be initialized.
* @implements   Gpt_ProcessCommonInterrupt_Activity
*/
void Gpt_ProcessCommonInterrupt(uint8 channel)
{
    7b94:	b500      	push	{lr}
    7b96:	b085      	sub	sp, #20
    7b98:	4603      	mov	r3, r0
    7b9a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7b9e:	2300      	movs	r3, #0
    7ba0:	9303      	str	r3, [sp, #12]

    if (Gpt_pConfig[coreID] != NULL_PTR)
    7ba2:	4a3d      	ldr	r2, [pc, #244]	; (7c98 <Gpt_ProcessCommonInterrupt+0x104>)
    7ba4:	9b03      	ldr	r3, [sp, #12]
    7ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7baa:	2b00      	cmp	r3, #0
    7bac:	d06f      	beq.n	7c8e <Gpt_ProcessCommonInterrupt+0xfa>
    {
        /* Extract the logical channel from the hardware to logic map table */
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7bae:	4a3a      	ldr	r2, [pc, #232]	; (7c98 <Gpt_ProcessCommonInterrupt+0x104>)
    7bb0:	9b03      	ldr	r3, [sp, #12]
    7bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bb6:	695a      	ldr	r2, [r3, #20]
    7bb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7bbc:	5cd3      	ldrb	r3, [r2, r3]
    7bbe:	f88d 300b 	strb.w	r3, [sp, #11]

        /* Change the channel status for one-shot mode */
        if (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    7bc2:	4a35      	ldr	r2, [pc, #212]	; (7c98 <Gpt_ProcessCommonInterrupt+0x104>)
    7bc4:	9b03      	ldr	r3, [sp, #12]
    7bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bca:	6859      	ldr	r1, [r3, #4]
    7bcc:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7bd0:	4613      	mov	r3, r2
    7bd2:	005b      	lsls	r3, r3, #1
    7bd4:	4413      	add	r3, r2
    7bd6:	00db      	lsls	r3, r3, #3
    7bd8:	440b      	add	r3, r1
    7bda:	3310      	adds	r3, #16
    7bdc:	681b      	ldr	r3, [r3, #0]
    7bde:	2b01      	cmp	r3, #1
    7be0:	d108      	bne.n	7bf4 <Gpt_ProcessCommonInterrupt+0x60>
        {
            /* Change the channel status to expired */
            Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_EXPIRED;
    7be2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7be6:	492d      	ldr	r1, [pc, #180]	; (7c9c <Gpt_ProcessCommonInterrupt+0x108>)
    7be8:	9a03      	ldr	r2, [sp, #12]
    7bea:	0052      	lsls	r2, r2, #1
    7bec:	4413      	add	r3, r2
    7bee:	2203      	movs	r2, #3
    7bf0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        }
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
        if ((GPT_MODE_NORMAL == Gpt_eMode[coreID]) && (TRUE == Gpt_aChannelInfo[coreID][channel].bNotificationEnabled))
    7bf4:	4a2a      	ldr	r2, [pc, #168]	; (7ca0 <Gpt_ProcessCommonInterrupt+0x10c>)
    7bf6:	9b03      	ldr	r3, [sp, #12]
    7bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bfc:	2b00      	cmp	r3, #0
    7bfe:	d119      	bne.n	7c34 <Gpt_ProcessCommonInterrupt+0xa0>
    7c00:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c04:	4925      	ldr	r1, [pc, #148]	; (7c9c <Gpt_ProcessCommonInterrupt+0x108>)
    7c06:	9a03      	ldr	r2, [sp, #12]
    7c08:	0052      	lsls	r2, r2, #1
    7c0a:	4413      	add	r3, r2
    7c0c:	00db      	lsls	r3, r3, #3
    7c0e:	440b      	add	r3, r1
    7c10:	791b      	ldrb	r3, [r3, #4]
    7c12:	2b00      	cmp	r3, #0
    7c14:	d00e      	beq.n	7c34 <Gpt_ProcessCommonInterrupt+0xa0>
        {
            (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_pfNotification();
    7c16:	4a20      	ldr	r2, [pc, #128]	; (7c98 <Gpt_ProcessCommonInterrupt+0x104>)
    7c18:	9b03      	ldr	r3, [sp, #12]
    7c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c1e:	6859      	ldr	r1, [r3, #4]
    7c20:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7c24:	4613      	mov	r3, r2
    7c26:	005b      	lsls	r3, r3, #1
    7c28:	4413      	add	r3, r2
    7c2a:	00db      	lsls	r3, r3, #3
    7c2c:	440b      	add	r3, r1
    7c2e:	3304      	adds	r3, #4
    7c30:	681b      	ldr	r3, [r3, #0]
    7c32:	4798      	blx	r3
        }
#endif

#if (GPT_WAKEUP_FUNCTIONALITY_API == STD_ON)
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
        if ((GPT_MODE_SLEEP == Gpt_eMode[coreID]) && (TRUE == Gpt_aChannelInfo[coreID][channel].bWakeupEnabled))
    7c34:	4a1a      	ldr	r2, [pc, #104]	; (7ca0 <Gpt_ProcessCommonInterrupt+0x10c>)
    7c36:	9b03      	ldr	r3, [sp, #12]
    7c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c3c:	2b01      	cmp	r3, #1
    7c3e:	d126      	bne.n	7c8e <Gpt_ProcessCommonInterrupt+0xfa>
    7c40:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c44:	4915      	ldr	r1, [pc, #84]	; (7c9c <Gpt_ProcessCommonInterrupt+0x108>)
    7c46:	9a03      	ldr	r2, [sp, #12]
    7c48:	0052      	lsls	r2, r2, #1
    7c4a:	4413      	add	r3, r2
    7c4c:	00db      	lsls	r3, r3, #3
    7c4e:	440b      	add	r3, r1
    7c50:	795b      	ldrb	r3, [r3, #5]
    7c52:	2b00      	cmp	r3, #0
    7c54:	d01b      	beq.n	7c8e <Gpt_ProcessCommonInterrupt+0xfa>
        {
            Gpt_aChannelInfo[coreID][channel].bWakeupGenerated =TRUE;
    7c56:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c5a:	4910      	ldr	r1, [pc, #64]	; (7c9c <Gpt_ProcessCommonInterrupt+0x108>)
    7c5c:	9a03      	ldr	r2, [sp, #12]
    7c5e:	0052      	lsls	r2, r2, #1
    7c60:	4413      	add	r3, r2
    7c62:	00db      	lsls	r3, r3, #3
    7c64:	440b      	add	r3, r1
    7c66:	2201      	movs	r2, #1
    7c68:	719a      	strb	r2, [r3, #6]
            EcuM_CheckWakeup((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_uWakeupSource);
    7c6a:	4a0b      	ldr	r2, [pc, #44]	; (7c98 <Gpt_ProcessCommonInterrupt+0x104>)
    7c6c:	9b03      	ldr	r3, [sp, #12]
    7c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c72:	6859      	ldr	r1, [r3, #4]
    7c74:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7c78:	4613      	mov	r3, r2
    7c7a:	005b      	lsls	r3, r3, #1
    7c7c:	4413      	add	r3, r2
    7c7e:	00db      	lsls	r3, r3, #3
    7c80:	440b      	add	r3, r1
    7c82:	3308      	adds	r3, #8
    7c84:	681b      	ldr	r3, [r3, #0]
    7c86:	4618      	mov	r0, r3
    7c88:	f000 f9ef 	bl	806a <EcuM_CheckWakeup>
        }
#endif
#endif
    }
    return;
    7c8c:	bf00      	nop
    7c8e:	bf00      	nop
}
    7c90:	b005      	add	sp, #20
    7c92:	f85d fb04 	ldr.w	pc, [sp], #4
    7c96:	bf00      	nop
    7c98:	1fff8fdc 	.word	0x1fff8fdc
    7c9c:	1fff8fe0 	.word	0x1fff8fe0
    7ca0:	1fff8fd8 	.word	0x1fff8fd8

00007ca4 <Gpt_GetPredefTimerValue>:
Std_ReturnType Gpt_GetPredefTimerValue
(
    Gpt_PredefTimerType PredefTimer,
    uint32 * TimeValuePtr
)
{
    7ca4:	b500      	push	{lr}
    7ca6:	b085      	sub	sp, #20
    7ca8:	9001      	str	r0, [sp, #4]
    7caa:	9100      	str	r1, [sp, #0]
    Std_ReturnType returnValue;
    Gpt_ChannelType channel;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7cac:	2300      	movs	r3, #0
    7cae:	9303      	str	r3, [sp, #12]
            returnValue = Gpt_ValidateParamTypePredefTimer(PredefTimer, coreID);
            if((Std_ReturnType)E_OK == returnValue)
            {
#endif

               returnValue = Gpt_ValidateMode(GPT_GET_PREDEF_TIMERVALUE_ID, coreID);
    7cb0:	9903      	ldr	r1, [sp, #12]
    7cb2:	200d      	movs	r0, #13
    7cb4:	f7ff f910 	bl	6ed8 <Gpt_ValidateMode>
    7cb8:	4603      	mov	r3, r0
    7cba:	f88d 300b 	strb.w	r3, [sp, #11]
               if((Std_ReturnType)E_OK ==returnValue)
    7cbe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7cc2:	2b00      	cmp	r3, #0
    7cc4:	d112      	bne.n	7cec <Gpt_GetPredefTimerValue+0x48>
               {

                        channel = (Gpt_ChannelType)PredefTimer;
    7cc6:	9b01      	ldr	r3, [sp, #4]
    7cc8:	f88d 300a 	strb.w	r3, [sp, #10]

                        Gpt_Ipw_GetPredefTimerValue((Gpt_pConfig[coreID]->Gpt_pChannelPredefConfigType)[channel], PredefTimer, TimeValuePtr);
    7ccc:	4a0c      	ldr	r2, [pc, #48]	; (7d00 <Gpt_GetPredefTimerValue+0x5c>)
    7cce:	9b03      	ldr	r3, [sp, #12]
    7cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cd4:	691a      	ldr	r2, [r3, #16]
    7cd6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7cda:	009b      	lsls	r3, r3, #2
    7cdc:	4413      	add	r3, r2
    7cde:	681b      	ldr	r3, [r3, #0]
    7ce0:	9a00      	ldr	r2, [sp, #0]
    7ce2:	9901      	ldr	r1, [sp, #4]
    7ce4:	4618      	mov	r0, r3
    7ce6:	f000 f943 	bl	7f70 <Gpt_Ipw_GetPredefTimerValue>
    7cea:	e002      	b.n	7cf2 <Gpt_GetPredefTimerValue+0x4e>

               }
               else
               {
                   *TimeValuePtr = 0U;
    7cec:	9b00      	ldr	r3, [sp, #0]
    7cee:	2200      	movs	r2, #0
    7cf0:	601a      	str	r2, [r3, #0]
        }
#endif
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
    return returnValue;
    7cf2:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    7cf6:	4618      	mov	r0, r3
    7cf8:	b005      	add	sp, #20
    7cfa:	f85d fb04 	ldr.w	pc, [sp], #4
    7cfe:	bf00      	nop
    7d00:	1fff8fdc 	.word	0x1fff8fdc

00007d04 <Ftm_Gpt_Ip_GetChInterruptStatusFlag>:
{
    7d04:	b082      	sub	sp, #8
    7d06:	4603      	mov	r3, r0
    7d08:	460a      	mov	r2, r1
    7d0a:	f88d 3007 	strb.w	r3, [sp, #7]
    7d0e:	4613      	mov	r3, r2
    7d10:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->CONTROLS[channel].CSC & FTM_CSC_CHF_MASK)) ? TRUE : FALSE;
    7d14:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d18:	4a09      	ldr	r2, [pc, #36]	; (7d40 <Ftm_Gpt_Ip_GetChInterruptStatusFlag+0x3c>)
    7d1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7d1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7d22:	3301      	adds	r3, #1
    7d24:	00db      	lsls	r3, r3, #3
    7d26:	4413      	add	r3, r2
    7d28:	685b      	ldr	r3, [r3, #4]
    7d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7d2e:	2b00      	cmp	r3, #0
    7d30:	bf14      	ite	ne
    7d32:	2301      	movne	r3, #1
    7d34:	2300      	moveq	r3, #0
    7d36:	b2db      	uxtb	r3, r3
}
    7d38:	4618      	mov	r0, r3
    7d3a:	b002      	add	sp, #8
    7d3c:	4770      	bx	lr
    7d3e:	bf00      	nop
    7d40:	0000bffc 	.word	0x0000bffc

00007d44 <Ftm_Gpt_Ip_GetCntValue>:
{
    7d44:	b082      	sub	sp, #8
    7d46:	4603      	mov	r3, r0
    7d48:	f88d 3007 	strb.w	r3, [sp, #7]
    return ftmGptBase[instance]->CNT;
    7d4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d50:	4a03      	ldr	r2, [pc, #12]	; (7d60 <Ftm_Gpt_Ip_GetCntValue+0x1c>)
    7d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d56:	685b      	ldr	r3, [r3, #4]
}
    7d58:	4618      	mov	r0, r3
    7d5a:	b002      	add	sp, #8
    7d5c:	4770      	bx	lr
    7d5e:	bf00      	nop
    7d60:	0000bffc 	.word	0x0000bffc

00007d64 <Ftm_Gpt_Ip_GetCompareValue>:
{
    7d64:	b082      	sub	sp, #8
    7d66:	4603      	mov	r3, r0
    7d68:	460a      	mov	r2, r1
    7d6a:	f88d 3007 	strb.w	r3, [sp, #7]
    7d6e:	4613      	mov	r3, r2
    7d70:	f88d 3006 	strb.w	r3, [sp, #6]
    return ftmGptBase[instance]->CONTROLS[channel].CV;
    7d74:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d78:	4a05      	ldr	r2, [pc, #20]	; (7d90 <Ftm_Gpt_Ip_GetCompareValue+0x2c>)
    7d7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7d7e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7d82:	3301      	adds	r3, #1
    7d84:	00db      	lsls	r3, r3, #3
    7d86:	4413      	add	r3, r2
    7d88:	689b      	ldr	r3, [r3, #8]
}
    7d8a:	4618      	mov	r0, r3
    7d8c:	b002      	add	sp, #8
    7d8e:	4770      	bx	lr
    7d90:	0000bffc 	.word	0x0000bffc

00007d94 <Gpt_Ipw_InitInstances>:
*
* @return       void
* @pre          The driver needs to be initialized.
*/
void Gpt_Ipw_InitInstances(const Gpt_ConfigType * configPtr)
{
    7d94:	b500      	push	{lr}
    7d96:	b085      	sub	sp, #20
    7d98:	9001      	str	r0, [sp, #4]

    uint8 index = 0U;
    7d9a:	2300      	movs	r3, #0
    7d9c:	f88d 300f 	strb.w	r3, [sp, #15]

    for(index = 0; index < configPtr->instanceCount; index++)
    7da0:	2300      	movs	r3, #0
    7da2:	f88d 300f 	strb.w	r3, [sp, #15]
    7da6:	e022      	b.n	7dee <Gpt_Ipw_InitInstances+0x5a>
    {
        switch((*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].instanceType)
    7da8:	9b01      	ldr	r3, [sp, #4]
    7daa:	68da      	ldr	r2, [r3, #12]
    7dac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7db0:	011b      	lsls	r3, r3, #4
    7db2:	4413      	add	r3, r2
    7db4:	681b      	ldr	r3, [r3, #0]
    7db6:	2b00      	cmp	r3, #0
    7db8:	d113      	bne.n	7de2 <Gpt_Ipw_InitInstances+0x4e>
        {
#if (FTM_GPT_IP_USED == STD_ON)
            case(GPT_FTM_MODULE):
            {
                Ftm_Gpt_Ip_Init((*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].instance,
    7dba:	9b01      	ldr	r3, [sp, #4]
    7dbc:	68da      	ldr	r2, [r3, #12]
    7dbe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7dc2:	011b      	lsls	r3, r3, #4
    7dc4:	4413      	add	r3, r2
    7dc6:	3304      	adds	r3, #4
    7dc8:	7818      	ldrb	r0, [r3, #0]
                                (*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].Gpt_Ipw_InstanceConfig.Ftm_Gpt_Ip_InstanceConfig);
    7dca:	9b01      	ldr	r3, [sp, #4]
    7dcc:	68da      	ldr	r2, [r3, #12]
                Ftm_Gpt_Ip_Init((*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].instance,
    7dce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7dd2:	011b      	lsls	r3, r3, #4
    7dd4:	4413      	add	r3, r2
    7dd6:	3308      	adds	r3, #8
    7dd8:	681b      	ldr	r3, [r3, #0]
    7dda:	4619      	mov	r1, r3
    7ddc:	f7fe fd2a 	bl	6834 <Ftm_Gpt_Ip_Init>
            }
            break;
    7de0:	e000      	b.n	7de4 <Gpt_Ipw_InitInstances+0x50>
            break;
#endif

            default:
                /*This switch branch is empty because it shall not be executed for normal behaviour*/
            break;
    7de2:	bf00      	nop
    for(index = 0; index < configPtr->instanceCount; index++)
    7de4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7de8:	3301      	adds	r3, #1
    7dea:	f88d 300f 	strb.w	r3, [sp, #15]
    7dee:	9b01      	ldr	r3, [sp, #4]
    7df0:	7a1b      	ldrb	r3, [r3, #8]
    7df2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7df6:	429a      	cmp	r2, r3
    7df8:	d3d6      	bcc.n	7da8 <Gpt_Ipw_InitInstances+0x14>
        }
    }
    return;
    7dfa:	bf00      	nop
}
    7dfc:	b005      	add	sp, #20
    7dfe:	f85d fb04 	ldr.w	pc, [sp], #4

00007e02 <Gpt_Ipw_Init>:
* @param[in]    pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return       void
* @pre          The driver needs to be initialized.
*/
void Gpt_Ipw_Init(const Gpt_Ipw_HwChannelConfigType *pHwChannelConfig)
{
    7e02:	b500      	push	{lr}
    7e04:	b083      	sub	sp, #12
    7e06:	9001      	str	r0, [sp, #4]

    switch(pHwChannelConfig->instanceType)
    7e08:	9b01      	ldr	r3, [sp, #4]
    7e0a:	681b      	ldr	r3, [r3, #0]
    7e0c:	2b00      	cmp	r3, #0
    7e0e:	d108      	bne.n	7e22 <Gpt_Ipw_Init+0x20>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {
            Ftm_Gpt_Ip_InitChannel(pHwChannelConfig->instance,
    7e10:	9b01      	ldr	r3, [sp, #4]
    7e12:	791a      	ldrb	r2, [r3, #4]
    7e14:	9b01      	ldr	r3, [sp, #4]
    7e16:	689b      	ldr	r3, [r3, #8]
    7e18:	4619      	mov	r1, r3
    7e1a:	4610      	mov	r0, r2
    7e1c:	f7fe fd4c 	bl	68b8 <Ftm_Gpt_Ip_InitChannel>
                                   pHwChannelConfig->Gpt_Ipw_ChannelConfig.Ftm_Gpt_Ip_ChannelConfig);
        }
        break;
    7e20:	e000      	b.n	7e24 <Gpt_Ipw_Init+0x22>
        }
            break;
#endif
        default:
            /* This switch branch is empty because it shall not be executed for normal behaviour */
        break;
    7e22:	bf00      	nop
    }
    return;
    7e24:	bf00      	nop
}
    7e26:	b003      	add	sp, #12
    7e28:	f85d fb04 	ldr.w	pc, [sp], #4

00007e2c <Gpt_Ipw_StartTimer>:
* @param[in]     uValue              Timeout period (in ticks) after which a notification shall occur (if enabled).
* @return        void
* @pre           The driver needs to be initialized.Call Gpt_StartTimer before.
*/
Std_ReturnType Gpt_Ipw_StartTimer(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig, Gpt_ValueType uValue)
{
    7e2c:	b500      	push	{lr}
    7e2e:	b085      	sub	sp, #20
    7e30:	9001      	str	r0, [sp, #4]
    7e32:	9100      	str	r1, [sp, #0]

    Std_ReturnType returnValue = (Std_ReturnType)E_NOT_OK;
    7e34:	2301      	movs	r3, #1
    7e36:	f88d 300f 	strb.w	r3, [sp, #15]

    switch(pHwChannelConfig->instanceType)
    7e3a:	9b01      	ldr	r3, [sp, #4]
    7e3c:	681b      	ldr	r3, [r3, #0]
    7e3e:	2b00      	cmp	r3, #0
    7e40:	d10c      	bne.n	7e5c <Gpt_Ipw_StartTimer+0x30>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
            {
                Ftm_Gpt_Ip_StartCounting(pHwChannelConfig->instance,
    7e42:	9b01      	ldr	r3, [sp, #4]
    7e44:	7918      	ldrb	r0, [r3, #4]
    7e46:	9b01      	ldr	r3, [sp, #4]
    7e48:	795b      	ldrb	r3, [r3, #5]
    7e4a:	9a00      	ldr	r2, [sp, #0]
    7e4c:	b292      	uxth	r2, r2
    7e4e:	4619      	mov	r1, r3
    7e50:	f7fe fde2 	bl	6a18 <Ftm_Gpt_Ip_StartCounting>
                                         pHwChannelConfig->channel,
                                         (uint16)uValue);
                returnValue = (Std_ReturnType)E_OK;
    7e54:	2300      	movs	r3, #0
    7e56:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        break;
    7e5a:	e000      	b.n	7e5e <Gpt_Ipw_StartTimer+0x32>
            }
            break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour */
        break;
    7e5c:	bf00      	nop
    }

    return returnValue;
    7e5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7e62:	4618      	mov	r0, r3
    7e64:	b005      	add	sp, #20
    7e66:	f85d fb04 	ldr.w	pc, [sp], #4

00007e6a <Gpt_Ipw_GetTimeElapsed>:
* @pre           The driver needs to be initialized.Call GetTimeElapsed before.
*
*/
Gpt_ValueType Gpt_Ipw_GetTimeElapsed(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig,
                                                      Gpt_HwChannelInfoType * pReturnHwChannelInfo)
{
    7e6a:	b500      	push	{lr}
    7e6c:	b085      	sub	sp, #20
    7e6e:	9001      	str	r0, [sp, #4]
    7e70:	9100      	str	r1, [sp, #0]
    uint32 returnValue;

    switch(pHwChannelConfig->instanceType)
    7e72:	9b01      	ldr	r3, [sp, #4]
    7e74:	681b      	ldr	r3, [r3, #0]
    7e76:	2b00      	cmp	r3, #0
    7e78:	d105      	bne.n	7e86 <Gpt_Ipw_GetTimeElapsed+0x1c>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {
            returnValue = Gpt_Ipw_FtmGetTimeElapsed(pHwChannelConfig, pReturnHwChannelInfo);
    7e7a:	9900      	ldr	r1, [sp, #0]
    7e7c:	9801      	ldr	r0, [sp, #4]
    7e7e:	f7f8 fd59 	bl	934 <Gpt_Ipw_FtmGetTimeElapsed>
    7e82:	9003      	str	r0, [sp, #12]
        }
        break;
    7e84:	e002      	b.n	7e8c <Gpt_Ipw_GetTimeElapsed+0x22>
        break;
#endif

        default:
             /* This switch branch is empty because it shall not be executed for normal behaviour */
             returnValue = 0U;
    7e86:	2300      	movs	r3, #0
    7e88:	9303      	str	r3, [sp, #12]
        break;
    7e8a:	bf00      	nop
    }
    return (Gpt_ValueType)returnValue;
    7e8c:	9b03      	ldr	r3, [sp, #12]
}
    7e8e:	4618      	mov	r0, r3
    7e90:	b005      	add	sp, #20
    7e92:	f85d fb04 	ldr.w	pc, [sp], #4

00007e96 <Gpt_Ipw_StopTimer>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized.Call StopTimer before.
*/
void Gpt_Ipw_StopTimer(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    7e96:	b500      	push	{lr}
    7e98:	b083      	sub	sp, #12
    7e9a:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    7e9c:	9b01      	ldr	r3, [sp, #4]
    7e9e:	681b      	ldr	r3, [r3, #0]
    7ea0:	2b00      	cmp	r3, #0
    7ea2:	d108      	bne.n	7eb6 <Gpt_Ipw_StopTimer+0x20>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {

            Ftm_Gpt_Ip_DisableChannelInterrupt(pHwChannelConfig->instance,
    7ea4:	9b01      	ldr	r3, [sp, #4]
    7ea6:	791a      	ldrb	r2, [r3, #4]
    7ea8:	9b01      	ldr	r3, [sp, #4]
    7eaa:	795b      	ldrb	r3, [r3, #5]
    7eac:	4619      	mov	r1, r3
    7eae:	4610      	mov	r0, r2
    7eb0:	f7fe fe5c 	bl	6b6c <Ftm_Gpt_Ip_DisableChannelInterrupt>
                                               pHwChannelConfig->channel);
        }
        break;
    7eb4:	e000      	b.n	7eb8 <Gpt_Ipw_StopTimer+0x22>
        }
            break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    7eb6:	bf00      	nop
    }

    return;
    7eb8:	bf00      	nop
}
    7eba:	b003      	add	sp, #12
    7ebc:	f85d fb04 	ldr.w	pc, [sp], #4

00007ec0 <Gpt_Ipw_EnableInterrupt>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized.
*/
void Gpt_Ipw_EnableInterrupt(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    7ec0:	b082      	sub	sp, #8
    7ec2:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    7ec4:	9b01      	ldr	r3, [sp, #4]
    7ec6:	681b      	ldr	r3, [r3, #0]
    7ec8:	2b00      	cmp	r3, #0
        }
        break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    7eca:	bf00      	nop
    }

    return;
    7ecc:	bf00      	nop
}
    7ece:	b002      	add	sp, #8
    7ed0:	4770      	bx	lr

00007ed2 <Gpt_Ipw_DeInit>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized. On/Off by the configuration parameter: GPT_DEINIT_API
*/
void Gpt_Ipw_DeInit(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    7ed2:	b500      	push	{lr}
    7ed4:	b083      	sub	sp, #12
    7ed6:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    7ed8:	9b01      	ldr	r3, [sp, #4]
    7eda:	681b      	ldr	r3, [r3, #0]
    7edc:	2b00      	cmp	r3, #0
    7ede:	d105      	bne.n	7eec <Gpt_Ipw_DeInit+0x1a>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {
           Ftm_Gpt_Ip_Deinit(pHwChannelConfig->instance);
    7ee0:	9b01      	ldr	r3, [sp, #4]
    7ee2:	791b      	ldrb	r3, [r3, #4]
    7ee4:	4618      	mov	r0, r3
    7ee6:	f7fe fd4b 	bl	6980 <Ftm_Gpt_Ip_Deinit>
        }
        break;
    7eea:	e000      	b.n	7eee <Gpt_Ipw_DeInit+0x1c>
        }
        break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    7eec:	bf00      	nop
    }
    return;
    7eee:	bf00      	nop
}
    7ef0:	b003      	add	sp, #12
    7ef2:	f85d fb04 	ldr.w	pc, [sp], #4

00007ef6 <Gpt_Ipw_DisableInterrupt>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized.On/Off by the configuration parameter: GPT_ENABLE_DISABLE_NOTIFICATION_API
*/
void Gpt_Ipw_DisableInterrupt(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    7ef6:	b082      	sub	sp, #8
    7ef8:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    7efa:	9b01      	ldr	r3, [sp, #4]
    7efc:	681b      	ldr	r3, [r3, #0]
    7efe:	2b00      	cmp	r3, #0
        }
        break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    7f00:	bf00      	nop
    }

    return;
    7f02:	bf00      	nop
}
    7f04:	b002      	add	sp, #8
    7f06:	4770      	bx	lr

00007f08 <Gpt_Ipw_StartPredefTimer>:

void Gpt_Ipw_StartPredefTimer
(
    const Gpt_ConfigType * configPtr
)
{
    7f08:	b510      	push	{r4, lr}
    7f0a:	b086      	sub	sp, #24
    7f0c:	9003      	str	r0, [sp, #12]
    Gpt_ChannelType channel;
    const Gpt_HwPredefChannelConfigType * pHwChannelConfig;

    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    7f0e:	2300      	movs	r3, #0
    7f10:	f88d 3017 	strb.w	r3, [sp, #23]
    7f14:	e025      	b.n	7f62 <Gpt_Ipw_StartPredefTimer+0x5a>
    {
        pHwChannelConfig = (configPtr->Gpt_pChannelPredefConfigType)[channel];
    7f16:	9b03      	ldr	r3, [sp, #12]
    7f18:	691a      	ldr	r2, [r3, #16]
    7f1a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7f1e:	009b      	lsls	r3, r3, #2
    7f20:	4413      	add	r3, r2
    7f22:	681b      	ldr	r3, [r3, #0]
    7f24:	9304      	str	r3, [sp, #16]

        if(NULL_PTR != pHwChannelConfig)
    7f26:	9b04      	ldr	r3, [sp, #16]
    7f28:	2b00      	cmp	r3, #0
    7f2a:	d012      	beq.n	7f52 <Gpt_Ipw_StartPredefTimer+0x4a>
        {
            switch(pHwChannelConfig->instanceType)
    7f2c:	9b04      	ldr	r3, [sp, #16]
    7f2e:	681b      	ldr	r3, [r3, #0]
    7f30:	2b00      	cmp	r3, #0
    7f32:	d110      	bne.n	7f56 <Gpt_Ipw_StartPredefTimer+0x4e>
            {
#if (FTM_GPT_IP_USED == STD_ON)
            case GPT_FTM_MODULE:
            {
                Ftm_Gpt_Ip_StartPredefTimer(pHwChannelConfig->instance, \
    7f34:	9b04      	ldr	r3, [sp, #16]
    7f36:	7918      	ldrb	r0, [r3, #4]
    7f38:	9b04      	ldr	r3, [sp, #16]
    7f3a:	7959      	ldrb	r1, [r3, #5]
    7f3c:	9b04      	ldr	r3, [sp, #16]
    7f3e:	7a1a      	ldrb	r2, [r3, #8]
    7f40:	9b04      	ldr	r3, [sp, #16]
    7f42:	799c      	ldrb	r4, [r3, #6]
    7f44:	9b04      	ldr	r3, [sp, #16]
    7f46:	79db      	ldrb	r3, [r3, #7]
    7f48:	9300      	str	r3, [sp, #0]
    7f4a:	4623      	mov	r3, r4
    7f4c:	f7fe fe46 	bl	6bdc <Ftm_Gpt_Ip_StartPredefTimer>
                                            pHwChannelConfig->channel, \
                                            pHwChannelConfig->Gpt_uPrescaler, \
                                            pHwChannelConfig->Gpt_uClockSource, \
                                            pHwChannelConfig->Gpt_bFreezeEnable);
            }
            break;
    7f50:	e002      	b.n	7f58 <Gpt_Ipw_StartPredefTimer+0x50>
#endif
            default:
                /*This switch branch is empty because it shall not be executed for normal behaviour*/
            break;
            }
        }
    7f52:	bf00      	nop
    7f54:	e000      	b.n	7f58 <Gpt_Ipw_StartPredefTimer+0x50>
            break;
    7f56:	bf00      	nop
    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    7f58:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7f5c:	3301      	adds	r3, #1
    7f5e:	f88d 3017 	strb.w	r3, [sp, #23]
    7f62:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7f66:	2b03      	cmp	r3, #3
    7f68:	d9d5      	bls.n	7f16 <Gpt_Ipw_StartPredefTimer+0xe>
    }

    return;
    7f6a:	bf00      	nop
}
    7f6c:	b006      	add	sp, #24
    7f6e:	bd10      	pop	{r4, pc}

00007f70 <Gpt_Ipw_GetPredefTimerValue>:
(
    const Gpt_HwPredefChannelConfigType * pHwChannelConfig,
    Gpt_PredefTimerType PredefTimer,
    uint32 * TimeValuePtr
)
{
    7f70:	b500      	push	{lr}
    7f72:	b087      	sub	sp, #28
    7f74:	9003      	str	r0, [sp, #12]
    7f76:	9102      	str	r1, [sp, #8]
    7f78:	9201      	str	r2, [sp, #4]
    uint32 u32ReturnValue = 0U;
    7f7a:	2300      	movs	r3, #0
    7f7c:	9305      	str	r3, [sp, #20]
    switch(pHwChannelConfig->instanceType)
    7f7e:	9b03      	ldr	r3, [sp, #12]
    7f80:	681b      	ldr	r3, [r3, #0]
    7f82:	2b00      	cmp	r3, #0
    7f84:	d106      	bne.n	7f94 <Gpt_Ipw_GetPredefTimerValue+0x24>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case GPT_FTM_MODULE:
        {
            u32ReturnValue = Ftm_Gpt_Ip_GetCntValue(pHwChannelConfig->instance);
    7f86:	9b03      	ldr	r3, [sp, #12]
    7f88:	791b      	ldrb	r3, [r3, #4]
    7f8a:	4618      	mov	r0, r3
    7f8c:	f7ff feda 	bl	7d44 <Ftm_Gpt_Ip_GetCntValue>
    7f90:	9005      	str	r0, [sp, #20]
        }
        break;
    7f92:	e000      	b.n	7f96 <Gpt_Ipw_GetPredefTimerValue+0x26>
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    7f94:	bf00      	nop
    }
    if(0U != u32ReturnValue)
    7f96:	9b05      	ldr	r3, [sp, #20]
    7f98:	2b00      	cmp	r3, #0
    7f9a:	d020      	beq.n	7fde <Gpt_Ipw_GetPredefTimerValue+0x6e>
    7f9c:	9b02      	ldr	r3, [sp, #8]
    7f9e:	2b03      	cmp	r3, #3
    7fa0:	d81f      	bhi.n	7fe2 <Gpt_Ipw_GetPredefTimerValue+0x72>
    7fa2:	a201      	add	r2, pc, #4	; (adr r2, 7fa8 <Gpt_Ipw_GetPredefTimerValue+0x38>)
    7fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7fa8:	00007fb9 	.word	0x00007fb9
    7fac:	00007fc3 	.word	0x00007fc3
    7fb0:	00007fcf 	.word	0x00007fcf
    7fb4:	00007fd7 	.word	0x00007fd7
    {
        switch(PredefTimer)
        {
            case GPT_PREDEF_TIMER_1US_16BIT:
                *TimeValuePtr = (0x0000FFFFU & u32ReturnValue);
    7fb8:	9b05      	ldr	r3, [sp, #20]
    7fba:	b29a      	uxth	r2, r3
    7fbc:	9b01      	ldr	r3, [sp, #4]
    7fbe:	601a      	str	r2, [r3, #0]
            break;
    7fc0:	e010      	b.n	7fe4 <Gpt_Ipw_GetPredefTimerValue+0x74>
            case GPT_PREDEF_TIMER_1US_24BIT:
                *TimeValuePtr = (0x00FFFFFFU & u32ReturnValue);
    7fc2:	9b05      	ldr	r3, [sp, #20]
    7fc4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    7fc8:	9b01      	ldr	r3, [sp, #4]
    7fca:	601a      	str	r2, [r3, #0]
            break;
    7fcc:	e00a      	b.n	7fe4 <Gpt_Ipw_GetPredefTimerValue+0x74>
            case GPT_PREDEF_TIMER_1US_32BIT:
                *TimeValuePtr = u32ReturnValue;
    7fce:	9b01      	ldr	r3, [sp, #4]
    7fd0:	9a05      	ldr	r2, [sp, #20]
    7fd2:	601a      	str	r2, [r3, #0]
            break;
    7fd4:	e006      	b.n	7fe4 <Gpt_Ipw_GetPredefTimerValue+0x74>
            case GPT_PREDEF_TIMER_100US_32BIT:
                *TimeValuePtr = u32ReturnValue;
    7fd6:	9b01      	ldr	r3, [sp, #4]
    7fd8:	9a05      	ldr	r2, [sp, #20]
    7fda:	601a      	str	r2, [r3, #0]
            break;
    7fdc:	e002      	b.n	7fe4 <Gpt_Ipw_GetPredefTimerValue+0x74>
            default:
                /* 32bit timer */
            break;
        }
    }
    7fde:	bf00      	nop
    7fe0:	e000      	b.n	7fe4 <Gpt_Ipw_GetPredefTimerValue+0x74>
            break;
    7fe2:	bf00      	nop
    return;
    7fe4:	bf00      	nop
}
    7fe6:	b007      	add	sp, #28
    7fe8:	f85d fb04 	ldr.w	pc, [sp], #4

00007fec <Gpt_Ipw_StopPredefTimer>:
*/
void Gpt_Ipw_StopPredefTimer
(
    const Gpt_ConfigType * configPtr
)
{
    7fec:	b500      	push	{lr}
    7fee:	b085      	sub	sp, #20
    7ff0:	9001      	str	r0, [sp, #4]
    Gpt_ChannelType channel;
    const Gpt_HwPredefChannelConfigType * pHwChannelConfig;

    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    7ff2:	2300      	movs	r3, #0
    7ff4:	f88d 300f 	strb.w	r3, [sp, #15]
    7ff8:	e01f      	b.n	803a <Gpt_Ipw_StopPredefTimer+0x4e>
    {

        pHwChannelConfig = (configPtr->Gpt_pChannelPredefConfigType)[channel];
    7ffa:	9b01      	ldr	r3, [sp, #4]
    7ffc:	691a      	ldr	r2, [r3, #16]
    7ffe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8002:	009b      	lsls	r3, r3, #2
    8004:	4413      	add	r3, r2
    8006:	681b      	ldr	r3, [r3, #0]
    8008:	9302      	str	r3, [sp, #8]
        if(NULL_PTR != pHwChannelConfig)
    800a:	9b02      	ldr	r3, [sp, #8]
    800c:	2b00      	cmp	r3, #0
    800e:	d00c      	beq.n	802a <Gpt_Ipw_StopPredefTimer+0x3e>
        {
            switch(pHwChannelConfig->instanceType)
    8010:	9b02      	ldr	r3, [sp, #8]
    8012:	681b      	ldr	r3, [r3, #0]
    8014:	2b00      	cmp	r3, #0
    8016:	d10a      	bne.n	802e <Gpt_Ipw_StopPredefTimer+0x42>
            {
#if (FTM_GPT_IP_USED == STD_ON)
            case GPT_FTM_MODULE:
            {
                Ftm_Gpt_Ip_StopPredefTimer(pHwChannelConfig->instance, \
    8018:	9b02      	ldr	r3, [sp, #8]
    801a:	791a      	ldrb	r2, [r3, #4]
    801c:	9b02      	ldr	r3, [sp, #8]
    801e:	795b      	ldrb	r3, [r3, #5]
    8020:	4619      	mov	r1, r3
    8022:	4610      	mov	r0, r2
    8024:	f7fe fe6c 	bl	6d00 <Ftm_Gpt_Ip_StopPredefTimer>
                                           pHwChannelConfig->channel);
            }
            break;
    8028:	e002      	b.n	8030 <Gpt_Ipw_StopPredefTimer+0x44>
#endif
            default:
                /*This switch branch is empty because it shall not be executed for normal behaviour*/
            break;
            }
        }
    802a:	bf00      	nop
    802c:	e000      	b.n	8030 <Gpt_Ipw_StopPredefTimer+0x44>
            break;
    802e:	bf00      	nop
    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    8030:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8034:	3301      	adds	r3, #1
    8036:	f88d 300f 	strb.w	r3, [sp, #15]
    803a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    803e:	2b03      	cmp	r3, #3
    8040:	d9db      	bls.n	7ffa <Gpt_Ipw_StopPredefTimer+0xe>
    }
    return;
    8042:	bf00      	nop
}
    8044:	b005      	add	sp, #20
    8046:	f85d fb04 	ldr.w	pc, [sp], #4
    804a:	bf00      	nop

0000804c <EcuM_SetWakeupEvent>:
* 
* @param[in]     events  last wakeup event
* 
*/
void EcuM_SetWakeupEvent(EcuM_WakeupSourceType events)
{
    804c:	b082      	sub	sp, #8
    804e:	9001      	str	r0, [sp, #4]
    EcuMLastWakeupEvent = events;
    8050:	4a02      	ldr	r2, [pc, #8]	; (805c <EcuM_SetWakeupEvent+0x10>)
    8052:	9b01      	ldr	r3, [sp, #4]
    8054:	6013      	str	r3, [r2, #0]
}
    8056:	bf00      	nop
    8058:	b002      	add	sp, #8
    805a:	4770      	bx	lr
    805c:	1fff8ff8 	.word	0x1fff8ff8

00008060 <EcuM_ValidateWakeupEvent>:
* @details This is a function stub only. Functionality is void in this implementation
* 
* @param[in]     events wakeup event to validate
*/
void EcuM_ValidateWakeupEvent(EcuM_WakeupSourceType events)
{
    8060:	b082      	sub	sp, #8
    8062:	9001      	str	r0, [sp, #4]
    (void)events;
}
    8064:	bf00      	nop
    8066:	b002      	add	sp, #8
    8068:	4770      	bx	lr

0000806a <EcuM_CheckWakeup>:
* 
* @param[in]     wakeupSource  wakeup source ID
* 
*/
void EcuM_CheckWakeup(EcuM_WakeupSourceType wakeupSource)
{
    806a:	b082      	sub	sp, #8
    806c:	9001      	str	r0, [sp, #4]
#endif
#ifdef TEST_ICU
    Icu_CheckWakeup(wakeupSource);
#endif
    (void)wakeupSource;
}
    806e:	bf00      	nop
    8070:	b002      	add	sp, #8
    8072:	4770      	bx	lr

00008074 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    8074:	b500      	push	{lr}
    8076:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8078:	f7f8 fda8 	bl	bcc <Sys_GetCoreID>
    807c:	4603      	mov	r3, r0
    807e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    8080:	4a10      	ldr	r2, [pc, #64]	; (80c4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    8082:	9b01      	ldr	r3, [sp, #4]
    8084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8088:	2b00      	cmp	r3, #0
    808a:	d10d      	bne.n	80a8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    808c:	f7f8 fcb4 	bl	9f8 <Dio_schm_read_msr>
    8090:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8092:	9b00      	ldr	r3, [sp, #0]
    8094:	f003 0301 	and.w	r3, r3, #1
    8098:	2b00      	cmp	r3, #0
    809a:	d100      	bne.n	809e <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    809c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    809e:	490a      	ldr	r1, [pc, #40]	; (80c8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    80a0:	9b01      	ldr	r3, [sp, #4]
    80a2:	9a00      	ldr	r2, [sp, #0]
    80a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    80a8:	4a06      	ldr	r2, [pc, #24]	; (80c4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    80aa:	9b01      	ldr	r3, [sp, #4]
    80ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80b0:	1c5a      	adds	r2, r3, #1
    80b2:	4904      	ldr	r1, [pc, #16]	; (80c4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    80b4:	9b01      	ldr	r3, [sp, #4]
    80b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    80ba:	bf00      	nop
    80bc:	b003      	add	sp, #12
    80be:	f85d fb04 	ldr.w	pc, [sp], #4
    80c2:	bf00      	nop
    80c4:	1fff9000 	.word	0x1fff9000
    80c8:	1fff8ffc 	.word	0x1fff8ffc

000080cc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    80cc:	b500      	push	{lr}
    80ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    80d0:	f7f8 fd7c 	bl	bcc <Sys_GetCoreID>
    80d4:	4603      	mov	r3, r0
    80d6:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    80d8:	4a0d      	ldr	r2, [pc, #52]	; (8110 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    80da:	9b01      	ldr	r3, [sp, #4]
    80dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80e0:	1e5a      	subs	r2, r3, #1
    80e2:	490b      	ldr	r1, [pc, #44]	; (8110 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    80e4:	9b01      	ldr	r3, [sp, #4]
    80e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    80ea:	4a0a      	ldr	r2, [pc, #40]	; (8114 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    80ec:	9b01      	ldr	r3, [sp, #4]
    80ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80f2:	f003 0301 	and.w	r3, r3, #1
    80f6:	2b00      	cmp	r3, #0
    80f8:	d106      	bne.n	8108 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    80fa:	4a05      	ldr	r2, [pc, #20]	; (8110 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    80fc:	9b01      	ldr	r3, [sp, #4]
    80fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8102:	2b00      	cmp	r3, #0
    8104:	d100      	bne.n	8108 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8106:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8108:	bf00      	nop
    810a:	b003      	add	sp, #12
    810c:	f85d fb04 	ldr.w	pc, [sp], #4
    8110:	1fff9000 	.word	0x1fff9000
    8114:	1fff8ffc 	.word	0x1fff8ffc

00008118 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    8118:	b500      	push	{lr}
    811a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    811c:	f7f8 fd56 	bl	bcc <Sys_GetCoreID>
    8120:	4603      	mov	r3, r0
    8122:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    8124:	4a10      	ldr	r2, [pc, #64]	; (8168 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    8126:	9b01      	ldr	r3, [sp, #4]
    8128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    812c:	2b00      	cmp	r3, #0
    812e:	d10d      	bne.n	814c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8130:	f7f8 fc62 	bl	9f8 <Dio_schm_read_msr>
    8134:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8136:	9b00      	ldr	r3, [sp, #0]
    8138:	f003 0301 	and.w	r3, r3, #1
    813c:	2b00      	cmp	r3, #0
    813e:	d100      	bne.n	8142 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8140:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    8142:	490a      	ldr	r1, [pc, #40]	; (816c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    8144:	9b01      	ldr	r3, [sp, #4]
    8146:	9a00      	ldr	r2, [sp, #0]
    8148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    814c:	4a06      	ldr	r2, [pc, #24]	; (8168 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    814e:	9b01      	ldr	r3, [sp, #4]
    8150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8154:	1c5a      	adds	r2, r3, #1
    8156:	4904      	ldr	r1, [pc, #16]	; (8168 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    8158:	9b01      	ldr	r3, [sp, #4]
    815a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    815e:	bf00      	nop
    8160:	b003      	add	sp, #12
    8162:	f85d fb04 	ldr.w	pc, [sp], #4
    8166:	bf00      	nop
    8168:	1fff9008 	.word	0x1fff9008
    816c:	1fff9004 	.word	0x1fff9004

00008170 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    8170:	b500      	push	{lr}
    8172:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8174:	f7f8 fd2a 	bl	bcc <Sys_GetCoreID>
    8178:	4603      	mov	r3, r0
    817a:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    817c:	4a0d      	ldr	r2, [pc, #52]	; (81b4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    817e:	9b01      	ldr	r3, [sp, #4]
    8180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8184:	1e5a      	subs	r2, r3, #1
    8186:	490b      	ldr	r1, [pc, #44]	; (81b4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    8188:	9b01      	ldr	r3, [sp, #4]
    818a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    818e:	4a0a      	ldr	r2, [pc, #40]	; (81b8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    8190:	9b01      	ldr	r3, [sp, #4]
    8192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8196:	f003 0301 	and.w	r3, r3, #1
    819a:	2b00      	cmp	r3, #0
    819c:	d106      	bne.n	81ac <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    819e:	4a05      	ldr	r2, [pc, #20]	; (81b4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    81a0:	9b01      	ldr	r3, [sp, #4]
    81a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81a6:	2b00      	cmp	r3, #0
    81a8:	d100      	bne.n	81ac <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    81aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    81ac:	bf00      	nop
    81ae:	b003      	add	sp, #12
    81b0:	f85d fb04 	ldr.w	pc, [sp], #4
    81b4:	1fff9008 	.word	0x1fff9008
    81b8:	1fff9004 	.word	0x1fff9004

000081bc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00(void)
{
    81bc:	b500      	push	{lr}
    81be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    81c0:	f7f8 fd04 	bl	bcc <Sys_GetCoreID>
    81c4:	4603      	mov	r3, r0
    81c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId])
    81c8:	4a10      	ldr	r2, [pc, #64]	; (820c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x50>)
    81ca:	9b01      	ldr	r3, [sp, #4]
    81cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81d0:	2b00      	cmp	r3, #0
    81d2:	d10d      	bne.n	81f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    81d4:	f7f8 fc19 	bl	a0a <Gpt_schm_read_msr>
    81d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    81da:	9b00      	ldr	r3, [sp, #0]
    81dc:	f003 0301 	and.w	r3, r3, #1
    81e0:	2b00      	cmp	r3, #0
    81e2:	d100      	bne.n	81e6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    81e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    81e6:	490a      	ldr	r1, [pc, #40]	; (8210 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x54>)
    81e8:	9b01      	ldr	r3, [sp, #4]
    81ea:	9a00      	ldr	r2, [sp, #0]
    81ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId]++;
    81f0:	4a06      	ldr	r2, [pc, #24]	; (820c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x50>)
    81f2:	9b01      	ldr	r3, [sp, #4]
    81f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81f8:	1c5a      	adds	r2, r3, #1
    81fa:	4904      	ldr	r1, [pc, #16]	; (820c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x50>)
    81fc:	9b01      	ldr	r3, [sp, #4]
    81fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8202:	bf00      	nop
    8204:	b003      	add	sp, #12
    8206:	f85d fb04 	ldr.w	pc, [sp], #4
    820a:	bf00      	nop
    820c:	1fff9010 	.word	0x1fff9010
    8210:	1fff900c 	.word	0x1fff900c

00008214 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00(void)
{
    8214:	b500      	push	{lr}
    8216:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8218:	f7f8 fcd8 	bl	bcc <Sys_GetCoreID>
    821c:	4603      	mov	r3, r0
    821e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId]--;
    8220:	4a0d      	ldr	r2, [pc, #52]	; (8258 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x44>)
    8222:	9b01      	ldr	r3, [sp, #4]
    8224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8228:	1e5a      	subs	r2, r3, #1
    822a:	490b      	ldr	r1, [pc, #44]	; (8258 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x44>)
    822c:	9b01      	ldr	r3, [sp, #4]
    822e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    8232:	4a0a      	ldr	r2, [pc, #40]	; (825c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x48>)
    8234:	9b01      	ldr	r3, [sp, #4]
    8236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    823a:	f003 0301 	and.w	r3, r3, #1
    823e:	2b00      	cmp	r3, #0
    8240:	d106      	bne.n	8250 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x3c>
    8242:	4a05      	ldr	r2, [pc, #20]	; (8258 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x44>)
    8244:	9b01      	ldr	r3, [sp, #4]
    8246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    824a:	2b00      	cmp	r3, #0
    824c:	d100      	bne.n	8250 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    824e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8250:	bf00      	nop
    8252:	b003      	add	sp, #12
    8254:	f85d fb04 	ldr.w	pc, [sp], #4
    8258:	1fff9010 	.word	0x1fff9010
    825c:	1fff900c 	.word	0x1fff900c

00008260 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01(void)
{
    8260:	b500      	push	{lr}
    8262:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8264:	f7f8 fcb2 	bl	bcc <Sys_GetCoreID>
    8268:	4603      	mov	r3, r0
    826a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId])
    826c:	4a10      	ldr	r2, [pc, #64]	; (82b0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x50>)
    826e:	9b01      	ldr	r3, [sp, #4]
    8270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8274:	2b00      	cmp	r3, #0
    8276:	d10d      	bne.n	8294 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8278:	f7f8 fbc7 	bl	a0a <Gpt_schm_read_msr>
    827c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    827e:	9b00      	ldr	r3, [sp, #0]
    8280:	f003 0301 	and.w	r3, r3, #1
    8284:	2b00      	cmp	r3, #0
    8286:	d100      	bne.n	828a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8288:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    828a:	490a      	ldr	r1, [pc, #40]	; (82b4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x54>)
    828c:	9b01      	ldr	r3, [sp, #4]
    828e:	9a00      	ldr	r2, [sp, #0]
    8290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId]++;
    8294:	4a06      	ldr	r2, [pc, #24]	; (82b0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x50>)
    8296:	9b01      	ldr	r3, [sp, #4]
    8298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    829c:	1c5a      	adds	r2, r3, #1
    829e:	4904      	ldr	r1, [pc, #16]	; (82b0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x50>)
    82a0:	9b01      	ldr	r3, [sp, #4]
    82a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    82a6:	bf00      	nop
    82a8:	b003      	add	sp, #12
    82aa:	f85d fb04 	ldr.w	pc, [sp], #4
    82ae:	bf00      	nop
    82b0:	1fff9018 	.word	0x1fff9018
    82b4:	1fff9014 	.word	0x1fff9014

000082b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01(void)
{
    82b8:	b500      	push	{lr}
    82ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    82bc:	f7f8 fc86 	bl	bcc <Sys_GetCoreID>
    82c0:	4603      	mov	r3, r0
    82c2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId]--;
    82c4:	4a0d      	ldr	r2, [pc, #52]	; (82fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x44>)
    82c6:	9b01      	ldr	r3, [sp, #4]
    82c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82cc:	1e5a      	subs	r2, r3, #1
    82ce:	490b      	ldr	r1, [pc, #44]	; (82fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x44>)
    82d0:	9b01      	ldr	r3, [sp, #4]
    82d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    82d6:	4a0a      	ldr	r2, [pc, #40]	; (8300 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x48>)
    82d8:	9b01      	ldr	r3, [sp, #4]
    82da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82de:	f003 0301 	and.w	r3, r3, #1
    82e2:	2b00      	cmp	r3, #0
    82e4:	d106      	bne.n	82f4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x3c>
    82e6:	4a05      	ldr	r2, [pc, #20]	; (82fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x44>)
    82e8:	9b01      	ldr	r3, [sp, #4]
    82ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82ee:	2b00      	cmp	r3, #0
    82f0:	d100      	bne.n	82f4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    82f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    82f4:	bf00      	nop
    82f6:	b003      	add	sp, #12
    82f8:	f85d fb04 	ldr.w	pc, [sp], #4
    82fc:	1fff9018 	.word	0x1fff9018
    8300:	1fff9014 	.word	0x1fff9014

00008304 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02(void)
{
    8304:	b500      	push	{lr}
    8306:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8308:	f7f8 fc60 	bl	bcc <Sys_GetCoreID>
    830c:	4603      	mov	r3, r0
    830e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId])
    8310:	4a10      	ldr	r2, [pc, #64]	; (8354 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x50>)
    8312:	9b01      	ldr	r3, [sp, #4]
    8314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8318:	2b00      	cmp	r3, #0
    831a:	d10d      	bne.n	8338 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    831c:	f7f8 fb75 	bl	a0a <Gpt_schm_read_msr>
    8320:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8322:	9b00      	ldr	r3, [sp, #0]
    8324:	f003 0301 	and.w	r3, r3, #1
    8328:	2b00      	cmp	r3, #0
    832a:	d100      	bne.n	832e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    832c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    832e:	490a      	ldr	r1, [pc, #40]	; (8358 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x54>)
    8330:	9b01      	ldr	r3, [sp, #4]
    8332:	9a00      	ldr	r2, [sp, #0]
    8334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId]++;
    8338:	4a06      	ldr	r2, [pc, #24]	; (8354 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x50>)
    833a:	9b01      	ldr	r3, [sp, #4]
    833c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8340:	1c5a      	adds	r2, r3, #1
    8342:	4904      	ldr	r1, [pc, #16]	; (8354 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x50>)
    8344:	9b01      	ldr	r3, [sp, #4]
    8346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    834a:	bf00      	nop
    834c:	b003      	add	sp, #12
    834e:	f85d fb04 	ldr.w	pc, [sp], #4
    8352:	bf00      	nop
    8354:	1fff9020 	.word	0x1fff9020
    8358:	1fff901c 	.word	0x1fff901c

0000835c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02(void)
{
    835c:	b500      	push	{lr}
    835e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8360:	f7f8 fc34 	bl	bcc <Sys_GetCoreID>
    8364:	4603      	mov	r3, r0
    8366:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId]--;
    8368:	4a0d      	ldr	r2, [pc, #52]	; (83a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x44>)
    836a:	9b01      	ldr	r3, [sp, #4]
    836c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8370:	1e5a      	subs	r2, r3, #1
    8372:	490b      	ldr	r1, [pc, #44]	; (83a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x44>)
    8374:	9b01      	ldr	r3, [sp, #4]
    8376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    837a:	4a0a      	ldr	r2, [pc, #40]	; (83a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x48>)
    837c:	9b01      	ldr	r3, [sp, #4]
    837e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8382:	f003 0301 	and.w	r3, r3, #1
    8386:	2b00      	cmp	r3, #0
    8388:	d106      	bne.n	8398 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x3c>
    838a:	4a05      	ldr	r2, [pc, #20]	; (83a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x44>)
    838c:	9b01      	ldr	r3, [sp, #4]
    838e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8392:	2b00      	cmp	r3, #0
    8394:	d100      	bne.n	8398 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8396:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8398:	bf00      	nop
    839a:	b003      	add	sp, #12
    839c:	f85d fb04 	ldr.w	pc, [sp], #4
    83a0:	1fff9020 	.word	0x1fff9020
    83a4:	1fff901c 	.word	0x1fff901c

000083a8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03(void)
{
    83a8:	b500      	push	{lr}
    83aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    83ac:	f7f8 fc0e 	bl	bcc <Sys_GetCoreID>
    83b0:	4603      	mov	r3, r0
    83b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId])
    83b4:	4a10      	ldr	r2, [pc, #64]	; (83f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x50>)
    83b6:	9b01      	ldr	r3, [sp, #4]
    83b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83bc:	2b00      	cmp	r3, #0
    83be:	d10d      	bne.n	83dc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    83c0:	f7f8 fb23 	bl	a0a <Gpt_schm_read_msr>
    83c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    83c6:	9b00      	ldr	r3, [sp, #0]
    83c8:	f003 0301 	and.w	r3, r3, #1
    83cc:	2b00      	cmp	r3, #0
    83ce:	d100      	bne.n	83d2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    83d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    83d2:	490a      	ldr	r1, [pc, #40]	; (83fc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x54>)
    83d4:	9b01      	ldr	r3, [sp, #4]
    83d6:	9a00      	ldr	r2, [sp, #0]
    83d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId]++;
    83dc:	4a06      	ldr	r2, [pc, #24]	; (83f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x50>)
    83de:	9b01      	ldr	r3, [sp, #4]
    83e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83e4:	1c5a      	adds	r2, r3, #1
    83e6:	4904      	ldr	r1, [pc, #16]	; (83f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x50>)
    83e8:	9b01      	ldr	r3, [sp, #4]
    83ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    83ee:	bf00      	nop
    83f0:	b003      	add	sp, #12
    83f2:	f85d fb04 	ldr.w	pc, [sp], #4
    83f6:	bf00      	nop
    83f8:	1fff9028 	.word	0x1fff9028
    83fc:	1fff9024 	.word	0x1fff9024

00008400 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03(void)
{
    8400:	b500      	push	{lr}
    8402:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8404:	f7f8 fbe2 	bl	bcc <Sys_GetCoreID>
    8408:	4603      	mov	r3, r0
    840a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId]--;
    840c:	4a0d      	ldr	r2, [pc, #52]	; (8444 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x44>)
    840e:	9b01      	ldr	r3, [sp, #4]
    8410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8414:	1e5a      	subs	r2, r3, #1
    8416:	490b      	ldr	r1, [pc, #44]	; (8444 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x44>)
    8418:	9b01      	ldr	r3, [sp, #4]
    841a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    841e:	4a0a      	ldr	r2, [pc, #40]	; (8448 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x48>)
    8420:	9b01      	ldr	r3, [sp, #4]
    8422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8426:	f003 0301 	and.w	r3, r3, #1
    842a:	2b00      	cmp	r3, #0
    842c:	d106      	bne.n	843c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x3c>
    842e:	4a05      	ldr	r2, [pc, #20]	; (8444 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x44>)
    8430:	9b01      	ldr	r3, [sp, #4]
    8432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8436:	2b00      	cmp	r3, #0
    8438:	d100      	bne.n	843c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    843a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    843c:	bf00      	nop
    843e:	b003      	add	sp, #12
    8440:	f85d fb04 	ldr.w	pc, [sp], #4
    8444:	1fff9028 	.word	0x1fff9028
    8448:	1fff9024 	.word	0x1fff9024

0000844c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04(void)
{
    844c:	b500      	push	{lr}
    844e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8450:	f7f8 fbbc 	bl	bcc <Sys_GetCoreID>
    8454:	4603      	mov	r3, r0
    8456:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId])
    8458:	4a10      	ldr	r2, [pc, #64]	; (849c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x50>)
    845a:	9b01      	ldr	r3, [sp, #4]
    845c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8460:	2b00      	cmp	r3, #0
    8462:	d10d      	bne.n	8480 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8464:	f7f8 fad1 	bl	a0a <Gpt_schm_read_msr>
    8468:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    846a:	9b00      	ldr	r3, [sp, #0]
    846c:	f003 0301 	and.w	r3, r3, #1
    8470:	2b00      	cmp	r3, #0
    8472:	d100      	bne.n	8476 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8474:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    8476:	490a      	ldr	r1, [pc, #40]	; (84a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x54>)
    8478:	9b01      	ldr	r3, [sp, #4]
    847a:	9a00      	ldr	r2, [sp, #0]
    847c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId]++;
    8480:	4a06      	ldr	r2, [pc, #24]	; (849c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x50>)
    8482:	9b01      	ldr	r3, [sp, #4]
    8484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8488:	1c5a      	adds	r2, r3, #1
    848a:	4904      	ldr	r1, [pc, #16]	; (849c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x50>)
    848c:	9b01      	ldr	r3, [sp, #4]
    848e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8492:	bf00      	nop
    8494:	b003      	add	sp, #12
    8496:	f85d fb04 	ldr.w	pc, [sp], #4
    849a:	bf00      	nop
    849c:	1fff9030 	.word	0x1fff9030
    84a0:	1fff902c 	.word	0x1fff902c

000084a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04(void)
{
    84a4:	b500      	push	{lr}
    84a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    84a8:	f7f8 fb90 	bl	bcc <Sys_GetCoreID>
    84ac:	4603      	mov	r3, r0
    84ae:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId]--;
    84b0:	4a0d      	ldr	r2, [pc, #52]	; (84e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x44>)
    84b2:	9b01      	ldr	r3, [sp, #4]
    84b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84b8:	1e5a      	subs	r2, r3, #1
    84ba:	490b      	ldr	r1, [pc, #44]	; (84e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x44>)
    84bc:	9b01      	ldr	r3, [sp, #4]
    84be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    84c2:	4a0a      	ldr	r2, [pc, #40]	; (84ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x48>)
    84c4:	9b01      	ldr	r3, [sp, #4]
    84c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84ca:	f003 0301 	and.w	r3, r3, #1
    84ce:	2b00      	cmp	r3, #0
    84d0:	d106      	bne.n	84e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x3c>
    84d2:	4a05      	ldr	r2, [pc, #20]	; (84e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x44>)
    84d4:	9b01      	ldr	r3, [sp, #4]
    84d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84da:	2b00      	cmp	r3, #0
    84dc:	d100      	bne.n	84e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    84de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    84e0:	bf00      	nop
    84e2:	b003      	add	sp, #12
    84e4:	f85d fb04 	ldr.w	pc, [sp], #4
    84e8:	1fff9030 	.word	0x1fff9030
    84ec:	1fff902c 	.word	0x1fff902c

000084f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05(void)
{
    84f0:	b500      	push	{lr}
    84f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    84f4:	f7f8 fb6a 	bl	bcc <Sys_GetCoreID>
    84f8:	4603      	mov	r3, r0
    84fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId])
    84fc:	4a10      	ldr	r2, [pc, #64]	; (8540 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x50>)
    84fe:	9b01      	ldr	r3, [sp, #4]
    8500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8504:	2b00      	cmp	r3, #0
    8506:	d10d      	bne.n	8524 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8508:	f7f8 fa7f 	bl	a0a <Gpt_schm_read_msr>
    850c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    850e:	9b00      	ldr	r3, [sp, #0]
    8510:	f003 0301 	and.w	r3, r3, #1
    8514:	2b00      	cmp	r3, #0
    8516:	d100      	bne.n	851a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8518:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    851a:	490a      	ldr	r1, [pc, #40]	; (8544 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x54>)
    851c:	9b01      	ldr	r3, [sp, #4]
    851e:	9a00      	ldr	r2, [sp, #0]
    8520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId]++;
    8524:	4a06      	ldr	r2, [pc, #24]	; (8540 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x50>)
    8526:	9b01      	ldr	r3, [sp, #4]
    8528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    852c:	1c5a      	adds	r2, r3, #1
    852e:	4904      	ldr	r1, [pc, #16]	; (8540 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x50>)
    8530:	9b01      	ldr	r3, [sp, #4]
    8532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8536:	bf00      	nop
    8538:	b003      	add	sp, #12
    853a:	f85d fb04 	ldr.w	pc, [sp], #4
    853e:	bf00      	nop
    8540:	1fff9038 	.word	0x1fff9038
    8544:	1fff9034 	.word	0x1fff9034

00008548 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05(void)
{
    8548:	b500      	push	{lr}
    854a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    854c:	f7f8 fb3e 	bl	bcc <Sys_GetCoreID>
    8550:	4603      	mov	r3, r0
    8552:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId]--;
    8554:	4a0d      	ldr	r2, [pc, #52]	; (858c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x44>)
    8556:	9b01      	ldr	r3, [sp, #4]
    8558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    855c:	1e5a      	subs	r2, r3, #1
    855e:	490b      	ldr	r1, [pc, #44]	; (858c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x44>)
    8560:	9b01      	ldr	r3, [sp, #4]
    8562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    8566:	4a0a      	ldr	r2, [pc, #40]	; (8590 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x48>)
    8568:	9b01      	ldr	r3, [sp, #4]
    856a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    856e:	f003 0301 	and.w	r3, r3, #1
    8572:	2b00      	cmp	r3, #0
    8574:	d106      	bne.n	8584 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x3c>
    8576:	4a05      	ldr	r2, [pc, #20]	; (858c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x44>)
    8578:	9b01      	ldr	r3, [sp, #4]
    857a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    857e:	2b00      	cmp	r3, #0
    8580:	d100      	bne.n	8584 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8582:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8584:	bf00      	nop
    8586:	b003      	add	sp, #12
    8588:	f85d fb04 	ldr.w	pc, [sp], #4
    858c:	1fff9038 	.word	0x1fff9038
    8590:	1fff9034 	.word	0x1fff9034

00008594 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06(void)
{
    8594:	b500      	push	{lr}
    8596:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8598:	f7f8 fb18 	bl	bcc <Sys_GetCoreID>
    859c:	4603      	mov	r3, r0
    859e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId])
    85a0:	4a10      	ldr	r2, [pc, #64]	; (85e4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x50>)
    85a2:	9b01      	ldr	r3, [sp, #4]
    85a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85a8:	2b00      	cmp	r3, #0
    85aa:	d10d      	bne.n	85c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    85ac:	f7f8 fa2d 	bl	a0a <Gpt_schm_read_msr>
    85b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    85b2:	9b00      	ldr	r3, [sp, #0]
    85b4:	f003 0301 	and.w	r3, r3, #1
    85b8:	2b00      	cmp	r3, #0
    85ba:	d100      	bne.n	85be <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    85bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    85be:	490a      	ldr	r1, [pc, #40]	; (85e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x54>)
    85c0:	9b01      	ldr	r3, [sp, #4]
    85c2:	9a00      	ldr	r2, [sp, #0]
    85c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId]++;
    85c8:	4a06      	ldr	r2, [pc, #24]	; (85e4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x50>)
    85ca:	9b01      	ldr	r3, [sp, #4]
    85cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85d0:	1c5a      	adds	r2, r3, #1
    85d2:	4904      	ldr	r1, [pc, #16]	; (85e4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x50>)
    85d4:	9b01      	ldr	r3, [sp, #4]
    85d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    85da:	bf00      	nop
    85dc:	b003      	add	sp, #12
    85de:	f85d fb04 	ldr.w	pc, [sp], #4
    85e2:	bf00      	nop
    85e4:	1fff9040 	.word	0x1fff9040
    85e8:	1fff903c 	.word	0x1fff903c

000085ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06(void)
{
    85ec:	b500      	push	{lr}
    85ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    85f0:	f7f8 faec 	bl	bcc <Sys_GetCoreID>
    85f4:	4603      	mov	r3, r0
    85f6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId]--;
    85f8:	4a0d      	ldr	r2, [pc, #52]	; (8630 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x44>)
    85fa:	9b01      	ldr	r3, [sp, #4]
    85fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8600:	1e5a      	subs	r2, r3, #1
    8602:	490b      	ldr	r1, [pc, #44]	; (8630 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x44>)
    8604:	9b01      	ldr	r3, [sp, #4]
    8606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    860a:	4a0a      	ldr	r2, [pc, #40]	; (8634 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x48>)
    860c:	9b01      	ldr	r3, [sp, #4]
    860e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8612:	f003 0301 	and.w	r3, r3, #1
    8616:	2b00      	cmp	r3, #0
    8618:	d106      	bne.n	8628 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x3c>
    861a:	4a05      	ldr	r2, [pc, #20]	; (8630 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x44>)
    861c:	9b01      	ldr	r3, [sp, #4]
    861e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8622:	2b00      	cmp	r3, #0
    8624:	d100      	bne.n	8628 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8626:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8628:	bf00      	nop
    862a:	b003      	add	sp, #12
    862c:	f85d fb04 	ldr.w	pc, [sp], #4
    8630:	1fff9040 	.word	0x1fff9040
    8634:	1fff903c 	.word	0x1fff903c

00008638 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07(void)
{
    8638:	b500      	push	{lr}
    863a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    863c:	f7f8 fac6 	bl	bcc <Sys_GetCoreID>
    8640:	4603      	mov	r3, r0
    8642:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId])
    8644:	4a10      	ldr	r2, [pc, #64]	; (8688 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x50>)
    8646:	9b01      	ldr	r3, [sp, #4]
    8648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    864c:	2b00      	cmp	r3, #0
    864e:	d10d      	bne.n	866c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8650:	f7f8 f9db 	bl	a0a <Gpt_schm_read_msr>
    8654:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8656:	9b00      	ldr	r3, [sp, #0]
    8658:	f003 0301 	and.w	r3, r3, #1
    865c:	2b00      	cmp	r3, #0
    865e:	d100      	bne.n	8662 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8660:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    8662:	490a      	ldr	r1, [pc, #40]	; (868c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x54>)
    8664:	9b01      	ldr	r3, [sp, #4]
    8666:	9a00      	ldr	r2, [sp, #0]
    8668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId]++;
    866c:	4a06      	ldr	r2, [pc, #24]	; (8688 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x50>)
    866e:	9b01      	ldr	r3, [sp, #4]
    8670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8674:	1c5a      	adds	r2, r3, #1
    8676:	4904      	ldr	r1, [pc, #16]	; (8688 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x50>)
    8678:	9b01      	ldr	r3, [sp, #4]
    867a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    867e:	bf00      	nop
    8680:	b003      	add	sp, #12
    8682:	f85d fb04 	ldr.w	pc, [sp], #4
    8686:	bf00      	nop
    8688:	1fff9048 	.word	0x1fff9048
    868c:	1fff9044 	.word	0x1fff9044

00008690 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07(void)
{
    8690:	b500      	push	{lr}
    8692:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8694:	f7f8 fa9a 	bl	bcc <Sys_GetCoreID>
    8698:	4603      	mov	r3, r0
    869a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId]--;
    869c:	4a0d      	ldr	r2, [pc, #52]	; (86d4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x44>)
    869e:	9b01      	ldr	r3, [sp, #4]
    86a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86a4:	1e5a      	subs	r2, r3, #1
    86a6:	490b      	ldr	r1, [pc, #44]	; (86d4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x44>)
    86a8:	9b01      	ldr	r3, [sp, #4]
    86aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    86ae:	4a0a      	ldr	r2, [pc, #40]	; (86d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x48>)
    86b0:	9b01      	ldr	r3, [sp, #4]
    86b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86b6:	f003 0301 	and.w	r3, r3, #1
    86ba:	2b00      	cmp	r3, #0
    86bc:	d106      	bne.n	86cc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x3c>
    86be:	4a05      	ldr	r2, [pc, #20]	; (86d4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x44>)
    86c0:	9b01      	ldr	r3, [sp, #4]
    86c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86c6:	2b00      	cmp	r3, #0
    86c8:	d100      	bne.n	86cc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    86ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    86cc:	bf00      	nop
    86ce:	b003      	add	sp, #12
    86d0:	f85d fb04 	ldr.w	pc, [sp], #4
    86d4:	1fff9048 	.word	0x1fff9048
    86d8:	1fff9044 	.word	0x1fff9044

000086dc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10(void)
{
    86dc:	b500      	push	{lr}
    86de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    86e0:	f7f8 fa74 	bl	bcc <Sys_GetCoreID>
    86e4:	4603      	mov	r3, r0
    86e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId])
    86e8:	4a10      	ldr	r2, [pc, #64]	; (872c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x50>)
    86ea:	9b01      	ldr	r3, [sp, #4]
    86ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86f0:	2b00      	cmp	r3, #0
    86f2:	d10d      	bne.n	8710 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    86f4:	f7f8 f989 	bl	a0a <Gpt_schm_read_msr>
    86f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    86fa:	9b00      	ldr	r3, [sp, #0]
    86fc:	f003 0301 	and.w	r3, r3, #1
    8700:	2b00      	cmp	r3, #0
    8702:	d100      	bne.n	8706 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8704:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    8706:	490a      	ldr	r1, [pc, #40]	; (8730 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x54>)
    8708:	9b01      	ldr	r3, [sp, #4]
    870a:	9a00      	ldr	r2, [sp, #0]
    870c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId]++;
    8710:	4a06      	ldr	r2, [pc, #24]	; (872c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x50>)
    8712:	9b01      	ldr	r3, [sp, #4]
    8714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8718:	1c5a      	adds	r2, r3, #1
    871a:	4904      	ldr	r1, [pc, #16]	; (872c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x50>)
    871c:	9b01      	ldr	r3, [sp, #4]
    871e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8722:	bf00      	nop
    8724:	b003      	add	sp, #12
    8726:	f85d fb04 	ldr.w	pc, [sp], #4
    872a:	bf00      	nop
    872c:	1fff9050 	.word	0x1fff9050
    8730:	1fff904c 	.word	0x1fff904c

00008734 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10(void)
{
    8734:	b500      	push	{lr}
    8736:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8738:	f7f8 fa48 	bl	bcc <Sys_GetCoreID>
    873c:	4603      	mov	r3, r0
    873e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId]--;
    8740:	4a0d      	ldr	r2, [pc, #52]	; (8778 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x44>)
    8742:	9b01      	ldr	r3, [sp, #4]
    8744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8748:	1e5a      	subs	r2, r3, #1
    874a:	490b      	ldr	r1, [pc, #44]	; (8778 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x44>)
    874c:	9b01      	ldr	r3, [sp, #4]
    874e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    8752:	4a0a      	ldr	r2, [pc, #40]	; (877c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x48>)
    8754:	9b01      	ldr	r3, [sp, #4]
    8756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    875a:	f003 0301 	and.w	r3, r3, #1
    875e:	2b00      	cmp	r3, #0
    8760:	d106      	bne.n	8770 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x3c>
    8762:	4a05      	ldr	r2, [pc, #20]	; (8778 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x44>)
    8764:	9b01      	ldr	r3, [sp, #4]
    8766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    876a:	2b00      	cmp	r3, #0
    876c:	d100      	bne.n	8770 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    876e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8770:	bf00      	nop
    8772:	b003      	add	sp, #12
    8774:	f85d fb04 	ldr.w	pc, [sp], #4
    8778:	1fff9050 	.word	0x1fff9050
    877c:	1fff904c 	.word	0x1fff904c

00008780 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11(void)
{
    8780:	b500      	push	{lr}
    8782:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8784:	f7f8 fa22 	bl	bcc <Sys_GetCoreID>
    8788:	4603      	mov	r3, r0
    878a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId])
    878c:	4a10      	ldr	r2, [pc, #64]	; (87d0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x50>)
    878e:	9b01      	ldr	r3, [sp, #4]
    8790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8794:	2b00      	cmp	r3, #0
    8796:	d10d      	bne.n	87b4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8798:	f7f8 f937 	bl	a0a <Gpt_schm_read_msr>
    879c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    879e:	9b00      	ldr	r3, [sp, #0]
    87a0:	f003 0301 	and.w	r3, r3, #1
    87a4:	2b00      	cmp	r3, #0
    87a6:	d100      	bne.n	87aa <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    87a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    87aa:	490a      	ldr	r1, [pc, #40]	; (87d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x54>)
    87ac:	9b01      	ldr	r3, [sp, #4]
    87ae:	9a00      	ldr	r2, [sp, #0]
    87b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId]++;
    87b4:	4a06      	ldr	r2, [pc, #24]	; (87d0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x50>)
    87b6:	9b01      	ldr	r3, [sp, #4]
    87b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87bc:	1c5a      	adds	r2, r3, #1
    87be:	4904      	ldr	r1, [pc, #16]	; (87d0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x50>)
    87c0:	9b01      	ldr	r3, [sp, #4]
    87c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    87c6:	bf00      	nop
    87c8:	b003      	add	sp, #12
    87ca:	f85d fb04 	ldr.w	pc, [sp], #4
    87ce:	bf00      	nop
    87d0:	1fff9058 	.word	0x1fff9058
    87d4:	1fff9054 	.word	0x1fff9054

000087d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11(void)
{
    87d8:	b500      	push	{lr}
    87da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    87dc:	f7f8 f9f6 	bl	bcc <Sys_GetCoreID>
    87e0:	4603      	mov	r3, r0
    87e2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId]--;
    87e4:	4a0d      	ldr	r2, [pc, #52]	; (881c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x44>)
    87e6:	9b01      	ldr	r3, [sp, #4]
    87e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87ec:	1e5a      	subs	r2, r3, #1
    87ee:	490b      	ldr	r1, [pc, #44]	; (881c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x44>)
    87f0:	9b01      	ldr	r3, [sp, #4]
    87f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    87f6:	4a0a      	ldr	r2, [pc, #40]	; (8820 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x48>)
    87f8:	9b01      	ldr	r3, [sp, #4]
    87fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87fe:	f003 0301 	and.w	r3, r3, #1
    8802:	2b00      	cmp	r3, #0
    8804:	d106      	bne.n	8814 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x3c>
    8806:	4a05      	ldr	r2, [pc, #20]	; (881c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x44>)
    8808:	9b01      	ldr	r3, [sp, #4]
    880a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    880e:	2b00      	cmp	r3, #0
    8810:	d100      	bne.n	8814 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8812:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8814:	bf00      	nop
    8816:	b003      	add	sp, #12
    8818:	f85d fb04 	ldr.w	pc, [sp], #4
    881c:	1fff9058 	.word	0x1fff9058
    8820:	1fff9054 	.word	0x1fff9054

00008824 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17(void)
{
    8824:	b500      	push	{lr}
    8826:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8828:	f7f8 f9d0 	bl	bcc <Sys_GetCoreID>
    882c:	4603      	mov	r3, r0
    882e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId])
    8830:	4a10      	ldr	r2, [pc, #64]	; (8874 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x50>)
    8832:	9b01      	ldr	r3, [sp, #4]
    8834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8838:	2b00      	cmp	r3, #0
    883a:	d10d      	bne.n	8858 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    883c:	f7f8 f8e5 	bl	a0a <Gpt_schm_read_msr>
    8840:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8842:	9b00      	ldr	r3, [sp, #0]
    8844:	f003 0301 	and.w	r3, r3, #1
    8848:	2b00      	cmp	r3, #0
    884a:	d100      	bne.n	884e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    884c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    884e:	490a      	ldr	r1, [pc, #40]	; (8878 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x54>)
    8850:	9b01      	ldr	r3, [sp, #4]
    8852:	9a00      	ldr	r2, [sp, #0]
    8854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId]++;
    8858:	4a06      	ldr	r2, [pc, #24]	; (8874 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x50>)
    885a:	9b01      	ldr	r3, [sp, #4]
    885c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8860:	1c5a      	adds	r2, r3, #1
    8862:	4904      	ldr	r1, [pc, #16]	; (8874 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x50>)
    8864:	9b01      	ldr	r3, [sp, #4]
    8866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    886a:	bf00      	nop
    886c:	b003      	add	sp, #12
    886e:	f85d fb04 	ldr.w	pc, [sp], #4
    8872:	bf00      	nop
    8874:	1fff9060 	.word	0x1fff9060
    8878:	1fff905c 	.word	0x1fff905c

0000887c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17(void)
{
    887c:	b500      	push	{lr}
    887e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8880:	f7f8 f9a4 	bl	bcc <Sys_GetCoreID>
    8884:	4603      	mov	r3, r0
    8886:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId]--;
    8888:	4a0d      	ldr	r2, [pc, #52]	; (88c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x44>)
    888a:	9b01      	ldr	r3, [sp, #4]
    888c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8890:	1e5a      	subs	r2, r3, #1
    8892:	490b      	ldr	r1, [pc, #44]	; (88c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x44>)
    8894:	9b01      	ldr	r3, [sp, #4]
    8896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    889a:	4a0a      	ldr	r2, [pc, #40]	; (88c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x48>)
    889c:	9b01      	ldr	r3, [sp, #4]
    889e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88a2:	f003 0301 	and.w	r3, r3, #1
    88a6:	2b00      	cmp	r3, #0
    88a8:	d106      	bne.n	88b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x3c>
    88aa:	4a05      	ldr	r2, [pc, #20]	; (88c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x44>)
    88ac:	9b01      	ldr	r3, [sp, #4]
    88ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88b2:	2b00      	cmp	r3, #0
    88b4:	d100      	bne.n	88b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    88b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    88b8:	bf00      	nop
    88ba:	b003      	add	sp, #12
    88bc:	f85d fb04 	ldr.w	pc, [sp], #4
    88c0:	1fff9060 	.word	0x1fff9060
    88c4:	1fff905c 	.word	0x1fff905c

000088c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21(void)
{
    88c8:	b500      	push	{lr}
    88ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    88cc:	f7f8 f97e 	bl	bcc <Sys_GetCoreID>
    88d0:	4603      	mov	r3, r0
    88d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId])
    88d4:	4a10      	ldr	r2, [pc, #64]	; (8918 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x50>)
    88d6:	9b01      	ldr	r3, [sp, #4]
    88d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88dc:	2b00      	cmp	r3, #0
    88de:	d10d      	bne.n	88fc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    88e0:	f7f8 f893 	bl	a0a <Gpt_schm_read_msr>
    88e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    88e6:	9b00      	ldr	r3, [sp, #0]
    88e8:	f003 0301 	and.w	r3, r3, #1
    88ec:	2b00      	cmp	r3, #0
    88ee:	d100      	bne.n	88f2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    88f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    88f2:	490a      	ldr	r1, [pc, #40]	; (891c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x54>)
    88f4:	9b01      	ldr	r3, [sp, #4]
    88f6:	9a00      	ldr	r2, [sp, #0]
    88f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId]++;
    88fc:	4a06      	ldr	r2, [pc, #24]	; (8918 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x50>)
    88fe:	9b01      	ldr	r3, [sp, #4]
    8900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8904:	1c5a      	adds	r2, r3, #1
    8906:	4904      	ldr	r1, [pc, #16]	; (8918 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x50>)
    8908:	9b01      	ldr	r3, [sp, #4]
    890a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    890e:	bf00      	nop
    8910:	b003      	add	sp, #12
    8912:	f85d fb04 	ldr.w	pc, [sp], #4
    8916:	bf00      	nop
    8918:	1fff9068 	.word	0x1fff9068
    891c:	1fff9064 	.word	0x1fff9064

00008920 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21(void)
{
    8920:	b500      	push	{lr}
    8922:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8924:	f7f8 f952 	bl	bcc <Sys_GetCoreID>
    8928:	4603      	mov	r3, r0
    892a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId]--;
    892c:	4a0d      	ldr	r2, [pc, #52]	; (8964 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x44>)
    892e:	9b01      	ldr	r3, [sp, #4]
    8930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8934:	1e5a      	subs	r2, r3, #1
    8936:	490b      	ldr	r1, [pc, #44]	; (8964 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x44>)
    8938:	9b01      	ldr	r3, [sp, #4]
    893a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    893e:	4a0a      	ldr	r2, [pc, #40]	; (8968 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x48>)
    8940:	9b01      	ldr	r3, [sp, #4]
    8942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8946:	f003 0301 	and.w	r3, r3, #1
    894a:	2b00      	cmp	r3, #0
    894c:	d106      	bne.n	895c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x3c>
    894e:	4a05      	ldr	r2, [pc, #20]	; (8964 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x44>)
    8950:	9b01      	ldr	r3, [sp, #4]
    8952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8956:	2b00      	cmp	r3, #0
    8958:	d100      	bne.n	895c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    895a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    895c:	bf00      	nop
    895e:	b003      	add	sp, #12
    8960:	f85d fb04 	ldr.w	pc, [sp], #4
    8964:	1fff9068 	.word	0x1fff9068
    8968:	1fff9064 	.word	0x1fff9064

0000896c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22(void)
{
    896c:	b500      	push	{lr}
    896e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8970:	f7f8 f92c 	bl	bcc <Sys_GetCoreID>
    8974:	4603      	mov	r3, r0
    8976:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId])
    8978:	4a10      	ldr	r2, [pc, #64]	; (89bc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x50>)
    897a:	9b01      	ldr	r3, [sp, #4]
    897c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8980:	2b00      	cmp	r3, #0
    8982:	d10d      	bne.n	89a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8984:	f7f8 f841 	bl	a0a <Gpt_schm_read_msr>
    8988:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    898a:	9b00      	ldr	r3, [sp, #0]
    898c:	f003 0301 	and.w	r3, r3, #1
    8990:	2b00      	cmp	r3, #0
    8992:	d100      	bne.n	8996 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8994:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    8996:	490a      	ldr	r1, [pc, #40]	; (89c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x54>)
    8998:	9b01      	ldr	r3, [sp, #4]
    899a:	9a00      	ldr	r2, [sp, #0]
    899c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId]++;
    89a0:	4a06      	ldr	r2, [pc, #24]	; (89bc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x50>)
    89a2:	9b01      	ldr	r3, [sp, #4]
    89a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89a8:	1c5a      	adds	r2, r3, #1
    89aa:	4904      	ldr	r1, [pc, #16]	; (89bc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x50>)
    89ac:	9b01      	ldr	r3, [sp, #4]
    89ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    89b2:	bf00      	nop
    89b4:	b003      	add	sp, #12
    89b6:	f85d fb04 	ldr.w	pc, [sp], #4
    89ba:	bf00      	nop
    89bc:	1fff9070 	.word	0x1fff9070
    89c0:	1fff906c 	.word	0x1fff906c

000089c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22(void)
{
    89c4:	b500      	push	{lr}
    89c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    89c8:	f7f8 f900 	bl	bcc <Sys_GetCoreID>
    89cc:	4603      	mov	r3, r0
    89ce:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId]--;
    89d0:	4a0d      	ldr	r2, [pc, #52]	; (8a08 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x44>)
    89d2:	9b01      	ldr	r3, [sp, #4]
    89d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89d8:	1e5a      	subs	r2, r3, #1
    89da:	490b      	ldr	r1, [pc, #44]	; (8a08 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x44>)
    89dc:	9b01      	ldr	r3, [sp, #4]
    89de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    89e2:	4a0a      	ldr	r2, [pc, #40]	; (8a0c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x48>)
    89e4:	9b01      	ldr	r3, [sp, #4]
    89e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89ea:	f003 0301 	and.w	r3, r3, #1
    89ee:	2b00      	cmp	r3, #0
    89f0:	d106      	bne.n	8a00 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x3c>
    89f2:	4a05      	ldr	r2, [pc, #20]	; (8a08 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x44>)
    89f4:	9b01      	ldr	r3, [sp, #4]
    89f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89fa:	2b00      	cmp	r3, #0
    89fc:	d100      	bne.n	8a00 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    89fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8a00:	bf00      	nop
    8a02:	b003      	add	sp, #12
    8a04:	f85d fb04 	ldr.w	pc, [sp], #4
    8a08:	1fff9070 	.word	0x1fff9070
    8a0c:	1fff906c 	.word	0x1fff906c

00008a10 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23(void)
{
    8a10:	b500      	push	{lr}
    8a12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8a14:	f7f8 f8da 	bl	bcc <Sys_GetCoreID>
    8a18:	4603      	mov	r3, r0
    8a1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId])
    8a1c:	4a10      	ldr	r2, [pc, #64]	; (8a60 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x50>)
    8a1e:	9b01      	ldr	r3, [sp, #4]
    8a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a24:	2b00      	cmp	r3, #0
    8a26:	d10d      	bne.n	8a44 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8a28:	f7f7 ffef 	bl	a0a <Gpt_schm_read_msr>
    8a2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8a2e:	9b00      	ldr	r3, [sp, #0]
    8a30:	f003 0301 	and.w	r3, r3, #1
    8a34:	2b00      	cmp	r3, #0
    8a36:	d100      	bne.n	8a3a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8a38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    8a3a:	490a      	ldr	r1, [pc, #40]	; (8a64 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x54>)
    8a3c:	9b01      	ldr	r3, [sp, #4]
    8a3e:	9a00      	ldr	r2, [sp, #0]
    8a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId]++;
    8a44:	4a06      	ldr	r2, [pc, #24]	; (8a60 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x50>)
    8a46:	9b01      	ldr	r3, [sp, #4]
    8a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a4c:	1c5a      	adds	r2, r3, #1
    8a4e:	4904      	ldr	r1, [pc, #16]	; (8a60 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x50>)
    8a50:	9b01      	ldr	r3, [sp, #4]
    8a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8a56:	bf00      	nop
    8a58:	b003      	add	sp, #12
    8a5a:	f85d fb04 	ldr.w	pc, [sp], #4
    8a5e:	bf00      	nop
    8a60:	1fff9078 	.word	0x1fff9078
    8a64:	1fff9074 	.word	0x1fff9074

00008a68 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23(void)
{
    8a68:	b500      	push	{lr}
    8a6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8a6c:	f7f8 f8ae 	bl	bcc <Sys_GetCoreID>
    8a70:	4603      	mov	r3, r0
    8a72:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId]--;
    8a74:	4a0d      	ldr	r2, [pc, #52]	; (8aac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x44>)
    8a76:	9b01      	ldr	r3, [sp, #4]
    8a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a7c:	1e5a      	subs	r2, r3, #1
    8a7e:	490b      	ldr	r1, [pc, #44]	; (8aac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x44>)
    8a80:	9b01      	ldr	r3, [sp, #4]
    8a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    8a86:	4a0a      	ldr	r2, [pc, #40]	; (8ab0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x48>)
    8a88:	9b01      	ldr	r3, [sp, #4]
    8a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a8e:	f003 0301 	and.w	r3, r3, #1
    8a92:	2b00      	cmp	r3, #0
    8a94:	d106      	bne.n	8aa4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x3c>
    8a96:	4a05      	ldr	r2, [pc, #20]	; (8aac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x44>)
    8a98:	9b01      	ldr	r3, [sp, #4]
    8a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a9e:	2b00      	cmp	r3, #0
    8aa0:	d100      	bne.n	8aa4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8aa2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8aa4:	bf00      	nop
    8aa6:	b003      	add	sp, #12
    8aa8:	f85d fb04 	ldr.w	pc, [sp], #4
    8aac:	1fff9078 	.word	0x1fff9078
    8ab0:	1fff9074 	.word	0x1fff9074

00008ab4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24(void)
{
    8ab4:	b500      	push	{lr}
    8ab6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8ab8:	f7f8 f888 	bl	bcc <Sys_GetCoreID>
    8abc:	4603      	mov	r3, r0
    8abe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId])
    8ac0:	4a10      	ldr	r2, [pc, #64]	; (8b04 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x50>)
    8ac2:	9b01      	ldr	r3, [sp, #4]
    8ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ac8:	2b00      	cmp	r3, #0
    8aca:	d10d      	bne.n	8ae8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8acc:	f7f7 ff9d 	bl	a0a <Gpt_schm_read_msr>
    8ad0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8ad2:	9b00      	ldr	r3, [sp, #0]
    8ad4:	f003 0301 	and.w	r3, r3, #1
    8ad8:	2b00      	cmp	r3, #0
    8ada:	d100      	bne.n	8ade <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8adc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    8ade:	490a      	ldr	r1, [pc, #40]	; (8b08 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x54>)
    8ae0:	9b01      	ldr	r3, [sp, #4]
    8ae2:	9a00      	ldr	r2, [sp, #0]
    8ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId]++;
    8ae8:	4a06      	ldr	r2, [pc, #24]	; (8b04 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x50>)
    8aea:	9b01      	ldr	r3, [sp, #4]
    8aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8af0:	1c5a      	adds	r2, r3, #1
    8af2:	4904      	ldr	r1, [pc, #16]	; (8b04 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x50>)
    8af4:	9b01      	ldr	r3, [sp, #4]
    8af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8afa:	bf00      	nop
    8afc:	b003      	add	sp, #12
    8afe:	f85d fb04 	ldr.w	pc, [sp], #4
    8b02:	bf00      	nop
    8b04:	1fff9080 	.word	0x1fff9080
    8b08:	1fff907c 	.word	0x1fff907c

00008b0c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24(void)
{
    8b0c:	b500      	push	{lr}
    8b0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8b10:	f7f8 f85c 	bl	bcc <Sys_GetCoreID>
    8b14:	4603      	mov	r3, r0
    8b16:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId]--;
    8b18:	4a0d      	ldr	r2, [pc, #52]	; (8b50 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x44>)
    8b1a:	9b01      	ldr	r3, [sp, #4]
    8b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b20:	1e5a      	subs	r2, r3, #1
    8b22:	490b      	ldr	r1, [pc, #44]	; (8b50 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x44>)
    8b24:	9b01      	ldr	r3, [sp, #4]
    8b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    8b2a:	4a0a      	ldr	r2, [pc, #40]	; (8b54 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x48>)
    8b2c:	9b01      	ldr	r3, [sp, #4]
    8b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b32:	f003 0301 	and.w	r3, r3, #1
    8b36:	2b00      	cmp	r3, #0
    8b38:	d106      	bne.n	8b48 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x3c>
    8b3a:	4a05      	ldr	r2, [pc, #20]	; (8b50 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x44>)
    8b3c:	9b01      	ldr	r3, [sp, #4]
    8b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b42:	2b00      	cmp	r3, #0
    8b44:	d100      	bne.n	8b48 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8b46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8b48:	bf00      	nop
    8b4a:	b003      	add	sp, #12
    8b4c:	f85d fb04 	ldr.w	pc, [sp], #4
    8b50:	1fff9080 	.word	0x1fff9080
    8b54:	1fff907c 	.word	0x1fff907c

00008b58 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25(void)
{
    8b58:	b500      	push	{lr}
    8b5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8b5c:	f7f8 f836 	bl	bcc <Sys_GetCoreID>
    8b60:	4603      	mov	r3, r0
    8b62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId])
    8b64:	4a10      	ldr	r2, [pc, #64]	; (8ba8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x50>)
    8b66:	9b01      	ldr	r3, [sp, #4]
    8b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b6c:	2b00      	cmp	r3, #0
    8b6e:	d10d      	bne.n	8b8c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8b70:	f7f7 ff4b 	bl	a0a <Gpt_schm_read_msr>
    8b74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8b76:	9b00      	ldr	r3, [sp, #0]
    8b78:	f003 0301 	and.w	r3, r3, #1
    8b7c:	2b00      	cmp	r3, #0
    8b7e:	d100      	bne.n	8b82 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8b80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    8b82:	490a      	ldr	r1, [pc, #40]	; (8bac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x54>)
    8b84:	9b01      	ldr	r3, [sp, #4]
    8b86:	9a00      	ldr	r2, [sp, #0]
    8b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId]++;
    8b8c:	4a06      	ldr	r2, [pc, #24]	; (8ba8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x50>)
    8b8e:	9b01      	ldr	r3, [sp, #4]
    8b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b94:	1c5a      	adds	r2, r3, #1
    8b96:	4904      	ldr	r1, [pc, #16]	; (8ba8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x50>)
    8b98:	9b01      	ldr	r3, [sp, #4]
    8b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8b9e:	bf00      	nop
    8ba0:	b003      	add	sp, #12
    8ba2:	f85d fb04 	ldr.w	pc, [sp], #4
    8ba6:	bf00      	nop
    8ba8:	1fff9088 	.word	0x1fff9088
    8bac:	1fff9084 	.word	0x1fff9084

00008bb0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25(void)
{
    8bb0:	b500      	push	{lr}
    8bb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8bb4:	f7f8 f80a 	bl	bcc <Sys_GetCoreID>
    8bb8:	4603      	mov	r3, r0
    8bba:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId]--;
    8bbc:	4a0d      	ldr	r2, [pc, #52]	; (8bf4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x44>)
    8bbe:	9b01      	ldr	r3, [sp, #4]
    8bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bc4:	1e5a      	subs	r2, r3, #1
    8bc6:	490b      	ldr	r1, [pc, #44]	; (8bf4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x44>)
    8bc8:	9b01      	ldr	r3, [sp, #4]
    8bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    8bce:	4a0a      	ldr	r2, [pc, #40]	; (8bf8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x48>)
    8bd0:	9b01      	ldr	r3, [sp, #4]
    8bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bd6:	f003 0301 	and.w	r3, r3, #1
    8bda:	2b00      	cmp	r3, #0
    8bdc:	d106      	bne.n	8bec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x3c>
    8bde:	4a05      	ldr	r2, [pc, #20]	; (8bf4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x44>)
    8be0:	9b01      	ldr	r3, [sp, #4]
    8be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8be6:	2b00      	cmp	r3, #0
    8be8:	d100      	bne.n	8bec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8bea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8bec:	bf00      	nop
    8bee:	b003      	add	sp, #12
    8bf0:	f85d fb04 	ldr.w	pc, [sp], #4
    8bf4:	1fff9088 	.word	0x1fff9088
    8bf8:	1fff9084 	.word	0x1fff9084

00008bfc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26(void)
{
    8bfc:	b500      	push	{lr}
    8bfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c00:	f7f7 ffe4 	bl	bcc <Sys_GetCoreID>
    8c04:	4603      	mov	r3, r0
    8c06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId])
    8c08:	4a10      	ldr	r2, [pc, #64]	; (8c4c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x50>)
    8c0a:	9b01      	ldr	r3, [sp, #4]
    8c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c10:	2b00      	cmp	r3, #0
    8c12:	d10d      	bne.n	8c30 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8c14:	f7f7 fef9 	bl	a0a <Gpt_schm_read_msr>
    8c18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8c1a:	9b00      	ldr	r3, [sp, #0]
    8c1c:	f003 0301 	and.w	r3, r3, #1
    8c20:	2b00      	cmp	r3, #0
    8c22:	d100      	bne.n	8c26 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8c24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    8c26:	490a      	ldr	r1, [pc, #40]	; (8c50 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x54>)
    8c28:	9b01      	ldr	r3, [sp, #4]
    8c2a:	9a00      	ldr	r2, [sp, #0]
    8c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId]++;
    8c30:	4a06      	ldr	r2, [pc, #24]	; (8c4c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x50>)
    8c32:	9b01      	ldr	r3, [sp, #4]
    8c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c38:	1c5a      	adds	r2, r3, #1
    8c3a:	4904      	ldr	r1, [pc, #16]	; (8c4c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x50>)
    8c3c:	9b01      	ldr	r3, [sp, #4]
    8c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8c42:	bf00      	nop
    8c44:	b003      	add	sp, #12
    8c46:	f85d fb04 	ldr.w	pc, [sp], #4
    8c4a:	bf00      	nop
    8c4c:	1fff9090 	.word	0x1fff9090
    8c50:	1fff908c 	.word	0x1fff908c

00008c54 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26(void)
{
    8c54:	b500      	push	{lr}
    8c56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c58:	f7f7 ffb8 	bl	bcc <Sys_GetCoreID>
    8c5c:	4603      	mov	r3, r0
    8c5e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId]--;
    8c60:	4a0d      	ldr	r2, [pc, #52]	; (8c98 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x44>)
    8c62:	9b01      	ldr	r3, [sp, #4]
    8c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c68:	1e5a      	subs	r2, r3, #1
    8c6a:	490b      	ldr	r1, [pc, #44]	; (8c98 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x44>)
    8c6c:	9b01      	ldr	r3, [sp, #4]
    8c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    8c72:	4a0a      	ldr	r2, [pc, #40]	; (8c9c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x48>)
    8c74:	9b01      	ldr	r3, [sp, #4]
    8c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c7a:	f003 0301 	and.w	r3, r3, #1
    8c7e:	2b00      	cmp	r3, #0
    8c80:	d106      	bne.n	8c90 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x3c>
    8c82:	4a05      	ldr	r2, [pc, #20]	; (8c98 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x44>)
    8c84:	9b01      	ldr	r3, [sp, #4]
    8c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c8a:	2b00      	cmp	r3, #0
    8c8c:	d100      	bne.n	8c90 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8c8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8c90:	bf00      	nop
    8c92:	b003      	add	sp, #12
    8c94:	f85d fb04 	ldr.w	pc, [sp], #4
    8c98:	1fff9090 	.word	0x1fff9090
    8c9c:	1fff908c 	.word	0x1fff908c

00008ca0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29(void)
{
    8ca0:	b500      	push	{lr}
    8ca2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8ca4:	f7f7 ff92 	bl	bcc <Sys_GetCoreID>
    8ca8:	4603      	mov	r3, r0
    8caa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId])
    8cac:	4a10      	ldr	r2, [pc, #64]	; (8cf0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x50>)
    8cae:	9b01      	ldr	r3, [sp, #4]
    8cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cb4:	2b00      	cmp	r3, #0
    8cb6:	d10d      	bne.n	8cd4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8cb8:	f7f7 fea7 	bl	a0a <Gpt_schm_read_msr>
    8cbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8cbe:	9b00      	ldr	r3, [sp, #0]
    8cc0:	f003 0301 	and.w	r3, r3, #1
    8cc4:	2b00      	cmp	r3, #0
    8cc6:	d100      	bne.n	8cca <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8cc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_29[u32CoreId] = msr;
    8cca:	490a      	ldr	r1, [pc, #40]	; (8cf4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x54>)
    8ccc:	9b01      	ldr	r3, [sp, #4]
    8cce:	9a00      	ldr	r2, [sp, #0]
    8cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId]++;
    8cd4:	4a06      	ldr	r2, [pc, #24]	; (8cf0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x50>)
    8cd6:	9b01      	ldr	r3, [sp, #4]
    8cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cdc:	1c5a      	adds	r2, r3, #1
    8cde:	4904      	ldr	r1, [pc, #16]	; (8cf0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x50>)
    8ce0:	9b01      	ldr	r3, [sp, #4]
    8ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8ce6:	bf00      	nop
    8ce8:	b003      	add	sp, #12
    8cea:	f85d fb04 	ldr.w	pc, [sp], #4
    8cee:	bf00      	nop
    8cf0:	1fff9098 	.word	0x1fff9098
    8cf4:	1fff9094 	.word	0x1fff9094

00008cf8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29(void)
{
    8cf8:	b500      	push	{lr}
    8cfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8cfc:	f7f7 ff66 	bl	bcc <Sys_GetCoreID>
    8d00:	4603      	mov	r3, r0
    8d02:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId]--;
    8d04:	4a0d      	ldr	r2, [pc, #52]	; (8d3c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x44>)
    8d06:	9b01      	ldr	r3, [sp, #4]
    8d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d0c:	1e5a      	subs	r2, r3, #1
    8d0e:	490b      	ldr	r1, [pc, #44]	; (8d3c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x44>)
    8d10:	9b01      	ldr	r3, [sp, #4]
    8d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
    8d16:	4a0a      	ldr	r2, [pc, #40]	; (8d40 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x48>)
    8d18:	9b01      	ldr	r3, [sp, #4]
    8d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d1e:	f003 0301 	and.w	r3, r3, #1
    8d22:	2b00      	cmp	r3, #0
    8d24:	d106      	bne.n	8d34 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x3c>
    8d26:	4a05      	ldr	r2, [pc, #20]	; (8d3c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x44>)
    8d28:	9b01      	ldr	r3, [sp, #4]
    8d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d2e:	2b00      	cmp	r3, #0
    8d30:	d100      	bne.n	8d34 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8d32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8d34:	bf00      	nop
    8d36:	b003      	add	sp, #12
    8d38:	f85d fb04 	ldr.w	pc, [sp], #4
    8d3c:	1fff9098 	.word	0x1fff9098
    8d40:	1fff9094 	.word	0x1fff9094

00008d44 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30(void)
{
    8d44:	b500      	push	{lr}
    8d46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8d48:	f7f7 ff40 	bl	bcc <Sys_GetCoreID>
    8d4c:	4603      	mov	r3, r0
    8d4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId])
    8d50:	4a10      	ldr	r2, [pc, #64]	; (8d94 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x50>)
    8d52:	9b01      	ldr	r3, [sp, #4]
    8d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d58:	2b00      	cmp	r3, #0
    8d5a:	d10d      	bne.n	8d78 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8d5c:	f7f7 fe55 	bl	a0a <Gpt_schm_read_msr>
    8d60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8d62:	9b00      	ldr	r3, [sp, #0]
    8d64:	f003 0301 	and.w	r3, r3, #1
    8d68:	2b00      	cmp	r3, #0
    8d6a:	d100      	bne.n	8d6e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8d6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_30[u32CoreId] = msr;
    8d6e:	490a      	ldr	r1, [pc, #40]	; (8d98 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x54>)
    8d70:	9b01      	ldr	r3, [sp, #4]
    8d72:	9a00      	ldr	r2, [sp, #0]
    8d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId]++;
    8d78:	4a06      	ldr	r2, [pc, #24]	; (8d94 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x50>)
    8d7a:	9b01      	ldr	r3, [sp, #4]
    8d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d80:	1c5a      	adds	r2, r3, #1
    8d82:	4904      	ldr	r1, [pc, #16]	; (8d94 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x50>)
    8d84:	9b01      	ldr	r3, [sp, #4]
    8d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8d8a:	bf00      	nop
    8d8c:	b003      	add	sp, #12
    8d8e:	f85d fb04 	ldr.w	pc, [sp], #4
    8d92:	bf00      	nop
    8d94:	1fff90a0 	.word	0x1fff90a0
    8d98:	1fff909c 	.word	0x1fff909c

00008d9c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30(void)
{
    8d9c:	b500      	push	{lr}
    8d9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8da0:	f7f7 ff14 	bl	bcc <Sys_GetCoreID>
    8da4:	4603      	mov	r3, r0
    8da6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId]--;
    8da8:	4a0d      	ldr	r2, [pc, #52]	; (8de0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x44>)
    8daa:	9b01      	ldr	r3, [sp, #4]
    8dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8db0:	1e5a      	subs	r2, r3, #1
    8db2:	490b      	ldr	r1, [pc, #44]	; (8de0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x44>)
    8db4:	9b01      	ldr	r3, [sp, #4]
    8db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
    8dba:	4a0a      	ldr	r2, [pc, #40]	; (8de4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x48>)
    8dbc:	9b01      	ldr	r3, [sp, #4]
    8dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dc2:	f003 0301 	and.w	r3, r3, #1
    8dc6:	2b00      	cmp	r3, #0
    8dc8:	d106      	bne.n	8dd8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x3c>
    8dca:	4a05      	ldr	r2, [pc, #20]	; (8de0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x44>)
    8dcc:	9b01      	ldr	r3, [sp, #4]
    8dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dd2:	2b00      	cmp	r3, #0
    8dd4:	d100      	bne.n	8dd8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8dd6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8dd8:	bf00      	nop
    8dda:	b003      	add	sp, #12
    8ddc:	f85d fb04 	ldr.w	pc, [sp], #4
    8de0:	1fff90a0 	.word	0x1fff90a0
    8de4:	1fff909c 	.word	0x1fff909c

00008de8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31(void)
{
    8de8:	b500      	push	{lr}
    8dea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8dec:	f7f7 feee 	bl	bcc <Sys_GetCoreID>
    8df0:	4603      	mov	r3, r0
    8df2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId])
    8df4:	4a10      	ldr	r2, [pc, #64]	; (8e38 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x50>)
    8df6:	9b01      	ldr	r3, [sp, #4]
    8df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dfc:	2b00      	cmp	r3, #0
    8dfe:	d10d      	bne.n	8e1c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8e00:	f7f7 fe03 	bl	a0a <Gpt_schm_read_msr>
    8e04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8e06:	9b00      	ldr	r3, [sp, #0]
    8e08:	f003 0301 	and.w	r3, r3, #1
    8e0c:	2b00      	cmp	r3, #0
    8e0e:	d100      	bne.n	8e12 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8e10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_31[u32CoreId] = msr;
    8e12:	490a      	ldr	r1, [pc, #40]	; (8e3c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x54>)
    8e14:	9b01      	ldr	r3, [sp, #4]
    8e16:	9a00      	ldr	r2, [sp, #0]
    8e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId]++;
    8e1c:	4a06      	ldr	r2, [pc, #24]	; (8e38 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x50>)
    8e1e:	9b01      	ldr	r3, [sp, #4]
    8e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e24:	1c5a      	adds	r2, r3, #1
    8e26:	4904      	ldr	r1, [pc, #16]	; (8e38 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x50>)
    8e28:	9b01      	ldr	r3, [sp, #4]
    8e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8e2e:	bf00      	nop
    8e30:	b003      	add	sp, #12
    8e32:	f85d fb04 	ldr.w	pc, [sp], #4
    8e36:	bf00      	nop
    8e38:	1fff90a8 	.word	0x1fff90a8
    8e3c:	1fff90a4 	.word	0x1fff90a4

00008e40 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31(void)
{
    8e40:	b500      	push	{lr}
    8e42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e44:	f7f7 fec2 	bl	bcc <Sys_GetCoreID>
    8e48:	4603      	mov	r3, r0
    8e4a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId]--;
    8e4c:	4a0d      	ldr	r2, [pc, #52]	; (8e84 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x44>)
    8e4e:	9b01      	ldr	r3, [sp, #4]
    8e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e54:	1e5a      	subs	r2, r3, #1
    8e56:	490b      	ldr	r1, [pc, #44]	; (8e84 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x44>)
    8e58:	9b01      	ldr	r3, [sp, #4]
    8e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
    8e5e:	4a0a      	ldr	r2, [pc, #40]	; (8e88 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x48>)
    8e60:	9b01      	ldr	r3, [sp, #4]
    8e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e66:	f003 0301 	and.w	r3, r3, #1
    8e6a:	2b00      	cmp	r3, #0
    8e6c:	d106      	bne.n	8e7c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x3c>
    8e6e:	4a05      	ldr	r2, [pc, #20]	; (8e84 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x44>)
    8e70:	9b01      	ldr	r3, [sp, #4]
    8e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e76:	2b00      	cmp	r3, #0
    8e78:	d100      	bne.n	8e7c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8e7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8e7c:	bf00      	nop
    8e7e:	b003      	add	sp, #12
    8e80:	f85d fb04 	ldr.w	pc, [sp], #4
    8e84:	1fff90a8 	.word	0x1fff90a8
    8e88:	1fff90a4 	.word	0x1fff90a4

00008e8c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35(void)
{
    8e8c:	b500      	push	{lr}
    8e8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e90:	f7f7 fe9c 	bl	bcc <Sys_GetCoreID>
    8e94:	4603      	mov	r3, r0
    8e96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId])
    8e98:	4a10      	ldr	r2, [pc, #64]	; (8edc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x50>)
    8e9a:	9b01      	ldr	r3, [sp, #4]
    8e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ea0:	2b00      	cmp	r3, #0
    8ea2:	d10d      	bne.n	8ec0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8ea4:	f7f7 fdb1 	bl	a0a <Gpt_schm_read_msr>
    8ea8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8eaa:	9b00      	ldr	r3, [sp, #0]
    8eac:	f003 0301 	and.w	r3, r3, #1
    8eb0:	2b00      	cmp	r3, #0
    8eb2:	d100      	bne.n	8eb6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8eb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_35[u32CoreId] = msr;
    8eb6:	490a      	ldr	r1, [pc, #40]	; (8ee0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x54>)
    8eb8:	9b01      	ldr	r3, [sp, #4]
    8eba:	9a00      	ldr	r2, [sp, #0]
    8ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId]++;
    8ec0:	4a06      	ldr	r2, [pc, #24]	; (8edc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x50>)
    8ec2:	9b01      	ldr	r3, [sp, #4]
    8ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ec8:	1c5a      	adds	r2, r3, #1
    8eca:	4904      	ldr	r1, [pc, #16]	; (8edc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x50>)
    8ecc:	9b01      	ldr	r3, [sp, #4]
    8ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8ed2:	bf00      	nop
    8ed4:	b003      	add	sp, #12
    8ed6:	f85d fb04 	ldr.w	pc, [sp], #4
    8eda:	bf00      	nop
    8edc:	1fff90b0 	.word	0x1fff90b0
    8ee0:	1fff90ac 	.word	0x1fff90ac

00008ee4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35(void)
{
    8ee4:	b500      	push	{lr}
    8ee6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8ee8:	f7f7 fe70 	bl	bcc <Sys_GetCoreID>
    8eec:	4603      	mov	r3, r0
    8eee:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId]--;
    8ef0:	4a0d      	ldr	r2, [pc, #52]	; (8f28 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x44>)
    8ef2:	9b01      	ldr	r3, [sp, #4]
    8ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ef8:	1e5a      	subs	r2, r3, #1
    8efa:	490b      	ldr	r1, [pc, #44]	; (8f28 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x44>)
    8efc:	9b01      	ldr	r3, [sp, #4]
    8efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
    8f02:	4a0a      	ldr	r2, [pc, #40]	; (8f2c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x48>)
    8f04:	9b01      	ldr	r3, [sp, #4]
    8f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f0a:	f003 0301 	and.w	r3, r3, #1
    8f0e:	2b00      	cmp	r3, #0
    8f10:	d106      	bne.n	8f20 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x3c>
    8f12:	4a05      	ldr	r2, [pc, #20]	; (8f28 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x44>)
    8f14:	9b01      	ldr	r3, [sp, #4]
    8f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f1a:	2b00      	cmp	r3, #0
    8f1c:	d100      	bne.n	8f20 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8f1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8f20:	bf00      	nop
    8f22:	b003      	add	sp, #12
    8f24:	f85d fb04 	ldr.w	pc, [sp], #4
    8f28:	1fff90b0 	.word	0x1fff90b0
    8f2c:	1fff90ac 	.word	0x1fff90ac

00008f30 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36(void)
{
    8f30:	b500      	push	{lr}
    8f32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f34:	f7f7 fe4a 	bl	bcc <Sys_GetCoreID>
    8f38:	4603      	mov	r3, r0
    8f3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId])
    8f3c:	4a10      	ldr	r2, [pc, #64]	; (8f80 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x50>)
    8f3e:	9b01      	ldr	r3, [sp, #4]
    8f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f44:	2b00      	cmp	r3, #0
    8f46:	d10d      	bne.n	8f64 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8f48:	f7f7 fd5f 	bl	a0a <Gpt_schm_read_msr>
    8f4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8f4e:	9b00      	ldr	r3, [sp, #0]
    8f50:	f003 0301 	and.w	r3, r3, #1
    8f54:	2b00      	cmp	r3, #0
    8f56:	d100      	bne.n	8f5a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8f58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_36[u32CoreId] = msr;
    8f5a:	490a      	ldr	r1, [pc, #40]	; (8f84 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x54>)
    8f5c:	9b01      	ldr	r3, [sp, #4]
    8f5e:	9a00      	ldr	r2, [sp, #0]
    8f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId]++;
    8f64:	4a06      	ldr	r2, [pc, #24]	; (8f80 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x50>)
    8f66:	9b01      	ldr	r3, [sp, #4]
    8f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f6c:	1c5a      	adds	r2, r3, #1
    8f6e:	4904      	ldr	r1, [pc, #16]	; (8f80 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x50>)
    8f70:	9b01      	ldr	r3, [sp, #4]
    8f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8f76:	bf00      	nop
    8f78:	b003      	add	sp, #12
    8f7a:	f85d fb04 	ldr.w	pc, [sp], #4
    8f7e:	bf00      	nop
    8f80:	1fff90b8 	.word	0x1fff90b8
    8f84:	1fff90b4 	.word	0x1fff90b4

00008f88 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36(void)
{
    8f88:	b500      	push	{lr}
    8f8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f8c:	f7f7 fe1e 	bl	bcc <Sys_GetCoreID>
    8f90:	4603      	mov	r3, r0
    8f92:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId]--;
    8f94:	4a0d      	ldr	r2, [pc, #52]	; (8fcc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x44>)
    8f96:	9b01      	ldr	r3, [sp, #4]
    8f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f9c:	1e5a      	subs	r2, r3, #1
    8f9e:	490b      	ldr	r1, [pc, #44]	; (8fcc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x44>)
    8fa0:	9b01      	ldr	r3, [sp, #4]
    8fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
    8fa6:	4a0a      	ldr	r2, [pc, #40]	; (8fd0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x48>)
    8fa8:	9b01      	ldr	r3, [sp, #4]
    8faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fae:	f003 0301 	and.w	r3, r3, #1
    8fb2:	2b00      	cmp	r3, #0
    8fb4:	d106      	bne.n	8fc4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x3c>
    8fb6:	4a05      	ldr	r2, [pc, #20]	; (8fcc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x44>)
    8fb8:	9b01      	ldr	r3, [sp, #4]
    8fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fbe:	2b00      	cmp	r3, #0
    8fc0:	d100      	bne.n	8fc4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8fc2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8fc4:	bf00      	nop
    8fc6:	b003      	add	sp, #12
    8fc8:	f85d fb04 	ldr.w	pc, [sp], #4
    8fcc:	1fff90b8 	.word	0x1fff90b8
    8fd0:	1fff90b4 	.word	0x1fff90b4

00008fd4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38(void)
{
    8fd4:	b500      	push	{lr}
    8fd6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8fd8:	f7f7 fdf8 	bl	bcc <Sys_GetCoreID>
    8fdc:	4603      	mov	r3, r0
    8fde:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId])
    8fe0:	4a10      	ldr	r2, [pc, #64]	; (9024 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x50>)
    8fe2:	9b01      	ldr	r3, [sp, #4]
    8fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fe8:	2b00      	cmp	r3, #0
    8fea:	d10d      	bne.n	9008 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8fec:	f7f7 fd0d 	bl	a0a <Gpt_schm_read_msr>
    8ff0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8ff2:	9b00      	ldr	r3, [sp, #0]
    8ff4:	f003 0301 	and.w	r3, r3, #1
    8ff8:	2b00      	cmp	r3, #0
    8ffa:	d100      	bne.n	8ffe <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8ffc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_38[u32CoreId] = msr;
    8ffe:	490a      	ldr	r1, [pc, #40]	; (9028 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x54>)
    9000:	9b01      	ldr	r3, [sp, #4]
    9002:	9a00      	ldr	r2, [sp, #0]
    9004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId]++;
    9008:	4a06      	ldr	r2, [pc, #24]	; (9024 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x50>)
    900a:	9b01      	ldr	r3, [sp, #4]
    900c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9010:	1c5a      	adds	r2, r3, #1
    9012:	4904      	ldr	r1, [pc, #16]	; (9024 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x50>)
    9014:	9b01      	ldr	r3, [sp, #4]
    9016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    901a:	bf00      	nop
    901c:	b003      	add	sp, #12
    901e:	f85d fb04 	ldr.w	pc, [sp], #4
    9022:	bf00      	nop
    9024:	1fff90c0 	.word	0x1fff90c0
    9028:	1fff90bc 	.word	0x1fff90bc

0000902c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38(void)
{
    902c:	b500      	push	{lr}
    902e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9030:	f7f7 fdcc 	bl	bcc <Sys_GetCoreID>
    9034:	4603      	mov	r3, r0
    9036:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId]--;
    9038:	4a0d      	ldr	r2, [pc, #52]	; (9070 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x44>)
    903a:	9b01      	ldr	r3, [sp, #4]
    903c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9040:	1e5a      	subs	r2, r3, #1
    9042:	490b      	ldr	r1, [pc, #44]	; (9070 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x44>)
    9044:	9b01      	ldr	r3, [sp, #4]
    9046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
    904a:	4a0a      	ldr	r2, [pc, #40]	; (9074 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x48>)
    904c:	9b01      	ldr	r3, [sp, #4]
    904e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9052:	f003 0301 	and.w	r3, r3, #1
    9056:	2b00      	cmp	r3, #0
    9058:	d106      	bne.n	9068 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x3c>
    905a:	4a05      	ldr	r2, [pc, #20]	; (9070 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x44>)
    905c:	9b01      	ldr	r3, [sp, #4]
    905e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9062:	2b00      	cmp	r3, #0
    9064:	d100      	bne.n	9068 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9066:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9068:	bf00      	nop
    906a:	b003      	add	sp, #12
    906c:	f85d fb04 	ldr.w	pc, [sp], #4
    9070:	1fff90c0 	.word	0x1fff90c0
    9074:	1fff90bc 	.word	0x1fff90bc

00009078 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39(void)
{
    9078:	b500      	push	{lr}
    907a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    907c:	f7f7 fda6 	bl	bcc <Sys_GetCoreID>
    9080:	4603      	mov	r3, r0
    9082:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId])
    9084:	4a10      	ldr	r2, [pc, #64]	; (90c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x50>)
    9086:	9b01      	ldr	r3, [sp, #4]
    9088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    908c:	2b00      	cmp	r3, #0
    908e:	d10d      	bne.n	90ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9090:	f7f7 fcbb 	bl	a0a <Gpt_schm_read_msr>
    9094:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9096:	9b00      	ldr	r3, [sp, #0]
    9098:	f003 0301 	and.w	r3, r3, #1
    909c:	2b00      	cmp	r3, #0
    909e:	d100      	bne.n	90a2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    90a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_39[u32CoreId] = msr;
    90a2:	490a      	ldr	r1, [pc, #40]	; (90cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x54>)
    90a4:	9b01      	ldr	r3, [sp, #4]
    90a6:	9a00      	ldr	r2, [sp, #0]
    90a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId]++;
    90ac:	4a06      	ldr	r2, [pc, #24]	; (90c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x50>)
    90ae:	9b01      	ldr	r3, [sp, #4]
    90b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90b4:	1c5a      	adds	r2, r3, #1
    90b6:	4904      	ldr	r1, [pc, #16]	; (90c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x50>)
    90b8:	9b01      	ldr	r3, [sp, #4]
    90ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    90be:	bf00      	nop
    90c0:	b003      	add	sp, #12
    90c2:	f85d fb04 	ldr.w	pc, [sp], #4
    90c6:	bf00      	nop
    90c8:	1fff90c8 	.word	0x1fff90c8
    90cc:	1fff90c4 	.word	0x1fff90c4

000090d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39(void)
{
    90d0:	b500      	push	{lr}
    90d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    90d4:	f7f7 fd7a 	bl	bcc <Sys_GetCoreID>
    90d8:	4603      	mov	r3, r0
    90da:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId]--;
    90dc:	4a0d      	ldr	r2, [pc, #52]	; (9114 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x44>)
    90de:	9b01      	ldr	r3, [sp, #4]
    90e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90e4:	1e5a      	subs	r2, r3, #1
    90e6:	490b      	ldr	r1, [pc, #44]	; (9114 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x44>)
    90e8:	9b01      	ldr	r3, [sp, #4]
    90ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
    90ee:	4a0a      	ldr	r2, [pc, #40]	; (9118 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x48>)
    90f0:	9b01      	ldr	r3, [sp, #4]
    90f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90f6:	f003 0301 	and.w	r3, r3, #1
    90fa:	2b00      	cmp	r3, #0
    90fc:	d106      	bne.n	910c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x3c>
    90fe:	4a05      	ldr	r2, [pc, #20]	; (9114 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x44>)
    9100:	9b01      	ldr	r3, [sp, #4]
    9102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9106:	2b00      	cmp	r3, #0
    9108:	d100      	bne.n	910c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    910a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    910c:	bf00      	nop
    910e:	b003      	add	sp, #12
    9110:	f85d fb04 	ldr.w	pc, [sp], #4
    9114:	1fff90c8 	.word	0x1fff90c8
    9118:	1fff90c4 	.word	0x1fff90c4

0000911c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40(void)
{
    911c:	b500      	push	{lr}
    911e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9120:	f7f7 fd54 	bl	bcc <Sys_GetCoreID>
    9124:	4603      	mov	r3, r0
    9126:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId])
    9128:	4a10      	ldr	r2, [pc, #64]	; (916c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x50>)
    912a:	9b01      	ldr	r3, [sp, #4]
    912c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9130:	2b00      	cmp	r3, #0
    9132:	d10d      	bne.n	9150 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9134:	f7f7 fc69 	bl	a0a <Gpt_schm_read_msr>
    9138:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    913a:	9b00      	ldr	r3, [sp, #0]
    913c:	f003 0301 	and.w	r3, r3, #1
    9140:	2b00      	cmp	r3, #0
    9142:	d100      	bne.n	9146 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9144:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_40[u32CoreId] = msr;
    9146:	490a      	ldr	r1, [pc, #40]	; (9170 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x54>)
    9148:	9b01      	ldr	r3, [sp, #4]
    914a:	9a00      	ldr	r2, [sp, #0]
    914c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId]++;
    9150:	4a06      	ldr	r2, [pc, #24]	; (916c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x50>)
    9152:	9b01      	ldr	r3, [sp, #4]
    9154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9158:	1c5a      	adds	r2, r3, #1
    915a:	4904      	ldr	r1, [pc, #16]	; (916c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x50>)
    915c:	9b01      	ldr	r3, [sp, #4]
    915e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9162:	bf00      	nop
    9164:	b003      	add	sp, #12
    9166:	f85d fb04 	ldr.w	pc, [sp], #4
    916a:	bf00      	nop
    916c:	1fff90d0 	.word	0x1fff90d0
    9170:	1fff90cc 	.word	0x1fff90cc

00009174 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40(void)
{
    9174:	b500      	push	{lr}
    9176:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9178:	f7f7 fd28 	bl	bcc <Sys_GetCoreID>
    917c:	4603      	mov	r3, r0
    917e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId]--;
    9180:	4a0d      	ldr	r2, [pc, #52]	; (91b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x44>)
    9182:	9b01      	ldr	r3, [sp, #4]
    9184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9188:	1e5a      	subs	r2, r3, #1
    918a:	490b      	ldr	r1, [pc, #44]	; (91b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x44>)
    918c:	9b01      	ldr	r3, [sp, #4]
    918e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
    9192:	4a0a      	ldr	r2, [pc, #40]	; (91bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x48>)
    9194:	9b01      	ldr	r3, [sp, #4]
    9196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    919a:	f003 0301 	and.w	r3, r3, #1
    919e:	2b00      	cmp	r3, #0
    91a0:	d106      	bne.n	91b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x3c>
    91a2:	4a05      	ldr	r2, [pc, #20]	; (91b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x44>)
    91a4:	9b01      	ldr	r3, [sp, #4]
    91a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91aa:	2b00      	cmp	r3, #0
    91ac:	d100      	bne.n	91b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    91ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    91b0:	bf00      	nop
    91b2:	b003      	add	sp, #12
    91b4:	f85d fb04 	ldr.w	pc, [sp], #4
    91b8:	1fff90d0 	.word	0x1fff90d0
    91bc:	1fff90cc 	.word	0x1fff90cc

000091c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41(void)
{
    91c0:	b500      	push	{lr}
    91c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    91c4:	f7f7 fd02 	bl	bcc <Sys_GetCoreID>
    91c8:	4603      	mov	r3, r0
    91ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId])
    91cc:	4a10      	ldr	r2, [pc, #64]	; (9210 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x50>)
    91ce:	9b01      	ldr	r3, [sp, #4]
    91d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91d4:	2b00      	cmp	r3, #0
    91d6:	d10d      	bne.n	91f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    91d8:	f7f7 fc17 	bl	a0a <Gpt_schm_read_msr>
    91dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    91de:	9b00      	ldr	r3, [sp, #0]
    91e0:	f003 0301 	and.w	r3, r3, #1
    91e4:	2b00      	cmp	r3, #0
    91e6:	d100      	bne.n	91ea <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    91e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_41[u32CoreId] = msr;
    91ea:	490a      	ldr	r1, [pc, #40]	; (9214 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x54>)
    91ec:	9b01      	ldr	r3, [sp, #4]
    91ee:	9a00      	ldr	r2, [sp, #0]
    91f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId]++;
    91f4:	4a06      	ldr	r2, [pc, #24]	; (9210 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x50>)
    91f6:	9b01      	ldr	r3, [sp, #4]
    91f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91fc:	1c5a      	adds	r2, r3, #1
    91fe:	4904      	ldr	r1, [pc, #16]	; (9210 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x50>)
    9200:	9b01      	ldr	r3, [sp, #4]
    9202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9206:	bf00      	nop
    9208:	b003      	add	sp, #12
    920a:	f85d fb04 	ldr.w	pc, [sp], #4
    920e:	bf00      	nop
    9210:	1fff90d8 	.word	0x1fff90d8
    9214:	1fff90d4 	.word	0x1fff90d4

00009218 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41(void)
{
    9218:	b500      	push	{lr}
    921a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    921c:	f7f7 fcd6 	bl	bcc <Sys_GetCoreID>
    9220:	4603      	mov	r3, r0
    9222:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId]--;
    9224:	4a0d      	ldr	r2, [pc, #52]	; (925c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x44>)
    9226:	9b01      	ldr	r3, [sp, #4]
    9228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    922c:	1e5a      	subs	r2, r3, #1
    922e:	490b      	ldr	r1, [pc, #44]	; (925c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x44>)
    9230:	9b01      	ldr	r3, [sp, #4]
    9232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
    9236:	4a0a      	ldr	r2, [pc, #40]	; (9260 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x48>)
    9238:	9b01      	ldr	r3, [sp, #4]
    923a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    923e:	f003 0301 	and.w	r3, r3, #1
    9242:	2b00      	cmp	r3, #0
    9244:	d106      	bne.n	9254 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x3c>
    9246:	4a05      	ldr	r2, [pc, #20]	; (925c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x44>)
    9248:	9b01      	ldr	r3, [sp, #4]
    924a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    924e:	2b00      	cmp	r3, #0
    9250:	d100      	bne.n	9254 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9252:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9254:	bf00      	nop
    9256:	b003      	add	sp, #12
    9258:	f85d fb04 	ldr.w	pc, [sp], #4
    925c:	1fff90d8 	.word	0x1fff90d8
    9260:	1fff90d4 	.word	0x1fff90d4

00009264 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42(void)
{
    9264:	b500      	push	{lr}
    9266:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9268:	f7f7 fcb0 	bl	bcc <Sys_GetCoreID>
    926c:	4603      	mov	r3, r0
    926e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId])
    9270:	4a10      	ldr	r2, [pc, #64]	; (92b4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x50>)
    9272:	9b01      	ldr	r3, [sp, #4]
    9274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9278:	2b00      	cmp	r3, #0
    927a:	d10d      	bne.n	9298 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    927c:	f7f7 fbc5 	bl	a0a <Gpt_schm_read_msr>
    9280:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9282:	9b00      	ldr	r3, [sp, #0]
    9284:	f003 0301 	and.w	r3, r3, #1
    9288:	2b00      	cmp	r3, #0
    928a:	d100      	bne.n	928e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    928c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_42[u32CoreId] = msr;
    928e:	490a      	ldr	r1, [pc, #40]	; (92b8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x54>)
    9290:	9b01      	ldr	r3, [sp, #4]
    9292:	9a00      	ldr	r2, [sp, #0]
    9294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId]++;
    9298:	4a06      	ldr	r2, [pc, #24]	; (92b4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x50>)
    929a:	9b01      	ldr	r3, [sp, #4]
    929c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92a0:	1c5a      	adds	r2, r3, #1
    92a2:	4904      	ldr	r1, [pc, #16]	; (92b4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x50>)
    92a4:	9b01      	ldr	r3, [sp, #4]
    92a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    92aa:	bf00      	nop
    92ac:	b003      	add	sp, #12
    92ae:	f85d fb04 	ldr.w	pc, [sp], #4
    92b2:	bf00      	nop
    92b4:	1fff90e0 	.word	0x1fff90e0
    92b8:	1fff90dc 	.word	0x1fff90dc

000092bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42(void)
{
    92bc:	b500      	push	{lr}
    92be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    92c0:	f7f7 fc84 	bl	bcc <Sys_GetCoreID>
    92c4:	4603      	mov	r3, r0
    92c6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId]--;
    92c8:	4a0d      	ldr	r2, [pc, #52]	; (9300 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x44>)
    92ca:	9b01      	ldr	r3, [sp, #4]
    92cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92d0:	1e5a      	subs	r2, r3, #1
    92d2:	490b      	ldr	r1, [pc, #44]	; (9300 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x44>)
    92d4:	9b01      	ldr	r3, [sp, #4]
    92d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
    92da:	4a0a      	ldr	r2, [pc, #40]	; (9304 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x48>)
    92dc:	9b01      	ldr	r3, [sp, #4]
    92de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92e2:	f003 0301 	and.w	r3, r3, #1
    92e6:	2b00      	cmp	r3, #0
    92e8:	d106      	bne.n	92f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x3c>
    92ea:	4a05      	ldr	r2, [pc, #20]	; (9300 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x44>)
    92ec:	9b01      	ldr	r3, [sp, #4]
    92ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92f2:	2b00      	cmp	r3, #0
    92f4:	d100      	bne.n	92f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    92f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    92f8:	bf00      	nop
    92fa:	b003      	add	sp, #12
    92fc:	f85d fb04 	ldr.w	pc, [sp], #4
    9300:	1fff90e0 	.word	0x1fff90e0
    9304:	1fff90dc 	.word	0x1fff90dc

00009308 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43(void)
{
    9308:	b500      	push	{lr}
    930a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    930c:	f7f7 fc5e 	bl	bcc <Sys_GetCoreID>
    9310:	4603      	mov	r3, r0
    9312:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId])
    9314:	4a10      	ldr	r2, [pc, #64]	; (9358 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x50>)
    9316:	9b01      	ldr	r3, [sp, #4]
    9318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    931c:	2b00      	cmp	r3, #0
    931e:	d10d      	bne.n	933c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9320:	f7f7 fb73 	bl	a0a <Gpt_schm_read_msr>
    9324:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9326:	9b00      	ldr	r3, [sp, #0]
    9328:	f003 0301 	and.w	r3, r3, #1
    932c:	2b00      	cmp	r3, #0
    932e:	d100      	bne.n	9332 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9330:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_43[u32CoreId] = msr;
    9332:	490a      	ldr	r1, [pc, #40]	; (935c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x54>)
    9334:	9b01      	ldr	r3, [sp, #4]
    9336:	9a00      	ldr	r2, [sp, #0]
    9338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId]++;
    933c:	4a06      	ldr	r2, [pc, #24]	; (9358 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x50>)
    933e:	9b01      	ldr	r3, [sp, #4]
    9340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9344:	1c5a      	adds	r2, r3, #1
    9346:	4904      	ldr	r1, [pc, #16]	; (9358 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x50>)
    9348:	9b01      	ldr	r3, [sp, #4]
    934a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    934e:	bf00      	nop
    9350:	b003      	add	sp, #12
    9352:	f85d fb04 	ldr.w	pc, [sp], #4
    9356:	bf00      	nop
    9358:	1fff90e8 	.word	0x1fff90e8
    935c:	1fff90e4 	.word	0x1fff90e4

00009360 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43(void)
{
    9360:	b500      	push	{lr}
    9362:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9364:	f7f7 fc32 	bl	bcc <Sys_GetCoreID>
    9368:	4603      	mov	r3, r0
    936a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId]--;
    936c:	4a0d      	ldr	r2, [pc, #52]	; (93a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x44>)
    936e:	9b01      	ldr	r3, [sp, #4]
    9370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9374:	1e5a      	subs	r2, r3, #1
    9376:	490b      	ldr	r1, [pc, #44]	; (93a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x44>)
    9378:	9b01      	ldr	r3, [sp, #4]
    937a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
    937e:	4a0a      	ldr	r2, [pc, #40]	; (93a8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x48>)
    9380:	9b01      	ldr	r3, [sp, #4]
    9382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9386:	f003 0301 	and.w	r3, r3, #1
    938a:	2b00      	cmp	r3, #0
    938c:	d106      	bne.n	939c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x3c>
    938e:	4a05      	ldr	r2, [pc, #20]	; (93a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x44>)
    9390:	9b01      	ldr	r3, [sp, #4]
    9392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9396:	2b00      	cmp	r3, #0
    9398:	d100      	bne.n	939c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    939a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    939c:	bf00      	nop
    939e:	b003      	add	sp, #12
    93a0:	f85d fb04 	ldr.w	pc, [sp], #4
    93a4:	1fff90e8 	.word	0x1fff90e8
    93a8:	1fff90e4 	.word	0x1fff90e4

000093ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44(void)
{
    93ac:	b500      	push	{lr}
    93ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    93b0:	f7f7 fc0c 	bl	bcc <Sys_GetCoreID>
    93b4:	4603      	mov	r3, r0
    93b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId])
    93b8:	4a10      	ldr	r2, [pc, #64]	; (93fc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x50>)
    93ba:	9b01      	ldr	r3, [sp, #4]
    93bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93c0:	2b00      	cmp	r3, #0
    93c2:	d10d      	bne.n	93e0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    93c4:	f7f7 fb21 	bl	a0a <Gpt_schm_read_msr>
    93c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    93ca:	9b00      	ldr	r3, [sp, #0]
    93cc:	f003 0301 	and.w	r3, r3, #1
    93d0:	2b00      	cmp	r3, #0
    93d2:	d100      	bne.n	93d6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    93d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_44[u32CoreId] = msr;
    93d6:	490a      	ldr	r1, [pc, #40]	; (9400 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x54>)
    93d8:	9b01      	ldr	r3, [sp, #4]
    93da:	9a00      	ldr	r2, [sp, #0]
    93dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId]++;
    93e0:	4a06      	ldr	r2, [pc, #24]	; (93fc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x50>)
    93e2:	9b01      	ldr	r3, [sp, #4]
    93e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93e8:	1c5a      	adds	r2, r3, #1
    93ea:	4904      	ldr	r1, [pc, #16]	; (93fc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x50>)
    93ec:	9b01      	ldr	r3, [sp, #4]
    93ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    93f2:	bf00      	nop
    93f4:	b003      	add	sp, #12
    93f6:	f85d fb04 	ldr.w	pc, [sp], #4
    93fa:	bf00      	nop
    93fc:	1fff90f0 	.word	0x1fff90f0
    9400:	1fff90ec 	.word	0x1fff90ec

00009404 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44(void)
{
    9404:	b500      	push	{lr}
    9406:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9408:	f7f7 fbe0 	bl	bcc <Sys_GetCoreID>
    940c:	4603      	mov	r3, r0
    940e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId]--;
    9410:	4a0d      	ldr	r2, [pc, #52]	; (9448 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x44>)
    9412:	9b01      	ldr	r3, [sp, #4]
    9414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9418:	1e5a      	subs	r2, r3, #1
    941a:	490b      	ldr	r1, [pc, #44]	; (9448 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x44>)
    941c:	9b01      	ldr	r3, [sp, #4]
    941e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
    9422:	4a0a      	ldr	r2, [pc, #40]	; (944c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x48>)
    9424:	9b01      	ldr	r3, [sp, #4]
    9426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    942a:	f003 0301 	and.w	r3, r3, #1
    942e:	2b00      	cmp	r3, #0
    9430:	d106      	bne.n	9440 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x3c>
    9432:	4a05      	ldr	r2, [pc, #20]	; (9448 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x44>)
    9434:	9b01      	ldr	r3, [sp, #4]
    9436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    943a:	2b00      	cmp	r3, #0
    943c:	d100      	bne.n	9440 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    943e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9440:	bf00      	nop
    9442:	b003      	add	sp, #12
    9444:	f85d fb04 	ldr.w	pc, [sp], #4
    9448:	1fff90f0 	.word	0x1fff90f0
    944c:	1fff90ec 	.word	0x1fff90ec

00009450 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45(void)
{
    9450:	b500      	push	{lr}
    9452:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9454:	f7f7 fbba 	bl	bcc <Sys_GetCoreID>
    9458:	4603      	mov	r3, r0
    945a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId])
    945c:	4a10      	ldr	r2, [pc, #64]	; (94a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x50>)
    945e:	9b01      	ldr	r3, [sp, #4]
    9460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9464:	2b00      	cmp	r3, #0
    9466:	d10d      	bne.n	9484 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9468:	f7f7 facf 	bl	a0a <Gpt_schm_read_msr>
    946c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    946e:	9b00      	ldr	r3, [sp, #0]
    9470:	f003 0301 	and.w	r3, r3, #1
    9474:	2b00      	cmp	r3, #0
    9476:	d100      	bne.n	947a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9478:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_45[u32CoreId] = msr;
    947a:	490a      	ldr	r1, [pc, #40]	; (94a4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x54>)
    947c:	9b01      	ldr	r3, [sp, #4]
    947e:	9a00      	ldr	r2, [sp, #0]
    9480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId]++;
    9484:	4a06      	ldr	r2, [pc, #24]	; (94a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x50>)
    9486:	9b01      	ldr	r3, [sp, #4]
    9488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    948c:	1c5a      	adds	r2, r3, #1
    948e:	4904      	ldr	r1, [pc, #16]	; (94a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x50>)
    9490:	9b01      	ldr	r3, [sp, #4]
    9492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9496:	bf00      	nop
    9498:	b003      	add	sp, #12
    949a:	f85d fb04 	ldr.w	pc, [sp], #4
    949e:	bf00      	nop
    94a0:	1fff90f8 	.word	0x1fff90f8
    94a4:	1fff90f4 	.word	0x1fff90f4

000094a8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45(void)
{
    94a8:	b500      	push	{lr}
    94aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    94ac:	f7f7 fb8e 	bl	bcc <Sys_GetCoreID>
    94b0:	4603      	mov	r3, r0
    94b2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId]--;
    94b4:	4a0d      	ldr	r2, [pc, #52]	; (94ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x44>)
    94b6:	9b01      	ldr	r3, [sp, #4]
    94b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94bc:	1e5a      	subs	r2, r3, #1
    94be:	490b      	ldr	r1, [pc, #44]	; (94ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x44>)
    94c0:	9b01      	ldr	r3, [sp, #4]
    94c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
    94c6:	4a0a      	ldr	r2, [pc, #40]	; (94f0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x48>)
    94c8:	9b01      	ldr	r3, [sp, #4]
    94ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94ce:	f003 0301 	and.w	r3, r3, #1
    94d2:	2b00      	cmp	r3, #0
    94d4:	d106      	bne.n	94e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x3c>
    94d6:	4a05      	ldr	r2, [pc, #20]	; (94ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x44>)
    94d8:	9b01      	ldr	r3, [sp, #4]
    94da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94de:	2b00      	cmp	r3, #0
    94e0:	d100      	bne.n	94e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    94e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    94e4:	bf00      	nop
    94e6:	b003      	add	sp, #12
    94e8:	f85d fb04 	ldr.w	pc, [sp], #4
    94ec:	1fff90f8 	.word	0x1fff90f8
    94f0:	1fff90f4 	.word	0x1fff90f4

000094f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46(void)
{
    94f4:	b500      	push	{lr}
    94f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    94f8:	f7f7 fb68 	bl	bcc <Sys_GetCoreID>
    94fc:	4603      	mov	r3, r0
    94fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId])
    9500:	4a10      	ldr	r2, [pc, #64]	; (9544 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x50>)
    9502:	9b01      	ldr	r3, [sp, #4]
    9504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9508:	2b00      	cmp	r3, #0
    950a:	d10d      	bne.n	9528 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    950c:	f7f7 fa7d 	bl	a0a <Gpt_schm_read_msr>
    9510:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9512:	9b00      	ldr	r3, [sp, #0]
    9514:	f003 0301 	and.w	r3, r3, #1
    9518:	2b00      	cmp	r3, #0
    951a:	d100      	bne.n	951e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    951c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_46[u32CoreId] = msr;
    951e:	490a      	ldr	r1, [pc, #40]	; (9548 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x54>)
    9520:	9b01      	ldr	r3, [sp, #4]
    9522:	9a00      	ldr	r2, [sp, #0]
    9524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId]++;
    9528:	4a06      	ldr	r2, [pc, #24]	; (9544 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x50>)
    952a:	9b01      	ldr	r3, [sp, #4]
    952c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9530:	1c5a      	adds	r2, r3, #1
    9532:	4904      	ldr	r1, [pc, #16]	; (9544 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x50>)
    9534:	9b01      	ldr	r3, [sp, #4]
    9536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    953a:	bf00      	nop
    953c:	b003      	add	sp, #12
    953e:	f85d fb04 	ldr.w	pc, [sp], #4
    9542:	bf00      	nop
    9544:	1fff9100 	.word	0x1fff9100
    9548:	1fff90fc 	.word	0x1fff90fc

0000954c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46(void)
{
    954c:	b500      	push	{lr}
    954e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9550:	f7f7 fb3c 	bl	bcc <Sys_GetCoreID>
    9554:	4603      	mov	r3, r0
    9556:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId]--;
    9558:	4a0d      	ldr	r2, [pc, #52]	; (9590 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x44>)
    955a:	9b01      	ldr	r3, [sp, #4]
    955c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9560:	1e5a      	subs	r2, r3, #1
    9562:	490b      	ldr	r1, [pc, #44]	; (9590 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x44>)
    9564:	9b01      	ldr	r3, [sp, #4]
    9566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
    956a:	4a0a      	ldr	r2, [pc, #40]	; (9594 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x48>)
    956c:	9b01      	ldr	r3, [sp, #4]
    956e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9572:	f003 0301 	and.w	r3, r3, #1
    9576:	2b00      	cmp	r3, #0
    9578:	d106      	bne.n	9588 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x3c>
    957a:	4a05      	ldr	r2, [pc, #20]	; (9590 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x44>)
    957c:	9b01      	ldr	r3, [sp, #4]
    957e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9582:	2b00      	cmp	r3, #0
    9584:	d100      	bne.n	9588 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9586:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9588:	bf00      	nop
    958a:	b003      	add	sp, #12
    958c:	f85d fb04 	ldr.w	pc, [sp], #4
    9590:	1fff9100 	.word	0x1fff9100
    9594:	1fff90fc 	.word	0x1fff90fc

00009598 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50(void)
{
    9598:	b500      	push	{lr}
    959a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    959c:	f7f7 fb16 	bl	bcc <Sys_GetCoreID>
    95a0:	4603      	mov	r3, r0
    95a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId])
    95a4:	4a10      	ldr	r2, [pc, #64]	; (95e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x50>)
    95a6:	9b01      	ldr	r3, [sp, #4]
    95a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95ac:	2b00      	cmp	r3, #0
    95ae:	d10d      	bne.n	95cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    95b0:	f7f7 fa2b 	bl	a0a <Gpt_schm_read_msr>
    95b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    95b6:	9b00      	ldr	r3, [sp, #0]
    95b8:	f003 0301 	and.w	r3, r3, #1
    95bc:	2b00      	cmp	r3, #0
    95be:	d100      	bne.n	95c2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    95c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_50[u32CoreId] = msr;
    95c2:	490a      	ldr	r1, [pc, #40]	; (95ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x54>)
    95c4:	9b01      	ldr	r3, [sp, #4]
    95c6:	9a00      	ldr	r2, [sp, #0]
    95c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId]++;
    95cc:	4a06      	ldr	r2, [pc, #24]	; (95e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x50>)
    95ce:	9b01      	ldr	r3, [sp, #4]
    95d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95d4:	1c5a      	adds	r2, r3, #1
    95d6:	4904      	ldr	r1, [pc, #16]	; (95e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x50>)
    95d8:	9b01      	ldr	r3, [sp, #4]
    95da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    95de:	bf00      	nop
    95e0:	b003      	add	sp, #12
    95e2:	f85d fb04 	ldr.w	pc, [sp], #4
    95e6:	bf00      	nop
    95e8:	1fff9108 	.word	0x1fff9108
    95ec:	1fff9104 	.word	0x1fff9104

000095f0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50(void)
{
    95f0:	b500      	push	{lr}
    95f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    95f4:	f7f7 faea 	bl	bcc <Sys_GetCoreID>
    95f8:	4603      	mov	r3, r0
    95fa:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId]--;
    95fc:	4a0d      	ldr	r2, [pc, #52]	; (9634 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x44>)
    95fe:	9b01      	ldr	r3, [sp, #4]
    9600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9604:	1e5a      	subs	r2, r3, #1
    9606:	490b      	ldr	r1, [pc, #44]	; (9634 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x44>)
    9608:	9b01      	ldr	r3, [sp, #4]
    960a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
    960e:	4a0a      	ldr	r2, [pc, #40]	; (9638 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x48>)
    9610:	9b01      	ldr	r3, [sp, #4]
    9612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9616:	f003 0301 	and.w	r3, r3, #1
    961a:	2b00      	cmp	r3, #0
    961c:	d106      	bne.n	962c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x3c>
    961e:	4a05      	ldr	r2, [pc, #20]	; (9634 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x44>)
    9620:	9b01      	ldr	r3, [sp, #4]
    9622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9626:	2b00      	cmp	r3, #0
    9628:	d100      	bne.n	962c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    962a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    962c:	bf00      	nop
    962e:	b003      	add	sp, #12
    9630:	f85d fb04 	ldr.w	pc, [sp], #4
    9634:	1fff9108 	.word	0x1fff9108
    9638:	1fff9104 	.word	0x1fff9104

0000963c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51(void)
{
    963c:	b500      	push	{lr}
    963e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9640:	f7f7 fac4 	bl	bcc <Sys_GetCoreID>
    9644:	4603      	mov	r3, r0
    9646:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId])
    9648:	4a10      	ldr	r2, [pc, #64]	; (968c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x50>)
    964a:	9b01      	ldr	r3, [sp, #4]
    964c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9650:	2b00      	cmp	r3, #0
    9652:	d10d      	bne.n	9670 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9654:	f7f7 f9d9 	bl	a0a <Gpt_schm_read_msr>
    9658:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    965a:	9b00      	ldr	r3, [sp, #0]
    965c:	f003 0301 	and.w	r3, r3, #1
    9660:	2b00      	cmp	r3, #0
    9662:	d100      	bne.n	9666 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9664:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_51[u32CoreId] = msr;
    9666:	490a      	ldr	r1, [pc, #40]	; (9690 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x54>)
    9668:	9b01      	ldr	r3, [sp, #4]
    966a:	9a00      	ldr	r2, [sp, #0]
    966c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId]++;
    9670:	4a06      	ldr	r2, [pc, #24]	; (968c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x50>)
    9672:	9b01      	ldr	r3, [sp, #4]
    9674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9678:	1c5a      	adds	r2, r3, #1
    967a:	4904      	ldr	r1, [pc, #16]	; (968c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x50>)
    967c:	9b01      	ldr	r3, [sp, #4]
    967e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9682:	bf00      	nop
    9684:	b003      	add	sp, #12
    9686:	f85d fb04 	ldr.w	pc, [sp], #4
    968a:	bf00      	nop
    968c:	1fff9110 	.word	0x1fff9110
    9690:	1fff910c 	.word	0x1fff910c

00009694 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51(void)
{
    9694:	b500      	push	{lr}
    9696:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9698:	f7f7 fa98 	bl	bcc <Sys_GetCoreID>
    969c:	4603      	mov	r3, r0
    969e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId]--;
    96a0:	4a0d      	ldr	r2, [pc, #52]	; (96d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x44>)
    96a2:	9b01      	ldr	r3, [sp, #4]
    96a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96a8:	1e5a      	subs	r2, r3, #1
    96aa:	490b      	ldr	r1, [pc, #44]	; (96d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x44>)
    96ac:	9b01      	ldr	r3, [sp, #4]
    96ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
    96b2:	4a0a      	ldr	r2, [pc, #40]	; (96dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x48>)
    96b4:	9b01      	ldr	r3, [sp, #4]
    96b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96ba:	f003 0301 	and.w	r3, r3, #1
    96be:	2b00      	cmp	r3, #0
    96c0:	d106      	bne.n	96d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x3c>
    96c2:	4a05      	ldr	r2, [pc, #20]	; (96d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x44>)
    96c4:	9b01      	ldr	r3, [sp, #4]
    96c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96ca:	2b00      	cmp	r3, #0
    96cc:	d100      	bne.n	96d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    96ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    96d0:	bf00      	nop
    96d2:	b003      	add	sp, #12
    96d4:	f85d fb04 	ldr.w	pc, [sp], #4
    96d8:	1fff9110 	.word	0x1fff9110
    96dc:	1fff910c 	.word	0x1fff910c

000096e0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52(void)
{
    96e0:	b500      	push	{lr}
    96e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    96e4:	f7f7 fa72 	bl	bcc <Sys_GetCoreID>
    96e8:	4603      	mov	r3, r0
    96ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId])
    96ec:	4a10      	ldr	r2, [pc, #64]	; (9730 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x50>)
    96ee:	9b01      	ldr	r3, [sp, #4]
    96f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96f4:	2b00      	cmp	r3, #0
    96f6:	d10d      	bne.n	9714 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    96f8:	f7f7 f987 	bl	a0a <Gpt_schm_read_msr>
    96fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    96fe:	9b00      	ldr	r3, [sp, #0]
    9700:	f003 0301 	and.w	r3, r3, #1
    9704:	2b00      	cmp	r3, #0
    9706:	d100      	bne.n	970a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9708:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_52[u32CoreId] = msr;
    970a:	490a      	ldr	r1, [pc, #40]	; (9734 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x54>)
    970c:	9b01      	ldr	r3, [sp, #4]
    970e:	9a00      	ldr	r2, [sp, #0]
    9710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId]++;
    9714:	4a06      	ldr	r2, [pc, #24]	; (9730 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x50>)
    9716:	9b01      	ldr	r3, [sp, #4]
    9718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    971c:	1c5a      	adds	r2, r3, #1
    971e:	4904      	ldr	r1, [pc, #16]	; (9730 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x50>)
    9720:	9b01      	ldr	r3, [sp, #4]
    9722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9726:	bf00      	nop
    9728:	b003      	add	sp, #12
    972a:	f85d fb04 	ldr.w	pc, [sp], #4
    972e:	bf00      	nop
    9730:	1fff9118 	.word	0x1fff9118
    9734:	1fff9114 	.word	0x1fff9114

00009738 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52(void)
{
    9738:	b500      	push	{lr}
    973a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    973c:	f7f7 fa46 	bl	bcc <Sys_GetCoreID>
    9740:	4603      	mov	r3, r0
    9742:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId]--;
    9744:	4a0d      	ldr	r2, [pc, #52]	; (977c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x44>)
    9746:	9b01      	ldr	r3, [sp, #4]
    9748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    974c:	1e5a      	subs	r2, r3, #1
    974e:	490b      	ldr	r1, [pc, #44]	; (977c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x44>)
    9750:	9b01      	ldr	r3, [sp, #4]
    9752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_52[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId]))         /*if interrupts were enabled*/
    9756:	4a0a      	ldr	r2, [pc, #40]	; (9780 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x48>)
    9758:	9b01      	ldr	r3, [sp, #4]
    975a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    975e:	f003 0301 	and.w	r3, r3, #1
    9762:	2b00      	cmp	r3, #0
    9764:	d106      	bne.n	9774 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x3c>
    9766:	4a05      	ldr	r2, [pc, #20]	; (977c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x44>)
    9768:	9b01      	ldr	r3, [sp, #4]
    976a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    976e:	2b00      	cmp	r3, #0
    9770:	d100      	bne.n	9774 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9772:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9774:	bf00      	nop
    9776:	b003      	add	sp, #12
    9778:	f85d fb04 	ldr.w	pc, [sp], #4
    977c:	1fff9118 	.word	0x1fff9118
    9780:	1fff9114 	.word	0x1fff9114

00009784 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53(void)
{
    9784:	b500      	push	{lr}
    9786:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9788:	f7f7 fa20 	bl	bcc <Sys_GetCoreID>
    978c:	4603      	mov	r3, r0
    978e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId])
    9790:	4a10      	ldr	r2, [pc, #64]	; (97d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x50>)
    9792:	9b01      	ldr	r3, [sp, #4]
    9794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9798:	2b00      	cmp	r3, #0
    979a:	d10d      	bne.n	97b8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    979c:	f7f7 f935 	bl	a0a <Gpt_schm_read_msr>
    97a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    97a2:	9b00      	ldr	r3, [sp, #0]
    97a4:	f003 0301 	and.w	r3, r3, #1
    97a8:	2b00      	cmp	r3, #0
    97aa:	d100      	bne.n	97ae <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    97ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_53[u32CoreId] = msr;
    97ae:	490a      	ldr	r1, [pc, #40]	; (97d8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x54>)
    97b0:	9b01      	ldr	r3, [sp, #4]
    97b2:	9a00      	ldr	r2, [sp, #0]
    97b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId]++;
    97b8:	4a06      	ldr	r2, [pc, #24]	; (97d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x50>)
    97ba:	9b01      	ldr	r3, [sp, #4]
    97bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97c0:	1c5a      	adds	r2, r3, #1
    97c2:	4904      	ldr	r1, [pc, #16]	; (97d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x50>)
    97c4:	9b01      	ldr	r3, [sp, #4]
    97c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    97ca:	bf00      	nop
    97cc:	b003      	add	sp, #12
    97ce:	f85d fb04 	ldr.w	pc, [sp], #4
    97d2:	bf00      	nop
    97d4:	1fff9120 	.word	0x1fff9120
    97d8:	1fff911c 	.word	0x1fff911c

000097dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53(void)
{
    97dc:	b500      	push	{lr}
    97de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    97e0:	f7f7 f9f4 	bl	bcc <Sys_GetCoreID>
    97e4:	4603      	mov	r3, r0
    97e6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId]--;
    97e8:	4a0d      	ldr	r2, [pc, #52]	; (9820 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x44>)
    97ea:	9b01      	ldr	r3, [sp, #4]
    97ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97f0:	1e5a      	subs	r2, r3, #1
    97f2:	490b      	ldr	r1, [pc, #44]	; (9820 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x44>)
    97f4:	9b01      	ldr	r3, [sp, #4]
    97f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_53[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId]))         /*if interrupts were enabled*/
    97fa:	4a0a      	ldr	r2, [pc, #40]	; (9824 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x48>)
    97fc:	9b01      	ldr	r3, [sp, #4]
    97fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9802:	f003 0301 	and.w	r3, r3, #1
    9806:	2b00      	cmp	r3, #0
    9808:	d106      	bne.n	9818 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x3c>
    980a:	4a05      	ldr	r2, [pc, #20]	; (9820 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x44>)
    980c:	9b01      	ldr	r3, [sp, #4]
    980e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9812:	2b00      	cmp	r3, #0
    9814:	d100      	bne.n	9818 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9816:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9818:	bf00      	nop
    981a:	b003      	add	sp, #12
    981c:	f85d fb04 	ldr.w	pc, [sp], #4
    9820:	1fff9120 	.word	0x1fff9120
    9824:	1fff911c 	.word	0x1fff911c

00009828 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54(void)
{
    9828:	b500      	push	{lr}
    982a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    982c:	f7f7 f9ce 	bl	bcc <Sys_GetCoreID>
    9830:	4603      	mov	r3, r0
    9832:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId])
    9834:	4a10      	ldr	r2, [pc, #64]	; (9878 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x50>)
    9836:	9b01      	ldr	r3, [sp, #4]
    9838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    983c:	2b00      	cmp	r3, #0
    983e:	d10d      	bne.n	985c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9840:	f7f7 f8e3 	bl	a0a <Gpt_schm_read_msr>
    9844:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9846:	9b00      	ldr	r3, [sp, #0]
    9848:	f003 0301 	and.w	r3, r3, #1
    984c:	2b00      	cmp	r3, #0
    984e:	d100      	bne.n	9852 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9850:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_54[u32CoreId] = msr;
    9852:	490a      	ldr	r1, [pc, #40]	; (987c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x54>)
    9854:	9b01      	ldr	r3, [sp, #4]
    9856:	9a00      	ldr	r2, [sp, #0]
    9858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId]++;
    985c:	4a06      	ldr	r2, [pc, #24]	; (9878 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x50>)
    985e:	9b01      	ldr	r3, [sp, #4]
    9860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9864:	1c5a      	adds	r2, r3, #1
    9866:	4904      	ldr	r1, [pc, #16]	; (9878 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x50>)
    9868:	9b01      	ldr	r3, [sp, #4]
    986a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    986e:	bf00      	nop
    9870:	b003      	add	sp, #12
    9872:	f85d fb04 	ldr.w	pc, [sp], #4
    9876:	bf00      	nop
    9878:	1fff9128 	.word	0x1fff9128
    987c:	1fff9124 	.word	0x1fff9124

00009880 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54(void)
{
    9880:	b500      	push	{lr}
    9882:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9884:	f7f7 f9a2 	bl	bcc <Sys_GetCoreID>
    9888:	4603      	mov	r3, r0
    988a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId]--;
    988c:	4a0d      	ldr	r2, [pc, #52]	; (98c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x44>)
    988e:	9b01      	ldr	r3, [sp, #4]
    9890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9894:	1e5a      	subs	r2, r3, #1
    9896:	490b      	ldr	r1, [pc, #44]	; (98c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x44>)
    9898:	9b01      	ldr	r3, [sp, #4]
    989a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
    989e:	4a0a      	ldr	r2, [pc, #40]	; (98c8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x48>)
    98a0:	9b01      	ldr	r3, [sp, #4]
    98a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98a6:	f003 0301 	and.w	r3, r3, #1
    98aa:	2b00      	cmp	r3, #0
    98ac:	d106      	bne.n	98bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x3c>
    98ae:	4a05      	ldr	r2, [pc, #20]	; (98c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x44>)
    98b0:	9b01      	ldr	r3, [sp, #4]
    98b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98b6:	2b00      	cmp	r3, #0
    98b8:	d100      	bne.n	98bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    98ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    98bc:	bf00      	nop
    98be:	b003      	add	sp, #12
    98c0:	f85d fb04 	ldr.w	pc, [sp], #4
    98c4:	1fff9128 	.word	0x1fff9128
    98c8:	1fff9124 	.word	0x1fff9124

000098cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55(void)
{
    98cc:	b500      	push	{lr}
    98ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    98d0:	f7f7 f97c 	bl	bcc <Sys_GetCoreID>
    98d4:	4603      	mov	r3, r0
    98d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId])
    98d8:	4a10      	ldr	r2, [pc, #64]	; (991c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x50>)
    98da:	9b01      	ldr	r3, [sp, #4]
    98dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98e0:	2b00      	cmp	r3, #0
    98e2:	d10d      	bne.n	9900 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    98e4:	f7f7 f891 	bl	a0a <Gpt_schm_read_msr>
    98e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    98ea:	9b00      	ldr	r3, [sp, #0]
    98ec:	f003 0301 	and.w	r3, r3, #1
    98f0:	2b00      	cmp	r3, #0
    98f2:	d100      	bne.n	98f6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    98f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_55[u32CoreId] = msr;
    98f6:	490a      	ldr	r1, [pc, #40]	; (9920 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x54>)
    98f8:	9b01      	ldr	r3, [sp, #4]
    98fa:	9a00      	ldr	r2, [sp, #0]
    98fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId]++;
    9900:	4a06      	ldr	r2, [pc, #24]	; (991c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x50>)
    9902:	9b01      	ldr	r3, [sp, #4]
    9904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9908:	1c5a      	adds	r2, r3, #1
    990a:	4904      	ldr	r1, [pc, #16]	; (991c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x50>)
    990c:	9b01      	ldr	r3, [sp, #4]
    990e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9912:	bf00      	nop
    9914:	b003      	add	sp, #12
    9916:	f85d fb04 	ldr.w	pc, [sp], #4
    991a:	bf00      	nop
    991c:	1fff9130 	.word	0x1fff9130
    9920:	1fff912c 	.word	0x1fff912c

00009924 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55(void)
{
    9924:	b500      	push	{lr}
    9926:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9928:	f7f7 f950 	bl	bcc <Sys_GetCoreID>
    992c:	4603      	mov	r3, r0
    992e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId]--;
    9930:	4a0d      	ldr	r2, [pc, #52]	; (9968 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x44>)
    9932:	9b01      	ldr	r3, [sp, #4]
    9934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9938:	1e5a      	subs	r2, r3, #1
    993a:	490b      	ldr	r1, [pc, #44]	; (9968 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x44>)
    993c:	9b01      	ldr	r3, [sp, #4]
    993e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
    9942:	4a0a      	ldr	r2, [pc, #40]	; (996c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x48>)
    9944:	9b01      	ldr	r3, [sp, #4]
    9946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    994a:	f003 0301 	and.w	r3, r3, #1
    994e:	2b00      	cmp	r3, #0
    9950:	d106      	bne.n	9960 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x3c>
    9952:	4a05      	ldr	r2, [pc, #20]	; (9968 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x44>)
    9954:	9b01      	ldr	r3, [sp, #4]
    9956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    995a:	2b00      	cmp	r3, #0
    995c:	d100      	bne.n	9960 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    995e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9960:	bf00      	nop
    9962:	b003      	add	sp, #12
    9964:	f85d fb04 	ldr.w	pc, [sp], #4
    9968:	1fff9130 	.word	0x1fff9130
    996c:	1fff912c 	.word	0x1fff912c

00009970 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56(void)
{
    9970:	b500      	push	{lr}
    9972:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9974:	f7f7 f92a 	bl	bcc <Sys_GetCoreID>
    9978:	4603      	mov	r3, r0
    997a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId])
    997c:	4a10      	ldr	r2, [pc, #64]	; (99c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x50>)
    997e:	9b01      	ldr	r3, [sp, #4]
    9980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9984:	2b00      	cmp	r3, #0
    9986:	d10d      	bne.n	99a4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9988:	f7f7 f83f 	bl	a0a <Gpt_schm_read_msr>
    998c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    998e:	9b00      	ldr	r3, [sp, #0]
    9990:	f003 0301 	and.w	r3, r3, #1
    9994:	2b00      	cmp	r3, #0
    9996:	d100      	bne.n	999a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9998:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_56[u32CoreId] = msr;
    999a:	490a      	ldr	r1, [pc, #40]	; (99c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x54>)
    999c:	9b01      	ldr	r3, [sp, #4]
    999e:	9a00      	ldr	r2, [sp, #0]
    99a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId]++;
    99a4:	4a06      	ldr	r2, [pc, #24]	; (99c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x50>)
    99a6:	9b01      	ldr	r3, [sp, #4]
    99a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99ac:	1c5a      	adds	r2, r3, #1
    99ae:	4904      	ldr	r1, [pc, #16]	; (99c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x50>)
    99b0:	9b01      	ldr	r3, [sp, #4]
    99b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    99b6:	bf00      	nop
    99b8:	b003      	add	sp, #12
    99ba:	f85d fb04 	ldr.w	pc, [sp], #4
    99be:	bf00      	nop
    99c0:	1fff9138 	.word	0x1fff9138
    99c4:	1fff9134 	.word	0x1fff9134

000099c8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56(void)
{
    99c8:	b500      	push	{lr}
    99ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    99cc:	f7f7 f8fe 	bl	bcc <Sys_GetCoreID>
    99d0:	4603      	mov	r3, r0
    99d2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId]--;
    99d4:	4a0d      	ldr	r2, [pc, #52]	; (9a0c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x44>)
    99d6:	9b01      	ldr	r3, [sp, #4]
    99d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99dc:	1e5a      	subs	r2, r3, #1
    99de:	490b      	ldr	r1, [pc, #44]	; (9a0c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x44>)
    99e0:	9b01      	ldr	r3, [sp, #4]
    99e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
    99e6:	4a0a      	ldr	r2, [pc, #40]	; (9a10 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x48>)
    99e8:	9b01      	ldr	r3, [sp, #4]
    99ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99ee:	f003 0301 	and.w	r3, r3, #1
    99f2:	2b00      	cmp	r3, #0
    99f4:	d106      	bne.n	9a04 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x3c>
    99f6:	4a05      	ldr	r2, [pc, #20]	; (9a0c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x44>)
    99f8:	9b01      	ldr	r3, [sp, #4]
    99fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99fe:	2b00      	cmp	r3, #0
    9a00:	d100      	bne.n	9a04 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9a02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9a04:	bf00      	nop
    9a06:	b003      	add	sp, #12
    9a08:	f85d fb04 	ldr.w	pc, [sp], #4
    9a0c:	1fff9138 	.word	0x1fff9138
    9a10:	1fff9134 	.word	0x1fff9134

00009a14 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60(void)
{
    9a14:	b500      	push	{lr}
    9a16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a18:	f7f7 f8d8 	bl	bcc <Sys_GetCoreID>
    9a1c:	4603      	mov	r3, r0
    9a1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId])
    9a20:	4a10      	ldr	r2, [pc, #64]	; (9a64 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x50>)
    9a22:	9b01      	ldr	r3, [sp, #4]
    9a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a28:	2b00      	cmp	r3, #0
    9a2a:	d10d      	bne.n	9a48 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9a2c:	f7f6 ffed 	bl	a0a <Gpt_schm_read_msr>
    9a30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9a32:	9b00      	ldr	r3, [sp, #0]
    9a34:	f003 0301 	and.w	r3, r3, #1
    9a38:	2b00      	cmp	r3, #0
    9a3a:	d100      	bne.n	9a3e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9a3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_60[u32CoreId] = msr;
    9a3e:	490a      	ldr	r1, [pc, #40]	; (9a68 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x54>)
    9a40:	9b01      	ldr	r3, [sp, #4]
    9a42:	9a00      	ldr	r2, [sp, #0]
    9a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId]++;
    9a48:	4a06      	ldr	r2, [pc, #24]	; (9a64 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x50>)
    9a4a:	9b01      	ldr	r3, [sp, #4]
    9a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a50:	1c5a      	adds	r2, r3, #1
    9a52:	4904      	ldr	r1, [pc, #16]	; (9a64 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x50>)
    9a54:	9b01      	ldr	r3, [sp, #4]
    9a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9a5a:	bf00      	nop
    9a5c:	b003      	add	sp, #12
    9a5e:	f85d fb04 	ldr.w	pc, [sp], #4
    9a62:	bf00      	nop
    9a64:	1fff9140 	.word	0x1fff9140
    9a68:	1fff913c 	.word	0x1fff913c

00009a6c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60(void)
{
    9a6c:	b500      	push	{lr}
    9a6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a70:	f7f7 f8ac 	bl	bcc <Sys_GetCoreID>
    9a74:	4603      	mov	r3, r0
    9a76:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId]--;
    9a78:	4a0d      	ldr	r2, [pc, #52]	; (9ab0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x44>)
    9a7a:	9b01      	ldr	r3, [sp, #4]
    9a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a80:	1e5a      	subs	r2, r3, #1
    9a82:	490b      	ldr	r1, [pc, #44]	; (9ab0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x44>)
    9a84:	9b01      	ldr	r3, [sp, #4]
    9a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
    9a8a:	4a0a      	ldr	r2, [pc, #40]	; (9ab4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x48>)
    9a8c:	9b01      	ldr	r3, [sp, #4]
    9a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a92:	f003 0301 	and.w	r3, r3, #1
    9a96:	2b00      	cmp	r3, #0
    9a98:	d106      	bne.n	9aa8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x3c>
    9a9a:	4a05      	ldr	r2, [pc, #20]	; (9ab0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x44>)
    9a9c:	9b01      	ldr	r3, [sp, #4]
    9a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aa2:	2b00      	cmp	r3, #0
    9aa4:	d100      	bne.n	9aa8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9aa6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9aa8:	bf00      	nop
    9aaa:	b003      	add	sp, #12
    9aac:	f85d fb04 	ldr.w	pc, [sp], #4
    9ab0:	1fff9140 	.word	0x1fff9140
    9ab4:	1fff913c 	.word	0x1fff913c

00009ab8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61(void)
{
    9ab8:	b500      	push	{lr}
    9aba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9abc:	f7f7 f886 	bl	bcc <Sys_GetCoreID>
    9ac0:	4603      	mov	r3, r0
    9ac2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId])
    9ac4:	4a10      	ldr	r2, [pc, #64]	; (9b08 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x50>)
    9ac6:	9b01      	ldr	r3, [sp, #4]
    9ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9acc:	2b00      	cmp	r3, #0
    9ace:	d10d      	bne.n	9aec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9ad0:	f7f6 ff9b 	bl	a0a <Gpt_schm_read_msr>
    9ad4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9ad6:	9b00      	ldr	r3, [sp, #0]
    9ad8:	f003 0301 	and.w	r3, r3, #1
    9adc:	2b00      	cmp	r3, #0
    9ade:	d100      	bne.n	9ae2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9ae0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_61[u32CoreId] = msr;
    9ae2:	490a      	ldr	r1, [pc, #40]	; (9b0c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x54>)
    9ae4:	9b01      	ldr	r3, [sp, #4]
    9ae6:	9a00      	ldr	r2, [sp, #0]
    9ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId]++;
    9aec:	4a06      	ldr	r2, [pc, #24]	; (9b08 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x50>)
    9aee:	9b01      	ldr	r3, [sp, #4]
    9af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9af4:	1c5a      	adds	r2, r3, #1
    9af6:	4904      	ldr	r1, [pc, #16]	; (9b08 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x50>)
    9af8:	9b01      	ldr	r3, [sp, #4]
    9afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9afe:	bf00      	nop
    9b00:	b003      	add	sp, #12
    9b02:	f85d fb04 	ldr.w	pc, [sp], #4
    9b06:	bf00      	nop
    9b08:	1fff9148 	.word	0x1fff9148
    9b0c:	1fff9144 	.word	0x1fff9144

00009b10 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61(void)
{
    9b10:	b500      	push	{lr}
    9b12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b14:	f7f7 f85a 	bl	bcc <Sys_GetCoreID>
    9b18:	4603      	mov	r3, r0
    9b1a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId]--;
    9b1c:	4a0d      	ldr	r2, [pc, #52]	; (9b54 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x44>)
    9b1e:	9b01      	ldr	r3, [sp, #4]
    9b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b24:	1e5a      	subs	r2, r3, #1
    9b26:	490b      	ldr	r1, [pc, #44]	; (9b54 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x44>)
    9b28:	9b01      	ldr	r3, [sp, #4]
    9b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
    9b2e:	4a0a      	ldr	r2, [pc, #40]	; (9b58 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x48>)
    9b30:	9b01      	ldr	r3, [sp, #4]
    9b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b36:	f003 0301 	and.w	r3, r3, #1
    9b3a:	2b00      	cmp	r3, #0
    9b3c:	d106      	bne.n	9b4c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x3c>
    9b3e:	4a05      	ldr	r2, [pc, #20]	; (9b54 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x44>)
    9b40:	9b01      	ldr	r3, [sp, #4]
    9b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b46:	2b00      	cmp	r3, #0
    9b48:	d100      	bne.n	9b4c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9b4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9b4c:	bf00      	nop
    9b4e:	b003      	add	sp, #12
    9b50:	f85d fb04 	ldr.w	pc, [sp], #4
    9b54:	1fff9148 	.word	0x1fff9148
    9b58:	1fff9144 	.word	0x1fff9144

00009b5c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62(void)
{
    9b5c:	b500      	push	{lr}
    9b5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b60:	f7f7 f834 	bl	bcc <Sys_GetCoreID>
    9b64:	4603      	mov	r3, r0
    9b66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId])
    9b68:	4a10      	ldr	r2, [pc, #64]	; (9bac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x50>)
    9b6a:	9b01      	ldr	r3, [sp, #4]
    9b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b70:	2b00      	cmp	r3, #0
    9b72:	d10d      	bne.n	9b90 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9b74:	f7f6 ff49 	bl	a0a <Gpt_schm_read_msr>
    9b78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9b7a:	9b00      	ldr	r3, [sp, #0]
    9b7c:	f003 0301 	and.w	r3, r3, #1
    9b80:	2b00      	cmp	r3, #0
    9b82:	d100      	bne.n	9b86 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9b84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_62[u32CoreId] = msr;
    9b86:	490a      	ldr	r1, [pc, #40]	; (9bb0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x54>)
    9b88:	9b01      	ldr	r3, [sp, #4]
    9b8a:	9a00      	ldr	r2, [sp, #0]
    9b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId]++;
    9b90:	4a06      	ldr	r2, [pc, #24]	; (9bac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x50>)
    9b92:	9b01      	ldr	r3, [sp, #4]
    9b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b98:	1c5a      	adds	r2, r3, #1
    9b9a:	4904      	ldr	r1, [pc, #16]	; (9bac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x50>)
    9b9c:	9b01      	ldr	r3, [sp, #4]
    9b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9ba2:	bf00      	nop
    9ba4:	b003      	add	sp, #12
    9ba6:	f85d fb04 	ldr.w	pc, [sp], #4
    9baa:	bf00      	nop
    9bac:	1fff9150 	.word	0x1fff9150
    9bb0:	1fff914c 	.word	0x1fff914c

00009bb4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62(void)
{
    9bb4:	b500      	push	{lr}
    9bb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9bb8:	f7f7 f808 	bl	bcc <Sys_GetCoreID>
    9bbc:	4603      	mov	r3, r0
    9bbe:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId]--;
    9bc0:	4a0d      	ldr	r2, [pc, #52]	; (9bf8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x44>)
    9bc2:	9b01      	ldr	r3, [sp, #4]
    9bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bc8:	1e5a      	subs	r2, r3, #1
    9bca:	490b      	ldr	r1, [pc, #44]	; (9bf8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x44>)
    9bcc:	9b01      	ldr	r3, [sp, #4]
    9bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
    9bd2:	4a0a      	ldr	r2, [pc, #40]	; (9bfc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x48>)
    9bd4:	9b01      	ldr	r3, [sp, #4]
    9bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bda:	f003 0301 	and.w	r3, r3, #1
    9bde:	2b00      	cmp	r3, #0
    9be0:	d106      	bne.n	9bf0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x3c>
    9be2:	4a05      	ldr	r2, [pc, #20]	; (9bf8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x44>)
    9be4:	9b01      	ldr	r3, [sp, #4]
    9be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bea:	2b00      	cmp	r3, #0
    9bec:	d100      	bne.n	9bf0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9bee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9bf0:	bf00      	nop
    9bf2:	b003      	add	sp, #12
    9bf4:	f85d fb04 	ldr.w	pc, [sp], #4
    9bf8:	1fff9150 	.word	0x1fff9150
    9bfc:	1fff914c 	.word	0x1fff914c

00009c00 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63(void)
{
    9c00:	b500      	push	{lr}
    9c02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9c04:	f7f6 ffe2 	bl	bcc <Sys_GetCoreID>
    9c08:	4603      	mov	r3, r0
    9c0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId])
    9c0c:	4a10      	ldr	r2, [pc, #64]	; (9c50 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x50>)
    9c0e:	9b01      	ldr	r3, [sp, #4]
    9c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c14:	2b00      	cmp	r3, #0
    9c16:	d10d      	bne.n	9c34 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9c18:	f7f6 fef7 	bl	a0a <Gpt_schm_read_msr>
    9c1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9c1e:	9b00      	ldr	r3, [sp, #0]
    9c20:	f003 0301 	and.w	r3, r3, #1
    9c24:	2b00      	cmp	r3, #0
    9c26:	d100      	bne.n	9c2a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9c28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_63[u32CoreId] = msr;
    9c2a:	490a      	ldr	r1, [pc, #40]	; (9c54 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x54>)
    9c2c:	9b01      	ldr	r3, [sp, #4]
    9c2e:	9a00      	ldr	r2, [sp, #0]
    9c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId]++;
    9c34:	4a06      	ldr	r2, [pc, #24]	; (9c50 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x50>)
    9c36:	9b01      	ldr	r3, [sp, #4]
    9c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c3c:	1c5a      	adds	r2, r3, #1
    9c3e:	4904      	ldr	r1, [pc, #16]	; (9c50 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x50>)
    9c40:	9b01      	ldr	r3, [sp, #4]
    9c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9c46:	bf00      	nop
    9c48:	b003      	add	sp, #12
    9c4a:	f85d fb04 	ldr.w	pc, [sp], #4
    9c4e:	bf00      	nop
    9c50:	1fff9158 	.word	0x1fff9158
    9c54:	1fff9154 	.word	0x1fff9154

00009c58 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63(void)
{
    9c58:	b500      	push	{lr}
    9c5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9c5c:	f7f6 ffb6 	bl	bcc <Sys_GetCoreID>
    9c60:	4603      	mov	r3, r0
    9c62:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId]--;
    9c64:	4a0d      	ldr	r2, [pc, #52]	; (9c9c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x44>)
    9c66:	9b01      	ldr	r3, [sp, #4]
    9c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c6c:	1e5a      	subs	r2, r3, #1
    9c6e:	490b      	ldr	r1, [pc, #44]	; (9c9c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x44>)
    9c70:	9b01      	ldr	r3, [sp, #4]
    9c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
    9c76:	4a0a      	ldr	r2, [pc, #40]	; (9ca0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x48>)
    9c78:	9b01      	ldr	r3, [sp, #4]
    9c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c7e:	f003 0301 	and.w	r3, r3, #1
    9c82:	2b00      	cmp	r3, #0
    9c84:	d106      	bne.n	9c94 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x3c>
    9c86:	4a05      	ldr	r2, [pc, #20]	; (9c9c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x44>)
    9c88:	9b01      	ldr	r3, [sp, #4]
    9c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c8e:	2b00      	cmp	r3, #0
    9c90:	d100      	bne.n	9c94 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9c92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9c94:	bf00      	nop
    9c96:	b003      	add	sp, #12
    9c98:	f85d fb04 	ldr.w	pc, [sp], #4
    9c9c:	1fff9158 	.word	0x1fff9158
    9ca0:	1fff9154 	.word	0x1fff9154

00009ca4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64(void)
{
    9ca4:	b500      	push	{lr}
    9ca6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9ca8:	f7f6 ff90 	bl	bcc <Sys_GetCoreID>
    9cac:	4603      	mov	r3, r0
    9cae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId])
    9cb0:	4a10      	ldr	r2, [pc, #64]	; (9cf4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x50>)
    9cb2:	9b01      	ldr	r3, [sp, #4]
    9cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cb8:	2b00      	cmp	r3, #0
    9cba:	d10d      	bne.n	9cd8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9cbc:	f7f6 fea5 	bl	a0a <Gpt_schm_read_msr>
    9cc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9cc2:	9b00      	ldr	r3, [sp, #0]
    9cc4:	f003 0301 	and.w	r3, r3, #1
    9cc8:	2b00      	cmp	r3, #0
    9cca:	d100      	bne.n	9cce <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9ccc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_64[u32CoreId] = msr;
    9cce:	490a      	ldr	r1, [pc, #40]	; (9cf8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x54>)
    9cd0:	9b01      	ldr	r3, [sp, #4]
    9cd2:	9a00      	ldr	r2, [sp, #0]
    9cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId]++;
    9cd8:	4a06      	ldr	r2, [pc, #24]	; (9cf4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x50>)
    9cda:	9b01      	ldr	r3, [sp, #4]
    9cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ce0:	1c5a      	adds	r2, r3, #1
    9ce2:	4904      	ldr	r1, [pc, #16]	; (9cf4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x50>)
    9ce4:	9b01      	ldr	r3, [sp, #4]
    9ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9cea:	bf00      	nop
    9cec:	b003      	add	sp, #12
    9cee:	f85d fb04 	ldr.w	pc, [sp], #4
    9cf2:	bf00      	nop
    9cf4:	1fff9160 	.word	0x1fff9160
    9cf8:	1fff915c 	.word	0x1fff915c

00009cfc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64(void)
{
    9cfc:	b500      	push	{lr}
    9cfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9d00:	f7f6 ff64 	bl	bcc <Sys_GetCoreID>
    9d04:	4603      	mov	r3, r0
    9d06:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId]--;
    9d08:	4a0d      	ldr	r2, [pc, #52]	; (9d40 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x44>)
    9d0a:	9b01      	ldr	r3, [sp, #4]
    9d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d10:	1e5a      	subs	r2, r3, #1
    9d12:	490b      	ldr	r1, [pc, #44]	; (9d40 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x44>)
    9d14:	9b01      	ldr	r3, [sp, #4]
    9d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
    9d1a:	4a0a      	ldr	r2, [pc, #40]	; (9d44 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x48>)
    9d1c:	9b01      	ldr	r3, [sp, #4]
    9d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d22:	f003 0301 	and.w	r3, r3, #1
    9d26:	2b00      	cmp	r3, #0
    9d28:	d106      	bne.n	9d38 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x3c>
    9d2a:	4a05      	ldr	r2, [pc, #20]	; (9d40 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x44>)
    9d2c:	9b01      	ldr	r3, [sp, #4]
    9d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d32:	2b00      	cmp	r3, #0
    9d34:	d100      	bne.n	9d38 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9d36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9d38:	bf00      	nop
    9d3a:	b003      	add	sp, #12
    9d3c:	f85d fb04 	ldr.w	pc, [sp], #4
    9d40:	1fff9160 	.word	0x1fff9160
    9d44:	1fff915c 	.word	0x1fff915c

00009d48 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65(void)
{
    9d48:	b500      	push	{lr}
    9d4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9d4c:	f7f6 ff3e 	bl	bcc <Sys_GetCoreID>
    9d50:	4603      	mov	r3, r0
    9d52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId])
    9d54:	4a10      	ldr	r2, [pc, #64]	; (9d98 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x50>)
    9d56:	9b01      	ldr	r3, [sp, #4]
    9d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d5c:	2b00      	cmp	r3, #0
    9d5e:	d10d      	bne.n	9d7c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9d60:	f7f6 fe53 	bl	a0a <Gpt_schm_read_msr>
    9d64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9d66:	9b00      	ldr	r3, [sp, #0]
    9d68:	f003 0301 	and.w	r3, r3, #1
    9d6c:	2b00      	cmp	r3, #0
    9d6e:	d100      	bne.n	9d72 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9d70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_65[u32CoreId] = msr;
    9d72:	490a      	ldr	r1, [pc, #40]	; (9d9c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x54>)
    9d74:	9b01      	ldr	r3, [sp, #4]
    9d76:	9a00      	ldr	r2, [sp, #0]
    9d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId]++;
    9d7c:	4a06      	ldr	r2, [pc, #24]	; (9d98 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x50>)
    9d7e:	9b01      	ldr	r3, [sp, #4]
    9d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d84:	1c5a      	adds	r2, r3, #1
    9d86:	4904      	ldr	r1, [pc, #16]	; (9d98 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x50>)
    9d88:	9b01      	ldr	r3, [sp, #4]
    9d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9d8e:	bf00      	nop
    9d90:	b003      	add	sp, #12
    9d92:	f85d fb04 	ldr.w	pc, [sp], #4
    9d96:	bf00      	nop
    9d98:	1fff9168 	.word	0x1fff9168
    9d9c:	1fff9164 	.word	0x1fff9164

00009da0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65(void)
{
    9da0:	b500      	push	{lr}
    9da2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9da4:	f7f6 ff12 	bl	bcc <Sys_GetCoreID>
    9da8:	4603      	mov	r3, r0
    9daa:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId]--;
    9dac:	4a0d      	ldr	r2, [pc, #52]	; (9de4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x44>)
    9dae:	9b01      	ldr	r3, [sp, #4]
    9db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9db4:	1e5a      	subs	r2, r3, #1
    9db6:	490b      	ldr	r1, [pc, #44]	; (9de4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x44>)
    9db8:	9b01      	ldr	r3, [sp, #4]
    9dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
    9dbe:	4a0a      	ldr	r2, [pc, #40]	; (9de8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x48>)
    9dc0:	9b01      	ldr	r3, [sp, #4]
    9dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dc6:	f003 0301 	and.w	r3, r3, #1
    9dca:	2b00      	cmp	r3, #0
    9dcc:	d106      	bne.n	9ddc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x3c>
    9dce:	4a05      	ldr	r2, [pc, #20]	; (9de4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x44>)
    9dd0:	9b01      	ldr	r3, [sp, #4]
    9dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dd6:	2b00      	cmp	r3, #0
    9dd8:	d100      	bne.n	9ddc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9dda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9ddc:	bf00      	nop
    9dde:	b003      	add	sp, #12
    9de0:	f85d fb04 	ldr.w	pc, [sp], #4
    9de4:	1fff9168 	.word	0x1fff9168
    9de8:	1fff9164 	.word	0x1fff9164

00009dec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66(void)
{
    9dec:	b500      	push	{lr}
    9dee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9df0:	f7f6 feec 	bl	bcc <Sys_GetCoreID>
    9df4:	4603      	mov	r3, r0
    9df6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId])
    9df8:	4a10      	ldr	r2, [pc, #64]	; (9e3c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x50>)
    9dfa:	9b01      	ldr	r3, [sp, #4]
    9dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e00:	2b00      	cmp	r3, #0
    9e02:	d10d      	bne.n	9e20 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9e04:	f7f6 fe01 	bl	a0a <Gpt_schm_read_msr>
    9e08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9e0a:	9b00      	ldr	r3, [sp, #0]
    9e0c:	f003 0301 	and.w	r3, r3, #1
    9e10:	2b00      	cmp	r3, #0
    9e12:	d100      	bne.n	9e16 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9e14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_66[u32CoreId] = msr;
    9e16:	490a      	ldr	r1, [pc, #40]	; (9e40 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x54>)
    9e18:	9b01      	ldr	r3, [sp, #4]
    9e1a:	9a00      	ldr	r2, [sp, #0]
    9e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId]++;
    9e20:	4a06      	ldr	r2, [pc, #24]	; (9e3c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x50>)
    9e22:	9b01      	ldr	r3, [sp, #4]
    9e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e28:	1c5a      	adds	r2, r3, #1
    9e2a:	4904      	ldr	r1, [pc, #16]	; (9e3c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x50>)
    9e2c:	9b01      	ldr	r3, [sp, #4]
    9e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9e32:	bf00      	nop
    9e34:	b003      	add	sp, #12
    9e36:	f85d fb04 	ldr.w	pc, [sp], #4
    9e3a:	bf00      	nop
    9e3c:	1fff9170 	.word	0x1fff9170
    9e40:	1fff916c 	.word	0x1fff916c

00009e44 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66(void)
{
    9e44:	b500      	push	{lr}
    9e46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e48:	f7f6 fec0 	bl	bcc <Sys_GetCoreID>
    9e4c:	4603      	mov	r3, r0
    9e4e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId]--;
    9e50:	4a0d      	ldr	r2, [pc, #52]	; (9e88 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x44>)
    9e52:	9b01      	ldr	r3, [sp, #4]
    9e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e58:	1e5a      	subs	r2, r3, #1
    9e5a:	490b      	ldr	r1, [pc, #44]	; (9e88 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x44>)
    9e5c:	9b01      	ldr	r3, [sp, #4]
    9e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
    9e62:	4a0a      	ldr	r2, [pc, #40]	; (9e8c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x48>)
    9e64:	9b01      	ldr	r3, [sp, #4]
    9e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e6a:	f003 0301 	and.w	r3, r3, #1
    9e6e:	2b00      	cmp	r3, #0
    9e70:	d106      	bne.n	9e80 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x3c>
    9e72:	4a05      	ldr	r2, [pc, #20]	; (9e88 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x44>)
    9e74:	9b01      	ldr	r3, [sp, #4]
    9e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e7a:	2b00      	cmp	r3, #0
    9e7c:	d100      	bne.n	9e80 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9e7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9e80:	bf00      	nop
    9e82:	b003      	add	sp, #12
    9e84:	f85d fb04 	ldr.w	pc, [sp], #4
    9e88:	1fff9170 	.word	0x1fff9170
    9e8c:	1fff916c 	.word	0x1fff916c

00009e90 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67(void)
{
    9e90:	b500      	push	{lr}
    9e92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e94:	f7f6 fe9a 	bl	bcc <Sys_GetCoreID>
    9e98:	4603      	mov	r3, r0
    9e9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId])
    9e9c:	4a10      	ldr	r2, [pc, #64]	; (9ee0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x50>)
    9e9e:	9b01      	ldr	r3, [sp, #4]
    9ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ea4:	2b00      	cmp	r3, #0
    9ea6:	d10d      	bne.n	9ec4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9ea8:	f7f6 fdaf 	bl	a0a <Gpt_schm_read_msr>
    9eac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9eae:	9b00      	ldr	r3, [sp, #0]
    9eb0:	f003 0301 	and.w	r3, r3, #1
    9eb4:	2b00      	cmp	r3, #0
    9eb6:	d100      	bne.n	9eba <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9eb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_67[u32CoreId] = msr;
    9eba:	490a      	ldr	r1, [pc, #40]	; (9ee4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x54>)
    9ebc:	9b01      	ldr	r3, [sp, #4]
    9ebe:	9a00      	ldr	r2, [sp, #0]
    9ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId]++;
    9ec4:	4a06      	ldr	r2, [pc, #24]	; (9ee0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x50>)
    9ec6:	9b01      	ldr	r3, [sp, #4]
    9ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ecc:	1c5a      	adds	r2, r3, #1
    9ece:	4904      	ldr	r1, [pc, #16]	; (9ee0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x50>)
    9ed0:	9b01      	ldr	r3, [sp, #4]
    9ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9ed6:	bf00      	nop
    9ed8:	b003      	add	sp, #12
    9eda:	f85d fb04 	ldr.w	pc, [sp], #4
    9ede:	bf00      	nop
    9ee0:	1fff9178 	.word	0x1fff9178
    9ee4:	1fff9174 	.word	0x1fff9174

00009ee8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67(void)
{
    9ee8:	b500      	push	{lr}
    9eea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9eec:	f7f6 fe6e 	bl	bcc <Sys_GetCoreID>
    9ef0:	4603      	mov	r3, r0
    9ef2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId]--;
    9ef4:	4a0d      	ldr	r2, [pc, #52]	; (9f2c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x44>)
    9ef6:	9b01      	ldr	r3, [sp, #4]
    9ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9efc:	1e5a      	subs	r2, r3, #1
    9efe:	490b      	ldr	r1, [pc, #44]	; (9f2c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x44>)
    9f00:	9b01      	ldr	r3, [sp, #4]
    9f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
    9f06:	4a0a      	ldr	r2, [pc, #40]	; (9f30 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x48>)
    9f08:	9b01      	ldr	r3, [sp, #4]
    9f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f0e:	f003 0301 	and.w	r3, r3, #1
    9f12:	2b00      	cmp	r3, #0
    9f14:	d106      	bne.n	9f24 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x3c>
    9f16:	4a05      	ldr	r2, [pc, #20]	; (9f2c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x44>)
    9f18:	9b01      	ldr	r3, [sp, #4]
    9f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f1e:	2b00      	cmp	r3, #0
    9f20:	d100      	bne.n	9f24 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9f22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9f24:	bf00      	nop
    9f26:	b003      	add	sp, #12
    9f28:	f85d fb04 	ldr.w	pc, [sp], #4
    9f2c:	1fff9178 	.word	0x1fff9178
    9f30:	1fff9174 	.word	0x1fff9174

00009f34 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68(void)
{
    9f34:	b500      	push	{lr}
    9f36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9f38:	f7f6 fe48 	bl	bcc <Sys_GetCoreID>
    9f3c:	4603      	mov	r3, r0
    9f3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId])
    9f40:	4a10      	ldr	r2, [pc, #64]	; (9f84 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x50>)
    9f42:	9b01      	ldr	r3, [sp, #4]
    9f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f48:	2b00      	cmp	r3, #0
    9f4a:	d10d      	bne.n	9f68 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9f4c:	f7f6 fd5d 	bl	a0a <Gpt_schm_read_msr>
    9f50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9f52:	9b00      	ldr	r3, [sp, #0]
    9f54:	f003 0301 	and.w	r3, r3, #1
    9f58:	2b00      	cmp	r3, #0
    9f5a:	d100      	bne.n	9f5e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9f5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_68[u32CoreId] = msr;
    9f5e:	490a      	ldr	r1, [pc, #40]	; (9f88 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x54>)
    9f60:	9b01      	ldr	r3, [sp, #4]
    9f62:	9a00      	ldr	r2, [sp, #0]
    9f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId]++;
    9f68:	4a06      	ldr	r2, [pc, #24]	; (9f84 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x50>)
    9f6a:	9b01      	ldr	r3, [sp, #4]
    9f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f70:	1c5a      	adds	r2, r3, #1
    9f72:	4904      	ldr	r1, [pc, #16]	; (9f84 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x50>)
    9f74:	9b01      	ldr	r3, [sp, #4]
    9f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9f7a:	bf00      	nop
    9f7c:	b003      	add	sp, #12
    9f7e:	f85d fb04 	ldr.w	pc, [sp], #4
    9f82:	bf00      	nop
    9f84:	1fff9180 	.word	0x1fff9180
    9f88:	1fff917c 	.word	0x1fff917c

00009f8c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68(void)
{
    9f8c:	b500      	push	{lr}
    9f8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9f90:	f7f6 fe1c 	bl	bcc <Sys_GetCoreID>
    9f94:	4603      	mov	r3, r0
    9f96:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId]--;
    9f98:	4a0d      	ldr	r2, [pc, #52]	; (9fd0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x44>)
    9f9a:	9b01      	ldr	r3, [sp, #4]
    9f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fa0:	1e5a      	subs	r2, r3, #1
    9fa2:	490b      	ldr	r1, [pc, #44]	; (9fd0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x44>)
    9fa4:	9b01      	ldr	r3, [sp, #4]
    9fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
    9faa:	4a0a      	ldr	r2, [pc, #40]	; (9fd4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x48>)
    9fac:	9b01      	ldr	r3, [sp, #4]
    9fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fb2:	f003 0301 	and.w	r3, r3, #1
    9fb6:	2b00      	cmp	r3, #0
    9fb8:	d106      	bne.n	9fc8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x3c>
    9fba:	4a05      	ldr	r2, [pc, #20]	; (9fd0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x44>)
    9fbc:	9b01      	ldr	r3, [sp, #4]
    9fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fc2:	2b00      	cmp	r3, #0
    9fc4:	d100      	bne.n	9fc8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9fc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9fc8:	bf00      	nop
    9fca:	b003      	add	sp, #12
    9fcc:	f85d fb04 	ldr.w	pc, [sp], #4
    9fd0:	1fff9180 	.word	0x1fff9180
    9fd4:	1fff917c 	.word	0x1fff917c

00009fd8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69(void)
{
    9fd8:	b500      	push	{lr}
    9fda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9fdc:	f7f6 fdf6 	bl	bcc <Sys_GetCoreID>
    9fe0:	4603      	mov	r3, r0
    9fe2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId])
    9fe4:	4a10      	ldr	r2, [pc, #64]	; (a028 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x50>)
    9fe6:	9b01      	ldr	r3, [sp, #4]
    9fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fec:	2b00      	cmp	r3, #0
    9fee:	d10d      	bne.n	a00c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9ff0:	f7f6 fd0b 	bl	a0a <Gpt_schm_read_msr>
    9ff4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9ff6:	9b00      	ldr	r3, [sp, #0]
    9ff8:	f003 0301 	and.w	r3, r3, #1
    9ffc:	2b00      	cmp	r3, #0
    9ffe:	d100      	bne.n	a002 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a000:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_69[u32CoreId] = msr;
    a002:	490a      	ldr	r1, [pc, #40]	; (a02c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x54>)
    a004:	9b01      	ldr	r3, [sp, #4]
    a006:	9a00      	ldr	r2, [sp, #0]
    a008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId]++;
    a00c:	4a06      	ldr	r2, [pc, #24]	; (a028 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x50>)
    a00e:	9b01      	ldr	r3, [sp, #4]
    a010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a014:	1c5a      	adds	r2, r3, #1
    a016:	4904      	ldr	r1, [pc, #16]	; (a028 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x50>)
    a018:	9b01      	ldr	r3, [sp, #4]
    a01a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a01e:	bf00      	nop
    a020:	b003      	add	sp, #12
    a022:	f85d fb04 	ldr.w	pc, [sp], #4
    a026:	bf00      	nop
    a028:	1fff9188 	.word	0x1fff9188
    a02c:	1fff9184 	.word	0x1fff9184

0000a030 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69(void)
{
    a030:	b500      	push	{lr}
    a032:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a034:	f7f6 fdca 	bl	bcc <Sys_GetCoreID>
    a038:	4603      	mov	r3, r0
    a03a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId]--;
    a03c:	4a0d      	ldr	r2, [pc, #52]	; (a074 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x44>)
    a03e:	9b01      	ldr	r3, [sp, #4]
    a040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a044:	1e5a      	subs	r2, r3, #1
    a046:	490b      	ldr	r1, [pc, #44]	; (a074 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x44>)
    a048:	9b01      	ldr	r3, [sp, #4]
    a04a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
    a04e:	4a0a      	ldr	r2, [pc, #40]	; (a078 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x48>)
    a050:	9b01      	ldr	r3, [sp, #4]
    a052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a056:	f003 0301 	and.w	r3, r3, #1
    a05a:	2b00      	cmp	r3, #0
    a05c:	d106      	bne.n	a06c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x3c>
    a05e:	4a05      	ldr	r2, [pc, #20]	; (a074 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x44>)
    a060:	9b01      	ldr	r3, [sp, #4]
    a062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a066:	2b00      	cmp	r3, #0
    a068:	d100      	bne.n	a06c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a06a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a06c:	bf00      	nop
    a06e:	b003      	add	sp, #12
    a070:	f85d fb04 	ldr.w	pc, [sp], #4
    a074:	1fff9188 	.word	0x1fff9188
    a078:	1fff9184 	.word	0x1fff9184

0000a07c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70(void)
{
    a07c:	b500      	push	{lr}
    a07e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a080:	f7f6 fda4 	bl	bcc <Sys_GetCoreID>
    a084:	4603      	mov	r3, r0
    a086:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId])
    a088:	4a10      	ldr	r2, [pc, #64]	; (a0cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x50>)
    a08a:	9b01      	ldr	r3, [sp, #4]
    a08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a090:	2b00      	cmp	r3, #0
    a092:	d10d      	bne.n	a0b0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a094:	f7f6 fcb9 	bl	a0a <Gpt_schm_read_msr>
    a098:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a09a:	9b00      	ldr	r3, [sp, #0]
    a09c:	f003 0301 	and.w	r3, r3, #1
    a0a0:	2b00      	cmp	r3, #0
    a0a2:	d100      	bne.n	a0a6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a0a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_70[u32CoreId] = msr;
    a0a6:	490a      	ldr	r1, [pc, #40]	; (a0d0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x54>)
    a0a8:	9b01      	ldr	r3, [sp, #4]
    a0aa:	9a00      	ldr	r2, [sp, #0]
    a0ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId]++;
    a0b0:	4a06      	ldr	r2, [pc, #24]	; (a0cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x50>)
    a0b2:	9b01      	ldr	r3, [sp, #4]
    a0b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0b8:	1c5a      	adds	r2, r3, #1
    a0ba:	4904      	ldr	r1, [pc, #16]	; (a0cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x50>)
    a0bc:	9b01      	ldr	r3, [sp, #4]
    a0be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a0c2:	bf00      	nop
    a0c4:	b003      	add	sp, #12
    a0c6:	f85d fb04 	ldr.w	pc, [sp], #4
    a0ca:	bf00      	nop
    a0cc:	1fff9190 	.word	0x1fff9190
    a0d0:	1fff918c 	.word	0x1fff918c

0000a0d4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70(void)
{
    a0d4:	b500      	push	{lr}
    a0d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a0d8:	f7f6 fd78 	bl	bcc <Sys_GetCoreID>
    a0dc:	4603      	mov	r3, r0
    a0de:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId]--;
    a0e0:	4a0d      	ldr	r2, [pc, #52]	; (a118 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x44>)
    a0e2:	9b01      	ldr	r3, [sp, #4]
    a0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0e8:	1e5a      	subs	r2, r3, #1
    a0ea:	490b      	ldr	r1, [pc, #44]	; (a118 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x44>)
    a0ec:	9b01      	ldr	r3, [sp, #4]
    a0ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
    a0f2:	4a0a      	ldr	r2, [pc, #40]	; (a11c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x48>)
    a0f4:	9b01      	ldr	r3, [sp, #4]
    a0f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0fa:	f003 0301 	and.w	r3, r3, #1
    a0fe:	2b00      	cmp	r3, #0
    a100:	d106      	bne.n	a110 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x3c>
    a102:	4a05      	ldr	r2, [pc, #20]	; (a118 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x44>)
    a104:	9b01      	ldr	r3, [sp, #4]
    a106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a10a:	2b00      	cmp	r3, #0
    a10c:	d100      	bne.n	a110 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a10e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a110:	bf00      	nop
    a112:	b003      	add	sp, #12
    a114:	f85d fb04 	ldr.w	pc, [sp], #4
    a118:	1fff9190 	.word	0x1fff9190
    a11c:	1fff918c 	.word	0x1fff918c

0000a120 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71(void)
{
    a120:	b500      	push	{lr}
    a122:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a124:	f7f6 fd52 	bl	bcc <Sys_GetCoreID>
    a128:	4603      	mov	r3, r0
    a12a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId])
    a12c:	4a10      	ldr	r2, [pc, #64]	; (a170 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x50>)
    a12e:	9b01      	ldr	r3, [sp, #4]
    a130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a134:	2b00      	cmp	r3, #0
    a136:	d10d      	bne.n	a154 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a138:	f7f6 fc67 	bl	a0a <Gpt_schm_read_msr>
    a13c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a13e:	9b00      	ldr	r3, [sp, #0]
    a140:	f003 0301 	and.w	r3, r3, #1
    a144:	2b00      	cmp	r3, #0
    a146:	d100      	bne.n	a14a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a148:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_71[u32CoreId] = msr;
    a14a:	490a      	ldr	r1, [pc, #40]	; (a174 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x54>)
    a14c:	9b01      	ldr	r3, [sp, #4]
    a14e:	9a00      	ldr	r2, [sp, #0]
    a150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId]++;
    a154:	4a06      	ldr	r2, [pc, #24]	; (a170 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x50>)
    a156:	9b01      	ldr	r3, [sp, #4]
    a158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a15c:	1c5a      	adds	r2, r3, #1
    a15e:	4904      	ldr	r1, [pc, #16]	; (a170 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x50>)
    a160:	9b01      	ldr	r3, [sp, #4]
    a162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a166:	bf00      	nop
    a168:	b003      	add	sp, #12
    a16a:	f85d fb04 	ldr.w	pc, [sp], #4
    a16e:	bf00      	nop
    a170:	1fff9198 	.word	0x1fff9198
    a174:	1fff9194 	.word	0x1fff9194

0000a178 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71(void)
{
    a178:	b500      	push	{lr}
    a17a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a17c:	f7f6 fd26 	bl	bcc <Sys_GetCoreID>
    a180:	4603      	mov	r3, r0
    a182:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId]--;
    a184:	4a0d      	ldr	r2, [pc, #52]	; (a1bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x44>)
    a186:	9b01      	ldr	r3, [sp, #4]
    a188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a18c:	1e5a      	subs	r2, r3, #1
    a18e:	490b      	ldr	r1, [pc, #44]	; (a1bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x44>)
    a190:	9b01      	ldr	r3, [sp, #4]
    a192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
    a196:	4a0a      	ldr	r2, [pc, #40]	; (a1c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x48>)
    a198:	9b01      	ldr	r3, [sp, #4]
    a19a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a19e:	f003 0301 	and.w	r3, r3, #1
    a1a2:	2b00      	cmp	r3, #0
    a1a4:	d106      	bne.n	a1b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x3c>
    a1a6:	4a05      	ldr	r2, [pc, #20]	; (a1bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x44>)
    a1a8:	9b01      	ldr	r3, [sp, #4]
    a1aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1ae:	2b00      	cmp	r3, #0
    a1b0:	d100      	bne.n	a1b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a1b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a1b4:	bf00      	nop
    a1b6:	b003      	add	sp, #12
    a1b8:	f85d fb04 	ldr.w	pc, [sp], #4
    a1bc:	1fff9198 	.word	0x1fff9198
    a1c0:	1fff9194 	.word	0x1fff9194

0000a1c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72(void)
{
    a1c4:	b500      	push	{lr}
    a1c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a1c8:	f7f6 fd00 	bl	bcc <Sys_GetCoreID>
    a1cc:	4603      	mov	r3, r0
    a1ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId])
    a1d0:	4a10      	ldr	r2, [pc, #64]	; (a214 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x50>)
    a1d2:	9b01      	ldr	r3, [sp, #4]
    a1d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1d8:	2b00      	cmp	r3, #0
    a1da:	d10d      	bne.n	a1f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a1dc:	f7f6 fc15 	bl	a0a <Gpt_schm_read_msr>
    a1e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a1e2:	9b00      	ldr	r3, [sp, #0]
    a1e4:	f003 0301 	and.w	r3, r3, #1
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	d100      	bne.n	a1ee <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a1ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_72[u32CoreId] = msr;
    a1ee:	490a      	ldr	r1, [pc, #40]	; (a218 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x54>)
    a1f0:	9b01      	ldr	r3, [sp, #4]
    a1f2:	9a00      	ldr	r2, [sp, #0]
    a1f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId]++;
    a1f8:	4a06      	ldr	r2, [pc, #24]	; (a214 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x50>)
    a1fa:	9b01      	ldr	r3, [sp, #4]
    a1fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a200:	1c5a      	adds	r2, r3, #1
    a202:	4904      	ldr	r1, [pc, #16]	; (a214 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x50>)
    a204:	9b01      	ldr	r3, [sp, #4]
    a206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a20a:	bf00      	nop
    a20c:	b003      	add	sp, #12
    a20e:	f85d fb04 	ldr.w	pc, [sp], #4
    a212:	bf00      	nop
    a214:	1fff91a0 	.word	0x1fff91a0
    a218:	1fff919c 	.word	0x1fff919c

0000a21c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72(void)
{
    a21c:	b500      	push	{lr}
    a21e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a220:	f7f6 fcd4 	bl	bcc <Sys_GetCoreID>
    a224:	4603      	mov	r3, r0
    a226:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId]--;
    a228:	4a0d      	ldr	r2, [pc, #52]	; (a260 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x44>)
    a22a:	9b01      	ldr	r3, [sp, #4]
    a22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a230:	1e5a      	subs	r2, r3, #1
    a232:	490b      	ldr	r1, [pc, #44]	; (a260 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x44>)
    a234:	9b01      	ldr	r3, [sp, #4]
    a236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
    a23a:	4a0a      	ldr	r2, [pc, #40]	; (a264 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x48>)
    a23c:	9b01      	ldr	r3, [sp, #4]
    a23e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a242:	f003 0301 	and.w	r3, r3, #1
    a246:	2b00      	cmp	r3, #0
    a248:	d106      	bne.n	a258 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x3c>
    a24a:	4a05      	ldr	r2, [pc, #20]	; (a260 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x44>)
    a24c:	9b01      	ldr	r3, [sp, #4]
    a24e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a252:	2b00      	cmp	r3, #0
    a254:	d100      	bne.n	a258 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a256:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a258:	bf00      	nop
    a25a:	b003      	add	sp, #12
    a25c:	f85d fb04 	ldr.w	pc, [sp], #4
    a260:	1fff91a0 	.word	0x1fff91a0
    a264:	1fff919c 	.word	0x1fff919c

0000a268 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73(void)
{
    a268:	b500      	push	{lr}
    a26a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a26c:	f7f6 fcae 	bl	bcc <Sys_GetCoreID>
    a270:	4603      	mov	r3, r0
    a272:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId])
    a274:	4a10      	ldr	r2, [pc, #64]	; (a2b8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x50>)
    a276:	9b01      	ldr	r3, [sp, #4]
    a278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a27c:	2b00      	cmp	r3, #0
    a27e:	d10d      	bne.n	a29c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a280:	f7f6 fbc3 	bl	a0a <Gpt_schm_read_msr>
    a284:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a286:	9b00      	ldr	r3, [sp, #0]
    a288:	f003 0301 	and.w	r3, r3, #1
    a28c:	2b00      	cmp	r3, #0
    a28e:	d100      	bne.n	a292 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a290:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_73[u32CoreId] = msr;
    a292:	490a      	ldr	r1, [pc, #40]	; (a2bc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x54>)
    a294:	9b01      	ldr	r3, [sp, #4]
    a296:	9a00      	ldr	r2, [sp, #0]
    a298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId]++;
    a29c:	4a06      	ldr	r2, [pc, #24]	; (a2b8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x50>)
    a29e:	9b01      	ldr	r3, [sp, #4]
    a2a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2a4:	1c5a      	adds	r2, r3, #1
    a2a6:	4904      	ldr	r1, [pc, #16]	; (a2b8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x50>)
    a2a8:	9b01      	ldr	r3, [sp, #4]
    a2aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a2ae:	bf00      	nop
    a2b0:	b003      	add	sp, #12
    a2b2:	f85d fb04 	ldr.w	pc, [sp], #4
    a2b6:	bf00      	nop
    a2b8:	1fff91a8 	.word	0x1fff91a8
    a2bc:	1fff91a4 	.word	0x1fff91a4

0000a2c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73(void)
{
    a2c0:	b500      	push	{lr}
    a2c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a2c4:	f7f6 fc82 	bl	bcc <Sys_GetCoreID>
    a2c8:	4603      	mov	r3, r0
    a2ca:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId]--;
    a2cc:	4a0d      	ldr	r2, [pc, #52]	; (a304 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x44>)
    a2ce:	9b01      	ldr	r3, [sp, #4]
    a2d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2d4:	1e5a      	subs	r2, r3, #1
    a2d6:	490b      	ldr	r1, [pc, #44]	; (a304 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x44>)
    a2d8:	9b01      	ldr	r3, [sp, #4]
    a2da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
    a2de:	4a0a      	ldr	r2, [pc, #40]	; (a308 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x48>)
    a2e0:	9b01      	ldr	r3, [sp, #4]
    a2e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2e6:	f003 0301 	and.w	r3, r3, #1
    a2ea:	2b00      	cmp	r3, #0
    a2ec:	d106      	bne.n	a2fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x3c>
    a2ee:	4a05      	ldr	r2, [pc, #20]	; (a304 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x44>)
    a2f0:	9b01      	ldr	r3, [sp, #4]
    a2f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2f6:	2b00      	cmp	r3, #0
    a2f8:	d100      	bne.n	a2fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a2fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a2fc:	bf00      	nop
    a2fe:	b003      	add	sp, #12
    a300:	f85d fb04 	ldr.w	pc, [sp], #4
    a304:	1fff91a8 	.word	0x1fff91a8
    a308:	1fff91a4 	.word	0x1fff91a4

0000a30c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    a30c:	b500      	push	{lr}
    a30e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a310:	f7f6 fc5c 	bl	bcc <Sys_GetCoreID>
    a314:	4603      	mov	r3, r0
    a316:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    a318:	4a10      	ldr	r2, [pc, #64]	; (a35c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    a31a:	9b01      	ldr	r3, [sp, #4]
    a31c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a320:	2b00      	cmp	r3, #0
    a322:	d10d      	bne.n	a340 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a324:	f7f6 fb7a 	bl	a1c <Mcu_schm_read_msr>
    a328:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a32a:	9b00      	ldr	r3, [sp, #0]
    a32c:	f003 0301 	and.w	r3, r3, #1
    a330:	2b00      	cmp	r3, #0
    a332:	d100      	bne.n	a336 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a334:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    a336:	490a      	ldr	r1, [pc, #40]	; (a360 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    a338:	9b01      	ldr	r3, [sp, #4]
    a33a:	9a00      	ldr	r2, [sp, #0]
    a33c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    a340:	4a06      	ldr	r2, [pc, #24]	; (a35c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    a342:	9b01      	ldr	r3, [sp, #4]
    a344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a348:	1c5a      	adds	r2, r3, #1
    a34a:	4904      	ldr	r1, [pc, #16]	; (a35c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    a34c:	9b01      	ldr	r3, [sp, #4]
    a34e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a352:	bf00      	nop
    a354:	b003      	add	sp, #12
    a356:	f85d fb04 	ldr.w	pc, [sp], #4
    a35a:	bf00      	nop
    a35c:	1fff91b0 	.word	0x1fff91b0
    a360:	1fff91ac 	.word	0x1fff91ac

0000a364 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    a364:	b500      	push	{lr}
    a366:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a368:	f7f6 fc30 	bl	bcc <Sys_GetCoreID>
    a36c:	4603      	mov	r3, r0
    a36e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    a370:	4a0d      	ldr	r2, [pc, #52]	; (a3a8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    a372:	9b01      	ldr	r3, [sp, #4]
    a374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a378:	1e5a      	subs	r2, r3, #1
    a37a:	490b      	ldr	r1, [pc, #44]	; (a3a8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    a37c:	9b01      	ldr	r3, [sp, #4]
    a37e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    a382:	4a0a      	ldr	r2, [pc, #40]	; (a3ac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    a384:	9b01      	ldr	r3, [sp, #4]
    a386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a38a:	f003 0301 	and.w	r3, r3, #1
    a38e:	2b00      	cmp	r3, #0
    a390:	d106      	bne.n	a3a0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    a392:	4a05      	ldr	r2, [pc, #20]	; (a3a8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    a394:	9b01      	ldr	r3, [sp, #4]
    a396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a39a:	2b00      	cmp	r3, #0
    a39c:	d100      	bne.n	a3a0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a39e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a3a0:	bf00      	nop
    a3a2:	b003      	add	sp, #12
    a3a4:	f85d fb04 	ldr.w	pc, [sp], #4
    a3a8:	1fff91b0 	.word	0x1fff91b0
    a3ac:	1fff91ac 	.word	0x1fff91ac

0000a3b0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    a3b0:	b500      	push	{lr}
    a3b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a3b4:	f7f6 fc0a 	bl	bcc <Sys_GetCoreID>
    a3b8:	4603      	mov	r3, r0
    a3ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    a3bc:	4a10      	ldr	r2, [pc, #64]	; (a400 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    a3be:	9b01      	ldr	r3, [sp, #4]
    a3c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3c4:	2b00      	cmp	r3, #0
    a3c6:	d10d      	bne.n	a3e4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a3c8:	f7f6 fb28 	bl	a1c <Mcu_schm_read_msr>
    a3cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a3ce:	9b00      	ldr	r3, [sp, #0]
    a3d0:	f003 0301 	and.w	r3, r3, #1
    a3d4:	2b00      	cmp	r3, #0
    a3d6:	d100      	bne.n	a3da <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a3d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    a3da:	490a      	ldr	r1, [pc, #40]	; (a404 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    a3dc:	9b01      	ldr	r3, [sp, #4]
    a3de:	9a00      	ldr	r2, [sp, #0]
    a3e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    a3e4:	4a06      	ldr	r2, [pc, #24]	; (a400 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    a3e6:	9b01      	ldr	r3, [sp, #4]
    a3e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3ec:	1c5a      	adds	r2, r3, #1
    a3ee:	4904      	ldr	r1, [pc, #16]	; (a400 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    a3f0:	9b01      	ldr	r3, [sp, #4]
    a3f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a3f6:	bf00      	nop
    a3f8:	b003      	add	sp, #12
    a3fa:	f85d fb04 	ldr.w	pc, [sp], #4
    a3fe:	bf00      	nop
    a400:	1fff91b8 	.word	0x1fff91b8
    a404:	1fff91b4 	.word	0x1fff91b4

0000a408 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    a408:	b500      	push	{lr}
    a40a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a40c:	f7f6 fbde 	bl	bcc <Sys_GetCoreID>
    a410:	4603      	mov	r3, r0
    a412:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    a414:	4a0d      	ldr	r2, [pc, #52]	; (a44c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    a416:	9b01      	ldr	r3, [sp, #4]
    a418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a41c:	1e5a      	subs	r2, r3, #1
    a41e:	490b      	ldr	r1, [pc, #44]	; (a44c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    a420:	9b01      	ldr	r3, [sp, #4]
    a422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    a426:	4a0a      	ldr	r2, [pc, #40]	; (a450 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    a428:	9b01      	ldr	r3, [sp, #4]
    a42a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a42e:	f003 0301 	and.w	r3, r3, #1
    a432:	2b00      	cmp	r3, #0
    a434:	d106      	bne.n	a444 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    a436:	4a05      	ldr	r2, [pc, #20]	; (a44c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    a438:	9b01      	ldr	r3, [sp, #4]
    a43a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a43e:	2b00      	cmp	r3, #0
    a440:	d100      	bne.n	a444 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a442:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a444:	bf00      	nop
    a446:	b003      	add	sp, #12
    a448:	f85d fb04 	ldr.w	pc, [sp], #4
    a44c:	1fff91b8 	.word	0x1fff91b8
    a450:	1fff91b4 	.word	0x1fff91b4

0000a454 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    a454:	b500      	push	{lr}
    a456:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a458:	f7f6 fbb8 	bl	bcc <Sys_GetCoreID>
    a45c:	4603      	mov	r3, r0
    a45e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    a460:	4a10      	ldr	r2, [pc, #64]	; (a4a4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    a462:	9b01      	ldr	r3, [sp, #4]
    a464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a468:	2b00      	cmp	r3, #0
    a46a:	d10d      	bne.n	a488 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a46c:	f7f6 fad6 	bl	a1c <Mcu_schm_read_msr>
    a470:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a472:	9b00      	ldr	r3, [sp, #0]
    a474:	f003 0301 	and.w	r3, r3, #1
    a478:	2b00      	cmp	r3, #0
    a47a:	d100      	bne.n	a47e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a47c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    a47e:	490a      	ldr	r1, [pc, #40]	; (a4a8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    a480:	9b01      	ldr	r3, [sp, #4]
    a482:	9a00      	ldr	r2, [sp, #0]
    a484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    a488:	4a06      	ldr	r2, [pc, #24]	; (a4a4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    a48a:	9b01      	ldr	r3, [sp, #4]
    a48c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a490:	1c5a      	adds	r2, r3, #1
    a492:	4904      	ldr	r1, [pc, #16]	; (a4a4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    a494:	9b01      	ldr	r3, [sp, #4]
    a496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a49a:	bf00      	nop
    a49c:	b003      	add	sp, #12
    a49e:	f85d fb04 	ldr.w	pc, [sp], #4
    a4a2:	bf00      	nop
    a4a4:	1fff91c0 	.word	0x1fff91c0
    a4a8:	1fff91bc 	.word	0x1fff91bc

0000a4ac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    a4ac:	b500      	push	{lr}
    a4ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a4b0:	f7f6 fb8c 	bl	bcc <Sys_GetCoreID>
    a4b4:	4603      	mov	r3, r0
    a4b6:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    a4b8:	4a0d      	ldr	r2, [pc, #52]	; (a4f0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    a4ba:	9b01      	ldr	r3, [sp, #4]
    a4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4c0:	1e5a      	subs	r2, r3, #1
    a4c2:	490b      	ldr	r1, [pc, #44]	; (a4f0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    a4c4:	9b01      	ldr	r3, [sp, #4]
    a4c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    a4ca:	4a0a      	ldr	r2, [pc, #40]	; (a4f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    a4cc:	9b01      	ldr	r3, [sp, #4]
    a4ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4d2:	f003 0301 	and.w	r3, r3, #1
    a4d6:	2b00      	cmp	r3, #0
    a4d8:	d106      	bne.n	a4e8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    a4da:	4a05      	ldr	r2, [pc, #20]	; (a4f0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    a4dc:	9b01      	ldr	r3, [sp, #4]
    a4de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4e2:	2b00      	cmp	r3, #0
    a4e4:	d100      	bne.n	a4e8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a4e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a4e8:	bf00      	nop
    a4ea:	b003      	add	sp, #12
    a4ec:	f85d fb04 	ldr.w	pc, [sp], #4
    a4f0:	1fff91c0 	.word	0x1fff91c0
    a4f4:	1fff91bc 	.word	0x1fff91bc

0000a4f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    a4f8:	b500      	push	{lr}
    a4fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a4fc:	f7f6 fb66 	bl	bcc <Sys_GetCoreID>
    a500:	4603      	mov	r3, r0
    a502:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    a504:	4a10      	ldr	r2, [pc, #64]	; (a548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    a506:	9b01      	ldr	r3, [sp, #4]
    a508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a50c:	2b00      	cmp	r3, #0
    a50e:	d10d      	bne.n	a52c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a510:	f7f6 fa8d 	bl	a2e <Port_schm_read_msr>
    a514:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a516:	9b00      	ldr	r3, [sp, #0]
    a518:	f003 0301 	and.w	r3, r3, #1
    a51c:	2b00      	cmp	r3, #0
    a51e:	d100      	bne.n	a522 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a520:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    a522:	490a      	ldr	r1, [pc, #40]	; (a54c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    a524:	9b01      	ldr	r3, [sp, #4]
    a526:	9a00      	ldr	r2, [sp, #0]
    a528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    a52c:	4a06      	ldr	r2, [pc, #24]	; (a548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    a52e:	9b01      	ldr	r3, [sp, #4]
    a530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a534:	1c5a      	adds	r2, r3, #1
    a536:	4904      	ldr	r1, [pc, #16]	; (a548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    a538:	9b01      	ldr	r3, [sp, #4]
    a53a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a53e:	bf00      	nop
    a540:	b003      	add	sp, #12
    a542:	f85d fb04 	ldr.w	pc, [sp], #4
    a546:	bf00      	nop
    a548:	1fff91c8 	.word	0x1fff91c8
    a54c:	1fff91c4 	.word	0x1fff91c4

0000a550 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    a550:	b500      	push	{lr}
    a552:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a554:	f7f6 fb3a 	bl	bcc <Sys_GetCoreID>
    a558:	4603      	mov	r3, r0
    a55a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    a55c:	4a0d      	ldr	r2, [pc, #52]	; (a594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    a55e:	9b01      	ldr	r3, [sp, #4]
    a560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a564:	1e5a      	subs	r2, r3, #1
    a566:	490b      	ldr	r1, [pc, #44]	; (a594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    a568:	9b01      	ldr	r3, [sp, #4]
    a56a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    a56e:	4a0a      	ldr	r2, [pc, #40]	; (a598 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    a570:	9b01      	ldr	r3, [sp, #4]
    a572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a576:	f003 0301 	and.w	r3, r3, #1
    a57a:	2b00      	cmp	r3, #0
    a57c:	d106      	bne.n	a58c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    a57e:	4a05      	ldr	r2, [pc, #20]	; (a594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    a580:	9b01      	ldr	r3, [sp, #4]
    a582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a586:	2b00      	cmp	r3, #0
    a588:	d100      	bne.n	a58c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a58a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a58c:	bf00      	nop
    a58e:	b003      	add	sp, #12
    a590:	f85d fb04 	ldr.w	pc, [sp], #4
    a594:	1fff91c8 	.word	0x1fff91c8
    a598:	1fff91c4 	.word	0x1fff91c4

0000a59c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    a59c:	b500      	push	{lr}
    a59e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a5a0:	f7f6 fb14 	bl	bcc <Sys_GetCoreID>
    a5a4:	4603      	mov	r3, r0
    a5a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    a5a8:	4a10      	ldr	r2, [pc, #64]	; (a5ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    a5aa:	9b01      	ldr	r3, [sp, #4]
    a5ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5b0:	2b00      	cmp	r3, #0
    a5b2:	d10d      	bne.n	a5d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a5b4:	f7f6 fa3b 	bl	a2e <Port_schm_read_msr>
    a5b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a5ba:	9b00      	ldr	r3, [sp, #0]
    a5bc:	f003 0301 	and.w	r3, r3, #1
    a5c0:	2b00      	cmp	r3, #0
    a5c2:	d100      	bne.n	a5c6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a5c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    a5c6:	490a      	ldr	r1, [pc, #40]	; (a5f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    a5c8:	9b01      	ldr	r3, [sp, #4]
    a5ca:	9a00      	ldr	r2, [sp, #0]
    a5cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    a5d0:	4a06      	ldr	r2, [pc, #24]	; (a5ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    a5d2:	9b01      	ldr	r3, [sp, #4]
    a5d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5d8:	1c5a      	adds	r2, r3, #1
    a5da:	4904      	ldr	r1, [pc, #16]	; (a5ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    a5dc:	9b01      	ldr	r3, [sp, #4]
    a5de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a5e2:	bf00      	nop
    a5e4:	b003      	add	sp, #12
    a5e6:	f85d fb04 	ldr.w	pc, [sp], #4
    a5ea:	bf00      	nop
    a5ec:	1fff91d0 	.word	0x1fff91d0
    a5f0:	1fff91cc 	.word	0x1fff91cc

0000a5f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    a5f4:	b500      	push	{lr}
    a5f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a5f8:	f7f6 fae8 	bl	bcc <Sys_GetCoreID>
    a5fc:	4603      	mov	r3, r0
    a5fe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    a600:	4a0d      	ldr	r2, [pc, #52]	; (a638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    a602:	9b01      	ldr	r3, [sp, #4]
    a604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a608:	1e5a      	subs	r2, r3, #1
    a60a:	490b      	ldr	r1, [pc, #44]	; (a638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    a60c:	9b01      	ldr	r3, [sp, #4]
    a60e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    a612:	4a0a      	ldr	r2, [pc, #40]	; (a63c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    a614:	9b01      	ldr	r3, [sp, #4]
    a616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a61a:	f003 0301 	and.w	r3, r3, #1
    a61e:	2b00      	cmp	r3, #0
    a620:	d106      	bne.n	a630 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    a622:	4a05      	ldr	r2, [pc, #20]	; (a638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    a624:	9b01      	ldr	r3, [sp, #4]
    a626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a62a:	2b00      	cmp	r3, #0
    a62c:	d100      	bne.n	a630 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a62e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a630:	bf00      	nop
    a632:	b003      	add	sp, #12
    a634:	f85d fb04 	ldr.w	pc, [sp], #4
    a638:	1fff91d0 	.word	0x1fff91d0
    a63c:	1fff91cc 	.word	0x1fff91cc

0000a640 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    a640:	b500      	push	{lr}
    a642:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a644:	f7f6 fac2 	bl	bcc <Sys_GetCoreID>
    a648:	4603      	mov	r3, r0
    a64a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    a64c:	4a10      	ldr	r2, [pc, #64]	; (a690 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    a64e:	9b01      	ldr	r3, [sp, #4]
    a650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a654:	2b00      	cmp	r3, #0
    a656:	d10d      	bne.n	a674 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a658:	f7f6 f9e9 	bl	a2e <Port_schm_read_msr>
    a65c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a65e:	9b00      	ldr	r3, [sp, #0]
    a660:	f003 0301 	and.w	r3, r3, #1
    a664:	2b00      	cmp	r3, #0
    a666:	d100      	bne.n	a66a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a668:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    a66a:	490a      	ldr	r1, [pc, #40]	; (a694 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    a66c:	9b01      	ldr	r3, [sp, #4]
    a66e:	9a00      	ldr	r2, [sp, #0]
    a670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    a674:	4a06      	ldr	r2, [pc, #24]	; (a690 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    a676:	9b01      	ldr	r3, [sp, #4]
    a678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a67c:	1c5a      	adds	r2, r3, #1
    a67e:	4904      	ldr	r1, [pc, #16]	; (a690 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    a680:	9b01      	ldr	r3, [sp, #4]
    a682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a686:	bf00      	nop
    a688:	b003      	add	sp, #12
    a68a:	f85d fb04 	ldr.w	pc, [sp], #4
    a68e:	bf00      	nop
    a690:	1fff91d8 	.word	0x1fff91d8
    a694:	1fff91d4 	.word	0x1fff91d4

0000a698 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    a698:	b500      	push	{lr}
    a69a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a69c:	f7f6 fa96 	bl	bcc <Sys_GetCoreID>
    a6a0:	4603      	mov	r3, r0
    a6a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    a6a4:	4a0d      	ldr	r2, [pc, #52]	; (a6dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    a6a6:	9b01      	ldr	r3, [sp, #4]
    a6a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6ac:	1e5a      	subs	r2, r3, #1
    a6ae:	490b      	ldr	r1, [pc, #44]	; (a6dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    a6b0:	9b01      	ldr	r3, [sp, #4]
    a6b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    a6b6:	4a0a      	ldr	r2, [pc, #40]	; (a6e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    a6b8:	9b01      	ldr	r3, [sp, #4]
    a6ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6be:	f003 0301 	and.w	r3, r3, #1
    a6c2:	2b00      	cmp	r3, #0
    a6c4:	d106      	bne.n	a6d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    a6c6:	4a05      	ldr	r2, [pc, #20]	; (a6dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    a6c8:	9b01      	ldr	r3, [sp, #4]
    a6ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6ce:	2b00      	cmp	r3, #0
    a6d0:	d100      	bne.n	a6d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a6d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a6d4:	bf00      	nop
    a6d6:	b003      	add	sp, #12
    a6d8:	f85d fb04 	ldr.w	pc, [sp], #4
    a6dc:	1fff91d8 	.word	0x1fff91d8
    a6e0:	1fff91d4 	.word	0x1fff91d4

0000a6e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    a6e4:	b500      	push	{lr}
    a6e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a6e8:	f7f6 fa70 	bl	bcc <Sys_GetCoreID>
    a6ec:	4603      	mov	r3, r0
    a6ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    a6f0:	4a10      	ldr	r2, [pc, #64]	; (a734 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    a6f2:	9b01      	ldr	r3, [sp, #4]
    a6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6f8:	2b00      	cmp	r3, #0
    a6fa:	d10d      	bne.n	a718 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a6fc:	f7f6 f997 	bl	a2e <Port_schm_read_msr>
    a700:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a702:	9b00      	ldr	r3, [sp, #0]
    a704:	f003 0301 	and.w	r3, r3, #1
    a708:	2b00      	cmp	r3, #0
    a70a:	d100      	bne.n	a70e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a70c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    a70e:	490a      	ldr	r1, [pc, #40]	; (a738 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    a710:	9b01      	ldr	r3, [sp, #4]
    a712:	9a00      	ldr	r2, [sp, #0]
    a714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    a718:	4a06      	ldr	r2, [pc, #24]	; (a734 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    a71a:	9b01      	ldr	r3, [sp, #4]
    a71c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a720:	1c5a      	adds	r2, r3, #1
    a722:	4904      	ldr	r1, [pc, #16]	; (a734 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    a724:	9b01      	ldr	r3, [sp, #4]
    a726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a72a:	bf00      	nop
    a72c:	b003      	add	sp, #12
    a72e:	f85d fb04 	ldr.w	pc, [sp], #4
    a732:	bf00      	nop
    a734:	1fff91e0 	.word	0x1fff91e0
    a738:	1fff91dc 	.word	0x1fff91dc

0000a73c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    a73c:	b500      	push	{lr}
    a73e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a740:	f7f6 fa44 	bl	bcc <Sys_GetCoreID>
    a744:	4603      	mov	r3, r0
    a746:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    a748:	4a0d      	ldr	r2, [pc, #52]	; (a780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    a74a:	9b01      	ldr	r3, [sp, #4]
    a74c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a750:	1e5a      	subs	r2, r3, #1
    a752:	490b      	ldr	r1, [pc, #44]	; (a780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    a754:	9b01      	ldr	r3, [sp, #4]
    a756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    a75a:	4a0a      	ldr	r2, [pc, #40]	; (a784 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    a75c:	9b01      	ldr	r3, [sp, #4]
    a75e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a762:	f003 0301 	and.w	r3, r3, #1
    a766:	2b00      	cmp	r3, #0
    a768:	d106      	bne.n	a778 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    a76a:	4a05      	ldr	r2, [pc, #20]	; (a780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    a76c:	9b01      	ldr	r3, [sp, #4]
    a76e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a772:	2b00      	cmp	r3, #0
    a774:	d100      	bne.n	a778 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a776:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a778:	bf00      	nop
    a77a:	b003      	add	sp, #12
    a77c:	f85d fb04 	ldr.w	pc, [sp], #4
    a780:	1fff91e0 	.word	0x1fff91e0
    a784:	1fff91dc 	.word	0x1fff91dc

0000a788 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    a788:	b500      	push	{lr}
    a78a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a78c:	f7f6 fa1e 	bl	bcc <Sys_GetCoreID>
    a790:	4603      	mov	r3, r0
    a792:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    a794:	4a10      	ldr	r2, [pc, #64]	; (a7d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    a796:	9b01      	ldr	r3, [sp, #4]
    a798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a79c:	2b00      	cmp	r3, #0
    a79e:	d10d      	bne.n	a7bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a7a0:	f7f6 f945 	bl	a2e <Port_schm_read_msr>
    a7a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a7a6:	9b00      	ldr	r3, [sp, #0]
    a7a8:	f003 0301 	and.w	r3, r3, #1
    a7ac:	2b00      	cmp	r3, #0
    a7ae:	d100      	bne.n	a7b2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a7b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    a7b2:	490a      	ldr	r1, [pc, #40]	; (a7dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    a7b4:	9b01      	ldr	r3, [sp, #4]
    a7b6:	9a00      	ldr	r2, [sp, #0]
    a7b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    a7bc:	4a06      	ldr	r2, [pc, #24]	; (a7d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    a7be:	9b01      	ldr	r3, [sp, #4]
    a7c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7c4:	1c5a      	adds	r2, r3, #1
    a7c6:	4904      	ldr	r1, [pc, #16]	; (a7d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    a7c8:	9b01      	ldr	r3, [sp, #4]
    a7ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a7ce:	bf00      	nop
    a7d0:	b003      	add	sp, #12
    a7d2:	f85d fb04 	ldr.w	pc, [sp], #4
    a7d6:	bf00      	nop
    a7d8:	1fff91e8 	.word	0x1fff91e8
    a7dc:	1fff91e4 	.word	0x1fff91e4

0000a7e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    a7e0:	b500      	push	{lr}
    a7e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a7e4:	f7f6 f9f2 	bl	bcc <Sys_GetCoreID>
    a7e8:	4603      	mov	r3, r0
    a7ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    a7ec:	4a0d      	ldr	r2, [pc, #52]	; (a824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    a7ee:	9b01      	ldr	r3, [sp, #4]
    a7f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7f4:	1e5a      	subs	r2, r3, #1
    a7f6:	490b      	ldr	r1, [pc, #44]	; (a824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    a7f8:	9b01      	ldr	r3, [sp, #4]
    a7fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    a7fe:	4a0a      	ldr	r2, [pc, #40]	; (a828 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    a800:	9b01      	ldr	r3, [sp, #4]
    a802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a806:	f003 0301 	and.w	r3, r3, #1
    a80a:	2b00      	cmp	r3, #0
    a80c:	d106      	bne.n	a81c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    a80e:	4a05      	ldr	r2, [pc, #20]	; (a824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    a810:	9b01      	ldr	r3, [sp, #4]
    a812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a816:	2b00      	cmp	r3, #0
    a818:	d100      	bne.n	a81c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a81a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a81c:	bf00      	nop
    a81e:	b003      	add	sp, #12
    a820:	f85d fb04 	ldr.w	pc, [sp], #4
    a824:	1fff91e8 	.word	0x1fff91e8
    a828:	1fff91e4 	.word	0x1fff91e4

0000a82c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    a82c:	b500      	push	{lr}
    a82e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a830:	f7f6 f9cc 	bl	bcc <Sys_GetCoreID>
    a834:	4603      	mov	r3, r0
    a836:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    a838:	4a10      	ldr	r2, [pc, #64]	; (a87c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    a83a:	9b01      	ldr	r3, [sp, #4]
    a83c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a840:	2b00      	cmp	r3, #0
    a842:	d10d      	bne.n	a860 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a844:	f7f6 f8f3 	bl	a2e <Port_schm_read_msr>
    a848:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a84a:	9b00      	ldr	r3, [sp, #0]
    a84c:	f003 0301 	and.w	r3, r3, #1
    a850:	2b00      	cmp	r3, #0
    a852:	d100      	bne.n	a856 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a854:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    a856:	490a      	ldr	r1, [pc, #40]	; (a880 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    a858:	9b01      	ldr	r3, [sp, #4]
    a85a:	9a00      	ldr	r2, [sp, #0]
    a85c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    a860:	4a06      	ldr	r2, [pc, #24]	; (a87c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    a862:	9b01      	ldr	r3, [sp, #4]
    a864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a868:	1c5a      	adds	r2, r3, #1
    a86a:	4904      	ldr	r1, [pc, #16]	; (a87c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    a86c:	9b01      	ldr	r3, [sp, #4]
    a86e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a872:	bf00      	nop
    a874:	b003      	add	sp, #12
    a876:	f85d fb04 	ldr.w	pc, [sp], #4
    a87a:	bf00      	nop
    a87c:	1fff91f0 	.word	0x1fff91f0
    a880:	1fff91ec 	.word	0x1fff91ec

0000a884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    a884:	b500      	push	{lr}
    a886:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a888:	f7f6 f9a0 	bl	bcc <Sys_GetCoreID>
    a88c:	4603      	mov	r3, r0
    a88e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    a890:	4a0d      	ldr	r2, [pc, #52]	; (a8c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    a892:	9b01      	ldr	r3, [sp, #4]
    a894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a898:	1e5a      	subs	r2, r3, #1
    a89a:	490b      	ldr	r1, [pc, #44]	; (a8c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    a89c:	9b01      	ldr	r3, [sp, #4]
    a89e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    a8a2:	4a0a      	ldr	r2, [pc, #40]	; (a8cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    a8a4:	9b01      	ldr	r3, [sp, #4]
    a8a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8aa:	f003 0301 	and.w	r3, r3, #1
    a8ae:	2b00      	cmp	r3, #0
    a8b0:	d106      	bne.n	a8c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    a8b2:	4a05      	ldr	r2, [pc, #20]	; (a8c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    a8b4:	9b01      	ldr	r3, [sp, #4]
    a8b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8ba:	2b00      	cmp	r3, #0
    a8bc:	d100      	bne.n	a8c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a8be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a8c0:	bf00      	nop
    a8c2:	b003      	add	sp, #12
    a8c4:	f85d fb04 	ldr.w	pc, [sp], #4
    a8c8:	1fff91f0 	.word	0x1fff91f0
    a8cc:	1fff91ec 	.word	0x1fff91ec

0000a8d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    a8d0:	b500      	push	{lr}
    a8d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a8d4:	f7f6 f97a 	bl	bcc <Sys_GetCoreID>
    a8d8:	4603      	mov	r3, r0
    a8da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    a8dc:	4a10      	ldr	r2, [pc, #64]	; (a920 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    a8de:	9b01      	ldr	r3, [sp, #4]
    a8e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8e4:	2b00      	cmp	r3, #0
    a8e6:	d10d      	bne.n	a904 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a8e8:	f7f6 f8a1 	bl	a2e <Port_schm_read_msr>
    a8ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a8ee:	9b00      	ldr	r3, [sp, #0]
    a8f0:	f003 0301 	and.w	r3, r3, #1
    a8f4:	2b00      	cmp	r3, #0
    a8f6:	d100      	bne.n	a8fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a8f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    a8fa:	490a      	ldr	r1, [pc, #40]	; (a924 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    a8fc:	9b01      	ldr	r3, [sp, #4]
    a8fe:	9a00      	ldr	r2, [sp, #0]
    a900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    a904:	4a06      	ldr	r2, [pc, #24]	; (a920 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    a906:	9b01      	ldr	r3, [sp, #4]
    a908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a90c:	1c5a      	adds	r2, r3, #1
    a90e:	4904      	ldr	r1, [pc, #16]	; (a920 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    a910:	9b01      	ldr	r3, [sp, #4]
    a912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a916:	bf00      	nop
    a918:	b003      	add	sp, #12
    a91a:	f85d fb04 	ldr.w	pc, [sp], #4
    a91e:	bf00      	nop
    a920:	1fff91f8 	.word	0x1fff91f8
    a924:	1fff91f4 	.word	0x1fff91f4

0000a928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    a928:	b500      	push	{lr}
    a92a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a92c:	f7f6 f94e 	bl	bcc <Sys_GetCoreID>
    a930:	4603      	mov	r3, r0
    a932:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    a934:	4a0d      	ldr	r2, [pc, #52]	; (a96c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    a936:	9b01      	ldr	r3, [sp, #4]
    a938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a93c:	1e5a      	subs	r2, r3, #1
    a93e:	490b      	ldr	r1, [pc, #44]	; (a96c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    a940:	9b01      	ldr	r3, [sp, #4]
    a942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    a946:	4a0a      	ldr	r2, [pc, #40]	; (a970 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    a948:	9b01      	ldr	r3, [sp, #4]
    a94a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a94e:	f003 0301 	and.w	r3, r3, #1
    a952:	2b00      	cmp	r3, #0
    a954:	d106      	bne.n	a964 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    a956:	4a05      	ldr	r2, [pc, #20]	; (a96c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    a958:	9b01      	ldr	r3, [sp, #4]
    a95a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a95e:	2b00      	cmp	r3, #0
    a960:	d100      	bne.n	a964 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a962:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a964:	bf00      	nop
    a966:	b003      	add	sp, #12
    a968:	f85d fb04 	ldr.w	pc, [sp], #4
    a96c:	1fff91f8 	.word	0x1fff91f8
    a970:	1fff91f4 	.word	0x1fff91f4

0000a974 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    a974:	b500      	push	{lr}
    a976:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a978:	f7f6 f928 	bl	bcc <Sys_GetCoreID>
    a97c:	4603      	mov	r3, r0
    a97e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    a980:	4a10      	ldr	r2, [pc, #64]	; (a9c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    a982:	9b01      	ldr	r3, [sp, #4]
    a984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a988:	2b00      	cmp	r3, #0
    a98a:	d10d      	bne.n	a9a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a98c:	f7f6 f84f 	bl	a2e <Port_schm_read_msr>
    a990:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a992:	9b00      	ldr	r3, [sp, #0]
    a994:	f003 0301 	and.w	r3, r3, #1
    a998:	2b00      	cmp	r3, #0
    a99a:	d100      	bne.n	a99e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a99c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    a99e:	490a      	ldr	r1, [pc, #40]	; (a9c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    a9a0:	9b01      	ldr	r3, [sp, #4]
    a9a2:	9a00      	ldr	r2, [sp, #0]
    a9a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    a9a8:	4a06      	ldr	r2, [pc, #24]	; (a9c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    a9aa:	9b01      	ldr	r3, [sp, #4]
    a9ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9b0:	1c5a      	adds	r2, r3, #1
    a9b2:	4904      	ldr	r1, [pc, #16]	; (a9c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    a9b4:	9b01      	ldr	r3, [sp, #4]
    a9b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a9ba:	bf00      	nop
    a9bc:	b003      	add	sp, #12
    a9be:	f85d fb04 	ldr.w	pc, [sp], #4
    a9c2:	bf00      	nop
    a9c4:	1fff9200 	.word	0x1fff9200
    a9c8:	1fff91fc 	.word	0x1fff91fc

0000a9cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    a9cc:	b500      	push	{lr}
    a9ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a9d0:	f7f6 f8fc 	bl	bcc <Sys_GetCoreID>
    a9d4:	4603      	mov	r3, r0
    a9d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    a9d8:	4a0d      	ldr	r2, [pc, #52]	; (aa10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    a9da:	9b01      	ldr	r3, [sp, #4]
    a9dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9e0:	1e5a      	subs	r2, r3, #1
    a9e2:	490b      	ldr	r1, [pc, #44]	; (aa10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    a9e4:	9b01      	ldr	r3, [sp, #4]
    a9e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    a9ea:	4a0a      	ldr	r2, [pc, #40]	; (aa14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    a9ec:	9b01      	ldr	r3, [sp, #4]
    a9ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9f2:	f003 0301 	and.w	r3, r3, #1
    a9f6:	2b00      	cmp	r3, #0
    a9f8:	d106      	bne.n	aa08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    a9fa:	4a05      	ldr	r2, [pc, #20]	; (aa10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    a9fc:	9b01      	ldr	r3, [sp, #4]
    a9fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa02:	2b00      	cmp	r3, #0
    aa04:	d100      	bne.n	aa08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aa06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aa08:	bf00      	nop
    aa0a:	b003      	add	sp, #12
    aa0c:	f85d fb04 	ldr.w	pc, [sp], #4
    aa10:	1fff9200 	.word	0x1fff9200
    aa14:	1fff91fc 	.word	0x1fff91fc

0000aa18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    aa18:	b500      	push	{lr}
    aa1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aa1c:	f7f6 f8d6 	bl	bcc <Sys_GetCoreID>
    aa20:	4603      	mov	r3, r0
    aa22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    aa24:	4a10      	ldr	r2, [pc, #64]	; (aa68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    aa26:	9b01      	ldr	r3, [sp, #4]
    aa28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa2c:	2b00      	cmp	r3, #0
    aa2e:	d10d      	bne.n	aa4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aa30:	f7f5 fffd 	bl	a2e <Port_schm_read_msr>
    aa34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aa36:	9b00      	ldr	r3, [sp, #0]
    aa38:	f003 0301 	and.w	r3, r3, #1
    aa3c:	2b00      	cmp	r3, #0
    aa3e:	d100      	bne.n	aa42 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aa40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    aa42:	490a      	ldr	r1, [pc, #40]	; (aa6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    aa44:	9b01      	ldr	r3, [sp, #4]
    aa46:	9a00      	ldr	r2, [sp, #0]
    aa48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    aa4c:	4a06      	ldr	r2, [pc, #24]	; (aa68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    aa4e:	9b01      	ldr	r3, [sp, #4]
    aa50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa54:	1c5a      	adds	r2, r3, #1
    aa56:	4904      	ldr	r1, [pc, #16]	; (aa68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    aa58:	9b01      	ldr	r3, [sp, #4]
    aa5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aa5e:	bf00      	nop
    aa60:	b003      	add	sp, #12
    aa62:	f85d fb04 	ldr.w	pc, [sp], #4
    aa66:	bf00      	nop
    aa68:	1fff9208 	.word	0x1fff9208
    aa6c:	1fff9204 	.word	0x1fff9204

0000aa70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    aa70:	b500      	push	{lr}
    aa72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aa74:	f7f6 f8aa 	bl	bcc <Sys_GetCoreID>
    aa78:	4603      	mov	r3, r0
    aa7a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    aa7c:	4a0d      	ldr	r2, [pc, #52]	; (aab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    aa7e:	9b01      	ldr	r3, [sp, #4]
    aa80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa84:	1e5a      	subs	r2, r3, #1
    aa86:	490b      	ldr	r1, [pc, #44]	; (aab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    aa88:	9b01      	ldr	r3, [sp, #4]
    aa8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    aa8e:	4a0a      	ldr	r2, [pc, #40]	; (aab8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    aa90:	9b01      	ldr	r3, [sp, #4]
    aa92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa96:	f003 0301 	and.w	r3, r3, #1
    aa9a:	2b00      	cmp	r3, #0
    aa9c:	d106      	bne.n	aaac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    aa9e:	4a05      	ldr	r2, [pc, #20]	; (aab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    aaa0:	9b01      	ldr	r3, [sp, #4]
    aaa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaa6:	2b00      	cmp	r3, #0
    aaa8:	d100      	bne.n	aaac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aaaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aaac:	bf00      	nop
    aaae:	b003      	add	sp, #12
    aab0:	f85d fb04 	ldr.w	pc, [sp], #4
    aab4:	1fff9208 	.word	0x1fff9208
    aab8:	1fff9204 	.word	0x1fff9204

0000aabc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    aabc:	b500      	push	{lr}
    aabe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aac0:	f7f6 f884 	bl	bcc <Sys_GetCoreID>
    aac4:	4603      	mov	r3, r0
    aac6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    aac8:	4a10      	ldr	r2, [pc, #64]	; (ab0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    aaca:	9b01      	ldr	r3, [sp, #4]
    aacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aad0:	2b00      	cmp	r3, #0
    aad2:	d10d      	bne.n	aaf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aad4:	f7f5 ffab 	bl	a2e <Port_schm_read_msr>
    aad8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aada:	9b00      	ldr	r3, [sp, #0]
    aadc:	f003 0301 	and.w	r3, r3, #1
    aae0:	2b00      	cmp	r3, #0
    aae2:	d100      	bne.n	aae6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aae4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    aae6:	490a      	ldr	r1, [pc, #40]	; (ab10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    aae8:	9b01      	ldr	r3, [sp, #4]
    aaea:	9a00      	ldr	r2, [sp, #0]
    aaec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    aaf0:	4a06      	ldr	r2, [pc, #24]	; (ab0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    aaf2:	9b01      	ldr	r3, [sp, #4]
    aaf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaf8:	1c5a      	adds	r2, r3, #1
    aafa:	4904      	ldr	r1, [pc, #16]	; (ab0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    aafc:	9b01      	ldr	r3, [sp, #4]
    aafe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ab02:	bf00      	nop
    ab04:	b003      	add	sp, #12
    ab06:	f85d fb04 	ldr.w	pc, [sp], #4
    ab0a:	bf00      	nop
    ab0c:	1fff9210 	.word	0x1fff9210
    ab10:	1fff920c 	.word	0x1fff920c

0000ab14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    ab14:	b500      	push	{lr}
    ab16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ab18:	f7f6 f858 	bl	bcc <Sys_GetCoreID>
    ab1c:	4603      	mov	r3, r0
    ab1e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    ab20:	4a0d      	ldr	r2, [pc, #52]	; (ab58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    ab22:	9b01      	ldr	r3, [sp, #4]
    ab24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab28:	1e5a      	subs	r2, r3, #1
    ab2a:	490b      	ldr	r1, [pc, #44]	; (ab58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    ab2c:	9b01      	ldr	r3, [sp, #4]
    ab2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    ab32:	4a0a      	ldr	r2, [pc, #40]	; (ab5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    ab34:	9b01      	ldr	r3, [sp, #4]
    ab36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab3a:	f003 0301 	and.w	r3, r3, #1
    ab3e:	2b00      	cmp	r3, #0
    ab40:	d106      	bne.n	ab50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    ab42:	4a05      	ldr	r2, [pc, #20]	; (ab58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    ab44:	9b01      	ldr	r3, [sp, #4]
    ab46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab4a:	2b00      	cmp	r3, #0
    ab4c:	d100      	bne.n	ab50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ab4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ab50:	bf00      	nop
    ab52:	b003      	add	sp, #12
    ab54:	f85d fb04 	ldr.w	pc, [sp], #4
    ab58:	1fff9210 	.word	0x1fff9210
    ab5c:	1fff920c 	.word	0x1fff920c

0000ab60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    ab60:	b500      	push	{lr}
    ab62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ab64:	f7f6 f832 	bl	bcc <Sys_GetCoreID>
    ab68:	4603      	mov	r3, r0
    ab6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    ab6c:	4a10      	ldr	r2, [pc, #64]	; (abb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    ab6e:	9b01      	ldr	r3, [sp, #4]
    ab70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab74:	2b00      	cmp	r3, #0
    ab76:	d10d      	bne.n	ab94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ab78:	f7f5 ff59 	bl	a2e <Port_schm_read_msr>
    ab7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ab7e:	9b00      	ldr	r3, [sp, #0]
    ab80:	f003 0301 	and.w	r3, r3, #1
    ab84:	2b00      	cmp	r3, #0
    ab86:	d100      	bne.n	ab8a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ab88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    ab8a:	490a      	ldr	r1, [pc, #40]	; (abb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    ab8c:	9b01      	ldr	r3, [sp, #4]
    ab8e:	9a00      	ldr	r2, [sp, #0]
    ab90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    ab94:	4a06      	ldr	r2, [pc, #24]	; (abb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    ab96:	9b01      	ldr	r3, [sp, #4]
    ab98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab9c:	1c5a      	adds	r2, r3, #1
    ab9e:	4904      	ldr	r1, [pc, #16]	; (abb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    aba0:	9b01      	ldr	r3, [sp, #4]
    aba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aba6:	bf00      	nop
    aba8:	b003      	add	sp, #12
    abaa:	f85d fb04 	ldr.w	pc, [sp], #4
    abae:	bf00      	nop
    abb0:	1fff9218 	.word	0x1fff9218
    abb4:	1fff9214 	.word	0x1fff9214

0000abb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    abb8:	b500      	push	{lr}
    abba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    abbc:	f7f6 f806 	bl	bcc <Sys_GetCoreID>
    abc0:	4603      	mov	r3, r0
    abc2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    abc4:	4a0d      	ldr	r2, [pc, #52]	; (abfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    abc6:	9b01      	ldr	r3, [sp, #4]
    abc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abcc:	1e5a      	subs	r2, r3, #1
    abce:	490b      	ldr	r1, [pc, #44]	; (abfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    abd0:	9b01      	ldr	r3, [sp, #4]
    abd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    abd6:	4a0a      	ldr	r2, [pc, #40]	; (ac00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    abd8:	9b01      	ldr	r3, [sp, #4]
    abda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abde:	f003 0301 	and.w	r3, r3, #1
    abe2:	2b00      	cmp	r3, #0
    abe4:	d106      	bne.n	abf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    abe6:	4a05      	ldr	r2, [pc, #20]	; (abfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    abe8:	9b01      	ldr	r3, [sp, #4]
    abea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abee:	2b00      	cmp	r3, #0
    abf0:	d100      	bne.n	abf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    abf2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    abf4:	bf00      	nop
    abf6:	b003      	add	sp, #12
    abf8:	f85d fb04 	ldr.w	pc, [sp], #4
    abfc:	1fff9218 	.word	0x1fff9218
    ac00:	1fff9214 	.word	0x1fff9214

0000ac04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    ac04:	b500      	push	{lr}
    ac06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ac08:	f7f5 ffe0 	bl	bcc <Sys_GetCoreID>
    ac0c:	4603      	mov	r3, r0
    ac0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    ac10:	4a10      	ldr	r2, [pc, #64]	; (ac54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    ac12:	9b01      	ldr	r3, [sp, #4]
    ac14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac18:	2b00      	cmp	r3, #0
    ac1a:	d10d      	bne.n	ac38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ac1c:	f7f5 ff07 	bl	a2e <Port_schm_read_msr>
    ac20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ac22:	9b00      	ldr	r3, [sp, #0]
    ac24:	f003 0301 	and.w	r3, r3, #1
    ac28:	2b00      	cmp	r3, #0
    ac2a:	d100      	bne.n	ac2e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ac2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    ac2e:	490a      	ldr	r1, [pc, #40]	; (ac58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    ac30:	9b01      	ldr	r3, [sp, #4]
    ac32:	9a00      	ldr	r2, [sp, #0]
    ac34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    ac38:	4a06      	ldr	r2, [pc, #24]	; (ac54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    ac3a:	9b01      	ldr	r3, [sp, #4]
    ac3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac40:	1c5a      	adds	r2, r3, #1
    ac42:	4904      	ldr	r1, [pc, #16]	; (ac54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    ac44:	9b01      	ldr	r3, [sp, #4]
    ac46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ac4a:	bf00      	nop
    ac4c:	b003      	add	sp, #12
    ac4e:	f85d fb04 	ldr.w	pc, [sp], #4
    ac52:	bf00      	nop
    ac54:	1fff9220 	.word	0x1fff9220
    ac58:	1fff921c 	.word	0x1fff921c

0000ac5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    ac5c:	b500      	push	{lr}
    ac5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ac60:	f7f5 ffb4 	bl	bcc <Sys_GetCoreID>
    ac64:	4603      	mov	r3, r0
    ac66:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    ac68:	4a0d      	ldr	r2, [pc, #52]	; (aca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    ac6a:	9b01      	ldr	r3, [sp, #4]
    ac6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac70:	1e5a      	subs	r2, r3, #1
    ac72:	490b      	ldr	r1, [pc, #44]	; (aca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    ac74:	9b01      	ldr	r3, [sp, #4]
    ac76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    ac7a:	4a0a      	ldr	r2, [pc, #40]	; (aca4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    ac7c:	9b01      	ldr	r3, [sp, #4]
    ac7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac82:	f003 0301 	and.w	r3, r3, #1
    ac86:	2b00      	cmp	r3, #0
    ac88:	d106      	bne.n	ac98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    ac8a:	4a05      	ldr	r2, [pc, #20]	; (aca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    ac8c:	9b01      	ldr	r3, [sp, #4]
    ac8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac92:	2b00      	cmp	r3, #0
    ac94:	d100      	bne.n	ac98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ac96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ac98:	bf00      	nop
    ac9a:	b003      	add	sp, #12
    ac9c:	f85d fb04 	ldr.w	pc, [sp], #4
    aca0:	1fff9220 	.word	0x1fff9220
    aca4:	1fff921c 	.word	0x1fff921c

0000aca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    aca8:	b500      	push	{lr}
    acaa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    acac:	f7f5 ff8e 	bl	bcc <Sys_GetCoreID>
    acb0:	4603      	mov	r3, r0
    acb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    acb4:	4a10      	ldr	r2, [pc, #64]	; (acf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    acb6:	9b01      	ldr	r3, [sp, #4]
    acb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acbc:	2b00      	cmp	r3, #0
    acbe:	d10d      	bne.n	acdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    acc0:	f7f5 feb5 	bl	a2e <Port_schm_read_msr>
    acc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    acc6:	9b00      	ldr	r3, [sp, #0]
    acc8:	f003 0301 	and.w	r3, r3, #1
    accc:	2b00      	cmp	r3, #0
    acce:	d100      	bne.n	acd2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    acd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    acd2:	490a      	ldr	r1, [pc, #40]	; (acfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    acd4:	9b01      	ldr	r3, [sp, #4]
    acd6:	9a00      	ldr	r2, [sp, #0]
    acd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    acdc:	4a06      	ldr	r2, [pc, #24]	; (acf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    acde:	9b01      	ldr	r3, [sp, #4]
    ace0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ace4:	1c5a      	adds	r2, r3, #1
    ace6:	4904      	ldr	r1, [pc, #16]	; (acf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    ace8:	9b01      	ldr	r3, [sp, #4]
    acea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    acee:	bf00      	nop
    acf0:	b003      	add	sp, #12
    acf2:	f85d fb04 	ldr.w	pc, [sp], #4
    acf6:	bf00      	nop
    acf8:	1fff9228 	.word	0x1fff9228
    acfc:	1fff9224 	.word	0x1fff9224

0000ad00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    ad00:	b500      	push	{lr}
    ad02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad04:	f7f5 ff62 	bl	bcc <Sys_GetCoreID>
    ad08:	4603      	mov	r3, r0
    ad0a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    ad0c:	4a0d      	ldr	r2, [pc, #52]	; (ad44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    ad0e:	9b01      	ldr	r3, [sp, #4]
    ad10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad14:	1e5a      	subs	r2, r3, #1
    ad16:	490b      	ldr	r1, [pc, #44]	; (ad44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    ad18:	9b01      	ldr	r3, [sp, #4]
    ad1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    ad1e:	4a0a      	ldr	r2, [pc, #40]	; (ad48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    ad20:	9b01      	ldr	r3, [sp, #4]
    ad22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad26:	f003 0301 	and.w	r3, r3, #1
    ad2a:	2b00      	cmp	r3, #0
    ad2c:	d106      	bne.n	ad3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    ad2e:	4a05      	ldr	r2, [pc, #20]	; (ad44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    ad30:	9b01      	ldr	r3, [sp, #4]
    ad32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad36:	2b00      	cmp	r3, #0
    ad38:	d100      	bne.n	ad3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ad3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ad3c:	bf00      	nop
    ad3e:	b003      	add	sp, #12
    ad40:	f85d fb04 	ldr.w	pc, [sp], #4
    ad44:	1fff9228 	.word	0x1fff9228
    ad48:	1fff9224 	.word	0x1fff9224

0000ad4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    ad4c:	b500      	push	{lr}
    ad4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad50:	f7f5 ff3c 	bl	bcc <Sys_GetCoreID>
    ad54:	4603      	mov	r3, r0
    ad56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    ad58:	4a10      	ldr	r2, [pc, #64]	; (ad9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    ad5a:	9b01      	ldr	r3, [sp, #4]
    ad5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad60:	2b00      	cmp	r3, #0
    ad62:	d10d      	bne.n	ad80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ad64:	f7f5 fe63 	bl	a2e <Port_schm_read_msr>
    ad68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ad6a:	9b00      	ldr	r3, [sp, #0]
    ad6c:	f003 0301 	and.w	r3, r3, #1
    ad70:	2b00      	cmp	r3, #0
    ad72:	d100      	bne.n	ad76 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ad74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    ad76:	490a      	ldr	r1, [pc, #40]	; (ada0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    ad78:	9b01      	ldr	r3, [sp, #4]
    ad7a:	9a00      	ldr	r2, [sp, #0]
    ad7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    ad80:	4a06      	ldr	r2, [pc, #24]	; (ad9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    ad82:	9b01      	ldr	r3, [sp, #4]
    ad84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad88:	1c5a      	adds	r2, r3, #1
    ad8a:	4904      	ldr	r1, [pc, #16]	; (ad9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    ad8c:	9b01      	ldr	r3, [sp, #4]
    ad8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ad92:	bf00      	nop
    ad94:	b003      	add	sp, #12
    ad96:	f85d fb04 	ldr.w	pc, [sp], #4
    ad9a:	bf00      	nop
    ad9c:	1fff9230 	.word	0x1fff9230
    ada0:	1fff922c 	.word	0x1fff922c

0000ada4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    ada4:	b500      	push	{lr}
    ada6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ada8:	f7f5 ff10 	bl	bcc <Sys_GetCoreID>
    adac:	4603      	mov	r3, r0
    adae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    adb0:	4a0d      	ldr	r2, [pc, #52]	; (ade8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    adb2:	9b01      	ldr	r3, [sp, #4]
    adb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adb8:	1e5a      	subs	r2, r3, #1
    adba:	490b      	ldr	r1, [pc, #44]	; (ade8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    adbc:	9b01      	ldr	r3, [sp, #4]
    adbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    adc2:	4a0a      	ldr	r2, [pc, #40]	; (adec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    adc4:	9b01      	ldr	r3, [sp, #4]
    adc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adca:	f003 0301 	and.w	r3, r3, #1
    adce:	2b00      	cmp	r3, #0
    add0:	d106      	bne.n	ade0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    add2:	4a05      	ldr	r2, [pc, #20]	; (ade8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    add4:	9b01      	ldr	r3, [sp, #4]
    add6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adda:	2b00      	cmp	r3, #0
    addc:	d100      	bne.n	ade0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    adde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ade0:	bf00      	nop
    ade2:	b003      	add	sp, #12
    ade4:	f85d fb04 	ldr.w	pc, [sp], #4
    ade8:	1fff9230 	.word	0x1fff9230
    adec:	1fff922c 	.word	0x1fff922c

0000adf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    adf0:	b500      	push	{lr}
    adf2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    adf4:	f7f5 feea 	bl	bcc <Sys_GetCoreID>
    adf8:	4603      	mov	r3, r0
    adfa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    adfc:	4a10      	ldr	r2, [pc, #64]	; (ae40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    adfe:	9b01      	ldr	r3, [sp, #4]
    ae00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae04:	2b00      	cmp	r3, #0
    ae06:	d10d      	bne.n	ae24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ae08:	f7f5 fe11 	bl	a2e <Port_schm_read_msr>
    ae0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ae0e:	9b00      	ldr	r3, [sp, #0]
    ae10:	f003 0301 	and.w	r3, r3, #1
    ae14:	2b00      	cmp	r3, #0
    ae16:	d100      	bne.n	ae1a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ae18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    ae1a:	490a      	ldr	r1, [pc, #40]	; (ae44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    ae1c:	9b01      	ldr	r3, [sp, #4]
    ae1e:	9a00      	ldr	r2, [sp, #0]
    ae20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    ae24:	4a06      	ldr	r2, [pc, #24]	; (ae40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    ae26:	9b01      	ldr	r3, [sp, #4]
    ae28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae2c:	1c5a      	adds	r2, r3, #1
    ae2e:	4904      	ldr	r1, [pc, #16]	; (ae40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    ae30:	9b01      	ldr	r3, [sp, #4]
    ae32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ae36:	bf00      	nop
    ae38:	b003      	add	sp, #12
    ae3a:	f85d fb04 	ldr.w	pc, [sp], #4
    ae3e:	bf00      	nop
    ae40:	1fff9238 	.word	0x1fff9238
    ae44:	1fff9234 	.word	0x1fff9234

0000ae48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    ae48:	b500      	push	{lr}
    ae4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae4c:	f7f5 febe 	bl	bcc <Sys_GetCoreID>
    ae50:	4603      	mov	r3, r0
    ae52:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    ae54:	4a0d      	ldr	r2, [pc, #52]	; (ae8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    ae56:	9b01      	ldr	r3, [sp, #4]
    ae58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae5c:	1e5a      	subs	r2, r3, #1
    ae5e:	490b      	ldr	r1, [pc, #44]	; (ae8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    ae60:	9b01      	ldr	r3, [sp, #4]
    ae62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    ae66:	4a0a      	ldr	r2, [pc, #40]	; (ae90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    ae68:	9b01      	ldr	r3, [sp, #4]
    ae6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae6e:	f003 0301 	and.w	r3, r3, #1
    ae72:	2b00      	cmp	r3, #0
    ae74:	d106      	bne.n	ae84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    ae76:	4a05      	ldr	r2, [pc, #20]	; (ae8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    ae78:	9b01      	ldr	r3, [sp, #4]
    ae7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae7e:	2b00      	cmp	r3, #0
    ae80:	d100      	bne.n	ae84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ae82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ae84:	bf00      	nop
    ae86:	b003      	add	sp, #12
    ae88:	f85d fb04 	ldr.w	pc, [sp], #4
    ae8c:	1fff9238 	.word	0x1fff9238
    ae90:	1fff9234 	.word	0x1fff9234

0000ae94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    ae94:	b500      	push	{lr}
    ae96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae98:	f7f5 fe98 	bl	bcc <Sys_GetCoreID>
    ae9c:	4603      	mov	r3, r0
    ae9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    aea0:	4a10      	ldr	r2, [pc, #64]	; (aee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    aea2:	9b01      	ldr	r3, [sp, #4]
    aea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aea8:	2b00      	cmp	r3, #0
    aeaa:	d10d      	bne.n	aec8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aeac:	f7f5 fdbf 	bl	a2e <Port_schm_read_msr>
    aeb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aeb2:	9b00      	ldr	r3, [sp, #0]
    aeb4:	f003 0301 	and.w	r3, r3, #1
    aeb8:	2b00      	cmp	r3, #0
    aeba:	d100      	bne.n	aebe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aebc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    aebe:	490a      	ldr	r1, [pc, #40]	; (aee8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    aec0:	9b01      	ldr	r3, [sp, #4]
    aec2:	9a00      	ldr	r2, [sp, #0]
    aec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    aec8:	4a06      	ldr	r2, [pc, #24]	; (aee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    aeca:	9b01      	ldr	r3, [sp, #4]
    aecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aed0:	1c5a      	adds	r2, r3, #1
    aed2:	4904      	ldr	r1, [pc, #16]	; (aee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    aed4:	9b01      	ldr	r3, [sp, #4]
    aed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aeda:	bf00      	nop
    aedc:	b003      	add	sp, #12
    aede:	f85d fb04 	ldr.w	pc, [sp], #4
    aee2:	bf00      	nop
    aee4:	1fff9240 	.word	0x1fff9240
    aee8:	1fff923c 	.word	0x1fff923c

0000aeec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    aeec:	b500      	push	{lr}
    aeee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aef0:	f7f5 fe6c 	bl	bcc <Sys_GetCoreID>
    aef4:	4603      	mov	r3, r0
    aef6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    aef8:	4a0d      	ldr	r2, [pc, #52]	; (af30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    aefa:	9b01      	ldr	r3, [sp, #4]
    aefc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af00:	1e5a      	subs	r2, r3, #1
    af02:	490b      	ldr	r1, [pc, #44]	; (af30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    af04:	9b01      	ldr	r3, [sp, #4]
    af06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    af0a:	4a0a      	ldr	r2, [pc, #40]	; (af34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    af0c:	9b01      	ldr	r3, [sp, #4]
    af0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af12:	f003 0301 	and.w	r3, r3, #1
    af16:	2b00      	cmp	r3, #0
    af18:	d106      	bne.n	af28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    af1a:	4a05      	ldr	r2, [pc, #20]	; (af30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    af1c:	9b01      	ldr	r3, [sp, #4]
    af1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af22:	2b00      	cmp	r3, #0
    af24:	d100      	bne.n	af28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    af26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    af28:	bf00      	nop
    af2a:	b003      	add	sp, #12
    af2c:	f85d fb04 	ldr.w	pc, [sp], #4
    af30:	1fff9240 	.word	0x1fff9240
    af34:	1fff923c 	.word	0x1fff923c

0000af38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    af38:	b500      	push	{lr}
    af3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af3c:	f7f5 fe46 	bl	bcc <Sys_GetCoreID>
    af40:	4603      	mov	r3, r0
    af42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    af44:	4a10      	ldr	r2, [pc, #64]	; (af88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    af46:	9b01      	ldr	r3, [sp, #4]
    af48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af4c:	2b00      	cmp	r3, #0
    af4e:	d10d      	bne.n	af6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    af50:	f7f5 fd6d 	bl	a2e <Port_schm_read_msr>
    af54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    af56:	9b00      	ldr	r3, [sp, #0]
    af58:	f003 0301 	and.w	r3, r3, #1
    af5c:	2b00      	cmp	r3, #0
    af5e:	d100      	bne.n	af62 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    af60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    af62:	490a      	ldr	r1, [pc, #40]	; (af8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    af64:	9b01      	ldr	r3, [sp, #4]
    af66:	9a00      	ldr	r2, [sp, #0]
    af68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    af6c:	4a06      	ldr	r2, [pc, #24]	; (af88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    af6e:	9b01      	ldr	r3, [sp, #4]
    af70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af74:	1c5a      	adds	r2, r3, #1
    af76:	4904      	ldr	r1, [pc, #16]	; (af88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    af78:	9b01      	ldr	r3, [sp, #4]
    af7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    af7e:	bf00      	nop
    af80:	b003      	add	sp, #12
    af82:	f85d fb04 	ldr.w	pc, [sp], #4
    af86:	bf00      	nop
    af88:	1fff9248 	.word	0x1fff9248
    af8c:	1fff9244 	.word	0x1fff9244

0000af90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    af90:	b500      	push	{lr}
    af92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af94:	f7f5 fe1a 	bl	bcc <Sys_GetCoreID>
    af98:	4603      	mov	r3, r0
    af9a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    af9c:	4a0d      	ldr	r2, [pc, #52]	; (afd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    af9e:	9b01      	ldr	r3, [sp, #4]
    afa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afa4:	1e5a      	subs	r2, r3, #1
    afa6:	490b      	ldr	r1, [pc, #44]	; (afd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    afa8:	9b01      	ldr	r3, [sp, #4]
    afaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    afae:	4a0a      	ldr	r2, [pc, #40]	; (afd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    afb0:	9b01      	ldr	r3, [sp, #4]
    afb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afb6:	f003 0301 	and.w	r3, r3, #1
    afba:	2b00      	cmp	r3, #0
    afbc:	d106      	bne.n	afcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    afbe:	4a05      	ldr	r2, [pc, #20]	; (afd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    afc0:	9b01      	ldr	r3, [sp, #4]
    afc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afc6:	2b00      	cmp	r3, #0
    afc8:	d100      	bne.n	afcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    afca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    afcc:	bf00      	nop
    afce:	b003      	add	sp, #12
    afd0:	f85d fb04 	ldr.w	pc, [sp], #4
    afd4:	1fff9248 	.word	0x1fff9248
    afd8:	1fff9244 	.word	0x1fff9244

0000afdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    afdc:	b500      	push	{lr}
    afde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    afe0:	f7f5 fdf4 	bl	bcc <Sys_GetCoreID>
    afe4:	4603      	mov	r3, r0
    afe6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    afe8:	4a10      	ldr	r2, [pc, #64]	; (b02c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    afea:	9b01      	ldr	r3, [sp, #4]
    afec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aff0:	2b00      	cmp	r3, #0
    aff2:	d10d      	bne.n	b010 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aff4:	f7f5 fd1b 	bl	a2e <Port_schm_read_msr>
    aff8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    affa:	9b00      	ldr	r3, [sp, #0]
    affc:	f003 0301 	and.w	r3, r3, #1
    b000:	2b00      	cmp	r3, #0
    b002:	d100      	bne.n	b006 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b004:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    b006:	490a      	ldr	r1, [pc, #40]	; (b030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    b008:	9b01      	ldr	r3, [sp, #4]
    b00a:	9a00      	ldr	r2, [sp, #0]
    b00c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    b010:	4a06      	ldr	r2, [pc, #24]	; (b02c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    b012:	9b01      	ldr	r3, [sp, #4]
    b014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b018:	1c5a      	adds	r2, r3, #1
    b01a:	4904      	ldr	r1, [pc, #16]	; (b02c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    b01c:	9b01      	ldr	r3, [sp, #4]
    b01e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b022:	bf00      	nop
    b024:	b003      	add	sp, #12
    b026:	f85d fb04 	ldr.w	pc, [sp], #4
    b02a:	bf00      	nop
    b02c:	1fff9250 	.word	0x1fff9250
    b030:	1fff924c 	.word	0x1fff924c

0000b034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    b034:	b500      	push	{lr}
    b036:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b038:	f7f5 fdc8 	bl	bcc <Sys_GetCoreID>
    b03c:	4603      	mov	r3, r0
    b03e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    b040:	4a0d      	ldr	r2, [pc, #52]	; (b078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    b042:	9b01      	ldr	r3, [sp, #4]
    b044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b048:	1e5a      	subs	r2, r3, #1
    b04a:	490b      	ldr	r1, [pc, #44]	; (b078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    b04c:	9b01      	ldr	r3, [sp, #4]
    b04e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    b052:	4a0a      	ldr	r2, [pc, #40]	; (b07c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    b054:	9b01      	ldr	r3, [sp, #4]
    b056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b05a:	f003 0301 	and.w	r3, r3, #1
    b05e:	2b00      	cmp	r3, #0
    b060:	d106      	bne.n	b070 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    b062:	4a05      	ldr	r2, [pc, #20]	; (b078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    b064:	9b01      	ldr	r3, [sp, #4]
    b066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b06a:	2b00      	cmp	r3, #0
    b06c:	d100      	bne.n	b070 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b06e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b070:	bf00      	nop
    b072:	b003      	add	sp, #12
    b074:	f85d fb04 	ldr.w	pc, [sp], #4
    b078:	1fff9250 	.word	0x1fff9250
    b07c:	1fff924c 	.word	0x1fff924c

0000b080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    b080:	b500      	push	{lr}
    b082:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b084:	f7f5 fda2 	bl	bcc <Sys_GetCoreID>
    b088:	4603      	mov	r3, r0
    b08a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    b08c:	4a10      	ldr	r2, [pc, #64]	; (b0d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    b08e:	9b01      	ldr	r3, [sp, #4]
    b090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b094:	2b00      	cmp	r3, #0
    b096:	d10d      	bne.n	b0b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b098:	f7f5 fcc9 	bl	a2e <Port_schm_read_msr>
    b09c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b09e:	9b00      	ldr	r3, [sp, #0]
    b0a0:	f003 0301 	and.w	r3, r3, #1
    b0a4:	2b00      	cmp	r3, #0
    b0a6:	d100      	bne.n	b0aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b0a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    b0aa:	490a      	ldr	r1, [pc, #40]	; (b0d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    b0ac:	9b01      	ldr	r3, [sp, #4]
    b0ae:	9a00      	ldr	r2, [sp, #0]
    b0b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    b0b4:	4a06      	ldr	r2, [pc, #24]	; (b0d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    b0b6:	9b01      	ldr	r3, [sp, #4]
    b0b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0bc:	1c5a      	adds	r2, r3, #1
    b0be:	4904      	ldr	r1, [pc, #16]	; (b0d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    b0c0:	9b01      	ldr	r3, [sp, #4]
    b0c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b0c6:	bf00      	nop
    b0c8:	b003      	add	sp, #12
    b0ca:	f85d fb04 	ldr.w	pc, [sp], #4
    b0ce:	bf00      	nop
    b0d0:	1fff9258 	.word	0x1fff9258
    b0d4:	1fff9254 	.word	0x1fff9254

0000b0d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    b0d8:	b500      	push	{lr}
    b0da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b0dc:	f7f5 fd76 	bl	bcc <Sys_GetCoreID>
    b0e0:	4603      	mov	r3, r0
    b0e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    b0e4:	4a0d      	ldr	r2, [pc, #52]	; (b11c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    b0e6:	9b01      	ldr	r3, [sp, #4]
    b0e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0ec:	1e5a      	subs	r2, r3, #1
    b0ee:	490b      	ldr	r1, [pc, #44]	; (b11c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    b0f0:	9b01      	ldr	r3, [sp, #4]
    b0f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    b0f6:	4a0a      	ldr	r2, [pc, #40]	; (b120 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    b0f8:	9b01      	ldr	r3, [sp, #4]
    b0fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0fe:	f003 0301 	and.w	r3, r3, #1
    b102:	2b00      	cmp	r3, #0
    b104:	d106      	bne.n	b114 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    b106:	4a05      	ldr	r2, [pc, #20]	; (b11c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    b108:	9b01      	ldr	r3, [sp, #4]
    b10a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b10e:	2b00      	cmp	r3, #0
    b110:	d100      	bne.n	b114 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b112:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b114:	bf00      	nop
    b116:	b003      	add	sp, #12
    b118:	f85d fb04 	ldr.w	pc, [sp], #4
    b11c:	1fff9258 	.word	0x1fff9258
    b120:	1fff9254 	.word	0x1fff9254

0000b124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    b124:	b500      	push	{lr}
    b126:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b128:	f7f5 fd50 	bl	bcc <Sys_GetCoreID>
    b12c:	4603      	mov	r3, r0
    b12e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    b130:	4a10      	ldr	r2, [pc, #64]	; (b174 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    b132:	9b01      	ldr	r3, [sp, #4]
    b134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b138:	2b00      	cmp	r3, #0
    b13a:	d10d      	bne.n	b158 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b13c:	f7f5 fc77 	bl	a2e <Port_schm_read_msr>
    b140:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b142:	9b00      	ldr	r3, [sp, #0]
    b144:	f003 0301 	and.w	r3, r3, #1
    b148:	2b00      	cmp	r3, #0
    b14a:	d100      	bne.n	b14e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b14c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    b14e:	490a      	ldr	r1, [pc, #40]	; (b178 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    b150:	9b01      	ldr	r3, [sp, #4]
    b152:	9a00      	ldr	r2, [sp, #0]
    b154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    b158:	4a06      	ldr	r2, [pc, #24]	; (b174 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    b15a:	9b01      	ldr	r3, [sp, #4]
    b15c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b160:	1c5a      	adds	r2, r3, #1
    b162:	4904      	ldr	r1, [pc, #16]	; (b174 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    b164:	9b01      	ldr	r3, [sp, #4]
    b166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b16a:	bf00      	nop
    b16c:	b003      	add	sp, #12
    b16e:	f85d fb04 	ldr.w	pc, [sp], #4
    b172:	bf00      	nop
    b174:	1fff9260 	.word	0x1fff9260
    b178:	1fff925c 	.word	0x1fff925c

0000b17c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    b17c:	b500      	push	{lr}
    b17e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b180:	f7f5 fd24 	bl	bcc <Sys_GetCoreID>
    b184:	4603      	mov	r3, r0
    b186:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    b188:	4a0d      	ldr	r2, [pc, #52]	; (b1c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    b18a:	9b01      	ldr	r3, [sp, #4]
    b18c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b190:	1e5a      	subs	r2, r3, #1
    b192:	490b      	ldr	r1, [pc, #44]	; (b1c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    b194:	9b01      	ldr	r3, [sp, #4]
    b196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    b19a:	4a0a      	ldr	r2, [pc, #40]	; (b1c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    b19c:	9b01      	ldr	r3, [sp, #4]
    b19e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1a2:	f003 0301 	and.w	r3, r3, #1
    b1a6:	2b00      	cmp	r3, #0
    b1a8:	d106      	bne.n	b1b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    b1aa:	4a05      	ldr	r2, [pc, #20]	; (b1c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    b1ac:	9b01      	ldr	r3, [sp, #4]
    b1ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1b2:	2b00      	cmp	r3, #0
    b1b4:	d100      	bne.n	b1b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b1b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b1b8:	bf00      	nop
    b1ba:	b003      	add	sp, #12
    b1bc:	f85d fb04 	ldr.w	pc, [sp], #4
    b1c0:	1fff9260 	.word	0x1fff9260
    b1c4:	1fff925c 	.word	0x1fff925c

0000b1c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    b1c8:	b500      	push	{lr}
    b1ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b1cc:	f7f5 fcfe 	bl	bcc <Sys_GetCoreID>
    b1d0:	4603      	mov	r3, r0
    b1d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    b1d4:	4a10      	ldr	r2, [pc, #64]	; (b218 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    b1d6:	9b01      	ldr	r3, [sp, #4]
    b1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1dc:	2b00      	cmp	r3, #0
    b1de:	d10d      	bne.n	b1fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b1e0:	f7f5 fc25 	bl	a2e <Port_schm_read_msr>
    b1e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b1e6:	9b00      	ldr	r3, [sp, #0]
    b1e8:	f003 0301 	and.w	r3, r3, #1
    b1ec:	2b00      	cmp	r3, #0
    b1ee:	d100      	bne.n	b1f2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b1f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    b1f2:	490a      	ldr	r1, [pc, #40]	; (b21c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    b1f4:	9b01      	ldr	r3, [sp, #4]
    b1f6:	9a00      	ldr	r2, [sp, #0]
    b1f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    b1fc:	4a06      	ldr	r2, [pc, #24]	; (b218 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    b1fe:	9b01      	ldr	r3, [sp, #4]
    b200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b204:	1c5a      	adds	r2, r3, #1
    b206:	4904      	ldr	r1, [pc, #16]	; (b218 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    b208:	9b01      	ldr	r3, [sp, #4]
    b20a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b20e:	bf00      	nop
    b210:	b003      	add	sp, #12
    b212:	f85d fb04 	ldr.w	pc, [sp], #4
    b216:	bf00      	nop
    b218:	1fff9268 	.word	0x1fff9268
    b21c:	1fff9264 	.word	0x1fff9264

0000b220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    b220:	b500      	push	{lr}
    b222:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b224:	f7f5 fcd2 	bl	bcc <Sys_GetCoreID>
    b228:	4603      	mov	r3, r0
    b22a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    b22c:	4a0d      	ldr	r2, [pc, #52]	; (b264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    b22e:	9b01      	ldr	r3, [sp, #4]
    b230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b234:	1e5a      	subs	r2, r3, #1
    b236:	490b      	ldr	r1, [pc, #44]	; (b264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    b238:	9b01      	ldr	r3, [sp, #4]
    b23a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    b23e:	4a0a      	ldr	r2, [pc, #40]	; (b268 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    b240:	9b01      	ldr	r3, [sp, #4]
    b242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b246:	f003 0301 	and.w	r3, r3, #1
    b24a:	2b00      	cmp	r3, #0
    b24c:	d106      	bne.n	b25c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    b24e:	4a05      	ldr	r2, [pc, #20]	; (b264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    b250:	9b01      	ldr	r3, [sp, #4]
    b252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b256:	2b00      	cmp	r3, #0
    b258:	d100      	bne.n	b25c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b25a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b25c:	bf00      	nop
    b25e:	b003      	add	sp, #12
    b260:	f85d fb04 	ldr.w	pc, [sp], #4
    b264:	1fff9268 	.word	0x1fff9268
    b268:	1fff9264 	.word	0x1fff9264

0000b26c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    b26c:	b500      	push	{lr}
    b26e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b270:	f7f5 fcac 	bl	bcc <Sys_GetCoreID>
    b274:	4603      	mov	r3, r0
    b276:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    b278:	4a10      	ldr	r2, [pc, #64]	; (b2bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    b27a:	9b01      	ldr	r3, [sp, #4]
    b27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b280:	2b00      	cmp	r3, #0
    b282:	d10d      	bne.n	b2a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b284:	f7f5 fbd3 	bl	a2e <Port_schm_read_msr>
    b288:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b28a:	9b00      	ldr	r3, [sp, #0]
    b28c:	f003 0301 	and.w	r3, r3, #1
    b290:	2b00      	cmp	r3, #0
    b292:	d100      	bne.n	b296 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b294:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    b296:	490a      	ldr	r1, [pc, #40]	; (b2c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    b298:	9b01      	ldr	r3, [sp, #4]
    b29a:	9a00      	ldr	r2, [sp, #0]
    b29c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    b2a0:	4a06      	ldr	r2, [pc, #24]	; (b2bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    b2a2:	9b01      	ldr	r3, [sp, #4]
    b2a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2a8:	1c5a      	adds	r2, r3, #1
    b2aa:	4904      	ldr	r1, [pc, #16]	; (b2bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    b2ac:	9b01      	ldr	r3, [sp, #4]
    b2ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b2b2:	bf00      	nop
    b2b4:	b003      	add	sp, #12
    b2b6:	f85d fb04 	ldr.w	pc, [sp], #4
    b2ba:	bf00      	nop
    b2bc:	1fff9270 	.word	0x1fff9270
    b2c0:	1fff926c 	.word	0x1fff926c

0000b2c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    b2c4:	b500      	push	{lr}
    b2c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b2c8:	f7f5 fc80 	bl	bcc <Sys_GetCoreID>
    b2cc:	4603      	mov	r3, r0
    b2ce:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    b2d0:	4a0d      	ldr	r2, [pc, #52]	; (b308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    b2d2:	9b01      	ldr	r3, [sp, #4]
    b2d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2d8:	1e5a      	subs	r2, r3, #1
    b2da:	490b      	ldr	r1, [pc, #44]	; (b308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    b2dc:	9b01      	ldr	r3, [sp, #4]
    b2de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    b2e2:	4a0a      	ldr	r2, [pc, #40]	; (b30c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    b2e4:	9b01      	ldr	r3, [sp, #4]
    b2e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2ea:	f003 0301 	and.w	r3, r3, #1
    b2ee:	2b00      	cmp	r3, #0
    b2f0:	d106      	bne.n	b300 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    b2f2:	4a05      	ldr	r2, [pc, #20]	; (b308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    b2f4:	9b01      	ldr	r3, [sp, #4]
    b2f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2fa:	2b00      	cmp	r3, #0
    b2fc:	d100      	bne.n	b300 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b2fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b300:	bf00      	nop
    b302:	b003      	add	sp, #12
    b304:	f85d fb04 	ldr.w	pc, [sp], #4
    b308:	1fff9270 	.word	0x1fff9270
    b30c:	1fff926c 	.word	0x1fff926c

0000b310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    b310:	b500      	push	{lr}
    b312:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b314:	f7f5 fc5a 	bl	bcc <Sys_GetCoreID>
    b318:	4603      	mov	r3, r0
    b31a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    b31c:	4a10      	ldr	r2, [pc, #64]	; (b360 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    b31e:	9b01      	ldr	r3, [sp, #4]
    b320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b324:	2b00      	cmp	r3, #0
    b326:	d10d      	bne.n	b344 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b328:	f7f5 fb81 	bl	a2e <Port_schm_read_msr>
    b32c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b32e:	9b00      	ldr	r3, [sp, #0]
    b330:	f003 0301 	and.w	r3, r3, #1
    b334:	2b00      	cmp	r3, #0
    b336:	d100      	bne.n	b33a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b338:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    b33a:	490a      	ldr	r1, [pc, #40]	; (b364 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    b33c:	9b01      	ldr	r3, [sp, #4]
    b33e:	9a00      	ldr	r2, [sp, #0]
    b340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    b344:	4a06      	ldr	r2, [pc, #24]	; (b360 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    b346:	9b01      	ldr	r3, [sp, #4]
    b348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b34c:	1c5a      	adds	r2, r3, #1
    b34e:	4904      	ldr	r1, [pc, #16]	; (b360 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    b350:	9b01      	ldr	r3, [sp, #4]
    b352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b356:	bf00      	nop
    b358:	b003      	add	sp, #12
    b35a:	f85d fb04 	ldr.w	pc, [sp], #4
    b35e:	bf00      	nop
    b360:	1fff9278 	.word	0x1fff9278
    b364:	1fff9274 	.word	0x1fff9274

0000b368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    b368:	b500      	push	{lr}
    b36a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b36c:	f7f5 fc2e 	bl	bcc <Sys_GetCoreID>
    b370:	4603      	mov	r3, r0
    b372:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    b374:	4a0d      	ldr	r2, [pc, #52]	; (b3ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    b376:	9b01      	ldr	r3, [sp, #4]
    b378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b37c:	1e5a      	subs	r2, r3, #1
    b37e:	490b      	ldr	r1, [pc, #44]	; (b3ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    b380:	9b01      	ldr	r3, [sp, #4]
    b382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    b386:	4a0a      	ldr	r2, [pc, #40]	; (b3b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    b388:	9b01      	ldr	r3, [sp, #4]
    b38a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b38e:	f003 0301 	and.w	r3, r3, #1
    b392:	2b00      	cmp	r3, #0
    b394:	d106      	bne.n	b3a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    b396:	4a05      	ldr	r2, [pc, #20]	; (b3ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    b398:	9b01      	ldr	r3, [sp, #4]
    b39a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b39e:	2b00      	cmp	r3, #0
    b3a0:	d100      	bne.n	b3a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b3a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b3a4:	bf00      	nop
    b3a6:	b003      	add	sp, #12
    b3a8:	f85d fb04 	ldr.w	pc, [sp], #4
    b3ac:	1fff9278 	.word	0x1fff9278
    b3b0:	1fff9274 	.word	0x1fff9274

0000b3b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    b3b4:	b500      	push	{lr}
    b3b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b3b8:	f7f5 fc08 	bl	bcc <Sys_GetCoreID>
    b3bc:	4603      	mov	r3, r0
    b3be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    b3c0:	4a10      	ldr	r2, [pc, #64]	; (b404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    b3c2:	9b01      	ldr	r3, [sp, #4]
    b3c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3c8:	2b00      	cmp	r3, #0
    b3ca:	d10d      	bne.n	b3e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b3cc:	f7f5 fb2f 	bl	a2e <Port_schm_read_msr>
    b3d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b3d2:	9b00      	ldr	r3, [sp, #0]
    b3d4:	f003 0301 	and.w	r3, r3, #1
    b3d8:	2b00      	cmp	r3, #0
    b3da:	d100      	bne.n	b3de <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b3dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    b3de:	490a      	ldr	r1, [pc, #40]	; (b408 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    b3e0:	9b01      	ldr	r3, [sp, #4]
    b3e2:	9a00      	ldr	r2, [sp, #0]
    b3e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    b3e8:	4a06      	ldr	r2, [pc, #24]	; (b404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    b3ea:	9b01      	ldr	r3, [sp, #4]
    b3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3f0:	1c5a      	adds	r2, r3, #1
    b3f2:	4904      	ldr	r1, [pc, #16]	; (b404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    b3f4:	9b01      	ldr	r3, [sp, #4]
    b3f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b3fa:	bf00      	nop
    b3fc:	b003      	add	sp, #12
    b3fe:	f85d fb04 	ldr.w	pc, [sp], #4
    b402:	bf00      	nop
    b404:	1fff9280 	.word	0x1fff9280
    b408:	1fff927c 	.word	0x1fff927c

0000b40c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    b40c:	b500      	push	{lr}
    b40e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b410:	f7f5 fbdc 	bl	bcc <Sys_GetCoreID>
    b414:	4603      	mov	r3, r0
    b416:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    b418:	4a0d      	ldr	r2, [pc, #52]	; (b450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    b41a:	9b01      	ldr	r3, [sp, #4]
    b41c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b420:	1e5a      	subs	r2, r3, #1
    b422:	490b      	ldr	r1, [pc, #44]	; (b450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    b424:	9b01      	ldr	r3, [sp, #4]
    b426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    b42a:	4a0a      	ldr	r2, [pc, #40]	; (b454 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    b42c:	9b01      	ldr	r3, [sp, #4]
    b42e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b432:	f003 0301 	and.w	r3, r3, #1
    b436:	2b00      	cmp	r3, #0
    b438:	d106      	bne.n	b448 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    b43a:	4a05      	ldr	r2, [pc, #20]	; (b450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    b43c:	9b01      	ldr	r3, [sp, #4]
    b43e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b442:	2b00      	cmp	r3, #0
    b444:	d100      	bne.n	b448 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b446:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b448:	bf00      	nop
    b44a:	b003      	add	sp, #12
    b44c:	f85d fb04 	ldr.w	pc, [sp], #4
    b450:	1fff9280 	.word	0x1fff9280
    b454:	1fff927c 	.word	0x1fff927c

0000b458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    b458:	b500      	push	{lr}
    b45a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b45c:	f7f5 fbb6 	bl	bcc <Sys_GetCoreID>
    b460:	4603      	mov	r3, r0
    b462:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    b464:	4a10      	ldr	r2, [pc, #64]	; (b4a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    b466:	9b01      	ldr	r3, [sp, #4]
    b468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b46c:	2b00      	cmp	r3, #0
    b46e:	d10d      	bne.n	b48c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b470:	f7f5 fadd 	bl	a2e <Port_schm_read_msr>
    b474:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b476:	9b00      	ldr	r3, [sp, #0]
    b478:	f003 0301 	and.w	r3, r3, #1
    b47c:	2b00      	cmp	r3, #0
    b47e:	d100      	bne.n	b482 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b480:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    b482:	490a      	ldr	r1, [pc, #40]	; (b4ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    b484:	9b01      	ldr	r3, [sp, #4]
    b486:	9a00      	ldr	r2, [sp, #0]
    b488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    b48c:	4a06      	ldr	r2, [pc, #24]	; (b4a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    b48e:	9b01      	ldr	r3, [sp, #4]
    b490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b494:	1c5a      	adds	r2, r3, #1
    b496:	4904      	ldr	r1, [pc, #16]	; (b4a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    b498:	9b01      	ldr	r3, [sp, #4]
    b49a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b49e:	bf00      	nop
    b4a0:	b003      	add	sp, #12
    b4a2:	f85d fb04 	ldr.w	pc, [sp], #4
    b4a6:	bf00      	nop
    b4a8:	1fff9288 	.word	0x1fff9288
    b4ac:	1fff9284 	.word	0x1fff9284

0000b4b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    b4b0:	b500      	push	{lr}
    b4b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4b4:	f7f5 fb8a 	bl	bcc <Sys_GetCoreID>
    b4b8:	4603      	mov	r3, r0
    b4ba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    b4bc:	4a0d      	ldr	r2, [pc, #52]	; (b4f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    b4be:	9b01      	ldr	r3, [sp, #4]
    b4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4c4:	1e5a      	subs	r2, r3, #1
    b4c6:	490b      	ldr	r1, [pc, #44]	; (b4f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    b4c8:	9b01      	ldr	r3, [sp, #4]
    b4ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    b4ce:	4a0a      	ldr	r2, [pc, #40]	; (b4f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    b4d0:	9b01      	ldr	r3, [sp, #4]
    b4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4d6:	f003 0301 	and.w	r3, r3, #1
    b4da:	2b00      	cmp	r3, #0
    b4dc:	d106      	bne.n	b4ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    b4de:	4a05      	ldr	r2, [pc, #20]	; (b4f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    b4e0:	9b01      	ldr	r3, [sp, #4]
    b4e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4e6:	2b00      	cmp	r3, #0
    b4e8:	d100      	bne.n	b4ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b4ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b4ec:	bf00      	nop
    b4ee:	b003      	add	sp, #12
    b4f0:	f85d fb04 	ldr.w	pc, [sp], #4
    b4f4:	1fff9288 	.word	0x1fff9288
    b4f8:	1fff9284 	.word	0x1fff9284

0000b4fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    b4fc:	b500      	push	{lr}
    b4fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b500:	f7f5 fb64 	bl	bcc <Sys_GetCoreID>
    b504:	4603      	mov	r3, r0
    b506:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    b508:	4a10      	ldr	r2, [pc, #64]	; (b54c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    b50a:	9b01      	ldr	r3, [sp, #4]
    b50c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b510:	2b00      	cmp	r3, #0
    b512:	d10d      	bne.n	b530 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b514:	f7f5 fa8b 	bl	a2e <Port_schm_read_msr>
    b518:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b51a:	9b00      	ldr	r3, [sp, #0]
    b51c:	f003 0301 	and.w	r3, r3, #1
    b520:	2b00      	cmp	r3, #0
    b522:	d100      	bne.n	b526 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b524:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    b526:	490a      	ldr	r1, [pc, #40]	; (b550 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    b528:	9b01      	ldr	r3, [sp, #4]
    b52a:	9a00      	ldr	r2, [sp, #0]
    b52c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    b530:	4a06      	ldr	r2, [pc, #24]	; (b54c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    b532:	9b01      	ldr	r3, [sp, #4]
    b534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b538:	1c5a      	adds	r2, r3, #1
    b53a:	4904      	ldr	r1, [pc, #16]	; (b54c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    b53c:	9b01      	ldr	r3, [sp, #4]
    b53e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b542:	bf00      	nop
    b544:	b003      	add	sp, #12
    b546:	f85d fb04 	ldr.w	pc, [sp], #4
    b54a:	bf00      	nop
    b54c:	1fff9290 	.word	0x1fff9290
    b550:	1fff928c 	.word	0x1fff928c

0000b554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    b554:	b500      	push	{lr}
    b556:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b558:	f7f5 fb38 	bl	bcc <Sys_GetCoreID>
    b55c:	4603      	mov	r3, r0
    b55e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    b560:	4a0d      	ldr	r2, [pc, #52]	; (b598 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    b562:	9b01      	ldr	r3, [sp, #4]
    b564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b568:	1e5a      	subs	r2, r3, #1
    b56a:	490b      	ldr	r1, [pc, #44]	; (b598 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    b56c:	9b01      	ldr	r3, [sp, #4]
    b56e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    b572:	4a0a      	ldr	r2, [pc, #40]	; (b59c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    b574:	9b01      	ldr	r3, [sp, #4]
    b576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b57a:	f003 0301 	and.w	r3, r3, #1
    b57e:	2b00      	cmp	r3, #0
    b580:	d106      	bne.n	b590 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    b582:	4a05      	ldr	r2, [pc, #20]	; (b598 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    b584:	9b01      	ldr	r3, [sp, #4]
    b586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b58a:	2b00      	cmp	r3, #0
    b58c:	d100      	bne.n	b590 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b58e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b590:	bf00      	nop
    b592:	b003      	add	sp, #12
    b594:	f85d fb04 	ldr.w	pc, [sp], #4
    b598:	1fff9290 	.word	0x1fff9290
    b59c:	1fff928c 	.word	0x1fff928c

0000b5a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    b5a0:	b500      	push	{lr}
    b5a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5a4:	f7f5 fb12 	bl	bcc <Sys_GetCoreID>
    b5a8:	4603      	mov	r3, r0
    b5aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    b5ac:	4a10      	ldr	r2, [pc, #64]	; (b5f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    b5ae:	9b01      	ldr	r3, [sp, #4]
    b5b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5b4:	2b00      	cmp	r3, #0
    b5b6:	d10d      	bne.n	b5d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b5b8:	f7f5 fa39 	bl	a2e <Port_schm_read_msr>
    b5bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b5be:	9b00      	ldr	r3, [sp, #0]
    b5c0:	f003 0301 	and.w	r3, r3, #1
    b5c4:	2b00      	cmp	r3, #0
    b5c6:	d100      	bne.n	b5ca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b5c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    b5ca:	490a      	ldr	r1, [pc, #40]	; (b5f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    b5cc:	9b01      	ldr	r3, [sp, #4]
    b5ce:	9a00      	ldr	r2, [sp, #0]
    b5d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    b5d4:	4a06      	ldr	r2, [pc, #24]	; (b5f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    b5d6:	9b01      	ldr	r3, [sp, #4]
    b5d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5dc:	1c5a      	adds	r2, r3, #1
    b5de:	4904      	ldr	r1, [pc, #16]	; (b5f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    b5e0:	9b01      	ldr	r3, [sp, #4]
    b5e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b5e6:	bf00      	nop
    b5e8:	b003      	add	sp, #12
    b5ea:	f85d fb04 	ldr.w	pc, [sp], #4
    b5ee:	bf00      	nop
    b5f0:	1fff9298 	.word	0x1fff9298
    b5f4:	1fff9294 	.word	0x1fff9294

0000b5f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    b5f8:	b500      	push	{lr}
    b5fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5fc:	f7f5 fae6 	bl	bcc <Sys_GetCoreID>
    b600:	4603      	mov	r3, r0
    b602:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    b604:	4a0d      	ldr	r2, [pc, #52]	; (b63c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    b606:	9b01      	ldr	r3, [sp, #4]
    b608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b60c:	1e5a      	subs	r2, r3, #1
    b60e:	490b      	ldr	r1, [pc, #44]	; (b63c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    b610:	9b01      	ldr	r3, [sp, #4]
    b612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    b616:	4a0a      	ldr	r2, [pc, #40]	; (b640 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    b618:	9b01      	ldr	r3, [sp, #4]
    b61a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b61e:	f003 0301 	and.w	r3, r3, #1
    b622:	2b00      	cmp	r3, #0
    b624:	d106      	bne.n	b634 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    b626:	4a05      	ldr	r2, [pc, #20]	; (b63c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    b628:	9b01      	ldr	r3, [sp, #4]
    b62a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b62e:	2b00      	cmp	r3, #0
    b630:	d100      	bne.n	b634 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b632:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b634:	bf00      	nop
    b636:	b003      	add	sp, #12
    b638:	f85d fb04 	ldr.w	pc, [sp], #4
    b63c:	1fff9298 	.word	0x1fff9298
    b640:	1fff9294 	.word	0x1fff9294

0000b644 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    b644:	b500      	push	{lr}
    b646:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b648:	f7f5 fac0 	bl	bcc <Sys_GetCoreID>
    b64c:	4603      	mov	r3, r0
    b64e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    b650:	4a10      	ldr	r2, [pc, #64]	; (b694 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    b652:	9b01      	ldr	r3, [sp, #4]
    b654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b658:	2b00      	cmp	r3, #0
    b65a:	d10d      	bne.n	b678 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b65c:	f7f5 f9e7 	bl	a2e <Port_schm_read_msr>
    b660:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b662:	9b00      	ldr	r3, [sp, #0]
    b664:	f003 0301 	and.w	r3, r3, #1
    b668:	2b00      	cmp	r3, #0
    b66a:	d100      	bne.n	b66e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b66c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    b66e:	490a      	ldr	r1, [pc, #40]	; (b698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    b670:	9b01      	ldr	r3, [sp, #4]
    b672:	9a00      	ldr	r2, [sp, #0]
    b674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    b678:	4a06      	ldr	r2, [pc, #24]	; (b694 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    b67a:	9b01      	ldr	r3, [sp, #4]
    b67c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b680:	1c5a      	adds	r2, r3, #1
    b682:	4904      	ldr	r1, [pc, #16]	; (b694 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    b684:	9b01      	ldr	r3, [sp, #4]
    b686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b68a:	bf00      	nop
    b68c:	b003      	add	sp, #12
    b68e:	f85d fb04 	ldr.w	pc, [sp], #4
    b692:	bf00      	nop
    b694:	1fff92a0 	.word	0x1fff92a0
    b698:	1fff929c 	.word	0x1fff929c

0000b69c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    b69c:	b500      	push	{lr}
    b69e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b6a0:	f7f5 fa94 	bl	bcc <Sys_GetCoreID>
    b6a4:	4603      	mov	r3, r0
    b6a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    b6a8:	4a0d      	ldr	r2, [pc, #52]	; (b6e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    b6aa:	9b01      	ldr	r3, [sp, #4]
    b6ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6b0:	1e5a      	subs	r2, r3, #1
    b6b2:	490b      	ldr	r1, [pc, #44]	; (b6e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    b6b4:	9b01      	ldr	r3, [sp, #4]
    b6b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    b6ba:	4a0a      	ldr	r2, [pc, #40]	; (b6e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    b6bc:	9b01      	ldr	r3, [sp, #4]
    b6be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6c2:	f003 0301 	and.w	r3, r3, #1
    b6c6:	2b00      	cmp	r3, #0
    b6c8:	d106      	bne.n	b6d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    b6ca:	4a05      	ldr	r2, [pc, #20]	; (b6e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    b6cc:	9b01      	ldr	r3, [sp, #4]
    b6ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6d2:	2b00      	cmp	r3, #0
    b6d4:	d100      	bne.n	b6d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b6d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b6d8:	bf00      	nop
    b6da:	b003      	add	sp, #12
    b6dc:	f85d fb04 	ldr.w	pc, [sp], #4
    b6e0:	1fff92a0 	.word	0x1fff92a0
    b6e4:	1fff929c 	.word	0x1fff929c

0000b6e8 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    b6e8:	bf00      	nop
    b6ea:	4770      	bx	lr

0000b6ec <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    b6ec:	b510      	push	{r4, lr}
    b6ee:	b084      	sub	sp, #16
    b6f0:	4604      	mov	r4, r0
    b6f2:	4608      	mov	r0, r1
    b6f4:	4611      	mov	r1, r2
    b6f6:	461a      	mov	r2, r3
    b6f8:	4623      	mov	r3, r4
    b6fa:	f8ad 3006 	strh.w	r3, [sp, #6]
    b6fe:	4603      	mov	r3, r0
    b700:	f88d 3005 	strb.w	r3, [sp, #5]
    b704:	460b      	mov	r3, r1
    b706:	f88d 3004 	strb.w	r3, [sp, #4]
    b70a:	4613      	mov	r3, r2
    b70c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b710:	f7f5 fa5c 	bl	bcc <Sys_GetCoreID>
    b714:	4603      	mov	r3, r0
    b716:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    b718:	490d      	ldr	r1, [pc, #52]	; (b750 <Det_ReportError+0x64>)
    b71a:	9b03      	ldr	r3, [sp, #12]
    b71c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b720:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    b724:	4a0b      	ldr	r2, [pc, #44]	; (b754 <Det_ReportError+0x68>)
    b726:	9b03      	ldr	r3, [sp, #12]
    b728:	4413      	add	r3, r2
    b72a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b72e:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    b730:	4a09      	ldr	r2, [pc, #36]	; (b758 <Det_ReportError+0x6c>)
    b732:	9b03      	ldr	r3, [sp, #12]
    b734:	4413      	add	r3, r2
    b736:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b73a:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    b73c:	4a07      	ldr	r2, [pc, #28]	; (b75c <Det_ReportError+0x70>)
    b73e:	9b03      	ldr	r3, [sp, #12]
    b740:	4413      	add	r3, r2
    b742:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b746:	701a      	strb	r2, [r3, #0]

    return E_OK;
    b748:	2300      	movs	r3, #0
}
    b74a:	4618      	mov	r0, r3
    b74c:	b004      	add	sp, #16
    b74e:	bd10      	pop	{r4, pc}
    b750:	1fff92cc 	.word	0x1fff92cc
    b754:	1fff92a4 	.word	0x1fff92a4
    b758:	1fff92a8 	.word	0x1fff92a8
    b75c:	1fff92ac 	.word	0x1fff92ac

0000b760 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
    b760:	b510      	push	{r4, lr}
    b762:	b084      	sub	sp, #16
    b764:	4604      	mov	r4, r0
    b766:	4608      	mov	r0, r1
    b768:	4611      	mov	r1, r2
    b76a:	461a      	mov	r2, r3
    b76c:	4623      	mov	r3, r4
    b76e:	f8ad 3006 	strh.w	r3, [sp, #6]
    b772:	4603      	mov	r3, r0
    b774:	f88d 3005 	strb.w	r3, [sp, #5]
    b778:	460b      	mov	r3, r1
    b77a:	f88d 3004 	strb.w	r3, [sp, #4]
    b77e:	4613      	mov	r3, r2
    b780:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b784:	f7f5 fa22 	bl	bcc <Sys_GetCoreID>
    b788:	4603      	mov	r3, r0
    b78a:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
    b78c:	490d      	ldr	r1, [pc, #52]	; (b7c4 <Det_ReportRuntimeError+0x64>)
    b78e:	9b03      	ldr	r3, [sp, #12]
    b790:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b794:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
    b798:	4a0b      	ldr	r2, [pc, #44]	; (b7c8 <Det_ReportRuntimeError+0x68>)
    b79a:	9b03      	ldr	r3, [sp, #12]
    b79c:	4413      	add	r3, r2
    b79e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b7a2:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
    b7a4:	4a09      	ldr	r2, [pc, #36]	; (b7cc <Det_ReportRuntimeError+0x6c>)
    b7a6:	9b03      	ldr	r3, [sp, #12]
    b7a8:	4413      	add	r3, r2
    b7aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b7ae:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
    b7b0:	4a07      	ldr	r2, [pc, #28]	; (b7d0 <Det_ReportRuntimeError+0x70>)
    b7b2:	9b03      	ldr	r3, [sp, #12]
    b7b4:	4413      	add	r3, r2
    b7b6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b7ba:	701a      	strb	r2, [r3, #0]

    return E_OK;
    b7bc:	2300      	movs	r3, #0
}
    b7be:	4618      	mov	r0, r3
    b7c0:	b004      	add	sp, #16
    b7c2:	bd10      	pop	{r4, pc}
    b7c4:	1fff92d0 	.word	0x1fff92d0
    b7c8:	1fff92b0 	.word	0x1fff92b0
    b7cc:	1fff92b4 	.word	0x1fff92b4
    b7d0:	1fff92b8 	.word	0x1fff92b8

0000b7d4 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
    b7d4:	b510      	push	{r4, lr}
    b7d6:	b084      	sub	sp, #16
    b7d8:	4604      	mov	r4, r0
    b7da:	4608      	mov	r0, r1
    b7dc:	4611      	mov	r1, r2
    b7de:	461a      	mov	r2, r3
    b7e0:	4623      	mov	r3, r4
    b7e2:	f8ad 3006 	strh.w	r3, [sp, #6]
    b7e6:	4603      	mov	r3, r0
    b7e8:	f88d 3005 	strb.w	r3, [sp, #5]
    b7ec:	460b      	mov	r3, r1
    b7ee:	f88d 3004 	strb.w	r3, [sp, #4]
    b7f2:	4613      	mov	r3, r2
    b7f4:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b7f8:	f7f5 f9e8 	bl	bcc <Sys_GetCoreID>
    b7fc:	4603      	mov	r3, r0
    b7fe:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
    b800:	490d      	ldr	r1, [pc, #52]	; (b838 <Det_ReportTransientFault+0x64>)
    b802:	9b03      	ldr	r3, [sp, #12]
    b804:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b808:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
    b80c:	4a0b      	ldr	r2, [pc, #44]	; (b83c <Det_ReportTransientFault+0x68>)
    b80e:	9b03      	ldr	r3, [sp, #12]
    b810:	4413      	add	r3, r2
    b812:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b816:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
    b818:	4a09      	ldr	r2, [pc, #36]	; (b840 <Det_ReportTransientFault+0x6c>)
    b81a:	9b03      	ldr	r3, [sp, #12]
    b81c:	4413      	add	r3, r2
    b81e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b822:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
    b824:	4a07      	ldr	r2, [pc, #28]	; (b844 <Det_ReportTransientFault+0x70>)
    b826:	9b03      	ldr	r3, [sp, #12]
    b828:	4413      	add	r3, r2
    b82a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b82e:	701a      	strb	r2, [r3, #0]

    return E_OK;
    b830:	2300      	movs	r3, #0
}
    b832:	4618      	mov	r0, r3
    b834:	b004      	add	sp, #16
    b836:	bd10      	pop	{r4, pc}
    b838:	1fff92c8 	.word	0x1fff92c8
    b83c:	1fff92bc 	.word	0x1fff92bc
    b840:	1fff92c0 	.word	0x1fff92c0
    b844:	1fff92c4 	.word	0x1fff92c4

0000b848 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
    b848:	bf00      	nop
    b84a:	4770      	bx	lr

0000b84c <Clock_Ip_au8DividerCallbackIndex>:
    b84c:	0c00 0e0d 0201 0603 0409 0a07 0805 000b     ................

0000b85c <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000b86c <Clock_Ip_au8XoscCallbackIndex>:
    b86c:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000b87c <Clock_Ip_au8IrcoscCallbackIndex>:
    b87c:	0100 0302 0004 0000 0000 0000 0000 0000     ................

0000b88c <Clock_Ip_au8GateCallbackIndex>:
    b88c:	0200 0601 0301 0104 0500 0000 0000 0000     ................

0000b89c <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000b8ac <Clock_Ip_au8PllCallbackIndex>:
    b8ac:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000b8bc <Clock_Ip_au8SelectorCallbackIndex>:
    b8bc:	0800 0a09 0109 0302 0504 0706 0000 0000     ................

0000b8cc <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000b8dc <Clock_Ip_au8CmuCallbackIndex>:
	...

0000b8ec <Clock_Ip_au8ClockFeatures>:
	...
    b8fc:	0000 0100 0000 0000 0000 0000 0002 0000     ................
    b90c:	0000 0000 0300 0000 0000 0000 0000 0004     ................
    b91c:	0000 0000 0000 0500 0000 0000 0000 0000     ................
    b92c:	0006 0000 0000 0000 0100 0000 0000 0000     ................
    b93c:	0000 0001 0000 0000 0000 0400 0000 0000     ................
    b94c:	0000 0000 0005 0000 0001 0000 0401 0000     ................
    b95c:	0200 0000 0100 0005 0000 0003 0000 0402     ................
    b96c:	0000 0400 0000 0200 0005 0000 0005 0000     ................
    b97c:	0403 0000 0600 0000 0300 0005 0000 0007     ................
    b98c:	0000 0500 0000 0000 0000 0000 0006 0000     ................
	...
    b9cc:	0000 0005 0000 0000 0000 0600 0100 0000     ................
    b9dc:	0000 0000 0007 0003 0000 0000 0000 0000     ................
    b9ec:	0000 0000 0000 0006 0000 0000 0000 0700     ................
    b9fc:	0100 0000 0000 0000 0008 0003 0000 0000     ................
	...
    ba14:	0000 0009 0000 0000 0000 0a00 0100 0000     ................
    ba24:	0000 0000 000b 0003 0000 0000 0000 0000     ................
    ba34:	0000 0000 0000 000c 0000 0000 0000 0d00     ................
    ba44:	0100 0000 0000 0000 000e 0003 0000 0000     ................
    ba54:	0800 0000 0000 0000 0000 0009 0000 0000     ................
    ba64:	0000 0a00 0000 0000 0000 0000 000b 0000     ................
    ba74:	0000 0000 0b01 0000 0000 0000 0200 000b     ................
    ba84:	0000 0000 0000 0b03 0000 0000 0000 0000     ................
	...
    ba9c:	0400 0000 003b 003b 0000 0004 2700 2700     ....;.;......'.'
    baac:	0000 0100 0000 0000 0000 0000 0007 0000     ................
    babc:	7300 0000 0700 0000 0000 0032 0000 0009     .s........2.....
    bacc:	0000 0200 0000 0700 0000 0000 0021 0000     ............!...
    badc:	0009 0000 0400 0000 0900 0000 0000 0003     ................
    baec:	0000 0007 0000 6100 0000 0700 0000 0000     .......a........
    bafc:	0024 0000 0007 0000 2500 0000 0700 0000     $........%......
    bb0c:	0000 002b 0000 0004 5a00 5a00 0000 0700     ..+......Z.Z....
    bb1c:	0000 0000 0020 0000 0004 3800 3800 0000     .... ......8.8..
    bb2c:	0400 0000 0039 0039 0000 0004 3a00 3a00     ....9.9......:.:
    bb3c:	0000 0400 0000 0026 0026 0000 0004 6600     ......&.&......f
    bb4c:	6600 0000 0400 0000 0037 0037 0000 0004     .f......7.7.....
    bb5c:	2c00 2c00 0000 0400 0000 002d 002d 0000     .,.,......-.-...
    bb6c:	0004 2e00 2e00 0000 0200 0000 4040 0040     ............@@@.
    bb7c:	0000 0004 6a00 6a00 0000 0400 0000 006b     .....j.j......k.
    bb8c:	006b 0000 0004 6c00 6c00 0000 0900 0000     k......l.l......
    bb9c:	0000 0001 0000 0009 0000 0000 0000 0700     ................
    bbac:	0000 0000 0036 0000 0007 0000 3100 0000     ....6........1..
    bbbc:	0700 0000 0000 0049 0000 0007 0000 4a00     ......I........J
    bbcc:	0000 0700 0000 0000 004b 0000 0007 0000     ........K.......
    bbdc:	4c00 0000 0700 0000 0000 004d 0000 0007     .L........M.....
    bbec:	0000 3d00 0000 0300 0000 0000 0000 0000     ...=............

0000bbfc <Clock_Ip_au16SelectorEntryHardwareValue>:
    bbfc:	0a03 0101 0001 0101 0002 0404 0603 0200     ................
    bc0c:	0810 0001 0100 0202 0000 0000 0007 0000     ................
    bc1c:	0009 0000 0000 0000 0c0e 0000 0000 0000     ................
	...

0000bc54 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    bc54:	0000 0002 0300 0000 0601 0000 0000 0000     ................
	...

0000bc84 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    bc84:	0700 0000 0000 0000 0000 0202 0303 0101     ................
    bc94:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000bcb4 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    bcb4:	0001 0000 0000 0000 0000 0202 0303 0101     ................
    bcc4:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000bce4 <Clock_Ip_au8DividerValueHardwareValue>:
    bce4:	0100 0002 0003 0000 0004 0000 0000 0000     ................
    bcf4:	0005 0000 0000 0000 0000 0000 0000 0000     ................
    bd04:	0006 0000 0000 0000 0000 0000 0000 0000     ................
	...
    bd24:	0007 0000                                   ....

0000bd28 <Clock_Ip_apxScgPeriphAsyncDivs>:
    bd28:	4204 4006 4304 4006 4104 4006 4604 4006     .B.@.C.@.A.@.F.@

0000bd38 <Clock_Ip_aeSourceTypeClockName>:
    bd38:	0000 0000 0001 0000 0001 0000 0001 0000     ................
    bd48:	0001 0000 0001 0000 0001 0000 0001 0000     ................
    bd58:	0002 0000 0003 0000 0001 0000 0001 0000     ................
    bd68:	0001 0000 0001 0000 0002 0000 0002 0000     ................
    bd78:	0003 0000 0003 0000 0001 0000 0001 0000     ................
    bd88:	0004 0000 0004 0000 0004 0000 0004 0000     ................
	...

0000bdf4 <Clock_Ip_aeHwPllName>:
    bdf4:	0009 0000                                   ....

0000bdf8 <Clock_Ip_aeHwDfsName>:
    bdf8:	0057 0000                                   W...

0000bdfc <Clock_Ip_axDividerCallbacks>:
    bdfc:	21c5 0000 21cf 0000 21e9 0000 2203 0000     .!...!...!..."..
    be0c:	221d 0000 2237 0000 2251 0000 226b 0000     ."..7"..Q"..k"..
    be1c:	2285 0000 229f 0000 22b9 0000 22d3 0000     ."..."..."..."..
    be2c:	22ed 0000 2307 0000 2321 0000               ."...#..!#..

0000be38 <Clock_Ip_axDividerTriggerCallbacks>:
    be38:	2695 0000 2695 0000                         .&...&..

0000be40 <Clock_Ip_axExtOscCallbacks>:
    be40:	26a1 0000 26a1 0000 26a1 0000 26ab 0000     .&...&...&...&..
    be50:	26a1 0000 26b5 0000 26cf 0000 26e9 0000     .&...&...&...&..
    be60:	276d 0000 2781 0000                         m'...'..

0000be68 <Clock_Ip_axFracDivCallbacks>:
    be68:	2941 0000 2941 0000 294b 0000               A)..A)..K)..

0000be74 <Clock_Ip_axGateCallbacks>:
    be74:	2965 0000 296f 0000 2a6f 0000 2a89 0000     e)..o)..o*...*..
    be84:	2a1f 0000 2a39 0000 29cf 0000 29e9 0000     .*..9*...)...)..
    be94:	297f 0000 2999 0000 2abf 0000 2ad9 0000     .)...)...*...*..
    bea4:	2b0f 0000 2b29 0000                         .+..)+..

0000beac <Clock_Ip_axIntOscCallbacks>:
    beac:	2cd5 0000 2cd5 0000 2cdf 0000 2ce9 0000     .,...,...,...,..
    bebc:	2d03 0000 2d1d 0000 2d31 0000 2d4b 0000     .-...-..1-..K-..
    becc:	2d65 0000 2d79 0000 2d93 0000 2dad 0000     e-..y-...-...-..
    bedc:	2e55 0000 2e6f 0000 2e89 0000               U...o.......

0000bee8 <Clock_Ip_axCmuCallbacks>:
    bee8:	3425 0000 342f 0000 343b 0000 3425 0000     %4../4..;4..%4..

0000bef8 <Clock_Ip_axPllCallbacks>:
    bef8:	3445 0000 3445 0000 344f 0000 3445 0000     E4..E4..O4..E4..
    bf08:	345b 0000 3465 0000 347f 0000 3499 0000     [4..e4...4...4..
    bf18:	353d 0000 3529 0000                         =5..)5..

0000bf20 <Clock_Ip_axPcfsCallbacks>:
    bf20:	3699 0000                                   .6..

0000bf24 <Clock_Ip_axSelectorCallbacks>:
    bf24:	36a5 0000 36a5 0000 36af 0000 36c9 0000     .6...6...6...6..
    bf34:	36a5 0000 36e3 0000 36fd 0000 3717 0000     .6...6...6...7..
    bf44:	3731 0000 374b 0000 3765 0000 377f 0000     17..K7..e7...7..
    bf54:	3799 0000 37b3 0000 37cd 0000 37e7 0000     .7...7...7...7..
    bf64:	3801 0000 381b 0000 3835 0000 384f 0000     .8...8..58..O8..
    bf74:	3869 0000 3883 0000                         i8...8..

0000bf7c <ClockSource>:
    bf7c:	0000 0000 0008 0000 0002 0000 0005 0000     ................
	...
    bf94:	0009 0000                                   ....

0000bf98 <ResetReasonArray>:
    bf98:	0000 0000 0001 0000 0002 0000 0003 0000     ................
    bfa8:	0004 0000 0005 0000 0006 0000 0007 0000     ................
    bfb8:	0008 0000 0009 0000 000a 0000 000b 0000     ................
    bfc8:	000c 0000 000d 0000 000e 0000               ............

0000bfd4 <Port_au32PortCiPortBaseAddr>:
    bfd4:	9000 4004 a000 4004 b000 4004 c000 4004     ...@...@...@...@
    bfe4:	d000 4004                                   ...@

0000bfe8 <Port_au32PortCiGpioBaseAddr>:
    bfe8:	f000 400f f040 400f f080 400f f0c0 400f     ...@@..@...@...@
    bff8:	f100 400f                                   ...@

0000bffc <ftmGptBase>:
    bffc:	8000 4003 9000 4003 a000 4003 6000 4002     ...@...@...@.`.@

0000c00c <Mcu_aClockConfigPB>:
	...
    c014:	0101 1c00 0010 0400 0029 0100 0005 0000     ........).......
    c024:	0001 0000 0000 0000 0057 0000 0000 0000     ........W.......
    c034:	0000 0000 0008 0000 1200 007a 0001 0000     ..........z.....
    c044:	0001 0000 0000 0000 0057 0000 0000 0000     ........W.......
    c054:	0057 0000 0000 0000 0000 0000 0000 0000     W...............
	...
    c074:	0019 0000 0005 0000 001a 0000 0002 0000     ................
    c084:	001b 0000 0005 0000 002a 0000 0005 0000     ........*.......
    c094:	0028 0000 000e 0000 0029 0000 0001 0000     (.......).......
    c0a4:	0056 0000 001c 0000 0032 0000 002a 0000     V.......2...*...
    c0b4:	002b 0000 0014 0000 002c 0000 0014 0000     +.......,.......
    c0c4:	002d 0000 0014 0000 002e 0000 0014 0000     -...............
    c0d4:	003f 0000 000c 0000 0040 0000 000c 0000     ?.......@.......
    c0e4:	0041 0000 000c 0000 0042 0000 0000 0000     A.......B.......
    c0f4:	0031 0000 0000 0000 0045 0000 0000 0000     1.......E.......
    c104:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    c114:	0044 0000 0000 0000 0030 0000 0000 0000     D.......0.......
    c124:	003d 0000 0000 0000 0043 0000 0000 0000     =.......C.......
    c134:	0049 0000 0000 0000 004a 0000 0000 0000     I.......J.......
    c144:	004b 0000 0000 0000 0048 0000 0000 0000     K.......H.......
    c154:	000c 0000 0004 0000 0000 0000 000d 0000     ................
    c164:	0004 0000 0000 0000 000e 0000 0001 0000     ................
    c174:	0000 0000 000f 0000 0001 0000 0000 0000     ................
    c184:	001d 0000 0001 0000 0000 0000 001e 0000     ................
    c194:	0008 0000 0000 0000 001f 0000 0001 0000     ................
    c1a4:	0000 0000 0021 0000 0001 0000 0000 0000     ....!...........
    c1b4:	0022 0000 0002 0000 0000 0000 0023 0000     "...........#...
    c1c4:	0001 0000 0000 0000 0025 0000 0003 0000     ........%.......
    c1d4:	0000 0000 0026 0000 0004 0000 0000 0000     ....&...........
    c1e4:	0027 0000 0002 0000 0000 0000 0032 0000     '...........2...
    c1f4:	0001 0000 0000 0000 0048 0000 0001 0000     ........H.......
    c204:	0001 0000 0056 0000 0001 0000 0001 0000     ....V...........
    c214:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
    c22c:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
    c244:	0057 0000 0000 0000 0057 0000 0057 0000     W.......W...W...
	...
    c260:	0014 0000 7d00 0000 0015 0000 7d00 0000     .....}.......}..
    c270:	0016 0000 7d00 0000 0017 0000 8000 0000     .....}..........
    c280:	0012 0000 0001 0000 0013 0000 0001 0000     ................
    c290:	0030 0000 0000 0000 0031 0000 0000 0000     0.......1.......
    c2a0:	0032 0000 0000 0000 0033 0000 0000 0000     2.......3.......
    c2b0:	0034 0000 0000 0000 0035 0000 0001 0000     4.......5.......
    c2c0:	0036 0000 0000 0000 0037 0000 0001 0000     6.......7.......
    c2d0:	0038 0000 0001 0000 0039 0000 0000 0000     8.......9.......
    c2e0:	003a 0000 0000 0000 003b 0000 0000 0000     :.......;.......
    c2f0:	003c 0000 0000 0000 003d 0000 0000 0000     <.......=.......
    c300:	003e 0000 0000 0000 003f 0000 0000 0000     >.......?.......
    c310:	0040 0000 0001 0000 0041 0000 0001 0000     @.......A.......
    c320:	0042 0000 0000 0000 0043 0000 0000 0000     B.......C.......
    c330:	0044 0000 0000 0000 0045 0000 0000 0000     D.......E.......
    c340:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    c350:	0048 0000 0000 0000 0049 0000 0000 0000     H.......I.......
    c360:	004a 0000 0000 0000 004b 0000 0000 0000     J.......K.......
    c370:	004c 0000 0001 0000 004d 0000 0001 0000     L.......M.......
    c380:	004e 0000 0000 0000 004f 0000 0000 0000     N.......O.......
    c390:	0050 0000 0001 0000 0051 0000 0001 0000     P.......Q.......
    c3a0:	0052 0000 0001 0000 0053 0000 0001 0000     R.......S.......
    c3b0:	0054 0000 0001 0000 0055 0000 0000 0000     T.......U.......
    c3c0:	0056 0000 0001 0000 0057 0000 0000 0000     V.......W.......
    c3d0:	0000 0000 0057 0000 0000 0000 0057 0000     ....W.......W...
	...

0000c404 <FTM_1_InitConfig_PB>:
    c404:	0000 0000 0003 0000 0007 0000 0001 0000     ................

0000c414 <FTM_2_InitConfig_PB>:
    c414:	0000 0000 0003 0000 0007 0000 0001 0000     ................

0000c424 <FTM_1_ChannelConfig_PB>:
    c424:	0000 0000 7b95 0000 0000 0000 0001 0000     .....{..........

0000c434 <FTM_2_ChannelConfig_PB>:
    c434:	0000 0000 7b95 0000 0001 0000 0001 0000     .....{..........

0000c444 <Gpt_pInitPredefTimerChannelPB>:
	...

0000c454 <u8GptChannelIdToIndexMap>:
    c454:	0100 0000                                   ....

0000c458 <Gpt_InitChannelPB>:
    c458:	0000 0000 08b1 0000 0000 0000 ffff 0000     ................
    c468:	0001 0000 8b58 1fff 0000 0000 08c3 0000     ....X...........
    c478:	0000 0000 ffff 0000 0001 0000 8b70 1fff     ............p...

0000c488 <Gpt_Config>:
    c488:	0002 0000 c458 0000 0002 0000 8b38 1fff     ....X.......8...
    c498:	c444 0000 c454 0000                         D...T...

0000c4a0 <aIrqConfiguration>:
    c4a0:	0069 0000 0f01 0000 6d97 0000 006f 0000     i........m..o...
    c4b0:	0f01 0000 6e09 0000                         .....n..

0000c4b8 <intCtrlConfig>:
    c4b8:	0002 0000 c4a0 0000                         ........

0000c4c0 <Mcu_Config>:
    c4c0:	005a 0000 0000 0000 0001 0000 0001 0000     Z...............
    c4d0:	c6dc 0000 c00c 0000 c6e8 0000               ............

0000c4dc <OsIf_xPredefinedConfig>:
    c4dc:	0000 0000 6c00 02dc                         .....l..

0000c4e4 <OsIf_apxPredefinedConfig>:
    c4e4:	c4dc 0000                                   ....

0000c4e8 <Platform_uConfiguration>:
    c4e8:	c4f0 0000                                   ....

0000c4ec <Platform_Config>:
    c4ec:	c4e8 0000                                   ....

0000c4f0 <ipwConfig>:
    c4f0:	c4b8 0000 0000 0000                         ........

0000c4f8 <g_pin_mux_InitConfigArr>:
    c4f8:	c000 4004 f0c0 400f 0000 0000 0002 0000     ...@...@........
    c508:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...
    c520:	c000 4004 f0c0 400f 0010 0000 0002 0000     ...@...@........
    c530:	0001 0000 0002 0000 0000 0000 0000 0000     ................
    c540:	0000 0000 0100 0000 b000 4004 f080 400f     ...........@...@
    c550:	0008 0000 0002 0000 0001 0000 0002 0000     ................
	...
    c570:	b000 4004 f080 400f 0009 0000 0002 0000     ...@...@........
    c580:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...

0000c598 <au8Port_PartitionList>:
    c598:	0001 0000                                   ....

0000c59c <au32Port_PinToPartitionMap>:
    c59c:	0001 0000 0001 0000 0001 0000 0001 0000     ................

0000c5ac <Port_au16NoUnUsedPadsArrayDefault>:
    c5ac:	0000 0001 0002 0003 0006 0007 0008 0009     ................
    c5bc:	000b 000c 000d 000e 000f 0010 0011 0020     .............. .
    c5cc:	0021 0022 0023 0024 0025 0026 0027 0028     !.".#.$.%.&.'.(.
    c5dc:	0029 002a 002b 002c 002d 002e 002f 0030     ).*.+.,.-.../.0.
    c5ec:	0031 0040 0041 0042 0043 0046 0047 004a     1.@.A.B.C.F.G.J.
    c5fc:	004b 004c 004d 004e 004f 0050 0051 0061     K.L.M.N.O.P.Q.a.
    c60c:	0062 0063 0064 0065 0066 0067 0068 0069     b.c.d.e.f.g.h.i.
    c61c:	006a 006b 006c 006d 006e 006f 0071 0080     j.k.l.m.n.o.q...
    c62c:	0081 0082 0083 0084 0085 0086 0087 0088     ................
    c63c:	0089 008a 008b 008c 008d 008e 008f 0090     ................

0000c64c <Port_UnUsedPin>:
    c64c:	0100 0000 0001 0000 0000 0000               ............

0000c658 <Port_aPinConfigDefault>:
    c658:	0060 0000 0100 0000 0000 0000 0002 0000     `...............
    c668:	0001 0001 0070 0000 0100 0000 0001 0000     ....p...........
    c678:	0002 0000 0001 0001 0048 0000 0100 0000     ........H.......
    c688:	0000 0000 0002 0000 0001 0001 0049 0000     ............I...
    c698:	0100 0000 0000 0000 0002 0000 0001 0001     ................

0000c6a8 <Port_Config>:
    c6a8:	0004 0050 c5ac 0000 c64c 0000 c658 0000     ..P.....L...X...
	...
    c6c0:	c59c 0000 c598 0000 c4f8 0000               ............

0000c6cc <Power_Ip_RCM_ConfigPB>:
	...

0000c6d4 <Power_Ip_PMC_ConfigPB>:
    c6d4:	0000 0000                                   ....

0000c6d8 <Power_Ip_SMC_ConfigPB>:
    c6d8:	0000 0000                                   ....

0000c6dc <Power_Ip_aModeConfigPB>:
	...

0000c6e8 <Power_Ip_HwIPsConfigPB>:
    c6e8:	c6cc 0000 c6d4 0000 c6d8 0000               ............

0000c6f4 <__INIT_TABLE>:
    c6f4:	00000002 	.word	0x00000002
    c6f8:	1fff8b10 	.word	0x1fff8b10
    c6fc:	0000c71c 	.word	0x0000c71c
    c700:	0000c794 	.word	0x0000c794
    c704:	1fff8800 	.word	0x1fff8800
    c708:	00000000 	.word	0x00000000
    c70c:	00000310 	.word	0x00000310

0000c710 <__ZERO_TABLE>:
    c710:	00000001 	.word	0x00000001
    c714:	1fff8b90 	.word	0x1fff8b90
    c718:	1fff92e0 	.word	0x1fff92e0
