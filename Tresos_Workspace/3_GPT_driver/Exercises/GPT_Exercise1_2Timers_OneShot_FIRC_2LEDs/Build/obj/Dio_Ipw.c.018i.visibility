
Marking local functions:


Marking externally visible functions: Dio_Ipw_WriteChannelGroup/6 Dio_Ipw_ReadChannelGroup/5 Dio_Ipw_WritePort/4 Dio_Ipw_ReadPort/3 Dio_Ipw_FlipChannel/2 Dio_Ipw_WriteChannel/1 Dio_Ipw_ReadChannel/0


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Gpio_Dio_Ip_ClearPins/15 (Gpio_Dio_Ip_ClearPins) @0daf3540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Dio_Ipw_WriteChannelGroup/6 
  Calls: 
Gpio_Dio_Ip_SetPins/14 (Gpio_Dio_Ip_SetPins) @0daf3460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Dio_Ipw_WriteChannelGroup/6 
  Calls: 
Gpio_Dio_Ip_WritePins/13 (Gpio_Dio_Ip_WritePins) @0daf31c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Dio_Ipw_WritePort/4 
  Calls: 
Gpio_Dio_Ip_ReadPins/12 (Gpio_Dio_Ip_ReadPins) @0daf3000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Dio_Ipw_ReadChannelGroup/5 Dio_Ipw_ReadPort/3 
  Calls: 
Gpio_Dio_Ip_GetPinsOutput/11 (Gpio_Dio_Ip_GetPinsOutput) @0daee380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Dio_Ipw_FlipChannel/2 
  Calls: 
Gpio_Dio_Ip_TogglePins/10 (Gpio_Dio_Ip_TogglePins) @0daee0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Dio_Ipw_FlipChannel/2 
  Calls: 
Gpio_Dio_Ip_WritePin/9 (Gpio_Dio_Ip_WritePin) @0daeee00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Dio_Ipw_WriteChannel/1 
  Calls: 
Gpio_Dio_Ip_ReadPin/8 (Gpio_Dio_Ip_ReadPin) @0daeec40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Dio_Ipw_ReadChannel/0 
  Calls: 
GpioBaseAdresses/7 (GpioBaseAdresses) @0daf2360
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Dio_Ipw_ReadChannel/0 (read) Dio_Ipw_WriteChannel/1 (read) Dio_Ipw_FlipChannel/2 (read) Dio_Ipw_ReadPort/3 (read) Dio_Ipw_WritePort/4 (read) Dio_Ipw_ReadChannelGroup/5 (read) Dio_Ipw_WriteChannelGroup/6 (read) 
  Availability: not_available
  Varpool flags:
Dio_Ipw_WriteChannelGroup/6 (Dio_Ipw_WriteChannelGroup) @0daee7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: GpioBaseAdresses/7 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Gpio_Dio_Ip_ClearPins/15 Gpio_Dio_Ip_SetPins/14 
Dio_Ipw_ReadChannelGroup/5 (Dio_Ipw_ReadChannelGroup) @0daee540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: GpioBaseAdresses/7 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Gpio_Dio_Ip_ReadPins/12 
Dio_Ipw_WritePort/4 (Dio_Ipw_WritePort) @0daee2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: GpioBaseAdresses/7 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Gpio_Dio_Ip_WritePins/13 
Dio_Ipw_ReadPort/3 (Dio_Ipw_ReadPort) @0daee000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: GpioBaseAdresses/7 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Gpio_Dio_Ip_ReadPins/12 
Dio_Ipw_FlipChannel/2 (Dio_Ipw_FlipChannel) @0da418c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: GpioBaseAdresses/7 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Gpio_Dio_Ip_GetPinsOutput/11 Gpio_Dio_Ip_TogglePins/10 
Dio_Ipw_WriteChannel/1 (Dio_Ipw_WriteChannel) @0da41c40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: GpioBaseAdresses/7 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Gpio_Dio_Ip_WritePin/9 
Dio_Ipw_ReadChannel/0 (Dio_Ipw_ReadChannel) @0da417e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: GpioBaseAdresses/7 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Gpio_Dio_Ip_ReadPin/8 
Dio_Ipw_WriteChannelGroup (const struct Dio_ChannelGroupType * pChannelGroupIdPtr, Dio_PortLevelType Level)
{
  struct GPIO_Type * GpioBase;
  Dio_PortLevelType ValueClear;
  Dio_PortLevelType ValueSet;

  <bb 2> :
  _1 = pChannelGroupIdPtr->port;
  _2 = (int) _1;
  _3 = GpioBaseAdresses[_2];
  GpioBase = (struct GPIO_Type *) _3;
  _4 = pChannelGroupIdPtr->u8offset;
  _5 = (int) _4;
  _6 = Level << _5;
  _7 = pChannelGroupIdPtr->mask;
  ValueSet = _6 & _7;
  Gpio_Dio_Ip_SetPins (GpioBase, ValueSet);
  _8 = ~ValueSet;
  _9 = pChannelGroupIdPtr->mask;
  ValueClear = _8 & _9;
  Gpio_Dio_Ip_ClearPins (GpioBase, ValueClear);
  return;

}


Dio_Ipw_ReadChannelGroup (const struct Dio_ChannelGroupType * pChannelGroupIdPtr)
{
  const struct GPIO_Type * GpioBase;
  Dio_PortLevelType pinsValue;
  Dio_PortLevelType PortLevel;
  Dio_PortLevelType D.5461;

  <bb 2> :
  PortLevel = 0;
  _1 = pChannelGroupIdPtr->port;
  _2 = (int) _1;
  _3 = GpioBaseAdresses[_2];
  GpioBase = (const struct GPIO_Type *) _3;
  pinsValue = Gpio_Dio_Ip_ReadPins (GpioBase);
  _4 = pChannelGroupIdPtr->mask;
  _5 = pinsValue & _4;
  _6 = pChannelGroupIdPtr->u8offset;
  _7 = (int) _6;
  PortLevel = _5 >> _7;
  D.5461 = PortLevel;

  <bb 3> :
<L0>:
  return D.5461;

}


Dio_Ipw_WritePort (Dio_PortType PortId, Dio_PortLevelType Level)
{
  struct GPIO_Type * GpioBase;
  Dio_PortLevelType CrtLevel;

  <bb 2> :
  CrtLevel = Level;
  _1 = (int) PortId;
  _2 = GpioBaseAdresses[_1];
  GpioBase = (struct GPIO_Type *) _2;
  Gpio_Dio_Ip_WritePins (GpioBase, CrtLevel);
  return;

}


Dio_Ipw_ReadPort (Dio_PortType PortId)
{
  const struct GPIO_Type * GpioBase;
  Dio_PortLevelType PortLevel;
  Dio_PortLevelType D.5459;

  <bb 2> :
  PortLevel = 0;
  _1 = (int) PortId;
  _2 = GpioBaseAdresses[_1];
  GpioBase = (const struct GPIO_Type *) _2;
  PortLevel = Gpio_Dio_Ip_ReadPins (GpioBase);
  D.5459 = PortLevel;

  <bb 3> :
<L0>:
  return D.5459;

}


Dio_Ipw_FlipChannel (Dio_ChannelType ChannelId)
{
  struct GPIO_Type * GpioBase;
  uint32 u32PortOutPutLevel;
  uint32 u32PinIndex;
  uint32 u32GpioInstance;
  Dio_LevelType ChannelLevel;
  Dio_LevelType D.5457;

  <bb 2> :
  ChannelLevel = 0;
  _1 = ChannelId >> 5;
  u32GpioInstance = (uint32) _1;
  _2 = (long unsigned int) ChannelId;
  u32PinIndex = _2 & 31;
  _3 = GpioBaseAdresses[u32GpioInstance];
  GpioBase = (struct GPIO_Type *) _3;
  _4 = 1 << u32PinIndex;
  Gpio_Dio_Ip_TogglePins (GpioBase, _4);
  u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput (GpioBase);
  _5 = 1 << u32PinIndex;
  _6 = u32PortOutPutLevel & _5;
  _7 = _6 >> u32PinIndex;
  ChannelLevel = (Dio_LevelType) _7;
  D.5457 = ChannelLevel;

  <bb 3> :
<L0>:
  return D.5457;

}


Dio_Ipw_WriteChannel (Dio_ChannelType ChannelId, Dio_LevelType Level)
{
  struct GPIO_Type * GpioBase;
  uint32 u32PinIndex;
  uint32 u32GpioInstance;

  <bb 2> :
  _1 = ChannelId >> 5;
  u32GpioInstance = (uint32) _1;
  _2 = (long unsigned int) ChannelId;
  u32PinIndex = _2 & 31;
  _3 = GpioBaseAdresses[u32GpioInstance];
  GpioBase = (struct GPIO_Type *) _3;
  Gpio_Dio_Ip_WritePin (GpioBase, u32PinIndex, Level);
  return;

}


Dio_Ipw_ReadChannel (Dio_ChannelType ChannelId)
{
  const struct GPIO_Type * GpioBase;
  uint32 u32PinIndex;
  uint32 u32GpioInstance;
  Dio_LevelType ChannelLevel;
  Dio_LevelType D.5455;

  <bb 2> :
  ChannelLevel = 0;
  _1 = ChannelId >> 5;
  u32GpioInstance = (uint32) _1;
  _2 = (long unsigned int) ChannelId;
  u32PinIndex = _2 & 31;
  _3 = GpioBaseAdresses[u32GpioInstance];
  GpioBase = (const struct GPIO_Type *) _3;
  ChannelLevel = Gpio_Dio_Ip_ReadPin (GpioBase, u32PinIndex);
  D.5455 = ChannelLevel;

  <bb 3> :
<L0>:
  return D.5455;

}


