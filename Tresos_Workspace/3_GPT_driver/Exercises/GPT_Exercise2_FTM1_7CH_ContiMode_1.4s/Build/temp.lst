
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000c37 	.word	0x00000c37
  10:	00000c39 	.word	0x00000c39
  14:	00000c3b 	.word	0x00000c3b
  18:	00000c3d 	.word	0x00000c3d
	...
  2c:	00000c3f 	.word	0x00000c3f
  30:	00000c41 	.word	0x00000c41
  34:	00000000 	.word	0x00000000
  38:	00000c43 	.word	0x00000c43
  3c:	00000c45 	.word	0x00000c45
  40:	00000c47 	.word	0x00000c47
  44:	00000c47 	.word	0x00000c47
  48:	00000c47 	.word	0x00000c47
  4c:	00000c47 	.word	0x00000c47
  50:	00000c47 	.word	0x00000c47
  54:	00000c47 	.word	0x00000c47
  58:	00000c47 	.word	0x00000c47
  5c:	00000c47 	.word	0x00000c47
  60:	00000c47 	.word	0x00000c47
  64:	00000c47 	.word	0x00000c47
  68:	00000c47 	.word	0x00000c47
  6c:	00000c47 	.word	0x00000c47
  70:	00000c47 	.word	0x00000c47
  74:	00000c47 	.word	0x00000c47
  78:	00000c47 	.word	0x00000c47
  7c:	00000c47 	.word	0x00000c47
  80:	00000c47 	.word	0x00000c47
  84:	00000c47 	.word	0x00000c47
  88:	00000c47 	.word	0x00000c47
  8c:	00000c47 	.word	0x00000c47
  90:	00000c47 	.word	0x00000c47
  94:	00000c47 	.word	0x00000c47
  98:	00000c47 	.word	0x00000c47
  9c:	00000c47 	.word	0x00000c47
  a0:	00000c47 	.word	0x00000c47
  a4:	00000c47 	.word	0x00000c47
  a8:	00000c47 	.word	0x00000c47
  ac:	00000c47 	.word	0x00000c47
  b0:	00000c47 	.word	0x00000c47
  b4:	00000c47 	.word	0x00000c47
  b8:	00000c47 	.word	0x00000c47
  bc:	00000c47 	.word	0x00000c47
  c0:	00000c47 	.word	0x00000c47
  c4:	00000c47 	.word	0x00000c47
  c8:	00000c47 	.word	0x00000c47
  cc:	00000c47 	.word	0x00000c47
  d0:	00000c47 	.word	0x00000c47
  d4:	00000c47 	.word	0x00000c47
  d8:	00000c47 	.word	0x00000c47
  dc:	00000c47 	.word	0x00000c47
  e0:	00000c47 	.word	0x00000c47
  e4:	00000c47 	.word	0x00000c47
  e8:	00000c47 	.word	0x00000c47
  ec:	00000c47 	.word	0x00000c47
  f0:	00000c47 	.word	0x00000c47
  f4:	00000c47 	.word	0x00000c47
  f8:	00000c47 	.word	0x00000c47
  fc:	00000c47 	.word	0x00000c47
 100:	00000c47 	.word	0x00000c47
 104:	00000c47 	.word	0x00000c47
 108:	00000c47 	.word	0x00000c47
 10c:	00000c47 	.word	0x00000c47
 110:	00000c47 	.word	0x00000c47
 114:	00000c47 	.word	0x00000c47
 118:	00000c47 	.word	0x00000c47
 11c:	00000c47 	.word	0x00000c47
 120:	00000c47 	.word	0x00000c47
 124:	00000c47 	.word	0x00000c47
 128:	00000c47 	.word	0x00000c47
 12c:	00000c47 	.word	0x00000c47
 130:	00000c47 	.word	0x00000c47
 134:	00000c47 	.word	0x00000c47
 138:	00000c47 	.word	0x00000c47
 13c:	00000c47 	.word	0x00000c47
 140:	00000c47 	.word	0x00000c47
 144:	00000c47 	.word	0x00000c47
 148:	00000c47 	.word	0x00000c47
 14c:	00000c47 	.word	0x00000c47
 150:	00000c47 	.word	0x00000c47
 154:	00000c47 	.word	0x00000c47
 158:	00000c47 	.word	0x00000c47
 15c:	00000c47 	.word	0x00000c47
 160:	00000c47 	.word	0x00000c47
 164:	00000c47 	.word	0x00000c47
 168:	00000c47 	.word	0x00000c47
 16c:	00000c47 	.word	0x00000c47
 170:	00000c47 	.word	0x00000c47
 174:	00000c47 	.word	0x00000c47
 178:	00000c47 	.word	0x00000c47
 17c:	00000c47 	.word	0x00000c47
 180:	00000c47 	.word	0x00000c47
 184:	00000c47 	.word	0x00000c47
 188:	00000c47 	.word	0x00000c47
 18c:	00000c47 	.word	0x00000c47
 190:	00000c47 	.word	0x00000c47
 194:	00000c47 	.word	0x00000c47
 198:	00000c47 	.word	0x00000c47
 19c:	00000c47 	.word	0x00000c47
 1a0:	00000c47 	.word	0x00000c47
 1a4:	00000c47 	.word	0x00000c47
 1a8:	00000c47 	.word	0x00000c47
 1ac:	00000c47 	.word	0x00000c47
 1b0:	00000c47 	.word	0x00000c47
 1b4:	00000c47 	.word	0x00000c47
 1b8:	00000c47 	.word	0x00000c47
 1bc:	00000c47 	.word	0x00000c47
 1c0:	00000c47 	.word	0x00000c47
 1c4:	00000c47 	.word	0x00000c47
 1c8:	00000c47 	.word	0x00000c47
 1cc:	00000c47 	.word	0x00000c47
 1d0:	00000c47 	.word	0x00000c47
 1d4:	00000c47 	.word	0x00000c47
 1d8:	00000c47 	.word	0x00000c47
 1dc:	00000c47 	.word	0x00000c47
 1e0:	00000c47 	.word	0x00000c47
 1e4:	00000c47 	.word	0x00000c47
 1e8:	00000c47 	.word	0x00000c47
 1ec:	00000c47 	.word	0x00000c47
 1f0:	00000c47 	.word	0x00000c47
 1f4:	00000c47 	.word	0x00000c47
 1f8:	00000c47 	.word	0x00000c47
 1fc:	00000c47 	.word	0x00000c47
 200:	00000c47 	.word	0x00000c47
 204:	00000c47 	.word	0x00000c47
 208:	00000c47 	.word	0x00000c47
 20c:	00000c47 	.word	0x00000c47
 210:	00000c47 	.word	0x00000c47
 214:	00000c47 	.word	0x00000c47
 218:	00000c47 	.word	0x00000c47
 21c:	00000c47 	.word	0x00000c47
 220:	00000c47 	.word	0x00000c47
 224:	00000c47 	.word	0x00000c47
 228:	00000c47 	.word	0x00000c47
 22c:	00000c47 	.word	0x00000c47
 230:	00000c47 	.word	0x00000c47
 234:	00000c47 	.word	0x00000c47
 238:	00000c47 	.word	0x00000c47
 23c:	00000c47 	.word	0x00000c47
 240:	00000c47 	.word	0x00000c47
 244:	00000c47 	.word	0x00000c47
 248:	00000c47 	.word	0x00000c47
 24c:	00000c47 	.word	0x00000c47
 250:	00000c47 	.word	0x00000c47
 254:	00000c47 	.word	0x00000c47
 258:	00000c47 	.word	0x00000c47
 25c:	00000c47 	.word	0x00000c47
 260:	00000c47 	.word	0x00000c47
 264:	00000c47 	.word	0x00000c47
 268:	00000c47 	.word	0x00000c47
 26c:	00000c47 	.word	0x00000c47
 270:	00000c47 	.word	0x00000c47
 274:	00000c47 	.word	0x00000c47
 278:	00000c47 	.word	0x00000c47
 27c:	00000c47 	.word	0x00000c47
 280:	00000c47 	.word	0x00000c47
 284:	00000c47 	.word	0x00000c47
 288:	00000c47 	.word	0x00000c47
 28c:	00000c47 	.word	0x00000c47
 290:	00000c47 	.word	0x00000c47
 294:	00000c47 	.word	0x00000c47
 298:	00000c47 	.word	0x00000c47
 29c:	00000c47 	.word	0x00000c47
 2a0:	00000c47 	.word	0x00000c47
 2a4:	00000c47 	.word	0x00000c47
 2a8:	00000c47 	.word	0x00000c47
 2ac:	00000c47 	.word	0x00000c47
 2b0:	00000c47 	.word	0x00000c47
 2b4:	00000c47 	.word	0x00000c47
 2b8:	00000c47 	.word	0x00000c47
 2bc:	00000c47 	.word	0x00000c47
 2c0:	00000c47 	.word	0x00000c47
 2c4:	00000c47 	.word	0x00000c47
 2c8:	00000c47 	.word	0x00000c47
 2cc:	00000c47 	.word	0x00000c47
 2d0:	00000c47 	.word	0x00000c47
 2d4:	00000c47 	.word	0x00000c47
 2d8:	00000c47 	.word	0x00000c47
 2dc:	00000c47 	.word	0x00000c47
 2e0:	00000c47 	.word	0x00000c47
 2e4:	00000c47 	.word	0x00000c47
 2e8:	00000c47 	.word	0x00000c47
 2ec:	00000c47 	.word	0x00000c47
 2f0:	00000c47 	.word	0x00000c47
 2f4:	00000c47 	.word	0x00000c47
 2f8:	00000c47 	.word	0x00000c47
 2fc:	00000c47 	.word	0x00000c47
 300:	00000c47 	.word	0x00000c47
 304:	00000c47 	.word	0x00000c47
 308:	00000c47 	.word	0x00000c47
 30c:	00000c47 	.word	0x00000c47

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fb0f 	bl	aa4 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fbce 	bl	c2c <startup_go_to_user_mode>
     490:	f000 fa59 	bl	946 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff9370 	.word	0x1fff9370

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fb19 	bl	bd0 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__BSS_SRAM_SIZE+0xdc>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__BSS_SRAM_SIZE+0xdc>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__BSS_SRAM_SIZE+0xe0>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__BSS_SRAM_SIZE+0xe0>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__BSS_SRAM_SIZE+0xd6>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0x114>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__BSS_SRAM_SIZE+0x54>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__BSS_SRAM_SIZE+0x10c>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__BSS_SRAM_SIZE+0x106>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__BSS_SRAM_SIZE+0x102>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__BSS_SRAM_SIZE+0x102>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__BSS_SRAM_SIZE+0x20>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__BSS_SRAM_SIZE+0xfa>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__BSS_SRAM_SIZE+0xfa>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__BSS_SRAM_SIZE+0xe8>
     7c4:	d056      	beq.n	874 <__BSS_SRAM_SIZE+0xe4>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0x118>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__BSS_SRAM_SIZE+0xa0>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__BSS_SRAM_SIZE+0xfe>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__BSS_SRAM_SIZE+0xfe>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__BSS_SRAM_SIZE+0xce>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__BSS_SRAM_SIZE+0xf6>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__BSS_SRAM_SIZE+0xf6>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__BSS_SRAM_SIZE+0x36>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__BSS_SRAM_SIZE+0x36>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__BSS_SRAM_SIZE+0xce>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__BSS_SRAM_SIZE+0x20>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__BSS_SRAM_SIZE+0xa0>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Gpt_TimeoutCallback_0>:
void EcuM_Init( void );

/*This function is gonna be called on ISR from FTM1_CH0, it is basically a callback
called by FTM_1_CH_0_ISR library function*/
void Gpt_TimeoutCallback_0( void )
{
     8b0:	b508      	push	{r3, lr}
    /*Here, we just continue the next 200ms timer*/
    Gpt_StartTimer( GptConf_GptChannelConfiguration_GptChannelConfiguration_1, 18750u );
     8b2:	f644 113e 	movw	r1, #18750	; 0x493e
     8b6:	2001      	movs	r0, #1
     8b8:	f006 ff8e 	bl	77d8 <Gpt_StartTimer>
    Gpt_EnableNotification( GptConf_GptChannelConfiguration_GptChannelConfiguration_1 );
     8bc:	2001      	movs	r0, #1
     8be:	f007 f887 	bl	79d0 <Gpt_EnableNotification>
}
     8c2:	bf00      	nop
     8c4:	bd08      	pop	{r3, pc}

000008c6 <Gpt_TimeoutCallback_1>:

/*This function is gonna be called on ISR from FTM1_CH1, it is basically a callback
called by FTM_1_CH_1_ISR library function*/
void Gpt_TimeoutCallback_1( void )
{
     8c6:	b508      	push	{r3, lr}
    /*Here, we just continue the next 200ms timer*/
    Gpt_StartTimer( GptConf_GptChannelConfiguration_GptChannelConfiguration_2, 18750u );
     8c8:	f644 113e 	movw	r1, #18750	; 0x493e
     8cc:	2002      	movs	r0, #2
     8ce:	f006 ff83 	bl	77d8 <Gpt_StartTimer>
    Gpt_EnableNotification( GptConf_GptChannelConfiguration_GptChannelConfiguration_2 );
     8d2:	2002      	movs	r0, #2
     8d4:	f007 f87c 	bl	79d0 <Gpt_EnableNotification>
}
     8d8:	bf00      	nop
     8da:	bd08      	pop	{r3, pc}

000008dc <Gpt_TimeoutCallback_2>:

/*This function is gonna be called on ISR from FTM1_CH2, it is basically a callback
called by FTM_1_CH_2_ISR library function*/
void Gpt_TimeoutCallback_2( void )
{
     8dc:	b508      	push	{r3, lr}
    /*Here, we just continue the next 200ms timer*/
    Gpt_StartTimer( GptConf_GptChannelConfiguration_GptChannelConfiguration_3, 18750u );
     8de:	f644 113e 	movw	r1, #18750	; 0x493e
     8e2:	2003      	movs	r0, #3
     8e4:	f006 ff78 	bl	77d8 <Gpt_StartTimer>
    Gpt_EnableNotification( GptConf_GptChannelConfiguration_GptChannelConfiguration_3 );
     8e8:	2003      	movs	r0, #3
     8ea:	f007 f871 	bl	79d0 <Gpt_EnableNotification>
}
     8ee:	bf00      	nop
     8f0:	bd08      	pop	{r3, pc}

000008f2 <Gpt_TimeoutCallback_3>:

/*This function is gonna be called on ISR from FTM1_CH3, it is basically a callback
called by FTM_1_CH_3_ISR library function*/
void Gpt_TimeoutCallback_3( void )
{
     8f2:	b508      	push	{r3, lr}
    /*Here, we just continue the next 200ms timer*/
    Gpt_StartTimer( GptConf_GptChannelConfiguration_GptChannelConfiguration_4, 18750u );
     8f4:	f644 113e 	movw	r1, #18750	; 0x493e
     8f8:	2004      	movs	r0, #4
     8fa:	f006 ff6d 	bl	77d8 <Gpt_StartTimer>
    Gpt_EnableNotification( GptConf_GptChannelConfiguration_GptChannelConfiguration_4 );
     8fe:	2004      	movs	r0, #4
     900:	f007 f866 	bl	79d0 <Gpt_EnableNotification>
}
     904:	bf00      	nop
     906:	bd08      	pop	{r3, pc}

00000908 <Gpt_TimeoutCallback_4>:

/*This function is gonna be called on ISR from FTM1_CH4, it is basically a callback
called by FTM_1_CH_4_ISR library function*/
void Gpt_TimeoutCallback_4( void )
{
     908:	b508      	push	{r3, lr}
    /*Here, we just continue the next 200ms timer*/
    Gpt_StartTimer( GptConf_GptChannelConfiguration_GptChannelConfiguration_5, 18750u );
     90a:	f644 113e 	movw	r1, #18750	; 0x493e
     90e:	2005      	movs	r0, #5
     910:	f006 ff62 	bl	77d8 <Gpt_StartTimer>
    Gpt_EnableNotification( GptConf_GptChannelConfiguration_GptChannelConfiguration_5 );
     914:	2005      	movs	r0, #5
     916:	f007 f85b 	bl	79d0 <Gpt_EnableNotification>
}
     91a:	bf00      	nop
     91c:	bd08      	pop	{r3, pc}

0000091e <Gpt_TimeoutCallback_5>:

/*This function is gonna be called on ISR from FTM1_CH5, it is basically a callback
called by FTM_1_CH_5_ISR library function*/
void Gpt_TimeoutCallback_5( void )
{
     91e:	b508      	push	{r3, lr}
    /*Here, we just continue the next 200ms timer*/
    Gpt_StartTimer( GptConf_GptChannelConfiguration_GptChannelConfiguration_6, 18750u );
     920:	f644 113e 	movw	r1, #18750	; 0x493e
     924:	2006      	movs	r0, #6
     926:	f006 ff57 	bl	77d8 <Gpt_StartTimer>
    Gpt_EnableNotification( GptConf_GptChannelConfiguration_GptChannelConfiguration_6 );
     92a:	2006      	movs	r0, #6
     92c:	f007 f850 	bl	79d0 <Gpt_EnableNotification>
}
     930:	bf00      	nop
     932:	bd08      	pop	{r3, pc}

00000934 <Gpt_TimeoutCallback_6>:

/*This function is gonna be called on ISR from FTM1_CH6, it is basically a callback
called by FTM_1_CH_6_ISR library function*/
void Gpt_TimeoutCallback_6( void )
{
     934:	b508      	push	{r3, lr}
    /*Here, we finally toggle led connected to C8*/
    Dio_FlipChannel( DioConf_DioChannel_C8_BIT0 );
     936:	2048      	movs	r0, #72	; 0x48
     938:	f005 fae3 	bl	5f02 <Dio_FlipChannel>
    Dio_FlipChannel( DioConf_DioChannel_D0_BLUE_LED );
     93c:	2060      	movs	r0, #96	; 0x60
     93e:	f005 fae0 	bl	5f02 <Dio_FlipChannel>
}
     942:	bf00      	nop
     944:	bd08      	pop	{r3, pc}

00000946 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     946:	b508      	push	{r3, lr}
    EcuM_Init();
     948:	f000 f80a 	bl	960 <EcuM_Init>

    /*Start the timer and set it to Running state with a timeout of 1.4s / 7 channels = 200ms*/
    /*  Tick frequency = ( 12MHz / 128 prescaler) = 93,750Hz
        Counter = ( 0.200s * 93750Hz )  = 18,750      
        FTM counter max value (MOD register) is 65,535, so it fits within the 16-bit counter range. */
    Gpt_StartTimer( GptConf_GptChannelConfiguration_GptChannelConfiguration_0, 18750u );
     94c:	f644 113e 	movw	r1, #18750	; 0x493e
     950:	2000      	movs	r0, #0
     952:	f006 ff41 	bl	77d8 <Gpt_StartTimer>
    
    /*Enable notifications, Gpt_TimeoutCallback will be called on each timeout*/
    Gpt_EnableNotification( GptConf_GptChannelConfiguration_GptChannelConfiguration_0 );
     956:	2000      	movs	r0, #0
     958:	f007 f83a 	bl	79d0 <Gpt_EnableNotification>

    while( 1u )
     95c:	e7fe      	b.n	95c <main+0x16>
	...

00000960 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     960:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     962:	480a      	ldr	r0, [pc, #40]	; (98c <EcuM_Init+0x2c>)
     964:	f004 f98c 	bl	4c80 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     968:	2000      	movs	r0, #0
     96a:	f004 f9dd 	bl	4d28 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     96e:	2000      	movs	r0, #0
     970:	f004 f9fe 	bl	4d70 <Mcu_SetMode>
    
    /*Enable and setup interrupts*/
    Platform_Init( NULL_PTR );
     974:	2000      	movs	r0, #0
     976:	f000 faeb 	bl	f50 <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration, for this case
    ports C8 and C9 are configured as output*/
    Port_Init( &Port_Config );
     97a:	4805      	ldr	r0, [pc, #20]	; (990 <EcuM_Init+0x30>)
     97c:	f004 fd82 	bl	5484 <Port_Init>
    /*Apply Gpt configuration for FTM1 channel 0 and FTM2 channel 0*/
    Gpt_Init( &Gpt_Config );
     980:	4804      	ldr	r0, [pc, #16]	; (994 <EcuM_Init+0x34>)
     982:	f006 fcdf 	bl	7344 <Gpt_Init>
}
     986:	bf00      	nop
     988:	bd08      	pop	{r3, pc}
     98a:	bf00      	nop
     98c:	0000c778 	.word	0x0000c778
     990:	0000c960 	.word	0x0000c960
     994:	0000c728 	.word	0x0000c728

00000998 <Gpt_Ipw_FtmGetTimeElapsed>:
#define GPT_START_SEC_CODE
#include "Gpt_MemMap.h"

#if (FTM_GPT_IP_USED == STD_ON)
static Gpt_ValueType Gpt_Ipw_FtmGetTimeElapsed(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig, Gpt_HwChannelInfoType * pReturnHwChannelInfo)
{
     998:	b500      	push	{lr}
     99a:	b087      	sub	sp, #28
     99c:	9001      	str	r0, [sp, #4]
     99e:	9100      	str	r1, [sp, #0]
    Gpt_ValueType returnValue;
    boolean HasChEvOccurred;

    /* Read compare and counter registers */
    uint32 counterValue = Ftm_Gpt_Ip_GetCntValue(pHwChannelConfig->instance);
     9a0:	9b01      	ldr	r3, [sp, #4]
     9a2:	791b      	ldrb	r3, [r3, #4]
     9a4:	4618      	mov	r0, r3
     9a6:	f007 fabf 	bl	7f28 <Ftm_Gpt_Ip_GetCntValue>
     9aa:	9004      	str	r0, [sp, #16]
    uint32 compareValue = Ftm_Gpt_Ip_GetCompareValue(pHwChannelConfig->instance, pHwChannelConfig->channel);
     9ac:	9b01      	ldr	r3, [sp, #4]
     9ae:	791a      	ldrb	r2, [r3, #4]
     9b0:	9b01      	ldr	r3, [sp, #4]
     9b2:	795b      	ldrb	r3, [r3, #5]
     9b4:	4619      	mov	r1, r3
     9b6:	4610      	mov	r0, r2
     9b8:	f007 fac6 	bl	7f48 <Ftm_Gpt_Ip_GetCompareValue>
     9bc:	9003      	str	r0, [sp, #12]

    pReturnHwChannelInfo->uTargetTime = Ftm_Gpt_Ip_u32TargetValue[pHwChannelConfig->instance][pHwChannelConfig->channel];
     9be:	9b01      	ldr	r3, [sp, #4]
     9c0:	791b      	ldrb	r3, [r3, #4]
     9c2:	4618      	mov	r0, r3
     9c4:	9b01      	ldr	r3, [sp, #4]
     9c6:	795b      	ldrb	r3, [r3, #5]
     9c8:	4619      	mov	r1, r3
     9ca:	4a23      	ldr	r2, [pc, #140]	; (a58 <Gpt_Ipw_FtmGetTimeElapsed+0xc0>)
     9cc:	00c3      	lsls	r3, r0, #3
     9ce:	440b      	add	r3, r1
     9d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     9d4:	9b00      	ldr	r3, [sp, #0]
     9d6:	605a      	str	r2, [r3, #4]

    /* Calculate the elapsed time */
    if (counterValue > compareValue)
     9d8:	9a04      	ldr	r2, [sp, #16]
     9da:	9b03      	ldr	r3, [sp, #12]
     9dc:	429a      	cmp	r2, r3
     9de:	d918      	bls.n	a12 <Gpt_Ipw_FtmGetTimeElapsed+0x7a>
    {
        /* Counter value passed the set-up Target value - might have roll-over */
        if(((FTM_CNT_MAX_VALUE_U32 - counterValue) + compareValue) <= pReturnHwChannelInfo->uTargetTime)
     9e0:	9a03      	ldr	r2, [sp, #12]
     9e2:	9b04      	ldr	r3, [sp, #16]
     9e4:	1ad3      	subs	r3, r2, r3
     9e6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
     9ea:	33ff      	adds	r3, #255	; 0xff
     9ec:	9a00      	ldr	r2, [sp, #0]
     9ee:	6852      	ldr	r2, [r2, #4]
     9f0:	4293      	cmp	r3, r2
     9f2:	d80a      	bhi.n	a0a <Gpt_Ipw_FtmGetTimeElapsed+0x72>
        {
            /* New compare value was read by register read - isr served in time - we have roll-over */
            returnValue =   (Gpt_ValueType)(    (   pReturnHwChannelInfo->uTargetTime - \
     9f4:	9b00      	ldr	r3, [sp, #0]
     9f6:	685a      	ldr	r2, [r3, #4]
                                                    ((FTM_CNT_MAX_VALUE_U32 - counterValue) + compareValue) ) + \
     9f8:	9904      	ldr	r1, [sp, #16]
     9fa:	9b03      	ldr	r3, [sp, #12]
     9fc:	1acb      	subs	r3, r1, r3
            returnValue =   (Gpt_ValueType)(    (   pReturnHwChannelInfo->uTargetTime - \
     9fe:	4413      	add	r3, r2
     a00:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
     a04:	3bfe      	subs	r3, #254	; 0xfe
     a06:	9305      	str	r3, [sp, #20]
     a08:	e00a      	b.n	a20 <Gpt_Ipw_FtmGetTimeElapsed+0x88>
                                                FTM_OVERFLOW_PAD_U32 );
        }
        else
        {
            /* There is an delay in serving ISR or updating u32CompareValue - report last timer time */
            returnValue = (Gpt_ValueType)(pReturnHwChannelInfo->uTargetTime);
     a0a:	9b00      	ldr	r3, [sp, #0]
     a0c:	685b      	ldr	r3, [r3, #4]
     a0e:	9305      	str	r3, [sp, #20]
     a10:	e006      	b.n	a20 <Gpt_Ipw_FtmGetTimeElapsed+0x88>
        }
    }
    else
    {
        /* Timer in between ISRs period */
        returnValue = (Gpt_ValueType)(pReturnHwChannelInfo->uTargetTime - (compareValue - counterValue));
     a12:	9b00      	ldr	r3, [sp, #0]
     a14:	685a      	ldr	r2, [r3, #4]
     a16:	9904      	ldr	r1, [sp, #16]
     a18:	9b03      	ldr	r3, [sp, #12]
     a1a:	1acb      	subs	r3, r1, r3
     a1c:	4413      	add	r3, r2
     a1e:	9305      	str	r3, [sp, #20]
    }

    /* check if channel event has occurred */
    HasChEvOccurred = Ftm_Gpt_Ip_GetChInterruptStatusFlag(pHwChannelConfig->instance, pHwChannelConfig->channel);
     a20:	9b01      	ldr	r3, [sp, #4]
     a22:	791a      	ldrb	r2, [r3, #4]
     a24:	9b01      	ldr	r3, [sp, #4]
     a26:	795b      	ldrb	r3, [r3, #5]
     a28:	4619      	mov	r1, r3
     a2a:	4610      	mov	r0, r2
     a2c:	f007 fa5c 	bl	7ee8 <Ftm_Gpt_Ip_GetChInterruptStatusFlag>
     a30:	4603      	mov	r3, r0
     a32:	f88d 300b 	strb.w	r3, [sp, #11]

    /*Check interrupt status flag*/
    if (HasChEvOccurred)
     a36:	f89d 300b 	ldrb.w	r3, [sp, #11]
     a3a:	2b00      	cmp	r3, #0
     a3c:	d003      	beq.n	a46 <Gpt_Ipw_FtmGetTimeElapsed+0xae>
    {
        /* Channel counter was roll-over */
        pReturnHwChannelInfo->bChannelRollover = TRUE;
     a3e:	9b00      	ldr	r3, [sp, #0]
     a40:	2201      	movs	r2, #1
     a42:	701a      	strb	r2, [r3, #0]
     a44:	e002      	b.n	a4c <Gpt_Ipw_FtmGetTimeElapsed+0xb4>
    }
    else
    {
        /* Channel counter was not rollover */
        pReturnHwChannelInfo->bChannelRollover = FALSE;
     a46:	9b00      	ldr	r3, [sp, #0]
     a48:	2200      	movs	r2, #0
     a4a:	701a      	strb	r2, [r3, #0]
    }
    return returnValue;
     a4c:	9b05      	ldr	r3, [sp, #20]
}
     a4e:	4618      	mov	r0, r3
     a50:	b007      	add	sp, #28
     a52:	f85d fb04 	ldr.w	pc, [sp], #4
     a56:	bf00      	nop
     a58:	1fff8da8 	.word	0x1fff8da8

00000a5c <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     a5c:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a5e:	f3ef 8310 	mrs	r3, PRIMASK
     a62:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a64:	4623      	mov	r3, r4
}
     a66:	4618      	mov	r0, r3
     a68:	f85d 4b04 	ldr.w	r4, [sp], #4
     a6c:	4770      	bx	lr

00000a6e <Gpt_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Gpt_schm_read_msr(void)
{
     a6e:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a70:	f3ef 8310 	mrs	r3, PRIMASK
     a74:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a76:	4623      	mov	r3, r4
}
     a78:	4618      	mov	r0, r3
     a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
     a7e:	4770      	bx	lr

00000a80 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     a80:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a82:	f3ef 8310 	mrs	r3, PRIMASK
     a86:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a88:	4623      	mov	r3, r4
}
     a8a:	4618      	mov	r0, r3
     a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
     a90:	4770      	bx	lr

00000a92 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     a92:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a94:	f3ef 8310 	mrs	r3, PRIMASK
     a98:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a9a:	4623      	mov	r3, r4
}
     a9c:	4618      	mov	r0, r3
     a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
     aa2:	4770      	bx	lr

00000aa4 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     aa4:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     aa6:	2300      	movs	r3, #0
     aa8:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     aaa:	2300      	movs	r3, #0
     aac:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     aae:	2300      	movs	r3, #0
     ab0:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     ab2:	2300      	movs	r3, #0
     ab4:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     ab6:	4b44      	ldr	r3, [pc, #272]	; (bc8 <init_data_bss+0x124>)
     ab8:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     aba:	4b44      	ldr	r3, [pc, #272]	; (bcc <init_data_bss+0x128>)
     abc:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     abe:	9b05      	ldr	r3, [sp, #20]
     ac0:	681b      	ldr	r3, [r3, #0]
     ac2:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     ac4:	9b05      	ldr	r3, [sp, #20]
     ac6:	3304      	adds	r3, #4
     ac8:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     aca:	9b05      	ldr	r3, [sp, #20]
     acc:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     ace:	2300      	movs	r3, #0
     ad0:	9309      	str	r3, [sp, #36]	; 0x24
     ad2:	e03d      	b.n	b50 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ad6:	4613      	mov	r3, r2
     ad8:	005b      	lsls	r3, r3, #1
     ada:	4413      	add	r3, r2
     adc:	009b      	lsls	r3, r3, #2
     ade:	461a      	mov	r2, r3
     ae0:	9b03      	ldr	r3, [sp, #12]
     ae2:	4413      	add	r3, r2
     ae4:	685b      	ldr	r3, [r3, #4]
     ae6:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     ae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     aea:	4613      	mov	r3, r2
     aec:	005b      	lsls	r3, r3, #1
     aee:	4413      	add	r3, r2
     af0:	009b      	lsls	r3, r3, #2
     af2:	461a      	mov	r2, r3
     af4:	9b03      	ldr	r3, [sp, #12]
     af6:	4413      	add	r3, r2
     af8:	681b      	ldr	r3, [r3, #0]
     afa:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     afc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     afe:	4613      	mov	r3, r2
     b00:	005b      	lsls	r3, r3, #1
     b02:	4413      	add	r3, r2
     b04:	009b      	lsls	r3, r3, #2
     b06:	461a      	mov	r2, r3
     b08:	9b03      	ldr	r3, [sp, #12]
     b0a:	4413      	add	r3, r2
     b0c:	689b      	ldr	r3, [r3, #8]
     b0e:	4619      	mov	r1, r3
     b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b12:	4613      	mov	r3, r2
     b14:	005b      	lsls	r3, r3, #1
     b16:	4413      	add	r3, r2
     b18:	009b      	lsls	r3, r3, #2
     b1a:	461a      	mov	r2, r3
     b1c:	9b03      	ldr	r3, [sp, #12]
     b1e:	4413      	add	r3, r2
     b20:	685b      	ldr	r3, [r3, #4]
     b22:	1acb      	subs	r3, r1, r3
     b24:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b26:	2300      	movs	r3, #0
     b28:	9308      	str	r3, [sp, #32]
     b2a:	e00a      	b.n	b42 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     b2c:	9a00      	ldr	r2, [sp, #0]
     b2e:	9b08      	ldr	r3, [sp, #32]
     b30:	441a      	add	r2, r3
     b32:	9901      	ldr	r1, [sp, #4]
     b34:	9b08      	ldr	r3, [sp, #32]
     b36:	440b      	add	r3, r1
     b38:	7812      	ldrb	r2, [r2, #0]
     b3a:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b3c:	9b08      	ldr	r3, [sp, #32]
     b3e:	3301      	adds	r3, #1
     b40:	9308      	str	r3, [sp, #32]
     b42:	9a08      	ldr	r2, [sp, #32]
     b44:	9b06      	ldr	r3, [sp, #24]
     b46:	429a      	cmp	r2, r3
     b48:	d3f0      	bcc.n	b2c <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b4c:	3301      	adds	r3, #1
     b4e:	9309      	str	r3, [sp, #36]	; 0x24
     b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b52:	9b07      	ldr	r3, [sp, #28]
     b54:	429a      	cmp	r2, r3
     b56:	d3bd      	bcc.n	ad4 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     b58:	9b04      	ldr	r3, [sp, #16]
     b5a:	681b      	ldr	r3, [r3, #0]
     b5c:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     b5e:	9b04      	ldr	r3, [sp, #16]
     b60:	3304      	adds	r3, #4
     b62:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     b64:	9b04      	ldr	r3, [sp, #16]
     b66:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     b68:	2300      	movs	r3, #0
     b6a:	9309      	str	r3, [sp, #36]	; 0x24
     b6c:	e024      	b.n	bb8 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b70:	00db      	lsls	r3, r3, #3
     b72:	9a02      	ldr	r2, [sp, #8]
     b74:	4413      	add	r3, r2
     b76:	681b      	ldr	r3, [r3, #0]
     b78:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b7c:	00db      	lsls	r3, r3, #3
     b7e:	9a02      	ldr	r2, [sp, #8]
     b80:	4413      	add	r3, r2
     b82:	685b      	ldr	r3, [r3, #4]
     b84:	4619      	mov	r1, r3
     b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b88:	00db      	lsls	r3, r3, #3
     b8a:	9a02      	ldr	r2, [sp, #8]
     b8c:	4413      	add	r3, r2
     b8e:	681b      	ldr	r3, [r3, #0]
     b90:	1acb      	subs	r3, r1, r3
     b92:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b94:	2300      	movs	r3, #0
     b96:	9308      	str	r3, [sp, #32]
     b98:	e007      	b.n	baa <init_data_bss+0x106>
        {
            ram[j] = 0U;
     b9a:	9a01      	ldr	r2, [sp, #4]
     b9c:	9b08      	ldr	r3, [sp, #32]
     b9e:	4413      	add	r3, r2
     ba0:	2200      	movs	r2, #0
     ba2:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     ba4:	9b08      	ldr	r3, [sp, #32]
     ba6:	3301      	adds	r3, #1
     ba8:	9308      	str	r3, [sp, #32]
     baa:	9a08      	ldr	r2, [sp, #32]
     bac:	9b06      	ldr	r3, [sp, #24]
     bae:	429a      	cmp	r2, r3
     bb0:	d3f3      	bcc.n	b9a <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     bb4:	3301      	adds	r3, #1
     bb6:	9309      	str	r3, [sp, #36]	; 0x24
     bb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     bba:	9b07      	ldr	r3, [sp, #28]
     bbc:	429a      	cmp	r2, r3
     bbe:	d3d6      	bcc.n	b6e <init_data_bss+0xca>
        }
    }
}
     bc0:	bf00      	nop
     bc2:	bf00      	nop
     bc4:	b00a      	add	sp, #40	; 0x28
     bc6:	4770      	bx	lr
     bc8:	0000c9ac 	.word	0x0000c9ac
     bcc:	0000c9c8 	.word	0x0000c9c8

00000bd0 <sys_m4_cache_init>:
{
     bd0:	b084      	sub	sp, #16
     bd2:	4603      	mov	r3, r0
     bd4:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     bd8:	2300      	movs	r3, #0
     bda:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     bde:	f89d 3007 	ldrb.w	r3, [sp, #7]
     be2:	2b00      	cmp	r3, #0
     be4:	d118      	bne.n	c18 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     be6:	4b10      	ldr	r3, [pc, #64]	; (c28 <sys_m4_cache_init+0x58>)
     be8:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     bec:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     bee:	4b0e      	ldr	r3, [pc, #56]	; (c28 <sys_m4_cache_init+0x58>)
     bf0:	681b      	ldr	r3, [r3, #0]
     bf2:	4a0d      	ldr	r2, [pc, #52]	; (c28 <sys_m4_cache_init+0x58>)
     bf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     bf8:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     bfa:	bf00      	nop
     bfc:	4b0a      	ldr	r3, [pc, #40]	; (c28 <sys_m4_cache_init+0x58>)
     bfe:	681b      	ldr	r3, [r3, #0]
     c00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     c04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     c08:	d0f8      	beq.n	bfc <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     c0a:	4b07      	ldr	r3, [pc, #28]	; (c28 <sys_m4_cache_init+0x58>)
     c0c:	681b      	ldr	r3, [r3, #0]
     c0e:	4a06      	ldr	r2, [pc, #24]	; (c28 <sys_m4_cache_init+0x58>)
     c10:	f043 0301 	orr.w	r3, r3, #1
     c14:	6013      	str	r3, [r2, #0]
     c16:	e002      	b.n	c1e <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     c18:	2301      	movs	r3, #1
     c1a:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     c1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     c22:	4618      	mov	r0, r3
     c24:	b004      	add	sp, #16
     c26:	4770      	bx	lr
     c28:	e0082000 	.word	0xe0082000

00000c2c <startup_go_to_user_mode>:
}
     c2c:	bf00      	nop
     c2e:	4770      	bx	lr

00000c30 <Sys_GetCoreID>:
    return 0U;
     c30:	2300      	movs	r3, #0
}
     c32:	4618      	mov	r0, r3
     c34:	4770      	bx	lr

00000c36 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     c36:	e7fe      	b.n	c36 <HardFault_Handler>

00000c38 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     c38:	e7fe      	b.n	c38 <MemManage_Handler>

00000c3a <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     c3a:	e7fe      	b.n	c3a <BusFault_Handler>

00000c3c <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     c3c:	e7fe      	b.n	c3c <UsageFault_Handler>

00000c3e <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     c3e:	e7fe      	b.n	c3e <SVC_Handler>

00000c40 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     c40:	e7fe      	b.n	c40 <DebugMon_Handler>

00000c42 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     c42:	e7fe      	b.n	c42 <PendSV_Handler>

00000c44 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     c44:	e7fe      	b.n	c44 <SysTick_Handler>

00000c46 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     c46:	e7fe      	b.n	c46 <undefined_handler>

00000c48 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     c48:	b086      	sub	sp, #24
     c4a:	9003      	str	r0, [sp, #12]
     c4c:	9102      	str	r1, [sp, #8]
     c4e:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
     c50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     c54:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
     c58:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
     c5a:	9b01      	ldr	r3, [sp, #4]
     c5c:	2b00      	cmp	r3, #0
     c5e:	d007      	beq.n	c70 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
     c60:	9b03      	ldr	r3, [sp, #12]
     c62:	3310      	adds	r3, #16
     c64:	009b      	lsls	r3, r3, #2
     c66:	9a05      	ldr	r2, [sp, #20]
     c68:	4413      	add	r3, r2
     c6a:	681a      	ldr	r2, [r3, #0]
     c6c:	9b01      	ldr	r3, [sp, #4]
     c6e:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
     c70:	9b03      	ldr	r3, [sp, #12]
     c72:	3310      	adds	r3, #16
     c74:	009b      	lsls	r3, r3, #2
     c76:	9a05      	ldr	r2, [sp, #20]
     c78:	4413      	add	r3, r2
     c7a:	9a02      	ldr	r2, [sp, #8]
     c7c:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
     c7e:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
     c82:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
     c86:	bf00      	nop
     c88:	b006      	add	sp, #24
     c8a:	4770      	bx	lr

00000c8c <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
     c8c:	b082      	sub	sp, #8
     c8e:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     c90:	9b01      	ldr	r3, [sp, #4]
     c92:	f003 021f 	and.w	r2, r3, #31
     c96:	4905      	ldr	r1, [pc, #20]	; (cac <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
     c98:	9b01      	ldr	r3, [sp, #4]
     c9a:	095b      	lsrs	r3, r3, #5
     c9c:	2001      	movs	r0, #1
     c9e:	fa00 f202 	lsl.w	r2, r0, r2
     ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
     ca6:	bf00      	nop
     ca8:	b002      	add	sp, #8
     caa:	4770      	bx	lr
     cac:	e000e100 	.word	0xe000e100

00000cb0 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
     cb0:	b082      	sub	sp, #8
     cb2:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     cb4:	9b01      	ldr	r3, [sp, #4]
     cb6:	f003 021f 	and.w	r2, r3, #31
     cba:	4906      	ldr	r1, [pc, #24]	; (cd4 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
     cbc:	9b01      	ldr	r3, [sp, #4]
     cbe:	095b      	lsrs	r3, r3, #5
     cc0:	2001      	movs	r0, #1
     cc2:	fa00 f202 	lsl.w	r2, r0, r2
     cc6:	3320      	adds	r3, #32
     cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
     ccc:	bf00      	nop
     cce:	b002      	add	sp, #8
     cd0:	4770      	bx	lr
     cd2:	bf00      	nop
     cd4:	e000e100 	.word	0xe000e100

00000cd8 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     cd8:	b084      	sub	sp, #16
     cda:	9001      	str	r0, [sp, #4]
     cdc:	460b      	mov	r3, r1
     cde:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
     ce2:	2304      	movs	r3, #4
     ce4:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
     ce8:	f89d 2003 	ldrb.w	r2, [sp, #3]
     cec:	f89d 300f 	ldrb.w	r3, [sp, #15]
     cf0:	fa02 f103 	lsl.w	r1, r2, r3
     cf4:	4a04      	ldr	r2, [pc, #16]	; (d08 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
     cf6:	9b01      	ldr	r3, [sp, #4]
     cf8:	b2c9      	uxtb	r1, r1
     cfa:	4413      	add	r3, r2
     cfc:	460a      	mov	r2, r1
     cfe:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
     d02:	bf00      	nop
     d04:	b004      	add	sp, #16
     d06:	4770      	bx	lr
     d08:	e000e100 	.word	0xe000e100

00000d0c <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
     d0c:	b084      	sub	sp, #16
     d0e:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
     d10:	2304      	movs	r3, #4
     d12:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
     d16:	4a09      	ldr	r2, [pc, #36]	; (d3c <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
     d18:	9b01      	ldr	r3, [sp, #4]
     d1a:	4413      	add	r3, r2
     d1c:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
     d20:	b2db      	uxtb	r3, r3
     d22:	461a      	mov	r2, r3
     d24:	f89d 300f 	ldrb.w	r3, [sp, #15]
     d28:	fa42 f303 	asr.w	r3, r2, r3
     d2c:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
     d30:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     d34:	4618      	mov	r0, r3
     d36:	b004      	add	sp, #16
     d38:	4770      	bx	lr
     d3a:	bf00      	nop
     d3c:	e000e100 	.word	0xe000e100

00000d40 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
     d40:	b082      	sub	sp, #8
     d42:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     d44:	9b01      	ldr	r3, [sp, #4]
     d46:	f003 021f 	and.w	r2, r3, #31
     d4a:	4906      	ldr	r1, [pc, #24]	; (d64 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
     d4c:	9b01      	ldr	r3, [sp, #4]
     d4e:	095b      	lsrs	r3, r3, #5
     d50:	2001      	movs	r0, #1
     d52:	fa00 f202 	lsl.w	r2, r0, r2
     d56:	3360      	adds	r3, #96	; 0x60
     d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
     d5c:	bf00      	nop
     d5e:	b002      	add	sp, #8
     d60:	4770      	bx	lr
     d62:	bf00      	nop
     d64:	e000e100 	.word	0xe000e100

00000d68 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
     d68:	b500      	push	{lr}
     d6a:	b085      	sub	sp, #20
     d6c:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     d6e:	2300      	movs	r3, #0
     d70:	9303      	str	r3, [sp, #12]
     d72:	e05d      	b.n	e30 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     d74:	9b01      	ldr	r3, [sp, #4]
     d76:	6859      	ldr	r1, [r3, #4]
     d78:	9a03      	ldr	r2, [sp, #12]
     d7a:	4613      	mov	r3, r2
     d7c:	005b      	lsls	r3, r3, #1
     d7e:	4413      	add	r3, r2
     d80:	009b      	lsls	r3, r3, #2
     d82:	440b      	add	r3, r1
     d84:	681b      	ldr	r3, [r3, #0]
     d86:	4618      	mov	r0, r3
     d88:	f000 f899 	bl	ebe <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d8c:	9b01      	ldr	r3, [sp, #4]
     d8e:	6859      	ldr	r1, [r3, #4]
     d90:	9a03      	ldr	r2, [sp, #12]
     d92:	4613      	mov	r3, r2
     d94:	005b      	lsls	r3, r3, #1
     d96:	4413      	add	r3, r2
     d98:	009b      	lsls	r3, r3, #2
     d9a:	440b      	add	r3, r1
     d9c:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
     d9e:	9b01      	ldr	r3, [sp, #4]
     da0:	6859      	ldr	r1, [r3, #4]
     da2:	9a03      	ldr	r2, [sp, #12]
     da4:	4613      	mov	r3, r2
     da6:	005b      	lsls	r3, r3, #1
     da8:	4413      	add	r3, r2
     daa:	009b      	lsls	r3, r3, #2
     dac:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     dae:	795b      	ldrb	r3, [r3, #5]
     db0:	4619      	mov	r1, r3
     db2:	f000 f869 	bl	e88 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     db6:	9b01      	ldr	r3, [sp, #4]
     db8:	6859      	ldr	r1, [r3, #4]
     dba:	9a03      	ldr	r2, [sp, #12]
     dbc:	4613      	mov	r3, r2
     dbe:	005b      	lsls	r3, r3, #1
     dc0:	4413      	add	r3, r2
     dc2:	009b      	lsls	r3, r3, #2
     dc4:	440b      	add	r3, r1
     dc6:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
     dc8:	9b01      	ldr	r3, [sp, #4]
     dca:	6859      	ldr	r1, [r3, #4]
     dcc:	9a03      	ldr	r2, [sp, #12]
     dce:	4613      	mov	r3, r2
     dd0:	005b      	lsls	r3, r3, #1
     dd2:	4413      	add	r3, r2
     dd4:	009b      	lsls	r3, r3, #2
     dd6:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     dd8:	689b      	ldr	r3, [r3, #8]
     dda:	2200      	movs	r2, #0
     ddc:	4619      	mov	r1, r3
     dde:	f000 f831 	bl	e44 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
     de2:	9b01      	ldr	r3, [sp, #4]
     de4:	6859      	ldr	r1, [r3, #4]
     de6:	9a03      	ldr	r2, [sp, #12]
     de8:	4613      	mov	r3, r2
     dea:	005b      	lsls	r3, r3, #1
     dec:	4413      	add	r3, r2
     dee:	009b      	lsls	r3, r3, #2
     df0:	440b      	add	r3, r1
     df2:	791b      	ldrb	r3, [r3, #4]
     df4:	2b00      	cmp	r3, #0
     df6:	d00c      	beq.n	e12 <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     df8:	9b01      	ldr	r3, [sp, #4]
     dfa:	6859      	ldr	r1, [r3, #4]
     dfc:	9a03      	ldr	r2, [sp, #12]
     dfe:	4613      	mov	r3, r2
     e00:	005b      	lsls	r3, r3, #1
     e02:	4413      	add	r3, r2
     e04:	009b      	lsls	r3, r3, #2
     e06:	440b      	add	r3, r1
     e08:	681b      	ldr	r3, [r3, #0]
     e0a:	4618      	mov	r0, r3
     e0c:	f000 f828 	bl	e60 <IntCtrl_Ip_EnableIrq>
     e10:	e00b      	b.n	e2a <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     e12:	9b01      	ldr	r3, [sp, #4]
     e14:	6859      	ldr	r1, [r3, #4]
     e16:	9a03      	ldr	r2, [sp, #12]
     e18:	4613      	mov	r3, r2
     e1a:	005b      	lsls	r3, r3, #1
     e1c:	4413      	add	r3, r2
     e1e:	009b      	lsls	r3, r3, #2
     e20:	440b      	add	r3, r1
     e22:	681b      	ldr	r3, [r3, #0]
     e24:	4618      	mov	r0, r3
     e26:	f000 f825 	bl	e74 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     e2a:	9b03      	ldr	r3, [sp, #12]
     e2c:	3301      	adds	r3, #1
     e2e:	9303      	str	r3, [sp, #12]
     e30:	9b01      	ldr	r3, [sp, #4]
     e32:	681b      	ldr	r3, [r3, #0]
     e34:	9a03      	ldr	r2, [sp, #12]
     e36:	429a      	cmp	r2, r3
     e38:	d39c      	bcc.n	d74 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
     e3a:	2300      	movs	r3, #0
}
     e3c:	4618      	mov	r0, r3
     e3e:	b005      	add	sp, #20
     e40:	f85d fb04 	ldr.w	pc, [sp], #4

00000e44 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     e44:	b500      	push	{lr}
     e46:	b085      	sub	sp, #20
     e48:	9003      	str	r0, [sp, #12]
     e4a:	9102      	str	r1, [sp, #8]
     e4c:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
     e4e:	9a01      	ldr	r2, [sp, #4]
     e50:	9902      	ldr	r1, [sp, #8]
     e52:	9803      	ldr	r0, [sp, #12]
     e54:	f7ff fef8 	bl	c48 <IntCtrl_Ip_InstallHandlerPrivileged>
}
     e58:	bf00      	nop
     e5a:	b005      	add	sp, #20
     e5c:	f85d fb04 	ldr.w	pc, [sp], #4

00000e60 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
     e60:	b500      	push	{lr}
     e62:	b083      	sub	sp, #12
     e64:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
     e66:	9801      	ldr	r0, [sp, #4]
     e68:	f7ff ff10 	bl	c8c <IntCtrl_Ip_EnableIrqPrivileged>
}
     e6c:	bf00      	nop
     e6e:	b003      	add	sp, #12
     e70:	f85d fb04 	ldr.w	pc, [sp], #4

00000e74 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
     e74:	b500      	push	{lr}
     e76:	b083      	sub	sp, #12
     e78:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
     e7a:	9801      	ldr	r0, [sp, #4]
     e7c:	f7ff ff18 	bl	cb0 <IntCtrl_Ip_DisableIrqPrivileged>
}
     e80:	bf00      	nop
     e82:	b003      	add	sp, #12
     e84:	f85d fb04 	ldr.w	pc, [sp], #4

00000e88 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     e88:	b500      	push	{lr}
     e8a:	b083      	sub	sp, #12
     e8c:	9001      	str	r0, [sp, #4]
     e8e:	460b      	mov	r3, r1
     e90:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
     e94:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e98:	4619      	mov	r1, r3
     e9a:	9801      	ldr	r0, [sp, #4]
     e9c:	f7ff ff1c 	bl	cd8 <IntCtrl_Ip_SetPriorityPrivileged>
}
     ea0:	bf00      	nop
     ea2:	b003      	add	sp, #12
     ea4:	f85d fb04 	ldr.w	pc, [sp], #4

00000ea8 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
     ea8:	b500      	push	{lr}
     eaa:	b083      	sub	sp, #12
     eac:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
     eae:	9801      	ldr	r0, [sp, #4]
     eb0:	f7ff ff2c 	bl	d0c <IntCtrl_Ip_GetPriorityPrivileged>
     eb4:	4603      	mov	r3, r0
}
     eb6:	4618      	mov	r0, r3
     eb8:	b003      	add	sp, #12
     eba:	f85d fb04 	ldr.w	pc, [sp], #4

00000ebe <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
     ebe:	b500      	push	{lr}
     ec0:	b083      	sub	sp, #12
     ec2:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
     ec4:	9801      	ldr	r0, [sp, #4]
     ec6:	f7ff ff3b 	bl	d40 <IntCtrl_Ip_ClearPendingPrivileged>
}
     eca:	bf00      	nop
     ecc:	b003      	add	sp, #12
     ece:	f85d fb04 	ldr.w	pc, [sp], #4
     ed2:	bf00      	nop

00000ed4 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
     ed4:	b500      	push	{lr}
     ed6:	b083      	sub	sp, #12
     ed8:	9001      	str	r0, [sp, #4]
     eda:	460b      	mov	r3, r1
     edc:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
     ee0:	f89d 3003 	ldrb.w	r3, [sp, #3]
     ee4:	2b00      	cmp	r3, #0
     ee6:	d003      	beq.n	ef0 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
     ee8:	9801      	ldr	r0, [sp, #4]
     eea:	f7ff ffb9 	bl	e60 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
     eee:	e002      	b.n	ef6 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
     ef0:	9801      	ldr	r0, [sp, #4]
     ef2:	f7ff ffbf 	bl	e74 <IntCtrl_Ip_DisableIrq>
}
     ef6:	bf00      	nop
     ef8:	b003      	add	sp, #12
     efa:	f85d fb04 	ldr.w	pc, [sp], #4

00000efe <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     efe:	b500      	push	{lr}
     f00:	b083      	sub	sp, #12
     f02:	9001      	str	r0, [sp, #4]
     f04:	460b      	mov	r3, r1
     f06:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
     f0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f0e:	4619      	mov	r1, r3
     f10:	9801      	ldr	r0, [sp, #4]
     f12:	f7ff ffb9 	bl	e88 <IntCtrl_Ip_SetPriority>
}
     f16:	bf00      	nop
     f18:	b003      	add	sp, #12
     f1a:	f85d fb04 	ldr.w	pc, [sp], #4

00000f1e <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
     f1e:	b500      	push	{lr}
     f20:	b083      	sub	sp, #12
     f22:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
     f24:	9801      	ldr	r0, [sp, #4]
     f26:	f7ff ffbf 	bl	ea8 <IntCtrl_Ip_GetPriority>
     f2a:	4603      	mov	r3, r0
}
     f2c:	4618      	mov	r0, r3
     f2e:	b003      	add	sp, #12
     f30:	f85d fb04 	ldr.w	pc, [sp], #4

00000f34 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     f34:	b500      	push	{lr}
     f36:	b085      	sub	sp, #20
     f38:	9003      	str	r0, [sp, #12]
     f3a:	9102      	str	r1, [sp, #8]
     f3c:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
     f3e:	9a01      	ldr	r2, [sp, #4]
     f40:	9902      	ldr	r1, [sp, #8]
     f42:	9803      	ldr	r0, [sp, #12]
     f44:	f7ff ff7e 	bl	e44 <IntCtrl_Ip_InstallHandler>
}
     f48:	bf00      	nop
     f4a:	b005      	add	sp, #20
     f4c:	f85d fb04 	ldr.w	pc, [sp], #4

00000f50 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
     f50:	b500      	push	{lr}
     f52:	b085      	sub	sp, #20
     f54:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
     f56:	2300      	movs	r3, #0
     f58:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
     f5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
     f60:	4a05      	ldr	r2, [pc, #20]	; (f78 <Platform_Init+0x28>)
     f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     f66:	681b      	ldr	r3, [r3, #0]
     f68:	4618      	mov	r0, r3
     f6a:	f000 f8c7 	bl	10fc <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
     f6e:	bf00      	nop
     f70:	b005      	add	sp, #20
     f72:	f85d fb04 	ldr.w	pc, [sp], #4
     f76:	bf00      	nop
     f78:	0000c7a4 	.word	0x0000c7a4

00000f7c <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
     f7c:	b500      	push	{lr}
     f7e:	b085      	sub	sp, #20
     f80:	9001      	str	r0, [sp, #4]
     f82:	460b      	mov	r3, r1
     f84:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f88:	2300      	movs	r3, #0
     f8a:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
     f8e:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f92:	4619      	mov	r1, r3
     f94:	9801      	ldr	r0, [sp, #4]
     f96:	f7ff ff9d 	bl	ed4 <Platform_Ipw_SetIrq>
    }
    return RetValue;
     f9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f9e:	4618      	mov	r0, r3
     fa0:	b005      	add	sp, #20
     fa2:	f85d fb04 	ldr.w	pc, [sp], #4

00000fa6 <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     fa6:	b500      	push	{lr}
     fa8:	b085      	sub	sp, #20
     faa:	9001      	str	r0, [sp, #4]
     fac:	460b      	mov	r3, r1
     fae:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     fb2:	2300      	movs	r3, #0
     fb4:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
     fb8:	f89d 3003 	ldrb.w	r3, [sp, #3]
     fbc:	4619      	mov	r1, r3
     fbe:	9801      	ldr	r0, [sp, #4]
     fc0:	f7ff ff9d 	bl	efe <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
     fc4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     fc8:	4618      	mov	r0, r3
     fca:	b005      	add	sp, #20
     fcc:	f85d fb04 	ldr.w	pc, [sp], #4

00000fd0 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
     fd0:	b500      	push	{lr}
     fd2:	b085      	sub	sp, #20
     fd4:	9001      	str	r0, [sp, #4]
     fd6:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     fd8:	2300      	movs	r3, #0
     fda:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
     fde:	9801      	ldr	r0, [sp, #4]
     fe0:	f7ff ff9d 	bl	f1e <Platform_Ipw_GetIrqPriority>
     fe4:	4603      	mov	r3, r0
     fe6:	461a      	mov	r2, r3
     fe8:	9b00      	ldr	r3, [sp, #0]
     fea:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
     fec:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     ff0:	4618      	mov	r0, r3
     ff2:	b005      	add	sp, #20
     ff4:	f85d fb04 	ldr.w	pc, [sp], #4

00000ff8 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
     ff8:	b500      	push	{lr}
     ffa:	b087      	sub	sp, #28
     ffc:	9003      	str	r0, [sp, #12]
     ffe:	9102      	str	r1, [sp, #8]
    1000:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1002:	2300      	movs	r3, #0
    1004:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1008:	9a01      	ldr	r2, [sp, #4]
    100a:	9902      	ldr	r1, [sp, #8]
    100c:	9803      	ldr	r0, [sp, #12]
    100e:	f7ff ff91 	bl	f34 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    1012:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1016:	4618      	mov	r0, r3
    1018:	b007      	add	sp, #28
    101a:	f85d fb04 	ldr.w	pc, [sp], #4
    101e:	bf00      	nop

00001020 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1020:	b500      	push	{lr}
    1022:	b085      	sub	sp, #20
    1024:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1026:	2300      	movs	r3, #0
    1028:	9303      	str	r3, [sp, #12]
    102a:	e05d      	b.n	10e8 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    102c:	9b01      	ldr	r3, [sp, #4]
    102e:	6859      	ldr	r1, [r3, #4]
    1030:	9a03      	ldr	r2, [sp, #12]
    1032:	4613      	mov	r3, r2
    1034:	005b      	lsls	r3, r3, #1
    1036:	4413      	add	r3, r2
    1038:	009b      	lsls	r3, r3, #2
    103a:	440b      	add	r3, r1
    103c:	681b      	ldr	r3, [r3, #0]
    103e:	4618      	mov	r0, r3
    1040:	f7ff ff3d 	bl	ebe <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1044:	9b01      	ldr	r3, [sp, #4]
    1046:	6859      	ldr	r1, [r3, #4]
    1048:	9a03      	ldr	r2, [sp, #12]
    104a:	4613      	mov	r3, r2
    104c:	005b      	lsls	r3, r3, #1
    104e:	4413      	add	r3, r2
    1050:	009b      	lsls	r3, r3, #2
    1052:	440b      	add	r3, r1
    1054:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1056:	9b01      	ldr	r3, [sp, #4]
    1058:	6859      	ldr	r1, [r3, #4]
    105a:	9a03      	ldr	r2, [sp, #12]
    105c:	4613      	mov	r3, r2
    105e:	005b      	lsls	r3, r3, #1
    1060:	4413      	add	r3, r2
    1062:	009b      	lsls	r3, r3, #2
    1064:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1066:	795b      	ldrb	r3, [r3, #5]
    1068:	4619      	mov	r1, r3
    106a:	f7ff ff0d 	bl	e88 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    106e:	9b01      	ldr	r3, [sp, #4]
    1070:	6859      	ldr	r1, [r3, #4]
    1072:	9a03      	ldr	r2, [sp, #12]
    1074:	4613      	mov	r3, r2
    1076:	005b      	lsls	r3, r3, #1
    1078:	4413      	add	r3, r2
    107a:	009b      	lsls	r3, r3, #2
    107c:	440b      	add	r3, r1
    107e:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1080:	9b01      	ldr	r3, [sp, #4]
    1082:	6859      	ldr	r1, [r3, #4]
    1084:	9a03      	ldr	r2, [sp, #12]
    1086:	4613      	mov	r3, r2
    1088:	005b      	lsls	r3, r3, #1
    108a:	4413      	add	r3, r2
    108c:	009b      	lsls	r3, r3, #2
    108e:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1090:	689b      	ldr	r3, [r3, #8]
    1092:	2200      	movs	r2, #0
    1094:	4619      	mov	r1, r3
    1096:	f7ff fed5 	bl	e44 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    109a:	9b01      	ldr	r3, [sp, #4]
    109c:	6859      	ldr	r1, [r3, #4]
    109e:	9a03      	ldr	r2, [sp, #12]
    10a0:	4613      	mov	r3, r2
    10a2:	005b      	lsls	r3, r3, #1
    10a4:	4413      	add	r3, r2
    10a6:	009b      	lsls	r3, r3, #2
    10a8:	440b      	add	r3, r1
    10aa:	791b      	ldrb	r3, [r3, #4]
    10ac:	2b00      	cmp	r3, #0
    10ae:	d00c      	beq.n	10ca <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    10b0:	9b01      	ldr	r3, [sp, #4]
    10b2:	6859      	ldr	r1, [r3, #4]
    10b4:	9a03      	ldr	r2, [sp, #12]
    10b6:	4613      	mov	r3, r2
    10b8:	005b      	lsls	r3, r3, #1
    10ba:	4413      	add	r3, r2
    10bc:	009b      	lsls	r3, r3, #2
    10be:	440b      	add	r3, r1
    10c0:	681b      	ldr	r3, [r3, #0]
    10c2:	4618      	mov	r0, r3
    10c4:	f7ff fecc 	bl	e60 <IntCtrl_Ip_EnableIrq>
    10c8:	e00b      	b.n	10e2 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    10ca:	9b01      	ldr	r3, [sp, #4]
    10cc:	6859      	ldr	r1, [r3, #4]
    10ce:	9a03      	ldr	r2, [sp, #12]
    10d0:	4613      	mov	r3, r2
    10d2:	005b      	lsls	r3, r3, #1
    10d4:	4413      	add	r3, r2
    10d6:	009b      	lsls	r3, r3, #2
    10d8:	440b      	add	r3, r1
    10da:	681b      	ldr	r3, [r3, #0]
    10dc:	4618      	mov	r0, r3
    10de:	f7ff fec9 	bl	e74 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    10e2:	9b03      	ldr	r3, [sp, #12]
    10e4:	3301      	adds	r3, #1
    10e6:	9303      	str	r3, [sp, #12]
    10e8:	9b01      	ldr	r3, [sp, #4]
    10ea:	681b      	ldr	r3, [r3, #0]
    10ec:	9a03      	ldr	r2, [sp, #12]
    10ee:	429a      	cmp	r2, r3
    10f0:	d39c      	bcc.n	102c <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    10f2:	2300      	movs	r3, #0
}
    10f4:	4618      	mov	r0, r3
    10f6:	b005      	add	sp, #20
    10f8:	f85d fb04 	ldr.w	pc, [sp], #4

000010fc <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    10fc:	b500      	push	{lr}
    10fe:	b085      	sub	sp, #20
    1100:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1102:	2300      	movs	r3, #0
    1104:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1108:	9b01      	ldr	r3, [sp, #4]
    110a:	681b      	ldr	r3, [r3, #0]
    110c:	2b00      	cmp	r3, #0
    110e:	d007      	beq.n	1120 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1110:	9b01      	ldr	r3, [sp, #4]
    1112:	681b      	ldr	r3, [r3, #0]
    1114:	4618      	mov	r0, r3
    1116:	f7ff ff83 	bl	1020 <Platform_Ipw_InitIntCtrl>
    111a:	4603      	mov	r3, r0
    111c:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1120:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1124:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1126:	bf00      	nop
    1128:	b005      	add	sp, #20
    112a:	f85d fb04 	ldr.w	pc, [sp], #4

0000112e <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    112e:	2300      	movs	r3, #0
}
    1130:	4618      	mov	r0, r3
    1132:	4770      	bx	lr

00001134 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1134:	b082      	sub	sp, #8
    1136:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1138:	2301      	movs	r3, #1
}
    113a:	4618      	mov	r0, r3
    113c:	b002      	add	sp, #8
    113e:	4770      	bx	lr

00001140 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1140:	b082      	sub	sp, #8
    1142:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1144:	bf00      	nop
    1146:	b002      	add	sp, #8
    1148:	4770      	bx	lr

0000114a <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    114a:	b082      	sub	sp, #8
    114c:	9001      	str	r0, [sp, #4]
    return Micros;
    114e:	9b01      	ldr	r3, [sp, #4]
}
    1150:	4618      	mov	r0, r3
    1152:	b002      	add	sp, #8
    1154:	4770      	bx	lr

00001156 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1156:	b500      	push	{lr}
    1158:	b083      	sub	sp, #12
    115a:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    115c:	f000 f86c 	bl	1238 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1160:	bf00      	nop
    1162:	b003      	add	sp, #12
    1164:	f85d fb04 	ldr.w	pc, [sp], #4

00001168 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1168:	b500      	push	{lr}
    116a:	b085      	sub	sp, #20
    116c:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    116e:	2300      	movs	r3, #0
    1170:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1172:	9b01      	ldr	r3, [sp, #4]
    1174:	2b00      	cmp	r3, #0
    1176:	d003      	beq.n	1180 <OsIf_GetCounter+0x18>
    1178:	9b01      	ldr	r3, [sp, #4]
    117a:	2b01      	cmp	r3, #1
    117c:	d004      	beq.n	1188 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    117e:	e007      	b.n	1190 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1180:	f7ff ffd5 	bl	112e <OsIf_Timer_Dummy_GetCounter>
    1184:	9003      	str	r0, [sp, #12]
            break;
    1186:	e003      	b.n	1190 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1188:	f000 f872 	bl	1270 <OsIf_Timer_System_GetCounter>
    118c:	9003      	str	r0, [sp, #12]
            break;
    118e:	bf00      	nop
    }

    return Value;
    1190:	9b03      	ldr	r3, [sp, #12]
}
    1192:	4618      	mov	r0, r3
    1194:	b005      	add	sp, #20
    1196:	f85d fb04 	ldr.w	pc, [sp], #4

0000119a <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    119a:	b500      	push	{lr}
    119c:	b085      	sub	sp, #20
    119e:	9001      	str	r0, [sp, #4]
    11a0:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    11a2:	2300      	movs	r3, #0
    11a4:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    11a6:	9b00      	ldr	r3, [sp, #0]
    11a8:	2b00      	cmp	r3, #0
    11aa:	d003      	beq.n	11b4 <OsIf_GetElapsed+0x1a>
    11ac:	9b00      	ldr	r3, [sp, #0]
    11ae:	2b01      	cmp	r3, #1
    11b0:	d005      	beq.n	11be <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    11b2:	e009      	b.n	11c8 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    11b4:	9801      	ldr	r0, [sp, #4]
    11b6:	f7ff ffbd 	bl	1134 <OsIf_Timer_Dummy_GetElapsed>
    11ba:	9003      	str	r0, [sp, #12]
            break;
    11bc:	e004      	b.n	11c8 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    11be:	9801      	ldr	r0, [sp, #4]
    11c0:	f000 f864 	bl	128c <OsIf_Timer_System_GetElapsed>
    11c4:	9003      	str	r0, [sp, #12]
            break;
    11c6:	bf00      	nop
    }

    return Value;
    11c8:	9b03      	ldr	r3, [sp, #12]
}
    11ca:	4618      	mov	r0, r3
    11cc:	b005      	add	sp, #20
    11ce:	f85d fb04 	ldr.w	pc, [sp], #4

000011d2 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    11d2:	b500      	push	{lr}
    11d4:	b083      	sub	sp, #12
    11d6:	9001      	str	r0, [sp, #4]
    11d8:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    11da:	9b00      	ldr	r3, [sp, #0]
    11dc:	2b00      	cmp	r3, #0
    11de:	d003      	beq.n	11e8 <OsIf_SetTimerFrequency+0x16>
    11e0:	9b00      	ldr	r3, [sp, #0]
    11e2:	2b01      	cmp	r3, #1
    11e4:	d004      	beq.n	11f0 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    11e6:	e007      	b.n	11f8 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    11e8:	9801      	ldr	r0, [sp, #4]
    11ea:	f7ff ffa9 	bl	1140 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    11ee:	e003      	b.n	11f8 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    11f0:	9801      	ldr	r0, [sp, #4]
    11f2:	f000 f85b 	bl	12ac <OsIf_Timer_System_SetTimerFrequency>
            break;
    11f6:	bf00      	nop
    }
}
    11f8:	bf00      	nop
    11fa:	b003      	add	sp, #12
    11fc:	f85d fb04 	ldr.w	pc, [sp], #4

00001200 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1200:	b500      	push	{lr}
    1202:	b085      	sub	sp, #20
    1204:	9001      	str	r0, [sp, #4]
    1206:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1208:	2300      	movs	r3, #0
    120a:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    120c:	9b00      	ldr	r3, [sp, #0]
    120e:	2b00      	cmp	r3, #0
    1210:	d003      	beq.n	121a <OsIf_MicrosToTicks+0x1a>
    1212:	9b00      	ldr	r3, [sp, #0]
    1214:	2b01      	cmp	r3, #1
    1216:	d005      	beq.n	1224 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1218:	e009      	b.n	122e <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    121a:	9801      	ldr	r0, [sp, #4]
    121c:	f7ff ff95 	bl	114a <OsIf_Timer_Dummy_MicrosToTicks>
    1220:	9003      	str	r0, [sp, #12]
            break;
    1222:	e004      	b.n	122e <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1224:	9801      	ldr	r0, [sp, #4]
    1226:	f000 f84f 	bl	12c8 <OsIf_Timer_System_MicrosToTicks>
    122a:	9003      	str	r0, [sp, #12]
            break;
    122c:	bf00      	nop
    }

    return Value;
    122e:	9b03      	ldr	r3, [sp, #12]
}
    1230:	4618      	mov	r0, r3
    1232:	b005      	add	sp, #20
    1234:	f85d fb04 	ldr.w	pc, [sp], #4

00001238 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1238:	b500      	push	{lr}
    123a:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    123c:	2300      	movs	r3, #0
    123e:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1240:	4a09      	ldr	r2, [pc, #36]	; (1268 <OsIf_Timer_System_Init+0x30>)
    1242:	9b01      	ldr	r3, [sp, #4]
    1244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1248:	685a      	ldr	r2, [r3, #4]
    124a:	4908      	ldr	r1, [pc, #32]	; (126c <OsIf_Timer_System_Init+0x34>)
    124c:	9b01      	ldr	r3, [sp, #4]
    124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1252:	4a06      	ldr	r2, [pc, #24]	; (126c <OsIf_Timer_System_Init+0x34>)
    1254:	9b01      	ldr	r3, [sp, #4]
    1256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    125a:	4618      	mov	r0, r3
    125c:	f000 f868 	bl	1330 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1260:	bf00      	nop
    1262:	b003      	add	sp, #12
    1264:	f85d fb04 	ldr.w	pc, [sp], #4
    1268:	0000c79c 	.word	0x0000c79c
    126c:	1fff8bf0 	.word	0x1fff8bf0

00001270 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1270:	b500      	push	{lr}
    1272:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1274:	2300      	movs	r3, #0
    1276:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1278:	2300      	movs	r3, #0
    127a:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    127c:	f000 f86c 	bl	1358 <OsIf_Timer_System_Internal_GetCounter>
    1280:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1282:	9b01      	ldr	r3, [sp, #4]
}
    1284:	4618      	mov	r0, r3
    1286:	b003      	add	sp, #12
    1288:	f85d fb04 	ldr.w	pc, [sp], #4

0000128c <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    128c:	b500      	push	{lr}
    128e:	b085      	sub	sp, #20
    1290:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1292:	2300      	movs	r3, #0
    1294:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1296:	2300      	movs	r3, #0
    1298:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    129a:	9801      	ldr	r0, [sp, #4]
    129c:	f000 f864 	bl	1368 <OsIf_Timer_System_Internal_GetElapsed>
    12a0:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    12a2:	9b03      	ldr	r3, [sp, #12]
}
    12a4:	4618      	mov	r0, r3
    12a6:	b005      	add	sp, #20
    12a8:	f85d fb04 	ldr.w	pc, [sp], #4

000012ac <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    12ac:	b084      	sub	sp, #16
    12ae:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    12b0:	2300      	movs	r3, #0
    12b2:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    12b4:	4903      	ldr	r1, [pc, #12]	; (12c4 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    12b6:	9b03      	ldr	r3, [sp, #12]
    12b8:	9a01      	ldr	r2, [sp, #4]
    12ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    12be:	bf00      	nop
    12c0:	b004      	add	sp, #16
    12c2:	4770      	bx	lr
    12c4:	1fff8bf0 	.word	0x1fff8bf0

000012c8 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    12c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    12ca:	b087      	sub	sp, #28
    12cc:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    12ce:	2100      	movs	r1, #0
    12d0:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    12d2:	2100      	movs	r1, #0
    12d4:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    12d6:	9901      	ldr	r1, [sp, #4]
    12d8:	2000      	movs	r0, #0
    12da:	460e      	mov	r6, r1
    12dc:	4607      	mov	r7, r0
    12de:	4812      	ldr	r0, [pc, #72]	; (1328 <OsIf_Timer_System_MicrosToTicks+0x60>)
    12e0:	9904      	ldr	r1, [sp, #16]
    12e2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    12e6:	2000      	movs	r0, #0
    12e8:	460c      	mov	r4, r1
    12ea:	4605      	mov	r5, r0
    12ec:	fb04 f007 	mul.w	r0, r4, r7
    12f0:	fb06 f105 	mul.w	r1, r6, r5
    12f4:	4401      	add	r1, r0
    12f6:	fba6 2304 	umull	r2, r3, r6, r4
    12fa:	4419      	add	r1, r3
    12fc:	460b      	mov	r3, r1
    12fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1302:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    130a:	4a08      	ldr	r2, [pc, #32]	; (132c <OsIf_Timer_System_MicrosToTicks+0x64>)
    130c:	f04f 0300 	mov.w	r3, #0
    1310:	f7ff f948 	bl	5a4 <__aeabi_uldivmod>
    1314:	4602      	mov	r2, r0
    1316:	460b      	mov	r3, r1
    1318:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    131c:	9b02      	ldr	r3, [sp, #8]
    131e:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1320:	9b05      	ldr	r3, [sp, #20]
}
    1322:	4618      	mov	r0, r3
    1324:	b007      	add	sp, #28
    1326:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1328:	1fff8bf0 	.word	0x1fff8bf0
    132c:	000f4240 	.word	0x000f4240

00001330 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1330:	b082      	sub	sp, #8
    1332:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1334:	4b07      	ldr	r3, [pc, #28]	; (1354 <OsIf_Timer_System_Internal_Init+0x24>)
    1336:	2200      	movs	r2, #0
    1338:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    133a:	4b06      	ldr	r3, [pc, #24]	; (1354 <OsIf_Timer_System_Internal_Init+0x24>)
    133c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1340:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1342:	4b04      	ldr	r3, [pc, #16]	; (1354 <OsIf_Timer_System_Internal_Init+0x24>)
    1344:	2200      	movs	r2, #0
    1346:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1348:	4b02      	ldr	r3, [pc, #8]	; (1354 <OsIf_Timer_System_Internal_Init+0x24>)
    134a:	2205      	movs	r2, #5
    134c:	601a      	str	r2, [r3, #0]
}
    134e:	bf00      	nop
    1350:	b002      	add	sp, #8
    1352:	4770      	bx	lr
    1354:	e000e010 	.word	0xe000e010

00001358 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1358:	4b02      	ldr	r3, [pc, #8]	; (1364 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    135a:	689b      	ldr	r3, [r3, #8]
    135c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1360:	4618      	mov	r0, r3
    1362:	4770      	bx	lr
    1364:	e000e010 	.word	0xe000e010

00001368 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1368:	b084      	sub	sp, #16
    136a:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    136c:	4b10      	ldr	r3, [pc, #64]	; (13b0 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    136e:	689b      	ldr	r3, [r3, #8]
    1370:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1374:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1376:	2300      	movs	r3, #0
    1378:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    137a:	9b01      	ldr	r3, [sp, #4]
    137c:	681b      	ldr	r3, [r3, #0]
    137e:	9a02      	ldr	r2, [sp, #8]
    1380:	429a      	cmp	r2, r3
    1382:	d909      	bls.n	1398 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1384:	9b01      	ldr	r3, [sp, #4]
    1386:	681a      	ldr	r2, [r3, #0]
    1388:	9b02      	ldr	r3, [sp, #8]
    138a:	1ad3      	subs	r3, r2, r3
    138c:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1390:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1394:	9303      	str	r3, [sp, #12]
    1396:	e004      	b.n	13a2 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1398:	9b01      	ldr	r3, [sp, #4]
    139a:	681a      	ldr	r2, [r3, #0]
    139c:	9b02      	ldr	r3, [sp, #8]
    139e:	1ad3      	subs	r3, r2, r3
    13a0:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    13a2:	9b01      	ldr	r3, [sp, #4]
    13a4:	9a02      	ldr	r2, [sp, #8]
    13a6:	601a      	str	r2, [r3, #0]

    return dif;
    13a8:	9b03      	ldr	r3, [sp, #12]
}
    13aa:	4618      	mov	r0, r3
    13ac:	b004      	add	sp, #16
    13ae:	4770      	bx	lr
    13b0:	e000e010 	.word	0xe000e010

000013b4 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    13b4:	b082      	sub	sp, #8
    13b6:	9001      	str	r0, [sp, #4]
    13b8:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    13ba:	bf00      	nop
    13bc:	b002      	add	sp, #8
    13be:	4770      	bx	lr

000013c0 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    13c0:	b500      	push	{lr}
    13c2:	b085      	sub	sp, #20
    13c4:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    13c6:	4b24      	ldr	r3, [pc, #144]	; (1458 <Clock_Ip_UpdateDriverContext+0x98>)
    13c8:	2201      	movs	r2, #1
    13ca:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    13cc:	4b23      	ldr	r3, [pc, #140]	; (145c <Clock_Ip_UpdateDriverContext+0x9c>)
    13ce:	681b      	ldr	r3, [r3, #0]
    13d0:	2102      	movs	r1, #2
    13d2:	4618      	mov	r0, r3
    13d4:	f003 fc32 	bl	4c3c <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    13d8:	2300      	movs	r3, #0
    13da:	f88d 300f 	strb.w	r3, [sp, #15]
    13de:	e015      	b.n	140c <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    13e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13e4:	9a01      	ldr	r2, [sp, #4]
    13e6:	334a      	adds	r3, #74	; 0x4a
    13e8:	00db      	lsls	r3, r3, #3
    13ea:	4413      	add	r3, r2
    13ec:	6858      	ldr	r0, [r3, #4]
    13ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13f2:	9a01      	ldr	r2, [sp, #4]
    13f4:	334a      	adds	r3, #74	; 0x4a
    13f6:	00db      	lsls	r3, r3, #3
    13f8:	4413      	add	r3, r2
    13fa:	689b      	ldr	r3, [r3, #8]
    13fc:	4619      	mov	r1, r3
    13fe:	f001 fadc 	bl	29ba <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1402:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1406:	3301      	adds	r3, #1
    1408:	f88d 300f 	strb.w	r3, [sp, #15]
    140c:	9b01      	ldr	r3, [sp, #4]
    140e:	7bdb      	ldrb	r3, [r3, #15]
    1410:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1414:	429a      	cmp	r2, r3
    1416:	d3e3      	bcc.n	13e0 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1418:	f000 f824 	bl	1464 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    141c:	2301      	movs	r3, #1
    141e:	f88d 300f 	strb.w	r3, [sp, #15]
    1422:	e00e      	b.n	1442 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1424:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1428:	9b01      	ldr	r3, [sp, #4]
    142a:	327e      	adds	r2, #126	; 0x7e
    142c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1430:	490b      	ldr	r1, [pc, #44]	; (1460 <Clock_Ip_UpdateDriverContext+0xa0>)
    1432:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1436:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1438:	f89d 300f 	ldrb.w	r3, [sp, #15]
    143c:	3301      	adds	r3, #1
    143e:	f88d 300f 	strb.w	r3, [sp, #15]
    1442:	9b01      	ldr	r3, [sp, #4]
    1444:	7cdb      	ldrb	r3, [r3, #19]
    1446:	f89d 200f 	ldrb.w	r2, [sp, #15]
    144a:	429a      	cmp	r2, r3
    144c:	d3ea      	bcc.n	1424 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    144e:	bf00      	nop
    1450:	bf00      	nop
    1452:	b005      	add	sp, #20
    1454:	f85d fb04 	ldr.w	pc, [sp], #4
    1458:	1fff8b10 	.word	0x1fff8b10
    145c:	1fff8bf4 	.word	0x1fff8bf4
    1460:	1fff8c00 	.word	0x1fff8c00

00001464 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1464:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1466:	4b23      	ldr	r3, [pc, #140]	; (14f4 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1468:	781b      	ldrb	r3, [r3, #0]
    146a:	f083 0301 	eor.w	r3, r3, #1
    146e:	b2db      	uxtb	r3, r3
    1470:	2b00      	cmp	r3, #0
    1472:	d03d      	beq.n	14f0 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1474:	4b1f      	ldr	r3, [pc, #124]	; (14f4 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1476:	2201      	movs	r2, #1
    1478:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    147a:	4b1f      	ldr	r3, [pc, #124]	; (14f8 <Clock_Ip_CallEmptyCallbacks+0x94>)
    147c:	685b      	ldr	r3, [r3, #4]
    147e:	2100      	movs	r1, #0
    1480:	2000      	movs	r0, #0
    1482:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1484:	4b1c      	ldr	r3, [pc, #112]	; (14f8 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1486:	689b      	ldr	r3, [r3, #8]
    1488:	2057      	movs	r0, #87	; 0x57
    148a:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    148c:	4b1b      	ldr	r3, [pc, #108]	; (14fc <Clock_Ip_CallEmptyCallbacks+0x98>)
    148e:	681b      	ldr	r3, [r3, #0]
    1490:	2000      	movs	r0, #0
    1492:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1494:	4b1a      	ldr	r3, [pc, #104]	; (1500 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1496:	681b      	ldr	r3, [r3, #0]
    1498:	2000      	movs	r0, #0
    149a:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    149c:	4b19      	ldr	r3, [pc, #100]	; (1504 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    149e:	681b      	ldr	r3, [r3, #0]
    14a0:	2000      	movs	r0, #0
    14a2:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    14a4:	4b18      	ldr	r3, [pc, #96]	; (1508 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    14a6:	685b      	ldr	r3, [r3, #4]
    14a8:	2000      	movs	r0, #0
    14aa:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    14ac:	4b16      	ldr	r3, [pc, #88]	; (1508 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    14ae:	689b      	ldr	r3, [r3, #8]
    14b0:	2057      	movs	r0, #87	; 0x57
    14b2:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    14b4:	4b15      	ldr	r3, [pc, #84]	; (150c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    14b6:	681b      	ldr	r3, [r3, #0]
    14b8:	2000      	movs	r0, #0
    14ba:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    14bc:	4b13      	ldr	r3, [pc, #76]	; (150c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    14be:	685b      	ldr	r3, [r3, #4]
    14c0:	2100      	movs	r1, #0
    14c2:	2057      	movs	r0, #87	; 0x57
    14c4:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    14c6:	4b12      	ldr	r3, [pc, #72]	; (1510 <Clock_Ip_CallEmptyCallbacks+0xac>)
    14c8:	681b      	ldr	r3, [r3, #0]
    14ca:	2000      	movs	r0, #0
    14cc:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    14ce:	4b11      	ldr	r3, [pc, #68]	; (1514 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    14d0:	685b      	ldr	r3, [r3, #4]
    14d2:	2000      	movs	r0, #0
    14d4:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    14d6:	4b0f      	ldr	r3, [pc, #60]	; (1514 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    14d8:	689b      	ldr	r3, [r3, #8]
    14da:	2057      	movs	r0, #87	; 0x57
    14dc:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    14de:	4b0e      	ldr	r3, [pc, #56]	; (1518 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    14e0:	685b      	ldr	r3, [r3, #4]
    14e2:	2000      	movs	r0, #0
    14e4:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    14e6:	4b0d      	ldr	r3, [pc, #52]	; (151c <Clock_Ip_CallEmptyCallbacks+0xb8>)
    14e8:	681b      	ldr	r3, [r3, #0]
    14ea:	2100      	movs	r1, #0
    14ec:	2000      	movs	r0, #0
    14ee:	4798      	blx	r3
    }
}
    14f0:	bf00      	nop
    14f2:	bd08      	pop	{r3, pc}
    14f4:	1fff8bf8 	.word	0x1fff8bf8
    14f8:	0000c0cc 	.word	0x0000c0cc
    14fc:	0000bfe0 	.word	0x0000bfe0
    1500:	0000c01c 	.word	0x0000c01c
    1504:	0000c024 	.word	0x0000c024
    1508:	0000c04c 	.word	0x0000c04c
    150c:	0000c058 	.word	0x0000c058
    1510:	0000c090 	.word	0x0000c090
    1514:	0000c0dc 	.word	0x0000c0dc
    1518:	0000c108 	.word	0x0000c108
    151c:	0000c104 	.word	0x0000c104

00001520 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1520:	b500      	push	{lr}
    1522:	b085      	sub	sp, #20
    1524:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1526:	9b01      	ldr	r3, [sp, #4]
    1528:	7adb      	ldrb	r3, [r3, #11]
    152a:	9303      	str	r3, [sp, #12]
    152c:	e01f      	b.n	156e <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    152e:	9b03      	ldr	r3, [sp, #12]
    1530:	1e5a      	subs	r2, r3, #1
    1532:	9b01      	ldr	r3, [sp, #4]
    1534:	320d      	adds	r2, #13
    1536:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    153a:	495a      	ldr	r1, [pc, #360]	; (16a4 <Clock_Ip_ResetClockConfiguration+0x184>)
    153c:	4613      	mov	r3, r2
    153e:	00db      	lsls	r3, r3, #3
    1540:	4413      	add	r3, r2
    1542:	440b      	add	r3, r1
    1544:	3301      	adds	r3, #1
    1546:	781b      	ldrb	r3, [r3, #0]
    1548:	461a      	mov	r2, r3
    154a:	4b57      	ldr	r3, [pc, #348]	; (16a8 <Clock_Ip_ResetClockConfiguration+0x188>)
    154c:	5c9b      	ldrb	r3, [r3, r2]
    154e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1550:	4a56      	ldr	r2, [pc, #344]	; (16ac <Clock_Ip_ResetClockConfiguration+0x18c>)
    1552:	9b02      	ldr	r3, [sp, #8]
    1554:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1558:	9a03      	ldr	r2, [sp, #12]
    155a:	3a01      	subs	r2, #1
    155c:	320d      	adds	r2, #13
    155e:	00d2      	lsls	r2, r2, #3
    1560:	9901      	ldr	r1, [sp, #4]
    1562:	440a      	add	r2, r1
    1564:	4610      	mov	r0, r2
    1566:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1568:	9b03      	ldr	r3, [sp, #12]
    156a:	3b01      	subs	r3, #1
    156c:	9303      	str	r3, [sp, #12]
    156e:	9b03      	ldr	r3, [sp, #12]
    1570:	2b00      	cmp	r3, #0
    1572:	d1dc      	bne.n	152e <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1574:	9b01      	ldr	r3, [sp, #4]
    1576:	7b9b      	ldrb	r3, [r3, #14]
    1578:	9303      	str	r3, [sp, #12]
    157a:	e026      	b.n	15ca <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    157c:	9b03      	ldr	r3, [sp, #12]
    157e:	3b01      	subs	r3, #1
    1580:	9a01      	ldr	r2, [sp, #4]
    1582:	3324      	adds	r3, #36	; 0x24
    1584:	011b      	lsls	r3, r3, #4
    1586:	4413      	add	r3, r2
    1588:	3304      	adds	r3, #4
    158a:	681a      	ldr	r2, [r3, #0]
    158c:	4945      	ldr	r1, [pc, #276]	; (16a4 <Clock_Ip_ResetClockConfiguration+0x184>)
    158e:	4613      	mov	r3, r2
    1590:	00db      	lsls	r3, r3, #3
    1592:	4413      	add	r3, r2
    1594:	440b      	add	r3, r1
    1596:	3301      	adds	r3, #1
    1598:	781b      	ldrb	r3, [r3, #0]
    159a:	461a      	mov	r2, r3
    159c:	4b44      	ldr	r3, [pc, #272]	; (16b0 <Clock_Ip_ResetClockConfiguration+0x190>)
    159e:	5c9b      	ldrb	r3, [r3, r2]
    15a0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    15a2:	4944      	ldr	r1, [pc, #272]	; (16b4 <Clock_Ip_ResetClockConfiguration+0x194>)
    15a4:	9a02      	ldr	r2, [sp, #8]
    15a6:	4613      	mov	r3, r2
    15a8:	005b      	lsls	r3, r3, #1
    15aa:	4413      	add	r3, r2
    15ac:	009b      	lsls	r3, r3, #2
    15ae:	440b      	add	r3, r1
    15b0:	681b      	ldr	r3, [r3, #0]
    15b2:	9a03      	ldr	r2, [sp, #12]
    15b4:	3a01      	subs	r2, #1
    15b6:	3224      	adds	r2, #36	; 0x24
    15b8:	0112      	lsls	r2, r2, #4
    15ba:	9901      	ldr	r1, [sp, #4]
    15bc:	440a      	add	r2, r1
    15be:	3204      	adds	r2, #4
    15c0:	4610      	mov	r0, r2
    15c2:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    15c4:	9b03      	ldr	r3, [sp, #12]
    15c6:	3b01      	subs	r3, #1
    15c8:	9303      	str	r3, [sp, #12]
    15ca:	9b03      	ldr	r3, [sp, #12]
    15cc:	2b00      	cmp	r3, #0
    15ce:	d1d5      	bne.n	157c <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    15d0:	9b01      	ldr	r3, [sp, #4]
    15d2:	7a9b      	ldrb	r3, [r3, #10]
    15d4:	9303      	str	r3, [sp, #12]
    15d6:	e02a      	b.n	162e <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    15d8:	9b03      	ldr	r3, [sp, #12]
    15da:	1e5a      	subs	r2, r3, #1
    15dc:	9901      	ldr	r1, [sp, #4]
    15de:	4613      	mov	r3, r2
    15e0:	009b      	lsls	r3, r3, #2
    15e2:	4413      	add	r3, r2
    15e4:	00db      	lsls	r3, r3, #3
    15e6:	440b      	add	r3, r1
    15e8:	3340      	adds	r3, #64	; 0x40
    15ea:	681a      	ldr	r2, [r3, #0]
    15ec:	492d      	ldr	r1, [pc, #180]	; (16a4 <Clock_Ip_ResetClockConfiguration+0x184>)
    15ee:	4613      	mov	r3, r2
    15f0:	00db      	lsls	r3, r3, #3
    15f2:	4413      	add	r3, r2
    15f4:	440b      	add	r3, r1
    15f6:	3301      	adds	r3, #1
    15f8:	781b      	ldrb	r3, [r3, #0]
    15fa:	461a      	mov	r2, r3
    15fc:	4b2e      	ldr	r3, [pc, #184]	; (16b8 <Clock_Ip_ResetClockConfiguration+0x198>)
    15fe:	5c9b      	ldrb	r3, [r3, r2]
    1600:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    1602:	492e      	ldr	r1, [pc, #184]	; (16bc <Clock_Ip_ResetClockConfiguration+0x19c>)
    1604:	9a02      	ldr	r2, [sp, #8]
    1606:	4613      	mov	r3, r2
    1608:	009b      	lsls	r3, r3, #2
    160a:	4413      	add	r3, r2
    160c:	009b      	lsls	r3, r3, #2
    160e:	440b      	add	r3, r1
    1610:	6819      	ldr	r1, [r3, #0]
    1612:	9b03      	ldr	r3, [sp, #12]
    1614:	1e5a      	subs	r2, r3, #1
    1616:	4613      	mov	r3, r2
    1618:	009b      	lsls	r3, r3, #2
    161a:	4413      	add	r3, r2
    161c:	00db      	lsls	r3, r3, #3
    161e:	3340      	adds	r3, #64	; 0x40
    1620:	9a01      	ldr	r2, [sp, #4]
    1622:	4413      	add	r3, r2
    1624:	4618      	mov	r0, r3
    1626:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1628:	9b03      	ldr	r3, [sp, #12]
    162a:	3b01      	subs	r3, #1
    162c:	9303      	str	r3, [sp, #12]
    162e:	9b03      	ldr	r3, [sp, #12]
    1630:	2b00      	cmp	r3, #0
    1632:	d1d1      	bne.n	15d8 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1634:	9b01      	ldr	r3, [sp, #4]
    1636:	7a5b      	ldrb	r3, [r3, #9]
    1638:	9303      	str	r3, [sp, #12]
    163a:	e02b      	b.n	1694 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    163c:	9b03      	ldr	r3, [sp, #12]
    163e:	1e5a      	subs	r2, r3, #1
    1640:	9901      	ldr	r1, [sp, #4]
    1642:	4613      	mov	r3, r2
    1644:	009b      	lsls	r3, r3, #2
    1646:	4413      	add	r3, r2
    1648:	009b      	lsls	r3, r3, #2
    164a:	440b      	add	r3, r1
    164c:	332c      	adds	r3, #44	; 0x2c
    164e:	681a      	ldr	r2, [r3, #0]
    1650:	4914      	ldr	r1, [pc, #80]	; (16a4 <Clock_Ip_ResetClockConfiguration+0x184>)
    1652:	4613      	mov	r3, r2
    1654:	00db      	lsls	r3, r3, #3
    1656:	4413      	add	r3, r2
    1658:	440b      	add	r3, r1
    165a:	3301      	adds	r3, #1
    165c:	781b      	ldrb	r3, [r3, #0]
    165e:	461a      	mov	r2, r3
    1660:	4b17      	ldr	r3, [pc, #92]	; (16c0 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    1662:	5c9b      	ldrb	r3, [r3, r2]
    1664:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    1666:	4917      	ldr	r1, [pc, #92]	; (16c4 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1668:	9a02      	ldr	r2, [sp, #8]
    166a:	4613      	mov	r3, r2
    166c:	009b      	lsls	r3, r3, #2
    166e:	4413      	add	r3, r2
    1670:	009b      	lsls	r3, r3, #2
    1672:	440b      	add	r3, r1
    1674:	6819      	ldr	r1, [r3, #0]
    1676:	9b03      	ldr	r3, [sp, #12]
    1678:	1e5a      	subs	r2, r3, #1
    167a:	4613      	mov	r3, r2
    167c:	009b      	lsls	r3, r3, #2
    167e:	4413      	add	r3, r2
    1680:	009b      	lsls	r3, r3, #2
    1682:	3328      	adds	r3, #40	; 0x28
    1684:	9a01      	ldr	r2, [sp, #4]
    1686:	4413      	add	r3, r2
    1688:	3304      	adds	r3, #4
    168a:	4618      	mov	r0, r3
    168c:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    168e:	9b03      	ldr	r3, [sp, #12]
    1690:	3b01      	subs	r3, #1
    1692:	9303      	str	r3, [sp, #12]
    1694:	9b03      	ldr	r3, [sp, #12]
    1696:	2b00      	cmp	r3, #0
    1698:	d1d0      	bne.n	163c <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    169a:	bf00      	nop
    169c:	bf00      	nop
    169e:	b005      	add	sp, #20
    16a0:	f85d fb04 	ldr.w	pc, [sp], #4
    16a4:	0000bad0 	.word	0x0000bad0
    16a8:	0000baa0 	.word	0x0000baa0
    16ac:	0000c108 	.word	0x0000c108
    16b0:	0000ba80 	.word	0x0000ba80
    16b4:	0000c04c 	.word	0x0000c04c
    16b8:	0000ba90 	.word	0x0000ba90
    16bc:	0000c0dc 	.word	0x0000c0dc
    16c0:	0000ba50 	.word	0x0000ba50
    16c4:	0000c024 	.word	0x0000c024

000016c8 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    16c8:	b500      	push	{lr}
    16ca:	b085      	sub	sp, #20
    16cc:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    16ce:	2301      	movs	r3, #1
    16d0:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    16d2:	9801      	ldr	r0, [sp, #4]
    16d4:	f000 f818 	bl	1708 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    16d8:	4b0a      	ldr	r3, [pc, #40]	; (1704 <Clock_Ip_Init+0x3c>)
    16da:	781b      	ldrb	r3, [r3, #0]
    16dc:	2b00      	cmp	r3, #0
    16de:	d00a      	beq.n	16f6 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    16e0:	f000 fb74 	bl	1dcc <Clock_Ip_GetPllStatus>
    16e4:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    16e6:	9b02      	ldr	r3, [sp, #8]
    16e8:	2b00      	cmp	r3, #0
    16ea:	d106      	bne.n	16fa <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    16ec:	f000 fbf2 	bl	1ed4 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    16f0:	2300      	movs	r3, #0
    16f2:	9303      	str	r3, [sp, #12]
    16f4:	e001      	b.n	16fa <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    16f6:	2300      	movs	r3, #0
    16f8:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    16fa:	9b03      	ldr	r3, [sp, #12]
}
    16fc:	4618      	mov	r0, r3
    16fe:	b005      	add	sp, #20
    1700:	f85d fb04 	ldr.w	pc, [sp], #4
    1704:	1fff8bfc 	.word	0x1fff8bfc

00001708 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    1708:	b510      	push	{r4, lr}
    170a:	b084      	sub	sp, #16
    170c:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    170e:	4a9f      	ldr	r2, [pc, #636]	; (198c <Clock_Ip_InitClock+0x284>)
    1710:	9b01      	ldr	r3, [sp, #4]
    1712:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    1714:	2101      	movs	r1, #1
    1716:	9801      	ldr	r0, [sp, #4]
    1718:	f003 fa90 	bl	4c3c <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    171c:	4b9b      	ldr	r3, [pc, #620]	; (198c <Clock_Ip_InitClock+0x284>)
    171e:	681b      	ldr	r3, [r3, #0]
    1720:	2b00      	cmp	r3, #0
    1722:	d030      	beq.n	1786 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1724:	2300      	movs	r3, #0
    1726:	9303      	str	r3, [sp, #12]
    1728:	e027      	b.n	177a <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    172a:	9901      	ldr	r1, [sp, #4]
    172c:	9a03      	ldr	r2, [sp, #12]
    172e:	4613      	mov	r3, r2
    1730:	009b      	lsls	r3, r3, #2
    1732:	4413      	add	r3, r2
    1734:	009b      	lsls	r3, r3, #2
    1736:	440b      	add	r3, r1
    1738:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    173c:	681a      	ldr	r2, [r3, #0]
    173e:	4994      	ldr	r1, [pc, #592]	; (1990 <Clock_Ip_InitClock+0x288>)
    1740:	4613      	mov	r3, r2
    1742:	00db      	lsls	r3, r3, #3
    1744:	4413      	add	r3, r2
    1746:	440b      	add	r3, r1
    1748:	3301      	adds	r3, #1
    174a:	781b      	ldrb	r3, [r3, #0]
    174c:	461a      	mov	r2, r3
    174e:	4b91      	ldr	r3, [pc, #580]	; (1994 <Clock_Ip_InitClock+0x28c>)
    1750:	5c9b      	ldrb	r3, [r3, r2]
    1752:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    1754:	4a90      	ldr	r2, [pc, #576]	; (1998 <Clock_Ip_InitClock+0x290>)
    1756:	9b02      	ldr	r3, [sp, #8]
    1758:	011b      	lsls	r3, r3, #4
    175a:	4413      	add	r3, r2
    175c:	6819      	ldr	r1, [r3, #0]
    175e:	9a03      	ldr	r2, [sp, #12]
    1760:	4613      	mov	r3, r2
    1762:	009b      	lsls	r3, r3, #2
    1764:	4413      	add	r3, r2
    1766:	009b      	lsls	r3, r3, #2
    1768:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    176c:	9a01      	ldr	r2, [sp, #4]
    176e:	4413      	add	r3, r2
    1770:	4618      	mov	r0, r3
    1772:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1774:	9b03      	ldr	r3, [sp, #12]
    1776:	3301      	adds	r3, #1
    1778:	9303      	str	r3, [sp, #12]
    177a:	9b01      	ldr	r3, [sp, #4]
    177c:	7c9b      	ldrb	r3, [r3, #18]
    177e:	461a      	mov	r2, r3
    1780:	9b03      	ldr	r3, [sp, #12]
    1782:	4293      	cmp	r3, r2
    1784:	d3d1      	bcc.n	172a <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    1786:	9801      	ldr	r0, [sp, #4]
    1788:	f7ff feca 	bl	1520 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    178c:	2300      	movs	r3, #0
    178e:	9303      	str	r3, [sp, #12]
    1790:	e029      	b.n	17e6 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1792:	9901      	ldr	r1, [sp, #4]
    1794:	9a03      	ldr	r2, [sp, #12]
    1796:	4613      	mov	r3, r2
    1798:	005b      	lsls	r3, r3, #1
    179a:	4413      	add	r3, r2
    179c:	009b      	lsls	r3, r3, #2
    179e:	440b      	add	r3, r1
    17a0:	3314      	adds	r3, #20
    17a2:	681a      	ldr	r2, [r3, #0]
    17a4:	497a      	ldr	r1, [pc, #488]	; (1990 <Clock_Ip_InitClock+0x288>)
    17a6:	4613      	mov	r3, r2
    17a8:	00db      	lsls	r3, r3, #3
    17aa:	4413      	add	r3, r2
    17ac:	440b      	add	r3, r1
    17ae:	3301      	adds	r3, #1
    17b0:	781b      	ldrb	r3, [r3, #0]
    17b2:	461a      	mov	r2, r3
    17b4:	4b79      	ldr	r3, [pc, #484]	; (199c <Clock_Ip_InitClock+0x294>)
    17b6:	5c9b      	ldrb	r3, [r3, r2]
    17b8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    17ba:	4979      	ldr	r1, [pc, #484]	; (19a0 <Clock_Ip_InitClock+0x298>)
    17bc:	9a02      	ldr	r2, [sp, #8]
    17be:	4613      	mov	r3, r2
    17c0:	005b      	lsls	r3, r3, #1
    17c2:	4413      	add	r3, r2
    17c4:	009b      	lsls	r3, r3, #2
    17c6:	440b      	add	r3, r1
    17c8:	6819      	ldr	r1, [r3, #0]
    17ca:	9a03      	ldr	r2, [sp, #12]
    17cc:	4613      	mov	r3, r2
    17ce:	005b      	lsls	r3, r3, #1
    17d0:	4413      	add	r3, r2
    17d2:	009b      	lsls	r3, r3, #2
    17d4:	3310      	adds	r3, #16
    17d6:	9a01      	ldr	r2, [sp, #4]
    17d8:	4413      	add	r3, r2
    17da:	3304      	adds	r3, #4
    17dc:	4618      	mov	r0, r3
    17de:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    17e0:	9b03      	ldr	r3, [sp, #12]
    17e2:	3301      	adds	r3, #1
    17e4:	9303      	str	r3, [sp, #12]
    17e6:	9b01      	ldr	r3, [sp, #4]
    17e8:	7a1b      	ldrb	r3, [r3, #8]
    17ea:	461a      	mov	r2, r3
    17ec:	9b03      	ldr	r3, [sp, #12]
    17ee:	4293      	cmp	r3, r2
    17f0:	d3cf      	bcc.n	1792 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    17f2:	2300      	movs	r3, #0
    17f4:	9303      	str	r3, [sp, #12]
    17f6:	e02a      	b.n	184e <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    17f8:	9901      	ldr	r1, [sp, #4]
    17fa:	9a03      	ldr	r2, [sp, #12]
    17fc:	4613      	mov	r3, r2
    17fe:	009b      	lsls	r3, r3, #2
    1800:	4413      	add	r3, r2
    1802:	009b      	lsls	r3, r3, #2
    1804:	440b      	add	r3, r1
    1806:	332c      	adds	r3, #44	; 0x2c
    1808:	681a      	ldr	r2, [r3, #0]
    180a:	4961      	ldr	r1, [pc, #388]	; (1990 <Clock_Ip_InitClock+0x288>)
    180c:	4613      	mov	r3, r2
    180e:	00db      	lsls	r3, r3, #3
    1810:	4413      	add	r3, r2
    1812:	440b      	add	r3, r1
    1814:	3301      	adds	r3, #1
    1816:	781b      	ldrb	r3, [r3, #0]
    1818:	461a      	mov	r2, r3
    181a:	4b62      	ldr	r3, [pc, #392]	; (19a4 <Clock_Ip_InitClock+0x29c>)
    181c:	5c9b      	ldrb	r3, [r3, r2]
    181e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    1820:	4961      	ldr	r1, [pc, #388]	; (19a8 <Clock_Ip_InitClock+0x2a0>)
    1822:	9a02      	ldr	r2, [sp, #8]
    1824:	4613      	mov	r3, r2
    1826:	009b      	lsls	r3, r3, #2
    1828:	4413      	add	r3, r2
    182a:	009b      	lsls	r3, r3, #2
    182c:	440b      	add	r3, r1
    182e:	3304      	adds	r3, #4
    1830:	6819      	ldr	r1, [r3, #0]
    1832:	9a03      	ldr	r2, [sp, #12]
    1834:	4613      	mov	r3, r2
    1836:	009b      	lsls	r3, r3, #2
    1838:	4413      	add	r3, r2
    183a:	009b      	lsls	r3, r3, #2
    183c:	3328      	adds	r3, #40	; 0x28
    183e:	9a01      	ldr	r2, [sp, #4]
    1840:	4413      	add	r3, r2
    1842:	3304      	adds	r3, #4
    1844:	4618      	mov	r0, r3
    1846:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    1848:	9b03      	ldr	r3, [sp, #12]
    184a:	3301      	adds	r3, #1
    184c:	9303      	str	r3, [sp, #12]
    184e:	9b01      	ldr	r3, [sp, #4]
    1850:	7a5b      	ldrb	r3, [r3, #9]
    1852:	461a      	mov	r2, r3
    1854:	9b03      	ldr	r3, [sp, #12]
    1856:	4293      	cmp	r3, r2
    1858:	d3ce      	bcc.n	17f8 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    185a:	9801      	ldr	r0, [sp, #4]
    185c:	f7ff fdb0 	bl	13c0 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1860:	2300      	movs	r3, #0
    1862:	9303      	str	r3, [sp, #12]
    1864:	e028      	b.n	18b8 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    1866:	9901      	ldr	r1, [sp, #4]
    1868:	9a03      	ldr	r2, [sp, #12]
    186a:	4613      	mov	r3, r2
    186c:	009b      	lsls	r3, r3, #2
    186e:	4413      	add	r3, r2
    1870:	009b      	lsls	r3, r3, #2
    1872:	440b      	add	r3, r1
    1874:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1878:	681a      	ldr	r2, [r3, #0]
    187a:	4945      	ldr	r1, [pc, #276]	; (1990 <Clock_Ip_InitClock+0x288>)
    187c:	4613      	mov	r3, r2
    187e:	00db      	lsls	r3, r3, #3
    1880:	4413      	add	r3, r2
    1882:	440b      	add	r3, r1
    1884:	3301      	adds	r3, #1
    1886:	781b      	ldrb	r3, [r3, #0]
    1888:	461a      	mov	r2, r3
    188a:	4b48      	ldr	r3, [pc, #288]	; (19ac <Clock_Ip_InitClock+0x2a4>)
    188c:	5c9b      	ldrb	r3, [r3, r2]
    188e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    1890:	4a47      	ldr	r2, [pc, #284]	; (19b0 <Clock_Ip_InitClock+0x2a8>)
    1892:	9b02      	ldr	r3, [sp, #8]
    1894:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1898:	9a03      	ldr	r2, [sp, #12]
    189a:	4613      	mov	r3, r2
    189c:	009b      	lsls	r3, r3, #2
    189e:	4413      	add	r3, r2
    18a0:	009b      	lsls	r3, r3, #2
    18a2:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    18a6:	9a01      	ldr	r2, [sp, #4]
    18a8:	4413      	add	r3, r2
    18aa:	3304      	adds	r3, #4
    18ac:	9903      	ldr	r1, [sp, #12]
    18ae:	4618      	mov	r0, r3
    18b0:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    18b2:	9b03      	ldr	r3, [sp, #12]
    18b4:	3301      	adds	r3, #1
    18b6:	9303      	str	r3, [sp, #12]
    18b8:	9b01      	ldr	r3, [sp, #4]
    18ba:	7c5b      	ldrb	r3, [r3, #17]
    18bc:	461a      	mov	r2, r3
    18be:	9b03      	ldr	r3, [sp, #12]
    18c0:	4293      	cmp	r3, r2
    18c2:	d3d0      	bcc.n	1866 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    18c4:	2300      	movs	r3, #0
    18c6:	9303      	str	r3, [sp, #12]
    18c8:	e026      	b.n	1918 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    18ca:	9901      	ldr	r1, [sp, #4]
    18cc:	9a03      	ldr	r2, [sp, #12]
    18ce:	4613      	mov	r3, r2
    18d0:	005b      	lsls	r3, r3, #1
    18d2:	4413      	add	r3, r2
    18d4:	009b      	lsls	r3, r3, #2
    18d6:	440b      	add	r3, r1
    18d8:	f503 730e 	add.w	r3, r3, #568	; 0x238
    18dc:	681a      	ldr	r2, [r3, #0]
    18de:	492c      	ldr	r1, [pc, #176]	; (1990 <Clock_Ip_InitClock+0x288>)
    18e0:	4613      	mov	r3, r2
    18e2:	00db      	lsls	r3, r3, #3
    18e4:	4413      	add	r3, r2
    18e6:	440b      	add	r3, r1
    18e8:	3301      	adds	r3, #1
    18ea:	781b      	ldrb	r3, [r3, #0]
    18ec:	461a      	mov	r2, r3
    18ee:	4b31      	ldr	r3, [pc, #196]	; (19b4 <Clock_Ip_InitClock+0x2ac>)
    18f0:	5c9b      	ldrb	r3, [r3, r2]
    18f2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    18f4:	4a30      	ldr	r2, [pc, #192]	; (19b8 <Clock_Ip_InitClock+0x2b0>)
    18f6:	9b02      	ldr	r3, [sp, #8]
    18f8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    18fc:	9a03      	ldr	r2, [sp, #12]
    18fe:	4613      	mov	r3, r2
    1900:	005b      	lsls	r3, r3, #1
    1902:	4413      	add	r3, r2
    1904:	009b      	lsls	r3, r3, #2
    1906:	f503 730e 	add.w	r3, r3, #568	; 0x238
    190a:	9a01      	ldr	r2, [sp, #4]
    190c:	4413      	add	r3, r2
    190e:	4618      	mov	r0, r3
    1910:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1912:	9b03      	ldr	r3, [sp, #12]
    1914:	3301      	adds	r3, #1
    1916:	9303      	str	r3, [sp, #12]
    1918:	9b01      	ldr	r3, [sp, #4]
    191a:	7b5b      	ldrb	r3, [r3, #13]
    191c:	461a      	mov	r2, r3
    191e:	9b03      	ldr	r3, [sp, #12]
    1920:	4293      	cmp	r3, r2
    1922:	d3d2      	bcc.n	18ca <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1924:	2300      	movs	r3, #0
    1926:	9303      	str	r3, [sp, #12]
    1928:	e026      	b.n	1978 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    192a:	9901      	ldr	r1, [sp, #4]
    192c:	9a03      	ldr	r2, [sp, #12]
    192e:	4613      	mov	r3, r2
    1930:	005b      	lsls	r3, r3, #1
    1932:	4413      	add	r3, r2
    1934:	009b      	lsls	r3, r3, #2
    1936:	440b      	add	r3, r1
    1938:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    193c:	681a      	ldr	r2, [r3, #0]
    193e:	4914      	ldr	r1, [pc, #80]	; (1990 <Clock_Ip_InitClock+0x288>)
    1940:	4613      	mov	r3, r2
    1942:	00db      	lsls	r3, r3, #3
    1944:	4413      	add	r3, r2
    1946:	440b      	add	r3, r1
    1948:	3301      	adds	r3, #1
    194a:	781b      	ldrb	r3, [r3, #0]
    194c:	461a      	mov	r2, r3
    194e:	4b1b      	ldr	r3, [pc, #108]	; (19bc <Clock_Ip_InitClock+0x2b4>)
    1950:	5c9b      	ldrb	r3, [r3, r2]
    1952:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    1954:	4a1a      	ldr	r2, [pc, #104]	; (19c0 <Clock_Ip_InitClock+0x2b8>)
    1956:	9b02      	ldr	r3, [sp, #8]
    1958:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    195c:	9a03      	ldr	r2, [sp, #12]
    195e:	4613      	mov	r3, r2
    1960:	005b      	lsls	r3, r3, #1
    1962:	4413      	add	r3, r2
    1964:	009b      	lsls	r3, r3, #2
    1966:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    196a:	9a01      	ldr	r2, [sp, #4]
    196c:	4413      	add	r3, r2
    196e:	4618      	mov	r0, r3
    1970:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1972:	9b03      	ldr	r3, [sp, #12]
    1974:	3301      	adds	r3, #1
    1976:	9303      	str	r3, [sp, #12]
    1978:	9b01      	ldr	r3, [sp, #4]
    197a:	7b1b      	ldrb	r3, [r3, #12]
    197c:	461a      	mov	r2, r3
    197e:	9b03      	ldr	r3, [sp, #12]
    1980:	4293      	cmp	r3, r2
    1982:	d3d2      	bcc.n	192a <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1984:	2300      	movs	r3, #0
    1986:	9303      	str	r3, [sp, #12]
    1988:	e044      	b.n	1a14 <Clock_Ip_InitClock+0x30c>
    198a:	bf00      	nop
    198c:	1fff8bf4 	.word	0x1fff8bf4
    1990:	0000bad0 	.word	0x0000bad0
    1994:	0000bac0 	.word	0x0000bac0
    1998:	0000c0cc 	.word	0x0000c0cc
    199c:	0000ba60 	.word	0x0000ba60
    19a0:	0000c090 	.word	0x0000c090
    19a4:	0000ba50 	.word	0x0000ba50
    19a8:	0000c024 	.word	0x0000c024
    19ac:	0000bab0 	.word	0x0000bab0
    19b0:	0000c104 	.word	0x0000c104
    19b4:	0000ba40 	.word	0x0000ba40
    19b8:	0000c01c 	.word	0x0000c01c
    19bc:	0000ba30 	.word	0x0000ba30
    19c0:	0000bfe0 	.word	0x0000bfe0
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    19c4:	9901      	ldr	r1, [sp, #4]
    19c6:	9a03      	ldr	r2, [sp, #12]
    19c8:	4613      	mov	r3, r2
    19ca:	005b      	lsls	r3, r3, #1
    19cc:	4413      	add	r3, r2
    19ce:	009b      	lsls	r3, r3, #2
    19d0:	440b      	add	r3, r1
    19d2:	f503 730e 	add.w	r3, r3, #568	; 0x238
    19d6:	681a      	ldr	r2, [r3, #0]
    19d8:	49ac      	ldr	r1, [pc, #688]	; (1c8c <Clock_Ip_InitClock+0x584>)
    19da:	4613      	mov	r3, r2
    19dc:	00db      	lsls	r3, r3, #3
    19de:	4413      	add	r3, r2
    19e0:	440b      	add	r3, r1
    19e2:	3301      	adds	r3, #1
    19e4:	781b      	ldrb	r3, [r3, #0]
    19e6:	461a      	mov	r2, r3
    19e8:	4ba9      	ldr	r3, [pc, #676]	; (1c90 <Clock_Ip_InitClock+0x588>)
    19ea:	5c9b      	ldrb	r3, [r3, r2]
    19ec:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    19ee:	4aa9      	ldr	r2, [pc, #676]	; (1c94 <Clock_Ip_InitClock+0x58c>)
    19f0:	9b02      	ldr	r3, [sp, #8]
    19f2:	00db      	lsls	r3, r3, #3
    19f4:	4413      	add	r3, r2
    19f6:	6859      	ldr	r1, [r3, #4]
    19f8:	9a03      	ldr	r2, [sp, #12]
    19fa:	4613      	mov	r3, r2
    19fc:	005b      	lsls	r3, r3, #1
    19fe:	4413      	add	r3, r2
    1a00:	009b      	lsls	r3, r3, #2
    1a02:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1a06:	9a01      	ldr	r2, [sp, #4]
    1a08:	4413      	add	r3, r2
    1a0a:	4618      	mov	r0, r3
    1a0c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1a0e:	9b03      	ldr	r3, [sp, #12]
    1a10:	3301      	adds	r3, #1
    1a12:	9303      	str	r3, [sp, #12]
    1a14:	9b01      	ldr	r3, [sp, #4]
    1a16:	7b5b      	ldrb	r3, [r3, #13]
    1a18:	461a      	mov	r2, r3
    1a1a:	9b03      	ldr	r3, [sp, #12]
    1a1c:	4293      	cmp	r3, r2
    1a1e:	d3d1      	bcc.n	19c4 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1a20:	2300      	movs	r3, #0
    1a22:	9303      	str	r3, [sp, #12]
    1a24:	e029      	b.n	1a7a <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1a26:	9901      	ldr	r1, [sp, #4]
    1a28:	9a03      	ldr	r2, [sp, #12]
    1a2a:	4613      	mov	r3, r2
    1a2c:	009b      	lsls	r3, r3, #2
    1a2e:	4413      	add	r3, r2
    1a30:	00db      	lsls	r3, r3, #3
    1a32:	440b      	add	r3, r1
    1a34:	3340      	adds	r3, #64	; 0x40
    1a36:	681a      	ldr	r2, [r3, #0]
    1a38:	4994      	ldr	r1, [pc, #592]	; (1c8c <Clock_Ip_InitClock+0x584>)
    1a3a:	4613      	mov	r3, r2
    1a3c:	00db      	lsls	r3, r3, #3
    1a3e:	4413      	add	r3, r2
    1a40:	440b      	add	r3, r1
    1a42:	3301      	adds	r3, #1
    1a44:	781b      	ldrb	r3, [r3, #0]
    1a46:	461a      	mov	r2, r3
    1a48:	4b93      	ldr	r3, [pc, #588]	; (1c98 <Clock_Ip_InitClock+0x590>)
    1a4a:	5c9b      	ldrb	r3, [r3, r2]
    1a4c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    1a4e:	4993      	ldr	r1, [pc, #588]	; (1c9c <Clock_Ip_InitClock+0x594>)
    1a50:	9a02      	ldr	r2, [sp, #8]
    1a52:	4613      	mov	r3, r2
    1a54:	009b      	lsls	r3, r3, #2
    1a56:	4413      	add	r3, r2
    1a58:	009b      	lsls	r3, r3, #2
    1a5a:	440b      	add	r3, r1
    1a5c:	3304      	adds	r3, #4
    1a5e:	6819      	ldr	r1, [r3, #0]
    1a60:	9a03      	ldr	r2, [sp, #12]
    1a62:	4613      	mov	r3, r2
    1a64:	009b      	lsls	r3, r3, #2
    1a66:	4413      	add	r3, r2
    1a68:	00db      	lsls	r3, r3, #3
    1a6a:	3340      	adds	r3, #64	; 0x40
    1a6c:	9a01      	ldr	r2, [sp, #4]
    1a6e:	4413      	add	r3, r2
    1a70:	4618      	mov	r0, r3
    1a72:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1a74:	9b03      	ldr	r3, [sp, #12]
    1a76:	3301      	adds	r3, #1
    1a78:	9303      	str	r3, [sp, #12]
    1a7a:	9b01      	ldr	r3, [sp, #4]
    1a7c:	7a9b      	ldrb	r3, [r3, #10]
    1a7e:	461a      	mov	r2, r3
    1a80:	9b03      	ldr	r3, [sp, #12]
    1a82:	4293      	cmp	r3, r2
    1a84:	d3cf      	bcc.n	1a26 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1a86:	2300      	movs	r3, #0
    1a88:	9303      	str	r3, [sp, #12]
    1a8a:	e029      	b.n	1ae0 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1a8c:	9901      	ldr	r1, [sp, #4]
    1a8e:	9a03      	ldr	r2, [sp, #12]
    1a90:	4613      	mov	r3, r2
    1a92:	009b      	lsls	r3, r3, #2
    1a94:	4413      	add	r3, r2
    1a96:	009b      	lsls	r3, r3, #2
    1a98:	440b      	add	r3, r1
    1a9a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1a9e:	681a      	ldr	r2, [r3, #0]
    1aa0:	497a      	ldr	r1, [pc, #488]	; (1c8c <Clock_Ip_InitClock+0x584>)
    1aa2:	4613      	mov	r3, r2
    1aa4:	00db      	lsls	r3, r3, #3
    1aa6:	4413      	add	r3, r2
    1aa8:	440b      	add	r3, r1
    1aaa:	3301      	adds	r3, #1
    1aac:	781b      	ldrb	r3, [r3, #0]
    1aae:	461a      	mov	r2, r3
    1ab0:	4b7b      	ldr	r3, [pc, #492]	; (1ca0 <Clock_Ip_InitClock+0x598>)
    1ab2:	5c9b      	ldrb	r3, [r3, r2]
    1ab4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    1ab6:	4a7b      	ldr	r2, [pc, #492]	; (1ca4 <Clock_Ip_InitClock+0x59c>)
    1ab8:	9b02      	ldr	r3, [sp, #8]
    1aba:	011b      	lsls	r3, r3, #4
    1abc:	4413      	add	r3, r2
    1abe:	3304      	adds	r3, #4
    1ac0:	681c      	ldr	r4, [r3, #0]
    1ac2:	9a03      	ldr	r2, [sp, #12]
    1ac4:	4613      	mov	r3, r2
    1ac6:	009b      	lsls	r3, r3, #2
    1ac8:	4413      	add	r3, r2
    1aca:	009b      	lsls	r3, r3, #2
    1acc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1ad0:	9a01      	ldr	r2, [sp, #4]
    1ad2:	4413      	add	r3, r2
    1ad4:	9903      	ldr	r1, [sp, #12]
    1ad6:	4618      	mov	r0, r3
    1ad8:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1ada:	9b03      	ldr	r3, [sp, #12]
    1adc:	3301      	adds	r3, #1
    1ade:	9303      	str	r3, [sp, #12]
    1ae0:	9b01      	ldr	r3, [sp, #4]
    1ae2:	7c9b      	ldrb	r3, [r3, #18]
    1ae4:	461a      	mov	r2, r3
    1ae6:	9b03      	ldr	r3, [sp, #12]
    1ae8:	4293      	cmp	r3, r2
    1aea:	d3cf      	bcc.n	1a8c <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1aec:	2300      	movs	r3, #0
    1aee:	9303      	str	r3, [sp, #12]
    1af0:	e02a      	b.n	1b48 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1af2:	9901      	ldr	r1, [sp, #4]
    1af4:	9a03      	ldr	r2, [sp, #12]
    1af6:	4613      	mov	r3, r2
    1af8:	009b      	lsls	r3, r3, #2
    1afa:	4413      	add	r3, r2
    1afc:	009b      	lsls	r3, r3, #2
    1afe:	440b      	add	r3, r1
    1b00:	332c      	adds	r3, #44	; 0x2c
    1b02:	681a      	ldr	r2, [r3, #0]
    1b04:	4961      	ldr	r1, [pc, #388]	; (1c8c <Clock_Ip_InitClock+0x584>)
    1b06:	4613      	mov	r3, r2
    1b08:	00db      	lsls	r3, r3, #3
    1b0a:	4413      	add	r3, r2
    1b0c:	440b      	add	r3, r1
    1b0e:	3301      	adds	r3, #1
    1b10:	781b      	ldrb	r3, [r3, #0]
    1b12:	461a      	mov	r2, r3
    1b14:	4b64      	ldr	r3, [pc, #400]	; (1ca8 <Clock_Ip_InitClock+0x5a0>)
    1b16:	5c9b      	ldrb	r3, [r3, r2]
    1b18:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    1b1a:	4964      	ldr	r1, [pc, #400]	; (1cac <Clock_Ip_InitClock+0x5a4>)
    1b1c:	9a02      	ldr	r2, [sp, #8]
    1b1e:	4613      	mov	r3, r2
    1b20:	009b      	lsls	r3, r3, #2
    1b22:	4413      	add	r3, r2
    1b24:	009b      	lsls	r3, r3, #2
    1b26:	440b      	add	r3, r1
    1b28:	3308      	adds	r3, #8
    1b2a:	6819      	ldr	r1, [r3, #0]
    1b2c:	9a03      	ldr	r2, [sp, #12]
    1b2e:	4613      	mov	r3, r2
    1b30:	009b      	lsls	r3, r3, #2
    1b32:	4413      	add	r3, r2
    1b34:	009b      	lsls	r3, r3, #2
    1b36:	3328      	adds	r3, #40	; 0x28
    1b38:	9a01      	ldr	r2, [sp, #4]
    1b3a:	4413      	add	r3, r2
    1b3c:	3304      	adds	r3, #4
    1b3e:	4618      	mov	r0, r3
    1b40:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1b42:	9b03      	ldr	r3, [sp, #12]
    1b44:	3301      	adds	r3, #1
    1b46:	9303      	str	r3, [sp, #12]
    1b48:	9b01      	ldr	r3, [sp, #4]
    1b4a:	7a5b      	ldrb	r3, [r3, #9]
    1b4c:	461a      	mov	r2, r3
    1b4e:	9b03      	ldr	r3, [sp, #12]
    1b50:	4293      	cmp	r3, r2
    1b52:	d3ce      	bcc.n	1af2 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1b54:	2300      	movs	r3, #0
    1b56:	9303      	str	r3, [sp, #12]
    1b58:	e029      	b.n	1bae <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1b5a:	9901      	ldr	r1, [sp, #4]
    1b5c:	9a03      	ldr	r2, [sp, #12]
    1b5e:	4613      	mov	r3, r2
    1b60:	009b      	lsls	r3, r3, #2
    1b62:	4413      	add	r3, r2
    1b64:	00db      	lsls	r3, r3, #3
    1b66:	440b      	add	r3, r1
    1b68:	3340      	adds	r3, #64	; 0x40
    1b6a:	681a      	ldr	r2, [r3, #0]
    1b6c:	4947      	ldr	r1, [pc, #284]	; (1c8c <Clock_Ip_InitClock+0x584>)
    1b6e:	4613      	mov	r3, r2
    1b70:	00db      	lsls	r3, r3, #3
    1b72:	4413      	add	r3, r2
    1b74:	440b      	add	r3, r1
    1b76:	3301      	adds	r3, #1
    1b78:	781b      	ldrb	r3, [r3, #0]
    1b7a:	461a      	mov	r2, r3
    1b7c:	4b46      	ldr	r3, [pc, #280]	; (1c98 <Clock_Ip_InitClock+0x590>)
    1b7e:	5c9b      	ldrb	r3, [r3, r2]
    1b80:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    1b82:	4946      	ldr	r1, [pc, #280]	; (1c9c <Clock_Ip_InitClock+0x594>)
    1b84:	9a02      	ldr	r2, [sp, #8]
    1b86:	4613      	mov	r3, r2
    1b88:	009b      	lsls	r3, r3, #2
    1b8a:	4413      	add	r3, r2
    1b8c:	009b      	lsls	r3, r3, #2
    1b8e:	440b      	add	r3, r1
    1b90:	330c      	adds	r3, #12
    1b92:	6819      	ldr	r1, [r3, #0]
    1b94:	9a03      	ldr	r2, [sp, #12]
    1b96:	4613      	mov	r3, r2
    1b98:	009b      	lsls	r3, r3, #2
    1b9a:	4413      	add	r3, r2
    1b9c:	00db      	lsls	r3, r3, #3
    1b9e:	3340      	adds	r3, #64	; 0x40
    1ba0:	9a01      	ldr	r2, [sp, #4]
    1ba2:	4413      	add	r3, r2
    1ba4:	4618      	mov	r0, r3
    1ba6:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1ba8:	9b03      	ldr	r3, [sp, #12]
    1baa:	3301      	adds	r3, #1
    1bac:	9303      	str	r3, [sp, #12]
    1bae:	9b01      	ldr	r3, [sp, #4]
    1bb0:	7a9b      	ldrb	r3, [r3, #10]
    1bb2:	461a      	mov	r2, r3
    1bb4:	9b03      	ldr	r3, [sp, #12]
    1bb6:	4293      	cmp	r3, r2
    1bb8:	d3cf      	bcc.n	1b5a <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1bba:	2300      	movs	r3, #0
    1bbc:	9303      	str	r3, [sp, #12]
    1bbe:	e025      	b.n	1c0c <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    1bc0:	9a01      	ldr	r2, [sp, #4]
    1bc2:	9b03      	ldr	r3, [sp, #12]
    1bc4:	3324      	adds	r3, #36	; 0x24
    1bc6:	011b      	lsls	r3, r3, #4
    1bc8:	4413      	add	r3, r2
    1bca:	3304      	adds	r3, #4
    1bcc:	681a      	ldr	r2, [r3, #0]
    1bce:	492f      	ldr	r1, [pc, #188]	; (1c8c <Clock_Ip_InitClock+0x584>)
    1bd0:	4613      	mov	r3, r2
    1bd2:	00db      	lsls	r3, r3, #3
    1bd4:	4413      	add	r3, r2
    1bd6:	440b      	add	r3, r1
    1bd8:	3301      	adds	r3, #1
    1bda:	781b      	ldrb	r3, [r3, #0]
    1bdc:	461a      	mov	r2, r3
    1bde:	4b34      	ldr	r3, [pc, #208]	; (1cb0 <Clock_Ip_InitClock+0x5a8>)
    1be0:	5c9b      	ldrb	r3, [r3, r2]
    1be2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    1be4:	4933      	ldr	r1, [pc, #204]	; (1cb4 <Clock_Ip_InitClock+0x5ac>)
    1be6:	9a02      	ldr	r2, [sp, #8]
    1be8:	4613      	mov	r3, r2
    1bea:	005b      	lsls	r3, r3, #1
    1bec:	4413      	add	r3, r2
    1bee:	009b      	lsls	r3, r3, #2
    1bf0:	440b      	add	r3, r1
    1bf2:	3304      	adds	r3, #4
    1bf4:	681b      	ldr	r3, [r3, #0]
    1bf6:	9a03      	ldr	r2, [sp, #12]
    1bf8:	3224      	adds	r2, #36	; 0x24
    1bfa:	0112      	lsls	r2, r2, #4
    1bfc:	9901      	ldr	r1, [sp, #4]
    1bfe:	440a      	add	r2, r1
    1c00:	3204      	adds	r2, #4
    1c02:	4610      	mov	r0, r2
    1c04:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1c06:	9b03      	ldr	r3, [sp, #12]
    1c08:	3301      	adds	r3, #1
    1c0a:	9303      	str	r3, [sp, #12]
    1c0c:	9b01      	ldr	r3, [sp, #4]
    1c0e:	7b9b      	ldrb	r3, [r3, #14]
    1c10:	461a      	mov	r2, r3
    1c12:	9b03      	ldr	r3, [sp, #12]
    1c14:	4293      	cmp	r3, r2
    1c16:	d3d3      	bcc.n	1bc0 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    1c18:	4b27      	ldr	r3, [pc, #156]	; (1cb8 <Clock_Ip_InitClock+0x5b0>)
    1c1a:	2200      	movs	r2, #0
    1c1c:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    1c1e:	4b26      	ldr	r3, [pc, #152]	; (1cb8 <Clock_Ip_InitClock+0x5b0>)
    1c20:	2200      	movs	r2, #0
    1c22:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    1c24:	4b24      	ldr	r3, [pc, #144]	; (1cb8 <Clock_Ip_InitClock+0x5b0>)
    1c26:	2201      	movs	r2, #1
    1c28:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    1c2a:	4b23      	ldr	r3, [pc, #140]	; (1cb8 <Clock_Ip_InitClock+0x5b0>)
    1c2c:	2200      	movs	r2, #0
    1c2e:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    1c30:	f000 fa9c 	bl	216c <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1c34:	2300      	movs	r3, #0
    1c36:	9303      	str	r3, [sp, #12]
    1c38:	e04c      	b.n	1cd4 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    1c3a:	9a01      	ldr	r2, [sp, #4]
    1c3c:	9b03      	ldr	r3, [sp, #12]
    1c3e:	330d      	adds	r3, #13
    1c40:	00db      	lsls	r3, r3, #3
    1c42:	4413      	add	r3, r2
    1c44:	685b      	ldr	r3, [r3, #4]
    1c46:	4a1d      	ldr	r2, [pc, #116]	; (1cbc <Clock_Ip_InitClock+0x5b4>)
    1c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c4c:	2b03      	cmp	r3, #3
    1c4e:	d03b      	beq.n	1cc8 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1c50:	9b01      	ldr	r3, [sp, #4]
    1c52:	9a03      	ldr	r2, [sp, #12]
    1c54:	320d      	adds	r2, #13
    1c56:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1c5a:	490c      	ldr	r1, [pc, #48]	; (1c8c <Clock_Ip_InitClock+0x584>)
    1c5c:	4613      	mov	r3, r2
    1c5e:	00db      	lsls	r3, r3, #3
    1c60:	4413      	add	r3, r2
    1c62:	440b      	add	r3, r1
    1c64:	3301      	adds	r3, #1
    1c66:	781b      	ldrb	r3, [r3, #0]
    1c68:	461a      	mov	r2, r3
    1c6a:	4b15      	ldr	r3, [pc, #84]	; (1cc0 <Clock_Ip_InitClock+0x5b8>)
    1c6c:	5c9b      	ldrb	r3, [r3, r2]
    1c6e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    1c70:	4a14      	ldr	r2, [pc, #80]	; (1cc4 <Clock_Ip_InitClock+0x5bc>)
    1c72:	9b02      	ldr	r3, [sp, #8]
    1c74:	00db      	lsls	r3, r3, #3
    1c76:	4413      	add	r3, r2
    1c78:	685b      	ldr	r3, [r3, #4]
    1c7a:	9a03      	ldr	r2, [sp, #12]
    1c7c:	320d      	adds	r2, #13
    1c7e:	00d2      	lsls	r2, r2, #3
    1c80:	9901      	ldr	r1, [sp, #4]
    1c82:	440a      	add	r2, r1
    1c84:	4610      	mov	r0, r2
    1c86:	4798      	blx	r3
    1c88:	e021      	b.n	1cce <Clock_Ip_InitClock+0x5c6>
    1c8a:	bf00      	nop
    1c8c:	0000bad0 	.word	0x0000bad0
    1c90:	0000ba40 	.word	0x0000ba40
    1c94:	0000c01c 	.word	0x0000c01c
    1c98:	0000ba90 	.word	0x0000ba90
    1c9c:	0000c0dc 	.word	0x0000c0dc
    1ca0:	0000bac0 	.word	0x0000bac0
    1ca4:	0000c0cc 	.word	0x0000c0cc
    1ca8:	0000ba50 	.word	0x0000ba50
    1cac:	0000c024 	.word	0x0000c024
    1cb0:	0000ba80 	.word	0x0000ba80
    1cb4:	0000c04c 	.word	0x0000c04c
    1cb8:	1fff8bfc 	.word	0x1fff8bfc
    1cbc:	0000bf1c 	.word	0x0000bf1c
    1cc0:	0000baa0 	.word	0x0000baa0
    1cc4:	0000c108 	.word	0x0000c108
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    1cc8:	4b3a      	ldr	r3, [pc, #232]	; (1db4 <Clock_Ip_InitClock+0x6ac>)
    1cca:	2201      	movs	r2, #1
    1ccc:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1cce:	9b03      	ldr	r3, [sp, #12]
    1cd0:	3301      	adds	r3, #1
    1cd2:	9303      	str	r3, [sp, #12]
    1cd4:	9b01      	ldr	r3, [sp, #4]
    1cd6:	7adb      	ldrb	r3, [r3, #11]
    1cd8:	461a      	mov	r2, r3
    1cda:	9b03      	ldr	r3, [sp, #12]
    1cdc:	4293      	cmp	r3, r2
    1cde:	d3ac      	bcc.n	1c3a <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    1ce0:	4b34      	ldr	r3, [pc, #208]	; (1db4 <Clock_Ip_InitClock+0x6ac>)
    1ce2:	781b      	ldrb	r3, [r3, #0]
    1ce4:	f083 0301 	eor.w	r3, r3, #1
    1ce8:	b2db      	uxtb	r3, r3
    1cea:	2b00      	cmp	r3, #0
    1cec:	d05e      	beq.n	1dac <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1cee:	2300      	movs	r3, #0
    1cf0:	9303      	str	r3, [sp, #12]
    1cf2:	e01f      	b.n	1d34 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1cf4:	9a01      	ldr	r2, [sp, #4]
    1cf6:	9b03      	ldr	r3, [sp, #12]
    1cf8:	334e      	adds	r3, #78	; 0x4e
    1cfa:	00db      	lsls	r3, r3, #3
    1cfc:	4413      	add	r3, r2
    1cfe:	685a      	ldr	r2, [r3, #4]
    1d00:	492d      	ldr	r1, [pc, #180]	; (1db8 <Clock_Ip_InitClock+0x6b0>)
    1d02:	4613      	mov	r3, r2
    1d04:	00db      	lsls	r3, r3, #3
    1d06:	4413      	add	r3, r2
    1d08:	440b      	add	r3, r1
    1d0a:	3301      	adds	r3, #1
    1d0c:	781b      	ldrb	r3, [r3, #0]
    1d0e:	461a      	mov	r2, r3
    1d10:	4b2a      	ldr	r3, [pc, #168]	; (1dbc <Clock_Ip_InitClock+0x6b4>)
    1d12:	5c9b      	ldrb	r3, [r3, r2]
    1d14:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    1d16:	4a2a      	ldr	r2, [pc, #168]	; (1dc0 <Clock_Ip_InitClock+0x6b8>)
    1d18:	9b02      	ldr	r3, [sp, #8]
    1d1a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1d1e:	9a03      	ldr	r2, [sp, #12]
    1d20:	324e      	adds	r2, #78	; 0x4e
    1d22:	00d2      	lsls	r2, r2, #3
    1d24:	9901      	ldr	r1, [sp, #4]
    1d26:	440a      	add	r2, r1
    1d28:	3204      	adds	r2, #4
    1d2a:	4610      	mov	r0, r2
    1d2c:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1d2e:	9b03      	ldr	r3, [sp, #12]
    1d30:	3301      	adds	r3, #1
    1d32:	9303      	str	r3, [sp, #12]
    1d34:	9b01      	ldr	r3, [sp, #4]
    1d36:	7c1b      	ldrb	r3, [r3, #16]
    1d38:	461a      	mov	r2, r3
    1d3a:	9b03      	ldr	r3, [sp, #12]
    1d3c:	4293      	cmp	r3, r2
    1d3e:	d3d9      	bcc.n	1cf4 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1d40:	2300      	movs	r3, #0
    1d42:	9303      	str	r3, [sp, #12]
    1d44:	e028      	b.n	1d98 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1d46:	9901      	ldr	r1, [sp, #4]
    1d48:	9a03      	ldr	r2, [sp, #12]
    1d4a:	4613      	mov	r3, r2
    1d4c:	009b      	lsls	r3, r3, #2
    1d4e:	4413      	add	r3, r2
    1d50:	009b      	lsls	r3, r3, #2
    1d52:	440b      	add	r3, r1
    1d54:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1d58:	681a      	ldr	r2, [r3, #0]
    1d5a:	4917      	ldr	r1, [pc, #92]	; (1db8 <Clock_Ip_InitClock+0x6b0>)
    1d5c:	4613      	mov	r3, r2
    1d5e:	00db      	lsls	r3, r3, #3
    1d60:	4413      	add	r3, r2
    1d62:	440b      	add	r3, r1
    1d64:	3301      	adds	r3, #1
    1d66:	781b      	ldrb	r3, [r3, #0]
    1d68:	461a      	mov	r2, r3
    1d6a:	4b16      	ldr	r3, [pc, #88]	; (1dc4 <Clock_Ip_InitClock+0x6bc>)
    1d6c:	5c9b      	ldrb	r3, [r3, r2]
    1d6e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    1d70:	4a15      	ldr	r2, [pc, #84]	; (1dc8 <Clock_Ip_InitClock+0x6c0>)
    1d72:	9b02      	ldr	r3, [sp, #8]
    1d74:	011b      	lsls	r3, r3, #4
    1d76:	4413      	add	r3, r2
    1d78:	330c      	adds	r3, #12
    1d7a:	6819      	ldr	r1, [r3, #0]
    1d7c:	9a03      	ldr	r2, [sp, #12]
    1d7e:	4613      	mov	r3, r2
    1d80:	009b      	lsls	r3, r3, #2
    1d82:	4413      	add	r3, r2
    1d84:	009b      	lsls	r3, r3, #2
    1d86:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1d8a:	9a01      	ldr	r2, [sp, #4]
    1d8c:	4413      	add	r3, r2
    1d8e:	4618      	mov	r0, r3
    1d90:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1d92:	9b03      	ldr	r3, [sp, #12]
    1d94:	3301      	adds	r3, #1
    1d96:	9303      	str	r3, [sp, #12]
    1d98:	9b01      	ldr	r3, [sp, #4]
    1d9a:	7c9b      	ldrb	r3, [r3, #18]
    1d9c:	461a      	mov	r2, r3
    1d9e:	9b03      	ldr	r3, [sp, #12]
    1da0:	4293      	cmp	r3, r2
    1da2:	d3d0      	bcc.n	1d46 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1da4:	2104      	movs	r1, #4
    1da6:	9801      	ldr	r0, [sp, #4]
    1da8:	f002 ff48 	bl	4c3c <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    1dac:	bf00      	nop
    1dae:	b004      	add	sp, #16
    1db0:	bd10      	pop	{r4, pc}
    1db2:	bf00      	nop
    1db4:	1fff8bfc 	.word	0x1fff8bfc
    1db8:	0000bad0 	.word	0x0000bad0
    1dbc:	0000ba70 	.word	0x0000ba70
    1dc0:	0000c058 	.word	0x0000c058
    1dc4:	0000bac0 	.word	0x0000bac0
    1dc8:	0000c0cc 	.word	0x0000c0cc

00001dcc <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    1dcc:	b500      	push	{lr}
    1dce:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    1dd0:	2302      	movs	r3, #2
    1dd2:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1dd4:	2300      	movs	r3, #0
    1dd6:	9304      	str	r3, [sp, #16]
    1dd8:	e02c      	b.n	1e34 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    1dda:	4a36      	ldr	r2, [pc, #216]	; (1eb4 <Clock_Ip_GetPllStatus+0xe8>)
    1ddc:	9b04      	ldr	r3, [sp, #16]
    1dde:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1de2:	4935      	ldr	r1, [pc, #212]	; (1eb8 <Clock_Ip_GetPllStatus+0xec>)
    1de4:	4613      	mov	r3, r2
    1de6:	00db      	lsls	r3, r3, #3
    1de8:	4413      	add	r3, r2
    1dea:	440b      	add	r3, r1
    1dec:	3301      	adds	r3, #1
    1dee:	781b      	ldrb	r3, [r3, #0]
    1df0:	461a      	mov	r2, r3
    1df2:	4b32      	ldr	r3, [pc, #200]	; (1ebc <Clock_Ip_GetPllStatus+0xf0>)
    1df4:	5c9b      	ldrb	r3, [r3, r2]
    1df6:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    1df8:	4931      	ldr	r1, [pc, #196]	; (1ec0 <Clock_Ip_GetPllStatus+0xf4>)
    1dfa:	9a03      	ldr	r2, [sp, #12]
    1dfc:	4613      	mov	r3, r2
    1dfe:	009b      	lsls	r3, r3, #2
    1e00:	4413      	add	r3, r2
    1e02:	009b      	lsls	r3, r3, #2
    1e04:	440b      	add	r3, r1
    1e06:	3308      	adds	r3, #8
    1e08:	681b      	ldr	r3, [r3, #0]
    1e0a:	492a      	ldr	r1, [pc, #168]	; (1eb4 <Clock_Ip_GetPllStatus+0xe8>)
    1e0c:	9a04      	ldr	r2, [sp, #16]
    1e0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1e12:	4610      	mov	r0, r2
    1e14:	4798      	blx	r3
    1e16:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    1e18:	9b02      	ldr	r3, [sp, #8]
    1e1a:	2b01      	cmp	r3, #1
    1e1c:	d102      	bne.n	1e24 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    1e1e:	2301      	movs	r3, #1
    1e20:	9305      	str	r3, [sp, #20]
            break;
    1e22:	e00d      	b.n	1e40 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    1e24:	9b02      	ldr	r3, [sp, #8]
    1e26:	2b02      	cmp	r3, #2
    1e28:	d101      	bne.n	1e2e <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    1e2a:	2300      	movs	r3, #0
    1e2c:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1e2e:	9b04      	ldr	r3, [sp, #16]
    1e30:	3301      	adds	r3, #1
    1e32:	9304      	str	r3, [sp, #16]
    1e34:	4b23      	ldr	r3, [pc, #140]	; (1ec4 <Clock_Ip_GetPllStatus+0xf8>)
    1e36:	789b      	ldrb	r3, [r3, #2]
    1e38:	461a      	mov	r2, r3
    1e3a:	9b04      	ldr	r3, [sp, #16]
    1e3c:	4293      	cmp	r3, r2
    1e3e:	d3cc      	bcc.n	1dda <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    1e40:	9b05      	ldr	r3, [sp, #20]
    1e42:	2b00      	cmp	r3, #0
    1e44:	d130      	bne.n	1ea8 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1e46:	2300      	movs	r3, #0
    1e48:	9304      	str	r3, [sp, #16]
    1e4a:	e027      	b.n	1e9c <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    1e4c:	4a1e      	ldr	r2, [pc, #120]	; (1ec8 <Clock_Ip_GetPllStatus+0xfc>)
    1e4e:	9b04      	ldr	r3, [sp, #16]
    1e50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1e54:	4918      	ldr	r1, [pc, #96]	; (1eb8 <Clock_Ip_GetPllStatus+0xec>)
    1e56:	4613      	mov	r3, r2
    1e58:	00db      	lsls	r3, r3, #3
    1e5a:	4413      	add	r3, r2
    1e5c:	440b      	add	r3, r1
    1e5e:	3301      	adds	r3, #1
    1e60:	781b      	ldrb	r3, [r3, #0]
    1e62:	461a      	mov	r2, r3
    1e64:	4b19      	ldr	r3, [pc, #100]	; (1ecc <Clock_Ip_GetPllStatus+0x100>)
    1e66:	5c9b      	ldrb	r3, [r3, r2]
    1e68:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    1e6a:	4919      	ldr	r1, [pc, #100]	; (1ed0 <Clock_Ip_GetPllStatus+0x104>)
    1e6c:	9a03      	ldr	r2, [sp, #12]
    1e6e:	4613      	mov	r3, r2
    1e70:	005b      	lsls	r3, r3, #1
    1e72:	4413      	add	r3, r2
    1e74:	009b      	lsls	r3, r3, #2
    1e76:	440b      	add	r3, r1
    1e78:	3308      	adds	r3, #8
    1e7a:	681b      	ldr	r3, [r3, #0]
    1e7c:	4912      	ldr	r1, [pc, #72]	; (1ec8 <Clock_Ip_GetPllStatus+0xfc>)
    1e7e:	9a04      	ldr	r2, [sp, #16]
    1e80:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1e84:	4610      	mov	r0, r2
    1e86:	4798      	blx	r3
    1e88:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    1e8a:	9b01      	ldr	r3, [sp, #4]
    1e8c:	2b01      	cmp	r3, #1
    1e8e:	d102      	bne.n	1e96 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    1e90:	2301      	movs	r3, #1
    1e92:	9305      	str	r3, [sp, #20]
                break;
    1e94:	e008      	b.n	1ea8 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1e96:	9b04      	ldr	r3, [sp, #16]
    1e98:	3301      	adds	r3, #1
    1e9a:	9304      	str	r3, [sp, #16]
    1e9c:	4b09      	ldr	r3, [pc, #36]	; (1ec4 <Clock_Ip_GetPllStatus+0xf8>)
    1e9e:	78db      	ldrb	r3, [r3, #3]
    1ea0:	461a      	mov	r2, r3
    1ea2:	9b04      	ldr	r3, [sp, #16]
    1ea4:	4293      	cmp	r3, r2
    1ea6:	d3d1      	bcc.n	1e4c <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    1ea8:	9b05      	ldr	r3, [sp, #20]
}
    1eaa:	4618      	mov	r0, r3
    1eac:	b007      	add	sp, #28
    1eae:	f85d fb04 	ldr.w	pc, [sp], #4
    1eb2:	bf00      	nop
    1eb4:	0000bfd8 	.word	0x0000bfd8
    1eb8:	0000bad0 	.word	0x0000bad0
    1ebc:	0000ba90 	.word	0x0000ba90
    1ec0:	0000c0dc 	.word	0x0000c0dc
    1ec4:	1fff8bfc 	.word	0x1fff8bfc
    1ec8:	0000bfdc 	.word	0x0000bfdc
    1ecc:	0000ba80 	.word	0x0000ba80
    1ed0:	0000c04c 	.word	0x0000c04c

00001ed4 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    1ed4:	b500      	push	{lr}
    1ed6:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1ed8:	4b55      	ldr	r3, [pc, #340]	; (2030 <Clock_Ip_DistributePll+0x15c>)
    1eda:	681b      	ldr	r3, [r3, #0]
    1edc:	2b00      	cmp	r3, #0
    1ede:	f000 80a2 	beq.w	2026 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1ee2:	2300      	movs	r3, #0
    1ee4:	9301      	str	r3, [sp, #4]
    1ee6:	e02c      	b.n	1f42 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    1ee8:	4b51      	ldr	r3, [pc, #324]	; (2030 <Clock_Ip_DistributePll+0x15c>)
    1eea:	681a      	ldr	r2, [r3, #0]
    1eec:	9b01      	ldr	r3, [sp, #4]
    1eee:	330d      	adds	r3, #13
    1ef0:	00db      	lsls	r3, r3, #3
    1ef2:	4413      	add	r3, r2
    1ef4:	685b      	ldr	r3, [r3, #4]
    1ef6:	4a4f      	ldr	r2, [pc, #316]	; (2034 <Clock_Ip_DistributePll+0x160>)
    1ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1efc:	2b03      	cmp	r3, #3
    1efe:	d11d      	bne.n	1f3c <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1f00:	4b4b      	ldr	r3, [pc, #300]	; (2030 <Clock_Ip_DistributePll+0x15c>)
    1f02:	681b      	ldr	r3, [r3, #0]
    1f04:	9a01      	ldr	r2, [sp, #4]
    1f06:	320d      	adds	r2, #13
    1f08:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1f0c:	494a      	ldr	r1, [pc, #296]	; (2038 <Clock_Ip_DistributePll+0x164>)
    1f0e:	4613      	mov	r3, r2
    1f10:	00db      	lsls	r3, r3, #3
    1f12:	4413      	add	r3, r2
    1f14:	440b      	add	r3, r1
    1f16:	3301      	adds	r3, #1
    1f18:	781b      	ldrb	r3, [r3, #0]
    1f1a:	461a      	mov	r2, r3
    1f1c:	4b47      	ldr	r3, [pc, #284]	; (203c <Clock_Ip_DistributePll+0x168>)
    1f1e:	5c9b      	ldrb	r3, [r3, r2]
    1f20:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    1f22:	4a47      	ldr	r2, [pc, #284]	; (2040 <Clock_Ip_DistributePll+0x16c>)
    1f24:	9b00      	ldr	r3, [sp, #0]
    1f26:	00db      	lsls	r3, r3, #3
    1f28:	4413      	add	r3, r2
    1f2a:	685b      	ldr	r3, [r3, #4]
    1f2c:	4a40      	ldr	r2, [pc, #256]	; (2030 <Clock_Ip_DistributePll+0x15c>)
    1f2e:	6811      	ldr	r1, [r2, #0]
    1f30:	9a01      	ldr	r2, [sp, #4]
    1f32:	320d      	adds	r2, #13
    1f34:	00d2      	lsls	r2, r2, #3
    1f36:	440a      	add	r2, r1
    1f38:	4610      	mov	r0, r2
    1f3a:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1f3c:	9b01      	ldr	r3, [sp, #4]
    1f3e:	3301      	adds	r3, #1
    1f40:	9301      	str	r3, [sp, #4]
    1f42:	4b3b      	ldr	r3, [pc, #236]	; (2030 <Clock_Ip_DistributePll+0x15c>)
    1f44:	681b      	ldr	r3, [r3, #0]
    1f46:	7adb      	ldrb	r3, [r3, #11]
    1f48:	461a      	mov	r2, r3
    1f4a:	9b01      	ldr	r3, [sp, #4]
    1f4c:	4293      	cmp	r3, r2
    1f4e:	d3cb      	bcc.n	1ee8 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    1f50:	4b3c      	ldr	r3, [pc, #240]	; (2044 <Clock_Ip_DistributePll+0x170>)
    1f52:	781b      	ldrb	r3, [r3, #0]
    1f54:	2b00      	cmp	r3, #0
    1f56:	d066      	beq.n	2026 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1f58:	2300      	movs	r3, #0
    1f5a:	9301      	str	r3, [sp, #4]
    1f5c:	e021      	b.n	1fa2 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1f5e:	4b34      	ldr	r3, [pc, #208]	; (2030 <Clock_Ip_DistributePll+0x15c>)
    1f60:	681a      	ldr	r2, [r3, #0]
    1f62:	9b01      	ldr	r3, [sp, #4]
    1f64:	334e      	adds	r3, #78	; 0x4e
    1f66:	00db      	lsls	r3, r3, #3
    1f68:	4413      	add	r3, r2
    1f6a:	685a      	ldr	r2, [r3, #4]
    1f6c:	4932      	ldr	r1, [pc, #200]	; (2038 <Clock_Ip_DistributePll+0x164>)
    1f6e:	4613      	mov	r3, r2
    1f70:	00db      	lsls	r3, r3, #3
    1f72:	4413      	add	r3, r2
    1f74:	440b      	add	r3, r1
    1f76:	3301      	adds	r3, #1
    1f78:	781b      	ldrb	r3, [r3, #0]
    1f7a:	461a      	mov	r2, r3
    1f7c:	4b32      	ldr	r3, [pc, #200]	; (2048 <Clock_Ip_DistributePll+0x174>)
    1f7e:	5c9b      	ldrb	r3, [r3, r2]
    1f80:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    1f82:	4a32      	ldr	r2, [pc, #200]	; (204c <Clock_Ip_DistributePll+0x178>)
    1f84:	9b00      	ldr	r3, [sp, #0]
    1f86:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f8a:	4a29      	ldr	r2, [pc, #164]	; (2030 <Clock_Ip_DistributePll+0x15c>)
    1f8c:	6811      	ldr	r1, [r2, #0]
    1f8e:	9a01      	ldr	r2, [sp, #4]
    1f90:	324e      	adds	r2, #78	; 0x4e
    1f92:	00d2      	lsls	r2, r2, #3
    1f94:	440a      	add	r2, r1
    1f96:	3204      	adds	r2, #4
    1f98:	4610      	mov	r0, r2
    1f9a:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1f9c:	9b01      	ldr	r3, [sp, #4]
    1f9e:	3301      	adds	r3, #1
    1fa0:	9301      	str	r3, [sp, #4]
    1fa2:	4b23      	ldr	r3, [pc, #140]	; (2030 <Clock_Ip_DistributePll+0x15c>)
    1fa4:	681b      	ldr	r3, [r3, #0]
    1fa6:	7c1b      	ldrb	r3, [r3, #16]
    1fa8:	461a      	mov	r2, r3
    1faa:	9b01      	ldr	r3, [sp, #4]
    1fac:	4293      	cmp	r3, r2
    1fae:	d3d6      	bcc.n	1f5e <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1fb0:	2300      	movs	r3, #0
    1fb2:	9301      	str	r3, [sp, #4]
    1fb4:	e02a      	b.n	200c <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1fb6:	4b1e      	ldr	r3, [pc, #120]	; (2030 <Clock_Ip_DistributePll+0x15c>)
    1fb8:	6819      	ldr	r1, [r3, #0]
    1fba:	9a01      	ldr	r2, [sp, #4]
    1fbc:	4613      	mov	r3, r2
    1fbe:	009b      	lsls	r3, r3, #2
    1fc0:	4413      	add	r3, r2
    1fc2:	009b      	lsls	r3, r3, #2
    1fc4:	440b      	add	r3, r1
    1fc6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1fca:	681a      	ldr	r2, [r3, #0]
    1fcc:	491a      	ldr	r1, [pc, #104]	; (2038 <Clock_Ip_DistributePll+0x164>)
    1fce:	4613      	mov	r3, r2
    1fd0:	00db      	lsls	r3, r3, #3
    1fd2:	4413      	add	r3, r2
    1fd4:	440b      	add	r3, r1
    1fd6:	3301      	adds	r3, #1
    1fd8:	781b      	ldrb	r3, [r3, #0]
    1fda:	461a      	mov	r2, r3
    1fdc:	4b1c      	ldr	r3, [pc, #112]	; (2050 <Clock_Ip_DistributePll+0x17c>)
    1fde:	5c9b      	ldrb	r3, [r3, r2]
    1fe0:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    1fe2:	4a1c      	ldr	r2, [pc, #112]	; (2054 <Clock_Ip_DistributePll+0x180>)
    1fe4:	9b00      	ldr	r3, [sp, #0]
    1fe6:	011b      	lsls	r3, r3, #4
    1fe8:	4413      	add	r3, r2
    1fea:	330c      	adds	r3, #12
    1fec:	6819      	ldr	r1, [r3, #0]
    1fee:	4b10      	ldr	r3, [pc, #64]	; (2030 <Clock_Ip_DistributePll+0x15c>)
    1ff0:	6818      	ldr	r0, [r3, #0]
    1ff2:	9a01      	ldr	r2, [sp, #4]
    1ff4:	4613      	mov	r3, r2
    1ff6:	009b      	lsls	r3, r3, #2
    1ff8:	4413      	add	r3, r2
    1ffa:	009b      	lsls	r3, r3, #2
    1ffc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2000:	4403      	add	r3, r0
    2002:	4618      	mov	r0, r3
    2004:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2006:	9b01      	ldr	r3, [sp, #4]
    2008:	3301      	adds	r3, #1
    200a:	9301      	str	r3, [sp, #4]
    200c:	4b08      	ldr	r3, [pc, #32]	; (2030 <Clock_Ip_DistributePll+0x15c>)
    200e:	681b      	ldr	r3, [r3, #0]
    2010:	7c9b      	ldrb	r3, [r3, #18]
    2012:	461a      	mov	r2, r3
    2014:	9b01      	ldr	r3, [sp, #4]
    2016:	4293      	cmp	r3, r2
    2018:	d3cd      	bcc.n	1fb6 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    201a:	4b05      	ldr	r3, [pc, #20]	; (2030 <Clock_Ip_DistributePll+0x15c>)
    201c:	681b      	ldr	r3, [r3, #0]
    201e:	2104      	movs	r1, #4
    2020:	4618      	mov	r0, r3
    2022:	f002 fe0b 	bl	4c3c <Clock_Ip_Command>
        }
    }
}
    2026:	bf00      	nop
    2028:	b003      	add	sp, #12
    202a:	f85d fb04 	ldr.w	pc, [sp], #4
    202e:	bf00      	nop
    2030:	1fff8bf4 	.word	0x1fff8bf4
    2034:	0000bf1c 	.word	0x0000bf1c
    2038:	0000bad0 	.word	0x0000bad0
    203c:	0000baa0 	.word	0x0000baa0
    2040:	0000c108 	.word	0x0000c108
    2044:	1fff8bfc 	.word	0x1fff8bfc
    2048:	0000ba70 	.word	0x0000ba70
    204c:	0000c058 	.word	0x0000c058
    2050:	0000bac0 	.word	0x0000bac0
    2054:	0000c0cc 	.word	0x0000c0cc

00002058 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2058:	b500      	push	{lr}
    205a:	b085      	sub	sp, #20
    205c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    205e:	490c      	ldr	r1, [pc, #48]	; (2090 <Clock_Ip_DisableClockMonitor+0x38>)
    2060:	9a01      	ldr	r2, [sp, #4]
    2062:	4613      	mov	r3, r2
    2064:	00db      	lsls	r3, r3, #3
    2066:	4413      	add	r3, r2
    2068:	440b      	add	r3, r1
    206a:	3301      	adds	r3, #1
    206c:	781b      	ldrb	r3, [r3, #0]
    206e:	461a      	mov	r2, r3
    2070:	4b08      	ldr	r3, [pc, #32]	; (2094 <Clock_Ip_DisableClockMonitor+0x3c>)
    2072:	5c9b      	ldrb	r3, [r3, r2]
    2074:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2076:	4a08      	ldr	r2, [pc, #32]	; (2098 <Clock_Ip_DisableClockMonitor+0x40>)
    2078:	9b03      	ldr	r3, [sp, #12]
    207a:	011b      	lsls	r3, r3, #4
    207c:	4413      	add	r3, r2
    207e:	3308      	adds	r3, #8
    2080:	681b      	ldr	r3, [r3, #0]
    2082:	9801      	ldr	r0, [sp, #4]
    2084:	4798      	blx	r3
}
    2086:	bf00      	nop
    2088:	b005      	add	sp, #20
    208a:	f85d fb04 	ldr.w	pc, [sp], #4
    208e:	bf00      	nop
    2090:	0000bad0 	.word	0x0000bad0
    2094:	0000bac0 	.word	0x0000bac0
    2098:	0000c0cc 	.word	0x0000c0cc

0000209c <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    209c:	b082      	sub	sp, #8
    209e:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    20a0:	4a02      	ldr	r2, [pc, #8]	; (20ac <Clock_Ip_InstallNotificationsCallback+0x10>)
    20a2:	9b01      	ldr	r3, [sp, #4]
    20a4:	6013      	str	r3, [r2, #0]
}
    20a6:	bf00      	nop
    20a8:	b002      	add	sp, #8
    20aa:	4770      	bx	lr
    20ac:	1fff8b14 	.word	0x1fff8b14

000020b0 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    20b0:	b500      	push	{lr}
    20b2:	b085      	sub	sp, #20
    20b4:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    20b6:	490c      	ldr	r1, [pc, #48]	; (20e8 <Clock_Ip_DisableModuleClock+0x38>)
    20b8:	9a01      	ldr	r2, [sp, #4]
    20ba:	4613      	mov	r3, r2
    20bc:	00db      	lsls	r3, r3, #3
    20be:	4413      	add	r3, r2
    20c0:	440b      	add	r3, r1
    20c2:	3301      	adds	r3, #1
    20c4:	781b      	ldrb	r3, [r3, #0]
    20c6:	461a      	mov	r2, r3
    20c8:	4b08      	ldr	r3, [pc, #32]	; (20ec <Clock_Ip_DisableModuleClock+0x3c>)
    20ca:	5c9b      	ldrb	r3, [r3, r2]
    20cc:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    20ce:	4a08      	ldr	r2, [pc, #32]	; (20f0 <Clock_Ip_DisableModuleClock+0x40>)
    20d0:	9b03      	ldr	r3, [sp, #12]
    20d2:	00db      	lsls	r3, r3, #3
    20d4:	4413      	add	r3, r2
    20d6:	685b      	ldr	r3, [r3, #4]
    20d8:	2101      	movs	r1, #1
    20da:	9801      	ldr	r0, [sp, #4]
    20dc:	4798      	blx	r3
}
    20de:	bf00      	nop
    20e0:	b005      	add	sp, #20
    20e2:	f85d fb04 	ldr.w	pc, [sp], #4
    20e6:	bf00      	nop
    20e8:	0000bad0 	.word	0x0000bad0
    20ec:	0000ba70 	.word	0x0000ba70
    20f0:	0000c058 	.word	0x0000c058

000020f4 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    20f4:	b500      	push	{lr}
    20f6:	b085      	sub	sp, #20
    20f8:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    20fa:	490c      	ldr	r1, [pc, #48]	; (212c <Clock_Ip_EnableModuleClock+0x38>)
    20fc:	9a01      	ldr	r2, [sp, #4]
    20fe:	4613      	mov	r3, r2
    2100:	00db      	lsls	r3, r3, #3
    2102:	4413      	add	r3, r2
    2104:	440b      	add	r3, r1
    2106:	3301      	adds	r3, #1
    2108:	781b      	ldrb	r3, [r3, #0]
    210a:	461a      	mov	r2, r3
    210c:	4b08      	ldr	r3, [pc, #32]	; (2130 <Clock_Ip_EnableModuleClock+0x3c>)
    210e:	5c9b      	ldrb	r3, [r3, r2]
    2110:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2112:	4a08      	ldr	r2, [pc, #32]	; (2134 <Clock_Ip_EnableModuleClock+0x40>)
    2114:	9b03      	ldr	r3, [sp, #12]
    2116:	00db      	lsls	r3, r3, #3
    2118:	4413      	add	r3, r2
    211a:	685b      	ldr	r3, [r3, #4]
    211c:	2100      	movs	r1, #0
    211e:	9801      	ldr	r0, [sp, #4]
    2120:	4798      	blx	r3
}
    2122:	bf00      	nop
    2124:	b005      	add	sp, #20
    2126:	f85d fb04 	ldr.w	pc, [sp], #4
    212a:	bf00      	nop
    212c:	0000bad0 	.word	0x0000bad0
    2130:	0000ba70 	.word	0x0000ba70
    2134:	0000c058 	.word	0x0000c058

00002138 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2138:	b500      	push	{lr}
    213a:	b083      	sub	sp, #12
    213c:	9001      	str	r0, [sp, #4]
    213e:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2140:	4b08      	ldr	r3, [pc, #32]	; (2164 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2142:	2200      	movs	r2, #0
    2144:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2146:	4b08      	ldr	r3, [pc, #32]	; (2168 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2148:	681b      	ldr	r3, [r3, #0]
    214a:	2102      	movs	r1, #2
    214c:	4618      	mov	r0, r3
    214e:	f002 fd75 	bl	4c3c <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2152:	9900      	ldr	r1, [sp, #0]
    2154:	9801      	ldr	r0, [sp, #4]
    2156:	f002 fc51 	bl	49fc <Clock_Ip_ClockPowerModeChangeNotification>
}
    215a:	bf00      	nop
    215c:	b003      	add	sp, #12
    215e:	f85d fb04 	ldr.w	pc, [sp], #4
    2162:	bf00      	nop
    2164:	1fff8b10 	.word	0x1fff8b10
    2168:	1fff8bf4 	.word	0x1fff8bf4

0000216c <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    216c:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    216e:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2172:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2174:	4b06      	ldr	r3, [pc, #24]	; (2190 <Clock_Ip_SetWaitStates+0x24>)
    2176:	785b      	ldrb	r3, [r3, #1]
    2178:	2b00      	cmp	r3, #0
    217a:	d005      	beq.n	2188 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    217c:	9b01      	ldr	r3, [sp, #4]
    217e:	3b01      	subs	r3, #1
    2180:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2182:	9b01      	ldr	r3, [sp, #4]
    2184:	2b00      	cmp	r3, #0
    2186:	d1f9      	bne.n	217c <Clock_Ip_SetWaitStates+0x10>
    }
}
    2188:	bf00      	nop
    218a:	b002      	add	sp, #8
    218c:	4770      	bx	lr
    218e:	bf00      	nop
    2190:	1fff8bfc 	.word	0x1fff8bfc

00002194 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2194:	b500      	push	{lr}
    2196:	b083      	sub	sp, #12
    2198:	9001      	str	r0, [sp, #4]
    219a:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    219c:	4b04      	ldr	r3, [pc, #16]	; (21b0 <Clock_Ip_ReportClockErrors+0x1c>)
    219e:	681b      	ldr	r3, [r3, #0]
    21a0:	9900      	ldr	r1, [sp, #0]
    21a2:	9801      	ldr	r0, [sp, #4]
    21a4:	4798      	blx	r3
}
    21a6:	bf00      	nop
    21a8:	b003      	add	sp, #12
    21aa:	f85d fb04 	ldr.w	pc, [sp], #4
    21ae:	bf00      	nop
    21b0:	1fff8b14 	.word	0x1fff8b14

000021b4 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    21b4:	b500      	push	{lr}
    21b6:	b085      	sub	sp, #20
    21b8:	9003      	str	r0, [sp, #12]
    21ba:	9102      	str	r1, [sp, #8]
    21bc:	9201      	str	r2, [sp, #4]
    21be:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    21c0:	2000      	movs	r0, #0
    21c2:	f7fe ffd1 	bl	1168 <OsIf_GetCounter>
    21c6:	4602      	mov	r2, r0
    21c8:	9b03      	ldr	r3, [sp, #12]
    21ca:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    21cc:	9b02      	ldr	r3, [sp, #8]
    21ce:	2200      	movs	r2, #0
    21d0:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    21d2:	2100      	movs	r1, #0
    21d4:	9800      	ldr	r0, [sp, #0]
    21d6:	f7ff f813 	bl	1200 <OsIf_MicrosToTicks>
    21da:	4602      	mov	r2, r0
    21dc:	9b01      	ldr	r3, [sp, #4]
    21de:	601a      	str	r2, [r3, #0]
}
    21e0:	bf00      	nop
    21e2:	b005      	add	sp, #20
    21e4:	f85d fb04 	ldr.w	pc, [sp], #4

000021e8 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    21e8:	b500      	push	{lr}
    21ea:	b087      	sub	sp, #28
    21ec:	9003      	str	r0, [sp, #12]
    21ee:	9102      	str	r1, [sp, #8]
    21f0:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    21f2:	2300      	movs	r3, #0
    21f4:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    21f8:	2100      	movs	r1, #0
    21fa:	9803      	ldr	r0, [sp, #12]
    21fc:	f7fe ffcd 	bl	119a <OsIf_GetElapsed>
    2200:	4602      	mov	r2, r0
    2202:	9b02      	ldr	r3, [sp, #8]
    2204:	681b      	ldr	r3, [r3, #0]
    2206:	441a      	add	r2, r3
    2208:	9b02      	ldr	r3, [sp, #8]
    220a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    220c:	9b02      	ldr	r3, [sp, #8]
    220e:	681b      	ldr	r3, [r3, #0]
    2210:	9a01      	ldr	r2, [sp, #4]
    2212:	429a      	cmp	r2, r3
    2214:	d802      	bhi.n	221c <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2216:	2301      	movs	r3, #1
    2218:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    221c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2220:	4618      	mov	r0, r3
    2222:	b007      	add	sp, #28
    2224:	f85d fb04 	ldr.w	pc, [sp], #4

00002228 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2228:	b082      	sub	sp, #8
    222a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    222c:	bf00      	nop
    222e:	b002      	add	sp, #8
    2230:	4770      	bx	lr

00002232 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2232:	b500      	push	{lr}
    2234:	b083      	sub	sp, #12
    2236:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2238:	9b01      	ldr	r3, [sp, #4]
    223a:	2b00      	cmp	r3, #0
    223c:	d002      	beq.n	2244 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    223e:	9801      	ldr	r0, [sp, #4]
    2240:	f000 f8ad 	bl	239e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2244:	bf00      	nop
    2246:	b003      	add	sp, #12
    2248:	f85d fb04 	ldr.w	pc, [sp], #4

0000224c <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    224c:	b500      	push	{lr}
    224e:	b083      	sub	sp, #12
    2250:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2252:	9b01      	ldr	r3, [sp, #4]
    2254:	2b00      	cmp	r3, #0
    2256:	d002      	beq.n	225e <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2258:	9801      	ldr	r0, [sp, #4]
    225a:	f000 f8cd 	bl	23f8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    225e:	bf00      	nop
    2260:	b003      	add	sp, #12
    2262:	f85d fb04 	ldr.w	pc, [sp], #4

00002266 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2266:	b500      	push	{lr}
    2268:	b083      	sub	sp, #12
    226a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    226c:	9b01      	ldr	r3, [sp, #4]
    226e:	2b00      	cmp	r3, #0
    2270:	d002      	beq.n	2278 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2272:	9801      	ldr	r0, [sp, #4]
    2274:	f000 f8ee 	bl	2454 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2278:	bf00      	nop
    227a:	b003      	add	sp, #12
    227c:	f85d fb04 	ldr.w	pc, [sp], #4

00002280 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2280:	b500      	push	{lr}
    2282:	b083      	sub	sp, #12
    2284:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2286:	9b01      	ldr	r3, [sp, #4]
    2288:	2b00      	cmp	r3, #0
    228a:	d002      	beq.n	2292 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    228c:	9801      	ldr	r0, [sp, #4]
    228e:	f000 f8f9 	bl	2484 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2292:	bf00      	nop
    2294:	b003      	add	sp, #12
    2296:	f85d fb04 	ldr.w	pc, [sp], #4

0000229a <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    229a:	b500      	push	{lr}
    229c:	b083      	sub	sp, #12
    229e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22a0:	9b01      	ldr	r3, [sp, #4]
    22a2:	2b00      	cmp	r3, #0
    22a4:	d002      	beq.n	22ac <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    22a6:	9801      	ldr	r0, [sp, #4]
    22a8:	f000 f904 	bl	24b4 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22ac:	bf00      	nop
    22ae:	b003      	add	sp, #12
    22b0:	f85d fb04 	ldr.w	pc, [sp], #4

000022b4 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    22b4:	b500      	push	{lr}
    22b6:	b083      	sub	sp, #12
    22b8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22ba:	9b01      	ldr	r3, [sp, #4]
    22bc:	2b00      	cmp	r3, #0
    22be:	d002      	beq.n	22c6 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    22c0:	9801      	ldr	r0, [sp, #4]
    22c2:	f000 f90f 	bl	24e4 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22c6:	bf00      	nop
    22c8:	b003      	add	sp, #12
    22ca:	f85d fb04 	ldr.w	pc, [sp], #4

000022ce <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    22ce:	b500      	push	{lr}
    22d0:	b083      	sub	sp, #12
    22d2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22d4:	9b01      	ldr	r3, [sp, #4]
    22d6:	2b00      	cmp	r3, #0
    22d8:	d002      	beq.n	22e0 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    22da:	9801      	ldr	r0, [sp, #4]
    22dc:	f000 f91a 	bl	2514 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22e0:	bf00      	nop
    22e2:	b003      	add	sp, #12
    22e4:	f85d fb04 	ldr.w	pc, [sp], #4

000022e8 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    22e8:	b500      	push	{lr}
    22ea:	b083      	sub	sp, #12
    22ec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22ee:	9b01      	ldr	r3, [sp, #4]
    22f0:	2b00      	cmp	r3, #0
    22f2:	d002      	beq.n	22fa <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    22f4:	9801      	ldr	r0, [sp, #4]
    22f6:	f000 f925 	bl	2544 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22fa:	bf00      	nop
    22fc:	b003      	add	sp, #12
    22fe:	f85d fb04 	ldr.w	pc, [sp], #4

00002302 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2302:	b500      	push	{lr}
    2304:	b083      	sub	sp, #12
    2306:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2308:	9b01      	ldr	r3, [sp, #4]
    230a:	2b00      	cmp	r3, #0
    230c:	d002      	beq.n	2314 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    230e:	9801      	ldr	r0, [sp, #4]
    2310:	f000 f930 	bl	2574 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2314:	bf00      	nop
    2316:	b003      	add	sp, #12
    2318:	f85d fb04 	ldr.w	pc, [sp], #4

0000231c <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    231c:	b500      	push	{lr}
    231e:	b083      	sub	sp, #12
    2320:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2322:	9b01      	ldr	r3, [sp, #4]
    2324:	2b00      	cmp	r3, #0
    2326:	d002      	beq.n	232e <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2328:	9801      	ldr	r0, [sp, #4]
    232a:	f000 f93b 	bl	25a4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    232e:	bf00      	nop
    2330:	b003      	add	sp, #12
    2332:	f85d fb04 	ldr.w	pc, [sp], #4

00002336 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2336:	b500      	push	{lr}
    2338:	b083      	sub	sp, #12
    233a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    233c:	9b01      	ldr	r3, [sp, #4]
    233e:	2b00      	cmp	r3, #0
    2340:	d002      	beq.n	2348 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2342:	9801      	ldr	r0, [sp, #4]
    2344:	f000 f946 	bl	25d4 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2348:	bf00      	nop
    234a:	b003      	add	sp, #12
    234c:	f85d fb04 	ldr.w	pc, [sp], #4

00002350 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2350:	b500      	push	{lr}
    2352:	b083      	sub	sp, #12
    2354:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2356:	9b01      	ldr	r3, [sp, #4]
    2358:	2b00      	cmp	r3, #0
    235a:	d002      	beq.n	2362 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    235c:	9801      	ldr	r0, [sp, #4]
    235e:	f000 f951 	bl	2604 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2362:	bf00      	nop
    2364:	b003      	add	sp, #12
    2366:	f85d fb04 	ldr.w	pc, [sp], #4

0000236a <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    236a:	b500      	push	{lr}
    236c:	b083      	sub	sp, #12
    236e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2370:	9b01      	ldr	r3, [sp, #4]
    2372:	2b00      	cmp	r3, #0
    2374:	d002      	beq.n	237c <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2376:	9801      	ldr	r0, [sp, #4]
    2378:	f000 f95e 	bl	2638 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    237c:	bf00      	nop
    237e:	b003      	add	sp, #12
    2380:	f85d fb04 	ldr.w	pc, [sp], #4

00002384 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2384:	b500      	push	{lr}
    2386:	b083      	sub	sp, #12
    2388:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    238a:	9b01      	ldr	r3, [sp, #4]
    238c:	2b00      	cmp	r3, #0
    238e:	d002      	beq.n	2396 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2390:	9801      	ldr	r0, [sp, #4]
    2392:	f000 f98b 	bl	26ac <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2396:	bf00      	nop
    2398:	b003      	add	sp, #12
    239a:	f85d fb04 	ldr.w	pc, [sp], #4

0000239e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    239e:	b086      	sub	sp, #24
    23a0:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    23a2:	9b01      	ldr	r3, [sp, #4]
    23a4:	681a      	ldr	r2, [r3, #0]
    23a6:	4911      	ldr	r1, [pc, #68]	; (23ec <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    23a8:	4613      	mov	r3, r2
    23aa:	00db      	lsls	r3, r3, #3
    23ac:	4413      	add	r3, r2
    23ae:	440b      	add	r3, r1
    23b0:	781b      	ldrb	r3, [r3, #0]
    23b2:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    23b4:	9b01      	ldr	r3, [sp, #4]
    23b6:	685b      	ldr	r3, [r3, #4]
    23b8:	4a0d      	ldr	r2, [pc, #52]	; (23f0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    23ba:	5cd3      	ldrb	r3, [r2, r3]
    23bc:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    23be:	4a0d      	ldr	r2, [pc, #52]	; (23f4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    23c0:	9b05      	ldr	r3, [sp, #20]
    23c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    23c6:	681b      	ldr	r3, [r3, #0]
    23c8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    23ca:	9b03      	ldr	r3, [sp, #12]
    23cc:	f023 0307 	bic.w	r3, r3, #7
    23d0:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    23d2:	9a03      	ldr	r2, [sp, #12]
    23d4:	9b04      	ldr	r3, [sp, #16]
    23d6:	4313      	orrs	r3, r2
    23d8:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    23da:	4a06      	ldr	r2, [pc, #24]	; (23f4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    23dc:	9b05      	ldr	r3, [sp, #20]
    23de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    23e2:	9a03      	ldr	r2, [sp, #12]
    23e4:	601a      	str	r2, [r3, #0]
}
    23e6:	bf00      	nop
    23e8:	b006      	add	sp, #24
    23ea:	4770      	bx	lr
    23ec:	0000bad0 	.word	0x0000bad0
    23f0:	0000bec8 	.word	0x0000bec8
    23f4:	0000bf0c 	.word	0x0000bf0c

000023f8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    23f8:	b086      	sub	sp, #24
    23fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    23fc:	9b01      	ldr	r3, [sp, #4]
    23fe:	681a      	ldr	r2, [r3, #0]
    2400:	4911      	ldr	r1, [pc, #68]	; (2448 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2402:	4613      	mov	r3, r2
    2404:	00db      	lsls	r3, r3, #3
    2406:	4413      	add	r3, r2
    2408:	440b      	add	r3, r1
    240a:	781b      	ldrb	r3, [r3, #0]
    240c:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    240e:	9b01      	ldr	r3, [sp, #4]
    2410:	685b      	ldr	r3, [r3, #4]
    2412:	4a0e      	ldr	r2, [pc, #56]	; (244c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2414:	5cd3      	ldrb	r3, [r2, r3]
    2416:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2418:	4a0d      	ldr	r2, [pc, #52]	; (2450 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    241a:	9b05      	ldr	r3, [sp, #20]
    241c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2420:	681b      	ldr	r3, [r3, #0]
    2422:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2424:	9b03      	ldr	r3, [sp, #12]
    2426:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    242a:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    242c:	9b04      	ldr	r3, [sp, #16]
    242e:	021b      	lsls	r3, r3, #8
    2430:	9a03      	ldr	r2, [sp, #12]
    2432:	4313      	orrs	r3, r2
    2434:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2436:	4a06      	ldr	r2, [pc, #24]	; (2450 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2438:	9b05      	ldr	r3, [sp, #20]
    243a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    243e:	9a03      	ldr	r2, [sp, #12]
    2440:	601a      	str	r2, [r3, #0]
}
    2442:	bf00      	nop
    2444:	b006      	add	sp, #24
    2446:	4770      	bx	lr
    2448:	0000bad0 	.word	0x0000bad0
    244c:	0000bec8 	.word	0x0000bec8
    2450:	0000bf0c 	.word	0x0000bf0c

00002454 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2454:	b084      	sub	sp, #16
    2456:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2458:	4b09      	ldr	r3, [pc, #36]	; (2480 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    245a:	695b      	ldr	r3, [r3, #20]
    245c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    245e:	9b03      	ldr	r3, [sp, #12]
    2460:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2464:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2466:	9b01      	ldr	r3, [sp, #4]
    2468:	685b      	ldr	r3, [r3, #4]
    246a:	3b01      	subs	r3, #1
    246c:	041b      	lsls	r3, r3, #16
    246e:	9a03      	ldr	r2, [sp, #12]
    2470:	4313      	orrs	r3, r2
    2472:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2474:	4a02      	ldr	r2, [pc, #8]	; (2480 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2476:	9b03      	ldr	r3, [sp, #12]
    2478:	6153      	str	r3, [r2, #20]
}
    247a:	bf00      	nop
    247c:	b004      	add	sp, #16
    247e:	4770      	bx	lr
    2480:	40064000 	.word	0x40064000

00002484 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2484:	b084      	sub	sp, #16
    2486:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2488:	4b09      	ldr	r3, [pc, #36]	; (24b0 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    248a:	695b      	ldr	r3, [r3, #20]
    248c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    248e:	9b03      	ldr	r3, [sp, #12]
    2490:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2494:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2496:	9b01      	ldr	r3, [sp, #4]
    2498:	685b      	ldr	r3, [r3, #4]
    249a:	3b01      	subs	r3, #1
    249c:	011b      	lsls	r3, r3, #4
    249e:	9a03      	ldr	r2, [sp, #12]
    24a0:	4313      	orrs	r3, r2
    24a2:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    24a4:	4a02      	ldr	r2, [pc, #8]	; (24b0 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    24a6:	9b03      	ldr	r3, [sp, #12]
    24a8:	6153      	str	r3, [r2, #20]
}
    24aa:	bf00      	nop
    24ac:	b004      	add	sp, #16
    24ae:	4770      	bx	lr
    24b0:	40064000 	.word	0x40064000

000024b4 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24b4:	b084      	sub	sp, #16
    24b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    24b8:	4b09      	ldr	r3, [pc, #36]	; (24e0 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    24ba:	695b      	ldr	r3, [r3, #20]
    24bc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    24be:	9b03      	ldr	r3, [sp, #12]
    24c0:	f023 030f 	bic.w	r3, r3, #15
    24c4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    24c6:	9b01      	ldr	r3, [sp, #4]
    24c8:	685b      	ldr	r3, [r3, #4]
    24ca:	3b01      	subs	r3, #1
    24cc:	9a03      	ldr	r2, [sp, #12]
    24ce:	4313      	orrs	r3, r2
    24d0:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    24d2:	4a03      	ldr	r2, [pc, #12]	; (24e0 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    24d4:	9b03      	ldr	r3, [sp, #12]
    24d6:	6153      	str	r3, [r2, #20]
}
    24d8:	bf00      	nop
    24da:	b004      	add	sp, #16
    24dc:	4770      	bx	lr
    24de:	bf00      	nop
    24e0:	40064000 	.word	0x40064000

000024e4 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24e4:	b084      	sub	sp, #16
    24e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    24e8:	4b09      	ldr	r3, [pc, #36]	; (2510 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    24ea:	699b      	ldr	r3, [r3, #24]
    24ec:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    24ee:	9b03      	ldr	r3, [sp, #12]
    24f0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    24f4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    24f6:	9b01      	ldr	r3, [sp, #4]
    24f8:	685b      	ldr	r3, [r3, #4]
    24fa:	3b01      	subs	r3, #1
    24fc:	041b      	lsls	r3, r3, #16
    24fe:	9a03      	ldr	r2, [sp, #12]
    2500:	4313      	orrs	r3, r2
    2502:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2504:	4a02      	ldr	r2, [pc, #8]	; (2510 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2506:	9b03      	ldr	r3, [sp, #12]
    2508:	6193      	str	r3, [r2, #24]
}
    250a:	bf00      	nop
    250c:	b004      	add	sp, #16
    250e:	4770      	bx	lr
    2510:	40064000 	.word	0x40064000

00002514 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2514:	b084      	sub	sp, #16
    2516:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2518:	4b09      	ldr	r3, [pc, #36]	; (2540 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    251a:	699b      	ldr	r3, [r3, #24]
    251c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    251e:	9b03      	ldr	r3, [sp, #12]
    2520:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2524:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2526:	9b01      	ldr	r3, [sp, #4]
    2528:	685b      	ldr	r3, [r3, #4]
    252a:	3b01      	subs	r3, #1
    252c:	011b      	lsls	r3, r3, #4
    252e:	9a03      	ldr	r2, [sp, #12]
    2530:	4313      	orrs	r3, r2
    2532:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2534:	4a02      	ldr	r2, [pc, #8]	; (2540 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2536:	9b03      	ldr	r3, [sp, #12]
    2538:	6193      	str	r3, [r2, #24]
}
    253a:	bf00      	nop
    253c:	b004      	add	sp, #16
    253e:	4770      	bx	lr
    2540:	40064000 	.word	0x40064000

00002544 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2544:	b084      	sub	sp, #16
    2546:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2548:	4b09      	ldr	r3, [pc, #36]	; (2570 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    254a:	699b      	ldr	r3, [r3, #24]
    254c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    254e:	9b03      	ldr	r3, [sp, #12]
    2550:	f023 030f 	bic.w	r3, r3, #15
    2554:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2556:	9b01      	ldr	r3, [sp, #4]
    2558:	685b      	ldr	r3, [r3, #4]
    255a:	3b01      	subs	r3, #1
    255c:	9a03      	ldr	r2, [sp, #12]
    255e:	4313      	orrs	r3, r2
    2560:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2562:	4a03      	ldr	r2, [pc, #12]	; (2570 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2564:	9b03      	ldr	r3, [sp, #12]
    2566:	6193      	str	r3, [r2, #24]
}
    2568:	bf00      	nop
    256a:	b004      	add	sp, #16
    256c:	4770      	bx	lr
    256e:	bf00      	nop
    2570:	40064000 	.word	0x40064000

00002574 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2574:	b084      	sub	sp, #16
    2576:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2578:	4b09      	ldr	r3, [pc, #36]	; (25a0 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    257a:	69db      	ldr	r3, [r3, #28]
    257c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    257e:	9b03      	ldr	r3, [sp, #12]
    2580:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2584:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2586:	9b01      	ldr	r3, [sp, #4]
    2588:	685b      	ldr	r3, [r3, #4]
    258a:	3b01      	subs	r3, #1
    258c:	041b      	lsls	r3, r3, #16
    258e:	9a03      	ldr	r2, [sp, #12]
    2590:	4313      	orrs	r3, r2
    2592:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2594:	4a02      	ldr	r2, [pc, #8]	; (25a0 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2596:	9b03      	ldr	r3, [sp, #12]
    2598:	61d3      	str	r3, [r2, #28]
}
    259a:	bf00      	nop
    259c:	b004      	add	sp, #16
    259e:	4770      	bx	lr
    25a0:	40064000 	.word	0x40064000

000025a4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    25a4:	b084      	sub	sp, #16
    25a6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    25a8:	4b09      	ldr	r3, [pc, #36]	; (25d0 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    25aa:	69db      	ldr	r3, [r3, #28]
    25ac:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    25ae:	9b03      	ldr	r3, [sp, #12]
    25b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    25b4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    25b6:	9b01      	ldr	r3, [sp, #4]
    25b8:	685b      	ldr	r3, [r3, #4]
    25ba:	3b01      	subs	r3, #1
    25bc:	011b      	lsls	r3, r3, #4
    25be:	9a03      	ldr	r2, [sp, #12]
    25c0:	4313      	orrs	r3, r2
    25c2:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    25c4:	4a02      	ldr	r2, [pc, #8]	; (25d0 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    25c6:	9b03      	ldr	r3, [sp, #12]
    25c8:	61d3      	str	r3, [r2, #28]
}
    25ca:	bf00      	nop
    25cc:	b004      	add	sp, #16
    25ce:	4770      	bx	lr
    25d0:	40064000 	.word	0x40064000

000025d4 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    25d4:	b084      	sub	sp, #16
    25d6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    25d8:	4b09      	ldr	r3, [pc, #36]	; (2600 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    25da:	69db      	ldr	r3, [r3, #28]
    25dc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    25de:	9b03      	ldr	r3, [sp, #12]
    25e0:	f023 030f 	bic.w	r3, r3, #15
    25e4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    25e6:	9b01      	ldr	r3, [sp, #4]
    25e8:	685b      	ldr	r3, [r3, #4]
    25ea:	3b01      	subs	r3, #1
    25ec:	9a03      	ldr	r2, [sp, #12]
    25ee:	4313      	orrs	r3, r2
    25f0:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    25f2:	4a03      	ldr	r2, [pc, #12]	; (2600 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    25f4:	9b03      	ldr	r3, [sp, #12]
    25f6:	61d3      	str	r3, [r2, #28]
}
    25f8:	bf00      	nop
    25fa:	b004      	add	sp, #16
    25fc:	4770      	bx	lr
    25fe:	bf00      	nop
    2600:	40064000 	.word	0x40064000

00002604 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    2604:	b084      	sub	sp, #16
    2606:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2608:	4b0a      	ldr	r3, [pc, #40]	; (2634 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    260a:	685b      	ldr	r3, [r3, #4]
    260c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    260e:	9b03      	ldr	r3, [sp, #12]
    2610:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2614:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    2616:	9b01      	ldr	r3, [sp, #4]
    2618:	685b      	ldr	r3, [r3, #4]
    261a:	3b01      	subs	r3, #1
    261c:	021b      	lsls	r3, r3, #8
    261e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2622:	9a03      	ldr	r2, [sp, #12]
    2624:	4313      	orrs	r3, r2
    2626:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2628:	4a02      	ldr	r2, [pc, #8]	; (2634 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    262a:	9b03      	ldr	r3, [sp, #12]
    262c:	6053      	str	r3, [r2, #4]
}
    262e:	bf00      	nop
    2630:	b004      	add	sp, #16
    2632:	4770      	bx	lr
    2634:	40048000 	.word	0x40048000

00002638 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2638:	b084      	sub	sp, #16
    263a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    263c:	4919      	ldr	r1, [pc, #100]	; (26a4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    263e:	9b01      	ldr	r3, [sp, #4]
    2640:	681a      	ldr	r2, [r3, #0]
    2642:	4819      	ldr	r0, [pc, #100]	; (26a8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2644:	4613      	mov	r3, r2
    2646:	00db      	lsls	r3, r3, #3
    2648:	4413      	add	r3, r2
    264a:	4403      	add	r3, r0
    264c:	3305      	adds	r3, #5
    264e:	781b      	ldrb	r3, [r3, #0]
    2650:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2654:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    2656:	9b03      	ldr	r3, [sp, #12]
    2658:	f023 030f 	bic.w	r3, r3, #15
    265c:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    265e:	9b01      	ldr	r3, [sp, #4]
    2660:	685b      	ldr	r3, [r3, #4]
    2662:	3b01      	subs	r3, #1
    2664:	f003 0307 	and.w	r3, r3, #7
    2668:	9a03      	ldr	r2, [sp, #12]
    266a:	4313      	orrs	r3, r2
    266c:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    266e:	9b01      	ldr	r3, [sp, #4]
    2670:	7a1b      	ldrb	r3, [r3, #8]
    2672:	3b01      	subs	r3, #1
    2674:	00db      	lsls	r3, r3, #3
    2676:	f003 0308 	and.w	r3, r3, #8
    267a:	9a03      	ldr	r2, [sp, #12]
    267c:	4313      	orrs	r3, r2
    267e:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    2680:	4908      	ldr	r1, [pc, #32]	; (26a4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2682:	9b01      	ldr	r3, [sp, #4]
    2684:	681a      	ldr	r2, [r3, #0]
    2686:	4808      	ldr	r0, [pc, #32]	; (26a8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2688:	4613      	mov	r3, r2
    268a:	00db      	lsls	r3, r3, #3
    268c:	4413      	add	r3, r2
    268e:	4403      	add	r3, r0
    2690:	3305      	adds	r3, #5
    2692:	781b      	ldrb	r3, [r3, #0]
    2694:	461a      	mov	r2, r3
    2696:	9b03      	ldr	r3, [sp, #12]
    2698:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    269c:	bf00      	nop
    269e:	b004      	add	sp, #16
    26a0:	4770      	bx	lr
    26a2:	bf00      	nop
    26a4:	40065000 	.word	0x40065000
    26a8:	0000bad0 	.word	0x0000bad0

000026ac <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    26ac:	b084      	sub	sp, #16
    26ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    26b0:	4b10      	ldr	r3, [pc, #64]	; (26f4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    26b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    26b4:	4a0f      	ldr	r2, [pc, #60]	; (26f4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    26b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    26ba:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    26bc:	4b0d      	ldr	r3, [pc, #52]	; (26f4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    26be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    26c0:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    26c2:	9b03      	ldr	r3, [sp, #12]
    26c4:	f023 030f 	bic.w	r3, r3, #15
    26c8:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    26ca:	9b01      	ldr	r3, [sp, #4]
    26cc:	685b      	ldr	r3, [r3, #4]
    26ce:	3b01      	subs	r3, #1
    26d0:	005b      	lsls	r3, r3, #1
    26d2:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    26d6:	9b01      	ldr	r3, [sp, #4]
    26d8:	7a1b      	ldrb	r3, [r3, #8]
    26da:	3b01      	subs	r3, #1
    26dc:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    26e0:	4313      	orrs	r3, r2
    26e2:	9a03      	ldr	r2, [sp, #12]
    26e4:	4313      	orrs	r3, r2
    26e6:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    26e8:	4a02      	ldr	r2, [pc, #8]	; (26f4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    26ea:	9b03      	ldr	r3, [sp, #12]
    26ec:	6693      	str	r3, [r2, #104]	; 0x68
}
    26ee:	bf00      	nop
    26f0:	b004      	add	sp, #16
    26f2:	4770      	bx	lr
    26f4:	40048000 	.word	0x40048000

000026f8 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    26f8:	b082      	sub	sp, #8
    26fa:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    26fc:	bf00      	nop
    26fe:	b002      	add	sp, #8
    2700:	4770      	bx	lr
	...

00002704 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    2704:	b082      	sub	sp, #8
    2706:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2708:	bf00      	nop
    270a:	b002      	add	sp, #8
    270c:	4770      	bx	lr

0000270e <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    270e:	b082      	sub	sp, #8
    2710:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    2712:	bf00      	nop
    2714:	b002      	add	sp, #8
    2716:	4770      	bx	lr

00002718 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2718:	b500      	push	{lr}
    271a:	b083      	sub	sp, #12
    271c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    271e:	9b01      	ldr	r3, [sp, #4]
    2720:	2b00      	cmp	r3, #0
    2722:	d002      	beq.n	272a <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    2724:	9801      	ldr	r0, [sp, #4]
    2726:	f000 f86a 	bl	27fe <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    272a:	bf00      	nop
    272c:	b003      	add	sp, #12
    272e:	f85d fb04 	ldr.w	pc, [sp], #4

00002732 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2732:	b500      	push	{lr}
    2734:	b083      	sub	sp, #12
    2736:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2738:	9b01      	ldr	r3, [sp, #4]
    273a:	2b00      	cmp	r3, #0
    273c:	d002      	beq.n	2744 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    273e:	9801      	ldr	r0, [sp, #4]
    2740:	f000 f884 	bl	284c <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    2744:	bf00      	nop
    2746:	b003      	add	sp, #12
    2748:	f85d fb04 	ldr.w	pc, [sp], #4

0000274c <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    274c:	b500      	push	{lr}
    274e:	b089      	sub	sp, #36	; 0x24
    2750:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2752:	2300      	movs	r3, #0
    2754:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    2758:	9b01      	ldr	r3, [sp, #4]
    275a:	2b00      	cmp	r3, #0
    275c:	d031      	beq.n	27c2 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    275e:	4b1b      	ldr	r3, [pc, #108]	; (27cc <Clock_Ip_CompleteSOSC+0x80>)
    2760:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2764:	f003 0301 	and.w	r3, r3, #1
    2768:	2b00      	cmp	r3, #0
    276a:	d02a      	beq.n	27c2 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    276c:	aa03      	add	r2, sp, #12
    276e:	a904      	add	r1, sp, #16
    2770:	a805      	add	r0, sp, #20
    2772:	f24c 3350 	movw	r3, #50000	; 0xc350
    2776:	f7ff fd1d 	bl	21b4 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    277a:	4b14      	ldr	r3, [pc, #80]	; (27cc <Clock_Ip_CompleteSOSC+0x80>)
    277c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2780:	0e1b      	lsrs	r3, r3, #24
    2782:	f003 0301 	and.w	r3, r3, #1
    2786:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2788:	9a03      	ldr	r2, [sp, #12]
    278a:	a904      	add	r1, sp, #16
    278c:	ab05      	add	r3, sp, #20
    278e:	4618      	mov	r0, r3
    2790:	f7ff fd2a 	bl	21e8 <Clock_Ip_TimeoutExpired>
    2794:	4603      	mov	r3, r0
    2796:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    279a:	9b06      	ldr	r3, [sp, #24]
    279c:	2b00      	cmp	r3, #0
    279e:	d106      	bne.n	27ae <Clock_Ip_CompleteSOSC+0x62>
    27a0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    27a4:	f083 0301 	eor.w	r3, r3, #1
    27a8:	b2db      	uxtb	r3, r3
    27aa:	2b00      	cmp	r3, #0
    27ac:	d1e5      	bne.n	277a <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    27ae:	f89d 301f 	ldrb.w	r3, [sp, #31]
    27b2:	2b00      	cmp	r3, #0
    27b4:	d005      	beq.n	27c2 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    27b6:	9b01      	ldr	r3, [sp, #4]
    27b8:	681b      	ldr	r3, [r3, #0]
    27ba:	4619      	mov	r1, r3
    27bc:	2001      	movs	r0, #1
    27be:	f7ff fce9 	bl	2194 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    27c2:	bf00      	nop
    27c4:	b009      	add	sp, #36	; 0x24
    27c6:	f85d fb04 	ldr.w	pc, [sp], #4
    27ca:	bf00      	nop
    27cc:	40064000 	.word	0x40064000

000027d0 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    27d0:	b500      	push	{lr}
    27d2:	b083      	sub	sp, #12
    27d4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    27d6:	9801      	ldr	r0, [sp, #4]
    27d8:	f000 f8c0 	bl	295c <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    27dc:	bf00      	nop
    27de:	b003      	add	sp, #12
    27e0:	f85d fb04 	ldr.w	pc, [sp], #4

000027e4 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    27e4:	b500      	push	{lr}
    27e6:	b083      	sub	sp, #12
    27e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    27ea:	9b01      	ldr	r3, [sp, #4]
    27ec:	2b00      	cmp	r3, #0
    27ee:	d002      	beq.n	27f6 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    27f0:	9801      	ldr	r0, [sp, #4]
    27f2:	f000 f8c3 	bl	297c <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    27f6:	bf00      	nop
    27f8:	b003      	add	sp, #12
    27fa:	f85d fb04 	ldr.w	pc, [sp], #4

000027fe <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    27fe:	b082      	sub	sp, #8
    2800:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    2802:	4b11      	ldr	r3, [pc, #68]	; (2848 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2804:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2808:	4a0f      	ldr	r2, [pc, #60]	; (2848 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    280a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    280e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    2812:	4b0d      	ldr	r3, [pc, #52]	; (2848 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2814:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2818:	4a0b      	ldr	r2, [pc, #44]	; (2848 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    281a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    281e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    2822:	4b09      	ldr	r3, [pc, #36]	; (2848 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2824:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2828:	4a07      	ldr	r2, [pc, #28]	; (2848 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    282a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    282e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    2832:	4b05      	ldr	r3, [pc, #20]	; (2848 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2834:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2838:	4a03      	ldr	r2, [pc, #12]	; (2848 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    283a:	f023 0301 	bic.w	r3, r3, #1
    283e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2842:	bf00      	nop
    2844:	b002      	add	sp, #8
    2846:	4770      	bx	lr
    2848:	40064000 	.word	0x40064000

0000284c <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    284c:	b082      	sub	sp, #8
    284e:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    2850:	9b01      	ldr	r3, [sp, #4]
    2852:	891b      	ldrh	r3, [r3, #8]
    2854:	2b01      	cmp	r3, #1
    2856:	d174      	bne.n	2942 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    2858:	9b01      	ldr	r3, [sp, #4]
    285a:	7bdb      	ldrb	r3, [r3, #15]
    285c:	2b00      	cmp	r3, #0
    285e:	d002      	beq.n	2866 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    2860:	2b01      	cmp	r3, #1
    2862:	d009      	beq.n	2878 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    2864:	e011      	b.n	288a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    2866:	4b39      	ldr	r3, [pc, #228]	; (294c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2868:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    286c:	4a37      	ldr	r2, [pc, #220]	; (294c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    286e:	f023 0308 	bic.w	r3, r3, #8
    2872:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2876:	e008      	b.n	288a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    2878:	4b34      	ldr	r3, [pc, #208]	; (294c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    287a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    287e:	4a33      	ldr	r2, [pc, #204]	; (294c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2880:	f043 0308 	orr.w	r3, r3, #8
    2884:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2888:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    288a:	4b30      	ldr	r3, [pc, #192]	; (294c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    288c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2890:	4a2e      	ldr	r2, [pc, #184]	; (294c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2892:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    2896:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    289a:	9b01      	ldr	r3, [sp, #4]
    289c:	685b      	ldr	r3, [r3, #4]
    289e:	4a2c      	ldr	r2, [pc, #176]	; (2950 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    28a0:	4293      	cmp	r3, r2
    28a2:	d90d      	bls.n	28c0 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    28a4:	9b01      	ldr	r3, [sp, #4]
    28a6:	685b      	ldr	r3, [r3, #4]
    28a8:	4a2a      	ldr	r2, [pc, #168]	; (2954 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    28aa:	4293      	cmp	r3, r2
    28ac:	d208      	bcs.n	28c0 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    28ae:	4b27      	ldr	r3, [pc, #156]	; (294c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    28b4:	4a25      	ldr	r2, [pc, #148]	; (294c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28b6:	f043 0320 	orr.w	r3, r3, #32
    28ba:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    28be:	e007      	b.n	28d0 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    28c0:	4b22      	ldr	r3, [pc, #136]	; (294c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    28c6:	4a21      	ldr	r2, [pc, #132]	; (294c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28c8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    28cc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    28d0:	9b01      	ldr	r3, [sp, #4]
    28d2:	7b1b      	ldrb	r3, [r3, #12]
    28d4:	2b00      	cmp	r3, #0
    28d6:	d108      	bne.n	28ea <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    28d8:	4b1c      	ldr	r3, [pc, #112]	; (294c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    28de:	4a1b      	ldr	r2, [pc, #108]	; (294c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28e0:	f043 0304 	orr.w	r3, r3, #4
    28e4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    28e8:	e007      	b.n	28fa <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    28ea:	4b18      	ldr	r3, [pc, #96]	; (294c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    28f0:	4a16      	ldr	r2, [pc, #88]	; (294c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28f2:	f023 0304 	bic.w	r3, r3, #4
    28f6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    28fa:	9b01      	ldr	r3, [sp, #4]
    28fc:	7c1b      	ldrb	r3, [r3, #16]
    28fe:	2b02      	cmp	r3, #2
    2900:	d011      	beq.n	2926 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    2902:	2b02      	cmp	r3, #2
    2904:	dc14      	bgt.n	2930 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    2906:	2b00      	cmp	r3, #0
    2908:	d002      	beq.n	2910 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    290a:	2b01      	cmp	r3, #1
    290c:	d005      	beq.n	291a <Clock_Ip_SetSOSC_TrustedCall+0xce>
    290e:	e00f      	b.n	2930 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2910:	4b0e      	ldr	r3, [pc, #56]	; (294c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2912:	2201      	movs	r2, #1
    2914:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2918:	e014      	b.n	2944 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    291a:	4b0c      	ldr	r3, [pc, #48]	; (294c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    291c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    2920:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2924:	e00e      	b.n	2944 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2926:	4b09      	ldr	r3, [pc, #36]	; (294c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2928:	4a0b      	ldr	r2, [pc, #44]	; (2958 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    292a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    292e:	e009      	b.n	2944 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2930:	4b06      	ldr	r3, [pc, #24]	; (294c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2932:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2936:	4a05      	ldr	r2, [pc, #20]	; (294c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2938:	f043 0301 	orr.w	r3, r3, #1
    293c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    2940:	e000      	b.n	2944 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    2942:	bf00      	nop
}
    2944:	bf00      	nop
    2946:	b002      	add	sp, #8
    2948:	4770      	bx	lr
    294a:	bf00      	nop
    294c:	40064000 	.word	0x40064000
    2950:	003d08ff 	.word	0x003d08ff
    2954:	007a1200 	.word	0x007a1200
    2958:	00030001 	.word	0x00030001

0000295c <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    295c:	b082      	sub	sp, #8
    295e:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    2960:	4b05      	ldr	r3, [pc, #20]	; (2978 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2962:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2966:	4a04      	ldr	r2, [pc, #16]	; (2978 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2968:	f023 0301 	bic.w	r3, r3, #1
    296c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2970:	bf00      	nop
    2972:	b002      	add	sp, #8
    2974:	4770      	bx	lr
    2976:	bf00      	nop
    2978:	40064000 	.word	0x40064000

0000297c <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    297c:	b082      	sub	sp, #8
    297e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2980:	9b01      	ldr	r3, [sp, #4]
    2982:	891b      	ldrh	r3, [r3, #8]
    2984:	2b01      	cmp	r3, #1
    2986:	d107      	bne.n	2998 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2988:	4b05      	ldr	r3, [pc, #20]	; (29a0 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    298a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    298e:	4a04      	ldr	r2, [pc, #16]	; (29a0 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2990:	f043 0301 	orr.w	r3, r3, #1
    2994:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    2998:	bf00      	nop
    299a:	b002      	add	sp, #8
    299c:	4770      	bx	lr
    299e:	bf00      	nop
    29a0:	40064000 	.word	0x40064000

000029a4 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    29a4:	b082      	sub	sp, #8
    29a6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    29a8:	bf00      	nop
    29aa:	b002      	add	sp, #8
    29ac:	4770      	bx	lr

000029ae <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    29ae:	b082      	sub	sp, #8
    29b0:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    29b2:	2300      	movs	r3, #0
}
    29b4:	4618      	mov	r0, r3
    29b6:	b002      	add	sp, #8
    29b8:	4770      	bx	lr

000029ba <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    29ba:	b082      	sub	sp, #8
    29bc:	9001      	str	r0, [sp, #4]
    29be:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    29c0:	bf00      	nop
    29c2:	b002      	add	sp, #8
    29c4:	4770      	bx	lr
	...

000029c8 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    29c8:	b082      	sub	sp, #8
    29ca:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    29cc:	bf00      	nop
    29ce:	b002      	add	sp, #8
    29d0:	4770      	bx	lr

000029d2 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    29d2:	b082      	sub	sp, #8
    29d4:	9001      	str	r0, [sp, #4]
    29d6:	460b      	mov	r3, r1
    29d8:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    29dc:	bf00      	nop
    29de:	b002      	add	sp, #8
    29e0:	4770      	bx	lr

000029e2 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    29e2:	b500      	push	{lr}
    29e4:	b083      	sub	sp, #12
    29e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    29e8:	9b01      	ldr	r3, [sp, #4]
    29ea:	2b00      	cmp	r3, #0
    29ec:	d002      	beq.n	29f4 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    29ee:	9801      	ldr	r0, [sp, #4]
    29f0:	f000 f8e7 	bl	2bc2 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    29f4:	bf00      	nop
    29f6:	b003      	add	sp, #12
    29f8:	f85d fb04 	ldr.w	pc, [sp], #4

000029fc <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    29fc:	b500      	push	{lr}
    29fe:	b085      	sub	sp, #20
    2a00:	9001      	str	r0, [sp, #4]
    2a02:	460b      	mov	r3, r1
    2a04:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2a08:	9b01      	ldr	r3, [sp, #4]
    2a0a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2a0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2a10:	2b00      	cmp	r3, #0
    2a12:	d003      	beq.n	2a1c <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    2a14:	2300      	movs	r3, #0
    2a16:	f8ad 300c 	strh.w	r3, [sp, #12]
    2a1a:	e002      	b.n	2a22 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2a1c:	2301      	movs	r3, #1
    2a1e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    2a22:	ab02      	add	r3, sp, #8
    2a24:	4618      	mov	r0, r3
    2a26:	f7ff ffdc 	bl	29e2 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    2a2a:	bf00      	nop
    2a2c:	b005      	add	sp, #20
    2a2e:	f85d fb04 	ldr.w	pc, [sp], #4

00002a32 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    2a32:	b500      	push	{lr}
    2a34:	b083      	sub	sp, #12
    2a36:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a38:	9b01      	ldr	r3, [sp, #4]
    2a3a:	2b00      	cmp	r3, #0
    2a3c:	d002      	beq.n	2a44 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    2a3e:	9801      	ldr	r0, [sp, #4]
    2a40:	f000 f8d6 	bl	2bf0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a44:	bf00      	nop
    2a46:	b003      	add	sp, #12
    2a48:	f85d fb04 	ldr.w	pc, [sp], #4

00002a4c <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a4c:	b500      	push	{lr}
    2a4e:	b085      	sub	sp, #20
    2a50:	9001      	str	r0, [sp, #4]
    2a52:	460b      	mov	r3, r1
    2a54:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2a58:	9b01      	ldr	r3, [sp, #4]
    2a5a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2a5c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2a60:	2b00      	cmp	r3, #0
    2a62:	d003      	beq.n	2a6c <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    2a64:	2300      	movs	r3, #0
    2a66:	f8ad 300c 	strh.w	r3, [sp, #12]
    2a6a:	e002      	b.n	2a72 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2a6c:	2301      	movs	r3, #1
    2a6e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    2a72:	ab02      	add	r3, sp, #8
    2a74:	4618      	mov	r0, r3
    2a76:	f7ff ffdc 	bl	2a32 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    2a7a:	bf00      	nop
    2a7c:	b005      	add	sp, #20
    2a7e:	f85d fb04 	ldr.w	pc, [sp], #4

00002a82 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    2a82:	b500      	push	{lr}
    2a84:	b083      	sub	sp, #12
    2a86:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a88:	9b01      	ldr	r3, [sp, #4]
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	d002      	beq.n	2a94 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    2a8e:	9801      	ldr	r0, [sp, #4]
    2a90:	f000 f8c6 	bl	2c20 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a94:	bf00      	nop
    2a96:	b003      	add	sp, #12
    2a98:	f85d fb04 	ldr.w	pc, [sp], #4

00002a9c <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a9c:	b500      	push	{lr}
    2a9e:	b085      	sub	sp, #20
    2aa0:	9001      	str	r0, [sp, #4]
    2aa2:	460b      	mov	r3, r1
    2aa4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2aa8:	9b01      	ldr	r3, [sp, #4]
    2aaa:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2aac:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2ab0:	2b00      	cmp	r3, #0
    2ab2:	d003      	beq.n	2abc <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    2ab4:	2300      	movs	r3, #0
    2ab6:	f8ad 300c 	strh.w	r3, [sp, #12]
    2aba:	e002      	b.n	2ac2 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2abc:	2301      	movs	r3, #1
    2abe:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    2ac2:	ab02      	add	r3, sp, #8
    2ac4:	4618      	mov	r0, r3
    2ac6:	f7ff ffdc 	bl	2a82 <Clock_Ip_ClockSetSimClkoutEnable>
}
    2aca:	bf00      	nop
    2acc:	b005      	add	sp, #20
    2ace:	f85d fb04 	ldr.w	pc, [sp], #4

00002ad2 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    2ad2:	b500      	push	{lr}
    2ad4:	b083      	sub	sp, #12
    2ad6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ad8:	9b01      	ldr	r3, [sp, #4]
    2ada:	2b00      	cmp	r3, #0
    2adc:	d002      	beq.n	2ae4 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    2ade:	9801      	ldr	r0, [sp, #4]
    2ae0:	f000 f8b6 	bl	2c50 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ae4:	bf00      	nop
    2ae6:	b003      	add	sp, #12
    2ae8:	f85d fb04 	ldr.w	pc, [sp], #4

00002aec <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2aec:	b500      	push	{lr}
    2aee:	b085      	sub	sp, #20
    2af0:	9001      	str	r0, [sp, #4]
    2af2:	460b      	mov	r3, r1
    2af4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2af8:	9b01      	ldr	r3, [sp, #4]
    2afa:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2afc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2b00:	2b00      	cmp	r3, #0
    2b02:	d003      	beq.n	2b0c <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    2b04:	2300      	movs	r3, #0
    2b06:	f8ad 300c 	strh.w	r3, [sp, #12]
    2b0a:	e002      	b.n	2b12 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2b0c:	2301      	movs	r3, #1
    2b0e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    2b12:	ab02      	add	r3, sp, #8
    2b14:	4618      	mov	r0, r3
    2b16:	f7ff ffdc 	bl	2ad2 <Clock_Ip_ClockSetPccCgcEnable>
}
    2b1a:	bf00      	nop
    2b1c:	b005      	add	sp, #20
    2b1e:	f85d fb04 	ldr.w	pc, [sp], #4

00002b22 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    2b22:	b500      	push	{lr}
    2b24:	b083      	sub	sp, #12
    2b26:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b28:	9b01      	ldr	r3, [sp, #4]
    2b2a:	2b00      	cmp	r3, #0
    2b2c:	d002      	beq.n	2b34 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    2b2e:	9801      	ldr	r0, [sp, #4]
    2b30:	f000 f8bc 	bl	2cac <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b34:	bf00      	nop
    2b36:	b003      	add	sp, #12
    2b38:	f85d fb04 	ldr.w	pc, [sp], #4

00002b3c <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    2b3c:	b500      	push	{lr}
    2b3e:	b085      	sub	sp, #20
    2b40:	9001      	str	r0, [sp, #4]
    2b42:	460b      	mov	r3, r1
    2b44:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2b48:	9b01      	ldr	r3, [sp, #4]
    2b4a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2b4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2b50:	2b00      	cmp	r3, #0
    2b52:	d003      	beq.n	2b5c <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    2b54:	2300      	movs	r3, #0
    2b56:	f8ad 300c 	strh.w	r3, [sp, #12]
    2b5a:	e002      	b.n	2b62 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2b5c:	2301      	movs	r3, #1
    2b5e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    2b62:	ab02      	add	r3, sp, #8
    2b64:	4618      	mov	r0, r3
    2b66:	f7ff ffdc 	bl	2b22 <Clock_Ip_ClockSetSimGate>
}
    2b6a:	bf00      	nop
    2b6c:	b005      	add	sp, #20
    2b6e:	f85d fb04 	ldr.w	pc, [sp], #4

00002b72 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    2b72:	b500      	push	{lr}
    2b74:	b083      	sub	sp, #12
    2b76:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b78:	9b01      	ldr	r3, [sp, #4]
    2b7a:	2b00      	cmp	r3, #0
    2b7c:	d002      	beq.n	2b84 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    2b7e:	9801      	ldr	r0, [sp, #4]
    2b80:	f000 f8c0 	bl	2d04 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b84:	bf00      	nop
    2b86:	b003      	add	sp, #12
    2b88:	f85d fb04 	ldr.w	pc, [sp], #4

00002b8c <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2b8c:	b500      	push	{lr}
    2b8e:	b085      	sub	sp, #20
    2b90:	9001      	str	r0, [sp, #4]
    2b92:	460b      	mov	r3, r1
    2b94:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2b98:	9b01      	ldr	r3, [sp, #4]
    2b9a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2b9c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d003      	beq.n	2bac <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    2ba4:	2300      	movs	r3, #0
    2ba6:	f8ad 300c 	strh.w	r3, [sp, #12]
    2baa:	e002      	b.n	2bb2 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2bac:	2301      	movs	r3, #1
    2bae:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    2bb2:	ab02      	add	r3, sp, #8
    2bb4:	4618      	mov	r0, r3
    2bb6:	f7ff ffdc 	bl	2b72 <Clock_Ip_ClockSetSimTraceEnable>
}
    2bba:	bf00      	nop
    2bbc:	b005      	add	sp, #20
    2bbe:	f85d fb04 	ldr.w	pc, [sp], #4

00002bc2 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2bc2:	b084      	sub	sp, #16
    2bc4:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2bc6:	4b09      	ldr	r3, [pc, #36]	; (2bec <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2bc8:	691b      	ldr	r3, [r3, #16]
    2bca:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    2bcc:	9b03      	ldr	r3, [sp, #12]
    2bce:	f023 0301 	bic.w	r3, r3, #1
    2bd2:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    2bd4:	9b01      	ldr	r3, [sp, #4]
    2bd6:	889b      	ldrh	r3, [r3, #4]
    2bd8:	461a      	mov	r2, r3
    2bda:	9b03      	ldr	r3, [sp, #12]
    2bdc:	4313      	orrs	r3, r2
    2bde:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2be0:	4a02      	ldr	r2, [pc, #8]	; (2bec <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2be2:	9b03      	ldr	r3, [sp, #12]
    2be4:	6113      	str	r3, [r2, #16]
}
    2be6:	bf00      	nop
    2be8:	b004      	add	sp, #16
    2bea:	4770      	bx	lr
    2bec:	40048000 	.word	0x40048000

00002bf0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2bf0:	b084      	sub	sp, #16
    2bf2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2bf4:	4b09      	ldr	r3, [pc, #36]	; (2c1c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2bf6:	691b      	ldr	r3, [r3, #16]
    2bf8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    2bfa:	9b03      	ldr	r3, [sp, #12]
    2bfc:	f023 0302 	bic.w	r3, r3, #2
    2c00:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    2c02:	9b01      	ldr	r3, [sp, #4]
    2c04:	889b      	ldrh	r3, [r3, #4]
    2c06:	005b      	lsls	r3, r3, #1
    2c08:	9a03      	ldr	r2, [sp, #12]
    2c0a:	4313      	orrs	r3, r2
    2c0c:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2c0e:	4a03      	ldr	r2, [pc, #12]	; (2c1c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2c10:	9b03      	ldr	r3, [sp, #12]
    2c12:	6113      	str	r3, [r2, #16]
}
    2c14:	bf00      	nop
    2c16:	b004      	add	sp, #16
    2c18:	4770      	bx	lr
    2c1a:	bf00      	nop
    2c1c:	40048000 	.word	0x40048000

00002c20 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2c20:	b084      	sub	sp, #16
    2c22:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2c24:	4b09      	ldr	r3, [pc, #36]	; (2c4c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2c26:	685b      	ldr	r3, [r3, #4]
    2c28:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    2c2a:	9b03      	ldr	r3, [sp, #12]
    2c2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2c30:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    2c32:	9b01      	ldr	r3, [sp, #4]
    2c34:	889b      	ldrh	r3, [r3, #4]
    2c36:	02db      	lsls	r3, r3, #11
    2c38:	9a03      	ldr	r2, [sp, #12]
    2c3a:	4313      	orrs	r3, r2
    2c3c:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2c3e:	4a03      	ldr	r2, [pc, #12]	; (2c4c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2c40:	9b03      	ldr	r3, [sp, #12]
    2c42:	6053      	str	r3, [r2, #4]
}
    2c44:	bf00      	nop
    2c46:	b004      	add	sp, #16
    2c48:	4770      	bx	lr
    2c4a:	bf00      	nop
    2c4c:	40048000 	.word	0x40048000

00002c50 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2c50:	b084      	sub	sp, #16
    2c52:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    2c54:	4913      	ldr	r1, [pc, #76]	; (2ca4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2c56:	9b01      	ldr	r3, [sp, #4]
    2c58:	681a      	ldr	r2, [r3, #0]
    2c5a:	4813      	ldr	r0, [pc, #76]	; (2ca8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2c5c:	4613      	mov	r3, r2
    2c5e:	00db      	lsls	r3, r3, #3
    2c60:	4413      	add	r3, r2
    2c62:	4403      	add	r3, r0
    2c64:	3306      	adds	r3, #6
    2c66:	781b      	ldrb	r3, [r3, #0]
    2c68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2c6c:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    2c6e:	9b03      	ldr	r3, [sp, #12]
    2c70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    2c74:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    2c76:	9b01      	ldr	r3, [sp, #4]
    2c78:	889b      	ldrh	r3, [r3, #4]
    2c7a:	079b      	lsls	r3, r3, #30
    2c7c:	9a03      	ldr	r2, [sp, #12]
    2c7e:	4313      	orrs	r3, r2
    2c80:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    2c82:	4908      	ldr	r1, [pc, #32]	; (2ca4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2c84:	9b01      	ldr	r3, [sp, #4]
    2c86:	681a      	ldr	r2, [r3, #0]
    2c88:	4807      	ldr	r0, [pc, #28]	; (2ca8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2c8a:	4613      	mov	r3, r2
    2c8c:	00db      	lsls	r3, r3, #3
    2c8e:	4413      	add	r3, r2
    2c90:	4403      	add	r3, r0
    2c92:	3306      	adds	r3, #6
    2c94:	781b      	ldrb	r3, [r3, #0]
    2c96:	461a      	mov	r2, r3
    2c98:	9b03      	ldr	r3, [sp, #12]
    2c9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    2c9e:	bf00      	nop
    2ca0:	b004      	add	sp, #16
    2ca2:	4770      	bx	lr
    2ca4:	40065000 	.word	0x40065000
    2ca8:	0000bad0 	.word	0x0000bad0

00002cac <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2cac:	b086      	sub	sp, #24
    2cae:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    2cb0:	9b01      	ldr	r3, [sp, #4]
    2cb2:	889b      	ldrh	r3, [r3, #4]
    2cb4:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    2cb6:	9b01      	ldr	r3, [sp, #4]
    2cb8:	681a      	ldr	r2, [r3, #0]
    2cba:	4910      	ldr	r1, [pc, #64]	; (2cfc <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    2cbc:	4613      	mov	r3, r2
    2cbe:	00db      	lsls	r3, r3, #3
    2cc0:	4413      	add	r3, r2
    2cc2:	440b      	add	r3, r1
    2cc4:	3306      	adds	r3, #6
    2cc6:	781b      	ldrb	r3, [r3, #0]
    2cc8:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    2cca:	4b0d      	ldr	r3, [pc, #52]	; (2d00 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2cce:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    2cd0:	2201      	movs	r2, #1
    2cd2:	9b04      	ldr	r3, [sp, #16]
    2cd4:	fa02 f303 	lsl.w	r3, r2, r3
    2cd8:	43db      	mvns	r3, r3
    2cda:	9a03      	ldr	r2, [sp, #12]
    2cdc:	4013      	ands	r3, r2
    2cde:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    2ce0:	9a05      	ldr	r2, [sp, #20]
    2ce2:	9b04      	ldr	r3, [sp, #16]
    2ce4:	fa02 f303 	lsl.w	r3, r2, r3
    2ce8:	9a03      	ldr	r2, [sp, #12]
    2cea:	4313      	orrs	r3, r2
    2cec:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    2cee:	4a04      	ldr	r2, [pc, #16]	; (2d00 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2cf0:	9b03      	ldr	r3, [sp, #12]
    2cf2:	6413      	str	r3, [r2, #64]	; 0x40
}
    2cf4:	bf00      	nop
    2cf6:	b006      	add	sp, #24
    2cf8:	4770      	bx	lr
    2cfa:	bf00      	nop
    2cfc:	0000bad0 	.word	0x0000bad0
    2d00:	40048000 	.word	0x40048000

00002d04 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2d04:	b084      	sub	sp, #16
    2d06:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    2d08:	4b0a      	ldr	r3, [pc, #40]	; (2d34 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2d0c:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    2d0e:	9b01      	ldr	r3, [sp, #4]
    2d10:	889b      	ldrh	r3, [r3, #4]
    2d12:	2b01      	cmp	r3, #1
    2d14:	d104      	bne.n	2d20 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    2d16:	9b03      	ldr	r3, [sp, #12]
    2d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2d1c:	9303      	str	r3, [sp, #12]
    2d1e:	e003      	b.n	2d28 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2d20:	9b03      	ldr	r3, [sp, #12]
    2d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2d26:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    2d28:	4a02      	ldr	r2, [pc, #8]	; (2d34 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2d2a:	9b03      	ldr	r3, [sp, #12]
    2d2c:	6693      	str	r3, [r2, #104]	; 0x68
}
    2d2e:	bf00      	nop
    2d30:	b004      	add	sp, #16
    2d32:	4770      	bx	lr
    2d34:	40048000 	.word	0x40048000

00002d38 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    2d38:	b082      	sub	sp, #8
    2d3a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2d3c:	bf00      	nop
    2d3e:	b002      	add	sp, #8
    2d40:	4770      	bx	lr

00002d42 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    2d42:	b082      	sub	sp, #8
    2d44:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2d46:	bf00      	nop
    2d48:	b002      	add	sp, #8
    2d4a:	4770      	bx	lr

00002d4c <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2d4c:	b500      	push	{lr}
    2d4e:	b083      	sub	sp, #12
    2d50:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d52:	9b01      	ldr	r3, [sp, #4]
    2d54:	2b00      	cmp	r3, #0
    2d56:	d002      	beq.n	2d5e <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    2d58:	9801      	ldr	r0, [sp, #4]
    2d5a:	f000 f8d1 	bl	2f00 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d5e:	bf00      	nop
    2d60:	b003      	add	sp, #12
    2d62:	f85d fb04 	ldr.w	pc, [sp], #4

00002d66 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2d66:	b500      	push	{lr}
    2d68:	b083      	sub	sp, #12
    2d6a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d6c:	9b01      	ldr	r3, [sp, #4]
    2d6e:	2b00      	cmp	r3, #0
    2d70:	d002      	beq.n	2d78 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    2d72:	9801      	ldr	r0, [sp, #4]
    2d74:	f000 f950 	bl	3018 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d78:	bf00      	nop
    2d7a:	b003      	add	sp, #12
    2d7c:	f85d fb04 	ldr.w	pc, [sp], #4

00002d80 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    2d80:	b500      	push	{lr}
    2d82:	b083      	sub	sp, #12
    2d84:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    2d86:	9801      	ldr	r0, [sp, #4]
    2d88:	f000 f98e 	bl	30a8 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2d8c:	bf00      	nop
    2d8e:	b003      	add	sp, #12
    2d90:	f85d fb04 	ldr.w	pc, [sp], #4

00002d94 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2d94:	b500      	push	{lr}
    2d96:	b083      	sub	sp, #12
    2d98:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d9a:	9b01      	ldr	r3, [sp, #4]
    2d9c:	2b00      	cmp	r3, #0
    2d9e:	d002      	beq.n	2da6 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    2da0:	9801      	ldr	r0, [sp, #4]
    2da2:	f000 f999 	bl	30d8 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2da6:	bf00      	nop
    2da8:	b003      	add	sp, #12
    2daa:	f85d fb04 	ldr.w	pc, [sp], #4

00002dae <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2dae:	b500      	push	{lr}
    2db0:	b083      	sub	sp, #12
    2db2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2db4:	9b01      	ldr	r3, [sp, #4]
    2db6:	2b00      	cmp	r3, #0
    2db8:	d002      	beq.n	2dc0 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    2dba:	9801      	ldr	r0, [sp, #4]
    2dbc:	f000 f9b0 	bl	3120 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2dc0:	bf00      	nop
    2dc2:	b003      	add	sp, #12
    2dc4:	f85d fb04 	ldr.w	pc, [sp], #4

00002dc8 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    2dc8:	b500      	push	{lr}
    2dca:	b083      	sub	sp, #12
    2dcc:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    2dce:	9801      	ldr	r0, [sp, #4]
    2dd0:	f000 f9ba 	bl	3148 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2dd4:	bf00      	nop
    2dd6:	b003      	add	sp, #12
    2dd8:	f85d fb04 	ldr.w	pc, [sp], #4

00002ddc <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2ddc:	b500      	push	{lr}
    2dde:	b083      	sub	sp, #12
    2de0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2de2:	9b01      	ldr	r3, [sp, #4]
    2de4:	2b00      	cmp	r3, #0
    2de6:	d002      	beq.n	2dee <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    2de8:	9801      	ldr	r0, [sp, #4]
    2dea:	f000 f9bd 	bl	3168 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2dee:	bf00      	nop
    2df0:	b003      	add	sp, #12
    2df2:	f85d fb04 	ldr.w	pc, [sp], #4

00002df6 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2df6:	b500      	push	{lr}
    2df8:	b083      	sub	sp, #12
    2dfa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2dfc:	9b01      	ldr	r3, [sp, #4]
    2dfe:	2b00      	cmp	r3, #0
    2e00:	d002      	beq.n	2e08 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    2e02:	9801      	ldr	r0, [sp, #4]
    2e04:	f000 f9d4 	bl	31b0 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e08:	bf00      	nop
    2e0a:	b003      	add	sp, #12
    2e0c:	f85d fb04 	ldr.w	pc, [sp], #4

00002e10 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    2e10:	b500      	push	{lr}
    2e12:	b083      	sub	sp, #12
    2e14:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    2e16:	9801      	ldr	r0, [sp, #4]
    2e18:	f000 f9de 	bl	31d8 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2e1c:	bf00      	nop
    2e1e:	b003      	add	sp, #12
    2e20:	f85d fb04 	ldr.w	pc, [sp], #4

00002e24 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    2e24:	b500      	push	{lr}
    2e26:	b089      	sub	sp, #36	; 0x24
    2e28:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    2e2a:	2300      	movs	r3, #0
    2e2c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    2e30:	4b20      	ldr	r3, [pc, #128]	; (2eb4 <SetInputSouceSytemClock+0x90>)
    2e32:	695b      	ldr	r3, [r3, #20]
    2e34:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    2e36:	9b06      	ldr	r3, [sp, #24]
    2e38:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    2e3c:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    2e3e:	9b01      	ldr	r3, [sp, #4]
    2e40:	061b      	lsls	r3, r3, #24
    2e42:	9a06      	ldr	r2, [sp, #24]
    2e44:	4313      	orrs	r3, r2
    2e46:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    2e48:	4a1a      	ldr	r2, [pc, #104]	; (2eb4 <SetInputSouceSytemClock+0x90>)
    2e4a:	9b06      	ldr	r3, [sp, #24]
    2e4c:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2e4e:	aa02      	add	r2, sp, #8
    2e50:	a903      	add	r1, sp, #12
    2e52:	a804      	add	r0, sp, #16
    2e54:	f24c 3350 	movw	r3, #50000	; 0xc350
    2e58:	f7ff f9ac 	bl	21b4 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    2e5c:	4b15      	ldr	r3, [pc, #84]	; (2eb4 <SetInputSouceSytemClock+0x90>)
    2e5e:	691b      	ldr	r3, [r3, #16]
    2e60:	0e1b      	lsrs	r3, r3, #24
    2e62:	f003 030f 	and.w	r3, r3, #15
    2e66:	9a01      	ldr	r2, [sp, #4]
    2e68:	429a      	cmp	r2, r3
    2e6a:	bf0c      	ite	eq
    2e6c:	2301      	moveq	r3, #1
    2e6e:	2300      	movne	r3, #0
    2e70:	b2db      	uxtb	r3, r3
    2e72:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2e74:	9a02      	ldr	r2, [sp, #8]
    2e76:	a903      	add	r1, sp, #12
    2e78:	ab04      	add	r3, sp, #16
    2e7a:	4618      	mov	r0, r3
    2e7c:	f7ff f9b4 	bl	21e8 <Clock_Ip_TimeoutExpired>
    2e80:	4603      	mov	r3, r0
    2e82:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    2e86:	9b05      	ldr	r3, [sp, #20]
    2e88:	2b00      	cmp	r3, #0
    2e8a:	d106      	bne.n	2e9a <SetInputSouceSytemClock+0x76>
    2e8c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e90:	f083 0301 	eor.w	r3, r3, #1
    2e94:	b2db      	uxtb	r3, r3
    2e96:	2b00      	cmp	r3, #0
    2e98:	d1e0      	bne.n	2e5c <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    2e9a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	d003      	beq.n	2eaa <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    2ea2:	2105      	movs	r1, #5
    2ea4:	2001      	movs	r0, #1
    2ea6:	f7ff f975 	bl	2194 <Clock_Ip_ReportClockErrors>
    }
}
    2eaa:	bf00      	nop
    2eac:	b009      	add	sp, #36	; 0x24
    2eae:	f85d fb04 	ldr.w	pc, [sp], #4
    2eb2:	bf00      	nop
    2eb4:	40064000 	.word	0x40064000

00002eb8 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2eb8:	b500      	push	{lr}
    2eba:	b083      	sub	sp, #12
    2ebc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ebe:	9b01      	ldr	r3, [sp, #4]
    2ec0:	2b00      	cmp	r3, #0
    2ec2:	d002      	beq.n	2eca <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    2ec4:	9801      	ldr	r0, [sp, #4]
    2ec6:	f000 f997 	bl	31f8 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2eca:	bf00      	nop
    2ecc:	b003      	add	sp, #12
    2ece:	f85d fb04 	ldr.w	pc, [sp], #4

00002ed2 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2ed2:	b500      	push	{lr}
    2ed4:	b083      	sub	sp, #12
    2ed6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ed8:	9b01      	ldr	r3, [sp, #4]
    2eda:	2b00      	cmp	r3, #0
    2edc:	d002      	beq.n	2ee4 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    2ede:	9801      	ldr	r0, [sp, #4]
    2ee0:	f000 fa7e 	bl	33e0 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ee4:	bf00      	nop
    2ee6:	b003      	add	sp, #12
    2ee8:	f85d fb04 	ldr.w	pc, [sp], #4

00002eec <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    2eec:	b500      	push	{lr}
    2eee:	b083      	sub	sp, #12
    2ef0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    2ef2:	9801      	ldr	r0, [sp, #4]
    2ef4:	f000 fab8 	bl	3468 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2ef8:	bf00      	nop
    2efa:	b003      	add	sp, #12
    2efc:	f85d fb04 	ldr.w	pc, [sp], #4

00002f00 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2f00:	b500      	push	{lr}
    2f02:	b08b      	sub	sp, #44	; 0x2c
    2f04:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2f06:	2300      	movs	r3, #0
    2f08:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    2f0c:	9b01      	ldr	r3, [sp, #4]
    2f0e:	2b00      	cmp	r3, #0
    2f10:	d10b      	bne.n	2f2a <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    2f12:	2305      	movs	r3, #5
    2f14:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    2f16:	2301      	movs	r3, #1
    2f18:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    2f1c:	2301      	movs	r3, #1
    2f1e:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    2f22:	2301      	movs	r3, #1
    2f24:	f88d 3010 	strb.w	r3, [sp, #16]
    2f28:	e00e      	b.n	2f48 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    2f2a:	9b01      	ldr	r3, [sp, #4]
    2f2c:	681b      	ldr	r3, [r3, #0]
    2f2e:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    2f30:	9b01      	ldr	r3, [sp, #4]
    2f32:	79db      	ldrb	r3, [r3, #7]
    2f34:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    2f38:	9b01      	ldr	r3, [sp, #4]
    2f3a:	889b      	ldrh	r3, [r3, #4]
    2f3c:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    2f40:	9b01      	ldr	r3, [sp, #4]
    2f42:	7a1b      	ldrb	r3, [r3, #8]
    2f44:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2f48:	4b32      	ldr	r3, [pc, #200]	; (3014 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f4e:	4a31      	ldr	r2, [pc, #196]	; (3014 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2f54:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    2f58:	4b2e      	ldr	r3, [pc, #184]	; (3014 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f5e:	4a2d      	ldr	r2, [pc, #180]	; (3014 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f60:	f023 0301 	bic.w	r3, r3, #1
    2f64:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2f68:	4b2a      	ldr	r3, [pc, #168]	; (3014 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f6e:	4a29      	ldr	r2, [pc, #164]	; (3014 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f70:	f023 0304 	bic.w	r3, r3, #4
    2f74:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    2f78:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    2f7c:	2b01      	cmp	r3, #1
    2f7e:	d144      	bne.n	300a <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    2f80:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2f84:	4a23      	ldr	r2, [pc, #140]	; (3014 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f86:	f003 0301 	and.w	r3, r3, #1
    2f8a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2f8e:	4b21      	ldr	r3, [pc, #132]	; (3014 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f94:	4a1f      	ldr	r2, [pc, #124]	; (3014 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f96:	f043 0301 	orr.w	r3, r3, #1
    2f9a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    2f9e:	4b1d      	ldr	r3, [pc, #116]	; (3014 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2fa0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2fa4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2fa8:	009b      	lsls	r3, r3, #2
    2faa:	f003 0304 	and.w	r3, r3, #4
    2fae:	4919      	ldr	r1, [pc, #100]	; (3014 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2fb0:	4313      	orrs	r3, r2
    2fb2:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2fb6:	aa05      	add	r2, sp, #20
    2fb8:	a906      	add	r1, sp, #24
    2fba:	a807      	add	r0, sp, #28
    2fbc:	f24c 3350 	movw	r3, #50000	; 0xc350
    2fc0:	f7ff f8f8 	bl	21b4 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2fc4:	4b13      	ldr	r3, [pc, #76]	; (3014 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2fc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fca:	0e1b      	lsrs	r3, r3, #24
    2fcc:	f003 0301 	and.w	r3, r3, #1
    2fd0:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2fd2:	9a05      	ldr	r2, [sp, #20]
    2fd4:	a906      	add	r1, sp, #24
    2fd6:	ab07      	add	r3, sp, #28
    2fd8:	4618      	mov	r0, r3
    2fda:	f7ff f905 	bl	21e8 <Clock_Ip_TimeoutExpired>
    2fde:	4603      	mov	r3, r0
    2fe0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2fe4:	9b08      	ldr	r3, [sp, #32]
    2fe6:	2b00      	cmp	r3, #0
    2fe8:	d106      	bne.n	2ff8 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    2fea:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2fee:	f083 0301 	eor.w	r3, r3, #1
    2ff2:	b2db      	uxtb	r3, r3
    2ff4:	2b00      	cmp	r3, #0
    2ff6:	d1e5      	bne.n	2fc4 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    2ff8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2ffc:	2b00      	cmp	r3, #0
    2ffe:	d004      	beq.n	300a <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3000:	9b02      	ldr	r3, [sp, #8]
    3002:	4619      	mov	r1, r3
    3004:	2001      	movs	r0, #1
    3006:	f7ff f8c5 	bl	2194 <Clock_Ip_ReportClockErrors>
        }
    }
}
    300a:	bf00      	nop
    300c:	b00b      	add	sp, #44	; 0x2c
    300e:	f85d fb04 	ldr.w	pc, [sp], #4
    3012:	bf00      	nop
    3014:	40064000 	.word	0x40064000

00003018 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3018:	b500      	push	{lr}
    301a:	b089      	sub	sp, #36	; 0x24
    301c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    301e:	2300      	movs	r3, #0
    3020:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3024:	4b1f      	ldr	r3, [pc, #124]	; (30a4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3026:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    302a:	4a1e      	ldr	r2, [pc, #120]	; (30a4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    302c:	f043 0301 	orr.w	r3, r3, #1
    3030:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3034:	4b1b      	ldr	r3, [pc, #108]	; (30a4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3036:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    303a:	4a1a      	ldr	r2, [pc, #104]	; (30a4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    303c:	f043 0304 	orr.w	r3, r3, #4
    3040:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3044:	aa03      	add	r2, sp, #12
    3046:	a904      	add	r1, sp, #16
    3048:	a805      	add	r0, sp, #20
    304a:	f24c 3350 	movw	r3, #50000	; 0xc350
    304e:	f7ff f8b1 	bl	21b4 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3052:	4b14      	ldr	r3, [pc, #80]	; (30a4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3054:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3058:	0e1b      	lsrs	r3, r3, #24
    305a:	f003 0301 	and.w	r3, r3, #1
    305e:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3060:	9a03      	ldr	r2, [sp, #12]
    3062:	a904      	add	r1, sp, #16
    3064:	ab05      	add	r3, sp, #20
    3066:	4618      	mov	r0, r3
    3068:	f7ff f8be 	bl	21e8 <Clock_Ip_TimeoutExpired>
    306c:	4603      	mov	r3, r0
    306e:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3072:	9b06      	ldr	r3, [sp, #24]
    3074:	2b00      	cmp	r3, #0
    3076:	d106      	bne.n	3086 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3078:	f89d 301f 	ldrb.w	r3, [sp, #31]
    307c:	f083 0301 	eor.w	r3, r3, #1
    3080:	b2db      	uxtb	r3, r3
    3082:	2b00      	cmp	r3, #0
    3084:	d1e5      	bne.n	3052 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3086:	f89d 301f 	ldrb.w	r3, [sp, #31]
    308a:	2b00      	cmp	r3, #0
    308c:	d005      	beq.n	309a <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    308e:	9b01      	ldr	r3, [sp, #4]
    3090:	681b      	ldr	r3, [r3, #0]
    3092:	4619      	mov	r1, r3
    3094:	2001      	movs	r0, #1
    3096:	f7ff f87d 	bl	2194 <Clock_Ip_ReportClockErrors>
    }
}
    309a:	bf00      	nop
    309c:	b009      	add	sp, #36	; 0x24
    309e:	f85d fb04 	ldr.w	pc, [sp], #4
    30a2:	bf00      	nop
    30a4:	40064000 	.word	0x40064000

000030a8 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    30a8:	b082      	sub	sp, #8
    30aa:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    30ac:	4b09      	ldr	r3, [pc, #36]	; (30d4 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    30ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30b2:	4a08      	ldr	r2, [pc, #32]	; (30d4 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    30b4:	f023 0301 	bic.w	r3, r3, #1
    30b8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    30bc:	4b05      	ldr	r3, [pc, #20]	; (30d4 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    30be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30c2:	4a04      	ldr	r2, [pc, #16]	; (30d4 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    30c4:	f023 0304 	bic.w	r3, r3, #4
    30c8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    30cc:	bf00      	nop
    30ce:	b002      	add	sp, #8
    30d0:	4770      	bx	lr
    30d2:	bf00      	nop
    30d4:	40064000 	.word	0x40064000

000030d8 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    30d8:	b082      	sub	sp, #8
    30da:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    30dc:	4b0f      	ldr	r3, [pc, #60]	; (311c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    30de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30e2:	4a0e      	ldr	r2, [pc, #56]	; (311c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    30e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    30e8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    30ec:	4b0b      	ldr	r3, [pc, #44]	; (311c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    30ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30f2:	4a0a      	ldr	r2, [pc, #40]	; (311c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    30f4:	f023 0304 	bic.w	r3, r3, #4
    30f8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    30fc:	4b07      	ldr	r3, [pc, #28]	; (311c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    30fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3102:	9b01      	ldr	r3, [sp, #4]
    3104:	7a1b      	ldrb	r3, [r3, #8]
    3106:	009b      	lsls	r3, r3, #2
    3108:	f003 0304 	and.w	r3, r3, #4
    310c:	4903      	ldr	r1, [pc, #12]	; (311c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    310e:	4313      	orrs	r3, r2
    3110:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3114:	bf00      	nop
    3116:	b002      	add	sp, #8
    3118:	4770      	bx	lr
    311a:	bf00      	nop
    311c:	40064000 	.word	0x40064000

00003120 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3120:	b082      	sub	sp, #8
    3122:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3124:	9b01      	ldr	r3, [sp, #4]
    3126:	889b      	ldrh	r3, [r3, #4]
    3128:	2b01      	cmp	r3, #1
    312a:	d107      	bne.n	313c <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    312c:	4b05      	ldr	r3, [pc, #20]	; (3144 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    312e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3132:	4a04      	ldr	r2, [pc, #16]	; (3144 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3134:	f043 0304 	orr.w	r3, r3, #4
    3138:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    313c:	bf00      	nop
    313e:	b002      	add	sp, #8
    3140:	4770      	bx	lr
    3142:	bf00      	nop
    3144:	40064000 	.word	0x40064000

00003148 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3148:	b082      	sub	sp, #8
    314a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    314c:	4b05      	ldr	r3, [pc, #20]	; (3164 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    314e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3152:	4a04      	ldr	r2, [pc, #16]	; (3164 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3154:	f023 0304 	bic.w	r3, r3, #4
    3158:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    315c:	bf00      	nop
    315e:	b002      	add	sp, #8
    3160:	4770      	bx	lr
    3162:	bf00      	nop
    3164:	40064000 	.word	0x40064000

00003168 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3168:	b082      	sub	sp, #8
    316a:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    316c:	4b0f      	ldr	r3, [pc, #60]	; (31ac <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    316e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3172:	4a0e      	ldr	r2, [pc, #56]	; (31ac <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3174:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3178:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    317c:	4b0b      	ldr	r3, [pc, #44]	; (31ac <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    317e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3182:	4a0a      	ldr	r2, [pc, #40]	; (31ac <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3184:	f023 0302 	bic.w	r3, r3, #2
    3188:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    318c:	4b07      	ldr	r3, [pc, #28]	; (31ac <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    318e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3192:	9b01      	ldr	r3, [sp, #4]
    3194:	7a5b      	ldrb	r3, [r3, #9]
    3196:	005b      	lsls	r3, r3, #1
    3198:	f003 0302 	and.w	r3, r3, #2
    319c:	4903      	ldr	r1, [pc, #12]	; (31ac <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    319e:	4313      	orrs	r3, r2
    31a0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    31a4:	bf00      	nop
    31a6:	b002      	add	sp, #8
    31a8:	4770      	bx	lr
    31aa:	bf00      	nop
    31ac:	40064000 	.word	0x40064000

000031b0 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    31b0:	b082      	sub	sp, #8
    31b2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    31b4:	9b01      	ldr	r3, [sp, #4]
    31b6:	889b      	ldrh	r3, [r3, #4]
    31b8:	2b01      	cmp	r3, #1
    31ba:	d107      	bne.n	31cc <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    31bc:	4b05      	ldr	r3, [pc, #20]	; (31d4 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    31be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    31c2:	4a04      	ldr	r2, [pc, #16]	; (31d4 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    31c4:	f043 0302 	orr.w	r3, r3, #2
    31c8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    31cc:	bf00      	nop
    31ce:	b002      	add	sp, #8
    31d0:	4770      	bx	lr
    31d2:	bf00      	nop
    31d4:	40064000 	.word	0x40064000

000031d8 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    31d8:	b082      	sub	sp, #8
    31da:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    31dc:	4b05      	ldr	r3, [pc, #20]	; (31f4 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    31de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    31e2:	4a04      	ldr	r2, [pc, #16]	; (31f4 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    31e4:	f023 0302 	bic.w	r3, r3, #2
    31e8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    31ec:	bf00      	nop
    31ee:	b002      	add	sp, #8
    31f0:	4770      	bx	lr
    31f2:	bf00      	nop
    31f4:	40064000 	.word	0x40064000

000031f8 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    31f8:	b500      	push	{lr}
    31fa:	b08b      	sub	sp, #44	; 0x2c
    31fc:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    31fe:	9b01      	ldr	r3, [sp, #4]
    3200:	681a      	ldr	r2, [r3, #0]
    3202:	4975      	ldr	r1, [pc, #468]	; (33d8 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3204:	4613      	mov	r3, r2
    3206:	00db      	lsls	r3, r3, #3
    3208:	4413      	add	r3, r2
    320a:	440b      	add	r3, r1
    320c:	781b      	ldrb	r3, [r3, #0]
    320e:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3210:	2300      	movs	r3, #0
    3212:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3216:	2300      	movs	r3, #0
    3218:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    321c:	4b6f      	ldr	r3, [pc, #444]	; (33dc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    321e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3222:	4a6e      	ldr	r2, [pc, #440]	; (33dc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3224:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3228:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    322c:	4b6b      	ldr	r3, [pc, #428]	; (33dc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    322e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3236:	2b00      	cmp	r3, #0
    3238:	d07d      	beq.n	3336 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    323a:	9b01      	ldr	r3, [sp, #4]
    323c:	79db      	ldrb	r3, [r3, #7]
    323e:	461a      	mov	r2, r3
    3240:	4b66      	ldr	r3, [pc, #408]	; (33dc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3242:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3246:	f003 0303 	and.w	r3, r3, #3
    324a:	429a      	cmp	r2, r3
    324c:	d10b      	bne.n	3266 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    324e:	9b01      	ldr	r3, [sp, #4]
    3250:	799b      	ldrb	r3, [r3, #6]
    3252:	461a      	mov	r2, r3
    3254:	4b61      	ldr	r3, [pc, #388]	; (33dc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3256:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    325a:	08db      	lsrs	r3, r3, #3
    325c:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3260:	429a      	cmp	r2, r3
    3262:	f000 80b4 	beq.w	33ce <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3266:	4b5d      	ldr	r3, [pc, #372]	; (33dc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3268:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    326c:	f003 0301 	and.w	r3, r3, #1
    3270:	2b00      	cmp	r3, #0
    3272:	d105      	bne.n	3280 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3274:	2301      	movs	r3, #1
    3276:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    327a:	2000      	movs	r0, #0
    327c:	f7ff fd66 	bl	2d4c <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3280:	2002      	movs	r0, #2
    3282:	f7ff fdcf 	bl	2e24 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3286:	4b55      	ldr	r3, [pc, #340]	; (33dc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3288:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    328c:	4a53      	ldr	r2, [pc, #332]	; (33dc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    328e:	f023 0301 	bic.w	r3, r3, #1
    3292:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3296:	9b01      	ldr	r3, [sp, #4]
    3298:	889b      	ldrh	r3, [r3, #4]
    329a:	2b01      	cmp	r3, #1
    329c:	f040 8097 	bne.w	33ce <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    32a0:	9b01      	ldr	r3, [sp, #4]
    32a2:	79db      	ldrb	r3, [r3, #7]
    32a4:	4a4d      	ldr	r2, [pc, #308]	; (33dc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32a6:	f003 0303 	and.w	r3, r3, #3
    32aa:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    32ae:	4b4b      	ldr	r3, [pc, #300]	; (33dc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32b0:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    32b4:	9b01      	ldr	r3, [sp, #4]
    32b6:	799b      	ldrb	r3, [r3, #6]
    32b8:	00db      	lsls	r3, r3, #3
    32ba:	f003 0308 	and.w	r3, r3, #8
    32be:	4313      	orrs	r3, r2
    32c0:	4a46      	ldr	r2, [pc, #280]	; (33dc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32c2:	f043 0301 	orr.w	r3, r3, #1
    32c6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    32ca:	aa03      	add	r2, sp, #12
    32cc:	a904      	add	r1, sp, #16
    32ce:	a805      	add	r0, sp, #20
    32d0:	f24c 3350 	movw	r3, #50000	; 0xc350
    32d4:	f7fe ff6e 	bl	21b4 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    32d8:	4b40      	ldr	r3, [pc, #256]	; (33dc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    32de:	0e1b      	lsrs	r3, r3, #24
    32e0:	f003 0301 	and.w	r3, r3, #1
    32e4:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    32e6:	9a03      	ldr	r2, [sp, #12]
    32e8:	a904      	add	r1, sp, #16
    32ea:	ab05      	add	r3, sp, #20
    32ec:	4618      	mov	r0, r3
    32ee:	f7fe ff7b 	bl	21e8 <Clock_Ip_TimeoutExpired>
    32f2:	4603      	mov	r3, r0
    32f4:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    32f8:	9b06      	ldr	r3, [sp, #24]
    32fa:	2b00      	cmp	r3, #0
    32fc:	d106      	bne.n	330c <Clock_Ip_SetFirc_TrustedCall+0x114>
    32fe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3302:	f083 0301 	eor.w	r3, r3, #1
    3306:	b2db      	uxtb	r3, r3
    3308:	2b00      	cmp	r3, #0
    330a:	d1e5      	bne.n	32d8 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    330c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3310:	2b00      	cmp	r3, #0
    3312:	d005      	beq.n	3320 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3314:	9b01      	ldr	r3, [sp, #4]
    3316:	681b      	ldr	r3, [r3, #0]
    3318:	4619      	mov	r1, r3
    331a:	2001      	movs	r0, #1
    331c:	f7fe ff3a 	bl	2194 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3320:	2003      	movs	r0, #3
    3322:	f7ff fd7f 	bl	2e24 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3326:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    332a:	2b00      	cmp	r3, #0
    332c:	d04f      	beq.n	33ce <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    332e:	2002      	movs	r0, #2
    3330:	f7ff fd26 	bl	2d80 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3334:	e04b      	b.n	33ce <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3336:	4b29      	ldr	r3, [pc, #164]	; (33dc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3338:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    333c:	4a27      	ldr	r2, [pc, #156]	; (33dc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    333e:	f023 0301 	bic.w	r3, r3, #1
    3342:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3346:	9b01      	ldr	r3, [sp, #4]
    3348:	889b      	ldrh	r3, [r3, #4]
    334a:	2b01      	cmp	r3, #1
    334c:	d13f      	bne.n	33ce <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    334e:	9b01      	ldr	r3, [sp, #4]
    3350:	79db      	ldrb	r3, [r3, #7]
    3352:	4a22      	ldr	r2, [pc, #136]	; (33dc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3354:	f003 0303 	and.w	r3, r3, #3
    3358:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    335c:	4b1f      	ldr	r3, [pc, #124]	; (33dc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    335e:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3362:	9b01      	ldr	r3, [sp, #4]
    3364:	799b      	ldrb	r3, [r3, #6]
    3366:	00db      	lsls	r3, r3, #3
    3368:	f003 0308 	and.w	r3, r3, #8
    336c:	4313      	orrs	r3, r2
    336e:	4a1b      	ldr	r2, [pc, #108]	; (33dc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3370:	f043 0301 	orr.w	r3, r3, #1
    3374:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3378:	aa03      	add	r2, sp, #12
    337a:	a904      	add	r1, sp, #16
    337c:	a805      	add	r0, sp, #20
    337e:	f24c 3350 	movw	r3, #50000	; 0xc350
    3382:	f7fe ff17 	bl	21b4 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3386:	4b15      	ldr	r3, [pc, #84]	; (33dc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3388:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    338c:	0e1b      	lsrs	r3, r3, #24
    338e:	f003 0301 	and.w	r3, r3, #1
    3392:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3394:	9a03      	ldr	r2, [sp, #12]
    3396:	a904      	add	r1, sp, #16
    3398:	ab05      	add	r3, sp, #20
    339a:	4618      	mov	r0, r3
    339c:	f7fe ff24 	bl	21e8 <Clock_Ip_TimeoutExpired>
    33a0:	4603      	mov	r3, r0
    33a2:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    33a6:	9b06      	ldr	r3, [sp, #24]
    33a8:	2b00      	cmp	r3, #0
    33aa:	d106      	bne.n	33ba <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    33ac:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33b0:	f083 0301 	eor.w	r3, r3, #1
    33b4:	b2db      	uxtb	r3, r3
    33b6:	2b00      	cmp	r3, #0
    33b8:	d1e5      	bne.n	3386 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    33ba:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33be:	2b00      	cmp	r3, #0
    33c0:	d005      	beq.n	33ce <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    33c2:	9b01      	ldr	r3, [sp, #4]
    33c4:	681b      	ldr	r3, [r3, #0]
    33c6:	4619      	mov	r1, r3
    33c8:	2001      	movs	r0, #1
    33ca:	f7fe fee3 	bl	2194 <Clock_Ip_ReportClockErrors>
}
    33ce:	bf00      	nop
    33d0:	b00b      	add	sp, #44	; 0x2c
    33d2:	f85d fb04 	ldr.w	pc, [sp], #4
    33d6:	bf00      	nop
    33d8:	0000bad0 	.word	0x0000bad0
    33dc:	40064000 	.word	0x40064000

000033e0 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    33e0:	b500      	push	{lr}
    33e2:	b089      	sub	sp, #36	; 0x24
    33e4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    33e6:	2300      	movs	r3, #0
    33e8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    33ec:	9b01      	ldr	r3, [sp, #4]
    33ee:	889b      	ldrh	r3, [r3, #4]
    33f0:	2b01      	cmp	r3, #1
    33f2:	d132      	bne.n	345a <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    33f4:	4b1b      	ldr	r3, [pc, #108]	; (3464 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    33f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    33fa:	4a1a      	ldr	r2, [pc, #104]	; (3464 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    33fc:	f043 0301 	orr.w	r3, r3, #1
    3400:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3404:	aa03      	add	r2, sp, #12
    3406:	a904      	add	r1, sp, #16
    3408:	a805      	add	r0, sp, #20
    340a:	f24c 3350 	movw	r3, #50000	; 0xc350
    340e:	f7fe fed1 	bl	21b4 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3412:	4b14      	ldr	r3, [pc, #80]	; (3464 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3414:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3418:	0e1b      	lsrs	r3, r3, #24
    341a:	f003 0301 	and.w	r3, r3, #1
    341e:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3420:	9a03      	ldr	r2, [sp, #12]
    3422:	a904      	add	r1, sp, #16
    3424:	ab05      	add	r3, sp, #20
    3426:	4618      	mov	r0, r3
    3428:	f7fe fede 	bl	21e8 <Clock_Ip_TimeoutExpired>
    342c:	4603      	mov	r3, r0
    342e:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3432:	9b06      	ldr	r3, [sp, #24]
    3434:	2b00      	cmp	r3, #0
    3436:	d106      	bne.n	3446 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3438:	f89d 301f 	ldrb.w	r3, [sp, #31]
    343c:	f083 0301 	eor.w	r3, r3, #1
    3440:	b2db      	uxtb	r3, r3
    3442:	2b00      	cmp	r3, #0
    3444:	d1e5      	bne.n	3412 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3446:	f89d 301f 	ldrb.w	r3, [sp, #31]
    344a:	2b00      	cmp	r3, #0
    344c:	d005      	beq.n	345a <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    344e:	9b01      	ldr	r3, [sp, #4]
    3450:	681b      	ldr	r3, [r3, #0]
    3452:	4619      	mov	r1, r3
    3454:	2001      	movs	r0, #1
    3456:	f7fe fe9d 	bl	2194 <Clock_Ip_ReportClockErrors>
        }
    }
}
    345a:	bf00      	nop
    345c:	b009      	add	sp, #36	; 0x24
    345e:	f85d fb04 	ldr.w	pc, [sp], #4
    3462:	bf00      	nop
    3464:	40064000 	.word	0x40064000

00003468 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3468:	b082      	sub	sp, #8
    346a:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    346c:	4b05      	ldr	r3, [pc, #20]	; (3484 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    346e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3472:	4a04      	ldr	r2, [pc, #16]	; (3484 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3474:	f023 0301 	bic.w	r3, r3, #1
    3478:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    347c:	bf00      	nop
    347e:	b002      	add	sp, #8
    3480:	4770      	bx	lr
    3482:	bf00      	nop
    3484:	40064000 	.word	0x40064000

00003488 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3488:	b082      	sub	sp, #8
    348a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    348c:	bf00      	nop
    348e:	b002      	add	sp, #8
    3490:	4770      	bx	lr

00003492 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3492:	b082      	sub	sp, #8
    3494:	9001      	str	r0, [sp, #4]
    3496:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3498:	bf00      	nop
    349a:	b002      	add	sp, #8
    349c:	4770      	bx	lr

0000349e <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    349e:	b082      	sub	sp, #8
    34a0:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    34a2:	bf00      	nop
    34a4:	b002      	add	sp, #8
    34a6:	4770      	bx	lr

000034a8 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    34a8:	b082      	sub	sp, #8
    34aa:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    34ac:	bf00      	nop
    34ae:	b002      	add	sp, #8
    34b0:	4770      	bx	lr

000034b2 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    34b2:	b082      	sub	sp, #8
    34b4:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    34b6:	2302      	movs	r3, #2
}
    34b8:	4618      	mov	r0, r3
    34ba:	b002      	add	sp, #8
    34bc:	4770      	bx	lr

000034be <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    34be:	b082      	sub	sp, #8
    34c0:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    34c2:	bf00      	nop
    34c4:	b002      	add	sp, #8
    34c6:	4770      	bx	lr

000034c8 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    34c8:	b500      	push	{lr}
    34ca:	b083      	sub	sp, #12
    34cc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34ce:	9b01      	ldr	r3, [sp, #4]
    34d0:	2b00      	cmp	r3, #0
    34d2:	d002      	beq.n	34da <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    34d4:	9801      	ldr	r0, [sp, #4]
    34d6:	f000 f870 	bl	35ba <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34da:	bf00      	nop
    34dc:	b003      	add	sp, #12
    34de:	f85d fb04 	ldr.w	pc, [sp], #4

000034e2 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    34e2:	b500      	push	{lr}
    34e4:	b083      	sub	sp, #12
    34e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34e8:	9b01      	ldr	r3, [sp, #4]
    34ea:	2b00      	cmp	r3, #0
    34ec:	d002      	beq.n	34f4 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    34ee:	9801      	ldr	r0, [sp, #4]
    34f0:	f000 f89a 	bl	3628 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34f4:	bf00      	nop
    34f6:	b003      	add	sp, #12
    34f8:	f85d fb04 	ldr.w	pc, [sp], #4

000034fc <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    34fc:	b500      	push	{lr}
    34fe:	b089      	sub	sp, #36	; 0x24
    3500:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3502:	2301      	movs	r3, #1
    3504:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3506:	2300      	movs	r3, #0
    3508:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    350c:	4b1e      	ldr	r3, [pc, #120]	; (3588 <Clock_Ip_CompleteSpll+0x8c>)
    350e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3512:	f003 0301 	and.w	r3, r3, #1
    3516:	2b00      	cmp	r3, #0
    3518:	d02f      	beq.n	357a <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    351a:	aa02      	add	r2, sp, #8
    351c:	a903      	add	r1, sp, #12
    351e:	a804      	add	r0, sp, #16
    3520:	f24c 3350 	movw	r3, #50000	; 0xc350
    3524:	f7fe fe46 	bl	21b4 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3528:	4b17      	ldr	r3, [pc, #92]	; (3588 <Clock_Ip_CompleteSpll+0x8c>)
    352a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    352e:	0e1b      	lsrs	r3, r3, #24
    3530:	f003 0301 	and.w	r3, r3, #1
    3534:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3536:	9a02      	ldr	r2, [sp, #8]
    3538:	a903      	add	r1, sp, #12
    353a:	ab04      	add	r3, sp, #16
    353c:	4618      	mov	r0, r3
    353e:	f7fe fe53 	bl	21e8 <Clock_Ip_TimeoutExpired>
    3542:	4603      	mov	r3, r0
    3544:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3548:	9b05      	ldr	r3, [sp, #20]
    354a:	2b00      	cmp	r3, #0
    354c:	d106      	bne.n	355c <Clock_Ip_CompleteSpll+0x60>
    354e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3552:	f083 0301 	eor.w	r3, r3, #1
    3556:	b2db      	uxtb	r3, r3
    3558:	2b00      	cmp	r3, #0
    355a:	d1e5      	bne.n	3528 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    355c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3560:	f083 0301 	eor.w	r3, r3, #1
    3564:	b2db      	uxtb	r3, r3
    3566:	2b00      	cmp	r3, #0
    3568:	d002      	beq.n	3570 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    356a:	2302      	movs	r3, #2
    356c:	9307      	str	r3, [sp, #28]
    356e:	e006      	b.n	357e <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3570:	9901      	ldr	r1, [sp, #4]
    3572:	2001      	movs	r0, #1
    3574:	f7fe fe0e 	bl	2194 <Clock_Ip_ReportClockErrors>
    3578:	e001      	b.n	357e <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    357a:	2300      	movs	r3, #0
    357c:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    357e:	9b07      	ldr	r3, [sp, #28]
}
    3580:	4618      	mov	r0, r3
    3582:	b009      	add	sp, #36	; 0x24
    3584:	f85d fb04 	ldr.w	pc, [sp], #4
    3588:	40064000 	.word	0x40064000

0000358c <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    358c:	b500      	push	{lr}
    358e:	b083      	sub	sp, #12
    3590:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3592:	9801      	ldr	r0, [sp, #4]
    3594:	f000 f886 	bl	36a4 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3598:	bf00      	nop
    359a:	b003      	add	sp, #12
    359c:	f85d fb04 	ldr.w	pc, [sp], #4

000035a0 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    35a0:	b500      	push	{lr}
    35a2:	b083      	sub	sp, #12
    35a4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    35a6:	9b01      	ldr	r3, [sp, #4]
    35a8:	2b00      	cmp	r3, #0
    35aa:	d002      	beq.n	35b2 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    35ac:	9801      	ldr	r0, [sp, #4]
    35ae:	f000 f891 	bl	36d4 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    35b2:	bf00      	nop
    35b4:	b003      	add	sp, #12
    35b6:	f85d fb04 	ldr.w	pc, [sp], #4

000035ba <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    35ba:	b082      	sub	sp, #8
    35bc:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    35be:	4b19      	ldr	r3, [pc, #100]	; (3624 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35c0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    35c4:	4a17      	ldr	r2, [pc, #92]	; (3624 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    35ca:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    35ce:	4b15      	ldr	r3, [pc, #84]	; (3624 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35d0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    35d4:	4a13      	ldr	r2, [pc, #76]	; (3624 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    35da:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    35de:	4b11      	ldr	r3, [pc, #68]	; (3624 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35e0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    35e4:	4a0f      	ldr	r2, [pc, #60]	; (3624 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35e6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    35ea:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    35ee:	4b0d      	ldr	r3, [pc, #52]	; (3624 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35f0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    35f4:	4a0b      	ldr	r2, [pc, #44]	; (3624 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35f6:	f023 0301 	bic.w	r3, r3, #1
    35fa:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    35fe:	4b09      	ldr	r3, [pc, #36]	; (3624 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3600:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3604:	4a07      	ldr	r2, [pc, #28]	; (3624 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3606:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    360a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    360e:	4b05      	ldr	r3, [pc, #20]	; (3624 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3610:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3614:	4a03      	ldr	r2, [pc, #12]	; (3624 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3616:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    361a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    361e:	bf00      	nop
    3620:	b002      	add	sp, #8
    3622:	4770      	bx	lr
    3624:	40064000 	.word	0x40064000

00003628 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3628:	b082      	sub	sp, #8
    362a:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    362c:	9b01      	ldr	r3, [sp, #4]
    362e:	889b      	ldrh	r3, [r3, #4]
    3630:	2b01      	cmp	r3, #1
    3632:	d12f      	bne.n	3694 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3634:	4b1a      	ldr	r3, [pc, #104]	; (36a0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3636:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    363a:	9b01      	ldr	r3, [sp, #4]
    363c:	7b5b      	ldrb	r3, [r3, #13]
    363e:	3b01      	subs	r3, #1
    3640:	021b      	lsls	r3, r3, #8
    3642:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    3646:	9b01      	ldr	r3, [sp, #4]
    3648:	7d1b      	ldrb	r3, [r3, #20]
    364a:	3b10      	subs	r3, #16
    364c:	041b      	lsls	r3, r3, #16
    364e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3652:	430b      	orrs	r3, r1
    3654:	4912      	ldr	r1, [pc, #72]	; (36a0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3656:	4313      	orrs	r3, r2
    3658:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    365c:	9b01      	ldr	r3, [sp, #4]
    365e:	7fdb      	ldrb	r3, [r3, #31]
    3660:	2b02      	cmp	r3, #2
    3662:	d011      	beq.n	3688 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3664:	2b02      	cmp	r3, #2
    3666:	dc17      	bgt.n	3698 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3668:	2b00      	cmp	r3, #0
    366a:	d002      	beq.n	3672 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    366c:	2b01      	cmp	r3, #1
    366e:	d005      	beq.n	367c <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3670:	e012      	b.n	3698 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    3672:	4b0b      	ldr	r3, [pc, #44]	; (36a0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3674:	2200      	movs	r2, #0
    3676:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    367a:	e00e      	b.n	369a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    367c:	4b08      	ldr	r3, [pc, #32]	; (36a0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    367e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3682:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3686:	e008      	b.n	369a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3688:	4b05      	ldr	r3, [pc, #20]	; (36a0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    368a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    368e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3692:	e002      	b.n	369a <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    3694:	bf00      	nop
    3696:	e000      	b.n	369a <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    3698:	bf00      	nop
}
    369a:	bf00      	nop
    369c:	b002      	add	sp, #8
    369e:	4770      	bx	lr
    36a0:	40064000 	.word	0x40064000

000036a4 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    36a4:	b082      	sub	sp, #8
    36a6:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    36a8:	4b09      	ldr	r3, [pc, #36]	; (36d0 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    36aa:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    36ae:	4a08      	ldr	r2, [pc, #32]	; (36d0 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    36b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    36b4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    36b8:	4b05      	ldr	r3, [pc, #20]	; (36d0 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    36ba:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    36be:	4a04      	ldr	r2, [pc, #16]	; (36d0 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    36c0:	f023 0301 	bic.w	r3, r3, #1
    36c4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    36c8:	bf00      	nop
    36ca:	b002      	add	sp, #8
    36cc:	4770      	bx	lr
    36ce:	bf00      	nop
    36d0:	40064000 	.word	0x40064000

000036d4 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    36d4:	b082      	sub	sp, #8
    36d6:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    36d8:	9b01      	ldr	r3, [sp, #4]
    36da:	889b      	ldrh	r3, [r3, #4]
    36dc:	2b01      	cmp	r3, #1
    36de:	d107      	bne.n	36f0 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    36e0:	4b05      	ldr	r3, [pc, #20]	; (36f8 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    36e2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    36e6:	4a04      	ldr	r2, [pc, #16]	; (36f8 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    36e8:	f043 0301 	orr.w	r3, r3, #1
    36ec:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    36f0:	bf00      	nop
    36f2:	b002      	add	sp, #8
    36f4:	4770      	bx	lr
    36f6:	bf00      	nop
    36f8:	40064000 	.word	0x40064000

000036fc <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    36fc:	b082      	sub	sp, #8
    36fe:	9001      	str	r0, [sp, #4]
    3700:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3702:	bf00      	nop
    3704:	b002      	add	sp, #8
    3706:	4770      	bx	lr

00003708 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    3708:	b082      	sub	sp, #8
    370a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    370c:	bf00      	nop
    370e:	b002      	add	sp, #8
    3710:	4770      	bx	lr

00003712 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3712:	b500      	push	{lr}
    3714:	b083      	sub	sp, #12
    3716:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3718:	9b01      	ldr	r3, [sp, #4]
    371a:	2b00      	cmp	r3, #0
    371c:	d002      	beq.n	3724 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    371e:	9801      	ldr	r0, [sp, #4]
    3720:	f000 f8ee 	bl	3900 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3724:	bf00      	nop
    3726:	b003      	add	sp, #12
    3728:	f85d fb04 	ldr.w	pc, [sp], #4

0000372c <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    372c:	b500      	push	{lr}
    372e:	b083      	sub	sp, #12
    3730:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3732:	9b01      	ldr	r3, [sp, #4]
    3734:	2b00      	cmp	r3, #0
    3736:	d002      	beq.n	373e <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    3738:	9801      	ldr	r0, [sp, #4]
    373a:	f000 f8ff 	bl	393c <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    373e:	bf00      	nop
    3740:	b003      	add	sp, #12
    3742:	f85d fb04 	ldr.w	pc, [sp], #4

00003746 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    3746:	b500      	push	{lr}
    3748:	b083      	sub	sp, #12
    374a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    374c:	9b01      	ldr	r3, [sp, #4]
    374e:	2b00      	cmp	r3, #0
    3750:	d002      	beq.n	3758 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    3752:	9801      	ldr	r0, [sp, #4]
    3754:	f000 f912 	bl	397c <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3758:	bf00      	nop
    375a:	b003      	add	sp, #12
    375c:	f85d fb04 	ldr.w	pc, [sp], #4

00003760 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3760:	b500      	push	{lr}
    3762:	b083      	sub	sp, #12
    3764:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3766:	9b01      	ldr	r3, [sp, #4]
    3768:	2b00      	cmp	r3, #0
    376a:	d002      	beq.n	3772 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    376c:	9801      	ldr	r0, [sp, #4]
    376e:	f000 f925 	bl	39bc <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3772:	bf00      	nop
    3774:	b003      	add	sp, #12
    3776:	f85d fb04 	ldr.w	pc, [sp], #4

0000377a <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    377a:	b500      	push	{lr}
    377c:	b083      	sub	sp, #12
    377e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3780:	9b01      	ldr	r3, [sp, #4]
    3782:	2b00      	cmp	r3, #0
    3784:	d002      	beq.n	378c <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    3786:	9801      	ldr	r0, [sp, #4]
    3788:	f000 f936 	bl	39f8 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    378c:	bf00      	nop
    378e:	b003      	add	sp, #12
    3790:	f85d fb04 	ldr.w	pc, [sp], #4

00003794 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3794:	b500      	push	{lr}
    3796:	b083      	sub	sp, #12
    3798:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    379a:	9b01      	ldr	r3, [sp, #4]
    379c:	2b00      	cmp	r3, #0
    379e:	d002      	beq.n	37a6 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    37a0:	9801      	ldr	r0, [sp, #4]
    37a2:	f000 f949 	bl	3a38 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37a6:	bf00      	nop
    37a8:	b003      	add	sp, #12
    37aa:	f85d fb04 	ldr.w	pc, [sp], #4

000037ae <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    37ae:	b500      	push	{lr}
    37b0:	b083      	sub	sp, #12
    37b2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37b4:	9b01      	ldr	r3, [sp, #4]
    37b6:	2b00      	cmp	r3, #0
    37b8:	d002      	beq.n	37c0 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    37ba:	9801      	ldr	r0, [sp, #4]
    37bc:	f000 f958 	bl	3a70 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37c0:	bf00      	nop
    37c2:	b003      	add	sp, #12
    37c4:	f85d fb04 	ldr.w	pc, [sp], #4

000037c8 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    37c8:	b500      	push	{lr}
    37ca:	b083      	sub	sp, #12
    37cc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37ce:	9b01      	ldr	r3, [sp, #4]
    37d0:	2b00      	cmp	r3, #0
    37d2:	d002      	beq.n	37da <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    37d4:	9801      	ldr	r0, [sp, #4]
    37d6:	f000 f969 	bl	3aac <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37da:	bf00      	nop
    37dc:	b003      	add	sp, #12
    37de:	f85d fb04 	ldr.w	pc, [sp], #4

000037e2 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    37e2:	b500      	push	{lr}
    37e4:	b083      	sub	sp, #12
    37e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37e8:	9b01      	ldr	r3, [sp, #4]
    37ea:	2b00      	cmp	r3, #0
    37ec:	d002      	beq.n	37f4 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    37ee:	9801      	ldr	r0, [sp, #4]
    37f0:	f000 f978 	bl	3ae4 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37f4:	bf00      	nop
    37f6:	b003      	add	sp, #12
    37f8:	f85d fb04 	ldr.w	pc, [sp], #4

000037fc <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    37fc:	b500      	push	{lr}
    37fe:	b083      	sub	sp, #12
    3800:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3802:	9b01      	ldr	r3, [sp, #4]
    3804:	2b00      	cmp	r3, #0
    3806:	d002      	beq.n	380e <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    3808:	9801      	ldr	r0, [sp, #4]
    380a:	f000 f989 	bl	3b20 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    380e:	bf00      	nop
    3810:	b003      	add	sp, #12
    3812:	f85d fb04 	ldr.w	pc, [sp], #4

00003816 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3816:	b500      	push	{lr}
    3818:	b083      	sub	sp, #12
    381a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    381c:	9b01      	ldr	r3, [sp, #4]
    381e:	2b00      	cmp	r3, #0
    3820:	d002      	beq.n	3828 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    3822:	9801      	ldr	r0, [sp, #4]
    3824:	f000 f998 	bl	3b58 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3828:	bf00      	nop
    382a:	b003      	add	sp, #12
    382c:	f85d fb04 	ldr.w	pc, [sp], #4

00003830 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    3830:	b500      	push	{lr}
    3832:	b083      	sub	sp, #12
    3834:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3836:	9b01      	ldr	r3, [sp, #4]
    3838:	2b00      	cmp	r3, #0
    383a:	d002      	beq.n	3842 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    383c:	9801      	ldr	r0, [sp, #4]
    383e:	f000 f9a9 	bl	3b94 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3842:	bf00      	nop
    3844:	b003      	add	sp, #12
    3846:	f85d fb04 	ldr.w	pc, [sp], #4

0000384a <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    384a:	b500      	push	{lr}
    384c:	b083      	sub	sp, #12
    384e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3850:	9b01      	ldr	r3, [sp, #4]
    3852:	2b00      	cmp	r3, #0
    3854:	d002      	beq.n	385c <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    3856:	9801      	ldr	r0, [sp, #4]
    3858:	f000 f9e6 	bl	3c28 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    385c:	bf00      	nop
    385e:	b003      	add	sp, #12
    3860:	f85d fb04 	ldr.w	pc, [sp], #4

00003864 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3864:	b500      	push	{lr}
    3866:	b083      	sub	sp, #12
    3868:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    386a:	9b01      	ldr	r3, [sp, #4]
    386c:	2b00      	cmp	r3, #0
    386e:	d002      	beq.n	3876 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    3870:	9801      	ldr	r0, [sp, #4]
    3872:	f000 fa25 	bl	3cc0 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3876:	bf00      	nop
    3878:	b003      	add	sp, #12
    387a:	f85d fb04 	ldr.w	pc, [sp], #4

0000387e <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    387e:	b500      	push	{lr}
    3880:	b083      	sub	sp, #12
    3882:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3884:	9b01      	ldr	r3, [sp, #4]
    3886:	2b00      	cmp	r3, #0
    3888:	d002      	beq.n	3890 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    388a:	9801      	ldr	r0, [sp, #4]
    388c:	f000 fa2a 	bl	3ce4 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3890:	bf00      	nop
    3892:	b003      	add	sp, #12
    3894:	f85d fb04 	ldr.w	pc, [sp], #4

00003898 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3898:	b500      	push	{lr}
    389a:	b083      	sub	sp, #12
    389c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    389e:	9b01      	ldr	r3, [sp, #4]
    38a0:	2b00      	cmp	r3, #0
    38a2:	d002      	beq.n	38aa <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    38a4:	9801      	ldr	r0, [sp, #4]
    38a6:	f000 fa3b 	bl	3d20 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38aa:	bf00      	nop
    38ac:	b003      	add	sp, #12
    38ae:	f85d fb04 	ldr.w	pc, [sp], #4

000038b2 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    38b2:	b500      	push	{lr}
    38b4:	b083      	sub	sp, #12
    38b6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38b8:	9b01      	ldr	r3, [sp, #4]
    38ba:	2b00      	cmp	r3, #0
    38bc:	d002      	beq.n	38c4 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    38be:	9801      	ldr	r0, [sp, #4]
    38c0:	f000 fa56 	bl	3d70 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38c4:	bf00      	nop
    38c6:	b003      	add	sp, #12
    38c8:	f85d fb04 	ldr.w	pc, [sp], #4

000038cc <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    38cc:	b500      	push	{lr}
    38ce:	b083      	sub	sp, #12
    38d0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38d2:	9b01      	ldr	r3, [sp, #4]
    38d4:	2b00      	cmp	r3, #0
    38d6:	d002      	beq.n	38de <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    38d8:	9801      	ldr	r0, [sp, #4]
    38da:	f000 fa79 	bl	3dd0 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38de:	bf00      	nop
    38e0:	b003      	add	sp, #12
    38e2:	f85d fb04 	ldr.w	pc, [sp], #4

000038e6 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    38e6:	b500      	push	{lr}
    38e8:	b083      	sub	sp, #12
    38ea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38ec:	9b01      	ldr	r3, [sp, #4]
    38ee:	2b00      	cmp	r3, #0
    38f0:	d002      	beq.n	38f8 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    38f2:	9801      	ldr	r0, [sp, #4]
    38f4:	f000 fa8a 	bl	3e0c <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38f8:	bf00      	nop
    38fa:	b003      	add	sp, #12
    38fc:	f85d fb04 	ldr.w	pc, [sp], #4

00003900 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3900:	b084      	sub	sp, #16
    3902:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3904:	4b0b      	ldr	r3, [pc, #44]	; (3934 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    3906:	795b      	ldrb	r3, [r3, #5]
    3908:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    390a:	4b0b      	ldr	r3, [pc, #44]	; (3938 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    390c:	695b      	ldr	r3, [r3, #20]
    390e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3910:	9b02      	ldr	r3, [sp, #8]
    3912:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3916:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3918:	9b03      	ldr	r3, [sp, #12]
    391a:	061b      	lsls	r3, r3, #24
    391c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3920:	9a02      	ldr	r2, [sp, #8]
    3922:	4313      	orrs	r3, r2
    3924:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3926:	4a04      	ldr	r2, [pc, #16]	; (3938 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    3928:	9b02      	ldr	r3, [sp, #8]
    392a:	6153      	str	r3, [r2, #20]
}
    392c:	bf00      	nop
    392e:	b004      	add	sp, #16
    3930:	4770      	bx	lr
    3932:	bf00      	nop
    3934:	0000be38 	.word	0x0000be38
    3938:	40064000 	.word	0x40064000

0000393c <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    393c:	b084      	sub	sp, #16
    393e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3940:	9b01      	ldr	r3, [sp, #4]
    3942:	685b      	ldr	r3, [r3, #4]
    3944:	4a0b      	ldr	r2, [pc, #44]	; (3974 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    3946:	5cd3      	ldrb	r3, [r2, r3]
    3948:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    394a:	4b0b      	ldr	r3, [pc, #44]	; (3978 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    394c:	695b      	ldr	r3, [r3, #20]
    394e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3950:	9b02      	ldr	r3, [sp, #8]
    3952:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3956:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3958:	9b03      	ldr	r3, [sp, #12]
    395a:	061b      	lsls	r3, r3, #24
    395c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3960:	9a02      	ldr	r2, [sp, #8]
    3962:	4313      	orrs	r3, r2
    3964:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3966:	4a04      	ldr	r2, [pc, #16]	; (3978 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3968:	9b02      	ldr	r3, [sp, #8]
    396a:	6153      	str	r3, [r2, #20]
}
    396c:	bf00      	nop
    396e:	b004      	add	sp, #16
    3970:	4770      	bx	lr
    3972:	bf00      	nop
    3974:	0000be38 	.word	0x0000be38
    3978:	40064000 	.word	0x40064000

0000397c <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    397c:	b084      	sub	sp, #16
    397e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3980:	9b01      	ldr	r3, [sp, #4]
    3982:	685b      	ldr	r3, [r3, #4]
    3984:	4a0b      	ldr	r2, [pc, #44]	; (39b4 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    3986:	5cd3      	ldrb	r3, [r2, r3]
    3988:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    398a:	4b0b      	ldr	r3, [pc, #44]	; (39b8 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    398c:	699b      	ldr	r3, [r3, #24]
    398e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    3990:	9b02      	ldr	r3, [sp, #8]
    3992:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3996:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    3998:	9b03      	ldr	r3, [sp, #12]
    399a:	061b      	lsls	r3, r3, #24
    399c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    39a0:	9a02      	ldr	r2, [sp, #8]
    39a2:	4313      	orrs	r3, r2
    39a4:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    39a6:	4a04      	ldr	r2, [pc, #16]	; (39b8 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    39a8:	9b02      	ldr	r3, [sp, #8]
    39aa:	6193      	str	r3, [r2, #24]
}
    39ac:	bf00      	nop
    39ae:	b004      	add	sp, #16
    39b0:	4770      	bx	lr
    39b2:	bf00      	nop
    39b4:	0000be38 	.word	0x0000be38
    39b8:	40064000 	.word	0x40064000

000039bc <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    39bc:	b084      	sub	sp, #16
    39be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    39c0:	4b0b      	ldr	r3, [pc, #44]	; (39f0 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    39c2:	795b      	ldrb	r3, [r3, #5]
    39c4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    39c6:	4b0b      	ldr	r3, [pc, #44]	; (39f4 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    39c8:	69db      	ldr	r3, [r3, #28]
    39ca:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    39cc:	9b02      	ldr	r3, [sp, #8]
    39ce:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    39d2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    39d4:	9b03      	ldr	r3, [sp, #12]
    39d6:	061b      	lsls	r3, r3, #24
    39d8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    39dc:	9a02      	ldr	r2, [sp, #8]
    39de:	4313      	orrs	r3, r2
    39e0:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    39e2:	4a04      	ldr	r2, [pc, #16]	; (39f4 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    39e4:	9b02      	ldr	r3, [sp, #8]
    39e6:	61d3      	str	r3, [r2, #28]
}
    39e8:	bf00      	nop
    39ea:	b004      	add	sp, #16
    39ec:	4770      	bx	lr
    39ee:	bf00      	nop
    39f0:	0000be38 	.word	0x0000be38
    39f4:	40064000 	.word	0x40064000

000039f8 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    39f8:	b084      	sub	sp, #16
    39fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    39fc:	9b01      	ldr	r3, [sp, #4]
    39fe:	685b      	ldr	r3, [r3, #4]
    3a00:	4a0b      	ldr	r2, [pc, #44]	; (3a30 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    3a02:	5cd3      	ldrb	r3, [r2, r3]
    3a04:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    3a06:	4b0b      	ldr	r3, [pc, #44]	; (3a34 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3a08:	69db      	ldr	r3, [r3, #28]
    3a0a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3a0c:	9b02      	ldr	r3, [sp, #8]
    3a0e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3a12:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3a14:	9b03      	ldr	r3, [sp, #12]
    3a16:	061b      	lsls	r3, r3, #24
    3a18:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3a1c:	9a02      	ldr	r2, [sp, #8]
    3a1e:	4313      	orrs	r3, r2
    3a20:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3a22:	4a04      	ldr	r2, [pc, #16]	; (3a34 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3a24:	9b02      	ldr	r3, [sp, #8]
    3a26:	61d3      	str	r3, [r2, #28]
}
    3a28:	bf00      	nop
    3a2a:	b004      	add	sp, #16
    3a2c:	4770      	bx	lr
    3a2e:	bf00      	nop
    3a30:	0000be38 	.word	0x0000be38
    3a34:	40064000 	.word	0x40064000

00003a38 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a38:	b084      	sub	sp, #16
    3a3a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a3c:	4b0a      	ldr	r3, [pc, #40]	; (3a68 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    3a3e:	7b9b      	ldrb	r3, [r3, #14]
    3a40:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3a42:	4b0a      	ldr	r3, [pc, #40]	; (3a6c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3a44:	691b      	ldr	r3, [r3, #16]
    3a46:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3a48:	9b02      	ldr	r3, [sp, #8]
    3a4a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3a4e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3a50:	9b03      	ldr	r3, [sp, #12]
    3a52:	011b      	lsls	r3, r3, #4
    3a54:	9a02      	ldr	r2, [sp, #8]
    3a56:	4313      	orrs	r3, r2
    3a58:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a5a:	4a04      	ldr	r2, [pc, #16]	; (3a6c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3a5c:	9b02      	ldr	r3, [sp, #8]
    3a5e:	6113      	str	r3, [r2, #16]
}
    3a60:	bf00      	nop
    3a62:	b004      	add	sp, #16
    3a64:	4770      	bx	lr
    3a66:	bf00      	nop
    3a68:	0000bde0 	.word	0x0000bde0
    3a6c:	40048000 	.word	0x40048000

00003a70 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a70:	b084      	sub	sp, #16
    3a72:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a74:	9b01      	ldr	r3, [sp, #4]
    3a76:	685b      	ldr	r3, [r3, #4]
    3a78:	4a0a      	ldr	r2, [pc, #40]	; (3aa4 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    3a7a:	5cd3      	ldrb	r3, [r2, r3]
    3a7c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    3a7e:	4b0a      	ldr	r3, [pc, #40]	; (3aa8 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3a80:	691b      	ldr	r3, [r3, #16]
    3a82:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3a84:	9b02      	ldr	r3, [sp, #8]
    3a86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3a8a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3a8c:	9b03      	ldr	r3, [sp, #12]
    3a8e:	011b      	lsls	r3, r3, #4
    3a90:	9a02      	ldr	r2, [sp, #8]
    3a92:	4313      	orrs	r3, r2
    3a94:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a96:	4a04      	ldr	r2, [pc, #16]	; (3aa8 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3a98:	9b02      	ldr	r3, [sp, #8]
    3a9a:	6113      	str	r3, [r2, #16]
}
    3a9c:	bf00      	nop
    3a9e:	b004      	add	sp, #16
    3aa0:	4770      	bx	lr
    3aa2:	bf00      	nop
    3aa4:	0000bde0 	.word	0x0000bde0
    3aa8:	40048000 	.word	0x40048000

00003aac <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3aac:	b084      	sub	sp, #16
    3aae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ab0:	4b0a      	ldr	r3, [pc, #40]	; (3adc <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    3ab2:	785b      	ldrb	r3, [r3, #1]
    3ab4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3ab6:	4b0a      	ldr	r3, [pc, #40]	; (3ae0 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3ab8:	691b      	ldr	r3, [r3, #16]
    3aba:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3abc:	9b02      	ldr	r3, [sp, #8]
    3abe:	f023 030c 	bic.w	r3, r3, #12
    3ac2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3ac4:	9b03      	ldr	r3, [sp, #12]
    3ac6:	009b      	lsls	r3, r3, #2
    3ac8:	9a02      	ldr	r2, [sp, #8]
    3aca:	4313      	orrs	r3, r2
    3acc:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3ace:	4a04      	ldr	r2, [pc, #16]	; (3ae0 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3ad0:	9b02      	ldr	r3, [sp, #8]
    3ad2:	6113      	str	r3, [r2, #16]
}
    3ad4:	bf00      	nop
    3ad6:	b004      	add	sp, #16
    3ad8:	4770      	bx	lr
    3ada:	bf00      	nop
    3adc:	0000be98 	.word	0x0000be98
    3ae0:	40048000 	.word	0x40048000

00003ae4 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3ae4:	b084      	sub	sp, #16
    3ae6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ae8:	9b01      	ldr	r3, [sp, #4]
    3aea:	685b      	ldr	r3, [r3, #4]
    3aec:	4a0a      	ldr	r2, [pc, #40]	; (3b18 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    3aee:	5cd3      	ldrb	r3, [r2, r3]
    3af0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3af2:	4b0a      	ldr	r3, [pc, #40]	; (3b1c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3af4:	691b      	ldr	r3, [r3, #16]
    3af6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3af8:	9b02      	ldr	r3, [sp, #8]
    3afa:	f023 030c 	bic.w	r3, r3, #12
    3afe:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3b00:	9b03      	ldr	r3, [sp, #12]
    3b02:	009b      	lsls	r3, r3, #2
    3b04:	9a02      	ldr	r2, [sp, #8]
    3b06:	4313      	orrs	r3, r2
    3b08:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3b0a:	4a04      	ldr	r2, [pc, #16]	; (3b1c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3b0c:	9b02      	ldr	r3, [sp, #8]
    3b0e:	6113      	str	r3, [r2, #16]
}
    3b10:	bf00      	nop
    3b12:	b004      	add	sp, #16
    3b14:	4770      	bx	lr
    3b16:	bf00      	nop
    3b18:	0000be98 	.word	0x0000be98
    3b1c:	40048000 	.word	0x40048000

00003b20 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b20:	b084      	sub	sp, #16
    3b22:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b24:	4b0a      	ldr	r3, [pc, #40]	; (3b50 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    3b26:	795b      	ldrb	r3, [r3, #5]
    3b28:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    3b2a:	4b0a      	ldr	r3, [pc, #40]	; (3b54 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3b2c:	6a1b      	ldr	r3, [r3, #32]
    3b2e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3b30:	9b02      	ldr	r3, [sp, #8]
    3b32:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3b36:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3b38:	9b03      	ldr	r3, [sp, #12]
    3b3a:	061b      	lsls	r3, r3, #24
    3b3c:	9a02      	ldr	r2, [sp, #8]
    3b3e:	4313      	orrs	r3, r2
    3b40:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3b42:	4a04      	ldr	r2, [pc, #16]	; (3b54 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3b44:	9b02      	ldr	r3, [sp, #8]
    3b46:	6213      	str	r3, [r2, #32]
}
    3b48:	bf00      	nop
    3b4a:	b004      	add	sp, #16
    3b4c:	4770      	bx	lr
    3b4e:	bf00      	nop
    3b50:	0000be38 	.word	0x0000be38
    3b54:	40064000 	.word	0x40064000

00003b58 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b58:	b084      	sub	sp, #16
    3b5a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b5c:	9b01      	ldr	r3, [sp, #4]
    3b5e:	685b      	ldr	r3, [r3, #4]
    3b60:	4a0a      	ldr	r2, [pc, #40]	; (3b8c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    3b62:	5cd3      	ldrb	r3, [r2, r3]
    3b64:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    3b66:	4b0a      	ldr	r3, [pc, #40]	; (3b90 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3b68:	6a1b      	ldr	r3, [r3, #32]
    3b6a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3b6c:	9b02      	ldr	r3, [sp, #8]
    3b6e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3b72:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3b74:	9b03      	ldr	r3, [sp, #12]
    3b76:	061b      	lsls	r3, r3, #24
    3b78:	9a02      	ldr	r2, [sp, #8]
    3b7a:	4313      	orrs	r3, r2
    3b7c:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3b7e:	4a04      	ldr	r2, [pc, #16]	; (3b90 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3b80:	9b02      	ldr	r3, [sp, #8]
    3b82:	6213      	str	r3, [r2, #32]
}
    3b84:	bf00      	nop
    3b86:	b004      	add	sp, #16
    3b88:	4770      	bx	lr
    3b8a:	bf00      	nop
    3b8c:	0000be38 	.word	0x0000be38
    3b90:	40064000 	.word	0x40064000

00003b94 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b94:	b086      	sub	sp, #24
    3b96:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b98:	4b20      	ldr	r3, [pc, #128]	; (3c1c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    3b9a:	795b      	ldrb	r3, [r3, #5]
    3b9c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3b9e:	9b01      	ldr	r3, [sp, #4]
    3ba0:	681a      	ldr	r2, [r3, #0]
    3ba2:	491f      	ldr	r1, [pc, #124]	; (3c20 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    3ba4:	4613      	mov	r3, r2
    3ba6:	00db      	lsls	r3, r3, #3
    3ba8:	4413      	add	r3, r2
    3baa:	440b      	add	r3, r1
    3bac:	781b      	ldrb	r3, [r3, #0]
    3bae:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3bb0:	4b1c      	ldr	r3, [pc, #112]	; (3c24 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3bb2:	68db      	ldr	r3, [r3, #12]
    3bb4:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3bb6:	9b03      	ldr	r3, [sp, #12]
    3bb8:	2b03      	cmp	r3, #3
    3bba:	d813      	bhi.n	3be4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3bbc:	9b03      	ldr	r3, [sp, #12]
    3bbe:	005b      	lsls	r3, r3, #1
    3bc0:	3318      	adds	r3, #24
    3bc2:	2203      	movs	r2, #3
    3bc4:	fa02 f303 	lsl.w	r3, r2, r3
    3bc8:	43db      	mvns	r3, r3
    3bca:	9a05      	ldr	r2, [sp, #20]
    3bcc:	4013      	ands	r3, r2
    3bce:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3bd0:	9b03      	ldr	r3, [sp, #12]
    3bd2:	005b      	lsls	r3, r3, #1
    3bd4:	3318      	adds	r3, #24
    3bd6:	9a04      	ldr	r2, [sp, #16]
    3bd8:	fa02 f303 	lsl.w	r3, r2, r3
    3bdc:	9a05      	ldr	r2, [sp, #20]
    3bde:	4313      	orrs	r3, r2
    3be0:	9305      	str	r3, [sp, #20]
    3be2:	e014      	b.n	3c0e <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3be4:	9b03      	ldr	r3, [sp, #12]
    3be6:	3b04      	subs	r3, #4
    3be8:	005b      	lsls	r3, r3, #1
    3bea:	3310      	adds	r3, #16
    3bec:	2203      	movs	r2, #3
    3bee:	fa02 f303 	lsl.w	r3, r2, r3
    3bf2:	43db      	mvns	r3, r3
    3bf4:	9a05      	ldr	r2, [sp, #20]
    3bf6:	4013      	ands	r3, r2
    3bf8:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3bfa:	9b03      	ldr	r3, [sp, #12]
    3bfc:	3b04      	subs	r3, #4
    3bfe:	005b      	lsls	r3, r3, #1
    3c00:	3310      	adds	r3, #16
    3c02:	9a04      	ldr	r2, [sp, #16]
    3c04:	fa02 f303 	lsl.w	r3, r2, r3
    3c08:	9a05      	ldr	r2, [sp, #20]
    3c0a:	4313      	orrs	r3, r2
    3c0c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3c0e:	4a05      	ldr	r2, [pc, #20]	; (3c24 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3c10:	9b05      	ldr	r3, [sp, #20]
    3c12:	60d3      	str	r3, [r2, #12]
}
    3c14:	bf00      	nop
    3c16:	b006      	add	sp, #24
    3c18:	4770      	bx	lr
    3c1a:	bf00      	nop
    3c1c:	0000bde0 	.word	0x0000bde0
    3c20:	0000bad0 	.word	0x0000bad0
    3c24:	40048000 	.word	0x40048000

00003c28 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c28:	b086      	sub	sp, #24
    3c2a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3c2c:	9b01      	ldr	r3, [sp, #4]
    3c2e:	685b      	ldr	r3, [r3, #4]
    3c30:	4a20      	ldr	r2, [pc, #128]	; (3cb4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    3c32:	5cd3      	ldrb	r3, [r2, r3]
    3c34:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3c36:	9b01      	ldr	r3, [sp, #4]
    3c38:	681a      	ldr	r2, [r3, #0]
    3c3a:	491f      	ldr	r1, [pc, #124]	; (3cb8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    3c3c:	4613      	mov	r3, r2
    3c3e:	00db      	lsls	r3, r3, #3
    3c40:	4413      	add	r3, r2
    3c42:	440b      	add	r3, r1
    3c44:	781b      	ldrb	r3, [r3, #0]
    3c46:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3c48:	4b1c      	ldr	r3, [pc, #112]	; (3cbc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3c4a:	68db      	ldr	r3, [r3, #12]
    3c4c:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3c4e:	9b03      	ldr	r3, [sp, #12]
    3c50:	2b03      	cmp	r3, #3
    3c52:	d813      	bhi.n	3c7c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3c54:	9b03      	ldr	r3, [sp, #12]
    3c56:	005b      	lsls	r3, r3, #1
    3c58:	3318      	adds	r3, #24
    3c5a:	2203      	movs	r2, #3
    3c5c:	fa02 f303 	lsl.w	r3, r2, r3
    3c60:	43db      	mvns	r3, r3
    3c62:	9a05      	ldr	r2, [sp, #20]
    3c64:	4013      	ands	r3, r2
    3c66:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3c68:	9b03      	ldr	r3, [sp, #12]
    3c6a:	005b      	lsls	r3, r3, #1
    3c6c:	3318      	adds	r3, #24
    3c6e:	9a04      	ldr	r2, [sp, #16]
    3c70:	fa02 f303 	lsl.w	r3, r2, r3
    3c74:	9a05      	ldr	r2, [sp, #20]
    3c76:	4313      	orrs	r3, r2
    3c78:	9305      	str	r3, [sp, #20]
    3c7a:	e014      	b.n	3ca6 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3c7c:	9b03      	ldr	r3, [sp, #12]
    3c7e:	3b04      	subs	r3, #4
    3c80:	005b      	lsls	r3, r3, #1
    3c82:	3310      	adds	r3, #16
    3c84:	2203      	movs	r2, #3
    3c86:	fa02 f303 	lsl.w	r3, r2, r3
    3c8a:	43db      	mvns	r3, r3
    3c8c:	9a05      	ldr	r2, [sp, #20]
    3c8e:	4013      	ands	r3, r2
    3c90:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3c92:	9b03      	ldr	r3, [sp, #12]
    3c94:	3b04      	subs	r3, #4
    3c96:	005b      	lsls	r3, r3, #1
    3c98:	3310      	adds	r3, #16
    3c9a:	9a04      	ldr	r2, [sp, #16]
    3c9c:	fa02 f303 	lsl.w	r3, r2, r3
    3ca0:	9a05      	ldr	r2, [sp, #20]
    3ca2:	4313      	orrs	r3, r2
    3ca4:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3ca6:	4a05      	ldr	r2, [pc, #20]	; (3cbc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3ca8:	9b05      	ldr	r3, [sp, #20]
    3caa:	60d3      	str	r3, [r2, #12]
}
    3cac:	bf00      	nop
    3cae:	b006      	add	sp, #24
    3cb0:	4770      	bx	lr
    3cb2:	bf00      	nop
    3cb4:	0000bde0 	.word	0x0000bde0
    3cb8:	0000bad0 	.word	0x0000bad0
    3cbc:	40048000 	.word	0x40048000

00003cc0 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3cc0:	b084      	sub	sp, #16
    3cc2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    3cc4:	4b06      	ldr	r3, [pc, #24]	; (3ce0 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3cc6:	685b      	ldr	r3, [r3, #4]
    3cc8:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    3cca:	9b03      	ldr	r3, [sp, #12]
    3ccc:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    3cd0:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3cd2:	4a03      	ldr	r2, [pc, #12]	; (3ce0 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3cd4:	9b03      	ldr	r3, [sp, #12]
    3cd6:	6053      	str	r3, [r2, #4]
}
    3cd8:	bf00      	nop
    3cda:	b004      	add	sp, #16
    3cdc:	4770      	bx	lr
    3cde:	bf00      	nop
    3ce0:	40048000 	.word	0x40048000

00003ce4 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3ce4:	b084      	sub	sp, #16
    3ce6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ce8:	9b01      	ldr	r3, [sp, #4]
    3cea:	685b      	ldr	r3, [r3, #4]
    3cec:	4a0a      	ldr	r2, [pc, #40]	; (3d18 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    3cee:	5cd3      	ldrb	r3, [r2, r3]
    3cf0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    3cf2:	4b0a      	ldr	r3, [pc, #40]	; (3d1c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3cf4:	685b      	ldr	r3, [r3, #4]
    3cf6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    3cf8:	9b02      	ldr	r3, [sp, #8]
    3cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3cfe:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    3d00:	9b03      	ldr	r3, [sp, #12]
    3d02:	011b      	lsls	r3, r3, #4
    3d04:	9a02      	ldr	r2, [sp, #8]
    3d06:	4313      	orrs	r3, r2
    3d08:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    3d0a:	4a04      	ldr	r2, [pc, #16]	; (3d1c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3d0c:	9b02      	ldr	r3, [sp, #8]
    3d0e:	6053      	str	r3, [r2, #4]
}
    3d10:	bf00      	nop
    3d12:	b004      	add	sp, #16
    3d14:	4770      	bx	lr
    3d16:	bf00      	nop
    3d18:	0000bde0 	.word	0x0000bde0
    3d1c:	40048000 	.word	0x40048000

00003d20 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d20:	b084      	sub	sp, #16
    3d22:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3d24:	9b01      	ldr	r3, [sp, #4]
    3d26:	681a      	ldr	r2, [r3, #0]
    3d28:	490f      	ldr	r1, [pc, #60]	; (3d68 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    3d2a:	4613      	mov	r3, r2
    3d2c:	00db      	lsls	r3, r3, #3
    3d2e:	4413      	add	r3, r2
    3d30:	440b      	add	r3, r1
    3d32:	3304      	adds	r3, #4
    3d34:	781b      	ldrb	r3, [r3, #0]
    3d36:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    3d38:	4a0c      	ldr	r2, [pc, #48]	; (3d6c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3d3a:	9b03      	ldr	r3, [sp, #12]
    3d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d40:	490a      	ldr	r1, [pc, #40]	; (3d6c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3d42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    3d46:	9b03      	ldr	r3, [sp, #12]
    3d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    3d4c:	4a07      	ldr	r2, [pc, #28]	; (3d6c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3d4e:	9b03      	ldr	r3, [sp, #12]
    3d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d54:	4905      	ldr	r1, [pc, #20]	; (3d6c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3d56:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    3d5a:	9b03      	ldr	r3, [sp, #12]
    3d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3d60:	bf00      	nop
    3d62:	b004      	add	sp, #16
    3d64:	4770      	bx	lr
    3d66:	bf00      	nop
    3d68:	0000bad0 	.word	0x0000bad0
    3d6c:	40065000 	.word	0x40065000

00003d70 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d70:	b086      	sub	sp, #24
    3d72:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3d74:	9b01      	ldr	r3, [sp, #4]
    3d76:	681a      	ldr	r2, [r3, #0]
    3d78:	4912      	ldr	r1, [pc, #72]	; (3dc4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    3d7a:	4613      	mov	r3, r2
    3d7c:	00db      	lsls	r3, r3, #3
    3d7e:	4413      	add	r3, r2
    3d80:	440b      	add	r3, r1
    3d82:	3304      	adds	r3, #4
    3d84:	781b      	ldrb	r3, [r3, #0]
    3d86:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d88:	9b01      	ldr	r3, [sp, #4]
    3d8a:	685b      	ldr	r3, [r3, #4]
    3d8c:	4a0e      	ldr	r2, [pc, #56]	; (3dc8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    3d8e:	5cd3      	ldrb	r3, [r2, r3]
    3d90:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    3d92:	4a0e      	ldr	r2, [pc, #56]	; (3dcc <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3d94:	9b05      	ldr	r3, [sp, #20]
    3d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d9a:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    3d9c:	9b03      	ldr	r3, [sp, #12]
    3d9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    3da2:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    3da4:	9b04      	ldr	r3, [sp, #16]
    3da6:	061b      	lsls	r3, r3, #24
    3da8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    3dac:	9a03      	ldr	r2, [sp, #12]
    3dae:	4313      	orrs	r3, r2
    3db0:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    3db2:	4906      	ldr	r1, [pc, #24]	; (3dcc <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3db4:	9b05      	ldr	r3, [sp, #20]
    3db6:	9a03      	ldr	r2, [sp, #12]
    3db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3dbc:	bf00      	nop
    3dbe:	b006      	add	sp, #24
    3dc0:	4770      	bx	lr
    3dc2:	bf00      	nop
    3dc4:	0000bad0 	.word	0x0000bad0
    3dc8:	0000be68 	.word	0x0000be68
    3dcc:	40065000 	.word	0x40065000

00003dd0 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3dd0:	b084      	sub	sp, #16
    3dd2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3dd4:	4b0b      	ldr	r3, [pc, #44]	; (3e04 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    3dd6:	7f1b      	ldrb	r3, [r3, #28]
    3dd8:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    3dda:	4b0b      	ldr	r3, [pc, #44]	; (3e08 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3ddc:	685b      	ldr	r3, [r3, #4]
    3dde:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3de0:	9b02      	ldr	r3, [sp, #8]
    3de2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3de6:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3de8:	9b03      	ldr	r3, [sp, #12]
    3dea:	031b      	lsls	r3, r3, #12
    3dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3df0:	9a02      	ldr	r2, [sp, #8]
    3df2:	4313      	orrs	r3, r2
    3df4:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3df6:	4a04      	ldr	r2, [pc, #16]	; (3e08 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3df8:	9b02      	ldr	r3, [sp, #8]
    3dfa:	6053      	str	r3, [r2, #4]
}
    3dfc:	bf00      	nop
    3dfe:	b004      	add	sp, #16
    3e00:	4770      	bx	lr
    3e02:	bf00      	nop
    3e04:	0000bde0 	.word	0x0000bde0
    3e08:	40048000 	.word	0x40048000

00003e0c <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3e0c:	b084      	sub	sp, #16
    3e0e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3e10:	9b01      	ldr	r3, [sp, #4]
    3e12:	685b      	ldr	r3, [r3, #4]
    3e14:	4a0b      	ldr	r2, [pc, #44]	; (3e44 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    3e16:	5cd3      	ldrb	r3, [r2, r3]
    3e18:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    3e1a:	4b0b      	ldr	r3, [pc, #44]	; (3e48 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3e1c:	685b      	ldr	r3, [r3, #4]
    3e1e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3e20:	9b02      	ldr	r3, [sp, #8]
    3e22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3e26:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3e28:	9b03      	ldr	r3, [sp, #12]
    3e2a:	031b      	lsls	r3, r3, #12
    3e2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3e30:	9a02      	ldr	r2, [sp, #8]
    3e32:	4313      	orrs	r3, r2
    3e34:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3e36:	4a04      	ldr	r2, [pc, #16]	; (3e48 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3e38:	9b02      	ldr	r3, [sp, #8]
    3e3a:	6053      	str	r3, [r2, #4]
}
    3e3c:	bf00      	nop
    3e3e:	b004      	add	sp, #16
    3e40:	4770      	bx	lr
    3e42:	bf00      	nop
    3e44:	0000bde0 	.word	0x0000bde0
    3e48:	40048000 	.word	0x40048000

00003e4c <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    3e4c:	b500      	push	{lr}
    3e4e:	b085      	sub	sp, #20
    3e50:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    3e52:	2300      	movs	r3, #0
    3e54:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    3e58:	9b01      	ldr	r3, [sp, #4]
    3e5a:	2b00      	cmp	r3, #0
    3e5c:	d037      	beq.n	3ece <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3e5e:	2300      	movs	r3, #0
    3e60:	9303      	str	r3, [sp, #12]
    3e62:	e02b      	b.n	3ebc <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3e64:	4b29      	ldr	r3, [pc, #164]	; (3f0c <DisableSafeClock+0xc0>)
    3e66:	6819      	ldr	r1, [r3, #0]
    3e68:	9a03      	ldr	r2, [sp, #12]
    3e6a:	4613      	mov	r3, r2
    3e6c:	005b      	lsls	r3, r3, #1
    3e6e:	4413      	add	r3, r2
    3e70:	009b      	lsls	r3, r3, #2
    3e72:	440b      	add	r3, r1
    3e74:	3314      	adds	r3, #20
    3e76:	681b      	ldr	r3, [r3, #0]
    3e78:	2b05      	cmp	r3, #5
    3e7a:	d11c      	bne.n	3eb6 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    3e7c:	2301      	movs	r3, #1
    3e7e:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    3e82:	4b22      	ldr	r3, [pc, #136]	; (3f0c <DisableSafeClock+0xc0>)
    3e84:	6819      	ldr	r1, [r3, #0]
    3e86:	9a03      	ldr	r2, [sp, #12]
    3e88:	4613      	mov	r3, r2
    3e8a:	005b      	lsls	r3, r3, #1
    3e8c:	4413      	add	r3, r2
    3e8e:	009b      	lsls	r3, r3, #2
    3e90:	440b      	add	r3, r1
    3e92:	3318      	adds	r3, #24
    3e94:	881b      	ldrh	r3, [r3, #0]
    3e96:	2b00      	cmp	r3, #0
    3e98:	d118      	bne.n	3ecc <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3e9a:	4b1d      	ldr	r3, [pc, #116]	; (3f10 <DisableSafeClock+0xc4>)
    3e9c:	791b      	ldrb	r3, [r3, #4]
    3e9e:	4619      	mov	r1, r3
    3ea0:	4a1c      	ldr	r2, [pc, #112]	; (3f14 <DisableSafeClock+0xc8>)
    3ea2:	460b      	mov	r3, r1
    3ea4:	005b      	lsls	r3, r3, #1
    3ea6:	440b      	add	r3, r1
    3ea8:	009b      	lsls	r3, r3, #2
    3eaa:	4413      	add	r3, r2
    3eac:	3308      	adds	r3, #8
    3eae:	681b      	ldr	r3, [r3, #0]
    3eb0:	2005      	movs	r0, #5
    3eb2:	4798      	blx	r3
                }
                break;
    3eb4:	e00a      	b.n	3ecc <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3eb6:	9b03      	ldr	r3, [sp, #12]
    3eb8:	3301      	adds	r3, #1
    3eba:	9303      	str	r3, [sp, #12]
    3ebc:	4b13      	ldr	r3, [pc, #76]	; (3f0c <DisableSafeClock+0xc0>)
    3ebe:	681b      	ldr	r3, [r3, #0]
    3ec0:	7a1b      	ldrb	r3, [r3, #8]
    3ec2:	461a      	mov	r2, r3
    3ec4:	9b03      	ldr	r3, [sp, #12]
    3ec6:	4293      	cmp	r3, r2
    3ec8:	d3cc      	bcc.n	3e64 <DisableSafeClock+0x18>
    3eca:	e000      	b.n	3ece <DisableSafeClock+0x82>
                break;
    3ecc:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    3ece:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3ed2:	f083 0301 	eor.w	r3, r3, #1
    3ed6:	b2db      	uxtb	r3, r3
    3ed8:	2b00      	cmp	r3, #0
    3eda:	d013      	beq.n	3f04 <DisableSafeClock+0xb8>
    3edc:	4b0e      	ldr	r3, [pc, #56]	; (3f18 <DisableSafeClock+0xcc>)
    3ede:	781b      	ldrb	r3, [r3, #0]
    3ee0:	f083 0301 	eor.w	r3, r3, #1
    3ee4:	b2db      	uxtb	r3, r3
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	d00c      	beq.n	3f04 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3eea:	4b09      	ldr	r3, [pc, #36]	; (3f10 <DisableSafeClock+0xc4>)
    3eec:	791b      	ldrb	r3, [r3, #4]
    3eee:	4619      	mov	r1, r3
    3ef0:	4a08      	ldr	r2, [pc, #32]	; (3f14 <DisableSafeClock+0xc8>)
    3ef2:	460b      	mov	r3, r1
    3ef4:	005b      	lsls	r3, r3, #1
    3ef6:	440b      	add	r3, r1
    3ef8:	009b      	lsls	r3, r3, #2
    3efa:	4413      	add	r3, r2
    3efc:	3308      	adds	r3, #8
    3efe:	681b      	ldr	r3, [r3, #0]
    3f00:	2005      	movs	r0, #5
    3f02:	4798      	blx	r3
    }
}
    3f04:	bf00      	nop
    3f06:	b005      	add	sp, #20
    3f08:	f85d fb04 	ldr.w	pc, [sp], #4
    3f0c:	1fff8c58 	.word	0x1fff8c58
    3f10:	0000ba60 	.word	0x0000ba60
    3f14:	0000c090 	.word	0x0000c090
    3f18:	1fff8b18 	.word	0x1fff8b18

00003f1c <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    3f1c:	4b06      	ldr	r3, [pc, #24]	; (3f38 <SetFircToResetValue_TrustedCall+0x1c>)
    3f1e:	2200      	movs	r2, #0
    3f20:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    3f24:	4b04      	ldr	r3, [pc, #16]	; (3f38 <SetFircToResetValue_TrustedCall+0x1c>)
    3f26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f2a:	4a03      	ldr	r2, [pc, #12]	; (3f38 <SetFircToResetValue_TrustedCall+0x1c>)
    3f2c:	f043 0301 	orr.w	r3, r3, #1
    3f30:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3f34:	bf00      	nop
    3f36:	4770      	bx	lr
    3f38:	40064000 	.word	0x40064000

00003f3c <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    3f3c:	b084      	sub	sp, #16
    3f3e:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    3f40:	2303      	movs	r3, #3
    3f42:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3f44:	2300      	movs	r3, #0
    3f46:	9302      	str	r3, [sp, #8]
    3f48:	e028      	b.n	3f9c <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    3f4a:	9b01      	ldr	r3, [sp, #4]
    3f4c:	9a02      	ldr	r2, [sp, #8]
    3f4e:	320d      	adds	r2, #13
    3f50:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3f54:	2b28      	cmp	r3, #40	; 0x28
    3f56:	d10b      	bne.n	3f70 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3f58:	9a01      	ldr	r2, [sp, #4]
    3f5a:	9b02      	ldr	r3, [sp, #8]
    3f5c:	330d      	adds	r3, #13
    3f5e:	00db      	lsls	r3, r3, #3
    3f60:	4413      	add	r3, r2
    3f62:	685b      	ldr	r3, [r3, #4]
    3f64:	4a2b      	ldr	r2, [pc, #172]	; (4014 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    3f66:	5cd3      	ldrb	r3, [r2, r3]
    3f68:	011b      	lsls	r3, r3, #4
    3f6a:	9a03      	ldr	r2, [sp, #12]
    3f6c:	4313      	orrs	r3, r2
    3f6e:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    3f70:	9b01      	ldr	r3, [sp, #4]
    3f72:	9a02      	ldr	r2, [sp, #8]
    3f74:	320d      	adds	r2, #13
    3f76:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3f7a:	2b29      	cmp	r3, #41	; 0x29
    3f7c:	d10b      	bne.n	3f96 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3f7e:	9a01      	ldr	r2, [sp, #4]
    3f80:	9b02      	ldr	r3, [sp, #8]
    3f82:	330d      	adds	r3, #13
    3f84:	00db      	lsls	r3, r3, #3
    3f86:	4413      	add	r3, r2
    3f88:	685b      	ldr	r3, [r3, #4]
    3f8a:	4a23      	ldr	r2, [pc, #140]	; (4018 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    3f8c:	5cd3      	ldrb	r3, [r2, r3]
    3f8e:	009b      	lsls	r3, r3, #2
    3f90:	9a03      	ldr	r2, [sp, #12]
    3f92:	4313      	orrs	r3, r2
    3f94:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3f96:	9b02      	ldr	r3, [sp, #8]
    3f98:	3301      	adds	r3, #1
    3f9a:	9302      	str	r3, [sp, #8]
    3f9c:	9b01      	ldr	r3, [sp, #4]
    3f9e:	7adb      	ldrb	r3, [r3, #11]
    3fa0:	461a      	mov	r2, r3
    3fa2:	9b02      	ldr	r3, [sp, #8]
    3fa4:	4293      	cmp	r3, r2
    3fa6:	d3d0      	bcc.n	3f4a <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3fa8:	2300      	movs	r3, #0
    3faa:	9302      	str	r3, [sp, #8]
    3fac:	e026      	b.n	3ffc <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    3fae:	9a01      	ldr	r2, [sp, #4]
    3fb0:	9b02      	ldr	r3, [sp, #8]
    3fb2:	334e      	adds	r3, #78	; 0x4e
    3fb4:	00db      	lsls	r3, r3, #3
    3fb6:	4413      	add	r3, r2
    3fb8:	685b      	ldr	r3, [r3, #4]
    3fba:	2b12      	cmp	r3, #18
    3fbc:	d109      	bne.n	3fd2 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3fbe:	9a01      	ldr	r2, [sp, #4]
    3fc0:	9b02      	ldr	r3, [sp, #8]
    3fc2:	334e      	adds	r3, #78	; 0x4e
    3fc4:	00db      	lsls	r3, r3, #3
    3fc6:	4413      	add	r3, r2
    3fc8:	891b      	ldrh	r3, [r3, #8]
    3fca:	005b      	lsls	r3, r3, #1
    3fcc:	9a03      	ldr	r2, [sp, #12]
    3fce:	4313      	orrs	r3, r2
    3fd0:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    3fd2:	9a01      	ldr	r2, [sp, #4]
    3fd4:	9b02      	ldr	r3, [sp, #8]
    3fd6:	334e      	adds	r3, #78	; 0x4e
    3fd8:	00db      	lsls	r3, r3, #3
    3fda:	4413      	add	r3, r2
    3fdc:	685b      	ldr	r3, [r3, #4]
    3fde:	2b13      	cmp	r3, #19
    3fe0:	d109      	bne.n	3ff6 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3fe2:	9a01      	ldr	r2, [sp, #4]
    3fe4:	9b02      	ldr	r3, [sp, #8]
    3fe6:	334e      	adds	r3, #78	; 0x4e
    3fe8:	00db      	lsls	r3, r3, #3
    3fea:	4413      	add	r3, r2
    3fec:	891b      	ldrh	r3, [r3, #8]
    3fee:	461a      	mov	r2, r3
    3ff0:	9b03      	ldr	r3, [sp, #12]
    3ff2:	4313      	orrs	r3, r2
    3ff4:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3ff6:	9b02      	ldr	r3, [sp, #8]
    3ff8:	3301      	adds	r3, #1
    3ffa:	9302      	str	r3, [sp, #8]
    3ffc:	9b01      	ldr	r3, [sp, #4]
    3ffe:	7c1b      	ldrb	r3, [r3, #16]
    4000:	461a      	mov	r2, r3
    4002:	9b02      	ldr	r3, [sp, #8]
    4004:	4293      	cmp	r3, r2
    4006:	d3d2      	bcc.n	3fae <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4008:	4a04      	ldr	r2, [pc, #16]	; (401c <SetSimLpoclksRegister_TrustedCall+0xe0>)
    400a:	9b03      	ldr	r3, [sp, #12]
    400c:	6113      	str	r3, [r2, #16]
}
    400e:	bf00      	nop
    4010:	b004      	add	sp, #16
    4012:	4770      	bx	lr
    4014:	0000bde0 	.word	0x0000bde0
    4018:	0000be98 	.word	0x0000be98
    401c:	40048000 	.word	0x40048000

00004020 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4020:	b500      	push	{lr}
    4022:	b089      	sub	sp, #36	; 0x24
    4024:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4026:	2300      	movs	r3, #0
    4028:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    402c:	4a21      	ldr	r2, [pc, #132]	; (40b4 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    402e:	9b01      	ldr	r3, [sp, #4]
    4030:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4032:	4b21      	ldr	r3, [pc, #132]	; (40b8 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4034:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4038:	f003 0301 	and.w	r3, r3, #1
    403c:	2b00      	cmp	r3, #0
    403e:	d12e      	bne.n	409e <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4040:	4b1e      	ldr	r3, [pc, #120]	; (40bc <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4042:	2200      	movs	r2, #0
    4044:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4046:	f7ff ff69 	bl	3f1c <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    404a:	aa03      	add	r2, sp, #12
    404c:	a904      	add	r1, sp, #16
    404e:	a805      	add	r0, sp, #20
    4050:	f24c 3350 	movw	r3, #50000	; 0xc350
    4054:	f7fe f8ae 	bl	21b4 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4058:	4b17      	ldr	r3, [pc, #92]	; (40b8 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    405a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    405e:	0e1b      	lsrs	r3, r3, #24
    4060:	f003 0301 	and.w	r3, r3, #1
    4064:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4066:	9a03      	ldr	r2, [sp, #12]
    4068:	a904      	add	r1, sp, #16
    406a:	ab05      	add	r3, sp, #20
    406c:	4618      	mov	r0, r3
    406e:	f7fe f8bb 	bl	21e8 <Clock_Ip_TimeoutExpired>
    4072:	4603      	mov	r3, r0
    4074:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4078:	9b06      	ldr	r3, [sp, #24]
    407a:	2b00      	cmp	r3, #0
    407c:	d106      	bne.n	408c <Clock_Ip_SpecificPlatformInitClock+0x6c>
    407e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4082:	f083 0301 	eor.w	r3, r3, #1
    4086:	b2db      	uxtb	r3, r3
    4088:	2b00      	cmp	r3, #0
    408a:	d1e5      	bne.n	4058 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    408c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4090:	2b00      	cmp	r3, #0
    4092:	d007      	beq.n	40a4 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4094:	2105      	movs	r1, #5
    4096:	2001      	movs	r0, #1
    4098:	f7fe f87c 	bl	2194 <Clock_Ip_ReportClockErrors>
    409c:	e002      	b.n	40a4 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    409e:	4b07      	ldr	r3, [pc, #28]	; (40bc <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    40a0:	2201      	movs	r2, #1
    40a2:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    40a4:	9801      	ldr	r0, [sp, #4]
    40a6:	f7ff ff49 	bl	3f3c <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    40aa:	bf00      	nop
    40ac:	b009      	add	sp, #36	; 0x24
    40ae:	f85d fb04 	ldr.w	pc, [sp], #4
    40b2:	bf00      	nop
    40b4:	1fff8c58 	.word	0x1fff8c58
    40b8:	40064000 	.word	0x40064000
    40bc:	1fff8b18 	.word	0x1fff8b18

000040c0 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    40c0:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    40c2:	2300      	movs	r3, #0
    40c4:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    40c6:	4b29      	ldr	r3, [pc, #164]	; (416c <getFircConfig+0xac>)
    40c8:	681b      	ldr	r3, [r3, #0]
    40ca:	2b00      	cmp	r3, #0
    40cc:	d024      	beq.n	4118 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    40ce:	2300      	movs	r3, #0
    40d0:	9301      	str	r3, [sp, #4]
    40d2:	e01a      	b.n	410a <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    40d4:	4b25      	ldr	r3, [pc, #148]	; (416c <getFircConfig+0xac>)
    40d6:	6819      	ldr	r1, [r3, #0]
    40d8:	9a01      	ldr	r2, [sp, #4]
    40da:	4613      	mov	r3, r2
    40dc:	005b      	lsls	r3, r3, #1
    40de:	4413      	add	r3, r2
    40e0:	009b      	lsls	r3, r3, #2
    40e2:	440b      	add	r3, r1
    40e4:	3314      	adds	r3, #20
    40e6:	681b      	ldr	r3, [r3, #0]
    40e8:	2b05      	cmp	r3, #5
    40ea:	d10b      	bne.n	4104 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    40ec:	4b1f      	ldr	r3, [pc, #124]	; (416c <getFircConfig+0xac>)
    40ee:	6819      	ldr	r1, [r3, #0]
    40f0:	9a01      	ldr	r2, [sp, #4]
    40f2:	4613      	mov	r3, r2
    40f4:	005b      	lsls	r3, r3, #1
    40f6:	4413      	add	r3, r2
    40f8:	009b      	lsls	r3, r3, #2
    40fa:	3310      	adds	r3, #16
    40fc:	440b      	add	r3, r1
    40fe:	3304      	adds	r3, #4
    4100:	9300      	str	r3, [sp, #0]
                break;
    4102:	e009      	b.n	4118 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4104:	9b01      	ldr	r3, [sp, #4]
    4106:	3301      	adds	r3, #1
    4108:	9301      	str	r3, [sp, #4]
    410a:	4b18      	ldr	r3, [pc, #96]	; (416c <getFircConfig+0xac>)
    410c:	681b      	ldr	r3, [r3, #0]
    410e:	7a1b      	ldrb	r3, [r3, #8]
    4110:	461a      	mov	r2, r3
    4112:	9b01      	ldr	r3, [sp, #4]
    4114:	4293      	cmp	r3, r2
    4116:	d3dd      	bcc.n	40d4 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4118:	9b00      	ldr	r3, [sp, #0]
    411a:	2b00      	cmp	r3, #0
    411c:	d121      	bne.n	4162 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    411e:	4b14      	ldr	r3, [pc, #80]	; (4170 <getFircConfig+0xb0>)
    4120:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4122:	4b13      	ldr	r3, [pc, #76]	; (4170 <getFircConfig+0xb0>)
    4124:	2205      	movs	r2, #5
    4126:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4128:	4b12      	ldr	r3, [pc, #72]	; (4174 <getFircConfig+0xb4>)
    412a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    412e:	b29b      	uxth	r3, r3
    4130:	f003 0301 	and.w	r3, r3, #1
    4134:	b29a      	uxth	r2, r3
    4136:	4b0e      	ldr	r3, [pc, #56]	; (4170 <getFircConfig+0xb0>)
    4138:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    413a:	4b0e      	ldr	r3, [pc, #56]	; (4174 <getFircConfig+0xb4>)
    413c:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4140:	b2db      	uxtb	r3, r3
    4142:	f003 0303 	and.w	r3, r3, #3
    4146:	b2da      	uxtb	r2, r3
    4148:	4b09      	ldr	r3, [pc, #36]	; (4170 <getFircConfig+0xb0>)
    414a:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    414c:	4b09      	ldr	r3, [pc, #36]	; (4174 <getFircConfig+0xb4>)
    414e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4152:	b2db      	uxtb	r3, r3
    4154:	10db      	asrs	r3, r3, #3
    4156:	b2db      	uxtb	r3, r3
    4158:	f003 0301 	and.w	r3, r3, #1
    415c:	b2da      	uxtb	r2, r3
    415e:	4b04      	ldr	r3, [pc, #16]	; (4170 <getFircConfig+0xb0>)
    4160:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4162:	9b00      	ldr	r3, [sp, #0]
}
    4164:	4618      	mov	r0, r3
    4166:	b002      	add	sp, #8
    4168:	4770      	bx	lr
    416a:	bf00      	nop
    416c:	1fff8c58 	.word	0x1fff8c58
    4170:	1fff8cc4 	.word	0x1fff8cc4
    4174:	40064000 	.word	0x40064000

00004178 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4178:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    417a:	2300      	movs	r3, #0
    417c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    417e:	4b20      	ldr	r3, [pc, #128]	; (4200 <getSoscConfig+0x88>)
    4180:	681b      	ldr	r3, [r3, #0]
    4182:	2b00      	cmp	r3, #0
    4184:	d024      	beq.n	41d0 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4186:	2300      	movs	r3, #0
    4188:	9301      	str	r3, [sp, #4]
    418a:	e01a      	b.n	41c2 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    418c:	4b1c      	ldr	r3, [pc, #112]	; (4200 <getSoscConfig+0x88>)
    418e:	6819      	ldr	r1, [r3, #0]
    4190:	9a01      	ldr	r2, [sp, #4]
    4192:	4613      	mov	r3, r2
    4194:	009b      	lsls	r3, r3, #2
    4196:	4413      	add	r3, r2
    4198:	009b      	lsls	r3, r3, #2
    419a:	440b      	add	r3, r1
    419c:	332c      	adds	r3, #44	; 0x2c
    419e:	681b      	ldr	r3, [r3, #0]
    41a0:	2b08      	cmp	r3, #8
    41a2:	d10b      	bne.n	41bc <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    41a4:	4b16      	ldr	r3, [pc, #88]	; (4200 <getSoscConfig+0x88>)
    41a6:	6819      	ldr	r1, [r3, #0]
    41a8:	9a01      	ldr	r2, [sp, #4]
    41aa:	4613      	mov	r3, r2
    41ac:	009b      	lsls	r3, r3, #2
    41ae:	4413      	add	r3, r2
    41b0:	009b      	lsls	r3, r3, #2
    41b2:	3328      	adds	r3, #40	; 0x28
    41b4:	440b      	add	r3, r1
    41b6:	3304      	adds	r3, #4
    41b8:	9300      	str	r3, [sp, #0]
                break;
    41ba:	e009      	b.n	41d0 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    41bc:	9b01      	ldr	r3, [sp, #4]
    41be:	3301      	adds	r3, #1
    41c0:	9301      	str	r3, [sp, #4]
    41c2:	4b0f      	ldr	r3, [pc, #60]	; (4200 <getSoscConfig+0x88>)
    41c4:	681b      	ldr	r3, [r3, #0]
    41c6:	7a5b      	ldrb	r3, [r3, #9]
    41c8:	461a      	mov	r2, r3
    41ca:	9b01      	ldr	r3, [sp, #4]
    41cc:	4293      	cmp	r3, r2
    41ce:	d3dd      	bcc.n	418c <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    41d0:	9b00      	ldr	r3, [sp, #0]
    41d2:	2b00      	cmp	r3, #0
    41d4:	d110      	bne.n	41f8 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    41d6:	4b0b      	ldr	r3, [pc, #44]	; (4204 <getSoscConfig+0x8c>)
    41d8:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    41da:	4b0a      	ldr	r3, [pc, #40]	; (4204 <getSoscConfig+0x8c>)
    41dc:	2208      	movs	r2, #8
    41de:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    41e0:	4b09      	ldr	r3, [pc, #36]	; (4208 <getSoscConfig+0x90>)
    41e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    41e6:	b29b      	uxth	r3, r3
    41e8:	f003 0301 	and.w	r3, r3, #1
    41ec:	b29a      	uxth	r2, r3
    41ee:	4b05      	ldr	r3, [pc, #20]	; (4204 <getSoscConfig+0x8c>)
    41f0:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    41f2:	4b04      	ldr	r3, [pc, #16]	; (4204 <getSoscConfig+0x8c>)
    41f4:	4a05      	ldr	r2, [pc, #20]	; (420c <getSoscConfig+0x94>)
    41f6:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    41f8:	9b00      	ldr	r3, [sp, #0]
}
    41fa:	4618      	mov	r0, r3
    41fc:	b002      	add	sp, #8
    41fe:	4770      	bx	lr
    4200:	1fff8c58 	.word	0x1fff8c58
    4204:	1fff8cd0 	.word	0x1fff8cd0
    4208:	40064000 	.word	0x40064000
    420c:	02625a00 	.word	0x02625a00

00004210 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4210:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4212:	2300      	movs	r3, #0
    4214:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4216:	4b28      	ldr	r3, [pc, #160]	; (42b8 <getSpllConfig+0xa8>)
    4218:	681b      	ldr	r3, [r3, #0]
    421a:	2b00      	cmp	r3, #0
    421c:	d023      	beq.n	4266 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    421e:	2300      	movs	r3, #0
    4220:	9301      	str	r3, [sp, #4]
    4222:	e019      	b.n	4258 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4224:	4b24      	ldr	r3, [pc, #144]	; (42b8 <getSpllConfig+0xa8>)
    4226:	6819      	ldr	r1, [r3, #0]
    4228:	9a01      	ldr	r2, [sp, #4]
    422a:	4613      	mov	r3, r2
    422c:	009b      	lsls	r3, r3, #2
    422e:	4413      	add	r3, r2
    4230:	00db      	lsls	r3, r3, #3
    4232:	440b      	add	r3, r1
    4234:	3340      	adds	r3, #64	; 0x40
    4236:	681b      	ldr	r3, [r3, #0]
    4238:	2b09      	cmp	r3, #9
    423a:	d10a      	bne.n	4252 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    423c:	4b1e      	ldr	r3, [pc, #120]	; (42b8 <getSpllConfig+0xa8>)
    423e:	6819      	ldr	r1, [r3, #0]
    4240:	9a01      	ldr	r2, [sp, #4]
    4242:	4613      	mov	r3, r2
    4244:	009b      	lsls	r3, r3, #2
    4246:	4413      	add	r3, r2
    4248:	00db      	lsls	r3, r3, #3
    424a:	3340      	adds	r3, #64	; 0x40
    424c:	440b      	add	r3, r1
    424e:	9300      	str	r3, [sp, #0]
                break;
    4250:	e009      	b.n	4266 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4252:	9b01      	ldr	r3, [sp, #4]
    4254:	3301      	adds	r3, #1
    4256:	9301      	str	r3, [sp, #4]
    4258:	4b17      	ldr	r3, [pc, #92]	; (42b8 <getSpllConfig+0xa8>)
    425a:	681b      	ldr	r3, [r3, #0]
    425c:	7a9b      	ldrb	r3, [r3, #10]
    425e:	461a      	mov	r2, r3
    4260:	9b01      	ldr	r3, [sp, #4]
    4262:	4293      	cmp	r3, r2
    4264:	d3de      	bcc.n	4224 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4266:	9b00      	ldr	r3, [sp, #0]
    4268:	2b00      	cmp	r3, #0
    426a:	d121      	bne.n	42b0 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    426c:	4b13      	ldr	r3, [pc, #76]	; (42bc <getSpllConfig+0xac>)
    426e:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4270:	4b12      	ldr	r3, [pc, #72]	; (42bc <getSpllConfig+0xac>)
    4272:	2209      	movs	r2, #9
    4274:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4276:	4b12      	ldr	r3, [pc, #72]	; (42c0 <getSpllConfig+0xb0>)
    4278:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    427c:	b29b      	uxth	r3, r3
    427e:	f003 0301 	and.w	r3, r3, #1
    4282:	b29a      	uxth	r2, r3
    4284:	4b0d      	ldr	r3, [pc, #52]	; (42bc <getSpllConfig+0xac>)
    4286:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4288:	4b0d      	ldr	r3, [pc, #52]	; (42c0 <getSpllConfig+0xb0>)
    428a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    428e:	0a1b      	lsrs	r3, r3, #8
    4290:	b2db      	uxtb	r3, r3
    4292:	f003 0307 	and.w	r3, r3, #7
    4296:	b2da      	uxtb	r2, r3
    4298:	4b08      	ldr	r3, [pc, #32]	; (42bc <getSpllConfig+0xac>)
    429a:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    429c:	4b08      	ldr	r3, [pc, #32]	; (42c0 <getSpllConfig+0xb0>)
    429e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    42a2:	0c1b      	lsrs	r3, r3, #16
    42a4:	b2db      	uxtb	r3, r3
    42a6:	f003 031f 	and.w	r3, r3, #31
    42aa:	b2da      	uxtb	r2, r3
    42ac:	4b03      	ldr	r3, [pc, #12]	; (42bc <getSpllConfig+0xac>)
    42ae:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    42b0:	9b00      	ldr	r3, [sp, #0]
}
    42b2:	4618      	mov	r0, r3
    42b4:	b002      	add	sp, #8
    42b6:	4770      	bx	lr
    42b8:	1fff8c58 	.word	0x1fff8c58
    42bc:	1fff8ce4 	.word	0x1fff8ce4
    42c0:	40064000 	.word	0x40064000

000042c4 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    42c4:	b086      	sub	sp, #24
    42c6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    42c8:	2300      	movs	r3, #0
    42ca:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    42cc:	9b01      	ldr	r3, [sp, #4]
    42ce:	2b1b      	cmp	r3, #27
    42d0:	d00f      	beq.n	42f2 <getSelectorConfig+0x2e>
    42d2:	9b01      	ldr	r3, [sp, #4]
    42d4:	2b1b      	cmp	r3, #27
    42d6:	d80f      	bhi.n	42f8 <getSelectorConfig+0x34>
    42d8:	9b01      	ldr	r3, [sp, #4]
    42da:	2b19      	cmp	r3, #25
    42dc:	d003      	beq.n	42e6 <getSelectorConfig+0x22>
    42de:	9b01      	ldr	r3, [sp, #4]
    42e0:	2b1a      	cmp	r3, #26
    42e2:	d003      	beq.n	42ec <getSelectorConfig+0x28>
    42e4:	e008      	b.n	42f8 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    42e6:	2300      	movs	r3, #0
    42e8:	9304      	str	r3, [sp, #16]
            break;
    42ea:	e008      	b.n	42fe <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    42ec:	2301      	movs	r3, #1
    42ee:	9304      	str	r3, [sp, #16]
            break;
    42f0:	e005      	b.n	42fe <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    42f2:	2302      	movs	r3, #2
    42f4:	9304      	str	r3, [sp, #16]
            break;
    42f6:	e002      	b.n	42fe <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    42f8:	2300      	movs	r3, #0
    42fa:	9304      	str	r3, [sp, #16]
            break;
    42fc:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    42fe:	4b36      	ldr	r3, [pc, #216]	; (43d8 <getSelectorConfig+0x114>)
    4300:	681b      	ldr	r3, [r3, #0]
    4302:	2b00      	cmp	r3, #0
    4304:	d01d      	beq.n	4342 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4306:	2300      	movs	r3, #0
    4308:	9303      	str	r3, [sp, #12]
    430a:	e013      	b.n	4334 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    430c:	4b32      	ldr	r3, [pc, #200]	; (43d8 <getSelectorConfig+0x114>)
    430e:	681b      	ldr	r3, [r3, #0]
    4310:	9a03      	ldr	r2, [sp, #12]
    4312:	320d      	adds	r2, #13
    4314:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4318:	9a01      	ldr	r2, [sp, #4]
    431a:	429a      	cmp	r2, r3
    431c:	d107      	bne.n	432e <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    431e:	4b2e      	ldr	r3, [pc, #184]	; (43d8 <getSelectorConfig+0x114>)
    4320:	681a      	ldr	r2, [r3, #0]
    4322:	9b03      	ldr	r3, [sp, #12]
    4324:	330d      	adds	r3, #13
    4326:	00db      	lsls	r3, r3, #3
    4328:	4413      	add	r3, r2
    432a:	9305      	str	r3, [sp, #20]
                break;
    432c:	e009      	b.n	4342 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    432e:	9b03      	ldr	r3, [sp, #12]
    4330:	3301      	adds	r3, #1
    4332:	9303      	str	r3, [sp, #12]
    4334:	4b28      	ldr	r3, [pc, #160]	; (43d8 <getSelectorConfig+0x114>)
    4336:	681b      	ldr	r3, [r3, #0]
    4338:	7adb      	ldrb	r3, [r3, #11]
    433a:	461a      	mov	r2, r3
    433c:	9b03      	ldr	r3, [sp, #12]
    433e:	4293      	cmp	r3, r2
    4340:	d3e4      	bcc.n	430c <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4342:	9b05      	ldr	r3, [sp, #20]
    4344:	2b00      	cmp	r3, #0
    4346:	d140      	bne.n	43ca <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4348:	9b04      	ldr	r3, [sp, #16]
    434a:	00db      	lsls	r3, r3, #3
    434c:	4a23      	ldr	r2, [pc, #140]	; (43dc <getSelectorConfig+0x118>)
    434e:	4413      	add	r3, r2
    4350:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4352:	4922      	ldr	r1, [pc, #136]	; (43dc <getSelectorConfig+0x118>)
    4354:	9b04      	ldr	r3, [sp, #16]
    4356:	9a01      	ldr	r2, [sp, #4]
    4358:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    435c:	9b01      	ldr	r3, [sp, #4]
    435e:	2b1b      	cmp	r3, #27
    4360:	d025      	beq.n	43ae <getSelectorConfig+0xea>
    4362:	9b01      	ldr	r3, [sp, #4]
    4364:	2b1b      	cmp	r3, #27
    4366:	d832      	bhi.n	43ce <getSelectorConfig+0x10a>
    4368:	9b01      	ldr	r3, [sp, #4]
    436a:	2b19      	cmp	r3, #25
    436c:	d003      	beq.n	4376 <getSelectorConfig+0xb2>
    436e:	9b01      	ldr	r3, [sp, #4]
    4370:	2b1a      	cmp	r3, #26
    4372:	d00e      	beq.n	4392 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4374:	e02b      	b.n	43ce <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4376:	4b1a      	ldr	r3, [pc, #104]	; (43e0 <getSelectorConfig+0x11c>)
    4378:	695b      	ldr	r3, [r3, #20]
    437a:	0e1b      	lsrs	r3, r3, #24
    437c:	f003 030f 	and.w	r3, r3, #15
    4380:	4a18      	ldr	r2, [pc, #96]	; (43e4 <getSelectorConfig+0x120>)
    4382:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4386:	4915      	ldr	r1, [pc, #84]	; (43dc <getSelectorConfig+0x118>)
    4388:	9b04      	ldr	r3, [sp, #16]
    438a:	00db      	lsls	r3, r3, #3
    438c:	440b      	add	r3, r1
    438e:	605a      	str	r2, [r3, #4]
                break;
    4390:	e01e      	b.n	43d0 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4392:	4b13      	ldr	r3, [pc, #76]	; (43e0 <getSelectorConfig+0x11c>)
    4394:	699b      	ldr	r3, [r3, #24]
    4396:	0e1b      	lsrs	r3, r3, #24
    4398:	f003 030f 	and.w	r3, r3, #15
    439c:	4a11      	ldr	r2, [pc, #68]	; (43e4 <getSelectorConfig+0x120>)
    439e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    43a2:	490e      	ldr	r1, [pc, #56]	; (43dc <getSelectorConfig+0x118>)
    43a4:	9b04      	ldr	r3, [sp, #16]
    43a6:	00db      	lsls	r3, r3, #3
    43a8:	440b      	add	r3, r1
    43aa:	605a      	str	r2, [r3, #4]
                break;
    43ac:	e010      	b.n	43d0 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    43ae:	4b0c      	ldr	r3, [pc, #48]	; (43e0 <getSelectorConfig+0x11c>)
    43b0:	69db      	ldr	r3, [r3, #28]
    43b2:	0e1b      	lsrs	r3, r3, #24
    43b4:	f003 030f 	and.w	r3, r3, #15
    43b8:	4a0a      	ldr	r2, [pc, #40]	; (43e4 <getSelectorConfig+0x120>)
    43ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    43be:	4907      	ldr	r1, [pc, #28]	; (43dc <getSelectorConfig+0x118>)
    43c0:	9b04      	ldr	r3, [sp, #16]
    43c2:	00db      	lsls	r3, r3, #3
    43c4:	440b      	add	r3, r1
    43c6:	605a      	str	r2, [r3, #4]
                break;
    43c8:	e002      	b.n	43d0 <getSelectorConfig+0x10c>
        }
    }
    43ca:	bf00      	nop
    43cc:	e000      	b.n	43d0 <getSelectorConfig+0x10c>
                break;
    43ce:	bf00      	nop

    return ReturnValue;
    43d0:	9b05      	ldr	r3, [sp, #20]
}
    43d2:	4618      	mov	r0, r3
    43d4:	b006      	add	sp, #24
    43d6:	4770      	bx	lr
    43d8:	1fff8c58 	.word	0x1fff8c58
    43dc:	1fff8d0c 	.word	0x1fff8d0c
    43e0:	40064000 	.word	0x40064000
    43e4:	0000c160 	.word	0x0000c160

000043e8 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    43e8:	b086      	sub	sp, #24
    43ea:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    43ec:	2300      	movs	r3, #0
    43ee:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    43f0:	2300      	movs	r3, #0
    43f2:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    43f4:	9b01      	ldr	r3, [sp, #4]
    43f6:	2b1f      	cmp	r3, #31
    43f8:	d00f      	beq.n	441a <getCoreDividerConfig+0x32>
    43fa:	9b01      	ldr	r3, [sp, #4]
    43fc:	2b1f      	cmp	r3, #31
    43fe:	d80f      	bhi.n	4420 <getCoreDividerConfig+0x38>
    4400:	9b01      	ldr	r3, [sp, #4]
    4402:	2b1d      	cmp	r3, #29
    4404:	d003      	beq.n	440e <getCoreDividerConfig+0x26>
    4406:	9b01      	ldr	r3, [sp, #4]
    4408:	2b1e      	cmp	r3, #30
    440a:	d003      	beq.n	4414 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    440c:	e008      	b.n	4420 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    440e:	2300      	movs	r3, #0
    4410:	9304      	str	r3, [sp, #16]
            break;
    4412:	e006      	b.n	4422 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4414:	2301      	movs	r3, #1
    4416:	9304      	str	r3, [sp, #16]
            break;
    4418:	e003      	b.n	4422 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    441a:	2302      	movs	r3, #2
    441c:	9304      	str	r3, [sp, #16]
            break;
    441e:	e000      	b.n	4422 <getCoreDividerConfig+0x3a>
                break;
    4420:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4422:	4b41      	ldr	r3, [pc, #260]	; (4528 <getCoreDividerConfig+0x140>)
    4424:	681b      	ldr	r3, [r3, #0]
    4426:	2b00      	cmp	r3, #0
    4428:	d026      	beq.n	4478 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    442a:	2300      	movs	r3, #0
    442c:	9303      	str	r3, [sp, #12]
    442e:	e01c      	b.n	446a <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4430:	4b3d      	ldr	r3, [pc, #244]	; (4528 <getCoreDividerConfig+0x140>)
    4432:	6819      	ldr	r1, [r3, #0]
    4434:	9a03      	ldr	r2, [sp, #12]
    4436:	4613      	mov	r3, r2
    4438:	005b      	lsls	r3, r3, #1
    443a:	4413      	add	r3, r2
    443c:	009b      	lsls	r3, r3, #2
    443e:	440b      	add	r3, r1
    4440:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4444:	681b      	ldr	r3, [r3, #0]
    4446:	9a01      	ldr	r2, [sp, #4]
    4448:	429a      	cmp	r2, r3
    444a:	d10b      	bne.n	4464 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    444c:	4b36      	ldr	r3, [pc, #216]	; (4528 <getCoreDividerConfig+0x140>)
    444e:	6819      	ldr	r1, [r3, #0]
    4450:	9a03      	ldr	r2, [sp, #12]
    4452:	4613      	mov	r3, r2
    4454:	005b      	lsls	r3, r3, #1
    4456:	4413      	add	r3, r2
    4458:	009b      	lsls	r3, r3, #2
    445a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    445e:	440b      	add	r3, r1
    4460:	9305      	str	r3, [sp, #20]
                break;
    4462:	e009      	b.n	4478 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4464:	9b03      	ldr	r3, [sp, #12]
    4466:	3301      	adds	r3, #1
    4468:	9303      	str	r3, [sp, #12]
    446a:	4b2f      	ldr	r3, [pc, #188]	; (4528 <getCoreDividerConfig+0x140>)
    446c:	681b      	ldr	r3, [r3, #0]
    446e:	7b1b      	ldrb	r3, [r3, #12]
    4470:	461a      	mov	r2, r3
    4472:	9b03      	ldr	r3, [sp, #12]
    4474:	4293      	cmp	r3, r2
    4476:	d3db      	bcc.n	4430 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4478:	9b05      	ldr	r3, [sp, #20]
    447a:	2b00      	cmp	r3, #0
    447c:	d14d      	bne.n	451a <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    447e:	9a04      	ldr	r2, [sp, #16]
    4480:	4613      	mov	r3, r2
    4482:	005b      	lsls	r3, r3, #1
    4484:	4413      	add	r3, r2
    4486:	009b      	lsls	r3, r3, #2
    4488:	4a28      	ldr	r2, [pc, #160]	; (452c <getCoreDividerConfig+0x144>)
    448a:	4413      	add	r3, r2
    448c:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    448e:	4927      	ldr	r1, [pc, #156]	; (452c <getCoreDividerConfig+0x144>)
    4490:	9a04      	ldr	r2, [sp, #16]
    4492:	4613      	mov	r3, r2
    4494:	005b      	lsls	r3, r3, #1
    4496:	4413      	add	r3, r2
    4498:	009b      	lsls	r3, r3, #2
    449a:	440b      	add	r3, r1
    449c:	9a01      	ldr	r2, [sp, #4]
    449e:	601a      	str	r2, [r3, #0]
        switch(Name)
    44a0:	9b01      	ldr	r3, [sp, #4]
    44a2:	2b1f      	cmp	r3, #31
    44a4:	d029      	beq.n	44fa <getCoreDividerConfig+0x112>
    44a6:	9b01      	ldr	r3, [sp, #4]
    44a8:	2b1f      	cmp	r3, #31
    44aa:	d838      	bhi.n	451e <getCoreDividerConfig+0x136>
    44ac:	9b01      	ldr	r3, [sp, #4]
    44ae:	2b1d      	cmp	r3, #29
    44b0:	d003      	beq.n	44ba <getCoreDividerConfig+0xd2>
    44b2:	9b01      	ldr	r3, [sp, #4]
    44b4:	2b1e      	cmp	r3, #30
    44b6:	d010      	beq.n	44da <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    44b8:	e031      	b.n	451e <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    44ba:	4b1d      	ldr	r3, [pc, #116]	; (4530 <getCoreDividerConfig+0x148>)
    44bc:	695b      	ldr	r3, [r3, #20]
    44be:	0c1b      	lsrs	r3, r3, #16
    44c0:	f003 030f 	and.w	r3, r3, #15
    44c4:	1c59      	adds	r1, r3, #1
    44c6:	4819      	ldr	r0, [pc, #100]	; (452c <getCoreDividerConfig+0x144>)
    44c8:	9a04      	ldr	r2, [sp, #16]
    44ca:	4613      	mov	r3, r2
    44cc:	005b      	lsls	r3, r3, #1
    44ce:	4413      	add	r3, r2
    44d0:	009b      	lsls	r3, r3, #2
    44d2:	4403      	add	r3, r0
    44d4:	3304      	adds	r3, #4
    44d6:	6019      	str	r1, [r3, #0]
                break;
    44d8:	e022      	b.n	4520 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    44da:	4b15      	ldr	r3, [pc, #84]	; (4530 <getCoreDividerConfig+0x148>)
    44dc:	699b      	ldr	r3, [r3, #24]
    44de:	0c1b      	lsrs	r3, r3, #16
    44e0:	f003 030f 	and.w	r3, r3, #15
    44e4:	1c59      	adds	r1, r3, #1
    44e6:	4811      	ldr	r0, [pc, #68]	; (452c <getCoreDividerConfig+0x144>)
    44e8:	9a04      	ldr	r2, [sp, #16]
    44ea:	4613      	mov	r3, r2
    44ec:	005b      	lsls	r3, r3, #1
    44ee:	4413      	add	r3, r2
    44f0:	009b      	lsls	r3, r3, #2
    44f2:	4403      	add	r3, r0
    44f4:	3304      	adds	r3, #4
    44f6:	6019      	str	r1, [r3, #0]
                break;
    44f8:	e012      	b.n	4520 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    44fa:	4b0d      	ldr	r3, [pc, #52]	; (4530 <getCoreDividerConfig+0x148>)
    44fc:	69db      	ldr	r3, [r3, #28]
    44fe:	0c1b      	lsrs	r3, r3, #16
    4500:	f003 030f 	and.w	r3, r3, #15
    4504:	1c59      	adds	r1, r3, #1
    4506:	4809      	ldr	r0, [pc, #36]	; (452c <getCoreDividerConfig+0x144>)
    4508:	9a04      	ldr	r2, [sp, #16]
    450a:	4613      	mov	r3, r2
    450c:	005b      	lsls	r3, r3, #1
    450e:	4413      	add	r3, r2
    4510:	009b      	lsls	r3, r3, #2
    4512:	4403      	add	r3, r0
    4514:	3304      	adds	r3, #4
    4516:	6019      	str	r1, [r3, #0]
                break;
    4518:	e002      	b.n	4520 <getCoreDividerConfig+0x138>
        }
    }
    451a:	bf00      	nop
    451c:	e000      	b.n	4520 <getCoreDividerConfig+0x138>
                break;
    451e:	bf00      	nop

    return ReturnValue;
    4520:	9b05      	ldr	r3, [sp, #20]
}
    4522:	4618      	mov	r0, r3
    4524:	b006      	add	sp, #24
    4526:	4770      	bx	lr
    4528:	1fff8c58 	.word	0x1fff8c58
    452c:	1fff8d24 	.word	0x1fff8d24
    4530:	40064000 	.word	0x40064000

00004534 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4534:	b086      	sub	sp, #24
    4536:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4538:	2300      	movs	r3, #0
    453a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    453c:	2300      	movs	r3, #0
    453e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4540:	9b01      	ldr	r3, [sp, #4]
    4542:	2b23      	cmp	r3, #35	; 0x23
    4544:	d00f      	beq.n	4566 <getBusDividerConfig+0x32>
    4546:	9b01      	ldr	r3, [sp, #4]
    4548:	2b23      	cmp	r3, #35	; 0x23
    454a:	d80f      	bhi.n	456c <getBusDividerConfig+0x38>
    454c:	9b01      	ldr	r3, [sp, #4]
    454e:	2b21      	cmp	r3, #33	; 0x21
    4550:	d003      	beq.n	455a <getBusDividerConfig+0x26>
    4552:	9b01      	ldr	r3, [sp, #4]
    4554:	2b22      	cmp	r3, #34	; 0x22
    4556:	d003      	beq.n	4560 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4558:	e008      	b.n	456c <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    455a:	2300      	movs	r3, #0
    455c:	9304      	str	r3, [sp, #16]
            break;
    455e:	e006      	b.n	456e <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4560:	2301      	movs	r3, #1
    4562:	9304      	str	r3, [sp, #16]
            break;
    4564:	e003      	b.n	456e <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4566:	2302      	movs	r3, #2
    4568:	9304      	str	r3, [sp, #16]
            break;
    456a:	e000      	b.n	456e <getBusDividerConfig+0x3a>
                break;
    456c:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    456e:	4b41      	ldr	r3, [pc, #260]	; (4674 <getBusDividerConfig+0x140>)
    4570:	681b      	ldr	r3, [r3, #0]
    4572:	2b00      	cmp	r3, #0
    4574:	d026      	beq.n	45c4 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4576:	2300      	movs	r3, #0
    4578:	9303      	str	r3, [sp, #12]
    457a:	e01c      	b.n	45b6 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    457c:	4b3d      	ldr	r3, [pc, #244]	; (4674 <getBusDividerConfig+0x140>)
    457e:	6819      	ldr	r1, [r3, #0]
    4580:	9a03      	ldr	r2, [sp, #12]
    4582:	4613      	mov	r3, r2
    4584:	005b      	lsls	r3, r3, #1
    4586:	4413      	add	r3, r2
    4588:	009b      	lsls	r3, r3, #2
    458a:	440b      	add	r3, r1
    458c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4590:	681b      	ldr	r3, [r3, #0]
    4592:	9a01      	ldr	r2, [sp, #4]
    4594:	429a      	cmp	r2, r3
    4596:	d10b      	bne.n	45b0 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4598:	4b36      	ldr	r3, [pc, #216]	; (4674 <getBusDividerConfig+0x140>)
    459a:	6819      	ldr	r1, [r3, #0]
    459c:	9a03      	ldr	r2, [sp, #12]
    459e:	4613      	mov	r3, r2
    45a0:	005b      	lsls	r3, r3, #1
    45a2:	4413      	add	r3, r2
    45a4:	009b      	lsls	r3, r3, #2
    45a6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    45aa:	440b      	add	r3, r1
    45ac:	9305      	str	r3, [sp, #20]
                break;
    45ae:	e009      	b.n	45c4 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    45b0:	9b03      	ldr	r3, [sp, #12]
    45b2:	3301      	adds	r3, #1
    45b4:	9303      	str	r3, [sp, #12]
    45b6:	4b2f      	ldr	r3, [pc, #188]	; (4674 <getBusDividerConfig+0x140>)
    45b8:	681b      	ldr	r3, [r3, #0]
    45ba:	7b1b      	ldrb	r3, [r3, #12]
    45bc:	461a      	mov	r2, r3
    45be:	9b03      	ldr	r3, [sp, #12]
    45c0:	4293      	cmp	r3, r2
    45c2:	d3db      	bcc.n	457c <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    45c4:	9b05      	ldr	r3, [sp, #20]
    45c6:	2b00      	cmp	r3, #0
    45c8:	d14d      	bne.n	4666 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    45ca:	9a04      	ldr	r2, [sp, #16]
    45cc:	4613      	mov	r3, r2
    45ce:	005b      	lsls	r3, r3, #1
    45d0:	4413      	add	r3, r2
    45d2:	009b      	lsls	r3, r3, #2
    45d4:	4a28      	ldr	r2, [pc, #160]	; (4678 <getBusDividerConfig+0x144>)
    45d6:	4413      	add	r3, r2
    45d8:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    45da:	4927      	ldr	r1, [pc, #156]	; (4678 <getBusDividerConfig+0x144>)
    45dc:	9a04      	ldr	r2, [sp, #16]
    45de:	4613      	mov	r3, r2
    45e0:	005b      	lsls	r3, r3, #1
    45e2:	4413      	add	r3, r2
    45e4:	009b      	lsls	r3, r3, #2
    45e6:	440b      	add	r3, r1
    45e8:	9a01      	ldr	r2, [sp, #4]
    45ea:	601a      	str	r2, [r3, #0]
        switch(Name)
    45ec:	9b01      	ldr	r3, [sp, #4]
    45ee:	2b23      	cmp	r3, #35	; 0x23
    45f0:	d029      	beq.n	4646 <getBusDividerConfig+0x112>
    45f2:	9b01      	ldr	r3, [sp, #4]
    45f4:	2b23      	cmp	r3, #35	; 0x23
    45f6:	d838      	bhi.n	466a <getBusDividerConfig+0x136>
    45f8:	9b01      	ldr	r3, [sp, #4]
    45fa:	2b21      	cmp	r3, #33	; 0x21
    45fc:	d003      	beq.n	4606 <getBusDividerConfig+0xd2>
    45fe:	9b01      	ldr	r3, [sp, #4]
    4600:	2b22      	cmp	r3, #34	; 0x22
    4602:	d010      	beq.n	4626 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4604:	e031      	b.n	466a <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    4606:	4b1d      	ldr	r3, [pc, #116]	; (467c <getBusDividerConfig+0x148>)
    4608:	695b      	ldr	r3, [r3, #20]
    460a:	091b      	lsrs	r3, r3, #4
    460c:	f003 030f 	and.w	r3, r3, #15
    4610:	1c59      	adds	r1, r3, #1
    4612:	4819      	ldr	r0, [pc, #100]	; (4678 <getBusDividerConfig+0x144>)
    4614:	9a04      	ldr	r2, [sp, #16]
    4616:	4613      	mov	r3, r2
    4618:	005b      	lsls	r3, r3, #1
    461a:	4413      	add	r3, r2
    461c:	009b      	lsls	r3, r3, #2
    461e:	4403      	add	r3, r0
    4620:	3304      	adds	r3, #4
    4622:	6019      	str	r1, [r3, #0]
                break;
    4624:	e022      	b.n	466c <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    4626:	4b15      	ldr	r3, [pc, #84]	; (467c <getBusDividerConfig+0x148>)
    4628:	699b      	ldr	r3, [r3, #24]
    462a:	091b      	lsrs	r3, r3, #4
    462c:	f003 030f 	and.w	r3, r3, #15
    4630:	1c59      	adds	r1, r3, #1
    4632:	4811      	ldr	r0, [pc, #68]	; (4678 <getBusDividerConfig+0x144>)
    4634:	9a04      	ldr	r2, [sp, #16]
    4636:	4613      	mov	r3, r2
    4638:	005b      	lsls	r3, r3, #1
    463a:	4413      	add	r3, r2
    463c:	009b      	lsls	r3, r3, #2
    463e:	4403      	add	r3, r0
    4640:	3304      	adds	r3, #4
    4642:	6019      	str	r1, [r3, #0]
                break;
    4644:	e012      	b.n	466c <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    4646:	4b0d      	ldr	r3, [pc, #52]	; (467c <getBusDividerConfig+0x148>)
    4648:	69db      	ldr	r3, [r3, #28]
    464a:	091b      	lsrs	r3, r3, #4
    464c:	f003 030f 	and.w	r3, r3, #15
    4650:	1c59      	adds	r1, r3, #1
    4652:	4809      	ldr	r0, [pc, #36]	; (4678 <getBusDividerConfig+0x144>)
    4654:	9a04      	ldr	r2, [sp, #16]
    4656:	4613      	mov	r3, r2
    4658:	005b      	lsls	r3, r3, #1
    465a:	4413      	add	r3, r2
    465c:	009b      	lsls	r3, r3, #2
    465e:	4403      	add	r3, r0
    4660:	3304      	adds	r3, #4
    4662:	6019      	str	r1, [r3, #0]
                break;
    4664:	e002      	b.n	466c <getBusDividerConfig+0x138>
        }
    }
    4666:	bf00      	nop
    4668:	e000      	b.n	466c <getBusDividerConfig+0x138>
                break;
    466a:	bf00      	nop

    return ReturnValue;
    466c:	9b05      	ldr	r3, [sp, #20]
}
    466e:	4618      	mov	r0, r3
    4670:	b006      	add	sp, #24
    4672:	4770      	bx	lr
    4674:	1fff8c58 	.word	0x1fff8c58
    4678:	1fff8d48 	.word	0x1fff8d48
    467c:	40064000 	.word	0x40064000

00004680 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    4680:	b086      	sub	sp, #24
    4682:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4684:	2300      	movs	r3, #0
    4686:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4688:	2300      	movs	r3, #0
    468a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    468c:	9b01      	ldr	r3, [sp, #4]
    468e:	2b27      	cmp	r3, #39	; 0x27
    4690:	d00f      	beq.n	46b2 <getSlowDividerConfig+0x32>
    4692:	9b01      	ldr	r3, [sp, #4]
    4694:	2b27      	cmp	r3, #39	; 0x27
    4696:	d80f      	bhi.n	46b8 <getSlowDividerConfig+0x38>
    4698:	9b01      	ldr	r3, [sp, #4]
    469a:	2b25      	cmp	r3, #37	; 0x25
    469c:	d003      	beq.n	46a6 <getSlowDividerConfig+0x26>
    469e:	9b01      	ldr	r3, [sp, #4]
    46a0:	2b26      	cmp	r3, #38	; 0x26
    46a2:	d003      	beq.n	46ac <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    46a4:	e008      	b.n	46b8 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    46a6:	2300      	movs	r3, #0
    46a8:	9304      	str	r3, [sp, #16]
            break;
    46aa:	e006      	b.n	46ba <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    46ac:	2301      	movs	r3, #1
    46ae:	9304      	str	r3, [sp, #16]
            break;
    46b0:	e003      	b.n	46ba <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    46b2:	2302      	movs	r3, #2
    46b4:	9304      	str	r3, [sp, #16]
            break;
    46b6:	e000      	b.n	46ba <getSlowDividerConfig+0x3a>
                break;
    46b8:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    46ba:	4b40      	ldr	r3, [pc, #256]	; (47bc <getSlowDividerConfig+0x13c>)
    46bc:	681b      	ldr	r3, [r3, #0]
    46be:	2b00      	cmp	r3, #0
    46c0:	d026      	beq.n	4710 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    46c2:	2300      	movs	r3, #0
    46c4:	9303      	str	r3, [sp, #12]
    46c6:	e01c      	b.n	4702 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    46c8:	4b3c      	ldr	r3, [pc, #240]	; (47bc <getSlowDividerConfig+0x13c>)
    46ca:	6819      	ldr	r1, [r3, #0]
    46cc:	9a03      	ldr	r2, [sp, #12]
    46ce:	4613      	mov	r3, r2
    46d0:	005b      	lsls	r3, r3, #1
    46d2:	4413      	add	r3, r2
    46d4:	009b      	lsls	r3, r3, #2
    46d6:	440b      	add	r3, r1
    46d8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    46dc:	681b      	ldr	r3, [r3, #0]
    46de:	9a01      	ldr	r2, [sp, #4]
    46e0:	429a      	cmp	r2, r3
    46e2:	d10b      	bne.n	46fc <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    46e4:	4b35      	ldr	r3, [pc, #212]	; (47bc <getSlowDividerConfig+0x13c>)
    46e6:	6819      	ldr	r1, [r3, #0]
    46e8:	9a03      	ldr	r2, [sp, #12]
    46ea:	4613      	mov	r3, r2
    46ec:	005b      	lsls	r3, r3, #1
    46ee:	4413      	add	r3, r2
    46f0:	009b      	lsls	r3, r3, #2
    46f2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    46f6:	440b      	add	r3, r1
    46f8:	9305      	str	r3, [sp, #20]
                break;
    46fa:	e009      	b.n	4710 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    46fc:	9b03      	ldr	r3, [sp, #12]
    46fe:	3301      	adds	r3, #1
    4700:	9303      	str	r3, [sp, #12]
    4702:	4b2e      	ldr	r3, [pc, #184]	; (47bc <getSlowDividerConfig+0x13c>)
    4704:	681b      	ldr	r3, [r3, #0]
    4706:	7b1b      	ldrb	r3, [r3, #12]
    4708:	461a      	mov	r2, r3
    470a:	9b03      	ldr	r3, [sp, #12]
    470c:	4293      	cmp	r3, r2
    470e:	d3db      	bcc.n	46c8 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4710:	9b05      	ldr	r3, [sp, #20]
    4712:	2b00      	cmp	r3, #0
    4714:	d14a      	bne.n	47ac <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    4716:	9a04      	ldr	r2, [sp, #16]
    4718:	4613      	mov	r3, r2
    471a:	005b      	lsls	r3, r3, #1
    471c:	4413      	add	r3, r2
    471e:	009b      	lsls	r3, r3, #2
    4720:	4a27      	ldr	r2, [pc, #156]	; (47c0 <getSlowDividerConfig+0x140>)
    4722:	4413      	add	r3, r2
    4724:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    4726:	4926      	ldr	r1, [pc, #152]	; (47c0 <getSlowDividerConfig+0x140>)
    4728:	9a04      	ldr	r2, [sp, #16]
    472a:	4613      	mov	r3, r2
    472c:	005b      	lsls	r3, r3, #1
    472e:	4413      	add	r3, r2
    4730:	009b      	lsls	r3, r3, #2
    4732:	440b      	add	r3, r1
    4734:	9a01      	ldr	r2, [sp, #4]
    4736:	601a      	str	r2, [r3, #0]
        switch(Name)
    4738:	9b01      	ldr	r3, [sp, #4]
    473a:	2b27      	cmp	r3, #39	; 0x27
    473c:	d027      	beq.n	478e <getSlowDividerConfig+0x10e>
    473e:	9b01      	ldr	r3, [sp, #4]
    4740:	2b27      	cmp	r3, #39	; 0x27
    4742:	d835      	bhi.n	47b0 <getSlowDividerConfig+0x130>
    4744:	9b01      	ldr	r3, [sp, #4]
    4746:	2b25      	cmp	r3, #37	; 0x25
    4748:	d003      	beq.n	4752 <getSlowDividerConfig+0xd2>
    474a:	9b01      	ldr	r3, [sp, #4]
    474c:	2b26      	cmp	r3, #38	; 0x26
    474e:	d00f      	beq.n	4770 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4750:	e02e      	b.n	47b0 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    4752:	4b1c      	ldr	r3, [pc, #112]	; (47c4 <getSlowDividerConfig+0x144>)
    4754:	695b      	ldr	r3, [r3, #20]
    4756:	f003 030f 	and.w	r3, r3, #15
    475a:	1c59      	adds	r1, r3, #1
    475c:	4818      	ldr	r0, [pc, #96]	; (47c0 <getSlowDividerConfig+0x140>)
    475e:	9a04      	ldr	r2, [sp, #16]
    4760:	4613      	mov	r3, r2
    4762:	005b      	lsls	r3, r3, #1
    4764:	4413      	add	r3, r2
    4766:	009b      	lsls	r3, r3, #2
    4768:	4403      	add	r3, r0
    476a:	3304      	adds	r3, #4
    476c:	6019      	str	r1, [r3, #0]
                break;
    476e:	e020      	b.n	47b2 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    4770:	4b14      	ldr	r3, [pc, #80]	; (47c4 <getSlowDividerConfig+0x144>)
    4772:	699b      	ldr	r3, [r3, #24]
    4774:	f003 030f 	and.w	r3, r3, #15
    4778:	1c59      	adds	r1, r3, #1
    477a:	4811      	ldr	r0, [pc, #68]	; (47c0 <getSlowDividerConfig+0x140>)
    477c:	9a04      	ldr	r2, [sp, #16]
    477e:	4613      	mov	r3, r2
    4780:	005b      	lsls	r3, r3, #1
    4782:	4413      	add	r3, r2
    4784:	009b      	lsls	r3, r3, #2
    4786:	4403      	add	r3, r0
    4788:	3304      	adds	r3, #4
    478a:	6019      	str	r1, [r3, #0]
                break;
    478c:	e011      	b.n	47b2 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    478e:	4b0d      	ldr	r3, [pc, #52]	; (47c4 <getSlowDividerConfig+0x144>)
    4790:	69db      	ldr	r3, [r3, #28]
    4792:	f003 030f 	and.w	r3, r3, #15
    4796:	1c59      	adds	r1, r3, #1
    4798:	4809      	ldr	r0, [pc, #36]	; (47c0 <getSlowDividerConfig+0x140>)
    479a:	9a04      	ldr	r2, [sp, #16]
    479c:	4613      	mov	r3, r2
    479e:	005b      	lsls	r3, r3, #1
    47a0:	4413      	add	r3, r2
    47a2:	009b      	lsls	r3, r3, #2
    47a4:	4403      	add	r3, r0
    47a6:	3304      	adds	r3, #4
    47a8:	6019      	str	r1, [r3, #0]
                break;
    47aa:	e002      	b.n	47b2 <getSlowDividerConfig+0x132>
        }
    }
    47ac:	bf00      	nop
    47ae:	e000      	b.n	47b2 <getSlowDividerConfig+0x132>
                break;
    47b0:	bf00      	nop

    return ReturnValue;
    47b2:	9b05      	ldr	r3, [sp, #20]
}
    47b4:	4618      	mov	r0, r3
    47b6:	b006      	add	sp, #24
    47b8:	4770      	bx	lr
    47ba:	bf00      	nop
    47bc:	1fff8c58 	.word	0x1fff8c58
    47c0:	1fff8d6c 	.word	0x1fff8d6c
    47c4:	40064000 	.word	0x40064000

000047c8 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    47c8:	b500      	push	{lr}
    47ca:	b083      	sub	sp, #12
    47cc:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    47ce:	4b64      	ldr	r3, [pc, #400]	; (4960 <Clock_Ip_ClockInitializeObjects+0x198>)
    47d0:	781b      	ldrb	r3, [r3, #0]
    47d2:	f083 0301 	eor.w	r3, r3, #1
    47d6:	b2db      	uxtb	r3, r3
    47d8:	2b00      	cmp	r3, #0
    47da:	d05b      	beq.n	4894 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    47dc:	4b60      	ldr	r3, [pc, #384]	; (4960 <Clock_Ip_ClockInitializeObjects+0x198>)
    47de:	2201      	movs	r2, #1
    47e0:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    47e2:	4b60      	ldr	r3, [pc, #384]	; (4964 <Clock_Ip_ClockInitializeObjects+0x19c>)
    47e4:	785b      	ldrb	r3, [r3, #1]
    47e6:	461a      	mov	r2, r3
    47e8:	4613      	mov	r3, r2
    47ea:	009b      	lsls	r3, r3, #2
    47ec:	4413      	add	r3, r2
    47ee:	009b      	lsls	r3, r3, #2
    47f0:	4a5d      	ldr	r2, [pc, #372]	; (4968 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    47f2:	4413      	add	r3, r2
    47f4:	4a5d      	ldr	r2, [pc, #372]	; (496c <Clock_Ip_ClockInitializeObjects+0x1a4>)
    47f6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    47f8:	4b5d      	ldr	r3, [pc, #372]	; (4970 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    47fa:	785b      	ldrb	r3, [r3, #1]
    47fc:	461a      	mov	r2, r3
    47fe:	4613      	mov	r3, r2
    4800:	009b      	lsls	r3, r3, #2
    4802:	4413      	add	r3, r2
    4804:	009b      	lsls	r3, r3, #2
    4806:	4a5b      	ldr	r2, [pc, #364]	; (4974 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    4808:	4413      	add	r3, r2
    480a:	4a5b      	ldr	r2, [pc, #364]	; (4978 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    480c:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    480e:	4b5b      	ldr	r3, [pc, #364]	; (497c <Clock_Ip_ClockInitializeObjects+0x1b4>)
    4810:	791b      	ldrb	r3, [r3, #4]
    4812:	461a      	mov	r2, r3
    4814:	4613      	mov	r3, r2
    4816:	005b      	lsls	r3, r3, #1
    4818:	4413      	add	r3, r2
    481a:	009b      	lsls	r3, r3, #2
    481c:	4a58      	ldr	r2, [pc, #352]	; (4980 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    481e:	4413      	add	r3, r2
    4820:	4a58      	ldr	r2, [pc, #352]	; (4984 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    4822:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    4824:	4b58      	ldr	r3, [pc, #352]	; (4988 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4826:	795b      	ldrb	r3, [r3, #5]
    4828:	00db      	lsls	r3, r3, #3
    482a:	4a58      	ldr	r2, [pc, #352]	; (498c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    482c:	4413      	add	r3, r2
    482e:	4a58      	ldr	r2, [pc, #352]	; (4990 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    4830:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    4832:	4b55      	ldr	r3, [pc, #340]	; (4988 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4834:	79db      	ldrb	r3, [r3, #7]
    4836:	00db      	lsls	r3, r3, #3
    4838:	4a54      	ldr	r2, [pc, #336]	; (498c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    483a:	4413      	add	r3, r2
    483c:	4a55      	ldr	r2, [pc, #340]	; (4994 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    483e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    4840:	4b55      	ldr	r3, [pc, #340]	; (4998 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4842:	799b      	ldrb	r3, [r3, #6]
    4844:	009b      	lsls	r3, r3, #2
    4846:	4a55      	ldr	r2, [pc, #340]	; (499c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4848:	4413      	add	r3, r2
    484a:	4a55      	ldr	r2, [pc, #340]	; (49a0 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    484c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    484e:	4b52      	ldr	r3, [pc, #328]	; (4998 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4850:	7a1b      	ldrb	r3, [r3, #8]
    4852:	009b      	lsls	r3, r3, #2
    4854:	4a51      	ldr	r2, [pc, #324]	; (499c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4856:	4413      	add	r3, r2
    4858:	4a52      	ldr	r2, [pc, #328]	; (49a4 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    485a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    485c:	4b4e      	ldr	r3, [pc, #312]	; (4998 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    485e:	7a5b      	ldrb	r3, [r3, #9]
    4860:	009b      	lsls	r3, r3, #2
    4862:	4a4e      	ldr	r2, [pc, #312]	; (499c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4864:	4413      	add	r3, r2
    4866:	4a50      	ldr	r2, [pc, #320]	; (49a8 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4868:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    486a:	4b4b      	ldr	r3, [pc, #300]	; (4998 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    486c:	7adb      	ldrb	r3, [r3, #11]
    486e:	009b      	lsls	r3, r3, #2
    4870:	4a4a      	ldr	r2, [pc, #296]	; (499c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4872:	4413      	add	r3, r2
    4874:	4a4d      	ldr	r2, [pc, #308]	; (49ac <Clock_Ip_ClockInitializeObjects+0x1e4>)
    4876:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    4878:	4b47      	ldr	r3, [pc, #284]	; (4998 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    487a:	7b1b      	ldrb	r3, [r3, #12]
    487c:	009b      	lsls	r3, r3, #2
    487e:	4a47      	ldr	r2, [pc, #284]	; (499c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4880:	4413      	add	r3, r2
    4882:	4a4b      	ldr	r2, [pc, #300]	; (49b0 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    4884:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    4886:	4b44      	ldr	r3, [pc, #272]	; (4998 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4888:	7b9b      	ldrb	r3, [r3, #14]
    488a:	009b      	lsls	r3, r3, #2
    488c:	4a43      	ldr	r2, [pc, #268]	; (499c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    488e:	4413      	add	r3, r2
    4890:	4a48      	ldr	r2, [pc, #288]	; (49b4 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    4892:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    4894:	4b48      	ldr	r3, [pc, #288]	; (49b8 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    4896:	781b      	ldrb	r3, [r3, #0]
    4898:	2b00      	cmp	r3, #0
    489a:	d002      	beq.n	48a2 <Clock_Ip_ClockInitializeObjects+0xda>
    489c:	9b01      	ldr	r3, [sp, #4]
    489e:	2b00      	cmp	r3, #0
    48a0:	d003      	beq.n	48aa <Clock_Ip_ClockInitializeObjects+0xe2>
    48a2:	4b46      	ldr	r3, [pc, #280]	; (49bc <Clock_Ip_ClockInitializeObjects+0x1f4>)
    48a4:	781b      	ldrb	r3, [r3, #0]
    48a6:	2b00      	cmp	r3, #0
    48a8:	d056      	beq.n	4958 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    48aa:	f7ff fc09 	bl	40c0 <getFircConfig>
    48ae:	4603      	mov	r3, r0
    48b0:	4a43      	ldr	r2, [pc, #268]	; (49c0 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    48b2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    48b4:	f7ff fc60 	bl	4178 <getSoscConfig>
    48b8:	4603      	mov	r3, r0
    48ba:	4a42      	ldr	r2, [pc, #264]	; (49c4 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    48bc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    48be:	f7ff fca7 	bl	4210 <getSpllConfig>
    48c2:	4603      	mov	r3, r0
    48c4:	4a40      	ldr	r2, [pc, #256]	; (49c8 <Clock_Ip_ClockInitializeObjects+0x200>)
    48c6:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    48c8:	2019      	movs	r0, #25
    48ca:	f7ff fcfb 	bl	42c4 <getSelectorConfig>
    48ce:	4603      	mov	r3, r0
    48d0:	4a3e      	ldr	r2, [pc, #248]	; (49cc <Clock_Ip_ClockInitializeObjects+0x204>)
    48d2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    48d4:	201a      	movs	r0, #26
    48d6:	f7ff fcf5 	bl	42c4 <getSelectorConfig>
    48da:	4603      	mov	r3, r0
    48dc:	4a3c      	ldr	r2, [pc, #240]	; (49d0 <Clock_Ip_ClockInitializeObjects+0x208>)
    48de:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    48e0:	201b      	movs	r0, #27
    48e2:	f7ff fcef 	bl	42c4 <getSelectorConfig>
    48e6:	4603      	mov	r3, r0
    48e8:	4a3a      	ldr	r2, [pc, #232]	; (49d4 <Clock_Ip_ClockInitializeObjects+0x20c>)
    48ea:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    48ec:	201d      	movs	r0, #29
    48ee:	f7ff fd7b 	bl	43e8 <getCoreDividerConfig>
    48f2:	4603      	mov	r3, r0
    48f4:	4a38      	ldr	r2, [pc, #224]	; (49d8 <Clock_Ip_ClockInitializeObjects+0x210>)
    48f6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    48f8:	201e      	movs	r0, #30
    48fa:	f7ff fd75 	bl	43e8 <getCoreDividerConfig>
    48fe:	4603      	mov	r3, r0
    4900:	4a36      	ldr	r2, [pc, #216]	; (49dc <Clock_Ip_ClockInitializeObjects+0x214>)
    4902:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    4904:	201f      	movs	r0, #31
    4906:	f7ff fd6f 	bl	43e8 <getCoreDividerConfig>
    490a:	4603      	mov	r3, r0
    490c:	4a34      	ldr	r2, [pc, #208]	; (49e0 <Clock_Ip_ClockInitializeObjects+0x218>)
    490e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    4910:	2021      	movs	r0, #33	; 0x21
    4912:	f7ff fe0f 	bl	4534 <getBusDividerConfig>
    4916:	4603      	mov	r3, r0
    4918:	4a32      	ldr	r2, [pc, #200]	; (49e4 <Clock_Ip_ClockInitializeObjects+0x21c>)
    491a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    491c:	2022      	movs	r0, #34	; 0x22
    491e:	f7ff fe09 	bl	4534 <getBusDividerConfig>
    4922:	4603      	mov	r3, r0
    4924:	4a30      	ldr	r2, [pc, #192]	; (49e8 <Clock_Ip_ClockInitializeObjects+0x220>)
    4926:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    4928:	2023      	movs	r0, #35	; 0x23
    492a:	f7ff fe03 	bl	4534 <getBusDividerConfig>
    492e:	4603      	mov	r3, r0
    4930:	4a2e      	ldr	r2, [pc, #184]	; (49ec <Clock_Ip_ClockInitializeObjects+0x224>)
    4932:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    4934:	2025      	movs	r0, #37	; 0x25
    4936:	f7ff fea3 	bl	4680 <getSlowDividerConfig>
    493a:	4603      	mov	r3, r0
    493c:	4a2c      	ldr	r2, [pc, #176]	; (49f0 <Clock_Ip_ClockInitializeObjects+0x228>)
    493e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    4940:	2026      	movs	r0, #38	; 0x26
    4942:	f7ff fe9d 	bl	4680 <getSlowDividerConfig>
    4946:	4603      	mov	r3, r0
    4948:	4a2a      	ldr	r2, [pc, #168]	; (49f4 <Clock_Ip_ClockInitializeObjects+0x22c>)
    494a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    494c:	2027      	movs	r0, #39	; 0x27
    494e:	f7ff fe97 	bl	4680 <getSlowDividerConfig>
    4952:	4603      	mov	r3, r0
    4954:	4a28      	ldr	r2, [pc, #160]	; (49f8 <Clock_Ip_ClockInitializeObjects+0x230>)
    4956:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    4958:	bf00      	nop
    495a:	b003      	add	sp, #12
    495c:	f85d fb04 	ldr.w	pc, [sp], #4
    4960:	1fff8d90 	.word	0x1fff8d90
    4964:	0000ba90 	.word	0x0000ba90
    4968:	0000c0dc 	.word	0x0000c0dc
    496c:	1fff8c5c 	.word	0x1fff8c5c
    4970:	0000ba50 	.word	0x0000ba50
    4974:	0000c024 	.word	0x0000c024
    4978:	1fff8c60 	.word	0x1fff8c60
    497c:	0000ba60 	.word	0x0000ba60
    4980:	0000c090 	.word	0x0000c090
    4984:	1fff8c64 	.word	0x1fff8c64
    4988:	0000baa0 	.word	0x0000baa0
    498c:	0000c108 	.word	0x0000c108
    4990:	1fff8c68 	.word	0x1fff8c68
    4994:	1fff8ca4 	.word	0x1fff8ca4
    4998:	0000ba30 	.word	0x0000ba30
    499c:	0000bfe0 	.word	0x0000bfe0
    49a0:	1fff8c6c 	.word	0x1fff8c6c
    49a4:	1fff8ca8 	.word	0x1fff8ca8
    49a8:	1fff8c70 	.word	0x1fff8c70
    49ac:	1fff8cac 	.word	0x1fff8cac
    49b0:	1fff8c74 	.word	0x1fff8c74
    49b4:	1fff8cb0 	.word	0x1fff8cb0
    49b8:	1fff8b19 	.word	0x1fff8b19
    49bc:	1fff8b10 	.word	0x1fff8b10
    49c0:	1fff8c78 	.word	0x1fff8c78
    49c4:	1fff8c7c 	.word	0x1fff8c7c
    49c8:	1fff8c80 	.word	0x1fff8c80
    49cc:	1fff8c84 	.word	0x1fff8c84
    49d0:	1fff8c88 	.word	0x1fff8c88
    49d4:	1fff8cb4 	.word	0x1fff8cb4
    49d8:	1fff8c8c 	.word	0x1fff8c8c
    49dc:	1fff8c90 	.word	0x1fff8c90
    49e0:	1fff8cb8 	.word	0x1fff8cb8
    49e4:	1fff8c94 	.word	0x1fff8c94
    49e8:	1fff8c98 	.word	0x1fff8c98
    49ec:	1fff8cbc 	.word	0x1fff8cbc
    49f0:	1fff8c9c 	.word	0x1fff8c9c
    49f4:	1fff8ca0 	.word	0x1fff8ca0
    49f8:	1fff8cc0 	.word	0x1fff8cc0

000049fc <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    49fc:	b500      	push	{lr}
    49fe:	b083      	sub	sp, #12
    4a00:	9001      	str	r0, [sp, #4]
    4a02:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    4a04:	9b01      	ldr	r3, [sp, #4]
    4a06:	2b03      	cmp	r3, #3
    4a08:	f000 8090 	beq.w	4b2c <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    4a0c:	9b01      	ldr	r3, [sp, #4]
    4a0e:	2b03      	cmp	r3, #3
    4a10:	f200 80d3 	bhi.w	4bba <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    4a14:	9b01      	ldr	r3, [sp, #4]
    4a16:	2b00      	cmp	r3, #0
    4a18:	d040      	beq.n	4a9c <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    4a1a:	9b01      	ldr	r3, [sp, #4]
    4a1c:	3b01      	subs	r3, #1
    4a1e:	2b01      	cmp	r3, #1
    4a20:	f200 80cb 	bhi.w	4bba <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    4a24:	9b00      	ldr	r3, [sp, #0]
    4a26:	2b00      	cmp	r3, #0
    4a28:	f040 80c9 	bne.w	4bbe <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    4a2c:	4b68      	ldr	r3, [pc, #416]	; (4bd0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4a2e:	2200      	movs	r2, #0
    4a30:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    4a32:	4b68      	ldr	r3, [pc, #416]	; (4bd4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4a34:	681b      	ldr	r3, [r3, #0]
    4a36:	685b      	ldr	r3, [r3, #4]
    4a38:	4a67      	ldr	r2, [pc, #412]	; (4bd8 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    4a3a:	6812      	ldr	r2, [r2, #0]
    4a3c:	4610      	mov	r0, r2
    4a3e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    4a40:	4b66      	ldr	r3, [pc, #408]	; (4bdc <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4a42:	681b      	ldr	r3, [r3, #0]
    4a44:	681b      	ldr	r3, [r3, #0]
    4a46:	4a66      	ldr	r2, [pc, #408]	; (4be0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    4a48:	6812      	ldr	r2, [r2, #0]
    4a4a:	4610      	mov	r0, r2
    4a4c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    4a4e:	4b65      	ldr	r3, [pc, #404]	; (4be4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4a50:	681b      	ldr	r3, [r3, #0]
    4a52:	681b      	ldr	r3, [r3, #0]
    4a54:	4a64      	ldr	r2, [pc, #400]	; (4be8 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    4a56:	6812      	ldr	r2, [r2, #0]
    4a58:	4610      	mov	r0, r2
    4a5a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    4a5c:	4b63      	ldr	r3, [pc, #396]	; (4bec <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4a5e:	681b      	ldr	r3, [r3, #0]
    4a60:	681b      	ldr	r3, [r3, #0]
    4a62:	4a63      	ldr	r2, [pc, #396]	; (4bf0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    4a64:	6812      	ldr	r2, [r2, #0]
    4a66:	4610      	mov	r0, r2
    4a68:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    4a6a:	4b62      	ldr	r3, [pc, #392]	; (4bf4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4a6c:	681b      	ldr	r3, [r3, #0]
    4a6e:	691b      	ldr	r3, [r3, #16]
    4a70:	4a61      	ldr	r2, [pc, #388]	; (4bf8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4a72:	6812      	ldr	r2, [r2, #0]
    4a74:	6812      	ldr	r2, [r2, #0]
    4a76:	4610      	mov	r0, r2
    4a78:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    4a7a:	4b60      	ldr	r3, [pc, #384]	; (4bfc <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a7c:	681b      	ldr	r3, [r3, #0]
    4a7e:	68db      	ldr	r3, [r3, #12]
    4a80:	4a5f      	ldr	r2, [pc, #380]	; (4c00 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4a82:	6812      	ldr	r2, [r2, #0]
    4a84:	6812      	ldr	r2, [r2, #0]
    4a86:	4610      	mov	r0, r2
    4a88:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    4a8a:	4b5e      	ldr	r3, [pc, #376]	; (4c04 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4a8c:	681b      	ldr	r3, [r3, #0]
    4a8e:	689b      	ldr	r3, [r3, #8]
    4a90:	4a5d      	ldr	r2, [pc, #372]	; (4c08 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4a92:	6812      	ldr	r2, [r2, #0]
    4a94:	6812      	ldr	r2, [r2, #0]
    4a96:	4610      	mov	r0, r2
    4a98:	4798      	blx	r3
            }
        }
        break;
    4a9a:	e090      	b.n	4bbe <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4a9c:	9b00      	ldr	r3, [sp, #0]
    4a9e:	2b02      	cmp	r3, #2
    4aa0:	f040 808f 	bne.w	4bc2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4aa4:	4b4a      	ldr	r3, [pc, #296]	; (4bd0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4aa6:	2201      	movs	r2, #1
    4aa8:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4aaa:	4b56      	ldr	r3, [pc, #344]	; (4c04 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4aac:	681b      	ldr	r3, [r3, #0]
    4aae:	685b      	ldr	r3, [r3, #4]
    4ab0:	4a55      	ldr	r2, [pc, #340]	; (4c08 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4ab2:	6812      	ldr	r2, [r2, #0]
    4ab4:	4610      	mov	r0, r2
    4ab6:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4ab8:	4b50      	ldr	r3, [pc, #320]	; (4bfc <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4aba:	681b      	ldr	r3, [r3, #0]
    4abc:	691b      	ldr	r3, [r3, #16]
    4abe:	4a50      	ldr	r2, [pc, #320]	; (4c00 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4ac0:	6812      	ldr	r2, [r2, #0]
    4ac2:	4610      	mov	r0, r2
    4ac4:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4ac6:	4b4d      	ldr	r3, [pc, #308]	; (4bfc <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4ac8:	681b      	ldr	r3, [r3, #0]
    4aca:	689b      	ldr	r3, [r3, #8]
    4acc:	4a4c      	ldr	r2, [pc, #304]	; (4c00 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4ace:	6812      	ldr	r2, [r2, #0]
    4ad0:	4610      	mov	r0, r2
    4ad2:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4ad4:	4b47      	ldr	r3, [pc, #284]	; (4bf4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4ad6:	681b      	ldr	r3, [r3, #0]
    4ad8:	68db      	ldr	r3, [r3, #12]
    4ada:	4a47      	ldr	r2, [pc, #284]	; (4bf8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4adc:	6812      	ldr	r2, [r2, #0]
    4ade:	4610      	mov	r0, r2
    4ae0:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4ae2:	4b44      	ldr	r3, [pc, #272]	; (4bf4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4ae4:	681b      	ldr	r3, [r3, #0]
    4ae6:	689b      	ldr	r3, [r3, #8]
    4ae8:	4a43      	ldr	r2, [pc, #268]	; (4bf8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4aea:	6812      	ldr	r2, [r2, #0]
    4aec:	6812      	ldr	r2, [r2, #0]
    4aee:	4610      	mov	r0, r2
    4af0:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    4af2:	4b38      	ldr	r3, [pc, #224]	; (4bd4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4af4:	681b      	ldr	r3, [r3, #0]
    4af6:	685b      	ldr	r3, [r3, #4]
    4af8:	4a44      	ldr	r2, [pc, #272]	; (4c0c <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    4afa:	6812      	ldr	r2, [r2, #0]
    4afc:	4610      	mov	r0, r2
    4afe:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    4b00:	4b36      	ldr	r3, [pc, #216]	; (4bdc <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4b02:	681b      	ldr	r3, [r3, #0]
    4b04:	681b      	ldr	r3, [r3, #0]
    4b06:	4a42      	ldr	r2, [pc, #264]	; (4c10 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    4b08:	6812      	ldr	r2, [r2, #0]
    4b0a:	4610      	mov	r0, r2
    4b0c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    4b0e:	4b35      	ldr	r3, [pc, #212]	; (4be4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4b10:	681b      	ldr	r3, [r3, #0]
    4b12:	681b      	ldr	r3, [r3, #0]
    4b14:	4a3f      	ldr	r2, [pc, #252]	; (4c14 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    4b16:	6812      	ldr	r2, [r2, #0]
    4b18:	4610      	mov	r0, r2
    4b1a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    4b1c:	4b33      	ldr	r3, [pc, #204]	; (4bec <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4b1e:	681b      	ldr	r3, [r3, #0]
    4b20:	681b      	ldr	r3, [r3, #0]
    4b22:	4a3d      	ldr	r2, [pc, #244]	; (4c18 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    4b24:	6812      	ldr	r2, [r2, #0]
    4b26:	4610      	mov	r0, r2
    4b28:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4b2a:	e04a      	b.n	4bc2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4b2c:	9b00      	ldr	r3, [sp, #0]
    4b2e:	2b02      	cmp	r3, #2
    4b30:	d149      	bne.n	4bc6 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4b32:	4b27      	ldr	r3, [pc, #156]	; (4bd0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4b34:	2201      	movs	r2, #1
    4b36:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4b38:	4b32      	ldr	r3, [pc, #200]	; (4c04 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4b3a:	681b      	ldr	r3, [r3, #0]
    4b3c:	685b      	ldr	r3, [r3, #4]
    4b3e:	4a32      	ldr	r2, [pc, #200]	; (4c08 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4b40:	6812      	ldr	r2, [r2, #0]
    4b42:	4610      	mov	r0, r2
    4b44:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4b46:	4b2d      	ldr	r3, [pc, #180]	; (4bfc <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4b48:	681b      	ldr	r3, [r3, #0]
    4b4a:	691b      	ldr	r3, [r3, #16]
    4b4c:	4a2c      	ldr	r2, [pc, #176]	; (4c00 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4b4e:	6812      	ldr	r2, [r2, #0]
    4b50:	4610      	mov	r0, r2
    4b52:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4b54:	4b29      	ldr	r3, [pc, #164]	; (4bfc <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4b56:	681b      	ldr	r3, [r3, #0]
    4b58:	689b      	ldr	r3, [r3, #8]
    4b5a:	4a29      	ldr	r2, [pc, #164]	; (4c00 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4b5c:	6812      	ldr	r2, [r2, #0]
    4b5e:	4610      	mov	r0, r2
    4b60:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4b62:	4b24      	ldr	r3, [pc, #144]	; (4bf4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4b64:	681b      	ldr	r3, [r3, #0]
    4b66:	68db      	ldr	r3, [r3, #12]
    4b68:	4a23      	ldr	r2, [pc, #140]	; (4bf8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4b6a:	6812      	ldr	r2, [r2, #0]
    4b6c:	4610      	mov	r0, r2
    4b6e:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4b70:	4b20      	ldr	r3, [pc, #128]	; (4bf4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4b72:	681b      	ldr	r3, [r3, #0]
    4b74:	689b      	ldr	r3, [r3, #8]
    4b76:	4a20      	ldr	r2, [pc, #128]	; (4bf8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4b78:	6812      	ldr	r2, [r2, #0]
    4b7a:	6812      	ldr	r2, [r2, #0]
    4b7c:	4610      	mov	r0, r2
    4b7e:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    4b80:	4b26      	ldr	r3, [pc, #152]	; (4c1c <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    4b82:	681b      	ldr	r3, [r3, #0]
    4b84:	685b      	ldr	r3, [r3, #4]
    4b86:	4a26      	ldr	r2, [pc, #152]	; (4c20 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4b88:	6812      	ldr	r2, [r2, #0]
    4b8a:	4610      	mov	r0, r2
    4b8c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    4b8e:	4b25      	ldr	r3, [pc, #148]	; (4c24 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    4b90:	681b      	ldr	r3, [r3, #0]
    4b92:	681b      	ldr	r3, [r3, #0]
    4b94:	4a24      	ldr	r2, [pc, #144]	; (4c28 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    4b96:	6812      	ldr	r2, [r2, #0]
    4b98:	4610      	mov	r0, r2
    4b9a:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    4b9c:	4b23      	ldr	r3, [pc, #140]	; (4c2c <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    4b9e:	681b      	ldr	r3, [r3, #0]
    4ba0:	681b      	ldr	r3, [r3, #0]
    4ba2:	4a23      	ldr	r2, [pc, #140]	; (4c30 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    4ba4:	6812      	ldr	r2, [r2, #0]
    4ba6:	4610      	mov	r0, r2
    4ba8:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    4baa:	4b22      	ldr	r3, [pc, #136]	; (4c34 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    4bac:	681b      	ldr	r3, [r3, #0]
    4bae:	681b      	ldr	r3, [r3, #0]
    4bb0:	4a21      	ldr	r2, [pc, #132]	; (4c38 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    4bb2:	6812      	ldr	r2, [r2, #0]
    4bb4:	4610      	mov	r0, r2
    4bb6:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4bb8:	e005      	b.n	4bc6 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    4bba:	bf00      	nop
    4bbc:	e004      	b.n	4bc8 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4bbe:	bf00      	nop
    4bc0:	e002      	b.n	4bc8 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4bc2:	bf00      	nop
    4bc4:	e000      	b.n	4bc8 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4bc6:	bf00      	nop
    }

}
    4bc8:	bf00      	nop
    4bca:	b003      	add	sp, #12
    4bcc:	f85d fb04 	ldr.w	pc, [sp], #4
    4bd0:	1fff8b19 	.word	0x1fff8b19
    4bd4:	1fff8c68 	.word	0x1fff8c68
    4bd8:	1fff8c88 	.word	0x1fff8c88
    4bdc:	1fff8c6c 	.word	0x1fff8c6c
    4be0:	1fff8c90 	.word	0x1fff8c90
    4be4:	1fff8c70 	.word	0x1fff8c70
    4be8:	1fff8c98 	.word	0x1fff8c98
    4bec:	1fff8c74 	.word	0x1fff8c74
    4bf0:	1fff8ca0 	.word	0x1fff8ca0
    4bf4:	1fff8c5c 	.word	0x1fff8c5c
    4bf8:	1fff8c80 	.word	0x1fff8c80
    4bfc:	1fff8c60 	.word	0x1fff8c60
    4c00:	1fff8c7c 	.word	0x1fff8c7c
    4c04:	1fff8c64 	.word	0x1fff8c64
    4c08:	1fff8c78 	.word	0x1fff8c78
    4c0c:	1fff8c84 	.word	0x1fff8c84
    4c10:	1fff8c8c 	.word	0x1fff8c8c
    4c14:	1fff8c94 	.word	0x1fff8c94
    4c18:	1fff8c9c 	.word	0x1fff8c9c
    4c1c:	1fff8ca4 	.word	0x1fff8ca4
    4c20:	1fff8cb4 	.word	0x1fff8cb4
    4c24:	1fff8ca8 	.word	0x1fff8ca8
    4c28:	1fff8cb8 	.word	0x1fff8cb8
    4c2c:	1fff8cac 	.word	0x1fff8cac
    4c30:	1fff8cbc 	.word	0x1fff8cbc
    4c34:	1fff8cb0 	.word	0x1fff8cb0
    4c38:	1fff8cc0 	.word	0x1fff8cc0

00004c3c <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    4c3c:	b500      	push	{lr}
    4c3e:	b083      	sub	sp, #12
    4c40:	9001      	str	r0, [sp, #4]
    4c42:	9100      	str	r1, [sp, #0]
    switch(Command)
    4c44:	9b00      	ldr	r3, [sp, #0]
    4c46:	2b04      	cmp	r3, #4
    4c48:	d010      	beq.n	4c6c <Clock_Ip_Command+0x30>
    4c4a:	9b00      	ldr	r3, [sp, #0]
    4c4c:	2b04      	cmp	r3, #4
    4c4e:	d811      	bhi.n	4c74 <Clock_Ip_Command+0x38>
    4c50:	9b00      	ldr	r3, [sp, #0]
    4c52:	2b01      	cmp	r3, #1
    4c54:	d006      	beq.n	4c64 <Clock_Ip_Command+0x28>
    4c56:	9b00      	ldr	r3, [sp, #0]
    4c58:	2b02      	cmp	r3, #2
    4c5a:	d10b      	bne.n	4c74 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    4c5c:	9801      	ldr	r0, [sp, #4]
    4c5e:	f7ff fdb3 	bl	47c8 <Clock_Ip_ClockInitializeObjects>
            break;
    4c62:	e008      	b.n	4c76 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    4c64:	9801      	ldr	r0, [sp, #4]
    4c66:	f7ff f9db 	bl	4020 <Clock_Ip_SpecificPlatformInitClock>
            break;
    4c6a:	e004      	b.n	4c76 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    4c6c:	9801      	ldr	r0, [sp, #4]
    4c6e:	f7ff f8ed 	bl	3e4c <DisableSafeClock>
            break;
    4c72:	e000      	b.n	4c76 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    4c74:	bf00      	nop
    }
}
    4c76:	bf00      	nop
    4c78:	b003      	add	sp, #12
    4c7a:	f85d fb04 	ldr.w	pc, [sp], #4
    4c7e:	bf00      	nop

00004c80 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    4c80:	b500      	push	{lr}
    4c82:	b085      	sub	sp, #20
    4c84:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    4c86:	4a20      	ldr	r2, [pc, #128]	; (4d08 <Mcu_Init+0x88>)
    4c88:	9b01      	ldr	r3, [sp, #4]
    4c8a:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4c8c:	2300      	movs	r3, #0
    4c8e:	9303      	str	r3, [sp, #12]
    4c90:	e010      	b.n	4cb4 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    4c92:	4b1d      	ldr	r3, [pc, #116]	; (4d08 <Mcu_Init+0x88>)
    4c94:	681b      	ldr	r3, [r3, #0]
    4c96:	6919      	ldr	r1, [r3, #16]
    4c98:	9a03      	ldr	r2, [sp, #12]
    4c9a:	4613      	mov	r3, r2
    4c9c:	005b      	lsls	r3, r3, #1
    4c9e:	4413      	add	r3, r2
    4ca0:	009b      	lsls	r3, r3, #2
    4ca2:	440b      	add	r3, r1
    4ca4:	681b      	ldr	r3, [r3, #0]
    4ca6:	9a03      	ldr	r2, [sp, #12]
    4ca8:	b2d1      	uxtb	r1, r2
    4caa:	4a18      	ldr	r2, [pc, #96]	; (4d0c <Mcu_Init+0x8c>)
    4cac:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4cae:	9b03      	ldr	r3, [sp, #12]
    4cb0:	3301      	adds	r3, #1
    4cb2:	9303      	str	r3, [sp, #12]
    4cb4:	4b14      	ldr	r3, [pc, #80]	; (4d08 <Mcu_Init+0x88>)
    4cb6:	681b      	ldr	r3, [r3, #0]
    4cb8:	689b      	ldr	r3, [r3, #8]
    4cba:	9a03      	ldr	r2, [sp, #12]
    4cbc:	429a      	cmp	r2, r3
    4cbe:	d3e8      	bcc.n	4c92 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4cc0:	2300      	movs	r3, #0
    4cc2:	9303      	str	r3, [sp, #12]
    4cc4:	e010      	b.n	4ce8 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    4cc6:	4b10      	ldr	r3, [pc, #64]	; (4d08 <Mcu_Init+0x88>)
    4cc8:	681b      	ldr	r3, [r3, #0]
    4cca:	6959      	ldr	r1, [r3, #20]
    4ccc:	9a03      	ldr	r2, [sp, #12]
    4cce:	4613      	mov	r3, r2
    4cd0:	01db      	lsls	r3, r3, #7
    4cd2:	1a9b      	subs	r3, r3, r2
    4cd4:	00db      	lsls	r3, r3, #3
    4cd6:	440b      	add	r3, r1
    4cd8:	681b      	ldr	r3, [r3, #0]
    4cda:	9a03      	ldr	r2, [sp, #12]
    4cdc:	b2d1      	uxtb	r1, r2
    4cde:	4a0c      	ldr	r2, [pc, #48]	; (4d10 <Mcu_Init+0x90>)
    4ce0:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4ce2:	9b03      	ldr	r3, [sp, #12]
    4ce4:	3301      	adds	r3, #1
    4ce6:	9303      	str	r3, [sp, #12]
    4ce8:	4b07      	ldr	r3, [pc, #28]	; (4d08 <Mcu_Init+0x88>)
    4cea:	681b      	ldr	r3, [r3, #0]
    4cec:	68db      	ldr	r3, [r3, #12]
    4cee:	9a03      	ldr	r2, [sp, #12]
    4cf0:	429a      	cmp	r2, r3
    4cf2:	d3e8      	bcc.n	4cc6 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    4cf4:	4b04      	ldr	r3, [pc, #16]	; (4d08 <Mcu_Init+0x88>)
    4cf6:	681b      	ldr	r3, [r3, #0]
    4cf8:	699b      	ldr	r3, [r3, #24]
    4cfa:	4618      	mov	r0, r3
    4cfc:	f000 f88a 	bl	4e14 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4d00:	bf00      	nop
    4d02:	b005      	add	sp, #20
    4d04:	f85d fb04 	ldr.w	pc, [sp], #4
    4d08:	1fff8d9c 	.word	0x1fff8d9c
    4d0c:	1fff8d98 	.word	0x1fff8d98
    4d10:	1fff8d94 	.word	0x1fff8d94

00004d14 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    4d14:	b084      	sub	sp, #16
    4d16:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    4d18:	2301      	movs	r3, #1
    4d1a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    4d1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    4d22:	4618      	mov	r0, r3
    4d24:	b004      	add	sp, #16
    4d26:	4770      	bx	lr

00004d28 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    4d28:	b500      	push	{lr}
    4d2a:	b085      	sub	sp, #20
    4d2c:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    4d2e:	4a0e      	ldr	r2, [pc, #56]	; (4d68 <Mcu_InitClock+0x40>)
    4d30:	9b01      	ldr	r3, [sp, #4]
    4d32:	4413      	add	r3, r2
    4d34:	781b      	ldrb	r3, [r3, #0]
    4d36:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    4d3a:	4b0c      	ldr	r3, [pc, #48]	; (4d6c <Mcu_InitClock+0x44>)
    4d3c:	681b      	ldr	r3, [r3, #0]
    4d3e:	6959      	ldr	r1, [r3, #20]
    4d40:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4d44:	4613      	mov	r3, r2
    4d46:	01db      	lsls	r3, r3, #7
    4d48:	1a9b      	subs	r3, r3, r2
    4d4a:	00db      	lsls	r3, r3, #3
    4d4c:	440b      	add	r3, r1
    4d4e:	4618      	mov	r0, r3
    4d50:	f000 f86a 	bl	4e28 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    4d54:	2300      	movs	r3, #0
    4d56:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    4d5a:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    4d5e:	4618      	mov	r0, r3
    4d60:	b005      	add	sp, #20
    4d62:	f85d fb04 	ldr.w	pc, [sp], #4
    4d66:	bf00      	nop
    4d68:	1fff8d94 	.word	0x1fff8d94
    4d6c:	1fff8d9c 	.word	0x1fff8d9c

00004d70 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    4d70:	b500      	push	{lr}
    4d72:	b085      	sub	sp, #20
    4d74:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    4d76:	4a0d      	ldr	r2, [pc, #52]	; (4dac <Mcu_SetMode+0x3c>)
    4d78:	9b01      	ldr	r3, [sp, #4]
    4d7a:	4413      	add	r3, r2
    4d7c:	781b      	ldrb	r3, [r3, #0]
    4d7e:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    4d82:	f005 fbb5 	bl	a4f0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    4d86:	4b0a      	ldr	r3, [pc, #40]	; (4db0 <Mcu_SetMode+0x40>)
    4d88:	681b      	ldr	r3, [r3, #0]
    4d8a:	6919      	ldr	r1, [r3, #16]
    4d8c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4d90:	4613      	mov	r3, r2
    4d92:	005b      	lsls	r3, r3, #1
    4d94:	4413      	add	r3, r2
    4d96:	009b      	lsls	r3, r3, #2
    4d98:	440b      	add	r3, r1
    4d9a:	4618      	mov	r0, r3
    4d9c:	f000 f84e 	bl	4e3c <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    4da0:	f005 fbd2 	bl	a548 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4da4:	bf00      	nop
    4da6:	b005      	add	sp, #20
    4da8:	f85d fb04 	ldr.w	pc, [sp], #4
    4dac:	1fff8d98 	.word	0x1fff8d98
    4db0:	1fff8d9c 	.word	0x1fff8d9c

00004db4 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    4db4:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    4db6:	2302      	movs	r3, #2
    4db8:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    4dba:	9b01      	ldr	r3, [sp, #4]
}
    4dbc:	4618      	mov	r0, r3
    4dbe:	b002      	add	sp, #8
    4dc0:	4770      	bx	lr

00004dc2 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    4dc2:	b500      	push	{lr}
    4dc4:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    4dc6:	f000 f843 	bl	4e50 <Mcu_Ipw_GetResetReason>
    4dca:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    4dcc:	9b01      	ldr	r3, [sp, #4]
}
    4dce:	4618      	mov	r0, r3
    4dd0:	b003      	add	sp, #12
    4dd2:	f85d fb04 	ldr.w	pc, [sp], #4

00004dd6 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    4dd6:	b500      	push	{lr}
    4dd8:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    4dda:	f000 f83f 	bl	4e5c <Mcu_Ipw_GetResetRawValue>
    4dde:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    4de0:	9b01      	ldr	r3, [sp, #4]
}
    4de2:	4618      	mov	r0, r3
    4de4:	b003      	add	sp, #12
    4de6:	f85d fb04 	ldr.w	pc, [sp], #4

00004dea <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4dea:	b500      	push	{lr}
    4dec:	b083      	sub	sp, #12
    4dee:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    4df0:	9801      	ldr	r0, [sp, #4]
    4df2:	f000 f839 	bl	4e68 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    4df6:	bf00      	nop
    4df8:	b003      	add	sp, #12
    4dfa:	f85d fb04 	ldr.w	pc, [sp], #4

00004dfe <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    4dfe:	b082      	sub	sp, #8
    4e00:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    4e02:	4b03      	ldr	r3, [pc, #12]	; (4e10 <Mcu_ClkSrcFailureNotification+0x12>)
    4e04:	681b      	ldr	r3, [r3, #0]
    4e06:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    4e08:	bf00      	nop
    4e0a:	b002      	add	sp, #8
    4e0c:	4770      	bx	lr
    4e0e:	bf00      	nop
    4e10:	1fff8d9c 	.word	0x1fff8d9c

00004e14 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    4e14:	b500      	push	{lr}
    4e16:	b083      	sub	sp, #12
    4e18:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    4e1a:	9801      	ldr	r0, [sp, #4]
    4e1c:	f000 f882 	bl	4f24 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    4e20:	bf00      	nop
    4e22:	b003      	add	sp, #12
    4e24:	f85d fb04 	ldr.w	pc, [sp], #4

00004e28 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    4e28:	b500      	push	{lr}
    4e2a:	b083      	sub	sp, #12
    4e2c:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    4e2e:	9801      	ldr	r0, [sp, #4]
    4e30:	f7fc fc6a 	bl	1708 <Clock_Ip_InitClock>
}
    4e34:	bf00      	nop
    4e36:	b003      	add	sp, #12
    4e38:	f85d fb04 	ldr.w	pc, [sp], #4

00004e3c <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    4e3c:	b500      	push	{lr}
    4e3e:	b083      	sub	sp, #12
    4e40:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    4e42:	9801      	ldr	r0, [sp, #4]
    4e44:	f000 f820 	bl	4e88 <Power_Ip_SetMode>
}
    4e48:	bf00      	nop
    4e4a:	b003      	add	sp, #12
    4e4c:	f85d fb04 	ldr.w	pc, [sp], #4

00004e50 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    4e50:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    4e52:	f000 f84f 	bl	4ef4 <Power_Ip_GetResetReason>
    4e56:	4603      	mov	r3, r0
}
    4e58:	4618      	mov	r0, r3
    4e5a:	bd08      	pop	{r3, pc}

00004e5c <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    4e5c:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    4e5e:	f000 f857 	bl	4f10 <Power_Ip_GetResetRawValue>
    4e62:	4603      	mov	r3, r0
}
    4e64:	4618      	mov	r0, r3
    4e66:	bd08      	pop	{r3, pc}

00004e68 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4e68:	b500      	push	{lr}
    4e6a:	b083      	sub	sp, #12
    4e6c:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    4e6e:	9b01      	ldr	r3, [sp, #4]
    4e70:	2b00      	cmp	r3, #0
    4e72:	d102      	bne.n	4e7a <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    4e74:	f000 f86c 	bl	4f50 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    4e78:	e001      	b.n	4e7e <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    4e7a:	f000 f86e 	bl	4f5a <Power_Ip_EnableSleepOnExit>
}
    4e7e:	bf00      	nop
    4e80:	b003      	add	sp, #12
    4e82:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00004e88 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4e88:	b500      	push	{lr}
    4e8a:	b085      	sub	sp, #20
    4e8c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    4e8e:	9b01      	ldr	r3, [sp, #4]
    4e90:	685b      	ldr	r3, [r3, #4]
    4e92:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    4e94:	9802      	ldr	r0, [sp, #8]
    4e96:	f000 f9f5 	bl	5284 <Power_Ip_SMC_ModeCheckEntry>
    4e9a:	4603      	mov	r3, r0
    4e9c:	2b00      	cmp	r3, #0
    4e9e:	d002      	beq.n	4ea6 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4ea0:	2301      	movs	r3, #1
    4ea2:	9303      	str	r3, [sp, #12]
    4ea4:	e003      	b.n	4eae <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    4ea6:	9801      	ldr	r0, [sp, #4]
    4ea8:	f000 fa1e 	bl	52e8 <Power_Ip_SMC_ModeConfig>
    4eac:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    4eae:	9b03      	ldr	r3, [sp, #12]
    4eb0:	2b01      	cmp	r3, #1
    4eb2:	d103      	bne.n	4ebc <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4eb4:	21ff      	movs	r1, #255	; 0xff
    4eb6:	2003      	movs	r0, #3
    4eb8:	f000 f8f4 	bl	50a4 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    4ebc:	bf00      	nop
    4ebe:	b005      	add	sp, #20
    4ec0:	f85d fb04 	ldr.w	pc, [sp], #4

00004ec4 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    4ec4:	b084      	sub	sp, #16
    4ec6:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    4ec8:	230c      	movs	r3, #12
    4eca:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    4ecc:	4a08      	ldr	r2, [pc, #32]	; (4ef0 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4ece:	9b01      	ldr	r3, [sp, #4]
    4ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4ed4:	2b0e      	cmp	r3, #14
    4ed6:	d805      	bhi.n	4ee4 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    4ed8:	4a05      	ldr	r2, [pc, #20]	; (4ef0 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4eda:	9b01      	ldr	r3, [sp, #4]
    4edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4ee0:	9303      	str	r3, [sp, #12]
    4ee2:	e001      	b.n	4ee8 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    4ee4:	230c      	movs	r3, #12
    4ee6:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    4ee8:	9b03      	ldr	r3, [sp, #12]
}
    4eea:	4618      	mov	r0, r3
    4eec:	b004      	add	sp, #16
    4eee:	4770      	bx	lr
    4ef0:	0000c17c 	.word	0x0000c17c

00004ef4 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    4ef4:	b500      	push	{lr}
    4ef6:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    4ef8:	f000 f940 	bl	517c <Power_Ip_RCM_GetResetReason>
    4efc:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    4efe:	9801      	ldr	r0, [sp, #4]
    4f00:	f7ff ffe0 	bl	4ec4 <Power_Ip_ConvertIntergeToResetType>
    4f04:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    4f06:	9b00      	ldr	r3, [sp, #0]
}
    4f08:	4618      	mov	r0, r3
    4f0a:	b003      	add	sp, #12
    4f0c:	f85d fb04 	ldr.w	pc, [sp], #4

00004f10 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    4f10:	b500      	push	{lr}
    4f12:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    4f14:	f000 f98a 	bl	522c <Power_Ip_RCM_GetResetRawValue>
    4f18:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    4f1a:	9b01      	ldr	r3, [sp, #4]
}
    4f1c:	4618      	mov	r0, r3
    4f1e:	b003      	add	sp, #12
    4f20:	f85d fb04 	ldr.w	pc, [sp], #4

00004f24 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    4f24:	b500      	push	{lr}
    4f26:	b083      	sub	sp, #12
    4f28:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    4f2a:	9b01      	ldr	r3, [sp, #4]
    4f2c:	681b      	ldr	r3, [r3, #0]
    4f2e:	4618      	mov	r0, r3
    4f30:	f000 f90e 	bl	5150 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    4f34:	9b01      	ldr	r3, [sp, #4]
    4f36:	685b      	ldr	r3, [r3, #4]
    4f38:	4618      	mov	r0, r3
    4f3a:	f000 f86d 	bl	5018 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    4f3e:	9b01      	ldr	r3, [sp, #4]
    4f40:	689b      	ldr	r3, [r3, #8]
    4f42:	4618      	mov	r0, r3
    4f44:	f000 f990 	bl	5268 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    4f48:	bf00      	nop
    4f4a:	b003      	add	sp, #12
    4f4c:	f85d fb04 	ldr.w	pc, [sp], #4

00004f50 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    4f50:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    4f52:	f000 f811 	bl	4f78 <Power_Ip_CM4_DisableSleepOnExit>
}
    4f56:	bf00      	nop
    4f58:	bd08      	pop	{r3, pc}

00004f5a <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    4f5a:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    4f5c:	f000 f820 	bl	4fa0 <Power_Ip_CM4_EnableSleepOnExit>
}
    4f60:	bf00      	nop
    4f62:	bd08      	pop	{r3, pc}

00004f64 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    4f64:	b082      	sub	sp, #8
    4f66:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    4f68:	4a02      	ldr	r2, [pc, #8]	; (4f74 <Power_Ip_InstallNotificationsCallback+0x10>)
    4f6a:	9b01      	ldr	r3, [sp, #4]
    4f6c:	6013      	str	r3, [r2, #0]
}
    4f6e:	bf00      	nop
    4f70:	b002      	add	sp, #8
    4f72:	4770      	bx	lr
    4f74:	1fff8b1c 	.word	0x1fff8b1c

00004f78 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    4f78:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f7a:	2300      	movs	r3, #0
    4f7c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f7e:	4b07      	ldr	r3, [pc, #28]	; (4f9c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4f80:	681b      	ldr	r3, [r3, #0]
    4f82:	685b      	ldr	r3, [r3, #4]
    4f84:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    4f86:	9b01      	ldr	r3, [sp, #4]
    4f88:	f023 0302 	bic.w	r3, r3, #2
    4f8c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f8e:	4b03      	ldr	r3, [pc, #12]	; (4f9c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4f90:	681b      	ldr	r3, [r3, #0]
    4f92:	9a01      	ldr	r2, [sp, #4]
    4f94:	605a      	str	r2, [r3, #4]
}
    4f96:	bf00      	nop
    4f98:	b002      	add	sp, #8
    4f9a:	4770      	bx	lr
    4f9c:	1fff8b20 	.word	0x1fff8b20

00004fa0 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    4fa0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4fa2:	2300      	movs	r3, #0
    4fa4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4fa6:	4b07      	ldr	r3, [pc, #28]	; (4fc4 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4fa8:	681b      	ldr	r3, [r3, #0]
    4faa:	685b      	ldr	r3, [r3, #4]
    4fac:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    4fae:	9b01      	ldr	r3, [sp, #4]
    4fb0:	f043 0302 	orr.w	r3, r3, #2
    4fb4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4fb6:	4b03      	ldr	r3, [pc, #12]	; (4fc4 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4fb8:	681b      	ldr	r3, [r3, #0]
    4fba:	9a01      	ldr	r2, [sp, #4]
    4fbc:	605a      	str	r2, [r3, #4]
}
    4fbe:	bf00      	nop
    4fc0:	b002      	add	sp, #8
    4fc2:	4770      	bx	lr
    4fc4:	1fff8b20 	.word	0x1fff8b20

00004fc8 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    4fc8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4fca:	2300      	movs	r3, #0
    4fcc:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4fce:	4b07      	ldr	r3, [pc, #28]	; (4fec <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4fd0:	681b      	ldr	r3, [r3, #0]
    4fd2:	685b      	ldr	r3, [r3, #4]
    4fd4:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    4fd6:	9b01      	ldr	r3, [sp, #4]
    4fd8:	f043 0304 	orr.w	r3, r3, #4
    4fdc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4fde:	4b03      	ldr	r3, [pc, #12]	; (4fec <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4fe0:	681b      	ldr	r3, [r3, #0]
    4fe2:	9a01      	ldr	r2, [sp, #4]
    4fe4:	605a      	str	r2, [r3, #4]
}
    4fe6:	bf00      	nop
    4fe8:	b002      	add	sp, #8
    4fea:	4770      	bx	lr
    4fec:	1fff8b20 	.word	0x1fff8b20

00004ff0 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    4ff0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4ff2:	2300      	movs	r3, #0
    4ff4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4ff6:	4b07      	ldr	r3, [pc, #28]	; (5014 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4ff8:	681b      	ldr	r3, [r3, #0]
    4ffa:	685b      	ldr	r3, [r3, #4]
    4ffc:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    4ffe:	9b01      	ldr	r3, [sp, #4]
    5000:	f023 0304 	bic.w	r3, r3, #4
    5004:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5006:	4b03      	ldr	r3, [pc, #12]	; (5014 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5008:	681b      	ldr	r3, [r3, #0]
    500a:	9a01      	ldr	r2, [sp, #4]
    500c:	605a      	str	r2, [r3, #4]
}
    500e:	bf00      	nop
    5010:	b002      	add	sp, #8
    5012:	4770      	bx	lr
    5014:	1fff8b20 	.word	0x1fff8b20

00005018 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5018:	b084      	sub	sp, #16
    501a:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    501c:	4b20      	ldr	r3, [pc, #128]	; (50a0 <Power_Ip_PMC_PowerInit+0x88>)
    501e:	781b      	ldrb	r3, [r3, #0]
    5020:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5024:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5028:	f003 030f 	and.w	r3, r3, #15
    502c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5030:	9b01      	ldr	r3, [sp, #4]
    5032:	781a      	ldrb	r2, [r3, #0]
    5034:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5038:	4313      	orrs	r3, r2
    503a:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    503e:	4a18      	ldr	r2, [pc, #96]	; (50a0 <Power_Ip_PMC_PowerInit+0x88>)
    5040:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5044:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5046:	4b16      	ldr	r3, [pc, #88]	; (50a0 <Power_Ip_PMC_PowerInit+0x88>)
    5048:	785b      	ldrb	r3, [r3, #1]
    504a:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    504e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5052:	f003 031f 	and.w	r3, r3, #31
    5056:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    505a:	9b01      	ldr	r3, [sp, #4]
    505c:	785a      	ldrb	r2, [r3, #1]
    505e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5062:	4313      	orrs	r3, r2
    5064:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5068:	4a0d      	ldr	r2, [pc, #52]	; (50a0 <Power_Ip_PMC_PowerInit+0x88>)
    506a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    506e:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5070:	4b0b      	ldr	r3, [pc, #44]	; (50a0 <Power_Ip_PMC_PowerInit+0x88>)
    5072:	789b      	ldrb	r3, [r3, #2]
    5074:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5078:	f89d 300f 	ldrb.w	r3, [sp, #15]
    507c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5080:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5084:	9b01      	ldr	r3, [sp, #4]
    5086:	789a      	ldrb	r2, [r3, #2]
    5088:	f89d 300f 	ldrb.w	r3, [sp, #15]
    508c:	4313      	orrs	r3, r2
    508e:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5092:	4a03      	ldr	r2, [pc, #12]	; (50a0 <Power_Ip_PMC_PowerInit+0x88>)
    5094:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5098:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    509a:	bf00      	nop
    509c:	b004      	add	sp, #16
    509e:	4770      	bx	lr
    50a0:	4007d000 	.word	0x4007d000

000050a4 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    50a4:	b500      	push	{lr}
    50a6:	b083      	sub	sp, #12
    50a8:	9001      	str	r0, [sp, #4]
    50aa:	460b      	mov	r3, r1
    50ac:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    50b0:	4b05      	ldr	r3, [pc, #20]	; (50c8 <Power_Ip_ReportPowerErrors+0x24>)
    50b2:	681b      	ldr	r3, [r3, #0]
    50b4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    50b8:	4611      	mov	r1, r2
    50ba:	9801      	ldr	r0, [sp, #4]
    50bc:	4798      	blx	r3
}
    50be:	bf00      	nop
    50c0:	b003      	add	sp, #12
    50c2:	f85d fb04 	ldr.w	pc, [sp], #4
    50c6:	bf00      	nop
    50c8:	1fff8b1c 	.word	0x1fff8b1c

000050cc <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    50cc:	b082      	sub	sp, #8
    50ce:	9001      	str	r0, [sp, #4]
    50d0:	460b      	mov	r3, r1
    50d2:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    50d6:	bf00      	nop
    50d8:	b002      	add	sp, #8
    50da:	4770      	bx	lr

000050dc <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    50dc:	b500      	push	{lr}
    50de:	b085      	sub	sp, #20
    50e0:	9003      	str	r0, [sp, #12]
    50e2:	9102      	str	r1, [sp, #8]
    50e4:	9201      	str	r2, [sp, #4]
    50e6:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    50e8:	2000      	movs	r0, #0
    50ea:	f7fc f83d 	bl	1168 <OsIf_GetCounter>
    50ee:	4602      	mov	r2, r0
    50f0:	9b03      	ldr	r3, [sp, #12]
    50f2:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    50f4:	9b02      	ldr	r3, [sp, #8]
    50f6:	2200      	movs	r2, #0
    50f8:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    50fa:	2100      	movs	r1, #0
    50fc:	9800      	ldr	r0, [sp, #0]
    50fe:	f7fc f87f 	bl	1200 <OsIf_MicrosToTicks>
    5102:	4602      	mov	r2, r0
    5104:	9b01      	ldr	r3, [sp, #4]
    5106:	601a      	str	r2, [r3, #0]
}
    5108:	bf00      	nop
    510a:	b005      	add	sp, #20
    510c:	f85d fb04 	ldr.w	pc, [sp], #4

00005110 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5110:	b500      	push	{lr}
    5112:	b087      	sub	sp, #28
    5114:	9003      	str	r0, [sp, #12]
    5116:	9102      	str	r1, [sp, #8]
    5118:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    511a:	2300      	movs	r3, #0
    511c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5120:	2100      	movs	r1, #0
    5122:	9803      	ldr	r0, [sp, #12]
    5124:	f7fc f839 	bl	119a <OsIf_GetElapsed>
    5128:	4602      	mov	r2, r0
    512a:	9b02      	ldr	r3, [sp, #8]
    512c:	681b      	ldr	r3, [r3, #0]
    512e:	441a      	add	r2, r3
    5130:	9b02      	ldr	r3, [sp, #8]
    5132:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5134:	9b02      	ldr	r3, [sp, #8]
    5136:	681b      	ldr	r3, [r3, #0]
    5138:	9a01      	ldr	r2, [sp, #4]
    513a:	429a      	cmp	r2, r3
    513c:	d802      	bhi.n	5144 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    513e:	2301      	movs	r3, #1
    5140:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5144:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5148:	4618      	mov	r0, r3
    514a:	b007      	add	sp, #28
    514c:	f85d fb04 	ldr.w	pc, [sp], #4

00005150 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5150:	b082      	sub	sp, #8
    5152:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5154:	9b01      	ldr	r3, [sp, #4]
    5156:	681a      	ldr	r2, [r3, #0]
    5158:	4907      	ldr	r1, [pc, #28]	; (5178 <Power_Ip_RCM_ResetInit+0x28>)
    515a:	f641 7307 	movw	r3, #7943	; 0x1f07
    515e:	4013      	ands	r3, r2
    5160:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5162:	9b01      	ldr	r3, [sp, #4]
    5164:	685a      	ldr	r2, [r3, #4]
    5166:	4904      	ldr	r1, [pc, #16]	; (5178 <Power_Ip_RCM_ResetInit+0x28>)
    5168:	f642 73ff 	movw	r3, #12287	; 0x2fff
    516c:	4013      	ands	r3, r2
    516e:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5170:	bf00      	nop
    5172:	b002      	add	sp, #8
    5174:	4770      	bx	lr
    5176:	bf00      	nop
    5178:	4007f000 	.word	0x4007f000

0000517c <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    517c:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    517e:	230c      	movs	r3, #12
    5180:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5182:	2300      	movs	r3, #0
    5184:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5186:	2300      	movs	r3, #0
    5188:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    518a:	2300      	movs	r3, #0
    518c:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    518e:	4b25      	ldr	r3, [pc, #148]	; (5224 <Power_Ip_RCM_GetResetReason+0xa8>)
    5190:	699a      	ldr	r2, [r3, #24]
    5192:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5196:	4013      	ands	r3, r2
    5198:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    519a:	9b03      	ldr	r3, [sp, #12]
    519c:	2b00      	cmp	r3, #0
    519e:	d008      	beq.n	51b2 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    51a0:	4920      	ldr	r1, [pc, #128]	; (5224 <Power_Ip_RCM_GetResetReason+0xa8>)
    51a2:	9a03      	ldr	r2, [sp, #12]
    51a4:	f642 73ee 	movw	r3, #12270	; 0x2fee
    51a8:	4013      	ands	r3, r2
    51aa:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    51ac:	4a1e      	ldr	r2, [pc, #120]	; (5228 <Power_Ip_RCM_GetResetReason+0xac>)
    51ae:	9b03      	ldr	r3, [sp, #12]
    51b0:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    51b2:	4b1d      	ldr	r3, [pc, #116]	; (5228 <Power_Ip_RCM_GetResetReason+0xac>)
    51b4:	681b      	ldr	r3, [r3, #0]
    51b6:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    51b8:	9a02      	ldr	r2, [sp, #8]
    51ba:	f642 73ee 	movw	r3, #12270	; 0x2fee
    51be:	4013      	ands	r3, r2
    51c0:	2b82      	cmp	r3, #130	; 0x82
    51c2:	d102      	bne.n	51ca <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    51c4:	2305      	movs	r3, #5
    51c6:	9307      	str	r3, [sp, #28]
    51c8:	e027      	b.n	521a <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    51ca:	2300      	movs	r3, #0
    51cc:	9306      	str	r3, [sp, #24]
    51ce:	e021      	b.n	5214 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    51d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    51d4:	9b06      	ldr	r3, [sp, #24]
    51d6:	fa22 f303 	lsr.w	r3, r2, r3
    51da:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    51dc:	9a01      	ldr	r2, [sp, #4]
    51de:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    51e2:	4013      	ands	r3, r2
    51e4:	2b00      	cmp	r3, #0
    51e6:	d012      	beq.n	520e <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    51e8:	9a01      	ldr	r2, [sp, #4]
    51ea:	9b02      	ldr	r3, [sp, #8]
    51ec:	4013      	ands	r3, r2
    51ee:	2b00      	cmp	r3, #0
    51f0:	d00a      	beq.n	5208 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    51f2:	9b05      	ldr	r3, [sp, #20]
    51f4:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    51f6:	9b04      	ldr	r3, [sp, #16]
    51f8:	3301      	adds	r3, #1
    51fa:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    51fc:	9b04      	ldr	r3, [sp, #16]
    51fe:	2b01      	cmp	r3, #1
    5200:	d902      	bls.n	5208 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5202:	230d      	movs	r3, #13
    5204:	9307      	str	r3, [sp, #28]
                        break;
    5206:	e008      	b.n	521a <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5208:	9b05      	ldr	r3, [sp, #20]
    520a:	3301      	adds	r3, #1
    520c:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    520e:	9b06      	ldr	r3, [sp, #24]
    5210:	3301      	adds	r3, #1
    5212:	9306      	str	r3, [sp, #24]
    5214:	9b06      	ldr	r3, [sp, #24]
    5216:	2b1f      	cmp	r3, #31
    5218:	d9da      	bls.n	51d0 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    521a:	9b07      	ldr	r3, [sp, #28]
}
    521c:	4618      	mov	r0, r3
    521e:	b008      	add	sp, #32
    5220:	4770      	bx	lr
    5222:	bf00      	nop
    5224:	4007f000 	.word	0x4007f000
    5228:	1fff8da0 	.word	0x1fff8da0

0000522c <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    522c:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    522e:	4b0c      	ldr	r3, [pc, #48]	; (5260 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5230:	699a      	ldr	r2, [r3, #24]
    5232:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5236:	4013      	ands	r3, r2
    5238:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    523a:	9b01      	ldr	r3, [sp, #4]
    523c:	2b00      	cmp	r3, #0
    523e:	d008      	beq.n	5252 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5240:	4907      	ldr	r1, [pc, #28]	; (5260 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5242:	9a01      	ldr	r2, [sp, #4]
    5244:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5248:	4013      	ands	r3, r2
    524a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    524c:	4a05      	ldr	r2, [pc, #20]	; (5264 <Power_Ip_RCM_GetResetRawValue+0x38>)
    524e:	9b01      	ldr	r3, [sp, #4]
    5250:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5252:	4b04      	ldr	r3, [pc, #16]	; (5264 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5254:	681b      	ldr	r3, [r3, #0]
    5256:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5258:	9b00      	ldr	r3, [sp, #0]
}
    525a:	4618      	mov	r0, r3
    525c:	b002      	add	sp, #8
    525e:	4770      	bx	lr
    5260:	4007f000 	.word	0x4007f000
    5264:	1fff8da0 	.word	0x1fff8da0

00005268 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5268:	b082      	sub	sp, #8
    526a:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    526c:	9b01      	ldr	r3, [sp, #4]
    526e:	681b      	ldr	r3, [r3, #0]
    5270:	4a03      	ldr	r2, [pc, #12]	; (5280 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5272:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5276:	6093      	str	r3, [r2, #8]
}
    5278:	bf00      	nop
    527a:	b002      	add	sp, #8
    527c:	4770      	bx	lr
    527e:	bf00      	nop
    5280:	4007e000 	.word	0x4007e000

00005284 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5284:	b084      	sub	sp, #16
    5286:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5288:	2301      	movs	r3, #1
    528a:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    528c:	4b15      	ldr	r3, [pc, #84]	; (52e4 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    528e:	695b      	ldr	r3, [r3, #20]
    5290:	b2db      	uxtb	r3, r3
    5292:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5294:	9b01      	ldr	r3, [sp, #4]
    5296:	2b02      	cmp	r3, #2
    5298:	d012      	beq.n	52c0 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    529a:	9b01      	ldr	r3, [sp, #4]
    529c:	2b02      	cmp	r3, #2
    529e:	d818      	bhi.n	52d2 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    52a0:	9b01      	ldr	r3, [sp, #4]
    52a2:	2b00      	cmp	r3, #0
    52a4:	d003      	beq.n	52ae <Power_Ip_SMC_ModeCheckEntry+0x2a>
    52a6:	9b01      	ldr	r3, [sp, #4]
    52a8:	2b01      	cmp	r3, #1
    52aa:	d003      	beq.n	52b4 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    52ac:	e011      	b.n	52d2 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    52ae:	2300      	movs	r3, #0
    52b0:	9303      	str	r3, [sp, #12]
            break;
    52b2:	e013      	b.n	52dc <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    52b4:	9b02      	ldr	r3, [sp, #8]
    52b6:	2b01      	cmp	r3, #1
    52b8:	d10d      	bne.n	52d6 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    52ba:	2300      	movs	r3, #0
    52bc:	9303      	str	r3, [sp, #12]
            break;
    52be:	e00a      	b.n	52d6 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    52c0:	9b02      	ldr	r3, [sp, #8]
    52c2:	2b01      	cmp	r3, #1
    52c4:	d002      	beq.n	52cc <Power_Ip_SMC_ModeCheckEntry+0x48>
    52c6:	9b02      	ldr	r3, [sp, #8]
    52c8:	2b10      	cmp	r3, #16
    52ca:	d106      	bne.n	52da <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    52cc:	2300      	movs	r3, #0
    52ce:	9303      	str	r3, [sp, #12]
            break;
    52d0:	e003      	b.n	52da <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    52d2:	bf00      	nop
    52d4:	e002      	b.n	52dc <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    52d6:	bf00      	nop
    52d8:	e000      	b.n	52dc <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    52da:	bf00      	nop
        }
    }

    return PowerModeCheck;
    52dc:	9b03      	ldr	r3, [sp, #12]
}
    52de:	4618      	mov	r0, r3
    52e0:	b004      	add	sp, #16
    52e2:	4770      	bx	lr
    52e4:	4007e000 	.word	0x4007e000

000052e8 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    52e8:	b500      	push	{lr}
    52ea:	b08b      	sub	sp, #44	; 0x2c
    52ec:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    52ee:	2300      	movs	r3, #0
    52f0:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    52f2:	2300      	movs	r3, #0
    52f4:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    52f6:	2300      	movs	r3, #0
    52f8:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    52fc:	9b01      	ldr	r3, [sp, #4]
    52fe:	685b      	ldr	r3, [r3, #4]
    5300:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5302:	9b08      	ldr	r3, [sp, #32]
    5304:	2b02      	cmp	r3, #2
    5306:	d076      	beq.n	53f6 <Power_Ip_SMC_ModeConfig+0x10e>
    5308:	9b08      	ldr	r3, [sp, #32]
    530a:	2b02      	cmp	r3, #2
    530c:	f200 80ab 	bhi.w	5466 <Power_Ip_SMC_ModeConfig+0x17e>
    5310:	9b08      	ldr	r3, [sp, #32]
    5312:	2b00      	cmp	r3, #0
    5314:	d003      	beq.n	531e <Power_Ip_SMC_ModeConfig+0x36>
    5316:	9b08      	ldr	r3, [sp, #32]
    5318:	2b01      	cmp	r3, #1
    531a:	d034      	beq.n	5386 <Power_Ip_SMC_ModeConfig+0x9e>
    531c:	e0a3      	b.n	5466 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    531e:	4b58      	ldr	r3, [pc, #352]	; (5480 <Power_Ip_SMC_ModeConfig+0x198>)
    5320:	68db      	ldr	r3, [r3, #12]
    5322:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5324:	9b06      	ldr	r3, [sp, #24]
    5326:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    532a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    532c:	4a54      	ldr	r2, [pc, #336]	; (5480 <Power_Ip_SMC_ModeConfig+0x198>)
    532e:	9b06      	ldr	r3, [sp, #24]
    5330:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5332:	aa02      	add	r2, sp, #8
    5334:	a903      	add	r1, sp, #12
    5336:	a804      	add	r0, sp, #16
    5338:	f24c 3350 	movw	r3, #50000	; 0xc350
    533c:	f7ff fece 	bl	50dc <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5340:	9a02      	ldr	r2, [sp, #8]
    5342:	a903      	add	r1, sp, #12
    5344:	ab04      	add	r3, sp, #16
    5346:	4618      	mov	r0, r3
    5348:	f7ff fee2 	bl	5110 <Power_Ip_TimeoutExpired>
    534c:	4603      	mov	r3, r0
    534e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5352:	4b4b      	ldr	r3, [pc, #300]	; (5480 <Power_Ip_SMC_ModeConfig+0x198>)
    5354:	695b      	ldr	r3, [r3, #20]
    5356:	f003 0301 	and.w	r3, r3, #1
    535a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    535c:	9b05      	ldr	r3, [sp, #20]
    535e:	2b01      	cmp	r3, #1
    5360:	d006      	beq.n	5370 <Power_Ip_SMC_ModeConfig+0x88>
    5362:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5366:	f083 0301 	eor.w	r3, r3, #1
    536a:	b2db      	uxtb	r3, r3
    536c:	2b00      	cmp	r3, #0
    536e:	d1e7      	bne.n	5340 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5370:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5374:	2b00      	cmp	r3, #0
    5376:	d079      	beq.n	546c <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5378:	2301      	movs	r3, #1
    537a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    537c:	21ff      	movs	r1, #255	; 0xff
    537e:	2000      	movs	r0, #0
    5380:	f7ff fe90 	bl	50a4 <Power_Ip_ReportPowerErrors>
            }

            break;
    5384:	e072      	b.n	546c <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5386:	4b3e      	ldr	r3, [pc, #248]	; (5480 <Power_Ip_SMC_ModeConfig+0x198>)
    5388:	68db      	ldr	r3, [r3, #12]
    538a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    538c:	9b06      	ldr	r3, [sp, #24]
    538e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5392:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5394:	9b06      	ldr	r3, [sp, #24]
    5396:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    539a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    539c:	4a38      	ldr	r2, [pc, #224]	; (5480 <Power_Ip_SMC_ModeConfig+0x198>)
    539e:	9b06      	ldr	r3, [sp, #24]
    53a0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    53a2:	aa02      	add	r2, sp, #8
    53a4:	a903      	add	r1, sp, #12
    53a6:	a804      	add	r0, sp, #16
    53a8:	f24c 3350 	movw	r3, #50000	; 0xc350
    53ac:	f7ff fe96 	bl	50dc <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    53b0:	9a02      	ldr	r2, [sp, #8]
    53b2:	a903      	add	r1, sp, #12
    53b4:	ab04      	add	r3, sp, #16
    53b6:	4618      	mov	r0, r3
    53b8:	f7ff feaa 	bl	5110 <Power_Ip_TimeoutExpired>
    53bc:	4603      	mov	r3, r0
    53be:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    53c2:	4b2f      	ldr	r3, [pc, #188]	; (5480 <Power_Ip_SMC_ModeConfig+0x198>)
    53c4:	695b      	ldr	r3, [r3, #20]
    53c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    53ca:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    53cc:	9b05      	ldr	r3, [sp, #20]
    53ce:	2b80      	cmp	r3, #128	; 0x80
    53d0:	d006      	beq.n	53e0 <Power_Ip_SMC_ModeConfig+0xf8>
    53d2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    53d6:	f083 0301 	eor.w	r3, r3, #1
    53da:	b2db      	uxtb	r3, r3
    53dc:	2b00      	cmp	r3, #0
    53de:	d1e7      	bne.n	53b0 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    53e0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    53e4:	2b00      	cmp	r3, #0
    53e6:	d043      	beq.n	5470 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    53e8:	2301      	movs	r3, #1
    53ea:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    53ec:	21ff      	movs	r1, #255	; 0xff
    53ee:	2000      	movs	r0, #0
    53f0:	f7ff fe58 	bl	50a4 <Power_Ip_ReportPowerErrors>
            }

            break;
    53f4:	e03c      	b.n	5470 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    53f6:	4b22      	ldr	r3, [pc, #136]	; (5480 <Power_Ip_SMC_ModeConfig+0x198>)
    53f8:	68db      	ldr	r3, [r3, #12]
    53fa:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    53fc:	9b06      	ldr	r3, [sp, #24]
    53fe:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5402:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5404:	9b06      	ldr	r3, [sp, #24]
    5406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    540a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    540c:	4a1c      	ldr	r2, [pc, #112]	; (5480 <Power_Ip_SMC_ModeConfig+0x198>)
    540e:	9b06      	ldr	r3, [sp, #24]
    5410:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5412:	aa02      	add	r2, sp, #8
    5414:	a903      	add	r1, sp, #12
    5416:	a804      	add	r0, sp, #16
    5418:	f24c 3350 	movw	r3, #50000	; 0xc350
    541c:	f7ff fe5e 	bl	50dc <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5420:	9a02      	ldr	r2, [sp, #8]
    5422:	a903      	add	r1, sp, #12
    5424:	ab04      	add	r3, sp, #16
    5426:	4618      	mov	r0, r3
    5428:	f7ff fe72 	bl	5110 <Power_Ip_TimeoutExpired>
    542c:	4603      	mov	r3, r0
    542e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5432:	4b13      	ldr	r3, [pc, #76]	; (5480 <Power_Ip_SMC_ModeConfig+0x198>)
    5434:	695b      	ldr	r3, [r3, #20]
    5436:	f003 0304 	and.w	r3, r3, #4
    543a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    543c:	9b05      	ldr	r3, [sp, #20]
    543e:	2b04      	cmp	r3, #4
    5440:	d006      	beq.n	5450 <Power_Ip_SMC_ModeConfig+0x168>
    5442:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5446:	f083 0301 	eor.w	r3, r3, #1
    544a:	b2db      	uxtb	r3, r3
    544c:	2b00      	cmp	r3, #0
    544e:	d1e7      	bne.n	5420 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5450:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5454:	2b00      	cmp	r3, #0
    5456:	d00d      	beq.n	5474 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5458:	2301      	movs	r3, #1
    545a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    545c:	21ff      	movs	r1, #255	; 0xff
    545e:	2000      	movs	r0, #0
    5460:	f7ff fe20 	bl	50a4 <Power_Ip_ReportPowerErrors>
            }

            break;
    5464:	e006      	b.n	5474 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5466:	2301      	movs	r3, #1
    5468:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    546a:	e004      	b.n	5476 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    546c:	bf00      	nop
    546e:	e002      	b.n	5476 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5470:	bf00      	nop
    5472:	e000      	b.n	5476 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5474:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5476:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5478:	4618      	mov	r0, r3
    547a:	b00b      	add	sp, #44	; 0x2c
    547c:	f85d fb04 	ldr.w	pc, [sp], #4
    5480:	4007e000 	.word	0x4007e000

00005484 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5484:	b500      	push	{lr}
    5486:	b085      	sub	sp, #20
    5488:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    548a:	9b01      	ldr	r3, [sp, #4]
    548c:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    548e:	9803      	ldr	r0, [sp, #12]
    5490:	f000 fbc8 	bl	5c24 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5494:	4a03      	ldr	r2, [pc, #12]	; (54a4 <Port_Init+0x20>)
    5496:	9b03      	ldr	r3, [sp, #12]
    5498:	6013      	str	r3, [r2, #0]
        }
    }
}
    549a:	bf00      	nop
    549c:	b005      	add	sp, #20
    549e:	f85d fb04 	ldr.w	pc, [sp], #4
    54a2:	bf00      	nop
    54a4:	1fff8da4 	.word	0x1fff8da4

000054a8 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    54a8:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    54aa:	4b03      	ldr	r3, [pc, #12]	; (54b8 <Port_RefreshPortDirection+0x10>)
    54ac:	681b      	ldr	r3, [r3, #0]
    54ae:	4618      	mov	r0, r3
    54b0:	f000 fc10 	bl	5cd4 <Port_Ipw_RefreshPortDirection>
    }
}
    54b4:	bf00      	nop
    54b6:	bd08      	pop	{r3, pc}
    54b8:	1fff8da4 	.word	0x1fff8da4

000054bc <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    54bc:	b086      	sub	sp, #24
    54be:	9003      	str	r0, [sp, #12]
    54c0:	9102      	str	r1, [sp, #8]
    54c2:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    54c4:	23ff      	movs	r3, #255	; 0xff
    54c6:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    54c8:	9b03      	ldr	r3, [sp, #12]
    54ca:	4a39      	ldr	r2, [pc, #228]	; (55b0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    54cc:	4293      	cmp	r3, r2
    54ce:	d151      	bne.n	5574 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    54d0:	9b02      	ldr	r3, [sp, #8]
    54d2:	2b10      	cmp	r3, #16
    54d4:	d867      	bhi.n	55a6 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    54d6:	a201      	add	r2, pc, #4	; (adr r2, 54dc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    54d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    54dc:	00005521 	.word	0x00005521
    54e0:	0000552f 	.word	0x0000552f
    54e4:	000055a7 	.word	0x000055a7
    54e8:	000055a7 	.word	0x000055a7
    54ec:	000055a7 	.word	0x000055a7
    54f0:	000055a7 	.word	0x000055a7
    54f4:	000055a7 	.word	0x000055a7
    54f8:	000055a7 	.word	0x000055a7
    54fc:	000055a7 	.word	0x000055a7
    5500:	000055a7 	.word	0x000055a7
    5504:	000055a7 	.word	0x000055a7
    5508:	000055a7 	.word	0x000055a7
    550c:	000055a7 	.word	0x000055a7
    5510:	0000553d 	.word	0x0000553d
    5514:	0000554b 	.word	0x0000554b
    5518:	00005559 	.word	0x00005559
    551c:	00005567 	.word	0x00005567
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5520:	2301      	movs	r3, #1
    5522:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5524:	9a05      	ldr	r2, [sp, #20]
    5526:	9b01      	ldr	r3, [sp, #4]
    5528:	4313      	orrs	r3, r2
    552a:	9305      	str	r3, [sp, #20]
                break;
    552c:	e03c      	b.n	55a8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    552e:	2302      	movs	r3, #2
    5530:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5532:	9a05      	ldr	r2, [sp, #20]
    5534:	9b01      	ldr	r3, [sp, #4]
    5536:	4313      	orrs	r3, r2
    5538:	9305      	str	r3, [sp, #20]
                break;
    553a:	e035      	b.n	55a8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    553c:	2304      	movs	r3, #4
    553e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5540:	9a05      	ldr	r2, [sp, #20]
    5542:	9b01      	ldr	r3, [sp, #4]
    5544:	4313      	orrs	r3, r2
    5546:	9305      	str	r3, [sp, #20]
                break;
    5548:	e02e      	b.n	55a8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    554a:	2308      	movs	r3, #8
    554c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    554e:	9a05      	ldr	r2, [sp, #20]
    5550:	9b01      	ldr	r3, [sp, #4]
    5552:	4313      	orrs	r3, r2
    5554:	9305      	str	r3, [sp, #20]
                break;
    5556:	e027      	b.n	55a8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5558:	230e      	movs	r3, #14
    555a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    555c:	9a05      	ldr	r2, [sp, #20]
    555e:	9b01      	ldr	r3, [sp, #4]
    5560:	4013      	ands	r3, r2
    5562:	9305      	str	r3, [sp, #20]
                break;
    5564:	e020      	b.n	55a8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5566:	230d      	movs	r3, #13
    5568:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    556a:	9a05      	ldr	r2, [sp, #20]
    556c:	9b01      	ldr	r3, [sp, #4]
    556e:	4013      	ands	r3, r2
    5570:	9305      	str	r3, [sp, #20]
                break;
    5572:	e019      	b.n	55a8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5574:	9b03      	ldr	r3, [sp, #12]
    5576:	4a0f      	ldr	r2, [pc, #60]	; (55b4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5578:	4293      	cmp	r3, r2
    557a:	d115      	bne.n	55a8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    557c:	9b02      	ldr	r3, [sp, #8]
    557e:	2b00      	cmp	r3, #0
    5580:	d003      	beq.n	558a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5582:	9b02      	ldr	r3, [sp, #8]
    5584:	2b01      	cmp	r3, #1
    5586:	d007      	beq.n	5598 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5588:	e00e      	b.n	55a8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    558a:	230b      	movs	r3, #11
    558c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    558e:	9a05      	ldr	r2, [sp, #20]
    5590:	9b01      	ldr	r3, [sp, #4]
    5592:	4013      	ands	r3, r2
    5594:	9305      	str	r3, [sp, #20]
                break;
    5596:	e007      	b.n	55a8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5598:	2307      	movs	r3, #7
    559a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    559c:	9a05      	ldr	r2, [sp, #20]
    559e:	9b01      	ldr	r3, [sp, #4]
    55a0:	4013      	ands	r3, r2
    55a2:	9305      	str	r3, [sp, #20]
                break;
    55a4:	e000      	b.n	55a8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    55a6:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    55a8:	9b05      	ldr	r3, [sp, #20]
}
    55aa:	4618      	mov	r0, r3
    55ac:	b006      	add	sp, #24
    55ae:	4770      	bx	lr
    55b0:	4004a000 	.word	0x4004a000
    55b4:	4004b000 	.word	0x4004b000

000055b8 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    55b8:	b500      	push	{lr}
    55ba:	b089      	sub	sp, #36	; 0x24
    55bc:	9003      	str	r0, [sp, #12]
    55be:	9102      	str	r1, [sp, #8]
    55c0:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    55c2:	9b01      	ldr	r3, [sp, #4]
    55c4:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    55c6:	9b01      	ldr	r3, [sp, #4]
    55c8:	2b08      	cmp	r3, #8
    55ca:	d121      	bne.n	5610 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    55cc:	4b13      	ldr	r3, [pc, #76]	; (561c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    55ce:	685b      	ldr	r3, [r3, #4]
    55d0:	f003 030f 	and.w	r3, r3, #15
    55d4:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    55d6:	9a06      	ldr	r2, [sp, #24]
    55d8:	9902      	ldr	r1, [sp, #8]
    55da:	9803      	ldr	r0, [sp, #12]
    55dc:	f7ff ff6e 	bl	54bc <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    55e0:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    55e2:	9b05      	ldr	r3, [sp, #20]
    55e4:	2bff      	cmp	r3, #255	; 0xff
    55e6:	d011      	beq.n	560c <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    55e8:	f005 fa12 	bl	aa10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    55ec:	4b0b      	ldr	r3, [pc, #44]	; (561c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    55ee:	685b      	ldr	r3, [r3, #4]
    55f0:	4a0a      	ldr	r2, [pc, #40]	; (561c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    55f2:	f023 030f 	bic.w	r3, r3, #15
    55f6:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    55f8:	4b08      	ldr	r3, [pc, #32]	; (561c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    55fa:	685a      	ldr	r2, [r3, #4]
    55fc:	9b05      	ldr	r3, [sp, #20]
    55fe:	f003 030f 	and.w	r3, r3, #15
    5602:	4906      	ldr	r1, [pc, #24]	; (561c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5604:	4313      	orrs	r3, r2
    5606:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    5608:	f005 fa2e 	bl	aa68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    560c:	2300      	movs	r3, #0
    560e:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    5610:	9b07      	ldr	r3, [sp, #28]
}
    5612:	4618      	mov	r0, r3
    5614:	b009      	add	sp, #36	; 0x24
    5616:	f85d fb04 	ldr.w	pc, [sp], #4
    561a:	bf00      	nop
    561c:	40048000 	.word	0x40048000

00005620 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    5620:	b500      	push	{lr}
    5622:	b087      	sub	sp, #28
    5624:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    5626:	2300      	movs	r3, #0
    5628:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    562a:	2300      	movs	r3, #0
    562c:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    562e:	2300      	movs	r3, #0
    5630:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    5632:	9b01      	ldr	r3, [sp, #4]
    5634:	68db      	ldr	r3, [r3, #12]
    5636:	2b02      	cmp	r3, #2
    5638:	d00a      	beq.n	5650 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    563a:	9b05      	ldr	r3, [sp, #20]
    563c:	f043 0302 	orr.w	r3, r3, #2
    5640:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    5642:	9b01      	ldr	r3, [sp, #4]
    5644:	68db      	ldr	r3, [r3, #12]
    5646:	f003 0301 	and.w	r3, r3, #1
    564a:	9a05      	ldr	r2, [sp, #20]
    564c:	4313      	orrs	r3, r2
    564e:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    5650:	9b01      	ldr	r3, [sp, #4]
    5652:	699b      	ldr	r3, [r3, #24]
    5654:	019b      	lsls	r3, r3, #6
    5656:	f003 0340 	and.w	r3, r3, #64	; 0x40
    565a:	9a05      	ldr	r2, [sp, #20]
    565c:	4313      	orrs	r3, r2
    565e:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    5660:	9b01      	ldr	r3, [sp, #4]
    5662:	6a1b      	ldr	r3, [r3, #32]
    5664:	03db      	lsls	r3, r3, #15
    5666:	b29b      	uxth	r3, r3
    5668:	9a05      	ldr	r2, [sp, #20]
    566a:	4313      	orrs	r3, r2
    566c:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    566e:	9b01      	ldr	r3, [sp, #4]
    5670:	7f1b      	ldrb	r3, [r3, #28]
    5672:	2b00      	cmp	r3, #0
    5674:	d001      	beq.n	567a <Port_Ci_Port_Ip_PinInit+0x5a>
    5676:	2310      	movs	r3, #16
    5678:	e000      	b.n	567c <Port_Ci_Port_Ip_PinInit+0x5c>
    567a:	2300      	movs	r3, #0
    567c:	9a05      	ldr	r2, [sp, #20]
    567e:	4313      	orrs	r3, r2
    5680:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    5682:	9b01      	ldr	r3, [sp, #4]
    5684:	691b      	ldr	r3, [r3, #16]
    5686:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5688:	9b01      	ldr	r3, [sp, #4]
    568a:	6818      	ldr	r0, [r3, #0]
    568c:	9b01      	ldr	r3, [sp, #4]
    568e:	689b      	ldr	r3, [r3, #8]
    5690:	9a04      	ldr	r2, [sp, #16]
    5692:	4619      	mov	r1, r3
    5694:	f7ff ff90 	bl	55b8 <Port_Ci_Port_Ip_ConfigureInterleave>
    5698:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    569a:	9b03      	ldr	r3, [sp, #12]
    569c:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    569e:	9b04      	ldr	r3, [sp, #16]
    56a0:	021b      	lsls	r3, r3, #8
    56a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    56a6:	9a05      	ldr	r2, [sp, #20]
    56a8:	4313      	orrs	r3, r2
    56aa:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    56ac:	f005 f816 	bl	a6dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    56b0:	9b01      	ldr	r3, [sp, #4]
    56b2:	681b      	ldr	r3, [r3, #0]
    56b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    56b8:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    56ba:	9b01      	ldr	r3, [sp, #4]
    56bc:	689b      	ldr	r3, [r3, #8]
    56be:	2201      	movs	r2, #1
    56c0:	fa02 f303 	lsl.w	r3, r2, r3
    56c4:	43db      	mvns	r3, r3
    56c6:	9a02      	ldr	r2, [sp, #8]
    56c8:	4013      	ands	r3, r2
    56ca:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    56cc:	9b01      	ldr	r3, [sp, #4]
    56ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    56d2:	2b00      	cmp	r3, #0
    56d4:	d001      	beq.n	56da <Port_Ci_Port_Ip_PinInit+0xba>
    56d6:	2201      	movs	r2, #1
    56d8:	e000      	b.n	56dc <Port_Ci_Port_Ip_PinInit+0xbc>
    56da:	2200      	movs	r2, #0
    56dc:	9b01      	ldr	r3, [sp, #4]
    56de:	689b      	ldr	r3, [r3, #8]
    56e0:	fa02 f303 	lsl.w	r3, r2, r3
    56e4:	9a02      	ldr	r2, [sp, #8]
    56e6:	4313      	orrs	r3, r2
    56e8:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    56ea:	9b01      	ldr	r3, [sp, #4]
    56ec:	681b      	ldr	r3, [r3, #0]
    56ee:	9a02      	ldr	r2, [sp, #8]
    56f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    56f4:	f005 f81e 	bl	a734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    56f8:	9b04      	ldr	r3, [sp, #16]
    56fa:	2b01      	cmp	r3, #1
    56fc:	d16d      	bne.n	57da <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    56fe:	9b01      	ldr	r3, [sp, #4]
    5700:	695b      	ldr	r3, [r3, #20]
    5702:	2b02      	cmp	r3, #2
    5704:	d138      	bne.n	5778 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    5706:	9b01      	ldr	r3, [sp, #4]
    5708:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    570c:	2b01      	cmp	r3, #1
    570e:	d10f      	bne.n	5730 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    5710:	f005 f836 	bl	a780 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    5714:	9b01      	ldr	r3, [sp, #4]
    5716:	685b      	ldr	r3, [r3, #4]
    5718:	6859      	ldr	r1, [r3, #4]
    571a:	9b01      	ldr	r3, [sp, #4]
    571c:	689b      	ldr	r3, [r3, #8]
    571e:	2201      	movs	r2, #1
    5720:	409a      	lsls	r2, r3
    5722:	9b01      	ldr	r3, [sp, #4]
    5724:	685b      	ldr	r3, [r3, #4]
    5726:	430a      	orrs	r2, r1
    5728:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    572a:	f005 f855 	bl	a7d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    572e:	e013      	b.n	5758 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    5730:	9b01      	ldr	r3, [sp, #4]
    5732:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5736:	2b00      	cmp	r3, #0
    5738:	d10e      	bne.n	5758 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    573a:	f005 f873 	bl	a824 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    573e:	9b01      	ldr	r3, [sp, #4]
    5740:	685b      	ldr	r3, [r3, #4]
    5742:	6899      	ldr	r1, [r3, #8]
    5744:	9b01      	ldr	r3, [sp, #4]
    5746:	689b      	ldr	r3, [r3, #8]
    5748:	2201      	movs	r2, #1
    574a:	409a      	lsls	r2, r3
    574c:	9b01      	ldr	r3, [sp, #4]
    574e:	685b      	ldr	r3, [r3, #4]
    5750:	430a      	orrs	r2, r1
    5752:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    5754:	f005 f892 	bl	a87c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5758:	f005 f8b6 	bl	a8c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    575c:	9b01      	ldr	r3, [sp, #4]
    575e:	685b      	ldr	r3, [r3, #4]
    5760:	6959      	ldr	r1, [r3, #20]
    5762:	9b01      	ldr	r3, [sp, #4]
    5764:	689b      	ldr	r3, [r3, #8]
    5766:	2201      	movs	r2, #1
    5768:	409a      	lsls	r2, r3
    576a:	9b01      	ldr	r3, [sp, #4]
    576c:	685b      	ldr	r3, [r3, #4]
    576e:	430a      	orrs	r2, r1
    5770:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5772:	f005 f8d5 	bl	a920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    5776:	e030      	b.n	57da <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5778:	f005 f8a6 	bl	a8c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    577c:	9b01      	ldr	r3, [sp, #4]
    577e:	685b      	ldr	r3, [r3, #4]
    5780:	6959      	ldr	r1, [r3, #20]
    5782:	9b01      	ldr	r3, [sp, #4]
    5784:	689b      	ldr	r3, [r3, #8]
    5786:	2201      	movs	r2, #1
    5788:	fa02 f303 	lsl.w	r3, r2, r3
    578c:	43da      	mvns	r2, r3
    578e:	9b01      	ldr	r3, [sp, #4]
    5790:	685b      	ldr	r3, [r3, #4]
    5792:	400a      	ands	r2, r1
    5794:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5796:	f005 f8c3 	bl	a920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    579a:	f005 f8e7 	bl	a96c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    579e:	9b01      	ldr	r3, [sp, #4]
    57a0:	685b      	ldr	r3, [r3, #4]
    57a2:	6999      	ldr	r1, [r3, #24]
    57a4:	9b01      	ldr	r3, [sp, #4]
    57a6:	689b      	ldr	r3, [r3, #8]
    57a8:	2201      	movs	r2, #1
    57aa:	fa02 f303 	lsl.w	r3, r2, r3
    57ae:	43da      	mvns	r2, r3
    57b0:	9b01      	ldr	r3, [sp, #4]
    57b2:	685b      	ldr	r3, [r3, #4]
    57b4:	400a      	ands	r2, r1
    57b6:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    57b8:	9b01      	ldr	r3, [sp, #4]
    57ba:	695b      	ldr	r3, [r3, #20]
    57bc:	2b03      	cmp	r3, #3
    57be:	d10a      	bne.n	57d6 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    57c0:	9b01      	ldr	r3, [sp, #4]
    57c2:	685b      	ldr	r3, [r3, #4]
    57c4:	6999      	ldr	r1, [r3, #24]
    57c6:	9b01      	ldr	r3, [sp, #4]
    57c8:	689b      	ldr	r3, [r3, #8]
    57ca:	2201      	movs	r2, #1
    57cc:	409a      	lsls	r2, r3
    57ce:	9b01      	ldr	r3, [sp, #4]
    57d0:	685b      	ldr	r3, [r3, #4]
    57d2:	430a      	orrs	r2, r1
    57d4:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    57d6:	f005 f8f5 	bl	a9c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    57da:	9b01      	ldr	r3, [sp, #4]
    57dc:	681b      	ldr	r3, [r3, #0]
    57de:	9a01      	ldr	r2, [sp, #4]
    57e0:	6892      	ldr	r2, [r2, #8]
    57e2:	9905      	ldr	r1, [sp, #20]
    57e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    57e8:	bf00      	nop
    57ea:	b007      	add	sp, #28
    57ec:	f85d fb04 	ldr.w	pc, [sp], #4

000057f0 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    57f0:	b500      	push	{lr}
    57f2:	b085      	sub	sp, #20
    57f4:	9001      	str	r0, [sp, #4]
    57f6:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    57f8:	2300      	movs	r3, #0
    57fa:	9303      	str	r3, [sp, #12]
    57fc:	e00d      	b.n	581a <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    57fe:	9a03      	ldr	r2, [sp, #12]
    5800:	4613      	mov	r3, r2
    5802:	009b      	lsls	r3, r3, #2
    5804:	4413      	add	r3, r2
    5806:	00db      	lsls	r3, r3, #3
    5808:	461a      	mov	r2, r3
    580a:	9b00      	ldr	r3, [sp, #0]
    580c:	4413      	add	r3, r2
    580e:	4618      	mov	r0, r3
    5810:	f7ff ff06 	bl	5620 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    5814:	9b03      	ldr	r3, [sp, #12]
    5816:	3301      	adds	r3, #1
    5818:	9303      	str	r3, [sp, #12]
    581a:	9a03      	ldr	r2, [sp, #12]
    581c:	9b01      	ldr	r3, [sp, #4]
    581e:	429a      	cmp	r2, r3
    5820:	d3ed      	bcc.n	57fe <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    5822:	2300      	movs	r3, #0
}
    5824:	4618      	mov	r0, r3
    5826:	b005      	add	sp, #20
    5828:	f85d fb04 	ldr.w	pc, [sp], #4

0000582c <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    582c:	b500      	push	{lr}
    582e:	b087      	sub	sp, #28
    5830:	9003      	str	r0, [sp, #12]
    5832:	9102      	str	r1, [sp, #8]
    5834:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    5836:	9a01      	ldr	r2, [sp, #4]
    5838:	9902      	ldr	r1, [sp, #8]
    583a:	9803      	ldr	r0, [sp, #12]
    583c:	f7ff febc 	bl	55b8 <Port_Ci_Port_Ip_ConfigureInterleave>
    5840:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    5842:	f005 f937 	bl	aab4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    5846:	9b03      	ldr	r3, [sp, #12]
    5848:	9a02      	ldr	r2, [sp, #8]
    584a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    584e:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    5850:	9b04      	ldr	r3, [sp, #16]
    5852:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    5856:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    5858:	9b05      	ldr	r3, [sp, #20]
    585a:	021b      	lsls	r3, r3, #8
    585c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5860:	9a04      	ldr	r2, [sp, #16]
    5862:	4313      	orrs	r3, r2
    5864:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    5866:	9b03      	ldr	r3, [sp, #12]
    5868:	9a02      	ldr	r2, [sp, #8]
    586a:	9904      	ldr	r1, [sp, #16]
    586c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    5870:	f005 f94c 	bl	ab0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    5874:	bf00      	nop
    5876:	b007      	add	sp, #28
    5878:	f85d fb04 	ldr.w	pc, [sp], #4

0000587c <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    587c:	b500      	push	{lr}
    587e:	b083      	sub	sp, #12
    5880:	9001      	str	r0, [sp, #4]
    5882:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    5884:	f005 f968 	bl	ab58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    5888:	9b01      	ldr	r3, [sp, #4]
    588a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    588e:	2101      	movs	r1, #1
    5890:	9b00      	ldr	r3, [sp, #0]
    5892:	fa01 f303 	lsl.w	r3, r1, r3
    5896:	431a      	orrs	r2, r3
    5898:	9b01      	ldr	r3, [sp, #4]
    589a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    589e:	f005 f987 	bl	abb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    58a2:	bf00      	nop
    58a4:	b003      	add	sp, #12
    58a6:	f85d fb04 	ldr.w	pc, [sp], #4

000058aa <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    58aa:	b500      	push	{lr}
    58ac:	b083      	sub	sp, #12
    58ae:	9001      	str	r0, [sp, #4]
    58b0:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    58b2:	f005 f9a3 	bl	abfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    58b6:	9b01      	ldr	r3, [sp, #4]
    58b8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    58bc:	2101      	movs	r1, #1
    58be:	9b00      	ldr	r3, [sp, #0]
    58c0:	fa01 f303 	lsl.w	r3, r1, r3
    58c4:	43db      	mvns	r3, r3
    58c6:	401a      	ands	r2, r3
    58c8:	9b01      	ldr	r3, [sp, #4]
    58ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    58ce:	f005 f9c1 	bl	ac54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    58d2:	bf00      	nop
    58d4:	b003      	add	sp, #12
    58d6:	f85d fb04 	ldr.w	pc, [sp], #4

000058da <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    58da:	b082      	sub	sp, #8
    58dc:	9001      	str	r0, [sp, #4]
    58de:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    58e0:	9b00      	ldr	r3, [sp, #0]
    58e2:	785b      	ldrb	r3, [r3, #1]
    58e4:	f003 0201 	and.w	r2, r3, #1
    58e8:	9b01      	ldr	r3, [sp, #4]
    58ea:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    58ee:	9b00      	ldr	r3, [sp, #0]
    58f0:	789b      	ldrb	r3, [r3, #2]
    58f2:	f003 021f 	and.w	r2, r3, #31
    58f6:	9b01      	ldr	r3, [sp, #4]
    58f8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    58fc:	bf00      	nop
    58fe:	b002      	add	sp, #8
    5900:	4770      	bx	lr

00005902 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    5902:	b086      	sub	sp, #24
    5904:	9003      	str	r0, [sp, #12]
    5906:	9301      	str	r3, [sp, #4]
    5908:	460b      	mov	r3, r1
    590a:	f8ad 300a 	strh.w	r3, [sp, #10]
    590e:	4613      	mov	r3, r2
    5910:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    5914:	2300      	movs	r3, #0
    5916:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    591a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    591e:	f043 0301 	orr.w	r3, r3, #1
    5922:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    5926:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    592a:	f043 0302 	orr.w	r3, r3, #2
    592e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    5932:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5936:	f043 0310 	orr.w	r3, r3, #16
    593a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    593e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5946:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    594a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    594e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    5952:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    5956:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    595a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    595e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    5962:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    5966:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    596a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    596e:	4013      	ands	r3, r2
    5970:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    5974:	9b01      	ldr	r3, [sp, #4]
    5976:	2b00      	cmp	r3, #0
    5978:	d003      	beq.n	5982 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    597a:	9b01      	ldr	r3, [sp, #4]
    597c:	2b01      	cmp	r3, #1
    597e:	d00a      	beq.n	5996 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    5980:	e013      	b.n	59aa <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    5982:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5986:	041a      	lsls	r2, r3, #16
    5988:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    598c:	431a      	orrs	r2, r3
    598e:	9b03      	ldr	r3, [sp, #12]
    5990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    5994:	e009      	b.n	59aa <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    5996:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    599a:	041a      	lsls	r2, r3, #16
    599c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59a0:	431a      	orrs	r2, r3
    59a2:	9b03      	ldr	r3, [sp, #12]
    59a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    59a8:	bf00      	nop
    }
}
    59aa:	bf00      	nop
    59ac:	b006      	add	sp, #24
    59ae:	4770      	bx	lr

000059b0 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    59b0:	b500      	push	{lr}
    59b2:	b087      	sub	sp, #28
    59b4:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    59b6:	9b01      	ldr	r3, [sp, #4]
    59b8:	885b      	ldrh	r3, [r3, #2]
    59ba:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    59be:	9b01      	ldr	r3, [sp, #4]
    59c0:	689b      	ldr	r3, [r3, #8]
    59c2:	7a1b      	ldrb	r3, [r3, #8]
    59c4:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    59c8:	9b01      	ldr	r3, [sp, #4]
    59ca:	689b      	ldr	r3, [r3, #8]
    59cc:	681b      	ldr	r3, [r3, #0]
    59ce:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    59d0:	9b01      	ldr	r3, [sp, #4]
    59d2:	689b      	ldr	r3, [r3, #8]
    59d4:	685b      	ldr	r3, [r3, #4]
    59d6:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    59d8:	2300      	movs	r3, #0
    59da:	f8ad 3016 	strh.w	r3, [sp, #22]
    59de:	e111      	b.n	5c04 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    59e0:	9b02      	ldr	r3, [sp, #8]
    59e2:	2b02      	cmp	r3, #2
    59e4:	d169      	bne.n	5aba <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    59e6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    59ea:	2b01      	cmp	r3, #1
    59ec:	d11a      	bne.n	5a24 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    59ee:	9b01      	ldr	r3, [sp, #4]
    59f0:	685a      	ldr	r2, [r3, #4]
    59f2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59f6:	005b      	lsls	r3, r3, #1
    59f8:	4413      	add	r3, r2
    59fa:	881b      	ldrh	r3, [r3, #0]
    59fc:	f003 021f 	and.w	r2, r3, #31
    5a00:	9b01      	ldr	r3, [sp, #4]
    5a02:	6859      	ldr	r1, [r3, #4]
    5a04:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a08:	005b      	lsls	r3, r3, #1
    5a0a:	440b      	add	r3, r1
    5a0c:	881b      	ldrh	r3, [r3, #0]
    5a0e:	095b      	lsrs	r3, r3, #5
    5a10:	b29b      	uxth	r3, r3
    5a12:	4619      	mov	r1, r3
    5a14:	4b81      	ldr	r3, [pc, #516]	; (5c1c <Port_Ipw_Init_UnusedPins+0x26c>)
    5a16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5a1a:	2101      	movs	r1, #1
    5a1c:	fa01 f202 	lsl.w	r2, r1, r2
    5a20:	605a      	str	r2, [r3, #4]
    5a22:	e01d      	b.n	5a60 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    5a24:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5a28:	2b00      	cmp	r3, #0
    5a2a:	d119      	bne.n	5a60 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5a2c:	9b01      	ldr	r3, [sp, #4]
    5a2e:	685a      	ldr	r2, [r3, #4]
    5a30:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a34:	005b      	lsls	r3, r3, #1
    5a36:	4413      	add	r3, r2
    5a38:	881b      	ldrh	r3, [r3, #0]
    5a3a:	f003 021f 	and.w	r2, r3, #31
    5a3e:	9b01      	ldr	r3, [sp, #4]
    5a40:	6859      	ldr	r1, [r3, #4]
    5a42:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a46:	005b      	lsls	r3, r3, #1
    5a48:	440b      	add	r3, r1
    5a4a:	881b      	ldrh	r3, [r3, #0]
    5a4c:	095b      	lsrs	r3, r3, #5
    5a4e:	b29b      	uxth	r3, r3
    5a50:	4619      	mov	r1, r3
    5a52:	4b72      	ldr	r3, [pc, #456]	; (5c1c <Port_Ipw_Init_UnusedPins+0x26c>)
    5a54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5a58:	2101      	movs	r1, #1
    5a5a:	fa01 f202 	lsl.w	r2, r1, r2
    5a5e:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5a60:	f005 f91e 	bl	aca0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5a64:	9b01      	ldr	r3, [sp, #4]
    5a66:	685a      	ldr	r2, [r3, #4]
    5a68:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a6c:	005b      	lsls	r3, r3, #1
    5a6e:	4413      	add	r3, r2
    5a70:	881b      	ldrh	r3, [r3, #0]
    5a72:	095b      	lsrs	r3, r3, #5
    5a74:	b29b      	uxth	r3, r3
    5a76:	461a      	mov	r2, r3
    5a78:	4b68      	ldr	r3, [pc, #416]	; (5c1c <Port_Ipw_Init_UnusedPins+0x26c>)
    5a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5a7e:	6959      	ldr	r1, [r3, #20]
    5a80:	9b01      	ldr	r3, [sp, #4]
    5a82:	685a      	ldr	r2, [r3, #4]
    5a84:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a88:	005b      	lsls	r3, r3, #1
    5a8a:	4413      	add	r3, r2
    5a8c:	881b      	ldrh	r3, [r3, #0]
    5a8e:	f003 031f 	and.w	r3, r3, #31
    5a92:	2201      	movs	r2, #1
    5a94:	409a      	lsls	r2, r3
    5a96:	9b01      	ldr	r3, [sp, #4]
    5a98:	6858      	ldr	r0, [r3, #4]
    5a9a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a9e:	005b      	lsls	r3, r3, #1
    5aa0:	4403      	add	r3, r0
    5aa2:	881b      	ldrh	r3, [r3, #0]
    5aa4:	095b      	lsrs	r3, r3, #5
    5aa6:	b29b      	uxth	r3, r3
    5aa8:	4618      	mov	r0, r3
    5aaa:	4b5c      	ldr	r3, [pc, #368]	; (5c1c <Port_Ipw_Init_UnusedPins+0x26c>)
    5aac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5ab0:	430a      	orrs	r2, r1
    5ab2:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5ab4:	f005 f920 	bl	acf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    5ab8:	e086      	b.n	5bc8 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5aba:	f005 f8f1 	bl	aca0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    5abe:	9b01      	ldr	r3, [sp, #4]
    5ac0:	685a      	ldr	r2, [r3, #4]
    5ac2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ac6:	005b      	lsls	r3, r3, #1
    5ac8:	4413      	add	r3, r2
    5aca:	881b      	ldrh	r3, [r3, #0]
    5acc:	095b      	lsrs	r3, r3, #5
    5ace:	b29b      	uxth	r3, r3
    5ad0:	461a      	mov	r2, r3
    5ad2:	4b52      	ldr	r3, [pc, #328]	; (5c1c <Port_Ipw_Init_UnusedPins+0x26c>)
    5ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5ad8:	6959      	ldr	r1, [r3, #20]
    5ada:	9b01      	ldr	r3, [sp, #4]
    5adc:	685a      	ldr	r2, [r3, #4]
    5ade:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ae2:	005b      	lsls	r3, r3, #1
    5ae4:	4413      	add	r3, r2
    5ae6:	881b      	ldrh	r3, [r3, #0]
    5ae8:	f003 031f 	and.w	r3, r3, #31
    5aec:	2201      	movs	r2, #1
    5aee:	fa02 f303 	lsl.w	r3, r2, r3
    5af2:	43da      	mvns	r2, r3
    5af4:	9b01      	ldr	r3, [sp, #4]
    5af6:	6858      	ldr	r0, [r3, #4]
    5af8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5afc:	005b      	lsls	r3, r3, #1
    5afe:	4403      	add	r3, r0
    5b00:	881b      	ldrh	r3, [r3, #0]
    5b02:	095b      	lsrs	r3, r3, #5
    5b04:	b29b      	uxth	r3, r3
    5b06:	4618      	mov	r0, r3
    5b08:	4b44      	ldr	r3, [pc, #272]	; (5c1c <Port_Ipw_Init_UnusedPins+0x26c>)
    5b0a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5b0e:	400a      	ands	r2, r1
    5b10:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5b12:	f005 f8f1 	bl	acf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    5b16:	f005 f915 	bl	ad44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5b1a:	9b01      	ldr	r3, [sp, #4]
    5b1c:	685a      	ldr	r2, [r3, #4]
    5b1e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b22:	005b      	lsls	r3, r3, #1
    5b24:	4413      	add	r3, r2
    5b26:	881b      	ldrh	r3, [r3, #0]
    5b28:	095b      	lsrs	r3, r3, #5
    5b2a:	b29b      	uxth	r3, r3
    5b2c:	461a      	mov	r2, r3
    5b2e:	4b3b      	ldr	r3, [pc, #236]	; (5c1c <Port_Ipw_Init_UnusedPins+0x26c>)
    5b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b34:	6999      	ldr	r1, [r3, #24]
    5b36:	9b01      	ldr	r3, [sp, #4]
    5b38:	685a      	ldr	r2, [r3, #4]
    5b3a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b3e:	005b      	lsls	r3, r3, #1
    5b40:	4413      	add	r3, r2
    5b42:	881b      	ldrh	r3, [r3, #0]
    5b44:	f003 031f 	and.w	r3, r3, #31
    5b48:	2201      	movs	r2, #1
    5b4a:	fa02 f303 	lsl.w	r3, r2, r3
    5b4e:	43da      	mvns	r2, r3
    5b50:	9b01      	ldr	r3, [sp, #4]
    5b52:	6858      	ldr	r0, [r3, #4]
    5b54:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b58:	005b      	lsls	r3, r3, #1
    5b5a:	4403      	add	r3, r0
    5b5c:	881b      	ldrh	r3, [r3, #0]
    5b5e:	095b      	lsrs	r3, r3, #5
    5b60:	b29b      	uxth	r3, r3
    5b62:	4618      	mov	r0, r3
    5b64:	4b2d      	ldr	r3, [pc, #180]	; (5c1c <Port_Ipw_Init_UnusedPins+0x26c>)
    5b66:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5b6a:	400a      	ands	r2, r1
    5b6c:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    5b6e:	9b02      	ldr	r3, [sp, #8]
    5b70:	2b03      	cmp	r3, #3
    5b72:	d127      	bne.n	5bc4 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5b74:	9b01      	ldr	r3, [sp, #4]
    5b76:	685a      	ldr	r2, [r3, #4]
    5b78:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b7c:	005b      	lsls	r3, r3, #1
    5b7e:	4413      	add	r3, r2
    5b80:	881b      	ldrh	r3, [r3, #0]
    5b82:	095b      	lsrs	r3, r3, #5
    5b84:	b29b      	uxth	r3, r3
    5b86:	461a      	mov	r2, r3
    5b88:	4b24      	ldr	r3, [pc, #144]	; (5c1c <Port_Ipw_Init_UnusedPins+0x26c>)
    5b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b8e:	6999      	ldr	r1, [r3, #24]
    5b90:	9b01      	ldr	r3, [sp, #4]
    5b92:	685a      	ldr	r2, [r3, #4]
    5b94:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b98:	005b      	lsls	r3, r3, #1
    5b9a:	4413      	add	r3, r2
    5b9c:	881b      	ldrh	r3, [r3, #0]
    5b9e:	f003 031f 	and.w	r3, r3, #31
    5ba2:	2201      	movs	r2, #1
    5ba4:	409a      	lsls	r2, r3
    5ba6:	9b01      	ldr	r3, [sp, #4]
    5ba8:	6858      	ldr	r0, [r3, #4]
    5baa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5bae:	005b      	lsls	r3, r3, #1
    5bb0:	4403      	add	r3, r0
    5bb2:	881b      	ldrh	r3, [r3, #0]
    5bb4:	095b      	lsrs	r3, r3, #5
    5bb6:	b29b      	uxth	r3, r3
    5bb8:	4618      	mov	r0, r3
    5bba:	4b18      	ldr	r3, [pc, #96]	; (5c1c <Port_Ipw_Init_UnusedPins+0x26c>)
    5bbc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5bc0:	430a      	orrs	r2, r1
    5bc2:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    5bc4:	f005 f8ea 	bl	ad9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    5bc8:	9b01      	ldr	r3, [sp, #4]
    5bca:	685a      	ldr	r2, [r3, #4]
    5bcc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5bd0:	005b      	lsls	r3, r3, #1
    5bd2:	4413      	add	r3, r2
    5bd4:	881b      	ldrh	r3, [r3, #0]
    5bd6:	095b      	lsrs	r3, r3, #5
    5bd8:	b29b      	uxth	r3, r3
    5bda:	461a      	mov	r2, r3
    5bdc:	4b10      	ldr	r3, [pc, #64]	; (5c20 <Port_Ipw_Init_UnusedPins+0x270>)
    5bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5be2:	9a01      	ldr	r2, [sp, #4]
    5be4:	6851      	ldr	r1, [r2, #4]
    5be6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5bea:	0052      	lsls	r2, r2, #1
    5bec:	440a      	add	r2, r1
    5bee:	8812      	ldrh	r2, [r2, #0]
    5bf0:	f002 021f 	and.w	r2, r2, #31
    5bf4:	9903      	ldr	r1, [sp, #12]
    5bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5bfa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5bfe:	3301      	adds	r3, #1
    5c00:	f8ad 3016 	strh.w	r3, [sp, #22]
    5c04:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5c08:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5c0c:	429a      	cmp	r2, r3
    5c0e:	f4ff aee7 	bcc.w	59e0 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    5c12:	bf00      	nop
    5c14:	bf00      	nop
    5c16:	b007      	add	sp, #28
    5c18:	f85d fb04 	ldr.w	pc, [sp], #4
    5c1c:	0000c1cc 	.word	0x0000c1cc
    5c20:	0000c1b8 	.word	0x0000c1b8

00005c24 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    5c24:	b500      	push	{lr}
    5c26:	b085      	sub	sp, #20
    5c28:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    5c2a:	9b01      	ldr	r3, [sp, #4]
    5c2c:	7c1b      	ldrb	r3, [r3, #16]
    5c2e:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5c32:	2300      	movs	r3, #0
    5c34:	f8ad 300e 	strh.w	r3, [sp, #14]
    5c38:	e035      	b.n	5ca6 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    5c3a:	9b01      	ldr	r3, [sp, #4]
    5c3c:	695a      	ldr	r2, [r3, #20]
    5c3e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5c42:	00db      	lsls	r3, r3, #3
    5c44:	4413      	add	r3, r2
    5c46:	781b      	ldrb	r3, [r3, #0]
    5c48:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    5c4c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5c50:	4a1f      	ldr	r2, [pc, #124]	; (5cd0 <Port_Ipw_Init+0xac>)
    5c52:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5c56:	9b01      	ldr	r3, [sp, #4]
    5c58:	695a      	ldr	r2, [r3, #20]
    5c5a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5c5e:	00db      	lsls	r3, r3, #3
    5c60:	4413      	add	r3, r2
    5c62:	4619      	mov	r1, r3
    5c64:	f7ff fe39 	bl	58da <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    5c68:	f005 fa06 	bl	b078 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    5c6c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5c70:	4a17      	ldr	r2, [pc, #92]	; (5cd0 <Port_Ipw_Init+0xac>)
    5c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c76:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    5c7a:	9b01      	ldr	r3, [sp, #4]
    5c7c:	695a      	ldr	r2, [r3, #20]
    5c7e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5c82:	00db      	lsls	r3, r3, #3
    5c84:	4413      	add	r3, r2
    5c86:	685a      	ldr	r2, [r3, #4]
    5c88:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5c8c:	4810      	ldr	r0, [pc, #64]	; (5cd0 <Port_Ipw_Init+0xac>)
    5c8e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5c92:	430a      	orrs	r2, r1
    5c94:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    5c98:	f005 fa1a 	bl	b0d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5c9c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5ca0:	3301      	adds	r3, #1
    5ca2:	f8ad 300e 	strh.w	r3, [sp, #14]
    5ca6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5caa:	b29b      	uxth	r3, r3
    5cac:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5cb0:	429a      	cmp	r2, r3
    5cb2:	d3c2      	bcc.n	5c3a <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    5cb4:	9b01      	ldr	r3, [sp, #4]
    5cb6:	6a1b      	ldr	r3, [r3, #32]
    5cb8:	4619      	mov	r1, r3
    5cba:	2004      	movs	r0, #4
    5cbc:	f7ff fd98 	bl	57f0 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    5cc0:	9801      	ldr	r0, [sp, #4]
    5cc2:	f7ff fe75 	bl	59b0 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    5cc6:	bf00      	nop
    5cc8:	b005      	add	sp, #20
    5cca:	f85d fb04 	ldr.w	pc, [sp], #4
    5cce:	bf00      	nop
    5cd0:	0000c1b8 	.word	0x0000c1b8

00005cd4 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    5cd4:	b500      	push	{lr}
    5cd6:	b085      	sub	sp, #20
    5cd8:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    5cda:	9b01      	ldr	r3, [sp, #4]
    5cdc:	881b      	ldrh	r3, [r3, #0]
    5cde:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5ce2:	2300      	movs	r3, #0
    5ce4:	f8ad 300e 	strh.w	r3, [sp, #14]
    5ce8:	e0d2      	b.n	5e90 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    5cea:	9b01      	ldr	r3, [sp, #4]
    5cec:	68d9      	ldr	r1, [r3, #12]
    5cee:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5cf2:	4613      	mov	r3, r2
    5cf4:	009b      	lsls	r3, r3, #2
    5cf6:	4413      	add	r3, r2
    5cf8:	009b      	lsls	r3, r3, #2
    5cfa:	440b      	add	r3, r1
    5cfc:	7c5b      	ldrb	r3, [r3, #17]
    5cfe:	f083 0301 	eor.w	r3, r3, #1
    5d02:	b2db      	uxtb	r3, r3
    5d04:	2b00      	cmp	r3, #0
    5d06:	f000 80be 	beq.w	5e86 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    5d0a:	9b01      	ldr	r3, [sp, #4]
    5d0c:	68d9      	ldr	r1, [r3, #12]
    5d0e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d12:	4613      	mov	r3, r2
    5d14:	009b      	lsls	r3, r3, #2
    5d16:	4413      	add	r3, r2
    5d18:	009b      	lsls	r3, r3, #2
    5d1a:	440b      	add	r3, r1
    5d1c:	7c1b      	ldrb	r3, [r3, #16]
    5d1e:	2b00      	cmp	r3, #0
    5d20:	f000 80b1 	beq.w	5e86 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    5d24:	9b01      	ldr	r3, [sp, #4]
    5d26:	68d9      	ldr	r1, [r3, #12]
    5d28:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d2c:	4613      	mov	r3, r2
    5d2e:	009b      	lsls	r3, r3, #2
    5d30:	4413      	add	r3, r2
    5d32:	009b      	lsls	r3, r3, #2
    5d34:	440b      	add	r3, r1
    5d36:	881b      	ldrh	r3, [r3, #0]
    5d38:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5d3c:	9b01      	ldr	r3, [sp, #4]
    5d3e:	68d9      	ldr	r1, [r3, #12]
    5d40:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d44:	4613      	mov	r3, r2
    5d46:	009b      	lsls	r3, r3, #2
    5d48:	4413      	add	r3, r2
    5d4a:	009b      	lsls	r3, r3, #2
    5d4c:	440b      	add	r3, r1
    5d4e:	68db      	ldr	r3, [r3, #12]
    5d50:	2b02      	cmp	r3, #2
    5d52:	d11d      	bne.n	5d90 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5d54:	f005 fad8 	bl	b308 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5d58:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d5c:	095b      	lsrs	r3, r3, #5
    5d5e:	b29b      	uxth	r3, r3
    5d60:	461a      	mov	r2, r3
    5d62:	4b51      	ldr	r3, [pc, #324]	; (5ea8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5d68:	6959      	ldr	r1, [r3, #20]
    5d6a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d6e:	f003 031f 	and.w	r3, r3, #31
    5d72:	2201      	movs	r2, #1
    5d74:	409a      	lsls	r2, r3
    5d76:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d7a:	095b      	lsrs	r3, r3, #5
    5d7c:	b29b      	uxth	r3, r3
    5d7e:	4618      	mov	r0, r3
    5d80:	4b49      	ldr	r3, [pc, #292]	; (5ea8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d82:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5d86:	430a      	orrs	r2, r1
    5d88:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5d8a:	f005 fae9 	bl	b360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    5d8e:	e07a      	b.n	5e86 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    5d90:	9b01      	ldr	r3, [sp, #4]
    5d92:	68d9      	ldr	r1, [r3, #12]
    5d94:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d98:	4613      	mov	r3, r2
    5d9a:	009b      	lsls	r3, r3, #2
    5d9c:	4413      	add	r3, r2
    5d9e:	009b      	lsls	r3, r3, #2
    5da0:	440b      	add	r3, r1
    5da2:	68db      	ldr	r3, [r3, #12]
    5da4:	2b01      	cmp	r3, #1
    5da6:	d00b      	beq.n	5dc0 <Port_Ipw_RefreshPortDirection+0xec>
    5da8:	9b01      	ldr	r3, [sp, #4]
    5daa:	68d9      	ldr	r1, [r3, #12]
    5dac:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5db0:	4613      	mov	r3, r2
    5db2:	009b      	lsls	r3, r3, #2
    5db4:	4413      	add	r3, r2
    5db6:	009b      	lsls	r3, r3, #2
    5db8:	440b      	add	r3, r1
    5dba:	68db      	ldr	r3, [r3, #12]
    5dbc:	2b03      	cmp	r3, #3
    5dbe:	d162      	bne.n	5e86 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5dc0:	f005 faa2 	bl	b308 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5dc4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5dc8:	095b      	lsrs	r3, r3, #5
    5dca:	b29b      	uxth	r3, r3
    5dcc:	461a      	mov	r2, r3
    5dce:	4b36      	ldr	r3, [pc, #216]	; (5ea8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5dd4:	6959      	ldr	r1, [r3, #20]
    5dd6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5dda:	f003 031f 	and.w	r3, r3, #31
    5dde:	2201      	movs	r2, #1
    5de0:	fa02 f303 	lsl.w	r3, r2, r3
    5de4:	43da      	mvns	r2, r3
    5de6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5dea:	095b      	lsrs	r3, r3, #5
    5dec:	b29b      	uxth	r3, r3
    5dee:	4618      	mov	r0, r3
    5df0:	4b2d      	ldr	r3, [pc, #180]	; (5ea8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5df2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5df6:	400a      	ands	r2, r1
    5df8:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5dfa:	f005 fab1 	bl	b360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    5dfe:	f005 fad5 	bl	b3ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5e02:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e06:	095b      	lsrs	r3, r3, #5
    5e08:	b29b      	uxth	r3, r3
    5e0a:	461a      	mov	r2, r3
    5e0c:	4b26      	ldr	r3, [pc, #152]	; (5ea8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5e12:	6999      	ldr	r1, [r3, #24]
    5e14:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e18:	f003 031f 	and.w	r3, r3, #31
    5e1c:	2201      	movs	r2, #1
    5e1e:	fa02 f303 	lsl.w	r3, r2, r3
    5e22:	43da      	mvns	r2, r3
    5e24:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e28:	095b      	lsrs	r3, r3, #5
    5e2a:	b29b      	uxth	r3, r3
    5e2c:	4618      	mov	r0, r3
    5e2e:	4b1e      	ldr	r3, [pc, #120]	; (5ea8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5e30:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5e34:	400a      	ands	r2, r1
    5e36:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5e38:	9b01      	ldr	r3, [sp, #4]
    5e3a:	68d9      	ldr	r1, [r3, #12]
    5e3c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5e40:	4613      	mov	r3, r2
    5e42:	009b      	lsls	r3, r3, #2
    5e44:	4413      	add	r3, r2
    5e46:	009b      	lsls	r3, r3, #2
    5e48:	440b      	add	r3, r1
    5e4a:	68db      	ldr	r3, [r3, #12]
    5e4c:	2b03      	cmp	r3, #3
    5e4e:	d118      	bne.n	5e82 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5e50:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e54:	095b      	lsrs	r3, r3, #5
    5e56:	b29b      	uxth	r3, r3
    5e58:	461a      	mov	r2, r3
    5e5a:	4b13      	ldr	r3, [pc, #76]	; (5ea8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5e60:	6999      	ldr	r1, [r3, #24]
    5e62:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e66:	f003 031f 	and.w	r3, r3, #31
    5e6a:	2201      	movs	r2, #1
    5e6c:	409a      	lsls	r2, r3
    5e6e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e72:	095b      	lsrs	r3, r3, #5
    5e74:	b29b      	uxth	r3, r3
    5e76:	4618      	mov	r0, r3
    5e78:	4b0b      	ldr	r3, [pc, #44]	; (5ea8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5e7a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5e7e:	430a      	orrs	r2, r1
    5e80:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    5e82:	f005 fabf 	bl	b404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5e86:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5e8a:	3301      	adds	r3, #1
    5e8c:	f8ad 300e 	strh.w	r3, [sp, #14]
    5e90:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5e94:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5e98:	429a      	cmp	r2, r3
    5e9a:	f4ff af26 	bcc.w	5cea <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    5e9e:	bf00      	nop
    5ea0:	bf00      	nop
    5ea2:	b005      	add	sp, #20
    5ea4:	f85d fb04 	ldr.w	pc, [sp], #4
    5ea8:	0000c1cc 	.word	0x0000c1cc

00005eac <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    5eac:	b500      	push	{lr}
    5eae:	b085      	sub	sp, #20
    5eb0:	4603      	mov	r3, r0
    5eb2:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5eb6:	2300      	movs	r3, #0
    5eb8:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    5ebc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5ec0:	4618      	mov	r0, r3
    5ec2:	f000 f871 	bl	5fa8 <Dio_Ipw_ReadChannel>
    5ec6:	4603      	mov	r3, r0
    5ec8:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    5ecc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5ed0:	4618      	mov	r0, r3
    5ed2:	b005      	add	sp, #20
    5ed4:	f85d fb04 	ldr.w	pc, [sp], #4

00005ed8 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    5ed8:	b500      	push	{lr}
    5eda:	b083      	sub	sp, #12
    5edc:	4603      	mov	r3, r0
    5ede:	460a      	mov	r2, r1
    5ee0:	f8ad 3006 	strh.w	r3, [sp, #6]
    5ee4:	4613      	mov	r3, r2
    5ee6:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    5eea:	f89d 2005 	ldrb.w	r2, [sp, #5]
    5eee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5ef2:	4611      	mov	r1, r2
    5ef4:	4618      	mov	r0, r3
    5ef6:	f000 f87d 	bl	5ff4 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    5efa:	bf00      	nop
    5efc:	b003      	add	sp, #12
    5efe:	f85d fb04 	ldr.w	pc, [sp], #4

00005f02 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    5f02:	b500      	push	{lr}
    5f04:	b085      	sub	sp, #20
    5f06:	4603      	mov	r3, r0
    5f08:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5f0c:	2300      	movs	r3, #0
    5f0e:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    5f12:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5f16:	4618      	mov	r0, r3
    5f18:	f000 f892 	bl	6040 <Dio_Ipw_FlipChannel>
    5f1c:	4603      	mov	r3, r0
    5f1e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    5f22:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5f26:	4618      	mov	r0, r3
    5f28:	b005      	add	sp, #20
    5f2a:	f85d fb04 	ldr.w	pc, [sp], #4

00005f2e <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    5f2e:	b500      	push	{lr}
    5f30:	b085      	sub	sp, #20
    5f32:	4603      	mov	r3, r0
    5f34:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5f38:	2300      	movs	r3, #0
    5f3a:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    5f3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5f40:	4618      	mov	r0, r3
    5f42:	f000 f8b3 	bl	60ac <Dio_Ipw_ReadPort>
    5f46:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    5f48:	9b03      	ldr	r3, [sp, #12]
}
    5f4a:	4618      	mov	r0, r3
    5f4c:	b005      	add	sp, #20
    5f4e:	f85d fb04 	ldr.w	pc, [sp], #4

00005f52 <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    5f52:	b500      	push	{lr}
    5f54:	b083      	sub	sp, #12
    5f56:	4603      	mov	r3, r0
    5f58:	9100      	str	r1, [sp, #0]
    5f5a:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    5f5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5f62:	9900      	ldr	r1, [sp, #0]
    5f64:	4618      	mov	r0, r3
    5f66:	f000 f8b9 	bl	60dc <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    5f6a:	bf00      	nop
    5f6c:	b003      	add	sp, #12
    5f6e:	f85d fb04 	ldr.w	pc, [sp], #4

00005f72 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    5f72:	b500      	push	{lr}
    5f74:	b085      	sub	sp, #20
    5f76:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5f78:	2300      	movs	r3, #0
    5f7a:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    5f7c:	9801      	ldr	r0, [sp, #4]
    5f7e:	f000 f8c5 	bl	610c <Dio_Ipw_ReadChannelGroup>
    5f82:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    5f84:	9b03      	ldr	r3, [sp, #12]
}
    5f86:	4618      	mov	r0, r3
    5f88:	b005      	add	sp, #20
    5f8a:	f85d fb04 	ldr.w	pc, [sp], #4

00005f8e <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    5f8e:	b500      	push	{lr}
    5f90:	b083      	sub	sp, #12
    5f92:	9001      	str	r0, [sp, #4]
    5f94:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    5f96:	9900      	ldr	r1, [sp, #0]
    5f98:	9801      	ldr	r0, [sp, #4]
    5f9a:	f000 f8d7 	bl	614c <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    5f9e:	bf00      	nop
    5fa0:	b003      	add	sp, #12
    5fa2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005fa8 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    5fa8:	b500      	push	{lr}
    5faa:	b087      	sub	sp, #28
    5fac:	4603      	mov	r3, r0
    5fae:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    5fb2:	2300      	movs	r3, #0
    5fb4:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5fb8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5fbc:	095b      	lsrs	r3, r3, #5
    5fbe:	b29b      	uxth	r3, r3
    5fc0:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    5fc2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5fc6:	f003 031f 	and.w	r3, r3, #31
    5fca:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    5fcc:	4a08      	ldr	r2, [pc, #32]	; (5ff0 <Dio_Ipw_ReadChannel+0x48>)
    5fce:	9b04      	ldr	r3, [sp, #16]
    5fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fd4:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    5fd6:	9903      	ldr	r1, [sp, #12]
    5fd8:	9802      	ldr	r0, [sp, #8]
    5fda:	f000 f940 	bl	625e <Gpio_Dio_Ip_ReadPin>
    5fde:	4603      	mov	r3, r0
    5fe0:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    5fe4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5fe8:	4618      	mov	r0, r3
    5fea:	b007      	add	sp, #28
    5fec:	f85d fb04 	ldr.w	pc, [sp], #4
    5ff0:	1fff8b24 	.word	0x1fff8b24

00005ff4 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    5ff4:	b500      	push	{lr}
    5ff6:	b087      	sub	sp, #28
    5ff8:	4603      	mov	r3, r0
    5ffa:	460a      	mov	r2, r1
    5ffc:	f8ad 3006 	strh.w	r3, [sp, #6]
    6000:	4613      	mov	r3, r2
    6002:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6006:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    600a:	095b      	lsrs	r3, r3, #5
    600c:	b29b      	uxth	r3, r3
    600e:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6010:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6014:	f003 031f 	and.w	r3, r3, #31
    6018:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    601a:	4a08      	ldr	r2, [pc, #32]	; (603c <Dio_Ipw_WriteChannel+0x48>)
    601c:	9b05      	ldr	r3, [sp, #20]
    601e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6022:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    6024:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6028:	461a      	mov	r2, r3
    602a:	9904      	ldr	r1, [sp, #16]
    602c:	9803      	ldr	r0, [sp, #12]
    602e:	f000 f8b7 	bl	61a0 <Gpio_Dio_Ip_WritePin>
}
    6032:	bf00      	nop
    6034:	b007      	add	sp, #28
    6036:	f85d fb04 	ldr.w	pc, [sp], #4
    603a:	bf00      	nop
    603c:	1fff8b24 	.word	0x1fff8b24

00006040 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6040:	b500      	push	{lr}
    6042:	b089      	sub	sp, #36	; 0x24
    6044:	4603      	mov	r3, r0
    6046:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    604a:	2300      	movs	r3, #0
    604c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6050:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6054:	095b      	lsrs	r3, r3, #5
    6056:	b29b      	uxth	r3, r3
    6058:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    605a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    605e:	f003 031f 	and.w	r3, r3, #31
    6062:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6064:	4a10      	ldr	r2, [pc, #64]	; (60a8 <Dio_Ipw_FlipChannel+0x68>)
    6066:	9b06      	ldr	r3, [sp, #24]
    6068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    606c:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    606e:	2201      	movs	r2, #1
    6070:	9b05      	ldr	r3, [sp, #20]
    6072:	fa02 f303 	lsl.w	r3, r2, r3
    6076:	4619      	mov	r1, r3
    6078:	9804      	ldr	r0, [sp, #16]
    607a:	f000 f8dc 	bl	6236 <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    607e:	9804      	ldr	r0, [sp, #16]
    6080:	f000 f8bc 	bl	61fc <Gpio_Dio_Ip_GetPinsOutput>
    6084:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    6086:	2201      	movs	r2, #1
    6088:	9b05      	ldr	r3, [sp, #20]
    608a:	409a      	lsls	r2, r3
    608c:	9b03      	ldr	r3, [sp, #12]
    608e:	401a      	ands	r2, r3
    6090:	9b05      	ldr	r3, [sp, #20]
    6092:	fa22 f303 	lsr.w	r3, r2, r3
    6096:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    609a:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    609e:	4618      	mov	r0, r3
    60a0:	b009      	add	sp, #36	; 0x24
    60a2:	f85d fb04 	ldr.w	pc, [sp], #4
    60a6:	bf00      	nop
    60a8:	1fff8b24 	.word	0x1fff8b24

000060ac <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    60ac:	b500      	push	{lr}
    60ae:	b085      	sub	sp, #20
    60b0:	4603      	mov	r3, r0
    60b2:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    60b6:	2300      	movs	r3, #0
    60b8:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    60ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    60be:	4a06      	ldr	r2, [pc, #24]	; (60d8 <Dio_Ipw_ReadPort+0x2c>)
    60c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60c4:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    60c6:	9802      	ldr	r0, [sp, #8]
    60c8:	f000 f8be 	bl	6248 <Gpio_Dio_Ip_ReadPins>
    60cc:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    60ce:	9b03      	ldr	r3, [sp, #12]
}
    60d0:	4618      	mov	r0, r3
    60d2:	b005      	add	sp, #20
    60d4:	f85d fb04 	ldr.w	pc, [sp], #4
    60d8:	1fff8b24 	.word	0x1fff8b24

000060dc <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    60dc:	b500      	push	{lr}
    60de:	b085      	sub	sp, #20
    60e0:	4603      	mov	r3, r0
    60e2:	9100      	str	r1, [sp, #0]
    60e4:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    60e8:	9b00      	ldr	r3, [sp, #0]
    60ea:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    60ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    60f0:	4a05      	ldr	r2, [pc, #20]	; (6108 <Dio_Ipw_WritePort+0x2c>)
    60f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60f6:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    60f8:	9903      	ldr	r1, [sp, #12]
    60fa:	9802      	ldr	r0, [sp, #8]
    60fc:	f000 f875 	bl	61ea <Gpio_Dio_Ip_WritePins>
}
    6100:	bf00      	nop
    6102:	b005      	add	sp, #20
    6104:	f85d fb04 	ldr.w	pc, [sp], #4
    6108:	1fff8b24 	.word	0x1fff8b24

0000610c <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    610c:	b500      	push	{lr}
    610e:	b087      	sub	sp, #28
    6110:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6112:	2300      	movs	r3, #0
    6114:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6116:	9b01      	ldr	r3, [sp, #4]
    6118:	781b      	ldrb	r3, [r3, #0]
    611a:	461a      	mov	r2, r3
    611c:	4b0a      	ldr	r3, [pc, #40]	; (6148 <Dio_Ipw_ReadChannelGroup+0x3c>)
    611e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6122:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6124:	9804      	ldr	r0, [sp, #16]
    6126:	f000 f88f 	bl	6248 <Gpio_Dio_Ip_ReadPins>
    612a:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    612c:	9b01      	ldr	r3, [sp, #4]
    612e:	685a      	ldr	r2, [r3, #4]
    6130:	9b03      	ldr	r3, [sp, #12]
    6132:	4013      	ands	r3, r2
    6134:	9a01      	ldr	r2, [sp, #4]
    6136:	7852      	ldrb	r2, [r2, #1]
    6138:	40d3      	lsrs	r3, r2
    613a:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    613c:	9b05      	ldr	r3, [sp, #20]
}
    613e:	4618      	mov	r0, r3
    6140:	b007      	add	sp, #28
    6142:	f85d fb04 	ldr.w	pc, [sp], #4
    6146:	bf00      	nop
    6148:	1fff8b24 	.word	0x1fff8b24

0000614c <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    614c:	b500      	push	{lr}
    614e:	b087      	sub	sp, #28
    6150:	9001      	str	r0, [sp, #4]
    6152:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6154:	9b01      	ldr	r3, [sp, #4]
    6156:	781b      	ldrb	r3, [r3, #0]
    6158:	461a      	mov	r2, r3
    615a:	4b10      	ldr	r3, [pc, #64]	; (619c <Dio_Ipw_WriteChannelGroup+0x50>)
    615c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6160:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    6162:	9b01      	ldr	r3, [sp, #4]
    6164:	785b      	ldrb	r3, [r3, #1]
    6166:	461a      	mov	r2, r3
    6168:	9b00      	ldr	r3, [sp, #0]
    616a:	fa03 f202 	lsl.w	r2, r3, r2
    616e:	9b01      	ldr	r3, [sp, #4]
    6170:	685b      	ldr	r3, [r3, #4]
    6172:	4013      	ands	r3, r2
    6174:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    6176:	9904      	ldr	r1, [sp, #16]
    6178:	9805      	ldr	r0, [sp, #20]
    617a:	f000 f84a 	bl	6212 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    617e:	9b04      	ldr	r3, [sp, #16]
    6180:	43da      	mvns	r2, r3
    6182:	9b01      	ldr	r3, [sp, #4]
    6184:	685b      	ldr	r3, [r3, #4]
    6186:	4013      	ands	r3, r2
    6188:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    618a:	9903      	ldr	r1, [sp, #12]
    618c:	9805      	ldr	r0, [sp, #20]
    618e:	f000 f849 	bl	6224 <Gpio_Dio_Ip_ClearPins>

}
    6192:	bf00      	nop
    6194:	b007      	add	sp, #28
    6196:	f85d fb04 	ldr.w	pc, [sp], #4
    619a:	bf00      	nop
    619c:	1fff8b24 	.word	0x1fff8b24

000061a0 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    61a0:	b500      	push	{lr}
    61a2:	b087      	sub	sp, #28
    61a4:	9003      	str	r0, [sp, #12]
    61a6:	9102      	str	r1, [sp, #8]
    61a8:	4613      	mov	r3, r2
    61aa:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    61ae:	f002 f853 	bl	8258 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    61b2:	9b03      	ldr	r3, [sp, #12]
    61b4:	681b      	ldr	r3, [r3, #0]
    61b6:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    61b8:	2201      	movs	r2, #1
    61ba:	9b02      	ldr	r3, [sp, #8]
    61bc:	fa02 f303 	lsl.w	r3, r2, r3
    61c0:	43db      	mvns	r3, r3
    61c2:	9a05      	ldr	r2, [sp, #20]
    61c4:	4013      	ands	r3, r2
    61c6:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    61c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    61cc:	9b02      	ldr	r3, [sp, #8]
    61ce:	fa02 f303 	lsl.w	r3, r2, r3
    61d2:	9a05      	ldr	r2, [sp, #20]
    61d4:	4313      	orrs	r3, r2
    61d6:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    61d8:	9b03      	ldr	r3, [sp, #12]
    61da:	9a05      	ldr	r2, [sp, #20]
    61dc:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    61de:	f002 f867 	bl	82b0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    61e2:	bf00      	nop
    61e4:	b007      	add	sp, #28
    61e6:	f85d fb04 	ldr.w	pc, [sp], #4

000061ea <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    61ea:	b082      	sub	sp, #8
    61ec:	9001      	str	r0, [sp, #4]
    61ee:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    61f0:	9b01      	ldr	r3, [sp, #4]
    61f2:	9a00      	ldr	r2, [sp, #0]
    61f4:	601a      	str	r2, [r3, #0]
}
    61f6:	bf00      	nop
    61f8:	b002      	add	sp, #8
    61fa:	4770      	bx	lr

000061fc <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    61fc:	b084      	sub	sp, #16
    61fe:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6200:	2300      	movs	r3, #0
    6202:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    6204:	9b01      	ldr	r3, [sp, #4]
    6206:	681b      	ldr	r3, [r3, #0]
    6208:	9303      	str	r3, [sp, #12]
    return returnValue;
    620a:	9b03      	ldr	r3, [sp, #12]
}
    620c:	4618      	mov	r0, r3
    620e:	b004      	add	sp, #16
    6210:	4770      	bx	lr

00006212 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6212:	b082      	sub	sp, #8
    6214:	9001      	str	r0, [sp, #4]
    6216:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    6218:	9b01      	ldr	r3, [sp, #4]
    621a:	9a00      	ldr	r2, [sp, #0]
    621c:	605a      	str	r2, [r3, #4]
}
    621e:	bf00      	nop
    6220:	b002      	add	sp, #8
    6222:	4770      	bx	lr

00006224 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6224:	b082      	sub	sp, #8
    6226:	9001      	str	r0, [sp, #4]
    6228:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    622a:	9b01      	ldr	r3, [sp, #4]
    622c:	9a00      	ldr	r2, [sp, #0]
    622e:	609a      	str	r2, [r3, #8]
}
    6230:	bf00      	nop
    6232:	b002      	add	sp, #8
    6234:	4770      	bx	lr

00006236 <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6236:	b082      	sub	sp, #8
    6238:	9001      	str	r0, [sp, #4]
    623a:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    623c:	9b01      	ldr	r3, [sp, #4]
    623e:	9a00      	ldr	r2, [sp, #0]
    6240:	60da      	str	r2, [r3, #12]
}
    6242:	bf00      	nop
    6244:	b002      	add	sp, #8
    6246:	4770      	bx	lr

00006248 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    6248:	b084      	sub	sp, #16
    624a:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    624c:	2300      	movs	r3, #0
    624e:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    6250:	9b01      	ldr	r3, [sp, #4]
    6252:	691b      	ldr	r3, [r3, #16]
    6254:	9303      	str	r3, [sp, #12]
    return returnValue;
    6256:	9b03      	ldr	r3, [sp, #12]
}
    6258:	4618      	mov	r0, r3
    625a:	b004      	add	sp, #16
    625c:	4770      	bx	lr

0000625e <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    625e:	b084      	sub	sp, #16
    6260:	9001      	str	r0, [sp, #4]
    6262:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    6264:	2300      	movs	r3, #0
    6266:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    626a:	9b01      	ldr	r3, [sp, #4]
    626c:	691a      	ldr	r2, [r3, #16]
    626e:	2101      	movs	r1, #1
    6270:	9b00      	ldr	r3, [sp, #0]
    6272:	fa01 f303 	lsl.w	r3, r1, r3
    6276:	401a      	ands	r2, r3
    6278:	9b00      	ldr	r3, [sp, #0]
    627a:	fa22 f303 	lsr.w	r3, r2, r3
    627e:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    6282:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6286:	4618      	mov	r0, r3
    6288:	b004      	add	sp, #16
    628a:	4770      	bx	lr

0000628c <Ftm_Gpt_Ip_GetChInterruptStatusFlag>:
 *
 * @return  TRUE if a channel (n) event has occurred, FALSE otherwise
 * @pre     The driver needs to be initialized.
 */
static inline boolean Ftm_Gpt_Ip_GetChInterruptStatusFlag(uint8 instance, uint8 channel)
{
    628c:	b082      	sub	sp, #8
    628e:	4603      	mov	r3, r0
    6290:	460a      	mov	r2, r1
    6292:	f88d 3007 	strb.w	r3, [sp, #7]
    6296:	4613      	mov	r3, r2
    6298:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->CONTROLS[channel].CSC & FTM_CSC_CHF_MASK)) ? TRUE : FALSE;
    629c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62a0:	4a09      	ldr	r2, [pc, #36]	; (62c8 <Ftm_Gpt_Ip_GetChInterruptStatusFlag+0x3c>)
    62a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    62a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    62aa:	3301      	adds	r3, #1
    62ac:	00db      	lsls	r3, r3, #3
    62ae:	4413      	add	r3, r2
    62b0:	685b      	ldr	r3, [r3, #4]
    62b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    62b6:	2b00      	cmp	r3, #0
    62b8:	bf14      	ite	ne
    62ba:	2301      	movne	r3, #1
    62bc:	2300      	moveq	r3, #0
    62be:	b2db      	uxtb	r3, r3
}
    62c0:	4618      	mov	r0, r3
    62c2:	b002      	add	sp, #8
    62c4:	4770      	bx	lr
    62c6:	bf00      	nop
    62c8:	0000c1e0 	.word	0x0000c1e0

000062cc <Ftm_Gpt_Ip_GetCntValue>:
*
* @return   current counter value
*
*/
static inline uint32 Ftm_Gpt_Ip_GetCntValue(uint8 instance)
{
    62cc:	b082      	sub	sp, #8
    62ce:	4603      	mov	r3, r0
    62d0:	f88d 3007 	strb.w	r3, [sp, #7]
    return ftmGptBase[instance]->CNT;
    62d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62d8:	4a03      	ldr	r2, [pc, #12]	; (62e8 <Ftm_Gpt_Ip_GetCntValue+0x1c>)
    62da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62de:	685b      	ldr	r3, [r3, #4]
}
    62e0:	4618      	mov	r0, r3
    62e2:	b002      	add	sp, #8
    62e4:	4770      	bx	lr
    62e6:	bf00      	nop
    62e8:	0000c1e0 	.word	0x0000c1e0

000062ec <Ftm_Gpt_Ip_GetCompareValue>:
 *
 * @return      compare value (CV)
 *
 */
static inline uint32 Ftm_Gpt_Ip_GetCompareValue(uint8 instance, uint8 channel)
{
    62ec:	b082      	sub	sp, #8
    62ee:	4603      	mov	r3, r0
    62f0:	460a      	mov	r2, r1
    62f2:	f88d 3007 	strb.w	r3, [sp, #7]
    62f6:	4613      	mov	r3, r2
    62f8:	f88d 3006 	strb.w	r3, [sp, #6]
    return ftmGptBase[instance]->CONTROLS[channel].CV;
    62fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6300:	4a05      	ldr	r2, [pc, #20]	; (6318 <Ftm_Gpt_Ip_GetCompareValue+0x2c>)
    6302:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6306:	f89d 3006 	ldrb.w	r3, [sp, #6]
    630a:	3301      	adds	r3, #1
    630c:	00db      	lsls	r3, r3, #3
    630e:	4413      	add	r3, r2
    6310:	689b      	ldr	r3, [r3, #8]
}
    6312:	4618      	mov	r0, r3
    6314:	b002      	add	sp, #8
    6316:	4770      	bx	lr
    6318:	0000c1e0 	.word	0x0000c1e0

0000631c <Ftm_Gpt_Ip_SetFreezeBits>:
 *
 * @return      void
 *
 */
static inline void Ftm_Gpt_Ip_SetFreezeBits(uint8 instance, boolean freezeBits)
{
    631c:	b500      	push	{lr}
    631e:	b085      	sub	sp, #20
    6320:	4603      	mov	r3, r0
    6322:	460a      	mov	r2, r1
    6324:	f88d 3007 	strb.w	r3, [sp, #7]
    6328:	4613      	mov	r3, r2
    632a:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 freezeVal = (TRUE == freezeBits) ? 0UL : 3UL;
    632e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6332:	2b00      	cmp	r3, #0
    6334:	d001      	beq.n	633a <Ftm_Gpt_Ip_SetFreezeBits+0x1e>
    6336:	2300      	movs	r3, #0
    6338:	e000      	b.n	633c <Ftm_Gpt_Ip_SetFreezeBits+0x20>
    633a:	2303      	movs	r3, #3
    633c:	9303      	str	r3, [sp, #12]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17();
    633e:	f002 fb63 	bl	8a08 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17>
    ftmGptBase[instance]->CONF = (ftmGptBase[instance]->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(freezeVal);
    6342:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6346:	4a0c      	ldr	r2, [pc, #48]	; (6378 <Ftm_Gpt_Ip_SetFreezeBits+0x5c>)
    6348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    634c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    6350:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
    6354:	9b03      	ldr	r3, [sp, #12]
    6356:	019b      	lsls	r3, r3, #6
    6358:	b2da      	uxtb	r2, r3
    635a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    635e:	4806      	ldr	r0, [pc, #24]	; (6378 <Ftm_Gpt_Ip_SetFreezeBits+0x5c>)
    6360:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6364:	430a      	orrs	r2, r1
    6366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17();
    636a:	f002 fb79 	bl	8a60 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17>
}
    636e:	bf00      	nop
    6370:	b005      	add	sp, #20
    6372:	f85d fb04 	ldr.w	pc, [sp], #4
    6376:	bf00      	nop
    6378:	0000c1e0 	.word	0x0000c1e0

0000637c <Ftm_Gpt_Ip_SetCounterInitVal>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetCounterInitVal(uint8 instance, uint16 value)
{
    637c:	b082      	sub	sp, #8
    637e:	4603      	mov	r3, r0
    6380:	460a      	mov	r2, r1
    6382:	f88d 3007 	strb.w	r3, [sp, #7]
    6386:	4613      	mov	r3, r2
    6388:	f8ad 3004 	strh.w	r3, [sp, #4]
    ftmGptBase[instance]->CNTIN = (uint32)(((uint32)value << FTM_CNTIN_INIT_SHIFT) & FTM_CNTIN_INIT_MASK);
    638c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6390:	4a04      	ldr	r2, [pc, #16]	; (63a4 <Ftm_Gpt_Ip_SetCounterInitVal+0x28>)
    6392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6396:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    639a:	64da      	str	r2, [r3, #76]	; 0x4c
}
    639c:	bf00      	nop
    639e:	b002      	add	sp, #8
    63a0:	4770      	bx	lr
    63a2:	bf00      	nop
    63a4:	0000c1e0 	.word	0x0000c1e0

000063a8 <Ftm_Gpt_Ip_SetCounter>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetCounter(uint8 instance, uint16 value)
{
    63a8:	b082      	sub	sp, #8
    63aa:	4603      	mov	r3, r0
    63ac:	460a      	mov	r2, r1
    63ae:	f88d 3007 	strb.w	r3, [sp, #7]
    63b2:	4613      	mov	r3, r2
    63b4:	f8ad 3004 	strh.w	r3, [sp, #4]
    ftmGptBase[instance]->CNT = (uint32)(((uint32)value << FTM_CNT_COUNT_SHIFT) & FTM_CNT_COUNT_MASK);
    63b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    63bc:	4a04      	ldr	r2, [pc, #16]	; (63d0 <Ftm_Gpt_Ip_SetCounter+0x28>)
    63be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63c2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    63c6:	605a      	str	r2, [r3, #4]
}
    63c8:	bf00      	nop
    63ca:	b002      	add	sp, #8
    63cc:	4770      	bx	lr
    63ce:	bf00      	nop
    63d0:	0000c1e0 	.word	0x0000c1e0

000063d4 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>:
 *
 * @return      void
 * @pre         The driver needs to be initialized.
 */
static inline void Ftm_Gpt_Ip_ClearChInterruptStatusFlag(uint8 instance, uint8 channel)
{
    63d4:	b082      	sub	sp, #8
    63d6:	4603      	mov	r3, r0
    63d8:	460a      	mov	r2, r1
    63da:	f88d 3007 	strb.w	r3, [sp, #7]
    63de:	4613      	mov	r3, r2
    63e0:	f88d 3006 	strb.w	r3, [sp, #6]
    ftmGptBase[instance]-> CONTROLS[channel].CSC &= ~(FTM_CSC_CHF_MASK);
    63e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    63e8:	4a0c      	ldr	r2, [pc, #48]	; (641c <Ftm_Gpt_Ip_ClearChInterruptStatusFlag+0x48>)
    63ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    63ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    63f2:	3301      	adds	r3, #1
    63f4:	00db      	lsls	r3, r3, #3
    63f6:	4413      	add	r3, r2
    63f8:	685a      	ldr	r2, [r3, #4]
    63fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    63fe:	4907      	ldr	r1, [pc, #28]	; (641c <Ftm_Gpt_Ip_ClearChInterruptStatusFlag+0x48>)
    6400:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    6404:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    640c:	3301      	adds	r3, #1
    640e:	00db      	lsls	r3, r3, #3
    6410:	440b      	add	r3, r1
    6412:	605a      	str	r2, [r3, #4]
}
    6414:	bf00      	nop
    6416:	b002      	add	sp, #8
    6418:	4770      	bx	lr
    641a:	bf00      	nop
    641c:	0000c1e0 	.word	0x0000c1e0

00006420 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>:
 * @param[in]   aboEn - Enables the FTM channel(n) interrupt
 *              - True : Enable the FTM channel(n) interrupt.
 *              - False: Disable the FTM channel(n) interrupt.
 */
static inline void Ftm_Gpt_Ip_SetChannelEnableInterrupt(uint8 instance, uint8 channel, boolean aboEn)
{
    6420:	b082      	sub	sp, #8
    6422:	4603      	mov	r3, r0
    6424:	f88d 3007 	strb.w	r3, [sp, #7]
    6428:	460b      	mov	r3, r1
    642a:	f88d 3006 	strb.w	r3, [sp, #6]
    642e:	4613      	mov	r3, r2
    6430:	f88d 3005 	strb.w	r3, [sp, #5]
    ftmGptBase[instance]-> CONTROLS[channel].CSC = (ftmGptBase[instance]-> CONTROLS[channel].CSC & ~(FTM_CSC_CHIE_MASK)) | FTM_CSC_CHIE((TRUE == aboEn) ? 1UL : 0UL);
    6434:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6438:	4a10      	ldr	r2, [pc, #64]	; (647c <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x5c>)
    643a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    643e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6442:	3301      	adds	r3, #1
    6444:	00db      	lsls	r3, r3, #3
    6446:	4413      	add	r3, r2
    6448:	685b      	ldr	r3, [r3, #4]
    644a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    644e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6452:	2b00      	cmp	r3, #0
    6454:	d001      	beq.n	645a <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x3a>
    6456:	2040      	movs	r0, #64	; 0x40
    6458:	e000      	b.n	645c <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x3c>
    645a:	2000      	movs	r0, #0
    645c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6460:	4906      	ldr	r1, [pc, #24]	; (647c <Ftm_Gpt_Ip_SetChannelEnableInterrupt+0x5c>)
    6462:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    6466:	f89d 3006 	ldrb.w	r3, [sp, #6]
    646a:	4302      	orrs	r2, r0
    646c:	3301      	adds	r3, #1
    646e:	00db      	lsls	r3, r3, #3
    6470:	440b      	add	r3, r1
    6472:	605a      	str	r2, [r3, #4]
}
    6474:	bf00      	nop
    6476:	b002      	add	sp, #8
    6478:	4770      	bx	lr
    647a:	bf00      	nop
    647c:	0000c1e0 	.word	0x0000c1e0

00006480 <Ftm_Gpt_Ip_SetClockSource>:
 * @param[in]       instance    FTM hardware instance number
 *
 * @return      void
 */
static inline void Ftm_Gpt_Ip_SetClockSource(uint8 instance, Ftm_Gpt_Ip_ClockSource clocksource)
{
    6480:	b500      	push	{lr}
    6482:	b083      	sub	sp, #12
    6484:	4603      	mov	r3, r0
    6486:	9100      	str	r1, [sp, #0]
    6488:	f88d 3007 	strb.w	r3, [sp, #7]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21();
    648c:	f002 fb0e 	bl	8aac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21>
    ftmGptBase[instance]->SC = (ftmGptBase[instance]->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(clocksource);
    6490:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6494:	4a0b      	ldr	r2, [pc, #44]	; (64c4 <Ftm_Gpt_Ip_SetClockSource+0x44>)
    6496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    649a:	681b      	ldr	r3, [r3, #0]
    649c:	f023 0118 	bic.w	r1, r3, #24
    64a0:	9b00      	ldr	r3, [sp, #0]
    64a2:	00db      	lsls	r3, r3, #3
    64a4:	f003 0218 	and.w	r2, r3, #24
    64a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64ac:	4805      	ldr	r0, [pc, #20]	; (64c4 <Ftm_Gpt_Ip_SetClockSource+0x44>)
    64ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    64b2:	430a      	orrs	r2, r1
    64b4:	601a      	str	r2, [r3, #0]
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21();
    64b6:	f002 fb25 	bl	8b04 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21>
}
    64ba:	bf00      	nop
    64bc:	b003      	add	sp, #12
    64be:	f85d fb04 	ldr.w	pc, [sp], #4
    64c2:	bf00      	nop
    64c4:	0000c1e0 	.word	0x0000c1e0

000064c8 <Ftm_Gpt_Ip_SetPrescaler>:
 *
 * @return        void
 *
 */
static inline void Ftm_Gpt_Ip_SetPrescaler(uint8 instance, uint8 prescalerValue)
{
    64c8:	b500      	push	{lr}
    64ca:	b083      	sub	sp, #12
    64cc:	4603      	mov	r3, r0
    64ce:	460a      	mov	r2, r1
    64d0:	f88d 3007 	strb.w	r3, [sp, #7]
    64d4:	4613      	mov	r3, r2
    64d6:	f88d 3006 	strb.w	r3, [sp, #6]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22();
    64da:	f002 fb39 	bl	8b50 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22>
    ftmGptBase[instance]->SC = (ftmGptBase[instance]->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(prescalerValue);
    64de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64e2:	4a0b      	ldr	r2, [pc, #44]	; (6510 <Ftm_Gpt_Ip_SetPrescaler+0x48>)
    64e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64e8:	681b      	ldr	r3, [r3, #0]
    64ea:	f023 0107 	bic.w	r1, r3, #7
    64ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    64f2:	f003 0207 	and.w	r2, r3, #7
    64f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64fa:	4805      	ldr	r0, [pc, #20]	; (6510 <Ftm_Gpt_Ip_SetPrescaler+0x48>)
    64fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6500:	430a      	orrs	r2, r1
    6502:	601a      	str	r2, [r3, #0]
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22();
    6504:	f002 fb50 	bl	8ba8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22>
}
    6508:	bf00      	nop
    650a:	b003      	add	sp, #12
    650c:	f85d fb04 	ldr.w	pc, [sp], #4
    6510:	0000c1e0 	.word	0x0000c1e0

00006514 <Ftm_Gpt_Ip_SetEnFtmModule>:
 * @param[in]   enable
 *
 * @return      void
 */
static inline void Ftm_Gpt_Ip_SetEnFtmModule(uint8 instance, boolean enable)
{
    6514:	b500      	push	{lr}
    6516:	b083      	sub	sp, #12
    6518:	4603      	mov	r3, r0
    651a:	460a      	mov	r2, r1
    651c:	f88d 3007 	strb.w	r3, [sp, #7]
    6520:	4613      	mov	r3, r2
    6522:	f88d 3006 	strb.w	r3, [sp, #6]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23();
    6526:	f002 fb65 	bl	8bf4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23>
    {
        ftmGptBase[instance]->MODE &= ~(FTM_MODE_FTMEN_MASK);
    652a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    652e:	4a13      	ldr	r2, [pc, #76]	; (657c <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    6530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    6536:	f89d 3007 	ldrb.w	r3, [sp, #7]
    653a:	4910      	ldr	r1, [pc, #64]	; (657c <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    653c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    6540:	f022 0201 	bic.w	r2, r2, #1
    6544:	655a      	str	r2, [r3, #84]	; 0x54
        ftmGptBase[instance]->MODE |= FTM_MODE_FTMEN(enable ? 1UL : 0UL);
    6546:	f89d 3007 	ldrb.w	r3, [sp, #7]
    654a:	4a0c      	ldr	r2, [pc, #48]	; (657c <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    654c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6550:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    6552:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6556:	2b00      	cmp	r3, #0
    6558:	d001      	beq.n	655e <Ftm_Gpt_Ip_SetEnFtmModule+0x4a>
    655a:	2101      	movs	r1, #1
    655c:	e000      	b.n	6560 <Ftm_Gpt_Ip_SetEnFtmModule+0x4c>
    655e:	2100      	movs	r1, #0
    6560:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6564:	4805      	ldr	r0, [pc, #20]	; (657c <Ftm_Gpt_Ip_SetEnFtmModule+0x68>)
    6566:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    656a:	430a      	orrs	r2, r1
    656c:	655a      	str	r2, [r3, #84]	; 0x54
    }
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23();
    656e:	f002 fb6d 	bl	8c4c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23>
}
    6572:	bf00      	nop
    6574:	b003      	add	sp, #12
    6576:	f85d fb04 	ldr.w	pc, [sp], #4
    657a:	bf00      	nop
    657c:	0000c1e0 	.word	0x0000c1e0

00006580 <Ftm_Gpt_Ip_SetCompareValue>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetCompareValue(uint8 instance, uint8 channel, uint32 value)
{
    6580:	b082      	sub	sp, #8
    6582:	4603      	mov	r3, r0
    6584:	9200      	str	r2, [sp, #0]
    6586:	f88d 3007 	strb.w	r3, [sp, #7]
    658a:	460b      	mov	r3, r1
    658c:	f88d 3006 	strb.w	r3, [sp, #6]
    ftmGptBase[instance]-> CONTROLS[channel].CV = (uint32)((((uint32)value << FTM_CV_VAL_SHIFT) & FTM_CV_VAL_MASK));
    6590:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6594:	4a06      	ldr	r2, [pc, #24]	; (65b0 <Ftm_Gpt_Ip_SetCompareValue+0x30>)
    6596:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    659a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    659e:	9a00      	ldr	r2, [sp, #0]
    65a0:	b292      	uxth	r2, r2
    65a2:	3301      	adds	r3, #1
    65a4:	00db      	lsls	r3, r3, #3
    65a6:	440b      	add	r3, r1
    65a8:	609a      	str	r2, [r3, #8]

}
    65aa:	bf00      	nop
    65ac:	b002      	add	sp, #8
    65ae:	4770      	bx	lr
    65b0:	0000c1e0 	.word	0x0000c1e0

000065b4 <Ftm_Gpt_Ip_WriteModulo>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_WriteModulo(uint8 instance, uint16 value)
{
    65b4:	b082      	sub	sp, #8
    65b6:	4603      	mov	r3, r0
    65b8:	460a      	mov	r2, r1
    65ba:	f88d 3007 	strb.w	r3, [sp, #7]
    65be:	4613      	mov	r3, r2
    65c0:	f8ad 3004 	strh.w	r3, [sp, #4]
    ftmGptBase[instance]-> MOD = value;
    65c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65c8:	4a04      	ldr	r2, [pc, #16]	; (65dc <Ftm_Gpt_Ip_WriteModulo+0x28>)
    65ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65ce:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    65d2:	609a      	str	r2, [r3, #8]

}
    65d4:	bf00      	nop
    65d6:	b002      	add	sp, #8
    65d8:	4770      	bx	lr
    65da:	bf00      	nop
    65dc:	0000c1e0 	.word	0x0000c1e0

000065e0 <Ftm_Gpt_Ip_ModeSelectA>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_ModeSelectA(uint8 instance, uint8 channel, boolean enable)
{
    65e0:	b500      	push	{lr}
    65e2:	b083      	sub	sp, #12
    65e4:	4603      	mov	r3, r0
    65e6:	f88d 3007 	strb.w	r3, [sp, #7]
    65ea:	460b      	mov	r3, r1
    65ec:	f88d 3006 	strb.w	r3, [sp, #6]
    65f0:	4613      	mov	r3, r2
    65f2:	f88d 3005 	strb.w	r3, [sp, #5]
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24();
    65f6:	f002 fb4f 	bl	8c98 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24>
    if (TRUE == enable)
    65fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
    65fe:	2b00      	cmp	r3, #0
    6600:	d018      	beq.n	6634 <Ftm_Gpt_Ip_ModeSelectA+0x54>
    {
        ftmGptBase[instance]->CONTROLS[channel].CSC |= FTM_CSC_MSA_MASK;
    6602:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6606:	4a1a      	ldr	r2, [pc, #104]	; (6670 <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    6608:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    660c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6610:	3301      	adds	r3, #1
    6612:	00db      	lsls	r3, r3, #3
    6614:	4413      	add	r3, r2
    6616:	685a      	ldr	r2, [r3, #4]
    6618:	f89d 3007 	ldrb.w	r3, [sp, #7]
    661c:	4914      	ldr	r1, [pc, #80]	; (6670 <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    661e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    6622:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6626:	f042 0210 	orr.w	r2, r2, #16
    662a:	3301      	adds	r3, #1
    662c:	00db      	lsls	r3, r3, #3
    662e:	440b      	add	r3, r1
    6630:	605a      	str	r2, [r3, #4]
    6632:	e017      	b.n	6664 <Ftm_Gpt_Ip_ModeSelectA+0x84>
    }
    else
    {
        ftmGptBase[instance]->CONTROLS[channel].CSC &= (~(FTM_CSC_MSA_MASK));
    6634:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6638:	4a0d      	ldr	r2, [pc, #52]	; (6670 <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    663a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    663e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6642:	3301      	adds	r3, #1
    6644:	00db      	lsls	r3, r3, #3
    6646:	4413      	add	r3, r2
    6648:	685a      	ldr	r2, [r3, #4]
    664a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    664e:	4908      	ldr	r1, [pc, #32]	; (6670 <Ftm_Gpt_Ip_ModeSelectA+0x90>)
    6650:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    6654:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6658:	f022 0210 	bic.w	r2, r2, #16
    665c:	3301      	adds	r3, #1
    665e:	00db      	lsls	r3, r3, #3
    6660:	440b      	add	r3, r1
    6662:	605a      	str	r2, [r3, #4]
    }
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24();
    6664:	f002 fb44 	bl	8cf0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24>
}
    6668:	bf00      	nop
    666a:	b003      	add	sp, #12
    666c:	f85d fb04 	ldr.w	pc, [sp], #4
    6670:	0000c1e0 	.word	0x0000c1e0

00006674 <Ftm_Gpt_Ip_SetHalfCycleValue>:
*
* @return        void
*
*/
static inline void Ftm_Gpt_Ip_SetHalfCycleValue(FTM_Type * const base, uint16 value)
{
    6674:	b082      	sub	sp, #8
    6676:	9001      	str	r0, [sp, #4]
    6678:	460b      	mov	r3, r1
    667a:	f8ad 3002 	strh.w	r3, [sp, #2]
    ((base)->HCR) = value;
    667e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    6682:	9b01      	ldr	r3, [sp, #4]
    6684:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    6688:	bf00      	nop
    668a:	b002      	add	sp, #8
    668c:	4770      	bx	lr

0000668e <Ftm_Gpt_Ip_GetChInterruptEnableFlag>:
 *
 * @return  TRUE if a channel (n) event has occurred, FALSE otherwise
 * @pre     The driver needs to be initialized.
 */
static inline boolean Ftm_Gpt_Ip_GetChInterruptEnableFlag(uint8 instance, uint8 channel)
{
    668e:	b082      	sub	sp, #8
    6690:	4603      	mov	r3, r0
    6692:	460a      	mov	r2, r1
    6694:	f88d 3007 	strb.w	r3, [sp, #7]
    6698:	4613      	mov	r3, r2
    669a:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->CONTROLS[channel].CSC & FTM_CSC_CHIE_MASK)) ? TRUE : FALSE;
    669e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66a2:	4a09      	ldr	r2, [pc, #36]	; (66c8 <Ftm_Gpt_Ip_GetChInterruptEnableFlag+0x3a>)
    66a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    66a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    66ac:	3301      	adds	r3, #1
    66ae:	00db      	lsls	r3, r3, #3
    66b0:	4413      	add	r3, r2
    66b2:	685b      	ldr	r3, [r3, #4]
    66b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    66b8:	2b00      	cmp	r3, #0
    66ba:	bf14      	ite	ne
    66bc:	2301      	movne	r3, #1
    66be:	2300      	moveq	r3, #0
    66c0:	b2db      	uxtb	r3, r3
}
    66c2:	4618      	mov	r0, r3
    66c4:	b002      	add	sp, #8
    66c6:	4770      	bx	lr
    66c8:	0000c1e0 	.word	0x0000c1e0

000066cc <Ftm_Gpt_Ip_GetChannelEventStatus>:
 *         - True : A channel event has occurred
 *         - False: No channel event has occurred
 *
 */
static inline boolean Ftm_Gpt_Ip_GetChannelEventStatus(uint8 instance, uint8 channel)
{
    66cc:	b082      	sub	sp, #8
    66ce:	4603      	mov	r3, r0
    66d0:	460a      	mov	r2, r1
    66d2:	f88d 3007 	strb.w	r3, [sp, #7]
    66d6:	4613      	mov	r3, r2
    66d8:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->STATUS & (1UL << channel))) ? TRUE : FALSE;
    66dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66e0:	4a08      	ldr	r2, [pc, #32]	; (6704 <Ftm_Gpt_Ip_GetChannelEventStatus+0x38>)
    66e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    66e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    66ec:	fa22 f303 	lsr.w	r3, r2, r3
    66f0:	f003 0301 	and.w	r3, r3, #1
    66f4:	2b00      	cmp	r3, #0
    66f6:	bf14      	ite	ne
    66f8:	2301      	movne	r3, #1
    66fa:	2300      	moveq	r3, #0
    66fc:	b2db      	uxtb	r3, r3
}
    66fe:	4618      	mov	r0, r3
    6700:	b002      	add	sp, #8
    6702:	4770      	bx	lr
    6704:	0000c1e0 	.word	0x0000c1e0

00006708 <Ftm_Gpt_Ip_ProcessCommonInterrupt>:
* @param[in]     instance     FTM hardware instance number
* @param[in]     channel      FTM hardware channel number
* @implements    Ftm_Gpt_Ip_ProcessCommonInterrupt_Activity
*/
static void Ftm_Gpt_Ip_ProcessCommonInterrupt(uint8 instance, uint8 channel)
{
    6708:	b500      	push	{lr}
    670a:	b089      	sub	sp, #36	; 0x24
    670c:	4603      	mov	r3, r0
    670e:	460a      	mov	r2, r1
    6710:	f88d 3007 	strb.w	r3, [sp, #7]
    6714:	4613      	mov	r3, r2
    6716:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Gpt_Ip_CallbackType     callback;
    uint8                       callbackParam;
    Ftm_Gpt_Ip_ChannelModeType  channelMode;

    uint32 targetValue;
    uint32 oldCmpValue = Ftm_Gpt_Ip_GetCompareValue(instance, channel);
    671a:	f89d 2006 	ldrb.w	r2, [sp, #6]
    671e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6722:	4611      	mov	r1, r2
    6724:	4618      	mov	r0, r3
    6726:	f7ff fde1 	bl	62ec <Ftm_Gpt_Ip_GetCompareValue>
    672a:	9007      	str	r0, [sp, #28]

    if ((instance < FTM_INSTANCE_COUNT) && (channel < FTM_CONTROLS_COUNT))
    672c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6730:	2b03      	cmp	r3, #3
    6732:	f200 80a8 	bhi.w	6886 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
    6736:	f89d 3006 	ldrb.w	r3, [sp, #6]
    673a:	2b07      	cmp	r3, #7
    673c:	f200 80a3 	bhi.w	6886 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
    {
        /* enter critical section */
        SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25();
    6740:	f002 fafc 	bl	8d3c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25>
        {
            /* check if channel event is enabled */
            IsChEvEnabled = Ftm_Gpt_Ip_GetChInterruptEnableFlag(instance, channel);
    6744:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6748:	f89d 3007 	ldrb.w	r3, [sp, #7]
    674c:	4611      	mov	r1, r2
    674e:	4618      	mov	r0, r3
    6750:	f7ff ff9d 	bl	668e <Ftm_Gpt_Ip_GetChInterruptEnableFlag>
    6754:	4603      	mov	r3, r0
    6756:	f88d 301b 	strb.w	r3, [sp, #27]

            /* check if channel event has occurred */
            HasChEvOccurred = Ftm_Gpt_Ip_GetChInterruptStatusFlag(instance, channel);
    675a:	f89d 2006 	ldrb.w	r2, [sp, #6]
    675e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6762:	4611      	mov	r1, r2
    6764:	4618      	mov	r0, r3
    6766:	f7ff fd91 	bl	628c <Ftm_Gpt_Ip_GetChInterruptStatusFlag>
    676a:	4603      	mov	r3, r0
    676c:	f88d 301a 	strb.w	r3, [sp, #26]

            /* Check for spurious interrupts */
            if (HasChEvOccurred && IsChEvEnabled)
    6770:	f89d 301a 	ldrb.w	r3, [sp, #26]
    6774:	2b00      	cmp	r3, #0
    6776:	d00b      	beq.n	6790 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x88>
    6778:	f89d 301b 	ldrb.w	r3, [sp, #27]
    677c:	2b00      	cmp	r3, #0
    677e:	d007      	beq.n	6790 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x88>
            {
                /* Clear interrupt flag */
                Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6780:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6784:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6788:	4611      	mov	r1, r2
    678a:	4618      	mov	r0, r3
    678c:	f7ff fe22 	bl	63d4 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
            }
        }
        /* exit critical section */
        SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25();
    6790:	f002 fb00 	bl	8d94 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25>

        if (HasChEvOccurred && IsChEvEnabled)
    6794:	f89d 301a 	ldrb.w	r3, [sp, #26]
    6798:	2b00      	cmp	r3, #0
    679a:	d074      	beq.n	6886 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
    679c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    67a0:	2b00      	cmp	r3, #0
    67a2:	d070      	beq.n	6886 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
        {
            chInit          = Ftm_Gpt_Ip_u32ChState[instance][channel].chInit;
    67a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    67a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    67ac:	4938      	ldr	r1, [pc, #224]	; (6890 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    67ae:	00d2      	lsls	r2, r2, #3
    67b0:	4413      	add	r3, r2
    67b2:	011b      	lsls	r3, r3, #4
    67b4:	440b      	add	r3, r1
    67b6:	781b      	ldrb	r3, [r3, #0]
    67b8:	f88d 3019 	strb.w	r3, [sp, #25]
            callback        = Ftm_Gpt_Ip_u32ChState[instance][channel].callback;
    67bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    67c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    67c4:	4932      	ldr	r1, [pc, #200]	; (6890 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    67c6:	00d2      	lsls	r2, r2, #3
    67c8:	4413      	add	r3, r2
    67ca:	011b      	lsls	r3, r3, #4
    67cc:	440b      	add	r3, r1
    67ce:	3304      	adds	r3, #4
    67d0:	681b      	ldr	r3, [r3, #0]
    67d2:	9305      	str	r3, [sp, #20]
            callbackParam   = Ftm_Gpt_Ip_u32ChState[instance][channel].callbackParam;
    67d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    67d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    67dc:	492c      	ldr	r1, [pc, #176]	; (6890 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    67de:	00d2      	lsls	r2, r2, #3
    67e0:	4413      	add	r3, r2
    67e2:	011b      	lsls	r3, r3, #4
    67e4:	440b      	add	r3, r1
    67e6:	3308      	adds	r3, #8
    67e8:	781b      	ldrb	r3, [r3, #0]
    67ea:	f88d 3013 	strb.w	r3, [sp, #19]

            /* Call GPT upper layer handler */
            if ((TRUE == chInit) && (NULL_PTR != callback))
    67ee:	f89d 3019 	ldrb.w	r3, [sp, #25]
    67f2:	2b00      	cmp	r3, #0
    67f4:	d007      	beq.n	6806 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0xfe>
    67f6:	9b05      	ldr	r3, [sp, #20]
    67f8:	2b00      	cmp	r3, #0
    67fa:	d004      	beq.n	6806 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0xfe>
            {
                callback(callbackParam);
    67fc:	f89d 2013 	ldrb.w	r2, [sp, #19]
    6800:	9b05      	ldr	r3, [sp, #20]
    6802:	4610      	mov	r0, r2
    6804:	4798      	blx	r3
                Ftm_Gpt_Ip_u32TargetValue[instance][channel] = Ftm_Gpt_Ip_u32NextTargetValue[instance][channel];
                Ftm_Gpt_Ip_u32NextTargetValue[instance][channel] = 0x0U;
            }
#endif
            /* Check if channel mode is ONE-SHOT */
            channelMode = Ftm_Gpt_Ip_u32ChState[instance][channel].channelMode;
    6806:	f89d 2007 	ldrb.w	r2, [sp, #7]
    680a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    680e:	4920      	ldr	r1, [pc, #128]	; (6890 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x188>)
    6810:	00d2      	lsls	r2, r2, #3
    6812:	4413      	add	r3, r2
    6814:	011b      	lsls	r3, r3, #4
    6816:	440b      	add	r3, r1
    6818:	330c      	adds	r3, #12
    681a:	681b      	ldr	r3, [r3, #0]
    681c:	9303      	str	r3, [sp, #12]
            if(FTM_GPT_IP_CH_MODE_ONESHOT == channelMode)
    681e:	9b03      	ldr	r3, [sp, #12]
    6820:	2b01      	cmp	r3, #1
    6822:	d108      	bne.n	6836 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x12e>
            {
                Ftm_Gpt_Ip_DisableChannelInterrupt(instance, channel);
    6824:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6828:	f89d 3007 	ldrb.w	r3, [sp, #7]
    682c:	4611      	mov	r1, r2
    682e:	4618      	mov	r0, r3
    6830:	f000 f9ce 	bl	6bd0 <Ftm_Gpt_Ip_DisableChannelInterrupt>
                    Ftm_Gpt_Ip_SetCompareValue(instance, channel, (uint32)(oldCmpValue + targetValue));
                }
            }
        }
    }
}
    6834:	e027      	b.n	6886 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
                targetValue = Ftm_Gpt_Ip_u32TargetValue[instance][channel];
    6836:	f89d 2007 	ldrb.w	r2, [sp, #7]
    683a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    683e:	4915      	ldr	r1, [pc, #84]	; (6894 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x18c>)
    6840:	00d2      	lsls	r2, r2, #3
    6842:	4413      	add	r3, r2
    6844:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    6848:	9302      	str	r3, [sp, #8]
                if ((uint32)(oldCmpValue + targetValue) > FTM_CNT_MAX_VALUE)
    684a:	9a07      	ldr	r2, [sp, #28]
    684c:	9b02      	ldr	r3, [sp, #8]
    684e:	4413      	add	r3, r2
    6850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    6854:	d30d      	bcc.n	6872 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x16a>
                    Ftm_Gpt_Ip_SetCompareValue(instance, channel, (uint32)(targetValue - (FTM_CNT_MAX_VALUE - oldCmpValue)));
    6856:	9a07      	ldr	r2, [sp, #28]
    6858:	9b02      	ldr	r3, [sp, #8]
    685a:	4413      	add	r3, r2
    685c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
    6860:	3bff      	subs	r3, #255	; 0xff
    6862:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6866:	f89d 0007 	ldrb.w	r0, [sp, #7]
    686a:	461a      	mov	r2, r3
    686c:	f7ff fe88 	bl	6580 <Ftm_Gpt_Ip_SetCompareValue>
}
    6870:	e009      	b.n	6886 <Ftm_Gpt_Ip_ProcessCommonInterrupt+0x17e>
                    Ftm_Gpt_Ip_SetCompareValue(instance, channel, (uint32)(oldCmpValue + targetValue));
    6872:	9a07      	ldr	r2, [sp, #28]
    6874:	9b02      	ldr	r3, [sp, #8]
    6876:	441a      	add	r2, r3
    6878:	f89d 1006 	ldrb.w	r1, [sp, #6]
    687c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6880:	4618      	mov	r0, r3
    6882:	f7ff fe7d 	bl	6580 <Ftm_Gpt_Ip_SetCompareValue>
}
    6886:	bf00      	nop
    6888:	b009      	add	sp, #36	; 0x24
    688a:	f85d fb04 	ldr.w	pc, [sp], #4
    688e:	bf00      	nop
    6890:	1fff8e38 	.word	0x1fff8e38
    6894:	1fff8da8 	.word	0x1fff8da8

00006898 <Ftm_Gpt_Ip_Init>:
* @return        void
* @pre           The data structure including the configuration set required for initializing the GPT driver
* @implements    Ftm_Gpt_Ip_Init_Activity
*/
void Ftm_Gpt_Ip_Init(uint8 instance, const Ftm_Gpt_Ip_InstanceConfigType *configPtr)
{
    6898:	b500      	push	{lr}
    689a:	b083      	sub	sp, #12
    689c:	4603      	mov	r3, r0
    689e:	9100      	str	r1, [sp, #0]
    68a0:	f88d 3007 	strb.w	r3, [sp, #7]
#endif
    /* Enable register access from user mode, if enabled from configuration file */
    Call_Ftm_Gpt_Ip_SetUserAccessAllowed((uint32)ftmGptBase[instance]);

    /* Check the FTM counter modes */
    if (FTM_GPT_IP_MODE_UP_TIMER == configPtr->mode)
    68a4:	9b00      	ldr	r3, [sp, #0]
    68a6:	68db      	ldr	r3, [r3, #12]
    68a8:	2b01      	cmp	r3, #1
    68aa:	d12a      	bne.n	6902 <Ftm_Gpt_Ip_Init+0x6a>
    {
        /* Set clock and prescalerValue FTM */
        Ftm_Gpt_Ip_SetPrescaler(instance, configPtr->clockPrescaler);
    68ac:	9b00      	ldr	r3, [sp, #0]
    68ae:	7a1a      	ldrb	r2, [r3, #8]
    68b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68b4:	4611      	mov	r1, r2
    68b6:	4618      	mov	r0, r3
    68b8:	f7ff fe06 	bl	64c8 <Ftm_Gpt_Ip_SetPrescaler>
        /* Set FTM counter clock source */
        Ftm_Gpt_Ip_SetClockSource(instance, configPtr->clocksource);
    68bc:	9b00      	ldr	r3, [sp, #0]
    68be:	685a      	ldr	r2, [r3, #4]
    68c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68c4:	4611      	mov	r1, r2
    68c6:	4618      	mov	r0, r3
    68c8:	f7ff fdda 	bl	6480 <Ftm_Gpt_Ip_SetClockSource>

        /* Set freeze bits */
        Ftm_Gpt_Ip_SetFreezeBits(instance, configPtr->freezeBits);
    68cc:	9b00      	ldr	r3, [sp, #0]
    68ce:	781a      	ldrb	r2, [r3, #0]
    68d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68d4:	4611      	mov	r1, r2
    68d6:	4618      	mov	r0, r3
    68d8:	f7ff fd20 	bl	631c <Ftm_Gpt_Ip_SetFreezeBits>

        /*Set Counter register and Initial Counter Value*/
        Ftm_Gpt_Ip_SetCounterInitVal(instance, 1U);
    68dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68e0:	2101      	movs	r1, #1
    68e2:	4618      	mov	r0, r3
    68e4:	f7ff fd4a 	bl	637c <Ftm_Gpt_Ip_SetCounterInitVal>

        /* write the Ftm Modulo Register with 0xFFFF */
        Ftm_Gpt_Ip_WriteModulo(instance, 0xFFFFU);
    68e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    68f0:	4618      	mov	r0, r3
    68f2:	f7ff fe5f 	bl	65b4 <Ftm_Gpt_Ip_WriteModulo>

        /* set FTM Enable bit */
        Ftm_Gpt_Ip_SetEnFtmModule(instance, TRUE);
    68f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68fa:	2101      	movs	r1, #1
    68fc:	4618      	mov	r0, r3
    68fe:	f7ff fe09 	bl	6514 <Ftm_Gpt_Ip_SetEnFtmModule>
#if (FTM_GPT_IP_SET_CLOCK_MODE == STD_ON)
    Ftm_Gpt_Ip_u32InstancePrescaler[instance].clockPrescaler = configPtr->clockPrescaler;
    Ftm_Gpt_Ip_u32InstancePrescaler[instance].clockAlternatePrescaler = configPtr->clockAlternatePrescaler;
#endif
    /* set FTM instance status to initialized */
    Ftm_Gpt_Ip_u32InstanceState[instance] = FTM_GPT_IP_STATUS_INITIALIZED;
    6902:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6906:	4a04      	ldr	r2, [pc, #16]	; (6918 <Ftm_Gpt_Ip_Init+0x80>)
    6908:	2101      	movs	r1, #1
    690a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    690e:	bf00      	nop
    6910:	b003      	add	sp, #12
    6912:	f85d fb04 	ldr.w	pc, [sp], #4
    6916:	bf00      	nop
    6918:	1fff8e28 	.word	0x1fff8e28

0000691c <Ftm_Gpt_Ip_InitChannel>:
* @return        void
* @pre           The data structure including the configuration set required for initializing the GPT driver
* @implements    Ftm_Gpt_Ip_InitChannel_Activity
*/
void Ftm_Gpt_Ip_InitChannel(uint8 instance, const Ftm_Gpt_Ip_ChannelConfigType *configPtr)
{
    691c:	b500      	push	{lr}
    691e:	b083      	sub	sp, #12
    6920:	4603      	mov	r3, r0
    6922:	9100      	str	r1, [sp, #0]
    6924:	f88d 3007 	strb.w	r3, [sp, #7]
    DevAssert(FTM_INSTANCE_COUNT > instance);
    DevAssert(FTM_CONTROLS_COUNT > configPtr->hwChannel);
#endif

    /* Disable channels interrupt bit */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, configPtr->hwChannel, FALSE);
    6928:	9b00      	ldr	r3, [sp, #0]
    692a:	7819      	ldrb	r1, [r3, #0]
    692c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6930:	2200      	movs	r2, #0
    6932:	4618      	mov	r0, r3
    6934:	f7ff fd74 	bl	6420 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear ClearInterruptFlag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, configPtr->hwChannel);
    6938:	9b00      	ldr	r3, [sp, #0]
    693a:	781a      	ldrb	r2, [r3, #0]
    693c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6940:	4611      	mov	r1, r2
    6942:	4618      	mov	r0, r3
    6944:	f7ff fd46 	bl	63d4 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Set Compare Value register to 0xFFFF */
    Ftm_Gpt_Ip_SetCompareValue(instance, configPtr->hwChannel, 0xFFFFU);
    6948:	9b00      	ldr	r3, [sp, #0]
    694a:	7819      	ldrb	r1, [r3, #0]
    694c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6950:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6954:	4618      	mov	r0, r3
    6956:	f7ff fe13 	bl	6580 <Ftm_Gpt_Ip_SetCompareValue>
    /* Set bit MSA */
    Ftm_Gpt_Ip_ModeSelectA(instance, configPtr->hwChannel, TRUE);
    695a:	9b00      	ldr	r3, [sp, #0]
    695c:	7819      	ldrb	r1, [r3, #0]
    695e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6962:	2201      	movs	r2, #1
    6964:	4618      	mov	r0, r3
    6966:	f7ff fe3b 	bl	65e0 <Ftm_Gpt_Ip_ModeSelectA>
     (defined FTM_4_CH_4_CH_5_ISR_USED) || (defined FTM_4_CH_6_CH_7_ISR_USED) || (defined FTM_5_CH_0_CH_1_ISR_USED) || \
     (defined FTM_5_CH_2_CH_3_ISR_USED) || (defined FTM_5_CH_4_CH_5_ISR_USED) || (defined FTM_5_CH_6_CH_7_ISR_USED) || \
     (defined FTM_6_CH_0_CH_1_ISR_USED) || (defined FTM_6_CH_2_CH_3_ISR_USED) || (defined FTM_6_CH_4_CH_5_ISR_USED) || \
     (defined FTM_6_CH_6_CH_7_ISR_USED) || (defined FTM_7_CH_0_CH_1_ISR_USED) || (defined FTM_7_CH_2_CH_3_ISR_USED) || \
     (defined FTM_7_CH_4_CH_5_ISR_USED) || (defined FTM_7_CH_6_CH_7_ISR_USED))
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].chInit = TRUE;
    696a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    696e:	9a00      	ldr	r2, [sp, #0]
    6970:	7812      	ldrb	r2, [r2, #0]
    6972:	4611      	mov	r1, r2
    6974:	4a1a      	ldr	r2, [pc, #104]	; (69e0 <Ftm_Gpt_Ip_InitChannel+0xc4>)
    6976:	00db      	lsls	r3, r3, #3
    6978:	440b      	add	r3, r1
    697a:	011b      	lsls	r3, r3, #4
    697c:	4413      	add	r3, r2
    697e:	2201      	movs	r2, #1
    6980:	701a      	strb	r2, [r3, #0]
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].callback = configPtr->callback;
    6982:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6986:	9a00      	ldr	r2, [sp, #0]
    6988:	7812      	ldrb	r2, [r2, #0]
    698a:	4610      	mov	r0, r2
    698c:	9a00      	ldr	r2, [sp, #0]
    698e:	6852      	ldr	r2, [r2, #4]
    6990:	4913      	ldr	r1, [pc, #76]	; (69e0 <Ftm_Gpt_Ip_InitChannel+0xc4>)
    6992:	00db      	lsls	r3, r3, #3
    6994:	4403      	add	r3, r0
    6996:	011b      	lsls	r3, r3, #4
    6998:	440b      	add	r3, r1
    699a:	3304      	adds	r3, #4
    699c:	601a      	str	r2, [r3, #0]
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].callbackParam = configPtr->callbackParam;
    699e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69a2:	9a00      	ldr	r2, [sp, #0]
    69a4:	7812      	ldrb	r2, [r2, #0]
    69a6:	4610      	mov	r0, r2
    69a8:	9a00      	ldr	r2, [sp, #0]
    69aa:	7a11      	ldrb	r1, [r2, #8]
    69ac:	4a0c      	ldr	r2, [pc, #48]	; (69e0 <Ftm_Gpt_Ip_InitChannel+0xc4>)
    69ae:	00db      	lsls	r3, r3, #3
    69b0:	4403      	add	r3, r0
    69b2:	011b      	lsls	r3, r3, #4
    69b4:	4413      	add	r3, r2
    69b6:	3308      	adds	r3, #8
    69b8:	460a      	mov	r2, r1
    69ba:	701a      	strb	r2, [r3, #0]
    Ftm_Gpt_Ip_u32ChState[instance][configPtr->hwChannel].channelMode = configPtr->channelMode;
    69bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69c0:	9a00      	ldr	r2, [sp, #0]
    69c2:	7812      	ldrb	r2, [r2, #0]
    69c4:	4610      	mov	r0, r2
    69c6:	9a00      	ldr	r2, [sp, #0]
    69c8:	68d2      	ldr	r2, [r2, #12]
    69ca:	4905      	ldr	r1, [pc, #20]	; (69e0 <Ftm_Gpt_Ip_InitChannel+0xc4>)
    69cc:	00db      	lsls	r3, r3, #3
    69ce:	4403      	add	r3, r0
    69d0:	011b      	lsls	r3, r3, #4
    69d2:	440b      	add	r3, r1
    69d4:	330c      	adds	r3, #12
    69d6:	601a      	str	r2, [r3, #0]
#endif
}
    69d8:	bf00      	nop
    69da:	b003      	add	sp, #12
    69dc:	f85d fb04 	ldr.w	pc, [sp], #4
    69e0:	1fff8e38 	.word	0x1fff8e38

000069e4 <Ftm_Gpt_Ip_Deinit>:
* @return        void
* @pre           The data structure including the configuration set required for initializing the GPT driver.
* @implements    Ftm_Gpt_Ip_Deinit_Activity
*/
void Ftm_Gpt_Ip_Deinit(uint8 instance)
{
    69e4:	b500      	push	{lr}
    69e6:	b085      	sub	sp, #20
    69e8:	4603      	mov	r3, r0
    69ea:	f88d 3007 	strb.w	r3, [sp, #7]
    #endif

    uint8 channelIndex;

    /* Reset all channels to default */
    for (channelIndex = 0; channelIndex < FTM_CONTROLS_COUNT; channelIndex++)
    69ee:	2300      	movs	r3, #0
    69f0:	f88d 300f 	strb.w	r3, [sp, #15]
    69f4:	e014      	b.n	6a20 <Ftm_Gpt_Ip_Deinit+0x3c>
    {
        /* Disable interrupts */
        Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channelIndex, FALSE );
    69f6:	f89d 100f 	ldrb.w	r1, [sp, #15]
    69fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69fe:	2200      	movs	r2, #0
    6a00:	4618      	mov	r0, r3
    6a02:	f7ff fd0d 	bl	6420 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
        /*Clear interrupt flags*/
        Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channelIndex);
    6a06:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6a0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a0e:	4611      	mov	r1, r2
    6a10:	4618      	mov	r0, r3
    6a12:	f7ff fcdf 	bl	63d4 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    for (channelIndex = 0; channelIndex < FTM_CONTROLS_COUNT; channelIndex++)
    6a16:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6a1a:	3301      	adds	r3, #1
    6a1c:	f88d 300f 	strb.w	r3, [sp, #15]
    6a20:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6a24:	2b07      	cmp	r3, #7
    6a26:	d9e6      	bls.n	69f6 <Ftm_Gpt_Ip_Deinit+0x12>
    }
    /* Set clock source as 'No clock'. This in effect disables the FTM counter */
    Ftm_Gpt_Ip_SetClockSource(instance, FTM_GPT_IP_CLOCK_SOURCE_NONE);
    6a28:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a2c:	2100      	movs	r1, #0
    6a2e:	4618      	mov	r0, r3
    6a30:	f7ff fd26 	bl	6480 <Ftm_Gpt_Ip_SetClockSource>
    /* clear FTM Enable bit */
    Ftm_Gpt_Ip_SetEnFtmModule(instance, FALSE);
    6a34:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a38:	2100      	movs	r1, #0
    6a3a:	4618      	mov	r0, r3
    6a3c:	f7ff fd6a 	bl	6514 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* clearde freeze bits */
    Ftm_Gpt_Ip_SetFreezeBits(instance, FALSE);
    6a40:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a44:	2100      	movs	r1, #0
    6a46:	4618      	mov	r0, r3
    6a48:	f7ff fc68 	bl	631c <Ftm_Gpt_Ip_SetFreezeBits>
    /* Set Counter register to 0 and Initial Counter Value to 0 */
    Ftm_Gpt_Ip_SetCounterInitVal(instance, 0U);
    6a4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a50:	2100      	movs	r1, #0
    6a52:	4618      	mov	r0, r3
    6a54:	f7ff fc92 	bl	637c <Ftm_Gpt_Ip_SetCounterInitVal>
    Ftm_Gpt_Ip_SetCounter(instance, 0U);
    6a58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a5c:	2100      	movs	r1, #0
    6a5e:	4618      	mov	r0, r3
    6a60:	f7ff fca2 	bl	63a8 <Ftm_Gpt_Ip_SetCounter>
    /* set FTM instance status to uninitialized */
    Ftm_Gpt_Ip_u32InstanceState[instance] = FTM_GPT_IP_STATUS_UNINITIALIZED;
    6a64:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a68:	4a03      	ldr	r2, [pc, #12]	; (6a78 <Ftm_Gpt_Ip_Deinit+0x94>)
    6a6a:	2100      	movs	r1, #0
    6a6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    6a70:	bf00      	nop
    6a72:	b005      	add	sp, #20
    6a74:	f85d fb04 	ldr.w	pc, [sp], #4
    6a78:	1fff8e28 	.word	0x1fff8e28

00006a7c <Ftm_Gpt_Ip_StartCounting>:
* @return        void
* @pre           The driver needs to be initialized. This function is called for starting the FTM timer channel.
* @implements    Ftm_Gpt_Ip_StartCounting_Activity
*/
void Ftm_Gpt_Ip_StartCounting(uint8 instance, uint8 channel, uint16 compareValue)
{
    6a7c:	b500      	push	{lr}
    6a7e:	b085      	sub	sp, #20
    6a80:	4603      	mov	r3, r0
    6a82:	f88d 3007 	strb.w	r3, [sp, #7]
    6a86:	460b      	mov	r3, r1
    6a88:	f88d 3006 	strb.w	r3, [sp, #6]
    6a8c:	4613      	mov	r3, r2
    6a8e:	f8ad 3004 	strh.w	r3, [sp, #4]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
    DevAssert(FTM_INSTANCE_COUNT > instance);
    DevAssert(FTM_CONTROLS_COUNT > channel);
#endif
    uint32 counterValue;
    uint32 currentCntValue = Ftm_Gpt_Ip_GetCntValue(instance);
    6a92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a96:	4618      	mov	r0, r3
    6a98:	f7ff fc18 	bl	62cc <Ftm_Gpt_Ip_GetCntValue>
    6a9c:	9002      	str	r0, [sp, #8]

    if ((uint32)(currentCntValue + compareValue) > FTM_CNT_MAX_VALUE)
    6a9e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6aa2:	9b02      	ldr	r3, [sp, #8]
    6aa4:	4413      	add	r3, r2
    6aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    6aaa:	d308      	bcc.n	6abe <Ftm_Gpt_Ip_StartCounting+0x42>
    {
        counterValue = (uint32)(compareValue - (FTM_CNT_MAX_VALUE - currentCntValue));
    6aac:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6ab0:	9b02      	ldr	r3, [sp, #8]
    6ab2:	4413      	add	r3, r2
    6ab4:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
    6ab8:	3bff      	subs	r3, #255	; 0xff
    6aba:	9303      	str	r3, [sp, #12]
    6abc:	e004      	b.n	6ac8 <Ftm_Gpt_Ip_StartCounting+0x4c>
    }
    else
    {
        counterValue = (uint32)(currentCntValue + compareValue);
    6abe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6ac2:	9a02      	ldr	r2, [sp, #8]
    6ac4:	4413      	add	r3, r2
    6ac6:	9303      	str	r3, [sp, #12]
    }
    /* Set new compare value */
    Ftm_Gpt_Ip_SetCompareValue(instance, channel, counterValue);
    6ac8:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6acc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ad0:	9a03      	ldr	r2, [sp, #12]
    6ad2:	4618      	mov	r0, r3
    6ad4:	f7ff fd54 	bl	6580 <Ftm_Gpt_Ip_SetCompareValue>
    /* Save compare value */
    Ftm_Gpt_Ip_u32TargetValue[instance][channel] = compareValue;
    6ad8:	f89d 1007 	ldrb.w	r1, [sp, #7]
    6adc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6ae0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6ae4:	480c      	ldr	r0, [pc, #48]	; (6b18 <Ftm_Gpt_Ip_StartCounting+0x9c>)
    6ae6:	00c9      	lsls	r1, r1, #3
    6ae8:	440b      	add	r3, r1
    6aea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    /* Clear CHF flag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance,channel);
    6aee:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6af2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6af6:	4611      	mov	r1, r2
    6af8:	4618      	mov	r0, r3
    6afa:	f7ff fc6b 	bl	63d4 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Enable interrupt */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, TRUE);
    6afe:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6b02:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b06:	2201      	movs	r2, #1
    6b08:	4618      	mov	r0, r3
    6b0a:	f7ff fc89 	bl	6420 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>

}
    6b0e:	bf00      	nop
    6b10:	b005      	add	sp, #20
    6b12:	f85d fb04 	ldr.w	pc, [sp], #4
    6b16:	bf00      	nop
    6b18:	1fff8da8 	.word	0x1fff8da8

00006b1c <Ftm_Gpt_Ip_StartTimer>:
 *                  - enables the FTM counter
 * @pre           The driver needs to be initialized.
 * @implements    Ftm_Gpt_Ip_StartTimer_Activity
 */
void Ftm_Gpt_Ip_StartTimer(uint8 instance, uint16 counterValue)
{
    6b1c:	b500      	push	{lr}
    6b1e:	b083      	sub	sp, #12
    6b20:	4603      	mov	r3, r0
    6b22:	460a      	mov	r2, r1
    6b24:	f88d 3007 	strb.w	r3, [sp, #7]
    6b28:	4613      	mov	r3, r2
    6b2a:	f8ad 3004 	strh.w	r3, [sp, #4]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
    DevAssert(FTM_INSTANCE_COUNT > instance);
#endif
    if (instance < FTM_INSTANCE_COUNT)
    6b2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b32:	2b03      	cmp	r3, #3
    6b34:	d814      	bhi.n	6b60 <Ftm_Gpt_Ip_StartTimer+0x44>
    {
        if (FTM_GPT_IP_STATUS_INITIALIZED == Ftm_Gpt_Ip_u32InstanceState[instance])
    6b36:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b3a:	4a0b      	ldr	r2, [pc, #44]	; (6b68 <Ftm_Gpt_Ip_StartTimer+0x4c>)
    6b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b40:	2b01      	cmp	r3, #1
    6b42:	d10d      	bne.n	6b60 <Ftm_Gpt_Ip_StartTimer+0x44>
        {
            /* Set the new value counter */
            Ftm_Gpt_Ip_SetCounterInitVal(instance, counterValue);
    6b44:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6b48:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b4c:	4611      	mov	r1, r2
    6b4e:	4618      	mov	r0, r3
    6b50:	f7ff fc14 	bl	637c <Ftm_Gpt_Ip_SetCounterInitVal>
            /* set FTM Enable bit */
            Ftm_Gpt_Ip_SetEnFtmModule(instance, TRUE);
    6b54:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b58:	2101      	movs	r1, #1
    6b5a:	4618      	mov	r0, r3
    6b5c:	f7ff fcda 	bl	6514 <Ftm_Gpt_Ip_SetEnFtmModule>
        }
    }
}
    6b60:	bf00      	nop
    6b62:	b003      	add	sp, #12
    6b64:	f85d fb04 	ldr.w	pc, [sp], #4
    6b68:	1fff8e28 	.word	0x1fff8e28

00006b6c <Ftm_Gpt_Ip_StopTimer>:
* @return        void
* @pre           The driver needs to be initialized. This function is called for stoping the FTM timer channel.
* @implements    Ftm_Gpt_Ip_StopTimer_Activity
*/
void Ftm_Gpt_Ip_StopTimer(uint8 instance)
{
    6b6c:	b500      	push	{lr}
    6b6e:	b083      	sub	sp, #12
    6b70:	4603      	mov	r3, r0
    6b72:	f88d 3007 	strb.w	r3, [sp, #7]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
DevAssert(FTM_INSTANCE_COUNT > instance);
#endif
    /* clear FTM Enable bit */
    Ftm_Gpt_Ip_SetEnFtmModule(instance, FALSE);
    6b76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b7a:	2100      	movs	r1, #0
    6b7c:	4618      	mov	r0, r3
    6b7e:	f7ff fcc9 	bl	6514 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* Set clock source as 'No clock'. This in effect disables the FTM counter */
    Ftm_Gpt_Ip_SetClockSource(instance, FTM_GPT_IP_CLOCK_SOURCE_NONE);
    6b82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b86:	2100      	movs	r1, #0
    6b88:	4618      	mov	r0, r3
    6b8a:	f7ff fc79 	bl	6480 <Ftm_Gpt_Ip_SetClockSource>
}
    6b8e:	bf00      	nop
    6b90:	b003      	add	sp, #12
    6b92:	f85d fb04 	ldr.w	pc, [sp], #4

00006b96 <Ftm_Gpt_Ip_EnableChannelInterrupt>:
* @return       void
* @pre          The driver needs to be initialized.
* @implements   Ftm_Gpt_Ip_EnableChannelInterrupt_Activity
*/
void Ftm_Gpt_Ip_EnableChannelInterrupt(uint8 instance, uint8 channel)
{
    6b96:	b500      	push	{lr}
    6b98:	b083      	sub	sp, #12
    6b9a:	4603      	mov	r3, r0
    6b9c:	460a      	mov	r2, r1
    6b9e:	f88d 3007 	strb.w	r3, [sp, #7]
    6ba2:	4613      	mov	r3, r2
    6ba4:	f88d 3006 	strb.w	r3, [sp, #6]
DevAssert(FTM_INSTANCE_COUNT > instance);
DevAssert(FTM_CONTROLS_COUNT > channel);
#endif

     /* Clear interrupt flag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6ba8:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6bac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bb0:	4611      	mov	r1, r2
    6bb2:	4618      	mov	r0, r3
    6bb4:	f7ff fc0e 	bl	63d4 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Enable channel interrupt */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, TRUE);
    6bb8:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6bbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bc0:	2201      	movs	r2, #1
    6bc2:	4618      	mov	r0, r3
    6bc4:	f7ff fc2c 	bl	6420 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
}
    6bc8:	bf00      	nop
    6bca:	b003      	add	sp, #12
    6bcc:	f85d fb04 	ldr.w	pc, [sp], #4

00006bd0 <Ftm_Gpt_Ip_DisableChannelInterrupt>:
* @return        void
* @pre           The driver needs to be initialized.
* @implements    Ftm_Gpt_Ip_DisableChannelInterrupt_Activity
*/
void Ftm_Gpt_Ip_DisableChannelInterrupt(uint8 instance, uint8 channel)
{
    6bd0:	b500      	push	{lr}
    6bd2:	b083      	sub	sp, #12
    6bd4:	4603      	mov	r3, r0
    6bd6:	460a      	mov	r2, r1
    6bd8:	f88d 3007 	strb.w	r3, [sp, #7]
    6bdc:	4613      	mov	r3, r2
    6bde:	f88d 3006 	strb.w	r3, [sp, #6]
DevAssert(FTM_INSTANCE_COUNT > instance);
DevAssert(FTM_CONTROLS_COUNT > channel);
#endif

    /* Disable interrupt */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, FALSE);
    6be2:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6be6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bea:	2200      	movs	r2, #0
    6bec:	4618      	mov	r0, r3
    6bee:	f7ff fc17 	bl	6420 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear interrupt flag */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6bf2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6bf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bfa:	4611      	mov	r1, r2
    6bfc:	4618      	mov	r0, r3
    6bfe:	f7ff fbe9 	bl	63d4 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
}
    6c02:	bf00      	nop
    6c04:	b003      	add	sp, #12
    6c06:	f85d fb04 	ldr.w	pc, [sp], #4

00006c0a <Ftm_Gpt_Ip_SetHalfCycleReloadPoint>:
* @return
* @pre           The driver needs to be initialized.
* @implements    Ftm_Gpt_Ip_SetHalfCycleReloadPoint_Activity
*/
void Ftm_Gpt_Ip_SetHalfCycleReloadPoint(uint8 instance, uint16 reloadPoint)
{
    6c0a:	b500      	push	{lr}
    6c0c:	b083      	sub	sp, #12
    6c0e:	4603      	mov	r3, r0
    6c10:	460a      	mov	r2, r1
    6c12:	f88d 3007 	strb.w	r3, [sp, #7]
    6c16:	4613      	mov	r3, r2
    6c18:	f8ad 3004 	strh.w	r3, [sp, #4]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
DevAssert(FTM_INSTANCE_COUNT > instance);
#endif
    Ftm_Gpt_Ip_SetHalfCycleValue(ftmGptBase[instance], reloadPoint);
    6c1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c20:	4a06      	ldr	r2, [pc, #24]	; (6c3c <Ftm_Gpt_Ip_SetHalfCycleReloadPoint+0x32>)
    6c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c26:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6c2a:	4611      	mov	r1, r2
    6c2c:	4618      	mov	r0, r3
    6c2e:	f7ff fd21 	bl	6674 <Ftm_Gpt_Ip_SetHalfCycleValue>
}
    6c32:	bf00      	nop
    6c34:	b003      	add	sp, #12
    6c36:	f85d fb04 	ldr.w	pc, [sp], #4
    6c3a:	bf00      	nop
    6c3c:	0000c1e0 	.word	0x0000c1e0

00006c40 <Ftm_Gpt_Ip_StartPredefTimer>:
* @param[in]  bFreezeEnable   enables/disables freeze bits
* @return     void
* @pre        The driver needs to be initialized
*/
void Ftm_Gpt_Ip_StartPredefTimer (uint8 instance,uint8 channel, uint8 uPrescaler, uint8 clocksource, boolean bFreezeEnable)
{
    6c40:	b510      	push	{r4, lr}
    6c42:	b082      	sub	sp, #8
    6c44:	4604      	mov	r4, r0
    6c46:	4608      	mov	r0, r1
    6c48:	4611      	mov	r1, r2
    6c4a:	461a      	mov	r2, r3
    6c4c:	4623      	mov	r3, r4
    6c4e:	f88d 3007 	strb.w	r3, [sp, #7]
    6c52:	4603      	mov	r3, r0
    6c54:	f88d 3006 	strb.w	r3, [sp, #6]
    6c58:	460b      	mov	r3, r1
    6c5a:	f88d 3005 	strb.w	r3, [sp, #5]
    6c5e:	4613      	mov	r3, r2
    6c60:	f88d 3004 	strb.w	r3, [sp, #4]

    /* Enable register access from user mode, if enabled from configuration file */
    Call_Ftm_Gpt_Ip_SetUserAccessAllowed((uint32)ftmGptBase[instance]);

    /* Disable all interrupts on this channel */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, FALSE);
    6c64:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6c68:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c6c:	2200      	movs	r2, #0
    6c6e:	4618      	mov	r0, r3
    6c70:	f7ff fbd6 	bl	6420 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear interrupt flags */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6c74:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6c78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c7c:	4611      	mov	r1, r2
    6c7e:	4618      	mov	r0, r3
    6c80:	f7ff fba8 	bl	63d4 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* Disable TOIE flags */
    ftmGptBase[instance]-> SC &= (~(FTM_SC_TOIE_MASK));
    6c84:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c88:	4a35      	ldr	r2, [pc, #212]	; (6d60 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c8e:	681a      	ldr	r2, [r3, #0]
    6c90:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c94:	4932      	ldr	r1, [pc, #200]	; (6d60 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6c96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    6c9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    6c9e:	601a      	str	r2, [r3, #0]
    /* Configure FTM as a Free-Running Timer by setting FTMEN=1, CTNIN=0, MOD=0xFFFF, QUADEN=0, CPWMS=0*/
    Ftm_Gpt_Ip_SetEnFtmModule(instance, TRUE);
    6ca0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ca4:	2101      	movs	r1, #1
    6ca6:	4618      	mov	r0, r3
    6ca8:	f7ff fc34 	bl	6514 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* Initial Counter Value to 0 */
    Ftm_Gpt_Ip_SetCounterInitVal(instance, 0U);
    6cac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cb0:	2100      	movs	r1, #0
    6cb2:	4618      	mov	r0, r3
    6cb4:	f7ff fb62 	bl	637c <Ftm_Gpt_Ip_SetCounterInitVal>
    /* write the Ftm Modulo Register with 0xFFFF */
    Ftm_Gpt_Ip_WriteModulo(instance, 0xFFFFU);
    6cb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6cc0:	4618      	mov	r0, r3
    6cc2:	f7ff fc77 	bl	65b4 <Ftm_Gpt_Ip_WriteModulo>
    /* Set Compare Value register to 0xFFFF */
    Ftm_Gpt_Ip_SetCompareValue(instance, channel, 0xFFFFU);
    6cc6:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6cca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cce:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6cd2:	4618      	mov	r0, r3
    6cd4:	f7ff fc54 	bl	6580 <Ftm_Gpt_Ip_SetCompareValue>
    /* Enter EA_28*/
    SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26();
    6cd8:	f002 f882 	bl	8de0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26>
    /* Clear bit QUADEN */
    ftmGptBase[instance]->QDCTRL &= (~(FTM_QDCTRL_QUADEN_MASK));
    6cdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ce0:	4a1f      	ldr	r2, [pc, #124]	; (6d60 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ce6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    6cea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cee:	491c      	ldr	r1, [pc, #112]	; (6d60 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6cf0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    6cf4:	f022 0201 	bic.w	r2, r2, #1
    6cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    /* Clear bit CPWMS */
    ftmGptBase[instance]->SC &= (~(FTM_SC_CPWMS_MASK));
    6cfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d00:	4a17      	ldr	r2, [pc, #92]	; (6d60 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d06:	681a      	ldr	r2, [r3, #0]
    6d08:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d0c:	4914      	ldr	r1, [pc, #80]	; (6d60 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6d0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    6d12:	f022 0220 	bic.w	r2, r2, #32
    6d16:	601a      	str	r2, [r3, #0]
    /* Exit EA_28*/
    SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26();
    6d18:	f002 f88e 	bl	8e38 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26>

    /* Configure Predef Timer */
    Ftm_Gpt_Ip_SetPrescaler(instance, uPrescaler);
    6d1c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6d20:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d24:	4611      	mov	r1, r2
    6d26:	4618      	mov	r0, r3
    6d28:	f7ff fbce 	bl	64c8 <Ftm_Gpt_Ip_SetPrescaler>
    /* Set FTM counter clock source */
    Ftm_Gpt_Ip_SetClockSource(instance, (Ftm_Gpt_Ip_ClockSource)clocksource);
    6d2c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    6d30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d34:	4611      	mov	r1, r2
    6d36:	4618      	mov	r0, r3
    6d38:	f7ff fba2 	bl	6480 <Ftm_Gpt_Ip_SetClockSource>
    /* Set freeze bits */
    Ftm_Gpt_Ip_SetFreezeBits(instance, bFreezeEnable);
    6d3c:	f89d 2010 	ldrb.w	r2, [sp, #16]
    6d40:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d44:	4611      	mov	r1, r2
    6d46:	4618      	mov	r0, r3
    6d48:	f7ff fae8 	bl	631c <Ftm_Gpt_Ip_SetFreezeBits>
    /* Intialize FTM timer by writing any value to CNT register when CLKS not equal 0 */
    ftmGptBase[instance]->CNT = (uint32)(((uint32)1U << FTM_CNT_COUNT_SHIFT) & FTM_CNT_COUNT_MASK);
    6d4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d50:	4a03      	ldr	r2, [pc, #12]	; (6d60 <Ftm_Gpt_Ip_StartPredefTimer+0x120>)
    6d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d56:	2201      	movs	r2, #1
    6d58:	605a      	str	r2, [r3, #4]
}
    6d5a:	bf00      	nop
    6d5c:	b002      	add	sp, #8
    6d5e:	bd10      	pop	{r4, pc}
    6d60:	0000c1e0 	.word	0x0000c1e0

00006d64 <Ftm_Gpt_Ip_StopPredefTimer>:
* @return     void
* @pre        The driver needs to be initialized
*
*/
void Ftm_Gpt_Ip_StopPredefTimer (uint8 instance, uint8 channel)
{
    6d64:	b500      	push	{lr}
    6d66:	b083      	sub	sp, #12
    6d68:	4603      	mov	r3, r0
    6d6a:	460a      	mov	r2, r1
    6d6c:	f88d 3007 	strb.w	r3, [sp, #7]
    6d70:	4613      	mov	r3, r2
    6d72:	f88d 3006 	strb.w	r3, [sp, #6]
#if FTM_GPT_IP_DEV_ERROR_DETECT == STD_ON
    DevAssert(FTM_INSTANCE_COUNT > instance);
    DevAssert(FTM_CONTROLS_COUNT > channel);
#endif
    /* Set clock source as 'No clock'. This in effect disables the FTM counter */
    Ftm_Gpt_Ip_SetClockSource(instance, FTM_GPT_IP_CLOCK_SOURCE_NONE);
    6d76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d7a:	2100      	movs	r1, #0
    6d7c:	4618      	mov	r0, r3
    6d7e:	f7ff fb7f 	bl	6480 <Ftm_Gpt_Ip_SetClockSource>
    /* Disable all interrupts on this channel */
    Ftm_Gpt_Ip_SetChannelEnableInterrupt(instance, channel, FALSE);
    6d82:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6d86:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d8a:	2200      	movs	r2, #0
    6d8c:	4618      	mov	r0, r3
    6d8e:	f7ff fb47 	bl	6420 <Ftm_Gpt_Ip_SetChannelEnableInterrupt>
    /* Clear interrupt flags */
    Ftm_Gpt_Ip_ClearChInterruptStatusFlag(instance, channel);
    6d92:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6d96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d9a:	4611      	mov	r1, r2
    6d9c:	4618      	mov	r0, r3
    6d9e:	f7ff fb19 	bl	63d4 <Ftm_Gpt_Ip_ClearChInterruptStatusFlag>
    /* clear FTM Enable bit */
    Ftm_Gpt_Ip_SetEnFtmModule(instance, FALSE);
    6da2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6da6:	2100      	movs	r1, #0
    6da8:	4618      	mov	r0, r3
    6daa:	f7ff fbb3 	bl	6514 <Ftm_Gpt_Ip_SetEnFtmModule>
    /* Set Counter register to 0 and Initial Counter Value to 0 */
    Ftm_Gpt_Ip_SetCounterInitVal(instance, 0U);
    6dae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6db2:	2100      	movs	r1, #0
    6db4:	4618      	mov	r0, r3
    6db6:	f7ff fae1 	bl	637c <Ftm_Gpt_Ip_SetCounterInitVal>
    Ftm_Gpt_Ip_SetCounter(instance, 0U);
    6dba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6dbe:	2100      	movs	r1, #0
    6dc0:	4618      	mov	r0, r3
    6dc2:	f7ff faf1 	bl	63a8 <Ftm_Gpt_Ip_SetCounter>
    Ftm_Gpt_Ip_SetCompareValue(instance, channel, 0U);
    6dc6:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6dca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6dce:	2200      	movs	r2, #0
    6dd0:	4618      	mov	r0, r3
    6dd2:	f7ff fbd5 	bl	6580 <Ftm_Gpt_Ip_SetCompareValue>
    Ftm_Gpt_Ip_WriteModulo(instance, 0U );
    6dd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6dda:	2100      	movs	r1, #0
    6ddc:	4618      	mov	r0, r3
    6dde:	f7ff fbe9 	bl	65b4 <Ftm_Gpt_Ip_WriteModulo>
    /* Set bit MSA */
    Ftm_Gpt_Ip_ModeSelectA(instance, channel, FALSE);
    6de2:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6de6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6dea:	2200      	movs	r2, #0
    6dec:	4618      	mov	r0, r3
    6dee:	f7ff fbf7 	bl	65e0 <Ftm_Gpt_Ip_ModeSelectA>
}
    6df2:	bf00      	nop
    6df4:	b003      	add	sp, #12
    6df6:	f85d fb04 	ldr.w	pc, [sp], #4

00006dfa <FTM_1_CH_0_CH_1_ISR>:
/**
 * @brief          Independent interrupt handler.
 * @details        Interrupt handler for FTM module 1 channel 0 - channel 1.
 */
ISR(FTM_1_CH_0_CH_1_ISR)
{
    6dfa:	b500      	push	{lr}
    6dfc:	b083      	sub	sp, #12
    uint8 channel = 0U;
    6dfe:	2300      	movs	r3, #0
    6e00:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 instance = 1U;
    6e04:	2301      	movs	r3, #1
    6e06:	f88d 3006 	strb.w	r3, [sp, #6]

    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6e0a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e12:	4611      	mov	r1, r2
    6e14:	4618      	mov	r0, r3
    6e16:	f7ff fc59 	bl	66cc <Ftm_Gpt_Ip_GetChannelEventStatus>
    6e1a:	4603      	mov	r3, r0
    6e1c:	2b00      	cmp	r3, #0
    6e1e:	d007      	beq.n	6e30 <FTM_1_CH_0_CH_1_ISR+0x36>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6e20:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e24:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e28:	4611      	mov	r1, r2
    6e2a:	4618      	mov	r0, r3
    6e2c:	f7ff fc6c 	bl	6708 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    channel++;
    6e30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e34:	3301      	adds	r3, #1
    6e36:	f88d 3007 	strb.w	r3, [sp, #7]
    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6e3a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e42:	4611      	mov	r1, r2
    6e44:	4618      	mov	r0, r3
    6e46:	f7ff fc41 	bl	66cc <Ftm_Gpt_Ip_GetChannelEventStatus>
    6e4a:	4603      	mov	r3, r0
    6e4c:	2b00      	cmp	r3, #0
    6e4e:	d007      	beq.n	6e60 <FTM_1_CH_0_CH_1_ISR+0x66>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6e50:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e54:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e58:	4611      	mov	r1, r2
    6e5a:	4618      	mov	r0, r3
    6e5c:	f7ff fc54 	bl	6708 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    EXIT_INTERRUPT();
    6e60:	f3bf 8f4f 	dsb	sy
}
    6e64:	bf00      	nop
    6e66:	b003      	add	sp, #12
    6e68:	f85d fb04 	ldr.w	pc, [sp], #4

00006e6c <FTM_1_CH_2_CH_3_ISR>:
/**
 * @brief          Independent interrupt handler.
 * @details        Interrupt handler for FTM module 1 channel 2 - channel 3.
 */
ISR(FTM_1_CH_2_CH_3_ISR)
{
    6e6c:	b500      	push	{lr}
    6e6e:	b083      	sub	sp, #12
    uint8 channel = 2U;
    6e70:	2302      	movs	r3, #2
    6e72:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 instance = 1U;
    6e76:	2301      	movs	r3, #1
    6e78:	f88d 3006 	strb.w	r3, [sp, #6]

    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6e7c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e80:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e84:	4611      	mov	r1, r2
    6e86:	4618      	mov	r0, r3
    6e88:	f7ff fc20 	bl	66cc <Ftm_Gpt_Ip_GetChannelEventStatus>
    6e8c:	4603      	mov	r3, r0
    6e8e:	2b00      	cmp	r3, #0
    6e90:	d007      	beq.n	6ea2 <FTM_1_CH_2_CH_3_ISR+0x36>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6e92:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e96:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6e9a:	4611      	mov	r1, r2
    6e9c:	4618      	mov	r0, r3
    6e9e:	f7ff fc33 	bl	6708 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    channel++;
    6ea2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ea6:	3301      	adds	r3, #1
    6ea8:	f88d 3007 	strb.w	r3, [sp, #7]
    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6eac:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6eb0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6eb4:	4611      	mov	r1, r2
    6eb6:	4618      	mov	r0, r3
    6eb8:	f7ff fc08 	bl	66cc <Ftm_Gpt_Ip_GetChannelEventStatus>
    6ebc:	4603      	mov	r3, r0
    6ebe:	2b00      	cmp	r3, #0
    6ec0:	d007      	beq.n	6ed2 <FTM_1_CH_2_CH_3_ISR+0x66>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6ec2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6ec6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6eca:	4611      	mov	r1, r2
    6ecc:	4618      	mov	r0, r3
    6ece:	f7ff fc1b 	bl	6708 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    EXIT_INTERRUPT();
    6ed2:	f3bf 8f4f 	dsb	sy
}
    6ed6:	bf00      	nop
    6ed8:	b003      	add	sp, #12
    6eda:	f85d fb04 	ldr.w	pc, [sp], #4

00006ede <FTM_1_CH_4_CH_5_ISR>:
/**
 * @brief          Independent interrupt handler.
 * @details        Interrupt handler for FTM module 1 channel 4 - channel 5.
 */
ISR(FTM_1_CH_4_CH_5_ISR)
{
    6ede:	b500      	push	{lr}
    6ee0:	b083      	sub	sp, #12
    uint8 channel = 4U;
    6ee2:	2304      	movs	r3, #4
    6ee4:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 instance = 1U;
    6ee8:	2301      	movs	r3, #1
    6eea:	f88d 3006 	strb.w	r3, [sp, #6]

    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6eee:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6ef2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6ef6:	4611      	mov	r1, r2
    6ef8:	4618      	mov	r0, r3
    6efa:	f7ff fbe7 	bl	66cc <Ftm_Gpt_Ip_GetChannelEventStatus>
    6efe:	4603      	mov	r3, r0
    6f00:	2b00      	cmp	r3, #0
    6f02:	d007      	beq.n	6f14 <FTM_1_CH_4_CH_5_ISR+0x36>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6f04:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6f08:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6f0c:	4611      	mov	r1, r2
    6f0e:	4618      	mov	r0, r3
    6f10:	f7ff fbfa 	bl	6708 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    channel++;
    6f14:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f18:	3301      	adds	r3, #1
    6f1a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6f1e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6f22:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6f26:	4611      	mov	r1, r2
    6f28:	4618      	mov	r0, r3
    6f2a:	f7ff fbcf 	bl	66cc <Ftm_Gpt_Ip_GetChannelEventStatus>
    6f2e:	4603      	mov	r3, r0
    6f30:	2b00      	cmp	r3, #0
    6f32:	d007      	beq.n	6f44 <FTM_1_CH_4_CH_5_ISR+0x66>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6f34:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6f38:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6f3c:	4611      	mov	r1, r2
    6f3e:	4618      	mov	r0, r3
    6f40:	f7ff fbe2 	bl	6708 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    EXIT_INTERRUPT();
    6f44:	f3bf 8f4f 	dsb	sy
}
    6f48:	bf00      	nop
    6f4a:	b003      	add	sp, #12
    6f4c:	f85d fb04 	ldr.w	pc, [sp], #4

00006f50 <FTM_1_CH_6_CH_7_ISR>:
/**
 * @brief          Independent interrupt handler.
 * @details        Interrupt handler for FTM module 1 channel 6 - channel 7.
 */
ISR(FTM_1_CH_6_CH_7_ISR)
{
    6f50:	b500      	push	{lr}
    6f52:	b083      	sub	sp, #12
    uint8 channel = 6U;
    6f54:	2306      	movs	r3, #6
    6f56:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 instance = 1U;
    6f5a:	2301      	movs	r3, #1
    6f5c:	f88d 3006 	strb.w	r3, [sp, #6]

    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6f60:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6f64:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6f68:	4611      	mov	r1, r2
    6f6a:	4618      	mov	r0, r3
    6f6c:	f7ff fbae 	bl	66cc <Ftm_Gpt_Ip_GetChannelEventStatus>
    6f70:	4603      	mov	r3, r0
    6f72:	2b00      	cmp	r3, #0
    6f74:	d007      	beq.n	6f86 <FTM_1_CH_6_CH_7_ISR+0x36>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6f76:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6f7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6f7e:	4611      	mov	r1, r2
    6f80:	4618      	mov	r0, r3
    6f82:	f7ff fbc1 	bl	6708 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    channel++;
    6f86:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f8a:	3301      	adds	r3, #1
    6f8c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (Ftm_Gpt_Ip_GetChannelEventStatus(instance, channel))
    6f90:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6f94:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6f98:	4611      	mov	r1, r2
    6f9a:	4618      	mov	r0, r3
    6f9c:	f7ff fb96 	bl	66cc <Ftm_Gpt_Ip_GetChannelEventStatus>
    6fa0:	4603      	mov	r3, r0
    6fa2:	2b00      	cmp	r3, #0
    6fa4:	d007      	beq.n	6fb6 <FTM_1_CH_6_CH_7_ISR+0x66>
    {
        Ftm_Gpt_Ip_ProcessCommonInterrupt(instance, channel);
    6fa6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6faa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6fae:	4611      	mov	r1, r2
    6fb0:	4618      	mov	r0, r3
    6fb2:	f7ff fba9 	bl	6708 <Ftm_Gpt_Ip_ProcessCommonInterrupt>
    }

    EXIT_INTERRUPT();
    6fb6:	f3bf 8f4f 	dsb	sy
}
    6fba:	bf00      	nop
    6fbc:	b003      	add	sp, #12
    6fbe:	f85d fb04 	ldr.w	pc, [sp], #4
    6fc2:	bf00      	nop

00006fc4 <Gpt_ValidateChannelStatus>:
(
    uint8 u8ServiceId,
    Gpt_ChannelType channel,
    uint32 coreID
)
{
    6fc4:	b500      	push	{lr}
    6fc6:	b085      	sub	sp, #20
    6fc8:	4603      	mov	r3, r0
    6fca:	9200      	str	r2, [sp, #0]
    6fcc:	f88d 3007 	strb.w	r3, [sp, #7]
    6fd0:	460b      	mov	r3, r1
    6fd2:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType returnValue = (Std_ReturnType)E_NOT_OK;
    6fd6:	2301      	movs	r3, #1
    6fd8:	f88d 300f 	strb.w	r3, [sp, #15]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(u8ServiceId, channel, coreID))
    {
#endif
        if(channel < GPT_HW_CHANNEL_NUM)
    6fdc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6fe0:	2b06      	cmp	r3, #6
    6fe2:	d816      	bhi.n	7012 <Gpt_ValidateChannelStatus+0x4e>
                    );
                }
                else
                {
    #else
                    if (GPT_STATUS_RUNNING == Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    6fe4:	f89d 1006 	ldrb.w	r1, [sp, #6]
    6fe8:	480d      	ldr	r0, [pc, #52]	; (7020 <Gpt_ValidateChannelStatus+0x5c>)
    6fea:	9a00      	ldr	r2, [sp, #0]
    6fec:	4613      	mov	r3, r2
    6fee:	00db      	lsls	r3, r3, #3
    6ff0:	1a9b      	subs	r3, r3, r2
    6ff2:	440b      	add	r3, r1
    6ff4:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
    6ff8:	2b04      	cmp	r3, #4
    6ffa:	d107      	bne.n	700c <Gpt_ValidateChannelStatus+0x48>
                    {
                        (void)Det_ReportRuntimeError\
    6ffc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7000:	230b      	movs	r3, #11
    7002:	2100      	movs	r1, #0
    7004:	2064      	movs	r0, #100	; 0x64
    7006:	f004 fc9d 	bl	b944 <Det_ReportRuntimeError>
    700a:	e002      	b.n	7012 <Gpt_ValidateChannelStatus+0x4e>
                        );
                    }
                    else
                    {
    #endif
                        returnValue = (Std_ReturnType)E_OK;
    700c:	2300      	movs	r3, #0
    700e:	f88d 300f 	strb.w	r3, [sp, #15]
    #endif
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
    return returnValue;
    7012:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7016:	4618      	mov	r0, r3
    7018:	b005      	add	sp, #20
    701a:	f85d fb04 	ldr.w	pc, [sp], #4
    701e:	bf00      	nop
    7020:	1fff9040 	.word	0x1fff9040

00007024 <Gpt_ValidateMode>:
static inline Std_ReturnType Gpt_ValidateMode
(
	uint8 u8ServiceId,
	uint32 coreID
)
{
    7024:	b500      	push	{lr}
    7026:	b085      	sub	sp, #20
    7028:	4603      	mov	r3, r0
    702a:	9100      	str	r1, [sp, #0]
    702c:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType returnValue;
    if (GPT_MODE_SLEEP == Gpt_eMode[coreID])
    7030:	4a0c      	ldr	r2, [pc, #48]	; (7064 <Gpt_ValidateMode+0x40>)
    7032:	9b00      	ldr	r3, [sp, #0]
    7034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7038:	2b01      	cmp	r3, #1
    703a:	d10a      	bne.n	7052 <Gpt_ValidateMode+0x2e>
    {
        (void)Det_ReportRuntimeError\
    703c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7040:	230c      	movs	r3, #12
    7042:	2100      	movs	r1, #0
    7044:	2064      	movs	r0, #100	; 0x64
    7046:	f004 fc7d 	bl	b944 <Det_ReportRuntimeError>
            (uint16)GPT_MODULE_ID,\
            (uint8)GPT_INSTANCE_ID,\
            (uint8)u8ServiceId,\
            (uint8)GPT_E_MODE\
        );
		returnValue = (Std_ReturnType)E_NOT_OK;
    704a:	2301      	movs	r3, #1
    704c:	f88d 300f 	strb.w	r3, [sp, #15]
    7050:	e002      	b.n	7058 <Gpt_ValidateMode+0x34>
    }
    else
    {
        returnValue = (Std_ReturnType)E_OK;
    7052:	2300      	movs	r3, #0
    7054:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return returnValue;
    7058:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    705c:	4618      	mov	r0, r3
    705e:	b005      	add	sp, #20
    7060:	f85d fb04 	ldr.w	pc, [sp], #4
    7064:	1fff9038 	.word	0x1fff9038

00007068 <Gpt_ConvertChannelIndexToChannel>:
 *
 * */
static inline Gpt_ChannelType Gpt_ConvertChannelIndexToChannel(Gpt_ChannelType ChannelIndex,
                                                                              uint32 coreID
                                                                              )
{
    7068:	b084      	sub	sp, #16
    706a:	4603      	mov	r3, r0
    706c:	9100      	str	r1, [sp, #0]
    706e:	f88d 3007 	strb.w	r3, [sp, #7]
    Gpt_ChannelType Channel;

    for (Channel = 0U; Channel < GPT_HW_CHANNEL_NUM; ++Channel)
    7072:	2300      	movs	r3, #0
    7074:	f88d 300f 	strb.w	r3, [sp, #15]
    7078:	e010      	b.n	709c <Gpt_ConvertChannelIndexToChannel+0x34>
    {
        if(ChannelIndex == (*Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap)[Channel])
    707a:	4a0e      	ldr	r2, [pc, #56]	; (70b4 <Gpt_ConvertChannelIndexToChannel+0x4c>)
    707c:	9b00      	ldr	r3, [sp, #0]
    707e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7082:	695a      	ldr	r2, [r3, #20]
    7084:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7088:	5cd3      	ldrb	r3, [r2, r3]
    708a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    708e:	429a      	cmp	r2, r3
    7090:	d009      	beq.n	70a6 <Gpt_ConvertChannelIndexToChannel+0x3e>
    for (Channel = 0U; Channel < GPT_HW_CHANNEL_NUM; ++Channel)
    7092:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7096:	3301      	adds	r3, #1
    7098:	f88d 300f 	strb.w	r3, [sp, #15]
    709c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70a0:	2b06      	cmp	r3, #6
    70a2:	d9ea      	bls.n	707a <Gpt_ConvertChannelIndexToChannel+0x12>
    70a4:	e000      	b.n	70a8 <Gpt_ConvertChannelIndexToChannel+0x40>
        {
            break;
    70a6:	bf00      	nop
        }
    }
    return Channel;
    70a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    70ac:	4618      	mov	r0, r3
    70ae:	b004      	add	sp, #16
    70b0:	4770      	bx	lr
    70b2:	bf00      	nop
    70b4:	1fff903c 	.word	0x1fff903c

000070b8 <Gpt_CheckStatusNotificationEnabled>:
 * @pre         Gpt_Init,  must be called before.
 *
 *
 * */
static inline void Gpt_CheckStatusNotificationEnabled(uint32 coreID)
{
    70b8:	b500      	push	{lr}
    70ba:	b085      	sub	sp, #20
    70bc:	9001      	str	r0, [sp, #4]
    Gpt_ChannelType channel;
    Gpt_ChannelType ChannelIndex;

    /*Implements the behaviour for normal mode*/
    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    70be:	2300      	movs	r3, #0
    70c0:	f88d 300f 	strb.w	r3, [sp, #15]
    70c4:	e05d      	b.n	7182 <Gpt_CheckStatusNotificationEnabled+0xca>
    {
        channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    70c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70ca:	9901      	ldr	r1, [sp, #4]
    70cc:	4618      	mov	r0, r3
    70ce:	f7ff ffcb 	bl	7068 <Gpt_ConvertChannelIndexToChannel>
    70d2:	4603      	mov	r3, r0
    70d4:	f88d 300e 	strb.w	r3, [sp, #14]
        if(channel < GPT_HW_CHANNEL_NUM)
    70d8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    70dc:	2b06      	cmp	r3, #6
    70de:	d84b      	bhi.n	7178 <Gpt_CheckStatusNotificationEnabled+0xc0>
        {
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
            if (TRUE == Gpt_aChannelInfo[coreID][channel].bNotificationEnabled)
    70e0:	f89d 100e 	ldrb.w	r1, [sp, #14]
    70e4:	482e      	ldr	r0, [pc, #184]	; (71a0 <Gpt_CheckStatusNotificationEnabled+0xe8>)
    70e6:	9a01      	ldr	r2, [sp, #4]
    70e8:	4613      	mov	r3, r2
    70ea:	00db      	lsls	r3, r3, #3
    70ec:	1a9b      	subs	r3, r3, r2
    70ee:	440b      	add	r3, r1
    70f0:	00db      	lsls	r3, r3, #3
    70f2:	4403      	add	r3, r0
    70f4:	791b      	ldrb	r3, [r3, #4]
    70f6:	2b00      	cmp	r3, #0
    70f8:	d011      	beq.n	711e <Gpt_CheckStatusNotificationEnabled+0x66>
            {
                /* Enable hardware interrupts */
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    70fa:	4a2a      	ldr	r2, [pc, #168]	; (71a4 <Gpt_CheckStatusNotificationEnabled+0xec>)
    70fc:	9b01      	ldr	r3, [sp, #4]
    70fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7102:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    7104:	f89d 200f 	ldrb.w	r2, [sp, #15]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7108:	4613      	mov	r3, r2
    710a:	005b      	lsls	r3, r3, #1
    710c:	4413      	add	r3, r2
    710e:	00db      	lsls	r3, r3, #3
    7110:	440b      	add	r3, r1
    7112:	3314      	adds	r3, #20
    7114:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    7116:	4618      	mov	r0, r3
    7118:	f000 ffc4 	bl	80a4 <Gpt_Ipw_EnableInterrupt>
    711c:	e02c      	b.n	7178 <Gpt_CheckStatusNotificationEnabled+0xc0>
            else
            {
#endif
                /* Disable hardware interrupts if the channel is not running in the ONE-SHOT mode.
                This is needed because the channel state is updated by ISR for ONE-SHOT mode */
                if((GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus) || \
    711e:	f89d 100e 	ldrb.w	r1, [sp, #14]
    7122:	481f      	ldr	r0, [pc, #124]	; (71a0 <Gpt_CheckStatusNotificationEnabled+0xe8>)
    7124:	9a01      	ldr	r2, [sp, #4]
    7126:	4613      	mov	r3, r2
    7128:	00db      	lsls	r3, r3, #3
    712a:	1a9b      	subs	r3, r3, r2
    712c:	440b      	add	r3, r1
    712e:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
    7132:	2b04      	cmp	r3, #4
    7134:	d10f      	bne.n	7156 <Gpt_CheckStatusNotificationEnabled+0x9e>
                    (GPT_CH_MODE_CONTINUOUS == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    7136:	4a1b      	ldr	r2, [pc, #108]	; (71a4 <Gpt_CheckStatusNotificationEnabled+0xec>)
    7138:	9b01      	ldr	r3, [sp, #4]
    713a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    713e:	6859      	ldr	r1, [r3, #4]
    7140:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7144:	4613      	mov	r3, r2
    7146:	005b      	lsls	r3, r3, #1
    7148:	4413      	add	r3, r2
    714a:	00db      	lsls	r3, r3, #3
    714c:	440b      	add	r3, r1
    714e:	3310      	adds	r3, #16
    7150:	681b      	ldr	r3, [r3, #0]
                if((GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus) || \
    7152:	2b00      	cmp	r3, #0
    7154:	d110      	bne.n	7178 <Gpt_CheckStatusNotificationEnabled+0xc0>
                    )
                {
                    /*Disable hardware interrupts*/
                    Gpt_Ipw_DisableInterrupt
                    (
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7156:	4a13      	ldr	r2, [pc, #76]	; (71a4 <Gpt_CheckStatusNotificationEnabled+0xec>)
    7158:	9b01      	ldr	r3, [sp, #4]
    715a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    715e:	6859      	ldr	r1, [r3, #4]
                    Gpt_Ipw_DisableInterrupt
    7160:	f89d 200f 	ldrb.w	r2, [sp, #15]
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7164:	4613      	mov	r3, r2
    7166:	005b      	lsls	r3, r3, #1
    7168:	4413      	add	r3, r2
    716a:	00db      	lsls	r3, r3, #3
    716c:	440b      	add	r3, r1
    716e:	3314      	adds	r3, #20
    7170:	681b      	ldr	r3, [r3, #0]
                    Gpt_Ipw_DisableInterrupt
    7172:	4618      	mov	r0, r3
    7174:	f000 ffb1 	bl	80da <Gpt_Ipw_DisableInterrupt>
    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7178:	f89d 300f 	ldrb.w	r3, [sp, #15]
    717c:	3301      	adds	r3, #1
    717e:	f88d 300f 	strb.w	r3, [sp, #15]
    7182:	4a08      	ldr	r2, [pc, #32]	; (71a4 <Gpt_CheckStatusNotificationEnabled+0xec>)
    7184:	9b01      	ldr	r3, [sp, #4]
    7186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    718a:	781b      	ldrb	r3, [r3, #0]
    718c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7190:	429a      	cmp	r2, r3
    7192:	d398      	bcc.n	70c6 <Gpt_CheckStatusNotificationEnabled+0xe>
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
            }
#endif
        }
    }
}
    7194:	bf00      	nop
    7196:	bf00      	nop
    7198:	b005      	add	sp, #20
    719a:	f85d fb04 	ldr.w	pc, [sp], #4
    719e:	bf00      	nop
    71a0:	1fff9040 	.word	0x1fff9040
    71a4:	1fff903c 	.word	0x1fff903c

000071a8 <Gpt_CheckStatusWakeupEnabled>:
 * @pre         Gpt_Init, Gpt_SetMode must be called before.
 *
 *
 * */
static inline void Gpt_CheckStatusWakeupEnabled(uint32 coreID)
{
    71a8:	b500      	push	{lr}
    71aa:	b089      	sub	sp, #36	; 0x24
    71ac:	9001      	str	r0, [sp, #4]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    71ae:	2300      	movs	r3, #0
    71b0:	f88d 3008 	strb.w	r3, [sp, #8]
    71b4:	2300      	movs	r3, #0
    71b6:	9303      	str	r3, [sp, #12]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    71b8:	ab02      	add	r3, sp, #8
    71ba:	9306      	str	r3, [sp, #24]
    Gpt_ValueType uElapsedTime = 0U;
    71bc:	2300      	movs	r3, #0
    71be:	9305      	str	r3, [sp, #20]
#endif
    Gpt_ChannelType ChannelIndex;
    Gpt_ChannelType channel;

    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    71c0:	2300      	movs	r3, #0
    71c2:	f88d 301f 	strb.w	r3, [sp, #31]
    71c6:	e0a8      	b.n	731a <Gpt_CheckStatusWakeupEnabled+0x172>
    {
        channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    71c8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    71cc:	9901      	ldr	r1, [sp, #4]
    71ce:	4618      	mov	r0, r3
    71d0:	f7ff ff4a 	bl	7068 <Gpt_ConvertChannelIndexToChannel>
    71d4:	4603      	mov	r3, r0
    71d6:	f88d 3013 	strb.w	r3, [sp, #19]
        if(channel < GPT_HW_CHANNEL_NUM)
    71da:	f89d 3013 	ldrb.w	r3, [sp, #19]
    71de:	2b06      	cmp	r3, #6
    71e0:	f200 8096 	bhi.w	7310 <Gpt_CheckStatusWakeupEnabled+0x168>
        {
            if (TRUE == Gpt_aChannelInfo[coreID][channel].bWakeupEnabled)
    71e4:	f89d 1013 	ldrb.w	r1, [sp, #19]
    71e8:	4853      	ldr	r0, [pc, #332]	; (7338 <Gpt_CheckStatusWakeupEnabled+0x190>)
    71ea:	9a01      	ldr	r2, [sp, #4]
    71ec:	4613      	mov	r3, r2
    71ee:	00db      	lsls	r3, r3, #3
    71f0:	1a9b      	subs	r3, r3, r2
    71f2:	440b      	add	r3, r1
    71f4:	00db      	lsls	r3, r3, #3
    71f6:	4403      	add	r3, r0
    71f8:	795b      	ldrb	r3, [r3, #5]
    71fa:	2b00      	cmp	r3, #0
    71fc:	d011      	beq.n	7222 <Gpt_CheckStatusWakeupEnabled+0x7a>
            {
                /*Enable hardware interrupts*/
                Gpt_Ipw_EnableInterrupt(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    71fe:	4a4f      	ldr	r2, [pc, #316]	; (733c <Gpt_CheckStatusWakeupEnabled+0x194>)
    7200:	9b01      	ldr	r3, [sp, #4]
    7202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7206:	6859      	ldr	r1, [r3, #4]
    7208:	f89d 201f 	ldrb.w	r2, [sp, #31]
    720c:	4613      	mov	r3, r2
    720e:	005b      	lsls	r3, r3, #1
    7210:	4413      	add	r3, r2
    7212:	00db      	lsls	r3, r3, #3
    7214:	440b      	add	r3, r1
    7216:	3314      	adds	r3, #20
    7218:	681b      	ldr	r3, [r3, #0]
    721a:	4618      	mov	r0, r3
    721c:	f000 ff42 	bl	80a4 <Gpt_Ipw_EnableInterrupt>
    7220:	e076      	b.n	7310 <Gpt_CheckStatusWakeupEnabled+0x168>
            }
            else
            {
                /*Disable hardware interrupts*/
                Gpt_Ipw_DisableInterrupt(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    7222:	4a46      	ldr	r2, [pc, #280]	; (733c <Gpt_CheckStatusWakeupEnabled+0x194>)
    7224:	9b01      	ldr	r3, [sp, #4]
    7226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    722a:	6859      	ldr	r1, [r3, #4]
    722c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    7230:	4613      	mov	r3, r2
    7232:	005b      	lsls	r3, r3, #1
    7234:	4413      	add	r3, r2
    7236:	00db      	lsls	r3, r3, #3
    7238:	440b      	add	r3, r1
    723a:	3314      	adds	r3, #20
    723c:	681b      	ldr	r3, [r3, #0]
    723e:	4618      	mov	r0, r3
    7240:	f000 ff4b 	bl	80da <Gpt_Ipw_DisableInterrupt>
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                /*Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs
                can change the logical channel state between the checking of logical channel
                state and timestamp retrieval*/
                /* Get the elapsed  time  for later use by other API calls*/
                uElapsedTime = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    7244:	4a3d      	ldr	r2, [pc, #244]	; (733c <Gpt_CheckStatusWakeupEnabled+0x194>)
    7246:	9b01      	ldr	r3, [sp, #4]
    7248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    724c:	6859      	ldr	r1, [r3, #4]
    724e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    7252:	4613      	mov	r3, r2
    7254:	005b      	lsls	r3, r3, #1
    7256:	4413      	add	r3, r2
    7258:	00db      	lsls	r3, r3, #3
    725a:	440b      	add	r3, r1
    725c:	3314      	adds	r3, #20
    725e:	681b      	ldr	r3, [r3, #0]
    7260:	9906      	ldr	r1, [sp, #24]
    7262:	4618      	mov	r0, r3
    7264:	f000 fef3 	bl	804e <Gpt_Ipw_GetTimeElapsed>
    7268:	9005      	str	r0, [sp, #20]
#endif

                /*Stop  the running timer*/
                if (GPT_STATUS_RUNNING == Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    726a:	f89d 1013 	ldrb.w	r1, [sp, #19]
    726e:	4832      	ldr	r0, [pc, #200]	; (7338 <Gpt_CheckStatusWakeupEnabled+0x190>)
    7270:	9a01      	ldr	r2, [sp, #4]
    7272:	4613      	mov	r3, r2
    7274:	00db      	lsls	r3, r3, #3
    7276:	1a9b      	subs	r3, r3, r2
    7278:	440b      	add	r3, r1
    727a:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
    727e:	2b04      	cmp	r3, #4
    7280:	d146      	bne.n	7310 <Gpt_CheckStatusWakeupEnabled+0x168>
                {
                    if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    7282:	f89d 3008 	ldrb.w	r3, [sp, #8]
    7286:	2b00      	cmp	r3, #0
    7288:	d01b      	beq.n	72c2 <Gpt_CheckStatusWakeupEnabled+0x11a>
                        (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    728a:	4a2c      	ldr	r2, [pc, #176]	; (733c <Gpt_CheckStatusWakeupEnabled+0x194>)
    728c:	9b01      	ldr	r3, [sp, #4]
    728e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7292:	6859      	ldr	r1, [r3, #4]
    7294:	f89d 201f 	ldrb.w	r2, [sp, #31]
    7298:	4613      	mov	r3, r2
    729a:	005b      	lsls	r3, r3, #1
    729c:	4413      	add	r3, r2
    729e:	00db      	lsls	r3, r3, #3
    72a0:	440b      	add	r3, r1
    72a2:	3310      	adds	r3, #16
    72a4:	681b      	ldr	r3, [r3, #0]
                    if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    72a6:	2b01      	cmp	r3, #1
    72a8:	d10b      	bne.n	72c2 <Gpt_CheckStatusWakeupEnabled+0x11a>
                        )
                    {
                        /*This action could be executed only when the function is called
                        during a critical section implemented by disabling all interrupts*/
                        /*Set the channel status to EXPIRED*/
                        Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_EXPIRED;
    72aa:	f89d 1013 	ldrb.w	r1, [sp, #19]
    72ae:	4822      	ldr	r0, [pc, #136]	; (7338 <Gpt_CheckStatusWakeupEnabled+0x190>)
    72b0:	9a01      	ldr	r2, [sp, #4]
    72b2:	4613      	mov	r3, r2
    72b4:	00db      	lsls	r3, r3, #3
    72b6:	1a9b      	subs	r3, r3, r2
    72b8:	440b      	add	r3, r1
    72ba:	2203      	movs	r2, #3
    72bc:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    72c0:	e015      	b.n	72ee <Gpt_CheckStatusWakeupEnabled+0x146>
                    }
                    else
                    {
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                        /* Store the stopping time for later use by other API calls*/
                        Gpt_aStopTime[coreID][channel] = uElapsedTime;
    72c2:	f89d 1013 	ldrb.w	r1, [sp, #19]
    72c6:	481e      	ldr	r0, [pc, #120]	; (7340 <Gpt_CheckStatusWakeupEnabled+0x198>)
    72c8:	9a01      	ldr	r2, [sp, #4]
    72ca:	4613      	mov	r3, r2
    72cc:	00db      	lsls	r3, r3, #3
    72ce:	1a9b      	subs	r3, r3, r2
    72d0:	440b      	add	r3, r1
    72d2:	9a05      	ldr	r2, [sp, #20]
    72d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
#endif
                        /* Set the channel status to STOPPED*/
                        Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_STOPPED;
    72d8:	f89d 1013 	ldrb.w	r1, [sp, #19]
    72dc:	4816      	ldr	r0, [pc, #88]	; (7338 <Gpt_CheckStatusWakeupEnabled+0x190>)
    72de:	9a01      	ldr	r2, [sp, #4]
    72e0:	4613      	mov	r3, r2
    72e2:	00db      	lsls	r3, r3, #3
    72e4:	1a9b      	subs	r3, r3, r2
    72e6:	440b      	add	r3, r1
    72e8:	2202      	movs	r2, #2
    72ea:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
                    }
                    /* Call low level stop timer */
                    Gpt_Ipw_StopTimer
                    (
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    72ee:	4a13      	ldr	r2, [pc, #76]	; (733c <Gpt_CheckStatusWakeupEnabled+0x194>)
    72f0:	9b01      	ldr	r3, [sp, #4]
    72f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72f6:	6859      	ldr	r1, [r3, #4]
                    Gpt_Ipw_StopTimer
    72f8:	f89d 201f 	ldrb.w	r2, [sp, #31]
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    72fc:	4613      	mov	r3, r2
    72fe:	005b      	lsls	r3, r3, #1
    7300:	4413      	add	r3, r2
    7302:	00db      	lsls	r3, r3, #3
    7304:	440b      	add	r3, r1
    7306:	3314      	adds	r3, #20
    7308:	681b      	ldr	r3, [r3, #0]
                    Gpt_Ipw_StopTimer
    730a:	4618      	mov	r0, r3
    730c:	f000 feb5 	bl	807a <Gpt_Ipw_StopTimer>
    for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7310:	f89d 301f 	ldrb.w	r3, [sp, #31]
    7314:	3301      	adds	r3, #1
    7316:	f88d 301f 	strb.w	r3, [sp, #31]
    731a:	4a08      	ldr	r2, [pc, #32]	; (733c <Gpt_CheckStatusWakeupEnabled+0x194>)
    731c:	9b01      	ldr	r3, [sp, #4]
    731e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7322:	781b      	ldrb	r3, [r3, #0]
    7324:	f89d 201f 	ldrb.w	r2, [sp, #31]
    7328:	429a      	cmp	r2, r3
    732a:	f4ff af4d 	bcc.w	71c8 <Gpt_CheckStatusWakeupEnabled+0x20>
                    );
                }
            }
        }
    }
}
    732e:	bf00      	nop
    7330:	bf00      	nop
    7332:	b009      	add	sp, #36	; 0x24
    7334:	f85d fb04 	ldr.w	pc, [sp], #4
    7338:	1fff9040 	.word	0x1fff9040
    733c:	1fff903c 	.word	0x1fff903c
    7340:	1fff9078 	.word	0x1fff9078

00007344 <Gpt_Init>:
*
* @pre            The data structure including the configuration set required for initializing the GPT driver..
* @implements     Gpt_Init_Activity
*/
void Gpt_Init(const Gpt_ConfigType * configPtr)
{
    7344:	b500      	push	{lr}
    7346:	b087      	sub	sp, #28
    7348:	9001      	str	r0, [sp, #4]
    Gpt_ChannelType ChannelIndex;
    Gpt_ChannelType channel;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    734a:	2300      	movs	r3, #0
    734c:	9304      	str	r3, [sp, #16]
        #else
            Gpt_pConfig[coreID] = &Gpt_Config;
        #endif
            (void)configPtr;
    #else
            Gpt_pConfig[coreID] = configPtr;
    734e:	4943      	ldr	r1, [pc, #268]	; (745c <Gpt_Init+0x118>)
    7350:	9b04      	ldr	r3, [sp, #16]
    7352:	9a01      	ldr	r2, [sp, #4]
    7354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    #endif

#if(GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON)
            /*Initialize and Start Predef Timers.*/
            Gpt_Ipw_StartPredefTimer(Gpt_pConfig[coreID]);
    7358:	4a40      	ldr	r2, [pc, #256]	; (745c <Gpt_Init+0x118>)
    735a:	9b04      	ldr	r3, [sp, #16]
    735c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7360:	4618      	mov	r0, r3
    7362:	f000 fec3 	bl	80ec <Gpt_Ipw_StartPredefTimer>
#endif
            Gpt_Ipw_InitInstances(Gpt_pConfig[coreID]);
    7366:	4a3d      	ldr	r2, [pc, #244]	; (745c <Gpt_Init+0x118>)
    7368:	9b04      	ldr	r3, [sp, #16]
    736a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    736e:	4618      	mov	r0, r3
    7370:	f000 fe02 	bl	7f78 <Gpt_Ipw_InitInstances>

            /*Initialize for each channel the runtime status informations.*/
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7374:	2300      	movs	r3, #0
    7376:	f88d 3017 	strb.w	r3, [sp, #23]
    737a:	e05c      	b.n	7436 <Gpt_Init+0xf2>
            {
                channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    737c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7380:	9904      	ldr	r1, [sp, #16]
    7382:	4618      	mov	r0, r3
    7384:	f7ff fe70 	bl	7068 <Gpt_ConvertChannelIndexToChannel>
    7388:	4603      	mov	r3, r0
    738a:	f88d 300f 	strb.w	r3, [sp, #15]
                if(channel < GPT_HW_CHANNEL_NUM)
    738e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7392:	2b06      	cmp	r3, #6
    7394:	d839      	bhi.n	740a <Gpt_Init+0xc6>
                {
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
                    /*Disable notification*/
                    Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = FALSE;
    7396:	f89d 100f 	ldrb.w	r1, [sp, #15]
    739a:	4831      	ldr	r0, [pc, #196]	; (7460 <Gpt_Init+0x11c>)
    739c:	9a04      	ldr	r2, [sp, #16]
    739e:	4613      	mov	r3, r2
    73a0:	00db      	lsls	r3, r3, #3
    73a2:	1a9b      	subs	r3, r3, r2
    73a4:	440b      	add	r3, r1
    73a6:	00db      	lsls	r3, r3, #3
    73a8:	4403      	add	r3, r0
    73aa:	2200      	movs	r2, #0
    73ac:	711a      	strb	r2, [r3, #4]
#endif

#if ((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON))
                    /*Disable wakeup*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = FALSE;
    73ae:	f89d 100f 	ldrb.w	r1, [sp, #15]
    73b2:	482b      	ldr	r0, [pc, #172]	; (7460 <Gpt_Init+0x11c>)
    73b4:	9a04      	ldr	r2, [sp, #16]
    73b6:	4613      	mov	r3, r2
    73b8:	00db      	lsls	r3, r3, #3
    73ba:	1a9b      	subs	r3, r3, r2
    73bc:	440b      	add	r3, r1
    73be:	00db      	lsls	r3, r3, #3
    73c0:	4403      	add	r3, r0
    73c2:	2200      	movs	r2, #0
    73c4:	715a      	strb	r2, [r3, #5]
                    /*Clear wakeup generation status*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupGenerated = FALSE;
    73c6:	f89d 100f 	ldrb.w	r1, [sp, #15]
    73ca:	4825      	ldr	r0, [pc, #148]	; (7460 <Gpt_Init+0x11c>)
    73cc:	9a04      	ldr	r2, [sp, #16]
    73ce:	4613      	mov	r3, r2
    73d0:	00db      	lsls	r3, r3, #3
    73d2:	1a9b      	subs	r3, r3, r2
    73d4:	440b      	add	r3, r1
    73d6:	00db      	lsls	r3, r3, #3
    73d8:	4403      	add	r3, r0
    73da:	2200      	movs	r2, #0
    73dc:	719a      	strb	r2, [r3, #6]
#endif
                    /* Initialize the running information of the channel*/
                    Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_INITIALIZED;
    73de:	f89d 100f 	ldrb.w	r1, [sp, #15]
    73e2:	481f      	ldr	r0, [pc, #124]	; (7460 <Gpt_Init+0x11c>)
    73e4:	9a04      	ldr	r2, [sp, #16]
    73e6:	4613      	mov	r3, r2
    73e8:	00db      	lsls	r3, r3, #3
    73ea:	1a9b      	subs	r3, r3, r2
    73ec:	440b      	add	r3, r1
    73ee:	2201      	movs	r2, #1
    73f0:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                    Gpt_aStopTime[coreID][channel] = 0U;
    73f4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    73f8:	481a      	ldr	r0, [pc, #104]	; (7464 <Gpt_Init+0x120>)
    73fa:	9a04      	ldr	r2, [sp, #16]
    73fc:	4613      	mov	r3, r2
    73fe:	00db      	lsls	r3, r3, #3
    7400:	1a9b      	subs	r3, r3, r2
    7402:	440b      	add	r3, r1
    7404:	2200      	movs	r2, #0
    7406:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
#endif
                }

                /*Initialize hardware timer channel.*/
                Gpt_Ipw_Init(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    740a:	4a14      	ldr	r2, [pc, #80]	; (745c <Gpt_Init+0x118>)
    740c:	9b04      	ldr	r3, [sp, #16]
    740e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7412:	6859      	ldr	r1, [r3, #4]
    7414:	f89d 2017 	ldrb.w	r2, [sp, #23]
    7418:	4613      	mov	r3, r2
    741a:	005b      	lsls	r3, r3, #1
    741c:	4413      	add	r3, r2
    741e:	00db      	lsls	r3, r3, #3
    7420:	440b      	add	r3, r1
    7422:	3314      	adds	r3, #20
    7424:	681b      	ldr	r3, [r3, #0]
    7426:	4618      	mov	r0, r3
    7428:	f000 fddd 	bl	7fe6 <Gpt_Ipw_Init>
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    742c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7430:	3301      	adds	r3, #1
    7432:	f88d 3017 	strb.w	r3, [sp, #23]
    7436:	4a09      	ldr	r2, [pc, #36]	; (745c <Gpt_Init+0x118>)
    7438:	9b04      	ldr	r3, [sp, #16]
    743a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    743e:	781b      	ldrb	r3, [r3, #0]
    7440:	f89d 2017 	ldrb.w	r2, [sp, #23]
    7444:	429a      	cmp	r2, r3
    7446:	d399      	bcc.n	737c <Gpt_Init+0x38>
            }
#if (((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON)) || \
     (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON) || \
     (GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON))
            /*Set the driver to normal mode*/
            Gpt_eMode[coreID] = GPT_MODE_NORMAL;
    7448:	4a07      	ldr	r2, [pc, #28]	; (7468 <Gpt_Init+0x124>)
    744a:	9b04      	ldr	r3, [sp, #16]
    744c:	2100      	movs	r1, #0
    744e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#endif
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
    return;
    7452:	bf00      	nop
}
    7454:	b007      	add	sp, #28
    7456:	f85d fb04 	ldr.w	pc, [sp], #4
    745a:	bf00      	nop
    745c:	1fff903c 	.word	0x1fff903c
    7460:	1fff9040 	.word	0x1fff9040
    7464:	1fff9078 	.word	0x1fff9078
    7468:	1fff9038 	.word	0x1fff9038

0000746c <Gpt_DeInit>:
* @return  void
*
* @implements   Gpt_DeInit_Activity
*/
void Gpt_DeInit(void)
{
    746c:	b500      	push	{lr}
    746e:	b085      	sub	sp, #20
    Gpt_ChannelType channel;
    Gpt_ChannelType ChannelIndex;

    Std_ReturnType allChannelStatus = (Std_ReturnType)E_OK;
    7470:	2300      	movs	r3, #0
    7472:	f88d 300e 	strb.w	r3, [sp, #14]
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7476:	2300      	movs	r3, #0
    7478:	9302      	str	r3, [sp, #8]
    /*Validate if the calling context is valid*/
    if((Std_ReturnType)E_OK == Gpt_ValidateGlobalCall(GPT_DEINIT_ID, coreID))
    {
#endif
        /* Initialize for each channel the runtime status informations.*/
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    747a:	2300      	movs	r3, #0
    747c:	f88d 300f 	strb.w	r3, [sp, #15]
    7480:	e01b      	b.n	74ba <Gpt_DeInit+0x4e>
        {
            channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    7482:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7486:	9902      	ldr	r1, [sp, #8]
    7488:	4618      	mov	r0, r3
    748a:	f7ff fded 	bl	7068 <Gpt_ConvertChannelIndexToChannel>
    748e:	4603      	mov	r3, r0
    7490:	f88d 3007 	strb.w	r3, [sp, #7]
            /*Check if the channel is not running.*/
            if((Std_ReturnType)E_NOT_OK == Gpt_ValidateChannelStatus(GPT_DEINIT_ID, channel, coreID))
    7494:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7498:	9a02      	ldr	r2, [sp, #8]
    749a:	4619      	mov	r1, r3
    749c:	2002      	movs	r0, #2
    749e:	f7ff fd91 	bl	6fc4 <Gpt_ValidateChannelStatus>
    74a2:	4603      	mov	r3, r0
    74a4:	2b01      	cmp	r3, #1
    74a6:	d103      	bne.n	74b0 <Gpt_DeInit+0x44>
            {
                allChannelStatus = (Std_ReturnType)E_NOT_OK;
    74a8:	2301      	movs	r3, #1
    74aa:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    74ae:	e00d      	b.n	74cc <Gpt_DeInit+0x60>
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    74b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    74b4:	3301      	adds	r3, #1
    74b6:	f88d 300f 	strb.w	r3, [sp, #15]
    74ba:	4a44      	ldr	r2, [pc, #272]	; (75cc <Gpt_DeInit+0x160>)
    74bc:	9b02      	ldr	r3, [sp, #8]
    74be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74c2:	781b      	ldrb	r3, [r3, #0]
    74c4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    74c8:	429a      	cmp	r2, r3
    74ca:	d3da      	bcc.n	7482 <Gpt_DeInit+0x16>
            }
        }

        if((Std_ReturnType)E_OK == allChannelStatus)
    74cc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    74d0:	2b00      	cmp	r3, #0
    74d2:	d176      	bne.n	75c2 <Gpt_DeInit+0x156>
        {
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    74d4:	2300      	movs	r3, #0
    74d6:	f88d 300f 	strb.w	r3, [sp, #15]
    74da:	e05c      	b.n	7596 <Gpt_DeInit+0x12a>
            {
                channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    74dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    74e0:	9902      	ldr	r1, [sp, #8]
    74e2:	4618      	mov	r0, r3
    74e4:	f7ff fdc0 	bl	7068 <Gpt_ConvertChannelIndexToChannel>
    74e8:	4603      	mov	r3, r0
    74ea:	f88d 3007 	strb.w	r3, [sp, #7]
                if(channel < GPT_HW_CHANNEL_NUM)
    74ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    74f2:	2b06      	cmp	r3, #6
    74f4:	d84a      	bhi.n	758c <Gpt_DeInit+0x120>
                {
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
                    /*Disable notification*/
                    Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = FALSE;
    74f6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    74fa:	4835      	ldr	r0, [pc, #212]	; (75d0 <Gpt_DeInit+0x164>)
    74fc:	9a02      	ldr	r2, [sp, #8]
    74fe:	4613      	mov	r3, r2
    7500:	00db      	lsls	r3, r3, #3
    7502:	1a9b      	subs	r3, r3, r2
    7504:	440b      	add	r3, r1
    7506:	00db      	lsls	r3, r3, #3
    7508:	4403      	add	r3, r0
    750a:	2200      	movs	r2, #0
    750c:	711a      	strb	r2, [r3, #4]
#endif

#if ((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON))
                    /*Disable wakeup*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = FALSE;
    750e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7512:	482f      	ldr	r0, [pc, #188]	; (75d0 <Gpt_DeInit+0x164>)
    7514:	9a02      	ldr	r2, [sp, #8]
    7516:	4613      	mov	r3, r2
    7518:	00db      	lsls	r3, r3, #3
    751a:	1a9b      	subs	r3, r3, r2
    751c:	440b      	add	r3, r1
    751e:	00db      	lsls	r3, r3, #3
    7520:	4403      	add	r3, r0
    7522:	2200      	movs	r2, #0
    7524:	715a      	strb	r2, [r3, #5]
                    /*Clear wakeup generation status*/
                    Gpt_aChannelInfo[coreID][channel].bWakeupGenerated = FALSE;
    7526:	f89d 1007 	ldrb.w	r1, [sp, #7]
    752a:	4829      	ldr	r0, [pc, #164]	; (75d0 <Gpt_DeInit+0x164>)
    752c:	9a02      	ldr	r2, [sp, #8]
    752e:	4613      	mov	r3, r2
    7530:	00db      	lsls	r3, r3, #3
    7532:	1a9b      	subs	r3, r3, r2
    7534:	440b      	add	r3, r1
    7536:	00db      	lsls	r3, r3, #3
    7538:	4403      	add	r3, r0
    753a:	2200      	movs	r2, #0
    753c:	719a      	strb	r2, [r3, #6]
#endif
                    /* De initialize the running information of the channel*/
                    Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_UNINITIALIZED;
    753e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7542:	4823      	ldr	r0, [pc, #140]	; (75d0 <Gpt_DeInit+0x164>)
    7544:	9a02      	ldr	r2, [sp, #8]
    7546:	4613      	mov	r3, r2
    7548:	00db      	lsls	r3, r3, #3
    754a:	1a9b      	subs	r3, r3, r2
    754c:	440b      	add	r3, r1
    754e:	2200      	movs	r2, #0
    7550:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                    Gpt_aStopTime[coreID][channel] = 0U;
    7554:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7558:	481e      	ldr	r0, [pc, #120]	; (75d4 <Gpt_DeInit+0x168>)
    755a:	9a02      	ldr	r2, [sp, #8]
    755c:	4613      	mov	r3, r2
    755e:	00db      	lsls	r3, r3, #3
    7560:	1a9b      	subs	r3, r3, r2
    7562:	440b      	add	r3, r1
    7564:	2200      	movs	r2, #0
    7566:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
#endif
                    /*Initialize hardware timer channel.*/
                    Gpt_Ipw_DeInit
                    (
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    756a:	4a18      	ldr	r2, [pc, #96]	; (75cc <Gpt_DeInit+0x160>)
    756c:	9b02      	ldr	r3, [sp, #8]
    756e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7572:	6859      	ldr	r1, [r3, #4]
                    Gpt_Ipw_DeInit
    7574:	f89d 200f 	ldrb.w	r2, [sp, #15]
                        ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7578:	4613      	mov	r3, r2
    757a:	005b      	lsls	r3, r3, #1
    757c:	4413      	add	r3, r2
    757e:	00db      	lsls	r3, r3, #3
    7580:	440b      	add	r3, r1
    7582:	3314      	adds	r3, #20
    7584:	681b      	ldr	r3, [r3, #0]
                    Gpt_Ipw_DeInit
    7586:	4618      	mov	r0, r3
    7588:	f000 fd95 	bl	80b6 <Gpt_Ipw_DeInit>
            for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    758c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7590:	3301      	adds	r3, #1
    7592:	f88d 300f 	strb.w	r3, [sp, #15]
    7596:	4a0d      	ldr	r2, [pc, #52]	; (75cc <Gpt_DeInit+0x160>)
    7598:	9b02      	ldr	r3, [sp, #8]
    759a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    759e:	781b      	ldrb	r3, [r3, #0]
    75a0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    75a4:	429a      	cmp	r2, r3
    75a6:	d399      	bcc.n	74dc <Gpt_DeInit+0x70>
                }
            }

#if(GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON)
            /* Deinitialize and stop Predef timers.*/
            Gpt_Ipw_StopPredefTimer(Gpt_pConfig[coreID]);
    75a8:	4a08      	ldr	r2, [pc, #32]	; (75cc <Gpt_DeInit+0x160>)
    75aa:	9b02      	ldr	r3, [sp, #8]
    75ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75b0:	4618      	mov	r0, r3
    75b2:	f000 fe0d 	bl	81d0 <Gpt_Ipw_StopPredefTimer>
#endif
            /* Writing NULL to configuration pointer is mandatory because that variable
            is used to test the initialization of the driver */
            Gpt_pConfig[coreID] = NULL_PTR;
    75b6:	4a05      	ldr	r2, [pc, #20]	; (75cc <Gpt_DeInit+0x160>)
    75b8:	9b02      	ldr	r3, [sp, #8]
    75ba:	2100      	movs	r1, #0
    75bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }

#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
    return;
    75c0:	bf00      	nop
    75c2:	bf00      	nop
}
    75c4:	b005      	add	sp, #20
    75c6:	f85d fb04 	ldr.w	pc, [sp], #4
    75ca:	bf00      	nop
    75cc:	1fff903c 	.word	0x1fff903c
    75d0:	1fff9040 	.word	0x1fff9040
    75d4:	1fff9078 	.word	0x1fff9078

000075d8 <Gpt_GetTimeElapsed>:
*
* @pre     The driver needs to be initialized.
* @implements Gpt_GetTimeElapsed_Activity
*/
Gpt_ValueType Gpt_GetTimeElapsed(Gpt_ChannelType channel)
{
    75d8:	b500      	push	{lr}
    75da:	b089      	sub	sp, #36	; 0x24
    75dc:	4603      	mov	r3, r0
    75de:	f88d 3007 	strb.w	r3, [sp, #7]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    75e2:	2300      	movs	r3, #0
    75e4:	f88d 3008 	strb.w	r3, [sp, #8]
    75e8:	2300      	movs	r3, #0
    75ea:	9303      	str	r3, [sp, #12]
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    75ec:	ab02      	add	r3, sp, #8
    75ee:	9306      	str	r3, [sp, #24]
    Gpt_ChannelType ChannelIndex;

    Gpt_ValueType returnValue = 0U;
    75f0:	2300      	movs	r3, #0
    75f2:	9307      	str	r3, [sp, #28]
    uint32 coreID = (uint32)Gpt_GetCoreID();
    75f4:	2300      	movs	r3, #0
    75f6:	9305      	str	r3, [sp, #20]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(GPT_TIMEELAPSED_ID, channel, coreID))
    {
#endif
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    75f8:	4a33      	ldr	r2, [pc, #204]	; (76c8 <Gpt_GetTimeElapsed+0xf0>)
    75fa:	9b05      	ldr	r3, [sp, #20]
    75fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7600:	695a      	ldr	r2, [r3, #20]
    7602:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7606:	5cd3      	ldrb	r3, [r2, r3]
    7608:	f88d 3013 	strb.w	r3, [sp, #19]
        /*Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs can change
        the logical channel state between the checking of logical channel state and timestamp
        retrieval*/
        returnValue = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    760c:	4a2e      	ldr	r2, [pc, #184]	; (76c8 <Gpt_GetTimeElapsed+0xf0>)
    760e:	9b05      	ldr	r3, [sp, #20]
    7610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7614:	6859      	ldr	r1, [r3, #4]
    7616:	f89d 2013 	ldrb.w	r2, [sp, #19]
    761a:	4613      	mov	r3, r2
    761c:	005b      	lsls	r3, r3, #1
    761e:	4413      	add	r3, r2
    7620:	00db      	lsls	r3, r3, #3
    7622:	440b      	add	r3, r1
    7624:	3314      	adds	r3, #20
    7626:	681b      	ldr	r3, [r3, #0]
    7628:	9906      	ldr	r1, [sp, #24]
    762a:	4618      	mov	r0, r3
    762c:	f000 fd0f 	bl	804e <Gpt_Ipw_GetTimeElapsed>
    7630:	9007      	str	r0, [sp, #28]

        /*Check the channel status*/
        switch(Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    7632:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7636:	4825      	ldr	r0, [pc, #148]	; (76cc <Gpt_GetTimeElapsed+0xf4>)
    7638:	9a05      	ldr	r2, [sp, #20]
    763a:	4613      	mov	r3, r2
    763c:	00db      	lsls	r3, r3, #3
    763e:	1a9b      	subs	r3, r3, r2
    7640:	440b      	add	r3, r1
    7642:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
    7646:	3b01      	subs	r3, #1
    7648:	2b03      	cmp	r3, #3
    764a:	d834      	bhi.n	76b6 <Gpt_GetTimeElapsed+0xde>
    764c:	a201      	add	r2, pc, #4	; (adr r2, 7654 <Gpt_GetTimeElapsed+0x7c>)
    764e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7652:	bf00      	nop
    7654:	00007693 	.word	0x00007693
    7658:	00007699 	.word	0x00007699
    765c:	000076b1 	.word	0x000076b1
    7660:	00007665 	.word	0x00007665
        {
            case GPT_STATUS_RUNNING:
            {
                /*Check if channel counter has already rollover*/
                if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    7664:	f89d 3008 	ldrb.w	r3, [sp, #8]
    7668:	2b00      	cmp	r3, #0
    766a:	d026      	beq.n	76ba <Gpt_GetTimeElapsed+0xe2>
                    (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    766c:	4a16      	ldr	r2, [pc, #88]	; (76c8 <Gpt_GetTimeElapsed+0xf0>)
    766e:	9b05      	ldr	r3, [sp, #20]
    7670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7674:	6859      	ldr	r1, [r3, #4]
    7676:	f89d 2013 	ldrb.w	r2, [sp, #19]
    767a:	4613      	mov	r3, r2
    767c:	005b      	lsls	r3, r3, #1
    767e:	4413      	add	r3, r2
    7680:	00db      	lsls	r3, r3, #3
    7682:	440b      	add	r3, r1
    7684:	3310      	adds	r3, #16
    7686:	681b      	ldr	r3, [r3, #0]
                if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    7688:	2b01      	cmp	r3, #1
    768a:	d116      	bne.n	76ba <Gpt_GetTimeElapsed+0xe2>
                   )
                {
                    /*The timer has already expired.The hardware timer status is not yet
                    synchronized with the logical timer status*/
                    returnValue = returnHwChannelInfo.uTargetTime;
    768c:	9b03      	ldr	r3, [sp, #12]
    768e:	9307      	str	r3, [sp, #28]
                }
            }
            break;
    7690:	e013      	b.n	76ba <Gpt_GetTimeElapsed+0xe2>
            case GPT_STATUS_INITIALIZED:
            {
                returnValue = 0U;
    7692:	2300      	movs	r3, #0
    7694:	9307      	str	r3, [sp, #28]
            }
            break;
    7696:	e011      	b.n	76bc <Gpt_GetTimeElapsed+0xe4>
            case GPT_STATUS_STOPPED:
            {
                /*Return elapsed time at the when the channel was stopped*/
                returnValue = Gpt_aStopTime[coreID][channel];
    7698:	f89d 1007 	ldrb.w	r1, [sp, #7]
    769c:	480c      	ldr	r0, [pc, #48]	; (76d0 <Gpt_GetTimeElapsed+0xf8>)
    769e:	9a05      	ldr	r2, [sp, #20]
    76a0:	4613      	mov	r3, r2
    76a2:	00db      	lsls	r3, r3, #3
    76a4:	1a9b      	subs	r3, r3, r2
    76a6:	440b      	add	r3, r1
    76a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    76ac:	9307      	str	r3, [sp, #28]
            }
            break;
    76ae:	e005      	b.n	76bc <Gpt_GetTimeElapsed+0xe4>
            case GPT_STATUS_EXPIRED:
            {
                returnValue = returnHwChannelInfo.uTargetTime;
    76b0:	9b03      	ldr	r3, [sp, #12]
    76b2:	9307      	str	r3, [sp, #28]
            }
            break;
    76b4:	e002      	b.n	76bc <Gpt_GetTimeElapsed+0xe4>
            default:
                /*Only the above four channel states are allowed when this function is called*/
                break;
    76b6:	bf00      	nop
    76b8:	e000      	b.n	76bc <Gpt_GetTimeElapsed+0xe4>
            break;
    76ba:	bf00      	nop
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif

    return returnValue;
    76bc:	9b07      	ldr	r3, [sp, #28]
}
    76be:	4618      	mov	r0, r3
    76c0:	b009      	add	sp, #36	; 0x24
    76c2:	f85d fb04 	ldr.w	pc, [sp], #4
    76c6:	bf00      	nop
    76c8:	1fff903c 	.word	0x1fff903c
    76cc:	1fff9040 	.word	0x1fff9040
    76d0:	1fff9078 	.word	0x1fff9078

000076d4 <Gpt_GetTimeRemaining>:
*
* @pre           The driver needs to be initialized.
* @implements    Gpt_GetTimeRemaining_Activity
*/
Gpt_ValueType Gpt_GetTimeRemaining(Gpt_ChannelType channel)
{
    76d4:	b510      	push	{r4, lr}
    76d6:	b088      	sub	sp, #32
    76d8:	4603      	mov	r3, r0
    76da:	f88d 3007 	strb.w	r3, [sp, #7]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    76de:	2300      	movs	r3, #0
    76e0:	f88d 3008 	strb.w	r3, [sp, #8]
    76e4:	2300      	movs	r3, #0
    76e6:	9303      	str	r3, [sp, #12]
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    76e8:	ab02      	add	r3, sp, #8
    76ea:	9306      	str	r3, [sp, #24]
    Gpt_ChannelType ChannelIndex;

    Gpt_ValueType returnValue = 0U;
    76ec:	2300      	movs	r3, #0
    76ee:	9307      	str	r3, [sp, #28]
    uint32 coreID = (uint32)Gpt_GetCoreID();
    76f0:	2300      	movs	r3, #0
    76f2:	9305      	str	r3, [sp, #20]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(GPT_TIMEREMAINING_ID, channel, coreID))
    {
#endif
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    76f4:	4a35      	ldr	r2, [pc, #212]	; (77cc <Gpt_GetTimeRemaining+0xf8>)
    76f6:	9b05      	ldr	r3, [sp, #20]
    76f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76fc:	695a      	ldr	r2, [r3, #20]
    76fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7702:	5cd3      	ldrb	r3, [r2, r3]
    7704:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Calculate the remaining time from the elapsed time*/
        /* Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs can
        change the logical channel state between the checking of logical channel state
        and timestamps retrieval*/
        returnValue = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    7708:	4a30      	ldr	r2, [pc, #192]	; (77cc <Gpt_GetTimeRemaining+0xf8>)
    770a:	9b05      	ldr	r3, [sp, #20]
    770c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7710:	6859      	ldr	r1, [r3, #4]
    7712:	f89d 2013 	ldrb.w	r2, [sp, #19]
    7716:	4613      	mov	r3, r2
    7718:	005b      	lsls	r3, r3, #1
    771a:	4413      	add	r3, r2
    771c:	00db      	lsls	r3, r3, #3
    771e:	440b      	add	r3, r1
    7720:	3314      	adds	r3, #20
    7722:	681b      	ldr	r3, [r3, #0]
    7724:	9906      	ldr	r1, [sp, #24]
    7726:	4618      	mov	r0, r3
    7728:	f000 fc91 	bl	804e <Gpt_Ipw_GetTimeElapsed>
    772c:	9007      	str	r0, [sp, #28]

        /*Check the channel status*/
        switch(Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    772e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7732:	4827      	ldr	r0, [pc, #156]	; (77d0 <Gpt_GetTimeRemaining+0xfc>)
    7734:	9a05      	ldr	r2, [sp, #20]
    7736:	4613      	mov	r3, r2
    7738:	00db      	lsls	r3, r3, #3
    773a:	1a9b      	subs	r3, r3, r2
    773c:	440b      	add	r3, r1
    773e:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
    7742:	3b01      	subs	r3, #1
    7744:	2b03      	cmp	r3, #3
    7746:	d83b      	bhi.n	77c0 <Gpt_GetTimeRemaining+0xec>
    7748:	a201      	add	r2, pc, #4	; (adr r2, 7750 <Gpt_GetTimeRemaining+0x7c>)
    774a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    774e:	bf00      	nop
    7750:	00007799 	.word	0x00007799
    7754:	0000779f 	.word	0x0000779f
    7758:	000077bb 	.word	0x000077bb
    775c:	00007761 	.word	0x00007761
        {
            case GPT_STATUS_RUNNING:
            {
                /*Check if channel counter has already roll-over*/
                if((TRUE == returnHwChannelInfo.bChannelRollover) && \
    7760:	f89d 3008 	ldrb.w	r3, [sp, #8]
    7764:	2b00      	cmp	r3, #0
    7766:	d012      	beq.n	778e <Gpt_GetTimeRemaining+0xba>
                   (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    7768:	4a18      	ldr	r2, [pc, #96]	; (77cc <Gpt_GetTimeRemaining+0xf8>)
    776a:	9b05      	ldr	r3, [sp, #20]
    776c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7770:	6859      	ldr	r1, [r3, #4]
    7772:	f89d 2013 	ldrb.w	r2, [sp, #19]
    7776:	4613      	mov	r3, r2
    7778:	005b      	lsls	r3, r3, #1
    777a:	4413      	add	r3, r2
    777c:	00db      	lsls	r3, r3, #3
    777e:	440b      	add	r3, r1
    7780:	3310      	adds	r3, #16
    7782:	681b      	ldr	r3, [r3, #0]
                if((TRUE == returnHwChannelInfo.bChannelRollover) && \
    7784:	2b01      	cmp	r3, #1
    7786:	d102      	bne.n	778e <Gpt_GetTimeRemaining+0xba>
                  )
                {
                    /*The timer has already expired.The hardware timer status is not yet
                    synchronized with the logical timer status*/
                    returnValue = 0U;
    7788:	2300      	movs	r3, #0
    778a:	9307      	str	r3, [sp, #28]
                {
                    /*Calculate remaining time from elapsed time*/
                    returnValue = returnHwChannelInfo.uTargetTime - returnValue;
                }
            }
            break;
    778c:	e019      	b.n	77c2 <Gpt_GetTimeRemaining+0xee>
                    returnValue = returnHwChannelInfo.uTargetTime - returnValue;
    778e:	9a03      	ldr	r2, [sp, #12]
    7790:	9b07      	ldr	r3, [sp, #28]
    7792:	1ad3      	subs	r3, r2, r3
    7794:	9307      	str	r3, [sp, #28]
            break;
    7796:	e014      	b.n	77c2 <Gpt_GetTimeRemaining+0xee>
            case GPT_STATUS_INITIALIZED:
            {
                returnValue = 0U;
    7798:	2300      	movs	r3, #0
    779a:	9307      	str	r3, [sp, #28]
            }
            break;
    779c:	e011      	b.n	77c2 <Gpt_GetTimeRemaining+0xee>
            case GPT_STATUS_STOPPED:
            {
                returnValue = returnHwChannelInfo.uTargetTime-Gpt_aStopTime[coreID][channel];
    779e:	9903      	ldr	r1, [sp, #12]
    77a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    77a4:	4c0b      	ldr	r4, [pc, #44]	; (77d4 <Gpt_GetTimeRemaining+0x100>)
    77a6:	9a05      	ldr	r2, [sp, #20]
    77a8:	4613      	mov	r3, r2
    77aa:	00db      	lsls	r3, r3, #3
    77ac:	1a9b      	subs	r3, r3, r2
    77ae:	4403      	add	r3, r0
    77b0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    77b4:	1acb      	subs	r3, r1, r3
    77b6:	9307      	str	r3, [sp, #28]
            }
            break;
    77b8:	e003      	b.n	77c2 <Gpt_GetTimeRemaining+0xee>
            case GPT_STATUS_EXPIRED:
            {
                returnValue = 0U;
    77ba:	2300      	movs	r3, #0
    77bc:	9307      	str	r3, [sp, #28]
            }
            break;
    77be:	e000      	b.n	77c2 <Gpt_GetTimeRemaining+0xee>
            default:
                /*Only the above four channel states are allowed when this function is called*/
                break;
    77c0:	bf00      	nop
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif

    return returnValue;
    77c2:	9b07      	ldr	r3, [sp, #28]
}
    77c4:	4618      	mov	r0, r3
    77c6:	b008      	add	sp, #32
    77c8:	bd10      	pop	{r4, pc}
    77ca:	bf00      	nop
    77cc:	1fff903c 	.word	0x1fff903c
    77d0:	1fff9040 	.word	0x1fff9040
    77d4:	1fff9078 	.word	0x1fff9078

000077d8 <Gpt_StartTimer>:
void Gpt_StartTimer
(
    Gpt_ChannelType channel,
    Gpt_ValueType value
)
{
    77d8:	b500      	push	{lr}
    77da:	b085      	sub	sp, #20
    77dc:	4603      	mov	r3, r0
    77de:	9100      	str	r1, [sp, #0]
    77e0:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    Std_ReturnType returnValue;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    77e4:	2300      	movs	r3, #0
    77e6:	9303      	str	r3, [sp, #12]

    if ((Std_ReturnType)E_OK == Gpt_ValidateChannelStatus(GPT_STARTTIMER_ID, channel, coreID))
    77e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77ec:	9a03      	ldr	r2, [sp, #12]
    77ee:	4619      	mov	r1, r3
    77f0:	2005      	movs	r0, #5
    77f2:	f7ff fbe7 	bl	6fc4 <Gpt_ValidateChannelStatus>
    77f6:	4603      	mov	r3, r0
    77f8:	2b00      	cmp	r3, #0
    77fa:	d155      	bne.n	78a8 <Gpt_StartTimer+0xd0>
    {
#if (GPT_VALIDATE_PARAM  == STD_ON)
        if ((Std_ReturnType)E_OK == Gpt_ValidateParamValue(GPT_STARTTIMER_ID, channel, value, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    77fc:	4a2c      	ldr	r2, [pc, #176]	; (78b0 <Gpt_StartTimer+0xd8>)
    77fe:	9b03      	ldr	r3, [sp, #12]
    7800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7804:	695a      	ldr	r2, [r3, #20]
    7806:	f89d 3007 	ldrb.w	r3, [sp, #7]
    780a:	5cd3      	ldrb	r3, [r2, r3]
    780c:	f88d 300b 	strb.w	r3, [sp, #11]
            /*Enable hardware interrupts for the one-shot mode to set the status of  channel*/
            if (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    7810:	4a27      	ldr	r2, [pc, #156]	; (78b0 <Gpt_StartTimer+0xd8>)
    7812:	9b03      	ldr	r3, [sp, #12]
    7814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7818:	6859      	ldr	r1, [r3, #4]
    781a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    781e:	4613      	mov	r3, r2
    7820:	005b      	lsls	r3, r3, #1
    7822:	4413      	add	r3, r2
    7824:	00db      	lsls	r3, r3, #3
    7826:	440b      	add	r3, r1
    7828:	3310      	adds	r3, #16
    782a:	681b      	ldr	r3, [r3, #0]
    782c:	2b01      	cmp	r3, #1
    782e:	d110      	bne.n	7852 <Gpt_StartTimer+0x7a>
            {
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7830:	4a1f      	ldr	r2, [pc, #124]	; (78b0 <Gpt_StartTimer+0xd8>)
    7832:	9b03      	ldr	r3, [sp, #12]
    7834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7838:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    783a:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    783e:	4613      	mov	r3, r2
    7840:	005b      	lsls	r3, r3, #1
    7842:	4413      	add	r3, r2
    7844:	00db      	lsls	r3, r3, #3
    7846:	440b      	add	r3, r1
    7848:	3314      	adds	r3, #20
    784a:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    784c:	4618      	mov	r0, r3
    784e:	f000 fc29 	bl	80a4 <Gpt_Ipw_EnableInterrupt>
                );
            }

            /* Change GPT channel status.Channel status change shall be made before to start
            the hardware in order to not change the channel status from EXPIRED to RUNNING*/
            Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_RUNNING;
    7852:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7856:	4817      	ldr	r0, [pc, #92]	; (78b4 <Gpt_StartTimer+0xdc>)
    7858:	9a03      	ldr	r2, [sp, #12]
    785a:	4613      	mov	r3, r2
    785c:	00db      	lsls	r3, r3, #3
    785e:	1a9b      	subs	r3, r3, r2
    7860:	440b      	add	r3, r1
    7862:	2204      	movs	r2, #4
    7864:	f840 2033 	str.w	r2, [r0, r3, lsl #3]

            /* Call low level API */
            returnValue = Gpt_Ipw_StartTimer(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig),value);
    7868:	4a11      	ldr	r2, [pc, #68]	; (78b0 <Gpt_StartTimer+0xd8>)
    786a:	9b03      	ldr	r3, [sp, #12]
    786c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7870:	6859      	ldr	r1, [r3, #4]
    7872:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7876:	4613      	mov	r3, r2
    7878:	005b      	lsls	r3, r3, #1
    787a:	4413      	add	r3, r2
    787c:	00db      	lsls	r3, r3, #3
    787e:	440b      	add	r3, r1
    7880:	3314      	adds	r3, #20
    7882:	681b      	ldr	r3, [r3, #0]
    7884:	9900      	ldr	r1, [sp, #0]
    7886:	4618      	mov	r0, r3
    7888:	f000 fbc2 	bl	8010 <Gpt_Ipw_StartTimer>
    788c:	4603      	mov	r3, r0
    788e:	f88d 300a 	strb.w	r3, [sp, #10]

            if((Std_ReturnType)E_OK != returnValue)
    7892:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7896:	2b00      	cmp	r3, #0
    7898:	d006      	beq.n	78a8 <Gpt_StartTimer+0xd0>
            {
                (void)Det_ReportRuntimeError\
    789a:	232b      	movs	r3, #43	; 0x2b
    789c:	2205      	movs	r2, #5
    789e:	2100      	movs	r1, #0
    78a0:	2064      	movs	r0, #100	; 0x64
    78a2:	f004 f84f 	bl	b944 <Det_ReportRuntimeError>
            }
#if (GPT_VALIDATE_PARAM  == STD_ON)
        }
#endif
    }
    return;
    78a6:	bf00      	nop
    78a8:	bf00      	nop
}
    78aa:	b005      	add	sp, #20
    78ac:	f85d fb04 	ldr.w	pc, [sp], #4
    78b0:	1fff903c 	.word	0x1fff903c
    78b4:	1fff9040 	.word	0x1fff9040

000078b8 <Gpt_StopTimer>:
*
* @pre          The driver needs to be initialized. Gpt_StartTimer must be called before.
* @implements   Gpt_StopTimer_Activity
*/
void Gpt_StopTimer(Gpt_ChannelType channel)
{
    78b8:	b500      	push	{lr}
    78ba:	b089      	sub	sp, #36	; 0x24
    78bc:	4603      	mov	r3, r0
    78be:	f88d 3007 	strb.w	r3, [sp, #7]
	Gpt_HwChannelInfoType returnHwChannelInfo = {FALSE, 0U};
    78c2:	2300      	movs	r3, #0
    78c4:	f88d 3008 	strb.w	r3, [sp, #8]
    78c8:	2300      	movs	r3, #0
    78ca:	9303      	str	r3, [sp, #12]
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
	Gpt_HwChannelInfoType * pRetHwChannelInfo = &returnHwChannelInfo;
    78cc:	ab02      	add	r3, sp, #8
    78ce:	9307      	str	r3, [sp, #28]
    Gpt_ValueType uElapsedTime = 0U;
    78d0:	2300      	movs	r3, #0
    78d2:	9306      	str	r3, [sp, #24]
#endif
    Gpt_ChannelType ChannelIndex;

    uint32 coreID = (uint32)Gpt_GetCoreID();
    78d4:	2300      	movs	r3, #0
    78d6:	9305      	str	r3, [sp, #20]

#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    if((Std_ReturnType)E_OK == Gpt_ValidateChannelCall(GPT_STOPTIMER_ID, channel, coreID))
    {
#endif
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    78d8:	4a3a      	ldr	r2, [pc, #232]	; (79c4 <Gpt_StopTimer+0x10c>)
    78da:	9b05      	ldr	r3, [sp, #20]
    78dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78e0:	695a      	ldr	r2, [r3, #20]
    78e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78e6:	5cd3      	ldrb	r3, [r2, r3]
    78e8:	f88d 3013 	strb.w	r3, [sp, #19]
        /*Gpt_Ipw_GetTimeElapsed() shall be called first, because the occurred ISRs can change
        the logical channel state between the checking of logical channel state and timestamps
        retrieval*/
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
        /* Get the elapsed  time  for later use by other API calls*/
        uElapsedTime = Gpt_Ipw_GetTimeElapsed((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)), pRetHwChannelInfo);
    78ec:	4a35      	ldr	r2, [pc, #212]	; (79c4 <Gpt_StopTimer+0x10c>)
    78ee:	9b05      	ldr	r3, [sp, #20]
    78f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78f4:	6859      	ldr	r1, [r3, #4]
    78f6:	f89d 2013 	ldrb.w	r2, [sp, #19]
    78fa:	4613      	mov	r3, r2
    78fc:	005b      	lsls	r3, r3, #1
    78fe:	4413      	add	r3, r2
    7900:	00db      	lsls	r3, r3, #3
    7902:	440b      	add	r3, r1
    7904:	3314      	adds	r3, #20
    7906:	681b      	ldr	r3, [r3, #0]
    7908:	9907      	ldr	r1, [sp, #28]
    790a:	4618      	mov	r0, r3
    790c:	f000 fb9f 	bl	804e <Gpt_Ipw_GetTimeElapsed>
    7910:	9006      	str	r0, [sp, #24]
#endif

        /*Check the logical channel status*/
        if (GPT_STATUS_RUNNING == Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    7912:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7916:	482c      	ldr	r0, [pc, #176]	; (79c8 <Gpt_StopTimer+0x110>)
    7918:	9a05      	ldr	r2, [sp, #20]
    791a:	4613      	mov	r3, r2
    791c:	00db      	lsls	r3, r3, #3
    791e:	1a9b      	subs	r3, r3, r2
    7920:	440b      	add	r3, r1
    7922:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
    7926:	2b04      	cmp	r3, #4
    7928:	d147      	bne.n	79ba <Gpt_StopTimer+0x102>
        {
            /* Call low level stop timer */
            Gpt_Ipw_StopTimer(((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig));
    792a:	4a26      	ldr	r2, [pc, #152]	; (79c4 <Gpt_StopTimer+0x10c>)
    792c:	9b05      	ldr	r3, [sp, #20]
    792e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7932:	6859      	ldr	r1, [r3, #4]
    7934:	f89d 2013 	ldrb.w	r2, [sp, #19]
    7938:	4613      	mov	r3, r2
    793a:	005b      	lsls	r3, r3, #1
    793c:	4413      	add	r3, r2
    793e:	00db      	lsls	r3, r3, #3
    7940:	440b      	add	r3, r1
    7942:	3314      	adds	r3, #20
    7944:	681b      	ldr	r3, [r3, #0]
    7946:	4618      	mov	r0, r3
    7948:	f000 fb97 	bl	807a <Gpt_Ipw_StopTimer>

            if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    794c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    7950:	2b00      	cmp	r3, #0
    7952:	d01b      	beq.n	798c <Gpt_StopTimer+0xd4>
                (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    7954:	4a1b      	ldr	r2, [pc, #108]	; (79c4 <Gpt_StopTimer+0x10c>)
    7956:	9b05      	ldr	r3, [sp, #20]
    7958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    795c:	6859      	ldr	r1, [r3, #4]
    795e:	f89d 2013 	ldrb.w	r2, [sp, #19]
    7962:	4613      	mov	r3, r2
    7964:	005b      	lsls	r3, r3, #1
    7966:	4413      	add	r3, r2
    7968:	00db      	lsls	r3, r3, #3
    796a:	440b      	add	r3, r1
    796c:	3310      	adds	r3, #16
    796e:	681b      	ldr	r3, [r3, #0]
            if ((TRUE == returnHwChannelInfo.bChannelRollover) && \
    7970:	2b01      	cmp	r3, #1
    7972:	d10b      	bne.n	798c <Gpt_StopTimer+0xd4>
            )
            {
                /*This action could be executed only when the function is called during a critical
                section implemented by disabling all interrupts*/
                /*Set channel status to EXPIRED*/
                Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_EXPIRED;
    7974:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7978:	4813      	ldr	r0, [pc, #76]	; (79c8 <Gpt_StopTimer+0x110>)
    797a:	9a05      	ldr	r2, [sp, #20]
    797c:	4613      	mov	r3, r2
    797e:	00db      	lsls	r3, r3, #3
    7980:	1a9b      	subs	r3, r3, r2
    7982:	440b      	add	r3, r1
    7984:	2203      	movs	r2, #3
    7986:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    798a:	e015      	b.n	79b8 <Gpt_StopTimer+0x100>
            }
            else
            {
#if ((GPT_TIME_REMAINING_API == STD_ON) || (GPT_TIME_ELAPSED_API == STD_ON))
                /* Store the stopping time for later use by other API calls*/
                Gpt_aStopTime[coreID][channel] = uElapsedTime;
    798c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7990:	480e      	ldr	r0, [pc, #56]	; (79cc <Gpt_StopTimer+0x114>)
    7992:	9a05      	ldr	r2, [sp, #20]
    7994:	4613      	mov	r3, r2
    7996:	00db      	lsls	r3, r3, #3
    7998:	1a9b      	subs	r3, r3, r2
    799a:	440b      	add	r3, r1
    799c:	9a06      	ldr	r2, [sp, #24]
    799e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
#endif

                /* Set GPT channel status to stopped*/
                Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_STOPPED;
    79a2:	f89d 1007 	ldrb.w	r1, [sp, #7]
    79a6:	4808      	ldr	r0, [pc, #32]	; (79c8 <Gpt_StopTimer+0x110>)
    79a8:	9a05      	ldr	r2, [sp, #20]
    79aa:	4613      	mov	r3, r2
    79ac:	00db      	lsls	r3, r3, #3
    79ae:	1a9b      	subs	r3, r3, r2
    79b0:	440b      	add	r3, r1
    79b2:	2202      	movs	r2, #2
    79b4:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
            }
        }
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
    return;
    79b8:	bf00      	nop
    79ba:	bf00      	nop
}
    79bc:	b009      	add	sp, #36	; 0x24
    79be:	f85d fb04 	ldr.w	pc, [sp], #4
    79c2:	bf00      	nop
    79c4:	1fff903c 	.word	0x1fff903c
    79c8:	1fff9040 	.word	0x1fff9040
    79cc:	1fff9078 	.word	0x1fff9078

000079d0 <Gpt_EnableNotification>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_EnableNotification_Activity
*/
void Gpt_EnableNotification(Gpt_ChannelType channel)
{
    79d0:	b500      	push	{lr}
    79d2:	b085      	sub	sp, #20
    79d4:	4603      	mov	r3, r0
    79d6:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    79da:	2300      	movs	r3, #0
    79dc:	9303      	str	r3, [sp, #12]
#endif
#if (GPT_VALIDATE_PARAM == STD_ON)
        if ((Std_ReturnType)E_OK == Gpt_ValidateChannelNotification(GPT_ENABLENOTIFICATION_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    79de:	4a19      	ldr	r2, [pc, #100]	; (7a44 <Gpt_EnableNotification+0x74>)
    79e0:	9b03      	ldr	r3, [sp, #12]
    79e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79e6:	695a      	ldr	r2, [r3, #20]
    79e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    79ec:	5cd3      	ldrb	r3, [r2, r3]
    79ee:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Set the enable notification attribute */
            Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = TRUE;
    79f2:	f89d 1007 	ldrb.w	r1, [sp, #7]
    79f6:	4814      	ldr	r0, [pc, #80]	; (7a48 <Gpt_EnableNotification+0x78>)
    79f8:	9a03      	ldr	r2, [sp, #12]
    79fa:	4613      	mov	r3, r2
    79fc:	00db      	lsls	r3, r3, #3
    79fe:	1a9b      	subs	r3, r3, r2
    7a00:	440b      	add	r3, r1
    7a02:	00db      	lsls	r3, r3, #3
    7a04:	4403      	add	r3, r0
    7a06:	2201      	movs	r2, #1
    7a08:	711a      	strb	r2, [r3, #4]

            if (GPT_MODE_NORMAL == Gpt_eMode[coreID])
    7a0a:	4a10      	ldr	r2, [pc, #64]	; (7a4c <Gpt_EnableNotification+0x7c>)
    7a0c:	9b03      	ldr	r3, [sp, #12]
    7a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a12:	2b00      	cmp	r3, #0
    7a14:	d111      	bne.n	7a3a <Gpt_EnableNotification+0x6a>
            {
                /*Enable hardware interrupts*/
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7a16:	4a0b      	ldr	r2, [pc, #44]	; (7a44 <Gpt_EnableNotification+0x74>)
    7a18:	9b03      	ldr	r3, [sp, #12]
    7a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a1e:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    7a20:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7a24:	4613      	mov	r3, r2
    7a26:	005b      	lsls	r3, r3, #1
    7a28:	4413      	add	r3, r2
    7a2a:	00db      	lsls	r3, r3, #3
    7a2c:	440b      	add	r3, r1
    7a2e:	3314      	adds	r3, #20
    7a30:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    7a32:	4618      	mov	r0, r3
    7a34:	f000 fb36 	bl	80a4 <Gpt_Ipw_EnableInterrupt>
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif

    return;
    7a38:	bf00      	nop
    7a3a:	bf00      	nop
}
    7a3c:	b005      	add	sp, #20
    7a3e:	f85d fb04 	ldr.w	pc, [sp], #4
    7a42:	bf00      	nop
    7a44:	1fff903c 	.word	0x1fff903c
    7a48:	1fff9040 	.word	0x1fff9040
    7a4c:	1fff9038 	.word	0x1fff9038

00007a50 <Gpt_DisableNotification>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_DisableNotification_Activity
*/
void Gpt_DisableNotification(Gpt_ChannelType channel)
{
    7a50:	b500      	push	{lr}
    7a52:	b085      	sub	sp, #20
    7a54:	4603      	mov	r3, r0
    7a56:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7a5a:	2300      	movs	r3, #0
    7a5c:	9303      	str	r3, [sp, #12]
#endif
#if (GPT_VALIDATE_PARAM == STD_ON)
        if ((Std_ReturnType)E_OK == Gpt_ValidateChannelNotification(GPT_DISABLENOTIFICATION_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7a5e:	4a27      	ldr	r2, [pc, #156]	; (7afc <Gpt_DisableNotification+0xac>)
    7a60:	9b03      	ldr	r3, [sp, #12]
    7a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a66:	695a      	ldr	r2, [r3, #20]
    7a68:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a6c:	5cd3      	ldrb	r3, [r2, r3]
    7a6e:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Set the enable notification attribute */
            Gpt_aChannelInfo[coreID][channel].bNotificationEnabled = FALSE;
    7a72:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7a76:	4822      	ldr	r0, [pc, #136]	; (7b00 <Gpt_DisableNotification+0xb0>)
    7a78:	9a03      	ldr	r2, [sp, #12]
    7a7a:	4613      	mov	r3, r2
    7a7c:	00db      	lsls	r3, r3, #3
    7a7e:	1a9b      	subs	r3, r3, r2
    7a80:	440b      	add	r3, r1
    7a82:	00db      	lsls	r3, r3, #3
    7a84:	4403      	add	r3, r0
    7a86:	2200      	movs	r2, #0
    7a88:	711a      	strb	r2, [r3, #4]

            /* Disable hardware interrupts if the channel is not running in the ONE-SHOT mode.
            This is needed because the channel state is updated by ISR for ONE-SHOT mode */
            if ((GPT_MODE_NORMAL == Gpt_eMode[coreID]) && \
    7a8a:	4a1e      	ldr	r2, [pc, #120]	; (7b04 <Gpt_DisableNotification+0xb4>)
    7a8c:	9b03      	ldr	r3, [sp, #12]
    7a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a92:	2b00      	cmp	r3, #0
    7a94:	d12d      	bne.n	7af2 <Gpt_DisableNotification+0xa2>
                ((GPT_CH_MODE_CONTINUOUS == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode) \
    7a96:	4a19      	ldr	r2, [pc, #100]	; (7afc <Gpt_DisableNotification+0xac>)
    7a98:	9b03      	ldr	r3, [sp, #12]
    7a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a9e:	6859      	ldr	r1, [r3, #4]
    7aa0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7aa4:	4613      	mov	r3, r2
    7aa6:	005b      	lsls	r3, r3, #1
    7aa8:	4413      	add	r3, r2
    7aaa:	00db      	lsls	r3, r3, #3
    7aac:	440b      	add	r3, r1
    7aae:	3310      	adds	r3, #16
    7ab0:	681b      	ldr	r3, [r3, #0]
            if ((GPT_MODE_NORMAL == Gpt_eMode[coreID]) && \
    7ab2:	2b00      	cmp	r3, #0
    7ab4:	d00b      	beq.n	7ace <Gpt_DisableNotification+0x7e>
                 || (GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    7ab6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7aba:	4811      	ldr	r0, [pc, #68]	; (7b00 <Gpt_DisableNotification+0xb0>)
    7abc:	9a03      	ldr	r2, [sp, #12]
    7abe:	4613      	mov	r3, r2
    7ac0:	00db      	lsls	r3, r3, #3
    7ac2:	1a9b      	subs	r3, r3, r2
    7ac4:	440b      	add	r3, r1
    7ac6:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
    7aca:	2b04      	cmp	r3, #4
    7acc:	d011      	beq.n	7af2 <Gpt_DisableNotification+0xa2>
               )
            {
                /*Disable hardware interrupts*/
                Gpt_Ipw_DisableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7ace:	4a0b      	ldr	r2, [pc, #44]	; (7afc <Gpt_DisableNotification+0xac>)
    7ad0:	9b03      	ldr	r3, [sp, #12]
    7ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ad6:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_DisableInterrupt
    7ad8:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7adc:	4613      	mov	r3, r2
    7ade:	005b      	lsls	r3, r3, #1
    7ae0:	4413      	add	r3, r2
    7ae2:	00db      	lsls	r3, r3, #3
    7ae4:	440b      	add	r3, r1
    7ae6:	3314      	adds	r3, #20
    7ae8:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_DisableInterrupt
    7aea:	4618      	mov	r0, r3
    7aec:	f000 faf5 	bl	80da <Gpt_Ipw_DisableInterrupt>
        }
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
    return;
    7af0:	bf00      	nop
    7af2:	bf00      	nop
}
    7af4:	b005      	add	sp, #20
    7af6:	f85d fb04 	ldr.w	pc, [sp], #4
    7afa:	bf00      	nop
    7afc:	1fff903c 	.word	0x1fff903c
    7b00:	1fff9040 	.word	0x1fff9040
    7b04:	1fff9038 	.word	0x1fff9038

00007b08 <Gpt_SetMode>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_SetMode_Activity
*/
void Gpt_SetMode(Gpt_ModeType Mode)
{
    7b08:	b500      	push	{lr}
    7b0a:	b085      	sub	sp, #20
    7b0c:	9001      	str	r0, [sp, #4]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_OFF)
    (void)Mode;
#endif

#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7b0e:	2300      	movs	r3, #0
    7b10:	9303      	str	r3, [sp, #12]
        /*Validate the driver calling context*/
        if((Std_ReturnType)E_OK == Gpt_ValidateParamMode(Mode))
        {
#endif
            /*Implements the behaviour for the sleep mode */
            if(GPT_MODE_SLEEP == Mode)
    7b12:	9b01      	ldr	r3, [sp, #4]
    7b14:	2b01      	cmp	r3, #1
    7b16:	d10f      	bne.n	7b38 <Gpt_SetMode+0x30>
            {
                /* Check channel has wakeup enabled at runtime */
                Gpt_CheckStatusWakeupEnabled(coreID);
    7b18:	9803      	ldr	r0, [sp, #12]
    7b1a:	f7ff fb45 	bl	71a8 <Gpt_CheckStatusWakeupEnabled>

#if(GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON)
                /* De-initialize and Stop Predef Timers. */
                Gpt_Ipw_StopPredefTimer(Gpt_pConfig[coreID]);
    7b1e:	4a15      	ldr	r2, [pc, #84]	; (7b74 <Gpt_SetMode+0x6c>)
    7b20:	9b03      	ldr	r3, [sp, #12]
    7b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b26:	4618      	mov	r0, r3
    7b28:	f000 fb52 	bl	81d0 <Gpt_Ipw_StopPredefTimer>
#endif
#if (((GPT_WAKEUP_FUNCTIONALITY_API == STD_ON) && (GPT_REPORT_WAKEUP_SOURCE == STD_ON)) || \
     (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON) || \
     (GPT_PREDEFTIMER_FUNCTIONALITY_API == STD_ON))
                /* Set the driver mode to sleep */
                Gpt_eMode[coreID] = GPT_MODE_SLEEP;
    7b2c:	4a12      	ldr	r2, [pc, #72]	; (7b78 <Gpt_SetMode+0x70>)
    7b2e:	9b03      	ldr	r3, [sp, #12]
    7b30:	2101      	movs	r1, #1
    7b32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif

#endif /*GPT_REPORT_WAKEUP_SOURCE*/
    return;
    7b36:	e018      	b.n	7b6a <Gpt_SetMode+0x62>
            else if (GPT_MODE_NORMAL == Mode)
    7b38:	9b01      	ldr	r3, [sp, #4]
    7b3a:	2b00      	cmp	r3, #0
    7b3c:	d115      	bne.n	7b6a <Gpt_SetMode+0x62>
                   if ((Gpt_ModeType)GPT_MODE_SLEEP == Gpt_eMode[coreID])
    7b3e:	4a0e      	ldr	r2, [pc, #56]	; (7b78 <Gpt_SetMode+0x70>)
    7b40:	9b03      	ldr	r3, [sp, #12]
    7b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b46:	2b01      	cmp	r3, #1
    7b48:	d106      	bne.n	7b58 <Gpt_SetMode+0x50>
                   Gpt_Ipw_StartPredefTimer(Gpt_pConfig[coreID]);
    7b4a:	4a0a      	ldr	r2, [pc, #40]	; (7b74 <Gpt_SetMode+0x6c>)
    7b4c:	9b03      	ldr	r3, [sp, #12]
    7b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b52:	4618      	mov	r0, r3
    7b54:	f000 faca 	bl	80ec <Gpt_Ipw_StartPredefTimer>
                Gpt_CheckStatusNotificationEnabled(coreID);
    7b58:	9803      	ldr	r0, [sp, #12]
    7b5a:	f7ff faad 	bl	70b8 <Gpt_CheckStatusNotificationEnabled>
                Gpt_eMode[coreID] = GPT_MODE_NORMAL;
    7b5e:	4a06      	ldr	r2, [pc, #24]	; (7b78 <Gpt_SetMode+0x70>)
    7b60:	9b03      	ldr	r3, [sp, #12]
    7b62:	2100      	movs	r1, #0
    7b64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return;
    7b68:	bf00      	nop
    7b6a:	bf00      	nop
}
    7b6c:	b005      	add	sp, #20
    7b6e:	f85d fb04 	ldr.w	pc, [sp], #4
    7b72:	bf00      	nop
    7b74:	1fff903c 	.word	0x1fff903c
    7b78:	1fff9038 	.word	0x1fff9038

00007b7c <Gpt_DisableWakeup>:
*
* @pre          The driver needs to be initialized.
* @implements   Gpt_DisableWakeup_Activity
*/
void Gpt_DisableWakeup(Gpt_ChannelType channel)
{
    7b7c:	b500      	push	{lr}
    7b7e:	b085      	sub	sp, #20
    7b80:	4603      	mov	r3, r0
    7b82:	f88d 3007 	strb.w	r3, [sp, #7]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7b86:	2300      	movs	r3, #0
    7b88:	9303      	str	r3, [sp, #12]

#if (GPT_VALIDATE_PARAM == STD_ON)
        if((Std_ReturnType)E_OK == Gpt_ValidateChannelWakeup(GPT_DISABLEWAKEUP_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7b8a:	4a27      	ldr	r2, [pc, #156]	; (7c28 <Gpt_DisableWakeup+0xac>)
    7b8c:	9b03      	ldr	r3, [sp, #12]
    7b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b92:	695a      	ldr	r2, [r3, #20]
    7b94:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b98:	5cd3      	ldrb	r3, [r2, r3]
    7b9a:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Set the enable wakeup attribute */
            Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = FALSE;
    7b9e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7ba2:	4822      	ldr	r0, [pc, #136]	; (7c2c <Gpt_DisableWakeup+0xb0>)
    7ba4:	9a03      	ldr	r2, [sp, #12]
    7ba6:	4613      	mov	r3, r2
    7ba8:	00db      	lsls	r3, r3, #3
    7baa:	1a9b      	subs	r3, r3, r2
    7bac:	440b      	add	r3, r1
    7bae:	00db      	lsls	r3, r3, #3
    7bb0:	4403      	add	r3, r0
    7bb2:	2200      	movs	r2, #0
    7bb4:	715a      	strb	r2, [r3, #5]

            /* Disable hardware interrupts if the channel is not running in the ONE-SHOT mode.
            This is needed because the channel state is updated by ISR for ONE-SHOT mode */
            if ((GPT_MODE_SLEEP == Gpt_eMode[coreID]) && \
    7bb6:	4a1e      	ldr	r2, [pc, #120]	; (7c30 <Gpt_DisableWakeup+0xb4>)
    7bb8:	9b03      	ldr	r3, [sp, #12]
    7bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bbe:	2b01      	cmp	r3, #1
    7bc0:	d12d      	bne.n	7c1e <Gpt_DisableWakeup+0xa2>
                ((GPT_CH_MODE_CONTINUOUS == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    7bc2:	4a19      	ldr	r2, [pc, #100]	; (7c28 <Gpt_DisableWakeup+0xac>)
    7bc4:	9b03      	ldr	r3, [sp, #12]
    7bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bca:	6859      	ldr	r1, [r3, #4]
    7bcc:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7bd0:	4613      	mov	r3, r2
    7bd2:	005b      	lsls	r3, r3, #1
    7bd4:	4413      	add	r3, r2
    7bd6:	00db      	lsls	r3, r3, #3
    7bd8:	440b      	add	r3, r1
    7bda:	3310      	adds	r3, #16
    7bdc:	681b      	ldr	r3, [r3, #0]
            if ((GPT_MODE_SLEEP == Gpt_eMode[coreID]) && \
    7bde:	2b00      	cmp	r3, #0
    7be0:	d00b      	beq.n	7bfa <Gpt_DisableWakeup+0x7e>
                 || (GPT_STATUS_RUNNING != Gpt_aChannelInfo[coreID][channel].eChannelStatus)
    7be2:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7be6:	4811      	ldr	r0, [pc, #68]	; (7c2c <Gpt_DisableWakeup+0xb0>)
    7be8:	9a03      	ldr	r2, [sp, #12]
    7bea:	4613      	mov	r3, r2
    7bec:	00db      	lsls	r3, r3, #3
    7bee:	1a9b      	subs	r3, r3, r2
    7bf0:	440b      	add	r3, r1
    7bf2:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
    7bf6:	2b04      	cmp	r3, #4
    7bf8:	d011      	beq.n	7c1e <Gpt_DisableWakeup+0xa2>
               )
            {
                /*Disable hardware interrupts*/
                Gpt_Ipw_DisableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7bfa:	4a0b      	ldr	r2, [pc, #44]	; (7c28 <Gpt_DisableWakeup+0xac>)
    7bfc:	9b03      	ldr	r3, [sp, #12]
    7bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c02:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_DisableInterrupt
    7c04:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7c08:	4613      	mov	r3, r2
    7c0a:	005b      	lsls	r3, r3, #1
    7c0c:	4413      	add	r3, r2
    7c0e:	00db      	lsls	r3, r3, #3
    7c10:	440b      	add	r3, r1
    7c12:	3314      	adds	r3, #20
    7c14:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_DisableInterrupt
    7c16:	4618      	mov	r0, r3
    7c18:	f000 fa5f 	bl	80da <Gpt_Ipw_DisableInterrupt>
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
#endif /*GPT_REPORT_WAKEUP_SOURCE*/
    return;
    7c1c:	bf00      	nop
    7c1e:	bf00      	nop
}
    7c20:	b005      	add	sp, #20
    7c22:	f85d fb04 	ldr.w	pc, [sp], #4
    7c26:	bf00      	nop
    7c28:	1fff903c 	.word	0x1fff903c
    7c2c:	1fff9040 	.word	0x1fff9040
    7c30:	1fff9038 	.word	0x1fff9038

00007c34 <Gpt_EnableWakeup>:
*
* @pre          The driver needs to be initialized. The channel must be configured as wakeup capable.
* @implements   Gpt_EnableWakeup_Activity
*/
void Gpt_EnableWakeup(Gpt_ChannelType channel)
{
    7c34:	b500      	push	{lr}
    7c36:	b085      	sub	sp, #20
    7c38:	4603      	mov	r3, r0
    7c3a:	f88d 3007 	strb.w	r3, [sp, #7]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7c3e:	2300      	movs	r3, #0
    7c40:	9303      	str	r3, [sp, #12]
#endif
#if (GPT_VALIDATE_PARAM == STD_ON)
        if((Std_ReturnType)E_OK == Gpt_ValidateChannelWakeup(GPT_ENABLEWAKEUP_ID, channel, coreID))
        {
#endif
            ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7c42:	4a19      	ldr	r2, [pc, #100]	; (7ca8 <Gpt_EnableWakeup+0x74>)
    7c44:	9b03      	ldr	r3, [sp, #12]
    7c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c4a:	695a      	ldr	r2, [r3, #20]
    7c4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c50:	5cd3      	ldrb	r3, [r2, r3]
    7c52:	f88d 300b 	strb.w	r3, [sp, #11]
            /* Functionality implementation */
            /* Set the enable wakeup attribute */
            Gpt_aChannelInfo[coreID][channel].bWakeupEnabled = TRUE;
    7c56:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7c5a:	4814      	ldr	r0, [pc, #80]	; (7cac <Gpt_EnableWakeup+0x78>)
    7c5c:	9a03      	ldr	r2, [sp, #12]
    7c5e:	4613      	mov	r3, r2
    7c60:	00db      	lsls	r3, r3, #3
    7c62:	1a9b      	subs	r3, r3, r2
    7c64:	440b      	add	r3, r1
    7c66:	00db      	lsls	r3, r3, #3
    7c68:	4403      	add	r3, r0
    7c6a:	2201      	movs	r2, #1
    7c6c:	715a      	strb	r2, [r3, #5]

            if (GPT_MODE_SLEEP == Gpt_eMode[coreID])
    7c6e:	4a10      	ldr	r2, [pc, #64]	; (7cb0 <Gpt_EnableWakeup+0x7c>)
    7c70:	9b03      	ldr	r3, [sp, #12]
    7c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c76:	2b01      	cmp	r3, #1
    7c78:	d111      	bne.n	7c9e <Gpt_EnableWakeup+0x6a>
            {
                /*Enable hardware interrupts*/
                Gpt_Ipw_EnableInterrupt
                (
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7c7a:	4a0b      	ldr	r2, [pc, #44]	; (7ca8 <Gpt_EnableWakeup+0x74>)
    7c7c:	9b03      	ldr	r3, [sp, #12]
    7c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c82:	6859      	ldr	r1, [r3, #4]
                Gpt_Ipw_EnableInterrupt
    7c84:	f89d 200b 	ldrb.w	r2, [sp, #11]
                    ((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_Ipw_HwChannelConfig)
    7c88:	4613      	mov	r3, r2
    7c8a:	005b      	lsls	r3, r3, #1
    7c8c:	4413      	add	r3, r2
    7c8e:	00db      	lsls	r3, r3, #3
    7c90:	440b      	add	r3, r1
    7c92:	3314      	adds	r3, #20
    7c94:	681b      	ldr	r3, [r3, #0]
                Gpt_Ipw_EnableInterrupt
    7c96:	4618      	mov	r0, r3
    7c98:	f000 fa04 	bl	80a4 <Gpt_Ipw_EnableInterrupt>
#endif
#if (GPT_VALIDATE_CHANNEL_CALL == STD_ON)
    }
#endif
#endif /*GPT_REPORT_WAKEUP_SOURCE*/
    return;
    7c9c:	bf00      	nop
    7c9e:	bf00      	nop
}
    7ca0:	b005      	add	sp, #20
    7ca2:	f85d fb04 	ldr.w	pc, [sp], #4
    7ca6:	bf00      	nop
    7ca8:	1fff903c 	.word	0x1fff903c
    7cac:	1fff9040 	.word	0x1fff9040
    7cb0:	1fff9038 	.word	0x1fff9038

00007cb4 <Gpt_CheckWakeup>:
*
* @pre          The driver needs to be initialized. The channel must be configured as wakeup capable.
* @implements   Gpt_CheckWakeup_Activity
*/
void Gpt_CheckWakeup(EcuM_WakeupSourceType wakeupSource)
{
    7cb4:	b500      	push	{lr}
    7cb6:	b087      	sub	sp, #28
    7cb8:	9001      	str	r0, [sp, #4]
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7cba:	2300      	movs	r3, #0
    7cbc:	9304      	str	r3, [sp, #16]
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    /*Validate the driver calling context*/
    if((Std_ReturnType)E_OK == Gpt_ValidateGlobalCall(GPT_CHECKWAKEUP_ID, coreID))
    {
#endif
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7cbe:	2300      	movs	r3, #0
    7cc0:	f88d 3017 	strb.w	r3, [sp, #23]
    7cc4:	e03f      	b.n	7d46 <Gpt_CheckWakeup+0x92>
        {
            channel = Gpt_ConvertChannelIndexToChannel(ChannelIndex, coreID);
    7cc6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7cca:	9904      	ldr	r1, [sp, #16]
    7ccc:	4618      	mov	r0, r3
    7cce:	f7ff f9cb 	bl	7068 <Gpt_ConvertChannelIndexToChannel>
    7cd2:	4603      	mov	r3, r0
    7cd4:	f88d 300f 	strb.w	r3, [sp, #15]
            if(channel < GPT_HW_CHANNEL_NUM)
    7cd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7cdc:	2b06      	cmp	r3, #6
    7cde:	d82d      	bhi.n	7d3c <Gpt_CheckWakeup+0x88>
            {
                if ((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_uWakeupSource) == wakeupSource) && \
    7ce0:	4a1f      	ldr	r2, [pc, #124]	; (7d60 <Gpt_CheckWakeup+0xac>)
    7ce2:	9b04      	ldr	r3, [sp, #16]
    7ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ce8:	6859      	ldr	r1, [r3, #4]
    7cea:	f89d 2017 	ldrb.w	r2, [sp, #23]
    7cee:	4613      	mov	r3, r2
    7cf0:	005b      	lsls	r3, r3, #1
    7cf2:	4413      	add	r3, r2
    7cf4:	00db      	lsls	r3, r3, #3
    7cf6:	440b      	add	r3, r1
    7cf8:	3308      	adds	r3, #8
    7cfa:	681b      	ldr	r3, [r3, #0]
    7cfc:	9a01      	ldr	r2, [sp, #4]
    7cfe:	429a      	cmp	r2, r3
    7d00:	d11c      	bne.n	7d3c <Gpt_CheckWakeup+0x88>
                    ((boolean)TRUE == Gpt_aChannelInfo[coreID][channel].bWakeupGenerated)
    7d02:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7d06:	4817      	ldr	r0, [pc, #92]	; (7d64 <Gpt_CheckWakeup+0xb0>)
    7d08:	9a04      	ldr	r2, [sp, #16]
    7d0a:	4613      	mov	r3, r2
    7d0c:	00db      	lsls	r3, r3, #3
    7d0e:	1a9b      	subs	r3, r3, r2
    7d10:	440b      	add	r3, r1
    7d12:	00db      	lsls	r3, r3, #3
    7d14:	4403      	add	r3, r0
    7d16:	799b      	ldrb	r3, [r3, #6]
                if ((((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_uWakeupSource) == wakeupSource) && \
    7d18:	2b00      	cmp	r3, #0
    7d1a:	d00f      	beq.n	7d3c <Gpt_CheckWakeup+0x88>
                    )
                {
                    /*Reset the wakeup flag */
                    Gpt_aChannelInfo[coreID][channel].bWakeupGenerated = FALSE;
    7d1c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7d20:	4810      	ldr	r0, [pc, #64]	; (7d64 <Gpt_CheckWakeup+0xb0>)
    7d22:	9a04      	ldr	r2, [sp, #16]
    7d24:	4613      	mov	r3, r2
    7d26:	00db      	lsls	r3, r3, #3
    7d28:	1a9b      	subs	r3, r3, r2
    7d2a:	440b      	add	r3, r1
    7d2c:	00db      	lsls	r3, r3, #3
    7d2e:	4403      	add	r3, r0
    7d30:	2200      	movs	r2, #0
    7d32:	719a      	strb	r2, [r3, #6]

                    /* Calling EcuM_SetWakeupEvent and exit*/
                    EcuM_SetWakeupEvent(wakeupSource);
    7d34:	9801      	ldr	r0, [sp, #4]
    7d36:	f000 fa7b 	bl	8230 <EcuM_SetWakeupEvent>

                    break;
    7d3a:	e00d      	b.n	7d58 <Gpt_CheckWakeup+0xa4>
        for (ChannelIndex = 0U; ChannelIndex < Gpt_pConfig[coreID]->channelCount; ChannelIndex++)
    7d3c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7d40:	3301      	adds	r3, #1
    7d42:	f88d 3017 	strb.w	r3, [sp, #23]
    7d46:	4a06      	ldr	r2, [pc, #24]	; (7d60 <Gpt_CheckWakeup+0xac>)
    7d48:	9b04      	ldr	r3, [sp, #16]
    7d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d4e:	781b      	ldrb	r3, [r3, #0]
    7d50:	f89d 2017 	ldrb.w	r2, [sp, #23]
    7d54:	429a      	cmp	r2, r3
    7d56:	d3b6      	bcc.n	7cc6 <Gpt_CheckWakeup+0x12>
        }    /*for*/
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
#endif /* GPT_REPORT_WAKEUP_SOURCE */
    return;
    7d58:	bf00      	nop
}
    7d5a:	b007      	add	sp, #28
    7d5c:	f85d fb04 	ldr.w	pc, [sp], #4
    7d60:	1fff903c 	.word	0x1fff903c
    7d64:	1fff9040 	.word	0x1fff9040

00007d68 <Gpt_ProcessCommonInterrupt>:
* @return       void
* @pre          The driver needs to be initialized.
* @implements   Gpt_ProcessCommonInterrupt_Activity
*/
void Gpt_ProcessCommonInterrupt(uint8 channel)
{
    7d68:	b500      	push	{lr}
    7d6a:	b085      	sub	sp, #20
    7d6c:	4603      	mov	r3, r0
    7d6e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ChannelIndex;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7d72:	2300      	movs	r3, #0
    7d74:	9303      	str	r3, [sp, #12]

    if (Gpt_pConfig[coreID] != NULL_PTR)
    7d76:	4a41      	ldr	r2, [pc, #260]	; (7e7c <Gpt_ProcessCommonInterrupt+0x114>)
    7d78:	9b03      	ldr	r3, [sp, #12]
    7d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d7e:	2b00      	cmp	r3, #0
    7d80:	d077      	beq.n	7e72 <Gpt_ProcessCommonInterrupt+0x10a>
    {
        /* Extract the logical channel from the hardware to logic map table */
        ChannelIndex = (*(Gpt_pConfig[coreID]->u8GptChannelIdToIndexMap))[channel];
    7d82:	4a3e      	ldr	r2, [pc, #248]	; (7e7c <Gpt_ProcessCommonInterrupt+0x114>)
    7d84:	9b03      	ldr	r3, [sp, #12]
    7d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d8a:	695a      	ldr	r2, [r3, #20]
    7d8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d90:	5cd3      	ldrb	r3, [r2, r3]
    7d92:	f88d 300b 	strb.w	r3, [sp, #11]

        /* Change the channel status for one-shot mode */
        if (GPT_CH_MODE_ONESHOT == (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_eChannelMode)
    7d96:	4a39      	ldr	r2, [pc, #228]	; (7e7c <Gpt_ProcessCommonInterrupt+0x114>)
    7d98:	9b03      	ldr	r3, [sp, #12]
    7d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d9e:	6859      	ldr	r1, [r3, #4]
    7da0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7da4:	4613      	mov	r3, r2
    7da6:	005b      	lsls	r3, r3, #1
    7da8:	4413      	add	r3, r2
    7daa:	00db      	lsls	r3, r3, #3
    7dac:	440b      	add	r3, r1
    7dae:	3310      	adds	r3, #16
    7db0:	681b      	ldr	r3, [r3, #0]
    7db2:	2b01      	cmp	r3, #1
    7db4:	d10a      	bne.n	7dcc <Gpt_ProcessCommonInterrupt+0x64>
        {
            /* Change the channel status to expired */
            Gpt_aChannelInfo[coreID][channel].eChannelStatus = GPT_STATUS_EXPIRED;
    7db6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7dba:	4831      	ldr	r0, [pc, #196]	; (7e80 <Gpt_ProcessCommonInterrupt+0x118>)
    7dbc:	9a03      	ldr	r2, [sp, #12]
    7dbe:	4613      	mov	r3, r2
    7dc0:	00db      	lsls	r3, r3, #3
    7dc2:	1a9b      	subs	r3, r3, r2
    7dc4:	440b      	add	r3, r1
    7dc6:	2203      	movs	r2, #3
    7dc8:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
        }
#if (GPT_ENABLE_DISABLE_NOTIFICATION_API == STD_ON)
        if ((GPT_MODE_NORMAL == Gpt_eMode[coreID]) && (TRUE == Gpt_aChannelInfo[coreID][channel].bNotificationEnabled))
    7dcc:	4a2d      	ldr	r2, [pc, #180]	; (7e84 <Gpt_ProcessCommonInterrupt+0x11c>)
    7dce:	9b03      	ldr	r3, [sp, #12]
    7dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7dd4:	2b00      	cmp	r3, #0
    7dd6:	d11b      	bne.n	7e10 <Gpt_ProcessCommonInterrupt+0xa8>
    7dd8:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7ddc:	4828      	ldr	r0, [pc, #160]	; (7e80 <Gpt_ProcessCommonInterrupt+0x118>)
    7dde:	9a03      	ldr	r2, [sp, #12]
    7de0:	4613      	mov	r3, r2
    7de2:	00db      	lsls	r3, r3, #3
    7de4:	1a9b      	subs	r3, r3, r2
    7de6:	440b      	add	r3, r1
    7de8:	00db      	lsls	r3, r3, #3
    7dea:	4403      	add	r3, r0
    7dec:	791b      	ldrb	r3, [r3, #4]
    7dee:	2b00      	cmp	r3, #0
    7df0:	d00e      	beq.n	7e10 <Gpt_ProcessCommonInterrupt+0xa8>
        {
            (*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_pfNotification();
    7df2:	4a22      	ldr	r2, [pc, #136]	; (7e7c <Gpt_ProcessCommonInterrupt+0x114>)
    7df4:	9b03      	ldr	r3, [sp, #12]
    7df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7dfa:	6859      	ldr	r1, [r3, #4]
    7dfc:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7e00:	4613      	mov	r3, r2
    7e02:	005b      	lsls	r3, r3, #1
    7e04:	4413      	add	r3, r2
    7e06:	00db      	lsls	r3, r3, #3
    7e08:	440b      	add	r3, r1
    7e0a:	3304      	adds	r3, #4
    7e0c:	681b      	ldr	r3, [r3, #0]
    7e0e:	4798      	blx	r3
        }
#endif

#if (GPT_WAKEUP_FUNCTIONALITY_API == STD_ON)
#if (GPT_REPORT_WAKEUP_SOURCE == STD_ON)
        if ((GPT_MODE_SLEEP == Gpt_eMode[coreID]) && (TRUE == Gpt_aChannelInfo[coreID][channel].bWakeupEnabled))
    7e10:	4a1c      	ldr	r2, [pc, #112]	; (7e84 <Gpt_ProcessCommonInterrupt+0x11c>)
    7e12:	9b03      	ldr	r3, [sp, #12]
    7e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e18:	2b01      	cmp	r3, #1
    7e1a:	d12a      	bne.n	7e72 <Gpt_ProcessCommonInterrupt+0x10a>
    7e1c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7e20:	4817      	ldr	r0, [pc, #92]	; (7e80 <Gpt_ProcessCommonInterrupt+0x118>)
    7e22:	9a03      	ldr	r2, [sp, #12]
    7e24:	4613      	mov	r3, r2
    7e26:	00db      	lsls	r3, r3, #3
    7e28:	1a9b      	subs	r3, r3, r2
    7e2a:	440b      	add	r3, r1
    7e2c:	00db      	lsls	r3, r3, #3
    7e2e:	4403      	add	r3, r0
    7e30:	795b      	ldrb	r3, [r3, #5]
    7e32:	2b00      	cmp	r3, #0
    7e34:	d01d      	beq.n	7e72 <Gpt_ProcessCommonInterrupt+0x10a>
        {
            Gpt_aChannelInfo[coreID][channel].bWakeupGenerated =TRUE;
    7e36:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7e3a:	4811      	ldr	r0, [pc, #68]	; (7e80 <Gpt_ProcessCommonInterrupt+0x118>)
    7e3c:	9a03      	ldr	r2, [sp, #12]
    7e3e:	4613      	mov	r3, r2
    7e40:	00db      	lsls	r3, r3, #3
    7e42:	1a9b      	subs	r3, r3, r2
    7e44:	440b      	add	r3, r1
    7e46:	00db      	lsls	r3, r3, #3
    7e48:	4403      	add	r3, r0
    7e4a:	2201      	movs	r2, #1
    7e4c:	719a      	strb	r2, [r3, #6]
            EcuM_CheckWakeup((*(Gpt_pConfig[coreID]->Gpt_pChannelConfig))[ChannelIndex].Gpt_uWakeupSource);
    7e4e:	4a0b      	ldr	r2, [pc, #44]	; (7e7c <Gpt_ProcessCommonInterrupt+0x114>)
    7e50:	9b03      	ldr	r3, [sp, #12]
    7e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e56:	6859      	ldr	r1, [r3, #4]
    7e58:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7e5c:	4613      	mov	r3, r2
    7e5e:	005b      	lsls	r3, r3, #1
    7e60:	4413      	add	r3, r2
    7e62:	00db      	lsls	r3, r3, #3
    7e64:	440b      	add	r3, r1
    7e66:	3308      	adds	r3, #8
    7e68:	681b      	ldr	r3, [r3, #0]
    7e6a:	4618      	mov	r0, r3
    7e6c:	f000 f9ef 	bl	824e <EcuM_CheckWakeup>
        }
#endif
#endif
    }
    return;
    7e70:	bf00      	nop
    7e72:	bf00      	nop
}
    7e74:	b005      	add	sp, #20
    7e76:	f85d fb04 	ldr.w	pc, [sp], #4
    7e7a:	bf00      	nop
    7e7c:	1fff903c 	.word	0x1fff903c
    7e80:	1fff9040 	.word	0x1fff9040
    7e84:	1fff9038 	.word	0x1fff9038

00007e88 <Gpt_GetPredefTimerValue>:
Std_ReturnType Gpt_GetPredefTimerValue
(
    Gpt_PredefTimerType PredefTimer,
    uint32 * TimeValuePtr
)
{
    7e88:	b500      	push	{lr}
    7e8a:	b085      	sub	sp, #20
    7e8c:	9001      	str	r0, [sp, #4]
    7e8e:	9100      	str	r1, [sp, #0]
    Std_ReturnType returnValue;
    Gpt_ChannelType channel;
    uint32 coreID = (uint32)Gpt_GetCoreID();
    7e90:	2300      	movs	r3, #0
    7e92:	9303      	str	r3, [sp, #12]
            returnValue = Gpt_ValidateParamTypePredefTimer(PredefTimer, coreID);
            if((Std_ReturnType)E_OK == returnValue)
            {
#endif

               returnValue = Gpt_ValidateMode(GPT_GET_PREDEF_TIMERVALUE_ID, coreID);
    7e94:	9903      	ldr	r1, [sp, #12]
    7e96:	200d      	movs	r0, #13
    7e98:	f7ff f8c4 	bl	7024 <Gpt_ValidateMode>
    7e9c:	4603      	mov	r3, r0
    7e9e:	f88d 300b 	strb.w	r3, [sp, #11]
               if((Std_ReturnType)E_OK ==returnValue)
    7ea2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7ea6:	2b00      	cmp	r3, #0
    7ea8:	d112      	bne.n	7ed0 <Gpt_GetPredefTimerValue+0x48>
               {

                        channel = (Gpt_ChannelType)PredefTimer;
    7eaa:	9b01      	ldr	r3, [sp, #4]
    7eac:	f88d 300a 	strb.w	r3, [sp, #10]

                        Gpt_Ipw_GetPredefTimerValue((Gpt_pConfig[coreID]->Gpt_pChannelPredefConfigType)[channel], PredefTimer, TimeValuePtr);
    7eb0:	4a0c      	ldr	r2, [pc, #48]	; (7ee4 <Gpt_GetPredefTimerValue+0x5c>)
    7eb2:	9b03      	ldr	r3, [sp, #12]
    7eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7eb8:	691a      	ldr	r2, [r3, #16]
    7eba:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7ebe:	009b      	lsls	r3, r3, #2
    7ec0:	4413      	add	r3, r2
    7ec2:	681b      	ldr	r3, [r3, #0]
    7ec4:	9a00      	ldr	r2, [sp, #0]
    7ec6:	9901      	ldr	r1, [sp, #4]
    7ec8:	4618      	mov	r0, r3
    7eca:	f000 f943 	bl	8154 <Gpt_Ipw_GetPredefTimerValue>
    7ece:	e002      	b.n	7ed6 <Gpt_GetPredefTimerValue+0x4e>

               }
               else
               {
                   *TimeValuePtr = 0U;
    7ed0:	9b00      	ldr	r3, [sp, #0]
    7ed2:	2200      	movs	r2, #0
    7ed4:	601a      	str	r2, [r3, #0]
        }
#endif
#if (GPT_VALIDATE_GLOBAL_CALL == STD_ON)
    }
#endif
    return returnValue;
    7ed6:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    7eda:	4618      	mov	r0, r3
    7edc:	b005      	add	sp, #20
    7ede:	f85d fb04 	ldr.w	pc, [sp], #4
    7ee2:	bf00      	nop
    7ee4:	1fff903c 	.word	0x1fff903c

00007ee8 <Ftm_Gpt_Ip_GetChInterruptStatusFlag>:
{
    7ee8:	b082      	sub	sp, #8
    7eea:	4603      	mov	r3, r0
    7eec:	460a      	mov	r2, r1
    7eee:	f88d 3007 	strb.w	r3, [sp, #7]
    7ef2:	4613      	mov	r3, r2
    7ef4:	f88d 3006 	strb.w	r3, [sp, #6]
    return (0U != (ftmGptBase[instance]->CONTROLS[channel].CSC & FTM_CSC_CHF_MASK)) ? TRUE : FALSE;
    7ef8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7efc:	4a09      	ldr	r2, [pc, #36]	; (7f24 <Ftm_Gpt_Ip_GetChInterruptStatusFlag+0x3c>)
    7efe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7f02:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7f06:	3301      	adds	r3, #1
    7f08:	00db      	lsls	r3, r3, #3
    7f0a:	4413      	add	r3, r2
    7f0c:	685b      	ldr	r3, [r3, #4]
    7f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7f12:	2b00      	cmp	r3, #0
    7f14:	bf14      	ite	ne
    7f16:	2301      	movne	r3, #1
    7f18:	2300      	moveq	r3, #0
    7f1a:	b2db      	uxtb	r3, r3
}
    7f1c:	4618      	mov	r0, r3
    7f1e:	b002      	add	sp, #8
    7f20:	4770      	bx	lr
    7f22:	bf00      	nop
    7f24:	0000c1e0 	.word	0x0000c1e0

00007f28 <Ftm_Gpt_Ip_GetCntValue>:
{
    7f28:	b082      	sub	sp, #8
    7f2a:	4603      	mov	r3, r0
    7f2c:	f88d 3007 	strb.w	r3, [sp, #7]
    return ftmGptBase[instance]->CNT;
    7f30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f34:	4a03      	ldr	r2, [pc, #12]	; (7f44 <Ftm_Gpt_Ip_GetCntValue+0x1c>)
    7f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f3a:	685b      	ldr	r3, [r3, #4]
}
    7f3c:	4618      	mov	r0, r3
    7f3e:	b002      	add	sp, #8
    7f40:	4770      	bx	lr
    7f42:	bf00      	nop
    7f44:	0000c1e0 	.word	0x0000c1e0

00007f48 <Ftm_Gpt_Ip_GetCompareValue>:
{
    7f48:	b082      	sub	sp, #8
    7f4a:	4603      	mov	r3, r0
    7f4c:	460a      	mov	r2, r1
    7f4e:	f88d 3007 	strb.w	r3, [sp, #7]
    7f52:	4613      	mov	r3, r2
    7f54:	f88d 3006 	strb.w	r3, [sp, #6]
    return ftmGptBase[instance]->CONTROLS[channel].CV;
    7f58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f5c:	4a05      	ldr	r2, [pc, #20]	; (7f74 <Ftm_Gpt_Ip_GetCompareValue+0x2c>)
    7f5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7f62:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7f66:	3301      	adds	r3, #1
    7f68:	00db      	lsls	r3, r3, #3
    7f6a:	4413      	add	r3, r2
    7f6c:	689b      	ldr	r3, [r3, #8]
}
    7f6e:	4618      	mov	r0, r3
    7f70:	b002      	add	sp, #8
    7f72:	4770      	bx	lr
    7f74:	0000c1e0 	.word	0x0000c1e0

00007f78 <Gpt_Ipw_InitInstances>:
*
* @return       void
* @pre          The driver needs to be initialized.
*/
void Gpt_Ipw_InitInstances(const Gpt_ConfigType * configPtr)
{
    7f78:	b500      	push	{lr}
    7f7a:	b085      	sub	sp, #20
    7f7c:	9001      	str	r0, [sp, #4]

    uint8 index = 0U;
    7f7e:	2300      	movs	r3, #0
    7f80:	f88d 300f 	strb.w	r3, [sp, #15]

    for(index = 0; index < configPtr->instanceCount; index++)
    7f84:	2300      	movs	r3, #0
    7f86:	f88d 300f 	strb.w	r3, [sp, #15]
    7f8a:	e022      	b.n	7fd2 <Gpt_Ipw_InitInstances+0x5a>
    {
        switch((*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].instanceType)
    7f8c:	9b01      	ldr	r3, [sp, #4]
    7f8e:	68da      	ldr	r2, [r3, #12]
    7f90:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7f94:	011b      	lsls	r3, r3, #4
    7f96:	4413      	add	r3, r2
    7f98:	681b      	ldr	r3, [r3, #0]
    7f9a:	2b00      	cmp	r3, #0
    7f9c:	d113      	bne.n	7fc6 <Gpt_Ipw_InitInstances+0x4e>
        {
#if (FTM_GPT_IP_USED == STD_ON)
            case(GPT_FTM_MODULE):
            {
                Ftm_Gpt_Ip_Init((*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].instance,
    7f9e:	9b01      	ldr	r3, [sp, #4]
    7fa0:	68da      	ldr	r2, [r3, #12]
    7fa2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7fa6:	011b      	lsls	r3, r3, #4
    7fa8:	4413      	add	r3, r2
    7faa:	3304      	adds	r3, #4
    7fac:	7818      	ldrb	r0, [r3, #0]
                                (*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].Gpt_Ipw_InstanceConfig.Ftm_Gpt_Ip_InstanceConfig);
    7fae:	9b01      	ldr	r3, [sp, #4]
    7fb0:	68da      	ldr	r2, [r3, #12]
                Ftm_Gpt_Ip_Init((*(configPtr->Gpt_Ipw_HwInstanceConfig))[index].instance,
    7fb2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7fb6:	011b      	lsls	r3, r3, #4
    7fb8:	4413      	add	r3, r2
    7fba:	3308      	adds	r3, #8
    7fbc:	681b      	ldr	r3, [r3, #0]
    7fbe:	4619      	mov	r1, r3
    7fc0:	f7fe fc6a 	bl	6898 <Ftm_Gpt_Ip_Init>
            }
            break;
    7fc4:	e000      	b.n	7fc8 <Gpt_Ipw_InitInstances+0x50>
            break;
#endif

            default:
                /*This switch branch is empty because it shall not be executed for normal behaviour*/
            break;
    7fc6:	bf00      	nop
    for(index = 0; index < configPtr->instanceCount; index++)
    7fc8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7fcc:	3301      	adds	r3, #1
    7fce:	f88d 300f 	strb.w	r3, [sp, #15]
    7fd2:	9b01      	ldr	r3, [sp, #4]
    7fd4:	7a1b      	ldrb	r3, [r3, #8]
    7fd6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7fda:	429a      	cmp	r2, r3
    7fdc:	d3d6      	bcc.n	7f8c <Gpt_Ipw_InitInstances+0x14>
        }
    }
    return;
    7fde:	bf00      	nop
}
    7fe0:	b005      	add	sp, #20
    7fe2:	f85d fb04 	ldr.w	pc, [sp], #4

00007fe6 <Gpt_Ipw_Init>:
* @param[in]    pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return       void
* @pre          The driver needs to be initialized.
*/
void Gpt_Ipw_Init(const Gpt_Ipw_HwChannelConfigType *pHwChannelConfig)
{
    7fe6:	b500      	push	{lr}
    7fe8:	b083      	sub	sp, #12
    7fea:	9001      	str	r0, [sp, #4]

    switch(pHwChannelConfig->instanceType)
    7fec:	9b01      	ldr	r3, [sp, #4]
    7fee:	681b      	ldr	r3, [r3, #0]
    7ff0:	2b00      	cmp	r3, #0
    7ff2:	d108      	bne.n	8006 <Gpt_Ipw_Init+0x20>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {
            Ftm_Gpt_Ip_InitChannel(pHwChannelConfig->instance,
    7ff4:	9b01      	ldr	r3, [sp, #4]
    7ff6:	791a      	ldrb	r2, [r3, #4]
    7ff8:	9b01      	ldr	r3, [sp, #4]
    7ffa:	689b      	ldr	r3, [r3, #8]
    7ffc:	4619      	mov	r1, r3
    7ffe:	4610      	mov	r0, r2
    8000:	f7fe fc8c 	bl	691c <Ftm_Gpt_Ip_InitChannel>
                                   pHwChannelConfig->Gpt_Ipw_ChannelConfig.Ftm_Gpt_Ip_ChannelConfig);
        }
        break;
    8004:	e000      	b.n	8008 <Gpt_Ipw_Init+0x22>
        }
            break;
#endif
        default:
            /* This switch branch is empty because it shall not be executed for normal behaviour */
        break;
    8006:	bf00      	nop
    }
    return;
    8008:	bf00      	nop
}
    800a:	b003      	add	sp, #12
    800c:	f85d fb04 	ldr.w	pc, [sp], #4

00008010 <Gpt_Ipw_StartTimer>:
* @param[in]     uValue              Timeout period (in ticks) after which a notification shall occur (if enabled).
* @return        void
* @pre           The driver needs to be initialized.Call Gpt_StartTimer before.
*/
Std_ReturnType Gpt_Ipw_StartTimer(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig, Gpt_ValueType uValue)
{
    8010:	b500      	push	{lr}
    8012:	b085      	sub	sp, #20
    8014:	9001      	str	r0, [sp, #4]
    8016:	9100      	str	r1, [sp, #0]

    Std_ReturnType returnValue = (Std_ReturnType)E_NOT_OK;
    8018:	2301      	movs	r3, #1
    801a:	f88d 300f 	strb.w	r3, [sp, #15]

    switch(pHwChannelConfig->instanceType)
    801e:	9b01      	ldr	r3, [sp, #4]
    8020:	681b      	ldr	r3, [r3, #0]
    8022:	2b00      	cmp	r3, #0
    8024:	d10c      	bne.n	8040 <Gpt_Ipw_StartTimer+0x30>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
            {
                Ftm_Gpt_Ip_StartCounting(pHwChannelConfig->instance,
    8026:	9b01      	ldr	r3, [sp, #4]
    8028:	7918      	ldrb	r0, [r3, #4]
    802a:	9b01      	ldr	r3, [sp, #4]
    802c:	795b      	ldrb	r3, [r3, #5]
    802e:	9a00      	ldr	r2, [sp, #0]
    8030:	b292      	uxth	r2, r2
    8032:	4619      	mov	r1, r3
    8034:	f7fe fd22 	bl	6a7c <Ftm_Gpt_Ip_StartCounting>
                                         pHwChannelConfig->channel,
                                         (uint16)uValue);
                returnValue = (Std_ReturnType)E_OK;
    8038:	2300      	movs	r3, #0
    803a:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        break;
    803e:	e000      	b.n	8042 <Gpt_Ipw_StartTimer+0x32>
            }
            break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour */
        break;
    8040:	bf00      	nop
    }

    return returnValue;
    8042:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8046:	4618      	mov	r0, r3
    8048:	b005      	add	sp, #20
    804a:	f85d fb04 	ldr.w	pc, [sp], #4

0000804e <Gpt_Ipw_GetTimeElapsed>:
* @pre           The driver needs to be initialized.Call GetTimeElapsed before.
*
*/
Gpt_ValueType Gpt_Ipw_GetTimeElapsed(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig,
                                                      Gpt_HwChannelInfoType * pReturnHwChannelInfo)
{
    804e:	b500      	push	{lr}
    8050:	b085      	sub	sp, #20
    8052:	9001      	str	r0, [sp, #4]
    8054:	9100      	str	r1, [sp, #0]
    uint32 returnValue;

    switch(pHwChannelConfig->instanceType)
    8056:	9b01      	ldr	r3, [sp, #4]
    8058:	681b      	ldr	r3, [r3, #0]
    805a:	2b00      	cmp	r3, #0
    805c:	d105      	bne.n	806a <Gpt_Ipw_GetTimeElapsed+0x1c>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {
            returnValue = Gpt_Ipw_FtmGetTimeElapsed(pHwChannelConfig, pReturnHwChannelInfo);
    805e:	9900      	ldr	r1, [sp, #0]
    8060:	9801      	ldr	r0, [sp, #4]
    8062:	f7f8 fc99 	bl	998 <Gpt_Ipw_FtmGetTimeElapsed>
    8066:	9003      	str	r0, [sp, #12]
        }
        break;
    8068:	e002      	b.n	8070 <Gpt_Ipw_GetTimeElapsed+0x22>
        break;
#endif

        default:
             /* This switch branch is empty because it shall not be executed for normal behaviour */
             returnValue = 0U;
    806a:	2300      	movs	r3, #0
    806c:	9303      	str	r3, [sp, #12]
        break;
    806e:	bf00      	nop
    }
    return (Gpt_ValueType)returnValue;
    8070:	9b03      	ldr	r3, [sp, #12]
}
    8072:	4618      	mov	r0, r3
    8074:	b005      	add	sp, #20
    8076:	f85d fb04 	ldr.w	pc, [sp], #4

0000807a <Gpt_Ipw_StopTimer>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized.Call StopTimer before.
*/
void Gpt_Ipw_StopTimer(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    807a:	b500      	push	{lr}
    807c:	b083      	sub	sp, #12
    807e:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    8080:	9b01      	ldr	r3, [sp, #4]
    8082:	681b      	ldr	r3, [r3, #0]
    8084:	2b00      	cmp	r3, #0
    8086:	d108      	bne.n	809a <Gpt_Ipw_StopTimer+0x20>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {

            Ftm_Gpt_Ip_DisableChannelInterrupt(pHwChannelConfig->instance,
    8088:	9b01      	ldr	r3, [sp, #4]
    808a:	791a      	ldrb	r2, [r3, #4]
    808c:	9b01      	ldr	r3, [sp, #4]
    808e:	795b      	ldrb	r3, [r3, #5]
    8090:	4619      	mov	r1, r3
    8092:	4610      	mov	r0, r2
    8094:	f7fe fd9c 	bl	6bd0 <Ftm_Gpt_Ip_DisableChannelInterrupt>
                                               pHwChannelConfig->channel);
        }
        break;
    8098:	e000      	b.n	809c <Gpt_Ipw_StopTimer+0x22>
        }
            break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    809a:	bf00      	nop
    }

    return;
    809c:	bf00      	nop
}
    809e:	b003      	add	sp, #12
    80a0:	f85d fb04 	ldr.w	pc, [sp], #4

000080a4 <Gpt_Ipw_EnableInterrupt>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized.
*/
void Gpt_Ipw_EnableInterrupt(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    80a4:	b082      	sub	sp, #8
    80a6:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    80a8:	9b01      	ldr	r3, [sp, #4]
    80aa:	681b      	ldr	r3, [r3, #0]
    80ac:	2b00      	cmp	r3, #0
        }
        break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    80ae:	bf00      	nop
    }

    return;
    80b0:	bf00      	nop
}
    80b2:	b002      	add	sp, #8
    80b4:	4770      	bx	lr

000080b6 <Gpt_Ipw_DeInit>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized. On/Off by the configuration parameter: GPT_DEINIT_API
*/
void Gpt_Ipw_DeInit(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    80b6:	b500      	push	{lr}
    80b8:	b083      	sub	sp, #12
    80ba:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    80bc:	9b01      	ldr	r3, [sp, #4]
    80be:	681b      	ldr	r3, [r3, #0]
    80c0:	2b00      	cmp	r3, #0
    80c2:	d105      	bne.n	80d0 <Gpt_Ipw_DeInit+0x1a>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case(GPT_FTM_MODULE):
        {
           Ftm_Gpt_Ip_Deinit(pHwChannelConfig->instance);
    80c4:	9b01      	ldr	r3, [sp, #4]
    80c6:	791b      	ldrb	r3, [r3, #4]
    80c8:	4618      	mov	r0, r3
    80ca:	f7fe fc8b 	bl	69e4 <Ftm_Gpt_Ip_Deinit>
        }
        break;
    80ce:	e000      	b.n	80d2 <Gpt_Ipw_DeInit+0x1c>
        }
        break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    80d0:	bf00      	nop
    }
    return;
    80d2:	bf00      	nop
}
    80d4:	b003      	add	sp, #12
    80d6:	f85d fb04 	ldr.w	pc, [sp], #4

000080da <Gpt_Ipw_DisableInterrupt>:
* @param[in]     pHwChannelConfig    Pointer to the channel configuration structure dependent by platform
* @return        void
* @pre           The driver needs to be initialized.On/Off by the configuration parameter: GPT_ENABLE_DISABLE_NOTIFICATION_API
*/
void Gpt_Ipw_DisableInterrupt(const Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
    80da:	b082      	sub	sp, #8
    80dc:	9001      	str	r0, [sp, #4]
    switch(pHwChannelConfig->instanceType)
    80de:	9b01      	ldr	r3, [sp, #4]
    80e0:	681b      	ldr	r3, [r3, #0]
    80e2:	2b00      	cmp	r3, #0
        }
        break;
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    80e4:	bf00      	nop
    }

    return;
    80e6:	bf00      	nop
}
    80e8:	b002      	add	sp, #8
    80ea:	4770      	bx	lr

000080ec <Gpt_Ipw_StartPredefTimer>:

void Gpt_Ipw_StartPredefTimer
(
    const Gpt_ConfigType * configPtr
)
{
    80ec:	b510      	push	{r4, lr}
    80ee:	b086      	sub	sp, #24
    80f0:	9003      	str	r0, [sp, #12]
    Gpt_ChannelType channel;
    const Gpt_HwPredefChannelConfigType * pHwChannelConfig;

    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    80f2:	2300      	movs	r3, #0
    80f4:	f88d 3017 	strb.w	r3, [sp, #23]
    80f8:	e025      	b.n	8146 <Gpt_Ipw_StartPredefTimer+0x5a>
    {
        pHwChannelConfig = (configPtr->Gpt_pChannelPredefConfigType)[channel];
    80fa:	9b03      	ldr	r3, [sp, #12]
    80fc:	691a      	ldr	r2, [r3, #16]
    80fe:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8102:	009b      	lsls	r3, r3, #2
    8104:	4413      	add	r3, r2
    8106:	681b      	ldr	r3, [r3, #0]
    8108:	9304      	str	r3, [sp, #16]

        if(NULL_PTR != pHwChannelConfig)
    810a:	9b04      	ldr	r3, [sp, #16]
    810c:	2b00      	cmp	r3, #0
    810e:	d012      	beq.n	8136 <Gpt_Ipw_StartPredefTimer+0x4a>
        {
            switch(pHwChannelConfig->instanceType)
    8110:	9b04      	ldr	r3, [sp, #16]
    8112:	681b      	ldr	r3, [r3, #0]
    8114:	2b00      	cmp	r3, #0
    8116:	d110      	bne.n	813a <Gpt_Ipw_StartPredefTimer+0x4e>
            {
#if (FTM_GPT_IP_USED == STD_ON)
            case GPT_FTM_MODULE:
            {
                Ftm_Gpt_Ip_StartPredefTimer(pHwChannelConfig->instance, \
    8118:	9b04      	ldr	r3, [sp, #16]
    811a:	7918      	ldrb	r0, [r3, #4]
    811c:	9b04      	ldr	r3, [sp, #16]
    811e:	7959      	ldrb	r1, [r3, #5]
    8120:	9b04      	ldr	r3, [sp, #16]
    8122:	7a1a      	ldrb	r2, [r3, #8]
    8124:	9b04      	ldr	r3, [sp, #16]
    8126:	799c      	ldrb	r4, [r3, #6]
    8128:	9b04      	ldr	r3, [sp, #16]
    812a:	79db      	ldrb	r3, [r3, #7]
    812c:	9300      	str	r3, [sp, #0]
    812e:	4623      	mov	r3, r4
    8130:	f7fe fd86 	bl	6c40 <Ftm_Gpt_Ip_StartPredefTimer>
                                            pHwChannelConfig->channel, \
                                            pHwChannelConfig->Gpt_uPrescaler, \
                                            pHwChannelConfig->Gpt_uClockSource, \
                                            pHwChannelConfig->Gpt_bFreezeEnable);
            }
            break;
    8134:	e002      	b.n	813c <Gpt_Ipw_StartPredefTimer+0x50>
#endif
            default:
                /*This switch branch is empty because it shall not be executed for normal behaviour*/
            break;
            }
        }
    8136:	bf00      	nop
    8138:	e000      	b.n	813c <Gpt_Ipw_StartPredefTimer+0x50>
            break;
    813a:	bf00      	nop
    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    813c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8140:	3301      	adds	r3, #1
    8142:	f88d 3017 	strb.w	r3, [sp, #23]
    8146:	f89d 3017 	ldrb.w	r3, [sp, #23]
    814a:	2b03      	cmp	r3, #3
    814c:	d9d5      	bls.n	80fa <Gpt_Ipw_StartPredefTimer+0xe>
    }

    return;
    814e:	bf00      	nop
}
    8150:	b006      	add	sp, #24
    8152:	bd10      	pop	{r4, pc}

00008154 <Gpt_Ipw_GetPredefTimerValue>:
(
    const Gpt_HwPredefChannelConfigType * pHwChannelConfig,
    Gpt_PredefTimerType PredefTimer,
    uint32 * TimeValuePtr
)
{
    8154:	b500      	push	{lr}
    8156:	b087      	sub	sp, #28
    8158:	9003      	str	r0, [sp, #12]
    815a:	9102      	str	r1, [sp, #8]
    815c:	9201      	str	r2, [sp, #4]
    uint32 u32ReturnValue = 0U;
    815e:	2300      	movs	r3, #0
    8160:	9305      	str	r3, [sp, #20]
    switch(pHwChannelConfig->instanceType)
    8162:	9b03      	ldr	r3, [sp, #12]
    8164:	681b      	ldr	r3, [r3, #0]
    8166:	2b00      	cmp	r3, #0
    8168:	d106      	bne.n	8178 <Gpt_Ipw_GetPredefTimerValue+0x24>
    {
#if (FTM_GPT_IP_USED == STD_ON)
        case GPT_FTM_MODULE:
        {
            u32ReturnValue = Ftm_Gpt_Ip_GetCntValue(pHwChannelConfig->instance);
    816a:	9b03      	ldr	r3, [sp, #12]
    816c:	791b      	ldrb	r3, [r3, #4]
    816e:	4618      	mov	r0, r3
    8170:	f7ff feda 	bl	7f28 <Ftm_Gpt_Ip_GetCntValue>
    8174:	9005      	str	r0, [sp, #20]
        }
        break;
    8176:	e000      	b.n	817a <Gpt_Ipw_GetPredefTimerValue+0x26>
#endif
        default:
            /*This switch branch is empty because it shall not be executed for normal behaviour*/
        break;
    8178:	bf00      	nop
    }
    if(0U != u32ReturnValue)
    817a:	9b05      	ldr	r3, [sp, #20]
    817c:	2b00      	cmp	r3, #0
    817e:	d020      	beq.n	81c2 <Gpt_Ipw_GetPredefTimerValue+0x6e>
    8180:	9b02      	ldr	r3, [sp, #8]
    8182:	2b03      	cmp	r3, #3
    8184:	d81f      	bhi.n	81c6 <Gpt_Ipw_GetPredefTimerValue+0x72>
    8186:	a201      	add	r2, pc, #4	; (adr r2, 818c <Gpt_Ipw_GetPredefTimerValue+0x38>)
    8188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    818c:	0000819d 	.word	0x0000819d
    8190:	000081a7 	.word	0x000081a7
    8194:	000081b3 	.word	0x000081b3
    8198:	000081bb 	.word	0x000081bb
    {
        switch(PredefTimer)
        {
            case GPT_PREDEF_TIMER_1US_16BIT:
                *TimeValuePtr = (0x0000FFFFU & u32ReturnValue);
    819c:	9b05      	ldr	r3, [sp, #20]
    819e:	b29a      	uxth	r2, r3
    81a0:	9b01      	ldr	r3, [sp, #4]
    81a2:	601a      	str	r2, [r3, #0]
            break;
    81a4:	e010      	b.n	81c8 <Gpt_Ipw_GetPredefTimerValue+0x74>
            case GPT_PREDEF_TIMER_1US_24BIT:
                *TimeValuePtr = (0x00FFFFFFU & u32ReturnValue);
    81a6:	9b05      	ldr	r3, [sp, #20]
    81a8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    81ac:	9b01      	ldr	r3, [sp, #4]
    81ae:	601a      	str	r2, [r3, #0]
            break;
    81b0:	e00a      	b.n	81c8 <Gpt_Ipw_GetPredefTimerValue+0x74>
            case GPT_PREDEF_TIMER_1US_32BIT:
                *TimeValuePtr = u32ReturnValue;
    81b2:	9b01      	ldr	r3, [sp, #4]
    81b4:	9a05      	ldr	r2, [sp, #20]
    81b6:	601a      	str	r2, [r3, #0]
            break;
    81b8:	e006      	b.n	81c8 <Gpt_Ipw_GetPredefTimerValue+0x74>
            case GPT_PREDEF_TIMER_100US_32BIT:
                *TimeValuePtr = u32ReturnValue;
    81ba:	9b01      	ldr	r3, [sp, #4]
    81bc:	9a05      	ldr	r2, [sp, #20]
    81be:	601a      	str	r2, [r3, #0]
            break;
    81c0:	e002      	b.n	81c8 <Gpt_Ipw_GetPredefTimerValue+0x74>
            default:
                /* 32bit timer */
            break;
        }
    }
    81c2:	bf00      	nop
    81c4:	e000      	b.n	81c8 <Gpt_Ipw_GetPredefTimerValue+0x74>
            break;
    81c6:	bf00      	nop
    return;
    81c8:	bf00      	nop
}
    81ca:	b007      	add	sp, #28
    81cc:	f85d fb04 	ldr.w	pc, [sp], #4

000081d0 <Gpt_Ipw_StopPredefTimer>:
*/
void Gpt_Ipw_StopPredefTimer
(
    const Gpt_ConfigType * configPtr
)
{
    81d0:	b500      	push	{lr}
    81d2:	b085      	sub	sp, #20
    81d4:	9001      	str	r0, [sp, #4]
    Gpt_ChannelType channel;
    const Gpt_HwPredefChannelConfigType * pHwChannelConfig;

    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    81d6:	2300      	movs	r3, #0
    81d8:	f88d 300f 	strb.w	r3, [sp, #15]
    81dc:	e01f      	b.n	821e <Gpt_Ipw_StopPredefTimer+0x4e>
    {

        pHwChannelConfig = (configPtr->Gpt_pChannelPredefConfigType)[channel];
    81de:	9b01      	ldr	r3, [sp, #4]
    81e0:	691a      	ldr	r2, [r3, #16]
    81e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    81e6:	009b      	lsls	r3, r3, #2
    81e8:	4413      	add	r3, r2
    81ea:	681b      	ldr	r3, [r3, #0]
    81ec:	9302      	str	r3, [sp, #8]
        if(NULL_PTR != pHwChannelConfig)
    81ee:	9b02      	ldr	r3, [sp, #8]
    81f0:	2b00      	cmp	r3, #0
    81f2:	d00c      	beq.n	820e <Gpt_Ipw_StopPredefTimer+0x3e>
        {
            switch(pHwChannelConfig->instanceType)
    81f4:	9b02      	ldr	r3, [sp, #8]
    81f6:	681b      	ldr	r3, [r3, #0]
    81f8:	2b00      	cmp	r3, #0
    81fa:	d10a      	bne.n	8212 <Gpt_Ipw_StopPredefTimer+0x42>
            {
#if (FTM_GPT_IP_USED == STD_ON)
            case GPT_FTM_MODULE:
            {
                Ftm_Gpt_Ip_StopPredefTimer(pHwChannelConfig->instance, \
    81fc:	9b02      	ldr	r3, [sp, #8]
    81fe:	791a      	ldrb	r2, [r3, #4]
    8200:	9b02      	ldr	r3, [sp, #8]
    8202:	795b      	ldrb	r3, [r3, #5]
    8204:	4619      	mov	r1, r3
    8206:	4610      	mov	r0, r2
    8208:	f7fe fdac 	bl	6d64 <Ftm_Gpt_Ip_StopPredefTimer>
                                           pHwChannelConfig->channel);
            }
            break;
    820c:	e002      	b.n	8214 <Gpt_Ipw_StopPredefTimer+0x44>
#endif
            default:
                /*This switch branch is empty because it shall not be executed for normal behaviour*/
            break;
            }
        }
    820e:	bf00      	nop
    8210:	e000      	b.n	8214 <Gpt_Ipw_StopPredefTimer+0x44>
            break;
    8212:	bf00      	nop
    for(channel = 0U; channel < GPT_HW_PREDEFTIMER_NUM; channel++)
    8214:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8218:	3301      	adds	r3, #1
    821a:	f88d 300f 	strb.w	r3, [sp, #15]
    821e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8222:	2b03      	cmp	r3, #3
    8224:	d9db      	bls.n	81de <Gpt_Ipw_StopPredefTimer+0xe>
    }
    return;
    8226:	bf00      	nop
}
    8228:	b005      	add	sp, #20
    822a:	f85d fb04 	ldr.w	pc, [sp], #4
    822e:	bf00      	nop

00008230 <EcuM_SetWakeupEvent>:
* 
* @param[in]     events  last wakeup event
* 
*/
void EcuM_SetWakeupEvent(EcuM_WakeupSourceType events)
{
    8230:	b082      	sub	sp, #8
    8232:	9001      	str	r0, [sp, #4]
    EcuMLastWakeupEvent = events;
    8234:	4a02      	ldr	r2, [pc, #8]	; (8240 <EcuM_SetWakeupEvent+0x10>)
    8236:	9b01      	ldr	r3, [sp, #4]
    8238:	6013      	str	r3, [r2, #0]
}
    823a:	bf00      	nop
    823c:	b002      	add	sp, #8
    823e:	4770      	bx	lr
    8240:	1fff9094 	.word	0x1fff9094

00008244 <EcuM_ValidateWakeupEvent>:
* @details This is a function stub only. Functionality is void in this implementation
* 
* @param[in]     events wakeup event to validate
*/
void EcuM_ValidateWakeupEvent(EcuM_WakeupSourceType events)
{
    8244:	b082      	sub	sp, #8
    8246:	9001      	str	r0, [sp, #4]
    (void)events;
}
    8248:	bf00      	nop
    824a:	b002      	add	sp, #8
    824c:	4770      	bx	lr

0000824e <EcuM_CheckWakeup>:
* 
* @param[in]     wakeupSource  wakeup source ID
* 
*/
void EcuM_CheckWakeup(EcuM_WakeupSourceType wakeupSource)
{
    824e:	b082      	sub	sp, #8
    8250:	9001      	str	r0, [sp, #4]
#endif
#ifdef TEST_ICU
    Icu_CheckWakeup(wakeupSource);
#endif
    (void)wakeupSource;
}
    8252:	bf00      	nop
    8254:	b002      	add	sp, #8
    8256:	4770      	bx	lr

00008258 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    8258:	b500      	push	{lr}
    825a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    825c:	f7f8 fce8 	bl	c30 <Sys_GetCoreID>
    8260:	4603      	mov	r3, r0
    8262:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    8264:	4a10      	ldr	r2, [pc, #64]	; (82a8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    8266:	9b01      	ldr	r3, [sp, #4]
    8268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    826c:	2b00      	cmp	r3, #0
    826e:	d10d      	bne.n	828c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8270:	f7f8 fbf4 	bl	a5c <Dio_schm_read_msr>
    8274:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8276:	9b00      	ldr	r3, [sp, #0]
    8278:	f003 0301 	and.w	r3, r3, #1
    827c:	2b00      	cmp	r3, #0
    827e:	d100      	bne.n	8282 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8280:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    8282:	490a      	ldr	r1, [pc, #40]	; (82ac <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    8284:	9b01      	ldr	r3, [sp, #4]
    8286:	9a00      	ldr	r2, [sp, #0]
    8288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    828c:	4a06      	ldr	r2, [pc, #24]	; (82a8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    828e:	9b01      	ldr	r3, [sp, #4]
    8290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8294:	1c5a      	adds	r2, r3, #1
    8296:	4904      	ldr	r1, [pc, #16]	; (82a8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    8298:	9b01      	ldr	r3, [sp, #4]
    829a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    829e:	bf00      	nop
    82a0:	b003      	add	sp, #12
    82a2:	f85d fb04 	ldr.w	pc, [sp], #4
    82a6:	bf00      	nop
    82a8:	1fff909c 	.word	0x1fff909c
    82ac:	1fff9098 	.word	0x1fff9098

000082b0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    82b0:	b500      	push	{lr}
    82b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    82b4:	f7f8 fcbc 	bl	c30 <Sys_GetCoreID>
    82b8:	4603      	mov	r3, r0
    82ba:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    82bc:	4a0d      	ldr	r2, [pc, #52]	; (82f4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    82be:	9b01      	ldr	r3, [sp, #4]
    82c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82c4:	1e5a      	subs	r2, r3, #1
    82c6:	490b      	ldr	r1, [pc, #44]	; (82f4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    82c8:	9b01      	ldr	r3, [sp, #4]
    82ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    82ce:	4a0a      	ldr	r2, [pc, #40]	; (82f8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    82d0:	9b01      	ldr	r3, [sp, #4]
    82d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82d6:	f003 0301 	and.w	r3, r3, #1
    82da:	2b00      	cmp	r3, #0
    82dc:	d106      	bne.n	82ec <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    82de:	4a05      	ldr	r2, [pc, #20]	; (82f4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    82e0:	9b01      	ldr	r3, [sp, #4]
    82e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82e6:	2b00      	cmp	r3, #0
    82e8:	d100      	bne.n	82ec <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    82ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    82ec:	bf00      	nop
    82ee:	b003      	add	sp, #12
    82f0:	f85d fb04 	ldr.w	pc, [sp], #4
    82f4:	1fff909c 	.word	0x1fff909c
    82f8:	1fff9098 	.word	0x1fff9098

000082fc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    82fc:	b500      	push	{lr}
    82fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8300:	f7f8 fc96 	bl	c30 <Sys_GetCoreID>
    8304:	4603      	mov	r3, r0
    8306:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    8308:	4a10      	ldr	r2, [pc, #64]	; (834c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    830a:	9b01      	ldr	r3, [sp, #4]
    830c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8310:	2b00      	cmp	r3, #0
    8312:	d10d      	bne.n	8330 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8314:	f7f8 fba2 	bl	a5c <Dio_schm_read_msr>
    8318:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    831a:	9b00      	ldr	r3, [sp, #0]
    831c:	f003 0301 	and.w	r3, r3, #1
    8320:	2b00      	cmp	r3, #0
    8322:	d100      	bne.n	8326 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8324:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    8326:	490a      	ldr	r1, [pc, #40]	; (8350 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    8328:	9b01      	ldr	r3, [sp, #4]
    832a:	9a00      	ldr	r2, [sp, #0]
    832c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    8330:	4a06      	ldr	r2, [pc, #24]	; (834c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    8332:	9b01      	ldr	r3, [sp, #4]
    8334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8338:	1c5a      	adds	r2, r3, #1
    833a:	4904      	ldr	r1, [pc, #16]	; (834c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    833c:	9b01      	ldr	r3, [sp, #4]
    833e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8342:	bf00      	nop
    8344:	b003      	add	sp, #12
    8346:	f85d fb04 	ldr.w	pc, [sp], #4
    834a:	bf00      	nop
    834c:	1fff90a4 	.word	0x1fff90a4
    8350:	1fff90a0 	.word	0x1fff90a0

00008354 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    8354:	b500      	push	{lr}
    8356:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8358:	f7f8 fc6a 	bl	c30 <Sys_GetCoreID>
    835c:	4603      	mov	r3, r0
    835e:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    8360:	4a0d      	ldr	r2, [pc, #52]	; (8398 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    8362:	9b01      	ldr	r3, [sp, #4]
    8364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8368:	1e5a      	subs	r2, r3, #1
    836a:	490b      	ldr	r1, [pc, #44]	; (8398 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    836c:	9b01      	ldr	r3, [sp, #4]
    836e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    8372:	4a0a      	ldr	r2, [pc, #40]	; (839c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    8374:	9b01      	ldr	r3, [sp, #4]
    8376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    837a:	f003 0301 	and.w	r3, r3, #1
    837e:	2b00      	cmp	r3, #0
    8380:	d106      	bne.n	8390 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    8382:	4a05      	ldr	r2, [pc, #20]	; (8398 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    8384:	9b01      	ldr	r3, [sp, #4]
    8386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    838a:	2b00      	cmp	r3, #0
    838c:	d100      	bne.n	8390 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    838e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8390:	bf00      	nop
    8392:	b003      	add	sp, #12
    8394:	f85d fb04 	ldr.w	pc, [sp], #4
    8398:	1fff90a4 	.word	0x1fff90a4
    839c:	1fff90a0 	.word	0x1fff90a0

000083a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00(void)
{
    83a0:	b500      	push	{lr}
    83a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    83a4:	f7f8 fc44 	bl	c30 <Sys_GetCoreID>
    83a8:	4603      	mov	r3, r0
    83aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId])
    83ac:	4a10      	ldr	r2, [pc, #64]	; (83f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x50>)
    83ae:	9b01      	ldr	r3, [sp, #4]
    83b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83b4:	2b00      	cmp	r3, #0
    83b6:	d10d      	bne.n	83d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    83b8:	f7f8 fb59 	bl	a6e <Gpt_schm_read_msr>
    83bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    83be:	9b00      	ldr	r3, [sp, #0]
    83c0:	f003 0301 	and.w	r3, r3, #1
    83c4:	2b00      	cmp	r3, #0
    83c6:	d100      	bne.n	83ca <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    83c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    83ca:	490a      	ldr	r1, [pc, #40]	; (83f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x54>)
    83cc:	9b01      	ldr	r3, [sp, #4]
    83ce:	9a00      	ldr	r2, [sp, #0]
    83d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId]++;
    83d4:	4a06      	ldr	r2, [pc, #24]	; (83f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x50>)
    83d6:	9b01      	ldr	r3, [sp, #4]
    83d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83dc:	1c5a      	adds	r2, r3, #1
    83de:	4904      	ldr	r1, [pc, #16]	; (83f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00+0x50>)
    83e0:	9b01      	ldr	r3, [sp, #4]
    83e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    83e6:	bf00      	nop
    83e8:	b003      	add	sp, #12
    83ea:	f85d fb04 	ldr.w	pc, [sp], #4
    83ee:	bf00      	nop
    83f0:	1fff90ac 	.word	0x1fff90ac
    83f4:	1fff90a8 	.word	0x1fff90a8

000083f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00(void)
{
    83f8:	b500      	push	{lr}
    83fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    83fc:	f7f8 fc18 	bl	c30 <Sys_GetCoreID>
    8400:	4603      	mov	r3, r0
    8402:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId]--;
    8404:	4a0d      	ldr	r2, [pc, #52]	; (843c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x44>)
    8406:	9b01      	ldr	r3, [sp, #4]
    8408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    840c:	1e5a      	subs	r2, r3, #1
    840e:	490b      	ldr	r1, [pc, #44]	; (843c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x44>)
    8410:	9b01      	ldr	r3, [sp, #4]
    8412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    8416:	4a0a      	ldr	r2, [pc, #40]	; (8440 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x48>)
    8418:	9b01      	ldr	r3, [sp, #4]
    841a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    841e:	f003 0301 	and.w	r3, r3, #1
    8422:	2b00      	cmp	r3, #0
    8424:	d106      	bne.n	8434 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x3c>
    8426:	4a05      	ldr	r2, [pc, #20]	; (843c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x44>)
    8428:	9b01      	ldr	r3, [sp, #4]
    842a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    842e:	2b00      	cmp	r3, #0
    8430:	d100      	bne.n	8434 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8432:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8434:	bf00      	nop
    8436:	b003      	add	sp, #12
    8438:	f85d fb04 	ldr.w	pc, [sp], #4
    843c:	1fff90ac 	.word	0x1fff90ac
    8440:	1fff90a8 	.word	0x1fff90a8

00008444 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01(void)
{
    8444:	b500      	push	{lr}
    8446:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8448:	f7f8 fbf2 	bl	c30 <Sys_GetCoreID>
    844c:	4603      	mov	r3, r0
    844e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId])
    8450:	4a10      	ldr	r2, [pc, #64]	; (8494 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x50>)
    8452:	9b01      	ldr	r3, [sp, #4]
    8454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8458:	2b00      	cmp	r3, #0
    845a:	d10d      	bne.n	8478 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    845c:	f7f8 fb07 	bl	a6e <Gpt_schm_read_msr>
    8460:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8462:	9b00      	ldr	r3, [sp, #0]
    8464:	f003 0301 	and.w	r3, r3, #1
    8468:	2b00      	cmp	r3, #0
    846a:	d100      	bne.n	846e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    846c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    846e:	490a      	ldr	r1, [pc, #40]	; (8498 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x54>)
    8470:	9b01      	ldr	r3, [sp, #4]
    8472:	9a00      	ldr	r2, [sp, #0]
    8474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId]++;
    8478:	4a06      	ldr	r2, [pc, #24]	; (8494 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x50>)
    847a:	9b01      	ldr	r3, [sp, #4]
    847c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8480:	1c5a      	adds	r2, r3, #1
    8482:	4904      	ldr	r1, [pc, #16]	; (8494 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01+0x50>)
    8484:	9b01      	ldr	r3, [sp, #4]
    8486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    848a:	bf00      	nop
    848c:	b003      	add	sp, #12
    848e:	f85d fb04 	ldr.w	pc, [sp], #4
    8492:	bf00      	nop
    8494:	1fff90b4 	.word	0x1fff90b4
    8498:	1fff90b0 	.word	0x1fff90b0

0000849c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01(void)
{
    849c:	b500      	push	{lr}
    849e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    84a0:	f7f8 fbc6 	bl	c30 <Sys_GetCoreID>
    84a4:	4603      	mov	r3, r0
    84a6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId]--;
    84a8:	4a0d      	ldr	r2, [pc, #52]	; (84e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x44>)
    84aa:	9b01      	ldr	r3, [sp, #4]
    84ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84b0:	1e5a      	subs	r2, r3, #1
    84b2:	490b      	ldr	r1, [pc, #44]	; (84e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x44>)
    84b4:	9b01      	ldr	r3, [sp, #4]
    84b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    84ba:	4a0a      	ldr	r2, [pc, #40]	; (84e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x48>)
    84bc:	9b01      	ldr	r3, [sp, #4]
    84be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84c2:	f003 0301 	and.w	r3, r3, #1
    84c6:	2b00      	cmp	r3, #0
    84c8:	d106      	bne.n	84d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x3c>
    84ca:	4a05      	ldr	r2, [pc, #20]	; (84e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x44>)
    84cc:	9b01      	ldr	r3, [sp, #4]
    84ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84d2:	2b00      	cmp	r3, #0
    84d4:	d100      	bne.n	84d8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    84d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    84d8:	bf00      	nop
    84da:	b003      	add	sp, #12
    84dc:	f85d fb04 	ldr.w	pc, [sp], #4
    84e0:	1fff90b4 	.word	0x1fff90b4
    84e4:	1fff90b0 	.word	0x1fff90b0

000084e8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02(void)
{
    84e8:	b500      	push	{lr}
    84ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    84ec:	f7f8 fba0 	bl	c30 <Sys_GetCoreID>
    84f0:	4603      	mov	r3, r0
    84f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId])
    84f4:	4a10      	ldr	r2, [pc, #64]	; (8538 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x50>)
    84f6:	9b01      	ldr	r3, [sp, #4]
    84f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84fc:	2b00      	cmp	r3, #0
    84fe:	d10d      	bne.n	851c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8500:	f7f8 fab5 	bl	a6e <Gpt_schm_read_msr>
    8504:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8506:	9b00      	ldr	r3, [sp, #0]
    8508:	f003 0301 	and.w	r3, r3, #1
    850c:	2b00      	cmp	r3, #0
    850e:	d100      	bne.n	8512 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8510:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    8512:	490a      	ldr	r1, [pc, #40]	; (853c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x54>)
    8514:	9b01      	ldr	r3, [sp, #4]
    8516:	9a00      	ldr	r2, [sp, #0]
    8518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId]++;
    851c:	4a06      	ldr	r2, [pc, #24]	; (8538 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x50>)
    851e:	9b01      	ldr	r3, [sp, #4]
    8520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8524:	1c5a      	adds	r2, r3, #1
    8526:	4904      	ldr	r1, [pc, #16]	; (8538 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02+0x50>)
    8528:	9b01      	ldr	r3, [sp, #4]
    852a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    852e:	bf00      	nop
    8530:	b003      	add	sp, #12
    8532:	f85d fb04 	ldr.w	pc, [sp], #4
    8536:	bf00      	nop
    8538:	1fff90bc 	.word	0x1fff90bc
    853c:	1fff90b8 	.word	0x1fff90b8

00008540 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02(void)
{
    8540:	b500      	push	{lr}
    8542:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8544:	f7f8 fb74 	bl	c30 <Sys_GetCoreID>
    8548:	4603      	mov	r3, r0
    854a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId]--;
    854c:	4a0d      	ldr	r2, [pc, #52]	; (8584 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x44>)
    854e:	9b01      	ldr	r3, [sp, #4]
    8550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8554:	1e5a      	subs	r2, r3, #1
    8556:	490b      	ldr	r1, [pc, #44]	; (8584 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x44>)
    8558:	9b01      	ldr	r3, [sp, #4]
    855a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    855e:	4a0a      	ldr	r2, [pc, #40]	; (8588 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x48>)
    8560:	9b01      	ldr	r3, [sp, #4]
    8562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8566:	f003 0301 	and.w	r3, r3, #1
    856a:	2b00      	cmp	r3, #0
    856c:	d106      	bne.n	857c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x3c>
    856e:	4a05      	ldr	r2, [pc, #20]	; (8584 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x44>)
    8570:	9b01      	ldr	r3, [sp, #4]
    8572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8576:	2b00      	cmp	r3, #0
    8578:	d100      	bne.n	857c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    857a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    857c:	bf00      	nop
    857e:	b003      	add	sp, #12
    8580:	f85d fb04 	ldr.w	pc, [sp], #4
    8584:	1fff90bc 	.word	0x1fff90bc
    8588:	1fff90b8 	.word	0x1fff90b8

0000858c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03(void)
{
    858c:	b500      	push	{lr}
    858e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8590:	f7f8 fb4e 	bl	c30 <Sys_GetCoreID>
    8594:	4603      	mov	r3, r0
    8596:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId])
    8598:	4a10      	ldr	r2, [pc, #64]	; (85dc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x50>)
    859a:	9b01      	ldr	r3, [sp, #4]
    859c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85a0:	2b00      	cmp	r3, #0
    85a2:	d10d      	bne.n	85c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    85a4:	f7f8 fa63 	bl	a6e <Gpt_schm_read_msr>
    85a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    85aa:	9b00      	ldr	r3, [sp, #0]
    85ac:	f003 0301 	and.w	r3, r3, #1
    85b0:	2b00      	cmp	r3, #0
    85b2:	d100      	bne.n	85b6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    85b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    85b6:	490a      	ldr	r1, [pc, #40]	; (85e0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x54>)
    85b8:	9b01      	ldr	r3, [sp, #4]
    85ba:	9a00      	ldr	r2, [sp, #0]
    85bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId]++;
    85c0:	4a06      	ldr	r2, [pc, #24]	; (85dc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x50>)
    85c2:	9b01      	ldr	r3, [sp, #4]
    85c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85c8:	1c5a      	adds	r2, r3, #1
    85ca:	4904      	ldr	r1, [pc, #16]	; (85dc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03+0x50>)
    85cc:	9b01      	ldr	r3, [sp, #4]
    85ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    85d2:	bf00      	nop
    85d4:	b003      	add	sp, #12
    85d6:	f85d fb04 	ldr.w	pc, [sp], #4
    85da:	bf00      	nop
    85dc:	1fff90c4 	.word	0x1fff90c4
    85e0:	1fff90c0 	.word	0x1fff90c0

000085e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03(void)
{
    85e4:	b500      	push	{lr}
    85e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    85e8:	f7f8 fb22 	bl	c30 <Sys_GetCoreID>
    85ec:	4603      	mov	r3, r0
    85ee:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId]--;
    85f0:	4a0d      	ldr	r2, [pc, #52]	; (8628 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x44>)
    85f2:	9b01      	ldr	r3, [sp, #4]
    85f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85f8:	1e5a      	subs	r2, r3, #1
    85fa:	490b      	ldr	r1, [pc, #44]	; (8628 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x44>)
    85fc:	9b01      	ldr	r3, [sp, #4]
    85fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    8602:	4a0a      	ldr	r2, [pc, #40]	; (862c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x48>)
    8604:	9b01      	ldr	r3, [sp, #4]
    8606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    860a:	f003 0301 	and.w	r3, r3, #1
    860e:	2b00      	cmp	r3, #0
    8610:	d106      	bne.n	8620 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x3c>
    8612:	4a05      	ldr	r2, [pc, #20]	; (8628 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x44>)
    8614:	9b01      	ldr	r3, [sp, #4]
    8616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    861a:	2b00      	cmp	r3, #0
    861c:	d100      	bne.n	8620 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    861e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8620:	bf00      	nop
    8622:	b003      	add	sp, #12
    8624:	f85d fb04 	ldr.w	pc, [sp], #4
    8628:	1fff90c4 	.word	0x1fff90c4
    862c:	1fff90c0 	.word	0x1fff90c0

00008630 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04(void)
{
    8630:	b500      	push	{lr}
    8632:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8634:	f7f8 fafc 	bl	c30 <Sys_GetCoreID>
    8638:	4603      	mov	r3, r0
    863a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId])
    863c:	4a10      	ldr	r2, [pc, #64]	; (8680 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x50>)
    863e:	9b01      	ldr	r3, [sp, #4]
    8640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8644:	2b00      	cmp	r3, #0
    8646:	d10d      	bne.n	8664 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8648:	f7f8 fa11 	bl	a6e <Gpt_schm_read_msr>
    864c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    864e:	9b00      	ldr	r3, [sp, #0]
    8650:	f003 0301 	and.w	r3, r3, #1
    8654:	2b00      	cmp	r3, #0
    8656:	d100      	bne.n	865a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8658:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    865a:	490a      	ldr	r1, [pc, #40]	; (8684 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x54>)
    865c:	9b01      	ldr	r3, [sp, #4]
    865e:	9a00      	ldr	r2, [sp, #0]
    8660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId]++;
    8664:	4a06      	ldr	r2, [pc, #24]	; (8680 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x50>)
    8666:	9b01      	ldr	r3, [sp, #4]
    8668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    866c:	1c5a      	adds	r2, r3, #1
    866e:	4904      	ldr	r1, [pc, #16]	; (8680 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_04+0x50>)
    8670:	9b01      	ldr	r3, [sp, #4]
    8672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8676:	bf00      	nop
    8678:	b003      	add	sp, #12
    867a:	f85d fb04 	ldr.w	pc, [sp], #4
    867e:	bf00      	nop
    8680:	1fff90cc 	.word	0x1fff90cc
    8684:	1fff90c8 	.word	0x1fff90c8

00008688 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04(void)
{
    8688:	b500      	push	{lr}
    868a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    868c:	f7f8 fad0 	bl	c30 <Sys_GetCoreID>
    8690:	4603      	mov	r3, r0
    8692:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId]--;
    8694:	4a0d      	ldr	r2, [pc, #52]	; (86cc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x44>)
    8696:	9b01      	ldr	r3, [sp, #4]
    8698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    869c:	1e5a      	subs	r2, r3, #1
    869e:	490b      	ldr	r1, [pc, #44]	; (86cc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x44>)
    86a0:	9b01      	ldr	r3, [sp, #4]
    86a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    86a6:	4a0a      	ldr	r2, [pc, #40]	; (86d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x48>)
    86a8:	9b01      	ldr	r3, [sp, #4]
    86aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86ae:	f003 0301 	and.w	r3, r3, #1
    86b2:	2b00      	cmp	r3, #0
    86b4:	d106      	bne.n	86c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x3c>
    86b6:	4a05      	ldr	r2, [pc, #20]	; (86cc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x44>)
    86b8:	9b01      	ldr	r3, [sp, #4]
    86ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86be:	2b00      	cmp	r3, #0
    86c0:	d100      	bne.n	86c4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    86c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    86c4:	bf00      	nop
    86c6:	b003      	add	sp, #12
    86c8:	f85d fb04 	ldr.w	pc, [sp], #4
    86cc:	1fff90cc 	.word	0x1fff90cc
    86d0:	1fff90c8 	.word	0x1fff90c8

000086d4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05(void)
{
    86d4:	b500      	push	{lr}
    86d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    86d8:	f7f8 faaa 	bl	c30 <Sys_GetCoreID>
    86dc:	4603      	mov	r3, r0
    86de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId])
    86e0:	4a10      	ldr	r2, [pc, #64]	; (8724 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x50>)
    86e2:	9b01      	ldr	r3, [sp, #4]
    86e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86e8:	2b00      	cmp	r3, #0
    86ea:	d10d      	bne.n	8708 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    86ec:	f7f8 f9bf 	bl	a6e <Gpt_schm_read_msr>
    86f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    86f2:	9b00      	ldr	r3, [sp, #0]
    86f4:	f003 0301 	and.w	r3, r3, #1
    86f8:	2b00      	cmp	r3, #0
    86fa:	d100      	bne.n	86fe <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    86fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    86fe:	490a      	ldr	r1, [pc, #40]	; (8728 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x54>)
    8700:	9b01      	ldr	r3, [sp, #4]
    8702:	9a00      	ldr	r2, [sp, #0]
    8704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId]++;
    8708:	4a06      	ldr	r2, [pc, #24]	; (8724 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x50>)
    870a:	9b01      	ldr	r3, [sp, #4]
    870c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8710:	1c5a      	adds	r2, r3, #1
    8712:	4904      	ldr	r1, [pc, #16]	; (8724 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_05+0x50>)
    8714:	9b01      	ldr	r3, [sp, #4]
    8716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    871a:	bf00      	nop
    871c:	b003      	add	sp, #12
    871e:	f85d fb04 	ldr.w	pc, [sp], #4
    8722:	bf00      	nop
    8724:	1fff90d4 	.word	0x1fff90d4
    8728:	1fff90d0 	.word	0x1fff90d0

0000872c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05(void)
{
    872c:	b500      	push	{lr}
    872e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8730:	f7f8 fa7e 	bl	c30 <Sys_GetCoreID>
    8734:	4603      	mov	r3, r0
    8736:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId]--;
    8738:	4a0d      	ldr	r2, [pc, #52]	; (8770 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x44>)
    873a:	9b01      	ldr	r3, [sp, #4]
    873c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8740:	1e5a      	subs	r2, r3, #1
    8742:	490b      	ldr	r1, [pc, #44]	; (8770 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x44>)
    8744:	9b01      	ldr	r3, [sp, #4]
    8746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    874a:	4a0a      	ldr	r2, [pc, #40]	; (8774 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x48>)
    874c:	9b01      	ldr	r3, [sp, #4]
    874e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8752:	f003 0301 	and.w	r3, r3, #1
    8756:	2b00      	cmp	r3, #0
    8758:	d106      	bne.n	8768 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x3c>
    875a:	4a05      	ldr	r2, [pc, #20]	; (8770 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x44>)
    875c:	9b01      	ldr	r3, [sp, #4]
    875e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8762:	2b00      	cmp	r3, #0
    8764:	d100      	bne.n	8768 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8766:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8768:	bf00      	nop
    876a:	b003      	add	sp, #12
    876c:	f85d fb04 	ldr.w	pc, [sp], #4
    8770:	1fff90d4 	.word	0x1fff90d4
    8774:	1fff90d0 	.word	0x1fff90d0

00008778 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06(void)
{
    8778:	b500      	push	{lr}
    877a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    877c:	f7f8 fa58 	bl	c30 <Sys_GetCoreID>
    8780:	4603      	mov	r3, r0
    8782:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId])
    8784:	4a10      	ldr	r2, [pc, #64]	; (87c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x50>)
    8786:	9b01      	ldr	r3, [sp, #4]
    8788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    878c:	2b00      	cmp	r3, #0
    878e:	d10d      	bne.n	87ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8790:	f7f8 f96d 	bl	a6e <Gpt_schm_read_msr>
    8794:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8796:	9b00      	ldr	r3, [sp, #0]
    8798:	f003 0301 	and.w	r3, r3, #1
    879c:	2b00      	cmp	r3, #0
    879e:	d100      	bne.n	87a2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    87a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    87a2:	490a      	ldr	r1, [pc, #40]	; (87cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x54>)
    87a4:	9b01      	ldr	r3, [sp, #4]
    87a6:	9a00      	ldr	r2, [sp, #0]
    87a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId]++;
    87ac:	4a06      	ldr	r2, [pc, #24]	; (87c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x50>)
    87ae:	9b01      	ldr	r3, [sp, #4]
    87b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87b4:	1c5a      	adds	r2, r3, #1
    87b6:	4904      	ldr	r1, [pc, #16]	; (87c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_06+0x50>)
    87b8:	9b01      	ldr	r3, [sp, #4]
    87ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    87be:	bf00      	nop
    87c0:	b003      	add	sp, #12
    87c2:	f85d fb04 	ldr.w	pc, [sp], #4
    87c6:	bf00      	nop
    87c8:	1fff90dc 	.word	0x1fff90dc
    87cc:	1fff90d8 	.word	0x1fff90d8

000087d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06(void)
{
    87d0:	b500      	push	{lr}
    87d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    87d4:	f7f8 fa2c 	bl	c30 <Sys_GetCoreID>
    87d8:	4603      	mov	r3, r0
    87da:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId]--;
    87dc:	4a0d      	ldr	r2, [pc, #52]	; (8814 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x44>)
    87de:	9b01      	ldr	r3, [sp, #4]
    87e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87e4:	1e5a      	subs	r2, r3, #1
    87e6:	490b      	ldr	r1, [pc, #44]	; (8814 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x44>)
    87e8:	9b01      	ldr	r3, [sp, #4]
    87ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    87ee:	4a0a      	ldr	r2, [pc, #40]	; (8818 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x48>)
    87f0:	9b01      	ldr	r3, [sp, #4]
    87f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87f6:	f003 0301 	and.w	r3, r3, #1
    87fa:	2b00      	cmp	r3, #0
    87fc:	d106      	bne.n	880c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x3c>
    87fe:	4a05      	ldr	r2, [pc, #20]	; (8814 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x44>)
    8800:	9b01      	ldr	r3, [sp, #4]
    8802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8806:	2b00      	cmp	r3, #0
    8808:	d100      	bne.n	880c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    880a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    880c:	bf00      	nop
    880e:	b003      	add	sp, #12
    8810:	f85d fb04 	ldr.w	pc, [sp], #4
    8814:	1fff90dc 	.word	0x1fff90dc
    8818:	1fff90d8 	.word	0x1fff90d8

0000881c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07(void)
{
    881c:	b500      	push	{lr}
    881e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8820:	f7f8 fa06 	bl	c30 <Sys_GetCoreID>
    8824:	4603      	mov	r3, r0
    8826:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId])
    8828:	4a10      	ldr	r2, [pc, #64]	; (886c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x50>)
    882a:	9b01      	ldr	r3, [sp, #4]
    882c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8830:	2b00      	cmp	r3, #0
    8832:	d10d      	bne.n	8850 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8834:	f7f8 f91b 	bl	a6e <Gpt_schm_read_msr>
    8838:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    883a:	9b00      	ldr	r3, [sp, #0]
    883c:	f003 0301 	and.w	r3, r3, #1
    8840:	2b00      	cmp	r3, #0
    8842:	d100      	bne.n	8846 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8844:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    8846:	490a      	ldr	r1, [pc, #40]	; (8870 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x54>)
    8848:	9b01      	ldr	r3, [sp, #4]
    884a:	9a00      	ldr	r2, [sp, #0]
    884c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId]++;
    8850:	4a06      	ldr	r2, [pc, #24]	; (886c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x50>)
    8852:	9b01      	ldr	r3, [sp, #4]
    8854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8858:	1c5a      	adds	r2, r3, #1
    885a:	4904      	ldr	r1, [pc, #16]	; (886c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_07+0x50>)
    885c:	9b01      	ldr	r3, [sp, #4]
    885e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8862:	bf00      	nop
    8864:	b003      	add	sp, #12
    8866:	f85d fb04 	ldr.w	pc, [sp], #4
    886a:	bf00      	nop
    886c:	1fff90e4 	.word	0x1fff90e4
    8870:	1fff90e0 	.word	0x1fff90e0

00008874 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07(void)
{
    8874:	b500      	push	{lr}
    8876:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8878:	f7f8 f9da 	bl	c30 <Sys_GetCoreID>
    887c:	4603      	mov	r3, r0
    887e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId]--;
    8880:	4a0d      	ldr	r2, [pc, #52]	; (88b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x44>)
    8882:	9b01      	ldr	r3, [sp, #4]
    8884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8888:	1e5a      	subs	r2, r3, #1
    888a:	490b      	ldr	r1, [pc, #44]	; (88b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x44>)
    888c:	9b01      	ldr	r3, [sp, #4]
    888e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    8892:	4a0a      	ldr	r2, [pc, #40]	; (88bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x48>)
    8894:	9b01      	ldr	r3, [sp, #4]
    8896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    889a:	f003 0301 	and.w	r3, r3, #1
    889e:	2b00      	cmp	r3, #0
    88a0:	d106      	bne.n	88b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x3c>
    88a2:	4a05      	ldr	r2, [pc, #20]	; (88b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x44>)
    88a4:	9b01      	ldr	r3, [sp, #4]
    88a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88aa:	2b00      	cmp	r3, #0
    88ac:	d100      	bne.n	88b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    88ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    88b0:	bf00      	nop
    88b2:	b003      	add	sp, #12
    88b4:	f85d fb04 	ldr.w	pc, [sp], #4
    88b8:	1fff90e4 	.word	0x1fff90e4
    88bc:	1fff90e0 	.word	0x1fff90e0

000088c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10(void)
{
    88c0:	b500      	push	{lr}
    88c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    88c4:	f7f8 f9b4 	bl	c30 <Sys_GetCoreID>
    88c8:	4603      	mov	r3, r0
    88ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId])
    88cc:	4a10      	ldr	r2, [pc, #64]	; (8910 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x50>)
    88ce:	9b01      	ldr	r3, [sp, #4]
    88d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88d4:	2b00      	cmp	r3, #0
    88d6:	d10d      	bne.n	88f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    88d8:	f7f8 f8c9 	bl	a6e <Gpt_schm_read_msr>
    88dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    88de:	9b00      	ldr	r3, [sp, #0]
    88e0:	f003 0301 	and.w	r3, r3, #1
    88e4:	2b00      	cmp	r3, #0
    88e6:	d100      	bne.n	88ea <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    88e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    88ea:	490a      	ldr	r1, [pc, #40]	; (8914 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x54>)
    88ec:	9b01      	ldr	r3, [sp, #4]
    88ee:	9a00      	ldr	r2, [sp, #0]
    88f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId]++;
    88f4:	4a06      	ldr	r2, [pc, #24]	; (8910 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x50>)
    88f6:	9b01      	ldr	r3, [sp, #4]
    88f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88fc:	1c5a      	adds	r2, r3, #1
    88fe:	4904      	ldr	r1, [pc, #16]	; (8910 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_10+0x50>)
    8900:	9b01      	ldr	r3, [sp, #4]
    8902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8906:	bf00      	nop
    8908:	b003      	add	sp, #12
    890a:	f85d fb04 	ldr.w	pc, [sp], #4
    890e:	bf00      	nop
    8910:	1fff90ec 	.word	0x1fff90ec
    8914:	1fff90e8 	.word	0x1fff90e8

00008918 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10(void)
{
    8918:	b500      	push	{lr}
    891a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    891c:	f7f8 f988 	bl	c30 <Sys_GetCoreID>
    8920:	4603      	mov	r3, r0
    8922:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId]--;
    8924:	4a0d      	ldr	r2, [pc, #52]	; (895c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x44>)
    8926:	9b01      	ldr	r3, [sp, #4]
    8928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    892c:	1e5a      	subs	r2, r3, #1
    892e:	490b      	ldr	r1, [pc, #44]	; (895c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x44>)
    8930:	9b01      	ldr	r3, [sp, #4]
    8932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    8936:	4a0a      	ldr	r2, [pc, #40]	; (8960 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x48>)
    8938:	9b01      	ldr	r3, [sp, #4]
    893a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    893e:	f003 0301 	and.w	r3, r3, #1
    8942:	2b00      	cmp	r3, #0
    8944:	d106      	bne.n	8954 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x3c>
    8946:	4a05      	ldr	r2, [pc, #20]	; (895c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x44>)
    8948:	9b01      	ldr	r3, [sp, #4]
    894a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    894e:	2b00      	cmp	r3, #0
    8950:	d100      	bne.n	8954 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8952:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8954:	bf00      	nop
    8956:	b003      	add	sp, #12
    8958:	f85d fb04 	ldr.w	pc, [sp], #4
    895c:	1fff90ec 	.word	0x1fff90ec
    8960:	1fff90e8 	.word	0x1fff90e8

00008964 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11(void)
{
    8964:	b500      	push	{lr}
    8966:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8968:	f7f8 f962 	bl	c30 <Sys_GetCoreID>
    896c:	4603      	mov	r3, r0
    896e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId])
    8970:	4a10      	ldr	r2, [pc, #64]	; (89b4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x50>)
    8972:	9b01      	ldr	r3, [sp, #4]
    8974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8978:	2b00      	cmp	r3, #0
    897a:	d10d      	bne.n	8998 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    897c:	f7f8 f877 	bl	a6e <Gpt_schm_read_msr>
    8980:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8982:	9b00      	ldr	r3, [sp, #0]
    8984:	f003 0301 	and.w	r3, r3, #1
    8988:	2b00      	cmp	r3, #0
    898a:	d100      	bne.n	898e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    898c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    898e:	490a      	ldr	r1, [pc, #40]	; (89b8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x54>)
    8990:	9b01      	ldr	r3, [sp, #4]
    8992:	9a00      	ldr	r2, [sp, #0]
    8994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId]++;
    8998:	4a06      	ldr	r2, [pc, #24]	; (89b4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x50>)
    899a:	9b01      	ldr	r3, [sp, #4]
    899c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89a0:	1c5a      	adds	r2, r3, #1
    89a2:	4904      	ldr	r1, [pc, #16]	; (89b4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_11+0x50>)
    89a4:	9b01      	ldr	r3, [sp, #4]
    89a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    89aa:	bf00      	nop
    89ac:	b003      	add	sp, #12
    89ae:	f85d fb04 	ldr.w	pc, [sp], #4
    89b2:	bf00      	nop
    89b4:	1fff90f4 	.word	0x1fff90f4
    89b8:	1fff90f0 	.word	0x1fff90f0

000089bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11(void)
{
    89bc:	b500      	push	{lr}
    89be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    89c0:	f7f8 f936 	bl	c30 <Sys_GetCoreID>
    89c4:	4603      	mov	r3, r0
    89c6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId]--;
    89c8:	4a0d      	ldr	r2, [pc, #52]	; (8a00 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x44>)
    89ca:	9b01      	ldr	r3, [sp, #4]
    89cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89d0:	1e5a      	subs	r2, r3, #1
    89d2:	490b      	ldr	r1, [pc, #44]	; (8a00 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x44>)
    89d4:	9b01      	ldr	r3, [sp, #4]
    89d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    89da:	4a0a      	ldr	r2, [pc, #40]	; (8a04 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x48>)
    89dc:	9b01      	ldr	r3, [sp, #4]
    89de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89e2:	f003 0301 	and.w	r3, r3, #1
    89e6:	2b00      	cmp	r3, #0
    89e8:	d106      	bne.n	89f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x3c>
    89ea:	4a05      	ldr	r2, [pc, #20]	; (8a00 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x44>)
    89ec:	9b01      	ldr	r3, [sp, #4]
    89ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89f2:	2b00      	cmp	r3, #0
    89f4:	d100      	bne.n	89f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    89f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    89f8:	bf00      	nop
    89fa:	b003      	add	sp, #12
    89fc:	f85d fb04 	ldr.w	pc, [sp], #4
    8a00:	1fff90f4 	.word	0x1fff90f4
    8a04:	1fff90f0 	.word	0x1fff90f0

00008a08 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17(void)
{
    8a08:	b500      	push	{lr}
    8a0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8a0c:	f7f8 f910 	bl	c30 <Sys_GetCoreID>
    8a10:	4603      	mov	r3, r0
    8a12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId])
    8a14:	4a10      	ldr	r2, [pc, #64]	; (8a58 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x50>)
    8a16:	9b01      	ldr	r3, [sp, #4]
    8a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a1c:	2b00      	cmp	r3, #0
    8a1e:	d10d      	bne.n	8a3c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8a20:	f7f8 f825 	bl	a6e <Gpt_schm_read_msr>
    8a24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8a26:	9b00      	ldr	r3, [sp, #0]
    8a28:	f003 0301 	and.w	r3, r3, #1
    8a2c:	2b00      	cmp	r3, #0
    8a2e:	d100      	bne.n	8a32 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8a30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    8a32:	490a      	ldr	r1, [pc, #40]	; (8a5c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x54>)
    8a34:	9b01      	ldr	r3, [sp, #4]
    8a36:	9a00      	ldr	r2, [sp, #0]
    8a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId]++;
    8a3c:	4a06      	ldr	r2, [pc, #24]	; (8a58 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x50>)
    8a3e:	9b01      	ldr	r3, [sp, #4]
    8a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a44:	1c5a      	adds	r2, r3, #1
    8a46:	4904      	ldr	r1, [pc, #16]	; (8a58 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_17+0x50>)
    8a48:	9b01      	ldr	r3, [sp, #4]
    8a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8a4e:	bf00      	nop
    8a50:	b003      	add	sp, #12
    8a52:	f85d fb04 	ldr.w	pc, [sp], #4
    8a56:	bf00      	nop
    8a58:	1fff90fc 	.word	0x1fff90fc
    8a5c:	1fff90f8 	.word	0x1fff90f8

00008a60 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17(void)
{
    8a60:	b500      	push	{lr}
    8a62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8a64:	f7f8 f8e4 	bl	c30 <Sys_GetCoreID>
    8a68:	4603      	mov	r3, r0
    8a6a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId]--;
    8a6c:	4a0d      	ldr	r2, [pc, #52]	; (8aa4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x44>)
    8a6e:	9b01      	ldr	r3, [sp, #4]
    8a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a74:	1e5a      	subs	r2, r3, #1
    8a76:	490b      	ldr	r1, [pc, #44]	; (8aa4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x44>)
    8a78:	9b01      	ldr	r3, [sp, #4]
    8a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    8a7e:	4a0a      	ldr	r2, [pc, #40]	; (8aa8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x48>)
    8a80:	9b01      	ldr	r3, [sp, #4]
    8a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a86:	f003 0301 	and.w	r3, r3, #1
    8a8a:	2b00      	cmp	r3, #0
    8a8c:	d106      	bne.n	8a9c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x3c>
    8a8e:	4a05      	ldr	r2, [pc, #20]	; (8aa4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x44>)
    8a90:	9b01      	ldr	r3, [sp, #4]
    8a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a96:	2b00      	cmp	r3, #0
    8a98:	d100      	bne.n	8a9c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8a9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8a9c:	bf00      	nop
    8a9e:	b003      	add	sp, #12
    8aa0:	f85d fb04 	ldr.w	pc, [sp], #4
    8aa4:	1fff90fc 	.word	0x1fff90fc
    8aa8:	1fff90f8 	.word	0x1fff90f8

00008aac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21(void)
{
    8aac:	b500      	push	{lr}
    8aae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8ab0:	f7f8 f8be 	bl	c30 <Sys_GetCoreID>
    8ab4:	4603      	mov	r3, r0
    8ab6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId])
    8ab8:	4a10      	ldr	r2, [pc, #64]	; (8afc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x50>)
    8aba:	9b01      	ldr	r3, [sp, #4]
    8abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ac0:	2b00      	cmp	r3, #0
    8ac2:	d10d      	bne.n	8ae0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8ac4:	f7f7 ffd3 	bl	a6e <Gpt_schm_read_msr>
    8ac8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8aca:	9b00      	ldr	r3, [sp, #0]
    8acc:	f003 0301 	and.w	r3, r3, #1
    8ad0:	2b00      	cmp	r3, #0
    8ad2:	d100      	bne.n	8ad6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8ad4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    8ad6:	490a      	ldr	r1, [pc, #40]	; (8b00 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x54>)
    8ad8:	9b01      	ldr	r3, [sp, #4]
    8ada:	9a00      	ldr	r2, [sp, #0]
    8adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId]++;
    8ae0:	4a06      	ldr	r2, [pc, #24]	; (8afc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x50>)
    8ae2:	9b01      	ldr	r3, [sp, #4]
    8ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ae8:	1c5a      	adds	r2, r3, #1
    8aea:	4904      	ldr	r1, [pc, #16]	; (8afc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_21+0x50>)
    8aec:	9b01      	ldr	r3, [sp, #4]
    8aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8af2:	bf00      	nop
    8af4:	b003      	add	sp, #12
    8af6:	f85d fb04 	ldr.w	pc, [sp], #4
    8afa:	bf00      	nop
    8afc:	1fff9104 	.word	0x1fff9104
    8b00:	1fff9100 	.word	0x1fff9100

00008b04 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21(void)
{
    8b04:	b500      	push	{lr}
    8b06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8b08:	f7f8 f892 	bl	c30 <Sys_GetCoreID>
    8b0c:	4603      	mov	r3, r0
    8b0e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId]--;
    8b10:	4a0d      	ldr	r2, [pc, #52]	; (8b48 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x44>)
    8b12:	9b01      	ldr	r3, [sp, #4]
    8b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b18:	1e5a      	subs	r2, r3, #1
    8b1a:	490b      	ldr	r1, [pc, #44]	; (8b48 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x44>)
    8b1c:	9b01      	ldr	r3, [sp, #4]
    8b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    8b22:	4a0a      	ldr	r2, [pc, #40]	; (8b4c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x48>)
    8b24:	9b01      	ldr	r3, [sp, #4]
    8b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b2a:	f003 0301 	and.w	r3, r3, #1
    8b2e:	2b00      	cmp	r3, #0
    8b30:	d106      	bne.n	8b40 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x3c>
    8b32:	4a05      	ldr	r2, [pc, #20]	; (8b48 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x44>)
    8b34:	9b01      	ldr	r3, [sp, #4]
    8b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b3a:	2b00      	cmp	r3, #0
    8b3c:	d100      	bne.n	8b40 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8b3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8b40:	bf00      	nop
    8b42:	b003      	add	sp, #12
    8b44:	f85d fb04 	ldr.w	pc, [sp], #4
    8b48:	1fff9104 	.word	0x1fff9104
    8b4c:	1fff9100 	.word	0x1fff9100

00008b50 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22(void)
{
    8b50:	b500      	push	{lr}
    8b52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8b54:	f7f8 f86c 	bl	c30 <Sys_GetCoreID>
    8b58:	4603      	mov	r3, r0
    8b5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId])
    8b5c:	4a10      	ldr	r2, [pc, #64]	; (8ba0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x50>)
    8b5e:	9b01      	ldr	r3, [sp, #4]
    8b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b64:	2b00      	cmp	r3, #0
    8b66:	d10d      	bne.n	8b84 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8b68:	f7f7 ff81 	bl	a6e <Gpt_schm_read_msr>
    8b6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8b6e:	9b00      	ldr	r3, [sp, #0]
    8b70:	f003 0301 	and.w	r3, r3, #1
    8b74:	2b00      	cmp	r3, #0
    8b76:	d100      	bne.n	8b7a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8b78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    8b7a:	490a      	ldr	r1, [pc, #40]	; (8ba4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x54>)
    8b7c:	9b01      	ldr	r3, [sp, #4]
    8b7e:	9a00      	ldr	r2, [sp, #0]
    8b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId]++;
    8b84:	4a06      	ldr	r2, [pc, #24]	; (8ba0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x50>)
    8b86:	9b01      	ldr	r3, [sp, #4]
    8b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b8c:	1c5a      	adds	r2, r3, #1
    8b8e:	4904      	ldr	r1, [pc, #16]	; (8ba0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_22+0x50>)
    8b90:	9b01      	ldr	r3, [sp, #4]
    8b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8b96:	bf00      	nop
    8b98:	b003      	add	sp, #12
    8b9a:	f85d fb04 	ldr.w	pc, [sp], #4
    8b9e:	bf00      	nop
    8ba0:	1fff910c 	.word	0x1fff910c
    8ba4:	1fff9108 	.word	0x1fff9108

00008ba8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22(void)
{
    8ba8:	b500      	push	{lr}
    8baa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8bac:	f7f8 f840 	bl	c30 <Sys_GetCoreID>
    8bb0:	4603      	mov	r3, r0
    8bb2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId]--;
    8bb4:	4a0d      	ldr	r2, [pc, #52]	; (8bec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x44>)
    8bb6:	9b01      	ldr	r3, [sp, #4]
    8bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bbc:	1e5a      	subs	r2, r3, #1
    8bbe:	490b      	ldr	r1, [pc, #44]	; (8bec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x44>)
    8bc0:	9b01      	ldr	r3, [sp, #4]
    8bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    8bc6:	4a0a      	ldr	r2, [pc, #40]	; (8bf0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x48>)
    8bc8:	9b01      	ldr	r3, [sp, #4]
    8bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bce:	f003 0301 	and.w	r3, r3, #1
    8bd2:	2b00      	cmp	r3, #0
    8bd4:	d106      	bne.n	8be4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x3c>
    8bd6:	4a05      	ldr	r2, [pc, #20]	; (8bec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x44>)
    8bd8:	9b01      	ldr	r3, [sp, #4]
    8bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bde:	2b00      	cmp	r3, #0
    8be0:	d100      	bne.n	8be4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8be2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8be4:	bf00      	nop
    8be6:	b003      	add	sp, #12
    8be8:	f85d fb04 	ldr.w	pc, [sp], #4
    8bec:	1fff910c 	.word	0x1fff910c
    8bf0:	1fff9108 	.word	0x1fff9108

00008bf4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23(void)
{
    8bf4:	b500      	push	{lr}
    8bf6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8bf8:	f7f8 f81a 	bl	c30 <Sys_GetCoreID>
    8bfc:	4603      	mov	r3, r0
    8bfe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId])
    8c00:	4a10      	ldr	r2, [pc, #64]	; (8c44 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x50>)
    8c02:	9b01      	ldr	r3, [sp, #4]
    8c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c08:	2b00      	cmp	r3, #0
    8c0a:	d10d      	bne.n	8c28 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8c0c:	f7f7 ff2f 	bl	a6e <Gpt_schm_read_msr>
    8c10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8c12:	9b00      	ldr	r3, [sp, #0]
    8c14:	f003 0301 	and.w	r3, r3, #1
    8c18:	2b00      	cmp	r3, #0
    8c1a:	d100      	bne.n	8c1e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8c1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    8c1e:	490a      	ldr	r1, [pc, #40]	; (8c48 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x54>)
    8c20:	9b01      	ldr	r3, [sp, #4]
    8c22:	9a00      	ldr	r2, [sp, #0]
    8c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId]++;
    8c28:	4a06      	ldr	r2, [pc, #24]	; (8c44 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x50>)
    8c2a:	9b01      	ldr	r3, [sp, #4]
    8c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c30:	1c5a      	adds	r2, r3, #1
    8c32:	4904      	ldr	r1, [pc, #16]	; (8c44 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_23+0x50>)
    8c34:	9b01      	ldr	r3, [sp, #4]
    8c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8c3a:	bf00      	nop
    8c3c:	b003      	add	sp, #12
    8c3e:	f85d fb04 	ldr.w	pc, [sp], #4
    8c42:	bf00      	nop
    8c44:	1fff9114 	.word	0x1fff9114
    8c48:	1fff9110 	.word	0x1fff9110

00008c4c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23(void)
{
    8c4c:	b500      	push	{lr}
    8c4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c50:	f7f7 ffee 	bl	c30 <Sys_GetCoreID>
    8c54:	4603      	mov	r3, r0
    8c56:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId]--;
    8c58:	4a0d      	ldr	r2, [pc, #52]	; (8c90 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x44>)
    8c5a:	9b01      	ldr	r3, [sp, #4]
    8c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c60:	1e5a      	subs	r2, r3, #1
    8c62:	490b      	ldr	r1, [pc, #44]	; (8c90 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x44>)
    8c64:	9b01      	ldr	r3, [sp, #4]
    8c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    8c6a:	4a0a      	ldr	r2, [pc, #40]	; (8c94 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x48>)
    8c6c:	9b01      	ldr	r3, [sp, #4]
    8c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c72:	f003 0301 	and.w	r3, r3, #1
    8c76:	2b00      	cmp	r3, #0
    8c78:	d106      	bne.n	8c88 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x3c>
    8c7a:	4a05      	ldr	r2, [pc, #20]	; (8c90 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x44>)
    8c7c:	9b01      	ldr	r3, [sp, #4]
    8c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c82:	2b00      	cmp	r3, #0
    8c84:	d100      	bne.n	8c88 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8c86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8c88:	bf00      	nop
    8c8a:	b003      	add	sp, #12
    8c8c:	f85d fb04 	ldr.w	pc, [sp], #4
    8c90:	1fff9114 	.word	0x1fff9114
    8c94:	1fff9110 	.word	0x1fff9110

00008c98 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24(void)
{
    8c98:	b500      	push	{lr}
    8c9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c9c:	f7f7 ffc8 	bl	c30 <Sys_GetCoreID>
    8ca0:	4603      	mov	r3, r0
    8ca2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId])
    8ca4:	4a10      	ldr	r2, [pc, #64]	; (8ce8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x50>)
    8ca6:	9b01      	ldr	r3, [sp, #4]
    8ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cac:	2b00      	cmp	r3, #0
    8cae:	d10d      	bne.n	8ccc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8cb0:	f7f7 fedd 	bl	a6e <Gpt_schm_read_msr>
    8cb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8cb6:	9b00      	ldr	r3, [sp, #0]
    8cb8:	f003 0301 	and.w	r3, r3, #1
    8cbc:	2b00      	cmp	r3, #0
    8cbe:	d100      	bne.n	8cc2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8cc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    8cc2:	490a      	ldr	r1, [pc, #40]	; (8cec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x54>)
    8cc4:	9b01      	ldr	r3, [sp, #4]
    8cc6:	9a00      	ldr	r2, [sp, #0]
    8cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId]++;
    8ccc:	4a06      	ldr	r2, [pc, #24]	; (8ce8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x50>)
    8cce:	9b01      	ldr	r3, [sp, #4]
    8cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cd4:	1c5a      	adds	r2, r3, #1
    8cd6:	4904      	ldr	r1, [pc, #16]	; (8ce8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_24+0x50>)
    8cd8:	9b01      	ldr	r3, [sp, #4]
    8cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8cde:	bf00      	nop
    8ce0:	b003      	add	sp, #12
    8ce2:	f85d fb04 	ldr.w	pc, [sp], #4
    8ce6:	bf00      	nop
    8ce8:	1fff911c 	.word	0x1fff911c
    8cec:	1fff9118 	.word	0x1fff9118

00008cf0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24(void)
{
    8cf0:	b500      	push	{lr}
    8cf2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8cf4:	f7f7 ff9c 	bl	c30 <Sys_GetCoreID>
    8cf8:	4603      	mov	r3, r0
    8cfa:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId]--;
    8cfc:	4a0d      	ldr	r2, [pc, #52]	; (8d34 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x44>)
    8cfe:	9b01      	ldr	r3, [sp, #4]
    8d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d04:	1e5a      	subs	r2, r3, #1
    8d06:	490b      	ldr	r1, [pc, #44]	; (8d34 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x44>)
    8d08:	9b01      	ldr	r3, [sp, #4]
    8d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    8d0e:	4a0a      	ldr	r2, [pc, #40]	; (8d38 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x48>)
    8d10:	9b01      	ldr	r3, [sp, #4]
    8d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d16:	f003 0301 	and.w	r3, r3, #1
    8d1a:	2b00      	cmp	r3, #0
    8d1c:	d106      	bne.n	8d2c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x3c>
    8d1e:	4a05      	ldr	r2, [pc, #20]	; (8d34 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x44>)
    8d20:	9b01      	ldr	r3, [sp, #4]
    8d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d26:	2b00      	cmp	r3, #0
    8d28:	d100      	bne.n	8d2c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8d2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8d2c:	bf00      	nop
    8d2e:	b003      	add	sp, #12
    8d30:	f85d fb04 	ldr.w	pc, [sp], #4
    8d34:	1fff911c 	.word	0x1fff911c
    8d38:	1fff9118 	.word	0x1fff9118

00008d3c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25(void)
{
    8d3c:	b500      	push	{lr}
    8d3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8d40:	f7f7 ff76 	bl	c30 <Sys_GetCoreID>
    8d44:	4603      	mov	r3, r0
    8d46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId])
    8d48:	4a10      	ldr	r2, [pc, #64]	; (8d8c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x50>)
    8d4a:	9b01      	ldr	r3, [sp, #4]
    8d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d50:	2b00      	cmp	r3, #0
    8d52:	d10d      	bne.n	8d70 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8d54:	f7f7 fe8b 	bl	a6e <Gpt_schm_read_msr>
    8d58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8d5a:	9b00      	ldr	r3, [sp, #0]
    8d5c:	f003 0301 	and.w	r3, r3, #1
    8d60:	2b00      	cmp	r3, #0
    8d62:	d100      	bne.n	8d66 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8d64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    8d66:	490a      	ldr	r1, [pc, #40]	; (8d90 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x54>)
    8d68:	9b01      	ldr	r3, [sp, #4]
    8d6a:	9a00      	ldr	r2, [sp, #0]
    8d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId]++;
    8d70:	4a06      	ldr	r2, [pc, #24]	; (8d8c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x50>)
    8d72:	9b01      	ldr	r3, [sp, #4]
    8d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d78:	1c5a      	adds	r2, r3, #1
    8d7a:	4904      	ldr	r1, [pc, #16]	; (8d8c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_25+0x50>)
    8d7c:	9b01      	ldr	r3, [sp, #4]
    8d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8d82:	bf00      	nop
    8d84:	b003      	add	sp, #12
    8d86:	f85d fb04 	ldr.w	pc, [sp], #4
    8d8a:	bf00      	nop
    8d8c:	1fff9124 	.word	0x1fff9124
    8d90:	1fff9120 	.word	0x1fff9120

00008d94 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25(void)
{
    8d94:	b500      	push	{lr}
    8d96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8d98:	f7f7 ff4a 	bl	c30 <Sys_GetCoreID>
    8d9c:	4603      	mov	r3, r0
    8d9e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId]--;
    8da0:	4a0d      	ldr	r2, [pc, #52]	; (8dd8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x44>)
    8da2:	9b01      	ldr	r3, [sp, #4]
    8da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8da8:	1e5a      	subs	r2, r3, #1
    8daa:	490b      	ldr	r1, [pc, #44]	; (8dd8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x44>)
    8dac:	9b01      	ldr	r3, [sp, #4]
    8dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    8db2:	4a0a      	ldr	r2, [pc, #40]	; (8ddc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x48>)
    8db4:	9b01      	ldr	r3, [sp, #4]
    8db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dba:	f003 0301 	and.w	r3, r3, #1
    8dbe:	2b00      	cmp	r3, #0
    8dc0:	d106      	bne.n	8dd0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x3c>
    8dc2:	4a05      	ldr	r2, [pc, #20]	; (8dd8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x44>)
    8dc4:	9b01      	ldr	r3, [sp, #4]
    8dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dca:	2b00      	cmp	r3, #0
    8dcc:	d100      	bne.n	8dd0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8dce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8dd0:	bf00      	nop
    8dd2:	b003      	add	sp, #12
    8dd4:	f85d fb04 	ldr.w	pc, [sp], #4
    8dd8:	1fff9124 	.word	0x1fff9124
    8ddc:	1fff9120 	.word	0x1fff9120

00008de0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26(void)
{
    8de0:	b500      	push	{lr}
    8de2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8de4:	f7f7 ff24 	bl	c30 <Sys_GetCoreID>
    8de8:	4603      	mov	r3, r0
    8dea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId])
    8dec:	4a10      	ldr	r2, [pc, #64]	; (8e30 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x50>)
    8dee:	9b01      	ldr	r3, [sp, #4]
    8df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8df4:	2b00      	cmp	r3, #0
    8df6:	d10d      	bne.n	8e14 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8df8:	f7f7 fe39 	bl	a6e <Gpt_schm_read_msr>
    8dfc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8dfe:	9b00      	ldr	r3, [sp, #0]
    8e00:	f003 0301 	and.w	r3, r3, #1
    8e04:	2b00      	cmp	r3, #0
    8e06:	d100      	bne.n	8e0a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8e08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    8e0a:	490a      	ldr	r1, [pc, #40]	; (8e34 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x54>)
    8e0c:	9b01      	ldr	r3, [sp, #4]
    8e0e:	9a00      	ldr	r2, [sp, #0]
    8e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId]++;
    8e14:	4a06      	ldr	r2, [pc, #24]	; (8e30 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x50>)
    8e16:	9b01      	ldr	r3, [sp, #4]
    8e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e1c:	1c5a      	adds	r2, r3, #1
    8e1e:	4904      	ldr	r1, [pc, #16]	; (8e30 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_26+0x50>)
    8e20:	9b01      	ldr	r3, [sp, #4]
    8e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8e26:	bf00      	nop
    8e28:	b003      	add	sp, #12
    8e2a:	f85d fb04 	ldr.w	pc, [sp], #4
    8e2e:	bf00      	nop
    8e30:	1fff912c 	.word	0x1fff912c
    8e34:	1fff9128 	.word	0x1fff9128

00008e38 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26(void)
{
    8e38:	b500      	push	{lr}
    8e3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e3c:	f7f7 fef8 	bl	c30 <Sys_GetCoreID>
    8e40:	4603      	mov	r3, r0
    8e42:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId]--;
    8e44:	4a0d      	ldr	r2, [pc, #52]	; (8e7c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x44>)
    8e46:	9b01      	ldr	r3, [sp, #4]
    8e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e4c:	1e5a      	subs	r2, r3, #1
    8e4e:	490b      	ldr	r1, [pc, #44]	; (8e7c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x44>)
    8e50:	9b01      	ldr	r3, [sp, #4]
    8e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    8e56:	4a0a      	ldr	r2, [pc, #40]	; (8e80 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x48>)
    8e58:	9b01      	ldr	r3, [sp, #4]
    8e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e5e:	f003 0301 	and.w	r3, r3, #1
    8e62:	2b00      	cmp	r3, #0
    8e64:	d106      	bne.n	8e74 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x3c>
    8e66:	4a05      	ldr	r2, [pc, #20]	; (8e7c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x44>)
    8e68:	9b01      	ldr	r3, [sp, #4]
    8e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e6e:	2b00      	cmp	r3, #0
    8e70:	d100      	bne.n	8e74 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8e72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8e74:	bf00      	nop
    8e76:	b003      	add	sp, #12
    8e78:	f85d fb04 	ldr.w	pc, [sp], #4
    8e7c:	1fff912c 	.word	0x1fff912c
    8e80:	1fff9128 	.word	0x1fff9128

00008e84 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29(void)
{
    8e84:	b500      	push	{lr}
    8e86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e88:	f7f7 fed2 	bl	c30 <Sys_GetCoreID>
    8e8c:	4603      	mov	r3, r0
    8e8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId])
    8e90:	4a10      	ldr	r2, [pc, #64]	; (8ed4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x50>)
    8e92:	9b01      	ldr	r3, [sp, #4]
    8e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e98:	2b00      	cmp	r3, #0
    8e9a:	d10d      	bne.n	8eb8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8e9c:	f7f7 fde7 	bl	a6e <Gpt_schm_read_msr>
    8ea0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8ea2:	9b00      	ldr	r3, [sp, #0]
    8ea4:	f003 0301 	and.w	r3, r3, #1
    8ea8:	2b00      	cmp	r3, #0
    8eaa:	d100      	bne.n	8eae <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8eac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_29[u32CoreId] = msr;
    8eae:	490a      	ldr	r1, [pc, #40]	; (8ed8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x54>)
    8eb0:	9b01      	ldr	r3, [sp, #4]
    8eb2:	9a00      	ldr	r2, [sp, #0]
    8eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId]++;
    8eb8:	4a06      	ldr	r2, [pc, #24]	; (8ed4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x50>)
    8eba:	9b01      	ldr	r3, [sp, #4]
    8ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ec0:	1c5a      	adds	r2, r3, #1
    8ec2:	4904      	ldr	r1, [pc, #16]	; (8ed4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_29+0x50>)
    8ec4:	9b01      	ldr	r3, [sp, #4]
    8ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8eca:	bf00      	nop
    8ecc:	b003      	add	sp, #12
    8ece:	f85d fb04 	ldr.w	pc, [sp], #4
    8ed2:	bf00      	nop
    8ed4:	1fff9134 	.word	0x1fff9134
    8ed8:	1fff9130 	.word	0x1fff9130

00008edc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29(void)
{
    8edc:	b500      	push	{lr}
    8ede:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8ee0:	f7f7 fea6 	bl	c30 <Sys_GetCoreID>
    8ee4:	4603      	mov	r3, r0
    8ee6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId]--;
    8ee8:	4a0d      	ldr	r2, [pc, #52]	; (8f20 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x44>)
    8eea:	9b01      	ldr	r3, [sp, #4]
    8eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ef0:	1e5a      	subs	r2, r3, #1
    8ef2:	490b      	ldr	r1, [pc, #44]	; (8f20 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x44>)
    8ef4:	9b01      	ldr	r3, [sp, #4]
    8ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
    8efa:	4a0a      	ldr	r2, [pc, #40]	; (8f24 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x48>)
    8efc:	9b01      	ldr	r3, [sp, #4]
    8efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f02:	f003 0301 	and.w	r3, r3, #1
    8f06:	2b00      	cmp	r3, #0
    8f08:	d106      	bne.n	8f18 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x3c>
    8f0a:	4a05      	ldr	r2, [pc, #20]	; (8f20 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x44>)
    8f0c:	9b01      	ldr	r3, [sp, #4]
    8f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f12:	2b00      	cmp	r3, #0
    8f14:	d100      	bne.n	8f18 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8f16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8f18:	bf00      	nop
    8f1a:	b003      	add	sp, #12
    8f1c:	f85d fb04 	ldr.w	pc, [sp], #4
    8f20:	1fff9134 	.word	0x1fff9134
    8f24:	1fff9130 	.word	0x1fff9130

00008f28 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30(void)
{
    8f28:	b500      	push	{lr}
    8f2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f2c:	f7f7 fe80 	bl	c30 <Sys_GetCoreID>
    8f30:	4603      	mov	r3, r0
    8f32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId])
    8f34:	4a10      	ldr	r2, [pc, #64]	; (8f78 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x50>)
    8f36:	9b01      	ldr	r3, [sp, #4]
    8f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f3c:	2b00      	cmp	r3, #0
    8f3e:	d10d      	bne.n	8f5c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8f40:	f7f7 fd95 	bl	a6e <Gpt_schm_read_msr>
    8f44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8f46:	9b00      	ldr	r3, [sp, #0]
    8f48:	f003 0301 	and.w	r3, r3, #1
    8f4c:	2b00      	cmp	r3, #0
    8f4e:	d100      	bne.n	8f52 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8f50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_30[u32CoreId] = msr;
    8f52:	490a      	ldr	r1, [pc, #40]	; (8f7c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x54>)
    8f54:	9b01      	ldr	r3, [sp, #4]
    8f56:	9a00      	ldr	r2, [sp, #0]
    8f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId]++;
    8f5c:	4a06      	ldr	r2, [pc, #24]	; (8f78 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x50>)
    8f5e:	9b01      	ldr	r3, [sp, #4]
    8f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f64:	1c5a      	adds	r2, r3, #1
    8f66:	4904      	ldr	r1, [pc, #16]	; (8f78 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_30+0x50>)
    8f68:	9b01      	ldr	r3, [sp, #4]
    8f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8f6e:	bf00      	nop
    8f70:	b003      	add	sp, #12
    8f72:	f85d fb04 	ldr.w	pc, [sp], #4
    8f76:	bf00      	nop
    8f78:	1fff913c 	.word	0x1fff913c
    8f7c:	1fff9138 	.word	0x1fff9138

00008f80 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30(void)
{
    8f80:	b500      	push	{lr}
    8f82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f84:	f7f7 fe54 	bl	c30 <Sys_GetCoreID>
    8f88:	4603      	mov	r3, r0
    8f8a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId]--;
    8f8c:	4a0d      	ldr	r2, [pc, #52]	; (8fc4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x44>)
    8f8e:	9b01      	ldr	r3, [sp, #4]
    8f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f94:	1e5a      	subs	r2, r3, #1
    8f96:	490b      	ldr	r1, [pc, #44]	; (8fc4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x44>)
    8f98:	9b01      	ldr	r3, [sp, #4]
    8f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
    8f9e:	4a0a      	ldr	r2, [pc, #40]	; (8fc8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x48>)
    8fa0:	9b01      	ldr	r3, [sp, #4]
    8fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fa6:	f003 0301 	and.w	r3, r3, #1
    8faa:	2b00      	cmp	r3, #0
    8fac:	d106      	bne.n	8fbc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x3c>
    8fae:	4a05      	ldr	r2, [pc, #20]	; (8fc4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x44>)
    8fb0:	9b01      	ldr	r3, [sp, #4]
    8fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fb6:	2b00      	cmp	r3, #0
    8fb8:	d100      	bne.n	8fbc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8fba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8fbc:	bf00      	nop
    8fbe:	b003      	add	sp, #12
    8fc0:	f85d fb04 	ldr.w	pc, [sp], #4
    8fc4:	1fff913c 	.word	0x1fff913c
    8fc8:	1fff9138 	.word	0x1fff9138

00008fcc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31(void)
{
    8fcc:	b500      	push	{lr}
    8fce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8fd0:	f7f7 fe2e 	bl	c30 <Sys_GetCoreID>
    8fd4:	4603      	mov	r3, r0
    8fd6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId])
    8fd8:	4a10      	ldr	r2, [pc, #64]	; (901c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x50>)
    8fda:	9b01      	ldr	r3, [sp, #4]
    8fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fe0:	2b00      	cmp	r3, #0
    8fe2:	d10d      	bne.n	9000 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8fe4:	f7f7 fd43 	bl	a6e <Gpt_schm_read_msr>
    8fe8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8fea:	9b00      	ldr	r3, [sp, #0]
    8fec:	f003 0301 	and.w	r3, r3, #1
    8ff0:	2b00      	cmp	r3, #0
    8ff2:	d100      	bne.n	8ff6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8ff4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_31[u32CoreId] = msr;
    8ff6:	490a      	ldr	r1, [pc, #40]	; (9020 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x54>)
    8ff8:	9b01      	ldr	r3, [sp, #4]
    8ffa:	9a00      	ldr	r2, [sp, #0]
    8ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId]++;
    9000:	4a06      	ldr	r2, [pc, #24]	; (901c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x50>)
    9002:	9b01      	ldr	r3, [sp, #4]
    9004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9008:	1c5a      	adds	r2, r3, #1
    900a:	4904      	ldr	r1, [pc, #16]	; (901c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_31+0x50>)
    900c:	9b01      	ldr	r3, [sp, #4]
    900e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9012:	bf00      	nop
    9014:	b003      	add	sp, #12
    9016:	f85d fb04 	ldr.w	pc, [sp], #4
    901a:	bf00      	nop
    901c:	1fff9144 	.word	0x1fff9144
    9020:	1fff9140 	.word	0x1fff9140

00009024 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31(void)
{
    9024:	b500      	push	{lr}
    9026:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9028:	f7f7 fe02 	bl	c30 <Sys_GetCoreID>
    902c:	4603      	mov	r3, r0
    902e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId]--;
    9030:	4a0d      	ldr	r2, [pc, #52]	; (9068 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x44>)
    9032:	9b01      	ldr	r3, [sp, #4]
    9034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9038:	1e5a      	subs	r2, r3, #1
    903a:	490b      	ldr	r1, [pc, #44]	; (9068 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x44>)
    903c:	9b01      	ldr	r3, [sp, #4]
    903e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
    9042:	4a0a      	ldr	r2, [pc, #40]	; (906c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x48>)
    9044:	9b01      	ldr	r3, [sp, #4]
    9046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    904a:	f003 0301 	and.w	r3, r3, #1
    904e:	2b00      	cmp	r3, #0
    9050:	d106      	bne.n	9060 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x3c>
    9052:	4a05      	ldr	r2, [pc, #20]	; (9068 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x44>)
    9054:	9b01      	ldr	r3, [sp, #4]
    9056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    905a:	2b00      	cmp	r3, #0
    905c:	d100      	bne.n	9060 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    905e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9060:	bf00      	nop
    9062:	b003      	add	sp, #12
    9064:	f85d fb04 	ldr.w	pc, [sp], #4
    9068:	1fff9144 	.word	0x1fff9144
    906c:	1fff9140 	.word	0x1fff9140

00009070 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35(void)
{
    9070:	b500      	push	{lr}
    9072:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9074:	f7f7 fddc 	bl	c30 <Sys_GetCoreID>
    9078:	4603      	mov	r3, r0
    907a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId])
    907c:	4a10      	ldr	r2, [pc, #64]	; (90c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x50>)
    907e:	9b01      	ldr	r3, [sp, #4]
    9080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9084:	2b00      	cmp	r3, #0
    9086:	d10d      	bne.n	90a4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9088:	f7f7 fcf1 	bl	a6e <Gpt_schm_read_msr>
    908c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    908e:	9b00      	ldr	r3, [sp, #0]
    9090:	f003 0301 	and.w	r3, r3, #1
    9094:	2b00      	cmp	r3, #0
    9096:	d100      	bne.n	909a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9098:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_35[u32CoreId] = msr;
    909a:	490a      	ldr	r1, [pc, #40]	; (90c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x54>)
    909c:	9b01      	ldr	r3, [sp, #4]
    909e:	9a00      	ldr	r2, [sp, #0]
    90a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId]++;
    90a4:	4a06      	ldr	r2, [pc, #24]	; (90c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x50>)
    90a6:	9b01      	ldr	r3, [sp, #4]
    90a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90ac:	1c5a      	adds	r2, r3, #1
    90ae:	4904      	ldr	r1, [pc, #16]	; (90c0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_35+0x50>)
    90b0:	9b01      	ldr	r3, [sp, #4]
    90b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    90b6:	bf00      	nop
    90b8:	b003      	add	sp, #12
    90ba:	f85d fb04 	ldr.w	pc, [sp], #4
    90be:	bf00      	nop
    90c0:	1fff914c 	.word	0x1fff914c
    90c4:	1fff9148 	.word	0x1fff9148

000090c8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35(void)
{
    90c8:	b500      	push	{lr}
    90ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    90cc:	f7f7 fdb0 	bl	c30 <Sys_GetCoreID>
    90d0:	4603      	mov	r3, r0
    90d2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId]--;
    90d4:	4a0d      	ldr	r2, [pc, #52]	; (910c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x44>)
    90d6:	9b01      	ldr	r3, [sp, #4]
    90d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90dc:	1e5a      	subs	r2, r3, #1
    90de:	490b      	ldr	r1, [pc, #44]	; (910c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x44>)
    90e0:	9b01      	ldr	r3, [sp, #4]
    90e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
    90e6:	4a0a      	ldr	r2, [pc, #40]	; (9110 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x48>)
    90e8:	9b01      	ldr	r3, [sp, #4]
    90ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90ee:	f003 0301 	and.w	r3, r3, #1
    90f2:	2b00      	cmp	r3, #0
    90f4:	d106      	bne.n	9104 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x3c>
    90f6:	4a05      	ldr	r2, [pc, #20]	; (910c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x44>)
    90f8:	9b01      	ldr	r3, [sp, #4]
    90fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90fe:	2b00      	cmp	r3, #0
    9100:	d100      	bne.n	9104 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9102:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9104:	bf00      	nop
    9106:	b003      	add	sp, #12
    9108:	f85d fb04 	ldr.w	pc, [sp], #4
    910c:	1fff914c 	.word	0x1fff914c
    9110:	1fff9148 	.word	0x1fff9148

00009114 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36(void)
{
    9114:	b500      	push	{lr}
    9116:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9118:	f7f7 fd8a 	bl	c30 <Sys_GetCoreID>
    911c:	4603      	mov	r3, r0
    911e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId])
    9120:	4a10      	ldr	r2, [pc, #64]	; (9164 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x50>)
    9122:	9b01      	ldr	r3, [sp, #4]
    9124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9128:	2b00      	cmp	r3, #0
    912a:	d10d      	bne.n	9148 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    912c:	f7f7 fc9f 	bl	a6e <Gpt_schm_read_msr>
    9130:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9132:	9b00      	ldr	r3, [sp, #0]
    9134:	f003 0301 	and.w	r3, r3, #1
    9138:	2b00      	cmp	r3, #0
    913a:	d100      	bne.n	913e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    913c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_36[u32CoreId] = msr;
    913e:	490a      	ldr	r1, [pc, #40]	; (9168 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x54>)
    9140:	9b01      	ldr	r3, [sp, #4]
    9142:	9a00      	ldr	r2, [sp, #0]
    9144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId]++;
    9148:	4a06      	ldr	r2, [pc, #24]	; (9164 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x50>)
    914a:	9b01      	ldr	r3, [sp, #4]
    914c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9150:	1c5a      	adds	r2, r3, #1
    9152:	4904      	ldr	r1, [pc, #16]	; (9164 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_36+0x50>)
    9154:	9b01      	ldr	r3, [sp, #4]
    9156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    915a:	bf00      	nop
    915c:	b003      	add	sp, #12
    915e:	f85d fb04 	ldr.w	pc, [sp], #4
    9162:	bf00      	nop
    9164:	1fff9154 	.word	0x1fff9154
    9168:	1fff9150 	.word	0x1fff9150

0000916c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36(void)
{
    916c:	b500      	push	{lr}
    916e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9170:	f7f7 fd5e 	bl	c30 <Sys_GetCoreID>
    9174:	4603      	mov	r3, r0
    9176:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId]--;
    9178:	4a0d      	ldr	r2, [pc, #52]	; (91b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x44>)
    917a:	9b01      	ldr	r3, [sp, #4]
    917c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9180:	1e5a      	subs	r2, r3, #1
    9182:	490b      	ldr	r1, [pc, #44]	; (91b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x44>)
    9184:	9b01      	ldr	r3, [sp, #4]
    9186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
    918a:	4a0a      	ldr	r2, [pc, #40]	; (91b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x48>)
    918c:	9b01      	ldr	r3, [sp, #4]
    918e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9192:	f003 0301 	and.w	r3, r3, #1
    9196:	2b00      	cmp	r3, #0
    9198:	d106      	bne.n	91a8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x3c>
    919a:	4a05      	ldr	r2, [pc, #20]	; (91b0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x44>)
    919c:	9b01      	ldr	r3, [sp, #4]
    919e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91a2:	2b00      	cmp	r3, #0
    91a4:	d100      	bne.n	91a8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    91a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    91a8:	bf00      	nop
    91aa:	b003      	add	sp, #12
    91ac:	f85d fb04 	ldr.w	pc, [sp], #4
    91b0:	1fff9154 	.word	0x1fff9154
    91b4:	1fff9150 	.word	0x1fff9150

000091b8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38(void)
{
    91b8:	b500      	push	{lr}
    91ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    91bc:	f7f7 fd38 	bl	c30 <Sys_GetCoreID>
    91c0:	4603      	mov	r3, r0
    91c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId])
    91c4:	4a10      	ldr	r2, [pc, #64]	; (9208 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x50>)
    91c6:	9b01      	ldr	r3, [sp, #4]
    91c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91cc:	2b00      	cmp	r3, #0
    91ce:	d10d      	bne.n	91ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    91d0:	f7f7 fc4d 	bl	a6e <Gpt_schm_read_msr>
    91d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    91d6:	9b00      	ldr	r3, [sp, #0]
    91d8:	f003 0301 	and.w	r3, r3, #1
    91dc:	2b00      	cmp	r3, #0
    91de:	d100      	bne.n	91e2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    91e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_38[u32CoreId] = msr;
    91e2:	490a      	ldr	r1, [pc, #40]	; (920c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x54>)
    91e4:	9b01      	ldr	r3, [sp, #4]
    91e6:	9a00      	ldr	r2, [sp, #0]
    91e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId]++;
    91ec:	4a06      	ldr	r2, [pc, #24]	; (9208 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x50>)
    91ee:	9b01      	ldr	r3, [sp, #4]
    91f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91f4:	1c5a      	adds	r2, r3, #1
    91f6:	4904      	ldr	r1, [pc, #16]	; (9208 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_38+0x50>)
    91f8:	9b01      	ldr	r3, [sp, #4]
    91fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    91fe:	bf00      	nop
    9200:	b003      	add	sp, #12
    9202:	f85d fb04 	ldr.w	pc, [sp], #4
    9206:	bf00      	nop
    9208:	1fff915c 	.word	0x1fff915c
    920c:	1fff9158 	.word	0x1fff9158

00009210 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38(void)
{
    9210:	b500      	push	{lr}
    9212:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9214:	f7f7 fd0c 	bl	c30 <Sys_GetCoreID>
    9218:	4603      	mov	r3, r0
    921a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId]--;
    921c:	4a0d      	ldr	r2, [pc, #52]	; (9254 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x44>)
    921e:	9b01      	ldr	r3, [sp, #4]
    9220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9224:	1e5a      	subs	r2, r3, #1
    9226:	490b      	ldr	r1, [pc, #44]	; (9254 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x44>)
    9228:	9b01      	ldr	r3, [sp, #4]
    922a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
    922e:	4a0a      	ldr	r2, [pc, #40]	; (9258 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x48>)
    9230:	9b01      	ldr	r3, [sp, #4]
    9232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9236:	f003 0301 	and.w	r3, r3, #1
    923a:	2b00      	cmp	r3, #0
    923c:	d106      	bne.n	924c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x3c>
    923e:	4a05      	ldr	r2, [pc, #20]	; (9254 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x44>)
    9240:	9b01      	ldr	r3, [sp, #4]
    9242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9246:	2b00      	cmp	r3, #0
    9248:	d100      	bne.n	924c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    924a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    924c:	bf00      	nop
    924e:	b003      	add	sp, #12
    9250:	f85d fb04 	ldr.w	pc, [sp], #4
    9254:	1fff915c 	.word	0x1fff915c
    9258:	1fff9158 	.word	0x1fff9158

0000925c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39(void)
{
    925c:	b500      	push	{lr}
    925e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9260:	f7f7 fce6 	bl	c30 <Sys_GetCoreID>
    9264:	4603      	mov	r3, r0
    9266:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId])
    9268:	4a10      	ldr	r2, [pc, #64]	; (92ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x50>)
    926a:	9b01      	ldr	r3, [sp, #4]
    926c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9270:	2b00      	cmp	r3, #0
    9272:	d10d      	bne.n	9290 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9274:	f7f7 fbfb 	bl	a6e <Gpt_schm_read_msr>
    9278:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    927a:	9b00      	ldr	r3, [sp, #0]
    927c:	f003 0301 	and.w	r3, r3, #1
    9280:	2b00      	cmp	r3, #0
    9282:	d100      	bne.n	9286 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9284:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_39[u32CoreId] = msr;
    9286:	490a      	ldr	r1, [pc, #40]	; (92b0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x54>)
    9288:	9b01      	ldr	r3, [sp, #4]
    928a:	9a00      	ldr	r2, [sp, #0]
    928c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId]++;
    9290:	4a06      	ldr	r2, [pc, #24]	; (92ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x50>)
    9292:	9b01      	ldr	r3, [sp, #4]
    9294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9298:	1c5a      	adds	r2, r3, #1
    929a:	4904      	ldr	r1, [pc, #16]	; (92ac <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_39+0x50>)
    929c:	9b01      	ldr	r3, [sp, #4]
    929e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    92a2:	bf00      	nop
    92a4:	b003      	add	sp, #12
    92a6:	f85d fb04 	ldr.w	pc, [sp], #4
    92aa:	bf00      	nop
    92ac:	1fff9164 	.word	0x1fff9164
    92b0:	1fff9160 	.word	0x1fff9160

000092b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39(void)
{
    92b4:	b500      	push	{lr}
    92b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    92b8:	f7f7 fcba 	bl	c30 <Sys_GetCoreID>
    92bc:	4603      	mov	r3, r0
    92be:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId]--;
    92c0:	4a0d      	ldr	r2, [pc, #52]	; (92f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x44>)
    92c2:	9b01      	ldr	r3, [sp, #4]
    92c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92c8:	1e5a      	subs	r2, r3, #1
    92ca:	490b      	ldr	r1, [pc, #44]	; (92f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x44>)
    92cc:	9b01      	ldr	r3, [sp, #4]
    92ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
    92d2:	4a0a      	ldr	r2, [pc, #40]	; (92fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x48>)
    92d4:	9b01      	ldr	r3, [sp, #4]
    92d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92da:	f003 0301 	and.w	r3, r3, #1
    92de:	2b00      	cmp	r3, #0
    92e0:	d106      	bne.n	92f0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x3c>
    92e2:	4a05      	ldr	r2, [pc, #20]	; (92f8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x44>)
    92e4:	9b01      	ldr	r3, [sp, #4]
    92e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92ea:	2b00      	cmp	r3, #0
    92ec:	d100      	bne.n	92f0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    92ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    92f0:	bf00      	nop
    92f2:	b003      	add	sp, #12
    92f4:	f85d fb04 	ldr.w	pc, [sp], #4
    92f8:	1fff9164 	.word	0x1fff9164
    92fc:	1fff9160 	.word	0x1fff9160

00009300 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40(void)
{
    9300:	b500      	push	{lr}
    9302:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9304:	f7f7 fc94 	bl	c30 <Sys_GetCoreID>
    9308:	4603      	mov	r3, r0
    930a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId])
    930c:	4a10      	ldr	r2, [pc, #64]	; (9350 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x50>)
    930e:	9b01      	ldr	r3, [sp, #4]
    9310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9314:	2b00      	cmp	r3, #0
    9316:	d10d      	bne.n	9334 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9318:	f7f7 fba9 	bl	a6e <Gpt_schm_read_msr>
    931c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    931e:	9b00      	ldr	r3, [sp, #0]
    9320:	f003 0301 	and.w	r3, r3, #1
    9324:	2b00      	cmp	r3, #0
    9326:	d100      	bne.n	932a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9328:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_40[u32CoreId] = msr;
    932a:	490a      	ldr	r1, [pc, #40]	; (9354 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x54>)
    932c:	9b01      	ldr	r3, [sp, #4]
    932e:	9a00      	ldr	r2, [sp, #0]
    9330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId]++;
    9334:	4a06      	ldr	r2, [pc, #24]	; (9350 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x50>)
    9336:	9b01      	ldr	r3, [sp, #4]
    9338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    933c:	1c5a      	adds	r2, r3, #1
    933e:	4904      	ldr	r1, [pc, #16]	; (9350 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_40+0x50>)
    9340:	9b01      	ldr	r3, [sp, #4]
    9342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9346:	bf00      	nop
    9348:	b003      	add	sp, #12
    934a:	f85d fb04 	ldr.w	pc, [sp], #4
    934e:	bf00      	nop
    9350:	1fff916c 	.word	0x1fff916c
    9354:	1fff9168 	.word	0x1fff9168

00009358 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40(void)
{
    9358:	b500      	push	{lr}
    935a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    935c:	f7f7 fc68 	bl	c30 <Sys_GetCoreID>
    9360:	4603      	mov	r3, r0
    9362:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId]--;
    9364:	4a0d      	ldr	r2, [pc, #52]	; (939c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x44>)
    9366:	9b01      	ldr	r3, [sp, #4]
    9368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    936c:	1e5a      	subs	r2, r3, #1
    936e:	490b      	ldr	r1, [pc, #44]	; (939c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x44>)
    9370:	9b01      	ldr	r3, [sp, #4]
    9372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
    9376:	4a0a      	ldr	r2, [pc, #40]	; (93a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x48>)
    9378:	9b01      	ldr	r3, [sp, #4]
    937a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    937e:	f003 0301 	and.w	r3, r3, #1
    9382:	2b00      	cmp	r3, #0
    9384:	d106      	bne.n	9394 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x3c>
    9386:	4a05      	ldr	r2, [pc, #20]	; (939c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x44>)
    9388:	9b01      	ldr	r3, [sp, #4]
    938a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    938e:	2b00      	cmp	r3, #0
    9390:	d100      	bne.n	9394 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9392:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9394:	bf00      	nop
    9396:	b003      	add	sp, #12
    9398:	f85d fb04 	ldr.w	pc, [sp], #4
    939c:	1fff916c 	.word	0x1fff916c
    93a0:	1fff9168 	.word	0x1fff9168

000093a4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41(void)
{
    93a4:	b500      	push	{lr}
    93a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    93a8:	f7f7 fc42 	bl	c30 <Sys_GetCoreID>
    93ac:	4603      	mov	r3, r0
    93ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId])
    93b0:	4a10      	ldr	r2, [pc, #64]	; (93f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x50>)
    93b2:	9b01      	ldr	r3, [sp, #4]
    93b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93b8:	2b00      	cmp	r3, #0
    93ba:	d10d      	bne.n	93d8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    93bc:	f7f7 fb57 	bl	a6e <Gpt_schm_read_msr>
    93c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    93c2:	9b00      	ldr	r3, [sp, #0]
    93c4:	f003 0301 	and.w	r3, r3, #1
    93c8:	2b00      	cmp	r3, #0
    93ca:	d100      	bne.n	93ce <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    93cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_41[u32CoreId] = msr;
    93ce:	490a      	ldr	r1, [pc, #40]	; (93f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x54>)
    93d0:	9b01      	ldr	r3, [sp, #4]
    93d2:	9a00      	ldr	r2, [sp, #0]
    93d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId]++;
    93d8:	4a06      	ldr	r2, [pc, #24]	; (93f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x50>)
    93da:	9b01      	ldr	r3, [sp, #4]
    93dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93e0:	1c5a      	adds	r2, r3, #1
    93e2:	4904      	ldr	r1, [pc, #16]	; (93f4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_41+0x50>)
    93e4:	9b01      	ldr	r3, [sp, #4]
    93e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    93ea:	bf00      	nop
    93ec:	b003      	add	sp, #12
    93ee:	f85d fb04 	ldr.w	pc, [sp], #4
    93f2:	bf00      	nop
    93f4:	1fff9174 	.word	0x1fff9174
    93f8:	1fff9170 	.word	0x1fff9170

000093fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41(void)
{
    93fc:	b500      	push	{lr}
    93fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9400:	f7f7 fc16 	bl	c30 <Sys_GetCoreID>
    9404:	4603      	mov	r3, r0
    9406:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId]--;
    9408:	4a0d      	ldr	r2, [pc, #52]	; (9440 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x44>)
    940a:	9b01      	ldr	r3, [sp, #4]
    940c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9410:	1e5a      	subs	r2, r3, #1
    9412:	490b      	ldr	r1, [pc, #44]	; (9440 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x44>)
    9414:	9b01      	ldr	r3, [sp, #4]
    9416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
    941a:	4a0a      	ldr	r2, [pc, #40]	; (9444 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x48>)
    941c:	9b01      	ldr	r3, [sp, #4]
    941e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9422:	f003 0301 	and.w	r3, r3, #1
    9426:	2b00      	cmp	r3, #0
    9428:	d106      	bne.n	9438 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x3c>
    942a:	4a05      	ldr	r2, [pc, #20]	; (9440 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x44>)
    942c:	9b01      	ldr	r3, [sp, #4]
    942e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9432:	2b00      	cmp	r3, #0
    9434:	d100      	bne.n	9438 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9436:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9438:	bf00      	nop
    943a:	b003      	add	sp, #12
    943c:	f85d fb04 	ldr.w	pc, [sp], #4
    9440:	1fff9174 	.word	0x1fff9174
    9444:	1fff9170 	.word	0x1fff9170

00009448 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42(void)
{
    9448:	b500      	push	{lr}
    944a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    944c:	f7f7 fbf0 	bl	c30 <Sys_GetCoreID>
    9450:	4603      	mov	r3, r0
    9452:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId])
    9454:	4a10      	ldr	r2, [pc, #64]	; (9498 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x50>)
    9456:	9b01      	ldr	r3, [sp, #4]
    9458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    945c:	2b00      	cmp	r3, #0
    945e:	d10d      	bne.n	947c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9460:	f7f7 fb05 	bl	a6e <Gpt_schm_read_msr>
    9464:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9466:	9b00      	ldr	r3, [sp, #0]
    9468:	f003 0301 	and.w	r3, r3, #1
    946c:	2b00      	cmp	r3, #0
    946e:	d100      	bne.n	9472 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9470:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_42[u32CoreId] = msr;
    9472:	490a      	ldr	r1, [pc, #40]	; (949c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x54>)
    9474:	9b01      	ldr	r3, [sp, #4]
    9476:	9a00      	ldr	r2, [sp, #0]
    9478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId]++;
    947c:	4a06      	ldr	r2, [pc, #24]	; (9498 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x50>)
    947e:	9b01      	ldr	r3, [sp, #4]
    9480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9484:	1c5a      	adds	r2, r3, #1
    9486:	4904      	ldr	r1, [pc, #16]	; (9498 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_42+0x50>)
    9488:	9b01      	ldr	r3, [sp, #4]
    948a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    948e:	bf00      	nop
    9490:	b003      	add	sp, #12
    9492:	f85d fb04 	ldr.w	pc, [sp], #4
    9496:	bf00      	nop
    9498:	1fff917c 	.word	0x1fff917c
    949c:	1fff9178 	.word	0x1fff9178

000094a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42(void)
{
    94a0:	b500      	push	{lr}
    94a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    94a4:	f7f7 fbc4 	bl	c30 <Sys_GetCoreID>
    94a8:	4603      	mov	r3, r0
    94aa:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId]--;
    94ac:	4a0d      	ldr	r2, [pc, #52]	; (94e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x44>)
    94ae:	9b01      	ldr	r3, [sp, #4]
    94b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94b4:	1e5a      	subs	r2, r3, #1
    94b6:	490b      	ldr	r1, [pc, #44]	; (94e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x44>)
    94b8:	9b01      	ldr	r3, [sp, #4]
    94ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
    94be:	4a0a      	ldr	r2, [pc, #40]	; (94e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x48>)
    94c0:	9b01      	ldr	r3, [sp, #4]
    94c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94c6:	f003 0301 	and.w	r3, r3, #1
    94ca:	2b00      	cmp	r3, #0
    94cc:	d106      	bne.n	94dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x3c>
    94ce:	4a05      	ldr	r2, [pc, #20]	; (94e4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x44>)
    94d0:	9b01      	ldr	r3, [sp, #4]
    94d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94d6:	2b00      	cmp	r3, #0
    94d8:	d100      	bne.n	94dc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    94da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    94dc:	bf00      	nop
    94de:	b003      	add	sp, #12
    94e0:	f85d fb04 	ldr.w	pc, [sp], #4
    94e4:	1fff917c 	.word	0x1fff917c
    94e8:	1fff9178 	.word	0x1fff9178

000094ec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43(void)
{
    94ec:	b500      	push	{lr}
    94ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    94f0:	f7f7 fb9e 	bl	c30 <Sys_GetCoreID>
    94f4:	4603      	mov	r3, r0
    94f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId])
    94f8:	4a10      	ldr	r2, [pc, #64]	; (953c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x50>)
    94fa:	9b01      	ldr	r3, [sp, #4]
    94fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9500:	2b00      	cmp	r3, #0
    9502:	d10d      	bne.n	9520 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9504:	f7f7 fab3 	bl	a6e <Gpt_schm_read_msr>
    9508:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    950a:	9b00      	ldr	r3, [sp, #0]
    950c:	f003 0301 	and.w	r3, r3, #1
    9510:	2b00      	cmp	r3, #0
    9512:	d100      	bne.n	9516 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9514:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_43[u32CoreId] = msr;
    9516:	490a      	ldr	r1, [pc, #40]	; (9540 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x54>)
    9518:	9b01      	ldr	r3, [sp, #4]
    951a:	9a00      	ldr	r2, [sp, #0]
    951c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId]++;
    9520:	4a06      	ldr	r2, [pc, #24]	; (953c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x50>)
    9522:	9b01      	ldr	r3, [sp, #4]
    9524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9528:	1c5a      	adds	r2, r3, #1
    952a:	4904      	ldr	r1, [pc, #16]	; (953c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_43+0x50>)
    952c:	9b01      	ldr	r3, [sp, #4]
    952e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9532:	bf00      	nop
    9534:	b003      	add	sp, #12
    9536:	f85d fb04 	ldr.w	pc, [sp], #4
    953a:	bf00      	nop
    953c:	1fff9184 	.word	0x1fff9184
    9540:	1fff9180 	.word	0x1fff9180

00009544 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43(void)
{
    9544:	b500      	push	{lr}
    9546:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9548:	f7f7 fb72 	bl	c30 <Sys_GetCoreID>
    954c:	4603      	mov	r3, r0
    954e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId]--;
    9550:	4a0d      	ldr	r2, [pc, #52]	; (9588 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x44>)
    9552:	9b01      	ldr	r3, [sp, #4]
    9554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9558:	1e5a      	subs	r2, r3, #1
    955a:	490b      	ldr	r1, [pc, #44]	; (9588 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x44>)
    955c:	9b01      	ldr	r3, [sp, #4]
    955e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
    9562:	4a0a      	ldr	r2, [pc, #40]	; (958c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x48>)
    9564:	9b01      	ldr	r3, [sp, #4]
    9566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    956a:	f003 0301 	and.w	r3, r3, #1
    956e:	2b00      	cmp	r3, #0
    9570:	d106      	bne.n	9580 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x3c>
    9572:	4a05      	ldr	r2, [pc, #20]	; (9588 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x44>)
    9574:	9b01      	ldr	r3, [sp, #4]
    9576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    957a:	2b00      	cmp	r3, #0
    957c:	d100      	bne.n	9580 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    957e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9580:	bf00      	nop
    9582:	b003      	add	sp, #12
    9584:	f85d fb04 	ldr.w	pc, [sp], #4
    9588:	1fff9184 	.word	0x1fff9184
    958c:	1fff9180 	.word	0x1fff9180

00009590 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44(void)
{
    9590:	b500      	push	{lr}
    9592:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9594:	f7f7 fb4c 	bl	c30 <Sys_GetCoreID>
    9598:	4603      	mov	r3, r0
    959a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId])
    959c:	4a10      	ldr	r2, [pc, #64]	; (95e0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x50>)
    959e:	9b01      	ldr	r3, [sp, #4]
    95a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95a4:	2b00      	cmp	r3, #0
    95a6:	d10d      	bne.n	95c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    95a8:	f7f7 fa61 	bl	a6e <Gpt_schm_read_msr>
    95ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    95ae:	9b00      	ldr	r3, [sp, #0]
    95b0:	f003 0301 	and.w	r3, r3, #1
    95b4:	2b00      	cmp	r3, #0
    95b6:	d100      	bne.n	95ba <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    95b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_44[u32CoreId] = msr;
    95ba:	490a      	ldr	r1, [pc, #40]	; (95e4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x54>)
    95bc:	9b01      	ldr	r3, [sp, #4]
    95be:	9a00      	ldr	r2, [sp, #0]
    95c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId]++;
    95c4:	4a06      	ldr	r2, [pc, #24]	; (95e0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x50>)
    95c6:	9b01      	ldr	r3, [sp, #4]
    95c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95cc:	1c5a      	adds	r2, r3, #1
    95ce:	4904      	ldr	r1, [pc, #16]	; (95e0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_44+0x50>)
    95d0:	9b01      	ldr	r3, [sp, #4]
    95d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    95d6:	bf00      	nop
    95d8:	b003      	add	sp, #12
    95da:	f85d fb04 	ldr.w	pc, [sp], #4
    95de:	bf00      	nop
    95e0:	1fff918c 	.word	0x1fff918c
    95e4:	1fff9188 	.word	0x1fff9188

000095e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44(void)
{
    95e8:	b500      	push	{lr}
    95ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    95ec:	f7f7 fb20 	bl	c30 <Sys_GetCoreID>
    95f0:	4603      	mov	r3, r0
    95f2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId]--;
    95f4:	4a0d      	ldr	r2, [pc, #52]	; (962c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x44>)
    95f6:	9b01      	ldr	r3, [sp, #4]
    95f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95fc:	1e5a      	subs	r2, r3, #1
    95fe:	490b      	ldr	r1, [pc, #44]	; (962c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x44>)
    9600:	9b01      	ldr	r3, [sp, #4]
    9602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
    9606:	4a0a      	ldr	r2, [pc, #40]	; (9630 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x48>)
    9608:	9b01      	ldr	r3, [sp, #4]
    960a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    960e:	f003 0301 	and.w	r3, r3, #1
    9612:	2b00      	cmp	r3, #0
    9614:	d106      	bne.n	9624 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x3c>
    9616:	4a05      	ldr	r2, [pc, #20]	; (962c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x44>)
    9618:	9b01      	ldr	r3, [sp, #4]
    961a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    961e:	2b00      	cmp	r3, #0
    9620:	d100      	bne.n	9624 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9622:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9624:	bf00      	nop
    9626:	b003      	add	sp, #12
    9628:	f85d fb04 	ldr.w	pc, [sp], #4
    962c:	1fff918c 	.word	0x1fff918c
    9630:	1fff9188 	.word	0x1fff9188

00009634 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45(void)
{
    9634:	b500      	push	{lr}
    9636:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9638:	f7f7 fafa 	bl	c30 <Sys_GetCoreID>
    963c:	4603      	mov	r3, r0
    963e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId])
    9640:	4a10      	ldr	r2, [pc, #64]	; (9684 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x50>)
    9642:	9b01      	ldr	r3, [sp, #4]
    9644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9648:	2b00      	cmp	r3, #0
    964a:	d10d      	bne.n	9668 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    964c:	f7f7 fa0f 	bl	a6e <Gpt_schm_read_msr>
    9650:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9652:	9b00      	ldr	r3, [sp, #0]
    9654:	f003 0301 	and.w	r3, r3, #1
    9658:	2b00      	cmp	r3, #0
    965a:	d100      	bne.n	965e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    965c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_45[u32CoreId] = msr;
    965e:	490a      	ldr	r1, [pc, #40]	; (9688 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x54>)
    9660:	9b01      	ldr	r3, [sp, #4]
    9662:	9a00      	ldr	r2, [sp, #0]
    9664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId]++;
    9668:	4a06      	ldr	r2, [pc, #24]	; (9684 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x50>)
    966a:	9b01      	ldr	r3, [sp, #4]
    966c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9670:	1c5a      	adds	r2, r3, #1
    9672:	4904      	ldr	r1, [pc, #16]	; (9684 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_45+0x50>)
    9674:	9b01      	ldr	r3, [sp, #4]
    9676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    967a:	bf00      	nop
    967c:	b003      	add	sp, #12
    967e:	f85d fb04 	ldr.w	pc, [sp], #4
    9682:	bf00      	nop
    9684:	1fff9194 	.word	0x1fff9194
    9688:	1fff9190 	.word	0x1fff9190

0000968c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45(void)
{
    968c:	b500      	push	{lr}
    968e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9690:	f7f7 face 	bl	c30 <Sys_GetCoreID>
    9694:	4603      	mov	r3, r0
    9696:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId]--;
    9698:	4a0d      	ldr	r2, [pc, #52]	; (96d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x44>)
    969a:	9b01      	ldr	r3, [sp, #4]
    969c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96a0:	1e5a      	subs	r2, r3, #1
    96a2:	490b      	ldr	r1, [pc, #44]	; (96d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x44>)
    96a4:	9b01      	ldr	r3, [sp, #4]
    96a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
    96aa:	4a0a      	ldr	r2, [pc, #40]	; (96d4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x48>)
    96ac:	9b01      	ldr	r3, [sp, #4]
    96ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96b2:	f003 0301 	and.w	r3, r3, #1
    96b6:	2b00      	cmp	r3, #0
    96b8:	d106      	bne.n	96c8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x3c>
    96ba:	4a05      	ldr	r2, [pc, #20]	; (96d0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x44>)
    96bc:	9b01      	ldr	r3, [sp, #4]
    96be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96c2:	2b00      	cmp	r3, #0
    96c4:	d100      	bne.n	96c8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    96c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    96c8:	bf00      	nop
    96ca:	b003      	add	sp, #12
    96cc:	f85d fb04 	ldr.w	pc, [sp], #4
    96d0:	1fff9194 	.word	0x1fff9194
    96d4:	1fff9190 	.word	0x1fff9190

000096d8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46(void)
{
    96d8:	b500      	push	{lr}
    96da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    96dc:	f7f7 faa8 	bl	c30 <Sys_GetCoreID>
    96e0:	4603      	mov	r3, r0
    96e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId])
    96e4:	4a10      	ldr	r2, [pc, #64]	; (9728 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x50>)
    96e6:	9b01      	ldr	r3, [sp, #4]
    96e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96ec:	2b00      	cmp	r3, #0
    96ee:	d10d      	bne.n	970c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    96f0:	f7f7 f9bd 	bl	a6e <Gpt_schm_read_msr>
    96f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    96f6:	9b00      	ldr	r3, [sp, #0]
    96f8:	f003 0301 	and.w	r3, r3, #1
    96fc:	2b00      	cmp	r3, #0
    96fe:	d100      	bne.n	9702 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9700:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_46[u32CoreId] = msr;
    9702:	490a      	ldr	r1, [pc, #40]	; (972c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x54>)
    9704:	9b01      	ldr	r3, [sp, #4]
    9706:	9a00      	ldr	r2, [sp, #0]
    9708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId]++;
    970c:	4a06      	ldr	r2, [pc, #24]	; (9728 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x50>)
    970e:	9b01      	ldr	r3, [sp, #4]
    9710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9714:	1c5a      	adds	r2, r3, #1
    9716:	4904      	ldr	r1, [pc, #16]	; (9728 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_46+0x50>)
    9718:	9b01      	ldr	r3, [sp, #4]
    971a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    971e:	bf00      	nop
    9720:	b003      	add	sp, #12
    9722:	f85d fb04 	ldr.w	pc, [sp], #4
    9726:	bf00      	nop
    9728:	1fff919c 	.word	0x1fff919c
    972c:	1fff9198 	.word	0x1fff9198

00009730 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46(void)
{
    9730:	b500      	push	{lr}
    9732:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9734:	f7f7 fa7c 	bl	c30 <Sys_GetCoreID>
    9738:	4603      	mov	r3, r0
    973a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId]--;
    973c:	4a0d      	ldr	r2, [pc, #52]	; (9774 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x44>)
    973e:	9b01      	ldr	r3, [sp, #4]
    9740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9744:	1e5a      	subs	r2, r3, #1
    9746:	490b      	ldr	r1, [pc, #44]	; (9774 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x44>)
    9748:	9b01      	ldr	r3, [sp, #4]
    974a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
    974e:	4a0a      	ldr	r2, [pc, #40]	; (9778 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x48>)
    9750:	9b01      	ldr	r3, [sp, #4]
    9752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9756:	f003 0301 	and.w	r3, r3, #1
    975a:	2b00      	cmp	r3, #0
    975c:	d106      	bne.n	976c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x3c>
    975e:	4a05      	ldr	r2, [pc, #20]	; (9774 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x44>)
    9760:	9b01      	ldr	r3, [sp, #4]
    9762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9766:	2b00      	cmp	r3, #0
    9768:	d100      	bne.n	976c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    976a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    976c:	bf00      	nop
    976e:	b003      	add	sp, #12
    9770:	f85d fb04 	ldr.w	pc, [sp], #4
    9774:	1fff919c 	.word	0x1fff919c
    9778:	1fff9198 	.word	0x1fff9198

0000977c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50(void)
{
    977c:	b500      	push	{lr}
    977e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9780:	f7f7 fa56 	bl	c30 <Sys_GetCoreID>
    9784:	4603      	mov	r3, r0
    9786:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId])
    9788:	4a10      	ldr	r2, [pc, #64]	; (97cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x50>)
    978a:	9b01      	ldr	r3, [sp, #4]
    978c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9790:	2b00      	cmp	r3, #0
    9792:	d10d      	bne.n	97b0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9794:	f7f7 f96b 	bl	a6e <Gpt_schm_read_msr>
    9798:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    979a:	9b00      	ldr	r3, [sp, #0]
    979c:	f003 0301 	and.w	r3, r3, #1
    97a0:	2b00      	cmp	r3, #0
    97a2:	d100      	bne.n	97a6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    97a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_50[u32CoreId] = msr;
    97a6:	490a      	ldr	r1, [pc, #40]	; (97d0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x54>)
    97a8:	9b01      	ldr	r3, [sp, #4]
    97aa:	9a00      	ldr	r2, [sp, #0]
    97ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId]++;
    97b0:	4a06      	ldr	r2, [pc, #24]	; (97cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x50>)
    97b2:	9b01      	ldr	r3, [sp, #4]
    97b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97b8:	1c5a      	adds	r2, r3, #1
    97ba:	4904      	ldr	r1, [pc, #16]	; (97cc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_50+0x50>)
    97bc:	9b01      	ldr	r3, [sp, #4]
    97be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    97c2:	bf00      	nop
    97c4:	b003      	add	sp, #12
    97c6:	f85d fb04 	ldr.w	pc, [sp], #4
    97ca:	bf00      	nop
    97cc:	1fff91a4 	.word	0x1fff91a4
    97d0:	1fff91a0 	.word	0x1fff91a0

000097d4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50(void)
{
    97d4:	b500      	push	{lr}
    97d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    97d8:	f7f7 fa2a 	bl	c30 <Sys_GetCoreID>
    97dc:	4603      	mov	r3, r0
    97de:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId]--;
    97e0:	4a0d      	ldr	r2, [pc, #52]	; (9818 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x44>)
    97e2:	9b01      	ldr	r3, [sp, #4]
    97e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97e8:	1e5a      	subs	r2, r3, #1
    97ea:	490b      	ldr	r1, [pc, #44]	; (9818 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x44>)
    97ec:	9b01      	ldr	r3, [sp, #4]
    97ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
    97f2:	4a0a      	ldr	r2, [pc, #40]	; (981c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x48>)
    97f4:	9b01      	ldr	r3, [sp, #4]
    97f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97fa:	f003 0301 	and.w	r3, r3, #1
    97fe:	2b00      	cmp	r3, #0
    9800:	d106      	bne.n	9810 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x3c>
    9802:	4a05      	ldr	r2, [pc, #20]	; (9818 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x44>)
    9804:	9b01      	ldr	r3, [sp, #4]
    9806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    980a:	2b00      	cmp	r3, #0
    980c:	d100      	bne.n	9810 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    980e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9810:	bf00      	nop
    9812:	b003      	add	sp, #12
    9814:	f85d fb04 	ldr.w	pc, [sp], #4
    9818:	1fff91a4 	.word	0x1fff91a4
    981c:	1fff91a0 	.word	0x1fff91a0

00009820 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51(void)
{
    9820:	b500      	push	{lr}
    9822:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9824:	f7f7 fa04 	bl	c30 <Sys_GetCoreID>
    9828:	4603      	mov	r3, r0
    982a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId])
    982c:	4a10      	ldr	r2, [pc, #64]	; (9870 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x50>)
    982e:	9b01      	ldr	r3, [sp, #4]
    9830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9834:	2b00      	cmp	r3, #0
    9836:	d10d      	bne.n	9854 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9838:	f7f7 f919 	bl	a6e <Gpt_schm_read_msr>
    983c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    983e:	9b00      	ldr	r3, [sp, #0]
    9840:	f003 0301 	and.w	r3, r3, #1
    9844:	2b00      	cmp	r3, #0
    9846:	d100      	bne.n	984a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9848:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_51[u32CoreId] = msr;
    984a:	490a      	ldr	r1, [pc, #40]	; (9874 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x54>)
    984c:	9b01      	ldr	r3, [sp, #4]
    984e:	9a00      	ldr	r2, [sp, #0]
    9850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId]++;
    9854:	4a06      	ldr	r2, [pc, #24]	; (9870 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x50>)
    9856:	9b01      	ldr	r3, [sp, #4]
    9858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    985c:	1c5a      	adds	r2, r3, #1
    985e:	4904      	ldr	r1, [pc, #16]	; (9870 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_51+0x50>)
    9860:	9b01      	ldr	r3, [sp, #4]
    9862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9866:	bf00      	nop
    9868:	b003      	add	sp, #12
    986a:	f85d fb04 	ldr.w	pc, [sp], #4
    986e:	bf00      	nop
    9870:	1fff91ac 	.word	0x1fff91ac
    9874:	1fff91a8 	.word	0x1fff91a8

00009878 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51(void)
{
    9878:	b500      	push	{lr}
    987a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    987c:	f7f7 f9d8 	bl	c30 <Sys_GetCoreID>
    9880:	4603      	mov	r3, r0
    9882:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId]--;
    9884:	4a0d      	ldr	r2, [pc, #52]	; (98bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x44>)
    9886:	9b01      	ldr	r3, [sp, #4]
    9888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    988c:	1e5a      	subs	r2, r3, #1
    988e:	490b      	ldr	r1, [pc, #44]	; (98bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x44>)
    9890:	9b01      	ldr	r3, [sp, #4]
    9892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
    9896:	4a0a      	ldr	r2, [pc, #40]	; (98c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x48>)
    9898:	9b01      	ldr	r3, [sp, #4]
    989a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    989e:	f003 0301 	and.w	r3, r3, #1
    98a2:	2b00      	cmp	r3, #0
    98a4:	d106      	bne.n	98b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x3c>
    98a6:	4a05      	ldr	r2, [pc, #20]	; (98bc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x44>)
    98a8:	9b01      	ldr	r3, [sp, #4]
    98aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98ae:	2b00      	cmp	r3, #0
    98b0:	d100      	bne.n	98b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    98b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    98b4:	bf00      	nop
    98b6:	b003      	add	sp, #12
    98b8:	f85d fb04 	ldr.w	pc, [sp], #4
    98bc:	1fff91ac 	.word	0x1fff91ac
    98c0:	1fff91a8 	.word	0x1fff91a8

000098c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52(void)
{
    98c4:	b500      	push	{lr}
    98c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    98c8:	f7f7 f9b2 	bl	c30 <Sys_GetCoreID>
    98cc:	4603      	mov	r3, r0
    98ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId])
    98d0:	4a10      	ldr	r2, [pc, #64]	; (9914 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x50>)
    98d2:	9b01      	ldr	r3, [sp, #4]
    98d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98d8:	2b00      	cmp	r3, #0
    98da:	d10d      	bne.n	98f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    98dc:	f7f7 f8c7 	bl	a6e <Gpt_schm_read_msr>
    98e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    98e2:	9b00      	ldr	r3, [sp, #0]
    98e4:	f003 0301 	and.w	r3, r3, #1
    98e8:	2b00      	cmp	r3, #0
    98ea:	d100      	bne.n	98ee <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    98ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_52[u32CoreId] = msr;
    98ee:	490a      	ldr	r1, [pc, #40]	; (9918 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x54>)
    98f0:	9b01      	ldr	r3, [sp, #4]
    98f2:	9a00      	ldr	r2, [sp, #0]
    98f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId]++;
    98f8:	4a06      	ldr	r2, [pc, #24]	; (9914 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x50>)
    98fa:	9b01      	ldr	r3, [sp, #4]
    98fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9900:	1c5a      	adds	r2, r3, #1
    9902:	4904      	ldr	r1, [pc, #16]	; (9914 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_52+0x50>)
    9904:	9b01      	ldr	r3, [sp, #4]
    9906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    990a:	bf00      	nop
    990c:	b003      	add	sp, #12
    990e:	f85d fb04 	ldr.w	pc, [sp], #4
    9912:	bf00      	nop
    9914:	1fff91b4 	.word	0x1fff91b4
    9918:	1fff91b0 	.word	0x1fff91b0

0000991c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52(void)
{
    991c:	b500      	push	{lr}
    991e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9920:	f7f7 f986 	bl	c30 <Sys_GetCoreID>
    9924:	4603      	mov	r3, r0
    9926:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId]--;
    9928:	4a0d      	ldr	r2, [pc, #52]	; (9960 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x44>)
    992a:	9b01      	ldr	r3, [sp, #4]
    992c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9930:	1e5a      	subs	r2, r3, #1
    9932:	490b      	ldr	r1, [pc, #44]	; (9960 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x44>)
    9934:	9b01      	ldr	r3, [sp, #4]
    9936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_52[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_52[u32CoreId]))         /*if interrupts were enabled*/
    993a:	4a0a      	ldr	r2, [pc, #40]	; (9964 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x48>)
    993c:	9b01      	ldr	r3, [sp, #4]
    993e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9942:	f003 0301 	and.w	r3, r3, #1
    9946:	2b00      	cmp	r3, #0
    9948:	d106      	bne.n	9958 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x3c>
    994a:	4a05      	ldr	r2, [pc, #20]	; (9960 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x44>)
    994c:	9b01      	ldr	r3, [sp, #4]
    994e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9952:	2b00      	cmp	r3, #0
    9954:	d100      	bne.n	9958 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_52+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9956:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9958:	bf00      	nop
    995a:	b003      	add	sp, #12
    995c:	f85d fb04 	ldr.w	pc, [sp], #4
    9960:	1fff91b4 	.word	0x1fff91b4
    9964:	1fff91b0 	.word	0x1fff91b0

00009968 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53(void)
{
    9968:	b500      	push	{lr}
    996a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    996c:	f7f7 f960 	bl	c30 <Sys_GetCoreID>
    9970:	4603      	mov	r3, r0
    9972:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId])
    9974:	4a10      	ldr	r2, [pc, #64]	; (99b8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x50>)
    9976:	9b01      	ldr	r3, [sp, #4]
    9978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    997c:	2b00      	cmp	r3, #0
    997e:	d10d      	bne.n	999c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9980:	f7f7 f875 	bl	a6e <Gpt_schm_read_msr>
    9984:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9986:	9b00      	ldr	r3, [sp, #0]
    9988:	f003 0301 	and.w	r3, r3, #1
    998c:	2b00      	cmp	r3, #0
    998e:	d100      	bne.n	9992 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9990:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_53[u32CoreId] = msr;
    9992:	490a      	ldr	r1, [pc, #40]	; (99bc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x54>)
    9994:	9b01      	ldr	r3, [sp, #4]
    9996:	9a00      	ldr	r2, [sp, #0]
    9998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId]++;
    999c:	4a06      	ldr	r2, [pc, #24]	; (99b8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x50>)
    999e:	9b01      	ldr	r3, [sp, #4]
    99a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99a4:	1c5a      	adds	r2, r3, #1
    99a6:	4904      	ldr	r1, [pc, #16]	; (99b8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_53+0x50>)
    99a8:	9b01      	ldr	r3, [sp, #4]
    99aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    99ae:	bf00      	nop
    99b0:	b003      	add	sp, #12
    99b2:	f85d fb04 	ldr.w	pc, [sp], #4
    99b6:	bf00      	nop
    99b8:	1fff91bc 	.word	0x1fff91bc
    99bc:	1fff91b8 	.word	0x1fff91b8

000099c0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53(void)
{
    99c0:	b500      	push	{lr}
    99c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    99c4:	f7f7 f934 	bl	c30 <Sys_GetCoreID>
    99c8:	4603      	mov	r3, r0
    99ca:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId]--;
    99cc:	4a0d      	ldr	r2, [pc, #52]	; (9a04 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x44>)
    99ce:	9b01      	ldr	r3, [sp, #4]
    99d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99d4:	1e5a      	subs	r2, r3, #1
    99d6:	490b      	ldr	r1, [pc, #44]	; (9a04 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x44>)
    99d8:	9b01      	ldr	r3, [sp, #4]
    99da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_53[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_53[u32CoreId]))         /*if interrupts were enabled*/
    99de:	4a0a      	ldr	r2, [pc, #40]	; (9a08 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x48>)
    99e0:	9b01      	ldr	r3, [sp, #4]
    99e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99e6:	f003 0301 	and.w	r3, r3, #1
    99ea:	2b00      	cmp	r3, #0
    99ec:	d106      	bne.n	99fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x3c>
    99ee:	4a05      	ldr	r2, [pc, #20]	; (9a04 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x44>)
    99f0:	9b01      	ldr	r3, [sp, #4]
    99f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99f6:	2b00      	cmp	r3, #0
    99f8:	d100      	bne.n	99fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_53+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    99fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    99fc:	bf00      	nop
    99fe:	b003      	add	sp, #12
    9a00:	f85d fb04 	ldr.w	pc, [sp], #4
    9a04:	1fff91bc 	.word	0x1fff91bc
    9a08:	1fff91b8 	.word	0x1fff91b8

00009a0c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54(void)
{
    9a0c:	b500      	push	{lr}
    9a0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a10:	f7f7 f90e 	bl	c30 <Sys_GetCoreID>
    9a14:	4603      	mov	r3, r0
    9a16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId])
    9a18:	4a10      	ldr	r2, [pc, #64]	; (9a5c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x50>)
    9a1a:	9b01      	ldr	r3, [sp, #4]
    9a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a20:	2b00      	cmp	r3, #0
    9a22:	d10d      	bne.n	9a40 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9a24:	f7f7 f823 	bl	a6e <Gpt_schm_read_msr>
    9a28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9a2a:	9b00      	ldr	r3, [sp, #0]
    9a2c:	f003 0301 	and.w	r3, r3, #1
    9a30:	2b00      	cmp	r3, #0
    9a32:	d100      	bne.n	9a36 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9a34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_54[u32CoreId] = msr;
    9a36:	490a      	ldr	r1, [pc, #40]	; (9a60 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x54>)
    9a38:	9b01      	ldr	r3, [sp, #4]
    9a3a:	9a00      	ldr	r2, [sp, #0]
    9a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId]++;
    9a40:	4a06      	ldr	r2, [pc, #24]	; (9a5c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x50>)
    9a42:	9b01      	ldr	r3, [sp, #4]
    9a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a48:	1c5a      	adds	r2, r3, #1
    9a4a:	4904      	ldr	r1, [pc, #16]	; (9a5c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_54+0x50>)
    9a4c:	9b01      	ldr	r3, [sp, #4]
    9a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9a52:	bf00      	nop
    9a54:	b003      	add	sp, #12
    9a56:	f85d fb04 	ldr.w	pc, [sp], #4
    9a5a:	bf00      	nop
    9a5c:	1fff91c4 	.word	0x1fff91c4
    9a60:	1fff91c0 	.word	0x1fff91c0

00009a64 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54(void)
{
    9a64:	b500      	push	{lr}
    9a66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a68:	f7f7 f8e2 	bl	c30 <Sys_GetCoreID>
    9a6c:	4603      	mov	r3, r0
    9a6e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId]--;
    9a70:	4a0d      	ldr	r2, [pc, #52]	; (9aa8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x44>)
    9a72:	9b01      	ldr	r3, [sp, #4]
    9a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a78:	1e5a      	subs	r2, r3, #1
    9a7a:	490b      	ldr	r1, [pc, #44]	; (9aa8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x44>)
    9a7c:	9b01      	ldr	r3, [sp, #4]
    9a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
    9a82:	4a0a      	ldr	r2, [pc, #40]	; (9aac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x48>)
    9a84:	9b01      	ldr	r3, [sp, #4]
    9a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a8a:	f003 0301 	and.w	r3, r3, #1
    9a8e:	2b00      	cmp	r3, #0
    9a90:	d106      	bne.n	9aa0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x3c>
    9a92:	4a05      	ldr	r2, [pc, #20]	; (9aa8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x44>)
    9a94:	9b01      	ldr	r3, [sp, #4]
    9a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a9a:	2b00      	cmp	r3, #0
    9a9c:	d100      	bne.n	9aa0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9a9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9aa0:	bf00      	nop
    9aa2:	b003      	add	sp, #12
    9aa4:	f85d fb04 	ldr.w	pc, [sp], #4
    9aa8:	1fff91c4 	.word	0x1fff91c4
    9aac:	1fff91c0 	.word	0x1fff91c0

00009ab0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55(void)
{
    9ab0:	b500      	push	{lr}
    9ab2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9ab4:	f7f7 f8bc 	bl	c30 <Sys_GetCoreID>
    9ab8:	4603      	mov	r3, r0
    9aba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId])
    9abc:	4a10      	ldr	r2, [pc, #64]	; (9b00 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x50>)
    9abe:	9b01      	ldr	r3, [sp, #4]
    9ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ac4:	2b00      	cmp	r3, #0
    9ac6:	d10d      	bne.n	9ae4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9ac8:	f7f6 ffd1 	bl	a6e <Gpt_schm_read_msr>
    9acc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9ace:	9b00      	ldr	r3, [sp, #0]
    9ad0:	f003 0301 	and.w	r3, r3, #1
    9ad4:	2b00      	cmp	r3, #0
    9ad6:	d100      	bne.n	9ada <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9ad8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_55[u32CoreId] = msr;
    9ada:	490a      	ldr	r1, [pc, #40]	; (9b04 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x54>)
    9adc:	9b01      	ldr	r3, [sp, #4]
    9ade:	9a00      	ldr	r2, [sp, #0]
    9ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId]++;
    9ae4:	4a06      	ldr	r2, [pc, #24]	; (9b00 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x50>)
    9ae6:	9b01      	ldr	r3, [sp, #4]
    9ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aec:	1c5a      	adds	r2, r3, #1
    9aee:	4904      	ldr	r1, [pc, #16]	; (9b00 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_55+0x50>)
    9af0:	9b01      	ldr	r3, [sp, #4]
    9af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9af6:	bf00      	nop
    9af8:	b003      	add	sp, #12
    9afa:	f85d fb04 	ldr.w	pc, [sp], #4
    9afe:	bf00      	nop
    9b00:	1fff91cc 	.word	0x1fff91cc
    9b04:	1fff91c8 	.word	0x1fff91c8

00009b08 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55(void)
{
    9b08:	b500      	push	{lr}
    9b0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b0c:	f7f7 f890 	bl	c30 <Sys_GetCoreID>
    9b10:	4603      	mov	r3, r0
    9b12:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId]--;
    9b14:	4a0d      	ldr	r2, [pc, #52]	; (9b4c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x44>)
    9b16:	9b01      	ldr	r3, [sp, #4]
    9b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b1c:	1e5a      	subs	r2, r3, #1
    9b1e:	490b      	ldr	r1, [pc, #44]	; (9b4c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x44>)
    9b20:	9b01      	ldr	r3, [sp, #4]
    9b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
    9b26:	4a0a      	ldr	r2, [pc, #40]	; (9b50 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x48>)
    9b28:	9b01      	ldr	r3, [sp, #4]
    9b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b2e:	f003 0301 	and.w	r3, r3, #1
    9b32:	2b00      	cmp	r3, #0
    9b34:	d106      	bne.n	9b44 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x3c>
    9b36:	4a05      	ldr	r2, [pc, #20]	; (9b4c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x44>)
    9b38:	9b01      	ldr	r3, [sp, #4]
    9b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b3e:	2b00      	cmp	r3, #0
    9b40:	d100      	bne.n	9b44 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9b42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9b44:	bf00      	nop
    9b46:	b003      	add	sp, #12
    9b48:	f85d fb04 	ldr.w	pc, [sp], #4
    9b4c:	1fff91cc 	.word	0x1fff91cc
    9b50:	1fff91c8 	.word	0x1fff91c8

00009b54 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56(void)
{
    9b54:	b500      	push	{lr}
    9b56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b58:	f7f7 f86a 	bl	c30 <Sys_GetCoreID>
    9b5c:	4603      	mov	r3, r0
    9b5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId])
    9b60:	4a10      	ldr	r2, [pc, #64]	; (9ba4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x50>)
    9b62:	9b01      	ldr	r3, [sp, #4]
    9b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b68:	2b00      	cmp	r3, #0
    9b6a:	d10d      	bne.n	9b88 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9b6c:	f7f6 ff7f 	bl	a6e <Gpt_schm_read_msr>
    9b70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9b72:	9b00      	ldr	r3, [sp, #0]
    9b74:	f003 0301 	and.w	r3, r3, #1
    9b78:	2b00      	cmp	r3, #0
    9b7a:	d100      	bne.n	9b7e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9b7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_56[u32CoreId] = msr;
    9b7e:	490a      	ldr	r1, [pc, #40]	; (9ba8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x54>)
    9b80:	9b01      	ldr	r3, [sp, #4]
    9b82:	9a00      	ldr	r2, [sp, #0]
    9b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId]++;
    9b88:	4a06      	ldr	r2, [pc, #24]	; (9ba4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x50>)
    9b8a:	9b01      	ldr	r3, [sp, #4]
    9b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b90:	1c5a      	adds	r2, r3, #1
    9b92:	4904      	ldr	r1, [pc, #16]	; (9ba4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_56+0x50>)
    9b94:	9b01      	ldr	r3, [sp, #4]
    9b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9b9a:	bf00      	nop
    9b9c:	b003      	add	sp, #12
    9b9e:	f85d fb04 	ldr.w	pc, [sp], #4
    9ba2:	bf00      	nop
    9ba4:	1fff91d4 	.word	0x1fff91d4
    9ba8:	1fff91d0 	.word	0x1fff91d0

00009bac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56(void)
{
    9bac:	b500      	push	{lr}
    9bae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9bb0:	f7f7 f83e 	bl	c30 <Sys_GetCoreID>
    9bb4:	4603      	mov	r3, r0
    9bb6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId]--;
    9bb8:	4a0d      	ldr	r2, [pc, #52]	; (9bf0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x44>)
    9bba:	9b01      	ldr	r3, [sp, #4]
    9bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bc0:	1e5a      	subs	r2, r3, #1
    9bc2:	490b      	ldr	r1, [pc, #44]	; (9bf0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x44>)
    9bc4:	9b01      	ldr	r3, [sp, #4]
    9bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
    9bca:	4a0a      	ldr	r2, [pc, #40]	; (9bf4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x48>)
    9bcc:	9b01      	ldr	r3, [sp, #4]
    9bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bd2:	f003 0301 	and.w	r3, r3, #1
    9bd6:	2b00      	cmp	r3, #0
    9bd8:	d106      	bne.n	9be8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x3c>
    9bda:	4a05      	ldr	r2, [pc, #20]	; (9bf0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x44>)
    9bdc:	9b01      	ldr	r3, [sp, #4]
    9bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9be2:	2b00      	cmp	r3, #0
    9be4:	d100      	bne.n	9be8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9be6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9be8:	bf00      	nop
    9bea:	b003      	add	sp, #12
    9bec:	f85d fb04 	ldr.w	pc, [sp], #4
    9bf0:	1fff91d4 	.word	0x1fff91d4
    9bf4:	1fff91d0 	.word	0x1fff91d0

00009bf8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60(void)
{
    9bf8:	b500      	push	{lr}
    9bfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9bfc:	f7f7 f818 	bl	c30 <Sys_GetCoreID>
    9c00:	4603      	mov	r3, r0
    9c02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId])
    9c04:	4a10      	ldr	r2, [pc, #64]	; (9c48 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x50>)
    9c06:	9b01      	ldr	r3, [sp, #4]
    9c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c0c:	2b00      	cmp	r3, #0
    9c0e:	d10d      	bne.n	9c2c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9c10:	f7f6 ff2d 	bl	a6e <Gpt_schm_read_msr>
    9c14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9c16:	9b00      	ldr	r3, [sp, #0]
    9c18:	f003 0301 	and.w	r3, r3, #1
    9c1c:	2b00      	cmp	r3, #0
    9c1e:	d100      	bne.n	9c22 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9c20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_60[u32CoreId] = msr;
    9c22:	490a      	ldr	r1, [pc, #40]	; (9c4c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x54>)
    9c24:	9b01      	ldr	r3, [sp, #4]
    9c26:	9a00      	ldr	r2, [sp, #0]
    9c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId]++;
    9c2c:	4a06      	ldr	r2, [pc, #24]	; (9c48 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x50>)
    9c2e:	9b01      	ldr	r3, [sp, #4]
    9c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c34:	1c5a      	adds	r2, r3, #1
    9c36:	4904      	ldr	r1, [pc, #16]	; (9c48 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_60+0x50>)
    9c38:	9b01      	ldr	r3, [sp, #4]
    9c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9c3e:	bf00      	nop
    9c40:	b003      	add	sp, #12
    9c42:	f85d fb04 	ldr.w	pc, [sp], #4
    9c46:	bf00      	nop
    9c48:	1fff91dc 	.word	0x1fff91dc
    9c4c:	1fff91d8 	.word	0x1fff91d8

00009c50 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60(void)
{
    9c50:	b500      	push	{lr}
    9c52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9c54:	f7f6 ffec 	bl	c30 <Sys_GetCoreID>
    9c58:	4603      	mov	r3, r0
    9c5a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId]--;
    9c5c:	4a0d      	ldr	r2, [pc, #52]	; (9c94 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x44>)
    9c5e:	9b01      	ldr	r3, [sp, #4]
    9c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c64:	1e5a      	subs	r2, r3, #1
    9c66:	490b      	ldr	r1, [pc, #44]	; (9c94 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x44>)
    9c68:	9b01      	ldr	r3, [sp, #4]
    9c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
    9c6e:	4a0a      	ldr	r2, [pc, #40]	; (9c98 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x48>)
    9c70:	9b01      	ldr	r3, [sp, #4]
    9c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c76:	f003 0301 	and.w	r3, r3, #1
    9c7a:	2b00      	cmp	r3, #0
    9c7c:	d106      	bne.n	9c8c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x3c>
    9c7e:	4a05      	ldr	r2, [pc, #20]	; (9c94 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x44>)
    9c80:	9b01      	ldr	r3, [sp, #4]
    9c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c86:	2b00      	cmp	r3, #0
    9c88:	d100      	bne.n	9c8c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9c8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9c8c:	bf00      	nop
    9c8e:	b003      	add	sp, #12
    9c90:	f85d fb04 	ldr.w	pc, [sp], #4
    9c94:	1fff91dc 	.word	0x1fff91dc
    9c98:	1fff91d8 	.word	0x1fff91d8

00009c9c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61(void)
{
    9c9c:	b500      	push	{lr}
    9c9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9ca0:	f7f6 ffc6 	bl	c30 <Sys_GetCoreID>
    9ca4:	4603      	mov	r3, r0
    9ca6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId])
    9ca8:	4a10      	ldr	r2, [pc, #64]	; (9cec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x50>)
    9caa:	9b01      	ldr	r3, [sp, #4]
    9cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cb0:	2b00      	cmp	r3, #0
    9cb2:	d10d      	bne.n	9cd0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9cb4:	f7f6 fedb 	bl	a6e <Gpt_schm_read_msr>
    9cb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9cba:	9b00      	ldr	r3, [sp, #0]
    9cbc:	f003 0301 	and.w	r3, r3, #1
    9cc0:	2b00      	cmp	r3, #0
    9cc2:	d100      	bne.n	9cc6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9cc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_61[u32CoreId] = msr;
    9cc6:	490a      	ldr	r1, [pc, #40]	; (9cf0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x54>)
    9cc8:	9b01      	ldr	r3, [sp, #4]
    9cca:	9a00      	ldr	r2, [sp, #0]
    9ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId]++;
    9cd0:	4a06      	ldr	r2, [pc, #24]	; (9cec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x50>)
    9cd2:	9b01      	ldr	r3, [sp, #4]
    9cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cd8:	1c5a      	adds	r2, r3, #1
    9cda:	4904      	ldr	r1, [pc, #16]	; (9cec <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_61+0x50>)
    9cdc:	9b01      	ldr	r3, [sp, #4]
    9cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9ce2:	bf00      	nop
    9ce4:	b003      	add	sp, #12
    9ce6:	f85d fb04 	ldr.w	pc, [sp], #4
    9cea:	bf00      	nop
    9cec:	1fff91e4 	.word	0x1fff91e4
    9cf0:	1fff91e0 	.word	0x1fff91e0

00009cf4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61(void)
{
    9cf4:	b500      	push	{lr}
    9cf6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9cf8:	f7f6 ff9a 	bl	c30 <Sys_GetCoreID>
    9cfc:	4603      	mov	r3, r0
    9cfe:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId]--;
    9d00:	4a0d      	ldr	r2, [pc, #52]	; (9d38 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x44>)
    9d02:	9b01      	ldr	r3, [sp, #4]
    9d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d08:	1e5a      	subs	r2, r3, #1
    9d0a:	490b      	ldr	r1, [pc, #44]	; (9d38 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x44>)
    9d0c:	9b01      	ldr	r3, [sp, #4]
    9d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
    9d12:	4a0a      	ldr	r2, [pc, #40]	; (9d3c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x48>)
    9d14:	9b01      	ldr	r3, [sp, #4]
    9d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d1a:	f003 0301 	and.w	r3, r3, #1
    9d1e:	2b00      	cmp	r3, #0
    9d20:	d106      	bne.n	9d30 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x3c>
    9d22:	4a05      	ldr	r2, [pc, #20]	; (9d38 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x44>)
    9d24:	9b01      	ldr	r3, [sp, #4]
    9d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d2a:	2b00      	cmp	r3, #0
    9d2c:	d100      	bne.n	9d30 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9d2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9d30:	bf00      	nop
    9d32:	b003      	add	sp, #12
    9d34:	f85d fb04 	ldr.w	pc, [sp], #4
    9d38:	1fff91e4 	.word	0x1fff91e4
    9d3c:	1fff91e0 	.word	0x1fff91e0

00009d40 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62(void)
{
    9d40:	b500      	push	{lr}
    9d42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9d44:	f7f6 ff74 	bl	c30 <Sys_GetCoreID>
    9d48:	4603      	mov	r3, r0
    9d4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId])
    9d4c:	4a10      	ldr	r2, [pc, #64]	; (9d90 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x50>)
    9d4e:	9b01      	ldr	r3, [sp, #4]
    9d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d54:	2b00      	cmp	r3, #0
    9d56:	d10d      	bne.n	9d74 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9d58:	f7f6 fe89 	bl	a6e <Gpt_schm_read_msr>
    9d5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9d5e:	9b00      	ldr	r3, [sp, #0]
    9d60:	f003 0301 	and.w	r3, r3, #1
    9d64:	2b00      	cmp	r3, #0
    9d66:	d100      	bne.n	9d6a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9d68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_62[u32CoreId] = msr;
    9d6a:	490a      	ldr	r1, [pc, #40]	; (9d94 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x54>)
    9d6c:	9b01      	ldr	r3, [sp, #4]
    9d6e:	9a00      	ldr	r2, [sp, #0]
    9d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId]++;
    9d74:	4a06      	ldr	r2, [pc, #24]	; (9d90 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x50>)
    9d76:	9b01      	ldr	r3, [sp, #4]
    9d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d7c:	1c5a      	adds	r2, r3, #1
    9d7e:	4904      	ldr	r1, [pc, #16]	; (9d90 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_62+0x50>)
    9d80:	9b01      	ldr	r3, [sp, #4]
    9d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9d86:	bf00      	nop
    9d88:	b003      	add	sp, #12
    9d8a:	f85d fb04 	ldr.w	pc, [sp], #4
    9d8e:	bf00      	nop
    9d90:	1fff91ec 	.word	0x1fff91ec
    9d94:	1fff91e8 	.word	0x1fff91e8

00009d98 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62(void)
{
    9d98:	b500      	push	{lr}
    9d9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9d9c:	f7f6 ff48 	bl	c30 <Sys_GetCoreID>
    9da0:	4603      	mov	r3, r0
    9da2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId]--;
    9da4:	4a0d      	ldr	r2, [pc, #52]	; (9ddc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x44>)
    9da6:	9b01      	ldr	r3, [sp, #4]
    9da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dac:	1e5a      	subs	r2, r3, #1
    9dae:	490b      	ldr	r1, [pc, #44]	; (9ddc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x44>)
    9db0:	9b01      	ldr	r3, [sp, #4]
    9db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
    9db6:	4a0a      	ldr	r2, [pc, #40]	; (9de0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x48>)
    9db8:	9b01      	ldr	r3, [sp, #4]
    9dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dbe:	f003 0301 	and.w	r3, r3, #1
    9dc2:	2b00      	cmp	r3, #0
    9dc4:	d106      	bne.n	9dd4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x3c>
    9dc6:	4a05      	ldr	r2, [pc, #20]	; (9ddc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x44>)
    9dc8:	9b01      	ldr	r3, [sp, #4]
    9dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dce:	2b00      	cmp	r3, #0
    9dd0:	d100      	bne.n	9dd4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9dd2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9dd4:	bf00      	nop
    9dd6:	b003      	add	sp, #12
    9dd8:	f85d fb04 	ldr.w	pc, [sp], #4
    9ddc:	1fff91ec 	.word	0x1fff91ec
    9de0:	1fff91e8 	.word	0x1fff91e8

00009de4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63(void)
{
    9de4:	b500      	push	{lr}
    9de6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9de8:	f7f6 ff22 	bl	c30 <Sys_GetCoreID>
    9dec:	4603      	mov	r3, r0
    9dee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId])
    9df0:	4a10      	ldr	r2, [pc, #64]	; (9e34 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x50>)
    9df2:	9b01      	ldr	r3, [sp, #4]
    9df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9df8:	2b00      	cmp	r3, #0
    9dfa:	d10d      	bne.n	9e18 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9dfc:	f7f6 fe37 	bl	a6e <Gpt_schm_read_msr>
    9e00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9e02:	9b00      	ldr	r3, [sp, #0]
    9e04:	f003 0301 	and.w	r3, r3, #1
    9e08:	2b00      	cmp	r3, #0
    9e0a:	d100      	bne.n	9e0e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9e0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_63[u32CoreId] = msr;
    9e0e:	490a      	ldr	r1, [pc, #40]	; (9e38 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x54>)
    9e10:	9b01      	ldr	r3, [sp, #4]
    9e12:	9a00      	ldr	r2, [sp, #0]
    9e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId]++;
    9e18:	4a06      	ldr	r2, [pc, #24]	; (9e34 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x50>)
    9e1a:	9b01      	ldr	r3, [sp, #4]
    9e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e20:	1c5a      	adds	r2, r3, #1
    9e22:	4904      	ldr	r1, [pc, #16]	; (9e34 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_63+0x50>)
    9e24:	9b01      	ldr	r3, [sp, #4]
    9e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9e2a:	bf00      	nop
    9e2c:	b003      	add	sp, #12
    9e2e:	f85d fb04 	ldr.w	pc, [sp], #4
    9e32:	bf00      	nop
    9e34:	1fff91f4 	.word	0x1fff91f4
    9e38:	1fff91f0 	.word	0x1fff91f0

00009e3c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63(void)
{
    9e3c:	b500      	push	{lr}
    9e3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e40:	f7f6 fef6 	bl	c30 <Sys_GetCoreID>
    9e44:	4603      	mov	r3, r0
    9e46:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId]--;
    9e48:	4a0d      	ldr	r2, [pc, #52]	; (9e80 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x44>)
    9e4a:	9b01      	ldr	r3, [sp, #4]
    9e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e50:	1e5a      	subs	r2, r3, #1
    9e52:	490b      	ldr	r1, [pc, #44]	; (9e80 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x44>)
    9e54:	9b01      	ldr	r3, [sp, #4]
    9e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
    9e5a:	4a0a      	ldr	r2, [pc, #40]	; (9e84 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x48>)
    9e5c:	9b01      	ldr	r3, [sp, #4]
    9e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e62:	f003 0301 	and.w	r3, r3, #1
    9e66:	2b00      	cmp	r3, #0
    9e68:	d106      	bne.n	9e78 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x3c>
    9e6a:	4a05      	ldr	r2, [pc, #20]	; (9e80 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x44>)
    9e6c:	9b01      	ldr	r3, [sp, #4]
    9e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e72:	2b00      	cmp	r3, #0
    9e74:	d100      	bne.n	9e78 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9e76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9e78:	bf00      	nop
    9e7a:	b003      	add	sp, #12
    9e7c:	f85d fb04 	ldr.w	pc, [sp], #4
    9e80:	1fff91f4 	.word	0x1fff91f4
    9e84:	1fff91f0 	.word	0x1fff91f0

00009e88 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64(void)
{
    9e88:	b500      	push	{lr}
    9e8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e8c:	f7f6 fed0 	bl	c30 <Sys_GetCoreID>
    9e90:	4603      	mov	r3, r0
    9e92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId])
    9e94:	4a10      	ldr	r2, [pc, #64]	; (9ed8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x50>)
    9e96:	9b01      	ldr	r3, [sp, #4]
    9e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e9c:	2b00      	cmp	r3, #0
    9e9e:	d10d      	bne.n	9ebc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9ea0:	f7f6 fde5 	bl	a6e <Gpt_schm_read_msr>
    9ea4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9ea6:	9b00      	ldr	r3, [sp, #0]
    9ea8:	f003 0301 	and.w	r3, r3, #1
    9eac:	2b00      	cmp	r3, #0
    9eae:	d100      	bne.n	9eb2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9eb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_64[u32CoreId] = msr;
    9eb2:	490a      	ldr	r1, [pc, #40]	; (9edc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x54>)
    9eb4:	9b01      	ldr	r3, [sp, #4]
    9eb6:	9a00      	ldr	r2, [sp, #0]
    9eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId]++;
    9ebc:	4a06      	ldr	r2, [pc, #24]	; (9ed8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x50>)
    9ebe:	9b01      	ldr	r3, [sp, #4]
    9ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ec4:	1c5a      	adds	r2, r3, #1
    9ec6:	4904      	ldr	r1, [pc, #16]	; (9ed8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_64+0x50>)
    9ec8:	9b01      	ldr	r3, [sp, #4]
    9eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9ece:	bf00      	nop
    9ed0:	b003      	add	sp, #12
    9ed2:	f85d fb04 	ldr.w	pc, [sp], #4
    9ed6:	bf00      	nop
    9ed8:	1fff91fc 	.word	0x1fff91fc
    9edc:	1fff91f8 	.word	0x1fff91f8

00009ee0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64(void)
{
    9ee0:	b500      	push	{lr}
    9ee2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9ee4:	f7f6 fea4 	bl	c30 <Sys_GetCoreID>
    9ee8:	4603      	mov	r3, r0
    9eea:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId]--;
    9eec:	4a0d      	ldr	r2, [pc, #52]	; (9f24 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x44>)
    9eee:	9b01      	ldr	r3, [sp, #4]
    9ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ef4:	1e5a      	subs	r2, r3, #1
    9ef6:	490b      	ldr	r1, [pc, #44]	; (9f24 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x44>)
    9ef8:	9b01      	ldr	r3, [sp, #4]
    9efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
    9efe:	4a0a      	ldr	r2, [pc, #40]	; (9f28 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x48>)
    9f00:	9b01      	ldr	r3, [sp, #4]
    9f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f06:	f003 0301 	and.w	r3, r3, #1
    9f0a:	2b00      	cmp	r3, #0
    9f0c:	d106      	bne.n	9f1c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x3c>
    9f0e:	4a05      	ldr	r2, [pc, #20]	; (9f24 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x44>)
    9f10:	9b01      	ldr	r3, [sp, #4]
    9f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f16:	2b00      	cmp	r3, #0
    9f18:	d100      	bne.n	9f1c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9f1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9f1c:	bf00      	nop
    9f1e:	b003      	add	sp, #12
    9f20:	f85d fb04 	ldr.w	pc, [sp], #4
    9f24:	1fff91fc 	.word	0x1fff91fc
    9f28:	1fff91f8 	.word	0x1fff91f8

00009f2c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65(void)
{
    9f2c:	b500      	push	{lr}
    9f2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9f30:	f7f6 fe7e 	bl	c30 <Sys_GetCoreID>
    9f34:	4603      	mov	r3, r0
    9f36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId])
    9f38:	4a10      	ldr	r2, [pc, #64]	; (9f7c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x50>)
    9f3a:	9b01      	ldr	r3, [sp, #4]
    9f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f40:	2b00      	cmp	r3, #0
    9f42:	d10d      	bne.n	9f60 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9f44:	f7f6 fd93 	bl	a6e <Gpt_schm_read_msr>
    9f48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9f4a:	9b00      	ldr	r3, [sp, #0]
    9f4c:	f003 0301 	and.w	r3, r3, #1
    9f50:	2b00      	cmp	r3, #0
    9f52:	d100      	bne.n	9f56 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9f54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_65[u32CoreId] = msr;
    9f56:	490a      	ldr	r1, [pc, #40]	; (9f80 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x54>)
    9f58:	9b01      	ldr	r3, [sp, #4]
    9f5a:	9a00      	ldr	r2, [sp, #0]
    9f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId]++;
    9f60:	4a06      	ldr	r2, [pc, #24]	; (9f7c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x50>)
    9f62:	9b01      	ldr	r3, [sp, #4]
    9f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f68:	1c5a      	adds	r2, r3, #1
    9f6a:	4904      	ldr	r1, [pc, #16]	; (9f7c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_65+0x50>)
    9f6c:	9b01      	ldr	r3, [sp, #4]
    9f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9f72:	bf00      	nop
    9f74:	b003      	add	sp, #12
    9f76:	f85d fb04 	ldr.w	pc, [sp], #4
    9f7a:	bf00      	nop
    9f7c:	1fff9204 	.word	0x1fff9204
    9f80:	1fff9200 	.word	0x1fff9200

00009f84 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65(void)
{
    9f84:	b500      	push	{lr}
    9f86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9f88:	f7f6 fe52 	bl	c30 <Sys_GetCoreID>
    9f8c:	4603      	mov	r3, r0
    9f8e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId]--;
    9f90:	4a0d      	ldr	r2, [pc, #52]	; (9fc8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x44>)
    9f92:	9b01      	ldr	r3, [sp, #4]
    9f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f98:	1e5a      	subs	r2, r3, #1
    9f9a:	490b      	ldr	r1, [pc, #44]	; (9fc8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x44>)
    9f9c:	9b01      	ldr	r3, [sp, #4]
    9f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
    9fa2:	4a0a      	ldr	r2, [pc, #40]	; (9fcc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x48>)
    9fa4:	9b01      	ldr	r3, [sp, #4]
    9fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9faa:	f003 0301 	and.w	r3, r3, #1
    9fae:	2b00      	cmp	r3, #0
    9fb0:	d106      	bne.n	9fc0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x3c>
    9fb2:	4a05      	ldr	r2, [pc, #20]	; (9fc8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x44>)
    9fb4:	9b01      	ldr	r3, [sp, #4]
    9fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fba:	2b00      	cmp	r3, #0
    9fbc:	d100      	bne.n	9fc0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9fbe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9fc0:	bf00      	nop
    9fc2:	b003      	add	sp, #12
    9fc4:	f85d fb04 	ldr.w	pc, [sp], #4
    9fc8:	1fff9204 	.word	0x1fff9204
    9fcc:	1fff9200 	.word	0x1fff9200

00009fd0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66(void)
{
    9fd0:	b500      	push	{lr}
    9fd2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9fd4:	f7f6 fe2c 	bl	c30 <Sys_GetCoreID>
    9fd8:	4603      	mov	r3, r0
    9fda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId])
    9fdc:	4a10      	ldr	r2, [pc, #64]	; (a020 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x50>)
    9fde:	9b01      	ldr	r3, [sp, #4]
    9fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fe4:	2b00      	cmp	r3, #0
    9fe6:	d10d      	bne.n	a004 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9fe8:	f7f6 fd41 	bl	a6e <Gpt_schm_read_msr>
    9fec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9fee:	9b00      	ldr	r3, [sp, #0]
    9ff0:	f003 0301 	and.w	r3, r3, #1
    9ff4:	2b00      	cmp	r3, #0
    9ff6:	d100      	bne.n	9ffa <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9ff8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_66[u32CoreId] = msr;
    9ffa:	490a      	ldr	r1, [pc, #40]	; (a024 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x54>)
    9ffc:	9b01      	ldr	r3, [sp, #4]
    9ffe:	9a00      	ldr	r2, [sp, #0]
    a000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId]++;
    a004:	4a06      	ldr	r2, [pc, #24]	; (a020 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x50>)
    a006:	9b01      	ldr	r3, [sp, #4]
    a008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a00c:	1c5a      	adds	r2, r3, #1
    a00e:	4904      	ldr	r1, [pc, #16]	; (a020 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_66+0x50>)
    a010:	9b01      	ldr	r3, [sp, #4]
    a012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a016:	bf00      	nop
    a018:	b003      	add	sp, #12
    a01a:	f85d fb04 	ldr.w	pc, [sp], #4
    a01e:	bf00      	nop
    a020:	1fff920c 	.word	0x1fff920c
    a024:	1fff9208 	.word	0x1fff9208

0000a028 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66(void)
{
    a028:	b500      	push	{lr}
    a02a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a02c:	f7f6 fe00 	bl	c30 <Sys_GetCoreID>
    a030:	4603      	mov	r3, r0
    a032:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId]--;
    a034:	4a0d      	ldr	r2, [pc, #52]	; (a06c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x44>)
    a036:	9b01      	ldr	r3, [sp, #4]
    a038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a03c:	1e5a      	subs	r2, r3, #1
    a03e:	490b      	ldr	r1, [pc, #44]	; (a06c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x44>)
    a040:	9b01      	ldr	r3, [sp, #4]
    a042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
    a046:	4a0a      	ldr	r2, [pc, #40]	; (a070 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x48>)
    a048:	9b01      	ldr	r3, [sp, #4]
    a04a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a04e:	f003 0301 	and.w	r3, r3, #1
    a052:	2b00      	cmp	r3, #0
    a054:	d106      	bne.n	a064 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x3c>
    a056:	4a05      	ldr	r2, [pc, #20]	; (a06c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x44>)
    a058:	9b01      	ldr	r3, [sp, #4]
    a05a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a05e:	2b00      	cmp	r3, #0
    a060:	d100      	bne.n	a064 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a062:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a064:	bf00      	nop
    a066:	b003      	add	sp, #12
    a068:	f85d fb04 	ldr.w	pc, [sp], #4
    a06c:	1fff920c 	.word	0x1fff920c
    a070:	1fff9208 	.word	0x1fff9208

0000a074 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67(void)
{
    a074:	b500      	push	{lr}
    a076:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a078:	f7f6 fdda 	bl	c30 <Sys_GetCoreID>
    a07c:	4603      	mov	r3, r0
    a07e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId])
    a080:	4a10      	ldr	r2, [pc, #64]	; (a0c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x50>)
    a082:	9b01      	ldr	r3, [sp, #4]
    a084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a088:	2b00      	cmp	r3, #0
    a08a:	d10d      	bne.n	a0a8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a08c:	f7f6 fcef 	bl	a6e <Gpt_schm_read_msr>
    a090:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a092:	9b00      	ldr	r3, [sp, #0]
    a094:	f003 0301 	and.w	r3, r3, #1
    a098:	2b00      	cmp	r3, #0
    a09a:	d100      	bne.n	a09e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a09c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_67[u32CoreId] = msr;
    a09e:	490a      	ldr	r1, [pc, #40]	; (a0c8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x54>)
    a0a0:	9b01      	ldr	r3, [sp, #4]
    a0a2:	9a00      	ldr	r2, [sp, #0]
    a0a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId]++;
    a0a8:	4a06      	ldr	r2, [pc, #24]	; (a0c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x50>)
    a0aa:	9b01      	ldr	r3, [sp, #4]
    a0ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0b0:	1c5a      	adds	r2, r3, #1
    a0b2:	4904      	ldr	r1, [pc, #16]	; (a0c4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_67+0x50>)
    a0b4:	9b01      	ldr	r3, [sp, #4]
    a0b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a0ba:	bf00      	nop
    a0bc:	b003      	add	sp, #12
    a0be:	f85d fb04 	ldr.w	pc, [sp], #4
    a0c2:	bf00      	nop
    a0c4:	1fff9214 	.word	0x1fff9214
    a0c8:	1fff9210 	.word	0x1fff9210

0000a0cc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67(void)
{
    a0cc:	b500      	push	{lr}
    a0ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a0d0:	f7f6 fdae 	bl	c30 <Sys_GetCoreID>
    a0d4:	4603      	mov	r3, r0
    a0d6:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId]--;
    a0d8:	4a0d      	ldr	r2, [pc, #52]	; (a110 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x44>)
    a0da:	9b01      	ldr	r3, [sp, #4]
    a0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0e0:	1e5a      	subs	r2, r3, #1
    a0e2:	490b      	ldr	r1, [pc, #44]	; (a110 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x44>)
    a0e4:	9b01      	ldr	r3, [sp, #4]
    a0e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
    a0ea:	4a0a      	ldr	r2, [pc, #40]	; (a114 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x48>)
    a0ec:	9b01      	ldr	r3, [sp, #4]
    a0ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0f2:	f003 0301 	and.w	r3, r3, #1
    a0f6:	2b00      	cmp	r3, #0
    a0f8:	d106      	bne.n	a108 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x3c>
    a0fa:	4a05      	ldr	r2, [pc, #20]	; (a110 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x44>)
    a0fc:	9b01      	ldr	r3, [sp, #4]
    a0fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a102:	2b00      	cmp	r3, #0
    a104:	d100      	bne.n	a108 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a106:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a108:	bf00      	nop
    a10a:	b003      	add	sp, #12
    a10c:	f85d fb04 	ldr.w	pc, [sp], #4
    a110:	1fff9214 	.word	0x1fff9214
    a114:	1fff9210 	.word	0x1fff9210

0000a118 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68(void)
{
    a118:	b500      	push	{lr}
    a11a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a11c:	f7f6 fd88 	bl	c30 <Sys_GetCoreID>
    a120:	4603      	mov	r3, r0
    a122:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId])
    a124:	4a10      	ldr	r2, [pc, #64]	; (a168 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x50>)
    a126:	9b01      	ldr	r3, [sp, #4]
    a128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a12c:	2b00      	cmp	r3, #0
    a12e:	d10d      	bne.n	a14c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a130:	f7f6 fc9d 	bl	a6e <Gpt_schm_read_msr>
    a134:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a136:	9b00      	ldr	r3, [sp, #0]
    a138:	f003 0301 	and.w	r3, r3, #1
    a13c:	2b00      	cmp	r3, #0
    a13e:	d100      	bne.n	a142 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a140:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_68[u32CoreId] = msr;
    a142:	490a      	ldr	r1, [pc, #40]	; (a16c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x54>)
    a144:	9b01      	ldr	r3, [sp, #4]
    a146:	9a00      	ldr	r2, [sp, #0]
    a148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId]++;
    a14c:	4a06      	ldr	r2, [pc, #24]	; (a168 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x50>)
    a14e:	9b01      	ldr	r3, [sp, #4]
    a150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a154:	1c5a      	adds	r2, r3, #1
    a156:	4904      	ldr	r1, [pc, #16]	; (a168 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_68+0x50>)
    a158:	9b01      	ldr	r3, [sp, #4]
    a15a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a15e:	bf00      	nop
    a160:	b003      	add	sp, #12
    a162:	f85d fb04 	ldr.w	pc, [sp], #4
    a166:	bf00      	nop
    a168:	1fff921c 	.word	0x1fff921c
    a16c:	1fff9218 	.word	0x1fff9218

0000a170 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68(void)
{
    a170:	b500      	push	{lr}
    a172:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a174:	f7f6 fd5c 	bl	c30 <Sys_GetCoreID>
    a178:	4603      	mov	r3, r0
    a17a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId]--;
    a17c:	4a0d      	ldr	r2, [pc, #52]	; (a1b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x44>)
    a17e:	9b01      	ldr	r3, [sp, #4]
    a180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a184:	1e5a      	subs	r2, r3, #1
    a186:	490b      	ldr	r1, [pc, #44]	; (a1b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x44>)
    a188:	9b01      	ldr	r3, [sp, #4]
    a18a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
    a18e:	4a0a      	ldr	r2, [pc, #40]	; (a1b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x48>)
    a190:	9b01      	ldr	r3, [sp, #4]
    a192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a196:	f003 0301 	and.w	r3, r3, #1
    a19a:	2b00      	cmp	r3, #0
    a19c:	d106      	bne.n	a1ac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x3c>
    a19e:	4a05      	ldr	r2, [pc, #20]	; (a1b4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x44>)
    a1a0:	9b01      	ldr	r3, [sp, #4]
    a1a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1a6:	2b00      	cmp	r3, #0
    a1a8:	d100      	bne.n	a1ac <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a1aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a1ac:	bf00      	nop
    a1ae:	b003      	add	sp, #12
    a1b0:	f85d fb04 	ldr.w	pc, [sp], #4
    a1b4:	1fff921c 	.word	0x1fff921c
    a1b8:	1fff9218 	.word	0x1fff9218

0000a1bc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69(void)
{
    a1bc:	b500      	push	{lr}
    a1be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a1c0:	f7f6 fd36 	bl	c30 <Sys_GetCoreID>
    a1c4:	4603      	mov	r3, r0
    a1c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId])
    a1c8:	4a10      	ldr	r2, [pc, #64]	; (a20c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x50>)
    a1ca:	9b01      	ldr	r3, [sp, #4]
    a1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1d0:	2b00      	cmp	r3, #0
    a1d2:	d10d      	bne.n	a1f0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a1d4:	f7f6 fc4b 	bl	a6e <Gpt_schm_read_msr>
    a1d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a1da:	9b00      	ldr	r3, [sp, #0]
    a1dc:	f003 0301 	and.w	r3, r3, #1
    a1e0:	2b00      	cmp	r3, #0
    a1e2:	d100      	bne.n	a1e6 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a1e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_69[u32CoreId] = msr;
    a1e6:	490a      	ldr	r1, [pc, #40]	; (a210 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x54>)
    a1e8:	9b01      	ldr	r3, [sp, #4]
    a1ea:	9a00      	ldr	r2, [sp, #0]
    a1ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId]++;
    a1f0:	4a06      	ldr	r2, [pc, #24]	; (a20c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x50>)
    a1f2:	9b01      	ldr	r3, [sp, #4]
    a1f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1f8:	1c5a      	adds	r2, r3, #1
    a1fa:	4904      	ldr	r1, [pc, #16]	; (a20c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_69+0x50>)
    a1fc:	9b01      	ldr	r3, [sp, #4]
    a1fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a202:	bf00      	nop
    a204:	b003      	add	sp, #12
    a206:	f85d fb04 	ldr.w	pc, [sp], #4
    a20a:	bf00      	nop
    a20c:	1fff9224 	.word	0x1fff9224
    a210:	1fff9220 	.word	0x1fff9220

0000a214 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69(void)
{
    a214:	b500      	push	{lr}
    a216:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a218:	f7f6 fd0a 	bl	c30 <Sys_GetCoreID>
    a21c:	4603      	mov	r3, r0
    a21e:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId]--;
    a220:	4a0d      	ldr	r2, [pc, #52]	; (a258 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x44>)
    a222:	9b01      	ldr	r3, [sp, #4]
    a224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a228:	1e5a      	subs	r2, r3, #1
    a22a:	490b      	ldr	r1, [pc, #44]	; (a258 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x44>)
    a22c:	9b01      	ldr	r3, [sp, #4]
    a22e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
    a232:	4a0a      	ldr	r2, [pc, #40]	; (a25c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x48>)
    a234:	9b01      	ldr	r3, [sp, #4]
    a236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a23a:	f003 0301 	and.w	r3, r3, #1
    a23e:	2b00      	cmp	r3, #0
    a240:	d106      	bne.n	a250 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x3c>
    a242:	4a05      	ldr	r2, [pc, #20]	; (a258 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x44>)
    a244:	9b01      	ldr	r3, [sp, #4]
    a246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a24a:	2b00      	cmp	r3, #0
    a24c:	d100      	bne.n	a250 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a24e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a250:	bf00      	nop
    a252:	b003      	add	sp, #12
    a254:	f85d fb04 	ldr.w	pc, [sp], #4
    a258:	1fff9224 	.word	0x1fff9224
    a25c:	1fff9220 	.word	0x1fff9220

0000a260 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70(void)
{
    a260:	b500      	push	{lr}
    a262:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a264:	f7f6 fce4 	bl	c30 <Sys_GetCoreID>
    a268:	4603      	mov	r3, r0
    a26a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId])
    a26c:	4a10      	ldr	r2, [pc, #64]	; (a2b0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x50>)
    a26e:	9b01      	ldr	r3, [sp, #4]
    a270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a274:	2b00      	cmp	r3, #0
    a276:	d10d      	bne.n	a294 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a278:	f7f6 fbf9 	bl	a6e <Gpt_schm_read_msr>
    a27c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a27e:	9b00      	ldr	r3, [sp, #0]
    a280:	f003 0301 	and.w	r3, r3, #1
    a284:	2b00      	cmp	r3, #0
    a286:	d100      	bne.n	a28a <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a288:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_70[u32CoreId] = msr;
    a28a:	490a      	ldr	r1, [pc, #40]	; (a2b4 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x54>)
    a28c:	9b01      	ldr	r3, [sp, #4]
    a28e:	9a00      	ldr	r2, [sp, #0]
    a290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId]++;
    a294:	4a06      	ldr	r2, [pc, #24]	; (a2b0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x50>)
    a296:	9b01      	ldr	r3, [sp, #4]
    a298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a29c:	1c5a      	adds	r2, r3, #1
    a29e:	4904      	ldr	r1, [pc, #16]	; (a2b0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_70+0x50>)
    a2a0:	9b01      	ldr	r3, [sp, #4]
    a2a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a2a6:	bf00      	nop
    a2a8:	b003      	add	sp, #12
    a2aa:	f85d fb04 	ldr.w	pc, [sp], #4
    a2ae:	bf00      	nop
    a2b0:	1fff922c 	.word	0x1fff922c
    a2b4:	1fff9228 	.word	0x1fff9228

0000a2b8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70(void)
{
    a2b8:	b500      	push	{lr}
    a2ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a2bc:	f7f6 fcb8 	bl	c30 <Sys_GetCoreID>
    a2c0:	4603      	mov	r3, r0
    a2c2:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId]--;
    a2c4:	4a0d      	ldr	r2, [pc, #52]	; (a2fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x44>)
    a2c6:	9b01      	ldr	r3, [sp, #4]
    a2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2cc:	1e5a      	subs	r2, r3, #1
    a2ce:	490b      	ldr	r1, [pc, #44]	; (a2fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x44>)
    a2d0:	9b01      	ldr	r3, [sp, #4]
    a2d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
    a2d6:	4a0a      	ldr	r2, [pc, #40]	; (a300 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x48>)
    a2d8:	9b01      	ldr	r3, [sp, #4]
    a2da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2de:	f003 0301 	and.w	r3, r3, #1
    a2e2:	2b00      	cmp	r3, #0
    a2e4:	d106      	bne.n	a2f4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x3c>
    a2e6:	4a05      	ldr	r2, [pc, #20]	; (a2fc <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x44>)
    a2e8:	9b01      	ldr	r3, [sp, #4]
    a2ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2ee:	2b00      	cmp	r3, #0
    a2f0:	d100      	bne.n	a2f4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a2f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a2f4:	bf00      	nop
    a2f6:	b003      	add	sp, #12
    a2f8:	f85d fb04 	ldr.w	pc, [sp], #4
    a2fc:	1fff922c 	.word	0x1fff922c
    a300:	1fff9228 	.word	0x1fff9228

0000a304 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71(void)
{
    a304:	b500      	push	{lr}
    a306:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a308:	f7f6 fc92 	bl	c30 <Sys_GetCoreID>
    a30c:	4603      	mov	r3, r0
    a30e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId])
    a310:	4a10      	ldr	r2, [pc, #64]	; (a354 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x50>)
    a312:	9b01      	ldr	r3, [sp, #4]
    a314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a318:	2b00      	cmp	r3, #0
    a31a:	d10d      	bne.n	a338 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a31c:	f7f6 fba7 	bl	a6e <Gpt_schm_read_msr>
    a320:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a322:	9b00      	ldr	r3, [sp, #0]
    a324:	f003 0301 	and.w	r3, r3, #1
    a328:	2b00      	cmp	r3, #0
    a32a:	d100      	bne.n	a32e <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a32c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_71[u32CoreId] = msr;
    a32e:	490a      	ldr	r1, [pc, #40]	; (a358 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x54>)
    a330:	9b01      	ldr	r3, [sp, #4]
    a332:	9a00      	ldr	r2, [sp, #0]
    a334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId]++;
    a338:	4a06      	ldr	r2, [pc, #24]	; (a354 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x50>)
    a33a:	9b01      	ldr	r3, [sp, #4]
    a33c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a340:	1c5a      	adds	r2, r3, #1
    a342:	4904      	ldr	r1, [pc, #16]	; (a354 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_71+0x50>)
    a344:	9b01      	ldr	r3, [sp, #4]
    a346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a34a:	bf00      	nop
    a34c:	b003      	add	sp, #12
    a34e:	f85d fb04 	ldr.w	pc, [sp], #4
    a352:	bf00      	nop
    a354:	1fff9234 	.word	0x1fff9234
    a358:	1fff9230 	.word	0x1fff9230

0000a35c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71(void)
{
    a35c:	b500      	push	{lr}
    a35e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a360:	f7f6 fc66 	bl	c30 <Sys_GetCoreID>
    a364:	4603      	mov	r3, r0
    a366:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId]--;
    a368:	4a0d      	ldr	r2, [pc, #52]	; (a3a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x44>)
    a36a:	9b01      	ldr	r3, [sp, #4]
    a36c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a370:	1e5a      	subs	r2, r3, #1
    a372:	490b      	ldr	r1, [pc, #44]	; (a3a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x44>)
    a374:	9b01      	ldr	r3, [sp, #4]
    a376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
    a37a:	4a0a      	ldr	r2, [pc, #40]	; (a3a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x48>)
    a37c:	9b01      	ldr	r3, [sp, #4]
    a37e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a382:	f003 0301 	and.w	r3, r3, #1
    a386:	2b00      	cmp	r3, #0
    a388:	d106      	bne.n	a398 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x3c>
    a38a:	4a05      	ldr	r2, [pc, #20]	; (a3a0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x44>)
    a38c:	9b01      	ldr	r3, [sp, #4]
    a38e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a392:	2b00      	cmp	r3, #0
    a394:	d100      	bne.n	a398 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a396:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a398:	bf00      	nop
    a39a:	b003      	add	sp, #12
    a39c:	f85d fb04 	ldr.w	pc, [sp], #4
    a3a0:	1fff9234 	.word	0x1fff9234
    a3a4:	1fff9230 	.word	0x1fff9230

0000a3a8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72(void)
{
    a3a8:	b500      	push	{lr}
    a3aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a3ac:	f7f6 fc40 	bl	c30 <Sys_GetCoreID>
    a3b0:	4603      	mov	r3, r0
    a3b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId])
    a3b4:	4a10      	ldr	r2, [pc, #64]	; (a3f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x50>)
    a3b6:	9b01      	ldr	r3, [sp, #4]
    a3b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3bc:	2b00      	cmp	r3, #0
    a3be:	d10d      	bne.n	a3dc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a3c0:	f7f6 fb55 	bl	a6e <Gpt_schm_read_msr>
    a3c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a3c6:	9b00      	ldr	r3, [sp, #0]
    a3c8:	f003 0301 	and.w	r3, r3, #1
    a3cc:	2b00      	cmp	r3, #0
    a3ce:	d100      	bne.n	a3d2 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a3d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_72[u32CoreId] = msr;
    a3d2:	490a      	ldr	r1, [pc, #40]	; (a3fc <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x54>)
    a3d4:	9b01      	ldr	r3, [sp, #4]
    a3d6:	9a00      	ldr	r2, [sp, #0]
    a3d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId]++;
    a3dc:	4a06      	ldr	r2, [pc, #24]	; (a3f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x50>)
    a3de:	9b01      	ldr	r3, [sp, #4]
    a3e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3e4:	1c5a      	adds	r2, r3, #1
    a3e6:	4904      	ldr	r1, [pc, #16]	; (a3f8 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_72+0x50>)
    a3e8:	9b01      	ldr	r3, [sp, #4]
    a3ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a3ee:	bf00      	nop
    a3f0:	b003      	add	sp, #12
    a3f2:	f85d fb04 	ldr.w	pc, [sp], #4
    a3f6:	bf00      	nop
    a3f8:	1fff923c 	.word	0x1fff923c
    a3fc:	1fff9238 	.word	0x1fff9238

0000a400 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72(void)
{
    a400:	b500      	push	{lr}
    a402:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a404:	f7f6 fc14 	bl	c30 <Sys_GetCoreID>
    a408:	4603      	mov	r3, r0
    a40a:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId]--;
    a40c:	4a0d      	ldr	r2, [pc, #52]	; (a444 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x44>)
    a40e:	9b01      	ldr	r3, [sp, #4]
    a410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a414:	1e5a      	subs	r2, r3, #1
    a416:	490b      	ldr	r1, [pc, #44]	; (a444 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x44>)
    a418:	9b01      	ldr	r3, [sp, #4]
    a41a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
    a41e:	4a0a      	ldr	r2, [pc, #40]	; (a448 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x48>)
    a420:	9b01      	ldr	r3, [sp, #4]
    a422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a426:	f003 0301 	and.w	r3, r3, #1
    a42a:	2b00      	cmp	r3, #0
    a42c:	d106      	bne.n	a43c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x3c>
    a42e:	4a05      	ldr	r2, [pc, #20]	; (a444 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x44>)
    a430:	9b01      	ldr	r3, [sp, #4]
    a432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a436:	2b00      	cmp	r3, #0
    a438:	d100      	bne.n	a43c <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a43a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a43c:	bf00      	nop
    a43e:	b003      	add	sp, #12
    a440:	f85d fb04 	ldr.w	pc, [sp], #4
    a444:	1fff923c 	.word	0x1fff923c
    a448:	1fff9238 	.word	0x1fff9238

0000a44c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73>:

void SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73(void)
{
    a44c:	b500      	push	{lr}
    a44e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a450:	f7f6 fbee 	bl	c30 <Sys_GetCoreID>
    a454:	4603      	mov	r3, r0
    a456:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId])
    a458:	4a10      	ldr	r2, [pc, #64]	; (a49c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x50>)
    a45a:	9b01      	ldr	r3, [sp, #4]
    a45c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a460:	2b00      	cmp	r3, #0
    a462:	d10d      	bne.n	a480 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Gpt_schm_read_msr);
#else
        msr = Gpt_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a464:	f7f6 fb03 	bl	a6e <Gpt_schm_read_msr>
    a468:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a46a:	9b00      	ldr	r3, [sp, #0]
    a46c:	f003 0301 	and.w	r3, r3, #1
    a470:	2b00      	cmp	r3, #0
    a472:	d100      	bne.n	a476 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a474:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_GPT_EXCLUSIVE_AREA_73[u32CoreId] = msr;
    a476:	490a      	ldr	r1, [pc, #40]	; (a4a0 <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x54>)
    a478:	9b01      	ldr	r3, [sp, #4]
    a47a:	9a00      	ldr	r2, [sp, #0]
    a47c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId]++;
    a480:	4a06      	ldr	r2, [pc, #24]	; (a49c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x50>)
    a482:	9b01      	ldr	r3, [sp, #4]
    a484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a488:	1c5a      	adds	r2, r3, #1
    a48a:	4904      	ldr	r1, [pc, #16]	; (a49c <SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_73+0x50>)
    a48c:	9b01      	ldr	r3, [sp, #4]
    a48e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a492:	bf00      	nop
    a494:	b003      	add	sp, #12
    a496:	f85d fb04 	ldr.w	pc, [sp], #4
    a49a:	bf00      	nop
    a49c:	1fff9244 	.word	0x1fff9244
    a4a0:	1fff9240 	.word	0x1fff9240

0000a4a4 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73>:

void SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73(void)
{
    a4a4:	b500      	push	{lr}
    a4a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a4a8:	f7f6 fbc2 	bl	c30 <Sys_GetCoreID>
    a4ac:	4603      	mov	r3, r0
    a4ae:	9301      	str	r3, [sp, #4]

    reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId]--;
    a4b0:	4a0d      	ldr	r2, [pc, #52]	; (a4e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x44>)
    a4b2:	9b01      	ldr	r3, [sp, #4]
    a4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4b8:	1e5a      	subs	r2, r3, #1
    a4ba:	490b      	ldr	r1, [pc, #44]	; (a4e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x44>)
    a4bc:	9b01      	ldr	r3, [sp, #4]
    a4be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_GPT_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_GPT_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
    a4c2:	4a0a      	ldr	r2, [pc, #40]	; (a4ec <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x48>)
    a4c4:	9b01      	ldr	r3, [sp, #4]
    a4c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4ca:	f003 0301 	and.w	r3, r3, #1
    a4ce:	2b00      	cmp	r3, #0
    a4d0:	d106      	bne.n	a4e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x3c>
    a4d2:	4a05      	ldr	r2, [pc, #20]	; (a4e8 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x44>)
    a4d4:	9b01      	ldr	r3, [sp, #4]
    a4d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4da:	2b00      	cmp	r3, #0
    a4dc:	d100      	bne.n	a4e0 <SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a4de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a4e0:	bf00      	nop
    a4e2:	b003      	add	sp, #12
    a4e4:	f85d fb04 	ldr.w	pc, [sp], #4
    a4e8:	1fff9244 	.word	0x1fff9244
    a4ec:	1fff9240 	.word	0x1fff9240

0000a4f0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    a4f0:	b500      	push	{lr}
    a4f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a4f4:	f7f6 fb9c 	bl	c30 <Sys_GetCoreID>
    a4f8:	4603      	mov	r3, r0
    a4fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    a4fc:	4a10      	ldr	r2, [pc, #64]	; (a540 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    a4fe:	9b01      	ldr	r3, [sp, #4]
    a500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a504:	2b00      	cmp	r3, #0
    a506:	d10d      	bne.n	a524 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a508:	f7f6 faba 	bl	a80 <Mcu_schm_read_msr>
    a50c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a50e:	9b00      	ldr	r3, [sp, #0]
    a510:	f003 0301 	and.w	r3, r3, #1
    a514:	2b00      	cmp	r3, #0
    a516:	d100      	bne.n	a51a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a518:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    a51a:	490a      	ldr	r1, [pc, #40]	; (a544 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    a51c:	9b01      	ldr	r3, [sp, #4]
    a51e:	9a00      	ldr	r2, [sp, #0]
    a520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    a524:	4a06      	ldr	r2, [pc, #24]	; (a540 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    a526:	9b01      	ldr	r3, [sp, #4]
    a528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a52c:	1c5a      	adds	r2, r3, #1
    a52e:	4904      	ldr	r1, [pc, #16]	; (a540 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    a530:	9b01      	ldr	r3, [sp, #4]
    a532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a536:	bf00      	nop
    a538:	b003      	add	sp, #12
    a53a:	f85d fb04 	ldr.w	pc, [sp], #4
    a53e:	bf00      	nop
    a540:	1fff924c 	.word	0x1fff924c
    a544:	1fff9248 	.word	0x1fff9248

0000a548 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    a548:	b500      	push	{lr}
    a54a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a54c:	f7f6 fb70 	bl	c30 <Sys_GetCoreID>
    a550:	4603      	mov	r3, r0
    a552:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    a554:	4a0d      	ldr	r2, [pc, #52]	; (a58c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    a556:	9b01      	ldr	r3, [sp, #4]
    a558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a55c:	1e5a      	subs	r2, r3, #1
    a55e:	490b      	ldr	r1, [pc, #44]	; (a58c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    a560:	9b01      	ldr	r3, [sp, #4]
    a562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    a566:	4a0a      	ldr	r2, [pc, #40]	; (a590 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    a568:	9b01      	ldr	r3, [sp, #4]
    a56a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a56e:	f003 0301 	and.w	r3, r3, #1
    a572:	2b00      	cmp	r3, #0
    a574:	d106      	bne.n	a584 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    a576:	4a05      	ldr	r2, [pc, #20]	; (a58c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    a578:	9b01      	ldr	r3, [sp, #4]
    a57a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a57e:	2b00      	cmp	r3, #0
    a580:	d100      	bne.n	a584 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a582:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a584:	bf00      	nop
    a586:	b003      	add	sp, #12
    a588:	f85d fb04 	ldr.w	pc, [sp], #4
    a58c:	1fff924c 	.word	0x1fff924c
    a590:	1fff9248 	.word	0x1fff9248

0000a594 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    a594:	b500      	push	{lr}
    a596:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a598:	f7f6 fb4a 	bl	c30 <Sys_GetCoreID>
    a59c:	4603      	mov	r3, r0
    a59e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    a5a0:	4a10      	ldr	r2, [pc, #64]	; (a5e4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    a5a2:	9b01      	ldr	r3, [sp, #4]
    a5a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5a8:	2b00      	cmp	r3, #0
    a5aa:	d10d      	bne.n	a5c8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a5ac:	f7f6 fa68 	bl	a80 <Mcu_schm_read_msr>
    a5b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a5b2:	9b00      	ldr	r3, [sp, #0]
    a5b4:	f003 0301 	and.w	r3, r3, #1
    a5b8:	2b00      	cmp	r3, #0
    a5ba:	d100      	bne.n	a5be <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a5bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    a5be:	490a      	ldr	r1, [pc, #40]	; (a5e8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    a5c0:	9b01      	ldr	r3, [sp, #4]
    a5c2:	9a00      	ldr	r2, [sp, #0]
    a5c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    a5c8:	4a06      	ldr	r2, [pc, #24]	; (a5e4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    a5ca:	9b01      	ldr	r3, [sp, #4]
    a5cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5d0:	1c5a      	adds	r2, r3, #1
    a5d2:	4904      	ldr	r1, [pc, #16]	; (a5e4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    a5d4:	9b01      	ldr	r3, [sp, #4]
    a5d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a5da:	bf00      	nop
    a5dc:	b003      	add	sp, #12
    a5de:	f85d fb04 	ldr.w	pc, [sp], #4
    a5e2:	bf00      	nop
    a5e4:	1fff9254 	.word	0x1fff9254
    a5e8:	1fff9250 	.word	0x1fff9250

0000a5ec <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    a5ec:	b500      	push	{lr}
    a5ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a5f0:	f7f6 fb1e 	bl	c30 <Sys_GetCoreID>
    a5f4:	4603      	mov	r3, r0
    a5f6:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    a5f8:	4a0d      	ldr	r2, [pc, #52]	; (a630 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    a5fa:	9b01      	ldr	r3, [sp, #4]
    a5fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a600:	1e5a      	subs	r2, r3, #1
    a602:	490b      	ldr	r1, [pc, #44]	; (a630 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    a604:	9b01      	ldr	r3, [sp, #4]
    a606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    a60a:	4a0a      	ldr	r2, [pc, #40]	; (a634 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    a60c:	9b01      	ldr	r3, [sp, #4]
    a60e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a612:	f003 0301 	and.w	r3, r3, #1
    a616:	2b00      	cmp	r3, #0
    a618:	d106      	bne.n	a628 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    a61a:	4a05      	ldr	r2, [pc, #20]	; (a630 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    a61c:	9b01      	ldr	r3, [sp, #4]
    a61e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a622:	2b00      	cmp	r3, #0
    a624:	d100      	bne.n	a628 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a626:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a628:	bf00      	nop
    a62a:	b003      	add	sp, #12
    a62c:	f85d fb04 	ldr.w	pc, [sp], #4
    a630:	1fff9254 	.word	0x1fff9254
    a634:	1fff9250 	.word	0x1fff9250

0000a638 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    a638:	b500      	push	{lr}
    a63a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a63c:	f7f6 faf8 	bl	c30 <Sys_GetCoreID>
    a640:	4603      	mov	r3, r0
    a642:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    a644:	4a10      	ldr	r2, [pc, #64]	; (a688 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    a646:	9b01      	ldr	r3, [sp, #4]
    a648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a64c:	2b00      	cmp	r3, #0
    a64e:	d10d      	bne.n	a66c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a650:	f7f6 fa16 	bl	a80 <Mcu_schm_read_msr>
    a654:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a656:	9b00      	ldr	r3, [sp, #0]
    a658:	f003 0301 	and.w	r3, r3, #1
    a65c:	2b00      	cmp	r3, #0
    a65e:	d100      	bne.n	a662 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a660:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    a662:	490a      	ldr	r1, [pc, #40]	; (a68c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    a664:	9b01      	ldr	r3, [sp, #4]
    a666:	9a00      	ldr	r2, [sp, #0]
    a668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    a66c:	4a06      	ldr	r2, [pc, #24]	; (a688 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    a66e:	9b01      	ldr	r3, [sp, #4]
    a670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a674:	1c5a      	adds	r2, r3, #1
    a676:	4904      	ldr	r1, [pc, #16]	; (a688 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    a678:	9b01      	ldr	r3, [sp, #4]
    a67a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a67e:	bf00      	nop
    a680:	b003      	add	sp, #12
    a682:	f85d fb04 	ldr.w	pc, [sp], #4
    a686:	bf00      	nop
    a688:	1fff925c 	.word	0x1fff925c
    a68c:	1fff9258 	.word	0x1fff9258

0000a690 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    a690:	b500      	push	{lr}
    a692:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a694:	f7f6 facc 	bl	c30 <Sys_GetCoreID>
    a698:	4603      	mov	r3, r0
    a69a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    a69c:	4a0d      	ldr	r2, [pc, #52]	; (a6d4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    a69e:	9b01      	ldr	r3, [sp, #4]
    a6a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6a4:	1e5a      	subs	r2, r3, #1
    a6a6:	490b      	ldr	r1, [pc, #44]	; (a6d4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    a6a8:	9b01      	ldr	r3, [sp, #4]
    a6aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    a6ae:	4a0a      	ldr	r2, [pc, #40]	; (a6d8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    a6b0:	9b01      	ldr	r3, [sp, #4]
    a6b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6b6:	f003 0301 	and.w	r3, r3, #1
    a6ba:	2b00      	cmp	r3, #0
    a6bc:	d106      	bne.n	a6cc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    a6be:	4a05      	ldr	r2, [pc, #20]	; (a6d4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    a6c0:	9b01      	ldr	r3, [sp, #4]
    a6c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6c6:	2b00      	cmp	r3, #0
    a6c8:	d100      	bne.n	a6cc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a6ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a6cc:	bf00      	nop
    a6ce:	b003      	add	sp, #12
    a6d0:	f85d fb04 	ldr.w	pc, [sp], #4
    a6d4:	1fff925c 	.word	0x1fff925c
    a6d8:	1fff9258 	.word	0x1fff9258

0000a6dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    a6dc:	b500      	push	{lr}
    a6de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a6e0:	f7f6 faa6 	bl	c30 <Sys_GetCoreID>
    a6e4:	4603      	mov	r3, r0
    a6e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    a6e8:	4a10      	ldr	r2, [pc, #64]	; (a72c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    a6ea:	9b01      	ldr	r3, [sp, #4]
    a6ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6f0:	2b00      	cmp	r3, #0
    a6f2:	d10d      	bne.n	a710 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a6f4:	f7f6 f9cd 	bl	a92 <Port_schm_read_msr>
    a6f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a6fa:	9b00      	ldr	r3, [sp, #0]
    a6fc:	f003 0301 	and.w	r3, r3, #1
    a700:	2b00      	cmp	r3, #0
    a702:	d100      	bne.n	a706 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a704:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    a706:	490a      	ldr	r1, [pc, #40]	; (a730 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    a708:	9b01      	ldr	r3, [sp, #4]
    a70a:	9a00      	ldr	r2, [sp, #0]
    a70c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    a710:	4a06      	ldr	r2, [pc, #24]	; (a72c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    a712:	9b01      	ldr	r3, [sp, #4]
    a714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a718:	1c5a      	adds	r2, r3, #1
    a71a:	4904      	ldr	r1, [pc, #16]	; (a72c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    a71c:	9b01      	ldr	r3, [sp, #4]
    a71e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a722:	bf00      	nop
    a724:	b003      	add	sp, #12
    a726:	f85d fb04 	ldr.w	pc, [sp], #4
    a72a:	bf00      	nop
    a72c:	1fff9264 	.word	0x1fff9264
    a730:	1fff9260 	.word	0x1fff9260

0000a734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    a734:	b500      	push	{lr}
    a736:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a738:	f7f6 fa7a 	bl	c30 <Sys_GetCoreID>
    a73c:	4603      	mov	r3, r0
    a73e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    a740:	4a0d      	ldr	r2, [pc, #52]	; (a778 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    a742:	9b01      	ldr	r3, [sp, #4]
    a744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a748:	1e5a      	subs	r2, r3, #1
    a74a:	490b      	ldr	r1, [pc, #44]	; (a778 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    a74c:	9b01      	ldr	r3, [sp, #4]
    a74e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    a752:	4a0a      	ldr	r2, [pc, #40]	; (a77c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    a754:	9b01      	ldr	r3, [sp, #4]
    a756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a75a:	f003 0301 	and.w	r3, r3, #1
    a75e:	2b00      	cmp	r3, #0
    a760:	d106      	bne.n	a770 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    a762:	4a05      	ldr	r2, [pc, #20]	; (a778 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    a764:	9b01      	ldr	r3, [sp, #4]
    a766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a76a:	2b00      	cmp	r3, #0
    a76c:	d100      	bne.n	a770 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a76e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a770:	bf00      	nop
    a772:	b003      	add	sp, #12
    a774:	f85d fb04 	ldr.w	pc, [sp], #4
    a778:	1fff9264 	.word	0x1fff9264
    a77c:	1fff9260 	.word	0x1fff9260

0000a780 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    a780:	b500      	push	{lr}
    a782:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a784:	f7f6 fa54 	bl	c30 <Sys_GetCoreID>
    a788:	4603      	mov	r3, r0
    a78a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    a78c:	4a10      	ldr	r2, [pc, #64]	; (a7d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    a78e:	9b01      	ldr	r3, [sp, #4]
    a790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a794:	2b00      	cmp	r3, #0
    a796:	d10d      	bne.n	a7b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a798:	f7f6 f97b 	bl	a92 <Port_schm_read_msr>
    a79c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a79e:	9b00      	ldr	r3, [sp, #0]
    a7a0:	f003 0301 	and.w	r3, r3, #1
    a7a4:	2b00      	cmp	r3, #0
    a7a6:	d100      	bne.n	a7aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a7a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    a7aa:	490a      	ldr	r1, [pc, #40]	; (a7d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    a7ac:	9b01      	ldr	r3, [sp, #4]
    a7ae:	9a00      	ldr	r2, [sp, #0]
    a7b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    a7b4:	4a06      	ldr	r2, [pc, #24]	; (a7d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    a7b6:	9b01      	ldr	r3, [sp, #4]
    a7b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7bc:	1c5a      	adds	r2, r3, #1
    a7be:	4904      	ldr	r1, [pc, #16]	; (a7d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    a7c0:	9b01      	ldr	r3, [sp, #4]
    a7c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a7c6:	bf00      	nop
    a7c8:	b003      	add	sp, #12
    a7ca:	f85d fb04 	ldr.w	pc, [sp], #4
    a7ce:	bf00      	nop
    a7d0:	1fff926c 	.word	0x1fff926c
    a7d4:	1fff9268 	.word	0x1fff9268

0000a7d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    a7d8:	b500      	push	{lr}
    a7da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a7dc:	f7f6 fa28 	bl	c30 <Sys_GetCoreID>
    a7e0:	4603      	mov	r3, r0
    a7e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    a7e4:	4a0d      	ldr	r2, [pc, #52]	; (a81c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    a7e6:	9b01      	ldr	r3, [sp, #4]
    a7e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7ec:	1e5a      	subs	r2, r3, #1
    a7ee:	490b      	ldr	r1, [pc, #44]	; (a81c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    a7f0:	9b01      	ldr	r3, [sp, #4]
    a7f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    a7f6:	4a0a      	ldr	r2, [pc, #40]	; (a820 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    a7f8:	9b01      	ldr	r3, [sp, #4]
    a7fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7fe:	f003 0301 	and.w	r3, r3, #1
    a802:	2b00      	cmp	r3, #0
    a804:	d106      	bne.n	a814 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    a806:	4a05      	ldr	r2, [pc, #20]	; (a81c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    a808:	9b01      	ldr	r3, [sp, #4]
    a80a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a80e:	2b00      	cmp	r3, #0
    a810:	d100      	bne.n	a814 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a812:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a814:	bf00      	nop
    a816:	b003      	add	sp, #12
    a818:	f85d fb04 	ldr.w	pc, [sp], #4
    a81c:	1fff926c 	.word	0x1fff926c
    a820:	1fff9268 	.word	0x1fff9268

0000a824 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    a824:	b500      	push	{lr}
    a826:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a828:	f7f6 fa02 	bl	c30 <Sys_GetCoreID>
    a82c:	4603      	mov	r3, r0
    a82e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    a830:	4a10      	ldr	r2, [pc, #64]	; (a874 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    a832:	9b01      	ldr	r3, [sp, #4]
    a834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a838:	2b00      	cmp	r3, #0
    a83a:	d10d      	bne.n	a858 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a83c:	f7f6 f929 	bl	a92 <Port_schm_read_msr>
    a840:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a842:	9b00      	ldr	r3, [sp, #0]
    a844:	f003 0301 	and.w	r3, r3, #1
    a848:	2b00      	cmp	r3, #0
    a84a:	d100      	bne.n	a84e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a84c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    a84e:	490a      	ldr	r1, [pc, #40]	; (a878 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    a850:	9b01      	ldr	r3, [sp, #4]
    a852:	9a00      	ldr	r2, [sp, #0]
    a854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    a858:	4a06      	ldr	r2, [pc, #24]	; (a874 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    a85a:	9b01      	ldr	r3, [sp, #4]
    a85c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a860:	1c5a      	adds	r2, r3, #1
    a862:	4904      	ldr	r1, [pc, #16]	; (a874 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    a864:	9b01      	ldr	r3, [sp, #4]
    a866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a86a:	bf00      	nop
    a86c:	b003      	add	sp, #12
    a86e:	f85d fb04 	ldr.w	pc, [sp], #4
    a872:	bf00      	nop
    a874:	1fff9274 	.word	0x1fff9274
    a878:	1fff9270 	.word	0x1fff9270

0000a87c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    a87c:	b500      	push	{lr}
    a87e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a880:	f7f6 f9d6 	bl	c30 <Sys_GetCoreID>
    a884:	4603      	mov	r3, r0
    a886:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    a888:	4a0d      	ldr	r2, [pc, #52]	; (a8c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    a88a:	9b01      	ldr	r3, [sp, #4]
    a88c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a890:	1e5a      	subs	r2, r3, #1
    a892:	490b      	ldr	r1, [pc, #44]	; (a8c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    a894:	9b01      	ldr	r3, [sp, #4]
    a896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    a89a:	4a0a      	ldr	r2, [pc, #40]	; (a8c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    a89c:	9b01      	ldr	r3, [sp, #4]
    a89e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8a2:	f003 0301 	and.w	r3, r3, #1
    a8a6:	2b00      	cmp	r3, #0
    a8a8:	d106      	bne.n	a8b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    a8aa:	4a05      	ldr	r2, [pc, #20]	; (a8c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    a8ac:	9b01      	ldr	r3, [sp, #4]
    a8ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8b2:	2b00      	cmp	r3, #0
    a8b4:	d100      	bne.n	a8b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a8b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a8b8:	bf00      	nop
    a8ba:	b003      	add	sp, #12
    a8bc:	f85d fb04 	ldr.w	pc, [sp], #4
    a8c0:	1fff9274 	.word	0x1fff9274
    a8c4:	1fff9270 	.word	0x1fff9270

0000a8c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    a8c8:	b500      	push	{lr}
    a8ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a8cc:	f7f6 f9b0 	bl	c30 <Sys_GetCoreID>
    a8d0:	4603      	mov	r3, r0
    a8d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    a8d4:	4a10      	ldr	r2, [pc, #64]	; (a918 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    a8d6:	9b01      	ldr	r3, [sp, #4]
    a8d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8dc:	2b00      	cmp	r3, #0
    a8de:	d10d      	bne.n	a8fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a8e0:	f7f6 f8d7 	bl	a92 <Port_schm_read_msr>
    a8e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a8e6:	9b00      	ldr	r3, [sp, #0]
    a8e8:	f003 0301 	and.w	r3, r3, #1
    a8ec:	2b00      	cmp	r3, #0
    a8ee:	d100      	bne.n	a8f2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a8f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    a8f2:	490a      	ldr	r1, [pc, #40]	; (a91c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    a8f4:	9b01      	ldr	r3, [sp, #4]
    a8f6:	9a00      	ldr	r2, [sp, #0]
    a8f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    a8fc:	4a06      	ldr	r2, [pc, #24]	; (a918 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    a8fe:	9b01      	ldr	r3, [sp, #4]
    a900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a904:	1c5a      	adds	r2, r3, #1
    a906:	4904      	ldr	r1, [pc, #16]	; (a918 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    a908:	9b01      	ldr	r3, [sp, #4]
    a90a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a90e:	bf00      	nop
    a910:	b003      	add	sp, #12
    a912:	f85d fb04 	ldr.w	pc, [sp], #4
    a916:	bf00      	nop
    a918:	1fff927c 	.word	0x1fff927c
    a91c:	1fff9278 	.word	0x1fff9278

0000a920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    a920:	b500      	push	{lr}
    a922:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a924:	f7f6 f984 	bl	c30 <Sys_GetCoreID>
    a928:	4603      	mov	r3, r0
    a92a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    a92c:	4a0d      	ldr	r2, [pc, #52]	; (a964 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    a92e:	9b01      	ldr	r3, [sp, #4]
    a930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a934:	1e5a      	subs	r2, r3, #1
    a936:	490b      	ldr	r1, [pc, #44]	; (a964 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    a938:	9b01      	ldr	r3, [sp, #4]
    a93a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    a93e:	4a0a      	ldr	r2, [pc, #40]	; (a968 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    a940:	9b01      	ldr	r3, [sp, #4]
    a942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a946:	f003 0301 	and.w	r3, r3, #1
    a94a:	2b00      	cmp	r3, #0
    a94c:	d106      	bne.n	a95c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    a94e:	4a05      	ldr	r2, [pc, #20]	; (a964 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    a950:	9b01      	ldr	r3, [sp, #4]
    a952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a956:	2b00      	cmp	r3, #0
    a958:	d100      	bne.n	a95c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a95a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a95c:	bf00      	nop
    a95e:	b003      	add	sp, #12
    a960:	f85d fb04 	ldr.w	pc, [sp], #4
    a964:	1fff927c 	.word	0x1fff927c
    a968:	1fff9278 	.word	0x1fff9278

0000a96c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    a96c:	b500      	push	{lr}
    a96e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a970:	f7f6 f95e 	bl	c30 <Sys_GetCoreID>
    a974:	4603      	mov	r3, r0
    a976:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    a978:	4a10      	ldr	r2, [pc, #64]	; (a9bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    a97a:	9b01      	ldr	r3, [sp, #4]
    a97c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a980:	2b00      	cmp	r3, #0
    a982:	d10d      	bne.n	a9a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a984:	f7f6 f885 	bl	a92 <Port_schm_read_msr>
    a988:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a98a:	9b00      	ldr	r3, [sp, #0]
    a98c:	f003 0301 	and.w	r3, r3, #1
    a990:	2b00      	cmp	r3, #0
    a992:	d100      	bne.n	a996 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a994:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    a996:	490a      	ldr	r1, [pc, #40]	; (a9c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    a998:	9b01      	ldr	r3, [sp, #4]
    a99a:	9a00      	ldr	r2, [sp, #0]
    a99c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    a9a0:	4a06      	ldr	r2, [pc, #24]	; (a9bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    a9a2:	9b01      	ldr	r3, [sp, #4]
    a9a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9a8:	1c5a      	adds	r2, r3, #1
    a9aa:	4904      	ldr	r1, [pc, #16]	; (a9bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    a9ac:	9b01      	ldr	r3, [sp, #4]
    a9ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a9b2:	bf00      	nop
    a9b4:	b003      	add	sp, #12
    a9b6:	f85d fb04 	ldr.w	pc, [sp], #4
    a9ba:	bf00      	nop
    a9bc:	1fff9284 	.word	0x1fff9284
    a9c0:	1fff9280 	.word	0x1fff9280

0000a9c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    a9c4:	b500      	push	{lr}
    a9c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a9c8:	f7f6 f932 	bl	c30 <Sys_GetCoreID>
    a9cc:	4603      	mov	r3, r0
    a9ce:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    a9d0:	4a0d      	ldr	r2, [pc, #52]	; (aa08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    a9d2:	9b01      	ldr	r3, [sp, #4]
    a9d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9d8:	1e5a      	subs	r2, r3, #1
    a9da:	490b      	ldr	r1, [pc, #44]	; (aa08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    a9dc:	9b01      	ldr	r3, [sp, #4]
    a9de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    a9e2:	4a0a      	ldr	r2, [pc, #40]	; (aa0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    a9e4:	9b01      	ldr	r3, [sp, #4]
    a9e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9ea:	f003 0301 	and.w	r3, r3, #1
    a9ee:	2b00      	cmp	r3, #0
    a9f0:	d106      	bne.n	aa00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    a9f2:	4a05      	ldr	r2, [pc, #20]	; (aa08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    a9f4:	9b01      	ldr	r3, [sp, #4]
    a9f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9fa:	2b00      	cmp	r3, #0
    a9fc:	d100      	bne.n	aa00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a9fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aa00:	bf00      	nop
    aa02:	b003      	add	sp, #12
    aa04:	f85d fb04 	ldr.w	pc, [sp], #4
    aa08:	1fff9284 	.word	0x1fff9284
    aa0c:	1fff9280 	.word	0x1fff9280

0000aa10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    aa10:	b500      	push	{lr}
    aa12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aa14:	f7f6 f90c 	bl	c30 <Sys_GetCoreID>
    aa18:	4603      	mov	r3, r0
    aa1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    aa1c:	4a10      	ldr	r2, [pc, #64]	; (aa60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    aa1e:	9b01      	ldr	r3, [sp, #4]
    aa20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa24:	2b00      	cmp	r3, #0
    aa26:	d10d      	bne.n	aa44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aa28:	f7f6 f833 	bl	a92 <Port_schm_read_msr>
    aa2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aa2e:	9b00      	ldr	r3, [sp, #0]
    aa30:	f003 0301 	and.w	r3, r3, #1
    aa34:	2b00      	cmp	r3, #0
    aa36:	d100      	bne.n	aa3a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aa38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    aa3a:	490a      	ldr	r1, [pc, #40]	; (aa64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    aa3c:	9b01      	ldr	r3, [sp, #4]
    aa3e:	9a00      	ldr	r2, [sp, #0]
    aa40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    aa44:	4a06      	ldr	r2, [pc, #24]	; (aa60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    aa46:	9b01      	ldr	r3, [sp, #4]
    aa48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa4c:	1c5a      	adds	r2, r3, #1
    aa4e:	4904      	ldr	r1, [pc, #16]	; (aa60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    aa50:	9b01      	ldr	r3, [sp, #4]
    aa52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aa56:	bf00      	nop
    aa58:	b003      	add	sp, #12
    aa5a:	f85d fb04 	ldr.w	pc, [sp], #4
    aa5e:	bf00      	nop
    aa60:	1fff928c 	.word	0x1fff928c
    aa64:	1fff9288 	.word	0x1fff9288

0000aa68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    aa68:	b500      	push	{lr}
    aa6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aa6c:	f7f6 f8e0 	bl	c30 <Sys_GetCoreID>
    aa70:	4603      	mov	r3, r0
    aa72:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    aa74:	4a0d      	ldr	r2, [pc, #52]	; (aaac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    aa76:	9b01      	ldr	r3, [sp, #4]
    aa78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa7c:	1e5a      	subs	r2, r3, #1
    aa7e:	490b      	ldr	r1, [pc, #44]	; (aaac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    aa80:	9b01      	ldr	r3, [sp, #4]
    aa82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    aa86:	4a0a      	ldr	r2, [pc, #40]	; (aab0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    aa88:	9b01      	ldr	r3, [sp, #4]
    aa8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa8e:	f003 0301 	and.w	r3, r3, #1
    aa92:	2b00      	cmp	r3, #0
    aa94:	d106      	bne.n	aaa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    aa96:	4a05      	ldr	r2, [pc, #20]	; (aaac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    aa98:	9b01      	ldr	r3, [sp, #4]
    aa9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa9e:	2b00      	cmp	r3, #0
    aaa0:	d100      	bne.n	aaa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aaa2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aaa4:	bf00      	nop
    aaa6:	b003      	add	sp, #12
    aaa8:	f85d fb04 	ldr.w	pc, [sp], #4
    aaac:	1fff928c 	.word	0x1fff928c
    aab0:	1fff9288 	.word	0x1fff9288

0000aab4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    aab4:	b500      	push	{lr}
    aab6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aab8:	f7f6 f8ba 	bl	c30 <Sys_GetCoreID>
    aabc:	4603      	mov	r3, r0
    aabe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    aac0:	4a10      	ldr	r2, [pc, #64]	; (ab04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    aac2:	9b01      	ldr	r3, [sp, #4]
    aac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aac8:	2b00      	cmp	r3, #0
    aaca:	d10d      	bne.n	aae8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aacc:	f7f5 ffe1 	bl	a92 <Port_schm_read_msr>
    aad0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aad2:	9b00      	ldr	r3, [sp, #0]
    aad4:	f003 0301 	and.w	r3, r3, #1
    aad8:	2b00      	cmp	r3, #0
    aada:	d100      	bne.n	aade <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aadc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    aade:	490a      	ldr	r1, [pc, #40]	; (ab08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    aae0:	9b01      	ldr	r3, [sp, #4]
    aae2:	9a00      	ldr	r2, [sp, #0]
    aae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    aae8:	4a06      	ldr	r2, [pc, #24]	; (ab04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    aaea:	9b01      	ldr	r3, [sp, #4]
    aaec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaf0:	1c5a      	adds	r2, r3, #1
    aaf2:	4904      	ldr	r1, [pc, #16]	; (ab04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    aaf4:	9b01      	ldr	r3, [sp, #4]
    aaf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aafa:	bf00      	nop
    aafc:	b003      	add	sp, #12
    aafe:	f85d fb04 	ldr.w	pc, [sp], #4
    ab02:	bf00      	nop
    ab04:	1fff9294 	.word	0x1fff9294
    ab08:	1fff9290 	.word	0x1fff9290

0000ab0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    ab0c:	b500      	push	{lr}
    ab0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ab10:	f7f6 f88e 	bl	c30 <Sys_GetCoreID>
    ab14:	4603      	mov	r3, r0
    ab16:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    ab18:	4a0d      	ldr	r2, [pc, #52]	; (ab50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    ab1a:	9b01      	ldr	r3, [sp, #4]
    ab1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab20:	1e5a      	subs	r2, r3, #1
    ab22:	490b      	ldr	r1, [pc, #44]	; (ab50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    ab24:	9b01      	ldr	r3, [sp, #4]
    ab26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    ab2a:	4a0a      	ldr	r2, [pc, #40]	; (ab54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    ab2c:	9b01      	ldr	r3, [sp, #4]
    ab2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab32:	f003 0301 	and.w	r3, r3, #1
    ab36:	2b00      	cmp	r3, #0
    ab38:	d106      	bne.n	ab48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    ab3a:	4a05      	ldr	r2, [pc, #20]	; (ab50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    ab3c:	9b01      	ldr	r3, [sp, #4]
    ab3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab42:	2b00      	cmp	r3, #0
    ab44:	d100      	bne.n	ab48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ab46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ab48:	bf00      	nop
    ab4a:	b003      	add	sp, #12
    ab4c:	f85d fb04 	ldr.w	pc, [sp], #4
    ab50:	1fff9294 	.word	0x1fff9294
    ab54:	1fff9290 	.word	0x1fff9290

0000ab58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    ab58:	b500      	push	{lr}
    ab5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ab5c:	f7f6 f868 	bl	c30 <Sys_GetCoreID>
    ab60:	4603      	mov	r3, r0
    ab62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    ab64:	4a10      	ldr	r2, [pc, #64]	; (aba8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    ab66:	9b01      	ldr	r3, [sp, #4]
    ab68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab6c:	2b00      	cmp	r3, #0
    ab6e:	d10d      	bne.n	ab8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ab70:	f7f5 ff8f 	bl	a92 <Port_schm_read_msr>
    ab74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ab76:	9b00      	ldr	r3, [sp, #0]
    ab78:	f003 0301 	and.w	r3, r3, #1
    ab7c:	2b00      	cmp	r3, #0
    ab7e:	d100      	bne.n	ab82 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ab80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    ab82:	490a      	ldr	r1, [pc, #40]	; (abac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    ab84:	9b01      	ldr	r3, [sp, #4]
    ab86:	9a00      	ldr	r2, [sp, #0]
    ab88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    ab8c:	4a06      	ldr	r2, [pc, #24]	; (aba8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    ab8e:	9b01      	ldr	r3, [sp, #4]
    ab90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab94:	1c5a      	adds	r2, r3, #1
    ab96:	4904      	ldr	r1, [pc, #16]	; (aba8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    ab98:	9b01      	ldr	r3, [sp, #4]
    ab9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ab9e:	bf00      	nop
    aba0:	b003      	add	sp, #12
    aba2:	f85d fb04 	ldr.w	pc, [sp], #4
    aba6:	bf00      	nop
    aba8:	1fff929c 	.word	0x1fff929c
    abac:	1fff9298 	.word	0x1fff9298

0000abb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    abb0:	b500      	push	{lr}
    abb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    abb4:	f7f6 f83c 	bl	c30 <Sys_GetCoreID>
    abb8:	4603      	mov	r3, r0
    abba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    abbc:	4a0d      	ldr	r2, [pc, #52]	; (abf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    abbe:	9b01      	ldr	r3, [sp, #4]
    abc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abc4:	1e5a      	subs	r2, r3, #1
    abc6:	490b      	ldr	r1, [pc, #44]	; (abf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    abc8:	9b01      	ldr	r3, [sp, #4]
    abca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    abce:	4a0a      	ldr	r2, [pc, #40]	; (abf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    abd0:	9b01      	ldr	r3, [sp, #4]
    abd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abd6:	f003 0301 	and.w	r3, r3, #1
    abda:	2b00      	cmp	r3, #0
    abdc:	d106      	bne.n	abec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    abde:	4a05      	ldr	r2, [pc, #20]	; (abf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    abe0:	9b01      	ldr	r3, [sp, #4]
    abe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abe6:	2b00      	cmp	r3, #0
    abe8:	d100      	bne.n	abec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    abea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    abec:	bf00      	nop
    abee:	b003      	add	sp, #12
    abf0:	f85d fb04 	ldr.w	pc, [sp], #4
    abf4:	1fff929c 	.word	0x1fff929c
    abf8:	1fff9298 	.word	0x1fff9298

0000abfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    abfc:	b500      	push	{lr}
    abfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ac00:	f7f6 f816 	bl	c30 <Sys_GetCoreID>
    ac04:	4603      	mov	r3, r0
    ac06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    ac08:	4a10      	ldr	r2, [pc, #64]	; (ac4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    ac0a:	9b01      	ldr	r3, [sp, #4]
    ac0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac10:	2b00      	cmp	r3, #0
    ac12:	d10d      	bne.n	ac30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ac14:	f7f5 ff3d 	bl	a92 <Port_schm_read_msr>
    ac18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ac1a:	9b00      	ldr	r3, [sp, #0]
    ac1c:	f003 0301 	and.w	r3, r3, #1
    ac20:	2b00      	cmp	r3, #0
    ac22:	d100      	bne.n	ac26 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ac24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    ac26:	490a      	ldr	r1, [pc, #40]	; (ac50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    ac28:	9b01      	ldr	r3, [sp, #4]
    ac2a:	9a00      	ldr	r2, [sp, #0]
    ac2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    ac30:	4a06      	ldr	r2, [pc, #24]	; (ac4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    ac32:	9b01      	ldr	r3, [sp, #4]
    ac34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac38:	1c5a      	adds	r2, r3, #1
    ac3a:	4904      	ldr	r1, [pc, #16]	; (ac4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    ac3c:	9b01      	ldr	r3, [sp, #4]
    ac3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ac42:	bf00      	nop
    ac44:	b003      	add	sp, #12
    ac46:	f85d fb04 	ldr.w	pc, [sp], #4
    ac4a:	bf00      	nop
    ac4c:	1fff92a4 	.word	0x1fff92a4
    ac50:	1fff92a0 	.word	0x1fff92a0

0000ac54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    ac54:	b500      	push	{lr}
    ac56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ac58:	f7f5 ffea 	bl	c30 <Sys_GetCoreID>
    ac5c:	4603      	mov	r3, r0
    ac5e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    ac60:	4a0d      	ldr	r2, [pc, #52]	; (ac98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    ac62:	9b01      	ldr	r3, [sp, #4]
    ac64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac68:	1e5a      	subs	r2, r3, #1
    ac6a:	490b      	ldr	r1, [pc, #44]	; (ac98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    ac6c:	9b01      	ldr	r3, [sp, #4]
    ac6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    ac72:	4a0a      	ldr	r2, [pc, #40]	; (ac9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    ac74:	9b01      	ldr	r3, [sp, #4]
    ac76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac7a:	f003 0301 	and.w	r3, r3, #1
    ac7e:	2b00      	cmp	r3, #0
    ac80:	d106      	bne.n	ac90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    ac82:	4a05      	ldr	r2, [pc, #20]	; (ac98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    ac84:	9b01      	ldr	r3, [sp, #4]
    ac86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac8a:	2b00      	cmp	r3, #0
    ac8c:	d100      	bne.n	ac90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ac8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ac90:	bf00      	nop
    ac92:	b003      	add	sp, #12
    ac94:	f85d fb04 	ldr.w	pc, [sp], #4
    ac98:	1fff92a4 	.word	0x1fff92a4
    ac9c:	1fff92a0 	.word	0x1fff92a0

0000aca0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    aca0:	b500      	push	{lr}
    aca2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aca4:	f7f5 ffc4 	bl	c30 <Sys_GetCoreID>
    aca8:	4603      	mov	r3, r0
    acaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    acac:	4a10      	ldr	r2, [pc, #64]	; (acf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    acae:	9b01      	ldr	r3, [sp, #4]
    acb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acb4:	2b00      	cmp	r3, #0
    acb6:	d10d      	bne.n	acd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    acb8:	f7f5 feeb 	bl	a92 <Port_schm_read_msr>
    acbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    acbe:	9b00      	ldr	r3, [sp, #0]
    acc0:	f003 0301 	and.w	r3, r3, #1
    acc4:	2b00      	cmp	r3, #0
    acc6:	d100      	bne.n	acca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    acc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    acca:	490a      	ldr	r1, [pc, #40]	; (acf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    accc:	9b01      	ldr	r3, [sp, #4]
    acce:	9a00      	ldr	r2, [sp, #0]
    acd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    acd4:	4a06      	ldr	r2, [pc, #24]	; (acf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    acd6:	9b01      	ldr	r3, [sp, #4]
    acd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acdc:	1c5a      	adds	r2, r3, #1
    acde:	4904      	ldr	r1, [pc, #16]	; (acf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    ace0:	9b01      	ldr	r3, [sp, #4]
    ace2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ace6:	bf00      	nop
    ace8:	b003      	add	sp, #12
    acea:	f85d fb04 	ldr.w	pc, [sp], #4
    acee:	bf00      	nop
    acf0:	1fff92ac 	.word	0x1fff92ac
    acf4:	1fff92a8 	.word	0x1fff92a8

0000acf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    acf8:	b500      	push	{lr}
    acfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    acfc:	f7f5 ff98 	bl	c30 <Sys_GetCoreID>
    ad00:	4603      	mov	r3, r0
    ad02:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    ad04:	4a0d      	ldr	r2, [pc, #52]	; (ad3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    ad06:	9b01      	ldr	r3, [sp, #4]
    ad08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad0c:	1e5a      	subs	r2, r3, #1
    ad0e:	490b      	ldr	r1, [pc, #44]	; (ad3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    ad10:	9b01      	ldr	r3, [sp, #4]
    ad12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    ad16:	4a0a      	ldr	r2, [pc, #40]	; (ad40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    ad18:	9b01      	ldr	r3, [sp, #4]
    ad1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad1e:	f003 0301 	and.w	r3, r3, #1
    ad22:	2b00      	cmp	r3, #0
    ad24:	d106      	bne.n	ad34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    ad26:	4a05      	ldr	r2, [pc, #20]	; (ad3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    ad28:	9b01      	ldr	r3, [sp, #4]
    ad2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad2e:	2b00      	cmp	r3, #0
    ad30:	d100      	bne.n	ad34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ad32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ad34:	bf00      	nop
    ad36:	b003      	add	sp, #12
    ad38:	f85d fb04 	ldr.w	pc, [sp], #4
    ad3c:	1fff92ac 	.word	0x1fff92ac
    ad40:	1fff92a8 	.word	0x1fff92a8

0000ad44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    ad44:	b500      	push	{lr}
    ad46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad48:	f7f5 ff72 	bl	c30 <Sys_GetCoreID>
    ad4c:	4603      	mov	r3, r0
    ad4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    ad50:	4a10      	ldr	r2, [pc, #64]	; (ad94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    ad52:	9b01      	ldr	r3, [sp, #4]
    ad54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad58:	2b00      	cmp	r3, #0
    ad5a:	d10d      	bne.n	ad78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ad5c:	f7f5 fe99 	bl	a92 <Port_schm_read_msr>
    ad60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ad62:	9b00      	ldr	r3, [sp, #0]
    ad64:	f003 0301 	and.w	r3, r3, #1
    ad68:	2b00      	cmp	r3, #0
    ad6a:	d100      	bne.n	ad6e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ad6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    ad6e:	490a      	ldr	r1, [pc, #40]	; (ad98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    ad70:	9b01      	ldr	r3, [sp, #4]
    ad72:	9a00      	ldr	r2, [sp, #0]
    ad74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    ad78:	4a06      	ldr	r2, [pc, #24]	; (ad94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    ad7a:	9b01      	ldr	r3, [sp, #4]
    ad7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad80:	1c5a      	adds	r2, r3, #1
    ad82:	4904      	ldr	r1, [pc, #16]	; (ad94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    ad84:	9b01      	ldr	r3, [sp, #4]
    ad86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ad8a:	bf00      	nop
    ad8c:	b003      	add	sp, #12
    ad8e:	f85d fb04 	ldr.w	pc, [sp], #4
    ad92:	bf00      	nop
    ad94:	1fff92b4 	.word	0x1fff92b4
    ad98:	1fff92b0 	.word	0x1fff92b0

0000ad9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    ad9c:	b500      	push	{lr}
    ad9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ada0:	f7f5 ff46 	bl	c30 <Sys_GetCoreID>
    ada4:	4603      	mov	r3, r0
    ada6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    ada8:	4a0d      	ldr	r2, [pc, #52]	; (ade0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    adaa:	9b01      	ldr	r3, [sp, #4]
    adac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adb0:	1e5a      	subs	r2, r3, #1
    adb2:	490b      	ldr	r1, [pc, #44]	; (ade0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    adb4:	9b01      	ldr	r3, [sp, #4]
    adb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    adba:	4a0a      	ldr	r2, [pc, #40]	; (ade4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    adbc:	9b01      	ldr	r3, [sp, #4]
    adbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adc2:	f003 0301 	and.w	r3, r3, #1
    adc6:	2b00      	cmp	r3, #0
    adc8:	d106      	bne.n	add8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    adca:	4a05      	ldr	r2, [pc, #20]	; (ade0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    adcc:	9b01      	ldr	r3, [sp, #4]
    adce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    add2:	2b00      	cmp	r3, #0
    add4:	d100      	bne.n	add8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    add6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    add8:	bf00      	nop
    adda:	b003      	add	sp, #12
    addc:	f85d fb04 	ldr.w	pc, [sp], #4
    ade0:	1fff92b4 	.word	0x1fff92b4
    ade4:	1fff92b0 	.word	0x1fff92b0

0000ade8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    ade8:	b500      	push	{lr}
    adea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    adec:	f7f5 ff20 	bl	c30 <Sys_GetCoreID>
    adf0:	4603      	mov	r3, r0
    adf2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    adf4:	4a10      	ldr	r2, [pc, #64]	; (ae38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    adf6:	9b01      	ldr	r3, [sp, #4]
    adf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adfc:	2b00      	cmp	r3, #0
    adfe:	d10d      	bne.n	ae1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ae00:	f7f5 fe47 	bl	a92 <Port_schm_read_msr>
    ae04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ae06:	9b00      	ldr	r3, [sp, #0]
    ae08:	f003 0301 	and.w	r3, r3, #1
    ae0c:	2b00      	cmp	r3, #0
    ae0e:	d100      	bne.n	ae12 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ae10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    ae12:	490a      	ldr	r1, [pc, #40]	; (ae3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    ae14:	9b01      	ldr	r3, [sp, #4]
    ae16:	9a00      	ldr	r2, [sp, #0]
    ae18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    ae1c:	4a06      	ldr	r2, [pc, #24]	; (ae38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    ae1e:	9b01      	ldr	r3, [sp, #4]
    ae20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae24:	1c5a      	adds	r2, r3, #1
    ae26:	4904      	ldr	r1, [pc, #16]	; (ae38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    ae28:	9b01      	ldr	r3, [sp, #4]
    ae2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ae2e:	bf00      	nop
    ae30:	b003      	add	sp, #12
    ae32:	f85d fb04 	ldr.w	pc, [sp], #4
    ae36:	bf00      	nop
    ae38:	1fff92bc 	.word	0x1fff92bc
    ae3c:	1fff92b8 	.word	0x1fff92b8

0000ae40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    ae40:	b500      	push	{lr}
    ae42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae44:	f7f5 fef4 	bl	c30 <Sys_GetCoreID>
    ae48:	4603      	mov	r3, r0
    ae4a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    ae4c:	4a0d      	ldr	r2, [pc, #52]	; (ae84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    ae4e:	9b01      	ldr	r3, [sp, #4]
    ae50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae54:	1e5a      	subs	r2, r3, #1
    ae56:	490b      	ldr	r1, [pc, #44]	; (ae84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    ae58:	9b01      	ldr	r3, [sp, #4]
    ae5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    ae5e:	4a0a      	ldr	r2, [pc, #40]	; (ae88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    ae60:	9b01      	ldr	r3, [sp, #4]
    ae62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae66:	f003 0301 	and.w	r3, r3, #1
    ae6a:	2b00      	cmp	r3, #0
    ae6c:	d106      	bne.n	ae7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    ae6e:	4a05      	ldr	r2, [pc, #20]	; (ae84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    ae70:	9b01      	ldr	r3, [sp, #4]
    ae72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae76:	2b00      	cmp	r3, #0
    ae78:	d100      	bne.n	ae7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ae7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ae7c:	bf00      	nop
    ae7e:	b003      	add	sp, #12
    ae80:	f85d fb04 	ldr.w	pc, [sp], #4
    ae84:	1fff92bc 	.word	0x1fff92bc
    ae88:	1fff92b8 	.word	0x1fff92b8

0000ae8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    ae8c:	b500      	push	{lr}
    ae8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae90:	f7f5 fece 	bl	c30 <Sys_GetCoreID>
    ae94:	4603      	mov	r3, r0
    ae96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    ae98:	4a10      	ldr	r2, [pc, #64]	; (aedc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    ae9a:	9b01      	ldr	r3, [sp, #4]
    ae9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aea0:	2b00      	cmp	r3, #0
    aea2:	d10d      	bne.n	aec0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aea4:	f7f5 fdf5 	bl	a92 <Port_schm_read_msr>
    aea8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aeaa:	9b00      	ldr	r3, [sp, #0]
    aeac:	f003 0301 	and.w	r3, r3, #1
    aeb0:	2b00      	cmp	r3, #0
    aeb2:	d100      	bne.n	aeb6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aeb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    aeb6:	490a      	ldr	r1, [pc, #40]	; (aee0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    aeb8:	9b01      	ldr	r3, [sp, #4]
    aeba:	9a00      	ldr	r2, [sp, #0]
    aebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    aec0:	4a06      	ldr	r2, [pc, #24]	; (aedc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    aec2:	9b01      	ldr	r3, [sp, #4]
    aec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aec8:	1c5a      	adds	r2, r3, #1
    aeca:	4904      	ldr	r1, [pc, #16]	; (aedc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    aecc:	9b01      	ldr	r3, [sp, #4]
    aece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aed2:	bf00      	nop
    aed4:	b003      	add	sp, #12
    aed6:	f85d fb04 	ldr.w	pc, [sp], #4
    aeda:	bf00      	nop
    aedc:	1fff92c4 	.word	0x1fff92c4
    aee0:	1fff92c0 	.word	0x1fff92c0

0000aee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    aee4:	b500      	push	{lr}
    aee6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aee8:	f7f5 fea2 	bl	c30 <Sys_GetCoreID>
    aeec:	4603      	mov	r3, r0
    aeee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    aef0:	4a0d      	ldr	r2, [pc, #52]	; (af28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    aef2:	9b01      	ldr	r3, [sp, #4]
    aef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aef8:	1e5a      	subs	r2, r3, #1
    aefa:	490b      	ldr	r1, [pc, #44]	; (af28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    aefc:	9b01      	ldr	r3, [sp, #4]
    aefe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    af02:	4a0a      	ldr	r2, [pc, #40]	; (af2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    af04:	9b01      	ldr	r3, [sp, #4]
    af06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af0a:	f003 0301 	and.w	r3, r3, #1
    af0e:	2b00      	cmp	r3, #0
    af10:	d106      	bne.n	af20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    af12:	4a05      	ldr	r2, [pc, #20]	; (af28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    af14:	9b01      	ldr	r3, [sp, #4]
    af16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af1a:	2b00      	cmp	r3, #0
    af1c:	d100      	bne.n	af20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    af1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    af20:	bf00      	nop
    af22:	b003      	add	sp, #12
    af24:	f85d fb04 	ldr.w	pc, [sp], #4
    af28:	1fff92c4 	.word	0x1fff92c4
    af2c:	1fff92c0 	.word	0x1fff92c0

0000af30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    af30:	b500      	push	{lr}
    af32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af34:	f7f5 fe7c 	bl	c30 <Sys_GetCoreID>
    af38:	4603      	mov	r3, r0
    af3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    af3c:	4a10      	ldr	r2, [pc, #64]	; (af80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    af3e:	9b01      	ldr	r3, [sp, #4]
    af40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af44:	2b00      	cmp	r3, #0
    af46:	d10d      	bne.n	af64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    af48:	f7f5 fda3 	bl	a92 <Port_schm_read_msr>
    af4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    af4e:	9b00      	ldr	r3, [sp, #0]
    af50:	f003 0301 	and.w	r3, r3, #1
    af54:	2b00      	cmp	r3, #0
    af56:	d100      	bne.n	af5a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    af58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    af5a:	490a      	ldr	r1, [pc, #40]	; (af84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    af5c:	9b01      	ldr	r3, [sp, #4]
    af5e:	9a00      	ldr	r2, [sp, #0]
    af60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    af64:	4a06      	ldr	r2, [pc, #24]	; (af80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    af66:	9b01      	ldr	r3, [sp, #4]
    af68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af6c:	1c5a      	adds	r2, r3, #1
    af6e:	4904      	ldr	r1, [pc, #16]	; (af80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    af70:	9b01      	ldr	r3, [sp, #4]
    af72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    af76:	bf00      	nop
    af78:	b003      	add	sp, #12
    af7a:	f85d fb04 	ldr.w	pc, [sp], #4
    af7e:	bf00      	nop
    af80:	1fff92cc 	.word	0x1fff92cc
    af84:	1fff92c8 	.word	0x1fff92c8

0000af88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    af88:	b500      	push	{lr}
    af8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af8c:	f7f5 fe50 	bl	c30 <Sys_GetCoreID>
    af90:	4603      	mov	r3, r0
    af92:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    af94:	4a0d      	ldr	r2, [pc, #52]	; (afcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    af96:	9b01      	ldr	r3, [sp, #4]
    af98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af9c:	1e5a      	subs	r2, r3, #1
    af9e:	490b      	ldr	r1, [pc, #44]	; (afcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    afa0:	9b01      	ldr	r3, [sp, #4]
    afa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    afa6:	4a0a      	ldr	r2, [pc, #40]	; (afd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    afa8:	9b01      	ldr	r3, [sp, #4]
    afaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afae:	f003 0301 	and.w	r3, r3, #1
    afb2:	2b00      	cmp	r3, #0
    afb4:	d106      	bne.n	afc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    afb6:	4a05      	ldr	r2, [pc, #20]	; (afcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    afb8:	9b01      	ldr	r3, [sp, #4]
    afba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afbe:	2b00      	cmp	r3, #0
    afc0:	d100      	bne.n	afc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    afc2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    afc4:	bf00      	nop
    afc6:	b003      	add	sp, #12
    afc8:	f85d fb04 	ldr.w	pc, [sp], #4
    afcc:	1fff92cc 	.word	0x1fff92cc
    afd0:	1fff92c8 	.word	0x1fff92c8

0000afd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    afd4:	b500      	push	{lr}
    afd6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    afd8:	f7f5 fe2a 	bl	c30 <Sys_GetCoreID>
    afdc:	4603      	mov	r3, r0
    afde:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    afe0:	4a10      	ldr	r2, [pc, #64]	; (b024 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    afe2:	9b01      	ldr	r3, [sp, #4]
    afe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afe8:	2b00      	cmp	r3, #0
    afea:	d10d      	bne.n	b008 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    afec:	f7f5 fd51 	bl	a92 <Port_schm_read_msr>
    aff0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aff2:	9b00      	ldr	r3, [sp, #0]
    aff4:	f003 0301 	and.w	r3, r3, #1
    aff8:	2b00      	cmp	r3, #0
    affa:	d100      	bne.n	affe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    affc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    affe:	490a      	ldr	r1, [pc, #40]	; (b028 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    b000:	9b01      	ldr	r3, [sp, #4]
    b002:	9a00      	ldr	r2, [sp, #0]
    b004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    b008:	4a06      	ldr	r2, [pc, #24]	; (b024 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    b00a:	9b01      	ldr	r3, [sp, #4]
    b00c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b010:	1c5a      	adds	r2, r3, #1
    b012:	4904      	ldr	r1, [pc, #16]	; (b024 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    b014:	9b01      	ldr	r3, [sp, #4]
    b016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b01a:	bf00      	nop
    b01c:	b003      	add	sp, #12
    b01e:	f85d fb04 	ldr.w	pc, [sp], #4
    b022:	bf00      	nop
    b024:	1fff92d4 	.word	0x1fff92d4
    b028:	1fff92d0 	.word	0x1fff92d0

0000b02c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    b02c:	b500      	push	{lr}
    b02e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b030:	f7f5 fdfe 	bl	c30 <Sys_GetCoreID>
    b034:	4603      	mov	r3, r0
    b036:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    b038:	4a0d      	ldr	r2, [pc, #52]	; (b070 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    b03a:	9b01      	ldr	r3, [sp, #4]
    b03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b040:	1e5a      	subs	r2, r3, #1
    b042:	490b      	ldr	r1, [pc, #44]	; (b070 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    b044:	9b01      	ldr	r3, [sp, #4]
    b046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    b04a:	4a0a      	ldr	r2, [pc, #40]	; (b074 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    b04c:	9b01      	ldr	r3, [sp, #4]
    b04e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b052:	f003 0301 	and.w	r3, r3, #1
    b056:	2b00      	cmp	r3, #0
    b058:	d106      	bne.n	b068 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    b05a:	4a05      	ldr	r2, [pc, #20]	; (b070 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    b05c:	9b01      	ldr	r3, [sp, #4]
    b05e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b062:	2b00      	cmp	r3, #0
    b064:	d100      	bne.n	b068 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b066:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b068:	bf00      	nop
    b06a:	b003      	add	sp, #12
    b06c:	f85d fb04 	ldr.w	pc, [sp], #4
    b070:	1fff92d4 	.word	0x1fff92d4
    b074:	1fff92d0 	.word	0x1fff92d0

0000b078 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    b078:	b500      	push	{lr}
    b07a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b07c:	f7f5 fdd8 	bl	c30 <Sys_GetCoreID>
    b080:	4603      	mov	r3, r0
    b082:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    b084:	4a10      	ldr	r2, [pc, #64]	; (b0c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    b086:	9b01      	ldr	r3, [sp, #4]
    b088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b08c:	2b00      	cmp	r3, #0
    b08e:	d10d      	bne.n	b0ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b090:	f7f5 fcff 	bl	a92 <Port_schm_read_msr>
    b094:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b096:	9b00      	ldr	r3, [sp, #0]
    b098:	f003 0301 	and.w	r3, r3, #1
    b09c:	2b00      	cmp	r3, #0
    b09e:	d100      	bne.n	b0a2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b0a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    b0a2:	490a      	ldr	r1, [pc, #40]	; (b0cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    b0a4:	9b01      	ldr	r3, [sp, #4]
    b0a6:	9a00      	ldr	r2, [sp, #0]
    b0a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    b0ac:	4a06      	ldr	r2, [pc, #24]	; (b0c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    b0ae:	9b01      	ldr	r3, [sp, #4]
    b0b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0b4:	1c5a      	adds	r2, r3, #1
    b0b6:	4904      	ldr	r1, [pc, #16]	; (b0c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    b0b8:	9b01      	ldr	r3, [sp, #4]
    b0ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b0be:	bf00      	nop
    b0c0:	b003      	add	sp, #12
    b0c2:	f85d fb04 	ldr.w	pc, [sp], #4
    b0c6:	bf00      	nop
    b0c8:	1fff92dc 	.word	0x1fff92dc
    b0cc:	1fff92d8 	.word	0x1fff92d8

0000b0d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    b0d0:	b500      	push	{lr}
    b0d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b0d4:	f7f5 fdac 	bl	c30 <Sys_GetCoreID>
    b0d8:	4603      	mov	r3, r0
    b0da:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    b0dc:	4a0d      	ldr	r2, [pc, #52]	; (b114 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    b0de:	9b01      	ldr	r3, [sp, #4]
    b0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0e4:	1e5a      	subs	r2, r3, #1
    b0e6:	490b      	ldr	r1, [pc, #44]	; (b114 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    b0e8:	9b01      	ldr	r3, [sp, #4]
    b0ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    b0ee:	4a0a      	ldr	r2, [pc, #40]	; (b118 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    b0f0:	9b01      	ldr	r3, [sp, #4]
    b0f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0f6:	f003 0301 	and.w	r3, r3, #1
    b0fa:	2b00      	cmp	r3, #0
    b0fc:	d106      	bne.n	b10c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    b0fe:	4a05      	ldr	r2, [pc, #20]	; (b114 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    b100:	9b01      	ldr	r3, [sp, #4]
    b102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b106:	2b00      	cmp	r3, #0
    b108:	d100      	bne.n	b10c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b10a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b10c:	bf00      	nop
    b10e:	b003      	add	sp, #12
    b110:	f85d fb04 	ldr.w	pc, [sp], #4
    b114:	1fff92dc 	.word	0x1fff92dc
    b118:	1fff92d8 	.word	0x1fff92d8

0000b11c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    b11c:	b500      	push	{lr}
    b11e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b120:	f7f5 fd86 	bl	c30 <Sys_GetCoreID>
    b124:	4603      	mov	r3, r0
    b126:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    b128:	4a10      	ldr	r2, [pc, #64]	; (b16c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    b12a:	9b01      	ldr	r3, [sp, #4]
    b12c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b130:	2b00      	cmp	r3, #0
    b132:	d10d      	bne.n	b150 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b134:	f7f5 fcad 	bl	a92 <Port_schm_read_msr>
    b138:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b13a:	9b00      	ldr	r3, [sp, #0]
    b13c:	f003 0301 	and.w	r3, r3, #1
    b140:	2b00      	cmp	r3, #0
    b142:	d100      	bne.n	b146 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b144:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    b146:	490a      	ldr	r1, [pc, #40]	; (b170 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    b148:	9b01      	ldr	r3, [sp, #4]
    b14a:	9a00      	ldr	r2, [sp, #0]
    b14c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    b150:	4a06      	ldr	r2, [pc, #24]	; (b16c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    b152:	9b01      	ldr	r3, [sp, #4]
    b154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b158:	1c5a      	adds	r2, r3, #1
    b15a:	4904      	ldr	r1, [pc, #16]	; (b16c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    b15c:	9b01      	ldr	r3, [sp, #4]
    b15e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b162:	bf00      	nop
    b164:	b003      	add	sp, #12
    b166:	f85d fb04 	ldr.w	pc, [sp], #4
    b16a:	bf00      	nop
    b16c:	1fff92e4 	.word	0x1fff92e4
    b170:	1fff92e0 	.word	0x1fff92e0

0000b174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    b174:	b500      	push	{lr}
    b176:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b178:	f7f5 fd5a 	bl	c30 <Sys_GetCoreID>
    b17c:	4603      	mov	r3, r0
    b17e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    b180:	4a0d      	ldr	r2, [pc, #52]	; (b1b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    b182:	9b01      	ldr	r3, [sp, #4]
    b184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b188:	1e5a      	subs	r2, r3, #1
    b18a:	490b      	ldr	r1, [pc, #44]	; (b1b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    b18c:	9b01      	ldr	r3, [sp, #4]
    b18e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    b192:	4a0a      	ldr	r2, [pc, #40]	; (b1bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    b194:	9b01      	ldr	r3, [sp, #4]
    b196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b19a:	f003 0301 	and.w	r3, r3, #1
    b19e:	2b00      	cmp	r3, #0
    b1a0:	d106      	bne.n	b1b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    b1a2:	4a05      	ldr	r2, [pc, #20]	; (b1b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    b1a4:	9b01      	ldr	r3, [sp, #4]
    b1a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1aa:	2b00      	cmp	r3, #0
    b1ac:	d100      	bne.n	b1b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b1ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b1b0:	bf00      	nop
    b1b2:	b003      	add	sp, #12
    b1b4:	f85d fb04 	ldr.w	pc, [sp], #4
    b1b8:	1fff92e4 	.word	0x1fff92e4
    b1bc:	1fff92e0 	.word	0x1fff92e0

0000b1c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    b1c0:	b500      	push	{lr}
    b1c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b1c4:	f7f5 fd34 	bl	c30 <Sys_GetCoreID>
    b1c8:	4603      	mov	r3, r0
    b1ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    b1cc:	4a10      	ldr	r2, [pc, #64]	; (b210 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    b1ce:	9b01      	ldr	r3, [sp, #4]
    b1d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1d4:	2b00      	cmp	r3, #0
    b1d6:	d10d      	bne.n	b1f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b1d8:	f7f5 fc5b 	bl	a92 <Port_schm_read_msr>
    b1dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b1de:	9b00      	ldr	r3, [sp, #0]
    b1e0:	f003 0301 	and.w	r3, r3, #1
    b1e4:	2b00      	cmp	r3, #0
    b1e6:	d100      	bne.n	b1ea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b1e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    b1ea:	490a      	ldr	r1, [pc, #40]	; (b214 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    b1ec:	9b01      	ldr	r3, [sp, #4]
    b1ee:	9a00      	ldr	r2, [sp, #0]
    b1f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    b1f4:	4a06      	ldr	r2, [pc, #24]	; (b210 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    b1f6:	9b01      	ldr	r3, [sp, #4]
    b1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1fc:	1c5a      	adds	r2, r3, #1
    b1fe:	4904      	ldr	r1, [pc, #16]	; (b210 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    b200:	9b01      	ldr	r3, [sp, #4]
    b202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b206:	bf00      	nop
    b208:	b003      	add	sp, #12
    b20a:	f85d fb04 	ldr.w	pc, [sp], #4
    b20e:	bf00      	nop
    b210:	1fff92ec 	.word	0x1fff92ec
    b214:	1fff92e8 	.word	0x1fff92e8

0000b218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    b218:	b500      	push	{lr}
    b21a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b21c:	f7f5 fd08 	bl	c30 <Sys_GetCoreID>
    b220:	4603      	mov	r3, r0
    b222:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    b224:	4a0d      	ldr	r2, [pc, #52]	; (b25c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    b226:	9b01      	ldr	r3, [sp, #4]
    b228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b22c:	1e5a      	subs	r2, r3, #1
    b22e:	490b      	ldr	r1, [pc, #44]	; (b25c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    b230:	9b01      	ldr	r3, [sp, #4]
    b232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    b236:	4a0a      	ldr	r2, [pc, #40]	; (b260 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    b238:	9b01      	ldr	r3, [sp, #4]
    b23a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b23e:	f003 0301 	and.w	r3, r3, #1
    b242:	2b00      	cmp	r3, #0
    b244:	d106      	bne.n	b254 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    b246:	4a05      	ldr	r2, [pc, #20]	; (b25c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    b248:	9b01      	ldr	r3, [sp, #4]
    b24a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b24e:	2b00      	cmp	r3, #0
    b250:	d100      	bne.n	b254 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b252:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b254:	bf00      	nop
    b256:	b003      	add	sp, #12
    b258:	f85d fb04 	ldr.w	pc, [sp], #4
    b25c:	1fff92ec 	.word	0x1fff92ec
    b260:	1fff92e8 	.word	0x1fff92e8

0000b264 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    b264:	b500      	push	{lr}
    b266:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b268:	f7f5 fce2 	bl	c30 <Sys_GetCoreID>
    b26c:	4603      	mov	r3, r0
    b26e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    b270:	4a10      	ldr	r2, [pc, #64]	; (b2b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    b272:	9b01      	ldr	r3, [sp, #4]
    b274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b278:	2b00      	cmp	r3, #0
    b27a:	d10d      	bne.n	b298 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b27c:	f7f5 fc09 	bl	a92 <Port_schm_read_msr>
    b280:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b282:	9b00      	ldr	r3, [sp, #0]
    b284:	f003 0301 	and.w	r3, r3, #1
    b288:	2b00      	cmp	r3, #0
    b28a:	d100      	bne.n	b28e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b28c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    b28e:	490a      	ldr	r1, [pc, #40]	; (b2b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    b290:	9b01      	ldr	r3, [sp, #4]
    b292:	9a00      	ldr	r2, [sp, #0]
    b294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    b298:	4a06      	ldr	r2, [pc, #24]	; (b2b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    b29a:	9b01      	ldr	r3, [sp, #4]
    b29c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2a0:	1c5a      	adds	r2, r3, #1
    b2a2:	4904      	ldr	r1, [pc, #16]	; (b2b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    b2a4:	9b01      	ldr	r3, [sp, #4]
    b2a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b2aa:	bf00      	nop
    b2ac:	b003      	add	sp, #12
    b2ae:	f85d fb04 	ldr.w	pc, [sp], #4
    b2b2:	bf00      	nop
    b2b4:	1fff92f4 	.word	0x1fff92f4
    b2b8:	1fff92f0 	.word	0x1fff92f0

0000b2bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    b2bc:	b500      	push	{lr}
    b2be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b2c0:	f7f5 fcb6 	bl	c30 <Sys_GetCoreID>
    b2c4:	4603      	mov	r3, r0
    b2c6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    b2c8:	4a0d      	ldr	r2, [pc, #52]	; (b300 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    b2ca:	9b01      	ldr	r3, [sp, #4]
    b2cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2d0:	1e5a      	subs	r2, r3, #1
    b2d2:	490b      	ldr	r1, [pc, #44]	; (b300 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    b2d4:	9b01      	ldr	r3, [sp, #4]
    b2d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    b2da:	4a0a      	ldr	r2, [pc, #40]	; (b304 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    b2dc:	9b01      	ldr	r3, [sp, #4]
    b2de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2e2:	f003 0301 	and.w	r3, r3, #1
    b2e6:	2b00      	cmp	r3, #0
    b2e8:	d106      	bne.n	b2f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    b2ea:	4a05      	ldr	r2, [pc, #20]	; (b300 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    b2ec:	9b01      	ldr	r3, [sp, #4]
    b2ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2f2:	2b00      	cmp	r3, #0
    b2f4:	d100      	bne.n	b2f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b2f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b2f8:	bf00      	nop
    b2fa:	b003      	add	sp, #12
    b2fc:	f85d fb04 	ldr.w	pc, [sp], #4
    b300:	1fff92f4 	.word	0x1fff92f4
    b304:	1fff92f0 	.word	0x1fff92f0

0000b308 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    b308:	b500      	push	{lr}
    b30a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b30c:	f7f5 fc90 	bl	c30 <Sys_GetCoreID>
    b310:	4603      	mov	r3, r0
    b312:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    b314:	4a10      	ldr	r2, [pc, #64]	; (b358 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    b316:	9b01      	ldr	r3, [sp, #4]
    b318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b31c:	2b00      	cmp	r3, #0
    b31e:	d10d      	bne.n	b33c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b320:	f7f5 fbb7 	bl	a92 <Port_schm_read_msr>
    b324:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b326:	9b00      	ldr	r3, [sp, #0]
    b328:	f003 0301 	and.w	r3, r3, #1
    b32c:	2b00      	cmp	r3, #0
    b32e:	d100      	bne.n	b332 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b330:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    b332:	490a      	ldr	r1, [pc, #40]	; (b35c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    b334:	9b01      	ldr	r3, [sp, #4]
    b336:	9a00      	ldr	r2, [sp, #0]
    b338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    b33c:	4a06      	ldr	r2, [pc, #24]	; (b358 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    b33e:	9b01      	ldr	r3, [sp, #4]
    b340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b344:	1c5a      	adds	r2, r3, #1
    b346:	4904      	ldr	r1, [pc, #16]	; (b358 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    b348:	9b01      	ldr	r3, [sp, #4]
    b34a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b34e:	bf00      	nop
    b350:	b003      	add	sp, #12
    b352:	f85d fb04 	ldr.w	pc, [sp], #4
    b356:	bf00      	nop
    b358:	1fff92fc 	.word	0x1fff92fc
    b35c:	1fff92f8 	.word	0x1fff92f8

0000b360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    b360:	b500      	push	{lr}
    b362:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b364:	f7f5 fc64 	bl	c30 <Sys_GetCoreID>
    b368:	4603      	mov	r3, r0
    b36a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    b36c:	4a0d      	ldr	r2, [pc, #52]	; (b3a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    b36e:	9b01      	ldr	r3, [sp, #4]
    b370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b374:	1e5a      	subs	r2, r3, #1
    b376:	490b      	ldr	r1, [pc, #44]	; (b3a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    b378:	9b01      	ldr	r3, [sp, #4]
    b37a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    b37e:	4a0a      	ldr	r2, [pc, #40]	; (b3a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    b380:	9b01      	ldr	r3, [sp, #4]
    b382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b386:	f003 0301 	and.w	r3, r3, #1
    b38a:	2b00      	cmp	r3, #0
    b38c:	d106      	bne.n	b39c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    b38e:	4a05      	ldr	r2, [pc, #20]	; (b3a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    b390:	9b01      	ldr	r3, [sp, #4]
    b392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b396:	2b00      	cmp	r3, #0
    b398:	d100      	bne.n	b39c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b39a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b39c:	bf00      	nop
    b39e:	b003      	add	sp, #12
    b3a0:	f85d fb04 	ldr.w	pc, [sp], #4
    b3a4:	1fff92fc 	.word	0x1fff92fc
    b3a8:	1fff92f8 	.word	0x1fff92f8

0000b3ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    b3ac:	b500      	push	{lr}
    b3ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b3b0:	f7f5 fc3e 	bl	c30 <Sys_GetCoreID>
    b3b4:	4603      	mov	r3, r0
    b3b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    b3b8:	4a10      	ldr	r2, [pc, #64]	; (b3fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    b3ba:	9b01      	ldr	r3, [sp, #4]
    b3bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3c0:	2b00      	cmp	r3, #0
    b3c2:	d10d      	bne.n	b3e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b3c4:	f7f5 fb65 	bl	a92 <Port_schm_read_msr>
    b3c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b3ca:	9b00      	ldr	r3, [sp, #0]
    b3cc:	f003 0301 	and.w	r3, r3, #1
    b3d0:	2b00      	cmp	r3, #0
    b3d2:	d100      	bne.n	b3d6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b3d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    b3d6:	490a      	ldr	r1, [pc, #40]	; (b400 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    b3d8:	9b01      	ldr	r3, [sp, #4]
    b3da:	9a00      	ldr	r2, [sp, #0]
    b3dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    b3e0:	4a06      	ldr	r2, [pc, #24]	; (b3fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    b3e2:	9b01      	ldr	r3, [sp, #4]
    b3e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3e8:	1c5a      	adds	r2, r3, #1
    b3ea:	4904      	ldr	r1, [pc, #16]	; (b3fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    b3ec:	9b01      	ldr	r3, [sp, #4]
    b3ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b3f2:	bf00      	nop
    b3f4:	b003      	add	sp, #12
    b3f6:	f85d fb04 	ldr.w	pc, [sp], #4
    b3fa:	bf00      	nop
    b3fc:	1fff9304 	.word	0x1fff9304
    b400:	1fff9300 	.word	0x1fff9300

0000b404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    b404:	b500      	push	{lr}
    b406:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b408:	f7f5 fc12 	bl	c30 <Sys_GetCoreID>
    b40c:	4603      	mov	r3, r0
    b40e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    b410:	4a0d      	ldr	r2, [pc, #52]	; (b448 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    b412:	9b01      	ldr	r3, [sp, #4]
    b414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b418:	1e5a      	subs	r2, r3, #1
    b41a:	490b      	ldr	r1, [pc, #44]	; (b448 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    b41c:	9b01      	ldr	r3, [sp, #4]
    b41e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    b422:	4a0a      	ldr	r2, [pc, #40]	; (b44c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    b424:	9b01      	ldr	r3, [sp, #4]
    b426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b42a:	f003 0301 	and.w	r3, r3, #1
    b42e:	2b00      	cmp	r3, #0
    b430:	d106      	bne.n	b440 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    b432:	4a05      	ldr	r2, [pc, #20]	; (b448 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    b434:	9b01      	ldr	r3, [sp, #4]
    b436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b43a:	2b00      	cmp	r3, #0
    b43c:	d100      	bne.n	b440 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b43e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b440:	bf00      	nop
    b442:	b003      	add	sp, #12
    b444:	f85d fb04 	ldr.w	pc, [sp], #4
    b448:	1fff9304 	.word	0x1fff9304
    b44c:	1fff9300 	.word	0x1fff9300

0000b450 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    b450:	b500      	push	{lr}
    b452:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b454:	f7f5 fbec 	bl	c30 <Sys_GetCoreID>
    b458:	4603      	mov	r3, r0
    b45a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    b45c:	4a10      	ldr	r2, [pc, #64]	; (b4a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    b45e:	9b01      	ldr	r3, [sp, #4]
    b460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b464:	2b00      	cmp	r3, #0
    b466:	d10d      	bne.n	b484 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b468:	f7f5 fb13 	bl	a92 <Port_schm_read_msr>
    b46c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b46e:	9b00      	ldr	r3, [sp, #0]
    b470:	f003 0301 	and.w	r3, r3, #1
    b474:	2b00      	cmp	r3, #0
    b476:	d100      	bne.n	b47a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b478:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    b47a:	490a      	ldr	r1, [pc, #40]	; (b4a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    b47c:	9b01      	ldr	r3, [sp, #4]
    b47e:	9a00      	ldr	r2, [sp, #0]
    b480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    b484:	4a06      	ldr	r2, [pc, #24]	; (b4a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    b486:	9b01      	ldr	r3, [sp, #4]
    b488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b48c:	1c5a      	adds	r2, r3, #1
    b48e:	4904      	ldr	r1, [pc, #16]	; (b4a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    b490:	9b01      	ldr	r3, [sp, #4]
    b492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b496:	bf00      	nop
    b498:	b003      	add	sp, #12
    b49a:	f85d fb04 	ldr.w	pc, [sp], #4
    b49e:	bf00      	nop
    b4a0:	1fff930c 	.word	0x1fff930c
    b4a4:	1fff9308 	.word	0x1fff9308

0000b4a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    b4a8:	b500      	push	{lr}
    b4aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4ac:	f7f5 fbc0 	bl	c30 <Sys_GetCoreID>
    b4b0:	4603      	mov	r3, r0
    b4b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    b4b4:	4a0d      	ldr	r2, [pc, #52]	; (b4ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    b4b6:	9b01      	ldr	r3, [sp, #4]
    b4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4bc:	1e5a      	subs	r2, r3, #1
    b4be:	490b      	ldr	r1, [pc, #44]	; (b4ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    b4c0:	9b01      	ldr	r3, [sp, #4]
    b4c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    b4c6:	4a0a      	ldr	r2, [pc, #40]	; (b4f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    b4c8:	9b01      	ldr	r3, [sp, #4]
    b4ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4ce:	f003 0301 	and.w	r3, r3, #1
    b4d2:	2b00      	cmp	r3, #0
    b4d4:	d106      	bne.n	b4e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    b4d6:	4a05      	ldr	r2, [pc, #20]	; (b4ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    b4d8:	9b01      	ldr	r3, [sp, #4]
    b4da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4de:	2b00      	cmp	r3, #0
    b4e0:	d100      	bne.n	b4e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b4e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b4e4:	bf00      	nop
    b4e6:	b003      	add	sp, #12
    b4e8:	f85d fb04 	ldr.w	pc, [sp], #4
    b4ec:	1fff930c 	.word	0x1fff930c
    b4f0:	1fff9308 	.word	0x1fff9308

0000b4f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    b4f4:	b500      	push	{lr}
    b4f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4f8:	f7f5 fb9a 	bl	c30 <Sys_GetCoreID>
    b4fc:	4603      	mov	r3, r0
    b4fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    b500:	4a10      	ldr	r2, [pc, #64]	; (b544 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    b502:	9b01      	ldr	r3, [sp, #4]
    b504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b508:	2b00      	cmp	r3, #0
    b50a:	d10d      	bne.n	b528 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b50c:	f7f5 fac1 	bl	a92 <Port_schm_read_msr>
    b510:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b512:	9b00      	ldr	r3, [sp, #0]
    b514:	f003 0301 	and.w	r3, r3, #1
    b518:	2b00      	cmp	r3, #0
    b51a:	d100      	bne.n	b51e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b51c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    b51e:	490a      	ldr	r1, [pc, #40]	; (b548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    b520:	9b01      	ldr	r3, [sp, #4]
    b522:	9a00      	ldr	r2, [sp, #0]
    b524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    b528:	4a06      	ldr	r2, [pc, #24]	; (b544 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    b52a:	9b01      	ldr	r3, [sp, #4]
    b52c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b530:	1c5a      	adds	r2, r3, #1
    b532:	4904      	ldr	r1, [pc, #16]	; (b544 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    b534:	9b01      	ldr	r3, [sp, #4]
    b536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b53a:	bf00      	nop
    b53c:	b003      	add	sp, #12
    b53e:	f85d fb04 	ldr.w	pc, [sp], #4
    b542:	bf00      	nop
    b544:	1fff9314 	.word	0x1fff9314
    b548:	1fff9310 	.word	0x1fff9310

0000b54c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    b54c:	b500      	push	{lr}
    b54e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b550:	f7f5 fb6e 	bl	c30 <Sys_GetCoreID>
    b554:	4603      	mov	r3, r0
    b556:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    b558:	4a0d      	ldr	r2, [pc, #52]	; (b590 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    b55a:	9b01      	ldr	r3, [sp, #4]
    b55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b560:	1e5a      	subs	r2, r3, #1
    b562:	490b      	ldr	r1, [pc, #44]	; (b590 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    b564:	9b01      	ldr	r3, [sp, #4]
    b566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    b56a:	4a0a      	ldr	r2, [pc, #40]	; (b594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    b56c:	9b01      	ldr	r3, [sp, #4]
    b56e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b572:	f003 0301 	and.w	r3, r3, #1
    b576:	2b00      	cmp	r3, #0
    b578:	d106      	bne.n	b588 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    b57a:	4a05      	ldr	r2, [pc, #20]	; (b590 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    b57c:	9b01      	ldr	r3, [sp, #4]
    b57e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b582:	2b00      	cmp	r3, #0
    b584:	d100      	bne.n	b588 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b586:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b588:	bf00      	nop
    b58a:	b003      	add	sp, #12
    b58c:	f85d fb04 	ldr.w	pc, [sp], #4
    b590:	1fff9314 	.word	0x1fff9314
    b594:	1fff9310 	.word	0x1fff9310

0000b598 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    b598:	b500      	push	{lr}
    b59a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b59c:	f7f5 fb48 	bl	c30 <Sys_GetCoreID>
    b5a0:	4603      	mov	r3, r0
    b5a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    b5a4:	4a10      	ldr	r2, [pc, #64]	; (b5e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    b5a6:	9b01      	ldr	r3, [sp, #4]
    b5a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5ac:	2b00      	cmp	r3, #0
    b5ae:	d10d      	bne.n	b5cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b5b0:	f7f5 fa6f 	bl	a92 <Port_schm_read_msr>
    b5b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b5b6:	9b00      	ldr	r3, [sp, #0]
    b5b8:	f003 0301 	and.w	r3, r3, #1
    b5bc:	2b00      	cmp	r3, #0
    b5be:	d100      	bne.n	b5c2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b5c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    b5c2:	490a      	ldr	r1, [pc, #40]	; (b5ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    b5c4:	9b01      	ldr	r3, [sp, #4]
    b5c6:	9a00      	ldr	r2, [sp, #0]
    b5c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    b5cc:	4a06      	ldr	r2, [pc, #24]	; (b5e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    b5ce:	9b01      	ldr	r3, [sp, #4]
    b5d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5d4:	1c5a      	adds	r2, r3, #1
    b5d6:	4904      	ldr	r1, [pc, #16]	; (b5e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    b5d8:	9b01      	ldr	r3, [sp, #4]
    b5da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b5de:	bf00      	nop
    b5e0:	b003      	add	sp, #12
    b5e2:	f85d fb04 	ldr.w	pc, [sp], #4
    b5e6:	bf00      	nop
    b5e8:	1fff931c 	.word	0x1fff931c
    b5ec:	1fff9318 	.word	0x1fff9318

0000b5f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    b5f0:	b500      	push	{lr}
    b5f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5f4:	f7f5 fb1c 	bl	c30 <Sys_GetCoreID>
    b5f8:	4603      	mov	r3, r0
    b5fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    b5fc:	4a0d      	ldr	r2, [pc, #52]	; (b634 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    b5fe:	9b01      	ldr	r3, [sp, #4]
    b600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b604:	1e5a      	subs	r2, r3, #1
    b606:	490b      	ldr	r1, [pc, #44]	; (b634 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    b608:	9b01      	ldr	r3, [sp, #4]
    b60a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    b60e:	4a0a      	ldr	r2, [pc, #40]	; (b638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    b610:	9b01      	ldr	r3, [sp, #4]
    b612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b616:	f003 0301 	and.w	r3, r3, #1
    b61a:	2b00      	cmp	r3, #0
    b61c:	d106      	bne.n	b62c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    b61e:	4a05      	ldr	r2, [pc, #20]	; (b634 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    b620:	9b01      	ldr	r3, [sp, #4]
    b622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b626:	2b00      	cmp	r3, #0
    b628:	d100      	bne.n	b62c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b62a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b62c:	bf00      	nop
    b62e:	b003      	add	sp, #12
    b630:	f85d fb04 	ldr.w	pc, [sp], #4
    b634:	1fff931c 	.word	0x1fff931c
    b638:	1fff9318 	.word	0x1fff9318

0000b63c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    b63c:	b500      	push	{lr}
    b63e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b640:	f7f5 faf6 	bl	c30 <Sys_GetCoreID>
    b644:	4603      	mov	r3, r0
    b646:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    b648:	4a10      	ldr	r2, [pc, #64]	; (b68c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    b64a:	9b01      	ldr	r3, [sp, #4]
    b64c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b650:	2b00      	cmp	r3, #0
    b652:	d10d      	bne.n	b670 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b654:	f7f5 fa1d 	bl	a92 <Port_schm_read_msr>
    b658:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b65a:	9b00      	ldr	r3, [sp, #0]
    b65c:	f003 0301 	and.w	r3, r3, #1
    b660:	2b00      	cmp	r3, #0
    b662:	d100      	bne.n	b666 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b664:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    b666:	490a      	ldr	r1, [pc, #40]	; (b690 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    b668:	9b01      	ldr	r3, [sp, #4]
    b66a:	9a00      	ldr	r2, [sp, #0]
    b66c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    b670:	4a06      	ldr	r2, [pc, #24]	; (b68c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    b672:	9b01      	ldr	r3, [sp, #4]
    b674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b678:	1c5a      	adds	r2, r3, #1
    b67a:	4904      	ldr	r1, [pc, #16]	; (b68c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    b67c:	9b01      	ldr	r3, [sp, #4]
    b67e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b682:	bf00      	nop
    b684:	b003      	add	sp, #12
    b686:	f85d fb04 	ldr.w	pc, [sp], #4
    b68a:	bf00      	nop
    b68c:	1fff9324 	.word	0x1fff9324
    b690:	1fff9320 	.word	0x1fff9320

0000b694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    b694:	b500      	push	{lr}
    b696:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b698:	f7f5 faca 	bl	c30 <Sys_GetCoreID>
    b69c:	4603      	mov	r3, r0
    b69e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    b6a0:	4a0d      	ldr	r2, [pc, #52]	; (b6d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    b6a2:	9b01      	ldr	r3, [sp, #4]
    b6a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6a8:	1e5a      	subs	r2, r3, #1
    b6aa:	490b      	ldr	r1, [pc, #44]	; (b6d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    b6ac:	9b01      	ldr	r3, [sp, #4]
    b6ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    b6b2:	4a0a      	ldr	r2, [pc, #40]	; (b6dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    b6b4:	9b01      	ldr	r3, [sp, #4]
    b6b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6ba:	f003 0301 	and.w	r3, r3, #1
    b6be:	2b00      	cmp	r3, #0
    b6c0:	d106      	bne.n	b6d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    b6c2:	4a05      	ldr	r2, [pc, #20]	; (b6d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    b6c4:	9b01      	ldr	r3, [sp, #4]
    b6c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6ca:	2b00      	cmp	r3, #0
    b6cc:	d100      	bne.n	b6d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b6ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b6d0:	bf00      	nop
    b6d2:	b003      	add	sp, #12
    b6d4:	f85d fb04 	ldr.w	pc, [sp], #4
    b6d8:	1fff9324 	.word	0x1fff9324
    b6dc:	1fff9320 	.word	0x1fff9320

0000b6e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    b6e0:	b500      	push	{lr}
    b6e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b6e4:	f7f5 faa4 	bl	c30 <Sys_GetCoreID>
    b6e8:	4603      	mov	r3, r0
    b6ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    b6ec:	4a10      	ldr	r2, [pc, #64]	; (b730 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    b6ee:	9b01      	ldr	r3, [sp, #4]
    b6f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6f4:	2b00      	cmp	r3, #0
    b6f6:	d10d      	bne.n	b714 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b6f8:	f7f5 f9cb 	bl	a92 <Port_schm_read_msr>
    b6fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b6fe:	9b00      	ldr	r3, [sp, #0]
    b700:	f003 0301 	and.w	r3, r3, #1
    b704:	2b00      	cmp	r3, #0
    b706:	d100      	bne.n	b70a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b708:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    b70a:	490a      	ldr	r1, [pc, #40]	; (b734 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    b70c:	9b01      	ldr	r3, [sp, #4]
    b70e:	9a00      	ldr	r2, [sp, #0]
    b710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    b714:	4a06      	ldr	r2, [pc, #24]	; (b730 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    b716:	9b01      	ldr	r3, [sp, #4]
    b718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b71c:	1c5a      	adds	r2, r3, #1
    b71e:	4904      	ldr	r1, [pc, #16]	; (b730 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    b720:	9b01      	ldr	r3, [sp, #4]
    b722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b726:	bf00      	nop
    b728:	b003      	add	sp, #12
    b72a:	f85d fb04 	ldr.w	pc, [sp], #4
    b72e:	bf00      	nop
    b730:	1fff932c 	.word	0x1fff932c
    b734:	1fff9328 	.word	0x1fff9328

0000b738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    b738:	b500      	push	{lr}
    b73a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b73c:	f7f5 fa78 	bl	c30 <Sys_GetCoreID>
    b740:	4603      	mov	r3, r0
    b742:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    b744:	4a0d      	ldr	r2, [pc, #52]	; (b77c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    b746:	9b01      	ldr	r3, [sp, #4]
    b748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b74c:	1e5a      	subs	r2, r3, #1
    b74e:	490b      	ldr	r1, [pc, #44]	; (b77c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    b750:	9b01      	ldr	r3, [sp, #4]
    b752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    b756:	4a0a      	ldr	r2, [pc, #40]	; (b780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    b758:	9b01      	ldr	r3, [sp, #4]
    b75a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b75e:	f003 0301 	and.w	r3, r3, #1
    b762:	2b00      	cmp	r3, #0
    b764:	d106      	bne.n	b774 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    b766:	4a05      	ldr	r2, [pc, #20]	; (b77c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    b768:	9b01      	ldr	r3, [sp, #4]
    b76a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b76e:	2b00      	cmp	r3, #0
    b770:	d100      	bne.n	b774 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b772:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b774:	bf00      	nop
    b776:	b003      	add	sp, #12
    b778:	f85d fb04 	ldr.w	pc, [sp], #4
    b77c:	1fff932c 	.word	0x1fff932c
    b780:	1fff9328 	.word	0x1fff9328

0000b784 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    b784:	b500      	push	{lr}
    b786:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b788:	f7f5 fa52 	bl	c30 <Sys_GetCoreID>
    b78c:	4603      	mov	r3, r0
    b78e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    b790:	4a10      	ldr	r2, [pc, #64]	; (b7d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    b792:	9b01      	ldr	r3, [sp, #4]
    b794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b798:	2b00      	cmp	r3, #0
    b79a:	d10d      	bne.n	b7b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b79c:	f7f5 f979 	bl	a92 <Port_schm_read_msr>
    b7a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b7a2:	9b00      	ldr	r3, [sp, #0]
    b7a4:	f003 0301 	and.w	r3, r3, #1
    b7a8:	2b00      	cmp	r3, #0
    b7aa:	d100      	bne.n	b7ae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b7ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    b7ae:	490a      	ldr	r1, [pc, #40]	; (b7d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    b7b0:	9b01      	ldr	r3, [sp, #4]
    b7b2:	9a00      	ldr	r2, [sp, #0]
    b7b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    b7b8:	4a06      	ldr	r2, [pc, #24]	; (b7d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    b7ba:	9b01      	ldr	r3, [sp, #4]
    b7bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7c0:	1c5a      	adds	r2, r3, #1
    b7c2:	4904      	ldr	r1, [pc, #16]	; (b7d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    b7c4:	9b01      	ldr	r3, [sp, #4]
    b7c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b7ca:	bf00      	nop
    b7cc:	b003      	add	sp, #12
    b7ce:	f85d fb04 	ldr.w	pc, [sp], #4
    b7d2:	bf00      	nop
    b7d4:	1fff9334 	.word	0x1fff9334
    b7d8:	1fff9330 	.word	0x1fff9330

0000b7dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    b7dc:	b500      	push	{lr}
    b7de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b7e0:	f7f5 fa26 	bl	c30 <Sys_GetCoreID>
    b7e4:	4603      	mov	r3, r0
    b7e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    b7e8:	4a0d      	ldr	r2, [pc, #52]	; (b820 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    b7ea:	9b01      	ldr	r3, [sp, #4]
    b7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7f0:	1e5a      	subs	r2, r3, #1
    b7f2:	490b      	ldr	r1, [pc, #44]	; (b820 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    b7f4:	9b01      	ldr	r3, [sp, #4]
    b7f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    b7fa:	4a0a      	ldr	r2, [pc, #40]	; (b824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    b7fc:	9b01      	ldr	r3, [sp, #4]
    b7fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b802:	f003 0301 	and.w	r3, r3, #1
    b806:	2b00      	cmp	r3, #0
    b808:	d106      	bne.n	b818 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    b80a:	4a05      	ldr	r2, [pc, #20]	; (b820 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    b80c:	9b01      	ldr	r3, [sp, #4]
    b80e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b812:	2b00      	cmp	r3, #0
    b814:	d100      	bne.n	b818 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b816:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b818:	bf00      	nop
    b81a:	b003      	add	sp, #12
    b81c:	f85d fb04 	ldr.w	pc, [sp], #4
    b820:	1fff9334 	.word	0x1fff9334
    b824:	1fff9330 	.word	0x1fff9330

0000b828 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    b828:	b500      	push	{lr}
    b82a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b82c:	f7f5 fa00 	bl	c30 <Sys_GetCoreID>
    b830:	4603      	mov	r3, r0
    b832:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    b834:	4a10      	ldr	r2, [pc, #64]	; (b878 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    b836:	9b01      	ldr	r3, [sp, #4]
    b838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b83c:	2b00      	cmp	r3, #0
    b83e:	d10d      	bne.n	b85c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b840:	f7f5 f927 	bl	a92 <Port_schm_read_msr>
    b844:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b846:	9b00      	ldr	r3, [sp, #0]
    b848:	f003 0301 	and.w	r3, r3, #1
    b84c:	2b00      	cmp	r3, #0
    b84e:	d100      	bne.n	b852 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b850:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    b852:	490a      	ldr	r1, [pc, #40]	; (b87c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    b854:	9b01      	ldr	r3, [sp, #4]
    b856:	9a00      	ldr	r2, [sp, #0]
    b858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    b85c:	4a06      	ldr	r2, [pc, #24]	; (b878 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    b85e:	9b01      	ldr	r3, [sp, #4]
    b860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b864:	1c5a      	adds	r2, r3, #1
    b866:	4904      	ldr	r1, [pc, #16]	; (b878 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    b868:	9b01      	ldr	r3, [sp, #4]
    b86a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b86e:	bf00      	nop
    b870:	b003      	add	sp, #12
    b872:	f85d fb04 	ldr.w	pc, [sp], #4
    b876:	bf00      	nop
    b878:	1fff933c 	.word	0x1fff933c
    b87c:	1fff9338 	.word	0x1fff9338

0000b880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    b880:	b500      	push	{lr}
    b882:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b884:	f7f5 f9d4 	bl	c30 <Sys_GetCoreID>
    b888:	4603      	mov	r3, r0
    b88a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    b88c:	4a0d      	ldr	r2, [pc, #52]	; (b8c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    b88e:	9b01      	ldr	r3, [sp, #4]
    b890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b894:	1e5a      	subs	r2, r3, #1
    b896:	490b      	ldr	r1, [pc, #44]	; (b8c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    b898:	9b01      	ldr	r3, [sp, #4]
    b89a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    b89e:	4a0a      	ldr	r2, [pc, #40]	; (b8c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    b8a0:	9b01      	ldr	r3, [sp, #4]
    b8a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8a6:	f003 0301 	and.w	r3, r3, #1
    b8aa:	2b00      	cmp	r3, #0
    b8ac:	d106      	bne.n	b8bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    b8ae:	4a05      	ldr	r2, [pc, #20]	; (b8c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    b8b0:	9b01      	ldr	r3, [sp, #4]
    b8b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8b6:	2b00      	cmp	r3, #0
    b8b8:	d100      	bne.n	b8bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b8ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b8bc:	bf00      	nop
    b8be:	b003      	add	sp, #12
    b8c0:	f85d fb04 	ldr.w	pc, [sp], #4
    b8c4:	1fff933c 	.word	0x1fff933c
    b8c8:	1fff9338 	.word	0x1fff9338

0000b8cc <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    b8cc:	bf00      	nop
    b8ce:	4770      	bx	lr

0000b8d0 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    b8d0:	b510      	push	{r4, lr}
    b8d2:	b084      	sub	sp, #16
    b8d4:	4604      	mov	r4, r0
    b8d6:	4608      	mov	r0, r1
    b8d8:	4611      	mov	r1, r2
    b8da:	461a      	mov	r2, r3
    b8dc:	4623      	mov	r3, r4
    b8de:	f8ad 3006 	strh.w	r3, [sp, #6]
    b8e2:	4603      	mov	r3, r0
    b8e4:	f88d 3005 	strb.w	r3, [sp, #5]
    b8e8:	460b      	mov	r3, r1
    b8ea:	f88d 3004 	strb.w	r3, [sp, #4]
    b8ee:	4613      	mov	r3, r2
    b8f0:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b8f4:	f7f5 f99c 	bl	c30 <Sys_GetCoreID>
    b8f8:	4603      	mov	r3, r0
    b8fa:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    b8fc:	490d      	ldr	r1, [pc, #52]	; (b934 <Det_ReportError+0x64>)
    b8fe:	9b03      	ldr	r3, [sp, #12]
    b900:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b904:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    b908:	4a0b      	ldr	r2, [pc, #44]	; (b938 <Det_ReportError+0x68>)
    b90a:	9b03      	ldr	r3, [sp, #12]
    b90c:	4413      	add	r3, r2
    b90e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b912:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    b914:	4a09      	ldr	r2, [pc, #36]	; (b93c <Det_ReportError+0x6c>)
    b916:	9b03      	ldr	r3, [sp, #12]
    b918:	4413      	add	r3, r2
    b91a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b91e:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    b920:	4a07      	ldr	r2, [pc, #28]	; (b940 <Det_ReportError+0x70>)
    b922:	9b03      	ldr	r3, [sp, #12]
    b924:	4413      	add	r3, r2
    b926:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b92a:	701a      	strb	r2, [r3, #0]

    return E_OK;
    b92c:	2300      	movs	r3, #0
}
    b92e:	4618      	mov	r0, r3
    b930:	b004      	add	sp, #16
    b932:	bd10      	pop	{r4, pc}
    b934:	1fff9368 	.word	0x1fff9368
    b938:	1fff9340 	.word	0x1fff9340
    b93c:	1fff9344 	.word	0x1fff9344
    b940:	1fff9348 	.word	0x1fff9348

0000b944 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
    b944:	b510      	push	{r4, lr}
    b946:	b084      	sub	sp, #16
    b948:	4604      	mov	r4, r0
    b94a:	4608      	mov	r0, r1
    b94c:	4611      	mov	r1, r2
    b94e:	461a      	mov	r2, r3
    b950:	4623      	mov	r3, r4
    b952:	f8ad 3006 	strh.w	r3, [sp, #6]
    b956:	4603      	mov	r3, r0
    b958:	f88d 3005 	strb.w	r3, [sp, #5]
    b95c:	460b      	mov	r3, r1
    b95e:	f88d 3004 	strb.w	r3, [sp, #4]
    b962:	4613      	mov	r3, r2
    b964:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b968:	f7f5 f962 	bl	c30 <Sys_GetCoreID>
    b96c:	4603      	mov	r3, r0
    b96e:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
    b970:	490d      	ldr	r1, [pc, #52]	; (b9a8 <Det_ReportRuntimeError+0x64>)
    b972:	9b03      	ldr	r3, [sp, #12]
    b974:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b978:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
    b97c:	4a0b      	ldr	r2, [pc, #44]	; (b9ac <Det_ReportRuntimeError+0x68>)
    b97e:	9b03      	ldr	r3, [sp, #12]
    b980:	4413      	add	r3, r2
    b982:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b986:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
    b988:	4a09      	ldr	r2, [pc, #36]	; (b9b0 <Det_ReportRuntimeError+0x6c>)
    b98a:	9b03      	ldr	r3, [sp, #12]
    b98c:	4413      	add	r3, r2
    b98e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b992:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
    b994:	4a07      	ldr	r2, [pc, #28]	; (b9b4 <Det_ReportRuntimeError+0x70>)
    b996:	9b03      	ldr	r3, [sp, #12]
    b998:	4413      	add	r3, r2
    b99a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b99e:	701a      	strb	r2, [r3, #0]

    return E_OK;
    b9a0:	2300      	movs	r3, #0
}
    b9a2:	4618      	mov	r0, r3
    b9a4:	b004      	add	sp, #16
    b9a6:	bd10      	pop	{r4, pc}
    b9a8:	1fff936c 	.word	0x1fff936c
    b9ac:	1fff934c 	.word	0x1fff934c
    b9b0:	1fff9350 	.word	0x1fff9350
    b9b4:	1fff9354 	.word	0x1fff9354

0000b9b8 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
    b9b8:	b510      	push	{r4, lr}
    b9ba:	b084      	sub	sp, #16
    b9bc:	4604      	mov	r4, r0
    b9be:	4608      	mov	r0, r1
    b9c0:	4611      	mov	r1, r2
    b9c2:	461a      	mov	r2, r3
    b9c4:	4623      	mov	r3, r4
    b9c6:	f8ad 3006 	strh.w	r3, [sp, #6]
    b9ca:	4603      	mov	r3, r0
    b9cc:	f88d 3005 	strb.w	r3, [sp, #5]
    b9d0:	460b      	mov	r3, r1
    b9d2:	f88d 3004 	strb.w	r3, [sp, #4]
    b9d6:	4613      	mov	r3, r2
    b9d8:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b9dc:	f7f5 f928 	bl	c30 <Sys_GetCoreID>
    b9e0:	4603      	mov	r3, r0
    b9e2:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
    b9e4:	490d      	ldr	r1, [pc, #52]	; (ba1c <Det_ReportTransientFault+0x64>)
    b9e6:	9b03      	ldr	r3, [sp, #12]
    b9e8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b9ec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
    b9f0:	4a0b      	ldr	r2, [pc, #44]	; (ba20 <Det_ReportTransientFault+0x68>)
    b9f2:	9b03      	ldr	r3, [sp, #12]
    b9f4:	4413      	add	r3, r2
    b9f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b9fa:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
    b9fc:	4a09      	ldr	r2, [pc, #36]	; (ba24 <Det_ReportTransientFault+0x6c>)
    b9fe:	9b03      	ldr	r3, [sp, #12]
    ba00:	4413      	add	r3, r2
    ba02:	f89d 2004 	ldrb.w	r2, [sp, #4]
    ba06:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
    ba08:	4a07      	ldr	r2, [pc, #28]	; (ba28 <Det_ReportTransientFault+0x70>)
    ba0a:	9b03      	ldr	r3, [sp, #12]
    ba0c:	4413      	add	r3, r2
    ba0e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ba12:	701a      	strb	r2, [r3, #0]

    return E_OK;
    ba14:	2300      	movs	r3, #0
}
    ba16:	4618      	mov	r0, r3
    ba18:	b004      	add	sp, #16
    ba1a:	bd10      	pop	{r4, pc}
    ba1c:	1fff9364 	.word	0x1fff9364
    ba20:	1fff9358 	.word	0x1fff9358
    ba24:	1fff935c 	.word	0x1fff935c
    ba28:	1fff9360 	.word	0x1fff9360

0000ba2c <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
    ba2c:	bf00      	nop
    ba2e:	4770      	bx	lr

0000ba30 <Clock_Ip_au8DividerCallbackIndex>:
    ba30:	0c00 0e0d 0201 0603 0409 0a07 0805 000b     ................

0000ba40 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000ba50 <Clock_Ip_au8XoscCallbackIndex>:
    ba50:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000ba60 <Clock_Ip_au8IrcoscCallbackIndex>:
    ba60:	0100 0302 0004 0000 0000 0000 0000 0000     ................

0000ba70 <Clock_Ip_au8GateCallbackIndex>:
    ba70:	0200 0601 0301 0104 0500 0000 0000 0000     ................

0000ba80 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000ba90 <Clock_Ip_au8PllCallbackIndex>:
    ba90:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000baa0 <Clock_Ip_au8SelectorCallbackIndex>:
    baa0:	0800 0a09 0109 0302 0504 0706 0000 0000     ................

0000bab0 <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000bac0 <Clock_Ip_au8CmuCallbackIndex>:
	...

0000bad0 <Clock_Ip_au8ClockFeatures>:
	...
    bae0:	0000 0100 0000 0000 0000 0000 0002 0000     ................
    baf0:	0000 0000 0300 0000 0000 0000 0000 0004     ................
    bb00:	0000 0000 0000 0500 0000 0000 0000 0000     ................
    bb10:	0006 0000 0000 0000 0100 0000 0000 0000     ................
    bb20:	0000 0001 0000 0000 0000 0400 0000 0000     ................
    bb30:	0000 0000 0005 0000 0001 0000 0401 0000     ................
    bb40:	0200 0000 0100 0005 0000 0003 0000 0402     ................
    bb50:	0000 0400 0000 0200 0005 0000 0005 0000     ................
    bb60:	0403 0000 0600 0000 0300 0005 0000 0007     ................
    bb70:	0000 0500 0000 0000 0000 0000 0006 0000     ................
	...
    bbb0:	0000 0005 0000 0000 0000 0600 0100 0000     ................
    bbc0:	0000 0000 0007 0003 0000 0000 0000 0000     ................
    bbd0:	0000 0000 0000 0006 0000 0000 0000 0700     ................
    bbe0:	0100 0000 0000 0000 0008 0003 0000 0000     ................
	...
    bbf8:	0000 0009 0000 0000 0000 0a00 0100 0000     ................
    bc08:	0000 0000 000b 0003 0000 0000 0000 0000     ................
    bc18:	0000 0000 0000 000c 0000 0000 0000 0d00     ................
    bc28:	0100 0000 0000 0000 000e 0003 0000 0000     ................
    bc38:	0800 0000 0000 0000 0000 0009 0000 0000     ................
    bc48:	0000 0a00 0000 0000 0000 0000 000b 0000     ................
    bc58:	0000 0000 0b01 0000 0000 0000 0200 000b     ................
    bc68:	0000 0000 0000 0b03 0000 0000 0000 0000     ................
	...
    bc80:	0400 0000 003b 003b 0000 0004 2700 2700     ....;.;......'.'
    bc90:	0000 0100 0000 0000 0000 0000 0007 0000     ................
    bca0:	7300 0000 0700 0000 0000 0032 0000 0009     .s........2.....
    bcb0:	0000 0200 0000 0700 0000 0000 0021 0000     ............!...
    bcc0:	0009 0000 0400 0000 0900 0000 0000 0003     ................
    bcd0:	0000 0007 0000 6100 0000 0700 0000 0000     .......a........
    bce0:	0024 0000 0007 0000 2500 0000 0700 0000     $........%......
    bcf0:	0000 002b 0000 0004 5a00 5a00 0000 0700     ..+......Z.Z....
    bd00:	0000 0000 0020 0000 0004 3800 3800 0000     .... ......8.8..
    bd10:	0400 0000 0039 0039 0000 0004 3a00 3a00     ....9.9......:.:
    bd20:	0000 0400 0000 0026 0026 0000 0004 6600     ......&.&......f
    bd30:	6600 0000 0400 0000 0037 0037 0000 0004     .f......7.7.....
    bd40:	2c00 2c00 0000 0400 0000 002d 002d 0000     .,.,......-.-...
    bd50:	0004 2e00 2e00 0000 0200 0000 4040 0040     ............@@@.
    bd60:	0000 0004 6a00 6a00 0000 0400 0000 006b     .....j.j......k.
    bd70:	006b 0000 0004 6c00 6c00 0000 0900 0000     k......l.l......
    bd80:	0000 0001 0000 0009 0000 0000 0000 0700     ................
    bd90:	0000 0000 0036 0000 0007 0000 3100 0000     ....6........1..
    bda0:	0700 0000 0000 0049 0000 0007 0000 4a00     ......I........J
    bdb0:	0000 0700 0000 0000 004b 0000 0007 0000     ........K.......
    bdc0:	4c00 0000 0700 0000 0000 004d 0000 0007     .L........M.....
    bdd0:	0000 3d00 0000 0300 0000 0000 0000 0000     ...=............

0000bde0 <Clock_Ip_au16SelectorEntryHardwareValue>:
    bde0:	0a03 0101 0001 0101 0002 0404 0603 0200     ................
    bdf0:	0810 0001 0100 0202 0000 0000 0007 0000     ................
    be00:	0009 0000 0000 0000 0c0e 0000 0000 0000     ................
	...

0000be38 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    be38:	0000 0002 0300 0000 0601 0000 0000 0000     ................
	...

0000be68 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    be68:	0700 0000 0000 0000 0000 0202 0303 0101     ................
    be78:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000be98 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    be98:	0001 0000 0000 0000 0000 0202 0303 0101     ................
    bea8:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000bec8 <Clock_Ip_au8DividerValueHardwareValue>:
    bec8:	0100 0002 0003 0000 0004 0000 0000 0000     ................
    bed8:	0005 0000 0000 0000 0000 0000 0000 0000     ................
    bee8:	0006 0000 0000 0000 0000 0000 0000 0000     ................
	...
    bf08:	0007 0000                                   ....

0000bf0c <Clock_Ip_apxScgPeriphAsyncDivs>:
    bf0c:	4204 4006 4304 4006 4104 4006 4604 4006     .B.@.C.@.A.@.F.@

0000bf1c <Clock_Ip_aeSourceTypeClockName>:
    bf1c:	0000 0000 0001 0000 0001 0000 0001 0000     ................
    bf2c:	0001 0000 0001 0000 0001 0000 0001 0000     ................
    bf3c:	0002 0000 0003 0000 0001 0000 0001 0000     ................
    bf4c:	0001 0000 0001 0000 0002 0000 0002 0000     ................
    bf5c:	0003 0000 0003 0000 0001 0000 0001 0000     ................
    bf6c:	0004 0000 0004 0000 0004 0000 0004 0000     ................
	...

0000bfd8 <Clock_Ip_aeHwPllName>:
    bfd8:	0009 0000                                   ....

0000bfdc <Clock_Ip_aeHwDfsName>:
    bfdc:	0057 0000                                   W...

0000bfe0 <Clock_Ip_axDividerCallbacks>:
    bfe0:	2229 0000 2233 0000 224d 0000 2267 0000     )"..3"..M"..g"..
    bff0:	2281 0000 229b 0000 22b5 0000 22cf 0000     ."..."..."..."..
    c000:	22e9 0000 2303 0000 231d 0000 2337 0000     ."...#...#..7#..
    c010:	2351 0000 236b 0000 2385 0000               Q#..k#...#..

0000c01c <Clock_Ip_axDividerTriggerCallbacks>:
    c01c:	26f9 0000 26f9 0000                         .&...&..

0000c024 <Clock_Ip_axExtOscCallbacks>:
    c024:	2705 0000 2705 0000 2705 0000 270f 0000     .'...'...'...'..
    c034:	2705 0000 2719 0000 2733 0000 274d 0000     .'...'..3'..M'..
    c044:	27d1 0000 27e5 0000                         .'...'..

0000c04c <Clock_Ip_axFracDivCallbacks>:
    c04c:	29a5 0000 29a5 0000 29af 0000               .)...)...)..

0000c058 <Clock_Ip_axGateCallbacks>:
    c058:	29c9 0000 29d3 0000 2ad3 0000 2aed 0000     .)...)...*...*..
    c068:	2a83 0000 2a9d 0000 2a33 0000 2a4d 0000     .*...*..3*..M*..
    c078:	29e3 0000 29fd 0000 2b23 0000 2b3d 0000     .)...)..#+..=+..
    c088:	2b73 0000 2b8d 0000                         s+...+..

0000c090 <Clock_Ip_axIntOscCallbacks>:
    c090:	2d39 0000 2d39 0000 2d43 0000 2d4d 0000     9-..9-..C-..M-..
    c0a0:	2d67 0000 2d81 0000 2d95 0000 2daf 0000     g-...-...-...-..
    c0b0:	2dc9 0000 2ddd 0000 2df7 0000 2e11 0000     .-...-...-......
    c0c0:	2eb9 0000 2ed3 0000 2eed 0000               ............

0000c0cc <Clock_Ip_axCmuCallbacks>:
    c0cc:	3489 0000 3493 0000 349f 0000 3489 0000     .4...4...4...4..

0000c0dc <Clock_Ip_axPllCallbacks>:
    c0dc:	34a9 0000 34a9 0000 34b3 0000 34a9 0000     .4...4...4...4..
    c0ec:	34bf 0000 34c9 0000 34e3 0000 34fd 0000     .4...4...4...4..
    c0fc:	35a1 0000 358d 0000                         .5...5..

0000c104 <Clock_Ip_axPcfsCallbacks>:
    c104:	36fd 0000                                   .6..

0000c108 <Clock_Ip_axSelectorCallbacks>:
    c108:	3709 0000 3709 0000 3713 0000 372d 0000     .7...7...7..-7..
    c118:	3709 0000 3747 0000 3761 0000 377b 0000     .7..G7..a7..{7..
    c128:	3795 0000 37af 0000 37c9 0000 37e3 0000     .7...7...7...7..
    c138:	37fd 0000 3817 0000 3831 0000 384b 0000     .7...8..18..K8..
    c148:	3865 0000 387f 0000 3899 0000 38b3 0000     e8...8...8...8..
    c158:	38cd 0000 38e7 0000                         .8...8..

0000c160 <ClockSource>:
    c160:	0000 0000 0008 0000 0002 0000 0005 0000     ................
	...
    c178:	0009 0000                                   ....

0000c17c <ResetReasonArray>:
    c17c:	0000 0000 0001 0000 0002 0000 0003 0000     ................
    c18c:	0004 0000 0005 0000 0006 0000 0007 0000     ................
    c19c:	0008 0000 0009 0000 000a 0000 000b 0000     ................
    c1ac:	000c 0000 000d 0000 000e 0000               ............

0000c1b8 <Port_au32PortCiPortBaseAddr>:
    c1b8:	9000 4004 a000 4004 b000 4004 c000 4004     ...@...@...@...@
    c1c8:	d000 4004                                   ...@

0000c1cc <Port_au32PortCiGpioBaseAddr>:
    c1cc:	f000 400f f040 400f f080 400f f0c0 400f     ...@@..@...@...@
    c1dc:	f100 400f                                   ...@

0000c1e0 <ftmGptBase>:
    c1e0:	8000 4003 9000 4003 a000 4003 6000 4002     ...@...@...@.`.@

0000c1f0 <Mcu_aClockConfigPB>:
	...
    c1f8:	0101 1c00 0010 0400 0029 0100 0005 0000     ........).......
    c208:	0001 0000 0000 0000 0057 0000 0000 0000     ........W.......
    c218:	0000 0000 0008 0000 1200 007a 0001 0000     ..........z.....
    c228:	0001 0000 0000 0000 0057 0000 0000 0000     ........W.......
    c238:	0057 0000 0000 0000 0000 0000 0000 0000     W...............
	...
    c258:	0019 0000 0005 0000 001a 0000 0002 0000     ................
    c268:	001b 0000 0005 0000 002a 0000 0005 0000     ........*.......
    c278:	0028 0000 000e 0000 0029 0000 0001 0000     (.......).......
    c288:	0056 0000 001c 0000 0032 0000 002a 0000     V.......2...*...
    c298:	002b 0000 0014 0000 002c 0000 0014 0000     +.......,.......
    c2a8:	002d 0000 0014 0000 002e 0000 0014 0000     -...............
    c2b8:	003f 0000 000c 0000 0040 0000 000c 0000     ?.......@.......
    c2c8:	0041 0000 000c 0000 0042 0000 0000 0000     A.......B.......
    c2d8:	0031 0000 0000 0000 0045 0000 0000 0000     1.......E.......
    c2e8:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    c2f8:	0044 0000 0000 0000 0030 0000 0000 0000     D.......0.......
    c308:	003d 0000 0000 0000 0043 0000 0000 0000     =.......C.......
    c318:	0049 0000 0000 0000 004a 0000 0000 0000     I.......J.......
    c328:	004b 0000 0000 0000 0048 0000 0000 0000     K.......H.......
    c338:	000c 0000 0004 0000 0000 0000 000d 0000     ................
    c348:	0004 0000 0000 0000 000e 0000 0001 0000     ................
    c358:	0000 0000 000f 0000 0001 0000 0000 0000     ................
    c368:	001d 0000 0001 0000 0000 0000 001e 0000     ................
    c378:	0008 0000 0000 0000 001f 0000 0001 0000     ................
    c388:	0000 0000 0021 0000 0001 0000 0000 0000     ....!...........
    c398:	0022 0000 0002 0000 0000 0000 0023 0000     "...........#...
    c3a8:	0001 0000 0000 0000 0025 0000 0003 0000     ........%.......
    c3b8:	0000 0000 0026 0000 0004 0000 0000 0000     ....&...........
    c3c8:	0027 0000 0002 0000 0000 0000 0032 0000     '...........2...
    c3d8:	0001 0000 0000 0000 0048 0000 0001 0000     ........H.......
    c3e8:	0001 0000 0056 0000 0001 0000 0001 0000     ....V...........
    c3f8:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
    c410:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
    c428:	0057 0000 0000 0000 0057 0000 0057 0000     W.......W...W...
	...
    c444:	0014 0000 7d00 0000 0015 0000 7d00 0000     .....}.......}..
    c454:	0016 0000 7d00 0000 0017 0000 8000 0000     .....}..........
    c464:	0012 0000 0001 0000 0013 0000 0001 0000     ................
    c474:	0030 0000 0000 0000 0031 0000 0000 0000     0.......1.......
    c484:	0032 0000 0000 0000 0033 0000 0000 0000     2.......3.......
    c494:	0034 0000 0000 0000 0035 0000 0001 0000     4.......5.......
    c4a4:	0036 0000 0000 0000 0037 0000 0001 0000     6.......7.......
    c4b4:	0038 0000 0001 0000 0039 0000 0000 0000     8.......9.......
    c4c4:	003a 0000 0000 0000 003b 0000 0000 0000     :.......;.......
    c4d4:	003c 0000 0000 0000 003d 0000 0000 0000     <.......=.......
    c4e4:	003e 0000 0000 0000 003f 0000 0000 0000     >.......?.......
    c4f4:	0040 0000 0001 0000 0041 0000 0001 0000     @.......A.......
    c504:	0042 0000 0000 0000 0043 0000 0000 0000     B.......C.......
    c514:	0044 0000 0000 0000 0045 0000 0000 0000     D.......E.......
    c524:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    c534:	0048 0000 0000 0000 0049 0000 0000 0000     H.......I.......
    c544:	004a 0000 0000 0000 004b 0000 0000 0000     J.......K.......
    c554:	004c 0000 0001 0000 004d 0000 0001 0000     L.......M.......
    c564:	004e 0000 0000 0000 004f 0000 0000 0000     N.......O.......
    c574:	0050 0000 0001 0000 0051 0000 0001 0000     P.......Q.......
    c584:	0052 0000 0001 0000 0053 0000 0001 0000     R.......S.......
    c594:	0054 0000 0001 0000 0055 0000 0000 0000     T.......U.......
    c5a4:	0056 0000 0001 0000 0057 0000 0000 0000     V.......W.......
    c5b4:	0000 0000 0057 0000 0000 0000 0057 0000     ....W.......W...
	...

0000c5e8 <FTM_1_InitConfig_PB>:
    c5e8:	0000 0000 0003 0000 0007 0000 0001 0000     ................

0000c5f8 <FTM_1_ChannelConfig_PB>:
    c5f8:	0000 0000 7d69 0000 0000 0000 0000 0000     ....i}..........
    c608:	0001 0000 7d69 0000 0001 0000 0000 0000     ....i}..........
    c618:	0002 0000 7d69 0000 0002 0000 0000 0000     ....i}..........
    c628:	0003 0000 7d69 0000 0003 0000 0000 0000     ....i}..........
    c638:	0004 0000 7d69 0000 0004 0000 0000 0000     ....i}..........
    c648:	0005 0000 7d69 0000 0005 0000 0000 0000     ....i}..........
    c658:	0006 0000 7d69 0000 0006 0000 0000 0000     ....i}..........

0000c668 <Gpt_pInitPredefTimerChannelPB>:
	...

0000c678 <u8GptChannelIdToIndexMap>:
    c678:	0100 0302 0504 0006                         ........

0000c680 <Gpt_InitChannelPB>:
    c680:	0000 0000 08b1 0000 0000 0000 ffff 0000     ................
    c690:	0000 0000 8b48 1fff 0000 0000 08c7 0000     ....H...........
    c6a0:	0000 0000 ffff 0000 0000 0000 8b60 1fff     ............`...
    c6b0:	0000 0000 08dd 0000 0000 0000 ffff 0000     ................
    c6c0:	0000 0000 8b78 1fff 0000 0000 08f3 0000     ....x...........
    c6d0:	0000 0000 ffff 0000 0000 0000 8b90 1fff     ................
    c6e0:	0000 0000 0909 0000 0000 0000 ffff 0000     ................
    c6f0:	0000 0000 8ba8 1fff 0000 0000 091f 0000     ................
    c700:	0000 0000 ffff 0000 0000 0000 8bc0 1fff     ................
    c710:	0000 0000 0935 0000 0000 0000 ffff 0000     ....5...........
    c720:	0000 0000 8bd8 1fff                         ........

0000c728 <Gpt_Config>:
    c728:	0007 0000 c680 0000 0001 0000 8b38 1fff     ............8...
    c738:	c668 0000 c678 0000                         h...x...

0000c740 <aIrqConfiguration>:
    c740:	0069 0000 0f01 0000 6dfb 0000 006a 0000     i........m..j...
    c750:	0f01 0000 6e6d 0000 006b 0000 0f01 0000     ....mn..k.......
    c760:	6edf 0000 006c 0000 0f01 0000 6f51 0000     .n..l.......Qo..

0000c770 <intCtrlConfig>:
    c770:	0004 0000 c740 0000                         ....@...

0000c778 <Mcu_Config>:
    c778:	005a 0000 0000 0000 0001 0000 0001 0000     Z...............
    c788:	c994 0000 c1f0 0000 c9a0 0000               ............

0000c794 <OsIf_xPredefinedConfig>:
    c794:	0000 0000 6c00 02dc                         .....l..

0000c79c <OsIf_apxPredefinedConfig>:
    c79c:	c794 0000                                   ....

0000c7a0 <Platform_uConfiguration>:
    c7a0:	c7a8 0000                                   ....

0000c7a4 <Platform_Config>:
    c7a4:	c7a0 0000                                   ....

0000c7a8 <ipwConfig>:
    c7a8:	c770 0000 0000 0000                         p.......

0000c7b0 <g_pin_mux_InitConfigArr>:
    c7b0:	c000 4004 f0c0 400f 0000 0000 0002 0000     ...@...@........
    c7c0:	0001 0000 0002 0000 0000 0000 0000 0000     ................
    c7d0:	0000 0000 0100 0000 c000 4004 f0c0 400f     ...........@...@
    c7e0:	0010 0000 0002 0000 0001 0000 0002 0000     ................
	...
    c7fc:	0100 0000 b000 4004 f080 400f 0008 0000     .......@...@....
    c80c:	0002 0000 0001 0000 0002 0000 0000 0000     ................
	...
    c828:	b000 4004 f080 400f 0009 0000 0002 0000     ...@...@........
    c838:	0001 0000 0002 0000 0000 0000 0000 0000     ................
	...

0000c850 <au8Port_PartitionList>:
    c850:	0001 0000                                   ....

0000c854 <au32Port_PinToPartitionMap>:
    c854:	0001 0000 0001 0000 0001 0000 0001 0000     ................

0000c864 <Port_au16NoUnUsedPadsArrayDefault>:
    c864:	0000 0001 0002 0003 0006 0007 0008 0009     ................
    c874:	000b 000c 000d 000e 000f 0010 0011 0020     .............. .
    c884:	0021 0022 0023 0024 0025 0026 0027 0028     !.".#.$.%.&.'.(.
    c894:	0029 002a 002b 002c 002d 002e 002f 0030     ).*.+.,.-.../.0.
    c8a4:	0031 0040 0041 0042 0043 0046 0047 004a     1.@.A.B.C.F.G.J.
    c8b4:	004b 004c 004d 004e 004f 0050 0051 0061     K.L.M.N.O.P.Q.a.
    c8c4:	0062 0063 0064 0065 0066 0067 0068 0069     b.c.d.e.f.g.h.i.
    c8d4:	006a 006b 006c 006d 006e 006f 0071 0080     j.k.l.m.n.o.q...
    c8e4:	0081 0082 0083 0084 0085 0086 0087 0088     ................
    c8f4:	0089 008a 008b 008c 008d 008e 008f 0090     ................

0000c904 <Port_UnUsedPin>:
    c904:	0100 0000 0001 0000 0000 0000               ............

0000c910 <Port_aPinConfigDefault>:
    c910:	0060 0000 0100 0000 0001 0000 0002 0000     `...............
    c920:	0001 0001 0070 0000 0100 0000 0001 0000     ....p...........
    c930:	0002 0000 0001 0001 0048 0000 0100 0000     ........H.......
    c940:	0000 0000 0002 0000 0001 0001 0049 0000     ............I...
    c950:	0100 0000 0000 0000 0002 0000 0001 0001     ................

0000c960 <Port_Config>:
    c960:	0004 0050 c864 0000 c904 0000 c910 0000     ..P.d...........
	...
    c978:	c854 0000 c850 0000 c7b0 0000               T...P.......

0000c984 <Power_Ip_RCM_ConfigPB>:
	...

0000c98c <Power_Ip_PMC_ConfigPB>:
    c98c:	0000 0000                                   ....

0000c990 <Power_Ip_SMC_ConfigPB>:
    c990:	0000 0000                                   ....

0000c994 <Power_Ip_aModeConfigPB>:
	...

0000c9a0 <Power_Ip_HwIPsConfigPB>:
    c9a0:	c984 0000 c98c 0000 c990 0000               ............

0000c9ac <__INIT_TABLE>:
    c9ac:	00000002 	.word	0x00000002
    c9b0:	1fff8b10 	.word	0x1fff8b10
    c9b4:	0000c9d4 	.word	0x0000c9d4
    c9b8:	0000cab4 	.word	0x0000cab4
    c9bc:	1fff8800 	.word	0x1fff8800
    c9c0:	00000000 	.word	0x00000000
    c9c4:	00000310 	.word	0x00000310

0000c9c8 <__ZERO_TABLE>:
    c9c8:	00000001 	.word	0x00000001
    c9cc:	1fff8bf0 	.word	0x1fff8bf0
    c9d0:	1fff9380 	.word	0x1fff9380
