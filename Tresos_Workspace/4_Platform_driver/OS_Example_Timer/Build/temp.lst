
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000af3 	.word	0x00000af3
  10:	00000af5 	.word	0x00000af5
  14:	00000af7 	.word	0x00000af7
  18:	00000af9 	.word	0x00000af9
	...
  2c:	00000afb 	.word	0x00000afb
  30:	00000afd 	.word	0x00000afd
  34:	00000000 	.word	0x00000000
  38:	00000aff 	.word	0x00000aff
  3c:	00000b01 	.word	0x00000b01
  40:	00000b03 	.word	0x00000b03
  44:	00000b03 	.word	0x00000b03
  48:	00000b03 	.word	0x00000b03
  4c:	00000b03 	.word	0x00000b03
  50:	00000b03 	.word	0x00000b03
  54:	00000b03 	.word	0x00000b03
  58:	00000b03 	.word	0x00000b03
  5c:	00000b03 	.word	0x00000b03
  60:	00000b03 	.word	0x00000b03
  64:	00000b03 	.word	0x00000b03
  68:	00000b03 	.word	0x00000b03
  6c:	00000b03 	.word	0x00000b03
  70:	00000b03 	.word	0x00000b03
  74:	00000b03 	.word	0x00000b03
  78:	00000b03 	.word	0x00000b03
  7c:	00000b03 	.word	0x00000b03
  80:	00000b03 	.word	0x00000b03
  84:	00000b03 	.word	0x00000b03
  88:	00000b03 	.word	0x00000b03
  8c:	00000b03 	.word	0x00000b03
  90:	00000b03 	.word	0x00000b03
  94:	00000b03 	.word	0x00000b03
  98:	00000b03 	.word	0x00000b03
  9c:	00000b03 	.word	0x00000b03
  a0:	00000b03 	.word	0x00000b03
  a4:	00000b03 	.word	0x00000b03
  a8:	00000b03 	.word	0x00000b03
  ac:	00000b03 	.word	0x00000b03
  b0:	00000b03 	.word	0x00000b03
  b4:	00000b03 	.word	0x00000b03
  b8:	00000b03 	.word	0x00000b03
  bc:	00000b03 	.word	0x00000b03
  c0:	00000b03 	.word	0x00000b03
  c4:	00000b03 	.word	0x00000b03
  c8:	00000b03 	.word	0x00000b03
  cc:	00000b03 	.word	0x00000b03
  d0:	00000b03 	.word	0x00000b03
  d4:	00000b03 	.word	0x00000b03
  d8:	00000b03 	.word	0x00000b03
  dc:	00000b03 	.word	0x00000b03
  e0:	00000b03 	.word	0x00000b03
  e4:	00000b03 	.word	0x00000b03
  e8:	00000b03 	.word	0x00000b03
  ec:	00000b03 	.word	0x00000b03
  f0:	00000b03 	.word	0x00000b03
  f4:	00000b03 	.word	0x00000b03
  f8:	00000b03 	.word	0x00000b03
  fc:	00000b03 	.word	0x00000b03
 100:	00000b03 	.word	0x00000b03
 104:	00000b03 	.word	0x00000b03
 108:	00000b03 	.word	0x00000b03
 10c:	00000b03 	.word	0x00000b03
 110:	00000b03 	.word	0x00000b03
 114:	00000b03 	.word	0x00000b03
 118:	00000b03 	.word	0x00000b03
 11c:	00000b03 	.word	0x00000b03
 120:	00000b03 	.word	0x00000b03
 124:	00000b03 	.word	0x00000b03
 128:	00000b03 	.word	0x00000b03
 12c:	00000b03 	.word	0x00000b03
 130:	00000b03 	.word	0x00000b03
 134:	00000b03 	.word	0x00000b03
 138:	00000b03 	.word	0x00000b03
 13c:	00000b03 	.word	0x00000b03
 140:	00000b03 	.word	0x00000b03
 144:	00000b03 	.word	0x00000b03
 148:	00000b03 	.word	0x00000b03
 14c:	00000b03 	.word	0x00000b03
 150:	00000b03 	.word	0x00000b03
 154:	00000b03 	.word	0x00000b03
 158:	00000b03 	.word	0x00000b03
 15c:	00000b03 	.word	0x00000b03
 160:	00000b03 	.word	0x00000b03
 164:	00000b03 	.word	0x00000b03
 168:	00000b03 	.word	0x00000b03
 16c:	00000b03 	.word	0x00000b03
 170:	00000b03 	.word	0x00000b03
 174:	00000b03 	.word	0x00000b03
 178:	00000b03 	.word	0x00000b03
 17c:	00000b03 	.word	0x00000b03
 180:	00000b03 	.word	0x00000b03
 184:	00000b03 	.word	0x00000b03
 188:	00000b03 	.word	0x00000b03
 18c:	00000b03 	.word	0x00000b03
 190:	00000b03 	.word	0x00000b03
 194:	00000b03 	.word	0x00000b03
 198:	00000b03 	.word	0x00000b03
 19c:	00000b03 	.word	0x00000b03
 1a0:	00000b03 	.word	0x00000b03
 1a4:	00000b03 	.word	0x00000b03
 1a8:	00000b03 	.word	0x00000b03
 1ac:	00000b03 	.word	0x00000b03
 1b0:	00000b03 	.word	0x00000b03
 1b4:	00000b03 	.word	0x00000b03
 1b8:	00000b03 	.word	0x00000b03
 1bc:	00000b03 	.word	0x00000b03
 1c0:	00000b03 	.word	0x00000b03
 1c4:	00000b03 	.word	0x00000b03
 1c8:	00000b03 	.word	0x00000b03
 1cc:	00000b03 	.word	0x00000b03
 1d0:	00000b03 	.word	0x00000b03
 1d4:	00000b03 	.word	0x00000b03
 1d8:	00000b03 	.word	0x00000b03
 1dc:	00000b03 	.word	0x00000b03
 1e0:	00000b03 	.word	0x00000b03
 1e4:	00000b03 	.word	0x00000b03
 1e8:	00000b03 	.word	0x00000b03
 1ec:	00000b03 	.word	0x00000b03
 1f0:	00000b03 	.word	0x00000b03
 1f4:	00000b03 	.word	0x00000b03
 1f8:	00000b03 	.word	0x00000b03
 1fc:	00000b03 	.word	0x00000b03
 200:	00000b03 	.word	0x00000b03
 204:	00000b03 	.word	0x00000b03
 208:	00000b03 	.word	0x00000b03
 20c:	00000b03 	.word	0x00000b03
 210:	00000b03 	.word	0x00000b03
 214:	00000b03 	.word	0x00000b03
 218:	00000b03 	.word	0x00000b03
 21c:	00000b03 	.word	0x00000b03
 220:	00000b03 	.word	0x00000b03
 224:	00000b03 	.word	0x00000b03
 228:	00000b03 	.word	0x00000b03
 22c:	00000b03 	.word	0x00000b03
 230:	00000b03 	.word	0x00000b03
 234:	00000b03 	.word	0x00000b03
 238:	00000b03 	.word	0x00000b03
 23c:	00000b03 	.word	0x00000b03
 240:	00000b03 	.word	0x00000b03
 244:	00000b03 	.word	0x00000b03
 248:	00000b03 	.word	0x00000b03
 24c:	00000b03 	.word	0x00000b03
 250:	00000b03 	.word	0x00000b03
 254:	00000b03 	.word	0x00000b03
 258:	00000b03 	.word	0x00000b03
 25c:	00000b03 	.word	0x00000b03
 260:	00000b03 	.word	0x00000b03
 264:	00000b03 	.word	0x00000b03
 268:	00000b03 	.word	0x00000b03
 26c:	00000b03 	.word	0x00000b03
 270:	00000b03 	.word	0x00000b03
 274:	00000b03 	.word	0x00000b03
 278:	00000b03 	.word	0x00000b03
 27c:	00000b03 	.word	0x00000b03
 280:	00000b03 	.word	0x00000b03
 284:	00000b03 	.word	0x00000b03
 288:	00000b03 	.word	0x00000b03
 28c:	00000b03 	.word	0x00000b03
 290:	00000b03 	.word	0x00000b03
 294:	00000b03 	.word	0x00000b03
 298:	00000b03 	.word	0x00000b03
 29c:	00000b03 	.word	0x00000b03
 2a0:	00000b03 	.word	0x00000b03
 2a4:	00000b03 	.word	0x00000b03
 2a8:	00000b03 	.word	0x00000b03
 2ac:	00000b03 	.word	0x00000b03
 2b0:	00000b03 	.word	0x00000b03
 2b4:	00000b03 	.word	0x00000b03
 2b8:	00000b03 	.word	0x00000b03
 2bc:	00000b03 	.word	0x00000b03
 2c0:	00000b03 	.word	0x00000b03
 2c4:	00000b03 	.word	0x00000b03
 2c8:	00000b03 	.word	0x00000b03
 2cc:	00000b03 	.word	0x00000b03
 2d0:	00000b03 	.word	0x00000b03
 2d4:	00000b03 	.word	0x00000b03
 2d8:	00000b03 	.word	0x00000b03
 2dc:	00000b03 	.word	0x00000b03
 2e0:	00000b03 	.word	0x00000b03
 2e4:	00000b03 	.word	0x00000b03
 2e8:	00000b03 	.word	0x00000b03
 2ec:	00000b03 	.word	0x00000b03
 2f0:	00000b03 	.word	0x00000b03
 2f4:	00000b03 	.word	0x00000b03
 2f8:	00000b03 	.word	0x00000b03
 2fc:	00000b03 	.word	0x00000b03
 300:	00000b03 	.word	0x00000b03
 304:	00000b03 	.word	0x00000b03
 308:	00000b03 	.word	0x00000b03
 30c:	00000b03 	.word	0x00000b03

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fa6d 	bl	960 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb2c 	bl	ae8 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff8e00 	.word	0x1fff8e00

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fa77 	bl	a8c <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8b0:	b500      	push	{lr}
     8b2:	b085      	sub	sp, #20
    EcuM_Init();
     8b4:	f000 f822 	bl	8fc <EcuM_Init>

    /* Get the number of ticks corresponding to 500ms, the resolution will depend
    on the frequency feeding the systick timer, in this case with a freq of
    48MHz we could have up to 20ns, but the function only accepts microseconds*/
    uint32 Timeout_500ms = OsIf_MicrosToTicks( 500000u, OSIF_COUNTER_SYSTEM );
     8b8:	2101      	movs	r1, #1
     8ba:	480f      	ldr	r0, [pc, #60]	; (8f8 <main+0x48>)
     8bc:	f000 f98b 	bl	bd6 <OsIf_MicrosToTicks>
     8c0:	9002      	str	r0, [sp, #8]

    /*get the Systic Timer count for the first time*/
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     8c2:	2001      	movs	r0, #1
     8c4:	f000 f93b 	bl	b3e <OsIf_GetCounter>
     8c8:	4603      	mov	r3, r0
     8ca:	9301      	str	r3, [sp, #4]

    /*We need to count the elapsed time from zero*/
    uint32 ElapsedTime = 0u;
     8cc:	2300      	movs	r3, #0
     8ce:	9303      	str	r3, [sp, #12]

    while( 1u )
    {
        /* Get the elapsed time count from the seed tick value*/
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     8d0:	ab01      	add	r3, sp, #4
     8d2:	2101      	movs	r1, #1
     8d4:	4618      	mov	r0, r3
     8d6:	f000 f94b 	bl	b70 <OsIf_GetElapsed>
     8da:	4602      	mov	r2, r0
     8dc:	9b03      	ldr	r3, [sp, #12]
     8de:	4413      	add	r3, r2
     8e0:	9303      	str	r3, [sp, #12]
        /* Query if the elapsed time is already equal or bigger than the timeout*/
        if( ElapsedTime >= Timeout_500ms )
     8e2:	9a03      	ldr	r2, [sp, #12]
     8e4:	9b02      	ldr	r3, [sp, #8]
     8e6:	429a      	cmp	r2, r3
     8e8:	d3f2      	bcc.n	8d0 <main+0x20>
        {
            /*reset the elapsed time */
            ElapsedTime = 0u;
     8ea:	2300      	movs	r3, #0
     8ec:	9303      	str	r3, [sp, #12]
            /*toggle led*/
            Dio_FlipChannel( DioConf_DioChannel_DioChannel_0 );
     8ee:	2060      	movs	r0, #96	; 0x60
     8f0:	f004 fff3 	bl	58da <Dio_FlipChannel>
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     8f4:	e7ec      	b.n	8d0 <main+0x20>
     8f6:	bf00      	nop
     8f8:	0007a120 	.word	0x0007a120

000008fc <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     8fc:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     8fe:	4808      	ldr	r0, [pc, #32]	; (920 <EcuM_Init+0x24>)
     900:	f003 feaa 	bl	4658 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     904:	2000      	movs	r0, #0
     906:	f003 fefb 	bl	4700 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     90a:	2000      	movs	r0, #0
     90c:	f003 ff1c 	bl	4748 <Mcu_SetMode>

    /*Init the internal tick reference Systick Timer*/
    OsIf_Init( NULL_PTR );
     910:	2000      	movs	r0, #0
     912:	f000 f90b 	bl	b2c <OsIf_Init>

    /*Apply all the Pin Port microcontroller configuration, for this case
    only Port Pin 122 (D16) is configured as output*/
    Port_Init( &Port_Config );
     916:	4803      	ldr	r0, [pc, #12]	; (924 <EcuM_Init+0x28>)
     918:	f004 faa0 	bl	4e5c <Port_Init>
}
     91c:	bf00      	nop
     91e:	bd08      	pop	{r3, pc}
     920:	00007d30 	.word	0x00007d30
     924:	00007e50 	.word	0x00007e50

00000928 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     928:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     92a:	f3ef 8310 	mrs	r3, PRIMASK
     92e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     930:	4623      	mov	r3, r4
}
     932:	4618      	mov	r0, r3
     934:	f85d 4b04 	ldr.w	r4, [sp], #4
     938:	4770      	bx	lr

0000093a <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     93a:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     93c:	f3ef 8310 	mrs	r3, PRIMASK
     940:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     942:	4623      	mov	r3, r4
}
     944:	4618      	mov	r0, r3
     946:	f85d 4b04 	ldr.w	r4, [sp], #4
     94a:	4770      	bx	lr

0000094c <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     94c:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     94e:	f3ef 8310 	mrs	r3, PRIMASK
     952:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     954:	4623      	mov	r3, r4
}
     956:	4618      	mov	r0, r3
     958:	f85d 4b04 	ldr.w	r4, [sp], #4
     95c:	4770      	bx	lr
	...

00000960 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     960:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     962:	2300      	movs	r3, #0
     964:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     966:	2300      	movs	r3, #0
     968:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     96a:	2300      	movs	r3, #0
     96c:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     96e:	2300      	movs	r3, #0
     970:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     972:	4b44      	ldr	r3, [pc, #272]	; (a84 <init_data_bss+0x124>)
     974:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     976:	4b44      	ldr	r3, [pc, #272]	; (a88 <init_data_bss+0x128>)
     978:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     97a:	9b05      	ldr	r3, [sp, #20]
     97c:	681b      	ldr	r3, [r3, #0]
     97e:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     980:	9b05      	ldr	r3, [sp, #20]
     982:	3304      	adds	r3, #4
     984:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     986:	9b05      	ldr	r3, [sp, #20]
     988:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     98a:	2300      	movs	r3, #0
     98c:	9309      	str	r3, [sp, #36]	; 0x24
     98e:	e03d      	b.n	a0c <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     990:	9a09      	ldr	r2, [sp, #36]	; 0x24
     992:	4613      	mov	r3, r2
     994:	005b      	lsls	r3, r3, #1
     996:	4413      	add	r3, r2
     998:	009b      	lsls	r3, r3, #2
     99a:	461a      	mov	r2, r3
     99c:	9b03      	ldr	r3, [sp, #12]
     99e:	4413      	add	r3, r2
     9a0:	685b      	ldr	r3, [r3, #4]
     9a2:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     9a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9a6:	4613      	mov	r3, r2
     9a8:	005b      	lsls	r3, r3, #1
     9aa:	4413      	add	r3, r2
     9ac:	009b      	lsls	r3, r3, #2
     9ae:	461a      	mov	r2, r3
     9b0:	9b03      	ldr	r3, [sp, #12]
     9b2:	4413      	add	r3, r2
     9b4:	681b      	ldr	r3, [r3, #0]
     9b6:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     9b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9ba:	4613      	mov	r3, r2
     9bc:	005b      	lsls	r3, r3, #1
     9be:	4413      	add	r3, r2
     9c0:	009b      	lsls	r3, r3, #2
     9c2:	461a      	mov	r2, r3
     9c4:	9b03      	ldr	r3, [sp, #12]
     9c6:	4413      	add	r3, r2
     9c8:	689b      	ldr	r3, [r3, #8]
     9ca:	4619      	mov	r1, r3
     9cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9ce:	4613      	mov	r3, r2
     9d0:	005b      	lsls	r3, r3, #1
     9d2:	4413      	add	r3, r2
     9d4:	009b      	lsls	r3, r3, #2
     9d6:	461a      	mov	r2, r3
     9d8:	9b03      	ldr	r3, [sp, #12]
     9da:	4413      	add	r3, r2
     9dc:	685b      	ldr	r3, [r3, #4]
     9de:	1acb      	subs	r3, r1, r3
     9e0:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     9e2:	2300      	movs	r3, #0
     9e4:	9308      	str	r3, [sp, #32]
     9e6:	e00a      	b.n	9fe <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     9e8:	9a00      	ldr	r2, [sp, #0]
     9ea:	9b08      	ldr	r3, [sp, #32]
     9ec:	441a      	add	r2, r3
     9ee:	9901      	ldr	r1, [sp, #4]
     9f0:	9b08      	ldr	r3, [sp, #32]
     9f2:	440b      	add	r3, r1
     9f4:	7812      	ldrb	r2, [r2, #0]
     9f6:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     9f8:	9b08      	ldr	r3, [sp, #32]
     9fa:	3301      	adds	r3, #1
     9fc:	9308      	str	r3, [sp, #32]
     9fe:	9a08      	ldr	r2, [sp, #32]
     a00:	9b06      	ldr	r3, [sp, #24]
     a02:	429a      	cmp	r2, r3
     a04:	d3f0      	bcc.n	9e8 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a08:	3301      	adds	r3, #1
     a0a:	9309      	str	r3, [sp, #36]	; 0x24
     a0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a0e:	9b07      	ldr	r3, [sp, #28]
     a10:	429a      	cmp	r2, r3
     a12:	d3bd      	bcc.n	990 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     a14:	9b04      	ldr	r3, [sp, #16]
     a16:	681b      	ldr	r3, [r3, #0]
     a18:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     a1a:	9b04      	ldr	r3, [sp, #16]
     a1c:	3304      	adds	r3, #4
     a1e:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     a20:	9b04      	ldr	r3, [sp, #16]
     a22:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     a24:	2300      	movs	r3, #0
     a26:	9309      	str	r3, [sp, #36]	; 0x24
     a28:	e024      	b.n	a74 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a2c:	00db      	lsls	r3, r3, #3
     a2e:	9a02      	ldr	r2, [sp, #8]
     a30:	4413      	add	r3, r2
     a32:	681b      	ldr	r3, [r3, #0]
     a34:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a38:	00db      	lsls	r3, r3, #3
     a3a:	9a02      	ldr	r2, [sp, #8]
     a3c:	4413      	add	r3, r2
     a3e:	685b      	ldr	r3, [r3, #4]
     a40:	4619      	mov	r1, r3
     a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a44:	00db      	lsls	r3, r3, #3
     a46:	9a02      	ldr	r2, [sp, #8]
     a48:	4413      	add	r3, r2
     a4a:	681b      	ldr	r3, [r3, #0]
     a4c:	1acb      	subs	r3, r1, r3
     a4e:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     a50:	2300      	movs	r3, #0
     a52:	9308      	str	r3, [sp, #32]
     a54:	e007      	b.n	a66 <init_data_bss+0x106>
        {
            ram[j] = 0U;
     a56:	9a01      	ldr	r2, [sp, #4]
     a58:	9b08      	ldr	r3, [sp, #32]
     a5a:	4413      	add	r3, r2
     a5c:	2200      	movs	r2, #0
     a5e:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     a60:	9b08      	ldr	r3, [sp, #32]
     a62:	3301      	adds	r3, #1
     a64:	9308      	str	r3, [sp, #32]
     a66:	9a08      	ldr	r2, [sp, #32]
     a68:	9b06      	ldr	r3, [sp, #24]
     a6a:	429a      	cmp	r2, r3
     a6c:	d3f3      	bcc.n	a56 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a70:	3301      	adds	r3, #1
     a72:	9309      	str	r3, [sp, #36]	; 0x24
     a74:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a76:	9b07      	ldr	r3, [sp, #28]
     a78:	429a      	cmp	r2, r3
     a7a:	d3d6      	bcc.n	a2a <init_data_bss+0xca>
        }
    }
}
     a7c:	bf00      	nop
     a7e:	bf00      	nop
     a80:	b00a      	add	sp, #40	; 0x28
     a82:	4770      	bx	lr
     a84:	00007e9c 	.word	0x00007e9c
     a88:	00007eb8 	.word	0x00007eb8

00000a8c <sys_m4_cache_init>:
{
     a8c:	b084      	sub	sp, #16
     a8e:	4603      	mov	r3, r0
     a90:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     a94:	2300      	movs	r3, #0
     a96:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     a9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     a9e:	2b00      	cmp	r3, #0
     aa0:	d118      	bne.n	ad4 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     aa2:	4b10      	ldr	r3, [pc, #64]	; (ae4 <sys_m4_cache_init+0x58>)
     aa4:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     aa8:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     aaa:	4b0e      	ldr	r3, [pc, #56]	; (ae4 <sys_m4_cache_init+0x58>)
     aac:	681b      	ldr	r3, [r3, #0]
     aae:	4a0d      	ldr	r2, [pc, #52]	; (ae4 <sys_m4_cache_init+0x58>)
     ab0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     ab4:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     ab6:	bf00      	nop
     ab8:	4b0a      	ldr	r3, [pc, #40]	; (ae4 <sys_m4_cache_init+0x58>)
     aba:	681b      	ldr	r3, [r3, #0]
     abc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     ac4:	d0f8      	beq.n	ab8 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     ac6:	4b07      	ldr	r3, [pc, #28]	; (ae4 <sys_m4_cache_init+0x58>)
     ac8:	681b      	ldr	r3, [r3, #0]
     aca:	4a06      	ldr	r2, [pc, #24]	; (ae4 <sys_m4_cache_init+0x58>)
     acc:	f043 0301 	orr.w	r3, r3, #1
     ad0:	6013      	str	r3, [r2, #0]
     ad2:	e002      	b.n	ada <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     ad4:	2301      	movs	r3, #1
     ad6:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     ada:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     ade:	4618      	mov	r0, r3
     ae0:	b004      	add	sp, #16
     ae2:	4770      	bx	lr
     ae4:	e0082000 	.word	0xe0082000

00000ae8 <startup_go_to_user_mode>:
}
     ae8:	bf00      	nop
     aea:	4770      	bx	lr

00000aec <Sys_GetCoreID>:
    return 0U;
     aec:	2300      	movs	r3, #0
}
     aee:	4618      	mov	r0, r3
     af0:	4770      	bx	lr

00000af2 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     af2:	e7fe      	b.n	af2 <HardFault_Handler>

00000af4 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     af4:	e7fe      	b.n	af4 <MemManage_Handler>

00000af6 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     af6:	e7fe      	b.n	af6 <BusFault_Handler>

00000af8 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     af8:	e7fe      	b.n	af8 <UsageFault_Handler>

00000afa <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     afa:	e7fe      	b.n	afa <SVC_Handler>

00000afc <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     afc:	e7fe      	b.n	afc <DebugMon_Handler>

00000afe <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     afe:	e7fe      	b.n	afe <PendSV_Handler>

00000b00 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     b00:	e7fe      	b.n	b00 <SysTick_Handler>

00000b02 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     b02:	e7fe      	b.n	b02 <undefined_handler>

00000b04 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
     b04:	2300      	movs	r3, #0
}
     b06:	4618      	mov	r0, r3
     b08:	4770      	bx	lr

00000b0a <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
     b0a:	b082      	sub	sp, #8
     b0c:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
     b0e:	2301      	movs	r3, #1
}
     b10:	4618      	mov	r0, r3
     b12:	b002      	add	sp, #8
     b14:	4770      	bx	lr

00000b16 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
     b16:	b082      	sub	sp, #8
     b18:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
     b1a:	bf00      	nop
     b1c:	b002      	add	sp, #8
     b1e:	4770      	bx	lr

00000b20 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
     b20:	b082      	sub	sp, #8
     b22:	9001      	str	r0, [sp, #4]
    return Micros;
     b24:	9b01      	ldr	r3, [sp, #4]
}
     b26:	4618      	mov	r0, r3
     b28:	b002      	add	sp, #8
     b2a:	4770      	bx	lr

00000b2c <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
     b2c:	b500      	push	{lr}
     b2e:	b083      	sub	sp, #12
     b30:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
     b32:	f000 f86d 	bl	c10 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
     b36:	bf00      	nop
     b38:	b003      	add	sp, #12
     b3a:	f85d fb04 	ldr.w	pc, [sp], #4

00000b3e <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
     b3e:	b500      	push	{lr}
     b40:	b085      	sub	sp, #20
     b42:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
     b44:	2300      	movs	r3, #0
     b46:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     b48:	9b01      	ldr	r3, [sp, #4]
     b4a:	2b00      	cmp	r3, #0
     b4c:	d003      	beq.n	b56 <OsIf_GetCounter+0x18>
     b4e:	9b01      	ldr	r3, [sp, #4]
     b50:	2b01      	cmp	r3, #1
     b52:	d004      	beq.n	b5e <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     b54:	e007      	b.n	b66 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
     b56:	f7ff ffd5 	bl	b04 <OsIf_Timer_Dummy_GetCounter>
     b5a:	9003      	str	r0, [sp, #12]
            break;
     b5c:	e003      	b.n	b66 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
     b5e:	f000 f873 	bl	c48 <OsIf_Timer_System_GetCounter>
     b62:	9003      	str	r0, [sp, #12]
            break;
     b64:	bf00      	nop
    }

    return Value;
     b66:	9b03      	ldr	r3, [sp, #12]
}
     b68:	4618      	mov	r0, r3
     b6a:	b005      	add	sp, #20
     b6c:	f85d fb04 	ldr.w	pc, [sp], #4

00000b70 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
     b70:	b500      	push	{lr}
     b72:	b085      	sub	sp, #20
     b74:	9001      	str	r0, [sp, #4]
     b76:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
     b78:	2300      	movs	r3, #0
     b7a:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     b7c:	9b00      	ldr	r3, [sp, #0]
     b7e:	2b00      	cmp	r3, #0
     b80:	d003      	beq.n	b8a <OsIf_GetElapsed+0x1a>
     b82:	9b00      	ldr	r3, [sp, #0]
     b84:	2b01      	cmp	r3, #1
     b86:	d005      	beq.n	b94 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     b88:	e009      	b.n	b9e <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
     b8a:	9801      	ldr	r0, [sp, #4]
     b8c:	f7ff ffbd 	bl	b0a <OsIf_Timer_Dummy_GetElapsed>
     b90:	9003      	str	r0, [sp, #12]
            break;
     b92:	e004      	b.n	b9e <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
     b94:	9801      	ldr	r0, [sp, #4]
     b96:	f000 f865 	bl	c64 <OsIf_Timer_System_GetElapsed>
     b9a:	9003      	str	r0, [sp, #12]
            break;
     b9c:	bf00      	nop
    }

    return Value;
     b9e:	9b03      	ldr	r3, [sp, #12]
}
     ba0:	4618      	mov	r0, r3
     ba2:	b005      	add	sp, #20
     ba4:	f85d fb04 	ldr.w	pc, [sp], #4

00000ba8 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
     ba8:	b500      	push	{lr}
     baa:	b083      	sub	sp, #12
     bac:	9001      	str	r0, [sp, #4]
     bae:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
     bb0:	9b00      	ldr	r3, [sp, #0]
     bb2:	2b00      	cmp	r3, #0
     bb4:	d003      	beq.n	bbe <OsIf_SetTimerFrequency+0x16>
     bb6:	9b00      	ldr	r3, [sp, #0]
     bb8:	2b01      	cmp	r3, #1
     bba:	d004      	beq.n	bc6 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     bbc:	e007      	b.n	bce <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
     bbe:	9801      	ldr	r0, [sp, #4]
     bc0:	f7ff ffa9 	bl	b16 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
     bc4:	e003      	b.n	bce <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
     bc6:	9801      	ldr	r0, [sp, #4]
     bc8:	f000 f85c 	bl	c84 <OsIf_Timer_System_SetTimerFrequency>
            break;
     bcc:	bf00      	nop
    }
}
     bce:	bf00      	nop
     bd0:	b003      	add	sp, #12
     bd2:	f85d fb04 	ldr.w	pc, [sp], #4

00000bd6 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
     bd6:	b500      	push	{lr}
     bd8:	b085      	sub	sp, #20
     bda:	9001      	str	r0, [sp, #4]
     bdc:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
     bde:	2300      	movs	r3, #0
     be0:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     be2:	9b00      	ldr	r3, [sp, #0]
     be4:	2b00      	cmp	r3, #0
     be6:	d003      	beq.n	bf0 <OsIf_MicrosToTicks+0x1a>
     be8:	9b00      	ldr	r3, [sp, #0]
     bea:	2b01      	cmp	r3, #1
     bec:	d005      	beq.n	bfa <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     bee:	e009      	b.n	c04 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
     bf0:	9801      	ldr	r0, [sp, #4]
     bf2:	f7ff ff95 	bl	b20 <OsIf_Timer_Dummy_MicrosToTicks>
     bf6:	9003      	str	r0, [sp, #12]
            break;
     bf8:	e004      	b.n	c04 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
     bfa:	9801      	ldr	r0, [sp, #4]
     bfc:	f000 f850 	bl	ca0 <OsIf_Timer_System_MicrosToTicks>
     c00:	9003      	str	r0, [sp, #12]
            break;
     c02:	bf00      	nop
    }

    return Value;
     c04:	9b03      	ldr	r3, [sp, #12]
}
     c06:	4618      	mov	r0, r3
     c08:	b005      	add	sp, #20
     c0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00000c10 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
     c10:	b500      	push	{lr}
     c12:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
     c14:	2300      	movs	r3, #0
     c16:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
     c18:	4a09      	ldr	r2, [pc, #36]	; (c40 <OsIf_Timer_System_Init+0x30>)
     c1a:	9b01      	ldr	r3, [sp, #4]
     c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     c20:	685a      	ldr	r2, [r3, #4]
     c22:	4908      	ldr	r1, [pc, #32]	; (c44 <OsIf_Timer_System_Init+0x34>)
     c24:	9b01      	ldr	r3, [sp, #4]
     c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
     c2a:	4a06      	ldr	r2, [pc, #24]	; (c44 <OsIf_Timer_System_Init+0x34>)
     c2c:	9b01      	ldr	r3, [sp, #4]
     c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     c32:	4618      	mov	r0, r3
     c34:	f000 f868 	bl	d08 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
     c38:	bf00      	nop
     c3a:	b003      	add	sp, #12
     c3c:	f85d fb04 	ldr.w	pc, [sp], #4
     c40:	00007d54 	.word	0x00007d54
     c44:	1fff8b40 	.word	0x1fff8b40

00000c48 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
     c48:	b500      	push	{lr}
     c4a:	b083      	sub	sp, #12
    uint32 Counter = 0U;
     c4c:	2300      	movs	r3, #0
     c4e:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
     c50:	2300      	movs	r3, #0
     c52:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
     c54:	f000 f86c 	bl	d30 <OsIf_Timer_System_Internal_GetCounter>
     c58:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
     c5a:	9b01      	ldr	r3, [sp, #4]
}
     c5c:	4618      	mov	r0, r3
     c5e:	b003      	add	sp, #12
     c60:	f85d fb04 	ldr.w	pc, [sp], #4

00000c64 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
     c64:	b500      	push	{lr}
     c66:	b085      	sub	sp, #20
     c68:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
     c6a:	2300      	movs	r3, #0
     c6c:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
     c6e:	2300      	movs	r3, #0
     c70:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
     c72:	9801      	ldr	r0, [sp, #4]
     c74:	f000 f864 	bl	d40 <OsIf_Timer_System_Internal_GetElapsed>
     c78:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
     c7a:	9b03      	ldr	r3, [sp, #12]
}
     c7c:	4618      	mov	r0, r3
     c7e:	b005      	add	sp, #20
     c80:	f85d fb04 	ldr.w	pc, [sp], #4

00000c84 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
     c84:	b084      	sub	sp, #16
     c86:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
     c88:	2300      	movs	r3, #0
     c8a:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
     c8c:	4903      	ldr	r1, [pc, #12]	; (c9c <OsIf_Timer_System_SetTimerFrequency+0x18>)
     c8e:	9b03      	ldr	r3, [sp, #12]
     c90:	9a01      	ldr	r2, [sp, #4]
     c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
     c96:	bf00      	nop
     c98:	b004      	add	sp, #16
     c9a:	4770      	bx	lr
     c9c:	1fff8b40 	.word	0x1fff8b40

00000ca0 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
     ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ca2:	b087      	sub	sp, #28
     ca4:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
     ca6:	2100      	movs	r1, #0
     ca8:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
     caa:	2100      	movs	r1, #0
     cac:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
     cae:	9901      	ldr	r1, [sp, #4]
     cb0:	2000      	movs	r0, #0
     cb2:	460e      	mov	r6, r1
     cb4:	4607      	mov	r7, r0
     cb6:	4812      	ldr	r0, [pc, #72]	; (d00 <OsIf_Timer_System_MicrosToTicks+0x60>)
     cb8:	9904      	ldr	r1, [sp, #16]
     cba:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
     cbe:	2000      	movs	r0, #0
     cc0:	460c      	mov	r4, r1
     cc2:	4605      	mov	r5, r0
     cc4:	fb04 f007 	mul.w	r0, r4, r7
     cc8:	fb06 f105 	mul.w	r1, r6, r5
     ccc:	4401      	add	r1, r0
     cce:	fba6 2304 	umull	r2, r3, r6, r4
     cd2:	4419      	add	r1, r3
     cd4:	460b      	mov	r3, r1
     cd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
     cda:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
     cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
     ce2:	4a08      	ldr	r2, [pc, #32]	; (d04 <OsIf_Timer_System_MicrosToTicks+0x64>)
     ce4:	f04f 0300 	mov.w	r3, #0
     ce8:	f7ff fc5c 	bl	5a4 <__aeabi_uldivmod>
     cec:	4602      	mov	r2, r0
     cee:	460b      	mov	r3, r1
     cf0:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
     cf4:	9b02      	ldr	r3, [sp, #8]
     cf6:	9305      	str	r3, [sp, #20]
    }

    return ticks;
     cf8:	9b05      	ldr	r3, [sp, #20]
}
     cfa:	4618      	mov	r0, r3
     cfc:	b007      	add	sp, #28
     cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d00:	1fff8b40 	.word	0x1fff8b40
     d04:	000f4240 	.word	0x000f4240

00000d08 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
     d08:	b082      	sub	sp, #8
     d0a:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
     d0c:	4b07      	ldr	r3, [pc, #28]	; (d2c <OsIf_Timer_System_Internal_Init+0x24>)
     d0e:	2200      	movs	r2, #0
     d10:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
     d12:	4b06      	ldr	r3, [pc, #24]	; (d2c <OsIf_Timer_System_Internal_Init+0x24>)
     d14:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
     d18:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
     d1a:	4b04      	ldr	r3, [pc, #16]	; (d2c <OsIf_Timer_System_Internal_Init+0x24>)
     d1c:	2200      	movs	r2, #0
     d1e:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
     d20:	4b02      	ldr	r3, [pc, #8]	; (d2c <OsIf_Timer_System_Internal_Init+0x24>)
     d22:	2205      	movs	r2, #5
     d24:	601a      	str	r2, [r3, #0]
}
     d26:	bf00      	nop
     d28:	b002      	add	sp, #8
     d2a:	4770      	bx	lr
     d2c:	e000e010 	.word	0xe000e010

00000d30 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
     d30:	4b02      	ldr	r3, [pc, #8]	; (d3c <OsIf_Timer_System_Internal_GetCounter+0xc>)
     d32:	689b      	ldr	r3, [r3, #8]
     d34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
     d38:	4618      	mov	r0, r3
     d3a:	4770      	bx	lr
     d3c:	e000e010 	.word	0xe000e010

00000d40 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
     d40:	b084      	sub	sp, #16
     d42:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
     d44:	4b10      	ldr	r3, [pc, #64]	; (d88 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
     d46:	689b      	ldr	r3, [r3, #8]
     d48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     d4c:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
     d4e:	2300      	movs	r3, #0
     d50:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
     d52:	9b01      	ldr	r3, [sp, #4]
     d54:	681b      	ldr	r3, [r3, #0]
     d56:	9a02      	ldr	r2, [sp, #8]
     d58:	429a      	cmp	r2, r3
     d5a:	d909      	bls.n	d70 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
     d5c:	9b01      	ldr	r3, [sp, #4]
     d5e:	681a      	ldr	r2, [r3, #0]
     d60:	9b02      	ldr	r3, [sp, #8]
     d62:	1ad3      	subs	r3, r2, r3
     d64:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
     d68:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
     d6c:	9303      	str	r3, [sp, #12]
     d6e:	e004      	b.n	d7a <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
     d70:	9b01      	ldr	r3, [sp, #4]
     d72:	681a      	ldr	r2, [r3, #0]
     d74:	9b02      	ldr	r3, [sp, #8]
     d76:	1ad3      	subs	r3, r2, r3
     d78:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
     d7a:	9b01      	ldr	r3, [sp, #4]
     d7c:	9a02      	ldr	r2, [sp, #8]
     d7e:	601a      	str	r2, [r3, #0]

    return dif;
     d80:	9b03      	ldr	r3, [sp, #12]
}
     d82:	4618      	mov	r0, r3
     d84:	b004      	add	sp, #16
     d86:	4770      	bx	lr
     d88:	e000e010 	.word	0xe000e010

00000d8c <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
     d8c:	b082      	sub	sp, #8
     d8e:	9001      	str	r0, [sp, #4]
     d90:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
     d92:	bf00      	nop
     d94:	b002      	add	sp, #8
     d96:	4770      	bx	lr

00000d98 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
     d98:	b500      	push	{lr}
     d9a:	b085      	sub	sp, #20
     d9c:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
     d9e:	4b24      	ldr	r3, [pc, #144]	; (e30 <Clock_Ip_UpdateDriverContext+0x98>)
     da0:	2201      	movs	r2, #1
     da2:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
     da4:	4b23      	ldr	r3, [pc, #140]	; (e34 <Clock_Ip_UpdateDriverContext+0x9c>)
     da6:	681b      	ldr	r3, [r3, #0]
     da8:	2102      	movs	r1, #2
     daa:	4618      	mov	r0, r3
     dac:	f003 fc32 	bl	4614 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
     db0:	2300      	movs	r3, #0
     db2:	f88d 300f 	strb.w	r3, [sp, #15]
     db6:	e015      	b.n	de4 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
     db8:	f89d 300f 	ldrb.w	r3, [sp, #15]
     dbc:	9a01      	ldr	r2, [sp, #4]
     dbe:	334a      	adds	r3, #74	; 0x4a
     dc0:	00db      	lsls	r3, r3, #3
     dc2:	4413      	add	r3, r2
     dc4:	6858      	ldr	r0, [r3, #4]
     dc6:	f89d 300f 	ldrb.w	r3, [sp, #15]
     dca:	9a01      	ldr	r2, [sp, #4]
     dcc:	334a      	adds	r3, #74	; 0x4a
     dce:	00db      	lsls	r3, r3, #3
     dd0:	4413      	add	r3, r2
     dd2:	689b      	ldr	r3, [r3, #8]
     dd4:	4619      	mov	r1, r3
     dd6:	f001 fadc 	bl	2392 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
     dda:	f89d 300f 	ldrb.w	r3, [sp, #15]
     dde:	3301      	adds	r3, #1
     de0:	f88d 300f 	strb.w	r3, [sp, #15]
     de4:	9b01      	ldr	r3, [sp, #4]
     de6:	7bdb      	ldrb	r3, [r3, #15]
     de8:	f89d 200f 	ldrb.w	r2, [sp, #15]
     dec:	429a      	cmp	r2, r3
     dee:	d3e3      	bcc.n	db8 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
     df0:	f000 f824 	bl	e3c <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
     df4:	2301      	movs	r3, #1
     df6:	f88d 300f 	strb.w	r3, [sp, #15]
     dfa:	e00e      	b.n	e1a <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
     dfc:	f89d 200f 	ldrb.w	r2, [sp, #15]
     e00:	9b01      	ldr	r3, [sp, #4]
     e02:	327e      	adds	r2, #126	; 0x7e
     e04:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
     e08:	490b      	ldr	r1, [pc, #44]	; (e38 <Clock_Ip_UpdateDriverContext+0xa0>)
     e0a:	f89d 200f 	ldrb.w	r2, [sp, #15]
     e0e:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
     e10:	f89d 300f 	ldrb.w	r3, [sp, #15]
     e14:	3301      	adds	r3, #1
     e16:	f88d 300f 	strb.w	r3, [sp, #15]
     e1a:	9b01      	ldr	r3, [sp, #4]
     e1c:	7cdb      	ldrb	r3, [r3, #19]
     e1e:	f89d 200f 	ldrb.w	r2, [sp, #15]
     e22:	429a      	cmp	r2, r3
     e24:	d3ea      	bcc.n	dfc <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
     e26:	bf00      	nop
     e28:	bf00      	nop
     e2a:	b005      	add	sp, #20
     e2c:	f85d fb04 	ldr.w	pc, [sp], #4
     e30:	1fff8b10 	.word	0x1fff8b10
     e34:	1fff8b44 	.word	0x1fff8b44
     e38:	1fff8b50 	.word	0x1fff8b50

00000e3c <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
     e3c:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
     e3e:	4b23      	ldr	r3, [pc, #140]	; (ecc <Clock_Ip_CallEmptyCallbacks+0x90>)
     e40:	781b      	ldrb	r3, [r3, #0]
     e42:	f083 0301 	eor.w	r3, r3, #1
     e46:	b2db      	uxtb	r3, r3
     e48:	2b00      	cmp	r3, #0
     e4a:	d03d      	beq.n	ec8 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
     e4c:	4b1f      	ldr	r3, [pc, #124]	; (ecc <Clock_Ip_CallEmptyCallbacks+0x90>)
     e4e:	2201      	movs	r2, #1
     e50:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
     e52:	4b1f      	ldr	r3, [pc, #124]	; (ed0 <Clock_Ip_CallEmptyCallbacks+0x94>)
     e54:	685b      	ldr	r3, [r3, #4]
     e56:	2100      	movs	r1, #0
     e58:	2000      	movs	r0, #0
     e5a:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
     e5c:	4b1c      	ldr	r3, [pc, #112]	; (ed0 <Clock_Ip_CallEmptyCallbacks+0x94>)
     e5e:	689b      	ldr	r3, [r3, #8]
     e60:	2057      	movs	r0, #87	; 0x57
     e62:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     e64:	4b1b      	ldr	r3, [pc, #108]	; (ed4 <Clock_Ip_CallEmptyCallbacks+0x98>)
     e66:	681b      	ldr	r3, [r3, #0]
     e68:	2000      	movs	r0, #0
     e6a:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
     e6c:	4b1a      	ldr	r3, [pc, #104]	; (ed8 <Clock_Ip_CallEmptyCallbacks+0x9c>)
     e6e:	681b      	ldr	r3, [r3, #0]
     e70:	2000      	movs	r0, #0
     e72:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
     e74:	4b19      	ldr	r3, [pc, #100]	; (edc <Clock_Ip_CallEmptyCallbacks+0xa0>)
     e76:	681b      	ldr	r3, [r3, #0]
     e78:	2000      	movs	r0, #0
     e7a:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     e7c:	4b18      	ldr	r3, [pc, #96]	; (ee0 <Clock_Ip_CallEmptyCallbacks+0xa4>)
     e7e:	685b      	ldr	r3, [r3, #4]
     e80:	2000      	movs	r0, #0
     e82:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
     e84:	4b16      	ldr	r3, [pc, #88]	; (ee0 <Clock_Ip_CallEmptyCallbacks+0xa4>)
     e86:	689b      	ldr	r3, [r3, #8]
     e88:	2057      	movs	r0, #87	; 0x57
     e8a:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     e8c:	4b15      	ldr	r3, [pc, #84]	; (ee4 <Clock_Ip_CallEmptyCallbacks+0xa8>)
     e8e:	681b      	ldr	r3, [r3, #0]
     e90:	2000      	movs	r0, #0
     e92:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
     e94:	4b13      	ldr	r3, [pc, #76]	; (ee4 <Clock_Ip_CallEmptyCallbacks+0xa8>)
     e96:	685b      	ldr	r3, [r3, #4]
     e98:	2100      	movs	r1, #0
     e9a:	2057      	movs	r0, #87	; 0x57
     e9c:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     e9e:	4b12      	ldr	r3, [pc, #72]	; (ee8 <Clock_Ip_CallEmptyCallbacks+0xac>)
     ea0:	681b      	ldr	r3, [r3, #0]
     ea2:	2000      	movs	r0, #0
     ea4:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     ea6:	4b11      	ldr	r3, [pc, #68]	; (eec <Clock_Ip_CallEmptyCallbacks+0xb0>)
     ea8:	685b      	ldr	r3, [r3, #4]
     eaa:	2000      	movs	r0, #0
     eac:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
     eae:	4b0f      	ldr	r3, [pc, #60]	; (eec <Clock_Ip_CallEmptyCallbacks+0xb0>)
     eb0:	689b      	ldr	r3, [r3, #8]
     eb2:	2057      	movs	r0, #87	; 0x57
     eb4:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     eb6:	4b0e      	ldr	r3, [pc, #56]	; (ef0 <Clock_Ip_CallEmptyCallbacks+0xb4>)
     eb8:	685b      	ldr	r3, [r3, #4]
     eba:	2000      	movs	r0, #0
     ebc:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
     ebe:	4b0d      	ldr	r3, [pc, #52]	; (ef4 <Clock_Ip_CallEmptyCallbacks+0xb8>)
     ec0:	681b      	ldr	r3, [r3, #0]
     ec2:	2100      	movs	r1, #0
     ec4:	2000      	movs	r0, #0
     ec6:	4798      	blx	r3
    }
}
     ec8:	bf00      	nop
     eca:	bd08      	pop	{r3, pc}
     ecc:	1fff8b48 	.word	0x1fff8b48
     ed0:	00007824 	.word	0x00007824
     ed4:	00007738 	.word	0x00007738
     ed8:	00007774 	.word	0x00007774
     edc:	0000777c 	.word	0x0000777c
     ee0:	000077a4 	.word	0x000077a4
     ee4:	000077b0 	.word	0x000077b0
     ee8:	000077e8 	.word	0x000077e8
     eec:	00007834 	.word	0x00007834
     ef0:	00007860 	.word	0x00007860
     ef4:	0000785c 	.word	0x0000785c

00000ef8 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
     ef8:	b500      	push	{lr}
     efa:	b085      	sub	sp, #20
     efc:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
     efe:	9b01      	ldr	r3, [sp, #4]
     f00:	7adb      	ldrb	r3, [r3, #11]
     f02:	9303      	str	r3, [sp, #12]
     f04:	e01f      	b.n	f46 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
     f06:	9b03      	ldr	r3, [sp, #12]
     f08:	1e5a      	subs	r2, r3, #1
     f0a:	9b01      	ldr	r3, [sp, #4]
     f0c:	320d      	adds	r2, #13
     f0e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
     f12:	495a      	ldr	r1, [pc, #360]	; (107c <Clock_Ip_ResetClockConfiguration+0x184>)
     f14:	4613      	mov	r3, r2
     f16:	00db      	lsls	r3, r3, #3
     f18:	4413      	add	r3, r2
     f1a:	440b      	add	r3, r1
     f1c:	3301      	adds	r3, #1
     f1e:	781b      	ldrb	r3, [r3, #0]
     f20:	461a      	mov	r2, r3
     f22:	4b57      	ldr	r3, [pc, #348]	; (1080 <Clock_Ip_ResetClockConfiguration+0x188>)
     f24:	5c9b      	ldrb	r3, [r3, r2]
     f26:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
     f28:	4a56      	ldr	r2, [pc, #344]	; (1084 <Clock_Ip_ResetClockConfiguration+0x18c>)
     f2a:	9b02      	ldr	r3, [sp, #8]
     f2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     f30:	9a03      	ldr	r2, [sp, #12]
     f32:	3a01      	subs	r2, #1
     f34:	320d      	adds	r2, #13
     f36:	00d2      	lsls	r2, r2, #3
     f38:	9901      	ldr	r1, [sp, #4]
     f3a:	440a      	add	r2, r1
     f3c:	4610      	mov	r0, r2
     f3e:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
     f40:	9b03      	ldr	r3, [sp, #12]
     f42:	3b01      	subs	r3, #1
     f44:	9303      	str	r3, [sp, #12]
     f46:	9b03      	ldr	r3, [sp, #12]
     f48:	2b00      	cmp	r3, #0
     f4a:	d1dc      	bne.n	f06 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
     f4c:	9b01      	ldr	r3, [sp, #4]
     f4e:	7b9b      	ldrb	r3, [r3, #14]
     f50:	9303      	str	r3, [sp, #12]
     f52:	e026      	b.n	fa2 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
     f54:	9b03      	ldr	r3, [sp, #12]
     f56:	3b01      	subs	r3, #1
     f58:	9a01      	ldr	r2, [sp, #4]
     f5a:	3324      	adds	r3, #36	; 0x24
     f5c:	011b      	lsls	r3, r3, #4
     f5e:	4413      	add	r3, r2
     f60:	3304      	adds	r3, #4
     f62:	681a      	ldr	r2, [r3, #0]
     f64:	4945      	ldr	r1, [pc, #276]	; (107c <Clock_Ip_ResetClockConfiguration+0x184>)
     f66:	4613      	mov	r3, r2
     f68:	00db      	lsls	r3, r3, #3
     f6a:	4413      	add	r3, r2
     f6c:	440b      	add	r3, r1
     f6e:	3301      	adds	r3, #1
     f70:	781b      	ldrb	r3, [r3, #0]
     f72:	461a      	mov	r2, r3
     f74:	4b44      	ldr	r3, [pc, #272]	; (1088 <Clock_Ip_ResetClockConfiguration+0x190>)
     f76:	5c9b      	ldrb	r3, [r3, r2]
     f78:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
     f7a:	4944      	ldr	r1, [pc, #272]	; (108c <Clock_Ip_ResetClockConfiguration+0x194>)
     f7c:	9a02      	ldr	r2, [sp, #8]
     f7e:	4613      	mov	r3, r2
     f80:	005b      	lsls	r3, r3, #1
     f82:	4413      	add	r3, r2
     f84:	009b      	lsls	r3, r3, #2
     f86:	440b      	add	r3, r1
     f88:	681b      	ldr	r3, [r3, #0]
     f8a:	9a03      	ldr	r2, [sp, #12]
     f8c:	3a01      	subs	r2, #1
     f8e:	3224      	adds	r2, #36	; 0x24
     f90:	0112      	lsls	r2, r2, #4
     f92:	9901      	ldr	r1, [sp, #4]
     f94:	440a      	add	r2, r1
     f96:	3204      	adds	r2, #4
     f98:	4610      	mov	r0, r2
     f9a:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
     f9c:	9b03      	ldr	r3, [sp, #12]
     f9e:	3b01      	subs	r3, #1
     fa0:	9303      	str	r3, [sp, #12]
     fa2:	9b03      	ldr	r3, [sp, #12]
     fa4:	2b00      	cmp	r3, #0
     fa6:	d1d5      	bne.n	f54 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
     fa8:	9b01      	ldr	r3, [sp, #4]
     faa:	7a9b      	ldrb	r3, [r3, #10]
     fac:	9303      	str	r3, [sp, #12]
     fae:	e02a      	b.n	1006 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
     fb0:	9b03      	ldr	r3, [sp, #12]
     fb2:	1e5a      	subs	r2, r3, #1
     fb4:	9901      	ldr	r1, [sp, #4]
     fb6:	4613      	mov	r3, r2
     fb8:	009b      	lsls	r3, r3, #2
     fba:	4413      	add	r3, r2
     fbc:	00db      	lsls	r3, r3, #3
     fbe:	440b      	add	r3, r1
     fc0:	3340      	adds	r3, #64	; 0x40
     fc2:	681a      	ldr	r2, [r3, #0]
     fc4:	492d      	ldr	r1, [pc, #180]	; (107c <Clock_Ip_ResetClockConfiguration+0x184>)
     fc6:	4613      	mov	r3, r2
     fc8:	00db      	lsls	r3, r3, #3
     fca:	4413      	add	r3, r2
     fcc:	440b      	add	r3, r1
     fce:	3301      	adds	r3, #1
     fd0:	781b      	ldrb	r3, [r3, #0]
     fd2:	461a      	mov	r2, r3
     fd4:	4b2e      	ldr	r3, [pc, #184]	; (1090 <Clock_Ip_ResetClockConfiguration+0x198>)
     fd6:	5c9b      	ldrb	r3, [r3, r2]
     fd8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
     fda:	492e      	ldr	r1, [pc, #184]	; (1094 <Clock_Ip_ResetClockConfiguration+0x19c>)
     fdc:	9a02      	ldr	r2, [sp, #8]
     fde:	4613      	mov	r3, r2
     fe0:	009b      	lsls	r3, r3, #2
     fe2:	4413      	add	r3, r2
     fe4:	009b      	lsls	r3, r3, #2
     fe6:	440b      	add	r3, r1
     fe8:	6819      	ldr	r1, [r3, #0]
     fea:	9b03      	ldr	r3, [sp, #12]
     fec:	1e5a      	subs	r2, r3, #1
     fee:	4613      	mov	r3, r2
     ff0:	009b      	lsls	r3, r3, #2
     ff2:	4413      	add	r3, r2
     ff4:	00db      	lsls	r3, r3, #3
     ff6:	3340      	adds	r3, #64	; 0x40
     ff8:	9a01      	ldr	r2, [sp, #4]
     ffa:	4413      	add	r3, r2
     ffc:	4618      	mov	r0, r3
     ffe:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1000:	9b03      	ldr	r3, [sp, #12]
    1002:	3b01      	subs	r3, #1
    1004:	9303      	str	r3, [sp, #12]
    1006:	9b03      	ldr	r3, [sp, #12]
    1008:	2b00      	cmp	r3, #0
    100a:	d1d1      	bne.n	fb0 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    100c:	9b01      	ldr	r3, [sp, #4]
    100e:	7a5b      	ldrb	r3, [r3, #9]
    1010:	9303      	str	r3, [sp, #12]
    1012:	e02b      	b.n	106c <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1014:	9b03      	ldr	r3, [sp, #12]
    1016:	1e5a      	subs	r2, r3, #1
    1018:	9901      	ldr	r1, [sp, #4]
    101a:	4613      	mov	r3, r2
    101c:	009b      	lsls	r3, r3, #2
    101e:	4413      	add	r3, r2
    1020:	009b      	lsls	r3, r3, #2
    1022:	440b      	add	r3, r1
    1024:	332c      	adds	r3, #44	; 0x2c
    1026:	681a      	ldr	r2, [r3, #0]
    1028:	4914      	ldr	r1, [pc, #80]	; (107c <Clock_Ip_ResetClockConfiguration+0x184>)
    102a:	4613      	mov	r3, r2
    102c:	00db      	lsls	r3, r3, #3
    102e:	4413      	add	r3, r2
    1030:	440b      	add	r3, r1
    1032:	3301      	adds	r3, #1
    1034:	781b      	ldrb	r3, [r3, #0]
    1036:	461a      	mov	r2, r3
    1038:	4b17      	ldr	r3, [pc, #92]	; (1098 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    103a:	5c9b      	ldrb	r3, [r3, r2]
    103c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    103e:	4917      	ldr	r1, [pc, #92]	; (109c <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1040:	9a02      	ldr	r2, [sp, #8]
    1042:	4613      	mov	r3, r2
    1044:	009b      	lsls	r3, r3, #2
    1046:	4413      	add	r3, r2
    1048:	009b      	lsls	r3, r3, #2
    104a:	440b      	add	r3, r1
    104c:	6819      	ldr	r1, [r3, #0]
    104e:	9b03      	ldr	r3, [sp, #12]
    1050:	1e5a      	subs	r2, r3, #1
    1052:	4613      	mov	r3, r2
    1054:	009b      	lsls	r3, r3, #2
    1056:	4413      	add	r3, r2
    1058:	009b      	lsls	r3, r3, #2
    105a:	3328      	adds	r3, #40	; 0x28
    105c:	9a01      	ldr	r2, [sp, #4]
    105e:	4413      	add	r3, r2
    1060:	3304      	adds	r3, #4
    1062:	4618      	mov	r0, r3
    1064:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1066:	9b03      	ldr	r3, [sp, #12]
    1068:	3b01      	subs	r3, #1
    106a:	9303      	str	r3, [sp, #12]
    106c:	9b03      	ldr	r3, [sp, #12]
    106e:	2b00      	cmp	r3, #0
    1070:	d1d0      	bne.n	1014 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    1072:	bf00      	nop
    1074:	bf00      	nop
    1076:	b005      	add	sp, #20
    1078:	f85d fb04 	ldr.w	pc, [sp], #4
    107c:	00007228 	.word	0x00007228
    1080:	000071f8 	.word	0x000071f8
    1084:	00007860 	.word	0x00007860
    1088:	000071d8 	.word	0x000071d8
    108c:	000077a4 	.word	0x000077a4
    1090:	000071e8 	.word	0x000071e8
    1094:	00007834 	.word	0x00007834
    1098:	000071a8 	.word	0x000071a8
    109c:	0000777c 	.word	0x0000777c

000010a0 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    10a0:	b500      	push	{lr}
    10a2:	b085      	sub	sp, #20
    10a4:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    10a6:	2301      	movs	r3, #1
    10a8:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    10aa:	9801      	ldr	r0, [sp, #4]
    10ac:	f000 f818 	bl	10e0 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    10b0:	4b0a      	ldr	r3, [pc, #40]	; (10dc <Clock_Ip_Init+0x3c>)
    10b2:	781b      	ldrb	r3, [r3, #0]
    10b4:	2b00      	cmp	r3, #0
    10b6:	d00a      	beq.n	10ce <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    10b8:	f000 fb74 	bl	17a4 <Clock_Ip_GetPllStatus>
    10bc:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    10be:	9b02      	ldr	r3, [sp, #8]
    10c0:	2b00      	cmp	r3, #0
    10c2:	d106      	bne.n	10d2 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    10c4:	f000 fbf2 	bl	18ac <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    10c8:	2300      	movs	r3, #0
    10ca:	9303      	str	r3, [sp, #12]
    10cc:	e001      	b.n	10d2 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    10ce:	2300      	movs	r3, #0
    10d0:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    10d2:	9b03      	ldr	r3, [sp, #12]
}
    10d4:	4618      	mov	r0, r3
    10d6:	b005      	add	sp, #20
    10d8:	f85d fb04 	ldr.w	pc, [sp], #4
    10dc:	1fff8b4c 	.word	0x1fff8b4c

000010e0 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    10e0:	b510      	push	{r4, lr}
    10e2:	b084      	sub	sp, #16
    10e4:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    10e6:	4a9f      	ldr	r2, [pc, #636]	; (1364 <Clock_Ip_InitClock+0x284>)
    10e8:	9b01      	ldr	r3, [sp, #4]
    10ea:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    10ec:	2101      	movs	r1, #1
    10ee:	9801      	ldr	r0, [sp, #4]
    10f0:	f003 fa90 	bl	4614 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    10f4:	4b9b      	ldr	r3, [pc, #620]	; (1364 <Clock_Ip_InitClock+0x284>)
    10f6:	681b      	ldr	r3, [r3, #0]
    10f8:	2b00      	cmp	r3, #0
    10fa:	d030      	beq.n	115e <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    10fc:	2300      	movs	r3, #0
    10fe:	9303      	str	r3, [sp, #12]
    1100:	e027      	b.n	1152 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1102:	9901      	ldr	r1, [sp, #4]
    1104:	9a03      	ldr	r2, [sp, #12]
    1106:	4613      	mov	r3, r2
    1108:	009b      	lsls	r3, r3, #2
    110a:	4413      	add	r3, r2
    110c:	009b      	lsls	r3, r3, #2
    110e:	440b      	add	r3, r1
    1110:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1114:	681a      	ldr	r2, [r3, #0]
    1116:	4994      	ldr	r1, [pc, #592]	; (1368 <Clock_Ip_InitClock+0x288>)
    1118:	4613      	mov	r3, r2
    111a:	00db      	lsls	r3, r3, #3
    111c:	4413      	add	r3, r2
    111e:	440b      	add	r3, r1
    1120:	3301      	adds	r3, #1
    1122:	781b      	ldrb	r3, [r3, #0]
    1124:	461a      	mov	r2, r3
    1126:	4b91      	ldr	r3, [pc, #580]	; (136c <Clock_Ip_InitClock+0x28c>)
    1128:	5c9b      	ldrb	r3, [r3, r2]
    112a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    112c:	4a90      	ldr	r2, [pc, #576]	; (1370 <Clock_Ip_InitClock+0x290>)
    112e:	9b02      	ldr	r3, [sp, #8]
    1130:	011b      	lsls	r3, r3, #4
    1132:	4413      	add	r3, r2
    1134:	6819      	ldr	r1, [r3, #0]
    1136:	9a03      	ldr	r2, [sp, #12]
    1138:	4613      	mov	r3, r2
    113a:	009b      	lsls	r3, r3, #2
    113c:	4413      	add	r3, r2
    113e:	009b      	lsls	r3, r3, #2
    1140:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1144:	9a01      	ldr	r2, [sp, #4]
    1146:	4413      	add	r3, r2
    1148:	4618      	mov	r0, r3
    114a:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    114c:	9b03      	ldr	r3, [sp, #12]
    114e:	3301      	adds	r3, #1
    1150:	9303      	str	r3, [sp, #12]
    1152:	9b01      	ldr	r3, [sp, #4]
    1154:	7c9b      	ldrb	r3, [r3, #18]
    1156:	461a      	mov	r2, r3
    1158:	9b03      	ldr	r3, [sp, #12]
    115a:	4293      	cmp	r3, r2
    115c:	d3d1      	bcc.n	1102 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    115e:	9801      	ldr	r0, [sp, #4]
    1160:	f7ff feca 	bl	ef8 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1164:	2300      	movs	r3, #0
    1166:	9303      	str	r3, [sp, #12]
    1168:	e029      	b.n	11be <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    116a:	9901      	ldr	r1, [sp, #4]
    116c:	9a03      	ldr	r2, [sp, #12]
    116e:	4613      	mov	r3, r2
    1170:	005b      	lsls	r3, r3, #1
    1172:	4413      	add	r3, r2
    1174:	009b      	lsls	r3, r3, #2
    1176:	440b      	add	r3, r1
    1178:	3314      	adds	r3, #20
    117a:	681a      	ldr	r2, [r3, #0]
    117c:	497a      	ldr	r1, [pc, #488]	; (1368 <Clock_Ip_InitClock+0x288>)
    117e:	4613      	mov	r3, r2
    1180:	00db      	lsls	r3, r3, #3
    1182:	4413      	add	r3, r2
    1184:	440b      	add	r3, r1
    1186:	3301      	adds	r3, #1
    1188:	781b      	ldrb	r3, [r3, #0]
    118a:	461a      	mov	r2, r3
    118c:	4b79      	ldr	r3, [pc, #484]	; (1374 <Clock_Ip_InitClock+0x294>)
    118e:	5c9b      	ldrb	r3, [r3, r2]
    1190:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    1192:	4979      	ldr	r1, [pc, #484]	; (1378 <Clock_Ip_InitClock+0x298>)
    1194:	9a02      	ldr	r2, [sp, #8]
    1196:	4613      	mov	r3, r2
    1198:	005b      	lsls	r3, r3, #1
    119a:	4413      	add	r3, r2
    119c:	009b      	lsls	r3, r3, #2
    119e:	440b      	add	r3, r1
    11a0:	6819      	ldr	r1, [r3, #0]
    11a2:	9a03      	ldr	r2, [sp, #12]
    11a4:	4613      	mov	r3, r2
    11a6:	005b      	lsls	r3, r3, #1
    11a8:	4413      	add	r3, r2
    11aa:	009b      	lsls	r3, r3, #2
    11ac:	3310      	adds	r3, #16
    11ae:	9a01      	ldr	r2, [sp, #4]
    11b0:	4413      	add	r3, r2
    11b2:	3304      	adds	r3, #4
    11b4:	4618      	mov	r0, r3
    11b6:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    11b8:	9b03      	ldr	r3, [sp, #12]
    11ba:	3301      	adds	r3, #1
    11bc:	9303      	str	r3, [sp, #12]
    11be:	9b01      	ldr	r3, [sp, #4]
    11c0:	7a1b      	ldrb	r3, [r3, #8]
    11c2:	461a      	mov	r2, r3
    11c4:	9b03      	ldr	r3, [sp, #12]
    11c6:	4293      	cmp	r3, r2
    11c8:	d3cf      	bcc.n	116a <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    11ca:	2300      	movs	r3, #0
    11cc:	9303      	str	r3, [sp, #12]
    11ce:	e02a      	b.n	1226 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    11d0:	9901      	ldr	r1, [sp, #4]
    11d2:	9a03      	ldr	r2, [sp, #12]
    11d4:	4613      	mov	r3, r2
    11d6:	009b      	lsls	r3, r3, #2
    11d8:	4413      	add	r3, r2
    11da:	009b      	lsls	r3, r3, #2
    11dc:	440b      	add	r3, r1
    11de:	332c      	adds	r3, #44	; 0x2c
    11e0:	681a      	ldr	r2, [r3, #0]
    11e2:	4961      	ldr	r1, [pc, #388]	; (1368 <Clock_Ip_InitClock+0x288>)
    11e4:	4613      	mov	r3, r2
    11e6:	00db      	lsls	r3, r3, #3
    11e8:	4413      	add	r3, r2
    11ea:	440b      	add	r3, r1
    11ec:	3301      	adds	r3, #1
    11ee:	781b      	ldrb	r3, [r3, #0]
    11f0:	461a      	mov	r2, r3
    11f2:	4b62      	ldr	r3, [pc, #392]	; (137c <Clock_Ip_InitClock+0x29c>)
    11f4:	5c9b      	ldrb	r3, [r3, r2]
    11f6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    11f8:	4961      	ldr	r1, [pc, #388]	; (1380 <Clock_Ip_InitClock+0x2a0>)
    11fa:	9a02      	ldr	r2, [sp, #8]
    11fc:	4613      	mov	r3, r2
    11fe:	009b      	lsls	r3, r3, #2
    1200:	4413      	add	r3, r2
    1202:	009b      	lsls	r3, r3, #2
    1204:	440b      	add	r3, r1
    1206:	3304      	adds	r3, #4
    1208:	6819      	ldr	r1, [r3, #0]
    120a:	9a03      	ldr	r2, [sp, #12]
    120c:	4613      	mov	r3, r2
    120e:	009b      	lsls	r3, r3, #2
    1210:	4413      	add	r3, r2
    1212:	009b      	lsls	r3, r3, #2
    1214:	3328      	adds	r3, #40	; 0x28
    1216:	9a01      	ldr	r2, [sp, #4]
    1218:	4413      	add	r3, r2
    121a:	3304      	adds	r3, #4
    121c:	4618      	mov	r0, r3
    121e:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    1220:	9b03      	ldr	r3, [sp, #12]
    1222:	3301      	adds	r3, #1
    1224:	9303      	str	r3, [sp, #12]
    1226:	9b01      	ldr	r3, [sp, #4]
    1228:	7a5b      	ldrb	r3, [r3, #9]
    122a:	461a      	mov	r2, r3
    122c:	9b03      	ldr	r3, [sp, #12]
    122e:	4293      	cmp	r3, r2
    1230:	d3ce      	bcc.n	11d0 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    1232:	9801      	ldr	r0, [sp, #4]
    1234:	f7ff fdb0 	bl	d98 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1238:	2300      	movs	r3, #0
    123a:	9303      	str	r3, [sp, #12]
    123c:	e028      	b.n	1290 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    123e:	9901      	ldr	r1, [sp, #4]
    1240:	9a03      	ldr	r2, [sp, #12]
    1242:	4613      	mov	r3, r2
    1244:	009b      	lsls	r3, r3, #2
    1246:	4413      	add	r3, r2
    1248:	009b      	lsls	r3, r3, #2
    124a:	440b      	add	r3, r1
    124c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1250:	681a      	ldr	r2, [r3, #0]
    1252:	4945      	ldr	r1, [pc, #276]	; (1368 <Clock_Ip_InitClock+0x288>)
    1254:	4613      	mov	r3, r2
    1256:	00db      	lsls	r3, r3, #3
    1258:	4413      	add	r3, r2
    125a:	440b      	add	r3, r1
    125c:	3301      	adds	r3, #1
    125e:	781b      	ldrb	r3, [r3, #0]
    1260:	461a      	mov	r2, r3
    1262:	4b48      	ldr	r3, [pc, #288]	; (1384 <Clock_Ip_InitClock+0x2a4>)
    1264:	5c9b      	ldrb	r3, [r3, r2]
    1266:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    1268:	4a47      	ldr	r2, [pc, #284]	; (1388 <Clock_Ip_InitClock+0x2a8>)
    126a:	9b02      	ldr	r3, [sp, #8]
    126c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1270:	9a03      	ldr	r2, [sp, #12]
    1272:	4613      	mov	r3, r2
    1274:	009b      	lsls	r3, r3, #2
    1276:	4413      	add	r3, r2
    1278:	009b      	lsls	r3, r3, #2
    127a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    127e:	9a01      	ldr	r2, [sp, #4]
    1280:	4413      	add	r3, r2
    1282:	3304      	adds	r3, #4
    1284:	9903      	ldr	r1, [sp, #12]
    1286:	4618      	mov	r0, r3
    1288:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    128a:	9b03      	ldr	r3, [sp, #12]
    128c:	3301      	adds	r3, #1
    128e:	9303      	str	r3, [sp, #12]
    1290:	9b01      	ldr	r3, [sp, #4]
    1292:	7c5b      	ldrb	r3, [r3, #17]
    1294:	461a      	mov	r2, r3
    1296:	9b03      	ldr	r3, [sp, #12]
    1298:	4293      	cmp	r3, r2
    129a:	d3d0      	bcc.n	123e <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    129c:	2300      	movs	r3, #0
    129e:	9303      	str	r3, [sp, #12]
    12a0:	e026      	b.n	12f0 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    12a2:	9901      	ldr	r1, [sp, #4]
    12a4:	9a03      	ldr	r2, [sp, #12]
    12a6:	4613      	mov	r3, r2
    12a8:	005b      	lsls	r3, r3, #1
    12aa:	4413      	add	r3, r2
    12ac:	009b      	lsls	r3, r3, #2
    12ae:	440b      	add	r3, r1
    12b0:	f503 730e 	add.w	r3, r3, #568	; 0x238
    12b4:	681a      	ldr	r2, [r3, #0]
    12b6:	492c      	ldr	r1, [pc, #176]	; (1368 <Clock_Ip_InitClock+0x288>)
    12b8:	4613      	mov	r3, r2
    12ba:	00db      	lsls	r3, r3, #3
    12bc:	4413      	add	r3, r2
    12be:	440b      	add	r3, r1
    12c0:	3301      	adds	r3, #1
    12c2:	781b      	ldrb	r3, [r3, #0]
    12c4:	461a      	mov	r2, r3
    12c6:	4b31      	ldr	r3, [pc, #196]	; (138c <Clock_Ip_InitClock+0x2ac>)
    12c8:	5c9b      	ldrb	r3, [r3, r2]
    12ca:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    12cc:	4a30      	ldr	r2, [pc, #192]	; (1390 <Clock_Ip_InitClock+0x2b0>)
    12ce:	9b02      	ldr	r3, [sp, #8]
    12d0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    12d4:	9a03      	ldr	r2, [sp, #12]
    12d6:	4613      	mov	r3, r2
    12d8:	005b      	lsls	r3, r3, #1
    12da:	4413      	add	r3, r2
    12dc:	009b      	lsls	r3, r3, #2
    12de:	f503 730e 	add.w	r3, r3, #568	; 0x238
    12e2:	9a01      	ldr	r2, [sp, #4]
    12e4:	4413      	add	r3, r2
    12e6:	4618      	mov	r0, r3
    12e8:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    12ea:	9b03      	ldr	r3, [sp, #12]
    12ec:	3301      	adds	r3, #1
    12ee:	9303      	str	r3, [sp, #12]
    12f0:	9b01      	ldr	r3, [sp, #4]
    12f2:	7b5b      	ldrb	r3, [r3, #13]
    12f4:	461a      	mov	r2, r3
    12f6:	9b03      	ldr	r3, [sp, #12]
    12f8:	4293      	cmp	r3, r2
    12fa:	d3d2      	bcc.n	12a2 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    12fc:	2300      	movs	r3, #0
    12fe:	9303      	str	r3, [sp, #12]
    1300:	e026      	b.n	1350 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    1302:	9901      	ldr	r1, [sp, #4]
    1304:	9a03      	ldr	r2, [sp, #12]
    1306:	4613      	mov	r3, r2
    1308:	005b      	lsls	r3, r3, #1
    130a:	4413      	add	r3, r2
    130c:	009b      	lsls	r3, r3, #2
    130e:	440b      	add	r3, r1
    1310:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1314:	681a      	ldr	r2, [r3, #0]
    1316:	4914      	ldr	r1, [pc, #80]	; (1368 <Clock_Ip_InitClock+0x288>)
    1318:	4613      	mov	r3, r2
    131a:	00db      	lsls	r3, r3, #3
    131c:	4413      	add	r3, r2
    131e:	440b      	add	r3, r1
    1320:	3301      	adds	r3, #1
    1322:	781b      	ldrb	r3, [r3, #0]
    1324:	461a      	mov	r2, r3
    1326:	4b1b      	ldr	r3, [pc, #108]	; (1394 <Clock_Ip_InitClock+0x2b4>)
    1328:	5c9b      	ldrb	r3, [r3, r2]
    132a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    132c:	4a1a      	ldr	r2, [pc, #104]	; (1398 <Clock_Ip_InitClock+0x2b8>)
    132e:	9b02      	ldr	r3, [sp, #8]
    1330:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    1334:	9a03      	ldr	r2, [sp, #12]
    1336:	4613      	mov	r3, r2
    1338:	005b      	lsls	r3, r3, #1
    133a:	4413      	add	r3, r2
    133c:	009b      	lsls	r3, r3, #2
    133e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1342:	9a01      	ldr	r2, [sp, #4]
    1344:	4413      	add	r3, r2
    1346:	4618      	mov	r0, r3
    1348:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    134a:	9b03      	ldr	r3, [sp, #12]
    134c:	3301      	adds	r3, #1
    134e:	9303      	str	r3, [sp, #12]
    1350:	9b01      	ldr	r3, [sp, #4]
    1352:	7b1b      	ldrb	r3, [r3, #12]
    1354:	461a      	mov	r2, r3
    1356:	9b03      	ldr	r3, [sp, #12]
    1358:	4293      	cmp	r3, r2
    135a:	d3d2      	bcc.n	1302 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    135c:	2300      	movs	r3, #0
    135e:	9303      	str	r3, [sp, #12]
    1360:	e044      	b.n	13ec <Clock_Ip_InitClock+0x30c>
    1362:	bf00      	nop
    1364:	1fff8b44 	.word	0x1fff8b44
    1368:	00007228 	.word	0x00007228
    136c:	00007218 	.word	0x00007218
    1370:	00007824 	.word	0x00007824
    1374:	000071b8 	.word	0x000071b8
    1378:	000077e8 	.word	0x000077e8
    137c:	000071a8 	.word	0x000071a8
    1380:	0000777c 	.word	0x0000777c
    1384:	00007208 	.word	0x00007208
    1388:	0000785c 	.word	0x0000785c
    138c:	00007198 	.word	0x00007198
    1390:	00007774 	.word	0x00007774
    1394:	00007188 	.word	0x00007188
    1398:	00007738 	.word	0x00007738
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    139c:	9901      	ldr	r1, [sp, #4]
    139e:	9a03      	ldr	r2, [sp, #12]
    13a0:	4613      	mov	r3, r2
    13a2:	005b      	lsls	r3, r3, #1
    13a4:	4413      	add	r3, r2
    13a6:	009b      	lsls	r3, r3, #2
    13a8:	440b      	add	r3, r1
    13aa:	f503 730e 	add.w	r3, r3, #568	; 0x238
    13ae:	681a      	ldr	r2, [r3, #0]
    13b0:	49ac      	ldr	r1, [pc, #688]	; (1664 <Clock_Ip_InitClock+0x584>)
    13b2:	4613      	mov	r3, r2
    13b4:	00db      	lsls	r3, r3, #3
    13b6:	4413      	add	r3, r2
    13b8:	440b      	add	r3, r1
    13ba:	3301      	adds	r3, #1
    13bc:	781b      	ldrb	r3, [r3, #0]
    13be:	461a      	mov	r2, r3
    13c0:	4ba9      	ldr	r3, [pc, #676]	; (1668 <Clock_Ip_InitClock+0x588>)
    13c2:	5c9b      	ldrb	r3, [r3, r2]
    13c4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    13c6:	4aa9      	ldr	r2, [pc, #676]	; (166c <Clock_Ip_InitClock+0x58c>)
    13c8:	9b02      	ldr	r3, [sp, #8]
    13ca:	00db      	lsls	r3, r3, #3
    13cc:	4413      	add	r3, r2
    13ce:	6859      	ldr	r1, [r3, #4]
    13d0:	9a03      	ldr	r2, [sp, #12]
    13d2:	4613      	mov	r3, r2
    13d4:	005b      	lsls	r3, r3, #1
    13d6:	4413      	add	r3, r2
    13d8:	009b      	lsls	r3, r3, #2
    13da:	f503 730e 	add.w	r3, r3, #568	; 0x238
    13de:	9a01      	ldr	r2, [sp, #4]
    13e0:	4413      	add	r3, r2
    13e2:	4618      	mov	r0, r3
    13e4:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    13e6:	9b03      	ldr	r3, [sp, #12]
    13e8:	3301      	adds	r3, #1
    13ea:	9303      	str	r3, [sp, #12]
    13ec:	9b01      	ldr	r3, [sp, #4]
    13ee:	7b5b      	ldrb	r3, [r3, #13]
    13f0:	461a      	mov	r2, r3
    13f2:	9b03      	ldr	r3, [sp, #12]
    13f4:	4293      	cmp	r3, r2
    13f6:	d3d1      	bcc.n	139c <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    13f8:	2300      	movs	r3, #0
    13fa:	9303      	str	r3, [sp, #12]
    13fc:	e029      	b.n	1452 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    13fe:	9901      	ldr	r1, [sp, #4]
    1400:	9a03      	ldr	r2, [sp, #12]
    1402:	4613      	mov	r3, r2
    1404:	009b      	lsls	r3, r3, #2
    1406:	4413      	add	r3, r2
    1408:	00db      	lsls	r3, r3, #3
    140a:	440b      	add	r3, r1
    140c:	3340      	adds	r3, #64	; 0x40
    140e:	681a      	ldr	r2, [r3, #0]
    1410:	4994      	ldr	r1, [pc, #592]	; (1664 <Clock_Ip_InitClock+0x584>)
    1412:	4613      	mov	r3, r2
    1414:	00db      	lsls	r3, r3, #3
    1416:	4413      	add	r3, r2
    1418:	440b      	add	r3, r1
    141a:	3301      	adds	r3, #1
    141c:	781b      	ldrb	r3, [r3, #0]
    141e:	461a      	mov	r2, r3
    1420:	4b93      	ldr	r3, [pc, #588]	; (1670 <Clock_Ip_InitClock+0x590>)
    1422:	5c9b      	ldrb	r3, [r3, r2]
    1424:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    1426:	4993      	ldr	r1, [pc, #588]	; (1674 <Clock_Ip_InitClock+0x594>)
    1428:	9a02      	ldr	r2, [sp, #8]
    142a:	4613      	mov	r3, r2
    142c:	009b      	lsls	r3, r3, #2
    142e:	4413      	add	r3, r2
    1430:	009b      	lsls	r3, r3, #2
    1432:	440b      	add	r3, r1
    1434:	3304      	adds	r3, #4
    1436:	6819      	ldr	r1, [r3, #0]
    1438:	9a03      	ldr	r2, [sp, #12]
    143a:	4613      	mov	r3, r2
    143c:	009b      	lsls	r3, r3, #2
    143e:	4413      	add	r3, r2
    1440:	00db      	lsls	r3, r3, #3
    1442:	3340      	adds	r3, #64	; 0x40
    1444:	9a01      	ldr	r2, [sp, #4]
    1446:	4413      	add	r3, r2
    1448:	4618      	mov	r0, r3
    144a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    144c:	9b03      	ldr	r3, [sp, #12]
    144e:	3301      	adds	r3, #1
    1450:	9303      	str	r3, [sp, #12]
    1452:	9b01      	ldr	r3, [sp, #4]
    1454:	7a9b      	ldrb	r3, [r3, #10]
    1456:	461a      	mov	r2, r3
    1458:	9b03      	ldr	r3, [sp, #12]
    145a:	4293      	cmp	r3, r2
    145c:	d3cf      	bcc.n	13fe <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    145e:	2300      	movs	r3, #0
    1460:	9303      	str	r3, [sp, #12]
    1462:	e029      	b.n	14b8 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1464:	9901      	ldr	r1, [sp, #4]
    1466:	9a03      	ldr	r2, [sp, #12]
    1468:	4613      	mov	r3, r2
    146a:	009b      	lsls	r3, r3, #2
    146c:	4413      	add	r3, r2
    146e:	009b      	lsls	r3, r3, #2
    1470:	440b      	add	r3, r1
    1472:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1476:	681a      	ldr	r2, [r3, #0]
    1478:	497a      	ldr	r1, [pc, #488]	; (1664 <Clock_Ip_InitClock+0x584>)
    147a:	4613      	mov	r3, r2
    147c:	00db      	lsls	r3, r3, #3
    147e:	4413      	add	r3, r2
    1480:	440b      	add	r3, r1
    1482:	3301      	adds	r3, #1
    1484:	781b      	ldrb	r3, [r3, #0]
    1486:	461a      	mov	r2, r3
    1488:	4b7b      	ldr	r3, [pc, #492]	; (1678 <Clock_Ip_InitClock+0x598>)
    148a:	5c9b      	ldrb	r3, [r3, r2]
    148c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    148e:	4a7b      	ldr	r2, [pc, #492]	; (167c <Clock_Ip_InitClock+0x59c>)
    1490:	9b02      	ldr	r3, [sp, #8]
    1492:	011b      	lsls	r3, r3, #4
    1494:	4413      	add	r3, r2
    1496:	3304      	adds	r3, #4
    1498:	681c      	ldr	r4, [r3, #0]
    149a:	9a03      	ldr	r2, [sp, #12]
    149c:	4613      	mov	r3, r2
    149e:	009b      	lsls	r3, r3, #2
    14a0:	4413      	add	r3, r2
    14a2:	009b      	lsls	r3, r3, #2
    14a4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    14a8:	9a01      	ldr	r2, [sp, #4]
    14aa:	4413      	add	r3, r2
    14ac:	9903      	ldr	r1, [sp, #12]
    14ae:	4618      	mov	r0, r3
    14b0:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    14b2:	9b03      	ldr	r3, [sp, #12]
    14b4:	3301      	adds	r3, #1
    14b6:	9303      	str	r3, [sp, #12]
    14b8:	9b01      	ldr	r3, [sp, #4]
    14ba:	7c9b      	ldrb	r3, [r3, #18]
    14bc:	461a      	mov	r2, r3
    14be:	9b03      	ldr	r3, [sp, #12]
    14c0:	4293      	cmp	r3, r2
    14c2:	d3cf      	bcc.n	1464 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    14c4:	2300      	movs	r3, #0
    14c6:	9303      	str	r3, [sp, #12]
    14c8:	e02a      	b.n	1520 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    14ca:	9901      	ldr	r1, [sp, #4]
    14cc:	9a03      	ldr	r2, [sp, #12]
    14ce:	4613      	mov	r3, r2
    14d0:	009b      	lsls	r3, r3, #2
    14d2:	4413      	add	r3, r2
    14d4:	009b      	lsls	r3, r3, #2
    14d6:	440b      	add	r3, r1
    14d8:	332c      	adds	r3, #44	; 0x2c
    14da:	681a      	ldr	r2, [r3, #0]
    14dc:	4961      	ldr	r1, [pc, #388]	; (1664 <Clock_Ip_InitClock+0x584>)
    14de:	4613      	mov	r3, r2
    14e0:	00db      	lsls	r3, r3, #3
    14e2:	4413      	add	r3, r2
    14e4:	440b      	add	r3, r1
    14e6:	3301      	adds	r3, #1
    14e8:	781b      	ldrb	r3, [r3, #0]
    14ea:	461a      	mov	r2, r3
    14ec:	4b64      	ldr	r3, [pc, #400]	; (1680 <Clock_Ip_InitClock+0x5a0>)
    14ee:	5c9b      	ldrb	r3, [r3, r2]
    14f0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    14f2:	4964      	ldr	r1, [pc, #400]	; (1684 <Clock_Ip_InitClock+0x5a4>)
    14f4:	9a02      	ldr	r2, [sp, #8]
    14f6:	4613      	mov	r3, r2
    14f8:	009b      	lsls	r3, r3, #2
    14fa:	4413      	add	r3, r2
    14fc:	009b      	lsls	r3, r3, #2
    14fe:	440b      	add	r3, r1
    1500:	3308      	adds	r3, #8
    1502:	6819      	ldr	r1, [r3, #0]
    1504:	9a03      	ldr	r2, [sp, #12]
    1506:	4613      	mov	r3, r2
    1508:	009b      	lsls	r3, r3, #2
    150a:	4413      	add	r3, r2
    150c:	009b      	lsls	r3, r3, #2
    150e:	3328      	adds	r3, #40	; 0x28
    1510:	9a01      	ldr	r2, [sp, #4]
    1512:	4413      	add	r3, r2
    1514:	3304      	adds	r3, #4
    1516:	4618      	mov	r0, r3
    1518:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    151a:	9b03      	ldr	r3, [sp, #12]
    151c:	3301      	adds	r3, #1
    151e:	9303      	str	r3, [sp, #12]
    1520:	9b01      	ldr	r3, [sp, #4]
    1522:	7a5b      	ldrb	r3, [r3, #9]
    1524:	461a      	mov	r2, r3
    1526:	9b03      	ldr	r3, [sp, #12]
    1528:	4293      	cmp	r3, r2
    152a:	d3ce      	bcc.n	14ca <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    152c:	2300      	movs	r3, #0
    152e:	9303      	str	r3, [sp, #12]
    1530:	e029      	b.n	1586 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1532:	9901      	ldr	r1, [sp, #4]
    1534:	9a03      	ldr	r2, [sp, #12]
    1536:	4613      	mov	r3, r2
    1538:	009b      	lsls	r3, r3, #2
    153a:	4413      	add	r3, r2
    153c:	00db      	lsls	r3, r3, #3
    153e:	440b      	add	r3, r1
    1540:	3340      	adds	r3, #64	; 0x40
    1542:	681a      	ldr	r2, [r3, #0]
    1544:	4947      	ldr	r1, [pc, #284]	; (1664 <Clock_Ip_InitClock+0x584>)
    1546:	4613      	mov	r3, r2
    1548:	00db      	lsls	r3, r3, #3
    154a:	4413      	add	r3, r2
    154c:	440b      	add	r3, r1
    154e:	3301      	adds	r3, #1
    1550:	781b      	ldrb	r3, [r3, #0]
    1552:	461a      	mov	r2, r3
    1554:	4b46      	ldr	r3, [pc, #280]	; (1670 <Clock_Ip_InitClock+0x590>)
    1556:	5c9b      	ldrb	r3, [r3, r2]
    1558:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    155a:	4946      	ldr	r1, [pc, #280]	; (1674 <Clock_Ip_InitClock+0x594>)
    155c:	9a02      	ldr	r2, [sp, #8]
    155e:	4613      	mov	r3, r2
    1560:	009b      	lsls	r3, r3, #2
    1562:	4413      	add	r3, r2
    1564:	009b      	lsls	r3, r3, #2
    1566:	440b      	add	r3, r1
    1568:	330c      	adds	r3, #12
    156a:	6819      	ldr	r1, [r3, #0]
    156c:	9a03      	ldr	r2, [sp, #12]
    156e:	4613      	mov	r3, r2
    1570:	009b      	lsls	r3, r3, #2
    1572:	4413      	add	r3, r2
    1574:	00db      	lsls	r3, r3, #3
    1576:	3340      	adds	r3, #64	; 0x40
    1578:	9a01      	ldr	r2, [sp, #4]
    157a:	4413      	add	r3, r2
    157c:	4618      	mov	r0, r3
    157e:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1580:	9b03      	ldr	r3, [sp, #12]
    1582:	3301      	adds	r3, #1
    1584:	9303      	str	r3, [sp, #12]
    1586:	9b01      	ldr	r3, [sp, #4]
    1588:	7a9b      	ldrb	r3, [r3, #10]
    158a:	461a      	mov	r2, r3
    158c:	9b03      	ldr	r3, [sp, #12]
    158e:	4293      	cmp	r3, r2
    1590:	d3cf      	bcc.n	1532 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1592:	2300      	movs	r3, #0
    1594:	9303      	str	r3, [sp, #12]
    1596:	e025      	b.n	15e4 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    1598:	9a01      	ldr	r2, [sp, #4]
    159a:	9b03      	ldr	r3, [sp, #12]
    159c:	3324      	adds	r3, #36	; 0x24
    159e:	011b      	lsls	r3, r3, #4
    15a0:	4413      	add	r3, r2
    15a2:	3304      	adds	r3, #4
    15a4:	681a      	ldr	r2, [r3, #0]
    15a6:	492f      	ldr	r1, [pc, #188]	; (1664 <Clock_Ip_InitClock+0x584>)
    15a8:	4613      	mov	r3, r2
    15aa:	00db      	lsls	r3, r3, #3
    15ac:	4413      	add	r3, r2
    15ae:	440b      	add	r3, r1
    15b0:	3301      	adds	r3, #1
    15b2:	781b      	ldrb	r3, [r3, #0]
    15b4:	461a      	mov	r2, r3
    15b6:	4b34      	ldr	r3, [pc, #208]	; (1688 <Clock_Ip_InitClock+0x5a8>)
    15b8:	5c9b      	ldrb	r3, [r3, r2]
    15ba:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    15bc:	4933      	ldr	r1, [pc, #204]	; (168c <Clock_Ip_InitClock+0x5ac>)
    15be:	9a02      	ldr	r2, [sp, #8]
    15c0:	4613      	mov	r3, r2
    15c2:	005b      	lsls	r3, r3, #1
    15c4:	4413      	add	r3, r2
    15c6:	009b      	lsls	r3, r3, #2
    15c8:	440b      	add	r3, r1
    15ca:	3304      	adds	r3, #4
    15cc:	681b      	ldr	r3, [r3, #0]
    15ce:	9a03      	ldr	r2, [sp, #12]
    15d0:	3224      	adds	r2, #36	; 0x24
    15d2:	0112      	lsls	r2, r2, #4
    15d4:	9901      	ldr	r1, [sp, #4]
    15d6:	440a      	add	r2, r1
    15d8:	3204      	adds	r2, #4
    15da:	4610      	mov	r0, r2
    15dc:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    15de:	9b03      	ldr	r3, [sp, #12]
    15e0:	3301      	adds	r3, #1
    15e2:	9303      	str	r3, [sp, #12]
    15e4:	9b01      	ldr	r3, [sp, #4]
    15e6:	7b9b      	ldrb	r3, [r3, #14]
    15e8:	461a      	mov	r2, r3
    15ea:	9b03      	ldr	r3, [sp, #12]
    15ec:	4293      	cmp	r3, r2
    15ee:	d3d3      	bcc.n	1598 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    15f0:	4b27      	ldr	r3, [pc, #156]	; (1690 <Clock_Ip_InitClock+0x5b0>)
    15f2:	2200      	movs	r2, #0
    15f4:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    15f6:	4b26      	ldr	r3, [pc, #152]	; (1690 <Clock_Ip_InitClock+0x5b0>)
    15f8:	2200      	movs	r2, #0
    15fa:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    15fc:	4b24      	ldr	r3, [pc, #144]	; (1690 <Clock_Ip_InitClock+0x5b0>)
    15fe:	2201      	movs	r2, #1
    1600:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    1602:	4b23      	ldr	r3, [pc, #140]	; (1690 <Clock_Ip_InitClock+0x5b0>)
    1604:	2200      	movs	r2, #0
    1606:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    1608:	f000 fa9c 	bl	1b44 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    160c:	2300      	movs	r3, #0
    160e:	9303      	str	r3, [sp, #12]
    1610:	e04c      	b.n	16ac <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    1612:	9a01      	ldr	r2, [sp, #4]
    1614:	9b03      	ldr	r3, [sp, #12]
    1616:	330d      	adds	r3, #13
    1618:	00db      	lsls	r3, r3, #3
    161a:	4413      	add	r3, r2
    161c:	685b      	ldr	r3, [r3, #4]
    161e:	4a1d      	ldr	r2, [pc, #116]	; (1694 <Clock_Ip_InitClock+0x5b4>)
    1620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1624:	2b03      	cmp	r3, #3
    1626:	d03b      	beq.n	16a0 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1628:	9b01      	ldr	r3, [sp, #4]
    162a:	9a03      	ldr	r2, [sp, #12]
    162c:	320d      	adds	r2, #13
    162e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1632:	490c      	ldr	r1, [pc, #48]	; (1664 <Clock_Ip_InitClock+0x584>)
    1634:	4613      	mov	r3, r2
    1636:	00db      	lsls	r3, r3, #3
    1638:	4413      	add	r3, r2
    163a:	440b      	add	r3, r1
    163c:	3301      	adds	r3, #1
    163e:	781b      	ldrb	r3, [r3, #0]
    1640:	461a      	mov	r2, r3
    1642:	4b15      	ldr	r3, [pc, #84]	; (1698 <Clock_Ip_InitClock+0x5b8>)
    1644:	5c9b      	ldrb	r3, [r3, r2]
    1646:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    1648:	4a14      	ldr	r2, [pc, #80]	; (169c <Clock_Ip_InitClock+0x5bc>)
    164a:	9b02      	ldr	r3, [sp, #8]
    164c:	00db      	lsls	r3, r3, #3
    164e:	4413      	add	r3, r2
    1650:	685b      	ldr	r3, [r3, #4]
    1652:	9a03      	ldr	r2, [sp, #12]
    1654:	320d      	adds	r2, #13
    1656:	00d2      	lsls	r2, r2, #3
    1658:	9901      	ldr	r1, [sp, #4]
    165a:	440a      	add	r2, r1
    165c:	4610      	mov	r0, r2
    165e:	4798      	blx	r3
    1660:	e021      	b.n	16a6 <Clock_Ip_InitClock+0x5c6>
    1662:	bf00      	nop
    1664:	00007228 	.word	0x00007228
    1668:	00007198 	.word	0x00007198
    166c:	00007774 	.word	0x00007774
    1670:	000071e8 	.word	0x000071e8
    1674:	00007834 	.word	0x00007834
    1678:	00007218 	.word	0x00007218
    167c:	00007824 	.word	0x00007824
    1680:	000071a8 	.word	0x000071a8
    1684:	0000777c 	.word	0x0000777c
    1688:	000071d8 	.word	0x000071d8
    168c:	000077a4 	.word	0x000077a4
    1690:	1fff8b4c 	.word	0x1fff8b4c
    1694:	00007674 	.word	0x00007674
    1698:	000071f8 	.word	0x000071f8
    169c:	00007860 	.word	0x00007860
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    16a0:	4b3a      	ldr	r3, [pc, #232]	; (178c <Clock_Ip_InitClock+0x6ac>)
    16a2:	2201      	movs	r2, #1
    16a4:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    16a6:	9b03      	ldr	r3, [sp, #12]
    16a8:	3301      	adds	r3, #1
    16aa:	9303      	str	r3, [sp, #12]
    16ac:	9b01      	ldr	r3, [sp, #4]
    16ae:	7adb      	ldrb	r3, [r3, #11]
    16b0:	461a      	mov	r2, r3
    16b2:	9b03      	ldr	r3, [sp, #12]
    16b4:	4293      	cmp	r3, r2
    16b6:	d3ac      	bcc.n	1612 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    16b8:	4b34      	ldr	r3, [pc, #208]	; (178c <Clock_Ip_InitClock+0x6ac>)
    16ba:	781b      	ldrb	r3, [r3, #0]
    16bc:	f083 0301 	eor.w	r3, r3, #1
    16c0:	b2db      	uxtb	r3, r3
    16c2:	2b00      	cmp	r3, #0
    16c4:	d05e      	beq.n	1784 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    16c6:	2300      	movs	r3, #0
    16c8:	9303      	str	r3, [sp, #12]
    16ca:	e01f      	b.n	170c <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    16cc:	9a01      	ldr	r2, [sp, #4]
    16ce:	9b03      	ldr	r3, [sp, #12]
    16d0:	334e      	adds	r3, #78	; 0x4e
    16d2:	00db      	lsls	r3, r3, #3
    16d4:	4413      	add	r3, r2
    16d6:	685a      	ldr	r2, [r3, #4]
    16d8:	492d      	ldr	r1, [pc, #180]	; (1790 <Clock_Ip_InitClock+0x6b0>)
    16da:	4613      	mov	r3, r2
    16dc:	00db      	lsls	r3, r3, #3
    16de:	4413      	add	r3, r2
    16e0:	440b      	add	r3, r1
    16e2:	3301      	adds	r3, #1
    16e4:	781b      	ldrb	r3, [r3, #0]
    16e6:	461a      	mov	r2, r3
    16e8:	4b2a      	ldr	r3, [pc, #168]	; (1794 <Clock_Ip_InitClock+0x6b4>)
    16ea:	5c9b      	ldrb	r3, [r3, r2]
    16ec:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    16ee:	4a2a      	ldr	r2, [pc, #168]	; (1798 <Clock_Ip_InitClock+0x6b8>)
    16f0:	9b02      	ldr	r3, [sp, #8]
    16f2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    16f6:	9a03      	ldr	r2, [sp, #12]
    16f8:	324e      	adds	r2, #78	; 0x4e
    16fa:	00d2      	lsls	r2, r2, #3
    16fc:	9901      	ldr	r1, [sp, #4]
    16fe:	440a      	add	r2, r1
    1700:	3204      	adds	r2, #4
    1702:	4610      	mov	r0, r2
    1704:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1706:	9b03      	ldr	r3, [sp, #12]
    1708:	3301      	adds	r3, #1
    170a:	9303      	str	r3, [sp, #12]
    170c:	9b01      	ldr	r3, [sp, #4]
    170e:	7c1b      	ldrb	r3, [r3, #16]
    1710:	461a      	mov	r2, r3
    1712:	9b03      	ldr	r3, [sp, #12]
    1714:	4293      	cmp	r3, r2
    1716:	d3d9      	bcc.n	16cc <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1718:	2300      	movs	r3, #0
    171a:	9303      	str	r3, [sp, #12]
    171c:	e028      	b.n	1770 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    171e:	9901      	ldr	r1, [sp, #4]
    1720:	9a03      	ldr	r2, [sp, #12]
    1722:	4613      	mov	r3, r2
    1724:	009b      	lsls	r3, r3, #2
    1726:	4413      	add	r3, r2
    1728:	009b      	lsls	r3, r3, #2
    172a:	440b      	add	r3, r1
    172c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1730:	681a      	ldr	r2, [r3, #0]
    1732:	4917      	ldr	r1, [pc, #92]	; (1790 <Clock_Ip_InitClock+0x6b0>)
    1734:	4613      	mov	r3, r2
    1736:	00db      	lsls	r3, r3, #3
    1738:	4413      	add	r3, r2
    173a:	440b      	add	r3, r1
    173c:	3301      	adds	r3, #1
    173e:	781b      	ldrb	r3, [r3, #0]
    1740:	461a      	mov	r2, r3
    1742:	4b16      	ldr	r3, [pc, #88]	; (179c <Clock_Ip_InitClock+0x6bc>)
    1744:	5c9b      	ldrb	r3, [r3, r2]
    1746:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    1748:	4a15      	ldr	r2, [pc, #84]	; (17a0 <Clock_Ip_InitClock+0x6c0>)
    174a:	9b02      	ldr	r3, [sp, #8]
    174c:	011b      	lsls	r3, r3, #4
    174e:	4413      	add	r3, r2
    1750:	330c      	adds	r3, #12
    1752:	6819      	ldr	r1, [r3, #0]
    1754:	9a03      	ldr	r2, [sp, #12]
    1756:	4613      	mov	r3, r2
    1758:	009b      	lsls	r3, r3, #2
    175a:	4413      	add	r3, r2
    175c:	009b      	lsls	r3, r3, #2
    175e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1762:	9a01      	ldr	r2, [sp, #4]
    1764:	4413      	add	r3, r2
    1766:	4618      	mov	r0, r3
    1768:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    176a:	9b03      	ldr	r3, [sp, #12]
    176c:	3301      	adds	r3, #1
    176e:	9303      	str	r3, [sp, #12]
    1770:	9b01      	ldr	r3, [sp, #4]
    1772:	7c9b      	ldrb	r3, [r3, #18]
    1774:	461a      	mov	r2, r3
    1776:	9b03      	ldr	r3, [sp, #12]
    1778:	4293      	cmp	r3, r2
    177a:	d3d0      	bcc.n	171e <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    177c:	2104      	movs	r1, #4
    177e:	9801      	ldr	r0, [sp, #4]
    1780:	f002 ff48 	bl	4614 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    1784:	bf00      	nop
    1786:	b004      	add	sp, #16
    1788:	bd10      	pop	{r4, pc}
    178a:	bf00      	nop
    178c:	1fff8b4c 	.word	0x1fff8b4c
    1790:	00007228 	.word	0x00007228
    1794:	000071c8 	.word	0x000071c8
    1798:	000077b0 	.word	0x000077b0
    179c:	00007218 	.word	0x00007218
    17a0:	00007824 	.word	0x00007824

000017a4 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    17a4:	b500      	push	{lr}
    17a6:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    17a8:	2302      	movs	r3, #2
    17aa:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    17ac:	2300      	movs	r3, #0
    17ae:	9304      	str	r3, [sp, #16]
    17b0:	e02c      	b.n	180c <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    17b2:	4a36      	ldr	r2, [pc, #216]	; (188c <Clock_Ip_GetPllStatus+0xe8>)
    17b4:	9b04      	ldr	r3, [sp, #16]
    17b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    17ba:	4935      	ldr	r1, [pc, #212]	; (1890 <Clock_Ip_GetPllStatus+0xec>)
    17bc:	4613      	mov	r3, r2
    17be:	00db      	lsls	r3, r3, #3
    17c0:	4413      	add	r3, r2
    17c2:	440b      	add	r3, r1
    17c4:	3301      	adds	r3, #1
    17c6:	781b      	ldrb	r3, [r3, #0]
    17c8:	461a      	mov	r2, r3
    17ca:	4b32      	ldr	r3, [pc, #200]	; (1894 <Clock_Ip_GetPllStatus+0xf0>)
    17cc:	5c9b      	ldrb	r3, [r3, r2]
    17ce:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    17d0:	4931      	ldr	r1, [pc, #196]	; (1898 <Clock_Ip_GetPllStatus+0xf4>)
    17d2:	9a03      	ldr	r2, [sp, #12]
    17d4:	4613      	mov	r3, r2
    17d6:	009b      	lsls	r3, r3, #2
    17d8:	4413      	add	r3, r2
    17da:	009b      	lsls	r3, r3, #2
    17dc:	440b      	add	r3, r1
    17de:	3308      	adds	r3, #8
    17e0:	681b      	ldr	r3, [r3, #0]
    17e2:	492a      	ldr	r1, [pc, #168]	; (188c <Clock_Ip_GetPllStatus+0xe8>)
    17e4:	9a04      	ldr	r2, [sp, #16]
    17e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    17ea:	4610      	mov	r0, r2
    17ec:	4798      	blx	r3
    17ee:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    17f0:	9b02      	ldr	r3, [sp, #8]
    17f2:	2b01      	cmp	r3, #1
    17f4:	d102      	bne.n	17fc <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    17f6:	2301      	movs	r3, #1
    17f8:	9305      	str	r3, [sp, #20]
            break;
    17fa:	e00d      	b.n	1818 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    17fc:	9b02      	ldr	r3, [sp, #8]
    17fe:	2b02      	cmp	r3, #2
    1800:	d101      	bne.n	1806 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    1802:	2300      	movs	r3, #0
    1804:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1806:	9b04      	ldr	r3, [sp, #16]
    1808:	3301      	adds	r3, #1
    180a:	9304      	str	r3, [sp, #16]
    180c:	4b23      	ldr	r3, [pc, #140]	; (189c <Clock_Ip_GetPllStatus+0xf8>)
    180e:	789b      	ldrb	r3, [r3, #2]
    1810:	461a      	mov	r2, r3
    1812:	9b04      	ldr	r3, [sp, #16]
    1814:	4293      	cmp	r3, r2
    1816:	d3cc      	bcc.n	17b2 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    1818:	9b05      	ldr	r3, [sp, #20]
    181a:	2b00      	cmp	r3, #0
    181c:	d130      	bne.n	1880 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    181e:	2300      	movs	r3, #0
    1820:	9304      	str	r3, [sp, #16]
    1822:	e027      	b.n	1874 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    1824:	4a1e      	ldr	r2, [pc, #120]	; (18a0 <Clock_Ip_GetPllStatus+0xfc>)
    1826:	9b04      	ldr	r3, [sp, #16]
    1828:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    182c:	4918      	ldr	r1, [pc, #96]	; (1890 <Clock_Ip_GetPllStatus+0xec>)
    182e:	4613      	mov	r3, r2
    1830:	00db      	lsls	r3, r3, #3
    1832:	4413      	add	r3, r2
    1834:	440b      	add	r3, r1
    1836:	3301      	adds	r3, #1
    1838:	781b      	ldrb	r3, [r3, #0]
    183a:	461a      	mov	r2, r3
    183c:	4b19      	ldr	r3, [pc, #100]	; (18a4 <Clock_Ip_GetPllStatus+0x100>)
    183e:	5c9b      	ldrb	r3, [r3, r2]
    1840:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    1842:	4919      	ldr	r1, [pc, #100]	; (18a8 <Clock_Ip_GetPllStatus+0x104>)
    1844:	9a03      	ldr	r2, [sp, #12]
    1846:	4613      	mov	r3, r2
    1848:	005b      	lsls	r3, r3, #1
    184a:	4413      	add	r3, r2
    184c:	009b      	lsls	r3, r3, #2
    184e:	440b      	add	r3, r1
    1850:	3308      	adds	r3, #8
    1852:	681b      	ldr	r3, [r3, #0]
    1854:	4912      	ldr	r1, [pc, #72]	; (18a0 <Clock_Ip_GetPllStatus+0xfc>)
    1856:	9a04      	ldr	r2, [sp, #16]
    1858:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    185c:	4610      	mov	r0, r2
    185e:	4798      	blx	r3
    1860:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    1862:	9b01      	ldr	r3, [sp, #4]
    1864:	2b01      	cmp	r3, #1
    1866:	d102      	bne.n	186e <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    1868:	2301      	movs	r3, #1
    186a:	9305      	str	r3, [sp, #20]
                break;
    186c:	e008      	b.n	1880 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    186e:	9b04      	ldr	r3, [sp, #16]
    1870:	3301      	adds	r3, #1
    1872:	9304      	str	r3, [sp, #16]
    1874:	4b09      	ldr	r3, [pc, #36]	; (189c <Clock_Ip_GetPllStatus+0xf8>)
    1876:	78db      	ldrb	r3, [r3, #3]
    1878:	461a      	mov	r2, r3
    187a:	9b04      	ldr	r3, [sp, #16]
    187c:	4293      	cmp	r3, r2
    187e:	d3d1      	bcc.n	1824 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    1880:	9b05      	ldr	r3, [sp, #20]
}
    1882:	4618      	mov	r0, r3
    1884:	b007      	add	sp, #28
    1886:	f85d fb04 	ldr.w	pc, [sp], #4
    188a:	bf00      	nop
    188c:	00007730 	.word	0x00007730
    1890:	00007228 	.word	0x00007228
    1894:	000071e8 	.word	0x000071e8
    1898:	00007834 	.word	0x00007834
    189c:	1fff8b4c 	.word	0x1fff8b4c
    18a0:	00007734 	.word	0x00007734
    18a4:	000071d8 	.word	0x000071d8
    18a8:	000077a4 	.word	0x000077a4

000018ac <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    18ac:	b500      	push	{lr}
    18ae:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    18b0:	4b55      	ldr	r3, [pc, #340]	; (1a08 <Clock_Ip_DistributePll+0x15c>)
    18b2:	681b      	ldr	r3, [r3, #0]
    18b4:	2b00      	cmp	r3, #0
    18b6:	f000 80a2 	beq.w	19fe <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    18ba:	2300      	movs	r3, #0
    18bc:	9301      	str	r3, [sp, #4]
    18be:	e02c      	b.n	191a <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    18c0:	4b51      	ldr	r3, [pc, #324]	; (1a08 <Clock_Ip_DistributePll+0x15c>)
    18c2:	681a      	ldr	r2, [r3, #0]
    18c4:	9b01      	ldr	r3, [sp, #4]
    18c6:	330d      	adds	r3, #13
    18c8:	00db      	lsls	r3, r3, #3
    18ca:	4413      	add	r3, r2
    18cc:	685b      	ldr	r3, [r3, #4]
    18ce:	4a4f      	ldr	r2, [pc, #316]	; (1a0c <Clock_Ip_DistributePll+0x160>)
    18d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    18d4:	2b03      	cmp	r3, #3
    18d6:	d11d      	bne.n	1914 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    18d8:	4b4b      	ldr	r3, [pc, #300]	; (1a08 <Clock_Ip_DistributePll+0x15c>)
    18da:	681b      	ldr	r3, [r3, #0]
    18dc:	9a01      	ldr	r2, [sp, #4]
    18de:	320d      	adds	r2, #13
    18e0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    18e4:	494a      	ldr	r1, [pc, #296]	; (1a10 <Clock_Ip_DistributePll+0x164>)
    18e6:	4613      	mov	r3, r2
    18e8:	00db      	lsls	r3, r3, #3
    18ea:	4413      	add	r3, r2
    18ec:	440b      	add	r3, r1
    18ee:	3301      	adds	r3, #1
    18f0:	781b      	ldrb	r3, [r3, #0]
    18f2:	461a      	mov	r2, r3
    18f4:	4b47      	ldr	r3, [pc, #284]	; (1a14 <Clock_Ip_DistributePll+0x168>)
    18f6:	5c9b      	ldrb	r3, [r3, r2]
    18f8:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    18fa:	4a47      	ldr	r2, [pc, #284]	; (1a18 <Clock_Ip_DistributePll+0x16c>)
    18fc:	9b00      	ldr	r3, [sp, #0]
    18fe:	00db      	lsls	r3, r3, #3
    1900:	4413      	add	r3, r2
    1902:	685b      	ldr	r3, [r3, #4]
    1904:	4a40      	ldr	r2, [pc, #256]	; (1a08 <Clock_Ip_DistributePll+0x15c>)
    1906:	6811      	ldr	r1, [r2, #0]
    1908:	9a01      	ldr	r2, [sp, #4]
    190a:	320d      	adds	r2, #13
    190c:	00d2      	lsls	r2, r2, #3
    190e:	440a      	add	r2, r1
    1910:	4610      	mov	r0, r2
    1912:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1914:	9b01      	ldr	r3, [sp, #4]
    1916:	3301      	adds	r3, #1
    1918:	9301      	str	r3, [sp, #4]
    191a:	4b3b      	ldr	r3, [pc, #236]	; (1a08 <Clock_Ip_DistributePll+0x15c>)
    191c:	681b      	ldr	r3, [r3, #0]
    191e:	7adb      	ldrb	r3, [r3, #11]
    1920:	461a      	mov	r2, r3
    1922:	9b01      	ldr	r3, [sp, #4]
    1924:	4293      	cmp	r3, r2
    1926:	d3cb      	bcc.n	18c0 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    1928:	4b3c      	ldr	r3, [pc, #240]	; (1a1c <Clock_Ip_DistributePll+0x170>)
    192a:	781b      	ldrb	r3, [r3, #0]
    192c:	2b00      	cmp	r3, #0
    192e:	d066      	beq.n	19fe <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1930:	2300      	movs	r3, #0
    1932:	9301      	str	r3, [sp, #4]
    1934:	e021      	b.n	197a <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1936:	4b34      	ldr	r3, [pc, #208]	; (1a08 <Clock_Ip_DistributePll+0x15c>)
    1938:	681a      	ldr	r2, [r3, #0]
    193a:	9b01      	ldr	r3, [sp, #4]
    193c:	334e      	adds	r3, #78	; 0x4e
    193e:	00db      	lsls	r3, r3, #3
    1940:	4413      	add	r3, r2
    1942:	685a      	ldr	r2, [r3, #4]
    1944:	4932      	ldr	r1, [pc, #200]	; (1a10 <Clock_Ip_DistributePll+0x164>)
    1946:	4613      	mov	r3, r2
    1948:	00db      	lsls	r3, r3, #3
    194a:	4413      	add	r3, r2
    194c:	440b      	add	r3, r1
    194e:	3301      	adds	r3, #1
    1950:	781b      	ldrb	r3, [r3, #0]
    1952:	461a      	mov	r2, r3
    1954:	4b32      	ldr	r3, [pc, #200]	; (1a20 <Clock_Ip_DistributePll+0x174>)
    1956:	5c9b      	ldrb	r3, [r3, r2]
    1958:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    195a:	4a32      	ldr	r2, [pc, #200]	; (1a24 <Clock_Ip_DistributePll+0x178>)
    195c:	9b00      	ldr	r3, [sp, #0]
    195e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1962:	4a29      	ldr	r2, [pc, #164]	; (1a08 <Clock_Ip_DistributePll+0x15c>)
    1964:	6811      	ldr	r1, [r2, #0]
    1966:	9a01      	ldr	r2, [sp, #4]
    1968:	324e      	adds	r2, #78	; 0x4e
    196a:	00d2      	lsls	r2, r2, #3
    196c:	440a      	add	r2, r1
    196e:	3204      	adds	r2, #4
    1970:	4610      	mov	r0, r2
    1972:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1974:	9b01      	ldr	r3, [sp, #4]
    1976:	3301      	adds	r3, #1
    1978:	9301      	str	r3, [sp, #4]
    197a:	4b23      	ldr	r3, [pc, #140]	; (1a08 <Clock_Ip_DistributePll+0x15c>)
    197c:	681b      	ldr	r3, [r3, #0]
    197e:	7c1b      	ldrb	r3, [r3, #16]
    1980:	461a      	mov	r2, r3
    1982:	9b01      	ldr	r3, [sp, #4]
    1984:	4293      	cmp	r3, r2
    1986:	d3d6      	bcc.n	1936 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1988:	2300      	movs	r3, #0
    198a:	9301      	str	r3, [sp, #4]
    198c:	e02a      	b.n	19e4 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    198e:	4b1e      	ldr	r3, [pc, #120]	; (1a08 <Clock_Ip_DistributePll+0x15c>)
    1990:	6819      	ldr	r1, [r3, #0]
    1992:	9a01      	ldr	r2, [sp, #4]
    1994:	4613      	mov	r3, r2
    1996:	009b      	lsls	r3, r3, #2
    1998:	4413      	add	r3, r2
    199a:	009b      	lsls	r3, r3, #2
    199c:	440b      	add	r3, r1
    199e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    19a2:	681a      	ldr	r2, [r3, #0]
    19a4:	491a      	ldr	r1, [pc, #104]	; (1a10 <Clock_Ip_DistributePll+0x164>)
    19a6:	4613      	mov	r3, r2
    19a8:	00db      	lsls	r3, r3, #3
    19aa:	4413      	add	r3, r2
    19ac:	440b      	add	r3, r1
    19ae:	3301      	adds	r3, #1
    19b0:	781b      	ldrb	r3, [r3, #0]
    19b2:	461a      	mov	r2, r3
    19b4:	4b1c      	ldr	r3, [pc, #112]	; (1a28 <Clock_Ip_DistributePll+0x17c>)
    19b6:	5c9b      	ldrb	r3, [r3, r2]
    19b8:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    19ba:	4a1c      	ldr	r2, [pc, #112]	; (1a2c <Clock_Ip_DistributePll+0x180>)
    19bc:	9b00      	ldr	r3, [sp, #0]
    19be:	011b      	lsls	r3, r3, #4
    19c0:	4413      	add	r3, r2
    19c2:	330c      	adds	r3, #12
    19c4:	6819      	ldr	r1, [r3, #0]
    19c6:	4b10      	ldr	r3, [pc, #64]	; (1a08 <Clock_Ip_DistributePll+0x15c>)
    19c8:	6818      	ldr	r0, [r3, #0]
    19ca:	9a01      	ldr	r2, [sp, #4]
    19cc:	4613      	mov	r3, r2
    19ce:	009b      	lsls	r3, r3, #2
    19d0:	4413      	add	r3, r2
    19d2:	009b      	lsls	r3, r3, #2
    19d4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    19d8:	4403      	add	r3, r0
    19da:	4618      	mov	r0, r3
    19dc:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    19de:	9b01      	ldr	r3, [sp, #4]
    19e0:	3301      	adds	r3, #1
    19e2:	9301      	str	r3, [sp, #4]
    19e4:	4b08      	ldr	r3, [pc, #32]	; (1a08 <Clock_Ip_DistributePll+0x15c>)
    19e6:	681b      	ldr	r3, [r3, #0]
    19e8:	7c9b      	ldrb	r3, [r3, #18]
    19ea:	461a      	mov	r2, r3
    19ec:	9b01      	ldr	r3, [sp, #4]
    19ee:	4293      	cmp	r3, r2
    19f0:	d3cd      	bcc.n	198e <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    19f2:	4b05      	ldr	r3, [pc, #20]	; (1a08 <Clock_Ip_DistributePll+0x15c>)
    19f4:	681b      	ldr	r3, [r3, #0]
    19f6:	2104      	movs	r1, #4
    19f8:	4618      	mov	r0, r3
    19fa:	f002 fe0b 	bl	4614 <Clock_Ip_Command>
        }
    }
}
    19fe:	bf00      	nop
    1a00:	b003      	add	sp, #12
    1a02:	f85d fb04 	ldr.w	pc, [sp], #4
    1a06:	bf00      	nop
    1a08:	1fff8b44 	.word	0x1fff8b44
    1a0c:	00007674 	.word	0x00007674
    1a10:	00007228 	.word	0x00007228
    1a14:	000071f8 	.word	0x000071f8
    1a18:	00007860 	.word	0x00007860
    1a1c:	1fff8b4c 	.word	0x1fff8b4c
    1a20:	000071c8 	.word	0x000071c8
    1a24:	000077b0 	.word	0x000077b0
    1a28:	00007218 	.word	0x00007218
    1a2c:	00007824 	.word	0x00007824

00001a30 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    1a30:	b500      	push	{lr}
    1a32:	b085      	sub	sp, #20
    1a34:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1a36:	490c      	ldr	r1, [pc, #48]	; (1a68 <Clock_Ip_DisableClockMonitor+0x38>)
    1a38:	9a01      	ldr	r2, [sp, #4]
    1a3a:	4613      	mov	r3, r2
    1a3c:	00db      	lsls	r3, r3, #3
    1a3e:	4413      	add	r3, r2
    1a40:	440b      	add	r3, r1
    1a42:	3301      	adds	r3, #1
    1a44:	781b      	ldrb	r3, [r3, #0]
    1a46:	461a      	mov	r2, r3
    1a48:	4b08      	ldr	r3, [pc, #32]	; (1a6c <Clock_Ip_DisableClockMonitor+0x3c>)
    1a4a:	5c9b      	ldrb	r3, [r3, r2]
    1a4c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    1a4e:	4a08      	ldr	r2, [pc, #32]	; (1a70 <Clock_Ip_DisableClockMonitor+0x40>)
    1a50:	9b03      	ldr	r3, [sp, #12]
    1a52:	011b      	lsls	r3, r3, #4
    1a54:	4413      	add	r3, r2
    1a56:	3308      	adds	r3, #8
    1a58:	681b      	ldr	r3, [r3, #0]
    1a5a:	9801      	ldr	r0, [sp, #4]
    1a5c:	4798      	blx	r3
}
    1a5e:	bf00      	nop
    1a60:	b005      	add	sp, #20
    1a62:	f85d fb04 	ldr.w	pc, [sp], #4
    1a66:	bf00      	nop
    1a68:	00007228 	.word	0x00007228
    1a6c:	00007218 	.word	0x00007218
    1a70:	00007824 	.word	0x00007824

00001a74 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    1a74:	b082      	sub	sp, #8
    1a76:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    1a78:	4a02      	ldr	r2, [pc, #8]	; (1a84 <Clock_Ip_InstallNotificationsCallback+0x10>)
    1a7a:	9b01      	ldr	r3, [sp, #4]
    1a7c:	6013      	str	r3, [r2, #0]
}
    1a7e:	bf00      	nop
    1a80:	b002      	add	sp, #8
    1a82:	4770      	bx	lr
    1a84:	1fff8b14 	.word	0x1fff8b14

00001a88 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    1a88:	b500      	push	{lr}
    1a8a:	b085      	sub	sp, #20
    1a8c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1a8e:	490c      	ldr	r1, [pc, #48]	; (1ac0 <Clock_Ip_DisableModuleClock+0x38>)
    1a90:	9a01      	ldr	r2, [sp, #4]
    1a92:	4613      	mov	r3, r2
    1a94:	00db      	lsls	r3, r3, #3
    1a96:	4413      	add	r3, r2
    1a98:	440b      	add	r3, r1
    1a9a:	3301      	adds	r3, #1
    1a9c:	781b      	ldrb	r3, [r3, #0]
    1a9e:	461a      	mov	r2, r3
    1aa0:	4b08      	ldr	r3, [pc, #32]	; (1ac4 <Clock_Ip_DisableModuleClock+0x3c>)
    1aa2:	5c9b      	ldrb	r3, [r3, r2]
    1aa4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    1aa6:	4a08      	ldr	r2, [pc, #32]	; (1ac8 <Clock_Ip_DisableModuleClock+0x40>)
    1aa8:	9b03      	ldr	r3, [sp, #12]
    1aaa:	00db      	lsls	r3, r3, #3
    1aac:	4413      	add	r3, r2
    1aae:	685b      	ldr	r3, [r3, #4]
    1ab0:	2101      	movs	r1, #1
    1ab2:	9801      	ldr	r0, [sp, #4]
    1ab4:	4798      	blx	r3
}
    1ab6:	bf00      	nop
    1ab8:	b005      	add	sp, #20
    1aba:	f85d fb04 	ldr.w	pc, [sp], #4
    1abe:	bf00      	nop
    1ac0:	00007228 	.word	0x00007228
    1ac4:	000071c8 	.word	0x000071c8
    1ac8:	000077b0 	.word	0x000077b0

00001acc <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    1acc:	b500      	push	{lr}
    1ace:	b085      	sub	sp, #20
    1ad0:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1ad2:	490c      	ldr	r1, [pc, #48]	; (1b04 <Clock_Ip_EnableModuleClock+0x38>)
    1ad4:	9a01      	ldr	r2, [sp, #4]
    1ad6:	4613      	mov	r3, r2
    1ad8:	00db      	lsls	r3, r3, #3
    1ada:	4413      	add	r3, r2
    1adc:	440b      	add	r3, r1
    1ade:	3301      	adds	r3, #1
    1ae0:	781b      	ldrb	r3, [r3, #0]
    1ae2:	461a      	mov	r2, r3
    1ae4:	4b08      	ldr	r3, [pc, #32]	; (1b08 <Clock_Ip_EnableModuleClock+0x3c>)
    1ae6:	5c9b      	ldrb	r3, [r3, r2]
    1ae8:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    1aea:	4a08      	ldr	r2, [pc, #32]	; (1b0c <Clock_Ip_EnableModuleClock+0x40>)
    1aec:	9b03      	ldr	r3, [sp, #12]
    1aee:	00db      	lsls	r3, r3, #3
    1af0:	4413      	add	r3, r2
    1af2:	685b      	ldr	r3, [r3, #4]
    1af4:	2100      	movs	r1, #0
    1af6:	9801      	ldr	r0, [sp, #4]
    1af8:	4798      	blx	r3
}
    1afa:	bf00      	nop
    1afc:	b005      	add	sp, #20
    1afe:	f85d fb04 	ldr.w	pc, [sp], #4
    1b02:	bf00      	nop
    1b04:	00007228 	.word	0x00007228
    1b08:	000071c8 	.word	0x000071c8
    1b0c:	000077b0 	.word	0x000077b0

00001b10 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    1b10:	b500      	push	{lr}
    1b12:	b083      	sub	sp, #12
    1b14:	9001      	str	r0, [sp, #4]
    1b16:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    1b18:	4b08      	ldr	r3, [pc, #32]	; (1b3c <Clock_Ip_PowerModeChangeNotification+0x2c>)
    1b1a:	2200      	movs	r2, #0
    1b1c:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1b1e:	4b08      	ldr	r3, [pc, #32]	; (1b40 <Clock_Ip_PowerModeChangeNotification+0x30>)
    1b20:	681b      	ldr	r3, [r3, #0]
    1b22:	2102      	movs	r1, #2
    1b24:	4618      	mov	r0, r3
    1b26:	f002 fd75 	bl	4614 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    1b2a:	9900      	ldr	r1, [sp, #0]
    1b2c:	9801      	ldr	r0, [sp, #4]
    1b2e:	f002 fc51 	bl	43d4 <Clock_Ip_ClockPowerModeChangeNotification>
}
    1b32:	bf00      	nop
    1b34:	b003      	add	sp, #12
    1b36:	f85d fb04 	ldr.w	pc, [sp], #4
    1b3a:	bf00      	nop
    1b3c:	1fff8b10 	.word	0x1fff8b10
    1b40:	1fff8b44 	.word	0x1fff8b44

00001b44 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    1b44:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    1b46:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    1b4a:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    1b4c:	4b06      	ldr	r3, [pc, #24]	; (1b68 <Clock_Ip_SetWaitStates+0x24>)
    1b4e:	785b      	ldrb	r3, [r3, #1]
    1b50:	2b00      	cmp	r3, #0
    1b52:	d005      	beq.n	1b60 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    1b54:	9b01      	ldr	r3, [sp, #4]
    1b56:	3b01      	subs	r3, #1
    1b58:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    1b5a:	9b01      	ldr	r3, [sp, #4]
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	d1f9      	bne.n	1b54 <Clock_Ip_SetWaitStates+0x10>
    }
}
    1b60:	bf00      	nop
    1b62:	b002      	add	sp, #8
    1b64:	4770      	bx	lr
    1b66:	bf00      	nop
    1b68:	1fff8b4c 	.word	0x1fff8b4c

00001b6c <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    1b6c:	b500      	push	{lr}
    1b6e:	b083      	sub	sp, #12
    1b70:	9001      	str	r0, [sp, #4]
    1b72:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    1b74:	4b04      	ldr	r3, [pc, #16]	; (1b88 <Clock_Ip_ReportClockErrors+0x1c>)
    1b76:	681b      	ldr	r3, [r3, #0]
    1b78:	9900      	ldr	r1, [sp, #0]
    1b7a:	9801      	ldr	r0, [sp, #4]
    1b7c:	4798      	blx	r3
}
    1b7e:	bf00      	nop
    1b80:	b003      	add	sp, #12
    1b82:	f85d fb04 	ldr.w	pc, [sp], #4
    1b86:	bf00      	nop
    1b88:	1fff8b14 	.word	0x1fff8b14

00001b8c <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    1b8c:	b500      	push	{lr}
    1b8e:	b085      	sub	sp, #20
    1b90:	9003      	str	r0, [sp, #12]
    1b92:	9102      	str	r1, [sp, #8]
    1b94:	9201      	str	r2, [sp, #4]
    1b96:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    1b98:	2000      	movs	r0, #0
    1b9a:	f7fe ffd0 	bl	b3e <OsIf_GetCounter>
    1b9e:	4602      	mov	r2, r0
    1ba0:	9b03      	ldr	r3, [sp, #12]
    1ba2:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    1ba4:	9b02      	ldr	r3, [sp, #8]
    1ba6:	2200      	movs	r2, #0
    1ba8:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    1baa:	2100      	movs	r1, #0
    1bac:	9800      	ldr	r0, [sp, #0]
    1bae:	f7ff f812 	bl	bd6 <OsIf_MicrosToTicks>
    1bb2:	4602      	mov	r2, r0
    1bb4:	9b01      	ldr	r3, [sp, #4]
    1bb6:	601a      	str	r2, [r3, #0]
}
    1bb8:	bf00      	nop
    1bba:	b005      	add	sp, #20
    1bbc:	f85d fb04 	ldr.w	pc, [sp], #4

00001bc0 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    1bc0:	b500      	push	{lr}
    1bc2:	b087      	sub	sp, #28
    1bc4:	9003      	str	r0, [sp, #12]
    1bc6:	9102      	str	r1, [sp, #8]
    1bc8:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    1bca:	2300      	movs	r3, #0
    1bcc:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    1bd0:	2100      	movs	r1, #0
    1bd2:	9803      	ldr	r0, [sp, #12]
    1bd4:	f7fe ffcc 	bl	b70 <OsIf_GetElapsed>
    1bd8:	4602      	mov	r2, r0
    1bda:	9b02      	ldr	r3, [sp, #8]
    1bdc:	681b      	ldr	r3, [r3, #0]
    1bde:	441a      	add	r2, r3
    1be0:	9b02      	ldr	r3, [sp, #8]
    1be2:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    1be4:	9b02      	ldr	r3, [sp, #8]
    1be6:	681b      	ldr	r3, [r3, #0]
    1be8:	9a01      	ldr	r2, [sp, #4]
    1bea:	429a      	cmp	r2, r3
    1bec:	d802      	bhi.n	1bf4 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    1bee:	2301      	movs	r3, #1
    1bf0:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    1bf4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1bf8:	4618      	mov	r0, r3
    1bfa:	b007      	add	sp, #28
    1bfc:	f85d fb04 	ldr.w	pc, [sp], #4

00001c00 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    1c00:	b082      	sub	sp, #8
    1c02:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    1c04:	bf00      	nop
    1c06:	b002      	add	sp, #8
    1c08:	4770      	bx	lr

00001c0a <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    1c0a:	b500      	push	{lr}
    1c0c:	b083      	sub	sp, #12
    1c0e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c10:	9b01      	ldr	r3, [sp, #4]
    1c12:	2b00      	cmp	r3, #0
    1c14:	d002      	beq.n	1c1c <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    1c16:	9801      	ldr	r0, [sp, #4]
    1c18:	f000 f8ad 	bl	1d76 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c1c:	bf00      	nop
    1c1e:	b003      	add	sp, #12
    1c20:	f85d fb04 	ldr.w	pc, [sp], #4

00001c24 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    1c24:	b500      	push	{lr}
    1c26:	b083      	sub	sp, #12
    1c28:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c2a:	9b01      	ldr	r3, [sp, #4]
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	d002      	beq.n	1c36 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    1c30:	9801      	ldr	r0, [sp, #4]
    1c32:	f000 f8cd 	bl	1dd0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c36:	bf00      	nop
    1c38:	b003      	add	sp, #12
    1c3a:	f85d fb04 	ldr.w	pc, [sp], #4

00001c3e <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    1c3e:	b500      	push	{lr}
    1c40:	b083      	sub	sp, #12
    1c42:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c44:	9b01      	ldr	r3, [sp, #4]
    1c46:	2b00      	cmp	r3, #0
    1c48:	d002      	beq.n	1c50 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    1c4a:	9801      	ldr	r0, [sp, #4]
    1c4c:	f000 f8ee 	bl	1e2c <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c50:	bf00      	nop
    1c52:	b003      	add	sp, #12
    1c54:	f85d fb04 	ldr.w	pc, [sp], #4

00001c58 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    1c58:	b500      	push	{lr}
    1c5a:	b083      	sub	sp, #12
    1c5c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c5e:	9b01      	ldr	r3, [sp, #4]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d002      	beq.n	1c6a <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    1c64:	9801      	ldr	r0, [sp, #4]
    1c66:	f000 f8f9 	bl	1e5c <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c6a:	bf00      	nop
    1c6c:	b003      	add	sp, #12
    1c6e:	f85d fb04 	ldr.w	pc, [sp], #4

00001c72 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    1c72:	b500      	push	{lr}
    1c74:	b083      	sub	sp, #12
    1c76:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c78:	9b01      	ldr	r3, [sp, #4]
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d002      	beq.n	1c84 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    1c7e:	9801      	ldr	r0, [sp, #4]
    1c80:	f000 f904 	bl	1e8c <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c84:	bf00      	nop
    1c86:	b003      	add	sp, #12
    1c88:	f85d fb04 	ldr.w	pc, [sp], #4

00001c8c <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    1c8c:	b500      	push	{lr}
    1c8e:	b083      	sub	sp, #12
    1c90:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c92:	9b01      	ldr	r3, [sp, #4]
    1c94:	2b00      	cmp	r3, #0
    1c96:	d002      	beq.n	1c9e <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    1c98:	9801      	ldr	r0, [sp, #4]
    1c9a:	f000 f90f 	bl	1ebc <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c9e:	bf00      	nop
    1ca0:	b003      	add	sp, #12
    1ca2:	f85d fb04 	ldr.w	pc, [sp], #4

00001ca6 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    1ca6:	b500      	push	{lr}
    1ca8:	b083      	sub	sp, #12
    1caa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1cac:	9b01      	ldr	r3, [sp, #4]
    1cae:	2b00      	cmp	r3, #0
    1cb0:	d002      	beq.n	1cb8 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    1cb2:	9801      	ldr	r0, [sp, #4]
    1cb4:	f000 f91a 	bl	1eec <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1cb8:	bf00      	nop
    1cba:	b003      	add	sp, #12
    1cbc:	f85d fb04 	ldr.w	pc, [sp], #4

00001cc0 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    1cc0:	b500      	push	{lr}
    1cc2:	b083      	sub	sp, #12
    1cc4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1cc6:	9b01      	ldr	r3, [sp, #4]
    1cc8:	2b00      	cmp	r3, #0
    1cca:	d002      	beq.n	1cd2 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    1ccc:	9801      	ldr	r0, [sp, #4]
    1cce:	f000 f925 	bl	1f1c <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1cd2:	bf00      	nop
    1cd4:	b003      	add	sp, #12
    1cd6:	f85d fb04 	ldr.w	pc, [sp], #4

00001cda <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    1cda:	b500      	push	{lr}
    1cdc:	b083      	sub	sp, #12
    1cde:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1ce0:	9b01      	ldr	r3, [sp, #4]
    1ce2:	2b00      	cmp	r3, #0
    1ce4:	d002      	beq.n	1cec <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    1ce6:	9801      	ldr	r0, [sp, #4]
    1ce8:	f000 f930 	bl	1f4c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1cec:	bf00      	nop
    1cee:	b003      	add	sp, #12
    1cf0:	f85d fb04 	ldr.w	pc, [sp], #4

00001cf4 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    1cf4:	b500      	push	{lr}
    1cf6:	b083      	sub	sp, #12
    1cf8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1cfa:	9b01      	ldr	r3, [sp, #4]
    1cfc:	2b00      	cmp	r3, #0
    1cfe:	d002      	beq.n	1d06 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    1d00:	9801      	ldr	r0, [sp, #4]
    1d02:	f000 f93b 	bl	1f7c <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d06:	bf00      	nop
    1d08:	b003      	add	sp, #12
    1d0a:	f85d fb04 	ldr.w	pc, [sp], #4

00001d0e <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    1d0e:	b500      	push	{lr}
    1d10:	b083      	sub	sp, #12
    1d12:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d14:	9b01      	ldr	r3, [sp, #4]
    1d16:	2b00      	cmp	r3, #0
    1d18:	d002      	beq.n	1d20 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    1d1a:	9801      	ldr	r0, [sp, #4]
    1d1c:	f000 f946 	bl	1fac <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d20:	bf00      	nop
    1d22:	b003      	add	sp, #12
    1d24:	f85d fb04 	ldr.w	pc, [sp], #4

00001d28 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    1d28:	b500      	push	{lr}
    1d2a:	b083      	sub	sp, #12
    1d2c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d2e:	9b01      	ldr	r3, [sp, #4]
    1d30:	2b00      	cmp	r3, #0
    1d32:	d002      	beq.n	1d3a <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    1d34:	9801      	ldr	r0, [sp, #4]
    1d36:	f000 f951 	bl	1fdc <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d3a:	bf00      	nop
    1d3c:	b003      	add	sp, #12
    1d3e:	f85d fb04 	ldr.w	pc, [sp], #4

00001d42 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    1d42:	b500      	push	{lr}
    1d44:	b083      	sub	sp, #12
    1d46:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d48:	9b01      	ldr	r3, [sp, #4]
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	d002      	beq.n	1d54 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    1d4e:	9801      	ldr	r0, [sp, #4]
    1d50:	f000 f95e 	bl	2010 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d54:	bf00      	nop
    1d56:	b003      	add	sp, #12
    1d58:	f85d fb04 	ldr.w	pc, [sp], #4

00001d5c <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    1d5c:	b500      	push	{lr}
    1d5e:	b083      	sub	sp, #12
    1d60:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d62:	9b01      	ldr	r3, [sp, #4]
    1d64:	2b00      	cmp	r3, #0
    1d66:	d002      	beq.n	1d6e <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    1d68:	9801      	ldr	r0, [sp, #4]
    1d6a:	f000 f98b 	bl	2084 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d6e:	bf00      	nop
    1d70:	b003      	add	sp, #12
    1d72:	f85d fb04 	ldr.w	pc, [sp], #4

00001d76 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1d76:	b086      	sub	sp, #24
    1d78:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    1d7a:	9b01      	ldr	r3, [sp, #4]
    1d7c:	681a      	ldr	r2, [r3, #0]
    1d7e:	4911      	ldr	r1, [pc, #68]	; (1dc4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    1d80:	4613      	mov	r3, r2
    1d82:	00db      	lsls	r3, r3, #3
    1d84:	4413      	add	r3, r2
    1d86:	440b      	add	r3, r1
    1d88:	781b      	ldrb	r3, [r3, #0]
    1d8a:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    1d8c:	9b01      	ldr	r3, [sp, #4]
    1d8e:	685b      	ldr	r3, [r3, #4]
    1d90:	4a0d      	ldr	r2, [pc, #52]	; (1dc8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    1d92:	5cd3      	ldrb	r3, [r2, r3]
    1d94:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    1d96:	4a0d      	ldr	r2, [pc, #52]	; (1dcc <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    1d98:	9b05      	ldr	r3, [sp, #20]
    1d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1d9e:	681b      	ldr	r3, [r3, #0]
    1da0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    1da2:	9b03      	ldr	r3, [sp, #12]
    1da4:	f023 0307 	bic.w	r3, r3, #7
    1da8:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    1daa:	9a03      	ldr	r2, [sp, #12]
    1dac:	9b04      	ldr	r3, [sp, #16]
    1dae:	4313      	orrs	r3, r2
    1db0:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    1db2:	4a06      	ldr	r2, [pc, #24]	; (1dcc <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    1db4:	9b05      	ldr	r3, [sp, #20]
    1db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1dba:	9a03      	ldr	r2, [sp, #12]
    1dbc:	601a      	str	r2, [r3, #0]
}
    1dbe:	bf00      	nop
    1dc0:	b006      	add	sp, #24
    1dc2:	4770      	bx	lr
    1dc4:	00007228 	.word	0x00007228
    1dc8:	00007620 	.word	0x00007620
    1dcc:	00007664 	.word	0x00007664

00001dd0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1dd0:	b086      	sub	sp, #24
    1dd2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    1dd4:	9b01      	ldr	r3, [sp, #4]
    1dd6:	681a      	ldr	r2, [r3, #0]
    1dd8:	4911      	ldr	r1, [pc, #68]	; (1e20 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    1dda:	4613      	mov	r3, r2
    1ddc:	00db      	lsls	r3, r3, #3
    1dde:	4413      	add	r3, r2
    1de0:	440b      	add	r3, r1
    1de2:	781b      	ldrb	r3, [r3, #0]
    1de4:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    1de6:	9b01      	ldr	r3, [sp, #4]
    1de8:	685b      	ldr	r3, [r3, #4]
    1dea:	4a0e      	ldr	r2, [pc, #56]	; (1e24 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    1dec:	5cd3      	ldrb	r3, [r2, r3]
    1dee:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    1df0:	4a0d      	ldr	r2, [pc, #52]	; (1e28 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    1df2:	9b05      	ldr	r3, [sp, #20]
    1df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1df8:	681b      	ldr	r3, [r3, #0]
    1dfa:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    1dfc:	9b03      	ldr	r3, [sp, #12]
    1dfe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1e02:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    1e04:	9b04      	ldr	r3, [sp, #16]
    1e06:	021b      	lsls	r3, r3, #8
    1e08:	9a03      	ldr	r2, [sp, #12]
    1e0a:	4313      	orrs	r3, r2
    1e0c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    1e0e:	4a06      	ldr	r2, [pc, #24]	; (1e28 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    1e10:	9b05      	ldr	r3, [sp, #20]
    1e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e16:	9a03      	ldr	r2, [sp, #12]
    1e18:	601a      	str	r2, [r3, #0]
}
    1e1a:	bf00      	nop
    1e1c:	b006      	add	sp, #24
    1e1e:	4770      	bx	lr
    1e20:	00007228 	.word	0x00007228
    1e24:	00007620 	.word	0x00007620
    1e28:	00007664 	.word	0x00007664

00001e2c <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1e2c:	b084      	sub	sp, #16
    1e2e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    1e30:	4b09      	ldr	r3, [pc, #36]	; (1e58 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    1e32:	695b      	ldr	r3, [r3, #20]
    1e34:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    1e36:	9b03      	ldr	r3, [sp, #12]
    1e38:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1e3c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    1e3e:	9b01      	ldr	r3, [sp, #4]
    1e40:	685b      	ldr	r3, [r3, #4]
    1e42:	3b01      	subs	r3, #1
    1e44:	041b      	lsls	r3, r3, #16
    1e46:	9a03      	ldr	r2, [sp, #12]
    1e48:	4313      	orrs	r3, r2
    1e4a:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    1e4c:	4a02      	ldr	r2, [pc, #8]	; (1e58 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    1e4e:	9b03      	ldr	r3, [sp, #12]
    1e50:	6153      	str	r3, [r2, #20]
}
    1e52:	bf00      	nop
    1e54:	b004      	add	sp, #16
    1e56:	4770      	bx	lr
    1e58:	40064000 	.word	0x40064000

00001e5c <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1e5c:	b084      	sub	sp, #16
    1e5e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    1e60:	4b09      	ldr	r3, [pc, #36]	; (1e88 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    1e62:	695b      	ldr	r3, [r3, #20]
    1e64:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    1e66:	9b03      	ldr	r3, [sp, #12]
    1e68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1e6c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    1e6e:	9b01      	ldr	r3, [sp, #4]
    1e70:	685b      	ldr	r3, [r3, #4]
    1e72:	3b01      	subs	r3, #1
    1e74:	011b      	lsls	r3, r3, #4
    1e76:	9a03      	ldr	r2, [sp, #12]
    1e78:	4313      	orrs	r3, r2
    1e7a:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    1e7c:	4a02      	ldr	r2, [pc, #8]	; (1e88 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    1e7e:	9b03      	ldr	r3, [sp, #12]
    1e80:	6153      	str	r3, [r2, #20]
}
    1e82:	bf00      	nop
    1e84:	b004      	add	sp, #16
    1e86:	4770      	bx	lr
    1e88:	40064000 	.word	0x40064000

00001e8c <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1e8c:	b084      	sub	sp, #16
    1e8e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    1e90:	4b09      	ldr	r3, [pc, #36]	; (1eb8 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    1e92:	695b      	ldr	r3, [r3, #20]
    1e94:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    1e96:	9b03      	ldr	r3, [sp, #12]
    1e98:	f023 030f 	bic.w	r3, r3, #15
    1e9c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    1e9e:	9b01      	ldr	r3, [sp, #4]
    1ea0:	685b      	ldr	r3, [r3, #4]
    1ea2:	3b01      	subs	r3, #1
    1ea4:	9a03      	ldr	r2, [sp, #12]
    1ea6:	4313      	orrs	r3, r2
    1ea8:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    1eaa:	4a03      	ldr	r2, [pc, #12]	; (1eb8 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    1eac:	9b03      	ldr	r3, [sp, #12]
    1eae:	6153      	str	r3, [r2, #20]
}
    1eb0:	bf00      	nop
    1eb2:	b004      	add	sp, #16
    1eb4:	4770      	bx	lr
    1eb6:	bf00      	nop
    1eb8:	40064000 	.word	0x40064000

00001ebc <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1ebc:	b084      	sub	sp, #16
    1ebe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    1ec0:	4b09      	ldr	r3, [pc, #36]	; (1ee8 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    1ec2:	699b      	ldr	r3, [r3, #24]
    1ec4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    1ec6:	9b03      	ldr	r3, [sp, #12]
    1ec8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1ecc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    1ece:	9b01      	ldr	r3, [sp, #4]
    1ed0:	685b      	ldr	r3, [r3, #4]
    1ed2:	3b01      	subs	r3, #1
    1ed4:	041b      	lsls	r3, r3, #16
    1ed6:	9a03      	ldr	r2, [sp, #12]
    1ed8:	4313      	orrs	r3, r2
    1eda:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    1edc:	4a02      	ldr	r2, [pc, #8]	; (1ee8 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    1ede:	9b03      	ldr	r3, [sp, #12]
    1ee0:	6193      	str	r3, [r2, #24]
}
    1ee2:	bf00      	nop
    1ee4:	b004      	add	sp, #16
    1ee6:	4770      	bx	lr
    1ee8:	40064000 	.word	0x40064000

00001eec <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1eec:	b084      	sub	sp, #16
    1eee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    1ef0:	4b09      	ldr	r3, [pc, #36]	; (1f18 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    1ef2:	699b      	ldr	r3, [r3, #24]
    1ef4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    1ef6:	9b03      	ldr	r3, [sp, #12]
    1ef8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1efc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    1efe:	9b01      	ldr	r3, [sp, #4]
    1f00:	685b      	ldr	r3, [r3, #4]
    1f02:	3b01      	subs	r3, #1
    1f04:	011b      	lsls	r3, r3, #4
    1f06:	9a03      	ldr	r2, [sp, #12]
    1f08:	4313      	orrs	r3, r2
    1f0a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    1f0c:	4a02      	ldr	r2, [pc, #8]	; (1f18 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    1f0e:	9b03      	ldr	r3, [sp, #12]
    1f10:	6193      	str	r3, [r2, #24]
}
    1f12:	bf00      	nop
    1f14:	b004      	add	sp, #16
    1f16:	4770      	bx	lr
    1f18:	40064000 	.word	0x40064000

00001f1c <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1f1c:	b084      	sub	sp, #16
    1f1e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    1f20:	4b09      	ldr	r3, [pc, #36]	; (1f48 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    1f22:	699b      	ldr	r3, [r3, #24]
    1f24:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    1f26:	9b03      	ldr	r3, [sp, #12]
    1f28:	f023 030f 	bic.w	r3, r3, #15
    1f2c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    1f2e:	9b01      	ldr	r3, [sp, #4]
    1f30:	685b      	ldr	r3, [r3, #4]
    1f32:	3b01      	subs	r3, #1
    1f34:	9a03      	ldr	r2, [sp, #12]
    1f36:	4313      	orrs	r3, r2
    1f38:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    1f3a:	4a03      	ldr	r2, [pc, #12]	; (1f48 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    1f3c:	9b03      	ldr	r3, [sp, #12]
    1f3e:	6193      	str	r3, [r2, #24]
}
    1f40:	bf00      	nop
    1f42:	b004      	add	sp, #16
    1f44:	4770      	bx	lr
    1f46:	bf00      	nop
    1f48:	40064000 	.word	0x40064000

00001f4c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1f4c:	b084      	sub	sp, #16
    1f4e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    1f50:	4b09      	ldr	r3, [pc, #36]	; (1f78 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    1f52:	69db      	ldr	r3, [r3, #28]
    1f54:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    1f56:	9b03      	ldr	r3, [sp, #12]
    1f58:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1f5c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    1f5e:	9b01      	ldr	r3, [sp, #4]
    1f60:	685b      	ldr	r3, [r3, #4]
    1f62:	3b01      	subs	r3, #1
    1f64:	041b      	lsls	r3, r3, #16
    1f66:	9a03      	ldr	r2, [sp, #12]
    1f68:	4313      	orrs	r3, r2
    1f6a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    1f6c:	4a02      	ldr	r2, [pc, #8]	; (1f78 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    1f6e:	9b03      	ldr	r3, [sp, #12]
    1f70:	61d3      	str	r3, [r2, #28]
}
    1f72:	bf00      	nop
    1f74:	b004      	add	sp, #16
    1f76:	4770      	bx	lr
    1f78:	40064000 	.word	0x40064000

00001f7c <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1f7c:	b084      	sub	sp, #16
    1f7e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    1f80:	4b09      	ldr	r3, [pc, #36]	; (1fa8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    1f82:	69db      	ldr	r3, [r3, #28]
    1f84:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    1f86:	9b03      	ldr	r3, [sp, #12]
    1f88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1f8c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    1f8e:	9b01      	ldr	r3, [sp, #4]
    1f90:	685b      	ldr	r3, [r3, #4]
    1f92:	3b01      	subs	r3, #1
    1f94:	011b      	lsls	r3, r3, #4
    1f96:	9a03      	ldr	r2, [sp, #12]
    1f98:	4313      	orrs	r3, r2
    1f9a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    1f9c:	4a02      	ldr	r2, [pc, #8]	; (1fa8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    1f9e:	9b03      	ldr	r3, [sp, #12]
    1fa0:	61d3      	str	r3, [r2, #28]
}
    1fa2:	bf00      	nop
    1fa4:	b004      	add	sp, #16
    1fa6:	4770      	bx	lr
    1fa8:	40064000 	.word	0x40064000

00001fac <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1fac:	b084      	sub	sp, #16
    1fae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    1fb0:	4b09      	ldr	r3, [pc, #36]	; (1fd8 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    1fb2:	69db      	ldr	r3, [r3, #28]
    1fb4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    1fb6:	9b03      	ldr	r3, [sp, #12]
    1fb8:	f023 030f 	bic.w	r3, r3, #15
    1fbc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    1fbe:	9b01      	ldr	r3, [sp, #4]
    1fc0:	685b      	ldr	r3, [r3, #4]
    1fc2:	3b01      	subs	r3, #1
    1fc4:	9a03      	ldr	r2, [sp, #12]
    1fc6:	4313      	orrs	r3, r2
    1fc8:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    1fca:	4a03      	ldr	r2, [pc, #12]	; (1fd8 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    1fcc:	9b03      	ldr	r3, [sp, #12]
    1fce:	61d3      	str	r3, [r2, #28]
}
    1fd0:	bf00      	nop
    1fd2:	b004      	add	sp, #16
    1fd4:	4770      	bx	lr
    1fd6:	bf00      	nop
    1fd8:	40064000 	.word	0x40064000

00001fdc <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    1fdc:	b084      	sub	sp, #16
    1fde:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    1fe0:	4b0a      	ldr	r3, [pc, #40]	; (200c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    1fe2:	685b      	ldr	r3, [r3, #4]
    1fe4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    1fe6:	9b03      	ldr	r3, [sp, #12]
    1fe8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1fec:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    1fee:	9b01      	ldr	r3, [sp, #4]
    1ff0:	685b      	ldr	r3, [r3, #4]
    1ff2:	3b01      	subs	r3, #1
    1ff4:	021b      	lsls	r3, r3, #8
    1ff6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    1ffa:	9a03      	ldr	r2, [sp, #12]
    1ffc:	4313      	orrs	r3, r2
    1ffe:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2000:	4a02      	ldr	r2, [pc, #8]	; (200c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2002:	9b03      	ldr	r3, [sp, #12]
    2004:	6053      	str	r3, [r2, #4]
}
    2006:	bf00      	nop
    2008:	b004      	add	sp, #16
    200a:	4770      	bx	lr
    200c:	40048000 	.word	0x40048000

00002010 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2010:	b084      	sub	sp, #16
    2012:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    2014:	4919      	ldr	r1, [pc, #100]	; (207c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2016:	9b01      	ldr	r3, [sp, #4]
    2018:	681a      	ldr	r2, [r3, #0]
    201a:	4819      	ldr	r0, [pc, #100]	; (2080 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    201c:	4613      	mov	r3, r2
    201e:	00db      	lsls	r3, r3, #3
    2020:	4413      	add	r3, r2
    2022:	4403      	add	r3, r0
    2024:	3305      	adds	r3, #5
    2026:	781b      	ldrb	r3, [r3, #0]
    2028:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    202c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    202e:	9b03      	ldr	r3, [sp, #12]
    2030:	f023 030f 	bic.w	r3, r3, #15
    2034:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    2036:	9b01      	ldr	r3, [sp, #4]
    2038:	685b      	ldr	r3, [r3, #4]
    203a:	3b01      	subs	r3, #1
    203c:	f003 0307 	and.w	r3, r3, #7
    2040:	9a03      	ldr	r2, [sp, #12]
    2042:	4313      	orrs	r3, r2
    2044:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    2046:	9b01      	ldr	r3, [sp, #4]
    2048:	7a1b      	ldrb	r3, [r3, #8]
    204a:	3b01      	subs	r3, #1
    204c:	00db      	lsls	r3, r3, #3
    204e:	f003 0308 	and.w	r3, r3, #8
    2052:	9a03      	ldr	r2, [sp, #12]
    2054:	4313      	orrs	r3, r2
    2056:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    2058:	4908      	ldr	r1, [pc, #32]	; (207c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    205a:	9b01      	ldr	r3, [sp, #4]
    205c:	681a      	ldr	r2, [r3, #0]
    205e:	4808      	ldr	r0, [pc, #32]	; (2080 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2060:	4613      	mov	r3, r2
    2062:	00db      	lsls	r3, r3, #3
    2064:	4413      	add	r3, r2
    2066:	4403      	add	r3, r0
    2068:	3305      	adds	r3, #5
    206a:	781b      	ldrb	r3, [r3, #0]
    206c:	461a      	mov	r2, r3
    206e:	9b03      	ldr	r3, [sp, #12]
    2070:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    2074:	bf00      	nop
    2076:	b004      	add	sp, #16
    2078:	4770      	bx	lr
    207a:	bf00      	nop
    207c:	40065000 	.word	0x40065000
    2080:	00007228 	.word	0x00007228

00002084 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2084:	b084      	sub	sp, #16
    2086:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2088:	4b10      	ldr	r3, [pc, #64]	; (20cc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    208a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    208c:	4a0f      	ldr	r2, [pc, #60]	; (20cc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    208e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2092:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    2094:	4b0d      	ldr	r3, [pc, #52]	; (20cc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2098:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    209a:	9b03      	ldr	r3, [sp, #12]
    209c:	f023 030f 	bic.w	r3, r3, #15
    20a0:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    20a2:	9b01      	ldr	r3, [sp, #4]
    20a4:	685b      	ldr	r3, [r3, #4]
    20a6:	3b01      	subs	r3, #1
    20a8:	005b      	lsls	r3, r3, #1
    20aa:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    20ae:	9b01      	ldr	r3, [sp, #4]
    20b0:	7a1b      	ldrb	r3, [r3, #8]
    20b2:	3b01      	subs	r3, #1
    20b4:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    20b8:	4313      	orrs	r3, r2
    20ba:	9a03      	ldr	r2, [sp, #12]
    20bc:	4313      	orrs	r3, r2
    20be:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    20c0:	4a02      	ldr	r2, [pc, #8]	; (20cc <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    20c2:	9b03      	ldr	r3, [sp, #12]
    20c4:	6693      	str	r3, [r2, #104]	; 0x68
}
    20c6:	bf00      	nop
    20c8:	b004      	add	sp, #16
    20ca:	4770      	bx	lr
    20cc:	40048000 	.word	0x40048000

000020d0 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    20d0:	b082      	sub	sp, #8
    20d2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    20d4:	bf00      	nop
    20d6:	b002      	add	sp, #8
    20d8:	4770      	bx	lr
	...

000020dc <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    20dc:	b082      	sub	sp, #8
    20de:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    20e0:	bf00      	nop
    20e2:	b002      	add	sp, #8
    20e4:	4770      	bx	lr

000020e6 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    20e6:	b082      	sub	sp, #8
    20e8:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    20ea:	bf00      	nop
    20ec:	b002      	add	sp, #8
    20ee:	4770      	bx	lr

000020f0 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    20f0:	b500      	push	{lr}
    20f2:	b083      	sub	sp, #12
    20f4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    20f6:	9b01      	ldr	r3, [sp, #4]
    20f8:	2b00      	cmp	r3, #0
    20fa:	d002      	beq.n	2102 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    20fc:	9801      	ldr	r0, [sp, #4]
    20fe:	f000 f86a 	bl	21d6 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2102:	bf00      	nop
    2104:	b003      	add	sp, #12
    2106:	f85d fb04 	ldr.w	pc, [sp], #4

0000210a <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    210a:	b500      	push	{lr}
    210c:	b083      	sub	sp, #12
    210e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2110:	9b01      	ldr	r3, [sp, #4]
    2112:	2b00      	cmp	r3, #0
    2114:	d002      	beq.n	211c <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    2116:	9801      	ldr	r0, [sp, #4]
    2118:	f000 f884 	bl	2224 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    211c:	bf00      	nop
    211e:	b003      	add	sp, #12
    2120:	f85d fb04 	ldr.w	pc, [sp], #4

00002124 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2124:	b500      	push	{lr}
    2126:	b089      	sub	sp, #36	; 0x24
    2128:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    212a:	2300      	movs	r3, #0
    212c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    2130:	9b01      	ldr	r3, [sp, #4]
    2132:	2b00      	cmp	r3, #0
    2134:	d031      	beq.n	219a <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    2136:	4b1b      	ldr	r3, [pc, #108]	; (21a4 <Clock_Ip_CompleteSOSC+0x80>)
    2138:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    213c:	f003 0301 	and.w	r3, r3, #1
    2140:	2b00      	cmp	r3, #0
    2142:	d02a      	beq.n	219a <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2144:	aa03      	add	r2, sp, #12
    2146:	a904      	add	r1, sp, #16
    2148:	a805      	add	r0, sp, #20
    214a:	f24c 3350 	movw	r3, #50000	; 0xc350
    214e:	f7ff fd1d 	bl	1b8c <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    2152:	4b14      	ldr	r3, [pc, #80]	; (21a4 <Clock_Ip_CompleteSOSC+0x80>)
    2154:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2158:	0e1b      	lsrs	r3, r3, #24
    215a:	f003 0301 	and.w	r3, r3, #1
    215e:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2160:	9a03      	ldr	r2, [sp, #12]
    2162:	a904      	add	r1, sp, #16
    2164:	ab05      	add	r3, sp, #20
    2166:	4618      	mov	r0, r3
    2168:	f7ff fd2a 	bl	1bc0 <Clock_Ip_TimeoutExpired>
    216c:	4603      	mov	r3, r0
    216e:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    2172:	9b06      	ldr	r3, [sp, #24]
    2174:	2b00      	cmp	r3, #0
    2176:	d106      	bne.n	2186 <Clock_Ip_CompleteSOSC+0x62>
    2178:	f89d 301f 	ldrb.w	r3, [sp, #31]
    217c:	f083 0301 	eor.w	r3, r3, #1
    2180:	b2db      	uxtb	r3, r3
    2182:	2b00      	cmp	r3, #0
    2184:	d1e5      	bne.n	2152 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    2186:	f89d 301f 	ldrb.w	r3, [sp, #31]
    218a:	2b00      	cmp	r3, #0
    218c:	d005      	beq.n	219a <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    218e:	9b01      	ldr	r3, [sp, #4]
    2190:	681b      	ldr	r3, [r3, #0]
    2192:	4619      	mov	r1, r3
    2194:	2001      	movs	r0, #1
    2196:	f7ff fce9 	bl	1b6c <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    219a:	bf00      	nop
    219c:	b009      	add	sp, #36	; 0x24
    219e:	f85d fb04 	ldr.w	pc, [sp], #4
    21a2:	bf00      	nop
    21a4:	40064000 	.word	0x40064000

000021a8 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    21a8:	b500      	push	{lr}
    21aa:	b083      	sub	sp, #12
    21ac:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    21ae:	9801      	ldr	r0, [sp, #4]
    21b0:	f000 f8c0 	bl	2334 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    21b4:	bf00      	nop
    21b6:	b003      	add	sp, #12
    21b8:	f85d fb04 	ldr.w	pc, [sp], #4

000021bc <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    21bc:	b500      	push	{lr}
    21be:	b083      	sub	sp, #12
    21c0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21c2:	9b01      	ldr	r3, [sp, #4]
    21c4:	2b00      	cmp	r3, #0
    21c6:	d002      	beq.n	21ce <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    21c8:	9801      	ldr	r0, [sp, #4]
    21ca:	f000 f8c3 	bl	2354 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    21ce:	bf00      	nop
    21d0:	b003      	add	sp, #12
    21d2:	f85d fb04 	ldr.w	pc, [sp], #4

000021d6 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    21d6:	b082      	sub	sp, #8
    21d8:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    21da:	4b11      	ldr	r3, [pc, #68]	; (2220 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21dc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21e0:	4a0f      	ldr	r2, [pc, #60]	; (2220 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    21e6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    21ea:	4b0d      	ldr	r3, [pc, #52]	; (2220 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21ec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21f0:	4a0b      	ldr	r2, [pc, #44]	; (2220 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    21f6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    21fa:	4b09      	ldr	r3, [pc, #36]	; (2220 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2200:	4a07      	ldr	r2, [pc, #28]	; (2220 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2202:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    2206:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    220a:	4b05      	ldr	r3, [pc, #20]	; (2220 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    220c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2210:	4a03      	ldr	r2, [pc, #12]	; (2220 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2212:	f023 0301 	bic.w	r3, r3, #1
    2216:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    221a:	bf00      	nop
    221c:	b002      	add	sp, #8
    221e:	4770      	bx	lr
    2220:	40064000 	.word	0x40064000

00002224 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2224:	b082      	sub	sp, #8
    2226:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    2228:	9b01      	ldr	r3, [sp, #4]
    222a:	891b      	ldrh	r3, [r3, #8]
    222c:	2b01      	cmp	r3, #1
    222e:	d174      	bne.n	231a <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    2230:	9b01      	ldr	r3, [sp, #4]
    2232:	7bdb      	ldrb	r3, [r3, #15]
    2234:	2b00      	cmp	r3, #0
    2236:	d002      	beq.n	223e <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    2238:	2b01      	cmp	r3, #1
    223a:	d009      	beq.n	2250 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    223c:	e011      	b.n	2262 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    223e:	4b39      	ldr	r3, [pc, #228]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2240:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2244:	4a37      	ldr	r2, [pc, #220]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2246:	f023 0308 	bic.w	r3, r3, #8
    224a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    224e:	e008      	b.n	2262 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    2250:	4b34      	ldr	r3, [pc, #208]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2252:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2256:	4a33      	ldr	r2, [pc, #204]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2258:	f043 0308 	orr.w	r3, r3, #8
    225c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2260:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    2262:	4b30      	ldr	r3, [pc, #192]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2264:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2268:	4a2e      	ldr	r2, [pc, #184]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    226a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    226e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    2272:	9b01      	ldr	r3, [sp, #4]
    2274:	685b      	ldr	r3, [r3, #4]
    2276:	4a2c      	ldr	r2, [pc, #176]	; (2328 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    2278:	4293      	cmp	r3, r2
    227a:	d90d      	bls.n	2298 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    227c:	9b01      	ldr	r3, [sp, #4]
    227e:	685b      	ldr	r3, [r3, #4]
    2280:	4a2a      	ldr	r2, [pc, #168]	; (232c <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    2282:	4293      	cmp	r3, r2
    2284:	d208      	bcs.n	2298 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    2286:	4b27      	ldr	r3, [pc, #156]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2288:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    228c:	4a25      	ldr	r2, [pc, #148]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    228e:	f043 0320 	orr.w	r3, r3, #32
    2292:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2296:	e007      	b.n	22a8 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    2298:	4b22      	ldr	r3, [pc, #136]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    229a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    229e:	4a21      	ldr	r2, [pc, #132]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22a0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    22a4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    22a8:	9b01      	ldr	r3, [sp, #4]
    22aa:	7b1b      	ldrb	r3, [r3, #12]
    22ac:	2b00      	cmp	r3, #0
    22ae:	d108      	bne.n	22c2 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    22b0:	4b1c      	ldr	r3, [pc, #112]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    22b6:	4a1b      	ldr	r2, [pc, #108]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22b8:	f043 0304 	orr.w	r3, r3, #4
    22bc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    22c0:	e007      	b.n	22d2 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    22c2:	4b18      	ldr	r3, [pc, #96]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    22c8:	4a16      	ldr	r2, [pc, #88]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22ca:	f023 0304 	bic.w	r3, r3, #4
    22ce:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    22d2:	9b01      	ldr	r3, [sp, #4]
    22d4:	7c1b      	ldrb	r3, [r3, #16]
    22d6:	2b02      	cmp	r3, #2
    22d8:	d011      	beq.n	22fe <Clock_Ip_SetSOSC_TrustedCall+0xda>
    22da:	2b02      	cmp	r3, #2
    22dc:	dc14      	bgt.n	2308 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    22de:	2b00      	cmp	r3, #0
    22e0:	d002      	beq.n	22e8 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    22e2:	2b01      	cmp	r3, #1
    22e4:	d005      	beq.n	22f2 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    22e6:	e00f      	b.n	2308 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    22e8:	4b0e      	ldr	r3, [pc, #56]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22ea:	2201      	movs	r2, #1
    22ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    22f0:	e014      	b.n	231c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    22f2:	4b0c      	ldr	r3, [pc, #48]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22f4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    22f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    22fc:	e00e      	b.n	231c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    22fe:	4b09      	ldr	r3, [pc, #36]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2300:	4a0b      	ldr	r2, [pc, #44]	; (2330 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    2302:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    2306:	e009      	b.n	231c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2308:	4b06      	ldr	r3, [pc, #24]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    230a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    230e:	4a05      	ldr	r2, [pc, #20]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2310:	f043 0301 	orr.w	r3, r3, #1
    2314:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    2318:	e000      	b.n	231c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    231a:	bf00      	nop
}
    231c:	bf00      	nop
    231e:	b002      	add	sp, #8
    2320:	4770      	bx	lr
    2322:	bf00      	nop
    2324:	40064000 	.word	0x40064000
    2328:	003d08ff 	.word	0x003d08ff
    232c:	007a1200 	.word	0x007a1200
    2330:	00030001 	.word	0x00030001

00002334 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    2334:	b082      	sub	sp, #8
    2336:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    2338:	4b05      	ldr	r3, [pc, #20]	; (2350 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    233a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    233e:	4a04      	ldr	r2, [pc, #16]	; (2350 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2340:	f023 0301 	bic.w	r3, r3, #1
    2344:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2348:	bf00      	nop
    234a:	b002      	add	sp, #8
    234c:	4770      	bx	lr
    234e:	bf00      	nop
    2350:	40064000 	.word	0x40064000

00002354 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2354:	b082      	sub	sp, #8
    2356:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2358:	9b01      	ldr	r3, [sp, #4]
    235a:	891b      	ldrh	r3, [r3, #8]
    235c:	2b01      	cmp	r3, #1
    235e:	d107      	bne.n	2370 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2360:	4b05      	ldr	r3, [pc, #20]	; (2378 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2362:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2366:	4a04      	ldr	r2, [pc, #16]	; (2378 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2368:	f043 0301 	orr.w	r3, r3, #1
    236c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    2370:	bf00      	nop
    2372:	b002      	add	sp, #8
    2374:	4770      	bx	lr
    2376:	bf00      	nop
    2378:	40064000 	.word	0x40064000

0000237c <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    237c:	b082      	sub	sp, #8
    237e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2380:	bf00      	nop
    2382:	b002      	add	sp, #8
    2384:	4770      	bx	lr

00002386 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    2386:	b082      	sub	sp, #8
    2388:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    238a:	2300      	movs	r3, #0
}
    238c:	4618      	mov	r0, r3
    238e:	b002      	add	sp, #8
    2390:	4770      	bx	lr

00002392 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    2392:	b082      	sub	sp, #8
    2394:	9001      	str	r0, [sp, #4]
    2396:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    2398:	bf00      	nop
    239a:	b002      	add	sp, #8
    239c:	4770      	bx	lr
	...

000023a0 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    23a0:	b082      	sub	sp, #8
    23a2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    23a4:	bf00      	nop
    23a6:	b002      	add	sp, #8
    23a8:	4770      	bx	lr

000023aa <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    23aa:	b082      	sub	sp, #8
    23ac:	9001      	str	r0, [sp, #4]
    23ae:	460b      	mov	r3, r1
    23b0:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    23b4:	bf00      	nop
    23b6:	b002      	add	sp, #8
    23b8:	4770      	bx	lr

000023ba <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    23ba:	b500      	push	{lr}
    23bc:	b083      	sub	sp, #12
    23be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    23c0:	9b01      	ldr	r3, [sp, #4]
    23c2:	2b00      	cmp	r3, #0
    23c4:	d002      	beq.n	23cc <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    23c6:	9801      	ldr	r0, [sp, #4]
    23c8:	f000 f8e7 	bl	259a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    23cc:	bf00      	nop
    23ce:	b003      	add	sp, #12
    23d0:	f85d fb04 	ldr.w	pc, [sp], #4

000023d4 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    23d4:	b500      	push	{lr}
    23d6:	b085      	sub	sp, #20
    23d8:	9001      	str	r0, [sp, #4]
    23da:	460b      	mov	r3, r1
    23dc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    23e0:	9b01      	ldr	r3, [sp, #4]
    23e2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    23e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    23e8:	2b00      	cmp	r3, #0
    23ea:	d003      	beq.n	23f4 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    23ec:	2300      	movs	r3, #0
    23ee:	f8ad 300c 	strh.w	r3, [sp, #12]
    23f2:	e002      	b.n	23fa <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    23f4:	2301      	movs	r3, #1
    23f6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    23fa:	ab02      	add	r3, sp, #8
    23fc:	4618      	mov	r0, r3
    23fe:	f7ff ffdc 	bl	23ba <Clock_Ip_ClockSetSimLPO1KEnable>
}
    2402:	bf00      	nop
    2404:	b005      	add	sp, #20
    2406:	f85d fb04 	ldr.w	pc, [sp], #4

0000240a <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    240a:	b500      	push	{lr}
    240c:	b083      	sub	sp, #12
    240e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2410:	9b01      	ldr	r3, [sp, #4]
    2412:	2b00      	cmp	r3, #0
    2414:	d002      	beq.n	241c <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    2416:	9801      	ldr	r0, [sp, #4]
    2418:	f000 f8d6 	bl	25c8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    241c:	bf00      	nop
    241e:	b003      	add	sp, #12
    2420:	f85d fb04 	ldr.w	pc, [sp], #4

00002424 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2424:	b500      	push	{lr}
    2426:	b085      	sub	sp, #20
    2428:	9001      	str	r0, [sp, #4]
    242a:	460b      	mov	r3, r1
    242c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2430:	9b01      	ldr	r3, [sp, #4]
    2432:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2434:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2438:	2b00      	cmp	r3, #0
    243a:	d003      	beq.n	2444 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    243c:	2300      	movs	r3, #0
    243e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2442:	e002      	b.n	244a <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2444:	2301      	movs	r3, #1
    2446:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    244a:	ab02      	add	r3, sp, #8
    244c:	4618      	mov	r0, r3
    244e:	f7ff ffdc 	bl	240a <Clock_Ip_ClockSetSimLPO32KEnable>
}
    2452:	bf00      	nop
    2454:	b005      	add	sp, #20
    2456:	f85d fb04 	ldr.w	pc, [sp], #4

0000245a <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    245a:	b500      	push	{lr}
    245c:	b083      	sub	sp, #12
    245e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2460:	9b01      	ldr	r3, [sp, #4]
    2462:	2b00      	cmp	r3, #0
    2464:	d002      	beq.n	246c <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    2466:	9801      	ldr	r0, [sp, #4]
    2468:	f000 f8c6 	bl	25f8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    246c:	bf00      	nop
    246e:	b003      	add	sp, #12
    2470:	f85d fb04 	ldr.w	pc, [sp], #4

00002474 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2474:	b500      	push	{lr}
    2476:	b085      	sub	sp, #20
    2478:	9001      	str	r0, [sp, #4]
    247a:	460b      	mov	r3, r1
    247c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2480:	9b01      	ldr	r3, [sp, #4]
    2482:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2484:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2488:	2b00      	cmp	r3, #0
    248a:	d003      	beq.n	2494 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    248c:	2300      	movs	r3, #0
    248e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2492:	e002      	b.n	249a <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2494:	2301      	movs	r3, #1
    2496:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    249a:	ab02      	add	r3, sp, #8
    249c:	4618      	mov	r0, r3
    249e:	f7ff ffdc 	bl	245a <Clock_Ip_ClockSetSimClkoutEnable>
}
    24a2:	bf00      	nop
    24a4:	b005      	add	sp, #20
    24a6:	f85d fb04 	ldr.w	pc, [sp], #4

000024aa <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    24aa:	b500      	push	{lr}
    24ac:	b083      	sub	sp, #12
    24ae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    24b0:	9b01      	ldr	r3, [sp, #4]
    24b2:	2b00      	cmp	r3, #0
    24b4:	d002      	beq.n	24bc <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    24b6:	9801      	ldr	r0, [sp, #4]
    24b8:	f000 f8b6 	bl	2628 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    24bc:	bf00      	nop
    24be:	b003      	add	sp, #12
    24c0:	f85d fb04 	ldr.w	pc, [sp], #4

000024c4 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    24c4:	b500      	push	{lr}
    24c6:	b085      	sub	sp, #20
    24c8:	9001      	str	r0, [sp, #4]
    24ca:	460b      	mov	r3, r1
    24cc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    24d0:	9b01      	ldr	r3, [sp, #4]
    24d2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    24d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    24d8:	2b00      	cmp	r3, #0
    24da:	d003      	beq.n	24e4 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    24dc:	2300      	movs	r3, #0
    24de:	f8ad 300c 	strh.w	r3, [sp, #12]
    24e2:	e002      	b.n	24ea <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    24e4:	2301      	movs	r3, #1
    24e6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    24ea:	ab02      	add	r3, sp, #8
    24ec:	4618      	mov	r0, r3
    24ee:	f7ff ffdc 	bl	24aa <Clock_Ip_ClockSetPccCgcEnable>
}
    24f2:	bf00      	nop
    24f4:	b005      	add	sp, #20
    24f6:	f85d fb04 	ldr.w	pc, [sp], #4

000024fa <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    24fa:	b500      	push	{lr}
    24fc:	b083      	sub	sp, #12
    24fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2500:	9b01      	ldr	r3, [sp, #4]
    2502:	2b00      	cmp	r3, #0
    2504:	d002      	beq.n	250c <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    2506:	9801      	ldr	r0, [sp, #4]
    2508:	f000 f8bc 	bl	2684 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    250c:	bf00      	nop
    250e:	b003      	add	sp, #12
    2510:	f85d fb04 	ldr.w	pc, [sp], #4

00002514 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    2514:	b500      	push	{lr}
    2516:	b085      	sub	sp, #20
    2518:	9001      	str	r0, [sp, #4]
    251a:	460b      	mov	r3, r1
    251c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2520:	9b01      	ldr	r3, [sp, #4]
    2522:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2524:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2528:	2b00      	cmp	r3, #0
    252a:	d003      	beq.n	2534 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    252c:	2300      	movs	r3, #0
    252e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2532:	e002      	b.n	253a <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2534:	2301      	movs	r3, #1
    2536:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    253a:	ab02      	add	r3, sp, #8
    253c:	4618      	mov	r0, r3
    253e:	f7ff ffdc 	bl	24fa <Clock_Ip_ClockSetSimGate>
}
    2542:	bf00      	nop
    2544:	b005      	add	sp, #20
    2546:	f85d fb04 	ldr.w	pc, [sp], #4

0000254a <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    254a:	b500      	push	{lr}
    254c:	b083      	sub	sp, #12
    254e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2550:	9b01      	ldr	r3, [sp, #4]
    2552:	2b00      	cmp	r3, #0
    2554:	d002      	beq.n	255c <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    2556:	9801      	ldr	r0, [sp, #4]
    2558:	f000 f8c0 	bl	26dc <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    255c:	bf00      	nop
    255e:	b003      	add	sp, #12
    2560:	f85d fb04 	ldr.w	pc, [sp], #4

00002564 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2564:	b500      	push	{lr}
    2566:	b085      	sub	sp, #20
    2568:	9001      	str	r0, [sp, #4]
    256a:	460b      	mov	r3, r1
    256c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2570:	9b01      	ldr	r3, [sp, #4]
    2572:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2574:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2578:	2b00      	cmp	r3, #0
    257a:	d003      	beq.n	2584 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    257c:	2300      	movs	r3, #0
    257e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2582:	e002      	b.n	258a <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2584:	2301      	movs	r3, #1
    2586:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    258a:	ab02      	add	r3, sp, #8
    258c:	4618      	mov	r0, r3
    258e:	f7ff ffdc 	bl	254a <Clock_Ip_ClockSetSimTraceEnable>
}
    2592:	bf00      	nop
    2594:	b005      	add	sp, #20
    2596:	f85d fb04 	ldr.w	pc, [sp], #4

0000259a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    259a:	b084      	sub	sp, #16
    259c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    259e:	4b09      	ldr	r3, [pc, #36]	; (25c4 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    25a0:	691b      	ldr	r3, [r3, #16]
    25a2:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    25a4:	9b03      	ldr	r3, [sp, #12]
    25a6:	f023 0301 	bic.w	r3, r3, #1
    25aa:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    25ac:	9b01      	ldr	r3, [sp, #4]
    25ae:	889b      	ldrh	r3, [r3, #4]
    25b0:	461a      	mov	r2, r3
    25b2:	9b03      	ldr	r3, [sp, #12]
    25b4:	4313      	orrs	r3, r2
    25b6:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    25b8:	4a02      	ldr	r2, [pc, #8]	; (25c4 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    25ba:	9b03      	ldr	r3, [sp, #12]
    25bc:	6113      	str	r3, [r2, #16]
}
    25be:	bf00      	nop
    25c0:	b004      	add	sp, #16
    25c2:	4770      	bx	lr
    25c4:	40048000 	.word	0x40048000

000025c8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    25c8:	b084      	sub	sp, #16
    25ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    25cc:	4b09      	ldr	r3, [pc, #36]	; (25f4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    25ce:	691b      	ldr	r3, [r3, #16]
    25d0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    25d2:	9b03      	ldr	r3, [sp, #12]
    25d4:	f023 0302 	bic.w	r3, r3, #2
    25d8:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    25da:	9b01      	ldr	r3, [sp, #4]
    25dc:	889b      	ldrh	r3, [r3, #4]
    25de:	005b      	lsls	r3, r3, #1
    25e0:	9a03      	ldr	r2, [sp, #12]
    25e2:	4313      	orrs	r3, r2
    25e4:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    25e6:	4a03      	ldr	r2, [pc, #12]	; (25f4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    25e8:	9b03      	ldr	r3, [sp, #12]
    25ea:	6113      	str	r3, [r2, #16]
}
    25ec:	bf00      	nop
    25ee:	b004      	add	sp, #16
    25f0:	4770      	bx	lr
    25f2:	bf00      	nop
    25f4:	40048000 	.word	0x40048000

000025f8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    25f8:	b084      	sub	sp, #16
    25fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    25fc:	4b09      	ldr	r3, [pc, #36]	; (2624 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    25fe:	685b      	ldr	r3, [r3, #4]
    2600:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    2602:	9b03      	ldr	r3, [sp, #12]
    2604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2608:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    260a:	9b01      	ldr	r3, [sp, #4]
    260c:	889b      	ldrh	r3, [r3, #4]
    260e:	02db      	lsls	r3, r3, #11
    2610:	9a03      	ldr	r2, [sp, #12]
    2612:	4313      	orrs	r3, r2
    2614:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2616:	4a03      	ldr	r2, [pc, #12]	; (2624 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2618:	9b03      	ldr	r3, [sp, #12]
    261a:	6053      	str	r3, [r2, #4]
}
    261c:	bf00      	nop
    261e:	b004      	add	sp, #16
    2620:	4770      	bx	lr
    2622:	bf00      	nop
    2624:	40048000 	.word	0x40048000

00002628 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2628:	b084      	sub	sp, #16
    262a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    262c:	4913      	ldr	r1, [pc, #76]	; (267c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    262e:	9b01      	ldr	r3, [sp, #4]
    2630:	681a      	ldr	r2, [r3, #0]
    2632:	4813      	ldr	r0, [pc, #76]	; (2680 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2634:	4613      	mov	r3, r2
    2636:	00db      	lsls	r3, r3, #3
    2638:	4413      	add	r3, r2
    263a:	4403      	add	r3, r0
    263c:	3306      	adds	r3, #6
    263e:	781b      	ldrb	r3, [r3, #0]
    2640:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2644:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    2646:	9b03      	ldr	r3, [sp, #12]
    2648:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    264c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    264e:	9b01      	ldr	r3, [sp, #4]
    2650:	889b      	ldrh	r3, [r3, #4]
    2652:	079b      	lsls	r3, r3, #30
    2654:	9a03      	ldr	r2, [sp, #12]
    2656:	4313      	orrs	r3, r2
    2658:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    265a:	4908      	ldr	r1, [pc, #32]	; (267c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    265c:	9b01      	ldr	r3, [sp, #4]
    265e:	681a      	ldr	r2, [r3, #0]
    2660:	4807      	ldr	r0, [pc, #28]	; (2680 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2662:	4613      	mov	r3, r2
    2664:	00db      	lsls	r3, r3, #3
    2666:	4413      	add	r3, r2
    2668:	4403      	add	r3, r0
    266a:	3306      	adds	r3, #6
    266c:	781b      	ldrb	r3, [r3, #0]
    266e:	461a      	mov	r2, r3
    2670:	9b03      	ldr	r3, [sp, #12]
    2672:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    2676:	bf00      	nop
    2678:	b004      	add	sp, #16
    267a:	4770      	bx	lr
    267c:	40065000 	.word	0x40065000
    2680:	00007228 	.word	0x00007228

00002684 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2684:	b086      	sub	sp, #24
    2686:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    2688:	9b01      	ldr	r3, [sp, #4]
    268a:	889b      	ldrh	r3, [r3, #4]
    268c:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    268e:	9b01      	ldr	r3, [sp, #4]
    2690:	681a      	ldr	r2, [r3, #0]
    2692:	4910      	ldr	r1, [pc, #64]	; (26d4 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    2694:	4613      	mov	r3, r2
    2696:	00db      	lsls	r3, r3, #3
    2698:	4413      	add	r3, r2
    269a:	440b      	add	r3, r1
    269c:	3306      	adds	r3, #6
    269e:	781b      	ldrb	r3, [r3, #0]
    26a0:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    26a2:	4b0d      	ldr	r3, [pc, #52]	; (26d8 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    26a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    26a6:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    26a8:	2201      	movs	r2, #1
    26aa:	9b04      	ldr	r3, [sp, #16]
    26ac:	fa02 f303 	lsl.w	r3, r2, r3
    26b0:	43db      	mvns	r3, r3
    26b2:	9a03      	ldr	r2, [sp, #12]
    26b4:	4013      	ands	r3, r2
    26b6:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    26b8:	9a05      	ldr	r2, [sp, #20]
    26ba:	9b04      	ldr	r3, [sp, #16]
    26bc:	fa02 f303 	lsl.w	r3, r2, r3
    26c0:	9a03      	ldr	r2, [sp, #12]
    26c2:	4313      	orrs	r3, r2
    26c4:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    26c6:	4a04      	ldr	r2, [pc, #16]	; (26d8 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    26c8:	9b03      	ldr	r3, [sp, #12]
    26ca:	6413      	str	r3, [r2, #64]	; 0x40
}
    26cc:	bf00      	nop
    26ce:	b006      	add	sp, #24
    26d0:	4770      	bx	lr
    26d2:	bf00      	nop
    26d4:	00007228 	.word	0x00007228
    26d8:	40048000 	.word	0x40048000

000026dc <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    26dc:	b084      	sub	sp, #16
    26de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    26e0:	4b0a      	ldr	r3, [pc, #40]	; (270c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    26e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    26e4:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    26e6:	9b01      	ldr	r3, [sp, #4]
    26e8:	889b      	ldrh	r3, [r3, #4]
    26ea:	2b01      	cmp	r3, #1
    26ec:	d104      	bne.n	26f8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    26ee:	9b03      	ldr	r3, [sp, #12]
    26f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    26f4:	9303      	str	r3, [sp, #12]
    26f6:	e003      	b.n	2700 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    26f8:	9b03      	ldr	r3, [sp, #12]
    26fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    26fe:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    2700:	4a02      	ldr	r2, [pc, #8]	; (270c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2702:	9b03      	ldr	r3, [sp, #12]
    2704:	6693      	str	r3, [r2, #104]	; 0x68
}
    2706:	bf00      	nop
    2708:	b004      	add	sp, #16
    270a:	4770      	bx	lr
    270c:	40048000 	.word	0x40048000

00002710 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    2710:	b082      	sub	sp, #8
    2712:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2714:	bf00      	nop
    2716:	b002      	add	sp, #8
    2718:	4770      	bx	lr

0000271a <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    271a:	b082      	sub	sp, #8
    271c:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    271e:	bf00      	nop
    2720:	b002      	add	sp, #8
    2722:	4770      	bx	lr

00002724 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2724:	b500      	push	{lr}
    2726:	b083      	sub	sp, #12
    2728:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    272a:	9b01      	ldr	r3, [sp, #4]
    272c:	2b00      	cmp	r3, #0
    272e:	d002      	beq.n	2736 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    2730:	9801      	ldr	r0, [sp, #4]
    2732:	f000 f8d1 	bl	28d8 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2736:	bf00      	nop
    2738:	b003      	add	sp, #12
    273a:	f85d fb04 	ldr.w	pc, [sp], #4

0000273e <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    273e:	b500      	push	{lr}
    2740:	b083      	sub	sp, #12
    2742:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2744:	9b01      	ldr	r3, [sp, #4]
    2746:	2b00      	cmp	r3, #0
    2748:	d002      	beq.n	2750 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    274a:	9801      	ldr	r0, [sp, #4]
    274c:	f000 f950 	bl	29f0 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2750:	bf00      	nop
    2752:	b003      	add	sp, #12
    2754:	f85d fb04 	ldr.w	pc, [sp], #4

00002758 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    2758:	b500      	push	{lr}
    275a:	b083      	sub	sp, #12
    275c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    275e:	9801      	ldr	r0, [sp, #4]
    2760:	f000 f98e 	bl	2a80 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2764:	bf00      	nop
    2766:	b003      	add	sp, #12
    2768:	f85d fb04 	ldr.w	pc, [sp], #4

0000276c <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    276c:	b500      	push	{lr}
    276e:	b083      	sub	sp, #12
    2770:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2772:	9b01      	ldr	r3, [sp, #4]
    2774:	2b00      	cmp	r3, #0
    2776:	d002      	beq.n	277e <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    2778:	9801      	ldr	r0, [sp, #4]
    277a:	f000 f999 	bl	2ab0 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    277e:	bf00      	nop
    2780:	b003      	add	sp, #12
    2782:	f85d fb04 	ldr.w	pc, [sp], #4

00002786 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2786:	b500      	push	{lr}
    2788:	b083      	sub	sp, #12
    278a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    278c:	9b01      	ldr	r3, [sp, #4]
    278e:	2b00      	cmp	r3, #0
    2790:	d002      	beq.n	2798 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    2792:	9801      	ldr	r0, [sp, #4]
    2794:	f000 f9b0 	bl	2af8 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2798:	bf00      	nop
    279a:	b003      	add	sp, #12
    279c:	f85d fb04 	ldr.w	pc, [sp], #4

000027a0 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    27a0:	b500      	push	{lr}
    27a2:	b083      	sub	sp, #12
    27a4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    27a6:	9801      	ldr	r0, [sp, #4]
    27a8:	f000 f9ba 	bl	2b20 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    27ac:	bf00      	nop
    27ae:	b003      	add	sp, #12
    27b0:	f85d fb04 	ldr.w	pc, [sp], #4

000027b4 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    27b4:	b500      	push	{lr}
    27b6:	b083      	sub	sp, #12
    27b8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    27ba:	9b01      	ldr	r3, [sp, #4]
    27bc:	2b00      	cmp	r3, #0
    27be:	d002      	beq.n	27c6 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    27c0:	9801      	ldr	r0, [sp, #4]
    27c2:	f000 f9bd 	bl	2b40 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    27c6:	bf00      	nop
    27c8:	b003      	add	sp, #12
    27ca:	f85d fb04 	ldr.w	pc, [sp], #4

000027ce <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    27ce:	b500      	push	{lr}
    27d0:	b083      	sub	sp, #12
    27d2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    27d4:	9b01      	ldr	r3, [sp, #4]
    27d6:	2b00      	cmp	r3, #0
    27d8:	d002      	beq.n	27e0 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    27da:	9801      	ldr	r0, [sp, #4]
    27dc:	f000 f9d4 	bl	2b88 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    27e0:	bf00      	nop
    27e2:	b003      	add	sp, #12
    27e4:	f85d fb04 	ldr.w	pc, [sp], #4

000027e8 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    27e8:	b500      	push	{lr}
    27ea:	b083      	sub	sp, #12
    27ec:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    27ee:	9801      	ldr	r0, [sp, #4]
    27f0:	f000 f9de 	bl	2bb0 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    27f4:	bf00      	nop
    27f6:	b003      	add	sp, #12
    27f8:	f85d fb04 	ldr.w	pc, [sp], #4

000027fc <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    27fc:	b500      	push	{lr}
    27fe:	b089      	sub	sp, #36	; 0x24
    2800:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    2802:	2300      	movs	r3, #0
    2804:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    2808:	4b20      	ldr	r3, [pc, #128]	; (288c <SetInputSouceSytemClock+0x90>)
    280a:	695b      	ldr	r3, [r3, #20]
    280c:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    280e:	9b06      	ldr	r3, [sp, #24]
    2810:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    2814:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    2816:	9b01      	ldr	r3, [sp, #4]
    2818:	061b      	lsls	r3, r3, #24
    281a:	9a06      	ldr	r2, [sp, #24]
    281c:	4313      	orrs	r3, r2
    281e:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    2820:	4a1a      	ldr	r2, [pc, #104]	; (288c <SetInputSouceSytemClock+0x90>)
    2822:	9b06      	ldr	r3, [sp, #24]
    2824:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2826:	aa02      	add	r2, sp, #8
    2828:	a903      	add	r1, sp, #12
    282a:	a804      	add	r0, sp, #16
    282c:	f24c 3350 	movw	r3, #50000	; 0xc350
    2830:	f7ff f9ac 	bl	1b8c <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    2834:	4b15      	ldr	r3, [pc, #84]	; (288c <SetInputSouceSytemClock+0x90>)
    2836:	691b      	ldr	r3, [r3, #16]
    2838:	0e1b      	lsrs	r3, r3, #24
    283a:	f003 030f 	and.w	r3, r3, #15
    283e:	9a01      	ldr	r2, [sp, #4]
    2840:	429a      	cmp	r2, r3
    2842:	bf0c      	ite	eq
    2844:	2301      	moveq	r3, #1
    2846:	2300      	movne	r3, #0
    2848:	b2db      	uxtb	r3, r3
    284a:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    284c:	9a02      	ldr	r2, [sp, #8]
    284e:	a903      	add	r1, sp, #12
    2850:	ab04      	add	r3, sp, #16
    2852:	4618      	mov	r0, r3
    2854:	f7ff f9b4 	bl	1bc0 <Clock_Ip_TimeoutExpired>
    2858:	4603      	mov	r3, r0
    285a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    285e:	9b05      	ldr	r3, [sp, #20]
    2860:	2b00      	cmp	r3, #0
    2862:	d106      	bne.n	2872 <SetInputSouceSytemClock+0x76>
    2864:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2868:	f083 0301 	eor.w	r3, r3, #1
    286c:	b2db      	uxtb	r3, r3
    286e:	2b00      	cmp	r3, #0
    2870:	d1e0      	bne.n	2834 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    2872:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2876:	2b00      	cmp	r3, #0
    2878:	d003      	beq.n	2882 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    287a:	2105      	movs	r1, #5
    287c:	2001      	movs	r0, #1
    287e:	f7ff f975 	bl	1b6c <Clock_Ip_ReportClockErrors>
    }
}
    2882:	bf00      	nop
    2884:	b009      	add	sp, #36	; 0x24
    2886:	f85d fb04 	ldr.w	pc, [sp], #4
    288a:	bf00      	nop
    288c:	40064000 	.word	0x40064000

00002890 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2890:	b500      	push	{lr}
    2892:	b083      	sub	sp, #12
    2894:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2896:	9b01      	ldr	r3, [sp, #4]
    2898:	2b00      	cmp	r3, #0
    289a:	d002      	beq.n	28a2 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    289c:	9801      	ldr	r0, [sp, #4]
    289e:	f000 f997 	bl	2bd0 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    28a2:	bf00      	nop
    28a4:	b003      	add	sp, #12
    28a6:	f85d fb04 	ldr.w	pc, [sp], #4

000028aa <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    28aa:	b500      	push	{lr}
    28ac:	b083      	sub	sp, #12
    28ae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    28b0:	9b01      	ldr	r3, [sp, #4]
    28b2:	2b00      	cmp	r3, #0
    28b4:	d002      	beq.n	28bc <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    28b6:	9801      	ldr	r0, [sp, #4]
    28b8:	f000 fa7e 	bl	2db8 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    28bc:	bf00      	nop
    28be:	b003      	add	sp, #12
    28c0:	f85d fb04 	ldr.w	pc, [sp], #4

000028c4 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    28c4:	b500      	push	{lr}
    28c6:	b083      	sub	sp, #12
    28c8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    28ca:	9801      	ldr	r0, [sp, #4]
    28cc:	f000 fab8 	bl	2e40 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    28d0:	bf00      	nop
    28d2:	b003      	add	sp, #12
    28d4:	f85d fb04 	ldr.w	pc, [sp], #4

000028d8 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    28d8:	b500      	push	{lr}
    28da:	b08b      	sub	sp, #44	; 0x2c
    28dc:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    28de:	2300      	movs	r3, #0
    28e0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    28e4:	9b01      	ldr	r3, [sp, #4]
    28e6:	2b00      	cmp	r3, #0
    28e8:	d10b      	bne.n	2902 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    28ea:	2305      	movs	r3, #5
    28ec:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    28ee:	2301      	movs	r3, #1
    28f0:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    28f4:	2301      	movs	r3, #1
    28f6:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    28fa:	2301      	movs	r3, #1
    28fc:	f88d 3010 	strb.w	r3, [sp, #16]
    2900:	e00e      	b.n	2920 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    2902:	9b01      	ldr	r3, [sp, #4]
    2904:	681b      	ldr	r3, [r3, #0]
    2906:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    2908:	9b01      	ldr	r3, [sp, #4]
    290a:	79db      	ldrb	r3, [r3, #7]
    290c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    2910:	9b01      	ldr	r3, [sp, #4]
    2912:	889b      	ldrh	r3, [r3, #4]
    2914:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    2918:	9b01      	ldr	r3, [sp, #4]
    291a:	7a1b      	ldrb	r3, [r3, #8]
    291c:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2920:	4b32      	ldr	r3, [pc, #200]	; (29ec <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2922:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2926:	4a31      	ldr	r2, [pc, #196]	; (29ec <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2928:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    292c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    2930:	4b2e      	ldr	r3, [pc, #184]	; (29ec <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2932:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2936:	4a2d      	ldr	r2, [pc, #180]	; (29ec <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2938:	f023 0301 	bic.w	r3, r3, #1
    293c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2940:	4b2a      	ldr	r3, [pc, #168]	; (29ec <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2942:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2946:	4a29      	ldr	r2, [pc, #164]	; (29ec <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2948:	f023 0304 	bic.w	r3, r3, #4
    294c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    2950:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    2954:	2b01      	cmp	r3, #1
    2956:	d144      	bne.n	29e2 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    2958:	f89d 300f 	ldrb.w	r3, [sp, #15]
    295c:	4a23      	ldr	r2, [pc, #140]	; (29ec <Clock_Ip_SetSirc_TrustedCall+0x114>)
    295e:	f003 0301 	and.w	r3, r3, #1
    2962:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2966:	4b21      	ldr	r3, [pc, #132]	; (29ec <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2968:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    296c:	4a1f      	ldr	r2, [pc, #124]	; (29ec <Clock_Ip_SetSirc_TrustedCall+0x114>)
    296e:	f043 0301 	orr.w	r3, r3, #1
    2972:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    2976:	4b1d      	ldr	r3, [pc, #116]	; (29ec <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2978:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    297c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2980:	009b      	lsls	r3, r3, #2
    2982:	f003 0304 	and.w	r3, r3, #4
    2986:	4919      	ldr	r1, [pc, #100]	; (29ec <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2988:	4313      	orrs	r3, r2
    298a:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    298e:	aa05      	add	r2, sp, #20
    2990:	a906      	add	r1, sp, #24
    2992:	a807      	add	r0, sp, #28
    2994:	f24c 3350 	movw	r3, #50000	; 0xc350
    2998:	f7ff f8f8 	bl	1b8c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    299c:	4b13      	ldr	r3, [pc, #76]	; (29ec <Clock_Ip_SetSirc_TrustedCall+0x114>)
    299e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    29a2:	0e1b      	lsrs	r3, r3, #24
    29a4:	f003 0301 	and.w	r3, r3, #1
    29a8:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    29aa:	9a05      	ldr	r2, [sp, #20]
    29ac:	a906      	add	r1, sp, #24
    29ae:	ab07      	add	r3, sp, #28
    29b0:	4618      	mov	r0, r3
    29b2:	f7ff f905 	bl	1bc0 <Clock_Ip_TimeoutExpired>
    29b6:	4603      	mov	r3, r0
    29b8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    29bc:	9b08      	ldr	r3, [sp, #32]
    29be:	2b00      	cmp	r3, #0
    29c0:	d106      	bne.n	29d0 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    29c2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    29c6:	f083 0301 	eor.w	r3, r3, #1
    29ca:	b2db      	uxtb	r3, r3
    29cc:	2b00      	cmp	r3, #0
    29ce:	d1e5      	bne.n	299c <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    29d0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    29d4:	2b00      	cmp	r3, #0
    29d6:	d004      	beq.n	29e2 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    29d8:	9b02      	ldr	r3, [sp, #8]
    29da:	4619      	mov	r1, r3
    29dc:	2001      	movs	r0, #1
    29de:	f7ff f8c5 	bl	1b6c <Clock_Ip_ReportClockErrors>
        }
    }
}
    29e2:	bf00      	nop
    29e4:	b00b      	add	sp, #44	; 0x2c
    29e6:	f85d fb04 	ldr.w	pc, [sp], #4
    29ea:	bf00      	nop
    29ec:	40064000 	.word	0x40064000

000029f0 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    29f0:	b500      	push	{lr}
    29f2:	b089      	sub	sp, #36	; 0x24
    29f4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    29f6:	2300      	movs	r3, #0
    29f8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    29fc:	4b1f      	ldr	r3, [pc, #124]	; (2a7c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a02:	4a1e      	ldr	r2, [pc, #120]	; (2a7c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2a04:	f043 0301 	orr.w	r3, r3, #1
    2a08:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    2a0c:	4b1b      	ldr	r3, [pc, #108]	; (2a7c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2a0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a12:	4a1a      	ldr	r2, [pc, #104]	; (2a7c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2a14:	f043 0304 	orr.w	r3, r3, #4
    2a18:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2a1c:	aa03      	add	r2, sp, #12
    2a1e:	a904      	add	r1, sp, #16
    2a20:	a805      	add	r0, sp, #20
    2a22:	f24c 3350 	movw	r3, #50000	; 0xc350
    2a26:	f7ff f8b1 	bl	1b8c <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2a2a:	4b14      	ldr	r3, [pc, #80]	; (2a7c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2a2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a30:	0e1b      	lsrs	r3, r3, #24
    2a32:	f003 0301 	and.w	r3, r3, #1
    2a36:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2a38:	9a03      	ldr	r2, [sp, #12]
    2a3a:	a904      	add	r1, sp, #16
    2a3c:	ab05      	add	r3, sp, #20
    2a3e:	4618      	mov	r0, r3
    2a40:	f7ff f8be 	bl	1bc0 <Clock_Ip_TimeoutExpired>
    2a44:	4603      	mov	r3, r0
    2a46:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2a4a:	9b06      	ldr	r3, [sp, #24]
    2a4c:	2b00      	cmp	r3, #0
    2a4e:	d106      	bne.n	2a5e <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    2a50:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2a54:	f083 0301 	eor.w	r3, r3, #1
    2a58:	b2db      	uxtb	r3, r3
    2a5a:	2b00      	cmp	r3, #0
    2a5c:	d1e5      	bne.n	2a2a <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    2a5e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2a62:	2b00      	cmp	r3, #0
    2a64:	d005      	beq.n	2a72 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2a66:	9b01      	ldr	r3, [sp, #4]
    2a68:	681b      	ldr	r3, [r3, #0]
    2a6a:	4619      	mov	r1, r3
    2a6c:	2001      	movs	r0, #1
    2a6e:	f7ff f87d 	bl	1b6c <Clock_Ip_ReportClockErrors>
    }
}
    2a72:	bf00      	nop
    2a74:	b009      	add	sp, #36	; 0x24
    2a76:	f85d fb04 	ldr.w	pc, [sp], #4
    2a7a:	bf00      	nop
    2a7c:	40064000 	.word	0x40064000

00002a80 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    2a80:	b082      	sub	sp, #8
    2a82:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    2a84:	4b09      	ldr	r3, [pc, #36]	; (2aac <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a8a:	4a08      	ldr	r2, [pc, #32]	; (2aac <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a8c:	f023 0301 	bic.w	r3, r3, #1
    2a90:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2a94:	4b05      	ldr	r3, [pc, #20]	; (2aac <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a9a:	4a04      	ldr	r2, [pc, #16]	; (2aac <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a9c:	f023 0304 	bic.w	r3, r3, #4
    2aa0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2aa4:	bf00      	nop
    2aa6:	b002      	add	sp, #8
    2aa8:	4770      	bx	lr
    2aaa:	bf00      	nop
    2aac:	40064000 	.word	0x40064000

00002ab0 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2ab0:	b082      	sub	sp, #8
    2ab2:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2ab4:	4b0f      	ldr	r3, [pc, #60]	; (2af4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2ab6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2aba:	4a0e      	ldr	r2, [pc, #56]	; (2af4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2abc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2ac0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2ac4:	4b0b      	ldr	r3, [pc, #44]	; (2af4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2ac6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2aca:	4a0a      	ldr	r2, [pc, #40]	; (2af4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2acc:	f023 0304 	bic.w	r3, r3, #4
    2ad0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    2ad4:	4b07      	ldr	r3, [pc, #28]	; (2af4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2ad6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2ada:	9b01      	ldr	r3, [sp, #4]
    2adc:	7a1b      	ldrb	r3, [r3, #8]
    2ade:	009b      	lsls	r3, r3, #2
    2ae0:	f003 0304 	and.w	r3, r3, #4
    2ae4:	4903      	ldr	r1, [pc, #12]	; (2af4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2ae6:	4313      	orrs	r3, r2
    2ae8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    2aec:	bf00      	nop
    2aee:	b002      	add	sp, #8
    2af0:	4770      	bx	lr
    2af2:	bf00      	nop
    2af4:	40064000 	.word	0x40064000

00002af8 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2af8:	b082      	sub	sp, #8
    2afa:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2afc:	9b01      	ldr	r3, [sp, #4]
    2afe:	889b      	ldrh	r3, [r3, #4]
    2b00:	2b01      	cmp	r3, #1
    2b02:	d107      	bne.n	2b14 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    2b04:	4b05      	ldr	r3, [pc, #20]	; (2b1c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2b06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b0a:	4a04      	ldr	r2, [pc, #16]	; (2b1c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2b0c:	f043 0304 	orr.w	r3, r3, #4
    2b10:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    2b14:	bf00      	nop
    2b16:	b002      	add	sp, #8
    2b18:	4770      	bx	lr
    2b1a:	bf00      	nop
    2b1c:	40064000 	.word	0x40064000

00002b20 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    2b20:	b082      	sub	sp, #8
    2b22:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2b24:	4b05      	ldr	r3, [pc, #20]	; (2b3c <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2b26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b2a:	4a04      	ldr	r2, [pc, #16]	; (2b3c <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2b2c:	f023 0304 	bic.w	r3, r3, #4
    2b30:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2b34:	bf00      	nop
    2b36:	b002      	add	sp, #8
    2b38:	4770      	bx	lr
    2b3a:	bf00      	nop
    2b3c:	40064000 	.word	0x40064000

00002b40 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2b40:	b082      	sub	sp, #8
    2b42:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2b44:	4b0f      	ldr	r3, [pc, #60]	; (2b84 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b4a:	4a0e      	ldr	r2, [pc, #56]	; (2b84 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b4c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2b50:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    2b54:	4b0b      	ldr	r3, [pc, #44]	; (2b84 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b5a:	4a0a      	ldr	r2, [pc, #40]	; (2b84 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b5c:	f023 0302 	bic.w	r3, r3, #2
    2b60:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    2b64:	4b07      	ldr	r3, [pc, #28]	; (2b84 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b66:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2b6a:	9b01      	ldr	r3, [sp, #4]
    2b6c:	7a5b      	ldrb	r3, [r3, #9]
    2b6e:	005b      	lsls	r3, r3, #1
    2b70:	f003 0302 	and.w	r3, r3, #2
    2b74:	4903      	ldr	r1, [pc, #12]	; (2b84 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b76:	4313      	orrs	r3, r2
    2b78:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    2b7c:	bf00      	nop
    2b7e:	b002      	add	sp, #8
    2b80:	4770      	bx	lr
    2b82:	bf00      	nop
    2b84:	40064000 	.word	0x40064000

00002b88 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2b88:	b082      	sub	sp, #8
    2b8a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2b8c:	9b01      	ldr	r3, [sp, #4]
    2b8e:	889b      	ldrh	r3, [r3, #4]
    2b90:	2b01      	cmp	r3, #1
    2b92:	d107      	bne.n	2ba4 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    2b94:	4b05      	ldr	r3, [pc, #20]	; (2bac <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2b96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b9a:	4a04      	ldr	r2, [pc, #16]	; (2bac <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2b9c:	f043 0302 	orr.w	r3, r3, #2
    2ba0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    2ba4:	bf00      	nop
    2ba6:	b002      	add	sp, #8
    2ba8:	4770      	bx	lr
    2baa:	bf00      	nop
    2bac:	40064000 	.word	0x40064000

00002bb0 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    2bb0:	b082      	sub	sp, #8
    2bb2:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    2bb4:	4b05      	ldr	r3, [pc, #20]	; (2bcc <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    2bb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2bba:	4a04      	ldr	r2, [pc, #16]	; (2bcc <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    2bbc:	f023 0302 	bic.w	r3, r3, #2
    2bc0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2bc4:	bf00      	nop
    2bc6:	b002      	add	sp, #8
    2bc8:	4770      	bx	lr
    2bca:	bf00      	nop
    2bcc:	40064000 	.word	0x40064000

00002bd0 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2bd0:	b500      	push	{lr}
    2bd2:	b08b      	sub	sp, #44	; 0x2c
    2bd4:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2bd6:	9b01      	ldr	r3, [sp, #4]
    2bd8:	681a      	ldr	r2, [r3, #0]
    2bda:	4975      	ldr	r1, [pc, #468]	; (2db0 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    2bdc:	4613      	mov	r3, r2
    2bde:	00db      	lsls	r3, r3, #3
    2be0:	4413      	add	r3, r2
    2be2:	440b      	add	r3, r1
    2be4:	781b      	ldrb	r3, [r3, #0]
    2be6:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    2be8:	2300      	movs	r3, #0
    2bea:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    2bee:	2300      	movs	r3, #0
    2bf0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    2bf4:	4b6f      	ldr	r3, [pc, #444]	; (2db4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2bf6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2bfa:	4a6e      	ldr	r2, [pc, #440]	; (2db4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2bfc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2c00:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    2c04:	4b6b      	ldr	r3, [pc, #428]	; (2db4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    2c0e:	2b00      	cmp	r3, #0
    2c10:	d07d      	beq.n	2d0e <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    2c12:	9b01      	ldr	r3, [sp, #4]
    2c14:	79db      	ldrb	r3, [r3, #7]
    2c16:	461a      	mov	r2, r3
    2c18:	4b66      	ldr	r3, [pc, #408]	; (2db4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c1a:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    2c1e:	f003 0303 	and.w	r3, r3, #3
    2c22:	429a      	cmp	r2, r3
    2c24:	d10b      	bne.n	2c3e <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    2c26:	9b01      	ldr	r3, [sp, #4]
    2c28:	799b      	ldrb	r3, [r3, #6]
    2c2a:	461a      	mov	r2, r3
    2c2c:	4b61      	ldr	r3, [pc, #388]	; (2db4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c32:	08db      	lsrs	r3, r3, #3
    2c34:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    2c38:	429a      	cmp	r2, r3
    2c3a:	f000 80b4 	beq.w	2da6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    2c3e:	4b5d      	ldr	r3, [pc, #372]	; (2db4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2c44:	f003 0301 	and.w	r3, r3, #1
    2c48:	2b00      	cmp	r3, #0
    2c4a:	d105      	bne.n	2c58 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    2c4c:	2301      	movs	r3, #1
    2c4e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    2c52:	2000      	movs	r0, #0
    2c54:	f7ff fd66 	bl	2724 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    2c58:	2002      	movs	r0, #2
    2c5a:	f7ff fdcf 	bl	27fc <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    2c5e:	4b55      	ldr	r3, [pc, #340]	; (2db4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c60:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c64:	4a53      	ldr	r2, [pc, #332]	; (2db4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c66:	f023 0301 	bic.w	r3, r3, #1
    2c6a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    2c6e:	9b01      	ldr	r3, [sp, #4]
    2c70:	889b      	ldrh	r3, [r3, #4]
    2c72:	2b01      	cmp	r3, #1
    2c74:	f040 8097 	bne.w	2da6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    2c78:	9b01      	ldr	r3, [sp, #4]
    2c7a:	79db      	ldrb	r3, [r3, #7]
    2c7c:	4a4d      	ldr	r2, [pc, #308]	; (2db4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c7e:	f003 0303 	and.w	r3, r3, #3
    2c82:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    2c86:	4b4b      	ldr	r3, [pc, #300]	; (2db4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c88:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    2c8c:	9b01      	ldr	r3, [sp, #4]
    2c8e:	799b      	ldrb	r3, [r3, #6]
    2c90:	00db      	lsls	r3, r3, #3
    2c92:	f003 0308 	and.w	r3, r3, #8
    2c96:	4313      	orrs	r3, r2
    2c98:	4a46      	ldr	r2, [pc, #280]	; (2db4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c9a:	f043 0301 	orr.w	r3, r3, #1
    2c9e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2ca2:	aa03      	add	r2, sp, #12
    2ca4:	a904      	add	r1, sp, #16
    2ca6:	a805      	add	r0, sp, #20
    2ca8:	f24c 3350 	movw	r3, #50000	; 0xc350
    2cac:	f7fe ff6e 	bl	1b8c <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    2cb0:	4b40      	ldr	r3, [pc, #256]	; (2db4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cb2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2cb6:	0e1b      	lsrs	r3, r3, #24
    2cb8:	f003 0301 	and.w	r3, r3, #1
    2cbc:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2cbe:	9a03      	ldr	r2, [sp, #12]
    2cc0:	a904      	add	r1, sp, #16
    2cc2:	ab05      	add	r3, sp, #20
    2cc4:	4618      	mov	r0, r3
    2cc6:	f7fe ff7b 	bl	1bc0 <Clock_Ip_TimeoutExpired>
    2cca:	4603      	mov	r3, r0
    2ccc:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2cd0:	9b06      	ldr	r3, [sp, #24]
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d106      	bne.n	2ce4 <Clock_Ip_SetFirc_TrustedCall+0x114>
    2cd6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2cda:	f083 0301 	eor.w	r3, r3, #1
    2cde:	b2db      	uxtb	r3, r3
    2ce0:	2b00      	cmp	r3, #0
    2ce2:	d1e5      	bne.n	2cb0 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    2ce4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2ce8:	2b00      	cmp	r3, #0
    2cea:	d005      	beq.n	2cf8 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2cec:	9b01      	ldr	r3, [sp, #4]
    2cee:	681b      	ldr	r3, [r3, #0]
    2cf0:	4619      	mov	r1, r3
    2cf2:	2001      	movs	r0, #1
    2cf4:	f7fe ff3a 	bl	1b6c <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    2cf8:	2003      	movs	r0, #3
    2cfa:	f7ff fd7f 	bl	27fc <SetInputSouceSytemClock>

                if (SircWasDisabled)
    2cfe:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2d02:	2b00      	cmp	r3, #0
    2d04:	d04f      	beq.n	2da6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    2d06:	2002      	movs	r0, #2
    2d08:	f7ff fd26 	bl	2758 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    2d0c:	e04b      	b.n	2da6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    2d0e:	4b29      	ldr	r3, [pc, #164]	; (2db4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d10:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2d14:	4a27      	ldr	r2, [pc, #156]	; (2db4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d16:	f023 0301 	bic.w	r3, r3, #1
    2d1a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    2d1e:	9b01      	ldr	r3, [sp, #4]
    2d20:	889b      	ldrh	r3, [r3, #4]
    2d22:	2b01      	cmp	r3, #1
    2d24:	d13f      	bne.n	2da6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    2d26:	9b01      	ldr	r3, [sp, #4]
    2d28:	79db      	ldrb	r3, [r3, #7]
    2d2a:	4a22      	ldr	r2, [pc, #136]	; (2db4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d2c:	f003 0303 	and.w	r3, r3, #3
    2d30:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    2d34:	4b1f      	ldr	r3, [pc, #124]	; (2db4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d36:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    2d3a:	9b01      	ldr	r3, [sp, #4]
    2d3c:	799b      	ldrb	r3, [r3, #6]
    2d3e:	00db      	lsls	r3, r3, #3
    2d40:	f003 0308 	and.w	r3, r3, #8
    2d44:	4313      	orrs	r3, r2
    2d46:	4a1b      	ldr	r2, [pc, #108]	; (2db4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d48:	f043 0301 	orr.w	r3, r3, #1
    2d4c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2d50:	aa03      	add	r2, sp, #12
    2d52:	a904      	add	r1, sp, #16
    2d54:	a805      	add	r0, sp, #20
    2d56:	f24c 3350 	movw	r3, #50000	; 0xc350
    2d5a:	f7fe ff17 	bl	1b8c <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    2d5e:	4b15      	ldr	r3, [pc, #84]	; (2db4 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d60:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2d64:	0e1b      	lsrs	r3, r3, #24
    2d66:	f003 0301 	and.w	r3, r3, #1
    2d6a:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2d6c:	9a03      	ldr	r2, [sp, #12]
    2d6e:	a904      	add	r1, sp, #16
    2d70:	ab05      	add	r3, sp, #20
    2d72:	4618      	mov	r0, r3
    2d74:	f7fe ff24 	bl	1bc0 <Clock_Ip_TimeoutExpired>
    2d78:	4603      	mov	r3, r0
    2d7a:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2d7e:	9b06      	ldr	r3, [sp, #24]
    2d80:	2b00      	cmp	r3, #0
    2d82:	d106      	bne.n	2d92 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    2d84:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2d88:	f083 0301 	eor.w	r3, r3, #1
    2d8c:	b2db      	uxtb	r3, r3
    2d8e:	2b00      	cmp	r3, #0
    2d90:	d1e5      	bne.n	2d5e <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    2d92:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2d96:	2b00      	cmp	r3, #0
    2d98:	d005      	beq.n	2da6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2d9a:	9b01      	ldr	r3, [sp, #4]
    2d9c:	681b      	ldr	r3, [r3, #0]
    2d9e:	4619      	mov	r1, r3
    2da0:	2001      	movs	r0, #1
    2da2:	f7fe fee3 	bl	1b6c <Clock_Ip_ReportClockErrors>
}
    2da6:	bf00      	nop
    2da8:	b00b      	add	sp, #44	; 0x2c
    2daa:	f85d fb04 	ldr.w	pc, [sp], #4
    2dae:	bf00      	nop
    2db0:	00007228 	.word	0x00007228
    2db4:	40064000 	.word	0x40064000

00002db8 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2db8:	b500      	push	{lr}
    2dba:	b089      	sub	sp, #36	; 0x24
    2dbc:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2dbe:	2300      	movs	r3, #0
    2dc0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    2dc4:	9b01      	ldr	r3, [sp, #4]
    2dc6:	889b      	ldrh	r3, [r3, #4]
    2dc8:	2b01      	cmp	r3, #1
    2dca:	d132      	bne.n	2e32 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    2dcc:	4b1b      	ldr	r3, [pc, #108]	; (2e3c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2dce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2dd2:	4a1a      	ldr	r2, [pc, #104]	; (2e3c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2dd4:	f043 0301 	orr.w	r3, r3, #1
    2dd8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2ddc:	aa03      	add	r2, sp, #12
    2dde:	a904      	add	r1, sp, #16
    2de0:	a805      	add	r0, sp, #20
    2de2:	f24c 3350 	movw	r3, #50000	; 0xc350
    2de6:	f7fe fed1 	bl	1b8c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    2dea:	4b14      	ldr	r3, [pc, #80]	; (2e3c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2dec:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2df0:	0e1b      	lsrs	r3, r3, #24
    2df2:	f003 0301 	and.w	r3, r3, #1
    2df6:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2df8:	9a03      	ldr	r2, [sp, #12]
    2dfa:	a904      	add	r1, sp, #16
    2dfc:	ab05      	add	r3, sp, #20
    2dfe:	4618      	mov	r0, r3
    2e00:	f7fe fede 	bl	1bc0 <Clock_Ip_TimeoutExpired>
    2e04:	4603      	mov	r3, r0
    2e06:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2e0a:	9b06      	ldr	r3, [sp, #24]
    2e0c:	2b00      	cmp	r3, #0
    2e0e:	d106      	bne.n	2e1e <Clock_Ip_EnableFirc_TrustedCall+0x66>
    2e10:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e14:	f083 0301 	eor.w	r3, r3, #1
    2e18:	b2db      	uxtb	r3, r3
    2e1a:	2b00      	cmp	r3, #0
    2e1c:	d1e5      	bne.n	2dea <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    2e1e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e22:	2b00      	cmp	r3, #0
    2e24:	d005      	beq.n	2e32 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2e26:	9b01      	ldr	r3, [sp, #4]
    2e28:	681b      	ldr	r3, [r3, #0]
    2e2a:	4619      	mov	r1, r3
    2e2c:	2001      	movs	r0, #1
    2e2e:	f7fe fe9d 	bl	1b6c <Clock_Ip_ReportClockErrors>
        }
    }
}
    2e32:	bf00      	nop
    2e34:	b009      	add	sp, #36	; 0x24
    2e36:	f85d fb04 	ldr.w	pc, [sp], #4
    2e3a:	bf00      	nop
    2e3c:	40064000 	.word	0x40064000

00002e40 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    2e40:	b082      	sub	sp, #8
    2e42:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    2e44:	4b05      	ldr	r3, [pc, #20]	; (2e5c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    2e46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2e4a:	4a04      	ldr	r2, [pc, #16]	; (2e5c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    2e4c:	f023 0301 	bic.w	r3, r3, #1
    2e50:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    2e54:	bf00      	nop
    2e56:	b002      	add	sp, #8
    2e58:	4770      	bx	lr
    2e5a:	bf00      	nop
    2e5c:	40064000 	.word	0x40064000

00002e60 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    2e60:	b082      	sub	sp, #8
    2e62:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2e64:	bf00      	nop
    2e66:	b002      	add	sp, #8
    2e68:	4770      	bx	lr

00002e6a <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    2e6a:	b082      	sub	sp, #8
    2e6c:	9001      	str	r0, [sp, #4]
    2e6e:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    2e70:	bf00      	nop
    2e72:	b002      	add	sp, #8
    2e74:	4770      	bx	lr

00002e76 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    2e76:	b082      	sub	sp, #8
    2e78:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2e7a:	bf00      	nop
    2e7c:	b002      	add	sp, #8
    2e7e:	4770      	bx	lr

00002e80 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    2e80:	b082      	sub	sp, #8
    2e82:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2e84:	bf00      	nop
    2e86:	b002      	add	sp, #8
    2e88:	4770      	bx	lr

00002e8a <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    2e8a:	b082      	sub	sp, #8
    2e8c:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    2e8e:	2302      	movs	r3, #2
}
    2e90:	4618      	mov	r0, r3
    2e92:	b002      	add	sp, #8
    2e94:	4770      	bx	lr

00002e96 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    2e96:	b082      	sub	sp, #8
    2e98:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    2e9a:	bf00      	nop
    2e9c:	b002      	add	sp, #8
    2e9e:	4770      	bx	lr

00002ea0 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    2ea0:	b500      	push	{lr}
    2ea2:	b083      	sub	sp, #12
    2ea4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ea6:	9b01      	ldr	r3, [sp, #4]
    2ea8:	2b00      	cmp	r3, #0
    2eaa:	d002      	beq.n	2eb2 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    2eac:	9801      	ldr	r0, [sp, #4]
    2eae:	f000 f870 	bl	2f92 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2eb2:	bf00      	nop
    2eb4:	b003      	add	sp, #12
    2eb6:	f85d fb04 	ldr.w	pc, [sp], #4

00002eba <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    2eba:	b500      	push	{lr}
    2ebc:	b083      	sub	sp, #12
    2ebe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ec0:	9b01      	ldr	r3, [sp, #4]
    2ec2:	2b00      	cmp	r3, #0
    2ec4:	d002      	beq.n	2ecc <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    2ec6:	9801      	ldr	r0, [sp, #4]
    2ec8:	f000 f89a 	bl	3000 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ecc:	bf00      	nop
    2ece:	b003      	add	sp, #12
    2ed0:	f85d fb04 	ldr.w	pc, [sp], #4

00002ed4 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    2ed4:	b500      	push	{lr}
    2ed6:	b089      	sub	sp, #36	; 0x24
    2ed8:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    2eda:	2301      	movs	r3, #1
    2edc:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    2ede:	2300      	movs	r3, #0
    2ee0:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    2ee4:	4b1e      	ldr	r3, [pc, #120]	; (2f60 <Clock_Ip_CompleteSpll+0x8c>)
    2ee6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2eea:	f003 0301 	and.w	r3, r3, #1
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d02f      	beq.n	2f52 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2ef2:	aa02      	add	r2, sp, #8
    2ef4:	a903      	add	r1, sp, #12
    2ef6:	a804      	add	r0, sp, #16
    2ef8:	f24c 3350 	movw	r3, #50000	; 0xc350
    2efc:	f7fe fe46 	bl	1b8c <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    2f00:	4b17      	ldr	r3, [pc, #92]	; (2f60 <Clock_Ip_CompleteSpll+0x8c>)
    2f02:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f06:	0e1b      	lsrs	r3, r3, #24
    2f08:	f003 0301 	and.w	r3, r3, #1
    2f0c:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2f0e:	9a02      	ldr	r2, [sp, #8]
    2f10:	a903      	add	r1, sp, #12
    2f12:	ab04      	add	r3, sp, #16
    2f14:	4618      	mov	r0, r3
    2f16:	f7fe fe53 	bl	1bc0 <Clock_Ip_TimeoutExpired>
    2f1a:	4603      	mov	r3, r0
    2f1c:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    2f20:	9b05      	ldr	r3, [sp, #20]
    2f22:	2b00      	cmp	r3, #0
    2f24:	d106      	bne.n	2f34 <Clock_Ip_CompleteSpll+0x60>
    2f26:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2f2a:	f083 0301 	eor.w	r3, r3, #1
    2f2e:	b2db      	uxtb	r3, r3
    2f30:	2b00      	cmp	r3, #0
    2f32:	d1e5      	bne.n	2f00 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    2f34:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2f38:	f083 0301 	eor.w	r3, r3, #1
    2f3c:	b2db      	uxtb	r3, r3
    2f3e:	2b00      	cmp	r3, #0
    2f40:	d002      	beq.n	2f48 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    2f42:	2302      	movs	r3, #2
    2f44:	9307      	str	r3, [sp, #28]
    2f46:	e006      	b.n	2f56 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    2f48:	9901      	ldr	r1, [sp, #4]
    2f4a:	2001      	movs	r0, #1
    2f4c:	f7fe fe0e 	bl	1b6c <Clock_Ip_ReportClockErrors>
    2f50:	e001      	b.n	2f56 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    2f52:	2300      	movs	r3, #0
    2f54:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    2f56:	9b07      	ldr	r3, [sp, #28]
}
    2f58:	4618      	mov	r0, r3
    2f5a:	b009      	add	sp, #36	; 0x24
    2f5c:	f85d fb04 	ldr.w	pc, [sp], #4
    2f60:	40064000 	.word	0x40064000

00002f64 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    2f64:	b500      	push	{lr}
    2f66:	b083      	sub	sp, #12
    2f68:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    2f6a:	9801      	ldr	r0, [sp, #4]
    2f6c:	f000 f886 	bl	307c <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2f70:	bf00      	nop
    2f72:	b003      	add	sp, #12
    2f74:	f85d fb04 	ldr.w	pc, [sp], #4

00002f78 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    2f78:	b500      	push	{lr}
    2f7a:	b083      	sub	sp, #12
    2f7c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f7e:	9b01      	ldr	r3, [sp, #4]
    2f80:	2b00      	cmp	r3, #0
    2f82:	d002      	beq.n	2f8a <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    2f84:	9801      	ldr	r0, [sp, #4]
    2f86:	f000 f891 	bl	30ac <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f8a:	bf00      	nop
    2f8c:	b003      	add	sp, #12
    2f8e:	f85d fb04 	ldr.w	pc, [sp], #4

00002f92 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    2f92:	b082      	sub	sp, #8
    2f94:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    2f96:	4b19      	ldr	r3, [pc, #100]	; (2ffc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f98:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f9c:	4a17      	ldr	r2, [pc, #92]	; (2ffc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2fa2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    2fa6:	4b15      	ldr	r3, [pc, #84]	; (2ffc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fa8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2fac:	4a13      	ldr	r2, [pc, #76]	; (2ffc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2fb2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    2fb6:	4b11      	ldr	r3, [pc, #68]	; (2ffc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fb8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2fbc:	4a0f      	ldr	r2, [pc, #60]	; (2ffc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fbe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    2fc2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    2fc6:	4b0d      	ldr	r3, [pc, #52]	; (2ffc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fc8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2fcc:	4a0b      	ldr	r2, [pc, #44]	; (2ffc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fce:	f023 0301 	bic.w	r3, r3, #1
    2fd2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    2fd6:	4b09      	ldr	r3, [pc, #36]	; (2ffc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fd8:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    2fdc:	4a07      	ldr	r2, [pc, #28]	; (2ffc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fde:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2fe2:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    2fe6:	4b05      	ldr	r3, [pc, #20]	; (2ffc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fe8:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    2fec:	4a03      	ldr	r2, [pc, #12]	; (2ffc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    2ff2:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    2ff6:	bf00      	nop
    2ff8:	b002      	add	sp, #8
    2ffa:	4770      	bx	lr
    2ffc:	40064000 	.word	0x40064000

00003000 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3000:	b082      	sub	sp, #8
    3002:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3004:	9b01      	ldr	r3, [sp, #4]
    3006:	889b      	ldrh	r3, [r3, #4]
    3008:	2b01      	cmp	r3, #1
    300a:	d12f      	bne.n	306c <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    300c:	4b1a      	ldr	r3, [pc, #104]	; (3078 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    300e:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    3012:	9b01      	ldr	r3, [sp, #4]
    3014:	7b5b      	ldrb	r3, [r3, #13]
    3016:	3b01      	subs	r3, #1
    3018:	021b      	lsls	r3, r3, #8
    301a:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    301e:	9b01      	ldr	r3, [sp, #4]
    3020:	7d1b      	ldrb	r3, [r3, #20]
    3022:	3b10      	subs	r3, #16
    3024:	041b      	lsls	r3, r3, #16
    3026:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    302a:	430b      	orrs	r3, r1
    302c:	4912      	ldr	r1, [pc, #72]	; (3078 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    302e:	4313      	orrs	r3, r2
    3030:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3034:	9b01      	ldr	r3, [sp, #4]
    3036:	7fdb      	ldrb	r3, [r3, #31]
    3038:	2b02      	cmp	r3, #2
    303a:	d011      	beq.n	3060 <Clock_Ip_SetSpll_TrustedCall+0x60>
    303c:	2b02      	cmp	r3, #2
    303e:	dc17      	bgt.n	3070 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3040:	2b00      	cmp	r3, #0
    3042:	d002      	beq.n	304a <Clock_Ip_SetSpll_TrustedCall+0x4a>
    3044:	2b01      	cmp	r3, #1
    3046:	d005      	beq.n	3054 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3048:	e012      	b.n	3070 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    304a:	4b0b      	ldr	r3, [pc, #44]	; (3078 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    304c:	2200      	movs	r2, #0
    304e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3052:	e00e      	b.n	3072 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3054:	4b08      	ldr	r3, [pc, #32]	; (3078 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3056:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    305a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    305e:	e008      	b.n	3072 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3060:	4b05      	ldr	r3, [pc, #20]	; (3078 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3062:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    3066:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    306a:	e002      	b.n	3072 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    306c:	bf00      	nop
    306e:	e000      	b.n	3072 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    3070:	bf00      	nop
}
    3072:	bf00      	nop
    3074:	b002      	add	sp, #8
    3076:	4770      	bx	lr
    3078:	40064000 	.word	0x40064000

0000307c <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    307c:	b082      	sub	sp, #8
    307e:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3080:	4b09      	ldr	r3, [pc, #36]	; (30a8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3082:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3086:	4a08      	ldr	r2, [pc, #32]	; (30a8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3088:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    308c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3090:	4b05      	ldr	r3, [pc, #20]	; (30a8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3092:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3096:	4a04      	ldr	r2, [pc, #16]	; (30a8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3098:	f023 0301 	bic.w	r3, r3, #1
    309c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    30a0:	bf00      	nop
    30a2:	b002      	add	sp, #8
    30a4:	4770      	bx	lr
    30a6:	bf00      	nop
    30a8:	40064000 	.word	0x40064000

000030ac <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    30ac:	b082      	sub	sp, #8
    30ae:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    30b0:	9b01      	ldr	r3, [sp, #4]
    30b2:	889b      	ldrh	r3, [r3, #4]
    30b4:	2b01      	cmp	r3, #1
    30b6:	d107      	bne.n	30c8 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    30b8:	4b05      	ldr	r3, [pc, #20]	; (30d0 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    30ba:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    30be:	4a04      	ldr	r2, [pc, #16]	; (30d0 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    30c0:	f043 0301 	orr.w	r3, r3, #1
    30c4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    30c8:	bf00      	nop
    30ca:	b002      	add	sp, #8
    30cc:	4770      	bx	lr
    30ce:	bf00      	nop
    30d0:	40064000 	.word	0x40064000

000030d4 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    30d4:	b082      	sub	sp, #8
    30d6:	9001      	str	r0, [sp, #4]
    30d8:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    30da:	bf00      	nop
    30dc:	b002      	add	sp, #8
    30de:	4770      	bx	lr

000030e0 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    30e0:	b082      	sub	sp, #8
    30e2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    30e4:	bf00      	nop
    30e6:	b002      	add	sp, #8
    30e8:	4770      	bx	lr

000030ea <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    30ea:	b500      	push	{lr}
    30ec:	b083      	sub	sp, #12
    30ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30f0:	9b01      	ldr	r3, [sp, #4]
    30f2:	2b00      	cmp	r3, #0
    30f4:	d002      	beq.n	30fc <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    30f6:	9801      	ldr	r0, [sp, #4]
    30f8:	f000 f8ee 	bl	32d8 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30fc:	bf00      	nop
    30fe:	b003      	add	sp, #12
    3100:	f85d fb04 	ldr.w	pc, [sp], #4

00003104 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3104:	b500      	push	{lr}
    3106:	b083      	sub	sp, #12
    3108:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    310a:	9b01      	ldr	r3, [sp, #4]
    310c:	2b00      	cmp	r3, #0
    310e:	d002      	beq.n	3116 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    3110:	9801      	ldr	r0, [sp, #4]
    3112:	f000 f8ff 	bl	3314 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3116:	bf00      	nop
    3118:	b003      	add	sp, #12
    311a:	f85d fb04 	ldr.w	pc, [sp], #4

0000311e <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    311e:	b500      	push	{lr}
    3120:	b083      	sub	sp, #12
    3122:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3124:	9b01      	ldr	r3, [sp, #4]
    3126:	2b00      	cmp	r3, #0
    3128:	d002      	beq.n	3130 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    312a:	9801      	ldr	r0, [sp, #4]
    312c:	f000 f912 	bl	3354 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3130:	bf00      	nop
    3132:	b003      	add	sp, #12
    3134:	f85d fb04 	ldr.w	pc, [sp], #4

00003138 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3138:	b500      	push	{lr}
    313a:	b083      	sub	sp, #12
    313c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    313e:	9b01      	ldr	r3, [sp, #4]
    3140:	2b00      	cmp	r3, #0
    3142:	d002      	beq.n	314a <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    3144:	9801      	ldr	r0, [sp, #4]
    3146:	f000 f925 	bl	3394 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    314a:	bf00      	nop
    314c:	b003      	add	sp, #12
    314e:	f85d fb04 	ldr.w	pc, [sp], #4

00003152 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3152:	b500      	push	{lr}
    3154:	b083      	sub	sp, #12
    3156:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3158:	9b01      	ldr	r3, [sp, #4]
    315a:	2b00      	cmp	r3, #0
    315c:	d002      	beq.n	3164 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    315e:	9801      	ldr	r0, [sp, #4]
    3160:	f000 f936 	bl	33d0 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3164:	bf00      	nop
    3166:	b003      	add	sp, #12
    3168:	f85d fb04 	ldr.w	pc, [sp], #4

0000316c <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    316c:	b500      	push	{lr}
    316e:	b083      	sub	sp, #12
    3170:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3172:	9b01      	ldr	r3, [sp, #4]
    3174:	2b00      	cmp	r3, #0
    3176:	d002      	beq.n	317e <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    3178:	9801      	ldr	r0, [sp, #4]
    317a:	f000 f949 	bl	3410 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    317e:	bf00      	nop
    3180:	b003      	add	sp, #12
    3182:	f85d fb04 	ldr.w	pc, [sp], #4

00003186 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3186:	b500      	push	{lr}
    3188:	b083      	sub	sp, #12
    318a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    318c:	9b01      	ldr	r3, [sp, #4]
    318e:	2b00      	cmp	r3, #0
    3190:	d002      	beq.n	3198 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    3192:	9801      	ldr	r0, [sp, #4]
    3194:	f000 f958 	bl	3448 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3198:	bf00      	nop
    319a:	b003      	add	sp, #12
    319c:	f85d fb04 	ldr.w	pc, [sp], #4

000031a0 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    31a0:	b500      	push	{lr}
    31a2:	b083      	sub	sp, #12
    31a4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31a6:	9b01      	ldr	r3, [sp, #4]
    31a8:	2b00      	cmp	r3, #0
    31aa:	d002      	beq.n	31b2 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    31ac:	9801      	ldr	r0, [sp, #4]
    31ae:	f000 f969 	bl	3484 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31b2:	bf00      	nop
    31b4:	b003      	add	sp, #12
    31b6:	f85d fb04 	ldr.w	pc, [sp], #4

000031ba <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    31ba:	b500      	push	{lr}
    31bc:	b083      	sub	sp, #12
    31be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31c0:	9b01      	ldr	r3, [sp, #4]
    31c2:	2b00      	cmp	r3, #0
    31c4:	d002      	beq.n	31cc <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    31c6:	9801      	ldr	r0, [sp, #4]
    31c8:	f000 f978 	bl	34bc <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31cc:	bf00      	nop
    31ce:	b003      	add	sp, #12
    31d0:	f85d fb04 	ldr.w	pc, [sp], #4

000031d4 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    31d4:	b500      	push	{lr}
    31d6:	b083      	sub	sp, #12
    31d8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31da:	9b01      	ldr	r3, [sp, #4]
    31dc:	2b00      	cmp	r3, #0
    31de:	d002      	beq.n	31e6 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    31e0:	9801      	ldr	r0, [sp, #4]
    31e2:	f000 f989 	bl	34f8 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31e6:	bf00      	nop
    31e8:	b003      	add	sp, #12
    31ea:	f85d fb04 	ldr.w	pc, [sp], #4

000031ee <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    31ee:	b500      	push	{lr}
    31f0:	b083      	sub	sp, #12
    31f2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31f4:	9b01      	ldr	r3, [sp, #4]
    31f6:	2b00      	cmp	r3, #0
    31f8:	d002      	beq.n	3200 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    31fa:	9801      	ldr	r0, [sp, #4]
    31fc:	f000 f998 	bl	3530 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3200:	bf00      	nop
    3202:	b003      	add	sp, #12
    3204:	f85d fb04 	ldr.w	pc, [sp], #4

00003208 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    3208:	b500      	push	{lr}
    320a:	b083      	sub	sp, #12
    320c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    320e:	9b01      	ldr	r3, [sp, #4]
    3210:	2b00      	cmp	r3, #0
    3212:	d002      	beq.n	321a <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    3214:	9801      	ldr	r0, [sp, #4]
    3216:	f000 f9a9 	bl	356c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    321a:	bf00      	nop
    321c:	b003      	add	sp, #12
    321e:	f85d fb04 	ldr.w	pc, [sp], #4

00003222 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    3222:	b500      	push	{lr}
    3224:	b083      	sub	sp, #12
    3226:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3228:	9b01      	ldr	r3, [sp, #4]
    322a:	2b00      	cmp	r3, #0
    322c:	d002      	beq.n	3234 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    322e:	9801      	ldr	r0, [sp, #4]
    3230:	f000 f9e6 	bl	3600 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3234:	bf00      	nop
    3236:	b003      	add	sp, #12
    3238:	f85d fb04 	ldr.w	pc, [sp], #4

0000323c <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    323c:	b500      	push	{lr}
    323e:	b083      	sub	sp, #12
    3240:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3242:	9b01      	ldr	r3, [sp, #4]
    3244:	2b00      	cmp	r3, #0
    3246:	d002      	beq.n	324e <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    3248:	9801      	ldr	r0, [sp, #4]
    324a:	f000 fa25 	bl	3698 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    324e:	bf00      	nop
    3250:	b003      	add	sp, #12
    3252:	f85d fb04 	ldr.w	pc, [sp], #4

00003256 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3256:	b500      	push	{lr}
    3258:	b083      	sub	sp, #12
    325a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    325c:	9b01      	ldr	r3, [sp, #4]
    325e:	2b00      	cmp	r3, #0
    3260:	d002      	beq.n	3268 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    3262:	9801      	ldr	r0, [sp, #4]
    3264:	f000 fa2a 	bl	36bc <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3268:	bf00      	nop
    326a:	b003      	add	sp, #12
    326c:	f85d fb04 	ldr.w	pc, [sp], #4

00003270 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3270:	b500      	push	{lr}
    3272:	b083      	sub	sp, #12
    3274:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3276:	9b01      	ldr	r3, [sp, #4]
    3278:	2b00      	cmp	r3, #0
    327a:	d002      	beq.n	3282 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    327c:	9801      	ldr	r0, [sp, #4]
    327e:	f000 fa3b 	bl	36f8 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3282:	bf00      	nop
    3284:	b003      	add	sp, #12
    3286:	f85d fb04 	ldr.w	pc, [sp], #4

0000328a <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    328a:	b500      	push	{lr}
    328c:	b083      	sub	sp, #12
    328e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3290:	9b01      	ldr	r3, [sp, #4]
    3292:	2b00      	cmp	r3, #0
    3294:	d002      	beq.n	329c <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    3296:	9801      	ldr	r0, [sp, #4]
    3298:	f000 fa56 	bl	3748 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    329c:	bf00      	nop
    329e:	b003      	add	sp, #12
    32a0:	f85d fb04 	ldr.w	pc, [sp], #4

000032a4 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    32a4:	b500      	push	{lr}
    32a6:	b083      	sub	sp, #12
    32a8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32aa:	9b01      	ldr	r3, [sp, #4]
    32ac:	2b00      	cmp	r3, #0
    32ae:	d002      	beq.n	32b6 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    32b0:	9801      	ldr	r0, [sp, #4]
    32b2:	f000 fa79 	bl	37a8 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32b6:	bf00      	nop
    32b8:	b003      	add	sp, #12
    32ba:	f85d fb04 	ldr.w	pc, [sp], #4

000032be <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    32be:	b500      	push	{lr}
    32c0:	b083      	sub	sp, #12
    32c2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32c4:	9b01      	ldr	r3, [sp, #4]
    32c6:	2b00      	cmp	r3, #0
    32c8:	d002      	beq.n	32d0 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    32ca:	9801      	ldr	r0, [sp, #4]
    32cc:	f000 fa8a 	bl	37e4 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32d0:	bf00      	nop
    32d2:	b003      	add	sp, #12
    32d4:	f85d fb04 	ldr.w	pc, [sp], #4

000032d8 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    32d8:	b084      	sub	sp, #16
    32da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    32dc:	4b0b      	ldr	r3, [pc, #44]	; (330c <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    32de:	795b      	ldrb	r3, [r3, #5]
    32e0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    32e2:	4b0b      	ldr	r3, [pc, #44]	; (3310 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    32e4:	695b      	ldr	r3, [r3, #20]
    32e6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    32e8:	9b02      	ldr	r3, [sp, #8]
    32ea:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    32ee:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    32f0:	9b03      	ldr	r3, [sp, #12]
    32f2:	061b      	lsls	r3, r3, #24
    32f4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    32f8:	9a02      	ldr	r2, [sp, #8]
    32fa:	4313      	orrs	r3, r2
    32fc:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    32fe:	4a04      	ldr	r2, [pc, #16]	; (3310 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    3300:	9b02      	ldr	r3, [sp, #8]
    3302:	6153      	str	r3, [r2, #20]
}
    3304:	bf00      	nop
    3306:	b004      	add	sp, #16
    3308:	4770      	bx	lr
    330a:	bf00      	nop
    330c:	00007590 	.word	0x00007590
    3310:	40064000 	.word	0x40064000

00003314 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3314:	b084      	sub	sp, #16
    3316:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3318:	9b01      	ldr	r3, [sp, #4]
    331a:	685b      	ldr	r3, [r3, #4]
    331c:	4a0b      	ldr	r2, [pc, #44]	; (334c <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    331e:	5cd3      	ldrb	r3, [r2, r3]
    3320:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    3322:	4b0b      	ldr	r3, [pc, #44]	; (3350 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3324:	695b      	ldr	r3, [r3, #20]
    3326:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3328:	9b02      	ldr	r3, [sp, #8]
    332a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    332e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3330:	9b03      	ldr	r3, [sp, #12]
    3332:	061b      	lsls	r3, r3, #24
    3334:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3338:	9a02      	ldr	r2, [sp, #8]
    333a:	4313      	orrs	r3, r2
    333c:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    333e:	4a04      	ldr	r2, [pc, #16]	; (3350 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3340:	9b02      	ldr	r3, [sp, #8]
    3342:	6153      	str	r3, [r2, #20]
}
    3344:	bf00      	nop
    3346:	b004      	add	sp, #16
    3348:	4770      	bx	lr
    334a:	bf00      	nop
    334c:	00007590 	.word	0x00007590
    3350:	40064000 	.word	0x40064000

00003354 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3354:	b084      	sub	sp, #16
    3356:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3358:	9b01      	ldr	r3, [sp, #4]
    335a:	685b      	ldr	r3, [r3, #4]
    335c:	4a0b      	ldr	r2, [pc, #44]	; (338c <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    335e:	5cd3      	ldrb	r3, [r2, r3]
    3360:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    3362:	4b0b      	ldr	r3, [pc, #44]	; (3390 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3364:	699b      	ldr	r3, [r3, #24]
    3366:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    3368:	9b02      	ldr	r3, [sp, #8]
    336a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    336e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    3370:	9b03      	ldr	r3, [sp, #12]
    3372:	061b      	lsls	r3, r3, #24
    3374:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3378:	9a02      	ldr	r2, [sp, #8]
    337a:	4313      	orrs	r3, r2
    337c:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    337e:	4a04      	ldr	r2, [pc, #16]	; (3390 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3380:	9b02      	ldr	r3, [sp, #8]
    3382:	6193      	str	r3, [r2, #24]
}
    3384:	bf00      	nop
    3386:	b004      	add	sp, #16
    3388:	4770      	bx	lr
    338a:	bf00      	nop
    338c:	00007590 	.word	0x00007590
    3390:	40064000 	.word	0x40064000

00003394 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3394:	b084      	sub	sp, #16
    3396:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3398:	4b0b      	ldr	r3, [pc, #44]	; (33c8 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    339a:	795b      	ldrb	r3, [r3, #5]
    339c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    339e:	4b0b      	ldr	r3, [pc, #44]	; (33cc <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    33a0:	69db      	ldr	r3, [r3, #28]
    33a2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    33a4:	9b02      	ldr	r3, [sp, #8]
    33a6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    33aa:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    33ac:	9b03      	ldr	r3, [sp, #12]
    33ae:	061b      	lsls	r3, r3, #24
    33b0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    33b4:	9a02      	ldr	r2, [sp, #8]
    33b6:	4313      	orrs	r3, r2
    33b8:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    33ba:	4a04      	ldr	r2, [pc, #16]	; (33cc <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    33bc:	9b02      	ldr	r3, [sp, #8]
    33be:	61d3      	str	r3, [r2, #28]
}
    33c0:	bf00      	nop
    33c2:	b004      	add	sp, #16
    33c4:	4770      	bx	lr
    33c6:	bf00      	nop
    33c8:	00007590 	.word	0x00007590
    33cc:	40064000 	.word	0x40064000

000033d0 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    33d0:	b084      	sub	sp, #16
    33d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    33d4:	9b01      	ldr	r3, [sp, #4]
    33d6:	685b      	ldr	r3, [r3, #4]
    33d8:	4a0b      	ldr	r2, [pc, #44]	; (3408 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    33da:	5cd3      	ldrb	r3, [r2, r3]
    33dc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    33de:	4b0b      	ldr	r3, [pc, #44]	; (340c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    33e0:	69db      	ldr	r3, [r3, #28]
    33e2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    33e4:	9b02      	ldr	r3, [sp, #8]
    33e6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    33ea:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    33ec:	9b03      	ldr	r3, [sp, #12]
    33ee:	061b      	lsls	r3, r3, #24
    33f0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    33f4:	9a02      	ldr	r2, [sp, #8]
    33f6:	4313      	orrs	r3, r2
    33f8:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    33fa:	4a04      	ldr	r2, [pc, #16]	; (340c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    33fc:	9b02      	ldr	r3, [sp, #8]
    33fe:	61d3      	str	r3, [r2, #28]
}
    3400:	bf00      	nop
    3402:	b004      	add	sp, #16
    3404:	4770      	bx	lr
    3406:	bf00      	nop
    3408:	00007590 	.word	0x00007590
    340c:	40064000 	.word	0x40064000

00003410 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3410:	b084      	sub	sp, #16
    3412:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3414:	4b0a      	ldr	r3, [pc, #40]	; (3440 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    3416:	7b9b      	ldrb	r3, [r3, #14]
    3418:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    341a:	4b0a      	ldr	r3, [pc, #40]	; (3444 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    341c:	691b      	ldr	r3, [r3, #16]
    341e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3420:	9b02      	ldr	r3, [sp, #8]
    3422:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3426:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3428:	9b03      	ldr	r3, [sp, #12]
    342a:	011b      	lsls	r3, r3, #4
    342c:	9a02      	ldr	r2, [sp, #8]
    342e:	4313      	orrs	r3, r2
    3430:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3432:	4a04      	ldr	r2, [pc, #16]	; (3444 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3434:	9b02      	ldr	r3, [sp, #8]
    3436:	6113      	str	r3, [r2, #16]
}
    3438:	bf00      	nop
    343a:	b004      	add	sp, #16
    343c:	4770      	bx	lr
    343e:	bf00      	nop
    3440:	00007538 	.word	0x00007538
    3444:	40048000 	.word	0x40048000

00003448 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3448:	b084      	sub	sp, #16
    344a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    344c:	9b01      	ldr	r3, [sp, #4]
    344e:	685b      	ldr	r3, [r3, #4]
    3450:	4a0a      	ldr	r2, [pc, #40]	; (347c <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    3452:	5cd3      	ldrb	r3, [r2, r3]
    3454:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    3456:	4b0a      	ldr	r3, [pc, #40]	; (3480 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3458:	691b      	ldr	r3, [r3, #16]
    345a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    345c:	9b02      	ldr	r3, [sp, #8]
    345e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3462:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3464:	9b03      	ldr	r3, [sp, #12]
    3466:	011b      	lsls	r3, r3, #4
    3468:	9a02      	ldr	r2, [sp, #8]
    346a:	4313      	orrs	r3, r2
    346c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    346e:	4a04      	ldr	r2, [pc, #16]	; (3480 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3470:	9b02      	ldr	r3, [sp, #8]
    3472:	6113      	str	r3, [r2, #16]
}
    3474:	bf00      	nop
    3476:	b004      	add	sp, #16
    3478:	4770      	bx	lr
    347a:	bf00      	nop
    347c:	00007538 	.word	0x00007538
    3480:	40048000 	.word	0x40048000

00003484 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3484:	b084      	sub	sp, #16
    3486:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3488:	4b0a      	ldr	r3, [pc, #40]	; (34b4 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    348a:	785b      	ldrb	r3, [r3, #1]
    348c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    348e:	4b0a      	ldr	r3, [pc, #40]	; (34b8 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3490:	691b      	ldr	r3, [r3, #16]
    3492:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3494:	9b02      	ldr	r3, [sp, #8]
    3496:	f023 030c 	bic.w	r3, r3, #12
    349a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    349c:	9b03      	ldr	r3, [sp, #12]
    349e:	009b      	lsls	r3, r3, #2
    34a0:	9a02      	ldr	r2, [sp, #8]
    34a2:	4313      	orrs	r3, r2
    34a4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    34a6:	4a04      	ldr	r2, [pc, #16]	; (34b8 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    34a8:	9b02      	ldr	r3, [sp, #8]
    34aa:	6113      	str	r3, [r2, #16]
}
    34ac:	bf00      	nop
    34ae:	b004      	add	sp, #16
    34b0:	4770      	bx	lr
    34b2:	bf00      	nop
    34b4:	000075f0 	.word	0x000075f0
    34b8:	40048000 	.word	0x40048000

000034bc <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    34bc:	b084      	sub	sp, #16
    34be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    34c0:	9b01      	ldr	r3, [sp, #4]
    34c2:	685b      	ldr	r3, [r3, #4]
    34c4:	4a0a      	ldr	r2, [pc, #40]	; (34f0 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    34c6:	5cd3      	ldrb	r3, [r2, r3]
    34c8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    34ca:	4b0a      	ldr	r3, [pc, #40]	; (34f4 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    34cc:	691b      	ldr	r3, [r3, #16]
    34ce:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    34d0:	9b02      	ldr	r3, [sp, #8]
    34d2:	f023 030c 	bic.w	r3, r3, #12
    34d6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    34d8:	9b03      	ldr	r3, [sp, #12]
    34da:	009b      	lsls	r3, r3, #2
    34dc:	9a02      	ldr	r2, [sp, #8]
    34de:	4313      	orrs	r3, r2
    34e0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    34e2:	4a04      	ldr	r2, [pc, #16]	; (34f4 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    34e4:	9b02      	ldr	r3, [sp, #8]
    34e6:	6113      	str	r3, [r2, #16]
}
    34e8:	bf00      	nop
    34ea:	b004      	add	sp, #16
    34ec:	4770      	bx	lr
    34ee:	bf00      	nop
    34f0:	000075f0 	.word	0x000075f0
    34f4:	40048000 	.word	0x40048000

000034f8 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    34f8:	b084      	sub	sp, #16
    34fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    34fc:	4b0a      	ldr	r3, [pc, #40]	; (3528 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    34fe:	795b      	ldrb	r3, [r3, #5]
    3500:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    3502:	4b0a      	ldr	r3, [pc, #40]	; (352c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3504:	6a1b      	ldr	r3, [r3, #32]
    3506:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3508:	9b02      	ldr	r3, [sp, #8]
    350a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    350e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3510:	9b03      	ldr	r3, [sp, #12]
    3512:	061b      	lsls	r3, r3, #24
    3514:	9a02      	ldr	r2, [sp, #8]
    3516:	4313      	orrs	r3, r2
    3518:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    351a:	4a04      	ldr	r2, [pc, #16]	; (352c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    351c:	9b02      	ldr	r3, [sp, #8]
    351e:	6213      	str	r3, [r2, #32]
}
    3520:	bf00      	nop
    3522:	b004      	add	sp, #16
    3524:	4770      	bx	lr
    3526:	bf00      	nop
    3528:	00007590 	.word	0x00007590
    352c:	40064000 	.word	0x40064000

00003530 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3530:	b084      	sub	sp, #16
    3532:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3534:	9b01      	ldr	r3, [sp, #4]
    3536:	685b      	ldr	r3, [r3, #4]
    3538:	4a0a      	ldr	r2, [pc, #40]	; (3564 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    353a:	5cd3      	ldrb	r3, [r2, r3]
    353c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    353e:	4b0a      	ldr	r3, [pc, #40]	; (3568 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3540:	6a1b      	ldr	r3, [r3, #32]
    3542:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3544:	9b02      	ldr	r3, [sp, #8]
    3546:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    354a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    354c:	9b03      	ldr	r3, [sp, #12]
    354e:	061b      	lsls	r3, r3, #24
    3550:	9a02      	ldr	r2, [sp, #8]
    3552:	4313      	orrs	r3, r2
    3554:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3556:	4a04      	ldr	r2, [pc, #16]	; (3568 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3558:	9b02      	ldr	r3, [sp, #8]
    355a:	6213      	str	r3, [r2, #32]
}
    355c:	bf00      	nop
    355e:	b004      	add	sp, #16
    3560:	4770      	bx	lr
    3562:	bf00      	nop
    3564:	00007590 	.word	0x00007590
    3568:	40064000 	.word	0x40064000

0000356c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    356c:	b086      	sub	sp, #24
    356e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3570:	4b20      	ldr	r3, [pc, #128]	; (35f4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    3572:	795b      	ldrb	r3, [r3, #5]
    3574:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3576:	9b01      	ldr	r3, [sp, #4]
    3578:	681a      	ldr	r2, [r3, #0]
    357a:	491f      	ldr	r1, [pc, #124]	; (35f8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    357c:	4613      	mov	r3, r2
    357e:	00db      	lsls	r3, r3, #3
    3580:	4413      	add	r3, r2
    3582:	440b      	add	r3, r1
    3584:	781b      	ldrb	r3, [r3, #0]
    3586:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3588:	4b1c      	ldr	r3, [pc, #112]	; (35fc <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    358a:	68db      	ldr	r3, [r3, #12]
    358c:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    358e:	9b03      	ldr	r3, [sp, #12]
    3590:	2b03      	cmp	r3, #3
    3592:	d813      	bhi.n	35bc <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3594:	9b03      	ldr	r3, [sp, #12]
    3596:	005b      	lsls	r3, r3, #1
    3598:	3318      	adds	r3, #24
    359a:	2203      	movs	r2, #3
    359c:	fa02 f303 	lsl.w	r3, r2, r3
    35a0:	43db      	mvns	r3, r3
    35a2:	9a05      	ldr	r2, [sp, #20]
    35a4:	4013      	ands	r3, r2
    35a6:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    35a8:	9b03      	ldr	r3, [sp, #12]
    35aa:	005b      	lsls	r3, r3, #1
    35ac:	3318      	adds	r3, #24
    35ae:	9a04      	ldr	r2, [sp, #16]
    35b0:	fa02 f303 	lsl.w	r3, r2, r3
    35b4:	9a05      	ldr	r2, [sp, #20]
    35b6:	4313      	orrs	r3, r2
    35b8:	9305      	str	r3, [sp, #20]
    35ba:	e014      	b.n	35e6 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    35bc:	9b03      	ldr	r3, [sp, #12]
    35be:	3b04      	subs	r3, #4
    35c0:	005b      	lsls	r3, r3, #1
    35c2:	3310      	adds	r3, #16
    35c4:	2203      	movs	r2, #3
    35c6:	fa02 f303 	lsl.w	r3, r2, r3
    35ca:	43db      	mvns	r3, r3
    35cc:	9a05      	ldr	r2, [sp, #20]
    35ce:	4013      	ands	r3, r2
    35d0:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    35d2:	9b03      	ldr	r3, [sp, #12]
    35d4:	3b04      	subs	r3, #4
    35d6:	005b      	lsls	r3, r3, #1
    35d8:	3310      	adds	r3, #16
    35da:	9a04      	ldr	r2, [sp, #16]
    35dc:	fa02 f303 	lsl.w	r3, r2, r3
    35e0:	9a05      	ldr	r2, [sp, #20]
    35e2:	4313      	orrs	r3, r2
    35e4:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    35e6:	4a05      	ldr	r2, [pc, #20]	; (35fc <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    35e8:	9b05      	ldr	r3, [sp, #20]
    35ea:	60d3      	str	r3, [r2, #12]
}
    35ec:	bf00      	nop
    35ee:	b006      	add	sp, #24
    35f0:	4770      	bx	lr
    35f2:	bf00      	nop
    35f4:	00007538 	.word	0x00007538
    35f8:	00007228 	.word	0x00007228
    35fc:	40048000 	.word	0x40048000

00003600 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3600:	b086      	sub	sp, #24
    3602:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3604:	9b01      	ldr	r3, [sp, #4]
    3606:	685b      	ldr	r3, [r3, #4]
    3608:	4a20      	ldr	r2, [pc, #128]	; (368c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    360a:	5cd3      	ldrb	r3, [r2, r3]
    360c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    360e:	9b01      	ldr	r3, [sp, #4]
    3610:	681a      	ldr	r2, [r3, #0]
    3612:	491f      	ldr	r1, [pc, #124]	; (3690 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    3614:	4613      	mov	r3, r2
    3616:	00db      	lsls	r3, r3, #3
    3618:	4413      	add	r3, r2
    361a:	440b      	add	r3, r1
    361c:	781b      	ldrb	r3, [r3, #0]
    361e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3620:	4b1c      	ldr	r3, [pc, #112]	; (3694 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3622:	68db      	ldr	r3, [r3, #12]
    3624:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3626:	9b03      	ldr	r3, [sp, #12]
    3628:	2b03      	cmp	r3, #3
    362a:	d813      	bhi.n	3654 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    362c:	9b03      	ldr	r3, [sp, #12]
    362e:	005b      	lsls	r3, r3, #1
    3630:	3318      	adds	r3, #24
    3632:	2203      	movs	r2, #3
    3634:	fa02 f303 	lsl.w	r3, r2, r3
    3638:	43db      	mvns	r3, r3
    363a:	9a05      	ldr	r2, [sp, #20]
    363c:	4013      	ands	r3, r2
    363e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3640:	9b03      	ldr	r3, [sp, #12]
    3642:	005b      	lsls	r3, r3, #1
    3644:	3318      	adds	r3, #24
    3646:	9a04      	ldr	r2, [sp, #16]
    3648:	fa02 f303 	lsl.w	r3, r2, r3
    364c:	9a05      	ldr	r2, [sp, #20]
    364e:	4313      	orrs	r3, r2
    3650:	9305      	str	r3, [sp, #20]
    3652:	e014      	b.n	367e <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3654:	9b03      	ldr	r3, [sp, #12]
    3656:	3b04      	subs	r3, #4
    3658:	005b      	lsls	r3, r3, #1
    365a:	3310      	adds	r3, #16
    365c:	2203      	movs	r2, #3
    365e:	fa02 f303 	lsl.w	r3, r2, r3
    3662:	43db      	mvns	r3, r3
    3664:	9a05      	ldr	r2, [sp, #20]
    3666:	4013      	ands	r3, r2
    3668:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    366a:	9b03      	ldr	r3, [sp, #12]
    366c:	3b04      	subs	r3, #4
    366e:	005b      	lsls	r3, r3, #1
    3670:	3310      	adds	r3, #16
    3672:	9a04      	ldr	r2, [sp, #16]
    3674:	fa02 f303 	lsl.w	r3, r2, r3
    3678:	9a05      	ldr	r2, [sp, #20]
    367a:	4313      	orrs	r3, r2
    367c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    367e:	4a05      	ldr	r2, [pc, #20]	; (3694 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3680:	9b05      	ldr	r3, [sp, #20]
    3682:	60d3      	str	r3, [r2, #12]
}
    3684:	bf00      	nop
    3686:	b006      	add	sp, #24
    3688:	4770      	bx	lr
    368a:	bf00      	nop
    368c:	00007538 	.word	0x00007538
    3690:	00007228 	.word	0x00007228
    3694:	40048000 	.word	0x40048000

00003698 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3698:	b084      	sub	sp, #16
    369a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    369c:	4b06      	ldr	r3, [pc, #24]	; (36b8 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    369e:	685b      	ldr	r3, [r3, #4]
    36a0:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    36a2:	9b03      	ldr	r3, [sp, #12]
    36a4:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    36a8:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    36aa:	4a03      	ldr	r2, [pc, #12]	; (36b8 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    36ac:	9b03      	ldr	r3, [sp, #12]
    36ae:	6053      	str	r3, [r2, #4]
}
    36b0:	bf00      	nop
    36b2:	b004      	add	sp, #16
    36b4:	4770      	bx	lr
    36b6:	bf00      	nop
    36b8:	40048000 	.word	0x40048000

000036bc <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    36bc:	b084      	sub	sp, #16
    36be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    36c0:	9b01      	ldr	r3, [sp, #4]
    36c2:	685b      	ldr	r3, [r3, #4]
    36c4:	4a0a      	ldr	r2, [pc, #40]	; (36f0 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    36c6:	5cd3      	ldrb	r3, [r2, r3]
    36c8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    36ca:	4b0a      	ldr	r3, [pc, #40]	; (36f4 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    36cc:	685b      	ldr	r3, [r3, #4]
    36ce:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    36d0:	9b02      	ldr	r3, [sp, #8]
    36d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    36d6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    36d8:	9b03      	ldr	r3, [sp, #12]
    36da:	011b      	lsls	r3, r3, #4
    36dc:	9a02      	ldr	r2, [sp, #8]
    36de:	4313      	orrs	r3, r2
    36e0:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    36e2:	4a04      	ldr	r2, [pc, #16]	; (36f4 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    36e4:	9b02      	ldr	r3, [sp, #8]
    36e6:	6053      	str	r3, [r2, #4]
}
    36e8:	bf00      	nop
    36ea:	b004      	add	sp, #16
    36ec:	4770      	bx	lr
    36ee:	bf00      	nop
    36f0:	00007538 	.word	0x00007538
    36f4:	40048000 	.word	0x40048000

000036f8 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    36f8:	b084      	sub	sp, #16
    36fa:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    36fc:	9b01      	ldr	r3, [sp, #4]
    36fe:	681a      	ldr	r2, [r3, #0]
    3700:	490f      	ldr	r1, [pc, #60]	; (3740 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    3702:	4613      	mov	r3, r2
    3704:	00db      	lsls	r3, r3, #3
    3706:	4413      	add	r3, r2
    3708:	440b      	add	r3, r1
    370a:	3304      	adds	r3, #4
    370c:	781b      	ldrb	r3, [r3, #0]
    370e:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    3710:	4a0c      	ldr	r2, [pc, #48]	; (3744 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3712:	9b03      	ldr	r3, [sp, #12]
    3714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3718:	490a      	ldr	r1, [pc, #40]	; (3744 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    371a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    371e:	9b03      	ldr	r3, [sp, #12]
    3720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    3724:	4a07      	ldr	r2, [pc, #28]	; (3744 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3726:	9b03      	ldr	r3, [sp, #12]
    3728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    372c:	4905      	ldr	r1, [pc, #20]	; (3744 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    372e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    3732:	9b03      	ldr	r3, [sp, #12]
    3734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3738:	bf00      	nop
    373a:	b004      	add	sp, #16
    373c:	4770      	bx	lr
    373e:	bf00      	nop
    3740:	00007228 	.word	0x00007228
    3744:	40065000 	.word	0x40065000

00003748 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3748:	b086      	sub	sp, #24
    374a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    374c:	9b01      	ldr	r3, [sp, #4]
    374e:	681a      	ldr	r2, [r3, #0]
    3750:	4912      	ldr	r1, [pc, #72]	; (379c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    3752:	4613      	mov	r3, r2
    3754:	00db      	lsls	r3, r3, #3
    3756:	4413      	add	r3, r2
    3758:	440b      	add	r3, r1
    375a:	3304      	adds	r3, #4
    375c:	781b      	ldrb	r3, [r3, #0]
    375e:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3760:	9b01      	ldr	r3, [sp, #4]
    3762:	685b      	ldr	r3, [r3, #4]
    3764:	4a0e      	ldr	r2, [pc, #56]	; (37a0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    3766:	5cd3      	ldrb	r3, [r2, r3]
    3768:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    376a:	4a0e      	ldr	r2, [pc, #56]	; (37a4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    376c:	9b05      	ldr	r3, [sp, #20]
    376e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3772:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    3774:	9b03      	ldr	r3, [sp, #12]
    3776:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    377a:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    377c:	9b04      	ldr	r3, [sp, #16]
    377e:	061b      	lsls	r3, r3, #24
    3780:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    3784:	9a03      	ldr	r2, [sp, #12]
    3786:	4313      	orrs	r3, r2
    3788:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    378a:	4906      	ldr	r1, [pc, #24]	; (37a4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    378c:	9b05      	ldr	r3, [sp, #20]
    378e:	9a03      	ldr	r2, [sp, #12]
    3790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3794:	bf00      	nop
    3796:	b006      	add	sp, #24
    3798:	4770      	bx	lr
    379a:	bf00      	nop
    379c:	00007228 	.word	0x00007228
    37a0:	000075c0 	.word	0x000075c0
    37a4:	40065000 	.word	0x40065000

000037a8 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    37a8:	b084      	sub	sp, #16
    37aa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    37ac:	4b0b      	ldr	r3, [pc, #44]	; (37dc <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    37ae:	7f1b      	ldrb	r3, [r3, #28]
    37b0:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    37b2:	4b0b      	ldr	r3, [pc, #44]	; (37e0 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    37b4:	685b      	ldr	r3, [r3, #4]
    37b6:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    37b8:	9b02      	ldr	r3, [sp, #8]
    37ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    37be:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    37c0:	9b03      	ldr	r3, [sp, #12]
    37c2:	031b      	lsls	r3, r3, #12
    37c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    37c8:	9a02      	ldr	r2, [sp, #8]
    37ca:	4313      	orrs	r3, r2
    37cc:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    37ce:	4a04      	ldr	r2, [pc, #16]	; (37e0 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    37d0:	9b02      	ldr	r3, [sp, #8]
    37d2:	6053      	str	r3, [r2, #4]
}
    37d4:	bf00      	nop
    37d6:	b004      	add	sp, #16
    37d8:	4770      	bx	lr
    37da:	bf00      	nop
    37dc:	00007538 	.word	0x00007538
    37e0:	40048000 	.word	0x40048000

000037e4 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    37e4:	b084      	sub	sp, #16
    37e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    37e8:	9b01      	ldr	r3, [sp, #4]
    37ea:	685b      	ldr	r3, [r3, #4]
    37ec:	4a0b      	ldr	r2, [pc, #44]	; (381c <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    37ee:	5cd3      	ldrb	r3, [r2, r3]
    37f0:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    37f2:	4b0b      	ldr	r3, [pc, #44]	; (3820 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    37f4:	685b      	ldr	r3, [r3, #4]
    37f6:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    37f8:	9b02      	ldr	r3, [sp, #8]
    37fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    37fe:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3800:	9b03      	ldr	r3, [sp, #12]
    3802:	031b      	lsls	r3, r3, #12
    3804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3808:	9a02      	ldr	r2, [sp, #8]
    380a:	4313      	orrs	r3, r2
    380c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    380e:	4a04      	ldr	r2, [pc, #16]	; (3820 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3810:	9b02      	ldr	r3, [sp, #8]
    3812:	6053      	str	r3, [r2, #4]
}
    3814:	bf00      	nop
    3816:	b004      	add	sp, #16
    3818:	4770      	bx	lr
    381a:	bf00      	nop
    381c:	00007538 	.word	0x00007538
    3820:	40048000 	.word	0x40048000

00003824 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    3824:	b500      	push	{lr}
    3826:	b085      	sub	sp, #20
    3828:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    382a:	2300      	movs	r3, #0
    382c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    3830:	9b01      	ldr	r3, [sp, #4]
    3832:	2b00      	cmp	r3, #0
    3834:	d037      	beq.n	38a6 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3836:	2300      	movs	r3, #0
    3838:	9303      	str	r3, [sp, #12]
    383a:	e02b      	b.n	3894 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    383c:	4b29      	ldr	r3, [pc, #164]	; (38e4 <DisableSafeClock+0xc0>)
    383e:	6819      	ldr	r1, [r3, #0]
    3840:	9a03      	ldr	r2, [sp, #12]
    3842:	4613      	mov	r3, r2
    3844:	005b      	lsls	r3, r3, #1
    3846:	4413      	add	r3, r2
    3848:	009b      	lsls	r3, r3, #2
    384a:	440b      	add	r3, r1
    384c:	3314      	adds	r3, #20
    384e:	681b      	ldr	r3, [r3, #0]
    3850:	2b05      	cmp	r3, #5
    3852:	d11c      	bne.n	388e <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    3854:	2301      	movs	r3, #1
    3856:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    385a:	4b22      	ldr	r3, [pc, #136]	; (38e4 <DisableSafeClock+0xc0>)
    385c:	6819      	ldr	r1, [r3, #0]
    385e:	9a03      	ldr	r2, [sp, #12]
    3860:	4613      	mov	r3, r2
    3862:	005b      	lsls	r3, r3, #1
    3864:	4413      	add	r3, r2
    3866:	009b      	lsls	r3, r3, #2
    3868:	440b      	add	r3, r1
    386a:	3318      	adds	r3, #24
    386c:	881b      	ldrh	r3, [r3, #0]
    386e:	2b00      	cmp	r3, #0
    3870:	d118      	bne.n	38a4 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3872:	4b1d      	ldr	r3, [pc, #116]	; (38e8 <DisableSafeClock+0xc4>)
    3874:	791b      	ldrb	r3, [r3, #4]
    3876:	4619      	mov	r1, r3
    3878:	4a1c      	ldr	r2, [pc, #112]	; (38ec <DisableSafeClock+0xc8>)
    387a:	460b      	mov	r3, r1
    387c:	005b      	lsls	r3, r3, #1
    387e:	440b      	add	r3, r1
    3880:	009b      	lsls	r3, r3, #2
    3882:	4413      	add	r3, r2
    3884:	3308      	adds	r3, #8
    3886:	681b      	ldr	r3, [r3, #0]
    3888:	2005      	movs	r0, #5
    388a:	4798      	blx	r3
                }
                break;
    388c:	e00a      	b.n	38a4 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    388e:	9b03      	ldr	r3, [sp, #12]
    3890:	3301      	adds	r3, #1
    3892:	9303      	str	r3, [sp, #12]
    3894:	4b13      	ldr	r3, [pc, #76]	; (38e4 <DisableSafeClock+0xc0>)
    3896:	681b      	ldr	r3, [r3, #0]
    3898:	7a1b      	ldrb	r3, [r3, #8]
    389a:	461a      	mov	r2, r3
    389c:	9b03      	ldr	r3, [sp, #12]
    389e:	4293      	cmp	r3, r2
    38a0:	d3cc      	bcc.n	383c <DisableSafeClock+0x18>
    38a2:	e000      	b.n	38a6 <DisableSafeClock+0x82>
                break;
    38a4:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    38a6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    38aa:	f083 0301 	eor.w	r3, r3, #1
    38ae:	b2db      	uxtb	r3, r3
    38b0:	2b00      	cmp	r3, #0
    38b2:	d013      	beq.n	38dc <DisableSafeClock+0xb8>
    38b4:	4b0e      	ldr	r3, [pc, #56]	; (38f0 <DisableSafeClock+0xcc>)
    38b6:	781b      	ldrb	r3, [r3, #0]
    38b8:	f083 0301 	eor.w	r3, r3, #1
    38bc:	b2db      	uxtb	r3, r3
    38be:	2b00      	cmp	r3, #0
    38c0:	d00c      	beq.n	38dc <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    38c2:	4b09      	ldr	r3, [pc, #36]	; (38e8 <DisableSafeClock+0xc4>)
    38c4:	791b      	ldrb	r3, [r3, #4]
    38c6:	4619      	mov	r1, r3
    38c8:	4a08      	ldr	r2, [pc, #32]	; (38ec <DisableSafeClock+0xc8>)
    38ca:	460b      	mov	r3, r1
    38cc:	005b      	lsls	r3, r3, #1
    38ce:	440b      	add	r3, r1
    38d0:	009b      	lsls	r3, r3, #2
    38d2:	4413      	add	r3, r2
    38d4:	3308      	adds	r3, #8
    38d6:	681b      	ldr	r3, [r3, #0]
    38d8:	2005      	movs	r0, #5
    38da:	4798      	blx	r3
    }
}
    38dc:	bf00      	nop
    38de:	b005      	add	sp, #20
    38e0:	f85d fb04 	ldr.w	pc, [sp], #4
    38e4:	1fff8ba8 	.word	0x1fff8ba8
    38e8:	000071b8 	.word	0x000071b8
    38ec:	000077e8 	.word	0x000077e8
    38f0:	1fff8b18 	.word	0x1fff8b18

000038f4 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    38f4:	4b06      	ldr	r3, [pc, #24]	; (3910 <SetFircToResetValue_TrustedCall+0x1c>)
    38f6:	2200      	movs	r2, #0
    38f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    38fc:	4b04      	ldr	r3, [pc, #16]	; (3910 <SetFircToResetValue_TrustedCall+0x1c>)
    38fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3902:	4a03      	ldr	r2, [pc, #12]	; (3910 <SetFircToResetValue_TrustedCall+0x1c>)
    3904:	f043 0301 	orr.w	r3, r3, #1
    3908:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    390c:	bf00      	nop
    390e:	4770      	bx	lr
    3910:	40064000 	.word	0x40064000

00003914 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    3914:	b084      	sub	sp, #16
    3916:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    3918:	2303      	movs	r3, #3
    391a:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    391c:	2300      	movs	r3, #0
    391e:	9302      	str	r3, [sp, #8]
    3920:	e028      	b.n	3974 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    3922:	9b01      	ldr	r3, [sp, #4]
    3924:	9a02      	ldr	r2, [sp, #8]
    3926:	320d      	adds	r2, #13
    3928:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    392c:	2b28      	cmp	r3, #40	; 0x28
    392e:	d10b      	bne.n	3948 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3930:	9a01      	ldr	r2, [sp, #4]
    3932:	9b02      	ldr	r3, [sp, #8]
    3934:	330d      	adds	r3, #13
    3936:	00db      	lsls	r3, r3, #3
    3938:	4413      	add	r3, r2
    393a:	685b      	ldr	r3, [r3, #4]
    393c:	4a2b      	ldr	r2, [pc, #172]	; (39ec <SetSimLpoclksRegister_TrustedCall+0xd8>)
    393e:	5cd3      	ldrb	r3, [r2, r3]
    3940:	011b      	lsls	r3, r3, #4
    3942:	9a03      	ldr	r2, [sp, #12]
    3944:	4313      	orrs	r3, r2
    3946:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    3948:	9b01      	ldr	r3, [sp, #4]
    394a:	9a02      	ldr	r2, [sp, #8]
    394c:	320d      	adds	r2, #13
    394e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3952:	2b29      	cmp	r3, #41	; 0x29
    3954:	d10b      	bne.n	396e <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3956:	9a01      	ldr	r2, [sp, #4]
    3958:	9b02      	ldr	r3, [sp, #8]
    395a:	330d      	adds	r3, #13
    395c:	00db      	lsls	r3, r3, #3
    395e:	4413      	add	r3, r2
    3960:	685b      	ldr	r3, [r3, #4]
    3962:	4a23      	ldr	r2, [pc, #140]	; (39f0 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    3964:	5cd3      	ldrb	r3, [r2, r3]
    3966:	009b      	lsls	r3, r3, #2
    3968:	9a03      	ldr	r2, [sp, #12]
    396a:	4313      	orrs	r3, r2
    396c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    396e:	9b02      	ldr	r3, [sp, #8]
    3970:	3301      	adds	r3, #1
    3972:	9302      	str	r3, [sp, #8]
    3974:	9b01      	ldr	r3, [sp, #4]
    3976:	7adb      	ldrb	r3, [r3, #11]
    3978:	461a      	mov	r2, r3
    397a:	9b02      	ldr	r3, [sp, #8]
    397c:	4293      	cmp	r3, r2
    397e:	d3d0      	bcc.n	3922 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3980:	2300      	movs	r3, #0
    3982:	9302      	str	r3, [sp, #8]
    3984:	e026      	b.n	39d4 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    3986:	9a01      	ldr	r2, [sp, #4]
    3988:	9b02      	ldr	r3, [sp, #8]
    398a:	334e      	adds	r3, #78	; 0x4e
    398c:	00db      	lsls	r3, r3, #3
    398e:	4413      	add	r3, r2
    3990:	685b      	ldr	r3, [r3, #4]
    3992:	2b12      	cmp	r3, #18
    3994:	d109      	bne.n	39aa <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3996:	9a01      	ldr	r2, [sp, #4]
    3998:	9b02      	ldr	r3, [sp, #8]
    399a:	334e      	adds	r3, #78	; 0x4e
    399c:	00db      	lsls	r3, r3, #3
    399e:	4413      	add	r3, r2
    39a0:	891b      	ldrh	r3, [r3, #8]
    39a2:	005b      	lsls	r3, r3, #1
    39a4:	9a03      	ldr	r2, [sp, #12]
    39a6:	4313      	orrs	r3, r2
    39a8:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    39aa:	9a01      	ldr	r2, [sp, #4]
    39ac:	9b02      	ldr	r3, [sp, #8]
    39ae:	334e      	adds	r3, #78	; 0x4e
    39b0:	00db      	lsls	r3, r3, #3
    39b2:	4413      	add	r3, r2
    39b4:	685b      	ldr	r3, [r3, #4]
    39b6:	2b13      	cmp	r3, #19
    39b8:	d109      	bne.n	39ce <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    39ba:	9a01      	ldr	r2, [sp, #4]
    39bc:	9b02      	ldr	r3, [sp, #8]
    39be:	334e      	adds	r3, #78	; 0x4e
    39c0:	00db      	lsls	r3, r3, #3
    39c2:	4413      	add	r3, r2
    39c4:	891b      	ldrh	r3, [r3, #8]
    39c6:	461a      	mov	r2, r3
    39c8:	9b03      	ldr	r3, [sp, #12]
    39ca:	4313      	orrs	r3, r2
    39cc:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    39ce:	9b02      	ldr	r3, [sp, #8]
    39d0:	3301      	adds	r3, #1
    39d2:	9302      	str	r3, [sp, #8]
    39d4:	9b01      	ldr	r3, [sp, #4]
    39d6:	7c1b      	ldrb	r3, [r3, #16]
    39d8:	461a      	mov	r2, r3
    39da:	9b02      	ldr	r3, [sp, #8]
    39dc:	4293      	cmp	r3, r2
    39de:	d3d2      	bcc.n	3986 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    39e0:	4a04      	ldr	r2, [pc, #16]	; (39f4 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    39e2:	9b03      	ldr	r3, [sp, #12]
    39e4:	6113      	str	r3, [r2, #16]
}
    39e6:	bf00      	nop
    39e8:	b004      	add	sp, #16
    39ea:	4770      	bx	lr
    39ec:	00007538 	.word	0x00007538
    39f0:	000075f0 	.word	0x000075f0
    39f4:	40048000 	.word	0x40048000

000039f8 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    39f8:	b500      	push	{lr}
    39fa:	b089      	sub	sp, #36	; 0x24
    39fc:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    39fe:	2300      	movs	r3, #0
    3a00:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    3a04:	4a21      	ldr	r2, [pc, #132]	; (3a8c <Clock_Ip_SpecificPlatformInitClock+0x94>)
    3a06:	9b01      	ldr	r3, [sp, #4]
    3a08:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    3a0a:	4b21      	ldr	r3, [pc, #132]	; (3a90 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3a0c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3a10:	f003 0301 	and.w	r3, r3, #1
    3a14:	2b00      	cmp	r3, #0
    3a16:	d12e      	bne.n	3a76 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    3a18:	4b1e      	ldr	r3, [pc, #120]	; (3a94 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3a1a:	2200      	movs	r2, #0
    3a1c:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    3a1e:	f7ff ff69 	bl	38f4 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3a22:	aa03      	add	r2, sp, #12
    3a24:	a904      	add	r1, sp, #16
    3a26:	a805      	add	r0, sp, #20
    3a28:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a2c:	f7fe f8ae 	bl	1b8c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3a30:	4b17      	ldr	r3, [pc, #92]	; (3a90 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3a32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3a36:	0e1b      	lsrs	r3, r3, #24
    3a38:	f003 0301 	and.w	r3, r3, #1
    3a3c:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3a3e:	9a03      	ldr	r2, [sp, #12]
    3a40:	a904      	add	r1, sp, #16
    3a42:	ab05      	add	r3, sp, #20
    3a44:	4618      	mov	r0, r3
    3a46:	f7fe f8bb 	bl	1bc0 <Clock_Ip_TimeoutExpired>
    3a4a:	4603      	mov	r3, r0
    3a4c:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    3a50:	9b06      	ldr	r3, [sp, #24]
    3a52:	2b00      	cmp	r3, #0
    3a54:	d106      	bne.n	3a64 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    3a56:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a5a:	f083 0301 	eor.w	r3, r3, #1
    3a5e:	b2db      	uxtb	r3, r3
    3a60:	2b00      	cmp	r3, #0
    3a62:	d1e5      	bne.n	3a30 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    3a64:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a68:	2b00      	cmp	r3, #0
    3a6a:	d007      	beq.n	3a7c <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3a6c:	2105      	movs	r1, #5
    3a6e:	2001      	movs	r0, #1
    3a70:	f7fe f87c 	bl	1b6c <Clock_Ip_ReportClockErrors>
    3a74:	e002      	b.n	3a7c <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    3a76:	4b07      	ldr	r3, [pc, #28]	; (3a94 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3a78:	2201      	movs	r2, #1
    3a7a:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    3a7c:	9801      	ldr	r0, [sp, #4]
    3a7e:	f7ff ff49 	bl	3914 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    3a82:	bf00      	nop
    3a84:	b009      	add	sp, #36	; 0x24
    3a86:	f85d fb04 	ldr.w	pc, [sp], #4
    3a8a:	bf00      	nop
    3a8c:	1fff8ba8 	.word	0x1fff8ba8
    3a90:	40064000 	.word	0x40064000
    3a94:	1fff8b18 	.word	0x1fff8b18

00003a98 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    3a98:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    3a9a:	2300      	movs	r3, #0
    3a9c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3a9e:	4b29      	ldr	r3, [pc, #164]	; (3b44 <getFircConfig+0xac>)
    3aa0:	681b      	ldr	r3, [r3, #0]
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	d024      	beq.n	3af0 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3aa6:	2300      	movs	r3, #0
    3aa8:	9301      	str	r3, [sp, #4]
    3aaa:	e01a      	b.n	3ae2 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3aac:	4b25      	ldr	r3, [pc, #148]	; (3b44 <getFircConfig+0xac>)
    3aae:	6819      	ldr	r1, [r3, #0]
    3ab0:	9a01      	ldr	r2, [sp, #4]
    3ab2:	4613      	mov	r3, r2
    3ab4:	005b      	lsls	r3, r3, #1
    3ab6:	4413      	add	r3, r2
    3ab8:	009b      	lsls	r3, r3, #2
    3aba:	440b      	add	r3, r1
    3abc:	3314      	adds	r3, #20
    3abe:	681b      	ldr	r3, [r3, #0]
    3ac0:	2b05      	cmp	r3, #5
    3ac2:	d10b      	bne.n	3adc <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    3ac4:	4b1f      	ldr	r3, [pc, #124]	; (3b44 <getFircConfig+0xac>)
    3ac6:	6819      	ldr	r1, [r3, #0]
    3ac8:	9a01      	ldr	r2, [sp, #4]
    3aca:	4613      	mov	r3, r2
    3acc:	005b      	lsls	r3, r3, #1
    3ace:	4413      	add	r3, r2
    3ad0:	009b      	lsls	r3, r3, #2
    3ad2:	3310      	adds	r3, #16
    3ad4:	440b      	add	r3, r1
    3ad6:	3304      	adds	r3, #4
    3ad8:	9300      	str	r3, [sp, #0]
                break;
    3ada:	e009      	b.n	3af0 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3adc:	9b01      	ldr	r3, [sp, #4]
    3ade:	3301      	adds	r3, #1
    3ae0:	9301      	str	r3, [sp, #4]
    3ae2:	4b18      	ldr	r3, [pc, #96]	; (3b44 <getFircConfig+0xac>)
    3ae4:	681b      	ldr	r3, [r3, #0]
    3ae6:	7a1b      	ldrb	r3, [r3, #8]
    3ae8:	461a      	mov	r2, r3
    3aea:	9b01      	ldr	r3, [sp, #4]
    3aec:	4293      	cmp	r3, r2
    3aee:	d3dd      	bcc.n	3aac <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3af0:	9b00      	ldr	r3, [sp, #0]
    3af2:	2b00      	cmp	r3, #0
    3af4:	d121      	bne.n	3b3a <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    3af6:	4b14      	ldr	r3, [pc, #80]	; (3b48 <getFircConfig+0xb0>)
    3af8:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    3afa:	4b13      	ldr	r3, [pc, #76]	; (3b48 <getFircConfig+0xb0>)
    3afc:	2205      	movs	r2, #5
    3afe:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    3b00:	4b12      	ldr	r3, [pc, #72]	; (3b4c <getFircConfig+0xb4>)
    3b02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b06:	b29b      	uxth	r3, r3
    3b08:	f003 0301 	and.w	r3, r3, #1
    3b0c:	b29a      	uxth	r2, r3
    3b0e:	4b0e      	ldr	r3, [pc, #56]	; (3b48 <getFircConfig+0xb0>)
    3b10:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    3b12:	4b0e      	ldr	r3, [pc, #56]	; (3b4c <getFircConfig+0xb4>)
    3b14:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3b18:	b2db      	uxtb	r3, r3
    3b1a:	f003 0303 	and.w	r3, r3, #3
    3b1e:	b2da      	uxtb	r2, r3
    3b20:	4b09      	ldr	r3, [pc, #36]	; (3b48 <getFircConfig+0xb0>)
    3b22:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    3b24:	4b09      	ldr	r3, [pc, #36]	; (3b4c <getFircConfig+0xb4>)
    3b26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b2a:	b2db      	uxtb	r3, r3
    3b2c:	10db      	asrs	r3, r3, #3
    3b2e:	b2db      	uxtb	r3, r3
    3b30:	f003 0301 	and.w	r3, r3, #1
    3b34:	b2da      	uxtb	r2, r3
    3b36:	4b04      	ldr	r3, [pc, #16]	; (3b48 <getFircConfig+0xb0>)
    3b38:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    3b3a:	9b00      	ldr	r3, [sp, #0]
}
    3b3c:	4618      	mov	r0, r3
    3b3e:	b002      	add	sp, #8
    3b40:	4770      	bx	lr
    3b42:	bf00      	nop
    3b44:	1fff8ba8 	.word	0x1fff8ba8
    3b48:	1fff8c14 	.word	0x1fff8c14
    3b4c:	40064000 	.word	0x40064000

00003b50 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    3b50:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    3b52:	2300      	movs	r3, #0
    3b54:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3b56:	4b20      	ldr	r3, [pc, #128]	; (3bd8 <getSoscConfig+0x88>)
    3b58:	681b      	ldr	r3, [r3, #0]
    3b5a:	2b00      	cmp	r3, #0
    3b5c:	d024      	beq.n	3ba8 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    3b5e:	2300      	movs	r3, #0
    3b60:	9301      	str	r3, [sp, #4]
    3b62:	e01a      	b.n	3b9a <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    3b64:	4b1c      	ldr	r3, [pc, #112]	; (3bd8 <getSoscConfig+0x88>)
    3b66:	6819      	ldr	r1, [r3, #0]
    3b68:	9a01      	ldr	r2, [sp, #4]
    3b6a:	4613      	mov	r3, r2
    3b6c:	009b      	lsls	r3, r3, #2
    3b6e:	4413      	add	r3, r2
    3b70:	009b      	lsls	r3, r3, #2
    3b72:	440b      	add	r3, r1
    3b74:	332c      	adds	r3, #44	; 0x2c
    3b76:	681b      	ldr	r3, [r3, #0]
    3b78:	2b08      	cmp	r3, #8
    3b7a:	d10b      	bne.n	3b94 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    3b7c:	4b16      	ldr	r3, [pc, #88]	; (3bd8 <getSoscConfig+0x88>)
    3b7e:	6819      	ldr	r1, [r3, #0]
    3b80:	9a01      	ldr	r2, [sp, #4]
    3b82:	4613      	mov	r3, r2
    3b84:	009b      	lsls	r3, r3, #2
    3b86:	4413      	add	r3, r2
    3b88:	009b      	lsls	r3, r3, #2
    3b8a:	3328      	adds	r3, #40	; 0x28
    3b8c:	440b      	add	r3, r1
    3b8e:	3304      	adds	r3, #4
    3b90:	9300      	str	r3, [sp, #0]
                break;
    3b92:	e009      	b.n	3ba8 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    3b94:	9b01      	ldr	r3, [sp, #4]
    3b96:	3301      	adds	r3, #1
    3b98:	9301      	str	r3, [sp, #4]
    3b9a:	4b0f      	ldr	r3, [pc, #60]	; (3bd8 <getSoscConfig+0x88>)
    3b9c:	681b      	ldr	r3, [r3, #0]
    3b9e:	7a5b      	ldrb	r3, [r3, #9]
    3ba0:	461a      	mov	r2, r3
    3ba2:	9b01      	ldr	r3, [sp, #4]
    3ba4:	4293      	cmp	r3, r2
    3ba6:	d3dd      	bcc.n	3b64 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3ba8:	9b00      	ldr	r3, [sp, #0]
    3baa:	2b00      	cmp	r3, #0
    3bac:	d110      	bne.n	3bd0 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    3bae:	4b0b      	ldr	r3, [pc, #44]	; (3bdc <getSoscConfig+0x8c>)
    3bb0:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    3bb2:	4b0a      	ldr	r3, [pc, #40]	; (3bdc <getSoscConfig+0x8c>)
    3bb4:	2208      	movs	r2, #8
    3bb6:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    3bb8:	4b09      	ldr	r3, [pc, #36]	; (3be0 <getSoscConfig+0x90>)
    3bba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3bbe:	b29b      	uxth	r3, r3
    3bc0:	f003 0301 	and.w	r3, r3, #1
    3bc4:	b29a      	uxth	r2, r3
    3bc6:	4b05      	ldr	r3, [pc, #20]	; (3bdc <getSoscConfig+0x8c>)
    3bc8:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    3bca:	4b04      	ldr	r3, [pc, #16]	; (3bdc <getSoscConfig+0x8c>)
    3bcc:	4a05      	ldr	r2, [pc, #20]	; (3be4 <getSoscConfig+0x94>)
    3bce:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    3bd0:	9b00      	ldr	r3, [sp, #0]
}
    3bd2:	4618      	mov	r0, r3
    3bd4:	b002      	add	sp, #8
    3bd6:	4770      	bx	lr
    3bd8:	1fff8ba8 	.word	0x1fff8ba8
    3bdc:	1fff8c20 	.word	0x1fff8c20
    3be0:	40064000 	.word	0x40064000
    3be4:	02625a00 	.word	0x02625a00

00003be8 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    3be8:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    3bea:	2300      	movs	r3, #0
    3bec:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3bee:	4b28      	ldr	r3, [pc, #160]	; (3c90 <getSpllConfig+0xa8>)
    3bf0:	681b      	ldr	r3, [r3, #0]
    3bf2:	2b00      	cmp	r3, #0
    3bf4:	d023      	beq.n	3c3e <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    3bf6:	2300      	movs	r3, #0
    3bf8:	9301      	str	r3, [sp, #4]
    3bfa:	e019      	b.n	3c30 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    3bfc:	4b24      	ldr	r3, [pc, #144]	; (3c90 <getSpllConfig+0xa8>)
    3bfe:	6819      	ldr	r1, [r3, #0]
    3c00:	9a01      	ldr	r2, [sp, #4]
    3c02:	4613      	mov	r3, r2
    3c04:	009b      	lsls	r3, r3, #2
    3c06:	4413      	add	r3, r2
    3c08:	00db      	lsls	r3, r3, #3
    3c0a:	440b      	add	r3, r1
    3c0c:	3340      	adds	r3, #64	; 0x40
    3c0e:	681b      	ldr	r3, [r3, #0]
    3c10:	2b09      	cmp	r3, #9
    3c12:	d10a      	bne.n	3c2a <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    3c14:	4b1e      	ldr	r3, [pc, #120]	; (3c90 <getSpllConfig+0xa8>)
    3c16:	6819      	ldr	r1, [r3, #0]
    3c18:	9a01      	ldr	r2, [sp, #4]
    3c1a:	4613      	mov	r3, r2
    3c1c:	009b      	lsls	r3, r3, #2
    3c1e:	4413      	add	r3, r2
    3c20:	00db      	lsls	r3, r3, #3
    3c22:	3340      	adds	r3, #64	; 0x40
    3c24:	440b      	add	r3, r1
    3c26:	9300      	str	r3, [sp, #0]
                break;
    3c28:	e009      	b.n	3c3e <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    3c2a:	9b01      	ldr	r3, [sp, #4]
    3c2c:	3301      	adds	r3, #1
    3c2e:	9301      	str	r3, [sp, #4]
    3c30:	4b17      	ldr	r3, [pc, #92]	; (3c90 <getSpllConfig+0xa8>)
    3c32:	681b      	ldr	r3, [r3, #0]
    3c34:	7a9b      	ldrb	r3, [r3, #10]
    3c36:	461a      	mov	r2, r3
    3c38:	9b01      	ldr	r3, [sp, #4]
    3c3a:	4293      	cmp	r3, r2
    3c3c:	d3de      	bcc.n	3bfc <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3c3e:	9b00      	ldr	r3, [sp, #0]
    3c40:	2b00      	cmp	r3, #0
    3c42:	d121      	bne.n	3c88 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    3c44:	4b13      	ldr	r3, [pc, #76]	; (3c94 <getSpllConfig+0xac>)
    3c46:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    3c48:	4b12      	ldr	r3, [pc, #72]	; (3c94 <getSpllConfig+0xac>)
    3c4a:	2209      	movs	r2, #9
    3c4c:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    3c4e:	4b12      	ldr	r3, [pc, #72]	; (3c98 <getSpllConfig+0xb0>)
    3c50:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3c54:	b29b      	uxth	r3, r3
    3c56:	f003 0301 	and.w	r3, r3, #1
    3c5a:	b29a      	uxth	r2, r3
    3c5c:	4b0d      	ldr	r3, [pc, #52]	; (3c94 <getSpllConfig+0xac>)
    3c5e:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    3c60:	4b0d      	ldr	r3, [pc, #52]	; (3c98 <getSpllConfig+0xb0>)
    3c62:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3c66:	0a1b      	lsrs	r3, r3, #8
    3c68:	b2db      	uxtb	r3, r3
    3c6a:	f003 0307 	and.w	r3, r3, #7
    3c6e:	b2da      	uxtb	r2, r3
    3c70:	4b08      	ldr	r3, [pc, #32]	; (3c94 <getSpllConfig+0xac>)
    3c72:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    3c74:	4b08      	ldr	r3, [pc, #32]	; (3c98 <getSpllConfig+0xb0>)
    3c76:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3c7a:	0c1b      	lsrs	r3, r3, #16
    3c7c:	b2db      	uxtb	r3, r3
    3c7e:	f003 031f 	and.w	r3, r3, #31
    3c82:	b2da      	uxtb	r2, r3
    3c84:	4b03      	ldr	r3, [pc, #12]	; (3c94 <getSpllConfig+0xac>)
    3c86:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    3c88:	9b00      	ldr	r3, [sp, #0]
}
    3c8a:	4618      	mov	r0, r3
    3c8c:	b002      	add	sp, #8
    3c8e:	4770      	bx	lr
    3c90:	1fff8ba8 	.word	0x1fff8ba8
    3c94:	1fff8c34 	.word	0x1fff8c34
    3c98:	40064000 	.word	0x40064000

00003c9c <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    3c9c:	b086      	sub	sp, #24
    3c9e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    3ca0:	2300      	movs	r3, #0
    3ca2:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    3ca4:	9b01      	ldr	r3, [sp, #4]
    3ca6:	2b1b      	cmp	r3, #27
    3ca8:	d00f      	beq.n	3cca <getSelectorConfig+0x2e>
    3caa:	9b01      	ldr	r3, [sp, #4]
    3cac:	2b1b      	cmp	r3, #27
    3cae:	d80f      	bhi.n	3cd0 <getSelectorConfig+0x34>
    3cb0:	9b01      	ldr	r3, [sp, #4]
    3cb2:	2b19      	cmp	r3, #25
    3cb4:	d003      	beq.n	3cbe <getSelectorConfig+0x22>
    3cb6:	9b01      	ldr	r3, [sp, #4]
    3cb8:	2b1a      	cmp	r3, #26
    3cba:	d003      	beq.n	3cc4 <getSelectorConfig+0x28>
    3cbc:	e008      	b.n	3cd0 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    3cbe:	2300      	movs	r3, #0
    3cc0:	9304      	str	r3, [sp, #16]
            break;
    3cc2:	e008      	b.n	3cd6 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    3cc4:	2301      	movs	r3, #1
    3cc6:	9304      	str	r3, [sp, #16]
            break;
    3cc8:	e005      	b.n	3cd6 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    3cca:	2302      	movs	r3, #2
    3ccc:	9304      	str	r3, [sp, #16]
            break;
    3cce:	e002      	b.n	3cd6 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    3cd0:	2300      	movs	r3, #0
    3cd2:	9304      	str	r3, [sp, #16]
            break;
    3cd4:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    3cd6:	4b36      	ldr	r3, [pc, #216]	; (3db0 <getSelectorConfig+0x114>)
    3cd8:	681b      	ldr	r3, [r3, #0]
    3cda:	2b00      	cmp	r3, #0
    3cdc:	d01d      	beq.n	3d1a <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    3cde:	2300      	movs	r3, #0
    3ce0:	9303      	str	r3, [sp, #12]
    3ce2:	e013      	b.n	3d0c <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    3ce4:	4b32      	ldr	r3, [pc, #200]	; (3db0 <getSelectorConfig+0x114>)
    3ce6:	681b      	ldr	r3, [r3, #0]
    3ce8:	9a03      	ldr	r2, [sp, #12]
    3cea:	320d      	adds	r2, #13
    3cec:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3cf0:	9a01      	ldr	r2, [sp, #4]
    3cf2:	429a      	cmp	r2, r3
    3cf4:	d107      	bne.n	3d06 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    3cf6:	4b2e      	ldr	r3, [pc, #184]	; (3db0 <getSelectorConfig+0x114>)
    3cf8:	681a      	ldr	r2, [r3, #0]
    3cfa:	9b03      	ldr	r3, [sp, #12]
    3cfc:	330d      	adds	r3, #13
    3cfe:	00db      	lsls	r3, r3, #3
    3d00:	4413      	add	r3, r2
    3d02:	9305      	str	r3, [sp, #20]
                break;
    3d04:	e009      	b.n	3d1a <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    3d06:	9b03      	ldr	r3, [sp, #12]
    3d08:	3301      	adds	r3, #1
    3d0a:	9303      	str	r3, [sp, #12]
    3d0c:	4b28      	ldr	r3, [pc, #160]	; (3db0 <getSelectorConfig+0x114>)
    3d0e:	681b      	ldr	r3, [r3, #0]
    3d10:	7adb      	ldrb	r3, [r3, #11]
    3d12:	461a      	mov	r2, r3
    3d14:	9b03      	ldr	r3, [sp, #12]
    3d16:	4293      	cmp	r3, r2
    3d18:	d3e4      	bcc.n	3ce4 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3d1a:	9b05      	ldr	r3, [sp, #20]
    3d1c:	2b00      	cmp	r3, #0
    3d1e:	d140      	bne.n	3da2 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    3d20:	9b04      	ldr	r3, [sp, #16]
    3d22:	00db      	lsls	r3, r3, #3
    3d24:	4a23      	ldr	r2, [pc, #140]	; (3db4 <getSelectorConfig+0x118>)
    3d26:	4413      	add	r3, r2
    3d28:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    3d2a:	4922      	ldr	r1, [pc, #136]	; (3db4 <getSelectorConfig+0x118>)
    3d2c:	9b04      	ldr	r3, [sp, #16]
    3d2e:	9a01      	ldr	r2, [sp, #4]
    3d30:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    3d34:	9b01      	ldr	r3, [sp, #4]
    3d36:	2b1b      	cmp	r3, #27
    3d38:	d025      	beq.n	3d86 <getSelectorConfig+0xea>
    3d3a:	9b01      	ldr	r3, [sp, #4]
    3d3c:	2b1b      	cmp	r3, #27
    3d3e:	d832      	bhi.n	3da6 <getSelectorConfig+0x10a>
    3d40:	9b01      	ldr	r3, [sp, #4]
    3d42:	2b19      	cmp	r3, #25
    3d44:	d003      	beq.n	3d4e <getSelectorConfig+0xb2>
    3d46:	9b01      	ldr	r3, [sp, #4]
    3d48:	2b1a      	cmp	r3, #26
    3d4a:	d00e      	beq.n	3d6a <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    3d4c:	e02b      	b.n	3da6 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    3d4e:	4b1a      	ldr	r3, [pc, #104]	; (3db8 <getSelectorConfig+0x11c>)
    3d50:	695b      	ldr	r3, [r3, #20]
    3d52:	0e1b      	lsrs	r3, r3, #24
    3d54:	f003 030f 	and.w	r3, r3, #15
    3d58:	4a18      	ldr	r2, [pc, #96]	; (3dbc <getSelectorConfig+0x120>)
    3d5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3d5e:	4915      	ldr	r1, [pc, #84]	; (3db4 <getSelectorConfig+0x118>)
    3d60:	9b04      	ldr	r3, [sp, #16]
    3d62:	00db      	lsls	r3, r3, #3
    3d64:	440b      	add	r3, r1
    3d66:	605a      	str	r2, [r3, #4]
                break;
    3d68:	e01e      	b.n	3da8 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    3d6a:	4b13      	ldr	r3, [pc, #76]	; (3db8 <getSelectorConfig+0x11c>)
    3d6c:	699b      	ldr	r3, [r3, #24]
    3d6e:	0e1b      	lsrs	r3, r3, #24
    3d70:	f003 030f 	and.w	r3, r3, #15
    3d74:	4a11      	ldr	r2, [pc, #68]	; (3dbc <getSelectorConfig+0x120>)
    3d76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3d7a:	490e      	ldr	r1, [pc, #56]	; (3db4 <getSelectorConfig+0x118>)
    3d7c:	9b04      	ldr	r3, [sp, #16]
    3d7e:	00db      	lsls	r3, r3, #3
    3d80:	440b      	add	r3, r1
    3d82:	605a      	str	r2, [r3, #4]
                break;
    3d84:	e010      	b.n	3da8 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    3d86:	4b0c      	ldr	r3, [pc, #48]	; (3db8 <getSelectorConfig+0x11c>)
    3d88:	69db      	ldr	r3, [r3, #28]
    3d8a:	0e1b      	lsrs	r3, r3, #24
    3d8c:	f003 030f 	and.w	r3, r3, #15
    3d90:	4a0a      	ldr	r2, [pc, #40]	; (3dbc <getSelectorConfig+0x120>)
    3d92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3d96:	4907      	ldr	r1, [pc, #28]	; (3db4 <getSelectorConfig+0x118>)
    3d98:	9b04      	ldr	r3, [sp, #16]
    3d9a:	00db      	lsls	r3, r3, #3
    3d9c:	440b      	add	r3, r1
    3d9e:	605a      	str	r2, [r3, #4]
                break;
    3da0:	e002      	b.n	3da8 <getSelectorConfig+0x10c>
        }
    }
    3da2:	bf00      	nop
    3da4:	e000      	b.n	3da8 <getSelectorConfig+0x10c>
                break;
    3da6:	bf00      	nop

    return ReturnValue;
    3da8:	9b05      	ldr	r3, [sp, #20]
}
    3daa:	4618      	mov	r0, r3
    3dac:	b006      	add	sp, #24
    3dae:	4770      	bx	lr
    3db0:	1fff8ba8 	.word	0x1fff8ba8
    3db4:	1fff8c5c 	.word	0x1fff8c5c
    3db8:	40064000 	.word	0x40064000
    3dbc:	000078b8 	.word	0x000078b8

00003dc0 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    3dc0:	b086      	sub	sp, #24
    3dc2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    3dc4:	2300      	movs	r3, #0
    3dc6:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    3dc8:	2300      	movs	r3, #0
    3dca:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    3dcc:	9b01      	ldr	r3, [sp, #4]
    3dce:	2b1f      	cmp	r3, #31
    3dd0:	d00f      	beq.n	3df2 <getCoreDividerConfig+0x32>
    3dd2:	9b01      	ldr	r3, [sp, #4]
    3dd4:	2b1f      	cmp	r3, #31
    3dd6:	d80f      	bhi.n	3df8 <getCoreDividerConfig+0x38>
    3dd8:	9b01      	ldr	r3, [sp, #4]
    3dda:	2b1d      	cmp	r3, #29
    3ddc:	d003      	beq.n	3de6 <getCoreDividerConfig+0x26>
    3dde:	9b01      	ldr	r3, [sp, #4]
    3de0:	2b1e      	cmp	r3, #30
    3de2:	d003      	beq.n	3dec <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    3de4:	e008      	b.n	3df8 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    3de6:	2300      	movs	r3, #0
    3de8:	9304      	str	r3, [sp, #16]
            break;
    3dea:	e006      	b.n	3dfa <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    3dec:	2301      	movs	r3, #1
    3dee:	9304      	str	r3, [sp, #16]
            break;
    3df0:	e003      	b.n	3dfa <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    3df2:	2302      	movs	r3, #2
    3df4:	9304      	str	r3, [sp, #16]
            break;
    3df6:	e000      	b.n	3dfa <getCoreDividerConfig+0x3a>
                break;
    3df8:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    3dfa:	4b41      	ldr	r3, [pc, #260]	; (3f00 <getCoreDividerConfig+0x140>)
    3dfc:	681b      	ldr	r3, [r3, #0]
    3dfe:	2b00      	cmp	r3, #0
    3e00:	d026      	beq.n	3e50 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3e02:	2300      	movs	r3, #0
    3e04:	9303      	str	r3, [sp, #12]
    3e06:	e01c      	b.n	3e42 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    3e08:	4b3d      	ldr	r3, [pc, #244]	; (3f00 <getCoreDividerConfig+0x140>)
    3e0a:	6819      	ldr	r1, [r3, #0]
    3e0c:	9a03      	ldr	r2, [sp, #12]
    3e0e:	4613      	mov	r3, r2
    3e10:	005b      	lsls	r3, r3, #1
    3e12:	4413      	add	r3, r2
    3e14:	009b      	lsls	r3, r3, #2
    3e16:	440b      	add	r3, r1
    3e18:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3e1c:	681b      	ldr	r3, [r3, #0]
    3e1e:	9a01      	ldr	r2, [sp, #4]
    3e20:	429a      	cmp	r2, r3
    3e22:	d10b      	bne.n	3e3c <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    3e24:	4b36      	ldr	r3, [pc, #216]	; (3f00 <getCoreDividerConfig+0x140>)
    3e26:	6819      	ldr	r1, [r3, #0]
    3e28:	9a03      	ldr	r2, [sp, #12]
    3e2a:	4613      	mov	r3, r2
    3e2c:	005b      	lsls	r3, r3, #1
    3e2e:	4413      	add	r3, r2
    3e30:	009b      	lsls	r3, r3, #2
    3e32:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3e36:	440b      	add	r3, r1
    3e38:	9305      	str	r3, [sp, #20]
                break;
    3e3a:	e009      	b.n	3e50 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3e3c:	9b03      	ldr	r3, [sp, #12]
    3e3e:	3301      	adds	r3, #1
    3e40:	9303      	str	r3, [sp, #12]
    3e42:	4b2f      	ldr	r3, [pc, #188]	; (3f00 <getCoreDividerConfig+0x140>)
    3e44:	681b      	ldr	r3, [r3, #0]
    3e46:	7b1b      	ldrb	r3, [r3, #12]
    3e48:	461a      	mov	r2, r3
    3e4a:	9b03      	ldr	r3, [sp, #12]
    3e4c:	4293      	cmp	r3, r2
    3e4e:	d3db      	bcc.n	3e08 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3e50:	9b05      	ldr	r3, [sp, #20]
    3e52:	2b00      	cmp	r3, #0
    3e54:	d14d      	bne.n	3ef2 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    3e56:	9a04      	ldr	r2, [sp, #16]
    3e58:	4613      	mov	r3, r2
    3e5a:	005b      	lsls	r3, r3, #1
    3e5c:	4413      	add	r3, r2
    3e5e:	009b      	lsls	r3, r3, #2
    3e60:	4a28      	ldr	r2, [pc, #160]	; (3f04 <getCoreDividerConfig+0x144>)
    3e62:	4413      	add	r3, r2
    3e64:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    3e66:	4927      	ldr	r1, [pc, #156]	; (3f04 <getCoreDividerConfig+0x144>)
    3e68:	9a04      	ldr	r2, [sp, #16]
    3e6a:	4613      	mov	r3, r2
    3e6c:	005b      	lsls	r3, r3, #1
    3e6e:	4413      	add	r3, r2
    3e70:	009b      	lsls	r3, r3, #2
    3e72:	440b      	add	r3, r1
    3e74:	9a01      	ldr	r2, [sp, #4]
    3e76:	601a      	str	r2, [r3, #0]
        switch(Name)
    3e78:	9b01      	ldr	r3, [sp, #4]
    3e7a:	2b1f      	cmp	r3, #31
    3e7c:	d029      	beq.n	3ed2 <getCoreDividerConfig+0x112>
    3e7e:	9b01      	ldr	r3, [sp, #4]
    3e80:	2b1f      	cmp	r3, #31
    3e82:	d838      	bhi.n	3ef6 <getCoreDividerConfig+0x136>
    3e84:	9b01      	ldr	r3, [sp, #4]
    3e86:	2b1d      	cmp	r3, #29
    3e88:	d003      	beq.n	3e92 <getCoreDividerConfig+0xd2>
    3e8a:	9b01      	ldr	r3, [sp, #4]
    3e8c:	2b1e      	cmp	r3, #30
    3e8e:	d010      	beq.n	3eb2 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    3e90:	e031      	b.n	3ef6 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    3e92:	4b1d      	ldr	r3, [pc, #116]	; (3f08 <getCoreDividerConfig+0x148>)
    3e94:	695b      	ldr	r3, [r3, #20]
    3e96:	0c1b      	lsrs	r3, r3, #16
    3e98:	f003 030f 	and.w	r3, r3, #15
    3e9c:	1c59      	adds	r1, r3, #1
    3e9e:	4819      	ldr	r0, [pc, #100]	; (3f04 <getCoreDividerConfig+0x144>)
    3ea0:	9a04      	ldr	r2, [sp, #16]
    3ea2:	4613      	mov	r3, r2
    3ea4:	005b      	lsls	r3, r3, #1
    3ea6:	4413      	add	r3, r2
    3ea8:	009b      	lsls	r3, r3, #2
    3eaa:	4403      	add	r3, r0
    3eac:	3304      	adds	r3, #4
    3eae:	6019      	str	r1, [r3, #0]
                break;
    3eb0:	e022      	b.n	3ef8 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    3eb2:	4b15      	ldr	r3, [pc, #84]	; (3f08 <getCoreDividerConfig+0x148>)
    3eb4:	699b      	ldr	r3, [r3, #24]
    3eb6:	0c1b      	lsrs	r3, r3, #16
    3eb8:	f003 030f 	and.w	r3, r3, #15
    3ebc:	1c59      	adds	r1, r3, #1
    3ebe:	4811      	ldr	r0, [pc, #68]	; (3f04 <getCoreDividerConfig+0x144>)
    3ec0:	9a04      	ldr	r2, [sp, #16]
    3ec2:	4613      	mov	r3, r2
    3ec4:	005b      	lsls	r3, r3, #1
    3ec6:	4413      	add	r3, r2
    3ec8:	009b      	lsls	r3, r3, #2
    3eca:	4403      	add	r3, r0
    3ecc:	3304      	adds	r3, #4
    3ece:	6019      	str	r1, [r3, #0]
                break;
    3ed0:	e012      	b.n	3ef8 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    3ed2:	4b0d      	ldr	r3, [pc, #52]	; (3f08 <getCoreDividerConfig+0x148>)
    3ed4:	69db      	ldr	r3, [r3, #28]
    3ed6:	0c1b      	lsrs	r3, r3, #16
    3ed8:	f003 030f 	and.w	r3, r3, #15
    3edc:	1c59      	adds	r1, r3, #1
    3ede:	4809      	ldr	r0, [pc, #36]	; (3f04 <getCoreDividerConfig+0x144>)
    3ee0:	9a04      	ldr	r2, [sp, #16]
    3ee2:	4613      	mov	r3, r2
    3ee4:	005b      	lsls	r3, r3, #1
    3ee6:	4413      	add	r3, r2
    3ee8:	009b      	lsls	r3, r3, #2
    3eea:	4403      	add	r3, r0
    3eec:	3304      	adds	r3, #4
    3eee:	6019      	str	r1, [r3, #0]
                break;
    3ef0:	e002      	b.n	3ef8 <getCoreDividerConfig+0x138>
        }
    }
    3ef2:	bf00      	nop
    3ef4:	e000      	b.n	3ef8 <getCoreDividerConfig+0x138>
                break;
    3ef6:	bf00      	nop

    return ReturnValue;
    3ef8:	9b05      	ldr	r3, [sp, #20]
}
    3efa:	4618      	mov	r0, r3
    3efc:	b006      	add	sp, #24
    3efe:	4770      	bx	lr
    3f00:	1fff8ba8 	.word	0x1fff8ba8
    3f04:	1fff8c74 	.word	0x1fff8c74
    3f08:	40064000 	.word	0x40064000

00003f0c <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    3f0c:	b086      	sub	sp, #24
    3f0e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    3f10:	2300      	movs	r3, #0
    3f12:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    3f14:	2300      	movs	r3, #0
    3f16:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    3f18:	9b01      	ldr	r3, [sp, #4]
    3f1a:	2b23      	cmp	r3, #35	; 0x23
    3f1c:	d00f      	beq.n	3f3e <getBusDividerConfig+0x32>
    3f1e:	9b01      	ldr	r3, [sp, #4]
    3f20:	2b23      	cmp	r3, #35	; 0x23
    3f22:	d80f      	bhi.n	3f44 <getBusDividerConfig+0x38>
    3f24:	9b01      	ldr	r3, [sp, #4]
    3f26:	2b21      	cmp	r3, #33	; 0x21
    3f28:	d003      	beq.n	3f32 <getBusDividerConfig+0x26>
    3f2a:	9b01      	ldr	r3, [sp, #4]
    3f2c:	2b22      	cmp	r3, #34	; 0x22
    3f2e:	d003      	beq.n	3f38 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    3f30:	e008      	b.n	3f44 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    3f32:	2300      	movs	r3, #0
    3f34:	9304      	str	r3, [sp, #16]
            break;
    3f36:	e006      	b.n	3f46 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    3f38:	2301      	movs	r3, #1
    3f3a:	9304      	str	r3, [sp, #16]
            break;
    3f3c:	e003      	b.n	3f46 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    3f3e:	2302      	movs	r3, #2
    3f40:	9304      	str	r3, [sp, #16]
            break;
    3f42:	e000      	b.n	3f46 <getBusDividerConfig+0x3a>
                break;
    3f44:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    3f46:	4b41      	ldr	r3, [pc, #260]	; (404c <getBusDividerConfig+0x140>)
    3f48:	681b      	ldr	r3, [r3, #0]
    3f4a:	2b00      	cmp	r3, #0
    3f4c:	d026      	beq.n	3f9c <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3f4e:	2300      	movs	r3, #0
    3f50:	9303      	str	r3, [sp, #12]
    3f52:	e01c      	b.n	3f8e <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    3f54:	4b3d      	ldr	r3, [pc, #244]	; (404c <getBusDividerConfig+0x140>)
    3f56:	6819      	ldr	r1, [r3, #0]
    3f58:	9a03      	ldr	r2, [sp, #12]
    3f5a:	4613      	mov	r3, r2
    3f5c:	005b      	lsls	r3, r3, #1
    3f5e:	4413      	add	r3, r2
    3f60:	009b      	lsls	r3, r3, #2
    3f62:	440b      	add	r3, r1
    3f64:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3f68:	681b      	ldr	r3, [r3, #0]
    3f6a:	9a01      	ldr	r2, [sp, #4]
    3f6c:	429a      	cmp	r2, r3
    3f6e:	d10b      	bne.n	3f88 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    3f70:	4b36      	ldr	r3, [pc, #216]	; (404c <getBusDividerConfig+0x140>)
    3f72:	6819      	ldr	r1, [r3, #0]
    3f74:	9a03      	ldr	r2, [sp, #12]
    3f76:	4613      	mov	r3, r2
    3f78:	005b      	lsls	r3, r3, #1
    3f7a:	4413      	add	r3, r2
    3f7c:	009b      	lsls	r3, r3, #2
    3f7e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3f82:	440b      	add	r3, r1
    3f84:	9305      	str	r3, [sp, #20]
                break;
    3f86:	e009      	b.n	3f9c <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3f88:	9b03      	ldr	r3, [sp, #12]
    3f8a:	3301      	adds	r3, #1
    3f8c:	9303      	str	r3, [sp, #12]
    3f8e:	4b2f      	ldr	r3, [pc, #188]	; (404c <getBusDividerConfig+0x140>)
    3f90:	681b      	ldr	r3, [r3, #0]
    3f92:	7b1b      	ldrb	r3, [r3, #12]
    3f94:	461a      	mov	r2, r3
    3f96:	9b03      	ldr	r3, [sp, #12]
    3f98:	4293      	cmp	r3, r2
    3f9a:	d3db      	bcc.n	3f54 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3f9c:	9b05      	ldr	r3, [sp, #20]
    3f9e:	2b00      	cmp	r3, #0
    3fa0:	d14d      	bne.n	403e <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    3fa2:	9a04      	ldr	r2, [sp, #16]
    3fa4:	4613      	mov	r3, r2
    3fa6:	005b      	lsls	r3, r3, #1
    3fa8:	4413      	add	r3, r2
    3faa:	009b      	lsls	r3, r3, #2
    3fac:	4a28      	ldr	r2, [pc, #160]	; (4050 <getBusDividerConfig+0x144>)
    3fae:	4413      	add	r3, r2
    3fb0:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    3fb2:	4927      	ldr	r1, [pc, #156]	; (4050 <getBusDividerConfig+0x144>)
    3fb4:	9a04      	ldr	r2, [sp, #16]
    3fb6:	4613      	mov	r3, r2
    3fb8:	005b      	lsls	r3, r3, #1
    3fba:	4413      	add	r3, r2
    3fbc:	009b      	lsls	r3, r3, #2
    3fbe:	440b      	add	r3, r1
    3fc0:	9a01      	ldr	r2, [sp, #4]
    3fc2:	601a      	str	r2, [r3, #0]
        switch(Name)
    3fc4:	9b01      	ldr	r3, [sp, #4]
    3fc6:	2b23      	cmp	r3, #35	; 0x23
    3fc8:	d029      	beq.n	401e <getBusDividerConfig+0x112>
    3fca:	9b01      	ldr	r3, [sp, #4]
    3fcc:	2b23      	cmp	r3, #35	; 0x23
    3fce:	d838      	bhi.n	4042 <getBusDividerConfig+0x136>
    3fd0:	9b01      	ldr	r3, [sp, #4]
    3fd2:	2b21      	cmp	r3, #33	; 0x21
    3fd4:	d003      	beq.n	3fde <getBusDividerConfig+0xd2>
    3fd6:	9b01      	ldr	r3, [sp, #4]
    3fd8:	2b22      	cmp	r3, #34	; 0x22
    3fda:	d010      	beq.n	3ffe <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    3fdc:	e031      	b.n	4042 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    3fde:	4b1d      	ldr	r3, [pc, #116]	; (4054 <getBusDividerConfig+0x148>)
    3fe0:	695b      	ldr	r3, [r3, #20]
    3fe2:	091b      	lsrs	r3, r3, #4
    3fe4:	f003 030f 	and.w	r3, r3, #15
    3fe8:	1c59      	adds	r1, r3, #1
    3fea:	4819      	ldr	r0, [pc, #100]	; (4050 <getBusDividerConfig+0x144>)
    3fec:	9a04      	ldr	r2, [sp, #16]
    3fee:	4613      	mov	r3, r2
    3ff0:	005b      	lsls	r3, r3, #1
    3ff2:	4413      	add	r3, r2
    3ff4:	009b      	lsls	r3, r3, #2
    3ff6:	4403      	add	r3, r0
    3ff8:	3304      	adds	r3, #4
    3ffa:	6019      	str	r1, [r3, #0]
                break;
    3ffc:	e022      	b.n	4044 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    3ffe:	4b15      	ldr	r3, [pc, #84]	; (4054 <getBusDividerConfig+0x148>)
    4000:	699b      	ldr	r3, [r3, #24]
    4002:	091b      	lsrs	r3, r3, #4
    4004:	f003 030f 	and.w	r3, r3, #15
    4008:	1c59      	adds	r1, r3, #1
    400a:	4811      	ldr	r0, [pc, #68]	; (4050 <getBusDividerConfig+0x144>)
    400c:	9a04      	ldr	r2, [sp, #16]
    400e:	4613      	mov	r3, r2
    4010:	005b      	lsls	r3, r3, #1
    4012:	4413      	add	r3, r2
    4014:	009b      	lsls	r3, r3, #2
    4016:	4403      	add	r3, r0
    4018:	3304      	adds	r3, #4
    401a:	6019      	str	r1, [r3, #0]
                break;
    401c:	e012      	b.n	4044 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    401e:	4b0d      	ldr	r3, [pc, #52]	; (4054 <getBusDividerConfig+0x148>)
    4020:	69db      	ldr	r3, [r3, #28]
    4022:	091b      	lsrs	r3, r3, #4
    4024:	f003 030f 	and.w	r3, r3, #15
    4028:	1c59      	adds	r1, r3, #1
    402a:	4809      	ldr	r0, [pc, #36]	; (4050 <getBusDividerConfig+0x144>)
    402c:	9a04      	ldr	r2, [sp, #16]
    402e:	4613      	mov	r3, r2
    4030:	005b      	lsls	r3, r3, #1
    4032:	4413      	add	r3, r2
    4034:	009b      	lsls	r3, r3, #2
    4036:	4403      	add	r3, r0
    4038:	3304      	adds	r3, #4
    403a:	6019      	str	r1, [r3, #0]
                break;
    403c:	e002      	b.n	4044 <getBusDividerConfig+0x138>
        }
    }
    403e:	bf00      	nop
    4040:	e000      	b.n	4044 <getBusDividerConfig+0x138>
                break;
    4042:	bf00      	nop

    return ReturnValue;
    4044:	9b05      	ldr	r3, [sp, #20]
}
    4046:	4618      	mov	r0, r3
    4048:	b006      	add	sp, #24
    404a:	4770      	bx	lr
    404c:	1fff8ba8 	.word	0x1fff8ba8
    4050:	1fff8c98 	.word	0x1fff8c98
    4054:	40064000 	.word	0x40064000

00004058 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    4058:	b086      	sub	sp, #24
    405a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    405c:	2300      	movs	r3, #0
    405e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4060:	2300      	movs	r3, #0
    4062:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4064:	9b01      	ldr	r3, [sp, #4]
    4066:	2b27      	cmp	r3, #39	; 0x27
    4068:	d00f      	beq.n	408a <getSlowDividerConfig+0x32>
    406a:	9b01      	ldr	r3, [sp, #4]
    406c:	2b27      	cmp	r3, #39	; 0x27
    406e:	d80f      	bhi.n	4090 <getSlowDividerConfig+0x38>
    4070:	9b01      	ldr	r3, [sp, #4]
    4072:	2b25      	cmp	r3, #37	; 0x25
    4074:	d003      	beq.n	407e <getSlowDividerConfig+0x26>
    4076:	9b01      	ldr	r3, [sp, #4]
    4078:	2b26      	cmp	r3, #38	; 0x26
    407a:	d003      	beq.n	4084 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    407c:	e008      	b.n	4090 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    407e:	2300      	movs	r3, #0
    4080:	9304      	str	r3, [sp, #16]
            break;
    4082:	e006      	b.n	4092 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4084:	2301      	movs	r3, #1
    4086:	9304      	str	r3, [sp, #16]
            break;
    4088:	e003      	b.n	4092 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    408a:	2302      	movs	r3, #2
    408c:	9304      	str	r3, [sp, #16]
            break;
    408e:	e000      	b.n	4092 <getSlowDividerConfig+0x3a>
                break;
    4090:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4092:	4b40      	ldr	r3, [pc, #256]	; (4194 <getSlowDividerConfig+0x13c>)
    4094:	681b      	ldr	r3, [r3, #0]
    4096:	2b00      	cmp	r3, #0
    4098:	d026      	beq.n	40e8 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    409a:	2300      	movs	r3, #0
    409c:	9303      	str	r3, [sp, #12]
    409e:	e01c      	b.n	40da <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    40a0:	4b3c      	ldr	r3, [pc, #240]	; (4194 <getSlowDividerConfig+0x13c>)
    40a2:	6819      	ldr	r1, [r3, #0]
    40a4:	9a03      	ldr	r2, [sp, #12]
    40a6:	4613      	mov	r3, r2
    40a8:	005b      	lsls	r3, r3, #1
    40aa:	4413      	add	r3, r2
    40ac:	009b      	lsls	r3, r3, #2
    40ae:	440b      	add	r3, r1
    40b0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    40b4:	681b      	ldr	r3, [r3, #0]
    40b6:	9a01      	ldr	r2, [sp, #4]
    40b8:	429a      	cmp	r2, r3
    40ba:	d10b      	bne.n	40d4 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    40bc:	4b35      	ldr	r3, [pc, #212]	; (4194 <getSlowDividerConfig+0x13c>)
    40be:	6819      	ldr	r1, [r3, #0]
    40c0:	9a03      	ldr	r2, [sp, #12]
    40c2:	4613      	mov	r3, r2
    40c4:	005b      	lsls	r3, r3, #1
    40c6:	4413      	add	r3, r2
    40c8:	009b      	lsls	r3, r3, #2
    40ca:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    40ce:	440b      	add	r3, r1
    40d0:	9305      	str	r3, [sp, #20]
                break;
    40d2:	e009      	b.n	40e8 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    40d4:	9b03      	ldr	r3, [sp, #12]
    40d6:	3301      	adds	r3, #1
    40d8:	9303      	str	r3, [sp, #12]
    40da:	4b2e      	ldr	r3, [pc, #184]	; (4194 <getSlowDividerConfig+0x13c>)
    40dc:	681b      	ldr	r3, [r3, #0]
    40de:	7b1b      	ldrb	r3, [r3, #12]
    40e0:	461a      	mov	r2, r3
    40e2:	9b03      	ldr	r3, [sp, #12]
    40e4:	4293      	cmp	r3, r2
    40e6:	d3db      	bcc.n	40a0 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    40e8:	9b05      	ldr	r3, [sp, #20]
    40ea:	2b00      	cmp	r3, #0
    40ec:	d14a      	bne.n	4184 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    40ee:	9a04      	ldr	r2, [sp, #16]
    40f0:	4613      	mov	r3, r2
    40f2:	005b      	lsls	r3, r3, #1
    40f4:	4413      	add	r3, r2
    40f6:	009b      	lsls	r3, r3, #2
    40f8:	4a27      	ldr	r2, [pc, #156]	; (4198 <getSlowDividerConfig+0x140>)
    40fa:	4413      	add	r3, r2
    40fc:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    40fe:	4926      	ldr	r1, [pc, #152]	; (4198 <getSlowDividerConfig+0x140>)
    4100:	9a04      	ldr	r2, [sp, #16]
    4102:	4613      	mov	r3, r2
    4104:	005b      	lsls	r3, r3, #1
    4106:	4413      	add	r3, r2
    4108:	009b      	lsls	r3, r3, #2
    410a:	440b      	add	r3, r1
    410c:	9a01      	ldr	r2, [sp, #4]
    410e:	601a      	str	r2, [r3, #0]
        switch(Name)
    4110:	9b01      	ldr	r3, [sp, #4]
    4112:	2b27      	cmp	r3, #39	; 0x27
    4114:	d027      	beq.n	4166 <getSlowDividerConfig+0x10e>
    4116:	9b01      	ldr	r3, [sp, #4]
    4118:	2b27      	cmp	r3, #39	; 0x27
    411a:	d835      	bhi.n	4188 <getSlowDividerConfig+0x130>
    411c:	9b01      	ldr	r3, [sp, #4]
    411e:	2b25      	cmp	r3, #37	; 0x25
    4120:	d003      	beq.n	412a <getSlowDividerConfig+0xd2>
    4122:	9b01      	ldr	r3, [sp, #4]
    4124:	2b26      	cmp	r3, #38	; 0x26
    4126:	d00f      	beq.n	4148 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4128:	e02e      	b.n	4188 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    412a:	4b1c      	ldr	r3, [pc, #112]	; (419c <getSlowDividerConfig+0x144>)
    412c:	695b      	ldr	r3, [r3, #20]
    412e:	f003 030f 	and.w	r3, r3, #15
    4132:	1c59      	adds	r1, r3, #1
    4134:	4818      	ldr	r0, [pc, #96]	; (4198 <getSlowDividerConfig+0x140>)
    4136:	9a04      	ldr	r2, [sp, #16]
    4138:	4613      	mov	r3, r2
    413a:	005b      	lsls	r3, r3, #1
    413c:	4413      	add	r3, r2
    413e:	009b      	lsls	r3, r3, #2
    4140:	4403      	add	r3, r0
    4142:	3304      	adds	r3, #4
    4144:	6019      	str	r1, [r3, #0]
                break;
    4146:	e020      	b.n	418a <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    4148:	4b14      	ldr	r3, [pc, #80]	; (419c <getSlowDividerConfig+0x144>)
    414a:	699b      	ldr	r3, [r3, #24]
    414c:	f003 030f 	and.w	r3, r3, #15
    4150:	1c59      	adds	r1, r3, #1
    4152:	4811      	ldr	r0, [pc, #68]	; (4198 <getSlowDividerConfig+0x140>)
    4154:	9a04      	ldr	r2, [sp, #16]
    4156:	4613      	mov	r3, r2
    4158:	005b      	lsls	r3, r3, #1
    415a:	4413      	add	r3, r2
    415c:	009b      	lsls	r3, r3, #2
    415e:	4403      	add	r3, r0
    4160:	3304      	adds	r3, #4
    4162:	6019      	str	r1, [r3, #0]
                break;
    4164:	e011      	b.n	418a <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    4166:	4b0d      	ldr	r3, [pc, #52]	; (419c <getSlowDividerConfig+0x144>)
    4168:	69db      	ldr	r3, [r3, #28]
    416a:	f003 030f 	and.w	r3, r3, #15
    416e:	1c59      	adds	r1, r3, #1
    4170:	4809      	ldr	r0, [pc, #36]	; (4198 <getSlowDividerConfig+0x140>)
    4172:	9a04      	ldr	r2, [sp, #16]
    4174:	4613      	mov	r3, r2
    4176:	005b      	lsls	r3, r3, #1
    4178:	4413      	add	r3, r2
    417a:	009b      	lsls	r3, r3, #2
    417c:	4403      	add	r3, r0
    417e:	3304      	adds	r3, #4
    4180:	6019      	str	r1, [r3, #0]
                break;
    4182:	e002      	b.n	418a <getSlowDividerConfig+0x132>
        }
    }
    4184:	bf00      	nop
    4186:	e000      	b.n	418a <getSlowDividerConfig+0x132>
                break;
    4188:	bf00      	nop

    return ReturnValue;
    418a:	9b05      	ldr	r3, [sp, #20]
}
    418c:	4618      	mov	r0, r3
    418e:	b006      	add	sp, #24
    4190:	4770      	bx	lr
    4192:	bf00      	nop
    4194:	1fff8ba8 	.word	0x1fff8ba8
    4198:	1fff8cbc 	.word	0x1fff8cbc
    419c:	40064000 	.word	0x40064000

000041a0 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    41a0:	b500      	push	{lr}
    41a2:	b083      	sub	sp, #12
    41a4:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    41a6:	4b64      	ldr	r3, [pc, #400]	; (4338 <Clock_Ip_ClockInitializeObjects+0x198>)
    41a8:	781b      	ldrb	r3, [r3, #0]
    41aa:	f083 0301 	eor.w	r3, r3, #1
    41ae:	b2db      	uxtb	r3, r3
    41b0:	2b00      	cmp	r3, #0
    41b2:	d05b      	beq.n	426c <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    41b4:	4b60      	ldr	r3, [pc, #384]	; (4338 <Clock_Ip_ClockInitializeObjects+0x198>)
    41b6:	2201      	movs	r2, #1
    41b8:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    41ba:	4b60      	ldr	r3, [pc, #384]	; (433c <Clock_Ip_ClockInitializeObjects+0x19c>)
    41bc:	785b      	ldrb	r3, [r3, #1]
    41be:	461a      	mov	r2, r3
    41c0:	4613      	mov	r3, r2
    41c2:	009b      	lsls	r3, r3, #2
    41c4:	4413      	add	r3, r2
    41c6:	009b      	lsls	r3, r3, #2
    41c8:	4a5d      	ldr	r2, [pc, #372]	; (4340 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    41ca:	4413      	add	r3, r2
    41cc:	4a5d      	ldr	r2, [pc, #372]	; (4344 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    41ce:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    41d0:	4b5d      	ldr	r3, [pc, #372]	; (4348 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    41d2:	785b      	ldrb	r3, [r3, #1]
    41d4:	461a      	mov	r2, r3
    41d6:	4613      	mov	r3, r2
    41d8:	009b      	lsls	r3, r3, #2
    41da:	4413      	add	r3, r2
    41dc:	009b      	lsls	r3, r3, #2
    41de:	4a5b      	ldr	r2, [pc, #364]	; (434c <Clock_Ip_ClockInitializeObjects+0x1ac>)
    41e0:	4413      	add	r3, r2
    41e2:	4a5b      	ldr	r2, [pc, #364]	; (4350 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    41e4:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    41e6:	4b5b      	ldr	r3, [pc, #364]	; (4354 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    41e8:	791b      	ldrb	r3, [r3, #4]
    41ea:	461a      	mov	r2, r3
    41ec:	4613      	mov	r3, r2
    41ee:	005b      	lsls	r3, r3, #1
    41f0:	4413      	add	r3, r2
    41f2:	009b      	lsls	r3, r3, #2
    41f4:	4a58      	ldr	r2, [pc, #352]	; (4358 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    41f6:	4413      	add	r3, r2
    41f8:	4a58      	ldr	r2, [pc, #352]	; (435c <Clock_Ip_ClockInitializeObjects+0x1bc>)
    41fa:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    41fc:	4b58      	ldr	r3, [pc, #352]	; (4360 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    41fe:	795b      	ldrb	r3, [r3, #5]
    4200:	00db      	lsls	r3, r3, #3
    4202:	4a58      	ldr	r2, [pc, #352]	; (4364 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    4204:	4413      	add	r3, r2
    4206:	4a58      	ldr	r2, [pc, #352]	; (4368 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    4208:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    420a:	4b55      	ldr	r3, [pc, #340]	; (4360 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    420c:	79db      	ldrb	r3, [r3, #7]
    420e:	00db      	lsls	r3, r3, #3
    4210:	4a54      	ldr	r2, [pc, #336]	; (4364 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    4212:	4413      	add	r3, r2
    4214:	4a55      	ldr	r2, [pc, #340]	; (436c <Clock_Ip_ClockInitializeObjects+0x1cc>)
    4216:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    4218:	4b55      	ldr	r3, [pc, #340]	; (4370 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    421a:	799b      	ldrb	r3, [r3, #6]
    421c:	009b      	lsls	r3, r3, #2
    421e:	4a55      	ldr	r2, [pc, #340]	; (4374 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4220:	4413      	add	r3, r2
    4222:	4a55      	ldr	r2, [pc, #340]	; (4378 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    4224:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    4226:	4b52      	ldr	r3, [pc, #328]	; (4370 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4228:	7a1b      	ldrb	r3, [r3, #8]
    422a:	009b      	lsls	r3, r3, #2
    422c:	4a51      	ldr	r2, [pc, #324]	; (4374 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    422e:	4413      	add	r3, r2
    4230:	4a52      	ldr	r2, [pc, #328]	; (437c <Clock_Ip_ClockInitializeObjects+0x1dc>)
    4232:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    4234:	4b4e      	ldr	r3, [pc, #312]	; (4370 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4236:	7a5b      	ldrb	r3, [r3, #9]
    4238:	009b      	lsls	r3, r3, #2
    423a:	4a4e      	ldr	r2, [pc, #312]	; (4374 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    423c:	4413      	add	r3, r2
    423e:	4a50      	ldr	r2, [pc, #320]	; (4380 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4240:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    4242:	4b4b      	ldr	r3, [pc, #300]	; (4370 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4244:	7adb      	ldrb	r3, [r3, #11]
    4246:	009b      	lsls	r3, r3, #2
    4248:	4a4a      	ldr	r2, [pc, #296]	; (4374 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    424a:	4413      	add	r3, r2
    424c:	4a4d      	ldr	r2, [pc, #308]	; (4384 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    424e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    4250:	4b47      	ldr	r3, [pc, #284]	; (4370 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4252:	7b1b      	ldrb	r3, [r3, #12]
    4254:	009b      	lsls	r3, r3, #2
    4256:	4a47      	ldr	r2, [pc, #284]	; (4374 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4258:	4413      	add	r3, r2
    425a:	4a4b      	ldr	r2, [pc, #300]	; (4388 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    425c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    425e:	4b44      	ldr	r3, [pc, #272]	; (4370 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4260:	7b9b      	ldrb	r3, [r3, #14]
    4262:	009b      	lsls	r3, r3, #2
    4264:	4a43      	ldr	r2, [pc, #268]	; (4374 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4266:	4413      	add	r3, r2
    4268:	4a48      	ldr	r2, [pc, #288]	; (438c <Clock_Ip_ClockInitializeObjects+0x1ec>)
    426a:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    426c:	4b48      	ldr	r3, [pc, #288]	; (4390 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    426e:	781b      	ldrb	r3, [r3, #0]
    4270:	2b00      	cmp	r3, #0
    4272:	d002      	beq.n	427a <Clock_Ip_ClockInitializeObjects+0xda>
    4274:	9b01      	ldr	r3, [sp, #4]
    4276:	2b00      	cmp	r3, #0
    4278:	d003      	beq.n	4282 <Clock_Ip_ClockInitializeObjects+0xe2>
    427a:	4b46      	ldr	r3, [pc, #280]	; (4394 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    427c:	781b      	ldrb	r3, [r3, #0]
    427e:	2b00      	cmp	r3, #0
    4280:	d056      	beq.n	4330 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    4282:	f7ff fc09 	bl	3a98 <getFircConfig>
    4286:	4603      	mov	r3, r0
    4288:	4a43      	ldr	r2, [pc, #268]	; (4398 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    428a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    428c:	f7ff fc60 	bl	3b50 <getSoscConfig>
    4290:	4603      	mov	r3, r0
    4292:	4a42      	ldr	r2, [pc, #264]	; (439c <Clock_Ip_ClockInitializeObjects+0x1fc>)
    4294:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    4296:	f7ff fca7 	bl	3be8 <getSpllConfig>
    429a:	4603      	mov	r3, r0
    429c:	4a40      	ldr	r2, [pc, #256]	; (43a0 <Clock_Ip_ClockInitializeObjects+0x200>)
    429e:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    42a0:	2019      	movs	r0, #25
    42a2:	f7ff fcfb 	bl	3c9c <getSelectorConfig>
    42a6:	4603      	mov	r3, r0
    42a8:	4a3e      	ldr	r2, [pc, #248]	; (43a4 <Clock_Ip_ClockInitializeObjects+0x204>)
    42aa:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    42ac:	201a      	movs	r0, #26
    42ae:	f7ff fcf5 	bl	3c9c <getSelectorConfig>
    42b2:	4603      	mov	r3, r0
    42b4:	4a3c      	ldr	r2, [pc, #240]	; (43a8 <Clock_Ip_ClockInitializeObjects+0x208>)
    42b6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    42b8:	201b      	movs	r0, #27
    42ba:	f7ff fcef 	bl	3c9c <getSelectorConfig>
    42be:	4603      	mov	r3, r0
    42c0:	4a3a      	ldr	r2, [pc, #232]	; (43ac <Clock_Ip_ClockInitializeObjects+0x20c>)
    42c2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    42c4:	201d      	movs	r0, #29
    42c6:	f7ff fd7b 	bl	3dc0 <getCoreDividerConfig>
    42ca:	4603      	mov	r3, r0
    42cc:	4a38      	ldr	r2, [pc, #224]	; (43b0 <Clock_Ip_ClockInitializeObjects+0x210>)
    42ce:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    42d0:	201e      	movs	r0, #30
    42d2:	f7ff fd75 	bl	3dc0 <getCoreDividerConfig>
    42d6:	4603      	mov	r3, r0
    42d8:	4a36      	ldr	r2, [pc, #216]	; (43b4 <Clock_Ip_ClockInitializeObjects+0x214>)
    42da:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    42dc:	201f      	movs	r0, #31
    42de:	f7ff fd6f 	bl	3dc0 <getCoreDividerConfig>
    42e2:	4603      	mov	r3, r0
    42e4:	4a34      	ldr	r2, [pc, #208]	; (43b8 <Clock_Ip_ClockInitializeObjects+0x218>)
    42e6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    42e8:	2021      	movs	r0, #33	; 0x21
    42ea:	f7ff fe0f 	bl	3f0c <getBusDividerConfig>
    42ee:	4603      	mov	r3, r0
    42f0:	4a32      	ldr	r2, [pc, #200]	; (43bc <Clock_Ip_ClockInitializeObjects+0x21c>)
    42f2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    42f4:	2022      	movs	r0, #34	; 0x22
    42f6:	f7ff fe09 	bl	3f0c <getBusDividerConfig>
    42fa:	4603      	mov	r3, r0
    42fc:	4a30      	ldr	r2, [pc, #192]	; (43c0 <Clock_Ip_ClockInitializeObjects+0x220>)
    42fe:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    4300:	2023      	movs	r0, #35	; 0x23
    4302:	f7ff fe03 	bl	3f0c <getBusDividerConfig>
    4306:	4603      	mov	r3, r0
    4308:	4a2e      	ldr	r2, [pc, #184]	; (43c4 <Clock_Ip_ClockInitializeObjects+0x224>)
    430a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    430c:	2025      	movs	r0, #37	; 0x25
    430e:	f7ff fea3 	bl	4058 <getSlowDividerConfig>
    4312:	4603      	mov	r3, r0
    4314:	4a2c      	ldr	r2, [pc, #176]	; (43c8 <Clock_Ip_ClockInitializeObjects+0x228>)
    4316:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    4318:	2026      	movs	r0, #38	; 0x26
    431a:	f7ff fe9d 	bl	4058 <getSlowDividerConfig>
    431e:	4603      	mov	r3, r0
    4320:	4a2a      	ldr	r2, [pc, #168]	; (43cc <Clock_Ip_ClockInitializeObjects+0x22c>)
    4322:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    4324:	2027      	movs	r0, #39	; 0x27
    4326:	f7ff fe97 	bl	4058 <getSlowDividerConfig>
    432a:	4603      	mov	r3, r0
    432c:	4a28      	ldr	r2, [pc, #160]	; (43d0 <Clock_Ip_ClockInitializeObjects+0x230>)
    432e:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    4330:	bf00      	nop
    4332:	b003      	add	sp, #12
    4334:	f85d fb04 	ldr.w	pc, [sp], #4
    4338:	1fff8ce0 	.word	0x1fff8ce0
    433c:	000071e8 	.word	0x000071e8
    4340:	00007834 	.word	0x00007834
    4344:	1fff8bac 	.word	0x1fff8bac
    4348:	000071a8 	.word	0x000071a8
    434c:	0000777c 	.word	0x0000777c
    4350:	1fff8bb0 	.word	0x1fff8bb0
    4354:	000071b8 	.word	0x000071b8
    4358:	000077e8 	.word	0x000077e8
    435c:	1fff8bb4 	.word	0x1fff8bb4
    4360:	000071f8 	.word	0x000071f8
    4364:	00007860 	.word	0x00007860
    4368:	1fff8bb8 	.word	0x1fff8bb8
    436c:	1fff8bf4 	.word	0x1fff8bf4
    4370:	00007188 	.word	0x00007188
    4374:	00007738 	.word	0x00007738
    4378:	1fff8bbc 	.word	0x1fff8bbc
    437c:	1fff8bf8 	.word	0x1fff8bf8
    4380:	1fff8bc0 	.word	0x1fff8bc0
    4384:	1fff8bfc 	.word	0x1fff8bfc
    4388:	1fff8bc4 	.word	0x1fff8bc4
    438c:	1fff8c00 	.word	0x1fff8c00
    4390:	1fff8b19 	.word	0x1fff8b19
    4394:	1fff8b10 	.word	0x1fff8b10
    4398:	1fff8bc8 	.word	0x1fff8bc8
    439c:	1fff8bcc 	.word	0x1fff8bcc
    43a0:	1fff8bd0 	.word	0x1fff8bd0
    43a4:	1fff8bd4 	.word	0x1fff8bd4
    43a8:	1fff8bd8 	.word	0x1fff8bd8
    43ac:	1fff8c04 	.word	0x1fff8c04
    43b0:	1fff8bdc 	.word	0x1fff8bdc
    43b4:	1fff8be0 	.word	0x1fff8be0
    43b8:	1fff8c08 	.word	0x1fff8c08
    43bc:	1fff8be4 	.word	0x1fff8be4
    43c0:	1fff8be8 	.word	0x1fff8be8
    43c4:	1fff8c0c 	.word	0x1fff8c0c
    43c8:	1fff8bec 	.word	0x1fff8bec
    43cc:	1fff8bf0 	.word	0x1fff8bf0
    43d0:	1fff8c10 	.word	0x1fff8c10

000043d4 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    43d4:	b500      	push	{lr}
    43d6:	b083      	sub	sp, #12
    43d8:	9001      	str	r0, [sp, #4]
    43da:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    43dc:	9b01      	ldr	r3, [sp, #4]
    43de:	2b03      	cmp	r3, #3
    43e0:	f000 8090 	beq.w	4504 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    43e4:	9b01      	ldr	r3, [sp, #4]
    43e6:	2b03      	cmp	r3, #3
    43e8:	f200 80d3 	bhi.w	4592 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    43ec:	9b01      	ldr	r3, [sp, #4]
    43ee:	2b00      	cmp	r3, #0
    43f0:	d040      	beq.n	4474 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    43f2:	9b01      	ldr	r3, [sp, #4]
    43f4:	3b01      	subs	r3, #1
    43f6:	2b01      	cmp	r3, #1
    43f8:	f200 80cb 	bhi.w	4592 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    43fc:	9b00      	ldr	r3, [sp, #0]
    43fe:	2b00      	cmp	r3, #0
    4400:	f040 80c9 	bne.w	4596 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    4404:	4b68      	ldr	r3, [pc, #416]	; (45a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4406:	2200      	movs	r2, #0
    4408:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    440a:	4b68      	ldr	r3, [pc, #416]	; (45ac <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    440c:	681b      	ldr	r3, [r3, #0]
    440e:	685b      	ldr	r3, [r3, #4]
    4410:	4a67      	ldr	r2, [pc, #412]	; (45b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    4412:	6812      	ldr	r2, [r2, #0]
    4414:	4610      	mov	r0, r2
    4416:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    4418:	4b66      	ldr	r3, [pc, #408]	; (45b4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    441a:	681b      	ldr	r3, [r3, #0]
    441c:	681b      	ldr	r3, [r3, #0]
    441e:	4a66      	ldr	r2, [pc, #408]	; (45b8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    4420:	6812      	ldr	r2, [r2, #0]
    4422:	4610      	mov	r0, r2
    4424:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    4426:	4b65      	ldr	r3, [pc, #404]	; (45bc <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4428:	681b      	ldr	r3, [r3, #0]
    442a:	681b      	ldr	r3, [r3, #0]
    442c:	4a64      	ldr	r2, [pc, #400]	; (45c0 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    442e:	6812      	ldr	r2, [r2, #0]
    4430:	4610      	mov	r0, r2
    4432:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    4434:	4b63      	ldr	r3, [pc, #396]	; (45c4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4436:	681b      	ldr	r3, [r3, #0]
    4438:	681b      	ldr	r3, [r3, #0]
    443a:	4a63      	ldr	r2, [pc, #396]	; (45c8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    443c:	6812      	ldr	r2, [r2, #0]
    443e:	4610      	mov	r0, r2
    4440:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    4442:	4b62      	ldr	r3, [pc, #392]	; (45cc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4444:	681b      	ldr	r3, [r3, #0]
    4446:	691b      	ldr	r3, [r3, #16]
    4448:	4a61      	ldr	r2, [pc, #388]	; (45d0 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    444a:	6812      	ldr	r2, [r2, #0]
    444c:	6812      	ldr	r2, [r2, #0]
    444e:	4610      	mov	r0, r2
    4450:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    4452:	4b60      	ldr	r3, [pc, #384]	; (45d4 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4454:	681b      	ldr	r3, [r3, #0]
    4456:	68db      	ldr	r3, [r3, #12]
    4458:	4a5f      	ldr	r2, [pc, #380]	; (45d8 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    445a:	6812      	ldr	r2, [r2, #0]
    445c:	6812      	ldr	r2, [r2, #0]
    445e:	4610      	mov	r0, r2
    4460:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    4462:	4b5e      	ldr	r3, [pc, #376]	; (45dc <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4464:	681b      	ldr	r3, [r3, #0]
    4466:	689b      	ldr	r3, [r3, #8]
    4468:	4a5d      	ldr	r2, [pc, #372]	; (45e0 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    446a:	6812      	ldr	r2, [r2, #0]
    446c:	6812      	ldr	r2, [r2, #0]
    446e:	4610      	mov	r0, r2
    4470:	4798      	blx	r3
            }
        }
        break;
    4472:	e090      	b.n	4596 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4474:	9b00      	ldr	r3, [sp, #0]
    4476:	2b02      	cmp	r3, #2
    4478:	f040 808f 	bne.w	459a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    447c:	4b4a      	ldr	r3, [pc, #296]	; (45a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    447e:	2201      	movs	r2, #1
    4480:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4482:	4b56      	ldr	r3, [pc, #344]	; (45dc <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4484:	681b      	ldr	r3, [r3, #0]
    4486:	685b      	ldr	r3, [r3, #4]
    4488:	4a55      	ldr	r2, [pc, #340]	; (45e0 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    448a:	6812      	ldr	r2, [r2, #0]
    448c:	4610      	mov	r0, r2
    448e:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4490:	4b50      	ldr	r3, [pc, #320]	; (45d4 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4492:	681b      	ldr	r3, [r3, #0]
    4494:	691b      	ldr	r3, [r3, #16]
    4496:	4a50      	ldr	r2, [pc, #320]	; (45d8 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4498:	6812      	ldr	r2, [r2, #0]
    449a:	4610      	mov	r0, r2
    449c:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    449e:	4b4d      	ldr	r3, [pc, #308]	; (45d4 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    44a0:	681b      	ldr	r3, [r3, #0]
    44a2:	689b      	ldr	r3, [r3, #8]
    44a4:	4a4c      	ldr	r2, [pc, #304]	; (45d8 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    44a6:	6812      	ldr	r2, [r2, #0]
    44a8:	4610      	mov	r0, r2
    44aa:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    44ac:	4b47      	ldr	r3, [pc, #284]	; (45cc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    44ae:	681b      	ldr	r3, [r3, #0]
    44b0:	68db      	ldr	r3, [r3, #12]
    44b2:	4a47      	ldr	r2, [pc, #284]	; (45d0 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    44b4:	6812      	ldr	r2, [r2, #0]
    44b6:	4610      	mov	r0, r2
    44b8:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    44ba:	4b44      	ldr	r3, [pc, #272]	; (45cc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    44bc:	681b      	ldr	r3, [r3, #0]
    44be:	689b      	ldr	r3, [r3, #8]
    44c0:	4a43      	ldr	r2, [pc, #268]	; (45d0 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    44c2:	6812      	ldr	r2, [r2, #0]
    44c4:	6812      	ldr	r2, [r2, #0]
    44c6:	4610      	mov	r0, r2
    44c8:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    44ca:	4b38      	ldr	r3, [pc, #224]	; (45ac <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    44cc:	681b      	ldr	r3, [r3, #0]
    44ce:	685b      	ldr	r3, [r3, #4]
    44d0:	4a44      	ldr	r2, [pc, #272]	; (45e4 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    44d2:	6812      	ldr	r2, [r2, #0]
    44d4:	4610      	mov	r0, r2
    44d6:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    44d8:	4b36      	ldr	r3, [pc, #216]	; (45b4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    44da:	681b      	ldr	r3, [r3, #0]
    44dc:	681b      	ldr	r3, [r3, #0]
    44de:	4a42      	ldr	r2, [pc, #264]	; (45e8 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    44e0:	6812      	ldr	r2, [r2, #0]
    44e2:	4610      	mov	r0, r2
    44e4:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    44e6:	4b35      	ldr	r3, [pc, #212]	; (45bc <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    44e8:	681b      	ldr	r3, [r3, #0]
    44ea:	681b      	ldr	r3, [r3, #0]
    44ec:	4a3f      	ldr	r2, [pc, #252]	; (45ec <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    44ee:	6812      	ldr	r2, [r2, #0]
    44f0:	4610      	mov	r0, r2
    44f2:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    44f4:	4b33      	ldr	r3, [pc, #204]	; (45c4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    44f6:	681b      	ldr	r3, [r3, #0]
    44f8:	681b      	ldr	r3, [r3, #0]
    44fa:	4a3d      	ldr	r2, [pc, #244]	; (45f0 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    44fc:	6812      	ldr	r2, [r2, #0]
    44fe:	4610      	mov	r0, r2
    4500:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4502:	e04a      	b.n	459a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4504:	9b00      	ldr	r3, [sp, #0]
    4506:	2b02      	cmp	r3, #2
    4508:	d149      	bne.n	459e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    450a:	4b27      	ldr	r3, [pc, #156]	; (45a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    450c:	2201      	movs	r2, #1
    450e:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4510:	4b32      	ldr	r3, [pc, #200]	; (45dc <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4512:	681b      	ldr	r3, [r3, #0]
    4514:	685b      	ldr	r3, [r3, #4]
    4516:	4a32      	ldr	r2, [pc, #200]	; (45e0 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4518:	6812      	ldr	r2, [r2, #0]
    451a:	4610      	mov	r0, r2
    451c:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    451e:	4b2d      	ldr	r3, [pc, #180]	; (45d4 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4520:	681b      	ldr	r3, [r3, #0]
    4522:	691b      	ldr	r3, [r3, #16]
    4524:	4a2c      	ldr	r2, [pc, #176]	; (45d8 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4526:	6812      	ldr	r2, [r2, #0]
    4528:	4610      	mov	r0, r2
    452a:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    452c:	4b29      	ldr	r3, [pc, #164]	; (45d4 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    452e:	681b      	ldr	r3, [r3, #0]
    4530:	689b      	ldr	r3, [r3, #8]
    4532:	4a29      	ldr	r2, [pc, #164]	; (45d8 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4534:	6812      	ldr	r2, [r2, #0]
    4536:	4610      	mov	r0, r2
    4538:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    453a:	4b24      	ldr	r3, [pc, #144]	; (45cc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    453c:	681b      	ldr	r3, [r3, #0]
    453e:	68db      	ldr	r3, [r3, #12]
    4540:	4a23      	ldr	r2, [pc, #140]	; (45d0 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4542:	6812      	ldr	r2, [r2, #0]
    4544:	4610      	mov	r0, r2
    4546:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4548:	4b20      	ldr	r3, [pc, #128]	; (45cc <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    454a:	681b      	ldr	r3, [r3, #0]
    454c:	689b      	ldr	r3, [r3, #8]
    454e:	4a20      	ldr	r2, [pc, #128]	; (45d0 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4550:	6812      	ldr	r2, [r2, #0]
    4552:	6812      	ldr	r2, [r2, #0]
    4554:	4610      	mov	r0, r2
    4556:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    4558:	4b26      	ldr	r3, [pc, #152]	; (45f4 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    455a:	681b      	ldr	r3, [r3, #0]
    455c:	685b      	ldr	r3, [r3, #4]
    455e:	4a26      	ldr	r2, [pc, #152]	; (45f8 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4560:	6812      	ldr	r2, [r2, #0]
    4562:	4610      	mov	r0, r2
    4564:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    4566:	4b25      	ldr	r3, [pc, #148]	; (45fc <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    4568:	681b      	ldr	r3, [r3, #0]
    456a:	681b      	ldr	r3, [r3, #0]
    456c:	4a24      	ldr	r2, [pc, #144]	; (4600 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    456e:	6812      	ldr	r2, [r2, #0]
    4570:	4610      	mov	r0, r2
    4572:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    4574:	4b23      	ldr	r3, [pc, #140]	; (4604 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    4576:	681b      	ldr	r3, [r3, #0]
    4578:	681b      	ldr	r3, [r3, #0]
    457a:	4a23      	ldr	r2, [pc, #140]	; (4608 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    457c:	6812      	ldr	r2, [r2, #0]
    457e:	4610      	mov	r0, r2
    4580:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    4582:	4b22      	ldr	r3, [pc, #136]	; (460c <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    4584:	681b      	ldr	r3, [r3, #0]
    4586:	681b      	ldr	r3, [r3, #0]
    4588:	4a21      	ldr	r2, [pc, #132]	; (4610 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    458a:	6812      	ldr	r2, [r2, #0]
    458c:	4610      	mov	r0, r2
    458e:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4590:	e005      	b.n	459e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    4592:	bf00      	nop
    4594:	e004      	b.n	45a0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4596:	bf00      	nop
    4598:	e002      	b.n	45a0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    459a:	bf00      	nop
    459c:	e000      	b.n	45a0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    459e:	bf00      	nop
    }

}
    45a0:	bf00      	nop
    45a2:	b003      	add	sp, #12
    45a4:	f85d fb04 	ldr.w	pc, [sp], #4
    45a8:	1fff8b19 	.word	0x1fff8b19
    45ac:	1fff8bb8 	.word	0x1fff8bb8
    45b0:	1fff8bd8 	.word	0x1fff8bd8
    45b4:	1fff8bbc 	.word	0x1fff8bbc
    45b8:	1fff8be0 	.word	0x1fff8be0
    45bc:	1fff8bc0 	.word	0x1fff8bc0
    45c0:	1fff8be8 	.word	0x1fff8be8
    45c4:	1fff8bc4 	.word	0x1fff8bc4
    45c8:	1fff8bf0 	.word	0x1fff8bf0
    45cc:	1fff8bac 	.word	0x1fff8bac
    45d0:	1fff8bd0 	.word	0x1fff8bd0
    45d4:	1fff8bb0 	.word	0x1fff8bb0
    45d8:	1fff8bcc 	.word	0x1fff8bcc
    45dc:	1fff8bb4 	.word	0x1fff8bb4
    45e0:	1fff8bc8 	.word	0x1fff8bc8
    45e4:	1fff8bd4 	.word	0x1fff8bd4
    45e8:	1fff8bdc 	.word	0x1fff8bdc
    45ec:	1fff8be4 	.word	0x1fff8be4
    45f0:	1fff8bec 	.word	0x1fff8bec
    45f4:	1fff8bf4 	.word	0x1fff8bf4
    45f8:	1fff8c04 	.word	0x1fff8c04
    45fc:	1fff8bf8 	.word	0x1fff8bf8
    4600:	1fff8c08 	.word	0x1fff8c08
    4604:	1fff8bfc 	.word	0x1fff8bfc
    4608:	1fff8c0c 	.word	0x1fff8c0c
    460c:	1fff8c00 	.word	0x1fff8c00
    4610:	1fff8c10 	.word	0x1fff8c10

00004614 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    4614:	b500      	push	{lr}
    4616:	b083      	sub	sp, #12
    4618:	9001      	str	r0, [sp, #4]
    461a:	9100      	str	r1, [sp, #0]
    switch(Command)
    461c:	9b00      	ldr	r3, [sp, #0]
    461e:	2b04      	cmp	r3, #4
    4620:	d010      	beq.n	4644 <Clock_Ip_Command+0x30>
    4622:	9b00      	ldr	r3, [sp, #0]
    4624:	2b04      	cmp	r3, #4
    4626:	d811      	bhi.n	464c <Clock_Ip_Command+0x38>
    4628:	9b00      	ldr	r3, [sp, #0]
    462a:	2b01      	cmp	r3, #1
    462c:	d006      	beq.n	463c <Clock_Ip_Command+0x28>
    462e:	9b00      	ldr	r3, [sp, #0]
    4630:	2b02      	cmp	r3, #2
    4632:	d10b      	bne.n	464c <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    4634:	9801      	ldr	r0, [sp, #4]
    4636:	f7ff fdb3 	bl	41a0 <Clock_Ip_ClockInitializeObjects>
            break;
    463a:	e008      	b.n	464e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    463c:	9801      	ldr	r0, [sp, #4]
    463e:	f7ff f9db 	bl	39f8 <Clock_Ip_SpecificPlatformInitClock>
            break;
    4642:	e004      	b.n	464e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    4644:	9801      	ldr	r0, [sp, #4]
    4646:	f7ff f8ed 	bl	3824 <DisableSafeClock>
            break;
    464a:	e000      	b.n	464e <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    464c:	bf00      	nop
    }
}
    464e:	bf00      	nop
    4650:	b003      	add	sp, #12
    4652:	f85d fb04 	ldr.w	pc, [sp], #4
    4656:	bf00      	nop

00004658 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    4658:	b500      	push	{lr}
    465a:	b085      	sub	sp, #20
    465c:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    465e:	4a20      	ldr	r2, [pc, #128]	; (46e0 <Mcu_Init+0x88>)
    4660:	9b01      	ldr	r3, [sp, #4]
    4662:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4664:	2300      	movs	r3, #0
    4666:	9303      	str	r3, [sp, #12]
    4668:	e010      	b.n	468c <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    466a:	4b1d      	ldr	r3, [pc, #116]	; (46e0 <Mcu_Init+0x88>)
    466c:	681b      	ldr	r3, [r3, #0]
    466e:	6919      	ldr	r1, [r3, #16]
    4670:	9a03      	ldr	r2, [sp, #12]
    4672:	4613      	mov	r3, r2
    4674:	005b      	lsls	r3, r3, #1
    4676:	4413      	add	r3, r2
    4678:	009b      	lsls	r3, r3, #2
    467a:	440b      	add	r3, r1
    467c:	681b      	ldr	r3, [r3, #0]
    467e:	9a03      	ldr	r2, [sp, #12]
    4680:	b2d1      	uxtb	r1, r2
    4682:	4a18      	ldr	r2, [pc, #96]	; (46e4 <Mcu_Init+0x8c>)
    4684:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4686:	9b03      	ldr	r3, [sp, #12]
    4688:	3301      	adds	r3, #1
    468a:	9303      	str	r3, [sp, #12]
    468c:	4b14      	ldr	r3, [pc, #80]	; (46e0 <Mcu_Init+0x88>)
    468e:	681b      	ldr	r3, [r3, #0]
    4690:	689b      	ldr	r3, [r3, #8]
    4692:	9a03      	ldr	r2, [sp, #12]
    4694:	429a      	cmp	r2, r3
    4696:	d3e8      	bcc.n	466a <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4698:	2300      	movs	r3, #0
    469a:	9303      	str	r3, [sp, #12]
    469c:	e010      	b.n	46c0 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    469e:	4b10      	ldr	r3, [pc, #64]	; (46e0 <Mcu_Init+0x88>)
    46a0:	681b      	ldr	r3, [r3, #0]
    46a2:	6959      	ldr	r1, [r3, #20]
    46a4:	9a03      	ldr	r2, [sp, #12]
    46a6:	4613      	mov	r3, r2
    46a8:	01db      	lsls	r3, r3, #7
    46aa:	1a9b      	subs	r3, r3, r2
    46ac:	00db      	lsls	r3, r3, #3
    46ae:	440b      	add	r3, r1
    46b0:	681b      	ldr	r3, [r3, #0]
    46b2:	9a03      	ldr	r2, [sp, #12]
    46b4:	b2d1      	uxtb	r1, r2
    46b6:	4a0c      	ldr	r2, [pc, #48]	; (46e8 <Mcu_Init+0x90>)
    46b8:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    46ba:	9b03      	ldr	r3, [sp, #12]
    46bc:	3301      	adds	r3, #1
    46be:	9303      	str	r3, [sp, #12]
    46c0:	4b07      	ldr	r3, [pc, #28]	; (46e0 <Mcu_Init+0x88>)
    46c2:	681b      	ldr	r3, [r3, #0]
    46c4:	68db      	ldr	r3, [r3, #12]
    46c6:	9a03      	ldr	r2, [sp, #12]
    46c8:	429a      	cmp	r2, r3
    46ca:	d3e8      	bcc.n	469e <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    46cc:	4b04      	ldr	r3, [pc, #16]	; (46e0 <Mcu_Init+0x88>)
    46ce:	681b      	ldr	r3, [r3, #0]
    46d0:	699b      	ldr	r3, [r3, #24]
    46d2:	4618      	mov	r0, r3
    46d4:	f000 f88a 	bl	47ec <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    46d8:	bf00      	nop
    46da:	b005      	add	sp, #20
    46dc:	f85d fb04 	ldr.w	pc, [sp], #4
    46e0:	1fff8cec 	.word	0x1fff8cec
    46e4:	1fff8ce8 	.word	0x1fff8ce8
    46e8:	1fff8ce4 	.word	0x1fff8ce4

000046ec <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    46ec:	b084      	sub	sp, #16
    46ee:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    46f0:	2301      	movs	r3, #1
    46f2:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    46f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    46fa:	4618      	mov	r0, r3
    46fc:	b004      	add	sp, #16
    46fe:	4770      	bx	lr

00004700 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    4700:	b500      	push	{lr}
    4702:	b085      	sub	sp, #20
    4704:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    4706:	4a0e      	ldr	r2, [pc, #56]	; (4740 <Mcu_InitClock+0x40>)
    4708:	9b01      	ldr	r3, [sp, #4]
    470a:	4413      	add	r3, r2
    470c:	781b      	ldrb	r3, [r3, #0]
    470e:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    4712:	4b0c      	ldr	r3, [pc, #48]	; (4744 <Mcu_InitClock+0x44>)
    4714:	681b      	ldr	r3, [r3, #0]
    4716:	6959      	ldr	r1, [r3, #20]
    4718:	f89d 200f 	ldrb.w	r2, [sp, #15]
    471c:	4613      	mov	r3, r2
    471e:	01db      	lsls	r3, r3, #7
    4720:	1a9b      	subs	r3, r3, r2
    4722:	00db      	lsls	r3, r3, #3
    4724:	440b      	add	r3, r1
    4726:	4618      	mov	r0, r3
    4728:	f000 f86a 	bl	4800 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    472c:	2300      	movs	r3, #0
    472e:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    4732:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    4736:	4618      	mov	r0, r3
    4738:	b005      	add	sp, #20
    473a:	f85d fb04 	ldr.w	pc, [sp], #4
    473e:	bf00      	nop
    4740:	1fff8ce4 	.word	0x1fff8ce4
    4744:	1fff8cec 	.word	0x1fff8cec

00004748 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    4748:	b500      	push	{lr}
    474a:	b085      	sub	sp, #20
    474c:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    474e:	4a0d      	ldr	r2, [pc, #52]	; (4784 <Mcu_SetMode+0x3c>)
    4750:	9b01      	ldr	r3, [sp, #4]
    4752:	4413      	add	r3, r2
    4754:	781b      	ldrb	r3, [r3, #0]
    4756:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    475a:	f001 fb27 	bl	5dac <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    475e:	4b0a      	ldr	r3, [pc, #40]	; (4788 <Mcu_SetMode+0x40>)
    4760:	681b      	ldr	r3, [r3, #0]
    4762:	6919      	ldr	r1, [r3, #16]
    4764:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4768:	4613      	mov	r3, r2
    476a:	005b      	lsls	r3, r3, #1
    476c:	4413      	add	r3, r2
    476e:	009b      	lsls	r3, r3, #2
    4770:	440b      	add	r3, r1
    4772:	4618      	mov	r0, r3
    4774:	f000 f84e 	bl	4814 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    4778:	f001 fb44 	bl	5e04 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    477c:	bf00      	nop
    477e:	b005      	add	sp, #20
    4780:	f85d fb04 	ldr.w	pc, [sp], #4
    4784:	1fff8ce8 	.word	0x1fff8ce8
    4788:	1fff8cec 	.word	0x1fff8cec

0000478c <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    478c:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    478e:	2302      	movs	r3, #2
    4790:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    4792:	9b01      	ldr	r3, [sp, #4]
}
    4794:	4618      	mov	r0, r3
    4796:	b002      	add	sp, #8
    4798:	4770      	bx	lr

0000479a <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    479a:	b500      	push	{lr}
    479c:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    479e:	f000 f843 	bl	4828 <Mcu_Ipw_GetResetReason>
    47a2:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    47a4:	9b01      	ldr	r3, [sp, #4]
}
    47a6:	4618      	mov	r0, r3
    47a8:	b003      	add	sp, #12
    47aa:	f85d fb04 	ldr.w	pc, [sp], #4

000047ae <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    47ae:	b500      	push	{lr}
    47b0:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    47b2:	f000 f83f 	bl	4834 <Mcu_Ipw_GetResetRawValue>
    47b6:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    47b8:	9b01      	ldr	r3, [sp, #4]
}
    47ba:	4618      	mov	r0, r3
    47bc:	b003      	add	sp, #12
    47be:	f85d fb04 	ldr.w	pc, [sp], #4

000047c2 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    47c2:	b500      	push	{lr}
    47c4:	b083      	sub	sp, #12
    47c6:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    47c8:	9801      	ldr	r0, [sp, #4]
    47ca:	f000 f839 	bl	4840 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    47ce:	bf00      	nop
    47d0:	b003      	add	sp, #12
    47d2:	f85d fb04 	ldr.w	pc, [sp], #4

000047d6 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    47d6:	b082      	sub	sp, #8
    47d8:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    47da:	4b03      	ldr	r3, [pc, #12]	; (47e8 <Mcu_ClkSrcFailureNotification+0x12>)
    47dc:	681b      	ldr	r3, [r3, #0]
    47de:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    47e0:	bf00      	nop
    47e2:	b002      	add	sp, #8
    47e4:	4770      	bx	lr
    47e6:	bf00      	nop
    47e8:	1fff8cec 	.word	0x1fff8cec

000047ec <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    47ec:	b500      	push	{lr}
    47ee:	b083      	sub	sp, #12
    47f0:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    47f2:	9801      	ldr	r0, [sp, #4]
    47f4:	f000 f882 	bl	48fc <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    47f8:	bf00      	nop
    47fa:	b003      	add	sp, #12
    47fc:	f85d fb04 	ldr.w	pc, [sp], #4

00004800 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    4800:	b500      	push	{lr}
    4802:	b083      	sub	sp, #12
    4804:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    4806:	9801      	ldr	r0, [sp, #4]
    4808:	f7fc fc6a 	bl	10e0 <Clock_Ip_InitClock>
}
    480c:	bf00      	nop
    480e:	b003      	add	sp, #12
    4810:	f85d fb04 	ldr.w	pc, [sp], #4

00004814 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    4814:	b500      	push	{lr}
    4816:	b083      	sub	sp, #12
    4818:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    481a:	9801      	ldr	r0, [sp, #4]
    481c:	f000 f820 	bl	4860 <Power_Ip_SetMode>
}
    4820:	bf00      	nop
    4822:	b003      	add	sp, #12
    4824:	f85d fb04 	ldr.w	pc, [sp], #4

00004828 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    4828:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    482a:	f000 f84f 	bl	48cc <Power_Ip_GetResetReason>
    482e:	4603      	mov	r3, r0
}
    4830:	4618      	mov	r0, r3
    4832:	bd08      	pop	{r3, pc}

00004834 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    4834:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    4836:	f000 f857 	bl	48e8 <Power_Ip_GetResetRawValue>
    483a:	4603      	mov	r3, r0
}
    483c:	4618      	mov	r0, r3
    483e:	bd08      	pop	{r3, pc}

00004840 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4840:	b500      	push	{lr}
    4842:	b083      	sub	sp, #12
    4844:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    4846:	9b01      	ldr	r3, [sp, #4]
    4848:	2b00      	cmp	r3, #0
    484a:	d102      	bne.n	4852 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    484c:	f000 f86c 	bl	4928 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    4850:	e001      	b.n	4856 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    4852:	f000 f86e 	bl	4932 <Power_Ip_EnableSleepOnExit>
}
    4856:	bf00      	nop
    4858:	b003      	add	sp, #12
    485a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00004860 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4860:	b500      	push	{lr}
    4862:	b085      	sub	sp, #20
    4864:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    4866:	9b01      	ldr	r3, [sp, #4]
    4868:	685b      	ldr	r3, [r3, #4]
    486a:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    486c:	9802      	ldr	r0, [sp, #8]
    486e:	f000 f9f5 	bl	4c5c <Power_Ip_SMC_ModeCheckEntry>
    4872:	4603      	mov	r3, r0
    4874:	2b00      	cmp	r3, #0
    4876:	d002      	beq.n	487e <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4878:	2301      	movs	r3, #1
    487a:	9303      	str	r3, [sp, #12]
    487c:	e003      	b.n	4886 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    487e:	9801      	ldr	r0, [sp, #4]
    4880:	f000 fa1e 	bl	4cc0 <Power_Ip_SMC_ModeConfig>
    4884:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    4886:	9b03      	ldr	r3, [sp, #12]
    4888:	2b01      	cmp	r3, #1
    488a:	d103      	bne.n	4894 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    488c:	21ff      	movs	r1, #255	; 0xff
    488e:	2003      	movs	r0, #3
    4890:	f000 f8f4 	bl	4a7c <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    4894:	bf00      	nop
    4896:	b005      	add	sp, #20
    4898:	f85d fb04 	ldr.w	pc, [sp], #4

0000489c <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    489c:	b084      	sub	sp, #16
    489e:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    48a0:	230c      	movs	r3, #12
    48a2:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    48a4:	4a08      	ldr	r2, [pc, #32]	; (48c8 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    48a6:	9b01      	ldr	r3, [sp, #4]
    48a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    48ac:	2b0e      	cmp	r3, #14
    48ae:	d805      	bhi.n	48bc <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    48b0:	4a05      	ldr	r2, [pc, #20]	; (48c8 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    48b2:	9b01      	ldr	r3, [sp, #4]
    48b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    48b8:	9303      	str	r3, [sp, #12]
    48ba:	e001      	b.n	48c0 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    48bc:	230c      	movs	r3, #12
    48be:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    48c0:	9b03      	ldr	r3, [sp, #12]
}
    48c2:	4618      	mov	r0, r3
    48c4:	b004      	add	sp, #16
    48c6:	4770      	bx	lr
    48c8:	000078d4 	.word	0x000078d4

000048cc <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    48cc:	b500      	push	{lr}
    48ce:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    48d0:	f000 f940 	bl	4b54 <Power_Ip_RCM_GetResetReason>
    48d4:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    48d6:	9801      	ldr	r0, [sp, #4]
    48d8:	f7ff ffe0 	bl	489c <Power_Ip_ConvertIntergeToResetType>
    48dc:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    48de:	9b00      	ldr	r3, [sp, #0]
}
    48e0:	4618      	mov	r0, r3
    48e2:	b003      	add	sp, #12
    48e4:	f85d fb04 	ldr.w	pc, [sp], #4

000048e8 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    48e8:	b500      	push	{lr}
    48ea:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    48ec:	f000 f98a 	bl	4c04 <Power_Ip_RCM_GetResetRawValue>
    48f0:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    48f2:	9b01      	ldr	r3, [sp, #4]
}
    48f4:	4618      	mov	r0, r3
    48f6:	b003      	add	sp, #12
    48f8:	f85d fb04 	ldr.w	pc, [sp], #4

000048fc <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    48fc:	b500      	push	{lr}
    48fe:	b083      	sub	sp, #12
    4900:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    4902:	9b01      	ldr	r3, [sp, #4]
    4904:	681b      	ldr	r3, [r3, #0]
    4906:	4618      	mov	r0, r3
    4908:	f000 f90e 	bl	4b28 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    490c:	9b01      	ldr	r3, [sp, #4]
    490e:	685b      	ldr	r3, [r3, #4]
    4910:	4618      	mov	r0, r3
    4912:	f000 f86d 	bl	49f0 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    4916:	9b01      	ldr	r3, [sp, #4]
    4918:	689b      	ldr	r3, [r3, #8]
    491a:	4618      	mov	r0, r3
    491c:	f000 f990 	bl	4c40 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    4920:	bf00      	nop
    4922:	b003      	add	sp, #12
    4924:	f85d fb04 	ldr.w	pc, [sp], #4

00004928 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    4928:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    492a:	f000 f811 	bl	4950 <Power_Ip_CM4_DisableSleepOnExit>
}
    492e:	bf00      	nop
    4930:	bd08      	pop	{r3, pc}

00004932 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    4932:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    4934:	f000 f820 	bl	4978 <Power_Ip_CM4_EnableSleepOnExit>
}
    4938:	bf00      	nop
    493a:	bd08      	pop	{r3, pc}

0000493c <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    493c:	b082      	sub	sp, #8
    493e:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    4940:	4a02      	ldr	r2, [pc, #8]	; (494c <Power_Ip_InstallNotificationsCallback+0x10>)
    4942:	9b01      	ldr	r3, [sp, #4]
    4944:	6013      	str	r3, [r2, #0]
}
    4946:	bf00      	nop
    4948:	b002      	add	sp, #8
    494a:	4770      	bx	lr
    494c:	1fff8b1c 	.word	0x1fff8b1c

00004950 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    4950:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4952:	2300      	movs	r3, #0
    4954:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4956:	4b07      	ldr	r3, [pc, #28]	; (4974 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4958:	681b      	ldr	r3, [r3, #0]
    495a:	685b      	ldr	r3, [r3, #4]
    495c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    495e:	9b01      	ldr	r3, [sp, #4]
    4960:	f023 0302 	bic.w	r3, r3, #2
    4964:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4966:	4b03      	ldr	r3, [pc, #12]	; (4974 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4968:	681b      	ldr	r3, [r3, #0]
    496a:	9a01      	ldr	r2, [sp, #4]
    496c:	605a      	str	r2, [r3, #4]
}
    496e:	bf00      	nop
    4970:	b002      	add	sp, #8
    4972:	4770      	bx	lr
    4974:	1fff8b20 	.word	0x1fff8b20

00004978 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    4978:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    497a:	2300      	movs	r3, #0
    497c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    497e:	4b07      	ldr	r3, [pc, #28]	; (499c <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4980:	681b      	ldr	r3, [r3, #0]
    4982:	685b      	ldr	r3, [r3, #4]
    4984:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    4986:	9b01      	ldr	r3, [sp, #4]
    4988:	f043 0302 	orr.w	r3, r3, #2
    498c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    498e:	4b03      	ldr	r3, [pc, #12]	; (499c <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4990:	681b      	ldr	r3, [r3, #0]
    4992:	9a01      	ldr	r2, [sp, #4]
    4994:	605a      	str	r2, [r3, #4]
}
    4996:	bf00      	nop
    4998:	b002      	add	sp, #8
    499a:	4770      	bx	lr
    499c:	1fff8b20 	.word	0x1fff8b20

000049a0 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    49a0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    49a2:	2300      	movs	r3, #0
    49a4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    49a6:	4b07      	ldr	r3, [pc, #28]	; (49c4 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    49a8:	681b      	ldr	r3, [r3, #0]
    49aa:	685b      	ldr	r3, [r3, #4]
    49ac:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    49ae:	9b01      	ldr	r3, [sp, #4]
    49b0:	f043 0304 	orr.w	r3, r3, #4
    49b4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    49b6:	4b03      	ldr	r3, [pc, #12]	; (49c4 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    49b8:	681b      	ldr	r3, [r3, #0]
    49ba:	9a01      	ldr	r2, [sp, #4]
    49bc:	605a      	str	r2, [r3, #4]
}
    49be:	bf00      	nop
    49c0:	b002      	add	sp, #8
    49c2:	4770      	bx	lr
    49c4:	1fff8b20 	.word	0x1fff8b20

000049c8 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    49c8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    49ca:	2300      	movs	r3, #0
    49cc:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    49ce:	4b07      	ldr	r3, [pc, #28]	; (49ec <Power_Ip_CM4_DisableDeepSleep+0x24>)
    49d0:	681b      	ldr	r3, [r3, #0]
    49d2:	685b      	ldr	r3, [r3, #4]
    49d4:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    49d6:	9b01      	ldr	r3, [sp, #4]
    49d8:	f023 0304 	bic.w	r3, r3, #4
    49dc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    49de:	4b03      	ldr	r3, [pc, #12]	; (49ec <Power_Ip_CM4_DisableDeepSleep+0x24>)
    49e0:	681b      	ldr	r3, [r3, #0]
    49e2:	9a01      	ldr	r2, [sp, #4]
    49e4:	605a      	str	r2, [r3, #4]
}
    49e6:	bf00      	nop
    49e8:	b002      	add	sp, #8
    49ea:	4770      	bx	lr
    49ec:	1fff8b20 	.word	0x1fff8b20

000049f0 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    49f0:	b084      	sub	sp, #16
    49f2:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    49f4:	4b20      	ldr	r3, [pc, #128]	; (4a78 <Power_Ip_PMC_PowerInit+0x88>)
    49f6:	781b      	ldrb	r3, [r3, #0]
    49f8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    49fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a00:	f003 030f 	and.w	r3, r3, #15
    4a04:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    4a08:	9b01      	ldr	r3, [sp, #4]
    4a0a:	781a      	ldrb	r2, [r3, #0]
    4a0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a10:	4313      	orrs	r3, r2
    4a12:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    4a16:	4a18      	ldr	r2, [pc, #96]	; (4a78 <Power_Ip_PMC_PowerInit+0x88>)
    4a18:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a1c:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    4a1e:	4b16      	ldr	r3, [pc, #88]	; (4a78 <Power_Ip_PMC_PowerInit+0x88>)
    4a20:	785b      	ldrb	r3, [r3, #1]
    4a22:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    4a26:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a2a:	f003 031f 	and.w	r3, r3, #31
    4a2e:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    4a32:	9b01      	ldr	r3, [sp, #4]
    4a34:	785a      	ldrb	r2, [r3, #1]
    4a36:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a3a:	4313      	orrs	r3, r2
    4a3c:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    4a40:	4a0d      	ldr	r2, [pc, #52]	; (4a78 <Power_Ip_PMC_PowerInit+0x88>)
    4a42:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a46:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    4a48:	4b0b      	ldr	r3, [pc, #44]	; (4a78 <Power_Ip_PMC_PowerInit+0x88>)
    4a4a:	789b      	ldrb	r3, [r3, #2]
    4a4c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    4a50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a54:	f003 0338 	and.w	r3, r3, #56	; 0x38
    4a58:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    4a5c:	9b01      	ldr	r3, [sp, #4]
    4a5e:	789a      	ldrb	r2, [r3, #2]
    4a60:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a64:	4313      	orrs	r3, r2
    4a66:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    4a6a:	4a03      	ldr	r2, [pc, #12]	; (4a78 <Power_Ip_PMC_PowerInit+0x88>)
    4a6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a70:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    4a72:	bf00      	nop
    4a74:	b004      	add	sp, #16
    4a76:	4770      	bx	lr
    4a78:	4007d000 	.word	0x4007d000

00004a7c <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    4a7c:	b500      	push	{lr}
    4a7e:	b083      	sub	sp, #12
    4a80:	9001      	str	r0, [sp, #4]
    4a82:	460b      	mov	r3, r1
    4a84:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    4a88:	4b05      	ldr	r3, [pc, #20]	; (4aa0 <Power_Ip_ReportPowerErrors+0x24>)
    4a8a:	681b      	ldr	r3, [r3, #0]
    4a8c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4a90:	4611      	mov	r1, r2
    4a92:	9801      	ldr	r0, [sp, #4]
    4a94:	4798      	blx	r3
}
    4a96:	bf00      	nop
    4a98:	b003      	add	sp, #12
    4a9a:	f85d fb04 	ldr.w	pc, [sp], #4
    4a9e:	bf00      	nop
    4aa0:	1fff8b1c 	.word	0x1fff8b1c

00004aa4 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    4aa4:	b082      	sub	sp, #8
    4aa6:	9001      	str	r0, [sp, #4]
    4aa8:	460b      	mov	r3, r1
    4aaa:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    4aae:	bf00      	nop
    4ab0:	b002      	add	sp, #8
    4ab2:	4770      	bx	lr

00004ab4 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    4ab4:	b500      	push	{lr}
    4ab6:	b085      	sub	sp, #20
    4ab8:	9003      	str	r0, [sp, #12]
    4aba:	9102      	str	r1, [sp, #8]
    4abc:	9201      	str	r2, [sp, #4]
    4abe:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    4ac0:	2000      	movs	r0, #0
    4ac2:	f7fc f83c 	bl	b3e <OsIf_GetCounter>
    4ac6:	4602      	mov	r2, r0
    4ac8:	9b03      	ldr	r3, [sp, #12]
    4aca:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    4acc:	9b02      	ldr	r3, [sp, #8]
    4ace:	2200      	movs	r2, #0
    4ad0:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    4ad2:	2100      	movs	r1, #0
    4ad4:	9800      	ldr	r0, [sp, #0]
    4ad6:	f7fc f87e 	bl	bd6 <OsIf_MicrosToTicks>
    4ada:	4602      	mov	r2, r0
    4adc:	9b01      	ldr	r3, [sp, #4]
    4ade:	601a      	str	r2, [r3, #0]
}
    4ae0:	bf00      	nop
    4ae2:	b005      	add	sp, #20
    4ae4:	f85d fb04 	ldr.w	pc, [sp], #4

00004ae8 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    4ae8:	b500      	push	{lr}
    4aea:	b087      	sub	sp, #28
    4aec:	9003      	str	r0, [sp, #12]
    4aee:	9102      	str	r1, [sp, #8]
    4af0:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    4af2:	2300      	movs	r3, #0
    4af4:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    4af8:	2100      	movs	r1, #0
    4afa:	9803      	ldr	r0, [sp, #12]
    4afc:	f7fc f838 	bl	b70 <OsIf_GetElapsed>
    4b00:	4602      	mov	r2, r0
    4b02:	9b02      	ldr	r3, [sp, #8]
    4b04:	681b      	ldr	r3, [r3, #0]
    4b06:	441a      	add	r2, r3
    4b08:	9b02      	ldr	r3, [sp, #8]
    4b0a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    4b0c:	9b02      	ldr	r3, [sp, #8]
    4b0e:	681b      	ldr	r3, [r3, #0]
    4b10:	9a01      	ldr	r2, [sp, #4]
    4b12:	429a      	cmp	r2, r3
    4b14:	d802      	bhi.n	4b1c <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    4b16:	2301      	movs	r3, #1
    4b18:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    4b1c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    4b20:	4618      	mov	r0, r3
    4b22:	b007      	add	sp, #28
    4b24:	f85d fb04 	ldr.w	pc, [sp], #4

00004b28 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    4b28:	b082      	sub	sp, #8
    4b2a:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    4b2c:	9b01      	ldr	r3, [sp, #4]
    4b2e:	681a      	ldr	r2, [r3, #0]
    4b30:	4907      	ldr	r1, [pc, #28]	; (4b50 <Power_Ip_RCM_ResetInit+0x28>)
    4b32:	f641 7307 	movw	r3, #7943	; 0x1f07
    4b36:	4013      	ands	r3, r2
    4b38:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    4b3a:	9b01      	ldr	r3, [sp, #4]
    4b3c:	685a      	ldr	r2, [r3, #4]
    4b3e:	4904      	ldr	r1, [pc, #16]	; (4b50 <Power_Ip_RCM_ResetInit+0x28>)
    4b40:	f642 73ff 	movw	r3, #12287	; 0x2fff
    4b44:	4013      	ands	r3, r2
    4b46:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    4b48:	bf00      	nop
    4b4a:	b002      	add	sp, #8
    4b4c:	4770      	bx	lr
    4b4e:	bf00      	nop
    4b50:	4007f000 	.word	0x4007f000

00004b54 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    4b54:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    4b56:	230c      	movs	r3, #12
    4b58:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    4b5a:	2300      	movs	r3, #0
    4b5c:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    4b5e:	2300      	movs	r3, #0
    4b60:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    4b62:	2300      	movs	r3, #0
    4b64:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    4b66:	4b25      	ldr	r3, [pc, #148]	; (4bfc <Power_Ip_RCM_GetResetReason+0xa8>)
    4b68:	699a      	ldr	r2, [r3, #24]
    4b6a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4b6e:	4013      	ands	r3, r2
    4b70:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    4b72:	9b03      	ldr	r3, [sp, #12]
    4b74:	2b00      	cmp	r3, #0
    4b76:	d008      	beq.n	4b8a <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    4b78:	4920      	ldr	r1, [pc, #128]	; (4bfc <Power_Ip_RCM_GetResetReason+0xa8>)
    4b7a:	9a03      	ldr	r2, [sp, #12]
    4b7c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4b80:	4013      	ands	r3, r2
    4b82:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    4b84:	4a1e      	ldr	r2, [pc, #120]	; (4c00 <Power_Ip_RCM_GetResetReason+0xac>)
    4b86:	9b03      	ldr	r3, [sp, #12]
    4b88:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    4b8a:	4b1d      	ldr	r3, [pc, #116]	; (4c00 <Power_Ip_RCM_GetResetReason+0xac>)
    4b8c:	681b      	ldr	r3, [r3, #0]
    4b8e:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    4b90:	9a02      	ldr	r2, [sp, #8]
    4b92:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4b96:	4013      	ands	r3, r2
    4b98:	2b82      	cmp	r3, #130	; 0x82
    4b9a:	d102      	bne.n	4ba2 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    4b9c:	2305      	movs	r3, #5
    4b9e:	9307      	str	r3, [sp, #28]
    4ba0:	e027      	b.n	4bf2 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    4ba2:	2300      	movs	r3, #0
    4ba4:	9306      	str	r3, [sp, #24]
    4ba6:	e021      	b.n	4bec <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    4ba8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4bac:	9b06      	ldr	r3, [sp, #24]
    4bae:	fa22 f303 	lsr.w	r3, r2, r3
    4bb2:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    4bb4:	9a01      	ldr	r2, [sp, #4]
    4bb6:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    4bba:	4013      	ands	r3, r2
    4bbc:	2b00      	cmp	r3, #0
    4bbe:	d012      	beq.n	4be6 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    4bc0:	9a01      	ldr	r2, [sp, #4]
    4bc2:	9b02      	ldr	r3, [sp, #8]
    4bc4:	4013      	ands	r3, r2
    4bc6:	2b00      	cmp	r3, #0
    4bc8:	d00a      	beq.n	4be0 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    4bca:	9b05      	ldr	r3, [sp, #20]
    4bcc:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    4bce:	9b04      	ldr	r3, [sp, #16]
    4bd0:	3301      	adds	r3, #1
    4bd2:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    4bd4:	9b04      	ldr	r3, [sp, #16]
    4bd6:	2b01      	cmp	r3, #1
    4bd8:	d902      	bls.n	4be0 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    4bda:	230d      	movs	r3, #13
    4bdc:	9307      	str	r3, [sp, #28]
                        break;
    4bde:	e008      	b.n	4bf2 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    4be0:	9b05      	ldr	r3, [sp, #20]
    4be2:	3301      	adds	r3, #1
    4be4:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    4be6:	9b06      	ldr	r3, [sp, #24]
    4be8:	3301      	adds	r3, #1
    4bea:	9306      	str	r3, [sp, #24]
    4bec:	9b06      	ldr	r3, [sp, #24]
    4bee:	2b1f      	cmp	r3, #31
    4bf0:	d9da      	bls.n	4ba8 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    4bf2:	9b07      	ldr	r3, [sp, #28]
}
    4bf4:	4618      	mov	r0, r3
    4bf6:	b008      	add	sp, #32
    4bf8:	4770      	bx	lr
    4bfa:	bf00      	nop
    4bfc:	4007f000 	.word	0x4007f000
    4c00:	1fff8cf0 	.word	0x1fff8cf0

00004c04 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    4c04:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    4c06:	4b0c      	ldr	r3, [pc, #48]	; (4c38 <Power_Ip_RCM_GetResetRawValue+0x34>)
    4c08:	699a      	ldr	r2, [r3, #24]
    4c0a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4c0e:	4013      	ands	r3, r2
    4c10:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    4c12:	9b01      	ldr	r3, [sp, #4]
    4c14:	2b00      	cmp	r3, #0
    4c16:	d008      	beq.n	4c2a <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    4c18:	4907      	ldr	r1, [pc, #28]	; (4c38 <Power_Ip_RCM_GetResetRawValue+0x34>)
    4c1a:	9a01      	ldr	r2, [sp, #4]
    4c1c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4c20:	4013      	ands	r3, r2
    4c22:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    4c24:	4a05      	ldr	r2, [pc, #20]	; (4c3c <Power_Ip_RCM_GetResetRawValue+0x38>)
    4c26:	9b01      	ldr	r3, [sp, #4]
    4c28:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    4c2a:	4b04      	ldr	r3, [pc, #16]	; (4c3c <Power_Ip_RCM_GetResetRawValue+0x38>)
    4c2c:	681b      	ldr	r3, [r3, #0]
    4c2e:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    4c30:	9b00      	ldr	r3, [sp, #0]
}
    4c32:	4618      	mov	r0, r3
    4c34:	b002      	add	sp, #8
    4c36:	4770      	bx	lr
    4c38:	4007f000 	.word	0x4007f000
    4c3c:	1fff8cf0 	.word	0x1fff8cf0

00004c40 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    4c40:	b082      	sub	sp, #8
    4c42:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    4c44:	9b01      	ldr	r3, [sp, #4]
    4c46:	681b      	ldr	r3, [r3, #0]
    4c48:	4a03      	ldr	r2, [pc, #12]	; (4c58 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    4c4a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    4c4e:	6093      	str	r3, [r2, #8]
}
    4c50:	bf00      	nop
    4c52:	b002      	add	sp, #8
    4c54:	4770      	bx	lr
    4c56:	bf00      	nop
    4c58:	4007e000 	.word	0x4007e000

00004c5c <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    4c5c:	b084      	sub	sp, #16
    4c5e:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    4c60:	2301      	movs	r3, #1
    4c62:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    4c64:	4b15      	ldr	r3, [pc, #84]	; (4cbc <Power_Ip_SMC_ModeCheckEntry+0x60>)
    4c66:	695b      	ldr	r3, [r3, #20]
    4c68:	b2db      	uxtb	r3, r3
    4c6a:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    4c6c:	9b01      	ldr	r3, [sp, #4]
    4c6e:	2b02      	cmp	r3, #2
    4c70:	d012      	beq.n	4c98 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    4c72:	9b01      	ldr	r3, [sp, #4]
    4c74:	2b02      	cmp	r3, #2
    4c76:	d818      	bhi.n	4caa <Power_Ip_SMC_ModeCheckEntry+0x4e>
    4c78:	9b01      	ldr	r3, [sp, #4]
    4c7a:	2b00      	cmp	r3, #0
    4c7c:	d003      	beq.n	4c86 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    4c7e:	9b01      	ldr	r3, [sp, #4]
    4c80:	2b01      	cmp	r3, #1
    4c82:	d003      	beq.n	4c8c <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    4c84:	e011      	b.n	4caa <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    4c86:	2300      	movs	r3, #0
    4c88:	9303      	str	r3, [sp, #12]
            break;
    4c8a:	e013      	b.n	4cb4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    4c8c:	9b02      	ldr	r3, [sp, #8]
    4c8e:	2b01      	cmp	r3, #1
    4c90:	d10d      	bne.n	4cae <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    4c92:	2300      	movs	r3, #0
    4c94:	9303      	str	r3, [sp, #12]
            break;
    4c96:	e00a      	b.n	4cae <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    4c98:	9b02      	ldr	r3, [sp, #8]
    4c9a:	2b01      	cmp	r3, #1
    4c9c:	d002      	beq.n	4ca4 <Power_Ip_SMC_ModeCheckEntry+0x48>
    4c9e:	9b02      	ldr	r3, [sp, #8]
    4ca0:	2b10      	cmp	r3, #16
    4ca2:	d106      	bne.n	4cb2 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    4ca4:	2300      	movs	r3, #0
    4ca6:	9303      	str	r3, [sp, #12]
            break;
    4ca8:	e003      	b.n	4cb2 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    4caa:	bf00      	nop
    4cac:	e002      	b.n	4cb4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    4cae:	bf00      	nop
    4cb0:	e000      	b.n	4cb4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    4cb2:	bf00      	nop
        }
    }

    return PowerModeCheck;
    4cb4:	9b03      	ldr	r3, [sp, #12]
}
    4cb6:	4618      	mov	r0, r3
    4cb8:	b004      	add	sp, #16
    4cba:	4770      	bx	lr
    4cbc:	4007e000 	.word	0x4007e000

00004cc0 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4cc0:	b500      	push	{lr}
    4cc2:	b08b      	sub	sp, #44	; 0x2c
    4cc4:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    4cc6:	2300      	movs	r3, #0
    4cc8:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    4cca:	2300      	movs	r3, #0
    4ccc:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    4cce:	2300      	movs	r3, #0
    4cd0:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    4cd4:	9b01      	ldr	r3, [sp, #4]
    4cd6:	685b      	ldr	r3, [r3, #4]
    4cd8:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    4cda:	9b08      	ldr	r3, [sp, #32]
    4cdc:	2b02      	cmp	r3, #2
    4cde:	d076      	beq.n	4dce <Power_Ip_SMC_ModeConfig+0x10e>
    4ce0:	9b08      	ldr	r3, [sp, #32]
    4ce2:	2b02      	cmp	r3, #2
    4ce4:	f200 80ab 	bhi.w	4e3e <Power_Ip_SMC_ModeConfig+0x17e>
    4ce8:	9b08      	ldr	r3, [sp, #32]
    4cea:	2b00      	cmp	r3, #0
    4cec:	d003      	beq.n	4cf6 <Power_Ip_SMC_ModeConfig+0x36>
    4cee:	9b08      	ldr	r3, [sp, #32]
    4cf0:	2b01      	cmp	r3, #1
    4cf2:	d034      	beq.n	4d5e <Power_Ip_SMC_ModeConfig+0x9e>
    4cf4:	e0a3      	b.n	4e3e <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    4cf6:	4b58      	ldr	r3, [pc, #352]	; (4e58 <Power_Ip_SMC_ModeConfig+0x198>)
    4cf8:	68db      	ldr	r3, [r3, #12]
    4cfa:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    4cfc:	9b06      	ldr	r3, [sp, #24]
    4cfe:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4d02:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    4d04:	4a54      	ldr	r2, [pc, #336]	; (4e58 <Power_Ip_SMC_ModeConfig+0x198>)
    4d06:	9b06      	ldr	r3, [sp, #24]
    4d08:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    4d0a:	aa02      	add	r2, sp, #8
    4d0c:	a903      	add	r1, sp, #12
    4d0e:	a804      	add	r0, sp, #16
    4d10:	f24c 3350 	movw	r3, #50000	; 0xc350
    4d14:	f7ff fece 	bl	4ab4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4d18:	9a02      	ldr	r2, [sp, #8]
    4d1a:	a903      	add	r1, sp, #12
    4d1c:	ab04      	add	r3, sp, #16
    4d1e:	4618      	mov	r0, r3
    4d20:	f7ff fee2 	bl	4ae8 <Power_Ip_TimeoutExpired>
    4d24:	4603      	mov	r3, r0
    4d26:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    4d2a:	4b4b      	ldr	r3, [pc, #300]	; (4e58 <Power_Ip_SMC_ModeConfig+0x198>)
    4d2c:	695b      	ldr	r3, [r3, #20]
    4d2e:	f003 0301 	and.w	r3, r3, #1
    4d32:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    4d34:	9b05      	ldr	r3, [sp, #20]
    4d36:	2b01      	cmp	r3, #1
    4d38:	d006      	beq.n	4d48 <Power_Ip_SMC_ModeConfig+0x88>
    4d3a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d3e:	f083 0301 	eor.w	r3, r3, #1
    4d42:	b2db      	uxtb	r3, r3
    4d44:	2b00      	cmp	r3, #0
    4d46:	d1e7      	bne.n	4d18 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    4d48:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d4c:	2b00      	cmp	r3, #0
    4d4e:	d079      	beq.n	4e44 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4d50:	2301      	movs	r3, #1
    4d52:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4d54:	21ff      	movs	r1, #255	; 0xff
    4d56:	2000      	movs	r0, #0
    4d58:	f7ff fe90 	bl	4a7c <Power_Ip_ReportPowerErrors>
            }

            break;
    4d5c:	e072      	b.n	4e44 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    4d5e:	4b3e      	ldr	r3, [pc, #248]	; (4e58 <Power_Ip_SMC_ModeConfig+0x198>)
    4d60:	68db      	ldr	r3, [r3, #12]
    4d62:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    4d64:	9b06      	ldr	r3, [sp, #24]
    4d66:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4d6a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    4d6c:	9b06      	ldr	r3, [sp, #24]
    4d6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    4d72:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    4d74:	4a38      	ldr	r2, [pc, #224]	; (4e58 <Power_Ip_SMC_ModeConfig+0x198>)
    4d76:	9b06      	ldr	r3, [sp, #24]
    4d78:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    4d7a:	aa02      	add	r2, sp, #8
    4d7c:	a903      	add	r1, sp, #12
    4d7e:	a804      	add	r0, sp, #16
    4d80:	f24c 3350 	movw	r3, #50000	; 0xc350
    4d84:	f7ff fe96 	bl	4ab4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4d88:	9a02      	ldr	r2, [sp, #8]
    4d8a:	a903      	add	r1, sp, #12
    4d8c:	ab04      	add	r3, sp, #16
    4d8e:	4618      	mov	r0, r3
    4d90:	f7ff feaa 	bl	4ae8 <Power_Ip_TimeoutExpired>
    4d94:	4603      	mov	r3, r0
    4d96:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    4d9a:	4b2f      	ldr	r3, [pc, #188]	; (4e58 <Power_Ip_SMC_ModeConfig+0x198>)
    4d9c:	695b      	ldr	r3, [r3, #20]
    4d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4da2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    4da4:	9b05      	ldr	r3, [sp, #20]
    4da6:	2b80      	cmp	r3, #128	; 0x80
    4da8:	d006      	beq.n	4db8 <Power_Ip_SMC_ModeConfig+0xf8>
    4daa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4dae:	f083 0301 	eor.w	r3, r3, #1
    4db2:	b2db      	uxtb	r3, r3
    4db4:	2b00      	cmp	r3, #0
    4db6:	d1e7      	bne.n	4d88 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    4db8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4dbc:	2b00      	cmp	r3, #0
    4dbe:	d043      	beq.n	4e48 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4dc0:	2301      	movs	r3, #1
    4dc2:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4dc4:	21ff      	movs	r1, #255	; 0xff
    4dc6:	2000      	movs	r0, #0
    4dc8:	f7ff fe58 	bl	4a7c <Power_Ip_ReportPowerErrors>
            }

            break;
    4dcc:	e03c      	b.n	4e48 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    4dce:	4b22      	ldr	r3, [pc, #136]	; (4e58 <Power_Ip_SMC_ModeConfig+0x198>)
    4dd0:	68db      	ldr	r3, [r3, #12]
    4dd2:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    4dd4:	9b06      	ldr	r3, [sp, #24]
    4dd6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4dda:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    4ddc:	9b06      	ldr	r3, [sp, #24]
    4dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4de2:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    4de4:	4a1c      	ldr	r2, [pc, #112]	; (4e58 <Power_Ip_SMC_ModeConfig+0x198>)
    4de6:	9b06      	ldr	r3, [sp, #24]
    4de8:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    4dea:	aa02      	add	r2, sp, #8
    4dec:	a903      	add	r1, sp, #12
    4dee:	a804      	add	r0, sp, #16
    4df0:	f24c 3350 	movw	r3, #50000	; 0xc350
    4df4:	f7ff fe5e 	bl	4ab4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4df8:	9a02      	ldr	r2, [sp, #8]
    4dfa:	a903      	add	r1, sp, #12
    4dfc:	ab04      	add	r3, sp, #16
    4dfe:	4618      	mov	r0, r3
    4e00:	f7ff fe72 	bl	4ae8 <Power_Ip_TimeoutExpired>
    4e04:	4603      	mov	r3, r0
    4e06:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    4e0a:	4b13      	ldr	r3, [pc, #76]	; (4e58 <Power_Ip_SMC_ModeConfig+0x198>)
    4e0c:	695b      	ldr	r3, [r3, #20]
    4e0e:	f003 0304 	and.w	r3, r3, #4
    4e12:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    4e14:	9b05      	ldr	r3, [sp, #20]
    4e16:	2b04      	cmp	r3, #4
    4e18:	d006      	beq.n	4e28 <Power_Ip_SMC_ModeConfig+0x168>
    4e1a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e1e:	f083 0301 	eor.w	r3, r3, #1
    4e22:	b2db      	uxtb	r3, r3
    4e24:	2b00      	cmp	r3, #0
    4e26:	d1e7      	bne.n	4df8 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    4e28:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e2c:	2b00      	cmp	r3, #0
    4e2e:	d00d      	beq.n	4e4c <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e30:	2301      	movs	r3, #1
    4e32:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4e34:	21ff      	movs	r1, #255	; 0xff
    4e36:	2000      	movs	r0, #0
    4e38:	f7ff fe20 	bl	4a7c <Power_Ip_ReportPowerErrors>
            }

            break;
    4e3c:	e006      	b.n	4e4c <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e3e:	2301      	movs	r3, #1
    4e40:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    4e42:	e004      	b.n	4e4e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    4e44:	bf00      	nop
    4e46:	e002      	b.n	4e4e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    4e48:	bf00      	nop
    4e4a:	e000      	b.n	4e4e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    4e4c:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    4e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    4e50:	4618      	mov	r0, r3
    4e52:	b00b      	add	sp, #44	; 0x2c
    4e54:	f85d fb04 	ldr.w	pc, [sp], #4
    4e58:	4007e000 	.word	0x4007e000

00004e5c <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    4e5c:	b500      	push	{lr}
    4e5e:	b085      	sub	sp, #20
    4e60:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    4e62:	9b01      	ldr	r3, [sp, #4]
    4e64:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    4e66:	9803      	ldr	r0, [sp, #12]
    4e68:	f000 fbc8 	bl	55fc <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    4e6c:	4a03      	ldr	r2, [pc, #12]	; (4e7c <Port_Init+0x20>)
    4e6e:	9b03      	ldr	r3, [sp, #12]
    4e70:	6013      	str	r3, [r2, #0]
        }
    }
}
    4e72:	bf00      	nop
    4e74:	b005      	add	sp, #20
    4e76:	f85d fb04 	ldr.w	pc, [sp], #4
    4e7a:	bf00      	nop
    4e7c:	1fff8cf4 	.word	0x1fff8cf4

00004e80 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    4e80:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    4e82:	4b03      	ldr	r3, [pc, #12]	; (4e90 <Port_RefreshPortDirection+0x10>)
    4e84:	681b      	ldr	r3, [r3, #0]
    4e86:	4618      	mov	r0, r3
    4e88:	f000 fc10 	bl	56ac <Port_Ipw_RefreshPortDirection>
    }
}
    4e8c:	bf00      	nop
    4e8e:	bd08      	pop	{r3, pc}
    4e90:	1fff8cf4 	.word	0x1fff8cf4

00004e94 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    4e94:	b086      	sub	sp, #24
    4e96:	9003      	str	r0, [sp, #12]
    4e98:	9102      	str	r1, [sp, #8]
    4e9a:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    4e9c:	23ff      	movs	r3, #255	; 0xff
    4e9e:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    4ea0:	9b03      	ldr	r3, [sp, #12]
    4ea2:	4a39      	ldr	r2, [pc, #228]	; (4f88 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    4ea4:	4293      	cmp	r3, r2
    4ea6:	d151      	bne.n	4f4c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    4ea8:	9b02      	ldr	r3, [sp, #8]
    4eaa:	2b10      	cmp	r3, #16
    4eac:	d867      	bhi.n	4f7e <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    4eae:	a201      	add	r2, pc, #4	; (adr r2, 4eb4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    4eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4eb4:	00004ef9 	.word	0x00004ef9
    4eb8:	00004f07 	.word	0x00004f07
    4ebc:	00004f7f 	.word	0x00004f7f
    4ec0:	00004f7f 	.word	0x00004f7f
    4ec4:	00004f7f 	.word	0x00004f7f
    4ec8:	00004f7f 	.word	0x00004f7f
    4ecc:	00004f7f 	.word	0x00004f7f
    4ed0:	00004f7f 	.word	0x00004f7f
    4ed4:	00004f7f 	.word	0x00004f7f
    4ed8:	00004f7f 	.word	0x00004f7f
    4edc:	00004f7f 	.word	0x00004f7f
    4ee0:	00004f7f 	.word	0x00004f7f
    4ee4:	00004f7f 	.word	0x00004f7f
    4ee8:	00004f15 	.word	0x00004f15
    4eec:	00004f23 	.word	0x00004f23
    4ef0:	00004f31 	.word	0x00004f31
    4ef4:	00004f3f 	.word	0x00004f3f
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    4ef8:	2301      	movs	r3, #1
    4efa:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4efc:	9a05      	ldr	r2, [sp, #20]
    4efe:	9b01      	ldr	r3, [sp, #4]
    4f00:	4313      	orrs	r3, r2
    4f02:	9305      	str	r3, [sp, #20]
                break;
    4f04:	e03c      	b.n	4f80 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    4f06:	2302      	movs	r3, #2
    4f08:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4f0a:	9a05      	ldr	r2, [sp, #20]
    4f0c:	9b01      	ldr	r3, [sp, #4]
    4f0e:	4313      	orrs	r3, r2
    4f10:	9305      	str	r3, [sp, #20]
                break;
    4f12:	e035      	b.n	4f80 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    4f14:	2304      	movs	r3, #4
    4f16:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4f18:	9a05      	ldr	r2, [sp, #20]
    4f1a:	9b01      	ldr	r3, [sp, #4]
    4f1c:	4313      	orrs	r3, r2
    4f1e:	9305      	str	r3, [sp, #20]
                break;
    4f20:	e02e      	b.n	4f80 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    4f22:	2308      	movs	r3, #8
    4f24:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4f26:	9a05      	ldr	r2, [sp, #20]
    4f28:	9b01      	ldr	r3, [sp, #4]
    4f2a:	4313      	orrs	r3, r2
    4f2c:	9305      	str	r3, [sp, #20]
                break;
    4f2e:	e027      	b.n	4f80 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    4f30:	230e      	movs	r3, #14
    4f32:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f34:	9a05      	ldr	r2, [sp, #20]
    4f36:	9b01      	ldr	r3, [sp, #4]
    4f38:	4013      	ands	r3, r2
    4f3a:	9305      	str	r3, [sp, #20]
                break;
    4f3c:	e020      	b.n	4f80 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    4f3e:	230d      	movs	r3, #13
    4f40:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f42:	9a05      	ldr	r2, [sp, #20]
    4f44:	9b01      	ldr	r3, [sp, #4]
    4f46:	4013      	ands	r3, r2
    4f48:	9305      	str	r3, [sp, #20]
                break;
    4f4a:	e019      	b.n	4f80 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    4f4c:	9b03      	ldr	r3, [sp, #12]
    4f4e:	4a0f      	ldr	r2, [pc, #60]	; (4f8c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    4f50:	4293      	cmp	r3, r2
    4f52:	d115      	bne.n	4f80 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    4f54:	9b02      	ldr	r3, [sp, #8]
    4f56:	2b00      	cmp	r3, #0
    4f58:	d003      	beq.n	4f62 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    4f5a:	9b02      	ldr	r3, [sp, #8]
    4f5c:	2b01      	cmp	r3, #1
    4f5e:	d007      	beq.n	4f70 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    4f60:	e00e      	b.n	4f80 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    4f62:	230b      	movs	r3, #11
    4f64:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f66:	9a05      	ldr	r2, [sp, #20]
    4f68:	9b01      	ldr	r3, [sp, #4]
    4f6a:	4013      	ands	r3, r2
    4f6c:	9305      	str	r3, [sp, #20]
                break;
    4f6e:	e007      	b.n	4f80 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    4f70:	2307      	movs	r3, #7
    4f72:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f74:	9a05      	ldr	r2, [sp, #20]
    4f76:	9b01      	ldr	r3, [sp, #4]
    4f78:	4013      	ands	r3, r2
    4f7a:	9305      	str	r3, [sp, #20]
                break;
    4f7c:	e000      	b.n	4f80 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    4f7e:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    4f80:	9b05      	ldr	r3, [sp, #20]
}
    4f82:	4618      	mov	r0, r3
    4f84:	b006      	add	sp, #24
    4f86:	4770      	bx	lr
    4f88:	4004a000 	.word	0x4004a000
    4f8c:	4004b000 	.word	0x4004b000

00004f90 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    4f90:	b500      	push	{lr}
    4f92:	b089      	sub	sp, #36	; 0x24
    4f94:	9003      	str	r0, [sp, #12]
    4f96:	9102      	str	r1, [sp, #8]
    4f98:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    4f9a:	9b01      	ldr	r3, [sp, #4]
    4f9c:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    4f9e:	9b01      	ldr	r3, [sp, #4]
    4fa0:	2b08      	cmp	r3, #8
    4fa2:	d121      	bne.n	4fe8 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    4fa4:	4b13      	ldr	r3, [pc, #76]	; (4ff4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fa6:	685b      	ldr	r3, [r3, #4]
    4fa8:	f003 030f 	and.w	r3, r3, #15
    4fac:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    4fae:	9a06      	ldr	r2, [sp, #24]
    4fb0:	9902      	ldr	r1, [sp, #8]
    4fb2:	9803      	ldr	r0, [sp, #12]
    4fb4:	f7ff ff6e 	bl	4e94 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    4fb8:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    4fba:	9b05      	ldr	r3, [sp, #20]
    4fbc:	2bff      	cmp	r3, #255	; 0xff
    4fbe:	d011      	beq.n	4fe4 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    4fc0:	f001 f984 	bl	62cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    4fc4:	4b0b      	ldr	r3, [pc, #44]	; (4ff4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fc6:	685b      	ldr	r3, [r3, #4]
    4fc8:	4a0a      	ldr	r2, [pc, #40]	; (4ff4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fca:	f023 030f 	bic.w	r3, r3, #15
    4fce:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    4fd0:	4b08      	ldr	r3, [pc, #32]	; (4ff4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fd2:	685a      	ldr	r2, [r3, #4]
    4fd4:	9b05      	ldr	r3, [sp, #20]
    4fd6:	f003 030f 	and.w	r3, r3, #15
    4fda:	4906      	ldr	r1, [pc, #24]	; (4ff4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fdc:	4313      	orrs	r3, r2
    4fde:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    4fe0:	f001 f9a0 	bl	6324 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    4fe4:	2300      	movs	r3, #0
    4fe6:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    4fe8:	9b07      	ldr	r3, [sp, #28]
}
    4fea:	4618      	mov	r0, r3
    4fec:	b009      	add	sp, #36	; 0x24
    4fee:	f85d fb04 	ldr.w	pc, [sp], #4
    4ff2:	bf00      	nop
    4ff4:	40048000 	.word	0x40048000

00004ff8 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    4ff8:	b500      	push	{lr}
    4ffa:	b087      	sub	sp, #28
    4ffc:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    4ffe:	2300      	movs	r3, #0
    5000:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    5002:	2300      	movs	r3, #0
    5004:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    5006:	2300      	movs	r3, #0
    5008:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    500a:	9b01      	ldr	r3, [sp, #4]
    500c:	68db      	ldr	r3, [r3, #12]
    500e:	2b02      	cmp	r3, #2
    5010:	d00a      	beq.n	5028 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    5012:	9b05      	ldr	r3, [sp, #20]
    5014:	f043 0302 	orr.w	r3, r3, #2
    5018:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    501a:	9b01      	ldr	r3, [sp, #4]
    501c:	68db      	ldr	r3, [r3, #12]
    501e:	f003 0301 	and.w	r3, r3, #1
    5022:	9a05      	ldr	r2, [sp, #20]
    5024:	4313      	orrs	r3, r2
    5026:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    5028:	9b01      	ldr	r3, [sp, #4]
    502a:	699b      	ldr	r3, [r3, #24]
    502c:	019b      	lsls	r3, r3, #6
    502e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5032:	9a05      	ldr	r2, [sp, #20]
    5034:	4313      	orrs	r3, r2
    5036:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    5038:	9b01      	ldr	r3, [sp, #4]
    503a:	6a1b      	ldr	r3, [r3, #32]
    503c:	03db      	lsls	r3, r3, #15
    503e:	b29b      	uxth	r3, r3
    5040:	9a05      	ldr	r2, [sp, #20]
    5042:	4313      	orrs	r3, r2
    5044:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    5046:	9b01      	ldr	r3, [sp, #4]
    5048:	7f1b      	ldrb	r3, [r3, #28]
    504a:	2b00      	cmp	r3, #0
    504c:	d001      	beq.n	5052 <Port_Ci_Port_Ip_PinInit+0x5a>
    504e:	2310      	movs	r3, #16
    5050:	e000      	b.n	5054 <Port_Ci_Port_Ip_PinInit+0x5c>
    5052:	2300      	movs	r3, #0
    5054:	9a05      	ldr	r2, [sp, #20]
    5056:	4313      	orrs	r3, r2
    5058:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    505a:	9b01      	ldr	r3, [sp, #4]
    505c:	691b      	ldr	r3, [r3, #16]
    505e:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5060:	9b01      	ldr	r3, [sp, #4]
    5062:	6818      	ldr	r0, [r3, #0]
    5064:	9b01      	ldr	r3, [sp, #4]
    5066:	689b      	ldr	r3, [r3, #8]
    5068:	9a04      	ldr	r2, [sp, #16]
    506a:	4619      	mov	r1, r3
    506c:	f7ff ff90 	bl	4f90 <Port_Ci_Port_Ip_ConfigureInterleave>
    5070:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    5072:	9b03      	ldr	r3, [sp, #12]
    5074:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    5076:	9b04      	ldr	r3, [sp, #16]
    5078:	021b      	lsls	r3, r3, #8
    507a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    507e:	9a05      	ldr	r2, [sp, #20]
    5080:	4313      	orrs	r3, r2
    5082:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    5084:	f000 ff88 	bl	5f98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    5088:	9b01      	ldr	r3, [sp, #4]
    508a:	681b      	ldr	r3, [r3, #0]
    508c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    5090:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    5092:	9b01      	ldr	r3, [sp, #4]
    5094:	689b      	ldr	r3, [r3, #8]
    5096:	2201      	movs	r2, #1
    5098:	fa02 f303 	lsl.w	r3, r2, r3
    509c:	43db      	mvns	r3, r3
    509e:	9a02      	ldr	r2, [sp, #8]
    50a0:	4013      	ands	r3, r2
    50a2:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    50a4:	9b01      	ldr	r3, [sp, #4]
    50a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    50aa:	2b00      	cmp	r3, #0
    50ac:	d001      	beq.n	50b2 <Port_Ci_Port_Ip_PinInit+0xba>
    50ae:	2201      	movs	r2, #1
    50b0:	e000      	b.n	50b4 <Port_Ci_Port_Ip_PinInit+0xbc>
    50b2:	2200      	movs	r2, #0
    50b4:	9b01      	ldr	r3, [sp, #4]
    50b6:	689b      	ldr	r3, [r3, #8]
    50b8:	fa02 f303 	lsl.w	r3, r2, r3
    50bc:	9a02      	ldr	r2, [sp, #8]
    50be:	4313      	orrs	r3, r2
    50c0:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    50c2:	9b01      	ldr	r3, [sp, #4]
    50c4:	681b      	ldr	r3, [r3, #0]
    50c6:	9a02      	ldr	r2, [sp, #8]
    50c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    50cc:	f000 ff90 	bl	5ff0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    50d0:	9b04      	ldr	r3, [sp, #16]
    50d2:	2b01      	cmp	r3, #1
    50d4:	d16d      	bne.n	51b2 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    50d6:	9b01      	ldr	r3, [sp, #4]
    50d8:	695b      	ldr	r3, [r3, #20]
    50da:	2b02      	cmp	r3, #2
    50dc:	d138      	bne.n	5150 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    50de:	9b01      	ldr	r3, [sp, #4]
    50e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    50e4:	2b01      	cmp	r3, #1
    50e6:	d10f      	bne.n	5108 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    50e8:	f000 ffa8 	bl	603c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    50ec:	9b01      	ldr	r3, [sp, #4]
    50ee:	685b      	ldr	r3, [r3, #4]
    50f0:	6859      	ldr	r1, [r3, #4]
    50f2:	9b01      	ldr	r3, [sp, #4]
    50f4:	689b      	ldr	r3, [r3, #8]
    50f6:	2201      	movs	r2, #1
    50f8:	409a      	lsls	r2, r3
    50fa:	9b01      	ldr	r3, [sp, #4]
    50fc:	685b      	ldr	r3, [r3, #4]
    50fe:	430a      	orrs	r2, r1
    5100:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    5102:	f000 ffc7 	bl	6094 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    5106:	e013      	b.n	5130 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    5108:	9b01      	ldr	r3, [sp, #4]
    510a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    510e:	2b00      	cmp	r3, #0
    5110:	d10e      	bne.n	5130 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    5112:	f000 ffe5 	bl	60e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    5116:	9b01      	ldr	r3, [sp, #4]
    5118:	685b      	ldr	r3, [r3, #4]
    511a:	6899      	ldr	r1, [r3, #8]
    511c:	9b01      	ldr	r3, [sp, #4]
    511e:	689b      	ldr	r3, [r3, #8]
    5120:	2201      	movs	r2, #1
    5122:	409a      	lsls	r2, r3
    5124:	9b01      	ldr	r3, [sp, #4]
    5126:	685b      	ldr	r3, [r3, #4]
    5128:	430a      	orrs	r2, r1
    512a:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    512c:	f001 f804 	bl	6138 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5130:	f001 f828 	bl	6184 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    5134:	9b01      	ldr	r3, [sp, #4]
    5136:	685b      	ldr	r3, [r3, #4]
    5138:	6959      	ldr	r1, [r3, #20]
    513a:	9b01      	ldr	r3, [sp, #4]
    513c:	689b      	ldr	r3, [r3, #8]
    513e:	2201      	movs	r2, #1
    5140:	409a      	lsls	r2, r3
    5142:	9b01      	ldr	r3, [sp, #4]
    5144:	685b      	ldr	r3, [r3, #4]
    5146:	430a      	orrs	r2, r1
    5148:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    514a:	f001 f847 	bl	61dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    514e:	e030      	b.n	51b2 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5150:	f001 f818 	bl	6184 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    5154:	9b01      	ldr	r3, [sp, #4]
    5156:	685b      	ldr	r3, [r3, #4]
    5158:	6959      	ldr	r1, [r3, #20]
    515a:	9b01      	ldr	r3, [sp, #4]
    515c:	689b      	ldr	r3, [r3, #8]
    515e:	2201      	movs	r2, #1
    5160:	fa02 f303 	lsl.w	r3, r2, r3
    5164:	43da      	mvns	r2, r3
    5166:	9b01      	ldr	r3, [sp, #4]
    5168:	685b      	ldr	r3, [r3, #4]
    516a:	400a      	ands	r2, r1
    516c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    516e:	f001 f835 	bl	61dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    5172:	f001 f859 	bl	6228 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    5176:	9b01      	ldr	r3, [sp, #4]
    5178:	685b      	ldr	r3, [r3, #4]
    517a:	6999      	ldr	r1, [r3, #24]
    517c:	9b01      	ldr	r3, [sp, #4]
    517e:	689b      	ldr	r3, [r3, #8]
    5180:	2201      	movs	r2, #1
    5182:	fa02 f303 	lsl.w	r3, r2, r3
    5186:	43da      	mvns	r2, r3
    5188:	9b01      	ldr	r3, [sp, #4]
    518a:	685b      	ldr	r3, [r3, #4]
    518c:	400a      	ands	r2, r1
    518e:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    5190:	9b01      	ldr	r3, [sp, #4]
    5192:	695b      	ldr	r3, [r3, #20]
    5194:	2b03      	cmp	r3, #3
    5196:	d10a      	bne.n	51ae <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    5198:	9b01      	ldr	r3, [sp, #4]
    519a:	685b      	ldr	r3, [r3, #4]
    519c:	6999      	ldr	r1, [r3, #24]
    519e:	9b01      	ldr	r3, [sp, #4]
    51a0:	689b      	ldr	r3, [r3, #8]
    51a2:	2201      	movs	r2, #1
    51a4:	409a      	lsls	r2, r3
    51a6:	9b01      	ldr	r3, [sp, #4]
    51a8:	685b      	ldr	r3, [r3, #4]
    51aa:	430a      	orrs	r2, r1
    51ac:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    51ae:	f001 f867 	bl	6280 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    51b2:	9b01      	ldr	r3, [sp, #4]
    51b4:	681b      	ldr	r3, [r3, #0]
    51b6:	9a01      	ldr	r2, [sp, #4]
    51b8:	6892      	ldr	r2, [r2, #8]
    51ba:	9905      	ldr	r1, [sp, #20]
    51bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    51c0:	bf00      	nop
    51c2:	b007      	add	sp, #28
    51c4:	f85d fb04 	ldr.w	pc, [sp], #4

000051c8 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    51c8:	b500      	push	{lr}
    51ca:	b085      	sub	sp, #20
    51cc:	9001      	str	r0, [sp, #4]
    51ce:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    51d0:	2300      	movs	r3, #0
    51d2:	9303      	str	r3, [sp, #12]
    51d4:	e00d      	b.n	51f2 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    51d6:	9a03      	ldr	r2, [sp, #12]
    51d8:	4613      	mov	r3, r2
    51da:	009b      	lsls	r3, r3, #2
    51dc:	4413      	add	r3, r2
    51de:	00db      	lsls	r3, r3, #3
    51e0:	461a      	mov	r2, r3
    51e2:	9b00      	ldr	r3, [sp, #0]
    51e4:	4413      	add	r3, r2
    51e6:	4618      	mov	r0, r3
    51e8:	f7ff ff06 	bl	4ff8 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    51ec:	9b03      	ldr	r3, [sp, #12]
    51ee:	3301      	adds	r3, #1
    51f0:	9303      	str	r3, [sp, #12]
    51f2:	9a03      	ldr	r2, [sp, #12]
    51f4:	9b01      	ldr	r3, [sp, #4]
    51f6:	429a      	cmp	r2, r3
    51f8:	d3ed      	bcc.n	51d6 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    51fa:	2300      	movs	r3, #0
}
    51fc:	4618      	mov	r0, r3
    51fe:	b005      	add	sp, #20
    5200:	f85d fb04 	ldr.w	pc, [sp], #4

00005204 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    5204:	b500      	push	{lr}
    5206:	b087      	sub	sp, #28
    5208:	9003      	str	r0, [sp, #12]
    520a:	9102      	str	r1, [sp, #8]
    520c:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    520e:	9a01      	ldr	r2, [sp, #4]
    5210:	9902      	ldr	r1, [sp, #8]
    5212:	9803      	ldr	r0, [sp, #12]
    5214:	f7ff febc 	bl	4f90 <Port_Ci_Port_Ip_ConfigureInterleave>
    5218:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    521a:	f001 f8a9 	bl	6370 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    521e:	9b03      	ldr	r3, [sp, #12]
    5220:	9a02      	ldr	r2, [sp, #8]
    5222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5226:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    5228:	9b04      	ldr	r3, [sp, #16]
    522a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    522e:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    5230:	9b05      	ldr	r3, [sp, #20]
    5232:	021b      	lsls	r3, r3, #8
    5234:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5238:	9a04      	ldr	r2, [sp, #16]
    523a:	4313      	orrs	r3, r2
    523c:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    523e:	9b03      	ldr	r3, [sp, #12]
    5240:	9a02      	ldr	r2, [sp, #8]
    5242:	9904      	ldr	r1, [sp, #16]
    5244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    5248:	f001 f8be 	bl	63c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    524c:	bf00      	nop
    524e:	b007      	add	sp, #28
    5250:	f85d fb04 	ldr.w	pc, [sp], #4

00005254 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5254:	b500      	push	{lr}
    5256:	b083      	sub	sp, #12
    5258:	9001      	str	r0, [sp, #4]
    525a:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    525c:	f001 f8da 	bl	6414 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    5260:	9b01      	ldr	r3, [sp, #4]
    5262:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    5266:	2101      	movs	r1, #1
    5268:	9b00      	ldr	r3, [sp, #0]
    526a:	fa01 f303 	lsl.w	r3, r1, r3
    526e:	431a      	orrs	r2, r3
    5270:	9b01      	ldr	r3, [sp, #4]
    5272:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    5276:	f001 f8f9 	bl	646c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    527a:	bf00      	nop
    527c:	b003      	add	sp, #12
    527e:	f85d fb04 	ldr.w	pc, [sp], #4

00005282 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5282:	b500      	push	{lr}
    5284:	b083      	sub	sp, #12
    5286:	9001      	str	r0, [sp, #4]
    5288:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    528a:	f001 f915 	bl	64b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    528e:	9b01      	ldr	r3, [sp, #4]
    5290:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    5294:	2101      	movs	r1, #1
    5296:	9b00      	ldr	r3, [sp, #0]
    5298:	fa01 f303 	lsl.w	r3, r1, r3
    529c:	43db      	mvns	r3, r3
    529e:	401a      	ands	r2, r3
    52a0:	9b01      	ldr	r3, [sp, #4]
    52a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    52a6:	f001 f933 	bl	6510 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    52aa:	bf00      	nop
    52ac:	b003      	add	sp, #12
    52ae:	f85d fb04 	ldr.w	pc, [sp], #4

000052b2 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    52b2:	b082      	sub	sp, #8
    52b4:	9001      	str	r0, [sp, #4]
    52b6:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    52b8:	9b00      	ldr	r3, [sp, #0]
    52ba:	785b      	ldrb	r3, [r3, #1]
    52bc:	f003 0201 	and.w	r2, r3, #1
    52c0:	9b01      	ldr	r3, [sp, #4]
    52c2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    52c6:	9b00      	ldr	r3, [sp, #0]
    52c8:	789b      	ldrb	r3, [r3, #2]
    52ca:	f003 021f 	and.w	r2, r3, #31
    52ce:	9b01      	ldr	r3, [sp, #4]
    52d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    52d4:	bf00      	nop
    52d6:	b002      	add	sp, #8
    52d8:	4770      	bx	lr

000052da <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    52da:	b086      	sub	sp, #24
    52dc:	9003      	str	r0, [sp, #12]
    52de:	9301      	str	r3, [sp, #4]
    52e0:	460b      	mov	r3, r1
    52e2:	f8ad 300a 	strh.w	r3, [sp, #10]
    52e6:	4613      	mov	r3, r2
    52e8:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    52ec:	2300      	movs	r3, #0
    52ee:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    52f2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52f6:	f043 0301 	orr.w	r3, r3, #1
    52fa:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    52fe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5302:	f043 0302 	orr.w	r3, r3, #2
    5306:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    530a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    530e:	f043 0310 	orr.w	r3, r3, #16
    5312:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    5316:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    531a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    531e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    5322:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5326:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    532a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    532e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    5336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    533a:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    533e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5342:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    5346:	4013      	ands	r3, r2
    5348:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    534c:	9b01      	ldr	r3, [sp, #4]
    534e:	2b00      	cmp	r3, #0
    5350:	d003      	beq.n	535a <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    5352:	9b01      	ldr	r3, [sp, #4]
    5354:	2b01      	cmp	r3, #1
    5356:	d00a      	beq.n	536e <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    5358:	e013      	b.n	5382 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    535a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    535e:	041a      	lsls	r2, r3, #16
    5360:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5364:	431a      	orrs	r2, r3
    5366:	9b03      	ldr	r3, [sp, #12]
    5368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    536c:	e009      	b.n	5382 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    536e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5372:	041a      	lsls	r2, r3, #16
    5374:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5378:	431a      	orrs	r2, r3
    537a:	9b03      	ldr	r3, [sp, #12]
    537c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    5380:	bf00      	nop
    }
}
    5382:	bf00      	nop
    5384:	b006      	add	sp, #24
    5386:	4770      	bx	lr

00005388 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    5388:	b500      	push	{lr}
    538a:	b087      	sub	sp, #28
    538c:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    538e:	9b01      	ldr	r3, [sp, #4]
    5390:	885b      	ldrh	r3, [r3, #2]
    5392:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    5396:	9b01      	ldr	r3, [sp, #4]
    5398:	689b      	ldr	r3, [r3, #8]
    539a:	7a1b      	ldrb	r3, [r3, #8]
    539c:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    53a0:	9b01      	ldr	r3, [sp, #4]
    53a2:	689b      	ldr	r3, [r3, #8]
    53a4:	681b      	ldr	r3, [r3, #0]
    53a6:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    53a8:	9b01      	ldr	r3, [sp, #4]
    53aa:	689b      	ldr	r3, [r3, #8]
    53ac:	685b      	ldr	r3, [r3, #4]
    53ae:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    53b0:	2300      	movs	r3, #0
    53b2:	f8ad 3016 	strh.w	r3, [sp, #22]
    53b6:	e111      	b.n	55dc <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    53b8:	9b02      	ldr	r3, [sp, #8]
    53ba:	2b02      	cmp	r3, #2
    53bc:	d169      	bne.n	5492 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    53be:	f89d 3013 	ldrb.w	r3, [sp, #19]
    53c2:	2b01      	cmp	r3, #1
    53c4:	d11a      	bne.n	53fc <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    53c6:	9b01      	ldr	r3, [sp, #4]
    53c8:	685a      	ldr	r2, [r3, #4]
    53ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    53ce:	005b      	lsls	r3, r3, #1
    53d0:	4413      	add	r3, r2
    53d2:	881b      	ldrh	r3, [r3, #0]
    53d4:	f003 021f 	and.w	r2, r3, #31
    53d8:	9b01      	ldr	r3, [sp, #4]
    53da:	6859      	ldr	r1, [r3, #4]
    53dc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    53e0:	005b      	lsls	r3, r3, #1
    53e2:	440b      	add	r3, r1
    53e4:	881b      	ldrh	r3, [r3, #0]
    53e6:	095b      	lsrs	r3, r3, #5
    53e8:	b29b      	uxth	r3, r3
    53ea:	4619      	mov	r1, r3
    53ec:	4b81      	ldr	r3, [pc, #516]	; (55f4 <Port_Ipw_Init_UnusedPins+0x26c>)
    53ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    53f2:	2101      	movs	r1, #1
    53f4:	fa01 f202 	lsl.w	r2, r1, r2
    53f8:	605a      	str	r2, [r3, #4]
    53fa:	e01d      	b.n	5438 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    53fc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5400:	2b00      	cmp	r3, #0
    5402:	d119      	bne.n	5438 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5404:	9b01      	ldr	r3, [sp, #4]
    5406:	685a      	ldr	r2, [r3, #4]
    5408:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    540c:	005b      	lsls	r3, r3, #1
    540e:	4413      	add	r3, r2
    5410:	881b      	ldrh	r3, [r3, #0]
    5412:	f003 021f 	and.w	r2, r3, #31
    5416:	9b01      	ldr	r3, [sp, #4]
    5418:	6859      	ldr	r1, [r3, #4]
    541a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    541e:	005b      	lsls	r3, r3, #1
    5420:	440b      	add	r3, r1
    5422:	881b      	ldrh	r3, [r3, #0]
    5424:	095b      	lsrs	r3, r3, #5
    5426:	b29b      	uxth	r3, r3
    5428:	4619      	mov	r1, r3
    542a:	4b72      	ldr	r3, [pc, #456]	; (55f4 <Port_Ipw_Init_UnusedPins+0x26c>)
    542c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5430:	2101      	movs	r1, #1
    5432:	fa01 f202 	lsl.w	r2, r1, r2
    5436:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5438:	f001 f890 	bl	655c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    543c:	9b01      	ldr	r3, [sp, #4]
    543e:	685a      	ldr	r2, [r3, #4]
    5440:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5444:	005b      	lsls	r3, r3, #1
    5446:	4413      	add	r3, r2
    5448:	881b      	ldrh	r3, [r3, #0]
    544a:	095b      	lsrs	r3, r3, #5
    544c:	b29b      	uxth	r3, r3
    544e:	461a      	mov	r2, r3
    5450:	4b68      	ldr	r3, [pc, #416]	; (55f4 <Port_Ipw_Init_UnusedPins+0x26c>)
    5452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5456:	6959      	ldr	r1, [r3, #20]
    5458:	9b01      	ldr	r3, [sp, #4]
    545a:	685a      	ldr	r2, [r3, #4]
    545c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5460:	005b      	lsls	r3, r3, #1
    5462:	4413      	add	r3, r2
    5464:	881b      	ldrh	r3, [r3, #0]
    5466:	f003 031f 	and.w	r3, r3, #31
    546a:	2201      	movs	r2, #1
    546c:	409a      	lsls	r2, r3
    546e:	9b01      	ldr	r3, [sp, #4]
    5470:	6858      	ldr	r0, [r3, #4]
    5472:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5476:	005b      	lsls	r3, r3, #1
    5478:	4403      	add	r3, r0
    547a:	881b      	ldrh	r3, [r3, #0]
    547c:	095b      	lsrs	r3, r3, #5
    547e:	b29b      	uxth	r3, r3
    5480:	4618      	mov	r0, r3
    5482:	4b5c      	ldr	r3, [pc, #368]	; (55f4 <Port_Ipw_Init_UnusedPins+0x26c>)
    5484:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5488:	430a      	orrs	r2, r1
    548a:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    548c:	f001 f892 	bl	65b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    5490:	e086      	b.n	55a0 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5492:	f001 f863 	bl	655c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    5496:	9b01      	ldr	r3, [sp, #4]
    5498:	685a      	ldr	r2, [r3, #4]
    549a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    549e:	005b      	lsls	r3, r3, #1
    54a0:	4413      	add	r3, r2
    54a2:	881b      	ldrh	r3, [r3, #0]
    54a4:	095b      	lsrs	r3, r3, #5
    54a6:	b29b      	uxth	r3, r3
    54a8:	461a      	mov	r2, r3
    54aa:	4b52      	ldr	r3, [pc, #328]	; (55f4 <Port_Ipw_Init_UnusedPins+0x26c>)
    54ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    54b0:	6959      	ldr	r1, [r3, #20]
    54b2:	9b01      	ldr	r3, [sp, #4]
    54b4:	685a      	ldr	r2, [r3, #4]
    54b6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54ba:	005b      	lsls	r3, r3, #1
    54bc:	4413      	add	r3, r2
    54be:	881b      	ldrh	r3, [r3, #0]
    54c0:	f003 031f 	and.w	r3, r3, #31
    54c4:	2201      	movs	r2, #1
    54c6:	fa02 f303 	lsl.w	r3, r2, r3
    54ca:	43da      	mvns	r2, r3
    54cc:	9b01      	ldr	r3, [sp, #4]
    54ce:	6858      	ldr	r0, [r3, #4]
    54d0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54d4:	005b      	lsls	r3, r3, #1
    54d6:	4403      	add	r3, r0
    54d8:	881b      	ldrh	r3, [r3, #0]
    54da:	095b      	lsrs	r3, r3, #5
    54dc:	b29b      	uxth	r3, r3
    54de:	4618      	mov	r0, r3
    54e0:	4b44      	ldr	r3, [pc, #272]	; (55f4 <Port_Ipw_Init_UnusedPins+0x26c>)
    54e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    54e6:	400a      	ands	r2, r1
    54e8:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    54ea:	f001 f863 	bl	65b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    54ee:	f001 f887 	bl	6600 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    54f2:	9b01      	ldr	r3, [sp, #4]
    54f4:	685a      	ldr	r2, [r3, #4]
    54f6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54fa:	005b      	lsls	r3, r3, #1
    54fc:	4413      	add	r3, r2
    54fe:	881b      	ldrh	r3, [r3, #0]
    5500:	095b      	lsrs	r3, r3, #5
    5502:	b29b      	uxth	r3, r3
    5504:	461a      	mov	r2, r3
    5506:	4b3b      	ldr	r3, [pc, #236]	; (55f4 <Port_Ipw_Init_UnusedPins+0x26c>)
    5508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    550c:	6999      	ldr	r1, [r3, #24]
    550e:	9b01      	ldr	r3, [sp, #4]
    5510:	685a      	ldr	r2, [r3, #4]
    5512:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5516:	005b      	lsls	r3, r3, #1
    5518:	4413      	add	r3, r2
    551a:	881b      	ldrh	r3, [r3, #0]
    551c:	f003 031f 	and.w	r3, r3, #31
    5520:	2201      	movs	r2, #1
    5522:	fa02 f303 	lsl.w	r3, r2, r3
    5526:	43da      	mvns	r2, r3
    5528:	9b01      	ldr	r3, [sp, #4]
    552a:	6858      	ldr	r0, [r3, #4]
    552c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5530:	005b      	lsls	r3, r3, #1
    5532:	4403      	add	r3, r0
    5534:	881b      	ldrh	r3, [r3, #0]
    5536:	095b      	lsrs	r3, r3, #5
    5538:	b29b      	uxth	r3, r3
    553a:	4618      	mov	r0, r3
    553c:	4b2d      	ldr	r3, [pc, #180]	; (55f4 <Port_Ipw_Init_UnusedPins+0x26c>)
    553e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5542:	400a      	ands	r2, r1
    5544:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    5546:	9b02      	ldr	r3, [sp, #8]
    5548:	2b03      	cmp	r3, #3
    554a:	d127      	bne.n	559c <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    554c:	9b01      	ldr	r3, [sp, #4]
    554e:	685a      	ldr	r2, [r3, #4]
    5550:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5554:	005b      	lsls	r3, r3, #1
    5556:	4413      	add	r3, r2
    5558:	881b      	ldrh	r3, [r3, #0]
    555a:	095b      	lsrs	r3, r3, #5
    555c:	b29b      	uxth	r3, r3
    555e:	461a      	mov	r2, r3
    5560:	4b24      	ldr	r3, [pc, #144]	; (55f4 <Port_Ipw_Init_UnusedPins+0x26c>)
    5562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5566:	6999      	ldr	r1, [r3, #24]
    5568:	9b01      	ldr	r3, [sp, #4]
    556a:	685a      	ldr	r2, [r3, #4]
    556c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5570:	005b      	lsls	r3, r3, #1
    5572:	4413      	add	r3, r2
    5574:	881b      	ldrh	r3, [r3, #0]
    5576:	f003 031f 	and.w	r3, r3, #31
    557a:	2201      	movs	r2, #1
    557c:	409a      	lsls	r2, r3
    557e:	9b01      	ldr	r3, [sp, #4]
    5580:	6858      	ldr	r0, [r3, #4]
    5582:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5586:	005b      	lsls	r3, r3, #1
    5588:	4403      	add	r3, r0
    558a:	881b      	ldrh	r3, [r3, #0]
    558c:	095b      	lsrs	r3, r3, #5
    558e:	b29b      	uxth	r3, r3
    5590:	4618      	mov	r0, r3
    5592:	4b18      	ldr	r3, [pc, #96]	; (55f4 <Port_Ipw_Init_UnusedPins+0x26c>)
    5594:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5598:	430a      	orrs	r2, r1
    559a:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    559c:	f001 f85c 	bl	6658 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    55a0:	9b01      	ldr	r3, [sp, #4]
    55a2:	685a      	ldr	r2, [r3, #4]
    55a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    55a8:	005b      	lsls	r3, r3, #1
    55aa:	4413      	add	r3, r2
    55ac:	881b      	ldrh	r3, [r3, #0]
    55ae:	095b      	lsrs	r3, r3, #5
    55b0:	b29b      	uxth	r3, r3
    55b2:	461a      	mov	r2, r3
    55b4:	4b10      	ldr	r3, [pc, #64]	; (55f8 <Port_Ipw_Init_UnusedPins+0x270>)
    55b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    55ba:	9a01      	ldr	r2, [sp, #4]
    55bc:	6851      	ldr	r1, [r2, #4]
    55be:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    55c2:	0052      	lsls	r2, r2, #1
    55c4:	440a      	add	r2, r1
    55c6:	8812      	ldrh	r2, [r2, #0]
    55c8:	f002 021f 	and.w	r2, r2, #31
    55cc:	9903      	ldr	r1, [sp, #12]
    55ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    55d2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    55d6:	3301      	adds	r3, #1
    55d8:	f8ad 3016 	strh.w	r3, [sp, #22]
    55dc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    55e0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    55e4:	429a      	cmp	r2, r3
    55e6:	f4ff aee7 	bcc.w	53b8 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    55ea:	bf00      	nop
    55ec:	bf00      	nop
    55ee:	b007      	add	sp, #28
    55f0:	f85d fb04 	ldr.w	pc, [sp], #4
    55f4:	00007924 	.word	0x00007924
    55f8:	00007910 	.word	0x00007910

000055fc <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    55fc:	b500      	push	{lr}
    55fe:	b085      	sub	sp, #20
    5600:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    5602:	9b01      	ldr	r3, [sp, #4]
    5604:	7c1b      	ldrb	r3, [r3, #16]
    5606:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    560a:	2300      	movs	r3, #0
    560c:	f8ad 300e 	strh.w	r3, [sp, #14]
    5610:	e035      	b.n	567e <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    5612:	9b01      	ldr	r3, [sp, #4]
    5614:	695a      	ldr	r2, [r3, #20]
    5616:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    561a:	00db      	lsls	r3, r3, #3
    561c:	4413      	add	r3, r2
    561e:	781b      	ldrb	r3, [r3, #0]
    5620:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    5624:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5628:	4a1f      	ldr	r2, [pc, #124]	; (56a8 <Port_Ipw_Init+0xac>)
    562a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    562e:	9b01      	ldr	r3, [sp, #4]
    5630:	695a      	ldr	r2, [r3, #20]
    5632:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5636:	00db      	lsls	r3, r3, #3
    5638:	4413      	add	r3, r2
    563a:	4619      	mov	r1, r3
    563c:	f7ff fe39 	bl	52b2 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    5640:	f001 f978 	bl	6934 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    5644:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5648:	4a17      	ldr	r2, [pc, #92]	; (56a8 <Port_Ipw_Init+0xac>)
    564a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    564e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    5652:	9b01      	ldr	r3, [sp, #4]
    5654:	695a      	ldr	r2, [r3, #20]
    5656:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    565a:	00db      	lsls	r3, r3, #3
    565c:	4413      	add	r3, r2
    565e:	685a      	ldr	r2, [r3, #4]
    5660:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5664:	4810      	ldr	r0, [pc, #64]	; (56a8 <Port_Ipw_Init+0xac>)
    5666:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    566a:	430a      	orrs	r2, r1
    566c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    5670:	f001 f98c 	bl	698c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5674:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5678:	3301      	adds	r3, #1
    567a:	f8ad 300e 	strh.w	r3, [sp, #14]
    567e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5682:	b29b      	uxth	r3, r3
    5684:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5688:	429a      	cmp	r2, r3
    568a:	d3c2      	bcc.n	5612 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    568c:	9b01      	ldr	r3, [sp, #4]
    568e:	6a1b      	ldr	r3, [r3, #32]
    5690:	4619      	mov	r1, r3
    5692:	2001      	movs	r0, #1
    5694:	f7ff fd98 	bl	51c8 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    5698:	9801      	ldr	r0, [sp, #4]
    569a:	f7ff fe75 	bl	5388 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    569e:	bf00      	nop
    56a0:	b005      	add	sp, #20
    56a2:	f85d fb04 	ldr.w	pc, [sp], #4
    56a6:	bf00      	nop
    56a8:	00007910 	.word	0x00007910

000056ac <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    56ac:	b500      	push	{lr}
    56ae:	b085      	sub	sp, #20
    56b0:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    56b2:	9b01      	ldr	r3, [sp, #4]
    56b4:	881b      	ldrh	r3, [r3, #0]
    56b6:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    56ba:	2300      	movs	r3, #0
    56bc:	f8ad 300e 	strh.w	r3, [sp, #14]
    56c0:	e0d2      	b.n	5868 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    56c2:	9b01      	ldr	r3, [sp, #4]
    56c4:	68d9      	ldr	r1, [r3, #12]
    56c6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56ca:	4613      	mov	r3, r2
    56cc:	009b      	lsls	r3, r3, #2
    56ce:	4413      	add	r3, r2
    56d0:	009b      	lsls	r3, r3, #2
    56d2:	440b      	add	r3, r1
    56d4:	7c5b      	ldrb	r3, [r3, #17]
    56d6:	f083 0301 	eor.w	r3, r3, #1
    56da:	b2db      	uxtb	r3, r3
    56dc:	2b00      	cmp	r3, #0
    56de:	f000 80be 	beq.w	585e <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    56e2:	9b01      	ldr	r3, [sp, #4]
    56e4:	68d9      	ldr	r1, [r3, #12]
    56e6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56ea:	4613      	mov	r3, r2
    56ec:	009b      	lsls	r3, r3, #2
    56ee:	4413      	add	r3, r2
    56f0:	009b      	lsls	r3, r3, #2
    56f2:	440b      	add	r3, r1
    56f4:	7c1b      	ldrb	r3, [r3, #16]
    56f6:	2b00      	cmp	r3, #0
    56f8:	f000 80b1 	beq.w	585e <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    56fc:	9b01      	ldr	r3, [sp, #4]
    56fe:	68d9      	ldr	r1, [r3, #12]
    5700:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5704:	4613      	mov	r3, r2
    5706:	009b      	lsls	r3, r3, #2
    5708:	4413      	add	r3, r2
    570a:	009b      	lsls	r3, r3, #2
    570c:	440b      	add	r3, r1
    570e:	881b      	ldrh	r3, [r3, #0]
    5710:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5714:	9b01      	ldr	r3, [sp, #4]
    5716:	68d9      	ldr	r1, [r3, #12]
    5718:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    571c:	4613      	mov	r3, r2
    571e:	009b      	lsls	r3, r3, #2
    5720:	4413      	add	r3, r2
    5722:	009b      	lsls	r3, r3, #2
    5724:	440b      	add	r3, r1
    5726:	68db      	ldr	r3, [r3, #12]
    5728:	2b02      	cmp	r3, #2
    572a:	d11d      	bne.n	5768 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    572c:	f001 fa4a 	bl	6bc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5730:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5734:	095b      	lsrs	r3, r3, #5
    5736:	b29b      	uxth	r3, r3
    5738:	461a      	mov	r2, r3
    573a:	4b51      	ldr	r3, [pc, #324]	; (5880 <Port_Ipw_RefreshPortDirection+0x1d4>)
    573c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5740:	6959      	ldr	r1, [r3, #20]
    5742:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5746:	f003 031f 	and.w	r3, r3, #31
    574a:	2201      	movs	r2, #1
    574c:	409a      	lsls	r2, r3
    574e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5752:	095b      	lsrs	r3, r3, #5
    5754:	b29b      	uxth	r3, r3
    5756:	4618      	mov	r0, r3
    5758:	4b49      	ldr	r3, [pc, #292]	; (5880 <Port_Ipw_RefreshPortDirection+0x1d4>)
    575a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    575e:	430a      	orrs	r2, r1
    5760:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5762:	f001 fa5b 	bl	6c1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    5766:	e07a      	b.n	585e <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    5768:	9b01      	ldr	r3, [sp, #4]
    576a:	68d9      	ldr	r1, [r3, #12]
    576c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5770:	4613      	mov	r3, r2
    5772:	009b      	lsls	r3, r3, #2
    5774:	4413      	add	r3, r2
    5776:	009b      	lsls	r3, r3, #2
    5778:	440b      	add	r3, r1
    577a:	68db      	ldr	r3, [r3, #12]
    577c:	2b01      	cmp	r3, #1
    577e:	d00b      	beq.n	5798 <Port_Ipw_RefreshPortDirection+0xec>
    5780:	9b01      	ldr	r3, [sp, #4]
    5782:	68d9      	ldr	r1, [r3, #12]
    5784:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5788:	4613      	mov	r3, r2
    578a:	009b      	lsls	r3, r3, #2
    578c:	4413      	add	r3, r2
    578e:	009b      	lsls	r3, r3, #2
    5790:	440b      	add	r3, r1
    5792:	68db      	ldr	r3, [r3, #12]
    5794:	2b03      	cmp	r3, #3
    5796:	d162      	bne.n	585e <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5798:	f001 fa14 	bl	6bc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    579c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57a0:	095b      	lsrs	r3, r3, #5
    57a2:	b29b      	uxth	r3, r3
    57a4:	461a      	mov	r2, r3
    57a6:	4b36      	ldr	r3, [pc, #216]	; (5880 <Port_Ipw_RefreshPortDirection+0x1d4>)
    57a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    57ac:	6959      	ldr	r1, [r3, #20]
    57ae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57b2:	f003 031f 	and.w	r3, r3, #31
    57b6:	2201      	movs	r2, #1
    57b8:	fa02 f303 	lsl.w	r3, r2, r3
    57bc:	43da      	mvns	r2, r3
    57be:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57c2:	095b      	lsrs	r3, r3, #5
    57c4:	b29b      	uxth	r3, r3
    57c6:	4618      	mov	r0, r3
    57c8:	4b2d      	ldr	r3, [pc, #180]	; (5880 <Port_Ipw_RefreshPortDirection+0x1d4>)
    57ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    57ce:	400a      	ands	r2, r1
    57d0:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    57d2:	f001 fa23 	bl	6c1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    57d6:	f001 fa47 	bl	6c68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    57da:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57de:	095b      	lsrs	r3, r3, #5
    57e0:	b29b      	uxth	r3, r3
    57e2:	461a      	mov	r2, r3
    57e4:	4b26      	ldr	r3, [pc, #152]	; (5880 <Port_Ipw_RefreshPortDirection+0x1d4>)
    57e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    57ea:	6999      	ldr	r1, [r3, #24]
    57ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57f0:	f003 031f 	and.w	r3, r3, #31
    57f4:	2201      	movs	r2, #1
    57f6:	fa02 f303 	lsl.w	r3, r2, r3
    57fa:	43da      	mvns	r2, r3
    57fc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5800:	095b      	lsrs	r3, r3, #5
    5802:	b29b      	uxth	r3, r3
    5804:	4618      	mov	r0, r3
    5806:	4b1e      	ldr	r3, [pc, #120]	; (5880 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5808:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    580c:	400a      	ands	r2, r1
    580e:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5810:	9b01      	ldr	r3, [sp, #4]
    5812:	68d9      	ldr	r1, [r3, #12]
    5814:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5818:	4613      	mov	r3, r2
    581a:	009b      	lsls	r3, r3, #2
    581c:	4413      	add	r3, r2
    581e:	009b      	lsls	r3, r3, #2
    5820:	440b      	add	r3, r1
    5822:	68db      	ldr	r3, [r3, #12]
    5824:	2b03      	cmp	r3, #3
    5826:	d118      	bne.n	585a <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5828:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    582c:	095b      	lsrs	r3, r3, #5
    582e:	b29b      	uxth	r3, r3
    5830:	461a      	mov	r2, r3
    5832:	4b13      	ldr	r3, [pc, #76]	; (5880 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5838:	6999      	ldr	r1, [r3, #24]
    583a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    583e:	f003 031f 	and.w	r3, r3, #31
    5842:	2201      	movs	r2, #1
    5844:	409a      	lsls	r2, r3
    5846:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    584a:	095b      	lsrs	r3, r3, #5
    584c:	b29b      	uxth	r3, r3
    584e:	4618      	mov	r0, r3
    5850:	4b0b      	ldr	r3, [pc, #44]	; (5880 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5852:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5856:	430a      	orrs	r2, r1
    5858:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    585a:	f001 fa31 	bl	6cc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    585e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5862:	3301      	adds	r3, #1
    5864:	f8ad 300e 	strh.w	r3, [sp, #14]
    5868:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    586c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5870:	429a      	cmp	r2, r3
    5872:	f4ff af26 	bcc.w	56c2 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    5876:	bf00      	nop
    5878:	bf00      	nop
    587a:	b005      	add	sp, #20
    587c:	f85d fb04 	ldr.w	pc, [sp], #4
    5880:	00007924 	.word	0x00007924

00005884 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    5884:	b500      	push	{lr}
    5886:	b085      	sub	sp, #20
    5888:	4603      	mov	r3, r0
    588a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    588e:	2300      	movs	r3, #0
    5890:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    5894:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5898:	4618      	mov	r0, r3
    589a:	f000 f871 	bl	5980 <Dio_Ipw_ReadChannel>
    589e:	4603      	mov	r3, r0
    58a0:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    58a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    58a8:	4618      	mov	r0, r3
    58aa:	b005      	add	sp, #20
    58ac:	f85d fb04 	ldr.w	pc, [sp], #4

000058b0 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    58b0:	b500      	push	{lr}
    58b2:	b083      	sub	sp, #12
    58b4:	4603      	mov	r3, r0
    58b6:	460a      	mov	r2, r1
    58b8:	f8ad 3006 	strh.w	r3, [sp, #6]
    58bc:	4613      	mov	r3, r2
    58be:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    58c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
    58c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    58ca:	4611      	mov	r1, r2
    58cc:	4618      	mov	r0, r3
    58ce:	f000 f87d 	bl	59cc <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    58d2:	bf00      	nop
    58d4:	b003      	add	sp, #12
    58d6:	f85d fb04 	ldr.w	pc, [sp], #4

000058da <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    58da:	b500      	push	{lr}
    58dc:	b085      	sub	sp, #20
    58de:	4603      	mov	r3, r0
    58e0:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    58e4:	2300      	movs	r3, #0
    58e6:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    58ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    58ee:	4618      	mov	r0, r3
    58f0:	f000 f892 	bl	5a18 <Dio_Ipw_FlipChannel>
    58f4:	4603      	mov	r3, r0
    58f6:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    58fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    58fe:	4618      	mov	r0, r3
    5900:	b005      	add	sp, #20
    5902:	f85d fb04 	ldr.w	pc, [sp], #4

00005906 <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    5906:	b500      	push	{lr}
    5908:	b085      	sub	sp, #20
    590a:	4603      	mov	r3, r0
    590c:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5910:	2300      	movs	r3, #0
    5912:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    5914:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5918:	4618      	mov	r0, r3
    591a:	f000 f8b3 	bl	5a84 <Dio_Ipw_ReadPort>
    591e:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    5920:	9b03      	ldr	r3, [sp, #12]
}
    5922:	4618      	mov	r0, r3
    5924:	b005      	add	sp, #20
    5926:	f85d fb04 	ldr.w	pc, [sp], #4

0000592a <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    592a:	b500      	push	{lr}
    592c:	b083      	sub	sp, #12
    592e:	4603      	mov	r3, r0
    5930:	9100      	str	r1, [sp, #0]
    5932:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    5936:	f89d 3007 	ldrb.w	r3, [sp, #7]
    593a:	9900      	ldr	r1, [sp, #0]
    593c:	4618      	mov	r0, r3
    593e:	f000 f8b9 	bl	5ab4 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    5942:	bf00      	nop
    5944:	b003      	add	sp, #12
    5946:	f85d fb04 	ldr.w	pc, [sp], #4

0000594a <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    594a:	b500      	push	{lr}
    594c:	b085      	sub	sp, #20
    594e:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5950:	2300      	movs	r3, #0
    5952:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    5954:	9801      	ldr	r0, [sp, #4]
    5956:	f000 f8c5 	bl	5ae4 <Dio_Ipw_ReadChannelGroup>
    595a:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    595c:	9b03      	ldr	r3, [sp, #12]
}
    595e:	4618      	mov	r0, r3
    5960:	b005      	add	sp, #20
    5962:	f85d fb04 	ldr.w	pc, [sp], #4

00005966 <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    5966:	b500      	push	{lr}
    5968:	b083      	sub	sp, #12
    596a:	9001      	str	r0, [sp, #4]
    596c:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    596e:	9900      	ldr	r1, [sp, #0]
    5970:	9801      	ldr	r0, [sp, #4]
    5972:	f000 f8d7 	bl	5b24 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    5976:	bf00      	nop
    5978:	b003      	add	sp, #12
    597a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005980 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    5980:	b500      	push	{lr}
    5982:	b087      	sub	sp, #28
    5984:	4603      	mov	r3, r0
    5986:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    598a:	2300      	movs	r3, #0
    598c:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5990:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5994:	095b      	lsrs	r3, r3, #5
    5996:	b29b      	uxth	r3, r3
    5998:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    599a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    599e:	f003 031f 	and.w	r3, r3, #31
    59a2:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    59a4:	4a08      	ldr	r2, [pc, #32]	; (59c8 <Dio_Ipw_ReadChannel+0x48>)
    59a6:	9b04      	ldr	r3, [sp, #16]
    59a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    59ac:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    59ae:	9903      	ldr	r1, [sp, #12]
    59b0:	9802      	ldr	r0, [sp, #8]
    59b2:	f000 f940 	bl	5c36 <Gpio_Dio_Ip_ReadPin>
    59b6:	4603      	mov	r3, r0
    59b8:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    59bc:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    59c0:	4618      	mov	r0, r3
    59c2:	b007      	add	sp, #28
    59c4:	f85d fb04 	ldr.w	pc, [sp], #4
    59c8:	1fff8b24 	.word	0x1fff8b24

000059cc <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    59cc:	b500      	push	{lr}
    59ce:	b087      	sub	sp, #28
    59d0:	4603      	mov	r3, r0
    59d2:	460a      	mov	r2, r1
    59d4:	f8ad 3006 	strh.w	r3, [sp, #6]
    59d8:	4613      	mov	r3, r2
    59da:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    59de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    59e2:	095b      	lsrs	r3, r3, #5
    59e4:	b29b      	uxth	r3, r3
    59e6:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    59e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    59ec:	f003 031f 	and.w	r3, r3, #31
    59f0:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    59f2:	4a08      	ldr	r2, [pc, #32]	; (5a14 <Dio_Ipw_WriteChannel+0x48>)
    59f4:	9b05      	ldr	r3, [sp, #20]
    59f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    59fa:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    59fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5a00:	461a      	mov	r2, r3
    5a02:	9904      	ldr	r1, [sp, #16]
    5a04:	9803      	ldr	r0, [sp, #12]
    5a06:	f000 f8b7 	bl	5b78 <Gpio_Dio_Ip_WritePin>
}
    5a0a:	bf00      	nop
    5a0c:	b007      	add	sp, #28
    5a0e:	f85d fb04 	ldr.w	pc, [sp], #4
    5a12:	bf00      	nop
    5a14:	1fff8b24 	.word	0x1fff8b24

00005a18 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    5a18:	b500      	push	{lr}
    5a1a:	b089      	sub	sp, #36	; 0x24
    5a1c:	4603      	mov	r3, r0
    5a1e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5a22:	2300      	movs	r3, #0
    5a24:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5a28:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5a2c:	095b      	lsrs	r3, r3, #5
    5a2e:	b29b      	uxth	r3, r3
    5a30:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    5a32:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5a36:	f003 031f 	and.w	r3, r3, #31
    5a3a:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    5a3c:	4a10      	ldr	r2, [pc, #64]	; (5a80 <Dio_Ipw_FlipChannel+0x68>)
    5a3e:	9b06      	ldr	r3, [sp, #24]
    5a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5a44:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    5a46:	2201      	movs	r2, #1
    5a48:	9b05      	ldr	r3, [sp, #20]
    5a4a:	fa02 f303 	lsl.w	r3, r2, r3
    5a4e:	4619      	mov	r1, r3
    5a50:	9804      	ldr	r0, [sp, #16]
    5a52:	f000 f8dc 	bl	5c0e <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    5a56:	9804      	ldr	r0, [sp, #16]
    5a58:	f000 f8bc 	bl	5bd4 <Gpio_Dio_Ip_GetPinsOutput>
    5a5c:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    5a5e:	2201      	movs	r2, #1
    5a60:	9b05      	ldr	r3, [sp, #20]
    5a62:	409a      	lsls	r2, r3
    5a64:	9b03      	ldr	r3, [sp, #12]
    5a66:	401a      	ands	r2, r3
    5a68:	9b05      	ldr	r3, [sp, #20]
    5a6a:	fa22 f303 	lsr.w	r3, r2, r3
    5a6e:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    5a72:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    5a76:	4618      	mov	r0, r3
    5a78:	b009      	add	sp, #36	; 0x24
    5a7a:	f85d fb04 	ldr.w	pc, [sp], #4
    5a7e:	bf00      	nop
    5a80:	1fff8b24 	.word	0x1fff8b24

00005a84 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    5a84:	b500      	push	{lr}
    5a86:	b085      	sub	sp, #20
    5a88:	4603      	mov	r3, r0
    5a8a:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5a8e:	2300      	movs	r3, #0
    5a90:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    5a92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5a96:	4a06      	ldr	r2, [pc, #24]	; (5ab0 <Dio_Ipw_ReadPort+0x2c>)
    5a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5a9c:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    5a9e:	9802      	ldr	r0, [sp, #8]
    5aa0:	f000 f8be 	bl	5c20 <Gpio_Dio_Ip_ReadPins>
    5aa4:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    5aa6:	9b03      	ldr	r3, [sp, #12]
}
    5aa8:	4618      	mov	r0, r3
    5aaa:	b005      	add	sp, #20
    5aac:	f85d fb04 	ldr.w	pc, [sp], #4
    5ab0:	1fff8b24 	.word	0x1fff8b24

00005ab4 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    5ab4:	b500      	push	{lr}
    5ab6:	b085      	sub	sp, #20
    5ab8:	4603      	mov	r3, r0
    5aba:	9100      	str	r1, [sp, #0]
    5abc:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    5ac0:	9b00      	ldr	r3, [sp, #0]
    5ac2:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    5ac4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5ac8:	4a05      	ldr	r2, [pc, #20]	; (5ae0 <Dio_Ipw_WritePort+0x2c>)
    5aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ace:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    5ad0:	9903      	ldr	r1, [sp, #12]
    5ad2:	9802      	ldr	r0, [sp, #8]
    5ad4:	f000 f875 	bl	5bc2 <Gpio_Dio_Ip_WritePins>
}
    5ad8:	bf00      	nop
    5ada:	b005      	add	sp, #20
    5adc:	f85d fb04 	ldr.w	pc, [sp], #4
    5ae0:	1fff8b24 	.word	0x1fff8b24

00005ae4 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    5ae4:	b500      	push	{lr}
    5ae6:	b087      	sub	sp, #28
    5ae8:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5aea:	2300      	movs	r3, #0
    5aec:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    5aee:	9b01      	ldr	r3, [sp, #4]
    5af0:	781b      	ldrb	r3, [r3, #0]
    5af2:	461a      	mov	r2, r3
    5af4:	4b0a      	ldr	r3, [pc, #40]	; (5b20 <Dio_Ipw_ReadChannelGroup+0x3c>)
    5af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5afa:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    5afc:	9804      	ldr	r0, [sp, #16]
    5afe:	f000 f88f 	bl	5c20 <Gpio_Dio_Ip_ReadPins>
    5b02:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    5b04:	9b01      	ldr	r3, [sp, #4]
    5b06:	685a      	ldr	r2, [r3, #4]
    5b08:	9b03      	ldr	r3, [sp, #12]
    5b0a:	4013      	ands	r3, r2
    5b0c:	9a01      	ldr	r2, [sp, #4]
    5b0e:	7852      	ldrb	r2, [r2, #1]
    5b10:	40d3      	lsrs	r3, r2
    5b12:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    5b14:	9b05      	ldr	r3, [sp, #20]
}
    5b16:	4618      	mov	r0, r3
    5b18:	b007      	add	sp, #28
    5b1a:	f85d fb04 	ldr.w	pc, [sp], #4
    5b1e:	bf00      	nop
    5b20:	1fff8b24 	.word	0x1fff8b24

00005b24 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    5b24:	b500      	push	{lr}
    5b26:	b087      	sub	sp, #28
    5b28:	9001      	str	r0, [sp, #4]
    5b2a:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    5b2c:	9b01      	ldr	r3, [sp, #4]
    5b2e:	781b      	ldrb	r3, [r3, #0]
    5b30:	461a      	mov	r2, r3
    5b32:	4b10      	ldr	r3, [pc, #64]	; (5b74 <Dio_Ipw_WriteChannelGroup+0x50>)
    5b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b38:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    5b3a:	9b01      	ldr	r3, [sp, #4]
    5b3c:	785b      	ldrb	r3, [r3, #1]
    5b3e:	461a      	mov	r2, r3
    5b40:	9b00      	ldr	r3, [sp, #0]
    5b42:	fa03 f202 	lsl.w	r2, r3, r2
    5b46:	9b01      	ldr	r3, [sp, #4]
    5b48:	685b      	ldr	r3, [r3, #4]
    5b4a:	4013      	ands	r3, r2
    5b4c:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    5b4e:	9904      	ldr	r1, [sp, #16]
    5b50:	9805      	ldr	r0, [sp, #20]
    5b52:	f000 f84a 	bl	5bea <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    5b56:	9b04      	ldr	r3, [sp, #16]
    5b58:	43da      	mvns	r2, r3
    5b5a:	9b01      	ldr	r3, [sp, #4]
    5b5c:	685b      	ldr	r3, [r3, #4]
    5b5e:	4013      	ands	r3, r2
    5b60:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    5b62:	9903      	ldr	r1, [sp, #12]
    5b64:	9805      	ldr	r0, [sp, #20]
    5b66:	f000 f849 	bl	5bfc <Gpio_Dio_Ip_ClearPins>

}
    5b6a:	bf00      	nop
    5b6c:	b007      	add	sp, #28
    5b6e:	f85d fb04 	ldr.w	pc, [sp], #4
    5b72:	bf00      	nop
    5b74:	1fff8b24 	.word	0x1fff8b24

00005b78 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    5b78:	b500      	push	{lr}
    5b7a:	b087      	sub	sp, #28
    5b7c:	9003      	str	r0, [sp, #12]
    5b7e:	9102      	str	r1, [sp, #8]
    5b80:	4613      	mov	r3, r2
    5b82:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    5b86:	f000 f86d 	bl	5c64 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    5b8a:	9b03      	ldr	r3, [sp, #12]
    5b8c:	681b      	ldr	r3, [r3, #0]
    5b8e:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    5b90:	2201      	movs	r2, #1
    5b92:	9b02      	ldr	r3, [sp, #8]
    5b94:	fa02 f303 	lsl.w	r3, r2, r3
    5b98:	43db      	mvns	r3, r3
    5b9a:	9a05      	ldr	r2, [sp, #20]
    5b9c:	4013      	ands	r3, r2
    5b9e:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    5ba0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5ba4:	9b02      	ldr	r3, [sp, #8]
    5ba6:	fa02 f303 	lsl.w	r3, r2, r3
    5baa:	9a05      	ldr	r2, [sp, #20]
    5bac:	4313      	orrs	r3, r2
    5bae:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    5bb0:	9b03      	ldr	r3, [sp, #12]
    5bb2:	9a05      	ldr	r2, [sp, #20]
    5bb4:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    5bb6:	f000 f881 	bl	5cbc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    5bba:	bf00      	nop
    5bbc:	b007      	add	sp, #28
    5bbe:	f85d fb04 	ldr.w	pc, [sp], #4

00005bc2 <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    5bc2:	b082      	sub	sp, #8
    5bc4:	9001      	str	r0, [sp, #4]
    5bc6:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    5bc8:	9b01      	ldr	r3, [sp, #4]
    5bca:	9a00      	ldr	r2, [sp, #0]
    5bcc:	601a      	str	r2, [r3, #0]
}
    5bce:	bf00      	nop
    5bd0:	b002      	add	sp, #8
    5bd2:	4770      	bx	lr

00005bd4 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    5bd4:	b084      	sub	sp, #16
    5bd6:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    5bd8:	2300      	movs	r3, #0
    5bda:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    5bdc:	9b01      	ldr	r3, [sp, #4]
    5bde:	681b      	ldr	r3, [r3, #0]
    5be0:	9303      	str	r3, [sp, #12]
    return returnValue;
    5be2:	9b03      	ldr	r3, [sp, #12]
}
    5be4:	4618      	mov	r0, r3
    5be6:	b004      	add	sp, #16
    5be8:	4770      	bx	lr

00005bea <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    5bea:	b082      	sub	sp, #8
    5bec:	9001      	str	r0, [sp, #4]
    5bee:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    5bf0:	9b01      	ldr	r3, [sp, #4]
    5bf2:	9a00      	ldr	r2, [sp, #0]
    5bf4:	605a      	str	r2, [r3, #4]
}
    5bf6:	bf00      	nop
    5bf8:	b002      	add	sp, #8
    5bfa:	4770      	bx	lr

00005bfc <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    5bfc:	b082      	sub	sp, #8
    5bfe:	9001      	str	r0, [sp, #4]
    5c00:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    5c02:	9b01      	ldr	r3, [sp, #4]
    5c04:	9a00      	ldr	r2, [sp, #0]
    5c06:	609a      	str	r2, [r3, #8]
}
    5c08:	bf00      	nop
    5c0a:	b002      	add	sp, #8
    5c0c:	4770      	bx	lr

00005c0e <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    5c0e:	b082      	sub	sp, #8
    5c10:	9001      	str	r0, [sp, #4]
    5c12:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    5c14:	9b01      	ldr	r3, [sp, #4]
    5c16:	9a00      	ldr	r2, [sp, #0]
    5c18:	60da      	str	r2, [r3, #12]
}
    5c1a:	bf00      	nop
    5c1c:	b002      	add	sp, #8
    5c1e:	4770      	bx	lr

00005c20 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    5c20:	b084      	sub	sp, #16
    5c22:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    5c24:	2300      	movs	r3, #0
    5c26:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    5c28:	9b01      	ldr	r3, [sp, #4]
    5c2a:	691b      	ldr	r3, [r3, #16]
    5c2c:	9303      	str	r3, [sp, #12]
    return returnValue;
    5c2e:	9b03      	ldr	r3, [sp, #12]
}
    5c30:	4618      	mov	r0, r3
    5c32:	b004      	add	sp, #16
    5c34:	4770      	bx	lr

00005c36 <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    5c36:	b084      	sub	sp, #16
    5c38:	9001      	str	r0, [sp, #4]
    5c3a:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    5c3c:	2300      	movs	r3, #0
    5c3e:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    5c42:	9b01      	ldr	r3, [sp, #4]
    5c44:	691a      	ldr	r2, [r3, #16]
    5c46:	2101      	movs	r1, #1
    5c48:	9b00      	ldr	r3, [sp, #0]
    5c4a:	fa01 f303 	lsl.w	r3, r1, r3
    5c4e:	401a      	ands	r2, r3
    5c50:	9b00      	ldr	r3, [sp, #0]
    5c52:	fa22 f303 	lsr.w	r3, r2, r3
    5c56:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    5c5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5c5e:	4618      	mov	r0, r3
    5c60:	b004      	add	sp, #16
    5c62:	4770      	bx	lr

00005c64 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    5c64:	b500      	push	{lr}
    5c66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5c68:	f7fa ff40 	bl	aec <Sys_GetCoreID>
    5c6c:	4603      	mov	r3, r0
    5c6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    5c70:	4a10      	ldr	r2, [pc, #64]	; (5cb4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    5c72:	9b01      	ldr	r3, [sp, #4]
    5c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c78:	2b00      	cmp	r3, #0
    5c7a:	d10d      	bne.n	5c98 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5c7c:	f7fa fe54 	bl	928 <Dio_schm_read_msr>
    5c80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5c82:	9b00      	ldr	r3, [sp, #0]
    5c84:	f003 0301 	and.w	r3, r3, #1
    5c88:	2b00      	cmp	r3, #0
    5c8a:	d100      	bne.n	5c8e <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5c8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    5c8e:	490a      	ldr	r1, [pc, #40]	; (5cb8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    5c90:	9b01      	ldr	r3, [sp, #4]
    5c92:	9a00      	ldr	r2, [sp, #0]
    5c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    5c98:	4a06      	ldr	r2, [pc, #24]	; (5cb4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    5c9a:	9b01      	ldr	r3, [sp, #4]
    5c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ca0:	1c5a      	adds	r2, r3, #1
    5ca2:	4904      	ldr	r1, [pc, #16]	; (5cb4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    5ca4:	9b01      	ldr	r3, [sp, #4]
    5ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5caa:	bf00      	nop
    5cac:	b003      	add	sp, #12
    5cae:	f85d fb04 	ldr.w	pc, [sp], #4
    5cb2:	bf00      	nop
    5cb4:	1fff8cfc 	.word	0x1fff8cfc
    5cb8:	1fff8cf8 	.word	0x1fff8cf8

00005cbc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    5cbc:	b500      	push	{lr}
    5cbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5cc0:	f7fa ff14 	bl	aec <Sys_GetCoreID>
    5cc4:	4603      	mov	r3, r0
    5cc6:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    5cc8:	4a0d      	ldr	r2, [pc, #52]	; (5d00 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    5cca:	9b01      	ldr	r3, [sp, #4]
    5ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5cd0:	1e5a      	subs	r2, r3, #1
    5cd2:	490b      	ldr	r1, [pc, #44]	; (5d00 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    5cd4:	9b01      	ldr	r3, [sp, #4]
    5cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    5cda:	4a0a      	ldr	r2, [pc, #40]	; (5d04 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    5cdc:	9b01      	ldr	r3, [sp, #4]
    5cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ce2:	f003 0301 	and.w	r3, r3, #1
    5ce6:	2b00      	cmp	r3, #0
    5ce8:	d106      	bne.n	5cf8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    5cea:	4a05      	ldr	r2, [pc, #20]	; (5d00 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    5cec:	9b01      	ldr	r3, [sp, #4]
    5cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5cf2:	2b00      	cmp	r3, #0
    5cf4:	d100      	bne.n	5cf8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5cf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5cf8:	bf00      	nop
    5cfa:	b003      	add	sp, #12
    5cfc:	f85d fb04 	ldr.w	pc, [sp], #4
    5d00:	1fff8cfc 	.word	0x1fff8cfc
    5d04:	1fff8cf8 	.word	0x1fff8cf8

00005d08 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    5d08:	b500      	push	{lr}
    5d0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5d0c:	f7fa feee 	bl	aec <Sys_GetCoreID>
    5d10:	4603      	mov	r3, r0
    5d12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    5d14:	4a10      	ldr	r2, [pc, #64]	; (5d58 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    5d16:	9b01      	ldr	r3, [sp, #4]
    5d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d1c:	2b00      	cmp	r3, #0
    5d1e:	d10d      	bne.n	5d3c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5d20:	f7fa fe02 	bl	928 <Dio_schm_read_msr>
    5d24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5d26:	9b00      	ldr	r3, [sp, #0]
    5d28:	f003 0301 	and.w	r3, r3, #1
    5d2c:	2b00      	cmp	r3, #0
    5d2e:	d100      	bne.n	5d32 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5d30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    5d32:	490a      	ldr	r1, [pc, #40]	; (5d5c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    5d34:	9b01      	ldr	r3, [sp, #4]
    5d36:	9a00      	ldr	r2, [sp, #0]
    5d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    5d3c:	4a06      	ldr	r2, [pc, #24]	; (5d58 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    5d3e:	9b01      	ldr	r3, [sp, #4]
    5d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d44:	1c5a      	adds	r2, r3, #1
    5d46:	4904      	ldr	r1, [pc, #16]	; (5d58 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    5d48:	9b01      	ldr	r3, [sp, #4]
    5d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5d4e:	bf00      	nop
    5d50:	b003      	add	sp, #12
    5d52:	f85d fb04 	ldr.w	pc, [sp], #4
    5d56:	bf00      	nop
    5d58:	1fff8d04 	.word	0x1fff8d04
    5d5c:	1fff8d00 	.word	0x1fff8d00

00005d60 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    5d60:	b500      	push	{lr}
    5d62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5d64:	f7fa fec2 	bl	aec <Sys_GetCoreID>
    5d68:	4603      	mov	r3, r0
    5d6a:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    5d6c:	4a0d      	ldr	r2, [pc, #52]	; (5da4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    5d6e:	9b01      	ldr	r3, [sp, #4]
    5d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d74:	1e5a      	subs	r2, r3, #1
    5d76:	490b      	ldr	r1, [pc, #44]	; (5da4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    5d78:	9b01      	ldr	r3, [sp, #4]
    5d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    5d7e:	4a0a      	ldr	r2, [pc, #40]	; (5da8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    5d80:	9b01      	ldr	r3, [sp, #4]
    5d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d86:	f003 0301 	and.w	r3, r3, #1
    5d8a:	2b00      	cmp	r3, #0
    5d8c:	d106      	bne.n	5d9c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    5d8e:	4a05      	ldr	r2, [pc, #20]	; (5da4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    5d90:	9b01      	ldr	r3, [sp, #4]
    5d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d96:	2b00      	cmp	r3, #0
    5d98:	d100      	bne.n	5d9c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5d9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5d9c:	bf00      	nop
    5d9e:	b003      	add	sp, #12
    5da0:	f85d fb04 	ldr.w	pc, [sp], #4
    5da4:	1fff8d04 	.word	0x1fff8d04
    5da8:	1fff8d00 	.word	0x1fff8d00

00005dac <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    5dac:	b500      	push	{lr}
    5dae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5db0:	f7fa fe9c 	bl	aec <Sys_GetCoreID>
    5db4:	4603      	mov	r3, r0
    5db6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    5db8:	4a10      	ldr	r2, [pc, #64]	; (5dfc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    5dba:	9b01      	ldr	r3, [sp, #4]
    5dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5dc0:	2b00      	cmp	r3, #0
    5dc2:	d10d      	bne.n	5de0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5dc4:	f7fa fdb9 	bl	93a <Mcu_schm_read_msr>
    5dc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5dca:	9b00      	ldr	r3, [sp, #0]
    5dcc:	f003 0301 	and.w	r3, r3, #1
    5dd0:	2b00      	cmp	r3, #0
    5dd2:	d100      	bne.n	5dd6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5dd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    5dd6:	490a      	ldr	r1, [pc, #40]	; (5e00 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    5dd8:	9b01      	ldr	r3, [sp, #4]
    5dda:	9a00      	ldr	r2, [sp, #0]
    5ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    5de0:	4a06      	ldr	r2, [pc, #24]	; (5dfc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    5de2:	9b01      	ldr	r3, [sp, #4]
    5de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5de8:	1c5a      	adds	r2, r3, #1
    5dea:	4904      	ldr	r1, [pc, #16]	; (5dfc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    5dec:	9b01      	ldr	r3, [sp, #4]
    5dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5df2:	bf00      	nop
    5df4:	b003      	add	sp, #12
    5df6:	f85d fb04 	ldr.w	pc, [sp], #4
    5dfa:	bf00      	nop
    5dfc:	1fff8d0c 	.word	0x1fff8d0c
    5e00:	1fff8d08 	.word	0x1fff8d08

00005e04 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    5e04:	b500      	push	{lr}
    5e06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5e08:	f7fa fe70 	bl	aec <Sys_GetCoreID>
    5e0c:	4603      	mov	r3, r0
    5e0e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    5e10:	4a0d      	ldr	r2, [pc, #52]	; (5e48 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    5e12:	9b01      	ldr	r3, [sp, #4]
    5e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e18:	1e5a      	subs	r2, r3, #1
    5e1a:	490b      	ldr	r1, [pc, #44]	; (5e48 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    5e1c:	9b01      	ldr	r3, [sp, #4]
    5e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    5e22:	4a0a      	ldr	r2, [pc, #40]	; (5e4c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    5e24:	9b01      	ldr	r3, [sp, #4]
    5e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e2a:	f003 0301 	and.w	r3, r3, #1
    5e2e:	2b00      	cmp	r3, #0
    5e30:	d106      	bne.n	5e40 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    5e32:	4a05      	ldr	r2, [pc, #20]	; (5e48 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    5e34:	9b01      	ldr	r3, [sp, #4]
    5e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e3a:	2b00      	cmp	r3, #0
    5e3c:	d100      	bne.n	5e40 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5e3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5e40:	bf00      	nop
    5e42:	b003      	add	sp, #12
    5e44:	f85d fb04 	ldr.w	pc, [sp], #4
    5e48:	1fff8d0c 	.word	0x1fff8d0c
    5e4c:	1fff8d08 	.word	0x1fff8d08

00005e50 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    5e50:	b500      	push	{lr}
    5e52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5e54:	f7fa fe4a 	bl	aec <Sys_GetCoreID>
    5e58:	4603      	mov	r3, r0
    5e5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    5e5c:	4a10      	ldr	r2, [pc, #64]	; (5ea0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    5e5e:	9b01      	ldr	r3, [sp, #4]
    5e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e64:	2b00      	cmp	r3, #0
    5e66:	d10d      	bne.n	5e84 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5e68:	f7fa fd67 	bl	93a <Mcu_schm_read_msr>
    5e6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5e6e:	9b00      	ldr	r3, [sp, #0]
    5e70:	f003 0301 	and.w	r3, r3, #1
    5e74:	2b00      	cmp	r3, #0
    5e76:	d100      	bne.n	5e7a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5e78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    5e7a:	490a      	ldr	r1, [pc, #40]	; (5ea4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    5e7c:	9b01      	ldr	r3, [sp, #4]
    5e7e:	9a00      	ldr	r2, [sp, #0]
    5e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    5e84:	4a06      	ldr	r2, [pc, #24]	; (5ea0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    5e86:	9b01      	ldr	r3, [sp, #4]
    5e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e8c:	1c5a      	adds	r2, r3, #1
    5e8e:	4904      	ldr	r1, [pc, #16]	; (5ea0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    5e90:	9b01      	ldr	r3, [sp, #4]
    5e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5e96:	bf00      	nop
    5e98:	b003      	add	sp, #12
    5e9a:	f85d fb04 	ldr.w	pc, [sp], #4
    5e9e:	bf00      	nop
    5ea0:	1fff8d14 	.word	0x1fff8d14
    5ea4:	1fff8d10 	.word	0x1fff8d10

00005ea8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    5ea8:	b500      	push	{lr}
    5eaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5eac:	f7fa fe1e 	bl	aec <Sys_GetCoreID>
    5eb0:	4603      	mov	r3, r0
    5eb2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    5eb4:	4a0d      	ldr	r2, [pc, #52]	; (5eec <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    5eb6:	9b01      	ldr	r3, [sp, #4]
    5eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ebc:	1e5a      	subs	r2, r3, #1
    5ebe:	490b      	ldr	r1, [pc, #44]	; (5eec <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    5ec0:	9b01      	ldr	r3, [sp, #4]
    5ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    5ec6:	4a0a      	ldr	r2, [pc, #40]	; (5ef0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    5ec8:	9b01      	ldr	r3, [sp, #4]
    5eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ece:	f003 0301 	and.w	r3, r3, #1
    5ed2:	2b00      	cmp	r3, #0
    5ed4:	d106      	bne.n	5ee4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    5ed6:	4a05      	ldr	r2, [pc, #20]	; (5eec <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    5ed8:	9b01      	ldr	r3, [sp, #4]
    5eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ede:	2b00      	cmp	r3, #0
    5ee0:	d100      	bne.n	5ee4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5ee2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5ee4:	bf00      	nop
    5ee6:	b003      	add	sp, #12
    5ee8:	f85d fb04 	ldr.w	pc, [sp], #4
    5eec:	1fff8d14 	.word	0x1fff8d14
    5ef0:	1fff8d10 	.word	0x1fff8d10

00005ef4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    5ef4:	b500      	push	{lr}
    5ef6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5ef8:	f7fa fdf8 	bl	aec <Sys_GetCoreID>
    5efc:	4603      	mov	r3, r0
    5efe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    5f00:	4a10      	ldr	r2, [pc, #64]	; (5f44 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    5f02:	9b01      	ldr	r3, [sp, #4]
    5f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f08:	2b00      	cmp	r3, #0
    5f0a:	d10d      	bne.n	5f28 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5f0c:	f7fa fd15 	bl	93a <Mcu_schm_read_msr>
    5f10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5f12:	9b00      	ldr	r3, [sp, #0]
    5f14:	f003 0301 	and.w	r3, r3, #1
    5f18:	2b00      	cmp	r3, #0
    5f1a:	d100      	bne.n	5f1e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5f1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    5f1e:	490a      	ldr	r1, [pc, #40]	; (5f48 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    5f20:	9b01      	ldr	r3, [sp, #4]
    5f22:	9a00      	ldr	r2, [sp, #0]
    5f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    5f28:	4a06      	ldr	r2, [pc, #24]	; (5f44 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    5f2a:	9b01      	ldr	r3, [sp, #4]
    5f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f30:	1c5a      	adds	r2, r3, #1
    5f32:	4904      	ldr	r1, [pc, #16]	; (5f44 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    5f34:	9b01      	ldr	r3, [sp, #4]
    5f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5f3a:	bf00      	nop
    5f3c:	b003      	add	sp, #12
    5f3e:	f85d fb04 	ldr.w	pc, [sp], #4
    5f42:	bf00      	nop
    5f44:	1fff8d1c 	.word	0x1fff8d1c
    5f48:	1fff8d18 	.word	0x1fff8d18

00005f4c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    5f4c:	b500      	push	{lr}
    5f4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5f50:	f7fa fdcc 	bl	aec <Sys_GetCoreID>
    5f54:	4603      	mov	r3, r0
    5f56:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    5f58:	4a0d      	ldr	r2, [pc, #52]	; (5f90 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    5f5a:	9b01      	ldr	r3, [sp, #4]
    5f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f60:	1e5a      	subs	r2, r3, #1
    5f62:	490b      	ldr	r1, [pc, #44]	; (5f90 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    5f64:	9b01      	ldr	r3, [sp, #4]
    5f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    5f6a:	4a0a      	ldr	r2, [pc, #40]	; (5f94 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    5f6c:	9b01      	ldr	r3, [sp, #4]
    5f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f72:	f003 0301 	and.w	r3, r3, #1
    5f76:	2b00      	cmp	r3, #0
    5f78:	d106      	bne.n	5f88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    5f7a:	4a05      	ldr	r2, [pc, #20]	; (5f90 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    5f7c:	9b01      	ldr	r3, [sp, #4]
    5f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f82:	2b00      	cmp	r3, #0
    5f84:	d100      	bne.n	5f88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5f86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5f88:	bf00      	nop
    5f8a:	b003      	add	sp, #12
    5f8c:	f85d fb04 	ldr.w	pc, [sp], #4
    5f90:	1fff8d1c 	.word	0x1fff8d1c
    5f94:	1fff8d18 	.word	0x1fff8d18

00005f98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    5f98:	b500      	push	{lr}
    5f9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5f9c:	f7fa fda6 	bl	aec <Sys_GetCoreID>
    5fa0:	4603      	mov	r3, r0
    5fa2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    5fa4:	4a10      	ldr	r2, [pc, #64]	; (5fe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    5fa6:	9b01      	ldr	r3, [sp, #4]
    5fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fac:	2b00      	cmp	r3, #0
    5fae:	d10d      	bne.n	5fcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5fb0:	f7fa fccc 	bl	94c <Port_schm_read_msr>
    5fb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5fb6:	9b00      	ldr	r3, [sp, #0]
    5fb8:	f003 0301 	and.w	r3, r3, #1
    5fbc:	2b00      	cmp	r3, #0
    5fbe:	d100      	bne.n	5fc2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5fc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    5fc2:	490a      	ldr	r1, [pc, #40]	; (5fec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    5fc4:	9b01      	ldr	r3, [sp, #4]
    5fc6:	9a00      	ldr	r2, [sp, #0]
    5fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    5fcc:	4a06      	ldr	r2, [pc, #24]	; (5fe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    5fce:	9b01      	ldr	r3, [sp, #4]
    5fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fd4:	1c5a      	adds	r2, r3, #1
    5fd6:	4904      	ldr	r1, [pc, #16]	; (5fe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    5fd8:	9b01      	ldr	r3, [sp, #4]
    5fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5fde:	bf00      	nop
    5fe0:	b003      	add	sp, #12
    5fe2:	f85d fb04 	ldr.w	pc, [sp], #4
    5fe6:	bf00      	nop
    5fe8:	1fff8d24 	.word	0x1fff8d24
    5fec:	1fff8d20 	.word	0x1fff8d20

00005ff0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    5ff0:	b500      	push	{lr}
    5ff2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5ff4:	f7fa fd7a 	bl	aec <Sys_GetCoreID>
    5ff8:	4603      	mov	r3, r0
    5ffa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    5ffc:	4a0d      	ldr	r2, [pc, #52]	; (6034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    5ffe:	9b01      	ldr	r3, [sp, #4]
    6000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6004:	1e5a      	subs	r2, r3, #1
    6006:	490b      	ldr	r1, [pc, #44]	; (6034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6008:	9b01      	ldr	r3, [sp, #4]
    600a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    600e:	4a0a      	ldr	r2, [pc, #40]	; (6038 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    6010:	9b01      	ldr	r3, [sp, #4]
    6012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6016:	f003 0301 	and.w	r3, r3, #1
    601a:	2b00      	cmp	r3, #0
    601c:	d106      	bne.n	602c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    601e:	4a05      	ldr	r2, [pc, #20]	; (6034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6020:	9b01      	ldr	r3, [sp, #4]
    6022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6026:	2b00      	cmp	r3, #0
    6028:	d100      	bne.n	602c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    602a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    602c:	bf00      	nop
    602e:	b003      	add	sp, #12
    6030:	f85d fb04 	ldr.w	pc, [sp], #4
    6034:	1fff8d24 	.word	0x1fff8d24
    6038:	1fff8d20 	.word	0x1fff8d20

0000603c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    603c:	b500      	push	{lr}
    603e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6040:	f7fa fd54 	bl	aec <Sys_GetCoreID>
    6044:	4603      	mov	r3, r0
    6046:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    6048:	4a10      	ldr	r2, [pc, #64]	; (608c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    604a:	9b01      	ldr	r3, [sp, #4]
    604c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6050:	2b00      	cmp	r3, #0
    6052:	d10d      	bne.n	6070 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6054:	f7fa fc7a 	bl	94c <Port_schm_read_msr>
    6058:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    605a:	9b00      	ldr	r3, [sp, #0]
    605c:	f003 0301 	and.w	r3, r3, #1
    6060:	2b00      	cmp	r3, #0
    6062:	d100      	bne.n	6066 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6064:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    6066:	490a      	ldr	r1, [pc, #40]	; (6090 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    6068:	9b01      	ldr	r3, [sp, #4]
    606a:	9a00      	ldr	r2, [sp, #0]
    606c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    6070:	4a06      	ldr	r2, [pc, #24]	; (608c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    6072:	9b01      	ldr	r3, [sp, #4]
    6074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6078:	1c5a      	adds	r2, r3, #1
    607a:	4904      	ldr	r1, [pc, #16]	; (608c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    607c:	9b01      	ldr	r3, [sp, #4]
    607e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6082:	bf00      	nop
    6084:	b003      	add	sp, #12
    6086:	f85d fb04 	ldr.w	pc, [sp], #4
    608a:	bf00      	nop
    608c:	1fff8d2c 	.word	0x1fff8d2c
    6090:	1fff8d28 	.word	0x1fff8d28

00006094 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    6094:	b500      	push	{lr}
    6096:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6098:	f7fa fd28 	bl	aec <Sys_GetCoreID>
    609c:	4603      	mov	r3, r0
    609e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    60a0:	4a0d      	ldr	r2, [pc, #52]	; (60d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    60a2:	9b01      	ldr	r3, [sp, #4]
    60a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60a8:	1e5a      	subs	r2, r3, #1
    60aa:	490b      	ldr	r1, [pc, #44]	; (60d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    60ac:	9b01      	ldr	r3, [sp, #4]
    60ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    60b2:	4a0a      	ldr	r2, [pc, #40]	; (60dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    60b4:	9b01      	ldr	r3, [sp, #4]
    60b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60ba:	f003 0301 	and.w	r3, r3, #1
    60be:	2b00      	cmp	r3, #0
    60c0:	d106      	bne.n	60d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    60c2:	4a05      	ldr	r2, [pc, #20]	; (60d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    60c4:	9b01      	ldr	r3, [sp, #4]
    60c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60ca:	2b00      	cmp	r3, #0
    60cc:	d100      	bne.n	60d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    60ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    60d0:	bf00      	nop
    60d2:	b003      	add	sp, #12
    60d4:	f85d fb04 	ldr.w	pc, [sp], #4
    60d8:	1fff8d2c 	.word	0x1fff8d2c
    60dc:	1fff8d28 	.word	0x1fff8d28

000060e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    60e0:	b500      	push	{lr}
    60e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    60e4:	f7fa fd02 	bl	aec <Sys_GetCoreID>
    60e8:	4603      	mov	r3, r0
    60ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    60ec:	4a10      	ldr	r2, [pc, #64]	; (6130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    60ee:	9b01      	ldr	r3, [sp, #4]
    60f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60f4:	2b00      	cmp	r3, #0
    60f6:	d10d      	bne.n	6114 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    60f8:	f7fa fc28 	bl	94c <Port_schm_read_msr>
    60fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    60fe:	9b00      	ldr	r3, [sp, #0]
    6100:	f003 0301 	and.w	r3, r3, #1
    6104:	2b00      	cmp	r3, #0
    6106:	d100      	bne.n	610a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6108:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    610a:	490a      	ldr	r1, [pc, #40]	; (6134 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    610c:	9b01      	ldr	r3, [sp, #4]
    610e:	9a00      	ldr	r2, [sp, #0]
    6110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    6114:	4a06      	ldr	r2, [pc, #24]	; (6130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    6116:	9b01      	ldr	r3, [sp, #4]
    6118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    611c:	1c5a      	adds	r2, r3, #1
    611e:	4904      	ldr	r1, [pc, #16]	; (6130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    6120:	9b01      	ldr	r3, [sp, #4]
    6122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6126:	bf00      	nop
    6128:	b003      	add	sp, #12
    612a:	f85d fb04 	ldr.w	pc, [sp], #4
    612e:	bf00      	nop
    6130:	1fff8d34 	.word	0x1fff8d34
    6134:	1fff8d30 	.word	0x1fff8d30

00006138 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    6138:	b500      	push	{lr}
    613a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    613c:	f7fa fcd6 	bl	aec <Sys_GetCoreID>
    6140:	4603      	mov	r3, r0
    6142:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    6144:	4a0d      	ldr	r2, [pc, #52]	; (617c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6146:	9b01      	ldr	r3, [sp, #4]
    6148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    614c:	1e5a      	subs	r2, r3, #1
    614e:	490b      	ldr	r1, [pc, #44]	; (617c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6150:	9b01      	ldr	r3, [sp, #4]
    6152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    6156:	4a0a      	ldr	r2, [pc, #40]	; (6180 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    6158:	9b01      	ldr	r3, [sp, #4]
    615a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    615e:	f003 0301 	and.w	r3, r3, #1
    6162:	2b00      	cmp	r3, #0
    6164:	d106      	bne.n	6174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    6166:	4a05      	ldr	r2, [pc, #20]	; (617c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6168:	9b01      	ldr	r3, [sp, #4]
    616a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    616e:	2b00      	cmp	r3, #0
    6170:	d100      	bne.n	6174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6172:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6174:	bf00      	nop
    6176:	b003      	add	sp, #12
    6178:	f85d fb04 	ldr.w	pc, [sp], #4
    617c:	1fff8d34 	.word	0x1fff8d34
    6180:	1fff8d30 	.word	0x1fff8d30

00006184 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    6184:	b500      	push	{lr}
    6186:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6188:	f7fa fcb0 	bl	aec <Sys_GetCoreID>
    618c:	4603      	mov	r3, r0
    618e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    6190:	4a10      	ldr	r2, [pc, #64]	; (61d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    6192:	9b01      	ldr	r3, [sp, #4]
    6194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6198:	2b00      	cmp	r3, #0
    619a:	d10d      	bne.n	61b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    619c:	f7fa fbd6 	bl	94c <Port_schm_read_msr>
    61a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    61a2:	9b00      	ldr	r3, [sp, #0]
    61a4:	f003 0301 	and.w	r3, r3, #1
    61a8:	2b00      	cmp	r3, #0
    61aa:	d100      	bne.n	61ae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    61ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    61ae:	490a      	ldr	r1, [pc, #40]	; (61d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    61b0:	9b01      	ldr	r3, [sp, #4]
    61b2:	9a00      	ldr	r2, [sp, #0]
    61b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    61b8:	4a06      	ldr	r2, [pc, #24]	; (61d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    61ba:	9b01      	ldr	r3, [sp, #4]
    61bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61c0:	1c5a      	adds	r2, r3, #1
    61c2:	4904      	ldr	r1, [pc, #16]	; (61d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    61c4:	9b01      	ldr	r3, [sp, #4]
    61c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    61ca:	bf00      	nop
    61cc:	b003      	add	sp, #12
    61ce:	f85d fb04 	ldr.w	pc, [sp], #4
    61d2:	bf00      	nop
    61d4:	1fff8d3c 	.word	0x1fff8d3c
    61d8:	1fff8d38 	.word	0x1fff8d38

000061dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    61dc:	b500      	push	{lr}
    61de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    61e0:	f7fa fc84 	bl	aec <Sys_GetCoreID>
    61e4:	4603      	mov	r3, r0
    61e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    61e8:	4a0d      	ldr	r2, [pc, #52]	; (6220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    61ea:	9b01      	ldr	r3, [sp, #4]
    61ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61f0:	1e5a      	subs	r2, r3, #1
    61f2:	490b      	ldr	r1, [pc, #44]	; (6220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    61f4:	9b01      	ldr	r3, [sp, #4]
    61f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    61fa:	4a0a      	ldr	r2, [pc, #40]	; (6224 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    61fc:	9b01      	ldr	r3, [sp, #4]
    61fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6202:	f003 0301 	and.w	r3, r3, #1
    6206:	2b00      	cmp	r3, #0
    6208:	d106      	bne.n	6218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    620a:	4a05      	ldr	r2, [pc, #20]	; (6220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    620c:	9b01      	ldr	r3, [sp, #4]
    620e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6212:	2b00      	cmp	r3, #0
    6214:	d100      	bne.n	6218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6216:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6218:	bf00      	nop
    621a:	b003      	add	sp, #12
    621c:	f85d fb04 	ldr.w	pc, [sp], #4
    6220:	1fff8d3c 	.word	0x1fff8d3c
    6224:	1fff8d38 	.word	0x1fff8d38

00006228 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    6228:	b500      	push	{lr}
    622a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    622c:	f7fa fc5e 	bl	aec <Sys_GetCoreID>
    6230:	4603      	mov	r3, r0
    6232:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    6234:	4a10      	ldr	r2, [pc, #64]	; (6278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    6236:	9b01      	ldr	r3, [sp, #4]
    6238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    623c:	2b00      	cmp	r3, #0
    623e:	d10d      	bne.n	625c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6240:	f7fa fb84 	bl	94c <Port_schm_read_msr>
    6244:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6246:	9b00      	ldr	r3, [sp, #0]
    6248:	f003 0301 	and.w	r3, r3, #1
    624c:	2b00      	cmp	r3, #0
    624e:	d100      	bne.n	6252 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6250:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    6252:	490a      	ldr	r1, [pc, #40]	; (627c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    6254:	9b01      	ldr	r3, [sp, #4]
    6256:	9a00      	ldr	r2, [sp, #0]
    6258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    625c:	4a06      	ldr	r2, [pc, #24]	; (6278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    625e:	9b01      	ldr	r3, [sp, #4]
    6260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6264:	1c5a      	adds	r2, r3, #1
    6266:	4904      	ldr	r1, [pc, #16]	; (6278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    6268:	9b01      	ldr	r3, [sp, #4]
    626a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    626e:	bf00      	nop
    6270:	b003      	add	sp, #12
    6272:	f85d fb04 	ldr.w	pc, [sp], #4
    6276:	bf00      	nop
    6278:	1fff8d44 	.word	0x1fff8d44
    627c:	1fff8d40 	.word	0x1fff8d40

00006280 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    6280:	b500      	push	{lr}
    6282:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6284:	f7fa fc32 	bl	aec <Sys_GetCoreID>
    6288:	4603      	mov	r3, r0
    628a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    628c:	4a0d      	ldr	r2, [pc, #52]	; (62c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    628e:	9b01      	ldr	r3, [sp, #4]
    6290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6294:	1e5a      	subs	r2, r3, #1
    6296:	490b      	ldr	r1, [pc, #44]	; (62c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    6298:	9b01      	ldr	r3, [sp, #4]
    629a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    629e:	4a0a      	ldr	r2, [pc, #40]	; (62c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    62a0:	9b01      	ldr	r3, [sp, #4]
    62a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62a6:	f003 0301 	and.w	r3, r3, #1
    62aa:	2b00      	cmp	r3, #0
    62ac:	d106      	bne.n	62bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    62ae:	4a05      	ldr	r2, [pc, #20]	; (62c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    62b0:	9b01      	ldr	r3, [sp, #4]
    62b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62b6:	2b00      	cmp	r3, #0
    62b8:	d100      	bne.n	62bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    62ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    62bc:	bf00      	nop
    62be:	b003      	add	sp, #12
    62c0:	f85d fb04 	ldr.w	pc, [sp], #4
    62c4:	1fff8d44 	.word	0x1fff8d44
    62c8:	1fff8d40 	.word	0x1fff8d40

000062cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    62cc:	b500      	push	{lr}
    62ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    62d0:	f7fa fc0c 	bl	aec <Sys_GetCoreID>
    62d4:	4603      	mov	r3, r0
    62d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    62d8:	4a10      	ldr	r2, [pc, #64]	; (631c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    62da:	9b01      	ldr	r3, [sp, #4]
    62dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62e0:	2b00      	cmp	r3, #0
    62e2:	d10d      	bne.n	6300 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    62e4:	f7fa fb32 	bl	94c <Port_schm_read_msr>
    62e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    62ea:	9b00      	ldr	r3, [sp, #0]
    62ec:	f003 0301 	and.w	r3, r3, #1
    62f0:	2b00      	cmp	r3, #0
    62f2:	d100      	bne.n	62f6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    62f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    62f6:	490a      	ldr	r1, [pc, #40]	; (6320 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    62f8:	9b01      	ldr	r3, [sp, #4]
    62fa:	9a00      	ldr	r2, [sp, #0]
    62fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    6300:	4a06      	ldr	r2, [pc, #24]	; (631c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    6302:	9b01      	ldr	r3, [sp, #4]
    6304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6308:	1c5a      	adds	r2, r3, #1
    630a:	4904      	ldr	r1, [pc, #16]	; (631c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    630c:	9b01      	ldr	r3, [sp, #4]
    630e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6312:	bf00      	nop
    6314:	b003      	add	sp, #12
    6316:	f85d fb04 	ldr.w	pc, [sp], #4
    631a:	bf00      	nop
    631c:	1fff8d4c 	.word	0x1fff8d4c
    6320:	1fff8d48 	.word	0x1fff8d48

00006324 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    6324:	b500      	push	{lr}
    6326:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6328:	f7fa fbe0 	bl	aec <Sys_GetCoreID>
    632c:	4603      	mov	r3, r0
    632e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    6330:	4a0d      	ldr	r2, [pc, #52]	; (6368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    6332:	9b01      	ldr	r3, [sp, #4]
    6334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6338:	1e5a      	subs	r2, r3, #1
    633a:	490b      	ldr	r1, [pc, #44]	; (6368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    633c:	9b01      	ldr	r3, [sp, #4]
    633e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    6342:	4a0a      	ldr	r2, [pc, #40]	; (636c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    6344:	9b01      	ldr	r3, [sp, #4]
    6346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    634a:	f003 0301 	and.w	r3, r3, #1
    634e:	2b00      	cmp	r3, #0
    6350:	d106      	bne.n	6360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    6352:	4a05      	ldr	r2, [pc, #20]	; (6368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    6354:	9b01      	ldr	r3, [sp, #4]
    6356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    635a:	2b00      	cmp	r3, #0
    635c:	d100      	bne.n	6360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    635e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6360:	bf00      	nop
    6362:	b003      	add	sp, #12
    6364:	f85d fb04 	ldr.w	pc, [sp], #4
    6368:	1fff8d4c 	.word	0x1fff8d4c
    636c:	1fff8d48 	.word	0x1fff8d48

00006370 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    6370:	b500      	push	{lr}
    6372:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6374:	f7fa fbba 	bl	aec <Sys_GetCoreID>
    6378:	4603      	mov	r3, r0
    637a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    637c:	4a10      	ldr	r2, [pc, #64]	; (63c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    637e:	9b01      	ldr	r3, [sp, #4]
    6380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6384:	2b00      	cmp	r3, #0
    6386:	d10d      	bne.n	63a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6388:	f7fa fae0 	bl	94c <Port_schm_read_msr>
    638c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    638e:	9b00      	ldr	r3, [sp, #0]
    6390:	f003 0301 	and.w	r3, r3, #1
    6394:	2b00      	cmp	r3, #0
    6396:	d100      	bne.n	639a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6398:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    639a:	490a      	ldr	r1, [pc, #40]	; (63c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    639c:	9b01      	ldr	r3, [sp, #4]
    639e:	9a00      	ldr	r2, [sp, #0]
    63a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    63a4:	4a06      	ldr	r2, [pc, #24]	; (63c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    63a6:	9b01      	ldr	r3, [sp, #4]
    63a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63ac:	1c5a      	adds	r2, r3, #1
    63ae:	4904      	ldr	r1, [pc, #16]	; (63c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    63b0:	9b01      	ldr	r3, [sp, #4]
    63b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    63b6:	bf00      	nop
    63b8:	b003      	add	sp, #12
    63ba:	f85d fb04 	ldr.w	pc, [sp], #4
    63be:	bf00      	nop
    63c0:	1fff8d54 	.word	0x1fff8d54
    63c4:	1fff8d50 	.word	0x1fff8d50

000063c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    63c8:	b500      	push	{lr}
    63ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    63cc:	f7fa fb8e 	bl	aec <Sys_GetCoreID>
    63d0:	4603      	mov	r3, r0
    63d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    63d4:	4a0d      	ldr	r2, [pc, #52]	; (640c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    63d6:	9b01      	ldr	r3, [sp, #4]
    63d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63dc:	1e5a      	subs	r2, r3, #1
    63de:	490b      	ldr	r1, [pc, #44]	; (640c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    63e0:	9b01      	ldr	r3, [sp, #4]
    63e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    63e6:	4a0a      	ldr	r2, [pc, #40]	; (6410 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    63e8:	9b01      	ldr	r3, [sp, #4]
    63ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63ee:	f003 0301 	and.w	r3, r3, #1
    63f2:	2b00      	cmp	r3, #0
    63f4:	d106      	bne.n	6404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    63f6:	4a05      	ldr	r2, [pc, #20]	; (640c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    63f8:	9b01      	ldr	r3, [sp, #4]
    63fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63fe:	2b00      	cmp	r3, #0
    6400:	d100      	bne.n	6404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6402:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6404:	bf00      	nop
    6406:	b003      	add	sp, #12
    6408:	f85d fb04 	ldr.w	pc, [sp], #4
    640c:	1fff8d54 	.word	0x1fff8d54
    6410:	1fff8d50 	.word	0x1fff8d50

00006414 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    6414:	b500      	push	{lr}
    6416:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6418:	f7fa fb68 	bl	aec <Sys_GetCoreID>
    641c:	4603      	mov	r3, r0
    641e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    6420:	4a10      	ldr	r2, [pc, #64]	; (6464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6422:	9b01      	ldr	r3, [sp, #4]
    6424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6428:	2b00      	cmp	r3, #0
    642a:	d10d      	bne.n	6448 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    642c:	f7fa fa8e 	bl	94c <Port_schm_read_msr>
    6430:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6432:	9b00      	ldr	r3, [sp, #0]
    6434:	f003 0301 	and.w	r3, r3, #1
    6438:	2b00      	cmp	r3, #0
    643a:	d100      	bne.n	643e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    643c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    643e:	490a      	ldr	r1, [pc, #40]	; (6468 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    6440:	9b01      	ldr	r3, [sp, #4]
    6442:	9a00      	ldr	r2, [sp, #0]
    6444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    6448:	4a06      	ldr	r2, [pc, #24]	; (6464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    644a:	9b01      	ldr	r3, [sp, #4]
    644c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6450:	1c5a      	adds	r2, r3, #1
    6452:	4904      	ldr	r1, [pc, #16]	; (6464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6454:	9b01      	ldr	r3, [sp, #4]
    6456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    645a:	bf00      	nop
    645c:	b003      	add	sp, #12
    645e:	f85d fb04 	ldr.w	pc, [sp], #4
    6462:	bf00      	nop
    6464:	1fff8d5c 	.word	0x1fff8d5c
    6468:	1fff8d58 	.word	0x1fff8d58

0000646c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    646c:	b500      	push	{lr}
    646e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6470:	f7fa fb3c 	bl	aec <Sys_GetCoreID>
    6474:	4603      	mov	r3, r0
    6476:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    6478:	4a0d      	ldr	r2, [pc, #52]	; (64b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    647a:	9b01      	ldr	r3, [sp, #4]
    647c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6480:	1e5a      	subs	r2, r3, #1
    6482:	490b      	ldr	r1, [pc, #44]	; (64b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6484:	9b01      	ldr	r3, [sp, #4]
    6486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    648a:	4a0a      	ldr	r2, [pc, #40]	; (64b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    648c:	9b01      	ldr	r3, [sp, #4]
    648e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6492:	f003 0301 	and.w	r3, r3, #1
    6496:	2b00      	cmp	r3, #0
    6498:	d106      	bne.n	64a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    649a:	4a05      	ldr	r2, [pc, #20]	; (64b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    649c:	9b01      	ldr	r3, [sp, #4]
    649e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64a2:	2b00      	cmp	r3, #0
    64a4:	d100      	bne.n	64a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    64a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    64a8:	bf00      	nop
    64aa:	b003      	add	sp, #12
    64ac:	f85d fb04 	ldr.w	pc, [sp], #4
    64b0:	1fff8d5c 	.word	0x1fff8d5c
    64b4:	1fff8d58 	.word	0x1fff8d58

000064b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    64b8:	b500      	push	{lr}
    64ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    64bc:	f7fa fb16 	bl	aec <Sys_GetCoreID>
    64c0:	4603      	mov	r3, r0
    64c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    64c4:	4a10      	ldr	r2, [pc, #64]	; (6508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    64c6:	9b01      	ldr	r3, [sp, #4]
    64c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64cc:	2b00      	cmp	r3, #0
    64ce:	d10d      	bne.n	64ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    64d0:	f7fa fa3c 	bl	94c <Port_schm_read_msr>
    64d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    64d6:	9b00      	ldr	r3, [sp, #0]
    64d8:	f003 0301 	and.w	r3, r3, #1
    64dc:	2b00      	cmp	r3, #0
    64de:	d100      	bne.n	64e2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    64e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    64e2:	490a      	ldr	r1, [pc, #40]	; (650c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    64e4:	9b01      	ldr	r3, [sp, #4]
    64e6:	9a00      	ldr	r2, [sp, #0]
    64e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    64ec:	4a06      	ldr	r2, [pc, #24]	; (6508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    64ee:	9b01      	ldr	r3, [sp, #4]
    64f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64f4:	1c5a      	adds	r2, r3, #1
    64f6:	4904      	ldr	r1, [pc, #16]	; (6508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    64f8:	9b01      	ldr	r3, [sp, #4]
    64fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    64fe:	bf00      	nop
    6500:	b003      	add	sp, #12
    6502:	f85d fb04 	ldr.w	pc, [sp], #4
    6506:	bf00      	nop
    6508:	1fff8d64 	.word	0x1fff8d64
    650c:	1fff8d60 	.word	0x1fff8d60

00006510 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    6510:	b500      	push	{lr}
    6512:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6514:	f7fa faea 	bl	aec <Sys_GetCoreID>
    6518:	4603      	mov	r3, r0
    651a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    651c:	4a0d      	ldr	r2, [pc, #52]	; (6554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    651e:	9b01      	ldr	r3, [sp, #4]
    6520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6524:	1e5a      	subs	r2, r3, #1
    6526:	490b      	ldr	r1, [pc, #44]	; (6554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    6528:	9b01      	ldr	r3, [sp, #4]
    652a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    652e:	4a0a      	ldr	r2, [pc, #40]	; (6558 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    6530:	9b01      	ldr	r3, [sp, #4]
    6532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6536:	f003 0301 	and.w	r3, r3, #1
    653a:	2b00      	cmp	r3, #0
    653c:	d106      	bne.n	654c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    653e:	4a05      	ldr	r2, [pc, #20]	; (6554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    6540:	9b01      	ldr	r3, [sp, #4]
    6542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6546:	2b00      	cmp	r3, #0
    6548:	d100      	bne.n	654c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    654a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    654c:	bf00      	nop
    654e:	b003      	add	sp, #12
    6550:	f85d fb04 	ldr.w	pc, [sp], #4
    6554:	1fff8d64 	.word	0x1fff8d64
    6558:	1fff8d60 	.word	0x1fff8d60

0000655c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    655c:	b500      	push	{lr}
    655e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6560:	f7fa fac4 	bl	aec <Sys_GetCoreID>
    6564:	4603      	mov	r3, r0
    6566:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    6568:	4a10      	ldr	r2, [pc, #64]	; (65ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    656a:	9b01      	ldr	r3, [sp, #4]
    656c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6570:	2b00      	cmp	r3, #0
    6572:	d10d      	bne.n	6590 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6574:	f7fa f9ea 	bl	94c <Port_schm_read_msr>
    6578:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    657a:	9b00      	ldr	r3, [sp, #0]
    657c:	f003 0301 	and.w	r3, r3, #1
    6580:	2b00      	cmp	r3, #0
    6582:	d100      	bne.n	6586 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6584:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    6586:	490a      	ldr	r1, [pc, #40]	; (65b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    6588:	9b01      	ldr	r3, [sp, #4]
    658a:	9a00      	ldr	r2, [sp, #0]
    658c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    6590:	4a06      	ldr	r2, [pc, #24]	; (65ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    6592:	9b01      	ldr	r3, [sp, #4]
    6594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6598:	1c5a      	adds	r2, r3, #1
    659a:	4904      	ldr	r1, [pc, #16]	; (65ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    659c:	9b01      	ldr	r3, [sp, #4]
    659e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    65a2:	bf00      	nop
    65a4:	b003      	add	sp, #12
    65a6:	f85d fb04 	ldr.w	pc, [sp], #4
    65aa:	bf00      	nop
    65ac:	1fff8d6c 	.word	0x1fff8d6c
    65b0:	1fff8d68 	.word	0x1fff8d68

000065b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    65b4:	b500      	push	{lr}
    65b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    65b8:	f7fa fa98 	bl	aec <Sys_GetCoreID>
    65bc:	4603      	mov	r3, r0
    65be:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    65c0:	4a0d      	ldr	r2, [pc, #52]	; (65f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    65c2:	9b01      	ldr	r3, [sp, #4]
    65c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65c8:	1e5a      	subs	r2, r3, #1
    65ca:	490b      	ldr	r1, [pc, #44]	; (65f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    65cc:	9b01      	ldr	r3, [sp, #4]
    65ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    65d2:	4a0a      	ldr	r2, [pc, #40]	; (65fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    65d4:	9b01      	ldr	r3, [sp, #4]
    65d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65da:	f003 0301 	and.w	r3, r3, #1
    65de:	2b00      	cmp	r3, #0
    65e0:	d106      	bne.n	65f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    65e2:	4a05      	ldr	r2, [pc, #20]	; (65f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    65e4:	9b01      	ldr	r3, [sp, #4]
    65e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65ea:	2b00      	cmp	r3, #0
    65ec:	d100      	bne.n	65f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    65ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    65f0:	bf00      	nop
    65f2:	b003      	add	sp, #12
    65f4:	f85d fb04 	ldr.w	pc, [sp], #4
    65f8:	1fff8d6c 	.word	0x1fff8d6c
    65fc:	1fff8d68 	.word	0x1fff8d68

00006600 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    6600:	b500      	push	{lr}
    6602:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6604:	f7fa fa72 	bl	aec <Sys_GetCoreID>
    6608:	4603      	mov	r3, r0
    660a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    660c:	4a10      	ldr	r2, [pc, #64]	; (6650 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    660e:	9b01      	ldr	r3, [sp, #4]
    6610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6614:	2b00      	cmp	r3, #0
    6616:	d10d      	bne.n	6634 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6618:	f7fa f998 	bl	94c <Port_schm_read_msr>
    661c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    661e:	9b00      	ldr	r3, [sp, #0]
    6620:	f003 0301 	and.w	r3, r3, #1
    6624:	2b00      	cmp	r3, #0
    6626:	d100      	bne.n	662a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6628:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    662a:	490a      	ldr	r1, [pc, #40]	; (6654 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    662c:	9b01      	ldr	r3, [sp, #4]
    662e:	9a00      	ldr	r2, [sp, #0]
    6630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    6634:	4a06      	ldr	r2, [pc, #24]	; (6650 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    6636:	9b01      	ldr	r3, [sp, #4]
    6638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    663c:	1c5a      	adds	r2, r3, #1
    663e:	4904      	ldr	r1, [pc, #16]	; (6650 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    6640:	9b01      	ldr	r3, [sp, #4]
    6642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6646:	bf00      	nop
    6648:	b003      	add	sp, #12
    664a:	f85d fb04 	ldr.w	pc, [sp], #4
    664e:	bf00      	nop
    6650:	1fff8d74 	.word	0x1fff8d74
    6654:	1fff8d70 	.word	0x1fff8d70

00006658 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    6658:	b500      	push	{lr}
    665a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    665c:	f7fa fa46 	bl	aec <Sys_GetCoreID>
    6660:	4603      	mov	r3, r0
    6662:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    6664:	4a0d      	ldr	r2, [pc, #52]	; (669c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6666:	9b01      	ldr	r3, [sp, #4]
    6668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    666c:	1e5a      	subs	r2, r3, #1
    666e:	490b      	ldr	r1, [pc, #44]	; (669c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6670:	9b01      	ldr	r3, [sp, #4]
    6672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    6676:	4a0a      	ldr	r2, [pc, #40]	; (66a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    6678:	9b01      	ldr	r3, [sp, #4]
    667a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    667e:	f003 0301 	and.w	r3, r3, #1
    6682:	2b00      	cmp	r3, #0
    6684:	d106      	bne.n	6694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    6686:	4a05      	ldr	r2, [pc, #20]	; (669c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6688:	9b01      	ldr	r3, [sp, #4]
    668a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    668e:	2b00      	cmp	r3, #0
    6690:	d100      	bne.n	6694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6692:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6694:	bf00      	nop
    6696:	b003      	add	sp, #12
    6698:	f85d fb04 	ldr.w	pc, [sp], #4
    669c:	1fff8d74 	.word	0x1fff8d74
    66a0:	1fff8d70 	.word	0x1fff8d70

000066a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    66a4:	b500      	push	{lr}
    66a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    66a8:	f7fa fa20 	bl	aec <Sys_GetCoreID>
    66ac:	4603      	mov	r3, r0
    66ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    66b0:	4a10      	ldr	r2, [pc, #64]	; (66f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    66b2:	9b01      	ldr	r3, [sp, #4]
    66b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66b8:	2b00      	cmp	r3, #0
    66ba:	d10d      	bne.n	66d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    66bc:	f7fa f946 	bl	94c <Port_schm_read_msr>
    66c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    66c2:	9b00      	ldr	r3, [sp, #0]
    66c4:	f003 0301 	and.w	r3, r3, #1
    66c8:	2b00      	cmp	r3, #0
    66ca:	d100      	bne.n	66ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    66cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    66ce:	490a      	ldr	r1, [pc, #40]	; (66f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    66d0:	9b01      	ldr	r3, [sp, #4]
    66d2:	9a00      	ldr	r2, [sp, #0]
    66d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    66d8:	4a06      	ldr	r2, [pc, #24]	; (66f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    66da:	9b01      	ldr	r3, [sp, #4]
    66dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66e0:	1c5a      	adds	r2, r3, #1
    66e2:	4904      	ldr	r1, [pc, #16]	; (66f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    66e4:	9b01      	ldr	r3, [sp, #4]
    66e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    66ea:	bf00      	nop
    66ec:	b003      	add	sp, #12
    66ee:	f85d fb04 	ldr.w	pc, [sp], #4
    66f2:	bf00      	nop
    66f4:	1fff8d7c 	.word	0x1fff8d7c
    66f8:	1fff8d78 	.word	0x1fff8d78

000066fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    66fc:	b500      	push	{lr}
    66fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6700:	f7fa f9f4 	bl	aec <Sys_GetCoreID>
    6704:	4603      	mov	r3, r0
    6706:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    6708:	4a0d      	ldr	r2, [pc, #52]	; (6740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    670a:	9b01      	ldr	r3, [sp, #4]
    670c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6710:	1e5a      	subs	r2, r3, #1
    6712:	490b      	ldr	r1, [pc, #44]	; (6740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    6714:	9b01      	ldr	r3, [sp, #4]
    6716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    671a:	4a0a      	ldr	r2, [pc, #40]	; (6744 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    671c:	9b01      	ldr	r3, [sp, #4]
    671e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6722:	f003 0301 	and.w	r3, r3, #1
    6726:	2b00      	cmp	r3, #0
    6728:	d106      	bne.n	6738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    672a:	4a05      	ldr	r2, [pc, #20]	; (6740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    672c:	9b01      	ldr	r3, [sp, #4]
    672e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6732:	2b00      	cmp	r3, #0
    6734:	d100      	bne.n	6738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6736:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6738:	bf00      	nop
    673a:	b003      	add	sp, #12
    673c:	f85d fb04 	ldr.w	pc, [sp], #4
    6740:	1fff8d7c 	.word	0x1fff8d7c
    6744:	1fff8d78 	.word	0x1fff8d78

00006748 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    6748:	b500      	push	{lr}
    674a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    674c:	f7fa f9ce 	bl	aec <Sys_GetCoreID>
    6750:	4603      	mov	r3, r0
    6752:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    6754:	4a10      	ldr	r2, [pc, #64]	; (6798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    6756:	9b01      	ldr	r3, [sp, #4]
    6758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    675c:	2b00      	cmp	r3, #0
    675e:	d10d      	bne.n	677c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6760:	f7fa f8f4 	bl	94c <Port_schm_read_msr>
    6764:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6766:	9b00      	ldr	r3, [sp, #0]
    6768:	f003 0301 	and.w	r3, r3, #1
    676c:	2b00      	cmp	r3, #0
    676e:	d100      	bne.n	6772 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6770:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    6772:	490a      	ldr	r1, [pc, #40]	; (679c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    6774:	9b01      	ldr	r3, [sp, #4]
    6776:	9a00      	ldr	r2, [sp, #0]
    6778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    677c:	4a06      	ldr	r2, [pc, #24]	; (6798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    677e:	9b01      	ldr	r3, [sp, #4]
    6780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6784:	1c5a      	adds	r2, r3, #1
    6786:	4904      	ldr	r1, [pc, #16]	; (6798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    6788:	9b01      	ldr	r3, [sp, #4]
    678a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    678e:	bf00      	nop
    6790:	b003      	add	sp, #12
    6792:	f85d fb04 	ldr.w	pc, [sp], #4
    6796:	bf00      	nop
    6798:	1fff8d84 	.word	0x1fff8d84
    679c:	1fff8d80 	.word	0x1fff8d80

000067a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    67a0:	b500      	push	{lr}
    67a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    67a4:	f7fa f9a2 	bl	aec <Sys_GetCoreID>
    67a8:	4603      	mov	r3, r0
    67aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    67ac:	4a0d      	ldr	r2, [pc, #52]	; (67e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    67ae:	9b01      	ldr	r3, [sp, #4]
    67b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67b4:	1e5a      	subs	r2, r3, #1
    67b6:	490b      	ldr	r1, [pc, #44]	; (67e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    67b8:	9b01      	ldr	r3, [sp, #4]
    67ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    67be:	4a0a      	ldr	r2, [pc, #40]	; (67e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    67c0:	9b01      	ldr	r3, [sp, #4]
    67c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67c6:	f003 0301 	and.w	r3, r3, #1
    67ca:	2b00      	cmp	r3, #0
    67cc:	d106      	bne.n	67dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    67ce:	4a05      	ldr	r2, [pc, #20]	; (67e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    67d0:	9b01      	ldr	r3, [sp, #4]
    67d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67d6:	2b00      	cmp	r3, #0
    67d8:	d100      	bne.n	67dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    67da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    67dc:	bf00      	nop
    67de:	b003      	add	sp, #12
    67e0:	f85d fb04 	ldr.w	pc, [sp], #4
    67e4:	1fff8d84 	.word	0x1fff8d84
    67e8:	1fff8d80 	.word	0x1fff8d80

000067ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    67ec:	b500      	push	{lr}
    67ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    67f0:	f7fa f97c 	bl	aec <Sys_GetCoreID>
    67f4:	4603      	mov	r3, r0
    67f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    67f8:	4a10      	ldr	r2, [pc, #64]	; (683c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    67fa:	9b01      	ldr	r3, [sp, #4]
    67fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6800:	2b00      	cmp	r3, #0
    6802:	d10d      	bne.n	6820 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6804:	f7fa f8a2 	bl	94c <Port_schm_read_msr>
    6808:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    680a:	9b00      	ldr	r3, [sp, #0]
    680c:	f003 0301 	and.w	r3, r3, #1
    6810:	2b00      	cmp	r3, #0
    6812:	d100      	bne.n	6816 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6814:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    6816:	490a      	ldr	r1, [pc, #40]	; (6840 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    6818:	9b01      	ldr	r3, [sp, #4]
    681a:	9a00      	ldr	r2, [sp, #0]
    681c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    6820:	4a06      	ldr	r2, [pc, #24]	; (683c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    6822:	9b01      	ldr	r3, [sp, #4]
    6824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6828:	1c5a      	adds	r2, r3, #1
    682a:	4904      	ldr	r1, [pc, #16]	; (683c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    682c:	9b01      	ldr	r3, [sp, #4]
    682e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6832:	bf00      	nop
    6834:	b003      	add	sp, #12
    6836:	f85d fb04 	ldr.w	pc, [sp], #4
    683a:	bf00      	nop
    683c:	1fff8d8c 	.word	0x1fff8d8c
    6840:	1fff8d88 	.word	0x1fff8d88

00006844 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    6844:	b500      	push	{lr}
    6846:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6848:	f7fa f950 	bl	aec <Sys_GetCoreID>
    684c:	4603      	mov	r3, r0
    684e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    6850:	4a0d      	ldr	r2, [pc, #52]	; (6888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    6852:	9b01      	ldr	r3, [sp, #4]
    6854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6858:	1e5a      	subs	r2, r3, #1
    685a:	490b      	ldr	r1, [pc, #44]	; (6888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    685c:	9b01      	ldr	r3, [sp, #4]
    685e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    6862:	4a0a      	ldr	r2, [pc, #40]	; (688c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    6864:	9b01      	ldr	r3, [sp, #4]
    6866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    686a:	f003 0301 	and.w	r3, r3, #1
    686e:	2b00      	cmp	r3, #0
    6870:	d106      	bne.n	6880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    6872:	4a05      	ldr	r2, [pc, #20]	; (6888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    6874:	9b01      	ldr	r3, [sp, #4]
    6876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    687a:	2b00      	cmp	r3, #0
    687c:	d100      	bne.n	6880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    687e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6880:	bf00      	nop
    6882:	b003      	add	sp, #12
    6884:	f85d fb04 	ldr.w	pc, [sp], #4
    6888:	1fff8d8c 	.word	0x1fff8d8c
    688c:	1fff8d88 	.word	0x1fff8d88

00006890 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    6890:	b500      	push	{lr}
    6892:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6894:	f7fa f92a 	bl	aec <Sys_GetCoreID>
    6898:	4603      	mov	r3, r0
    689a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    689c:	4a10      	ldr	r2, [pc, #64]	; (68e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    689e:	9b01      	ldr	r3, [sp, #4]
    68a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68a4:	2b00      	cmp	r3, #0
    68a6:	d10d      	bne.n	68c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    68a8:	f7fa f850 	bl	94c <Port_schm_read_msr>
    68ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    68ae:	9b00      	ldr	r3, [sp, #0]
    68b0:	f003 0301 	and.w	r3, r3, #1
    68b4:	2b00      	cmp	r3, #0
    68b6:	d100      	bne.n	68ba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    68b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    68ba:	490a      	ldr	r1, [pc, #40]	; (68e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    68bc:	9b01      	ldr	r3, [sp, #4]
    68be:	9a00      	ldr	r2, [sp, #0]
    68c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    68c4:	4a06      	ldr	r2, [pc, #24]	; (68e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    68c6:	9b01      	ldr	r3, [sp, #4]
    68c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68cc:	1c5a      	adds	r2, r3, #1
    68ce:	4904      	ldr	r1, [pc, #16]	; (68e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    68d0:	9b01      	ldr	r3, [sp, #4]
    68d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    68d6:	bf00      	nop
    68d8:	b003      	add	sp, #12
    68da:	f85d fb04 	ldr.w	pc, [sp], #4
    68de:	bf00      	nop
    68e0:	1fff8d94 	.word	0x1fff8d94
    68e4:	1fff8d90 	.word	0x1fff8d90

000068e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    68e8:	b500      	push	{lr}
    68ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    68ec:	f7fa f8fe 	bl	aec <Sys_GetCoreID>
    68f0:	4603      	mov	r3, r0
    68f2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    68f4:	4a0d      	ldr	r2, [pc, #52]	; (692c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    68f6:	9b01      	ldr	r3, [sp, #4]
    68f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68fc:	1e5a      	subs	r2, r3, #1
    68fe:	490b      	ldr	r1, [pc, #44]	; (692c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    6900:	9b01      	ldr	r3, [sp, #4]
    6902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    6906:	4a0a      	ldr	r2, [pc, #40]	; (6930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    6908:	9b01      	ldr	r3, [sp, #4]
    690a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    690e:	f003 0301 	and.w	r3, r3, #1
    6912:	2b00      	cmp	r3, #0
    6914:	d106      	bne.n	6924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    6916:	4a05      	ldr	r2, [pc, #20]	; (692c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    6918:	9b01      	ldr	r3, [sp, #4]
    691a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    691e:	2b00      	cmp	r3, #0
    6920:	d100      	bne.n	6924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6922:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6924:	bf00      	nop
    6926:	b003      	add	sp, #12
    6928:	f85d fb04 	ldr.w	pc, [sp], #4
    692c:	1fff8d94 	.word	0x1fff8d94
    6930:	1fff8d90 	.word	0x1fff8d90

00006934 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    6934:	b500      	push	{lr}
    6936:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6938:	f7fa f8d8 	bl	aec <Sys_GetCoreID>
    693c:	4603      	mov	r3, r0
    693e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    6940:	4a10      	ldr	r2, [pc, #64]	; (6984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    6942:	9b01      	ldr	r3, [sp, #4]
    6944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6948:	2b00      	cmp	r3, #0
    694a:	d10d      	bne.n	6968 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    694c:	f7f9 fffe 	bl	94c <Port_schm_read_msr>
    6950:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6952:	9b00      	ldr	r3, [sp, #0]
    6954:	f003 0301 	and.w	r3, r3, #1
    6958:	2b00      	cmp	r3, #0
    695a:	d100      	bne.n	695e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    695c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    695e:	490a      	ldr	r1, [pc, #40]	; (6988 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    6960:	9b01      	ldr	r3, [sp, #4]
    6962:	9a00      	ldr	r2, [sp, #0]
    6964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    6968:	4a06      	ldr	r2, [pc, #24]	; (6984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    696a:	9b01      	ldr	r3, [sp, #4]
    696c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6970:	1c5a      	adds	r2, r3, #1
    6972:	4904      	ldr	r1, [pc, #16]	; (6984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    6974:	9b01      	ldr	r3, [sp, #4]
    6976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    697a:	bf00      	nop
    697c:	b003      	add	sp, #12
    697e:	f85d fb04 	ldr.w	pc, [sp], #4
    6982:	bf00      	nop
    6984:	1fff8d9c 	.word	0x1fff8d9c
    6988:	1fff8d98 	.word	0x1fff8d98

0000698c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    698c:	b500      	push	{lr}
    698e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6990:	f7fa f8ac 	bl	aec <Sys_GetCoreID>
    6994:	4603      	mov	r3, r0
    6996:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    6998:	4a0d      	ldr	r2, [pc, #52]	; (69d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    699a:	9b01      	ldr	r3, [sp, #4]
    699c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69a0:	1e5a      	subs	r2, r3, #1
    69a2:	490b      	ldr	r1, [pc, #44]	; (69d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    69a4:	9b01      	ldr	r3, [sp, #4]
    69a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    69aa:	4a0a      	ldr	r2, [pc, #40]	; (69d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    69ac:	9b01      	ldr	r3, [sp, #4]
    69ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69b2:	f003 0301 	and.w	r3, r3, #1
    69b6:	2b00      	cmp	r3, #0
    69b8:	d106      	bne.n	69c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    69ba:	4a05      	ldr	r2, [pc, #20]	; (69d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    69bc:	9b01      	ldr	r3, [sp, #4]
    69be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69c2:	2b00      	cmp	r3, #0
    69c4:	d100      	bne.n	69c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    69c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    69c8:	bf00      	nop
    69ca:	b003      	add	sp, #12
    69cc:	f85d fb04 	ldr.w	pc, [sp], #4
    69d0:	1fff8d9c 	.word	0x1fff8d9c
    69d4:	1fff8d98 	.word	0x1fff8d98

000069d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    69d8:	b500      	push	{lr}
    69da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    69dc:	f7fa f886 	bl	aec <Sys_GetCoreID>
    69e0:	4603      	mov	r3, r0
    69e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    69e4:	4a10      	ldr	r2, [pc, #64]	; (6a28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    69e6:	9b01      	ldr	r3, [sp, #4]
    69e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69ec:	2b00      	cmp	r3, #0
    69ee:	d10d      	bne.n	6a0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    69f0:	f7f9 ffac 	bl	94c <Port_schm_read_msr>
    69f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    69f6:	9b00      	ldr	r3, [sp, #0]
    69f8:	f003 0301 	and.w	r3, r3, #1
    69fc:	2b00      	cmp	r3, #0
    69fe:	d100      	bne.n	6a02 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6a00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    6a02:	490a      	ldr	r1, [pc, #40]	; (6a2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    6a04:	9b01      	ldr	r3, [sp, #4]
    6a06:	9a00      	ldr	r2, [sp, #0]
    6a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    6a0c:	4a06      	ldr	r2, [pc, #24]	; (6a28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    6a0e:	9b01      	ldr	r3, [sp, #4]
    6a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a14:	1c5a      	adds	r2, r3, #1
    6a16:	4904      	ldr	r1, [pc, #16]	; (6a28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    6a18:	9b01      	ldr	r3, [sp, #4]
    6a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6a1e:	bf00      	nop
    6a20:	b003      	add	sp, #12
    6a22:	f85d fb04 	ldr.w	pc, [sp], #4
    6a26:	bf00      	nop
    6a28:	1fff8da4 	.word	0x1fff8da4
    6a2c:	1fff8da0 	.word	0x1fff8da0

00006a30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    6a30:	b500      	push	{lr}
    6a32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a34:	f7fa f85a 	bl	aec <Sys_GetCoreID>
    6a38:	4603      	mov	r3, r0
    6a3a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    6a3c:	4a0d      	ldr	r2, [pc, #52]	; (6a74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    6a3e:	9b01      	ldr	r3, [sp, #4]
    6a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a44:	1e5a      	subs	r2, r3, #1
    6a46:	490b      	ldr	r1, [pc, #44]	; (6a74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    6a48:	9b01      	ldr	r3, [sp, #4]
    6a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    6a4e:	4a0a      	ldr	r2, [pc, #40]	; (6a78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    6a50:	9b01      	ldr	r3, [sp, #4]
    6a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a56:	f003 0301 	and.w	r3, r3, #1
    6a5a:	2b00      	cmp	r3, #0
    6a5c:	d106      	bne.n	6a6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    6a5e:	4a05      	ldr	r2, [pc, #20]	; (6a74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    6a60:	9b01      	ldr	r3, [sp, #4]
    6a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a66:	2b00      	cmp	r3, #0
    6a68:	d100      	bne.n	6a6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6a6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6a6c:	bf00      	nop
    6a6e:	b003      	add	sp, #12
    6a70:	f85d fb04 	ldr.w	pc, [sp], #4
    6a74:	1fff8da4 	.word	0x1fff8da4
    6a78:	1fff8da0 	.word	0x1fff8da0

00006a7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    6a7c:	b500      	push	{lr}
    6a7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a80:	f7fa f834 	bl	aec <Sys_GetCoreID>
    6a84:	4603      	mov	r3, r0
    6a86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    6a88:	4a10      	ldr	r2, [pc, #64]	; (6acc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    6a8a:	9b01      	ldr	r3, [sp, #4]
    6a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a90:	2b00      	cmp	r3, #0
    6a92:	d10d      	bne.n	6ab0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6a94:	f7f9 ff5a 	bl	94c <Port_schm_read_msr>
    6a98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6a9a:	9b00      	ldr	r3, [sp, #0]
    6a9c:	f003 0301 	and.w	r3, r3, #1
    6aa0:	2b00      	cmp	r3, #0
    6aa2:	d100      	bne.n	6aa6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6aa4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    6aa6:	490a      	ldr	r1, [pc, #40]	; (6ad0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    6aa8:	9b01      	ldr	r3, [sp, #4]
    6aaa:	9a00      	ldr	r2, [sp, #0]
    6aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    6ab0:	4a06      	ldr	r2, [pc, #24]	; (6acc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    6ab2:	9b01      	ldr	r3, [sp, #4]
    6ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ab8:	1c5a      	adds	r2, r3, #1
    6aba:	4904      	ldr	r1, [pc, #16]	; (6acc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    6abc:	9b01      	ldr	r3, [sp, #4]
    6abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6ac2:	bf00      	nop
    6ac4:	b003      	add	sp, #12
    6ac6:	f85d fb04 	ldr.w	pc, [sp], #4
    6aca:	bf00      	nop
    6acc:	1fff8dac 	.word	0x1fff8dac
    6ad0:	1fff8da8 	.word	0x1fff8da8

00006ad4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    6ad4:	b500      	push	{lr}
    6ad6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ad8:	f7fa f808 	bl	aec <Sys_GetCoreID>
    6adc:	4603      	mov	r3, r0
    6ade:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    6ae0:	4a0d      	ldr	r2, [pc, #52]	; (6b18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    6ae2:	9b01      	ldr	r3, [sp, #4]
    6ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ae8:	1e5a      	subs	r2, r3, #1
    6aea:	490b      	ldr	r1, [pc, #44]	; (6b18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    6aec:	9b01      	ldr	r3, [sp, #4]
    6aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    6af2:	4a0a      	ldr	r2, [pc, #40]	; (6b1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    6af4:	9b01      	ldr	r3, [sp, #4]
    6af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6afa:	f003 0301 	and.w	r3, r3, #1
    6afe:	2b00      	cmp	r3, #0
    6b00:	d106      	bne.n	6b10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    6b02:	4a05      	ldr	r2, [pc, #20]	; (6b18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    6b04:	9b01      	ldr	r3, [sp, #4]
    6b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b0a:	2b00      	cmp	r3, #0
    6b0c:	d100      	bne.n	6b10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6b0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6b10:	bf00      	nop
    6b12:	b003      	add	sp, #12
    6b14:	f85d fb04 	ldr.w	pc, [sp], #4
    6b18:	1fff8dac 	.word	0x1fff8dac
    6b1c:	1fff8da8 	.word	0x1fff8da8

00006b20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    6b20:	b500      	push	{lr}
    6b22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b24:	f7f9 ffe2 	bl	aec <Sys_GetCoreID>
    6b28:	4603      	mov	r3, r0
    6b2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    6b2c:	4a10      	ldr	r2, [pc, #64]	; (6b70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    6b2e:	9b01      	ldr	r3, [sp, #4]
    6b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b34:	2b00      	cmp	r3, #0
    6b36:	d10d      	bne.n	6b54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6b38:	f7f9 ff08 	bl	94c <Port_schm_read_msr>
    6b3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6b3e:	9b00      	ldr	r3, [sp, #0]
    6b40:	f003 0301 	and.w	r3, r3, #1
    6b44:	2b00      	cmp	r3, #0
    6b46:	d100      	bne.n	6b4a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6b48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    6b4a:	490a      	ldr	r1, [pc, #40]	; (6b74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    6b4c:	9b01      	ldr	r3, [sp, #4]
    6b4e:	9a00      	ldr	r2, [sp, #0]
    6b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    6b54:	4a06      	ldr	r2, [pc, #24]	; (6b70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    6b56:	9b01      	ldr	r3, [sp, #4]
    6b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b5c:	1c5a      	adds	r2, r3, #1
    6b5e:	4904      	ldr	r1, [pc, #16]	; (6b70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    6b60:	9b01      	ldr	r3, [sp, #4]
    6b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6b66:	bf00      	nop
    6b68:	b003      	add	sp, #12
    6b6a:	f85d fb04 	ldr.w	pc, [sp], #4
    6b6e:	bf00      	nop
    6b70:	1fff8db4 	.word	0x1fff8db4
    6b74:	1fff8db0 	.word	0x1fff8db0

00006b78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    6b78:	b500      	push	{lr}
    6b7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b7c:	f7f9 ffb6 	bl	aec <Sys_GetCoreID>
    6b80:	4603      	mov	r3, r0
    6b82:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    6b84:	4a0d      	ldr	r2, [pc, #52]	; (6bbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    6b86:	9b01      	ldr	r3, [sp, #4]
    6b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b8c:	1e5a      	subs	r2, r3, #1
    6b8e:	490b      	ldr	r1, [pc, #44]	; (6bbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    6b90:	9b01      	ldr	r3, [sp, #4]
    6b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    6b96:	4a0a      	ldr	r2, [pc, #40]	; (6bc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    6b98:	9b01      	ldr	r3, [sp, #4]
    6b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b9e:	f003 0301 	and.w	r3, r3, #1
    6ba2:	2b00      	cmp	r3, #0
    6ba4:	d106      	bne.n	6bb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    6ba6:	4a05      	ldr	r2, [pc, #20]	; (6bbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    6ba8:	9b01      	ldr	r3, [sp, #4]
    6baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bae:	2b00      	cmp	r3, #0
    6bb0:	d100      	bne.n	6bb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6bb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6bb4:	bf00      	nop
    6bb6:	b003      	add	sp, #12
    6bb8:	f85d fb04 	ldr.w	pc, [sp], #4
    6bbc:	1fff8db4 	.word	0x1fff8db4
    6bc0:	1fff8db0 	.word	0x1fff8db0

00006bc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    6bc4:	b500      	push	{lr}
    6bc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6bc8:	f7f9 ff90 	bl	aec <Sys_GetCoreID>
    6bcc:	4603      	mov	r3, r0
    6bce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    6bd0:	4a10      	ldr	r2, [pc, #64]	; (6c14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    6bd2:	9b01      	ldr	r3, [sp, #4]
    6bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bd8:	2b00      	cmp	r3, #0
    6bda:	d10d      	bne.n	6bf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6bdc:	f7f9 feb6 	bl	94c <Port_schm_read_msr>
    6be0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6be2:	9b00      	ldr	r3, [sp, #0]
    6be4:	f003 0301 	and.w	r3, r3, #1
    6be8:	2b00      	cmp	r3, #0
    6bea:	d100      	bne.n	6bee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6bec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    6bee:	490a      	ldr	r1, [pc, #40]	; (6c18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    6bf0:	9b01      	ldr	r3, [sp, #4]
    6bf2:	9a00      	ldr	r2, [sp, #0]
    6bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    6bf8:	4a06      	ldr	r2, [pc, #24]	; (6c14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    6bfa:	9b01      	ldr	r3, [sp, #4]
    6bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c00:	1c5a      	adds	r2, r3, #1
    6c02:	4904      	ldr	r1, [pc, #16]	; (6c14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    6c04:	9b01      	ldr	r3, [sp, #4]
    6c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6c0a:	bf00      	nop
    6c0c:	b003      	add	sp, #12
    6c0e:	f85d fb04 	ldr.w	pc, [sp], #4
    6c12:	bf00      	nop
    6c14:	1fff8dbc 	.word	0x1fff8dbc
    6c18:	1fff8db8 	.word	0x1fff8db8

00006c1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    6c1c:	b500      	push	{lr}
    6c1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c20:	f7f9 ff64 	bl	aec <Sys_GetCoreID>
    6c24:	4603      	mov	r3, r0
    6c26:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    6c28:	4a0d      	ldr	r2, [pc, #52]	; (6c60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    6c2a:	9b01      	ldr	r3, [sp, #4]
    6c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c30:	1e5a      	subs	r2, r3, #1
    6c32:	490b      	ldr	r1, [pc, #44]	; (6c60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    6c34:	9b01      	ldr	r3, [sp, #4]
    6c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    6c3a:	4a0a      	ldr	r2, [pc, #40]	; (6c64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    6c3c:	9b01      	ldr	r3, [sp, #4]
    6c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c42:	f003 0301 	and.w	r3, r3, #1
    6c46:	2b00      	cmp	r3, #0
    6c48:	d106      	bne.n	6c58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    6c4a:	4a05      	ldr	r2, [pc, #20]	; (6c60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    6c4c:	9b01      	ldr	r3, [sp, #4]
    6c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c52:	2b00      	cmp	r3, #0
    6c54:	d100      	bne.n	6c58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6c56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6c58:	bf00      	nop
    6c5a:	b003      	add	sp, #12
    6c5c:	f85d fb04 	ldr.w	pc, [sp], #4
    6c60:	1fff8dbc 	.word	0x1fff8dbc
    6c64:	1fff8db8 	.word	0x1fff8db8

00006c68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    6c68:	b500      	push	{lr}
    6c6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c6c:	f7f9 ff3e 	bl	aec <Sys_GetCoreID>
    6c70:	4603      	mov	r3, r0
    6c72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    6c74:	4a10      	ldr	r2, [pc, #64]	; (6cb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    6c76:	9b01      	ldr	r3, [sp, #4]
    6c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c7c:	2b00      	cmp	r3, #0
    6c7e:	d10d      	bne.n	6c9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6c80:	f7f9 fe64 	bl	94c <Port_schm_read_msr>
    6c84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6c86:	9b00      	ldr	r3, [sp, #0]
    6c88:	f003 0301 	and.w	r3, r3, #1
    6c8c:	2b00      	cmp	r3, #0
    6c8e:	d100      	bne.n	6c92 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6c90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    6c92:	490a      	ldr	r1, [pc, #40]	; (6cbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    6c94:	9b01      	ldr	r3, [sp, #4]
    6c96:	9a00      	ldr	r2, [sp, #0]
    6c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    6c9c:	4a06      	ldr	r2, [pc, #24]	; (6cb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    6c9e:	9b01      	ldr	r3, [sp, #4]
    6ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ca4:	1c5a      	adds	r2, r3, #1
    6ca6:	4904      	ldr	r1, [pc, #16]	; (6cb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    6ca8:	9b01      	ldr	r3, [sp, #4]
    6caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6cae:	bf00      	nop
    6cb0:	b003      	add	sp, #12
    6cb2:	f85d fb04 	ldr.w	pc, [sp], #4
    6cb6:	bf00      	nop
    6cb8:	1fff8dc4 	.word	0x1fff8dc4
    6cbc:	1fff8dc0 	.word	0x1fff8dc0

00006cc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    6cc0:	b500      	push	{lr}
    6cc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6cc4:	f7f9 ff12 	bl	aec <Sys_GetCoreID>
    6cc8:	4603      	mov	r3, r0
    6cca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    6ccc:	4a0d      	ldr	r2, [pc, #52]	; (6d04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    6cce:	9b01      	ldr	r3, [sp, #4]
    6cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cd4:	1e5a      	subs	r2, r3, #1
    6cd6:	490b      	ldr	r1, [pc, #44]	; (6d04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    6cd8:	9b01      	ldr	r3, [sp, #4]
    6cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    6cde:	4a0a      	ldr	r2, [pc, #40]	; (6d08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    6ce0:	9b01      	ldr	r3, [sp, #4]
    6ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ce6:	f003 0301 	and.w	r3, r3, #1
    6cea:	2b00      	cmp	r3, #0
    6cec:	d106      	bne.n	6cfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    6cee:	4a05      	ldr	r2, [pc, #20]	; (6d04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    6cf0:	9b01      	ldr	r3, [sp, #4]
    6cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cf6:	2b00      	cmp	r3, #0
    6cf8:	d100      	bne.n	6cfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6cfa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6cfc:	bf00      	nop
    6cfe:	b003      	add	sp, #12
    6d00:	f85d fb04 	ldr.w	pc, [sp], #4
    6d04:	1fff8dc4 	.word	0x1fff8dc4
    6d08:	1fff8dc0 	.word	0x1fff8dc0

00006d0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    6d0c:	b500      	push	{lr}
    6d0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d10:	f7f9 feec 	bl	aec <Sys_GetCoreID>
    6d14:	4603      	mov	r3, r0
    6d16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    6d18:	4a10      	ldr	r2, [pc, #64]	; (6d5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    6d1a:	9b01      	ldr	r3, [sp, #4]
    6d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d20:	2b00      	cmp	r3, #0
    6d22:	d10d      	bne.n	6d40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6d24:	f7f9 fe12 	bl	94c <Port_schm_read_msr>
    6d28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6d2a:	9b00      	ldr	r3, [sp, #0]
    6d2c:	f003 0301 	and.w	r3, r3, #1
    6d30:	2b00      	cmp	r3, #0
    6d32:	d100      	bne.n	6d36 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6d34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    6d36:	490a      	ldr	r1, [pc, #40]	; (6d60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    6d38:	9b01      	ldr	r3, [sp, #4]
    6d3a:	9a00      	ldr	r2, [sp, #0]
    6d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    6d40:	4a06      	ldr	r2, [pc, #24]	; (6d5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    6d42:	9b01      	ldr	r3, [sp, #4]
    6d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d48:	1c5a      	adds	r2, r3, #1
    6d4a:	4904      	ldr	r1, [pc, #16]	; (6d5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    6d4c:	9b01      	ldr	r3, [sp, #4]
    6d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6d52:	bf00      	nop
    6d54:	b003      	add	sp, #12
    6d56:	f85d fb04 	ldr.w	pc, [sp], #4
    6d5a:	bf00      	nop
    6d5c:	1fff8dcc 	.word	0x1fff8dcc
    6d60:	1fff8dc8 	.word	0x1fff8dc8

00006d64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    6d64:	b500      	push	{lr}
    6d66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d68:	f7f9 fec0 	bl	aec <Sys_GetCoreID>
    6d6c:	4603      	mov	r3, r0
    6d6e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    6d70:	4a0d      	ldr	r2, [pc, #52]	; (6da8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    6d72:	9b01      	ldr	r3, [sp, #4]
    6d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d78:	1e5a      	subs	r2, r3, #1
    6d7a:	490b      	ldr	r1, [pc, #44]	; (6da8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    6d7c:	9b01      	ldr	r3, [sp, #4]
    6d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    6d82:	4a0a      	ldr	r2, [pc, #40]	; (6dac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    6d84:	9b01      	ldr	r3, [sp, #4]
    6d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d8a:	f003 0301 	and.w	r3, r3, #1
    6d8e:	2b00      	cmp	r3, #0
    6d90:	d106      	bne.n	6da0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    6d92:	4a05      	ldr	r2, [pc, #20]	; (6da8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    6d94:	9b01      	ldr	r3, [sp, #4]
    6d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d9a:	2b00      	cmp	r3, #0
    6d9c:	d100      	bne.n	6da0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6d9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6da0:	bf00      	nop
    6da2:	b003      	add	sp, #12
    6da4:	f85d fb04 	ldr.w	pc, [sp], #4
    6da8:	1fff8dcc 	.word	0x1fff8dcc
    6dac:	1fff8dc8 	.word	0x1fff8dc8

00006db0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    6db0:	b500      	push	{lr}
    6db2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6db4:	f7f9 fe9a 	bl	aec <Sys_GetCoreID>
    6db8:	4603      	mov	r3, r0
    6dba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    6dbc:	4a10      	ldr	r2, [pc, #64]	; (6e00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    6dbe:	9b01      	ldr	r3, [sp, #4]
    6dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dc4:	2b00      	cmp	r3, #0
    6dc6:	d10d      	bne.n	6de4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6dc8:	f7f9 fdc0 	bl	94c <Port_schm_read_msr>
    6dcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6dce:	9b00      	ldr	r3, [sp, #0]
    6dd0:	f003 0301 	and.w	r3, r3, #1
    6dd4:	2b00      	cmp	r3, #0
    6dd6:	d100      	bne.n	6dda <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6dd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    6dda:	490a      	ldr	r1, [pc, #40]	; (6e04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    6ddc:	9b01      	ldr	r3, [sp, #4]
    6dde:	9a00      	ldr	r2, [sp, #0]
    6de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    6de4:	4a06      	ldr	r2, [pc, #24]	; (6e00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    6de6:	9b01      	ldr	r3, [sp, #4]
    6de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dec:	1c5a      	adds	r2, r3, #1
    6dee:	4904      	ldr	r1, [pc, #16]	; (6e00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    6df0:	9b01      	ldr	r3, [sp, #4]
    6df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6df6:	bf00      	nop
    6df8:	b003      	add	sp, #12
    6dfa:	f85d fb04 	ldr.w	pc, [sp], #4
    6dfe:	bf00      	nop
    6e00:	1fff8dd4 	.word	0x1fff8dd4
    6e04:	1fff8dd0 	.word	0x1fff8dd0

00006e08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    6e08:	b500      	push	{lr}
    6e0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e0c:	f7f9 fe6e 	bl	aec <Sys_GetCoreID>
    6e10:	4603      	mov	r3, r0
    6e12:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    6e14:	4a0d      	ldr	r2, [pc, #52]	; (6e4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    6e16:	9b01      	ldr	r3, [sp, #4]
    6e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e1c:	1e5a      	subs	r2, r3, #1
    6e1e:	490b      	ldr	r1, [pc, #44]	; (6e4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    6e20:	9b01      	ldr	r3, [sp, #4]
    6e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    6e26:	4a0a      	ldr	r2, [pc, #40]	; (6e50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    6e28:	9b01      	ldr	r3, [sp, #4]
    6e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e2e:	f003 0301 	and.w	r3, r3, #1
    6e32:	2b00      	cmp	r3, #0
    6e34:	d106      	bne.n	6e44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    6e36:	4a05      	ldr	r2, [pc, #20]	; (6e4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    6e38:	9b01      	ldr	r3, [sp, #4]
    6e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e3e:	2b00      	cmp	r3, #0
    6e40:	d100      	bne.n	6e44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6e42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6e44:	bf00      	nop
    6e46:	b003      	add	sp, #12
    6e48:	f85d fb04 	ldr.w	pc, [sp], #4
    6e4c:	1fff8dd4 	.word	0x1fff8dd4
    6e50:	1fff8dd0 	.word	0x1fff8dd0

00006e54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    6e54:	b500      	push	{lr}
    6e56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e58:	f7f9 fe48 	bl	aec <Sys_GetCoreID>
    6e5c:	4603      	mov	r3, r0
    6e5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    6e60:	4a10      	ldr	r2, [pc, #64]	; (6ea4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    6e62:	9b01      	ldr	r3, [sp, #4]
    6e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e68:	2b00      	cmp	r3, #0
    6e6a:	d10d      	bne.n	6e88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6e6c:	f7f9 fd6e 	bl	94c <Port_schm_read_msr>
    6e70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6e72:	9b00      	ldr	r3, [sp, #0]
    6e74:	f003 0301 	and.w	r3, r3, #1
    6e78:	2b00      	cmp	r3, #0
    6e7a:	d100      	bne.n	6e7e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6e7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    6e7e:	490a      	ldr	r1, [pc, #40]	; (6ea8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    6e80:	9b01      	ldr	r3, [sp, #4]
    6e82:	9a00      	ldr	r2, [sp, #0]
    6e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    6e88:	4a06      	ldr	r2, [pc, #24]	; (6ea4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    6e8a:	9b01      	ldr	r3, [sp, #4]
    6e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e90:	1c5a      	adds	r2, r3, #1
    6e92:	4904      	ldr	r1, [pc, #16]	; (6ea4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    6e94:	9b01      	ldr	r3, [sp, #4]
    6e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6e9a:	bf00      	nop
    6e9c:	b003      	add	sp, #12
    6e9e:	f85d fb04 	ldr.w	pc, [sp], #4
    6ea2:	bf00      	nop
    6ea4:	1fff8ddc 	.word	0x1fff8ddc
    6ea8:	1fff8dd8 	.word	0x1fff8dd8

00006eac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    6eac:	b500      	push	{lr}
    6eae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6eb0:	f7f9 fe1c 	bl	aec <Sys_GetCoreID>
    6eb4:	4603      	mov	r3, r0
    6eb6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    6eb8:	4a0d      	ldr	r2, [pc, #52]	; (6ef0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    6eba:	9b01      	ldr	r3, [sp, #4]
    6ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ec0:	1e5a      	subs	r2, r3, #1
    6ec2:	490b      	ldr	r1, [pc, #44]	; (6ef0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    6ec4:	9b01      	ldr	r3, [sp, #4]
    6ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    6eca:	4a0a      	ldr	r2, [pc, #40]	; (6ef4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    6ecc:	9b01      	ldr	r3, [sp, #4]
    6ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ed2:	f003 0301 	and.w	r3, r3, #1
    6ed6:	2b00      	cmp	r3, #0
    6ed8:	d106      	bne.n	6ee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    6eda:	4a05      	ldr	r2, [pc, #20]	; (6ef0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    6edc:	9b01      	ldr	r3, [sp, #4]
    6ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ee2:	2b00      	cmp	r3, #0
    6ee4:	d100      	bne.n	6ee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6ee6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6ee8:	bf00      	nop
    6eea:	b003      	add	sp, #12
    6eec:	f85d fb04 	ldr.w	pc, [sp], #4
    6ef0:	1fff8ddc 	.word	0x1fff8ddc
    6ef4:	1fff8dd8 	.word	0x1fff8dd8

00006ef8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    6ef8:	b500      	push	{lr}
    6efa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6efc:	f7f9 fdf6 	bl	aec <Sys_GetCoreID>
    6f00:	4603      	mov	r3, r0
    6f02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    6f04:	4a10      	ldr	r2, [pc, #64]	; (6f48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    6f06:	9b01      	ldr	r3, [sp, #4]
    6f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f0c:	2b00      	cmp	r3, #0
    6f0e:	d10d      	bne.n	6f2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6f10:	f7f9 fd1c 	bl	94c <Port_schm_read_msr>
    6f14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6f16:	9b00      	ldr	r3, [sp, #0]
    6f18:	f003 0301 	and.w	r3, r3, #1
    6f1c:	2b00      	cmp	r3, #0
    6f1e:	d100      	bne.n	6f22 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6f20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    6f22:	490a      	ldr	r1, [pc, #40]	; (6f4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    6f24:	9b01      	ldr	r3, [sp, #4]
    6f26:	9a00      	ldr	r2, [sp, #0]
    6f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    6f2c:	4a06      	ldr	r2, [pc, #24]	; (6f48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    6f2e:	9b01      	ldr	r3, [sp, #4]
    6f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f34:	1c5a      	adds	r2, r3, #1
    6f36:	4904      	ldr	r1, [pc, #16]	; (6f48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    6f38:	9b01      	ldr	r3, [sp, #4]
    6f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6f3e:	bf00      	nop
    6f40:	b003      	add	sp, #12
    6f42:	f85d fb04 	ldr.w	pc, [sp], #4
    6f46:	bf00      	nop
    6f48:	1fff8de4 	.word	0x1fff8de4
    6f4c:	1fff8de0 	.word	0x1fff8de0

00006f50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    6f50:	b500      	push	{lr}
    6f52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f54:	f7f9 fdca 	bl	aec <Sys_GetCoreID>
    6f58:	4603      	mov	r3, r0
    6f5a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    6f5c:	4a0d      	ldr	r2, [pc, #52]	; (6f94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    6f5e:	9b01      	ldr	r3, [sp, #4]
    6f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f64:	1e5a      	subs	r2, r3, #1
    6f66:	490b      	ldr	r1, [pc, #44]	; (6f94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    6f68:	9b01      	ldr	r3, [sp, #4]
    6f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    6f6e:	4a0a      	ldr	r2, [pc, #40]	; (6f98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    6f70:	9b01      	ldr	r3, [sp, #4]
    6f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f76:	f003 0301 	and.w	r3, r3, #1
    6f7a:	2b00      	cmp	r3, #0
    6f7c:	d106      	bne.n	6f8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    6f7e:	4a05      	ldr	r2, [pc, #20]	; (6f94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    6f80:	9b01      	ldr	r3, [sp, #4]
    6f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f86:	2b00      	cmp	r3, #0
    6f88:	d100      	bne.n	6f8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6f8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6f8c:	bf00      	nop
    6f8e:	b003      	add	sp, #12
    6f90:	f85d fb04 	ldr.w	pc, [sp], #4
    6f94:	1fff8de4 	.word	0x1fff8de4
    6f98:	1fff8de0 	.word	0x1fff8de0

00006f9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    6f9c:	b500      	push	{lr}
    6f9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6fa0:	f7f9 fda4 	bl	aec <Sys_GetCoreID>
    6fa4:	4603      	mov	r3, r0
    6fa6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    6fa8:	4a10      	ldr	r2, [pc, #64]	; (6fec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    6faa:	9b01      	ldr	r3, [sp, #4]
    6fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fb0:	2b00      	cmp	r3, #0
    6fb2:	d10d      	bne.n	6fd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6fb4:	f7f9 fcca 	bl	94c <Port_schm_read_msr>
    6fb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6fba:	9b00      	ldr	r3, [sp, #0]
    6fbc:	f003 0301 	and.w	r3, r3, #1
    6fc0:	2b00      	cmp	r3, #0
    6fc2:	d100      	bne.n	6fc6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6fc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    6fc6:	490a      	ldr	r1, [pc, #40]	; (6ff0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    6fc8:	9b01      	ldr	r3, [sp, #4]
    6fca:	9a00      	ldr	r2, [sp, #0]
    6fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    6fd0:	4a06      	ldr	r2, [pc, #24]	; (6fec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    6fd2:	9b01      	ldr	r3, [sp, #4]
    6fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fd8:	1c5a      	adds	r2, r3, #1
    6fda:	4904      	ldr	r1, [pc, #16]	; (6fec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    6fdc:	9b01      	ldr	r3, [sp, #4]
    6fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6fe2:	bf00      	nop
    6fe4:	b003      	add	sp, #12
    6fe6:	f85d fb04 	ldr.w	pc, [sp], #4
    6fea:	bf00      	nop
    6fec:	1fff8dec 	.word	0x1fff8dec
    6ff0:	1fff8de8 	.word	0x1fff8de8

00006ff4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    6ff4:	b500      	push	{lr}
    6ff6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ff8:	f7f9 fd78 	bl	aec <Sys_GetCoreID>
    6ffc:	4603      	mov	r3, r0
    6ffe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    7000:	4a0d      	ldr	r2, [pc, #52]	; (7038 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    7002:	9b01      	ldr	r3, [sp, #4]
    7004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7008:	1e5a      	subs	r2, r3, #1
    700a:	490b      	ldr	r1, [pc, #44]	; (7038 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    700c:	9b01      	ldr	r3, [sp, #4]
    700e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    7012:	4a0a      	ldr	r2, [pc, #40]	; (703c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    7014:	9b01      	ldr	r3, [sp, #4]
    7016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    701a:	f003 0301 	and.w	r3, r3, #1
    701e:	2b00      	cmp	r3, #0
    7020:	d106      	bne.n	7030 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    7022:	4a05      	ldr	r2, [pc, #20]	; (7038 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    7024:	9b01      	ldr	r3, [sp, #4]
    7026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    702a:	2b00      	cmp	r3, #0
    702c:	d100      	bne.n	7030 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    702e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7030:	bf00      	nop
    7032:	b003      	add	sp, #12
    7034:	f85d fb04 	ldr.w	pc, [sp], #4
    7038:	1fff8dec 	.word	0x1fff8dec
    703c:	1fff8de8 	.word	0x1fff8de8

00007040 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    7040:	b500      	push	{lr}
    7042:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7044:	f7f9 fd52 	bl	aec <Sys_GetCoreID>
    7048:	4603      	mov	r3, r0
    704a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    704c:	4a10      	ldr	r2, [pc, #64]	; (7090 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    704e:	9b01      	ldr	r3, [sp, #4]
    7050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7054:	2b00      	cmp	r3, #0
    7056:	d10d      	bne.n	7074 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7058:	f7f9 fc78 	bl	94c <Port_schm_read_msr>
    705c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    705e:	9b00      	ldr	r3, [sp, #0]
    7060:	f003 0301 	and.w	r3, r3, #1
    7064:	2b00      	cmp	r3, #0
    7066:	d100      	bne.n	706a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7068:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    706a:	490a      	ldr	r1, [pc, #40]	; (7094 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    706c:	9b01      	ldr	r3, [sp, #4]
    706e:	9a00      	ldr	r2, [sp, #0]
    7070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    7074:	4a06      	ldr	r2, [pc, #24]	; (7090 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    7076:	9b01      	ldr	r3, [sp, #4]
    7078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    707c:	1c5a      	adds	r2, r3, #1
    707e:	4904      	ldr	r1, [pc, #16]	; (7090 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    7080:	9b01      	ldr	r3, [sp, #4]
    7082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7086:	bf00      	nop
    7088:	b003      	add	sp, #12
    708a:	f85d fb04 	ldr.w	pc, [sp], #4
    708e:	bf00      	nop
    7090:	1fff8df4 	.word	0x1fff8df4
    7094:	1fff8df0 	.word	0x1fff8df0

00007098 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    7098:	b500      	push	{lr}
    709a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    709c:	f7f9 fd26 	bl	aec <Sys_GetCoreID>
    70a0:	4603      	mov	r3, r0
    70a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    70a4:	4a0d      	ldr	r2, [pc, #52]	; (70dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    70a6:	9b01      	ldr	r3, [sp, #4]
    70a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70ac:	1e5a      	subs	r2, r3, #1
    70ae:	490b      	ldr	r1, [pc, #44]	; (70dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    70b0:	9b01      	ldr	r3, [sp, #4]
    70b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    70b6:	4a0a      	ldr	r2, [pc, #40]	; (70e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    70b8:	9b01      	ldr	r3, [sp, #4]
    70ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70be:	f003 0301 	and.w	r3, r3, #1
    70c2:	2b00      	cmp	r3, #0
    70c4:	d106      	bne.n	70d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    70c6:	4a05      	ldr	r2, [pc, #20]	; (70dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    70c8:	9b01      	ldr	r3, [sp, #4]
    70ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70ce:	2b00      	cmp	r3, #0
    70d0:	d100      	bne.n	70d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    70d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    70d4:	bf00      	nop
    70d6:	b003      	add	sp, #12
    70d8:	f85d fb04 	ldr.w	pc, [sp], #4
    70dc:	1fff8df4 	.word	0x1fff8df4
    70e0:	1fff8df0 	.word	0x1fff8df0

000070e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    70e4:	b500      	push	{lr}
    70e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    70e8:	f7f9 fd00 	bl	aec <Sys_GetCoreID>
    70ec:	4603      	mov	r3, r0
    70ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    70f0:	4a10      	ldr	r2, [pc, #64]	; (7134 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    70f2:	9b01      	ldr	r3, [sp, #4]
    70f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70f8:	2b00      	cmp	r3, #0
    70fa:	d10d      	bne.n	7118 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    70fc:	f7f9 fc26 	bl	94c <Port_schm_read_msr>
    7100:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7102:	9b00      	ldr	r3, [sp, #0]
    7104:	f003 0301 	and.w	r3, r3, #1
    7108:	2b00      	cmp	r3, #0
    710a:	d100      	bne.n	710e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    710c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    710e:	490a      	ldr	r1, [pc, #40]	; (7138 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    7110:	9b01      	ldr	r3, [sp, #4]
    7112:	9a00      	ldr	r2, [sp, #0]
    7114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    7118:	4a06      	ldr	r2, [pc, #24]	; (7134 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    711a:	9b01      	ldr	r3, [sp, #4]
    711c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7120:	1c5a      	adds	r2, r3, #1
    7122:	4904      	ldr	r1, [pc, #16]	; (7134 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    7124:	9b01      	ldr	r3, [sp, #4]
    7126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    712a:	bf00      	nop
    712c:	b003      	add	sp, #12
    712e:	f85d fb04 	ldr.w	pc, [sp], #4
    7132:	bf00      	nop
    7134:	1fff8dfc 	.word	0x1fff8dfc
    7138:	1fff8df8 	.word	0x1fff8df8

0000713c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    713c:	b500      	push	{lr}
    713e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7140:	f7f9 fcd4 	bl	aec <Sys_GetCoreID>
    7144:	4603      	mov	r3, r0
    7146:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    7148:	4a0d      	ldr	r2, [pc, #52]	; (7180 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    714a:	9b01      	ldr	r3, [sp, #4]
    714c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7150:	1e5a      	subs	r2, r3, #1
    7152:	490b      	ldr	r1, [pc, #44]	; (7180 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7154:	9b01      	ldr	r3, [sp, #4]
    7156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    715a:	4a0a      	ldr	r2, [pc, #40]	; (7184 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    715c:	9b01      	ldr	r3, [sp, #4]
    715e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7162:	f003 0301 	and.w	r3, r3, #1
    7166:	2b00      	cmp	r3, #0
    7168:	d106      	bne.n	7178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    716a:	4a05      	ldr	r2, [pc, #20]	; (7180 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    716c:	9b01      	ldr	r3, [sp, #4]
    716e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7172:	2b00      	cmp	r3, #0
    7174:	d100      	bne.n	7178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7176:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7178:	bf00      	nop
    717a:	b003      	add	sp, #12
    717c:	f85d fb04 	ldr.w	pc, [sp], #4
    7180:	1fff8dfc 	.word	0x1fff8dfc
    7184:	1fff8df8 	.word	0x1fff8df8

00007188 <Clock_Ip_au8DividerCallbackIndex>:
    7188:	0e0d0c00 06030201 0a070409 000b0805     ................

00007198 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

000071a8 <Clock_Ip_au8XoscCallbackIndex>:
    71a8:	00000100 00000000 00000000 00000000     ................

000071b8 <Clock_Ip_au8IrcoscCallbackIndex>:
    71b8:	03020100 00000004 00000000 00000000     ................

000071c8 <Clock_Ip_au8GateCallbackIndex>:
    71c8:	06010200 01040301 00000500 00000000     ................

000071d8 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

000071e8 <Clock_Ip_au8PllCallbackIndex>:
    71e8:	00000100 00000000 00000000 00000000     ................

000071f8 <Clock_Ip_au8SelectorCallbackIndex>:
    71f8:	0a090800 03020109 07060504 00000000     ................

00007208 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00007218 <Clock_Ip_au8CmuCallbackIndex>:
	...

00007228 <Clock_Ip_au8ClockFeatures>:
	...
    7238:	01000000 00000000 00000000 00000002     ................
    7248:	00000000 00000300 00000000 00040000     ................
    7258:	00000000 05000000 00000000 00000000     ................
    7268:	00000006 00000000 00000100 00000000     ................
    7278:	00010000 00000000 04000000 00000000     ................
    7288:	00000000 00000005 00000001 00000401     ................
    7298:	00000200 00050100 00030000 04020000     ................
    72a8:	04000000 02000000 00000005 00000005     ................
    72b8:	00000403 00000600 00050300 00070000     ................
    72c8:	05000000 00000000 00000000 00000006     ................
	...
    7308:	00050000 00000000 06000000 00000100     ................
    7318:	00000000 00030007 00000000 00000000     ................
    7328:	00000000 00060000 00000000 07000000     ................
    7338:	00000100 00000000 00030008 00000000     ................
	...
    7350:	00090000 00000000 0a000000 00000100     ................
    7360:	00000000 0003000b 00000000 00000000     ................
    7370:	00000000 000c0000 00000000 0d000000     ................
    7380:	00000100 00000000 0003000e 00000000     ................
    7390:	00000800 00000000 00090000 00000000     ................
    73a0:	0a000000 00000000 00000000 0000000b     ................
    73b0:	00000000 00000b01 00000000 000b0200     ................
    73c0:	00000000 0b030000 00000000 00000000     ................
	...
    73d8:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    73e8:	01000000 00000000 00000000 00000007     ................
    73f8:	00007300 00000700 00320000 00090000     .s........2.....
    7408:	02000000 07000000 00000000 00000021     ............!...
    7418:	00000009 00000400 00000900 00030000     ................
    7428:	00070000 61000000 07000000 00000000     .......a........
    7438:	00000024 00000007 00002500 00000700     $........%......
    7448:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    7458:	00000000 00000020 38000004 00003800     .... ......8.8..
    7468:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    7478:	04000000 00260000 00000026 66000004     ......&.&......f
    7488:	00006600 00000400 00370037 00040000     .f......7.7.....
    7498:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    74a8:	2e000004 00002e00 00000200 00404040     ............@@@.
    74b8:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    74c8:	0000006b 6c000004 00006c00 00000900     k......l.l......
    74d8:	00010000 00090000 00000000 07000000     ................
    74e8:	00000000 00000036 00000007 00003100     ....6........1..
    74f8:	00000700 00490000 00070000 4a000000     ......I........J
    7508:	07000000 00000000 0000004b 00000007     ........K.......
    7518:	00004c00 00000700 004d0000 00070000     .L........M.....
    7528:	3d000000 03000000 00000000 00000000     ...=............

00007538 <Clock_Ip_au16SelectorEntryHardwareValue>:
    7538:	01010a03 01010001 04040002 02000603     ................
    7548:	00010810 02020100 00000000 00000007     ................
    7558:	00000009 00000000 00000c0e 00000000     ................
	...

00007590 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    7590:	00020000 00000300 00000601 00000000     ................
	...

000075c0 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    75c0:	00000700 00000000 02020000 01010303     ................
    75d0:	03020606 00000000 00000000 00000000     ................
	...

000075f0 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    75f0:	00000001 00000000 02020000 01010303     ................
    7600:	03020606 00000000 00000000 00000000     ................
	...

00007620 <Clock_Ip_au8DividerValueHardwareValue>:
    7620:	00020100 00000003 00000004 00000000     ................
    7630:	00000005 00000000 00000000 00000000     ................
    7640:	00000006 00000000 00000000 00000000     ................
	...
    7660:	00000007                                ....

00007664 <Clock_Ip_apxScgPeriphAsyncDivs>:
    7664:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00007674 <Clock_Ip_aeSourceTypeClockName>:
    7674:	00000000 00000001 00000001 00000001     ................
    7684:	00000001 00000001 00000001 00000001     ................
    7694:	00000002 00000003 00000001 00000001     ................
    76a4:	00000001 00000001 00000002 00000002     ................
    76b4:	00000003 00000003 00000001 00000001     ................
    76c4:	00000004 00000004 00000004 00000004     ................
	...

00007730 <Clock_Ip_aeHwPllName>:
    7730:	00000009                                ....

00007734 <Clock_Ip_aeHwDfsName>:
    7734:	00000057                                W...

00007738 <Clock_Ip_axDividerCallbacks>:
    7738:	00001c01 00001c0b 00001c25 00001c3f     ........%...?...
    7748:	00001c59 00001c73 00001c8d 00001ca7     Y...s...........
    7758:	00001cc1 00001cdb 00001cf5 00001d0f     ................
    7768:	00001d29 00001d43 00001d5d              )...C...]...

00007774 <Clock_Ip_axDividerTriggerCallbacks>:
    7774:	000020d1 000020d1                       . ... ..

0000777c <Clock_Ip_axExtOscCallbacks>:
    777c:	000020dd 000020dd 000020dd 000020e7     . ... ... ... ..
    778c:	000020dd 000020f1 0000210b 00002125     . ... ...!..%!..
    779c:	000021a9 000021bd                       .!...!..

000077a4 <Clock_Ip_axFracDivCallbacks>:
    77a4:	0000237d 0000237d 00002387              }#..}#...#..

000077b0 <Clock_Ip_axGateCallbacks>:
    77b0:	000023a1 000023ab 000024ab 000024c5     .#...#...$...$..
    77c0:	0000245b 00002475 0000240b 00002425     [$..u$...$..%$..
    77d0:	000023bb 000023d5 000024fb 00002515     .#...#...$...%..
    77e0:	0000254b 00002565                       K%..e%..

000077e8 <Clock_Ip_axIntOscCallbacks>:
    77e8:	00002711 00002711 0000271b 00002725     .'...'...'..%'..
    77f8:	0000273f 00002759 0000276d 00002787     ?'..Y'..m'...'..
    7808:	000027a1 000027b5 000027cf 000027e9     .'...'...'...'..
    7818:	00002891 000028ab 000028c5              .(...(...(..

00007824 <Clock_Ip_axCmuCallbacks>:
    7824:	00002e61 00002e6b 00002e77 00002e61     a...k...w...a...

00007834 <Clock_Ip_axPllCallbacks>:
    7834:	00002e81 00002e81 00002e8b 00002e81     ................
    7844:	00002e97 00002ea1 00002ebb 00002ed5     ................
    7854:	00002f79 00002f65                       y/..e/..

0000785c <Clock_Ip_axPcfsCallbacks>:
    785c:	000030d5                                .0..

00007860 <Clock_Ip_axSelectorCallbacks>:
    7860:	000030e1 000030e1 000030eb 00003105     .0...0...0...1..
    7870:	000030e1 0000311f 00003139 00003153     .0...1..91..S1..
    7880:	0000316d 00003187 000031a1 000031bb     m1...1...1...1..
    7890:	000031d5 000031ef 00003209 00003223     .1...1...2..#2..
    78a0:	0000323d 00003257 00003271 0000328b     =2..W2..q2...2..
    78b0:	000032a5 000032bf                       .2...2..

000078b8 <ClockSource>:
    78b8:	00000000 00000008 00000002 00000005     ................
	...
    78d0:	00000009                                ....

000078d4 <ResetReasonArray>:
    78d4:	00000000 00000001 00000002 00000003     ................
    78e4:	00000004 00000005 00000006 00000007     ................
    78f4:	00000008 00000009 0000000a 0000000b     ................
    7904:	0000000c 0000000d 0000000e              ............

00007910 <Port_au32PortCiPortBaseAddr>:
    7910:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    7920:	4004d000                                ...@

00007924 <Port_au32PortCiGpioBaseAddr>:
    7924:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    7934:	400ff100                                ...@

00007938 <Mcu_aClockConfigPB>:
	...
    7940:	1c000101 04000010 01000029 00000005     ........).......
    7950:	00000001 00000000 00000057 00000000     ........W.......
    7960:	00000000 00000008 007a1200 00000001     ..........z.....
    7970:	00000001 00000000 00000057 00000000     ........W.......
    7980:	00000057 00000000 00000000 00000000     W...............
	...
    79a0:	00000019 00000005 0000001a 00000002     ................
    79b0:	0000001b 00000005 0000002a 00000005     ........*.......
    79c0:	00000028 0000000e 00000029 00000001     (.......).......
    79d0:	00000056 0000001c 00000032 0000002a     V.......2...*...
    79e0:	0000002b 00000014 0000002c 00000014     +.......,.......
    79f0:	0000002d 00000014 0000002e 00000014     -...............
    7a00:	0000003f 00000000 00000040 00000000     ?.......@.......
    7a10:	00000041 00000000 00000042 00000000     A.......B.......
    7a20:	00000031 00000000 00000045 00000000     1.......E.......
    7a30:	00000046 00000000 00000047 00000000     F.......G.......
    7a40:	00000044 00000000 00000030 00000000     D.......0.......
    7a50:	0000003d 00000000 00000043 00000000     =.......C.......
    7a60:	00000049 00000000 0000004a 00000000     I.......J.......
    7a70:	0000004b 00000000 00000048 00000000     K.......H.......
    7a80:	0000000c 00000001 00000000 0000000d     ................
    7a90:	00000002 00000000 0000000e 00000001     ................
    7aa0:	00000000 0000000f 00000001 00000000     ................
    7ab0:	0000001d 00000001 00000000 0000001e     ................
    7ac0:	00000008 00000000 0000001f 00000001     ................
    7ad0:	00000000 00000021 00000001 00000000     ....!...........
    7ae0:	00000022 00000002 00000000 00000023     "...........#...
    7af0:	00000001 00000000 00000025 00000003     ........%.......
    7b00:	00000000 00000026 00000004 00000000     ....&...........
    7b10:	00000027 00000002 00000000 00000032     '...........2...
    7b20:	00000001 00000000 00000048 00000001     ........H.......
    7b30:	00000001 00000056 00000001 00000001     ....V...........
    7b40:	00000057 00000000 00000000 00000057     W...........W...
	...
    7b58:	00000057 00000000 00000000 00000057     W...........W...
	...
    7b70:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    7b8c:	00000014 00007d00 00000015 00007d00     .....}.......}..
    7b9c:	00000016 00007d00 00000017 00008000     .....}..........
    7bac:	00000012 00000001 00000013 00000001     ................
    7bbc:	00000030 00000000 00000031 00000000     0.......1.......
    7bcc:	00000032 00000000 00000033 00000000     2.......3.......
    7bdc:	00000034 00000000 00000035 00000001     4.......5.......
    7bec:	00000036 00000000 00000037 00000001     6.......7.......
    7bfc:	00000038 00000001 00000039 00000000     8.......9.......
    7c0c:	0000003a 00000000 0000003b 00000000     :.......;.......
    7c1c:	0000003c 00000000 0000003d 00000000     <.......=.......
    7c2c:	0000003e 00000000 0000003f 00000000     >.......?.......
    7c3c:	00000040 00000000 00000041 00000000     @.......A.......
    7c4c:	00000042 00000000 00000043 00000000     B.......C.......
    7c5c:	00000044 00000000 00000045 00000000     D.......E.......
    7c6c:	00000046 00000000 00000047 00000000     F.......G.......
    7c7c:	00000048 00000000 00000049 00000000     H.......I.......
    7c8c:	0000004a 00000000 0000004b 00000000     J.......K.......
    7c9c:	0000004c 00000001 0000004d 00000001     L.......M.......
    7cac:	0000004e 00000000 0000004f 00000000     N.......O.......
    7cbc:	00000050 00000001 00000051 00000001     P.......Q.......
    7ccc:	00000052 00000001 00000053 00000001     R.......S.......
    7cdc:	00000054 00000001 00000055 00000000     T.......U.......
    7cec:	00000056 00000001 00000057 00000000     V.......W.......
    7cfc:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00007d30 <Mcu_Config>:
    7d30:	0000005a 00000000 00000001 00000001     Z...............
    7d40:	00007e84 00007938 00007e90              .~..8y...~..

00007d4c <OsIf_xPredefinedConfig>:
    7d4c:	00000000 02dc6c00                       .....l..

00007d54 <OsIf_apxPredefinedConfig>:
    7d54:	00007d4c                                L}..

00007d58 <g_pin_mux_InitConfigArr>:
    7d58:	4004c000 400ff0c0 00000000 00000002     ...@...@........
    7d68:	00000001 00000002 00000000 00000000     ................
	...

00007d80 <au8Port_PartitionList>:
    7d80:	00000001                                ....

00007d84 <au32Port_PinToPartitionMap>:
    7d84:	00000001                                ....

00007d88 <Port_au16NoUnUsedPadsArrayDefault>:
    7d88:	00010000 00030002 00070006 00090008     ................
    7d98:	000c000b 000e000d 0010000f 00200011     .............. .
    7da8:	00220021 00240023 00260025 00280027     !.".#.$.%.&.'.(.
    7db8:	002a0029 002c002b 002e002d 0030002f     ).*.+.,.-.../.0.
    7dc8:	00400031 00420041 00460043 00480047     1.@.A.B.C.F.G.H.
    7dd8:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    7de8:	00610051 00630062 00650064 00670066     Q.a.b.c.d.e.f.g.
    7df8:	00690068 006b006a 006d006c 006f006e     h.i.j.k.l.m.n.o.
    7e08:	00710070 00810080 00830082 00850084     p.q.............
    7e18:	00870086 00890088 008b008a 008d008c     ................
    7e28:	008f008e 00000090                       ........

00007e30 <Port_UnUsedPin>:
    7e30:	00000100 00000001 00000000              ............

00007e3c <Port_aPinConfigDefault>:
    7e3c:	00000060 00000100 00000000 00000002     `...............
    7e4c:	00010001                                ....

00007e50 <Port_Config>:
    7e50:	00530001 00007d88 00007e30 00007e3c     ..S..}..0~..<~..
	...
    7e68:	00007d84 00007d80 00007d58              .}...}..X}..

00007e74 <Power_Ip_RCM_ConfigPB>:
	...

00007e7c <Power_Ip_PMC_ConfigPB>:
    7e7c:	00000000                                ....

00007e80 <Power_Ip_SMC_ConfigPB>:
    7e80:	00000000                                ....

00007e84 <Power_Ip_aModeConfigPB>:
	...

00007e90 <Power_Ip_HwIPsConfigPB>:
    7e90:	00007e74 00007e7c 00007e80              t~..|~...~..

00007e9c <__INIT_TABLE>:
    7e9c:	00000002 	.word	0x00000002
    7ea0:	1fff8b10 	.word	0x1fff8b10
    7ea4:	00007ec4 	.word	0x00007ec4
    7ea8:	00007eec 	.word	0x00007eec
    7eac:	1fff8800 	.word	0x1fff8800
    7eb0:	00000000 	.word	0x00000000
    7eb4:	00000310 	.word	0x00000310

00007eb8 <__ZERO_TABLE>:
    7eb8:	00000001 	.word	0x00000001
    7ebc:	1fff8b40 	.word	0x1fff8b40
    7ec0:	1fff8e10 	.word	0x1fff8e10
