
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000bcf 	.word	0x00000bcf
  10:	00000bd1 	.word	0x00000bd1
  14:	00000bd3 	.word	0x00000bd3
  18:	00000bd5 	.word	0x00000bd5
	...
  2c:	00000bd7 	.word	0x00000bd7
  30:	00000bd9 	.word	0x00000bd9
  34:	00000000 	.word	0x00000000
  38:	00000bdb 	.word	0x00000bdb
  3c:	00000bdd 	.word	0x00000bdd
  40:	00000bdf 	.word	0x00000bdf
  44:	00000bdf 	.word	0x00000bdf
  48:	00000bdf 	.word	0x00000bdf
  4c:	00000bdf 	.word	0x00000bdf
  50:	00000bdf 	.word	0x00000bdf
  54:	00000bdf 	.word	0x00000bdf
  58:	00000bdf 	.word	0x00000bdf
  5c:	00000bdf 	.word	0x00000bdf
  60:	00000bdf 	.word	0x00000bdf
  64:	00000bdf 	.word	0x00000bdf
  68:	00000bdf 	.word	0x00000bdf
  6c:	00000bdf 	.word	0x00000bdf
  70:	00000bdf 	.word	0x00000bdf
  74:	00000bdf 	.word	0x00000bdf
  78:	00000bdf 	.word	0x00000bdf
  7c:	00000bdf 	.word	0x00000bdf
  80:	00000bdf 	.word	0x00000bdf
  84:	00000bdf 	.word	0x00000bdf
  88:	00000bdf 	.word	0x00000bdf
  8c:	00000bdf 	.word	0x00000bdf
  90:	00000bdf 	.word	0x00000bdf
  94:	00000bdf 	.word	0x00000bdf
  98:	00000bdf 	.word	0x00000bdf
  9c:	00000bdf 	.word	0x00000bdf
  a0:	00000bdf 	.word	0x00000bdf
  a4:	00000bdf 	.word	0x00000bdf
  a8:	00000bdf 	.word	0x00000bdf
  ac:	00000bdf 	.word	0x00000bdf
  b0:	00000bdf 	.word	0x00000bdf
  b4:	00000bdf 	.word	0x00000bdf
  b8:	00000bdf 	.word	0x00000bdf
  bc:	00000bdf 	.word	0x00000bdf
  c0:	00000bdf 	.word	0x00000bdf
  c4:	00000bdf 	.word	0x00000bdf
  c8:	00000bdf 	.word	0x00000bdf
  cc:	00000bdf 	.word	0x00000bdf
  d0:	00000bdf 	.word	0x00000bdf
  d4:	00000bdf 	.word	0x00000bdf
  d8:	00000bdf 	.word	0x00000bdf
  dc:	00000bdf 	.word	0x00000bdf
  e0:	00000bdf 	.word	0x00000bdf
  e4:	00000bdf 	.word	0x00000bdf
  e8:	00000bdf 	.word	0x00000bdf
  ec:	00000bdf 	.word	0x00000bdf
  f0:	00000bdf 	.word	0x00000bdf
  f4:	00000bdf 	.word	0x00000bdf
  f8:	00000bdf 	.word	0x00000bdf
  fc:	00000bdf 	.word	0x00000bdf
 100:	00000bdf 	.word	0x00000bdf
 104:	00000bdf 	.word	0x00000bdf
 108:	00000bdf 	.word	0x00000bdf
 10c:	00000bdf 	.word	0x00000bdf
 110:	00000bdf 	.word	0x00000bdf
 114:	00000bdf 	.word	0x00000bdf
 118:	00000bdf 	.word	0x00000bdf
 11c:	00000bdf 	.word	0x00000bdf
 120:	00000bdf 	.word	0x00000bdf
 124:	00000bdf 	.word	0x00000bdf
 128:	00000bdf 	.word	0x00000bdf
 12c:	00000bdf 	.word	0x00000bdf
 130:	00000bdf 	.word	0x00000bdf
 134:	00000bdf 	.word	0x00000bdf
 138:	00000bdf 	.word	0x00000bdf
 13c:	00000bdf 	.word	0x00000bdf
 140:	00000bdf 	.word	0x00000bdf
 144:	00000bdf 	.word	0x00000bdf
 148:	00000bdf 	.word	0x00000bdf
 14c:	00000bdf 	.word	0x00000bdf
 150:	00000bdf 	.word	0x00000bdf
 154:	00000bdf 	.word	0x00000bdf
 158:	00000bdf 	.word	0x00000bdf
 15c:	00000bdf 	.word	0x00000bdf
 160:	00000bdf 	.word	0x00000bdf
 164:	00000bdf 	.word	0x00000bdf
 168:	00000bdf 	.word	0x00000bdf
 16c:	00000bdf 	.word	0x00000bdf
 170:	00000bdf 	.word	0x00000bdf
 174:	00000bdf 	.word	0x00000bdf
 178:	00000bdf 	.word	0x00000bdf
 17c:	00000bdf 	.word	0x00000bdf
 180:	00000bdf 	.word	0x00000bdf
 184:	00000bdf 	.word	0x00000bdf
 188:	00000bdf 	.word	0x00000bdf
 18c:	00000bdf 	.word	0x00000bdf
 190:	00000bdf 	.word	0x00000bdf
 194:	00000bdf 	.word	0x00000bdf
 198:	00000bdf 	.word	0x00000bdf
 19c:	00000bdf 	.word	0x00000bdf
 1a0:	00000bdf 	.word	0x00000bdf
 1a4:	00000bdf 	.word	0x00000bdf
 1a8:	00000bdf 	.word	0x00000bdf
 1ac:	00000bdf 	.word	0x00000bdf
 1b0:	00000bdf 	.word	0x00000bdf
 1b4:	00000bdf 	.word	0x00000bdf
 1b8:	00000bdf 	.word	0x00000bdf
 1bc:	00000bdf 	.word	0x00000bdf
 1c0:	00000bdf 	.word	0x00000bdf
 1c4:	00000bdf 	.word	0x00000bdf
 1c8:	00000bdf 	.word	0x00000bdf
 1cc:	00000bdf 	.word	0x00000bdf
 1d0:	00000bdf 	.word	0x00000bdf
 1d4:	00000bdf 	.word	0x00000bdf
 1d8:	00000bdf 	.word	0x00000bdf
 1dc:	00000bdf 	.word	0x00000bdf
 1e0:	00000bdf 	.word	0x00000bdf
 1e4:	00000bdf 	.word	0x00000bdf
 1e8:	00000bdf 	.word	0x00000bdf
 1ec:	00000bdf 	.word	0x00000bdf
 1f0:	00000bdf 	.word	0x00000bdf
 1f4:	00000bdf 	.word	0x00000bdf
 1f8:	00000bdf 	.word	0x00000bdf
 1fc:	00000bdf 	.word	0x00000bdf
 200:	00000bdf 	.word	0x00000bdf
 204:	00000bdf 	.word	0x00000bdf
 208:	00000bdf 	.word	0x00000bdf
 20c:	00000bdf 	.word	0x00000bdf
 210:	00000bdf 	.word	0x00000bdf
 214:	00000bdf 	.word	0x00000bdf
 218:	00000bdf 	.word	0x00000bdf
 21c:	00000bdf 	.word	0x00000bdf
 220:	00000bdf 	.word	0x00000bdf
 224:	00000bdf 	.word	0x00000bdf
 228:	00000bdf 	.word	0x00000bdf
 22c:	00000bdf 	.word	0x00000bdf
 230:	00000bdf 	.word	0x00000bdf
 234:	00000bdf 	.word	0x00000bdf
 238:	00000bdf 	.word	0x00000bdf
 23c:	00000bdf 	.word	0x00000bdf
 240:	00000bdf 	.word	0x00000bdf
 244:	00000bdf 	.word	0x00000bdf
 248:	00000bdf 	.word	0x00000bdf
 24c:	00000bdf 	.word	0x00000bdf
 250:	00000bdf 	.word	0x00000bdf
 254:	00000bdf 	.word	0x00000bdf
 258:	00000bdf 	.word	0x00000bdf
 25c:	00000bdf 	.word	0x00000bdf
 260:	00000bdf 	.word	0x00000bdf
 264:	00000bdf 	.word	0x00000bdf
 268:	00000bdf 	.word	0x00000bdf
 26c:	00000bdf 	.word	0x00000bdf
 270:	00000bdf 	.word	0x00000bdf
 274:	00000bdf 	.word	0x00000bdf
 278:	00000bdf 	.word	0x00000bdf
 27c:	00000bdf 	.word	0x00000bdf
 280:	00000bdf 	.word	0x00000bdf
 284:	00000bdf 	.word	0x00000bdf
 288:	00000bdf 	.word	0x00000bdf
 28c:	00000bdf 	.word	0x00000bdf
 290:	00000bdf 	.word	0x00000bdf
 294:	00000bdf 	.word	0x00000bdf
 298:	00000bdf 	.word	0x00000bdf
 29c:	00000bdf 	.word	0x00000bdf
 2a0:	00000bdf 	.word	0x00000bdf
 2a4:	00000bdf 	.word	0x00000bdf
 2a8:	00000bdf 	.word	0x00000bdf
 2ac:	00000bdf 	.word	0x00000bdf
 2b0:	00000bdf 	.word	0x00000bdf
 2b4:	00000bdf 	.word	0x00000bdf
 2b8:	00000bdf 	.word	0x00000bdf
 2bc:	00000bdf 	.word	0x00000bdf
 2c0:	00000bdf 	.word	0x00000bdf
 2c4:	00000bdf 	.word	0x00000bdf
 2c8:	00000bdf 	.word	0x00000bdf
 2cc:	00000bdf 	.word	0x00000bdf
 2d0:	00000bdf 	.word	0x00000bdf
 2d4:	00000bdf 	.word	0x00000bdf
 2d8:	00000bdf 	.word	0x00000bdf
 2dc:	00000bdf 	.word	0x00000bdf
 2e0:	00000bdf 	.word	0x00000bdf
 2e4:	00000bdf 	.word	0x00000bdf
 2e8:	00000bdf 	.word	0x00000bdf
 2ec:	00000bdf 	.word	0x00000bdf
 2f0:	00000bdf 	.word	0x00000bdf
 2f4:	00000bdf 	.word	0x00000bdf
 2f8:	00000bdf 	.word	0x00000bdf
 2fc:	00000bdf 	.word	0x00000bdf
 300:	00000bdf 	.word	0x00000bdf
 304:	00000bdf 	.word	0x00000bdf
 308:	00000bdf 	.word	0x00000bdf
 30c:	00000bdf 	.word	0x00000bdf

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fadb 	bl	a3c <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb9a 	bl	bc4 <startup_go_to_user_mode>
     490:	f000 fa5c 	bl	94c <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff9188 	.word	0x1fff9188

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fae5 	bl	b68 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__BSS_SRAM_SIZE+0x1e>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__BSS_SRAM_SIZE+0x5a>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__BSS_SRAM_SIZE+0x20c>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__BSS_SRAM_SIZE+0x20c>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__BSS_SRAM_SIZE+0x8>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__BSS_SRAM_SIZE+0x210>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__BSS_SRAM_SIZE+0x210>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__BSS_SRAM_SIZE+0x1a>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__BSS_SRAM_SIZE+0x34>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__BSS_SRAM_SIZE+0x206>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__BSS_SRAM_SIZE+0xd0>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__BSS_SRAM_SIZE+0x46>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0x244>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__BSS_SRAM_SIZE+0x1a>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__BSS_SRAM_SIZE+0x1a>
     6ba:	b902      	cbnz	r2, 6be <__BSS_SRAM_SIZE+0x5e>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__BSS_SRAM_SIZE+0x184>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__BSS_SRAM_SIZE+0x9e>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__BSS_SRAM_SIZE+0x9c>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__BSS_SRAM_SIZE+0x23c>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__BSS_SRAM_SIZE+0xc8>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__BSS_SRAM_SIZE+0xc6>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__BSS_SRAM_SIZE+0x236>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__BSS_SRAM_SIZE+0x10>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__BSS_SRAM_SIZE+0x128>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__BSS_SRAM_SIZE+0x232>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__BSS_SRAM_SIZE+0x232>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__BSS_SRAM_SIZE+0x150>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__BSS_SRAM_SIZE+0x22a>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__BSS_SRAM_SIZE+0x22a>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__BSS_SRAM_SIZE+0x218>
     7c4:	d056      	beq.n	874 <__BSS_SRAM_SIZE+0x214>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0x248>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__BSS_SRAM_SIZE+0x1a>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__BSS_SRAM_SIZE+0x1d0>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__BSS_SRAM_SIZE+0x22e>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__BSS_SRAM_SIZE+0x22e>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__BSS_SRAM_SIZE+0x1fe>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__BSS_SRAM_SIZE+0x226>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__BSS_SRAM_SIZE+0x226>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__BSS_SRAM_SIZE+0x76>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__BSS_SRAM_SIZE+0x1a>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__BSS_SRAM_SIZE+0x8>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__BSS_SRAM_SIZE+0x166>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__BSS_SRAM_SIZE+0x166>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__BSS_SRAM_SIZE+0x1fe>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__BSS_SRAM_SIZE+0x150>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__BSS_SRAM_SIZE+0x1d0>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__BSS_SRAM_SIZE+0x128>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__BSS_SRAM_SIZE+0xc8>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__BSS_SRAM_SIZE+0x9e>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__BSS_SRAM_SIZE+0x50>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__BSS_SRAM_SIZE+0x1a>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Delay>:
void EcuM_Init( void );

/*this is dummy delay function prepare just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     8b0:	b500      	push	{lr}
     8b2:	b087      	sub	sp, #28
     8b4:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     8b6:	9b01      	ldr	r3, [sp, #4]
     8b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8bc:	fb02 f303 	mul.w	r3, r2, r3
     8c0:	2101      	movs	r1, #1
     8c2:	4618      	mov	r0, r3
     8c4:	f000 fc68 	bl	1198 <OsIf_MicrosToTicks>
     8c8:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     8ca:	2001      	movs	r0, #1
     8cc:	f000 fc18 	bl	1100 <OsIf_GetCounter>
     8d0:	4603      	mov	r3, r0
     8d2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     8d4:	2300      	movs	r3, #0
     8d6:	9305      	str	r3, [sp, #20]
    do
    {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     8d8:	ab03      	add	r3, sp, #12
     8da:	2101      	movs	r1, #1
     8dc:	4618      	mov	r0, r3
     8de:	f000 fc28 	bl	1132 <OsIf_GetElapsed>
     8e2:	4602      	mov	r2, r0
     8e4:	9b05      	ldr	r3, [sp, #20]
     8e6:	4413      	add	r3, r2
     8e8:	9305      	str	r3, [sp, #20]
    }while( ElapsedTime < Timeout );
     8ea:	9a05      	ldr	r2, [sp, #20]
     8ec:	9b04      	ldr	r3, [sp, #16]
     8ee:	429a      	cmp	r2, r3
     8f0:	d3f2      	bcc.n	8d8 <Delay+0x28>
}
     8f2:	bf00      	nop
     8f4:	bf00      	nop
     8f6:	b007      	add	sp, #28
     8f8:	f85d fb04 	ldr.w	pc, [sp], #4

000008fc <CDD_UserTxConfirmation0x123>:

/*Callback function to indicate that the message was transmitted. The reference
to function shall be defined in file Autosar/CanIf/CanIf_Cdd.h, such file
must be created manualy, we define now two functions notification for both Pdus*/
void CDD_UserTxConfirmation0x123( PduIdType TxPduId, Std_ReturnType result )
{
     8fc:	b082      	sub	sp, #8
     8fe:	4603      	mov	r3, r0
     900:	460a      	mov	r2, r1
     902:	f8ad 3006 	strh.w	r3, [sp, #6]
     906:	4613      	mov	r3, r2
     908:	f88d 3005 	strb.w	r3, [sp, #5]
    (void)TxPduId;
    if( result == E_OK )
     90c:	f89d 3005 	ldrb.w	r3, [sp, #5]
     910:	2b00      	cmp	r3, #0
     912:	d102      	bne.n	91a <CDD_UserTxConfirmation0x123+0x1e>
    {
        CanIf_bTxFlag = TRUE;
     914:	4b02      	ldr	r3, [pc, #8]	; (920 <CDD_UserTxConfirmation0x123+0x24>)
     916:	2201      	movs	r2, #1
     918:	701a      	strb	r2, [r3, #0]
    }
}
     91a:	bf00      	nop
     91c:	b002      	add	sp, #8
     91e:	4770      	bx	lr
     920:	1fff8b30 	.word	0x1fff8b30

00000924 <CDD_UserTxConfirmation0x124>:

void CDD_UserTxConfirmation0x124( PduIdType TxPduId, Std_ReturnType result )
{
     924:	b082      	sub	sp, #8
     926:	4603      	mov	r3, r0
     928:	460a      	mov	r2, r1
     92a:	f8ad 3006 	strh.w	r3, [sp, #6]
     92e:	4613      	mov	r3, r2
     930:	f88d 3005 	strb.w	r3, [sp, #5]
    (void)TxPduId;
    if( result == E_OK )
     934:	f89d 3005 	ldrb.w	r3, [sp, #5]
     938:	2b00      	cmp	r3, #0
     93a:	d102      	bne.n	942 <CDD_UserTxConfirmation0x124+0x1e>
    {
        CanIf_bTxFlag = TRUE;
     93c:	4b02      	ldr	r3, [pc, #8]	; (948 <CDD_UserTxConfirmation0x124+0x24>)
     93e:	2201      	movs	r2, #1
     940:	701a      	strb	r2, [r3, #0]
    }
}
     942:	bf00      	nop
     944:	b002      	add	sp, #8
     946:	4770      	bx	lr
     948:	1fff8b30 	.word	0x1fff8b30

0000094c <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     94c:	b500      	push	{lr}
     94e:	b085      	sub	sp, #20
    PduInfoType PduInfo;

    EcuM_Init();
     950:	f000 f834 	bl	9bc <EcuM_Init>

    /*Start the CAN controller and make it active in the CAN bus network*/
    Can_43_FLEXCAN_SetControllerMode( CanController_0, CAN_CS_STARTED );
     954:	2101      	movs	r1, #1
     956:	2000      	movs	r0, #0
     958:	f005 fbd0 	bl	60fc <Can_43_FLEXCAN_SetControllerMode>

    /*set the information to transmit*/
    PduInfo.SduDataPtr = Can_au8Sdu8bytes;
     95c:	4b15      	ldr	r3, [pc, #84]	; (9b4 <main+0x68>)
     95e:	9301      	str	r3, [sp, #4]
    PduInfo.SduLength = 8u;
     960:	2308      	movs	r3, #8
     962:	9303      	str	r3, [sp, #12]
    PduInfo.MetaDataPtr = NULL_PTR;
     964:	2300      	movs	r3, #0
     966:	9302      	str	r3, [sp, #8]
    while( 1u )
    {
        /*set the FlexCAN peripheral to transmit the message, the message will be
        transmitted by the CAN interrupt, this function will call the low level
        Can_43_FLEXCAN_Write with the low level data according de PDU configured*/
        CanIf_Transmit( CanIfTxPduCfg_0, &PduInfo );
     968:	ab01      	add	r3, sp, #4
     96a:	4619      	mov	r1, r3
     96c:	2000      	movs	r0, #0
     96e:	f00d fa87 	bl	de80 <CanIf_Transmit>
        CanIf_Transmit( CanIfTxPduCfg_1, &PduInfo );
     972:	ab01      	add	r3, sp, #4
     974:	4619      	mov	r1, r3
     976:	2001      	movs	r0, #1
     978:	f00d fa82 	bl	de80 <CanIf_Transmit>

        /*wait until the CAN interrupt transmit message, waiting is not the
        suitable way, but good enough for ilustration purposes, flag is 
        updated by the callback function CanIf_TxConfirmation*/
        while( CanIf_bTxFlag == FALSE );
     97c:	bf00      	nop
     97e:	4b0e      	ldr	r3, [pc, #56]	; (9b8 <main+0x6c>)
     980:	781b      	ldrb	r3, [r3, #0]
     982:	f083 0301 	eor.w	r3, r3, #1
     986:	b2db      	uxtb	r3, r3
     988:	2b00      	cmp	r3, #0
     98a:	d1f8      	bne.n	97e <main+0x32>
        /*Clear the Tx flag*/
        CanIf_bTxFlag = FALSE;
     98c:	4b0a      	ldr	r3, [pc, #40]	; (9b8 <main+0x6c>)
     98e:	2200      	movs	r2, #0
     990:	701a      	strb	r2, [r3, #0]

        /*increase some values jus for ilustration purpose*/
        Can_au8Sdu8bytes[0]++;
     992:	4b08      	ldr	r3, [pc, #32]	; (9b4 <main+0x68>)
     994:	781b      	ldrb	r3, [r3, #0]
     996:	3301      	adds	r3, #1
     998:	b2da      	uxtb	r2, r3
     99a:	4b06      	ldr	r3, [pc, #24]	; (9b4 <main+0x68>)
     99c:	701a      	strb	r2, [r3, #0]
        Can_au8Sdu8bytes[7]++;
     99e:	4b05      	ldr	r3, [pc, #20]	; (9b4 <main+0x68>)
     9a0:	79db      	ldrb	r3, [r3, #7]
     9a2:	3301      	adds	r3, #1
     9a4:	b2da      	uxtb	r2, r3
     9a6:	4b03      	ldr	r3, [pc, #12]	; (9b4 <main+0x68>)
     9a8:	71da      	strb	r2, [r3, #7]

        Delay( 5000u );
     9aa:	f241 3088 	movw	r0, #5000	; 0x1388
     9ae:	f7ff ff7f 	bl	8b0 <Delay>
        CanIf_Transmit( CanIfTxPduCfg_0, &PduInfo );
     9b2:	e7d9      	b.n	968 <main+0x1c>
     9b4:	1fff8b10 	.word	0x1fff8b10
     9b8:	1fff8b30 	.word	0x1fff8b30

000009bc <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     9bc:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     9be:	480d      	ldr	r0, [pc, #52]	; (9f4 <EcuM_Init+0x38>)
     9c0:	f004 f92a 	bl	4c18 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     9c4:	2000      	movs	r0, #0
     9c6:	f004 f97b 	bl	4cc0 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     9ca:	2000      	movs	r0, #0
     9cc:	f004 f99c 	bl	4d08 <Mcu_SetMode>
    /*Init the internal tick reference Systick Timer*/
    OsIf_Init( NULL_PTR );
     9d0:	2000      	movs	r0, #0
     9d2:	f000 fb8c 	bl	10ee <OsIf_Init>
    /*enable and setup interrupts in use by the Can Driver*/
    Platform_Init( NULL_PTR );
     9d6:	2000      	movs	r0, #0
     9d8:	f000 fa86 	bl	ee8 <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration*/
    Port_Init( &Port_Config );
     9dc:	4806      	ldr	r0, [pc, #24]	; (9f8 <EcuM_Init+0x3c>)
     9de:	f004 fd1d 	bl	541c <Port_Init>

    /*init the FlexCAN2 with the paramters set in Tresos WITHOUT loop back mode*/
    Can_43_FLEXCAN_Init( &Can_43_FLEXCAN_Config );
     9e2:	4806      	ldr	r0, [pc, #24]	; (9fc <EcuM_Init+0x40>)
     9e4:	f005 fb1c 	bl	6020 <Can_43_FLEXCAN_Init>
    CanIf_Init( &CanIf_Config );
     9e8:	4805      	ldr	r0, [pc, #20]	; (a00 <EcuM_Init+0x44>)
     9ea:	f00d fa3f 	bl	de6c <CanIf_Init>
}
     9ee:	bf00      	nop
     9f0:	bd08      	pop	{r3, pc}
     9f2:	bf00      	nop
     9f4:	0000ef0c 	.word	0x0000ef0c
     9f8:	0000f0b8 	.word	0x0000f0b8
     9fc:	0000ea80 	.word	0x0000ea80
     a00:	0000e9b8 	.word	0x0000e9b8

00000a04 <Can_43_FLEXCAN_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Can_43_FLEXCAN_schm_read_msr(void)
{
     a04:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a06:	f3ef 8310 	mrs	r3, PRIMASK
     a0a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a0c:	4623      	mov	r3, r4
}
     a0e:	4618      	mov	r0, r3
     a10:	f85d 4b04 	ldr.w	r4, [sp], #4
     a14:	4770      	bx	lr

00000a16 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     a16:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a18:	f3ef 8310 	mrs	r3, PRIMASK
     a1c:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a1e:	4623      	mov	r3, r4
}
     a20:	4618      	mov	r0, r3
     a22:	f85d 4b04 	ldr.w	r4, [sp], #4
     a26:	4770      	bx	lr

00000a28 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     a28:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a2a:	f3ef 8310 	mrs	r3, PRIMASK
     a2e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a30:	4623      	mov	r3, r4
}
     a32:	4618      	mov	r0, r3
     a34:	f85d 4b04 	ldr.w	r4, [sp], #4
     a38:	4770      	bx	lr
	...

00000a3c <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     a3c:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     a3e:	2300      	movs	r3, #0
     a40:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     a42:	2300      	movs	r3, #0
     a44:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     a46:	2300      	movs	r3, #0
     a48:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     a4a:	2300      	movs	r3, #0
     a4c:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     a4e:	4b44      	ldr	r3, [pc, #272]	; (b60 <init_data_bss+0x124>)
     a50:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     a52:	4b44      	ldr	r3, [pc, #272]	; (b64 <init_data_bss+0x128>)
     a54:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     a56:	9b05      	ldr	r3, [sp, #20]
     a58:	681b      	ldr	r3, [r3, #0]
     a5a:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     a5c:	9b05      	ldr	r3, [sp, #20]
     a5e:	3304      	adds	r3, #4
     a60:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     a62:	9b05      	ldr	r3, [sp, #20]
     a64:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     a66:	2300      	movs	r3, #0
     a68:	9309      	str	r3, [sp, #36]	; 0x24
     a6a:	e03d      	b.n	ae8 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     a6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a6e:	4613      	mov	r3, r2
     a70:	005b      	lsls	r3, r3, #1
     a72:	4413      	add	r3, r2
     a74:	009b      	lsls	r3, r3, #2
     a76:	461a      	mov	r2, r3
     a78:	9b03      	ldr	r3, [sp, #12]
     a7a:	4413      	add	r3, r2
     a7c:	685b      	ldr	r3, [r3, #4]
     a7e:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a82:	4613      	mov	r3, r2
     a84:	005b      	lsls	r3, r3, #1
     a86:	4413      	add	r3, r2
     a88:	009b      	lsls	r3, r3, #2
     a8a:	461a      	mov	r2, r3
     a8c:	9b03      	ldr	r3, [sp, #12]
     a8e:	4413      	add	r3, r2
     a90:	681b      	ldr	r3, [r3, #0]
     a92:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a96:	4613      	mov	r3, r2
     a98:	005b      	lsls	r3, r3, #1
     a9a:	4413      	add	r3, r2
     a9c:	009b      	lsls	r3, r3, #2
     a9e:	461a      	mov	r2, r3
     aa0:	9b03      	ldr	r3, [sp, #12]
     aa2:	4413      	add	r3, r2
     aa4:	689b      	ldr	r3, [r3, #8]
     aa6:	4619      	mov	r1, r3
     aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     aaa:	4613      	mov	r3, r2
     aac:	005b      	lsls	r3, r3, #1
     aae:	4413      	add	r3, r2
     ab0:	009b      	lsls	r3, r3, #2
     ab2:	461a      	mov	r2, r3
     ab4:	9b03      	ldr	r3, [sp, #12]
     ab6:	4413      	add	r3, r2
     ab8:	685b      	ldr	r3, [r3, #4]
     aba:	1acb      	subs	r3, r1, r3
     abc:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     abe:	2300      	movs	r3, #0
     ac0:	9308      	str	r3, [sp, #32]
     ac2:	e00a      	b.n	ada <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     ac4:	9a00      	ldr	r2, [sp, #0]
     ac6:	9b08      	ldr	r3, [sp, #32]
     ac8:	441a      	add	r2, r3
     aca:	9901      	ldr	r1, [sp, #4]
     acc:	9b08      	ldr	r3, [sp, #32]
     ace:	440b      	add	r3, r1
     ad0:	7812      	ldrb	r2, [r2, #0]
     ad2:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     ad4:	9b08      	ldr	r3, [sp, #32]
     ad6:	3301      	adds	r3, #1
     ad8:	9308      	str	r3, [sp, #32]
     ada:	9a08      	ldr	r2, [sp, #32]
     adc:	9b06      	ldr	r3, [sp, #24]
     ade:	429a      	cmp	r2, r3
     ae0:	d3f0      	bcc.n	ac4 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ae4:	3301      	adds	r3, #1
     ae6:	9309      	str	r3, [sp, #36]	; 0x24
     ae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     aea:	9b07      	ldr	r3, [sp, #28]
     aec:	429a      	cmp	r2, r3
     aee:	d3bd      	bcc.n	a6c <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     af0:	9b04      	ldr	r3, [sp, #16]
     af2:	681b      	ldr	r3, [r3, #0]
     af4:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     af6:	9b04      	ldr	r3, [sp, #16]
     af8:	3304      	adds	r3, #4
     afa:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     afc:	9b04      	ldr	r3, [sp, #16]
     afe:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     b00:	2300      	movs	r3, #0
     b02:	9309      	str	r3, [sp, #36]	; 0x24
     b04:	e024      	b.n	b50 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b08:	00db      	lsls	r3, r3, #3
     b0a:	9a02      	ldr	r2, [sp, #8]
     b0c:	4413      	add	r3, r2
     b0e:	681b      	ldr	r3, [r3, #0]
     b10:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b14:	00db      	lsls	r3, r3, #3
     b16:	9a02      	ldr	r2, [sp, #8]
     b18:	4413      	add	r3, r2
     b1a:	685b      	ldr	r3, [r3, #4]
     b1c:	4619      	mov	r1, r3
     b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b20:	00db      	lsls	r3, r3, #3
     b22:	9a02      	ldr	r2, [sp, #8]
     b24:	4413      	add	r3, r2
     b26:	681b      	ldr	r3, [r3, #0]
     b28:	1acb      	subs	r3, r1, r3
     b2a:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b2c:	2300      	movs	r3, #0
     b2e:	9308      	str	r3, [sp, #32]
     b30:	e007      	b.n	b42 <init_data_bss+0x106>
        {
            ram[j] = 0U;
     b32:	9a01      	ldr	r2, [sp, #4]
     b34:	9b08      	ldr	r3, [sp, #32]
     b36:	4413      	add	r3, r2
     b38:	2200      	movs	r2, #0
     b3a:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b3c:	9b08      	ldr	r3, [sp, #32]
     b3e:	3301      	adds	r3, #1
     b40:	9308      	str	r3, [sp, #32]
     b42:	9a08      	ldr	r2, [sp, #32]
     b44:	9b06      	ldr	r3, [sp, #24]
     b46:	429a      	cmp	r2, r3
     b48:	d3f3      	bcc.n	b32 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b4c:	3301      	adds	r3, #1
     b4e:	9309      	str	r3, [sp, #36]	; 0x24
     b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b52:	9b07      	ldr	r3, [sp, #28]
     b54:	429a      	cmp	r2, r3
     b56:	d3d6      	bcc.n	b06 <init_data_bss+0xca>
        }
    }
}
     b58:	bf00      	nop
     b5a:	bf00      	nop
     b5c:	b00a      	add	sp, #40	; 0x28
     b5e:	4770      	bx	lr
     b60:	0000f104 	.word	0x0000f104
     b64:	0000f120 	.word	0x0000f120

00000b68 <sys_m4_cache_init>:
{
     b68:	b084      	sub	sp, #16
     b6a:	4603      	mov	r3, r0
     b6c:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     b70:	2300      	movs	r3, #0
     b72:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     b76:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b7a:	2b00      	cmp	r3, #0
     b7c:	d118      	bne.n	bb0 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     b7e:	4b10      	ldr	r3, [pc, #64]	; (bc0 <sys_m4_cache_init+0x58>)
     b80:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     b84:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     b86:	4b0e      	ldr	r3, [pc, #56]	; (bc0 <sys_m4_cache_init+0x58>)
     b88:	681b      	ldr	r3, [r3, #0]
     b8a:	4a0d      	ldr	r2, [pc, #52]	; (bc0 <sys_m4_cache_init+0x58>)
     b8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b90:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     b92:	bf00      	nop
     b94:	4b0a      	ldr	r3, [pc, #40]	; (bc0 <sys_m4_cache_init+0x58>)
     b96:	681b      	ldr	r3, [r3, #0]
     b98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     ba0:	d0f8      	beq.n	b94 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     ba2:	4b07      	ldr	r3, [pc, #28]	; (bc0 <sys_m4_cache_init+0x58>)
     ba4:	681b      	ldr	r3, [r3, #0]
     ba6:	4a06      	ldr	r2, [pc, #24]	; (bc0 <sys_m4_cache_init+0x58>)
     ba8:	f043 0301 	orr.w	r3, r3, #1
     bac:	6013      	str	r3, [r2, #0]
     bae:	e002      	b.n	bb6 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     bb0:	2301      	movs	r3, #1
     bb2:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     bb6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     bba:	4618      	mov	r0, r3
     bbc:	b004      	add	sp, #16
     bbe:	4770      	bx	lr
     bc0:	e0082000 	.word	0xe0082000

00000bc4 <startup_go_to_user_mode>:
}
     bc4:	bf00      	nop
     bc6:	4770      	bx	lr

00000bc8 <Sys_GetCoreID>:
    return 0U;
     bc8:	2300      	movs	r3, #0
}
     bca:	4618      	mov	r0, r3
     bcc:	4770      	bx	lr

00000bce <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     bce:	e7fe      	b.n	bce <HardFault_Handler>

00000bd0 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     bd0:	e7fe      	b.n	bd0 <MemManage_Handler>

00000bd2 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     bd2:	e7fe      	b.n	bd2 <BusFault_Handler>

00000bd4 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     bd4:	e7fe      	b.n	bd4 <UsageFault_Handler>

00000bd6 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     bd6:	e7fe      	b.n	bd6 <SVC_Handler>

00000bd8 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     bd8:	e7fe      	b.n	bd8 <DebugMon_Handler>

00000bda <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     bda:	e7fe      	b.n	bda <PendSV_Handler>

00000bdc <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     bdc:	e7fe      	b.n	bdc <SysTick_Handler>

00000bde <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     bde:	e7fe      	b.n	bde <undefined_handler>

00000be0 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     be0:	b086      	sub	sp, #24
     be2:	9003      	str	r0, [sp, #12]
     be4:	9102      	str	r1, [sp, #8]
     be6:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
     be8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     bec:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
     bf0:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
     bf2:	9b01      	ldr	r3, [sp, #4]
     bf4:	2b00      	cmp	r3, #0
     bf6:	d007      	beq.n	c08 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
     bf8:	9b03      	ldr	r3, [sp, #12]
     bfa:	3310      	adds	r3, #16
     bfc:	009b      	lsls	r3, r3, #2
     bfe:	9a05      	ldr	r2, [sp, #20]
     c00:	4413      	add	r3, r2
     c02:	681a      	ldr	r2, [r3, #0]
     c04:	9b01      	ldr	r3, [sp, #4]
     c06:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
     c08:	9b03      	ldr	r3, [sp, #12]
     c0a:	3310      	adds	r3, #16
     c0c:	009b      	lsls	r3, r3, #2
     c0e:	9a05      	ldr	r2, [sp, #20]
     c10:	4413      	add	r3, r2
     c12:	9a02      	ldr	r2, [sp, #8]
     c14:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
     c16:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
     c1a:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
     c1e:	bf00      	nop
     c20:	b006      	add	sp, #24
     c22:	4770      	bx	lr

00000c24 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
     c24:	b082      	sub	sp, #8
     c26:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     c28:	9b01      	ldr	r3, [sp, #4]
     c2a:	f003 021f 	and.w	r2, r3, #31
     c2e:	4905      	ldr	r1, [pc, #20]	; (c44 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
     c30:	9b01      	ldr	r3, [sp, #4]
     c32:	095b      	lsrs	r3, r3, #5
     c34:	2001      	movs	r0, #1
     c36:	fa00 f202 	lsl.w	r2, r0, r2
     c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
     c3e:	bf00      	nop
     c40:	b002      	add	sp, #8
     c42:	4770      	bx	lr
     c44:	e000e100 	.word	0xe000e100

00000c48 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
     c48:	b082      	sub	sp, #8
     c4a:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     c4c:	9b01      	ldr	r3, [sp, #4]
     c4e:	f003 021f 	and.w	r2, r3, #31
     c52:	4906      	ldr	r1, [pc, #24]	; (c6c <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
     c54:	9b01      	ldr	r3, [sp, #4]
     c56:	095b      	lsrs	r3, r3, #5
     c58:	2001      	movs	r0, #1
     c5a:	fa00 f202 	lsl.w	r2, r0, r2
     c5e:	3320      	adds	r3, #32
     c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
     c64:	bf00      	nop
     c66:	b002      	add	sp, #8
     c68:	4770      	bx	lr
     c6a:	bf00      	nop
     c6c:	e000e100 	.word	0xe000e100

00000c70 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     c70:	b084      	sub	sp, #16
     c72:	9001      	str	r0, [sp, #4]
     c74:	460b      	mov	r3, r1
     c76:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
     c7a:	2304      	movs	r3, #4
     c7c:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
     c80:	f89d 2003 	ldrb.w	r2, [sp, #3]
     c84:	f89d 300f 	ldrb.w	r3, [sp, #15]
     c88:	fa02 f103 	lsl.w	r1, r2, r3
     c8c:	4a04      	ldr	r2, [pc, #16]	; (ca0 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
     c8e:	9b01      	ldr	r3, [sp, #4]
     c90:	b2c9      	uxtb	r1, r1
     c92:	4413      	add	r3, r2
     c94:	460a      	mov	r2, r1
     c96:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
     c9a:	bf00      	nop
     c9c:	b004      	add	sp, #16
     c9e:	4770      	bx	lr
     ca0:	e000e100 	.word	0xe000e100

00000ca4 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
     ca4:	b084      	sub	sp, #16
     ca6:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
     ca8:	2304      	movs	r3, #4
     caa:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
     cae:	4a09      	ldr	r2, [pc, #36]	; (cd4 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
     cb0:	9b01      	ldr	r3, [sp, #4]
     cb2:	4413      	add	r3, r2
     cb4:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
     cb8:	b2db      	uxtb	r3, r3
     cba:	461a      	mov	r2, r3
     cbc:	f89d 300f 	ldrb.w	r3, [sp, #15]
     cc0:	fa42 f303 	asr.w	r3, r2, r3
     cc4:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
     cc8:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     ccc:	4618      	mov	r0, r3
     cce:	b004      	add	sp, #16
     cd0:	4770      	bx	lr
     cd2:	bf00      	nop
     cd4:	e000e100 	.word	0xe000e100

00000cd8 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
     cd8:	b082      	sub	sp, #8
     cda:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     cdc:	9b01      	ldr	r3, [sp, #4]
     cde:	f003 021f 	and.w	r2, r3, #31
     ce2:	4906      	ldr	r1, [pc, #24]	; (cfc <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
     ce4:	9b01      	ldr	r3, [sp, #4]
     ce6:	095b      	lsrs	r3, r3, #5
     ce8:	2001      	movs	r0, #1
     cea:	fa00 f202 	lsl.w	r2, r0, r2
     cee:	3360      	adds	r3, #96	; 0x60
     cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
     cf4:	bf00      	nop
     cf6:	b002      	add	sp, #8
     cf8:	4770      	bx	lr
     cfa:	bf00      	nop
     cfc:	e000e100 	.word	0xe000e100

00000d00 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
     d00:	b500      	push	{lr}
     d02:	b085      	sub	sp, #20
     d04:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     d06:	2300      	movs	r3, #0
     d08:	9303      	str	r3, [sp, #12]
     d0a:	e05d      	b.n	dc8 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     d0c:	9b01      	ldr	r3, [sp, #4]
     d0e:	6859      	ldr	r1, [r3, #4]
     d10:	9a03      	ldr	r2, [sp, #12]
     d12:	4613      	mov	r3, r2
     d14:	005b      	lsls	r3, r3, #1
     d16:	4413      	add	r3, r2
     d18:	009b      	lsls	r3, r3, #2
     d1a:	440b      	add	r3, r1
     d1c:	681b      	ldr	r3, [r3, #0]
     d1e:	4618      	mov	r0, r3
     d20:	f000 f899 	bl	e56 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d24:	9b01      	ldr	r3, [sp, #4]
     d26:	6859      	ldr	r1, [r3, #4]
     d28:	9a03      	ldr	r2, [sp, #12]
     d2a:	4613      	mov	r3, r2
     d2c:	005b      	lsls	r3, r3, #1
     d2e:	4413      	add	r3, r2
     d30:	009b      	lsls	r3, r3, #2
     d32:	440b      	add	r3, r1
     d34:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
     d36:	9b01      	ldr	r3, [sp, #4]
     d38:	6859      	ldr	r1, [r3, #4]
     d3a:	9a03      	ldr	r2, [sp, #12]
     d3c:	4613      	mov	r3, r2
     d3e:	005b      	lsls	r3, r3, #1
     d40:	4413      	add	r3, r2
     d42:	009b      	lsls	r3, r3, #2
     d44:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d46:	795b      	ldrb	r3, [r3, #5]
     d48:	4619      	mov	r1, r3
     d4a:	f000 f869 	bl	e20 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d4e:	9b01      	ldr	r3, [sp, #4]
     d50:	6859      	ldr	r1, [r3, #4]
     d52:	9a03      	ldr	r2, [sp, #12]
     d54:	4613      	mov	r3, r2
     d56:	005b      	lsls	r3, r3, #1
     d58:	4413      	add	r3, r2
     d5a:	009b      	lsls	r3, r3, #2
     d5c:	440b      	add	r3, r1
     d5e:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
     d60:	9b01      	ldr	r3, [sp, #4]
     d62:	6859      	ldr	r1, [r3, #4]
     d64:	9a03      	ldr	r2, [sp, #12]
     d66:	4613      	mov	r3, r2
     d68:	005b      	lsls	r3, r3, #1
     d6a:	4413      	add	r3, r2
     d6c:	009b      	lsls	r3, r3, #2
     d6e:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d70:	689b      	ldr	r3, [r3, #8]
     d72:	2200      	movs	r2, #0
     d74:	4619      	mov	r1, r3
     d76:	f000 f831 	bl	ddc <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
     d7a:	9b01      	ldr	r3, [sp, #4]
     d7c:	6859      	ldr	r1, [r3, #4]
     d7e:	9a03      	ldr	r2, [sp, #12]
     d80:	4613      	mov	r3, r2
     d82:	005b      	lsls	r3, r3, #1
     d84:	4413      	add	r3, r2
     d86:	009b      	lsls	r3, r3, #2
     d88:	440b      	add	r3, r1
     d8a:	791b      	ldrb	r3, [r3, #4]
     d8c:	2b00      	cmp	r3, #0
     d8e:	d00c      	beq.n	daa <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     d90:	9b01      	ldr	r3, [sp, #4]
     d92:	6859      	ldr	r1, [r3, #4]
     d94:	9a03      	ldr	r2, [sp, #12]
     d96:	4613      	mov	r3, r2
     d98:	005b      	lsls	r3, r3, #1
     d9a:	4413      	add	r3, r2
     d9c:	009b      	lsls	r3, r3, #2
     d9e:	440b      	add	r3, r1
     da0:	681b      	ldr	r3, [r3, #0]
     da2:	4618      	mov	r0, r3
     da4:	f000 f828 	bl	df8 <IntCtrl_Ip_EnableIrq>
     da8:	e00b      	b.n	dc2 <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     daa:	9b01      	ldr	r3, [sp, #4]
     dac:	6859      	ldr	r1, [r3, #4]
     dae:	9a03      	ldr	r2, [sp, #12]
     db0:	4613      	mov	r3, r2
     db2:	005b      	lsls	r3, r3, #1
     db4:	4413      	add	r3, r2
     db6:	009b      	lsls	r3, r3, #2
     db8:	440b      	add	r3, r1
     dba:	681b      	ldr	r3, [r3, #0]
     dbc:	4618      	mov	r0, r3
     dbe:	f000 f825 	bl	e0c <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     dc2:	9b03      	ldr	r3, [sp, #12]
     dc4:	3301      	adds	r3, #1
     dc6:	9303      	str	r3, [sp, #12]
     dc8:	9b01      	ldr	r3, [sp, #4]
     dca:	681b      	ldr	r3, [r3, #0]
     dcc:	9a03      	ldr	r2, [sp, #12]
     dce:	429a      	cmp	r2, r3
     dd0:	d39c      	bcc.n	d0c <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
     dd2:	2300      	movs	r3, #0
}
     dd4:	4618      	mov	r0, r3
     dd6:	b005      	add	sp, #20
     dd8:	f85d fb04 	ldr.w	pc, [sp], #4

00000ddc <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     ddc:	b500      	push	{lr}
     dde:	b085      	sub	sp, #20
     de0:	9003      	str	r0, [sp, #12]
     de2:	9102      	str	r1, [sp, #8]
     de4:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
     de6:	9a01      	ldr	r2, [sp, #4]
     de8:	9902      	ldr	r1, [sp, #8]
     dea:	9803      	ldr	r0, [sp, #12]
     dec:	f7ff fef8 	bl	be0 <IntCtrl_Ip_InstallHandlerPrivileged>
}
     df0:	bf00      	nop
     df2:	b005      	add	sp, #20
     df4:	f85d fb04 	ldr.w	pc, [sp], #4

00000df8 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
     df8:	b500      	push	{lr}
     dfa:	b083      	sub	sp, #12
     dfc:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
     dfe:	9801      	ldr	r0, [sp, #4]
     e00:	f7ff ff10 	bl	c24 <IntCtrl_Ip_EnableIrqPrivileged>
}
     e04:	bf00      	nop
     e06:	b003      	add	sp, #12
     e08:	f85d fb04 	ldr.w	pc, [sp], #4

00000e0c <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
     e0c:	b500      	push	{lr}
     e0e:	b083      	sub	sp, #12
     e10:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
     e12:	9801      	ldr	r0, [sp, #4]
     e14:	f7ff ff18 	bl	c48 <IntCtrl_Ip_DisableIrqPrivileged>
}
     e18:	bf00      	nop
     e1a:	b003      	add	sp, #12
     e1c:	f85d fb04 	ldr.w	pc, [sp], #4

00000e20 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     e20:	b500      	push	{lr}
     e22:	b083      	sub	sp, #12
     e24:	9001      	str	r0, [sp, #4]
     e26:	460b      	mov	r3, r1
     e28:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
     e2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e30:	4619      	mov	r1, r3
     e32:	9801      	ldr	r0, [sp, #4]
     e34:	f7ff ff1c 	bl	c70 <IntCtrl_Ip_SetPriorityPrivileged>
}
     e38:	bf00      	nop
     e3a:	b003      	add	sp, #12
     e3c:	f85d fb04 	ldr.w	pc, [sp], #4

00000e40 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
     e40:	b500      	push	{lr}
     e42:	b083      	sub	sp, #12
     e44:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
     e46:	9801      	ldr	r0, [sp, #4]
     e48:	f7ff ff2c 	bl	ca4 <IntCtrl_Ip_GetPriorityPrivileged>
     e4c:	4603      	mov	r3, r0
}
     e4e:	4618      	mov	r0, r3
     e50:	b003      	add	sp, #12
     e52:	f85d fb04 	ldr.w	pc, [sp], #4

00000e56 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
     e56:	b500      	push	{lr}
     e58:	b083      	sub	sp, #12
     e5a:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
     e5c:	9801      	ldr	r0, [sp, #4]
     e5e:	f7ff ff3b 	bl	cd8 <IntCtrl_Ip_ClearPendingPrivileged>
}
     e62:	bf00      	nop
     e64:	b003      	add	sp, #12
     e66:	f85d fb04 	ldr.w	pc, [sp], #4
     e6a:	bf00      	nop

00000e6c <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
     e6c:	b500      	push	{lr}
     e6e:	b083      	sub	sp, #12
     e70:	9001      	str	r0, [sp, #4]
     e72:	460b      	mov	r3, r1
     e74:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
     e78:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e7c:	2b00      	cmp	r3, #0
     e7e:	d003      	beq.n	e88 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
     e80:	9801      	ldr	r0, [sp, #4]
     e82:	f7ff ffb9 	bl	df8 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
     e86:	e002      	b.n	e8e <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
     e88:	9801      	ldr	r0, [sp, #4]
     e8a:	f7ff ffbf 	bl	e0c <IntCtrl_Ip_DisableIrq>
}
     e8e:	bf00      	nop
     e90:	b003      	add	sp, #12
     e92:	f85d fb04 	ldr.w	pc, [sp], #4

00000e96 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     e96:	b500      	push	{lr}
     e98:	b083      	sub	sp, #12
     e9a:	9001      	str	r0, [sp, #4]
     e9c:	460b      	mov	r3, r1
     e9e:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
     ea2:	f89d 3003 	ldrb.w	r3, [sp, #3]
     ea6:	4619      	mov	r1, r3
     ea8:	9801      	ldr	r0, [sp, #4]
     eaa:	f7ff ffb9 	bl	e20 <IntCtrl_Ip_SetPriority>
}
     eae:	bf00      	nop
     eb0:	b003      	add	sp, #12
     eb2:	f85d fb04 	ldr.w	pc, [sp], #4

00000eb6 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
     eb6:	b500      	push	{lr}
     eb8:	b083      	sub	sp, #12
     eba:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
     ebc:	9801      	ldr	r0, [sp, #4]
     ebe:	f7ff ffbf 	bl	e40 <IntCtrl_Ip_GetPriority>
     ec2:	4603      	mov	r3, r0
}
     ec4:	4618      	mov	r0, r3
     ec6:	b003      	add	sp, #12
     ec8:	f85d fb04 	ldr.w	pc, [sp], #4

00000ecc <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     ecc:	b500      	push	{lr}
     ece:	b085      	sub	sp, #20
     ed0:	9003      	str	r0, [sp, #12]
     ed2:	9102      	str	r1, [sp, #8]
     ed4:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
     ed6:	9a01      	ldr	r2, [sp, #4]
     ed8:	9902      	ldr	r1, [sp, #8]
     eda:	9803      	ldr	r0, [sp, #12]
     edc:	f7ff ff7e 	bl	ddc <IntCtrl_Ip_InstallHandler>
}
     ee0:	bf00      	nop
     ee2:	b005      	add	sp, #20
     ee4:	f85d fb04 	ldr.w	pc, [sp], #4

00000ee8 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
     ee8:	b500      	push	{lr}
     eea:	b085      	sub	sp, #20
     eec:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
     eee:	2300      	movs	r3, #0
     ef0:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
     ef4:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ef8:	4a05      	ldr	r2, [pc, #20]	; (f10 <Platform_Init+0x28>)
     efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	4618      	mov	r0, r3
     f02:	f000 f8c7 	bl	1094 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
     f06:	bf00      	nop
     f08:	b005      	add	sp, #20
     f0a:	f85d fb04 	ldr.w	pc, [sp], #4
     f0e:	bf00      	nop
     f10:	0000ef38 	.word	0x0000ef38

00000f14 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
     f14:	b500      	push	{lr}
     f16:	b085      	sub	sp, #20
     f18:	9001      	str	r0, [sp, #4]
     f1a:	460b      	mov	r3, r1
     f1c:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f20:	2300      	movs	r3, #0
     f22:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
     f26:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f2a:	4619      	mov	r1, r3
     f2c:	9801      	ldr	r0, [sp, #4]
     f2e:	f7ff ff9d 	bl	e6c <Platform_Ipw_SetIrq>
    }
    return RetValue;
     f32:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f36:	4618      	mov	r0, r3
     f38:	b005      	add	sp, #20
     f3a:	f85d fb04 	ldr.w	pc, [sp], #4

00000f3e <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     f3e:	b500      	push	{lr}
     f40:	b085      	sub	sp, #20
     f42:	9001      	str	r0, [sp, #4]
     f44:	460b      	mov	r3, r1
     f46:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f4a:	2300      	movs	r3, #0
     f4c:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
     f50:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f54:	4619      	mov	r1, r3
     f56:	9801      	ldr	r0, [sp, #4]
     f58:	f7ff ff9d 	bl	e96 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
     f5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f60:	4618      	mov	r0, r3
     f62:	b005      	add	sp, #20
     f64:	f85d fb04 	ldr.w	pc, [sp], #4

00000f68 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
     f68:	b500      	push	{lr}
     f6a:	b085      	sub	sp, #20
     f6c:	9001      	str	r0, [sp, #4]
     f6e:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f70:	2300      	movs	r3, #0
     f72:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
     f76:	9801      	ldr	r0, [sp, #4]
     f78:	f7ff ff9d 	bl	eb6 <Platform_Ipw_GetIrqPriority>
     f7c:	4603      	mov	r3, r0
     f7e:	461a      	mov	r2, r3
     f80:	9b00      	ldr	r3, [sp, #0]
     f82:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
     f84:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f88:	4618      	mov	r0, r3
     f8a:	b005      	add	sp, #20
     f8c:	f85d fb04 	ldr.w	pc, [sp], #4

00000f90 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
     f90:	b500      	push	{lr}
     f92:	b087      	sub	sp, #28
     f94:	9003      	str	r0, [sp, #12]
     f96:	9102      	str	r1, [sp, #8]
     f98:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f9a:	2300      	movs	r3, #0
     f9c:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
     fa0:	9a01      	ldr	r2, [sp, #4]
     fa2:	9902      	ldr	r1, [sp, #8]
     fa4:	9803      	ldr	r0, [sp, #12]
     fa6:	f7ff ff91 	bl	ecc <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
     faa:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
     fae:	4618      	mov	r0, r3
     fb0:	b007      	add	sp, #28
     fb2:	f85d fb04 	ldr.w	pc, [sp], #4
     fb6:	bf00      	nop

00000fb8 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
     fb8:	b500      	push	{lr}
     fba:	b085      	sub	sp, #20
     fbc:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     fbe:	2300      	movs	r3, #0
     fc0:	9303      	str	r3, [sp, #12]
     fc2:	e05d      	b.n	1080 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     fc4:	9b01      	ldr	r3, [sp, #4]
     fc6:	6859      	ldr	r1, [r3, #4]
     fc8:	9a03      	ldr	r2, [sp, #12]
     fca:	4613      	mov	r3, r2
     fcc:	005b      	lsls	r3, r3, #1
     fce:	4413      	add	r3, r2
     fd0:	009b      	lsls	r3, r3, #2
     fd2:	440b      	add	r3, r1
     fd4:	681b      	ldr	r3, [r3, #0]
     fd6:	4618      	mov	r0, r3
     fd8:	f7ff ff3d 	bl	e56 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     fdc:	9b01      	ldr	r3, [sp, #4]
     fde:	6859      	ldr	r1, [r3, #4]
     fe0:	9a03      	ldr	r2, [sp, #12]
     fe2:	4613      	mov	r3, r2
     fe4:	005b      	lsls	r3, r3, #1
     fe6:	4413      	add	r3, r2
     fe8:	009b      	lsls	r3, r3, #2
     fea:	440b      	add	r3, r1
     fec:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
     fee:	9b01      	ldr	r3, [sp, #4]
     ff0:	6859      	ldr	r1, [r3, #4]
     ff2:	9a03      	ldr	r2, [sp, #12]
     ff4:	4613      	mov	r3, r2
     ff6:	005b      	lsls	r3, r3, #1
     ff8:	4413      	add	r3, r2
     ffa:	009b      	lsls	r3, r3, #2
     ffc:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     ffe:	795b      	ldrb	r3, [r3, #5]
    1000:	4619      	mov	r1, r3
    1002:	f7ff ff0d 	bl	e20 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1006:	9b01      	ldr	r3, [sp, #4]
    1008:	6859      	ldr	r1, [r3, #4]
    100a:	9a03      	ldr	r2, [sp, #12]
    100c:	4613      	mov	r3, r2
    100e:	005b      	lsls	r3, r3, #1
    1010:	4413      	add	r3, r2
    1012:	009b      	lsls	r3, r3, #2
    1014:	440b      	add	r3, r1
    1016:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1018:	9b01      	ldr	r3, [sp, #4]
    101a:	6859      	ldr	r1, [r3, #4]
    101c:	9a03      	ldr	r2, [sp, #12]
    101e:	4613      	mov	r3, r2
    1020:	005b      	lsls	r3, r3, #1
    1022:	4413      	add	r3, r2
    1024:	009b      	lsls	r3, r3, #2
    1026:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1028:	689b      	ldr	r3, [r3, #8]
    102a:	2200      	movs	r2, #0
    102c:	4619      	mov	r1, r3
    102e:	f7ff fed5 	bl	ddc <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1032:	9b01      	ldr	r3, [sp, #4]
    1034:	6859      	ldr	r1, [r3, #4]
    1036:	9a03      	ldr	r2, [sp, #12]
    1038:	4613      	mov	r3, r2
    103a:	005b      	lsls	r3, r3, #1
    103c:	4413      	add	r3, r2
    103e:	009b      	lsls	r3, r3, #2
    1040:	440b      	add	r3, r1
    1042:	791b      	ldrb	r3, [r3, #4]
    1044:	2b00      	cmp	r3, #0
    1046:	d00c      	beq.n	1062 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1048:	9b01      	ldr	r3, [sp, #4]
    104a:	6859      	ldr	r1, [r3, #4]
    104c:	9a03      	ldr	r2, [sp, #12]
    104e:	4613      	mov	r3, r2
    1050:	005b      	lsls	r3, r3, #1
    1052:	4413      	add	r3, r2
    1054:	009b      	lsls	r3, r3, #2
    1056:	440b      	add	r3, r1
    1058:	681b      	ldr	r3, [r3, #0]
    105a:	4618      	mov	r0, r3
    105c:	f7ff fecc 	bl	df8 <IntCtrl_Ip_EnableIrq>
    1060:	e00b      	b.n	107a <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1062:	9b01      	ldr	r3, [sp, #4]
    1064:	6859      	ldr	r1, [r3, #4]
    1066:	9a03      	ldr	r2, [sp, #12]
    1068:	4613      	mov	r3, r2
    106a:	005b      	lsls	r3, r3, #1
    106c:	4413      	add	r3, r2
    106e:	009b      	lsls	r3, r3, #2
    1070:	440b      	add	r3, r1
    1072:	681b      	ldr	r3, [r3, #0]
    1074:	4618      	mov	r0, r3
    1076:	f7ff fec9 	bl	e0c <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    107a:	9b03      	ldr	r3, [sp, #12]
    107c:	3301      	adds	r3, #1
    107e:	9303      	str	r3, [sp, #12]
    1080:	9b01      	ldr	r3, [sp, #4]
    1082:	681b      	ldr	r3, [r3, #0]
    1084:	9a03      	ldr	r2, [sp, #12]
    1086:	429a      	cmp	r2, r3
    1088:	d39c      	bcc.n	fc4 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    108a:	2300      	movs	r3, #0
}
    108c:	4618      	mov	r0, r3
    108e:	b005      	add	sp, #20
    1090:	f85d fb04 	ldr.w	pc, [sp], #4

00001094 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1094:	b500      	push	{lr}
    1096:	b085      	sub	sp, #20
    1098:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    109a:	2300      	movs	r3, #0
    109c:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    10a0:	9b01      	ldr	r3, [sp, #4]
    10a2:	681b      	ldr	r3, [r3, #0]
    10a4:	2b00      	cmp	r3, #0
    10a6:	d007      	beq.n	10b8 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    10a8:	9b01      	ldr	r3, [sp, #4]
    10aa:	681b      	ldr	r3, [r3, #0]
    10ac:	4618      	mov	r0, r3
    10ae:	f7ff ff83 	bl	fb8 <Platform_Ipw_InitIntCtrl>
    10b2:	4603      	mov	r3, r0
    10b4:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    10b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    10bc:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    10be:	bf00      	nop
    10c0:	b005      	add	sp, #20
    10c2:	f85d fb04 	ldr.w	pc, [sp], #4

000010c6 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    10c6:	2300      	movs	r3, #0
}
    10c8:	4618      	mov	r0, r3
    10ca:	4770      	bx	lr

000010cc <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    10cc:	b082      	sub	sp, #8
    10ce:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    10d0:	2301      	movs	r3, #1
}
    10d2:	4618      	mov	r0, r3
    10d4:	b002      	add	sp, #8
    10d6:	4770      	bx	lr

000010d8 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    10d8:	b082      	sub	sp, #8
    10da:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    10dc:	bf00      	nop
    10de:	b002      	add	sp, #8
    10e0:	4770      	bx	lr

000010e2 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    10e2:	b082      	sub	sp, #8
    10e4:	9001      	str	r0, [sp, #4]
    return Micros;
    10e6:	9b01      	ldr	r3, [sp, #4]
}
    10e8:	4618      	mov	r0, r3
    10ea:	b002      	add	sp, #8
    10ec:	4770      	bx	lr

000010ee <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    10ee:	b500      	push	{lr}
    10f0:	b083      	sub	sp, #12
    10f2:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    10f4:	f000 f86c 	bl	11d0 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    10f8:	bf00      	nop
    10fa:	b003      	add	sp, #12
    10fc:	f85d fb04 	ldr.w	pc, [sp], #4

00001100 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1100:	b500      	push	{lr}
    1102:	b085      	sub	sp, #20
    1104:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1106:	2300      	movs	r3, #0
    1108:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    110a:	9b01      	ldr	r3, [sp, #4]
    110c:	2b00      	cmp	r3, #0
    110e:	d003      	beq.n	1118 <OsIf_GetCounter+0x18>
    1110:	9b01      	ldr	r3, [sp, #4]
    1112:	2b01      	cmp	r3, #1
    1114:	d004      	beq.n	1120 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1116:	e007      	b.n	1128 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1118:	f7ff ffd5 	bl	10c6 <OsIf_Timer_Dummy_GetCounter>
    111c:	9003      	str	r0, [sp, #12]
            break;
    111e:	e003      	b.n	1128 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1120:	f000 f872 	bl	1208 <OsIf_Timer_System_GetCounter>
    1124:	9003      	str	r0, [sp, #12]
            break;
    1126:	bf00      	nop
    }

    return Value;
    1128:	9b03      	ldr	r3, [sp, #12]
}
    112a:	4618      	mov	r0, r3
    112c:	b005      	add	sp, #20
    112e:	f85d fb04 	ldr.w	pc, [sp], #4

00001132 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1132:	b500      	push	{lr}
    1134:	b085      	sub	sp, #20
    1136:	9001      	str	r0, [sp, #4]
    1138:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    113a:	2300      	movs	r3, #0
    113c:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    113e:	9b00      	ldr	r3, [sp, #0]
    1140:	2b00      	cmp	r3, #0
    1142:	d003      	beq.n	114c <OsIf_GetElapsed+0x1a>
    1144:	9b00      	ldr	r3, [sp, #0]
    1146:	2b01      	cmp	r3, #1
    1148:	d005      	beq.n	1156 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    114a:	e009      	b.n	1160 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    114c:	9801      	ldr	r0, [sp, #4]
    114e:	f7ff ffbd 	bl	10cc <OsIf_Timer_Dummy_GetElapsed>
    1152:	9003      	str	r0, [sp, #12]
            break;
    1154:	e004      	b.n	1160 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1156:	9801      	ldr	r0, [sp, #4]
    1158:	f000 f864 	bl	1224 <OsIf_Timer_System_GetElapsed>
    115c:	9003      	str	r0, [sp, #12]
            break;
    115e:	bf00      	nop
    }

    return Value;
    1160:	9b03      	ldr	r3, [sp, #12]
}
    1162:	4618      	mov	r0, r3
    1164:	b005      	add	sp, #20
    1166:	f85d fb04 	ldr.w	pc, [sp], #4

0000116a <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    116a:	b500      	push	{lr}
    116c:	b083      	sub	sp, #12
    116e:	9001      	str	r0, [sp, #4]
    1170:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1172:	9b00      	ldr	r3, [sp, #0]
    1174:	2b00      	cmp	r3, #0
    1176:	d003      	beq.n	1180 <OsIf_SetTimerFrequency+0x16>
    1178:	9b00      	ldr	r3, [sp, #0]
    117a:	2b01      	cmp	r3, #1
    117c:	d004      	beq.n	1188 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    117e:	e007      	b.n	1190 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1180:	9801      	ldr	r0, [sp, #4]
    1182:	f7ff ffa9 	bl	10d8 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1186:	e003      	b.n	1190 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1188:	9801      	ldr	r0, [sp, #4]
    118a:	f000 f85b 	bl	1244 <OsIf_Timer_System_SetTimerFrequency>
            break;
    118e:	bf00      	nop
    }
}
    1190:	bf00      	nop
    1192:	b003      	add	sp, #12
    1194:	f85d fb04 	ldr.w	pc, [sp], #4

00001198 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1198:	b500      	push	{lr}
    119a:	b085      	sub	sp, #20
    119c:	9001      	str	r0, [sp, #4]
    119e:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    11a0:	2300      	movs	r3, #0
    11a2:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    11a4:	9b00      	ldr	r3, [sp, #0]
    11a6:	2b00      	cmp	r3, #0
    11a8:	d003      	beq.n	11b2 <OsIf_MicrosToTicks+0x1a>
    11aa:	9b00      	ldr	r3, [sp, #0]
    11ac:	2b01      	cmp	r3, #1
    11ae:	d005      	beq.n	11bc <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    11b0:	e009      	b.n	11c6 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    11b2:	9801      	ldr	r0, [sp, #4]
    11b4:	f7ff ff95 	bl	10e2 <OsIf_Timer_Dummy_MicrosToTicks>
    11b8:	9003      	str	r0, [sp, #12]
            break;
    11ba:	e004      	b.n	11c6 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    11bc:	9801      	ldr	r0, [sp, #4]
    11be:	f000 f84f 	bl	1260 <OsIf_Timer_System_MicrosToTicks>
    11c2:	9003      	str	r0, [sp, #12]
            break;
    11c4:	bf00      	nop
    }

    return Value;
    11c6:	9b03      	ldr	r3, [sp, #12]
}
    11c8:	4618      	mov	r0, r3
    11ca:	b005      	add	sp, #20
    11cc:	f85d fb04 	ldr.w	pc, [sp], #4

000011d0 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    11d0:	b500      	push	{lr}
    11d2:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    11d4:	2300      	movs	r3, #0
    11d6:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    11d8:	4a09      	ldr	r2, [pc, #36]	; (1200 <OsIf_Timer_System_Init+0x30>)
    11da:	9b01      	ldr	r3, [sp, #4]
    11dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    11e0:	685a      	ldr	r2, [r3, #4]
    11e2:	4908      	ldr	r1, [pc, #32]	; (1204 <OsIf_Timer_System_Init+0x34>)
    11e4:	9b01      	ldr	r3, [sp, #4]
    11e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    11ea:	4a06      	ldr	r2, [pc, #24]	; (1204 <OsIf_Timer_System_Init+0x34>)
    11ec:	9b01      	ldr	r3, [sp, #4]
    11ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    11f2:	4618      	mov	r0, r3
    11f4:	f000 f868 	bl	12c8 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    11f8:	bf00      	nop
    11fa:	b003      	add	sp, #12
    11fc:	f85d fb04 	ldr.w	pc, [sp], #4
    1200:	0000ef30 	.word	0x0000ef30
    1204:	1fff8b34 	.word	0x1fff8b34

00001208 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1208:	b500      	push	{lr}
    120a:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    120c:	2300      	movs	r3, #0
    120e:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1210:	2300      	movs	r3, #0
    1212:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1214:	f000 f86c 	bl	12f0 <OsIf_Timer_System_Internal_GetCounter>
    1218:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    121a:	9b01      	ldr	r3, [sp, #4]
}
    121c:	4618      	mov	r0, r3
    121e:	b003      	add	sp, #12
    1220:	f85d fb04 	ldr.w	pc, [sp], #4

00001224 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1224:	b500      	push	{lr}
    1226:	b085      	sub	sp, #20
    1228:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    122a:	2300      	movs	r3, #0
    122c:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    122e:	2300      	movs	r3, #0
    1230:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1232:	9801      	ldr	r0, [sp, #4]
    1234:	f000 f864 	bl	1300 <OsIf_Timer_System_Internal_GetElapsed>
    1238:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    123a:	9b03      	ldr	r3, [sp, #12]
}
    123c:	4618      	mov	r0, r3
    123e:	b005      	add	sp, #20
    1240:	f85d fb04 	ldr.w	pc, [sp], #4

00001244 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1244:	b084      	sub	sp, #16
    1246:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1248:	2300      	movs	r3, #0
    124a:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    124c:	4903      	ldr	r1, [pc, #12]	; (125c <OsIf_Timer_System_SetTimerFrequency+0x18>)
    124e:	9b03      	ldr	r3, [sp, #12]
    1250:	9a01      	ldr	r2, [sp, #4]
    1252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1256:	bf00      	nop
    1258:	b004      	add	sp, #16
    125a:	4770      	bx	lr
    125c:	1fff8b34 	.word	0x1fff8b34

00001260 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1260:	b5f0      	push	{r4, r5, r6, r7, lr}
    1262:	b087      	sub	sp, #28
    1264:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1266:	2100      	movs	r1, #0
    1268:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    126a:	2100      	movs	r1, #0
    126c:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    126e:	9901      	ldr	r1, [sp, #4]
    1270:	2000      	movs	r0, #0
    1272:	460e      	mov	r6, r1
    1274:	4607      	mov	r7, r0
    1276:	4812      	ldr	r0, [pc, #72]	; (12c0 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1278:	9904      	ldr	r1, [sp, #16]
    127a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    127e:	2000      	movs	r0, #0
    1280:	460c      	mov	r4, r1
    1282:	4605      	mov	r5, r0
    1284:	fb04 f007 	mul.w	r0, r4, r7
    1288:	fb06 f105 	mul.w	r1, r6, r5
    128c:	4401      	add	r1, r0
    128e:	fba6 2304 	umull	r2, r3, r6, r4
    1292:	4419      	add	r1, r3
    1294:	460b      	mov	r3, r1
    1296:	e9cd 2302 	strd	r2, r3, [sp, #8]
    129a:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    129e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    12a2:	4a08      	ldr	r2, [pc, #32]	; (12c4 <OsIf_Timer_System_MicrosToTicks+0x64>)
    12a4:	f04f 0300 	mov.w	r3, #0
    12a8:	f7ff f97c 	bl	5a4 <__aeabi_uldivmod>
    12ac:	4602      	mov	r2, r0
    12ae:	460b      	mov	r3, r1
    12b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    12b4:	9b02      	ldr	r3, [sp, #8]
    12b6:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    12b8:	9b05      	ldr	r3, [sp, #20]
}
    12ba:	4618      	mov	r0, r3
    12bc:	b007      	add	sp, #28
    12be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12c0:	1fff8b34 	.word	0x1fff8b34
    12c4:	000f4240 	.word	0x000f4240

000012c8 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    12c8:	b082      	sub	sp, #8
    12ca:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    12cc:	4b07      	ldr	r3, [pc, #28]	; (12ec <OsIf_Timer_System_Internal_Init+0x24>)
    12ce:	2200      	movs	r2, #0
    12d0:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    12d2:	4b06      	ldr	r3, [pc, #24]	; (12ec <OsIf_Timer_System_Internal_Init+0x24>)
    12d4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    12d8:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    12da:	4b04      	ldr	r3, [pc, #16]	; (12ec <OsIf_Timer_System_Internal_Init+0x24>)
    12dc:	2200      	movs	r2, #0
    12de:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    12e0:	4b02      	ldr	r3, [pc, #8]	; (12ec <OsIf_Timer_System_Internal_Init+0x24>)
    12e2:	2205      	movs	r2, #5
    12e4:	601a      	str	r2, [r3, #0]
}
    12e6:	bf00      	nop
    12e8:	b002      	add	sp, #8
    12ea:	4770      	bx	lr
    12ec:	e000e010 	.word	0xe000e010

000012f0 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    12f0:	4b02      	ldr	r3, [pc, #8]	; (12fc <OsIf_Timer_System_Internal_GetCounter+0xc>)
    12f2:	689b      	ldr	r3, [r3, #8]
    12f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    12f8:	4618      	mov	r0, r3
    12fa:	4770      	bx	lr
    12fc:	e000e010 	.word	0xe000e010

00001300 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1300:	b084      	sub	sp, #16
    1302:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1304:	4b10      	ldr	r3, [pc, #64]	; (1348 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1306:	689b      	ldr	r3, [r3, #8]
    1308:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    130c:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    130e:	2300      	movs	r3, #0
    1310:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1312:	9b01      	ldr	r3, [sp, #4]
    1314:	681b      	ldr	r3, [r3, #0]
    1316:	9a02      	ldr	r2, [sp, #8]
    1318:	429a      	cmp	r2, r3
    131a:	d909      	bls.n	1330 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    131c:	9b01      	ldr	r3, [sp, #4]
    131e:	681a      	ldr	r2, [r3, #0]
    1320:	9b02      	ldr	r3, [sp, #8]
    1322:	1ad3      	subs	r3, r2, r3
    1324:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1328:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    132c:	9303      	str	r3, [sp, #12]
    132e:	e004      	b.n	133a <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1330:	9b01      	ldr	r3, [sp, #4]
    1332:	681a      	ldr	r2, [r3, #0]
    1334:	9b02      	ldr	r3, [sp, #8]
    1336:	1ad3      	subs	r3, r2, r3
    1338:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    133a:	9b01      	ldr	r3, [sp, #4]
    133c:	9a02      	ldr	r2, [sp, #8]
    133e:	601a      	str	r2, [r3, #0]

    return dif;
    1340:	9b03      	ldr	r3, [sp, #12]
}
    1342:	4618      	mov	r0, r3
    1344:	b004      	add	sp, #16
    1346:	4770      	bx	lr
    1348:	e000e010 	.word	0xe000e010

0000134c <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    134c:	b082      	sub	sp, #8
    134e:	9001      	str	r0, [sp, #4]
    1350:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1352:	bf00      	nop
    1354:	b002      	add	sp, #8
    1356:	4770      	bx	lr

00001358 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1358:	b500      	push	{lr}
    135a:	b085      	sub	sp, #20
    135c:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    135e:	4b24      	ldr	r3, [pc, #144]	; (13f0 <Clock_Ip_UpdateDriverContext+0x98>)
    1360:	2201      	movs	r2, #1
    1362:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1364:	4b23      	ldr	r3, [pc, #140]	; (13f4 <Clock_Ip_UpdateDriverContext+0x9c>)
    1366:	681b      	ldr	r3, [r3, #0]
    1368:	2102      	movs	r1, #2
    136a:	4618      	mov	r0, r3
    136c:	f003 fc32 	bl	4bd4 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1370:	2300      	movs	r3, #0
    1372:	f88d 300f 	strb.w	r3, [sp, #15]
    1376:	e015      	b.n	13a4 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1378:	f89d 300f 	ldrb.w	r3, [sp, #15]
    137c:	9a01      	ldr	r2, [sp, #4]
    137e:	334a      	adds	r3, #74	; 0x4a
    1380:	00db      	lsls	r3, r3, #3
    1382:	4413      	add	r3, r2
    1384:	6858      	ldr	r0, [r3, #4]
    1386:	f89d 300f 	ldrb.w	r3, [sp, #15]
    138a:	9a01      	ldr	r2, [sp, #4]
    138c:	334a      	adds	r3, #74	; 0x4a
    138e:	00db      	lsls	r3, r3, #3
    1390:	4413      	add	r3, r2
    1392:	689b      	ldr	r3, [r3, #8]
    1394:	4619      	mov	r1, r3
    1396:	f001 fadc 	bl	2952 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    139a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    139e:	3301      	adds	r3, #1
    13a0:	f88d 300f 	strb.w	r3, [sp, #15]
    13a4:	9b01      	ldr	r3, [sp, #4]
    13a6:	7bdb      	ldrb	r3, [r3, #15]
    13a8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13ac:	429a      	cmp	r2, r3
    13ae:	d3e3      	bcc.n	1378 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    13b0:	f000 f824 	bl	13fc <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    13b4:	2301      	movs	r3, #1
    13b6:	f88d 300f 	strb.w	r3, [sp, #15]
    13ba:	e00e      	b.n	13da <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    13bc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13c0:	9b01      	ldr	r3, [sp, #4]
    13c2:	327e      	adds	r2, #126	; 0x7e
    13c4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    13c8:	490b      	ldr	r1, [pc, #44]	; (13f8 <Clock_Ip_UpdateDriverContext+0xa0>)
    13ca:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13ce:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    13d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13d4:	3301      	adds	r3, #1
    13d6:	f88d 300f 	strb.w	r3, [sp, #15]
    13da:	9b01      	ldr	r3, [sp, #4]
    13dc:	7cdb      	ldrb	r3, [r3, #19]
    13de:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13e2:	429a      	cmp	r2, r3
    13e4:	d3ea      	bcc.n	13bc <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    13e6:	bf00      	nop
    13e8:	bf00      	nop
    13ea:	b005      	add	sp, #20
    13ec:	f85d fb04 	ldr.w	pc, [sp], #4
    13f0:	1fff8b18 	.word	0x1fff8b18
    13f4:	1fff8b38 	.word	0x1fff8b38
    13f8:	1fff8b44 	.word	0x1fff8b44

000013fc <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    13fc:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    13fe:	4b23      	ldr	r3, [pc, #140]	; (148c <Clock_Ip_CallEmptyCallbacks+0x90>)
    1400:	781b      	ldrb	r3, [r3, #0]
    1402:	f083 0301 	eor.w	r3, r3, #1
    1406:	b2db      	uxtb	r3, r3
    1408:	2b00      	cmp	r3, #0
    140a:	d03d      	beq.n	1488 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    140c:	4b1f      	ldr	r3, [pc, #124]	; (148c <Clock_Ip_CallEmptyCallbacks+0x90>)
    140e:	2201      	movs	r2, #1
    1410:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1412:	4b1f      	ldr	r3, [pc, #124]	; (1490 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1414:	685b      	ldr	r3, [r3, #4]
    1416:	2100      	movs	r1, #0
    1418:	2000      	movs	r0, #0
    141a:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    141c:	4b1c      	ldr	r3, [pc, #112]	; (1490 <Clock_Ip_CallEmptyCallbacks+0x94>)
    141e:	689b      	ldr	r3, [r3, #8]
    1420:	2057      	movs	r0, #87	; 0x57
    1422:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1424:	4b1b      	ldr	r3, [pc, #108]	; (1494 <Clock_Ip_CallEmptyCallbacks+0x98>)
    1426:	681b      	ldr	r3, [r3, #0]
    1428:	2000      	movs	r0, #0
    142a:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    142c:	4b1a      	ldr	r3, [pc, #104]	; (1498 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    142e:	681b      	ldr	r3, [r3, #0]
    1430:	2000      	movs	r0, #0
    1432:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1434:	4b19      	ldr	r3, [pc, #100]	; (149c <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1436:	681b      	ldr	r3, [r3, #0]
    1438:	2000      	movs	r0, #0
    143a:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    143c:	4b18      	ldr	r3, [pc, #96]	; (14a0 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    143e:	685b      	ldr	r3, [r3, #4]
    1440:	2000      	movs	r0, #0
    1442:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1444:	4b16      	ldr	r3, [pc, #88]	; (14a0 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1446:	689b      	ldr	r3, [r3, #8]
    1448:	2057      	movs	r0, #87	; 0x57
    144a:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    144c:	4b15      	ldr	r3, [pc, #84]	; (14a4 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    144e:	681b      	ldr	r3, [r3, #0]
    1450:	2000      	movs	r0, #0
    1452:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1454:	4b13      	ldr	r3, [pc, #76]	; (14a4 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1456:	685b      	ldr	r3, [r3, #4]
    1458:	2100      	movs	r1, #0
    145a:	2057      	movs	r0, #87	; 0x57
    145c:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    145e:	4b12      	ldr	r3, [pc, #72]	; (14a8 <Clock_Ip_CallEmptyCallbacks+0xac>)
    1460:	681b      	ldr	r3, [r3, #0]
    1462:	2000      	movs	r0, #0
    1464:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1466:	4b11      	ldr	r3, [pc, #68]	; (14ac <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1468:	685b      	ldr	r3, [r3, #4]
    146a:	2000      	movs	r0, #0
    146c:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    146e:	4b0f      	ldr	r3, [pc, #60]	; (14ac <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1470:	689b      	ldr	r3, [r3, #8]
    1472:	2057      	movs	r0, #87	; 0x57
    1474:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1476:	4b0e      	ldr	r3, [pc, #56]	; (14b0 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1478:	685b      	ldr	r3, [r3, #4]
    147a:	2000      	movs	r0, #0
    147c:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    147e:	4b0d      	ldr	r3, [pc, #52]	; (14b4 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1480:	681b      	ldr	r3, [r3, #0]
    1482:	2100      	movs	r1, #0
    1484:	2000      	movs	r0, #0
    1486:	4798      	blx	r3
    }
}
    1488:	bf00      	nop
    148a:	bd08      	pop	{r3, pc}
    148c:	1fff8b3c 	.word	0x1fff8b3c
    1490:	0000e7e0 	.word	0x0000e7e0
    1494:	0000e6f4 	.word	0x0000e6f4
    1498:	0000e730 	.word	0x0000e730
    149c:	0000e738 	.word	0x0000e738
    14a0:	0000e760 	.word	0x0000e760
    14a4:	0000e76c 	.word	0x0000e76c
    14a8:	0000e7a4 	.word	0x0000e7a4
    14ac:	0000e7f0 	.word	0x0000e7f0
    14b0:	0000e81c 	.word	0x0000e81c
    14b4:	0000e818 	.word	0x0000e818

000014b8 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    14b8:	b500      	push	{lr}
    14ba:	b085      	sub	sp, #20
    14bc:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    14be:	9b01      	ldr	r3, [sp, #4]
    14c0:	7adb      	ldrb	r3, [r3, #11]
    14c2:	9303      	str	r3, [sp, #12]
    14c4:	e01f      	b.n	1506 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    14c6:	9b03      	ldr	r3, [sp, #12]
    14c8:	1e5a      	subs	r2, r3, #1
    14ca:	9b01      	ldr	r3, [sp, #4]
    14cc:	320d      	adds	r2, #13
    14ce:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    14d2:	495a      	ldr	r1, [pc, #360]	; (163c <Clock_Ip_ResetClockConfiguration+0x184>)
    14d4:	4613      	mov	r3, r2
    14d6:	00db      	lsls	r3, r3, #3
    14d8:	4413      	add	r3, r2
    14da:	440b      	add	r3, r1
    14dc:	3301      	adds	r3, #1
    14de:	781b      	ldrb	r3, [r3, #0]
    14e0:	461a      	mov	r2, r3
    14e2:	4b57      	ldr	r3, [pc, #348]	; (1640 <Clock_Ip_ResetClockConfiguration+0x188>)
    14e4:	5c9b      	ldrb	r3, [r3, r2]
    14e6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    14e8:	4a56      	ldr	r2, [pc, #344]	; (1644 <Clock_Ip_ResetClockConfiguration+0x18c>)
    14ea:	9b02      	ldr	r3, [sp, #8]
    14ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    14f0:	9a03      	ldr	r2, [sp, #12]
    14f2:	3a01      	subs	r2, #1
    14f4:	320d      	adds	r2, #13
    14f6:	00d2      	lsls	r2, r2, #3
    14f8:	9901      	ldr	r1, [sp, #4]
    14fa:	440a      	add	r2, r1
    14fc:	4610      	mov	r0, r2
    14fe:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1500:	9b03      	ldr	r3, [sp, #12]
    1502:	3b01      	subs	r3, #1
    1504:	9303      	str	r3, [sp, #12]
    1506:	9b03      	ldr	r3, [sp, #12]
    1508:	2b00      	cmp	r3, #0
    150a:	d1dc      	bne.n	14c6 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    150c:	9b01      	ldr	r3, [sp, #4]
    150e:	7b9b      	ldrb	r3, [r3, #14]
    1510:	9303      	str	r3, [sp, #12]
    1512:	e026      	b.n	1562 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1514:	9b03      	ldr	r3, [sp, #12]
    1516:	3b01      	subs	r3, #1
    1518:	9a01      	ldr	r2, [sp, #4]
    151a:	3324      	adds	r3, #36	; 0x24
    151c:	011b      	lsls	r3, r3, #4
    151e:	4413      	add	r3, r2
    1520:	3304      	adds	r3, #4
    1522:	681a      	ldr	r2, [r3, #0]
    1524:	4945      	ldr	r1, [pc, #276]	; (163c <Clock_Ip_ResetClockConfiguration+0x184>)
    1526:	4613      	mov	r3, r2
    1528:	00db      	lsls	r3, r3, #3
    152a:	4413      	add	r3, r2
    152c:	440b      	add	r3, r1
    152e:	3301      	adds	r3, #1
    1530:	781b      	ldrb	r3, [r3, #0]
    1532:	461a      	mov	r2, r3
    1534:	4b44      	ldr	r3, [pc, #272]	; (1648 <Clock_Ip_ResetClockConfiguration+0x190>)
    1536:	5c9b      	ldrb	r3, [r3, r2]
    1538:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    153a:	4944      	ldr	r1, [pc, #272]	; (164c <Clock_Ip_ResetClockConfiguration+0x194>)
    153c:	9a02      	ldr	r2, [sp, #8]
    153e:	4613      	mov	r3, r2
    1540:	005b      	lsls	r3, r3, #1
    1542:	4413      	add	r3, r2
    1544:	009b      	lsls	r3, r3, #2
    1546:	440b      	add	r3, r1
    1548:	681b      	ldr	r3, [r3, #0]
    154a:	9a03      	ldr	r2, [sp, #12]
    154c:	3a01      	subs	r2, #1
    154e:	3224      	adds	r2, #36	; 0x24
    1550:	0112      	lsls	r2, r2, #4
    1552:	9901      	ldr	r1, [sp, #4]
    1554:	440a      	add	r2, r1
    1556:	3204      	adds	r2, #4
    1558:	4610      	mov	r0, r2
    155a:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    155c:	9b03      	ldr	r3, [sp, #12]
    155e:	3b01      	subs	r3, #1
    1560:	9303      	str	r3, [sp, #12]
    1562:	9b03      	ldr	r3, [sp, #12]
    1564:	2b00      	cmp	r3, #0
    1566:	d1d5      	bne.n	1514 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1568:	9b01      	ldr	r3, [sp, #4]
    156a:	7a9b      	ldrb	r3, [r3, #10]
    156c:	9303      	str	r3, [sp, #12]
    156e:	e02a      	b.n	15c6 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1570:	9b03      	ldr	r3, [sp, #12]
    1572:	1e5a      	subs	r2, r3, #1
    1574:	9901      	ldr	r1, [sp, #4]
    1576:	4613      	mov	r3, r2
    1578:	009b      	lsls	r3, r3, #2
    157a:	4413      	add	r3, r2
    157c:	00db      	lsls	r3, r3, #3
    157e:	440b      	add	r3, r1
    1580:	3340      	adds	r3, #64	; 0x40
    1582:	681a      	ldr	r2, [r3, #0]
    1584:	492d      	ldr	r1, [pc, #180]	; (163c <Clock_Ip_ResetClockConfiguration+0x184>)
    1586:	4613      	mov	r3, r2
    1588:	00db      	lsls	r3, r3, #3
    158a:	4413      	add	r3, r2
    158c:	440b      	add	r3, r1
    158e:	3301      	adds	r3, #1
    1590:	781b      	ldrb	r3, [r3, #0]
    1592:	461a      	mov	r2, r3
    1594:	4b2e      	ldr	r3, [pc, #184]	; (1650 <Clock_Ip_ResetClockConfiguration+0x198>)
    1596:	5c9b      	ldrb	r3, [r3, r2]
    1598:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    159a:	492e      	ldr	r1, [pc, #184]	; (1654 <Clock_Ip_ResetClockConfiguration+0x19c>)
    159c:	9a02      	ldr	r2, [sp, #8]
    159e:	4613      	mov	r3, r2
    15a0:	009b      	lsls	r3, r3, #2
    15a2:	4413      	add	r3, r2
    15a4:	009b      	lsls	r3, r3, #2
    15a6:	440b      	add	r3, r1
    15a8:	6819      	ldr	r1, [r3, #0]
    15aa:	9b03      	ldr	r3, [sp, #12]
    15ac:	1e5a      	subs	r2, r3, #1
    15ae:	4613      	mov	r3, r2
    15b0:	009b      	lsls	r3, r3, #2
    15b2:	4413      	add	r3, r2
    15b4:	00db      	lsls	r3, r3, #3
    15b6:	3340      	adds	r3, #64	; 0x40
    15b8:	9a01      	ldr	r2, [sp, #4]
    15ba:	4413      	add	r3, r2
    15bc:	4618      	mov	r0, r3
    15be:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    15c0:	9b03      	ldr	r3, [sp, #12]
    15c2:	3b01      	subs	r3, #1
    15c4:	9303      	str	r3, [sp, #12]
    15c6:	9b03      	ldr	r3, [sp, #12]
    15c8:	2b00      	cmp	r3, #0
    15ca:	d1d1      	bne.n	1570 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    15cc:	9b01      	ldr	r3, [sp, #4]
    15ce:	7a5b      	ldrb	r3, [r3, #9]
    15d0:	9303      	str	r3, [sp, #12]
    15d2:	e02b      	b.n	162c <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    15d4:	9b03      	ldr	r3, [sp, #12]
    15d6:	1e5a      	subs	r2, r3, #1
    15d8:	9901      	ldr	r1, [sp, #4]
    15da:	4613      	mov	r3, r2
    15dc:	009b      	lsls	r3, r3, #2
    15de:	4413      	add	r3, r2
    15e0:	009b      	lsls	r3, r3, #2
    15e2:	440b      	add	r3, r1
    15e4:	332c      	adds	r3, #44	; 0x2c
    15e6:	681a      	ldr	r2, [r3, #0]
    15e8:	4914      	ldr	r1, [pc, #80]	; (163c <Clock_Ip_ResetClockConfiguration+0x184>)
    15ea:	4613      	mov	r3, r2
    15ec:	00db      	lsls	r3, r3, #3
    15ee:	4413      	add	r3, r2
    15f0:	440b      	add	r3, r1
    15f2:	3301      	adds	r3, #1
    15f4:	781b      	ldrb	r3, [r3, #0]
    15f6:	461a      	mov	r2, r3
    15f8:	4b17      	ldr	r3, [pc, #92]	; (1658 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    15fa:	5c9b      	ldrb	r3, [r3, r2]
    15fc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    15fe:	4917      	ldr	r1, [pc, #92]	; (165c <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1600:	9a02      	ldr	r2, [sp, #8]
    1602:	4613      	mov	r3, r2
    1604:	009b      	lsls	r3, r3, #2
    1606:	4413      	add	r3, r2
    1608:	009b      	lsls	r3, r3, #2
    160a:	440b      	add	r3, r1
    160c:	6819      	ldr	r1, [r3, #0]
    160e:	9b03      	ldr	r3, [sp, #12]
    1610:	1e5a      	subs	r2, r3, #1
    1612:	4613      	mov	r3, r2
    1614:	009b      	lsls	r3, r3, #2
    1616:	4413      	add	r3, r2
    1618:	009b      	lsls	r3, r3, #2
    161a:	3328      	adds	r3, #40	; 0x28
    161c:	9a01      	ldr	r2, [sp, #4]
    161e:	4413      	add	r3, r2
    1620:	3304      	adds	r3, #4
    1622:	4618      	mov	r0, r3
    1624:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1626:	9b03      	ldr	r3, [sp, #12]
    1628:	3b01      	subs	r3, #1
    162a:	9303      	str	r3, [sp, #12]
    162c:	9b03      	ldr	r3, [sp, #12]
    162e:	2b00      	cmp	r3, #0
    1630:	d1d0      	bne.n	15d4 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    1632:	bf00      	nop
    1634:	bf00      	nop
    1636:	b005      	add	sp, #20
    1638:	f85d fb04 	ldr.w	pc, [sp], #4
    163c:	0000e1e4 	.word	0x0000e1e4
    1640:	0000e1b4 	.word	0x0000e1b4
    1644:	0000e81c 	.word	0x0000e81c
    1648:	0000e194 	.word	0x0000e194
    164c:	0000e760 	.word	0x0000e760
    1650:	0000e1a4 	.word	0x0000e1a4
    1654:	0000e7f0 	.word	0x0000e7f0
    1658:	0000e164 	.word	0x0000e164
    165c:	0000e738 	.word	0x0000e738

00001660 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    1660:	b500      	push	{lr}
    1662:	b085      	sub	sp, #20
    1664:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    1666:	2301      	movs	r3, #1
    1668:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    166a:	9801      	ldr	r0, [sp, #4]
    166c:	f000 f818 	bl	16a0 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    1670:	4b0a      	ldr	r3, [pc, #40]	; (169c <Clock_Ip_Init+0x3c>)
    1672:	781b      	ldrb	r3, [r3, #0]
    1674:	2b00      	cmp	r3, #0
    1676:	d00a      	beq.n	168e <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    1678:	f000 fb74 	bl	1d64 <Clock_Ip_GetPllStatus>
    167c:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    167e:	9b02      	ldr	r3, [sp, #8]
    1680:	2b00      	cmp	r3, #0
    1682:	d106      	bne.n	1692 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    1684:	f000 fbf2 	bl	1e6c <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    1688:	2300      	movs	r3, #0
    168a:	9303      	str	r3, [sp, #12]
    168c:	e001      	b.n	1692 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    168e:	2300      	movs	r3, #0
    1690:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    1692:	9b03      	ldr	r3, [sp, #12]
}
    1694:	4618      	mov	r0, r3
    1696:	b005      	add	sp, #20
    1698:	f85d fb04 	ldr.w	pc, [sp], #4
    169c:	1fff8b40 	.word	0x1fff8b40

000016a0 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    16a0:	b510      	push	{r4, lr}
    16a2:	b084      	sub	sp, #16
    16a4:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    16a6:	4a9f      	ldr	r2, [pc, #636]	; (1924 <Clock_Ip_InitClock+0x284>)
    16a8:	9b01      	ldr	r3, [sp, #4]
    16aa:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    16ac:	2101      	movs	r1, #1
    16ae:	9801      	ldr	r0, [sp, #4]
    16b0:	f003 fa90 	bl	4bd4 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    16b4:	4b9b      	ldr	r3, [pc, #620]	; (1924 <Clock_Ip_InitClock+0x284>)
    16b6:	681b      	ldr	r3, [r3, #0]
    16b8:	2b00      	cmp	r3, #0
    16ba:	d030      	beq.n	171e <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    16bc:	2300      	movs	r3, #0
    16be:	9303      	str	r3, [sp, #12]
    16c0:	e027      	b.n	1712 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    16c2:	9901      	ldr	r1, [sp, #4]
    16c4:	9a03      	ldr	r2, [sp, #12]
    16c6:	4613      	mov	r3, r2
    16c8:	009b      	lsls	r3, r3, #2
    16ca:	4413      	add	r3, r2
    16cc:	009b      	lsls	r3, r3, #2
    16ce:	440b      	add	r3, r1
    16d0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    16d4:	681a      	ldr	r2, [r3, #0]
    16d6:	4994      	ldr	r1, [pc, #592]	; (1928 <Clock_Ip_InitClock+0x288>)
    16d8:	4613      	mov	r3, r2
    16da:	00db      	lsls	r3, r3, #3
    16dc:	4413      	add	r3, r2
    16de:	440b      	add	r3, r1
    16e0:	3301      	adds	r3, #1
    16e2:	781b      	ldrb	r3, [r3, #0]
    16e4:	461a      	mov	r2, r3
    16e6:	4b91      	ldr	r3, [pc, #580]	; (192c <Clock_Ip_InitClock+0x28c>)
    16e8:	5c9b      	ldrb	r3, [r3, r2]
    16ea:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    16ec:	4a90      	ldr	r2, [pc, #576]	; (1930 <Clock_Ip_InitClock+0x290>)
    16ee:	9b02      	ldr	r3, [sp, #8]
    16f0:	011b      	lsls	r3, r3, #4
    16f2:	4413      	add	r3, r2
    16f4:	6819      	ldr	r1, [r3, #0]
    16f6:	9a03      	ldr	r2, [sp, #12]
    16f8:	4613      	mov	r3, r2
    16fa:	009b      	lsls	r3, r3, #2
    16fc:	4413      	add	r3, r2
    16fe:	009b      	lsls	r3, r3, #2
    1700:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1704:	9a01      	ldr	r2, [sp, #4]
    1706:	4413      	add	r3, r2
    1708:	4618      	mov	r0, r3
    170a:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    170c:	9b03      	ldr	r3, [sp, #12]
    170e:	3301      	adds	r3, #1
    1710:	9303      	str	r3, [sp, #12]
    1712:	9b01      	ldr	r3, [sp, #4]
    1714:	7c9b      	ldrb	r3, [r3, #18]
    1716:	461a      	mov	r2, r3
    1718:	9b03      	ldr	r3, [sp, #12]
    171a:	4293      	cmp	r3, r2
    171c:	d3d1      	bcc.n	16c2 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    171e:	9801      	ldr	r0, [sp, #4]
    1720:	f7ff feca 	bl	14b8 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1724:	2300      	movs	r3, #0
    1726:	9303      	str	r3, [sp, #12]
    1728:	e029      	b.n	177e <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    172a:	9901      	ldr	r1, [sp, #4]
    172c:	9a03      	ldr	r2, [sp, #12]
    172e:	4613      	mov	r3, r2
    1730:	005b      	lsls	r3, r3, #1
    1732:	4413      	add	r3, r2
    1734:	009b      	lsls	r3, r3, #2
    1736:	440b      	add	r3, r1
    1738:	3314      	adds	r3, #20
    173a:	681a      	ldr	r2, [r3, #0]
    173c:	497a      	ldr	r1, [pc, #488]	; (1928 <Clock_Ip_InitClock+0x288>)
    173e:	4613      	mov	r3, r2
    1740:	00db      	lsls	r3, r3, #3
    1742:	4413      	add	r3, r2
    1744:	440b      	add	r3, r1
    1746:	3301      	adds	r3, #1
    1748:	781b      	ldrb	r3, [r3, #0]
    174a:	461a      	mov	r2, r3
    174c:	4b79      	ldr	r3, [pc, #484]	; (1934 <Clock_Ip_InitClock+0x294>)
    174e:	5c9b      	ldrb	r3, [r3, r2]
    1750:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    1752:	4979      	ldr	r1, [pc, #484]	; (1938 <Clock_Ip_InitClock+0x298>)
    1754:	9a02      	ldr	r2, [sp, #8]
    1756:	4613      	mov	r3, r2
    1758:	005b      	lsls	r3, r3, #1
    175a:	4413      	add	r3, r2
    175c:	009b      	lsls	r3, r3, #2
    175e:	440b      	add	r3, r1
    1760:	6819      	ldr	r1, [r3, #0]
    1762:	9a03      	ldr	r2, [sp, #12]
    1764:	4613      	mov	r3, r2
    1766:	005b      	lsls	r3, r3, #1
    1768:	4413      	add	r3, r2
    176a:	009b      	lsls	r3, r3, #2
    176c:	3310      	adds	r3, #16
    176e:	9a01      	ldr	r2, [sp, #4]
    1770:	4413      	add	r3, r2
    1772:	3304      	adds	r3, #4
    1774:	4618      	mov	r0, r3
    1776:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1778:	9b03      	ldr	r3, [sp, #12]
    177a:	3301      	adds	r3, #1
    177c:	9303      	str	r3, [sp, #12]
    177e:	9b01      	ldr	r3, [sp, #4]
    1780:	7a1b      	ldrb	r3, [r3, #8]
    1782:	461a      	mov	r2, r3
    1784:	9b03      	ldr	r3, [sp, #12]
    1786:	4293      	cmp	r3, r2
    1788:	d3cf      	bcc.n	172a <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    178a:	2300      	movs	r3, #0
    178c:	9303      	str	r3, [sp, #12]
    178e:	e02a      	b.n	17e6 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1790:	9901      	ldr	r1, [sp, #4]
    1792:	9a03      	ldr	r2, [sp, #12]
    1794:	4613      	mov	r3, r2
    1796:	009b      	lsls	r3, r3, #2
    1798:	4413      	add	r3, r2
    179a:	009b      	lsls	r3, r3, #2
    179c:	440b      	add	r3, r1
    179e:	332c      	adds	r3, #44	; 0x2c
    17a0:	681a      	ldr	r2, [r3, #0]
    17a2:	4961      	ldr	r1, [pc, #388]	; (1928 <Clock_Ip_InitClock+0x288>)
    17a4:	4613      	mov	r3, r2
    17a6:	00db      	lsls	r3, r3, #3
    17a8:	4413      	add	r3, r2
    17aa:	440b      	add	r3, r1
    17ac:	3301      	adds	r3, #1
    17ae:	781b      	ldrb	r3, [r3, #0]
    17b0:	461a      	mov	r2, r3
    17b2:	4b62      	ldr	r3, [pc, #392]	; (193c <Clock_Ip_InitClock+0x29c>)
    17b4:	5c9b      	ldrb	r3, [r3, r2]
    17b6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    17b8:	4961      	ldr	r1, [pc, #388]	; (1940 <Clock_Ip_InitClock+0x2a0>)
    17ba:	9a02      	ldr	r2, [sp, #8]
    17bc:	4613      	mov	r3, r2
    17be:	009b      	lsls	r3, r3, #2
    17c0:	4413      	add	r3, r2
    17c2:	009b      	lsls	r3, r3, #2
    17c4:	440b      	add	r3, r1
    17c6:	3304      	adds	r3, #4
    17c8:	6819      	ldr	r1, [r3, #0]
    17ca:	9a03      	ldr	r2, [sp, #12]
    17cc:	4613      	mov	r3, r2
    17ce:	009b      	lsls	r3, r3, #2
    17d0:	4413      	add	r3, r2
    17d2:	009b      	lsls	r3, r3, #2
    17d4:	3328      	adds	r3, #40	; 0x28
    17d6:	9a01      	ldr	r2, [sp, #4]
    17d8:	4413      	add	r3, r2
    17da:	3304      	adds	r3, #4
    17dc:	4618      	mov	r0, r3
    17de:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    17e0:	9b03      	ldr	r3, [sp, #12]
    17e2:	3301      	adds	r3, #1
    17e4:	9303      	str	r3, [sp, #12]
    17e6:	9b01      	ldr	r3, [sp, #4]
    17e8:	7a5b      	ldrb	r3, [r3, #9]
    17ea:	461a      	mov	r2, r3
    17ec:	9b03      	ldr	r3, [sp, #12]
    17ee:	4293      	cmp	r3, r2
    17f0:	d3ce      	bcc.n	1790 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    17f2:	9801      	ldr	r0, [sp, #4]
    17f4:	f7ff fdb0 	bl	1358 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    17f8:	2300      	movs	r3, #0
    17fa:	9303      	str	r3, [sp, #12]
    17fc:	e028      	b.n	1850 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    17fe:	9901      	ldr	r1, [sp, #4]
    1800:	9a03      	ldr	r2, [sp, #12]
    1802:	4613      	mov	r3, r2
    1804:	009b      	lsls	r3, r3, #2
    1806:	4413      	add	r3, r2
    1808:	009b      	lsls	r3, r3, #2
    180a:	440b      	add	r3, r1
    180c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1810:	681a      	ldr	r2, [r3, #0]
    1812:	4945      	ldr	r1, [pc, #276]	; (1928 <Clock_Ip_InitClock+0x288>)
    1814:	4613      	mov	r3, r2
    1816:	00db      	lsls	r3, r3, #3
    1818:	4413      	add	r3, r2
    181a:	440b      	add	r3, r1
    181c:	3301      	adds	r3, #1
    181e:	781b      	ldrb	r3, [r3, #0]
    1820:	461a      	mov	r2, r3
    1822:	4b48      	ldr	r3, [pc, #288]	; (1944 <Clock_Ip_InitClock+0x2a4>)
    1824:	5c9b      	ldrb	r3, [r3, r2]
    1826:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    1828:	4a47      	ldr	r2, [pc, #284]	; (1948 <Clock_Ip_InitClock+0x2a8>)
    182a:	9b02      	ldr	r3, [sp, #8]
    182c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1830:	9a03      	ldr	r2, [sp, #12]
    1832:	4613      	mov	r3, r2
    1834:	009b      	lsls	r3, r3, #2
    1836:	4413      	add	r3, r2
    1838:	009b      	lsls	r3, r3, #2
    183a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    183e:	9a01      	ldr	r2, [sp, #4]
    1840:	4413      	add	r3, r2
    1842:	3304      	adds	r3, #4
    1844:	9903      	ldr	r1, [sp, #12]
    1846:	4618      	mov	r0, r3
    1848:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    184a:	9b03      	ldr	r3, [sp, #12]
    184c:	3301      	adds	r3, #1
    184e:	9303      	str	r3, [sp, #12]
    1850:	9b01      	ldr	r3, [sp, #4]
    1852:	7c5b      	ldrb	r3, [r3, #17]
    1854:	461a      	mov	r2, r3
    1856:	9b03      	ldr	r3, [sp, #12]
    1858:	4293      	cmp	r3, r2
    185a:	d3d0      	bcc.n	17fe <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    185c:	2300      	movs	r3, #0
    185e:	9303      	str	r3, [sp, #12]
    1860:	e026      	b.n	18b0 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1862:	9901      	ldr	r1, [sp, #4]
    1864:	9a03      	ldr	r2, [sp, #12]
    1866:	4613      	mov	r3, r2
    1868:	005b      	lsls	r3, r3, #1
    186a:	4413      	add	r3, r2
    186c:	009b      	lsls	r3, r3, #2
    186e:	440b      	add	r3, r1
    1870:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1874:	681a      	ldr	r2, [r3, #0]
    1876:	492c      	ldr	r1, [pc, #176]	; (1928 <Clock_Ip_InitClock+0x288>)
    1878:	4613      	mov	r3, r2
    187a:	00db      	lsls	r3, r3, #3
    187c:	4413      	add	r3, r2
    187e:	440b      	add	r3, r1
    1880:	3301      	adds	r3, #1
    1882:	781b      	ldrb	r3, [r3, #0]
    1884:	461a      	mov	r2, r3
    1886:	4b31      	ldr	r3, [pc, #196]	; (194c <Clock_Ip_InitClock+0x2ac>)
    1888:	5c9b      	ldrb	r3, [r3, r2]
    188a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    188c:	4a30      	ldr	r2, [pc, #192]	; (1950 <Clock_Ip_InitClock+0x2b0>)
    188e:	9b02      	ldr	r3, [sp, #8]
    1890:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    1894:	9a03      	ldr	r2, [sp, #12]
    1896:	4613      	mov	r3, r2
    1898:	005b      	lsls	r3, r3, #1
    189a:	4413      	add	r3, r2
    189c:	009b      	lsls	r3, r3, #2
    189e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    18a2:	9a01      	ldr	r2, [sp, #4]
    18a4:	4413      	add	r3, r2
    18a6:	4618      	mov	r0, r3
    18a8:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    18aa:	9b03      	ldr	r3, [sp, #12]
    18ac:	3301      	adds	r3, #1
    18ae:	9303      	str	r3, [sp, #12]
    18b0:	9b01      	ldr	r3, [sp, #4]
    18b2:	7b5b      	ldrb	r3, [r3, #13]
    18b4:	461a      	mov	r2, r3
    18b6:	9b03      	ldr	r3, [sp, #12]
    18b8:	4293      	cmp	r3, r2
    18ba:	d3d2      	bcc.n	1862 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    18bc:	2300      	movs	r3, #0
    18be:	9303      	str	r3, [sp, #12]
    18c0:	e026      	b.n	1910 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    18c2:	9901      	ldr	r1, [sp, #4]
    18c4:	9a03      	ldr	r2, [sp, #12]
    18c6:	4613      	mov	r3, r2
    18c8:	005b      	lsls	r3, r3, #1
    18ca:	4413      	add	r3, r2
    18cc:	009b      	lsls	r3, r3, #2
    18ce:	440b      	add	r3, r1
    18d0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    18d4:	681a      	ldr	r2, [r3, #0]
    18d6:	4914      	ldr	r1, [pc, #80]	; (1928 <Clock_Ip_InitClock+0x288>)
    18d8:	4613      	mov	r3, r2
    18da:	00db      	lsls	r3, r3, #3
    18dc:	4413      	add	r3, r2
    18de:	440b      	add	r3, r1
    18e0:	3301      	adds	r3, #1
    18e2:	781b      	ldrb	r3, [r3, #0]
    18e4:	461a      	mov	r2, r3
    18e6:	4b1b      	ldr	r3, [pc, #108]	; (1954 <Clock_Ip_InitClock+0x2b4>)
    18e8:	5c9b      	ldrb	r3, [r3, r2]
    18ea:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    18ec:	4a1a      	ldr	r2, [pc, #104]	; (1958 <Clock_Ip_InitClock+0x2b8>)
    18ee:	9b02      	ldr	r3, [sp, #8]
    18f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    18f4:	9a03      	ldr	r2, [sp, #12]
    18f6:	4613      	mov	r3, r2
    18f8:	005b      	lsls	r3, r3, #1
    18fa:	4413      	add	r3, r2
    18fc:	009b      	lsls	r3, r3, #2
    18fe:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1902:	9a01      	ldr	r2, [sp, #4]
    1904:	4413      	add	r3, r2
    1906:	4618      	mov	r0, r3
    1908:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    190a:	9b03      	ldr	r3, [sp, #12]
    190c:	3301      	adds	r3, #1
    190e:	9303      	str	r3, [sp, #12]
    1910:	9b01      	ldr	r3, [sp, #4]
    1912:	7b1b      	ldrb	r3, [r3, #12]
    1914:	461a      	mov	r2, r3
    1916:	9b03      	ldr	r3, [sp, #12]
    1918:	4293      	cmp	r3, r2
    191a:	d3d2      	bcc.n	18c2 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    191c:	2300      	movs	r3, #0
    191e:	9303      	str	r3, [sp, #12]
    1920:	e044      	b.n	19ac <Clock_Ip_InitClock+0x30c>
    1922:	bf00      	nop
    1924:	1fff8b38 	.word	0x1fff8b38
    1928:	0000e1e4 	.word	0x0000e1e4
    192c:	0000e1d4 	.word	0x0000e1d4
    1930:	0000e7e0 	.word	0x0000e7e0
    1934:	0000e174 	.word	0x0000e174
    1938:	0000e7a4 	.word	0x0000e7a4
    193c:	0000e164 	.word	0x0000e164
    1940:	0000e738 	.word	0x0000e738
    1944:	0000e1c4 	.word	0x0000e1c4
    1948:	0000e818 	.word	0x0000e818
    194c:	0000e154 	.word	0x0000e154
    1950:	0000e730 	.word	0x0000e730
    1954:	0000e144 	.word	0x0000e144
    1958:	0000e6f4 	.word	0x0000e6f4
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    195c:	9901      	ldr	r1, [sp, #4]
    195e:	9a03      	ldr	r2, [sp, #12]
    1960:	4613      	mov	r3, r2
    1962:	005b      	lsls	r3, r3, #1
    1964:	4413      	add	r3, r2
    1966:	009b      	lsls	r3, r3, #2
    1968:	440b      	add	r3, r1
    196a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    196e:	681a      	ldr	r2, [r3, #0]
    1970:	49ac      	ldr	r1, [pc, #688]	; (1c24 <Clock_Ip_InitClock+0x584>)
    1972:	4613      	mov	r3, r2
    1974:	00db      	lsls	r3, r3, #3
    1976:	4413      	add	r3, r2
    1978:	440b      	add	r3, r1
    197a:	3301      	adds	r3, #1
    197c:	781b      	ldrb	r3, [r3, #0]
    197e:	461a      	mov	r2, r3
    1980:	4ba9      	ldr	r3, [pc, #676]	; (1c28 <Clock_Ip_InitClock+0x588>)
    1982:	5c9b      	ldrb	r3, [r3, r2]
    1984:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    1986:	4aa9      	ldr	r2, [pc, #676]	; (1c2c <Clock_Ip_InitClock+0x58c>)
    1988:	9b02      	ldr	r3, [sp, #8]
    198a:	00db      	lsls	r3, r3, #3
    198c:	4413      	add	r3, r2
    198e:	6859      	ldr	r1, [r3, #4]
    1990:	9a03      	ldr	r2, [sp, #12]
    1992:	4613      	mov	r3, r2
    1994:	005b      	lsls	r3, r3, #1
    1996:	4413      	add	r3, r2
    1998:	009b      	lsls	r3, r3, #2
    199a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    199e:	9a01      	ldr	r2, [sp, #4]
    19a0:	4413      	add	r3, r2
    19a2:	4618      	mov	r0, r3
    19a4:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    19a6:	9b03      	ldr	r3, [sp, #12]
    19a8:	3301      	adds	r3, #1
    19aa:	9303      	str	r3, [sp, #12]
    19ac:	9b01      	ldr	r3, [sp, #4]
    19ae:	7b5b      	ldrb	r3, [r3, #13]
    19b0:	461a      	mov	r2, r3
    19b2:	9b03      	ldr	r3, [sp, #12]
    19b4:	4293      	cmp	r3, r2
    19b6:	d3d1      	bcc.n	195c <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    19b8:	2300      	movs	r3, #0
    19ba:	9303      	str	r3, [sp, #12]
    19bc:	e029      	b.n	1a12 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    19be:	9901      	ldr	r1, [sp, #4]
    19c0:	9a03      	ldr	r2, [sp, #12]
    19c2:	4613      	mov	r3, r2
    19c4:	009b      	lsls	r3, r3, #2
    19c6:	4413      	add	r3, r2
    19c8:	00db      	lsls	r3, r3, #3
    19ca:	440b      	add	r3, r1
    19cc:	3340      	adds	r3, #64	; 0x40
    19ce:	681a      	ldr	r2, [r3, #0]
    19d0:	4994      	ldr	r1, [pc, #592]	; (1c24 <Clock_Ip_InitClock+0x584>)
    19d2:	4613      	mov	r3, r2
    19d4:	00db      	lsls	r3, r3, #3
    19d6:	4413      	add	r3, r2
    19d8:	440b      	add	r3, r1
    19da:	3301      	adds	r3, #1
    19dc:	781b      	ldrb	r3, [r3, #0]
    19de:	461a      	mov	r2, r3
    19e0:	4b93      	ldr	r3, [pc, #588]	; (1c30 <Clock_Ip_InitClock+0x590>)
    19e2:	5c9b      	ldrb	r3, [r3, r2]
    19e4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    19e6:	4993      	ldr	r1, [pc, #588]	; (1c34 <Clock_Ip_InitClock+0x594>)
    19e8:	9a02      	ldr	r2, [sp, #8]
    19ea:	4613      	mov	r3, r2
    19ec:	009b      	lsls	r3, r3, #2
    19ee:	4413      	add	r3, r2
    19f0:	009b      	lsls	r3, r3, #2
    19f2:	440b      	add	r3, r1
    19f4:	3304      	adds	r3, #4
    19f6:	6819      	ldr	r1, [r3, #0]
    19f8:	9a03      	ldr	r2, [sp, #12]
    19fa:	4613      	mov	r3, r2
    19fc:	009b      	lsls	r3, r3, #2
    19fe:	4413      	add	r3, r2
    1a00:	00db      	lsls	r3, r3, #3
    1a02:	3340      	adds	r3, #64	; 0x40
    1a04:	9a01      	ldr	r2, [sp, #4]
    1a06:	4413      	add	r3, r2
    1a08:	4618      	mov	r0, r3
    1a0a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1a0c:	9b03      	ldr	r3, [sp, #12]
    1a0e:	3301      	adds	r3, #1
    1a10:	9303      	str	r3, [sp, #12]
    1a12:	9b01      	ldr	r3, [sp, #4]
    1a14:	7a9b      	ldrb	r3, [r3, #10]
    1a16:	461a      	mov	r2, r3
    1a18:	9b03      	ldr	r3, [sp, #12]
    1a1a:	4293      	cmp	r3, r2
    1a1c:	d3cf      	bcc.n	19be <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1a1e:	2300      	movs	r3, #0
    1a20:	9303      	str	r3, [sp, #12]
    1a22:	e029      	b.n	1a78 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1a24:	9901      	ldr	r1, [sp, #4]
    1a26:	9a03      	ldr	r2, [sp, #12]
    1a28:	4613      	mov	r3, r2
    1a2a:	009b      	lsls	r3, r3, #2
    1a2c:	4413      	add	r3, r2
    1a2e:	009b      	lsls	r3, r3, #2
    1a30:	440b      	add	r3, r1
    1a32:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1a36:	681a      	ldr	r2, [r3, #0]
    1a38:	497a      	ldr	r1, [pc, #488]	; (1c24 <Clock_Ip_InitClock+0x584>)
    1a3a:	4613      	mov	r3, r2
    1a3c:	00db      	lsls	r3, r3, #3
    1a3e:	4413      	add	r3, r2
    1a40:	440b      	add	r3, r1
    1a42:	3301      	adds	r3, #1
    1a44:	781b      	ldrb	r3, [r3, #0]
    1a46:	461a      	mov	r2, r3
    1a48:	4b7b      	ldr	r3, [pc, #492]	; (1c38 <Clock_Ip_InitClock+0x598>)
    1a4a:	5c9b      	ldrb	r3, [r3, r2]
    1a4c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    1a4e:	4a7b      	ldr	r2, [pc, #492]	; (1c3c <Clock_Ip_InitClock+0x59c>)
    1a50:	9b02      	ldr	r3, [sp, #8]
    1a52:	011b      	lsls	r3, r3, #4
    1a54:	4413      	add	r3, r2
    1a56:	3304      	adds	r3, #4
    1a58:	681c      	ldr	r4, [r3, #0]
    1a5a:	9a03      	ldr	r2, [sp, #12]
    1a5c:	4613      	mov	r3, r2
    1a5e:	009b      	lsls	r3, r3, #2
    1a60:	4413      	add	r3, r2
    1a62:	009b      	lsls	r3, r3, #2
    1a64:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1a68:	9a01      	ldr	r2, [sp, #4]
    1a6a:	4413      	add	r3, r2
    1a6c:	9903      	ldr	r1, [sp, #12]
    1a6e:	4618      	mov	r0, r3
    1a70:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1a72:	9b03      	ldr	r3, [sp, #12]
    1a74:	3301      	adds	r3, #1
    1a76:	9303      	str	r3, [sp, #12]
    1a78:	9b01      	ldr	r3, [sp, #4]
    1a7a:	7c9b      	ldrb	r3, [r3, #18]
    1a7c:	461a      	mov	r2, r3
    1a7e:	9b03      	ldr	r3, [sp, #12]
    1a80:	4293      	cmp	r3, r2
    1a82:	d3cf      	bcc.n	1a24 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1a84:	2300      	movs	r3, #0
    1a86:	9303      	str	r3, [sp, #12]
    1a88:	e02a      	b.n	1ae0 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1a8a:	9901      	ldr	r1, [sp, #4]
    1a8c:	9a03      	ldr	r2, [sp, #12]
    1a8e:	4613      	mov	r3, r2
    1a90:	009b      	lsls	r3, r3, #2
    1a92:	4413      	add	r3, r2
    1a94:	009b      	lsls	r3, r3, #2
    1a96:	440b      	add	r3, r1
    1a98:	332c      	adds	r3, #44	; 0x2c
    1a9a:	681a      	ldr	r2, [r3, #0]
    1a9c:	4961      	ldr	r1, [pc, #388]	; (1c24 <Clock_Ip_InitClock+0x584>)
    1a9e:	4613      	mov	r3, r2
    1aa0:	00db      	lsls	r3, r3, #3
    1aa2:	4413      	add	r3, r2
    1aa4:	440b      	add	r3, r1
    1aa6:	3301      	adds	r3, #1
    1aa8:	781b      	ldrb	r3, [r3, #0]
    1aaa:	461a      	mov	r2, r3
    1aac:	4b64      	ldr	r3, [pc, #400]	; (1c40 <Clock_Ip_InitClock+0x5a0>)
    1aae:	5c9b      	ldrb	r3, [r3, r2]
    1ab0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    1ab2:	4964      	ldr	r1, [pc, #400]	; (1c44 <Clock_Ip_InitClock+0x5a4>)
    1ab4:	9a02      	ldr	r2, [sp, #8]
    1ab6:	4613      	mov	r3, r2
    1ab8:	009b      	lsls	r3, r3, #2
    1aba:	4413      	add	r3, r2
    1abc:	009b      	lsls	r3, r3, #2
    1abe:	440b      	add	r3, r1
    1ac0:	3308      	adds	r3, #8
    1ac2:	6819      	ldr	r1, [r3, #0]
    1ac4:	9a03      	ldr	r2, [sp, #12]
    1ac6:	4613      	mov	r3, r2
    1ac8:	009b      	lsls	r3, r3, #2
    1aca:	4413      	add	r3, r2
    1acc:	009b      	lsls	r3, r3, #2
    1ace:	3328      	adds	r3, #40	; 0x28
    1ad0:	9a01      	ldr	r2, [sp, #4]
    1ad2:	4413      	add	r3, r2
    1ad4:	3304      	adds	r3, #4
    1ad6:	4618      	mov	r0, r3
    1ad8:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1ada:	9b03      	ldr	r3, [sp, #12]
    1adc:	3301      	adds	r3, #1
    1ade:	9303      	str	r3, [sp, #12]
    1ae0:	9b01      	ldr	r3, [sp, #4]
    1ae2:	7a5b      	ldrb	r3, [r3, #9]
    1ae4:	461a      	mov	r2, r3
    1ae6:	9b03      	ldr	r3, [sp, #12]
    1ae8:	4293      	cmp	r3, r2
    1aea:	d3ce      	bcc.n	1a8a <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1aec:	2300      	movs	r3, #0
    1aee:	9303      	str	r3, [sp, #12]
    1af0:	e029      	b.n	1b46 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1af2:	9901      	ldr	r1, [sp, #4]
    1af4:	9a03      	ldr	r2, [sp, #12]
    1af6:	4613      	mov	r3, r2
    1af8:	009b      	lsls	r3, r3, #2
    1afa:	4413      	add	r3, r2
    1afc:	00db      	lsls	r3, r3, #3
    1afe:	440b      	add	r3, r1
    1b00:	3340      	adds	r3, #64	; 0x40
    1b02:	681a      	ldr	r2, [r3, #0]
    1b04:	4947      	ldr	r1, [pc, #284]	; (1c24 <Clock_Ip_InitClock+0x584>)
    1b06:	4613      	mov	r3, r2
    1b08:	00db      	lsls	r3, r3, #3
    1b0a:	4413      	add	r3, r2
    1b0c:	440b      	add	r3, r1
    1b0e:	3301      	adds	r3, #1
    1b10:	781b      	ldrb	r3, [r3, #0]
    1b12:	461a      	mov	r2, r3
    1b14:	4b46      	ldr	r3, [pc, #280]	; (1c30 <Clock_Ip_InitClock+0x590>)
    1b16:	5c9b      	ldrb	r3, [r3, r2]
    1b18:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    1b1a:	4946      	ldr	r1, [pc, #280]	; (1c34 <Clock_Ip_InitClock+0x594>)
    1b1c:	9a02      	ldr	r2, [sp, #8]
    1b1e:	4613      	mov	r3, r2
    1b20:	009b      	lsls	r3, r3, #2
    1b22:	4413      	add	r3, r2
    1b24:	009b      	lsls	r3, r3, #2
    1b26:	440b      	add	r3, r1
    1b28:	330c      	adds	r3, #12
    1b2a:	6819      	ldr	r1, [r3, #0]
    1b2c:	9a03      	ldr	r2, [sp, #12]
    1b2e:	4613      	mov	r3, r2
    1b30:	009b      	lsls	r3, r3, #2
    1b32:	4413      	add	r3, r2
    1b34:	00db      	lsls	r3, r3, #3
    1b36:	3340      	adds	r3, #64	; 0x40
    1b38:	9a01      	ldr	r2, [sp, #4]
    1b3a:	4413      	add	r3, r2
    1b3c:	4618      	mov	r0, r3
    1b3e:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1b40:	9b03      	ldr	r3, [sp, #12]
    1b42:	3301      	adds	r3, #1
    1b44:	9303      	str	r3, [sp, #12]
    1b46:	9b01      	ldr	r3, [sp, #4]
    1b48:	7a9b      	ldrb	r3, [r3, #10]
    1b4a:	461a      	mov	r2, r3
    1b4c:	9b03      	ldr	r3, [sp, #12]
    1b4e:	4293      	cmp	r3, r2
    1b50:	d3cf      	bcc.n	1af2 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1b52:	2300      	movs	r3, #0
    1b54:	9303      	str	r3, [sp, #12]
    1b56:	e025      	b.n	1ba4 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    1b58:	9a01      	ldr	r2, [sp, #4]
    1b5a:	9b03      	ldr	r3, [sp, #12]
    1b5c:	3324      	adds	r3, #36	; 0x24
    1b5e:	011b      	lsls	r3, r3, #4
    1b60:	4413      	add	r3, r2
    1b62:	3304      	adds	r3, #4
    1b64:	681a      	ldr	r2, [r3, #0]
    1b66:	492f      	ldr	r1, [pc, #188]	; (1c24 <Clock_Ip_InitClock+0x584>)
    1b68:	4613      	mov	r3, r2
    1b6a:	00db      	lsls	r3, r3, #3
    1b6c:	4413      	add	r3, r2
    1b6e:	440b      	add	r3, r1
    1b70:	3301      	adds	r3, #1
    1b72:	781b      	ldrb	r3, [r3, #0]
    1b74:	461a      	mov	r2, r3
    1b76:	4b34      	ldr	r3, [pc, #208]	; (1c48 <Clock_Ip_InitClock+0x5a8>)
    1b78:	5c9b      	ldrb	r3, [r3, r2]
    1b7a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    1b7c:	4933      	ldr	r1, [pc, #204]	; (1c4c <Clock_Ip_InitClock+0x5ac>)
    1b7e:	9a02      	ldr	r2, [sp, #8]
    1b80:	4613      	mov	r3, r2
    1b82:	005b      	lsls	r3, r3, #1
    1b84:	4413      	add	r3, r2
    1b86:	009b      	lsls	r3, r3, #2
    1b88:	440b      	add	r3, r1
    1b8a:	3304      	adds	r3, #4
    1b8c:	681b      	ldr	r3, [r3, #0]
    1b8e:	9a03      	ldr	r2, [sp, #12]
    1b90:	3224      	adds	r2, #36	; 0x24
    1b92:	0112      	lsls	r2, r2, #4
    1b94:	9901      	ldr	r1, [sp, #4]
    1b96:	440a      	add	r2, r1
    1b98:	3204      	adds	r2, #4
    1b9a:	4610      	mov	r0, r2
    1b9c:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1b9e:	9b03      	ldr	r3, [sp, #12]
    1ba0:	3301      	adds	r3, #1
    1ba2:	9303      	str	r3, [sp, #12]
    1ba4:	9b01      	ldr	r3, [sp, #4]
    1ba6:	7b9b      	ldrb	r3, [r3, #14]
    1ba8:	461a      	mov	r2, r3
    1baa:	9b03      	ldr	r3, [sp, #12]
    1bac:	4293      	cmp	r3, r2
    1bae:	d3d3      	bcc.n	1b58 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    1bb0:	4b27      	ldr	r3, [pc, #156]	; (1c50 <Clock_Ip_InitClock+0x5b0>)
    1bb2:	2200      	movs	r2, #0
    1bb4:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    1bb6:	4b26      	ldr	r3, [pc, #152]	; (1c50 <Clock_Ip_InitClock+0x5b0>)
    1bb8:	2200      	movs	r2, #0
    1bba:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    1bbc:	4b24      	ldr	r3, [pc, #144]	; (1c50 <Clock_Ip_InitClock+0x5b0>)
    1bbe:	2201      	movs	r2, #1
    1bc0:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    1bc2:	4b23      	ldr	r3, [pc, #140]	; (1c50 <Clock_Ip_InitClock+0x5b0>)
    1bc4:	2200      	movs	r2, #0
    1bc6:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    1bc8:	f000 fa9c 	bl	2104 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1bcc:	2300      	movs	r3, #0
    1bce:	9303      	str	r3, [sp, #12]
    1bd0:	e04c      	b.n	1c6c <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    1bd2:	9a01      	ldr	r2, [sp, #4]
    1bd4:	9b03      	ldr	r3, [sp, #12]
    1bd6:	330d      	adds	r3, #13
    1bd8:	00db      	lsls	r3, r3, #3
    1bda:	4413      	add	r3, r2
    1bdc:	685b      	ldr	r3, [r3, #4]
    1bde:	4a1d      	ldr	r2, [pc, #116]	; (1c54 <Clock_Ip_InitClock+0x5b4>)
    1be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1be4:	2b03      	cmp	r3, #3
    1be6:	d03b      	beq.n	1c60 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1be8:	9b01      	ldr	r3, [sp, #4]
    1bea:	9a03      	ldr	r2, [sp, #12]
    1bec:	320d      	adds	r2, #13
    1bee:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1bf2:	490c      	ldr	r1, [pc, #48]	; (1c24 <Clock_Ip_InitClock+0x584>)
    1bf4:	4613      	mov	r3, r2
    1bf6:	00db      	lsls	r3, r3, #3
    1bf8:	4413      	add	r3, r2
    1bfa:	440b      	add	r3, r1
    1bfc:	3301      	adds	r3, #1
    1bfe:	781b      	ldrb	r3, [r3, #0]
    1c00:	461a      	mov	r2, r3
    1c02:	4b15      	ldr	r3, [pc, #84]	; (1c58 <Clock_Ip_InitClock+0x5b8>)
    1c04:	5c9b      	ldrb	r3, [r3, r2]
    1c06:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    1c08:	4a14      	ldr	r2, [pc, #80]	; (1c5c <Clock_Ip_InitClock+0x5bc>)
    1c0a:	9b02      	ldr	r3, [sp, #8]
    1c0c:	00db      	lsls	r3, r3, #3
    1c0e:	4413      	add	r3, r2
    1c10:	685b      	ldr	r3, [r3, #4]
    1c12:	9a03      	ldr	r2, [sp, #12]
    1c14:	320d      	adds	r2, #13
    1c16:	00d2      	lsls	r2, r2, #3
    1c18:	9901      	ldr	r1, [sp, #4]
    1c1a:	440a      	add	r2, r1
    1c1c:	4610      	mov	r0, r2
    1c1e:	4798      	blx	r3
    1c20:	e021      	b.n	1c66 <Clock_Ip_InitClock+0x5c6>
    1c22:	bf00      	nop
    1c24:	0000e1e4 	.word	0x0000e1e4
    1c28:	0000e154 	.word	0x0000e154
    1c2c:	0000e730 	.word	0x0000e730
    1c30:	0000e1a4 	.word	0x0000e1a4
    1c34:	0000e7f0 	.word	0x0000e7f0
    1c38:	0000e1d4 	.word	0x0000e1d4
    1c3c:	0000e7e0 	.word	0x0000e7e0
    1c40:	0000e164 	.word	0x0000e164
    1c44:	0000e738 	.word	0x0000e738
    1c48:	0000e194 	.word	0x0000e194
    1c4c:	0000e760 	.word	0x0000e760
    1c50:	1fff8b40 	.word	0x1fff8b40
    1c54:	0000e630 	.word	0x0000e630
    1c58:	0000e1b4 	.word	0x0000e1b4
    1c5c:	0000e81c 	.word	0x0000e81c
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    1c60:	4b3a      	ldr	r3, [pc, #232]	; (1d4c <Clock_Ip_InitClock+0x6ac>)
    1c62:	2201      	movs	r2, #1
    1c64:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1c66:	9b03      	ldr	r3, [sp, #12]
    1c68:	3301      	adds	r3, #1
    1c6a:	9303      	str	r3, [sp, #12]
    1c6c:	9b01      	ldr	r3, [sp, #4]
    1c6e:	7adb      	ldrb	r3, [r3, #11]
    1c70:	461a      	mov	r2, r3
    1c72:	9b03      	ldr	r3, [sp, #12]
    1c74:	4293      	cmp	r3, r2
    1c76:	d3ac      	bcc.n	1bd2 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    1c78:	4b34      	ldr	r3, [pc, #208]	; (1d4c <Clock_Ip_InitClock+0x6ac>)
    1c7a:	781b      	ldrb	r3, [r3, #0]
    1c7c:	f083 0301 	eor.w	r3, r3, #1
    1c80:	b2db      	uxtb	r3, r3
    1c82:	2b00      	cmp	r3, #0
    1c84:	d05e      	beq.n	1d44 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1c86:	2300      	movs	r3, #0
    1c88:	9303      	str	r3, [sp, #12]
    1c8a:	e01f      	b.n	1ccc <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1c8c:	9a01      	ldr	r2, [sp, #4]
    1c8e:	9b03      	ldr	r3, [sp, #12]
    1c90:	334e      	adds	r3, #78	; 0x4e
    1c92:	00db      	lsls	r3, r3, #3
    1c94:	4413      	add	r3, r2
    1c96:	685a      	ldr	r2, [r3, #4]
    1c98:	492d      	ldr	r1, [pc, #180]	; (1d50 <Clock_Ip_InitClock+0x6b0>)
    1c9a:	4613      	mov	r3, r2
    1c9c:	00db      	lsls	r3, r3, #3
    1c9e:	4413      	add	r3, r2
    1ca0:	440b      	add	r3, r1
    1ca2:	3301      	adds	r3, #1
    1ca4:	781b      	ldrb	r3, [r3, #0]
    1ca6:	461a      	mov	r2, r3
    1ca8:	4b2a      	ldr	r3, [pc, #168]	; (1d54 <Clock_Ip_InitClock+0x6b4>)
    1caa:	5c9b      	ldrb	r3, [r3, r2]
    1cac:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    1cae:	4a2a      	ldr	r2, [pc, #168]	; (1d58 <Clock_Ip_InitClock+0x6b8>)
    1cb0:	9b02      	ldr	r3, [sp, #8]
    1cb2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1cb6:	9a03      	ldr	r2, [sp, #12]
    1cb8:	324e      	adds	r2, #78	; 0x4e
    1cba:	00d2      	lsls	r2, r2, #3
    1cbc:	9901      	ldr	r1, [sp, #4]
    1cbe:	440a      	add	r2, r1
    1cc0:	3204      	adds	r2, #4
    1cc2:	4610      	mov	r0, r2
    1cc4:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1cc6:	9b03      	ldr	r3, [sp, #12]
    1cc8:	3301      	adds	r3, #1
    1cca:	9303      	str	r3, [sp, #12]
    1ccc:	9b01      	ldr	r3, [sp, #4]
    1cce:	7c1b      	ldrb	r3, [r3, #16]
    1cd0:	461a      	mov	r2, r3
    1cd2:	9b03      	ldr	r3, [sp, #12]
    1cd4:	4293      	cmp	r3, r2
    1cd6:	d3d9      	bcc.n	1c8c <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1cd8:	2300      	movs	r3, #0
    1cda:	9303      	str	r3, [sp, #12]
    1cdc:	e028      	b.n	1d30 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1cde:	9901      	ldr	r1, [sp, #4]
    1ce0:	9a03      	ldr	r2, [sp, #12]
    1ce2:	4613      	mov	r3, r2
    1ce4:	009b      	lsls	r3, r3, #2
    1ce6:	4413      	add	r3, r2
    1ce8:	009b      	lsls	r3, r3, #2
    1cea:	440b      	add	r3, r1
    1cec:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1cf0:	681a      	ldr	r2, [r3, #0]
    1cf2:	4917      	ldr	r1, [pc, #92]	; (1d50 <Clock_Ip_InitClock+0x6b0>)
    1cf4:	4613      	mov	r3, r2
    1cf6:	00db      	lsls	r3, r3, #3
    1cf8:	4413      	add	r3, r2
    1cfa:	440b      	add	r3, r1
    1cfc:	3301      	adds	r3, #1
    1cfe:	781b      	ldrb	r3, [r3, #0]
    1d00:	461a      	mov	r2, r3
    1d02:	4b16      	ldr	r3, [pc, #88]	; (1d5c <Clock_Ip_InitClock+0x6bc>)
    1d04:	5c9b      	ldrb	r3, [r3, r2]
    1d06:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    1d08:	4a15      	ldr	r2, [pc, #84]	; (1d60 <Clock_Ip_InitClock+0x6c0>)
    1d0a:	9b02      	ldr	r3, [sp, #8]
    1d0c:	011b      	lsls	r3, r3, #4
    1d0e:	4413      	add	r3, r2
    1d10:	330c      	adds	r3, #12
    1d12:	6819      	ldr	r1, [r3, #0]
    1d14:	9a03      	ldr	r2, [sp, #12]
    1d16:	4613      	mov	r3, r2
    1d18:	009b      	lsls	r3, r3, #2
    1d1a:	4413      	add	r3, r2
    1d1c:	009b      	lsls	r3, r3, #2
    1d1e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1d22:	9a01      	ldr	r2, [sp, #4]
    1d24:	4413      	add	r3, r2
    1d26:	4618      	mov	r0, r3
    1d28:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1d2a:	9b03      	ldr	r3, [sp, #12]
    1d2c:	3301      	adds	r3, #1
    1d2e:	9303      	str	r3, [sp, #12]
    1d30:	9b01      	ldr	r3, [sp, #4]
    1d32:	7c9b      	ldrb	r3, [r3, #18]
    1d34:	461a      	mov	r2, r3
    1d36:	9b03      	ldr	r3, [sp, #12]
    1d38:	4293      	cmp	r3, r2
    1d3a:	d3d0      	bcc.n	1cde <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1d3c:	2104      	movs	r1, #4
    1d3e:	9801      	ldr	r0, [sp, #4]
    1d40:	f002 ff48 	bl	4bd4 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    1d44:	bf00      	nop
    1d46:	b004      	add	sp, #16
    1d48:	bd10      	pop	{r4, pc}
    1d4a:	bf00      	nop
    1d4c:	1fff8b40 	.word	0x1fff8b40
    1d50:	0000e1e4 	.word	0x0000e1e4
    1d54:	0000e184 	.word	0x0000e184
    1d58:	0000e76c 	.word	0x0000e76c
    1d5c:	0000e1d4 	.word	0x0000e1d4
    1d60:	0000e7e0 	.word	0x0000e7e0

00001d64 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    1d64:	b500      	push	{lr}
    1d66:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    1d68:	2302      	movs	r3, #2
    1d6a:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1d6c:	2300      	movs	r3, #0
    1d6e:	9304      	str	r3, [sp, #16]
    1d70:	e02c      	b.n	1dcc <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    1d72:	4a36      	ldr	r2, [pc, #216]	; (1e4c <Clock_Ip_GetPllStatus+0xe8>)
    1d74:	9b04      	ldr	r3, [sp, #16]
    1d76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1d7a:	4935      	ldr	r1, [pc, #212]	; (1e50 <Clock_Ip_GetPllStatus+0xec>)
    1d7c:	4613      	mov	r3, r2
    1d7e:	00db      	lsls	r3, r3, #3
    1d80:	4413      	add	r3, r2
    1d82:	440b      	add	r3, r1
    1d84:	3301      	adds	r3, #1
    1d86:	781b      	ldrb	r3, [r3, #0]
    1d88:	461a      	mov	r2, r3
    1d8a:	4b32      	ldr	r3, [pc, #200]	; (1e54 <Clock_Ip_GetPllStatus+0xf0>)
    1d8c:	5c9b      	ldrb	r3, [r3, r2]
    1d8e:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    1d90:	4931      	ldr	r1, [pc, #196]	; (1e58 <Clock_Ip_GetPllStatus+0xf4>)
    1d92:	9a03      	ldr	r2, [sp, #12]
    1d94:	4613      	mov	r3, r2
    1d96:	009b      	lsls	r3, r3, #2
    1d98:	4413      	add	r3, r2
    1d9a:	009b      	lsls	r3, r3, #2
    1d9c:	440b      	add	r3, r1
    1d9e:	3308      	adds	r3, #8
    1da0:	681b      	ldr	r3, [r3, #0]
    1da2:	492a      	ldr	r1, [pc, #168]	; (1e4c <Clock_Ip_GetPllStatus+0xe8>)
    1da4:	9a04      	ldr	r2, [sp, #16]
    1da6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1daa:	4610      	mov	r0, r2
    1dac:	4798      	blx	r3
    1dae:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    1db0:	9b02      	ldr	r3, [sp, #8]
    1db2:	2b01      	cmp	r3, #1
    1db4:	d102      	bne.n	1dbc <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    1db6:	2301      	movs	r3, #1
    1db8:	9305      	str	r3, [sp, #20]
            break;
    1dba:	e00d      	b.n	1dd8 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    1dbc:	9b02      	ldr	r3, [sp, #8]
    1dbe:	2b02      	cmp	r3, #2
    1dc0:	d101      	bne.n	1dc6 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    1dc2:	2300      	movs	r3, #0
    1dc4:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1dc6:	9b04      	ldr	r3, [sp, #16]
    1dc8:	3301      	adds	r3, #1
    1dca:	9304      	str	r3, [sp, #16]
    1dcc:	4b23      	ldr	r3, [pc, #140]	; (1e5c <Clock_Ip_GetPllStatus+0xf8>)
    1dce:	789b      	ldrb	r3, [r3, #2]
    1dd0:	461a      	mov	r2, r3
    1dd2:	9b04      	ldr	r3, [sp, #16]
    1dd4:	4293      	cmp	r3, r2
    1dd6:	d3cc      	bcc.n	1d72 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    1dd8:	9b05      	ldr	r3, [sp, #20]
    1dda:	2b00      	cmp	r3, #0
    1ddc:	d130      	bne.n	1e40 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1dde:	2300      	movs	r3, #0
    1de0:	9304      	str	r3, [sp, #16]
    1de2:	e027      	b.n	1e34 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    1de4:	4a1e      	ldr	r2, [pc, #120]	; (1e60 <Clock_Ip_GetPllStatus+0xfc>)
    1de6:	9b04      	ldr	r3, [sp, #16]
    1de8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1dec:	4918      	ldr	r1, [pc, #96]	; (1e50 <Clock_Ip_GetPllStatus+0xec>)
    1dee:	4613      	mov	r3, r2
    1df0:	00db      	lsls	r3, r3, #3
    1df2:	4413      	add	r3, r2
    1df4:	440b      	add	r3, r1
    1df6:	3301      	adds	r3, #1
    1df8:	781b      	ldrb	r3, [r3, #0]
    1dfa:	461a      	mov	r2, r3
    1dfc:	4b19      	ldr	r3, [pc, #100]	; (1e64 <Clock_Ip_GetPllStatus+0x100>)
    1dfe:	5c9b      	ldrb	r3, [r3, r2]
    1e00:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    1e02:	4919      	ldr	r1, [pc, #100]	; (1e68 <Clock_Ip_GetPllStatus+0x104>)
    1e04:	9a03      	ldr	r2, [sp, #12]
    1e06:	4613      	mov	r3, r2
    1e08:	005b      	lsls	r3, r3, #1
    1e0a:	4413      	add	r3, r2
    1e0c:	009b      	lsls	r3, r3, #2
    1e0e:	440b      	add	r3, r1
    1e10:	3308      	adds	r3, #8
    1e12:	681b      	ldr	r3, [r3, #0]
    1e14:	4912      	ldr	r1, [pc, #72]	; (1e60 <Clock_Ip_GetPllStatus+0xfc>)
    1e16:	9a04      	ldr	r2, [sp, #16]
    1e18:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1e1c:	4610      	mov	r0, r2
    1e1e:	4798      	blx	r3
    1e20:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    1e22:	9b01      	ldr	r3, [sp, #4]
    1e24:	2b01      	cmp	r3, #1
    1e26:	d102      	bne.n	1e2e <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    1e28:	2301      	movs	r3, #1
    1e2a:	9305      	str	r3, [sp, #20]
                break;
    1e2c:	e008      	b.n	1e40 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1e2e:	9b04      	ldr	r3, [sp, #16]
    1e30:	3301      	adds	r3, #1
    1e32:	9304      	str	r3, [sp, #16]
    1e34:	4b09      	ldr	r3, [pc, #36]	; (1e5c <Clock_Ip_GetPllStatus+0xf8>)
    1e36:	78db      	ldrb	r3, [r3, #3]
    1e38:	461a      	mov	r2, r3
    1e3a:	9b04      	ldr	r3, [sp, #16]
    1e3c:	4293      	cmp	r3, r2
    1e3e:	d3d1      	bcc.n	1de4 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    1e40:	9b05      	ldr	r3, [sp, #20]
}
    1e42:	4618      	mov	r0, r3
    1e44:	b007      	add	sp, #28
    1e46:	f85d fb04 	ldr.w	pc, [sp], #4
    1e4a:	bf00      	nop
    1e4c:	0000e6ec 	.word	0x0000e6ec
    1e50:	0000e1e4 	.word	0x0000e1e4
    1e54:	0000e1a4 	.word	0x0000e1a4
    1e58:	0000e7f0 	.word	0x0000e7f0
    1e5c:	1fff8b40 	.word	0x1fff8b40
    1e60:	0000e6f0 	.word	0x0000e6f0
    1e64:	0000e194 	.word	0x0000e194
    1e68:	0000e760 	.word	0x0000e760

00001e6c <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    1e6c:	b500      	push	{lr}
    1e6e:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1e70:	4b55      	ldr	r3, [pc, #340]	; (1fc8 <Clock_Ip_DistributePll+0x15c>)
    1e72:	681b      	ldr	r3, [r3, #0]
    1e74:	2b00      	cmp	r3, #0
    1e76:	f000 80a2 	beq.w	1fbe <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1e7a:	2300      	movs	r3, #0
    1e7c:	9301      	str	r3, [sp, #4]
    1e7e:	e02c      	b.n	1eda <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    1e80:	4b51      	ldr	r3, [pc, #324]	; (1fc8 <Clock_Ip_DistributePll+0x15c>)
    1e82:	681a      	ldr	r2, [r3, #0]
    1e84:	9b01      	ldr	r3, [sp, #4]
    1e86:	330d      	adds	r3, #13
    1e88:	00db      	lsls	r3, r3, #3
    1e8a:	4413      	add	r3, r2
    1e8c:	685b      	ldr	r3, [r3, #4]
    1e8e:	4a4f      	ldr	r2, [pc, #316]	; (1fcc <Clock_Ip_DistributePll+0x160>)
    1e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e94:	2b03      	cmp	r3, #3
    1e96:	d11d      	bne.n	1ed4 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1e98:	4b4b      	ldr	r3, [pc, #300]	; (1fc8 <Clock_Ip_DistributePll+0x15c>)
    1e9a:	681b      	ldr	r3, [r3, #0]
    1e9c:	9a01      	ldr	r2, [sp, #4]
    1e9e:	320d      	adds	r2, #13
    1ea0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1ea4:	494a      	ldr	r1, [pc, #296]	; (1fd0 <Clock_Ip_DistributePll+0x164>)
    1ea6:	4613      	mov	r3, r2
    1ea8:	00db      	lsls	r3, r3, #3
    1eaa:	4413      	add	r3, r2
    1eac:	440b      	add	r3, r1
    1eae:	3301      	adds	r3, #1
    1eb0:	781b      	ldrb	r3, [r3, #0]
    1eb2:	461a      	mov	r2, r3
    1eb4:	4b47      	ldr	r3, [pc, #284]	; (1fd4 <Clock_Ip_DistributePll+0x168>)
    1eb6:	5c9b      	ldrb	r3, [r3, r2]
    1eb8:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    1eba:	4a47      	ldr	r2, [pc, #284]	; (1fd8 <Clock_Ip_DistributePll+0x16c>)
    1ebc:	9b00      	ldr	r3, [sp, #0]
    1ebe:	00db      	lsls	r3, r3, #3
    1ec0:	4413      	add	r3, r2
    1ec2:	685b      	ldr	r3, [r3, #4]
    1ec4:	4a40      	ldr	r2, [pc, #256]	; (1fc8 <Clock_Ip_DistributePll+0x15c>)
    1ec6:	6811      	ldr	r1, [r2, #0]
    1ec8:	9a01      	ldr	r2, [sp, #4]
    1eca:	320d      	adds	r2, #13
    1ecc:	00d2      	lsls	r2, r2, #3
    1ece:	440a      	add	r2, r1
    1ed0:	4610      	mov	r0, r2
    1ed2:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1ed4:	9b01      	ldr	r3, [sp, #4]
    1ed6:	3301      	adds	r3, #1
    1ed8:	9301      	str	r3, [sp, #4]
    1eda:	4b3b      	ldr	r3, [pc, #236]	; (1fc8 <Clock_Ip_DistributePll+0x15c>)
    1edc:	681b      	ldr	r3, [r3, #0]
    1ede:	7adb      	ldrb	r3, [r3, #11]
    1ee0:	461a      	mov	r2, r3
    1ee2:	9b01      	ldr	r3, [sp, #4]
    1ee4:	4293      	cmp	r3, r2
    1ee6:	d3cb      	bcc.n	1e80 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    1ee8:	4b3c      	ldr	r3, [pc, #240]	; (1fdc <Clock_Ip_DistributePll+0x170>)
    1eea:	781b      	ldrb	r3, [r3, #0]
    1eec:	2b00      	cmp	r3, #0
    1eee:	d066      	beq.n	1fbe <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1ef0:	2300      	movs	r3, #0
    1ef2:	9301      	str	r3, [sp, #4]
    1ef4:	e021      	b.n	1f3a <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1ef6:	4b34      	ldr	r3, [pc, #208]	; (1fc8 <Clock_Ip_DistributePll+0x15c>)
    1ef8:	681a      	ldr	r2, [r3, #0]
    1efa:	9b01      	ldr	r3, [sp, #4]
    1efc:	334e      	adds	r3, #78	; 0x4e
    1efe:	00db      	lsls	r3, r3, #3
    1f00:	4413      	add	r3, r2
    1f02:	685a      	ldr	r2, [r3, #4]
    1f04:	4932      	ldr	r1, [pc, #200]	; (1fd0 <Clock_Ip_DistributePll+0x164>)
    1f06:	4613      	mov	r3, r2
    1f08:	00db      	lsls	r3, r3, #3
    1f0a:	4413      	add	r3, r2
    1f0c:	440b      	add	r3, r1
    1f0e:	3301      	adds	r3, #1
    1f10:	781b      	ldrb	r3, [r3, #0]
    1f12:	461a      	mov	r2, r3
    1f14:	4b32      	ldr	r3, [pc, #200]	; (1fe0 <Clock_Ip_DistributePll+0x174>)
    1f16:	5c9b      	ldrb	r3, [r3, r2]
    1f18:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    1f1a:	4a32      	ldr	r2, [pc, #200]	; (1fe4 <Clock_Ip_DistributePll+0x178>)
    1f1c:	9b00      	ldr	r3, [sp, #0]
    1f1e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f22:	4a29      	ldr	r2, [pc, #164]	; (1fc8 <Clock_Ip_DistributePll+0x15c>)
    1f24:	6811      	ldr	r1, [r2, #0]
    1f26:	9a01      	ldr	r2, [sp, #4]
    1f28:	324e      	adds	r2, #78	; 0x4e
    1f2a:	00d2      	lsls	r2, r2, #3
    1f2c:	440a      	add	r2, r1
    1f2e:	3204      	adds	r2, #4
    1f30:	4610      	mov	r0, r2
    1f32:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1f34:	9b01      	ldr	r3, [sp, #4]
    1f36:	3301      	adds	r3, #1
    1f38:	9301      	str	r3, [sp, #4]
    1f3a:	4b23      	ldr	r3, [pc, #140]	; (1fc8 <Clock_Ip_DistributePll+0x15c>)
    1f3c:	681b      	ldr	r3, [r3, #0]
    1f3e:	7c1b      	ldrb	r3, [r3, #16]
    1f40:	461a      	mov	r2, r3
    1f42:	9b01      	ldr	r3, [sp, #4]
    1f44:	4293      	cmp	r3, r2
    1f46:	d3d6      	bcc.n	1ef6 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1f48:	2300      	movs	r3, #0
    1f4a:	9301      	str	r3, [sp, #4]
    1f4c:	e02a      	b.n	1fa4 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1f4e:	4b1e      	ldr	r3, [pc, #120]	; (1fc8 <Clock_Ip_DistributePll+0x15c>)
    1f50:	6819      	ldr	r1, [r3, #0]
    1f52:	9a01      	ldr	r2, [sp, #4]
    1f54:	4613      	mov	r3, r2
    1f56:	009b      	lsls	r3, r3, #2
    1f58:	4413      	add	r3, r2
    1f5a:	009b      	lsls	r3, r3, #2
    1f5c:	440b      	add	r3, r1
    1f5e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1f62:	681a      	ldr	r2, [r3, #0]
    1f64:	491a      	ldr	r1, [pc, #104]	; (1fd0 <Clock_Ip_DistributePll+0x164>)
    1f66:	4613      	mov	r3, r2
    1f68:	00db      	lsls	r3, r3, #3
    1f6a:	4413      	add	r3, r2
    1f6c:	440b      	add	r3, r1
    1f6e:	3301      	adds	r3, #1
    1f70:	781b      	ldrb	r3, [r3, #0]
    1f72:	461a      	mov	r2, r3
    1f74:	4b1c      	ldr	r3, [pc, #112]	; (1fe8 <Clock_Ip_DistributePll+0x17c>)
    1f76:	5c9b      	ldrb	r3, [r3, r2]
    1f78:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    1f7a:	4a1c      	ldr	r2, [pc, #112]	; (1fec <Clock_Ip_DistributePll+0x180>)
    1f7c:	9b00      	ldr	r3, [sp, #0]
    1f7e:	011b      	lsls	r3, r3, #4
    1f80:	4413      	add	r3, r2
    1f82:	330c      	adds	r3, #12
    1f84:	6819      	ldr	r1, [r3, #0]
    1f86:	4b10      	ldr	r3, [pc, #64]	; (1fc8 <Clock_Ip_DistributePll+0x15c>)
    1f88:	6818      	ldr	r0, [r3, #0]
    1f8a:	9a01      	ldr	r2, [sp, #4]
    1f8c:	4613      	mov	r3, r2
    1f8e:	009b      	lsls	r3, r3, #2
    1f90:	4413      	add	r3, r2
    1f92:	009b      	lsls	r3, r3, #2
    1f94:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1f98:	4403      	add	r3, r0
    1f9a:	4618      	mov	r0, r3
    1f9c:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1f9e:	9b01      	ldr	r3, [sp, #4]
    1fa0:	3301      	adds	r3, #1
    1fa2:	9301      	str	r3, [sp, #4]
    1fa4:	4b08      	ldr	r3, [pc, #32]	; (1fc8 <Clock_Ip_DistributePll+0x15c>)
    1fa6:	681b      	ldr	r3, [r3, #0]
    1fa8:	7c9b      	ldrb	r3, [r3, #18]
    1faa:	461a      	mov	r2, r3
    1fac:	9b01      	ldr	r3, [sp, #4]
    1fae:	4293      	cmp	r3, r2
    1fb0:	d3cd      	bcc.n	1f4e <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1fb2:	4b05      	ldr	r3, [pc, #20]	; (1fc8 <Clock_Ip_DistributePll+0x15c>)
    1fb4:	681b      	ldr	r3, [r3, #0]
    1fb6:	2104      	movs	r1, #4
    1fb8:	4618      	mov	r0, r3
    1fba:	f002 fe0b 	bl	4bd4 <Clock_Ip_Command>
        }
    }
}
    1fbe:	bf00      	nop
    1fc0:	b003      	add	sp, #12
    1fc2:	f85d fb04 	ldr.w	pc, [sp], #4
    1fc6:	bf00      	nop
    1fc8:	1fff8b38 	.word	0x1fff8b38
    1fcc:	0000e630 	.word	0x0000e630
    1fd0:	0000e1e4 	.word	0x0000e1e4
    1fd4:	0000e1b4 	.word	0x0000e1b4
    1fd8:	0000e81c 	.word	0x0000e81c
    1fdc:	1fff8b40 	.word	0x1fff8b40
    1fe0:	0000e184 	.word	0x0000e184
    1fe4:	0000e76c 	.word	0x0000e76c
    1fe8:	0000e1d4 	.word	0x0000e1d4
    1fec:	0000e7e0 	.word	0x0000e7e0

00001ff0 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    1ff0:	b500      	push	{lr}
    1ff2:	b085      	sub	sp, #20
    1ff4:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1ff6:	490c      	ldr	r1, [pc, #48]	; (2028 <Clock_Ip_DisableClockMonitor+0x38>)
    1ff8:	9a01      	ldr	r2, [sp, #4]
    1ffa:	4613      	mov	r3, r2
    1ffc:	00db      	lsls	r3, r3, #3
    1ffe:	4413      	add	r3, r2
    2000:	440b      	add	r3, r1
    2002:	3301      	adds	r3, #1
    2004:	781b      	ldrb	r3, [r3, #0]
    2006:	461a      	mov	r2, r3
    2008:	4b08      	ldr	r3, [pc, #32]	; (202c <Clock_Ip_DisableClockMonitor+0x3c>)
    200a:	5c9b      	ldrb	r3, [r3, r2]
    200c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    200e:	4a08      	ldr	r2, [pc, #32]	; (2030 <Clock_Ip_DisableClockMonitor+0x40>)
    2010:	9b03      	ldr	r3, [sp, #12]
    2012:	011b      	lsls	r3, r3, #4
    2014:	4413      	add	r3, r2
    2016:	3308      	adds	r3, #8
    2018:	681b      	ldr	r3, [r3, #0]
    201a:	9801      	ldr	r0, [sp, #4]
    201c:	4798      	blx	r3
}
    201e:	bf00      	nop
    2020:	b005      	add	sp, #20
    2022:	f85d fb04 	ldr.w	pc, [sp], #4
    2026:	bf00      	nop
    2028:	0000e1e4 	.word	0x0000e1e4
    202c:	0000e1d4 	.word	0x0000e1d4
    2030:	0000e7e0 	.word	0x0000e7e0

00002034 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2034:	b082      	sub	sp, #8
    2036:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2038:	4a02      	ldr	r2, [pc, #8]	; (2044 <Clock_Ip_InstallNotificationsCallback+0x10>)
    203a:	9b01      	ldr	r3, [sp, #4]
    203c:	6013      	str	r3, [r2, #0]
}
    203e:	bf00      	nop
    2040:	b002      	add	sp, #8
    2042:	4770      	bx	lr
    2044:	1fff8b1c 	.word	0x1fff8b1c

00002048 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2048:	b500      	push	{lr}
    204a:	b085      	sub	sp, #20
    204c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    204e:	490c      	ldr	r1, [pc, #48]	; (2080 <Clock_Ip_DisableModuleClock+0x38>)
    2050:	9a01      	ldr	r2, [sp, #4]
    2052:	4613      	mov	r3, r2
    2054:	00db      	lsls	r3, r3, #3
    2056:	4413      	add	r3, r2
    2058:	440b      	add	r3, r1
    205a:	3301      	adds	r3, #1
    205c:	781b      	ldrb	r3, [r3, #0]
    205e:	461a      	mov	r2, r3
    2060:	4b08      	ldr	r3, [pc, #32]	; (2084 <Clock_Ip_DisableModuleClock+0x3c>)
    2062:	5c9b      	ldrb	r3, [r3, r2]
    2064:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2066:	4a08      	ldr	r2, [pc, #32]	; (2088 <Clock_Ip_DisableModuleClock+0x40>)
    2068:	9b03      	ldr	r3, [sp, #12]
    206a:	00db      	lsls	r3, r3, #3
    206c:	4413      	add	r3, r2
    206e:	685b      	ldr	r3, [r3, #4]
    2070:	2101      	movs	r1, #1
    2072:	9801      	ldr	r0, [sp, #4]
    2074:	4798      	blx	r3
}
    2076:	bf00      	nop
    2078:	b005      	add	sp, #20
    207a:	f85d fb04 	ldr.w	pc, [sp], #4
    207e:	bf00      	nop
    2080:	0000e1e4 	.word	0x0000e1e4
    2084:	0000e184 	.word	0x0000e184
    2088:	0000e76c 	.word	0x0000e76c

0000208c <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    208c:	b500      	push	{lr}
    208e:	b085      	sub	sp, #20
    2090:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2092:	490c      	ldr	r1, [pc, #48]	; (20c4 <Clock_Ip_EnableModuleClock+0x38>)
    2094:	9a01      	ldr	r2, [sp, #4]
    2096:	4613      	mov	r3, r2
    2098:	00db      	lsls	r3, r3, #3
    209a:	4413      	add	r3, r2
    209c:	440b      	add	r3, r1
    209e:	3301      	adds	r3, #1
    20a0:	781b      	ldrb	r3, [r3, #0]
    20a2:	461a      	mov	r2, r3
    20a4:	4b08      	ldr	r3, [pc, #32]	; (20c8 <Clock_Ip_EnableModuleClock+0x3c>)
    20a6:	5c9b      	ldrb	r3, [r3, r2]
    20a8:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    20aa:	4a08      	ldr	r2, [pc, #32]	; (20cc <Clock_Ip_EnableModuleClock+0x40>)
    20ac:	9b03      	ldr	r3, [sp, #12]
    20ae:	00db      	lsls	r3, r3, #3
    20b0:	4413      	add	r3, r2
    20b2:	685b      	ldr	r3, [r3, #4]
    20b4:	2100      	movs	r1, #0
    20b6:	9801      	ldr	r0, [sp, #4]
    20b8:	4798      	blx	r3
}
    20ba:	bf00      	nop
    20bc:	b005      	add	sp, #20
    20be:	f85d fb04 	ldr.w	pc, [sp], #4
    20c2:	bf00      	nop
    20c4:	0000e1e4 	.word	0x0000e1e4
    20c8:	0000e184 	.word	0x0000e184
    20cc:	0000e76c 	.word	0x0000e76c

000020d0 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    20d0:	b500      	push	{lr}
    20d2:	b083      	sub	sp, #12
    20d4:	9001      	str	r0, [sp, #4]
    20d6:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    20d8:	4b08      	ldr	r3, [pc, #32]	; (20fc <Clock_Ip_PowerModeChangeNotification+0x2c>)
    20da:	2200      	movs	r2, #0
    20dc:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    20de:	4b08      	ldr	r3, [pc, #32]	; (2100 <Clock_Ip_PowerModeChangeNotification+0x30>)
    20e0:	681b      	ldr	r3, [r3, #0]
    20e2:	2102      	movs	r1, #2
    20e4:	4618      	mov	r0, r3
    20e6:	f002 fd75 	bl	4bd4 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    20ea:	9900      	ldr	r1, [sp, #0]
    20ec:	9801      	ldr	r0, [sp, #4]
    20ee:	f002 fc51 	bl	4994 <Clock_Ip_ClockPowerModeChangeNotification>
}
    20f2:	bf00      	nop
    20f4:	b003      	add	sp, #12
    20f6:	f85d fb04 	ldr.w	pc, [sp], #4
    20fa:	bf00      	nop
    20fc:	1fff8b18 	.word	0x1fff8b18
    2100:	1fff8b38 	.word	0x1fff8b38

00002104 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2104:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2106:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    210a:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    210c:	4b06      	ldr	r3, [pc, #24]	; (2128 <Clock_Ip_SetWaitStates+0x24>)
    210e:	785b      	ldrb	r3, [r3, #1]
    2110:	2b00      	cmp	r3, #0
    2112:	d005      	beq.n	2120 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2114:	9b01      	ldr	r3, [sp, #4]
    2116:	3b01      	subs	r3, #1
    2118:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    211a:	9b01      	ldr	r3, [sp, #4]
    211c:	2b00      	cmp	r3, #0
    211e:	d1f9      	bne.n	2114 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2120:	bf00      	nop
    2122:	b002      	add	sp, #8
    2124:	4770      	bx	lr
    2126:	bf00      	nop
    2128:	1fff8b40 	.word	0x1fff8b40

0000212c <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    212c:	b500      	push	{lr}
    212e:	b083      	sub	sp, #12
    2130:	9001      	str	r0, [sp, #4]
    2132:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2134:	4b04      	ldr	r3, [pc, #16]	; (2148 <Clock_Ip_ReportClockErrors+0x1c>)
    2136:	681b      	ldr	r3, [r3, #0]
    2138:	9900      	ldr	r1, [sp, #0]
    213a:	9801      	ldr	r0, [sp, #4]
    213c:	4798      	blx	r3
}
    213e:	bf00      	nop
    2140:	b003      	add	sp, #12
    2142:	f85d fb04 	ldr.w	pc, [sp], #4
    2146:	bf00      	nop
    2148:	1fff8b1c 	.word	0x1fff8b1c

0000214c <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    214c:	b500      	push	{lr}
    214e:	b085      	sub	sp, #20
    2150:	9003      	str	r0, [sp, #12]
    2152:	9102      	str	r1, [sp, #8]
    2154:	9201      	str	r2, [sp, #4]
    2156:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2158:	2000      	movs	r0, #0
    215a:	f7fe ffd1 	bl	1100 <OsIf_GetCounter>
    215e:	4602      	mov	r2, r0
    2160:	9b03      	ldr	r3, [sp, #12]
    2162:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2164:	9b02      	ldr	r3, [sp, #8]
    2166:	2200      	movs	r2, #0
    2168:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    216a:	2100      	movs	r1, #0
    216c:	9800      	ldr	r0, [sp, #0]
    216e:	f7ff f813 	bl	1198 <OsIf_MicrosToTicks>
    2172:	4602      	mov	r2, r0
    2174:	9b01      	ldr	r3, [sp, #4]
    2176:	601a      	str	r2, [r3, #0]
}
    2178:	bf00      	nop
    217a:	b005      	add	sp, #20
    217c:	f85d fb04 	ldr.w	pc, [sp], #4

00002180 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2180:	b500      	push	{lr}
    2182:	b087      	sub	sp, #28
    2184:	9003      	str	r0, [sp, #12]
    2186:	9102      	str	r1, [sp, #8]
    2188:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    218a:	2300      	movs	r3, #0
    218c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2190:	2100      	movs	r1, #0
    2192:	9803      	ldr	r0, [sp, #12]
    2194:	f7fe ffcd 	bl	1132 <OsIf_GetElapsed>
    2198:	4602      	mov	r2, r0
    219a:	9b02      	ldr	r3, [sp, #8]
    219c:	681b      	ldr	r3, [r3, #0]
    219e:	441a      	add	r2, r3
    21a0:	9b02      	ldr	r3, [sp, #8]
    21a2:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    21a4:	9b02      	ldr	r3, [sp, #8]
    21a6:	681b      	ldr	r3, [r3, #0]
    21a8:	9a01      	ldr	r2, [sp, #4]
    21aa:	429a      	cmp	r2, r3
    21ac:	d802      	bhi.n	21b4 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    21ae:	2301      	movs	r3, #1
    21b0:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    21b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    21b8:	4618      	mov	r0, r3
    21ba:	b007      	add	sp, #28
    21bc:	f85d fb04 	ldr.w	pc, [sp], #4

000021c0 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    21c0:	b082      	sub	sp, #8
    21c2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    21c4:	bf00      	nop
    21c6:	b002      	add	sp, #8
    21c8:	4770      	bx	lr

000021ca <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    21ca:	b500      	push	{lr}
    21cc:	b083      	sub	sp, #12
    21ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21d0:	9b01      	ldr	r3, [sp, #4]
    21d2:	2b00      	cmp	r3, #0
    21d4:	d002      	beq.n	21dc <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    21d6:	9801      	ldr	r0, [sp, #4]
    21d8:	f000 f8ad 	bl	2336 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    21dc:	bf00      	nop
    21de:	b003      	add	sp, #12
    21e0:	f85d fb04 	ldr.w	pc, [sp], #4

000021e4 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    21e4:	b500      	push	{lr}
    21e6:	b083      	sub	sp, #12
    21e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21ea:	9b01      	ldr	r3, [sp, #4]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    21f0:	9801      	ldr	r0, [sp, #4]
    21f2:	f000 f8cd 	bl	2390 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    21f6:	bf00      	nop
    21f8:	b003      	add	sp, #12
    21fa:	f85d fb04 	ldr.w	pc, [sp], #4

000021fe <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    21fe:	b500      	push	{lr}
    2200:	b083      	sub	sp, #12
    2202:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2204:	9b01      	ldr	r3, [sp, #4]
    2206:	2b00      	cmp	r3, #0
    2208:	d002      	beq.n	2210 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    220a:	9801      	ldr	r0, [sp, #4]
    220c:	f000 f8ee 	bl	23ec <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2210:	bf00      	nop
    2212:	b003      	add	sp, #12
    2214:	f85d fb04 	ldr.w	pc, [sp], #4

00002218 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2218:	b500      	push	{lr}
    221a:	b083      	sub	sp, #12
    221c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    221e:	9b01      	ldr	r3, [sp, #4]
    2220:	2b00      	cmp	r3, #0
    2222:	d002      	beq.n	222a <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2224:	9801      	ldr	r0, [sp, #4]
    2226:	f000 f8f9 	bl	241c <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    222a:	bf00      	nop
    222c:	b003      	add	sp, #12
    222e:	f85d fb04 	ldr.w	pc, [sp], #4

00002232 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2232:	b500      	push	{lr}
    2234:	b083      	sub	sp, #12
    2236:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2238:	9b01      	ldr	r3, [sp, #4]
    223a:	2b00      	cmp	r3, #0
    223c:	d002      	beq.n	2244 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    223e:	9801      	ldr	r0, [sp, #4]
    2240:	f000 f904 	bl	244c <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2244:	bf00      	nop
    2246:	b003      	add	sp, #12
    2248:	f85d fb04 	ldr.w	pc, [sp], #4

0000224c <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    224c:	b500      	push	{lr}
    224e:	b083      	sub	sp, #12
    2250:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2252:	9b01      	ldr	r3, [sp, #4]
    2254:	2b00      	cmp	r3, #0
    2256:	d002      	beq.n	225e <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2258:	9801      	ldr	r0, [sp, #4]
    225a:	f000 f90f 	bl	247c <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    225e:	bf00      	nop
    2260:	b003      	add	sp, #12
    2262:	f85d fb04 	ldr.w	pc, [sp], #4

00002266 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2266:	b500      	push	{lr}
    2268:	b083      	sub	sp, #12
    226a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    226c:	9b01      	ldr	r3, [sp, #4]
    226e:	2b00      	cmp	r3, #0
    2270:	d002      	beq.n	2278 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2272:	9801      	ldr	r0, [sp, #4]
    2274:	f000 f91a 	bl	24ac <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2278:	bf00      	nop
    227a:	b003      	add	sp, #12
    227c:	f85d fb04 	ldr.w	pc, [sp], #4

00002280 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2280:	b500      	push	{lr}
    2282:	b083      	sub	sp, #12
    2284:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2286:	9b01      	ldr	r3, [sp, #4]
    2288:	2b00      	cmp	r3, #0
    228a:	d002      	beq.n	2292 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    228c:	9801      	ldr	r0, [sp, #4]
    228e:	f000 f925 	bl	24dc <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2292:	bf00      	nop
    2294:	b003      	add	sp, #12
    2296:	f85d fb04 	ldr.w	pc, [sp], #4

0000229a <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    229a:	b500      	push	{lr}
    229c:	b083      	sub	sp, #12
    229e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22a0:	9b01      	ldr	r3, [sp, #4]
    22a2:	2b00      	cmp	r3, #0
    22a4:	d002      	beq.n	22ac <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    22a6:	9801      	ldr	r0, [sp, #4]
    22a8:	f000 f930 	bl	250c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22ac:	bf00      	nop
    22ae:	b003      	add	sp, #12
    22b0:	f85d fb04 	ldr.w	pc, [sp], #4

000022b4 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    22b4:	b500      	push	{lr}
    22b6:	b083      	sub	sp, #12
    22b8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22ba:	9b01      	ldr	r3, [sp, #4]
    22bc:	2b00      	cmp	r3, #0
    22be:	d002      	beq.n	22c6 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    22c0:	9801      	ldr	r0, [sp, #4]
    22c2:	f000 f93b 	bl	253c <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22c6:	bf00      	nop
    22c8:	b003      	add	sp, #12
    22ca:	f85d fb04 	ldr.w	pc, [sp], #4

000022ce <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    22ce:	b500      	push	{lr}
    22d0:	b083      	sub	sp, #12
    22d2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22d4:	9b01      	ldr	r3, [sp, #4]
    22d6:	2b00      	cmp	r3, #0
    22d8:	d002      	beq.n	22e0 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    22da:	9801      	ldr	r0, [sp, #4]
    22dc:	f000 f946 	bl	256c <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22e0:	bf00      	nop
    22e2:	b003      	add	sp, #12
    22e4:	f85d fb04 	ldr.w	pc, [sp], #4

000022e8 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    22e8:	b500      	push	{lr}
    22ea:	b083      	sub	sp, #12
    22ec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22ee:	9b01      	ldr	r3, [sp, #4]
    22f0:	2b00      	cmp	r3, #0
    22f2:	d002      	beq.n	22fa <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    22f4:	9801      	ldr	r0, [sp, #4]
    22f6:	f000 f951 	bl	259c <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22fa:	bf00      	nop
    22fc:	b003      	add	sp, #12
    22fe:	f85d fb04 	ldr.w	pc, [sp], #4

00002302 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2302:	b500      	push	{lr}
    2304:	b083      	sub	sp, #12
    2306:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2308:	9b01      	ldr	r3, [sp, #4]
    230a:	2b00      	cmp	r3, #0
    230c:	d002      	beq.n	2314 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    230e:	9801      	ldr	r0, [sp, #4]
    2310:	f000 f95e 	bl	25d0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2314:	bf00      	nop
    2316:	b003      	add	sp, #12
    2318:	f85d fb04 	ldr.w	pc, [sp], #4

0000231c <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    231c:	b500      	push	{lr}
    231e:	b083      	sub	sp, #12
    2320:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2322:	9b01      	ldr	r3, [sp, #4]
    2324:	2b00      	cmp	r3, #0
    2326:	d002      	beq.n	232e <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2328:	9801      	ldr	r0, [sp, #4]
    232a:	f000 f98b 	bl	2644 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    232e:	bf00      	nop
    2330:	b003      	add	sp, #12
    2332:	f85d fb04 	ldr.w	pc, [sp], #4

00002336 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2336:	b086      	sub	sp, #24
    2338:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    233a:	9b01      	ldr	r3, [sp, #4]
    233c:	681a      	ldr	r2, [r3, #0]
    233e:	4911      	ldr	r1, [pc, #68]	; (2384 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2340:	4613      	mov	r3, r2
    2342:	00db      	lsls	r3, r3, #3
    2344:	4413      	add	r3, r2
    2346:	440b      	add	r3, r1
    2348:	781b      	ldrb	r3, [r3, #0]
    234a:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    234c:	9b01      	ldr	r3, [sp, #4]
    234e:	685b      	ldr	r3, [r3, #4]
    2350:	4a0d      	ldr	r2, [pc, #52]	; (2388 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2352:	5cd3      	ldrb	r3, [r2, r3]
    2354:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2356:	4a0d      	ldr	r2, [pc, #52]	; (238c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2358:	9b05      	ldr	r3, [sp, #20]
    235a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    235e:	681b      	ldr	r3, [r3, #0]
    2360:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2362:	9b03      	ldr	r3, [sp, #12]
    2364:	f023 0307 	bic.w	r3, r3, #7
    2368:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    236a:	9a03      	ldr	r2, [sp, #12]
    236c:	9b04      	ldr	r3, [sp, #16]
    236e:	4313      	orrs	r3, r2
    2370:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2372:	4a06      	ldr	r2, [pc, #24]	; (238c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2374:	9b05      	ldr	r3, [sp, #20]
    2376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    237a:	9a03      	ldr	r2, [sp, #12]
    237c:	601a      	str	r2, [r3, #0]
}
    237e:	bf00      	nop
    2380:	b006      	add	sp, #24
    2382:	4770      	bx	lr
    2384:	0000e1e4 	.word	0x0000e1e4
    2388:	0000e5dc 	.word	0x0000e5dc
    238c:	0000e620 	.word	0x0000e620

00002390 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2390:	b086      	sub	sp, #24
    2392:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2394:	9b01      	ldr	r3, [sp, #4]
    2396:	681a      	ldr	r2, [r3, #0]
    2398:	4911      	ldr	r1, [pc, #68]	; (23e0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    239a:	4613      	mov	r3, r2
    239c:	00db      	lsls	r3, r3, #3
    239e:	4413      	add	r3, r2
    23a0:	440b      	add	r3, r1
    23a2:	781b      	ldrb	r3, [r3, #0]
    23a4:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    23a6:	9b01      	ldr	r3, [sp, #4]
    23a8:	685b      	ldr	r3, [r3, #4]
    23aa:	4a0e      	ldr	r2, [pc, #56]	; (23e4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    23ac:	5cd3      	ldrb	r3, [r2, r3]
    23ae:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    23b0:	4a0d      	ldr	r2, [pc, #52]	; (23e8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    23b2:	9b05      	ldr	r3, [sp, #20]
    23b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    23b8:	681b      	ldr	r3, [r3, #0]
    23ba:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    23bc:	9b03      	ldr	r3, [sp, #12]
    23be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    23c2:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    23c4:	9b04      	ldr	r3, [sp, #16]
    23c6:	021b      	lsls	r3, r3, #8
    23c8:	9a03      	ldr	r2, [sp, #12]
    23ca:	4313      	orrs	r3, r2
    23cc:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    23ce:	4a06      	ldr	r2, [pc, #24]	; (23e8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    23d0:	9b05      	ldr	r3, [sp, #20]
    23d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    23d6:	9a03      	ldr	r2, [sp, #12]
    23d8:	601a      	str	r2, [r3, #0]
}
    23da:	bf00      	nop
    23dc:	b006      	add	sp, #24
    23de:	4770      	bx	lr
    23e0:	0000e1e4 	.word	0x0000e1e4
    23e4:	0000e5dc 	.word	0x0000e5dc
    23e8:	0000e620 	.word	0x0000e620

000023ec <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    23ec:	b084      	sub	sp, #16
    23ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    23f0:	4b09      	ldr	r3, [pc, #36]	; (2418 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    23f2:	695b      	ldr	r3, [r3, #20]
    23f4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    23f6:	9b03      	ldr	r3, [sp, #12]
    23f8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    23fc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    23fe:	9b01      	ldr	r3, [sp, #4]
    2400:	685b      	ldr	r3, [r3, #4]
    2402:	3b01      	subs	r3, #1
    2404:	041b      	lsls	r3, r3, #16
    2406:	9a03      	ldr	r2, [sp, #12]
    2408:	4313      	orrs	r3, r2
    240a:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    240c:	4a02      	ldr	r2, [pc, #8]	; (2418 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    240e:	9b03      	ldr	r3, [sp, #12]
    2410:	6153      	str	r3, [r2, #20]
}
    2412:	bf00      	nop
    2414:	b004      	add	sp, #16
    2416:	4770      	bx	lr
    2418:	40064000 	.word	0x40064000

0000241c <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    241c:	b084      	sub	sp, #16
    241e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2420:	4b09      	ldr	r3, [pc, #36]	; (2448 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2422:	695b      	ldr	r3, [r3, #20]
    2424:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2426:	9b03      	ldr	r3, [sp, #12]
    2428:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    242c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    242e:	9b01      	ldr	r3, [sp, #4]
    2430:	685b      	ldr	r3, [r3, #4]
    2432:	3b01      	subs	r3, #1
    2434:	011b      	lsls	r3, r3, #4
    2436:	9a03      	ldr	r2, [sp, #12]
    2438:	4313      	orrs	r3, r2
    243a:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    243c:	4a02      	ldr	r2, [pc, #8]	; (2448 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    243e:	9b03      	ldr	r3, [sp, #12]
    2440:	6153      	str	r3, [r2, #20]
}
    2442:	bf00      	nop
    2444:	b004      	add	sp, #16
    2446:	4770      	bx	lr
    2448:	40064000 	.word	0x40064000

0000244c <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    244c:	b084      	sub	sp, #16
    244e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2450:	4b09      	ldr	r3, [pc, #36]	; (2478 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2452:	695b      	ldr	r3, [r3, #20]
    2454:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2456:	9b03      	ldr	r3, [sp, #12]
    2458:	f023 030f 	bic.w	r3, r3, #15
    245c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    245e:	9b01      	ldr	r3, [sp, #4]
    2460:	685b      	ldr	r3, [r3, #4]
    2462:	3b01      	subs	r3, #1
    2464:	9a03      	ldr	r2, [sp, #12]
    2466:	4313      	orrs	r3, r2
    2468:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    246a:	4a03      	ldr	r2, [pc, #12]	; (2478 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    246c:	9b03      	ldr	r3, [sp, #12]
    246e:	6153      	str	r3, [r2, #20]
}
    2470:	bf00      	nop
    2472:	b004      	add	sp, #16
    2474:	4770      	bx	lr
    2476:	bf00      	nop
    2478:	40064000 	.word	0x40064000

0000247c <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    247c:	b084      	sub	sp, #16
    247e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2480:	4b09      	ldr	r3, [pc, #36]	; (24a8 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2482:	699b      	ldr	r3, [r3, #24]
    2484:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2486:	9b03      	ldr	r3, [sp, #12]
    2488:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    248c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    248e:	9b01      	ldr	r3, [sp, #4]
    2490:	685b      	ldr	r3, [r3, #4]
    2492:	3b01      	subs	r3, #1
    2494:	041b      	lsls	r3, r3, #16
    2496:	9a03      	ldr	r2, [sp, #12]
    2498:	4313      	orrs	r3, r2
    249a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    249c:	4a02      	ldr	r2, [pc, #8]	; (24a8 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    249e:	9b03      	ldr	r3, [sp, #12]
    24a0:	6193      	str	r3, [r2, #24]
}
    24a2:	bf00      	nop
    24a4:	b004      	add	sp, #16
    24a6:	4770      	bx	lr
    24a8:	40064000 	.word	0x40064000

000024ac <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24ac:	b084      	sub	sp, #16
    24ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    24b0:	4b09      	ldr	r3, [pc, #36]	; (24d8 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    24b2:	699b      	ldr	r3, [r3, #24]
    24b4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    24b6:	9b03      	ldr	r3, [sp, #12]
    24b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    24bc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    24be:	9b01      	ldr	r3, [sp, #4]
    24c0:	685b      	ldr	r3, [r3, #4]
    24c2:	3b01      	subs	r3, #1
    24c4:	011b      	lsls	r3, r3, #4
    24c6:	9a03      	ldr	r2, [sp, #12]
    24c8:	4313      	orrs	r3, r2
    24ca:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    24cc:	4a02      	ldr	r2, [pc, #8]	; (24d8 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    24ce:	9b03      	ldr	r3, [sp, #12]
    24d0:	6193      	str	r3, [r2, #24]
}
    24d2:	bf00      	nop
    24d4:	b004      	add	sp, #16
    24d6:	4770      	bx	lr
    24d8:	40064000 	.word	0x40064000

000024dc <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24dc:	b084      	sub	sp, #16
    24de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    24e0:	4b09      	ldr	r3, [pc, #36]	; (2508 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    24e2:	699b      	ldr	r3, [r3, #24]
    24e4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    24e6:	9b03      	ldr	r3, [sp, #12]
    24e8:	f023 030f 	bic.w	r3, r3, #15
    24ec:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    24ee:	9b01      	ldr	r3, [sp, #4]
    24f0:	685b      	ldr	r3, [r3, #4]
    24f2:	3b01      	subs	r3, #1
    24f4:	9a03      	ldr	r2, [sp, #12]
    24f6:	4313      	orrs	r3, r2
    24f8:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    24fa:	4a03      	ldr	r2, [pc, #12]	; (2508 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    24fc:	9b03      	ldr	r3, [sp, #12]
    24fe:	6193      	str	r3, [r2, #24]
}
    2500:	bf00      	nop
    2502:	b004      	add	sp, #16
    2504:	4770      	bx	lr
    2506:	bf00      	nop
    2508:	40064000 	.word	0x40064000

0000250c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    250c:	b084      	sub	sp, #16
    250e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2510:	4b09      	ldr	r3, [pc, #36]	; (2538 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2512:	69db      	ldr	r3, [r3, #28]
    2514:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2516:	9b03      	ldr	r3, [sp, #12]
    2518:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    251c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    251e:	9b01      	ldr	r3, [sp, #4]
    2520:	685b      	ldr	r3, [r3, #4]
    2522:	3b01      	subs	r3, #1
    2524:	041b      	lsls	r3, r3, #16
    2526:	9a03      	ldr	r2, [sp, #12]
    2528:	4313      	orrs	r3, r2
    252a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    252c:	4a02      	ldr	r2, [pc, #8]	; (2538 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    252e:	9b03      	ldr	r3, [sp, #12]
    2530:	61d3      	str	r3, [r2, #28]
}
    2532:	bf00      	nop
    2534:	b004      	add	sp, #16
    2536:	4770      	bx	lr
    2538:	40064000 	.word	0x40064000

0000253c <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    253c:	b084      	sub	sp, #16
    253e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2540:	4b09      	ldr	r3, [pc, #36]	; (2568 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2542:	69db      	ldr	r3, [r3, #28]
    2544:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2546:	9b03      	ldr	r3, [sp, #12]
    2548:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    254c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    254e:	9b01      	ldr	r3, [sp, #4]
    2550:	685b      	ldr	r3, [r3, #4]
    2552:	3b01      	subs	r3, #1
    2554:	011b      	lsls	r3, r3, #4
    2556:	9a03      	ldr	r2, [sp, #12]
    2558:	4313      	orrs	r3, r2
    255a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    255c:	4a02      	ldr	r2, [pc, #8]	; (2568 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    255e:	9b03      	ldr	r3, [sp, #12]
    2560:	61d3      	str	r3, [r2, #28]
}
    2562:	bf00      	nop
    2564:	b004      	add	sp, #16
    2566:	4770      	bx	lr
    2568:	40064000 	.word	0x40064000

0000256c <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    256c:	b084      	sub	sp, #16
    256e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2570:	4b09      	ldr	r3, [pc, #36]	; (2598 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2572:	69db      	ldr	r3, [r3, #28]
    2574:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    2576:	9b03      	ldr	r3, [sp, #12]
    2578:	f023 030f 	bic.w	r3, r3, #15
    257c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    257e:	9b01      	ldr	r3, [sp, #4]
    2580:	685b      	ldr	r3, [r3, #4]
    2582:	3b01      	subs	r3, #1
    2584:	9a03      	ldr	r2, [sp, #12]
    2586:	4313      	orrs	r3, r2
    2588:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    258a:	4a03      	ldr	r2, [pc, #12]	; (2598 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    258c:	9b03      	ldr	r3, [sp, #12]
    258e:	61d3      	str	r3, [r2, #28]
}
    2590:	bf00      	nop
    2592:	b004      	add	sp, #16
    2594:	4770      	bx	lr
    2596:	bf00      	nop
    2598:	40064000 	.word	0x40064000

0000259c <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    259c:	b084      	sub	sp, #16
    259e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    25a0:	4b0a      	ldr	r3, [pc, #40]	; (25cc <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    25a2:	685b      	ldr	r3, [r3, #4]
    25a4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    25a6:	9b03      	ldr	r3, [sp, #12]
    25a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    25ac:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    25ae:	9b01      	ldr	r3, [sp, #4]
    25b0:	685b      	ldr	r3, [r3, #4]
    25b2:	3b01      	subs	r3, #1
    25b4:	021b      	lsls	r3, r3, #8
    25b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    25ba:	9a03      	ldr	r2, [sp, #12]
    25bc:	4313      	orrs	r3, r2
    25be:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    25c0:	4a02      	ldr	r2, [pc, #8]	; (25cc <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    25c2:	9b03      	ldr	r3, [sp, #12]
    25c4:	6053      	str	r3, [r2, #4]
}
    25c6:	bf00      	nop
    25c8:	b004      	add	sp, #16
    25ca:	4770      	bx	lr
    25cc:	40048000 	.word	0x40048000

000025d0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    25d0:	b084      	sub	sp, #16
    25d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    25d4:	4919      	ldr	r1, [pc, #100]	; (263c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    25d6:	9b01      	ldr	r3, [sp, #4]
    25d8:	681a      	ldr	r2, [r3, #0]
    25da:	4819      	ldr	r0, [pc, #100]	; (2640 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    25dc:	4613      	mov	r3, r2
    25de:	00db      	lsls	r3, r3, #3
    25e0:	4413      	add	r3, r2
    25e2:	4403      	add	r3, r0
    25e4:	3305      	adds	r3, #5
    25e6:	781b      	ldrb	r3, [r3, #0]
    25e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    25ec:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    25ee:	9b03      	ldr	r3, [sp, #12]
    25f0:	f023 030f 	bic.w	r3, r3, #15
    25f4:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    25f6:	9b01      	ldr	r3, [sp, #4]
    25f8:	685b      	ldr	r3, [r3, #4]
    25fa:	3b01      	subs	r3, #1
    25fc:	f003 0307 	and.w	r3, r3, #7
    2600:	9a03      	ldr	r2, [sp, #12]
    2602:	4313      	orrs	r3, r2
    2604:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    2606:	9b01      	ldr	r3, [sp, #4]
    2608:	7a1b      	ldrb	r3, [r3, #8]
    260a:	3b01      	subs	r3, #1
    260c:	00db      	lsls	r3, r3, #3
    260e:	f003 0308 	and.w	r3, r3, #8
    2612:	9a03      	ldr	r2, [sp, #12]
    2614:	4313      	orrs	r3, r2
    2616:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    2618:	4908      	ldr	r1, [pc, #32]	; (263c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    261a:	9b01      	ldr	r3, [sp, #4]
    261c:	681a      	ldr	r2, [r3, #0]
    261e:	4808      	ldr	r0, [pc, #32]	; (2640 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2620:	4613      	mov	r3, r2
    2622:	00db      	lsls	r3, r3, #3
    2624:	4413      	add	r3, r2
    2626:	4403      	add	r3, r0
    2628:	3305      	adds	r3, #5
    262a:	781b      	ldrb	r3, [r3, #0]
    262c:	461a      	mov	r2, r3
    262e:	9b03      	ldr	r3, [sp, #12]
    2630:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    2634:	bf00      	nop
    2636:	b004      	add	sp, #16
    2638:	4770      	bx	lr
    263a:	bf00      	nop
    263c:	40065000 	.word	0x40065000
    2640:	0000e1e4 	.word	0x0000e1e4

00002644 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2644:	b084      	sub	sp, #16
    2646:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2648:	4b10      	ldr	r3, [pc, #64]	; (268c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    264a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    264c:	4a0f      	ldr	r2, [pc, #60]	; (268c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    264e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2652:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    2654:	4b0d      	ldr	r3, [pc, #52]	; (268c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2658:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    265a:	9b03      	ldr	r3, [sp, #12]
    265c:	f023 030f 	bic.w	r3, r3, #15
    2660:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2662:	9b01      	ldr	r3, [sp, #4]
    2664:	685b      	ldr	r3, [r3, #4]
    2666:	3b01      	subs	r3, #1
    2668:	005b      	lsls	r3, r3, #1
    266a:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    266e:	9b01      	ldr	r3, [sp, #4]
    2670:	7a1b      	ldrb	r3, [r3, #8]
    2672:	3b01      	subs	r3, #1
    2674:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2678:	4313      	orrs	r3, r2
    267a:	9a03      	ldr	r2, [sp, #12]
    267c:	4313      	orrs	r3, r2
    267e:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    2680:	4a02      	ldr	r2, [pc, #8]	; (268c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2682:	9b03      	ldr	r3, [sp, #12]
    2684:	6693      	str	r3, [r2, #104]	; 0x68
}
    2686:	bf00      	nop
    2688:	b004      	add	sp, #16
    268a:	4770      	bx	lr
    268c:	40048000 	.word	0x40048000

00002690 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    2690:	b082      	sub	sp, #8
    2692:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2694:	bf00      	nop
    2696:	b002      	add	sp, #8
    2698:	4770      	bx	lr
	...

0000269c <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    269c:	b082      	sub	sp, #8
    269e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    26a0:	bf00      	nop
    26a2:	b002      	add	sp, #8
    26a4:	4770      	bx	lr

000026a6 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    26a6:	b082      	sub	sp, #8
    26a8:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    26aa:	bf00      	nop
    26ac:	b002      	add	sp, #8
    26ae:	4770      	bx	lr

000026b0 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    26b0:	b500      	push	{lr}
    26b2:	b083      	sub	sp, #12
    26b4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26b6:	9b01      	ldr	r3, [sp, #4]
    26b8:	2b00      	cmp	r3, #0
    26ba:	d002      	beq.n	26c2 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    26bc:	9801      	ldr	r0, [sp, #4]
    26be:	f000 f86a 	bl	2796 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    26c2:	bf00      	nop
    26c4:	b003      	add	sp, #12
    26c6:	f85d fb04 	ldr.w	pc, [sp], #4

000026ca <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    26ca:	b500      	push	{lr}
    26cc:	b083      	sub	sp, #12
    26ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26d0:	9b01      	ldr	r3, [sp, #4]
    26d2:	2b00      	cmp	r3, #0
    26d4:	d002      	beq.n	26dc <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    26d6:	9801      	ldr	r0, [sp, #4]
    26d8:	f000 f884 	bl	27e4 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    26dc:	bf00      	nop
    26de:	b003      	add	sp, #12
    26e0:	f85d fb04 	ldr.w	pc, [sp], #4

000026e4 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    26e4:	b500      	push	{lr}
    26e6:	b089      	sub	sp, #36	; 0x24
    26e8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    26ea:	2300      	movs	r3, #0
    26ec:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    26f0:	9b01      	ldr	r3, [sp, #4]
    26f2:	2b00      	cmp	r3, #0
    26f4:	d031      	beq.n	275a <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    26f6:	4b1b      	ldr	r3, [pc, #108]	; (2764 <Clock_Ip_CompleteSOSC+0x80>)
    26f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    26fc:	f003 0301 	and.w	r3, r3, #1
    2700:	2b00      	cmp	r3, #0
    2702:	d02a      	beq.n	275a <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2704:	aa03      	add	r2, sp, #12
    2706:	a904      	add	r1, sp, #16
    2708:	a805      	add	r0, sp, #20
    270a:	f24c 3350 	movw	r3, #50000	; 0xc350
    270e:	f7ff fd1d 	bl	214c <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    2712:	4b14      	ldr	r3, [pc, #80]	; (2764 <Clock_Ip_CompleteSOSC+0x80>)
    2714:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2718:	0e1b      	lsrs	r3, r3, #24
    271a:	f003 0301 	and.w	r3, r3, #1
    271e:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2720:	9a03      	ldr	r2, [sp, #12]
    2722:	a904      	add	r1, sp, #16
    2724:	ab05      	add	r3, sp, #20
    2726:	4618      	mov	r0, r3
    2728:	f7ff fd2a 	bl	2180 <Clock_Ip_TimeoutExpired>
    272c:	4603      	mov	r3, r0
    272e:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    2732:	9b06      	ldr	r3, [sp, #24]
    2734:	2b00      	cmp	r3, #0
    2736:	d106      	bne.n	2746 <Clock_Ip_CompleteSOSC+0x62>
    2738:	f89d 301f 	ldrb.w	r3, [sp, #31]
    273c:	f083 0301 	eor.w	r3, r3, #1
    2740:	b2db      	uxtb	r3, r3
    2742:	2b00      	cmp	r3, #0
    2744:	d1e5      	bne.n	2712 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    2746:	f89d 301f 	ldrb.w	r3, [sp, #31]
    274a:	2b00      	cmp	r3, #0
    274c:	d005      	beq.n	275a <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    274e:	9b01      	ldr	r3, [sp, #4]
    2750:	681b      	ldr	r3, [r3, #0]
    2752:	4619      	mov	r1, r3
    2754:	2001      	movs	r0, #1
    2756:	f7ff fce9 	bl	212c <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    275a:	bf00      	nop
    275c:	b009      	add	sp, #36	; 0x24
    275e:	f85d fb04 	ldr.w	pc, [sp], #4
    2762:	bf00      	nop
    2764:	40064000 	.word	0x40064000

00002768 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    2768:	b500      	push	{lr}
    276a:	b083      	sub	sp, #12
    276c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    276e:	9801      	ldr	r0, [sp, #4]
    2770:	f000 f8c0 	bl	28f4 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2774:	bf00      	nop
    2776:	b003      	add	sp, #12
    2778:	f85d fb04 	ldr.w	pc, [sp], #4

0000277c <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    277c:	b500      	push	{lr}
    277e:	b083      	sub	sp, #12
    2780:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2782:	9b01      	ldr	r3, [sp, #4]
    2784:	2b00      	cmp	r3, #0
    2786:	d002      	beq.n	278e <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    2788:	9801      	ldr	r0, [sp, #4]
    278a:	f000 f8c3 	bl	2914 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    278e:	bf00      	nop
    2790:	b003      	add	sp, #12
    2792:	f85d fb04 	ldr.w	pc, [sp], #4

00002796 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2796:	b082      	sub	sp, #8
    2798:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    279a:	4b11      	ldr	r3, [pc, #68]	; (27e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    279c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27a0:	4a0f      	ldr	r2, [pc, #60]	; (27e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    27a6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    27aa:	4b0d      	ldr	r3, [pc, #52]	; (27e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27b0:	4a0b      	ldr	r2, [pc, #44]	; (27e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    27b6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    27ba:	4b09      	ldr	r3, [pc, #36]	; (27e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27c0:	4a07      	ldr	r2, [pc, #28]	; (27e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    27c6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    27ca:	4b05      	ldr	r3, [pc, #20]	; (27e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27d0:	4a03      	ldr	r2, [pc, #12]	; (27e0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27d2:	f023 0301 	bic.w	r3, r3, #1
    27d6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    27da:	bf00      	nop
    27dc:	b002      	add	sp, #8
    27de:	4770      	bx	lr
    27e0:	40064000 	.word	0x40064000

000027e4 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    27e4:	b082      	sub	sp, #8
    27e6:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    27e8:	9b01      	ldr	r3, [sp, #4]
    27ea:	891b      	ldrh	r3, [r3, #8]
    27ec:	2b01      	cmp	r3, #1
    27ee:	d174      	bne.n	28da <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    27f0:	9b01      	ldr	r3, [sp, #4]
    27f2:	7bdb      	ldrb	r3, [r3, #15]
    27f4:	2b00      	cmp	r3, #0
    27f6:	d002      	beq.n	27fe <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    27f8:	2b01      	cmp	r3, #1
    27fa:	d009      	beq.n	2810 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    27fc:	e011      	b.n	2822 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    27fe:	4b39      	ldr	r3, [pc, #228]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2800:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2804:	4a37      	ldr	r2, [pc, #220]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2806:	f023 0308 	bic.w	r3, r3, #8
    280a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    280e:	e008      	b.n	2822 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    2810:	4b34      	ldr	r3, [pc, #208]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2812:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2816:	4a33      	ldr	r2, [pc, #204]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2818:	f043 0308 	orr.w	r3, r3, #8
    281c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2820:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    2822:	4b30      	ldr	r3, [pc, #192]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2824:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2828:	4a2e      	ldr	r2, [pc, #184]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    282a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    282e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    2832:	9b01      	ldr	r3, [sp, #4]
    2834:	685b      	ldr	r3, [r3, #4]
    2836:	4a2c      	ldr	r2, [pc, #176]	; (28e8 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    2838:	4293      	cmp	r3, r2
    283a:	d90d      	bls.n	2858 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    283c:	9b01      	ldr	r3, [sp, #4]
    283e:	685b      	ldr	r3, [r3, #4]
    2840:	4a2a      	ldr	r2, [pc, #168]	; (28ec <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    2842:	4293      	cmp	r3, r2
    2844:	d208      	bcs.n	2858 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    2846:	4b27      	ldr	r3, [pc, #156]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2848:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    284c:	4a25      	ldr	r2, [pc, #148]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    284e:	f043 0320 	orr.w	r3, r3, #32
    2852:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2856:	e007      	b.n	2868 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    2858:	4b22      	ldr	r3, [pc, #136]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    285a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    285e:	4a21      	ldr	r2, [pc, #132]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2860:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    2864:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    2868:	9b01      	ldr	r3, [sp, #4]
    286a:	7b1b      	ldrb	r3, [r3, #12]
    286c:	2b00      	cmp	r3, #0
    286e:	d108      	bne.n	2882 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    2870:	4b1c      	ldr	r3, [pc, #112]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2872:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2876:	4a1b      	ldr	r2, [pc, #108]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2878:	f043 0304 	orr.w	r3, r3, #4
    287c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2880:	e007      	b.n	2892 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    2882:	4b18      	ldr	r3, [pc, #96]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2884:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2888:	4a16      	ldr	r2, [pc, #88]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    288a:	f023 0304 	bic.w	r3, r3, #4
    288e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    2892:	9b01      	ldr	r3, [sp, #4]
    2894:	7c1b      	ldrb	r3, [r3, #16]
    2896:	2b02      	cmp	r3, #2
    2898:	d011      	beq.n	28be <Clock_Ip_SetSOSC_TrustedCall+0xda>
    289a:	2b02      	cmp	r3, #2
    289c:	dc14      	bgt.n	28c8 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    289e:	2b00      	cmp	r3, #0
    28a0:	d002      	beq.n	28a8 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    28a2:	2b01      	cmp	r3, #1
    28a4:	d005      	beq.n	28b2 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    28a6:	e00f      	b.n	28c8 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    28a8:	4b0e      	ldr	r3, [pc, #56]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28aa:	2201      	movs	r2, #1
    28ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    28b0:	e014      	b.n	28dc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    28b2:	4b0c      	ldr	r3, [pc, #48]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28b4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    28b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    28bc:	e00e      	b.n	28dc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    28be:	4b09      	ldr	r3, [pc, #36]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28c0:	4a0b      	ldr	r2, [pc, #44]	; (28f0 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    28c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    28c6:	e009      	b.n	28dc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    28c8:	4b06      	ldr	r3, [pc, #24]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28ca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    28ce:	4a05      	ldr	r2, [pc, #20]	; (28e4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28d0:	f043 0301 	orr.w	r3, r3, #1
    28d4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    28d8:	e000      	b.n	28dc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    28da:	bf00      	nop
}
    28dc:	bf00      	nop
    28de:	b002      	add	sp, #8
    28e0:	4770      	bx	lr
    28e2:	bf00      	nop
    28e4:	40064000 	.word	0x40064000
    28e8:	003d08ff 	.word	0x003d08ff
    28ec:	007a1200 	.word	0x007a1200
    28f0:	00030001 	.word	0x00030001

000028f4 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    28f4:	b082      	sub	sp, #8
    28f6:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    28f8:	4b05      	ldr	r3, [pc, #20]	; (2910 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    28fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    28fe:	4a04      	ldr	r2, [pc, #16]	; (2910 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2900:	f023 0301 	bic.w	r3, r3, #1
    2904:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2908:	bf00      	nop
    290a:	b002      	add	sp, #8
    290c:	4770      	bx	lr
    290e:	bf00      	nop
    2910:	40064000 	.word	0x40064000

00002914 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2914:	b082      	sub	sp, #8
    2916:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2918:	9b01      	ldr	r3, [sp, #4]
    291a:	891b      	ldrh	r3, [r3, #8]
    291c:	2b01      	cmp	r3, #1
    291e:	d107      	bne.n	2930 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2920:	4b05      	ldr	r3, [pc, #20]	; (2938 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2922:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2926:	4a04      	ldr	r2, [pc, #16]	; (2938 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2928:	f043 0301 	orr.w	r3, r3, #1
    292c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    2930:	bf00      	nop
    2932:	b002      	add	sp, #8
    2934:	4770      	bx	lr
    2936:	bf00      	nop
    2938:	40064000 	.word	0x40064000

0000293c <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    293c:	b082      	sub	sp, #8
    293e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2940:	bf00      	nop
    2942:	b002      	add	sp, #8
    2944:	4770      	bx	lr

00002946 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    2946:	b082      	sub	sp, #8
    2948:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    294a:	2300      	movs	r3, #0
}
    294c:	4618      	mov	r0, r3
    294e:	b002      	add	sp, #8
    2950:	4770      	bx	lr

00002952 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    2952:	b082      	sub	sp, #8
    2954:	9001      	str	r0, [sp, #4]
    2956:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    2958:	bf00      	nop
    295a:	b002      	add	sp, #8
    295c:	4770      	bx	lr
	...

00002960 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    2960:	b082      	sub	sp, #8
    2962:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2964:	bf00      	nop
    2966:	b002      	add	sp, #8
    2968:	4770      	bx	lr

0000296a <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    296a:	b082      	sub	sp, #8
    296c:	9001      	str	r0, [sp, #4]
    296e:	460b      	mov	r3, r1
    2970:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    2974:	bf00      	nop
    2976:	b002      	add	sp, #8
    2978:	4770      	bx	lr

0000297a <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    297a:	b500      	push	{lr}
    297c:	b083      	sub	sp, #12
    297e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2980:	9b01      	ldr	r3, [sp, #4]
    2982:	2b00      	cmp	r3, #0
    2984:	d002      	beq.n	298c <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    2986:	9801      	ldr	r0, [sp, #4]
    2988:	f000 f8e7 	bl	2b5a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    298c:	bf00      	nop
    298e:	b003      	add	sp, #12
    2990:	f85d fb04 	ldr.w	pc, [sp], #4

00002994 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2994:	b500      	push	{lr}
    2996:	b085      	sub	sp, #20
    2998:	9001      	str	r0, [sp, #4]
    299a:	460b      	mov	r3, r1
    299c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    29a0:	9b01      	ldr	r3, [sp, #4]
    29a2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    29a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    29a8:	2b00      	cmp	r3, #0
    29aa:	d003      	beq.n	29b4 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    29ac:	2300      	movs	r3, #0
    29ae:	f8ad 300c 	strh.w	r3, [sp, #12]
    29b2:	e002      	b.n	29ba <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    29b4:	2301      	movs	r3, #1
    29b6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    29ba:	ab02      	add	r3, sp, #8
    29bc:	4618      	mov	r0, r3
    29be:	f7ff ffdc 	bl	297a <Clock_Ip_ClockSetSimLPO1KEnable>
}
    29c2:	bf00      	nop
    29c4:	b005      	add	sp, #20
    29c6:	f85d fb04 	ldr.w	pc, [sp], #4

000029ca <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    29ca:	b500      	push	{lr}
    29cc:	b083      	sub	sp, #12
    29ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    29d0:	9b01      	ldr	r3, [sp, #4]
    29d2:	2b00      	cmp	r3, #0
    29d4:	d002      	beq.n	29dc <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    29d6:	9801      	ldr	r0, [sp, #4]
    29d8:	f000 f8d6 	bl	2b88 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    29dc:	bf00      	nop
    29de:	b003      	add	sp, #12
    29e0:	f85d fb04 	ldr.w	pc, [sp], #4

000029e4 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    29e4:	b500      	push	{lr}
    29e6:	b085      	sub	sp, #20
    29e8:	9001      	str	r0, [sp, #4]
    29ea:	460b      	mov	r3, r1
    29ec:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    29f0:	9b01      	ldr	r3, [sp, #4]
    29f2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    29f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    29f8:	2b00      	cmp	r3, #0
    29fa:	d003      	beq.n	2a04 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    29fc:	2300      	movs	r3, #0
    29fe:	f8ad 300c 	strh.w	r3, [sp, #12]
    2a02:	e002      	b.n	2a0a <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2a04:	2301      	movs	r3, #1
    2a06:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    2a0a:	ab02      	add	r3, sp, #8
    2a0c:	4618      	mov	r0, r3
    2a0e:	f7ff ffdc 	bl	29ca <Clock_Ip_ClockSetSimLPO32KEnable>
}
    2a12:	bf00      	nop
    2a14:	b005      	add	sp, #20
    2a16:	f85d fb04 	ldr.w	pc, [sp], #4

00002a1a <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    2a1a:	b500      	push	{lr}
    2a1c:	b083      	sub	sp, #12
    2a1e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a20:	9b01      	ldr	r3, [sp, #4]
    2a22:	2b00      	cmp	r3, #0
    2a24:	d002      	beq.n	2a2c <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    2a26:	9801      	ldr	r0, [sp, #4]
    2a28:	f000 f8c6 	bl	2bb8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a2c:	bf00      	nop
    2a2e:	b003      	add	sp, #12
    2a30:	f85d fb04 	ldr.w	pc, [sp], #4

00002a34 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a34:	b500      	push	{lr}
    2a36:	b085      	sub	sp, #20
    2a38:	9001      	str	r0, [sp, #4]
    2a3a:	460b      	mov	r3, r1
    2a3c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2a40:	9b01      	ldr	r3, [sp, #4]
    2a42:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2a44:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2a48:	2b00      	cmp	r3, #0
    2a4a:	d003      	beq.n	2a54 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    2a4c:	2300      	movs	r3, #0
    2a4e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2a52:	e002      	b.n	2a5a <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2a54:	2301      	movs	r3, #1
    2a56:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    2a5a:	ab02      	add	r3, sp, #8
    2a5c:	4618      	mov	r0, r3
    2a5e:	f7ff ffdc 	bl	2a1a <Clock_Ip_ClockSetSimClkoutEnable>
}
    2a62:	bf00      	nop
    2a64:	b005      	add	sp, #20
    2a66:	f85d fb04 	ldr.w	pc, [sp], #4

00002a6a <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    2a6a:	b500      	push	{lr}
    2a6c:	b083      	sub	sp, #12
    2a6e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a70:	9b01      	ldr	r3, [sp, #4]
    2a72:	2b00      	cmp	r3, #0
    2a74:	d002      	beq.n	2a7c <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    2a76:	9801      	ldr	r0, [sp, #4]
    2a78:	f000 f8b6 	bl	2be8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a7c:	bf00      	nop
    2a7e:	b003      	add	sp, #12
    2a80:	f85d fb04 	ldr.w	pc, [sp], #4

00002a84 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a84:	b500      	push	{lr}
    2a86:	b085      	sub	sp, #20
    2a88:	9001      	str	r0, [sp, #4]
    2a8a:	460b      	mov	r3, r1
    2a8c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2a90:	9b01      	ldr	r3, [sp, #4]
    2a92:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2a94:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2a98:	2b00      	cmp	r3, #0
    2a9a:	d003      	beq.n	2aa4 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    2a9c:	2300      	movs	r3, #0
    2a9e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2aa2:	e002      	b.n	2aaa <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2aa4:	2301      	movs	r3, #1
    2aa6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    2aaa:	ab02      	add	r3, sp, #8
    2aac:	4618      	mov	r0, r3
    2aae:	f7ff ffdc 	bl	2a6a <Clock_Ip_ClockSetPccCgcEnable>
}
    2ab2:	bf00      	nop
    2ab4:	b005      	add	sp, #20
    2ab6:	f85d fb04 	ldr.w	pc, [sp], #4

00002aba <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    2aba:	b500      	push	{lr}
    2abc:	b083      	sub	sp, #12
    2abe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ac0:	9b01      	ldr	r3, [sp, #4]
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	d002      	beq.n	2acc <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    2ac6:	9801      	ldr	r0, [sp, #4]
    2ac8:	f000 f8bc 	bl	2c44 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2acc:	bf00      	nop
    2ace:	b003      	add	sp, #12
    2ad0:	f85d fb04 	ldr.w	pc, [sp], #4

00002ad4 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    2ad4:	b500      	push	{lr}
    2ad6:	b085      	sub	sp, #20
    2ad8:	9001      	str	r0, [sp, #4]
    2ada:	460b      	mov	r3, r1
    2adc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2ae0:	9b01      	ldr	r3, [sp, #4]
    2ae2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2ae4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2ae8:	2b00      	cmp	r3, #0
    2aea:	d003      	beq.n	2af4 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    2aec:	2300      	movs	r3, #0
    2aee:	f8ad 300c 	strh.w	r3, [sp, #12]
    2af2:	e002      	b.n	2afa <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2af4:	2301      	movs	r3, #1
    2af6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    2afa:	ab02      	add	r3, sp, #8
    2afc:	4618      	mov	r0, r3
    2afe:	f7ff ffdc 	bl	2aba <Clock_Ip_ClockSetSimGate>
}
    2b02:	bf00      	nop
    2b04:	b005      	add	sp, #20
    2b06:	f85d fb04 	ldr.w	pc, [sp], #4

00002b0a <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    2b0a:	b500      	push	{lr}
    2b0c:	b083      	sub	sp, #12
    2b0e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b10:	9b01      	ldr	r3, [sp, #4]
    2b12:	2b00      	cmp	r3, #0
    2b14:	d002      	beq.n	2b1c <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    2b16:	9801      	ldr	r0, [sp, #4]
    2b18:	f000 f8c0 	bl	2c9c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b1c:	bf00      	nop
    2b1e:	b003      	add	sp, #12
    2b20:	f85d fb04 	ldr.w	pc, [sp], #4

00002b24 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2b24:	b500      	push	{lr}
    2b26:	b085      	sub	sp, #20
    2b28:	9001      	str	r0, [sp, #4]
    2b2a:	460b      	mov	r3, r1
    2b2c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2b30:	9b01      	ldr	r3, [sp, #4]
    2b32:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2b34:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2b38:	2b00      	cmp	r3, #0
    2b3a:	d003      	beq.n	2b44 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    2b3c:	2300      	movs	r3, #0
    2b3e:	f8ad 300c 	strh.w	r3, [sp, #12]
    2b42:	e002      	b.n	2b4a <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2b44:	2301      	movs	r3, #1
    2b46:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    2b4a:	ab02      	add	r3, sp, #8
    2b4c:	4618      	mov	r0, r3
    2b4e:	f7ff ffdc 	bl	2b0a <Clock_Ip_ClockSetSimTraceEnable>
}
    2b52:	bf00      	nop
    2b54:	b005      	add	sp, #20
    2b56:	f85d fb04 	ldr.w	pc, [sp], #4

00002b5a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2b5a:	b084      	sub	sp, #16
    2b5c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2b5e:	4b09      	ldr	r3, [pc, #36]	; (2b84 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2b60:	691b      	ldr	r3, [r3, #16]
    2b62:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    2b64:	9b03      	ldr	r3, [sp, #12]
    2b66:	f023 0301 	bic.w	r3, r3, #1
    2b6a:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    2b6c:	9b01      	ldr	r3, [sp, #4]
    2b6e:	889b      	ldrh	r3, [r3, #4]
    2b70:	461a      	mov	r2, r3
    2b72:	9b03      	ldr	r3, [sp, #12]
    2b74:	4313      	orrs	r3, r2
    2b76:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2b78:	4a02      	ldr	r2, [pc, #8]	; (2b84 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2b7a:	9b03      	ldr	r3, [sp, #12]
    2b7c:	6113      	str	r3, [r2, #16]
}
    2b7e:	bf00      	nop
    2b80:	b004      	add	sp, #16
    2b82:	4770      	bx	lr
    2b84:	40048000 	.word	0x40048000

00002b88 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2b88:	b084      	sub	sp, #16
    2b8a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2b8c:	4b09      	ldr	r3, [pc, #36]	; (2bb4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2b8e:	691b      	ldr	r3, [r3, #16]
    2b90:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    2b92:	9b03      	ldr	r3, [sp, #12]
    2b94:	f023 0302 	bic.w	r3, r3, #2
    2b98:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    2b9a:	9b01      	ldr	r3, [sp, #4]
    2b9c:	889b      	ldrh	r3, [r3, #4]
    2b9e:	005b      	lsls	r3, r3, #1
    2ba0:	9a03      	ldr	r2, [sp, #12]
    2ba2:	4313      	orrs	r3, r2
    2ba4:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2ba6:	4a03      	ldr	r2, [pc, #12]	; (2bb4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2ba8:	9b03      	ldr	r3, [sp, #12]
    2baa:	6113      	str	r3, [r2, #16]
}
    2bac:	bf00      	nop
    2bae:	b004      	add	sp, #16
    2bb0:	4770      	bx	lr
    2bb2:	bf00      	nop
    2bb4:	40048000 	.word	0x40048000

00002bb8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2bb8:	b084      	sub	sp, #16
    2bba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2bbc:	4b09      	ldr	r3, [pc, #36]	; (2be4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2bbe:	685b      	ldr	r3, [r3, #4]
    2bc0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    2bc2:	9b03      	ldr	r3, [sp, #12]
    2bc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2bc8:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    2bca:	9b01      	ldr	r3, [sp, #4]
    2bcc:	889b      	ldrh	r3, [r3, #4]
    2bce:	02db      	lsls	r3, r3, #11
    2bd0:	9a03      	ldr	r2, [sp, #12]
    2bd2:	4313      	orrs	r3, r2
    2bd4:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2bd6:	4a03      	ldr	r2, [pc, #12]	; (2be4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2bd8:	9b03      	ldr	r3, [sp, #12]
    2bda:	6053      	str	r3, [r2, #4]
}
    2bdc:	bf00      	nop
    2bde:	b004      	add	sp, #16
    2be0:	4770      	bx	lr
    2be2:	bf00      	nop
    2be4:	40048000 	.word	0x40048000

00002be8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2be8:	b084      	sub	sp, #16
    2bea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    2bec:	4913      	ldr	r1, [pc, #76]	; (2c3c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2bee:	9b01      	ldr	r3, [sp, #4]
    2bf0:	681a      	ldr	r2, [r3, #0]
    2bf2:	4813      	ldr	r0, [pc, #76]	; (2c40 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2bf4:	4613      	mov	r3, r2
    2bf6:	00db      	lsls	r3, r3, #3
    2bf8:	4413      	add	r3, r2
    2bfa:	4403      	add	r3, r0
    2bfc:	3306      	adds	r3, #6
    2bfe:	781b      	ldrb	r3, [r3, #0]
    2c00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2c04:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    2c06:	9b03      	ldr	r3, [sp, #12]
    2c08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    2c0c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    2c0e:	9b01      	ldr	r3, [sp, #4]
    2c10:	889b      	ldrh	r3, [r3, #4]
    2c12:	079b      	lsls	r3, r3, #30
    2c14:	9a03      	ldr	r2, [sp, #12]
    2c16:	4313      	orrs	r3, r2
    2c18:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    2c1a:	4908      	ldr	r1, [pc, #32]	; (2c3c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2c1c:	9b01      	ldr	r3, [sp, #4]
    2c1e:	681a      	ldr	r2, [r3, #0]
    2c20:	4807      	ldr	r0, [pc, #28]	; (2c40 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2c22:	4613      	mov	r3, r2
    2c24:	00db      	lsls	r3, r3, #3
    2c26:	4413      	add	r3, r2
    2c28:	4403      	add	r3, r0
    2c2a:	3306      	adds	r3, #6
    2c2c:	781b      	ldrb	r3, [r3, #0]
    2c2e:	461a      	mov	r2, r3
    2c30:	9b03      	ldr	r3, [sp, #12]
    2c32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    2c36:	bf00      	nop
    2c38:	b004      	add	sp, #16
    2c3a:	4770      	bx	lr
    2c3c:	40065000 	.word	0x40065000
    2c40:	0000e1e4 	.word	0x0000e1e4

00002c44 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2c44:	b086      	sub	sp, #24
    2c46:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    2c48:	9b01      	ldr	r3, [sp, #4]
    2c4a:	889b      	ldrh	r3, [r3, #4]
    2c4c:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    2c4e:	9b01      	ldr	r3, [sp, #4]
    2c50:	681a      	ldr	r2, [r3, #0]
    2c52:	4910      	ldr	r1, [pc, #64]	; (2c94 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    2c54:	4613      	mov	r3, r2
    2c56:	00db      	lsls	r3, r3, #3
    2c58:	4413      	add	r3, r2
    2c5a:	440b      	add	r3, r1
    2c5c:	3306      	adds	r3, #6
    2c5e:	781b      	ldrb	r3, [r3, #0]
    2c60:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    2c62:	4b0d      	ldr	r3, [pc, #52]	; (2c98 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2c66:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    2c68:	2201      	movs	r2, #1
    2c6a:	9b04      	ldr	r3, [sp, #16]
    2c6c:	fa02 f303 	lsl.w	r3, r2, r3
    2c70:	43db      	mvns	r3, r3
    2c72:	9a03      	ldr	r2, [sp, #12]
    2c74:	4013      	ands	r3, r2
    2c76:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    2c78:	9a05      	ldr	r2, [sp, #20]
    2c7a:	9b04      	ldr	r3, [sp, #16]
    2c7c:	fa02 f303 	lsl.w	r3, r2, r3
    2c80:	9a03      	ldr	r2, [sp, #12]
    2c82:	4313      	orrs	r3, r2
    2c84:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    2c86:	4a04      	ldr	r2, [pc, #16]	; (2c98 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2c88:	9b03      	ldr	r3, [sp, #12]
    2c8a:	6413      	str	r3, [r2, #64]	; 0x40
}
    2c8c:	bf00      	nop
    2c8e:	b006      	add	sp, #24
    2c90:	4770      	bx	lr
    2c92:	bf00      	nop
    2c94:	0000e1e4 	.word	0x0000e1e4
    2c98:	40048000 	.word	0x40048000

00002c9c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2c9c:	b084      	sub	sp, #16
    2c9e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    2ca0:	4b0a      	ldr	r3, [pc, #40]	; (2ccc <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2ca4:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    2ca6:	9b01      	ldr	r3, [sp, #4]
    2ca8:	889b      	ldrh	r3, [r3, #4]
    2caa:	2b01      	cmp	r3, #1
    2cac:	d104      	bne.n	2cb8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    2cae:	9b03      	ldr	r3, [sp, #12]
    2cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2cb4:	9303      	str	r3, [sp, #12]
    2cb6:	e003      	b.n	2cc0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2cb8:	9b03      	ldr	r3, [sp, #12]
    2cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2cbe:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    2cc0:	4a02      	ldr	r2, [pc, #8]	; (2ccc <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2cc2:	9b03      	ldr	r3, [sp, #12]
    2cc4:	6693      	str	r3, [r2, #104]	; 0x68
}
    2cc6:	bf00      	nop
    2cc8:	b004      	add	sp, #16
    2cca:	4770      	bx	lr
    2ccc:	40048000 	.word	0x40048000

00002cd0 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    2cd0:	b082      	sub	sp, #8
    2cd2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2cd4:	bf00      	nop
    2cd6:	b002      	add	sp, #8
    2cd8:	4770      	bx	lr

00002cda <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    2cda:	b082      	sub	sp, #8
    2cdc:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2cde:	bf00      	nop
    2ce0:	b002      	add	sp, #8
    2ce2:	4770      	bx	lr

00002ce4 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2ce4:	b500      	push	{lr}
    2ce6:	b083      	sub	sp, #12
    2ce8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cea:	9b01      	ldr	r3, [sp, #4]
    2cec:	2b00      	cmp	r3, #0
    2cee:	d002      	beq.n	2cf6 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    2cf0:	9801      	ldr	r0, [sp, #4]
    2cf2:	f000 f8d1 	bl	2e98 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cf6:	bf00      	nop
    2cf8:	b003      	add	sp, #12
    2cfa:	f85d fb04 	ldr.w	pc, [sp], #4

00002cfe <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2cfe:	b500      	push	{lr}
    2d00:	b083      	sub	sp, #12
    2d02:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d04:	9b01      	ldr	r3, [sp, #4]
    2d06:	2b00      	cmp	r3, #0
    2d08:	d002      	beq.n	2d10 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    2d0a:	9801      	ldr	r0, [sp, #4]
    2d0c:	f000 f950 	bl	2fb0 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d10:	bf00      	nop
    2d12:	b003      	add	sp, #12
    2d14:	f85d fb04 	ldr.w	pc, [sp], #4

00002d18 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    2d18:	b500      	push	{lr}
    2d1a:	b083      	sub	sp, #12
    2d1c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    2d1e:	9801      	ldr	r0, [sp, #4]
    2d20:	f000 f98e 	bl	3040 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2d24:	bf00      	nop
    2d26:	b003      	add	sp, #12
    2d28:	f85d fb04 	ldr.w	pc, [sp], #4

00002d2c <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2d2c:	b500      	push	{lr}
    2d2e:	b083      	sub	sp, #12
    2d30:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d32:	9b01      	ldr	r3, [sp, #4]
    2d34:	2b00      	cmp	r3, #0
    2d36:	d002      	beq.n	2d3e <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    2d38:	9801      	ldr	r0, [sp, #4]
    2d3a:	f000 f999 	bl	3070 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d3e:	bf00      	nop
    2d40:	b003      	add	sp, #12
    2d42:	f85d fb04 	ldr.w	pc, [sp], #4

00002d46 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2d46:	b500      	push	{lr}
    2d48:	b083      	sub	sp, #12
    2d4a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d4c:	9b01      	ldr	r3, [sp, #4]
    2d4e:	2b00      	cmp	r3, #0
    2d50:	d002      	beq.n	2d58 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    2d52:	9801      	ldr	r0, [sp, #4]
    2d54:	f000 f9b0 	bl	30b8 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d58:	bf00      	nop
    2d5a:	b003      	add	sp, #12
    2d5c:	f85d fb04 	ldr.w	pc, [sp], #4

00002d60 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    2d60:	b500      	push	{lr}
    2d62:	b083      	sub	sp, #12
    2d64:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    2d66:	9801      	ldr	r0, [sp, #4]
    2d68:	f000 f9ba 	bl	30e0 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2d6c:	bf00      	nop
    2d6e:	b003      	add	sp, #12
    2d70:	f85d fb04 	ldr.w	pc, [sp], #4

00002d74 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2d74:	b500      	push	{lr}
    2d76:	b083      	sub	sp, #12
    2d78:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d7a:	9b01      	ldr	r3, [sp, #4]
    2d7c:	2b00      	cmp	r3, #0
    2d7e:	d002      	beq.n	2d86 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    2d80:	9801      	ldr	r0, [sp, #4]
    2d82:	f000 f9bd 	bl	3100 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d86:	bf00      	nop
    2d88:	b003      	add	sp, #12
    2d8a:	f85d fb04 	ldr.w	pc, [sp], #4

00002d8e <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2d8e:	b500      	push	{lr}
    2d90:	b083      	sub	sp, #12
    2d92:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d94:	9b01      	ldr	r3, [sp, #4]
    2d96:	2b00      	cmp	r3, #0
    2d98:	d002      	beq.n	2da0 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    2d9a:	9801      	ldr	r0, [sp, #4]
    2d9c:	f000 f9d4 	bl	3148 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2da0:	bf00      	nop
    2da2:	b003      	add	sp, #12
    2da4:	f85d fb04 	ldr.w	pc, [sp], #4

00002da8 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    2da8:	b500      	push	{lr}
    2daa:	b083      	sub	sp, #12
    2dac:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    2dae:	9801      	ldr	r0, [sp, #4]
    2db0:	f000 f9de 	bl	3170 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2db4:	bf00      	nop
    2db6:	b003      	add	sp, #12
    2db8:	f85d fb04 	ldr.w	pc, [sp], #4

00002dbc <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    2dbc:	b500      	push	{lr}
    2dbe:	b089      	sub	sp, #36	; 0x24
    2dc0:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    2dc2:	2300      	movs	r3, #0
    2dc4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    2dc8:	4b20      	ldr	r3, [pc, #128]	; (2e4c <SetInputSouceSytemClock+0x90>)
    2dca:	695b      	ldr	r3, [r3, #20]
    2dcc:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    2dce:	9b06      	ldr	r3, [sp, #24]
    2dd0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    2dd4:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    2dd6:	9b01      	ldr	r3, [sp, #4]
    2dd8:	061b      	lsls	r3, r3, #24
    2dda:	9a06      	ldr	r2, [sp, #24]
    2ddc:	4313      	orrs	r3, r2
    2dde:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    2de0:	4a1a      	ldr	r2, [pc, #104]	; (2e4c <SetInputSouceSytemClock+0x90>)
    2de2:	9b06      	ldr	r3, [sp, #24]
    2de4:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2de6:	aa02      	add	r2, sp, #8
    2de8:	a903      	add	r1, sp, #12
    2dea:	a804      	add	r0, sp, #16
    2dec:	f24c 3350 	movw	r3, #50000	; 0xc350
    2df0:	f7ff f9ac 	bl	214c <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    2df4:	4b15      	ldr	r3, [pc, #84]	; (2e4c <SetInputSouceSytemClock+0x90>)
    2df6:	691b      	ldr	r3, [r3, #16]
    2df8:	0e1b      	lsrs	r3, r3, #24
    2dfa:	f003 030f 	and.w	r3, r3, #15
    2dfe:	9a01      	ldr	r2, [sp, #4]
    2e00:	429a      	cmp	r2, r3
    2e02:	bf0c      	ite	eq
    2e04:	2301      	moveq	r3, #1
    2e06:	2300      	movne	r3, #0
    2e08:	b2db      	uxtb	r3, r3
    2e0a:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2e0c:	9a02      	ldr	r2, [sp, #8]
    2e0e:	a903      	add	r1, sp, #12
    2e10:	ab04      	add	r3, sp, #16
    2e12:	4618      	mov	r0, r3
    2e14:	f7ff f9b4 	bl	2180 <Clock_Ip_TimeoutExpired>
    2e18:	4603      	mov	r3, r0
    2e1a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    2e1e:	9b05      	ldr	r3, [sp, #20]
    2e20:	2b00      	cmp	r3, #0
    2e22:	d106      	bne.n	2e32 <SetInputSouceSytemClock+0x76>
    2e24:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e28:	f083 0301 	eor.w	r3, r3, #1
    2e2c:	b2db      	uxtb	r3, r3
    2e2e:	2b00      	cmp	r3, #0
    2e30:	d1e0      	bne.n	2df4 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    2e32:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e36:	2b00      	cmp	r3, #0
    2e38:	d003      	beq.n	2e42 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    2e3a:	2105      	movs	r1, #5
    2e3c:	2001      	movs	r0, #1
    2e3e:	f7ff f975 	bl	212c <Clock_Ip_ReportClockErrors>
    }
}
    2e42:	bf00      	nop
    2e44:	b009      	add	sp, #36	; 0x24
    2e46:	f85d fb04 	ldr.w	pc, [sp], #4
    2e4a:	bf00      	nop
    2e4c:	40064000 	.word	0x40064000

00002e50 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2e50:	b500      	push	{lr}
    2e52:	b083      	sub	sp, #12
    2e54:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e56:	9b01      	ldr	r3, [sp, #4]
    2e58:	2b00      	cmp	r3, #0
    2e5a:	d002      	beq.n	2e62 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    2e5c:	9801      	ldr	r0, [sp, #4]
    2e5e:	f000 f997 	bl	3190 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e62:	bf00      	nop
    2e64:	b003      	add	sp, #12
    2e66:	f85d fb04 	ldr.w	pc, [sp], #4

00002e6a <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2e6a:	b500      	push	{lr}
    2e6c:	b083      	sub	sp, #12
    2e6e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e70:	9b01      	ldr	r3, [sp, #4]
    2e72:	2b00      	cmp	r3, #0
    2e74:	d002      	beq.n	2e7c <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    2e76:	9801      	ldr	r0, [sp, #4]
    2e78:	f000 fa7e 	bl	3378 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e7c:	bf00      	nop
    2e7e:	b003      	add	sp, #12
    2e80:	f85d fb04 	ldr.w	pc, [sp], #4

00002e84 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    2e84:	b500      	push	{lr}
    2e86:	b083      	sub	sp, #12
    2e88:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    2e8a:	9801      	ldr	r0, [sp, #4]
    2e8c:	f000 fab8 	bl	3400 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2e90:	bf00      	nop
    2e92:	b003      	add	sp, #12
    2e94:	f85d fb04 	ldr.w	pc, [sp], #4

00002e98 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2e98:	b500      	push	{lr}
    2e9a:	b08b      	sub	sp, #44	; 0x2c
    2e9c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2e9e:	2300      	movs	r3, #0
    2ea0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    2ea4:	9b01      	ldr	r3, [sp, #4]
    2ea6:	2b00      	cmp	r3, #0
    2ea8:	d10b      	bne.n	2ec2 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    2eaa:	2305      	movs	r3, #5
    2eac:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    2eae:	2301      	movs	r3, #1
    2eb0:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    2eb4:	2301      	movs	r3, #1
    2eb6:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    2eba:	2301      	movs	r3, #1
    2ebc:	f88d 3010 	strb.w	r3, [sp, #16]
    2ec0:	e00e      	b.n	2ee0 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    2ec2:	9b01      	ldr	r3, [sp, #4]
    2ec4:	681b      	ldr	r3, [r3, #0]
    2ec6:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    2ec8:	9b01      	ldr	r3, [sp, #4]
    2eca:	79db      	ldrb	r3, [r3, #7]
    2ecc:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    2ed0:	9b01      	ldr	r3, [sp, #4]
    2ed2:	889b      	ldrh	r3, [r3, #4]
    2ed4:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    2ed8:	9b01      	ldr	r3, [sp, #4]
    2eda:	7a1b      	ldrb	r3, [r3, #8]
    2edc:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2ee0:	4b32      	ldr	r3, [pc, #200]	; (2fac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ee2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ee6:	4a31      	ldr	r2, [pc, #196]	; (2fac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ee8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2eec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    2ef0:	4b2e      	ldr	r3, [pc, #184]	; (2fac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ef2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ef6:	4a2d      	ldr	r2, [pc, #180]	; (2fac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ef8:	f023 0301 	bic.w	r3, r3, #1
    2efc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2f00:	4b2a      	ldr	r3, [pc, #168]	; (2fac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f06:	4a29      	ldr	r2, [pc, #164]	; (2fac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f08:	f023 0304 	bic.w	r3, r3, #4
    2f0c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    2f10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    2f14:	2b01      	cmp	r3, #1
    2f16:	d144      	bne.n	2fa2 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    2f18:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2f1c:	4a23      	ldr	r2, [pc, #140]	; (2fac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f1e:	f003 0301 	and.w	r3, r3, #1
    2f22:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2f26:	4b21      	ldr	r3, [pc, #132]	; (2fac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f2c:	4a1f      	ldr	r2, [pc, #124]	; (2fac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f2e:	f043 0301 	orr.w	r3, r3, #1
    2f32:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    2f36:	4b1d      	ldr	r3, [pc, #116]	; (2fac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f38:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2f3c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2f40:	009b      	lsls	r3, r3, #2
    2f42:	f003 0304 	and.w	r3, r3, #4
    2f46:	4919      	ldr	r1, [pc, #100]	; (2fac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f48:	4313      	orrs	r3, r2
    2f4a:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2f4e:	aa05      	add	r2, sp, #20
    2f50:	a906      	add	r1, sp, #24
    2f52:	a807      	add	r0, sp, #28
    2f54:	f24c 3350 	movw	r3, #50000	; 0xc350
    2f58:	f7ff f8f8 	bl	214c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2f5c:	4b13      	ldr	r3, [pc, #76]	; (2fac <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f62:	0e1b      	lsrs	r3, r3, #24
    2f64:	f003 0301 	and.w	r3, r3, #1
    2f68:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2f6a:	9a05      	ldr	r2, [sp, #20]
    2f6c:	a906      	add	r1, sp, #24
    2f6e:	ab07      	add	r3, sp, #28
    2f70:	4618      	mov	r0, r3
    2f72:	f7ff f905 	bl	2180 <Clock_Ip_TimeoutExpired>
    2f76:	4603      	mov	r3, r0
    2f78:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2f7c:	9b08      	ldr	r3, [sp, #32]
    2f7e:	2b00      	cmp	r3, #0
    2f80:	d106      	bne.n	2f90 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    2f82:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2f86:	f083 0301 	eor.w	r3, r3, #1
    2f8a:	b2db      	uxtb	r3, r3
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	d1e5      	bne.n	2f5c <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    2f90:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2f94:	2b00      	cmp	r3, #0
    2f96:	d004      	beq.n	2fa2 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    2f98:	9b02      	ldr	r3, [sp, #8]
    2f9a:	4619      	mov	r1, r3
    2f9c:	2001      	movs	r0, #1
    2f9e:	f7ff f8c5 	bl	212c <Clock_Ip_ReportClockErrors>
        }
    }
}
    2fa2:	bf00      	nop
    2fa4:	b00b      	add	sp, #44	; 0x2c
    2fa6:	f85d fb04 	ldr.w	pc, [sp], #4
    2faa:	bf00      	nop
    2fac:	40064000 	.word	0x40064000

00002fb0 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2fb0:	b500      	push	{lr}
    2fb2:	b089      	sub	sp, #36	; 0x24
    2fb4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2fb6:	2300      	movs	r3, #0
    2fb8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2fbc:	4b1f      	ldr	r3, [pc, #124]	; (303c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fc2:	4a1e      	ldr	r2, [pc, #120]	; (303c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fc4:	f043 0301 	orr.w	r3, r3, #1
    2fc8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    2fcc:	4b1b      	ldr	r3, [pc, #108]	; (303c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fd2:	4a1a      	ldr	r2, [pc, #104]	; (303c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fd4:	f043 0304 	orr.w	r3, r3, #4
    2fd8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2fdc:	aa03      	add	r2, sp, #12
    2fde:	a904      	add	r1, sp, #16
    2fe0:	a805      	add	r0, sp, #20
    2fe2:	f24c 3350 	movw	r3, #50000	; 0xc350
    2fe6:	f7ff f8b1 	bl	214c <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2fea:	4b14      	ldr	r3, [pc, #80]	; (303c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2fec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ff0:	0e1b      	lsrs	r3, r3, #24
    2ff2:	f003 0301 	and.w	r3, r3, #1
    2ff6:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2ff8:	9a03      	ldr	r2, [sp, #12]
    2ffa:	a904      	add	r1, sp, #16
    2ffc:	ab05      	add	r3, sp, #20
    2ffe:	4618      	mov	r0, r3
    3000:	f7ff f8be 	bl	2180 <Clock_Ip_TimeoutExpired>
    3004:	4603      	mov	r3, r0
    3006:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    300a:	9b06      	ldr	r3, [sp, #24]
    300c:	2b00      	cmp	r3, #0
    300e:	d106      	bne.n	301e <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3010:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3014:	f083 0301 	eor.w	r3, r3, #1
    3018:	b2db      	uxtb	r3, r3
    301a:	2b00      	cmp	r3, #0
    301c:	d1e5      	bne.n	2fea <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    301e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3022:	2b00      	cmp	r3, #0
    3024:	d005      	beq.n	3032 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3026:	9b01      	ldr	r3, [sp, #4]
    3028:	681b      	ldr	r3, [r3, #0]
    302a:	4619      	mov	r1, r3
    302c:	2001      	movs	r0, #1
    302e:	f7ff f87d 	bl	212c <Clock_Ip_ReportClockErrors>
    }
}
    3032:	bf00      	nop
    3034:	b009      	add	sp, #36	; 0x24
    3036:	f85d fb04 	ldr.w	pc, [sp], #4
    303a:	bf00      	nop
    303c:	40064000 	.word	0x40064000

00003040 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3040:	b082      	sub	sp, #8
    3042:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3044:	4b09      	ldr	r3, [pc, #36]	; (306c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3046:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    304a:	4a08      	ldr	r2, [pc, #32]	; (306c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    304c:	f023 0301 	bic.w	r3, r3, #1
    3050:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3054:	4b05      	ldr	r3, [pc, #20]	; (306c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3056:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    305a:	4a04      	ldr	r2, [pc, #16]	; (306c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    305c:	f023 0304 	bic.w	r3, r3, #4
    3060:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3064:	bf00      	nop
    3066:	b002      	add	sp, #8
    3068:	4770      	bx	lr
    306a:	bf00      	nop
    306c:	40064000 	.word	0x40064000

00003070 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3070:	b082      	sub	sp, #8
    3072:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3074:	4b0f      	ldr	r3, [pc, #60]	; (30b4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3076:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    307a:	4a0e      	ldr	r2, [pc, #56]	; (30b4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    307c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3080:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3084:	4b0b      	ldr	r3, [pc, #44]	; (30b4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3086:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    308a:	4a0a      	ldr	r2, [pc, #40]	; (30b4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    308c:	f023 0304 	bic.w	r3, r3, #4
    3090:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3094:	4b07      	ldr	r3, [pc, #28]	; (30b4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3096:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    309a:	9b01      	ldr	r3, [sp, #4]
    309c:	7a1b      	ldrb	r3, [r3, #8]
    309e:	009b      	lsls	r3, r3, #2
    30a0:	f003 0304 	and.w	r3, r3, #4
    30a4:	4903      	ldr	r1, [pc, #12]	; (30b4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    30a6:	4313      	orrs	r3, r2
    30a8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    30ac:	bf00      	nop
    30ae:	b002      	add	sp, #8
    30b0:	4770      	bx	lr
    30b2:	bf00      	nop
    30b4:	40064000 	.word	0x40064000

000030b8 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    30b8:	b082      	sub	sp, #8
    30ba:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    30bc:	9b01      	ldr	r3, [sp, #4]
    30be:	889b      	ldrh	r3, [r3, #4]
    30c0:	2b01      	cmp	r3, #1
    30c2:	d107      	bne.n	30d4 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    30c4:	4b05      	ldr	r3, [pc, #20]	; (30dc <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    30c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30ca:	4a04      	ldr	r2, [pc, #16]	; (30dc <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    30cc:	f043 0304 	orr.w	r3, r3, #4
    30d0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    30d4:	bf00      	nop
    30d6:	b002      	add	sp, #8
    30d8:	4770      	bx	lr
    30da:	bf00      	nop
    30dc:	40064000 	.word	0x40064000

000030e0 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    30e0:	b082      	sub	sp, #8
    30e2:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    30e4:	4b05      	ldr	r3, [pc, #20]	; (30fc <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    30e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30ea:	4a04      	ldr	r2, [pc, #16]	; (30fc <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    30ec:	f023 0304 	bic.w	r3, r3, #4
    30f0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    30f4:	bf00      	nop
    30f6:	b002      	add	sp, #8
    30f8:	4770      	bx	lr
    30fa:	bf00      	nop
    30fc:	40064000 	.word	0x40064000

00003100 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3100:	b082      	sub	sp, #8
    3102:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3104:	4b0f      	ldr	r3, [pc, #60]	; (3144 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3106:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    310a:	4a0e      	ldr	r2, [pc, #56]	; (3144 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    310c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3110:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3114:	4b0b      	ldr	r3, [pc, #44]	; (3144 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3116:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    311a:	4a0a      	ldr	r2, [pc, #40]	; (3144 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    311c:	f023 0302 	bic.w	r3, r3, #2
    3120:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3124:	4b07      	ldr	r3, [pc, #28]	; (3144 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3126:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    312a:	9b01      	ldr	r3, [sp, #4]
    312c:	7a5b      	ldrb	r3, [r3, #9]
    312e:	005b      	lsls	r3, r3, #1
    3130:	f003 0302 	and.w	r3, r3, #2
    3134:	4903      	ldr	r1, [pc, #12]	; (3144 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3136:	4313      	orrs	r3, r2
    3138:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    313c:	bf00      	nop
    313e:	b002      	add	sp, #8
    3140:	4770      	bx	lr
    3142:	bf00      	nop
    3144:	40064000 	.word	0x40064000

00003148 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3148:	b082      	sub	sp, #8
    314a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    314c:	9b01      	ldr	r3, [sp, #4]
    314e:	889b      	ldrh	r3, [r3, #4]
    3150:	2b01      	cmp	r3, #1
    3152:	d107      	bne.n	3164 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3154:	4b05      	ldr	r3, [pc, #20]	; (316c <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3156:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    315a:	4a04      	ldr	r2, [pc, #16]	; (316c <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    315c:	f043 0302 	orr.w	r3, r3, #2
    3160:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3164:	bf00      	nop
    3166:	b002      	add	sp, #8
    3168:	4770      	bx	lr
    316a:	bf00      	nop
    316c:	40064000 	.word	0x40064000

00003170 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3170:	b082      	sub	sp, #8
    3172:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3174:	4b05      	ldr	r3, [pc, #20]	; (318c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3176:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    317a:	4a04      	ldr	r2, [pc, #16]	; (318c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    317c:	f023 0302 	bic.w	r3, r3, #2
    3180:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3184:	bf00      	nop
    3186:	b002      	add	sp, #8
    3188:	4770      	bx	lr
    318a:	bf00      	nop
    318c:	40064000 	.word	0x40064000

00003190 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3190:	b500      	push	{lr}
    3192:	b08b      	sub	sp, #44	; 0x2c
    3194:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3196:	9b01      	ldr	r3, [sp, #4]
    3198:	681a      	ldr	r2, [r3, #0]
    319a:	4975      	ldr	r1, [pc, #468]	; (3370 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    319c:	4613      	mov	r3, r2
    319e:	00db      	lsls	r3, r3, #3
    31a0:	4413      	add	r3, r2
    31a2:	440b      	add	r3, r1
    31a4:	781b      	ldrb	r3, [r3, #0]
    31a6:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    31a8:	2300      	movs	r3, #0
    31aa:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    31ae:	2300      	movs	r3, #0
    31b0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    31b4:	4b6f      	ldr	r3, [pc, #444]	; (3374 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    31ba:	4a6e      	ldr	r2, [pc, #440]	; (3374 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    31c0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    31c4:	4b6b      	ldr	r3, [pc, #428]	; (3374 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    31ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    31ce:	2b00      	cmp	r3, #0
    31d0:	d07d      	beq.n	32ce <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    31d2:	9b01      	ldr	r3, [sp, #4]
    31d4:	79db      	ldrb	r3, [r3, #7]
    31d6:	461a      	mov	r2, r3
    31d8:	4b66      	ldr	r3, [pc, #408]	; (3374 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31da:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    31de:	f003 0303 	and.w	r3, r3, #3
    31e2:	429a      	cmp	r2, r3
    31e4:	d10b      	bne.n	31fe <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    31e6:	9b01      	ldr	r3, [sp, #4]
    31e8:	799b      	ldrb	r3, [r3, #6]
    31ea:	461a      	mov	r2, r3
    31ec:	4b61      	ldr	r3, [pc, #388]	; (3374 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    31f2:	08db      	lsrs	r3, r3, #3
    31f4:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    31f8:	429a      	cmp	r2, r3
    31fa:	f000 80b4 	beq.w	3366 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    31fe:	4b5d      	ldr	r3, [pc, #372]	; (3374 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3200:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3204:	f003 0301 	and.w	r3, r3, #1
    3208:	2b00      	cmp	r3, #0
    320a:	d105      	bne.n	3218 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    320c:	2301      	movs	r3, #1
    320e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3212:	2000      	movs	r0, #0
    3214:	f7ff fd66 	bl	2ce4 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3218:	2002      	movs	r0, #2
    321a:	f7ff fdcf 	bl	2dbc <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    321e:	4b55      	ldr	r3, [pc, #340]	; (3374 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3220:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3224:	4a53      	ldr	r2, [pc, #332]	; (3374 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3226:	f023 0301 	bic.w	r3, r3, #1
    322a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    322e:	9b01      	ldr	r3, [sp, #4]
    3230:	889b      	ldrh	r3, [r3, #4]
    3232:	2b01      	cmp	r3, #1
    3234:	f040 8097 	bne.w	3366 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3238:	9b01      	ldr	r3, [sp, #4]
    323a:	79db      	ldrb	r3, [r3, #7]
    323c:	4a4d      	ldr	r2, [pc, #308]	; (3374 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    323e:	f003 0303 	and.w	r3, r3, #3
    3242:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3246:	4b4b      	ldr	r3, [pc, #300]	; (3374 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3248:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    324c:	9b01      	ldr	r3, [sp, #4]
    324e:	799b      	ldrb	r3, [r3, #6]
    3250:	00db      	lsls	r3, r3, #3
    3252:	f003 0308 	and.w	r3, r3, #8
    3256:	4313      	orrs	r3, r2
    3258:	4a46      	ldr	r2, [pc, #280]	; (3374 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    325a:	f043 0301 	orr.w	r3, r3, #1
    325e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3262:	aa03      	add	r2, sp, #12
    3264:	a904      	add	r1, sp, #16
    3266:	a805      	add	r0, sp, #20
    3268:	f24c 3350 	movw	r3, #50000	; 0xc350
    326c:	f7fe ff6e 	bl	214c <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3270:	4b40      	ldr	r3, [pc, #256]	; (3374 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3272:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3276:	0e1b      	lsrs	r3, r3, #24
    3278:	f003 0301 	and.w	r3, r3, #1
    327c:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    327e:	9a03      	ldr	r2, [sp, #12]
    3280:	a904      	add	r1, sp, #16
    3282:	ab05      	add	r3, sp, #20
    3284:	4618      	mov	r0, r3
    3286:	f7fe ff7b 	bl	2180 <Clock_Ip_TimeoutExpired>
    328a:	4603      	mov	r3, r0
    328c:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3290:	9b06      	ldr	r3, [sp, #24]
    3292:	2b00      	cmp	r3, #0
    3294:	d106      	bne.n	32a4 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3296:	f89d 301f 	ldrb.w	r3, [sp, #31]
    329a:	f083 0301 	eor.w	r3, r3, #1
    329e:	b2db      	uxtb	r3, r3
    32a0:	2b00      	cmp	r3, #0
    32a2:	d1e5      	bne.n	3270 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    32a4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    32a8:	2b00      	cmp	r3, #0
    32aa:	d005      	beq.n	32b8 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    32ac:	9b01      	ldr	r3, [sp, #4]
    32ae:	681b      	ldr	r3, [r3, #0]
    32b0:	4619      	mov	r1, r3
    32b2:	2001      	movs	r0, #1
    32b4:	f7fe ff3a 	bl	212c <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    32b8:	2003      	movs	r0, #3
    32ba:	f7ff fd7f 	bl	2dbc <SetInputSouceSytemClock>

                if (SircWasDisabled)
    32be:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    32c2:	2b00      	cmp	r3, #0
    32c4:	d04f      	beq.n	3366 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    32c6:	2002      	movs	r0, #2
    32c8:	f7ff fd26 	bl	2d18 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    32cc:	e04b      	b.n	3366 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    32ce:	4b29      	ldr	r3, [pc, #164]	; (3374 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32d0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    32d4:	4a27      	ldr	r2, [pc, #156]	; (3374 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32d6:	f023 0301 	bic.w	r3, r3, #1
    32da:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    32de:	9b01      	ldr	r3, [sp, #4]
    32e0:	889b      	ldrh	r3, [r3, #4]
    32e2:	2b01      	cmp	r3, #1
    32e4:	d13f      	bne.n	3366 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    32e6:	9b01      	ldr	r3, [sp, #4]
    32e8:	79db      	ldrb	r3, [r3, #7]
    32ea:	4a22      	ldr	r2, [pc, #136]	; (3374 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32ec:	f003 0303 	and.w	r3, r3, #3
    32f0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    32f4:	4b1f      	ldr	r3, [pc, #124]	; (3374 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32f6:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    32fa:	9b01      	ldr	r3, [sp, #4]
    32fc:	799b      	ldrb	r3, [r3, #6]
    32fe:	00db      	lsls	r3, r3, #3
    3300:	f003 0308 	and.w	r3, r3, #8
    3304:	4313      	orrs	r3, r2
    3306:	4a1b      	ldr	r2, [pc, #108]	; (3374 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3308:	f043 0301 	orr.w	r3, r3, #1
    330c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3310:	aa03      	add	r2, sp, #12
    3312:	a904      	add	r1, sp, #16
    3314:	a805      	add	r0, sp, #20
    3316:	f24c 3350 	movw	r3, #50000	; 0xc350
    331a:	f7fe ff17 	bl	214c <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    331e:	4b15      	ldr	r3, [pc, #84]	; (3374 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3320:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3324:	0e1b      	lsrs	r3, r3, #24
    3326:	f003 0301 	and.w	r3, r3, #1
    332a:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    332c:	9a03      	ldr	r2, [sp, #12]
    332e:	a904      	add	r1, sp, #16
    3330:	ab05      	add	r3, sp, #20
    3332:	4618      	mov	r0, r3
    3334:	f7fe ff24 	bl	2180 <Clock_Ip_TimeoutExpired>
    3338:	4603      	mov	r3, r0
    333a:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    333e:	9b06      	ldr	r3, [sp, #24]
    3340:	2b00      	cmp	r3, #0
    3342:	d106      	bne.n	3352 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3344:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3348:	f083 0301 	eor.w	r3, r3, #1
    334c:	b2db      	uxtb	r3, r3
    334e:	2b00      	cmp	r3, #0
    3350:	d1e5      	bne.n	331e <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3352:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3356:	2b00      	cmp	r3, #0
    3358:	d005      	beq.n	3366 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    335a:	9b01      	ldr	r3, [sp, #4]
    335c:	681b      	ldr	r3, [r3, #0]
    335e:	4619      	mov	r1, r3
    3360:	2001      	movs	r0, #1
    3362:	f7fe fee3 	bl	212c <Clock_Ip_ReportClockErrors>
}
    3366:	bf00      	nop
    3368:	b00b      	add	sp, #44	; 0x2c
    336a:	f85d fb04 	ldr.w	pc, [sp], #4
    336e:	bf00      	nop
    3370:	0000e1e4 	.word	0x0000e1e4
    3374:	40064000 	.word	0x40064000

00003378 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3378:	b500      	push	{lr}
    337a:	b089      	sub	sp, #36	; 0x24
    337c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    337e:	2300      	movs	r3, #0
    3380:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3384:	9b01      	ldr	r3, [sp, #4]
    3386:	889b      	ldrh	r3, [r3, #4]
    3388:	2b01      	cmp	r3, #1
    338a:	d132      	bne.n	33f2 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    338c:	4b1b      	ldr	r3, [pc, #108]	; (33fc <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    338e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3392:	4a1a      	ldr	r2, [pc, #104]	; (33fc <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3394:	f043 0301 	orr.w	r3, r3, #1
    3398:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    339c:	aa03      	add	r2, sp, #12
    339e:	a904      	add	r1, sp, #16
    33a0:	a805      	add	r0, sp, #20
    33a2:	f24c 3350 	movw	r3, #50000	; 0xc350
    33a6:	f7fe fed1 	bl	214c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    33aa:	4b14      	ldr	r3, [pc, #80]	; (33fc <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    33ac:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    33b0:	0e1b      	lsrs	r3, r3, #24
    33b2:	f003 0301 	and.w	r3, r3, #1
    33b6:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    33b8:	9a03      	ldr	r2, [sp, #12]
    33ba:	a904      	add	r1, sp, #16
    33bc:	ab05      	add	r3, sp, #20
    33be:	4618      	mov	r0, r3
    33c0:	f7fe fede 	bl	2180 <Clock_Ip_TimeoutExpired>
    33c4:	4603      	mov	r3, r0
    33c6:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    33ca:	9b06      	ldr	r3, [sp, #24]
    33cc:	2b00      	cmp	r3, #0
    33ce:	d106      	bne.n	33de <Clock_Ip_EnableFirc_TrustedCall+0x66>
    33d0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33d4:	f083 0301 	eor.w	r3, r3, #1
    33d8:	b2db      	uxtb	r3, r3
    33da:	2b00      	cmp	r3, #0
    33dc:	d1e5      	bne.n	33aa <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    33de:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33e2:	2b00      	cmp	r3, #0
    33e4:	d005      	beq.n	33f2 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    33e6:	9b01      	ldr	r3, [sp, #4]
    33e8:	681b      	ldr	r3, [r3, #0]
    33ea:	4619      	mov	r1, r3
    33ec:	2001      	movs	r0, #1
    33ee:	f7fe fe9d 	bl	212c <Clock_Ip_ReportClockErrors>
        }
    }
}
    33f2:	bf00      	nop
    33f4:	b009      	add	sp, #36	; 0x24
    33f6:	f85d fb04 	ldr.w	pc, [sp], #4
    33fa:	bf00      	nop
    33fc:	40064000 	.word	0x40064000

00003400 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3400:	b082      	sub	sp, #8
    3402:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3404:	4b05      	ldr	r3, [pc, #20]	; (341c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3406:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    340a:	4a04      	ldr	r2, [pc, #16]	; (341c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    340c:	f023 0301 	bic.w	r3, r3, #1
    3410:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3414:	bf00      	nop
    3416:	b002      	add	sp, #8
    3418:	4770      	bx	lr
    341a:	bf00      	nop
    341c:	40064000 	.word	0x40064000

00003420 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3420:	b082      	sub	sp, #8
    3422:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3424:	bf00      	nop
    3426:	b002      	add	sp, #8
    3428:	4770      	bx	lr

0000342a <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    342a:	b082      	sub	sp, #8
    342c:	9001      	str	r0, [sp, #4]
    342e:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3430:	bf00      	nop
    3432:	b002      	add	sp, #8
    3434:	4770      	bx	lr

00003436 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3436:	b082      	sub	sp, #8
    3438:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    343a:	bf00      	nop
    343c:	b002      	add	sp, #8
    343e:	4770      	bx	lr

00003440 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3440:	b082      	sub	sp, #8
    3442:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3444:	bf00      	nop
    3446:	b002      	add	sp, #8
    3448:	4770      	bx	lr

0000344a <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    344a:	b082      	sub	sp, #8
    344c:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    344e:	2302      	movs	r3, #2
}
    3450:	4618      	mov	r0, r3
    3452:	b002      	add	sp, #8
    3454:	4770      	bx	lr

00003456 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3456:	b082      	sub	sp, #8
    3458:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    345a:	bf00      	nop
    345c:	b002      	add	sp, #8
    345e:	4770      	bx	lr

00003460 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3460:	b500      	push	{lr}
    3462:	b083      	sub	sp, #12
    3464:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3466:	9b01      	ldr	r3, [sp, #4]
    3468:	2b00      	cmp	r3, #0
    346a:	d002      	beq.n	3472 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    346c:	9801      	ldr	r0, [sp, #4]
    346e:	f000 f870 	bl	3552 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3472:	bf00      	nop
    3474:	b003      	add	sp, #12
    3476:	f85d fb04 	ldr.w	pc, [sp], #4

0000347a <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    347a:	b500      	push	{lr}
    347c:	b083      	sub	sp, #12
    347e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3480:	9b01      	ldr	r3, [sp, #4]
    3482:	2b00      	cmp	r3, #0
    3484:	d002      	beq.n	348c <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3486:	9801      	ldr	r0, [sp, #4]
    3488:	f000 f89a 	bl	35c0 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    348c:	bf00      	nop
    348e:	b003      	add	sp, #12
    3490:	f85d fb04 	ldr.w	pc, [sp], #4

00003494 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3494:	b500      	push	{lr}
    3496:	b089      	sub	sp, #36	; 0x24
    3498:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    349a:	2301      	movs	r3, #1
    349c:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    349e:	2300      	movs	r3, #0
    34a0:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    34a4:	4b1e      	ldr	r3, [pc, #120]	; (3520 <Clock_Ip_CompleteSpll+0x8c>)
    34a6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    34aa:	f003 0301 	and.w	r3, r3, #1
    34ae:	2b00      	cmp	r3, #0
    34b0:	d02f      	beq.n	3512 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    34b2:	aa02      	add	r2, sp, #8
    34b4:	a903      	add	r1, sp, #12
    34b6:	a804      	add	r0, sp, #16
    34b8:	f24c 3350 	movw	r3, #50000	; 0xc350
    34bc:	f7fe fe46 	bl	214c <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    34c0:	4b17      	ldr	r3, [pc, #92]	; (3520 <Clock_Ip_CompleteSpll+0x8c>)
    34c2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    34c6:	0e1b      	lsrs	r3, r3, #24
    34c8:	f003 0301 	and.w	r3, r3, #1
    34cc:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    34ce:	9a02      	ldr	r2, [sp, #8]
    34d0:	a903      	add	r1, sp, #12
    34d2:	ab04      	add	r3, sp, #16
    34d4:	4618      	mov	r0, r3
    34d6:	f7fe fe53 	bl	2180 <Clock_Ip_TimeoutExpired>
    34da:	4603      	mov	r3, r0
    34dc:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    34e0:	9b05      	ldr	r3, [sp, #20]
    34e2:	2b00      	cmp	r3, #0
    34e4:	d106      	bne.n	34f4 <Clock_Ip_CompleteSpll+0x60>
    34e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    34ea:	f083 0301 	eor.w	r3, r3, #1
    34ee:	b2db      	uxtb	r3, r3
    34f0:	2b00      	cmp	r3, #0
    34f2:	d1e5      	bne.n	34c0 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    34f4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    34f8:	f083 0301 	eor.w	r3, r3, #1
    34fc:	b2db      	uxtb	r3, r3
    34fe:	2b00      	cmp	r3, #0
    3500:	d002      	beq.n	3508 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3502:	2302      	movs	r3, #2
    3504:	9307      	str	r3, [sp, #28]
    3506:	e006      	b.n	3516 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3508:	9901      	ldr	r1, [sp, #4]
    350a:	2001      	movs	r0, #1
    350c:	f7fe fe0e 	bl	212c <Clock_Ip_ReportClockErrors>
    3510:	e001      	b.n	3516 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3512:	2300      	movs	r3, #0
    3514:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3516:	9b07      	ldr	r3, [sp, #28]
}
    3518:	4618      	mov	r0, r3
    351a:	b009      	add	sp, #36	; 0x24
    351c:	f85d fb04 	ldr.w	pc, [sp], #4
    3520:	40064000 	.word	0x40064000

00003524 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3524:	b500      	push	{lr}
    3526:	b083      	sub	sp, #12
    3528:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    352a:	9801      	ldr	r0, [sp, #4]
    352c:	f000 f886 	bl	363c <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3530:	bf00      	nop
    3532:	b003      	add	sp, #12
    3534:	f85d fb04 	ldr.w	pc, [sp], #4

00003538 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3538:	b500      	push	{lr}
    353a:	b083      	sub	sp, #12
    353c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    353e:	9b01      	ldr	r3, [sp, #4]
    3540:	2b00      	cmp	r3, #0
    3542:	d002      	beq.n	354a <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3544:	9801      	ldr	r0, [sp, #4]
    3546:	f000 f891 	bl	366c <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    354a:	bf00      	nop
    354c:	b003      	add	sp, #12
    354e:	f85d fb04 	ldr.w	pc, [sp], #4

00003552 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3552:	b082      	sub	sp, #8
    3554:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3556:	4b19      	ldr	r3, [pc, #100]	; (35bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3558:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    355c:	4a17      	ldr	r2, [pc, #92]	; (35bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    355e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3562:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    3566:	4b15      	ldr	r3, [pc, #84]	; (35bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3568:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    356c:	4a13      	ldr	r2, [pc, #76]	; (35bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    356e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3572:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    3576:	4b11      	ldr	r3, [pc, #68]	; (35bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3578:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    357c:	4a0f      	ldr	r2, [pc, #60]	; (35bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    357e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3582:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3586:	4b0d      	ldr	r3, [pc, #52]	; (35bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3588:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    358c:	4a0b      	ldr	r2, [pc, #44]	; (35bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    358e:	f023 0301 	bic.w	r3, r3, #1
    3592:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    3596:	4b09      	ldr	r3, [pc, #36]	; (35bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3598:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    359c:	4a07      	ldr	r2, [pc, #28]	; (35bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    359e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    35a2:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    35a6:	4b05      	ldr	r3, [pc, #20]	; (35bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35a8:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    35ac:	4a03      	ldr	r2, [pc, #12]	; (35bc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    35b2:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    35b6:	bf00      	nop
    35b8:	b002      	add	sp, #8
    35ba:	4770      	bx	lr
    35bc:	40064000 	.word	0x40064000

000035c0 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    35c0:	b082      	sub	sp, #8
    35c2:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    35c4:	9b01      	ldr	r3, [sp, #4]
    35c6:	889b      	ldrh	r3, [r3, #4]
    35c8:	2b01      	cmp	r3, #1
    35ca:	d12f      	bne.n	362c <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    35cc:	4b1a      	ldr	r3, [pc, #104]	; (3638 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    35ce:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    35d2:	9b01      	ldr	r3, [sp, #4]
    35d4:	7b5b      	ldrb	r3, [r3, #13]
    35d6:	3b01      	subs	r3, #1
    35d8:	021b      	lsls	r3, r3, #8
    35da:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    35de:	9b01      	ldr	r3, [sp, #4]
    35e0:	7d1b      	ldrb	r3, [r3, #20]
    35e2:	3b10      	subs	r3, #16
    35e4:	041b      	lsls	r3, r3, #16
    35e6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    35ea:	430b      	orrs	r3, r1
    35ec:	4912      	ldr	r1, [pc, #72]	; (3638 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    35ee:	4313      	orrs	r3, r2
    35f0:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    35f4:	9b01      	ldr	r3, [sp, #4]
    35f6:	7fdb      	ldrb	r3, [r3, #31]
    35f8:	2b02      	cmp	r3, #2
    35fa:	d011      	beq.n	3620 <Clock_Ip_SetSpll_TrustedCall+0x60>
    35fc:	2b02      	cmp	r3, #2
    35fe:	dc17      	bgt.n	3630 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3600:	2b00      	cmp	r3, #0
    3602:	d002      	beq.n	360a <Clock_Ip_SetSpll_TrustedCall+0x4a>
    3604:	2b01      	cmp	r3, #1
    3606:	d005      	beq.n	3614 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3608:	e012      	b.n	3630 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    360a:	4b0b      	ldr	r3, [pc, #44]	; (3638 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    360c:	2200      	movs	r2, #0
    360e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3612:	e00e      	b.n	3632 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3614:	4b08      	ldr	r3, [pc, #32]	; (3638 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3616:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    361a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    361e:	e008      	b.n	3632 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3620:	4b05      	ldr	r3, [pc, #20]	; (3638 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3622:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    3626:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    362a:	e002      	b.n	3632 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    362c:	bf00      	nop
    362e:	e000      	b.n	3632 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    3630:	bf00      	nop
}
    3632:	bf00      	nop
    3634:	b002      	add	sp, #8
    3636:	4770      	bx	lr
    3638:	40064000 	.word	0x40064000

0000363c <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    363c:	b082      	sub	sp, #8
    363e:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3640:	4b09      	ldr	r3, [pc, #36]	; (3668 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3642:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3646:	4a08      	ldr	r2, [pc, #32]	; (3668 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3648:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    364c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3650:	4b05      	ldr	r3, [pc, #20]	; (3668 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3652:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3656:	4a04      	ldr	r2, [pc, #16]	; (3668 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3658:	f023 0301 	bic.w	r3, r3, #1
    365c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    3660:	bf00      	nop
    3662:	b002      	add	sp, #8
    3664:	4770      	bx	lr
    3666:	bf00      	nop
    3668:	40064000 	.word	0x40064000

0000366c <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    366c:	b082      	sub	sp, #8
    366e:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3670:	9b01      	ldr	r3, [sp, #4]
    3672:	889b      	ldrh	r3, [r3, #4]
    3674:	2b01      	cmp	r3, #1
    3676:	d107      	bne.n	3688 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    3678:	4b05      	ldr	r3, [pc, #20]	; (3690 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    367a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    367e:	4a04      	ldr	r2, [pc, #16]	; (3690 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3680:	f043 0301 	orr.w	r3, r3, #1
    3684:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    3688:	bf00      	nop
    368a:	b002      	add	sp, #8
    368c:	4770      	bx	lr
    368e:	bf00      	nop
    3690:	40064000 	.word	0x40064000

00003694 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    3694:	b082      	sub	sp, #8
    3696:	9001      	str	r0, [sp, #4]
    3698:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    369a:	bf00      	nop
    369c:	b002      	add	sp, #8
    369e:	4770      	bx	lr

000036a0 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    36a0:	b082      	sub	sp, #8
    36a2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    36a4:	bf00      	nop
    36a6:	b002      	add	sp, #8
    36a8:	4770      	bx	lr

000036aa <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    36aa:	b500      	push	{lr}
    36ac:	b083      	sub	sp, #12
    36ae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36b0:	9b01      	ldr	r3, [sp, #4]
    36b2:	2b00      	cmp	r3, #0
    36b4:	d002      	beq.n	36bc <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    36b6:	9801      	ldr	r0, [sp, #4]
    36b8:	f000 f8ee 	bl	3898 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36bc:	bf00      	nop
    36be:	b003      	add	sp, #12
    36c0:	f85d fb04 	ldr.w	pc, [sp], #4

000036c4 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    36c4:	b500      	push	{lr}
    36c6:	b083      	sub	sp, #12
    36c8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36ca:	9b01      	ldr	r3, [sp, #4]
    36cc:	2b00      	cmp	r3, #0
    36ce:	d002      	beq.n	36d6 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    36d0:	9801      	ldr	r0, [sp, #4]
    36d2:	f000 f8ff 	bl	38d4 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36d6:	bf00      	nop
    36d8:	b003      	add	sp, #12
    36da:	f85d fb04 	ldr.w	pc, [sp], #4

000036de <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    36de:	b500      	push	{lr}
    36e0:	b083      	sub	sp, #12
    36e2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36e4:	9b01      	ldr	r3, [sp, #4]
    36e6:	2b00      	cmp	r3, #0
    36e8:	d002      	beq.n	36f0 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    36ea:	9801      	ldr	r0, [sp, #4]
    36ec:	f000 f912 	bl	3914 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36f0:	bf00      	nop
    36f2:	b003      	add	sp, #12
    36f4:	f85d fb04 	ldr.w	pc, [sp], #4

000036f8 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    36f8:	b500      	push	{lr}
    36fa:	b083      	sub	sp, #12
    36fc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36fe:	9b01      	ldr	r3, [sp, #4]
    3700:	2b00      	cmp	r3, #0
    3702:	d002      	beq.n	370a <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    3704:	9801      	ldr	r0, [sp, #4]
    3706:	f000 f925 	bl	3954 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    370a:	bf00      	nop
    370c:	b003      	add	sp, #12
    370e:	f85d fb04 	ldr.w	pc, [sp], #4

00003712 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3712:	b500      	push	{lr}
    3714:	b083      	sub	sp, #12
    3716:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3718:	9b01      	ldr	r3, [sp, #4]
    371a:	2b00      	cmp	r3, #0
    371c:	d002      	beq.n	3724 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    371e:	9801      	ldr	r0, [sp, #4]
    3720:	f000 f936 	bl	3990 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3724:	bf00      	nop
    3726:	b003      	add	sp, #12
    3728:	f85d fb04 	ldr.w	pc, [sp], #4

0000372c <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    372c:	b500      	push	{lr}
    372e:	b083      	sub	sp, #12
    3730:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3732:	9b01      	ldr	r3, [sp, #4]
    3734:	2b00      	cmp	r3, #0
    3736:	d002      	beq.n	373e <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    3738:	9801      	ldr	r0, [sp, #4]
    373a:	f000 f949 	bl	39d0 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    373e:	bf00      	nop
    3740:	b003      	add	sp, #12
    3742:	f85d fb04 	ldr.w	pc, [sp], #4

00003746 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3746:	b500      	push	{lr}
    3748:	b083      	sub	sp, #12
    374a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    374c:	9b01      	ldr	r3, [sp, #4]
    374e:	2b00      	cmp	r3, #0
    3750:	d002      	beq.n	3758 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    3752:	9801      	ldr	r0, [sp, #4]
    3754:	f000 f958 	bl	3a08 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3758:	bf00      	nop
    375a:	b003      	add	sp, #12
    375c:	f85d fb04 	ldr.w	pc, [sp], #4

00003760 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3760:	b500      	push	{lr}
    3762:	b083      	sub	sp, #12
    3764:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3766:	9b01      	ldr	r3, [sp, #4]
    3768:	2b00      	cmp	r3, #0
    376a:	d002      	beq.n	3772 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    376c:	9801      	ldr	r0, [sp, #4]
    376e:	f000 f969 	bl	3a44 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3772:	bf00      	nop
    3774:	b003      	add	sp, #12
    3776:	f85d fb04 	ldr.w	pc, [sp], #4

0000377a <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    377a:	b500      	push	{lr}
    377c:	b083      	sub	sp, #12
    377e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3780:	9b01      	ldr	r3, [sp, #4]
    3782:	2b00      	cmp	r3, #0
    3784:	d002      	beq.n	378c <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    3786:	9801      	ldr	r0, [sp, #4]
    3788:	f000 f978 	bl	3a7c <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    378c:	bf00      	nop
    378e:	b003      	add	sp, #12
    3790:	f85d fb04 	ldr.w	pc, [sp], #4

00003794 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3794:	b500      	push	{lr}
    3796:	b083      	sub	sp, #12
    3798:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    379a:	9b01      	ldr	r3, [sp, #4]
    379c:	2b00      	cmp	r3, #0
    379e:	d002      	beq.n	37a6 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    37a0:	9801      	ldr	r0, [sp, #4]
    37a2:	f000 f989 	bl	3ab8 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37a6:	bf00      	nop
    37a8:	b003      	add	sp, #12
    37aa:	f85d fb04 	ldr.w	pc, [sp], #4

000037ae <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    37ae:	b500      	push	{lr}
    37b0:	b083      	sub	sp, #12
    37b2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37b4:	9b01      	ldr	r3, [sp, #4]
    37b6:	2b00      	cmp	r3, #0
    37b8:	d002      	beq.n	37c0 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    37ba:	9801      	ldr	r0, [sp, #4]
    37bc:	f000 f998 	bl	3af0 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37c0:	bf00      	nop
    37c2:	b003      	add	sp, #12
    37c4:	f85d fb04 	ldr.w	pc, [sp], #4

000037c8 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    37c8:	b500      	push	{lr}
    37ca:	b083      	sub	sp, #12
    37cc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37ce:	9b01      	ldr	r3, [sp, #4]
    37d0:	2b00      	cmp	r3, #0
    37d2:	d002      	beq.n	37da <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    37d4:	9801      	ldr	r0, [sp, #4]
    37d6:	f000 f9a9 	bl	3b2c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37da:	bf00      	nop
    37dc:	b003      	add	sp, #12
    37de:	f85d fb04 	ldr.w	pc, [sp], #4

000037e2 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    37e2:	b500      	push	{lr}
    37e4:	b083      	sub	sp, #12
    37e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37e8:	9b01      	ldr	r3, [sp, #4]
    37ea:	2b00      	cmp	r3, #0
    37ec:	d002      	beq.n	37f4 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    37ee:	9801      	ldr	r0, [sp, #4]
    37f0:	f000 f9e6 	bl	3bc0 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37f4:	bf00      	nop
    37f6:	b003      	add	sp, #12
    37f8:	f85d fb04 	ldr.w	pc, [sp], #4

000037fc <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    37fc:	b500      	push	{lr}
    37fe:	b083      	sub	sp, #12
    3800:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3802:	9b01      	ldr	r3, [sp, #4]
    3804:	2b00      	cmp	r3, #0
    3806:	d002      	beq.n	380e <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    3808:	9801      	ldr	r0, [sp, #4]
    380a:	f000 fa25 	bl	3c58 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    380e:	bf00      	nop
    3810:	b003      	add	sp, #12
    3812:	f85d fb04 	ldr.w	pc, [sp], #4

00003816 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3816:	b500      	push	{lr}
    3818:	b083      	sub	sp, #12
    381a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    381c:	9b01      	ldr	r3, [sp, #4]
    381e:	2b00      	cmp	r3, #0
    3820:	d002      	beq.n	3828 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    3822:	9801      	ldr	r0, [sp, #4]
    3824:	f000 fa2a 	bl	3c7c <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3828:	bf00      	nop
    382a:	b003      	add	sp, #12
    382c:	f85d fb04 	ldr.w	pc, [sp], #4

00003830 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3830:	b500      	push	{lr}
    3832:	b083      	sub	sp, #12
    3834:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3836:	9b01      	ldr	r3, [sp, #4]
    3838:	2b00      	cmp	r3, #0
    383a:	d002      	beq.n	3842 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    383c:	9801      	ldr	r0, [sp, #4]
    383e:	f000 fa3b 	bl	3cb8 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3842:	bf00      	nop
    3844:	b003      	add	sp, #12
    3846:	f85d fb04 	ldr.w	pc, [sp], #4

0000384a <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    384a:	b500      	push	{lr}
    384c:	b083      	sub	sp, #12
    384e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3850:	9b01      	ldr	r3, [sp, #4]
    3852:	2b00      	cmp	r3, #0
    3854:	d002      	beq.n	385c <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    3856:	9801      	ldr	r0, [sp, #4]
    3858:	f000 fa56 	bl	3d08 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    385c:	bf00      	nop
    385e:	b003      	add	sp, #12
    3860:	f85d fb04 	ldr.w	pc, [sp], #4

00003864 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3864:	b500      	push	{lr}
    3866:	b083      	sub	sp, #12
    3868:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    386a:	9b01      	ldr	r3, [sp, #4]
    386c:	2b00      	cmp	r3, #0
    386e:	d002      	beq.n	3876 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    3870:	9801      	ldr	r0, [sp, #4]
    3872:	f000 fa79 	bl	3d68 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3876:	bf00      	nop
    3878:	b003      	add	sp, #12
    387a:	f85d fb04 	ldr.w	pc, [sp], #4

0000387e <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    387e:	b500      	push	{lr}
    3880:	b083      	sub	sp, #12
    3882:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3884:	9b01      	ldr	r3, [sp, #4]
    3886:	2b00      	cmp	r3, #0
    3888:	d002      	beq.n	3890 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    388a:	9801      	ldr	r0, [sp, #4]
    388c:	f000 fa8a 	bl	3da4 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3890:	bf00      	nop
    3892:	b003      	add	sp, #12
    3894:	f85d fb04 	ldr.w	pc, [sp], #4

00003898 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3898:	b084      	sub	sp, #16
    389a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    389c:	4b0b      	ldr	r3, [pc, #44]	; (38cc <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    389e:	795b      	ldrb	r3, [r3, #5]
    38a0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    38a2:	4b0b      	ldr	r3, [pc, #44]	; (38d0 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    38a4:	695b      	ldr	r3, [r3, #20]
    38a6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    38a8:	9b02      	ldr	r3, [sp, #8]
    38aa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    38ae:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    38b0:	9b03      	ldr	r3, [sp, #12]
    38b2:	061b      	lsls	r3, r3, #24
    38b4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    38b8:	9a02      	ldr	r2, [sp, #8]
    38ba:	4313      	orrs	r3, r2
    38bc:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    38be:	4a04      	ldr	r2, [pc, #16]	; (38d0 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    38c0:	9b02      	ldr	r3, [sp, #8]
    38c2:	6153      	str	r3, [r2, #20]
}
    38c4:	bf00      	nop
    38c6:	b004      	add	sp, #16
    38c8:	4770      	bx	lr
    38ca:	bf00      	nop
    38cc:	0000e54c 	.word	0x0000e54c
    38d0:	40064000 	.word	0x40064000

000038d4 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    38d4:	b084      	sub	sp, #16
    38d6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    38d8:	9b01      	ldr	r3, [sp, #4]
    38da:	685b      	ldr	r3, [r3, #4]
    38dc:	4a0b      	ldr	r2, [pc, #44]	; (390c <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    38de:	5cd3      	ldrb	r3, [r2, r3]
    38e0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    38e2:	4b0b      	ldr	r3, [pc, #44]	; (3910 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    38e4:	695b      	ldr	r3, [r3, #20]
    38e6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    38e8:	9b02      	ldr	r3, [sp, #8]
    38ea:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    38ee:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    38f0:	9b03      	ldr	r3, [sp, #12]
    38f2:	061b      	lsls	r3, r3, #24
    38f4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    38f8:	9a02      	ldr	r2, [sp, #8]
    38fa:	4313      	orrs	r3, r2
    38fc:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    38fe:	4a04      	ldr	r2, [pc, #16]	; (3910 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3900:	9b02      	ldr	r3, [sp, #8]
    3902:	6153      	str	r3, [r2, #20]
}
    3904:	bf00      	nop
    3906:	b004      	add	sp, #16
    3908:	4770      	bx	lr
    390a:	bf00      	nop
    390c:	0000e54c 	.word	0x0000e54c
    3910:	40064000 	.word	0x40064000

00003914 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3914:	b084      	sub	sp, #16
    3916:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3918:	9b01      	ldr	r3, [sp, #4]
    391a:	685b      	ldr	r3, [r3, #4]
    391c:	4a0b      	ldr	r2, [pc, #44]	; (394c <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    391e:	5cd3      	ldrb	r3, [r2, r3]
    3920:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    3922:	4b0b      	ldr	r3, [pc, #44]	; (3950 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3924:	699b      	ldr	r3, [r3, #24]
    3926:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    3928:	9b02      	ldr	r3, [sp, #8]
    392a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    392e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    3930:	9b03      	ldr	r3, [sp, #12]
    3932:	061b      	lsls	r3, r3, #24
    3934:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3938:	9a02      	ldr	r2, [sp, #8]
    393a:	4313      	orrs	r3, r2
    393c:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    393e:	4a04      	ldr	r2, [pc, #16]	; (3950 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3940:	9b02      	ldr	r3, [sp, #8]
    3942:	6193      	str	r3, [r2, #24]
}
    3944:	bf00      	nop
    3946:	b004      	add	sp, #16
    3948:	4770      	bx	lr
    394a:	bf00      	nop
    394c:	0000e54c 	.word	0x0000e54c
    3950:	40064000 	.word	0x40064000

00003954 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3954:	b084      	sub	sp, #16
    3956:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3958:	4b0b      	ldr	r3, [pc, #44]	; (3988 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    395a:	795b      	ldrb	r3, [r3, #5]
    395c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    395e:	4b0b      	ldr	r3, [pc, #44]	; (398c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3960:	69db      	ldr	r3, [r3, #28]
    3962:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3964:	9b02      	ldr	r3, [sp, #8]
    3966:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    396a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    396c:	9b03      	ldr	r3, [sp, #12]
    396e:	061b      	lsls	r3, r3, #24
    3970:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3974:	9a02      	ldr	r2, [sp, #8]
    3976:	4313      	orrs	r3, r2
    3978:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    397a:	4a04      	ldr	r2, [pc, #16]	; (398c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    397c:	9b02      	ldr	r3, [sp, #8]
    397e:	61d3      	str	r3, [r2, #28]
}
    3980:	bf00      	nop
    3982:	b004      	add	sp, #16
    3984:	4770      	bx	lr
    3986:	bf00      	nop
    3988:	0000e54c 	.word	0x0000e54c
    398c:	40064000 	.word	0x40064000

00003990 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3990:	b084      	sub	sp, #16
    3992:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3994:	9b01      	ldr	r3, [sp, #4]
    3996:	685b      	ldr	r3, [r3, #4]
    3998:	4a0b      	ldr	r2, [pc, #44]	; (39c8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    399a:	5cd3      	ldrb	r3, [r2, r3]
    399c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    399e:	4b0b      	ldr	r3, [pc, #44]	; (39cc <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    39a0:	69db      	ldr	r3, [r3, #28]
    39a2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    39a4:	9b02      	ldr	r3, [sp, #8]
    39a6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    39aa:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    39ac:	9b03      	ldr	r3, [sp, #12]
    39ae:	061b      	lsls	r3, r3, #24
    39b0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    39b4:	9a02      	ldr	r2, [sp, #8]
    39b6:	4313      	orrs	r3, r2
    39b8:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    39ba:	4a04      	ldr	r2, [pc, #16]	; (39cc <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    39bc:	9b02      	ldr	r3, [sp, #8]
    39be:	61d3      	str	r3, [r2, #28]
}
    39c0:	bf00      	nop
    39c2:	b004      	add	sp, #16
    39c4:	4770      	bx	lr
    39c6:	bf00      	nop
    39c8:	0000e54c 	.word	0x0000e54c
    39cc:	40064000 	.word	0x40064000

000039d0 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    39d0:	b084      	sub	sp, #16
    39d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    39d4:	4b0a      	ldr	r3, [pc, #40]	; (3a00 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    39d6:	7b9b      	ldrb	r3, [r3, #14]
    39d8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    39da:	4b0a      	ldr	r3, [pc, #40]	; (3a04 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    39dc:	691b      	ldr	r3, [r3, #16]
    39de:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    39e0:	9b02      	ldr	r3, [sp, #8]
    39e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    39e6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    39e8:	9b03      	ldr	r3, [sp, #12]
    39ea:	011b      	lsls	r3, r3, #4
    39ec:	9a02      	ldr	r2, [sp, #8]
    39ee:	4313      	orrs	r3, r2
    39f0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    39f2:	4a04      	ldr	r2, [pc, #16]	; (3a04 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    39f4:	9b02      	ldr	r3, [sp, #8]
    39f6:	6113      	str	r3, [r2, #16]
}
    39f8:	bf00      	nop
    39fa:	b004      	add	sp, #16
    39fc:	4770      	bx	lr
    39fe:	bf00      	nop
    3a00:	0000e4f4 	.word	0x0000e4f4
    3a04:	40048000 	.word	0x40048000

00003a08 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a08:	b084      	sub	sp, #16
    3a0a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a0c:	9b01      	ldr	r3, [sp, #4]
    3a0e:	685b      	ldr	r3, [r3, #4]
    3a10:	4a0a      	ldr	r2, [pc, #40]	; (3a3c <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    3a12:	5cd3      	ldrb	r3, [r2, r3]
    3a14:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    3a16:	4b0a      	ldr	r3, [pc, #40]	; (3a40 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3a18:	691b      	ldr	r3, [r3, #16]
    3a1a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3a1c:	9b02      	ldr	r3, [sp, #8]
    3a1e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3a22:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3a24:	9b03      	ldr	r3, [sp, #12]
    3a26:	011b      	lsls	r3, r3, #4
    3a28:	9a02      	ldr	r2, [sp, #8]
    3a2a:	4313      	orrs	r3, r2
    3a2c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a2e:	4a04      	ldr	r2, [pc, #16]	; (3a40 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3a30:	9b02      	ldr	r3, [sp, #8]
    3a32:	6113      	str	r3, [r2, #16]
}
    3a34:	bf00      	nop
    3a36:	b004      	add	sp, #16
    3a38:	4770      	bx	lr
    3a3a:	bf00      	nop
    3a3c:	0000e4f4 	.word	0x0000e4f4
    3a40:	40048000 	.word	0x40048000

00003a44 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a44:	b084      	sub	sp, #16
    3a46:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a48:	4b0a      	ldr	r3, [pc, #40]	; (3a74 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    3a4a:	785b      	ldrb	r3, [r3, #1]
    3a4c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3a4e:	4b0a      	ldr	r3, [pc, #40]	; (3a78 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3a50:	691b      	ldr	r3, [r3, #16]
    3a52:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3a54:	9b02      	ldr	r3, [sp, #8]
    3a56:	f023 030c 	bic.w	r3, r3, #12
    3a5a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3a5c:	9b03      	ldr	r3, [sp, #12]
    3a5e:	009b      	lsls	r3, r3, #2
    3a60:	9a02      	ldr	r2, [sp, #8]
    3a62:	4313      	orrs	r3, r2
    3a64:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a66:	4a04      	ldr	r2, [pc, #16]	; (3a78 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3a68:	9b02      	ldr	r3, [sp, #8]
    3a6a:	6113      	str	r3, [r2, #16]
}
    3a6c:	bf00      	nop
    3a6e:	b004      	add	sp, #16
    3a70:	4770      	bx	lr
    3a72:	bf00      	nop
    3a74:	0000e5ac 	.word	0x0000e5ac
    3a78:	40048000 	.word	0x40048000

00003a7c <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a7c:	b084      	sub	sp, #16
    3a7e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a80:	9b01      	ldr	r3, [sp, #4]
    3a82:	685b      	ldr	r3, [r3, #4]
    3a84:	4a0a      	ldr	r2, [pc, #40]	; (3ab0 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    3a86:	5cd3      	ldrb	r3, [r2, r3]
    3a88:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3a8a:	4b0a      	ldr	r3, [pc, #40]	; (3ab4 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3a8c:	691b      	ldr	r3, [r3, #16]
    3a8e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3a90:	9b02      	ldr	r3, [sp, #8]
    3a92:	f023 030c 	bic.w	r3, r3, #12
    3a96:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3a98:	9b03      	ldr	r3, [sp, #12]
    3a9a:	009b      	lsls	r3, r3, #2
    3a9c:	9a02      	ldr	r2, [sp, #8]
    3a9e:	4313      	orrs	r3, r2
    3aa0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3aa2:	4a04      	ldr	r2, [pc, #16]	; (3ab4 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3aa4:	9b02      	ldr	r3, [sp, #8]
    3aa6:	6113      	str	r3, [r2, #16]
}
    3aa8:	bf00      	nop
    3aaa:	b004      	add	sp, #16
    3aac:	4770      	bx	lr
    3aae:	bf00      	nop
    3ab0:	0000e5ac 	.word	0x0000e5ac
    3ab4:	40048000 	.word	0x40048000

00003ab8 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3ab8:	b084      	sub	sp, #16
    3aba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3abc:	4b0a      	ldr	r3, [pc, #40]	; (3ae8 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    3abe:	795b      	ldrb	r3, [r3, #5]
    3ac0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    3ac2:	4b0a      	ldr	r3, [pc, #40]	; (3aec <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3ac4:	6a1b      	ldr	r3, [r3, #32]
    3ac6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3ac8:	9b02      	ldr	r3, [sp, #8]
    3aca:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3ace:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3ad0:	9b03      	ldr	r3, [sp, #12]
    3ad2:	061b      	lsls	r3, r3, #24
    3ad4:	9a02      	ldr	r2, [sp, #8]
    3ad6:	4313      	orrs	r3, r2
    3ad8:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3ada:	4a04      	ldr	r2, [pc, #16]	; (3aec <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3adc:	9b02      	ldr	r3, [sp, #8]
    3ade:	6213      	str	r3, [r2, #32]
}
    3ae0:	bf00      	nop
    3ae2:	b004      	add	sp, #16
    3ae4:	4770      	bx	lr
    3ae6:	bf00      	nop
    3ae8:	0000e54c 	.word	0x0000e54c
    3aec:	40064000 	.word	0x40064000

00003af0 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3af0:	b084      	sub	sp, #16
    3af2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3af4:	9b01      	ldr	r3, [sp, #4]
    3af6:	685b      	ldr	r3, [r3, #4]
    3af8:	4a0a      	ldr	r2, [pc, #40]	; (3b24 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    3afa:	5cd3      	ldrb	r3, [r2, r3]
    3afc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    3afe:	4b0a      	ldr	r3, [pc, #40]	; (3b28 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3b00:	6a1b      	ldr	r3, [r3, #32]
    3b02:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3b04:	9b02      	ldr	r3, [sp, #8]
    3b06:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3b0a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3b0c:	9b03      	ldr	r3, [sp, #12]
    3b0e:	061b      	lsls	r3, r3, #24
    3b10:	9a02      	ldr	r2, [sp, #8]
    3b12:	4313      	orrs	r3, r2
    3b14:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3b16:	4a04      	ldr	r2, [pc, #16]	; (3b28 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3b18:	9b02      	ldr	r3, [sp, #8]
    3b1a:	6213      	str	r3, [r2, #32]
}
    3b1c:	bf00      	nop
    3b1e:	b004      	add	sp, #16
    3b20:	4770      	bx	lr
    3b22:	bf00      	nop
    3b24:	0000e54c 	.word	0x0000e54c
    3b28:	40064000 	.word	0x40064000

00003b2c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b2c:	b086      	sub	sp, #24
    3b2e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b30:	4b20      	ldr	r3, [pc, #128]	; (3bb4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    3b32:	795b      	ldrb	r3, [r3, #5]
    3b34:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3b36:	9b01      	ldr	r3, [sp, #4]
    3b38:	681a      	ldr	r2, [r3, #0]
    3b3a:	491f      	ldr	r1, [pc, #124]	; (3bb8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    3b3c:	4613      	mov	r3, r2
    3b3e:	00db      	lsls	r3, r3, #3
    3b40:	4413      	add	r3, r2
    3b42:	440b      	add	r3, r1
    3b44:	781b      	ldrb	r3, [r3, #0]
    3b46:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3b48:	4b1c      	ldr	r3, [pc, #112]	; (3bbc <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3b4a:	68db      	ldr	r3, [r3, #12]
    3b4c:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3b4e:	9b03      	ldr	r3, [sp, #12]
    3b50:	2b03      	cmp	r3, #3
    3b52:	d813      	bhi.n	3b7c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3b54:	9b03      	ldr	r3, [sp, #12]
    3b56:	005b      	lsls	r3, r3, #1
    3b58:	3318      	adds	r3, #24
    3b5a:	2203      	movs	r2, #3
    3b5c:	fa02 f303 	lsl.w	r3, r2, r3
    3b60:	43db      	mvns	r3, r3
    3b62:	9a05      	ldr	r2, [sp, #20]
    3b64:	4013      	ands	r3, r2
    3b66:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3b68:	9b03      	ldr	r3, [sp, #12]
    3b6a:	005b      	lsls	r3, r3, #1
    3b6c:	3318      	adds	r3, #24
    3b6e:	9a04      	ldr	r2, [sp, #16]
    3b70:	fa02 f303 	lsl.w	r3, r2, r3
    3b74:	9a05      	ldr	r2, [sp, #20]
    3b76:	4313      	orrs	r3, r2
    3b78:	9305      	str	r3, [sp, #20]
    3b7a:	e014      	b.n	3ba6 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3b7c:	9b03      	ldr	r3, [sp, #12]
    3b7e:	3b04      	subs	r3, #4
    3b80:	005b      	lsls	r3, r3, #1
    3b82:	3310      	adds	r3, #16
    3b84:	2203      	movs	r2, #3
    3b86:	fa02 f303 	lsl.w	r3, r2, r3
    3b8a:	43db      	mvns	r3, r3
    3b8c:	9a05      	ldr	r2, [sp, #20]
    3b8e:	4013      	ands	r3, r2
    3b90:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3b92:	9b03      	ldr	r3, [sp, #12]
    3b94:	3b04      	subs	r3, #4
    3b96:	005b      	lsls	r3, r3, #1
    3b98:	3310      	adds	r3, #16
    3b9a:	9a04      	ldr	r2, [sp, #16]
    3b9c:	fa02 f303 	lsl.w	r3, r2, r3
    3ba0:	9a05      	ldr	r2, [sp, #20]
    3ba2:	4313      	orrs	r3, r2
    3ba4:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3ba6:	4a05      	ldr	r2, [pc, #20]	; (3bbc <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3ba8:	9b05      	ldr	r3, [sp, #20]
    3baa:	60d3      	str	r3, [r2, #12]
}
    3bac:	bf00      	nop
    3bae:	b006      	add	sp, #24
    3bb0:	4770      	bx	lr
    3bb2:	bf00      	nop
    3bb4:	0000e4f4 	.word	0x0000e4f4
    3bb8:	0000e1e4 	.word	0x0000e1e4
    3bbc:	40048000 	.word	0x40048000

00003bc0 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3bc0:	b086      	sub	sp, #24
    3bc2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3bc4:	9b01      	ldr	r3, [sp, #4]
    3bc6:	685b      	ldr	r3, [r3, #4]
    3bc8:	4a20      	ldr	r2, [pc, #128]	; (3c4c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    3bca:	5cd3      	ldrb	r3, [r2, r3]
    3bcc:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3bce:	9b01      	ldr	r3, [sp, #4]
    3bd0:	681a      	ldr	r2, [r3, #0]
    3bd2:	491f      	ldr	r1, [pc, #124]	; (3c50 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    3bd4:	4613      	mov	r3, r2
    3bd6:	00db      	lsls	r3, r3, #3
    3bd8:	4413      	add	r3, r2
    3bda:	440b      	add	r3, r1
    3bdc:	781b      	ldrb	r3, [r3, #0]
    3bde:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3be0:	4b1c      	ldr	r3, [pc, #112]	; (3c54 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3be2:	68db      	ldr	r3, [r3, #12]
    3be4:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3be6:	9b03      	ldr	r3, [sp, #12]
    3be8:	2b03      	cmp	r3, #3
    3bea:	d813      	bhi.n	3c14 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3bec:	9b03      	ldr	r3, [sp, #12]
    3bee:	005b      	lsls	r3, r3, #1
    3bf0:	3318      	adds	r3, #24
    3bf2:	2203      	movs	r2, #3
    3bf4:	fa02 f303 	lsl.w	r3, r2, r3
    3bf8:	43db      	mvns	r3, r3
    3bfa:	9a05      	ldr	r2, [sp, #20]
    3bfc:	4013      	ands	r3, r2
    3bfe:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3c00:	9b03      	ldr	r3, [sp, #12]
    3c02:	005b      	lsls	r3, r3, #1
    3c04:	3318      	adds	r3, #24
    3c06:	9a04      	ldr	r2, [sp, #16]
    3c08:	fa02 f303 	lsl.w	r3, r2, r3
    3c0c:	9a05      	ldr	r2, [sp, #20]
    3c0e:	4313      	orrs	r3, r2
    3c10:	9305      	str	r3, [sp, #20]
    3c12:	e014      	b.n	3c3e <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3c14:	9b03      	ldr	r3, [sp, #12]
    3c16:	3b04      	subs	r3, #4
    3c18:	005b      	lsls	r3, r3, #1
    3c1a:	3310      	adds	r3, #16
    3c1c:	2203      	movs	r2, #3
    3c1e:	fa02 f303 	lsl.w	r3, r2, r3
    3c22:	43db      	mvns	r3, r3
    3c24:	9a05      	ldr	r2, [sp, #20]
    3c26:	4013      	ands	r3, r2
    3c28:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3c2a:	9b03      	ldr	r3, [sp, #12]
    3c2c:	3b04      	subs	r3, #4
    3c2e:	005b      	lsls	r3, r3, #1
    3c30:	3310      	adds	r3, #16
    3c32:	9a04      	ldr	r2, [sp, #16]
    3c34:	fa02 f303 	lsl.w	r3, r2, r3
    3c38:	9a05      	ldr	r2, [sp, #20]
    3c3a:	4313      	orrs	r3, r2
    3c3c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3c3e:	4a05      	ldr	r2, [pc, #20]	; (3c54 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3c40:	9b05      	ldr	r3, [sp, #20]
    3c42:	60d3      	str	r3, [r2, #12]
}
    3c44:	bf00      	nop
    3c46:	b006      	add	sp, #24
    3c48:	4770      	bx	lr
    3c4a:	bf00      	nop
    3c4c:	0000e4f4 	.word	0x0000e4f4
    3c50:	0000e1e4 	.word	0x0000e1e4
    3c54:	40048000 	.word	0x40048000

00003c58 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c58:	b084      	sub	sp, #16
    3c5a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    3c5c:	4b06      	ldr	r3, [pc, #24]	; (3c78 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3c5e:	685b      	ldr	r3, [r3, #4]
    3c60:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    3c62:	9b03      	ldr	r3, [sp, #12]
    3c64:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    3c68:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3c6a:	4a03      	ldr	r2, [pc, #12]	; (3c78 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3c6c:	9b03      	ldr	r3, [sp, #12]
    3c6e:	6053      	str	r3, [r2, #4]
}
    3c70:	bf00      	nop
    3c72:	b004      	add	sp, #16
    3c74:	4770      	bx	lr
    3c76:	bf00      	nop
    3c78:	40048000 	.word	0x40048000

00003c7c <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c7c:	b084      	sub	sp, #16
    3c7e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3c80:	9b01      	ldr	r3, [sp, #4]
    3c82:	685b      	ldr	r3, [r3, #4]
    3c84:	4a0a      	ldr	r2, [pc, #40]	; (3cb0 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    3c86:	5cd3      	ldrb	r3, [r2, r3]
    3c88:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    3c8a:	4b0a      	ldr	r3, [pc, #40]	; (3cb4 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3c8c:	685b      	ldr	r3, [r3, #4]
    3c8e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    3c90:	9b02      	ldr	r3, [sp, #8]
    3c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3c96:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    3c98:	9b03      	ldr	r3, [sp, #12]
    3c9a:	011b      	lsls	r3, r3, #4
    3c9c:	9a02      	ldr	r2, [sp, #8]
    3c9e:	4313      	orrs	r3, r2
    3ca0:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    3ca2:	4a04      	ldr	r2, [pc, #16]	; (3cb4 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3ca4:	9b02      	ldr	r3, [sp, #8]
    3ca6:	6053      	str	r3, [r2, #4]
}
    3ca8:	bf00      	nop
    3caa:	b004      	add	sp, #16
    3cac:	4770      	bx	lr
    3cae:	bf00      	nop
    3cb0:	0000e4f4 	.word	0x0000e4f4
    3cb4:	40048000 	.word	0x40048000

00003cb8 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3cb8:	b084      	sub	sp, #16
    3cba:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3cbc:	9b01      	ldr	r3, [sp, #4]
    3cbe:	681a      	ldr	r2, [r3, #0]
    3cc0:	490f      	ldr	r1, [pc, #60]	; (3d00 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    3cc2:	4613      	mov	r3, r2
    3cc4:	00db      	lsls	r3, r3, #3
    3cc6:	4413      	add	r3, r2
    3cc8:	440b      	add	r3, r1
    3cca:	3304      	adds	r3, #4
    3ccc:	781b      	ldrb	r3, [r3, #0]
    3cce:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    3cd0:	4a0c      	ldr	r2, [pc, #48]	; (3d04 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cd2:	9b03      	ldr	r3, [sp, #12]
    3cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3cd8:	490a      	ldr	r1, [pc, #40]	; (3d04 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cda:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    3cde:	9b03      	ldr	r3, [sp, #12]
    3ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    3ce4:	4a07      	ldr	r2, [pc, #28]	; (3d04 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3ce6:	9b03      	ldr	r3, [sp, #12]
    3ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3cec:	4905      	ldr	r1, [pc, #20]	; (3d04 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3cee:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    3cf2:	9b03      	ldr	r3, [sp, #12]
    3cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3cf8:	bf00      	nop
    3cfa:	b004      	add	sp, #16
    3cfc:	4770      	bx	lr
    3cfe:	bf00      	nop
    3d00:	0000e1e4 	.word	0x0000e1e4
    3d04:	40065000 	.word	0x40065000

00003d08 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d08:	b086      	sub	sp, #24
    3d0a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3d0c:	9b01      	ldr	r3, [sp, #4]
    3d0e:	681a      	ldr	r2, [r3, #0]
    3d10:	4912      	ldr	r1, [pc, #72]	; (3d5c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    3d12:	4613      	mov	r3, r2
    3d14:	00db      	lsls	r3, r3, #3
    3d16:	4413      	add	r3, r2
    3d18:	440b      	add	r3, r1
    3d1a:	3304      	adds	r3, #4
    3d1c:	781b      	ldrb	r3, [r3, #0]
    3d1e:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d20:	9b01      	ldr	r3, [sp, #4]
    3d22:	685b      	ldr	r3, [r3, #4]
    3d24:	4a0e      	ldr	r2, [pc, #56]	; (3d60 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    3d26:	5cd3      	ldrb	r3, [r2, r3]
    3d28:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    3d2a:	4a0e      	ldr	r2, [pc, #56]	; (3d64 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3d2c:	9b05      	ldr	r3, [sp, #20]
    3d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d32:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    3d34:	9b03      	ldr	r3, [sp, #12]
    3d36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    3d3a:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    3d3c:	9b04      	ldr	r3, [sp, #16]
    3d3e:	061b      	lsls	r3, r3, #24
    3d40:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    3d44:	9a03      	ldr	r2, [sp, #12]
    3d46:	4313      	orrs	r3, r2
    3d48:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    3d4a:	4906      	ldr	r1, [pc, #24]	; (3d64 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3d4c:	9b05      	ldr	r3, [sp, #20]
    3d4e:	9a03      	ldr	r2, [sp, #12]
    3d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3d54:	bf00      	nop
    3d56:	b006      	add	sp, #24
    3d58:	4770      	bx	lr
    3d5a:	bf00      	nop
    3d5c:	0000e1e4 	.word	0x0000e1e4
    3d60:	0000e57c 	.word	0x0000e57c
    3d64:	40065000 	.word	0x40065000

00003d68 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d68:	b084      	sub	sp, #16
    3d6a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d6c:	4b0b      	ldr	r3, [pc, #44]	; (3d9c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    3d6e:	7f1b      	ldrb	r3, [r3, #28]
    3d70:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    3d72:	4b0b      	ldr	r3, [pc, #44]	; (3da0 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3d74:	685b      	ldr	r3, [r3, #4]
    3d76:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3d78:	9b02      	ldr	r3, [sp, #8]
    3d7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3d7e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3d80:	9b03      	ldr	r3, [sp, #12]
    3d82:	031b      	lsls	r3, r3, #12
    3d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3d88:	9a02      	ldr	r2, [sp, #8]
    3d8a:	4313      	orrs	r3, r2
    3d8c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3d8e:	4a04      	ldr	r2, [pc, #16]	; (3da0 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3d90:	9b02      	ldr	r3, [sp, #8]
    3d92:	6053      	str	r3, [r2, #4]
}
    3d94:	bf00      	nop
    3d96:	b004      	add	sp, #16
    3d98:	4770      	bx	lr
    3d9a:	bf00      	nop
    3d9c:	0000e4f4 	.word	0x0000e4f4
    3da0:	40048000 	.word	0x40048000

00003da4 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3da4:	b084      	sub	sp, #16
    3da6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3da8:	9b01      	ldr	r3, [sp, #4]
    3daa:	685b      	ldr	r3, [r3, #4]
    3dac:	4a0b      	ldr	r2, [pc, #44]	; (3ddc <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    3dae:	5cd3      	ldrb	r3, [r2, r3]
    3db0:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    3db2:	4b0b      	ldr	r3, [pc, #44]	; (3de0 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3db4:	685b      	ldr	r3, [r3, #4]
    3db6:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3db8:	9b02      	ldr	r3, [sp, #8]
    3dba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3dbe:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3dc0:	9b03      	ldr	r3, [sp, #12]
    3dc2:	031b      	lsls	r3, r3, #12
    3dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3dc8:	9a02      	ldr	r2, [sp, #8]
    3dca:	4313      	orrs	r3, r2
    3dcc:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3dce:	4a04      	ldr	r2, [pc, #16]	; (3de0 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3dd0:	9b02      	ldr	r3, [sp, #8]
    3dd2:	6053      	str	r3, [r2, #4]
}
    3dd4:	bf00      	nop
    3dd6:	b004      	add	sp, #16
    3dd8:	4770      	bx	lr
    3dda:	bf00      	nop
    3ddc:	0000e4f4 	.word	0x0000e4f4
    3de0:	40048000 	.word	0x40048000

00003de4 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    3de4:	b500      	push	{lr}
    3de6:	b085      	sub	sp, #20
    3de8:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    3dea:	2300      	movs	r3, #0
    3dec:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    3df0:	9b01      	ldr	r3, [sp, #4]
    3df2:	2b00      	cmp	r3, #0
    3df4:	d037      	beq.n	3e66 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3df6:	2300      	movs	r3, #0
    3df8:	9303      	str	r3, [sp, #12]
    3dfa:	e02b      	b.n	3e54 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3dfc:	4b29      	ldr	r3, [pc, #164]	; (3ea4 <DisableSafeClock+0xc0>)
    3dfe:	6819      	ldr	r1, [r3, #0]
    3e00:	9a03      	ldr	r2, [sp, #12]
    3e02:	4613      	mov	r3, r2
    3e04:	005b      	lsls	r3, r3, #1
    3e06:	4413      	add	r3, r2
    3e08:	009b      	lsls	r3, r3, #2
    3e0a:	440b      	add	r3, r1
    3e0c:	3314      	adds	r3, #20
    3e0e:	681b      	ldr	r3, [r3, #0]
    3e10:	2b05      	cmp	r3, #5
    3e12:	d11c      	bne.n	3e4e <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    3e14:	2301      	movs	r3, #1
    3e16:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    3e1a:	4b22      	ldr	r3, [pc, #136]	; (3ea4 <DisableSafeClock+0xc0>)
    3e1c:	6819      	ldr	r1, [r3, #0]
    3e1e:	9a03      	ldr	r2, [sp, #12]
    3e20:	4613      	mov	r3, r2
    3e22:	005b      	lsls	r3, r3, #1
    3e24:	4413      	add	r3, r2
    3e26:	009b      	lsls	r3, r3, #2
    3e28:	440b      	add	r3, r1
    3e2a:	3318      	adds	r3, #24
    3e2c:	881b      	ldrh	r3, [r3, #0]
    3e2e:	2b00      	cmp	r3, #0
    3e30:	d118      	bne.n	3e64 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3e32:	4b1d      	ldr	r3, [pc, #116]	; (3ea8 <DisableSafeClock+0xc4>)
    3e34:	791b      	ldrb	r3, [r3, #4]
    3e36:	4619      	mov	r1, r3
    3e38:	4a1c      	ldr	r2, [pc, #112]	; (3eac <DisableSafeClock+0xc8>)
    3e3a:	460b      	mov	r3, r1
    3e3c:	005b      	lsls	r3, r3, #1
    3e3e:	440b      	add	r3, r1
    3e40:	009b      	lsls	r3, r3, #2
    3e42:	4413      	add	r3, r2
    3e44:	3308      	adds	r3, #8
    3e46:	681b      	ldr	r3, [r3, #0]
    3e48:	2005      	movs	r0, #5
    3e4a:	4798      	blx	r3
                }
                break;
    3e4c:	e00a      	b.n	3e64 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3e4e:	9b03      	ldr	r3, [sp, #12]
    3e50:	3301      	adds	r3, #1
    3e52:	9303      	str	r3, [sp, #12]
    3e54:	4b13      	ldr	r3, [pc, #76]	; (3ea4 <DisableSafeClock+0xc0>)
    3e56:	681b      	ldr	r3, [r3, #0]
    3e58:	7a1b      	ldrb	r3, [r3, #8]
    3e5a:	461a      	mov	r2, r3
    3e5c:	9b03      	ldr	r3, [sp, #12]
    3e5e:	4293      	cmp	r3, r2
    3e60:	d3cc      	bcc.n	3dfc <DisableSafeClock+0x18>
    3e62:	e000      	b.n	3e66 <DisableSafeClock+0x82>
                break;
    3e64:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    3e66:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3e6a:	f083 0301 	eor.w	r3, r3, #1
    3e6e:	b2db      	uxtb	r3, r3
    3e70:	2b00      	cmp	r3, #0
    3e72:	d013      	beq.n	3e9c <DisableSafeClock+0xb8>
    3e74:	4b0e      	ldr	r3, [pc, #56]	; (3eb0 <DisableSafeClock+0xcc>)
    3e76:	781b      	ldrb	r3, [r3, #0]
    3e78:	f083 0301 	eor.w	r3, r3, #1
    3e7c:	b2db      	uxtb	r3, r3
    3e7e:	2b00      	cmp	r3, #0
    3e80:	d00c      	beq.n	3e9c <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3e82:	4b09      	ldr	r3, [pc, #36]	; (3ea8 <DisableSafeClock+0xc4>)
    3e84:	791b      	ldrb	r3, [r3, #4]
    3e86:	4619      	mov	r1, r3
    3e88:	4a08      	ldr	r2, [pc, #32]	; (3eac <DisableSafeClock+0xc8>)
    3e8a:	460b      	mov	r3, r1
    3e8c:	005b      	lsls	r3, r3, #1
    3e8e:	440b      	add	r3, r1
    3e90:	009b      	lsls	r3, r3, #2
    3e92:	4413      	add	r3, r2
    3e94:	3308      	adds	r3, #8
    3e96:	681b      	ldr	r3, [r3, #0]
    3e98:	2005      	movs	r0, #5
    3e9a:	4798      	blx	r3
    }
}
    3e9c:	bf00      	nop
    3e9e:	b005      	add	sp, #20
    3ea0:	f85d fb04 	ldr.w	pc, [sp], #4
    3ea4:	1fff8b9c 	.word	0x1fff8b9c
    3ea8:	0000e174 	.word	0x0000e174
    3eac:	0000e7a4 	.word	0x0000e7a4
    3eb0:	1fff8b20 	.word	0x1fff8b20

00003eb4 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    3eb4:	4b06      	ldr	r3, [pc, #24]	; (3ed0 <SetFircToResetValue_TrustedCall+0x1c>)
    3eb6:	2200      	movs	r2, #0
    3eb8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    3ebc:	4b04      	ldr	r3, [pc, #16]	; (3ed0 <SetFircToResetValue_TrustedCall+0x1c>)
    3ebe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ec2:	4a03      	ldr	r2, [pc, #12]	; (3ed0 <SetFircToResetValue_TrustedCall+0x1c>)
    3ec4:	f043 0301 	orr.w	r3, r3, #1
    3ec8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3ecc:	bf00      	nop
    3ece:	4770      	bx	lr
    3ed0:	40064000 	.word	0x40064000

00003ed4 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    3ed4:	b084      	sub	sp, #16
    3ed6:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    3ed8:	2303      	movs	r3, #3
    3eda:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3edc:	2300      	movs	r3, #0
    3ede:	9302      	str	r3, [sp, #8]
    3ee0:	e028      	b.n	3f34 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    3ee2:	9b01      	ldr	r3, [sp, #4]
    3ee4:	9a02      	ldr	r2, [sp, #8]
    3ee6:	320d      	adds	r2, #13
    3ee8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3eec:	2b28      	cmp	r3, #40	; 0x28
    3eee:	d10b      	bne.n	3f08 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3ef0:	9a01      	ldr	r2, [sp, #4]
    3ef2:	9b02      	ldr	r3, [sp, #8]
    3ef4:	330d      	adds	r3, #13
    3ef6:	00db      	lsls	r3, r3, #3
    3ef8:	4413      	add	r3, r2
    3efa:	685b      	ldr	r3, [r3, #4]
    3efc:	4a2b      	ldr	r2, [pc, #172]	; (3fac <SetSimLpoclksRegister_TrustedCall+0xd8>)
    3efe:	5cd3      	ldrb	r3, [r2, r3]
    3f00:	011b      	lsls	r3, r3, #4
    3f02:	9a03      	ldr	r2, [sp, #12]
    3f04:	4313      	orrs	r3, r2
    3f06:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    3f08:	9b01      	ldr	r3, [sp, #4]
    3f0a:	9a02      	ldr	r2, [sp, #8]
    3f0c:	320d      	adds	r2, #13
    3f0e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3f12:	2b29      	cmp	r3, #41	; 0x29
    3f14:	d10b      	bne.n	3f2e <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3f16:	9a01      	ldr	r2, [sp, #4]
    3f18:	9b02      	ldr	r3, [sp, #8]
    3f1a:	330d      	adds	r3, #13
    3f1c:	00db      	lsls	r3, r3, #3
    3f1e:	4413      	add	r3, r2
    3f20:	685b      	ldr	r3, [r3, #4]
    3f22:	4a23      	ldr	r2, [pc, #140]	; (3fb0 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    3f24:	5cd3      	ldrb	r3, [r2, r3]
    3f26:	009b      	lsls	r3, r3, #2
    3f28:	9a03      	ldr	r2, [sp, #12]
    3f2a:	4313      	orrs	r3, r2
    3f2c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3f2e:	9b02      	ldr	r3, [sp, #8]
    3f30:	3301      	adds	r3, #1
    3f32:	9302      	str	r3, [sp, #8]
    3f34:	9b01      	ldr	r3, [sp, #4]
    3f36:	7adb      	ldrb	r3, [r3, #11]
    3f38:	461a      	mov	r2, r3
    3f3a:	9b02      	ldr	r3, [sp, #8]
    3f3c:	4293      	cmp	r3, r2
    3f3e:	d3d0      	bcc.n	3ee2 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3f40:	2300      	movs	r3, #0
    3f42:	9302      	str	r3, [sp, #8]
    3f44:	e026      	b.n	3f94 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    3f46:	9a01      	ldr	r2, [sp, #4]
    3f48:	9b02      	ldr	r3, [sp, #8]
    3f4a:	334e      	adds	r3, #78	; 0x4e
    3f4c:	00db      	lsls	r3, r3, #3
    3f4e:	4413      	add	r3, r2
    3f50:	685b      	ldr	r3, [r3, #4]
    3f52:	2b12      	cmp	r3, #18
    3f54:	d109      	bne.n	3f6a <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3f56:	9a01      	ldr	r2, [sp, #4]
    3f58:	9b02      	ldr	r3, [sp, #8]
    3f5a:	334e      	adds	r3, #78	; 0x4e
    3f5c:	00db      	lsls	r3, r3, #3
    3f5e:	4413      	add	r3, r2
    3f60:	891b      	ldrh	r3, [r3, #8]
    3f62:	005b      	lsls	r3, r3, #1
    3f64:	9a03      	ldr	r2, [sp, #12]
    3f66:	4313      	orrs	r3, r2
    3f68:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    3f6a:	9a01      	ldr	r2, [sp, #4]
    3f6c:	9b02      	ldr	r3, [sp, #8]
    3f6e:	334e      	adds	r3, #78	; 0x4e
    3f70:	00db      	lsls	r3, r3, #3
    3f72:	4413      	add	r3, r2
    3f74:	685b      	ldr	r3, [r3, #4]
    3f76:	2b13      	cmp	r3, #19
    3f78:	d109      	bne.n	3f8e <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3f7a:	9a01      	ldr	r2, [sp, #4]
    3f7c:	9b02      	ldr	r3, [sp, #8]
    3f7e:	334e      	adds	r3, #78	; 0x4e
    3f80:	00db      	lsls	r3, r3, #3
    3f82:	4413      	add	r3, r2
    3f84:	891b      	ldrh	r3, [r3, #8]
    3f86:	461a      	mov	r2, r3
    3f88:	9b03      	ldr	r3, [sp, #12]
    3f8a:	4313      	orrs	r3, r2
    3f8c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3f8e:	9b02      	ldr	r3, [sp, #8]
    3f90:	3301      	adds	r3, #1
    3f92:	9302      	str	r3, [sp, #8]
    3f94:	9b01      	ldr	r3, [sp, #4]
    3f96:	7c1b      	ldrb	r3, [r3, #16]
    3f98:	461a      	mov	r2, r3
    3f9a:	9b02      	ldr	r3, [sp, #8]
    3f9c:	4293      	cmp	r3, r2
    3f9e:	d3d2      	bcc.n	3f46 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    3fa0:	4a04      	ldr	r2, [pc, #16]	; (3fb4 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    3fa2:	9b03      	ldr	r3, [sp, #12]
    3fa4:	6113      	str	r3, [r2, #16]
}
    3fa6:	bf00      	nop
    3fa8:	b004      	add	sp, #16
    3faa:	4770      	bx	lr
    3fac:	0000e4f4 	.word	0x0000e4f4
    3fb0:	0000e5ac 	.word	0x0000e5ac
    3fb4:	40048000 	.word	0x40048000

00003fb8 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    3fb8:	b500      	push	{lr}
    3fba:	b089      	sub	sp, #36	; 0x24
    3fbc:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3fbe:	2300      	movs	r3, #0
    3fc0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    3fc4:	4a21      	ldr	r2, [pc, #132]	; (404c <Clock_Ip_SpecificPlatformInitClock+0x94>)
    3fc6:	9b01      	ldr	r3, [sp, #4]
    3fc8:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    3fca:	4b21      	ldr	r3, [pc, #132]	; (4050 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3fcc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3fd0:	f003 0301 	and.w	r3, r3, #1
    3fd4:	2b00      	cmp	r3, #0
    3fd6:	d12e      	bne.n	4036 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    3fd8:	4b1e      	ldr	r3, [pc, #120]	; (4054 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3fda:	2200      	movs	r2, #0
    3fdc:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    3fde:	f7ff ff69 	bl	3eb4 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3fe2:	aa03      	add	r2, sp, #12
    3fe4:	a904      	add	r1, sp, #16
    3fe6:	a805      	add	r0, sp, #20
    3fe8:	f24c 3350 	movw	r3, #50000	; 0xc350
    3fec:	f7fe f8ae 	bl	214c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3ff0:	4b17      	ldr	r3, [pc, #92]	; (4050 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3ff2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ff6:	0e1b      	lsrs	r3, r3, #24
    3ff8:	f003 0301 	and.w	r3, r3, #1
    3ffc:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3ffe:	9a03      	ldr	r2, [sp, #12]
    4000:	a904      	add	r1, sp, #16
    4002:	ab05      	add	r3, sp, #20
    4004:	4618      	mov	r0, r3
    4006:	f7fe f8bb 	bl	2180 <Clock_Ip_TimeoutExpired>
    400a:	4603      	mov	r3, r0
    400c:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4010:	9b06      	ldr	r3, [sp, #24]
    4012:	2b00      	cmp	r3, #0
    4014:	d106      	bne.n	4024 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4016:	f89d 301f 	ldrb.w	r3, [sp, #31]
    401a:	f083 0301 	eor.w	r3, r3, #1
    401e:	b2db      	uxtb	r3, r3
    4020:	2b00      	cmp	r3, #0
    4022:	d1e5      	bne.n	3ff0 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4024:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4028:	2b00      	cmp	r3, #0
    402a:	d007      	beq.n	403c <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    402c:	2105      	movs	r1, #5
    402e:	2001      	movs	r0, #1
    4030:	f7fe f87c 	bl	212c <Clock_Ip_ReportClockErrors>
    4034:	e002      	b.n	403c <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4036:	4b07      	ldr	r3, [pc, #28]	; (4054 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4038:	2201      	movs	r2, #1
    403a:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    403c:	9801      	ldr	r0, [sp, #4]
    403e:	f7ff ff49 	bl	3ed4 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4042:	bf00      	nop
    4044:	b009      	add	sp, #36	; 0x24
    4046:	f85d fb04 	ldr.w	pc, [sp], #4
    404a:	bf00      	nop
    404c:	1fff8b9c 	.word	0x1fff8b9c
    4050:	40064000 	.word	0x40064000
    4054:	1fff8b20 	.word	0x1fff8b20

00004058 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4058:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    405a:	2300      	movs	r3, #0
    405c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    405e:	4b29      	ldr	r3, [pc, #164]	; (4104 <getFircConfig+0xac>)
    4060:	681b      	ldr	r3, [r3, #0]
    4062:	2b00      	cmp	r3, #0
    4064:	d024      	beq.n	40b0 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4066:	2300      	movs	r3, #0
    4068:	9301      	str	r3, [sp, #4]
    406a:	e01a      	b.n	40a2 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    406c:	4b25      	ldr	r3, [pc, #148]	; (4104 <getFircConfig+0xac>)
    406e:	6819      	ldr	r1, [r3, #0]
    4070:	9a01      	ldr	r2, [sp, #4]
    4072:	4613      	mov	r3, r2
    4074:	005b      	lsls	r3, r3, #1
    4076:	4413      	add	r3, r2
    4078:	009b      	lsls	r3, r3, #2
    407a:	440b      	add	r3, r1
    407c:	3314      	adds	r3, #20
    407e:	681b      	ldr	r3, [r3, #0]
    4080:	2b05      	cmp	r3, #5
    4082:	d10b      	bne.n	409c <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4084:	4b1f      	ldr	r3, [pc, #124]	; (4104 <getFircConfig+0xac>)
    4086:	6819      	ldr	r1, [r3, #0]
    4088:	9a01      	ldr	r2, [sp, #4]
    408a:	4613      	mov	r3, r2
    408c:	005b      	lsls	r3, r3, #1
    408e:	4413      	add	r3, r2
    4090:	009b      	lsls	r3, r3, #2
    4092:	3310      	adds	r3, #16
    4094:	440b      	add	r3, r1
    4096:	3304      	adds	r3, #4
    4098:	9300      	str	r3, [sp, #0]
                break;
    409a:	e009      	b.n	40b0 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    409c:	9b01      	ldr	r3, [sp, #4]
    409e:	3301      	adds	r3, #1
    40a0:	9301      	str	r3, [sp, #4]
    40a2:	4b18      	ldr	r3, [pc, #96]	; (4104 <getFircConfig+0xac>)
    40a4:	681b      	ldr	r3, [r3, #0]
    40a6:	7a1b      	ldrb	r3, [r3, #8]
    40a8:	461a      	mov	r2, r3
    40aa:	9b01      	ldr	r3, [sp, #4]
    40ac:	4293      	cmp	r3, r2
    40ae:	d3dd      	bcc.n	406c <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    40b0:	9b00      	ldr	r3, [sp, #0]
    40b2:	2b00      	cmp	r3, #0
    40b4:	d121      	bne.n	40fa <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    40b6:	4b14      	ldr	r3, [pc, #80]	; (4108 <getFircConfig+0xb0>)
    40b8:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    40ba:	4b13      	ldr	r3, [pc, #76]	; (4108 <getFircConfig+0xb0>)
    40bc:	2205      	movs	r2, #5
    40be:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    40c0:	4b12      	ldr	r3, [pc, #72]	; (410c <getFircConfig+0xb4>)
    40c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40c6:	b29b      	uxth	r3, r3
    40c8:	f003 0301 	and.w	r3, r3, #1
    40cc:	b29a      	uxth	r2, r3
    40ce:	4b0e      	ldr	r3, [pc, #56]	; (4108 <getFircConfig+0xb0>)
    40d0:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    40d2:	4b0e      	ldr	r3, [pc, #56]	; (410c <getFircConfig+0xb4>)
    40d4:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    40d8:	b2db      	uxtb	r3, r3
    40da:	f003 0303 	and.w	r3, r3, #3
    40de:	b2da      	uxtb	r2, r3
    40e0:	4b09      	ldr	r3, [pc, #36]	; (4108 <getFircConfig+0xb0>)
    40e2:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    40e4:	4b09      	ldr	r3, [pc, #36]	; (410c <getFircConfig+0xb4>)
    40e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40ea:	b2db      	uxtb	r3, r3
    40ec:	10db      	asrs	r3, r3, #3
    40ee:	b2db      	uxtb	r3, r3
    40f0:	f003 0301 	and.w	r3, r3, #1
    40f4:	b2da      	uxtb	r2, r3
    40f6:	4b04      	ldr	r3, [pc, #16]	; (4108 <getFircConfig+0xb0>)
    40f8:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    40fa:	9b00      	ldr	r3, [sp, #0]
}
    40fc:	4618      	mov	r0, r3
    40fe:	b002      	add	sp, #8
    4100:	4770      	bx	lr
    4102:	bf00      	nop
    4104:	1fff8b9c 	.word	0x1fff8b9c
    4108:	1fff8c08 	.word	0x1fff8c08
    410c:	40064000 	.word	0x40064000

00004110 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4110:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4112:	2300      	movs	r3, #0
    4114:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4116:	4b20      	ldr	r3, [pc, #128]	; (4198 <getSoscConfig+0x88>)
    4118:	681b      	ldr	r3, [r3, #0]
    411a:	2b00      	cmp	r3, #0
    411c:	d024      	beq.n	4168 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    411e:	2300      	movs	r3, #0
    4120:	9301      	str	r3, [sp, #4]
    4122:	e01a      	b.n	415a <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4124:	4b1c      	ldr	r3, [pc, #112]	; (4198 <getSoscConfig+0x88>)
    4126:	6819      	ldr	r1, [r3, #0]
    4128:	9a01      	ldr	r2, [sp, #4]
    412a:	4613      	mov	r3, r2
    412c:	009b      	lsls	r3, r3, #2
    412e:	4413      	add	r3, r2
    4130:	009b      	lsls	r3, r3, #2
    4132:	440b      	add	r3, r1
    4134:	332c      	adds	r3, #44	; 0x2c
    4136:	681b      	ldr	r3, [r3, #0]
    4138:	2b08      	cmp	r3, #8
    413a:	d10b      	bne.n	4154 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    413c:	4b16      	ldr	r3, [pc, #88]	; (4198 <getSoscConfig+0x88>)
    413e:	6819      	ldr	r1, [r3, #0]
    4140:	9a01      	ldr	r2, [sp, #4]
    4142:	4613      	mov	r3, r2
    4144:	009b      	lsls	r3, r3, #2
    4146:	4413      	add	r3, r2
    4148:	009b      	lsls	r3, r3, #2
    414a:	3328      	adds	r3, #40	; 0x28
    414c:	440b      	add	r3, r1
    414e:	3304      	adds	r3, #4
    4150:	9300      	str	r3, [sp, #0]
                break;
    4152:	e009      	b.n	4168 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4154:	9b01      	ldr	r3, [sp, #4]
    4156:	3301      	adds	r3, #1
    4158:	9301      	str	r3, [sp, #4]
    415a:	4b0f      	ldr	r3, [pc, #60]	; (4198 <getSoscConfig+0x88>)
    415c:	681b      	ldr	r3, [r3, #0]
    415e:	7a5b      	ldrb	r3, [r3, #9]
    4160:	461a      	mov	r2, r3
    4162:	9b01      	ldr	r3, [sp, #4]
    4164:	4293      	cmp	r3, r2
    4166:	d3dd      	bcc.n	4124 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4168:	9b00      	ldr	r3, [sp, #0]
    416a:	2b00      	cmp	r3, #0
    416c:	d110      	bne.n	4190 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    416e:	4b0b      	ldr	r3, [pc, #44]	; (419c <getSoscConfig+0x8c>)
    4170:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4172:	4b0a      	ldr	r3, [pc, #40]	; (419c <getSoscConfig+0x8c>)
    4174:	2208      	movs	r2, #8
    4176:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4178:	4b09      	ldr	r3, [pc, #36]	; (41a0 <getSoscConfig+0x90>)
    417a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    417e:	b29b      	uxth	r3, r3
    4180:	f003 0301 	and.w	r3, r3, #1
    4184:	b29a      	uxth	r2, r3
    4186:	4b05      	ldr	r3, [pc, #20]	; (419c <getSoscConfig+0x8c>)
    4188:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    418a:	4b04      	ldr	r3, [pc, #16]	; (419c <getSoscConfig+0x8c>)
    418c:	4a05      	ldr	r2, [pc, #20]	; (41a4 <getSoscConfig+0x94>)
    418e:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4190:	9b00      	ldr	r3, [sp, #0]
}
    4192:	4618      	mov	r0, r3
    4194:	b002      	add	sp, #8
    4196:	4770      	bx	lr
    4198:	1fff8b9c 	.word	0x1fff8b9c
    419c:	1fff8c14 	.word	0x1fff8c14
    41a0:	40064000 	.word	0x40064000
    41a4:	02625a00 	.word	0x02625a00

000041a8 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    41a8:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    41aa:	2300      	movs	r3, #0
    41ac:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    41ae:	4b28      	ldr	r3, [pc, #160]	; (4250 <getSpllConfig+0xa8>)
    41b0:	681b      	ldr	r3, [r3, #0]
    41b2:	2b00      	cmp	r3, #0
    41b4:	d023      	beq.n	41fe <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    41b6:	2300      	movs	r3, #0
    41b8:	9301      	str	r3, [sp, #4]
    41ba:	e019      	b.n	41f0 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    41bc:	4b24      	ldr	r3, [pc, #144]	; (4250 <getSpllConfig+0xa8>)
    41be:	6819      	ldr	r1, [r3, #0]
    41c0:	9a01      	ldr	r2, [sp, #4]
    41c2:	4613      	mov	r3, r2
    41c4:	009b      	lsls	r3, r3, #2
    41c6:	4413      	add	r3, r2
    41c8:	00db      	lsls	r3, r3, #3
    41ca:	440b      	add	r3, r1
    41cc:	3340      	adds	r3, #64	; 0x40
    41ce:	681b      	ldr	r3, [r3, #0]
    41d0:	2b09      	cmp	r3, #9
    41d2:	d10a      	bne.n	41ea <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    41d4:	4b1e      	ldr	r3, [pc, #120]	; (4250 <getSpllConfig+0xa8>)
    41d6:	6819      	ldr	r1, [r3, #0]
    41d8:	9a01      	ldr	r2, [sp, #4]
    41da:	4613      	mov	r3, r2
    41dc:	009b      	lsls	r3, r3, #2
    41de:	4413      	add	r3, r2
    41e0:	00db      	lsls	r3, r3, #3
    41e2:	3340      	adds	r3, #64	; 0x40
    41e4:	440b      	add	r3, r1
    41e6:	9300      	str	r3, [sp, #0]
                break;
    41e8:	e009      	b.n	41fe <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    41ea:	9b01      	ldr	r3, [sp, #4]
    41ec:	3301      	adds	r3, #1
    41ee:	9301      	str	r3, [sp, #4]
    41f0:	4b17      	ldr	r3, [pc, #92]	; (4250 <getSpllConfig+0xa8>)
    41f2:	681b      	ldr	r3, [r3, #0]
    41f4:	7a9b      	ldrb	r3, [r3, #10]
    41f6:	461a      	mov	r2, r3
    41f8:	9b01      	ldr	r3, [sp, #4]
    41fa:	4293      	cmp	r3, r2
    41fc:	d3de      	bcc.n	41bc <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    41fe:	9b00      	ldr	r3, [sp, #0]
    4200:	2b00      	cmp	r3, #0
    4202:	d121      	bne.n	4248 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4204:	4b13      	ldr	r3, [pc, #76]	; (4254 <getSpllConfig+0xac>)
    4206:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4208:	4b12      	ldr	r3, [pc, #72]	; (4254 <getSpllConfig+0xac>)
    420a:	2209      	movs	r2, #9
    420c:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    420e:	4b12      	ldr	r3, [pc, #72]	; (4258 <getSpllConfig+0xb0>)
    4210:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4214:	b29b      	uxth	r3, r3
    4216:	f003 0301 	and.w	r3, r3, #1
    421a:	b29a      	uxth	r2, r3
    421c:	4b0d      	ldr	r3, [pc, #52]	; (4254 <getSpllConfig+0xac>)
    421e:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4220:	4b0d      	ldr	r3, [pc, #52]	; (4258 <getSpllConfig+0xb0>)
    4222:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4226:	0a1b      	lsrs	r3, r3, #8
    4228:	b2db      	uxtb	r3, r3
    422a:	f003 0307 	and.w	r3, r3, #7
    422e:	b2da      	uxtb	r2, r3
    4230:	4b08      	ldr	r3, [pc, #32]	; (4254 <getSpllConfig+0xac>)
    4232:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4234:	4b08      	ldr	r3, [pc, #32]	; (4258 <getSpllConfig+0xb0>)
    4236:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    423a:	0c1b      	lsrs	r3, r3, #16
    423c:	b2db      	uxtb	r3, r3
    423e:	f003 031f 	and.w	r3, r3, #31
    4242:	b2da      	uxtb	r2, r3
    4244:	4b03      	ldr	r3, [pc, #12]	; (4254 <getSpllConfig+0xac>)
    4246:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4248:	9b00      	ldr	r3, [sp, #0]
}
    424a:	4618      	mov	r0, r3
    424c:	b002      	add	sp, #8
    424e:	4770      	bx	lr
    4250:	1fff8b9c 	.word	0x1fff8b9c
    4254:	1fff8c28 	.word	0x1fff8c28
    4258:	40064000 	.word	0x40064000

0000425c <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    425c:	b086      	sub	sp, #24
    425e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4260:	2300      	movs	r3, #0
    4262:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4264:	9b01      	ldr	r3, [sp, #4]
    4266:	2b1b      	cmp	r3, #27
    4268:	d00f      	beq.n	428a <getSelectorConfig+0x2e>
    426a:	9b01      	ldr	r3, [sp, #4]
    426c:	2b1b      	cmp	r3, #27
    426e:	d80f      	bhi.n	4290 <getSelectorConfig+0x34>
    4270:	9b01      	ldr	r3, [sp, #4]
    4272:	2b19      	cmp	r3, #25
    4274:	d003      	beq.n	427e <getSelectorConfig+0x22>
    4276:	9b01      	ldr	r3, [sp, #4]
    4278:	2b1a      	cmp	r3, #26
    427a:	d003      	beq.n	4284 <getSelectorConfig+0x28>
    427c:	e008      	b.n	4290 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    427e:	2300      	movs	r3, #0
    4280:	9304      	str	r3, [sp, #16]
            break;
    4282:	e008      	b.n	4296 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4284:	2301      	movs	r3, #1
    4286:	9304      	str	r3, [sp, #16]
            break;
    4288:	e005      	b.n	4296 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    428a:	2302      	movs	r3, #2
    428c:	9304      	str	r3, [sp, #16]
            break;
    428e:	e002      	b.n	4296 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4290:	2300      	movs	r3, #0
    4292:	9304      	str	r3, [sp, #16]
            break;
    4294:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4296:	4b36      	ldr	r3, [pc, #216]	; (4370 <getSelectorConfig+0x114>)
    4298:	681b      	ldr	r3, [r3, #0]
    429a:	2b00      	cmp	r3, #0
    429c:	d01d      	beq.n	42da <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    429e:	2300      	movs	r3, #0
    42a0:	9303      	str	r3, [sp, #12]
    42a2:	e013      	b.n	42cc <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    42a4:	4b32      	ldr	r3, [pc, #200]	; (4370 <getSelectorConfig+0x114>)
    42a6:	681b      	ldr	r3, [r3, #0]
    42a8:	9a03      	ldr	r2, [sp, #12]
    42aa:	320d      	adds	r2, #13
    42ac:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    42b0:	9a01      	ldr	r2, [sp, #4]
    42b2:	429a      	cmp	r2, r3
    42b4:	d107      	bne.n	42c6 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    42b6:	4b2e      	ldr	r3, [pc, #184]	; (4370 <getSelectorConfig+0x114>)
    42b8:	681a      	ldr	r2, [r3, #0]
    42ba:	9b03      	ldr	r3, [sp, #12]
    42bc:	330d      	adds	r3, #13
    42be:	00db      	lsls	r3, r3, #3
    42c0:	4413      	add	r3, r2
    42c2:	9305      	str	r3, [sp, #20]
                break;
    42c4:	e009      	b.n	42da <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    42c6:	9b03      	ldr	r3, [sp, #12]
    42c8:	3301      	adds	r3, #1
    42ca:	9303      	str	r3, [sp, #12]
    42cc:	4b28      	ldr	r3, [pc, #160]	; (4370 <getSelectorConfig+0x114>)
    42ce:	681b      	ldr	r3, [r3, #0]
    42d0:	7adb      	ldrb	r3, [r3, #11]
    42d2:	461a      	mov	r2, r3
    42d4:	9b03      	ldr	r3, [sp, #12]
    42d6:	4293      	cmp	r3, r2
    42d8:	d3e4      	bcc.n	42a4 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    42da:	9b05      	ldr	r3, [sp, #20]
    42dc:	2b00      	cmp	r3, #0
    42de:	d140      	bne.n	4362 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    42e0:	9b04      	ldr	r3, [sp, #16]
    42e2:	00db      	lsls	r3, r3, #3
    42e4:	4a23      	ldr	r2, [pc, #140]	; (4374 <getSelectorConfig+0x118>)
    42e6:	4413      	add	r3, r2
    42e8:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    42ea:	4922      	ldr	r1, [pc, #136]	; (4374 <getSelectorConfig+0x118>)
    42ec:	9b04      	ldr	r3, [sp, #16]
    42ee:	9a01      	ldr	r2, [sp, #4]
    42f0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    42f4:	9b01      	ldr	r3, [sp, #4]
    42f6:	2b1b      	cmp	r3, #27
    42f8:	d025      	beq.n	4346 <getSelectorConfig+0xea>
    42fa:	9b01      	ldr	r3, [sp, #4]
    42fc:	2b1b      	cmp	r3, #27
    42fe:	d832      	bhi.n	4366 <getSelectorConfig+0x10a>
    4300:	9b01      	ldr	r3, [sp, #4]
    4302:	2b19      	cmp	r3, #25
    4304:	d003      	beq.n	430e <getSelectorConfig+0xb2>
    4306:	9b01      	ldr	r3, [sp, #4]
    4308:	2b1a      	cmp	r3, #26
    430a:	d00e      	beq.n	432a <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    430c:	e02b      	b.n	4366 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    430e:	4b1a      	ldr	r3, [pc, #104]	; (4378 <getSelectorConfig+0x11c>)
    4310:	695b      	ldr	r3, [r3, #20]
    4312:	0e1b      	lsrs	r3, r3, #24
    4314:	f003 030f 	and.w	r3, r3, #15
    4318:	4a18      	ldr	r2, [pc, #96]	; (437c <getSelectorConfig+0x120>)
    431a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    431e:	4915      	ldr	r1, [pc, #84]	; (4374 <getSelectorConfig+0x118>)
    4320:	9b04      	ldr	r3, [sp, #16]
    4322:	00db      	lsls	r3, r3, #3
    4324:	440b      	add	r3, r1
    4326:	605a      	str	r2, [r3, #4]
                break;
    4328:	e01e      	b.n	4368 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    432a:	4b13      	ldr	r3, [pc, #76]	; (4378 <getSelectorConfig+0x11c>)
    432c:	699b      	ldr	r3, [r3, #24]
    432e:	0e1b      	lsrs	r3, r3, #24
    4330:	f003 030f 	and.w	r3, r3, #15
    4334:	4a11      	ldr	r2, [pc, #68]	; (437c <getSelectorConfig+0x120>)
    4336:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    433a:	490e      	ldr	r1, [pc, #56]	; (4374 <getSelectorConfig+0x118>)
    433c:	9b04      	ldr	r3, [sp, #16]
    433e:	00db      	lsls	r3, r3, #3
    4340:	440b      	add	r3, r1
    4342:	605a      	str	r2, [r3, #4]
                break;
    4344:	e010      	b.n	4368 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4346:	4b0c      	ldr	r3, [pc, #48]	; (4378 <getSelectorConfig+0x11c>)
    4348:	69db      	ldr	r3, [r3, #28]
    434a:	0e1b      	lsrs	r3, r3, #24
    434c:	f003 030f 	and.w	r3, r3, #15
    4350:	4a0a      	ldr	r2, [pc, #40]	; (437c <getSelectorConfig+0x120>)
    4352:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4356:	4907      	ldr	r1, [pc, #28]	; (4374 <getSelectorConfig+0x118>)
    4358:	9b04      	ldr	r3, [sp, #16]
    435a:	00db      	lsls	r3, r3, #3
    435c:	440b      	add	r3, r1
    435e:	605a      	str	r2, [r3, #4]
                break;
    4360:	e002      	b.n	4368 <getSelectorConfig+0x10c>
        }
    }
    4362:	bf00      	nop
    4364:	e000      	b.n	4368 <getSelectorConfig+0x10c>
                break;
    4366:	bf00      	nop

    return ReturnValue;
    4368:	9b05      	ldr	r3, [sp, #20]
}
    436a:	4618      	mov	r0, r3
    436c:	b006      	add	sp, #24
    436e:	4770      	bx	lr
    4370:	1fff8b9c 	.word	0x1fff8b9c
    4374:	1fff8c50 	.word	0x1fff8c50
    4378:	40064000 	.word	0x40064000
    437c:	0000e874 	.word	0x0000e874

00004380 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4380:	b086      	sub	sp, #24
    4382:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4384:	2300      	movs	r3, #0
    4386:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4388:	2300      	movs	r3, #0
    438a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    438c:	9b01      	ldr	r3, [sp, #4]
    438e:	2b1f      	cmp	r3, #31
    4390:	d00f      	beq.n	43b2 <getCoreDividerConfig+0x32>
    4392:	9b01      	ldr	r3, [sp, #4]
    4394:	2b1f      	cmp	r3, #31
    4396:	d80f      	bhi.n	43b8 <getCoreDividerConfig+0x38>
    4398:	9b01      	ldr	r3, [sp, #4]
    439a:	2b1d      	cmp	r3, #29
    439c:	d003      	beq.n	43a6 <getCoreDividerConfig+0x26>
    439e:	9b01      	ldr	r3, [sp, #4]
    43a0:	2b1e      	cmp	r3, #30
    43a2:	d003      	beq.n	43ac <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    43a4:	e008      	b.n	43b8 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    43a6:	2300      	movs	r3, #0
    43a8:	9304      	str	r3, [sp, #16]
            break;
    43aa:	e006      	b.n	43ba <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    43ac:	2301      	movs	r3, #1
    43ae:	9304      	str	r3, [sp, #16]
            break;
    43b0:	e003      	b.n	43ba <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    43b2:	2302      	movs	r3, #2
    43b4:	9304      	str	r3, [sp, #16]
            break;
    43b6:	e000      	b.n	43ba <getCoreDividerConfig+0x3a>
                break;
    43b8:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    43ba:	4b41      	ldr	r3, [pc, #260]	; (44c0 <getCoreDividerConfig+0x140>)
    43bc:	681b      	ldr	r3, [r3, #0]
    43be:	2b00      	cmp	r3, #0
    43c0:	d026      	beq.n	4410 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    43c2:	2300      	movs	r3, #0
    43c4:	9303      	str	r3, [sp, #12]
    43c6:	e01c      	b.n	4402 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    43c8:	4b3d      	ldr	r3, [pc, #244]	; (44c0 <getCoreDividerConfig+0x140>)
    43ca:	6819      	ldr	r1, [r3, #0]
    43cc:	9a03      	ldr	r2, [sp, #12]
    43ce:	4613      	mov	r3, r2
    43d0:	005b      	lsls	r3, r3, #1
    43d2:	4413      	add	r3, r2
    43d4:	009b      	lsls	r3, r3, #2
    43d6:	440b      	add	r3, r1
    43d8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    43dc:	681b      	ldr	r3, [r3, #0]
    43de:	9a01      	ldr	r2, [sp, #4]
    43e0:	429a      	cmp	r2, r3
    43e2:	d10b      	bne.n	43fc <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    43e4:	4b36      	ldr	r3, [pc, #216]	; (44c0 <getCoreDividerConfig+0x140>)
    43e6:	6819      	ldr	r1, [r3, #0]
    43e8:	9a03      	ldr	r2, [sp, #12]
    43ea:	4613      	mov	r3, r2
    43ec:	005b      	lsls	r3, r3, #1
    43ee:	4413      	add	r3, r2
    43f0:	009b      	lsls	r3, r3, #2
    43f2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    43f6:	440b      	add	r3, r1
    43f8:	9305      	str	r3, [sp, #20]
                break;
    43fa:	e009      	b.n	4410 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    43fc:	9b03      	ldr	r3, [sp, #12]
    43fe:	3301      	adds	r3, #1
    4400:	9303      	str	r3, [sp, #12]
    4402:	4b2f      	ldr	r3, [pc, #188]	; (44c0 <getCoreDividerConfig+0x140>)
    4404:	681b      	ldr	r3, [r3, #0]
    4406:	7b1b      	ldrb	r3, [r3, #12]
    4408:	461a      	mov	r2, r3
    440a:	9b03      	ldr	r3, [sp, #12]
    440c:	4293      	cmp	r3, r2
    440e:	d3db      	bcc.n	43c8 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4410:	9b05      	ldr	r3, [sp, #20]
    4412:	2b00      	cmp	r3, #0
    4414:	d14d      	bne.n	44b2 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4416:	9a04      	ldr	r2, [sp, #16]
    4418:	4613      	mov	r3, r2
    441a:	005b      	lsls	r3, r3, #1
    441c:	4413      	add	r3, r2
    441e:	009b      	lsls	r3, r3, #2
    4420:	4a28      	ldr	r2, [pc, #160]	; (44c4 <getCoreDividerConfig+0x144>)
    4422:	4413      	add	r3, r2
    4424:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4426:	4927      	ldr	r1, [pc, #156]	; (44c4 <getCoreDividerConfig+0x144>)
    4428:	9a04      	ldr	r2, [sp, #16]
    442a:	4613      	mov	r3, r2
    442c:	005b      	lsls	r3, r3, #1
    442e:	4413      	add	r3, r2
    4430:	009b      	lsls	r3, r3, #2
    4432:	440b      	add	r3, r1
    4434:	9a01      	ldr	r2, [sp, #4]
    4436:	601a      	str	r2, [r3, #0]
        switch(Name)
    4438:	9b01      	ldr	r3, [sp, #4]
    443a:	2b1f      	cmp	r3, #31
    443c:	d029      	beq.n	4492 <getCoreDividerConfig+0x112>
    443e:	9b01      	ldr	r3, [sp, #4]
    4440:	2b1f      	cmp	r3, #31
    4442:	d838      	bhi.n	44b6 <getCoreDividerConfig+0x136>
    4444:	9b01      	ldr	r3, [sp, #4]
    4446:	2b1d      	cmp	r3, #29
    4448:	d003      	beq.n	4452 <getCoreDividerConfig+0xd2>
    444a:	9b01      	ldr	r3, [sp, #4]
    444c:	2b1e      	cmp	r3, #30
    444e:	d010      	beq.n	4472 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4450:	e031      	b.n	44b6 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4452:	4b1d      	ldr	r3, [pc, #116]	; (44c8 <getCoreDividerConfig+0x148>)
    4454:	695b      	ldr	r3, [r3, #20]
    4456:	0c1b      	lsrs	r3, r3, #16
    4458:	f003 030f 	and.w	r3, r3, #15
    445c:	1c59      	adds	r1, r3, #1
    445e:	4819      	ldr	r0, [pc, #100]	; (44c4 <getCoreDividerConfig+0x144>)
    4460:	9a04      	ldr	r2, [sp, #16]
    4462:	4613      	mov	r3, r2
    4464:	005b      	lsls	r3, r3, #1
    4466:	4413      	add	r3, r2
    4468:	009b      	lsls	r3, r3, #2
    446a:	4403      	add	r3, r0
    446c:	3304      	adds	r3, #4
    446e:	6019      	str	r1, [r3, #0]
                break;
    4470:	e022      	b.n	44b8 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4472:	4b15      	ldr	r3, [pc, #84]	; (44c8 <getCoreDividerConfig+0x148>)
    4474:	699b      	ldr	r3, [r3, #24]
    4476:	0c1b      	lsrs	r3, r3, #16
    4478:	f003 030f 	and.w	r3, r3, #15
    447c:	1c59      	adds	r1, r3, #1
    447e:	4811      	ldr	r0, [pc, #68]	; (44c4 <getCoreDividerConfig+0x144>)
    4480:	9a04      	ldr	r2, [sp, #16]
    4482:	4613      	mov	r3, r2
    4484:	005b      	lsls	r3, r3, #1
    4486:	4413      	add	r3, r2
    4488:	009b      	lsls	r3, r3, #2
    448a:	4403      	add	r3, r0
    448c:	3304      	adds	r3, #4
    448e:	6019      	str	r1, [r3, #0]
                break;
    4490:	e012      	b.n	44b8 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4492:	4b0d      	ldr	r3, [pc, #52]	; (44c8 <getCoreDividerConfig+0x148>)
    4494:	69db      	ldr	r3, [r3, #28]
    4496:	0c1b      	lsrs	r3, r3, #16
    4498:	f003 030f 	and.w	r3, r3, #15
    449c:	1c59      	adds	r1, r3, #1
    449e:	4809      	ldr	r0, [pc, #36]	; (44c4 <getCoreDividerConfig+0x144>)
    44a0:	9a04      	ldr	r2, [sp, #16]
    44a2:	4613      	mov	r3, r2
    44a4:	005b      	lsls	r3, r3, #1
    44a6:	4413      	add	r3, r2
    44a8:	009b      	lsls	r3, r3, #2
    44aa:	4403      	add	r3, r0
    44ac:	3304      	adds	r3, #4
    44ae:	6019      	str	r1, [r3, #0]
                break;
    44b0:	e002      	b.n	44b8 <getCoreDividerConfig+0x138>
        }
    }
    44b2:	bf00      	nop
    44b4:	e000      	b.n	44b8 <getCoreDividerConfig+0x138>
                break;
    44b6:	bf00      	nop

    return ReturnValue;
    44b8:	9b05      	ldr	r3, [sp, #20]
}
    44ba:	4618      	mov	r0, r3
    44bc:	b006      	add	sp, #24
    44be:	4770      	bx	lr
    44c0:	1fff8b9c 	.word	0x1fff8b9c
    44c4:	1fff8c68 	.word	0x1fff8c68
    44c8:	40064000 	.word	0x40064000

000044cc <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    44cc:	b086      	sub	sp, #24
    44ce:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    44d0:	2300      	movs	r3, #0
    44d2:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    44d4:	2300      	movs	r3, #0
    44d6:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    44d8:	9b01      	ldr	r3, [sp, #4]
    44da:	2b23      	cmp	r3, #35	; 0x23
    44dc:	d00f      	beq.n	44fe <getBusDividerConfig+0x32>
    44de:	9b01      	ldr	r3, [sp, #4]
    44e0:	2b23      	cmp	r3, #35	; 0x23
    44e2:	d80f      	bhi.n	4504 <getBusDividerConfig+0x38>
    44e4:	9b01      	ldr	r3, [sp, #4]
    44e6:	2b21      	cmp	r3, #33	; 0x21
    44e8:	d003      	beq.n	44f2 <getBusDividerConfig+0x26>
    44ea:	9b01      	ldr	r3, [sp, #4]
    44ec:	2b22      	cmp	r3, #34	; 0x22
    44ee:	d003      	beq.n	44f8 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    44f0:	e008      	b.n	4504 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    44f2:	2300      	movs	r3, #0
    44f4:	9304      	str	r3, [sp, #16]
            break;
    44f6:	e006      	b.n	4506 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    44f8:	2301      	movs	r3, #1
    44fa:	9304      	str	r3, [sp, #16]
            break;
    44fc:	e003      	b.n	4506 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    44fe:	2302      	movs	r3, #2
    4500:	9304      	str	r3, [sp, #16]
            break;
    4502:	e000      	b.n	4506 <getBusDividerConfig+0x3a>
                break;
    4504:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4506:	4b41      	ldr	r3, [pc, #260]	; (460c <getBusDividerConfig+0x140>)
    4508:	681b      	ldr	r3, [r3, #0]
    450a:	2b00      	cmp	r3, #0
    450c:	d026      	beq.n	455c <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    450e:	2300      	movs	r3, #0
    4510:	9303      	str	r3, [sp, #12]
    4512:	e01c      	b.n	454e <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4514:	4b3d      	ldr	r3, [pc, #244]	; (460c <getBusDividerConfig+0x140>)
    4516:	6819      	ldr	r1, [r3, #0]
    4518:	9a03      	ldr	r2, [sp, #12]
    451a:	4613      	mov	r3, r2
    451c:	005b      	lsls	r3, r3, #1
    451e:	4413      	add	r3, r2
    4520:	009b      	lsls	r3, r3, #2
    4522:	440b      	add	r3, r1
    4524:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4528:	681b      	ldr	r3, [r3, #0]
    452a:	9a01      	ldr	r2, [sp, #4]
    452c:	429a      	cmp	r2, r3
    452e:	d10b      	bne.n	4548 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4530:	4b36      	ldr	r3, [pc, #216]	; (460c <getBusDividerConfig+0x140>)
    4532:	6819      	ldr	r1, [r3, #0]
    4534:	9a03      	ldr	r2, [sp, #12]
    4536:	4613      	mov	r3, r2
    4538:	005b      	lsls	r3, r3, #1
    453a:	4413      	add	r3, r2
    453c:	009b      	lsls	r3, r3, #2
    453e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4542:	440b      	add	r3, r1
    4544:	9305      	str	r3, [sp, #20]
                break;
    4546:	e009      	b.n	455c <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4548:	9b03      	ldr	r3, [sp, #12]
    454a:	3301      	adds	r3, #1
    454c:	9303      	str	r3, [sp, #12]
    454e:	4b2f      	ldr	r3, [pc, #188]	; (460c <getBusDividerConfig+0x140>)
    4550:	681b      	ldr	r3, [r3, #0]
    4552:	7b1b      	ldrb	r3, [r3, #12]
    4554:	461a      	mov	r2, r3
    4556:	9b03      	ldr	r3, [sp, #12]
    4558:	4293      	cmp	r3, r2
    455a:	d3db      	bcc.n	4514 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    455c:	9b05      	ldr	r3, [sp, #20]
    455e:	2b00      	cmp	r3, #0
    4560:	d14d      	bne.n	45fe <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4562:	9a04      	ldr	r2, [sp, #16]
    4564:	4613      	mov	r3, r2
    4566:	005b      	lsls	r3, r3, #1
    4568:	4413      	add	r3, r2
    456a:	009b      	lsls	r3, r3, #2
    456c:	4a28      	ldr	r2, [pc, #160]	; (4610 <getBusDividerConfig+0x144>)
    456e:	4413      	add	r3, r2
    4570:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    4572:	4927      	ldr	r1, [pc, #156]	; (4610 <getBusDividerConfig+0x144>)
    4574:	9a04      	ldr	r2, [sp, #16]
    4576:	4613      	mov	r3, r2
    4578:	005b      	lsls	r3, r3, #1
    457a:	4413      	add	r3, r2
    457c:	009b      	lsls	r3, r3, #2
    457e:	440b      	add	r3, r1
    4580:	9a01      	ldr	r2, [sp, #4]
    4582:	601a      	str	r2, [r3, #0]
        switch(Name)
    4584:	9b01      	ldr	r3, [sp, #4]
    4586:	2b23      	cmp	r3, #35	; 0x23
    4588:	d029      	beq.n	45de <getBusDividerConfig+0x112>
    458a:	9b01      	ldr	r3, [sp, #4]
    458c:	2b23      	cmp	r3, #35	; 0x23
    458e:	d838      	bhi.n	4602 <getBusDividerConfig+0x136>
    4590:	9b01      	ldr	r3, [sp, #4]
    4592:	2b21      	cmp	r3, #33	; 0x21
    4594:	d003      	beq.n	459e <getBusDividerConfig+0xd2>
    4596:	9b01      	ldr	r3, [sp, #4]
    4598:	2b22      	cmp	r3, #34	; 0x22
    459a:	d010      	beq.n	45be <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    459c:	e031      	b.n	4602 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    459e:	4b1d      	ldr	r3, [pc, #116]	; (4614 <getBusDividerConfig+0x148>)
    45a0:	695b      	ldr	r3, [r3, #20]
    45a2:	091b      	lsrs	r3, r3, #4
    45a4:	f003 030f 	and.w	r3, r3, #15
    45a8:	1c59      	adds	r1, r3, #1
    45aa:	4819      	ldr	r0, [pc, #100]	; (4610 <getBusDividerConfig+0x144>)
    45ac:	9a04      	ldr	r2, [sp, #16]
    45ae:	4613      	mov	r3, r2
    45b0:	005b      	lsls	r3, r3, #1
    45b2:	4413      	add	r3, r2
    45b4:	009b      	lsls	r3, r3, #2
    45b6:	4403      	add	r3, r0
    45b8:	3304      	adds	r3, #4
    45ba:	6019      	str	r1, [r3, #0]
                break;
    45bc:	e022      	b.n	4604 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    45be:	4b15      	ldr	r3, [pc, #84]	; (4614 <getBusDividerConfig+0x148>)
    45c0:	699b      	ldr	r3, [r3, #24]
    45c2:	091b      	lsrs	r3, r3, #4
    45c4:	f003 030f 	and.w	r3, r3, #15
    45c8:	1c59      	adds	r1, r3, #1
    45ca:	4811      	ldr	r0, [pc, #68]	; (4610 <getBusDividerConfig+0x144>)
    45cc:	9a04      	ldr	r2, [sp, #16]
    45ce:	4613      	mov	r3, r2
    45d0:	005b      	lsls	r3, r3, #1
    45d2:	4413      	add	r3, r2
    45d4:	009b      	lsls	r3, r3, #2
    45d6:	4403      	add	r3, r0
    45d8:	3304      	adds	r3, #4
    45da:	6019      	str	r1, [r3, #0]
                break;
    45dc:	e012      	b.n	4604 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    45de:	4b0d      	ldr	r3, [pc, #52]	; (4614 <getBusDividerConfig+0x148>)
    45e0:	69db      	ldr	r3, [r3, #28]
    45e2:	091b      	lsrs	r3, r3, #4
    45e4:	f003 030f 	and.w	r3, r3, #15
    45e8:	1c59      	adds	r1, r3, #1
    45ea:	4809      	ldr	r0, [pc, #36]	; (4610 <getBusDividerConfig+0x144>)
    45ec:	9a04      	ldr	r2, [sp, #16]
    45ee:	4613      	mov	r3, r2
    45f0:	005b      	lsls	r3, r3, #1
    45f2:	4413      	add	r3, r2
    45f4:	009b      	lsls	r3, r3, #2
    45f6:	4403      	add	r3, r0
    45f8:	3304      	adds	r3, #4
    45fa:	6019      	str	r1, [r3, #0]
                break;
    45fc:	e002      	b.n	4604 <getBusDividerConfig+0x138>
        }
    }
    45fe:	bf00      	nop
    4600:	e000      	b.n	4604 <getBusDividerConfig+0x138>
                break;
    4602:	bf00      	nop

    return ReturnValue;
    4604:	9b05      	ldr	r3, [sp, #20]
}
    4606:	4618      	mov	r0, r3
    4608:	b006      	add	sp, #24
    460a:	4770      	bx	lr
    460c:	1fff8b9c 	.word	0x1fff8b9c
    4610:	1fff8c8c 	.word	0x1fff8c8c
    4614:	40064000 	.word	0x40064000

00004618 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    4618:	b086      	sub	sp, #24
    461a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    461c:	2300      	movs	r3, #0
    461e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4620:	2300      	movs	r3, #0
    4622:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4624:	9b01      	ldr	r3, [sp, #4]
    4626:	2b27      	cmp	r3, #39	; 0x27
    4628:	d00f      	beq.n	464a <getSlowDividerConfig+0x32>
    462a:	9b01      	ldr	r3, [sp, #4]
    462c:	2b27      	cmp	r3, #39	; 0x27
    462e:	d80f      	bhi.n	4650 <getSlowDividerConfig+0x38>
    4630:	9b01      	ldr	r3, [sp, #4]
    4632:	2b25      	cmp	r3, #37	; 0x25
    4634:	d003      	beq.n	463e <getSlowDividerConfig+0x26>
    4636:	9b01      	ldr	r3, [sp, #4]
    4638:	2b26      	cmp	r3, #38	; 0x26
    463a:	d003      	beq.n	4644 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    463c:	e008      	b.n	4650 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    463e:	2300      	movs	r3, #0
    4640:	9304      	str	r3, [sp, #16]
            break;
    4642:	e006      	b.n	4652 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4644:	2301      	movs	r3, #1
    4646:	9304      	str	r3, [sp, #16]
            break;
    4648:	e003      	b.n	4652 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    464a:	2302      	movs	r3, #2
    464c:	9304      	str	r3, [sp, #16]
            break;
    464e:	e000      	b.n	4652 <getSlowDividerConfig+0x3a>
                break;
    4650:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4652:	4b40      	ldr	r3, [pc, #256]	; (4754 <getSlowDividerConfig+0x13c>)
    4654:	681b      	ldr	r3, [r3, #0]
    4656:	2b00      	cmp	r3, #0
    4658:	d026      	beq.n	46a8 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    465a:	2300      	movs	r3, #0
    465c:	9303      	str	r3, [sp, #12]
    465e:	e01c      	b.n	469a <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4660:	4b3c      	ldr	r3, [pc, #240]	; (4754 <getSlowDividerConfig+0x13c>)
    4662:	6819      	ldr	r1, [r3, #0]
    4664:	9a03      	ldr	r2, [sp, #12]
    4666:	4613      	mov	r3, r2
    4668:	005b      	lsls	r3, r3, #1
    466a:	4413      	add	r3, r2
    466c:	009b      	lsls	r3, r3, #2
    466e:	440b      	add	r3, r1
    4670:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4674:	681b      	ldr	r3, [r3, #0]
    4676:	9a01      	ldr	r2, [sp, #4]
    4678:	429a      	cmp	r2, r3
    467a:	d10b      	bne.n	4694 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    467c:	4b35      	ldr	r3, [pc, #212]	; (4754 <getSlowDividerConfig+0x13c>)
    467e:	6819      	ldr	r1, [r3, #0]
    4680:	9a03      	ldr	r2, [sp, #12]
    4682:	4613      	mov	r3, r2
    4684:	005b      	lsls	r3, r3, #1
    4686:	4413      	add	r3, r2
    4688:	009b      	lsls	r3, r3, #2
    468a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    468e:	440b      	add	r3, r1
    4690:	9305      	str	r3, [sp, #20]
                break;
    4692:	e009      	b.n	46a8 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4694:	9b03      	ldr	r3, [sp, #12]
    4696:	3301      	adds	r3, #1
    4698:	9303      	str	r3, [sp, #12]
    469a:	4b2e      	ldr	r3, [pc, #184]	; (4754 <getSlowDividerConfig+0x13c>)
    469c:	681b      	ldr	r3, [r3, #0]
    469e:	7b1b      	ldrb	r3, [r3, #12]
    46a0:	461a      	mov	r2, r3
    46a2:	9b03      	ldr	r3, [sp, #12]
    46a4:	4293      	cmp	r3, r2
    46a6:	d3db      	bcc.n	4660 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    46a8:	9b05      	ldr	r3, [sp, #20]
    46aa:	2b00      	cmp	r3, #0
    46ac:	d14a      	bne.n	4744 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    46ae:	9a04      	ldr	r2, [sp, #16]
    46b0:	4613      	mov	r3, r2
    46b2:	005b      	lsls	r3, r3, #1
    46b4:	4413      	add	r3, r2
    46b6:	009b      	lsls	r3, r3, #2
    46b8:	4a27      	ldr	r2, [pc, #156]	; (4758 <getSlowDividerConfig+0x140>)
    46ba:	4413      	add	r3, r2
    46bc:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    46be:	4926      	ldr	r1, [pc, #152]	; (4758 <getSlowDividerConfig+0x140>)
    46c0:	9a04      	ldr	r2, [sp, #16]
    46c2:	4613      	mov	r3, r2
    46c4:	005b      	lsls	r3, r3, #1
    46c6:	4413      	add	r3, r2
    46c8:	009b      	lsls	r3, r3, #2
    46ca:	440b      	add	r3, r1
    46cc:	9a01      	ldr	r2, [sp, #4]
    46ce:	601a      	str	r2, [r3, #0]
        switch(Name)
    46d0:	9b01      	ldr	r3, [sp, #4]
    46d2:	2b27      	cmp	r3, #39	; 0x27
    46d4:	d027      	beq.n	4726 <getSlowDividerConfig+0x10e>
    46d6:	9b01      	ldr	r3, [sp, #4]
    46d8:	2b27      	cmp	r3, #39	; 0x27
    46da:	d835      	bhi.n	4748 <getSlowDividerConfig+0x130>
    46dc:	9b01      	ldr	r3, [sp, #4]
    46de:	2b25      	cmp	r3, #37	; 0x25
    46e0:	d003      	beq.n	46ea <getSlowDividerConfig+0xd2>
    46e2:	9b01      	ldr	r3, [sp, #4]
    46e4:	2b26      	cmp	r3, #38	; 0x26
    46e6:	d00f      	beq.n	4708 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    46e8:	e02e      	b.n	4748 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    46ea:	4b1c      	ldr	r3, [pc, #112]	; (475c <getSlowDividerConfig+0x144>)
    46ec:	695b      	ldr	r3, [r3, #20]
    46ee:	f003 030f 	and.w	r3, r3, #15
    46f2:	1c59      	adds	r1, r3, #1
    46f4:	4818      	ldr	r0, [pc, #96]	; (4758 <getSlowDividerConfig+0x140>)
    46f6:	9a04      	ldr	r2, [sp, #16]
    46f8:	4613      	mov	r3, r2
    46fa:	005b      	lsls	r3, r3, #1
    46fc:	4413      	add	r3, r2
    46fe:	009b      	lsls	r3, r3, #2
    4700:	4403      	add	r3, r0
    4702:	3304      	adds	r3, #4
    4704:	6019      	str	r1, [r3, #0]
                break;
    4706:	e020      	b.n	474a <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    4708:	4b14      	ldr	r3, [pc, #80]	; (475c <getSlowDividerConfig+0x144>)
    470a:	699b      	ldr	r3, [r3, #24]
    470c:	f003 030f 	and.w	r3, r3, #15
    4710:	1c59      	adds	r1, r3, #1
    4712:	4811      	ldr	r0, [pc, #68]	; (4758 <getSlowDividerConfig+0x140>)
    4714:	9a04      	ldr	r2, [sp, #16]
    4716:	4613      	mov	r3, r2
    4718:	005b      	lsls	r3, r3, #1
    471a:	4413      	add	r3, r2
    471c:	009b      	lsls	r3, r3, #2
    471e:	4403      	add	r3, r0
    4720:	3304      	adds	r3, #4
    4722:	6019      	str	r1, [r3, #0]
                break;
    4724:	e011      	b.n	474a <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    4726:	4b0d      	ldr	r3, [pc, #52]	; (475c <getSlowDividerConfig+0x144>)
    4728:	69db      	ldr	r3, [r3, #28]
    472a:	f003 030f 	and.w	r3, r3, #15
    472e:	1c59      	adds	r1, r3, #1
    4730:	4809      	ldr	r0, [pc, #36]	; (4758 <getSlowDividerConfig+0x140>)
    4732:	9a04      	ldr	r2, [sp, #16]
    4734:	4613      	mov	r3, r2
    4736:	005b      	lsls	r3, r3, #1
    4738:	4413      	add	r3, r2
    473a:	009b      	lsls	r3, r3, #2
    473c:	4403      	add	r3, r0
    473e:	3304      	adds	r3, #4
    4740:	6019      	str	r1, [r3, #0]
                break;
    4742:	e002      	b.n	474a <getSlowDividerConfig+0x132>
        }
    }
    4744:	bf00      	nop
    4746:	e000      	b.n	474a <getSlowDividerConfig+0x132>
                break;
    4748:	bf00      	nop

    return ReturnValue;
    474a:	9b05      	ldr	r3, [sp, #20]
}
    474c:	4618      	mov	r0, r3
    474e:	b006      	add	sp, #24
    4750:	4770      	bx	lr
    4752:	bf00      	nop
    4754:	1fff8b9c 	.word	0x1fff8b9c
    4758:	1fff8cb0 	.word	0x1fff8cb0
    475c:	40064000 	.word	0x40064000

00004760 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    4760:	b500      	push	{lr}
    4762:	b083      	sub	sp, #12
    4764:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    4766:	4b64      	ldr	r3, [pc, #400]	; (48f8 <Clock_Ip_ClockInitializeObjects+0x198>)
    4768:	781b      	ldrb	r3, [r3, #0]
    476a:	f083 0301 	eor.w	r3, r3, #1
    476e:	b2db      	uxtb	r3, r3
    4770:	2b00      	cmp	r3, #0
    4772:	d05b      	beq.n	482c <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    4774:	4b60      	ldr	r3, [pc, #384]	; (48f8 <Clock_Ip_ClockInitializeObjects+0x198>)
    4776:	2201      	movs	r2, #1
    4778:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    477a:	4b60      	ldr	r3, [pc, #384]	; (48fc <Clock_Ip_ClockInitializeObjects+0x19c>)
    477c:	785b      	ldrb	r3, [r3, #1]
    477e:	461a      	mov	r2, r3
    4780:	4613      	mov	r3, r2
    4782:	009b      	lsls	r3, r3, #2
    4784:	4413      	add	r3, r2
    4786:	009b      	lsls	r3, r3, #2
    4788:	4a5d      	ldr	r2, [pc, #372]	; (4900 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    478a:	4413      	add	r3, r2
    478c:	4a5d      	ldr	r2, [pc, #372]	; (4904 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    478e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    4790:	4b5d      	ldr	r3, [pc, #372]	; (4908 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    4792:	785b      	ldrb	r3, [r3, #1]
    4794:	461a      	mov	r2, r3
    4796:	4613      	mov	r3, r2
    4798:	009b      	lsls	r3, r3, #2
    479a:	4413      	add	r3, r2
    479c:	009b      	lsls	r3, r3, #2
    479e:	4a5b      	ldr	r2, [pc, #364]	; (490c <Clock_Ip_ClockInitializeObjects+0x1ac>)
    47a0:	4413      	add	r3, r2
    47a2:	4a5b      	ldr	r2, [pc, #364]	; (4910 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    47a4:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    47a6:	4b5b      	ldr	r3, [pc, #364]	; (4914 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    47a8:	791b      	ldrb	r3, [r3, #4]
    47aa:	461a      	mov	r2, r3
    47ac:	4613      	mov	r3, r2
    47ae:	005b      	lsls	r3, r3, #1
    47b0:	4413      	add	r3, r2
    47b2:	009b      	lsls	r3, r3, #2
    47b4:	4a58      	ldr	r2, [pc, #352]	; (4918 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    47b6:	4413      	add	r3, r2
    47b8:	4a58      	ldr	r2, [pc, #352]	; (491c <Clock_Ip_ClockInitializeObjects+0x1bc>)
    47ba:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    47bc:	4b58      	ldr	r3, [pc, #352]	; (4920 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    47be:	795b      	ldrb	r3, [r3, #5]
    47c0:	00db      	lsls	r3, r3, #3
    47c2:	4a58      	ldr	r2, [pc, #352]	; (4924 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    47c4:	4413      	add	r3, r2
    47c6:	4a58      	ldr	r2, [pc, #352]	; (4928 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    47c8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    47ca:	4b55      	ldr	r3, [pc, #340]	; (4920 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    47cc:	79db      	ldrb	r3, [r3, #7]
    47ce:	00db      	lsls	r3, r3, #3
    47d0:	4a54      	ldr	r2, [pc, #336]	; (4924 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    47d2:	4413      	add	r3, r2
    47d4:	4a55      	ldr	r2, [pc, #340]	; (492c <Clock_Ip_ClockInitializeObjects+0x1cc>)
    47d6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    47d8:	4b55      	ldr	r3, [pc, #340]	; (4930 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47da:	799b      	ldrb	r3, [r3, #6]
    47dc:	009b      	lsls	r3, r3, #2
    47de:	4a55      	ldr	r2, [pc, #340]	; (4934 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    47e0:	4413      	add	r3, r2
    47e2:	4a55      	ldr	r2, [pc, #340]	; (4938 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    47e4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    47e6:	4b52      	ldr	r3, [pc, #328]	; (4930 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47e8:	7a1b      	ldrb	r3, [r3, #8]
    47ea:	009b      	lsls	r3, r3, #2
    47ec:	4a51      	ldr	r2, [pc, #324]	; (4934 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    47ee:	4413      	add	r3, r2
    47f0:	4a52      	ldr	r2, [pc, #328]	; (493c <Clock_Ip_ClockInitializeObjects+0x1dc>)
    47f2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    47f4:	4b4e      	ldr	r3, [pc, #312]	; (4930 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    47f6:	7a5b      	ldrb	r3, [r3, #9]
    47f8:	009b      	lsls	r3, r3, #2
    47fa:	4a4e      	ldr	r2, [pc, #312]	; (4934 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    47fc:	4413      	add	r3, r2
    47fe:	4a50      	ldr	r2, [pc, #320]	; (4940 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4800:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    4802:	4b4b      	ldr	r3, [pc, #300]	; (4930 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4804:	7adb      	ldrb	r3, [r3, #11]
    4806:	009b      	lsls	r3, r3, #2
    4808:	4a4a      	ldr	r2, [pc, #296]	; (4934 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    480a:	4413      	add	r3, r2
    480c:	4a4d      	ldr	r2, [pc, #308]	; (4944 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    480e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    4810:	4b47      	ldr	r3, [pc, #284]	; (4930 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4812:	7b1b      	ldrb	r3, [r3, #12]
    4814:	009b      	lsls	r3, r3, #2
    4816:	4a47      	ldr	r2, [pc, #284]	; (4934 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4818:	4413      	add	r3, r2
    481a:	4a4b      	ldr	r2, [pc, #300]	; (4948 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    481c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    481e:	4b44      	ldr	r3, [pc, #272]	; (4930 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4820:	7b9b      	ldrb	r3, [r3, #14]
    4822:	009b      	lsls	r3, r3, #2
    4824:	4a43      	ldr	r2, [pc, #268]	; (4934 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4826:	4413      	add	r3, r2
    4828:	4a48      	ldr	r2, [pc, #288]	; (494c <Clock_Ip_ClockInitializeObjects+0x1ec>)
    482a:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    482c:	4b48      	ldr	r3, [pc, #288]	; (4950 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    482e:	781b      	ldrb	r3, [r3, #0]
    4830:	2b00      	cmp	r3, #0
    4832:	d002      	beq.n	483a <Clock_Ip_ClockInitializeObjects+0xda>
    4834:	9b01      	ldr	r3, [sp, #4]
    4836:	2b00      	cmp	r3, #0
    4838:	d003      	beq.n	4842 <Clock_Ip_ClockInitializeObjects+0xe2>
    483a:	4b46      	ldr	r3, [pc, #280]	; (4954 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    483c:	781b      	ldrb	r3, [r3, #0]
    483e:	2b00      	cmp	r3, #0
    4840:	d056      	beq.n	48f0 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    4842:	f7ff fc09 	bl	4058 <getFircConfig>
    4846:	4603      	mov	r3, r0
    4848:	4a43      	ldr	r2, [pc, #268]	; (4958 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    484a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    484c:	f7ff fc60 	bl	4110 <getSoscConfig>
    4850:	4603      	mov	r3, r0
    4852:	4a42      	ldr	r2, [pc, #264]	; (495c <Clock_Ip_ClockInitializeObjects+0x1fc>)
    4854:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    4856:	f7ff fca7 	bl	41a8 <getSpllConfig>
    485a:	4603      	mov	r3, r0
    485c:	4a40      	ldr	r2, [pc, #256]	; (4960 <Clock_Ip_ClockInitializeObjects+0x200>)
    485e:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    4860:	2019      	movs	r0, #25
    4862:	f7ff fcfb 	bl	425c <getSelectorConfig>
    4866:	4603      	mov	r3, r0
    4868:	4a3e      	ldr	r2, [pc, #248]	; (4964 <Clock_Ip_ClockInitializeObjects+0x204>)
    486a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    486c:	201a      	movs	r0, #26
    486e:	f7ff fcf5 	bl	425c <getSelectorConfig>
    4872:	4603      	mov	r3, r0
    4874:	4a3c      	ldr	r2, [pc, #240]	; (4968 <Clock_Ip_ClockInitializeObjects+0x208>)
    4876:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    4878:	201b      	movs	r0, #27
    487a:	f7ff fcef 	bl	425c <getSelectorConfig>
    487e:	4603      	mov	r3, r0
    4880:	4a3a      	ldr	r2, [pc, #232]	; (496c <Clock_Ip_ClockInitializeObjects+0x20c>)
    4882:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    4884:	201d      	movs	r0, #29
    4886:	f7ff fd7b 	bl	4380 <getCoreDividerConfig>
    488a:	4603      	mov	r3, r0
    488c:	4a38      	ldr	r2, [pc, #224]	; (4970 <Clock_Ip_ClockInitializeObjects+0x210>)
    488e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    4890:	201e      	movs	r0, #30
    4892:	f7ff fd75 	bl	4380 <getCoreDividerConfig>
    4896:	4603      	mov	r3, r0
    4898:	4a36      	ldr	r2, [pc, #216]	; (4974 <Clock_Ip_ClockInitializeObjects+0x214>)
    489a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    489c:	201f      	movs	r0, #31
    489e:	f7ff fd6f 	bl	4380 <getCoreDividerConfig>
    48a2:	4603      	mov	r3, r0
    48a4:	4a34      	ldr	r2, [pc, #208]	; (4978 <Clock_Ip_ClockInitializeObjects+0x218>)
    48a6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    48a8:	2021      	movs	r0, #33	; 0x21
    48aa:	f7ff fe0f 	bl	44cc <getBusDividerConfig>
    48ae:	4603      	mov	r3, r0
    48b0:	4a32      	ldr	r2, [pc, #200]	; (497c <Clock_Ip_ClockInitializeObjects+0x21c>)
    48b2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    48b4:	2022      	movs	r0, #34	; 0x22
    48b6:	f7ff fe09 	bl	44cc <getBusDividerConfig>
    48ba:	4603      	mov	r3, r0
    48bc:	4a30      	ldr	r2, [pc, #192]	; (4980 <Clock_Ip_ClockInitializeObjects+0x220>)
    48be:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    48c0:	2023      	movs	r0, #35	; 0x23
    48c2:	f7ff fe03 	bl	44cc <getBusDividerConfig>
    48c6:	4603      	mov	r3, r0
    48c8:	4a2e      	ldr	r2, [pc, #184]	; (4984 <Clock_Ip_ClockInitializeObjects+0x224>)
    48ca:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    48cc:	2025      	movs	r0, #37	; 0x25
    48ce:	f7ff fea3 	bl	4618 <getSlowDividerConfig>
    48d2:	4603      	mov	r3, r0
    48d4:	4a2c      	ldr	r2, [pc, #176]	; (4988 <Clock_Ip_ClockInitializeObjects+0x228>)
    48d6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    48d8:	2026      	movs	r0, #38	; 0x26
    48da:	f7ff fe9d 	bl	4618 <getSlowDividerConfig>
    48de:	4603      	mov	r3, r0
    48e0:	4a2a      	ldr	r2, [pc, #168]	; (498c <Clock_Ip_ClockInitializeObjects+0x22c>)
    48e2:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    48e4:	2027      	movs	r0, #39	; 0x27
    48e6:	f7ff fe97 	bl	4618 <getSlowDividerConfig>
    48ea:	4603      	mov	r3, r0
    48ec:	4a28      	ldr	r2, [pc, #160]	; (4990 <Clock_Ip_ClockInitializeObjects+0x230>)
    48ee:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    48f0:	bf00      	nop
    48f2:	b003      	add	sp, #12
    48f4:	f85d fb04 	ldr.w	pc, [sp], #4
    48f8:	1fff8cd4 	.word	0x1fff8cd4
    48fc:	0000e1a4 	.word	0x0000e1a4
    4900:	0000e7f0 	.word	0x0000e7f0
    4904:	1fff8ba0 	.word	0x1fff8ba0
    4908:	0000e164 	.word	0x0000e164
    490c:	0000e738 	.word	0x0000e738
    4910:	1fff8ba4 	.word	0x1fff8ba4
    4914:	0000e174 	.word	0x0000e174
    4918:	0000e7a4 	.word	0x0000e7a4
    491c:	1fff8ba8 	.word	0x1fff8ba8
    4920:	0000e1b4 	.word	0x0000e1b4
    4924:	0000e81c 	.word	0x0000e81c
    4928:	1fff8bac 	.word	0x1fff8bac
    492c:	1fff8be8 	.word	0x1fff8be8
    4930:	0000e144 	.word	0x0000e144
    4934:	0000e6f4 	.word	0x0000e6f4
    4938:	1fff8bb0 	.word	0x1fff8bb0
    493c:	1fff8bec 	.word	0x1fff8bec
    4940:	1fff8bb4 	.word	0x1fff8bb4
    4944:	1fff8bf0 	.word	0x1fff8bf0
    4948:	1fff8bb8 	.word	0x1fff8bb8
    494c:	1fff8bf4 	.word	0x1fff8bf4
    4950:	1fff8b21 	.word	0x1fff8b21
    4954:	1fff8b18 	.word	0x1fff8b18
    4958:	1fff8bbc 	.word	0x1fff8bbc
    495c:	1fff8bc0 	.word	0x1fff8bc0
    4960:	1fff8bc4 	.word	0x1fff8bc4
    4964:	1fff8bc8 	.word	0x1fff8bc8
    4968:	1fff8bcc 	.word	0x1fff8bcc
    496c:	1fff8bf8 	.word	0x1fff8bf8
    4970:	1fff8bd0 	.word	0x1fff8bd0
    4974:	1fff8bd4 	.word	0x1fff8bd4
    4978:	1fff8bfc 	.word	0x1fff8bfc
    497c:	1fff8bd8 	.word	0x1fff8bd8
    4980:	1fff8bdc 	.word	0x1fff8bdc
    4984:	1fff8c00 	.word	0x1fff8c00
    4988:	1fff8be0 	.word	0x1fff8be0
    498c:	1fff8be4 	.word	0x1fff8be4
    4990:	1fff8c04 	.word	0x1fff8c04

00004994 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    4994:	b500      	push	{lr}
    4996:	b083      	sub	sp, #12
    4998:	9001      	str	r0, [sp, #4]
    499a:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    499c:	9b01      	ldr	r3, [sp, #4]
    499e:	2b03      	cmp	r3, #3
    49a0:	f000 8090 	beq.w	4ac4 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    49a4:	9b01      	ldr	r3, [sp, #4]
    49a6:	2b03      	cmp	r3, #3
    49a8:	f200 80d3 	bhi.w	4b52 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    49ac:	9b01      	ldr	r3, [sp, #4]
    49ae:	2b00      	cmp	r3, #0
    49b0:	d040      	beq.n	4a34 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    49b2:	9b01      	ldr	r3, [sp, #4]
    49b4:	3b01      	subs	r3, #1
    49b6:	2b01      	cmp	r3, #1
    49b8:	f200 80cb 	bhi.w	4b52 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    49bc:	9b00      	ldr	r3, [sp, #0]
    49be:	2b00      	cmp	r3, #0
    49c0:	f040 80c9 	bne.w	4b56 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    49c4:	4b68      	ldr	r3, [pc, #416]	; (4b68 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    49c6:	2200      	movs	r2, #0
    49c8:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    49ca:	4b68      	ldr	r3, [pc, #416]	; (4b6c <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    49cc:	681b      	ldr	r3, [r3, #0]
    49ce:	685b      	ldr	r3, [r3, #4]
    49d0:	4a67      	ldr	r2, [pc, #412]	; (4b70 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    49d2:	6812      	ldr	r2, [r2, #0]
    49d4:	4610      	mov	r0, r2
    49d6:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    49d8:	4b66      	ldr	r3, [pc, #408]	; (4b74 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    49da:	681b      	ldr	r3, [r3, #0]
    49dc:	681b      	ldr	r3, [r3, #0]
    49de:	4a66      	ldr	r2, [pc, #408]	; (4b78 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    49e0:	6812      	ldr	r2, [r2, #0]
    49e2:	4610      	mov	r0, r2
    49e4:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    49e6:	4b65      	ldr	r3, [pc, #404]	; (4b7c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    49e8:	681b      	ldr	r3, [r3, #0]
    49ea:	681b      	ldr	r3, [r3, #0]
    49ec:	4a64      	ldr	r2, [pc, #400]	; (4b80 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    49ee:	6812      	ldr	r2, [r2, #0]
    49f0:	4610      	mov	r0, r2
    49f2:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    49f4:	4b63      	ldr	r3, [pc, #396]	; (4b84 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    49f6:	681b      	ldr	r3, [r3, #0]
    49f8:	681b      	ldr	r3, [r3, #0]
    49fa:	4a63      	ldr	r2, [pc, #396]	; (4b88 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    49fc:	6812      	ldr	r2, [r2, #0]
    49fe:	4610      	mov	r0, r2
    4a00:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    4a02:	4b62      	ldr	r3, [pc, #392]	; (4b8c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4a04:	681b      	ldr	r3, [r3, #0]
    4a06:	691b      	ldr	r3, [r3, #16]
    4a08:	4a61      	ldr	r2, [pc, #388]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4a0a:	6812      	ldr	r2, [r2, #0]
    4a0c:	6812      	ldr	r2, [r2, #0]
    4a0e:	4610      	mov	r0, r2
    4a10:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    4a12:	4b60      	ldr	r3, [pc, #384]	; (4b94 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a14:	681b      	ldr	r3, [r3, #0]
    4a16:	68db      	ldr	r3, [r3, #12]
    4a18:	4a5f      	ldr	r2, [pc, #380]	; (4b98 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4a1a:	6812      	ldr	r2, [r2, #0]
    4a1c:	6812      	ldr	r2, [r2, #0]
    4a1e:	4610      	mov	r0, r2
    4a20:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    4a22:	4b5e      	ldr	r3, [pc, #376]	; (4b9c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4a24:	681b      	ldr	r3, [r3, #0]
    4a26:	689b      	ldr	r3, [r3, #8]
    4a28:	4a5d      	ldr	r2, [pc, #372]	; (4ba0 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4a2a:	6812      	ldr	r2, [r2, #0]
    4a2c:	6812      	ldr	r2, [r2, #0]
    4a2e:	4610      	mov	r0, r2
    4a30:	4798      	blx	r3
            }
        }
        break;
    4a32:	e090      	b.n	4b56 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4a34:	9b00      	ldr	r3, [sp, #0]
    4a36:	2b02      	cmp	r3, #2
    4a38:	f040 808f 	bne.w	4b5a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4a3c:	4b4a      	ldr	r3, [pc, #296]	; (4b68 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4a3e:	2201      	movs	r2, #1
    4a40:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4a42:	4b56      	ldr	r3, [pc, #344]	; (4b9c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4a44:	681b      	ldr	r3, [r3, #0]
    4a46:	685b      	ldr	r3, [r3, #4]
    4a48:	4a55      	ldr	r2, [pc, #340]	; (4ba0 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4a4a:	6812      	ldr	r2, [r2, #0]
    4a4c:	4610      	mov	r0, r2
    4a4e:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4a50:	4b50      	ldr	r3, [pc, #320]	; (4b94 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a52:	681b      	ldr	r3, [r3, #0]
    4a54:	691b      	ldr	r3, [r3, #16]
    4a56:	4a50      	ldr	r2, [pc, #320]	; (4b98 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4a58:	6812      	ldr	r2, [r2, #0]
    4a5a:	4610      	mov	r0, r2
    4a5c:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4a5e:	4b4d      	ldr	r3, [pc, #308]	; (4b94 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a60:	681b      	ldr	r3, [r3, #0]
    4a62:	689b      	ldr	r3, [r3, #8]
    4a64:	4a4c      	ldr	r2, [pc, #304]	; (4b98 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4a66:	6812      	ldr	r2, [r2, #0]
    4a68:	4610      	mov	r0, r2
    4a6a:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4a6c:	4b47      	ldr	r3, [pc, #284]	; (4b8c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4a6e:	681b      	ldr	r3, [r3, #0]
    4a70:	68db      	ldr	r3, [r3, #12]
    4a72:	4a47      	ldr	r2, [pc, #284]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4a74:	6812      	ldr	r2, [r2, #0]
    4a76:	4610      	mov	r0, r2
    4a78:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4a7a:	4b44      	ldr	r3, [pc, #272]	; (4b8c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4a7c:	681b      	ldr	r3, [r3, #0]
    4a7e:	689b      	ldr	r3, [r3, #8]
    4a80:	4a43      	ldr	r2, [pc, #268]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4a82:	6812      	ldr	r2, [r2, #0]
    4a84:	6812      	ldr	r2, [r2, #0]
    4a86:	4610      	mov	r0, r2
    4a88:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    4a8a:	4b38      	ldr	r3, [pc, #224]	; (4b6c <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4a8c:	681b      	ldr	r3, [r3, #0]
    4a8e:	685b      	ldr	r3, [r3, #4]
    4a90:	4a44      	ldr	r2, [pc, #272]	; (4ba4 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    4a92:	6812      	ldr	r2, [r2, #0]
    4a94:	4610      	mov	r0, r2
    4a96:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    4a98:	4b36      	ldr	r3, [pc, #216]	; (4b74 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4a9a:	681b      	ldr	r3, [r3, #0]
    4a9c:	681b      	ldr	r3, [r3, #0]
    4a9e:	4a42      	ldr	r2, [pc, #264]	; (4ba8 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    4aa0:	6812      	ldr	r2, [r2, #0]
    4aa2:	4610      	mov	r0, r2
    4aa4:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    4aa6:	4b35      	ldr	r3, [pc, #212]	; (4b7c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4aa8:	681b      	ldr	r3, [r3, #0]
    4aaa:	681b      	ldr	r3, [r3, #0]
    4aac:	4a3f      	ldr	r2, [pc, #252]	; (4bac <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    4aae:	6812      	ldr	r2, [r2, #0]
    4ab0:	4610      	mov	r0, r2
    4ab2:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    4ab4:	4b33      	ldr	r3, [pc, #204]	; (4b84 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4ab6:	681b      	ldr	r3, [r3, #0]
    4ab8:	681b      	ldr	r3, [r3, #0]
    4aba:	4a3d      	ldr	r2, [pc, #244]	; (4bb0 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    4abc:	6812      	ldr	r2, [r2, #0]
    4abe:	4610      	mov	r0, r2
    4ac0:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4ac2:	e04a      	b.n	4b5a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4ac4:	9b00      	ldr	r3, [sp, #0]
    4ac6:	2b02      	cmp	r3, #2
    4ac8:	d149      	bne.n	4b5e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4aca:	4b27      	ldr	r3, [pc, #156]	; (4b68 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4acc:	2201      	movs	r2, #1
    4ace:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4ad0:	4b32      	ldr	r3, [pc, #200]	; (4b9c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4ad2:	681b      	ldr	r3, [r3, #0]
    4ad4:	685b      	ldr	r3, [r3, #4]
    4ad6:	4a32      	ldr	r2, [pc, #200]	; (4ba0 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4ad8:	6812      	ldr	r2, [r2, #0]
    4ada:	4610      	mov	r0, r2
    4adc:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4ade:	4b2d      	ldr	r3, [pc, #180]	; (4b94 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4ae0:	681b      	ldr	r3, [r3, #0]
    4ae2:	691b      	ldr	r3, [r3, #16]
    4ae4:	4a2c      	ldr	r2, [pc, #176]	; (4b98 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4ae6:	6812      	ldr	r2, [r2, #0]
    4ae8:	4610      	mov	r0, r2
    4aea:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4aec:	4b29      	ldr	r3, [pc, #164]	; (4b94 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4aee:	681b      	ldr	r3, [r3, #0]
    4af0:	689b      	ldr	r3, [r3, #8]
    4af2:	4a29      	ldr	r2, [pc, #164]	; (4b98 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4af4:	6812      	ldr	r2, [r2, #0]
    4af6:	4610      	mov	r0, r2
    4af8:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4afa:	4b24      	ldr	r3, [pc, #144]	; (4b8c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4afc:	681b      	ldr	r3, [r3, #0]
    4afe:	68db      	ldr	r3, [r3, #12]
    4b00:	4a23      	ldr	r2, [pc, #140]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4b02:	6812      	ldr	r2, [r2, #0]
    4b04:	4610      	mov	r0, r2
    4b06:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4b08:	4b20      	ldr	r3, [pc, #128]	; (4b8c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4b0a:	681b      	ldr	r3, [r3, #0]
    4b0c:	689b      	ldr	r3, [r3, #8]
    4b0e:	4a20      	ldr	r2, [pc, #128]	; (4b90 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4b10:	6812      	ldr	r2, [r2, #0]
    4b12:	6812      	ldr	r2, [r2, #0]
    4b14:	4610      	mov	r0, r2
    4b16:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    4b18:	4b26      	ldr	r3, [pc, #152]	; (4bb4 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    4b1a:	681b      	ldr	r3, [r3, #0]
    4b1c:	685b      	ldr	r3, [r3, #4]
    4b1e:	4a26      	ldr	r2, [pc, #152]	; (4bb8 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4b20:	6812      	ldr	r2, [r2, #0]
    4b22:	4610      	mov	r0, r2
    4b24:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    4b26:	4b25      	ldr	r3, [pc, #148]	; (4bbc <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    4b28:	681b      	ldr	r3, [r3, #0]
    4b2a:	681b      	ldr	r3, [r3, #0]
    4b2c:	4a24      	ldr	r2, [pc, #144]	; (4bc0 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    4b2e:	6812      	ldr	r2, [r2, #0]
    4b30:	4610      	mov	r0, r2
    4b32:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    4b34:	4b23      	ldr	r3, [pc, #140]	; (4bc4 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    4b36:	681b      	ldr	r3, [r3, #0]
    4b38:	681b      	ldr	r3, [r3, #0]
    4b3a:	4a23      	ldr	r2, [pc, #140]	; (4bc8 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    4b3c:	6812      	ldr	r2, [r2, #0]
    4b3e:	4610      	mov	r0, r2
    4b40:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    4b42:	4b22      	ldr	r3, [pc, #136]	; (4bcc <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    4b44:	681b      	ldr	r3, [r3, #0]
    4b46:	681b      	ldr	r3, [r3, #0]
    4b48:	4a21      	ldr	r2, [pc, #132]	; (4bd0 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    4b4a:	6812      	ldr	r2, [r2, #0]
    4b4c:	4610      	mov	r0, r2
    4b4e:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4b50:	e005      	b.n	4b5e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    4b52:	bf00      	nop
    4b54:	e004      	b.n	4b60 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4b56:	bf00      	nop
    4b58:	e002      	b.n	4b60 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4b5a:	bf00      	nop
    4b5c:	e000      	b.n	4b60 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4b5e:	bf00      	nop
    }

}
    4b60:	bf00      	nop
    4b62:	b003      	add	sp, #12
    4b64:	f85d fb04 	ldr.w	pc, [sp], #4
    4b68:	1fff8b21 	.word	0x1fff8b21
    4b6c:	1fff8bac 	.word	0x1fff8bac
    4b70:	1fff8bcc 	.word	0x1fff8bcc
    4b74:	1fff8bb0 	.word	0x1fff8bb0
    4b78:	1fff8bd4 	.word	0x1fff8bd4
    4b7c:	1fff8bb4 	.word	0x1fff8bb4
    4b80:	1fff8bdc 	.word	0x1fff8bdc
    4b84:	1fff8bb8 	.word	0x1fff8bb8
    4b88:	1fff8be4 	.word	0x1fff8be4
    4b8c:	1fff8ba0 	.word	0x1fff8ba0
    4b90:	1fff8bc4 	.word	0x1fff8bc4
    4b94:	1fff8ba4 	.word	0x1fff8ba4
    4b98:	1fff8bc0 	.word	0x1fff8bc0
    4b9c:	1fff8ba8 	.word	0x1fff8ba8
    4ba0:	1fff8bbc 	.word	0x1fff8bbc
    4ba4:	1fff8bc8 	.word	0x1fff8bc8
    4ba8:	1fff8bd0 	.word	0x1fff8bd0
    4bac:	1fff8bd8 	.word	0x1fff8bd8
    4bb0:	1fff8be0 	.word	0x1fff8be0
    4bb4:	1fff8be8 	.word	0x1fff8be8
    4bb8:	1fff8bf8 	.word	0x1fff8bf8
    4bbc:	1fff8bec 	.word	0x1fff8bec
    4bc0:	1fff8bfc 	.word	0x1fff8bfc
    4bc4:	1fff8bf0 	.word	0x1fff8bf0
    4bc8:	1fff8c00 	.word	0x1fff8c00
    4bcc:	1fff8bf4 	.word	0x1fff8bf4
    4bd0:	1fff8c04 	.word	0x1fff8c04

00004bd4 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    4bd4:	b500      	push	{lr}
    4bd6:	b083      	sub	sp, #12
    4bd8:	9001      	str	r0, [sp, #4]
    4bda:	9100      	str	r1, [sp, #0]
    switch(Command)
    4bdc:	9b00      	ldr	r3, [sp, #0]
    4bde:	2b04      	cmp	r3, #4
    4be0:	d010      	beq.n	4c04 <Clock_Ip_Command+0x30>
    4be2:	9b00      	ldr	r3, [sp, #0]
    4be4:	2b04      	cmp	r3, #4
    4be6:	d811      	bhi.n	4c0c <Clock_Ip_Command+0x38>
    4be8:	9b00      	ldr	r3, [sp, #0]
    4bea:	2b01      	cmp	r3, #1
    4bec:	d006      	beq.n	4bfc <Clock_Ip_Command+0x28>
    4bee:	9b00      	ldr	r3, [sp, #0]
    4bf0:	2b02      	cmp	r3, #2
    4bf2:	d10b      	bne.n	4c0c <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    4bf4:	9801      	ldr	r0, [sp, #4]
    4bf6:	f7ff fdb3 	bl	4760 <Clock_Ip_ClockInitializeObjects>
            break;
    4bfa:	e008      	b.n	4c0e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    4bfc:	9801      	ldr	r0, [sp, #4]
    4bfe:	f7ff f9db 	bl	3fb8 <Clock_Ip_SpecificPlatformInitClock>
            break;
    4c02:	e004      	b.n	4c0e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    4c04:	9801      	ldr	r0, [sp, #4]
    4c06:	f7ff f8ed 	bl	3de4 <DisableSafeClock>
            break;
    4c0a:	e000      	b.n	4c0e <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    4c0c:	bf00      	nop
    }
}
    4c0e:	bf00      	nop
    4c10:	b003      	add	sp, #12
    4c12:	f85d fb04 	ldr.w	pc, [sp], #4
    4c16:	bf00      	nop

00004c18 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    4c18:	b500      	push	{lr}
    4c1a:	b085      	sub	sp, #20
    4c1c:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    4c1e:	4a20      	ldr	r2, [pc, #128]	; (4ca0 <Mcu_Init+0x88>)
    4c20:	9b01      	ldr	r3, [sp, #4]
    4c22:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4c24:	2300      	movs	r3, #0
    4c26:	9303      	str	r3, [sp, #12]
    4c28:	e010      	b.n	4c4c <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    4c2a:	4b1d      	ldr	r3, [pc, #116]	; (4ca0 <Mcu_Init+0x88>)
    4c2c:	681b      	ldr	r3, [r3, #0]
    4c2e:	6919      	ldr	r1, [r3, #16]
    4c30:	9a03      	ldr	r2, [sp, #12]
    4c32:	4613      	mov	r3, r2
    4c34:	005b      	lsls	r3, r3, #1
    4c36:	4413      	add	r3, r2
    4c38:	009b      	lsls	r3, r3, #2
    4c3a:	440b      	add	r3, r1
    4c3c:	681b      	ldr	r3, [r3, #0]
    4c3e:	9a03      	ldr	r2, [sp, #12]
    4c40:	b2d1      	uxtb	r1, r2
    4c42:	4a18      	ldr	r2, [pc, #96]	; (4ca4 <Mcu_Init+0x8c>)
    4c44:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4c46:	9b03      	ldr	r3, [sp, #12]
    4c48:	3301      	adds	r3, #1
    4c4a:	9303      	str	r3, [sp, #12]
    4c4c:	4b14      	ldr	r3, [pc, #80]	; (4ca0 <Mcu_Init+0x88>)
    4c4e:	681b      	ldr	r3, [r3, #0]
    4c50:	689b      	ldr	r3, [r3, #8]
    4c52:	9a03      	ldr	r2, [sp, #12]
    4c54:	429a      	cmp	r2, r3
    4c56:	d3e8      	bcc.n	4c2a <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4c58:	2300      	movs	r3, #0
    4c5a:	9303      	str	r3, [sp, #12]
    4c5c:	e010      	b.n	4c80 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    4c5e:	4b10      	ldr	r3, [pc, #64]	; (4ca0 <Mcu_Init+0x88>)
    4c60:	681b      	ldr	r3, [r3, #0]
    4c62:	6959      	ldr	r1, [r3, #20]
    4c64:	9a03      	ldr	r2, [sp, #12]
    4c66:	4613      	mov	r3, r2
    4c68:	01db      	lsls	r3, r3, #7
    4c6a:	1a9b      	subs	r3, r3, r2
    4c6c:	00db      	lsls	r3, r3, #3
    4c6e:	440b      	add	r3, r1
    4c70:	681b      	ldr	r3, [r3, #0]
    4c72:	9a03      	ldr	r2, [sp, #12]
    4c74:	b2d1      	uxtb	r1, r2
    4c76:	4a0c      	ldr	r2, [pc, #48]	; (4ca8 <Mcu_Init+0x90>)
    4c78:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4c7a:	9b03      	ldr	r3, [sp, #12]
    4c7c:	3301      	adds	r3, #1
    4c7e:	9303      	str	r3, [sp, #12]
    4c80:	4b07      	ldr	r3, [pc, #28]	; (4ca0 <Mcu_Init+0x88>)
    4c82:	681b      	ldr	r3, [r3, #0]
    4c84:	68db      	ldr	r3, [r3, #12]
    4c86:	9a03      	ldr	r2, [sp, #12]
    4c88:	429a      	cmp	r2, r3
    4c8a:	d3e8      	bcc.n	4c5e <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    4c8c:	4b04      	ldr	r3, [pc, #16]	; (4ca0 <Mcu_Init+0x88>)
    4c8e:	681b      	ldr	r3, [r3, #0]
    4c90:	699b      	ldr	r3, [r3, #24]
    4c92:	4618      	mov	r0, r3
    4c94:	f000 f88a 	bl	4dac <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4c98:	bf00      	nop
    4c9a:	b005      	add	sp, #20
    4c9c:	f85d fb04 	ldr.w	pc, [sp], #4
    4ca0:	1fff8ce0 	.word	0x1fff8ce0
    4ca4:	1fff8cdc 	.word	0x1fff8cdc
    4ca8:	1fff8cd8 	.word	0x1fff8cd8

00004cac <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    4cac:	b084      	sub	sp, #16
    4cae:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    4cb0:	2301      	movs	r3, #1
    4cb2:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    4cb6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    4cba:	4618      	mov	r0, r3
    4cbc:	b004      	add	sp, #16
    4cbe:	4770      	bx	lr

00004cc0 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    4cc0:	b500      	push	{lr}
    4cc2:	b085      	sub	sp, #20
    4cc4:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    4cc6:	4a0e      	ldr	r2, [pc, #56]	; (4d00 <Mcu_InitClock+0x40>)
    4cc8:	9b01      	ldr	r3, [sp, #4]
    4cca:	4413      	add	r3, r2
    4ccc:	781b      	ldrb	r3, [r3, #0]
    4cce:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    4cd2:	4b0c      	ldr	r3, [pc, #48]	; (4d04 <Mcu_InitClock+0x44>)
    4cd4:	681b      	ldr	r3, [r3, #0]
    4cd6:	6959      	ldr	r1, [r3, #20]
    4cd8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4cdc:	4613      	mov	r3, r2
    4cde:	01db      	lsls	r3, r3, #7
    4ce0:	1a9b      	subs	r3, r3, r2
    4ce2:	00db      	lsls	r3, r3, #3
    4ce4:	440b      	add	r3, r1
    4ce6:	4618      	mov	r0, r3
    4ce8:	f000 f86a 	bl	4dc0 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    4cec:	2300      	movs	r3, #0
    4cee:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    4cf2:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    4cf6:	4618      	mov	r0, r3
    4cf8:	b005      	add	sp, #20
    4cfa:	f85d fb04 	ldr.w	pc, [sp], #4
    4cfe:	bf00      	nop
    4d00:	1fff8cd8 	.word	0x1fff8cd8
    4d04:	1fff8ce0 	.word	0x1fff8ce0

00004d08 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    4d08:	b500      	push	{lr}
    4d0a:	b085      	sub	sp, #20
    4d0c:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    4d0e:	4a0d      	ldr	r2, [pc, #52]	; (4d44 <Mcu_SetMode+0x3c>)
    4d10:	9b01      	ldr	r3, [sp, #4]
    4d12:	4413      	add	r3, r2
    4d14:	781b      	ldrb	r3, [r3, #0]
    4d16:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    4d1a:	f007 fe07 	bl	c92c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    4d1e:	4b0a      	ldr	r3, [pc, #40]	; (4d48 <Mcu_SetMode+0x40>)
    4d20:	681b      	ldr	r3, [r3, #0]
    4d22:	6919      	ldr	r1, [r3, #16]
    4d24:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4d28:	4613      	mov	r3, r2
    4d2a:	005b      	lsls	r3, r3, #1
    4d2c:	4413      	add	r3, r2
    4d2e:	009b      	lsls	r3, r3, #2
    4d30:	440b      	add	r3, r1
    4d32:	4618      	mov	r0, r3
    4d34:	f000 f84e 	bl	4dd4 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    4d38:	f007 fe24 	bl	c984 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4d3c:	bf00      	nop
    4d3e:	b005      	add	sp, #20
    4d40:	f85d fb04 	ldr.w	pc, [sp], #4
    4d44:	1fff8cdc 	.word	0x1fff8cdc
    4d48:	1fff8ce0 	.word	0x1fff8ce0

00004d4c <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    4d4c:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    4d4e:	2302      	movs	r3, #2
    4d50:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    4d52:	9b01      	ldr	r3, [sp, #4]
}
    4d54:	4618      	mov	r0, r3
    4d56:	b002      	add	sp, #8
    4d58:	4770      	bx	lr

00004d5a <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    4d5a:	b500      	push	{lr}
    4d5c:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    4d5e:	f000 f843 	bl	4de8 <Mcu_Ipw_GetResetReason>
    4d62:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    4d64:	9b01      	ldr	r3, [sp, #4]
}
    4d66:	4618      	mov	r0, r3
    4d68:	b003      	add	sp, #12
    4d6a:	f85d fb04 	ldr.w	pc, [sp], #4

00004d6e <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    4d6e:	b500      	push	{lr}
    4d70:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    4d72:	f000 f83f 	bl	4df4 <Mcu_Ipw_GetResetRawValue>
    4d76:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    4d78:	9b01      	ldr	r3, [sp, #4]
}
    4d7a:	4618      	mov	r0, r3
    4d7c:	b003      	add	sp, #12
    4d7e:	f85d fb04 	ldr.w	pc, [sp], #4

00004d82 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4d82:	b500      	push	{lr}
    4d84:	b083      	sub	sp, #12
    4d86:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    4d88:	9801      	ldr	r0, [sp, #4]
    4d8a:	f000 f839 	bl	4e00 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    4d8e:	bf00      	nop
    4d90:	b003      	add	sp, #12
    4d92:	f85d fb04 	ldr.w	pc, [sp], #4

00004d96 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    4d96:	b082      	sub	sp, #8
    4d98:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    4d9a:	4b03      	ldr	r3, [pc, #12]	; (4da8 <Mcu_ClkSrcFailureNotification+0x12>)
    4d9c:	681b      	ldr	r3, [r3, #0]
    4d9e:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    4da0:	bf00      	nop
    4da2:	b002      	add	sp, #8
    4da4:	4770      	bx	lr
    4da6:	bf00      	nop
    4da8:	1fff8ce0 	.word	0x1fff8ce0

00004dac <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    4dac:	b500      	push	{lr}
    4dae:	b083      	sub	sp, #12
    4db0:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    4db2:	9801      	ldr	r0, [sp, #4]
    4db4:	f000 f882 	bl	4ebc <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    4db8:	bf00      	nop
    4dba:	b003      	add	sp, #12
    4dbc:	f85d fb04 	ldr.w	pc, [sp], #4

00004dc0 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    4dc0:	b500      	push	{lr}
    4dc2:	b083      	sub	sp, #12
    4dc4:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    4dc6:	9801      	ldr	r0, [sp, #4]
    4dc8:	f7fc fc6a 	bl	16a0 <Clock_Ip_InitClock>
}
    4dcc:	bf00      	nop
    4dce:	b003      	add	sp, #12
    4dd0:	f85d fb04 	ldr.w	pc, [sp], #4

00004dd4 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    4dd4:	b500      	push	{lr}
    4dd6:	b083      	sub	sp, #12
    4dd8:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    4dda:	9801      	ldr	r0, [sp, #4]
    4ddc:	f000 f820 	bl	4e20 <Power_Ip_SetMode>
}
    4de0:	bf00      	nop
    4de2:	b003      	add	sp, #12
    4de4:	f85d fb04 	ldr.w	pc, [sp], #4

00004de8 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    4de8:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    4dea:	f000 f84f 	bl	4e8c <Power_Ip_GetResetReason>
    4dee:	4603      	mov	r3, r0
}
    4df0:	4618      	mov	r0, r3
    4df2:	bd08      	pop	{r3, pc}

00004df4 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    4df4:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    4df6:	f000 f857 	bl	4ea8 <Power_Ip_GetResetRawValue>
    4dfa:	4603      	mov	r3, r0
}
    4dfc:	4618      	mov	r0, r3
    4dfe:	bd08      	pop	{r3, pc}

00004e00 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4e00:	b500      	push	{lr}
    4e02:	b083      	sub	sp, #12
    4e04:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    4e06:	9b01      	ldr	r3, [sp, #4]
    4e08:	2b00      	cmp	r3, #0
    4e0a:	d102      	bne.n	4e12 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    4e0c:	f000 f86c 	bl	4ee8 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    4e10:	e001      	b.n	4e16 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    4e12:	f000 f86e 	bl	4ef2 <Power_Ip_EnableSleepOnExit>
}
    4e16:	bf00      	nop
    4e18:	b003      	add	sp, #12
    4e1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00004e20 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4e20:	b500      	push	{lr}
    4e22:	b085      	sub	sp, #20
    4e24:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    4e26:	9b01      	ldr	r3, [sp, #4]
    4e28:	685b      	ldr	r3, [r3, #4]
    4e2a:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    4e2c:	9802      	ldr	r0, [sp, #8]
    4e2e:	f000 f9f5 	bl	521c <Power_Ip_SMC_ModeCheckEntry>
    4e32:	4603      	mov	r3, r0
    4e34:	2b00      	cmp	r3, #0
    4e36:	d002      	beq.n	4e3e <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e38:	2301      	movs	r3, #1
    4e3a:	9303      	str	r3, [sp, #12]
    4e3c:	e003      	b.n	4e46 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    4e3e:	9801      	ldr	r0, [sp, #4]
    4e40:	f000 fa1e 	bl	5280 <Power_Ip_SMC_ModeConfig>
    4e44:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    4e46:	9b03      	ldr	r3, [sp, #12]
    4e48:	2b01      	cmp	r3, #1
    4e4a:	d103      	bne.n	4e54 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4e4c:	21ff      	movs	r1, #255	; 0xff
    4e4e:	2003      	movs	r0, #3
    4e50:	f000 f8f4 	bl	503c <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    4e54:	bf00      	nop
    4e56:	b005      	add	sp, #20
    4e58:	f85d fb04 	ldr.w	pc, [sp], #4

00004e5c <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    4e5c:	b084      	sub	sp, #16
    4e5e:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    4e60:	230c      	movs	r3, #12
    4e62:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    4e64:	4a08      	ldr	r2, [pc, #32]	; (4e88 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4e66:	9b01      	ldr	r3, [sp, #4]
    4e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4e6c:	2b0e      	cmp	r3, #14
    4e6e:	d805      	bhi.n	4e7c <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    4e70:	4a05      	ldr	r2, [pc, #20]	; (4e88 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4e72:	9b01      	ldr	r3, [sp, #4]
    4e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4e78:	9303      	str	r3, [sp, #12]
    4e7a:	e001      	b.n	4e80 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    4e7c:	230c      	movs	r3, #12
    4e7e:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    4e80:	9b03      	ldr	r3, [sp, #12]
}
    4e82:	4618      	mov	r0, r3
    4e84:	b004      	add	sp, #16
    4e86:	4770      	bx	lr
    4e88:	0000e890 	.word	0x0000e890

00004e8c <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    4e8c:	b500      	push	{lr}
    4e8e:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    4e90:	f000 f940 	bl	5114 <Power_Ip_RCM_GetResetReason>
    4e94:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    4e96:	9801      	ldr	r0, [sp, #4]
    4e98:	f7ff ffe0 	bl	4e5c <Power_Ip_ConvertIntergeToResetType>
    4e9c:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    4e9e:	9b00      	ldr	r3, [sp, #0]
}
    4ea0:	4618      	mov	r0, r3
    4ea2:	b003      	add	sp, #12
    4ea4:	f85d fb04 	ldr.w	pc, [sp], #4

00004ea8 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    4ea8:	b500      	push	{lr}
    4eaa:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    4eac:	f000 f98a 	bl	51c4 <Power_Ip_RCM_GetResetRawValue>
    4eb0:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    4eb2:	9b01      	ldr	r3, [sp, #4]
}
    4eb4:	4618      	mov	r0, r3
    4eb6:	b003      	add	sp, #12
    4eb8:	f85d fb04 	ldr.w	pc, [sp], #4

00004ebc <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    4ebc:	b500      	push	{lr}
    4ebe:	b083      	sub	sp, #12
    4ec0:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    4ec2:	9b01      	ldr	r3, [sp, #4]
    4ec4:	681b      	ldr	r3, [r3, #0]
    4ec6:	4618      	mov	r0, r3
    4ec8:	f000 f90e 	bl	50e8 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    4ecc:	9b01      	ldr	r3, [sp, #4]
    4ece:	685b      	ldr	r3, [r3, #4]
    4ed0:	4618      	mov	r0, r3
    4ed2:	f000 f86d 	bl	4fb0 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    4ed6:	9b01      	ldr	r3, [sp, #4]
    4ed8:	689b      	ldr	r3, [r3, #8]
    4eda:	4618      	mov	r0, r3
    4edc:	f000 f990 	bl	5200 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    4ee0:	bf00      	nop
    4ee2:	b003      	add	sp, #12
    4ee4:	f85d fb04 	ldr.w	pc, [sp], #4

00004ee8 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    4ee8:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    4eea:	f000 f811 	bl	4f10 <Power_Ip_CM4_DisableSleepOnExit>
}
    4eee:	bf00      	nop
    4ef0:	bd08      	pop	{r3, pc}

00004ef2 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    4ef2:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    4ef4:	f000 f820 	bl	4f38 <Power_Ip_CM4_EnableSleepOnExit>
}
    4ef8:	bf00      	nop
    4efa:	bd08      	pop	{r3, pc}

00004efc <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    4efc:	b082      	sub	sp, #8
    4efe:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    4f00:	4a02      	ldr	r2, [pc, #8]	; (4f0c <Power_Ip_InstallNotificationsCallback+0x10>)
    4f02:	9b01      	ldr	r3, [sp, #4]
    4f04:	6013      	str	r3, [r2, #0]
}
    4f06:	bf00      	nop
    4f08:	b002      	add	sp, #8
    4f0a:	4770      	bx	lr
    4f0c:	1fff8b24 	.word	0x1fff8b24

00004f10 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    4f10:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f12:	2300      	movs	r3, #0
    4f14:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f16:	4b07      	ldr	r3, [pc, #28]	; (4f34 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4f18:	681b      	ldr	r3, [r3, #0]
    4f1a:	685b      	ldr	r3, [r3, #4]
    4f1c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    4f1e:	9b01      	ldr	r3, [sp, #4]
    4f20:	f023 0302 	bic.w	r3, r3, #2
    4f24:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f26:	4b03      	ldr	r3, [pc, #12]	; (4f34 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4f28:	681b      	ldr	r3, [r3, #0]
    4f2a:	9a01      	ldr	r2, [sp, #4]
    4f2c:	605a      	str	r2, [r3, #4]
}
    4f2e:	bf00      	nop
    4f30:	b002      	add	sp, #8
    4f32:	4770      	bx	lr
    4f34:	1fff8b28 	.word	0x1fff8b28

00004f38 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    4f38:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f3a:	2300      	movs	r3, #0
    4f3c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f3e:	4b07      	ldr	r3, [pc, #28]	; (4f5c <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4f40:	681b      	ldr	r3, [r3, #0]
    4f42:	685b      	ldr	r3, [r3, #4]
    4f44:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    4f46:	9b01      	ldr	r3, [sp, #4]
    4f48:	f043 0302 	orr.w	r3, r3, #2
    4f4c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f4e:	4b03      	ldr	r3, [pc, #12]	; (4f5c <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4f50:	681b      	ldr	r3, [r3, #0]
    4f52:	9a01      	ldr	r2, [sp, #4]
    4f54:	605a      	str	r2, [r3, #4]
}
    4f56:	bf00      	nop
    4f58:	b002      	add	sp, #8
    4f5a:	4770      	bx	lr
    4f5c:	1fff8b28 	.word	0x1fff8b28

00004f60 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    4f60:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f62:	2300      	movs	r3, #0
    4f64:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f66:	4b07      	ldr	r3, [pc, #28]	; (4f84 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4f68:	681b      	ldr	r3, [r3, #0]
    4f6a:	685b      	ldr	r3, [r3, #4]
    4f6c:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    4f6e:	9b01      	ldr	r3, [sp, #4]
    4f70:	f043 0304 	orr.w	r3, r3, #4
    4f74:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f76:	4b03      	ldr	r3, [pc, #12]	; (4f84 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4f78:	681b      	ldr	r3, [r3, #0]
    4f7a:	9a01      	ldr	r2, [sp, #4]
    4f7c:	605a      	str	r2, [r3, #4]
}
    4f7e:	bf00      	nop
    4f80:	b002      	add	sp, #8
    4f82:	4770      	bx	lr
    4f84:	1fff8b28 	.word	0x1fff8b28

00004f88 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    4f88:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f8a:	2300      	movs	r3, #0
    4f8c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f8e:	4b07      	ldr	r3, [pc, #28]	; (4fac <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4f90:	681b      	ldr	r3, [r3, #0]
    4f92:	685b      	ldr	r3, [r3, #4]
    4f94:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    4f96:	9b01      	ldr	r3, [sp, #4]
    4f98:	f023 0304 	bic.w	r3, r3, #4
    4f9c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f9e:	4b03      	ldr	r3, [pc, #12]	; (4fac <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4fa0:	681b      	ldr	r3, [r3, #0]
    4fa2:	9a01      	ldr	r2, [sp, #4]
    4fa4:	605a      	str	r2, [r3, #4]
}
    4fa6:	bf00      	nop
    4fa8:	b002      	add	sp, #8
    4faa:	4770      	bx	lr
    4fac:	1fff8b28 	.word	0x1fff8b28

00004fb0 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    4fb0:	b084      	sub	sp, #16
    4fb2:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    4fb4:	4b20      	ldr	r3, [pc, #128]	; (5038 <Power_Ip_PMC_PowerInit+0x88>)
    4fb6:	781b      	ldrb	r3, [r3, #0]
    4fb8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    4fbc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fc0:	f003 030f 	and.w	r3, r3, #15
    4fc4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    4fc8:	9b01      	ldr	r3, [sp, #4]
    4fca:	781a      	ldrb	r2, [r3, #0]
    4fcc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fd0:	4313      	orrs	r3, r2
    4fd2:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    4fd6:	4a18      	ldr	r2, [pc, #96]	; (5038 <Power_Ip_PMC_PowerInit+0x88>)
    4fd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fdc:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    4fde:	4b16      	ldr	r3, [pc, #88]	; (5038 <Power_Ip_PMC_PowerInit+0x88>)
    4fe0:	785b      	ldrb	r3, [r3, #1]
    4fe2:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    4fe6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4fea:	f003 031f 	and.w	r3, r3, #31
    4fee:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    4ff2:	9b01      	ldr	r3, [sp, #4]
    4ff4:	785a      	ldrb	r2, [r3, #1]
    4ff6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4ffa:	4313      	orrs	r3, r2
    4ffc:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5000:	4a0d      	ldr	r2, [pc, #52]	; (5038 <Power_Ip_PMC_PowerInit+0x88>)
    5002:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5006:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5008:	4b0b      	ldr	r3, [pc, #44]	; (5038 <Power_Ip_PMC_PowerInit+0x88>)
    500a:	789b      	ldrb	r3, [r3, #2]
    500c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5010:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5014:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5018:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    501c:	9b01      	ldr	r3, [sp, #4]
    501e:	789a      	ldrb	r2, [r3, #2]
    5020:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5024:	4313      	orrs	r3, r2
    5026:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    502a:	4a03      	ldr	r2, [pc, #12]	; (5038 <Power_Ip_PMC_PowerInit+0x88>)
    502c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5030:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5032:	bf00      	nop
    5034:	b004      	add	sp, #16
    5036:	4770      	bx	lr
    5038:	4007d000 	.word	0x4007d000

0000503c <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    503c:	b500      	push	{lr}
    503e:	b083      	sub	sp, #12
    5040:	9001      	str	r0, [sp, #4]
    5042:	460b      	mov	r3, r1
    5044:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5048:	4b05      	ldr	r3, [pc, #20]	; (5060 <Power_Ip_ReportPowerErrors+0x24>)
    504a:	681b      	ldr	r3, [r3, #0]
    504c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5050:	4611      	mov	r1, r2
    5052:	9801      	ldr	r0, [sp, #4]
    5054:	4798      	blx	r3
}
    5056:	bf00      	nop
    5058:	b003      	add	sp, #12
    505a:	f85d fb04 	ldr.w	pc, [sp], #4
    505e:	bf00      	nop
    5060:	1fff8b24 	.word	0x1fff8b24

00005064 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5064:	b082      	sub	sp, #8
    5066:	9001      	str	r0, [sp, #4]
    5068:	460b      	mov	r3, r1
    506a:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    506e:	bf00      	nop
    5070:	b002      	add	sp, #8
    5072:	4770      	bx	lr

00005074 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5074:	b500      	push	{lr}
    5076:	b085      	sub	sp, #20
    5078:	9003      	str	r0, [sp, #12]
    507a:	9102      	str	r1, [sp, #8]
    507c:	9201      	str	r2, [sp, #4]
    507e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5080:	2000      	movs	r0, #0
    5082:	f7fc f83d 	bl	1100 <OsIf_GetCounter>
    5086:	4602      	mov	r2, r0
    5088:	9b03      	ldr	r3, [sp, #12]
    508a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    508c:	9b02      	ldr	r3, [sp, #8]
    508e:	2200      	movs	r2, #0
    5090:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5092:	2100      	movs	r1, #0
    5094:	9800      	ldr	r0, [sp, #0]
    5096:	f7fc f87f 	bl	1198 <OsIf_MicrosToTicks>
    509a:	4602      	mov	r2, r0
    509c:	9b01      	ldr	r3, [sp, #4]
    509e:	601a      	str	r2, [r3, #0]
}
    50a0:	bf00      	nop
    50a2:	b005      	add	sp, #20
    50a4:	f85d fb04 	ldr.w	pc, [sp], #4

000050a8 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    50a8:	b500      	push	{lr}
    50aa:	b087      	sub	sp, #28
    50ac:	9003      	str	r0, [sp, #12]
    50ae:	9102      	str	r1, [sp, #8]
    50b0:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    50b2:	2300      	movs	r3, #0
    50b4:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    50b8:	2100      	movs	r1, #0
    50ba:	9803      	ldr	r0, [sp, #12]
    50bc:	f7fc f839 	bl	1132 <OsIf_GetElapsed>
    50c0:	4602      	mov	r2, r0
    50c2:	9b02      	ldr	r3, [sp, #8]
    50c4:	681b      	ldr	r3, [r3, #0]
    50c6:	441a      	add	r2, r3
    50c8:	9b02      	ldr	r3, [sp, #8]
    50ca:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    50cc:	9b02      	ldr	r3, [sp, #8]
    50ce:	681b      	ldr	r3, [r3, #0]
    50d0:	9a01      	ldr	r2, [sp, #4]
    50d2:	429a      	cmp	r2, r3
    50d4:	d802      	bhi.n	50dc <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    50d6:	2301      	movs	r3, #1
    50d8:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    50dc:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    50e0:	4618      	mov	r0, r3
    50e2:	b007      	add	sp, #28
    50e4:	f85d fb04 	ldr.w	pc, [sp], #4

000050e8 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    50e8:	b082      	sub	sp, #8
    50ea:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    50ec:	9b01      	ldr	r3, [sp, #4]
    50ee:	681a      	ldr	r2, [r3, #0]
    50f0:	4907      	ldr	r1, [pc, #28]	; (5110 <Power_Ip_RCM_ResetInit+0x28>)
    50f2:	f641 7307 	movw	r3, #7943	; 0x1f07
    50f6:	4013      	ands	r3, r2
    50f8:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    50fa:	9b01      	ldr	r3, [sp, #4]
    50fc:	685a      	ldr	r2, [r3, #4]
    50fe:	4904      	ldr	r1, [pc, #16]	; (5110 <Power_Ip_RCM_ResetInit+0x28>)
    5100:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5104:	4013      	ands	r3, r2
    5106:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5108:	bf00      	nop
    510a:	b002      	add	sp, #8
    510c:	4770      	bx	lr
    510e:	bf00      	nop
    5110:	4007f000 	.word	0x4007f000

00005114 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5114:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5116:	230c      	movs	r3, #12
    5118:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    511a:	2300      	movs	r3, #0
    511c:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    511e:	2300      	movs	r3, #0
    5120:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5122:	2300      	movs	r3, #0
    5124:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5126:	4b25      	ldr	r3, [pc, #148]	; (51bc <Power_Ip_RCM_GetResetReason+0xa8>)
    5128:	699a      	ldr	r2, [r3, #24]
    512a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    512e:	4013      	ands	r3, r2
    5130:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5132:	9b03      	ldr	r3, [sp, #12]
    5134:	2b00      	cmp	r3, #0
    5136:	d008      	beq.n	514a <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5138:	4920      	ldr	r1, [pc, #128]	; (51bc <Power_Ip_RCM_GetResetReason+0xa8>)
    513a:	9a03      	ldr	r2, [sp, #12]
    513c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5140:	4013      	ands	r3, r2
    5142:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5144:	4a1e      	ldr	r2, [pc, #120]	; (51c0 <Power_Ip_RCM_GetResetReason+0xac>)
    5146:	9b03      	ldr	r3, [sp, #12]
    5148:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    514a:	4b1d      	ldr	r3, [pc, #116]	; (51c0 <Power_Ip_RCM_GetResetReason+0xac>)
    514c:	681b      	ldr	r3, [r3, #0]
    514e:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5150:	9a02      	ldr	r2, [sp, #8]
    5152:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5156:	4013      	ands	r3, r2
    5158:	2b82      	cmp	r3, #130	; 0x82
    515a:	d102      	bne.n	5162 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    515c:	2305      	movs	r3, #5
    515e:	9307      	str	r3, [sp, #28]
    5160:	e027      	b.n	51b2 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5162:	2300      	movs	r3, #0
    5164:	9306      	str	r3, [sp, #24]
    5166:	e021      	b.n	51ac <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5168:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    516c:	9b06      	ldr	r3, [sp, #24]
    516e:	fa22 f303 	lsr.w	r3, r2, r3
    5172:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5174:	9a01      	ldr	r2, [sp, #4]
    5176:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    517a:	4013      	ands	r3, r2
    517c:	2b00      	cmp	r3, #0
    517e:	d012      	beq.n	51a6 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5180:	9a01      	ldr	r2, [sp, #4]
    5182:	9b02      	ldr	r3, [sp, #8]
    5184:	4013      	ands	r3, r2
    5186:	2b00      	cmp	r3, #0
    5188:	d00a      	beq.n	51a0 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    518a:	9b05      	ldr	r3, [sp, #20]
    518c:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    518e:	9b04      	ldr	r3, [sp, #16]
    5190:	3301      	adds	r3, #1
    5192:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5194:	9b04      	ldr	r3, [sp, #16]
    5196:	2b01      	cmp	r3, #1
    5198:	d902      	bls.n	51a0 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    519a:	230d      	movs	r3, #13
    519c:	9307      	str	r3, [sp, #28]
                        break;
    519e:	e008      	b.n	51b2 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    51a0:	9b05      	ldr	r3, [sp, #20]
    51a2:	3301      	adds	r3, #1
    51a4:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    51a6:	9b06      	ldr	r3, [sp, #24]
    51a8:	3301      	adds	r3, #1
    51aa:	9306      	str	r3, [sp, #24]
    51ac:	9b06      	ldr	r3, [sp, #24]
    51ae:	2b1f      	cmp	r3, #31
    51b0:	d9da      	bls.n	5168 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    51b2:	9b07      	ldr	r3, [sp, #28]
}
    51b4:	4618      	mov	r0, r3
    51b6:	b008      	add	sp, #32
    51b8:	4770      	bx	lr
    51ba:	bf00      	nop
    51bc:	4007f000 	.word	0x4007f000
    51c0:	1fff8ce4 	.word	0x1fff8ce4

000051c4 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    51c4:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    51c6:	4b0c      	ldr	r3, [pc, #48]	; (51f8 <Power_Ip_RCM_GetResetRawValue+0x34>)
    51c8:	699a      	ldr	r2, [r3, #24]
    51ca:	f642 73ee 	movw	r3, #12270	; 0x2fee
    51ce:	4013      	ands	r3, r2
    51d0:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    51d2:	9b01      	ldr	r3, [sp, #4]
    51d4:	2b00      	cmp	r3, #0
    51d6:	d008      	beq.n	51ea <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    51d8:	4907      	ldr	r1, [pc, #28]	; (51f8 <Power_Ip_RCM_GetResetRawValue+0x34>)
    51da:	9a01      	ldr	r2, [sp, #4]
    51dc:	f642 73ee 	movw	r3, #12270	; 0x2fee
    51e0:	4013      	ands	r3, r2
    51e2:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    51e4:	4a05      	ldr	r2, [pc, #20]	; (51fc <Power_Ip_RCM_GetResetRawValue+0x38>)
    51e6:	9b01      	ldr	r3, [sp, #4]
    51e8:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    51ea:	4b04      	ldr	r3, [pc, #16]	; (51fc <Power_Ip_RCM_GetResetRawValue+0x38>)
    51ec:	681b      	ldr	r3, [r3, #0]
    51ee:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    51f0:	9b00      	ldr	r3, [sp, #0]
}
    51f2:	4618      	mov	r0, r3
    51f4:	b002      	add	sp, #8
    51f6:	4770      	bx	lr
    51f8:	4007f000 	.word	0x4007f000
    51fc:	1fff8ce4 	.word	0x1fff8ce4

00005200 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5200:	b082      	sub	sp, #8
    5202:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5204:	9b01      	ldr	r3, [sp, #4]
    5206:	681b      	ldr	r3, [r3, #0]
    5208:	4a03      	ldr	r2, [pc, #12]	; (5218 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    520a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    520e:	6093      	str	r3, [r2, #8]
}
    5210:	bf00      	nop
    5212:	b002      	add	sp, #8
    5214:	4770      	bx	lr
    5216:	bf00      	nop
    5218:	4007e000 	.word	0x4007e000

0000521c <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    521c:	b084      	sub	sp, #16
    521e:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5220:	2301      	movs	r3, #1
    5222:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5224:	4b15      	ldr	r3, [pc, #84]	; (527c <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5226:	695b      	ldr	r3, [r3, #20]
    5228:	b2db      	uxtb	r3, r3
    522a:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    522c:	9b01      	ldr	r3, [sp, #4]
    522e:	2b02      	cmp	r3, #2
    5230:	d012      	beq.n	5258 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5232:	9b01      	ldr	r3, [sp, #4]
    5234:	2b02      	cmp	r3, #2
    5236:	d818      	bhi.n	526a <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5238:	9b01      	ldr	r3, [sp, #4]
    523a:	2b00      	cmp	r3, #0
    523c:	d003      	beq.n	5246 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    523e:	9b01      	ldr	r3, [sp, #4]
    5240:	2b01      	cmp	r3, #1
    5242:	d003      	beq.n	524c <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5244:	e011      	b.n	526a <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5246:	2300      	movs	r3, #0
    5248:	9303      	str	r3, [sp, #12]
            break;
    524a:	e013      	b.n	5274 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    524c:	9b02      	ldr	r3, [sp, #8]
    524e:	2b01      	cmp	r3, #1
    5250:	d10d      	bne.n	526e <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5252:	2300      	movs	r3, #0
    5254:	9303      	str	r3, [sp, #12]
            break;
    5256:	e00a      	b.n	526e <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5258:	9b02      	ldr	r3, [sp, #8]
    525a:	2b01      	cmp	r3, #1
    525c:	d002      	beq.n	5264 <Power_Ip_SMC_ModeCheckEntry+0x48>
    525e:	9b02      	ldr	r3, [sp, #8]
    5260:	2b10      	cmp	r3, #16
    5262:	d106      	bne.n	5272 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5264:	2300      	movs	r3, #0
    5266:	9303      	str	r3, [sp, #12]
            break;
    5268:	e003      	b.n	5272 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    526a:	bf00      	nop
    526c:	e002      	b.n	5274 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    526e:	bf00      	nop
    5270:	e000      	b.n	5274 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5272:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5274:	9b03      	ldr	r3, [sp, #12]
}
    5276:	4618      	mov	r0, r3
    5278:	b004      	add	sp, #16
    527a:	4770      	bx	lr
    527c:	4007e000 	.word	0x4007e000

00005280 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5280:	b500      	push	{lr}
    5282:	b08b      	sub	sp, #44	; 0x2c
    5284:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5286:	2300      	movs	r3, #0
    5288:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    528a:	2300      	movs	r3, #0
    528c:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    528e:	2300      	movs	r3, #0
    5290:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5294:	9b01      	ldr	r3, [sp, #4]
    5296:	685b      	ldr	r3, [r3, #4]
    5298:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    529a:	9b08      	ldr	r3, [sp, #32]
    529c:	2b02      	cmp	r3, #2
    529e:	d076      	beq.n	538e <Power_Ip_SMC_ModeConfig+0x10e>
    52a0:	9b08      	ldr	r3, [sp, #32]
    52a2:	2b02      	cmp	r3, #2
    52a4:	f200 80ab 	bhi.w	53fe <Power_Ip_SMC_ModeConfig+0x17e>
    52a8:	9b08      	ldr	r3, [sp, #32]
    52aa:	2b00      	cmp	r3, #0
    52ac:	d003      	beq.n	52b6 <Power_Ip_SMC_ModeConfig+0x36>
    52ae:	9b08      	ldr	r3, [sp, #32]
    52b0:	2b01      	cmp	r3, #1
    52b2:	d034      	beq.n	531e <Power_Ip_SMC_ModeConfig+0x9e>
    52b4:	e0a3      	b.n	53fe <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    52b6:	4b58      	ldr	r3, [pc, #352]	; (5418 <Power_Ip_SMC_ModeConfig+0x198>)
    52b8:	68db      	ldr	r3, [r3, #12]
    52ba:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    52bc:	9b06      	ldr	r3, [sp, #24]
    52be:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    52c2:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    52c4:	4a54      	ldr	r2, [pc, #336]	; (5418 <Power_Ip_SMC_ModeConfig+0x198>)
    52c6:	9b06      	ldr	r3, [sp, #24]
    52c8:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    52ca:	aa02      	add	r2, sp, #8
    52cc:	a903      	add	r1, sp, #12
    52ce:	a804      	add	r0, sp, #16
    52d0:	f24c 3350 	movw	r3, #50000	; 0xc350
    52d4:	f7ff fece 	bl	5074 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    52d8:	9a02      	ldr	r2, [sp, #8]
    52da:	a903      	add	r1, sp, #12
    52dc:	ab04      	add	r3, sp, #16
    52de:	4618      	mov	r0, r3
    52e0:	f7ff fee2 	bl	50a8 <Power_Ip_TimeoutExpired>
    52e4:	4603      	mov	r3, r0
    52e6:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    52ea:	4b4b      	ldr	r3, [pc, #300]	; (5418 <Power_Ip_SMC_ModeConfig+0x198>)
    52ec:	695b      	ldr	r3, [r3, #20]
    52ee:	f003 0301 	and.w	r3, r3, #1
    52f2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    52f4:	9b05      	ldr	r3, [sp, #20]
    52f6:	2b01      	cmp	r3, #1
    52f8:	d006      	beq.n	5308 <Power_Ip_SMC_ModeConfig+0x88>
    52fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    52fe:	f083 0301 	eor.w	r3, r3, #1
    5302:	b2db      	uxtb	r3, r3
    5304:	2b00      	cmp	r3, #0
    5306:	d1e7      	bne.n	52d8 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5308:	f89d 301f 	ldrb.w	r3, [sp, #31]
    530c:	2b00      	cmp	r3, #0
    530e:	d079      	beq.n	5404 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5310:	2301      	movs	r3, #1
    5312:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5314:	21ff      	movs	r1, #255	; 0xff
    5316:	2000      	movs	r0, #0
    5318:	f7ff fe90 	bl	503c <Power_Ip_ReportPowerErrors>
            }

            break;
    531c:	e072      	b.n	5404 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    531e:	4b3e      	ldr	r3, [pc, #248]	; (5418 <Power_Ip_SMC_ModeConfig+0x198>)
    5320:	68db      	ldr	r3, [r3, #12]
    5322:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5324:	9b06      	ldr	r3, [sp, #24]
    5326:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    532a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    532c:	9b06      	ldr	r3, [sp, #24]
    532e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5332:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5334:	4a38      	ldr	r2, [pc, #224]	; (5418 <Power_Ip_SMC_ModeConfig+0x198>)
    5336:	9b06      	ldr	r3, [sp, #24]
    5338:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    533a:	aa02      	add	r2, sp, #8
    533c:	a903      	add	r1, sp, #12
    533e:	a804      	add	r0, sp, #16
    5340:	f24c 3350 	movw	r3, #50000	; 0xc350
    5344:	f7ff fe96 	bl	5074 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5348:	9a02      	ldr	r2, [sp, #8]
    534a:	a903      	add	r1, sp, #12
    534c:	ab04      	add	r3, sp, #16
    534e:	4618      	mov	r0, r3
    5350:	f7ff feaa 	bl	50a8 <Power_Ip_TimeoutExpired>
    5354:	4603      	mov	r3, r0
    5356:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    535a:	4b2f      	ldr	r3, [pc, #188]	; (5418 <Power_Ip_SMC_ModeConfig+0x198>)
    535c:	695b      	ldr	r3, [r3, #20]
    535e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5362:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5364:	9b05      	ldr	r3, [sp, #20]
    5366:	2b80      	cmp	r3, #128	; 0x80
    5368:	d006      	beq.n	5378 <Power_Ip_SMC_ModeConfig+0xf8>
    536a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    536e:	f083 0301 	eor.w	r3, r3, #1
    5372:	b2db      	uxtb	r3, r3
    5374:	2b00      	cmp	r3, #0
    5376:	d1e7      	bne.n	5348 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5378:	f89d 301f 	ldrb.w	r3, [sp, #31]
    537c:	2b00      	cmp	r3, #0
    537e:	d043      	beq.n	5408 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5380:	2301      	movs	r3, #1
    5382:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5384:	21ff      	movs	r1, #255	; 0xff
    5386:	2000      	movs	r0, #0
    5388:	f7ff fe58 	bl	503c <Power_Ip_ReportPowerErrors>
            }

            break;
    538c:	e03c      	b.n	5408 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    538e:	4b22      	ldr	r3, [pc, #136]	; (5418 <Power_Ip_SMC_ModeConfig+0x198>)
    5390:	68db      	ldr	r3, [r3, #12]
    5392:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5394:	9b06      	ldr	r3, [sp, #24]
    5396:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    539a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    539c:	9b06      	ldr	r3, [sp, #24]
    539e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    53a2:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    53a4:	4a1c      	ldr	r2, [pc, #112]	; (5418 <Power_Ip_SMC_ModeConfig+0x198>)
    53a6:	9b06      	ldr	r3, [sp, #24]
    53a8:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    53aa:	aa02      	add	r2, sp, #8
    53ac:	a903      	add	r1, sp, #12
    53ae:	a804      	add	r0, sp, #16
    53b0:	f24c 3350 	movw	r3, #50000	; 0xc350
    53b4:	f7ff fe5e 	bl	5074 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    53b8:	9a02      	ldr	r2, [sp, #8]
    53ba:	a903      	add	r1, sp, #12
    53bc:	ab04      	add	r3, sp, #16
    53be:	4618      	mov	r0, r3
    53c0:	f7ff fe72 	bl	50a8 <Power_Ip_TimeoutExpired>
    53c4:	4603      	mov	r3, r0
    53c6:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    53ca:	4b13      	ldr	r3, [pc, #76]	; (5418 <Power_Ip_SMC_ModeConfig+0x198>)
    53cc:	695b      	ldr	r3, [r3, #20]
    53ce:	f003 0304 	and.w	r3, r3, #4
    53d2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    53d4:	9b05      	ldr	r3, [sp, #20]
    53d6:	2b04      	cmp	r3, #4
    53d8:	d006      	beq.n	53e8 <Power_Ip_SMC_ModeConfig+0x168>
    53da:	f89d 301f 	ldrb.w	r3, [sp, #31]
    53de:	f083 0301 	eor.w	r3, r3, #1
    53e2:	b2db      	uxtb	r3, r3
    53e4:	2b00      	cmp	r3, #0
    53e6:	d1e7      	bne.n	53b8 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    53e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    53ec:	2b00      	cmp	r3, #0
    53ee:	d00d      	beq.n	540c <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    53f0:	2301      	movs	r3, #1
    53f2:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    53f4:	21ff      	movs	r1, #255	; 0xff
    53f6:	2000      	movs	r0, #0
    53f8:	f7ff fe20 	bl	503c <Power_Ip_ReportPowerErrors>
            }

            break;
    53fc:	e006      	b.n	540c <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    53fe:	2301      	movs	r3, #1
    5400:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5402:	e004      	b.n	540e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5404:	bf00      	nop
    5406:	e002      	b.n	540e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5408:	bf00      	nop
    540a:	e000      	b.n	540e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    540c:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    540e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5410:	4618      	mov	r0, r3
    5412:	b00b      	add	sp, #44	; 0x2c
    5414:	f85d fb04 	ldr.w	pc, [sp], #4
    5418:	4007e000 	.word	0x4007e000

0000541c <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    541c:	b500      	push	{lr}
    541e:	b085      	sub	sp, #20
    5420:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5422:	9b01      	ldr	r3, [sp, #4]
    5424:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5426:	9803      	ldr	r0, [sp, #12]
    5428:	f000 fbc8 	bl	5bbc <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    542c:	4a03      	ldr	r2, [pc, #12]	; (543c <Port_Init+0x20>)
    542e:	9b03      	ldr	r3, [sp, #12]
    5430:	6013      	str	r3, [r2, #0]
        }
    }
}
    5432:	bf00      	nop
    5434:	b005      	add	sp, #20
    5436:	f85d fb04 	ldr.w	pc, [sp], #4
    543a:	bf00      	nop
    543c:	1fff8ce8 	.word	0x1fff8ce8

00005440 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5440:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5442:	4b03      	ldr	r3, [pc, #12]	; (5450 <Port_RefreshPortDirection+0x10>)
    5444:	681b      	ldr	r3, [r3, #0]
    5446:	4618      	mov	r0, r3
    5448:	f000 fc10 	bl	5c6c <Port_Ipw_RefreshPortDirection>
    }
}
    544c:	bf00      	nop
    544e:	bd08      	pop	{r3, pc}
    5450:	1fff8ce8 	.word	0x1fff8ce8

00005454 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5454:	b086      	sub	sp, #24
    5456:	9003      	str	r0, [sp, #12]
    5458:	9102      	str	r1, [sp, #8]
    545a:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    545c:	23ff      	movs	r3, #255	; 0xff
    545e:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5460:	9b03      	ldr	r3, [sp, #12]
    5462:	4a39      	ldr	r2, [pc, #228]	; (5548 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5464:	4293      	cmp	r3, r2
    5466:	d151      	bne.n	550c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5468:	9b02      	ldr	r3, [sp, #8]
    546a:	2b10      	cmp	r3, #16
    546c:	d867      	bhi.n	553e <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    546e:	a201      	add	r2, pc, #4	; (adr r2, 5474 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5474:	000054b9 	.word	0x000054b9
    5478:	000054c7 	.word	0x000054c7
    547c:	0000553f 	.word	0x0000553f
    5480:	0000553f 	.word	0x0000553f
    5484:	0000553f 	.word	0x0000553f
    5488:	0000553f 	.word	0x0000553f
    548c:	0000553f 	.word	0x0000553f
    5490:	0000553f 	.word	0x0000553f
    5494:	0000553f 	.word	0x0000553f
    5498:	0000553f 	.word	0x0000553f
    549c:	0000553f 	.word	0x0000553f
    54a0:	0000553f 	.word	0x0000553f
    54a4:	0000553f 	.word	0x0000553f
    54a8:	000054d5 	.word	0x000054d5
    54ac:	000054e3 	.word	0x000054e3
    54b0:	000054f1 	.word	0x000054f1
    54b4:	000054ff 	.word	0x000054ff
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    54b8:	2301      	movs	r3, #1
    54ba:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    54bc:	9a05      	ldr	r2, [sp, #20]
    54be:	9b01      	ldr	r3, [sp, #4]
    54c0:	4313      	orrs	r3, r2
    54c2:	9305      	str	r3, [sp, #20]
                break;
    54c4:	e03c      	b.n	5540 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    54c6:	2302      	movs	r3, #2
    54c8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    54ca:	9a05      	ldr	r2, [sp, #20]
    54cc:	9b01      	ldr	r3, [sp, #4]
    54ce:	4313      	orrs	r3, r2
    54d0:	9305      	str	r3, [sp, #20]
                break;
    54d2:	e035      	b.n	5540 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    54d4:	2304      	movs	r3, #4
    54d6:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    54d8:	9a05      	ldr	r2, [sp, #20]
    54da:	9b01      	ldr	r3, [sp, #4]
    54dc:	4313      	orrs	r3, r2
    54de:	9305      	str	r3, [sp, #20]
                break;
    54e0:	e02e      	b.n	5540 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    54e2:	2308      	movs	r3, #8
    54e4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    54e6:	9a05      	ldr	r2, [sp, #20]
    54e8:	9b01      	ldr	r3, [sp, #4]
    54ea:	4313      	orrs	r3, r2
    54ec:	9305      	str	r3, [sp, #20]
                break;
    54ee:	e027      	b.n	5540 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    54f0:	230e      	movs	r3, #14
    54f2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    54f4:	9a05      	ldr	r2, [sp, #20]
    54f6:	9b01      	ldr	r3, [sp, #4]
    54f8:	4013      	ands	r3, r2
    54fa:	9305      	str	r3, [sp, #20]
                break;
    54fc:	e020      	b.n	5540 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    54fe:	230d      	movs	r3, #13
    5500:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5502:	9a05      	ldr	r2, [sp, #20]
    5504:	9b01      	ldr	r3, [sp, #4]
    5506:	4013      	ands	r3, r2
    5508:	9305      	str	r3, [sp, #20]
                break;
    550a:	e019      	b.n	5540 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    550c:	9b03      	ldr	r3, [sp, #12]
    550e:	4a0f      	ldr	r2, [pc, #60]	; (554c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5510:	4293      	cmp	r3, r2
    5512:	d115      	bne.n	5540 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5514:	9b02      	ldr	r3, [sp, #8]
    5516:	2b00      	cmp	r3, #0
    5518:	d003      	beq.n	5522 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    551a:	9b02      	ldr	r3, [sp, #8]
    551c:	2b01      	cmp	r3, #1
    551e:	d007      	beq.n	5530 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5520:	e00e      	b.n	5540 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5522:	230b      	movs	r3, #11
    5524:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5526:	9a05      	ldr	r2, [sp, #20]
    5528:	9b01      	ldr	r3, [sp, #4]
    552a:	4013      	ands	r3, r2
    552c:	9305      	str	r3, [sp, #20]
                break;
    552e:	e007      	b.n	5540 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5530:	2307      	movs	r3, #7
    5532:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5534:	9a05      	ldr	r2, [sp, #20]
    5536:	9b01      	ldr	r3, [sp, #4]
    5538:	4013      	ands	r3, r2
    553a:	9305      	str	r3, [sp, #20]
                break;
    553c:	e000      	b.n	5540 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    553e:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5540:	9b05      	ldr	r3, [sp, #20]
}
    5542:	4618      	mov	r0, r3
    5544:	b006      	add	sp, #24
    5546:	4770      	bx	lr
    5548:	4004a000 	.word	0x4004a000
    554c:	4004b000 	.word	0x4004b000

00005550 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5550:	b500      	push	{lr}
    5552:	b089      	sub	sp, #36	; 0x24
    5554:	9003      	str	r0, [sp, #12]
    5556:	9102      	str	r1, [sp, #8]
    5558:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    555a:	9b01      	ldr	r3, [sp, #4]
    555c:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    555e:	9b01      	ldr	r3, [sp, #4]
    5560:	2b08      	cmp	r3, #8
    5562:	d121      	bne.n	55a8 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    5564:	4b13      	ldr	r3, [pc, #76]	; (55b4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5566:	685b      	ldr	r3, [r3, #4]
    5568:	f003 030f 	and.w	r3, r3, #15
    556c:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    556e:	9a06      	ldr	r2, [sp, #24]
    5570:	9902      	ldr	r1, [sp, #8]
    5572:	9803      	ldr	r0, [sp, #12]
    5574:	f7ff ff6e 	bl	5454 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    5578:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    557a:	9b05      	ldr	r3, [sp, #20]
    557c:	2bff      	cmp	r3, #255	; 0xff
    557e:	d011      	beq.n	55a4 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    5580:	f007 fc64 	bl	ce4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    5584:	4b0b      	ldr	r3, [pc, #44]	; (55b4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5586:	685b      	ldr	r3, [r3, #4]
    5588:	4a0a      	ldr	r2, [pc, #40]	; (55b4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    558a:	f023 030f 	bic.w	r3, r3, #15
    558e:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    5590:	4b08      	ldr	r3, [pc, #32]	; (55b4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5592:	685a      	ldr	r2, [r3, #4]
    5594:	9b05      	ldr	r3, [sp, #20]
    5596:	f003 030f 	and.w	r3, r3, #15
    559a:	4906      	ldr	r1, [pc, #24]	; (55b4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    559c:	4313      	orrs	r3, r2
    559e:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    55a0:	f007 fc80 	bl	cea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    55a4:	2300      	movs	r3, #0
    55a6:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    55a8:	9b07      	ldr	r3, [sp, #28]
}
    55aa:	4618      	mov	r0, r3
    55ac:	b009      	add	sp, #36	; 0x24
    55ae:	f85d fb04 	ldr.w	pc, [sp], #4
    55b2:	bf00      	nop
    55b4:	40048000 	.word	0x40048000

000055b8 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    55b8:	b500      	push	{lr}
    55ba:	b087      	sub	sp, #28
    55bc:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    55be:	2300      	movs	r3, #0
    55c0:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    55c2:	2300      	movs	r3, #0
    55c4:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    55c6:	2300      	movs	r3, #0
    55c8:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    55ca:	9b01      	ldr	r3, [sp, #4]
    55cc:	68db      	ldr	r3, [r3, #12]
    55ce:	2b02      	cmp	r3, #2
    55d0:	d00a      	beq.n	55e8 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    55d2:	9b05      	ldr	r3, [sp, #20]
    55d4:	f043 0302 	orr.w	r3, r3, #2
    55d8:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    55da:	9b01      	ldr	r3, [sp, #4]
    55dc:	68db      	ldr	r3, [r3, #12]
    55de:	f003 0301 	and.w	r3, r3, #1
    55e2:	9a05      	ldr	r2, [sp, #20]
    55e4:	4313      	orrs	r3, r2
    55e6:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    55e8:	9b01      	ldr	r3, [sp, #4]
    55ea:	699b      	ldr	r3, [r3, #24]
    55ec:	019b      	lsls	r3, r3, #6
    55ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
    55f2:	9a05      	ldr	r2, [sp, #20]
    55f4:	4313      	orrs	r3, r2
    55f6:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    55f8:	9b01      	ldr	r3, [sp, #4]
    55fa:	6a1b      	ldr	r3, [r3, #32]
    55fc:	03db      	lsls	r3, r3, #15
    55fe:	b29b      	uxth	r3, r3
    5600:	9a05      	ldr	r2, [sp, #20]
    5602:	4313      	orrs	r3, r2
    5604:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    5606:	9b01      	ldr	r3, [sp, #4]
    5608:	7f1b      	ldrb	r3, [r3, #28]
    560a:	2b00      	cmp	r3, #0
    560c:	d001      	beq.n	5612 <Port_Ci_Port_Ip_PinInit+0x5a>
    560e:	2310      	movs	r3, #16
    5610:	e000      	b.n	5614 <Port_Ci_Port_Ip_PinInit+0x5c>
    5612:	2300      	movs	r3, #0
    5614:	9a05      	ldr	r2, [sp, #20]
    5616:	4313      	orrs	r3, r2
    5618:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    561a:	9b01      	ldr	r3, [sp, #4]
    561c:	691b      	ldr	r3, [r3, #16]
    561e:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5620:	9b01      	ldr	r3, [sp, #4]
    5622:	6818      	ldr	r0, [r3, #0]
    5624:	9b01      	ldr	r3, [sp, #4]
    5626:	689b      	ldr	r3, [r3, #8]
    5628:	9a04      	ldr	r2, [sp, #16]
    562a:	4619      	mov	r1, r3
    562c:	f7ff ff90 	bl	5550 <Port_Ci_Port_Ip_ConfigureInterleave>
    5630:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    5632:	9b03      	ldr	r3, [sp, #12]
    5634:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    5636:	9b04      	ldr	r3, [sp, #16]
    5638:	021b      	lsls	r3, r3, #8
    563a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    563e:	9a05      	ldr	r2, [sp, #20]
    5640:	4313      	orrs	r3, r2
    5642:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    5644:	f007 fa68 	bl	cb18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    5648:	9b01      	ldr	r3, [sp, #4]
    564a:	681b      	ldr	r3, [r3, #0]
    564c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    5650:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    5652:	9b01      	ldr	r3, [sp, #4]
    5654:	689b      	ldr	r3, [r3, #8]
    5656:	2201      	movs	r2, #1
    5658:	fa02 f303 	lsl.w	r3, r2, r3
    565c:	43db      	mvns	r3, r3
    565e:	9a02      	ldr	r2, [sp, #8]
    5660:	4013      	ands	r3, r2
    5662:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    5664:	9b01      	ldr	r3, [sp, #4]
    5666:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    566a:	2b00      	cmp	r3, #0
    566c:	d001      	beq.n	5672 <Port_Ci_Port_Ip_PinInit+0xba>
    566e:	2201      	movs	r2, #1
    5670:	e000      	b.n	5674 <Port_Ci_Port_Ip_PinInit+0xbc>
    5672:	2200      	movs	r2, #0
    5674:	9b01      	ldr	r3, [sp, #4]
    5676:	689b      	ldr	r3, [r3, #8]
    5678:	fa02 f303 	lsl.w	r3, r2, r3
    567c:	9a02      	ldr	r2, [sp, #8]
    567e:	4313      	orrs	r3, r2
    5680:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    5682:	9b01      	ldr	r3, [sp, #4]
    5684:	681b      	ldr	r3, [r3, #0]
    5686:	9a02      	ldr	r2, [sp, #8]
    5688:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    568c:	f007 fa70 	bl	cb70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    5690:	9b04      	ldr	r3, [sp, #16]
    5692:	2b01      	cmp	r3, #1
    5694:	d16d      	bne.n	5772 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    5696:	9b01      	ldr	r3, [sp, #4]
    5698:	695b      	ldr	r3, [r3, #20]
    569a:	2b02      	cmp	r3, #2
    569c:	d138      	bne.n	5710 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    569e:	9b01      	ldr	r3, [sp, #4]
    56a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    56a4:	2b01      	cmp	r3, #1
    56a6:	d10f      	bne.n	56c8 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    56a8:	f007 fa88 	bl	cbbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    56ac:	9b01      	ldr	r3, [sp, #4]
    56ae:	685b      	ldr	r3, [r3, #4]
    56b0:	6859      	ldr	r1, [r3, #4]
    56b2:	9b01      	ldr	r3, [sp, #4]
    56b4:	689b      	ldr	r3, [r3, #8]
    56b6:	2201      	movs	r2, #1
    56b8:	409a      	lsls	r2, r3
    56ba:	9b01      	ldr	r3, [sp, #4]
    56bc:	685b      	ldr	r3, [r3, #4]
    56be:	430a      	orrs	r2, r1
    56c0:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    56c2:	f007 faa7 	bl	cc14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    56c6:	e013      	b.n	56f0 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    56c8:	9b01      	ldr	r3, [sp, #4]
    56ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    56ce:	2b00      	cmp	r3, #0
    56d0:	d10e      	bne.n	56f0 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    56d2:	f007 fac5 	bl	cc60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    56d6:	9b01      	ldr	r3, [sp, #4]
    56d8:	685b      	ldr	r3, [r3, #4]
    56da:	6899      	ldr	r1, [r3, #8]
    56dc:	9b01      	ldr	r3, [sp, #4]
    56de:	689b      	ldr	r3, [r3, #8]
    56e0:	2201      	movs	r2, #1
    56e2:	409a      	lsls	r2, r3
    56e4:	9b01      	ldr	r3, [sp, #4]
    56e6:	685b      	ldr	r3, [r3, #4]
    56e8:	430a      	orrs	r2, r1
    56ea:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    56ec:	f007 fae4 	bl	ccb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    56f0:	f007 fb08 	bl	cd04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    56f4:	9b01      	ldr	r3, [sp, #4]
    56f6:	685b      	ldr	r3, [r3, #4]
    56f8:	6959      	ldr	r1, [r3, #20]
    56fa:	9b01      	ldr	r3, [sp, #4]
    56fc:	689b      	ldr	r3, [r3, #8]
    56fe:	2201      	movs	r2, #1
    5700:	409a      	lsls	r2, r3
    5702:	9b01      	ldr	r3, [sp, #4]
    5704:	685b      	ldr	r3, [r3, #4]
    5706:	430a      	orrs	r2, r1
    5708:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    570a:	f007 fb27 	bl	cd5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    570e:	e030      	b.n	5772 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5710:	f007 faf8 	bl	cd04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    5714:	9b01      	ldr	r3, [sp, #4]
    5716:	685b      	ldr	r3, [r3, #4]
    5718:	6959      	ldr	r1, [r3, #20]
    571a:	9b01      	ldr	r3, [sp, #4]
    571c:	689b      	ldr	r3, [r3, #8]
    571e:	2201      	movs	r2, #1
    5720:	fa02 f303 	lsl.w	r3, r2, r3
    5724:	43da      	mvns	r2, r3
    5726:	9b01      	ldr	r3, [sp, #4]
    5728:	685b      	ldr	r3, [r3, #4]
    572a:	400a      	ands	r2, r1
    572c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    572e:	f007 fb15 	bl	cd5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    5732:	f007 fb39 	bl	cda8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    5736:	9b01      	ldr	r3, [sp, #4]
    5738:	685b      	ldr	r3, [r3, #4]
    573a:	6999      	ldr	r1, [r3, #24]
    573c:	9b01      	ldr	r3, [sp, #4]
    573e:	689b      	ldr	r3, [r3, #8]
    5740:	2201      	movs	r2, #1
    5742:	fa02 f303 	lsl.w	r3, r2, r3
    5746:	43da      	mvns	r2, r3
    5748:	9b01      	ldr	r3, [sp, #4]
    574a:	685b      	ldr	r3, [r3, #4]
    574c:	400a      	ands	r2, r1
    574e:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    5750:	9b01      	ldr	r3, [sp, #4]
    5752:	695b      	ldr	r3, [r3, #20]
    5754:	2b03      	cmp	r3, #3
    5756:	d10a      	bne.n	576e <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    5758:	9b01      	ldr	r3, [sp, #4]
    575a:	685b      	ldr	r3, [r3, #4]
    575c:	6999      	ldr	r1, [r3, #24]
    575e:	9b01      	ldr	r3, [sp, #4]
    5760:	689b      	ldr	r3, [r3, #8]
    5762:	2201      	movs	r2, #1
    5764:	409a      	lsls	r2, r3
    5766:	9b01      	ldr	r3, [sp, #4]
    5768:	685b      	ldr	r3, [r3, #4]
    576a:	430a      	orrs	r2, r1
    576c:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    576e:	f007 fb47 	bl	ce00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    5772:	9b01      	ldr	r3, [sp, #4]
    5774:	681b      	ldr	r3, [r3, #0]
    5776:	9a01      	ldr	r2, [sp, #4]
    5778:	6892      	ldr	r2, [r2, #8]
    577a:	9905      	ldr	r1, [sp, #20]
    577c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5780:	bf00      	nop
    5782:	b007      	add	sp, #28
    5784:	f85d fb04 	ldr.w	pc, [sp], #4

00005788 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    5788:	b500      	push	{lr}
    578a:	b085      	sub	sp, #20
    578c:	9001      	str	r0, [sp, #4]
    578e:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    5790:	2300      	movs	r3, #0
    5792:	9303      	str	r3, [sp, #12]
    5794:	e00d      	b.n	57b2 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    5796:	9a03      	ldr	r2, [sp, #12]
    5798:	4613      	mov	r3, r2
    579a:	009b      	lsls	r3, r3, #2
    579c:	4413      	add	r3, r2
    579e:	00db      	lsls	r3, r3, #3
    57a0:	461a      	mov	r2, r3
    57a2:	9b00      	ldr	r3, [sp, #0]
    57a4:	4413      	add	r3, r2
    57a6:	4618      	mov	r0, r3
    57a8:	f7ff ff06 	bl	55b8 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    57ac:	9b03      	ldr	r3, [sp, #12]
    57ae:	3301      	adds	r3, #1
    57b0:	9303      	str	r3, [sp, #12]
    57b2:	9a03      	ldr	r2, [sp, #12]
    57b4:	9b01      	ldr	r3, [sp, #4]
    57b6:	429a      	cmp	r2, r3
    57b8:	d3ed      	bcc.n	5796 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    57ba:	2300      	movs	r3, #0
}
    57bc:	4618      	mov	r0, r3
    57be:	b005      	add	sp, #20
    57c0:	f85d fb04 	ldr.w	pc, [sp], #4

000057c4 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    57c4:	b500      	push	{lr}
    57c6:	b087      	sub	sp, #28
    57c8:	9003      	str	r0, [sp, #12]
    57ca:	9102      	str	r1, [sp, #8]
    57cc:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    57ce:	9a01      	ldr	r2, [sp, #4]
    57d0:	9902      	ldr	r1, [sp, #8]
    57d2:	9803      	ldr	r0, [sp, #12]
    57d4:	f7ff febc 	bl	5550 <Port_Ci_Port_Ip_ConfigureInterleave>
    57d8:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    57da:	f007 fb89 	bl	cef0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    57de:	9b03      	ldr	r3, [sp, #12]
    57e0:	9a02      	ldr	r2, [sp, #8]
    57e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    57e6:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    57e8:	9b04      	ldr	r3, [sp, #16]
    57ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    57ee:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    57f0:	9b05      	ldr	r3, [sp, #20]
    57f2:	021b      	lsls	r3, r3, #8
    57f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    57f8:	9a04      	ldr	r2, [sp, #16]
    57fa:	4313      	orrs	r3, r2
    57fc:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    57fe:	9b03      	ldr	r3, [sp, #12]
    5800:	9a02      	ldr	r2, [sp, #8]
    5802:	9904      	ldr	r1, [sp, #16]
    5804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    5808:	f007 fb9e 	bl	cf48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    580c:	bf00      	nop
    580e:	b007      	add	sp, #28
    5810:	f85d fb04 	ldr.w	pc, [sp], #4

00005814 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5814:	b500      	push	{lr}
    5816:	b083      	sub	sp, #12
    5818:	9001      	str	r0, [sp, #4]
    581a:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    581c:	f007 fbba 	bl	cf94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    5820:	9b01      	ldr	r3, [sp, #4]
    5822:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    5826:	2101      	movs	r1, #1
    5828:	9b00      	ldr	r3, [sp, #0]
    582a:	fa01 f303 	lsl.w	r3, r1, r3
    582e:	431a      	orrs	r2, r3
    5830:	9b01      	ldr	r3, [sp, #4]
    5832:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    5836:	f007 fbd9 	bl	cfec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    583a:	bf00      	nop
    583c:	b003      	add	sp, #12
    583e:	f85d fb04 	ldr.w	pc, [sp], #4

00005842 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5842:	b500      	push	{lr}
    5844:	b083      	sub	sp, #12
    5846:	9001      	str	r0, [sp, #4]
    5848:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    584a:	f007 fbf5 	bl	d038 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    584e:	9b01      	ldr	r3, [sp, #4]
    5850:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    5854:	2101      	movs	r1, #1
    5856:	9b00      	ldr	r3, [sp, #0]
    5858:	fa01 f303 	lsl.w	r3, r1, r3
    585c:	43db      	mvns	r3, r3
    585e:	401a      	ands	r2, r3
    5860:	9b01      	ldr	r3, [sp, #4]
    5862:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    5866:	f007 fc13 	bl	d090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    586a:	bf00      	nop
    586c:	b003      	add	sp, #12
    586e:	f85d fb04 	ldr.w	pc, [sp], #4

00005872 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    5872:	b082      	sub	sp, #8
    5874:	9001      	str	r0, [sp, #4]
    5876:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    5878:	9b00      	ldr	r3, [sp, #0]
    587a:	785b      	ldrb	r3, [r3, #1]
    587c:	f003 0201 	and.w	r2, r3, #1
    5880:	9b01      	ldr	r3, [sp, #4]
    5882:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    5886:	9b00      	ldr	r3, [sp, #0]
    5888:	789b      	ldrb	r3, [r3, #2]
    588a:	f003 021f 	and.w	r2, r3, #31
    588e:	9b01      	ldr	r3, [sp, #4]
    5890:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    5894:	bf00      	nop
    5896:	b002      	add	sp, #8
    5898:	4770      	bx	lr

0000589a <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    589a:	b086      	sub	sp, #24
    589c:	9003      	str	r0, [sp, #12]
    589e:	9301      	str	r3, [sp, #4]
    58a0:	460b      	mov	r3, r1
    58a2:	f8ad 300a 	strh.w	r3, [sp, #10]
    58a6:	4613      	mov	r3, r2
    58a8:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    58ac:	2300      	movs	r3, #0
    58ae:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    58b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58b6:	f043 0301 	orr.w	r3, r3, #1
    58ba:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    58be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58c2:	f043 0302 	orr.w	r3, r3, #2
    58c6:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    58ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58ce:	f043 0310 	orr.w	r3, r3, #16
    58d2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    58d6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    58de:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    58e2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    58ea:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    58ee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    58f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    58fa:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    58fe:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5902:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    5906:	4013      	ands	r3, r2
    5908:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    590c:	9b01      	ldr	r3, [sp, #4]
    590e:	2b00      	cmp	r3, #0
    5910:	d003      	beq.n	591a <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    5912:	9b01      	ldr	r3, [sp, #4]
    5914:	2b01      	cmp	r3, #1
    5916:	d00a      	beq.n	592e <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    5918:	e013      	b.n	5942 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    591a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    591e:	041a      	lsls	r2, r3, #16
    5920:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5924:	431a      	orrs	r2, r3
    5926:	9b03      	ldr	r3, [sp, #12]
    5928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    592c:	e009      	b.n	5942 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    592e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5932:	041a      	lsls	r2, r3, #16
    5934:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5938:	431a      	orrs	r2, r3
    593a:	9b03      	ldr	r3, [sp, #12]
    593c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    5940:	bf00      	nop
    }
}
    5942:	bf00      	nop
    5944:	b006      	add	sp, #24
    5946:	4770      	bx	lr

00005948 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    5948:	b500      	push	{lr}
    594a:	b087      	sub	sp, #28
    594c:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    594e:	9b01      	ldr	r3, [sp, #4]
    5950:	885b      	ldrh	r3, [r3, #2]
    5952:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    5956:	9b01      	ldr	r3, [sp, #4]
    5958:	689b      	ldr	r3, [r3, #8]
    595a:	7a1b      	ldrb	r3, [r3, #8]
    595c:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    5960:	9b01      	ldr	r3, [sp, #4]
    5962:	689b      	ldr	r3, [r3, #8]
    5964:	681b      	ldr	r3, [r3, #0]
    5966:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    5968:	9b01      	ldr	r3, [sp, #4]
    596a:	689b      	ldr	r3, [r3, #8]
    596c:	685b      	ldr	r3, [r3, #4]
    596e:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5970:	2300      	movs	r3, #0
    5972:	f8ad 3016 	strh.w	r3, [sp, #22]
    5976:	e111      	b.n	5b9c <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    5978:	9b02      	ldr	r3, [sp, #8]
    597a:	2b02      	cmp	r3, #2
    597c:	d169      	bne.n	5a52 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    597e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5982:	2b01      	cmp	r3, #1
    5984:	d11a      	bne.n	59bc <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5986:	9b01      	ldr	r3, [sp, #4]
    5988:	685a      	ldr	r2, [r3, #4]
    598a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    598e:	005b      	lsls	r3, r3, #1
    5990:	4413      	add	r3, r2
    5992:	881b      	ldrh	r3, [r3, #0]
    5994:	f003 021f 	and.w	r2, r3, #31
    5998:	9b01      	ldr	r3, [sp, #4]
    599a:	6859      	ldr	r1, [r3, #4]
    599c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59a0:	005b      	lsls	r3, r3, #1
    59a2:	440b      	add	r3, r1
    59a4:	881b      	ldrh	r3, [r3, #0]
    59a6:	095b      	lsrs	r3, r3, #5
    59a8:	b29b      	uxth	r3, r3
    59aa:	4619      	mov	r1, r3
    59ac:	4b81      	ldr	r3, [pc, #516]	; (5bb4 <Port_Ipw_Init_UnusedPins+0x26c>)
    59ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    59b2:	2101      	movs	r1, #1
    59b4:	fa01 f202 	lsl.w	r2, r1, r2
    59b8:	605a      	str	r2, [r3, #4]
    59ba:	e01d      	b.n	59f8 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    59bc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    59c0:	2b00      	cmp	r3, #0
    59c2:	d119      	bne.n	59f8 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    59c4:	9b01      	ldr	r3, [sp, #4]
    59c6:	685a      	ldr	r2, [r3, #4]
    59c8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59cc:	005b      	lsls	r3, r3, #1
    59ce:	4413      	add	r3, r2
    59d0:	881b      	ldrh	r3, [r3, #0]
    59d2:	f003 021f 	and.w	r2, r3, #31
    59d6:	9b01      	ldr	r3, [sp, #4]
    59d8:	6859      	ldr	r1, [r3, #4]
    59da:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59de:	005b      	lsls	r3, r3, #1
    59e0:	440b      	add	r3, r1
    59e2:	881b      	ldrh	r3, [r3, #0]
    59e4:	095b      	lsrs	r3, r3, #5
    59e6:	b29b      	uxth	r3, r3
    59e8:	4619      	mov	r1, r3
    59ea:	4b72      	ldr	r3, [pc, #456]	; (5bb4 <Port_Ipw_Init_UnusedPins+0x26c>)
    59ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    59f0:	2101      	movs	r1, #1
    59f2:	fa01 f202 	lsl.w	r2, r1, r2
    59f6:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    59f8:	f007 fb70 	bl	d0dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    59fc:	9b01      	ldr	r3, [sp, #4]
    59fe:	685a      	ldr	r2, [r3, #4]
    5a00:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a04:	005b      	lsls	r3, r3, #1
    5a06:	4413      	add	r3, r2
    5a08:	881b      	ldrh	r3, [r3, #0]
    5a0a:	095b      	lsrs	r3, r3, #5
    5a0c:	b29b      	uxth	r3, r3
    5a0e:	461a      	mov	r2, r3
    5a10:	4b68      	ldr	r3, [pc, #416]	; (5bb4 <Port_Ipw_Init_UnusedPins+0x26c>)
    5a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5a16:	6959      	ldr	r1, [r3, #20]
    5a18:	9b01      	ldr	r3, [sp, #4]
    5a1a:	685a      	ldr	r2, [r3, #4]
    5a1c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a20:	005b      	lsls	r3, r3, #1
    5a22:	4413      	add	r3, r2
    5a24:	881b      	ldrh	r3, [r3, #0]
    5a26:	f003 031f 	and.w	r3, r3, #31
    5a2a:	2201      	movs	r2, #1
    5a2c:	409a      	lsls	r2, r3
    5a2e:	9b01      	ldr	r3, [sp, #4]
    5a30:	6858      	ldr	r0, [r3, #4]
    5a32:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a36:	005b      	lsls	r3, r3, #1
    5a38:	4403      	add	r3, r0
    5a3a:	881b      	ldrh	r3, [r3, #0]
    5a3c:	095b      	lsrs	r3, r3, #5
    5a3e:	b29b      	uxth	r3, r3
    5a40:	4618      	mov	r0, r3
    5a42:	4b5c      	ldr	r3, [pc, #368]	; (5bb4 <Port_Ipw_Init_UnusedPins+0x26c>)
    5a44:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5a48:	430a      	orrs	r2, r1
    5a4a:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5a4c:	f007 fb72 	bl	d134 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    5a50:	e086      	b.n	5b60 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5a52:	f007 fb43 	bl	d0dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    5a56:	9b01      	ldr	r3, [sp, #4]
    5a58:	685a      	ldr	r2, [r3, #4]
    5a5a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a5e:	005b      	lsls	r3, r3, #1
    5a60:	4413      	add	r3, r2
    5a62:	881b      	ldrh	r3, [r3, #0]
    5a64:	095b      	lsrs	r3, r3, #5
    5a66:	b29b      	uxth	r3, r3
    5a68:	461a      	mov	r2, r3
    5a6a:	4b52      	ldr	r3, [pc, #328]	; (5bb4 <Port_Ipw_Init_UnusedPins+0x26c>)
    5a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5a70:	6959      	ldr	r1, [r3, #20]
    5a72:	9b01      	ldr	r3, [sp, #4]
    5a74:	685a      	ldr	r2, [r3, #4]
    5a76:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a7a:	005b      	lsls	r3, r3, #1
    5a7c:	4413      	add	r3, r2
    5a7e:	881b      	ldrh	r3, [r3, #0]
    5a80:	f003 031f 	and.w	r3, r3, #31
    5a84:	2201      	movs	r2, #1
    5a86:	fa02 f303 	lsl.w	r3, r2, r3
    5a8a:	43da      	mvns	r2, r3
    5a8c:	9b01      	ldr	r3, [sp, #4]
    5a8e:	6858      	ldr	r0, [r3, #4]
    5a90:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a94:	005b      	lsls	r3, r3, #1
    5a96:	4403      	add	r3, r0
    5a98:	881b      	ldrh	r3, [r3, #0]
    5a9a:	095b      	lsrs	r3, r3, #5
    5a9c:	b29b      	uxth	r3, r3
    5a9e:	4618      	mov	r0, r3
    5aa0:	4b44      	ldr	r3, [pc, #272]	; (5bb4 <Port_Ipw_Init_UnusedPins+0x26c>)
    5aa2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5aa6:	400a      	ands	r2, r1
    5aa8:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5aaa:	f007 fb43 	bl	d134 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    5aae:	f007 fb67 	bl	d180 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5ab2:	9b01      	ldr	r3, [sp, #4]
    5ab4:	685a      	ldr	r2, [r3, #4]
    5ab6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5aba:	005b      	lsls	r3, r3, #1
    5abc:	4413      	add	r3, r2
    5abe:	881b      	ldrh	r3, [r3, #0]
    5ac0:	095b      	lsrs	r3, r3, #5
    5ac2:	b29b      	uxth	r3, r3
    5ac4:	461a      	mov	r2, r3
    5ac6:	4b3b      	ldr	r3, [pc, #236]	; (5bb4 <Port_Ipw_Init_UnusedPins+0x26c>)
    5ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5acc:	6999      	ldr	r1, [r3, #24]
    5ace:	9b01      	ldr	r3, [sp, #4]
    5ad0:	685a      	ldr	r2, [r3, #4]
    5ad2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ad6:	005b      	lsls	r3, r3, #1
    5ad8:	4413      	add	r3, r2
    5ada:	881b      	ldrh	r3, [r3, #0]
    5adc:	f003 031f 	and.w	r3, r3, #31
    5ae0:	2201      	movs	r2, #1
    5ae2:	fa02 f303 	lsl.w	r3, r2, r3
    5ae6:	43da      	mvns	r2, r3
    5ae8:	9b01      	ldr	r3, [sp, #4]
    5aea:	6858      	ldr	r0, [r3, #4]
    5aec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5af0:	005b      	lsls	r3, r3, #1
    5af2:	4403      	add	r3, r0
    5af4:	881b      	ldrh	r3, [r3, #0]
    5af6:	095b      	lsrs	r3, r3, #5
    5af8:	b29b      	uxth	r3, r3
    5afa:	4618      	mov	r0, r3
    5afc:	4b2d      	ldr	r3, [pc, #180]	; (5bb4 <Port_Ipw_Init_UnusedPins+0x26c>)
    5afe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5b02:	400a      	ands	r2, r1
    5b04:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    5b06:	9b02      	ldr	r3, [sp, #8]
    5b08:	2b03      	cmp	r3, #3
    5b0a:	d127      	bne.n	5b5c <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5b0c:	9b01      	ldr	r3, [sp, #4]
    5b0e:	685a      	ldr	r2, [r3, #4]
    5b10:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b14:	005b      	lsls	r3, r3, #1
    5b16:	4413      	add	r3, r2
    5b18:	881b      	ldrh	r3, [r3, #0]
    5b1a:	095b      	lsrs	r3, r3, #5
    5b1c:	b29b      	uxth	r3, r3
    5b1e:	461a      	mov	r2, r3
    5b20:	4b24      	ldr	r3, [pc, #144]	; (5bb4 <Port_Ipw_Init_UnusedPins+0x26c>)
    5b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b26:	6999      	ldr	r1, [r3, #24]
    5b28:	9b01      	ldr	r3, [sp, #4]
    5b2a:	685a      	ldr	r2, [r3, #4]
    5b2c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b30:	005b      	lsls	r3, r3, #1
    5b32:	4413      	add	r3, r2
    5b34:	881b      	ldrh	r3, [r3, #0]
    5b36:	f003 031f 	and.w	r3, r3, #31
    5b3a:	2201      	movs	r2, #1
    5b3c:	409a      	lsls	r2, r3
    5b3e:	9b01      	ldr	r3, [sp, #4]
    5b40:	6858      	ldr	r0, [r3, #4]
    5b42:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b46:	005b      	lsls	r3, r3, #1
    5b48:	4403      	add	r3, r0
    5b4a:	881b      	ldrh	r3, [r3, #0]
    5b4c:	095b      	lsrs	r3, r3, #5
    5b4e:	b29b      	uxth	r3, r3
    5b50:	4618      	mov	r0, r3
    5b52:	4b18      	ldr	r3, [pc, #96]	; (5bb4 <Port_Ipw_Init_UnusedPins+0x26c>)
    5b54:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5b58:	430a      	orrs	r2, r1
    5b5a:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    5b5c:	f007 fb3c 	bl	d1d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    5b60:	9b01      	ldr	r3, [sp, #4]
    5b62:	685a      	ldr	r2, [r3, #4]
    5b64:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b68:	005b      	lsls	r3, r3, #1
    5b6a:	4413      	add	r3, r2
    5b6c:	881b      	ldrh	r3, [r3, #0]
    5b6e:	095b      	lsrs	r3, r3, #5
    5b70:	b29b      	uxth	r3, r3
    5b72:	461a      	mov	r2, r3
    5b74:	4b10      	ldr	r3, [pc, #64]	; (5bb8 <Port_Ipw_Init_UnusedPins+0x270>)
    5b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b7a:	9a01      	ldr	r2, [sp, #4]
    5b7c:	6851      	ldr	r1, [r2, #4]
    5b7e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5b82:	0052      	lsls	r2, r2, #1
    5b84:	440a      	add	r2, r1
    5b86:	8812      	ldrh	r2, [r2, #0]
    5b88:	f002 021f 	and.w	r2, r2, #31
    5b8c:	9903      	ldr	r1, [sp, #12]
    5b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5b92:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b96:	3301      	adds	r3, #1
    5b98:	f8ad 3016 	strh.w	r3, [sp, #22]
    5b9c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5ba0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5ba4:	429a      	cmp	r2, r3
    5ba6:	f4ff aee7 	bcc.w	5978 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    5baa:	bf00      	nop
    5bac:	bf00      	nop
    5bae:	b007      	add	sp, #28
    5bb0:	f85d fb04 	ldr.w	pc, [sp], #4
    5bb4:	0000e8e0 	.word	0x0000e8e0
    5bb8:	0000e8cc 	.word	0x0000e8cc

00005bbc <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    5bbc:	b500      	push	{lr}
    5bbe:	b085      	sub	sp, #20
    5bc0:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    5bc2:	9b01      	ldr	r3, [sp, #4]
    5bc4:	7c1b      	ldrb	r3, [r3, #16]
    5bc6:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5bca:	2300      	movs	r3, #0
    5bcc:	f8ad 300e 	strh.w	r3, [sp, #14]
    5bd0:	e035      	b.n	5c3e <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    5bd2:	9b01      	ldr	r3, [sp, #4]
    5bd4:	695a      	ldr	r2, [r3, #20]
    5bd6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5bda:	00db      	lsls	r3, r3, #3
    5bdc:	4413      	add	r3, r2
    5bde:	781b      	ldrb	r3, [r3, #0]
    5be0:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    5be4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5be8:	4a1f      	ldr	r2, [pc, #124]	; (5c68 <Port_Ipw_Init+0xac>)
    5bea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5bee:	9b01      	ldr	r3, [sp, #4]
    5bf0:	695a      	ldr	r2, [r3, #20]
    5bf2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5bf6:	00db      	lsls	r3, r3, #3
    5bf8:	4413      	add	r3, r2
    5bfa:	4619      	mov	r1, r3
    5bfc:	f7ff fe39 	bl	5872 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    5c00:	f007 fc58 	bl	d4b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    5c04:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5c08:	4a17      	ldr	r2, [pc, #92]	; (5c68 <Port_Ipw_Init+0xac>)
    5c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c0e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    5c12:	9b01      	ldr	r3, [sp, #4]
    5c14:	695a      	ldr	r2, [r3, #20]
    5c16:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5c1a:	00db      	lsls	r3, r3, #3
    5c1c:	4413      	add	r3, r2
    5c1e:	685a      	ldr	r2, [r3, #4]
    5c20:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5c24:	4810      	ldr	r0, [pc, #64]	; (5c68 <Port_Ipw_Init+0xac>)
    5c26:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5c2a:	430a      	orrs	r2, r1
    5c2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    5c30:	f007 fc6c 	bl	d50c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5c34:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5c38:	3301      	adds	r3, #1
    5c3a:	f8ad 300e 	strh.w	r3, [sp, #14]
    5c3e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5c42:	b29b      	uxth	r3, r3
    5c44:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5c48:	429a      	cmp	r2, r3
    5c4a:	d3c2      	bcc.n	5bd2 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    5c4c:	9b01      	ldr	r3, [sp, #4]
    5c4e:	6a1b      	ldr	r3, [r3, #32]
    5c50:	4619      	mov	r1, r3
    5c52:	2003      	movs	r0, #3
    5c54:	f7ff fd98 	bl	5788 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    5c58:	9801      	ldr	r0, [sp, #4]
    5c5a:	f7ff fe75 	bl	5948 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    5c5e:	bf00      	nop
    5c60:	b005      	add	sp, #20
    5c62:	f85d fb04 	ldr.w	pc, [sp], #4
    5c66:	bf00      	nop
    5c68:	0000e8cc 	.word	0x0000e8cc

00005c6c <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    5c6c:	b500      	push	{lr}
    5c6e:	b085      	sub	sp, #20
    5c70:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    5c72:	9b01      	ldr	r3, [sp, #4]
    5c74:	881b      	ldrh	r3, [r3, #0]
    5c76:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5c7a:	2300      	movs	r3, #0
    5c7c:	f8ad 300e 	strh.w	r3, [sp, #14]
    5c80:	e0d2      	b.n	5e28 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    5c82:	9b01      	ldr	r3, [sp, #4]
    5c84:	68d9      	ldr	r1, [r3, #12]
    5c86:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5c8a:	4613      	mov	r3, r2
    5c8c:	009b      	lsls	r3, r3, #2
    5c8e:	4413      	add	r3, r2
    5c90:	009b      	lsls	r3, r3, #2
    5c92:	440b      	add	r3, r1
    5c94:	7c5b      	ldrb	r3, [r3, #17]
    5c96:	f083 0301 	eor.w	r3, r3, #1
    5c9a:	b2db      	uxtb	r3, r3
    5c9c:	2b00      	cmp	r3, #0
    5c9e:	f000 80be 	beq.w	5e1e <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    5ca2:	9b01      	ldr	r3, [sp, #4]
    5ca4:	68d9      	ldr	r1, [r3, #12]
    5ca6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5caa:	4613      	mov	r3, r2
    5cac:	009b      	lsls	r3, r3, #2
    5cae:	4413      	add	r3, r2
    5cb0:	009b      	lsls	r3, r3, #2
    5cb2:	440b      	add	r3, r1
    5cb4:	7c1b      	ldrb	r3, [r3, #16]
    5cb6:	2b00      	cmp	r3, #0
    5cb8:	f000 80b1 	beq.w	5e1e <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    5cbc:	9b01      	ldr	r3, [sp, #4]
    5cbe:	68d9      	ldr	r1, [r3, #12]
    5cc0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5cc4:	4613      	mov	r3, r2
    5cc6:	009b      	lsls	r3, r3, #2
    5cc8:	4413      	add	r3, r2
    5cca:	009b      	lsls	r3, r3, #2
    5ccc:	440b      	add	r3, r1
    5cce:	881b      	ldrh	r3, [r3, #0]
    5cd0:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5cd4:	9b01      	ldr	r3, [sp, #4]
    5cd6:	68d9      	ldr	r1, [r3, #12]
    5cd8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5cdc:	4613      	mov	r3, r2
    5cde:	009b      	lsls	r3, r3, #2
    5ce0:	4413      	add	r3, r2
    5ce2:	009b      	lsls	r3, r3, #2
    5ce4:	440b      	add	r3, r1
    5ce6:	68db      	ldr	r3, [r3, #12]
    5ce8:	2b02      	cmp	r3, #2
    5cea:	d11d      	bne.n	5d28 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5cec:	f007 fd2a 	bl	d744 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5cf0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5cf4:	095b      	lsrs	r3, r3, #5
    5cf6:	b29b      	uxth	r3, r3
    5cf8:	461a      	mov	r2, r3
    5cfa:	4b51      	ldr	r3, [pc, #324]	; (5e40 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5d00:	6959      	ldr	r1, [r3, #20]
    5d02:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d06:	f003 031f 	and.w	r3, r3, #31
    5d0a:	2201      	movs	r2, #1
    5d0c:	409a      	lsls	r2, r3
    5d0e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d12:	095b      	lsrs	r3, r3, #5
    5d14:	b29b      	uxth	r3, r3
    5d16:	4618      	mov	r0, r3
    5d18:	4b49      	ldr	r3, [pc, #292]	; (5e40 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d1a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5d1e:	430a      	orrs	r2, r1
    5d20:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5d22:	f007 fd3b 	bl	d79c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    5d26:	e07a      	b.n	5e1e <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    5d28:	9b01      	ldr	r3, [sp, #4]
    5d2a:	68d9      	ldr	r1, [r3, #12]
    5d2c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d30:	4613      	mov	r3, r2
    5d32:	009b      	lsls	r3, r3, #2
    5d34:	4413      	add	r3, r2
    5d36:	009b      	lsls	r3, r3, #2
    5d38:	440b      	add	r3, r1
    5d3a:	68db      	ldr	r3, [r3, #12]
    5d3c:	2b01      	cmp	r3, #1
    5d3e:	d00b      	beq.n	5d58 <Port_Ipw_RefreshPortDirection+0xec>
    5d40:	9b01      	ldr	r3, [sp, #4]
    5d42:	68d9      	ldr	r1, [r3, #12]
    5d44:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d48:	4613      	mov	r3, r2
    5d4a:	009b      	lsls	r3, r3, #2
    5d4c:	4413      	add	r3, r2
    5d4e:	009b      	lsls	r3, r3, #2
    5d50:	440b      	add	r3, r1
    5d52:	68db      	ldr	r3, [r3, #12]
    5d54:	2b03      	cmp	r3, #3
    5d56:	d162      	bne.n	5e1e <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5d58:	f007 fcf4 	bl	d744 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5d5c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d60:	095b      	lsrs	r3, r3, #5
    5d62:	b29b      	uxth	r3, r3
    5d64:	461a      	mov	r2, r3
    5d66:	4b36      	ldr	r3, [pc, #216]	; (5e40 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5d6c:	6959      	ldr	r1, [r3, #20]
    5d6e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d72:	f003 031f 	and.w	r3, r3, #31
    5d76:	2201      	movs	r2, #1
    5d78:	fa02 f303 	lsl.w	r3, r2, r3
    5d7c:	43da      	mvns	r2, r3
    5d7e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d82:	095b      	lsrs	r3, r3, #5
    5d84:	b29b      	uxth	r3, r3
    5d86:	4618      	mov	r0, r3
    5d88:	4b2d      	ldr	r3, [pc, #180]	; (5e40 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d8a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5d8e:	400a      	ands	r2, r1
    5d90:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5d92:	f007 fd03 	bl	d79c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    5d96:	f007 fd27 	bl	d7e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5d9a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d9e:	095b      	lsrs	r3, r3, #5
    5da0:	b29b      	uxth	r3, r3
    5da2:	461a      	mov	r2, r3
    5da4:	4b26      	ldr	r3, [pc, #152]	; (5e40 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5daa:	6999      	ldr	r1, [r3, #24]
    5dac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5db0:	f003 031f 	and.w	r3, r3, #31
    5db4:	2201      	movs	r2, #1
    5db6:	fa02 f303 	lsl.w	r3, r2, r3
    5dba:	43da      	mvns	r2, r3
    5dbc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5dc0:	095b      	lsrs	r3, r3, #5
    5dc2:	b29b      	uxth	r3, r3
    5dc4:	4618      	mov	r0, r3
    5dc6:	4b1e      	ldr	r3, [pc, #120]	; (5e40 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5dc8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5dcc:	400a      	ands	r2, r1
    5dce:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5dd0:	9b01      	ldr	r3, [sp, #4]
    5dd2:	68d9      	ldr	r1, [r3, #12]
    5dd4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5dd8:	4613      	mov	r3, r2
    5dda:	009b      	lsls	r3, r3, #2
    5ddc:	4413      	add	r3, r2
    5dde:	009b      	lsls	r3, r3, #2
    5de0:	440b      	add	r3, r1
    5de2:	68db      	ldr	r3, [r3, #12]
    5de4:	2b03      	cmp	r3, #3
    5de6:	d118      	bne.n	5e1a <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5de8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5dec:	095b      	lsrs	r3, r3, #5
    5dee:	b29b      	uxth	r3, r3
    5df0:	461a      	mov	r2, r3
    5df2:	4b13      	ldr	r3, [pc, #76]	; (5e40 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5df8:	6999      	ldr	r1, [r3, #24]
    5dfa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5dfe:	f003 031f 	and.w	r3, r3, #31
    5e02:	2201      	movs	r2, #1
    5e04:	409a      	lsls	r2, r3
    5e06:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e0a:	095b      	lsrs	r3, r3, #5
    5e0c:	b29b      	uxth	r3, r3
    5e0e:	4618      	mov	r0, r3
    5e10:	4b0b      	ldr	r3, [pc, #44]	; (5e40 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5e12:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5e16:	430a      	orrs	r2, r1
    5e18:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    5e1a:	f007 fd11 	bl	d840 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5e1e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5e22:	3301      	adds	r3, #1
    5e24:	f8ad 300e 	strh.w	r3, [sp, #14]
    5e28:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5e2c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5e30:	429a      	cmp	r2, r3
    5e32:	f4ff af26 	bcc.w	5c82 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    5e36:	bf00      	nop
    5e38:	bf00      	nop
    5e3a:	b005      	add	sp, #20
    5e3c:	f85d fb04 	ldr.w	pc, [sp], #4
    5e40:	0000e8e0 	.word	0x0000e8e0

00005e44 <Can_IsControllersBusy>:
        }
    }
#endif /* CAN_43_FLEXCAN_MAINFUNCTION_MULTIPLE_READ == STD_ON */

static boolean Can_IsControllersBusy(uint32 u32CoreId)
{
    5e44:	b084      	sub	sp, #16
    5e46:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    5e48:	2300      	movs	r3, #0
    5e4a:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    5e4e:	2300      	movs	r3, #0
    5e50:	f88d 300e 	strb.w	r3, [sp, #14]

    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5e54:	2300      	movs	r3, #0
    5e56:	f88d 300e 	strb.w	r3, [sp, #14]
    5e5a:	e01b      	b.n	5e94 <Can_IsControllersBusy+0x50>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    5e5c:	4a12      	ldr	r2, [pc, #72]	; (5ea8 <Can_IsControllersBusy+0x64>)
    5e5e:	9b01      	ldr	r3, [sp, #4]
    5e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e64:	695a      	ldr	r2, [r3, #20]
    5e66:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5e6a:	009b      	lsls	r3, r3, #2
    5e6c:	4413      	add	r3, r2
    5e6e:	681b      	ldr	r3, [r3, #0]
    5e70:	2b00      	cmp	r3, #0
    5e72:	d00a      	beq.n	5e8a <Can_IsControllersBusy+0x46>
        {
            if (CAN_CS_UNINIT != Can_eControllerState[u8ControllerID])
    5e74:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5e78:	4a0c      	ldr	r2, [pc, #48]	; (5eac <Can_IsControllersBusy+0x68>)
    5e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e7e:	2b00      	cmp	r3, #0
    5e80:	d003      	beq.n	5e8a <Can_IsControllersBusy+0x46>
                *   The function Can_Init shall raise the error CAN_E_TRANSITION if the CAN
                *   controllers are not in state UNINIT.
                */
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_TRANSITION);
            #endif
                bCtrlBusy = TRUE;
    5e82:	2301      	movs	r3, #1
    5e84:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    5e88:	e008      	b.n	5e9c <Can_IsControllersBusy+0x58>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5e8a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5e8e:	3301      	adds	r3, #1
    5e90:	f88d 300e 	strb.w	r3, [sp, #14]
    5e94:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5e98:	2b00      	cmp	r3, #0
    5e9a:	d0df      	beq.n	5e5c <Can_IsControllersBusy+0x18>
            }
        }
    }

    return bCtrlBusy;
    5e9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5ea0:	4618      	mov	r0, r3
    5ea2:	b004      	add	sp, #16
    5ea4:	4770      	bx	lr
    5ea6:	bf00      	nop
    5ea8:	1fff8cf4 	.word	0x1fff8cf4
    5eac:	1fff8cf0 	.word	0x1fff8cf0

00005eb0 <Can_InitControllers>:

static void Can_InitControllers(uint32 u32CoreId)
{
    5eb0:	b500      	push	{lr}
    5eb2:	b085      	sub	sp, #20
    5eb4:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    5eb6:	2300      	movs	r3, #0
    5eb8:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    5ebc:	2300      	movs	r3, #0
    5ebe:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5ec2:	2300      	movs	r3, #0
    5ec4:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5ec6:	2300      	movs	r3, #0
    5ec8:	f88d 300e 	strb.w	r3, [sp, #14]
    5ecc:	e035      	b.n	5f3a <Can_InitControllers+0x8a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    5ece:	4a30      	ldr	r2, [pc, #192]	; (5f90 <Can_InitControllers+0xe0>)
    5ed0:	9b01      	ldr	r3, [sp, #4]
    5ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ed6:	695a      	ldr	r2, [r3, #20]
    5ed8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5edc:	009b      	lsls	r3, r3, #2
    5ede:	4413      	add	r3, r2
    5ee0:	681b      	ldr	r3, [r3, #0]
    5ee2:	2b00      	cmp	r3, #0
    5ee4:	d024      	beq.n	5f30 <Can_InitControllers+0x80>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    5ee6:	4a2a      	ldr	r2, [pc, #168]	; (5f90 <Can_InitControllers+0xe0>)
    5ee8:	9b01      	ldr	r3, [sp, #4]
    5eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5eee:	695a      	ldr	r2, [r3, #20]
    5ef0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5ef4:	009b      	lsls	r3, r3, #2
    5ef6:	4413      	add	r3, r2
    5ef8:	681b      	ldr	r3, [r3, #0]
    5efa:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    5efc:	9b02      	ldr	r3, [sp, #8]
    5efe:	7a1b      	ldrb	r3, [r3, #8]
    5f00:	2b00      	cmp	r3, #0
    5f02:	d015      	beq.n	5f30 <Can_InitControllers+0x80>
                */
            #if ((CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) || (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON))
                Can_au16BaudrateIDConfig[u8ControllerID] = Can_pController->Can_u16DefaultBaudrateID;
            #endif
                /* Reset interrupt level to default value after re-init */
                Can_au8DisableInterruptLevel[u8ControllerID] = 0U;
    5f04:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5f08:	4a22      	ldr	r2, [pc, #136]	; (5f94 <Can_InitControllers+0xe4>)
    5f0a:	2100      	movs	r1, #0
    5f0c:	54d1      	strb	r1, [r2, r3]
            #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
                Can_apxCtrlConfigIcomIndex[u8ControllerID] = NULL_PTR;
            #endif
                /* Init the controller */
                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_Init(Can_pController))
    5f0e:	9802      	ldr	r0, [sp, #8]
    5f10:	f000 ff78 	bl	6e04 <Can_43_FLEXCAN_Ipw_Init>
    5f14:	4603      	mov	r3, r0
    5f16:	2b00      	cmp	r3, #0
    5f18:	d106      	bne.n	5f28 <Can_InitControllers+0x78>
                {
                    Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    5f1a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5f1e:	4a1e      	ldr	r2, [pc, #120]	; (5f98 <Can_InitControllers+0xe8>)
    5f20:	2102      	movs	r1, #2
    5f22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    5f26:	e003      	b.n	5f30 <Can_InitControllers+0x80>
                else
                {
                    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_INIT_FAILED);
                    #endif
                    bCtrlBusy = TRUE;
    5f28:	2301      	movs	r3, #1
    5f2a:	f88d 300f 	strb.w	r3, [sp, #15]
                    break;
    5f2e:	e008      	b.n	5f42 <Can_InitControllers+0x92>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5f30:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5f34:	3301      	adds	r3, #1
    5f36:	f88d 300e 	strb.w	r3, [sp, #14]
    5f3a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5f3e:	2b00      	cmp	r3, #0
    5f40:	d0c5      	beq.n	5ece <Can_InitControllers+0x1e>
    }
    /*
    *  [SWS_Can_00246] After initializing all controllers inside the HW Unit, the function Can_Init
    *   shall change the module state to CAN_READY.
    */
    if (TRUE == bCtrlBusy)
    5f42:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5f46:	2b00      	cmp	r3, #0
    5f48:	d01e      	beq.n	5f88 <Can_InitControllers+0xd8>
    {
        /* Init failed due to one or more controllers failed, reset status of all  core's current controllers */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5f4a:	2300      	movs	r3, #0
    5f4c:	f88d 300e 	strb.w	r3, [sp, #14]
    5f50:	e016      	b.n	5f80 <Can_InitControllers+0xd0>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    5f52:	4a0f      	ldr	r2, [pc, #60]	; (5f90 <Can_InitControllers+0xe0>)
    5f54:	9b01      	ldr	r3, [sp, #4]
    5f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f5a:	695a      	ldr	r2, [r3, #20]
    5f5c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5f60:	009b      	lsls	r3, r3, #2
    5f62:	4413      	add	r3, r2
    5f64:	681b      	ldr	r3, [r3, #0]
    5f66:	2b00      	cmp	r3, #0
    5f68:	d005      	beq.n	5f76 <Can_InitControllers+0xc6>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    5f6a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5f6e:	4a0a      	ldr	r2, [pc, #40]	; (5f98 <Can_InitControllers+0xe8>)
    5f70:	2100      	movs	r1, #0
    5f72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5f76:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5f7a:	3301      	adds	r3, #1
    5f7c:	f88d 300e 	strb.w	r3, [sp, #14]
    5f80:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5f84:	2b00      	cmp	r3, #0
    5f86:	d0e4      	beq.n	5f52 <Can_InitControllers+0xa2>
    else
    {
        Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_READY;
    }
#endif
}
    5f88:	bf00      	nop
    5f8a:	b005      	add	sp, #20
    5f8c:	f85d fb04 	ldr.w	pc, [sp], #4
    5f90:	1fff8cf4 	.word	0x1fff8cf4
    5f94:	1fff8cec 	.word	0x1fff8cec
    5f98:	1fff8cf0 	.word	0x1fff8cf0

00005f9c <Can_DeInitControllers>:
    return bResult;
}
#endif

static void Can_DeInitControllers(uint32 u32CoreId)
{
    5f9c:	b500      	push	{lr}
    5f9e:	b085      	sub	sp, #20
    5fa0:	9001      	str	r0, [sp, #4]
    uint8 u8ControllerID = 0U;
    5fa2:	2300      	movs	r3, #0
    5fa4:	f88d 300f 	strb.w	r3, [sp, #15]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5fa8:	2300      	movs	r3, #0
    5faa:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5fac:	2300      	movs	r3, #0
    5fae:	f88d 300f 	strb.w	r3, [sp, #15]
    5fb2:	e028      	b.n	6006 <Can_DeInitControllers+0x6a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    5fb4:	4a18      	ldr	r2, [pc, #96]	; (6018 <Can_DeInitControllers+0x7c>)
    5fb6:	9b01      	ldr	r3, [sp, #4]
    5fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fbc:	695a      	ldr	r2, [r3, #20]
    5fbe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5fc2:	009b      	lsls	r3, r3, #2
    5fc4:	4413      	add	r3, r2
    5fc6:	681b      	ldr	r3, [r3, #0]
    5fc8:	2b00      	cmp	r3, #0
    5fca:	d017      	beq.n	5ffc <Can_DeInitControllers+0x60>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    5fcc:	4a12      	ldr	r2, [pc, #72]	; (6018 <Can_DeInitControllers+0x7c>)
    5fce:	9b01      	ldr	r3, [sp, #4]
    5fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fd4:	695a      	ldr	r2, [r3, #20]
    5fd6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5fda:	009b      	lsls	r3, r3, #2
    5fdc:	4413      	add	r3, r2
    5fde:	681b      	ldr	r3, [r3, #0]
    5fe0:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    5fe2:	9b02      	ldr	r3, [sp, #8]
    5fe4:	7a1b      	ldrb	r3, [r3, #8]
    5fe6:	2b00      	cmp	r3, #0
    5fe8:	d008      	beq.n	5ffc <Can_DeInitControllers+0x60>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    5fea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5fee:	4a0b      	ldr	r2, [pc, #44]	; (601c <Can_DeInitControllers+0x80>)
    5ff0:	2100      	movs	r1, #0
    5ff2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                Can_43_FLEXCAN_Ipw_DeInit(Can_pController);
    5ff6:	9802      	ldr	r0, [sp, #8]
    5ff8:	f001 f80a 	bl	7010 <Can_43_FLEXCAN_Ipw_DeInit>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5ffc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6000:	3301      	adds	r3, #1
    6002:	f88d 300f 	strb.w	r3, [sp, #15]
    6006:	f89d 300f 	ldrb.w	r3, [sp, #15]
    600a:	2b00      	cmp	r3, #0
    600c:	d0d2      	beq.n	5fb4 <Can_DeInitControllers+0x18>
            }
        }
    }
}
    600e:	bf00      	nop
    6010:	bf00      	nop
    6012:	b005      	add	sp, #20
    6014:	f85d fb04 	ldr.w	pc, [sp], #4
    6018:	1fff8cf4 	.word	0x1fff8cf4
    601c:	1fff8cf0 	.word	0x1fff8cf0

00006020 <Can_43_FLEXCAN_Init>:
* @api
*/

/* implements     Can_Init_Activity */
void Can_43_FLEXCAN_Init(const Can_43_FLEXCAN_ConfigType * Config)
{
    6020:	b500      	push	{lr}
    6022:	b085      	sub	sp, #20
    6024:	9001      	str	r0, [sp, #4]
    uint32 u32CoreId = 0U;
    6026:	2300      	movs	r3, #0
    6028:	9303      	str	r3, [sp, #12]
    boolean bCtrlBusy = FALSE;
    602a:	2300      	movs	r3, #0
    602c:	f88d 300b 	strb.w	r3, [sp, #11]
#if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
    boolean bValidCoreID = FALSE;
#endif

    u32CoreId = Can_GetCoreID();
    6030:	2300      	movs	r3, #0
    6032:	9303      	str	r3, [sp, #12]
        #if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
            if (u32CoreId == Config->Can_u32CoreID)
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Copy pointer to current Can Driver configuration. */
                Can_apxConfig[u32CoreId] = Config;
    6034:	490c      	ldr	r1, [pc, #48]	; (6068 <Can_43_FLEXCAN_Init+0x48>)
    6036:	9b03      	ldr	r3, [sp, #12]
    6038:	9a01      	ldr	r2, [sp, #4]
    603a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (TRUE == bValidCoreID)
            {
#endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Fault Injection point to allow to test SWS_Can_00408 */
                MCAL_FAULT_INJECTION_POINT(CAN_FIP_1_CHANGE_DRIVER_TO_UNINITIALIZED);
                bCtrlBusy = Can_IsControllersBusy(u32CoreId);
    603e:	9803      	ldr	r0, [sp, #12]
    6040:	f7ff ff00 	bl	5e44 <Can_IsControllersBusy>
    6044:	4603      	mov	r3, r0
    6046:	f88d 300b 	strb.w	r3, [sp, #11]
                if (FALSE == bCtrlBusy)
    604a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    604e:	f083 0301 	eor.w	r3, r3, #1
    6052:	b2db      	uxtb	r3, r3
    6054:	2b00      	cmp	r3, #0
    6056:	d002      	beq.n	605e <Can_43_FLEXCAN_Init+0x3e>
                {
                    Can_InitControllers(u32CoreId);
    6058:	9803      	ldr	r0, [sp, #12]
    605a:	f7ff ff29 	bl	5eb0 <Can_InitControllers>

#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif /* (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) */
}
    605e:	bf00      	nop
    6060:	b005      	add	sp, #20
    6062:	f85d fb04 	ldr.w	pc, [sp], #4
    6066:	bf00      	nop
    6068:	1fff8cf4 	.word	0x1fff8cf4

0000606c <Can_43_FLEXCAN_DeInit>:
* @post           Can_DeInit shall de-initialize all the controllers and set the driver in UNINIT state.
*
*/
/* implements     Can_DeInit_Activity */
void Can_43_FLEXCAN_DeInit(void)
{
    606c:	b500      	push	{lr}
    606e:	b083      	sub	sp, #12
    /* Variable for indexing the controllers. */
    uint8 u8ControllerID = 0U;
    6070:	2300      	movs	r3, #0
    6072:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean bCtrlBusy = FALSE;
    6076:	2300      	movs	r3, #0
    6078:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 u32CoreId = 0U;
    607c:	2300      	movs	r3, #0
    607e:	9300      	str	r3, [sp, #0]

    u32CoreId = Can_GetCoreID();
    6080:	2300      	movs	r3, #0
    6082:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Loop through all Can controllers configured based CanControllerId parameter. */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6084:	2300      	movs	r3, #0
    6086:	f88d 3007 	strb.w	r3, [sp, #7]
    608a:	e01b      	b.n	60c4 <Can_43_FLEXCAN_DeInit+0x58>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    608c:	4a19      	ldr	r2, [pc, #100]	; (60f4 <Can_43_FLEXCAN_DeInit+0x88>)
    608e:	9b00      	ldr	r3, [sp, #0]
    6090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6094:	695a      	ldr	r2, [r3, #20]
    6096:	f89d 3007 	ldrb.w	r3, [sp, #7]
    609a:	009b      	lsls	r3, r3, #2
    609c:	4413      	add	r3, r2
    609e:	681b      	ldr	r3, [r3, #0]
    60a0:	2b00      	cmp	r3, #0
    60a2:	d00a      	beq.n	60ba <Can_43_FLEXCAN_DeInit+0x4e>
            {
                if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    60a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    60a8:	4a13      	ldr	r2, [pc, #76]	; (60f8 <Can_43_FLEXCAN_DeInit+0x8c>)
    60aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60ae:	2b01      	cmp	r3, #1
    60b0:	d103      	bne.n	60ba <Can_43_FLEXCAN_DeInit+0x4e>
                    *   if any of the CAN controllers is in state STARTED.
                    */
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_DEINIT, (uint8)CAN_43_FLEXCAN_E_TRANSITION);
                #endif
                    /* Controller is busy */
                    bCtrlBusy =  TRUE;
    60b2:	2301      	movs	r3, #1
    60b4:	f88d 3006 	strb.w	r3, [sp, #6]
                    /* Skipping the loop if any of Can Controller is in state STARTED */
                    break;
    60b8:	e008      	b.n	60cc <Can_43_FLEXCAN_DeInit+0x60>
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    60ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    60be:	3301      	adds	r3, #1
    60c0:	f88d 3007 	strb.w	r3, [sp, #7]
    60c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    60c8:	2b00      	cmp	r3, #0
    60ca:	d0df      	beq.n	608c <Can_43_FLEXCAN_DeInit+0x20>
                }
            }
        }
        /* All Controllers are not busy */
        if (FALSE == bCtrlBusy)
    60cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    60d0:	f083 0301 	eor.w	r3, r3, #1
    60d4:	b2db      	uxtb	r3, r3
    60d6:	2b00      	cmp	r3, #0
    60d8:	d007      	beq.n	60ea <Can_43_FLEXCAN_DeInit+0x7e>
            *   [SWS_Can_91010] The function Can_DeInit shall change the module state to
            *   CAN_UNINIT before de-initializing all controllers inside the HW unit
            */
            Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_UNINIT;
        #endif
            Can_DeInitControllers(u32CoreId);
    60da:	9800      	ldr	r0, [sp, #0]
    60dc:	f7ff ff5e 	bl	5f9c <Can_DeInitControllers>
            Can_apxConfig[u32CoreId] = NULL_PTR;
    60e0:	4a04      	ldr	r2, [pc, #16]	; (60f4 <Can_43_FLEXCAN_DeInit+0x88>)
    60e2:	9b00      	ldr	r3, [sp, #0]
    60e4:	2100      	movs	r1, #0
    60e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
}
    60ea:	bf00      	nop
    60ec:	b003      	add	sp, #12
    60ee:	f85d fb04 	ldr.w	pc, [sp], #4
    60f2:	bf00      	nop
    60f4:	1fff8cf4 	.word	0x1fff8cf4
    60f8:	1fff8cf0 	.word	0x1fff8cf0

000060fc <Can_43_FLEXCAN_SetControllerMode>:
*
* @api
*/
/* implements     Can_SetControllerMode_Activity */
Std_ReturnType Can_43_FLEXCAN_SetControllerMode(uint8 Controller, Can_ControllerStateType Transition)
{
    60fc:	b500      	push	{lr}
    60fe:	b087      	sub	sp, #28
    6100:	4603      	mov	r3, r0
    6102:	9100      	str	r1, [sp, #0]
    6104:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    6108:	2301      	movs	r3, #1
    610a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    610e:	2300      	movs	r3, #0
    6110:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6112:	2300      	movs	r3, #0
    6114:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    6116:	2300      	movs	r3, #0
    6118:	9304      	str	r3, [sp, #16]
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE))
    {
#endif
                Can_pController = (const Can_43_FLEXCAN_ControllerConfigType *)(Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    611a:	4a47      	ldr	r2, [pc, #284]	; (6238 <Can_43_FLEXCAN_SetControllerMode+0x13c>)
    611c:	9b04      	ldr	r3, [sp, #16]
    611e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6122:	695a      	ldr	r2, [r3, #20]
    6124:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6128:	009b      	lsls	r3, r3, #2
    612a:	4413      	add	r3, r2
    612c:	681b      	ldr	r3, [r3, #0]
    612e:	9303      	str	r3, [sp, #12]
                /*
                *   [SWS_Can_00017] The function Can_SetControllerMode shall perform software
                *   triggered state transitions of the CAN controller State machine.
                */
                switch (Transition)
    6130:	9b00      	ldr	r3, [sp, #0]
    6132:	2b03      	cmp	r3, #3
    6134:	d05d      	beq.n	61f2 <Can_43_FLEXCAN_SetControllerMode+0xf6>
    6136:	9b00      	ldr	r3, [sp, #0]
    6138:	2b03      	cmp	r3, #3
    613a:	d874      	bhi.n	6226 <Can_43_FLEXCAN_SetControllerMode+0x12a>
    613c:	9b00      	ldr	r3, [sp, #0]
    613e:	2b01      	cmp	r3, #1
    6140:	d003      	beq.n	614a <Can_43_FLEXCAN_SetControllerMode+0x4e>
    6142:	9b00      	ldr	r3, [sp, #0]
    6144:	2b02      	cmp	r3, #2
    6146:	d01d      	beq.n	6184 <Can_43_FLEXCAN_SetControllerMode+0x88>
                        *   has been requested, the function Can_SetControllerMode shall raise the error CAN_E_TRANSITION and
                        *   return E_NOT_OK
                        */
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_TRANSITION);
                    #endif
                        break;
    6148:	e06d      	b.n	6226 <Can_43_FLEXCAN_SetControllerMode+0x12a>
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    614a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    614e:	4a3b      	ldr	r2, [pc, #236]	; (623c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6154:	2b02      	cmp	r3, #2
    6156:	d168      	bne.n	622a <Can_43_FLEXCAN_SetControllerMode+0x12e>
                            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStartMode(Can_pController))
    6158:	9803      	ldr	r0, [sp, #12]
    615a:	f000 ff93 	bl	7084 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>
    615e:	4603      	mov	r3, r0
    6160:	2b00      	cmp	r3, #0
    6162:	d162      	bne.n	622a <Can_43_FLEXCAN_SetControllerMode+0x12e>
                                Can_eControllerState[Controller] = CAN_CS_STARTED;
    6164:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6168:	4a34      	ldr	r2, [pc, #208]	; (623c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    616a:	2101      	movs	r1, #1
    616c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STARTED);
    6170:	9b03      	ldr	r3, [sp, #12]
    6172:	781b      	ldrb	r3, [r3, #0]
    6174:	2101      	movs	r1, #1
    6176:	4618      	mov	r0, r3
    6178:	f007 ff9a 	bl	e0b0 <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    617c:	2300      	movs	r3, #0
    617e:	f88d 3017 	strb.w	r3, [sp, #23]
                        break;
    6182:	e052      	b.n	622a <Can_43_FLEXCAN_SetControllerMode+0x12e>
                        switch (Can_eControllerState[Controller])
    6184:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6188:	4a2c      	ldr	r2, [pc, #176]	; (623c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    618a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    618e:	2b01      	cmp	r3, #1
    6190:	d005      	beq.n	619e <Can_43_FLEXCAN_SetControllerMode+0xa2>
    6192:	2b00      	cmp	r3, #0
    6194:	d029      	beq.n	61ea <Can_43_FLEXCAN_SetControllerMode+0xee>
    6196:	3b02      	subs	r3, #2
    6198:	2b01      	cmp	r3, #1
    619a:	d826      	bhi.n	61ea <Can_43_FLEXCAN_SetControllerMode+0xee>
    619c:	e015      	b.n	61ca <Can_43_FLEXCAN_SetControllerMode+0xce>
                                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    619e:	9803      	ldr	r0, [sp, #12]
    61a0:	f000 ffde 	bl	7160 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    61a4:	4603      	mov	r3, r0
    61a6:	2b00      	cmp	r3, #0
    61a8:	d121      	bne.n	61ee <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                    Can_eControllerState[Controller] = CAN_CS_STOPPED;
    61aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    61ae:	4a23      	ldr	r2, [pc, #140]	; (623c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    61b0:	2102      	movs	r1, #2
    61b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                    CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    61b6:	9b03      	ldr	r3, [sp, #12]
    61b8:	781b      	ldrb	r3, [r3, #0]
    61ba:	2102      	movs	r1, #2
    61bc:	4618      	mov	r0, r3
    61be:	f007 ff77 	bl	e0b0 <CanIf_ControllerModeIndication>
                                    eRetVal = E_OK;
    61c2:	2300      	movs	r3, #0
    61c4:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    61c8:	e011      	b.n	61ee <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                Can_eControllerState[Controller] = CAN_CS_STOPPED;
    61ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    61ce:	4a1b      	ldr	r2, [pc, #108]	; (623c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    61d0:	2102      	movs	r1, #2
    61d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    61d6:	9b03      	ldr	r3, [sp, #12]
    61d8:	781b      	ldrb	r3, [r3, #0]
    61da:	2102      	movs	r1, #2
    61dc:	4618      	mov	r0, r3
    61de:	f007 ff67 	bl	e0b0 <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    61e2:	2300      	movs	r3, #0
    61e4:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    61e8:	e002      	b.n	61f0 <Can_43_FLEXCAN_SetControllerMode+0xf4>
                                break;
    61ea:	bf00      	nop
    61ec:	e01e      	b.n	622c <Can_43_FLEXCAN_SetControllerMode+0x130>
                                break;
    61ee:	bf00      	nop
                        break;
    61f0:	e01c      	b.n	622c <Can_43_FLEXCAN_SetControllerMode+0x130>
                        switch (Can_eControllerState[Controller])
    61f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    61f6:	4a11      	ldr	r2, [pc, #68]	; (623c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    61f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61fc:	3b02      	subs	r3, #2
    61fe:	2b01      	cmp	r3, #1
    6200:	d80f      	bhi.n	6222 <Can_43_FLEXCAN_SetControllerMode+0x126>
                                Can_eControllerState[Controller] = CAN_CS_SLEEP;
    6202:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6206:	4a0d      	ldr	r2, [pc, #52]	; (623c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6208:	2103      	movs	r1, #3
    620a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_SLEEP);
    620e:	9b03      	ldr	r3, [sp, #12]
    6210:	781b      	ldrb	r3, [r3, #0]
    6212:	2103      	movs	r1, #3
    6214:	4618      	mov	r0, r3
    6216:	f007 ff4b 	bl	e0b0 <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    621a:	2300      	movs	r3, #0
    621c:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    6220:	e000      	b.n	6224 <Can_43_FLEXCAN_SetControllerMode+0x128>
                                break;
    6222:	bf00      	nop
                        break;
    6224:	e002      	b.n	622c <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    6226:	bf00      	nop
    6228:	e000      	b.n	622c <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    622a:	bf00      	nop
                    }
                }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eRetVal;
    622c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6230:	4618      	mov	r0, r3
    6232:	b007      	add	sp, #28
    6234:	f85d fb04 	ldr.w	pc, [sp], #4
    6238:	1fff8cf4 	.word	0x1fff8cf4
    623c:	1fff8cf0 	.word	0x1fff8cf0

00006240 <Can_43_FLEXCAN_DisableControllerInterrupts>:
*
* @api
*/
/* implements     Can_DisableControllerInterrupts_Activity */
void Can_43_FLEXCAN_DisableControllerInterrupts(uint8 Controller)
{
    6240:	b500      	push	{lr}
    6242:	b085      	sub	sp, #20
    6244:	4603      	mov	r3, r0
    6246:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    624a:	2300      	movs	r3, #0
    624c:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    624e:	2300      	movs	r3, #0
    6250:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    6252:	2300      	movs	r3, #0
    6254:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    6256:	4a10      	ldr	r2, [pc, #64]	; (6298 <Can_43_FLEXCAN_DisableControllerInterrupts+0x58>)
    6258:	9b03      	ldr	r3, [sp, #12]
    625a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    625e:	695a      	ldr	r2, [r3, #20]
    6260:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6264:	009b      	lsls	r3, r3, #2
    6266:	4413      	add	r3, r2
    6268:	681b      	ldr	r3, [r3, #0]
    626a:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    626c:	f005 fca4 	bl	bbb8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_au8DisableInterruptLevel[Controller] += 1U;
    6270:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6274:	4a09      	ldr	r2, [pc, #36]	; (629c <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    6276:	5cd2      	ldrb	r2, [r2, r3]
    6278:	f89d 3007 	ldrb.w	r3, [sp, #7]
    627c:	3201      	adds	r2, #1
    627e:	b2d1      	uxtb	r1, r2
    6280:	4a06      	ldr	r2, [pc, #24]	; (629c <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    6282:	54d1      	strb	r1, [r2, r3]
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    6284:	f005 fcc4 	bl	bc10 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(Can_pController);
    6288:	9802      	ldr	r0, [sp, #8]
    628a:	f000 ffe7 	bl	725c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    628e:	bf00      	nop
    6290:	b005      	add	sp, #20
    6292:	f85d fb04 	ldr.w	pc, [sp], #4
    6296:	bf00      	nop
    6298:	1fff8cf4 	.word	0x1fff8cf4
    629c:	1fff8cec 	.word	0x1fff8cec

000062a0 <Can_43_FLEXCAN_EnableControllerInterrupts>:
*
* @api
*/
/* implements     Can_EnableControllerInterrupts_Activity */
void Can_43_FLEXCAN_EnableControllerInterrupts(uint8 Controller)
{
    62a0:	b500      	push	{lr}
    62a2:	b085      	sub	sp, #20
    62a4:	4603      	mov	r3, r0
    62a6:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    62aa:	2300      	movs	r3, #0
    62ac:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    62ae:	2300      	movs	r3, #0
    62b0:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    62b2:	2300      	movs	r3, #0
    62b4:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    62b6:	4a16      	ldr	r2, [pc, #88]	; (6310 <Can_43_FLEXCAN_EnableControllerInterrupts+0x70>)
    62b8:	9b03      	ldr	r3, [sp, #12]
    62ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62be:	695a      	ldr	r2, [r3, #20]
    62c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62c4:	009b      	lsls	r3, r3, #2
    62c6:	4413      	add	r3, r2
    62c8:	681b      	ldr	r3, [r3, #0]
    62ca:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    62cc:	f005 fcc6 	bl	bc5c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>
                if (Can_au8DisableInterruptLevel[Controller] > 0U)
    62d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62d4:	4a0f      	ldr	r2, [pc, #60]	; (6314 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    62d6:	5cd3      	ldrb	r3, [r2, r3]
    62d8:	2b00      	cmp	r3, #0
    62da:	d009      	beq.n	62f0 <Can_43_FLEXCAN_EnableControllerInterrupts+0x50>
                {
                    Can_au8DisableInterruptLevel[Controller] -= 1U;
    62dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62e0:	4a0c      	ldr	r2, [pc, #48]	; (6314 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    62e2:	5cd2      	ldrb	r2, [r2, r3]
    62e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62e8:	3a01      	subs	r2, #1
    62ea:	b2d1      	uxtb	r1, r2
    62ec:	4a09      	ldr	r2, [pc, #36]	; (6314 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    62ee:	54d1      	strb	r1, [r2, r3]
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    62f0:	f005 fce0 	bl	bcb4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>

                if (0U == Can_au8DisableInterruptLevel[Controller])
    62f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62f8:	4a06      	ldr	r2, [pc, #24]	; (6314 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    62fa:	5cd3      	ldrb	r3, [r2, r3]
    62fc:	2b00      	cmp	r3, #0
    62fe:	d102      	bne.n	6306 <Can_43_FLEXCAN_EnableControllerInterrupts+0x66>
                {
                    Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(Can_pController);
    6300:	9802      	ldr	r0, [sp, #8]
    6302:	f000 ffd5 	bl	72b0 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    6306:	bf00      	nop
    6308:	b005      	add	sp, #20
    630a:	f85d fb04 	ldr.w	pc, [sp], #4
    630e:	bf00      	nop
    6310:	1fff8cf4 	.word	0x1fff8cf4
    6314:	1fff8cec 	.word	0x1fff8cec

00006318 <Can_43_FLEXCAN_GetControllerErrorState>:
Std_ReturnType Can_43_FLEXCAN_GetControllerErrorState
(
    uint8 ControllerId,
    Can_ErrorStateType * ErrorStatePtr
)
{
    6318:	b500      	push	{lr}
    631a:	b087      	sub	sp, #28
    631c:	4603      	mov	r3, r0
    631e:	9100      	str	r1, [sp, #0]
    6320:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    6324:	2301      	movs	r3, #1
    6326:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 errorState = 0U;
    632a:	2300      	movs	r3, #0
    632c:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 u32CoreId = 0U;
    6330:	2300      	movs	r3, #0
    6332:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6334:	2300      	movs	r3, #0
    6336:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    6338:	2300      	movs	r3, #0
    633a:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_ERROR_STATE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    633c:	4a18      	ldr	r2, [pc, #96]	; (63a0 <Can_43_FLEXCAN_GetControllerErrorState+0x88>)
    633e:	9b04      	ldr	r3, [sp, #16]
    6340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6344:	695a      	ldr	r2, [r3, #20]
    6346:	f89d 3007 	ldrb.w	r3, [sp, #7]
    634a:	009b      	lsls	r3, r3, #2
    634c:	4413      	add	r3, r2
    634e:	681b      	ldr	r3, [r3, #0]
    6350:	9303      	str	r3, [sp, #12]
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerErrorState(Can_pController, &errorState);
    6352:	f10d 030b 	add.w	r3, sp, #11
    6356:	4619      	mov	r1, r3
    6358:	9803      	ldr	r0, [sp, #12]
    635a:	f000 ffd5 	bl	7308 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>
    635e:	4603      	mov	r3, r0
    6360:	f88d 3017 	strb.w	r3, [sp, #23]
                    if(eRetVal == (Std_ReturnType)E_OK)
    6364:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6368:	2b00      	cmp	r3, #0
    636a:	d112      	bne.n	6392 <Can_43_FLEXCAN_GetControllerErrorState+0x7a>
                    {
                        switch (errorState)
    636c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6370:	2b00      	cmp	r3, #0
    6372:	d002      	beq.n	637a <Can_43_FLEXCAN_GetControllerErrorState+0x62>
    6374:	2b01      	cmp	r3, #1
    6376:	d004      	beq.n	6382 <Can_43_FLEXCAN_GetControllerErrorState+0x6a>
    6378:	e007      	b.n	638a <Can_43_FLEXCAN_GetControllerErrorState+0x72>
                        {
                            case 0x00U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_ACTIVE;
    637a:	9b00      	ldr	r3, [sp, #0]
    637c:	2200      	movs	r2, #0
    637e:	601a      	str	r2, [r3, #0]
                                break;
    6380:	e008      	b.n	6394 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            case 0x01U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_PASSIVE;
    6382:	9b00      	ldr	r3, [sp, #0]
    6384:	2201      	movs	r2, #1
    6386:	601a      	str	r2, [r3, #0]
                                break;
    6388:	e004      	b.n	6394 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            default:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_BUSOFF;
    638a:	9b00      	ldr	r3, [sp, #0]
    638c:	2202      	movs	r2, #2
    638e:	601a      	str	r2, [r3, #0]
                                break;
    6390:	e000      	b.n	6394 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                        }
                    }
    6392:	bf00      	nop
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                }
    }
#endif
    return eRetVal;
    6394:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6398:	4618      	mov	r0, r3
    639a:	b007      	add	sp, #28
    639c:	f85d fb04 	ldr.w	pc, [sp], #4
    63a0:	1fff8cf4 	.word	0x1fff8cf4

000063a4 <Can_43_FLEXCAN_GetControllerMode>:
Std_ReturnType Can_43_FLEXCAN_GetControllerMode
(
    uint8 Controller,
    Can_ControllerStateType * ControllerModePtr
)
{
    63a4:	b084      	sub	sp, #16
    63a6:	4603      	mov	r3, r0
    63a8:	9100      	str	r1, [sp, #0]
    63aa:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    63ae:	2301      	movs	r3, #1
    63b0:	f88d 300f 	strb.w	r3, [sp, #15]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    *ControllerModePtr = Can_eControllerState[Controller];
    63b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    63b8:	4a06      	ldr	r2, [pc, #24]	; (63d4 <Can_43_FLEXCAN_GetControllerMode+0x30>)
    63ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    63be:	9b00      	ldr	r3, [sp, #0]
    63c0:	601a      	str	r2, [r3, #0]
                    eRetVal = E_OK;
    63c2:	2300      	movs	r3, #0
    63c4:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    63c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    63cc:	4618      	mov	r0, r3
    63ce:	b004      	add	sp, #16
    63d0:	4770      	bx	lr
    63d2:	bf00      	nop
    63d4:	1fff8cf0 	.word	0x1fff8cf0

000063d8 <Can_43_FLEXCAN_GetControllerRxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerRxErrorCounter
(
    uint8 ControllerId,
    uint8 * RxErrorCounterPtr
)
{
    63d8:	b500      	push	{lr}
    63da:	b087      	sub	sp, #28
    63dc:	4603      	mov	r3, r0
    63de:	9100      	str	r1, [sp, #0]
    63e0:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    63e4:	2301      	movs	r3, #1
    63e6:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    63ea:	2300      	movs	r3, #0
    63ec:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    63ee:	2300      	movs	r3, #0
    63f0:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    63f2:	2300      	movs	r3, #0
    63f4:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_RX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    63f6:	4a0c      	ldr	r2, [pc, #48]	; (6428 <Can_43_FLEXCAN_GetControllerRxErrorCounter+0x50>)
    63f8:	9b04      	ldr	r3, [sp, #16]
    63fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63fe:	695a      	ldr	r2, [r3, #20]
    6400:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6404:	009b      	lsls	r3, r3, #2
    6406:	4413      	add	r3, r2
    6408:	681b      	ldr	r3, [r3, #0]
    640a:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00515]: When the API Can_GetControllerRxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Rx error counter
                    *   register of Can Controller and shall return the Rx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(Can_pController, RxErrorCounterPtr);
    640c:	9900      	ldr	r1, [sp, #0]
    640e:	9803      	ldr	r0, [sp, #12]
    6410:	f000 ffa5 	bl	735e <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>
    6414:	4603      	mov	r3, r0
    6416:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    641a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    641e:	4618      	mov	r0, r3
    6420:	b007      	add	sp, #28
    6422:	f85d fb04 	ldr.w	pc, [sp], #4
    6426:	bf00      	nop
    6428:	1fff8cf4 	.word	0x1fff8cf4

0000642c <Can_43_FLEXCAN_GetControllerTxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerTxErrorCounter
(
    uint8 ControllerId,
    uint8 * TxErrorCounterPtr
)
{
    642c:	b500      	push	{lr}
    642e:	b087      	sub	sp, #28
    6430:	4603      	mov	r3, r0
    6432:	9100      	str	r1, [sp, #0]
    6434:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    6438:	2301      	movs	r3, #1
    643a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    643e:	2300      	movs	r3, #0
    6440:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6442:	2300      	movs	r3, #0
    6444:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    6446:	2300      	movs	r3, #0
    6448:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_TX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    644a:	4a0c      	ldr	r2, [pc, #48]	; (647c <Can_43_FLEXCAN_GetControllerTxErrorCounter+0x50>)
    644c:	9b04      	ldr	r3, [sp, #16]
    644e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6452:	695a      	ldr	r2, [r3, #20]
    6454:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6458:	009b      	lsls	r3, r3, #2
    645a:	4413      	add	r3, r2
    645c:	681b      	ldr	r3, [r3, #0]
    645e:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00520]: When the API Can_GetControllerTxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Tx error counter
                    *   register of Can Controller and shall return the Tx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(Can_pController, TxErrorCounterPtr);
    6460:	9900      	ldr	r1, [sp, #0]
    6462:	9803      	ldr	r0, [sp, #12]
    6464:	f000 ff69 	bl	733a <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>
    6468:	4603      	mov	r3, r0
    646a:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    646e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6472:	4618      	mov	r0, r3
    6474:	b007      	add	sp, #28
    6476:	f85d fb04 	ldr.w	pc, [sp], #4
    647a:	bf00      	nop
    647c:	1fff8cf4 	.word	0x1fff8cf4

00006480 <Can_43_FLEXCAN_Write>:
Std_ReturnType Can_43_FLEXCAN_Write
(
    Can_HwHandleType Hth,
    const Can_PduType * PduInfo
)
{
    6480:	b500      	push	{lr}
    6482:	b089      	sub	sp, #36	; 0x24
    6484:	4603      	mov	r3, r0
    6486:	9100      	str	r1, [sp, #0]
    6488:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType eRetVal = E_NOT_OK;
    648c:	2301      	movs	r3, #1
    648e:	f88d 301f 	strb.w	r3, [sp, #31]
    uint8 u8ControllerID = 0U;
    6492:	2300      	movs	r3, #0
    6494:	f88d 301e 	strb.w	r3, [sp, #30]
    uint32 u32CoreId = 0U;
    6498:	2300      	movs	r3, #0
    649a:	9306      	str	r3, [sp, #24]
    Can_HwHandleType HwObjectID = 0U;
    649c:	2300      	movs	r3, #0
    649e:	f8ad 3016 	strh.w	r3, [sp, #22]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    64a2:	2300      	movs	r3, #0
    64a4:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    64a6:	2300      	movs	r3, #0
    64a8:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    64aa:	2300      	movs	r3, #0
    64ac:	9306      	str	r3, [sp, #24]
    HwObjectID = Hth;
    64ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    64b2:	f8ad 3016 	strh.w	r3, [sp, #22]
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_WRITE, CAN_43_FLEXCAN_E_PARAM_POINTER);
            }
            else
            {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pHwObjIDToCtrlIDMap[HwObjectID];
    64b6:	4a1d      	ldr	r2, [pc, #116]	; (652c <Can_43_FLEXCAN_Write+0xac>)
    64b8:	9b06      	ldr	r3, [sp, #24]
    64ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64be:	68da      	ldr	r2, [r3, #12]
    64c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64c4:	4413      	add	r3, r2
    64c6:	781b      	ldrb	r3, [r3, #0]
    64c8:	f88d 301e 	strb.w	r3, [sp, #30]
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    64cc:	4a17      	ldr	r2, [pc, #92]	; (652c <Can_43_FLEXCAN_Write+0xac>)
    64ce:	9b06      	ldr	r3, [sp, #24]
    64d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64d4:	695a      	ldr	r2, [r3, #20]
    64d6:	f89d 301e 	ldrb.w	r3, [sp, #30]
    64da:	009b      	lsls	r3, r3, #2
    64dc:	4413      	add	r3, r2
    64de:	681b      	ldr	r3, [r3, #0]
    64e0:	9304      	str	r3, [sp, #16]
                if (NULL_PTR != Can_pController)
    64e2:	9b04      	ldr	r3, [sp, #16]
    64e4:	2b00      	cmp	r3, #0
    64e6:	d01b      	beq.n	6520 <Can_43_FLEXCAN_Write+0xa0>
                {
                    Can_pHwObject = &((Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID]);
    64e8:	4a10      	ldr	r2, [pc, #64]	; (652c <Can_43_FLEXCAN_Write+0xac>)
    64ea:	9b06      	ldr	r3, [sp, #24]
    64ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64f0:	6919      	ldr	r1, [r3, #16]
    64f2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    64f6:	4613      	mov	r3, r2
    64f8:	00db      	lsls	r3, r3, #3
    64fa:	4413      	add	r3, r2
    64fc:	009b      	lsls	r3, r3, #2
    64fe:	440b      	add	r3, r1
    6500:	9303      	str	r3, [sp, #12]
                #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    if ((TRUE == Can_ValidatePdu(Can_pController, Can_pHwObject, PduInfo)) && (CAN_CS_STARTED == Can_eControllerState[u8ControllerID]))
                #else
                    /* avoid unexpected behaviour when accessing to RAM */
                    if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    6502:	f89d 301e 	ldrb.w	r3, [sp, #30]
    6506:	4a0a      	ldr	r2, [pc, #40]	; (6530 <Can_43_FLEXCAN_Write+0xb0>)
    6508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    650c:	2b01      	cmp	r3, #1
    650e:	d107      	bne.n	6520 <Can_43_FLEXCAN_Write+0xa0>
                            eRetVal = CAN_BUSY;
                        }
                        else
                        {
                    #endif
                            eRetVal = Can_43_FLEXCAN_Ipw_Write(Can_pController, Can_pHwObject, PduInfo);
    6510:	9a00      	ldr	r2, [sp, #0]
    6512:	9903      	ldr	r1, [sp, #12]
    6514:	9804      	ldr	r0, [sp, #16]
    6516:	f000 ff34 	bl	7382 <Can_43_FLEXCAN_Ipw_Write>
    651a:	4603      	mov	r3, r0
    651c:	f88d 301f 	strb.w	r3, [sp, #31]
                }
            #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
            }
    }
#endif
    return eRetVal;
    6520:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    6524:	4618      	mov	r0, r3
    6526:	b009      	add	sp, #36	; 0x24
    6528:	f85d fb04 	ldr.w	pc, [sp], #4
    652c:	1fff8cf4 	.word	0x1fff8cf4
    6530:	1fff8cf0 	.word	0x1fff8cf0

00006534 <Can_43_FLEXCAN_MainFunction_Write>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON */
    }
    6534:	bf00      	nop
    6536:	4770      	bx	lr

00006538 <Can_43_FLEXCAN_MainFunction_Read>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON */
    }
    6538:	bf00      	nop
    653a:	4770      	bx	lr

0000653c <Can_43_FLEXCAN_MainFunction_BusOff>:
            }
            u8ControllerID++;
        }
    }
#endif /* CAN_43_FLEXCAN_BUSOFF_POLLING_SUPPORT == STD_ON */
}
    653c:	bf00      	nop
    653e:	4770      	bx	lr

00006540 <Can_43_FLEXCAN_MainFunction_Mode>:
*
* @api
*/
/* implements     Can_MainFunction_Mode_Activity */
void Can_43_FLEXCAN_MainFunction_Mode(void)
{
    6540:	b500      	push	{lr}
    6542:	b085      	sub	sp, #20
    uint8 u8ControllerID = 0U;
    6544:	2300      	movs	r3, #0
    6546:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32CoreId = 0U;
    654a:	2300      	movs	r3, #0
    654c:	9302      	str	r3, [sp, #8]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    654e:	2300      	movs	r3, #0
    6550:	9301      	str	r3, [sp, #4]

    u32CoreId = Can_GetCoreID();
    6552:	2300      	movs	r3, #0
    6554:	9302      	str	r3, [sp, #8]
    if (NULL_PTR != (Can_apxConfig[u32CoreId]))
    6556:	4a17      	ldr	r2, [pc, #92]	; (65b4 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    6558:	9b02      	ldr	r3, [sp, #8]
    655a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    655e:	2b00      	cmp	r3, #0
    6560:	d024      	beq.n	65ac <Can_43_FLEXCAN_MainFunction_Mode+0x6c>
    {
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    6562:	e01f      	b.n	65a4 <Can_43_FLEXCAN_MainFunction_Mode+0x64>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    6564:	4a13      	ldr	r2, [pc, #76]	; (65b4 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    6566:	9b02      	ldr	r3, [sp, #8]
    6568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    656c:	695a      	ldr	r2, [r3, #20]
    656e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6572:	009b      	lsls	r3, r3, #2
    6574:	4413      	add	r3, r2
    6576:	681b      	ldr	r3, [r3, #0]
    6578:	9301      	str	r3, [sp, #4]
            if (NULL_PTR != Can_pController)
    657a:	9b01      	ldr	r3, [sp, #4]
    657c:	2b00      	cmp	r3, #0
    657e:	d00c      	beq.n	659a <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
            {
                if (TRUE == Can_pController->Can_bActivation)
    6580:	9b01      	ldr	r3, [sp, #4]
    6582:	7a1b      	ldrb	r3, [r3, #8]
    6584:	2b00      	cmp	r3, #0
    6586:	d008      	beq.n	659a <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
                {
                    Can_43_FLEXCAN_Ipw_MainFunction_Mode(Can_pController, &Can_eControllerState[u8ControllerID]);
    6588:	f89d 300f 	ldrb.w	r3, [sp, #15]
    658c:	009b      	lsls	r3, r3, #2
    658e:	4a0a      	ldr	r2, [pc, #40]	; (65b8 <Can_43_FLEXCAN_MainFunction_Mode+0x78>)
    6590:	4413      	add	r3, r2
    6592:	4619      	mov	r1, r3
    6594:	9801      	ldr	r0, [sp, #4]
    6596:	f000 fff4 	bl	7582 <Can_43_FLEXCAN_Ipw_MainFunction_Mode>
                }
            }
            u8ControllerID++;
    659a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    659e:	3301      	adds	r3, #1
    65a0:	f88d 300f 	strb.w	r3, [sp, #15]
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    65a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    65a8:	2b00      	cmp	r3, #0
    65aa:	d0db      	beq.n	6564 <Can_43_FLEXCAN_MainFunction_Mode+0x24>
        }
    }
}
    65ac:	bf00      	nop
    65ae:	b005      	add	sp, #20
    65b0:	f85d fb04 	ldr.w	pc, [sp], #4
    65b4:	1fff8cf4 	.word	0x1fff8cf4
    65b8:	1fff8cf0 	.word	0x1fff8cf0

000065bc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>:
(
    uint8 u8CtrlOffset,
    uint8 u8MbIdx,
    Can_43_FLEXCAN_MbType mbType
)
{
    65bc:	b500      	push	{lr}
    65be:	b087      	sub	sp, #28
    65c0:	4603      	mov	r3, r0
    65c2:	9200      	str	r2, [sp, #0]
    65c4:	f88d 3007 	strb.w	r3, [sp, #7]
    65c8:	460b      	mov	r3, r1
    65ca:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 u8ControllerID = 0U;
    65ce:	2300      	movs	r3, #0
    65d0:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    65d4:	2300      	movs	r3, #0
    65d6:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    65d8:	2300      	movs	r3, #0
    65da:	9303      	str	r3, [sp, #12]

    MCAL_FAULT_INJECTION_POINT(CAN_FIP_2_CHANGE_DRIVER_TO_UNINITIALIZED);
    u32CoreId = Can_GetCoreID();
    65dc:	2300      	movs	r3, #0
    65de:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    65e0:	4a16      	ldr	r2, [pc, #88]	; (663c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    65e2:	9b04      	ldr	r3, [sp, #16]
    65e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65e8:	2b00      	cmp	r3, #0
    65ea:	d022      	beq.n	6632 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    65ec:	4a13      	ldr	r2, [pc, #76]	; (663c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    65ee:	9b04      	ldr	r3, [sp, #16]
    65f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65f4:	689a      	ldr	r2, [r3, #8]
    65f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65fa:	4413      	add	r3, r2
    65fc:	781b      	ldrb	r3, [r3, #0]
    65fe:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    6602:	4a0e      	ldr	r2, [pc, #56]	; (663c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    6604:	9b04      	ldr	r3, [sp, #16]
    6606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    660a:	695a      	ldr	r2, [r3, #20]
    660c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6610:	009b      	lsls	r3, r3, #2
    6612:	4413      	add	r3, r2
    6614:	681b      	ldr	r3, [r3, #0]
    6616:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    6618:	9b03      	ldr	r3, [sp, #12]
    661a:	2b00      	cmp	r3, #0
    661c:	d009      	beq.n	6632 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
        {
            Can_43_FLEXCAN_Ipw_ProcessHwObject(Can_pController, (Can_apxConfig[u32CoreId]), u8MbIdx, mbType);
    661e:	4a07      	ldr	r2, [pc, #28]	; (663c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    6620:	9b04      	ldr	r3, [sp, #16]
    6622:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    6626:	f89d 2006 	ldrb.w	r2, [sp, #6]
    662a:	9b00      	ldr	r3, [sp, #0]
    662c:	9803      	ldr	r0, [sp, #12]
    662e:	f000 ffde 	bl	75ee <Can_43_FLEXCAN_Ipw_ProcessHwObject>
        }

    }
}
    6632:	bf00      	nop
    6634:	b007      	add	sp, #28
    6636:	f85d fb04 	ldr.w	pc, [sp], #4
    663a:	bf00      	nop
    663c:	1fff8cf4 	.word	0x1fff8cf4

00006640 <Can_43_FLEXCAN_ProcessBusOffInterrupt>:
*/
void Can_43_FLEXCAN_ProcessBusOffInterrupt
(
    uint8 u8CtrlOffset
)
{
    6640:	b500      	push	{lr}
    6642:	b087      	sub	sp, #28
    6644:	4603      	mov	r3, r0
    6646:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 u8ControllerID = 0U;
    664a:	2300      	movs	r3, #0
    664c:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    6650:	2300      	movs	r3, #0
    6652:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6654:	2300      	movs	r3, #0
    6656:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    6658:	2300      	movs	r3, #0
    665a:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    665c:	4a19      	ldr	r2, [pc, #100]	; (66c4 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    665e:	9b04      	ldr	r3, [sp, #16]
    6660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6664:	2b00      	cmp	r3, #0
    6666:	d029      	beq.n	66bc <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    6668:	4a16      	ldr	r2, [pc, #88]	; (66c4 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    666a:	9b04      	ldr	r3, [sp, #16]
    666c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6670:	689a      	ldr	r2, [r3, #8]
    6672:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6676:	4413      	add	r3, r2
    6678:	781b      	ldrb	r3, [r3, #0]
    667a:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    667e:	4a11      	ldr	r2, [pc, #68]	; (66c4 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    6680:	9b04      	ldr	r3, [sp, #16]
    6682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6686:	695a      	ldr	r2, [r3, #20]
    6688:	f89d 3017 	ldrb.w	r3, [sp, #23]
    668c:	009b      	lsls	r3, r3, #2
    668e:	4413      	add	r3, r2
    6690:	681b      	ldr	r3, [r3, #0]
    6692:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    6694:	9b03      	ldr	r3, [sp, #12]
    6696:	2b00      	cmp	r3, #0
    6698:	d010      	beq.n	66bc <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
        {
            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    669a:	9803      	ldr	r0, [sp, #12]
    669c:	f000 fd60 	bl	7160 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    66a0:	4603      	mov	r3, r0
    66a2:	2b00      	cmp	r3, #0
    66a4:	d10a      	bne.n	66bc <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    66a6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    66aa:	4a07      	ldr	r2, [pc, #28]	; (66c8 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x88>)
    66ac:	2102      	movs	r1, #2
    66ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                CanIf_ControllerBusOff(Can_pController->Can_u8AbstControllerID);
    66b2:	9b03      	ldr	r3, [sp, #12]
    66b4:	781b      	ldrb	r3, [r3, #0]
    66b6:	4618      	mov	r0, r3
    66b8:	f007 fd02 	bl	e0c0 <CanIf_ControllerBusOff>
            }
        }
    }
}
    66bc:	bf00      	nop
    66be:	b007      	add	sp, #28
    66c0:	f85d fb04 	ldr.w	pc, [sp], #4
    66c4:	1fff8cf4 	.word	0x1fff8cf4
    66c8:	1fff8cf0 	.word	0x1fff8cf0

000066cc <Can_Ipw_ParseData>:
    PduInfoType * CanIf_PduInfo,
    Flexcan_Ip_MsgBuffType * pReceivedDataBuffer,
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig
)
{
    66cc:	b500      	push	{lr}
    66ce:	b085      	sub	sp, #20
    66d0:	9003      	str	r0, [sp, #12]
    66d2:	9102      	str	r1, [sp, #8]
    66d4:	9201      	str	r2, [sp, #4]
    66d6:	9300      	str	r3, [sp, #0]
    CanIf_Mailbox->CanId = pReceivedDataBuffer->msgId;
    66d8:	9b01      	ldr	r3, [sp, #4]
    66da:	685a      	ldr	r2, [r3, #4]
    66dc:	9b03      	ldr	r3, [sp, #12]
    66de:	601a      	str	r2, [r3, #0]
    * convert the ID to a standardized format since the Upper layer (CANIF) does not know
    * whether the received CAN frame is a Standard CAN frame or Extended CAN frame.
    * In case of an Extended CAN frame, MSB of a received CAN frame ID needs to be
    * made as ‘1’ to mark the received CAN frame as Extended.⌋
    */
    if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_IDE_MASK) != 0U)
    66e0:	9b01      	ldr	r3, [sp, #4]
    66e2:	681b      	ldr	r3, [r3, #0]
    66e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    66e8:	2b00      	cmp	r3, #0
    66ea:	d005      	beq.n	66f8 <Can_Ipw_ParseData+0x2c>
    {
        CanIf_Mailbox->CanId |= (uint32)0x80000000U;
    66ec:	9b03      	ldr	r3, [sp, #12]
    66ee:	681b      	ldr	r3, [r3, #0]
    66f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    66f4:	9b03      	ldr	r3, [sp, #12]
    66f6:	601a      	str	r2, [r3, #0]
    }

    if (CAN_RX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    66f8:	9b06      	ldr	r3, [sp, #24]
    66fa:	699b      	ldr	r3, [r3, #24]
    66fc:	2b00      	cmp	r3, #0
    66fe:	d10c      	bne.n	671a <Can_Ipw_ParseData+0x4e>
    {
        /* Check if Mb Overrun */
        if ((uint32)(0x06000000U) == (pReceivedDataBuffer->cs & CAN_IPW_CS_CODE_MASK))
    6700:	9b01      	ldr	r3, [sp, #4]
    6702:	681b      	ldr	r3, [r3, #0]
    6704:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    6708:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    670c:	d105      	bne.n	671a <Can_Ipw_ParseData+0x4e>
        {
            (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    670e:	2301      	movs	r3, #1
    6710:	2208      	movs	r2, #8
    6712:	2100      	movs	r1, #0
    6714:	2050      	movs	r0, #80	; 0x50
    6716:	f007 fb33 	bl	dd80 <Det_ReportRuntimeError>
        }
    }

    /* when legacy fifo enabled, FD must be disabled */
    if (CAN_RX_LEGACY_FIFO != Can_pHwObjectConfig->Can_eReceiveType)
    671a:	9b06      	ldr	r3, [sp, #24]
    671c:	699b      	ldr	r3, [r3, #24]
    671e:	2b01      	cmp	r3, #1
    6720:	d009      	beq.n	6736 <Can_Ipw_ParseData+0x6a>
    {
        /*
        * [SWS_Can_00501] ⌈ CanDrv shall indicate whether the received message is a
        * conventional CAN frame or a CAN FD frame as described in Can_IdType.⌋
        */
        if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_EDL_MASK) != 0U)
    6722:	9b01      	ldr	r3, [sp, #4]
    6724:	681b      	ldr	r3, [r3, #0]
    6726:	2b00      	cmp	r3, #0
    6728:	da05      	bge.n	6736 <Can_Ipw_ParseData+0x6a>
        {
            CanIf_Mailbox->CanId |= (uint32)0x40000000U;
    672a:	9b03      	ldr	r3, [sp, #12]
    672c:	681b      	ldr	r3, [r3, #0]
    672e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    6732:	9b03      	ldr	r3, [sp, #12]
    6734:	601a      	str	r2, [r3, #0]
        }
    }

    if (Can_pHwObjectConfig->Can_u8PayloadLength <= pReceivedDataBuffer->dataLen)
    6736:	9b06      	ldr	r3, [sp, #24]
    6738:	7c1a      	ldrb	r2, [r3, #16]
    673a:	9b01      	ldr	r3, [sp, #4]
    673c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    6740:	429a      	cmp	r2, r3
    6742:	d805      	bhi.n	6750 <Can_Ipw_ParseData+0x84>
    {
        CanIf_PduInfo->SduLength = Can_pHwObjectConfig->Can_u8PayloadLength;
    6744:	9b06      	ldr	r3, [sp, #24]
    6746:	7c1b      	ldrb	r3, [r3, #16]
    6748:	461a      	mov	r2, r3
    674a:	9b02      	ldr	r3, [sp, #8]
    674c:	609a      	str	r2, [r3, #8]
    674e:	e005      	b.n	675c <Can_Ipw_ParseData+0x90>
    }
    else
    {
        CanIf_PduInfo->SduLength = pReceivedDataBuffer->dataLen;
    6750:	9b01      	ldr	r3, [sp, #4]
    6752:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    6756:	461a      	mov	r2, r3
    6758:	9b02      	ldr	r3, [sp, #8]
    675a:	609a      	str	r2, [r3, #8]
                                                      CanIf_PduInfo->SduLength, \
                                                      &pReceivedDataBuffer->data[0]) \
                                                     )
    {
#endif
    CanIf_Mailbox->Hoh = Can_pHwObjectConfig->Can_HwObjectID;
    675c:	9b06      	ldr	r3, [sp, #24]
    675e:	881a      	ldrh	r2, [r3, #0]
    6760:	9b03      	ldr	r3, [sp, #12]
    6762:	809a      	strh	r2, [r3, #4]
    CanIf_Mailbox->ControllerId = Can_pControllerConfig->Can_u8AbstControllerID;
    6764:	9b00      	ldr	r3, [sp, #0]
    6766:	781a      	ldrb	r2, [r3, #0]
    6768:	9b03      	ldr	r3, [sp, #12]
    676a:	719a      	strb	r2, [r3, #6]
    CanIf_PduInfo->SduDataPtr = &pReceivedDataBuffer->data[0];
    676c:	9b01      	ldr	r3, [sp, #4]
    676e:	f103 0208 	add.w	r2, r3, #8
    6772:	9b02      	ldr	r3, [sp, #8]
    6774:	601a      	str	r2, [r3, #0]
    CanIf_RxIndication(CanIf_Mailbox, CanIf_PduInfo);
    6776:	9902      	ldr	r1, [sp, #8]
    6778:	9803      	ldr	r0, [sp, #12]
    677a:	f007 fc2f 	bl	dfdc <CanIf_RxIndication>
#if (CAN_43_FLEXCAN_LPDU_CALLOUT_SUPPORT == STD_ON)
    }
#endif
}
    677e:	bf00      	nop
    6780:	b005      	add	sp, #20
    6782:	f85d fb04 	ldr.w	pc, [sp], #4

00006786 <Can_Ipw_InitLegacyFifoFilter>:

static void Can_Ipw_InitLegacyFifoFilter(const Can_43_FLEXCAN_ControllerConfigType * Can_pController, const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject)
{
    6786:	b500      	push	{lr}
    6788:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    678c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6790:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    6794:	6018      	str	r0, [r3, #0]
    6796:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    679a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    679e:	6019      	str	r1, [r3, #0]
    uint8 u8FilterIdx=0U;
    67a0:	2300      	movs	r3, #0
    67a2:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    uint8 u8HwFilterCount = 0U;
    67a6:	2300      	movs	r3, #0
    67a8:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
    uint32 u32HwFilterMask = (uint32)0x00000000U;
    67ac:	2300      	movs	r3, #0
    67ae:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    /* The max FIFO id filter affected by Rx individual masks*/
    uint8 u8FiFoFilterIndvCount = 0U;
    67b2:	2300      	movs	r3, #0
    67b4:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    Flexcan_Ip_RxFifoIdElementFormatType eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    67b8:	2300      	movs	r3, #0
    67ba:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
    /* Need to alocate a filter array with elemnets no as defined in HwObject */
    Flexcan_Ip_IdTableType RxFifoFilters[128];

    if (((Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U) <= 32U)
    67be:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    67c2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    67c6:	681b      	ldr	r3, [r3, #0]
    67c8:	7c9b      	ldrb	r3, [r3, #18]
    67ca:	089b      	lsrs	r3, r3, #2
    67cc:	b2db      	uxtb	r3, r3
    67ce:	3306      	adds	r3, #6
    67d0:	2b20      	cmp	r3, #32
    67d2:	d80b      	bhi.n	67ec <Can_Ipw_InitLegacyFifoFilter+0x66>
    {
        u8FiFoFilterIndvCount = (Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U;
    67d4:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    67d8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    67dc:	681b      	ldr	r3, [r3, #0]
    67de:	7c9b      	ldrb	r3, [r3, #18]
    67e0:	089b      	lsrs	r3, r3, #2
    67e2:	b2db      	uxtb	r3, r3
    67e4:	3306      	adds	r3, #6
    67e6:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    67ea:	e002      	b.n	67f2 <Can_Ipw_InitLegacyFifoFilter+0x6c>
    }
    else
    {
        u8FiFoFilterIndvCount = 32U;
    67ec:	2320      	movs	r3, #32
    67ee:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    }
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    67f2:	2300      	movs	r3, #0
    67f4:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    67f8:	e169      	b.n	6ace <Can_Ipw_InitLegacyFifoFilter+0x348>
    {
            if (CAN_LEGACY_FIFO_FORMAT_A == Can_pController->Can_eLegacyAcceptanceMode)
    67fa:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    67fe:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    6802:	681b      	ldr	r3, [r3, #0]
    6804:	691b      	ldr	r3, [r3, #16]
    6806:	2b00      	cmp	r3, #0
    6808:	d13a      	bne.n	6880 <Can_Ipw_InitLegacyFifoFilter+0xfa>
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount;
    680a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    680e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6812:	681b      	ldr	r3, [r3, #0]
    6814:	7c9b      	ldrb	r3, [r3, #18]
    6816:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC0000000U;
    681a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    681e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    6822:	2300      	movs	r3, #0
    6824:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    6828:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    682c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6830:	681b      	ldr	r3, [r3, #0]
    6832:	689b      	ldr	r3, [r3, #8]
    6834:	2b00      	cmp	r3, #0
    6836:	d011      	beq.n	685c <Can_Ipw_InitLegacyFifoFilter+0xd6>
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_EXT_SHIFT;
    6838:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    683c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6840:	681b      	ldr	r3, [r3, #0]
    6842:	695a      	ldr	r2, [r3, #20]
    6844:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6848:	00db      	lsls	r3, r3, #3
    684a:	4413      	add	r3, r2
    684c:	685b      	ldr	r3, [r3, #4]
    684e:	005b      	lsls	r3, r3, #1
    6850:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6854:	4313      	orrs	r3, r2
    6856:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    685a:	e126      	b.n	6aaa <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_STD_SHIFT;
    685c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6860:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6864:	681b      	ldr	r3, [r3, #0]
    6866:	695a      	ldr	r2, [r3, #20]
    6868:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    686c:	00db      	lsls	r3, r3, #3
    686e:	4413      	add	r3, r2
    6870:	685b      	ldr	r3, [r3, #4]
    6872:	04db      	lsls	r3, r3, #19
    6874:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6878:	4313      	orrs	r3, r2
    687a:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    687e:	e114      	b.n	6aaa <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else if (CAN_LEGACY_FIFO_FORMAT_B == Can_pController->Can_eLegacyAcceptanceMode)
    6880:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6884:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    6888:	681b      	ldr	r3, [r3, #0]
    688a:	691b      	ldr	r3, [r3, #16]
    688c:	2b01      	cmp	r3, #1
    688e:	d160      	bne.n	6952 <Can_Ipw_InitLegacyFifoFilter+0x1cc>
            {
                u8HwFilterCount = Can_pHwObject->Can_u8HwFilterCount * 2U ;
    6890:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6894:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6898:	681b      	ldr	r3, [r3, #0]
    689a:	7c9b      	ldrb	r3, [r3, #18]
    689c:	005b      	lsls	r3, r3, #1
    689e:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC000C000U;
    68a2:	f04f 23c0 	mov.w	r3, #3221274624	; 0xc000c000
    68a6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_B;
    68aa:	2301      	movs	r3, #1
    68ac:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    68b0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    68b4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    68b8:	681b      	ldr	r3, [r3, #0]
    68ba:	689b      	ldr	r3, [r3, #8]
    68bc:	2b00      	cmp	r3, #0
    68be:	d024      	beq.n	690a <Can_Ipw_InitLegacyFifoFilter+0x184>
                {
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT1;
    68c0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    68c4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    68c8:	681b      	ldr	r3, [r3, #0]
    68ca:	695a      	ldr	r2, [r3, #20]
    68cc:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    68d0:	011b      	lsls	r3, r3, #4
    68d2:	4413      	add	r3, r2
    68d4:	685b      	ldr	r3, [r3, #4]
    68d6:	0bdb      	lsrs	r3, r3, #15
    68d8:	041b      	lsls	r3, r3, #16
    68da:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    68de:	4313      	orrs	r3, r2
    68e0:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT2;
    68e4:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    68e8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    68ec:	681b      	ldr	r3, [r3, #0]
    68ee:	695a      	ldr	r2, [r3, #20]
    68f0:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    68f4:	011b      	lsls	r3, r3, #4
    68f6:	3308      	adds	r3, #8
    68f8:	4413      	add	r3, r2
    68fa:	685b      	ldr	r3, [r3, #4]
    68fc:	0bdb      	lsrs	r3, r3, #15
    68fe:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6902:	4313      	orrs	r3, r2
    6904:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    6908:	e0cf      	b.n	6aaa <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT1;
    690a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    690e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6912:	681b      	ldr	r3, [r3, #0]
    6914:	695a      	ldr	r2, [r3, #20]
    6916:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    691a:	011b      	lsls	r3, r3, #4
    691c:	4413      	add	r3, r2
    691e:	685b      	ldr	r3, [r3, #4]
    6920:	04db      	lsls	r3, r3, #19
    6922:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6926:	4313      	orrs	r3, r2
    6928:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT2;
    692c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6930:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6934:	681b      	ldr	r3, [r3, #0]
    6936:	695a      	ldr	r2, [r3, #20]
    6938:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    693c:	011b      	lsls	r3, r3, #4
    693e:	3308      	adds	r3, #8
    6940:	4413      	add	r3, r2
    6942:	685b      	ldr	r3, [r3, #4]
    6944:	00db      	lsls	r3, r3, #3
    6946:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    694a:	4313      	orrs	r3, r2
    694c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    6950:	e0ab      	b.n	6aaa <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else /*CAN_LEGACY_FIFO_FORMAT_C == Can_pController->Can_eLegacyAcceptanceMode */
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount * 4U ;
    6952:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6956:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    695a:	681b      	ldr	r3, [r3, #0]
    695c:	7c9b      	ldrb	r3, [r3, #18]
    695e:	009b      	lsls	r3, r3, #2
    6960:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0x00000000U;
    6964:	2300      	movs	r3, #0
    6966:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_C;
    696a:	2302      	movs	r3, #2
    696c:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    6970:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6974:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6978:	681b      	ldr	r3, [r3, #0]
    697a:	689b      	ldr	r3, [r3, #8]
    697c:	2b00      	cmp	r3, #0
    697e:	d04a      	beq.n	6a16 <Can_Ipw_InitLegacyFifoFilter+0x290>
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    6980:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6984:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6988:	681b      	ldr	r3, [r3, #0]
    698a:	695a      	ldr	r2, [r3, #20]
    698c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6990:	015b      	lsls	r3, r3, #5
    6992:	4413      	add	r3, r2
    6994:	685b      	ldr	r3, [r3, #4]
    6996:	0d5b      	lsrs	r3, r3, #21
    6998:	061b      	lsls	r3, r3, #24
    699a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    699e:	4313      	orrs	r3, r2
    69a0:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    69a4:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    69a8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    69ac:	681b      	ldr	r3, [r3, #0]
    69ae:	695a      	ldr	r2, [r3, #20]
    69b0:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    69b4:	015b      	lsls	r3, r3, #5
    69b6:	3308      	adds	r3, #8
    69b8:	4413      	add	r3, r2
    69ba:	685b      	ldr	r3, [r3, #4]
    69bc:	0d5b      	lsrs	r3, r3, #21
    69be:	041b      	lsls	r3, r3, #16
    69c0:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    69c4:	4313      	orrs	r3, r2
    69c6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    69ca:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    69ce:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    69d2:	681b      	ldr	r3, [r3, #0]
    69d4:	695a      	ldr	r2, [r3, #20]
    69d6:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    69da:	015b      	lsls	r3, r3, #5
    69dc:	3310      	adds	r3, #16
    69de:	4413      	add	r3, r2
    69e0:	685b      	ldr	r3, [r3, #4]
    69e2:	0d5b      	lsrs	r3, r3, #21
    69e4:	021b      	lsls	r3, r3, #8
    69e6:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    69ea:	4313      	orrs	r3, r2
    69ec:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    69f0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    69f4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    69f8:	681b      	ldr	r3, [r3, #0]
    69fa:	695a      	ldr	r2, [r3, #20]
    69fc:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6a00:	015b      	lsls	r3, r3, #5
    6a02:	3318      	adds	r3, #24
    6a04:	4413      	add	r3, r2
    6a06:	685b      	ldr	r3, [r3, #4]
    6a08:	0d5b      	lsrs	r3, r3, #21
    6a0a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6a0e:	4313      	orrs	r3, r2
    6a10:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    6a14:	e049      	b.n	6aaa <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    6a16:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6a1a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6a1e:	681b      	ldr	r3, [r3, #0]
    6a20:	695a      	ldr	r2, [r3, #20]
    6a22:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6a26:	015b      	lsls	r3, r3, #5
    6a28:	4413      	add	r3, r2
    6a2a:	685b      	ldr	r3, [r3, #4]
    6a2c:	08db      	lsrs	r3, r3, #3
    6a2e:	061b      	lsls	r3, r3, #24
    6a30:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6a34:	4313      	orrs	r3, r2
    6a36:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    6a3a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6a3e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6a42:	681b      	ldr	r3, [r3, #0]
    6a44:	695a      	ldr	r2, [r3, #20]
    6a46:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6a4a:	015b      	lsls	r3, r3, #5
    6a4c:	3308      	adds	r3, #8
    6a4e:	4413      	add	r3, r2
    6a50:	685b      	ldr	r3, [r3, #4]
    6a52:	08db      	lsrs	r3, r3, #3
    6a54:	041b      	lsls	r3, r3, #16
    6a56:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6a5a:	4313      	orrs	r3, r2
    6a5c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    6a60:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6a64:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6a68:	681b      	ldr	r3, [r3, #0]
    6a6a:	695a      	ldr	r2, [r3, #20]
    6a6c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6a70:	015b      	lsls	r3, r3, #5
    6a72:	3310      	adds	r3, #16
    6a74:	4413      	add	r3, r2
    6a76:	685b      	ldr	r3, [r3, #4]
    6a78:	08db      	lsrs	r3, r3, #3
    6a7a:	021b      	lsls	r3, r3, #8
    6a7c:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6a80:	4313      	orrs	r3, r2
    6a82:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    6a86:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6a8a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6a8e:	681b      	ldr	r3, [r3, #0]
    6a90:	695a      	ldr	r2, [r3, #20]
    6a92:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6a96:	015b      	lsls	r3, r3, #5
    6a98:	3318      	adds	r3, #24
    6a9a:	4413      	add	r3, r2
    6a9c:	685b      	ldr	r3, [r3, #4]
    6a9e:	08db      	lsrs	r3, r3, #3
    6aa0:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6aa4:	4313      	orrs	r3, r2
    6aa6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                }
            }
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, u8FilterIdx, u32HwFilterMask);
    6aaa:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6aae:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    6ab2:	681b      	ldr	r3, [r3, #0]
    6ab4:	789b      	ldrb	r3, [r3, #2]
    6ab6:	f89d 1417 	ldrb.w	r1, [sp, #1047]	; 0x417
    6aba:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6abe:	4618      	mov	r0, r3
    6ac0:	f002 fd0e 	bl	94e0 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    6ac4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6ac8:	3301      	adds	r3, #1
    6aca:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    6ace:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    6ad2:	f89d 340f 	ldrb.w	r3, [sp, #1039]	; 0x40f
    6ad6:	429a      	cmp	r2, r3
    6ad8:	d20a      	bcs.n	6af0 <Can_Ipw_InitLegacyFifoFilter+0x36a>
    6ada:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6ade:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6ae2:	681b      	ldr	r3, [r3, #0]
    6ae4:	7c9b      	ldrb	r3, [r3, #18]
    6ae6:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    6aea:	429a      	cmp	r2, r3
    6aec:	f4ff ae85 	bcc.w	67fa <Can_Ipw_InitLegacyFifoFilter+0x74>
    }

    (void)FlexCAN_Ip_SetRxFifoGlobalMask(Can_pController->Can_u8ControllerOffset, Can_pController->Can_u32LegacyGlobalMask);
    6af0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6af4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    6af8:	681b      	ldr	r3, [r3, #0]
    6afa:	789a      	ldrb	r2, [r3, #2]
    6afc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6b00:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    6b04:	681b      	ldr	r3, [r3, #0]
    6b06:	68db      	ldr	r3, [r3, #12]
    6b08:	4619      	mov	r1, r3
    6b0a:	4610      	mov	r0, r2
    6b0c:	f002 fd36 	bl	957c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>
    
    if (u8HwFilterCount != 0U)
    6b10:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    6b14:	2b00      	cmp	r3, #0
    6b16:	d054      	beq.n	6bc2 <Can_Ipw_InitLegacyFifoFilter+0x43c>
    {
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    6b18:	2300      	movs	r3, #0
    6b1a:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    6b1e:	e03e      	b.n	6b9e <Can_Ipw_InitLegacyFifoFilter+0x418>
        {
            RxFifoFilters[u8FilterIdx].id = Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterCode;
    6b20:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6b24:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6b28:	681b      	ldr	r3, [r3, #0]
    6b2a:	695a      	ldr	r2, [r3, #20]
    6b2c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6b30:	00db      	lsls	r3, r3, #3
    6b32:	441a      	add	r2, r3
    6b34:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6b38:	6812      	ldr	r2, [r2, #0]
    6b3a:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
    6b3e:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
    6b42:	00db      	lsls	r3, r3, #3
    6b44:	440b      	add	r3, r1
    6b46:	605a      	str	r2, [r3, #4]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    6b48:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6b4c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6b50:	681b      	ldr	r3, [r3, #0]
    6b52:	689b      	ldr	r3, [r3, #8]
    6b54:	2b00      	cmp	r3, #0
    6b56:	d00a      	beq.n	6b6e <Can_Ipw_InitLegacyFifoFilter+0x3e8>
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = TRUE;
    6b58:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6b5c:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    6b60:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    6b64:	00db      	lsls	r3, r3, #3
    6b66:	4413      	add	r3, r2
    6b68:	2201      	movs	r2, #1
    6b6a:	705a      	strb	r2, [r3, #1]
    6b6c:	e009      	b.n	6b82 <Can_Ipw_InitLegacyFifoFilter+0x3fc>
            }
            else
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = FALSE;
    6b6e:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6b72:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    6b76:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    6b7a:	00db      	lsls	r3, r3, #3
    6b7c:	4413      	add	r3, r2
    6b7e:	2200      	movs	r2, #0
    6b80:	705a      	strb	r2, [r3, #1]
            }
            RxFifoFilters[u8FilterIdx].isRemoteFrame = FALSE;
    6b82:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    6b86:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6b8a:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
    6b8e:	2100      	movs	r1, #0
    6b90:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    6b94:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6b98:	3301      	adds	r3, #1
    6b9a:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    6b9e:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    6ba2:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    6ba6:	429a      	cmp	r2, r3
    6ba8:	d3ba      	bcc.n	6b20 <Can_Ipw_InitLegacyFifoFilter+0x39a>
        }

        (void)FlexCAN_Ip_ConfigRxFifo(Can_pController->Can_u8ControllerOffset, eElementFormat, RxFifoFilters);
    6baa:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6bae:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    6bb2:	681b      	ldr	r3, [r3, #0]
    6bb4:	789b      	ldrb	r3, [r3, #2]
    6bb6:	aa02      	add	r2, sp, #8
    6bb8:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    6bbc:	4618      	mov	r0, r3
    6bbe:	f002 f872 	bl	8ca6 <FlexCAN_Ip_ConfigRxFifo_Privileged>
    }
    
}
    6bc2:	bf00      	nop
    6bc4:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    6bc8:	f85d fb04 	ldr.w	pc, [sp], #4

00006bcc <Can_Ipw_InitBaudrate>:

#endif /* (CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON) */

/* Init baudrate for controller */
static void Can_Ipw_InitBaudrate(const Can_43_FLEXCAN_ControllerConfigType * ControllerConfig)
{
    6bcc:	b510      	push	{r4, lr}
    6bce:	b084      	sub	sp, #16
    6bd0:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    uint16 BaudRateConfigID = Can_au16ControllerBaudRateSel[ControllerConfig->Can_u8ControllerID];
#else
    uint16 BaudRateConfigID = ControllerConfig->Can_u16DefaultBaudrateID;
    6bd2:	9b01      	ldr	r3, [sp, #4]
    6bd4:	8b9b      	ldrh	r3, [r3, #28]
    6bd6:	f8ad 300e 	strh.w	r3, [sp, #14]
        FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
        FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
        FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
        (void)FlexCAN_Ip_SetBitrate(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
#endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
        if (TRUE == ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    6bda:	9b01      	ldr	r3, [sp, #4]
    6bdc:	6a1a      	ldr	r2, [r3, #32]
    6bde:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6be2:	2116      	movs	r1, #22
    6be4:	fb01 f303 	mul.w	r3, r1, r3
    6be8:	4413      	add	r3, r2
    6bea:	785b      	ldrb	r3, [r3, #1]
    6bec:	2b00      	cmp	r3, #0
    6bee:	d016      	beq.n	6c1e <Can_Ipw_InitBaudrate+0x52>
            FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
            FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;

            (void)FlexCAN_Ip_SetBitrateCbt(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    #endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
            (void)FlexCAN_Ip_SetTDCOffset(ControllerConfig->Can_u8ControllerOffset, \
    6bf0:	9b01      	ldr	r3, [sp, #4]
    6bf2:	7898      	ldrb	r0, [r3, #2]
    6bf4:	9b01      	ldr	r3, [sp, #4]
    6bf6:	6a1a      	ldr	r2, [r3, #32]
    6bf8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6bfc:	2116      	movs	r1, #22
    6bfe:	fb01 f303 	mul.w	r3, r1, r3
    6c02:	4413      	add	r3, r2
    6c04:	7cd9      	ldrb	r1, [r3, #19]
    6c06:	9b01      	ldr	r3, [sp, #4]
    6c08:	6a1a      	ldr	r2, [r3, #32]
    6c0a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6c0e:	2416      	movs	r4, #22
    6c10:	fb04 f303 	mul.w	r3, r4, r3
    6c14:	4413      	add	r3, r2
    6c16:	7d1b      	ldrb	r3, [r3, #20]
    6c18:	461a      	mov	r2, r3
    6c1a:	f003 f829 	bl	9c70 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(ControllerConfig->Can_u8ControllerOffset, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    6c1e:	9b01      	ldr	r3, [sp, #4]
    6c20:	7898      	ldrb	r0, [r3, #2]
    6c22:	9b01      	ldr	r3, [sp, #4]
    6c24:	6a1a      	ldr	r2, [r3, #32]
    6c26:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6c2a:	2116      	movs	r1, #22
    6c2c:	fb01 f303 	mul.w	r3, r1, r3
    6c30:	4413      	add	r3, r2
    6c32:	7c9b      	ldrb	r3, [r3, #18]
    6c34:	4619      	mov	r1, r3
    6c36:	f003 f86f 	bl	9d18 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
}
    6c3a:	bf00      	nop
    6c3c:	b004      	add	sp, #16
    6c3e:	bd10      	pop	{r4, pc}

00006c40 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    6c40:	b500      	push	{lr}
    6c42:	b087      	sub	sp, #28
    6c44:	9003      	str	r0, [sp, #12]
    6c46:	9102      	str	r1, [sp, #8]
    6c48:	4613      	mov	r3, r2
    6c4a:	f88d 3007 	strb.w	r3, [sp, #7]
        Can_HwHandleType u8HwObjectID = 0U;
    6c4e:	2300      	movs	r3, #0
    6c50:	f8ad 3016 	strh.w	r3, [sp, #22]

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    6c54:	9b03      	ldr	r3, [sp, #12]
    6c56:	785b      	ldrb	r3, [r3, #1]
    6c58:	461a      	mov	r2, r3
    6c5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c5e:	491c      	ldr	r1, [pc, #112]	; (6cd0 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x90>)
    6c60:	0152      	lsls	r2, r2, #5
    6c62:	4413      	add	r3, r2
    6c64:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    6c68:	f8ad 3016 	strh.w	r3, [sp, #22]
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    6c6c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c70:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6c74:	4293      	cmp	r3, r2
    6c76:	d027      	beq.n	6cc8 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
    6c78:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6c7c:	4613      	mov	r3, r2
    6c7e:	00db      	lsls	r3, r3, #3
    6c80:	4413      	add	r3, r2
    6c82:	009b      	lsls	r3, r3, #2
    6c84:	461a      	mov	r2, r3
    6c86:	9b02      	ldr	r3, [sp, #8]
    6c88:	4413      	add	r3, r2
    6c8a:	7b1b      	ldrb	r3, [r3, #12]
    6c8c:	f083 0301 	eor.w	r3, r3, #1
    6c90:	b2db      	uxtb	r3, r3
    6c92:	2b00      	cmp	r3, #0
    6c94:	d018      	beq.n	6cc8 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
        {
            if (CAN_TX_NORMAL == Can_pHwObjectConfig[u8HwObjectID].Can_eReceiveType)
    6c96:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6c9a:	4613      	mov	r3, r2
    6c9c:	00db      	lsls	r3, r3, #3
    6c9e:	4413      	add	r3, r2
    6ca0:	009b      	lsls	r3, r3, #2
    6ca2:	461a      	mov	r2, r3
    6ca4:	9b02      	ldr	r3, [sp, #8]
    6ca6:	4413      	add	r3, r2
    6ca8:	699b      	ldr	r3, [r3, #24]
    6caa:	2b03      	cmp	r3, #3
    6cac:	d10c      	bne.n	6cc8 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
            {
                CanIf_TxConfirmation(Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx]);
    6cae:	9b03      	ldr	r3, [sp, #12]
    6cb0:	785b      	ldrb	r3, [r3, #1]
    6cb2:	461a      	mov	r2, r3
    6cb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cb8:	4906      	ldr	r1, [pc, #24]	; (6cd4 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x94>)
    6cba:	0152      	lsls	r2, r2, #5
    6cbc:	4413      	add	r3, r2
    6cbe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    6cc2:	4618      	mov	r0, r3
    6cc4:	f007 f956 	bl	df74 <CanIf_TxConfirmation>
            }
        }
    }
    6cc8:	bf00      	nop
    6cca:	b007      	add	sp, #28
    6ccc:	f85d fb04 	ldr.w	pc, [sp], #4
    6cd0:	1fff8f58 	.word	0x1fff8f58
    6cd4:	1fff8f18 	.word	0x1fff8f18

00006cd8 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    6cd8:	b500      	push	{lr}
    6cda:	b08f      	sub	sp, #60	; 0x3c
    6cdc:	9005      	str	r0, [sp, #20]
    6cde:	9104      	str	r1, [sp, #16]
    6ce0:	4613      	mov	r3, r2
    6ce2:	f88d 300f 	strb.w	r3, [sp, #15]
        Can_HwHandleType u8HwObjectID = 0U;
    6ce6:	2300      	movs	r3, #0
    6ce8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        Can_HwType CanIf_Mailbox;
        PduInfoType CanIf_PduInfo;
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    6cec:	2300      	movs	r3, #0
    6cee:	930c      	str	r3, [sp, #48]	; 0x30
        Flexcan_Ip_MsgBuffType * pReceivedDataBuffer = NULL_PTR;
    6cf0:	2300      	movs	r3, #0
    6cf2:	930b      	str	r3, [sp, #44]	; 0x2c

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    6cf4:	9b05      	ldr	r3, [sp, #20]
    6cf6:	785b      	ldrb	r3, [r3, #1]
    6cf8:	461a      	mov	r2, r3
    6cfa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6cfe:	493f      	ldr	r1, [pc, #252]	; (6dfc <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x124>)
    6d00:	0152      	lsls	r2, r2, #5
    6d02:	4413      	add	r3, r2
    6d04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    6d08:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    6d0c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    6d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6d14:	4293      	cmp	r3, r2
    6d16:	d06c      	beq.n	6df2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
    6d18:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    6d1c:	4613      	mov	r3, r2
    6d1e:	00db      	lsls	r3, r3, #3
    6d20:	4413      	add	r3, r2
    6d22:	009b      	lsls	r3, r3, #2
    6d24:	461a      	mov	r2, r3
    6d26:	9b04      	ldr	r3, [sp, #16]
    6d28:	4413      	add	r3, r2
    6d2a:	7b1b      	ldrb	r3, [r3, #12]
    6d2c:	f083 0301 	eor.w	r3, r3, #1
    6d30:	b2db      	uxtb	r3, r3
    6d32:	2b00      	cmp	r3, #0
    6d34:	d05d      	beq.n	6df2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
        {
            Can_pHwObject = &Can_pHwObjectConfig[u8HwObjectID];
    6d36:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    6d3a:	4613      	mov	r3, r2
    6d3c:	00db      	lsls	r3, r3, #3
    6d3e:	4413      	add	r3, r2
    6d40:	009b      	lsls	r3, r3, #2
    6d42:	461a      	mov	r2, r3
    6d44:	9b04      	ldr	r3, [sp, #16]
    6d46:	4413      	add	r3, r2
    6d48:	930c      	str	r3, [sp, #48]	; 0x30

            if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    6d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6d4c:	699b      	ldr	r3, [r3, #24]
    6d4e:	2b00      	cmp	r3, #0
    6d50:	d118      	bne.n	6d84 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xac>
            {
                pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    6d52:	4a2b      	ldr	r2, [pc, #172]	; (6e00 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x128>)
    6d54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6d56:	7f1b      	ldrb	r3, [r3, #28]
    6d58:	011b      	lsls	r3, r3, #4
    6d5a:	4413      	add	r3, r2
    6d5c:	681b      	ldr	r3, [r3, #0]
    6d5e:	930b      	str	r3, [sp, #44]	; 0x2c
                Can_Ipw_ParseData(&CanIf_Mailbox, \
    6d60:	a906      	add	r1, sp, #24
    6d62:	a809      	add	r0, sp, #36	; 0x24
    6d64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6d66:	9300      	str	r3, [sp, #0]
    6d68:	9b05      	ldr	r3, [sp, #20]
    6d6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6d6c:	f7ff fcae 	bl	66cc <Can_Ipw_ParseData>
                                  pReceivedDataBuffer, \
                                  Can_pControllerConfig, \
                                  Can_pHwObject \
                                 );
                /* ready to receive in next time */
                (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    6d70:	9b05      	ldr	r3, [sp, #20]
    6d72:	7898      	ldrb	r0, [r3, #2]
    6d74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6d76:	7f19      	ldrb	r1, [r3, #28]
    6d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6d7a:	7b1b      	ldrb	r3, [r3, #12]
    6d7c:	2200      	movs	r2, #0
    6d7e:	f001 fe61 	bl	8a44 <FlexCAN_Ip_Receive>
            else
            {
                /* prevent misra */
            }
        }
    }
    6d82:	e036      	b.n	6df2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
            else if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    6d84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6d86:	699b      	ldr	r3, [r3, #24]
    6d88:	2b01      	cmp	r3, #1
    6d8a:	d132      	bne.n	6df2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                if ((uint8)7U == u8MbIdx)
    6d8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6d90:	2b07      	cmp	r3, #7
    6d92:	d10d      	bne.n	6db0 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xd8>
                    (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    6d94:	2301      	movs	r3, #1
    6d96:	2208      	movs	r2, #8
    6d98:	2100      	movs	r1, #0
    6d9a:	2050      	movs	r0, #80	; 0x50
    6d9c:	f006 fff0 	bl	dd80 <Det_ReportRuntimeError>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoOvfNotif)
    6da0:	9b05      	ldr	r3, [sp, #20]
    6da2:	699b      	ldr	r3, [r3, #24]
    6da4:	2b00      	cmp	r3, #0
    6da6:	d024      	beq.n	6df2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                        Can_pControllerConfig->Can_pLegacyFiFoOvfNotif();
    6da8:	9b05      	ldr	r3, [sp, #20]
    6daa:	699b      	ldr	r3, [r3, #24]
    6dac:	4798      	blx	r3
    }
    6dae:	e020      	b.n	6df2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                else if ((uint8)6U == u8MbIdx)
    6db0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6db4:	2b06      	cmp	r3, #6
    6db6:	d107      	bne.n	6dc8 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xf0>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoWarnNotif)
    6db8:	9b05      	ldr	r3, [sp, #20]
    6dba:	695b      	ldr	r3, [r3, #20]
    6dbc:	2b00      	cmp	r3, #0
    6dbe:	d018      	beq.n	6df2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                        Can_pControllerConfig->Can_pLegacyFiFoWarnNotif();
    6dc0:	9b05      	ldr	r3, [sp, #20]
    6dc2:	695b      	ldr	r3, [r3, #20]
    6dc4:	4798      	blx	r3
    }
    6dc6:	e014      	b.n	6df2 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                    pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    6dc8:	4a0d      	ldr	r2, [pc, #52]	; (6e00 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x128>)
    6dca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6dcc:	7f1b      	ldrb	r3, [r3, #28]
    6dce:	011b      	lsls	r3, r3, #4
    6dd0:	4413      	add	r3, r2
    6dd2:	681b      	ldr	r3, [r3, #0]
    6dd4:	930b      	str	r3, [sp, #44]	; 0x2c
                    Can_Ipw_ParseData(&CanIf_Mailbox, \
    6dd6:	a906      	add	r1, sp, #24
    6dd8:	a809      	add	r0, sp, #36	; 0x24
    6dda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6ddc:	9300      	str	r3, [sp, #0]
    6dde:	9b05      	ldr	r3, [sp, #20]
    6de0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6de2:	f7ff fc73 	bl	66cc <Can_Ipw_ParseData>
                    (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    6de6:	9b05      	ldr	r3, [sp, #20]
    6de8:	789b      	ldrb	r3, [r3, #2]
    6dea:	2100      	movs	r1, #0
    6dec:	4618      	mov	r0, r3
    6dee:	f001 ff27 	bl	8c40 <FlexCAN_Ip_RxFifo>
    }
    6df2:	bf00      	nop
    6df4:	b00f      	add	sp, #60	; 0x3c
    6df6:	f85d fb04 	ldr.w	pc, [sp], #4
    6dfa:	bf00      	nop
    6dfc:	1fff8f58 	.word	0x1fff8f58
    6e00:	1fff8cf8 	.word	0x1fff8cf8

00006e04 <Can_43_FLEXCAN_Ipw_Init>:
#endif /* (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON) */
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
Std_ReturnType Can_43_FLEXCAN_Ipw_Init(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    6e04:	b510      	push	{r4, lr}
    6e06:	b084      	sub	sp, #16
    6e08:	9001      	str	r0, [sp, #4]
    Std_ReturnType eRetVal = (Std_ReturnType)FLEXCAN_STATUS_ERROR;
    6e0a:	2301      	movs	r3, #1
    6e0c:	f88d 300c 	strb.w	r3, [sp, #12]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    /* The Index of Hoh in a group that refer to a controller */
    uint8 u8HwObjRefIdx = 0U;
    6e10:	2300      	movs	r3, #0
    6e12:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ObjIdx = 0U;
    6e16:	2300      	movs	r3, #0
    6e18:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    6e1c:	2300      	movs	r3, #0
    6e1e:	9302      	str	r3, [sp, #8]
    uint8 u8HwBufferCount = 0U;
    6e20:	2300      	movs	r3, #0
    6e22:	f88d 300d 	strb.w	r3, [sp, #13]
    {
        Can_Ipw_u32Seconds = 0U;
    }
#endif
    /* @violates @ref Can_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    eRetVal = (Std_ReturnType)Call_Can_FlexCan_Init(Can_pControllerConfig->Can_u8ControllerOffset, Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);
    6e26:	9b01      	ldr	r3, [sp, #4]
    6e28:	7898      	ldrb	r0, [r3, #2]
    6e2a:	4976      	ldr	r1, [pc, #472]	; (7004 <Can_43_FLEXCAN_Ipw_Init+0x200>)
    6e2c:	9b01      	ldr	r3, [sp, #4]
    6e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6e30:	681b      	ldr	r3, [r3, #0]
    6e32:	461a      	mov	r2, r3
    6e34:	f001 fcfa 	bl	882c <FlexCAN_Ip_Init_Privileged>
    6e38:	4603      	mov	r3, r0
    6e3a:	f88d 300c 	strb.w	r3, [sp, #12]
    
    /* by defaut, enable interrupt when setcontroller to start */
    Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    6e3e:	9b01      	ldr	r3, [sp, #4]
    6e40:	785b      	ldrb	r3, [r3, #1]
    6e42:	461a      	mov	r2, r3
    6e44:	4b70      	ldr	r3, [pc, #448]	; (7008 <Can_43_FLEXCAN_Ipw_Init+0x204>)
    6e46:	2101      	movs	r1, #1
    6e48:	5499      	strb	r1, [r3, r2]
    if ((Std_ReturnType)FLEXCAN_STATUS_SUCCESS == eRetVal)
    6e4a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6e4e:	2b00      	cmp	r3, #0
    6e50:	d13b      	bne.n	6eca <Can_43_FLEXCAN_Ipw_Init+0xc6>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    6e52:	9b01      	ldr	r3, [sp, #4]
    6e54:	789b      	ldrb	r3, [r3, #2]
    6e56:	4618      	mov	r0, r3
    6e58:	f003 f81c 	bl	9e94 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* If the FlexCAN_Init retuns SUCCESS then the module is already in freezemode, and FlexCAN_Ip_SetTDCOffset and FlexCAN_Ip_SetTxArbitrationStartDelay will always retun success */
        if (Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bFDFrame)
    6e5c:	9b01      	ldr	r3, [sp, #4]
    6e5e:	6a1a      	ldr	r2, [r3, #32]
    6e60:	9b01      	ldr	r3, [sp, #4]
    6e62:	8b9b      	ldrh	r3, [r3, #28]
    6e64:	4619      	mov	r1, r3
    6e66:	2316      	movs	r3, #22
    6e68:	fb01 f303 	mul.w	r3, r1, r3
    6e6c:	4413      	add	r3, r2
    6e6e:	785b      	ldrb	r3, [r3, #1]
    6e70:	2b00      	cmp	r3, #0
    6e72:	d018      	beq.n	6ea6 <Can_43_FLEXCAN_Ipw_Init+0xa2>
        {
            (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    6e74:	9b01      	ldr	r3, [sp, #4]
    6e76:	7898      	ldrb	r0, [r3, #2]
    6e78:	9b01      	ldr	r3, [sp, #4]
    6e7a:	6a1a      	ldr	r2, [r3, #32]
    6e7c:	9b01      	ldr	r3, [sp, #4]
    6e7e:	8b9b      	ldrh	r3, [r3, #28]
    6e80:	4619      	mov	r1, r3
    6e82:	2316      	movs	r3, #22
    6e84:	fb01 f303 	mul.w	r3, r1, r3
    6e88:	4413      	add	r3, r2
    6e8a:	7cd9      	ldrb	r1, [r3, #19]
    6e8c:	9b01      	ldr	r3, [sp, #4]
    6e8e:	6a1a      	ldr	r2, [r3, #32]
    6e90:	9b01      	ldr	r3, [sp, #4]
    6e92:	8b9b      	ldrh	r3, [r3, #28]
    6e94:	461c      	mov	r4, r3
    6e96:	2316      	movs	r3, #22
    6e98:	fb04 f303 	mul.w	r3, r4, r3
    6e9c:	4413      	add	r3, r2
    6e9e:	7d1b      	ldrb	r3, [r3, #20]
    6ea0:	461a      	mov	r2, r3
    6ea2:	f002 fee5 	bl	9c70 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bTrcvDelayEnable, \
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, \
    6ea6:	9b01      	ldr	r3, [sp, #4]
    6ea8:	7898      	ldrb	r0, [r3, #2]
    6eaa:	9b01      	ldr	r3, [sp, #4]
    6eac:	6a1a      	ldr	r2, [r3, #32]
    6eae:	9b01      	ldr	r3, [sp, #4]
    6eb0:	8b9b      	ldrh	r3, [r3, #28]
    6eb2:	4619      	mov	r1, r3
    6eb4:	2316      	movs	r3, #22
    6eb6:	fb01 f303 	mul.w	r3, r1, r3
    6eba:	4413      	add	r3, r2
    6ebc:	7c9b      	ldrb	r3, [r3, #18]
    6ebe:	4619      	mov	r1, r3
    6ec0:	f002 ff2a 	bl	9d18 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
                                                    Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TxArbitrationStartDelay);
        
        /* Init all Rx objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    6ec4:	9801      	ldr	r0, [sp, #4]
    6ec6:	f000 fb05 	bl	74d4 <Can_Ipw_InitRx>
    }

#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    6eca:	2300      	movs	r3, #0
    6ecc:	f88d 300d 	strb.w	r3, [sp, #13]
    6ed0:	e010      	b.n	6ef4 <Can_43_FLEXCAN_Ipw_Init+0xf0>
    {
        Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8HwBufferCount] = CAN_43_FLEXCAN_HWOBJ_UNMAPPED;
    6ed2:	9b01      	ldr	r3, [sp, #4]
    6ed4:	785b      	ldrb	r3, [r3, #1]
    6ed6:	461a      	mov	r2, r3
    6ed8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6edc:	494b      	ldr	r1, [pc, #300]	; (700c <Can_43_FLEXCAN_Ipw_Init+0x208>)
    6ede:	0152      	lsls	r2, r2, #5
    6ee0:	4413      	add	r3, r2
    6ee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6ee6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    6eea:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6eee:	3301      	adds	r3, #1
    6ef0:	f88d 300d 	strb.w	r3, [sp, #13]
    6ef4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6ef8:	2b1f      	cmp	r3, #31
    6efa:	d9ea      	bls.n	6ed2 <Can_43_FLEXCAN_Ipw_Init+0xce>
    }
    /* Map MB index to hardware object ID */
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    6efc:	2300      	movs	r3, #0
    6efe:	f88d 300f 	strb.w	r3, [sp, #15]
    6f02:	e06b      	b.n	6fdc <Can_43_FLEXCAN_Ipw_Init+0x1d8>
    {
        Can_pHwObject = Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    6f04:	9b01      	ldr	r3, [sp, #4]
    6f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6f08:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6f0c:	009b      	lsls	r3, r3, #2
    6f0e:	4413      	add	r3, r2
    6f10:	681b      	ldr	r3, [r3, #0]
    6f12:	9302      	str	r3, [sp, #8]
        switch (Can_pHwObject->Can_eReceiveType)
    6f14:	9b02      	ldr	r3, [sp, #8]
    6f16:	699b      	ldr	r3, [r3, #24]
    6f18:	2b03      	cmp	r3, #3
    6f1a:	d006      	beq.n	6f2a <Can_43_FLEXCAN_Ipw_Init+0x126>
    6f1c:	2b03      	cmp	r3, #3
    6f1e:	d857      	bhi.n	6fd0 <Can_43_FLEXCAN_Ipw_Init+0x1cc>
    6f20:	2b00      	cmp	r3, #0
    6f22:	d023      	beq.n	6f6c <Can_43_FLEXCAN_Ipw_Init+0x168>
    6f24:	2b01      	cmp	r3, #1
    6f26:	d02f      	beq.n	6f88 <Can_43_FLEXCAN_Ipw_Init+0x184>
                break;
            }
            default:
            {
                /* don't map for enhance fifo object because of out of message buffer memory */
                break;
    6f28:	e052      	b.n	6fd0 <Can_43_FLEXCAN_Ipw_Init+0x1cc>
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    6f2a:	2300      	movs	r3, #0
    6f2c:	f88d 300e 	strb.w	r3, [sp, #14]
    6f30:	e015      	b.n	6f5e <Can_43_FLEXCAN_Ipw_Init+0x15a>
                    Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex + u8ObjIdx] = Can_pHwObject->Can_HwObjectID;
    6f32:	9b01      	ldr	r3, [sp, #4]
    6f34:	785b      	ldrb	r3, [r3, #1]
    6f36:	461c      	mov	r4, r3
    6f38:	9b02      	ldr	r3, [sp, #8]
    6f3a:	7f1b      	ldrb	r3, [r3, #28]
    6f3c:	461a      	mov	r2, r3
    6f3e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f42:	4413      	add	r3, r2
    6f44:	9a02      	ldr	r2, [sp, #8]
    6f46:	8810      	ldrh	r0, [r2, #0]
    6f48:	4930      	ldr	r1, [pc, #192]	; (700c <Can_43_FLEXCAN_Ipw_Init+0x208>)
    6f4a:	0162      	lsls	r2, r4, #5
    6f4c:	4413      	add	r3, r2
    6f4e:	4602      	mov	r2, r0
    6f50:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    6f54:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f58:	3301      	adds	r3, #1
    6f5a:	f88d 300e 	strb.w	r3, [sp, #14]
    6f5e:	9b02      	ldr	r3, [sp, #8]
    6f60:	7b9b      	ldrb	r3, [r3, #14]
    6f62:	f89d 200e 	ldrb.w	r2, [sp, #14]
    6f66:	429a      	cmp	r2, r3
    6f68:	d3e3      	bcc.n	6f32 <Can_43_FLEXCAN_Ipw_Init+0x12e>
                break;
    6f6a:	e032      	b.n	6fd2 <Can_43_FLEXCAN_Ipw_Init+0x1ce>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    6f6c:	9b01      	ldr	r3, [sp, #4]
    6f6e:	785b      	ldrb	r3, [r3, #1]
    6f70:	461c      	mov	r4, r3
    6f72:	9b02      	ldr	r3, [sp, #8]
    6f74:	7f1b      	ldrb	r3, [r3, #28]
    6f76:	4618      	mov	r0, r3
    6f78:	9b02      	ldr	r3, [sp, #8]
    6f7a:	8819      	ldrh	r1, [r3, #0]
    6f7c:	4a23      	ldr	r2, [pc, #140]	; (700c <Can_43_FLEXCAN_Ipw_Init+0x208>)
    6f7e:	0163      	lsls	r3, r4, #5
    6f80:	4403      	add	r3, r0
    6f82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                break;
    6f86:	e024      	b.n	6fd2 <Can_43_FLEXCAN_Ipw_Init+0x1ce>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    6f88:	9b01      	ldr	r3, [sp, #4]
    6f8a:	785b      	ldrb	r3, [r3, #1]
    6f8c:	461c      	mov	r4, r3
    6f8e:	9b02      	ldr	r3, [sp, #8]
    6f90:	7f1b      	ldrb	r3, [r3, #28]
    6f92:	4618      	mov	r0, r3
    6f94:	9b02      	ldr	r3, [sp, #8]
    6f96:	8819      	ldrh	r1, [r3, #0]
    6f98:	4a1c      	ldr	r2, [pc, #112]	; (700c <Can_43_FLEXCAN_Ipw_Init+0x208>)
    6f9a:	0163      	lsls	r3, r4, #5
    6f9c:	4403      	add	r3, r0
    6f9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][6U] = Can_pHwObject->Can_HwObjectID;
    6fa2:	9b01      	ldr	r3, [sp, #4]
    6fa4:	785b      	ldrb	r3, [r3, #1]
    6fa6:	4618      	mov	r0, r3
    6fa8:	9b02      	ldr	r3, [sp, #8]
    6faa:	8819      	ldrh	r1, [r3, #0]
    6fac:	4a17      	ldr	r2, [pc, #92]	; (700c <Can_43_FLEXCAN_Ipw_Init+0x208>)
    6fae:	0183      	lsls	r3, r0, #6
    6fb0:	4413      	add	r3, r2
    6fb2:	330c      	adds	r3, #12
    6fb4:	460a      	mov	r2, r1
    6fb6:	801a      	strh	r2, [r3, #0]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][7U] = Can_pHwObject->Can_HwObjectID;
    6fb8:	9b01      	ldr	r3, [sp, #4]
    6fba:	785b      	ldrb	r3, [r3, #1]
    6fbc:	4618      	mov	r0, r3
    6fbe:	9b02      	ldr	r3, [sp, #8]
    6fc0:	8819      	ldrh	r1, [r3, #0]
    6fc2:	4a12      	ldr	r2, [pc, #72]	; (700c <Can_43_FLEXCAN_Ipw_Init+0x208>)
    6fc4:	0183      	lsls	r3, r0, #6
    6fc6:	4413      	add	r3, r2
    6fc8:	330e      	adds	r3, #14
    6fca:	460a      	mov	r2, r1
    6fcc:	801a      	strh	r2, [r3, #0]
                break;
    6fce:	e000      	b.n	6fd2 <Can_43_FLEXCAN_Ipw_Init+0x1ce>
                break;
    6fd0:	bf00      	nop
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    6fd2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6fd6:	3301      	adds	r3, #1
    6fd8:	f88d 300f 	strb.w	r3, [sp, #15]
    6fdc:	9b01      	ldr	r3, [sp, #4]
    6fde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    6fe2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6fe6:	429a      	cmp	r2, r3
    6fe8:	d38c      	bcc.n	6f04 <Can_43_FLEXCAN_Ipw_Init+0x100>
            }
        }
    }
#endif /* MB_INTERRUPT_SUPPORT */
    eRetVal = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    6fea:	9b01      	ldr	r3, [sp, #4]
    6fec:	789b      	ldrb	r3, [r3, #2]
    6fee:	4618      	mov	r0, r3
    6ff0:	f002 fca0 	bl	9934 <FlexCAN_Ip_SetStopMode_Privileged>
    6ff4:	4603      	mov	r3, r0
    6ff6:	f88d 300c 	strb.w	r3, [sp, #12]

    return (Std_ReturnType)eRetVal;
    6ffa:	f89d 300c 	ldrb.w	r3, [sp, #12]
}
    6ffe:	4618      	mov	r0, r3
    7000:	b004      	add	sp, #16
    7002:	bd10      	pop	{r4, pc}
    7004:	1fff8cf8 	.word	0x1fff8cf8
    7008:	1fff8f98 	.word	0x1fff8f98
    700c:	1fff8f58 	.word	0x1fff8f58

00007010 <Can_43_FLEXCAN_Ipw_DeInit>:

/**
*   @brief      De-Initialize Controller
*/
void Can_43_FLEXCAN_Ipw_DeInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    7010:	b500      	push	{lr}
    7012:	b083      	sub	sp, #12
    7014:	9001      	str	r0, [sp, #4]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    (void)FlexCAN_Ip_Deinit(Can_pControllerConfig->Can_u8ControllerOffset);
    7016:	9b01      	ldr	r3, [sp, #4]
    7018:	789b      	ldrb	r3, [r3, #2]
    701a:	4618      	mov	r0, r3
    701c:	f002 faf6 	bl	960c <FlexCAN_Ip_Deinit_Privileged>
}
    7020:	bf00      	nop
    7022:	b003      	add	sp, #12
    7024:	f85d fb04 	ldr.w	pc, [sp], #4

00007028 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>:

/**
*   @brief      Set Error Initialization and set Controller to start Mode.
*/
static Std_ReturnType Can_43_FLEXCAN_Ipw_SetControlerErrorInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    7028:	b500      	push	{lr}
    702a:	b085      	sub	sp, #20
    702c:	9001      	str	r0, [sp, #4]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_SUCCESS;
    702e:	2300      	movs	r3, #0
    7030:	9303      	str	r3, [sp, #12]

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    7032:	9b01      	ldr	r3, [sp, #4]
    7034:	785b      	ldrb	r3, [r3, #1]
    7036:	461a      	mov	r2, r3
    7038:	4b11      	ldr	r3, [pc, #68]	; (7080 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x58>)
    703a:	5c9b      	ldrb	r3, [r3, r2]
    703c:	2b00      	cmp	r3, #0
    703e:	d012      	beq.n	7066 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x3e>
    {
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    7040:	9b01      	ldr	r3, [sp, #4]
    7042:	7a5b      	ldrb	r3, [r3, #9]
    7044:	f083 0301 	eor.w	r3, r3, #1
    7048:	b2db      	uxtb	r3, r3
    704a:	2b00      	cmp	r3, #0
    704c:	d006      	beq.n	705c <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x34>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    704e:	9b01      	ldr	r3, [sp, #4]
    7050:	789b      	ldrb	r3, [r3, #2]
    7052:	2201      	movs	r2, #1
    7054:	2104      	movs	r1, #4
    7056:	4618      	mov	r0, r3
    7058:	f002 ff48 	bl	9eec <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    705c:	9b01      	ldr	r3, [sp, #4]
    705e:	789b      	ldrb	r3, [r3, #2]
    7060:	4618      	mov	r0, r3
    7062:	f002 fee9 	bl	9e38 <FlexCAN_Ip_EnableInterrupts_Privileged>
    }
    eRetVal = FlexCAN_Ip_SetStartMode(Can_pControllerConfig->Can_u8ControllerOffset);
    7066:	9b01      	ldr	r3, [sp, #4]
    7068:	789b      	ldrb	r3, [r3, #2]
    706a:	4618      	mov	r0, r3
    706c:	f002 fc42 	bl	98f4 <FlexCAN_Ip_SetStartMode_Privileged>
    7070:	9003      	str	r0, [sp, #12]

    return (Std_ReturnType)eRetVal;
    7072:	9b03      	ldr	r3, [sp, #12]
    7074:	b2db      	uxtb	r3, r3
}
    7076:	4618      	mov	r0, r3
    7078:	b005      	add	sp, #20
    707a:	f85d fb04 	ldr.w	pc, [sp], #4
    707e:	bf00      	nop
    7080:	1fff8f98 	.word	0x1fff8f98

00007084 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>:

/**
*   @brief      Set Controller to participate the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStartMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    7084:	b500      	push	{lr}
    7086:	b087      	sub	sp, #28
    7088:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    uint8 u8HwObjRefIdx = 0U;
    708a:	2300      	movs	r3, #0
    708c:	f88d 3017 	strb.w	r3, [sp, #23]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    7090:	2300      	movs	r3, #0
    7092:	9303      	str	r3, [sp, #12]
        {
            Can_Ipw_u32CurrentCompareVal = Stm_Ip_GetCompareValue(CAN_43_FLEXCAN_TS_STM_INSTANCE, CAN_43_FLEXCAN_TS_STM_CHANNEL);
        }
    }
#endif
    eRetVal = FlexCAN_Ip_Init(Can_pControllerConfig->Can_u8ControllerOffset, \
    7094:	9b01      	ldr	r3, [sp, #4]
    7096:	7898      	ldrb	r0, [r3, #2]
    7098:	4930      	ldr	r1, [pc, #192]	; (715c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xd8>)
    709a:	9b01      	ldr	r3, [sp, #4]
    709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    709e:	681b      	ldr	r3, [r3, #0]
    70a0:	461a      	mov	r2, r3
    70a2:	f001 fbc3 	bl	882c <FlexCAN_Ip_Init_Privileged>
    70a6:	9004      	str	r0, [sp, #16]
                                                    Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], \
                                                    Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);

    if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    70a8:	9b04      	ldr	r3, [sp, #16]
    70aa:	2b00      	cmp	r3, #0
    70ac:	d14f      	bne.n	714e <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xca>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    70ae:	9b01      	ldr	r3, [sp, #4]
    70b0:	789b      	ldrb	r3, [r3, #2]
    70b2:	4618      	mov	r0, r3
    70b4:	f002 feee 	bl	9e94 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* Re-Init baudrate */
        Can_Ipw_InitBaudrate(Can_pControllerConfig);
    70b8:	9801      	ldr	r0, [sp, #4]
    70ba:	f7ff fd87 	bl	6bcc <Can_Ipw_InitBaudrate>

        /* Re-Init all Rx Objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    70be:	9801      	ldr	r0, [sp, #4]
    70c0:	f000 fa08 	bl	74d4 <Can_Ipw_InitRx>
            Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][MbIdx] = FALSE;
        }
    #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */

    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    70c4:	2300      	movs	r3, #0
    70c6:	f88d 3017 	strb.w	r3, [sp, #23]
    70ca:	e02f      	b.n	712c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
        {
            Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    70cc:	9b01      	ldr	r3, [sp, #4]
    70ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    70d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    70d4:	009b      	lsls	r3, r3, #2
    70d6:	4413      	add	r3, r2
    70d8:	681b      	ldr	r3, [r3, #0]
    70da:	9303      	str	r3, [sp, #12]

            if (FALSE == Can_pHwObject->Can_bHwObjectUsesPolling)
    70dc:	9b03      	ldr	r3, [sp, #12]
    70de:	7b1b      	ldrb	r3, [r3, #12]
    70e0:	f083 0301 	eor.w	r3, r3, #1
    70e4:	b2db      	uxtb	r3, r3
    70e6:	2b00      	cmp	r3, #0
    70e8:	d018      	beq.n	711c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x98>
            {
                switch (Can_pHwObject->Can_eReceiveType)
    70ea:	9b03      	ldr	r3, [sp, #12]
    70ec:	699b      	ldr	r3, [r3, #24]
    70ee:	2b00      	cmp	r3, #0
    70f0:	d003      	beq.n	70fa <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x76>
    70f2:	3b01      	subs	r3, #1
    70f4:	2b01      	cmp	r3, #1
    70f6:	d813      	bhi.n	7120 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9c>
    70f8:	e009      	b.n	710e <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x8a>
                {
                    case CAN_RX_NORMAL:
                    {
                        (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    70fa:	9b01      	ldr	r3, [sp, #4]
    70fc:	7898      	ldrb	r0, [r3, #2]
    70fe:	9b03      	ldr	r3, [sp, #12]
    7100:	7f19      	ldrb	r1, [r3, #28]
    7102:	9b03      	ldr	r3, [sp, #12]
    7104:	7b1b      	ldrb	r3, [r3, #12]
    7106:	2200      	movs	r2, #0
    7108:	f001 fc9c 	bl	8a44 <FlexCAN_Ip_Receive>
                                                 Can_pHwObject->Can_u8HwBufferIndex, \
                                                 NULL_PTR, \
                                                 Can_pHwObject->Can_bHwObjectUsesPolling \
                                                );
                        break;
    710c:	e009      	b.n	7122 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->pDmaDstAddr);
                        }
                        else
                    #endif
                        {
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    710e:	9b01      	ldr	r3, [sp, #4]
    7110:	789b      	ldrb	r3, [r3, #2]
    7112:	2100      	movs	r1, #0
    7114:	4618      	mov	r0, r3
    7116:	f001 fd93 	bl	8c40 <FlexCAN_Ip_RxFifo>
                        }
                        break;
    711a:	e002      	b.n	7122 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                    {
                        /* nothing to do(TX object) */
                        break;
                    }
                }
            }
    711c:	bf00      	nop
    711e:	e000      	b.n	7122 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                        break;
    7120:	bf00      	nop
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    7122:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7126:	3301      	adds	r3, #1
    7128:	f88d 3017 	strb.w	r3, [sp, #23]
    712c:	9b01      	ldr	r3, [sp, #4]
    712e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    7132:	f89d 2017 	ldrb.w	r2, [sp, #23]
    7136:	429a      	cmp	r2, r3
    7138:	d3c8      	bcc.n	70cc <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x48>
        }
    #endif /* CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON */
        eRetVal = ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControlerErrorInit(Can_pControllerConfig)) ? (FLEXCAN_STATUS_SUCCESS) : (FLEXCAN_STATUS_ERROR);
    713a:	9801      	ldr	r0, [sp, #4]
    713c:	f7ff ff74 	bl	7028 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>
    7140:	4603      	mov	r3, r0
    7142:	2b00      	cmp	r3, #0
    7144:	bf14      	ite	ne
    7146:	2301      	movne	r3, #1
    7148:	2300      	moveq	r3, #0
    714a:	b2db      	uxtb	r3, r3
    714c:	9304      	str	r3, [sp, #16]
    }
    return (Std_ReturnType)eRetVal;
    714e:	9b04      	ldr	r3, [sp, #16]
    7150:	b2db      	uxtb	r3, r3
}
    7152:	4618      	mov	r0, r3
    7154:	b007      	add	sp, #28
    7156:	f85d fb04 	ldr.w	pc, [sp], #4
    715a:	bf00      	nop
    715c:	1fff8cf8 	.word	0x1fff8cf8

00007160 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>:

/**
*   @brief      Set Controller to stop participating the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStopMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    7160:	b500      	push	{lr}
    7162:	b085      	sub	sp, #20
    7164:	9001      	str	r0, [sp, #4]
    * that are not allowed in the new state. ⌋
    * [SWS_Can_00426] ⌈ Disabling of CAN interrupts shall not be executed, when CAN
    * interrupts have been disabled by function Can_DisableControllerInterrupts.⌋
    */
    Std_ReturnType eReturnValue;
    uint8 u8HwObjRefIdx = 0U;
    7166:	2300      	movs	r3, #0
    7168:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    uint8 u8Idx = 0U;
    716c:	2300      	movs	r3, #0
    716e:	f88d 300d 	strb.w	r3, [sp, #13]

    if (FLEXCAN_STATUS_SUCCESS == FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset))
    7172:	9b01      	ldr	r3, [sp, #4]
    7174:	789b      	ldrb	r3, [r3, #2]
    7176:	4618      	mov	r0, r3
    7178:	f002 f986 	bl	9488 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    717c:	4603      	mov	r3, r0
    717e:	2b00      	cmp	r3, #0
    7180:	d160      	bne.n	7244 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xe4>
    {
    #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_ConfigPN(Can_pControllerConfig->Can_u8ControllerOffset, FALSE, NULL_PTR);
    #endif

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    7182:	9b01      	ldr	r3, [sp, #4]
    7184:	785b      	ldrb	r3, [r3, #1]
    7186:	461a      	mov	r2, r3
    7188:	4b33      	ldr	r3, [pc, #204]	; (7258 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xf8>)
    718a:	5c9b      	ldrb	r3, [r3, r2]
    718c:	2b00      	cmp	r3, #0
    718e:	d012      	beq.n	71b6 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
    {
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    7190:	9b01      	ldr	r3, [sp, #4]
    7192:	789b      	ldrb	r3, [r3, #2]
    7194:	4618      	mov	r0, r3
    7196:	f002 fe7d 	bl	9e94 <FlexCAN_Ip_DisableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    719a:	9b01      	ldr	r3, [sp, #4]
    719c:	7a5b      	ldrb	r3, [r3, #9]
    719e:	f083 0301 	eor.w	r3, r3, #1
    71a2:	b2db      	uxtb	r3, r3
    71a4:	2b00      	cmp	r3, #0
    71a6:	d006      	beq.n	71b6 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    71a8:	9b01      	ldr	r3, [sp, #4]
    71aa:	789b      	ldrb	r3, [r3, #2]
    71ac:	2200      	movs	r2, #0
    71ae:	2104      	movs	r1, #4
    71b0:	4618      	mov	r0, r3
    71b2:	f002 fe9b 	bl	9eec <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    71b6:	2300      	movs	r3, #0
    71b8:	f88d 300e 	strb.w	r3, [sp, #14]
    71bc:	e032      	b.n	7224 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xc4>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    71be:	9b01      	ldr	r3, [sp, #4]
    71c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    71c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    71c6:	009b      	lsls	r3, r3, #2
    71c8:	4413      	add	r3, r2
    71ca:	681b      	ldr	r3, [r3, #0]
    71cc:	9302      	str	r3, [sp, #8]

        if (CAN_TX_NORMAL == Can_pHwObject->Can_eReceiveType)
    71ce:	9b02      	ldr	r3, [sp, #8]
    71d0:	699b      	ldr	r3, [r3, #24]
    71d2:	2b03      	cmp	r3, #3
    71d4:	d119      	bne.n	720a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xaa>
        {
            u8Idx = 0U;
    71d6:	2300      	movs	r3, #0
    71d8:	f88d 300d 	strb.w	r3, [sp, #13]
            do
            {
                (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex + u8Idx);
    71dc:	9b01      	ldr	r3, [sp, #4]
    71de:	7898      	ldrb	r0, [r3, #2]
    71e0:	9b02      	ldr	r3, [sp, #8]
    71e2:	7f1a      	ldrb	r2, [r3, #28]
    71e4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    71e8:	4413      	add	r3, r2
    71ea:	b2db      	uxtb	r3, r3
    71ec:	4619      	mov	r1, r3
    71ee:	f002 ff03 	bl	9ff8 <FlexCAN_Ip_AbortTransfer>
                u8Idx++;
    71f2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    71f6:	3301      	adds	r3, #1
    71f8:	f88d 300d 	strb.w	r3, [sp, #13]
            }while (u8Idx < Can_pHwObject->Can_u8ObjectCount);
    71fc:	9b02      	ldr	r3, [sp, #8]
    71fe:	7b9b      	ldrb	r3, [r3, #14]
    7200:	f89d 200d 	ldrb.w	r2, [sp, #13]
    7204:	429a      	cmp	r2, r3
    7206:	d3e9      	bcc.n	71dc <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x7c>
    7208:	e007      	b.n	721a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xba>
        }
        else
        {
            (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex);
    720a:	9b01      	ldr	r3, [sp, #4]
    720c:	789a      	ldrb	r2, [r3, #2]
    720e:	9b02      	ldr	r3, [sp, #8]
    7210:	7f1b      	ldrb	r3, [r3, #28]
    7212:	4619      	mov	r1, r3
    7214:	4610      	mov	r0, r2
    7216:	f002 feef 	bl	9ff8 <FlexCAN_Ip_AbortTransfer>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    721a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    721e:	3301      	adds	r3, #1
    7220:	f88d 300e 	strb.w	r3, [sp, #14]
    7224:	9b01      	ldr	r3, [sp, #4]
    7226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    722a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    722e:	429a      	cmp	r2, r3
    7230:	d3c5      	bcc.n	71be <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x5e>
        }
    }
    eReturnValue = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    7232:	9b01      	ldr	r3, [sp, #4]
    7234:	789b      	ldrb	r3, [r3, #2]
    7236:	4618      	mov	r0, r3
    7238:	f002 fb7c 	bl	9934 <FlexCAN_Ip_SetStopMode_Privileged>
    723c:	4603      	mov	r3, r0
    723e:	f88d 300f 	strb.w	r3, [sp, #15]
    7242:	e002      	b.n	724a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xea>
    }
    else
    {
        eReturnValue = E_NOT_OK;
    7244:	2301      	movs	r3, #1
    7246:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return eReturnValue;
    724a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    724e:	4618      	mov	r0, r3
    7250:	b005      	add	sp, #20
    7252:	f85d fb04 	ldr.w	pc, [sp], #4
    7256:	bf00      	nop
    7258:	1fff8f98 	.word	0x1fff8f98

0000725c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>:
/**
*   @brief      Disable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    725c:	b500      	push	{lr}
    725e:	b083      	sub	sp, #12
    7260:	9001      	str	r0, [sp, #4]
    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    7262:	9b01      	ldr	r3, [sp, #4]
    7264:	785b      	ldrb	r3, [r3, #1]
    7266:	461a      	mov	r2, r3
    7268:	4b10      	ldr	r3, [pc, #64]	; (72ac <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    726a:	5c9b      	ldrb	r3, [r3, r2]
    726c:	2b00      	cmp	r3, #0
    726e:	d018      	beq.n	72a2 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    7270:	9b01      	ldr	r3, [sp, #4]
    7272:	789b      	ldrb	r3, [r3, #2]
    7274:	4618      	mov	r0, r3
    7276:	f002 fe0d 	bl	9e94 <FlexCAN_Ip_DisableInterrupts_Privileged>
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = FALSE;
    727a:	9b01      	ldr	r3, [sp, #4]
    727c:	785b      	ldrb	r3, [r3, #1]
    727e:	461a      	mov	r2, r3
    7280:	4b0a      	ldr	r3, [pc, #40]	; (72ac <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    7282:	2100      	movs	r1, #0
    7284:	5499      	strb	r1, [r3, r2]
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    7286:	9b01      	ldr	r3, [sp, #4]
    7288:	7a5b      	ldrb	r3, [r3, #9]
    728a:	f083 0301 	eor.w	r3, r3, #1
    728e:	b2db      	uxtb	r3, r3
    7290:	2b00      	cmp	r3, #0
    7292:	d006      	beq.n	72a2 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    7294:	9b01      	ldr	r3, [sp, #4]
    7296:	789b      	ldrb	r3, [r3, #2]
    7298:	2200      	movs	r2, #0
    729a:	2104      	movs	r1, #4
    729c:	4618      	mov	r0, r3
    729e:	f002 fe25 	bl	9eec <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
}
    72a2:	bf00      	nop
    72a4:	b003      	add	sp, #12
    72a6:	f85d fb04 	ldr.w	pc, [sp], #4
    72aa:	bf00      	nop
    72ac:	1fff8f98 	.word	0x1fff8f98

000072b0 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>:

/**
*   @brief      Enable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    72b0:	b500      	push	{lr}
    72b2:	b083      	sub	sp, #12
    72b4:	9001      	str	r0, [sp, #4]
    /*
    * [SWS_Can_00208] ⌈ The function Can_EnableControllerInterrupts shall perform no
    * action when Can_DisableControllerInterrupts has not been called before.⌋
    */
    if (FALSE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    72b6:	9b01      	ldr	r3, [sp, #4]
    72b8:	785b      	ldrb	r3, [r3, #1]
    72ba:	461a      	mov	r2, r3
    72bc:	4b11      	ldr	r3, [pc, #68]	; (7304 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    72be:	5c9b      	ldrb	r3, [r3, r2]
    72c0:	f083 0301 	eor.w	r3, r3, #1
    72c4:	b2db      	uxtb	r3, r3
    72c6:	2b00      	cmp	r3, #0
    72c8:	d018      	beq.n	72fc <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x4c>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    72ca:	9b01      	ldr	r3, [sp, #4]
    72cc:	789b      	ldrb	r3, [r3, #2]
    72ce:	4618      	mov	r0, r3
    72d0:	f002 fdb2 	bl	9e38 <FlexCAN_Ip_EnableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    72d4:	9b01      	ldr	r3, [sp, #4]
    72d6:	7a5b      	ldrb	r3, [r3, #9]
    72d8:	f083 0301 	eor.w	r3, r3, #1
    72dc:	b2db      	uxtb	r3, r3
    72de:	2b00      	cmp	r3, #0
    72e0:	d006      	beq.n	72f0 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x40>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    72e2:	9b01      	ldr	r3, [sp, #4]
    72e4:	789b      	ldrb	r3, [r3, #2]
    72e6:	2201      	movs	r2, #1
    72e8:	2104      	movs	r1, #4
    72ea:	4618      	mov	r0, r3
    72ec:	f002 fdfe 	bl	9eec <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        /* update status */
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    72f0:	9b01      	ldr	r3, [sp, #4]
    72f2:	785b      	ldrb	r3, [r3, #1]
    72f4:	461a      	mov	r2, r3
    72f6:	4b03      	ldr	r3, [pc, #12]	; (7304 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    72f8:	2101      	movs	r1, #1
    72fa:	5499      	strb	r1, [r3, r2]
    }
}
    72fc:	bf00      	nop
    72fe:	b003      	add	sp, #12
    7300:	f85d fb04 	ldr.w	pc, [sp], #4
    7304:	1fff8f98 	.word	0x1fff8f98

00007308 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>:

/**
*   @brief      Get Controller Error State
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerErrorState(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    7308:	b500      	push	{lr}
    730a:	b085      	sub	sp, #20
    730c:	9001      	str	r0, [sp, #4]
    730e:	9100      	str	r1, [sp, #0]
    uint32 Error = 0U;
    7310:	2300      	movs	r3, #0
    7312:	9303      	str	r3, [sp, #12]

    Error = FlexCAN_Ip_GetErrorStatus(Can_pControllerConfig->Can_u8ControllerOffset);
    7314:	9b01      	ldr	r3, [sp, #4]
    7316:	789b      	ldrb	r3, [r3, #2]
    7318:	4618      	mov	r0, r3
    731a:	f001 fe81 	bl	9020 <FlexCAN_Ip_GetErrorStatus>
    731e:	9003      	str	r0, [sp, #12]

    *pValue = (uint8)((Error & FLEXCAN_ESR1_FLTCONF_MASK)>>FLEXCAN_ESR1_FLTCONF_SHIFT);
    7320:	9b03      	ldr	r3, [sp, #12]
    7322:	091b      	lsrs	r3, r3, #4
    7324:	b2db      	uxtb	r3, r3
    7326:	f003 0303 	and.w	r3, r3, #3
    732a:	b2da      	uxtb	r2, r3
    732c:	9b00      	ldr	r3, [sp, #0]
    732e:	701a      	strb	r2, [r3, #0]
    return E_OK;
    7330:	2300      	movs	r3, #0
}
    7332:	4618      	mov	r0, r3
    7334:	b005      	add	sp, #20
    7336:	f85d fb04 	ldr.w	pc, [sp], #4

0000733a <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>:

/**
*   @brief      Get Controller Tx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    733a:	b500      	push	{lr}
    733c:	b083      	sub	sp, #12
    733e:	9001      	str	r0, [sp, #4]
    7340:	9100      	str	r1, [sp, #0]
     *pValue = FlexCAN_Ip_GetControllerTxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    7342:	9b01      	ldr	r3, [sp, #4]
    7344:	789b      	ldrb	r3, [r3, #2]
    7346:	4618      	mov	r0, r3
    7348:	f001 fe7c 	bl	9044 <FlexCAN_Ip_GetControllerTxErrorCounter>
    734c:	4603      	mov	r3, r0
    734e:	461a      	mov	r2, r3
    7350:	9b00      	ldr	r3, [sp, #0]
    7352:	701a      	strb	r2, [r3, #0]
     return E_OK;
    7354:	2300      	movs	r3, #0
}
    7356:	4618      	mov	r0, r3
    7358:	b003      	add	sp, #12
    735a:	f85d fb04 	ldr.w	pc, [sp], #4

0000735e <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>:

/**
*   @brief      Get Controller Rx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    735e:	b500      	push	{lr}
    7360:	b083      	sub	sp, #12
    7362:	9001      	str	r0, [sp, #4]
    7364:	9100      	str	r1, [sp, #0]

    *pValue = FlexCAN_Ip_GetControllerRxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    7366:	9b01      	ldr	r3, [sp, #4]
    7368:	789b      	ldrb	r3, [r3, #2]
    736a:	4618      	mov	r0, r3
    736c:	f001 fe7c 	bl	9068 <FlexCAN_Ip_GetControllerRxErrorCounter>
    7370:	4603      	mov	r3, r0
    7372:	461a      	mov	r2, r3
    7374:	9b00      	ldr	r3, [sp, #0]
    7376:	701a      	strb	r2, [r3, #0]
    return E_OK;
    7378:	2300      	movs	r3, #0
}
    737a:	4618      	mov	r0, r3
    737c:	b003      	add	sp, #12
    737e:	f85d fb04 	ldr.w	pc, [sp], #4

00007382 <Can_43_FLEXCAN_Ipw_Write>:
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
    const Can_PduType * PduInfo
)
{
    7382:	b510      	push	{r4, lr}
    7384:	b08c      	sub	sp, #48	; 0x30
    7386:	9005      	str	r0, [sp, #20]
    7388:	9104      	str	r1, [sp, #16]
    738a:	9203      	str	r2, [sp, #12]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    738c:	2301      	movs	r3, #1
    738e:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_DataInfoType DataInfo;
    uint8 u8ObjIdx = 0U;
    7390:	2300      	movs	r3, #0
    7392:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
#if (CAN_43_FLEXCAN_TRIGGER_TRANSMIT_USED == STD_ON)
    PduInfoType CanIf_PduInfo;
    uint8 Data[64U];
#endif

    DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    7396:	2300      	movs	r3, #0
    7398:	9306      	str	r3, [sp, #24]
    DataInfo.data_length = 0U;
    739a:	2300      	movs	r3, #0
    739c:	9307      	str	r3, [sp, #28]
    DataInfo.fd_padding = 0U;
    739e:	2300      	movs	r3, #0
    73a0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    DataInfo.fd_enable = FALSE;
    73a4:	2300      	movs	r3, #0
    73a6:	f88d 3020 	strb.w	r3, [sp, #32]
    DataInfo.enable_brs = FALSE;
    73aa:	2300      	movs	r3, #0
    73ac:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    DataInfo.is_remote = FALSE;
    73b0:	2300      	movs	r3, #0
    73b2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    DataInfo.is_polling = FALSE;
    73b6:	2300      	movs	r3, #0
    73b8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (CAN_TX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    73bc:	9b04      	ldr	r3, [sp, #16]
    73be:	699b      	ldr	r3, [r3, #24]
    73c0:	2b03      	cmp	r3, #3
    73c2:	d173      	bne.n	74ac <Can_43_FLEXCAN_Ipw_Write+0x12a>
    {
        DataInfo.msg_id_type = ((PduInfo->id & CAN_43_FLEXCAN_EXTENDED_ID_U32) != 0U) ? FLEXCAN_MSG_ID_EXT : FLEXCAN_MSG_ID_STD;
    73c4:	9b03      	ldr	r3, [sp, #12]
    73c6:	681b      	ldr	r3, [r3, #0]
    73c8:	0fdb      	lsrs	r3, r3, #31
    73ca:	9306      	str	r3, [sp, #24]
        if (Can_pHwObjectConfig->Can_u8PayloadLength <=  PduInfo->length)
    73cc:	9b04      	ldr	r3, [sp, #16]
    73ce:	7c1a      	ldrb	r2, [r3, #16]
    73d0:	9b03      	ldr	r3, [sp, #12]
    73d2:	799b      	ldrb	r3, [r3, #6]
    73d4:	429a      	cmp	r2, r3
    73d6:	d803      	bhi.n	73e0 <Can_43_FLEXCAN_Ipw_Write+0x5e>
        {
            DataInfo.data_length = Can_pHwObjectConfig->Can_u8PayloadLength;
    73d8:	9b04      	ldr	r3, [sp, #16]
    73da:	7c1b      	ldrb	r3, [r3, #16]
    73dc:	9307      	str	r3, [sp, #28]
    73de:	e002      	b.n	73e6 <Can_43_FLEXCAN_Ipw_Write+0x64>
        }
        else
        {
            DataInfo.data_length = PduInfo->length;
    73e0:	9b03      	ldr	r3, [sp, #12]
    73e2:	799b      	ldrb	r3, [r3, #6]
    73e4:	9307      	str	r3, [sp, #28]
        }
#if (CAN_43_FLEXCAN_FEATURE_HAS_FD == STD_ON)
        DataInfo.fd_padding = Can_pHwObjectConfig->Can_u8PaddingValue;
    73e6:	9b04      	ldr	r3, [sp, #16]
    73e8:	7c5b      	ldrb	r3, [r3, #17]
    73ea:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        DataInfo.fd_enable = ((PduInfo->id & CAN_43_FLEXCAN_FD_FRAME_U32) != 0U) ? TRUE : FALSE;
    73ee:	9b03      	ldr	r3, [sp, #12]
    73f0:	681b      	ldr	r3, [r3, #0]
    73f2:	0f9b      	lsrs	r3, r3, #30
    73f4:	f003 0301 	and.w	r3, r3, #1
    73f8:	2b00      	cmp	r3, #0
    73fa:	bf14      	ite	ne
    73fc:	2301      	movne	r3, #1
    73fe:	2300      	moveq	r3, #0
    7400:	b2db      	uxtb	r3, r3
    7402:	f88d 3020 	strb.w	r3, [sp, #32]
    #if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
            DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID]].Can_bBitRateSwitch;
    #else
        DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bBitRateSwitch;
    7406:	9b05      	ldr	r3, [sp, #20]
    7408:	6a1a      	ldr	r2, [r3, #32]
    740a:	9b05      	ldr	r3, [sp, #20]
    740c:	8b9b      	ldrh	r3, [r3, #28]
    740e:	4619      	mov	r1, r3
    7410:	2316      	movs	r3, #22
    7412:	fb01 f303 	mul.w	r3, r1, r3
    7416:	4413      	add	r3, r2
    7418:	781b      	ldrb	r3, [r3, #0]
    741a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    #endif
#endif
        DataInfo.is_remote = FALSE;
    741e:	2300      	movs	r3, #0
    7420:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        DataInfo.is_polling = Can_pHwObjectConfig->Can_bHwObjectUsesPolling;
    7424:	9b04      	ldr	r3, [sp, #16]
    7426:	7b1b      	ldrb	r3, [r3, #12]
    7428:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        do
        {
            eRetVal = FlexCAN_Ip_GetTransferStatus(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx);
    742c:	9b05      	ldr	r3, [sp, #20]
    742e:	7898      	ldrb	r0, [r3, #2]
    7430:	9b04      	ldr	r3, [sp, #16]
    7432:	7f1a      	ldrb	r2, [r3, #28]
    7434:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    7438:	4413      	add	r3, r2
    743a:	b2db      	uxtb	r3, r3
    743c:	4619      	mov	r1, r3
    743e:	f001 fcdd 	bl	8dfc <FlexCAN_Ip_GetTransferStatus>
    7442:	900b      	str	r0, [sp, #44]	; 0x2c
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    7444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7446:	2b00      	cmp	r3, #0
    7448:	d122      	bne.n	7490 <Can_43_FLEXCAN_Ipw_Write+0x10e>
            {
                #if ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))
                Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = PduInfo->swPduHandle;
    744a:	9b05      	ldr	r3, [sp, #20]
    744c:	785b      	ldrb	r3, [r3, #1]
    744e:	461c      	mov	r4, r3
    7450:	9b04      	ldr	r3, [sp, #16]
    7452:	7f1b      	ldrb	r3, [r3, #28]
    7454:	461a      	mov	r2, r3
    7456:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    745a:	4413      	add	r3, r2
    745c:	9a03      	ldr	r2, [sp, #12]
    745e:	8890      	ldrh	r0, [r2, #4]
    7460:	491b      	ldr	r1, [pc, #108]	; (74d0 <Can_43_FLEXCAN_Ipw_Write+0x14e>)
    7462:	0162      	lsls	r2, r4, #5
    7464:	4413      	add	r3, r2
    7466:	4602      	mov	r2, r0
    7468:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    }
                }
                else
                {
            #endif
                    eRetVal = FlexCAN_Ip_Send(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx, &DataInfo, PduInfo->id, PduInfo->sdu);
    746c:	9b05      	ldr	r3, [sp, #20]
    746e:	7898      	ldrb	r0, [r3, #2]
    7470:	9b04      	ldr	r3, [sp, #16]
    7472:	7f1a      	ldrb	r2, [r3, #28]
    7474:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    7478:	4413      	add	r3, r2
    747a:	b2d9      	uxtb	r1, r3
    747c:	9b03      	ldr	r3, [sp, #12]
    747e:	681c      	ldr	r4, [r3, #0]
    7480:	9b03      	ldr	r3, [sp, #12]
    7482:	689b      	ldr	r3, [r3, #8]
    7484:	aa06      	add	r2, sp, #24
    7486:	9300      	str	r3, [sp, #0]
    7488:	4623      	mov	r3, r4
    748a:	f001 fa4b 	bl	8924 <FlexCAN_Ip_Send>
    748e:	900b      	str	r0, [sp, #44]	; 0x2c
                /* Revert to FALSE due to the MB was not transmitted successfully */
                Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = FALSE;
            }
            #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */
            }
            u8ObjIdx++;
    7490:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    7494:	3301      	adds	r3, #1
    7496:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        } while ((u8ObjIdx < Can_pHwObjectConfig->Can_u8ObjectCount) && (FLEXCAN_STATUS_BUSY == eRetVal));
    749a:	9b04      	ldr	r3, [sp, #16]
    749c:	7b9b      	ldrb	r3, [r3, #14]
    749e:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    74a2:	429a      	cmp	r2, r3
    74a4:	d202      	bcs.n	74ac <Can_43_FLEXCAN_Ipw_Write+0x12a>
    74a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    74a8:	2b02      	cmp	r3, #2
    74aa:	d0bf      	beq.n	742c <Can_43_FLEXCAN_Ipw_Write+0xaa>
    }

    if ((FLEXCAN_STATUS_SUCCESS != eRetVal) && (FLEXCAN_STATUS_BUSY != eRetVal))
    74ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    74ae:	2b00      	cmp	r3, #0
    74b0:	d004      	beq.n	74bc <Can_43_FLEXCAN_Ipw_Write+0x13a>
    74b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    74b4:	2b02      	cmp	r3, #2
    74b6:	d001      	beq.n	74bc <Can_43_FLEXCAN_Ipw_Write+0x13a>
    {
        eRetVal = FLEXCAN_STATUS_ERROR;
    74b8:	2301      	movs	r3, #1
    74ba:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    return ((FLEXCAN_STATUS_BUSY == eRetVal) ? ((Std_ReturnType)CAN_BUSY) : ((Std_ReturnType)eRetVal));
    74bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    74be:	2b02      	cmp	r3, #2
    74c0:	d002      	beq.n	74c8 <Can_43_FLEXCAN_Ipw_Write+0x146>
    74c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    74c4:	b2db      	uxtb	r3, r3
    74c6:	e000      	b.n	74ca <Can_43_FLEXCAN_Ipw_Write+0x148>
    74c8:	2302      	movs	r3, #2
}
    74ca:	4618      	mov	r0, r3
    74cc:	b00c      	add	sp, #48	; 0x30
    74ce:	bd10      	pop	{r4, pc}
    74d0:	1fff8f18 	.word	0x1fff8f18

000074d4 <Can_Ipw_InitRx>:

static void Can_Ipw_InitRx(const Can_43_FLEXCAN_ControllerConfigType * Can_pController)
{
    74d4:	b500      	push	{lr}
    74d6:	b089      	sub	sp, #36	; 0x24
    74d8:	9001      	str	r0, [sp, #4]
    uint8 u8HwObjRefIdx = 0U;
    74da:	2300      	movs	r3, #0
    74dc:	f88d 301f 	strb.w	r3, [sp, #31]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    Flexcan_Ip_DataInfoType DataInfo;

    /* This function just is called only if controller is in freeze mode */
    /* Always enable individual mask , Already in freeze mode */
    (void)FlexCAN_Ip_SetRxMaskType(Can_pController->Can_u8ControllerOffset, FLEXCAN_RX_MASK_INDIVIDUAL);
    74e0:	9b01      	ldr	r3, [sp, #4]
    74e2:	789b      	ldrb	r3, [r3, #2]
    74e4:	2101      	movs	r1, #1
    74e6:	4618      	mov	r0, r3
    74e8:	f002 fa42 	bl	9970 <FlexCAN_Ip_SetRxMaskType_Privileged>

    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    74ec:	2300      	movs	r3, #0
    74ee:	f88d 301f 	strb.w	r3, [sp, #31]
    74f2:	e03a      	b.n	756a <Can_Ipw_InitRx+0x96>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pController->Can_ppHwObject[u8HwObjRefIdx];
    74f4:	9b01      	ldr	r3, [sp, #4]
    74f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    74f8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    74fc:	009b      	lsls	r3, r3, #2
    74fe:	4413      	add	r3, r2
    7500:	681b      	ldr	r3, [r3, #0]
    7502:	9306      	str	r3, [sp, #24]

        if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    7504:	9b06      	ldr	r3, [sp, #24]
    7506:	699b      	ldr	r3, [r3, #24]
    7508:	2b00      	cmp	r3, #0
    750a:	d121      	bne.n	7550 <Can_Ipw_InitRx+0x7c>
        {
            DataInfo.fd_enable = FALSE;
    750c:	2300      	movs	r3, #0
    750e:	f88d 3010 	strb.w	r3, [sp, #16]
            DataInfo.data_length = 0U;
    7512:	2300      	movs	r3, #0
    7514:	9303      	str	r3, [sp, #12]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    7516:	9b06      	ldr	r3, [sp, #24]
    7518:	689b      	ldr	r3, [r3, #8]
    751a:	2b00      	cmp	r3, #0
    751c:	d002      	beq.n	7524 <Can_Ipw_InitRx+0x50>
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_EXT;
    751e:	2301      	movs	r3, #1
    7520:	9302      	str	r3, [sp, #8]
    7522:	e001      	b.n	7528 <Can_Ipw_InitRx+0x54>
            }
            else
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    7524:	2300      	movs	r3, #0
    7526:	9302      	str	r3, [sp, #8]
            }
            (void)FlexCAN_Ip_ConfigRxMb(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, &DataInfo, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterCode);
    7528:	9b01      	ldr	r3, [sp, #4]
    752a:	7898      	ldrb	r0, [r3, #2]
    752c:	9b06      	ldr	r3, [sp, #24]
    752e:	7f19      	ldrb	r1, [r3, #28]
    7530:	9b06      	ldr	r3, [sp, #24]
    7532:	695b      	ldr	r3, [r3, #20]
    7534:	681b      	ldr	r3, [r3, #0]
    7536:	aa02      	add	r2, sp, #8
    7538:	f001 fa40 	bl	89bc <FlexCAN_Ip_ConfigRxMb>
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterMask);
    753c:	9b01      	ldr	r3, [sp, #4]
    753e:	7898      	ldrb	r0, [r3, #2]
    7540:	9b06      	ldr	r3, [sp, #24]
    7542:	7f19      	ldrb	r1, [r3, #28]
    7544:	9b06      	ldr	r3, [sp, #24]
    7546:	695b      	ldr	r3, [r3, #20]
    7548:	685b      	ldr	r3, [r3, #4]
    754a:	461a      	mov	r2, r3
    754c:	f001 ffc8 	bl	94e0 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
        }

        if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    7550:	9b06      	ldr	r3, [sp, #24]
    7552:	699b      	ldr	r3, [r3, #24]
    7554:	2b01      	cmp	r3, #1
    7556:	d103      	bne.n	7560 <Can_Ipw_InitRx+0x8c>
        {
            Can_Ipw_InitLegacyFifoFilter(Can_pController, Can_pHwObject);
    7558:	9906      	ldr	r1, [sp, #24]
    755a:	9801      	ldr	r0, [sp, #4]
    755c:	f7ff f913 	bl	6786 <Can_Ipw_InitLegacyFifoFilter>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    7560:	f89d 301f 	ldrb.w	r3, [sp, #31]
    7564:	3301      	adds	r3, #1
    7566:	f88d 301f 	strb.w	r3, [sp, #31]
    756a:	9b01      	ldr	r3, [sp, #4]
    756c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    7570:	f89d 201f 	ldrb.w	r2, [sp, #31]
    7574:	429a      	cmp	r2, r3
    7576:	d3bd      	bcc.n	74f4 <Can_Ipw_InitRx+0x20>
        }
    }
}
    7578:	bf00      	nop
    757a:	bf00      	nop
    757c:	b009      	add	sp, #36	; 0x24
    757e:	f85d fb04 	ldr.w	pc, [sp], #4

00007582 <Can_43_FLEXCAN_Ipw_MainFunction_Mode>:
void Can_43_FLEXCAN_Ipw_MainFunction_Mode
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    Can_ControllerStateType * Can_pControllerState
)
{
    7582:	b500      	push	{lr}
    7584:	b083      	sub	sp, #12
    7586:	9001      	str	r0, [sp, #4]
    7588:	9100      	str	r1, [sp, #0]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    if (CAN_CS_STARTED == *Can_pControllerState)
    758a:	9b00      	ldr	r3, [sp, #0]
    758c:	681b      	ldr	r3, [r3, #0]
    758e:	2b01      	cmp	r3, #1
    7590:	d114      	bne.n	75bc <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x3a>
    {
        if (FALSE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    7592:	9b01      	ldr	r3, [sp, #4]
    7594:	789b      	ldrb	r3, [r3, #2]
    7596:	4618      	mov	r0, r3
    7598:	f002 f994 	bl	98c4 <FlexCAN_Ip_GetStartMode_Privileged>
    759c:	4603      	mov	r3, r0
    759e:	f083 0301 	eor.w	r3, r3, #1
    75a2:	b2db      	uxtb	r3, r3
    75a4:	2b00      	cmp	r3, #0
    75a6:	d01e      	beq.n	75e6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        {
            *Can_pControllerState = CAN_CS_STOPPED;
    75a8:	9b00      	ldr	r3, [sp, #0]
    75aa:	2202      	movs	r2, #2
    75ac:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STOPPED);
    75ae:	9b01      	ldr	r3, [sp, #4]
    75b0:	781b      	ldrb	r3, [r3, #0]
    75b2:	2102      	movs	r1, #2
    75b4:	4618      	mov	r0, r3
    75b6:	f006 fd7b 	bl	e0b0 <CanIf_ControllerModeIndication>
    }
    else
    {
        /* nothing to do */
    }
}
    75ba:	e014      	b.n	75e6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
    else if (CAN_CS_STOPPED == *Can_pControllerState)
    75bc:	9b00      	ldr	r3, [sp, #0]
    75be:	681b      	ldr	r3, [r3, #0]
    75c0:	2b02      	cmp	r3, #2
    75c2:	d110      	bne.n	75e6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        if (TRUE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    75c4:	9b01      	ldr	r3, [sp, #4]
    75c6:	789b      	ldrb	r3, [r3, #2]
    75c8:	4618      	mov	r0, r3
    75ca:	f002 f97b 	bl	98c4 <FlexCAN_Ip_GetStartMode_Privileged>
    75ce:	4603      	mov	r3, r0
    75d0:	2b00      	cmp	r3, #0
    75d2:	d008      	beq.n	75e6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
            *Can_pControllerState = CAN_CS_STARTED;
    75d4:	9b00      	ldr	r3, [sp, #0]
    75d6:	2201      	movs	r2, #1
    75d8:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STARTED);
    75da:	9b01      	ldr	r3, [sp, #4]
    75dc:	781b      	ldrb	r3, [r3, #0]
    75de:	2101      	movs	r1, #1
    75e0:	4618      	mov	r0, r3
    75e2:	f006 fd65 	bl	e0b0 <CanIf_ControllerModeIndication>
}
    75e6:	bf00      	nop
    75e8:	b003      	add	sp, #12
    75ea:	f85d fb04 	ldr.w	pc, [sp], #4

000075ee <Can_43_FLEXCAN_Ipw_ProcessHwObject>:
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_ConfigType * Can_pConfig,
        uint8 u8MbIdx,
        Can_43_FLEXCAN_MbType mbType
    )
    {
    75ee:	b500      	push	{lr}
    75f0:	b085      	sub	sp, #20
    75f2:	9003      	str	r0, [sp, #12]
    75f4:	9102      	str	r1, [sp, #8]
    75f6:	9300      	str	r3, [sp, #0]
    75f8:	4613      	mov	r3, r2
    75fa:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (mbType)
    75fe:	9b00      	ldr	r3, [sp, #0]
    7600:	2b03      	cmp	r3, #3
    7602:	d009      	beq.n	7618 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x2a>
    7604:	9b00      	ldr	r3, [sp, #0]
    7606:	2b03      	cmp	r3, #3
    7608:	d821      	bhi.n	764e <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
    760a:	9b00      	ldr	r3, [sp, #0]
    760c:	2b00      	cmp	r3, #0
    760e:	d00c      	beq.n	762a <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x3c>
    7610:	9b00      	ldr	r3, [sp, #0]
    7612:	2b01      	cmp	r3, #1
    7614:	d012      	beq.n	763c <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x4e>
                break;
            }
            default:
            {
                /* prevent misra */
                break;
    7616:	e01a      	b.n	764e <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
                Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    7618:	9b02      	ldr	r3, [sp, #8]
    761a:	691b      	ldr	r3, [r3, #16]
    761c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7620:	4619      	mov	r1, r3
    7622:	9803      	ldr	r0, [sp, #12]
    7624:	f7ff fb0c 	bl	6c40 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>
                break;
    7628:	e012      	b.n	7650 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    762a:	9b02      	ldr	r3, [sp, #8]
    762c:	691b      	ldr	r3, [r3, #16]
    762e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7632:	4619      	mov	r1, r3
    7634:	9803      	ldr	r0, [sp, #12]
    7636:	f7ff fb4f 	bl	6cd8 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    763a:	e009      	b.n	7650 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                    Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    763c:	9b02      	ldr	r3, [sp, #8]
    763e:	691b      	ldr	r3, [r3, #16]
    7640:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7644:	4619      	mov	r1, r3
    7646:	9803      	ldr	r0, [sp, #12]
    7648:	f7ff fb46 	bl	6cd8 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    764c:	e000      	b.n	7650 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                break;
    764e:	bf00      	nop
            }
        }
    }
    7650:	bf00      	nop
    7652:	b005      	add	sp, #20
    7654:	f85d fb04 	ldr.w	pc, [sp], #4

00007658 <Can_43_FLEXCAN_CommonIrqCallback>:
void Can_43_FLEXCAN_CommonIrqCallback(uint8 u8Instance,
                           Flexcan_Ip_EventType event,
                           uint32 u32buffIdx,
                           const Flexcan_Ip_StateType *driverState
                          )
{
    7658:	b500      	push	{lr}
    765a:	b085      	sub	sp, #20
    765c:	9102      	str	r1, [sp, #8]
    765e:	9201      	str	r2, [sp, #4]
    7660:	9300      	str	r3, [sp, #0]
    7662:	4603      	mov	r3, r0
    7664:	f88d 300f 	strb.w	r3, [sp, #15]
    else
    {
#endif /* CAN_43_FLEXCAN_FEATURE_HAS_ENHANCED_RX_FIFO */
    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        /* This callback is just used for interrupt buffter */
        if (FALSE == (driverState->mbs[u32buffIdx].isPolling))
    7668:	9a00      	ldr	r2, [sp, #0]
    766a:	9b01      	ldr	r3, [sp, #4]
    766c:	011b      	lsls	r3, r3, #4
    766e:	4413      	add	r3, r2
    7670:	3308      	adds	r3, #8
    7672:	781b      	ldrb	r3, [r3, #0]
    7674:	f083 0301 	eor.w	r3, r3, #1
    7678:	b2db      	uxtb	r3, r3
    767a:	2b00      	cmp	r3, #0
    767c:	d03b      	beq.n	76f6 <Can_43_FLEXCAN_CommonIrqCallback+0x9e>
    767e:	9b02      	ldr	r3, [sp, #8]
    7680:	2b04      	cmp	r3, #4
    7682:	d83a      	bhi.n	76fa <Can_43_FLEXCAN_CommonIrqCallback+0xa2>
    7684:	a201      	add	r2, pc, #4	; (adr r2, 768c <Can_43_FLEXCAN_CommonIrqCallback+0x34>)
    7686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    768a:	bf00      	nop
    768c:	000076b3 	.word	0x000076b3
    7690:	000076c5 	.word	0x000076c5
    7694:	000076d7 	.word	0x000076d7
    7698:	000076e7 	.word	0x000076e7
    769c:	000076a1 	.word	0x000076a1
        {
            switch (event)
            {
                case FLEXCAN_EVENT_TX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_TX_NORMAL);
    76a0:	9b01      	ldr	r3, [sp, #4]
    76a2:	b2d9      	uxtb	r1, r3
    76a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    76a8:	2203      	movs	r2, #3
    76aa:	4618      	mov	r0, r3
    76ac:	f7fe ff86 	bl	65bc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    76b0:	e024      	b.n	76fc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_NORMAL);
    76b2:	9b01      	ldr	r3, [sp, #4]
    76b4:	b2d9      	uxtb	r1, r3
    76b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    76ba:	2200      	movs	r2, #0
    76bc:	4618      	mov	r0, r3
    76be:	f7fe ff7d 	bl	65bc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    76c2:	e01b      	b.n	76fc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_LEGACY_FIFO);
    76c4:	9b01      	ldr	r3, [sp, #4]
    76c6:	b2d9      	uxtb	r1, r3
    76c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    76cc:	2201      	movs	r2, #1
    76ce:	4618      	mov	r0, r3
    76d0:	f7fe ff74 	bl	65bc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    76d4:	e012      	b.n	76fc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_WARNING:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 6U, CAN_RX_LEGACY_FIFO);
    76d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    76da:	2201      	movs	r2, #1
    76dc:	2106      	movs	r1, #6
    76de:	4618      	mov	r0, r3
    76e0:	f7fe ff6c 	bl	65bc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    76e4:	e00a      	b.n	76fc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_OVERFLOW:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 7U, CAN_RX_LEGACY_FIFO);
    76e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    76ea:	2201      	movs	r2, #1
    76ec:	2107      	movs	r1, #7
    76ee:	4618      	mov	r0, r3
    76f0:	f7fe ff64 	bl	65bc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    76f4:	e002      	b.n	76fc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                {
                    /* nothing to do */
                    break;
                }
            }
        }
    76f6:	bf00      	nop
    76f8:	e000      	b.n	76fc <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                    break;
    76fa:	bf00      	nop
        Can_43_FLEXCAN_ProcessPNInterrupt(u8Instance);
    }
#endif /* (CAN_43_FLEXCAN_FEATURE_HAS_PRETENDED_NETWORKING == STD_ON) */
    (void)u32buffIdx;
    (void)driverState;
}
    76fc:	bf00      	nop
    76fe:	b005      	add	sp, #20
    7700:	f85d fb04 	ldr.w	pc, [sp], #4

00007704 <Can_43_FLEXCAN_ErrorIrqCallback>:
void Can_43_FLEXCAN_ErrorIrqCallback(uint8 u8Instance,
                          Flexcan_Ip_EventType event,
                          uint32 u32ErrStatus,
                          const Flexcan_Ip_StateType *driverState
                         )
{
    7704:	b500      	push	{lr}
    7706:	b085      	sub	sp, #20
    7708:	9102      	str	r1, [sp, #8]
    770a:	9201      	str	r2, [sp, #4]
    770c:	9300      	str	r3, [sp, #0]
    770e:	4603      	mov	r3, r0
    7710:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) driverState; /* not used yet */
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON)
    (void) u32ErrStatus; /* prevent compiler warning */
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON) */

    switch (event)
    7714:	9b02      	ldr	r3, [sp, #8]
    7716:	2b07      	cmp	r3, #7
    7718:	d105      	bne.n	7726 <Can_43_FLEXCAN_ErrorIrqCallback+0x22>
        }
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON) */
        /* this function is called for both interrupt & polling */
        case FLEXCAN_EVENT_BUSOFF:
        {
            Can_43_FLEXCAN_ProcessBusOffInterrupt(u8Instance);
    771a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    771e:	4618      	mov	r0, r3
    7720:	f7fe ff8e 	bl	6640 <Can_43_FLEXCAN_ProcessBusOffInterrupt>
            break;
    7724:	e000      	b.n	7728 <Can_43_FLEXCAN_ErrorIrqCallback+0x24>
        }
        default:
        {
            /* nothing to do */
            break;
    7726:	bf00      	nop
        }
    }
}
    7728:	bf00      	nop
    772a:	b005      	add	sp, #20
    772c:	f85d fb04 	ldr.w	pc, [sp], #4

00007730 <FlexCAN_SetRxFifoGlobalMask>:
 *
 * @param[in]   base  The FlexCAN base address
 * @param[in]   Mask     Sets mask
 */
static inline void FlexCAN_SetRxFifoGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    7730:	b082      	sub	sp, #8
    7732:	9001      	str	r0, [sp, #4]
    7734:	9100      	str	r1, [sp, #0]
    (base->RXFGMASK) = Mask;
    7736:	9b01      	ldr	r3, [sp, #4]
    7738:	9a00      	ldr	r2, [sp, #0]
    773a:	649a      	str	r2, [r3, #72]	; 0x48
}
    773c:	bf00      	nop
    773e:	b002      	add	sp, #8
    7740:	4770      	bx	lr

00007742 <FlexCAN_SetTDCOffset>:
 */
static inline void FlexCAN_SetTDCOffset(FLEXCAN_Type * base,
                                        boolean enable,
                                        uint8 offset
                                       )
{
    7742:	b084      	sub	sp, #16
    7744:	9001      	str	r0, [sp, #4]
    7746:	460b      	mov	r3, r1
    7748:	f88d 3003 	strb.w	r3, [sp, #3]
    774c:	4613      	mov	r3, r2
    774e:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 tmp;

    tmp = base->FDCTRL;
    7752:	9b01      	ldr	r3, [sp, #4]
    7754:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    7758:	9303      	str	r3, [sp, #12]
    tmp &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    775a:	9b03      	ldr	r3, [sp, #12]
    775c:	f423 431f 	bic.w	r3, r3, #40704	; 0x9f00
    7760:	9303      	str	r3, [sp, #12]

    if (enable)
    7762:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7766:	2b00      	cmp	r3, #0
    7768:	d00b      	beq.n	7782 <FlexCAN_SetTDCOffset+0x40>
    {
        tmp = tmp | FLEXCAN_FDCTRL_TDCEN_MASK;
    776a:	9b03      	ldr	r3, [sp, #12]
    776c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    7770:	9303      	str	r3, [sp, #12]
        tmp = tmp | FLEXCAN_FDCTRL_TDCOFF(offset);
    7772:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7776:	021b      	lsls	r3, r3, #8
    7778:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    777c:	9a03      	ldr	r2, [sp, #12]
    777e:	4313      	orrs	r3, r2
    7780:	9303      	str	r3, [sp, #12]
    }

    base->FDCTRL = tmp;
    7782:	9b01      	ldr	r3, [sp, #4]
    7784:	9a03      	ldr	r2, [sp, #12]
    7786:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    778a:	bf00      	nop
    778c:	b004      	add	sp, #16
    778e:	4770      	bx	lr

00007790 <FlexCAN_IsEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsEnabled(const FLEXCAN_Type * pBase)
{
    7790:	b082      	sub	sp, #8
    7792:	9001      	str	r0, [sp, #4]
    return (((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U) ? FALSE : TRUE;
    7794:	9b01      	ldr	r3, [sp, #4]
    7796:	681b      	ldr	r3, [r3, #0]
    7798:	43db      	mvns	r3, r3
    779a:	0fdb      	lsrs	r3, r3, #31
    779c:	b2db      	uxtb	r3, r3
}
    779e:	4618      	mov	r0, r3
    77a0:	b002      	add	sp, #8
    77a2:	4770      	bx	lr

000077a4 <FlexCAN_SetFDEnabled>:
 */
static inline void FlexCAN_SetFDEnabled(FLEXCAN_Type * base,
                                        boolean enableFD,
                                        boolean enableBRS
                                       )
{
    77a4:	b082      	sub	sp, #8
    77a6:	9001      	str	r0, [sp, #4]
    77a8:	460b      	mov	r3, r1
    77aa:	f88d 3003 	strb.w	r3, [sp, #3]
    77ae:	4613      	mov	r3, r2
    77b0:	f88d 3002 	strb.w	r3, [sp, #2]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FDEN_MASK) | FLEXCAN_MCR_FDEN(enableFD ? 1UL : 0UL);
    77b4:	9b01      	ldr	r3, [sp, #4]
    77b6:	681b      	ldr	r3, [r3, #0]
    77b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    77bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    77c0:	2a00      	cmp	r2, #0
    77c2:	d002      	beq.n	77ca <FlexCAN_SetFDEnabled+0x26>
    77c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    77c8:	e000      	b.n	77cc <FlexCAN_SetFDEnabled+0x28>
    77ca:	2200      	movs	r2, #0
    77cc:	431a      	orrs	r2, r3
    77ce:	9b01      	ldr	r3, [sp, #4]
    77d0:	601a      	str	r2, [r3, #0]

    /* Enable BitRate Switch support from BRS_TX_MB field or ignore it */
    base->FDCTRL = (base->FDCTRL & ~FLEXCAN_FDCTRL_FDRATE_MASK) | FLEXCAN_FDCTRL_FDRATE(enableBRS ? 1UL : 0UL);
    77d2:	9b01      	ldr	r3, [sp, #4]
    77d4:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    77d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    77dc:	f89d 2002 	ldrb.w	r2, [sp, #2]
    77e0:	2a00      	cmp	r2, #0
    77e2:	d002      	beq.n	77ea <FlexCAN_SetFDEnabled+0x46>
    77e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    77e8:	e000      	b.n	77ec <FlexCAN_SetFDEnabled+0x48>
    77ea:	2200      	movs	r2, #0
    77ec:	431a      	orrs	r2, r3
    77ee:	9b01      	ldr	r3, [sp, #4]
    77f0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00

    /* Disable Transmission Delay Compensation by default */
    base->FDCTRL &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    77f4:	9b01      	ldr	r3, [sp, #4]
    77f6:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    77fa:	f423 421f 	bic.w	r2, r3, #40704	; 0x9f00
    77fe:	9b01      	ldr	r3, [sp, #4]
    7800:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    7804:	bf00      	nop
    7806:	b002      	add	sp, #8
    7808:	4770      	bx	lr

0000780a <FlexCAN_SetListenOnlyMode>:
 *
 * @param   base    The FlexCAN base address
 * @param   enable  TRUE to enable; FALSE to disable
 */
static inline void FlexCAN_SetListenOnlyMode(FLEXCAN_Type * base, boolean enableListenOnly)
{
    780a:	b082      	sub	sp, #8
    780c:	9001      	str	r0, [sp, #4]
    780e:	460b      	mov	r3, r1
    7810:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(enableListenOnly ? 1UL : 0UL);
    7814:	9b01      	ldr	r3, [sp, #4]
    7816:	685b      	ldr	r3, [r3, #4]
    7818:	f023 0308 	bic.w	r3, r3, #8
    781c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7820:	2a00      	cmp	r2, #0
    7822:	d001      	beq.n	7828 <FlexCAN_SetListenOnlyMode+0x1e>
    7824:	2208      	movs	r2, #8
    7826:	e000      	b.n	782a <FlexCAN_SetListenOnlyMode+0x20>
    7828:	2200      	movs	r2, #0
    782a:	431a      	orrs	r2, r3
    782c:	9b01      	ldr	r3, [sp, #4]
    782e:	605a      	str	r2, [r3, #4]
}
    7830:	bf00      	nop
    7832:	b002      	add	sp, #8
    7834:	4770      	bx	lr

00007836 <FlexCAN_UnlockRxMsgBuff>:
 * @brief Unlocks the FlexCAN Rx message buffer.
 *
 * @param   base     The FlexCAN base address
 */
static inline void FlexCAN_UnlockRxMsgBuff(const FLEXCAN_Type * base)
{
    7836:	b082      	sub	sp, #8
    7838:	9001      	str	r0, [sp, #4]
    /* Unlock the mailbox by reading the free running timer */
    (void)base->TIMER;
    783a:	9b01      	ldr	r3, [sp, #4]
    783c:	689b      	ldr	r3, [r3, #8]
}
    783e:	bf00      	nop
    7840:	b002      	add	sp, #8
    7842:	4770      	bx	lr

00007844 <FlexCAN_ClearMsgBuffIntStatusFlag>:
 *
 * @param   base        The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 */
static inline void FlexCAN_ClearMsgBuffIntStatusFlag(FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    7844:	b084      	sub	sp, #16
    7846:	9001      	str	r0, [sp, #4]
    7848:	9100      	str	r1, [sp, #0]
    uint32 flag = ((uint32)1U << (msgBuffIdx % 32U));
    784a:	9b00      	ldr	r3, [sp, #0]
    784c:	f003 031f 	and.w	r3, r3, #31
    7850:	2201      	movs	r2, #1
    7852:	fa02 f303 	lsl.w	r3, r2, r3
    7856:	9303      	str	r3, [sp, #12]

    /* Clear the corresponding message buffer interrupt flag*/
    if (msgBuffIdx < 32U)
    7858:	9b00      	ldr	r3, [sp, #0]
    785a:	2b1f      	cmp	r3, #31
    785c:	d802      	bhi.n	7864 <FlexCAN_ClearMsgBuffIntStatusFlag+0x20>
    {
        (base->IFLAG1) = (flag);
    785e:	9b01      	ldr	r3, [sp, #4]
    7860:	9a03      	ldr	r2, [sp, #12]
    7862:	631a      	str	r2, [r3, #48]	; 0x30
    else
    {
        (base->IFLAG4) = (flag);
    }
#endif
}
    7864:	bf00      	nop
    7866:	b004      	add	sp, #16
    7868:	4770      	bx	lr

0000786a <FlexCAN_GetBuffStatusFlag>:
 * @param   base                The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 * @return  flag        The value of interrupt flag of the message buffer.
 */
static inline uint8 FlexCAN_GetBuffStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    786a:	b084      	sub	sp, #16
    786c:	9001      	str	r0, [sp, #4]
    786e:	9100      	str	r1, [sp, #0]
    uint32 flag = 0U;
    7870:	2300      	movs	r3, #0
    7872:	9303      	str	r3, [sp, #12]

    if (msgBuffIdx < 32U)
    7874:	9b00      	ldr	r3, [sp, #0]
    7876:	2b1f      	cmp	r3, #31
    7878:	d80e      	bhi.n	7898 <FlexCAN_GetBuffStatusFlag+0x2e>
    {
        flag = ((base->IFLAG1 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    787a:	9b01      	ldr	r3, [sp, #4]
    787c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    787e:	9b00      	ldr	r3, [sp, #0]
    7880:	f003 031f 	and.w	r3, r3, #31
    7884:	2101      	movs	r1, #1
    7886:	fa01 f303 	lsl.w	r3, r1, r3
    788a:	401a      	ands	r2, r3
    788c:	9b00      	ldr	r3, [sp, #0]
    788e:	f003 031f 	and.w	r3, r3, #31
    7892:	fa22 f303 	lsr.w	r3, r2, r3
    7896:	9303      	str	r3, [sp, #12]
    {
        flag = ((base->IFLAG4 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    }
#endif

    return (uint8)flag;
    7898:	9b03      	ldr	r3, [sp, #12]
    789a:	b2db      	uxtb	r3, r3
}
    789c:	4618      	mov	r0, r3
    789e:	b004      	add	sp, #16
    78a0:	4770      	bx	lr

000078a2 <FlexCAN_SetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetFDTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    78a2:	b082      	sub	sp, #8
    78a4:	9001      	str	r0, [sp, #4]
    78a6:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* Set FlexCAN time segments*/
    (base->FDCBT) = ((base->FDCBT) & ~((FLEXCAN_FDCBT_FPROPSEG_MASK | FLEXCAN_FDCBT_FPSEG2_MASK |
    78a8:	9b01      	ldr	r3, [sp, #4]
    78aa:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    78ae:	4b15      	ldr	r3, [pc, #84]	; (7904 <FlexCAN_SetFDTimeSegments+0x62>)
    78b0:	4013      	ands	r3, r2
    78b2:	9a01      	ldr	r2, [sp, #4]
    78b4:	f8c2 3c04 	str.w	r3, [r2, #3076]	; 0xc04
                                        FLEXCAN_FDCBT_FPSEG1_MASK | FLEXCAN_FDCBT_FPRESDIV_MASK
                                       ) | FLEXCAN_FDCBT_FRJW_MASK
                                      )
                    );

    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    78b8:	9b01      	ldr	r3, [sp, #4]
    78ba:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    78be:	9b00      	ldr	r3, [sp, #0]
    78c0:	681b      	ldr	r3, [r3, #0]
    78c2:	029b      	lsls	r3, r3, #10
    78c4:	f403 41f8 	and.w	r1, r3, #31744	; 0x7c00
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    78c8:	9b00      	ldr	r3, [sp, #0]
    78ca:	689b      	ldr	r3, [r3, #8]
    78cc:	f003 0307 	and.w	r3, r3, #7
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    78d0:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    78d2:	9b00      	ldr	r3, [sp, #0]
    78d4:	685b      	ldr	r3, [r3, #4]
    78d6:	015b      	lsls	r3, r3, #5
    78d8:	b2db      	uxtb	r3, r3
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    78da:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    78dc:	9b00      	ldr	r3, [sp, #0]
    78de:	68db      	ldr	r3, [r3, #12]
    78e0:	0518      	lsls	r0, r3, #20
    78e2:	4b09      	ldr	r3, [pc, #36]	; (7908 <FlexCAN_SetFDTimeSegments+0x66>)
    78e4:	4003      	ands	r3, r0
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    78e6:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FRJW(timeSeg->rJumpwidth)
    78e8:	9b00      	ldr	r3, [sp, #0]
    78ea:	691b      	ldr	r3, [r3, #16]
    78ec:	041b      	lsls	r3, r3, #16
    78ee:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    78f2:	430b      	orrs	r3, r1
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    78f4:	431a      	orrs	r2, r3
    78f6:	9b01      	ldr	r3, [sp, #4]
    78f8:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
                                     )
                    );
}
    78fc:	bf00      	nop
    78fe:	b002      	add	sp, #8
    7900:	4770      	bx	lr
    7902:	bf00      	nop
    7904:	c0088318 	.word	0xc0088318
    7908:	3ff00000 	.word	0x3ff00000

0000790c <FlexCAN_SetTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    790c:	b082      	sub	sp, #8
    790e:	9001      	str	r0, [sp, #4]
    7910:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    (base->CTRL1) = ((base->CTRL1) & ~((FLEXCAN_CTRL1_PROPSEG_MASK | FLEXCAN_CTRL1_PSEG2_MASK |
    7912:	9b01      	ldr	r3, [sp, #4]
    7914:	685a      	ldr	r2, [r3, #4]
    7916:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    791a:	4013      	ands	r3, r2
    791c:	9a01      	ldr	r2, [sp, #4]
    791e:	6053      	str	r3, [r2, #4]
                                        FLEXCAN_CTRL1_PSEG1_MASK | FLEXCAN_CTRL1_PRESDIV_MASK
                                       ) | FLEXCAN_CTRL1_RJW_MASK
                                      )
                    );

    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    7920:	9b01      	ldr	r3, [sp, #4]
    7922:	685a      	ldr	r2, [r3, #4]
    7924:	9b00      	ldr	r3, [sp, #0]
    7926:	681b      	ldr	r3, [r3, #0]
    7928:	f003 0107 	and.w	r1, r3, #7
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    792c:	9b00      	ldr	r3, [sp, #0]
    792e:	689b      	ldr	r3, [r3, #8]
    7930:	041b      	lsls	r3, r3, #16
    7932:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    7936:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    7938:	9b00      	ldr	r3, [sp, #0]
    793a:	685b      	ldr	r3, [r3, #4]
    793c:	04db      	lsls	r3, r3, #19
    793e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    7942:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    7944:	9b00      	ldr	r3, [sp, #0]
    7946:	68db      	ldr	r3, [r3, #12]
    7948:	061b      	lsls	r3, r3, #24
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    794a:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_RJW(timeSeg->rJumpwidth)
    794c:	9b00      	ldr	r3, [sp, #0]
    794e:	691b      	ldr	r3, [r3, #16]
    7950:	059b      	lsls	r3, r3, #22
    7952:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    7956:	430b      	orrs	r3, r1
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    7958:	431a      	orrs	r2, r3
    795a:	9b01      	ldr	r3, [sp, #4]
    795c:	605a      	str	r2, [r3, #4]
                                     )
                    );
}
    795e:	bf00      	nop
    7960:	b002      	add	sp, #8
    7962:	4770      	bx	lr

00007964 <FlexCAN_SetExtendedTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetExtendedTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    7964:	b082      	sub	sp, #8
    7966:	9001      	str	r0, [sp, #4]
    7968:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* If extended bit time definitions are enabled, use CBT register */
    (base->CBT) = ((base->CBT) & ~((FLEXCAN_CBT_EPROPSEG_MASK | FLEXCAN_CBT_EPSEG2_MASK |
    796a:	9b01      	ldr	r3, [sp, #4]
    796c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    796e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
    7972:	9b01      	ldr	r3, [sp, #4]
    7974:	651a      	str	r2, [r3, #80]	; 0x50
                                    FLEXCAN_CBT_EPSEG1_MASK | FLEXCAN_CBT_EPRESDIV_MASK
                                   ) | FLEXCAN_CBT_ERJW_MASK
                                  )
                  );

    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    7976:	9b01      	ldr	r3, [sp, #4]
    7978:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    797a:	9b00      	ldr	r3, [sp, #0]
    797c:	681b      	ldr	r3, [r3, #0]
    797e:	029b      	lsls	r3, r3, #10
    7980:	b299      	uxth	r1, r3
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    7982:	9b00      	ldr	r3, [sp, #0]
    7984:	689b      	ldr	r3, [r3, #8]
    7986:	f003 031f 	and.w	r3, r3, #31
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    798a:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    798c:	9b00      	ldr	r3, [sp, #0]
    798e:	685b      	ldr	r3, [r3, #4]
    7990:	015b      	lsls	r3, r3, #5
    7992:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    7996:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    7998:	9b00      	ldr	r3, [sp, #0]
    799a:	68db      	ldr	r3, [r3, #12]
    799c:	0558      	lsls	r0, r3, #21
    799e:	4b07      	ldr	r3, [pc, #28]	; (79bc <FlexCAN_SetExtendedTimeSegments+0x58>)
    79a0:	4003      	ands	r3, r0
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    79a2:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_ERJW(timeSeg->rJumpwidth)
    79a4:	9b00      	ldr	r3, [sp, #0]
    79a6:	691b      	ldr	r3, [r3, #16]
    79a8:	041b      	lsls	r3, r3, #16
    79aa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    79ae:	430b      	orrs	r3, r1
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    79b0:	431a      	orrs	r2, r3
    79b2:	9b01      	ldr	r3, [sp, #4]
    79b4:	651a      	str	r2, [r3, #80]	; 0x50
                                 )
                  );
}
    79b6:	bf00      	nop
    79b8:	b002      	add	sp, #8
    79ba:	4770      	bx	lr
    79bc:	7fe00000 	.word	0x7fe00000

000079c0 <FlexCAN_GetExtendedTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetExtendedTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    79c0:	b082      	sub	sp, #8
    79c2:	9001      	str	r0, [sp, #4]
    79c4:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CBT) & FLEXCAN_CBT_EPRESDIV_MASK) >> FLEXCAN_CBT_EPRESDIV_SHIFT;
    79c6:	9b01      	ldr	r3, [sp, #4]
    79c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    79ca:	0d5b      	lsrs	r3, r3, #21
    79cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
    79d0:	9b00      	ldr	r3, [sp, #0]
    79d2:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CBT) & FLEXCAN_CBT_EPROPSEG_MASK) >> FLEXCAN_CBT_EPROPSEG_SHIFT;
    79d4:	9b01      	ldr	r3, [sp, #4]
    79d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    79d8:	0a9b      	lsrs	r3, r3, #10
    79da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    79de:	9b00      	ldr	r3, [sp, #0]
    79e0:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CBT) & FLEXCAN_CBT_EPSEG1_MASK) >> FLEXCAN_CBT_EPSEG1_SHIFT;
    79e2:	9b01      	ldr	r3, [sp, #4]
    79e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    79e6:	095b      	lsrs	r3, r3, #5
    79e8:	f003 021f 	and.w	r2, r3, #31
    79ec:	9b00      	ldr	r3, [sp, #0]
    79ee:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CBT) & FLEXCAN_CBT_EPSEG2_MASK) >> FLEXCAN_CBT_EPSEG2_SHIFT;
    79f0:	9b01      	ldr	r3, [sp, #4]
    79f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    79f4:	f003 021f 	and.w	r2, r3, #31
    79f8:	9b00      	ldr	r3, [sp, #0]
    79fa:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CBT) & FLEXCAN_CBT_ERJW_MASK) >> FLEXCAN_CBT_ERJW_SHIFT;
    79fc:	9b01      	ldr	r3, [sp, #4]
    79fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    7a00:	0c1b      	lsrs	r3, r3, #16
    7a02:	f003 021f 	and.w	r2, r3, #31
    7a06:	9b00      	ldr	r3, [sp, #0]
    7a08:	611a      	str	r2, [r3, #16]
}
    7a0a:	bf00      	nop
    7a0c:	b002      	add	sp, #8
    7a0e:	4770      	bx	lr

00007a10 <FlexCAN_GetTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    7a10:	b082      	sub	sp, #8
    7a12:	9001      	str	r0, [sp, #4]
    7a14:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CTRL1) & FLEXCAN_CTRL1_PRESDIV_MASK) >> FLEXCAN_CTRL1_PRESDIV_SHIFT;
    7a16:	9b01      	ldr	r3, [sp, #4]
    7a18:	685b      	ldr	r3, [r3, #4]
    7a1a:	0e1b      	lsrs	r3, r3, #24
    7a1c:	b2da      	uxtb	r2, r3
    7a1e:	9b00      	ldr	r3, [sp, #0]
    7a20:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CTRL1) & FLEXCAN_CTRL1_PROPSEG_MASK) >> FLEXCAN_CTRL1_PROPSEG_SHIFT;
    7a22:	9b01      	ldr	r3, [sp, #4]
    7a24:	685b      	ldr	r3, [r3, #4]
    7a26:	f003 0207 	and.w	r2, r3, #7
    7a2a:	9b00      	ldr	r3, [sp, #0]
    7a2c:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG1_MASK) >> FLEXCAN_CTRL1_PSEG1_SHIFT;
    7a2e:	9b01      	ldr	r3, [sp, #4]
    7a30:	685b      	ldr	r3, [r3, #4]
    7a32:	0cdb      	lsrs	r3, r3, #19
    7a34:	f003 0207 	and.w	r2, r3, #7
    7a38:	9b00      	ldr	r3, [sp, #0]
    7a3a:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG2_MASK) >> FLEXCAN_CTRL1_PSEG2_SHIFT;
    7a3c:	9b01      	ldr	r3, [sp, #4]
    7a3e:	685b      	ldr	r3, [r3, #4]
    7a40:	0c1b      	lsrs	r3, r3, #16
    7a42:	f003 0207 	and.w	r2, r3, #7
    7a46:	9b00      	ldr	r3, [sp, #0]
    7a48:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CTRL1) & FLEXCAN_CTRL1_RJW_MASK) >> FLEXCAN_CTRL1_RJW_SHIFT;
    7a4a:	9b01      	ldr	r3, [sp, #4]
    7a4c:	685b      	ldr	r3, [r3, #4]
    7a4e:	0d9b      	lsrs	r3, r3, #22
    7a50:	f003 0203 	and.w	r2, r3, #3
    7a54:	9b00      	ldr	r3, [sp, #0]
    7a56:	611a      	str	r2, [r3, #16]
}
    7a58:	bf00      	nop
    7a5a:	b002      	add	sp, #8
    7a5c:	4770      	bx	lr

00007a5e <FlexCAN_GetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetFDTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    7a5e:	b082      	sub	sp, #8
    7a60:	9001      	str	r0, [sp, #4]
    7a62:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->FDCBT) & FLEXCAN_FDCBT_FPRESDIV_MASK) >> FLEXCAN_FDCBT_FPRESDIV_SHIFT;
    7a64:	9b01      	ldr	r3, [sp, #4]
    7a66:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    7a6a:	0d1b      	lsrs	r3, r3, #20
    7a6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    7a70:	9b00      	ldr	r3, [sp, #0]
    7a72:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->FDCBT) & FLEXCAN_FDCBT_FPROPSEG_MASK) >> FLEXCAN_FDCBT_FPROPSEG_SHIFT;
    7a74:	9b01      	ldr	r3, [sp, #4]
    7a76:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    7a7a:	0a9b      	lsrs	r3, r3, #10
    7a7c:	f003 021f 	and.w	r2, r3, #31
    7a80:	9b00      	ldr	r3, [sp, #0]
    7a82:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG1_MASK) >> FLEXCAN_FDCBT_FPSEG1_SHIFT;
    7a84:	9b01      	ldr	r3, [sp, #4]
    7a86:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    7a8a:	095b      	lsrs	r3, r3, #5
    7a8c:	f003 0207 	and.w	r2, r3, #7
    7a90:	9b00      	ldr	r3, [sp, #0]
    7a92:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG2_MASK) >> FLEXCAN_FDCBT_FPSEG2_SHIFT;
    7a94:	9b01      	ldr	r3, [sp, #4]
    7a96:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    7a9a:	f003 0207 	and.w	r2, r3, #7
    7a9e:	9b00      	ldr	r3, [sp, #0]
    7aa0:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->FDCBT) & FLEXCAN_FDCBT_FRJW_MASK) >> FLEXCAN_FDCBT_FRJW_SHIFT;
    7aa2:	9b01      	ldr	r3, [sp, #4]
    7aa4:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    7aa8:	0c1b      	lsrs	r3, r3, #16
    7aaa:	f003 0207 	and.w	r2, r3, #7
    7aae:	9b00      	ldr	r3, [sp, #0]
    7ab0:	611a      	str	r2, [r3, #16]
}
    7ab2:	bf00      	nop
    7ab4:	b002      	add	sp, #8
    7ab6:	4770      	bx	lr

00007ab8 <FlexCAN_IsExCbtEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsExCbtEnabled(const FLEXCAN_Type * pBase)
{
    7ab8:	b082      	sub	sp, #8
    7aba:	9001      	str	r0, [sp, #4]
    return (0U == ((pBase->CBT & FLEXCAN_CBT_BTF_MASK) >> FLEXCAN_CBT_BTF_SHIFT)) ? FALSE : TRUE;
    7abc:	9b01      	ldr	r3, [sp, #4]
    7abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    7ac0:	0fdb      	lsrs	r3, r3, #31
    7ac2:	b2db      	uxtb	r3, r3
}
    7ac4:	4618      	mov	r0, r3
    7ac6:	b002      	add	sp, #8
    7ac8:	4770      	bx	lr

00007aca <FlexCAN_EnableExtCbt>:
 *
 * @param   base    The FlexCAN base address
 * @param   enableCBT Enable/Disable use of Extent Time Segments
 */
static inline void FlexCAN_EnableExtCbt(FLEXCAN_Type * base, boolean enableCBT)
{   /* Enable the use of extended bit time definitions */
    7aca:	b082      	sub	sp, #8
    7acc:	9001      	str	r0, [sp, #4]
    7ace:	460b      	mov	r3, r1
    7ad0:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CBT = (base->CBT & ~FLEXCAN_CBT_BTF_MASK) | FLEXCAN_CBT_BTF(enableCBT ? 1UL : 0UL);
    7ad4:	9b01      	ldr	r3, [sp, #4]
    7ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    7ad8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    7adc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7ae0:	2a00      	cmp	r2, #0
    7ae2:	d002      	beq.n	7aea <FlexCAN_EnableExtCbt+0x20>
    7ae4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    7ae8:	e000      	b.n	7aec <FlexCAN_EnableExtCbt+0x22>
    7aea:	2200      	movs	r2, #0
    7aec:	431a      	orrs	r2, r3
    7aee:	9b01      	ldr	r3, [sp, #4]
    7af0:	651a      	str	r2, [r3, #80]	; 0x50
}
    7af2:	bf00      	nop
    7af4:	b002      	add	sp, #8
    7af6:	4770      	bx	lr

00007af8 <FlexCAN_SetSelfReception>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Enable/Disable Self Reception
 */
static inline void FlexCAN_SetSelfReception(FLEXCAN_Type * base, boolean enable)
{
    7af8:	b082      	sub	sp, #8
    7afa:	9001      	str	r0, [sp, #4]
    7afc:	460b      	mov	r3, r1
    7afe:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    7b02:	9b01      	ldr	r3, [sp, #4]
    7b04:	681b      	ldr	r3, [r3, #0]
    7b06:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    7b0a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7b0e:	2a00      	cmp	r2, #0
    7b10:	d001      	beq.n	7b16 <FlexCAN_SetSelfReception+0x1e>
    7b12:	2200      	movs	r2, #0
    7b14:	e001      	b.n	7b1a <FlexCAN_SetSelfReception+0x22>
    7b16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    7b1a:	431a      	orrs	r2, r3
    7b1c:	9b01      	ldr	r3, [sp, #4]
    7b1e:	601a      	str	r2, [r3, #0]
}
    7b20:	bf00      	nop
    7b22:	b002      	add	sp, #8
    7b24:	4770      	bx	lr

00007b26 <FlexCAN_IsFDEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsFDEnabled(const FLEXCAN_Type * base)
{
    7b26:	b082      	sub	sp, #8
    7b28:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    7b2a:	9b01      	ldr	r3, [sp, #4]
    7b2c:	681b      	ldr	r3, [r3, #0]
    7b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    7b32:	2b00      	cmp	r3, #0
    7b34:	bf14      	ite	ne
    7b36:	2301      	movne	r3, #1
    7b38:	2300      	moveq	r3, #0
    7b3a:	b2db      	uxtb	r3, r3
}
    7b3c:	4618      	mov	r0, r3
    7b3e:	b002      	add	sp, #8
    7b40:	4770      	bx	lr

00007b42 <FlexCAN_IsListenOnlyModeEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsListenOnlyModeEnabled(const FLEXCAN_Type * base)
{
    7b42:	b082      	sub	sp, #8
    7b44:	9001      	str	r0, [sp, #4]
    return (((base->CTRL1 & (FLEXCAN_CTRL1_LOM_MASK)) != 0U) ? TRUE : FALSE);
    7b46:	9b01      	ldr	r3, [sp, #4]
    7b48:	685b      	ldr	r3, [r3, #4]
    7b4a:	f003 0308 	and.w	r3, r3, #8
    7b4e:	2b00      	cmp	r3, #0
    7b50:	bf14      	ite	ne
    7b52:	2301      	movne	r3, #1
    7b54:	2300      	moveq	r3, #0
    7b56:	b2db      	uxtb	r3, r3
}
    7b58:	4618      	mov	r0, r3
    7b5a:	b002      	add	sp, #8
    7b5c:	4770      	bx	lr

00007b5e <RxFifoOcuppiedLastMsgBuff>:
 *
 * @param   x    Number of Configured RxFIFO Filters
 * @return  number of last MB occupied by RxFIFO
 */
static inline uint32 RxFifoOcuppiedLastMsgBuff(uint8 x)
{
    7b5e:	b082      	sub	sp, #8
    7b60:	4603      	mov	r3, r0
    7b62:	f88d 3007 	strb.w	r3, [sp, #7]
    return 5U + (((((uint32)x) + 1U) * 8U) / 4U);
    7b66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b6a:	3301      	adds	r3, #1
    7b6c:	00db      	lsls	r3, r3, #3
    7b6e:	089b      	lsrs	r3, r3, #2
    7b70:	3305      	adds	r3, #5
}
    7b72:	4618      	mov	r0, r3
    7b74:	b002      	add	sp, #8
    7b76:	4770      	bx	lr

00007b78 <FlexCAN_SetClkSrc>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Specifies if The CAN engine clock source is the oscillator clock(FALSE) or peripheral clock(TRUE).
 */
static inline void FlexCAN_SetClkSrc(FLEXCAN_Type * base, boolean enable)
{
    7b78:	b082      	sub	sp, #8
    7b7a:	9001      	str	r0, [sp, #4]
    7b7c:	460b      	mov	r3, r1
    7b7e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_CLKSRC_MASK) | FLEXCAN_CTRL1_CLKSRC(enable ? 1UL : 0UL);
    7b82:	9b01      	ldr	r3, [sp, #4]
    7b84:	685b      	ldr	r3, [r3, #4]
    7b86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    7b8a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7b8e:	2a00      	cmp	r2, #0
    7b90:	d002      	beq.n	7b98 <FlexCAN_SetClkSrc+0x20>
    7b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    7b96:	e000      	b.n	7b9a <FlexCAN_SetClkSrc+0x22>
    7b98:	2200      	movs	r2, #0
    7b9a:	431a      	orrs	r2, r3
    7b9c:	9b01      	ldr	r3, [sp, #4]
    7b9e:	605a      	str	r2, [r3, #4]
}
    7ba0:	bf00      	nop
    7ba2:	b002      	add	sp, #8
    7ba4:	4770      	bx	lr

00007ba6 <FlexCAN_GetMsgBuffIntStatusFlag>:
 * @param   base  The FlexCAN base address
 * @param   msgBuffIdx       Index of the message buffer
 * @return  the individual Message Buffer interrupt flag (0 and 1 are the flag value)
 */
static inline uint8 FlexCAN_GetMsgBuffIntStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    7ba6:	b084      	sub	sp, #16
    7ba8:	9001      	str	r0, [sp, #4]
    7baa:	9100      	str	r1, [sp, #0]
    /* TODO: This need to be protected multithread access*/
    uint8 flag = 0;
    7bac:	2300      	movs	r3, #0
    7bae:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 mask;

    if (msgBuffIdx < 32U)
    7bb2:	9b00      	ldr	r3, [sp, #0]
    7bb4:	2b1f      	cmp	r3, #31
    7bb6:	d810      	bhi.n	7bda <FlexCAN_GetMsgBuffIntStatusFlag+0x34>
    {
        mask = base->IMASK1 & FLEXCAN_IMASK1_BUF31TO0M_MASK;
    7bb8:	9b01      	ldr	r3, [sp, #4]
    7bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7bbc:	9302      	str	r3, [sp, #8]
        flag = (uint8)(((base->IFLAG1 & mask) >> (msgBuffIdx % 32U)) & 1U);
    7bbe:	9b01      	ldr	r3, [sp, #4]
    7bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    7bc2:	9b02      	ldr	r3, [sp, #8]
    7bc4:	401a      	ands	r2, r3
    7bc6:	9b00      	ldr	r3, [sp, #0]
    7bc8:	f003 031f 	and.w	r3, r3, #31
    7bcc:	fa22 f303 	lsr.w	r3, r2, r3
    7bd0:	b2db      	uxtb	r3, r3
    7bd2:	f003 0301 	and.w	r3, r3, #1
    7bd6:	f88d 300f 	strb.w	r3, [sp, #15]
        mask = base->IMASK4 & FLEXCAN_IMASK4_BUF127TO96M_MASK;
        flag = (uint8)(((base->IFLAG4 & mask) >> (msgBuffIdx % 32U)) & 1U);
    }
#endif

    return flag;
    7bda:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7bde:	4618      	mov	r0, r3
    7be0:	b004      	add	sp, #16
    7be2:	4770      	bx	lr

00007be4 <FlexCAN_SetRxMsgBuffGlobalMask>:
 *
 * @param   base  The FlexCAN base address
 * @param   Mask  Mask Value
 */
static inline void FlexCAN_SetRxMsgBuffGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    7be4:	b082      	sub	sp, #8
    7be6:	9001      	str	r0, [sp, #4]
    7be8:	9100      	str	r1, [sp, #0]
    (base->RXMGMASK) = Mask;
    7bea:	9b01      	ldr	r3, [sp, #4]
    7bec:	9a00      	ldr	r2, [sp, #0]
    7bee:	611a      	str	r2, [r3, #16]
}
    7bf0:	bf00      	nop
    7bf2:	b002      	add	sp, #8
    7bf4:	4770      	bx	lr

00007bf6 <FlexCAN_SetRxIndividualMask>:
 */
static inline void FlexCAN_SetRxIndividualMask(FLEXCAN_Type * base,
                                               uint32 msgBuffIdx,
                                               uint32 mask
                                              )
{
    7bf6:	b084      	sub	sp, #16
    7bf8:	9003      	str	r0, [sp, #12]
    7bfa:	9102      	str	r1, [sp, #8]
    7bfc:	9201      	str	r2, [sp, #4]
    base->RXIMR[msgBuffIdx] = mask;
    7bfe:	9b03      	ldr	r3, [sp, #12]
    7c00:	9a02      	ldr	r2, [sp, #8]
    7c02:	f502 7208 	add.w	r2, r2, #544	; 0x220
    7c06:	9901      	ldr	r1, [sp, #4]
    7c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7c0c:	bf00      	nop
    7c0e:	b004      	add	sp, #16
    7c10:	4770      	bx	lr

00007c12 <FlexCAN_SetTxArbitrationStartDelay>:
 *
 * @param   base  The FlexCAN base address
 * @param   tasd  The Tx arbitration start delay value
 */
static inline void FlexCAN_SetTxArbitrationStartDelay(FLEXCAN_Type * base, uint8 tasd)
{
    7c12:	b082      	sub	sp, #8
    7c14:	9001      	str	r0, [sp, #4]
    7c16:	460b      	mov	r3, r1
    7c18:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_TASD_MASK) | FLEXCAN_CTRL2_TASD(tasd);
    7c1c:	9b01      	ldr	r3, [sp, #4]
    7c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7c20:	f423 0278 	bic.w	r2, r3, #16252928	; 0xf80000
    7c24:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7c28:	04db      	lsls	r3, r3, #19
    7c2a:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
    7c2e:	431a      	orrs	r2, r3
    7c30:	9b01      	ldr	r3, [sp, #4]
    7c32:	635a      	str	r2, [r3, #52]	; 0x34
}
    7c34:	bf00      	nop
    7c36:	b002      	add	sp, #8
    7c38:	4770      	bx	lr

00007c3a <FlexCAN_SetRxMaskType>:
 *
 * @param   base  The FlexCAN base address
 * @param   type         The FlexCAN Rx mask type
 */
static inline void FlexCAN_SetRxMaskType(FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
    7c3a:	b082      	sub	sp, #8
    7c3c:	9001      	str	r0, [sp, #4]
    7c3e:	9100      	str	r1, [sp, #0]
    /* Set RX masking type (RX global mask or RX individual mask)*/
    if (FLEXCAN_RX_MASK_GLOBAL == type)
    7c40:	9b00      	ldr	r3, [sp, #0]
    7c42:	2b00      	cmp	r3, #0
    7c44:	d106      	bne.n	7c54 <FlexCAN_SetRxMaskType+0x1a>
    {
        /* Enable Global RX masking */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(0U);
    7c46:	9b01      	ldr	r3, [sp, #4]
    7c48:	681b      	ldr	r3, [r3, #0]
    7c4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    7c4e:	9b01      	ldr	r3, [sp, #4]
    7c50:	601a      	str	r2, [r3, #0]
    else
    {
        /* Enable Individual Rx Masking and Queue */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    }
}
    7c52:	e005      	b.n	7c60 <FlexCAN_SetRxMaskType+0x26>
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    7c54:	9b01      	ldr	r3, [sp, #4]
    7c56:	681b      	ldr	r3, [r3, #0]
    7c58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    7c5c:	9b01      	ldr	r3, [sp, #4]
    7c5e:	601a      	str	r2, [r3, #0]
}
    7c60:	bf00      	nop
    7c62:	b002      	add	sp, #8
    7c64:	4770      	bx	lr

00007c66 <FlexCAN_SetRegDefaultVal>:
 * @brief Will set Flexcan Peripheral Register to default val.
 *
 * @param   base    The FlexCAN base address
 */
static inline void FlexCAN_SetRegDefaultVal(FLEXCAN_Type * base)
{
    7c66:	b500      	push	{lr}
    7c68:	b083      	sub	sp, #12
    7c6a:	9001      	str	r0, [sp, #4]
        base->ERFCR = FLEXCAN_IP_ERFCR_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    7c6c:	9801      	ldr	r0, [sp, #4]
    7c6e:	f002 ff85 	bl	ab7c <FlexCAN_IsFDAvailable>
    7c72:	4603      	mov	r3, r0
    7c74:	2b00      	cmp	r3, #0
    7c76:	d007      	beq.n	7c88 <FlexCAN_SetRegDefaultVal+0x22>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    7c78:	9b01      	ldr	r3, [sp, #4]
    7c7a:	2200      	movs	r2, #0
    7c7c:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    7c80:	9b01      	ldr	r3, [sp, #4]
    7c82:	4a12      	ldr	r2, [pc, #72]	; (7ccc <FlexCAN_SetRegDefaultVal+0x66>)
    7c84:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    {
        base->IFLAG2 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
        base->IMASK2 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */
    base->IFLAG1 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
    7c88:	9b01      	ldr	r3, [sp, #4]
    7c8a:	f04f 32ff 	mov.w	r2, #4294967295
    7c8e:	631a      	str	r2, [r3, #48]	; 0x30
    base->IMASK1 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    7c90:	9b01      	ldr	r3, [sp, #4]
    7c92:	2200      	movs	r2, #0
    7c94:	629a      	str	r2, [r3, #40]	; 0x28
    base->CBT = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    7c96:	9b01      	ldr	r3, [sp, #4]
    7c98:	2200      	movs	r2, #0
    7c9a:	651a      	str	r2, [r3, #80]	; 0x50
    base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    7c9c:	9b01      	ldr	r3, [sp, #4]
    7c9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    7ca2:	635a      	str	r2, [r3, #52]	; 0x34
    base->ESR1 = FLEXCAN_IP_ESR1_DEFAULT_VALUE_U32;
    7ca4:	9b01      	ldr	r3, [sp, #4]
    7ca6:	4a0a      	ldr	r2, [pc, #40]	; (7cd0 <FlexCAN_SetRegDefaultVal+0x6a>)
    7ca8:	621a      	str	r2, [r3, #32]
    base->ECR = FLEXCAN_IP_ECR_DEFAULT_VALUE_U32;
    7caa:	9b01      	ldr	r3, [sp, #4]
    7cac:	2200      	movs	r2, #0
    7cae:	61da      	str	r2, [r3, #28]
    base->TIMER = FLEXCAN_IP_TIMER_DEFAULT_VALUE_U32;
    7cb0:	9b01      	ldr	r3, [sp, #4]
    7cb2:	2200      	movs	r2, #0
    7cb4:	609a      	str	r2, [r3, #8]
    base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    7cb6:	9b01      	ldr	r3, [sp, #4]
    7cb8:	2200      	movs	r2, #0
    7cba:	605a      	str	r2, [r3, #4]
    base->EPRS  = FLEXCAN_IP_EPRS_DEFAULT_VALUE_U32;
    base->ENCBT = FLEXCAN_IP_ENCBT_DEFAULT_VALUE_U32;
    base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
    base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
    base->MCR = FLEXCAN_IP_MCR_DEFAULT_VALUE_U32;
    7cbc:	9b01      	ldr	r3, [sp, #4]
    7cbe:	4a05      	ldr	r2, [pc, #20]	; (7cd4 <FlexCAN_SetRegDefaultVal+0x6e>)
    7cc0:	601a      	str	r2, [r3, #0]
}
    7cc2:	bf00      	nop
    7cc4:	b003      	add	sp, #12
    7cc6:	f85d fb04 	ldr.w	pc, [sp], #4
    7cca:	bf00      	nop
    7ccc:	80004100 	.word	0x80004100
    7cd0:	0003b006 	.word	0x0003b006
    7cd4:	d890000f 	.word	0xd890000f

00007cd8 <FlexCAN_InitRxFifo>:
 * Description   : Initialize fifo and dma if requested.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitRxFifo(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    7cd8:	b500      	push	{lr}
    7cda:	b085      	sub	sp, #20
    7cdc:	9001      	str	r0, [sp, #4]
    7cde:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    7ce0:	2300      	movs	r3, #0
    7ce2:	9303      	str	r3, [sp, #12]

    /* Enable RxFIFO feature, if requested. This might fail if the FD mode is enabled. */
    if (Flexcan_Ip_pData->is_rx_fifo_needed)
    7ce4:	9b00      	ldr	r3, [sp, #0]
    7ce6:	7a1b      	ldrb	r3, [r3, #8]
    7ce8:	2b00      	cmp	r3, #0
    7cea:	d006      	beq.n	7cfa <FlexCAN_InitRxFifo+0x22>
    {
        eResult = FlexCAN_EnableRxFifo(pBase, (uint32)Flexcan_Ip_pData->num_id_filters);
    7cec:	9b00      	ldr	r3, [sp, #0]
    7cee:	685b      	ldr	r3, [r3, #4]
    7cf0:	4619      	mov	r1, r3
    7cf2:	9801      	ldr	r0, [sp, #4]
    7cf4:	f002 fefe 	bl	aaf4 <FlexCAN_EnableRxFifo>
    7cf8:	9003      	str	r0, [sp, #12]
        FlexCAN_SetRxFifoDMA(pBase, FALSE);
    }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    return eResult;
    7cfa:	9b03      	ldr	r3, [sp, #12]
}
    7cfc:	4618      	mov	r0, r3
    7cfe:	b005      	add	sp, #20
    7d00:	f85d fb04 	ldr.w	pc, [sp], #4

00007d04 <FlexCAN_InitCtroll>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitCtroll(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    7d04:	b500      	push	{lr}
    7d06:	b085      	sub	sp, #20
    7d08:	9001      	str	r0, [sp, #4]
    7d0a:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    7d0c:	2300      	movs	r3, #0
    7d0e:	9303      	str	r3, [sp, #12]
    /* Disable the self reception feature if FlexCAN is not in loopback mode. */
    if (Flexcan_Ip_pData->flexcanMode != FLEXCAN_LOOPBACK_MODE)
    7d10:	9b00      	ldr	r3, [sp, #0]
    7d12:	68db      	ldr	r3, [r3, #12]
    7d14:	2b02      	cmp	r3, #2
    7d16:	d003      	beq.n	7d20 <FlexCAN_InitCtroll+0x1c>
    {
        FlexCAN_SetSelfReception(pBase, FALSE);
    7d18:	2100      	movs	r1, #0
    7d1a:	9801      	ldr	r0, [sp, #4]
    7d1c:	f7ff feec 	bl	7af8 <FlexCAN_SetSelfReception>
    }

    /* Init legacy fifo, enhanced fifo if requested. */
    eResult = FlexCAN_InitRxFifo(pBase, Flexcan_Ip_pData);
    7d20:	9900      	ldr	r1, [sp, #0]
    7d22:	9801      	ldr	r0, [sp, #4]
    7d24:	f7ff ffd8 	bl	7cd8 <FlexCAN_InitRxFifo>
    7d28:	9003      	str	r0, [sp, #12]
    if (eResult != FLEXCAN_STATUS_SUCCESS)
    7d2a:	9b03      	ldr	r3, [sp, #12]
    7d2c:	2b00      	cmp	r3, #0
    7d2e:	d006      	beq.n	7d3e <FlexCAN_InitCtroll+0x3a>
    {
        /* To enter Disable Mode requires FreezMode first */
        (void)FlexCAN_EnterFreezeMode(pBase);
    7d30:	9801      	ldr	r0, [sp, #4]
    7d32:	f002 fd03 	bl	a73c <FlexCAN_EnterFreezeMode>
        (void)FlexCAN_Disable(pBase);
    7d36:	9801      	ldr	r0, [sp, #4]
    7d38:	f002 fdca 	bl	a8d0 <FlexCAN_Disable>
    7d3c:	e00b      	b.n	7d56 <FlexCAN_InitCtroll+0x52>
    }
    else
    {
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set payload size. */
        FlexCAN_SetPayloadSize(pBase, &Flexcan_Ip_pData->payload);
    7d3e:	9b00      	ldr	r3, [sp, #0]
    7d40:	3314      	adds	r3, #20
    7d42:	4619      	mov	r1, r3
    7d44:	9801      	ldr	r0, [sp, #4]
    7d46:	f002 ff3b 	bl	abc0 <FlexCAN_SetPayloadSize>
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
            (void)FlexCAN_Disable(pBase);
        }
    #else
        (void)FlexCAN_SetMaxMsgBuffNum(pBase, Flexcan_Ip_pData->max_num_mb);
    7d4a:	9b00      	ldr	r3, [sp, #0]
    7d4c:	681b      	ldr	r3, [r3, #0]
    7d4e:	4619      	mov	r1, r3
    7d50:	9801      	ldr	r0, [sp, #4]
    7d52:	f003 fab7 	bl	b2c4 <FlexCAN_SetMaxMsgBuffNum>
    #endif /* FLEXCAN_IP_DEV_ERROR_DETECT */
    }
    return eResult;
    7d56:	9b03      	ldr	r3, [sp, #12]
}
    7d58:	4618      	mov	r0, r3
    7d5a:	b005      	add	sp, #20
    7d5c:	f85d fb04 	ldr.w	pc, [sp], #4

00007d60 <FlexCAN_InitController>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitController(uint8 Instance, FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    7d60:	b500      	push	{lr}
    7d62:	b087      	sub	sp, #28
    7d64:	4603      	mov	r3, r0
    7d66:	9102      	str	r1, [sp, #8]
    7d68:	9201      	str	r2, [sp, #4]
    7d6a:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    7d6e:	2300      	movs	r3, #0
    7d70:	9305      	str	r3, [sp, #20]

    if (FlexCAN_IsEnabled(pBase))
    7d72:	9802      	ldr	r0, [sp, #8]
    7d74:	f7ff fd0c 	bl	7790 <FlexCAN_IsEnabled>
    7d78:	4603      	mov	r3, r0
    7d7a:	2b00      	cmp	r3, #0
    7d7c:	d00a      	beq.n	7d94 <FlexCAN_InitController+0x34>
    {
        /* To enter Disable Mode requires FreezMode first */
        eResult = FlexCAN_EnterFreezeMode(pBase);
    7d7e:	9802      	ldr	r0, [sp, #8]
    7d80:	f002 fcdc 	bl	a73c <FlexCAN_EnterFreezeMode>
    7d84:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == eResult)
    7d86:	9b05      	ldr	r3, [sp, #20]
    7d88:	2b00      	cmp	r3, #0
    7d8a:	d103      	bne.n	7d94 <FlexCAN_InitController+0x34>
        {
            eResult = FlexCAN_Disable(pBase);
    7d8c:	9802      	ldr	r0, [sp, #8]
    7d8e:	f002 fd9f 	bl	a8d0 <FlexCAN_Disable>
    7d92:	9005      	str	r0, [sp, #20]
        }
    }

    if (FLEXCAN_STATUS_SUCCESS == eResult)
    7d94:	9b05      	ldr	r3, [sp, #20]
    7d96:	2b00      	cmp	r3, #0
    7d98:	d137      	bne.n	7e0a <FlexCAN_InitController+0xaa>
    {
    #if (FLEXCAN_IP_FEATURE_HAS_PE_CLKSRC_SELECT == STD_ON)
        /* Select a source clock for the FlexCAN engine */
        FlexCAN_SetClkSrc(pBase, Flexcan_Ip_pData->is_pe_clock);
    7d9a:	9b01      	ldr	r3, [sp, #4]
    7d9c:	7e5b      	ldrb	r3, [r3, #25]
    7d9e:	4619      	mov	r1, r3
    7da0:	9802      	ldr	r0, [sp, #8]
    7da2:	f7ff fee9 	bl	7b78 <FlexCAN_SetClkSrc>
    #endif
        /* Enable FlexCAN Module need to perform SoftReset & ClearRam */
        pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    7da6:	9b02      	ldr	r3, [sp, #8]
    7da8:	681b      	ldr	r3, [r3, #0]
    7daa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    7dae:	9b02      	ldr	r3, [sp, #8]
    7db0:	601a      	str	r2, [r3, #0]
        /* Initialize FLEXCAN device */
        eResult = FlexCAN_Init(pBase);
    7db2:	9802      	ldr	r0, [sp, #8]
    7db4:	f002 fe28 	bl	aa08 <FlexCAN_Init>
    7db8:	9005      	str	r0, [sp, #20]
        if (eResult != FLEXCAN_STATUS_SUCCESS)
    7dba:	9b05      	ldr	r3, [sp, #20]
    7dbc:	2b00      	cmp	r3, #0
    7dbe:	d006      	beq.n	7dce <FlexCAN_InitController+0x6e>
        {
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
    7dc0:	9802      	ldr	r0, [sp, #8]
    7dc2:	f002 fcbb 	bl	a73c <FlexCAN_EnterFreezeMode>
            (void)FlexCAN_Disable(pBase);
    7dc6:	9802      	ldr	r0, [sp, #8]
    7dc8:	f002 fd82 	bl	a8d0 <FlexCAN_Disable>
    7dcc:	e01d      	b.n	7e0a <FlexCAN_InitController+0xaa>
            /* Disable the Protection again because is enabled by soft reset */
            FlexCAN_DisableMemErrorDetection(pBase);
        #endif

        #if defined(CAN_FEATURE_S32K1XX)
            if (TRUE == FlexCAN_IsFDAvailable(pBase))
    7dce:	9802      	ldr	r0, [sp, #8]
    7dd0:	f002 fed4 	bl	ab7c <FlexCAN_IsFDAvailable>
    7dd4:	4603      	mov	r3, r0
    7dd6:	2b00      	cmp	r3, #0
    7dd8:	d007      	beq.n	7dea <FlexCAN_InitController+0x8a>
            {
        #endif /* defined(CAN_FEATURE_S32K1XX) */
                /* Enable/Disable FD and check FD was set as expected. Setting FD as enabled
                 * might fail if the current CAN instance does not support FD. */
                FlexCAN_SetFDEnabled(pBase, Flexcan_Ip_pData->fd_enable, Flexcan_Ip_pData->bitRateSwitch);
    7dda:	9b01      	ldr	r3, [sp, #4]
    7ddc:	7e19      	ldrb	r1, [r3, #24]
    7dde:	9b01      	ldr	r3, [sp, #4]
    7de0:	7edb      	ldrb	r3, [r3, #27]
    7de2:	461a      	mov	r2, r3
    7de4:	9802      	ldr	r0, [sp, #8]
    7de6:	f7ff fcdd 	bl	77a4 <FlexCAN_SetFDEnabled>
                }*/
        #if defined(CAN_FEATURE_S32K1XX)
            }
        #endif /* defined(CAN_FEATURE_S32K1XX) */
            /* configure depends on controller options. */
            FlexCAN_ConfigCtrlOptions(pBase, Flexcan_Ip_pData->ctrlOptions);
    7dea:	9b01      	ldr	r3, [sp, #4]
    7dec:	691b      	ldr	r3, [r3, #16]
    7dee:	4619      	mov	r1, r3
    7df0:	9802      	ldr	r0, [sp, #8]
    7df2:	f003 fdeb 	bl	b9cc <FlexCAN_ConfigCtrlOptions>
            /* reset Imask buffers */
            FlexCAN_ResetImaskBuff(Instance);
    7df6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7dfa:	4618      	mov	r0, r3
    7dfc:	f003 fe56 	bl	baac <FlexCAN_ResetImaskBuff>
            eResult = FlexCAN_InitCtroll(pBase, Flexcan_Ip_pData);
    7e00:	9901      	ldr	r1, [sp, #4]
    7e02:	9802      	ldr	r0, [sp, #8]
    7e04:	f7ff ff7e 	bl	7d04 <FlexCAN_InitCtroll>
    7e08:	9005      	str	r0, [sp, #20]
        }
    }
    return eResult;
    7e0a:	9b05      	ldr	r3, [sp, #20]
}
    7e0c:	4618      	mov	r0, r3
    7e0e:	b007      	add	sp, #28
    7e10:	f85d fb04 	ldr.w	pc, [sp], #4

00007e14 <FlexCAN_InitBaudrate>:
 * Description   : Init baudrate for given controller.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_InitBaudrate(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    7e14:	b500      	push	{lr}
    7e16:	b083      	sub	sp, #12
    7e18:	9001      	str	r0, [sp, #4]
    7e1a:	9100      	str	r1, [sp, #0]
    /* Enable the use of extended bit time definitions */
    FlexCAN_EnableExtCbt(pBase, Flexcan_Ip_pData->fd_enable);
    7e1c:	9b00      	ldr	r3, [sp, #0]
    7e1e:	7e1b      	ldrb	r3, [r3, #24]
    7e20:	4619      	mov	r1, r3
    7e22:	9801      	ldr	r0, [sp, #4]
    7e24:	f7ff fe51 	bl	7aca <FlexCAN_EnableExtCbt>
        /* Disable Enhanced CBT time segments */
        pBase->CTRL2 &= ~FLEXCAN_CTRL2_BTE_MASK;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set bit rate. */
        if (Flexcan_Ip_pData->fd_enable)
    7e28:	9b00      	ldr	r3, [sp, #0]
    7e2a:	7e1b      	ldrb	r3, [r3, #24]
    7e2c:	2b00      	cmp	r3, #0
    7e2e:	d00c      	beq.n	7e4a <FlexCAN_InitBaudrate+0x36>
        {
            /* Write Normal bit time configuration to CBT register */
            FlexCAN_SetExtendedTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    7e30:	9b00      	ldr	r3, [sp, #0]
    7e32:	331c      	adds	r3, #28
    7e34:	4619      	mov	r1, r3
    7e36:	9801      	ldr	r0, [sp, #4]
    7e38:	f7ff fd94 	bl	7964 <FlexCAN_SetExtendedTimeSegments>
            /* Write Data bit time configuration to FDCBT register */
            FlexCAN_SetFDTimeSegments(pBase, &Flexcan_Ip_pData->bitrate_cbt);
    7e3c:	9b00      	ldr	r3, [sp, #0]
    7e3e:	3330      	adds	r3, #48	; 0x30
    7e40:	4619      	mov	r1, r3
    7e42:	9801      	ldr	r0, [sp, #4]
    7e44:	f7ff fd2d 	bl	78a2 <FlexCAN_SetFDTimeSegments>
            /* Write Normal bit time configuration to CTRL1 register */
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
        }
#endif
    }
}
    7e48:	e005      	b.n	7e56 <FlexCAN_InitBaudrate+0x42>
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    7e4a:	9b00      	ldr	r3, [sp, #0]
    7e4c:	331c      	adds	r3, #28
    7e4e:	4619      	mov	r1, r3
    7e50:	9801      	ldr	r0, [sp, #4]
    7e52:	f7ff fd5b 	bl	790c <FlexCAN_SetTimeSegments>
}
    7e56:	bf00      	nop
    7e58:	b003      	add	sp, #12
    7e5a:	f85d fb04 	ldr.w	pc, [sp], #4

00007e5e <FlexCAN_ProccessLegacyRxFIFO>:
 * Description   : This function will process the enhanced RxFIFO in blocking mode.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_ProccessLegacyRxFIFO(uint8 u8Instance, uint32 u32TimeoutMs)
{
    7e5e:	b500      	push	{lr}
    7e60:	b08d      	sub	sp, #52	; 0x34
    7e62:	4603      	mov	r3, r0
    7e64:	9102      	str	r1, [sp, #8]
    7e66:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    7e6a:	2300      	movs	r3, #0
    7e6c:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    7e6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e72:	4a46      	ldr	r2, [pc, #280]	; (7f8c <FlexCAN_ProccessLegacyRxFIFO+0x12e>)
    7e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e78:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    7e7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e7e:	4a44      	ldr	r2, [pc, #272]	; (7f90 <FlexCAN_ProccessLegacyRxFIFO+0x132>)
    7e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e84:	9307      	str	r3, [sp, #28]
    uint32 timeStart = 0U;
    7e86:	2300      	movs	r3, #0
    7e88:	9305      	str	r3, [sp, #20]
    uint32 timeElapsed = 0U;
    7e8a:	2300      	movs	r3, #0
    7e8c:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    7e8e:	9b02      	ldr	r3, [sp, #8]
    7e90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7e94:	fb02 f303 	mul.w	r3, r2, r3
    7e98:	2100      	movs	r1, #0
    7e9a:	4618      	mov	r0, r3
    7e9c:	f7f9 f97c 	bl	1198 <OsIf_MicrosToTicks>
    7ea0:	9006      	str	r0, [sp, #24]
    uint32 u32intType = 0U;
    7ea2:	2300      	movs	r3, #0
    7ea4:	9309      	str	r3, [sp, #36]	; 0x24

        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    7ea6:	2000      	movs	r0, #0
    7ea8:	f7f9 f92a 	bl	1100 <OsIf_GetCounter>
    7eac:	4603      	mov	r3, r0
    7eae:	9305      	str	r3, [sp, #20]

        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    7eb0:	e02a      	b.n	7f08 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
        {
            if (FLEXCAN_RXFIFO_USING_POLLING == pState->transferType)
    7eb2:	9b08      	ldr	r3, [sp, #32]
    7eb4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    7eb8:	2b01      	cmp	r3, #1
    7eba:	d115      	bne.n	7ee8 <FlexCAN_ProccessLegacyRxFIFO+0x8a>
            {
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    7ebc:	2307      	movs	r3, #7
    7ebe:	9309      	str	r3, [sp, #36]	; 0x24
    7ec0:	e00f      	b.n	7ee2 <FlexCAN_ProccessLegacyRxFIFO+0x84>
                     u32intType >= FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE; \
                     u32intType--)
                {
                    if (FlexCAN_GetBuffStatusFlag(pBase, u32intType) != 0U)
    7ec2:	9909      	ldr	r1, [sp, #36]	; 0x24
    7ec4:	9807      	ldr	r0, [sp, #28]
    7ec6:	f7ff fcd0 	bl	786a <FlexCAN_GetBuffStatusFlag>
    7eca:	4603      	mov	r3, r0
    7ecc:	2b00      	cmp	r3, #0
    7ece:	d005      	beq.n	7edc <FlexCAN_ProccessLegacyRxFIFO+0x7e>
                    {
                        FlexCAN_IRQHandlerRxFIFO(u8Instance, u32intType);
    7ed0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ed4:	9909      	ldr	r1, [sp, #36]	; 0x24
    7ed6:	4618      	mov	r0, r3
    7ed8:	f000 fb06 	bl	84e8 <FlexCAN_IRQHandlerRxFIFO>
                     u32intType--)
    7edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7ede:	3b01      	subs	r3, #1
    7ee0:	9309      	str	r3, [sp, #36]	; 0x24
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    7ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7ee4:	2b04      	cmp	r3, #4
    7ee6:	d8ec      	bhi.n	7ec2 <FlexCAN_ProccessLegacyRxFIFO+0x64>
                    }
                }
            }

            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    7ee8:	ab05      	add	r3, sp, #20
    7eea:	2100      	movs	r1, #0
    7eec:	4618      	mov	r0, r3
    7eee:	f7f9 f920 	bl	1132 <OsIf_GetElapsed>
    7ef2:	4602      	mov	r2, r0
    7ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7ef6:	4413      	add	r3, r2
    7ef8:	930a      	str	r3, [sp, #40]	; 0x28
            if (timeElapsed >= mS2Ticks)
    7efa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7efc:	9b06      	ldr	r3, [sp, #24]
    7efe:	429a      	cmp	r2, r3
    7f00:	d302      	bcc.n	7f08 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
            {
                eResult = FLEXCAN_STATUS_TIMEOUT;
    7f02:	2303      	movs	r3, #3
    7f04:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    7f06:	e003      	b.n	7f10 <FlexCAN_ProccessLegacyRxFIFO+0xb2>
        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    7f08:	9b08      	ldr	r3, [sp, #32]
    7f0a:	685b      	ldr	r3, [r3, #4]
    7f0c:	2b01      	cmp	r3, #1
    7f0e:	d0d0      	beq.n	7eb2 <FlexCAN_ProccessLegacyRxFIFO+0x54>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == eResult) && (FLEXCAN_RXFIFO_USING_POLLING != pState->transferType))
    7f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7f12:	2b03      	cmp	r3, #3
    7f14:	d125      	bne.n	7f62 <FlexCAN_ProccessLegacyRxFIFO+0x104>
    7f16:	9b08      	ldr	r3, [sp, #32]
    7f18:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    7f1c:	2b01      	cmp	r3, #1
    7f1e:	d020      	beq.n	7f62 <FlexCAN_ProccessLegacyRxFIFO+0x104>
        {
            /* Disable RX FIFO interrupts*/
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, pState->isIntActive);
    7f20:	9b08      	ldr	r3, [sp, #32]
    7f22:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7f26:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7f2a:	9300      	str	r3, [sp, #0]
    7f2c:	2300      	movs	r3, #0
    7f2e:	2205      	movs	r2, #5
    7f30:	9807      	ldr	r0, [sp, #28]
    7f32:	f002 feef 	bl	ad14 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, pState->isIntActive);
    7f36:	9b08      	ldr	r3, [sp, #32]
    7f38:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7f3c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7f40:	9300      	str	r3, [sp, #0]
    7f42:	2300      	movs	r3, #0
    7f44:	2206      	movs	r2, #6
    7f46:	9807      	ldr	r0, [sp, #28]
    7f48:	f002 fee4 	bl	ad14 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, pState->isIntActive);
    7f4c:	9b08      	ldr	r3, [sp, #32]
    7f4e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7f52:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7f56:	9300      	str	r3, [sp, #0]
    7f58:	2300      	movs	r3, #0
    7f5a:	2207      	movs	r2, #7
    7f5c:	9807      	ldr	r0, [sp, #28]
    7f5e:	f002 fed9 	bl	ad14 <FlexCAN_SetMsgBuffIntCmd>
                (void)Dma_Ip_SetLogicChannelCommand(pState->rxFifoDMAChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            }
#endif
        }

        switch (pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    7f62:	9b08      	ldr	r3, [sp, #32]
    7f64:	685b      	ldr	r3, [r3, #4]
    7f66:	2b00      	cmp	r3, #0
    7f68:	d005      	beq.n	7f76 <FlexCAN_ProccessLegacyRxFIFO+0x118>
    7f6a:	2b01      	cmp	r3, #1
    7f6c:	d106      	bne.n	7f7c <FlexCAN_ProccessLegacyRxFIFO+0x11e>
        {
            case FLEXCAN_MB_RX_BUSY:
                pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    7f6e:	9b08      	ldr	r3, [sp, #32]
    7f70:	2200      	movs	r2, #0
    7f72:	605a      	str	r2, [r3, #4]
                break;
    7f74:	e005      	b.n	7f82 <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_IDLE:
                eResult = FLEXCAN_STATUS_SUCCESS;
    7f76:	2300      	movs	r3, #0
    7f78:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    7f7a:	e002      	b.n	7f82 <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_DMA_ERROR:
                eResult = FLEXCAN_STATUS_ERROR;
                break;
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
            default:
                eResult = FLEXCAN_STATUS_ERROR;
    7f7c:	2301      	movs	r3, #1
    7f7e:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    7f80:	bf00      	nop
        }

    return eResult;
    7f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    7f84:	4618      	mov	r0, r3
    7f86:	b00d      	add	sp, #52	; 0x34
    7f88:	f85d fb04 	ldr.w	pc, [sp], #4
    7f8c:	1fff8f9c 	.word	0x1fff8f9c
    7f90:	0000e8f4 	.word	0x0000e8f4

00007f94 <FlexCAN_StartRxMessageBufferData>:
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageBufferData(uint8 instance,
                                                              uint8 mb_idx,
                                                              Flexcan_Ip_MsgBuffType * data,
                                                              boolean isPolling
                                                             )
{
    7f94:	b084      	sub	sp, #16
    7f96:	9200      	str	r2, [sp, #0]
    7f98:	461a      	mov	r2, r3
    7f9a:	4603      	mov	r3, r0
    7f9c:	f88d 3007 	strb.w	r3, [sp, #7]
    7fa0:	460b      	mov	r3, r1
    7fa2:	f88d 3006 	strb.w	r3, [sp, #6]
    7fa6:	4613      	mov	r3, r2
    7fa8:	f88d 3005 	strb.w	r3, [sp, #5]

    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    7fac:	2300      	movs	r3, #0
    7fae:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    7fb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7fb4:	4a15      	ldr	r2, [pc, #84]	; (800c <FlexCAN_StartRxMessageBufferData+0x78>)
    7fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fba:	9302      	str	r3, [sp, #8]
    }
    else
    {
#endif
        /* Start receiving mailbox */
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    7fbc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7fc0:	9a02      	ldr	r2, [sp, #8]
    7fc2:	011b      	lsls	r3, r3, #4
    7fc4:	4413      	add	r3, r2
    7fc6:	3304      	adds	r3, #4
    7fc8:	681b      	ldr	r3, [r3, #0]
    7fca:	2b00      	cmp	r3, #0
    7fcc:	d002      	beq.n	7fd4 <FlexCAN_StartRxMessageBufferData+0x40>
        {
            result = FLEXCAN_STATUS_BUSY;
    7fce:	2302      	movs	r3, #2
    7fd0:	9303      	str	r3, [sp, #12]
    7fd2:	e017      	b.n	8004 <FlexCAN_StartRxMessageBufferData+0x70>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_RX_BUSY;
    7fd4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7fd8:	9a02      	ldr	r2, [sp, #8]
    7fda:	011b      	lsls	r3, r3, #4
    7fdc:	4413      	add	r3, r2
    7fde:	3304      	adds	r3, #4
    7fe0:	2201      	movs	r2, #1
    7fe2:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].pMBmessage = data;
    7fe4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7fe8:	9a02      	ldr	r2, [sp, #8]
    7fea:	011b      	lsls	r3, r3, #4
    7fec:	4413      	add	r3, r2
    7fee:	9a00      	ldr	r2, [sp, #0]
    7ff0:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = isPolling;
    7ff2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7ff6:	9a02      	ldr	r2, [sp, #8]
    7ff8:	011b      	lsls	r3, r3, #4
    7ffa:	4413      	add	r3, r2
    7ffc:	3308      	adds	r3, #8
    7ffe:	f89d 2005 	ldrb.w	r2, [sp, #5]
    8002:	701a      	strb	r2, [r3, #0]
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    8004:	9b03      	ldr	r3, [sp, #12]
}
    8006:	4618      	mov	r0, r3
    8008:	b004      	add	sp, #16
    800a:	4770      	bx	lr
    800c:	1fff8f9c 	.word	0x1fff8f9c

00008010 <FlexCAN_StartSendData>:
                                                   uint8 mb_idx,
                                                   const Flexcan_Ip_DataInfoType * tx_info,
                                                   uint32 msg_id,
                                                   const uint8 * mb_data
                                                  )
{
    8010:	b500      	push	{lr}
    8012:	b08f      	sub	sp, #60	; 0x3c
    8014:	9204      	str	r2, [sp, #16]
    8016:	9303      	str	r3, [sp, #12]
    8018:	4603      	mov	r3, r0
    801a:	f88d 3017 	strb.w	r3, [sp, #23]
    801e:	460b      	mov	r3, r1
    8020:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    8024:	2300      	movs	r3, #0
    8026:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[Flexcan_Ip_u8Instance];
    8028:	f89d 3017 	ldrb.w	r3, [sp, #23]
    802c:	4a38      	ldr	r2, [pc, #224]	; (8110 <FlexCAN_StartSendData+0x100>)
    802e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8032:	930c      	str	r3, [sp, #48]	; 0x30
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    8034:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8038:	4a36      	ldr	r2, [pc, #216]	; (8114 <FlexCAN_StartSendData+0x104>)
    803a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    803e:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    8040:	2300      	movs	r3, #0
    8042:	930a      	str	r3, [sp, #40]	; 0x28
        eResult = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
    else
    {
#endif
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    8044:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    804a:	011b      	lsls	r3, r3, #4
    804c:	4413      	add	r3, r2
    804e:	3304      	adds	r3, #4
    8050:	681b      	ldr	r3, [r3, #0]
    8052:	2b00      	cmp	r3, #0
    8054:	d002      	beq.n	805c <FlexCAN_StartSendData+0x4c>
        {
            eResult = FLEXCAN_STATUS_BUSY;
    8056:	2302      	movs	r3, #2
    8058:	930d      	str	r3, [sp, #52]	; 0x34
    805a:	e053      	b.n	8104 <FlexCAN_StartSendData+0xf4>
        }
        else
        {
            /* Clear message buffer flag */
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    805c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8060:	4619      	mov	r1, r3
    8062:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8064:	f7ff fbee 	bl	7844 <FlexCAN_ClearMsgBuffIntStatusFlag>

            state->mbs[mb_idx].state = FLEXCAN_MB_TX_BUSY;
    8068:	f89d 3016 	ldrb.w	r3, [sp, #22]
    806c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    806e:	011b      	lsls	r3, r3, #4
    8070:	4413      	add	r3, r2
    8072:	3304      	adds	r3, #4
    8074:	2202      	movs	r2, #2
    8076:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].time_stamp = 0U;
    8078:	f89d 3016 	ldrb.w	r3, [sp, #22]
    807c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    807e:	011b      	lsls	r3, r3, #4
    8080:	4413      	add	r3, r2
    8082:	330c      	adds	r3, #12
    8084:	2200      	movs	r2, #0
    8086:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = tx_info->is_polling;
    8088:	f89d 3016 	ldrb.w	r3, [sp, #22]
    808c:	9a04      	ldr	r2, [sp, #16]
    808e:	7b11      	ldrb	r1, [r2, #12]
    8090:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8092:	011b      	lsls	r3, r3, #4
    8094:	4413      	add	r3, r2
    8096:	3308      	adds	r3, #8
    8098:	460a      	mov	r2, r1
    809a:	701a      	strb	r2, [r3, #0]
            state->mbs[mb_idx].isRemote = tx_info->is_remote;
    809c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    80a0:	9a04      	ldr	r2, [sp, #16]
    80a2:	7ad1      	ldrb	r1, [r2, #11]
    80a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    80a6:	011b      	lsls	r3, r3, #4
    80a8:	4413      	add	r3, r2
    80aa:	3309      	adds	r3, #9
    80ac:	460a      	mov	r2, r1
    80ae:	701a      	strb	r2, [r3, #0]

            cs.dataLen = tx_info->data_length;
    80b0:	9b04      	ldr	r3, [sp, #16]
    80b2:	685b      	ldr	r3, [r3, #4]
    80b4:	9308      	str	r3, [sp, #32]

            cs.msgIdType = tx_info->msg_id_type;
    80b6:	9b04      	ldr	r3, [sp, #16]
    80b8:	681b      	ldr	r3, [r3, #0]
    80ba:	9307      	str	r3, [sp, #28]

        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            cs.fd_enable = tx_info->fd_enable;
    80bc:	9b04      	ldr	r3, [sp, #16]
    80be:	7a1b      	ldrb	r3, [r3, #8]
    80c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            cs.fd_padding = tx_info->fd_padding;
    80c4:	9b04      	ldr	r3, [sp, #16]
    80c6:	7a5b      	ldrb	r3, [r3, #9]
    80c8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
            cs.enable_brs = tx_info->enable_brs;
    80cc:	9b04      	ldr	r3, [sp, #16]
    80ce:	7a9b      	ldrb	r3, [r3, #10]
    80d0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        #endif

            if (tx_info->is_remote)
    80d4:	9b04      	ldr	r3, [sp, #16]
    80d6:	7adb      	ldrb	r3, [r3, #11]
    80d8:	2b00      	cmp	r3, #0
    80da:	d002      	beq.n	80e2 <FlexCAN_StartSendData+0xd2>
            {
                cs.code = (uint32)FLEXCAN_TX_REMOTE;
    80dc:	231c      	movs	r3, #28
    80de:	9306      	str	r3, [sp, #24]
    80e0:	e001      	b.n	80e6 <FlexCAN_StartSendData+0xd6>
            }
            else
            {
                cs.code = (uint32)FLEXCAN_TX_DATA;
    80e2:	230c      	movs	r3, #12
    80e4:	9306      	str	r3, [sp, #24]
            }
            pMbAddr = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    80e6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    80ea:	4619      	mov	r1, r3
    80ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
    80ee:	f002 fa89 	bl	a604 <FlexCAN_GetMsgBuffRegion>
    80f2:	900a      	str	r0, [sp, #40]	; 0x28
            FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, FALSE);
    80f4:	a906      	add	r1, sp, #24
    80f6:	2300      	movs	r3, #0
    80f8:	9300      	str	r3, [sp, #0]
    80fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    80fc:	9a03      	ldr	r2, [sp, #12]
    80fe:	980a      	ldr	r0, [sp, #40]	; 0x28
    8100:	f002 ffd2 	bl	b0a8 <FlexCAN_SetTxMsgBuff>
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    8104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    8106:	4618      	mov	r0, r3
    8108:	b00f      	add	sp, #60	; 0x3c
    810a:	f85d fb04 	ldr.w	pc, [sp], #4
    810e:	bf00      	nop
    8110:	1fff8f9c 	.word	0x1fff8f9c
    8114:	0000e8f4 	.word	0x0000e8f4

00008118 <FlexCAN_StartRxMessageFifoData>:
 * receiving data and enabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageFifoData(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    8118:	b500      	push	{lr}
    811a:	b089      	sub	sp, #36	; 0x24
    811c:	4603      	mov	r3, r0
    811e:	9102      	str	r1, [sp, #8]
    8120:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = NULL_PTR;
    8124:	2300      	movs	r3, #0
    8126:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StateType * state = NULL_PTR;
    8128:	2300      	movs	r3, #0
    812a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    812c:	2300      	movs	r3, #0
    812e:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base = Flexcan_Ip_apxBase[instance];
    8130:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8134:	4a26      	ldr	r2, [pc, #152]	; (81d0 <FlexCAN_StartRxMessageFifoData+0xb8>)
    8136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    813a:	9306      	str	r3, [sp, #24]
    state = Flexcan_Ip_apxState[instance];
    813c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8140:	4a24      	ldr	r2, [pc, #144]	; (81d4 <FlexCAN_StartRxMessageFifoData+0xbc>)
    8142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8146:	9305      	str	r3, [sp, #20]
    #endif
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    /* Start receiving fifo */
    if (state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state == FLEXCAN_MB_RX_BUSY)
    8148:	9b05      	ldr	r3, [sp, #20]
    814a:	685b      	ldr	r3, [r3, #4]
    814c:	2b01      	cmp	r3, #1
    814e:	d102      	bne.n	8156 <FlexCAN_StartRxMessageFifoData+0x3e>
    {
        eResult = FLEXCAN_STATUS_BUSY;
    8150:	2302      	movs	r3, #2
    8152:	9307      	str	r3, [sp, #28]
    8154:	e036      	b.n	81c4 <FlexCAN_StartRxMessageFifoData+0xac>
    }
    else
    {
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_RX_BUSY;
    8156:	9b05      	ldr	r3, [sp, #20]
    8158:	2201      	movs	r2, #1
    815a:	605a      	str	r2, [r3, #4]
    if (FLEXCAN_RXFIFO_USING_POLLING == state->transferType)
    815c:	9b05      	ldr	r3, [sp, #20]
    815e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    8162:	2b01      	cmp	r3, #1
    8164:	d102      	bne.n	816c <FlexCAN_StartRxMessageFifoData+0x54>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    8166:	9b05      	ldr	r3, [sp, #20]
    8168:	2201      	movs	r2, #1
    816a:	721a      	strb	r2, [r3, #8]
    }

    /* This will get filled by the interrupt handler */
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = data;
    816c:	9b05      	ldr	r3, [sp, #20]
    816e:	9a02      	ldr	r2, [sp, #8]
    8170:	601a      	str	r2, [r3, #0]

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    8172:	9b05      	ldr	r3, [sp, #20]
    8174:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    8178:	2b00      	cmp	r3, #0
    817a:	d123      	bne.n	81c4 <FlexCAN_StartRxMessageFifoData+0xac>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = FALSE;
    817c:	9b05      	ldr	r3, [sp, #20]
    817e:	2200      	movs	r2, #0
    8180:	721a      	strb	r2, [r3, #8]
        /* Enable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, TRUE, state->isIntActive);
    8182:	9b05      	ldr	r3, [sp, #20]
    8184:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8188:	f89d 100f 	ldrb.w	r1, [sp, #15]
    818c:	9300      	str	r3, [sp, #0]
    818e:	2301      	movs	r3, #1
    8190:	2206      	movs	r2, #6
    8192:	9806      	ldr	r0, [sp, #24]
    8194:	f002 fdbe 	bl	ad14 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, TRUE, state->isIntActive);
    8198:	9b05      	ldr	r3, [sp, #20]
    819a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    819e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    81a2:	9300      	str	r3, [sp, #0]
    81a4:	2301      	movs	r3, #1
    81a6:	2207      	movs	r2, #7
    81a8:	9806      	ldr	r0, [sp, #24]
    81aa:	f002 fdb3 	bl	ad14 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, TRUE, state->isIntActive);
    81ae:	9b05      	ldr	r3, [sp, #20]
    81b0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    81b4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    81b8:	9300      	str	r3, [sp, #0]
    81ba:	2301      	movs	r3, #1
    81bc:	2205      	movs	r2, #5
    81be:	9806      	ldr	r0, [sp, #24]
    81c0:	f002 fda8 	bl	ad14 <FlexCAN_SetMsgBuffIntCmd>
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    81c4:	9b07      	ldr	r3, [sp, #28]
}
    81c6:	4618      	mov	r0, r3
    81c8:	b009      	add	sp, #36	; 0x24
    81ca:	f85d fb04 	ldr.w	pc, [sp], #4
    81ce:	bf00      	nop
    81d0:	0000e8f4 	.word	0x0000e8f4
    81d4:	1fff8f9c 	.word	0x1fff8f9c

000081d8 <FlexCAN_IRQHandlerRxMB>:
 *
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerRxMB(uint8 instance, uint32 mb_idx)
{
    81d8:	b510      	push	{r4, lr}
    81da:	b09e      	sub	sp, #120	; 0x78
    81dc:	4603      	mov	r3, r0
    81de:	9102      	str	r1, [sp, #8]
    81e0:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    81e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    81e8:	4a70      	ldr	r2, [pc, #448]	; (83ac <FlexCAN_IRQHandlerRxMB+0x1d4>)
    81ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81ee:	931c      	str	r3, [sp, #112]	; 0x70
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    81f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    81f4:	4a6e      	ldr	r2, [pc, #440]	; (83b0 <FlexCAN_IRQHandlerRxMB+0x1d8>)
    81f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81fa:	931b      	str	r3, [sp, #108]	; 0x6c
    Flexcan_Ip_MsgBuffType data;
    boolean bCurrentIntStat = FALSE;
    81fc:	2300      	movs	r3, #0
    81fe:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[mb_idx].pMBmessage  */
    if (NULL_PTR == state->mbs[mb_idx].pMBmessage)
    8202:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    8204:	9b02      	ldr	r3, [sp, #8]
    8206:	011b      	lsls	r3, r3, #4
    8208:	4413      	add	r3, r2
    820a:	681b      	ldr	r3, [r3, #0]
    820c:	2b00      	cmp	r3, #0
    820e:	d105      	bne.n	821c <FlexCAN_IRQHandlerRxMB+0x44>
    {
        state->mbs[mb_idx].pMBmessage = &data;
    8210:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    8212:	9b02      	ldr	r3, [sp, #8]
    8214:	011b      	lsls	r3, r3, #4
    8216:	4413      	add	r3, r2
    8218:	aa05      	add	r2, sp, #20
    821a:	601a      	str	r2, [r3, #0]
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    boolean bIsCriticalSectionNeeded = FALSE;
    821c:	2300      	movs	r3, #0
    821e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77

    /* Expectation: the sequence will not be interrupted when it already in interupt context */
    if (TRUE == state->mbs[mb_idx].isPolling)
    8222:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    8224:	9b02      	ldr	r3, [sp, #8]
    8226:	011b      	lsls	r3, r3, #4
    8228:	4413      	add	r3, r2
    822a:	3308      	adds	r3, #8
    822c:	781b      	ldrb	r3, [r3, #0]
    822e:	2b00      	cmp	r3, #0
    8230:	d008      	beq.n	8244 <FlexCAN_IRQHandlerRxMB+0x6c>
        if ((state->bIsLegacyFifoEn ||  state->bIsEnhancedFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #else
        if ((state->bIsLegacyFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    #elif defined (ERR_IPV_FLEXCAN_E050246)
        if (state->bIsLegacyFifoEn)
    8232:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8234:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    8238:	2b00      	cmp	r3, #0
    823a:	d003      	beq.n	8244 <FlexCAN_IRQHandlerRxMB+0x6c>
    #endif
        {
            bIsCriticalSectionNeeded = TRUE;
    823c:	2301      	movs	r3, #1
    823e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
            /* Disable all IRQs */
            OsIf_SuspendAllInterrupts();
    8242:	b672      	cpsid	i
        }
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    /* Lock RX message buffer and RX FIFO*/
    FlexCAN_LockRxMsgBuff(base, mb_idx);
    8244:	9902      	ldr	r1, [sp, #8]
    8246:	981c      	ldr	r0, [sp, #112]	; 0x70
    8248:	f002 fd55 	bl	acf6 <FlexCAN_LockRxMsgBuff>

    /* Get RX MB field values*/
    FlexCAN_GetMsgBuff(base, mb_idx, state->mbs[mb_idx].pMBmessage);
    824c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    824e:	9b02      	ldr	r3, [sp, #8]
    8250:	011b      	lsls	r3, r3, #4
    8252:	4413      	add	r3, r2
    8254:	681b      	ldr	r3, [r3, #0]
    8256:	461a      	mov	r2, r3
    8258:	9902      	ldr	r1, [sp, #8]
    825a:	981c      	ldr	r0, [sp, #112]	; 0x70
    825c:	f002 fe7a 	bl	af54 <FlexCAN_GetMsgBuff>

    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    8260:	9902      	ldr	r1, [sp, #8]
    8262:	981c      	ldr	r0, [sp, #112]	; 0x70
    8264:	f7ff faee 	bl	7844 <FlexCAN_ClearMsgBuffIntStatusFlag>

#if defined (ERR_IPV_FLEXCAN_E050246)
    /* the CODE field is updated with an incorrect value when MBx is locked by software for more than 20 CAN bit times and FIFO enable.
    When the CODE field is corrupted, it's probably updated with any value that is invalid. Except EMPTY, FULL and OVERRUN other values can not make MB unlocked and move-in process. */
    if ((state->bIsLegacyFifoEn) && \
    8268:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    826a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    826e:	2b00      	cmp	r3, #0
    8270:	d032      	beq.n	82d8 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    8272:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    8274:	9b02      	ldr	r3, [sp, #8]
    8276:	011b      	lsls	r3, r3, #4
    8278:	4413      	add	r3, r2
    827a:	681b      	ldr	r3, [r3, #0]
    827c:	681b      	ldr	r3, [r3, #0]
    827e:	0e1b      	lsrs	r3, r3, #24
    8280:	f003 030f 	and.w	r3, r3, #15
    if ((state->bIsLegacyFifoEn) && \
    8284:	2b02      	cmp	r3, #2
    8286:	d027      	beq.n	82d8 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    8288:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    828a:	9b02      	ldr	r3, [sp, #8]
    828c:	011b      	lsls	r3, r3, #4
    828e:	4413      	add	r3, r2
    8290:	681b      	ldr	r3, [r3, #0]
    8292:	681b      	ldr	r3, [r3, #0]
    8294:	0e1b      	lsrs	r3, r3, #24
    8296:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    829a:	2b04      	cmp	r3, #4
    829c:	d01c      	beq.n	82d8 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_OVERRUN != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)))
    829e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    82a0:	9b02      	ldr	r3, [sp, #8]
    82a2:	011b      	lsls	r3, r3, #4
    82a4:	4413      	add	r3, r2
    82a6:	681b      	ldr	r3, [r3, #0]
    82a8:	681b      	ldr	r3, [r3, #0]
    82aa:	0e1b      	lsrs	r3, r3, #24
    82ac:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    82b0:	2b06      	cmp	r3, #6
    82b2:	d011      	beq.n	82d8 <FlexCAN_IRQHandlerRxMB+0x100>
    {
        /* Update the cs code for next sequence move in MB.
        A CPU write into the C/S word also unlocks the MB */
        volatile uint32 *flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    82b4:	9902      	ldr	r1, [sp, #8]
    82b6:	981c      	ldr	r0, [sp, #112]	; 0x70
    82b8:	f002 f9a4 	bl	a604 <FlexCAN_GetMsgBuffRegion>
    82bc:	9019      	str	r0, [sp, #100]	; 0x64
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    82be:	9b19      	ldr	r3, [sp, #100]	; 0x64
    82c0:	681b      	ldr	r3, [r3, #0]
    82c2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    82c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    82c8:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (((uint32)FLEXCAN_RX_EMPTY) << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    82ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
    82cc:	681b      	ldr	r3, [r3, #0]
    82ce:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    82d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    82d4:	601a      	str	r2, [r3, #0]
    {
    82d6:	e002      	b.n	82de <FlexCAN_IRQHandlerRxMB+0x106>
    }
    else
#endif
    {
    /* Unlock RX message buffer and RX FIFO*/
    FlexCAN_UnlockRxMsgBuff(base);
    82d8:	981c      	ldr	r0, [sp, #112]	; 0x70
    82da:	f7ff faac 	bl	7836 <FlexCAN_UnlockRxMsgBuff>
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    /* To ensure that interrupts are resumed when they are suspended */
    if (TRUE == bIsCriticalSectionNeeded)
    82de:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    82e2:	2b00      	cmp	r3, #0
    82e4:	d000      	beq.n	82e8 <FlexCAN_IRQHandlerRxMB+0x110>
    {
        /* Enable all IRQs */
        OsIf_ResumeAllInterrupts();
    82e6:	b662      	cpsie	i
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    82e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    82ea:	9b02      	ldr	r3, [sp, #8]
    82ec:	011b      	lsls	r3, r3, #4
    82ee:	4413      	add	r3, r2
    82f0:	3304      	adds	r3, #4
    82f2:	2200      	movs	r2, #0
    82f4:	601a      	str	r2, [r3, #0]

    bCurrentIntStat = state->mbs[mb_idx].isPolling;
    82f6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    82f8:	9b02      	ldr	r3, [sp, #8]
    82fa:	011b      	lsls	r3, r3, #4
    82fc:	4413      	add	r3, r2
    82fe:	3308      	adds	r3, #8
    8300:	781b      	ldrb	r3, [r3, #0]
    8302:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* Invoke callback */
    if (state->callback != NULL_PTR)
    8306:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8308:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    830c:	2b00      	cmp	r3, #0
    830e:	d008      	beq.n	8322 <FlexCAN_IRQHandlerRxMB+0x14a>
    {
        state->callback(instance, FLEXCAN_EVENT_RX_COMPLETE, mb_idx, state);
    8310:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8312:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    8316:	f89d 000f 	ldrb.w	r0, [sp, #15]
    831a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    831c:	9a02      	ldr	r2, [sp, #8]
    831e:	2100      	movs	r1, #0
    8320:	47a0      	blx	r4
    }

    if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state) && (FALSE == state->mbs[mb_idx].isPolling))
    8322:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    8324:	9b02      	ldr	r3, [sp, #8]
    8326:	011b      	lsls	r3, r3, #4
    8328:	4413      	add	r3, r2
    832a:	3304      	adds	r3, #4
    832c:	681b      	ldr	r3, [r3, #0]
    832e:	2b00      	cmp	r3, #0
    8330:	d11e      	bne.n	8370 <FlexCAN_IRQHandlerRxMB+0x198>
    8332:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    8334:	9b02      	ldr	r3, [sp, #8]
    8336:	011b      	lsls	r3, r3, #4
    8338:	4413      	add	r3, r2
    833a:	3308      	adds	r3, #8
    833c:	781b      	ldrb	r3, [r3, #0]
    833e:	f083 0301 	eor.w	r3, r3, #1
    8342:	b2db      	uxtb	r3, r3
    8344:	2b00      	cmp	r3, #0
    8346:	d013      	beq.n	8370 <FlexCAN_IRQHandlerRxMB+0x198>
    {
        /* callback is not called, need to reset to default value */
        state->mbs[mb_idx].isPolling = TRUE;
    8348:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    834a:	9b02      	ldr	r3, [sp, #8]
    834c:	011b      	lsls	r3, r3, #4
    834e:	4413      	add	r3, r2
    8350:	3308      	adds	r3, #8
    8352:	2201      	movs	r2, #1
    8354:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    8356:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8358:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    835c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8360:	9300      	str	r3, [sp, #0]
    8362:	2300      	movs	r3, #0
    8364:	9a02      	ldr	r2, [sp, #8]
    8366:	981c      	ldr	r0, [sp, #112]	; 0x70
    8368:	f002 fcd4 	bl	ad14 <FlexCAN_SetMsgBuffIntCmd>
    836c:	bf00      	nop
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    836e:	e019      	b.n	83a4 <FlexCAN_IRQHandlerRxMB+0x1cc>
    else if ((FALSE == bCurrentIntStat) && (TRUE == state->mbs[mb_idx].isPolling))
    8370:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
    8374:	f083 0301 	eor.w	r3, r3, #1
    8378:	b2db      	uxtb	r3, r3
    837a:	2b00      	cmp	r3, #0
    837c:	d012      	beq.n	83a4 <FlexCAN_IRQHandlerRxMB+0x1cc>
    837e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    8380:	9b02      	ldr	r3, [sp, #8]
    8382:	011b      	lsls	r3, r3, #4
    8384:	4413      	add	r3, r2
    8386:	3308      	adds	r3, #8
    8388:	781b      	ldrb	r3, [r3, #0]
    838a:	2b00      	cmp	r3, #0
    838c:	d00a      	beq.n	83a4 <FlexCAN_IRQHandlerRxMB+0x1cc>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    838e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8390:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8394:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8398:	9300      	str	r3, [sp, #0]
    839a:	2300      	movs	r3, #0
    839c:	9a02      	ldr	r2, [sp, #8]
    839e:	981c      	ldr	r0, [sp, #112]	; 0x70
    83a0:	f002 fcb8 	bl	ad14 <FlexCAN_SetMsgBuffIntCmd>
}
    83a4:	bf00      	nop
    83a6:	b01e      	add	sp, #120	; 0x78
    83a8:	bd10      	pop	{r4, pc}
    83aa:	bf00      	nop
    83ac:	0000e8f4 	.word	0x0000e8f4
    83b0:	1fff8f9c 	.word	0x1fff8f9c

000083b4 <FlexCAN_IRQHandlerTxMB>:
 * note: just using in interrupt mode
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerTxMB(uint8 u8Instance, uint32 u32MbIdx)
{
    83b4:	b510      	push	{r4, lr}
    83b6:	b09a      	sub	sp, #104	; 0x68
    83b8:	4603      	mov	r3, r0
    83ba:	9102      	str	r1, [sp, #8]
    83bc:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    83c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    83c4:	4a46      	ldr	r2, [pc, #280]	; (84e0 <FlexCAN_IRQHandlerTxMB+0x12c>)
    83c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83ca:	9319      	str	r3, [sp, #100]	; 0x64
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    83cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    83d0:	4a44      	ldr	r2, [pc, #272]	; (84e4 <FlexCAN_IRQHandlerTxMB+0x130>)
    83d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83d6:	9318      	str	r3, [sp, #96]	; 0x60
    Flexcan_Ip_MsgBuffType mb;
    mb.cs = 0U;
    83d8:	2300      	movs	r3, #0
    83da:	9304      	str	r3, [sp, #16]
    mb.time_stamp = 0U;
    83dc:	2300      	movs	r3, #0
    83de:	9317      	str	r3, [sp, #92]	; 0x5c
    if (pState->mbs[u32MbIdx].isRemote)
    83e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    83e2:	9b02      	ldr	r3, [sp, #8]
    83e4:	011b      	lsls	r3, r3, #4
    83e6:	4413      	add	r3, r2
    83e8:	3309      	adds	r3, #9
    83ea:	781b      	ldrb	r3, [r3, #0]
    83ec:	2b00      	cmp	r3, #0
    83ee:	d01e      	beq.n	842e <FlexCAN_IRQHandlerTxMB+0x7a>
    {
        FlexCAN_LockRxMsgBuff(pBase, u32MbIdx);
    83f0:	9902      	ldr	r1, [sp, #8]
    83f2:	9819      	ldr	r0, [sp, #100]	; 0x64
    83f4:	f002 fc7f 	bl	acf6 <FlexCAN_LockRxMsgBuff>
        FlexCAN_GetMsgBuff(pBase, u32MbIdx, &mb);
    83f8:	ab04      	add	r3, sp, #16
    83fa:	461a      	mov	r2, r3
    83fc:	9902      	ldr	r1, [sp, #8]
    83fe:	9819      	ldr	r0, [sp, #100]	; 0x64
    8400:	f002 fda8 	bl	af54 <FlexCAN_GetMsgBuff>
        FlexCAN_UnlockRxMsgBuff(pBase);
    8404:	9819      	ldr	r0, [sp, #100]	; 0x64
    8406:	f7ff fa16 	bl	7836 <FlexCAN_UnlockRxMsgBuff>
        pState->mbs[u32MbIdx].time_stamp = mb.time_stamp;
    840a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    840c:	9918      	ldr	r1, [sp, #96]	; 0x60
    840e:	9b02      	ldr	r3, [sp, #8]
    8410:	011b      	lsls	r3, r3, #4
    8412:	440b      	add	r3, r1
    8414:	330c      	adds	r3, #12
    8416:	601a      	str	r2, [r3, #0]
        /* If the frame was a remote frame, clear the flag only if the response was
        * not received yet. If the response was received, leave the flag set in order
        * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
        if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    8418:	9b04      	ldr	r3, [sp, #16]
    841a:	0e1b      	lsrs	r3, r3, #24
    841c:	f003 030f 	and.w	r3, r3, #15
    8420:	2b04      	cmp	r3, #4
    8422:	d116      	bne.n	8452 <FlexCAN_IRQHandlerTxMB+0x9e>
        {
            FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    8424:	9902      	ldr	r1, [sp, #8]
    8426:	9819      	ldr	r0, [sp, #100]	; 0x64
    8428:	f7ff fa0c 	bl	7844 <FlexCAN_ClearMsgBuffIntStatusFlag>
    842c:	e011      	b.n	8452 <FlexCAN_IRQHandlerTxMB+0x9e>
        }
    }
    else
    {
        pState->mbs[u32MbIdx].time_stamp = FlexCAN_GetMsgBuffTimestamp(pBase, u32MbIdx);
    842e:	9902      	ldr	r1, [sp, #8]
    8430:	9819      	ldr	r0, [sp, #100]	; 0x64
    8432:	f002 fd7b 	bl	af2c <FlexCAN_GetMsgBuffTimestamp>
    8436:	4601      	mov	r1, r0
    8438:	9a18      	ldr	r2, [sp, #96]	; 0x60
    843a:	9b02      	ldr	r3, [sp, #8]
    843c:	011b      	lsls	r3, r3, #4
    843e:	4413      	add	r3, r2
    8440:	330c      	adds	r3, #12
    8442:	6019      	str	r1, [r3, #0]
        FlexCAN_UnlockRxMsgBuff(pBase);
    8444:	9819      	ldr	r0, [sp, #100]	; 0x64
    8446:	f7ff f9f6 	bl	7836 <FlexCAN_UnlockRxMsgBuff>
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    844a:	9902      	ldr	r1, [sp, #8]
    844c:	9819      	ldr	r0, [sp, #100]	; 0x64
    844e:	f7ff f9f9 	bl	7844 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }

    pState->mbs[u32MbIdx].state = FLEXCAN_MB_IDLE;
    8452:	9a18      	ldr	r2, [sp, #96]	; 0x60
    8454:	9b02      	ldr	r3, [sp, #8]
    8456:	011b      	lsls	r3, r3, #4
    8458:	4413      	add	r3, r2
    845a:	3304      	adds	r3, #4
    845c:	2200      	movs	r2, #0
    845e:	601a      	str	r2, [r3, #0]

    /* Invoke callback */
    if (pState->callback != NULL_PTR)
    8460:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8462:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    8466:	2b00      	cmp	r3, #0
    8468:	d008      	beq.n	847c <FlexCAN_IRQHandlerTxMB+0xc8>
    {
        pState->callback(u8Instance, FLEXCAN_EVENT_TX_COMPLETE, u32MbIdx, pState);
    846a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    846c:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    8470:	f89d 000f 	ldrb.w	r0, [sp, #15]
    8474:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8476:	9a02      	ldr	r2, [sp, #8]
    8478:	2104      	movs	r1, #4
    847a:	47a0      	blx	r4
    }

    if (FLEXCAN_MB_IDLE == pState->mbs[u32MbIdx].state)
    847c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    847e:	9b02      	ldr	r3, [sp, #8]
    8480:	011b      	lsls	r3, r3, #4
    8482:	4413      	add	r3, r2
    8484:	3304      	adds	r3, #4
    8486:	681b      	ldr	r3, [r3, #0]
    8488:	2b00      	cmp	r3, #0
    848a:	d112      	bne.n	84b2 <FlexCAN_IRQHandlerTxMB+0xfe>
    {
        /* callback is not called, need to reset to default value */
        pState->mbs[u32MbIdx].isPolling = TRUE;
    848c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    848e:	9b02      	ldr	r3, [sp, #8]
    8490:	011b      	lsls	r3, r3, #4
    8492:	4413      	add	r3, r2
    8494:	3308      	adds	r3, #8
    8496:	2201      	movs	r2, #1
    8498:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    849a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    849c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    84a0:	f89d 100f 	ldrb.w	r1, [sp, #15]
    84a4:	9300      	str	r3, [sp, #0]
    84a6:	2300      	movs	r3, #0
    84a8:	9a02      	ldr	r2, [sp, #8]
    84aa:	9819      	ldr	r0, [sp, #100]	; 0x64
    84ac:	f002 fc32 	bl	ad14 <FlexCAN_SetMsgBuffIntCmd>
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    84b0:	e012      	b.n	84d8 <FlexCAN_IRQHandlerTxMB+0x124>
    else if (TRUE == pState->mbs[u32MbIdx].isPolling)
    84b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    84b4:	9b02      	ldr	r3, [sp, #8]
    84b6:	011b      	lsls	r3, r3, #4
    84b8:	4413      	add	r3, r2
    84ba:	3308      	adds	r3, #8
    84bc:	781b      	ldrb	r3, [r3, #0]
    84be:	2b00      	cmp	r3, #0
    84c0:	d00a      	beq.n	84d8 <FlexCAN_IRQHandlerTxMB+0x124>
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    84c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    84c4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    84c8:	f89d 100f 	ldrb.w	r1, [sp, #15]
    84cc:	9300      	str	r3, [sp, #0]
    84ce:	2300      	movs	r3, #0
    84d0:	9a02      	ldr	r2, [sp, #8]
    84d2:	9819      	ldr	r0, [sp, #100]	; 0x64
    84d4:	f002 fc1e 	bl	ad14 <FlexCAN_SetMsgBuffIntCmd>
}
    84d8:	bf00      	nop
    84da:	b01a      	add	sp, #104	; 0x68
    84dc:	bd10      	pop	{r4, pc}
    84de:	bf00      	nop
    84e0:	0000e8f4 	.word	0x0000e8f4
    84e4:	1fff8f9c 	.word	0x1fff8f9c

000084e8 <FlexCAN_IRQHandlerRxFIFO>:
 * Function Name : FlexCAN_IRQHandlerRxFIFO
 * Description   : Process IRQHandler in case of RxFIFO mode selection for CAN interface.
 *
 *END**************************************************************************/
static inline void FlexCAN_IRQHandlerRxFIFO(uint8 instance, uint32 mb_idx)
{
    84e8:	b510      	push	{r4, lr}
    84ea:	b098      	sub	sp, #96	; 0x60
    84ec:	4603      	mov	r3, r0
    84ee:	9100      	str	r1, [sp, #0]
    84f0:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    84f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    84f8:	4a3c      	ldr	r2, [pc, #240]	; (85ec <FlexCAN_IRQHandlerRxFIFO+0x104>)
    84fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84fe:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8500:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8504:	4a3a      	ldr	r2, [pc, #232]	; (85f0 <FlexCAN_IRQHandlerRxFIFO+0x108>)
    8506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    850a:	9316      	str	r3, [sp, #88]	; 0x58
    Flexcan_Ip_MsgBuffType data;

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage  */
    if (NULL_PTR == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage)
    850c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    850e:	681b      	ldr	r3, [r3, #0]
    8510:	2b00      	cmp	r3, #0
    8512:	d102      	bne.n	851a <FlexCAN_IRQHandlerRxFIFO+0x32>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = &data;
    8514:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8516:	aa02      	add	r2, sp, #8
    8518:	601a      	str	r2, [r3, #0]
    }
    switch (mb_idx)
    851a:	9b00      	ldr	r3, [sp, #0]
    851c:	2b07      	cmp	r3, #7
    851e:	d048      	beq.n	85b2 <FlexCAN_IRQHandlerRxFIFO+0xca>
    8520:	9b00      	ldr	r3, [sp, #0]
    8522:	2b07      	cmp	r3, #7
    8524:	d858      	bhi.n	85d8 <FlexCAN_IRQHandlerRxFIFO+0xf0>
    8526:	9b00      	ldr	r3, [sp, #0]
    8528:	2b05      	cmp	r3, #5
    852a:	d003      	beq.n	8534 <FlexCAN_IRQHandlerRxFIFO+0x4c>
    852c:	9b00      	ldr	r3, [sp, #0]
    852e:	2b06      	cmp	r3, #6
    8530:	d02c      	beq.n	858c <FlexCAN_IRQHandlerRxFIFO+0xa4>
            }

            break;
        default:
            /* Do Nothing */
            break;
    8532:	e051      	b.n	85d8 <FlexCAN_IRQHandlerRxFIFO+0xf0>
            if (FLEXCAN_MB_RX_BUSY == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    8534:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8536:	685b      	ldr	r3, [r3, #4]
    8538:	2b01      	cmp	r3, #1
    853a:	d14f      	bne.n	85dc <FlexCAN_IRQHandlerRxFIFO+0xf4>
                FlexCAN_ReadRxFifo(base, state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage);
    853c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    853e:	681b      	ldr	r3, [r3, #0]
    8540:	4619      	mov	r1, r3
    8542:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8544:	f003 f98d 	bl	b862 <FlexCAN_ReadRxFifo>
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    8548:	9900      	ldr	r1, [sp, #0]
    854a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    854c:	f7ff f97a 	bl	7844 <FlexCAN_ClearMsgBuffIntStatusFlag>
                state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    8550:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8552:	2200      	movs	r2, #0
    8554:	605a      	str	r2, [r3, #4]
                if (state->callback != NULL_PTR)
    8556:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8558:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    855c:	2b00      	cmp	r3, #0
    855e:	d008      	beq.n	8572 <FlexCAN_IRQHandlerRxFIFO+0x8a>
                    state->callback(instance, FLEXCAN_EVENT_RXFIFO_COMPLETE, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    8560:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8562:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    8566:	f89d 0007 	ldrb.w	r0, [sp, #7]
    856a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    856c:	2200      	movs	r2, #0
    856e:	2101      	movs	r1, #1
    8570:	47a0      	blx	r4
                if (FLEXCAN_MB_IDLE == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    8572:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8574:	685b      	ldr	r3, [r3, #4]
    8576:	2b00      	cmp	r3, #0
    8578:	d130      	bne.n	85dc <FlexCAN_IRQHandlerRxFIFO+0xf4>
                    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    857a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    857c:	2201      	movs	r2, #1
    857e:	721a      	strb	r2, [r3, #8]
                    FlexCAN_CompleteRxMessageFifoData(instance);
    8580:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8584:	4618      	mov	r0, r3
    8586:	f000 fc61 	bl	8e4c <FlexCAN_CompleteRxMessageFifoData>
            break;
    858a:	e027      	b.n	85dc <FlexCAN_IRQHandlerRxFIFO+0xf4>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    858c:	9900      	ldr	r1, [sp, #0]
    858e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8590:	f7ff f958 	bl	7844 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    8594:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8596:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    859a:	2b00      	cmp	r3, #0
    859c:	d020      	beq.n	85e0 <FlexCAN_IRQHandlerRxFIFO+0xf8>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_WARNING, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    859e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    85a0:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    85a4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    85a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    85aa:	2200      	movs	r2, #0
    85ac:	2102      	movs	r1, #2
    85ae:	47a0      	blx	r4
            break;
    85b0:	e016      	b.n	85e0 <FlexCAN_IRQHandlerRxFIFO+0xf8>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    85b2:	9900      	ldr	r1, [sp, #0]
    85b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    85b6:	f7ff f945 	bl	7844 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    85ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
    85bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    85c0:	2b00      	cmp	r3, #0
    85c2:	d00f      	beq.n	85e4 <FlexCAN_IRQHandlerRxFIFO+0xfc>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_OVERFLOW, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    85c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    85c6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    85ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
    85ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
    85d0:	2200      	movs	r2, #0
    85d2:	2103      	movs	r1, #3
    85d4:	47a0      	blx	r4
            break;
    85d6:	e005      	b.n	85e4 <FlexCAN_IRQHandlerRxFIFO+0xfc>
            break;
    85d8:	bf00      	nop
    85da:	e004      	b.n	85e6 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    85dc:	bf00      	nop
    85de:	e002      	b.n	85e6 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    85e0:	bf00      	nop
    85e2:	e000      	b.n	85e6 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    85e4:	bf00      	nop
    }
}
    85e6:	bf00      	nop
    85e8:	b018      	add	sp, #96	; 0x60
    85ea:	bd10      	pop	{r4, pc}
    85ec:	0000e8f4 	.word	0x0000e8f4
    85f0:	1fff8f9c 	.word	0x1fff8f9c

000085f4 <FlexCAN_AbortTxTransfer>:
 * Description   : Abort transfer for Tx buffer.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_AbortTxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    85f4:	b500      	push	{lr}
    85f6:	b08b      	sub	sp, #44	; 0x2c
    85f8:	4603      	mov	r3, r0
    85fa:	460a      	mov	r2, r1
    85fc:	f88d 3007 	strb.w	r3, [sp, #7]
    8600:	4613      	mov	r3, r2
    8602:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    8606:	f89d 3007 	ldrb.w	r3, [sp, #7]
    860a:	4a3c      	ldr	r2, [pc, #240]	; (86fc <FlexCAN_AbortTxTransfer+0x108>)
    860c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8610:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    8612:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8616:	4a3a      	ldr	r2, [pc, #232]	; (8700 <FlexCAN_AbortTxTransfer+0x10c>)
    8618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    861c:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    861e:	2300      	movs	r3, #0
    8620:	9309      	str	r3, [sp, #36]	; 0x24

    uint32 timeStart = 0U;
    8622:	2300      	movs	r3, #0
    8624:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    8626:	2300      	movs	r3, #0
    8628:	9308      	str	r3, [sp, #32]
    uint32 flexcan_mb_config = 0;
    862a:	2300      	movs	r3, #0
    862c:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = 0U;
    862e:	2300      	movs	r3, #0
    8630:	9304      	str	r3, [sp, #16]
    volatile uint32 * flexcan_mb = NULL_PTR;
    8632:	2300      	movs	r3, #0
    8634:	9303      	str	r3, [sp, #12]

    flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    8636:	f89d 3006 	ldrb.w	r3, [sp, #6]
    863a:	4619      	mov	r1, r3
    863c:	9807      	ldr	r0, [sp, #28]
    863e:	f001 ffe1 	bl	a604 <FlexCAN_GetMsgBuffRegion>
    8642:	9003      	str	r0, [sp, #12]
    flexcan_mb_config = * flexcan_mb;
    8644:	9b03      	ldr	r3, [sp, #12]
    8646:	681b      	ldr	r3, [r3, #0]
    8648:	9305      	str	r3, [sp, #20]
    /* Reset the code */
    flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    864a:	9b05      	ldr	r3, [sp, #20]
    864c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    8650:	9305      	str	r3, [sp, #20]
    flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    8652:	9b05      	ldr	r3, [sp, #20]
    8654:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    8658:	9305      	str	r3, [sp, #20]
    *flexcan_mb = flexcan_mb_config;
    865a:	9b03      	ldr	r3, [sp, #12]
    865c:	9a05      	ldr	r2, [sp, #20]
    865e:	601a      	str	r2, [r3, #0]

    /* Wait to finish abort operation */
    uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8660:	2100      	movs	r1, #0
    8662:	4828      	ldr	r0, [pc, #160]	; (8704 <FlexCAN_AbortTxTransfer+0x110>)
    8664:	f7f8 fd98 	bl	1198 <OsIf_MicrosToTicks>
    8668:	9004      	str	r0, [sp, #16]
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    866a:	2000      	movs	r0, #0
    866c:	f7f8 fd48 	bl	1100 <OsIf_GetCounter>
    8670:	4603      	mov	r3, r0
    8672:	9302      	str	r3, [sp, #8]
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    8674:	e00f      	b.n	8696 <FlexCAN_AbortTxTransfer+0xa2>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8676:	ab02      	add	r3, sp, #8
    8678:	2100      	movs	r1, #0
    867a:	4618      	mov	r0, r3
    867c:	f7f8 fd59 	bl	1132 <OsIf_GetElapsed>
    8680:	4602      	mov	r2, r0
    8682:	9b08      	ldr	r3, [sp, #32]
    8684:	4413      	add	r3, r2
    8686:	9308      	str	r3, [sp, #32]
        if (timeElapsed >= uS2Ticks)
    8688:	9a08      	ldr	r2, [sp, #32]
    868a:	9b04      	ldr	r3, [sp, #16]
    868c:	429a      	cmp	r2, r3
    868e:	d302      	bcc.n	8696 <FlexCAN_AbortTxTransfer+0xa2>
        {
            result = FLEXCAN_STATUS_TIMEOUT;
    8690:	2303      	movs	r3, #3
    8692:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    8694:	e008      	b.n	86a8 <FlexCAN_AbortTxTransfer+0xb4>
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    8696:	f89d 3006 	ldrb.w	r3, [sp, #6]
    869a:	4619      	mov	r1, r3
    869c:	9807      	ldr	r0, [sp, #28]
    869e:	f7ff f8e4 	bl	786a <FlexCAN_GetBuffStatusFlag>
    86a2:	4603      	mov	r3, r0
    86a4:	2b00      	cmp	r3, #0
    86a6:	d0e6      	beq.n	8676 <FlexCAN_AbortTxTransfer+0x82>
        }
    }
    if (result != FLEXCAN_STATUS_TIMEOUT)
    86a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    86aa:	2b03      	cmp	r3, #3
    86ac:	d012      	beq.n	86d4 <FlexCAN_AbortTxTransfer+0xe0>
    {
        flexcan_mb_config = *flexcan_mb;
    86ae:	9b03      	ldr	r3, [sp, #12]
    86b0:	681b      	ldr	r3, [r3, #0]
    86b2:	9305      	str	r3, [sp, #20]
        /* Check if the MBs have been safely Inactivated */
        if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    86b4:	9b05      	ldr	r3, [sp, #20]
    86b6:	0e1b      	lsrs	r3, r3, #24
    86b8:	f003 030f 	and.w	r3, r3, #15
    86bc:	2b08      	cmp	r3, #8
    86be:	d101      	bne.n	86c4 <FlexCAN_AbortTxTransfer+0xd0>
        {
            /* Transmission have occurred */
            result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    86c0:	2305      	movs	r3, #5
    86c2:	9309      	str	r3, [sp, #36]	; 0x24
        }

        if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    86c4:	9b05      	ldr	r3, [sp, #20]
    86c6:	0e1b      	lsrs	r3, r3, #24
    86c8:	f003 030f 	and.w	r3, r3, #15
    86cc:	2b09      	cmp	r3, #9
    86ce:	d101      	bne.n	86d4 <FlexCAN_AbortTxTransfer+0xe0>
        {
            /* Transmission have been aborted */
            result = FLEXCAN_STATUS_SUCCESS;
    86d0:	2300      	movs	r3, #0
    86d2:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    86d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    86d8:	4619      	mov	r1, r3
    86da:	9807      	ldr	r0, [sp, #28]
    86dc:	f7ff f8b2 	bl	7844 <FlexCAN_ClearMsgBuffIntStatusFlag>
    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    86e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    86e4:	9a06      	ldr	r2, [sp, #24]
    86e6:	011b      	lsls	r3, r3, #4
    86e8:	4413      	add	r3, r2
    86ea:	3304      	adds	r3, #4
    86ec:	2200      	movs	r2, #0
    86ee:	601a      	str	r2, [r3, #0]

    return result;
    86f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    86f2:	4618      	mov	r0, r3
    86f4:	b00b      	add	sp, #44	; 0x2c
    86f6:	f85d fb04 	ldr.w	pc, [sp], #4
    86fa:	bf00      	nop
    86fc:	0000e8f4 	.word	0x0000e8f4
    8700:	1fff8f9c 	.word	0x1fff8f9c
    8704:	000f4240 	.word	0x000f4240

00008708 <FlexCAN_AbortRxTransfer>:
 * Description   : Abort transfer for Rx normal or legacy fifo if enabled.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static void FlexCAN_AbortRxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    8708:	b500      	push	{lr}
    870a:	b089      	sub	sp, #36	; 0x24
    870c:	4603      	mov	r3, r0
    870e:	460a      	mov	r2, r1
    8710:	f88d 3007 	strb.w	r3, [sp, #7]
    8714:	4613      	mov	r3, r2
    8716:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    871a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    871e:	4a41      	ldr	r2, [pc, #260]	; (8824 <FlexCAN_AbortRxTransfer+0x11c>)
    8720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8724:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    8726:	f89d 3007 	ldrb.w	r3, [sp, #7]
    872a:	4a3f      	ldr	r2, [pc, #252]	; (8828 <FlexCAN_AbortRxTransfer+0x120>)
    872c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8730:	9306      	str	r3, [sp, #24]
    uint8 val1 = 0U;
    8732:	2300      	movs	r3, #0
    8734:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 val2 = 0U;
    8738:	2300      	movs	r3, #0
    873a:	9304      	str	r3, [sp, #16]
    uint32 flexcan_mb_config = 0;
    873c:	2300      	movs	r3, #0
    873e:	9303      	str	r3, [sp, #12]
    volatile uint32 * flexcan_mb = NULL_PTR;
    8740:	2300      	movs	r3, #0
    8742:	9302      	str	r3, [sp, #8]

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    8744:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8748:	9a06      	ldr	r2, [sp, #24]
    874a:	011b      	lsls	r3, r3, #4
    874c:	4413      	add	r3, r2
    874e:	3304      	adds	r3, #4
    8750:	2200      	movs	r2, #0
    8752:	601a      	str	r2, [r3, #0]
    /* Check if fifo enabled */
    if (TRUE == state->bIsLegacyFifoEn)
    8754:	9b06      	ldr	r3, [sp, #24]
    8756:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    875a:	2b00      	cmp	r3, #0
    875c:	d03c      	beq.n	87d8 <FlexCAN_AbortRxTransfer+0xd0>
    {
        /* Get the number of RX FIFO Filters*/
        val1 = (uint8)(((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    875e:	9b07      	ldr	r3, [sp, #28]
    8760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8762:	0e1b      	lsrs	r3, r3, #24
    8764:	b2db      	uxtb	r3, r3
    8766:	f003 030f 	and.w	r3, r3, #15
    876a:	f88d 3017 	strb.w	r3, [sp, #23]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        val2 = RxFifoOcuppiedLastMsgBuff(val1);
    876e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8772:	4618      	mov	r0, r3
    8774:	f7ff f9f3 	bl	7b5e <RxFifoOcuppiedLastMsgBuff>
    8778:	9004      	str	r0, [sp, #16]
        if (mb_idx > val2)
    877a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    877e:	9a04      	ldr	r2, [sp, #16]
    8780:	429a      	cmp	r2, r3
    8782:	d21b      	bcs.n	87bc <FlexCAN_AbortRxTransfer+0xb4>
        {
            /* This operation is not allowed for MB that are part of RxFIFO */
            flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    8784:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8788:	4619      	mov	r1, r3
    878a:	9807      	ldr	r0, [sp, #28]
    878c:	f001 ff3a 	bl	a604 <FlexCAN_GetMsgBuffRegion>
    8790:	9002      	str	r0, [sp, #8]
            flexcan_mb_config = * flexcan_mb;
    8792:	9b02      	ldr	r3, [sp, #8]
    8794:	681b      	ldr	r3, [r3, #0]
    8796:	9303      	str	r3, [sp, #12]
            /* Reset the code and unlock the MB */
            flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    8798:	9b03      	ldr	r3, [sp, #12]
    879a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    879e:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
            *flexcan_mb = flexcan_mb_config;
    87a0:	9b02      	ldr	r3, [sp, #8]
    87a2:	9a03      	ldr	r2, [sp, #12]
    87a4:	601a      	str	r2, [r3, #0]
            /* Reconfigure The MB as left by RxMBconfig */
            flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    87a6:	9b03      	ldr	r3, [sp, #12]
    87a8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    87ac:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    87ae:	9b03      	ldr	r3, [sp, #12]
    87b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    87b4:	9303      	str	r3, [sp, #12]
            *flexcan_mb = flexcan_mb_config;
    87b6:	9b02      	ldr	r3, [sp, #8]
    87b8:	9a03      	ldr	r2, [sp, #12]
    87ba:	601a      	str	r2, [r3, #0]
        }
        if (FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    87bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    87c0:	2b00      	cmp	r3, #0
    87c2:	d125      	bne.n	8810 <FlexCAN_AbortRxTransfer+0x108>
        {
            FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, state->isIntActive);
    87c4:	9b06      	ldr	r3, [sp, #24]
    87c6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    87ca:	f89d 1007 	ldrb.w	r1, [sp, #7]
    87ce:	2205      	movs	r2, #5
    87d0:	9807      	ldr	r0, [sp, #28]
    87d2:	f002 faf5 	bl	adc0 <FLEXCAN_ClearMsgBuffIntCmd>
    87d6:	e01b      	b.n	8810 <FlexCAN_AbortRxTransfer+0x108>
        }
    }
    else
    {
        /* This operation is not allowed for MB that are part of RxFIFO */
        flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    87d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    87dc:	4619      	mov	r1, r3
    87de:	9807      	ldr	r0, [sp, #28]
    87e0:	f001 ff10 	bl	a604 <FlexCAN_GetMsgBuffRegion>
    87e4:	9002      	str	r0, [sp, #8]
        flexcan_mb_config = * flexcan_mb;
    87e6:	9b02      	ldr	r3, [sp, #8]
    87e8:	681b      	ldr	r3, [r3, #0]
    87ea:	9303      	str	r3, [sp, #12]
        /* Reset the code and unlock the MB */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    87ec:	9b03      	ldr	r3, [sp, #12]
    87ee:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    87f2:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
        *flexcan_mb = flexcan_mb_config;
    87f4:	9b02      	ldr	r3, [sp, #8]
    87f6:	9a03      	ldr	r2, [sp, #12]
    87f8:	601a      	str	r2, [r3, #0]
        /* Reconfigure The MB as left by RxMBconfig */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    87fa:	9b03      	ldr	r3, [sp, #12]
    87fc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    8800:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    8802:	9b03      	ldr	r3, [sp, #12]
    8804:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    8808:	9303      	str	r3, [sp, #12]
        *flexcan_mb = flexcan_mb_config;
    880a:	9b02      	ldr	r3, [sp, #8]
    880c:	9a03      	ldr	r2, [sp, #12]
    880e:	601a      	str	r2, [r3, #0]
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    8810:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8814:	4619      	mov	r1, r3
    8816:	9807      	ldr	r0, [sp, #28]
    8818:	f7ff f814 	bl	7844 <FlexCAN_ClearMsgBuffIntStatusFlag>
}
    881c:	bf00      	nop
    881e:	b009      	add	sp, #36	; 0x24
    8820:	f85d fb04 	ldr.w	pc, [sp], #4
    8824:	0000e8f4 	.word	0x0000e8f4
    8828:	1fff8f9c 	.word	0x1fff8f9c

0000882c <FlexCAN_Ip_Init_Privileged>:
/* implements FlexCAN_Ip_Init_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Init_Privileged(uint8 Flexcan_Ip_u8Instance,
                                                 Flexcan_Ip_StateType * Flexcan_Ip_pState,
                                                 const Flexcan_Ip_ConfigType * Flexcan_Ip_pData
                                                )
{
    882c:	b500      	push	{lr}
    882e:	b089      	sub	sp, #36	; 0x24
    8830:	4603      	mov	r3, r0
    8832:	9102      	str	r1, [sp, #8]
    8834:	9201      	str	r2, [sp, #4]
    8836:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    883a:	2300      	movs	r3, #0
    883c:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    883e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8842:	4a36      	ldr	r2, [pc, #216]	; (891c <FlexCAN_Ip_Init_Privileged+0xf0>)
    8844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8848:	9305      	str	r3, [sp, #20]
    {
        OsIf_Trusted_Call1param(FlexCAN_SetUserAccessAllowed, pBase);
    }
#endif

    eResult = FlexCAN_InitController(Flexcan_Ip_u8Instance, pBase, Flexcan_Ip_pData);
    884a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    884e:	9a01      	ldr	r2, [sp, #4]
    8850:	9905      	ldr	r1, [sp, #20]
    8852:	4618      	mov	r0, r3
    8854:	f7ff fa84 	bl	7d60 <FlexCAN_InitController>
    8858:	9006      	str	r0, [sp, #24]
    if (FLEXCAN_STATUS_SUCCESS == eResult)
    885a:	9b06      	ldr	r3, [sp, #24]
    885c:	2b00      	cmp	r3, #0
    885e:	d158      	bne.n	8912 <FlexCAN_Ip_Init_Privileged+0xe6>
    {
        /* Init Baudrate */
        FlexCAN_InitBaudrate(pBase, Flexcan_Ip_pData);
    8860:	9901      	ldr	r1, [sp, #4]
    8862:	9805      	ldr	r0, [sp, #20]
    8864:	f7ff fad6 	bl	7e14 <FlexCAN_InitBaudrate>
        /* Select mode */
        FlexCAN_SetOperationMode(pBase, Flexcan_Ip_pData->flexcanMode);
    8868:	9b01      	ldr	r3, [sp, #4]
    886a:	68db      	ldr	r3, [r3, #12]
    886c:	4619      	mov	r1, r3
    886e:	9805      	ldr	r0, [sp, #20]
    8870:	f002 fdb8 	bl	b3e4 <FlexCAN_SetOperationMode>

#if (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON)
        FlexCAN_ConfigTimestamp(Flexcan_Ip_u8Instance, pBase, (const Flexcan_Ip_TimeStampConfigType *)(&Flexcan_Ip_pData->time_stamp));
#endif   /* (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON) */

        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    8874:	2300      	movs	r3, #0
    8876:	9307      	str	r3, [sp, #28]
    8878:	e01d      	b.n	88b6 <FlexCAN_Ip_Init_Privileged+0x8a>
        {
            /* Check if blocking need to be any more present in sync\async discussions */
            /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
            Flexcan_Ip_pState->mbs[i].isPolling = TRUE;
    887a:	9a02      	ldr	r2, [sp, #8]
    887c:	9b07      	ldr	r3, [sp, #28]
    887e:	011b      	lsls	r3, r3, #4
    8880:	4413      	add	r3, r2
    8882:	3308      	adds	r3, #8
    8884:	2201      	movs	r2, #1
    8886:	701a      	strb	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].pMBmessage = NULL_PTR;
    8888:	9a02      	ldr	r2, [sp, #8]
    888a:	9b07      	ldr	r3, [sp, #28]
    888c:	011b      	lsls	r3, r3, #4
    888e:	4413      	add	r3, r2
    8890:	2200      	movs	r2, #0
    8892:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].state = FLEXCAN_MB_IDLE;
    8894:	9a02      	ldr	r2, [sp, #8]
    8896:	9b07      	ldr	r3, [sp, #28]
    8898:	011b      	lsls	r3, r3, #4
    889a:	4413      	add	r3, r2
    889c:	3304      	adds	r3, #4
    889e:	2200      	movs	r2, #0
    88a0:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].time_stamp = 0U;
    88a2:	9a02      	ldr	r2, [sp, #8]
    88a4:	9b07      	ldr	r3, [sp, #28]
    88a6:	011b      	lsls	r3, r3, #4
    88a8:	4413      	add	r3, r2
    88aa:	330c      	adds	r3, #12
    88ac:	2200      	movs	r2, #0
    88ae:	601a      	str	r2, [r3, #0]
        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    88b0:	9b07      	ldr	r3, [sp, #28]
    88b2:	3301      	adds	r3, #1
    88b4:	9307      	str	r3, [sp, #28]
    88b6:	9b07      	ldr	r3, [sp, #28]
    88b8:	2b1f      	cmp	r3, #31
    88ba:	d9de      	bls.n	887a <FlexCAN_Ip_Init_Privileged+0x4e>
        /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
        Flexcan_Ip_pState->enhancedFifoOutput.isPolling = TRUE;
        Flexcan_Ip_pState->enhancedFifoOutput.state = FLEXCAN_MB_IDLE;
#endif

        Flexcan_Ip_pState->transferType = Flexcan_Ip_pData->transfer_type;
    88bc:	9b01      	ldr	r3, [sp, #4]
    88be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    88c0:	9b02      	ldr	r3, [sp, #8]
    88c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        Flexcan_Ip_pState->u32NumOfMbTransferByDMA = Flexcan_Ip_pData->num_enhanced_watermark;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

        /* Clear Callbacks in case of autovariables garbage */
        Flexcan_Ip_pState->callback = Flexcan_Ip_pData->Callback;
    88c6:	9b01      	ldr	r3, [sp, #4]
    88c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    88ca:	9b02      	ldr	r3, [sp, #8]
    88cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        Flexcan_Ip_pState->callbackParam = NULL_PTR;
    88d0:	9b02      	ldr	r3, [sp, #8]
    88d2:	2200      	movs	r2, #0
    88d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        Flexcan_Ip_pState->error_callback = Flexcan_Ip_pData->ErrorCallback;
    88d8:	9b01      	ldr	r3, [sp, #4]
    88da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    88dc:	9b02      	ldr	r3, [sp, #8]
    88de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        Flexcan_Ip_pState->errorCallbackParam = NULL_PTR;
    88e2:	9b02      	ldr	r3, [sp, #8]
    88e4:	2200      	movs	r2, #0
    88e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        Flexcan_Ip_pState->bIsLegacyFifoEn = Flexcan_Ip_pData->is_rx_fifo_needed;
    88ea:	9b01      	ldr	r3, [sp, #4]
    88ec:	7a1a      	ldrb	r2, [r3, #8]
    88ee:	9b02      	ldr	r3, [sp, #8]
    88f0:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
        Flexcan_Ip_pState->bIsEnhancedFifoEn = Flexcan_Ip_pData->is_enhanced_rx_fifo_needed;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
        Flexcan_Ip_pState->u32MaxMbNum = Flexcan_Ip_pData->max_num_mb;
    88f4:	9b01      	ldr	r3, [sp, #4]
    88f6:	681a      	ldr	r2, [r3, #0]
    88f8:	9b02      	ldr	r3, [sp, #8]
    88fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
        Flexcan_Ip_pState->isIntActive = TRUE;
    88fe:	9b02      	ldr	r3, [sp, #8]
    8900:	2201      	movs	r2, #1
    8902:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        /* Save runtime structure pointers so irq handler can point to the correct state structure */
        Flexcan_Ip_apxState[Flexcan_Ip_u8Instance] = Flexcan_Ip_pState;
    8906:	f89d 300f 	ldrb.w	r3, [sp, #15]
    890a:	4905      	ldr	r1, [pc, #20]	; (8920 <FlexCAN_Ip_Init_Privileged+0xf4>)
    890c:	9a02      	ldr	r2, [sp, #8]
    890e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    return eResult;
    8912:	9b06      	ldr	r3, [sp, #24]
}
    8914:	4618      	mov	r0, r3
    8916:	b009      	add	sp, #36	; 0x24
    8918:	f85d fb04 	ldr.w	pc, [sp], #4
    891c:	0000e8f4 	.word	0x0000e8f4
    8920:	1fff8f9c 	.word	0x1fff8f9c

00008924 <FlexCAN_Ip_Send>:
                                      uint8 mb_idx,
                                      const Flexcan_Ip_DataInfoType * tx_info,
                                      uint32 msg_id,
                                      const uint8 * mb_data
                                     )
{
    8924:	b500      	push	{lr}
    8926:	b08b      	sub	sp, #44	; 0x2c
    8928:	9204      	str	r2, [sp, #16]
    892a:	9303      	str	r3, [sp, #12]
    892c:	4603      	mov	r3, r0
    892e:	f88d 3017 	strb.w	r3, [sp, #23]
    8932:	460b      	mov	r3, r1
    8934:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    8938:	2301      	movs	r3, #1
    893a:	9309      	str	r3, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    893c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8940:	4a1c      	ldr	r2, [pc, #112]	; (89b4 <FlexCAN_Ip_Send+0x90>)
    8942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8946:	9308      	str	r3, [sp, #32]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8948:	f89d 3017 	ldrb.w	r3, [sp, #23]
    894c:	4a1a      	ldr	r2, [pc, #104]	; (89b8 <FlexCAN_Ip_Send+0x94>)
    894e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8952:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif
    if (!FlexCAN_IsListenOnlyModeEnabled(base))
    8954:	9808      	ldr	r0, [sp, #32]
    8956:	f7ff f8f4 	bl	7b42 <FlexCAN_IsListenOnlyModeEnabled>
    895a:	4603      	mov	r3, r0
    895c:	f083 0301 	eor.w	r3, r3, #1
    8960:	b2db      	uxtb	r3, r3
    8962:	2b00      	cmp	r3, #0
    8964:	d021      	beq.n	89aa <FlexCAN_Ip_Send+0x86>
    {
        result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    8966:	f89d 1016 	ldrb.w	r1, [sp, #22]
    896a:	f89d 0017 	ldrb.w	r0, [sp, #23]
    896e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8970:	9300      	str	r3, [sp, #0]
    8972:	9b03      	ldr	r3, [sp, #12]
    8974:	9a04      	ldr	r2, [sp, #16]
    8976:	f7ff fb4b 	bl	8010 <FlexCAN_StartSendData>
    897a:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        if ((FLEXCAN_STATUS_SUCCESS ==  result) && (FALSE == tx_info->is_polling))
    897c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    897e:	2b00      	cmp	r3, #0
    8980:	d113      	bne.n	89aa <FlexCAN_Ip_Send+0x86>
    8982:	9b04      	ldr	r3, [sp, #16]
    8984:	7b1b      	ldrb	r3, [r3, #12]
    8986:	f083 0301 	eor.w	r3, r3, #1
    898a:	b2db      	uxtb	r3, r3
    898c:	2b00      	cmp	r3, #0
    898e:	d00c      	beq.n	89aa <FlexCAN_Ip_Send+0x86>
        {
            /* Enable message buffer interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    8990:	f89d 2016 	ldrb.w	r2, [sp, #22]
    8994:	9b07      	ldr	r3, [sp, #28]
    8996:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    899a:	f89d 1017 	ldrb.w	r1, [sp, #23]
    899e:	9300      	str	r3, [sp, #0]
    89a0:	2301      	movs	r3, #1
    89a2:	9808      	ldr	r0, [sp, #32]
    89a4:	f002 f9b6 	bl	ad14 <FlexCAN_SetMsgBuffIntCmd>
    89a8:	9009      	str	r0, [sp, #36]	; 0x24
        }
#endif
    }
    return result;
    89aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    89ac:	4618      	mov	r0, r3
    89ae:	b00b      	add	sp, #44	; 0x2c
    89b0:	f85d fb04 	ldr.w	pc, [sp], #4
    89b4:	0000e8f4 	.word	0x0000e8f4
    89b8:	1fff8f9c 	.word	0x1fff8f9c

000089bc <FlexCAN_Ip_ConfigRxMb>:
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxMb(uint8 instance,
                                            uint8 mb_idx,
                                            const Flexcan_Ip_DataInfoType * rx_info,
                                            uint32 msg_id
                                           )
{
    89bc:	b500      	push	{lr}
    89be:	b08b      	sub	sp, #44	; 0x2c
    89c0:	9202      	str	r2, [sp, #8]
    89c2:	9301      	str	r3, [sp, #4]
    89c4:	4603      	mov	r3, r0
    89c6:	f88d 300f 	strb.w	r3, [sp, #15]
    89ca:	460b      	mov	r3, r1
    89cc:	f88d 300e 	strb.w	r3, [sp, #14]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    89d0:	2300      	movs	r3, #0
    89d2:	9309      	str	r3, [sp, #36]	; 0x24
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    89d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    89d8:	4a19      	ldr	r2, [pc, #100]	; (8a40 <FlexCAN_Ip_ConfigRxMb+0x84>)
    89da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89de:	9308      	str	r3, [sp, #32]
    }
    else
    {
#endif
        /* Clear the message buffer flag if previous remained triggered */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    89e0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    89e4:	4619      	mov	r1, r3
    89e6:	9808      	ldr	r0, [sp, #32]
    89e8:	f7fe ff2c 	bl	7844 <FlexCAN_ClearMsgBuffIntStatusFlag>

        cs.dataLen = rx_info->data_length;
    89ec:	9b02      	ldr	r3, [sp, #8]
    89ee:	685b      	ldr	r3, [r3, #4]
    89f0:	9306      	str	r3, [sp, #24]
        cs.msgIdType = rx_info->msg_id_type;
    89f2:	9b02      	ldr	r3, [sp, #8]
    89f4:	681b      	ldr	r3, [r3, #0]
    89f6:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = rx_info->fd_enable;
    89f8:	9b02      	ldr	r3, [sp, #8]
    89fa:	7a1b      	ldrb	r3, [r3, #8]
    89fc:	f88d 301c 	strb.w	r3, [sp, #28]
    #endif

        /* Initialize rx mb*/
        cs.code = (uint32)FLEXCAN_RX_NOT_USED;
    8a00:	230f      	movs	r3, #15
    8a02:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    8a04:	f89d 100e 	ldrb.w	r1, [sp, #14]
    8a08:	aa04      	add	r2, sp, #16
    8a0a:	9b01      	ldr	r3, [sp, #4]
    8a0c:	9808      	ldr	r0, [sp, #32]
    8a0e:	f002 fa25 	bl	ae5c <FlexCAN_SetRxMsgBuff>

        /* Initialize receive MB*/
        cs.code = (uint32)FLEXCAN_RX_INACTIVE;
    8a12:	2300      	movs	r3, #0
    8a14:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    8a16:	f89d 100e 	ldrb.w	r1, [sp, #14]
    8a1a:	aa04      	add	r2, sp, #16
    8a1c:	9b01      	ldr	r3, [sp, #4]
    8a1e:	9808      	ldr	r0, [sp, #32]
    8a20:	f002 fa1c 	bl	ae5c <FlexCAN_SetRxMsgBuff>

        /* Set up FlexCAN message buffer fields for receiving data*/
        cs.code = (uint32)FLEXCAN_RX_EMPTY;
    8a24:	2304      	movs	r3, #4
    8a26:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    8a28:	f89d 100e 	ldrb.w	r1, [sp, #14]
    8a2c:	aa04      	add	r2, sp, #16
    8a2e:	9b01      	ldr	r3, [sp, #4]
    8a30:	9808      	ldr	r0, [sp, #32]
    8a32:	f002 fa13 	bl	ae5c <FlexCAN_SetRxMsgBuff>
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    8a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    8a38:	4618      	mov	r0, r3
    8a3a:	b00b      	add	sp, #44	; 0x2c
    8a3c:	f85d fb04 	ldr.w	pc, [sp], #4
    8a40:	0000e8f4 	.word	0x0000e8f4

00008a44 <FlexCAN_Ip_Receive>:
Flexcan_Ip_StatusType FlexCAN_Ip_Receive(uint8 instance,
                                         uint8 mb_idx,
                                         Flexcan_Ip_MsgBuffType * data,
                                         boolean isPolling
                                        )
{
    8a44:	b500      	push	{lr}
    8a46:	b089      	sub	sp, #36	; 0x24
    8a48:	9202      	str	r2, [sp, #8]
    8a4a:	461a      	mov	r2, r3
    8a4c:	4603      	mov	r3, r0
    8a4e:	f88d 300f 	strb.w	r3, [sp, #15]
    8a52:	460b      	mov	r3, r1
    8a54:	f88d 300e 	strb.w	r3, [sp, #14]
    8a58:	4613      	mov	r3, r2
    8a5a:	f88d 300d 	strb.w	r3, [sp, #13]

    Flexcan_Ip_StatusType result;
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8a5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8a62:	4a18      	ldr	r2, [pc, #96]	; (8ac4 <FlexCAN_Ip_Receive+0x80>)
    8a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a68:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8a6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8a6e:	4a16      	ldr	r2, [pc, #88]	; (8ac8 <FlexCAN_Ip_Receive+0x84>)
    8a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a74:	9305      	str	r3, [sp, #20]
#endif
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    #endif

    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    8a76:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8a7a:	f89d 100e 	ldrb.w	r1, [sp, #14]
    8a7e:	f89d 000f 	ldrb.w	r0, [sp, #15]
    8a82:	9a02      	ldr	r2, [sp, #8]
    8a84:	f7ff fa86 	bl	7f94 <FlexCAN_StartRxMessageBufferData>
    8a88:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    8a8a:	9b07      	ldr	r3, [sp, #28]
    8a8c:	2b00      	cmp	r3, #0
    8a8e:	d113      	bne.n	8ab8 <FlexCAN_Ip_Receive+0x74>
    8a90:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8a94:	f083 0301 	eor.w	r3, r3, #1
    8a98:	b2db      	uxtb	r3, r3
    8a9a:	2b00      	cmp	r3, #0
    8a9c:	d00c      	beq.n	8ab8 <FlexCAN_Ip_Receive+0x74>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    8a9e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    8aa2:	9b05      	ldr	r3, [sp, #20]
    8aa4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8aa8:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8aac:	9300      	str	r3, [sp, #0]
    8aae:	2301      	movs	r3, #1
    8ab0:	9806      	ldr	r0, [sp, #24]
    8ab2:	f002 f92f 	bl	ad14 <FlexCAN_SetMsgBuffIntCmd>
    8ab6:	9007      	str	r0, [sp, #28]
    }
#endif
    return result;
    8ab8:	9b07      	ldr	r3, [sp, #28]
}
    8aba:	4618      	mov	r0, r3
    8abc:	b009      	add	sp, #36	; 0x24
    8abe:	f85d fb04 	ldr.w	pc, [sp], #4
    8ac2:	bf00      	nop
    8ac4:	0000e8f4 	.word	0x0000e8f4
    8ac8:	1fff8f9c 	.word	0x1fff8f9c

00008acc <FlexCAN_Ip_ReceiveBlocking>:
                                                 uint8 mb_idx,
                                                 Flexcan_Ip_MsgBuffType * data,
                                                 boolean isPolling,
                                                 uint32 u32TimeoutMs
                                                )
{
    8acc:	b500      	push	{lr}
    8ace:	b08b      	sub	sp, #44	; 0x2c
    8ad0:	9202      	str	r2, [sp, #8]
    8ad2:	461a      	mov	r2, r3
    8ad4:	4603      	mov	r3, r0
    8ad6:	f88d 300f 	strb.w	r3, [sp, #15]
    8ada:	460b      	mov	r3, r1
    8adc:	f88d 300e 	strb.w	r3, [sp, #14]
    8ae0:	4613      	mov	r3, r2
    8ae2:	f88d 300d 	strb.w	r3, [sp, #13]
    Flexcan_Ip_StatusType result;
    uint32 timeStart = 0U;
    8ae6:	2300      	movs	r3, #0
    8ae8:	9304      	str	r3, [sp, #16]
    uint32 timeElapsed = 0U;
    8aea:	2300      	movs	r3, #0
    8aec:	9308      	str	r3, [sp, #32]
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8af0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8af4:	fb02 f303 	mul.w	r3, r2, r3
    8af8:	2100      	movs	r1, #0
    8afa:	4618      	mov	r0, r3
    8afc:	f7f8 fb4c 	bl	1198 <OsIf_MicrosToTicks>
    8b00:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8b02:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8b06:	4a4c      	ldr	r2, [pc, #304]	; (8c38 <FlexCAN_Ip_ReceiveBlocking+0x16c>)
    8b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b0c:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8b0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8b12:	4a4a      	ldr	r2, [pc, #296]	; (8c3c <FlexCAN_Ip_ReceiveBlocking+0x170>)
    8b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b18:	9305      	str	r3, [sp, #20]
#else
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    8b1a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8b1e:	f89d 100e 	ldrb.w	r1, [sp, #14]
    8b22:	f89d 000f 	ldrb.w	r0, [sp, #15]
    8b26:	9a02      	ldr	r2, [sp, #8]
    8b28:	f7ff fa34 	bl	7f94 <FlexCAN_StartRxMessageBufferData>
    8b2c:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    8b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8b30:	2b00      	cmp	r3, #0
    8b32:	d113      	bne.n	8b5c <FlexCAN_Ip_ReceiveBlocking+0x90>
    8b34:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8b38:	f083 0301 	eor.w	r3, r3, #1
    8b3c:	b2db      	uxtb	r3, r3
    8b3e:	2b00      	cmp	r3, #0
    8b40:	d00c      	beq.n	8b5c <FlexCAN_Ip_ReceiveBlocking+0x90>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    8b42:	f89d 200e 	ldrb.w	r2, [sp, #14]
    8b46:	9b06      	ldr	r3, [sp, #24]
    8b48:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8b4c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8b50:	9300      	str	r3, [sp, #0]
    8b52:	2301      	movs	r3, #1
    8b54:	9805      	ldr	r0, [sp, #20]
    8b56:	f002 f8dd 	bl	ad14 <FlexCAN_SetMsgBuffIntCmd>
    8b5a:	9009      	str	r0, [sp, #36]	; 0x24
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    8b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8b5e:	2b00      	cmp	r3, #0
    8b60:	d133      	bne.n	8bca <FlexCAN_Ip_ReceiveBlocking+0xfe>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8b62:	2000      	movs	r0, #0
    8b64:	f7f8 facc 	bl	1100 <OsIf_GetCounter>
    8b68:	4603      	mov	r3, r0
    8b6a:	9304      	str	r3, [sp, #16]
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    8b6c:	e024      	b.n	8bb8 <FlexCAN_Ip_ReceiveBlocking+0xec>
        {
            if (TRUE == isPolling)
    8b6e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8b72:	2b00      	cmp	r3, #0
    8b74:	d010      	beq.n	8b98 <FlexCAN_Ip_ReceiveBlocking+0xcc>
            {
                if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    8b76:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8b7a:	4619      	mov	r1, r3
    8b7c:	9805      	ldr	r0, [sp, #20]
    8b7e:	f7fe fe74 	bl	786a <FlexCAN_GetBuffStatusFlag>
    8b82:	4603      	mov	r3, r0
    8b84:	2b00      	cmp	r3, #0
    8b86:	d007      	beq.n	8b98 <FlexCAN_Ip_ReceiveBlocking+0xcc>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    8b88:	f89d 200e 	ldrb.w	r2, [sp, #14]
    8b8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8b90:	4611      	mov	r1, r2
    8b92:	4618      	mov	r0, r3
    8b94:	f7ff fb20 	bl	81d8 <FlexCAN_IRQHandlerRxMB>
                }
            }
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8b98:	ab04      	add	r3, sp, #16
    8b9a:	2100      	movs	r1, #0
    8b9c:	4618      	mov	r0, r3
    8b9e:	f7f8 fac8 	bl	1132 <OsIf_GetElapsed>
    8ba2:	4602      	mov	r2, r0
    8ba4:	9b08      	ldr	r3, [sp, #32]
    8ba6:	4413      	add	r3, r2
    8ba8:	9308      	str	r3, [sp, #32]
            if (timeElapsed >= mS2Ticks)
    8baa:	9a08      	ldr	r2, [sp, #32]
    8bac:	9b07      	ldr	r3, [sp, #28]
    8bae:	429a      	cmp	r2, r3
    8bb0:	d302      	bcc.n	8bb8 <FlexCAN_Ip_ReceiveBlocking+0xec>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    8bb2:	2303      	movs	r3, #3
    8bb4:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    8bb6:	e008      	b.n	8bca <FlexCAN_Ip_ReceiveBlocking+0xfe>
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    8bb8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8bbc:	9a06      	ldr	r2, [sp, #24]
    8bbe:	011b      	lsls	r3, r3, #4
    8bc0:	4413      	add	r3, r2
    8bc2:	3304      	adds	r3, #4
    8bc4:	681b      	ldr	r3, [r3, #0]
    8bc6:	2b01      	cmp	r3, #1
    8bc8:	d0d1      	beq.n	8b6e <FlexCAN_Ip_ReceiveBlocking+0xa2>
            }
        }
    }

    if ((FLEXCAN_STATUS_TIMEOUT == result) && (FALSE == isPolling))
    8bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8bcc:	2b03      	cmp	r3, #3
    8bce:	d112      	bne.n	8bf6 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    8bd0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8bd4:	f083 0301 	eor.w	r3, r3, #1
    8bd8:	b2db      	uxtb	r3, r3
    8bda:	2b00      	cmp	r3, #0
    8bdc:	d00b      	beq.n	8bf6 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    {
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        /* Disable Mb interrupt*/
       (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    8bde:	f89d 200e 	ldrb.w	r2, [sp, #14]
    8be2:	9b06      	ldr	r3, [sp, #24]
    8be4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8be8:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8bec:	9300      	str	r3, [sp, #0]
    8bee:	2300      	movs	r3, #0
    8bf0:	9805      	ldr	r0, [sp, #20]
    8bf2:	f002 f88f 	bl	ad14 <FlexCAN_SetMsgBuffIntCmd>
#endif
    }

    if ((FLEXCAN_STATUS_BUFF_OUT_OF_RANGE != result) && (FLEXCAN_STATUS_BUSY != result))
    8bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8bf8:	2b04      	cmp	r3, #4
    8bfa:	d018      	beq.n	8c2e <FlexCAN_Ip_ReceiveBlocking+0x162>
    8bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8bfe:	2b02      	cmp	r3, #2
    8c00:	d015      	beq.n	8c2e <FlexCAN_Ip_ReceiveBlocking+0x162>
    {
        if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state))
    8c02:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8c06:	9a06      	ldr	r2, [sp, #24]
    8c08:	011b      	lsls	r3, r3, #4
    8c0a:	4413      	add	r3, r2
    8c0c:	3304      	adds	r3, #4
    8c0e:	681b      	ldr	r3, [r3, #0]
    8c10:	2b00      	cmp	r3, #0
    8c12:	d102      	bne.n	8c1a <FlexCAN_Ip_ReceiveBlocking+0x14e>
        {
            result = FLEXCAN_STATUS_SUCCESS;
    8c14:	2300      	movs	r3, #0
    8c16:	9309      	str	r3, [sp, #36]	; 0x24
    8c18:	e009      	b.n	8c2e <FlexCAN_Ip_ReceiveBlocking+0x162>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    8c1a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8c1e:	9a06      	ldr	r2, [sp, #24]
    8c20:	011b      	lsls	r3, r3, #4
    8c22:	4413      	add	r3, r2
    8c24:	3304      	adds	r3, #4
    8c26:	2200      	movs	r2, #0
    8c28:	601a      	str	r2, [r3, #0]
            result = FLEXCAN_STATUS_TIMEOUT;
    8c2a:	2303      	movs	r3, #3
    8c2c:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    return result;
    8c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    8c30:	4618      	mov	r0, r3
    8c32:	b00b      	add	sp, #44	; 0x2c
    8c34:	f85d fb04 	ldr.w	pc, [sp], #4
    8c38:	1fff8f9c 	.word	0x1fff8f9c
    8c3c:	0000e8f4 	.word	0x0000e8f4

00008c40 <FlexCAN_Ip_RxFifo>:
 * after the frame was received and read into the specified buffer.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_RxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifo(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    8c40:	b500      	push	{lr}
    8c42:	b085      	sub	sp, #20
    8c44:	4603      	mov	r3, r0
    8c46:	9100      	str	r1, [sp, #0]
    8c48:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8c4c:	2300      	movs	r3, #0
    8c4e:	9303      	str	r3, [sp, #12]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    8c50:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c54:	9900      	ldr	r1, [sp, #0]
    8c56:	4618      	mov	r0, r3
    8c58:	f7ff fa5e 	bl	8118 <FlexCAN_StartRxMessageFifoData>
    8c5c:	9003      	str	r0, [sp, #12]
    }
    return result;
    8c5e:	9b03      	ldr	r3, [sp, #12]
}
    8c60:	4618      	mov	r0, r3
    8c62:	b005      	add	sp, #20
    8c64:	f85d fb04 	ldr.w	pc, [sp], #4

00008c68 <FlexCAN_Ip_RxFifoBlocking>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_RxFifoBlocking_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifoBlocking(uint8 instance, Flexcan_Ip_MsgBuffType *data, uint32 timeout)
{
    8c68:	b500      	push	{lr}
    8c6a:	b087      	sub	sp, #28
    8c6c:	4603      	mov	r3, r0
    8c6e:	9102      	str	r1, [sp, #8]
    8c70:	9201      	str	r2, [sp, #4]
    8c72:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8c76:	2300      	movs	r3, #0
    8c78:	9305      	str	r3, [sp, #20]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    8c7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8c7e:	9902      	ldr	r1, [sp, #8]
    8c80:	4618      	mov	r0, r3
    8c82:	f7ff fa49 	bl	8118 <FlexCAN_StartRxMessageFifoData>
    8c86:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == result)
    8c88:	9b05      	ldr	r3, [sp, #20]
    8c8a:	2b00      	cmp	r3, #0
    8c8c:	d106      	bne.n	8c9c <FlexCAN_Ip_RxFifoBlocking+0x34>
        {
            result = FlexCAN_ProccessLegacyRxFIFO(instance, timeout);
    8c8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8c92:	9901      	ldr	r1, [sp, #4]
    8c94:	4618      	mov	r0, r3
    8c96:	f7ff f8e2 	bl	7e5e <FlexCAN_ProccessLegacyRxFIFO>
    8c9a:	9005      	str	r0, [sp, #20]
        }
    }
    return result;
    8c9c:	9b05      	ldr	r3, [sp, #20]
}
    8c9e:	4618      	mov	r0, r3
    8ca0:	b007      	add	sp, #28
    8ca2:	f85d fb04 	ldr.w	pc, [sp], #4

00008ca6 <FlexCAN_Ip_ConfigRxFifo_Privileged>:
/* implements FlexCAN_Ip_ConfigRxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxFifo_Privileged(uint8 instance,
                                                         Flexcan_Ip_RxFifoIdElementFormatType id_format,
                                                         const Flexcan_Ip_IdTableType * id_filter_table
                                                        )
{
    8ca6:	b500      	push	{lr}
    8ca8:	b089      	sub	sp, #36	; 0x24
    8caa:	4603      	mov	r3, r0
    8cac:	9102      	str	r1, [sp, #8]
    8cae:	9201      	str	r2, [sp, #4]
    8cb0:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8cb4:	2300      	movs	r3, #0
    8cb6:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    8cb8:	2300      	movs	r3, #0
    8cba:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8cbc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8cc0:	4a1c      	ldr	r2, [pc, #112]	; (8d34 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x8e>)
    8cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cc6:	9305      	str	r3, [sp, #20]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    8cc8:	9805      	ldr	r0, [sp, #20]
    8cca:	f7fe fd61 	bl	7790 <FlexCAN_IsEnabled>
    8cce:	4603      	mov	r3, r0
    8cd0:	2b00      	cmp	r3, #0
    8cd2:	bf14      	ite	ne
    8cd4:	2301      	movne	r3, #1
    8cd6:	2300      	moveq	r3, #0
    8cd8:	b2db      	uxtb	r3, r3
    8cda:	f083 0301 	eor.w	r3, r3, #1
    8cde:	b2db      	uxtb	r3, r3
    8ce0:	f88d 3013 	strb.w	r3, [sp, #19]
    8ce4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8ce8:	f003 0301 	and.w	r3, r3, #1
    8cec:	f88d 3013 	strb.w	r3, [sp, #19]

    if (TRUE == disabled)
    8cf0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8cf4:	2b00      	cmp	r3, #0
    8cf6:	d003      	beq.n	8d00 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x5a>
    {
        result = FlexCAN_Enable(pBase);
    8cf8:	9805      	ldr	r0, [sp, #20]
    8cfa:	f001 fd6b 	bl	a7d4 <FlexCAN_Enable>
    8cfe:	9007      	str	r0, [sp, #28]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    8d00:	9b07      	ldr	r3, [sp, #28]
    8d02:	2b00      	cmp	r3, #0
    8d04:	d104      	bne.n	8d10 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x6a>
    {
        /* Initialize rx fifo*/
        FlexCAN_SetRxFifoFilter(pBase, id_format, id_filter_table);
    8d06:	9a01      	ldr	r2, [sp, #4]
    8d08:	9902      	ldr	r1, [sp, #8]
    8d0a:	9805      	ldr	r0, [sp, #20]
    8d0c:	f002 fba5 	bl	b45a <FlexCAN_SetRxFifoFilter>
    }

    if (TRUE == disabled)
    8d10:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8d14:	2b00      	cmp	r3, #0
    8d16:	d008      	beq.n	8d2a <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
    {
        status = FlexCAN_Disable(pBase);
    8d18:	9805      	ldr	r0, [sp, #20]
    8d1a:	f001 fdd9 	bl	a8d0 <FlexCAN_Disable>
    8d1e:	9006      	str	r0, [sp, #24]
        if (FLEXCAN_STATUS_SUCCESS != status)
    8d20:	9b06      	ldr	r3, [sp, #24]
    8d22:	2b00      	cmp	r3, #0
    8d24:	d001      	beq.n	8d2a <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
        {
            result = status;
    8d26:	9b06      	ldr	r3, [sp, #24]
    8d28:	9307      	str	r3, [sp, #28]
        }
    }

    return result;
    8d2a:	9b07      	ldr	r3, [sp, #28]
}
    8d2c:	4618      	mov	r0, r3
    8d2e:	b009      	add	sp, #36	; 0x24
    8d30:	f85d fb04 	ldr.w	pc, [sp], #4
    8d34:	0000e8f4 	.word	0x0000e8f4

00008d38 <FlexCAN_Ip_ConfigRemoteResponseMb>:
                                                        uint8 mb_idx,
                                                        const Flexcan_Ip_DataInfoType *tx_info,
                                                        uint32 msg_id,
                                                        const uint8 *mb_data
                                                       )
{
    8d38:	b500      	push	{lr}
    8d3a:	b08f      	sub	sp, #60	; 0x3c
    8d3c:	9204      	str	r2, [sp, #16]
    8d3e:	9303      	str	r3, [sp, #12]
    8d40:	4603      	mov	r3, r0
    8d42:	f88d 3017 	strb.w	r3, [sp, #23]
    8d46:	460b      	mov	r3, r1
    8d48:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8d4c:	2300      	movs	r3, #0
    8d4e:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8d50:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8d54:	4a27      	ldr	r2, [pc, #156]	; (8df4 <FlexCAN_Ip_ConfigRemoteResponseMb+0xbc>)
    8d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d5a:	930c      	str	r3, [sp, #48]	; 0x30
    const Flexcan_Ip_StateType * const state = Flexcan_Ip_apxState[instance];
    8d5c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8d60:	4a25      	ldr	r2, [pc, #148]	; (8df8 <FlexCAN_Ip_ConfigRemoteResponseMb+0xc0>)
    8d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d66:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    8d68:	2300      	movs	r3, #0
    8d6a:	930a      	str	r3, [sp, #40]	; 0x28
    if (TRUE == FlexCAN_IsMbOutOfRange(pBase, mb_idx, state->bIsLegacyFifoEn, state->u32MaxMbNum))
    {
        result = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    8d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8d6e:	2b00      	cmp	r3, #0
    8d70:	d13a      	bne.n	8de8 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
    {
        /* Initialize transmit mb*/
        cs.dataLen = tx_info->data_length;
    8d72:	9b04      	ldr	r3, [sp, #16]
    8d74:	685b      	ldr	r3, [r3, #4]
    8d76:	9308      	str	r3, [sp, #32]
        cs.msgIdType = tx_info->msg_id_type;
    8d78:	9b04      	ldr	r3, [sp, #16]
    8d7a:	681b      	ldr	r3, [r3, #0]
    8d7c:	9307      	str	r3, [sp, #28]
        cs.code = (uint32)FLEXCAN_RX_RANSWER;
    8d7e:	230a      	movs	r3, #10
    8d80:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = FALSE;
    8d82:	2300      	movs	r3, #0
    8d84:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        cs.enable_brs = FALSE;
    8d88:	2300      	movs	r3, #0
    8d8a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        cs.fd_padding = 0x00U;
    8d8e:	2300      	movs	r3, #0
    8d90:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
#endif
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    8d94:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8d98:	4619      	mov	r1, r3
    8d9a:	980c      	ldr	r0, [sp, #48]	; 0x30
    8d9c:	f7fe fd52 	bl	7844 <FlexCAN_ClearMsgBuffIntStatusFlag>
        pMbAddr = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    8da0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8da4:	4619      	mov	r1, r3
    8da6:	980c      	ldr	r0, [sp, #48]	; 0x30
    8da8:	f001 fc2c 	bl	a604 <FlexCAN_GetMsgBuffRegion>
    8dac:	900a      	str	r0, [sp, #40]	; 0x28
        FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, tx_info->is_remote);
    8dae:	9b04      	ldr	r3, [sp, #16]
    8db0:	7adb      	ldrb	r3, [r3, #11]
    8db2:	a906      	add	r1, sp, #24
    8db4:	9300      	str	r3, [sp, #0]
    8db6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8db8:	9a03      	ldr	r2, [sp, #12]
    8dba:	980a      	ldr	r0, [sp, #40]	; 0x28
    8dbc:	f002 f974 	bl	b0a8 <FlexCAN_SetTxMsgBuff>
        if (FALSE == tx_info->is_polling)
    8dc0:	9b04      	ldr	r3, [sp, #16]
    8dc2:	7b1b      	ldrb	r3, [r3, #12]
    8dc4:	f083 0301 	eor.w	r3, r3, #1
    8dc8:	b2db      	uxtb	r3, r3
    8dca:	2b00      	cmp	r3, #0
    8dcc:	d00c      	beq.n	8de8 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
        {
            /* Enable MB interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(pBase, instance, mb_idx, TRUE, state->isIntActive);
    8dce:	f89d 2016 	ldrb.w	r2, [sp, #22]
    8dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8dd4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8dd8:	f89d 1017 	ldrb.w	r1, [sp, #23]
    8ddc:	9300      	str	r3, [sp, #0]
    8dde:	2301      	movs	r3, #1
    8de0:	980c      	ldr	r0, [sp, #48]	; 0x30
    8de2:	f001 ff97 	bl	ad14 <FlexCAN_SetMsgBuffIntCmd>
    8de6:	900d      	str	r0, [sp, #52]	; 0x34
        }
    }
    return result;
    8de8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    8dea:	4618      	mov	r0, r3
    8dec:	b00f      	add	sp, #60	; 0x3c
    8dee:	f85d fb04 	ldr.w	pc, [sp], #4
    8df2:	bf00      	nop
    8df4:	0000e8f4 	.word	0x0000e8f4
    8df8:	1fff8f9c 	.word	0x1fff8f9c

00008dfc <FlexCAN_Ip_GetTransferStatus>:
 * or complete (success). In case Enhanced Rx Fifo, mb_idx will be 255.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetTransferStatus_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_GetTransferStatus(uint8 instance, uint8 mb_idx)
{
    8dfc:	b084      	sub	sp, #16
    8dfe:	4603      	mov	r3, r0
    8e00:	460a      	mov	r2, r1
    8e02:	f88d 3007 	strb.w	r3, [sp, #7]
    8e06:	4613      	mov	r3, r2
    8e08:	f88d 3006 	strb.w	r3, [sp, #6]

    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8e0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8e10:	4a0d      	ldr	r2, [pc, #52]	; (8e48 <FlexCAN_Ip_GetTransferStatus+0x4c>)
    8e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e16:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_ERROR;
    8e18:	2301      	movs	r3, #1
    8e1a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
#endif

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    8e1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e20:	2b1f      	cmp	r3, #31
    8e22:	d80d      	bhi.n	8e40 <FlexCAN_Ip_GetTransferStatus+0x44>
    {
        if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    8e24:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e28:	9a02      	ldr	r2, [sp, #8]
    8e2a:	011b      	lsls	r3, r3, #4
    8e2c:	4413      	add	r3, r2
    8e2e:	3304      	adds	r3, #4
    8e30:	681b      	ldr	r3, [r3, #0]
    8e32:	2b00      	cmp	r3, #0
    8e34:	d102      	bne.n	8e3c <FlexCAN_Ip_GetTransferStatus+0x40>
        {
            status = FLEXCAN_STATUS_SUCCESS;
    8e36:	2300      	movs	r3, #0
    8e38:	9303      	str	r3, [sp, #12]
    8e3a:	e001      	b.n	8e40 <FlexCAN_Ip_GetTransferStatus+0x44>
            status = FLEXCAN_STATUS_ERROR;
        }
#endif
        else
        {
            status = FLEXCAN_STATUS_BUSY;
    8e3c:	2302      	movs	r3, #2
    8e3e:	9303      	str	r3, [sp, #12]
            status = FLEXCAN_STATUS_BUSY;
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return status;
    8e40:	9b03      	ldr	r3, [sp, #12]
}
    8e42:	4618      	mov	r0, r3
    8e44:	b004      	add	sp, #16
    8e46:	4770      	bx	lr
    8e48:	1fff8f9c 	.word	0x1fff8f9c

00008e4c <FlexCAN_CompleteRxMessageFifoData>:
 * data and disabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_CompleteRxMessageFifoData(uint8 instance)
{
    8e4c:	b500      	push	{lr}
    8e4e:	b087      	sub	sp, #28
    8e50:	4603      	mov	r3, r0
    8e52:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8e56:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8e5a:	4a1d      	ldr	r2, [pc, #116]	; (8ed0 <FlexCAN_CompleteRxMessageFifoData+0x84>)
    8e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e60:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8e62:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8e66:	4a1b      	ldr	r2, [pc, #108]	; (8ed4 <FlexCAN_CompleteRxMessageFifoData+0x88>)
    8e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e6c:	9304      	str	r3, [sp, #16]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    8e6e:	9b04      	ldr	r3, [sp, #16]
    8e70:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    8e74:	2b00      	cmp	r3, #0
    8e76:	d120      	bne.n	8eba <FlexCAN_CompleteRxMessageFifoData+0x6e>
    {
        /* Disable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, state->isIntActive);
    8e78:	9b04      	ldr	r3, [sp, #16]
    8e7a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8e7e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8e82:	9300      	str	r3, [sp, #0]
    8e84:	2300      	movs	r3, #0
    8e86:	2205      	movs	r2, #5
    8e88:	9805      	ldr	r0, [sp, #20]
    8e8a:	f001 ff43 	bl	ad14 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, state->isIntActive);
    8e8e:	9b04      	ldr	r3, [sp, #16]
    8e90:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8e94:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8e98:	9300      	str	r3, [sp, #0]
    8e9a:	2300      	movs	r3, #0
    8e9c:	2206      	movs	r2, #6
    8e9e:	9805      	ldr	r0, [sp, #20]
    8ea0:	f001 ff38 	bl	ad14 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, state->isIntActive);
    8ea4:	9b04      	ldr	r3, [sp, #16]
    8ea6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8eaa:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8eae:	9300      	str	r3, [sp, #0]
    8eb0:	2300      	movs	r3, #0
    8eb2:	2207      	movs	r2, #7
    8eb4:	9805      	ldr	r0, [sp, #20]
    8eb6:	f001 ff2d 	bl	ad14 <FlexCAN_SetMsgBuffIntCmd>
    {
        /* do nothing when transferType is POLLING */
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    /* Clear fifo message*/
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = NULL_PTR;
    8eba:	9b04      	ldr	r3, [sp, #16]
    8ebc:	2200      	movs	r2, #0
    8ebe:	601a      	str	r2, [r3, #0]
            state->callback(instance, FLEXCAN_EVENT_DMA_ERROR, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
        }
    }

#else
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    8ec0:	9b04      	ldr	r3, [sp, #16]
    8ec2:	2200      	movs	r2, #0
    8ec4:	605a      	str	r2, [r3, #4]
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
}
    8ec6:	bf00      	nop
    8ec8:	b007      	add	sp, #28
    8eca:	f85d fb04 	ldr.w	pc, [sp], #4
    8ece:	bf00      	nop
    8ed0:	0000e8f4 	.word	0x0000e8f4
    8ed4:	1fff8f9c 	.word	0x1fff8f9c

00008ed8 <FlexCAN_IRQHandler>:
    uint32 endMbIdx
    #if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    ,boolean bEnhancedFifoExisted
    #endif
)
{
    8ed8:	b500      	push	{lr}
    8eda:	b08b      	sub	sp, #44	; 0x2c
    8edc:	4603      	mov	r3, r0
    8ede:	9102      	str	r1, [sp, #8]
    8ee0:	9201      	str	r2, [sp, #4]
    8ee2:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32MbHandle = 0U;
    8ee6:	2300      	movs	r3, #0
    8ee8:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 flag_reg = 0;
    8eea:	2300      	movs	r3, #0
    8eec:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8eee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8ef2:	4a3f      	ldr	r2, [pc, #252]	; (8ff0 <FlexCAN_IRQHandler+0x118>)
    8ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ef8:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8efa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8efe:	4a3d      	ldr	r2, [pc, #244]	; (8ff4 <FlexCAN_IRQHandler+0x11c>)
    8f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f04:	9305      	str	r3, [sp, #20]

    /* Get the interrupts that are enabled and ready */
    uint32 mb_idx = endMbIdx;
    8f06:	9b01      	ldr	r3, [sp, #4]
    8f08:	9307      	str	r3, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(endMbIdx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM);
#endif
    /* Check if instance initialized */
    if (NULL_PTR != state)
    8f0a:	9b05      	ldr	r3, [sp, #20]
    8f0c:	2b00      	cmp	r3, #0
    8f0e:	d05c      	beq.n	8fca <FlexCAN_IRQHandler+0xf2>
    {
        flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    8f10:	9907      	ldr	r1, [sp, #28]
    8f12:	9806      	ldr	r0, [sp, #24]
    8f14:	f7fe fe47 	bl	7ba6 <FlexCAN_GetMsgBuffIntStatusFlag>
    8f18:	4603      	mov	r3, r0
    8f1a:	9308      	str	r3, [sp, #32]

        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    8f1c:	e008      	b.n	8f30 <FlexCAN_IRQHandler+0x58>
        {
            mb_idx--;
    8f1e:	9b07      	ldr	r3, [sp, #28]
    8f20:	3b01      	subs	r3, #1
    8f22:	9307      	str	r3, [sp, #28]
            flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    8f24:	9907      	ldr	r1, [sp, #28]
    8f26:	9806      	ldr	r0, [sp, #24]
    8f28:	f7fe fe3d 	bl	7ba6 <FlexCAN_GetMsgBuffIntStatusFlag>
    8f2c:	4603      	mov	r3, r0
    8f2e:	9308      	str	r3, [sp, #32]
        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    8f30:	9b08      	ldr	r3, [sp, #32]
    8f32:	2b00      	cmp	r3, #0
    8f34:	d103      	bne.n	8f3e <FlexCAN_IRQHandler+0x66>
    8f36:	9a07      	ldr	r2, [sp, #28]
    8f38:	9b02      	ldr	r3, [sp, #8]
    8f3a:	429a      	cmp	r2, r3
    8f3c:	d8ef      	bhi.n	8f1e <FlexCAN_IRQHandler+0x46>
        }

        /* Check Tx/Rx interrupt flag and clear the interrupt */
        if (flag_reg != 0U)
    8f3e:	9b08      	ldr	r3, [sp, #32]
    8f40:	2b00      	cmp	r3, #0
    8f42:	d050      	beq.n	8fe6 <FlexCAN_IRQHandler+0x10e>
        {
            /* For legacy fifo, mb handler is FLEXCAN_IP_MB_HANDLE_RXFIFO(0) */
            u32MbHandle = mb_idx;
    8f44:	9b07      	ldr	r3, [sp, #28]
    8f46:	9309      	str	r3, [sp, #36]	; 0x24

            if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    8f48:	9b05      	ldr	r3, [sp, #20]
    8f4a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    8f4e:	2b00      	cmp	r3, #0
    8f50:	d00b      	beq.n	8f6a <FlexCAN_IRQHandler+0x92>
    8f52:	9b07      	ldr	r3, [sp, #28]
    8f54:	2b07      	cmp	r3, #7
    8f56:	d808      	bhi.n	8f6a <FlexCAN_IRQHandler+0x92>
            {
                FlexCAN_IRQHandlerRxFIFO(instance, mb_idx);
    8f58:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8f5c:	9907      	ldr	r1, [sp, #28]
    8f5e:	4618      	mov	r0, r3
    8f60:	f7ff fac2 	bl	84e8 <FlexCAN_IRQHandlerRxFIFO>
                u32MbHandle = (uint32)FLEXCAN_IP_MB_HANDLE_RXFIFO;
    8f64:	2300      	movs	r3, #0
    8f66:	9309      	str	r3, [sp, #36]	; 0x24
    8f68:	e00d      	b.n	8f86 <FlexCAN_IRQHandler+0xae>
            }
            else
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[u32MbHandle].state)
    8f6a:	9a05      	ldr	r2, [sp, #20]
    8f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8f6e:	011b      	lsls	r3, r3, #4
    8f70:	4413      	add	r3, r2
    8f72:	3304      	adds	r3, #4
    8f74:	681b      	ldr	r3, [r3, #0]
    8f76:	2b01      	cmp	r3, #1
    8f78:	d105      	bne.n	8f86 <FlexCAN_IRQHandler+0xae>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    8f7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8f7e:	9907      	ldr	r1, [sp, #28]
    8f80:	4618      	mov	r0, r3
    8f82:	f7ff f929 	bl	81d8 <FlexCAN_IRQHandlerRxMB>
                }
            }

            /* Check mailbox completed transmission */
            if (FLEXCAN_MB_TX_BUSY == state->mbs[u32MbHandle].state)
    8f86:	9a05      	ldr	r2, [sp, #20]
    8f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8f8a:	011b      	lsls	r3, r3, #4
    8f8c:	4413      	add	r3, r2
    8f8e:	3304      	adds	r3, #4
    8f90:	681b      	ldr	r3, [r3, #0]
    8f92:	2b02      	cmp	r3, #2
    8f94:	d105      	bne.n	8fa2 <FlexCAN_IRQHandler+0xca>
            {
                FlexCAN_IRQHandlerTxMB(instance, mb_idx);
    8f96:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8f9a:	9907      	ldr	r1, [sp, #28]
    8f9c:	4618      	mov	r0, r3
    8f9e:	f7ff fa09 	bl	83b4 <FlexCAN_IRQHandlerTxMB>
            }

            /* Check for spurious interrupt */
            if (FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx) != 0U)
    8fa2:	9907      	ldr	r1, [sp, #28]
    8fa4:	9806      	ldr	r0, [sp, #24]
    8fa6:	f7fe fdfe 	bl	7ba6 <FlexCAN_GetMsgBuffIntStatusFlag>
    8faa:	4603      	mov	r3, r0
    8fac:	2b00      	cmp	r3, #0
    8fae:	d01a      	beq.n	8fe6 <FlexCAN_IRQHandler+0x10e>
            {
                if (state->mbs[u32MbHandle].state == FLEXCAN_MB_IDLE)
    8fb0:	9a05      	ldr	r2, [sp, #20]
    8fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8fb4:	011b      	lsls	r3, r3, #4
    8fb6:	4413      	add	r3, r2
    8fb8:	3304      	adds	r3, #4
    8fba:	681b      	ldr	r3, [r3, #0]
    8fbc:	2b00      	cmp	r3, #0
    8fbe:	d112      	bne.n	8fe6 <FlexCAN_IRQHandler+0x10e>
                {
                    /* In case of desynchronized status of the MB to avoid trapping in ISR
                    * clear the MB flag */
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    8fc0:	9907      	ldr	r1, [sp, #28]
    8fc2:	9806      	ldr	r0, [sp, #24]
    8fc4:	f7fe fc3e 	bl	7844 <FlexCAN_ClearMsgBuffIntStatusFlag>
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_UNDERFLOW);
        }
    #endif /* End of (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    }
}
    8fc8:	e00d      	b.n	8fe6 <FlexCAN_IRQHandler+0x10e>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    8fca:	9b02      	ldr	r3, [sp, #8]
    8fcc:	9307      	str	r3, [sp, #28]
    8fce:	e006      	b.n	8fde <FlexCAN_IRQHandler+0x106>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    8fd0:	9907      	ldr	r1, [sp, #28]
    8fd2:	9806      	ldr	r0, [sp, #24]
    8fd4:	f7fe fc36 	bl	7844 <FlexCAN_ClearMsgBuffIntStatusFlag>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    8fd8:	9b07      	ldr	r3, [sp, #28]
    8fda:	3301      	adds	r3, #1
    8fdc:	9307      	str	r3, [sp, #28]
    8fde:	9a07      	ldr	r2, [sp, #28]
    8fe0:	9b01      	ldr	r3, [sp, #4]
    8fe2:	429a      	cmp	r2, r3
    8fe4:	d9f4      	bls.n	8fd0 <FlexCAN_IRQHandler+0xf8>
}
    8fe6:	bf00      	nop
    8fe8:	b00b      	add	sp, #44	; 0x2c
    8fea:	f85d fb04 	ldr.w	pc, [sp], #4
    8fee:	bf00      	nop
    8ff0:	0000e8f4 	.word	0x0000e8f4
    8ff4:	1fff8f9c 	.word	0x1fff8f9c

00008ff8 <FlexCAN_Ip_ClearErrorStatus>:
 *                 transmission of a CAN frame.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearErrorStatus_Activity */
void FlexCAN_Ip_ClearErrorStatus(uint8 instance, uint32 error)
{
    8ff8:	b084      	sub	sp, #16
    8ffa:	4603      	mov	r3, r0
    8ffc:	9100      	str	r1, [sp, #0]
    8ffe:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9002:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9006:	4a05      	ldr	r2, [pc, #20]	; (901c <FlexCAN_Ip_ClearErrorStatus+0x24>)
    9008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    900c:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base->ESR1 = error;
    900e:	9b03      	ldr	r3, [sp, #12]
    9010:	9a00      	ldr	r2, [sp, #0]
    9012:	621a      	str	r2, [r3, #32]
}
    9014:	bf00      	nop
    9016:	b004      	add	sp, #16
    9018:	4770      	bx	lr
    901a:	bf00      	nop
    901c:	0000e8f4 	.word	0x0000e8f4

00009020 <FlexCAN_Ip_GetErrorStatus>:
 *                 transmission of a CAN frame and some general status of the device.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetErrorStatus_Activity */
uint32 FlexCAN_Ip_GetErrorStatus(uint8 instance)
{
    9020:	b084      	sub	sp, #16
    9022:	4603      	mov	r3, r0
    9024:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9028:	f89d 3007 	ldrb.w	r3, [sp, #7]
    902c:	4a04      	ldr	r2, [pc, #16]	; (9040 <FlexCAN_Ip_GetErrorStatus+0x20>)
    902e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9032:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint32)(base->ESR1);
    9034:	9b03      	ldr	r3, [sp, #12]
    9036:	6a1b      	ldr	r3, [r3, #32]
}
    9038:	4618      	mov	r0, r3
    903a:	b004      	add	sp, #16
    903c:	4770      	bx	lr
    903e:	bf00      	nop
    9040:	0000e8f4 	.word	0x0000e8f4

00009044 <FlexCAN_Ip_GetControllerTxErrorCounter>:
 *                 transmitted messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerTxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerTxErrorCounter(uint8 instance)
{
    9044:	b084      	sub	sp, #16
    9046:	4603      	mov	r3, r0
    9048:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    904c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9050:	4a04      	ldr	r2, [pc, #16]	; (9064 <FlexCAN_Ip_GetControllerTxErrorCounter+0x20>)
    9052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9056:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_TXERRCNT_MASK) >> FLEXCAN_ECR_TXERRCNT_SHIFT);
    9058:	9b03      	ldr	r3, [sp, #12]
    905a:	69db      	ldr	r3, [r3, #28]
    905c:	b2db      	uxtb	r3, r3
}
    905e:	4618      	mov	r0, r3
    9060:	b004      	add	sp, #16
    9062:	4770      	bx	lr
    9064:	0000e8f4 	.word	0x0000e8f4

00009068 <FlexCAN_Ip_GetControllerRxErrorCounter>:
 *                 received messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerRxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerRxErrorCounter(uint8 instance)
{
    9068:	b084      	sub	sp, #16
    906a:	4603      	mov	r3, r0
    906c:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9070:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9074:	4a05      	ldr	r2, [pc, #20]	; (908c <FlexCAN_Ip_GetControllerRxErrorCounter+0x24>)
    9076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    907a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_RXERRCNT_MASK) >> FLEXCAN_ECR_RXERRCNT_SHIFT);
    907c:	9b03      	ldr	r3, [sp, #12]
    907e:	69db      	ldr	r3, [r3, #28]
    9080:	0a1b      	lsrs	r3, r3, #8
    9082:	b2db      	uxtb	r3, r3
}
    9084:	4618      	mov	r0, r3
    9086:	b004      	add	sp, #16
    9088:	4770      	bx	lr
    908a:	bf00      	nop
    908c:	0000e8f4 	.word	0x0000e8f4

00009090 <FlexCAN_Error_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements  CAN_X_ERROR_ISR_Activity */
void FlexCAN_Error_IRQHandler(uint8 instance)
{
    9090:	b510      	push	{r4, lr}
    9092:	b086      	sub	sp, #24
    9094:	4603      	mov	r3, r0
    9096:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    909a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    909e:	4a29      	ldr	r2, [pc, #164]	; (9144 <FlexCAN_Error_IRQHandler+0xb4>)
    90a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90a4:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    90a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    90aa:	4a27      	ldr	r2, [pc, #156]	; (9148 <FlexCAN_Error_IRQHandler+0xb8>)
    90ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90b0:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    90b2:	2300      	movs	r3, #0
    90b4:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check if the instance initialized */
    if (NULL_PTR != state)
    90b6:	9b03      	ldr	r3, [sp, #12]
    90b8:	2b00      	cmp	r3, #0
    90ba:	d03d      	beq.n	9138 <FlexCAN_Error_IRQHandler+0xa8>
    {
        /* Get error status to get value updated */
        u32ErrStatus = pBase->ESR1;
    90bc:	9b04      	ldr	r3, [sp, #16]
    90be:	6a1b      	ldr	r3, [r3, #32]
    90c0:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_MASK))) && ((uint32)0U != (pBase->CTRL1 & ((uint32)FLEXCAN_CTRL1_ERRMSK_MASK))))
    90c2:	9b05      	ldr	r3, [sp, #20]
    90c4:	f003 0302 	and.w	r3, r3, #2
    90c8:	2b00      	cmp	r3, #0
    90ca:	d019      	beq.n	9100 <FlexCAN_Error_IRQHandler+0x70>
    90cc:	9b04      	ldr	r3, [sp, #16]
    90ce:	685b      	ldr	r3, [r3, #4]
    90d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    90d4:	2b00      	cmp	r3, #0
    90d6:	d013      	beq.n	9100 <FlexCAN_Error_IRQHandler+0x70>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_MASK;
    90d8:	9b04      	ldr	r3, [sp, #16]
    90da:	2202      	movs	r2, #2
    90dc:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    90de:	9b03      	ldr	r3, [sp, #12]
    90e0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    90e4:	2b00      	cmp	r3, #0
    90e6:	d00b      	beq.n	9100 <FlexCAN_Error_IRQHandler+0x70>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR, u32ErrStatus, state);
    90e8:	9b03      	ldr	r3, [sp, #12]
    90ea:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    90ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
    90f2:	9b03      	ldr	r3, [sp, #12]
    90f4:	9a05      	ldr	r2, [sp, #20]
    90f6:	2105      	movs	r1, #5
    90f8:	47a0      	blx	r4
            #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = pBase->ESR1;
    90fa:	9b04      	ldr	r3, [sp, #16]
    90fc:	6a1b      	ldr	r3, [r3, #32]
    90fe:	9305      	str	r3, [sp, #20]
            }
        }

    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Check if this is spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_FAST_MASK))) && ((uint32)0U != (pBase->CTRL2 & ((uint32)FLEXCAN_CTRL2_ERRMSK_FAST_MASK))))
    9100:	9b05      	ldr	r3, [sp, #20]
    9102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    9106:	2b00      	cmp	r3, #0
    9108:	d019      	beq.n	913e <FlexCAN_Error_IRQHandler+0xae>
    910a:	9b04      	ldr	r3, [sp, #16]
    910c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    910e:	2b00      	cmp	r3, #0
    9110:	da15      	bge.n	913e <FlexCAN_Error_IRQHandler+0xae>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_FAST_MASK;
    9112:	9b04      	ldr	r3, [sp, #16]
    9114:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    9118:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    911a:	9b03      	ldr	r3, [sp, #12]
    911c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    9120:	2b00      	cmp	r3, #0
    9122:	d00c      	beq.n	913e <FlexCAN_Error_IRQHandler+0xae>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR_FAST, u32ErrStatus, state);
    9124:	9b03      	ldr	r3, [sp, #12]
    9126:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    912a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    912e:	9b03      	ldr	r3, [sp, #12]
    9130:	9a05      	ldr	r2, [sp, #20]
    9132:	2106      	movs	r1, #6
    9134:	47a0      	blx	r4
    }
    else
    {
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    }
}
    9136:	e002      	b.n	913e <FlexCAN_Error_IRQHandler+0xae>
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    9138:	9b04      	ldr	r3, [sp, #16]
    913a:	4a04      	ldr	r2, [pc, #16]	; (914c <FlexCAN_Error_IRQHandler+0xbc>)
    913c:	621a      	str	r2, [r3, #32]
}
    913e:	bf00      	nop
    9140:	b006      	add	sp, #24
    9142:	bd10      	pop	{r4, pc}
    9144:	0000e8f4 	.word	0x0000e8f4
    9148:	1fff8f9c 	.word	0x1fff8f9c
    914c:	00300002 	.word	0x00300002

00009150 <FlexCAN_BusOff_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements CAN_X_BUSOFF_ISR_Activity */
void FlexCAN_BusOff_IRQHandler(uint8 instance)
{
    9150:	b510      	push	{r4, lr}
    9152:	b086      	sub	sp, #24
    9154:	4603      	mov	r3, r0
    9156:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    915a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    915e:	4a3a      	ldr	r2, [pc, #232]	; (9248 <FlexCAN_BusOff_IRQHandler+0xf8>)
    9160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9164:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9166:	f89d 3007 	ldrb.w	r3, [sp, #7]
    916a:	4a38      	ldr	r2, [pc, #224]	; (924c <FlexCAN_BusOff_IRQHandler+0xfc>)
    916c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9170:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    9172:	2300      	movs	r3, #0
    9174:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check If Driver initialized */
    if (NULL_PTR != state)
    9176:	9b03      	ldr	r3, [sp, #12]
    9178:	2b00      	cmp	r3, #0
    917a:	d05f      	beq.n	923c <FlexCAN_BusOff_IRQHandler+0xec>
    {
        /* Get error status to get value updated */
        u32ErrStatus = base->ESR1;
    917c:	9b04      	ldr	r3, [sp, #16]
    917e:	6a1b      	ldr	r3, [r3, #32]
    9180:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_TWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_TWRNMSK_MASK))))
    9182:	9b05      	ldr	r3, [sp, #20]
    9184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    9188:	2b00      	cmp	r3, #0
    918a:	d01a      	beq.n	91c2 <FlexCAN_BusOff_IRQHandler+0x72>
    918c:	9b04      	ldr	r3, [sp, #16]
    918e:	685b      	ldr	r3, [r3, #4]
    9190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    9194:	2b00      	cmp	r3, #0
    9196:	d014      	beq.n	91c2 <FlexCAN_BusOff_IRQHandler+0x72>
        {
            base->ESR1 = FLEXCAN_ESR1_TWRNINT_MASK;
    9198:	9b04      	ldr	r3, [sp, #16]
    919a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    919e:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    91a0:	9b03      	ldr	r3, [sp, #12]
    91a2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    91a6:	2b00      	cmp	r3, #0
    91a8:	d00b      	beq.n	91c2 <FlexCAN_BusOff_IRQHandler+0x72>
            {
                state->error_callback(instance, FLEXCAN_EVENT_TX_WARNING, u32ErrStatus, state);
    91aa:	9b03      	ldr	r3, [sp, #12]
    91ac:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    91b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    91b4:	9b03      	ldr	r3, [sp, #12]
    91b6:	9a05      	ldr	r2, [sp, #20]
    91b8:	2109      	movs	r1, #9
    91ba:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    91bc:	9b04      	ldr	r3, [sp, #16]
    91be:	6a1b      	ldr	r3, [r3, #32]
    91c0:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_RWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_RWRNMSK_MASK))))
    91c2:	9b05      	ldr	r3, [sp, #20]
    91c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    91c8:	2b00      	cmp	r3, #0
    91ca:	d01a      	beq.n	9202 <FlexCAN_BusOff_IRQHandler+0xb2>
    91cc:	9b04      	ldr	r3, [sp, #16]
    91ce:	685b      	ldr	r3, [r3, #4]
    91d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    91d4:	2b00      	cmp	r3, #0
    91d6:	d014      	beq.n	9202 <FlexCAN_BusOff_IRQHandler+0xb2>
        {
            base->ESR1 = FLEXCAN_ESR1_RWRNINT_MASK;
    91d8:	9b04      	ldr	r3, [sp, #16]
    91da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    91de:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    91e0:	9b03      	ldr	r3, [sp, #12]
    91e2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    91e6:	2b00      	cmp	r3, #0
    91e8:	d00b      	beq.n	9202 <FlexCAN_BusOff_IRQHandler+0xb2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_RX_WARNING, u32ErrStatus, state);
    91ea:	9b03      	ldr	r3, [sp, #12]
    91ec:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    91f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    91f4:	9b03      	ldr	r3, [sp, #12]
    91f6:	9a05      	ldr	r2, [sp, #20]
    91f8:	2108      	movs	r1, #8
    91fa:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    91fc:	9b04      	ldr	r3, [sp, #16]
    91fe:	6a1b      	ldr	r3, [r3, #32]
    9200:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_BOFFINT_MASK))) && ((uint32)0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_BOFFMSK_MASK))))
    9202:	9b05      	ldr	r3, [sp, #20]
    9204:	f003 0304 	and.w	r3, r3, #4
    9208:	2b00      	cmp	r3, #0
    920a:	d01a      	beq.n	9242 <FlexCAN_BusOff_IRQHandler+0xf2>
    920c:	9b04      	ldr	r3, [sp, #16]
    920e:	685b      	ldr	r3, [r3, #4]
    9210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    9214:	2b00      	cmp	r3, #0
    9216:	d014      	beq.n	9242 <FlexCAN_BusOff_IRQHandler+0xf2>
        {
            base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    9218:	9b04      	ldr	r3, [sp, #16]
    921a:	2204      	movs	r2, #4
    921c:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    921e:	9b03      	ldr	r3, [sp, #12]
    9220:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    9224:	2b00      	cmp	r3, #0
    9226:	d00c      	beq.n	9242 <FlexCAN_BusOff_IRQHandler+0xf2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    9228:	9b03      	ldr	r3, [sp, #12]
    922a:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    922e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9232:	9b03      	ldr	r3, [sp, #12]
    9234:	9a05      	ldr	r2, [sp, #20]
    9236:	2107      	movs	r1, #7
    9238:	47a0      	blx	r4
    }
    else
    {
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    }
}
    923a:	e002      	b.n	9242 <FlexCAN_BusOff_IRQHandler+0xf2>
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    923c:	9b04      	ldr	r3, [sp, #16]
    923e:	4a04      	ldr	r2, [pc, #16]	; (9250 <FlexCAN_BusOff_IRQHandler+0x100>)
    9240:	621a      	str	r2, [r3, #32]
}
    9242:	bf00      	nop
    9244:	b006      	add	sp, #24
    9246:	bd10      	pop	{r4, pc}
    9248:	0000e8f4 	.word	0x0000e8f4
    924c:	1fff8f9c 	.word	0x1fff8f9c
    9250:	000b0004 	.word	0x000b0004

00009254 <FlexCAN_Ip_SendBlocking>:
                                              const Flexcan_Ip_DataInfoType * tx_info,
                                              uint32 msg_id,
                                              const uint8 * mb_data,
                                              uint32 timeout_ms
                                             )
{
    9254:	b500      	push	{lr}
    9256:	b091      	sub	sp, #68	; 0x44
    9258:	9204      	str	r2, [sp, #16]
    925a:	9303      	str	r3, [sp, #12]
    925c:	4603      	mov	r3, r0
    925e:	f88d 3017 	strb.w	r3, [sp, #23]
    9262:	460b      	mov	r3, r1
    9264:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9268:	f89d 3017 	ldrb.w	r3, [sp, #23]
    926c:	4a5f      	ldr	r2, [pc, #380]	; (93ec <FlexCAN_Ip_SendBlocking+0x198>)
    926e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9272:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9274:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9278:	4a5d      	ldr	r2, [pc, #372]	; (93f0 <FlexCAN_Ip_SendBlocking+0x19c>)
    927a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    927e:	930c      	str	r3, [sp, #48]	; 0x30

    uint32 timeStart = 0U;
    9280:	2300      	movs	r3, #0
    9282:	9307      	str	r3, [sp, #28]
    uint32 timeElapsed = 0U;
    9284:	2300      	movs	r3, #0
    9286:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 mS2Ticks = OsIf_MicrosToTicks((timeout_ms * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9288:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    928a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    928e:	fb02 f303 	mul.w	r3, r2, r3
    9292:	2100      	movs	r1, #0
    9294:	4618      	mov	r0, r3
    9296:	f7f7 ff7f 	bl	1198 <OsIf_MicrosToTicks>
    929a:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32 uS2Ticks = 0U;
    929c:	2300      	movs	r3, #0
    929e:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 flexcan_mb_config = 0;
    92a0:	2300      	movs	r3, #0
    92a2:	9309      	str	r3, [sp, #36]	; 0x24

    volatile uint32 * flexcan_mb = NULL_PTR;
    92a4:	2300      	movs	r3, #0
    92a6:	9308      	str	r3, [sp, #32]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif

    result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    92a8:	f89d 1016 	ldrb.w	r1, [sp, #22]
    92ac:	f89d 0017 	ldrb.w	r0, [sp, #23]
    92b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    92b2:	9300      	str	r3, [sp, #0]
    92b4:	9b03      	ldr	r3, [sp, #12]
    92b6:	9a04      	ldr	r2, [sp, #16]
    92b8:	f7fe feaa 	bl	8010 <FlexCAN_StartSendData>
    92bc:	900f      	str	r0, [sp, #60]	; 0x3c

    if (FLEXCAN_STATUS_SUCCESS == result)
    92be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    92c0:	2b00      	cmp	r3, #0
    92c2:	f040 808d 	bne.w	93e0 <FlexCAN_Ip_SendBlocking+0x18c>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    92c6:	2000      	movs	r0, #0
    92c8:	f7f7 ff1a 	bl	1100 <OsIf_GetCounter>
    92cc:	4603      	mov	r3, r0
    92ce:	9307      	str	r3, [sp, #28]
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    92d0:	e00f      	b.n	92f2 <FlexCAN_Ip_SendBlocking+0x9e>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    92d2:	ab07      	add	r3, sp, #28
    92d4:	2100      	movs	r1, #0
    92d6:	4618      	mov	r0, r3
    92d8:	f7f7 ff2b 	bl	1132 <OsIf_GetElapsed>
    92dc:	4602      	mov	r2, r0
    92de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    92e0:	4413      	add	r3, r2
    92e2:	930e      	str	r3, [sp, #56]	; 0x38
            if (timeElapsed >= mS2Ticks)
    92e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    92e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    92e8:	429a      	cmp	r2, r3
    92ea:	d302      	bcc.n	92f2 <FlexCAN_Ip_SendBlocking+0x9e>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    92ec:	2303      	movs	r3, #3
    92ee:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
    92f0:	e008      	b.n	9304 <FlexCAN_Ip_SendBlocking+0xb0>
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    92f2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    92f6:	4619      	mov	r1, r3
    92f8:	980d      	ldr	r0, [sp, #52]	; 0x34
    92fa:	f7fe fab6 	bl	786a <FlexCAN_GetBuffStatusFlag>
    92fe:	4603      	mov	r3, r0
    9300:	2b01      	cmp	r3, #1
    9302:	d1e6      	bne.n	92d2 <FlexCAN_Ip_SendBlocking+0x7e>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == result) && (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE))
    9304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9306:	2b03      	cmp	r3, #3
    9308:	d15c      	bne.n	93c4 <FlexCAN_Ip_SendBlocking+0x170>
    930a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    930e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9310:	011b      	lsls	r3, r3, #4
    9312:	4413      	add	r3, r2
    9314:	3304      	adds	r3, #4
    9316:	681b      	ldr	r3, [r3, #0]
    9318:	2b00      	cmp	r3, #0
    931a:	d053      	beq.n	93c4 <FlexCAN_Ip_SendBlocking+0x170>
        {
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    931c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9320:	4619      	mov	r1, r3
    9322:	980d      	ldr	r0, [sp, #52]	; 0x34
    9324:	f7fe fa8e 	bl	7844 <FlexCAN_ClearMsgBuffIntStatusFlag>
                flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    9328:	f89d 3016 	ldrb.w	r3, [sp, #22]
    932c:	4619      	mov	r1, r3
    932e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9330:	f001 f968 	bl	a604 <FlexCAN_GetMsgBuffRegion>
    9334:	9008      	str	r0, [sp, #32]
                flexcan_mb_config = * flexcan_mb;
    9336:	9b08      	ldr	r3, [sp, #32]
    9338:	681b      	ldr	r3, [r3, #0]
    933a:	9309      	str	r3, [sp, #36]	; 0x24
                /* Reset the code */
                flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    933c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    933e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9342:	9309      	str	r3, [sp, #36]	; 0x24
                flexcan_mb_config |= ((uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    9344:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9346:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    934a:	9309      	str	r3, [sp, #36]	; 0x24
                *flexcan_mb = flexcan_mb_config;
    934c:	9b08      	ldr	r3, [sp, #32]
    934e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9350:	601a      	str	r2, [r3, #0]

                /* Wait to finish abort operation */
                uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9352:	2100      	movs	r1, #0
    9354:	4827      	ldr	r0, [pc, #156]	; (93f4 <FlexCAN_Ip_SendBlocking+0x1a0>)
    9356:	f7f7 ff1f 	bl	1198 <OsIf_MicrosToTicks>
    935a:	900a      	str	r0, [sp, #40]	; 0x28
                timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    935c:	2000      	movs	r0, #0
    935e:	f7f7 fecf 	bl	1100 <OsIf_GetCounter>
    9362:	4603      	mov	r3, r0
    9364:	9307      	str	r3, [sp, #28]
                 timeElapsed = 0U;
    9366:	2300      	movs	r3, #0
    9368:	930e      	str	r3, [sp, #56]	; 0x38
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    936a:	e00f      	b.n	938c <FlexCAN_Ip_SendBlocking+0x138>
                {
                    timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    936c:	ab07      	add	r3, sp, #28
    936e:	2100      	movs	r1, #0
    9370:	4618      	mov	r0, r3
    9372:	f7f7 fede 	bl	1132 <OsIf_GetElapsed>
    9376:	4602      	mov	r2, r0
    9378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    937a:	4413      	add	r3, r2
    937c:	930e      	str	r3, [sp, #56]	; 0x38
                    if (timeElapsed >= uS2Ticks)
    937e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9382:	429a      	cmp	r2, r3
    9384:	d302      	bcc.n	938c <FlexCAN_Ip_SendBlocking+0x138>
                    {
                        result = FLEXCAN_STATUS_TIMEOUT;
    9386:	2303      	movs	r3, #3
    9388:	930f      	str	r3, [sp, #60]	; 0x3c
                        break;
    938a:	e008      	b.n	939e <FlexCAN_Ip_SendBlocking+0x14a>
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    938c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9390:	4619      	mov	r1, r3
    9392:	980d      	ldr	r0, [sp, #52]	; 0x34
    9394:	f7fe fa69 	bl	786a <FlexCAN_GetBuffStatusFlag>
    9398:	4603      	mov	r3, r0
    939a:	2b00      	cmp	r3, #0
    939c:	d0e6      	beq.n	936c <FlexCAN_Ip_SendBlocking+0x118>
                    }
                }

                flexcan_mb_config = *flexcan_mb;
    939e:	9b08      	ldr	r3, [sp, #32]
    93a0:	681b      	ldr	r3, [r3, #0]
    93a2:	9309      	str	r3, [sp, #36]	; 0x24
                /* Check if the MBs have been safely Inactivated */
                if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    93a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    93a6:	0e1b      	lsrs	r3, r3, #24
    93a8:	f003 030f 	and.w	r3, r3, #15
    93ac:	2b08      	cmp	r3, #8
    93ae:	d101      	bne.n	93b4 <FlexCAN_Ip_SendBlocking+0x160>
                {
                    /* Transmission have occurred */
                    result = FLEXCAN_STATUS_SUCCESS;
    93b0:	2300      	movs	r3, #0
    93b2:	930f      	str	r3, [sp, #60]	; 0x3c
                }

                if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    93b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    93b6:	0e1b      	lsrs	r3, r3, #24
    93b8:	f003 030f 	and.w	r3, r3, #15
    93bc:	2b09      	cmp	r3, #9
    93be:	d101      	bne.n	93c4 <FlexCAN_Ip_SendBlocking+0x170>
                {
                    /* Transmission have been aborted */
                    result = FLEXCAN_STATUS_TIMEOUT;
    93c0:	2303      	movs	r3, #3
    93c2:	930f      	str	r3, [sp, #60]	; 0x3c
                }
        }

        /* Clear message buffer flag */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    93c4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    93c8:	4619      	mov	r1, r3
    93ca:	980d      	ldr	r0, [sp, #52]	; 0x34
    93cc:	f7fe fa3a 	bl	7844 <FlexCAN_ClearMsgBuffIntStatusFlag>

        state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    93d0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    93d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    93d6:	011b      	lsls	r3, r3, #4
    93d8:	4413      	add	r3, r2
    93da:	3304      	adds	r3, #4
    93dc:	2200      	movs	r2, #0
    93de:	601a      	str	r2, [r3, #0]
    }
    return result;
    93e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
    93e2:	4618      	mov	r0, r3
    93e4:	b011      	add	sp, #68	; 0x44
    93e6:	f85d fb04 	ldr.w	pc, [sp], #4
    93ea:	bf00      	nop
    93ec:	0000e8f4 	.word	0x0000e8f4
    93f0:	1fff8f9c 	.word	0x1fff8f9c
    93f4:	000f4240 	.word	0x000f4240

000093f8 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_SetRxMbGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMbGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    93f8:	b500      	push	{lr}
    93fa:	b087      	sub	sp, #28
    93fc:	4603      	mov	r3, r0
    93fe:	9100      	str	r1, [sp, #0]
    9400:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9404:	2300      	movs	r3, #0
    9406:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    9408:	2300      	movs	r3, #0
    940a:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    940c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9410:	4a1c      	ldr	r2, [pc, #112]	; (9484 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x8c>)
    9412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9416:	9303      	str	r3, [sp, #12]
#endif

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    9418:	9803      	ldr	r0, [sp, #12]
    941a:	f7fe f9b9 	bl	7790 <FlexCAN_IsEnabled>
    941e:	4603      	mov	r3, r0
    9420:	2b00      	cmp	r3, #0
    9422:	bf14      	ite	ne
    9424:	2301      	movne	r3, #1
    9426:	2300      	moveq	r3, #0
    9428:	b2db      	uxtb	r3, r3
    942a:	f083 0301 	eor.w	r3, r3, #1
    942e:	b2db      	uxtb	r3, r3
    9430:	f88d 300b 	strb.w	r3, [sp, #11]
    9434:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9438:	f003 0301 	and.w	r3, r3, #1
    943c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    9440:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9444:	2b00      	cmp	r3, #0
    9446:	d003      	beq.n	9450 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    9448:	9803      	ldr	r0, [sp, #12]
    944a:	f001 f9c3 	bl	a7d4 <FlexCAN_Enable>
    944e:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    9450:	9b05      	ldr	r3, [sp, #20]
    9452:	2b00      	cmp	r3, #0
    9454:	d103      	bne.n	945e <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxMsgBuffGlobalMask(pBase, mask);
    9456:	9900      	ldr	r1, [sp, #0]
    9458:	9803      	ldr	r0, [sp, #12]
    945a:	f7fe fbc3 	bl	7be4 <FlexCAN_SetRxMsgBuffGlobalMask>
    }

    if (TRUE == disabled)
    945e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9462:	2b00      	cmp	r3, #0
    9464:	d008      	beq.n	9478 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    9466:	9803      	ldr	r0, [sp, #12]
    9468:	f001 fa32 	bl	a8d0 <FlexCAN_Disable>
    946c:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    946e:	9b04      	ldr	r3, [sp, #16]
    9470:	2b00      	cmp	r3, #0
    9472:	d001      	beq.n	9478 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
        {
            result = status;
    9474:	9b04      	ldr	r3, [sp, #16]
    9476:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    9478:	9b05      	ldr	r3, [sp, #20]
}
    947a:	4618      	mov	r0, r3
    947c:	b007      	add	sp, #28
    947e:	f85d fb04 	ldr.w	pc, [sp], #4
    9482:	bf00      	nop
    9484:	0000e8f4 	.word	0x0000e8f4

00009488 <FlexCAN_Ip_EnterFreezeMode_Privileged>:
 * Description   : Enter Driver In freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnterFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnterFreezeMode_Privileged(uint8 instance)
{
    9488:	b500      	push	{lr}
    948a:	b085      	sub	sp, #20
    948c:	4603      	mov	r3, r0
    948e:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9492:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9496:	4a06      	ldr	r2, [pc, #24]	; (94b0 <FlexCAN_Ip_EnterFreezeMode_Privileged+0x28>)
    9498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    949c:	9303      	str	r3, [sp, #12]
        return FlexCAN_EnterFreezeMode(base);
    949e:	9803      	ldr	r0, [sp, #12]
    94a0:	f001 f94c 	bl	a73c <FlexCAN_EnterFreezeMode>
    94a4:	4603      	mov	r3, r0
}
    94a6:	4618      	mov	r0, r3
    94a8:	b005      	add	sp, #20
    94aa:	f85d fb04 	ldr.w	pc, [sp], #4
    94ae:	bf00      	nop
    94b0:	0000e8f4 	.word	0x0000e8f4

000094b4 <FlexCAN_Ip_ExitFreezeMode_Privileged>:
 * Description   : Exit Driver from freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ExitFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ExitFreezeMode_Privileged(uint8 instance)
{
    94b4:	b500      	push	{lr}
    94b6:	b085      	sub	sp, #20
    94b8:	4603      	mov	r3, r0
    94ba:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    94be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    94c2:	4a06      	ldr	r2, [pc, #24]	; (94dc <FlexCAN_Ip_ExitFreezeMode_Privileged+0x28>)
    94c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94c8:	9303      	str	r3, [sp, #12]
        return FlexCAN_ExitFreezeMode(base);
    94ca:	9803      	ldr	r0, [sp, #12]
    94cc:	f001 f9be 	bl	a84c <FlexCAN_ExitFreezeMode>
    94d0:	4603      	mov	r3, r0
}
    94d2:	4618      	mov	r0, r3
    94d4:	b005      	add	sp, #20
    94d6:	f85d fb04 	ldr.w	pc, [sp], #4
    94da:	bf00      	nop
    94dc:	0000e8f4 	.word	0x0000e8f4

000094e0 <FlexCAN_Ip_SetRxIndividualMask_Privileged>:
 * Description   : Set Rx individual mask as absolute value provided by mask parameter
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxIndividualMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxIndividualMask_Privileged(uint8 instance, uint8 mb_idx, uint32 mask)
{
    94e0:	b500      	push	{lr}
    94e2:	b087      	sub	sp, #28
    94e4:	4603      	mov	r3, r0
    94e6:	9200      	str	r2, [sp, #0]
    94e8:	f88d 3007 	strb.w	r3, [sp, #7]
    94ec:	460b      	mov	r3, r1
    94ee:	f88d 3006 	strb.w	r3, [sp, #6]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    94f2:	2300      	movs	r3, #0
    94f4:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    94f6:	2300      	movs	r3, #0
    94f8:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    94fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    94fe:	4a1e      	ldr	r2, [pc, #120]	; (9578 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x98>)
    9500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9504:	9303      	str	r3, [sp, #12]
    }
    else
    {
#endif

    boolean disabled = !FlexCAN_IsEnabled(pBase);
    9506:	9803      	ldr	r0, [sp, #12]
    9508:	f7fe f942 	bl	7790 <FlexCAN_IsEnabled>
    950c:	4603      	mov	r3, r0
    950e:	2b00      	cmp	r3, #0
    9510:	bf14      	ite	ne
    9512:	2301      	movne	r3, #1
    9514:	2300      	moveq	r3, #0
    9516:	b2db      	uxtb	r3, r3
    9518:	f083 0301 	eor.w	r3, r3, #1
    951c:	b2db      	uxtb	r3, r3
    951e:	f88d 300b 	strb.w	r3, [sp, #11]
    9522:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9526:	f003 0301 	and.w	r3, r3, #1
    952a:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    952e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9532:	2b00      	cmp	r3, #0
    9534:	d003      	beq.n	953e <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    9536:	9803      	ldr	r0, [sp, #12]
    9538:	f001 f94c 	bl	a7d4 <FlexCAN_Enable>
    953c:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    953e:	9b05      	ldr	r3, [sp, #20]
    9540:	2b00      	cmp	r3, #0
    9542:	d106      	bne.n	9552 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x72>
    {
        FlexCAN_SetRxIndividualMask(pBase, mb_idx, mask);
    9544:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9548:	9a00      	ldr	r2, [sp, #0]
    954a:	4619      	mov	r1, r3
    954c:	9803      	ldr	r0, [sp, #12]
    954e:	f7fe fb52 	bl	7bf6 <FlexCAN_SetRxIndividualMask>
    }

    if (TRUE == disabled)
    9552:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9556:	2b00      	cmp	r3, #0
    9558:	d008      	beq.n	956c <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    955a:	9803      	ldr	r0, [sp, #12]
    955c:	f001 f9b8 	bl	a8d0 <FlexCAN_Disable>
    9560:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    9562:	9b04      	ldr	r3, [sp, #16]
    9564:	2b00      	cmp	r3, #0
    9566:	d001      	beq.n	956c <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
        {
            result = status;
    9568:	9b04      	ldr	r3, [sp, #16]
    956a:	9305      	str	r3, [sp, #20]
        }
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    956c:	9b05      	ldr	r3, [sp, #20]
}
    956e:	4618      	mov	r0, r3
    9570:	b007      	add	sp, #28
    9572:	f85d fb04 	ldr.w	pc, [sp], #4
    9576:	bf00      	nop
    9578:	0000e8f4 	.word	0x0000e8f4

0000957c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>:
 * Description   : Set RxFifo Global Mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxFifoGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxFifoGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    957c:	b500      	push	{lr}
    957e:	b087      	sub	sp, #28
    9580:	4603      	mov	r3, r0
    9582:	9100      	str	r1, [sp, #0]
    9584:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9588:	2300      	movs	r3, #0
    958a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    958c:	2300      	movs	r3, #0
    958e:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9590:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9594:	4a1c      	ldr	r2, [pc, #112]	; (9608 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x8c>)
    9596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    959a:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    959c:	9803      	ldr	r0, [sp, #12]
    959e:	f7fe f8f7 	bl	7790 <FlexCAN_IsEnabled>
    95a2:	4603      	mov	r3, r0
    95a4:	2b00      	cmp	r3, #0
    95a6:	bf14      	ite	ne
    95a8:	2301      	movne	r3, #1
    95aa:	2300      	moveq	r3, #0
    95ac:	b2db      	uxtb	r3, r3
    95ae:	f083 0301 	eor.w	r3, r3, #1
    95b2:	b2db      	uxtb	r3, r3
    95b4:	f88d 300b 	strb.w	r3, [sp, #11]
    95b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    95bc:	f003 0301 	and.w	r3, r3, #1
    95c0:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    95c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    95c8:	2b00      	cmp	r3, #0
    95ca:	d003      	beq.n	95d4 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    95cc:	9803      	ldr	r0, [sp, #12]
    95ce:	f001 f901 	bl	a7d4 <FlexCAN_Enable>
    95d2:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    95d4:	9b05      	ldr	r3, [sp, #20]
    95d6:	2b00      	cmp	r3, #0
    95d8:	d103      	bne.n	95e2 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxFifoGlobalMask(pBase, mask);
    95da:	9900      	ldr	r1, [sp, #0]
    95dc:	9803      	ldr	r0, [sp, #12]
    95de:	f7fe f8a7 	bl	7730 <FlexCAN_SetRxFifoGlobalMask>
    }

    if (TRUE == disabled)
    95e2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    95e6:	2b00      	cmp	r3, #0
    95e8:	d008      	beq.n	95fc <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    95ea:	9803      	ldr	r0, [sp, #12]
    95ec:	f001 f970 	bl	a8d0 <FlexCAN_Disable>
    95f0:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    95f2:	9b04      	ldr	r3, [sp, #16]
    95f4:	2b00      	cmp	r3, #0
    95f6:	d001      	beq.n	95fc <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
        {
            result = status;
    95f8:	9b04      	ldr	r3, [sp, #16]
    95fa:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    95fc:	9b05      	ldr	r3, [sp, #20]
}
    95fe:	4618      	mov	r0, r3
    9600:	b007      	add	sp, #28
    9602:	f85d fb04 	ldr.w	pc, [sp], #4
    9606:	bf00      	nop
    9608:	0000e8f4 	.word	0x0000e8f4

0000960c <FlexCAN_Ip_Deinit_Privileged>:
 * This function will disable all FlexCAN interrupts, and disable the FlexCAN.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_Deinit_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Deinit_Privileged(uint8 instance)
{
    960c:	b500      	push	{lr}
    960e:	b085      	sub	sp, #20
    9610:	4603      	mov	r3, r0
    9612:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9616:	f89d 3007 	ldrb.w	r3, [sp, #7]
    961a:	4a0e      	ldr	r2, [pc, #56]	; (9654 <FlexCAN_Ip_Deinit_Privileged+0x48>)
    961c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9620:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Enter Freeze Mode Required before to enter Disabled Mode */
    result = FlexCAN_EnterFreezeMode(base);
    9622:	9803      	ldr	r0, [sp, #12]
    9624:	f001 f88a 	bl	a73c <FlexCAN_EnterFreezeMode>
    9628:	9002      	str	r0, [sp, #8]
    if (FLEXCAN_STATUS_SUCCESS == result)
    962a:	9b02      	ldr	r3, [sp, #8]
    962c:	2b00      	cmp	r3, #0
    962e:	d10b      	bne.n	9648 <FlexCAN_Ip_Deinit_Privileged+0x3c>
    {
        /* Reset registers */
        FlexCAN_SetRegDefaultVal(base);
    9630:	9803      	ldr	r0, [sp, #12]
    9632:	f7fe fb18 	bl	7c66 <FlexCAN_SetRegDefaultVal>
        /* wait for disable */
        (void)FlexCAN_Disable(base);
    9636:	9803      	ldr	r0, [sp, #12]
    9638:	f001 f94a 	bl	a8d0 <FlexCAN_Disable>
        /* Clear state pointer that is checked by FLEXCAN_DRV_Init */
        Flexcan_Ip_apxState[instance] = NULL_PTR;
    963c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9640:	4a05      	ldr	r2, [pc, #20]	; (9658 <FlexCAN_Ip_Deinit_Privileged+0x4c>)
    9642:	2100      	movs	r1, #0
    9644:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OsIf_Trusted_Call1param(FlexCAN_ClrUserAccessAllowed, base);
        }
    #endif
    }

    return result;
    9648:	9b02      	ldr	r3, [sp, #8]
}
    964a:	4618      	mov	r0, r3
    964c:	b005      	add	sp, #20
    964e:	f85d fb04 	ldr.w	pc, [sp], #4
    9652:	bf00      	nop
    9654:	0000e8f4 	.word	0x0000e8f4
    9658:	1fff8f9c 	.word	0x1fff8f9c

0000965c <FlexCAN_Ip_MainFunctionRead>:
 * This function read the messages received as pulling or if the Interrupts are disabled.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionRead_Activity */
void FlexCAN_Ip_MainFunctionRead(uint8 instance, uint8 mb_idx)
{
    965c:	b500      	push	{lr}
    965e:	b085      	sub	sp, #20
    9660:	4603      	mov	r3, r0
    9662:	460a      	mov	r2, r1
    9664:	f88d 3007 	strb.w	r3, [sp, #7]
    9668:	4613      	mov	r3, r2
    966a:	f88d 3006 	strb.w	r3, [sp, #6]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    966e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9672:	4a22      	ldr	r2, [pc, #136]	; (96fc <FlexCAN_Ip_MainFunctionRead+0xa0>)
    9674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9678:	9303      	str	r3, [sp, #12]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    967a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    967e:	4a20      	ldr	r2, [pc, #128]	; (9700 <FlexCAN_Ip_MainFunctionRead+0xa4>)
    9680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9684:	9302      	str	r3, [sp, #8]
        }
    }
    else
    {
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
        if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    9686:	9b02      	ldr	r3, [sp, #8]
    9688:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    968c:	2b00      	cmp	r3, #0
    968e:	d015      	beq.n	96bc <FlexCAN_Ip_MainFunctionRead+0x60>
    9690:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9694:	2b07      	cmp	r3, #7
    9696:	d811      	bhi.n	96bc <FlexCAN_Ip_MainFunctionRead+0x60>
        {
            /* just process available legacy fifo event only */
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    9698:	f89d 3006 	ldrb.w	r3, [sp, #6]
    969c:	2b00      	cmp	r3, #0
    969e:	d128      	bne.n	96f2 <FlexCAN_Ip_MainFunctionRead+0x96>
            {
                if (FlexCAN_GetBuffStatusFlag(base, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE) != 0U)
    96a0:	2105      	movs	r1, #5
    96a2:	9803      	ldr	r0, [sp, #12]
    96a4:	f7fe f8e1 	bl	786a <FlexCAN_GetBuffStatusFlag>
    96a8:	4603      	mov	r3, r0
    96aa:	2b00      	cmp	r3, #0
    96ac:	d021      	beq.n	96f2 <FlexCAN_Ip_MainFunctionRead+0x96>
                {
                    FlexCAN_IRQHandlerRxFIFO(instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE);
    96ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    96b2:	2105      	movs	r1, #5
    96b4:	4618      	mov	r0, r3
    96b6:	f7fe ff17 	bl	84e8 <FlexCAN_IRQHandlerRxFIFO>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    96ba:	e01a      	b.n	96f2 <FlexCAN_Ip_MainFunctionRead+0x96>
                }
            }
        }
        else
        {
            if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    96bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    96c0:	4619      	mov	r1, r3
    96c2:	9803      	ldr	r0, [sp, #12]
    96c4:	f7fe f8d1 	bl	786a <FlexCAN_GetBuffStatusFlag>
    96c8:	4603      	mov	r3, r0
    96ca:	2b00      	cmp	r3, #0
    96cc:	d012      	beq.n	96f4 <FlexCAN_Ip_MainFunctionRead+0x98>
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    96ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
    96d2:	9a02      	ldr	r2, [sp, #8]
    96d4:	011b      	lsls	r3, r3, #4
    96d6:	4413      	add	r3, r2
    96d8:	3304      	adds	r3, #4
    96da:	681b      	ldr	r3, [r3, #0]
    96dc:	2b01      	cmp	r3, #1
    96de:	d109      	bne.n	96f4 <FlexCAN_Ip_MainFunctionRead+0x98>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    96e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    96e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    96e8:	4611      	mov	r1, r2
    96ea:	4618      	mov	r0, r3
    96ec:	f7fe fd74 	bl	81d8 <FlexCAN_IRQHandlerRxMB>
            }
        }
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
}
    96f0:	e000      	b.n	96f4 <FlexCAN_Ip_MainFunctionRead+0x98>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    96f2:	bf00      	nop
}
    96f4:	bf00      	nop
    96f6:	b005      	add	sp, #20
    96f8:	f85d fb04 	ldr.w	pc, [sp], #4
    96fc:	0000e8f4 	.word	0x0000e8f4
    9700:	1fff8f9c 	.word	0x1fff8f9c

00009704 <FlexCAN_Ip_MainFunctionBusOff_Privileged>:
 * This function check the bus off event.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionBusOff_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_MainFunctionBusOff_Privileged(uint8 instance)
{
    9704:	b510      	push	{r4, lr}
    9706:	b086      	sub	sp, #24
    9708:	4603      	mov	r3, r0
    970a:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    970e:	2301      	movs	r3, #1
    9710:	9305      	str	r3, [sp, #20]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9712:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9716:	4a15      	ldr	r2, [pc, #84]	; (976c <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x68>)
    9718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    971c:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    971e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9722:	4a13      	ldr	r2, [pc, #76]	; (9770 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x6c>)
    9724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9728:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    972a:	2300      	movs	r3, #0
    972c:	9302      	str	r3, [sp, #8]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Get error status */
    u32ErrStatus = base->ESR1;
    972e:	9b04      	ldr	r3, [sp, #16]
    9730:	6a1b      	ldr	r3, [r3, #32]
    9732:	9302      	str	r3, [sp, #8]

    if (0U != (u32ErrStatus & FLEXCAN_ESR1_BOFFINT_MASK))
    9734:	9b02      	ldr	r3, [sp, #8]
    9736:	f003 0304 	and.w	r3, r3, #4
    973a:	2b00      	cmp	r3, #0
    973c:	d012      	beq.n	9764 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x60>
    {
        /* Invoke callback */
        if (state->error_callback != NULL_PTR)
    973e:	9b03      	ldr	r3, [sp, #12]
    9740:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    9744:	2b00      	cmp	r3, #0
    9746:	d008      	beq.n	975a <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x56>
        {
            state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    9748:	9b03      	ldr	r3, [sp, #12]
    974a:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    974e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9752:	9b03      	ldr	r3, [sp, #12]
    9754:	9a02      	ldr	r2, [sp, #8]
    9756:	2107      	movs	r1, #7
    9758:	47a0      	blx	r4
        }
        /* Clear BusOff Status Flag */
        base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    975a:	9b04      	ldr	r3, [sp, #16]
    975c:	2204      	movs	r2, #4
    975e:	621a      	str	r2, [r3, #32]
        eRetVal = FLEXCAN_STATUS_SUCCESS;
    9760:	2300      	movs	r3, #0
    9762:	9305      	str	r3, [sp, #20]
    }
    return eRetVal;
    9764:	9b05      	ldr	r3, [sp, #20]
}
    9766:	4618      	mov	r0, r3
    9768:	b006      	add	sp, #24
    976a:	bd10      	pop	{r4, pc}
    976c:	0000e8f4 	.word	0x0000e8f4
    9770:	1fff8f9c 	.word	0x1fff8f9c

00009774 <FlexCAN_Ip_MainFunctionWrite>:
 * This function check the message if have been sent.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionWrite_Activity */
void FlexCAN_Ip_MainFunctionWrite(uint8 instance, uint8 mb_idx)
{
    9774:	b510      	push	{r4, lr}
    9776:	b098      	sub	sp, #96	; 0x60
    9778:	4603      	mov	r3, r0
    977a:	460a      	mov	r2, r1
    977c:	f88d 3007 	strb.w	r3, [sp, #7]
    9780:	4613      	mov	r3, r2
    9782:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9786:	f89d 3007 	ldrb.w	r3, [sp, #7]
    978a:	4a3f      	ldr	r2, [pc, #252]	; (9888 <FlexCAN_Ip_MainFunctionWrite+0x114>)
    978c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9790:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9792:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9796:	4a3d      	ldr	r2, [pc, #244]	; (988c <FlexCAN_Ip_MainFunctionWrite+0x118>)
    9798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    979c:	9316      	str	r3, [sp, #88]	; 0x58

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    979e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    97a2:	4619      	mov	r1, r3
    97a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    97a6:	f7fe f860 	bl	786a <FlexCAN_GetBuffStatusFlag>
    97aa:	4603      	mov	r3, r0
    97ac:	2b00      	cmp	r3, #0
    97ae:	d068      	beq.n	9882 <FlexCAN_Ip_MainFunctionWrite+0x10e>
    {
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    97b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    97b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
    97b6:	011b      	lsls	r3, r3, #4
    97b8:	4413      	add	r3, r2
    97ba:	3304      	adds	r3, #4
    97bc:	681b      	ldr	r3, [r3, #0]
    97be:	2b02      	cmp	r3, #2
    97c0:	d15f      	bne.n	9882 <FlexCAN_Ip_MainFunctionWrite+0x10e>
        {
            if (state->mbs[mb_idx].isRemote)
    97c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    97c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    97c8:	011b      	lsls	r3, r3, #4
    97ca:	4413      	add	r3, r2
    97cc:	3309      	adds	r3, #9
    97ce:	781b      	ldrb	r3, [r3, #0]
    97d0:	2b00      	cmp	r3, #0
    97d2:	d028      	beq.n	9826 <FlexCAN_Ip_MainFunctionWrite+0xb2>
            {
                Flexcan_Ip_MsgBuffType mb;
                mb.cs = 0U;
    97d4:	2300      	movs	r3, #0
    97d6:	9302      	str	r3, [sp, #8]
                mb.time_stamp = 0U;
    97d8:	2300      	movs	r3, #0
    97da:	9315      	str	r3, [sp, #84]	; 0x54
                FlexCAN_LockRxMsgBuff(base, mb_idx);
    97dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    97e0:	4619      	mov	r1, r3
    97e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
    97e4:	f001 fa87 	bl	acf6 <FlexCAN_LockRxMsgBuff>
                FlexCAN_GetMsgBuff(base, mb_idx, &mb);
    97e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    97ec:	aa02      	add	r2, sp, #8
    97ee:	4619      	mov	r1, r3
    97f0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    97f2:	f001 fbaf 	bl	af54 <FlexCAN_GetMsgBuff>
                FlexCAN_UnlockRxMsgBuff(base);
    97f6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    97f8:	f7fe f81d 	bl	7836 <FlexCAN_UnlockRxMsgBuff>
                state->mbs[mb_idx].time_stamp = mb.time_stamp;
    97fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9800:	9a15      	ldr	r2, [sp, #84]	; 0x54
    9802:	9916      	ldr	r1, [sp, #88]	; 0x58
    9804:	011b      	lsls	r3, r3, #4
    9806:	440b      	add	r3, r1
    9808:	330c      	adds	r3, #12
    980a:	601a      	str	r2, [r3, #0]
                /* If the frame was a remote frame, clear the flag only if the response was
                * not received yet. If the response was received, leave the flag set in order
                * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
                if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    980c:	9b02      	ldr	r3, [sp, #8]
    980e:	0e1b      	lsrs	r3, r3, #24
    9810:	f003 030f 	and.w	r3, r3, #15
    9814:	2b04      	cmp	r3, #4
    9816:	d11d      	bne.n	9854 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                {
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9818:	f89d 3006 	ldrb.w	r3, [sp, #6]
    981c:	4619      	mov	r1, r3
    981e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9820:	f7fe f810 	bl	7844 <FlexCAN_ClearMsgBuffIntStatusFlag>
    9824:	e016      	b.n	9854 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                }
            }
            else
            {
                state->mbs[mb_idx].time_stamp = FlexCAN_GetMsgBuffTimestamp(base, mb_idx);
    9826:	f89d 3006 	ldrb.w	r3, [sp, #6]
    982a:	f89d 4006 	ldrb.w	r4, [sp, #6]
    982e:	4619      	mov	r1, r3
    9830:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9832:	f001 fb7b 	bl	af2c <FlexCAN_GetMsgBuffTimestamp>
    9836:	4601      	mov	r1, r0
    9838:	9a16      	ldr	r2, [sp, #88]	; 0x58
    983a:	0123      	lsls	r3, r4, #4
    983c:	4413      	add	r3, r2
    983e:	330c      	adds	r3, #12
    9840:	6019      	str	r1, [r3, #0]
                FlexCAN_UnlockRxMsgBuff(base);
    9842:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9844:	f7fd fff7 	bl	7836 <FlexCAN_UnlockRxMsgBuff>
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9848:	f89d 3006 	ldrb.w	r3, [sp, #6]
    984c:	4619      	mov	r1, r3
    984e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9850:	f7fd fff8 	bl	7844 <FlexCAN_ClearMsgBuffIntStatusFlag>
            }

            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9854:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9858:	9a16      	ldr	r2, [sp, #88]	; 0x58
    985a:	011b      	lsls	r3, r3, #4
    985c:	4413      	add	r3, r2
    985e:	3304      	adds	r3, #4
    9860:	2200      	movs	r2, #0
    9862:	601a      	str	r2, [r3, #0]

            /* Invoke callback */
            if (state->callback != NULL_PTR)
    9864:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9866:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    986a:	2b00      	cmp	r3, #0
    986c:	d009      	beq.n	9882 <FlexCAN_Ip_MainFunctionWrite+0x10e>
            {
                state->callback(instance, FLEXCAN_EVENT_TX_COMPLETE, mb_idx, state);
    986e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9870:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9874:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9878:	f89d 0007 	ldrb.w	r0, [sp, #7]
    987c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    987e:	2104      	movs	r1, #4
    9880:	47a0      	blx	r4
            }
        }
    }
}
    9882:	bf00      	nop
    9884:	b018      	add	sp, #96	; 0x60
    9886:	bd10      	pop	{r4, pc}
    9888:	0000e8f4 	.word	0x0000e8f4
    988c:	1fff8f9c 	.word	0x1fff8f9c

00009890 <FlexCAN_Ip_GetStopMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STOPPED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStopMode_Activity */
boolean FlexCAN_Ip_GetStopMode_Privileged(uint8 instance)
{
    9890:	b084      	sub	sp, #16
    9892:	4603      	mov	r3, r0
    9894:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9898:	f89d 3007 	ldrb.w	r3, [sp, #7]
    989c:	4a08      	ldr	r2, [pc, #32]	; (98c0 <FlexCAN_Ip_GetStopMode_Privileged+0x30>)
    989e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98a2:	9303      	str	r3, [sp, #12]
    return ((FLEXCAN_MCR_LPMACK_MASK == (base->MCR & FLEXCAN_MCR_LPMACK_MASK)) ? TRUE : FALSE);
    98a4:	9b03      	ldr	r3, [sp, #12]
    98a6:	681b      	ldr	r3, [r3, #0]
    98a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    98ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    98b0:	bf0c      	ite	eq
    98b2:	2301      	moveq	r3, #1
    98b4:	2300      	movne	r3, #0
    98b6:	b2db      	uxtb	r3, r3
}
    98b8:	4618      	mov	r0, r3
    98ba:	b004      	add	sp, #16
    98bc:	4770      	bx	lr
    98be:	bf00      	nop
    98c0:	0000e8f4 	.word	0x0000e8f4

000098c4 <FlexCAN_Ip_GetStartMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STARTED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStartMode_Activity */
boolean FlexCAN_Ip_GetStartMode_Privileged(uint8 instance)
{
    98c4:	b084      	sub	sp, #16
    98c6:	4603      	mov	r3, r0
    98c8:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    98cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    98d0:	4a07      	ldr	r2, [pc, #28]	; (98f0 <FlexCAN_Ip_GetStartMode_Privileged+0x2c>)
    98d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98d6:	9303      	str	r3, [sp, #12]
    return ((0U == (base->MCR & (FLEXCAN_MCR_LPMACK_MASK | FLEXCAN_MCR_FRZACK_MASK))) ? TRUE : FALSE);
    98d8:	9b03      	ldr	r3, [sp, #12]
    98da:	681b      	ldr	r3, [r3, #0]
    98dc:	f003 7388 	and.w	r3, r3, #17825792	; 0x1100000
    98e0:	2b00      	cmp	r3, #0
    98e2:	bf0c      	ite	eq
    98e4:	2301      	moveq	r3, #1
    98e6:	2300      	movne	r3, #0
    98e8:	b2db      	uxtb	r3, r3
}
    98ea:	4618      	mov	r0, r3
    98ec:	b004      	add	sp, #16
    98ee:	4770      	bx	lr
    98f0:	0000e8f4 	.word	0x0000e8f4

000098f4 <FlexCAN_Ip_SetStartMode_Privileged>:
 * Description   : Set the FlexCAN instance in START mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStartMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStartMode_Privileged(uint8 instance)
{
    98f4:	b500      	push	{lr}
    98f6:	b085      	sub	sp, #20
    98f8:	4603      	mov	r3, r0
    98fa:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    98fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9902:	4a0b      	ldr	r2, [pc, #44]	; (9930 <FlexCAN_Ip_SetStartMode_Privileged+0x3c>)
    9904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9908:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    990a:	f002 fb93 	bl	c034 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>
    /* Enable Flexcan Module */
    pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    990e:	9b03      	ldr	r3, [sp, #12]
    9910:	681b      	ldr	r3, [r3, #0]
    9912:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    9916:	9b03      	ldr	r3, [sp, #12]
    9918:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    991a:	f002 fbb7 	bl	c08c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>

    return (FlexCAN_ExitFreezeMode(pBase));
    991e:	9803      	ldr	r0, [sp, #12]
    9920:	f000 ff94 	bl	a84c <FlexCAN_ExitFreezeMode>
    9924:	4603      	mov	r3, r0
}
    9926:	4618      	mov	r0, r3
    9928:	b005      	add	sp, #20
    992a:	f85d fb04 	ldr.w	pc, [sp], #4
    992e:	bf00      	nop
    9930:	0000e8f4 	.word	0x0000e8f4

00009934 <FlexCAN_Ip_SetStopMode_Privileged>:
 * Description   : Set the FlexCAN instance in STOP mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStopMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStopMode_Privileged(uint8 instance)
{
    9934:	b500      	push	{lr}
    9936:	b085      	sub	sp, #20
    9938:	4603      	mov	r3, r0
    993a:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    993e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9942:	4a0a      	ldr	r2, [pc, #40]	; (996c <FlexCAN_Ip_SetStopMode_Privileged+0x38>)
    9944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9948:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status;
    status = FlexCAN_EnterFreezeMode(pBase);
    994a:	9802      	ldr	r0, [sp, #8]
    994c:	f000 fef6 	bl	a73c <FlexCAN_EnterFreezeMode>
    9950:	9003      	str	r0, [sp, #12]
    if (FLEXCAN_STATUS_SUCCESS == status)
    9952:	9b03      	ldr	r3, [sp, #12]
    9954:	2b00      	cmp	r3, #0
    9956:	d103      	bne.n	9960 <FlexCAN_Ip_SetStopMode_Privileged+0x2c>

        /* TODO: reset MB status */

        /* TODO: disable all interrupt */

        status = FlexCAN_Disable(pBase);
    9958:	9802      	ldr	r0, [sp, #8]
    995a:	f000 ffb9 	bl	a8d0 <FlexCAN_Disable>
    995e:	9003      	str	r0, [sp, #12]
    }
    return status;
    9960:	9b03      	ldr	r3, [sp, #12]
}
    9962:	4618      	mov	r0, r3
    9964:	b005      	add	sp, #20
    9966:	f85d fb04 	ldr.w	pc, [sp], #4
    996a:	bf00      	nop
    996c:	0000e8f4 	.word	0x0000e8f4

00009970 <FlexCAN_Ip_SetRxMaskType_Privileged>:
 * mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxMaskType_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMaskType_Privileged(uint8 instance, Flexcan_Ip_RxMaskType type)
{
    9970:	b500      	push	{lr}
    9972:	b087      	sub	sp, #28
    9974:	4603      	mov	r3, r0
    9976:	9100      	str	r1, [sp, #0]
    9978:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    997c:	2300      	movs	r3, #0
    997e:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    9980:	2300      	movs	r3, #0
    9982:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9984:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9988:	4a1e      	ldr	r2, [pc, #120]	; (9a04 <FlexCAN_Ip_SetRxMaskType_Privileged+0x94>)
    998a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    998e:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    9990:	9803      	ldr	r0, [sp, #12]
    9992:	f7fd fefd 	bl	7790 <FlexCAN_IsEnabled>
    9996:	4603      	mov	r3, r0
    9998:	2b00      	cmp	r3, #0
    999a:	bf14      	ite	ne
    999c:	2301      	movne	r3, #1
    999e:	2300      	moveq	r3, #0
    99a0:	b2db      	uxtb	r3, r3
    99a2:	f083 0301 	eor.w	r3, r3, #1
    99a6:	b2db      	uxtb	r3, r3
    99a8:	f88d 300b 	strb.w	r3, [sp, #11]
    99ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
    99b0:	f003 0301 	and.w	r3, r3, #1
    99b4:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    99b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    99bc:	2b00      	cmp	r3, #0
    99be:	d003      	beq.n	99c8 <FlexCAN_Ip_SetRxMaskType_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    99c0:	9803      	ldr	r0, [sp, #12]
    99c2:	f000 ff07 	bl	a7d4 <FlexCAN_Enable>
    99c6:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    99c8:	9b05      	ldr	r3, [sp, #20]
    99ca:	2b00      	cmp	r3, #0
    99cc:	d107      	bne.n	99de <FlexCAN_Ip_SetRxMaskType_Privileged+0x6e>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    99ce:	f002 fb83 	bl	c0d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
        FlexCAN_SetRxMaskType(pBase, type);
    99d2:	9900      	ldr	r1, [sp, #0]
    99d4:	9803      	ldr	r0, [sp, #12]
    99d6:	f7fe f930 	bl	7c3a <FlexCAN_SetRxMaskType>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    99da:	f002 fba9 	bl	c130 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
    }

    if (TRUE == disabled)
    99de:	f89d 300b 	ldrb.w	r3, [sp, #11]
    99e2:	2b00      	cmp	r3, #0
    99e4:	d008      	beq.n	99f8 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
    {
        status = FlexCAN_Disable(pBase);
    99e6:	9803      	ldr	r0, [sp, #12]
    99e8:	f000 ff72 	bl	a8d0 <FlexCAN_Disable>
    99ec:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    99ee:	9b04      	ldr	r3, [sp, #16]
    99f0:	2b00      	cmp	r3, #0
    99f2:	d001      	beq.n	99f8 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
        {
            result = status;
    99f4:	9b04      	ldr	r3, [sp, #16]
    99f6:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    99f8:	9b05      	ldr	r3, [sp, #20]
}
    99fa:	4618      	mov	r0, r3
    99fc:	b007      	add	sp, #28
    99fe:	f85d fb04 	ldr.w	pc, [sp], #4
    9a02:	bf00      	nop
    9a04:	0000e8f4 	.word	0x0000e8f4

00009a08 <FlexCAN_Ip_SetBitrate_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrate_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrate_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
    9a08:	b500      	push	{lr}
    9a0a:	b087      	sub	sp, #28
    9a0c:	4603      	mov	r3, r0
    9a0e:	9100      	str	r1, [sp, #0]
    9a10:	f88d 3007 	strb.w	r3, [sp, #7]
    9a14:	4613      	mov	r3, r2
    9a16:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9a1a:	2300      	movs	r3, #0
    9a1c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    9a1e:	2300      	movs	r3, #0
    9a20:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9a22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9a26:	4a1c      	ldr	r2, [pc, #112]	; (9a98 <FlexCAN_Ip_SetBitrate_Privileged+0x90>)
    9a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a2c:	9303      	str	r3, [sp, #12]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    9a2e:	9b03      	ldr	r3, [sp, #12]
    9a30:	681b      	ldr	r3, [r3, #0]
    9a32:	0fdb      	lsrs	r3, r3, #31
    9a34:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_OFF)
    (void)enhExt;
#endif
    if (TRUE == disabled)
    9a38:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a3c:	2b00      	cmp	r3, #0
    9a3e:	d003      	beq.n	9a48 <FlexCAN_Ip_SetBitrate_Privileged+0x40>
    {
        result = FlexCAN_Enable(pBase);
    9a40:	9803      	ldr	r0, [sp, #12]
    9a42:	f000 fec7 	bl	a7d4 <FlexCAN_Enable>
    9a46:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    9a48:	9b05      	ldr	r3, [sp, #20]
    9a4a:	2b00      	cmp	r3, #0
    9a4c:	d112      	bne.n	9a74 <FlexCAN_Ip_SetBitrate_Privileged+0x6c>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    9a4e:	f002 fd2f 	bl	c4b0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
            FlexCAN_SetEnhancedNominalTimeSegments(pBase, bitrate);
        }
        else
#endif
        {
            if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    9a52:	9803      	ldr	r0, [sp, #12]
    9a54:	f7fe f830 	bl	7ab8 <FlexCAN_IsExCbtEnabled>
    9a58:	4603      	mov	r3, r0
    9a5a:	2b00      	cmp	r3, #0
    9a5c:	d004      	beq.n	9a68 <FlexCAN_Ip_SetBitrate_Privileged+0x60>
            {
                FlexCAN_SetExtendedTimeSegments(pBase, bitrate);
    9a5e:	9900      	ldr	r1, [sp, #0]
    9a60:	9803      	ldr	r0, [sp, #12]
    9a62:	f7fd ff7f 	bl	7964 <FlexCAN_SetExtendedTimeSegments>
    9a66:	e003      	b.n	9a70 <FlexCAN_Ip_SetBitrate_Privileged+0x68>
            }
            else
            {
                FlexCAN_SetTimeSegments(pBase, bitrate);
    9a68:	9900      	ldr	r1, [sp, #0]
    9a6a:	9803      	ldr	r0, [sp, #12]
    9a6c:	f7fd ff4e 	bl	790c <FlexCAN_SetTimeSegments>
            }
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    9a70:	f002 fd4a 	bl	c508 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
    }

    if (TRUE == disabled)
    9a74:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a78:	2b00      	cmp	r3, #0
    9a7a:	d008      	beq.n	9a8e <FlexCAN_Ip_SetBitrate_Privileged+0x86>
    {
        status = FlexCAN_Disable(pBase);
    9a7c:	9803      	ldr	r0, [sp, #12]
    9a7e:	f000 ff27 	bl	a8d0 <FlexCAN_Disable>
    9a82:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    9a84:	9b04      	ldr	r3, [sp, #16]
    9a86:	2b00      	cmp	r3, #0
    9a88:	d001      	beq.n	9a8e <FlexCAN_Ip_SetBitrate_Privileged+0x86>
        {
            result = status;
    9a8a:	9b04      	ldr	r3, [sp, #16]
    9a8c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    9a8e:	9b05      	ldr	r3, [sp, #20]
}
    9a90:	4618      	mov	r0, r3
    9a92:	b007      	add	sp, #28
    9a94:	f85d fb04 	ldr.w	pc, [sp], #4
    9a98:	0000e8f4 	.word	0x0000e8f4

00009a9c <FlexCAN_Ip_GetBitrate>:
 * or the arbitration phase of FD frames.
 *
 *END**************************************************************************/
 /* implements   FlexCAN_Ip_GetBitrate_Activity */
boolean FlexCAN_Ip_GetBitrate(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    9a9c:	b500      	push	{lr}
    9a9e:	b085      	sub	sp, #20
    9aa0:	4603      	mov	r3, r0
    9aa2:	9100      	str	r1, [sp, #0]
    9aa4:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9aa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9aac:	4a0d      	ldr	r2, [pc, #52]	; (9ae4 <FlexCAN_Ip_GetBitrate+0x48>)
    9aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ab2:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    9ab4:	2300      	movs	r3, #0
    9ab6:	f88d 300b 	strb.w	r3, [sp, #11]
        FlexCAN_GetEnhancedNominalTimeSegments(pBase, bitrate);
    }
    else
#endif
    {
        if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    9aba:	9803      	ldr	r0, [sp, #12]
    9abc:	f7fd fffc 	bl	7ab8 <FlexCAN_IsExCbtEnabled>
    9ac0:	4603      	mov	r3, r0
    9ac2:	2b00      	cmp	r3, #0
    9ac4:	d004      	beq.n	9ad0 <FlexCAN_Ip_GetBitrate+0x34>
        {
            /* Get the Extended time segments*/
            FlexCAN_GetExtendedTimeSegments(pBase, bitrate);
    9ac6:	9900      	ldr	r1, [sp, #0]
    9ac8:	9803      	ldr	r0, [sp, #12]
    9aca:	f7fd ff79 	bl	79c0 <FlexCAN_GetExtendedTimeSegments>
    9ace:	e003      	b.n	9ad8 <FlexCAN_Ip_GetBitrate+0x3c>
        }
        else
        {
            /* Get the time segments*/
            FlexCAN_GetTimeSegments(pBase, bitrate);
    9ad0:	9900      	ldr	r1, [sp, #0]
    9ad2:	9803      	ldr	r0, [sp, #12]
    9ad4:	f7fd ff9c 	bl	7a10 <FlexCAN_GetTimeSegments>
        }
    }
    return enhCbt;
    9ad8:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    9adc:	4618      	mov	r0, r3
    9ade:	b005      	add	sp, #20
    9ae0:	f85d fb04 	ldr.w	pc, [sp], #4
    9ae4:	0000e8f4 	.word	0x0000e8f4

00009ae8 <FlexCAN_Ip_ClearTDCFail>:
 * Description   : This function clear the TDC Fail flag.
 *
 *END**************************************************************************/
/* implements   FlexCAN_Ip_ClearTDCFail_Activity */
void FlexCAN_Ip_ClearTDCFail(uint8 u8Instance)
{
    9ae8:	b500      	push	{lr}
    9aea:	b085      	sub	sp, #20
    9aec:	4603      	mov	r3, r0
    9aee:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9af2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9af6:	4a0a      	ldr	r2, [pc, #40]	; (9b20 <FlexCAN_Ip_ClearTDCFail+0x38>)
    9af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9afc:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    9afe:	f002 fb3d 	bl	c17c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
        pBase->ETDC |=  FLEXCAN_ETDC_ETDCFAIL_MASK;
    }
    else
#endif
    {
        pBase->FDCTRL |= FLEXCAN_FDCTRL_TDCFAIL_MASK;
    9b02:	9b03      	ldr	r3, [sp, #12]
    9b04:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    9b08:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    9b0c:	9b03      	ldr	r3, [sp, #12]
    9b0e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    9b12:	f002 fb5f 	bl	c1d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
}
    9b16:	bf00      	nop
    9b18:	b005      	add	sp, #20
    9b1a:	f85d fb04 	ldr.w	pc, [sp], #4
    9b1e:	bf00      	nop
    9b20:	0000e8f4 	.word	0x0000e8f4

00009b24 <FlexCAN_Ip_GetTDCFail>:
 *
 *END**************************************************************************/

/* implements    FlexCAN_Ip_GetTDCFail_Activity */
boolean FlexCAN_Ip_GetTDCFail(uint8 u8Instance)
{
    9b24:	b084      	sub	sp, #16
    9b26:	4603      	mov	r3, r0
    9b28:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean value=FALSE;
    9b2c:	2300      	movs	r3, #0
    9b2e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9b32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b36:	4a0a      	ldr	r2, [pc, #40]	; (9b60 <FlexCAN_Ip_GetTDCFail+0x3c>)
    9b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b3c:	9302      	str	r3, [sp, #8]
        value = ((pBase->ETDC & FLEXCAN_ETDC_ETDCFAIL_MASK) == FLEXCAN_ETDC_ETDCFAIL_MASK) ? TRUE : FALSE;
    }
    else
#endif
    {
        value = ((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCFAIL_MASK) == FLEXCAN_FDCTRL_TDCFAIL_MASK) ? TRUE : FALSE;
    9b3e:	9b02      	ldr	r3, [sp, #8]
    9b40:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    9b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    9b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    9b4c:	bf0c      	ite	eq
    9b4e:	2301      	moveq	r3, #1
    9b50:	2300      	movne	r3, #0
    9b52:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    9b56:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9b5a:	4618      	mov	r0, r3
    9b5c:	b004      	add	sp, #16
    9b5e:	4770      	bx	lr
    9b60:	0000e8f4 	.word	0x0000e8f4

00009b64 <FlexCAN_Ip_GetTDCValue>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_GetTDCValue_Activity */
uint8 FlexCAN_Ip_GetTDCValue(uint8 u8Instance)
{
    9b64:	b084      	sub	sp, #16
    9b66:	4603      	mov	r3, r0
    9b68:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 value = 0;
    9b6c:	2300      	movs	r3, #0
    9b6e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9b72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b76:	4a08      	ldr	r2, [pc, #32]	; (9b98 <FlexCAN_Ip_GetTDCValue+0x34>)
    9b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b7c:	9302      	str	r3, [sp, #8]
        value = (uint8)((pBase->ETDC& FLEXCAN_ETDC_ETDCVAL_MASK) >> FLEXCAN_ETDC_ETDCVAL_SHIFT);
    }
    else
#endif
    {
        value = (uint8)((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCVAL_MASK) >> FLEXCAN_FDCTRL_TDCVAL_SHIFT);
    9b7e:	9b02      	ldr	r3, [sp, #8]
    9b80:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    9b84:	b2db      	uxtb	r3, r3
    9b86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9b8a:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    9b8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9b92:	4618      	mov	r0, r3
    9b94:	b004      	add	sp, #16
    9b96:	4770      	bx	lr
    9b98:	0000e8f4 	.word	0x0000e8f4

00009b9c <FlexCAN_Ip_SetBitrateCbt_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrateCbt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrateCbt_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
    9b9c:	b500      	push	{lr}
    9b9e:	b087      	sub	sp, #28
    9ba0:	4603      	mov	r3, r0
    9ba2:	9100      	str	r1, [sp, #0]
    9ba4:	f88d 3007 	strb.w	r3, [sp, #7]
    9ba8:	4613      	mov	r3, r2
    9baa:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9bae:	2300      	movs	r3, #0
    9bb0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    9bb2:	2300      	movs	r3, #0
    9bb4:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9bb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9bba:	4a1e      	ldr	r2, [pc, #120]	; (9c34 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x98>)
    9bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bc0:	9303      	str	r3, [sp, #12]
    boolean fd_enable = FlexCAN_IsFDEnabled(pBase);
    9bc2:	9803      	ldr	r0, [sp, #12]
    9bc4:	f7fd ffaf 	bl	7b26 <FlexCAN_IsFDEnabled>
    9bc8:	4603      	mov	r3, r0
    9bca:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    9bce:	9b03      	ldr	r3, [sp, #12]
    9bd0:	681b      	ldr	r3, [r3, #0]
    9bd2:	0fdb      	lsrs	r3, r3, #31
    9bd4:	f88d 300a 	strb.w	r3, [sp, #10]

    if (TRUE == disabled)
    9bd8:	f89d 300a 	ldrb.w	r3, [sp, #10]
    9bdc:	2b00      	cmp	r3, #0
    9bde:	d003      	beq.n	9be8 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x4c>
    {
        result = FlexCAN_Enable(pBase);
    9be0:	9803      	ldr	r0, [sp, #12]
    9be2:	f000 fdf7 	bl	a7d4 <FlexCAN_Enable>
    9be6:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    9be8:	9b05      	ldr	r3, [sp, #20]
    9bea:	2b00      	cmp	r3, #0
    9bec:	d10f      	bne.n	9c0e <FlexCAN_Ip_SetBitrateCbt_Privileged+0x72>
    {
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_ON)
        boolean enhCbt = FlexCAN_IsEnhCbtEnabled(pBase);
#endif
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    9bee:	f002 fcb1 	bl	c554 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
        FlexCAN_SetFDEnabled(pBase, fd_enable, bitRateSwitch);
    9bf2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9bf6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9bfa:	4619      	mov	r1, r3
    9bfc:	9803      	ldr	r0, [sp, #12]
    9bfe:	f7fd fdd1 	bl	77a4 <FlexCAN_SetFDEnabled>
        }
        else
#endif
        {
            /* Set time segments*/
            FlexCAN_SetFDTimeSegments(pBase, bitrate);
    9c02:	9900      	ldr	r1, [sp, #0]
    9c04:	9803      	ldr	r0, [sp, #12]
    9c06:	f7fd fe4c 	bl	78a2 <FlexCAN_SetFDTimeSegments>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    9c0a:	f002 fccf 	bl	c5ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
    }

    if (TRUE == disabled)
    9c0e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    9c12:	2b00      	cmp	r3, #0
    9c14:	d008      	beq.n	9c28 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    9c16:	9803      	ldr	r0, [sp, #12]
    9c18:	f000 fe5a 	bl	a8d0 <FlexCAN_Disable>
    9c1c:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    9c1e:	9b04      	ldr	r3, [sp, #16]
    9c20:	2b00      	cmp	r3, #0
    9c22:	d001      	beq.n	9c28 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
        {
            result = status;
    9c24:	9b04      	ldr	r3, [sp, #16]
    9c26:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    9c28:	9b05      	ldr	r3, [sp, #20]
}
    9c2a:	4618      	mov	r0, r3
    9c2c:	b007      	add	sp, #28
    9c2e:	f85d fb04 	ldr.w	pc, [sp], #4
    9c32:	bf00      	nop
    9c34:	0000e8f4 	.word	0x0000e8f4

00009c38 <FlexCAN_Ip_GetBitrateFD>:
 * of FD frames.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBitrateFD_Activity */
boolean FlexCAN_Ip_GetBitrateFD(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    9c38:	b500      	push	{lr}
    9c3a:	b085      	sub	sp, #20
    9c3c:	4603      	mov	r3, r0
    9c3e:	9100      	str	r1, [sp, #0]
    9c40:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9c44:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c48:	4a08      	ldr	r2, [pc, #32]	; (9c6c <FlexCAN_Ip_GetBitrateFD+0x34>)
    9c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c4e:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    9c50:	2300      	movs	r3, #0
    9c52:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    else
#endif
    {
        /* Get the time segments*/
        FlexCAN_GetFDTimeSegments(pBase, bitrate);
    9c56:	9900      	ldr	r1, [sp, #0]
    9c58:	9803      	ldr	r0, [sp, #12]
    9c5a:	f7fd ff00 	bl	7a5e <FlexCAN_GetFDTimeSegments>
    }
    return enhCbt;
    9c5e:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    9c62:	4618      	mov	r0, r3
    9c64:	b005      	add	sp, #20
    9c66:	f85d fb04 	ldr.w	pc, [sp], #4
    9c6a:	bf00      	nop
    9c6c:	0000e8f4 	.word	0x0000e8f4

00009c70 <FlexCAN_Ip_SetTDCOffset_Privileged>:
 * the Transceiver Delay Compensation Offset.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTDCOffset_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTDCOffset_Privileged(uint8 instance, boolean enable, uint8 offset)
{
    9c70:	b500      	push	{lr}
    9c72:	b087      	sub	sp, #28
    9c74:	4603      	mov	r3, r0
    9c76:	f88d 3007 	strb.w	r3, [sp, #7]
    9c7a:	460b      	mov	r3, r1
    9c7c:	f88d 3006 	strb.w	r3, [sp, #6]
    9c80:	4613      	mov	r3, r2
    9c82:	f88d 3005 	strb.w	r3, [sp, #5]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9c86:	2300      	movs	r3, #0
    9c88:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    9c8a:	2300      	movs	r3, #0
    9c8c:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9c8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c92:	4a20      	ldr	r2, [pc, #128]	; (9d14 <FlexCAN_Ip_SetTDCOffset_Privileged+0xa4>)
    9c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c98:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    9c9a:	9803      	ldr	r0, [sp, #12]
    9c9c:	f7fd fd78 	bl	7790 <FlexCAN_IsEnabled>
    9ca0:	4603      	mov	r3, r0
    9ca2:	2b00      	cmp	r3, #0
    9ca4:	bf14      	ite	ne
    9ca6:	2301      	movne	r3, #1
    9ca8:	2300      	moveq	r3, #0
    9caa:	b2db      	uxtb	r3, r3
    9cac:	f083 0301 	eor.w	r3, r3, #1
    9cb0:	b2db      	uxtb	r3, r3
    9cb2:	f88d 300b 	strb.w	r3, [sp, #11]
    9cb6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9cba:	f003 0301 	and.w	r3, r3, #1
    9cbe:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    9cc2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9cc6:	2b00      	cmp	r3, #0
    9cc8:	d003      	beq.n	9cd2 <FlexCAN_Ip_SetTDCOffset_Privileged+0x62>
    {
        result = FlexCAN_Enable(pBase);
    9cca:	9803      	ldr	r0, [sp, #12]
    9ccc:	f000 fd82 	bl	a7d4 <FlexCAN_Enable>
    9cd0:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    9cd2:	9b05      	ldr	r3, [sp, #20]
    9cd4:	2b00      	cmp	r3, #0
    9cd6:	d10b      	bne.n	9cf0 <FlexCAN_Ip_SetTDCOffset_Privileged+0x80>
    {
        /* Check if enhaced CBT is Enabled */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    9cd8:	f002 fc8e 	bl	c5f8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        }
        else
#endif
        {
            /* Enable/Disable TDC and set the TDC Offset */
            FlexCAN_SetTDCOffset(pBase, enable, offset);
    9cdc:	f89d 2005 	ldrb.w	r2, [sp, #5]
    9ce0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9ce4:	4619      	mov	r1, r3
    9ce6:	9803      	ldr	r0, [sp, #12]
    9ce8:	f7fd fd2b 	bl	7742 <FlexCAN_SetTDCOffset>
        }
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    9cec:	f002 fcb0 	bl	c650 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        /* Check if enhaced CBT is Enabled */
    }

    if (TRUE == disabled)
    9cf0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9cf4:	2b00      	cmp	r3, #0
    9cf6:	d008      	beq.n	9d0a <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
    {
        status = FlexCAN_Disable(pBase);
    9cf8:	9803      	ldr	r0, [sp, #12]
    9cfa:	f000 fde9 	bl	a8d0 <FlexCAN_Disable>
    9cfe:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    9d00:	9b04      	ldr	r3, [sp, #16]
    9d02:	2b00      	cmp	r3, #0
    9d04:	d001      	beq.n	9d0a <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
        {
            result = status;
    9d06:	9b04      	ldr	r3, [sp, #16]
    9d08:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    9d0a:	9b05      	ldr	r3, [sp, #20]
}
    9d0c:	4618      	mov	r0, r3
    9d0e:	b007      	add	sp, #28
    9d10:	f85d fb04 	ldr.w	pc, [sp], #4
    9d14:	0000e8f4 	.word	0x0000e8f4

00009d18 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>:
 * be delayed from the first bit of CRC field on CAN bus.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTxArbitrationStartDelay_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged(uint8 instance,  uint8 value)
{
    9d18:	b500      	push	{lr}
    9d1a:	b087      	sub	sp, #28
    9d1c:	4603      	mov	r3, r0
    9d1e:	460a      	mov	r2, r1
    9d20:	f88d 3007 	strb.w	r3, [sp, #7]
    9d24:	4613      	mov	r3, r2
    9d26:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9d2a:	2300      	movs	r3, #0
    9d2c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    9d2e:	2300      	movs	r3, #0
    9d30:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9d32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9d36:	4a1f      	ldr	r2, [pc, #124]	; (9db4 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x9c>)
    9d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d3c:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    9d3e:	9803      	ldr	r0, [sp, #12]
    9d40:	f7fd fd26 	bl	7790 <FlexCAN_IsEnabled>
    9d44:	4603      	mov	r3, r0
    9d46:	2b00      	cmp	r3, #0
    9d48:	bf14      	ite	ne
    9d4a:	2301      	movne	r3, #1
    9d4c:	2300      	moveq	r3, #0
    9d4e:	b2db      	uxtb	r3, r3
    9d50:	f083 0301 	eor.w	r3, r3, #1
    9d54:	b2db      	uxtb	r3, r3
    9d56:	f88d 300b 	strb.w	r3, [sp, #11]
    9d5a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9d5e:	f003 0301 	and.w	r3, r3, #1
    9d62:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    9d66:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9d6a:	2b00      	cmp	r3, #0
    9d6c:	d003      	beq.n	9d76 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    9d6e:	9803      	ldr	r0, [sp, #12]
    9d70:	f000 fd30 	bl	a7d4 <FlexCAN_Enable>
    9d74:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    9d76:	9b05      	ldr	r3, [sp, #20]
    9d78:	2b00      	cmp	r3, #0
    9d7a:	d109      	bne.n	9d90 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    9d7c:	f002 fc8e 	bl	c69c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
        FlexCAN_SetTxArbitrationStartDelay(pBase, value);
    9d80:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9d84:	4619      	mov	r1, r3
    9d86:	9803      	ldr	r0, [sp, #12]
    9d88:	f7fd ff43 	bl	7c12 <FlexCAN_SetTxArbitrationStartDelay>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    9d8c:	f002 fcb2 	bl	c6f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
    }

    if (TRUE == disabled)
    9d90:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9d94:	2b00      	cmp	r3, #0
    9d96:	d008      	beq.n	9daa <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    9d98:	9803      	ldr	r0, [sp, #12]
    9d9a:	f000 fd99 	bl	a8d0 <FlexCAN_Disable>
    9d9e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    9da0:	9b04      	ldr	r3, [sp, #16]
    9da2:	2b00      	cmp	r3, #0
    9da4:	d001      	beq.n	9daa <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
        {
            result = status;
    9da6:	9b04      	ldr	r3, [sp, #16]
    9da8:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    9daa:	9b05      	ldr	r3, [sp, #20]
}
    9dac:	4618      	mov	r0, r3
    9dae:	b007      	add	sp, #28
    9db0:	f85d fb04 	ldr.w	pc, [sp], #4
    9db4:	0000e8f4 	.word	0x0000e8f4

00009db8 <FlexCAN_Ip_GetBuffStatusFlag>:
 * In case of a complete operation this flag is set.
 * In case msgBuff is 255 will return Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBuffStatusFlag_Activity */
boolean FlexCAN_Ip_GetBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    9db8:	b500      	push	{lr}
    9dba:	b085      	sub	sp, #20
    9dbc:	4603      	mov	r3, r0
    9dbe:	460a      	mov	r2, r1
    9dc0:	f88d 3007 	strb.w	r3, [sp, #7]
    9dc4:	4613      	mov	r3, r2
    9dc6:	f88d 3006 	strb.w	r3, [sp, #6]
    boolean returnResult;
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9dca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9dce:	4a0b      	ldr	r2, [pc, #44]	; (9dfc <FlexCAN_Ip_GetBuffStatusFlag+0x44>)
    9dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dd4:	9303      	str	r3, [sp, #12]
        returnResult = ((1U == FlexCAN_GetEnhancedRxFIFOStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW)) ? TRUE : FALSE);
    }
    else
#endif
    {
        returnResult = ((1U == FlexCAN_GetBuffStatusFlag(pBase, msgBuffIdx)) ? TRUE : FALSE);
    9dd6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9dda:	4619      	mov	r1, r3
    9ddc:	9803      	ldr	r0, [sp, #12]
    9dde:	f7fd fd44 	bl	786a <FlexCAN_GetBuffStatusFlag>
    9de2:	4603      	mov	r3, r0
    9de4:	2b01      	cmp	r3, #1
    9de6:	bf0c      	ite	eq
    9de8:	2301      	moveq	r3, #1
    9dea:	2300      	movne	r3, #0
    9dec:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    return returnResult;
    9df0:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    9df4:	4618      	mov	r0, r3
    9df6:	b005      	add	sp, #20
    9df8:	f85d fb04 	ldr.w	pc, [sp], #4
    9dfc:	0000e8f4 	.word	0x0000e8f4

00009e00 <FlexCAN_Ip_ClearBuffStatusFlag>:
 * Description   : Clear FlexCAN Message Buffer Status Flag.
 * In case msgBuff is 255 will clear Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearBuffStatusFlag_Activity */
void FlexCAN_Ip_ClearBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    9e00:	b500      	push	{lr}
    9e02:	b085      	sub	sp, #20
    9e04:	4603      	mov	r3, r0
    9e06:	460a      	mov	r2, r1
    9e08:	f88d 3007 	strb.w	r3, [sp, #7]
    9e0c:	4613      	mov	r3, r2
    9e0e:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9e12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e16:	4a07      	ldr	r2, [pc, #28]	; (9e34 <FlexCAN_Ip_ClearBuffStatusFlag+0x34>)
    9e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e1c:	9303      	str	r3, [sp, #12]
        FlexCAN_ClearEnhancedRxFifoIntStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
    }
    else
#endif
    {
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, msgBuffIdx);
    9e1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9e22:	4619      	mov	r1, r3
    9e24:	9803      	ldr	r0, [sp, #12]
    9e26:	f7fd fd0d 	bl	7844 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }
}
    9e2a:	bf00      	nop
    9e2c:	b005      	add	sp, #20
    9e2e:	f85d fb04 	ldr.w	pc, [sp], #4
    9e32:	bf00      	nop
    9e34:	0000e8f4 	.word	0x0000e8f4

00009e38 <FlexCAN_Ip_EnableInterrupts_Privileged>:
 * Description   : Enable all mb interrupts configured.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnableInterrupts_Privileged(uint8 u8Instance)
{
    9e38:	b500      	push	{lr}
    9e3a:	b087      	sub	sp, #28
    9e3c:	4603      	mov	r3, r0
    9e3e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9e42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e46:	4a11      	ldr	r2, [pc, #68]	; (9e8c <FlexCAN_Ip_EnableInterrupts_Privileged+0x54>)
    9e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e4c:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    9e4e:	2301      	movs	r3, #1
    9e50:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    9e52:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e56:	4a0e      	ldr	r2, [pc, #56]	; (9e90 <FlexCAN_Ip_EnableInterrupts_Privileged+0x58>)
    9e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e5c:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    9e5e:	9804      	ldr	r0, [sp, #16]
    9e60:	f7fd fc96 	bl	7790 <FlexCAN_IsEnabled>
    9e64:	4603      	mov	r3, r0
    9e66:	2b00      	cmp	r3, #0
    9e68:	d00b      	beq.n	9e82 <FlexCAN_Ip_EnableInterrupts_Privileged+0x4a>
    {
        FlexCAN_EnableInterrupts(pBase, u8Instance);
    9e6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e6e:	4619      	mov	r1, r3
    9e70:	9804      	ldr	r0, [sp, #16]
    9e72:	f000 ffe1 	bl	ae38 <FlexCAN_EnableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, TRUE);
            }
        }
    #endif
        state->isIntActive = TRUE;
    9e76:	9b03      	ldr	r3, [sp, #12]
    9e78:	2201      	movs	r2, #1
    9e7a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    9e7e:	2300      	movs	r3, #0
    9e80:	9305      	str	r3, [sp, #20]
    }

    return result;
    9e82:	9b05      	ldr	r3, [sp, #20]
}
    9e84:	4618      	mov	r0, r3
    9e86:	b007      	add	sp, #28
    9e88:	f85d fb04 	ldr.w	pc, [sp], #4
    9e8c:	0000e8f4 	.word	0x0000e8f4
    9e90:	1fff8f9c 	.word	0x1fff8f9c

00009e94 <FlexCAN_Ip_DisableInterrupts_Privileged>:
 * Description   : Enable all interrupts configured.
 *
 *END**************************************************************************/
 /* implements FlexCAN_Ip_DisableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_DisableInterrupts_Privileged(uint8 u8Instance)
{
    9e94:	b500      	push	{lr}
    9e96:	b087      	sub	sp, #28
    9e98:	4603      	mov	r3, r0
    9e9a:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9e9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9ea2:	4a10      	ldr	r2, [pc, #64]	; (9ee4 <FlexCAN_Ip_DisableInterrupts_Privileged+0x50>)
    9ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ea8:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    9eaa:	2301      	movs	r3, #1
    9eac:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    9eae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9eb2:	4a0d      	ldr	r2, [pc, #52]	; (9ee8 <FlexCAN_Ip_DisableInterrupts_Privileged+0x54>)
    9eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9eb8:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    9eba:	9804      	ldr	r0, [sp, #16]
    9ebc:	f7fd fc68 	bl	7790 <FlexCAN_IsEnabled>
    9ec0:	4603      	mov	r3, r0
    9ec2:	2b00      	cmp	r3, #0
    9ec4:	d008      	beq.n	9ed8 <FlexCAN_Ip_DisableInterrupts_Privileged+0x44>
    {
        FlexCAN_DisableInterrupts(pBase);
    9ec6:	9804      	ldr	r0, [sp, #16]
    9ec8:	f000 ffae 	bl	ae28 <FlexCAN_DisableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, FALSE);
            }
        }
#endif
        state->isIntActive = FALSE;
    9ecc:	9b03      	ldr	r3, [sp, #12]
    9ece:	2200      	movs	r2, #0
    9ed0:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    9ed4:	2300      	movs	r3, #0
    9ed6:	9305      	str	r3, [sp, #20]
    }

    return result;
    9ed8:	9b05      	ldr	r3, [sp, #20]
}
    9eda:	4618      	mov	r0, r3
    9edc:	b007      	add	sp, #28
    9ede:	f85d fb04 	ldr.w	pc, [sp], #4
    9ee2:	bf00      	nop
    9ee4:	0000e8f4 	.word	0x0000e8f4
    9ee8:	1fff8f9c 	.word	0x1fff8f9c

00009eec <FlexCAN_Ip_SetErrorInt_Privileged>:
 * Description   : Enable\Disable Error or BusOff Interrupt
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetErrorInt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetErrorInt_Privileged(uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
    9eec:	b500      	push	{lr}
    9eee:	b087      	sub	sp, #28
    9ef0:	4603      	mov	r3, r0
    9ef2:	9100      	str	r1, [sp, #0]
    9ef4:	f88d 3007 	strb.w	r3, [sp, #7]
    9ef8:	4613      	mov	r3, r2
    9efa:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9efe:	2300      	movs	r3, #0
    9f00:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    9f02:	2300      	movs	r3, #0
    9f04:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9f0a:	4a3a      	ldr	r2, [pc, #232]	; (9ff4 <FlexCAN_Ip_SetErrorInt_Privileged+0x108>)
    9f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f10:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    9f12:	9803      	ldr	r0, [sp, #12]
    9f14:	f7fd fc3c 	bl	7790 <FlexCAN_IsEnabled>
    9f18:	4603      	mov	r3, r0
    9f1a:	2b00      	cmp	r3, #0
    9f1c:	bf14      	ite	ne
    9f1e:	2301      	movne	r3, #1
    9f20:	2300      	moveq	r3, #0
    9f22:	b2db      	uxtb	r3, r3
    9f24:	f083 0301 	eor.w	r3, r3, #1
    9f28:	b2db      	uxtb	r3, r3
    9f2a:	f88d 300b 	strb.w	r3, [sp, #11]
    9f2e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9f32:	f003 0301 	and.w	r3, r3, #1
    9f36:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    9f3a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9f3e:	2b00      	cmp	r3, #0
    9f40:	d003      	beq.n	9f4a <FlexCAN_Ip_SetErrorInt_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    9f42:	9803      	ldr	r0, [sp, #12]
    9f44:	f000 fc46 	bl	a7d4 <FlexCAN_Enable>
    9f48:	9005      	str	r0, [sp, #20]
    }

    if (FLEXCAN_STATUS_SUCCESS == result)
    9f4a:	9b05      	ldr	r3, [sp, #20]
    9f4c:	2b00      	cmp	r3, #0
    9f4e:	d13c      	bne.n	9fca <FlexCAN_Ip_SetErrorInt_Privileged+0xde>
    9f50:	9b00      	ldr	r3, [sp, #0]
    9f52:	2b04      	cmp	r3, #4
    9f54:	d83b      	bhi.n	9fce <FlexCAN_Ip_SetErrorInt_Privileged+0xe2>
    9f56:	a201      	add	r2, pc, #4	; (adr r2, 9f5c <FlexCAN_Ip_SetErrorInt_Privileged+0x70>)
    9f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9f5c:	00009fa7 	.word	0x00009fa7
    9f60:	00009fb9 	.word	0x00009fb9
    9f64:	00009f83 	.word	0x00009f83
    9f68:	00009f95 	.word	0x00009f95
    9f6c:	00009f71 	.word	0x00009f71
    {
        switch (type)
        {
            case FLEXCAN_IP_INT_BUSOFF:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_BUSOFF, enable);
    9f70:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f74:	461a      	mov	r2, r3
    9f76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    9f7a:	9803      	ldr	r0, [sp, #12]
    9f7c:	f000 fce8 	bl	a950 <FlexCAN_SetErrIntCmd>
                break;
    9f80:	e026      	b.n	9fd0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR, enable);
    9f82:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f86:	461a      	mov	r2, r3
    9f88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    9f8c:	9803      	ldr	r0, [sp, #12]
    9f8e:	f000 fcdf 	bl	a950 <FlexCAN_SetErrIntCmd>
                break;
    9f92:	e01d      	b.n	9fd0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR_FAST :
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR_FAST, enable);
    9f94:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f98:	461a      	mov	r2, r3
    9f9a:	f244 0101 	movw	r1, #16385	; 0x4001
    9f9e:	9803      	ldr	r0, [sp, #12]
    9fa0:	f000 fcd6 	bl	a950 <FlexCAN_SetErrIntCmd>
                break;
    9fa4:	e014      	b.n	9fd0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_RX_WARNING, enable);
    9fa6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9faa:	461a      	mov	r2, r3
    9fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
    9fb0:	9803      	ldr	r0, [sp, #12]
    9fb2:	f000 fccd 	bl	a950 <FlexCAN_SetErrIntCmd>
                }
                break;
    9fb6:	e00b      	b.n	9fd0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_TX_WARNING, enable);
    9fb8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9fbc:	461a      	mov	r2, r3
    9fbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
    9fc2:	9803      	ldr	r0, [sp, #12]
    9fc4:	f000 fcc4 	bl	a950 <FlexCAN_SetErrIntCmd>
                }
                break;
    9fc8:	e002      	b.n	9fd0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    /* Should not get here */
                #endif
                break;
            }
        }
    }
    9fca:	bf00      	nop
    9fcc:	e000      	b.n	9fd0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                break;
    9fce:	bf00      	nop

    if (TRUE == disabled)
    9fd0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9fd4:	2b00      	cmp	r3, #0
    9fd6:	d008      	beq.n	9fea <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
    {
        status = FlexCAN_Disable(pBase);
    9fd8:	9803      	ldr	r0, [sp, #12]
    9fda:	f000 fc79 	bl	a8d0 <FlexCAN_Disable>
    9fde:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    9fe0:	9b04      	ldr	r3, [sp, #16]
    9fe2:	2b00      	cmp	r3, #0
    9fe4:	d001      	beq.n	9fea <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
        {
            result = status;
    9fe6:	9b04      	ldr	r3, [sp, #16]
    9fe8:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    9fea:	9b05      	ldr	r3, [sp, #20]
}
    9fec:	4618      	mov	r0, r3
    9fee:	b007      	add	sp, #28
    9ff0:	f85d fb04 	ldr.w	pc, [sp], #4
    9ff4:	0000e8f4 	.word	0x0000e8f4

00009ff8 <FlexCAN_Ip_AbortTransfer>:
 * receiver.
 *
 *END**************************************************************************/
/* implements    FlexCAN_Ip_AbortTransfer_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_AbortTransfer(uint8 u8Instance, uint8 mb_idx)
{
    9ff8:	b500      	push	{lr}
    9ffa:	b087      	sub	sp, #28
    9ffc:	4603      	mov	r3, r0
    9ffe:	460a      	mov	r2, r1
    a000:	f88d 3007 	strb.w	r3, [sp, #7]
    a004:	4613      	mov	r3, r2
    a006:	f88d 3006 	strb.w	r3, [sp, #6]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
        DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
    #endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    a00a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a00e:	4a27      	ldr	r2, [pc, #156]	; (a0ac <FlexCAN_Ip_AbortTransfer+0xb4>)
    a010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a014:	9304      	str	r3, [sp, #16]
#if ((FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON))
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
#else
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    a016:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a01a:	4a25      	ldr	r2, [pc, #148]	; (a0b0 <FlexCAN_Ip_AbortTransfer+0xb8>)
    a01c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a020:	9303      	str	r3, [sp, #12]
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON) */
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a022:	2300      	movs	r3, #0
    a024:	9305      	str	r3, [sp, #20]

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    a026:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a02a:	2b1f      	cmp	r3, #31
    a02c:	d838      	bhi.n	a0a0 <FlexCAN_Ip_AbortTransfer+0xa8>
    {

    if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    a02e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a032:	9a03      	ldr	r2, [sp, #12]
    a034:	011b      	lsls	r3, r3, #4
    a036:	4413      	add	r3, r2
    a038:	3304      	adds	r3, #4
    a03a:	681b      	ldr	r3, [r3, #0]
    a03c:	2b00      	cmp	r3, #0
    a03e:	d102      	bne.n	a046 <FlexCAN_Ip_AbortTransfer+0x4e>
    {
        result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    a040:	2305      	movs	r3, #5
    a042:	9305      	str	r3, [sp, #20]
    a044:	e02c      	b.n	a0a0 <FlexCAN_Ip_AbortTransfer+0xa8>
    }
    else
    {
        FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, mb_idx, state->isIntActive);
    a046:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a04a:	9b03      	ldr	r3, [sp, #12]
    a04c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a050:	f89d 1007 	ldrb.w	r1, [sp, #7]
    a054:	9804      	ldr	r0, [sp, #16]
    a056:	f000 feb3 	bl	adc0 <FLEXCAN_ClearMsgBuffIntCmd>
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    a05a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a05e:	9a03      	ldr	r2, [sp, #12]
    a060:	011b      	lsls	r3, r3, #4
    a062:	4413      	add	r3, r2
    a064:	3304      	adds	r3, #4
    a066:	681b      	ldr	r3, [r3, #0]
    a068:	2b02      	cmp	r3, #2
    a06a:	d108      	bne.n	a07e <FlexCAN_Ip_AbortTransfer+0x86>
        {
            result = FlexCAN_AbortTxTransfer(u8Instance, mb_idx);
    a06c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a070:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a074:	4611      	mov	r1, r2
    a076:	4618      	mov	r0, r3
    a078:	f7fe fabc 	bl	85f4 <FlexCAN_AbortTxTransfer>
    a07c:	9005      	str	r0, [sp, #20]
        }

        if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    a07e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a082:	9a03      	ldr	r2, [sp, #12]
    a084:	011b      	lsls	r3, r3, #4
    a086:	4413      	add	r3, r2
    a088:	3304      	adds	r3, #4
    a08a:	681b      	ldr	r3, [r3, #0]
    a08c:	2b01      	cmp	r3, #1
    a08e:	d107      	bne.n	a0a0 <FlexCAN_Ip_AbortTransfer+0xa8>
        {
            FlexCAN_AbortRxTransfer(u8Instance, mb_idx);
    a090:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a094:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a098:	4611      	mov	r1, r2
    a09a:	4618      	mov	r0, r3
    a09c:	f7fe fb34 	bl	8708 <FlexCAN_AbortRxTransfer>
        }
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
#endif /* if FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return result;
    a0a0:	9b05      	ldr	r3, [sp, #20]
}
    a0a2:	4618      	mov	r0, r3
    a0a4:	b007      	add	sp, #28
    a0a6:	f85d fb04 	ldr.w	pc, [sp], #4
    a0aa:	bf00      	nop
    a0ac:	0000e8f4 	.word	0x0000e8f4
    a0b0:	1fff8f9c 	.word	0x1fff8f9c

0000a0b4 <FlexCAN_Ip_SetRxMb14Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb14Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb14Mask_Privileged(uint8 instance, uint32 mask)
{
    a0b4:	b500      	push	{lr}
    a0b6:	b087      	sub	sp, #28
    a0b8:	4603      	mov	r3, r0
    a0ba:	9100      	str	r1, [sp, #0]
    a0bc:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a0c0:	2300      	movs	r3, #0
    a0c2:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a0c4:	2300      	movs	r3, #0
    a0c6:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a0c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a0cc:	4a1b      	ldr	r2, [pc, #108]	; (a13c <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x88>)
    a0ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0d2:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a0d4:	9803      	ldr	r0, [sp, #12]
    a0d6:	f7fd fb5b 	bl	7790 <FlexCAN_IsEnabled>
    a0da:	4603      	mov	r3, r0
    a0dc:	2b00      	cmp	r3, #0
    a0de:	bf14      	ite	ne
    a0e0:	2301      	movne	r3, #1
    a0e2:	2300      	moveq	r3, #0
    a0e4:	b2db      	uxtb	r3, r3
    a0e6:	f083 0301 	eor.w	r3, r3, #1
    a0ea:	b2db      	uxtb	r3, r3
    a0ec:	f88d 300b 	strb.w	r3, [sp, #11]
    a0f0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a0f4:	f003 0301 	and.w	r3, r3, #1
    a0f8:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a0fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a100:	2b00      	cmp	r3, #0
    a102:	d003      	beq.n	a10c <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    a104:	9803      	ldr	r0, [sp, #12]
    a106:	f000 fb65 	bl	a7d4 <FlexCAN_Enable>
    a10a:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    a10c:	9b05      	ldr	r3, [sp, #20]
    a10e:	2b00      	cmp	r3, #0
    a110:	d102      	bne.n	a118 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x64>
    {
        pBase->RX14MASK = mask;
    a112:	9b03      	ldr	r3, [sp, #12]
    a114:	9a00      	ldr	r2, [sp, #0]
    a116:	615a      	str	r2, [r3, #20]
    }
    if (TRUE == disabled)
    a118:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a11c:	2b00      	cmp	r3, #0
    a11e:	d008      	beq.n	a132 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    a120:	9803      	ldr	r0, [sp, #12]
    a122:	f000 fbd5 	bl	a8d0 <FlexCAN_Disable>
    a126:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a128:	9b04      	ldr	r3, [sp, #16]
    a12a:	2b00      	cmp	r3, #0
    a12c:	d001      	beq.n	a132 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
        {
            result = status;
    a12e:	9b04      	ldr	r3, [sp, #16]
    a130:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    a132:	9b05      	ldr	r3, [sp, #20]
}
    a134:	4618      	mov	r0, r3
    a136:	b007      	add	sp, #28
    a138:	f85d fb04 	ldr.w	pc, [sp], #4
    a13c:	0000e8f4 	.word	0x0000e8f4

0000a140 <FlexCAN_Ip_SetRxMb15Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb15Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb15Mask_Privileged(uint8 instance, uint32 mask)
{
    a140:	b500      	push	{lr}
    a142:	b087      	sub	sp, #28
    a144:	4603      	mov	r3, r0
    a146:	9100      	str	r1, [sp, #0]
    a148:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a14c:	2300      	movs	r3, #0
    a14e:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a150:	2300      	movs	r3, #0
    a152:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a154:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a158:	4a1b      	ldr	r2, [pc, #108]	; (a1c8 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x88>)
    a15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a15e:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a160:	9803      	ldr	r0, [sp, #12]
    a162:	f7fd fb15 	bl	7790 <FlexCAN_IsEnabled>
    a166:	4603      	mov	r3, r0
    a168:	2b00      	cmp	r3, #0
    a16a:	bf14      	ite	ne
    a16c:	2301      	movne	r3, #1
    a16e:	2300      	moveq	r3, #0
    a170:	b2db      	uxtb	r3, r3
    a172:	f083 0301 	eor.w	r3, r3, #1
    a176:	b2db      	uxtb	r3, r3
    a178:	f88d 300b 	strb.w	r3, [sp, #11]
    a17c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a180:	f003 0301 	and.w	r3, r3, #1
    a184:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a188:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a18c:	2b00      	cmp	r3, #0
    a18e:	d003      	beq.n	a198 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    a190:	9803      	ldr	r0, [sp, #12]
    a192:	f000 fb1f 	bl	a7d4 <FlexCAN_Enable>
    a196:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    a198:	9b05      	ldr	r3, [sp, #20]
    a19a:	2b00      	cmp	r3, #0
    a19c:	d102      	bne.n	a1a4 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x64>
    {
        pBase->RX15MASK = mask;
    a19e:	9b03      	ldr	r3, [sp, #12]
    a1a0:	9a00      	ldr	r2, [sp, #0]
    a1a2:	619a      	str	r2, [r3, #24]
    }

    if (TRUE == disabled)
    a1a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a1a8:	2b00      	cmp	r3, #0
    a1aa:	d008      	beq.n	a1be <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    a1ac:	9803      	ldr	r0, [sp, #12]
    a1ae:	f000 fb8f 	bl	a8d0 <FlexCAN_Disable>
    a1b2:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a1b4:	9b04      	ldr	r3, [sp, #16]
    a1b6:	2b00      	cmp	r3, #0
    a1b8:	d001      	beq.n	a1be <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
        {
            result = status;
    a1ba:	9b04      	ldr	r3, [sp, #16]
    a1bc:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    a1be:	9b05      	ldr	r3, [sp, #20]
}
    a1c0:	4618      	mov	r0, r3
    a1c2:	b007      	add	sp, #28
    a1c4:	f85d fb04 	ldr.w	pc, [sp], #4
    a1c8:	0000e8f4 	.word	0x0000e8f4

0000a1cc <FlexCAN_Ip_SetListenOnlyMode_Privileged>:
 * This function will enable or disable Listen Only mode.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_SetListenOnlyMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetListenOnlyMode_Privileged(uint8 instance, const boolean enable)
{
    a1cc:	b500      	push	{lr}
    a1ce:	b087      	sub	sp, #28
    a1d0:	4603      	mov	r3, r0
    a1d2:	460a      	mov	r2, r1
    a1d4:	f88d 3007 	strb.w	r3, [sp, #7]
    a1d8:	4613      	mov	r3, r2
    a1da:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a1de:	2300      	movs	r3, #0
    a1e0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a1e2:	2300      	movs	r3, #0
    a1e4:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a1e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a1ea:	4a1f      	ldr	r2, [pc, #124]	; (a268 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x9c>)
    a1ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1f0:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a1f2:	9803      	ldr	r0, [sp, #12]
    a1f4:	f7fd facc 	bl	7790 <FlexCAN_IsEnabled>
    a1f8:	4603      	mov	r3, r0
    a1fa:	2b00      	cmp	r3, #0
    a1fc:	bf14      	ite	ne
    a1fe:	2301      	movne	r3, #1
    a200:	2300      	moveq	r3, #0
    a202:	b2db      	uxtb	r3, r3
    a204:	f083 0301 	eor.w	r3, r3, #1
    a208:	b2db      	uxtb	r3, r3
    a20a:	f88d 300b 	strb.w	r3, [sp, #11]
    a20e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a212:	f003 0301 	and.w	r3, r3, #1
    a216:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a21a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a21e:	2b00      	cmp	r3, #0
    a220:	d003      	beq.n	a22a <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    a222:	9803      	ldr	r0, [sp, #12]
    a224:	f000 fad6 	bl	a7d4 <FlexCAN_Enable>
    a228:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    a22a:	9b05      	ldr	r3, [sp, #20]
    a22c:	2b00      	cmp	r3, #0
    a22e:	d109      	bne.n	a244 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    a230:	f001 fff6 	bl	c220 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
        FlexCAN_SetListenOnlyMode(pBase, enable);
    a234:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a238:	4619      	mov	r1, r3
    a23a:	9803      	ldr	r0, [sp, #12]
    a23c:	f7fd fae5 	bl	780a <FlexCAN_SetListenOnlyMode>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    a240:	f002 f81a 	bl	c278 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
    }

    if (TRUE == disabled)
    a244:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a248:	2b00      	cmp	r3, #0
    a24a:	d008      	beq.n	a25e <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    a24c:	9803      	ldr	r0, [sp, #12]
    a24e:	f000 fb3f 	bl	a8d0 <FlexCAN_Disable>
    a252:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a254:	9b04      	ldr	r3, [sp, #16]
    a256:	2b00      	cmp	r3, #0
    a258:	d001      	beq.n	a25e <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
        {
            result = status;
    a25a:	9b04      	ldr	r3, [sp, #16]
    a25c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    a25e:	9b05      	ldr	r3, [sp, #20]
}
    a260:	4618      	mov	r0, r3
    a262:	b007      	add	sp, #28
    a264:	f85d fb04 	ldr.w	pc, [sp], #4
    a268:	0000e8f4 	.word	0x0000e8f4

0000a26c <FlexCAN_Ip_GetListenOnlyMode>:
 * Description   : Check if Listen Only mode is ENABLE.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_GetListenOnlyMode_Activity */
boolean FlexCAN_Ip_GetListenOnlyMode(uint8 instance)
{
    a26c:	b500      	push	{lr}
    a26e:	b085      	sub	sp, #20
    a270:	4603      	mov	r3, r0
    a272:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a276:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a27a:	4a06      	ldr	r2, [pc, #24]	; (a294 <FlexCAN_Ip_GetListenOnlyMode+0x28>)
    a27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a280:	9303      	str	r3, [sp, #12]
    return FlexCAN_IsListenOnlyModeEnabled(base);
    a282:	9803      	ldr	r0, [sp, #12]
    a284:	f7fd fc5d 	bl	7b42 <FlexCAN_IsListenOnlyModeEnabled>
    a288:	4603      	mov	r3, r0
}
    a28a:	4618      	mov	r0, r3
    a28c:	b005      	add	sp, #20
    a28e:	f85d fb04 	ldr.w	pc, [sp], #4
    a292:	bf00      	nop
    a294:	0000e8f4 	.word	0x0000e8f4

0000a298 <FlexCAN_Ip_ManualBusOffRecovery>:
 * Description   : Recover manually from bus-off if possible.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_ManualBusOffRecovery_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ManualBusOffRecovery(uint8 Instance)
{
    a298:	b500      	push	{lr}
    a29a:	b089      	sub	sp, #36	; 0x24
    a29c:	4603      	mov	r3, r0
    a29e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * Base = Flexcan_Ip_apxBase[Instance];
    a2a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2a6:	4a27      	ldr	r2, [pc, #156]	; (a344 <FlexCAN_Ip_ManualBusOffRecovery+0xac>)
    a2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2ac:	9305      	str	r3, [sp, #20]
    uint32 timeStart = 0U;
    a2ae:	2300      	movs	r3, #0
    a2b0:	9303      	str	r3, [sp, #12]
    uint32 timeElapsed = 0U;
    a2b2:	2300      	movs	r3, #0
    a2b4:	9307      	str	r3, [sp, #28]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a2b6:	2100      	movs	r1, #0
    a2b8:	4823      	ldr	r0, [pc, #140]	; (a348 <FlexCAN_Ip_ManualBusOffRecovery+0xb0>)
    a2ba:	f7f6 ff6d 	bl	1198 <OsIf_MicrosToTicks>
    a2be:	9004      	str	r0, [sp, #16]
    Flexcan_Ip_StatusType RetVal = FLEXCAN_STATUS_ERROR;
    a2c0:	2301      	movs	r3, #1
    a2c2:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Recover from bus-off when Automatic recovering from Bus Off state disabled. */
    if ((Base->CTRL1 & FLEXCAN_CTRL1_BOFFREC_MASK) != 0U)
    a2c4:	9b05      	ldr	r3, [sp, #20]
    a2c6:	685b      	ldr	r3, [r3, #4]
    a2c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a2cc:	2b00      	cmp	r3, #0
    a2ce:	d033      	beq.n	a338 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
    {
        RetVal = FLEXCAN_STATUS_SUCCESS;
    a2d0:	2300      	movs	r3, #0
    a2d2:	9306      	str	r3, [sp, #24]
        /* return success if the controller is not in bus-off */
        if ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    a2d4:	9b05      	ldr	r3, [sp, #20]
    a2d6:	6a1b      	ldr	r3, [r3, #32]
    a2d8:	f003 0320 	and.w	r3, r3, #32
    a2dc:	2b00      	cmp	r3, #0
    a2de:	d02b      	beq.n	a338 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
        {
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    a2e0:	f002 fad2 	bl	c888 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* negate to recover from bus-off */
            Base->CTRL1 &= ~FLEXCAN_CTRL1_BOFFREC_MASK;
    a2e4:	9b05      	ldr	r3, [sp, #20]
    a2e6:	685b      	ldr	r3, [r3, #4]
    a2e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    a2ec:	9b05      	ldr	r3, [sp, #20]
    a2ee:	605a      	str	r2, [r3, #4]
            /* re-assert to disable bus-off auto reocvery */
            Base->CTRL1 |= FLEXCAN_CTRL1_BOFFREC_MASK;
    a2f0:	9b05      	ldr	r3, [sp, #20]
    a2f2:	685b      	ldr	r3, [r3, #4]
    a2f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    a2f8:	9b05      	ldr	r3, [sp, #20]
    a2fa:	605a      	str	r2, [r3, #4]
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    a2fc:	f002 faf0 	bl	c8e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* Wait till exit bus-off */
            timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a300:	2000      	movs	r0, #0
    a302:	f7f6 fefd 	bl	1100 <OsIf_GetCounter>
    a306:	4603      	mov	r3, r0
    a308:	9303      	str	r3, [sp, #12]

            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    a30a:	e00f      	b.n	a32c <FlexCAN_Ip_ManualBusOffRecovery+0x94>
            {
                timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a30c:	ab03      	add	r3, sp, #12
    a30e:	2100      	movs	r1, #0
    a310:	4618      	mov	r0, r3
    a312:	f7f6 ff0e 	bl	1132 <OsIf_GetElapsed>
    a316:	4602      	mov	r2, r0
    a318:	9b07      	ldr	r3, [sp, #28]
    a31a:	4413      	add	r3, r2
    a31c:	9307      	str	r3, [sp, #28]
                if (timeElapsed >= uS2Ticks)
    a31e:	9a07      	ldr	r2, [sp, #28]
    a320:	9b04      	ldr	r3, [sp, #16]
    a322:	429a      	cmp	r2, r3
    a324:	d302      	bcc.n	a32c <FlexCAN_Ip_ManualBusOffRecovery+0x94>
                {
                    RetVal = FLEXCAN_STATUS_TIMEOUT;
    a326:	2303      	movs	r3, #3
    a328:	9306      	str	r3, [sp, #24]
                    break;
    a32a:	e005      	b.n	a338 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    a32c:	9b05      	ldr	r3, [sp, #20]
    a32e:	6a1b      	ldr	r3, [r3, #32]
    a330:	f003 0320 	and.w	r3, r3, #32
    a334:	2b00      	cmp	r3, #0
    a336:	d1e9      	bne.n	a30c <FlexCAN_Ip_ManualBusOffRecovery+0x74>
                }
            }
        }
    }

    return RetVal;
    a338:	9b06      	ldr	r3, [sp, #24]
}
    a33a:	4618      	mov	r0, r3
    a33c:	b009      	add	sp, #36	; 0x24
    a33e:	f85d fb04 	ldr.w	pc, [sp], #4
    a342:	bf00      	nop
    a344:	0000e8f4 	.word	0x0000e8f4
    a348:	000f4240 	.word	0x000f4240

0000a34c <FlexCAN_SetSelfReception>:
{
    a34c:	b082      	sub	sp, #8
    a34e:	9001      	str	r0, [sp, #4]
    a350:	460b      	mov	r3, r1
    a352:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    a356:	9b01      	ldr	r3, [sp, #4]
    a358:	681b      	ldr	r3, [r3, #0]
    a35a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    a35e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a362:	2a00      	cmp	r2, #0
    a364:	d001      	beq.n	a36a <FlexCAN_SetSelfReception+0x1e>
    a366:	2200      	movs	r2, #0
    a368:	e001      	b.n	a36e <FlexCAN_SetSelfReception+0x22>
    a36a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    a36e:	431a      	orrs	r2, r3
    a370:	9b01      	ldr	r3, [sp, #4]
    a372:	601a      	str	r2, [r3, #0]
}
    a374:	bf00      	nop
    a376:	b002      	add	sp, #8
    a378:	4770      	bx	lr

0000a37a <FlexCAN_IsFDEnabled>:
{
    a37a:	b082      	sub	sp, #8
    a37c:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    a37e:	9b01      	ldr	r3, [sp, #4]
    a380:	681b      	ldr	r3, [r3, #0]
    a382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    a386:	2b00      	cmp	r3, #0
    a388:	bf14      	ite	ne
    a38a:	2301      	movne	r3, #1
    a38c:	2300      	moveq	r3, #0
    a38e:	b2db      	uxtb	r3, r3
}
    a390:	4618      	mov	r0, r3
    a392:	b002      	add	sp, #8
    a394:	4770      	bx	lr

0000a396 <FlexCAN_SetIsoCan>:
{
    a396:	b082      	sub	sp, #8
    a398:	9001      	str	r0, [sp, #4]
    a39a:	460b      	mov	r3, r1
    a39c:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ISOCANFDEN_MASK) | FLEXCAN_CTRL2_ISOCANFDEN(enable ? 1UL : 0UL);
    a3a0:	9b01      	ldr	r3, [sp, #4]
    a3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a3a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    a3a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a3ac:	2a00      	cmp	r2, #0
    a3ae:	d002      	beq.n	a3b6 <FlexCAN_SetIsoCan+0x20>
    a3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    a3b4:	e000      	b.n	a3b8 <FlexCAN_SetIsoCan+0x22>
    a3b6:	2200      	movs	r2, #0
    a3b8:	431a      	orrs	r2, r3
    a3ba:	9b01      	ldr	r3, [sp, #4]
    a3bc:	635a      	str	r2, [r3, #52]	; 0x34
}
    a3be:	bf00      	nop
    a3c0:	b002      	add	sp, #8
    a3c2:	4770      	bx	lr

0000a3c4 <FlexCAN_SetEntireFrameArbitrationFieldComparison>:
{
    a3c4:	b082      	sub	sp, #8
    a3c6:	9001      	str	r0, [sp, #4]
    a3c8:	460b      	mov	r3, r1
    a3ca:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EACEN_MASK) | FLEXCAN_CTRL2_EACEN(enable ? 1UL : 0UL);
    a3ce:	9b01      	ldr	r3, [sp, #4]
    a3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a3d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    a3d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a3da:	2a00      	cmp	r2, #0
    a3dc:	d002      	beq.n	a3e4 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x20>
    a3de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    a3e2:	e000      	b.n	a3e6 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x22>
    a3e4:	2200      	movs	r2, #0
    a3e6:	431a      	orrs	r2, r3
    a3e8:	9b01      	ldr	r3, [sp, #4]
    a3ea:	635a      	str	r2, [r3, #52]	; 0x34
}
    a3ec:	bf00      	nop
    a3ee:	b002      	add	sp, #8
    a3f0:	4770      	bx	lr

0000a3f2 <FlexCAN_SetProtocolException>:
{
    a3f2:	b082      	sub	sp, #8
    a3f4:	9001      	str	r0, [sp, #4]
    a3f6:	460b      	mov	r3, r1
    a3f8:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_PREXCEN_MASK) | FLEXCAN_CTRL2_PREXCEN(enable ? 1UL : 0UL);
    a3fc:	9b01      	ldr	r3, [sp, #4]
    a3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a400:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    a404:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a408:	2a00      	cmp	r2, #0
    a40a:	d002      	beq.n	a412 <FlexCAN_SetProtocolException+0x20>
    a40c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    a410:	e000      	b.n	a414 <FlexCAN_SetProtocolException+0x22>
    a412:	2200      	movs	r2, #0
    a414:	431a      	orrs	r2, r3
    a416:	9b01      	ldr	r3, [sp, #4]
    a418:	635a      	str	r2, [r3, #52]	; 0x34
}
    a41a:	bf00      	nop
    a41c:	b002      	add	sp, #8
    a41e:	4770      	bx	lr

0000a420 <FlexCAN_SetRemoteReqStore>:
{
    a420:	b082      	sub	sp, #8
    a422:	9001      	str	r0, [sp, #4]
    a424:	460b      	mov	r3, r1
    a426:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RRS_MASK) | FLEXCAN_CTRL2_RRS(enable ? 1UL : 0UL);
    a42a:	9b01      	ldr	r3, [sp, #4]
    a42c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a42e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    a432:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a436:	2a00      	cmp	r2, #0
    a438:	d002      	beq.n	a440 <FlexCAN_SetRemoteReqStore+0x20>
    a43a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    a43e:	e000      	b.n	a442 <FlexCAN_SetRemoteReqStore+0x22>
    a440:	2200      	movs	r2, #0
    a442:	431a      	orrs	r2, r3
    a444:	9b01      	ldr	r3, [sp, #4]
    a446:	635a      	str	r2, [r3, #52]	; 0x34
}
    a448:	bf00      	nop
    a44a:	b002      	add	sp, #8
    a44c:	4770      	bx	lr

0000a44e <FlexCAN_SetBusOffAutorecovery>:
{
    a44e:	b082      	sub	sp, #8
    a450:	9001      	str	r0, [sp, #4]
    a452:	460b      	mov	r3, r1
    a454:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_BOFFREC_MASK) | FLEXCAN_CTRL1_BOFFREC(enable ? 0UL : 1UL);
    a458:	9b01      	ldr	r3, [sp, #4]
    a45a:	685b      	ldr	r3, [r3, #4]
    a45c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    a460:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a464:	2a00      	cmp	r2, #0
    a466:	d001      	beq.n	a46c <FlexCAN_SetBusOffAutorecovery+0x1e>
    a468:	2200      	movs	r2, #0
    a46a:	e000      	b.n	a46e <FlexCAN_SetBusOffAutorecovery+0x20>
    a46c:	2240      	movs	r2, #64	; 0x40
    a46e:	431a      	orrs	r2, r3
    a470:	9b01      	ldr	r3, [sp, #4]
    a472:	605a      	str	r2, [r3, #4]
}
    a474:	bf00      	nop
    a476:	b002      	add	sp, #8
    a478:	4770      	bx	lr

0000a47a <FlexCAN_SetEdgeFilter>:
{
    a47a:	b082      	sub	sp, #8
    a47c:	9001      	str	r0, [sp, #4]
    a47e:	460b      	mov	r3, r1
    a480:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EDFLTDIS_MASK) | FLEXCAN_CTRL2_EDFLTDIS(enable ? 0UL : 1UL);
    a484:	9b01      	ldr	r3, [sp, #4]
    a486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a488:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    a48c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a490:	2a00      	cmp	r2, #0
    a492:	d001      	beq.n	a498 <FlexCAN_SetEdgeFilter+0x1e>
    a494:	2200      	movs	r2, #0
    a496:	e001      	b.n	a49c <FlexCAN_SetEdgeFilter+0x22>
    a498:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a49c:	431a      	orrs	r2, r3
    a49e:	9b01      	ldr	r3, [sp, #4]
    a4a0:	635a      	str	r2, [r3, #52]	; 0x34
}
    a4a2:	bf00      	nop
    a4a4:	b002      	add	sp, #8
    a4a6:	4770      	bx	lr

0000a4a8 <FlexCAN_CanBitSampling>:
{
    a4a8:	b082      	sub	sp, #8
    a4aa:	9001      	str	r0, [sp, #4]
    a4ac:	460b      	mov	r3, r1
    a4ae:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_SMP_MASK) | FLEXCAN_CTRL1_SMP(enable ? 1UL : 0UL);
    a4b2:	9b01      	ldr	r3, [sp, #4]
    a4b4:	685b      	ldr	r3, [r3, #4]
    a4b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    a4ba:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a4be:	2a00      	cmp	r2, #0
    a4c0:	d001      	beq.n	a4c6 <FlexCAN_CanBitSampling+0x1e>
    a4c2:	2280      	movs	r2, #128	; 0x80
    a4c4:	e000      	b.n	a4c8 <FlexCAN_CanBitSampling+0x20>
    a4c6:	2200      	movs	r2, #0
    a4c8:	431a      	orrs	r2, r3
    a4ca:	9b01      	ldr	r3, [sp, #4]
    a4cc:	605a      	str	r2, [r3, #4]
}
    a4ce:	bf00      	nop
    a4d0:	b002      	add	sp, #8
    a4d2:	4770      	bx	lr

0000a4d4 <FlexCAN_ComputeDLCValue>:
 * Function Name: FLEXCAN_ComputeDLCValue
 * Description  : Computes the DLC field value, given a payload size (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_ComputeDLCValue(uint8 payloadSize)
{
    a4d4:	b084      	sub	sp, #16
    a4d6:	4603      	mov	r3, r0
    a4d8:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 ret = 0xFFU;                   /* 0,  1,  2,  3,  4,  5,  6,  7,  8, */
    a4dc:	23ff      	movs	r3, #255	; 0xff
    a4de:	9303      	str	r3, [sp, #12]
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES
                                          };

    if (payloadSize <= 64U)
    a4e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4e4:	2b40      	cmp	r3, #64	; 0x40
    a4e6:	d804      	bhi.n	a4f2 <FlexCAN_ComputeDLCValue+0x1e>
    {
        ret = payload_code[payloadSize];
    a4e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4ec:	4a03      	ldr	r2, [pc, #12]	; (a4fc <FlexCAN_ComputeDLCValue+0x28>)
    a4ee:	5cd3      	ldrb	r3, [r2, r3]
    a4f0:	9303      	str	r3, [sp, #12]
    else
    {
        /* The argument is not a valid payload size will return 0xFF*/
    }

    return (uint8)ret;
    a4f2:	9b03      	ldr	r3, [sp, #12]
    a4f4:	b2db      	uxtb	r3, r3
}
    a4f6:	4618      	mov	r0, r3
    a4f8:	b004      	add	sp, #16
    a4fa:	4770      	bx	lr
    a4fc:	0000e900 	.word	0x0000e900

0000a500 <FlexCAN_ClearRAM>:
 * Function Name : FLEXCAN_ClearRAM
 * Description   : Clears FlexCAN memory positions that require initialization.
 *
 *END**************************************************************************/
static void FlexCAN_ClearRAM(FLEXCAN_Type * base)
{
    a500:	b500      	push	{lr}
    a502:	b087      	sub	sp, #28
    a504:	9001      	str	r0, [sp, #4]
    uint32 databyte;
    uint32 RAM_size   = FlexCAN_GetMaxMbNum(base) * 4U;
    a506:	9801      	ldr	r0, [sp, #4]
    a508:	f000 f8f6 	bl	a6f8 <FlexCAN_GetMaxMbNum>
    a50c:	4603      	mov	r3, r0
    a50e:	009b      	lsls	r3, r3, #2
    a510:	9304      	str	r3, [sp, #16]
    uint32 RXIMR_size = FlexCAN_GetMaxMbNum(base);
    a512:	9801      	ldr	r0, [sp, #4]
    a514:	f000 f8f0 	bl	a6f8 <FlexCAN_GetMaxMbNum>
    a518:	9003      	str	r0, [sp, #12]
    /* Address of base + ram offset to point to MB start address */
    volatile uint32 * RAM = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    a51a:	9b01      	ldr	r3, [sp, #4]
    a51c:	3380      	adds	r3, #128	; 0x80
    a51e:	9302      	str	r3, [sp, #8]
    /* Clear MB region */
    for (databyte = 0U; databyte < RAM_size; databyte++)
    a520:	2300      	movs	r3, #0
    a522:	9305      	str	r3, [sp, #20]
    a524:	e008      	b.n	a538 <FlexCAN_ClearRAM+0x38>
    {
        RAM[databyte] = 0x0U;
    a526:	9b05      	ldr	r3, [sp, #20]
    a528:	009b      	lsls	r3, r3, #2
    a52a:	9a02      	ldr	r2, [sp, #8]
    a52c:	4413      	add	r3, r2
    a52e:	2200      	movs	r2, #0
    a530:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RAM_size; databyte++)
    a532:	9b05      	ldr	r3, [sp, #20]
    a534:	3301      	adds	r3, #1
    a536:	9305      	str	r3, [sp, #20]
    a538:	9a05      	ldr	r2, [sp, #20]
    a53a:	9b04      	ldr	r3, [sp, #16]
    a53c:	429a      	cmp	r2, r3
    a53e:	d3f2      	bcc.n	a526 <FlexCAN_ClearRAM+0x26>
    }
    RAM = (volatile uint32 *)base->RXIMR;
    a540:	9b01      	ldr	r3, [sp, #4]
    a542:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    a546:	9302      	str	r3, [sp, #8]
    /* Clear RXIMR region */
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    a548:	2300      	movs	r3, #0
    a54a:	9305      	str	r3, [sp, #20]
    a54c:	e008      	b.n	a560 <FlexCAN_ClearRAM+0x60>
    {
        RAM[databyte] = 0x0U;
    a54e:	9b05      	ldr	r3, [sp, #20]
    a550:	009b      	lsls	r3, r3, #2
    a552:	9a02      	ldr	r2, [sp, #8]
    a554:	4413      	add	r3, r2
    a556:	2200      	movs	r2, #0
    a558:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    a55a:	9b05      	ldr	r3, [sp, #20]
    a55c:	3301      	adds	r3, #1
    a55e:	9305      	str	r3, [sp, #20]
    a560:	9a05      	ldr	r2, [sp, #20]
    a562:	9b03      	ldr	r3, [sp, #12]
    a564:	429a      	cmp	r2, r3
    a566:	d3f2      	bcc.n	a54e <FlexCAN_ClearRAM+0x4e>
    }
#endif
    /* Clear WRMFRZ bit in CTRL2 Register to restrict write access to memory */
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_WRMFRZ_MASK) | FLEXCAN_CTRL2_WRMFRZ(0U);
#endif /* if FLEXCAN_IP_FEATURE_HAS_MEM_ERR_DET */
}
    a568:	bf00      	nop
    a56a:	bf00      	nop
    a56c:	b007      	add	sp, #28
    a56e:	f85d fb04 	ldr.w	pc, [sp], #4

0000a572 <FlexCAN_ComputePayloadSize>:
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#else
static uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
{
    a572:	b084      	sub	sp, #16
    a574:	4603      	mov	r3, r0
    a576:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ret = 8U;
    a57a:	2308      	movs	r3, #8
    a57c:	f88d 300f 	strb.w	r3, [sp, #15]

    if (dlcValue <= 8U)
    a580:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a584:	2b08      	cmp	r3, #8
    a586:	d804      	bhi.n	a592 <FlexCAN_ComputePayloadSize+0x20>
    {
        ret = dlcValue;
    a588:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a58c:	f88d 300f 	strb.w	r3, [sp, #15]
    a590:	e033      	b.n	a5fa <FlexCAN_ComputePayloadSize+0x88>
    }
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    else
    {
        switch (dlcValue)
    a592:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a596:	3b09      	subs	r3, #9
    a598:	2b06      	cmp	r3, #6
    a59a:	d82d      	bhi.n	a5f8 <FlexCAN_ComputePayloadSize+0x86>
    a59c:	a201      	add	r2, pc, #4	; (adr r2, a5a4 <FlexCAN_ComputePayloadSize+0x32>)
    a59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a5a2:	bf00      	nop
    a5a4:	0000a5c1 	.word	0x0000a5c1
    a5a8:	0000a5c9 	.word	0x0000a5c9
    a5ac:	0000a5d1 	.word	0x0000a5d1
    a5b0:	0000a5d9 	.word	0x0000a5d9
    a5b4:	0000a5e1 	.word	0x0000a5e1
    a5b8:	0000a5e9 	.word	0x0000a5e9
    a5bc:	0000a5f1 	.word	0x0000a5f1
        {
            case FLEXCAN_IP_DLC_VALUE_12_BYTES:
                ret = 12U;
    a5c0:	230c      	movs	r3, #12
    a5c2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    a5c6:	e018      	b.n	a5fa <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_16_BYTES:
                ret = 16U;
    a5c8:	2310      	movs	r3, #16
    a5ca:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    a5ce:	e014      	b.n	a5fa <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_20_BYTES:
                ret = 20U;
    a5d0:	2314      	movs	r3, #20
    a5d2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    a5d6:	e010      	b.n	a5fa <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_24_BYTES:
                ret = 24U;
    a5d8:	2318      	movs	r3, #24
    a5da:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    a5de:	e00c      	b.n	a5fa <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_32_BYTES:
                ret = 32U;
    a5e0:	2320      	movs	r3, #32
    a5e2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    a5e6:	e008      	b.n	a5fa <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_48_BYTES:
                ret = 48U;
    a5e8:	2330      	movs	r3, #48	; 0x30
    a5ea:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    a5ee:	e004      	b.n	a5fa <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_64_BYTES:
                ret = 64U;
    a5f0:	2340      	movs	r3, #64	; 0x40
    a5f2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    a5f6:	e000      	b.n	a5fa <FlexCAN_ComputePayloadSize+0x88>
            default:
                /* The argument is not a valid DLC size */
                break;
    a5f8:	bf00      	nop
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    return ret;
    a5fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a5fe:	4618      	mov	r0, r3
    a600:	b004      	add	sp, #16
    a602:	4770      	bx	lr

0000a604 <FlexCAN_GetMsgBuffRegion>:
 * Function Name : FLEXCAN_GetMsgBuffRegion
 * Description   : Returns the start of a MB area, based on its index.
 *
 *END**************************************************************************/
volatile uint32 * FlexCAN_GetMsgBuffRegion(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    a604:	b500      	push	{lr}
    a606:	b08b      	sub	sp, #44	; 0x2c
    a608:	9001      	str	r0, [sp, #4]
    a60a:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    a60c:	2308      	movs	r3, #8
    a60e:	f88d 3020 	strb.w	r3, [sp, #32]
    uint8 mb_size = 0U;
    a612:	2300      	movs	r3, #0
    a614:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ramBlockSize = 512U;
    a618:	f44f 7300 	mov.w	r3, #512	; 0x200
    a61c:	9307      	str	r3, [sp, #28]
    uint16 ramBlockOffset = 0;
    a61e:	2300      	movs	r3, #0
    a620:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    uint8 msgBuffIdxBackup = (uint8)msgBuffIdx;
    a624:	9b00      	ldr	r3, [sp, #0]
    a626:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint8 i=0U;
    a62a:	2300      	movs	r3, #0
    a62c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    uint8 maxMbNum=0U;
    a630:	2300      	movs	r3, #0
    a632:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    uint32 mb_index=0U;
    a636:	2300      	movs	r3, #0
    a638:	9306      	str	r3, [sp, #24]
    uint8 payload_size=0U;
    a63a:	2300      	movs	r3, #0
    a63c:	f88d 3017 	strb.w	r3, [sp, #23]
    volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    a640:	9b01      	ldr	r3, [sp, #4]
    a642:	3380      	adds	r3, #128	; 0x80
    a644:	9304      	str	r3, [sp, #16]
    volatile uint32 * pAddressRet = NULL_PTR;
    a646:	2300      	movs	r3, #0
    a648:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY == STD_ON)
    volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    a64a:	2300      	movs	r3, #0
    a64c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    a650:	e02d      	b.n	a6ae <FlexCAN_GetMsgBuffRegion+0xaa>
    {
        payload_size = FlexCAN_GetPayloadSize(base, i);
    a652:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    a656:	4619      	mov	r1, r3
    a658:	9801      	ldr	r0, [sp, #4]
    a65a:	f000 fad1 	bl	ac00 <FlexCAN_GetPayloadSize>
    a65e:	4603      	mov	r3, r0
    a660:	f88d 3017 	strb.w	r3, [sp, #23]
        mb_size = (uint8)(payload_size + arbitration_field_size);
    a664:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a668:	f89d 3020 	ldrb.w	r3, [sp, #32]
    a66c:	4413      	add	r3, r2
    a66e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        maxMbNum = (uint8)(ramBlockSize / mb_size);
    a672:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    a676:	9a07      	ldr	r2, [sp, #28]
    a678:	fbb2 f3f3 	udiv	r3, r2, r3
    a67c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        if (maxMbNum > msgBuffIdxBackup)
    a680:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    a684:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    a688:	429a      	cmp	r2, r3
    a68a:	d815      	bhi.n	a6b8 <FlexCAN_GetMsgBuffRegion+0xb4>
        {
            break;
        }
        ramBlockOffset += 128U;
    a68c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    a690:	3380      	adds	r3, #128	; 0x80
    a692:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        msgBuffIdxBackup -= maxMbNum;
    a696:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    a69a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    a69e:	1ad3      	subs	r3, r2, r3
    a6a0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    a6a4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    a6a8:	3301      	adds	r3, #1
    a6aa:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    a6ae:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    a6b2:	2b00      	cmp	r3, #0
    a6b4:	d0cd      	beq.n	a652 <FlexCAN_GetMsgBuffRegion+0x4e>
    a6b6:	e000      	b.n	a6ba <FlexCAN_GetMsgBuffRegion+0xb6>
            break;
    a6b8:	bf00      	nop
    }
    else
#endif
    {
        /* Multiply the MB index by the MB size (in words) */
        mb_index = (uint32)ramBlockOffset + (((uint32)msgBuffIdxBackup % (uint32)maxMbNum) * ((uint32)mb_size >> 2U));
    a6ba:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    a6be:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    a6c2:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    a6c6:	fbb3 f0f2 	udiv	r0, r3, r2
    a6ca:	fb00 f202 	mul.w	r2, r0, r2
    a6ce:	1a9b      	subs	r3, r3, r2
    a6d0:	b2db      	uxtb	r3, r3
    a6d2:	461a      	mov	r2, r3
    a6d4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    a6d8:	089b      	lsrs	r3, r3, #2
    a6da:	b2db      	uxtb	r3, r3
    a6dc:	fb02 f303 	mul.w	r3, r2, r3
    a6e0:	440b      	add	r3, r1
    a6e2:	9306      	str	r3, [sp, #24]
        pAddressRet = &(RAM[mb_index]);
    a6e4:	9b06      	ldr	r3, [sp, #24]
    a6e6:	009b      	lsls	r3, r3, #2
    a6e8:	9a04      	ldr	r2, [sp, #16]
    a6ea:	4413      	add	r3, r2
    a6ec:	9303      	str	r3, [sp, #12]
    }

    return pAddressRet;
    a6ee:	9b03      	ldr	r3, [sp, #12]
}
    a6f0:	4618      	mov	r0, r3
    a6f2:	b00b      	add	sp, #44	; 0x2c
    a6f4:	f85d fb04 	ldr.w	pc, [sp], #4

0000a6f8 <FlexCAN_GetMaxMbNum>:
 * Function Name : FlexCAN_GetMaxMbNum
 * Description   : Computes the maximum RAM size occupied by MBs.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMaxMbNum(const FLEXCAN_Type * base)
{
    a6f8:	b084      	sub	sp, #16
    a6fa:	9001      	str	r0, [sp, #4]
    uint32 i, ret = 0u;
    a6fc:	2300      	movs	r3, #0
    a6fe:	9302      	str	r3, [sp, #8]
    static FLEXCAN_Type * const flexcanBase[] = IP_FLEXCAN_BASE_PTRS;
    static const uint32 maxMbNum[] = FLEXCAN_IP_FEATURE_MAX_MB_NUM_ARRAY;

    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    a700:	2300      	movs	r3, #0
    a702:	9303      	str	r3, [sp, #12]
    a704:	e00e      	b.n	a724 <FlexCAN_GetMaxMbNum+0x2c>
    {
        if (base == flexcanBase[i])
    a706:	4a0b      	ldr	r2, [pc, #44]	; (a734 <FlexCAN_GetMaxMbNum+0x3c>)
    a708:	9b03      	ldr	r3, [sp, #12]
    a70a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a70e:	9a01      	ldr	r2, [sp, #4]
    a710:	429a      	cmp	r2, r3
    a712:	d104      	bne.n	a71e <FlexCAN_GetMaxMbNum+0x26>
        {
            ret = maxMbNum[i];
    a714:	4a08      	ldr	r2, [pc, #32]	; (a738 <FlexCAN_GetMaxMbNum+0x40>)
    a716:	9b03      	ldr	r3, [sp, #12]
    a718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a71c:	9302      	str	r3, [sp, #8]
    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    a71e:	9b03      	ldr	r3, [sp, #12]
    a720:	3301      	adds	r3, #1
    a722:	9303      	str	r3, [sp, #12]
    a724:	9b03      	ldr	r3, [sp, #12]
    a726:	2b02      	cmp	r3, #2
    a728:	d9ed      	bls.n	a706 <FlexCAN_GetMaxMbNum+0xe>
        }
    }
    return ret;
    a72a:	9b02      	ldr	r3, [sp, #8]
}
    a72c:	4618      	mov	r0, r3
    a72e:	b004      	add	sp, #16
    a730:	4770      	bx	lr
    a732:	bf00      	nop
    a734:	0000e944 	.word	0x0000e944
    a738:	0000e950 	.word	0x0000e950

0000a73c <FlexCAN_EnterFreezeMode>:
 * Function Name : FLEXCAN_EnterFreezeMode
 * Description   : Enter the freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnterFreezeMode(FLEXCAN_Type * base)
{
    a73c:	b500      	push	{lr}
    a73e:	b087      	sub	sp, #28
    a740:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    a742:	2300      	movs	r3, #0
    a744:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    a746:	2300      	movs	r3, #0
    a748:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a74a:	2100      	movs	r1, #0
    a74c:	4820      	ldr	r0, [pc, #128]	; (a7d0 <FlexCAN_EnterFreezeMode+0x94>)
    a74e:	f7f6 fd23 	bl	1198 <OsIf_MicrosToTicks>
    a752:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    a754:	2300      	movs	r3, #0
    a756:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    a758:	f001 fad2 	bl	bd00 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(1U);
    a75c:	9b01      	ldr	r3, [sp, #4]
    a75e:	681b      	ldr	r3, [r3, #0]
    a760:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a764:	9b01      	ldr	r3, [sp, #4]
    a766:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(1U);
    a768:	9b01      	ldr	r3, [sp, #4]
    a76a:	681b      	ldr	r3, [r3, #0]
    a76c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
    a770:	9b01      	ldr	r3, [sp, #4]
    a772:	601a      	str	r2, [r3, #0]
    if (((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U)
    a774:	9b01      	ldr	r3, [sp, #4]
    a776:	681b      	ldr	r3, [r3, #0]
    a778:	2b00      	cmp	r3, #0
    a77a:	da05      	bge.n	a788 <FlexCAN_EnterFreezeMode+0x4c>
    {
        base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    a77c:	9b01      	ldr	r3, [sp, #4]
    a77e:	681b      	ldr	r3, [r3, #0]
    a780:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    a784:	9b01      	ldr	r3, [sp, #4]
    a786:	601a      	str	r2, [r3, #0]
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    a788:	f001 fae6 	bl	bd58 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a78c:	2000      	movs	r0, #0
    a78e:	f7f6 fcb7 	bl	1100 <OsIf_GetCounter>
    a792:	4603      	mov	r3, r0
    a794:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    a796:	e00f      	b.n	a7b8 <FlexCAN_EnterFreezeMode+0x7c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a798:	ab02      	add	r3, sp, #8
    a79a:	2100      	movs	r1, #0
    a79c:	4618      	mov	r0, r3
    a79e:	f7f6 fcc8 	bl	1132 <OsIf_GetElapsed>
    a7a2:	4602      	mov	r2, r0
    a7a4:	9b05      	ldr	r3, [sp, #20]
    a7a6:	4413      	add	r3, r2
    a7a8:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    a7aa:	9a05      	ldr	r2, [sp, #20]
    a7ac:	9b03      	ldr	r3, [sp, #12]
    a7ae:	429a      	cmp	r2, r3
    a7b0:	d302      	bcc.n	a7b8 <FlexCAN_EnterFreezeMode+0x7c>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    a7b2:	2303      	movs	r3, #3
    a7b4:	9304      	str	r3, [sp, #16]
            break;
    a7b6:	e005      	b.n	a7c4 <FlexCAN_EnterFreezeMode+0x88>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    a7b8:	9b01      	ldr	r3, [sp, #4]
    a7ba:	681b      	ldr	r3, [r3, #0]
    a7bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    a7c0:	2b00      	cmp	r3, #0
    a7c2:	d0e9      	beq.n	a798 <FlexCAN_EnterFreezeMode+0x5c>
        }
    }

    return returnResult;
    a7c4:	9b04      	ldr	r3, [sp, #16]
}
    a7c6:	4618      	mov	r0, r3
    a7c8:	b007      	add	sp, #28
    a7ca:	f85d fb04 	ldr.w	pc, [sp], #4
    a7ce:	bf00      	nop
    a7d0:	000f4240 	.word	0x000f4240

0000a7d4 <FlexCAN_Enable>:
 * Function Name : FlexCAN_Enable
 * Description   : Enable the clock for FlexCAN Module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Enable(FLEXCAN_Type * base)
{
    a7d4:	b500      	push	{lr}
    a7d6:	b087      	sub	sp, #28
    a7d8:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    a7da:	2300      	movs	r3, #0
    a7dc:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    a7de:	2300      	movs	r3, #0
    a7e0:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a7e2:	2100      	movs	r1, #0
    a7e4:	4818      	ldr	r0, [pc, #96]	; (a848 <FlexCAN_Enable+0x74>)
    a7e6:	f7f6 fcd7 	bl	1198 <OsIf_MicrosToTicks>
    a7ea:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    a7ec:	2300      	movs	r3, #0
    a7ee:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    a7f0:	f001 fad8 	bl	bda4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>

    /* Enable Module */
    base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    a7f4:	9b01      	ldr	r3, [sp, #4]
    a7f6:	681b      	ldr	r3, [r3, #0]
    a7f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    a7fc:	9b01      	ldr	r3, [sp, #4]
    a7fe:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    a800:	f001 fafc 	bl	bdfc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a804:	2000      	movs	r0, #0
    a806:	f7f6 fc7b 	bl	1100 <OsIf_GetCounter>
    a80a:	4603      	mov	r3, r0
    a80c:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    a80e:	e00f      	b.n	a830 <FlexCAN_Enable+0x5c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a810:	ab02      	add	r3, sp, #8
    a812:	2100      	movs	r1, #0
    a814:	4618      	mov	r0, r3
    a816:	f7f6 fc8c 	bl	1132 <OsIf_GetElapsed>
    a81a:	4602      	mov	r2, r0
    a81c:	9b05      	ldr	r3, [sp, #20]
    a81e:	4413      	add	r3, r2
    a820:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    a822:	9a05      	ldr	r2, [sp, #20]
    a824:	9b03      	ldr	r3, [sp, #12]
    a826:	429a      	cmp	r2, r3
    a828:	d302      	bcc.n	a830 <FlexCAN_Enable+0x5c>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    a82a:	2303      	movs	r3, #3
    a82c:	9304      	str	r3, [sp, #16]
            break;
    a82e:	e005      	b.n	a83c <FlexCAN_Enable+0x68>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    a830:	9b01      	ldr	r3, [sp, #4]
    a832:	681b      	ldr	r3, [r3, #0]
    a834:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    a838:	2b00      	cmp	r3, #0
    a83a:	d0e9      	beq.n	a810 <FlexCAN_Enable+0x3c>
        }
    }
    return returnValue;
    a83c:	9b04      	ldr	r3, [sp, #16]
}
    a83e:	4618      	mov	r0, r3
    a840:	b007      	add	sp, #28
    a842:	f85d fb04 	ldr.w	pc, [sp], #4
    a846:	bf00      	nop
    a848:	000f4240 	.word	0x000f4240

0000a84c <FlexCAN_ExitFreezeMode>:
 * Function Name : FLEXCAN_ExitFreezeMode
 * Description   : Exit of freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_ExitFreezeMode(FLEXCAN_Type * base)
{
    a84c:	b500      	push	{lr}
    a84e:	b087      	sub	sp, #28
    a850:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    a852:	2300      	movs	r3, #0
    a854:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    a856:	2300      	movs	r3, #0
    a858:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a85a:	2100      	movs	r1, #0
    a85c:	481b      	ldr	r0, [pc, #108]	; (a8cc <FlexCAN_ExitFreezeMode+0x80>)
    a85e:	f7f6 fc9b 	bl	1198 <OsIf_MicrosToTicks>
    a862:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    a864:	2300      	movs	r3, #0
    a866:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    a868:	f001 faee 	bl	be48 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(0U);
    a86c:	9b01      	ldr	r3, [sp, #4]
    a86e:	681b      	ldr	r3, [r3, #0]
    a870:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
    a874:	9b01      	ldr	r3, [sp, #4]
    a876:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(0U);
    a878:	9b01      	ldr	r3, [sp, #4]
    a87a:	681b      	ldr	r3, [r3, #0]
    a87c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    a880:	9b01      	ldr	r3, [sp, #4]
    a882:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    a884:	f001 fb0c 	bl	bea0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    /* Wait till exit freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a888:	2000      	movs	r0, #0
    a88a:	f7f6 fc39 	bl	1100 <OsIf_GetCounter>
    a88e:	4603      	mov	r3, r0
    a890:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    a892:	e00f      	b.n	a8b4 <FlexCAN_ExitFreezeMode+0x68>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a894:	ab02      	add	r3, sp, #8
    a896:	2100      	movs	r1, #0
    a898:	4618      	mov	r0, r3
    a89a:	f7f6 fc4a 	bl	1132 <OsIf_GetElapsed>
    a89e:	4602      	mov	r2, r0
    a8a0:	9b05      	ldr	r3, [sp, #20]
    a8a2:	4413      	add	r3, r2
    a8a4:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    a8a6:	9a05      	ldr	r2, [sp, #20]
    a8a8:	9b03      	ldr	r3, [sp, #12]
    a8aa:	429a      	cmp	r2, r3
    a8ac:	d302      	bcc.n	a8b4 <FlexCAN_ExitFreezeMode+0x68>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    a8ae:	2303      	movs	r3, #3
    a8b0:	9304      	str	r3, [sp, #16]
            break;
    a8b2:	e005      	b.n	a8c0 <FlexCAN_ExitFreezeMode+0x74>
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    a8b4:	9b01      	ldr	r3, [sp, #4]
    a8b6:	681b      	ldr	r3, [r3, #0]
    a8b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    a8bc:	2b00      	cmp	r3, #0
    a8be:	d1e9      	bne.n	a894 <FlexCAN_ExitFreezeMode+0x48>
        }
    }
    return returnValue;
    a8c0:	9b04      	ldr	r3, [sp, #16]
}
    a8c2:	4618      	mov	r0, r3
    a8c4:	b007      	add	sp, #28
    a8c6:	f85d fb04 	ldr.w	pc, [sp], #4
    a8ca:	bf00      	nop
    a8cc:	000f4240 	.word	0x000f4240

0000a8d0 <FlexCAN_Disable>:
 * Description   : Disable FlexCAN module.
 * This function will disable FlexCAN module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Disable(FLEXCAN_Type * base)
{
    a8d0:	b500      	push	{lr}
    a8d2:	b087      	sub	sp, #28
    a8d4:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    a8d6:	2300      	movs	r3, #0
    a8d8:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    a8da:	2300      	movs	r3, #0
    a8dc:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a8de:	2100      	movs	r1, #0
    a8e0:	481a      	ldr	r0, [pc, #104]	; (a94c <FlexCAN_Disable+0x7c>)
    a8e2:	f7f6 fc59 	bl	1198 <OsIf_MicrosToTicks>
    a8e6:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    a8e8:	2300      	movs	r3, #0
    a8ea:	9304      	str	r3, [sp, #16]

    /* To access the memory mapped registers */
    /* Enter disable mode (hard reset). */
    if (0U == ((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT))
    a8ec:	9b01      	ldr	r3, [sp, #4]
    a8ee:	681b      	ldr	r3, [r3, #0]
    a8f0:	2b00      	cmp	r3, #0
    a8f2:	db25      	blt.n	a940 <FlexCAN_Disable+0x70>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    a8f4:	f001 fafa 	bl	beec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Clock disable (module) */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MDIS_MASK) | FLEXCAN_MCR_MDIS(1U);
    a8f8:	9b01      	ldr	r3, [sp, #4]
    a8fa:	681b      	ldr	r3, [r3, #0]
    a8fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    a900:	9b01      	ldr	r3, [sp, #4]
    a902:	601a      	str	r2, [r3, #0]
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    a904:	f001 fb1e 	bl	bf44 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Wait until disable mode acknowledged */
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a908:	2000      	movs	r0, #0
    a90a:	f7f6 fbf9 	bl	1100 <OsIf_GetCounter>
    a90e:	4603      	mov	r3, r0
    a910:	9302      	str	r3, [sp, #8]
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    a912:	e00f      	b.n	a934 <FlexCAN_Disable+0x64>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a914:	ab02      	add	r3, sp, #8
    a916:	2100      	movs	r1, #0
    a918:	4618      	mov	r0, r3
    a91a:	f7f6 fc0a 	bl	1132 <OsIf_GetElapsed>
    a91e:	4602      	mov	r2, r0
    a920:	9b05      	ldr	r3, [sp, #20]
    a922:	4413      	add	r3, r2
    a924:	9305      	str	r3, [sp, #20]
            if (timeElapsed >= uS2Ticks)
    a926:	9a05      	ldr	r2, [sp, #20]
    a928:	9b03      	ldr	r3, [sp, #12]
    a92a:	429a      	cmp	r2, r3
    a92c:	d302      	bcc.n	a934 <FlexCAN_Disable+0x64>
            {
                returnResult = FLEXCAN_STATUS_TIMEOUT;
    a92e:	2303      	movs	r3, #3
    a930:	9304      	str	r3, [sp, #16]
                break;
    a932:	e005      	b.n	a940 <FlexCAN_Disable+0x70>
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    a934:	9b01      	ldr	r3, [sp, #4]
    a936:	681b      	ldr	r3, [r3, #0]
    a938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    a93c:	2b00      	cmp	r3, #0
    a93e:	d0e9      	beq.n	a914 <FlexCAN_Disable+0x44>
            }
        }
    }
    return returnResult;
    a940:	9b04      	ldr	r3, [sp, #16]
}
    a942:	4618      	mov	r0, r3
    a944:	b007      	add	sp, #28
    a946:	f85d fb04 	ldr.w	pc, [sp], #4
    a94a:	bf00      	nop
    a94c:	000f4240 	.word	0x000f4240

0000a950 <FlexCAN_SetErrIntCmd>:
 * Description   : Enable the error interrupts.
 * This function will enable Error interrupt.
 *
 *END**************************************************************************/
void FlexCAN_SetErrIntCmd(FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
    a950:	b500      	push	{lr}
    a952:	b087      	sub	sp, #28
    a954:	9003      	str	r0, [sp, #12]
    a956:	9102      	str	r1, [sp, #8]
    a958:	4613      	mov	r3, r2
    a95a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 temp = (uint32)errType;
    a95e:	9b02      	ldr	r3, [sp, #8]
    a960:	9305      	str	r3, [sp, #20]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    a962:	f001 fb15 	bl	bf90 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
    if (enable)
    a966:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a96a:	2b00      	cmp	r3, #0
    a96c:	d020      	beq.n	a9b0 <FlexCAN_SetErrIntCmd+0x60>
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    a96e:	9b02      	ldr	r3, [sp, #8]
    a970:	f244 0201 	movw	r2, #16385	; 0x4001
    a974:	4293      	cmp	r3, r2
    a976:	d106      	bne.n	a986 <FlexCAN_SetErrIntCmd+0x36>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(1U);
    a978:	9b03      	ldr	r3, [sp, #12]
    a97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a97c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    a980:	9b03      	ldr	r3, [sp, #12]
    a982:	635a      	str	r2, [r3, #52]	; 0x34
    a984:	e03a      	b.n	a9fc <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            if ((FLEXCAN_INT_RX_WARNING == errType) || (FLEXCAN_INT_TX_WARNING == errType))
    a986:	9b02      	ldr	r3, [sp, #8]
    a988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    a98c:	d003      	beq.n	a996 <FlexCAN_SetErrIntCmd+0x46>
    a98e:	9b02      	ldr	r3, [sp, #8]
    a990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    a994:	d105      	bne.n	a9a2 <FlexCAN_SetErrIntCmd+0x52>
            {
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(1U);
    a996:	9b03      	ldr	r3, [sp, #12]
    a998:	681b      	ldr	r3, [r3, #0]
    a99a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    a99e:	9b03      	ldr	r3, [sp, #12]
    a9a0:	601a      	str	r2, [r3, #0]
            }
            (base->CTRL1) = ((base->CTRL1) | (temp));
    a9a2:	9b03      	ldr	r3, [sp, #12]
    a9a4:	685a      	ldr	r2, [r3, #4]
    a9a6:	9b05      	ldr	r3, [sp, #20]
    a9a8:	431a      	orrs	r2, r3
    a9aa:	9b03      	ldr	r3, [sp, #12]
    a9ac:	605a      	str	r2, [r3, #4]
    a9ae:	e025      	b.n	a9fc <FlexCAN_SetErrIntCmd+0xac>
        }
    }
    else
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    a9b0:	9b02      	ldr	r3, [sp, #8]
    a9b2:	f244 0201 	movw	r2, #16385	; 0x4001
    a9b6:	4293      	cmp	r3, r2
    a9b8:	d106      	bne.n	a9c8 <FlexCAN_SetErrIntCmd+0x78>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(0U);
    a9ba:	9b03      	ldr	r3, [sp, #12]
    a9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a9be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    a9c2:	9b03      	ldr	r3, [sp, #12]
    a9c4:	635a      	str	r2, [r3, #52]	; 0x34
    a9c6:	e019      	b.n	a9fc <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            (base->CTRL1) = ((base->CTRL1) & ~(temp));
    a9c8:	9b03      	ldr	r3, [sp, #12]
    a9ca:	685a      	ldr	r2, [r3, #4]
    a9cc:	9b05      	ldr	r3, [sp, #20]
    a9ce:	43db      	mvns	r3, r3
    a9d0:	401a      	ands	r2, r3
    a9d2:	9b03      	ldr	r3, [sp, #12]
    a9d4:	605a      	str	r2, [r3, #4]
            temp = base->CTRL1;
    a9d6:	9b03      	ldr	r3, [sp, #12]
    a9d8:	685b      	ldr	r3, [r3, #4]
    a9da:	9305      	str	r3, [sp, #20]
            if ((0U == (temp & (uint32)FLEXCAN_INT_RX_WARNING)) && (0U == (temp & (uint32)FLEXCAN_INT_TX_WARNING)))
    a9dc:	9b05      	ldr	r3, [sp, #20]
    a9de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a9e2:	2b00      	cmp	r3, #0
    a9e4:	d10a      	bne.n	a9fc <FlexCAN_SetErrIntCmd+0xac>
    a9e6:	9b05      	ldr	r3, [sp, #20]
    a9e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    a9ec:	2b00      	cmp	r3, #0
    a9ee:	d105      	bne.n	a9fc <FlexCAN_SetErrIntCmd+0xac>
            {
                /* If WRNEN disabled then both FLEXCAN_INT_RX_WARNING and FLEXCAN_INT_TX_WARNING will be disabled */
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(0U);
    a9f0:	9b03      	ldr	r3, [sp, #12]
    a9f2:	681b      	ldr	r3, [r3, #0]
    a9f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
    a9f8:	9b03      	ldr	r3, [sp, #12]
    a9fa:	601a      	str	r2, [r3, #0]
            }
        }
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    a9fc:	f001 faf4 	bl	bfe8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
}
    aa00:	bf00      	nop
    aa02:	b007      	add	sp, #28
    aa04:	f85d fb04 	ldr.w	pc, [sp], #4

0000aa08 <FlexCAN_Init>:
 * buffers, initialize all message buffers as inactive, enable RX FIFO
 * if needed, mask all mask bits, and disable all MB interrupts.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Init(FLEXCAN_Type * base)
{
    aa08:	b500      	push	{lr}
    aa0a:	b087      	sub	sp, #28
    aa0c:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    aa0e:	2300      	movs	r3, #0
    aa10:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    aa12:	2300      	movs	r3, #0
    aa14:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    aa16:	2100      	movs	r1, #0
    aa18:	4833      	ldr	r0, [pc, #204]	; (aae8 <FlexCAN_Init+0xe0>)
    aa1a:	f7f6 fbbd 	bl	1198 <OsIf_MicrosToTicks>
    aa1e:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    aa20:	2300      	movs	r3, #0
    aa22:	9304      	str	r3, [sp, #16]

    /* Reset the FLEXCAN */
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SOFTRST_MASK) | FLEXCAN_MCR_SOFTRST(1U);
    aa24:	9b01      	ldr	r3, [sp, #4]
    aa26:	681b      	ldr	r3, [r3, #0]
    aa28:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
    aa2c:	9b01      	ldr	r3, [sp, #4]
    aa2e:	601a      	str	r2, [r3, #0]
    /* Wait for reset cycle to complete */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    aa30:	2000      	movs	r0, #0
    aa32:	f7f6 fb65 	bl	1100 <OsIf_GetCounter>
    aa36:	4603      	mov	r3, r0
    aa38:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    aa3a:	e00f      	b.n	aa5c <FlexCAN_Init+0x54>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    aa3c:	ab02      	add	r3, sp, #8
    aa3e:	2100      	movs	r1, #0
    aa40:	4618      	mov	r0, r3
    aa42:	f7f6 fb76 	bl	1132 <OsIf_GetElapsed>
    aa46:	4602      	mov	r2, r0
    aa48:	9b05      	ldr	r3, [sp, #20]
    aa4a:	4413      	add	r3, r2
    aa4c:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    aa4e:	9a05      	ldr	r2, [sp, #20]
    aa50:	9b03      	ldr	r3, [sp, #12]
    aa52:	429a      	cmp	r2, r3
    aa54:	d302      	bcc.n	aa5c <FlexCAN_Init+0x54>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    aa56:	2303      	movs	r3, #3
    aa58:	9304      	str	r3, [sp, #16]
            break;
    aa5a:	e005      	b.n	aa68 <FlexCAN_Init+0x60>
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    aa5c:	9b01      	ldr	r3, [sp, #4]
    aa5e:	681b      	ldr	r3, [r3, #0]
    aa60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    aa64:	2b00      	cmp	r3, #0
    aa66:	d1e9      	bne.n	aa3c <FlexCAN_Init+0x34>
        }
    }
    if (FLEXCAN_STATUS_SUCCESS == returnResult)
    aa68:	9b04      	ldr	r3, [sp, #16]
    aa6a:	2b00      	cmp	r3, #0
    aa6c:	d136      	bne.n	aadc <FlexCAN_Init+0xd4>
    {
        /* Avoid Abort Transmission, use Inactive MB */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_AEN_MASK) | FLEXCAN_MCR_AEN(1U);
    aa6e:	9b01      	ldr	r3, [sp, #4]
    aa70:	681b      	ldr	r3, [r3, #0]
    aa72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    aa76:	9b01      	ldr	r3, [sp, #4]
    aa78:	601a      	str	r2, [r3, #0]
        /* Clear FlexCAN memory */
        FlexCAN_ClearRAM(base);
    aa7a:	9801      	ldr	r0, [sp, #4]
    aa7c:	f7ff fd40 	bl	a500 <FlexCAN_ClearRAM>
        /* Rx global mask*/
        (base->RXMGMASK) = (uint32)(FLEXCAN_RXMGMASK_MG_MASK);
    aa80:	9b01      	ldr	r3, [sp, #4]
    aa82:	f04f 32ff 	mov.w	r2, #4294967295
    aa86:	611a      	str	r2, [r3, #16]
        /* Rx reg 14 mask*/
        (base->RX14MASK) =  (uint32)(FLEXCAN_RX14MASK_RX14M_MASK);
    aa88:	9b01      	ldr	r3, [sp, #4]
    aa8a:	f04f 32ff 	mov.w	r2, #4294967295
    aa8e:	615a      	str	r2, [r3, #20]
        /* Rx reg 15 mask*/
        (base->RX15MASK) = (uint32)(FLEXCAN_RX15MASK_RX15M_MASK);
    aa90:	9b01      	ldr	r3, [sp, #4]
    aa92:	f04f 32ff 	mov.w	r2, #4294967295
    aa96:	619a      	str	r2, [r3, #24]
        /* Disable all MB interrupts */
        (base->IMASK1) = 0x0;
    aa98:	9b01      	ldr	r3, [sp, #4]
    aa9a:	2200      	movs	r2, #0
    aa9c:	629a      	str	r2, [r3, #40]	; 0x28
        /* Clear all MB interrupt flags */
        (base->IFLAG1) = FLEXCAN_IMASK1_BUF31TO0M_MASK;
    aa9e:	9b01      	ldr	r3, [sp, #4]
    aaa0:	f04f 32ff 	mov.w	r2, #4294967295
    aaa4:	631a      	str	r2, [r3, #48]	; 0x30
            (base->IMASK4) = 0x0;
            (base->IFLAG4) = FLEXCAN_IMASK4_BUF127TO96M_MASK;
        }
#endif
        /* Clear all error interrupt flags */
        (base->ESR1) = FLEXCAN_IP_ALL_INT;
    aaa6:	9b01      	ldr	r3, [sp, #4]
    aaa8:	4a10      	ldr	r2, [pc, #64]	; (aaec <FlexCAN_Init+0xe4>)
    aaaa:	621a      	str	r2, [r3, #32]
        /* clear registers which are not effected by soft reset */
        base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    aaac:	9b01      	ldr	r3, [sp, #4]
    aaae:	2200      	movs	r2, #0
    aab0:	605a      	str	r2, [r3, #4]
        base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    aab2:	9b01      	ldr	r3, [sp, #4]
    aab4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    aab8:	635a      	str	r2, [r3, #52]	; 0x34
        base->CBT   = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    aaba:	9b01      	ldr	r3, [sp, #4]
    aabc:	2200      	movs	r2, #0
    aabe:	651a      	str	r2, [r3, #80]	; 0x50
        base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
        base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    aac0:	9801      	ldr	r0, [sp, #4]
    aac2:	f000 f85b 	bl	ab7c <FlexCAN_IsFDAvailable>
    aac6:	4603      	mov	r3, r0
    aac8:	2b00      	cmp	r3, #0
    aaca:	d007      	beq.n	aadc <FlexCAN_Init+0xd4>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    aacc:	9b01      	ldr	r3, [sp, #4]
    aace:	2200      	movs	r2, #0
    aad0:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    aad4:	9b01      	ldr	r3, [sp, #4]
    aad6:	4a06      	ldr	r2, [pc, #24]	; (aaf0 <FlexCAN_Init+0xe8>)
    aad8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    #if defined(CAN_FEATURE_S32K1XX)
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
#endif /* (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON) */
    }
    return returnResult;
    aadc:	9b04      	ldr	r3, [sp, #16]
}
    aade:	4618      	mov	r0, r3
    aae0:	b007      	add	sp, #28
    aae2:	f85d fb04 	ldr.w	pc, [sp], #4
    aae6:	bf00      	nop
    aae8:	000f4240 	.word	0x000f4240
    aaec:	003b0006 	.word	0x003b0006
    aaf0:	80004100 	.word	0x80004100

0000aaf4 <FlexCAN_EnableRxFifo>:
 * This function will enable the Rx FIFO feature.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnableRxFifo(FLEXCAN_Type * base,
                                         uint32 numOfFilters)
{
    aaf4:	b500      	push	{lr}
    aaf6:	b087      	sub	sp, #28
    aaf8:	9001      	str	r0, [sp, #4]
    aafa:	9100      	str	r1, [sp, #0]
    uint32 i;
    uint16 noOfMbx = (uint16)FlexCAN_GetMaxMbNum(base);
    aafc:	9801      	ldr	r0, [sp, #4]
    aafe:	f7ff fdfb 	bl	a6f8 <FlexCAN_GetMaxMbNum>
    ab02:	4603      	mov	r3, r0
    ab04:	f8ad 300e 	strh.w	r3, [sp, #14]
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    ab08:	2300      	movs	r3, #0
    ab0a:	9304      	str	r3, [sp, #16]

    /* RxFIFO cannot be enabled if FD is enabled */
    if (((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U)
    ab0c:	9b01      	ldr	r3, [sp, #4]
    ab0e:	681b      	ldr	r3, [r3, #0]
    ab10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    ab14:	2b00      	cmp	r3, #0
    ab16:	d001      	beq.n	ab1c <FlexCAN_EnableRxFifo+0x28>
    {
        stat = FLEXCAN_STATUS_ERROR;
    ab18:	2301      	movs	r3, #1
    ab1a:	9304      	str	r3, [sp, #16]
    }
    if (FLEXCAN_STATUS_SUCCESS == stat)
    ab1c:	9b04      	ldr	r3, [sp, #16]
    ab1e:	2b00      	cmp	r3, #0
    ab20:	d127      	bne.n	ab72 <FlexCAN_EnableRxFifo+0x7e>
    {
        /* Enable RX FIFO */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_RFEN_MASK) | FLEXCAN_MCR_RFEN(1U);
    ab22:	9b01      	ldr	r3, [sp, #4]
    ab24:	681b      	ldr	r3, [r3, #0]
    ab26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
    ab2a:	9b01      	ldr	r3, [sp, #4]
    ab2c:	601a      	str	r2, [r3, #0]
        /* Set the number of the RX FIFO filters needed */
        base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RFFN_MASK) | ((numOfFilters << FLEXCAN_CTRL2_RFFN_SHIFT) & FLEXCAN_CTRL2_RFFN_MASK);
    ab2e:	9b01      	ldr	r3, [sp, #4]
    ab30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ab32:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    ab36:	9b00      	ldr	r3, [sp, #0]
    ab38:	061b      	lsls	r3, r3, #24
    ab3a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    ab3e:	431a      	orrs	r2, r3
    ab40:	9b01      	ldr	r3, [sp, #4]
    ab42:	635a      	str	r2, [r3, #52]	; 0x34
        /* RX FIFO global mask, take in consideration all filter fields*/
        (base->RXFGMASK) = FLEXCAN_RXFGMASK_FGM_MASK;
    ab44:	9b01      	ldr	r3, [sp, #4]
    ab46:	f04f 32ff 	mov.w	r2, #4294967295
    ab4a:	649a      	str	r2, [r3, #72]	; 0x48

        for (i = 0U; i < noOfMbx; i++)
    ab4c:	2300      	movs	r3, #0
    ab4e:	9305      	str	r3, [sp, #20]
    ab50:	e00a      	b.n	ab68 <FlexCAN_EnableRxFifo+0x74>
        {
            /* RX individual mask */
            base->RXIMR[i] = (FLEXCAN_RXIMR_MI_MASK << FLEXCAN_IP_ID_EXT_SHIFT) & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    ab52:	9b01      	ldr	r3, [sp, #4]
    ab54:	9a05      	ldr	r2, [sp, #20]
    ab56:	f502 7208 	add.w	r2, r2, #544	; 0x220
    ab5a:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    ab5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0U; i < noOfMbx; i++)
    ab62:	9b05      	ldr	r3, [sp, #20]
    ab64:	3301      	adds	r3, #1
    ab66:	9305      	str	r3, [sp, #20]
    ab68:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ab6c:	9a05      	ldr	r2, [sp, #20]
    ab6e:	429a      	cmp	r2, r3
    ab70:	d3ef      	bcc.n	ab52 <FlexCAN_EnableRxFifo+0x5e>
        }
    }
    return stat;
    ab72:	9b04      	ldr	r3, [sp, #16]
}
    ab74:	4618      	mov	r0, r3
    ab76:	b007      	add	sp, #28
    ab78:	f85d fb04 	ldr.w	pc, [sp], #4

0000ab7c <FlexCAN_IsFDAvailable>:
 * Description   : Checks if FlexCAN has FD Support.
 * This function is private.
 *
 *END**************************************************************************/
boolean FlexCAN_IsFDAvailable(const FLEXCAN_Type * base)
{
    ab7c:	b084      	sub	sp, #16
    ab7e:	9001      	str	r0, [sp, #4]
    uint32 i=0U;
    ab80:	2300      	movs	r3, #0
    ab82:	9303      	str	r3, [sp, #12]
    static FLEXCAN_Type * const flexcanBase[] = CAN_BASE_PTRS_HAS_FD;
    boolean returnValue = FALSE;
    ab84:	2300      	movs	r3, #0
    ab86:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    ab8a:	2300      	movs	r3, #0
    ab8c:	9303      	str	r3, [sp, #12]
    ab8e:	e00d      	b.n	abac <FlexCAN_IsFDAvailable+0x30>
    {
        if (base == flexcanBase[i])
    ab90:	4a0a      	ldr	r2, [pc, #40]	; (abbc <FlexCAN_IsFDAvailable+0x40>)
    ab92:	9b03      	ldr	r3, [sp, #12]
    ab94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab98:	9a01      	ldr	r2, [sp, #4]
    ab9a:	429a      	cmp	r2, r3
    ab9c:	d103      	bne.n	aba6 <FlexCAN_IsFDAvailable+0x2a>
        {
            returnValue = TRUE;
    ab9e:	2301      	movs	r3, #1
    aba0:	f88d 300b 	strb.w	r3, [sp, #11]
            break;
    aba4:	e005      	b.n	abb2 <FlexCAN_IsFDAvailable+0x36>
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    aba6:	9b03      	ldr	r3, [sp, #12]
    aba8:	3301      	adds	r3, #1
    abaa:	9303      	str	r3, [sp, #12]
    abac:	9b03      	ldr	r3, [sp, #12]
    abae:	2b00      	cmp	r3, #0
    abb0:	d0ee      	beq.n	ab90 <FlexCAN_IsFDAvailable+0x14>
        }
    }

    return returnValue;
    abb2:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    abb6:	4618      	mov	r0, r3
    abb8:	b004      	add	sp, #16
    abba:	4770      	bx	lr
    abbc:	0000e95c 	.word	0x0000e95c

0000abc0 <FlexCAN_SetPayloadSize>:
 * Description   : Sets the payload size of the MBs.
 *
 *END**************************************************************************/
void FlexCAN_SetPayloadSize(FLEXCAN_Type * base,
                            const Flexcan_Ip_PayloadSizeType * payloadSize)
{
    abc0:	b500      	push	{lr}
    abc2:	b085      	sub	sp, #20
    abc4:	9001      	str	r0, [sp, #4]
    abc6:	9100      	str	r1, [sp, #0]
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
    DevAssert(FlexCAN_IsFDEnabled(base) || (FLEXCAN_PAYLOAD_SIZE_8 == payloadSize->payloadBlock3));
    #endif
#endif
    /* If FD is not enabled, only 8 bytes payload is supported */
    if (FlexCAN_IsFDEnabled(base))
    abc8:	9801      	ldr	r0, [sp, #4]
    abca:	f7ff fbd6 	bl	a37a <FlexCAN_IsFDEnabled>
    abce:	4603      	mov	r3, r0
    abd0:	2b00      	cmp	r3, #0
    abd2:	d011      	beq.n	abf8 <FlexCAN_SetPayloadSize+0x38>
    {
        tmp = base->FDCTRL;
    abd4:	9b01      	ldr	r3, [sp, #4]
    abd6:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    abda:	9303      	str	r3, [sp, #12]
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR0_MASK);
    abdc:	9b03      	ldr	r3, [sp, #12]
    abde:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    abe2:	9303      	str	r3, [sp, #12]
        tmp |= ((uint32)payloadSize->payloadBlock0) << FLEXCAN_FDCTRL_MBDSR0_SHIFT;
    abe4:	9b00      	ldr	r3, [sp, #0]
    abe6:	681b      	ldr	r3, [r3, #0]
    abe8:	041b      	lsls	r3, r3, #16
    abea:	9a03      	ldr	r2, [sp, #12]
    abec:	4313      	orrs	r3, r2
    abee:	9303      	str	r3, [sp, #12]
#endif
#if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR3_MASK);
        tmp |= ((uint32)payloadSize->payloadBlock3) << FLEXCAN_FDCTRL_MBDSR3_SHIFT;
#endif
        base->FDCTRL = tmp;
    abf0:	9b01      	ldr	r3, [sp, #4]
    abf2:	9a03      	ldr	r2, [sp, #12]
    abf4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
}
    abf8:	bf00      	nop
    abfa:	b005      	add	sp, #20
    abfc:	f85d fb04 	ldr.w	pc, [sp], #4

0000ac00 <FlexCAN_GetPayloadSize>:
 * Function Name : FLEXCAN_GetPayloadSize
 * Description   : Returns the payload size of the MBs (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_GetPayloadSize(const FLEXCAN_Type * base, uint8 mbdsrIdx)
{
    ac00:	b500      	push	{lr}
    ac02:	b085      	sub	sp, #20
    ac04:	9001      	str	r0, [sp, #4]
    ac06:	460b      	mov	r3, r1
    ac08:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 payloadSize = 0U;
    ac0c:	2300      	movs	r3, #0
    ac0e:	9303      	str	r3, [sp, #12]

#if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    ac10:	9801      	ldr	r0, [sp, #4]
    ac12:	f7ff ffb3 	bl	ab7c <FlexCAN_IsFDAvailable>
    ac16:	4603      	mov	r3, r0
    ac18:	2b00      	cmp	r3, #0
    ac1a:	d019      	beq.n	ac50 <FlexCAN_GetPayloadSize+0x50>
    {
#endif /* defined(CAN_FEATURE_S32K1XX) */
    switch (mbdsrIdx)
    ac1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ac20:	2b00      	cmp	r3, #0
    ac22:	d10a      	bne.n	ac3a <FlexCAN_GetPayloadSize+0x3a>
    {
        case 0 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    ac24:	9b01      	ldr	r3, [sp, #4]
    ac26:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ac2a:	0c1b      	lsrs	r3, r3, #16
    ac2c:	f003 0303 	and.w	r3, r3, #3
    ac30:	2208      	movs	r2, #8
    ac32:	fa02 f303 	lsl.w	r3, r2, r3
    ac36:	9303      	str	r3, [sp, #12]
    ac38:	e00c      	b.n	ac54 <FlexCAN_GetPayloadSize+0x54>
        case 2 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR2_MASK) >> FLEXCAN_FDCTRL_MBDSR2_SHIFT); } break;
    #endif
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        case 3 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR3_MASK) >> FLEXCAN_FDCTRL_MBDSR3_SHIFT); } break;
    #endif
        default :{  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    ac3a:	9b01      	ldr	r3, [sp, #4]
    ac3c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ac40:	0c1b      	lsrs	r3, r3, #16
    ac42:	f003 0303 	and.w	r3, r3, #3
    ac46:	2208      	movs	r2, #8
    ac48:	fa02 f303 	lsl.w	r3, r2, r3
    ac4c:	9303      	str	r3, [sp, #12]
    ac4e:	e001      	b.n	ac54 <FlexCAN_GetPayloadSize+0x54>
    }
    #if defined(CAN_FEATURE_S32K1XX)
    }
    else
    {
        payloadSize = 8U;
    ac50:	2308      	movs	r3, #8
    ac52:	9303      	str	r3, [sp, #12]
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
    return (uint8)payloadSize;
    ac54:	9b03      	ldr	r3, [sp, #12]
    ac56:	b2db      	uxtb	r3, r3
}
    ac58:	4618      	mov	r0, r3
    ac5a:	b005      	add	sp, #20
    ac5c:	f85d fb04 	ldr.w	pc, [sp], #4

0000ac60 <FlexCAN_GetMbPayloadSize>:



uint8 FlexCAN_GetMbPayloadSize(const FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    ac60:	b500      	push	{lr}
    ac62:	b087      	sub	sp, #28
    ac64:	9001      	str	r0, [sp, #4]
    ac66:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    ac68:	2308      	movs	r3, #8
    ac6a:	f88d 3014 	strb.w	r3, [sp, #20]
    uint32 ramBlockSize = 512U;
    ac6e:	f44f 7300 	mov.w	r3, #512	; 0x200
    ac72:	9304      	str	r3, [sp, #16]
    uint8 can_real_payload = 8U;
    ac74:	2308      	movs	r3, #8
    ac76:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 maxMbBlockNum = 0U;
    ac7a:	2300      	movs	r3, #0
    ac7c:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8 i=0U;
    ac80:	2300      	movs	r3, #0
    ac82:	f88d 3015 	strb.w	r3, [sp, #21]
    uint8 mb_size = 0U;
    ac86:	2300      	movs	r3, #0
    ac88:	f88d 300f 	strb.w	r3, [sp, #15]

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    ac8c:	2300      	movs	r3, #0
    ac8e:	f88d 3015 	strb.w	r3, [sp, #21]
    ac92:	e024      	b.n	acde <FlexCAN_GetMbPayloadSize+0x7e>
    {
        /* Check that the number of MBs is supported based on the payload size*/
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        can_real_payload = FlexCAN_GetPayloadSize(base, i);
    ac94:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ac98:	4619      	mov	r1, r3
    ac9a:	9801      	ldr	r0, [sp, #4]
    ac9c:	f7ff ffb0 	bl	ac00 <FlexCAN_GetPayloadSize>
    aca0:	4603      	mov	r3, r0
    aca2:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* Else can_real_payload will remain as 8 payload size */
        mb_size = (uint8)(can_real_payload + arbitration_field_size);
    aca6:	f89d 2017 	ldrb.w	r2, [sp, #23]
    acaa:	f89d 3014 	ldrb.w	r3, [sp, #20]
    acae:	4413      	add	r3, r2
    acb0:	f88d 300f 	strb.w	r3, [sp, #15]
        maxMbBlockNum += (uint8)(ramBlockSize / mb_size);
    acb4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    acb8:	9a04      	ldr	r2, [sp, #16]
    acba:	fbb2 f3f3 	udiv	r3, r2, r3
    acbe:	b2da      	uxtb	r2, r3
    acc0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    acc4:	4413      	add	r3, r2
    acc6:	f88d 3016 	strb.w	r3, [sp, #22]
        if (maxMbBlockNum > maxMsgBuffNum)
    acca:	f89d 3016 	ldrb.w	r3, [sp, #22]
    acce:	9a00      	ldr	r2, [sp, #0]
    acd0:	429a      	cmp	r2, r3
    acd2:	d309      	bcc.n	ace8 <FlexCAN_GetMbPayloadSize+0x88>
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    acd4:	f89d 3015 	ldrb.w	r3, [sp, #21]
    acd8:	3301      	adds	r3, #1
    acda:	f88d 3015 	strb.w	r3, [sp, #21]
    acde:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ace2:	2b00      	cmp	r3, #0
    ace4:	d0d6      	beq.n	ac94 <FlexCAN_GetMbPayloadSize+0x34>
    ace6:	e000      	b.n	acea <FlexCAN_GetMbPayloadSize+0x8a>
        {
            break;
    ace8:	bf00      	nop
    {
        can_real_payload = 64U;
    }
 #endif

    return can_real_payload;
    acea:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    acee:	4618      	mov	r0, r3
    acf0:	b007      	add	sp, #28
    acf2:	f85d fb04 	ldr.w	pc, [sp], #4

0000acf6 <FlexCAN_LockRxMsgBuff>:
 * Description   : Lock the RX message buffer.
 * This function will lock the RX message buffer.
 *
 *END**************************************************************************/
void FlexCAN_LockRxMsgBuff(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    acf6:	b500      	push	{lr}
    acf8:	b085      	sub	sp, #20
    acfa:	9001      	str	r0, [sp, #4]
    acfc:	9100      	str	r1, [sp, #0]
    volatile const uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    acfe:	9900      	ldr	r1, [sp, #0]
    ad00:	9801      	ldr	r0, [sp, #4]
    ad02:	f7ff fc7f 	bl	a604 <FlexCAN_GetMsgBuffRegion>
    ad06:	9003      	str	r0, [sp, #12]

    /* Lock the mailbox by reading it */
    (void)*flexcan_mb;
    ad08:	9b03      	ldr	r3, [sp, #12]
    ad0a:	681b      	ldr	r3, [r3, #0]
}
    ad0c:	bf00      	nop
    ad0e:	b005      	add	sp, #20
    ad10:	f85d fb04 	ldr.w	pc, [sp], #4

0000ad14 <FlexCAN_SetMsgBuffIntCmd>:
                                               uint8 u8Instance,
                                               uint32 msgBuffIdx,
                                               boolean enable,
                                               boolean bIsIntActive
                                              )
{
    ad14:	b500      	push	{lr}
    ad16:	b087      	sub	sp, #28
    ad18:	9003      	str	r0, [sp, #12]
    ad1a:	9201      	str	r2, [sp, #4]
    ad1c:	461a      	mov	r2, r3
    ad1e:	460b      	mov	r3, r1
    ad20:	f88d 300b 	strb.w	r3, [sp, #11]
    ad24:	4613      	mov	r3, r2
    ad26:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp;
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    ad2a:	2300      	movs	r3, #0
    ad2c:	9305      	str	r3, [sp, #20]

        /* Enable the corresponding message buffer Interrupt */
        temp = 1UL << (msgBuffIdx % 32U);
    ad2e:	9b01      	ldr	r3, [sp, #4]
    ad30:	f003 031f 	and.w	r3, r3, #31
    ad34:	2201      	movs	r2, #1
    ad36:	fa02 f303 	lsl.w	r3, r2, r3
    ad3a:	9304      	str	r3, [sp, #16]
        if (msgBuffIdx < 32U)
    ad3c:	9b01      	ldr	r3, [sp, #4]
    ad3e:	2b1f      	cmp	r3, #31
    ad40:	d837      	bhi.n	adb2 <FlexCAN_SetMsgBuffIntCmd+0x9e>
        {
            if (enable)
    ad42:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ad46:	2b00      	cmp	r3, #0
    ad48:	d01b      	beq.n	ad82 <FlexCAN_SetMsgBuffIntCmd+0x6e>
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    ad4a:	f001 fcf9 	bl	c740 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) | (temp));
    ad4e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad52:	4a1a      	ldr	r2, [pc, #104]	; (adbc <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ad54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    ad58:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad5c:	9a04      	ldr	r2, [sp, #16]
    ad5e:	430a      	orrs	r2, r1
    ad60:	4916      	ldr	r1, [pc, #88]	; (adbc <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ad62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TRUE == bIsIntActive)
    ad66:	f89d 3020 	ldrb.w	r3, [sp, #32]
    ad6a:	2b00      	cmp	r3, #0
    ad6c:	d006      	beq.n	ad7c <FlexCAN_SetMsgBuffIntCmd+0x68>
                {
                    base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    ad6e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad72:	4a12      	ldr	r2, [pc, #72]	; (adbc <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ad74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    ad78:	9b03      	ldr	r3, [sp, #12]
    ad7a:	629a      	str	r2, [r3, #40]	; 0x28
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    ad7c:	f001 fd0c 	bl	c798 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
    ad80:	e017      	b.n	adb2 <FlexCAN_SetMsgBuffIntCmd+0x9e>
            }
            else
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    ad82:	f001 fcdd 	bl	c740 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) & ~(temp));
    ad86:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad8a:	4a0c      	ldr	r2, [pc, #48]	; (adbc <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ad8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    ad90:	9b04      	ldr	r3, [sp, #16]
    ad92:	43da      	mvns	r2, r3
    ad94:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad98:	400a      	ands	r2, r1
    ad9a:	4908      	ldr	r1, [pc, #32]	; (adbc <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ad9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    ada0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ada4:	4a05      	ldr	r2, [pc, #20]	; (adbc <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ada6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    adaa:	9b03      	ldr	r3, [sp, #12]
    adac:	629a      	str	r2, [r3, #40]	; 0x28
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    adae:	f001 fcf3 	bl	c798 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
            }
        }
#endif /* if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */

    return stat;
    adb2:	9b05      	ldr	r3, [sp, #20]
}
    adb4:	4618      	mov	r0, r3
    adb6:	b007      	add	sp, #28
    adb8:	f85d fb04 	ldr.w	pc, [sp], #4
    adbc:	1fff8fa8 	.word	0x1fff8fa8

0000adc0 <FLEXCAN_ClearMsgBuffIntCmd>:
void FLEXCAN_ClearMsgBuffIntCmd(FLEXCAN_Type * pBase,
                                uint8 u8Instance,
                                uint32 mb_idx,
                                boolean bIsIntActive
                               )
{
    adc0:	b500      	push	{lr}
    adc2:	b087      	sub	sp, #28
    adc4:	9003      	str	r0, [sp, #12]
    adc6:	9201      	str	r2, [sp, #4]
    adc8:	461a      	mov	r2, r3
    adca:	460b      	mov	r3, r1
    adcc:	f88d 300b 	strb.w	r3, [sp, #11]
    add0:	4613      	mov	r3, r2
    add2:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp = (1UL << (mb_idx % 32U));
    add6:	9b01      	ldr	r3, [sp, #4]
    add8:	f003 031f 	and.w	r3, r3, #31
    addc:	2201      	movs	r2, #1
    adde:	fa02 f303 	lsl.w	r3, r2, r3
    ade2:	9305      	str	r3, [sp, #20]

 /* Stop the running transfer. */
    if (mb_idx < 32U)
    ade4:	9b01      	ldr	r3, [sp, #4]
    ade6:	2b1f      	cmp	r3, #31
    ade8:	d818      	bhi.n	ae1c <FLEXCAN_ClearMsgBuffIntCmd+0x5c>
    {
          /* Start critical section: implementation depends on integrator */
          SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    adea:	f001 fa6b 	bl	c2c4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
          FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = (pBase->IMASK1 & (~temp));
    adee:	9b03      	ldr	r3, [sp, #12]
    adf0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    adf2:	9b05      	ldr	r3, [sp, #20]
    adf4:	43da      	mvns	r2, r3
    adf6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    adfa:	400a      	ands	r2, r1
    adfc:	4909      	ldr	r1, [pc, #36]	; (ae24 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    adfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          if (TRUE == bIsIntActive)
    ae02:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ae06:	2b00      	cmp	r3, #0
    ae08:	d006      	beq.n	ae18 <FLEXCAN_ClearMsgBuffIntCmd+0x58>
          {
              pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    ae0a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ae0e:	4a05      	ldr	r2, [pc, #20]	; (ae24 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    ae10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    ae14:	9b03      	ldr	r3, [sp, #12]
    ae16:	629a      	str	r2, [r3, #40]	; 0x28
          }
          /* End critical section: implementation depends on integrator */
          SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    ae18:	f001 fa80 	bl	c31c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    }
#endif /* #if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */
}
    ae1c:	bf00      	nop
    ae1e:	b007      	add	sp, #28
    ae20:	f85d fb04 	ldr.w	pc, [sp], #4
    ae24:	1fff8fa8 	.word	0x1fff8fa8

0000ae28 <FlexCAN_DisableInterrupts>:


void FlexCAN_DisableInterrupts(FLEXCAN_Type * pBase)
{
    ae28:	b082      	sub	sp, #8
    ae2a:	9001      	str	r0, [sp, #4]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = 0U;
    ae2c:	9b01      	ldr	r3, [sp, #4]
    ae2e:	2200      	movs	r2, #0
    ae30:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = 0U;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    ae32:	bf00      	nop
    ae34:	b002      	add	sp, #8
    ae36:	4770      	bx	lr

0000ae38 <FlexCAN_EnableInterrupts>:

void FlexCAN_EnableInterrupts(FLEXCAN_Type * pBase, uint8 u8Instance)
{
    ae38:	b082      	sub	sp, #8
    ae3a:	9001      	str	r0, [sp, #4]
    ae3c:	460b      	mov	r3, r1
    ae3e:	f88d 3003 	strb.w	r3, [sp, #3]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    ae42:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ae46:	4a04      	ldr	r2, [pc, #16]	; (ae58 <FlexCAN_EnableInterrupts+0x20>)
    ae48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    ae4c:	9b01      	ldr	r3, [sp, #4]
    ae4e:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = FlexCAN_Ip_au32ImaskBuff[u8Instance][3U];
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    ae50:	bf00      	nop
    ae52:	b002      	add	sp, #8
    ae54:	4770      	bx	lr
    ae56:	bf00      	nop
    ae58:	1fff8fa8 	.word	0x1fff8fa8

0000ae5c <FlexCAN_SetRxMsgBuff>:
void FlexCAN_SetRxMsgBuff(const FLEXCAN_Type * base,
                          uint32 msgBuffIdx,
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId
                         )
{
    ae5c:	b500      	push	{lr}
    ae5e:	b087      	sub	sp, #28
    ae60:	9003      	str	r0, [sp, #12]
    ae62:	9102      	str	r1, [sp, #8]
    ae64:	9201      	str	r2, [sp, #4]
    ae66:	9300      	str	r3, [sp, #0]
    volatile uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    ae68:	9902      	ldr	r1, [sp, #8]
    ae6a:	9803      	ldr	r0, [sp, #12]
    ae6c:	f7ff fbca 	bl	a604 <FlexCAN_GetMsgBuffRegion>
    ae70:	9005      	str	r0, [sp, #20]
    volatile uint32 * flexcan_mb_id = &flexcan_mb[1];
    ae72:	9b05      	ldr	r3, [sp, #20]
    ae74:	3304      	adds	r3, #4
    ae76:	9304      	str	r3, [sp, #16]
    DevAssert(cs != NULL_PTR);
#endif


    /* Clean up the arbitration field area */
    *flexcan_mb = 0;
    ae78:	9b05      	ldr	r3, [sp, #20]
    ae7a:	2200      	movs	r2, #0
    ae7c:	601a      	str	r2, [r3, #0]
    *flexcan_mb_id = 0;
    ae7e:	9b04      	ldr	r3, [sp, #16]
    ae80:	2200      	movs	r2, #0
    ae82:	601a      	str	r2, [r3, #0]

    /* Set the ID according the format structure */
    if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    ae84:	9b01      	ldr	r3, [sp, #4]
    ae86:	685b      	ldr	r3, [r3, #4]
    ae88:	2b01      	cmp	r3, #1
    ae8a:	d119      	bne.n	aec0 <FlexCAN_SetRxMsgBuff+0x64>
    {
        /* Set IDE */
        *flexcan_mb |= FLEXCAN_IP_CS_IDE_MASK;
    ae8c:	9b05      	ldr	r3, [sp, #20]
    ae8e:	681b      	ldr	r3, [r3, #0]
    ae90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    ae94:	9b05      	ldr	r3, [sp, #20]
    ae96:	601a      	str	r2, [r3, #0]

        /* Clear SRR bit */
        *flexcan_mb &= ~FLEXCAN_IP_CS_SRR_MASK;
    ae98:	9b05      	ldr	r3, [sp, #20]
    ae9a:	681b      	ldr	r3, [r3, #0]
    ae9c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
    aea0:	9b05      	ldr	r3, [sp, #20]
    aea2:	601a      	str	r2, [r3, #0]

        /* ID [28-0] */
        *flexcan_mb_id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    aea4:	9b04      	ldr	r3, [sp, #16]
    aea6:	681b      	ldr	r3, [r3, #0]
    aea8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    aeac:	9b04      	ldr	r3, [sp, #16]
    aeae:	601a      	str	r2, [r3, #0]
        *flexcan_mb_id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    aeb0:	9b04      	ldr	r3, [sp, #16]
    aeb2:	681a      	ldr	r2, [r3, #0]
    aeb4:	9b00      	ldr	r3, [sp, #0]
    aeb6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    aeba:	431a      	orrs	r2, r3
    aebc:	9b04      	ldr	r3, [sp, #16]
    aebe:	601a      	str	r2, [r3, #0]
    }

    if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    aec0:	9b01      	ldr	r3, [sp, #4]
    aec2:	685b      	ldr	r3, [r3, #4]
    aec4:	2b00      	cmp	r3, #0
    aec6:	d116      	bne.n	aef6 <FlexCAN_SetRxMsgBuff+0x9a>
    {
        /* Make sure IDE and SRR are not set */
        *flexcan_mb &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    aec8:	9b05      	ldr	r3, [sp, #20]
    aeca:	681b      	ldr	r3, [r3, #0]
    aecc:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
    aed0:	9b05      	ldr	r3, [sp, #20]
    aed2:	601a      	str	r2, [r3, #0]

        /* ID[28-18] */
        *flexcan_mb_id &= ~FLEXCAN_IP_ID_STD_MASK;
    aed4:	9b04      	ldr	r3, [sp, #16]
    aed6:	681b      	ldr	r3, [r3, #0]
    aed8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    aedc:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    aee0:	9a04      	ldr	r2, [sp, #16]
    aee2:	6013      	str	r3, [r2, #0]
        *flexcan_mb_id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    aee4:	9b04      	ldr	r3, [sp, #16]
    aee6:	681a      	ldr	r2, [r3, #0]
    aee8:	9b00      	ldr	r3, [sp, #0]
    aeea:	0499      	lsls	r1, r3, #18
    aeec:	4b0e      	ldr	r3, [pc, #56]	; (af28 <FlexCAN_SetRxMsgBuff+0xcc>)
    aeee:	400b      	ands	r3, r1
    aef0:	431a      	orrs	r2, r3
    aef2:	9b04      	ldr	r3, [sp, #16]
    aef4:	601a      	str	r2, [r3, #0]
    }

    /* Set MB CODE */
    if ((uint32)FLEXCAN_RX_NOT_USED != cs->code)
    aef6:	9b01      	ldr	r3, [sp, #4]
    aef8:	681b      	ldr	r3, [r3, #0]
    aefa:	2b0f      	cmp	r3, #15
    aefc:	d00f      	beq.n	af1e <FlexCAN_SetRxMsgBuff+0xc2>
    {
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    aefe:	9b05      	ldr	r3, [sp, #20]
    af00:	681b      	ldr	r3, [r3, #0]
    af02:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    af06:	9b05      	ldr	r3, [sp, #20]
    af08:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    af0a:	9b05      	ldr	r3, [sp, #20]
    af0c:	681a      	ldr	r2, [r3, #0]
    af0e:	9b01      	ldr	r3, [sp, #4]
    af10:	681b      	ldr	r3, [r3, #0]
    af12:	061b      	lsls	r3, r3, #24
    af14:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    af18:	431a      	orrs	r2, r3
    af1a:	9b05      	ldr	r3, [sp, #20]
    af1c:	601a      	str	r2, [r3, #0]
    }
}
    af1e:	bf00      	nop
    af20:	b007      	add	sp, #28
    af22:	f85d fb04 	ldr.w	pc, [sp], #4
    af26:	bf00      	nop
    af28:	1ffc0000 	.word	0x1ffc0000

0000af2c <FlexCAN_GetMsgBuffTimestamp>:
 * Function Name : FlexCAN_GetMsgBuffTimestamp
 * Description   : Get a message buffer timestamp value.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMsgBuffTimestamp(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    af2c:	b500      	push	{lr}
    af2e:	b085      	sub	sp, #20
    af30:	9001      	str	r0, [sp, #4]
    af32:	9100      	str	r1, [sp, #0]
    uint32 TimeStamp = 0U;
    af34:	2300      	movs	r3, #0
    af36:	9303      	str	r3, [sp, #12]
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    af38:	9900      	ldr	r1, [sp, #0]
    af3a:	9801      	ldr	r0, [sp, #4]
    af3c:	f7ff fb62 	bl	a604 <FlexCAN_GetMsgBuffRegion>
    af40:	9002      	str	r0, [sp, #8]
        TimeStamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        TimeStamp = (uint32)((*Flexcan_Mb & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    af42:	9b02      	ldr	r3, [sp, #8]
    af44:	681b      	ldr	r3, [r3, #0]
    af46:	b29b      	uxth	r3, r3
    af48:	9303      	str	r3, [sp, #12]
    }
    return TimeStamp;
    af4a:	9b03      	ldr	r3, [sp, #12]
}
    af4c:	4618      	mov	r0, r3
    af4e:	b005      	add	sp, #20
    af50:	f85d fb04 	ldr.w	pc, [sp], #4

0000af54 <FlexCAN_GetMsgBuff>:
 *END**************************************************************************/
void FlexCAN_GetMsgBuff(const FLEXCAN_Type * base,
                        uint32 msgBuffIdx,
                        Flexcan_Ip_MsgBuffType * msgBuff
                       )
{
    af54:	b500      	push	{lr}
    af56:	b08d      	sub	sp, #52	; 0x34
    af58:	9003      	str	r0, [sp, #12]
    af5a:	9102      	str	r1, [sp, #8]
    af5c:	9201      	str	r2, [sp, #4]

    uint8 i;
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    af5e:	9902      	ldr	r1, [sp, #8]
    af60:	9803      	ldr	r0, [sp, #12]
    af62:	f7ff fb4f 	bl	a604 <FlexCAN_GetMsgBuffRegion>
    af66:	900a      	str	r0, [sp, #40]	; 0x28
    volatile const uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    af68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    af6a:	3304      	adds	r3, #4
    af6c:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const uint8 * Flexcan_Mb_Data = (volatile const uint8 *)(&Flexcan_Mb[2]);
    af6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    af70:	3308      	adds	r3, #8
    af72:	9308      	str	r3, [sp, #32]
    volatile const uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    af74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    af76:	3308      	adds	r3, #8
    af78:	9307      	str	r3, [sp, #28]
    uint32 * MsgBuff_Data_32 = NULL_PTR;
    af7a:	2300      	movs	r3, #0
    af7c:	9306      	str	r3, [sp, #24]
    uint32 MbWord;

    uint8 Flexcan_Mb_Dlc_Value = (uint8)(((*Flexcan_Mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    af7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    af80:	681b      	ldr	r3, [r3, #0]
    af82:	0c1b      	lsrs	r3, r3, #16
    af84:	b2db      	uxtb	r3, r3
    af86:	f003 030f 	and.w	r3, r3, #15
    af8a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Payload_Size = FlexCAN_ComputePayloadSize(Flexcan_Mb_Dlc_Value);
    af8e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    af92:	4618      	mov	r0, r3
    af94:	f7ff faed 	bl	a572 <FlexCAN_ComputePayloadSize>
    af98:	4603      	mov	r3, r0
    af9a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(msgBuff != NULL_PTR);
#endif
    /* Asign after NULL Check */
    MsgBuff_Data_32 = (uint32 *)(msgBuff->data);
    af9e:	9b01      	ldr	r3, [sp, #4]
    afa0:	3308      	adds	r3, #8
    afa2:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    /* Payload Size is based on MBDSR for 1 MBDSR corresponds 32 * 8Bytes MBs  */
    if (Payload_Size > FlexCAN_GetMbPayloadSize(base, msgBuffIdx))
    afa4:	9902      	ldr	r1, [sp, #8]
    afa6:	9803      	ldr	r0, [sp, #12]
    afa8:	f7ff fe5a 	bl	ac60 <FlexCAN_GetMbPayloadSize>
    afac:	4603      	mov	r3, r0
    afae:	461a      	mov	r2, r3
    afb0:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    afb4:	4293      	cmp	r3, r2
    afb6:	d906      	bls.n	afc6 <FlexCAN_GetMsgBuff+0x72>
    {
        Payload_Size = FlexCAN_GetMbPayloadSize(base, msgBuffIdx);
    afb8:	9902      	ldr	r1, [sp, #8]
    afba:	9803      	ldr	r0, [sp, #12]
    afbc:	f7ff fe50 	bl	ac60 <FlexCAN_GetMbPayloadSize>
    afc0:	4603      	mov	r3, r0
    afc2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    msgBuff->dataLen = Payload_Size;
    afc6:	9b01      	ldr	r3, [sp, #4]
    afc8:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    afcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Get a MB field values */
    msgBuff->cs = *Flexcan_Mb;
    afd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    afd2:	681a      	ldr	r2, [r3, #0]
    afd4:	9b01      	ldr	r3, [sp, #4]
    afd6:	601a      	str	r2, [r3, #0]
    if ((msgBuff->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    afd8:	9b01      	ldr	r3, [sp, #4]
    afda:	681b      	ldr	r3, [r3, #0]
    afdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    afe0:	2b00      	cmp	r3, #0
    afe2:	d004      	beq.n	afee <FlexCAN_GetMsgBuff+0x9a>
    {
        msgBuff->msgId = (*Flexcan_Mb_Id);
    afe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    afe6:	681a      	ldr	r2, [r3, #0]
    afe8:	9b01      	ldr	r3, [sp, #4]
    afea:	605a      	str	r2, [r3, #4]
    afec:	e004      	b.n	aff8 <FlexCAN_GetMsgBuff+0xa4>
    }
    else
    {
        msgBuff->msgId = (*Flexcan_Mb_Id) >> FLEXCAN_IP_ID_STD_SHIFT;
    afee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aff0:	681b      	ldr	r3, [r3, #0]
    aff2:	0c9a      	lsrs	r2, r3, #18
    aff4:	9b01      	ldr	r3, [sp, #4]
    aff6:	605a      	str	r2, [r3, #4]
        msgBuff->time_stamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        msgBuff->time_stamp = (uint32)((msgBuff->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    aff8:	9b01      	ldr	r3, [sp, #4]
    affa:	681b      	ldr	r3, [r3, #0]
    affc:	b29a      	uxth	r2, r3
    affe:	9b01      	ldr	r3, [sp, #4]
    b000:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, MsgBuff_Data_32[i >> 2U]);
        }
    }

#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    b002:	2300      	movs	r3, #0
    b004:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    b008:	e025      	b.n	b056 <FlexCAN_GetMsgBuff+0x102>
    {
        MbWord = Flexcan_Mb_Data_32[i >> 2U];
    b00a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    b00e:	089b      	lsrs	r3, r3, #2
    b010:	b2db      	uxtb	r3, r3
    b012:	009b      	lsls	r3, r3, #2
    b014:	9a07      	ldr	r2, [sp, #28]
    b016:	4413      	add	r3, r2
    b018:	681b      	ldr	r3, [r3, #0]
    b01a:	9304      	str	r3, [sp, #16]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (MsgBuff_Data_32[i >> 2U]));
    b01c:	9b04      	ldr	r3, [sp, #16]
    b01e:	0e1a      	lsrs	r2, r3, #24
    b020:	9b04      	ldr	r3, [sp, #16]
    b022:	0a1b      	lsrs	r3, r3, #8
    b024:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    b028:	431a      	orrs	r2, r3
    b02a:	9b04      	ldr	r3, [sp, #16]
    b02c:	021b      	lsls	r3, r3, #8
    b02e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b032:	ea42 0103 	orr.w	r1, r2, r3
    b036:	9b04      	ldr	r3, [sp, #16]
    b038:	061a      	lsls	r2, r3, #24
    b03a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    b03e:	089b      	lsrs	r3, r3, #2
    b040:	b2db      	uxtb	r3, r3
    b042:	009b      	lsls	r3, r3, #2
    b044:	9806      	ldr	r0, [sp, #24]
    b046:	4403      	add	r3, r0
    b048:	430a      	orrs	r2, r1
    b04a:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    b04c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    b050:	3304      	adds	r3, #4
    b052:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    b056:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    b05a:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    b05e:	f023 0303 	bic.w	r3, r3, #3
    b062:	429a      	cmp	r2, r3
    b064:	d3d1      	bcc.n	b00a <FlexCAN_GetMsgBuff+0xb6>
    }

#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (; i < Payload_Size; i++)
    b066:	e014      	b.n	b092 <FlexCAN_GetMsgBuff+0x13e>
    {   /* Max allowed value for index is 63 */
        msgBuff->data[i] = Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(i)];
    b068:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    b06c:	f083 0303 	eor.w	r3, r3, #3
    b070:	b2db      	uxtb	r3, r3
    b072:	461a      	mov	r2, r3
    b074:	9b08      	ldr	r3, [sp, #32]
    b076:	441a      	add	r2, r3
    b078:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    b07c:	7812      	ldrb	r2, [r2, #0]
    b07e:	b2d1      	uxtb	r1, r2
    b080:	9a01      	ldr	r2, [sp, #4]
    b082:	4413      	add	r3, r2
    b084:	460a      	mov	r2, r1
    b086:	721a      	strb	r2, [r3, #8]
    for (; i < Payload_Size; i++)
    b088:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    b08c:	3301      	adds	r3, #1
    b08e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    b092:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    b096:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    b09a:	429a      	cmp	r2, r3
    b09c:	d3e4      	bcc.n	b068 <FlexCAN_GetMsgBuff+0x114>
    }
}
    b09e:	bf00      	nop
    b0a0:	bf00      	nop
    b0a2:	b00d      	add	sp, #52	; 0x34
    b0a4:	f85d fb04 	ldr.w	pc, [sp], #4

0000b0a8 <FlexCAN_SetTxMsgBuff>:
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId,
                          const uint8 * msgData,
                          const boolean isRemote
                         )
{
    b0a8:	b500      	push	{lr}
    b0aa:	b08d      	sub	sp, #52	; 0x34
    b0ac:	9003      	str	r0, [sp, #12]
    b0ae:	9102      	str	r1, [sp, #8]
    b0b0:	9201      	str	r2, [sp, #4]
    b0b2:	9300      	str	r3, [sp, #0]
    uint32 Flexcan_Mb_Config = 0;
    b0b4:	2300      	movs	r3, #0
    b0b6:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 DataByte;
    uint8 Dlc_Value;
    uint8 Payload_Size;
    volatile uint32 * Flexcan_Mb = pMbAddr;
    b0b8:	9b03      	ldr	r3, [sp, #12]
    b0ba:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    b0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b0be:	3304      	adds	r3, #4
    b0c0:	9308      	str	r3, [sp, #32]
    volatile uint8 * Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    b0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b0c4:	3308      	adds	r3, #8
    b0c6:	9307      	str	r3, [sp, #28]
    volatile uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    b0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b0ca:	3308      	adds	r3, #8
    b0cc:	9306      	str	r3, [sp, #24]
    const uint32 * MsgData_32 = (const uint32*)msgData;
    b0ce:	9b00      	ldr	r3, [sp, #0]
    b0d0:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(cs != NULL_PTR);
    #endif

        /* Clean up the arbitration field area and set TxMB Inactive */
        *Flexcan_Mb = (uint32)((((uint32)FLEXCAN_TX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    b0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b0d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    b0d8:	601a      	str	r2, [r3, #0]
        *Flexcan_Mb_Id = 0;
    b0da:	9b08      	ldr	r3, [sp, #32]
    b0dc:	2200      	movs	r2, #0
    b0de:	601a      	str	r2, [r3, #0]

        /* Compute the value of the DLC field */
        Dlc_Value = FlexCAN_ComputeDLCValue((uint8)cs->dataLen);
    b0e0:	9b02      	ldr	r3, [sp, #8]
    b0e2:	689b      	ldr	r3, [r3, #8]
    b0e4:	b2db      	uxtb	r3, r3
    b0e6:	4618      	mov	r0, r3
    b0e8:	f7ff f9f4 	bl	a4d4 <FlexCAN_ComputeDLCValue>
    b0ec:	4603      	mov	r3, r0
    b0ee:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Copy user's buffer into the message buffer data area */
        if (msgData != NULL_PTR)
    b0f2:	9b00      	ldr	r3, [sp, #0]
    b0f4:	2b00      	cmp	r3, #0
    b0f6:	d065      	beq.n	b1c4 <FlexCAN_SetTxMsgBuff+0x11c>
        {
#if (defined(S32K116) || defined (S32K118))
            (void)MsgData_32;
            DataByte = FlexCAN_DataTransferTxMsgBuff(Flexcan_Mb_Data_32, cs, msgData);
#else
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    b0f8:	2300      	movs	r3, #0
    b0fa:	930a      	str	r3, [sp, #40]	; 0x28
    b0fc:	e02c      	b.n	b158 <FlexCAN_SetTxMsgBuff+0xb0>
            {
                FLEXCAN_IP_SWAP_BYTES_IN_WORD((MsgData_32[DataByte >> 2U]), (Flexcan_Mb_Data_32[DataByte >> 2U]));
    b0fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b100:	089b      	lsrs	r3, r3, #2
    b102:	009b      	lsls	r3, r3, #2
    b104:	9a05      	ldr	r2, [sp, #20]
    b106:	4413      	add	r3, r2
    b108:	681b      	ldr	r3, [r3, #0]
    b10a:	0e1a      	lsrs	r2, r3, #24
    b10c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b10e:	089b      	lsrs	r3, r3, #2
    b110:	009b      	lsls	r3, r3, #2
    b112:	9905      	ldr	r1, [sp, #20]
    b114:	440b      	add	r3, r1
    b116:	681b      	ldr	r3, [r3, #0]
    b118:	0a1b      	lsrs	r3, r3, #8
    b11a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    b11e:	431a      	orrs	r2, r3
    b120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b122:	089b      	lsrs	r3, r3, #2
    b124:	009b      	lsls	r3, r3, #2
    b126:	9905      	ldr	r1, [sp, #20]
    b128:	440b      	add	r3, r1
    b12a:	681b      	ldr	r3, [r3, #0]
    b12c:	021b      	lsls	r3, r3, #8
    b12e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b132:	ea42 0103 	orr.w	r1, r2, r3
    b136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b138:	089b      	lsrs	r3, r3, #2
    b13a:	009b      	lsls	r3, r3, #2
    b13c:	9a05      	ldr	r2, [sp, #20]
    b13e:	4413      	add	r3, r2
    b140:	681b      	ldr	r3, [r3, #0]
    b142:	061a      	lsls	r2, r3, #24
    b144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b146:	089b      	lsrs	r3, r3, #2
    b148:	009b      	lsls	r3, r3, #2
    b14a:	9806      	ldr	r0, [sp, #24]
    b14c:	4403      	add	r3, r0
    b14e:	430a      	orrs	r2, r1
    b150:	601a      	str	r2, [r3, #0]
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    b152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b154:	3304      	adds	r3, #4
    b156:	930a      	str	r3, [sp, #40]	; 0x28
    b158:	9b02      	ldr	r3, [sp, #8]
    b15a:	689b      	ldr	r3, [r3, #8]
    b15c:	f023 0303 	bic.w	r3, r3, #3
    b160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b162:	429a      	cmp	r2, r3
    b164:	d3cb      	bcc.n	b0fe <FlexCAN_SetTxMsgBuff+0x56>
            }
#endif /* (defined(S32K116) || defined (S32K118)) */
            for ( ; DataByte < cs->dataLen; DataByte++)
    b166:	e00c      	b.n	b182 <FlexCAN_SetTxMsgBuff+0xda>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] =  msgData[DataByte];
    b168:	9a00      	ldr	r2, [sp, #0]
    b16a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b16c:	441a      	add	r2, r3
    b16e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b170:	f083 0303 	eor.w	r3, r3, #3
    b174:	9907      	ldr	r1, [sp, #28]
    b176:	440b      	add	r3, r1
    b178:	7812      	ldrb	r2, [r2, #0]
    b17a:	701a      	strb	r2, [r3, #0]
            for ( ; DataByte < cs->dataLen; DataByte++)
    b17c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b17e:	3301      	adds	r3, #1
    b180:	930a      	str	r3, [sp, #40]	; 0x28
    b182:	9b02      	ldr	r3, [sp, #8]
    b184:	689b      	ldr	r3, [r3, #8]
    b186:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b188:	429a      	cmp	r2, r3
    b18a:	d3ed      	bcc.n	b168 <FlexCAN_SetTxMsgBuff+0xc0>
            }
        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            Payload_Size = FlexCAN_ComputePayloadSize(Dlc_Value);
    b18c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b190:	4618      	mov	r0, r3
    b192:	f7ff f9ee 	bl	a572 <FlexCAN_ComputePayloadSize>
    b196:	4603      	mov	r3, r0
    b198:	f88d 3012 	strb.w	r3, [sp, #18]
            /* Add padding, if needed */
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    b19c:	9b02      	ldr	r3, [sp, #8]
    b19e:	689b      	ldr	r3, [r3, #8]
    b1a0:	930a      	str	r3, [sp, #40]	; 0x28
    b1a2:	e00a      	b.n	b1ba <FlexCAN_SetTxMsgBuff+0x112>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] = cs->fd_padding;
    b1a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b1a6:	f083 0303 	eor.w	r3, r3, #3
    b1aa:	9a07      	ldr	r2, [sp, #28]
    b1ac:	4413      	add	r3, r2
    b1ae:	9a02      	ldr	r2, [sp, #8]
    b1b0:	7b52      	ldrb	r2, [r2, #13]
    b1b2:	701a      	strb	r2, [r3, #0]
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    b1b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b1b6:	3301      	adds	r3, #1
    b1b8:	930a      	str	r3, [sp, #40]	; 0x28
    b1ba:	f89d 3012 	ldrb.w	r3, [sp, #18]
    b1be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b1c0:	429a      	cmp	r2, r3
    b1c2:	d3ef      	bcc.n	b1a4 <FlexCAN_SetTxMsgBuff+0xfc>
            }
        #endif /* FLEXCAN_IP_FEATURE_HAS_FD */
        }
        /* Set the ID according the format structure */
        if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    b1c4:	9b02      	ldr	r3, [sp, #8]
    b1c6:	685b      	ldr	r3, [r3, #4]
    b1c8:	2b01      	cmp	r3, #1
    b1ca:	d111      	bne.n	b1f0 <FlexCAN_SetTxMsgBuff+0x148>
        {
            /* ID [28-0] */
            *Flexcan_Mb_Id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    b1cc:	9b08      	ldr	r3, [sp, #32]
    b1ce:	681b      	ldr	r3, [r3, #0]
    b1d0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    b1d4:	9b08      	ldr	r3, [sp, #32]
    b1d6:	601a      	str	r2, [r3, #0]
            *Flexcan_Mb_Id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    b1d8:	9b08      	ldr	r3, [sp, #32]
    b1da:	681a      	ldr	r2, [r3, #0]
    b1dc:	9b01      	ldr	r3, [sp, #4]
    b1de:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    b1e2:	431a      	orrs	r2, r3
    b1e4:	9b08      	ldr	r3, [sp, #32]
    b1e6:	601a      	str	r2, [r3, #0]
            /* Set IDE and SRR bit*/
            Flexcan_Mb_Config |= (FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    b1e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b1ea:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
    b1ee:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    b1f0:	9b02      	ldr	r3, [sp, #8]
    b1f2:	685b      	ldr	r3, [r3, #4]
    b1f4:	2b00      	cmp	r3, #0
    b1f6:	d114      	bne.n	b222 <FlexCAN_SetTxMsgBuff+0x17a>
        {
            /* ID[28-18] */
            *Flexcan_Mb_Id &= ~FLEXCAN_IP_ID_STD_MASK;
    b1f8:	9b08      	ldr	r3, [sp, #32]
    b1fa:	681b      	ldr	r3, [r3, #0]
    b1fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    b200:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    b204:	9a08      	ldr	r2, [sp, #32]
    b206:	6013      	str	r3, [r2, #0]
            *Flexcan_Mb_Id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    b208:	9b08      	ldr	r3, [sp, #32]
    b20a:	681a      	ldr	r2, [r3, #0]
    b20c:	9b01      	ldr	r3, [sp, #4]
    b20e:	0499      	lsls	r1, r3, #18
    b210:	4b2b      	ldr	r3, [pc, #172]	; (b2c0 <FlexCAN_SetTxMsgBuff+0x218>)
    b212:	400b      	ands	r3, r1
    b214:	431a      	orrs	r2, r3
    b216:	9b08      	ldr	r3, [sp, #32]
    b218:	601a      	str	r2, [r3, #0]
            /* make sure IDE and SRR are not set */
            Flexcan_Mb_Config &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    b21a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b21c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
    b220:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        /* Set the length of data in bytes */
        Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_DLC_MASK;
    b222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b224:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    b228:	930b      	str	r3, [sp, #44]	; 0x2c
        Flexcan_Mb_Config |= ((uint32)Dlc_Value << FLEXCAN_IP_CS_DLC_SHIFT) & FLEXCAN_IP_CS_DLC_MASK;
    b22a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b22e:	041b      	lsls	r3, r3, #16
    b230:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    b234:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b236:	4313      	orrs	r3, r2
    b238:	930b      	str	r3, [sp, #44]	; 0x2c
        /* Set MB CODE */
        if (cs->code != (uint32)FLEXCAN_TX_NOT_USED)
    b23a:	9b02      	ldr	r3, [sp, #8]
    b23c:	681b      	ldr	r3, [r3, #0]
    b23e:	2b0f      	cmp	r3, #15
    b240:	d03a      	beq.n	b2b8 <FlexCAN_SetTxMsgBuff+0x210>
        {
            if ((uint32)FLEXCAN_TX_REMOTE == cs->code)
    b242:	9b02      	ldr	r3, [sp, #8]
    b244:	681b      	ldr	r3, [r3, #0]
    b246:	2b1c      	cmp	r3, #28
    b248:	d104      	bne.n	b254 <FlexCAN_SetTxMsgBuff+0x1ac>
            {
                /* Set RTR bit */
                Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    b24a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b24c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    b250:	930b      	str	r3, [sp, #44]	; 0x2c
    b252:	e007      	b.n	b264 <FlexCAN_SetTxMsgBuff+0x1bc>
            }
            else
            {
                if (TRUE == isRemote)
    b254:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    b258:	2b00      	cmp	r3, #0
    b25a:	d003      	beq.n	b264 <FlexCAN_SetTxMsgBuff+0x1bc>
                {
                    /* Set RTR bit */
                    Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    b25c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b25e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    b262:	930b      	str	r3, [sp, #44]	; 0x2c
                }
            }
            /* Reset the code */
            Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_CODE_MASK;
    b264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b266:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    b26a:	930b      	str	r3, [sp, #44]	; 0x2c
            /* Set the code */
            if (cs->fd_enable)
    b26c:	9b02      	ldr	r3, [sp, #8]
    b26e:	7b1b      	ldrb	r3, [r3, #12]
    b270:	2b00      	cmp	r3, #0
    b272:	d00e      	beq.n	b292 <FlexCAN_SetTxMsgBuff+0x1ea>
            {
                Flexcan_Mb_Config |= ((cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK) | FLEXCAN_IP_MB_EDL_MASK;
    b274:	9b02      	ldr	r3, [sp, #8]
    b276:	681b      	ldr	r3, [r3, #0]
    b278:	061b      	lsls	r3, r3, #24
    b27a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    b27e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b280:	4313      	orrs	r3, r2
    b282:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b286:	930b      	str	r3, [sp, #44]	; 0x2c
                /* In case of FD frame not supported RTR */
                Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_RTR_MASK;
    b288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b28a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    b28e:	930b      	str	r3, [sp, #44]	; 0x2c
    b290:	e007      	b.n	b2a2 <FlexCAN_SetTxMsgBuff+0x1fa>
            }
            else
            {
                Flexcan_Mb_Config |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    b292:	9b02      	ldr	r3, [sp, #8]
    b294:	681b      	ldr	r3, [r3, #0]
    b296:	061b      	lsls	r3, r3, #24
    b298:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    b29c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b29e:	4313      	orrs	r3, r2
    b2a0:	930b      	str	r3, [sp, #44]	; 0x2c
            }

            if (cs->enable_brs)
    b2a2:	9b02      	ldr	r3, [sp, #8]
    b2a4:	7b9b      	ldrb	r3, [r3, #14]
    b2a6:	2b00      	cmp	r3, #0
    b2a8:	d003      	beq.n	b2b2 <FlexCAN_SetTxMsgBuff+0x20a>
            {
                Flexcan_Mb_Config |= FLEXCAN_IP_MB_BRS_MASK;
    b2aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b2ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b2b0:	930b      	str	r3, [sp, #44]	; 0x2c
            }
            *Flexcan_Mb = Flexcan_Mb_Config;
    b2b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b2b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b2b6:	601a      	str	r2, [r3, #0]
        }
}
    b2b8:	bf00      	nop
    b2ba:	b00d      	add	sp, #52	; 0x34
    b2bc:	f85d fb04 	ldr.w	pc, [sp], #4
    b2c0:	1ffc0000 	.word	0x1ffc0000

0000b2c4 <FlexCAN_SetMaxMsgBuffNum>:
 * Description   : Set the number of the last Message Buffers.
 * This function will define the number of the last Message Buffers
 *
 *END***************************************************************************/
Flexcan_Ip_StatusType FlexCAN_SetMaxMsgBuffNum(FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    b2c4:	b500      	push	{lr}
    b2c6:	b08f      	sub	sp, #60	; 0x3c
    b2c8:	9001      	str	r0, [sp, #4]
    b2ca:	9100      	str	r1, [sp, #0]
    uint32 MsgBuffIdx;
    uint32 DataByte;
    const volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    b2cc:	9b01      	ldr	r3, [sp, #4]
    b2ce:	3380      	adds	r3, #128	; 0x80
    b2d0:	930a      	str	r3, [sp, #40]	; 0x28
#if (STD_ON == FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY)
    const volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */
    const volatile uint32 * ValEndMbPointer = NULL_PTR;
    b2d2:	2300      	movs	r3, #0
    b2d4:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 *Flexcan_Mb = NULL_PTR;
    b2d6:	2300      	movs	r3, #0
    b2d8:	9308      	str	r3, [sp, #32]
    volatile uint32 *Flexcan_Mb_Id   = NULL_PTR ;
    b2da:	2300      	movs	r3, #0
    b2dc:	9307      	str	r3, [sp, #28]
    volatile uint8  *Flexcan_Mb_Data = NULL_PTR;
    b2de:	2300      	movs	r3, #0
    b2e0:	9306      	str	r3, [sp, #24]
    uint8 Arbitration_Field_Size = 8U;
    b2e2:	2308      	movs	r3, #8
    b2e4:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, maxMsgBuffNum - (uint32)1U);
    b2e8:	9b00      	ldr	r3, [sp, #0]
    b2ea:	3b01      	subs	r3, #1
    b2ec:	4619      	mov	r1, r3
    b2ee:	9801      	ldr	r0, [sp, #4]
    b2f0:	f7ff fcb6 	bl	ac60 <FlexCAN_GetMbPayloadSize>
    b2f4:	4603      	mov	r3, r0
    b2f6:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_PtrSizeType ValEndMb = 0U;
    b2fa:	2300      	movs	r3, #0
    b2fc:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_PtrSizeType ValEndRam = 0U;
    b2fe:	2300      	movs	r3, #0
    b300:	9303      	str	r3, [sp, #12]
    Flexcan_Ip_StatusType Status = FLEXCAN_STATUS_SUCCESS;
    b302:	2300      	movs	r3, #0
    b304:	930b      	str	r3, [sp, #44]	; 0x2c

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(maxMsgBuffNum>0U);
    #endif

    ValEndMbPointer = FlexCAN_GetMsgBuffRegion(base, (maxMsgBuffNum - (uint32)1U));
    b306:	9b00      	ldr	r3, [sp, #0]
    b308:	3b01      	subs	r3, #1
    b30a:	4619      	mov	r1, r3
    b30c:	9801      	ldr	r0, [sp, #4]
    b30e:	f7ff f979 	bl	a604 <FlexCAN_GetMsgBuffRegion>
    b312:	9009      	str	r0, [sp, #36]	; 0x24

    ValEndMb = (Flexcan_Ip_PtrSizeType)ValEndMbPointer + Can_Real_Payload + Arbitration_Field_Size;
    b314:	f89d 2016 	ldrb.w	r2, [sp, #22]
    b318:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b31a:	441a      	add	r2, r3
    b31c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b320:	4413      	add	r3, r2
    b322:	9304      	str	r3, [sp, #16]
    else
    {
        ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    }
#else
    ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    b324:	9801      	ldr	r0, [sp, #4]
    b326:	f7ff f9e7 	bl	a6f8 <FlexCAN_GetMaxMbNum>
    b32a:	4603      	mov	r3, r0
    b32c:	011b      	lsls	r3, r3, #4
    b32e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b330:	4413      	add	r3, r2
    b332:	9303      	str	r3, [sp, #12]
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */

    if ((ValEndMb > ValEndRam) || (maxMsgBuffNum > FlexCAN_GetMaxMbNum(base)))
    b334:	9a04      	ldr	r2, [sp, #16]
    b336:	9b03      	ldr	r3, [sp, #12]
    b338:	429a      	cmp	r2, r3
    b33a:	d806      	bhi.n	b34a <FlexCAN_SetMaxMsgBuffNum+0x86>
    b33c:	9801      	ldr	r0, [sp, #4]
    b33e:	f7ff f9db 	bl	a6f8 <FlexCAN_GetMaxMbNum>
    b342:	4602      	mov	r2, r0
    b344:	9b00      	ldr	r3, [sp, #0]
    b346:	4293      	cmp	r3, r2
    b348:	d901      	bls.n	b34e <FlexCAN_SetMaxMsgBuffNum+0x8a>
    {
        Status = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    b34a:	2304      	movs	r3, #4
    b34c:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    if (FLEXCAN_STATUS_SUCCESS == Status)
    b34e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b350:	2b00      	cmp	r3, #0
    b352:	d142      	bne.n	b3da <FlexCAN_SetMaxMsgBuffNum+0x116>
    {
        /* Set the maximum number of MBs*/
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MAXMB_MASK) | (((maxMsgBuffNum-1U) << FLEXCAN_MCR_MAXMB_SHIFT) & FLEXCAN_MCR_MAXMB_MASK);
    b354:	9b01      	ldr	r3, [sp, #4]
    b356:	681b      	ldr	r3, [r3, #0]
    b358:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
    b35c:	9b00      	ldr	r3, [sp, #0]
    b35e:	3b01      	subs	r3, #1
    b360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b364:	431a      	orrs	r2, r3
    b366:	9b01      	ldr	r3, [sp, #4]
    b368:	601a      	str	r2, [r3, #0]
        if (!(((base->MCR & FLEXCAN_MCR_RFEN_MASK) >> FLEXCAN_MCR_RFEN_SHIFT) != 0U))
    b36a:	9b01      	ldr	r3, [sp, #4]
    b36c:	681b      	ldr	r3, [r3, #0]
    b36e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    b372:	2b00      	cmp	r3, #0
    b374:	d131      	bne.n	b3da <FlexCAN_SetMaxMsgBuffNum+0x116>
        {
            /* Initialize all message buffers as inactive */
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    b376:	2300      	movs	r3, #0
    b378:	930d      	str	r3, [sp, #52]	; 0x34
    b37a:	e02a      	b.n	b3d2 <FlexCAN_SetMaxMsgBuffNum+0x10e>
            {
                Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, MsgBuffIdx);
    b37c:	990d      	ldr	r1, [sp, #52]	; 0x34
    b37e:	9801      	ldr	r0, [sp, #4]
    b380:	f7ff f940 	bl	a604 <FlexCAN_GetMsgBuffRegion>
    b384:	9008      	str	r0, [sp, #32]
                Flexcan_Mb_Id   = &Flexcan_Mb[1];
    b386:	9b08      	ldr	r3, [sp, #32]
    b388:	3304      	adds	r3, #4
    b38a:	9307      	str	r3, [sp, #28]
                Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    b38c:	9b08      	ldr	r3, [sp, #32]
    b38e:	3308      	adds	r3, #8
    b390:	9306      	str	r3, [sp, #24]
                *Flexcan_Mb = 0x0U;
    b392:	9b08      	ldr	r3, [sp, #32]
    b394:	2200      	movs	r2, #0
    b396:	601a      	str	r2, [r3, #0]
                *Flexcan_Mb_Id = 0x0U;
    b398:	9b07      	ldr	r3, [sp, #28]
    b39a:	2200      	movs	r2, #0
    b39c:	601a      	str	r2, [r3, #0]
                Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, MsgBuffIdx);
    b39e:	990d      	ldr	r1, [sp, #52]	; 0x34
    b3a0:	9801      	ldr	r0, [sp, #4]
    b3a2:	f7ff fc5d 	bl	ac60 <FlexCAN_GetMbPayloadSize>
    b3a6:	4603      	mov	r3, r0
    b3a8:	f88d 3016 	strb.w	r3, [sp, #22]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    b3ac:	2300      	movs	r3, #0
    b3ae:	930c      	str	r3, [sp, #48]	; 0x30
    b3b0:	e007      	b.n	b3c2 <FlexCAN_SetMaxMsgBuffNum+0xfe>
                {
                   Flexcan_Mb_Data[DataByte] = 0x0U;
    b3b2:	9a06      	ldr	r2, [sp, #24]
    b3b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b3b6:	4413      	add	r3, r2
    b3b8:	2200      	movs	r2, #0
    b3ba:	701a      	strb	r2, [r3, #0]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    b3bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b3be:	3301      	adds	r3, #1
    b3c0:	930c      	str	r3, [sp, #48]	; 0x30
    b3c2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b3c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b3c8:	429a      	cmp	r2, r3
    b3ca:	d3f2      	bcc.n	b3b2 <FlexCAN_SetMaxMsgBuffNum+0xee>
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    b3cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b3ce:	3301      	adds	r3, #1
    b3d0:	930d      	str	r3, [sp, #52]	; 0x34
    b3d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b3d4:	9b00      	ldr	r3, [sp, #0]
    b3d6:	429a      	cmp	r2, r3
    b3d8:	d3d0      	bcc.n	b37c <FlexCAN_SetMaxMsgBuffNum+0xb8>
                }
            }
        }
    }
    return Status;
    b3da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    b3dc:	4618      	mov	r0, r3
    b3de:	b00f      	add	sp, #60	; 0x3c
    b3e0:	f85d fb04 	ldr.w	pc, [sp], #4

0000b3e4 <FlexCAN_SetOperationMode>:
 * Description   : Enable a FlexCAN operation mode.
 * This function will enable one of the modes listed in flexcan_operation_modes_t.
 *
 *END**************************************************************************/
void FlexCAN_SetOperationMode(FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
    b3e4:	b500      	push	{lr}
    b3e6:	b083      	sub	sp, #12
    b3e8:	9001      	str	r0, [sp, #4]
    b3ea:	9100      	str	r1, [sp, #0]
    switch (mode)
    b3ec:	9b00      	ldr	r3, [sp, #0]
    b3ee:	2b02      	cmp	r3, #2
    b3f0:	d01d      	beq.n	b42e <FlexCAN_SetOperationMode+0x4a>
    b3f2:	9b00      	ldr	r3, [sp, #0]
    b3f4:	2b02      	cmp	r3, #2
    b3f6:	d82b      	bhi.n	b450 <FlexCAN_SetOperationMode+0x6c>
    b3f8:	9b00      	ldr	r3, [sp, #0]
    b3fa:	2b00      	cmp	r3, #0
    b3fc:	d003      	beq.n	b406 <FlexCAN_SetOperationMode+0x22>
    b3fe:	9b00      	ldr	r3, [sp, #0]
    b400:	2b01      	cmp	r3, #1
    b402:	d00d      	beq.n	b420 <FlexCAN_SetOperationMode+0x3c>
            /* Enable Self Reception */
            FlexCAN_SetSelfReception(base, TRUE);
            break;
        default:
            /* Should not get here */
            break;
    b404:	e024      	b.n	b450 <FlexCAN_SetOperationMode+0x6c>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    b406:	9b01      	ldr	r3, [sp, #4]
    b408:	685b      	ldr	r3, [r3, #4]
    b40a:	f023 0208 	bic.w	r2, r3, #8
    b40e:	9b01      	ldr	r3, [sp, #4]
    b410:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(0U);
    b412:	9b01      	ldr	r3, [sp, #4]
    b414:	685b      	ldr	r3, [r3, #4]
    b416:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    b41a:	9b01      	ldr	r3, [sp, #4]
    b41c:	605a      	str	r2, [r3, #4]
            break;
    b41e:	e018      	b.n	b452 <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(1U);
    b420:	9b01      	ldr	r3, [sp, #4]
    b422:	685b      	ldr	r3, [r3, #4]
    b424:	f043 0208 	orr.w	r2, r3, #8
    b428:	9b01      	ldr	r3, [sp, #4]
    b42a:	605a      	str	r2, [r3, #4]
            break;
    b42c:	e011      	b.n	b452 <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(1U);
    b42e:	9b01      	ldr	r3, [sp, #4]
    b430:	685b      	ldr	r3, [r3, #4]
    b432:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    b436:	9b01      	ldr	r3, [sp, #4]
    b438:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    b43a:	9b01      	ldr	r3, [sp, #4]
    b43c:	685b      	ldr	r3, [r3, #4]
    b43e:	f023 0208 	bic.w	r2, r3, #8
    b442:	9b01      	ldr	r3, [sp, #4]
    b444:	605a      	str	r2, [r3, #4]
            FlexCAN_SetSelfReception(base, TRUE);
    b446:	2101      	movs	r1, #1
    b448:	9801      	ldr	r0, [sp, #4]
    b44a:	f7fe ff7f 	bl	a34c <FlexCAN_SetSelfReception>
            break;
    b44e:	e000      	b.n	b452 <FlexCAN_SetOperationMode+0x6e>
            break;
    b450:	bf00      	nop
    }
}
    b452:	bf00      	nop
    b454:	b003      	add	sp, #12
    b456:	f85d fb04 	ldr.w	pc, [sp], #4

0000b45a <FlexCAN_SetRxFifoFilter>:
 *END**************************************************************************/
void FlexCAN_SetRxFifoFilter(FLEXCAN_Type * base,
                             Flexcan_Ip_RxFifoIdElementFormatType idFormat,
                             const Flexcan_Ip_IdTableType * idFilterTable
                            )
{
    b45a:	b500      	push	{lr}
    b45c:	b08d      	sub	sp, #52	; 0x34
    b45e:	9003      	str	r0, [sp, #12]
    b460:	9102      	str	r1, [sp, #8]
    b462:	9201      	str	r2, [sp, #4]

    /* Set RX FIFO ID filter table elements*/
    uint32 i, j, NumOfFilters;
    uint32 Val1 = 0UL, Val2 = 0UL, Val = 0UL;
    b464:	2300      	movs	r3, #0
    b466:	9309      	str	r3, [sp, #36]	; 0x24
    b468:	2300      	movs	r3, #0
    b46a:	9308      	str	r3, [sp, #32]
    b46c:	2300      	movs	r3, #0
    b46e:	9307      	str	r3, [sp, #28]
    volatile uint32 * FilterTable = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_RX_FIFO_FILTER_TABLE_OFFSET);
    b470:	9b03      	ldr	r3, [sp, #12]
    b472:	33e0      	adds	r3, #224	; 0xe0
    b474:	9306      	str	r3, [sp, #24]

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert((idFilterTable != NULL_PTR) || (FLEXCAN_RX_FIFO_ID_FORMAT_D == idFormat));
    #endif

    NumOfFilters = (((base->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    b476:	9b03      	ldr	r3, [sp, #12]
    b478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b47a:	0e1b      	lsrs	r3, r3, #24
    b47c:	f003 030f 	and.w	r3, r3, #15
    b480:	9305      	str	r3, [sp, #20]
    b482:	9b02      	ldr	r3, [sp, #8]
    b484:	2b03      	cmp	r3, #3
    b486:	f200 81e7 	bhi.w	b858 <FlexCAN_SetRxFifoFilter+0x3fe>
    b48a:	a201      	add	r2, pc, #4	; (adr r2, b490 <FlexCAN_SetRxFifoFilter+0x36>)
    b48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b490:	0000b4a1 	.word	0x0000b4a1
    b494:	0000b53b 	.word	0x0000b53b
    b498:	0000b675 	.word	0x0000b675
    b49c:	0000b843 	.word	0x0000b843
    switch (idFormat)
    {
        case (FLEXCAN_RX_FIFO_ID_FORMAT_A):
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    b4a0:	f000 ffb4 	bl	c40c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            /* One full ID (standard and extended) per ID Filter Table element.*/
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    b4a4:	9b03      	ldr	r3, [sp, #12]
    b4a6:	681b      	ldr	r3, [r3, #0]
    b4a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
            (base->MCR) =
    b4ac:	9b03      	ldr	r3, [sp, #12]
    b4ae:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_A)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    b4b0:	f000 ffd8 	bl	c464 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    b4b4:	2300      	movs	r3, #0
    b4b6:	930b      	str	r3, [sp, #44]	; 0x2c
    b4b8:	e038      	b.n	b52c <FlexCAN_SetRxFifoFilter+0xd2>
            {
                Val = 0UL;
    b4ba:	2300      	movs	r3, #0
    b4bc:	9307      	str	r3, [sp, #28]

                if (idFilterTable[i].isRemoteFrame)
    b4be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b4c0:	00db      	lsls	r3, r3, #3
    b4c2:	9a01      	ldr	r2, [sp, #4]
    b4c4:	4413      	add	r3, r2
    b4c6:	781b      	ldrb	r3, [r3, #0]
    b4c8:	2b00      	cmp	r3, #0
    b4ca:	d002      	beq.n	b4d2 <FlexCAN_SetRxFifoFilter+0x78>
                {
                    Val = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    b4cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    b4d0:	9307      	str	r3, [sp, #28]
                }

                if (idFilterTable[i].isExtendedFrame)
    b4d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b4d4:	00db      	lsls	r3, r3, #3
    b4d6:	9a01      	ldr	r2, [sp, #4]
    b4d8:	4413      	add	r3, r2
    b4da:	785b      	ldrb	r3, [r3, #1]
    b4dc:	2b00      	cmp	r3, #0
    b4de:	d013      	beq.n	b508 <FlexCAN_SetRxFifoFilter+0xae>
                {
                    Val |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    b4e0:	9b07      	ldr	r3, [sp, #28]
    b4e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b4e6:	9307      	str	r3, [sp, #28]
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_SHIFT) &
    b4e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b4ea:	00db      	lsls	r3, r3, #3
    b4ec:	9a01      	ldr	r2, [sp, #4]
    b4ee:	4413      	add	r3, r2
    b4f0:	685b      	ldr	r3, [r3, #4]
    b4f2:	005b      	lsls	r3, r3, #1
    b4f4:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
    b4f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b4fa:	009b      	lsls	r3, r3, #2
    b4fc:	9a06      	ldr	r2, [sp, #24]
    b4fe:	4413      	add	r3, r2
    b500:	9a07      	ldr	r2, [sp, #28]
    b502:	440a      	add	r2, r1
    b504:	601a      	str	r2, [r3, #0]
    b506:	e00e      	b.n	b526 <FlexCAN_SetRxFifoFilter+0xcc>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_MASK
                                           );
                }
                else
                {
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_SHIFT) &
    b508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b50a:	00db      	lsls	r3, r3, #3
    b50c:	9a01      	ldr	r2, [sp, #4]
    b50e:	4413      	add	r3, r2
    b510:	685b      	ldr	r3, [r3, #4]
    b512:	04da      	lsls	r2, r3, #19
    b514:	4b9d      	ldr	r3, [pc, #628]	; (b78c <FlexCAN_SetRxFifoFilter+0x332>)
    b516:	4013      	ands	r3, r2
    b518:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b51a:	0092      	lsls	r2, r2, #2
    b51c:	9906      	ldr	r1, [sp, #24]
    b51e:	440a      	add	r2, r1
    b520:	9907      	ldr	r1, [sp, #28]
    b522:	440b      	add	r3, r1
    b524:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    b526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b528:	3301      	adds	r3, #1
    b52a:	930b      	str	r3, [sp, #44]	; 0x2c
    b52c:	9b05      	ldr	r3, [sp, #20]
    b52e:	3301      	adds	r3, #1
    b530:	00db      	lsls	r3, r3, #3
    b532:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b534:	429a      	cmp	r2, r3
    b536:	d3c0      	bcc.n	b4ba <FlexCAN_SetRxFifoFilter+0x60>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_MASK
                                           );
                }
            }
            break;
    b538:	e18f      	b.n	b85a <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_B):
            /* Two full standard IDs or two partial 14-bit (standard and extended) IDs*/
            /* per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    b53a:	f000 ff67 	bl	c40c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) | ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_B)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
    b53e:	9b03      	ldr	r3, [sp, #12]
    b540:	681b      	ldr	r3, [r3, #0]
    b542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    b546:	f443 7280 	orr.w	r2, r3, #256	; 0x100
            (base->MCR) =
    b54a:	9b03      	ldr	r3, [sp, #12]
    b54c:	601a      	str	r2, [r3, #0]
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    b54e:	f000 ff89 	bl	c464 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    b552:	2300      	movs	r3, #0
    b554:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    b556:	2300      	movs	r3, #0
    b558:	930b      	str	r3, [sp, #44]	; 0x2c
    b55a:	e083      	b.n	b664 <FlexCAN_SetRxFifoFilter+0x20a>
            {
                Val1 = 0U;
    b55c:	2300      	movs	r3, #0
    b55e:	9309      	str	r3, [sp, #36]	; 0x24
                Val2 = 0U;
    b560:	2300      	movs	r3, #0
    b562:	9308      	str	r3, [sp, #32]

                if (idFilterTable[j].isRemoteFrame)
    b564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b566:	00db      	lsls	r3, r3, #3
    b568:	9a01      	ldr	r2, [sp, #4]
    b56a:	4413      	add	r3, r2
    b56c:	781b      	ldrb	r3, [r3, #0]
    b56e:	2b00      	cmp	r3, #0
    b570:	d002      	beq.n	b578 <FlexCAN_SetRxFifoFilter+0x11e>
                {
                    Val1 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    b572:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    b576:	9309      	str	r3, [sp, #36]	; 0x24
                }

                if (idFilterTable[j + 1U].isRemoteFrame)
    b578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b57a:	3301      	adds	r3, #1
    b57c:	00db      	lsls	r3, r3, #3
    b57e:	9a01      	ldr	r2, [sp, #4]
    b580:	4413      	add	r3, r2
    b582:	781b      	ldrb	r3, [r3, #0]
    b584:	2b00      	cmp	r3, #0
    b586:	d002      	beq.n	b58e <FlexCAN_SetRxFifoFilter+0x134>
                {
                    Val2 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_RTR_SHIFT;
    b588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    b58c:	9308      	str	r3, [sp, #32]
                }

                if (idFilterTable[j].isExtendedFrame)
    b58e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b590:	00db      	lsls	r3, r3, #3
    b592:	9a01      	ldr	r2, [sp, #4]
    b594:	4413      	add	r3, r2
    b596:	785b      	ldrb	r3, [r3, #1]
    b598:	2b00      	cmp	r3, #0
    b59a:	d014      	beq.n	b5c6 <FlexCAN_SetRxFifoFilter+0x16c>
                {
                    Val1 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    b59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b59e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b5a2:	9309      	str	r3, [sp, #36]	; 0x24

                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    b5a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b5a6:	00db      	lsls	r3, r3, #3
    b5a8:	9a01      	ldr	r2, [sp, #4]
    b5aa:	4413      	add	r3, r2
    b5ac:	685b      	ldr	r3, [r3, #4]
    b5ae:	0bdb      	lsrs	r3, r3, #15
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT1
    b5b0:	041a      	lsls	r2, r3, #16
    b5b2:	4b77      	ldr	r3, [pc, #476]	; (b790 <FlexCAN_SetRxFifoFilter+0x336>)
    b5b4:	4013      	ands	r3, r2
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    b5b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b5b8:	0092      	lsls	r2, r2, #2
    b5ba:	9906      	ldr	r1, [sp, #24]
    b5bc:	440a      	add	r2, r1
    b5be:	9909      	ldr	r1, [sp, #36]	; 0x24
    b5c0:	440b      	add	r3, r1
    b5c2:	6013      	str	r3, [r2, #0]
    b5c4:	e00e      	b.n	b5e4 <FlexCAN_SetRxFifoFilter+0x18a>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + ((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    b5c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b5c8:	00db      	lsls	r3, r3, #3
    b5ca:	9a01      	ldr	r2, [sp, #4]
    b5cc:	4413      	add	r3, r2
    b5ce:	685b      	ldr	r3, [r3, #4]
    b5d0:	04da      	lsls	r2, r3, #19
    b5d2:	4b6e      	ldr	r3, [pc, #440]	; (b78c <FlexCAN_SetRxFifoFilter+0x332>)
    b5d4:	4013      	ands	r3, r2
    b5d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b5d8:	0092      	lsls	r2, r2, #2
    b5da:	9906      	ldr	r1, [sp, #24]
    b5dc:	440a      	add	r2, r1
    b5de:	9909      	ldr	r1, [sp, #36]	; 0x24
    b5e0:	440b      	add	r3, r1
    b5e2:	6013      	str	r3, [r2, #0]
                                              FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT1
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    b5e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b5e6:	3301      	adds	r3, #1
    b5e8:	00db      	lsls	r3, r3, #3
    b5ea:	9a01      	ldr	r2, [sp, #4]
    b5ec:	4413      	add	r3, r2
    b5ee:	785b      	ldrb	r3, [r3, #1]
    b5f0:	2b00      	cmp	r3, #0
    b5f2:	d01a      	beq.n	b62a <FlexCAN_SetRxFifoFilter+0x1d0>
                {
                    Val2 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_IDE_SHIFT;
    b5f4:	9b08      	ldr	r3, [sp, #32]
    b5f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    b5fa:	9308      	str	r3, [sp, #32]

                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    b5fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b5fe:	009b      	lsls	r3, r3, #2
    b600:	9a06      	ldr	r2, [sp, #24]
    b602:	4413      	add	r3, r2
    b604:	6819      	ldr	r1, [r3, #0]
    b606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b608:	3301      	adds	r3, #1
    b60a:	00db      	lsls	r3, r3, #3
    b60c:	9a01      	ldr	r2, [sp, #4]
    b60e:	4413      	add	r3, r2
    b610:	685b      	ldr	r3, [r3, #4]
    b612:	0bdb      	lsrs	r3, r3, #15
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT2
    b614:	f3c3 020d 	ubfx	r2, r3, #0, #14
                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    b618:	9b08      	ldr	r3, [sp, #32]
    b61a:	441a      	add	r2, r3
    b61c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b61e:	009b      	lsls	r3, r3, #2
    b620:	9806      	ldr	r0, [sp, #24]
    b622:	4403      	add	r3, r0
    b624:	430a      	orrs	r2, r1
    b626:	601a      	str	r2, [r3, #0]
    b628:	e016      	b.n	b658 <FlexCAN_SetRxFifoFilter+0x1fe>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val2 + ((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    b62a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b62c:	009b      	lsls	r3, r3, #2
    b62e:	9a06      	ldr	r2, [sp, #24]
    b630:	4413      	add	r3, r2
    b632:	6819      	ldr	r1, [r3, #0]
    b634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b636:	3301      	adds	r3, #1
    b638:	00db      	lsls	r3, r3, #3
    b63a:	9a01      	ldr	r2, [sp, #4]
    b63c:	4413      	add	r3, r2
    b63e:	685b      	ldr	r3, [r3, #4]
    b640:	00da      	lsls	r2, r3, #3
    b642:	f643 73f8 	movw	r3, #16376	; 0x3ff8
    b646:	4013      	ands	r3, r2
    b648:	9a08      	ldr	r2, [sp, #32]
    b64a:	441a      	add	r2, r3
    b64c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b64e:	009b      	lsls	r3, r3, #2
    b650:	9806      	ldr	r0, [sp, #24]
    b652:	4403      	add	r3, r0
    b654:	430a      	orrs	r2, r1
    b656:	601a      	str	r2, [r3, #0]
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT2
                                             );
                }

                j = j + 2U;
    b658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b65a:	3302      	adds	r3, #2
    b65c:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    b65e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b660:	3301      	adds	r3, #1
    b662:	930b      	str	r3, [sp, #44]	; 0x2c
    b664:	9b05      	ldr	r3, [sp, #20]
    b666:	3301      	adds	r3, #1
    b668:	00db      	lsls	r3, r3, #3
    b66a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b66c:	429a      	cmp	r2, r3
    b66e:	f4ff af75 	bcc.w	b55c <FlexCAN_SetRxFifoFilter+0x102>
            }
            break;
    b672:	e0f2      	b.n	b85a <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_C):
            /* Four partial 8-bit Standard IDs per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    b674:	f000 feca 	bl	c40c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    b678:	9b03      	ldr	r3, [sp, #12]
    b67a:	681b      	ldr	r3, [r3, #0]
    b67c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    b680:	f443 7200 	orr.w	r2, r3, #512	; 0x200
            (base->MCR) =
    b684:	9b03      	ldr	r3, [sp, #12]
    b686:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_C)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    b688:	f000 feec 	bl	c464 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    b68c:	2300      	movs	r3, #0
    b68e:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    b690:	2300      	movs	r3, #0
    b692:	930b      	str	r3, [sp, #44]	; 0x2c
    b694:	e0cd      	b.n	b832 <FlexCAN_SetRxFifoFilter+0x3d8>
            {
                if (idFilterTable[j].isExtendedFrame)
    b696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b698:	00db      	lsls	r3, r3, #3
    b69a:	9a01      	ldr	r2, [sp, #4]
    b69c:	4413      	add	r3, r2
    b69e:	785b      	ldrb	r3, [r3, #1]
    b6a0:	2b00      	cmp	r3, #0
    b6a2:	d00e      	beq.n	b6c2 <FlexCAN_SetRxFifoFilter+0x268>
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    b6a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b6a6:	00db      	lsls	r3, r3, #3
    b6a8:	9a01      	ldr	r2, [sp, #4]
    b6aa:	4413      	add	r3, r2
    b6ac:	685b      	ldr	r3, [r3, #4]
    b6ae:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    b6b0:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    b6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b6b4:	009b      	lsls	r3, r3, #2
    b6b6:	9a06      	ldr	r2, [sp, #24]
    b6b8:	4413      	add	r3, r2
    b6ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b6bc:	440a      	add	r2, r1
    b6be:	601a      	str	r2, [r3, #0]
    b6c0:	e00d      	b.n	b6de <FlexCAN_SetRxFifoFilter+0x284>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    b6c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b6c4:	00db      	lsls	r3, r3, #3
    b6c6:	9a01      	ldr	r2, [sp, #4]
    b6c8:	4413      	add	r3, r2
    b6ca:	685b      	ldr	r3, [r3, #4]
    b6cc:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    b6ce:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    b6d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b6d2:	009b      	lsls	r3, r3, #2
    b6d4:	9a06      	ldr	r2, [sp, #24]
    b6d6:	4413      	add	r3, r2
    b6d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b6da:	440a      	add	r2, r1
    b6dc:	601a      	str	r2, [r3, #0]
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    b6de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b6e0:	3301      	adds	r3, #1
    b6e2:	00db      	lsls	r3, r3, #3
    b6e4:	9a01      	ldr	r2, [sp, #4]
    b6e6:	4413      	add	r3, r2
    b6e8:	785b      	ldrb	r3, [r3, #1]
    b6ea:	2b00      	cmp	r3, #0
    b6ec:	d017      	beq.n	b71e <FlexCAN_SetRxFifoFilter+0x2c4>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    b6ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b6f0:	009b      	lsls	r3, r3, #2
    b6f2:	9a06      	ldr	r2, [sp, #24]
    b6f4:	4413      	add	r3, r2
    b6f6:	6819      	ldr	r1, [r3, #0]
    b6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b6fa:	3301      	adds	r3, #1
    b6fc:	00db      	lsls	r3, r3, #3
    b6fe:	9a01      	ldr	r2, [sp, #4]
    b700:	4413      	add	r3, r2
    b702:	685b      	ldr	r3, [r3, #4]
    b704:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    b706:	041b      	lsls	r3, r3, #16
    b708:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    b70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b70e:	441a      	add	r2, r3
    b710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b712:	009b      	lsls	r3, r3, #2
    b714:	9806      	ldr	r0, [sp, #24]
    b716:	4403      	add	r3, r0
    b718:	430a      	orrs	r2, r1
    b71a:	601a      	str	r2, [r3, #0]
    b71c:	e016      	b.n	b74c <FlexCAN_SetRxFifoFilter+0x2f2>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    b71e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b720:	009b      	lsls	r3, r3, #2
    b722:	9a06      	ldr	r2, [sp, #24]
    b724:	4413      	add	r3, r2
    b726:	6819      	ldr	r1, [r3, #0]
    b728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b72a:	3301      	adds	r3, #1
    b72c:	00db      	lsls	r3, r3, #3
    b72e:	9a01      	ldr	r2, [sp, #4]
    b730:	4413      	add	r3, r2
    b732:	685b      	ldr	r3, [r3, #4]
    b734:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    b736:	041b      	lsls	r3, r3, #16
    b738:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    b73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b73e:	441a      	add	r2, r3
    b740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b742:	009b      	lsls	r3, r3, #2
    b744:	9806      	ldr	r0, [sp, #24]
    b746:	4403      	add	r3, r0
    b748:	430a      	orrs	r2, r1
    b74a:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 2U].isExtendedFrame)
    b74c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b74e:	3302      	adds	r3, #2
    b750:	00db      	lsls	r3, r3, #3
    b752:	9a01      	ldr	r2, [sp, #4]
    b754:	4413      	add	r3, r2
    b756:	785b      	ldrb	r3, [r3, #1]
    b758:	2b00      	cmp	r3, #0
    b75a:	d01b      	beq.n	b794 <FlexCAN_SetRxFifoFilter+0x33a>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    b75c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b75e:	009b      	lsls	r3, r3, #2
    b760:	9a06      	ldr	r2, [sp, #24]
    b762:	4413      	add	r3, r2
    b764:	6819      	ldr	r1, [r3, #0]
    b766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b768:	3302      	adds	r3, #2
    b76a:	00db      	lsls	r3, r3, #3
    b76c:	9a01      	ldr	r2, [sp, #4]
    b76e:	4413      	add	r3, r2
    b770:	685b      	ldr	r3, [r3, #4]
    b772:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    b774:	021b      	lsls	r3, r3, #8
    b776:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    b778:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b77a:	441a      	add	r2, r3
    b77c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b77e:	009b      	lsls	r3, r3, #2
    b780:	9806      	ldr	r0, [sp, #24]
    b782:	4403      	add	r3, r0
    b784:	430a      	orrs	r2, r1
    b786:	601a      	str	r2, [r3, #0]
    b788:	e01a      	b.n	b7c0 <FlexCAN_SetRxFifoFilter+0x366>
    b78a:	bf00      	nop
    b78c:	3ff80000 	.word	0x3ff80000
    b790:	3fff0000 	.word	0x3fff0000
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    b794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b796:	009b      	lsls	r3, r3, #2
    b798:	9a06      	ldr	r2, [sp, #24]
    b79a:	4413      	add	r3, r2
    b79c:	6819      	ldr	r1, [r3, #0]
    b79e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b7a0:	3302      	adds	r3, #2
    b7a2:	00db      	lsls	r3, r3, #3
    b7a4:	9a01      	ldr	r2, [sp, #4]
    b7a6:	4413      	add	r3, r2
    b7a8:	685b      	ldr	r3, [r3, #4]
    b7aa:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    b7ac:	021b      	lsls	r3, r3, #8
    b7ae:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    b7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b7b2:	441a      	add	r2, r3
    b7b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b7b6:	009b      	lsls	r3, r3, #2
    b7b8:	9806      	ldr	r0, [sp, #24]
    b7ba:	4403      	add	r3, r0
    b7bc:	430a      	orrs	r2, r1
    b7be:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 3U].isExtendedFrame)
    b7c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b7c2:	3303      	adds	r3, #3
    b7c4:	00db      	lsls	r3, r3, #3
    b7c6:	9a01      	ldr	r2, [sp, #4]
    b7c8:	4413      	add	r3, r2
    b7ca:	785b      	ldrb	r3, [r3, #1]
    b7cc:	2b00      	cmp	r3, #0
    b7ce:	d015      	beq.n	b7fc <FlexCAN_SetRxFifoFilter+0x3a2>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    b7d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b7d2:	009b      	lsls	r3, r3, #2
    b7d4:	9a06      	ldr	r2, [sp, #24]
    b7d6:	4413      	add	r3, r2
    b7d8:	6819      	ldr	r1, [r3, #0]
    b7da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b7dc:	3303      	adds	r3, #3
    b7de:	00db      	lsls	r3, r3, #3
    b7e0:	9a01      	ldr	r2, [sp, #4]
    b7e2:	4413      	add	r3, r2
    b7e4:	685b      	ldr	r3, [r3, #4]
    b7e6:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    b7e8:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    b7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b7ec:	441a      	add	r2, r3
    b7ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b7f0:	009b      	lsls	r3, r3, #2
    b7f2:	9806      	ldr	r0, [sp, #24]
    b7f4:	4403      	add	r3, r0
    b7f6:	430a      	orrs	r2, r1
    b7f8:	601a      	str	r2, [r3, #0]
    b7fa:	e014      	b.n	b826 <FlexCAN_SetRxFifoFilter+0x3cc>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 +
    b7fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b7fe:	009b      	lsls	r3, r3, #2
    b800:	9a06      	ldr	r2, [sp, #24]
    b802:	4413      	add	r3, r2
    b804:	6819      	ldr	r1, [r3, #0]
                                      (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    b806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b808:	3303      	adds	r3, #3
    b80a:	00db      	lsls	r3, r3, #3
    b80c:	9a01      	ldr	r2, [sp, #4]
    b80e:	4413      	add	r3, r2
    b810:	685b      	ldr	r3, [r3, #4]
    b812:	08db      	lsrs	r3, r3, #3
                                        FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                       ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    b814:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 +
    b816:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b818:	441a      	add	r2, r3
    b81a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b81c:	009b      	lsls	r3, r3, #2
    b81e:	9806      	ldr	r0, [sp, #24]
    b820:	4403      	add	r3, r0
    b822:	430a      	orrs	r2, r1
    b824:	601a      	str	r2, [r3, #0]
                                      );
                }

                j = j + 4U;
    b826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b828:	3304      	adds	r3, #4
    b82a:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    b82c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b82e:	3301      	adds	r3, #1
    b830:	930b      	str	r3, [sp, #44]	; 0x2c
    b832:	9b05      	ldr	r3, [sp, #20]
    b834:	3301      	adds	r3, #1
    b836:	00db      	lsls	r3, r3, #3
    b838:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b83a:	429a      	cmp	r2, r3
    b83c:	f4ff af2b 	bcc.w	b696 <FlexCAN_SetRxFifoFilter+0x23c>
            }
            break;
    b840:	e00b      	b.n	b85a <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_D):
            /* All frames rejected.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    b842:	f000 fde3 	bl	c40c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    b846:	9b03      	ldr	r3, [sp, #12]
    b848:	681b      	ldr	r3, [r3, #0]
    b84a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
            (base->MCR) =
    b84e:	9b03      	ldr	r3, [sp, #12]
    b850:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_D)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    b852:	f000 fe07 	bl	c464 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            break;
    b856:	e000      	b.n	b85a <FlexCAN_SetRxFifoFilter+0x400>
        default:
            /* Should not get here */
            break;
    b858:	bf00      	nop
    }
}
    b85a:	bf00      	nop
    b85c:	b00d      	add	sp, #52	; 0x34
    b85e:	f85d fb04 	ldr.w	pc, [sp], #4

0000b862 <FlexCAN_ReadRxFifo>:
 * Description   : Read Rx FIFO data.
 * This function will copy MB[0] data field into user's buffer.
 *
 *END**************************************************************************/
void FlexCAN_ReadRxFifo(const FLEXCAN_Type * base, Flexcan_Ip_MsgBuffType * rxFifo)
{
    b862:	b500      	push	{lr}
    b864:	b08b      	sub	sp, #44	; 0x2c
    b866:	9001      	str	r0, [sp, #4]
    b868:	9100      	str	r1, [sp, #0]
    uint32 x;
    uint8 Index;
    const uint8 * p;
    #endif

    volatile const uint32 * flexcan_mb = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    b86a:	9b01      	ldr	r3, [sp, #4]
    b86c:	3380      	adds	r3, #128	; 0x80
    b86e:	9307      	str	r3, [sp, #28]
    volatile const uint32 * flexcan_mb_id = &flexcan_mb[1];
    b870:	9b07      	ldr	r3, [sp, #28]
    b872:	3304      	adds	r3, #4
    b874:	9306      	str	r3, [sp, #24]
    volatile const uint32 * flexcan_mb_data_32 = &flexcan_mb[2];
    b876:	9b07      	ldr	r3, [sp, #28]
    b878:	3308      	adds	r3, #8
    b87a:	9305      	str	r3, [sp, #20]
    uint32 * msgData_32 = NULL_PTR;
    b87c:	2300      	movs	r3, #0
    b87e:	9304      	str	r3, [sp, #16]
    uint8 flexcan_mb_dlc_value = (uint8)(((*flexcan_mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    b880:	9b07      	ldr	r3, [sp, #28]
    b882:	681b      	ldr	r3, [r3, #0]
    b884:	0c1b      	lsrs	r3, r3, #16
    b886:	b2db      	uxtb	r3, r3
    b888:	f003 030f 	and.w	r3, r3, #15
    b88c:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 can_real_payload = FlexCAN_ComputePayloadSize(flexcan_mb_dlc_value);
    b890:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b894:	4618      	mov	r0, r3
    b896:	f7fe fe6c 	bl	a572 <FlexCAN_ComputePayloadSize>
    b89a:	4603      	mov	r3, r0
    b89c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(rxFifo != NULL_PTR);
    #endif
    msgData_32 = (uint32 *)(rxFifo->data);
    b8a0:	9b00      	ldr	r3, [sp, #0]
    b8a2:	3308      	adds	r3, #8
    b8a4:	9304      	str	r3, [sp, #16]
       Check if the length of received data packet bigger than the maximum length accepted,
       then processing flow shall continue with the maximum length defined by configuration.
       Legacy FIFO just support in normal mode.
    */
    /* no need to check if FD enabled or not because this function just is invoked when legacy fifo enabled only ! */
    if (can_real_payload > 8U)
    b8a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    b8aa:	2b08      	cmp	r3, #8
    b8ac:	d902      	bls.n	b8b4 <FlexCAN_ReadRxFifo+0x52>
    {
        can_real_payload = 8U;
    b8ae:	2308      	movs	r3, #8
    b8b0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    }

    rxFifo->dataLen = can_real_payload;
    b8b4:	9b00      	ldr	r3, [sp, #0]
    b8b6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b8ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    rxFifo->cs = *flexcan_mb;
    b8be:	9b07      	ldr	r3, [sp, #28]
    b8c0:	681a      	ldr	r2, [r3, #0]
    b8c2:	9b00      	ldr	r3, [sp, #0]
    b8c4:	601a      	str	r2, [r3, #0]
    if ((rxFifo->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    b8c6:	9b00      	ldr	r3, [sp, #0]
    b8c8:	681b      	ldr	r3, [r3, #0]
    b8ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    b8ce:	2b00      	cmp	r3, #0
    b8d0:	d004      	beq.n	b8dc <FlexCAN_ReadRxFifo+0x7a>
    {
        rxFifo->msgId = *flexcan_mb_id;
    b8d2:	9b06      	ldr	r3, [sp, #24]
    b8d4:	681a      	ldr	r2, [r3, #0]
    b8d6:	9b00      	ldr	r3, [sp, #0]
    b8d8:	605a      	str	r2, [r3, #4]
    b8da:	e004      	b.n	b8e6 <FlexCAN_ReadRxFifo+0x84>
    }
    else
    {
        rxFifo->msgId = (*flexcan_mb_id) >> FLEXCAN_IP_ID_STD_SHIFT;
    b8dc:	9b06      	ldr	r3, [sp, #24]
    b8de:	681b      	ldr	r3, [r3, #0]
    b8e0:	0c9a      	lsrs	r2, r3, #18
    b8e2:	9b00      	ldr	r3, [sp, #0]
    b8e4:	605a      	str	r2, [r3, #4]
    }
    /* Extract the IDHIT */
    rxFifo->id_hit = (uint8)base->RXFIR;
    b8e6:	9b01      	ldr	r3, [sp, #4]
    b8e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b8ea:	b2da      	uxtb	r2, r3
    b8ec:	9b00      	ldr	r3, [sp, #0]
    b8ee:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    /* Extract the Time Stamp */
    rxFifo->time_stamp = (uint32)((rxFifo->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    b8f2:	9b00      	ldr	r3, [sp, #0]
    b8f4:	681b      	ldr	r3, [r3, #0]
    b8f6:	b29a      	uxth	r2, r3
    b8f8:	9b00      	ldr	r3, [sp, #0]
    b8fa:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, msgData_32[DataByte >> 2U]);
        }
    }
#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
      /* Copy MB[0] data field into user's buffer */
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    b8fc:	2300      	movs	r3, #0
    b8fe:	9309      	str	r3, [sp, #36]	; 0x24
    b900:	e01f      	b.n	b942 <FlexCAN_ReadRxFifo+0xe0>
    {
        MbWord = flexcan_mb_data_32[DataByte >> 2U];
    b902:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b904:	089b      	lsrs	r3, r3, #2
    b906:	009b      	lsls	r3, r3, #2
    b908:	9a05      	ldr	r2, [sp, #20]
    b90a:	4413      	add	r3, r2
    b90c:	681b      	ldr	r3, [r3, #0]
    b90e:	9302      	str	r3, [sp, #8]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (msgData_32[DataByte >> 2U]));
    b910:	9b02      	ldr	r3, [sp, #8]
    b912:	0e1a      	lsrs	r2, r3, #24
    b914:	9b02      	ldr	r3, [sp, #8]
    b916:	0a1b      	lsrs	r3, r3, #8
    b918:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    b91c:	431a      	orrs	r2, r3
    b91e:	9b02      	ldr	r3, [sp, #8]
    b920:	021b      	lsls	r3, r3, #8
    b922:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b926:	ea42 0103 	orr.w	r1, r2, r3
    b92a:	9b02      	ldr	r3, [sp, #8]
    b92c:	061a      	lsls	r2, r3, #24
    b92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b930:	089b      	lsrs	r3, r3, #2
    b932:	009b      	lsls	r3, r3, #2
    b934:	9804      	ldr	r0, [sp, #16]
    b936:	4403      	add	r3, r0
    b938:	430a      	orrs	r2, r1
    b93a:	601a      	str	r2, [r3, #0]
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    b93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b93e:	3304      	adds	r3, #4
    b940:	9309      	str	r3, [sp, #36]	; 0x24
    b942:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    b946:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b948:	429a      	cmp	r2, r3
    b94a:	d3da      	bcc.n	b902 <FlexCAN_ReadRxFifo+0xa0>
    }
#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
}
    b94c:	bf00      	nop
    b94e:	bf00      	nop
    b950:	b00b      	add	sp, #44	; 0x2c
    b952:	f85d fb04 	ldr.w	pc, [sp], #4

0000b956 <FlexCAN_IsMbOutOfRange>:
    const FLEXCAN_Type * pBase,
    uint8 u8MbIndex,
    boolean bIsLegacyFifoEn,
    uint32 u32MaxMbNum
)
{
    b956:	b088      	sub	sp, #32
    b958:	9003      	str	r0, [sp, #12]
    b95a:	9301      	str	r3, [sp, #4]
    b95c:	460b      	mov	r3, r1
    b95e:	f88d 300b 	strb.w	r3, [sp, #11]
    b962:	4613      	mov	r3, r2
    b964:	f88d 300a 	strb.w	r3, [sp, #10]
    boolean ReturnValue = FALSE;
    b968:	2300      	movs	r3, #0
    b96a:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32NumOfFiFoElement = 0U;
    b96e:	2300      	movs	r3, #0
    b970:	9306      	str	r3, [sp, #24]
    uint32 u32NumOfMbOccupiedByFiFo = 0U;
    b972:	2300      	movs	r3, #0
    b974:	9305      	str	r3, [sp, #20]

    if (u8MbIndex >= (uint8)u32MaxMbNum)
    b976:	9b01      	ldr	r3, [sp, #4]
    b978:	b2db      	uxtb	r3, r3
    b97a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b97e:	429a      	cmp	r2, r3
    b980:	d303      	bcc.n	b98a <FlexCAN_IsMbOutOfRange+0x34>
    {
       ReturnValue = TRUE;
    b982:	2301      	movs	r3, #1
    b984:	f88d 301f 	strb.w	r3, [sp, #31]
    b988:	e01b      	b.n	b9c2 <FlexCAN_IsMbOutOfRange+0x6c>
    }
    /* Check if RX FIFO is enabled*/
    else if (TRUE == bIsLegacyFifoEn)
    b98a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    b98e:	2b00      	cmp	r3, #0
    b990:	d014      	beq.n	b9bc <FlexCAN_IsMbOutOfRange+0x66>
    {
        /* Get the number of RX FIFO Filters*/
        u32NumOfFiFoElement = (((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    b992:	9b03      	ldr	r3, [sp, #12]
    b994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b996:	0e1b      	lsrs	r3, r3, #24
    b998:	f003 030f 	and.w	r3, r3, #15
    b99c:	9306      	str	r3, [sp, #24]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        u32NumOfMbOccupiedByFiFo = 5U + ((((u32NumOfFiFoElement) + 1U) * 8U) / 4U);
    b99e:	9b06      	ldr	r3, [sp, #24]
    b9a0:	3301      	adds	r3, #1
    b9a2:	00db      	lsls	r3, r3, #3
    b9a4:	089b      	lsrs	r3, r3, #2
    b9a6:	3305      	adds	r3, #5
    b9a8:	9305      	str	r3, [sp, #20]
        if (u8MbIndex <= u32NumOfMbOccupiedByFiFo)
    b9aa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b9ae:	9a05      	ldr	r2, [sp, #20]
    b9b0:	429a      	cmp	r2, r3
    b9b2:	d306      	bcc.n	b9c2 <FlexCAN_IsMbOutOfRange+0x6c>
        {
            ReturnValue = TRUE;
    b9b4:	2301      	movs	r3, #1
    b9b6:	f88d 301f 	strb.w	r3, [sp, #31]
    b9ba:	e002      	b.n	b9c2 <FlexCAN_IsMbOutOfRange+0x6c>
        }
    }
    else
    {
        ReturnValue = FALSE;
    b9bc:	2300      	movs	r3, #0
    b9be:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    return ReturnValue;
    b9c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    b9c6:	4618      	mov	r0, r3
    b9c8:	b008      	add	sp, #32
    b9ca:	4770      	bx	lr

0000b9cc <FlexCAN_ConfigCtrlOptions>:
 * Description   : configure controller depending on options
 * note: should be call after FD configuration.
 *
 *END**************************************************************************/
void FlexCAN_ConfigCtrlOptions(FLEXCAN_Type * pBase, uint32 u32Options)
{
    b9cc:	b500      	push	{lr}
    b9ce:	b083      	sub	sp, #12
    b9d0:	9001      	str	r0, [sp, #4]
    b9d2:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON)
    /* If the FD feature is enabled, in order to be ISO-compliant. */
    if ((u32Options & FLEXCAN_IP_ISO_U32) != 0U)
    b9d4:	9b00      	ldr	r3, [sp, #0]
    b9d6:	f003 0320 	and.w	r3, r3, #32
    b9da:	2b00      	cmp	r3, #0
    b9dc:	d004      	beq.n	b9e8 <FlexCAN_ConfigCtrlOptions+0x1c>
    {
        FlexCAN_SetIsoCan(pBase, TRUE);
    b9de:	2101      	movs	r1, #1
    b9e0:	9801      	ldr	r0, [sp, #4]
    b9e2:	f7fe fcd8 	bl	a396 <FlexCAN_SetIsoCan>
    b9e6:	e003      	b.n	b9f0 <FlexCAN_ConfigCtrlOptions+0x24>
    }
    else
    {
        /* This maybe don't have sense if the Deinit returns the state of registers at init values */
        FlexCAN_SetIsoCan(pBase, FALSE);
    b9e8:	2100      	movs	r1, #0
    b9ea:	9801      	ldr	r0, [sp, #4]
    b9ec:	f7fe fcd3 	bl	a396 <FlexCAN_SetIsoCan>
    }
#endif /*(FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON) */
    /* Set Entire Frame Arbitration Field Comparison. */
    if ((u32Options & FLEXCAN_IP_EACEN_U32) != 0U)
    b9f0:	9b00      	ldr	r3, [sp, #0]
    b9f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b9f6:	2b00      	cmp	r3, #0
    b9f8:	d004      	beq.n	ba04 <FlexCAN_ConfigCtrlOptions+0x38>
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, TRUE);
    b9fa:	2101      	movs	r1, #1
    b9fc:	9801      	ldr	r0, [sp, #4]
    b9fe:	f7fe fce1 	bl	a3c4 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    ba02:	e003      	b.n	ba0c <FlexCAN_ConfigCtrlOptions+0x40>
    }
    else
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, FALSE);
    ba04:	2100      	movs	r1, #0
    ba06:	9801      	ldr	r0, [sp, #4]
    ba08:	f7fe fcdc 	bl	a3c4 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    }
#if (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)
    /* Set protocol Exception */
    if ((u32Options & FLEXCAN_IP_PROTOCOL_EXCEPTION_U32) != 0U)
    ba0c:	9b00      	ldr	r3, [sp, #0]
    ba0e:	f003 0308 	and.w	r3, r3, #8
    ba12:	2b00      	cmp	r3, #0
    ba14:	d004      	beq.n	ba20 <FlexCAN_ConfigCtrlOptions+0x54>
    {
        FlexCAN_SetProtocolException(pBase, TRUE);
    ba16:	2101      	movs	r1, #1
    ba18:	9801      	ldr	r0, [sp, #4]
    ba1a:	f7fe fcea 	bl	a3f2 <FlexCAN_SetProtocolException>
    ba1e:	e003      	b.n	ba28 <FlexCAN_ConfigCtrlOptions+0x5c>
    }
    else
    {
        FlexCAN_SetProtocolException(pBase, FALSE);
    ba20:	2100      	movs	r1, #0
    ba22:	9801      	ldr	r0, [sp, #4]
    ba24:	f7fe fce5 	bl	a3f2 <FlexCAN_SetProtocolException>
    }
#endif /* Endif  (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)  */
    /* Set CAN Bit Sampling */
    if (((u32Options & FLEXCAN_IP_THREE_SAMPLES_U32) != 0U) && (0U == (pBase->MCR & FLEXCAN_MCR_FDEN_MASK)))
    ba28:	9b00      	ldr	r3, [sp, #0]
    ba2a:	f003 0302 	and.w	r3, r3, #2
    ba2e:	2b00      	cmp	r3, #0
    ba30:	d00a      	beq.n	ba48 <FlexCAN_ConfigCtrlOptions+0x7c>
    ba32:	9b01      	ldr	r3, [sp, #4]
    ba34:	681b      	ldr	r3, [r3, #0]
    ba36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    ba3a:	2b00      	cmp	r3, #0
    ba3c:	d104      	bne.n	ba48 <FlexCAN_ConfigCtrlOptions+0x7c>
    {
        FlexCAN_CanBitSampling(pBase, TRUE);
    ba3e:	2101      	movs	r1, #1
    ba40:	9801      	ldr	r0, [sp, #4]
    ba42:	f7fe fd31 	bl	a4a8 <FlexCAN_CanBitSampling>
    ba46:	e003      	b.n	ba50 <FlexCAN_ConfigCtrlOptions+0x84>
    }
    else
    {
        FlexCAN_CanBitSampling(pBase, FALSE);
    ba48:	2100      	movs	r1, #0
    ba4a:	9801      	ldr	r0, [sp, #4]
    ba4c:	f7fe fd2c 	bl	a4a8 <FlexCAN_CanBitSampling>
    }

    /* Set AutoBusOff Recovery */
    if ((u32Options & FLEXCAN_IP_BUSOFF_RECOVERY_U32) != 0U)
    ba50:	9b00      	ldr	r3, [sp, #0]
    ba52:	f003 0304 	and.w	r3, r3, #4
    ba56:	2b00      	cmp	r3, #0
    ba58:	d004      	beq.n	ba64 <FlexCAN_ConfigCtrlOptions+0x98>
    {
        FlexCAN_SetBusOffAutorecovery(pBase, TRUE);
    ba5a:	2101      	movs	r1, #1
    ba5c:	9801      	ldr	r0, [sp, #4]
    ba5e:	f7fe fcf6 	bl	a44e <FlexCAN_SetBusOffAutorecovery>
    ba62:	e003      	b.n	ba6c <FlexCAN_ConfigCtrlOptions+0xa0>
    }
    else
    {
        FlexCAN_SetBusOffAutorecovery(pBase, FALSE);
    ba64:	2100      	movs	r1, #0
    ba66:	9801      	ldr	r0, [sp, #4]
    ba68:	f7fe fcf1 	bl	a44e <FlexCAN_SetBusOffAutorecovery>
    }
    /* Set Remote Request Store for received of Remote Request Frames */
    if ((u32Options & FLEXCAN_IP_REM_STORE_U32) != 0U)
    ba6c:	9b00      	ldr	r3, [sp, #0]
    ba6e:	f003 0301 	and.w	r3, r3, #1
    ba72:	2b00      	cmp	r3, #0
    ba74:	d004      	beq.n	ba80 <FlexCAN_ConfigCtrlOptions+0xb4>
    {
        FlexCAN_SetRemoteReqStore(pBase, TRUE);
    ba76:	2101      	movs	r1, #1
    ba78:	9801      	ldr	r0, [sp, #4]
    ba7a:	f7fe fcd1 	bl	a420 <FlexCAN_SetRemoteReqStore>
    ba7e:	e003      	b.n	ba88 <FlexCAN_ConfigCtrlOptions+0xbc>
    }
    else
    {
        FlexCAN_SetRemoteReqStore(pBase, FALSE);
    ba80:	2100      	movs	r1, #0
    ba82:	9801      	ldr	r0, [sp, #4]
    ba84:	f7fe fccc 	bl	a420 <FlexCAN_SetRemoteReqStore>
    }
#if (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)
    /* Set Edge Filter */
    if ((u32Options & FLEXCAN_IP_EDGE_FILTER_U32) != 0U)
    ba88:	9b00      	ldr	r3, [sp, #0]
    ba8a:	f003 0310 	and.w	r3, r3, #16
    ba8e:	2b00      	cmp	r3, #0
    ba90:	d004      	beq.n	ba9c <FlexCAN_ConfigCtrlOptions+0xd0>
    {
        FlexCAN_SetEdgeFilter(pBase, TRUE);
    ba92:	2101      	movs	r1, #1
    ba94:	9801      	ldr	r0, [sp, #4]
    ba96:	f7fe fcf0 	bl	a47a <FlexCAN_SetEdgeFilter>
    else
    {
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    }
#endif /* End of (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)  */
}
    ba9a:	e003      	b.n	baa4 <FlexCAN_ConfigCtrlOptions+0xd8>
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    ba9c:	2100      	movs	r1, #0
    ba9e:	9801      	ldr	r0, [sp, #4]
    baa0:	f7fe fceb 	bl	a47a <FlexCAN_SetEdgeFilter>
}
    baa4:	bf00      	nop
    baa6:	b003      	add	sp, #12
    baa8:	f85d fb04 	ldr.w	pc, [sp], #4

0000baac <FlexCAN_ResetImaskBuff>:
 * Function Name : FlexCAN_ResetImaskBuff (uses in FlexCAN_Ip_Init function only)
 * Description   : Reset Imask Buffers.
 *
 *END**************************************************************************/
void FlexCAN_ResetImaskBuff(uint8 Instance)
{
    baac:	b084      	sub	sp, #16
    baae:	4603      	mov	r3, r0
    bab0:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ImaskCnt = 0U;
    bab4:	2300      	movs	r3, #0
    bab6:	f88d 300f 	strb.w	r3, [sp, #15]

    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    baba:	2300      	movs	r3, #0
    babc:	f88d 300f 	strb.w	r3, [sp, #15]
    bac0:	e00d      	b.n	bade <FlexCAN_ResetImaskBuff+0x32>
    {
        FlexCAN_Ip_au32ImaskBuff[Instance][ImaskCnt] = 0U;
    bac2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    bac6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    baca:	4909      	ldr	r1, [pc, #36]	; (baf0 <FlexCAN_ResetImaskBuff+0x44>)
    bacc:	4413      	add	r3, r2
    bace:	2200      	movs	r2, #0
    bad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    bad4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bad8:	3301      	adds	r3, #1
    bada:	f88d 300f 	strb.w	r3, [sp, #15]
    bade:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bae2:	2b00      	cmp	r3, #0
    bae4:	d0ed      	beq.n	bac2 <FlexCAN_ResetImaskBuff+0x16>
    }
}
    bae6:	bf00      	nop
    bae8:	bf00      	nop
    baea:	b004      	add	sp, #16
    baec:	4770      	bx	lr
    baee:	bf00      	nop
    baf0:	1fff8fa8 	.word	0x1fff8fa8

0000baf4 <CAN0_ORED_IRQHandler>:

#else

/* Implementation of CAN0 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN0_ORED_IRQHandler)
{
    baf4:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(0U);
    baf6:	2000      	movs	r0, #0
    baf8:	f7fd fb2a 	bl	9150 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    bafc:	f3bf 8f4f 	dsb	sy
}
    bb00:	bf00      	nop
    bb02:	bd08      	pop	{r3, pc}

0000bb04 <CAN0_Error_IRQHandler>:

/* Implementation of CAN0 handler named in startup code for processing of Errors reporting. */
ISR(CAN0_Error_IRQHandler)
{
    bb04:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(0U);
    bb06:	2000      	movs	r0, #0
    bb08:	f7fd fac2 	bl	9090 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    bb0c:	f3bf 8f4f 	dsb	sy
}
    bb10:	bf00      	nop
    bb12:	bd08      	pop	{r3, pc}

0000bb14 <CAN0_ORED_0_15_MB_IRQHandler>:
}
#endif
/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN0_ORED_0_15_MB_IRQHandler)
{
    bb14:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 0U, 15U);
    bb16:	220f      	movs	r2, #15
    bb18:	2100      	movs	r1, #0
    bb1a:	2000      	movs	r0, #0
    bb1c:	f7fd f9dc 	bl	8ed8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    bb20:	f3bf 8f4f 	dsb	sy
}
    bb24:	bf00      	nop
    bb26:	bd08      	pop	{r3, pc}

0000bb28 <CAN0_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN0_ORED_16_31_MB_IRQHandler)
{
    bb28:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 16U, 31U);
    bb2a:	221f      	movs	r2, #31
    bb2c:	2110      	movs	r1, #16
    bb2e:	2000      	movs	r0, #0
    bb30:	f7fd f9d2 	bl	8ed8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    bb34:	f3bf 8f4f 	dsb	sy
}
    bb38:	bf00      	nop
    bb3a:	bd08      	pop	{r3, pc}

0000bb3c <CAN1_ORED_IRQHandler>:
#endif /* (defined(S32K142W) || defined(S32K144W) || defined(S32M243) || defined(S32M244)) */

#if (FLEXCAN_INSTANCE_COUNT > 1U)
/* Implementation of CAN1 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN1_ORED_IRQHandler)
{
    bb3c:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(1U);
    bb3e:	2001      	movs	r0, #1
    bb40:	f7fd fb06 	bl	9150 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    bb44:	f3bf 8f4f 	dsb	sy
}
    bb48:	bf00      	nop
    bb4a:	bd08      	pop	{r3, pc}

0000bb4c <CAN1_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN1_Error_IRQHandler)
{
    bb4c:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(1U);
    bb4e:	2001      	movs	r0, #1
    bb50:	f7fd fa9e 	bl	9090 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    bb54:	f3bf 8f4f 	dsb	sy
}
    bb58:	bf00      	nop
    bb5a:	bd08      	pop	{r3, pc}

0000bb5c <CAN1_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN1_ORED_0_15_MB_IRQHandler)
{
    bb5c:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 0U, 15U);
    bb5e:	220f      	movs	r2, #15
    bb60:	2100      	movs	r1, #0
    bb62:	2001      	movs	r0, #1
    bb64:	f7fd f9b8 	bl	8ed8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    bb68:	f3bf 8f4f 	dsb	sy
}
    bb6c:	bf00      	nop
    bb6e:	bd08      	pop	{r3, pc}

0000bb70 <CAN1_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN1_ORED_16_31_MB_IRQHandler)
{
    bb70:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 16U, 31U);
    bb72:	221f      	movs	r2, #31
    bb74:	2110      	movs	r1, #16
    bb76:	2001      	movs	r0, #1
    bb78:	f7fd f9ae 	bl	8ed8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    bb7c:	f3bf 8f4f 	dsb	sy
}
    bb80:	bf00      	nop
    bb82:	bd08      	pop	{r3, pc}

0000bb84 <CAN2_ORED_IRQHandler>:
#endif /* (FLEXCAN_INSTANCE_COUNT > 1U) */

#if (FLEXCAN_INSTANCE_COUNT > 2U)
/* Implementation of CAN2 handler named in startup code for processing of Errors and Bus Off reporting. */
ISR(CAN2_ORED_IRQHandler)
{
    bb84:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(2U);
    bb86:	2002      	movs	r0, #2
    bb88:	f7fd fae2 	bl	9150 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    bb8c:	f3bf 8f4f 	dsb	sy
}
    bb90:	bf00      	nop
    bb92:	bd08      	pop	{r3, pc}

0000bb94 <CAN2_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN2_Error_IRQHandler)
{
    bb94:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(2U);
    bb96:	2002      	movs	r0, #2
    bb98:	f7fd fa7a 	bl	9090 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    bb9c:	f3bf 8f4f 	dsb	sy
}
    bba0:	bf00      	nop
    bba2:	bd08      	pop	{r3, pc}

0000bba4 <CAN2_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN2 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN2_ORED_0_15_MB_IRQHandler)
{
    bba4:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(2U, 0U, 15U);
    bba6:	220f      	movs	r2, #15
    bba8:	2100      	movs	r1, #0
    bbaa:	2002      	movs	r0, #2
    bbac:	f7fd f994 	bl	8ed8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    bbb0:	f3bf 8f4f 	dsb	sy
}
    bbb4:	bf00      	nop
    bbb6:	bd08      	pop	{r3, pc}

0000bbb8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    bbb8:	b500      	push	{lr}
    bbba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bbbc:	f7f5 f804 	bl	bc8 <Sys_GetCoreID>
    bbc0:	4603      	mov	r3, r0
    bbc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId])
    bbc4:	4a10      	ldr	r2, [pc, #64]	; (bc08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    bbc6:	9b01      	ldr	r3, [sp, #4]
    bbc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbcc:	2b00      	cmp	r3, #0
    bbce:	d10d      	bne.n	bbec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bbd0:	f7f4 ff18 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    bbd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bbd6:	9b00      	ldr	r3, [sp, #0]
    bbd8:	f003 0301 	and.w	r3, r3, #1
    bbdc:	2b00      	cmp	r3, #0
    bbde:	d100      	bne.n	bbe2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bbe0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    bbe2:	490a      	ldr	r1, [pc, #40]	; (bc0c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x54>)
    bbe4:	9b01      	ldr	r3, [sp, #4]
    bbe6:	9a00      	ldr	r2, [sp, #0]
    bbe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]++;
    bbec:	4a06      	ldr	r2, [pc, #24]	; (bc08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    bbee:	9b01      	ldr	r3, [sp, #4]
    bbf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbf4:	1c5a      	adds	r2, r3, #1
    bbf6:	4904      	ldr	r1, [pc, #16]	; (bc08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    bbf8:	9b01      	ldr	r3, [sp, #4]
    bbfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bbfe:	bf00      	nop
    bc00:	b003      	add	sp, #12
    bc02:	f85d fb04 	ldr.w	pc, [sp], #4
    bc06:	bf00      	nop
    bc08:	1fff8fb8 	.word	0x1fff8fb8
    bc0c:	1fff8fb4 	.word	0x1fff8fb4

0000bc10 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    bc10:	b500      	push	{lr}
    bc12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc14:	f7f4 ffd8 	bl	bc8 <Sys_GetCoreID>
    bc18:	4603      	mov	r3, r0
    bc1a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]--;
    bc1c:	4a0d      	ldr	r2, [pc, #52]	; (bc54 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    bc1e:	9b01      	ldr	r3, [sp, #4]
    bc20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc24:	1e5a      	subs	r2, r3, #1
    bc26:	490b      	ldr	r1, [pc, #44]	; (bc54 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    bc28:	9b01      	ldr	r3, [sp, #4]
    bc2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    bc2e:	4a0a      	ldr	r2, [pc, #40]	; (bc58 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x48>)
    bc30:	9b01      	ldr	r3, [sp, #4]
    bc32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc36:	f003 0301 	and.w	r3, r3, #1
    bc3a:	2b00      	cmp	r3, #0
    bc3c:	d106      	bne.n	bc4c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    bc3e:	4a05      	ldr	r2, [pc, #20]	; (bc54 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    bc40:	9b01      	ldr	r3, [sp, #4]
    bc42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc46:	2b00      	cmp	r3, #0
    bc48:	d100      	bne.n	bc4c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bc4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bc4c:	bf00      	nop
    bc4e:	b003      	add	sp, #12
    bc50:	f85d fb04 	ldr.w	pc, [sp], #4
    bc54:	1fff8fb8 	.word	0x1fff8fb8
    bc58:	1fff8fb4 	.word	0x1fff8fb4

0000bc5c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    bc5c:	b500      	push	{lr}
    bc5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc60:	f7f4 ffb2 	bl	bc8 <Sys_GetCoreID>
    bc64:	4603      	mov	r3, r0
    bc66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId])
    bc68:	4a10      	ldr	r2, [pc, #64]	; (bcac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    bc6a:	9b01      	ldr	r3, [sp, #4]
    bc6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc70:	2b00      	cmp	r3, #0
    bc72:	d10d      	bne.n	bc90 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bc74:	f7f4 fec6 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    bc78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bc7a:	9b00      	ldr	r3, [sp, #0]
    bc7c:	f003 0301 	and.w	r3, r3, #1
    bc80:	2b00      	cmp	r3, #0
    bc82:	d100      	bne.n	bc86 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bc84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    bc86:	490a      	ldr	r1, [pc, #40]	; (bcb0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x54>)
    bc88:	9b01      	ldr	r3, [sp, #4]
    bc8a:	9a00      	ldr	r2, [sp, #0]
    bc8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]++;
    bc90:	4a06      	ldr	r2, [pc, #24]	; (bcac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    bc92:	9b01      	ldr	r3, [sp, #4]
    bc94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc98:	1c5a      	adds	r2, r3, #1
    bc9a:	4904      	ldr	r1, [pc, #16]	; (bcac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    bc9c:	9b01      	ldr	r3, [sp, #4]
    bc9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bca2:	bf00      	nop
    bca4:	b003      	add	sp, #12
    bca6:	f85d fb04 	ldr.w	pc, [sp], #4
    bcaa:	bf00      	nop
    bcac:	1fff8fc0 	.word	0x1fff8fc0
    bcb0:	1fff8fbc 	.word	0x1fff8fbc

0000bcb4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    bcb4:	b500      	push	{lr}
    bcb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bcb8:	f7f4 ff86 	bl	bc8 <Sys_GetCoreID>
    bcbc:	4603      	mov	r3, r0
    bcbe:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]--;
    bcc0:	4a0d      	ldr	r2, [pc, #52]	; (bcf8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    bcc2:	9b01      	ldr	r3, [sp, #4]
    bcc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcc8:	1e5a      	subs	r2, r3, #1
    bcca:	490b      	ldr	r1, [pc, #44]	; (bcf8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    bccc:	9b01      	ldr	r3, [sp, #4]
    bcce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    bcd2:	4a0a      	ldr	r2, [pc, #40]	; (bcfc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x48>)
    bcd4:	9b01      	ldr	r3, [sp, #4]
    bcd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcda:	f003 0301 	and.w	r3, r3, #1
    bcde:	2b00      	cmp	r3, #0
    bce0:	d106      	bne.n	bcf0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    bce2:	4a05      	ldr	r2, [pc, #20]	; (bcf8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    bce4:	9b01      	ldr	r3, [sp, #4]
    bce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcea:	2b00      	cmp	r3, #0
    bcec:	d100      	bne.n	bcf0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bcee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bcf0:	bf00      	nop
    bcf2:	b003      	add	sp, #12
    bcf4:	f85d fb04 	ldr.w	pc, [sp], #4
    bcf8:	1fff8fc0 	.word	0x1fff8fc0
    bcfc:	1fff8fbc 	.word	0x1fff8fbc

0000bd00 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    bd00:	b500      	push	{lr}
    bd02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd04:	f7f4 ff60 	bl	bc8 <Sys_GetCoreID>
    bd08:	4603      	mov	r3, r0
    bd0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId])
    bd0c:	4a10      	ldr	r2, [pc, #64]	; (bd50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    bd0e:	9b01      	ldr	r3, [sp, #4]
    bd10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd14:	2b00      	cmp	r3, #0
    bd16:	d10d      	bne.n	bd34 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bd18:	f7f4 fe74 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    bd1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bd1e:	9b00      	ldr	r3, [sp, #0]
    bd20:	f003 0301 	and.w	r3, r3, #1
    bd24:	2b00      	cmp	r3, #0
    bd26:	d100      	bne.n	bd2a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bd28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    bd2a:	490a      	ldr	r1, [pc, #40]	; (bd54 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x54>)
    bd2c:	9b01      	ldr	r3, [sp, #4]
    bd2e:	9a00      	ldr	r2, [sp, #0]
    bd30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]++;
    bd34:	4a06      	ldr	r2, [pc, #24]	; (bd50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    bd36:	9b01      	ldr	r3, [sp, #4]
    bd38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd3c:	1c5a      	adds	r2, r3, #1
    bd3e:	4904      	ldr	r1, [pc, #16]	; (bd50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    bd40:	9b01      	ldr	r3, [sp, #4]
    bd42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bd46:	bf00      	nop
    bd48:	b003      	add	sp, #12
    bd4a:	f85d fb04 	ldr.w	pc, [sp], #4
    bd4e:	bf00      	nop
    bd50:	1fff8fc8 	.word	0x1fff8fc8
    bd54:	1fff8fc4 	.word	0x1fff8fc4

0000bd58 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    bd58:	b500      	push	{lr}
    bd5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd5c:	f7f4 ff34 	bl	bc8 <Sys_GetCoreID>
    bd60:	4603      	mov	r3, r0
    bd62:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]--;
    bd64:	4a0d      	ldr	r2, [pc, #52]	; (bd9c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    bd66:	9b01      	ldr	r3, [sp, #4]
    bd68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd6c:	1e5a      	subs	r2, r3, #1
    bd6e:	490b      	ldr	r1, [pc, #44]	; (bd9c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    bd70:	9b01      	ldr	r3, [sp, #4]
    bd72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    bd76:	4a0a      	ldr	r2, [pc, #40]	; (bda0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x48>)
    bd78:	9b01      	ldr	r3, [sp, #4]
    bd7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd7e:	f003 0301 	and.w	r3, r3, #1
    bd82:	2b00      	cmp	r3, #0
    bd84:	d106      	bne.n	bd94 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    bd86:	4a05      	ldr	r2, [pc, #20]	; (bd9c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    bd88:	9b01      	ldr	r3, [sp, #4]
    bd8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd8e:	2b00      	cmp	r3, #0
    bd90:	d100      	bne.n	bd94 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bd92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bd94:	bf00      	nop
    bd96:	b003      	add	sp, #12
    bd98:	f85d fb04 	ldr.w	pc, [sp], #4
    bd9c:	1fff8fc8 	.word	0x1fff8fc8
    bda0:	1fff8fc4 	.word	0x1fff8fc4

0000bda4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    bda4:	b500      	push	{lr}
    bda6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bda8:	f7f4 ff0e 	bl	bc8 <Sys_GetCoreID>
    bdac:	4603      	mov	r3, r0
    bdae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId])
    bdb0:	4a10      	ldr	r2, [pc, #64]	; (bdf4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    bdb2:	9b01      	ldr	r3, [sp, #4]
    bdb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdb8:	2b00      	cmp	r3, #0
    bdba:	d10d      	bne.n	bdd8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bdbc:	f7f4 fe22 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    bdc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bdc2:	9b00      	ldr	r3, [sp, #0]
    bdc4:	f003 0301 	and.w	r3, r3, #1
    bdc8:	2b00      	cmp	r3, #0
    bdca:	d100      	bne.n	bdce <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bdcc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    bdce:	490a      	ldr	r1, [pc, #40]	; (bdf8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x54>)
    bdd0:	9b01      	ldr	r3, [sp, #4]
    bdd2:	9a00      	ldr	r2, [sp, #0]
    bdd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]++;
    bdd8:	4a06      	ldr	r2, [pc, #24]	; (bdf4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    bdda:	9b01      	ldr	r3, [sp, #4]
    bddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bde0:	1c5a      	adds	r2, r3, #1
    bde2:	4904      	ldr	r1, [pc, #16]	; (bdf4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    bde4:	9b01      	ldr	r3, [sp, #4]
    bde6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bdea:	bf00      	nop
    bdec:	b003      	add	sp, #12
    bdee:	f85d fb04 	ldr.w	pc, [sp], #4
    bdf2:	bf00      	nop
    bdf4:	1fff8fd0 	.word	0x1fff8fd0
    bdf8:	1fff8fcc 	.word	0x1fff8fcc

0000bdfc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    bdfc:	b500      	push	{lr}
    bdfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be00:	f7f4 fee2 	bl	bc8 <Sys_GetCoreID>
    be04:	4603      	mov	r3, r0
    be06:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]--;
    be08:	4a0d      	ldr	r2, [pc, #52]	; (be40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    be0a:	9b01      	ldr	r3, [sp, #4]
    be0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be10:	1e5a      	subs	r2, r3, #1
    be12:	490b      	ldr	r1, [pc, #44]	; (be40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    be14:	9b01      	ldr	r3, [sp, #4]
    be16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    be1a:	4a0a      	ldr	r2, [pc, #40]	; (be44 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x48>)
    be1c:	9b01      	ldr	r3, [sp, #4]
    be1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be22:	f003 0301 	and.w	r3, r3, #1
    be26:	2b00      	cmp	r3, #0
    be28:	d106      	bne.n	be38 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    be2a:	4a05      	ldr	r2, [pc, #20]	; (be40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    be2c:	9b01      	ldr	r3, [sp, #4]
    be2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be32:	2b00      	cmp	r3, #0
    be34:	d100      	bne.n	be38 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    be36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    be38:	bf00      	nop
    be3a:	b003      	add	sp, #12
    be3c:	f85d fb04 	ldr.w	pc, [sp], #4
    be40:	1fff8fd0 	.word	0x1fff8fd0
    be44:	1fff8fcc 	.word	0x1fff8fcc

0000be48 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    be48:	b500      	push	{lr}
    be4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be4c:	f7f4 febc 	bl	bc8 <Sys_GetCoreID>
    be50:	4603      	mov	r3, r0
    be52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId])
    be54:	4a10      	ldr	r2, [pc, #64]	; (be98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    be56:	9b01      	ldr	r3, [sp, #4]
    be58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be5c:	2b00      	cmp	r3, #0
    be5e:	d10d      	bne.n	be7c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    be60:	f7f4 fdd0 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    be64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    be66:	9b00      	ldr	r3, [sp, #0]
    be68:	f003 0301 	and.w	r3, r3, #1
    be6c:	2b00      	cmp	r3, #0
    be6e:	d100      	bne.n	be72 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    be70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    be72:	490a      	ldr	r1, [pc, #40]	; (be9c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x54>)
    be74:	9b01      	ldr	r3, [sp, #4]
    be76:	9a00      	ldr	r2, [sp, #0]
    be78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]++;
    be7c:	4a06      	ldr	r2, [pc, #24]	; (be98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    be7e:	9b01      	ldr	r3, [sp, #4]
    be80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be84:	1c5a      	adds	r2, r3, #1
    be86:	4904      	ldr	r1, [pc, #16]	; (be98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    be88:	9b01      	ldr	r3, [sp, #4]
    be8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    be8e:	bf00      	nop
    be90:	b003      	add	sp, #12
    be92:	f85d fb04 	ldr.w	pc, [sp], #4
    be96:	bf00      	nop
    be98:	1fff8fd8 	.word	0x1fff8fd8
    be9c:	1fff8fd4 	.word	0x1fff8fd4

0000bea0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    bea0:	b500      	push	{lr}
    bea2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bea4:	f7f4 fe90 	bl	bc8 <Sys_GetCoreID>
    bea8:	4603      	mov	r3, r0
    beaa:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]--;
    beac:	4a0d      	ldr	r2, [pc, #52]	; (bee4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    beae:	9b01      	ldr	r3, [sp, #4]
    beb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    beb4:	1e5a      	subs	r2, r3, #1
    beb6:	490b      	ldr	r1, [pc, #44]	; (bee4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    beb8:	9b01      	ldr	r3, [sp, #4]
    beba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    bebe:	4a0a      	ldr	r2, [pc, #40]	; (bee8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x48>)
    bec0:	9b01      	ldr	r3, [sp, #4]
    bec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bec6:	f003 0301 	and.w	r3, r3, #1
    beca:	2b00      	cmp	r3, #0
    becc:	d106      	bne.n	bedc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    bece:	4a05      	ldr	r2, [pc, #20]	; (bee4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    bed0:	9b01      	ldr	r3, [sp, #4]
    bed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bed6:	2b00      	cmp	r3, #0
    bed8:	d100      	bne.n	bedc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    beda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bedc:	bf00      	nop
    bede:	b003      	add	sp, #12
    bee0:	f85d fb04 	ldr.w	pc, [sp], #4
    bee4:	1fff8fd8 	.word	0x1fff8fd8
    bee8:	1fff8fd4 	.word	0x1fff8fd4

0000beec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    beec:	b500      	push	{lr}
    beee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bef0:	f7f4 fe6a 	bl	bc8 <Sys_GetCoreID>
    bef4:	4603      	mov	r3, r0
    bef6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId])
    bef8:	4a10      	ldr	r2, [pc, #64]	; (bf3c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    befa:	9b01      	ldr	r3, [sp, #4]
    befc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf00:	2b00      	cmp	r3, #0
    bf02:	d10d      	bne.n	bf20 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bf04:	f7f4 fd7e 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    bf08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bf0a:	9b00      	ldr	r3, [sp, #0]
    bf0c:	f003 0301 	and.w	r3, r3, #1
    bf10:	2b00      	cmp	r3, #0
    bf12:	d100      	bne.n	bf16 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bf14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    bf16:	490a      	ldr	r1, [pc, #40]	; (bf40 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x54>)
    bf18:	9b01      	ldr	r3, [sp, #4]
    bf1a:	9a00      	ldr	r2, [sp, #0]
    bf1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]++;
    bf20:	4a06      	ldr	r2, [pc, #24]	; (bf3c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    bf22:	9b01      	ldr	r3, [sp, #4]
    bf24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf28:	1c5a      	adds	r2, r3, #1
    bf2a:	4904      	ldr	r1, [pc, #16]	; (bf3c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    bf2c:	9b01      	ldr	r3, [sp, #4]
    bf2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bf32:	bf00      	nop
    bf34:	b003      	add	sp, #12
    bf36:	f85d fb04 	ldr.w	pc, [sp], #4
    bf3a:	bf00      	nop
    bf3c:	1fff8fe0 	.word	0x1fff8fe0
    bf40:	1fff8fdc 	.word	0x1fff8fdc

0000bf44 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    bf44:	b500      	push	{lr}
    bf46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf48:	f7f4 fe3e 	bl	bc8 <Sys_GetCoreID>
    bf4c:	4603      	mov	r3, r0
    bf4e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]--;
    bf50:	4a0d      	ldr	r2, [pc, #52]	; (bf88 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    bf52:	9b01      	ldr	r3, [sp, #4]
    bf54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf58:	1e5a      	subs	r2, r3, #1
    bf5a:	490b      	ldr	r1, [pc, #44]	; (bf88 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    bf5c:	9b01      	ldr	r3, [sp, #4]
    bf5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    bf62:	4a0a      	ldr	r2, [pc, #40]	; (bf8c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x48>)
    bf64:	9b01      	ldr	r3, [sp, #4]
    bf66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf6a:	f003 0301 	and.w	r3, r3, #1
    bf6e:	2b00      	cmp	r3, #0
    bf70:	d106      	bne.n	bf80 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    bf72:	4a05      	ldr	r2, [pc, #20]	; (bf88 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    bf74:	9b01      	ldr	r3, [sp, #4]
    bf76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf7a:	2b00      	cmp	r3, #0
    bf7c:	d100      	bne.n	bf80 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bf7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bf80:	bf00      	nop
    bf82:	b003      	add	sp, #12
    bf84:	f85d fb04 	ldr.w	pc, [sp], #4
    bf88:	1fff8fe0 	.word	0x1fff8fe0
    bf8c:	1fff8fdc 	.word	0x1fff8fdc

0000bf90 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    bf90:	b500      	push	{lr}
    bf92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf94:	f7f4 fe18 	bl	bc8 <Sys_GetCoreID>
    bf98:	4603      	mov	r3, r0
    bf9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId])
    bf9c:	4a10      	ldr	r2, [pc, #64]	; (bfe0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    bf9e:	9b01      	ldr	r3, [sp, #4]
    bfa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfa4:	2b00      	cmp	r3, #0
    bfa6:	d10d      	bne.n	bfc4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bfa8:	f7f4 fd2c 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    bfac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bfae:	9b00      	ldr	r3, [sp, #0]
    bfb0:	f003 0301 	and.w	r3, r3, #1
    bfb4:	2b00      	cmp	r3, #0
    bfb6:	d100      	bne.n	bfba <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bfb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    bfba:	490a      	ldr	r1, [pc, #40]	; (bfe4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x54>)
    bfbc:	9b01      	ldr	r3, [sp, #4]
    bfbe:	9a00      	ldr	r2, [sp, #0]
    bfc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]++;
    bfc4:	4a06      	ldr	r2, [pc, #24]	; (bfe0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    bfc6:	9b01      	ldr	r3, [sp, #4]
    bfc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfcc:	1c5a      	adds	r2, r3, #1
    bfce:	4904      	ldr	r1, [pc, #16]	; (bfe0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    bfd0:	9b01      	ldr	r3, [sp, #4]
    bfd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bfd6:	bf00      	nop
    bfd8:	b003      	add	sp, #12
    bfda:	f85d fb04 	ldr.w	pc, [sp], #4
    bfde:	bf00      	nop
    bfe0:	1fff8fe8 	.word	0x1fff8fe8
    bfe4:	1fff8fe4 	.word	0x1fff8fe4

0000bfe8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    bfe8:	b500      	push	{lr}
    bfea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bfec:	f7f4 fdec 	bl	bc8 <Sys_GetCoreID>
    bff0:	4603      	mov	r3, r0
    bff2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]--;
    bff4:	4a0d      	ldr	r2, [pc, #52]	; (c02c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    bff6:	9b01      	ldr	r3, [sp, #4]
    bff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bffc:	1e5a      	subs	r2, r3, #1
    bffe:	490b      	ldr	r1, [pc, #44]	; (c02c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    c000:	9b01      	ldr	r3, [sp, #4]
    c002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    c006:	4a0a      	ldr	r2, [pc, #40]	; (c030 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x48>)
    c008:	9b01      	ldr	r3, [sp, #4]
    c00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c00e:	f003 0301 	and.w	r3, r3, #1
    c012:	2b00      	cmp	r3, #0
    c014:	d106      	bne.n	c024 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    c016:	4a05      	ldr	r2, [pc, #20]	; (c02c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    c018:	9b01      	ldr	r3, [sp, #4]
    c01a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c01e:	2b00      	cmp	r3, #0
    c020:	d100      	bne.n	c024 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c022:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c024:	bf00      	nop
    c026:	b003      	add	sp, #12
    c028:	f85d fb04 	ldr.w	pc, [sp], #4
    c02c:	1fff8fe8 	.word	0x1fff8fe8
    c030:	1fff8fe4 	.word	0x1fff8fe4

0000c034 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    c034:	b500      	push	{lr}
    c036:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c038:	f7f4 fdc6 	bl	bc8 <Sys_GetCoreID>
    c03c:	4603      	mov	r3, r0
    c03e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId])
    c040:	4a10      	ldr	r2, [pc, #64]	; (c084 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    c042:	9b01      	ldr	r3, [sp, #4]
    c044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c048:	2b00      	cmp	r3, #0
    c04a:	d10d      	bne.n	c068 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c04c:	f7f4 fcda 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    c050:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c052:	9b00      	ldr	r3, [sp, #0]
    c054:	f003 0301 	and.w	r3, r3, #1
    c058:	2b00      	cmp	r3, #0
    c05a:	d100      	bne.n	c05e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c05c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    c05e:	490a      	ldr	r1, [pc, #40]	; (c088 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x54>)
    c060:	9b01      	ldr	r3, [sp, #4]
    c062:	9a00      	ldr	r2, [sp, #0]
    c064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]++;
    c068:	4a06      	ldr	r2, [pc, #24]	; (c084 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    c06a:	9b01      	ldr	r3, [sp, #4]
    c06c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c070:	1c5a      	adds	r2, r3, #1
    c072:	4904      	ldr	r1, [pc, #16]	; (c084 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    c074:	9b01      	ldr	r3, [sp, #4]
    c076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c07a:	bf00      	nop
    c07c:	b003      	add	sp, #12
    c07e:	f85d fb04 	ldr.w	pc, [sp], #4
    c082:	bf00      	nop
    c084:	1fff8ff0 	.word	0x1fff8ff0
    c088:	1fff8fec 	.word	0x1fff8fec

0000c08c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    c08c:	b500      	push	{lr}
    c08e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c090:	f7f4 fd9a 	bl	bc8 <Sys_GetCoreID>
    c094:	4603      	mov	r3, r0
    c096:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]--;
    c098:	4a0d      	ldr	r2, [pc, #52]	; (c0d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    c09a:	9b01      	ldr	r3, [sp, #4]
    c09c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0a0:	1e5a      	subs	r2, r3, #1
    c0a2:	490b      	ldr	r1, [pc, #44]	; (c0d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    c0a4:	9b01      	ldr	r3, [sp, #4]
    c0a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    c0aa:	4a0a      	ldr	r2, [pc, #40]	; (c0d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x48>)
    c0ac:	9b01      	ldr	r3, [sp, #4]
    c0ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0b2:	f003 0301 	and.w	r3, r3, #1
    c0b6:	2b00      	cmp	r3, #0
    c0b8:	d106      	bne.n	c0c8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    c0ba:	4a05      	ldr	r2, [pc, #20]	; (c0d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    c0bc:	9b01      	ldr	r3, [sp, #4]
    c0be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0c2:	2b00      	cmp	r3, #0
    c0c4:	d100      	bne.n	c0c8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c0c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c0c8:	bf00      	nop
    c0ca:	b003      	add	sp, #12
    c0cc:	f85d fb04 	ldr.w	pc, [sp], #4
    c0d0:	1fff8ff0 	.word	0x1fff8ff0
    c0d4:	1fff8fec 	.word	0x1fff8fec

0000c0d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    c0d8:	b500      	push	{lr}
    c0da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c0dc:	f7f4 fd74 	bl	bc8 <Sys_GetCoreID>
    c0e0:	4603      	mov	r3, r0
    c0e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId])
    c0e4:	4a10      	ldr	r2, [pc, #64]	; (c128 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    c0e6:	9b01      	ldr	r3, [sp, #4]
    c0e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0ec:	2b00      	cmp	r3, #0
    c0ee:	d10d      	bne.n	c10c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c0f0:	f7f4 fc88 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    c0f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c0f6:	9b00      	ldr	r3, [sp, #0]
    c0f8:	f003 0301 	and.w	r3, r3, #1
    c0fc:	2b00      	cmp	r3, #0
    c0fe:	d100      	bne.n	c102 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c100:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    c102:	490a      	ldr	r1, [pc, #40]	; (c12c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x54>)
    c104:	9b01      	ldr	r3, [sp, #4]
    c106:	9a00      	ldr	r2, [sp, #0]
    c108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]++;
    c10c:	4a06      	ldr	r2, [pc, #24]	; (c128 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    c10e:	9b01      	ldr	r3, [sp, #4]
    c110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c114:	1c5a      	adds	r2, r3, #1
    c116:	4904      	ldr	r1, [pc, #16]	; (c128 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    c118:	9b01      	ldr	r3, [sp, #4]
    c11a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c11e:	bf00      	nop
    c120:	b003      	add	sp, #12
    c122:	f85d fb04 	ldr.w	pc, [sp], #4
    c126:	bf00      	nop
    c128:	1fff8ff8 	.word	0x1fff8ff8
    c12c:	1fff8ff4 	.word	0x1fff8ff4

0000c130 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    c130:	b500      	push	{lr}
    c132:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c134:	f7f4 fd48 	bl	bc8 <Sys_GetCoreID>
    c138:	4603      	mov	r3, r0
    c13a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]--;
    c13c:	4a0d      	ldr	r2, [pc, #52]	; (c174 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    c13e:	9b01      	ldr	r3, [sp, #4]
    c140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c144:	1e5a      	subs	r2, r3, #1
    c146:	490b      	ldr	r1, [pc, #44]	; (c174 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    c148:	9b01      	ldr	r3, [sp, #4]
    c14a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    c14e:	4a0a      	ldr	r2, [pc, #40]	; (c178 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x48>)
    c150:	9b01      	ldr	r3, [sp, #4]
    c152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c156:	f003 0301 	and.w	r3, r3, #1
    c15a:	2b00      	cmp	r3, #0
    c15c:	d106      	bne.n	c16c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    c15e:	4a05      	ldr	r2, [pc, #20]	; (c174 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    c160:	9b01      	ldr	r3, [sp, #4]
    c162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c166:	2b00      	cmp	r3, #0
    c168:	d100      	bne.n	c16c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c16a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c16c:	bf00      	nop
    c16e:	b003      	add	sp, #12
    c170:	f85d fb04 	ldr.w	pc, [sp], #4
    c174:	1fff8ff8 	.word	0x1fff8ff8
    c178:	1fff8ff4 	.word	0x1fff8ff4

0000c17c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    c17c:	b500      	push	{lr}
    c17e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c180:	f7f4 fd22 	bl	bc8 <Sys_GetCoreID>
    c184:	4603      	mov	r3, r0
    c186:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId])
    c188:	4a10      	ldr	r2, [pc, #64]	; (c1cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    c18a:	9b01      	ldr	r3, [sp, #4]
    c18c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c190:	2b00      	cmp	r3, #0
    c192:	d10d      	bne.n	c1b0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c194:	f7f4 fc36 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    c198:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c19a:	9b00      	ldr	r3, [sp, #0]
    c19c:	f003 0301 	and.w	r3, r3, #1
    c1a0:	2b00      	cmp	r3, #0
    c1a2:	d100      	bne.n	c1a6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c1a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    c1a6:	490a      	ldr	r1, [pc, #40]	; (c1d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x54>)
    c1a8:	9b01      	ldr	r3, [sp, #4]
    c1aa:	9a00      	ldr	r2, [sp, #0]
    c1ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]++;
    c1b0:	4a06      	ldr	r2, [pc, #24]	; (c1cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    c1b2:	9b01      	ldr	r3, [sp, #4]
    c1b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1b8:	1c5a      	adds	r2, r3, #1
    c1ba:	4904      	ldr	r1, [pc, #16]	; (c1cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    c1bc:	9b01      	ldr	r3, [sp, #4]
    c1be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c1c2:	bf00      	nop
    c1c4:	b003      	add	sp, #12
    c1c6:	f85d fb04 	ldr.w	pc, [sp], #4
    c1ca:	bf00      	nop
    c1cc:	1fff9000 	.word	0x1fff9000
    c1d0:	1fff8ffc 	.word	0x1fff8ffc

0000c1d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    c1d4:	b500      	push	{lr}
    c1d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c1d8:	f7f4 fcf6 	bl	bc8 <Sys_GetCoreID>
    c1dc:	4603      	mov	r3, r0
    c1de:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]--;
    c1e0:	4a0d      	ldr	r2, [pc, #52]	; (c218 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    c1e2:	9b01      	ldr	r3, [sp, #4]
    c1e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1e8:	1e5a      	subs	r2, r3, #1
    c1ea:	490b      	ldr	r1, [pc, #44]	; (c218 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    c1ec:	9b01      	ldr	r3, [sp, #4]
    c1ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    c1f2:	4a0a      	ldr	r2, [pc, #40]	; (c21c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x48>)
    c1f4:	9b01      	ldr	r3, [sp, #4]
    c1f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1fa:	f003 0301 	and.w	r3, r3, #1
    c1fe:	2b00      	cmp	r3, #0
    c200:	d106      	bne.n	c210 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    c202:	4a05      	ldr	r2, [pc, #20]	; (c218 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    c204:	9b01      	ldr	r3, [sp, #4]
    c206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c20a:	2b00      	cmp	r3, #0
    c20c:	d100      	bne.n	c210 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c20e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c210:	bf00      	nop
    c212:	b003      	add	sp, #12
    c214:	f85d fb04 	ldr.w	pc, [sp], #4
    c218:	1fff9000 	.word	0x1fff9000
    c21c:	1fff8ffc 	.word	0x1fff8ffc

0000c220 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    c220:	b500      	push	{lr}
    c222:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c224:	f7f4 fcd0 	bl	bc8 <Sys_GetCoreID>
    c228:	4603      	mov	r3, r0
    c22a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId])
    c22c:	4a10      	ldr	r2, [pc, #64]	; (c270 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    c22e:	9b01      	ldr	r3, [sp, #4]
    c230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c234:	2b00      	cmp	r3, #0
    c236:	d10d      	bne.n	c254 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c238:	f7f4 fbe4 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    c23c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c23e:	9b00      	ldr	r3, [sp, #0]
    c240:	f003 0301 	and.w	r3, r3, #1
    c244:	2b00      	cmp	r3, #0
    c246:	d100      	bne.n	c24a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c248:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    c24a:	490a      	ldr	r1, [pc, #40]	; (c274 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x54>)
    c24c:	9b01      	ldr	r3, [sp, #4]
    c24e:	9a00      	ldr	r2, [sp, #0]
    c250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]++;
    c254:	4a06      	ldr	r2, [pc, #24]	; (c270 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    c256:	9b01      	ldr	r3, [sp, #4]
    c258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c25c:	1c5a      	adds	r2, r3, #1
    c25e:	4904      	ldr	r1, [pc, #16]	; (c270 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    c260:	9b01      	ldr	r3, [sp, #4]
    c262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c266:	bf00      	nop
    c268:	b003      	add	sp, #12
    c26a:	f85d fb04 	ldr.w	pc, [sp], #4
    c26e:	bf00      	nop
    c270:	1fff9008 	.word	0x1fff9008
    c274:	1fff9004 	.word	0x1fff9004

0000c278 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    c278:	b500      	push	{lr}
    c27a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c27c:	f7f4 fca4 	bl	bc8 <Sys_GetCoreID>
    c280:	4603      	mov	r3, r0
    c282:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]--;
    c284:	4a0d      	ldr	r2, [pc, #52]	; (c2bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    c286:	9b01      	ldr	r3, [sp, #4]
    c288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c28c:	1e5a      	subs	r2, r3, #1
    c28e:	490b      	ldr	r1, [pc, #44]	; (c2bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    c290:	9b01      	ldr	r3, [sp, #4]
    c292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    c296:	4a0a      	ldr	r2, [pc, #40]	; (c2c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x48>)
    c298:	9b01      	ldr	r3, [sp, #4]
    c29a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c29e:	f003 0301 	and.w	r3, r3, #1
    c2a2:	2b00      	cmp	r3, #0
    c2a4:	d106      	bne.n	c2b4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    c2a6:	4a05      	ldr	r2, [pc, #20]	; (c2bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    c2a8:	9b01      	ldr	r3, [sp, #4]
    c2aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2ae:	2b00      	cmp	r3, #0
    c2b0:	d100      	bne.n	c2b4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c2b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c2b4:	bf00      	nop
    c2b6:	b003      	add	sp, #12
    c2b8:	f85d fb04 	ldr.w	pc, [sp], #4
    c2bc:	1fff9008 	.word	0x1fff9008
    c2c0:	1fff9004 	.word	0x1fff9004

0000c2c4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    c2c4:	b500      	push	{lr}
    c2c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c2c8:	f7f4 fc7e 	bl	bc8 <Sys_GetCoreID>
    c2cc:	4603      	mov	r3, r0
    c2ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId])
    c2d0:	4a10      	ldr	r2, [pc, #64]	; (c314 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    c2d2:	9b01      	ldr	r3, [sp, #4]
    c2d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2d8:	2b00      	cmp	r3, #0
    c2da:	d10d      	bne.n	c2f8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c2dc:	f7f4 fb92 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    c2e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c2e2:	9b00      	ldr	r3, [sp, #0]
    c2e4:	f003 0301 	and.w	r3, r3, #1
    c2e8:	2b00      	cmp	r3, #0
    c2ea:	d100      	bne.n	c2ee <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c2ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    c2ee:	490a      	ldr	r1, [pc, #40]	; (c318 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x54>)
    c2f0:	9b01      	ldr	r3, [sp, #4]
    c2f2:	9a00      	ldr	r2, [sp, #0]
    c2f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]++;
    c2f8:	4a06      	ldr	r2, [pc, #24]	; (c314 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    c2fa:	9b01      	ldr	r3, [sp, #4]
    c2fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c300:	1c5a      	adds	r2, r3, #1
    c302:	4904      	ldr	r1, [pc, #16]	; (c314 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    c304:	9b01      	ldr	r3, [sp, #4]
    c306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c30a:	bf00      	nop
    c30c:	b003      	add	sp, #12
    c30e:	f85d fb04 	ldr.w	pc, [sp], #4
    c312:	bf00      	nop
    c314:	1fff9010 	.word	0x1fff9010
    c318:	1fff900c 	.word	0x1fff900c

0000c31c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    c31c:	b500      	push	{lr}
    c31e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c320:	f7f4 fc52 	bl	bc8 <Sys_GetCoreID>
    c324:	4603      	mov	r3, r0
    c326:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]--;
    c328:	4a0d      	ldr	r2, [pc, #52]	; (c360 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    c32a:	9b01      	ldr	r3, [sp, #4]
    c32c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c330:	1e5a      	subs	r2, r3, #1
    c332:	490b      	ldr	r1, [pc, #44]	; (c360 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    c334:	9b01      	ldr	r3, [sp, #4]
    c336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    c33a:	4a0a      	ldr	r2, [pc, #40]	; (c364 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x48>)
    c33c:	9b01      	ldr	r3, [sp, #4]
    c33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c342:	f003 0301 	and.w	r3, r3, #1
    c346:	2b00      	cmp	r3, #0
    c348:	d106      	bne.n	c358 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    c34a:	4a05      	ldr	r2, [pc, #20]	; (c360 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    c34c:	9b01      	ldr	r3, [sp, #4]
    c34e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c352:	2b00      	cmp	r3, #0
    c354:	d100      	bne.n	c358 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c356:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c358:	bf00      	nop
    c35a:	b003      	add	sp, #12
    c35c:	f85d fb04 	ldr.w	pc, [sp], #4
    c360:	1fff9010 	.word	0x1fff9010
    c364:	1fff900c 	.word	0x1fff900c

0000c368 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    c368:	b500      	push	{lr}
    c36a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c36c:	f7f4 fc2c 	bl	bc8 <Sys_GetCoreID>
    c370:	4603      	mov	r3, r0
    c372:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId])
    c374:	4a10      	ldr	r2, [pc, #64]	; (c3b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    c376:	9b01      	ldr	r3, [sp, #4]
    c378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c37c:	2b00      	cmp	r3, #0
    c37e:	d10d      	bne.n	c39c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c380:	f7f4 fb40 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    c384:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c386:	9b00      	ldr	r3, [sp, #0]
    c388:	f003 0301 	and.w	r3, r3, #1
    c38c:	2b00      	cmp	r3, #0
    c38e:	d100      	bne.n	c392 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c390:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    c392:	490a      	ldr	r1, [pc, #40]	; (c3bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x54>)
    c394:	9b01      	ldr	r3, [sp, #4]
    c396:	9a00      	ldr	r2, [sp, #0]
    c398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]++;
    c39c:	4a06      	ldr	r2, [pc, #24]	; (c3b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    c39e:	9b01      	ldr	r3, [sp, #4]
    c3a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3a4:	1c5a      	adds	r2, r3, #1
    c3a6:	4904      	ldr	r1, [pc, #16]	; (c3b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    c3a8:	9b01      	ldr	r3, [sp, #4]
    c3aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c3ae:	bf00      	nop
    c3b0:	b003      	add	sp, #12
    c3b2:	f85d fb04 	ldr.w	pc, [sp], #4
    c3b6:	bf00      	nop
    c3b8:	1fff9018 	.word	0x1fff9018
    c3bc:	1fff9014 	.word	0x1fff9014

0000c3c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    c3c0:	b500      	push	{lr}
    c3c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c3c4:	f7f4 fc00 	bl	bc8 <Sys_GetCoreID>
    c3c8:	4603      	mov	r3, r0
    c3ca:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]--;
    c3cc:	4a0d      	ldr	r2, [pc, #52]	; (c404 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    c3ce:	9b01      	ldr	r3, [sp, #4]
    c3d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3d4:	1e5a      	subs	r2, r3, #1
    c3d6:	490b      	ldr	r1, [pc, #44]	; (c404 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    c3d8:	9b01      	ldr	r3, [sp, #4]
    c3da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    c3de:	4a0a      	ldr	r2, [pc, #40]	; (c408 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x48>)
    c3e0:	9b01      	ldr	r3, [sp, #4]
    c3e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3e6:	f003 0301 	and.w	r3, r3, #1
    c3ea:	2b00      	cmp	r3, #0
    c3ec:	d106      	bne.n	c3fc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    c3ee:	4a05      	ldr	r2, [pc, #20]	; (c404 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    c3f0:	9b01      	ldr	r3, [sp, #4]
    c3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3f6:	2b00      	cmp	r3, #0
    c3f8:	d100      	bne.n	c3fc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c3fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c3fc:	bf00      	nop
    c3fe:	b003      	add	sp, #12
    c400:	f85d fb04 	ldr.w	pc, [sp], #4
    c404:	1fff9018 	.word	0x1fff9018
    c408:	1fff9014 	.word	0x1fff9014

0000c40c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    c40c:	b500      	push	{lr}
    c40e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c410:	f7f4 fbda 	bl	bc8 <Sys_GetCoreID>
    c414:	4603      	mov	r3, r0
    c416:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId])
    c418:	4a10      	ldr	r2, [pc, #64]	; (c45c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    c41a:	9b01      	ldr	r3, [sp, #4]
    c41c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c420:	2b00      	cmp	r3, #0
    c422:	d10d      	bne.n	c440 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c424:	f7f4 faee 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    c428:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c42a:	9b00      	ldr	r3, [sp, #0]
    c42c:	f003 0301 	and.w	r3, r3, #1
    c430:	2b00      	cmp	r3, #0
    c432:	d100      	bne.n	c436 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c434:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    c436:	490a      	ldr	r1, [pc, #40]	; (c460 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x54>)
    c438:	9b01      	ldr	r3, [sp, #4]
    c43a:	9a00      	ldr	r2, [sp, #0]
    c43c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]++;
    c440:	4a06      	ldr	r2, [pc, #24]	; (c45c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    c442:	9b01      	ldr	r3, [sp, #4]
    c444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c448:	1c5a      	adds	r2, r3, #1
    c44a:	4904      	ldr	r1, [pc, #16]	; (c45c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    c44c:	9b01      	ldr	r3, [sp, #4]
    c44e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c452:	bf00      	nop
    c454:	b003      	add	sp, #12
    c456:	f85d fb04 	ldr.w	pc, [sp], #4
    c45a:	bf00      	nop
    c45c:	1fff9020 	.word	0x1fff9020
    c460:	1fff901c 	.word	0x1fff901c

0000c464 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    c464:	b500      	push	{lr}
    c466:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c468:	f7f4 fbae 	bl	bc8 <Sys_GetCoreID>
    c46c:	4603      	mov	r3, r0
    c46e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]--;
    c470:	4a0d      	ldr	r2, [pc, #52]	; (c4a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    c472:	9b01      	ldr	r3, [sp, #4]
    c474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c478:	1e5a      	subs	r2, r3, #1
    c47a:	490b      	ldr	r1, [pc, #44]	; (c4a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    c47c:	9b01      	ldr	r3, [sp, #4]
    c47e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    c482:	4a0a      	ldr	r2, [pc, #40]	; (c4ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x48>)
    c484:	9b01      	ldr	r3, [sp, #4]
    c486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c48a:	f003 0301 	and.w	r3, r3, #1
    c48e:	2b00      	cmp	r3, #0
    c490:	d106      	bne.n	c4a0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    c492:	4a05      	ldr	r2, [pc, #20]	; (c4a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    c494:	9b01      	ldr	r3, [sp, #4]
    c496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c49a:	2b00      	cmp	r3, #0
    c49c:	d100      	bne.n	c4a0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c49e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c4a0:	bf00      	nop
    c4a2:	b003      	add	sp, #12
    c4a4:	f85d fb04 	ldr.w	pc, [sp], #4
    c4a8:	1fff9020 	.word	0x1fff9020
    c4ac:	1fff901c 	.word	0x1fff901c

0000c4b0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    c4b0:	b500      	push	{lr}
    c4b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c4b4:	f7f4 fb88 	bl	bc8 <Sys_GetCoreID>
    c4b8:	4603      	mov	r3, r0
    c4ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId])
    c4bc:	4a10      	ldr	r2, [pc, #64]	; (c500 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    c4be:	9b01      	ldr	r3, [sp, #4]
    c4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4c4:	2b00      	cmp	r3, #0
    c4c6:	d10d      	bne.n	c4e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c4c8:	f7f4 fa9c 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    c4cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c4ce:	9b00      	ldr	r3, [sp, #0]
    c4d0:	f003 0301 	and.w	r3, r3, #1
    c4d4:	2b00      	cmp	r3, #0
    c4d6:	d100      	bne.n	c4da <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c4d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    c4da:	490a      	ldr	r1, [pc, #40]	; (c504 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x54>)
    c4dc:	9b01      	ldr	r3, [sp, #4]
    c4de:	9a00      	ldr	r2, [sp, #0]
    c4e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]++;
    c4e4:	4a06      	ldr	r2, [pc, #24]	; (c500 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    c4e6:	9b01      	ldr	r3, [sp, #4]
    c4e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4ec:	1c5a      	adds	r2, r3, #1
    c4ee:	4904      	ldr	r1, [pc, #16]	; (c500 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    c4f0:	9b01      	ldr	r3, [sp, #4]
    c4f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c4f6:	bf00      	nop
    c4f8:	b003      	add	sp, #12
    c4fa:	f85d fb04 	ldr.w	pc, [sp], #4
    c4fe:	bf00      	nop
    c500:	1fff9028 	.word	0x1fff9028
    c504:	1fff9024 	.word	0x1fff9024

0000c508 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    c508:	b500      	push	{lr}
    c50a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c50c:	f7f4 fb5c 	bl	bc8 <Sys_GetCoreID>
    c510:	4603      	mov	r3, r0
    c512:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]--;
    c514:	4a0d      	ldr	r2, [pc, #52]	; (c54c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    c516:	9b01      	ldr	r3, [sp, #4]
    c518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c51c:	1e5a      	subs	r2, r3, #1
    c51e:	490b      	ldr	r1, [pc, #44]	; (c54c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    c520:	9b01      	ldr	r3, [sp, #4]
    c522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    c526:	4a0a      	ldr	r2, [pc, #40]	; (c550 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x48>)
    c528:	9b01      	ldr	r3, [sp, #4]
    c52a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c52e:	f003 0301 	and.w	r3, r3, #1
    c532:	2b00      	cmp	r3, #0
    c534:	d106      	bne.n	c544 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    c536:	4a05      	ldr	r2, [pc, #20]	; (c54c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    c538:	9b01      	ldr	r3, [sp, #4]
    c53a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c53e:	2b00      	cmp	r3, #0
    c540:	d100      	bne.n	c544 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c542:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c544:	bf00      	nop
    c546:	b003      	add	sp, #12
    c548:	f85d fb04 	ldr.w	pc, [sp], #4
    c54c:	1fff9028 	.word	0x1fff9028
    c550:	1fff9024 	.word	0x1fff9024

0000c554 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    c554:	b500      	push	{lr}
    c556:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c558:	f7f4 fb36 	bl	bc8 <Sys_GetCoreID>
    c55c:	4603      	mov	r3, r0
    c55e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId])
    c560:	4a10      	ldr	r2, [pc, #64]	; (c5a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    c562:	9b01      	ldr	r3, [sp, #4]
    c564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c568:	2b00      	cmp	r3, #0
    c56a:	d10d      	bne.n	c588 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c56c:	f7f4 fa4a 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    c570:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c572:	9b00      	ldr	r3, [sp, #0]
    c574:	f003 0301 	and.w	r3, r3, #1
    c578:	2b00      	cmp	r3, #0
    c57a:	d100      	bne.n	c57e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c57c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    c57e:	490a      	ldr	r1, [pc, #40]	; (c5a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x54>)
    c580:	9b01      	ldr	r3, [sp, #4]
    c582:	9a00      	ldr	r2, [sp, #0]
    c584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]++;
    c588:	4a06      	ldr	r2, [pc, #24]	; (c5a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    c58a:	9b01      	ldr	r3, [sp, #4]
    c58c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c590:	1c5a      	adds	r2, r3, #1
    c592:	4904      	ldr	r1, [pc, #16]	; (c5a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    c594:	9b01      	ldr	r3, [sp, #4]
    c596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c59a:	bf00      	nop
    c59c:	b003      	add	sp, #12
    c59e:	f85d fb04 	ldr.w	pc, [sp], #4
    c5a2:	bf00      	nop
    c5a4:	1fff9030 	.word	0x1fff9030
    c5a8:	1fff902c 	.word	0x1fff902c

0000c5ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    c5ac:	b500      	push	{lr}
    c5ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c5b0:	f7f4 fb0a 	bl	bc8 <Sys_GetCoreID>
    c5b4:	4603      	mov	r3, r0
    c5b6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]--;
    c5b8:	4a0d      	ldr	r2, [pc, #52]	; (c5f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    c5ba:	9b01      	ldr	r3, [sp, #4]
    c5bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5c0:	1e5a      	subs	r2, r3, #1
    c5c2:	490b      	ldr	r1, [pc, #44]	; (c5f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    c5c4:	9b01      	ldr	r3, [sp, #4]
    c5c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    c5ca:	4a0a      	ldr	r2, [pc, #40]	; (c5f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x48>)
    c5cc:	9b01      	ldr	r3, [sp, #4]
    c5ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5d2:	f003 0301 	and.w	r3, r3, #1
    c5d6:	2b00      	cmp	r3, #0
    c5d8:	d106      	bne.n	c5e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    c5da:	4a05      	ldr	r2, [pc, #20]	; (c5f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    c5dc:	9b01      	ldr	r3, [sp, #4]
    c5de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5e2:	2b00      	cmp	r3, #0
    c5e4:	d100      	bne.n	c5e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c5e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c5e8:	bf00      	nop
    c5ea:	b003      	add	sp, #12
    c5ec:	f85d fb04 	ldr.w	pc, [sp], #4
    c5f0:	1fff9030 	.word	0x1fff9030
    c5f4:	1fff902c 	.word	0x1fff902c

0000c5f8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    c5f8:	b500      	push	{lr}
    c5fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c5fc:	f7f4 fae4 	bl	bc8 <Sys_GetCoreID>
    c600:	4603      	mov	r3, r0
    c602:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId])
    c604:	4a10      	ldr	r2, [pc, #64]	; (c648 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    c606:	9b01      	ldr	r3, [sp, #4]
    c608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c60c:	2b00      	cmp	r3, #0
    c60e:	d10d      	bne.n	c62c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c610:	f7f4 f9f8 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    c614:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c616:	9b00      	ldr	r3, [sp, #0]
    c618:	f003 0301 	and.w	r3, r3, #1
    c61c:	2b00      	cmp	r3, #0
    c61e:	d100      	bne.n	c622 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c620:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    c622:	490a      	ldr	r1, [pc, #40]	; (c64c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x54>)
    c624:	9b01      	ldr	r3, [sp, #4]
    c626:	9a00      	ldr	r2, [sp, #0]
    c628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]++;
    c62c:	4a06      	ldr	r2, [pc, #24]	; (c648 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    c62e:	9b01      	ldr	r3, [sp, #4]
    c630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c634:	1c5a      	adds	r2, r3, #1
    c636:	4904      	ldr	r1, [pc, #16]	; (c648 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    c638:	9b01      	ldr	r3, [sp, #4]
    c63a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c63e:	bf00      	nop
    c640:	b003      	add	sp, #12
    c642:	f85d fb04 	ldr.w	pc, [sp], #4
    c646:	bf00      	nop
    c648:	1fff9038 	.word	0x1fff9038
    c64c:	1fff9034 	.word	0x1fff9034

0000c650 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    c650:	b500      	push	{lr}
    c652:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c654:	f7f4 fab8 	bl	bc8 <Sys_GetCoreID>
    c658:	4603      	mov	r3, r0
    c65a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]--;
    c65c:	4a0d      	ldr	r2, [pc, #52]	; (c694 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    c65e:	9b01      	ldr	r3, [sp, #4]
    c660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c664:	1e5a      	subs	r2, r3, #1
    c666:	490b      	ldr	r1, [pc, #44]	; (c694 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    c668:	9b01      	ldr	r3, [sp, #4]
    c66a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    c66e:	4a0a      	ldr	r2, [pc, #40]	; (c698 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x48>)
    c670:	9b01      	ldr	r3, [sp, #4]
    c672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c676:	f003 0301 	and.w	r3, r3, #1
    c67a:	2b00      	cmp	r3, #0
    c67c:	d106      	bne.n	c68c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    c67e:	4a05      	ldr	r2, [pc, #20]	; (c694 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    c680:	9b01      	ldr	r3, [sp, #4]
    c682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c686:	2b00      	cmp	r3, #0
    c688:	d100      	bne.n	c68c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c68a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c68c:	bf00      	nop
    c68e:	b003      	add	sp, #12
    c690:	f85d fb04 	ldr.w	pc, [sp], #4
    c694:	1fff9038 	.word	0x1fff9038
    c698:	1fff9034 	.word	0x1fff9034

0000c69c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    c69c:	b500      	push	{lr}
    c69e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c6a0:	f7f4 fa92 	bl	bc8 <Sys_GetCoreID>
    c6a4:	4603      	mov	r3, r0
    c6a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId])
    c6a8:	4a10      	ldr	r2, [pc, #64]	; (c6ec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    c6aa:	9b01      	ldr	r3, [sp, #4]
    c6ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6b0:	2b00      	cmp	r3, #0
    c6b2:	d10d      	bne.n	c6d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c6b4:	f7f4 f9a6 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    c6b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c6ba:	9b00      	ldr	r3, [sp, #0]
    c6bc:	f003 0301 	and.w	r3, r3, #1
    c6c0:	2b00      	cmp	r3, #0
    c6c2:	d100      	bne.n	c6c6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c6c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    c6c6:	490a      	ldr	r1, [pc, #40]	; (c6f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x54>)
    c6c8:	9b01      	ldr	r3, [sp, #4]
    c6ca:	9a00      	ldr	r2, [sp, #0]
    c6cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]++;
    c6d0:	4a06      	ldr	r2, [pc, #24]	; (c6ec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    c6d2:	9b01      	ldr	r3, [sp, #4]
    c6d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6d8:	1c5a      	adds	r2, r3, #1
    c6da:	4904      	ldr	r1, [pc, #16]	; (c6ec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    c6dc:	9b01      	ldr	r3, [sp, #4]
    c6de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c6e2:	bf00      	nop
    c6e4:	b003      	add	sp, #12
    c6e6:	f85d fb04 	ldr.w	pc, [sp], #4
    c6ea:	bf00      	nop
    c6ec:	1fff9040 	.word	0x1fff9040
    c6f0:	1fff903c 	.word	0x1fff903c

0000c6f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    c6f4:	b500      	push	{lr}
    c6f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c6f8:	f7f4 fa66 	bl	bc8 <Sys_GetCoreID>
    c6fc:	4603      	mov	r3, r0
    c6fe:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]--;
    c700:	4a0d      	ldr	r2, [pc, #52]	; (c738 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    c702:	9b01      	ldr	r3, [sp, #4]
    c704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c708:	1e5a      	subs	r2, r3, #1
    c70a:	490b      	ldr	r1, [pc, #44]	; (c738 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    c70c:	9b01      	ldr	r3, [sp, #4]
    c70e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    c712:	4a0a      	ldr	r2, [pc, #40]	; (c73c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x48>)
    c714:	9b01      	ldr	r3, [sp, #4]
    c716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c71a:	f003 0301 	and.w	r3, r3, #1
    c71e:	2b00      	cmp	r3, #0
    c720:	d106      	bne.n	c730 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    c722:	4a05      	ldr	r2, [pc, #20]	; (c738 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    c724:	9b01      	ldr	r3, [sp, #4]
    c726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c72a:	2b00      	cmp	r3, #0
    c72c:	d100      	bne.n	c730 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c72e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c730:	bf00      	nop
    c732:	b003      	add	sp, #12
    c734:	f85d fb04 	ldr.w	pc, [sp], #4
    c738:	1fff9040 	.word	0x1fff9040
    c73c:	1fff903c 	.word	0x1fff903c

0000c740 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    c740:	b500      	push	{lr}
    c742:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c744:	f7f4 fa40 	bl	bc8 <Sys_GetCoreID>
    c748:	4603      	mov	r3, r0
    c74a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId])
    c74c:	4a10      	ldr	r2, [pc, #64]	; (c790 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    c74e:	9b01      	ldr	r3, [sp, #4]
    c750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c754:	2b00      	cmp	r3, #0
    c756:	d10d      	bne.n	c774 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c758:	f7f4 f954 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    c75c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c75e:	9b00      	ldr	r3, [sp, #0]
    c760:	f003 0301 	and.w	r3, r3, #1
    c764:	2b00      	cmp	r3, #0
    c766:	d100      	bne.n	c76a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c768:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    c76a:	490a      	ldr	r1, [pc, #40]	; (c794 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x54>)
    c76c:	9b01      	ldr	r3, [sp, #4]
    c76e:	9a00      	ldr	r2, [sp, #0]
    c770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]++;
    c774:	4a06      	ldr	r2, [pc, #24]	; (c790 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    c776:	9b01      	ldr	r3, [sp, #4]
    c778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c77c:	1c5a      	adds	r2, r3, #1
    c77e:	4904      	ldr	r1, [pc, #16]	; (c790 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    c780:	9b01      	ldr	r3, [sp, #4]
    c782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c786:	bf00      	nop
    c788:	b003      	add	sp, #12
    c78a:	f85d fb04 	ldr.w	pc, [sp], #4
    c78e:	bf00      	nop
    c790:	1fff9048 	.word	0x1fff9048
    c794:	1fff9044 	.word	0x1fff9044

0000c798 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    c798:	b500      	push	{lr}
    c79a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c79c:	f7f4 fa14 	bl	bc8 <Sys_GetCoreID>
    c7a0:	4603      	mov	r3, r0
    c7a2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]--;
    c7a4:	4a0d      	ldr	r2, [pc, #52]	; (c7dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    c7a6:	9b01      	ldr	r3, [sp, #4]
    c7a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7ac:	1e5a      	subs	r2, r3, #1
    c7ae:	490b      	ldr	r1, [pc, #44]	; (c7dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    c7b0:	9b01      	ldr	r3, [sp, #4]
    c7b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    c7b6:	4a0a      	ldr	r2, [pc, #40]	; (c7e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x48>)
    c7b8:	9b01      	ldr	r3, [sp, #4]
    c7ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7be:	f003 0301 	and.w	r3, r3, #1
    c7c2:	2b00      	cmp	r3, #0
    c7c4:	d106      	bne.n	c7d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    c7c6:	4a05      	ldr	r2, [pc, #20]	; (c7dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    c7c8:	9b01      	ldr	r3, [sp, #4]
    c7ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7ce:	2b00      	cmp	r3, #0
    c7d0:	d100      	bne.n	c7d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c7d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c7d4:	bf00      	nop
    c7d6:	b003      	add	sp, #12
    c7d8:	f85d fb04 	ldr.w	pc, [sp], #4
    c7dc:	1fff9048 	.word	0x1fff9048
    c7e0:	1fff9044 	.word	0x1fff9044

0000c7e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    c7e4:	b500      	push	{lr}
    c7e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c7e8:	f7f4 f9ee 	bl	bc8 <Sys_GetCoreID>
    c7ec:	4603      	mov	r3, r0
    c7ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId])
    c7f0:	4a10      	ldr	r2, [pc, #64]	; (c834 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    c7f2:	9b01      	ldr	r3, [sp, #4]
    c7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7f8:	2b00      	cmp	r3, #0
    c7fa:	d10d      	bne.n	c818 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c7fc:	f7f4 f902 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    c800:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c802:	9b00      	ldr	r3, [sp, #0]
    c804:	f003 0301 	and.w	r3, r3, #1
    c808:	2b00      	cmp	r3, #0
    c80a:	d100      	bne.n	c80e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c80c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    c80e:	490a      	ldr	r1, [pc, #40]	; (c838 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x54>)
    c810:	9b01      	ldr	r3, [sp, #4]
    c812:	9a00      	ldr	r2, [sp, #0]
    c814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]++;
    c818:	4a06      	ldr	r2, [pc, #24]	; (c834 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    c81a:	9b01      	ldr	r3, [sp, #4]
    c81c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c820:	1c5a      	adds	r2, r3, #1
    c822:	4904      	ldr	r1, [pc, #16]	; (c834 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    c824:	9b01      	ldr	r3, [sp, #4]
    c826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c82a:	bf00      	nop
    c82c:	b003      	add	sp, #12
    c82e:	f85d fb04 	ldr.w	pc, [sp], #4
    c832:	bf00      	nop
    c834:	1fff9050 	.word	0x1fff9050
    c838:	1fff904c 	.word	0x1fff904c

0000c83c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    c83c:	b500      	push	{lr}
    c83e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c840:	f7f4 f9c2 	bl	bc8 <Sys_GetCoreID>
    c844:	4603      	mov	r3, r0
    c846:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]--;
    c848:	4a0d      	ldr	r2, [pc, #52]	; (c880 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    c84a:	9b01      	ldr	r3, [sp, #4]
    c84c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c850:	1e5a      	subs	r2, r3, #1
    c852:	490b      	ldr	r1, [pc, #44]	; (c880 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    c854:	9b01      	ldr	r3, [sp, #4]
    c856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    c85a:	4a0a      	ldr	r2, [pc, #40]	; (c884 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x48>)
    c85c:	9b01      	ldr	r3, [sp, #4]
    c85e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c862:	f003 0301 	and.w	r3, r3, #1
    c866:	2b00      	cmp	r3, #0
    c868:	d106      	bne.n	c878 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    c86a:	4a05      	ldr	r2, [pc, #20]	; (c880 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    c86c:	9b01      	ldr	r3, [sp, #4]
    c86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c872:	2b00      	cmp	r3, #0
    c874:	d100      	bne.n	c878 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c876:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c878:	bf00      	nop
    c87a:	b003      	add	sp, #12
    c87c:	f85d fb04 	ldr.w	pc, [sp], #4
    c880:	1fff9050 	.word	0x1fff9050
    c884:	1fff904c 	.word	0x1fff904c

0000c888 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    c888:	b500      	push	{lr}
    c88a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c88c:	f7f4 f99c 	bl	bc8 <Sys_GetCoreID>
    c890:	4603      	mov	r3, r0
    c892:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId])
    c894:	4a10      	ldr	r2, [pc, #64]	; (c8d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    c896:	9b01      	ldr	r3, [sp, #4]
    c898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c89c:	2b00      	cmp	r3, #0
    c89e:	d10d      	bne.n	c8bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c8a0:	f7f4 f8b0 	bl	a04 <Can_43_FLEXCAN_schm_read_msr>
    c8a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c8a6:	9b00      	ldr	r3, [sp, #0]
    c8a8:	f003 0301 	and.w	r3, r3, #1
    c8ac:	2b00      	cmp	r3, #0
    c8ae:	d100      	bne.n	c8b2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c8b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    c8b2:	490a      	ldr	r1, [pc, #40]	; (c8dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x54>)
    c8b4:	9b01      	ldr	r3, [sp, #4]
    c8b6:	9a00      	ldr	r2, [sp, #0]
    c8b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]++;
    c8bc:	4a06      	ldr	r2, [pc, #24]	; (c8d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    c8be:	9b01      	ldr	r3, [sp, #4]
    c8c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8c4:	1c5a      	adds	r2, r3, #1
    c8c6:	4904      	ldr	r1, [pc, #16]	; (c8d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    c8c8:	9b01      	ldr	r3, [sp, #4]
    c8ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c8ce:	bf00      	nop
    c8d0:	b003      	add	sp, #12
    c8d2:	f85d fb04 	ldr.w	pc, [sp], #4
    c8d6:	bf00      	nop
    c8d8:	1fff9058 	.word	0x1fff9058
    c8dc:	1fff9054 	.word	0x1fff9054

0000c8e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    c8e0:	b500      	push	{lr}
    c8e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c8e4:	f7f4 f970 	bl	bc8 <Sys_GetCoreID>
    c8e8:	4603      	mov	r3, r0
    c8ea:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]--;
    c8ec:	4a0d      	ldr	r2, [pc, #52]	; (c924 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    c8ee:	9b01      	ldr	r3, [sp, #4]
    c8f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8f4:	1e5a      	subs	r2, r3, #1
    c8f6:	490b      	ldr	r1, [pc, #44]	; (c924 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    c8f8:	9b01      	ldr	r3, [sp, #4]
    c8fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    c8fe:	4a0a      	ldr	r2, [pc, #40]	; (c928 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x48>)
    c900:	9b01      	ldr	r3, [sp, #4]
    c902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c906:	f003 0301 	and.w	r3, r3, #1
    c90a:	2b00      	cmp	r3, #0
    c90c:	d106      	bne.n	c91c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    c90e:	4a05      	ldr	r2, [pc, #20]	; (c924 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    c910:	9b01      	ldr	r3, [sp, #4]
    c912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c916:	2b00      	cmp	r3, #0
    c918:	d100      	bne.n	c91c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c91a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c91c:	bf00      	nop
    c91e:	b003      	add	sp, #12
    c920:	f85d fb04 	ldr.w	pc, [sp], #4
    c924:	1fff9058 	.word	0x1fff9058
    c928:	1fff9054 	.word	0x1fff9054

0000c92c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    c92c:	b500      	push	{lr}
    c92e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c930:	f7f4 f94a 	bl	bc8 <Sys_GetCoreID>
    c934:	4603      	mov	r3, r0
    c936:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    c938:	4a10      	ldr	r2, [pc, #64]	; (c97c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    c93a:	9b01      	ldr	r3, [sp, #4]
    c93c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c940:	2b00      	cmp	r3, #0
    c942:	d10d      	bne.n	c960 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c944:	f7f4 f867 	bl	a16 <Mcu_schm_read_msr>
    c948:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c94a:	9b00      	ldr	r3, [sp, #0]
    c94c:	f003 0301 	and.w	r3, r3, #1
    c950:	2b00      	cmp	r3, #0
    c952:	d100      	bne.n	c956 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c954:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    c956:	490a      	ldr	r1, [pc, #40]	; (c980 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    c958:	9b01      	ldr	r3, [sp, #4]
    c95a:	9a00      	ldr	r2, [sp, #0]
    c95c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    c960:	4a06      	ldr	r2, [pc, #24]	; (c97c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    c962:	9b01      	ldr	r3, [sp, #4]
    c964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c968:	1c5a      	adds	r2, r3, #1
    c96a:	4904      	ldr	r1, [pc, #16]	; (c97c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    c96c:	9b01      	ldr	r3, [sp, #4]
    c96e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c972:	bf00      	nop
    c974:	b003      	add	sp, #12
    c976:	f85d fb04 	ldr.w	pc, [sp], #4
    c97a:	bf00      	nop
    c97c:	1fff9060 	.word	0x1fff9060
    c980:	1fff905c 	.word	0x1fff905c

0000c984 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    c984:	b500      	push	{lr}
    c986:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c988:	f7f4 f91e 	bl	bc8 <Sys_GetCoreID>
    c98c:	4603      	mov	r3, r0
    c98e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    c990:	4a0d      	ldr	r2, [pc, #52]	; (c9c8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    c992:	9b01      	ldr	r3, [sp, #4]
    c994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c998:	1e5a      	subs	r2, r3, #1
    c99a:	490b      	ldr	r1, [pc, #44]	; (c9c8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    c99c:	9b01      	ldr	r3, [sp, #4]
    c99e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    c9a2:	4a0a      	ldr	r2, [pc, #40]	; (c9cc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    c9a4:	9b01      	ldr	r3, [sp, #4]
    c9a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9aa:	f003 0301 	and.w	r3, r3, #1
    c9ae:	2b00      	cmp	r3, #0
    c9b0:	d106      	bne.n	c9c0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    c9b2:	4a05      	ldr	r2, [pc, #20]	; (c9c8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    c9b4:	9b01      	ldr	r3, [sp, #4]
    c9b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9ba:	2b00      	cmp	r3, #0
    c9bc:	d100      	bne.n	c9c0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c9be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c9c0:	bf00      	nop
    c9c2:	b003      	add	sp, #12
    c9c4:	f85d fb04 	ldr.w	pc, [sp], #4
    c9c8:	1fff9060 	.word	0x1fff9060
    c9cc:	1fff905c 	.word	0x1fff905c

0000c9d0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    c9d0:	b500      	push	{lr}
    c9d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c9d4:	f7f4 f8f8 	bl	bc8 <Sys_GetCoreID>
    c9d8:	4603      	mov	r3, r0
    c9da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    c9dc:	4a10      	ldr	r2, [pc, #64]	; (ca20 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    c9de:	9b01      	ldr	r3, [sp, #4]
    c9e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9e4:	2b00      	cmp	r3, #0
    c9e6:	d10d      	bne.n	ca04 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c9e8:	f7f4 f815 	bl	a16 <Mcu_schm_read_msr>
    c9ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c9ee:	9b00      	ldr	r3, [sp, #0]
    c9f0:	f003 0301 	and.w	r3, r3, #1
    c9f4:	2b00      	cmp	r3, #0
    c9f6:	d100      	bne.n	c9fa <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c9f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    c9fa:	490a      	ldr	r1, [pc, #40]	; (ca24 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    c9fc:	9b01      	ldr	r3, [sp, #4]
    c9fe:	9a00      	ldr	r2, [sp, #0]
    ca00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    ca04:	4a06      	ldr	r2, [pc, #24]	; (ca20 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    ca06:	9b01      	ldr	r3, [sp, #4]
    ca08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca0c:	1c5a      	adds	r2, r3, #1
    ca0e:	4904      	ldr	r1, [pc, #16]	; (ca20 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    ca10:	9b01      	ldr	r3, [sp, #4]
    ca12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ca16:	bf00      	nop
    ca18:	b003      	add	sp, #12
    ca1a:	f85d fb04 	ldr.w	pc, [sp], #4
    ca1e:	bf00      	nop
    ca20:	1fff9068 	.word	0x1fff9068
    ca24:	1fff9064 	.word	0x1fff9064

0000ca28 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    ca28:	b500      	push	{lr}
    ca2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca2c:	f7f4 f8cc 	bl	bc8 <Sys_GetCoreID>
    ca30:	4603      	mov	r3, r0
    ca32:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    ca34:	4a0d      	ldr	r2, [pc, #52]	; (ca6c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    ca36:	9b01      	ldr	r3, [sp, #4]
    ca38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca3c:	1e5a      	subs	r2, r3, #1
    ca3e:	490b      	ldr	r1, [pc, #44]	; (ca6c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    ca40:	9b01      	ldr	r3, [sp, #4]
    ca42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    ca46:	4a0a      	ldr	r2, [pc, #40]	; (ca70 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    ca48:	9b01      	ldr	r3, [sp, #4]
    ca4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca4e:	f003 0301 	and.w	r3, r3, #1
    ca52:	2b00      	cmp	r3, #0
    ca54:	d106      	bne.n	ca64 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    ca56:	4a05      	ldr	r2, [pc, #20]	; (ca6c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    ca58:	9b01      	ldr	r3, [sp, #4]
    ca5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca5e:	2b00      	cmp	r3, #0
    ca60:	d100      	bne.n	ca64 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ca62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ca64:	bf00      	nop
    ca66:	b003      	add	sp, #12
    ca68:	f85d fb04 	ldr.w	pc, [sp], #4
    ca6c:	1fff9068 	.word	0x1fff9068
    ca70:	1fff9064 	.word	0x1fff9064

0000ca74 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    ca74:	b500      	push	{lr}
    ca76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca78:	f7f4 f8a6 	bl	bc8 <Sys_GetCoreID>
    ca7c:	4603      	mov	r3, r0
    ca7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    ca80:	4a10      	ldr	r2, [pc, #64]	; (cac4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    ca82:	9b01      	ldr	r3, [sp, #4]
    ca84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca88:	2b00      	cmp	r3, #0
    ca8a:	d10d      	bne.n	caa8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ca8c:	f7f3 ffc3 	bl	a16 <Mcu_schm_read_msr>
    ca90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ca92:	9b00      	ldr	r3, [sp, #0]
    ca94:	f003 0301 	and.w	r3, r3, #1
    ca98:	2b00      	cmp	r3, #0
    ca9a:	d100      	bne.n	ca9e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ca9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    ca9e:	490a      	ldr	r1, [pc, #40]	; (cac8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    caa0:	9b01      	ldr	r3, [sp, #4]
    caa2:	9a00      	ldr	r2, [sp, #0]
    caa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    caa8:	4a06      	ldr	r2, [pc, #24]	; (cac4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    caaa:	9b01      	ldr	r3, [sp, #4]
    caac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cab0:	1c5a      	adds	r2, r3, #1
    cab2:	4904      	ldr	r1, [pc, #16]	; (cac4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    cab4:	9b01      	ldr	r3, [sp, #4]
    cab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    caba:	bf00      	nop
    cabc:	b003      	add	sp, #12
    cabe:	f85d fb04 	ldr.w	pc, [sp], #4
    cac2:	bf00      	nop
    cac4:	1fff9070 	.word	0x1fff9070
    cac8:	1fff906c 	.word	0x1fff906c

0000cacc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    cacc:	b500      	push	{lr}
    cace:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cad0:	f7f4 f87a 	bl	bc8 <Sys_GetCoreID>
    cad4:	4603      	mov	r3, r0
    cad6:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    cad8:	4a0d      	ldr	r2, [pc, #52]	; (cb10 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    cada:	9b01      	ldr	r3, [sp, #4]
    cadc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cae0:	1e5a      	subs	r2, r3, #1
    cae2:	490b      	ldr	r1, [pc, #44]	; (cb10 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    cae4:	9b01      	ldr	r3, [sp, #4]
    cae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    caea:	4a0a      	ldr	r2, [pc, #40]	; (cb14 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    caec:	9b01      	ldr	r3, [sp, #4]
    caee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caf2:	f003 0301 	and.w	r3, r3, #1
    caf6:	2b00      	cmp	r3, #0
    caf8:	d106      	bne.n	cb08 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    cafa:	4a05      	ldr	r2, [pc, #20]	; (cb10 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    cafc:	9b01      	ldr	r3, [sp, #4]
    cafe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb02:	2b00      	cmp	r3, #0
    cb04:	d100      	bne.n	cb08 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cb06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cb08:	bf00      	nop
    cb0a:	b003      	add	sp, #12
    cb0c:	f85d fb04 	ldr.w	pc, [sp], #4
    cb10:	1fff9070 	.word	0x1fff9070
    cb14:	1fff906c 	.word	0x1fff906c

0000cb18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    cb18:	b500      	push	{lr}
    cb1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb1c:	f7f4 f854 	bl	bc8 <Sys_GetCoreID>
    cb20:	4603      	mov	r3, r0
    cb22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    cb24:	4a10      	ldr	r2, [pc, #64]	; (cb68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    cb26:	9b01      	ldr	r3, [sp, #4]
    cb28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb2c:	2b00      	cmp	r3, #0
    cb2e:	d10d      	bne.n	cb4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cb30:	f7f3 ff7a 	bl	a28 <Port_schm_read_msr>
    cb34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cb36:	9b00      	ldr	r3, [sp, #0]
    cb38:	f003 0301 	and.w	r3, r3, #1
    cb3c:	2b00      	cmp	r3, #0
    cb3e:	d100      	bne.n	cb42 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cb40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    cb42:	490a      	ldr	r1, [pc, #40]	; (cb6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    cb44:	9b01      	ldr	r3, [sp, #4]
    cb46:	9a00      	ldr	r2, [sp, #0]
    cb48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    cb4c:	4a06      	ldr	r2, [pc, #24]	; (cb68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    cb4e:	9b01      	ldr	r3, [sp, #4]
    cb50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb54:	1c5a      	adds	r2, r3, #1
    cb56:	4904      	ldr	r1, [pc, #16]	; (cb68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    cb58:	9b01      	ldr	r3, [sp, #4]
    cb5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cb5e:	bf00      	nop
    cb60:	b003      	add	sp, #12
    cb62:	f85d fb04 	ldr.w	pc, [sp], #4
    cb66:	bf00      	nop
    cb68:	1fff9078 	.word	0x1fff9078
    cb6c:	1fff9074 	.word	0x1fff9074

0000cb70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    cb70:	b500      	push	{lr}
    cb72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb74:	f7f4 f828 	bl	bc8 <Sys_GetCoreID>
    cb78:	4603      	mov	r3, r0
    cb7a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    cb7c:	4a0d      	ldr	r2, [pc, #52]	; (cbb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    cb7e:	9b01      	ldr	r3, [sp, #4]
    cb80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb84:	1e5a      	subs	r2, r3, #1
    cb86:	490b      	ldr	r1, [pc, #44]	; (cbb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    cb88:	9b01      	ldr	r3, [sp, #4]
    cb8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    cb8e:	4a0a      	ldr	r2, [pc, #40]	; (cbb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    cb90:	9b01      	ldr	r3, [sp, #4]
    cb92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb96:	f003 0301 	and.w	r3, r3, #1
    cb9a:	2b00      	cmp	r3, #0
    cb9c:	d106      	bne.n	cbac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    cb9e:	4a05      	ldr	r2, [pc, #20]	; (cbb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    cba0:	9b01      	ldr	r3, [sp, #4]
    cba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cba6:	2b00      	cmp	r3, #0
    cba8:	d100      	bne.n	cbac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cbaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cbac:	bf00      	nop
    cbae:	b003      	add	sp, #12
    cbb0:	f85d fb04 	ldr.w	pc, [sp], #4
    cbb4:	1fff9078 	.word	0x1fff9078
    cbb8:	1fff9074 	.word	0x1fff9074

0000cbbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    cbbc:	b500      	push	{lr}
    cbbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cbc0:	f7f4 f802 	bl	bc8 <Sys_GetCoreID>
    cbc4:	4603      	mov	r3, r0
    cbc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    cbc8:	4a10      	ldr	r2, [pc, #64]	; (cc0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    cbca:	9b01      	ldr	r3, [sp, #4]
    cbcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbd0:	2b00      	cmp	r3, #0
    cbd2:	d10d      	bne.n	cbf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cbd4:	f7f3 ff28 	bl	a28 <Port_schm_read_msr>
    cbd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cbda:	9b00      	ldr	r3, [sp, #0]
    cbdc:	f003 0301 	and.w	r3, r3, #1
    cbe0:	2b00      	cmp	r3, #0
    cbe2:	d100      	bne.n	cbe6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cbe4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    cbe6:	490a      	ldr	r1, [pc, #40]	; (cc10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    cbe8:	9b01      	ldr	r3, [sp, #4]
    cbea:	9a00      	ldr	r2, [sp, #0]
    cbec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    cbf0:	4a06      	ldr	r2, [pc, #24]	; (cc0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    cbf2:	9b01      	ldr	r3, [sp, #4]
    cbf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbf8:	1c5a      	adds	r2, r3, #1
    cbfa:	4904      	ldr	r1, [pc, #16]	; (cc0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    cbfc:	9b01      	ldr	r3, [sp, #4]
    cbfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cc02:	bf00      	nop
    cc04:	b003      	add	sp, #12
    cc06:	f85d fb04 	ldr.w	pc, [sp], #4
    cc0a:	bf00      	nop
    cc0c:	1fff9080 	.word	0x1fff9080
    cc10:	1fff907c 	.word	0x1fff907c

0000cc14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    cc14:	b500      	push	{lr}
    cc16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc18:	f7f3 ffd6 	bl	bc8 <Sys_GetCoreID>
    cc1c:	4603      	mov	r3, r0
    cc1e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    cc20:	4a0d      	ldr	r2, [pc, #52]	; (cc58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    cc22:	9b01      	ldr	r3, [sp, #4]
    cc24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc28:	1e5a      	subs	r2, r3, #1
    cc2a:	490b      	ldr	r1, [pc, #44]	; (cc58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    cc2c:	9b01      	ldr	r3, [sp, #4]
    cc2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    cc32:	4a0a      	ldr	r2, [pc, #40]	; (cc5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    cc34:	9b01      	ldr	r3, [sp, #4]
    cc36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc3a:	f003 0301 	and.w	r3, r3, #1
    cc3e:	2b00      	cmp	r3, #0
    cc40:	d106      	bne.n	cc50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    cc42:	4a05      	ldr	r2, [pc, #20]	; (cc58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    cc44:	9b01      	ldr	r3, [sp, #4]
    cc46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc4a:	2b00      	cmp	r3, #0
    cc4c:	d100      	bne.n	cc50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cc4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cc50:	bf00      	nop
    cc52:	b003      	add	sp, #12
    cc54:	f85d fb04 	ldr.w	pc, [sp], #4
    cc58:	1fff9080 	.word	0x1fff9080
    cc5c:	1fff907c 	.word	0x1fff907c

0000cc60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    cc60:	b500      	push	{lr}
    cc62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc64:	f7f3 ffb0 	bl	bc8 <Sys_GetCoreID>
    cc68:	4603      	mov	r3, r0
    cc6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    cc6c:	4a10      	ldr	r2, [pc, #64]	; (ccb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    cc6e:	9b01      	ldr	r3, [sp, #4]
    cc70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc74:	2b00      	cmp	r3, #0
    cc76:	d10d      	bne.n	cc94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cc78:	f7f3 fed6 	bl	a28 <Port_schm_read_msr>
    cc7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cc7e:	9b00      	ldr	r3, [sp, #0]
    cc80:	f003 0301 	and.w	r3, r3, #1
    cc84:	2b00      	cmp	r3, #0
    cc86:	d100      	bne.n	cc8a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cc88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    cc8a:	490a      	ldr	r1, [pc, #40]	; (ccb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    cc8c:	9b01      	ldr	r3, [sp, #4]
    cc8e:	9a00      	ldr	r2, [sp, #0]
    cc90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    cc94:	4a06      	ldr	r2, [pc, #24]	; (ccb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    cc96:	9b01      	ldr	r3, [sp, #4]
    cc98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc9c:	1c5a      	adds	r2, r3, #1
    cc9e:	4904      	ldr	r1, [pc, #16]	; (ccb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    cca0:	9b01      	ldr	r3, [sp, #4]
    cca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cca6:	bf00      	nop
    cca8:	b003      	add	sp, #12
    ccaa:	f85d fb04 	ldr.w	pc, [sp], #4
    ccae:	bf00      	nop
    ccb0:	1fff9088 	.word	0x1fff9088
    ccb4:	1fff9084 	.word	0x1fff9084

0000ccb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    ccb8:	b500      	push	{lr}
    ccba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ccbc:	f7f3 ff84 	bl	bc8 <Sys_GetCoreID>
    ccc0:	4603      	mov	r3, r0
    ccc2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    ccc4:	4a0d      	ldr	r2, [pc, #52]	; (ccfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    ccc6:	9b01      	ldr	r3, [sp, #4]
    ccc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cccc:	1e5a      	subs	r2, r3, #1
    ccce:	490b      	ldr	r1, [pc, #44]	; (ccfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    ccd0:	9b01      	ldr	r3, [sp, #4]
    ccd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    ccd6:	4a0a      	ldr	r2, [pc, #40]	; (cd00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    ccd8:	9b01      	ldr	r3, [sp, #4]
    ccda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccde:	f003 0301 	and.w	r3, r3, #1
    cce2:	2b00      	cmp	r3, #0
    cce4:	d106      	bne.n	ccf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    cce6:	4a05      	ldr	r2, [pc, #20]	; (ccfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    cce8:	9b01      	ldr	r3, [sp, #4]
    ccea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccee:	2b00      	cmp	r3, #0
    ccf0:	d100      	bne.n	ccf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ccf2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ccf4:	bf00      	nop
    ccf6:	b003      	add	sp, #12
    ccf8:	f85d fb04 	ldr.w	pc, [sp], #4
    ccfc:	1fff9088 	.word	0x1fff9088
    cd00:	1fff9084 	.word	0x1fff9084

0000cd04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    cd04:	b500      	push	{lr}
    cd06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd08:	f7f3 ff5e 	bl	bc8 <Sys_GetCoreID>
    cd0c:	4603      	mov	r3, r0
    cd0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    cd10:	4a10      	ldr	r2, [pc, #64]	; (cd54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    cd12:	9b01      	ldr	r3, [sp, #4]
    cd14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd18:	2b00      	cmp	r3, #0
    cd1a:	d10d      	bne.n	cd38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cd1c:	f7f3 fe84 	bl	a28 <Port_schm_read_msr>
    cd20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cd22:	9b00      	ldr	r3, [sp, #0]
    cd24:	f003 0301 	and.w	r3, r3, #1
    cd28:	2b00      	cmp	r3, #0
    cd2a:	d100      	bne.n	cd2e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cd2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    cd2e:	490a      	ldr	r1, [pc, #40]	; (cd58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    cd30:	9b01      	ldr	r3, [sp, #4]
    cd32:	9a00      	ldr	r2, [sp, #0]
    cd34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    cd38:	4a06      	ldr	r2, [pc, #24]	; (cd54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    cd3a:	9b01      	ldr	r3, [sp, #4]
    cd3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd40:	1c5a      	adds	r2, r3, #1
    cd42:	4904      	ldr	r1, [pc, #16]	; (cd54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    cd44:	9b01      	ldr	r3, [sp, #4]
    cd46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cd4a:	bf00      	nop
    cd4c:	b003      	add	sp, #12
    cd4e:	f85d fb04 	ldr.w	pc, [sp], #4
    cd52:	bf00      	nop
    cd54:	1fff9090 	.word	0x1fff9090
    cd58:	1fff908c 	.word	0x1fff908c

0000cd5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    cd5c:	b500      	push	{lr}
    cd5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd60:	f7f3 ff32 	bl	bc8 <Sys_GetCoreID>
    cd64:	4603      	mov	r3, r0
    cd66:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    cd68:	4a0d      	ldr	r2, [pc, #52]	; (cda0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    cd6a:	9b01      	ldr	r3, [sp, #4]
    cd6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd70:	1e5a      	subs	r2, r3, #1
    cd72:	490b      	ldr	r1, [pc, #44]	; (cda0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    cd74:	9b01      	ldr	r3, [sp, #4]
    cd76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    cd7a:	4a0a      	ldr	r2, [pc, #40]	; (cda4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    cd7c:	9b01      	ldr	r3, [sp, #4]
    cd7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd82:	f003 0301 	and.w	r3, r3, #1
    cd86:	2b00      	cmp	r3, #0
    cd88:	d106      	bne.n	cd98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    cd8a:	4a05      	ldr	r2, [pc, #20]	; (cda0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    cd8c:	9b01      	ldr	r3, [sp, #4]
    cd8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd92:	2b00      	cmp	r3, #0
    cd94:	d100      	bne.n	cd98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cd96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cd98:	bf00      	nop
    cd9a:	b003      	add	sp, #12
    cd9c:	f85d fb04 	ldr.w	pc, [sp], #4
    cda0:	1fff9090 	.word	0x1fff9090
    cda4:	1fff908c 	.word	0x1fff908c

0000cda8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    cda8:	b500      	push	{lr}
    cdaa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cdac:	f7f3 ff0c 	bl	bc8 <Sys_GetCoreID>
    cdb0:	4603      	mov	r3, r0
    cdb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    cdb4:	4a10      	ldr	r2, [pc, #64]	; (cdf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    cdb6:	9b01      	ldr	r3, [sp, #4]
    cdb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdbc:	2b00      	cmp	r3, #0
    cdbe:	d10d      	bne.n	cddc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cdc0:	f7f3 fe32 	bl	a28 <Port_schm_read_msr>
    cdc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cdc6:	9b00      	ldr	r3, [sp, #0]
    cdc8:	f003 0301 	and.w	r3, r3, #1
    cdcc:	2b00      	cmp	r3, #0
    cdce:	d100      	bne.n	cdd2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cdd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    cdd2:	490a      	ldr	r1, [pc, #40]	; (cdfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    cdd4:	9b01      	ldr	r3, [sp, #4]
    cdd6:	9a00      	ldr	r2, [sp, #0]
    cdd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    cddc:	4a06      	ldr	r2, [pc, #24]	; (cdf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    cdde:	9b01      	ldr	r3, [sp, #4]
    cde0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cde4:	1c5a      	adds	r2, r3, #1
    cde6:	4904      	ldr	r1, [pc, #16]	; (cdf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    cde8:	9b01      	ldr	r3, [sp, #4]
    cdea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cdee:	bf00      	nop
    cdf0:	b003      	add	sp, #12
    cdf2:	f85d fb04 	ldr.w	pc, [sp], #4
    cdf6:	bf00      	nop
    cdf8:	1fff9098 	.word	0x1fff9098
    cdfc:	1fff9094 	.word	0x1fff9094

0000ce00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    ce00:	b500      	push	{lr}
    ce02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce04:	f7f3 fee0 	bl	bc8 <Sys_GetCoreID>
    ce08:	4603      	mov	r3, r0
    ce0a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    ce0c:	4a0d      	ldr	r2, [pc, #52]	; (ce44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    ce0e:	9b01      	ldr	r3, [sp, #4]
    ce10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce14:	1e5a      	subs	r2, r3, #1
    ce16:	490b      	ldr	r1, [pc, #44]	; (ce44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    ce18:	9b01      	ldr	r3, [sp, #4]
    ce1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    ce1e:	4a0a      	ldr	r2, [pc, #40]	; (ce48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    ce20:	9b01      	ldr	r3, [sp, #4]
    ce22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce26:	f003 0301 	and.w	r3, r3, #1
    ce2a:	2b00      	cmp	r3, #0
    ce2c:	d106      	bne.n	ce3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    ce2e:	4a05      	ldr	r2, [pc, #20]	; (ce44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    ce30:	9b01      	ldr	r3, [sp, #4]
    ce32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce36:	2b00      	cmp	r3, #0
    ce38:	d100      	bne.n	ce3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ce3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ce3c:	bf00      	nop
    ce3e:	b003      	add	sp, #12
    ce40:	f85d fb04 	ldr.w	pc, [sp], #4
    ce44:	1fff9098 	.word	0x1fff9098
    ce48:	1fff9094 	.word	0x1fff9094

0000ce4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    ce4c:	b500      	push	{lr}
    ce4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce50:	f7f3 feba 	bl	bc8 <Sys_GetCoreID>
    ce54:	4603      	mov	r3, r0
    ce56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    ce58:	4a10      	ldr	r2, [pc, #64]	; (ce9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    ce5a:	9b01      	ldr	r3, [sp, #4]
    ce5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce60:	2b00      	cmp	r3, #0
    ce62:	d10d      	bne.n	ce80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ce64:	f7f3 fde0 	bl	a28 <Port_schm_read_msr>
    ce68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ce6a:	9b00      	ldr	r3, [sp, #0]
    ce6c:	f003 0301 	and.w	r3, r3, #1
    ce70:	2b00      	cmp	r3, #0
    ce72:	d100      	bne.n	ce76 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ce74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    ce76:	490a      	ldr	r1, [pc, #40]	; (cea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    ce78:	9b01      	ldr	r3, [sp, #4]
    ce7a:	9a00      	ldr	r2, [sp, #0]
    ce7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    ce80:	4a06      	ldr	r2, [pc, #24]	; (ce9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    ce82:	9b01      	ldr	r3, [sp, #4]
    ce84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce88:	1c5a      	adds	r2, r3, #1
    ce8a:	4904      	ldr	r1, [pc, #16]	; (ce9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    ce8c:	9b01      	ldr	r3, [sp, #4]
    ce8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ce92:	bf00      	nop
    ce94:	b003      	add	sp, #12
    ce96:	f85d fb04 	ldr.w	pc, [sp], #4
    ce9a:	bf00      	nop
    ce9c:	1fff90a0 	.word	0x1fff90a0
    cea0:	1fff909c 	.word	0x1fff909c

0000cea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    cea4:	b500      	push	{lr}
    cea6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cea8:	f7f3 fe8e 	bl	bc8 <Sys_GetCoreID>
    ceac:	4603      	mov	r3, r0
    ceae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    ceb0:	4a0d      	ldr	r2, [pc, #52]	; (cee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    ceb2:	9b01      	ldr	r3, [sp, #4]
    ceb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ceb8:	1e5a      	subs	r2, r3, #1
    ceba:	490b      	ldr	r1, [pc, #44]	; (cee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    cebc:	9b01      	ldr	r3, [sp, #4]
    cebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    cec2:	4a0a      	ldr	r2, [pc, #40]	; (ceec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    cec4:	9b01      	ldr	r3, [sp, #4]
    cec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ceca:	f003 0301 	and.w	r3, r3, #1
    cece:	2b00      	cmp	r3, #0
    ced0:	d106      	bne.n	cee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    ced2:	4a05      	ldr	r2, [pc, #20]	; (cee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    ced4:	9b01      	ldr	r3, [sp, #4]
    ced6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ceda:	2b00      	cmp	r3, #0
    cedc:	d100      	bne.n	cee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cede:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cee0:	bf00      	nop
    cee2:	b003      	add	sp, #12
    cee4:	f85d fb04 	ldr.w	pc, [sp], #4
    cee8:	1fff90a0 	.word	0x1fff90a0
    ceec:	1fff909c 	.word	0x1fff909c

0000cef0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    cef0:	b500      	push	{lr}
    cef2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cef4:	f7f3 fe68 	bl	bc8 <Sys_GetCoreID>
    cef8:	4603      	mov	r3, r0
    cefa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    cefc:	4a10      	ldr	r2, [pc, #64]	; (cf40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    cefe:	9b01      	ldr	r3, [sp, #4]
    cf00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf04:	2b00      	cmp	r3, #0
    cf06:	d10d      	bne.n	cf24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cf08:	f7f3 fd8e 	bl	a28 <Port_schm_read_msr>
    cf0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cf0e:	9b00      	ldr	r3, [sp, #0]
    cf10:	f003 0301 	and.w	r3, r3, #1
    cf14:	2b00      	cmp	r3, #0
    cf16:	d100      	bne.n	cf1a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cf18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    cf1a:	490a      	ldr	r1, [pc, #40]	; (cf44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    cf1c:	9b01      	ldr	r3, [sp, #4]
    cf1e:	9a00      	ldr	r2, [sp, #0]
    cf20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    cf24:	4a06      	ldr	r2, [pc, #24]	; (cf40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    cf26:	9b01      	ldr	r3, [sp, #4]
    cf28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf2c:	1c5a      	adds	r2, r3, #1
    cf2e:	4904      	ldr	r1, [pc, #16]	; (cf40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    cf30:	9b01      	ldr	r3, [sp, #4]
    cf32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cf36:	bf00      	nop
    cf38:	b003      	add	sp, #12
    cf3a:	f85d fb04 	ldr.w	pc, [sp], #4
    cf3e:	bf00      	nop
    cf40:	1fff90a8 	.word	0x1fff90a8
    cf44:	1fff90a4 	.word	0x1fff90a4

0000cf48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    cf48:	b500      	push	{lr}
    cf4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf4c:	f7f3 fe3c 	bl	bc8 <Sys_GetCoreID>
    cf50:	4603      	mov	r3, r0
    cf52:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    cf54:	4a0d      	ldr	r2, [pc, #52]	; (cf8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    cf56:	9b01      	ldr	r3, [sp, #4]
    cf58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf5c:	1e5a      	subs	r2, r3, #1
    cf5e:	490b      	ldr	r1, [pc, #44]	; (cf8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    cf60:	9b01      	ldr	r3, [sp, #4]
    cf62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    cf66:	4a0a      	ldr	r2, [pc, #40]	; (cf90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    cf68:	9b01      	ldr	r3, [sp, #4]
    cf6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf6e:	f003 0301 	and.w	r3, r3, #1
    cf72:	2b00      	cmp	r3, #0
    cf74:	d106      	bne.n	cf84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    cf76:	4a05      	ldr	r2, [pc, #20]	; (cf8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    cf78:	9b01      	ldr	r3, [sp, #4]
    cf7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf7e:	2b00      	cmp	r3, #0
    cf80:	d100      	bne.n	cf84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cf82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cf84:	bf00      	nop
    cf86:	b003      	add	sp, #12
    cf88:	f85d fb04 	ldr.w	pc, [sp], #4
    cf8c:	1fff90a8 	.word	0x1fff90a8
    cf90:	1fff90a4 	.word	0x1fff90a4

0000cf94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    cf94:	b500      	push	{lr}
    cf96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf98:	f7f3 fe16 	bl	bc8 <Sys_GetCoreID>
    cf9c:	4603      	mov	r3, r0
    cf9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    cfa0:	4a10      	ldr	r2, [pc, #64]	; (cfe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    cfa2:	9b01      	ldr	r3, [sp, #4]
    cfa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfa8:	2b00      	cmp	r3, #0
    cfaa:	d10d      	bne.n	cfc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cfac:	f7f3 fd3c 	bl	a28 <Port_schm_read_msr>
    cfb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cfb2:	9b00      	ldr	r3, [sp, #0]
    cfb4:	f003 0301 	and.w	r3, r3, #1
    cfb8:	2b00      	cmp	r3, #0
    cfba:	d100      	bne.n	cfbe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cfbc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    cfbe:	490a      	ldr	r1, [pc, #40]	; (cfe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    cfc0:	9b01      	ldr	r3, [sp, #4]
    cfc2:	9a00      	ldr	r2, [sp, #0]
    cfc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    cfc8:	4a06      	ldr	r2, [pc, #24]	; (cfe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    cfca:	9b01      	ldr	r3, [sp, #4]
    cfcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfd0:	1c5a      	adds	r2, r3, #1
    cfd2:	4904      	ldr	r1, [pc, #16]	; (cfe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    cfd4:	9b01      	ldr	r3, [sp, #4]
    cfd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cfda:	bf00      	nop
    cfdc:	b003      	add	sp, #12
    cfde:	f85d fb04 	ldr.w	pc, [sp], #4
    cfe2:	bf00      	nop
    cfe4:	1fff90b0 	.word	0x1fff90b0
    cfe8:	1fff90ac 	.word	0x1fff90ac

0000cfec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    cfec:	b500      	push	{lr}
    cfee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cff0:	f7f3 fdea 	bl	bc8 <Sys_GetCoreID>
    cff4:	4603      	mov	r3, r0
    cff6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    cff8:	4a0d      	ldr	r2, [pc, #52]	; (d030 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    cffa:	9b01      	ldr	r3, [sp, #4]
    cffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d000:	1e5a      	subs	r2, r3, #1
    d002:	490b      	ldr	r1, [pc, #44]	; (d030 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    d004:	9b01      	ldr	r3, [sp, #4]
    d006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    d00a:	4a0a      	ldr	r2, [pc, #40]	; (d034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    d00c:	9b01      	ldr	r3, [sp, #4]
    d00e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d012:	f003 0301 	and.w	r3, r3, #1
    d016:	2b00      	cmp	r3, #0
    d018:	d106      	bne.n	d028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    d01a:	4a05      	ldr	r2, [pc, #20]	; (d030 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    d01c:	9b01      	ldr	r3, [sp, #4]
    d01e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d022:	2b00      	cmp	r3, #0
    d024:	d100      	bne.n	d028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d026:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d028:	bf00      	nop
    d02a:	b003      	add	sp, #12
    d02c:	f85d fb04 	ldr.w	pc, [sp], #4
    d030:	1fff90b0 	.word	0x1fff90b0
    d034:	1fff90ac 	.word	0x1fff90ac

0000d038 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    d038:	b500      	push	{lr}
    d03a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d03c:	f7f3 fdc4 	bl	bc8 <Sys_GetCoreID>
    d040:	4603      	mov	r3, r0
    d042:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    d044:	4a10      	ldr	r2, [pc, #64]	; (d088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    d046:	9b01      	ldr	r3, [sp, #4]
    d048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d04c:	2b00      	cmp	r3, #0
    d04e:	d10d      	bne.n	d06c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d050:	f7f3 fcea 	bl	a28 <Port_schm_read_msr>
    d054:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d056:	9b00      	ldr	r3, [sp, #0]
    d058:	f003 0301 	and.w	r3, r3, #1
    d05c:	2b00      	cmp	r3, #0
    d05e:	d100      	bne.n	d062 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d060:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    d062:	490a      	ldr	r1, [pc, #40]	; (d08c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    d064:	9b01      	ldr	r3, [sp, #4]
    d066:	9a00      	ldr	r2, [sp, #0]
    d068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    d06c:	4a06      	ldr	r2, [pc, #24]	; (d088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    d06e:	9b01      	ldr	r3, [sp, #4]
    d070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d074:	1c5a      	adds	r2, r3, #1
    d076:	4904      	ldr	r1, [pc, #16]	; (d088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    d078:	9b01      	ldr	r3, [sp, #4]
    d07a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d07e:	bf00      	nop
    d080:	b003      	add	sp, #12
    d082:	f85d fb04 	ldr.w	pc, [sp], #4
    d086:	bf00      	nop
    d088:	1fff90b8 	.word	0x1fff90b8
    d08c:	1fff90b4 	.word	0x1fff90b4

0000d090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    d090:	b500      	push	{lr}
    d092:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d094:	f7f3 fd98 	bl	bc8 <Sys_GetCoreID>
    d098:	4603      	mov	r3, r0
    d09a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    d09c:	4a0d      	ldr	r2, [pc, #52]	; (d0d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    d09e:	9b01      	ldr	r3, [sp, #4]
    d0a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0a4:	1e5a      	subs	r2, r3, #1
    d0a6:	490b      	ldr	r1, [pc, #44]	; (d0d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    d0a8:	9b01      	ldr	r3, [sp, #4]
    d0aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    d0ae:	4a0a      	ldr	r2, [pc, #40]	; (d0d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    d0b0:	9b01      	ldr	r3, [sp, #4]
    d0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0b6:	f003 0301 	and.w	r3, r3, #1
    d0ba:	2b00      	cmp	r3, #0
    d0bc:	d106      	bne.n	d0cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    d0be:	4a05      	ldr	r2, [pc, #20]	; (d0d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    d0c0:	9b01      	ldr	r3, [sp, #4]
    d0c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0c6:	2b00      	cmp	r3, #0
    d0c8:	d100      	bne.n	d0cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d0ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d0cc:	bf00      	nop
    d0ce:	b003      	add	sp, #12
    d0d0:	f85d fb04 	ldr.w	pc, [sp], #4
    d0d4:	1fff90b8 	.word	0x1fff90b8
    d0d8:	1fff90b4 	.word	0x1fff90b4

0000d0dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    d0dc:	b500      	push	{lr}
    d0de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d0e0:	f7f3 fd72 	bl	bc8 <Sys_GetCoreID>
    d0e4:	4603      	mov	r3, r0
    d0e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    d0e8:	4a10      	ldr	r2, [pc, #64]	; (d12c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    d0ea:	9b01      	ldr	r3, [sp, #4]
    d0ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0f0:	2b00      	cmp	r3, #0
    d0f2:	d10d      	bne.n	d110 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d0f4:	f7f3 fc98 	bl	a28 <Port_schm_read_msr>
    d0f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d0fa:	9b00      	ldr	r3, [sp, #0]
    d0fc:	f003 0301 	and.w	r3, r3, #1
    d100:	2b00      	cmp	r3, #0
    d102:	d100      	bne.n	d106 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d104:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    d106:	490a      	ldr	r1, [pc, #40]	; (d130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    d108:	9b01      	ldr	r3, [sp, #4]
    d10a:	9a00      	ldr	r2, [sp, #0]
    d10c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    d110:	4a06      	ldr	r2, [pc, #24]	; (d12c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    d112:	9b01      	ldr	r3, [sp, #4]
    d114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d118:	1c5a      	adds	r2, r3, #1
    d11a:	4904      	ldr	r1, [pc, #16]	; (d12c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    d11c:	9b01      	ldr	r3, [sp, #4]
    d11e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d122:	bf00      	nop
    d124:	b003      	add	sp, #12
    d126:	f85d fb04 	ldr.w	pc, [sp], #4
    d12a:	bf00      	nop
    d12c:	1fff90c0 	.word	0x1fff90c0
    d130:	1fff90bc 	.word	0x1fff90bc

0000d134 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    d134:	b500      	push	{lr}
    d136:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d138:	f7f3 fd46 	bl	bc8 <Sys_GetCoreID>
    d13c:	4603      	mov	r3, r0
    d13e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    d140:	4a0d      	ldr	r2, [pc, #52]	; (d178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    d142:	9b01      	ldr	r3, [sp, #4]
    d144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d148:	1e5a      	subs	r2, r3, #1
    d14a:	490b      	ldr	r1, [pc, #44]	; (d178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    d14c:	9b01      	ldr	r3, [sp, #4]
    d14e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    d152:	4a0a      	ldr	r2, [pc, #40]	; (d17c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    d154:	9b01      	ldr	r3, [sp, #4]
    d156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d15a:	f003 0301 	and.w	r3, r3, #1
    d15e:	2b00      	cmp	r3, #0
    d160:	d106      	bne.n	d170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    d162:	4a05      	ldr	r2, [pc, #20]	; (d178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    d164:	9b01      	ldr	r3, [sp, #4]
    d166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d16a:	2b00      	cmp	r3, #0
    d16c:	d100      	bne.n	d170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d16e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d170:	bf00      	nop
    d172:	b003      	add	sp, #12
    d174:	f85d fb04 	ldr.w	pc, [sp], #4
    d178:	1fff90c0 	.word	0x1fff90c0
    d17c:	1fff90bc 	.word	0x1fff90bc

0000d180 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    d180:	b500      	push	{lr}
    d182:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d184:	f7f3 fd20 	bl	bc8 <Sys_GetCoreID>
    d188:	4603      	mov	r3, r0
    d18a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    d18c:	4a10      	ldr	r2, [pc, #64]	; (d1d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    d18e:	9b01      	ldr	r3, [sp, #4]
    d190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d194:	2b00      	cmp	r3, #0
    d196:	d10d      	bne.n	d1b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d198:	f7f3 fc46 	bl	a28 <Port_schm_read_msr>
    d19c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d19e:	9b00      	ldr	r3, [sp, #0]
    d1a0:	f003 0301 	and.w	r3, r3, #1
    d1a4:	2b00      	cmp	r3, #0
    d1a6:	d100      	bne.n	d1aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d1a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    d1aa:	490a      	ldr	r1, [pc, #40]	; (d1d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    d1ac:	9b01      	ldr	r3, [sp, #4]
    d1ae:	9a00      	ldr	r2, [sp, #0]
    d1b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    d1b4:	4a06      	ldr	r2, [pc, #24]	; (d1d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    d1b6:	9b01      	ldr	r3, [sp, #4]
    d1b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1bc:	1c5a      	adds	r2, r3, #1
    d1be:	4904      	ldr	r1, [pc, #16]	; (d1d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    d1c0:	9b01      	ldr	r3, [sp, #4]
    d1c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d1c6:	bf00      	nop
    d1c8:	b003      	add	sp, #12
    d1ca:	f85d fb04 	ldr.w	pc, [sp], #4
    d1ce:	bf00      	nop
    d1d0:	1fff90c8 	.word	0x1fff90c8
    d1d4:	1fff90c4 	.word	0x1fff90c4

0000d1d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    d1d8:	b500      	push	{lr}
    d1da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d1dc:	f7f3 fcf4 	bl	bc8 <Sys_GetCoreID>
    d1e0:	4603      	mov	r3, r0
    d1e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    d1e4:	4a0d      	ldr	r2, [pc, #52]	; (d21c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    d1e6:	9b01      	ldr	r3, [sp, #4]
    d1e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1ec:	1e5a      	subs	r2, r3, #1
    d1ee:	490b      	ldr	r1, [pc, #44]	; (d21c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    d1f0:	9b01      	ldr	r3, [sp, #4]
    d1f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    d1f6:	4a0a      	ldr	r2, [pc, #40]	; (d220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    d1f8:	9b01      	ldr	r3, [sp, #4]
    d1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1fe:	f003 0301 	and.w	r3, r3, #1
    d202:	2b00      	cmp	r3, #0
    d204:	d106      	bne.n	d214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    d206:	4a05      	ldr	r2, [pc, #20]	; (d21c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    d208:	9b01      	ldr	r3, [sp, #4]
    d20a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d20e:	2b00      	cmp	r3, #0
    d210:	d100      	bne.n	d214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d212:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d214:	bf00      	nop
    d216:	b003      	add	sp, #12
    d218:	f85d fb04 	ldr.w	pc, [sp], #4
    d21c:	1fff90c8 	.word	0x1fff90c8
    d220:	1fff90c4 	.word	0x1fff90c4

0000d224 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    d224:	b500      	push	{lr}
    d226:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d228:	f7f3 fcce 	bl	bc8 <Sys_GetCoreID>
    d22c:	4603      	mov	r3, r0
    d22e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    d230:	4a10      	ldr	r2, [pc, #64]	; (d274 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    d232:	9b01      	ldr	r3, [sp, #4]
    d234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d238:	2b00      	cmp	r3, #0
    d23a:	d10d      	bne.n	d258 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d23c:	f7f3 fbf4 	bl	a28 <Port_schm_read_msr>
    d240:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d242:	9b00      	ldr	r3, [sp, #0]
    d244:	f003 0301 	and.w	r3, r3, #1
    d248:	2b00      	cmp	r3, #0
    d24a:	d100      	bne.n	d24e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d24c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    d24e:	490a      	ldr	r1, [pc, #40]	; (d278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    d250:	9b01      	ldr	r3, [sp, #4]
    d252:	9a00      	ldr	r2, [sp, #0]
    d254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    d258:	4a06      	ldr	r2, [pc, #24]	; (d274 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    d25a:	9b01      	ldr	r3, [sp, #4]
    d25c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d260:	1c5a      	adds	r2, r3, #1
    d262:	4904      	ldr	r1, [pc, #16]	; (d274 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    d264:	9b01      	ldr	r3, [sp, #4]
    d266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d26a:	bf00      	nop
    d26c:	b003      	add	sp, #12
    d26e:	f85d fb04 	ldr.w	pc, [sp], #4
    d272:	bf00      	nop
    d274:	1fff90d0 	.word	0x1fff90d0
    d278:	1fff90cc 	.word	0x1fff90cc

0000d27c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    d27c:	b500      	push	{lr}
    d27e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d280:	f7f3 fca2 	bl	bc8 <Sys_GetCoreID>
    d284:	4603      	mov	r3, r0
    d286:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    d288:	4a0d      	ldr	r2, [pc, #52]	; (d2c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    d28a:	9b01      	ldr	r3, [sp, #4]
    d28c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d290:	1e5a      	subs	r2, r3, #1
    d292:	490b      	ldr	r1, [pc, #44]	; (d2c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    d294:	9b01      	ldr	r3, [sp, #4]
    d296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    d29a:	4a0a      	ldr	r2, [pc, #40]	; (d2c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    d29c:	9b01      	ldr	r3, [sp, #4]
    d29e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2a2:	f003 0301 	and.w	r3, r3, #1
    d2a6:	2b00      	cmp	r3, #0
    d2a8:	d106      	bne.n	d2b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    d2aa:	4a05      	ldr	r2, [pc, #20]	; (d2c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    d2ac:	9b01      	ldr	r3, [sp, #4]
    d2ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2b2:	2b00      	cmp	r3, #0
    d2b4:	d100      	bne.n	d2b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d2b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d2b8:	bf00      	nop
    d2ba:	b003      	add	sp, #12
    d2bc:	f85d fb04 	ldr.w	pc, [sp], #4
    d2c0:	1fff90d0 	.word	0x1fff90d0
    d2c4:	1fff90cc 	.word	0x1fff90cc

0000d2c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    d2c8:	b500      	push	{lr}
    d2ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d2cc:	f7f3 fc7c 	bl	bc8 <Sys_GetCoreID>
    d2d0:	4603      	mov	r3, r0
    d2d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    d2d4:	4a10      	ldr	r2, [pc, #64]	; (d318 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    d2d6:	9b01      	ldr	r3, [sp, #4]
    d2d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2dc:	2b00      	cmp	r3, #0
    d2de:	d10d      	bne.n	d2fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d2e0:	f7f3 fba2 	bl	a28 <Port_schm_read_msr>
    d2e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d2e6:	9b00      	ldr	r3, [sp, #0]
    d2e8:	f003 0301 	and.w	r3, r3, #1
    d2ec:	2b00      	cmp	r3, #0
    d2ee:	d100      	bne.n	d2f2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d2f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    d2f2:	490a      	ldr	r1, [pc, #40]	; (d31c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    d2f4:	9b01      	ldr	r3, [sp, #4]
    d2f6:	9a00      	ldr	r2, [sp, #0]
    d2f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    d2fc:	4a06      	ldr	r2, [pc, #24]	; (d318 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    d2fe:	9b01      	ldr	r3, [sp, #4]
    d300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d304:	1c5a      	adds	r2, r3, #1
    d306:	4904      	ldr	r1, [pc, #16]	; (d318 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    d308:	9b01      	ldr	r3, [sp, #4]
    d30a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d30e:	bf00      	nop
    d310:	b003      	add	sp, #12
    d312:	f85d fb04 	ldr.w	pc, [sp], #4
    d316:	bf00      	nop
    d318:	1fff90d8 	.word	0x1fff90d8
    d31c:	1fff90d4 	.word	0x1fff90d4

0000d320 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    d320:	b500      	push	{lr}
    d322:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d324:	f7f3 fc50 	bl	bc8 <Sys_GetCoreID>
    d328:	4603      	mov	r3, r0
    d32a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    d32c:	4a0d      	ldr	r2, [pc, #52]	; (d364 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    d32e:	9b01      	ldr	r3, [sp, #4]
    d330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d334:	1e5a      	subs	r2, r3, #1
    d336:	490b      	ldr	r1, [pc, #44]	; (d364 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    d338:	9b01      	ldr	r3, [sp, #4]
    d33a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    d33e:	4a0a      	ldr	r2, [pc, #40]	; (d368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    d340:	9b01      	ldr	r3, [sp, #4]
    d342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d346:	f003 0301 	and.w	r3, r3, #1
    d34a:	2b00      	cmp	r3, #0
    d34c:	d106      	bne.n	d35c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    d34e:	4a05      	ldr	r2, [pc, #20]	; (d364 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    d350:	9b01      	ldr	r3, [sp, #4]
    d352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d356:	2b00      	cmp	r3, #0
    d358:	d100      	bne.n	d35c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d35a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d35c:	bf00      	nop
    d35e:	b003      	add	sp, #12
    d360:	f85d fb04 	ldr.w	pc, [sp], #4
    d364:	1fff90d8 	.word	0x1fff90d8
    d368:	1fff90d4 	.word	0x1fff90d4

0000d36c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    d36c:	b500      	push	{lr}
    d36e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d370:	f7f3 fc2a 	bl	bc8 <Sys_GetCoreID>
    d374:	4603      	mov	r3, r0
    d376:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    d378:	4a10      	ldr	r2, [pc, #64]	; (d3bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    d37a:	9b01      	ldr	r3, [sp, #4]
    d37c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d380:	2b00      	cmp	r3, #0
    d382:	d10d      	bne.n	d3a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d384:	f7f3 fb50 	bl	a28 <Port_schm_read_msr>
    d388:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d38a:	9b00      	ldr	r3, [sp, #0]
    d38c:	f003 0301 	and.w	r3, r3, #1
    d390:	2b00      	cmp	r3, #0
    d392:	d100      	bne.n	d396 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d394:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    d396:	490a      	ldr	r1, [pc, #40]	; (d3c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    d398:	9b01      	ldr	r3, [sp, #4]
    d39a:	9a00      	ldr	r2, [sp, #0]
    d39c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    d3a0:	4a06      	ldr	r2, [pc, #24]	; (d3bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    d3a2:	9b01      	ldr	r3, [sp, #4]
    d3a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3a8:	1c5a      	adds	r2, r3, #1
    d3aa:	4904      	ldr	r1, [pc, #16]	; (d3bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    d3ac:	9b01      	ldr	r3, [sp, #4]
    d3ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d3b2:	bf00      	nop
    d3b4:	b003      	add	sp, #12
    d3b6:	f85d fb04 	ldr.w	pc, [sp], #4
    d3ba:	bf00      	nop
    d3bc:	1fff90e0 	.word	0x1fff90e0
    d3c0:	1fff90dc 	.word	0x1fff90dc

0000d3c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    d3c4:	b500      	push	{lr}
    d3c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d3c8:	f7f3 fbfe 	bl	bc8 <Sys_GetCoreID>
    d3cc:	4603      	mov	r3, r0
    d3ce:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    d3d0:	4a0d      	ldr	r2, [pc, #52]	; (d408 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    d3d2:	9b01      	ldr	r3, [sp, #4]
    d3d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3d8:	1e5a      	subs	r2, r3, #1
    d3da:	490b      	ldr	r1, [pc, #44]	; (d408 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    d3dc:	9b01      	ldr	r3, [sp, #4]
    d3de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    d3e2:	4a0a      	ldr	r2, [pc, #40]	; (d40c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    d3e4:	9b01      	ldr	r3, [sp, #4]
    d3e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3ea:	f003 0301 	and.w	r3, r3, #1
    d3ee:	2b00      	cmp	r3, #0
    d3f0:	d106      	bne.n	d400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    d3f2:	4a05      	ldr	r2, [pc, #20]	; (d408 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    d3f4:	9b01      	ldr	r3, [sp, #4]
    d3f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3fa:	2b00      	cmp	r3, #0
    d3fc:	d100      	bne.n	d400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d3fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d400:	bf00      	nop
    d402:	b003      	add	sp, #12
    d404:	f85d fb04 	ldr.w	pc, [sp], #4
    d408:	1fff90e0 	.word	0x1fff90e0
    d40c:	1fff90dc 	.word	0x1fff90dc

0000d410 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    d410:	b500      	push	{lr}
    d412:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d414:	f7f3 fbd8 	bl	bc8 <Sys_GetCoreID>
    d418:	4603      	mov	r3, r0
    d41a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    d41c:	4a10      	ldr	r2, [pc, #64]	; (d460 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    d41e:	9b01      	ldr	r3, [sp, #4]
    d420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d424:	2b00      	cmp	r3, #0
    d426:	d10d      	bne.n	d444 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d428:	f7f3 fafe 	bl	a28 <Port_schm_read_msr>
    d42c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d42e:	9b00      	ldr	r3, [sp, #0]
    d430:	f003 0301 	and.w	r3, r3, #1
    d434:	2b00      	cmp	r3, #0
    d436:	d100      	bne.n	d43a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d438:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    d43a:	490a      	ldr	r1, [pc, #40]	; (d464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    d43c:	9b01      	ldr	r3, [sp, #4]
    d43e:	9a00      	ldr	r2, [sp, #0]
    d440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    d444:	4a06      	ldr	r2, [pc, #24]	; (d460 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    d446:	9b01      	ldr	r3, [sp, #4]
    d448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d44c:	1c5a      	adds	r2, r3, #1
    d44e:	4904      	ldr	r1, [pc, #16]	; (d460 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    d450:	9b01      	ldr	r3, [sp, #4]
    d452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d456:	bf00      	nop
    d458:	b003      	add	sp, #12
    d45a:	f85d fb04 	ldr.w	pc, [sp], #4
    d45e:	bf00      	nop
    d460:	1fff90e8 	.word	0x1fff90e8
    d464:	1fff90e4 	.word	0x1fff90e4

0000d468 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    d468:	b500      	push	{lr}
    d46a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d46c:	f7f3 fbac 	bl	bc8 <Sys_GetCoreID>
    d470:	4603      	mov	r3, r0
    d472:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    d474:	4a0d      	ldr	r2, [pc, #52]	; (d4ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    d476:	9b01      	ldr	r3, [sp, #4]
    d478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d47c:	1e5a      	subs	r2, r3, #1
    d47e:	490b      	ldr	r1, [pc, #44]	; (d4ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    d480:	9b01      	ldr	r3, [sp, #4]
    d482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    d486:	4a0a      	ldr	r2, [pc, #40]	; (d4b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    d488:	9b01      	ldr	r3, [sp, #4]
    d48a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d48e:	f003 0301 	and.w	r3, r3, #1
    d492:	2b00      	cmp	r3, #0
    d494:	d106      	bne.n	d4a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    d496:	4a05      	ldr	r2, [pc, #20]	; (d4ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    d498:	9b01      	ldr	r3, [sp, #4]
    d49a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d49e:	2b00      	cmp	r3, #0
    d4a0:	d100      	bne.n	d4a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d4a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d4a4:	bf00      	nop
    d4a6:	b003      	add	sp, #12
    d4a8:	f85d fb04 	ldr.w	pc, [sp], #4
    d4ac:	1fff90e8 	.word	0x1fff90e8
    d4b0:	1fff90e4 	.word	0x1fff90e4

0000d4b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    d4b4:	b500      	push	{lr}
    d4b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4b8:	f7f3 fb86 	bl	bc8 <Sys_GetCoreID>
    d4bc:	4603      	mov	r3, r0
    d4be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    d4c0:	4a10      	ldr	r2, [pc, #64]	; (d504 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    d4c2:	9b01      	ldr	r3, [sp, #4]
    d4c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4c8:	2b00      	cmp	r3, #0
    d4ca:	d10d      	bne.n	d4e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d4cc:	f7f3 faac 	bl	a28 <Port_schm_read_msr>
    d4d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d4d2:	9b00      	ldr	r3, [sp, #0]
    d4d4:	f003 0301 	and.w	r3, r3, #1
    d4d8:	2b00      	cmp	r3, #0
    d4da:	d100      	bne.n	d4de <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d4dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    d4de:	490a      	ldr	r1, [pc, #40]	; (d508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    d4e0:	9b01      	ldr	r3, [sp, #4]
    d4e2:	9a00      	ldr	r2, [sp, #0]
    d4e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    d4e8:	4a06      	ldr	r2, [pc, #24]	; (d504 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    d4ea:	9b01      	ldr	r3, [sp, #4]
    d4ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4f0:	1c5a      	adds	r2, r3, #1
    d4f2:	4904      	ldr	r1, [pc, #16]	; (d504 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    d4f4:	9b01      	ldr	r3, [sp, #4]
    d4f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d4fa:	bf00      	nop
    d4fc:	b003      	add	sp, #12
    d4fe:	f85d fb04 	ldr.w	pc, [sp], #4
    d502:	bf00      	nop
    d504:	1fff90f0 	.word	0x1fff90f0
    d508:	1fff90ec 	.word	0x1fff90ec

0000d50c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    d50c:	b500      	push	{lr}
    d50e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d510:	f7f3 fb5a 	bl	bc8 <Sys_GetCoreID>
    d514:	4603      	mov	r3, r0
    d516:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    d518:	4a0d      	ldr	r2, [pc, #52]	; (d550 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    d51a:	9b01      	ldr	r3, [sp, #4]
    d51c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d520:	1e5a      	subs	r2, r3, #1
    d522:	490b      	ldr	r1, [pc, #44]	; (d550 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    d524:	9b01      	ldr	r3, [sp, #4]
    d526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    d52a:	4a0a      	ldr	r2, [pc, #40]	; (d554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    d52c:	9b01      	ldr	r3, [sp, #4]
    d52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d532:	f003 0301 	and.w	r3, r3, #1
    d536:	2b00      	cmp	r3, #0
    d538:	d106      	bne.n	d548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    d53a:	4a05      	ldr	r2, [pc, #20]	; (d550 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    d53c:	9b01      	ldr	r3, [sp, #4]
    d53e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d542:	2b00      	cmp	r3, #0
    d544:	d100      	bne.n	d548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d546:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d548:	bf00      	nop
    d54a:	b003      	add	sp, #12
    d54c:	f85d fb04 	ldr.w	pc, [sp], #4
    d550:	1fff90f0 	.word	0x1fff90f0
    d554:	1fff90ec 	.word	0x1fff90ec

0000d558 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    d558:	b500      	push	{lr}
    d55a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d55c:	f7f3 fb34 	bl	bc8 <Sys_GetCoreID>
    d560:	4603      	mov	r3, r0
    d562:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    d564:	4a10      	ldr	r2, [pc, #64]	; (d5a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    d566:	9b01      	ldr	r3, [sp, #4]
    d568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d56c:	2b00      	cmp	r3, #0
    d56e:	d10d      	bne.n	d58c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d570:	f7f3 fa5a 	bl	a28 <Port_schm_read_msr>
    d574:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d576:	9b00      	ldr	r3, [sp, #0]
    d578:	f003 0301 	and.w	r3, r3, #1
    d57c:	2b00      	cmp	r3, #0
    d57e:	d100      	bne.n	d582 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d580:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    d582:	490a      	ldr	r1, [pc, #40]	; (d5ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    d584:	9b01      	ldr	r3, [sp, #4]
    d586:	9a00      	ldr	r2, [sp, #0]
    d588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    d58c:	4a06      	ldr	r2, [pc, #24]	; (d5a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    d58e:	9b01      	ldr	r3, [sp, #4]
    d590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d594:	1c5a      	adds	r2, r3, #1
    d596:	4904      	ldr	r1, [pc, #16]	; (d5a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    d598:	9b01      	ldr	r3, [sp, #4]
    d59a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d59e:	bf00      	nop
    d5a0:	b003      	add	sp, #12
    d5a2:	f85d fb04 	ldr.w	pc, [sp], #4
    d5a6:	bf00      	nop
    d5a8:	1fff90f8 	.word	0x1fff90f8
    d5ac:	1fff90f4 	.word	0x1fff90f4

0000d5b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    d5b0:	b500      	push	{lr}
    d5b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5b4:	f7f3 fb08 	bl	bc8 <Sys_GetCoreID>
    d5b8:	4603      	mov	r3, r0
    d5ba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    d5bc:	4a0d      	ldr	r2, [pc, #52]	; (d5f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    d5be:	9b01      	ldr	r3, [sp, #4]
    d5c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5c4:	1e5a      	subs	r2, r3, #1
    d5c6:	490b      	ldr	r1, [pc, #44]	; (d5f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    d5c8:	9b01      	ldr	r3, [sp, #4]
    d5ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    d5ce:	4a0a      	ldr	r2, [pc, #40]	; (d5f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    d5d0:	9b01      	ldr	r3, [sp, #4]
    d5d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5d6:	f003 0301 	and.w	r3, r3, #1
    d5da:	2b00      	cmp	r3, #0
    d5dc:	d106      	bne.n	d5ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    d5de:	4a05      	ldr	r2, [pc, #20]	; (d5f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    d5e0:	9b01      	ldr	r3, [sp, #4]
    d5e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5e6:	2b00      	cmp	r3, #0
    d5e8:	d100      	bne.n	d5ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d5ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d5ec:	bf00      	nop
    d5ee:	b003      	add	sp, #12
    d5f0:	f85d fb04 	ldr.w	pc, [sp], #4
    d5f4:	1fff90f8 	.word	0x1fff90f8
    d5f8:	1fff90f4 	.word	0x1fff90f4

0000d5fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    d5fc:	b500      	push	{lr}
    d5fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d600:	f7f3 fae2 	bl	bc8 <Sys_GetCoreID>
    d604:	4603      	mov	r3, r0
    d606:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    d608:	4a10      	ldr	r2, [pc, #64]	; (d64c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    d60a:	9b01      	ldr	r3, [sp, #4]
    d60c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d610:	2b00      	cmp	r3, #0
    d612:	d10d      	bne.n	d630 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d614:	f7f3 fa08 	bl	a28 <Port_schm_read_msr>
    d618:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d61a:	9b00      	ldr	r3, [sp, #0]
    d61c:	f003 0301 	and.w	r3, r3, #1
    d620:	2b00      	cmp	r3, #0
    d622:	d100      	bne.n	d626 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d624:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    d626:	490a      	ldr	r1, [pc, #40]	; (d650 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    d628:	9b01      	ldr	r3, [sp, #4]
    d62a:	9a00      	ldr	r2, [sp, #0]
    d62c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    d630:	4a06      	ldr	r2, [pc, #24]	; (d64c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    d632:	9b01      	ldr	r3, [sp, #4]
    d634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d638:	1c5a      	adds	r2, r3, #1
    d63a:	4904      	ldr	r1, [pc, #16]	; (d64c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    d63c:	9b01      	ldr	r3, [sp, #4]
    d63e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d642:	bf00      	nop
    d644:	b003      	add	sp, #12
    d646:	f85d fb04 	ldr.w	pc, [sp], #4
    d64a:	bf00      	nop
    d64c:	1fff9100 	.word	0x1fff9100
    d650:	1fff90fc 	.word	0x1fff90fc

0000d654 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    d654:	b500      	push	{lr}
    d656:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d658:	f7f3 fab6 	bl	bc8 <Sys_GetCoreID>
    d65c:	4603      	mov	r3, r0
    d65e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    d660:	4a0d      	ldr	r2, [pc, #52]	; (d698 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    d662:	9b01      	ldr	r3, [sp, #4]
    d664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d668:	1e5a      	subs	r2, r3, #1
    d66a:	490b      	ldr	r1, [pc, #44]	; (d698 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    d66c:	9b01      	ldr	r3, [sp, #4]
    d66e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    d672:	4a0a      	ldr	r2, [pc, #40]	; (d69c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    d674:	9b01      	ldr	r3, [sp, #4]
    d676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d67a:	f003 0301 	and.w	r3, r3, #1
    d67e:	2b00      	cmp	r3, #0
    d680:	d106      	bne.n	d690 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    d682:	4a05      	ldr	r2, [pc, #20]	; (d698 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    d684:	9b01      	ldr	r3, [sp, #4]
    d686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d68a:	2b00      	cmp	r3, #0
    d68c:	d100      	bne.n	d690 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d68e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d690:	bf00      	nop
    d692:	b003      	add	sp, #12
    d694:	f85d fb04 	ldr.w	pc, [sp], #4
    d698:	1fff9100 	.word	0x1fff9100
    d69c:	1fff90fc 	.word	0x1fff90fc

0000d6a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    d6a0:	b500      	push	{lr}
    d6a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6a4:	f7f3 fa90 	bl	bc8 <Sys_GetCoreID>
    d6a8:	4603      	mov	r3, r0
    d6aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    d6ac:	4a10      	ldr	r2, [pc, #64]	; (d6f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    d6ae:	9b01      	ldr	r3, [sp, #4]
    d6b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6b4:	2b00      	cmp	r3, #0
    d6b6:	d10d      	bne.n	d6d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d6b8:	f7f3 f9b6 	bl	a28 <Port_schm_read_msr>
    d6bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d6be:	9b00      	ldr	r3, [sp, #0]
    d6c0:	f003 0301 	and.w	r3, r3, #1
    d6c4:	2b00      	cmp	r3, #0
    d6c6:	d100      	bne.n	d6ca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d6c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    d6ca:	490a      	ldr	r1, [pc, #40]	; (d6f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    d6cc:	9b01      	ldr	r3, [sp, #4]
    d6ce:	9a00      	ldr	r2, [sp, #0]
    d6d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    d6d4:	4a06      	ldr	r2, [pc, #24]	; (d6f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    d6d6:	9b01      	ldr	r3, [sp, #4]
    d6d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6dc:	1c5a      	adds	r2, r3, #1
    d6de:	4904      	ldr	r1, [pc, #16]	; (d6f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    d6e0:	9b01      	ldr	r3, [sp, #4]
    d6e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d6e6:	bf00      	nop
    d6e8:	b003      	add	sp, #12
    d6ea:	f85d fb04 	ldr.w	pc, [sp], #4
    d6ee:	bf00      	nop
    d6f0:	1fff9108 	.word	0x1fff9108
    d6f4:	1fff9104 	.word	0x1fff9104

0000d6f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    d6f8:	b500      	push	{lr}
    d6fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6fc:	f7f3 fa64 	bl	bc8 <Sys_GetCoreID>
    d700:	4603      	mov	r3, r0
    d702:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    d704:	4a0d      	ldr	r2, [pc, #52]	; (d73c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    d706:	9b01      	ldr	r3, [sp, #4]
    d708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d70c:	1e5a      	subs	r2, r3, #1
    d70e:	490b      	ldr	r1, [pc, #44]	; (d73c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    d710:	9b01      	ldr	r3, [sp, #4]
    d712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    d716:	4a0a      	ldr	r2, [pc, #40]	; (d740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    d718:	9b01      	ldr	r3, [sp, #4]
    d71a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d71e:	f003 0301 	and.w	r3, r3, #1
    d722:	2b00      	cmp	r3, #0
    d724:	d106      	bne.n	d734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    d726:	4a05      	ldr	r2, [pc, #20]	; (d73c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    d728:	9b01      	ldr	r3, [sp, #4]
    d72a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d72e:	2b00      	cmp	r3, #0
    d730:	d100      	bne.n	d734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d732:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d734:	bf00      	nop
    d736:	b003      	add	sp, #12
    d738:	f85d fb04 	ldr.w	pc, [sp], #4
    d73c:	1fff9108 	.word	0x1fff9108
    d740:	1fff9104 	.word	0x1fff9104

0000d744 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    d744:	b500      	push	{lr}
    d746:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d748:	f7f3 fa3e 	bl	bc8 <Sys_GetCoreID>
    d74c:	4603      	mov	r3, r0
    d74e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    d750:	4a10      	ldr	r2, [pc, #64]	; (d794 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    d752:	9b01      	ldr	r3, [sp, #4]
    d754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d758:	2b00      	cmp	r3, #0
    d75a:	d10d      	bne.n	d778 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d75c:	f7f3 f964 	bl	a28 <Port_schm_read_msr>
    d760:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d762:	9b00      	ldr	r3, [sp, #0]
    d764:	f003 0301 	and.w	r3, r3, #1
    d768:	2b00      	cmp	r3, #0
    d76a:	d100      	bne.n	d76e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d76c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    d76e:	490a      	ldr	r1, [pc, #40]	; (d798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    d770:	9b01      	ldr	r3, [sp, #4]
    d772:	9a00      	ldr	r2, [sp, #0]
    d774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    d778:	4a06      	ldr	r2, [pc, #24]	; (d794 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    d77a:	9b01      	ldr	r3, [sp, #4]
    d77c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d780:	1c5a      	adds	r2, r3, #1
    d782:	4904      	ldr	r1, [pc, #16]	; (d794 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    d784:	9b01      	ldr	r3, [sp, #4]
    d786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d78a:	bf00      	nop
    d78c:	b003      	add	sp, #12
    d78e:	f85d fb04 	ldr.w	pc, [sp], #4
    d792:	bf00      	nop
    d794:	1fff9110 	.word	0x1fff9110
    d798:	1fff910c 	.word	0x1fff910c

0000d79c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    d79c:	b500      	push	{lr}
    d79e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7a0:	f7f3 fa12 	bl	bc8 <Sys_GetCoreID>
    d7a4:	4603      	mov	r3, r0
    d7a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    d7a8:	4a0d      	ldr	r2, [pc, #52]	; (d7e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    d7aa:	9b01      	ldr	r3, [sp, #4]
    d7ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7b0:	1e5a      	subs	r2, r3, #1
    d7b2:	490b      	ldr	r1, [pc, #44]	; (d7e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    d7b4:	9b01      	ldr	r3, [sp, #4]
    d7b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    d7ba:	4a0a      	ldr	r2, [pc, #40]	; (d7e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    d7bc:	9b01      	ldr	r3, [sp, #4]
    d7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7c2:	f003 0301 	and.w	r3, r3, #1
    d7c6:	2b00      	cmp	r3, #0
    d7c8:	d106      	bne.n	d7d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    d7ca:	4a05      	ldr	r2, [pc, #20]	; (d7e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    d7cc:	9b01      	ldr	r3, [sp, #4]
    d7ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7d2:	2b00      	cmp	r3, #0
    d7d4:	d100      	bne.n	d7d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d7d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d7d8:	bf00      	nop
    d7da:	b003      	add	sp, #12
    d7dc:	f85d fb04 	ldr.w	pc, [sp], #4
    d7e0:	1fff9110 	.word	0x1fff9110
    d7e4:	1fff910c 	.word	0x1fff910c

0000d7e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    d7e8:	b500      	push	{lr}
    d7ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7ec:	f7f3 f9ec 	bl	bc8 <Sys_GetCoreID>
    d7f0:	4603      	mov	r3, r0
    d7f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    d7f4:	4a10      	ldr	r2, [pc, #64]	; (d838 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    d7f6:	9b01      	ldr	r3, [sp, #4]
    d7f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7fc:	2b00      	cmp	r3, #0
    d7fe:	d10d      	bne.n	d81c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d800:	f7f3 f912 	bl	a28 <Port_schm_read_msr>
    d804:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d806:	9b00      	ldr	r3, [sp, #0]
    d808:	f003 0301 	and.w	r3, r3, #1
    d80c:	2b00      	cmp	r3, #0
    d80e:	d100      	bne.n	d812 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d810:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    d812:	490a      	ldr	r1, [pc, #40]	; (d83c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    d814:	9b01      	ldr	r3, [sp, #4]
    d816:	9a00      	ldr	r2, [sp, #0]
    d818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    d81c:	4a06      	ldr	r2, [pc, #24]	; (d838 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    d81e:	9b01      	ldr	r3, [sp, #4]
    d820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d824:	1c5a      	adds	r2, r3, #1
    d826:	4904      	ldr	r1, [pc, #16]	; (d838 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    d828:	9b01      	ldr	r3, [sp, #4]
    d82a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d82e:	bf00      	nop
    d830:	b003      	add	sp, #12
    d832:	f85d fb04 	ldr.w	pc, [sp], #4
    d836:	bf00      	nop
    d838:	1fff9118 	.word	0x1fff9118
    d83c:	1fff9114 	.word	0x1fff9114

0000d840 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    d840:	b500      	push	{lr}
    d842:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d844:	f7f3 f9c0 	bl	bc8 <Sys_GetCoreID>
    d848:	4603      	mov	r3, r0
    d84a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    d84c:	4a0d      	ldr	r2, [pc, #52]	; (d884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    d84e:	9b01      	ldr	r3, [sp, #4]
    d850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d854:	1e5a      	subs	r2, r3, #1
    d856:	490b      	ldr	r1, [pc, #44]	; (d884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    d858:	9b01      	ldr	r3, [sp, #4]
    d85a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    d85e:	4a0a      	ldr	r2, [pc, #40]	; (d888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    d860:	9b01      	ldr	r3, [sp, #4]
    d862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d866:	f003 0301 	and.w	r3, r3, #1
    d86a:	2b00      	cmp	r3, #0
    d86c:	d106      	bne.n	d87c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    d86e:	4a05      	ldr	r2, [pc, #20]	; (d884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    d870:	9b01      	ldr	r3, [sp, #4]
    d872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d876:	2b00      	cmp	r3, #0
    d878:	d100      	bne.n	d87c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d87a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d87c:	bf00      	nop
    d87e:	b003      	add	sp, #12
    d880:	f85d fb04 	ldr.w	pc, [sp], #4
    d884:	1fff9118 	.word	0x1fff9118
    d888:	1fff9114 	.word	0x1fff9114

0000d88c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    d88c:	b500      	push	{lr}
    d88e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d890:	f7f3 f99a 	bl	bc8 <Sys_GetCoreID>
    d894:	4603      	mov	r3, r0
    d896:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    d898:	4a10      	ldr	r2, [pc, #64]	; (d8dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    d89a:	9b01      	ldr	r3, [sp, #4]
    d89c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8a0:	2b00      	cmp	r3, #0
    d8a2:	d10d      	bne.n	d8c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d8a4:	f7f3 f8c0 	bl	a28 <Port_schm_read_msr>
    d8a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d8aa:	9b00      	ldr	r3, [sp, #0]
    d8ac:	f003 0301 	and.w	r3, r3, #1
    d8b0:	2b00      	cmp	r3, #0
    d8b2:	d100      	bne.n	d8b6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d8b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    d8b6:	490a      	ldr	r1, [pc, #40]	; (d8e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    d8b8:	9b01      	ldr	r3, [sp, #4]
    d8ba:	9a00      	ldr	r2, [sp, #0]
    d8bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    d8c0:	4a06      	ldr	r2, [pc, #24]	; (d8dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    d8c2:	9b01      	ldr	r3, [sp, #4]
    d8c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8c8:	1c5a      	adds	r2, r3, #1
    d8ca:	4904      	ldr	r1, [pc, #16]	; (d8dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    d8cc:	9b01      	ldr	r3, [sp, #4]
    d8ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d8d2:	bf00      	nop
    d8d4:	b003      	add	sp, #12
    d8d6:	f85d fb04 	ldr.w	pc, [sp], #4
    d8da:	bf00      	nop
    d8dc:	1fff9120 	.word	0x1fff9120
    d8e0:	1fff911c 	.word	0x1fff911c

0000d8e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    d8e4:	b500      	push	{lr}
    d8e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d8e8:	f7f3 f96e 	bl	bc8 <Sys_GetCoreID>
    d8ec:	4603      	mov	r3, r0
    d8ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    d8f0:	4a0d      	ldr	r2, [pc, #52]	; (d928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    d8f2:	9b01      	ldr	r3, [sp, #4]
    d8f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8f8:	1e5a      	subs	r2, r3, #1
    d8fa:	490b      	ldr	r1, [pc, #44]	; (d928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    d8fc:	9b01      	ldr	r3, [sp, #4]
    d8fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    d902:	4a0a      	ldr	r2, [pc, #40]	; (d92c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    d904:	9b01      	ldr	r3, [sp, #4]
    d906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d90a:	f003 0301 	and.w	r3, r3, #1
    d90e:	2b00      	cmp	r3, #0
    d910:	d106      	bne.n	d920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    d912:	4a05      	ldr	r2, [pc, #20]	; (d928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    d914:	9b01      	ldr	r3, [sp, #4]
    d916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d91a:	2b00      	cmp	r3, #0
    d91c:	d100      	bne.n	d920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d91e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d920:	bf00      	nop
    d922:	b003      	add	sp, #12
    d924:	f85d fb04 	ldr.w	pc, [sp], #4
    d928:	1fff9120 	.word	0x1fff9120
    d92c:	1fff911c 	.word	0x1fff911c

0000d930 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    d930:	b500      	push	{lr}
    d932:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d934:	f7f3 f948 	bl	bc8 <Sys_GetCoreID>
    d938:	4603      	mov	r3, r0
    d93a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    d93c:	4a10      	ldr	r2, [pc, #64]	; (d980 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    d93e:	9b01      	ldr	r3, [sp, #4]
    d940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d944:	2b00      	cmp	r3, #0
    d946:	d10d      	bne.n	d964 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d948:	f7f3 f86e 	bl	a28 <Port_schm_read_msr>
    d94c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d94e:	9b00      	ldr	r3, [sp, #0]
    d950:	f003 0301 	and.w	r3, r3, #1
    d954:	2b00      	cmp	r3, #0
    d956:	d100      	bne.n	d95a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d958:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    d95a:	490a      	ldr	r1, [pc, #40]	; (d984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    d95c:	9b01      	ldr	r3, [sp, #4]
    d95e:	9a00      	ldr	r2, [sp, #0]
    d960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    d964:	4a06      	ldr	r2, [pc, #24]	; (d980 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    d966:	9b01      	ldr	r3, [sp, #4]
    d968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d96c:	1c5a      	adds	r2, r3, #1
    d96e:	4904      	ldr	r1, [pc, #16]	; (d980 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    d970:	9b01      	ldr	r3, [sp, #4]
    d972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d976:	bf00      	nop
    d978:	b003      	add	sp, #12
    d97a:	f85d fb04 	ldr.w	pc, [sp], #4
    d97e:	bf00      	nop
    d980:	1fff9128 	.word	0x1fff9128
    d984:	1fff9124 	.word	0x1fff9124

0000d988 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    d988:	b500      	push	{lr}
    d98a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d98c:	f7f3 f91c 	bl	bc8 <Sys_GetCoreID>
    d990:	4603      	mov	r3, r0
    d992:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    d994:	4a0d      	ldr	r2, [pc, #52]	; (d9cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    d996:	9b01      	ldr	r3, [sp, #4]
    d998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d99c:	1e5a      	subs	r2, r3, #1
    d99e:	490b      	ldr	r1, [pc, #44]	; (d9cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    d9a0:	9b01      	ldr	r3, [sp, #4]
    d9a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    d9a6:	4a0a      	ldr	r2, [pc, #40]	; (d9d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    d9a8:	9b01      	ldr	r3, [sp, #4]
    d9aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9ae:	f003 0301 	and.w	r3, r3, #1
    d9b2:	2b00      	cmp	r3, #0
    d9b4:	d106      	bne.n	d9c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    d9b6:	4a05      	ldr	r2, [pc, #20]	; (d9cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    d9b8:	9b01      	ldr	r3, [sp, #4]
    d9ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9be:	2b00      	cmp	r3, #0
    d9c0:	d100      	bne.n	d9c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d9c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d9c4:	bf00      	nop
    d9c6:	b003      	add	sp, #12
    d9c8:	f85d fb04 	ldr.w	pc, [sp], #4
    d9cc:	1fff9128 	.word	0x1fff9128
    d9d0:	1fff9124 	.word	0x1fff9124

0000d9d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    d9d4:	b500      	push	{lr}
    d9d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d9d8:	f7f3 f8f6 	bl	bc8 <Sys_GetCoreID>
    d9dc:	4603      	mov	r3, r0
    d9de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    d9e0:	4a10      	ldr	r2, [pc, #64]	; (da24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    d9e2:	9b01      	ldr	r3, [sp, #4]
    d9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9e8:	2b00      	cmp	r3, #0
    d9ea:	d10d      	bne.n	da08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d9ec:	f7f3 f81c 	bl	a28 <Port_schm_read_msr>
    d9f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d9f2:	9b00      	ldr	r3, [sp, #0]
    d9f4:	f003 0301 	and.w	r3, r3, #1
    d9f8:	2b00      	cmp	r3, #0
    d9fa:	d100      	bne.n	d9fe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d9fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    d9fe:	490a      	ldr	r1, [pc, #40]	; (da28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    da00:	9b01      	ldr	r3, [sp, #4]
    da02:	9a00      	ldr	r2, [sp, #0]
    da04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    da08:	4a06      	ldr	r2, [pc, #24]	; (da24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    da0a:	9b01      	ldr	r3, [sp, #4]
    da0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da10:	1c5a      	adds	r2, r3, #1
    da12:	4904      	ldr	r1, [pc, #16]	; (da24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    da14:	9b01      	ldr	r3, [sp, #4]
    da16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    da1a:	bf00      	nop
    da1c:	b003      	add	sp, #12
    da1e:	f85d fb04 	ldr.w	pc, [sp], #4
    da22:	bf00      	nop
    da24:	1fff9130 	.word	0x1fff9130
    da28:	1fff912c 	.word	0x1fff912c

0000da2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    da2c:	b500      	push	{lr}
    da2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da30:	f7f3 f8ca 	bl	bc8 <Sys_GetCoreID>
    da34:	4603      	mov	r3, r0
    da36:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    da38:	4a0d      	ldr	r2, [pc, #52]	; (da70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    da3a:	9b01      	ldr	r3, [sp, #4]
    da3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da40:	1e5a      	subs	r2, r3, #1
    da42:	490b      	ldr	r1, [pc, #44]	; (da70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    da44:	9b01      	ldr	r3, [sp, #4]
    da46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    da4a:	4a0a      	ldr	r2, [pc, #40]	; (da74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    da4c:	9b01      	ldr	r3, [sp, #4]
    da4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da52:	f003 0301 	and.w	r3, r3, #1
    da56:	2b00      	cmp	r3, #0
    da58:	d106      	bne.n	da68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    da5a:	4a05      	ldr	r2, [pc, #20]	; (da70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    da5c:	9b01      	ldr	r3, [sp, #4]
    da5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da62:	2b00      	cmp	r3, #0
    da64:	d100      	bne.n	da68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    da66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    da68:	bf00      	nop
    da6a:	b003      	add	sp, #12
    da6c:	f85d fb04 	ldr.w	pc, [sp], #4
    da70:	1fff9130 	.word	0x1fff9130
    da74:	1fff912c 	.word	0x1fff912c

0000da78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    da78:	b500      	push	{lr}
    da7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da7c:	f7f3 f8a4 	bl	bc8 <Sys_GetCoreID>
    da80:	4603      	mov	r3, r0
    da82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    da84:	4a10      	ldr	r2, [pc, #64]	; (dac8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    da86:	9b01      	ldr	r3, [sp, #4]
    da88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da8c:	2b00      	cmp	r3, #0
    da8e:	d10d      	bne.n	daac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    da90:	f7f2 ffca 	bl	a28 <Port_schm_read_msr>
    da94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    da96:	9b00      	ldr	r3, [sp, #0]
    da98:	f003 0301 	and.w	r3, r3, #1
    da9c:	2b00      	cmp	r3, #0
    da9e:	d100      	bne.n	daa2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    daa0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    daa2:	490a      	ldr	r1, [pc, #40]	; (dacc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    daa4:	9b01      	ldr	r3, [sp, #4]
    daa6:	9a00      	ldr	r2, [sp, #0]
    daa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    daac:	4a06      	ldr	r2, [pc, #24]	; (dac8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    daae:	9b01      	ldr	r3, [sp, #4]
    dab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dab4:	1c5a      	adds	r2, r3, #1
    dab6:	4904      	ldr	r1, [pc, #16]	; (dac8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    dab8:	9b01      	ldr	r3, [sp, #4]
    daba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dabe:	bf00      	nop
    dac0:	b003      	add	sp, #12
    dac2:	f85d fb04 	ldr.w	pc, [sp], #4
    dac6:	bf00      	nop
    dac8:	1fff9138 	.word	0x1fff9138
    dacc:	1fff9134 	.word	0x1fff9134

0000dad0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    dad0:	b500      	push	{lr}
    dad2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dad4:	f7f3 f878 	bl	bc8 <Sys_GetCoreID>
    dad8:	4603      	mov	r3, r0
    dada:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    dadc:	4a0d      	ldr	r2, [pc, #52]	; (db14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    dade:	9b01      	ldr	r3, [sp, #4]
    dae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dae4:	1e5a      	subs	r2, r3, #1
    dae6:	490b      	ldr	r1, [pc, #44]	; (db14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    dae8:	9b01      	ldr	r3, [sp, #4]
    daea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    daee:	4a0a      	ldr	r2, [pc, #40]	; (db18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    daf0:	9b01      	ldr	r3, [sp, #4]
    daf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daf6:	f003 0301 	and.w	r3, r3, #1
    dafa:	2b00      	cmp	r3, #0
    dafc:	d106      	bne.n	db0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    dafe:	4a05      	ldr	r2, [pc, #20]	; (db14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    db00:	9b01      	ldr	r3, [sp, #4]
    db02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db06:	2b00      	cmp	r3, #0
    db08:	d100      	bne.n	db0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    db0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    db0c:	bf00      	nop
    db0e:	b003      	add	sp, #12
    db10:	f85d fb04 	ldr.w	pc, [sp], #4
    db14:	1fff9138 	.word	0x1fff9138
    db18:	1fff9134 	.word	0x1fff9134

0000db1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    db1c:	b500      	push	{lr}
    db1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db20:	f7f3 f852 	bl	bc8 <Sys_GetCoreID>
    db24:	4603      	mov	r3, r0
    db26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    db28:	4a10      	ldr	r2, [pc, #64]	; (db6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    db2a:	9b01      	ldr	r3, [sp, #4]
    db2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db30:	2b00      	cmp	r3, #0
    db32:	d10d      	bne.n	db50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    db34:	f7f2 ff78 	bl	a28 <Port_schm_read_msr>
    db38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    db3a:	9b00      	ldr	r3, [sp, #0]
    db3c:	f003 0301 	and.w	r3, r3, #1
    db40:	2b00      	cmp	r3, #0
    db42:	d100      	bne.n	db46 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    db44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    db46:	490a      	ldr	r1, [pc, #40]	; (db70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    db48:	9b01      	ldr	r3, [sp, #4]
    db4a:	9a00      	ldr	r2, [sp, #0]
    db4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    db50:	4a06      	ldr	r2, [pc, #24]	; (db6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    db52:	9b01      	ldr	r3, [sp, #4]
    db54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db58:	1c5a      	adds	r2, r3, #1
    db5a:	4904      	ldr	r1, [pc, #16]	; (db6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    db5c:	9b01      	ldr	r3, [sp, #4]
    db5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    db62:	bf00      	nop
    db64:	b003      	add	sp, #12
    db66:	f85d fb04 	ldr.w	pc, [sp], #4
    db6a:	bf00      	nop
    db6c:	1fff9140 	.word	0x1fff9140
    db70:	1fff913c 	.word	0x1fff913c

0000db74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    db74:	b500      	push	{lr}
    db76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db78:	f7f3 f826 	bl	bc8 <Sys_GetCoreID>
    db7c:	4603      	mov	r3, r0
    db7e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    db80:	4a0d      	ldr	r2, [pc, #52]	; (dbb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    db82:	9b01      	ldr	r3, [sp, #4]
    db84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db88:	1e5a      	subs	r2, r3, #1
    db8a:	490b      	ldr	r1, [pc, #44]	; (dbb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    db8c:	9b01      	ldr	r3, [sp, #4]
    db8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    db92:	4a0a      	ldr	r2, [pc, #40]	; (dbbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    db94:	9b01      	ldr	r3, [sp, #4]
    db96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db9a:	f003 0301 	and.w	r3, r3, #1
    db9e:	2b00      	cmp	r3, #0
    dba0:	d106      	bne.n	dbb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    dba2:	4a05      	ldr	r2, [pc, #20]	; (dbb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    dba4:	9b01      	ldr	r3, [sp, #4]
    dba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbaa:	2b00      	cmp	r3, #0
    dbac:	d100      	bne.n	dbb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dbae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dbb0:	bf00      	nop
    dbb2:	b003      	add	sp, #12
    dbb4:	f85d fb04 	ldr.w	pc, [sp], #4
    dbb8:	1fff9140 	.word	0x1fff9140
    dbbc:	1fff913c 	.word	0x1fff913c

0000dbc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    dbc0:	b500      	push	{lr}
    dbc2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dbc4:	f7f3 f800 	bl	bc8 <Sys_GetCoreID>
    dbc8:	4603      	mov	r3, r0
    dbca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    dbcc:	4a10      	ldr	r2, [pc, #64]	; (dc10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    dbce:	9b01      	ldr	r3, [sp, #4]
    dbd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbd4:	2b00      	cmp	r3, #0
    dbd6:	d10d      	bne.n	dbf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dbd8:	f7f2 ff26 	bl	a28 <Port_schm_read_msr>
    dbdc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dbde:	9b00      	ldr	r3, [sp, #0]
    dbe0:	f003 0301 	and.w	r3, r3, #1
    dbe4:	2b00      	cmp	r3, #0
    dbe6:	d100      	bne.n	dbea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dbe8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    dbea:	490a      	ldr	r1, [pc, #40]	; (dc14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    dbec:	9b01      	ldr	r3, [sp, #4]
    dbee:	9a00      	ldr	r2, [sp, #0]
    dbf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    dbf4:	4a06      	ldr	r2, [pc, #24]	; (dc10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    dbf6:	9b01      	ldr	r3, [sp, #4]
    dbf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbfc:	1c5a      	adds	r2, r3, #1
    dbfe:	4904      	ldr	r1, [pc, #16]	; (dc10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    dc00:	9b01      	ldr	r3, [sp, #4]
    dc02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dc06:	bf00      	nop
    dc08:	b003      	add	sp, #12
    dc0a:	f85d fb04 	ldr.w	pc, [sp], #4
    dc0e:	bf00      	nop
    dc10:	1fff9148 	.word	0x1fff9148
    dc14:	1fff9144 	.word	0x1fff9144

0000dc18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    dc18:	b500      	push	{lr}
    dc1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc1c:	f7f2 ffd4 	bl	bc8 <Sys_GetCoreID>
    dc20:	4603      	mov	r3, r0
    dc22:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    dc24:	4a0d      	ldr	r2, [pc, #52]	; (dc5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    dc26:	9b01      	ldr	r3, [sp, #4]
    dc28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc2c:	1e5a      	subs	r2, r3, #1
    dc2e:	490b      	ldr	r1, [pc, #44]	; (dc5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    dc30:	9b01      	ldr	r3, [sp, #4]
    dc32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    dc36:	4a0a      	ldr	r2, [pc, #40]	; (dc60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    dc38:	9b01      	ldr	r3, [sp, #4]
    dc3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc3e:	f003 0301 	and.w	r3, r3, #1
    dc42:	2b00      	cmp	r3, #0
    dc44:	d106      	bne.n	dc54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    dc46:	4a05      	ldr	r2, [pc, #20]	; (dc5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    dc48:	9b01      	ldr	r3, [sp, #4]
    dc4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc4e:	2b00      	cmp	r3, #0
    dc50:	d100      	bne.n	dc54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dc52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dc54:	bf00      	nop
    dc56:	b003      	add	sp, #12
    dc58:	f85d fb04 	ldr.w	pc, [sp], #4
    dc5c:	1fff9148 	.word	0x1fff9148
    dc60:	1fff9144 	.word	0x1fff9144

0000dc64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    dc64:	b500      	push	{lr}
    dc66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc68:	f7f2 ffae 	bl	bc8 <Sys_GetCoreID>
    dc6c:	4603      	mov	r3, r0
    dc6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    dc70:	4a10      	ldr	r2, [pc, #64]	; (dcb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    dc72:	9b01      	ldr	r3, [sp, #4]
    dc74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc78:	2b00      	cmp	r3, #0
    dc7a:	d10d      	bne.n	dc98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dc7c:	f7f2 fed4 	bl	a28 <Port_schm_read_msr>
    dc80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dc82:	9b00      	ldr	r3, [sp, #0]
    dc84:	f003 0301 	and.w	r3, r3, #1
    dc88:	2b00      	cmp	r3, #0
    dc8a:	d100      	bne.n	dc8e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dc8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    dc8e:	490a      	ldr	r1, [pc, #40]	; (dcb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    dc90:	9b01      	ldr	r3, [sp, #4]
    dc92:	9a00      	ldr	r2, [sp, #0]
    dc94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    dc98:	4a06      	ldr	r2, [pc, #24]	; (dcb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    dc9a:	9b01      	ldr	r3, [sp, #4]
    dc9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dca0:	1c5a      	adds	r2, r3, #1
    dca2:	4904      	ldr	r1, [pc, #16]	; (dcb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    dca4:	9b01      	ldr	r3, [sp, #4]
    dca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dcaa:	bf00      	nop
    dcac:	b003      	add	sp, #12
    dcae:	f85d fb04 	ldr.w	pc, [sp], #4
    dcb2:	bf00      	nop
    dcb4:	1fff9150 	.word	0x1fff9150
    dcb8:	1fff914c 	.word	0x1fff914c

0000dcbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    dcbc:	b500      	push	{lr}
    dcbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dcc0:	f7f2 ff82 	bl	bc8 <Sys_GetCoreID>
    dcc4:	4603      	mov	r3, r0
    dcc6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    dcc8:	4a0d      	ldr	r2, [pc, #52]	; (dd00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    dcca:	9b01      	ldr	r3, [sp, #4]
    dccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcd0:	1e5a      	subs	r2, r3, #1
    dcd2:	490b      	ldr	r1, [pc, #44]	; (dd00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    dcd4:	9b01      	ldr	r3, [sp, #4]
    dcd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    dcda:	4a0a      	ldr	r2, [pc, #40]	; (dd04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    dcdc:	9b01      	ldr	r3, [sp, #4]
    dcde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dce2:	f003 0301 	and.w	r3, r3, #1
    dce6:	2b00      	cmp	r3, #0
    dce8:	d106      	bne.n	dcf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    dcea:	4a05      	ldr	r2, [pc, #20]	; (dd00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    dcec:	9b01      	ldr	r3, [sp, #4]
    dcee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcf2:	2b00      	cmp	r3, #0
    dcf4:	d100      	bne.n	dcf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dcf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dcf8:	bf00      	nop
    dcfa:	b003      	add	sp, #12
    dcfc:	f85d fb04 	ldr.w	pc, [sp], #4
    dd00:	1fff9150 	.word	0x1fff9150
    dd04:	1fff914c 	.word	0x1fff914c

0000dd08 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    dd08:	bf00      	nop
    dd0a:	4770      	bx	lr

0000dd0c <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    dd0c:	b510      	push	{r4, lr}
    dd0e:	b084      	sub	sp, #16
    dd10:	4604      	mov	r4, r0
    dd12:	4608      	mov	r0, r1
    dd14:	4611      	mov	r1, r2
    dd16:	461a      	mov	r2, r3
    dd18:	4623      	mov	r3, r4
    dd1a:	f8ad 3006 	strh.w	r3, [sp, #6]
    dd1e:	4603      	mov	r3, r0
    dd20:	f88d 3005 	strb.w	r3, [sp, #5]
    dd24:	460b      	mov	r3, r1
    dd26:	f88d 3004 	strb.w	r3, [sp, #4]
    dd2a:	4613      	mov	r3, r2
    dd2c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd30:	f7f2 ff4a 	bl	bc8 <Sys_GetCoreID>
    dd34:	4603      	mov	r3, r0
    dd36:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    dd38:	490d      	ldr	r1, [pc, #52]	; (dd70 <Det_ReportError+0x64>)
    dd3a:	9b03      	ldr	r3, [sp, #12]
    dd3c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    dd40:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    dd44:	4a0b      	ldr	r2, [pc, #44]	; (dd74 <Det_ReportError+0x68>)
    dd46:	9b03      	ldr	r3, [sp, #12]
    dd48:	4413      	add	r3, r2
    dd4a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    dd4e:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    dd50:	4a09      	ldr	r2, [pc, #36]	; (dd78 <Det_ReportError+0x6c>)
    dd52:	9b03      	ldr	r3, [sp, #12]
    dd54:	4413      	add	r3, r2
    dd56:	f89d 2004 	ldrb.w	r2, [sp, #4]
    dd5a:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    dd5c:	4a07      	ldr	r2, [pc, #28]	; (dd7c <Det_ReportError+0x70>)
    dd5e:	9b03      	ldr	r3, [sp, #12]
    dd60:	4413      	add	r3, r2
    dd62:	f89d 2003 	ldrb.w	r2, [sp, #3]
    dd66:	701a      	strb	r2, [r3, #0]

    return E_OK;
    dd68:	2300      	movs	r3, #0
}
    dd6a:	4618      	mov	r0, r3
    dd6c:	b004      	add	sp, #16
    dd6e:	bd10      	pop	{r4, pc}
    dd70:	1fff917c 	.word	0x1fff917c
    dd74:	1fff9154 	.word	0x1fff9154
    dd78:	1fff9158 	.word	0x1fff9158
    dd7c:	1fff915c 	.word	0x1fff915c

0000dd80 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
    dd80:	b510      	push	{r4, lr}
    dd82:	b084      	sub	sp, #16
    dd84:	4604      	mov	r4, r0
    dd86:	4608      	mov	r0, r1
    dd88:	4611      	mov	r1, r2
    dd8a:	461a      	mov	r2, r3
    dd8c:	4623      	mov	r3, r4
    dd8e:	f8ad 3006 	strh.w	r3, [sp, #6]
    dd92:	4603      	mov	r3, r0
    dd94:	f88d 3005 	strb.w	r3, [sp, #5]
    dd98:	460b      	mov	r3, r1
    dd9a:	f88d 3004 	strb.w	r3, [sp, #4]
    dd9e:	4613      	mov	r3, r2
    dda0:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dda4:	f7f2 ff10 	bl	bc8 <Sys_GetCoreID>
    dda8:	4603      	mov	r3, r0
    ddaa:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
    ddac:	490d      	ldr	r1, [pc, #52]	; (dde4 <Det_ReportRuntimeError+0x64>)
    ddae:	9b03      	ldr	r3, [sp, #12]
    ddb0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ddb4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
    ddb8:	4a0b      	ldr	r2, [pc, #44]	; (dde8 <Det_ReportRuntimeError+0x68>)
    ddba:	9b03      	ldr	r3, [sp, #12]
    ddbc:	4413      	add	r3, r2
    ddbe:	f89d 2005 	ldrb.w	r2, [sp, #5]
    ddc2:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
    ddc4:	4a09      	ldr	r2, [pc, #36]	; (ddec <Det_ReportRuntimeError+0x6c>)
    ddc6:	9b03      	ldr	r3, [sp, #12]
    ddc8:	4413      	add	r3, r2
    ddca:	f89d 2004 	ldrb.w	r2, [sp, #4]
    ddce:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
    ddd0:	4a07      	ldr	r2, [pc, #28]	; (ddf0 <Det_ReportRuntimeError+0x70>)
    ddd2:	9b03      	ldr	r3, [sp, #12]
    ddd4:	4413      	add	r3, r2
    ddd6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ddda:	701a      	strb	r2, [r3, #0]

    return E_OK;
    dddc:	2300      	movs	r3, #0
}
    ddde:	4618      	mov	r0, r3
    dde0:	b004      	add	sp, #16
    dde2:	bd10      	pop	{r4, pc}
    dde4:	1fff9180 	.word	0x1fff9180
    dde8:	1fff9160 	.word	0x1fff9160
    ddec:	1fff9164 	.word	0x1fff9164
    ddf0:	1fff9168 	.word	0x1fff9168

0000ddf4 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
    ddf4:	b510      	push	{r4, lr}
    ddf6:	b084      	sub	sp, #16
    ddf8:	4604      	mov	r4, r0
    ddfa:	4608      	mov	r0, r1
    ddfc:	4611      	mov	r1, r2
    ddfe:	461a      	mov	r2, r3
    de00:	4623      	mov	r3, r4
    de02:	f8ad 3006 	strh.w	r3, [sp, #6]
    de06:	4603      	mov	r3, r0
    de08:	f88d 3005 	strb.w	r3, [sp, #5]
    de0c:	460b      	mov	r3, r1
    de0e:	f88d 3004 	strb.w	r3, [sp, #4]
    de12:	4613      	mov	r3, r2
    de14:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de18:	f7f2 fed6 	bl	bc8 <Sys_GetCoreID>
    de1c:	4603      	mov	r3, r0
    de1e:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
    de20:	490d      	ldr	r1, [pc, #52]	; (de58 <Det_ReportTransientFault+0x64>)
    de22:	9b03      	ldr	r3, [sp, #12]
    de24:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    de28:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
    de2c:	4a0b      	ldr	r2, [pc, #44]	; (de5c <Det_ReportTransientFault+0x68>)
    de2e:	9b03      	ldr	r3, [sp, #12]
    de30:	4413      	add	r3, r2
    de32:	f89d 2005 	ldrb.w	r2, [sp, #5]
    de36:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
    de38:	4a09      	ldr	r2, [pc, #36]	; (de60 <Det_ReportTransientFault+0x6c>)
    de3a:	9b03      	ldr	r3, [sp, #12]
    de3c:	4413      	add	r3, r2
    de3e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    de42:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
    de44:	4a07      	ldr	r2, [pc, #28]	; (de64 <Det_ReportTransientFault+0x70>)
    de46:	9b03      	ldr	r3, [sp, #12]
    de48:	4413      	add	r3, r2
    de4a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    de4e:	701a      	strb	r2, [r3, #0]

    return E_OK;
    de50:	2300      	movs	r3, #0
}
    de52:	4618      	mov	r0, r3
    de54:	b004      	add	sp, #16
    de56:	bd10      	pop	{r4, pc}
    de58:	1fff9178 	.word	0x1fff9178
    de5c:	1fff916c 	.word	0x1fff916c
    de60:	1fff9170 	.word	0x1fff9170
    de64:	1fff9174 	.word	0x1fff9174

0000de68 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
    de68:	bf00      	nop
    de6a:	4770      	bx	lr

0000de6c <CanIf_Init>:
==================================================================================================*/
#define CANIF_START_SEC_CODE
#include "CanIf_MemMap.h"

void CanIf_Init(const CanIf_ConfigType * ConfigPtr)
{
    de6c:	b082      	sub	sp, #8
    de6e:	9001      	str	r0, [sp, #4]
    #if (STD_ON == CANIF_PRECOMPILE_SUPPORT)
    CanIf_ConfigPtr = &CanIf_Config;
    (void)ConfigPtr;
    #else
    CanIf_ConfigPtr = ConfigPtr;
    de70:	4a02      	ldr	r2, [pc, #8]	; (de7c <CanIf_Init+0x10>)
    de72:	9b01      	ldr	r3, [sp, #4]
    de74:	6013      	str	r3, [r2, #0]
    #endif
}
    de76:	bf00      	nop
    de78:	b002      	add	sp, #8
    de7a:	4770      	bx	lr
    de7c:	1fff9184 	.word	0x1fff9184

0000de80 <CanIf_Transmit>:
Std_ReturnType CanIf_Transmit
(
    PduIdType CanTxPduId,
    const PduInfoType * PduInfoPtr
)
{
    de80:	b500      	push	{lr}
    de82:	b08b      	sub	sp, #44	; 0x2c
    de84:	4603      	mov	r3, r0
    de86:	9100      	str	r1, [sp, #0]
    de88:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType RetVal = E_NOT_OK;
    de8c:	2301      	movs	r3, #1
    de8e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    Can_HwHandleType CanHth = 0U;
    de92:	2300      	movs	r3, #0
    de94:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    Can_PduType PduInfo;
    const CanIf_TxPduType * TxPduInfo = NULL_PTR;
    de98:	2300      	movs	r3, #0
    de9a:	9308      	str	r3, [sp, #32]
    uint8 CanIfControllerId = 0U;
    de9c:	2300      	movs	r3, #0
    de9e:	f88d 301f 	strb.w	r3, [sp, #31]
    const CanIf_CtrlPCConfigType * CanIfController = NULL_PTR;
    dea2:	2300      	movs	r3, #0
    dea4:	9306      	str	r3, [sp, #24]

    if (NULL_PTR != CanIf_ConfigPtr)
    dea6:	4b31      	ldr	r3, [pc, #196]	; (df6c <CanIf_Transmit+0xec>)
    dea8:	681b      	ldr	r3, [r3, #0]
    deaa:	2b00      	cmp	r3, #0
    deac:	d057      	beq.n	df5e <CanIf_Transmit+0xde>
    {
        if (CanTxPduId < (CanIf_ConfigPtr->NumTxPdu))
    deae:	4b2f      	ldr	r3, [pc, #188]	; (df6c <CanIf_Transmit+0xec>)
    deb0:	681b      	ldr	r3, [r3, #0]
    deb2:	785b      	ldrb	r3, [r3, #1]
    deb4:	b29b      	uxth	r3, r3
    deb6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    deba:	429a      	cmp	r2, r3
    debc:	d24f      	bcs.n	df5e <CanIf_Transmit+0xde>
        {
            TxPduInfo = &CanIf_ConfigPtr->CanIf_TxPduConfigPtr[CanTxPduId];
    debe:	4b2b      	ldr	r3, [pc, #172]	; (df6c <CanIf_Transmit+0xec>)
    dec0:	681b      	ldr	r3, [r3, #0]
    dec2:	68d9      	ldr	r1, [r3, #12]
    dec4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    dec8:	4613      	mov	r3, r2
    deca:	009b      	lsls	r3, r3, #2
    decc:	4413      	add	r3, r2
    dece:	009b      	lsls	r3, r3, #2
    ded0:	440b      	add	r3, r1
    ded2:	9308      	str	r3, [sp, #32]
            CanIfControllerId = TxPduInfo->CanIfCtrlId;
    ded4:	9b08      	ldr	r3, [sp, #32]
    ded6:	7b9b      	ldrb	r3, [r3, #14]
    ded8:	f88d 301f 	strb.w	r3, [sp, #31]
            CanIfController = &CanIf_PCConfig.CanIfCtrlConfigPtr[CanIfControllerId];
    dedc:	4b24      	ldr	r3, [pc, #144]	; (df70 <CanIf_Transmit+0xf0>)
    dede:	685a      	ldr	r2, [r3, #4]
    dee0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    dee4:	00db      	lsls	r3, r3, #3
    dee6:	4413      	add	r3, r2
    dee8:	9306      	str	r3, [sp, #24]

            CanHth = TxPduInfo->CanHth;
    deea:	9b08      	ldr	r3, [sp, #32]
    deec:	899b      	ldrh	r3, [r3, #12]
    deee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24

            PduInfo.id = TxPduInfo->CanId;
    def2:	9b08      	ldr	r3, [sp, #32]
    def4:	685b      	ldr	r3, [r3, #4]
    def6:	9303      	str	r3, [sp, #12]
            /* Convert Id by adding two most significant bits specify the frame type */
            switch (TxPduInfo->CanFrameType)
    def8:	9b08      	ldr	r3, [sp, #32]
    defa:	689b      	ldr	r3, [r3, #8]
    defc:	2b03      	cmp	r3, #3
    defe:	d010      	beq.n	df22 <CanIf_Transmit+0xa2>
    df00:	2b03      	cmp	r3, #3
    df02:	d813      	bhi.n	df2c <CanIf_Transmit+0xac>
    df04:	2b00      	cmp	r3, #0
    df06:	d002      	beq.n	df0e <CanIf_Transmit+0x8e>
    df08:	2b01      	cmp	r3, #1
    df0a:	d005      	beq.n	df18 <CanIf_Transmit+0x98>
                    PduInfo.id |= 0x40000000U;
                    break;
                }
                default:
                {
                    break;
    df0c:	e00e      	b.n	df2c <CanIf_Transmit+0xac>
                    PduInfo.id |= 0x80000000U;
    df0e:	9b03      	ldr	r3, [sp, #12]
    df10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    df14:	9303      	str	r3, [sp, #12]
                    break;
    df16:	e00a      	b.n	df2e <CanIf_Transmit+0xae>
                    PduInfo.id |= 0xC0000000U;
    df18:	9b03      	ldr	r3, [sp, #12]
    df1a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    df1e:	9303      	str	r3, [sp, #12]
                    break;
    df20:	e005      	b.n	df2e <CanIf_Transmit+0xae>
                    PduInfo.id |= 0x40000000U;
    df22:	9b03      	ldr	r3, [sp, #12]
    df24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    df28:	9303      	str	r3, [sp, #12]
                    break;
    df2a:	e000      	b.n	df2e <CanIf_Transmit+0xae>
                    break;
    df2c:	bf00      	nop
                }
            }
            
            PduInfo.length = (uint8)(PduInfoPtr->SduLength);
    df2e:	9b00      	ldr	r3, [sp, #0]
    df30:	689b      	ldr	r3, [r3, #8]
    df32:	b2db      	uxtb	r3, r3
    df34:	f88d 3012 	strb.w	r3, [sp, #18]
            PduInfo.sdu = PduInfoPtr->SduDataPtr;
    df38:	9b00      	ldr	r3, [sp, #0]
    df3a:	681b      	ldr	r3, [r3, #0]
    df3c:	9305      	str	r3, [sp, #20]
            PduInfo.swPduHandle = CanTxPduId;
    df3e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    df42:	f8ad 3010 	strh.w	r3, [sp, #16]

            RetVal = CanIfController->CanDrvConfigPtr->CanApi->CanWrite(CanHth, &PduInfo); 
    df46:	9b06      	ldr	r3, [sp, #24]
    df48:	685b      	ldr	r3, [r3, #4]
    df4a:	685b      	ldr	r3, [r3, #4]
    df4c:	681b      	ldr	r3, [r3, #0]
    df4e:	a903      	add	r1, sp, #12
    df50:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    df54:	4610      	mov	r0, r2
    df56:	4798      	blx	r3
    df58:	4603      	mov	r3, r0
    df5a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
    }
    return RetVal;
    df5e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    df62:	4618      	mov	r0, r3
    df64:	b00b      	add	sp, #44	; 0x2c
    df66:	f85d fb04 	ldr.w	pc, [sp], #4
    df6a:	bf00      	nop
    df6c:	1fff9184 	.word	0x1fff9184
    df70:	0000e978 	.word	0x0000e978

0000df74 <CanIf_TxConfirmation>:

void CanIf_TxConfirmation
(
    PduIdType CanTxPduId
)
{
    df74:	b500      	push	{lr}
    df76:	b085      	sub	sp, #20
    df78:	4603      	mov	r3, r0
    df7a:	f8ad 3006 	strh.w	r3, [sp, #6]
    PduIdType UserPduId;
    const CanIf_TxPduType * TxPduInfo = NULL_PTR;
    df7e:	2300      	movs	r3, #0
    df80:	9303      	str	r3, [sp, #12]

    if (NULL_PTR != CanIf_ConfigPtr)
    df82:	4b15      	ldr	r3, [pc, #84]	; (dfd8 <CanIf_TxConfirmation+0x64>)
    df84:	681b      	ldr	r3, [r3, #0]
    df86:	2b00      	cmp	r3, #0
    df88:	d021      	beq.n	dfce <CanIf_TxConfirmation+0x5a>
    {
        if (CanTxPduId < (CanIf_ConfigPtr->NumTxPdu))
    df8a:	4b13      	ldr	r3, [pc, #76]	; (dfd8 <CanIf_TxConfirmation+0x64>)
    df8c:	681b      	ldr	r3, [r3, #0]
    df8e:	785b      	ldrb	r3, [r3, #1]
    df90:	b29b      	uxth	r3, r3
    df92:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    df96:	429a      	cmp	r2, r3
    df98:	d219      	bcs.n	dfce <CanIf_TxConfirmation+0x5a>
        {
            TxPduInfo = &CanIf_ConfigPtr->CanIf_TxPduConfigPtr[CanTxPduId];
    df9a:	4b0f      	ldr	r3, [pc, #60]	; (dfd8 <CanIf_TxConfirmation+0x64>)
    df9c:	681b      	ldr	r3, [r3, #0]
    df9e:	68d9      	ldr	r1, [r3, #12]
    dfa0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    dfa4:	4613      	mov	r3, r2
    dfa6:	009b      	lsls	r3, r3, #2
    dfa8:	4413      	add	r3, r2
    dfaa:	009b      	lsls	r3, r3, #2
    dfac:	440b      	add	r3, r1
    dfae:	9303      	str	r3, [sp, #12]

            if (NULL_PTR != TxPduInfo->UserTxConfirmation)
    dfb0:	9b03      	ldr	r3, [sp, #12]
    dfb2:	691b      	ldr	r3, [r3, #16]
    dfb4:	2b00      	cmp	r3, #0
    dfb6:	d00a      	beq.n	dfce <CanIf_TxConfirmation+0x5a>
            {
                UserPduId = TxPduInfo->PduId;
    dfb8:	9b03      	ldr	r3, [sp, #12]
    dfba:	881b      	ldrh	r3, [r3, #0]
    dfbc:	f8ad 300a 	strh.w	r3, [sp, #10]
                TxPduInfo->UserTxConfirmation(UserPduId, E_OK);
    dfc0:	9b03      	ldr	r3, [sp, #12]
    dfc2:	691b      	ldr	r3, [r3, #16]
    dfc4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    dfc8:	2100      	movs	r1, #0
    dfca:	4610      	mov	r0, r2
    dfcc:	4798      	blx	r3
            }
        }
    }
}
    dfce:	bf00      	nop
    dfd0:	b005      	add	sp, #20
    dfd2:	f85d fb04 	ldr.w	pc, [sp], #4
    dfd6:	bf00      	nop
    dfd8:	1fff9184 	.word	0x1fff9184

0000dfdc <CanIf_RxIndication>:
void CanIf_RxIndication
(
    const Can_HwType * Mailbox,
    const PduInfoType * PduInfoPtr
)
{
    dfdc:	b500      	push	{lr}
    dfde:	b089      	sub	sp, #36	; 0x24
    dfe0:	9001      	str	r0, [sp, #4]
    dfe2:	9100      	str	r1, [sp, #0]
    PduIdType UserPduId = 0U;
    dfe4:	2300      	movs	r3, #0
    dfe6:	f8ad 301e 	strh.w	r3, [sp, #30]
    PduInfoType PduInfo;
    const CanIf_RxPduType * RxPduInfo = NULL_PTR;
    dfea:	2300      	movs	r3, #0
    dfec:	9306      	str	r3, [sp, #24]
    uint8 CanDrvId = 0U;
    dfee:	2300      	movs	r3, #0
    dff0:	f88d 3017 	strb.w	r3, [sp, #23]

    if (NULL_PTR != CanIf_ConfigPtr)
    dff4:	4b2c      	ldr	r3, [pc, #176]	; (e0a8 <CanIf_RxIndication+0xcc>)
    dff6:	681b      	ldr	r3, [r3, #0]
    dff8:	2b00      	cmp	r3, #0
    dffa:	d050      	beq.n	e09e <CanIf_RxIndication+0xc2>
    {
        if ((Mailbox->ControllerId) < (CanIf_PCConfig.NumOfCtrl))
    dffc:	9b01      	ldr	r3, [sp, #4]
    dffe:	799a      	ldrb	r2, [r3, #6]
    e000:	4b2a      	ldr	r3, [pc, #168]	; (e0ac <CanIf_RxIndication+0xd0>)
    e002:	781b      	ldrb	r3, [r3, #0]
    e004:	429a      	cmp	r2, r3
    e006:	d24a      	bcs.n	e09e <CanIf_RxIndication+0xc2>
        {
            if ((Mailbox->Hoh) < (CanIf_PCConfig.CanIfCtrlConfigPtr[Mailbox->ControllerId].CanDrvConfigPtr->NumCanHoh))
    e008:	9b01      	ldr	r3, [sp, #4]
    e00a:	889a      	ldrh	r2, [r3, #4]
    e00c:	4b27      	ldr	r3, [pc, #156]	; (e0ac <CanIf_RxIndication+0xd0>)
    e00e:	6859      	ldr	r1, [r3, #4]
    e010:	9b01      	ldr	r3, [sp, #4]
    e012:	799b      	ldrb	r3, [r3, #6]
    e014:	00db      	lsls	r3, r3, #3
    e016:	440b      	add	r3, r1
    e018:	685b      	ldr	r3, [r3, #4]
    e01a:	885b      	ldrh	r3, [r3, #2]
    e01c:	429a      	cmp	r2, r3
    e01e:	d23e      	bcs.n	e09e <CanIf_RxIndication+0xc2>
            {
                CanDrvId = CanIf_PCConfig.CanIfCtrlConfigPtr[Mailbox->ControllerId].CanDrvConfigPtr->CanDrvId;
    e020:	4b22      	ldr	r3, [pc, #136]	; (e0ac <CanIf_RxIndication+0xd0>)
    e022:	685a      	ldr	r2, [r3, #4]
    e024:	9b01      	ldr	r3, [sp, #4]
    e026:	799b      	ldrb	r3, [r3, #6]
    e028:	00db      	lsls	r3, r3, #3
    e02a:	4413      	add	r3, r2
    e02c:	685b      	ldr	r3, [r3, #4]
    e02e:	781b      	ldrb	r3, [r3, #0]
    e030:	f88d 3017 	strb.w	r3, [sp, #23]
                RxPduInfo = CanIf_ConfigPtr->CanDrvConfigPtr[CanDrvId]->HohToRxPduMappingPtr[Mailbox->Hoh];
    e034:	4b1c      	ldr	r3, [pc, #112]	; (e0a8 <CanIf_RxIndication+0xcc>)
    e036:	681b      	ldr	r3, [r3, #0]
    e038:	685a      	ldr	r2, [r3, #4]
    e03a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e03e:	009b      	lsls	r3, r3, #2
    e040:	4413      	add	r3, r2
    e042:	681b      	ldr	r3, [r3, #0]
    e044:	681a      	ldr	r2, [r3, #0]
    e046:	9b01      	ldr	r3, [sp, #4]
    e048:	889b      	ldrh	r3, [r3, #4]
    e04a:	009b      	lsls	r3, r3, #2
    e04c:	4413      	add	r3, r2
    e04e:	681b      	ldr	r3, [r3, #0]
    e050:	9306      	str	r3, [sp, #24]
                
                /* Will discard the Can HOH if it was not referred by any CanIf RxPDU */
                if (NULL_PTR != RxPduInfo)
    e052:	9b06      	ldr	r3, [sp, #24]
    e054:	2b00      	cmp	r3, #0
    e056:	d022      	beq.n	e09e <CanIf_RxIndication+0xc2>
                {
                    if (NULL_PTR != RxPduInfo->UserRxIndication)
    e058:	9b06      	ldr	r3, [sp, #24]
    e05a:	689b      	ldr	r3, [r3, #8]
    e05c:	2b00      	cmp	r3, #0
    e05e:	d01e      	beq.n	e09e <CanIf_RxIndication+0xc2>
                    {
                        UserPduId = RxPduInfo->PduId;
    e060:	9b06      	ldr	r3, [sp, #24]
    e062:	881b      	ldrh	r3, [r3, #0]
    e064:	f8ad 301e 	strh.w	r3, [sp, #30]
                        if ((TRUE == RxPduInfo->PduLengthCheck) && (PduInfoPtr->SduLength > (RxPduInfo->PduLength)))
    e068:	9b06      	ldr	r3, [sp, #24]
    e06a:	789b      	ldrb	r3, [r3, #2]
    e06c:	2b00      	cmp	r3, #0
    e06e:	d009      	beq.n	e084 <CanIf_RxIndication+0xa8>
    e070:	9b00      	ldr	r3, [sp, #0]
    e072:	689b      	ldr	r3, [r3, #8]
    e074:	9a06      	ldr	r2, [sp, #24]
    e076:	8892      	ldrh	r2, [r2, #4]
    e078:	4293      	cmp	r3, r2
    e07a:	d903      	bls.n	e084 <CanIf_RxIndication+0xa8>
                        {
                            PduInfo.SduLength = RxPduInfo->PduLength; /* Truncates exceeded data as configured on GUI */
    e07c:	9b06      	ldr	r3, [sp, #24]
    e07e:	889b      	ldrh	r3, [r3, #4]
    e080:	9304      	str	r3, [sp, #16]
    e082:	e002      	b.n	e08a <CanIf_RxIndication+0xae>
                        }
                        else
                        {
                            PduInfo.SduLength = PduInfoPtr->SduLength;
    e084:	9b00      	ldr	r3, [sp, #0]
    e086:	689b      	ldr	r3, [r3, #8]
    e088:	9304      	str	r3, [sp, #16]
                        }
                        PduInfo.SduDataPtr = PduInfoPtr->SduDataPtr;
    e08a:	9b00      	ldr	r3, [sp, #0]
    e08c:	681b      	ldr	r3, [r3, #0]
    e08e:	9302      	str	r3, [sp, #8]
                        RxPduInfo->UserRxIndication(UserPduId, &PduInfo);
    e090:	9b06      	ldr	r3, [sp, #24]
    e092:	689b      	ldr	r3, [r3, #8]
    e094:	a902      	add	r1, sp, #8
    e096:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    e09a:	4610      	mov	r0, r2
    e09c:	4798      	blx	r3
                    }
                }
            }
        }
    }
}
    e09e:	bf00      	nop
    e0a0:	b009      	add	sp, #36	; 0x24
    e0a2:	f85d fb04 	ldr.w	pc, [sp], #4
    e0a6:	bf00      	nop
    e0a8:	1fff9184 	.word	0x1fff9184
    e0ac:	0000e978 	.word	0x0000e978

0000e0b0 <CanIf_ControllerModeIndication>:
void CanIf_ControllerModeIndication
( 
    uint8 ControllerId, 
    Can_ControllerStateType ControllerMode 
)
{
    e0b0:	b082      	sub	sp, #8
    e0b2:	4603      	mov	r3, r0
    e0b4:	9100      	str	r1, [sp, #0]
    e0b6:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId; 
    (void)ControllerMode;
}
    e0ba:	bf00      	nop
    e0bc:	b002      	add	sp, #8
    e0be:	4770      	bx	lr

0000e0c0 <CanIf_ControllerBusOff>:
void CanIf_ControllerBusOff
(
    uint8 ControllerId
)
{
    e0c0:	b082      	sub	sp, #8
    e0c2:	4603      	mov	r3, r0
    e0c4:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
}
    e0c8:	bf00      	nop
    e0ca:	b002      	add	sp, #8
    e0cc:	4770      	bx	lr

0000e0ce <CanIf_SetControllerMode>:

Std_ReturnType CanIf_SetControllerMode( uint8 Controller, Can_ControllerStateType Transition )
{
    e0ce:	b082      	sub	sp, #8
    e0d0:	4603      	mov	r3, r0
    e0d2:	9100      	str	r1, [sp, #0]
    e0d4:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)Controller;
    (void)Transition;
}
    e0d8:	bf00      	nop
    e0da:	4618      	mov	r0, r3
    e0dc:	b002      	add	sp, #8
    e0de:	4770      	bx	lr

0000e0e0 <CanIf_DisableControllerInterrupts>:
void CanIf_DisableControllerInterrupts( uint8 Controller )
{
    e0e0:	b082      	sub	sp, #8
    e0e2:	4603      	mov	r3, r0
    e0e4:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)Controller;
}
    e0e8:	bf00      	nop
    e0ea:	b002      	add	sp, #8
    e0ec:	4770      	bx	lr

0000e0ee <CanIf_EnableControllerInterrupts>:
void CanIf_EnableControllerInterrupts(uint8 Controller)
{
    e0ee:	b082      	sub	sp, #8
    e0f0:	4603      	mov	r3, r0
    e0f2:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)Controller;
}
    e0f6:	bf00      	nop
    e0f8:	b002      	add	sp, #8
    e0fa:	4770      	bx	lr

0000e0fc <CanIf_GetControllerErrorState>:
Std_ReturnType CanIf_GetControllerErrorState( uint8 ControllerId, Can_ErrorStateType * ErrorStatePtr)
{
    e0fc:	b082      	sub	sp, #8
    e0fe:	4603      	mov	r3, r0
    e100:	9100      	str	r1, [sp, #0]
    e102:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
    (void)ErrorStatePtr;
}
    e106:	bf00      	nop
    e108:	4618      	mov	r0, r3
    e10a:	b002      	add	sp, #8
    e10c:	4770      	bx	lr

0000e10e <CanIf_GetControllerMode>:
Std_ReturnType CanIf_GetControllerMode( uint8 Controller, Can_ControllerStateType * ControllerModePtr )
{
    e10e:	b082      	sub	sp, #8
    e110:	4603      	mov	r3, r0
    e112:	9100      	str	r1, [sp, #0]
    e114:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)Controller;
    (void)ControllerModePtr;
}
    e118:	bf00      	nop
    e11a:	4618      	mov	r0, r3
    e11c:	b002      	add	sp, #8
    e11e:	4770      	bx	lr

0000e120 <CanIf_GetControllerRxErrorCounter>:
Std_ReturnType CanIf_GetControllerRxErrorCounter(uint8 ControllerId, uint8 * RxErrorCounterPtr)
{
    e120:	b082      	sub	sp, #8
    e122:	4603      	mov	r3, r0
    e124:	9100      	str	r1, [sp, #0]
    e126:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
    (void)RxErrorCounterPtr;
}
    e12a:	bf00      	nop
    e12c:	4618      	mov	r0, r3
    e12e:	b002      	add	sp, #8
    e130:	4770      	bx	lr

0000e132 <CanIf_GetControllerTxErrorCounter>:
Std_ReturnType CanIf_GetControllerTxErrorCounter( uint8 ControllerId, uint8 * TxErrorCounterPtr )
{
    e132:	b082      	sub	sp, #8
    e134:	4603      	mov	r3, r0
    e136:	9100      	str	r1, [sp, #0]
    e138:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
    (void)TxErrorCounterPtr;
}
    e13c:	bf00      	nop
    e13e:	4618      	mov	r0, r3
    e140:	b002      	add	sp, #8
    e142:	4770      	bx	lr

0000e144 <Clock_Ip_au8DividerCallbackIndex>:
    e144:	0c00 0e0d 0201 0603 0409 0a07 0805 000b     ................

0000e154 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000e164 <Clock_Ip_au8XoscCallbackIndex>:
    e164:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000e174 <Clock_Ip_au8IrcoscCallbackIndex>:
    e174:	0100 0302 0004 0000 0000 0000 0000 0000     ................

0000e184 <Clock_Ip_au8GateCallbackIndex>:
    e184:	0200 0601 0301 0104 0500 0000 0000 0000     ................

0000e194 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000e1a4 <Clock_Ip_au8PllCallbackIndex>:
    e1a4:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000e1b4 <Clock_Ip_au8SelectorCallbackIndex>:
    e1b4:	0800 0a09 0109 0302 0504 0706 0000 0000     ................

0000e1c4 <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000e1d4 <Clock_Ip_au8CmuCallbackIndex>:
	...

0000e1e4 <Clock_Ip_au8ClockFeatures>:
	...
    e1f4:	0000 0100 0000 0000 0000 0000 0002 0000     ................
    e204:	0000 0000 0300 0000 0000 0000 0000 0004     ................
    e214:	0000 0000 0000 0500 0000 0000 0000 0000     ................
    e224:	0006 0000 0000 0000 0100 0000 0000 0000     ................
    e234:	0000 0001 0000 0000 0000 0400 0000 0000     ................
    e244:	0000 0000 0005 0000 0001 0000 0401 0000     ................
    e254:	0200 0000 0100 0005 0000 0003 0000 0402     ................
    e264:	0000 0400 0000 0200 0005 0000 0005 0000     ................
    e274:	0403 0000 0600 0000 0300 0005 0000 0007     ................
    e284:	0000 0500 0000 0000 0000 0000 0006 0000     ................
	...
    e2c4:	0000 0005 0000 0000 0000 0600 0100 0000     ................
    e2d4:	0000 0000 0007 0003 0000 0000 0000 0000     ................
    e2e4:	0000 0000 0000 0006 0000 0000 0000 0700     ................
    e2f4:	0100 0000 0000 0000 0008 0003 0000 0000     ................
	...
    e30c:	0000 0009 0000 0000 0000 0a00 0100 0000     ................
    e31c:	0000 0000 000b 0003 0000 0000 0000 0000     ................
    e32c:	0000 0000 0000 000c 0000 0000 0000 0d00     ................
    e33c:	0100 0000 0000 0000 000e 0003 0000 0000     ................
    e34c:	0800 0000 0000 0000 0000 0009 0000 0000     ................
    e35c:	0000 0a00 0000 0000 0000 0000 000b 0000     ................
    e36c:	0000 0000 0b01 0000 0000 0000 0200 000b     ................
    e37c:	0000 0000 0000 0b03 0000 0000 0000 0000     ................
	...
    e394:	0400 0000 003b 003b 0000 0004 2700 2700     ....;.;......'.'
    e3a4:	0000 0100 0000 0000 0000 0000 0007 0000     ................
    e3b4:	7300 0000 0700 0000 0000 0032 0000 0009     .s........2.....
    e3c4:	0000 0200 0000 0700 0000 0000 0021 0000     ............!...
    e3d4:	0009 0000 0400 0000 0900 0000 0000 0003     ................
    e3e4:	0000 0007 0000 6100 0000 0700 0000 0000     .......a........
    e3f4:	0024 0000 0007 0000 2500 0000 0700 0000     $........%......
    e404:	0000 002b 0000 0004 5a00 5a00 0000 0700     ..+......Z.Z....
    e414:	0000 0000 0020 0000 0004 3800 3800 0000     .... ......8.8..
    e424:	0400 0000 0039 0039 0000 0004 3a00 3a00     ....9.9......:.:
    e434:	0000 0400 0000 0026 0026 0000 0004 6600     ......&.&......f
    e444:	6600 0000 0400 0000 0037 0037 0000 0004     .f......7.7.....
    e454:	2c00 2c00 0000 0400 0000 002d 002d 0000     .,.,......-.-...
    e464:	0004 2e00 2e00 0000 0200 0000 4040 0040     ............@@@.
    e474:	0000 0004 6a00 6a00 0000 0400 0000 006b     .....j.j......k.
    e484:	006b 0000 0004 6c00 6c00 0000 0900 0000     k......l.l......
    e494:	0000 0001 0000 0009 0000 0000 0000 0700     ................
    e4a4:	0000 0000 0036 0000 0007 0000 3100 0000     ....6........1..
    e4b4:	0700 0000 0000 0049 0000 0007 0000 4a00     ......I........J
    e4c4:	0000 0700 0000 0000 004b 0000 0007 0000     ........K.......
    e4d4:	4c00 0000 0700 0000 0000 004d 0000 0007     .L........M.....
    e4e4:	0000 3d00 0000 0300 0000 0000 0000 0000     ...=............

0000e4f4 <Clock_Ip_au16SelectorEntryHardwareValue>:
    e4f4:	0a03 0101 0001 0101 0002 0404 0603 0200     ................
    e504:	0810 0001 0100 0202 0000 0000 0007 0000     ................
    e514:	0009 0000 0000 0000 0c0e 0000 0000 0000     ................
	...

0000e54c <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    e54c:	0000 0002 0300 0000 0601 0000 0000 0000     ................
	...

0000e57c <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    e57c:	0700 0000 0000 0000 0000 0202 0303 0101     ................
    e58c:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000e5ac <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    e5ac:	0001 0000 0000 0000 0000 0202 0303 0101     ................
    e5bc:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000e5dc <Clock_Ip_au8DividerValueHardwareValue>:
    e5dc:	0100 0002 0003 0000 0004 0000 0000 0000     ................
    e5ec:	0005 0000 0000 0000 0000 0000 0000 0000     ................
    e5fc:	0006 0000 0000 0000 0000 0000 0000 0000     ................
	...
    e61c:	0007 0000                                   ....

0000e620 <Clock_Ip_apxScgPeriphAsyncDivs>:
    e620:	4204 4006 4304 4006 4104 4006 4604 4006     .B.@.C.@.A.@.F.@

0000e630 <Clock_Ip_aeSourceTypeClockName>:
    e630:	0000 0000 0001 0000 0001 0000 0001 0000     ................
    e640:	0001 0000 0001 0000 0001 0000 0001 0000     ................
    e650:	0002 0000 0003 0000 0001 0000 0001 0000     ................
    e660:	0001 0000 0001 0000 0002 0000 0002 0000     ................
    e670:	0003 0000 0003 0000 0001 0000 0001 0000     ................
    e680:	0004 0000 0004 0000 0004 0000 0004 0000     ................
	...

0000e6ec <Clock_Ip_aeHwPllName>:
    e6ec:	0009 0000                                   ....

0000e6f0 <Clock_Ip_aeHwDfsName>:
    e6f0:	0057 0000                                   W...

0000e6f4 <Clock_Ip_axDividerCallbacks>:
    e6f4:	21c1 0000 21cb 0000 21e5 0000 21ff 0000     .!...!...!...!..
    e704:	2219 0000 2233 0000 224d 0000 2267 0000     ."..3"..M"..g"..
    e714:	2281 0000 229b 0000 22b5 0000 22cf 0000     ."..."..."..."..
    e724:	22e9 0000 2303 0000 231d 0000               ."...#...#..

0000e730 <Clock_Ip_axDividerTriggerCallbacks>:
    e730:	2691 0000 2691 0000                         .&...&..

0000e738 <Clock_Ip_axExtOscCallbacks>:
    e738:	269d 0000 269d 0000 269d 0000 26a7 0000     .&...&...&...&..
    e748:	269d 0000 26b1 0000 26cb 0000 26e5 0000     .&...&...&...&..
    e758:	2769 0000 277d 0000                         i'..}'..

0000e760 <Clock_Ip_axFracDivCallbacks>:
    e760:	293d 0000 293d 0000 2947 0000               =)..=)..G)..

0000e76c <Clock_Ip_axGateCallbacks>:
    e76c:	2961 0000 296b 0000 2a6b 0000 2a85 0000     a)..k)..k*...*..
    e77c:	2a1b 0000 2a35 0000 29cb 0000 29e5 0000     .*..5*...)...)..
    e78c:	297b 0000 2995 0000 2abb 0000 2ad5 0000     {)...)...*...*..
    e79c:	2b0b 0000 2b25 0000                         .+..%+..

0000e7a4 <Clock_Ip_axIntOscCallbacks>:
    e7a4:	2cd1 0000 2cd1 0000 2cdb 0000 2ce5 0000     .,...,...,...,..
    e7b4:	2cff 0000 2d19 0000 2d2d 0000 2d47 0000     .,...-..--..G-..
    e7c4:	2d61 0000 2d75 0000 2d8f 0000 2da9 0000     a-..u-...-...-..
    e7d4:	2e51 0000 2e6b 0000 2e85 0000               Q...k.......

0000e7e0 <Clock_Ip_axCmuCallbacks>:
    e7e0:	3421 0000 342b 0000 3437 0000 3421 0000     !4..+4..74..!4..

0000e7f0 <Clock_Ip_axPllCallbacks>:
    e7f0:	3441 0000 3441 0000 344b 0000 3441 0000     A4..A4..K4..A4..
    e800:	3457 0000 3461 0000 347b 0000 3495 0000     W4..a4..{4...4..
    e810:	3539 0000 3525 0000                         95..%5..

0000e818 <Clock_Ip_axPcfsCallbacks>:
    e818:	3695 0000                                   .6..

0000e81c <Clock_Ip_axSelectorCallbacks>:
    e81c:	36a1 0000 36a1 0000 36ab 0000 36c5 0000     .6...6...6...6..
    e82c:	36a1 0000 36df 0000 36f9 0000 3713 0000     .6...6...6...7..
    e83c:	372d 0000 3747 0000 3761 0000 377b 0000     -7..G7..a7..{7..
    e84c:	3795 0000 37af 0000 37c9 0000 37e3 0000     .7...7...7...7..
    e85c:	37fd 0000 3817 0000 3831 0000 384b 0000     .7...8..18..K8..
    e86c:	3865 0000 387f 0000                         e8...8..

0000e874 <ClockSource>:
    e874:	0000 0000 0008 0000 0002 0000 0005 0000     ................
	...
    e88c:	0009 0000                                   ....

0000e890 <ResetReasonArray>:
    e890:	0000 0000 0001 0000 0002 0000 0003 0000     ................
    e8a0:	0004 0000 0005 0000 0006 0000 0007 0000     ................
    e8b0:	0008 0000 0009 0000 000a 0000 000b 0000     ................
    e8c0:	000c 0000 000d 0000 000e 0000               ............

0000e8cc <Port_au32PortCiPortBaseAddr>:
    e8cc:	9000 4004 a000 4004 b000 4004 c000 4004     ...@...@...@...@
    e8dc:	d000 4004                                   ...@

0000e8e0 <Port_au32PortCiGpioBaseAddr>:
    e8e0:	f000 400f f040 400f f080 400f f0c0 400f     ...@@..@...@...@
    e8f0:	f100 400f                                   ...@

0000e8f4 <Flexcan_Ip_apxBase>:
    e8f4:	4000 4002 5000 4002 b000 4002               .@.@.P.@...@

0000e900 <payload_code.3>:
    e900:	0100 0302 0504 0706 0908 0909 0a09 0a0a     ................
    e910:	0b0a 0b0b 0c0b 0c0c 0d0c 0d0d 0d0d 0d0d     ................
    e920:	0e0d 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e     ................
    e930:	0f0e 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
    e940:	000f 0000                                   ....

0000e944 <flexcanBase.2>:
    e944:	4000 4002 5000 4002 b000 4002               .@.@.P.@...@

0000e950 <maxMbNum.1>:
    e950:	0020 0000 0010 0000 0010 0000                ...........

0000e95c <flexcanBase.0>:
    e95c:	4000 4002                                   .@.@

0000e960 <Can_43_FLEXCAN_Driver_P2Func>:
    e960:	6481 0000 60fd 0000                         .d...`..

0000e968 <Can_43_FLEXCAN_Driver_Config>:
    e968:	0000 0002 e960 0000                         ....`...

0000e970 <CanIf_CtrlPCConfig>:
    e970:	0000 0000 e968 0000                         ....h...

0000e978 <CanIf_PCConfig>:
    e978:	0001 0000 e970 0000                         ....p...

0000e980 <CanIf_TxPdu>:
    e980:	0000 0000 0123 0000 0002 0000 0000 0000     ....#...........
    e990:	08fd 0000 0001 0000 0124 0000 0002 0000     ........$.......
    e9a0:	0001 0000 0925 0000                         ....%...

0000e9a8 <CanIf_Can_43_FLEXCAN_HohToRxPduMapping>:
	...

0000e9b0 <CanIf_Can_43_FLEXCAN_DrvConfig>:
    e9b0:	e9a8 0000                                   ....

0000e9b4 <CanIf_CanDrvConfig>:
    e9b4:	e9b0 0000                                   ....

0000e9b8 <CanIf_Config>:
    e9b8:	0200 0000 e9b4 0000 0000 0000 e980 0000     ................

0000e9c8 <Can_43_FLEXCANIpwHwChannelConfig0>:
    e9c8:	ee90 0000                                   ....

0000e9cc <Can_au32HwBufferAddr_Ctrl0>:
    e9cc:	b080 4002 b090 4002 b0a0 4002 b0b0 4002     ...@...@...@...@

0000e9dc <Can_aCtrlOffsetToCtrlIDMap>:
    e9dc:	ffff 0000                                   ....

0000e9e0 <Can_aHwObjIDToCtrlIDMap>:
    e9e0:	0000 0000                                   ....

0000e9e4 <Can_aHwObjectConfig>:
    e9e4:	0000 0000 0001 0000 0000 0000 0000 ff02     ................
    e9f4:	0008 0000 0000 0000 0003 0000 0000 0000     ................
    ea04:	e9cc 0000 0001 0000 0001 0000 0000 0000     ................
    ea14:	0000 ff02 0008 0000 0000 0000 0003 0000     ................
    ea24:	0002 0000 e9d4 0000                         ........

0000ea2c <Can_aBaudrateConfig_Ctrl0>:
    ea2c:	0000 0403 0005 001d 0000 0000 0000 0000     ................
	...

0000ea44 <Can_apHwObject_Ctrl0>:
    ea44:	e9e4 0000 ea08 0000                         ........

0000ea4c <Can_aControllerConfig>:
    ea4c:	0000 0002 b000 4002 0001 0000 ffff ffff     .......@........
	...
    ea68:	0000 0001 ea2c 0000 e9c8 0000 0002 0000     ....,...........
    ea78:	ea44 0000                                   D...

0000ea7c <Can_apController>:
    ea7c:	ea4c 0000                                   L...

0000ea80 <Can_43_FLEXCAN_Config>:
	...
    ea88:	e9dc 0000 e9e0 0000 e9e4 0000 ea7c 0000     ............|...

0000ea98 <Mcu_aClockConfigPB>:
	...
    eaa0:	0101 1c00 0010 0400 0029 0100 0005 0000     ........).......
    eab0:	0001 0000 0000 0000 0057 0000 0000 0000     ........W.......
    eac0:	0000 0000 0008 0000 1200 007a 0001 0000     ..........z.....
    ead0:	0001 0000 0000 0000 0057 0000 0000 0000     ........W.......
    eae0:	0057 0000 0000 0000 0000 0000 0000 0000     W...............
	...
    eb00:	0019 0000 0005 0000 001a 0000 0002 0000     ................
    eb10:	001b 0000 0005 0000 002a 0000 0005 0000     ........*.......
    eb20:	0028 0000 000e 0000 0029 0000 0001 0000     (.......).......
    eb30:	0056 0000 001c 0000 0032 0000 002a 0000     V.......2...*...
    eb40:	002b 0000 0014 0000 002c 0000 0014 0000     +.......,.......
    eb50:	002d 0000 0014 0000 002e 0000 0014 0000     -...............
    eb60:	003f 0000 0000 0000 0040 0000 0000 0000     ?.......@.......
    eb70:	0041 0000 0000 0000 0042 0000 0000 0000     A.......B.......
    eb80:	0031 0000 0000 0000 0045 0000 0000 0000     1.......E.......
    eb90:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    eba0:	0044 0000 0000 0000 0030 0000 0000 0000     D.......0.......
    ebb0:	003d 0000 0000 0000 0043 0000 0000 0000     =.......C.......
    ebc0:	0049 0000 0000 0000 004a 0000 0000 0000     I.......J.......
    ebd0:	004b 0000 0000 0000 0048 0000 0000 0000     K.......H.......
    ebe0:	000c 0000 0001 0000 0000 0000 000d 0000     ................
    ebf0:	0002 0000 0000 0000 000e 0000 0001 0000     ................
    ec00:	0000 0000 000f 0000 0001 0000 0000 0000     ................
    ec10:	001d 0000 0001 0000 0000 0000 001e 0000     ................
    ec20:	0008 0000 0000 0000 001f 0000 0001 0000     ................
    ec30:	0000 0000 0021 0000 0001 0000 0000 0000     ....!...........
    ec40:	0022 0000 0002 0000 0000 0000 0023 0000     "...........#...
    ec50:	0001 0000 0000 0000 0025 0000 0003 0000     ........%.......
    ec60:	0000 0000 0026 0000 0004 0000 0000 0000     ....&...........
    ec70:	0027 0000 0002 0000 0000 0000 0032 0000     '...........2...
    ec80:	0001 0000 0000 0000 0048 0000 0001 0000     ........H.......
    ec90:	0001 0000 0056 0000 0001 0000 0001 0000     ....V...........
    eca0:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
    ecb8:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
    ecd0:	0057 0000 0000 0000 0057 0000 0057 0000     W.......W...W...
	...
    ecec:	0014 0000 7d00 0000 0015 0000 7d00 0000     .....}.......}..
    ecfc:	0016 0000 7d00 0000 0017 0000 8000 0000     .....}..........
    ed0c:	0012 0000 0001 0000 0013 0000 0001 0000     ................
    ed1c:	0030 0000 0000 0000 0031 0000 0000 0000     0.......1.......
    ed2c:	0032 0000 0000 0000 0033 0000 0000 0000     2.......3.......
    ed3c:	0034 0000 0000 0000 0035 0000 0001 0000     4.......5.......
    ed4c:	0036 0000 0000 0000 0037 0000 0001 0000     6.......7.......
    ed5c:	0038 0000 0001 0000 0039 0000 0000 0000     8.......9.......
    ed6c:	003a 0000 0000 0000 003b 0000 0000 0000     :.......;.......
    ed7c:	003c 0000 0001 0000 003d 0000 0000 0000     <.......=.......
    ed8c:	003e 0000 0000 0000 003f 0000 0000 0000     >.......?.......
    ed9c:	0040 0000 0000 0000 0041 0000 0000 0000     @.......A.......
    edac:	0042 0000 0000 0000 0043 0000 0000 0000     B.......C.......
    edbc:	0044 0000 0000 0000 0045 0000 0000 0000     D.......E.......
    edcc:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    eddc:	0048 0000 0000 0000 0049 0000 0000 0000     H.......I.......
    edec:	004a 0000 0000 0000 004b 0000 0000 0000     J.......K.......
    edfc:	004c 0000 0001 0000 004d 0000 0001 0000     L.......M.......
    ee0c:	004e 0000 0000 0000 004f 0000 0000 0000     N.......O.......
    ee1c:	0050 0000 0001 0000 0051 0000 0001 0000     P.......Q.......
    ee2c:	0052 0000 0001 0000 0053 0000 0001 0000     R.......S.......
    ee3c:	0054 0000 0001 0000 0055 0000 0000 0000     T.......U.......
    ee4c:	0056 0000 0001 0000 0057 0000 0000 0000     V.......W.......
    ee5c:	0000 0000 0057 0000 0000 0000 0057 0000     ....W.......W...
	...

0000ee90 <Flexcan_aCtrlConfigPB>:
    ee90:	0004 0000 0000 0000 0000 0000 0000 0000     ................
    eea0:	0040 0000 0000 0000 0100 0000 0003 0000     @...............
    eeb0:	0004 0000 0005 0000 001d 0000 0000 0000     ................
    eec0:	0004 0000 0004 0000 0005 0000 001d 0000     ................
	...
    eed8:	7659 0000 7705 0000                         Yv...w..

0000eee0 <aIrqConfiguration>:
    eee0:	005c 0000 0f01 0000 bb85 0000 005d 0000     \...........]...
    eef0:	0f01 0000 bb95 0000 005f 0000 0f01 0000     ........_.......
    ef00:	bba5 0000                                   ....

0000ef04 <intCtrlConfig>:
    ef04:	0003 0000 eee0 0000                         ........

0000ef0c <Mcu_Config>:
    ef0c:	005a 0000 0000 0000 0001 0000 0001 0000     Z...............
    ef1c:	f0ec 0000 ea98 0000 f0f8 0000               ............

0000ef28 <OsIf_xPredefinedConfig>:
    ef28:	0000 0000 6c00 02dc                         .....l..

0000ef30 <OsIf_apxPredefinedConfig>:
    ef30:	ef28 0000                                   (...

0000ef34 <Platform_uConfiguration>:
    ef34:	ef3c 0000                                   <...

0000ef38 <Platform_Config>:
    ef38:	ef34 0000                                   4...

0000ef3c <ipwConfig>:
    ef3c:	ef04 0000 0000 0000                         ........

0000ef44 <g_pin_mux_InitConfigArr>:
    ef44:	c000 4004 f0c0 400f 0000 0000 0002 0000     ...@...@........
    ef54:	0001 0000 0002 0000 0000 0000 0000 0000     ................
    ef64:	0000 0000 0100 0000 b000 4004 0000 0000     ...........@....
    ef74:	0011 0000 0002 0000 0003 0000 0001 0000     ................
	...
    ef94:	b000 4004 0000 0000 0010 0000 0002 0000     ...@............
    efa4:	0003 0000 0001 0000 0000 0000 0000 0000     ................
	...

0000efbc <au8Port_PartitionList>:
    efbc:	0001 0000                                   ....

0000efc0 <au32Port_PinToPartitionMap>:
    efc0:	0001 0000 0001 0000 0001 0000               ............

0000efcc <Port_au16NoUnUsedPadsArrayDefault>:
    efcc:	0000 0001 0002 0003 0006 0007 0008 0009     ................
    efdc:	000b 000c 000d 000e 000f 0010 0011 0020     .............. .
    efec:	0021 0022 0023 0024 0025 0026 0027 0028     !.".#.$.%.&.'.(.
    effc:	0029 002a 002b 002c 002d 002e 002f 0030     ).*.+.,.-.../.0.
    f00c:	0031 0040 0041 0042 0043 0046 0047 0048     1.@.A.B.C.F.G.H.
    f01c:	0049 004a 004b 004c 004d 004e 004f 0061     I.J.K.L.M.N.O.a.
    f02c:	0062 0063 0064 0065 0066 0067 0068 0069     b.c.d.e.f.g.h.i.
    f03c:	006a 006b 006c 006d 006e 006f 0070 0071     j.k.l.m.n.o.p.q.
    f04c:	0080 0081 0082 0083 0084 0085 0086 0087     ................
    f05c:	0088 0089 008a 008b 008c 008d 008e 008f     ................
    f06c:	0090 0000                                   ....

0000f070 <Port_UnUsedPin>:
    f070:	0100 0000 0001 0000 0000 0000               ............

0000f07c <Port_aPinConfigDefault>:
    f07c:	0060 0000 0100 0000 0001 0000 0002 0000     `...............
    f08c:	0001 0001 0051 0000 0300 0000 0000 0000     ....Q...........
    f09c:	0001 0000 0000 0001 0050 0000 0300 0000     ........P.......
    f0ac:	0000 0000 0001 0000 0000 0001               ............

0000f0b8 <Port_Config>:
    f0b8:	0003 0051 efcc 0000 f070 0000 f07c 0000     ..Q.....p...|...
	...
    f0d0:	efc0 0000 efbc 0000 ef44 0000               ........D...

0000f0dc <Power_Ip_RCM_ConfigPB>:
	...

0000f0e4 <Power_Ip_PMC_ConfigPB>:
    f0e4:	0000 0000                                   ....

0000f0e8 <Power_Ip_SMC_ConfigPB>:
    f0e8:	0000 0000                                   ....

0000f0ec <Power_Ip_aModeConfigPB>:
	...

0000f0f8 <Power_Ip_HwIPsConfigPB>:
    f0f8:	f0dc 0000 f0e4 0000 f0e8 0000               ............

0000f104 <__INIT_TABLE>:
    f104:	00000002 	.word	0x00000002
    f108:	1fff8b10 	.word	0x1fff8b10
    f10c:	0000f12c 	.word	0x0000f12c
    f110:	0000f148 	.word	0x0000f148
    f114:	1fff8800 	.word	0x1fff8800
    f118:	00000000 	.word	0x00000000
    f11c:	00000310 	.word	0x00000310

0000f120 <__ZERO_TABLE>:
    f120:	00000001 	.word	0x00000001
    f124:	1fff8b30 	.word	0x1fff8b30
    f128:	1fff9190 	.word	0x1fff9190
