
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000a97 	.word	0x00000a97
  10:	00000a99 	.word	0x00000a99
  14:	00000a9b 	.word	0x00000a9b
  18:	00000a9d 	.word	0x00000a9d
	...
  2c:	00000a9f 	.word	0x00000a9f
  30:	00000aa1 	.word	0x00000aa1
  34:	00000000 	.word	0x00000000
  38:	00000aa3 	.word	0x00000aa3
  3c:	00000aa5 	.word	0x00000aa5
  40:	00000aa7 	.word	0x00000aa7
  44:	00000aa7 	.word	0x00000aa7
  48:	00000aa7 	.word	0x00000aa7
  4c:	00000aa7 	.word	0x00000aa7
  50:	00000aa7 	.word	0x00000aa7
  54:	00000aa7 	.word	0x00000aa7
  58:	00000aa7 	.word	0x00000aa7
  5c:	00000aa7 	.word	0x00000aa7
  60:	00000aa7 	.word	0x00000aa7
  64:	00000aa7 	.word	0x00000aa7
  68:	00000aa7 	.word	0x00000aa7
  6c:	00000aa7 	.word	0x00000aa7
  70:	00000aa7 	.word	0x00000aa7
  74:	00000aa7 	.word	0x00000aa7
  78:	00000aa7 	.word	0x00000aa7
  7c:	00000aa7 	.word	0x00000aa7
  80:	00000aa7 	.word	0x00000aa7
  84:	00000aa7 	.word	0x00000aa7
  88:	00000aa7 	.word	0x00000aa7
  8c:	00000aa7 	.word	0x00000aa7
  90:	00000aa7 	.word	0x00000aa7
  94:	00000aa7 	.word	0x00000aa7
  98:	00000aa7 	.word	0x00000aa7
  9c:	00000aa7 	.word	0x00000aa7
  a0:	00000aa7 	.word	0x00000aa7
  a4:	00000aa7 	.word	0x00000aa7
  a8:	00000aa7 	.word	0x00000aa7
  ac:	00000aa7 	.word	0x00000aa7
  b0:	00000aa7 	.word	0x00000aa7
  b4:	00000aa7 	.word	0x00000aa7
  b8:	00000aa7 	.word	0x00000aa7
  bc:	00000aa7 	.word	0x00000aa7
  c0:	00000aa7 	.word	0x00000aa7
  c4:	00000aa7 	.word	0x00000aa7
  c8:	00000aa7 	.word	0x00000aa7
  cc:	00000aa7 	.word	0x00000aa7
  d0:	00000aa7 	.word	0x00000aa7
  d4:	00000aa7 	.word	0x00000aa7
  d8:	00000aa7 	.word	0x00000aa7
  dc:	00000aa7 	.word	0x00000aa7
  e0:	00000aa7 	.word	0x00000aa7
  e4:	00000aa7 	.word	0x00000aa7
  e8:	00000aa7 	.word	0x00000aa7
  ec:	00000aa7 	.word	0x00000aa7
  f0:	00000aa7 	.word	0x00000aa7
  f4:	00000aa7 	.word	0x00000aa7
  f8:	00000aa7 	.word	0x00000aa7
  fc:	00000aa7 	.word	0x00000aa7
 100:	00000aa7 	.word	0x00000aa7
 104:	00000aa7 	.word	0x00000aa7
 108:	00000aa7 	.word	0x00000aa7
 10c:	00000aa7 	.word	0x00000aa7
 110:	00000aa7 	.word	0x00000aa7
 114:	00000aa7 	.word	0x00000aa7
 118:	00000aa7 	.word	0x00000aa7
 11c:	00000aa7 	.word	0x00000aa7
 120:	00000aa7 	.word	0x00000aa7
 124:	00000aa7 	.word	0x00000aa7
 128:	00000aa7 	.word	0x00000aa7
 12c:	00000aa7 	.word	0x00000aa7
 130:	00000aa7 	.word	0x00000aa7
 134:	00000aa7 	.word	0x00000aa7
 138:	00000aa7 	.word	0x00000aa7
 13c:	00000aa7 	.word	0x00000aa7
 140:	00000aa7 	.word	0x00000aa7
 144:	00000aa7 	.word	0x00000aa7
 148:	00000aa7 	.word	0x00000aa7
 14c:	00000aa7 	.word	0x00000aa7
 150:	00000aa7 	.word	0x00000aa7
 154:	00000aa7 	.word	0x00000aa7
 158:	00000aa7 	.word	0x00000aa7
 15c:	00000aa7 	.word	0x00000aa7
 160:	00000aa7 	.word	0x00000aa7
 164:	00000aa7 	.word	0x00000aa7
 168:	00000aa7 	.word	0x00000aa7
 16c:	00000aa7 	.word	0x00000aa7
 170:	00000aa7 	.word	0x00000aa7
 174:	00000aa7 	.word	0x00000aa7
 178:	00000aa7 	.word	0x00000aa7
 17c:	00000aa7 	.word	0x00000aa7
 180:	00000aa7 	.word	0x00000aa7
 184:	00000aa7 	.word	0x00000aa7
 188:	00000aa7 	.word	0x00000aa7
 18c:	00000aa7 	.word	0x00000aa7
 190:	00000aa7 	.word	0x00000aa7
 194:	00000aa7 	.word	0x00000aa7
 198:	00000aa7 	.word	0x00000aa7
 19c:	00000aa7 	.word	0x00000aa7
 1a0:	00000aa7 	.word	0x00000aa7
 1a4:	00000aa7 	.word	0x00000aa7
 1a8:	00000aa7 	.word	0x00000aa7
 1ac:	00000aa7 	.word	0x00000aa7
 1b0:	00000aa7 	.word	0x00000aa7
 1b4:	00000aa7 	.word	0x00000aa7
 1b8:	00000aa7 	.word	0x00000aa7
 1bc:	00000aa7 	.word	0x00000aa7
 1c0:	00000aa7 	.word	0x00000aa7
 1c4:	00000aa7 	.word	0x00000aa7
 1c8:	00000aa7 	.word	0x00000aa7
 1cc:	00000aa7 	.word	0x00000aa7
 1d0:	00000aa7 	.word	0x00000aa7
 1d4:	00000aa7 	.word	0x00000aa7
 1d8:	00000aa7 	.word	0x00000aa7
 1dc:	00000aa7 	.word	0x00000aa7
 1e0:	00000aa7 	.word	0x00000aa7
 1e4:	00000aa7 	.word	0x00000aa7
 1e8:	00000aa7 	.word	0x00000aa7
 1ec:	00000aa7 	.word	0x00000aa7
 1f0:	00000aa7 	.word	0x00000aa7
 1f4:	00000aa7 	.word	0x00000aa7
 1f8:	00000aa7 	.word	0x00000aa7
 1fc:	00000aa7 	.word	0x00000aa7
 200:	00000aa7 	.word	0x00000aa7
 204:	00000aa7 	.word	0x00000aa7
 208:	00000aa7 	.word	0x00000aa7
 20c:	00000aa7 	.word	0x00000aa7
 210:	00000aa7 	.word	0x00000aa7
 214:	00000aa7 	.word	0x00000aa7
 218:	00000aa7 	.word	0x00000aa7
 21c:	00000aa7 	.word	0x00000aa7
 220:	00000aa7 	.word	0x00000aa7
 224:	00000aa7 	.word	0x00000aa7
 228:	00000aa7 	.word	0x00000aa7
 22c:	00000aa7 	.word	0x00000aa7
 230:	00000aa7 	.word	0x00000aa7
 234:	00000aa7 	.word	0x00000aa7
 238:	00000aa7 	.word	0x00000aa7
 23c:	00000aa7 	.word	0x00000aa7
 240:	00000aa7 	.word	0x00000aa7
 244:	00000aa7 	.word	0x00000aa7
 248:	00000aa7 	.word	0x00000aa7
 24c:	00000aa7 	.word	0x00000aa7
 250:	00000aa7 	.word	0x00000aa7
 254:	00000aa7 	.word	0x00000aa7
 258:	00000aa7 	.word	0x00000aa7
 25c:	00000aa7 	.word	0x00000aa7
 260:	00000aa7 	.word	0x00000aa7
 264:	00000aa7 	.word	0x00000aa7
 268:	00000aa7 	.word	0x00000aa7
 26c:	00000aa7 	.word	0x00000aa7
 270:	00000aa7 	.word	0x00000aa7
 274:	00000aa7 	.word	0x00000aa7
 278:	00000aa7 	.word	0x00000aa7
 27c:	00000aa7 	.word	0x00000aa7
 280:	00000aa7 	.word	0x00000aa7
 284:	00000aa7 	.word	0x00000aa7
 288:	00000aa7 	.word	0x00000aa7
 28c:	00000aa7 	.word	0x00000aa7
 290:	00000aa7 	.word	0x00000aa7
 294:	00000aa7 	.word	0x00000aa7
 298:	00000aa7 	.word	0x00000aa7
 29c:	00000aa7 	.word	0x00000aa7
 2a0:	00000aa7 	.word	0x00000aa7
 2a4:	00000aa7 	.word	0x00000aa7
 2a8:	00000aa7 	.word	0x00000aa7
 2ac:	00000aa7 	.word	0x00000aa7
 2b0:	00000aa7 	.word	0x00000aa7
 2b4:	00000aa7 	.word	0x00000aa7
 2b8:	00000aa7 	.word	0x00000aa7
 2bc:	00000aa7 	.word	0x00000aa7
 2c0:	00000aa7 	.word	0x00000aa7
 2c4:	00000aa7 	.word	0x00000aa7
 2c8:	00000aa7 	.word	0x00000aa7
 2cc:	00000aa7 	.word	0x00000aa7
 2d0:	00000aa7 	.word	0x00000aa7
 2d4:	00000aa7 	.word	0x00000aa7
 2d8:	00000aa7 	.word	0x00000aa7
 2dc:	00000aa7 	.word	0x00000aa7
 2e0:	00000aa7 	.word	0x00000aa7
 2e4:	00000aa7 	.word	0x00000aa7
 2e8:	00000aa7 	.word	0x00000aa7
 2ec:	00000aa7 	.word	0x00000aa7
 2f0:	00000aa7 	.word	0x00000aa7
 2f4:	00000aa7 	.word	0x00000aa7
 2f8:	00000aa7 	.word	0x00000aa7
 2fc:	00000aa7 	.word	0x00000aa7
 300:	00000aa7 	.word	0x00000aa7
 304:	00000aa7 	.word	0x00000aa7
 308:	00000aa7 	.word	0x00000aa7
 30c:	00000aa7 	.word	0x00000aa7

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fa3f 	bl	904 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fafe 	bl	a8c <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff8de0 	.word	0x1fff8de0

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fa49 	bl	a30 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8b0:	b508      	push	{r3, lr}
    EcuM_Init();
     8b2:	f000 f801 	bl	8b8 <EcuM_Init>

    while( 1u )
     8b6:	e7fe      	b.n	8b6 <main+0x6>

000008b8 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     8b8:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     8ba:	4807      	ldr	r0, [pc, #28]	; (8d8 <EcuM_Init+0x20>)
     8bc:	f003 fe9e 	bl	45fc <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     8c0:	2000      	movs	r0, #0
     8c2:	f003 feef 	bl	46a4 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     8c6:	2000      	movs	r0, #0
     8c8:	f003 ff10 	bl	46ec <Mcu_SetMode>
    /*Apply all the Pin Port microcontroller configuration, for this case
    only Port Pin 122  (D16) is configured as output*/
    Port_Init( &Port_Config );
     8cc:	4803      	ldr	r0, [pc, #12]	; (8dc <EcuM_Init+0x24>)
     8ce:	f004 fac3 	bl	4e58 <Port_Init>
}
     8d2:	bf00      	nop
     8d4:	bd08      	pop	{r3, pc}
     8d6:	bf00      	nop
     8d8:	00007804 	.word	0x00007804
     8dc:	00007924 	.word	0x00007924

000008e0 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     8e0:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8e2:	f3ef 8310 	mrs	r3, PRIMASK
     8e6:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8e8:	4623      	mov	r3, r4
}
     8ea:	4618      	mov	r0, r3
     8ec:	f85d 4b04 	ldr.w	r4, [sp], #4
     8f0:	4770      	bx	lr

000008f2 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     8f2:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8f4:	f3ef 8310 	mrs	r3, PRIMASK
     8f8:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8fa:	4623      	mov	r3, r4
}
     8fc:	4618      	mov	r0, r3
     8fe:	f85d 4b04 	ldr.w	r4, [sp], #4
     902:	4770      	bx	lr

00000904 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     904:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     906:	2300      	movs	r3, #0
     908:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     90a:	2300      	movs	r3, #0
     90c:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     90e:	2300      	movs	r3, #0
     910:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     912:	2300      	movs	r3, #0
     914:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     916:	4b44      	ldr	r3, [pc, #272]	; (a28 <init_data_bss+0x124>)
     918:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     91a:	4b44      	ldr	r3, [pc, #272]	; (a2c <init_data_bss+0x128>)
     91c:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     91e:	9b05      	ldr	r3, [sp, #20]
     920:	681b      	ldr	r3, [r3, #0]
     922:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     924:	9b05      	ldr	r3, [sp, #20]
     926:	3304      	adds	r3, #4
     928:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     92a:	9b05      	ldr	r3, [sp, #20]
     92c:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     92e:	2300      	movs	r3, #0
     930:	9309      	str	r3, [sp, #36]	; 0x24
     932:	e03d      	b.n	9b0 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     934:	9a09      	ldr	r2, [sp, #36]	; 0x24
     936:	4613      	mov	r3, r2
     938:	005b      	lsls	r3, r3, #1
     93a:	4413      	add	r3, r2
     93c:	009b      	lsls	r3, r3, #2
     93e:	461a      	mov	r2, r3
     940:	9b03      	ldr	r3, [sp, #12]
     942:	4413      	add	r3, r2
     944:	685b      	ldr	r3, [r3, #4]
     946:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     948:	9a09      	ldr	r2, [sp, #36]	; 0x24
     94a:	4613      	mov	r3, r2
     94c:	005b      	lsls	r3, r3, #1
     94e:	4413      	add	r3, r2
     950:	009b      	lsls	r3, r3, #2
     952:	461a      	mov	r2, r3
     954:	9b03      	ldr	r3, [sp, #12]
     956:	4413      	add	r3, r2
     958:	681b      	ldr	r3, [r3, #0]
     95a:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     95c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     95e:	4613      	mov	r3, r2
     960:	005b      	lsls	r3, r3, #1
     962:	4413      	add	r3, r2
     964:	009b      	lsls	r3, r3, #2
     966:	461a      	mov	r2, r3
     968:	9b03      	ldr	r3, [sp, #12]
     96a:	4413      	add	r3, r2
     96c:	689b      	ldr	r3, [r3, #8]
     96e:	4619      	mov	r1, r3
     970:	9a09      	ldr	r2, [sp, #36]	; 0x24
     972:	4613      	mov	r3, r2
     974:	005b      	lsls	r3, r3, #1
     976:	4413      	add	r3, r2
     978:	009b      	lsls	r3, r3, #2
     97a:	461a      	mov	r2, r3
     97c:	9b03      	ldr	r3, [sp, #12]
     97e:	4413      	add	r3, r2
     980:	685b      	ldr	r3, [r3, #4]
     982:	1acb      	subs	r3, r1, r3
     984:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     986:	2300      	movs	r3, #0
     988:	9308      	str	r3, [sp, #32]
     98a:	e00a      	b.n	9a2 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     98c:	9a00      	ldr	r2, [sp, #0]
     98e:	9b08      	ldr	r3, [sp, #32]
     990:	441a      	add	r2, r3
     992:	9901      	ldr	r1, [sp, #4]
     994:	9b08      	ldr	r3, [sp, #32]
     996:	440b      	add	r3, r1
     998:	7812      	ldrb	r2, [r2, #0]
     99a:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     99c:	9b08      	ldr	r3, [sp, #32]
     99e:	3301      	adds	r3, #1
     9a0:	9308      	str	r3, [sp, #32]
     9a2:	9a08      	ldr	r2, [sp, #32]
     9a4:	9b06      	ldr	r3, [sp, #24]
     9a6:	429a      	cmp	r2, r3
     9a8:	d3f0      	bcc.n	98c <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
     9ac:	3301      	adds	r3, #1
     9ae:	9309      	str	r3, [sp, #36]	; 0x24
     9b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9b2:	9b07      	ldr	r3, [sp, #28]
     9b4:	429a      	cmp	r2, r3
     9b6:	d3bd      	bcc.n	934 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     9b8:	9b04      	ldr	r3, [sp, #16]
     9ba:	681b      	ldr	r3, [r3, #0]
     9bc:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     9be:	9b04      	ldr	r3, [sp, #16]
     9c0:	3304      	adds	r3, #4
     9c2:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     9c4:	9b04      	ldr	r3, [sp, #16]
     9c6:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     9c8:	2300      	movs	r3, #0
     9ca:	9309      	str	r3, [sp, #36]	; 0x24
     9cc:	e024      	b.n	a18 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     9ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
     9d0:	00db      	lsls	r3, r3, #3
     9d2:	9a02      	ldr	r2, [sp, #8]
     9d4:	4413      	add	r3, r2
     9d6:	681b      	ldr	r3, [r3, #0]
     9d8:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     9da:	9b09      	ldr	r3, [sp, #36]	; 0x24
     9dc:	00db      	lsls	r3, r3, #3
     9de:	9a02      	ldr	r2, [sp, #8]
     9e0:	4413      	add	r3, r2
     9e2:	685b      	ldr	r3, [r3, #4]
     9e4:	4619      	mov	r1, r3
     9e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     9e8:	00db      	lsls	r3, r3, #3
     9ea:	9a02      	ldr	r2, [sp, #8]
     9ec:	4413      	add	r3, r2
     9ee:	681b      	ldr	r3, [r3, #0]
     9f0:	1acb      	subs	r3, r1, r3
     9f2:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     9f4:	2300      	movs	r3, #0
     9f6:	9308      	str	r3, [sp, #32]
     9f8:	e007      	b.n	a0a <init_data_bss+0x106>
        {
            ram[j] = 0U;
     9fa:	9a01      	ldr	r2, [sp, #4]
     9fc:	9b08      	ldr	r3, [sp, #32]
     9fe:	4413      	add	r3, r2
     a00:	2200      	movs	r2, #0
     a02:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     a04:	9b08      	ldr	r3, [sp, #32]
     a06:	3301      	adds	r3, #1
     a08:	9308      	str	r3, [sp, #32]
     a0a:	9a08      	ldr	r2, [sp, #32]
     a0c:	9b06      	ldr	r3, [sp, #24]
     a0e:	429a      	cmp	r2, r3
     a10:	d3f3      	bcc.n	9fa <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a14:	3301      	adds	r3, #1
     a16:	9309      	str	r3, [sp, #36]	; 0x24
     a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a1a:	9b07      	ldr	r3, [sp, #28]
     a1c:	429a      	cmp	r2, r3
     a1e:	d3d6      	bcc.n	9ce <init_data_bss+0xca>
        }
    }
}
     a20:	bf00      	nop
     a22:	bf00      	nop
     a24:	b00a      	add	sp, #40	; 0x28
     a26:	4770      	bx	lr
     a28:	00007970 	.word	0x00007970
     a2c:	0000798c 	.word	0x0000798c

00000a30 <sys_m4_cache_init>:
{
     a30:	b084      	sub	sp, #16
     a32:	4603      	mov	r3, r0
     a34:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     a38:	2300      	movs	r3, #0
     a3a:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     a3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     a42:	2b00      	cmp	r3, #0
     a44:	d118      	bne.n	a78 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     a46:	4b10      	ldr	r3, [pc, #64]	; (a88 <sys_m4_cache_init+0x58>)
     a48:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     a4c:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     a4e:	4b0e      	ldr	r3, [pc, #56]	; (a88 <sys_m4_cache_init+0x58>)
     a50:	681b      	ldr	r3, [r3, #0]
     a52:	4a0d      	ldr	r2, [pc, #52]	; (a88 <sys_m4_cache_init+0x58>)
     a54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a58:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     a5a:	bf00      	nop
     a5c:	4b0a      	ldr	r3, [pc, #40]	; (a88 <sys_m4_cache_init+0x58>)
     a5e:	681b      	ldr	r3, [r3, #0]
     a60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     a64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     a68:	d0f8      	beq.n	a5c <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     a6a:	4b07      	ldr	r3, [pc, #28]	; (a88 <sys_m4_cache_init+0x58>)
     a6c:	681b      	ldr	r3, [r3, #0]
     a6e:	4a06      	ldr	r2, [pc, #24]	; (a88 <sys_m4_cache_init+0x58>)
     a70:	f043 0301 	orr.w	r3, r3, #1
     a74:	6013      	str	r3, [r2, #0]
     a76:	e002      	b.n	a7e <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     a78:	2301      	movs	r3, #1
     a7a:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     a7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     a82:	4618      	mov	r0, r3
     a84:	b004      	add	sp, #16
     a86:	4770      	bx	lr
     a88:	e0082000 	.word	0xe0082000

00000a8c <startup_go_to_user_mode>:
}
     a8c:	bf00      	nop
     a8e:	4770      	bx	lr

00000a90 <Sys_GetCoreID>:
    return 0U;
     a90:	2300      	movs	r3, #0
}
     a92:	4618      	mov	r0, r3
     a94:	4770      	bx	lr

00000a96 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     a96:	e7fe      	b.n	a96 <HardFault_Handler>

00000a98 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     a98:	e7fe      	b.n	a98 <MemManage_Handler>

00000a9a <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     a9a:	e7fe      	b.n	a9a <BusFault_Handler>

00000a9c <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     a9c:	e7fe      	b.n	a9c <UsageFault_Handler>

00000a9e <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     a9e:	e7fe      	b.n	a9e <SVC_Handler>

00000aa0 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     aa0:	e7fe      	b.n	aa0 <DebugMon_Handler>

00000aa2 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     aa2:	e7fe      	b.n	aa2 <PendSV_Handler>

00000aa4 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     aa4:	e7fe      	b.n	aa4 <SysTick_Handler>

00000aa6 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     aa6:	e7fe      	b.n	aa6 <undefined_handler>

00000aa8 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
     aa8:	2300      	movs	r3, #0
}
     aaa:	4618      	mov	r0, r3
     aac:	4770      	bx	lr

00000aae <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
     aae:	b082      	sub	sp, #8
     ab0:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
     ab2:	2301      	movs	r3, #1
}
     ab4:	4618      	mov	r0, r3
     ab6:	b002      	add	sp, #8
     ab8:	4770      	bx	lr

00000aba <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
     aba:	b082      	sub	sp, #8
     abc:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
     abe:	bf00      	nop
     ac0:	b002      	add	sp, #8
     ac2:	4770      	bx	lr

00000ac4 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
     ac4:	b082      	sub	sp, #8
     ac6:	9001      	str	r0, [sp, #4]
    return Micros;
     ac8:	9b01      	ldr	r3, [sp, #4]
}
     aca:	4618      	mov	r0, r3
     acc:	b002      	add	sp, #8
     ace:	4770      	bx	lr

00000ad0 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
     ad0:	b500      	push	{lr}
     ad2:	b083      	sub	sp, #12
     ad4:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
     ad6:	f000 f86d 	bl	bb4 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
     ada:	bf00      	nop
     adc:	b003      	add	sp, #12
     ade:	f85d fb04 	ldr.w	pc, [sp], #4

00000ae2 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
     ae2:	b500      	push	{lr}
     ae4:	b085      	sub	sp, #20
     ae6:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
     ae8:	2300      	movs	r3, #0
     aea:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     aec:	9b01      	ldr	r3, [sp, #4]
     aee:	2b00      	cmp	r3, #0
     af0:	d003      	beq.n	afa <OsIf_GetCounter+0x18>
     af2:	9b01      	ldr	r3, [sp, #4]
     af4:	2b01      	cmp	r3, #1
     af6:	d004      	beq.n	b02 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     af8:	e007      	b.n	b0a <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
     afa:	f7ff ffd5 	bl	aa8 <OsIf_Timer_Dummy_GetCounter>
     afe:	9003      	str	r0, [sp, #12]
            break;
     b00:	e003      	b.n	b0a <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
     b02:	f000 f873 	bl	bec <OsIf_Timer_System_GetCounter>
     b06:	9003      	str	r0, [sp, #12]
            break;
     b08:	bf00      	nop
    }

    return Value;
     b0a:	9b03      	ldr	r3, [sp, #12]
}
     b0c:	4618      	mov	r0, r3
     b0e:	b005      	add	sp, #20
     b10:	f85d fb04 	ldr.w	pc, [sp], #4

00000b14 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
     b14:	b500      	push	{lr}
     b16:	b085      	sub	sp, #20
     b18:	9001      	str	r0, [sp, #4]
     b1a:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
     b1c:	2300      	movs	r3, #0
     b1e:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     b20:	9b00      	ldr	r3, [sp, #0]
     b22:	2b00      	cmp	r3, #0
     b24:	d003      	beq.n	b2e <OsIf_GetElapsed+0x1a>
     b26:	9b00      	ldr	r3, [sp, #0]
     b28:	2b01      	cmp	r3, #1
     b2a:	d005      	beq.n	b38 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     b2c:	e009      	b.n	b42 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
     b2e:	9801      	ldr	r0, [sp, #4]
     b30:	f7ff ffbd 	bl	aae <OsIf_Timer_Dummy_GetElapsed>
     b34:	9003      	str	r0, [sp, #12]
            break;
     b36:	e004      	b.n	b42 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
     b38:	9801      	ldr	r0, [sp, #4]
     b3a:	f000 f865 	bl	c08 <OsIf_Timer_System_GetElapsed>
     b3e:	9003      	str	r0, [sp, #12]
            break;
     b40:	bf00      	nop
    }

    return Value;
     b42:	9b03      	ldr	r3, [sp, #12]
}
     b44:	4618      	mov	r0, r3
     b46:	b005      	add	sp, #20
     b48:	f85d fb04 	ldr.w	pc, [sp], #4

00000b4c <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
     b4c:	b500      	push	{lr}
     b4e:	b083      	sub	sp, #12
     b50:	9001      	str	r0, [sp, #4]
     b52:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
     b54:	9b00      	ldr	r3, [sp, #0]
     b56:	2b00      	cmp	r3, #0
     b58:	d003      	beq.n	b62 <OsIf_SetTimerFrequency+0x16>
     b5a:	9b00      	ldr	r3, [sp, #0]
     b5c:	2b01      	cmp	r3, #1
     b5e:	d004      	beq.n	b6a <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     b60:	e007      	b.n	b72 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
     b62:	9801      	ldr	r0, [sp, #4]
     b64:	f7ff ffa9 	bl	aba <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
     b68:	e003      	b.n	b72 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
     b6a:	9801      	ldr	r0, [sp, #4]
     b6c:	f000 f85c 	bl	c28 <OsIf_Timer_System_SetTimerFrequency>
            break;
     b70:	bf00      	nop
    }
}
     b72:	bf00      	nop
     b74:	b003      	add	sp, #12
     b76:	f85d fb04 	ldr.w	pc, [sp], #4

00000b7a <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
     b7a:	b500      	push	{lr}
     b7c:	b085      	sub	sp, #20
     b7e:	9001      	str	r0, [sp, #4]
     b80:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
     b82:	2300      	movs	r3, #0
     b84:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     b86:	9b00      	ldr	r3, [sp, #0]
     b88:	2b00      	cmp	r3, #0
     b8a:	d003      	beq.n	b94 <OsIf_MicrosToTicks+0x1a>
     b8c:	9b00      	ldr	r3, [sp, #0]
     b8e:	2b01      	cmp	r3, #1
     b90:	d005      	beq.n	b9e <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     b92:	e009      	b.n	ba8 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
     b94:	9801      	ldr	r0, [sp, #4]
     b96:	f7ff ff95 	bl	ac4 <OsIf_Timer_Dummy_MicrosToTicks>
     b9a:	9003      	str	r0, [sp, #12]
            break;
     b9c:	e004      	b.n	ba8 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
     b9e:	9801      	ldr	r0, [sp, #4]
     ba0:	f000 f850 	bl	c44 <OsIf_Timer_System_MicrosToTicks>
     ba4:	9003      	str	r0, [sp, #12]
            break;
     ba6:	bf00      	nop
    }

    return Value;
     ba8:	9b03      	ldr	r3, [sp, #12]
}
     baa:	4618      	mov	r0, r3
     bac:	b005      	add	sp, #20
     bae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00000bb4 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
     bb4:	b500      	push	{lr}
     bb6:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
     bb8:	2300      	movs	r3, #0
     bba:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
     bbc:	4a09      	ldr	r2, [pc, #36]	; (be4 <OsIf_Timer_System_Init+0x30>)
     bbe:	9b01      	ldr	r3, [sp, #4]
     bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     bc4:	685a      	ldr	r2, [r3, #4]
     bc6:	4908      	ldr	r1, [pc, #32]	; (be8 <OsIf_Timer_System_Init+0x34>)
     bc8:	9b01      	ldr	r3, [sp, #4]
     bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
     bce:	4a06      	ldr	r2, [pc, #24]	; (be8 <OsIf_Timer_System_Init+0x34>)
     bd0:	9b01      	ldr	r3, [sp, #4]
     bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     bd6:	4618      	mov	r0, r3
     bd8:	f000 f868 	bl	cac <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
     bdc:	bf00      	nop
     bde:	b003      	add	sp, #12
     be0:	f85d fb04 	ldr.w	pc, [sp], #4
     be4:	00007828 	.word	0x00007828
     be8:	1fff8b30 	.word	0x1fff8b30

00000bec <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
     bec:	b500      	push	{lr}
     bee:	b083      	sub	sp, #12
    uint32 Counter = 0U;
     bf0:	2300      	movs	r3, #0
     bf2:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
     bf4:	2300      	movs	r3, #0
     bf6:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
     bf8:	f000 f86c 	bl	cd4 <OsIf_Timer_System_Internal_GetCounter>
     bfc:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
     bfe:	9b01      	ldr	r3, [sp, #4]
}
     c00:	4618      	mov	r0, r3
     c02:	b003      	add	sp, #12
     c04:	f85d fb04 	ldr.w	pc, [sp], #4

00000c08 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
     c08:	b500      	push	{lr}
     c0a:	b085      	sub	sp, #20
     c0c:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
     c0e:	2300      	movs	r3, #0
     c10:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
     c12:	2300      	movs	r3, #0
     c14:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
     c16:	9801      	ldr	r0, [sp, #4]
     c18:	f000 f864 	bl	ce4 <OsIf_Timer_System_Internal_GetElapsed>
     c1c:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
     c1e:	9b03      	ldr	r3, [sp, #12]
}
     c20:	4618      	mov	r0, r3
     c22:	b005      	add	sp, #20
     c24:	f85d fb04 	ldr.w	pc, [sp], #4

00000c28 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
     c28:	b084      	sub	sp, #16
     c2a:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
     c2c:	2300      	movs	r3, #0
     c2e:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
     c30:	4903      	ldr	r1, [pc, #12]	; (c40 <OsIf_Timer_System_SetTimerFrequency+0x18>)
     c32:	9b03      	ldr	r3, [sp, #12]
     c34:	9a01      	ldr	r2, [sp, #4]
     c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
     c3a:	bf00      	nop
     c3c:	b004      	add	sp, #16
     c3e:	4770      	bx	lr
     c40:	1fff8b30 	.word	0x1fff8b30

00000c44 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
     c44:	b5f0      	push	{r4, r5, r6, r7, lr}
     c46:	b087      	sub	sp, #28
     c48:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
     c4a:	2100      	movs	r1, #0
     c4c:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
     c4e:	2100      	movs	r1, #0
     c50:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
     c52:	9901      	ldr	r1, [sp, #4]
     c54:	2000      	movs	r0, #0
     c56:	460e      	mov	r6, r1
     c58:	4607      	mov	r7, r0
     c5a:	4812      	ldr	r0, [pc, #72]	; (ca4 <OsIf_Timer_System_MicrosToTicks+0x60>)
     c5c:	9904      	ldr	r1, [sp, #16]
     c5e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
     c62:	2000      	movs	r0, #0
     c64:	460c      	mov	r4, r1
     c66:	4605      	mov	r5, r0
     c68:	fb04 f007 	mul.w	r0, r4, r7
     c6c:	fb06 f105 	mul.w	r1, r6, r5
     c70:	4401      	add	r1, r0
     c72:	fba6 2304 	umull	r2, r3, r6, r4
     c76:	4419      	add	r1, r3
     c78:	460b      	mov	r3, r1
     c7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
     c7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
     c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
     c86:	4a08      	ldr	r2, [pc, #32]	; (ca8 <OsIf_Timer_System_MicrosToTicks+0x64>)
     c88:	f04f 0300 	mov.w	r3, #0
     c8c:	f7ff fc8a 	bl	5a4 <__aeabi_uldivmod>
     c90:	4602      	mov	r2, r0
     c92:	460b      	mov	r3, r1
     c94:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
     c98:	9b02      	ldr	r3, [sp, #8]
     c9a:	9305      	str	r3, [sp, #20]
    }

    return ticks;
     c9c:	9b05      	ldr	r3, [sp, #20]
}
     c9e:	4618      	mov	r0, r3
     ca0:	b007      	add	sp, #28
     ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ca4:	1fff8b30 	.word	0x1fff8b30
     ca8:	000f4240 	.word	0x000f4240

00000cac <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
     cac:	b082      	sub	sp, #8
     cae:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
     cb0:	4b07      	ldr	r3, [pc, #28]	; (cd0 <OsIf_Timer_System_Internal_Init+0x24>)
     cb2:	2200      	movs	r2, #0
     cb4:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
     cb6:	4b06      	ldr	r3, [pc, #24]	; (cd0 <OsIf_Timer_System_Internal_Init+0x24>)
     cb8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
     cbc:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
     cbe:	4b04      	ldr	r3, [pc, #16]	; (cd0 <OsIf_Timer_System_Internal_Init+0x24>)
     cc0:	2200      	movs	r2, #0
     cc2:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
     cc4:	4b02      	ldr	r3, [pc, #8]	; (cd0 <OsIf_Timer_System_Internal_Init+0x24>)
     cc6:	2205      	movs	r2, #5
     cc8:	601a      	str	r2, [r3, #0]
}
     cca:	bf00      	nop
     ccc:	b002      	add	sp, #8
     cce:	4770      	bx	lr
     cd0:	e000e010 	.word	0xe000e010

00000cd4 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
     cd4:	4b02      	ldr	r3, [pc, #8]	; (ce0 <OsIf_Timer_System_Internal_GetCounter+0xc>)
     cd6:	689b      	ldr	r3, [r3, #8]
     cd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
     cdc:	4618      	mov	r0, r3
     cde:	4770      	bx	lr
     ce0:	e000e010 	.word	0xe000e010

00000ce4 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
     ce4:	b084      	sub	sp, #16
     ce6:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
     ce8:	4b10      	ldr	r3, [pc, #64]	; (d2c <OsIf_Timer_System_Internal_GetElapsed+0x48>)
     cea:	689b      	ldr	r3, [r3, #8]
     cec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     cf0:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
     cf2:	2300      	movs	r3, #0
     cf4:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
     cf6:	9b01      	ldr	r3, [sp, #4]
     cf8:	681b      	ldr	r3, [r3, #0]
     cfa:	9a02      	ldr	r2, [sp, #8]
     cfc:	429a      	cmp	r2, r3
     cfe:	d909      	bls.n	d14 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
     d00:	9b01      	ldr	r3, [sp, #4]
     d02:	681a      	ldr	r2, [r3, #0]
     d04:	9b02      	ldr	r3, [sp, #8]
     d06:	1ad3      	subs	r3, r2, r3
     d08:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
     d0c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
     d10:	9303      	str	r3, [sp, #12]
     d12:	e004      	b.n	d1e <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
     d14:	9b01      	ldr	r3, [sp, #4]
     d16:	681a      	ldr	r2, [r3, #0]
     d18:	9b02      	ldr	r3, [sp, #8]
     d1a:	1ad3      	subs	r3, r2, r3
     d1c:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
     d1e:	9b01      	ldr	r3, [sp, #4]
     d20:	9a02      	ldr	r2, [sp, #8]
     d22:	601a      	str	r2, [r3, #0]

    return dif;
     d24:	9b03      	ldr	r3, [sp, #12]
}
     d26:	4618      	mov	r0, r3
     d28:	b004      	add	sp, #16
     d2a:	4770      	bx	lr
     d2c:	e000e010 	.word	0xe000e010

00000d30 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
     d30:	b082      	sub	sp, #8
     d32:	9001      	str	r0, [sp, #4]
     d34:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
     d36:	bf00      	nop
     d38:	b002      	add	sp, #8
     d3a:	4770      	bx	lr

00000d3c <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
     d3c:	b500      	push	{lr}
     d3e:	b085      	sub	sp, #20
     d40:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
     d42:	4b24      	ldr	r3, [pc, #144]	; (dd4 <Clock_Ip_UpdateDriverContext+0x98>)
     d44:	2201      	movs	r2, #1
     d46:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
     d48:	4b23      	ldr	r3, [pc, #140]	; (dd8 <Clock_Ip_UpdateDriverContext+0x9c>)
     d4a:	681b      	ldr	r3, [r3, #0]
     d4c:	2102      	movs	r1, #2
     d4e:	4618      	mov	r0, r3
     d50:	f003 fc32 	bl	45b8 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
     d54:	2300      	movs	r3, #0
     d56:	f88d 300f 	strb.w	r3, [sp, #15]
     d5a:	e015      	b.n	d88 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
     d5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
     d60:	9a01      	ldr	r2, [sp, #4]
     d62:	334a      	adds	r3, #74	; 0x4a
     d64:	00db      	lsls	r3, r3, #3
     d66:	4413      	add	r3, r2
     d68:	6858      	ldr	r0, [r3, #4]
     d6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
     d6e:	9a01      	ldr	r2, [sp, #4]
     d70:	334a      	adds	r3, #74	; 0x4a
     d72:	00db      	lsls	r3, r3, #3
     d74:	4413      	add	r3, r2
     d76:	689b      	ldr	r3, [r3, #8]
     d78:	4619      	mov	r1, r3
     d7a:	f001 fadc 	bl	2336 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
     d7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     d82:	3301      	adds	r3, #1
     d84:	f88d 300f 	strb.w	r3, [sp, #15]
     d88:	9b01      	ldr	r3, [sp, #4]
     d8a:	7bdb      	ldrb	r3, [r3, #15]
     d8c:	f89d 200f 	ldrb.w	r2, [sp, #15]
     d90:	429a      	cmp	r2, r3
     d92:	d3e3      	bcc.n	d5c <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
     d94:	f000 f824 	bl	de0 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
     d98:	2301      	movs	r3, #1
     d9a:	f88d 300f 	strb.w	r3, [sp, #15]
     d9e:	e00e      	b.n	dbe <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
     da0:	f89d 200f 	ldrb.w	r2, [sp, #15]
     da4:	9b01      	ldr	r3, [sp, #4]
     da6:	327e      	adds	r2, #126	; 0x7e
     da8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
     dac:	490b      	ldr	r1, [pc, #44]	; (ddc <Clock_Ip_UpdateDriverContext+0xa0>)
     dae:	f89d 200f 	ldrb.w	r2, [sp, #15]
     db2:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
     db4:	f89d 300f 	ldrb.w	r3, [sp, #15]
     db8:	3301      	adds	r3, #1
     dba:	f88d 300f 	strb.w	r3, [sp, #15]
     dbe:	9b01      	ldr	r3, [sp, #4]
     dc0:	7cdb      	ldrb	r3, [r3, #19]
     dc2:	f89d 200f 	ldrb.w	r2, [sp, #15]
     dc6:	429a      	cmp	r2, r3
     dc8:	d3ea      	bcc.n	da0 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
     dca:	bf00      	nop
     dcc:	bf00      	nop
     dce:	b005      	add	sp, #20
     dd0:	f85d fb04 	ldr.w	pc, [sp], #4
     dd4:	1fff8b10 	.word	0x1fff8b10
     dd8:	1fff8b34 	.word	0x1fff8b34
     ddc:	1fff8b40 	.word	0x1fff8b40

00000de0 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
     de0:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
     de2:	4b23      	ldr	r3, [pc, #140]	; (e70 <Clock_Ip_CallEmptyCallbacks+0x90>)
     de4:	781b      	ldrb	r3, [r3, #0]
     de6:	f083 0301 	eor.w	r3, r3, #1
     dea:	b2db      	uxtb	r3, r3
     dec:	2b00      	cmp	r3, #0
     dee:	d03d      	beq.n	e6c <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
     df0:	4b1f      	ldr	r3, [pc, #124]	; (e70 <Clock_Ip_CallEmptyCallbacks+0x90>)
     df2:	2201      	movs	r2, #1
     df4:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
     df6:	4b1f      	ldr	r3, [pc, #124]	; (e74 <Clock_Ip_CallEmptyCallbacks+0x94>)
     df8:	685b      	ldr	r3, [r3, #4]
     dfa:	2100      	movs	r1, #0
     dfc:	2000      	movs	r0, #0
     dfe:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
     e00:	4b1c      	ldr	r3, [pc, #112]	; (e74 <Clock_Ip_CallEmptyCallbacks+0x94>)
     e02:	689b      	ldr	r3, [r3, #8]
     e04:	2057      	movs	r0, #87	; 0x57
     e06:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     e08:	4b1b      	ldr	r3, [pc, #108]	; (e78 <Clock_Ip_CallEmptyCallbacks+0x98>)
     e0a:	681b      	ldr	r3, [r3, #0]
     e0c:	2000      	movs	r0, #0
     e0e:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
     e10:	4b1a      	ldr	r3, [pc, #104]	; (e7c <Clock_Ip_CallEmptyCallbacks+0x9c>)
     e12:	681b      	ldr	r3, [r3, #0]
     e14:	2000      	movs	r0, #0
     e16:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
     e18:	4b19      	ldr	r3, [pc, #100]	; (e80 <Clock_Ip_CallEmptyCallbacks+0xa0>)
     e1a:	681b      	ldr	r3, [r3, #0]
     e1c:	2000      	movs	r0, #0
     e1e:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     e20:	4b18      	ldr	r3, [pc, #96]	; (e84 <Clock_Ip_CallEmptyCallbacks+0xa4>)
     e22:	685b      	ldr	r3, [r3, #4]
     e24:	2000      	movs	r0, #0
     e26:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
     e28:	4b16      	ldr	r3, [pc, #88]	; (e84 <Clock_Ip_CallEmptyCallbacks+0xa4>)
     e2a:	689b      	ldr	r3, [r3, #8]
     e2c:	2057      	movs	r0, #87	; 0x57
     e2e:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     e30:	4b15      	ldr	r3, [pc, #84]	; (e88 <Clock_Ip_CallEmptyCallbacks+0xa8>)
     e32:	681b      	ldr	r3, [r3, #0]
     e34:	2000      	movs	r0, #0
     e36:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
     e38:	4b13      	ldr	r3, [pc, #76]	; (e88 <Clock_Ip_CallEmptyCallbacks+0xa8>)
     e3a:	685b      	ldr	r3, [r3, #4]
     e3c:	2100      	movs	r1, #0
     e3e:	2057      	movs	r0, #87	; 0x57
     e40:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     e42:	4b12      	ldr	r3, [pc, #72]	; (e8c <Clock_Ip_CallEmptyCallbacks+0xac>)
     e44:	681b      	ldr	r3, [r3, #0]
     e46:	2000      	movs	r0, #0
     e48:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     e4a:	4b11      	ldr	r3, [pc, #68]	; (e90 <Clock_Ip_CallEmptyCallbacks+0xb0>)
     e4c:	685b      	ldr	r3, [r3, #4]
     e4e:	2000      	movs	r0, #0
     e50:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
     e52:	4b0f      	ldr	r3, [pc, #60]	; (e90 <Clock_Ip_CallEmptyCallbacks+0xb0>)
     e54:	689b      	ldr	r3, [r3, #8]
     e56:	2057      	movs	r0, #87	; 0x57
     e58:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     e5a:	4b0e      	ldr	r3, [pc, #56]	; (e94 <Clock_Ip_CallEmptyCallbacks+0xb4>)
     e5c:	685b      	ldr	r3, [r3, #4]
     e5e:	2000      	movs	r0, #0
     e60:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
     e62:	4b0d      	ldr	r3, [pc, #52]	; (e98 <Clock_Ip_CallEmptyCallbacks+0xb8>)
     e64:	681b      	ldr	r3, [r3, #0]
     e66:	2100      	movs	r1, #0
     e68:	2000      	movs	r0, #0
     e6a:	4798      	blx	r3
    }
}
     e6c:	bf00      	nop
     e6e:	bd08      	pop	{r3, pc}
     e70:	1fff8b38 	.word	0x1fff8b38
     e74:	000072f8 	.word	0x000072f8
     e78:	0000720c 	.word	0x0000720c
     e7c:	00007248 	.word	0x00007248
     e80:	00007250 	.word	0x00007250
     e84:	00007278 	.word	0x00007278
     e88:	00007284 	.word	0x00007284
     e8c:	000072bc 	.word	0x000072bc
     e90:	00007308 	.word	0x00007308
     e94:	00007334 	.word	0x00007334
     e98:	00007330 	.word	0x00007330

00000e9c <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
     e9c:	b500      	push	{lr}
     e9e:	b085      	sub	sp, #20
     ea0:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
     ea2:	9b01      	ldr	r3, [sp, #4]
     ea4:	7adb      	ldrb	r3, [r3, #11]
     ea6:	9303      	str	r3, [sp, #12]
     ea8:	e01f      	b.n	eea <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
     eaa:	9b03      	ldr	r3, [sp, #12]
     eac:	1e5a      	subs	r2, r3, #1
     eae:	9b01      	ldr	r3, [sp, #4]
     eb0:	320d      	adds	r2, #13
     eb2:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
     eb6:	495a      	ldr	r1, [pc, #360]	; (1020 <Clock_Ip_ResetClockConfiguration+0x184>)
     eb8:	4613      	mov	r3, r2
     eba:	00db      	lsls	r3, r3, #3
     ebc:	4413      	add	r3, r2
     ebe:	440b      	add	r3, r1
     ec0:	3301      	adds	r3, #1
     ec2:	781b      	ldrb	r3, [r3, #0]
     ec4:	461a      	mov	r2, r3
     ec6:	4b57      	ldr	r3, [pc, #348]	; (1024 <Clock_Ip_ResetClockConfiguration+0x188>)
     ec8:	5c9b      	ldrb	r3, [r3, r2]
     eca:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
     ecc:	4a56      	ldr	r2, [pc, #344]	; (1028 <Clock_Ip_ResetClockConfiguration+0x18c>)
     ece:	9b02      	ldr	r3, [sp, #8]
     ed0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     ed4:	9a03      	ldr	r2, [sp, #12]
     ed6:	3a01      	subs	r2, #1
     ed8:	320d      	adds	r2, #13
     eda:	00d2      	lsls	r2, r2, #3
     edc:	9901      	ldr	r1, [sp, #4]
     ede:	440a      	add	r2, r1
     ee0:	4610      	mov	r0, r2
     ee2:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
     ee4:	9b03      	ldr	r3, [sp, #12]
     ee6:	3b01      	subs	r3, #1
     ee8:	9303      	str	r3, [sp, #12]
     eea:	9b03      	ldr	r3, [sp, #12]
     eec:	2b00      	cmp	r3, #0
     eee:	d1dc      	bne.n	eaa <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
     ef0:	9b01      	ldr	r3, [sp, #4]
     ef2:	7b9b      	ldrb	r3, [r3, #14]
     ef4:	9303      	str	r3, [sp, #12]
     ef6:	e026      	b.n	f46 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
     ef8:	9b03      	ldr	r3, [sp, #12]
     efa:	3b01      	subs	r3, #1
     efc:	9a01      	ldr	r2, [sp, #4]
     efe:	3324      	adds	r3, #36	; 0x24
     f00:	011b      	lsls	r3, r3, #4
     f02:	4413      	add	r3, r2
     f04:	3304      	adds	r3, #4
     f06:	681a      	ldr	r2, [r3, #0]
     f08:	4945      	ldr	r1, [pc, #276]	; (1020 <Clock_Ip_ResetClockConfiguration+0x184>)
     f0a:	4613      	mov	r3, r2
     f0c:	00db      	lsls	r3, r3, #3
     f0e:	4413      	add	r3, r2
     f10:	440b      	add	r3, r1
     f12:	3301      	adds	r3, #1
     f14:	781b      	ldrb	r3, [r3, #0]
     f16:	461a      	mov	r2, r3
     f18:	4b44      	ldr	r3, [pc, #272]	; (102c <Clock_Ip_ResetClockConfiguration+0x190>)
     f1a:	5c9b      	ldrb	r3, [r3, r2]
     f1c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
     f1e:	4944      	ldr	r1, [pc, #272]	; (1030 <Clock_Ip_ResetClockConfiguration+0x194>)
     f20:	9a02      	ldr	r2, [sp, #8]
     f22:	4613      	mov	r3, r2
     f24:	005b      	lsls	r3, r3, #1
     f26:	4413      	add	r3, r2
     f28:	009b      	lsls	r3, r3, #2
     f2a:	440b      	add	r3, r1
     f2c:	681b      	ldr	r3, [r3, #0]
     f2e:	9a03      	ldr	r2, [sp, #12]
     f30:	3a01      	subs	r2, #1
     f32:	3224      	adds	r2, #36	; 0x24
     f34:	0112      	lsls	r2, r2, #4
     f36:	9901      	ldr	r1, [sp, #4]
     f38:	440a      	add	r2, r1
     f3a:	3204      	adds	r2, #4
     f3c:	4610      	mov	r0, r2
     f3e:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
     f40:	9b03      	ldr	r3, [sp, #12]
     f42:	3b01      	subs	r3, #1
     f44:	9303      	str	r3, [sp, #12]
     f46:	9b03      	ldr	r3, [sp, #12]
     f48:	2b00      	cmp	r3, #0
     f4a:	d1d5      	bne.n	ef8 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
     f4c:	9b01      	ldr	r3, [sp, #4]
     f4e:	7a9b      	ldrb	r3, [r3, #10]
     f50:	9303      	str	r3, [sp, #12]
     f52:	e02a      	b.n	faa <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
     f54:	9b03      	ldr	r3, [sp, #12]
     f56:	1e5a      	subs	r2, r3, #1
     f58:	9901      	ldr	r1, [sp, #4]
     f5a:	4613      	mov	r3, r2
     f5c:	009b      	lsls	r3, r3, #2
     f5e:	4413      	add	r3, r2
     f60:	00db      	lsls	r3, r3, #3
     f62:	440b      	add	r3, r1
     f64:	3340      	adds	r3, #64	; 0x40
     f66:	681a      	ldr	r2, [r3, #0]
     f68:	492d      	ldr	r1, [pc, #180]	; (1020 <Clock_Ip_ResetClockConfiguration+0x184>)
     f6a:	4613      	mov	r3, r2
     f6c:	00db      	lsls	r3, r3, #3
     f6e:	4413      	add	r3, r2
     f70:	440b      	add	r3, r1
     f72:	3301      	adds	r3, #1
     f74:	781b      	ldrb	r3, [r3, #0]
     f76:	461a      	mov	r2, r3
     f78:	4b2e      	ldr	r3, [pc, #184]	; (1034 <Clock_Ip_ResetClockConfiguration+0x198>)
     f7a:	5c9b      	ldrb	r3, [r3, r2]
     f7c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
     f7e:	492e      	ldr	r1, [pc, #184]	; (1038 <Clock_Ip_ResetClockConfiguration+0x19c>)
     f80:	9a02      	ldr	r2, [sp, #8]
     f82:	4613      	mov	r3, r2
     f84:	009b      	lsls	r3, r3, #2
     f86:	4413      	add	r3, r2
     f88:	009b      	lsls	r3, r3, #2
     f8a:	440b      	add	r3, r1
     f8c:	6819      	ldr	r1, [r3, #0]
     f8e:	9b03      	ldr	r3, [sp, #12]
     f90:	1e5a      	subs	r2, r3, #1
     f92:	4613      	mov	r3, r2
     f94:	009b      	lsls	r3, r3, #2
     f96:	4413      	add	r3, r2
     f98:	00db      	lsls	r3, r3, #3
     f9a:	3340      	adds	r3, #64	; 0x40
     f9c:	9a01      	ldr	r2, [sp, #4]
     f9e:	4413      	add	r3, r2
     fa0:	4618      	mov	r0, r3
     fa2:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
     fa4:	9b03      	ldr	r3, [sp, #12]
     fa6:	3b01      	subs	r3, #1
     fa8:	9303      	str	r3, [sp, #12]
     faa:	9b03      	ldr	r3, [sp, #12]
     fac:	2b00      	cmp	r3, #0
     fae:	d1d1      	bne.n	f54 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
     fb0:	9b01      	ldr	r3, [sp, #4]
     fb2:	7a5b      	ldrb	r3, [r3, #9]
     fb4:	9303      	str	r3, [sp, #12]
     fb6:	e02b      	b.n	1010 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
     fb8:	9b03      	ldr	r3, [sp, #12]
     fba:	1e5a      	subs	r2, r3, #1
     fbc:	9901      	ldr	r1, [sp, #4]
     fbe:	4613      	mov	r3, r2
     fc0:	009b      	lsls	r3, r3, #2
     fc2:	4413      	add	r3, r2
     fc4:	009b      	lsls	r3, r3, #2
     fc6:	440b      	add	r3, r1
     fc8:	332c      	adds	r3, #44	; 0x2c
     fca:	681a      	ldr	r2, [r3, #0]
     fcc:	4914      	ldr	r1, [pc, #80]	; (1020 <Clock_Ip_ResetClockConfiguration+0x184>)
     fce:	4613      	mov	r3, r2
     fd0:	00db      	lsls	r3, r3, #3
     fd2:	4413      	add	r3, r2
     fd4:	440b      	add	r3, r1
     fd6:	3301      	adds	r3, #1
     fd8:	781b      	ldrb	r3, [r3, #0]
     fda:	461a      	mov	r2, r3
     fdc:	4b17      	ldr	r3, [pc, #92]	; (103c <Clock_Ip_ResetClockConfiguration+0x1a0>)
     fde:	5c9b      	ldrb	r3, [r3, r2]
     fe0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
     fe2:	4917      	ldr	r1, [pc, #92]	; (1040 <Clock_Ip_ResetClockConfiguration+0x1a4>)
     fe4:	9a02      	ldr	r2, [sp, #8]
     fe6:	4613      	mov	r3, r2
     fe8:	009b      	lsls	r3, r3, #2
     fea:	4413      	add	r3, r2
     fec:	009b      	lsls	r3, r3, #2
     fee:	440b      	add	r3, r1
     ff0:	6819      	ldr	r1, [r3, #0]
     ff2:	9b03      	ldr	r3, [sp, #12]
     ff4:	1e5a      	subs	r2, r3, #1
     ff6:	4613      	mov	r3, r2
     ff8:	009b      	lsls	r3, r3, #2
     ffa:	4413      	add	r3, r2
     ffc:	009b      	lsls	r3, r3, #2
     ffe:	3328      	adds	r3, #40	; 0x28
    1000:	9a01      	ldr	r2, [sp, #4]
    1002:	4413      	add	r3, r2
    1004:	3304      	adds	r3, #4
    1006:	4618      	mov	r0, r3
    1008:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    100a:	9b03      	ldr	r3, [sp, #12]
    100c:	3b01      	subs	r3, #1
    100e:	9303      	str	r3, [sp, #12]
    1010:	9b03      	ldr	r3, [sp, #12]
    1012:	2b00      	cmp	r3, #0
    1014:	d1d0      	bne.n	fb8 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    1016:	bf00      	nop
    1018:	bf00      	nop
    101a:	b005      	add	sp, #20
    101c:	f85d fb04 	ldr.w	pc, [sp], #4
    1020:	00006cfc 	.word	0x00006cfc
    1024:	00006ccc 	.word	0x00006ccc
    1028:	00007334 	.word	0x00007334
    102c:	00006cac 	.word	0x00006cac
    1030:	00007278 	.word	0x00007278
    1034:	00006cbc 	.word	0x00006cbc
    1038:	00007308 	.word	0x00007308
    103c:	00006c7c 	.word	0x00006c7c
    1040:	00007250 	.word	0x00007250

00001044 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    1044:	b500      	push	{lr}
    1046:	b085      	sub	sp, #20
    1048:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    104a:	2301      	movs	r3, #1
    104c:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    104e:	9801      	ldr	r0, [sp, #4]
    1050:	f000 f818 	bl	1084 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    1054:	4b0a      	ldr	r3, [pc, #40]	; (1080 <Clock_Ip_Init+0x3c>)
    1056:	781b      	ldrb	r3, [r3, #0]
    1058:	2b00      	cmp	r3, #0
    105a:	d00a      	beq.n	1072 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    105c:	f000 fb74 	bl	1748 <Clock_Ip_GetPllStatus>
    1060:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    1062:	9b02      	ldr	r3, [sp, #8]
    1064:	2b00      	cmp	r3, #0
    1066:	d106      	bne.n	1076 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    1068:	f000 fbf2 	bl	1850 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    106c:	2300      	movs	r3, #0
    106e:	9303      	str	r3, [sp, #12]
    1070:	e001      	b.n	1076 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    1072:	2300      	movs	r3, #0
    1074:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    1076:	9b03      	ldr	r3, [sp, #12]
}
    1078:	4618      	mov	r0, r3
    107a:	b005      	add	sp, #20
    107c:	f85d fb04 	ldr.w	pc, [sp], #4
    1080:	1fff8b3c 	.word	0x1fff8b3c

00001084 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    1084:	b510      	push	{r4, lr}
    1086:	b084      	sub	sp, #16
    1088:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    108a:	4a9f      	ldr	r2, [pc, #636]	; (1308 <Clock_Ip_InitClock+0x284>)
    108c:	9b01      	ldr	r3, [sp, #4]
    108e:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    1090:	2101      	movs	r1, #1
    1092:	9801      	ldr	r0, [sp, #4]
    1094:	f003 fa90 	bl	45b8 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1098:	4b9b      	ldr	r3, [pc, #620]	; (1308 <Clock_Ip_InitClock+0x284>)
    109a:	681b      	ldr	r3, [r3, #0]
    109c:	2b00      	cmp	r3, #0
    109e:	d030      	beq.n	1102 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    10a0:	2300      	movs	r3, #0
    10a2:	9303      	str	r3, [sp, #12]
    10a4:	e027      	b.n	10f6 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    10a6:	9901      	ldr	r1, [sp, #4]
    10a8:	9a03      	ldr	r2, [sp, #12]
    10aa:	4613      	mov	r3, r2
    10ac:	009b      	lsls	r3, r3, #2
    10ae:	4413      	add	r3, r2
    10b0:	009b      	lsls	r3, r3, #2
    10b2:	440b      	add	r3, r1
    10b4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    10b8:	681a      	ldr	r2, [r3, #0]
    10ba:	4994      	ldr	r1, [pc, #592]	; (130c <Clock_Ip_InitClock+0x288>)
    10bc:	4613      	mov	r3, r2
    10be:	00db      	lsls	r3, r3, #3
    10c0:	4413      	add	r3, r2
    10c2:	440b      	add	r3, r1
    10c4:	3301      	adds	r3, #1
    10c6:	781b      	ldrb	r3, [r3, #0]
    10c8:	461a      	mov	r2, r3
    10ca:	4b91      	ldr	r3, [pc, #580]	; (1310 <Clock_Ip_InitClock+0x28c>)
    10cc:	5c9b      	ldrb	r3, [r3, r2]
    10ce:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    10d0:	4a90      	ldr	r2, [pc, #576]	; (1314 <Clock_Ip_InitClock+0x290>)
    10d2:	9b02      	ldr	r3, [sp, #8]
    10d4:	011b      	lsls	r3, r3, #4
    10d6:	4413      	add	r3, r2
    10d8:	6819      	ldr	r1, [r3, #0]
    10da:	9a03      	ldr	r2, [sp, #12]
    10dc:	4613      	mov	r3, r2
    10de:	009b      	lsls	r3, r3, #2
    10e0:	4413      	add	r3, r2
    10e2:	009b      	lsls	r3, r3, #2
    10e4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    10e8:	9a01      	ldr	r2, [sp, #4]
    10ea:	4413      	add	r3, r2
    10ec:	4618      	mov	r0, r3
    10ee:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    10f0:	9b03      	ldr	r3, [sp, #12]
    10f2:	3301      	adds	r3, #1
    10f4:	9303      	str	r3, [sp, #12]
    10f6:	9b01      	ldr	r3, [sp, #4]
    10f8:	7c9b      	ldrb	r3, [r3, #18]
    10fa:	461a      	mov	r2, r3
    10fc:	9b03      	ldr	r3, [sp, #12]
    10fe:	4293      	cmp	r3, r2
    1100:	d3d1      	bcc.n	10a6 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    1102:	9801      	ldr	r0, [sp, #4]
    1104:	f7ff feca 	bl	e9c <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1108:	2300      	movs	r3, #0
    110a:	9303      	str	r3, [sp, #12]
    110c:	e029      	b.n	1162 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    110e:	9901      	ldr	r1, [sp, #4]
    1110:	9a03      	ldr	r2, [sp, #12]
    1112:	4613      	mov	r3, r2
    1114:	005b      	lsls	r3, r3, #1
    1116:	4413      	add	r3, r2
    1118:	009b      	lsls	r3, r3, #2
    111a:	440b      	add	r3, r1
    111c:	3314      	adds	r3, #20
    111e:	681a      	ldr	r2, [r3, #0]
    1120:	497a      	ldr	r1, [pc, #488]	; (130c <Clock_Ip_InitClock+0x288>)
    1122:	4613      	mov	r3, r2
    1124:	00db      	lsls	r3, r3, #3
    1126:	4413      	add	r3, r2
    1128:	440b      	add	r3, r1
    112a:	3301      	adds	r3, #1
    112c:	781b      	ldrb	r3, [r3, #0]
    112e:	461a      	mov	r2, r3
    1130:	4b79      	ldr	r3, [pc, #484]	; (1318 <Clock_Ip_InitClock+0x294>)
    1132:	5c9b      	ldrb	r3, [r3, r2]
    1134:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    1136:	4979      	ldr	r1, [pc, #484]	; (131c <Clock_Ip_InitClock+0x298>)
    1138:	9a02      	ldr	r2, [sp, #8]
    113a:	4613      	mov	r3, r2
    113c:	005b      	lsls	r3, r3, #1
    113e:	4413      	add	r3, r2
    1140:	009b      	lsls	r3, r3, #2
    1142:	440b      	add	r3, r1
    1144:	6819      	ldr	r1, [r3, #0]
    1146:	9a03      	ldr	r2, [sp, #12]
    1148:	4613      	mov	r3, r2
    114a:	005b      	lsls	r3, r3, #1
    114c:	4413      	add	r3, r2
    114e:	009b      	lsls	r3, r3, #2
    1150:	3310      	adds	r3, #16
    1152:	9a01      	ldr	r2, [sp, #4]
    1154:	4413      	add	r3, r2
    1156:	3304      	adds	r3, #4
    1158:	4618      	mov	r0, r3
    115a:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    115c:	9b03      	ldr	r3, [sp, #12]
    115e:	3301      	adds	r3, #1
    1160:	9303      	str	r3, [sp, #12]
    1162:	9b01      	ldr	r3, [sp, #4]
    1164:	7a1b      	ldrb	r3, [r3, #8]
    1166:	461a      	mov	r2, r3
    1168:	9b03      	ldr	r3, [sp, #12]
    116a:	4293      	cmp	r3, r2
    116c:	d3cf      	bcc.n	110e <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    116e:	2300      	movs	r3, #0
    1170:	9303      	str	r3, [sp, #12]
    1172:	e02a      	b.n	11ca <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1174:	9901      	ldr	r1, [sp, #4]
    1176:	9a03      	ldr	r2, [sp, #12]
    1178:	4613      	mov	r3, r2
    117a:	009b      	lsls	r3, r3, #2
    117c:	4413      	add	r3, r2
    117e:	009b      	lsls	r3, r3, #2
    1180:	440b      	add	r3, r1
    1182:	332c      	adds	r3, #44	; 0x2c
    1184:	681a      	ldr	r2, [r3, #0]
    1186:	4961      	ldr	r1, [pc, #388]	; (130c <Clock_Ip_InitClock+0x288>)
    1188:	4613      	mov	r3, r2
    118a:	00db      	lsls	r3, r3, #3
    118c:	4413      	add	r3, r2
    118e:	440b      	add	r3, r1
    1190:	3301      	adds	r3, #1
    1192:	781b      	ldrb	r3, [r3, #0]
    1194:	461a      	mov	r2, r3
    1196:	4b62      	ldr	r3, [pc, #392]	; (1320 <Clock_Ip_InitClock+0x29c>)
    1198:	5c9b      	ldrb	r3, [r3, r2]
    119a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    119c:	4961      	ldr	r1, [pc, #388]	; (1324 <Clock_Ip_InitClock+0x2a0>)
    119e:	9a02      	ldr	r2, [sp, #8]
    11a0:	4613      	mov	r3, r2
    11a2:	009b      	lsls	r3, r3, #2
    11a4:	4413      	add	r3, r2
    11a6:	009b      	lsls	r3, r3, #2
    11a8:	440b      	add	r3, r1
    11aa:	3304      	adds	r3, #4
    11ac:	6819      	ldr	r1, [r3, #0]
    11ae:	9a03      	ldr	r2, [sp, #12]
    11b0:	4613      	mov	r3, r2
    11b2:	009b      	lsls	r3, r3, #2
    11b4:	4413      	add	r3, r2
    11b6:	009b      	lsls	r3, r3, #2
    11b8:	3328      	adds	r3, #40	; 0x28
    11ba:	9a01      	ldr	r2, [sp, #4]
    11bc:	4413      	add	r3, r2
    11be:	3304      	adds	r3, #4
    11c0:	4618      	mov	r0, r3
    11c2:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    11c4:	9b03      	ldr	r3, [sp, #12]
    11c6:	3301      	adds	r3, #1
    11c8:	9303      	str	r3, [sp, #12]
    11ca:	9b01      	ldr	r3, [sp, #4]
    11cc:	7a5b      	ldrb	r3, [r3, #9]
    11ce:	461a      	mov	r2, r3
    11d0:	9b03      	ldr	r3, [sp, #12]
    11d2:	4293      	cmp	r3, r2
    11d4:	d3ce      	bcc.n	1174 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    11d6:	9801      	ldr	r0, [sp, #4]
    11d8:	f7ff fdb0 	bl	d3c <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    11dc:	2300      	movs	r3, #0
    11de:	9303      	str	r3, [sp, #12]
    11e0:	e028      	b.n	1234 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    11e2:	9901      	ldr	r1, [sp, #4]
    11e4:	9a03      	ldr	r2, [sp, #12]
    11e6:	4613      	mov	r3, r2
    11e8:	009b      	lsls	r3, r3, #2
    11ea:	4413      	add	r3, r2
    11ec:	009b      	lsls	r3, r3, #2
    11ee:	440b      	add	r3, r1
    11f0:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    11f4:	681a      	ldr	r2, [r3, #0]
    11f6:	4945      	ldr	r1, [pc, #276]	; (130c <Clock_Ip_InitClock+0x288>)
    11f8:	4613      	mov	r3, r2
    11fa:	00db      	lsls	r3, r3, #3
    11fc:	4413      	add	r3, r2
    11fe:	440b      	add	r3, r1
    1200:	3301      	adds	r3, #1
    1202:	781b      	ldrb	r3, [r3, #0]
    1204:	461a      	mov	r2, r3
    1206:	4b48      	ldr	r3, [pc, #288]	; (1328 <Clock_Ip_InitClock+0x2a4>)
    1208:	5c9b      	ldrb	r3, [r3, r2]
    120a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    120c:	4a47      	ldr	r2, [pc, #284]	; (132c <Clock_Ip_InitClock+0x2a8>)
    120e:	9b02      	ldr	r3, [sp, #8]
    1210:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1214:	9a03      	ldr	r2, [sp, #12]
    1216:	4613      	mov	r3, r2
    1218:	009b      	lsls	r3, r3, #2
    121a:	4413      	add	r3, r2
    121c:	009b      	lsls	r3, r3, #2
    121e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    1222:	9a01      	ldr	r2, [sp, #4]
    1224:	4413      	add	r3, r2
    1226:	3304      	adds	r3, #4
    1228:	9903      	ldr	r1, [sp, #12]
    122a:	4618      	mov	r0, r3
    122c:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    122e:	9b03      	ldr	r3, [sp, #12]
    1230:	3301      	adds	r3, #1
    1232:	9303      	str	r3, [sp, #12]
    1234:	9b01      	ldr	r3, [sp, #4]
    1236:	7c5b      	ldrb	r3, [r3, #17]
    1238:	461a      	mov	r2, r3
    123a:	9b03      	ldr	r3, [sp, #12]
    123c:	4293      	cmp	r3, r2
    123e:	d3d0      	bcc.n	11e2 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1240:	2300      	movs	r3, #0
    1242:	9303      	str	r3, [sp, #12]
    1244:	e026      	b.n	1294 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1246:	9901      	ldr	r1, [sp, #4]
    1248:	9a03      	ldr	r2, [sp, #12]
    124a:	4613      	mov	r3, r2
    124c:	005b      	lsls	r3, r3, #1
    124e:	4413      	add	r3, r2
    1250:	009b      	lsls	r3, r3, #2
    1252:	440b      	add	r3, r1
    1254:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1258:	681a      	ldr	r2, [r3, #0]
    125a:	492c      	ldr	r1, [pc, #176]	; (130c <Clock_Ip_InitClock+0x288>)
    125c:	4613      	mov	r3, r2
    125e:	00db      	lsls	r3, r3, #3
    1260:	4413      	add	r3, r2
    1262:	440b      	add	r3, r1
    1264:	3301      	adds	r3, #1
    1266:	781b      	ldrb	r3, [r3, #0]
    1268:	461a      	mov	r2, r3
    126a:	4b31      	ldr	r3, [pc, #196]	; (1330 <Clock_Ip_InitClock+0x2ac>)
    126c:	5c9b      	ldrb	r3, [r3, r2]
    126e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    1270:	4a30      	ldr	r2, [pc, #192]	; (1334 <Clock_Ip_InitClock+0x2b0>)
    1272:	9b02      	ldr	r3, [sp, #8]
    1274:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    1278:	9a03      	ldr	r2, [sp, #12]
    127a:	4613      	mov	r3, r2
    127c:	005b      	lsls	r3, r3, #1
    127e:	4413      	add	r3, r2
    1280:	009b      	lsls	r3, r3, #2
    1282:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1286:	9a01      	ldr	r2, [sp, #4]
    1288:	4413      	add	r3, r2
    128a:	4618      	mov	r0, r3
    128c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    128e:	9b03      	ldr	r3, [sp, #12]
    1290:	3301      	adds	r3, #1
    1292:	9303      	str	r3, [sp, #12]
    1294:	9b01      	ldr	r3, [sp, #4]
    1296:	7b5b      	ldrb	r3, [r3, #13]
    1298:	461a      	mov	r2, r3
    129a:	9b03      	ldr	r3, [sp, #12]
    129c:	4293      	cmp	r3, r2
    129e:	d3d2      	bcc.n	1246 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    12a0:	2300      	movs	r3, #0
    12a2:	9303      	str	r3, [sp, #12]
    12a4:	e026      	b.n	12f4 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    12a6:	9901      	ldr	r1, [sp, #4]
    12a8:	9a03      	ldr	r2, [sp, #12]
    12aa:	4613      	mov	r3, r2
    12ac:	005b      	lsls	r3, r3, #1
    12ae:	4413      	add	r3, r2
    12b0:	009b      	lsls	r3, r3, #2
    12b2:	440b      	add	r3, r1
    12b4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    12b8:	681a      	ldr	r2, [r3, #0]
    12ba:	4914      	ldr	r1, [pc, #80]	; (130c <Clock_Ip_InitClock+0x288>)
    12bc:	4613      	mov	r3, r2
    12be:	00db      	lsls	r3, r3, #3
    12c0:	4413      	add	r3, r2
    12c2:	440b      	add	r3, r1
    12c4:	3301      	adds	r3, #1
    12c6:	781b      	ldrb	r3, [r3, #0]
    12c8:	461a      	mov	r2, r3
    12ca:	4b1b      	ldr	r3, [pc, #108]	; (1338 <Clock_Ip_InitClock+0x2b4>)
    12cc:	5c9b      	ldrb	r3, [r3, r2]
    12ce:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    12d0:	4a1a      	ldr	r2, [pc, #104]	; (133c <Clock_Ip_InitClock+0x2b8>)
    12d2:	9b02      	ldr	r3, [sp, #8]
    12d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    12d8:	9a03      	ldr	r2, [sp, #12]
    12da:	4613      	mov	r3, r2
    12dc:	005b      	lsls	r3, r3, #1
    12de:	4413      	add	r3, r2
    12e0:	009b      	lsls	r3, r3, #2
    12e2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    12e6:	9a01      	ldr	r2, [sp, #4]
    12e8:	4413      	add	r3, r2
    12ea:	4618      	mov	r0, r3
    12ec:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    12ee:	9b03      	ldr	r3, [sp, #12]
    12f0:	3301      	adds	r3, #1
    12f2:	9303      	str	r3, [sp, #12]
    12f4:	9b01      	ldr	r3, [sp, #4]
    12f6:	7b1b      	ldrb	r3, [r3, #12]
    12f8:	461a      	mov	r2, r3
    12fa:	9b03      	ldr	r3, [sp, #12]
    12fc:	4293      	cmp	r3, r2
    12fe:	d3d2      	bcc.n	12a6 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1300:	2300      	movs	r3, #0
    1302:	9303      	str	r3, [sp, #12]
    1304:	e044      	b.n	1390 <Clock_Ip_InitClock+0x30c>
    1306:	bf00      	nop
    1308:	1fff8b34 	.word	0x1fff8b34
    130c:	00006cfc 	.word	0x00006cfc
    1310:	00006cec 	.word	0x00006cec
    1314:	000072f8 	.word	0x000072f8
    1318:	00006c8c 	.word	0x00006c8c
    131c:	000072bc 	.word	0x000072bc
    1320:	00006c7c 	.word	0x00006c7c
    1324:	00007250 	.word	0x00007250
    1328:	00006cdc 	.word	0x00006cdc
    132c:	00007330 	.word	0x00007330
    1330:	00006c6c 	.word	0x00006c6c
    1334:	00007248 	.word	0x00007248
    1338:	00006c5c 	.word	0x00006c5c
    133c:	0000720c 	.word	0x0000720c
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1340:	9901      	ldr	r1, [sp, #4]
    1342:	9a03      	ldr	r2, [sp, #12]
    1344:	4613      	mov	r3, r2
    1346:	005b      	lsls	r3, r3, #1
    1348:	4413      	add	r3, r2
    134a:	009b      	lsls	r3, r3, #2
    134c:	440b      	add	r3, r1
    134e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1352:	681a      	ldr	r2, [r3, #0]
    1354:	49ac      	ldr	r1, [pc, #688]	; (1608 <Clock_Ip_InitClock+0x584>)
    1356:	4613      	mov	r3, r2
    1358:	00db      	lsls	r3, r3, #3
    135a:	4413      	add	r3, r2
    135c:	440b      	add	r3, r1
    135e:	3301      	adds	r3, #1
    1360:	781b      	ldrb	r3, [r3, #0]
    1362:	461a      	mov	r2, r3
    1364:	4ba9      	ldr	r3, [pc, #676]	; (160c <Clock_Ip_InitClock+0x588>)
    1366:	5c9b      	ldrb	r3, [r3, r2]
    1368:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    136a:	4aa9      	ldr	r2, [pc, #676]	; (1610 <Clock_Ip_InitClock+0x58c>)
    136c:	9b02      	ldr	r3, [sp, #8]
    136e:	00db      	lsls	r3, r3, #3
    1370:	4413      	add	r3, r2
    1372:	6859      	ldr	r1, [r3, #4]
    1374:	9a03      	ldr	r2, [sp, #12]
    1376:	4613      	mov	r3, r2
    1378:	005b      	lsls	r3, r3, #1
    137a:	4413      	add	r3, r2
    137c:	009b      	lsls	r3, r3, #2
    137e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1382:	9a01      	ldr	r2, [sp, #4]
    1384:	4413      	add	r3, r2
    1386:	4618      	mov	r0, r3
    1388:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    138a:	9b03      	ldr	r3, [sp, #12]
    138c:	3301      	adds	r3, #1
    138e:	9303      	str	r3, [sp, #12]
    1390:	9b01      	ldr	r3, [sp, #4]
    1392:	7b5b      	ldrb	r3, [r3, #13]
    1394:	461a      	mov	r2, r3
    1396:	9b03      	ldr	r3, [sp, #12]
    1398:	4293      	cmp	r3, r2
    139a:	d3d1      	bcc.n	1340 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    139c:	2300      	movs	r3, #0
    139e:	9303      	str	r3, [sp, #12]
    13a0:	e029      	b.n	13f6 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    13a2:	9901      	ldr	r1, [sp, #4]
    13a4:	9a03      	ldr	r2, [sp, #12]
    13a6:	4613      	mov	r3, r2
    13a8:	009b      	lsls	r3, r3, #2
    13aa:	4413      	add	r3, r2
    13ac:	00db      	lsls	r3, r3, #3
    13ae:	440b      	add	r3, r1
    13b0:	3340      	adds	r3, #64	; 0x40
    13b2:	681a      	ldr	r2, [r3, #0]
    13b4:	4994      	ldr	r1, [pc, #592]	; (1608 <Clock_Ip_InitClock+0x584>)
    13b6:	4613      	mov	r3, r2
    13b8:	00db      	lsls	r3, r3, #3
    13ba:	4413      	add	r3, r2
    13bc:	440b      	add	r3, r1
    13be:	3301      	adds	r3, #1
    13c0:	781b      	ldrb	r3, [r3, #0]
    13c2:	461a      	mov	r2, r3
    13c4:	4b93      	ldr	r3, [pc, #588]	; (1614 <Clock_Ip_InitClock+0x590>)
    13c6:	5c9b      	ldrb	r3, [r3, r2]
    13c8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    13ca:	4993      	ldr	r1, [pc, #588]	; (1618 <Clock_Ip_InitClock+0x594>)
    13cc:	9a02      	ldr	r2, [sp, #8]
    13ce:	4613      	mov	r3, r2
    13d0:	009b      	lsls	r3, r3, #2
    13d2:	4413      	add	r3, r2
    13d4:	009b      	lsls	r3, r3, #2
    13d6:	440b      	add	r3, r1
    13d8:	3304      	adds	r3, #4
    13da:	6819      	ldr	r1, [r3, #0]
    13dc:	9a03      	ldr	r2, [sp, #12]
    13de:	4613      	mov	r3, r2
    13e0:	009b      	lsls	r3, r3, #2
    13e2:	4413      	add	r3, r2
    13e4:	00db      	lsls	r3, r3, #3
    13e6:	3340      	adds	r3, #64	; 0x40
    13e8:	9a01      	ldr	r2, [sp, #4]
    13ea:	4413      	add	r3, r2
    13ec:	4618      	mov	r0, r3
    13ee:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    13f0:	9b03      	ldr	r3, [sp, #12]
    13f2:	3301      	adds	r3, #1
    13f4:	9303      	str	r3, [sp, #12]
    13f6:	9b01      	ldr	r3, [sp, #4]
    13f8:	7a9b      	ldrb	r3, [r3, #10]
    13fa:	461a      	mov	r2, r3
    13fc:	9b03      	ldr	r3, [sp, #12]
    13fe:	4293      	cmp	r3, r2
    1400:	d3cf      	bcc.n	13a2 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1402:	2300      	movs	r3, #0
    1404:	9303      	str	r3, [sp, #12]
    1406:	e029      	b.n	145c <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1408:	9901      	ldr	r1, [sp, #4]
    140a:	9a03      	ldr	r2, [sp, #12]
    140c:	4613      	mov	r3, r2
    140e:	009b      	lsls	r3, r3, #2
    1410:	4413      	add	r3, r2
    1412:	009b      	lsls	r3, r3, #2
    1414:	440b      	add	r3, r1
    1416:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    141a:	681a      	ldr	r2, [r3, #0]
    141c:	497a      	ldr	r1, [pc, #488]	; (1608 <Clock_Ip_InitClock+0x584>)
    141e:	4613      	mov	r3, r2
    1420:	00db      	lsls	r3, r3, #3
    1422:	4413      	add	r3, r2
    1424:	440b      	add	r3, r1
    1426:	3301      	adds	r3, #1
    1428:	781b      	ldrb	r3, [r3, #0]
    142a:	461a      	mov	r2, r3
    142c:	4b7b      	ldr	r3, [pc, #492]	; (161c <Clock_Ip_InitClock+0x598>)
    142e:	5c9b      	ldrb	r3, [r3, r2]
    1430:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    1432:	4a7b      	ldr	r2, [pc, #492]	; (1620 <Clock_Ip_InitClock+0x59c>)
    1434:	9b02      	ldr	r3, [sp, #8]
    1436:	011b      	lsls	r3, r3, #4
    1438:	4413      	add	r3, r2
    143a:	3304      	adds	r3, #4
    143c:	681c      	ldr	r4, [r3, #0]
    143e:	9a03      	ldr	r2, [sp, #12]
    1440:	4613      	mov	r3, r2
    1442:	009b      	lsls	r3, r3, #2
    1444:	4413      	add	r3, r2
    1446:	009b      	lsls	r3, r3, #2
    1448:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    144c:	9a01      	ldr	r2, [sp, #4]
    144e:	4413      	add	r3, r2
    1450:	9903      	ldr	r1, [sp, #12]
    1452:	4618      	mov	r0, r3
    1454:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1456:	9b03      	ldr	r3, [sp, #12]
    1458:	3301      	adds	r3, #1
    145a:	9303      	str	r3, [sp, #12]
    145c:	9b01      	ldr	r3, [sp, #4]
    145e:	7c9b      	ldrb	r3, [r3, #18]
    1460:	461a      	mov	r2, r3
    1462:	9b03      	ldr	r3, [sp, #12]
    1464:	4293      	cmp	r3, r2
    1466:	d3cf      	bcc.n	1408 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1468:	2300      	movs	r3, #0
    146a:	9303      	str	r3, [sp, #12]
    146c:	e02a      	b.n	14c4 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    146e:	9901      	ldr	r1, [sp, #4]
    1470:	9a03      	ldr	r2, [sp, #12]
    1472:	4613      	mov	r3, r2
    1474:	009b      	lsls	r3, r3, #2
    1476:	4413      	add	r3, r2
    1478:	009b      	lsls	r3, r3, #2
    147a:	440b      	add	r3, r1
    147c:	332c      	adds	r3, #44	; 0x2c
    147e:	681a      	ldr	r2, [r3, #0]
    1480:	4961      	ldr	r1, [pc, #388]	; (1608 <Clock_Ip_InitClock+0x584>)
    1482:	4613      	mov	r3, r2
    1484:	00db      	lsls	r3, r3, #3
    1486:	4413      	add	r3, r2
    1488:	440b      	add	r3, r1
    148a:	3301      	adds	r3, #1
    148c:	781b      	ldrb	r3, [r3, #0]
    148e:	461a      	mov	r2, r3
    1490:	4b64      	ldr	r3, [pc, #400]	; (1624 <Clock_Ip_InitClock+0x5a0>)
    1492:	5c9b      	ldrb	r3, [r3, r2]
    1494:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    1496:	4964      	ldr	r1, [pc, #400]	; (1628 <Clock_Ip_InitClock+0x5a4>)
    1498:	9a02      	ldr	r2, [sp, #8]
    149a:	4613      	mov	r3, r2
    149c:	009b      	lsls	r3, r3, #2
    149e:	4413      	add	r3, r2
    14a0:	009b      	lsls	r3, r3, #2
    14a2:	440b      	add	r3, r1
    14a4:	3308      	adds	r3, #8
    14a6:	6819      	ldr	r1, [r3, #0]
    14a8:	9a03      	ldr	r2, [sp, #12]
    14aa:	4613      	mov	r3, r2
    14ac:	009b      	lsls	r3, r3, #2
    14ae:	4413      	add	r3, r2
    14b0:	009b      	lsls	r3, r3, #2
    14b2:	3328      	adds	r3, #40	; 0x28
    14b4:	9a01      	ldr	r2, [sp, #4]
    14b6:	4413      	add	r3, r2
    14b8:	3304      	adds	r3, #4
    14ba:	4618      	mov	r0, r3
    14bc:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    14be:	9b03      	ldr	r3, [sp, #12]
    14c0:	3301      	adds	r3, #1
    14c2:	9303      	str	r3, [sp, #12]
    14c4:	9b01      	ldr	r3, [sp, #4]
    14c6:	7a5b      	ldrb	r3, [r3, #9]
    14c8:	461a      	mov	r2, r3
    14ca:	9b03      	ldr	r3, [sp, #12]
    14cc:	4293      	cmp	r3, r2
    14ce:	d3ce      	bcc.n	146e <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    14d0:	2300      	movs	r3, #0
    14d2:	9303      	str	r3, [sp, #12]
    14d4:	e029      	b.n	152a <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    14d6:	9901      	ldr	r1, [sp, #4]
    14d8:	9a03      	ldr	r2, [sp, #12]
    14da:	4613      	mov	r3, r2
    14dc:	009b      	lsls	r3, r3, #2
    14de:	4413      	add	r3, r2
    14e0:	00db      	lsls	r3, r3, #3
    14e2:	440b      	add	r3, r1
    14e4:	3340      	adds	r3, #64	; 0x40
    14e6:	681a      	ldr	r2, [r3, #0]
    14e8:	4947      	ldr	r1, [pc, #284]	; (1608 <Clock_Ip_InitClock+0x584>)
    14ea:	4613      	mov	r3, r2
    14ec:	00db      	lsls	r3, r3, #3
    14ee:	4413      	add	r3, r2
    14f0:	440b      	add	r3, r1
    14f2:	3301      	adds	r3, #1
    14f4:	781b      	ldrb	r3, [r3, #0]
    14f6:	461a      	mov	r2, r3
    14f8:	4b46      	ldr	r3, [pc, #280]	; (1614 <Clock_Ip_InitClock+0x590>)
    14fa:	5c9b      	ldrb	r3, [r3, r2]
    14fc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    14fe:	4946      	ldr	r1, [pc, #280]	; (1618 <Clock_Ip_InitClock+0x594>)
    1500:	9a02      	ldr	r2, [sp, #8]
    1502:	4613      	mov	r3, r2
    1504:	009b      	lsls	r3, r3, #2
    1506:	4413      	add	r3, r2
    1508:	009b      	lsls	r3, r3, #2
    150a:	440b      	add	r3, r1
    150c:	330c      	adds	r3, #12
    150e:	6819      	ldr	r1, [r3, #0]
    1510:	9a03      	ldr	r2, [sp, #12]
    1512:	4613      	mov	r3, r2
    1514:	009b      	lsls	r3, r3, #2
    1516:	4413      	add	r3, r2
    1518:	00db      	lsls	r3, r3, #3
    151a:	3340      	adds	r3, #64	; 0x40
    151c:	9a01      	ldr	r2, [sp, #4]
    151e:	4413      	add	r3, r2
    1520:	4618      	mov	r0, r3
    1522:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1524:	9b03      	ldr	r3, [sp, #12]
    1526:	3301      	adds	r3, #1
    1528:	9303      	str	r3, [sp, #12]
    152a:	9b01      	ldr	r3, [sp, #4]
    152c:	7a9b      	ldrb	r3, [r3, #10]
    152e:	461a      	mov	r2, r3
    1530:	9b03      	ldr	r3, [sp, #12]
    1532:	4293      	cmp	r3, r2
    1534:	d3cf      	bcc.n	14d6 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1536:	2300      	movs	r3, #0
    1538:	9303      	str	r3, [sp, #12]
    153a:	e025      	b.n	1588 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    153c:	9a01      	ldr	r2, [sp, #4]
    153e:	9b03      	ldr	r3, [sp, #12]
    1540:	3324      	adds	r3, #36	; 0x24
    1542:	011b      	lsls	r3, r3, #4
    1544:	4413      	add	r3, r2
    1546:	3304      	adds	r3, #4
    1548:	681a      	ldr	r2, [r3, #0]
    154a:	492f      	ldr	r1, [pc, #188]	; (1608 <Clock_Ip_InitClock+0x584>)
    154c:	4613      	mov	r3, r2
    154e:	00db      	lsls	r3, r3, #3
    1550:	4413      	add	r3, r2
    1552:	440b      	add	r3, r1
    1554:	3301      	adds	r3, #1
    1556:	781b      	ldrb	r3, [r3, #0]
    1558:	461a      	mov	r2, r3
    155a:	4b34      	ldr	r3, [pc, #208]	; (162c <Clock_Ip_InitClock+0x5a8>)
    155c:	5c9b      	ldrb	r3, [r3, r2]
    155e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    1560:	4933      	ldr	r1, [pc, #204]	; (1630 <Clock_Ip_InitClock+0x5ac>)
    1562:	9a02      	ldr	r2, [sp, #8]
    1564:	4613      	mov	r3, r2
    1566:	005b      	lsls	r3, r3, #1
    1568:	4413      	add	r3, r2
    156a:	009b      	lsls	r3, r3, #2
    156c:	440b      	add	r3, r1
    156e:	3304      	adds	r3, #4
    1570:	681b      	ldr	r3, [r3, #0]
    1572:	9a03      	ldr	r2, [sp, #12]
    1574:	3224      	adds	r2, #36	; 0x24
    1576:	0112      	lsls	r2, r2, #4
    1578:	9901      	ldr	r1, [sp, #4]
    157a:	440a      	add	r2, r1
    157c:	3204      	adds	r2, #4
    157e:	4610      	mov	r0, r2
    1580:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1582:	9b03      	ldr	r3, [sp, #12]
    1584:	3301      	adds	r3, #1
    1586:	9303      	str	r3, [sp, #12]
    1588:	9b01      	ldr	r3, [sp, #4]
    158a:	7b9b      	ldrb	r3, [r3, #14]
    158c:	461a      	mov	r2, r3
    158e:	9b03      	ldr	r3, [sp, #12]
    1590:	4293      	cmp	r3, r2
    1592:	d3d3      	bcc.n	153c <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    1594:	4b27      	ldr	r3, [pc, #156]	; (1634 <Clock_Ip_InitClock+0x5b0>)
    1596:	2200      	movs	r2, #0
    1598:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    159a:	4b26      	ldr	r3, [pc, #152]	; (1634 <Clock_Ip_InitClock+0x5b0>)
    159c:	2200      	movs	r2, #0
    159e:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    15a0:	4b24      	ldr	r3, [pc, #144]	; (1634 <Clock_Ip_InitClock+0x5b0>)
    15a2:	2201      	movs	r2, #1
    15a4:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    15a6:	4b23      	ldr	r3, [pc, #140]	; (1634 <Clock_Ip_InitClock+0x5b0>)
    15a8:	2200      	movs	r2, #0
    15aa:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    15ac:	f000 fa9c 	bl	1ae8 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    15b0:	2300      	movs	r3, #0
    15b2:	9303      	str	r3, [sp, #12]
    15b4:	e04c      	b.n	1650 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    15b6:	9a01      	ldr	r2, [sp, #4]
    15b8:	9b03      	ldr	r3, [sp, #12]
    15ba:	330d      	adds	r3, #13
    15bc:	00db      	lsls	r3, r3, #3
    15be:	4413      	add	r3, r2
    15c0:	685b      	ldr	r3, [r3, #4]
    15c2:	4a1d      	ldr	r2, [pc, #116]	; (1638 <Clock_Ip_InitClock+0x5b4>)
    15c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    15c8:	2b03      	cmp	r3, #3
    15ca:	d03b      	beq.n	1644 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    15cc:	9b01      	ldr	r3, [sp, #4]
    15ce:	9a03      	ldr	r2, [sp, #12]
    15d0:	320d      	adds	r2, #13
    15d2:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    15d6:	490c      	ldr	r1, [pc, #48]	; (1608 <Clock_Ip_InitClock+0x584>)
    15d8:	4613      	mov	r3, r2
    15da:	00db      	lsls	r3, r3, #3
    15dc:	4413      	add	r3, r2
    15de:	440b      	add	r3, r1
    15e0:	3301      	adds	r3, #1
    15e2:	781b      	ldrb	r3, [r3, #0]
    15e4:	461a      	mov	r2, r3
    15e6:	4b15      	ldr	r3, [pc, #84]	; (163c <Clock_Ip_InitClock+0x5b8>)
    15e8:	5c9b      	ldrb	r3, [r3, r2]
    15ea:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    15ec:	4a14      	ldr	r2, [pc, #80]	; (1640 <Clock_Ip_InitClock+0x5bc>)
    15ee:	9b02      	ldr	r3, [sp, #8]
    15f0:	00db      	lsls	r3, r3, #3
    15f2:	4413      	add	r3, r2
    15f4:	685b      	ldr	r3, [r3, #4]
    15f6:	9a03      	ldr	r2, [sp, #12]
    15f8:	320d      	adds	r2, #13
    15fa:	00d2      	lsls	r2, r2, #3
    15fc:	9901      	ldr	r1, [sp, #4]
    15fe:	440a      	add	r2, r1
    1600:	4610      	mov	r0, r2
    1602:	4798      	blx	r3
    1604:	e021      	b.n	164a <Clock_Ip_InitClock+0x5c6>
    1606:	bf00      	nop
    1608:	00006cfc 	.word	0x00006cfc
    160c:	00006c6c 	.word	0x00006c6c
    1610:	00007248 	.word	0x00007248
    1614:	00006cbc 	.word	0x00006cbc
    1618:	00007308 	.word	0x00007308
    161c:	00006cec 	.word	0x00006cec
    1620:	000072f8 	.word	0x000072f8
    1624:	00006c7c 	.word	0x00006c7c
    1628:	00007250 	.word	0x00007250
    162c:	00006cac 	.word	0x00006cac
    1630:	00007278 	.word	0x00007278
    1634:	1fff8b3c 	.word	0x1fff8b3c
    1638:	00007148 	.word	0x00007148
    163c:	00006ccc 	.word	0x00006ccc
    1640:	00007334 	.word	0x00007334
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    1644:	4b3a      	ldr	r3, [pc, #232]	; (1730 <Clock_Ip_InitClock+0x6ac>)
    1646:	2201      	movs	r2, #1
    1648:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    164a:	9b03      	ldr	r3, [sp, #12]
    164c:	3301      	adds	r3, #1
    164e:	9303      	str	r3, [sp, #12]
    1650:	9b01      	ldr	r3, [sp, #4]
    1652:	7adb      	ldrb	r3, [r3, #11]
    1654:	461a      	mov	r2, r3
    1656:	9b03      	ldr	r3, [sp, #12]
    1658:	4293      	cmp	r3, r2
    165a:	d3ac      	bcc.n	15b6 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    165c:	4b34      	ldr	r3, [pc, #208]	; (1730 <Clock_Ip_InitClock+0x6ac>)
    165e:	781b      	ldrb	r3, [r3, #0]
    1660:	f083 0301 	eor.w	r3, r3, #1
    1664:	b2db      	uxtb	r3, r3
    1666:	2b00      	cmp	r3, #0
    1668:	d05e      	beq.n	1728 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    166a:	2300      	movs	r3, #0
    166c:	9303      	str	r3, [sp, #12]
    166e:	e01f      	b.n	16b0 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1670:	9a01      	ldr	r2, [sp, #4]
    1672:	9b03      	ldr	r3, [sp, #12]
    1674:	334e      	adds	r3, #78	; 0x4e
    1676:	00db      	lsls	r3, r3, #3
    1678:	4413      	add	r3, r2
    167a:	685a      	ldr	r2, [r3, #4]
    167c:	492d      	ldr	r1, [pc, #180]	; (1734 <Clock_Ip_InitClock+0x6b0>)
    167e:	4613      	mov	r3, r2
    1680:	00db      	lsls	r3, r3, #3
    1682:	4413      	add	r3, r2
    1684:	440b      	add	r3, r1
    1686:	3301      	adds	r3, #1
    1688:	781b      	ldrb	r3, [r3, #0]
    168a:	461a      	mov	r2, r3
    168c:	4b2a      	ldr	r3, [pc, #168]	; (1738 <Clock_Ip_InitClock+0x6b4>)
    168e:	5c9b      	ldrb	r3, [r3, r2]
    1690:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    1692:	4a2a      	ldr	r2, [pc, #168]	; (173c <Clock_Ip_InitClock+0x6b8>)
    1694:	9b02      	ldr	r3, [sp, #8]
    1696:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    169a:	9a03      	ldr	r2, [sp, #12]
    169c:	324e      	adds	r2, #78	; 0x4e
    169e:	00d2      	lsls	r2, r2, #3
    16a0:	9901      	ldr	r1, [sp, #4]
    16a2:	440a      	add	r2, r1
    16a4:	3204      	adds	r2, #4
    16a6:	4610      	mov	r0, r2
    16a8:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    16aa:	9b03      	ldr	r3, [sp, #12]
    16ac:	3301      	adds	r3, #1
    16ae:	9303      	str	r3, [sp, #12]
    16b0:	9b01      	ldr	r3, [sp, #4]
    16b2:	7c1b      	ldrb	r3, [r3, #16]
    16b4:	461a      	mov	r2, r3
    16b6:	9b03      	ldr	r3, [sp, #12]
    16b8:	4293      	cmp	r3, r2
    16ba:	d3d9      	bcc.n	1670 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    16bc:	2300      	movs	r3, #0
    16be:	9303      	str	r3, [sp, #12]
    16c0:	e028      	b.n	1714 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    16c2:	9901      	ldr	r1, [sp, #4]
    16c4:	9a03      	ldr	r2, [sp, #12]
    16c6:	4613      	mov	r3, r2
    16c8:	009b      	lsls	r3, r3, #2
    16ca:	4413      	add	r3, r2
    16cc:	009b      	lsls	r3, r3, #2
    16ce:	440b      	add	r3, r1
    16d0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    16d4:	681a      	ldr	r2, [r3, #0]
    16d6:	4917      	ldr	r1, [pc, #92]	; (1734 <Clock_Ip_InitClock+0x6b0>)
    16d8:	4613      	mov	r3, r2
    16da:	00db      	lsls	r3, r3, #3
    16dc:	4413      	add	r3, r2
    16de:	440b      	add	r3, r1
    16e0:	3301      	adds	r3, #1
    16e2:	781b      	ldrb	r3, [r3, #0]
    16e4:	461a      	mov	r2, r3
    16e6:	4b16      	ldr	r3, [pc, #88]	; (1740 <Clock_Ip_InitClock+0x6bc>)
    16e8:	5c9b      	ldrb	r3, [r3, r2]
    16ea:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    16ec:	4a15      	ldr	r2, [pc, #84]	; (1744 <Clock_Ip_InitClock+0x6c0>)
    16ee:	9b02      	ldr	r3, [sp, #8]
    16f0:	011b      	lsls	r3, r3, #4
    16f2:	4413      	add	r3, r2
    16f4:	330c      	adds	r3, #12
    16f6:	6819      	ldr	r1, [r3, #0]
    16f8:	9a03      	ldr	r2, [sp, #12]
    16fa:	4613      	mov	r3, r2
    16fc:	009b      	lsls	r3, r3, #2
    16fe:	4413      	add	r3, r2
    1700:	009b      	lsls	r3, r3, #2
    1702:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1706:	9a01      	ldr	r2, [sp, #4]
    1708:	4413      	add	r3, r2
    170a:	4618      	mov	r0, r3
    170c:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    170e:	9b03      	ldr	r3, [sp, #12]
    1710:	3301      	adds	r3, #1
    1712:	9303      	str	r3, [sp, #12]
    1714:	9b01      	ldr	r3, [sp, #4]
    1716:	7c9b      	ldrb	r3, [r3, #18]
    1718:	461a      	mov	r2, r3
    171a:	9b03      	ldr	r3, [sp, #12]
    171c:	4293      	cmp	r3, r2
    171e:	d3d0      	bcc.n	16c2 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1720:	2104      	movs	r1, #4
    1722:	9801      	ldr	r0, [sp, #4]
    1724:	f002 ff48 	bl	45b8 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    1728:	bf00      	nop
    172a:	b004      	add	sp, #16
    172c:	bd10      	pop	{r4, pc}
    172e:	bf00      	nop
    1730:	1fff8b3c 	.word	0x1fff8b3c
    1734:	00006cfc 	.word	0x00006cfc
    1738:	00006c9c 	.word	0x00006c9c
    173c:	00007284 	.word	0x00007284
    1740:	00006cec 	.word	0x00006cec
    1744:	000072f8 	.word	0x000072f8

00001748 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    1748:	b500      	push	{lr}
    174a:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    174c:	2302      	movs	r3, #2
    174e:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1750:	2300      	movs	r3, #0
    1752:	9304      	str	r3, [sp, #16]
    1754:	e02c      	b.n	17b0 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    1756:	4a36      	ldr	r2, [pc, #216]	; (1830 <Clock_Ip_GetPllStatus+0xe8>)
    1758:	9b04      	ldr	r3, [sp, #16]
    175a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    175e:	4935      	ldr	r1, [pc, #212]	; (1834 <Clock_Ip_GetPllStatus+0xec>)
    1760:	4613      	mov	r3, r2
    1762:	00db      	lsls	r3, r3, #3
    1764:	4413      	add	r3, r2
    1766:	440b      	add	r3, r1
    1768:	3301      	adds	r3, #1
    176a:	781b      	ldrb	r3, [r3, #0]
    176c:	461a      	mov	r2, r3
    176e:	4b32      	ldr	r3, [pc, #200]	; (1838 <Clock_Ip_GetPllStatus+0xf0>)
    1770:	5c9b      	ldrb	r3, [r3, r2]
    1772:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    1774:	4931      	ldr	r1, [pc, #196]	; (183c <Clock_Ip_GetPllStatus+0xf4>)
    1776:	9a03      	ldr	r2, [sp, #12]
    1778:	4613      	mov	r3, r2
    177a:	009b      	lsls	r3, r3, #2
    177c:	4413      	add	r3, r2
    177e:	009b      	lsls	r3, r3, #2
    1780:	440b      	add	r3, r1
    1782:	3308      	adds	r3, #8
    1784:	681b      	ldr	r3, [r3, #0]
    1786:	492a      	ldr	r1, [pc, #168]	; (1830 <Clock_Ip_GetPllStatus+0xe8>)
    1788:	9a04      	ldr	r2, [sp, #16]
    178a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    178e:	4610      	mov	r0, r2
    1790:	4798      	blx	r3
    1792:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    1794:	9b02      	ldr	r3, [sp, #8]
    1796:	2b01      	cmp	r3, #1
    1798:	d102      	bne.n	17a0 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    179a:	2301      	movs	r3, #1
    179c:	9305      	str	r3, [sp, #20]
            break;
    179e:	e00d      	b.n	17bc <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    17a0:	9b02      	ldr	r3, [sp, #8]
    17a2:	2b02      	cmp	r3, #2
    17a4:	d101      	bne.n	17aa <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    17a6:	2300      	movs	r3, #0
    17a8:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    17aa:	9b04      	ldr	r3, [sp, #16]
    17ac:	3301      	adds	r3, #1
    17ae:	9304      	str	r3, [sp, #16]
    17b0:	4b23      	ldr	r3, [pc, #140]	; (1840 <Clock_Ip_GetPllStatus+0xf8>)
    17b2:	789b      	ldrb	r3, [r3, #2]
    17b4:	461a      	mov	r2, r3
    17b6:	9b04      	ldr	r3, [sp, #16]
    17b8:	4293      	cmp	r3, r2
    17ba:	d3cc      	bcc.n	1756 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    17bc:	9b05      	ldr	r3, [sp, #20]
    17be:	2b00      	cmp	r3, #0
    17c0:	d130      	bne.n	1824 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    17c2:	2300      	movs	r3, #0
    17c4:	9304      	str	r3, [sp, #16]
    17c6:	e027      	b.n	1818 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    17c8:	4a1e      	ldr	r2, [pc, #120]	; (1844 <Clock_Ip_GetPllStatus+0xfc>)
    17ca:	9b04      	ldr	r3, [sp, #16]
    17cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    17d0:	4918      	ldr	r1, [pc, #96]	; (1834 <Clock_Ip_GetPllStatus+0xec>)
    17d2:	4613      	mov	r3, r2
    17d4:	00db      	lsls	r3, r3, #3
    17d6:	4413      	add	r3, r2
    17d8:	440b      	add	r3, r1
    17da:	3301      	adds	r3, #1
    17dc:	781b      	ldrb	r3, [r3, #0]
    17de:	461a      	mov	r2, r3
    17e0:	4b19      	ldr	r3, [pc, #100]	; (1848 <Clock_Ip_GetPllStatus+0x100>)
    17e2:	5c9b      	ldrb	r3, [r3, r2]
    17e4:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    17e6:	4919      	ldr	r1, [pc, #100]	; (184c <Clock_Ip_GetPllStatus+0x104>)
    17e8:	9a03      	ldr	r2, [sp, #12]
    17ea:	4613      	mov	r3, r2
    17ec:	005b      	lsls	r3, r3, #1
    17ee:	4413      	add	r3, r2
    17f0:	009b      	lsls	r3, r3, #2
    17f2:	440b      	add	r3, r1
    17f4:	3308      	adds	r3, #8
    17f6:	681b      	ldr	r3, [r3, #0]
    17f8:	4912      	ldr	r1, [pc, #72]	; (1844 <Clock_Ip_GetPllStatus+0xfc>)
    17fa:	9a04      	ldr	r2, [sp, #16]
    17fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1800:	4610      	mov	r0, r2
    1802:	4798      	blx	r3
    1804:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    1806:	9b01      	ldr	r3, [sp, #4]
    1808:	2b01      	cmp	r3, #1
    180a:	d102      	bne.n	1812 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    180c:	2301      	movs	r3, #1
    180e:	9305      	str	r3, [sp, #20]
                break;
    1810:	e008      	b.n	1824 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1812:	9b04      	ldr	r3, [sp, #16]
    1814:	3301      	adds	r3, #1
    1816:	9304      	str	r3, [sp, #16]
    1818:	4b09      	ldr	r3, [pc, #36]	; (1840 <Clock_Ip_GetPllStatus+0xf8>)
    181a:	78db      	ldrb	r3, [r3, #3]
    181c:	461a      	mov	r2, r3
    181e:	9b04      	ldr	r3, [sp, #16]
    1820:	4293      	cmp	r3, r2
    1822:	d3d1      	bcc.n	17c8 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    1824:	9b05      	ldr	r3, [sp, #20]
}
    1826:	4618      	mov	r0, r3
    1828:	b007      	add	sp, #28
    182a:	f85d fb04 	ldr.w	pc, [sp], #4
    182e:	bf00      	nop
    1830:	00007204 	.word	0x00007204
    1834:	00006cfc 	.word	0x00006cfc
    1838:	00006cbc 	.word	0x00006cbc
    183c:	00007308 	.word	0x00007308
    1840:	1fff8b3c 	.word	0x1fff8b3c
    1844:	00007208 	.word	0x00007208
    1848:	00006cac 	.word	0x00006cac
    184c:	00007278 	.word	0x00007278

00001850 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    1850:	b500      	push	{lr}
    1852:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1854:	4b55      	ldr	r3, [pc, #340]	; (19ac <Clock_Ip_DistributePll+0x15c>)
    1856:	681b      	ldr	r3, [r3, #0]
    1858:	2b00      	cmp	r3, #0
    185a:	f000 80a2 	beq.w	19a2 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    185e:	2300      	movs	r3, #0
    1860:	9301      	str	r3, [sp, #4]
    1862:	e02c      	b.n	18be <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    1864:	4b51      	ldr	r3, [pc, #324]	; (19ac <Clock_Ip_DistributePll+0x15c>)
    1866:	681a      	ldr	r2, [r3, #0]
    1868:	9b01      	ldr	r3, [sp, #4]
    186a:	330d      	adds	r3, #13
    186c:	00db      	lsls	r3, r3, #3
    186e:	4413      	add	r3, r2
    1870:	685b      	ldr	r3, [r3, #4]
    1872:	4a4f      	ldr	r2, [pc, #316]	; (19b0 <Clock_Ip_DistributePll+0x160>)
    1874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1878:	2b03      	cmp	r3, #3
    187a:	d11d      	bne.n	18b8 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    187c:	4b4b      	ldr	r3, [pc, #300]	; (19ac <Clock_Ip_DistributePll+0x15c>)
    187e:	681b      	ldr	r3, [r3, #0]
    1880:	9a01      	ldr	r2, [sp, #4]
    1882:	320d      	adds	r2, #13
    1884:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1888:	494a      	ldr	r1, [pc, #296]	; (19b4 <Clock_Ip_DistributePll+0x164>)
    188a:	4613      	mov	r3, r2
    188c:	00db      	lsls	r3, r3, #3
    188e:	4413      	add	r3, r2
    1890:	440b      	add	r3, r1
    1892:	3301      	adds	r3, #1
    1894:	781b      	ldrb	r3, [r3, #0]
    1896:	461a      	mov	r2, r3
    1898:	4b47      	ldr	r3, [pc, #284]	; (19b8 <Clock_Ip_DistributePll+0x168>)
    189a:	5c9b      	ldrb	r3, [r3, r2]
    189c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    189e:	4a47      	ldr	r2, [pc, #284]	; (19bc <Clock_Ip_DistributePll+0x16c>)
    18a0:	9b00      	ldr	r3, [sp, #0]
    18a2:	00db      	lsls	r3, r3, #3
    18a4:	4413      	add	r3, r2
    18a6:	685b      	ldr	r3, [r3, #4]
    18a8:	4a40      	ldr	r2, [pc, #256]	; (19ac <Clock_Ip_DistributePll+0x15c>)
    18aa:	6811      	ldr	r1, [r2, #0]
    18ac:	9a01      	ldr	r2, [sp, #4]
    18ae:	320d      	adds	r2, #13
    18b0:	00d2      	lsls	r2, r2, #3
    18b2:	440a      	add	r2, r1
    18b4:	4610      	mov	r0, r2
    18b6:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    18b8:	9b01      	ldr	r3, [sp, #4]
    18ba:	3301      	adds	r3, #1
    18bc:	9301      	str	r3, [sp, #4]
    18be:	4b3b      	ldr	r3, [pc, #236]	; (19ac <Clock_Ip_DistributePll+0x15c>)
    18c0:	681b      	ldr	r3, [r3, #0]
    18c2:	7adb      	ldrb	r3, [r3, #11]
    18c4:	461a      	mov	r2, r3
    18c6:	9b01      	ldr	r3, [sp, #4]
    18c8:	4293      	cmp	r3, r2
    18ca:	d3cb      	bcc.n	1864 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    18cc:	4b3c      	ldr	r3, [pc, #240]	; (19c0 <Clock_Ip_DistributePll+0x170>)
    18ce:	781b      	ldrb	r3, [r3, #0]
    18d0:	2b00      	cmp	r3, #0
    18d2:	d066      	beq.n	19a2 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    18d4:	2300      	movs	r3, #0
    18d6:	9301      	str	r3, [sp, #4]
    18d8:	e021      	b.n	191e <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    18da:	4b34      	ldr	r3, [pc, #208]	; (19ac <Clock_Ip_DistributePll+0x15c>)
    18dc:	681a      	ldr	r2, [r3, #0]
    18de:	9b01      	ldr	r3, [sp, #4]
    18e0:	334e      	adds	r3, #78	; 0x4e
    18e2:	00db      	lsls	r3, r3, #3
    18e4:	4413      	add	r3, r2
    18e6:	685a      	ldr	r2, [r3, #4]
    18e8:	4932      	ldr	r1, [pc, #200]	; (19b4 <Clock_Ip_DistributePll+0x164>)
    18ea:	4613      	mov	r3, r2
    18ec:	00db      	lsls	r3, r3, #3
    18ee:	4413      	add	r3, r2
    18f0:	440b      	add	r3, r1
    18f2:	3301      	adds	r3, #1
    18f4:	781b      	ldrb	r3, [r3, #0]
    18f6:	461a      	mov	r2, r3
    18f8:	4b32      	ldr	r3, [pc, #200]	; (19c4 <Clock_Ip_DistributePll+0x174>)
    18fa:	5c9b      	ldrb	r3, [r3, r2]
    18fc:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    18fe:	4a32      	ldr	r2, [pc, #200]	; (19c8 <Clock_Ip_DistributePll+0x178>)
    1900:	9b00      	ldr	r3, [sp, #0]
    1902:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1906:	4a29      	ldr	r2, [pc, #164]	; (19ac <Clock_Ip_DistributePll+0x15c>)
    1908:	6811      	ldr	r1, [r2, #0]
    190a:	9a01      	ldr	r2, [sp, #4]
    190c:	324e      	adds	r2, #78	; 0x4e
    190e:	00d2      	lsls	r2, r2, #3
    1910:	440a      	add	r2, r1
    1912:	3204      	adds	r2, #4
    1914:	4610      	mov	r0, r2
    1916:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1918:	9b01      	ldr	r3, [sp, #4]
    191a:	3301      	adds	r3, #1
    191c:	9301      	str	r3, [sp, #4]
    191e:	4b23      	ldr	r3, [pc, #140]	; (19ac <Clock_Ip_DistributePll+0x15c>)
    1920:	681b      	ldr	r3, [r3, #0]
    1922:	7c1b      	ldrb	r3, [r3, #16]
    1924:	461a      	mov	r2, r3
    1926:	9b01      	ldr	r3, [sp, #4]
    1928:	4293      	cmp	r3, r2
    192a:	d3d6      	bcc.n	18da <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    192c:	2300      	movs	r3, #0
    192e:	9301      	str	r3, [sp, #4]
    1930:	e02a      	b.n	1988 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1932:	4b1e      	ldr	r3, [pc, #120]	; (19ac <Clock_Ip_DistributePll+0x15c>)
    1934:	6819      	ldr	r1, [r3, #0]
    1936:	9a01      	ldr	r2, [sp, #4]
    1938:	4613      	mov	r3, r2
    193a:	009b      	lsls	r3, r3, #2
    193c:	4413      	add	r3, r2
    193e:	009b      	lsls	r3, r3, #2
    1940:	440b      	add	r3, r1
    1942:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1946:	681a      	ldr	r2, [r3, #0]
    1948:	491a      	ldr	r1, [pc, #104]	; (19b4 <Clock_Ip_DistributePll+0x164>)
    194a:	4613      	mov	r3, r2
    194c:	00db      	lsls	r3, r3, #3
    194e:	4413      	add	r3, r2
    1950:	440b      	add	r3, r1
    1952:	3301      	adds	r3, #1
    1954:	781b      	ldrb	r3, [r3, #0]
    1956:	461a      	mov	r2, r3
    1958:	4b1c      	ldr	r3, [pc, #112]	; (19cc <Clock_Ip_DistributePll+0x17c>)
    195a:	5c9b      	ldrb	r3, [r3, r2]
    195c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    195e:	4a1c      	ldr	r2, [pc, #112]	; (19d0 <Clock_Ip_DistributePll+0x180>)
    1960:	9b00      	ldr	r3, [sp, #0]
    1962:	011b      	lsls	r3, r3, #4
    1964:	4413      	add	r3, r2
    1966:	330c      	adds	r3, #12
    1968:	6819      	ldr	r1, [r3, #0]
    196a:	4b10      	ldr	r3, [pc, #64]	; (19ac <Clock_Ip_DistributePll+0x15c>)
    196c:	6818      	ldr	r0, [r3, #0]
    196e:	9a01      	ldr	r2, [sp, #4]
    1970:	4613      	mov	r3, r2
    1972:	009b      	lsls	r3, r3, #2
    1974:	4413      	add	r3, r2
    1976:	009b      	lsls	r3, r3, #2
    1978:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    197c:	4403      	add	r3, r0
    197e:	4618      	mov	r0, r3
    1980:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1982:	9b01      	ldr	r3, [sp, #4]
    1984:	3301      	adds	r3, #1
    1986:	9301      	str	r3, [sp, #4]
    1988:	4b08      	ldr	r3, [pc, #32]	; (19ac <Clock_Ip_DistributePll+0x15c>)
    198a:	681b      	ldr	r3, [r3, #0]
    198c:	7c9b      	ldrb	r3, [r3, #18]
    198e:	461a      	mov	r2, r3
    1990:	9b01      	ldr	r3, [sp, #4]
    1992:	4293      	cmp	r3, r2
    1994:	d3cd      	bcc.n	1932 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1996:	4b05      	ldr	r3, [pc, #20]	; (19ac <Clock_Ip_DistributePll+0x15c>)
    1998:	681b      	ldr	r3, [r3, #0]
    199a:	2104      	movs	r1, #4
    199c:	4618      	mov	r0, r3
    199e:	f002 fe0b 	bl	45b8 <Clock_Ip_Command>
        }
    }
}
    19a2:	bf00      	nop
    19a4:	b003      	add	sp, #12
    19a6:	f85d fb04 	ldr.w	pc, [sp], #4
    19aa:	bf00      	nop
    19ac:	1fff8b34 	.word	0x1fff8b34
    19b0:	00007148 	.word	0x00007148
    19b4:	00006cfc 	.word	0x00006cfc
    19b8:	00006ccc 	.word	0x00006ccc
    19bc:	00007334 	.word	0x00007334
    19c0:	1fff8b3c 	.word	0x1fff8b3c
    19c4:	00006c9c 	.word	0x00006c9c
    19c8:	00007284 	.word	0x00007284
    19cc:	00006cec 	.word	0x00006cec
    19d0:	000072f8 	.word	0x000072f8

000019d4 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    19d4:	b500      	push	{lr}
    19d6:	b085      	sub	sp, #20
    19d8:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    19da:	490c      	ldr	r1, [pc, #48]	; (1a0c <Clock_Ip_DisableClockMonitor+0x38>)
    19dc:	9a01      	ldr	r2, [sp, #4]
    19de:	4613      	mov	r3, r2
    19e0:	00db      	lsls	r3, r3, #3
    19e2:	4413      	add	r3, r2
    19e4:	440b      	add	r3, r1
    19e6:	3301      	adds	r3, #1
    19e8:	781b      	ldrb	r3, [r3, #0]
    19ea:	461a      	mov	r2, r3
    19ec:	4b08      	ldr	r3, [pc, #32]	; (1a10 <Clock_Ip_DisableClockMonitor+0x3c>)
    19ee:	5c9b      	ldrb	r3, [r3, r2]
    19f0:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    19f2:	4a08      	ldr	r2, [pc, #32]	; (1a14 <Clock_Ip_DisableClockMonitor+0x40>)
    19f4:	9b03      	ldr	r3, [sp, #12]
    19f6:	011b      	lsls	r3, r3, #4
    19f8:	4413      	add	r3, r2
    19fa:	3308      	adds	r3, #8
    19fc:	681b      	ldr	r3, [r3, #0]
    19fe:	9801      	ldr	r0, [sp, #4]
    1a00:	4798      	blx	r3
}
    1a02:	bf00      	nop
    1a04:	b005      	add	sp, #20
    1a06:	f85d fb04 	ldr.w	pc, [sp], #4
    1a0a:	bf00      	nop
    1a0c:	00006cfc 	.word	0x00006cfc
    1a10:	00006cec 	.word	0x00006cec
    1a14:	000072f8 	.word	0x000072f8

00001a18 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    1a18:	b082      	sub	sp, #8
    1a1a:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    1a1c:	4a02      	ldr	r2, [pc, #8]	; (1a28 <Clock_Ip_InstallNotificationsCallback+0x10>)
    1a1e:	9b01      	ldr	r3, [sp, #4]
    1a20:	6013      	str	r3, [r2, #0]
}
    1a22:	bf00      	nop
    1a24:	b002      	add	sp, #8
    1a26:	4770      	bx	lr
    1a28:	1fff8b14 	.word	0x1fff8b14

00001a2c <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    1a2c:	b500      	push	{lr}
    1a2e:	b085      	sub	sp, #20
    1a30:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1a32:	490c      	ldr	r1, [pc, #48]	; (1a64 <Clock_Ip_DisableModuleClock+0x38>)
    1a34:	9a01      	ldr	r2, [sp, #4]
    1a36:	4613      	mov	r3, r2
    1a38:	00db      	lsls	r3, r3, #3
    1a3a:	4413      	add	r3, r2
    1a3c:	440b      	add	r3, r1
    1a3e:	3301      	adds	r3, #1
    1a40:	781b      	ldrb	r3, [r3, #0]
    1a42:	461a      	mov	r2, r3
    1a44:	4b08      	ldr	r3, [pc, #32]	; (1a68 <Clock_Ip_DisableModuleClock+0x3c>)
    1a46:	5c9b      	ldrb	r3, [r3, r2]
    1a48:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    1a4a:	4a08      	ldr	r2, [pc, #32]	; (1a6c <Clock_Ip_DisableModuleClock+0x40>)
    1a4c:	9b03      	ldr	r3, [sp, #12]
    1a4e:	00db      	lsls	r3, r3, #3
    1a50:	4413      	add	r3, r2
    1a52:	685b      	ldr	r3, [r3, #4]
    1a54:	2101      	movs	r1, #1
    1a56:	9801      	ldr	r0, [sp, #4]
    1a58:	4798      	blx	r3
}
    1a5a:	bf00      	nop
    1a5c:	b005      	add	sp, #20
    1a5e:	f85d fb04 	ldr.w	pc, [sp], #4
    1a62:	bf00      	nop
    1a64:	00006cfc 	.word	0x00006cfc
    1a68:	00006c9c 	.word	0x00006c9c
    1a6c:	00007284 	.word	0x00007284

00001a70 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    1a70:	b500      	push	{lr}
    1a72:	b085      	sub	sp, #20
    1a74:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1a76:	490c      	ldr	r1, [pc, #48]	; (1aa8 <Clock_Ip_EnableModuleClock+0x38>)
    1a78:	9a01      	ldr	r2, [sp, #4]
    1a7a:	4613      	mov	r3, r2
    1a7c:	00db      	lsls	r3, r3, #3
    1a7e:	4413      	add	r3, r2
    1a80:	440b      	add	r3, r1
    1a82:	3301      	adds	r3, #1
    1a84:	781b      	ldrb	r3, [r3, #0]
    1a86:	461a      	mov	r2, r3
    1a88:	4b08      	ldr	r3, [pc, #32]	; (1aac <Clock_Ip_EnableModuleClock+0x3c>)
    1a8a:	5c9b      	ldrb	r3, [r3, r2]
    1a8c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    1a8e:	4a08      	ldr	r2, [pc, #32]	; (1ab0 <Clock_Ip_EnableModuleClock+0x40>)
    1a90:	9b03      	ldr	r3, [sp, #12]
    1a92:	00db      	lsls	r3, r3, #3
    1a94:	4413      	add	r3, r2
    1a96:	685b      	ldr	r3, [r3, #4]
    1a98:	2100      	movs	r1, #0
    1a9a:	9801      	ldr	r0, [sp, #4]
    1a9c:	4798      	blx	r3
}
    1a9e:	bf00      	nop
    1aa0:	b005      	add	sp, #20
    1aa2:	f85d fb04 	ldr.w	pc, [sp], #4
    1aa6:	bf00      	nop
    1aa8:	00006cfc 	.word	0x00006cfc
    1aac:	00006c9c 	.word	0x00006c9c
    1ab0:	00007284 	.word	0x00007284

00001ab4 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    1ab4:	b500      	push	{lr}
    1ab6:	b083      	sub	sp, #12
    1ab8:	9001      	str	r0, [sp, #4]
    1aba:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    1abc:	4b08      	ldr	r3, [pc, #32]	; (1ae0 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    1abe:	2200      	movs	r2, #0
    1ac0:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1ac2:	4b08      	ldr	r3, [pc, #32]	; (1ae4 <Clock_Ip_PowerModeChangeNotification+0x30>)
    1ac4:	681b      	ldr	r3, [r3, #0]
    1ac6:	2102      	movs	r1, #2
    1ac8:	4618      	mov	r0, r3
    1aca:	f002 fd75 	bl	45b8 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    1ace:	9900      	ldr	r1, [sp, #0]
    1ad0:	9801      	ldr	r0, [sp, #4]
    1ad2:	f002 fc51 	bl	4378 <Clock_Ip_ClockPowerModeChangeNotification>
}
    1ad6:	bf00      	nop
    1ad8:	b003      	add	sp, #12
    1ada:	f85d fb04 	ldr.w	pc, [sp], #4
    1ade:	bf00      	nop
    1ae0:	1fff8b10 	.word	0x1fff8b10
    1ae4:	1fff8b34 	.word	0x1fff8b34

00001ae8 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    1ae8:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    1aea:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    1aee:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    1af0:	4b06      	ldr	r3, [pc, #24]	; (1b0c <Clock_Ip_SetWaitStates+0x24>)
    1af2:	785b      	ldrb	r3, [r3, #1]
    1af4:	2b00      	cmp	r3, #0
    1af6:	d005      	beq.n	1b04 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    1af8:	9b01      	ldr	r3, [sp, #4]
    1afa:	3b01      	subs	r3, #1
    1afc:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    1afe:	9b01      	ldr	r3, [sp, #4]
    1b00:	2b00      	cmp	r3, #0
    1b02:	d1f9      	bne.n	1af8 <Clock_Ip_SetWaitStates+0x10>
    }
}
    1b04:	bf00      	nop
    1b06:	b002      	add	sp, #8
    1b08:	4770      	bx	lr
    1b0a:	bf00      	nop
    1b0c:	1fff8b3c 	.word	0x1fff8b3c

00001b10 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    1b10:	b500      	push	{lr}
    1b12:	b083      	sub	sp, #12
    1b14:	9001      	str	r0, [sp, #4]
    1b16:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    1b18:	4b04      	ldr	r3, [pc, #16]	; (1b2c <Clock_Ip_ReportClockErrors+0x1c>)
    1b1a:	681b      	ldr	r3, [r3, #0]
    1b1c:	9900      	ldr	r1, [sp, #0]
    1b1e:	9801      	ldr	r0, [sp, #4]
    1b20:	4798      	blx	r3
}
    1b22:	bf00      	nop
    1b24:	b003      	add	sp, #12
    1b26:	f85d fb04 	ldr.w	pc, [sp], #4
    1b2a:	bf00      	nop
    1b2c:	1fff8b14 	.word	0x1fff8b14

00001b30 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    1b30:	b500      	push	{lr}
    1b32:	b085      	sub	sp, #20
    1b34:	9003      	str	r0, [sp, #12]
    1b36:	9102      	str	r1, [sp, #8]
    1b38:	9201      	str	r2, [sp, #4]
    1b3a:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    1b3c:	2000      	movs	r0, #0
    1b3e:	f7fe ffd0 	bl	ae2 <OsIf_GetCounter>
    1b42:	4602      	mov	r2, r0
    1b44:	9b03      	ldr	r3, [sp, #12]
    1b46:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    1b48:	9b02      	ldr	r3, [sp, #8]
    1b4a:	2200      	movs	r2, #0
    1b4c:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    1b4e:	2100      	movs	r1, #0
    1b50:	9800      	ldr	r0, [sp, #0]
    1b52:	f7ff f812 	bl	b7a <OsIf_MicrosToTicks>
    1b56:	4602      	mov	r2, r0
    1b58:	9b01      	ldr	r3, [sp, #4]
    1b5a:	601a      	str	r2, [r3, #0]
}
    1b5c:	bf00      	nop
    1b5e:	b005      	add	sp, #20
    1b60:	f85d fb04 	ldr.w	pc, [sp], #4

00001b64 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    1b64:	b500      	push	{lr}
    1b66:	b087      	sub	sp, #28
    1b68:	9003      	str	r0, [sp, #12]
    1b6a:	9102      	str	r1, [sp, #8]
    1b6c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    1b6e:	2300      	movs	r3, #0
    1b70:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    1b74:	2100      	movs	r1, #0
    1b76:	9803      	ldr	r0, [sp, #12]
    1b78:	f7fe ffcc 	bl	b14 <OsIf_GetElapsed>
    1b7c:	4602      	mov	r2, r0
    1b7e:	9b02      	ldr	r3, [sp, #8]
    1b80:	681b      	ldr	r3, [r3, #0]
    1b82:	441a      	add	r2, r3
    1b84:	9b02      	ldr	r3, [sp, #8]
    1b86:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    1b88:	9b02      	ldr	r3, [sp, #8]
    1b8a:	681b      	ldr	r3, [r3, #0]
    1b8c:	9a01      	ldr	r2, [sp, #4]
    1b8e:	429a      	cmp	r2, r3
    1b90:	d802      	bhi.n	1b98 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    1b92:	2301      	movs	r3, #1
    1b94:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    1b98:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1b9c:	4618      	mov	r0, r3
    1b9e:	b007      	add	sp, #28
    1ba0:	f85d fb04 	ldr.w	pc, [sp], #4

00001ba4 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    1ba4:	b082      	sub	sp, #8
    1ba6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    1ba8:	bf00      	nop
    1baa:	b002      	add	sp, #8
    1bac:	4770      	bx	lr

00001bae <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    1bae:	b500      	push	{lr}
    1bb0:	b083      	sub	sp, #12
    1bb2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1bb4:	9b01      	ldr	r3, [sp, #4]
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d002      	beq.n	1bc0 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    1bba:	9801      	ldr	r0, [sp, #4]
    1bbc:	f000 f8ad 	bl	1d1a <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1bc0:	bf00      	nop
    1bc2:	b003      	add	sp, #12
    1bc4:	f85d fb04 	ldr.w	pc, [sp], #4

00001bc8 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    1bc8:	b500      	push	{lr}
    1bca:	b083      	sub	sp, #12
    1bcc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1bce:	9b01      	ldr	r3, [sp, #4]
    1bd0:	2b00      	cmp	r3, #0
    1bd2:	d002      	beq.n	1bda <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    1bd4:	9801      	ldr	r0, [sp, #4]
    1bd6:	f000 f8cd 	bl	1d74 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1bda:	bf00      	nop
    1bdc:	b003      	add	sp, #12
    1bde:	f85d fb04 	ldr.w	pc, [sp], #4

00001be2 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    1be2:	b500      	push	{lr}
    1be4:	b083      	sub	sp, #12
    1be6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1be8:	9b01      	ldr	r3, [sp, #4]
    1bea:	2b00      	cmp	r3, #0
    1bec:	d002      	beq.n	1bf4 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    1bee:	9801      	ldr	r0, [sp, #4]
    1bf0:	f000 f8ee 	bl	1dd0 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1bf4:	bf00      	nop
    1bf6:	b003      	add	sp, #12
    1bf8:	f85d fb04 	ldr.w	pc, [sp], #4

00001bfc <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    1bfc:	b500      	push	{lr}
    1bfe:	b083      	sub	sp, #12
    1c00:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c02:	9b01      	ldr	r3, [sp, #4]
    1c04:	2b00      	cmp	r3, #0
    1c06:	d002      	beq.n	1c0e <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    1c08:	9801      	ldr	r0, [sp, #4]
    1c0a:	f000 f8f9 	bl	1e00 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c0e:	bf00      	nop
    1c10:	b003      	add	sp, #12
    1c12:	f85d fb04 	ldr.w	pc, [sp], #4

00001c16 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    1c16:	b500      	push	{lr}
    1c18:	b083      	sub	sp, #12
    1c1a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c1c:	9b01      	ldr	r3, [sp, #4]
    1c1e:	2b00      	cmp	r3, #0
    1c20:	d002      	beq.n	1c28 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    1c22:	9801      	ldr	r0, [sp, #4]
    1c24:	f000 f904 	bl	1e30 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c28:	bf00      	nop
    1c2a:	b003      	add	sp, #12
    1c2c:	f85d fb04 	ldr.w	pc, [sp], #4

00001c30 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    1c30:	b500      	push	{lr}
    1c32:	b083      	sub	sp, #12
    1c34:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c36:	9b01      	ldr	r3, [sp, #4]
    1c38:	2b00      	cmp	r3, #0
    1c3a:	d002      	beq.n	1c42 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    1c3c:	9801      	ldr	r0, [sp, #4]
    1c3e:	f000 f90f 	bl	1e60 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c42:	bf00      	nop
    1c44:	b003      	add	sp, #12
    1c46:	f85d fb04 	ldr.w	pc, [sp], #4

00001c4a <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    1c4a:	b500      	push	{lr}
    1c4c:	b083      	sub	sp, #12
    1c4e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c50:	9b01      	ldr	r3, [sp, #4]
    1c52:	2b00      	cmp	r3, #0
    1c54:	d002      	beq.n	1c5c <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    1c56:	9801      	ldr	r0, [sp, #4]
    1c58:	f000 f91a 	bl	1e90 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c5c:	bf00      	nop
    1c5e:	b003      	add	sp, #12
    1c60:	f85d fb04 	ldr.w	pc, [sp], #4

00001c64 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    1c64:	b500      	push	{lr}
    1c66:	b083      	sub	sp, #12
    1c68:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c6a:	9b01      	ldr	r3, [sp, #4]
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	d002      	beq.n	1c76 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    1c70:	9801      	ldr	r0, [sp, #4]
    1c72:	f000 f925 	bl	1ec0 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c76:	bf00      	nop
    1c78:	b003      	add	sp, #12
    1c7a:	f85d fb04 	ldr.w	pc, [sp], #4

00001c7e <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    1c7e:	b500      	push	{lr}
    1c80:	b083      	sub	sp, #12
    1c82:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c84:	9b01      	ldr	r3, [sp, #4]
    1c86:	2b00      	cmp	r3, #0
    1c88:	d002      	beq.n	1c90 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    1c8a:	9801      	ldr	r0, [sp, #4]
    1c8c:	f000 f930 	bl	1ef0 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c90:	bf00      	nop
    1c92:	b003      	add	sp, #12
    1c94:	f85d fb04 	ldr.w	pc, [sp], #4

00001c98 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    1c98:	b500      	push	{lr}
    1c9a:	b083      	sub	sp, #12
    1c9c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c9e:	9b01      	ldr	r3, [sp, #4]
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	d002      	beq.n	1caa <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    1ca4:	9801      	ldr	r0, [sp, #4]
    1ca6:	f000 f93b 	bl	1f20 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1caa:	bf00      	nop
    1cac:	b003      	add	sp, #12
    1cae:	f85d fb04 	ldr.w	pc, [sp], #4

00001cb2 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    1cb2:	b500      	push	{lr}
    1cb4:	b083      	sub	sp, #12
    1cb6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1cb8:	9b01      	ldr	r3, [sp, #4]
    1cba:	2b00      	cmp	r3, #0
    1cbc:	d002      	beq.n	1cc4 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    1cbe:	9801      	ldr	r0, [sp, #4]
    1cc0:	f000 f946 	bl	1f50 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1cc4:	bf00      	nop
    1cc6:	b003      	add	sp, #12
    1cc8:	f85d fb04 	ldr.w	pc, [sp], #4

00001ccc <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    1ccc:	b500      	push	{lr}
    1cce:	b083      	sub	sp, #12
    1cd0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1cd2:	9b01      	ldr	r3, [sp, #4]
    1cd4:	2b00      	cmp	r3, #0
    1cd6:	d002      	beq.n	1cde <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    1cd8:	9801      	ldr	r0, [sp, #4]
    1cda:	f000 f951 	bl	1f80 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1cde:	bf00      	nop
    1ce0:	b003      	add	sp, #12
    1ce2:	f85d fb04 	ldr.w	pc, [sp], #4

00001ce6 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    1ce6:	b500      	push	{lr}
    1ce8:	b083      	sub	sp, #12
    1cea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1cec:	9b01      	ldr	r3, [sp, #4]
    1cee:	2b00      	cmp	r3, #0
    1cf0:	d002      	beq.n	1cf8 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    1cf2:	9801      	ldr	r0, [sp, #4]
    1cf4:	f000 f95e 	bl	1fb4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1cf8:	bf00      	nop
    1cfa:	b003      	add	sp, #12
    1cfc:	f85d fb04 	ldr.w	pc, [sp], #4

00001d00 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    1d00:	b500      	push	{lr}
    1d02:	b083      	sub	sp, #12
    1d04:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d06:	9b01      	ldr	r3, [sp, #4]
    1d08:	2b00      	cmp	r3, #0
    1d0a:	d002      	beq.n	1d12 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    1d0c:	9801      	ldr	r0, [sp, #4]
    1d0e:	f000 f98b 	bl	2028 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d12:	bf00      	nop
    1d14:	b003      	add	sp, #12
    1d16:	f85d fb04 	ldr.w	pc, [sp], #4

00001d1a <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1d1a:	b086      	sub	sp, #24
    1d1c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    1d1e:	9b01      	ldr	r3, [sp, #4]
    1d20:	681a      	ldr	r2, [r3, #0]
    1d22:	4911      	ldr	r1, [pc, #68]	; (1d68 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    1d24:	4613      	mov	r3, r2
    1d26:	00db      	lsls	r3, r3, #3
    1d28:	4413      	add	r3, r2
    1d2a:	440b      	add	r3, r1
    1d2c:	781b      	ldrb	r3, [r3, #0]
    1d2e:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    1d30:	9b01      	ldr	r3, [sp, #4]
    1d32:	685b      	ldr	r3, [r3, #4]
    1d34:	4a0d      	ldr	r2, [pc, #52]	; (1d6c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    1d36:	5cd3      	ldrb	r3, [r2, r3]
    1d38:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    1d3a:	4a0d      	ldr	r2, [pc, #52]	; (1d70 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    1d3c:	9b05      	ldr	r3, [sp, #20]
    1d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1d42:	681b      	ldr	r3, [r3, #0]
    1d44:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    1d46:	9b03      	ldr	r3, [sp, #12]
    1d48:	f023 0307 	bic.w	r3, r3, #7
    1d4c:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    1d4e:	9a03      	ldr	r2, [sp, #12]
    1d50:	9b04      	ldr	r3, [sp, #16]
    1d52:	4313      	orrs	r3, r2
    1d54:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    1d56:	4a06      	ldr	r2, [pc, #24]	; (1d70 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    1d58:	9b05      	ldr	r3, [sp, #20]
    1d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1d5e:	9a03      	ldr	r2, [sp, #12]
    1d60:	601a      	str	r2, [r3, #0]
}
    1d62:	bf00      	nop
    1d64:	b006      	add	sp, #24
    1d66:	4770      	bx	lr
    1d68:	00006cfc 	.word	0x00006cfc
    1d6c:	000070f4 	.word	0x000070f4
    1d70:	00007138 	.word	0x00007138

00001d74 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1d74:	b086      	sub	sp, #24
    1d76:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    1d78:	9b01      	ldr	r3, [sp, #4]
    1d7a:	681a      	ldr	r2, [r3, #0]
    1d7c:	4911      	ldr	r1, [pc, #68]	; (1dc4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    1d7e:	4613      	mov	r3, r2
    1d80:	00db      	lsls	r3, r3, #3
    1d82:	4413      	add	r3, r2
    1d84:	440b      	add	r3, r1
    1d86:	781b      	ldrb	r3, [r3, #0]
    1d88:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    1d8a:	9b01      	ldr	r3, [sp, #4]
    1d8c:	685b      	ldr	r3, [r3, #4]
    1d8e:	4a0e      	ldr	r2, [pc, #56]	; (1dc8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    1d90:	5cd3      	ldrb	r3, [r2, r3]
    1d92:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    1d94:	4a0d      	ldr	r2, [pc, #52]	; (1dcc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    1d96:	9b05      	ldr	r3, [sp, #20]
    1d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1d9c:	681b      	ldr	r3, [r3, #0]
    1d9e:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    1da0:	9b03      	ldr	r3, [sp, #12]
    1da2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1da6:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    1da8:	9b04      	ldr	r3, [sp, #16]
    1daa:	021b      	lsls	r3, r3, #8
    1dac:	9a03      	ldr	r2, [sp, #12]
    1dae:	4313      	orrs	r3, r2
    1db0:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    1db2:	4a06      	ldr	r2, [pc, #24]	; (1dcc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    1db4:	9b05      	ldr	r3, [sp, #20]
    1db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1dba:	9a03      	ldr	r2, [sp, #12]
    1dbc:	601a      	str	r2, [r3, #0]
}
    1dbe:	bf00      	nop
    1dc0:	b006      	add	sp, #24
    1dc2:	4770      	bx	lr
    1dc4:	00006cfc 	.word	0x00006cfc
    1dc8:	000070f4 	.word	0x000070f4
    1dcc:	00007138 	.word	0x00007138

00001dd0 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1dd0:	b084      	sub	sp, #16
    1dd2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    1dd4:	4b09      	ldr	r3, [pc, #36]	; (1dfc <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    1dd6:	695b      	ldr	r3, [r3, #20]
    1dd8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    1dda:	9b03      	ldr	r3, [sp, #12]
    1ddc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1de0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    1de2:	9b01      	ldr	r3, [sp, #4]
    1de4:	685b      	ldr	r3, [r3, #4]
    1de6:	3b01      	subs	r3, #1
    1de8:	041b      	lsls	r3, r3, #16
    1dea:	9a03      	ldr	r2, [sp, #12]
    1dec:	4313      	orrs	r3, r2
    1dee:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    1df0:	4a02      	ldr	r2, [pc, #8]	; (1dfc <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    1df2:	9b03      	ldr	r3, [sp, #12]
    1df4:	6153      	str	r3, [r2, #20]
}
    1df6:	bf00      	nop
    1df8:	b004      	add	sp, #16
    1dfa:	4770      	bx	lr
    1dfc:	40064000 	.word	0x40064000

00001e00 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1e00:	b084      	sub	sp, #16
    1e02:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    1e04:	4b09      	ldr	r3, [pc, #36]	; (1e2c <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    1e06:	695b      	ldr	r3, [r3, #20]
    1e08:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    1e0a:	9b03      	ldr	r3, [sp, #12]
    1e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1e10:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    1e12:	9b01      	ldr	r3, [sp, #4]
    1e14:	685b      	ldr	r3, [r3, #4]
    1e16:	3b01      	subs	r3, #1
    1e18:	011b      	lsls	r3, r3, #4
    1e1a:	9a03      	ldr	r2, [sp, #12]
    1e1c:	4313      	orrs	r3, r2
    1e1e:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    1e20:	4a02      	ldr	r2, [pc, #8]	; (1e2c <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    1e22:	9b03      	ldr	r3, [sp, #12]
    1e24:	6153      	str	r3, [r2, #20]
}
    1e26:	bf00      	nop
    1e28:	b004      	add	sp, #16
    1e2a:	4770      	bx	lr
    1e2c:	40064000 	.word	0x40064000

00001e30 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1e30:	b084      	sub	sp, #16
    1e32:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    1e34:	4b09      	ldr	r3, [pc, #36]	; (1e5c <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    1e36:	695b      	ldr	r3, [r3, #20]
    1e38:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    1e3a:	9b03      	ldr	r3, [sp, #12]
    1e3c:	f023 030f 	bic.w	r3, r3, #15
    1e40:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    1e42:	9b01      	ldr	r3, [sp, #4]
    1e44:	685b      	ldr	r3, [r3, #4]
    1e46:	3b01      	subs	r3, #1
    1e48:	9a03      	ldr	r2, [sp, #12]
    1e4a:	4313      	orrs	r3, r2
    1e4c:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    1e4e:	4a03      	ldr	r2, [pc, #12]	; (1e5c <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    1e50:	9b03      	ldr	r3, [sp, #12]
    1e52:	6153      	str	r3, [r2, #20]
}
    1e54:	bf00      	nop
    1e56:	b004      	add	sp, #16
    1e58:	4770      	bx	lr
    1e5a:	bf00      	nop
    1e5c:	40064000 	.word	0x40064000

00001e60 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1e60:	b084      	sub	sp, #16
    1e62:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    1e64:	4b09      	ldr	r3, [pc, #36]	; (1e8c <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    1e66:	699b      	ldr	r3, [r3, #24]
    1e68:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    1e6a:	9b03      	ldr	r3, [sp, #12]
    1e6c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1e70:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    1e72:	9b01      	ldr	r3, [sp, #4]
    1e74:	685b      	ldr	r3, [r3, #4]
    1e76:	3b01      	subs	r3, #1
    1e78:	041b      	lsls	r3, r3, #16
    1e7a:	9a03      	ldr	r2, [sp, #12]
    1e7c:	4313      	orrs	r3, r2
    1e7e:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    1e80:	4a02      	ldr	r2, [pc, #8]	; (1e8c <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    1e82:	9b03      	ldr	r3, [sp, #12]
    1e84:	6193      	str	r3, [r2, #24]
}
    1e86:	bf00      	nop
    1e88:	b004      	add	sp, #16
    1e8a:	4770      	bx	lr
    1e8c:	40064000 	.word	0x40064000

00001e90 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1e90:	b084      	sub	sp, #16
    1e92:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    1e94:	4b09      	ldr	r3, [pc, #36]	; (1ebc <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    1e96:	699b      	ldr	r3, [r3, #24]
    1e98:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    1e9a:	9b03      	ldr	r3, [sp, #12]
    1e9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1ea0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    1ea2:	9b01      	ldr	r3, [sp, #4]
    1ea4:	685b      	ldr	r3, [r3, #4]
    1ea6:	3b01      	subs	r3, #1
    1ea8:	011b      	lsls	r3, r3, #4
    1eaa:	9a03      	ldr	r2, [sp, #12]
    1eac:	4313      	orrs	r3, r2
    1eae:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    1eb0:	4a02      	ldr	r2, [pc, #8]	; (1ebc <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    1eb2:	9b03      	ldr	r3, [sp, #12]
    1eb4:	6193      	str	r3, [r2, #24]
}
    1eb6:	bf00      	nop
    1eb8:	b004      	add	sp, #16
    1eba:	4770      	bx	lr
    1ebc:	40064000 	.word	0x40064000

00001ec0 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1ec0:	b084      	sub	sp, #16
    1ec2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    1ec4:	4b09      	ldr	r3, [pc, #36]	; (1eec <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    1ec6:	699b      	ldr	r3, [r3, #24]
    1ec8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    1eca:	9b03      	ldr	r3, [sp, #12]
    1ecc:	f023 030f 	bic.w	r3, r3, #15
    1ed0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    1ed2:	9b01      	ldr	r3, [sp, #4]
    1ed4:	685b      	ldr	r3, [r3, #4]
    1ed6:	3b01      	subs	r3, #1
    1ed8:	9a03      	ldr	r2, [sp, #12]
    1eda:	4313      	orrs	r3, r2
    1edc:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    1ede:	4a03      	ldr	r2, [pc, #12]	; (1eec <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    1ee0:	9b03      	ldr	r3, [sp, #12]
    1ee2:	6193      	str	r3, [r2, #24]
}
    1ee4:	bf00      	nop
    1ee6:	b004      	add	sp, #16
    1ee8:	4770      	bx	lr
    1eea:	bf00      	nop
    1eec:	40064000 	.word	0x40064000

00001ef0 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1ef0:	b084      	sub	sp, #16
    1ef2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    1ef4:	4b09      	ldr	r3, [pc, #36]	; (1f1c <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    1ef6:	69db      	ldr	r3, [r3, #28]
    1ef8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    1efa:	9b03      	ldr	r3, [sp, #12]
    1efc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1f00:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    1f02:	9b01      	ldr	r3, [sp, #4]
    1f04:	685b      	ldr	r3, [r3, #4]
    1f06:	3b01      	subs	r3, #1
    1f08:	041b      	lsls	r3, r3, #16
    1f0a:	9a03      	ldr	r2, [sp, #12]
    1f0c:	4313      	orrs	r3, r2
    1f0e:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    1f10:	4a02      	ldr	r2, [pc, #8]	; (1f1c <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    1f12:	9b03      	ldr	r3, [sp, #12]
    1f14:	61d3      	str	r3, [r2, #28]
}
    1f16:	bf00      	nop
    1f18:	b004      	add	sp, #16
    1f1a:	4770      	bx	lr
    1f1c:	40064000 	.word	0x40064000

00001f20 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1f20:	b084      	sub	sp, #16
    1f22:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    1f24:	4b09      	ldr	r3, [pc, #36]	; (1f4c <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    1f26:	69db      	ldr	r3, [r3, #28]
    1f28:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    1f2a:	9b03      	ldr	r3, [sp, #12]
    1f2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1f30:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    1f32:	9b01      	ldr	r3, [sp, #4]
    1f34:	685b      	ldr	r3, [r3, #4]
    1f36:	3b01      	subs	r3, #1
    1f38:	011b      	lsls	r3, r3, #4
    1f3a:	9a03      	ldr	r2, [sp, #12]
    1f3c:	4313      	orrs	r3, r2
    1f3e:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    1f40:	4a02      	ldr	r2, [pc, #8]	; (1f4c <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    1f42:	9b03      	ldr	r3, [sp, #12]
    1f44:	61d3      	str	r3, [r2, #28]
}
    1f46:	bf00      	nop
    1f48:	b004      	add	sp, #16
    1f4a:	4770      	bx	lr
    1f4c:	40064000 	.word	0x40064000

00001f50 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1f50:	b084      	sub	sp, #16
    1f52:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    1f54:	4b09      	ldr	r3, [pc, #36]	; (1f7c <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    1f56:	69db      	ldr	r3, [r3, #28]
    1f58:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    1f5a:	9b03      	ldr	r3, [sp, #12]
    1f5c:	f023 030f 	bic.w	r3, r3, #15
    1f60:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    1f62:	9b01      	ldr	r3, [sp, #4]
    1f64:	685b      	ldr	r3, [r3, #4]
    1f66:	3b01      	subs	r3, #1
    1f68:	9a03      	ldr	r2, [sp, #12]
    1f6a:	4313      	orrs	r3, r2
    1f6c:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    1f6e:	4a03      	ldr	r2, [pc, #12]	; (1f7c <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    1f70:	9b03      	ldr	r3, [sp, #12]
    1f72:	61d3      	str	r3, [r2, #28]
}
    1f74:	bf00      	nop
    1f76:	b004      	add	sp, #16
    1f78:	4770      	bx	lr
    1f7a:	bf00      	nop
    1f7c:	40064000 	.word	0x40064000

00001f80 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    1f80:	b084      	sub	sp, #16
    1f82:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    1f84:	4b0a      	ldr	r3, [pc, #40]	; (1fb0 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    1f86:	685b      	ldr	r3, [r3, #4]
    1f88:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    1f8a:	9b03      	ldr	r3, [sp, #12]
    1f8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1f90:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    1f92:	9b01      	ldr	r3, [sp, #4]
    1f94:	685b      	ldr	r3, [r3, #4]
    1f96:	3b01      	subs	r3, #1
    1f98:	021b      	lsls	r3, r3, #8
    1f9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    1f9e:	9a03      	ldr	r2, [sp, #12]
    1fa0:	4313      	orrs	r3, r2
    1fa2:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    1fa4:	4a02      	ldr	r2, [pc, #8]	; (1fb0 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    1fa6:	9b03      	ldr	r3, [sp, #12]
    1fa8:	6053      	str	r3, [r2, #4]
}
    1faa:	bf00      	nop
    1fac:	b004      	add	sp, #16
    1fae:	4770      	bx	lr
    1fb0:	40048000 	.word	0x40048000

00001fb4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1fb4:	b084      	sub	sp, #16
    1fb6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    1fb8:	4919      	ldr	r1, [pc, #100]	; (2020 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    1fba:	9b01      	ldr	r3, [sp, #4]
    1fbc:	681a      	ldr	r2, [r3, #0]
    1fbe:	4819      	ldr	r0, [pc, #100]	; (2024 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    1fc0:	4613      	mov	r3, r2
    1fc2:	00db      	lsls	r3, r3, #3
    1fc4:	4413      	add	r3, r2
    1fc6:	4403      	add	r3, r0
    1fc8:	3305      	adds	r3, #5
    1fca:	781b      	ldrb	r3, [r3, #0]
    1fcc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    1fd0:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    1fd2:	9b03      	ldr	r3, [sp, #12]
    1fd4:	f023 030f 	bic.w	r3, r3, #15
    1fd8:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    1fda:	9b01      	ldr	r3, [sp, #4]
    1fdc:	685b      	ldr	r3, [r3, #4]
    1fde:	3b01      	subs	r3, #1
    1fe0:	f003 0307 	and.w	r3, r3, #7
    1fe4:	9a03      	ldr	r2, [sp, #12]
    1fe6:	4313      	orrs	r3, r2
    1fe8:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    1fea:	9b01      	ldr	r3, [sp, #4]
    1fec:	7a1b      	ldrb	r3, [r3, #8]
    1fee:	3b01      	subs	r3, #1
    1ff0:	00db      	lsls	r3, r3, #3
    1ff2:	f003 0308 	and.w	r3, r3, #8
    1ff6:	9a03      	ldr	r2, [sp, #12]
    1ff8:	4313      	orrs	r3, r2
    1ffa:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    1ffc:	4908      	ldr	r1, [pc, #32]	; (2020 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    1ffe:	9b01      	ldr	r3, [sp, #4]
    2000:	681a      	ldr	r2, [r3, #0]
    2002:	4808      	ldr	r0, [pc, #32]	; (2024 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2004:	4613      	mov	r3, r2
    2006:	00db      	lsls	r3, r3, #3
    2008:	4413      	add	r3, r2
    200a:	4403      	add	r3, r0
    200c:	3305      	adds	r3, #5
    200e:	781b      	ldrb	r3, [r3, #0]
    2010:	461a      	mov	r2, r3
    2012:	9b03      	ldr	r3, [sp, #12]
    2014:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    2018:	bf00      	nop
    201a:	b004      	add	sp, #16
    201c:	4770      	bx	lr
    201e:	bf00      	nop
    2020:	40065000 	.word	0x40065000
    2024:	00006cfc 	.word	0x00006cfc

00002028 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2028:	b084      	sub	sp, #16
    202a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    202c:	4b10      	ldr	r3, [pc, #64]	; (2070 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    202e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2030:	4a0f      	ldr	r2, [pc, #60]	; (2070 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2036:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    2038:	4b0d      	ldr	r3, [pc, #52]	; (2070 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    203a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    203c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    203e:	9b03      	ldr	r3, [sp, #12]
    2040:	f023 030f 	bic.w	r3, r3, #15
    2044:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2046:	9b01      	ldr	r3, [sp, #4]
    2048:	685b      	ldr	r3, [r3, #4]
    204a:	3b01      	subs	r3, #1
    204c:	005b      	lsls	r3, r3, #1
    204e:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    2052:	9b01      	ldr	r3, [sp, #4]
    2054:	7a1b      	ldrb	r3, [r3, #8]
    2056:	3b01      	subs	r3, #1
    2058:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    205c:	4313      	orrs	r3, r2
    205e:	9a03      	ldr	r2, [sp, #12]
    2060:	4313      	orrs	r3, r2
    2062:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    2064:	4a02      	ldr	r2, [pc, #8]	; (2070 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2066:	9b03      	ldr	r3, [sp, #12]
    2068:	6693      	str	r3, [r2, #104]	; 0x68
}
    206a:	bf00      	nop
    206c:	b004      	add	sp, #16
    206e:	4770      	bx	lr
    2070:	40048000 	.word	0x40048000

00002074 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    2074:	b082      	sub	sp, #8
    2076:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2078:	bf00      	nop
    207a:	b002      	add	sp, #8
    207c:	4770      	bx	lr
	...

00002080 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    2080:	b082      	sub	sp, #8
    2082:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2084:	bf00      	nop
    2086:	b002      	add	sp, #8
    2088:	4770      	bx	lr

0000208a <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    208a:	b082      	sub	sp, #8
    208c:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    208e:	bf00      	nop
    2090:	b002      	add	sp, #8
    2092:	4770      	bx	lr

00002094 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2094:	b500      	push	{lr}
    2096:	b083      	sub	sp, #12
    2098:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    209a:	9b01      	ldr	r3, [sp, #4]
    209c:	2b00      	cmp	r3, #0
    209e:	d002      	beq.n	20a6 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    20a0:	9801      	ldr	r0, [sp, #4]
    20a2:	f000 f86a 	bl	217a <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    20a6:	bf00      	nop
    20a8:	b003      	add	sp, #12
    20aa:	f85d fb04 	ldr.w	pc, [sp], #4

000020ae <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    20ae:	b500      	push	{lr}
    20b0:	b083      	sub	sp, #12
    20b2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    20b4:	9b01      	ldr	r3, [sp, #4]
    20b6:	2b00      	cmp	r3, #0
    20b8:	d002      	beq.n	20c0 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    20ba:	9801      	ldr	r0, [sp, #4]
    20bc:	f000 f884 	bl	21c8 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    20c0:	bf00      	nop
    20c2:	b003      	add	sp, #12
    20c4:	f85d fb04 	ldr.w	pc, [sp], #4

000020c8 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    20c8:	b500      	push	{lr}
    20ca:	b089      	sub	sp, #36	; 0x24
    20cc:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    20ce:	2300      	movs	r3, #0
    20d0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    20d4:	9b01      	ldr	r3, [sp, #4]
    20d6:	2b00      	cmp	r3, #0
    20d8:	d031      	beq.n	213e <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    20da:	4b1b      	ldr	r3, [pc, #108]	; (2148 <Clock_Ip_CompleteSOSC+0x80>)
    20dc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    20e0:	f003 0301 	and.w	r3, r3, #1
    20e4:	2b00      	cmp	r3, #0
    20e6:	d02a      	beq.n	213e <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    20e8:	aa03      	add	r2, sp, #12
    20ea:	a904      	add	r1, sp, #16
    20ec:	a805      	add	r0, sp, #20
    20ee:	f24c 3350 	movw	r3, #50000	; 0xc350
    20f2:	f7ff fd1d 	bl	1b30 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    20f6:	4b14      	ldr	r3, [pc, #80]	; (2148 <Clock_Ip_CompleteSOSC+0x80>)
    20f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    20fc:	0e1b      	lsrs	r3, r3, #24
    20fe:	f003 0301 	and.w	r3, r3, #1
    2102:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2104:	9a03      	ldr	r2, [sp, #12]
    2106:	a904      	add	r1, sp, #16
    2108:	ab05      	add	r3, sp, #20
    210a:	4618      	mov	r0, r3
    210c:	f7ff fd2a 	bl	1b64 <Clock_Ip_TimeoutExpired>
    2110:	4603      	mov	r3, r0
    2112:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    2116:	9b06      	ldr	r3, [sp, #24]
    2118:	2b00      	cmp	r3, #0
    211a:	d106      	bne.n	212a <Clock_Ip_CompleteSOSC+0x62>
    211c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2120:	f083 0301 	eor.w	r3, r3, #1
    2124:	b2db      	uxtb	r3, r3
    2126:	2b00      	cmp	r3, #0
    2128:	d1e5      	bne.n	20f6 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    212a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    212e:	2b00      	cmp	r3, #0
    2130:	d005      	beq.n	213e <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2132:	9b01      	ldr	r3, [sp, #4]
    2134:	681b      	ldr	r3, [r3, #0]
    2136:	4619      	mov	r1, r3
    2138:	2001      	movs	r0, #1
    213a:	f7ff fce9 	bl	1b10 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    213e:	bf00      	nop
    2140:	b009      	add	sp, #36	; 0x24
    2142:	f85d fb04 	ldr.w	pc, [sp], #4
    2146:	bf00      	nop
    2148:	40064000 	.word	0x40064000

0000214c <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    214c:	b500      	push	{lr}
    214e:	b083      	sub	sp, #12
    2150:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    2152:	9801      	ldr	r0, [sp, #4]
    2154:	f000 f8c0 	bl	22d8 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2158:	bf00      	nop
    215a:	b003      	add	sp, #12
    215c:	f85d fb04 	ldr.w	pc, [sp], #4

00002160 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2160:	b500      	push	{lr}
    2162:	b083      	sub	sp, #12
    2164:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2166:	9b01      	ldr	r3, [sp, #4]
    2168:	2b00      	cmp	r3, #0
    216a:	d002      	beq.n	2172 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    216c:	9801      	ldr	r0, [sp, #4]
    216e:	f000 f8c3 	bl	22f8 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2172:	bf00      	nop
    2174:	b003      	add	sp, #12
    2176:	f85d fb04 	ldr.w	pc, [sp], #4

0000217a <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    217a:	b082      	sub	sp, #8
    217c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    217e:	4b11      	ldr	r3, [pc, #68]	; (21c4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2180:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2184:	4a0f      	ldr	r2, [pc, #60]	; (21c4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2186:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    218a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    218e:	4b0d      	ldr	r3, [pc, #52]	; (21c4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2190:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2194:	4a0b      	ldr	r2, [pc, #44]	; (21c4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    219a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    219e:	4b09      	ldr	r3, [pc, #36]	; (21c4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21a4:	4a07      	ldr	r2, [pc, #28]	; (21c4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21a6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    21aa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    21ae:	4b05      	ldr	r3, [pc, #20]	; (21c4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21b4:	4a03      	ldr	r2, [pc, #12]	; (21c4 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21b6:	f023 0301 	bic.w	r3, r3, #1
    21ba:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    21be:	bf00      	nop
    21c0:	b002      	add	sp, #8
    21c2:	4770      	bx	lr
    21c4:	40064000 	.word	0x40064000

000021c8 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    21c8:	b082      	sub	sp, #8
    21ca:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    21cc:	9b01      	ldr	r3, [sp, #4]
    21ce:	891b      	ldrh	r3, [r3, #8]
    21d0:	2b01      	cmp	r3, #1
    21d2:	d174      	bne.n	22be <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    21d4:	9b01      	ldr	r3, [sp, #4]
    21d6:	7bdb      	ldrb	r3, [r3, #15]
    21d8:	2b00      	cmp	r3, #0
    21da:	d002      	beq.n	21e2 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    21dc:	2b01      	cmp	r3, #1
    21de:	d009      	beq.n	21f4 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    21e0:	e011      	b.n	2206 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    21e2:	4b39      	ldr	r3, [pc, #228]	; (22c8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    21e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    21e8:	4a37      	ldr	r2, [pc, #220]	; (22c8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    21ea:	f023 0308 	bic.w	r3, r3, #8
    21ee:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    21f2:	e008      	b.n	2206 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    21f4:	4b34      	ldr	r3, [pc, #208]	; (22c8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    21f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    21fa:	4a33      	ldr	r2, [pc, #204]	; (22c8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    21fc:	f043 0308 	orr.w	r3, r3, #8
    2200:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2204:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    2206:	4b30      	ldr	r3, [pc, #192]	; (22c8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2208:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    220c:	4a2e      	ldr	r2, [pc, #184]	; (22c8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    220e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    2212:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    2216:	9b01      	ldr	r3, [sp, #4]
    2218:	685b      	ldr	r3, [r3, #4]
    221a:	4a2c      	ldr	r2, [pc, #176]	; (22cc <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    221c:	4293      	cmp	r3, r2
    221e:	d90d      	bls.n	223c <Clock_Ip_SetSOSC_TrustedCall+0x74>
    2220:	9b01      	ldr	r3, [sp, #4]
    2222:	685b      	ldr	r3, [r3, #4]
    2224:	4a2a      	ldr	r2, [pc, #168]	; (22d0 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    2226:	4293      	cmp	r3, r2
    2228:	d208      	bcs.n	223c <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    222a:	4b27      	ldr	r3, [pc, #156]	; (22c8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    222c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2230:	4a25      	ldr	r2, [pc, #148]	; (22c8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2232:	f043 0320 	orr.w	r3, r3, #32
    2236:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    223a:	e007      	b.n	224c <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    223c:	4b22      	ldr	r3, [pc, #136]	; (22c8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    223e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2242:	4a21      	ldr	r2, [pc, #132]	; (22c8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2244:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    2248:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    224c:	9b01      	ldr	r3, [sp, #4]
    224e:	7b1b      	ldrb	r3, [r3, #12]
    2250:	2b00      	cmp	r3, #0
    2252:	d108      	bne.n	2266 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    2254:	4b1c      	ldr	r3, [pc, #112]	; (22c8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2256:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    225a:	4a1b      	ldr	r2, [pc, #108]	; (22c8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    225c:	f043 0304 	orr.w	r3, r3, #4
    2260:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2264:	e007      	b.n	2276 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    2266:	4b18      	ldr	r3, [pc, #96]	; (22c8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2268:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    226c:	4a16      	ldr	r2, [pc, #88]	; (22c8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    226e:	f023 0304 	bic.w	r3, r3, #4
    2272:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    2276:	9b01      	ldr	r3, [sp, #4]
    2278:	7c1b      	ldrb	r3, [r3, #16]
    227a:	2b02      	cmp	r3, #2
    227c:	d011      	beq.n	22a2 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    227e:	2b02      	cmp	r3, #2
    2280:	dc14      	bgt.n	22ac <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    2282:	2b00      	cmp	r3, #0
    2284:	d002      	beq.n	228c <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    2286:	2b01      	cmp	r3, #1
    2288:	d005      	beq.n	2296 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    228a:	e00f      	b.n	22ac <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    228c:	4b0e      	ldr	r3, [pc, #56]	; (22c8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    228e:	2201      	movs	r2, #1
    2290:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2294:	e014      	b.n	22c0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2296:	4b0c      	ldr	r3, [pc, #48]	; (22c8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2298:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    229c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    22a0:	e00e      	b.n	22c0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    22a2:	4b09      	ldr	r3, [pc, #36]	; (22c8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22a4:	4a0b      	ldr	r2, [pc, #44]	; (22d4 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    22a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    22aa:	e009      	b.n	22c0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    22ac:	4b06      	ldr	r3, [pc, #24]	; (22c8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    22b2:	4a05      	ldr	r2, [pc, #20]	; (22c8 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22b4:	f043 0301 	orr.w	r3, r3, #1
    22b8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    22bc:	e000      	b.n	22c0 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    22be:	bf00      	nop
}
    22c0:	bf00      	nop
    22c2:	b002      	add	sp, #8
    22c4:	4770      	bx	lr
    22c6:	bf00      	nop
    22c8:	40064000 	.word	0x40064000
    22cc:	003d08ff 	.word	0x003d08ff
    22d0:	007a1200 	.word	0x007a1200
    22d4:	00030001 	.word	0x00030001

000022d8 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    22d8:	b082      	sub	sp, #8
    22da:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    22dc:	4b05      	ldr	r3, [pc, #20]	; (22f4 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    22de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    22e2:	4a04      	ldr	r2, [pc, #16]	; (22f4 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    22e4:	f023 0301 	bic.w	r3, r3, #1
    22e8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    22ec:	bf00      	nop
    22ee:	b002      	add	sp, #8
    22f0:	4770      	bx	lr
    22f2:	bf00      	nop
    22f4:	40064000 	.word	0x40064000

000022f8 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    22f8:	b082      	sub	sp, #8
    22fa:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    22fc:	9b01      	ldr	r3, [sp, #4]
    22fe:	891b      	ldrh	r3, [r3, #8]
    2300:	2b01      	cmp	r3, #1
    2302:	d107      	bne.n	2314 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2304:	4b05      	ldr	r3, [pc, #20]	; (231c <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2306:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    230a:	4a04      	ldr	r2, [pc, #16]	; (231c <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    230c:	f043 0301 	orr.w	r3, r3, #1
    2310:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    2314:	bf00      	nop
    2316:	b002      	add	sp, #8
    2318:	4770      	bx	lr
    231a:	bf00      	nop
    231c:	40064000 	.word	0x40064000

00002320 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    2320:	b082      	sub	sp, #8
    2322:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2324:	bf00      	nop
    2326:	b002      	add	sp, #8
    2328:	4770      	bx	lr

0000232a <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    232a:	b082      	sub	sp, #8
    232c:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    232e:	2300      	movs	r3, #0
}
    2330:	4618      	mov	r0, r3
    2332:	b002      	add	sp, #8
    2334:	4770      	bx	lr

00002336 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    2336:	b082      	sub	sp, #8
    2338:	9001      	str	r0, [sp, #4]
    233a:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    233c:	bf00      	nop
    233e:	b002      	add	sp, #8
    2340:	4770      	bx	lr
	...

00002344 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    2344:	b082      	sub	sp, #8
    2346:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2348:	bf00      	nop
    234a:	b002      	add	sp, #8
    234c:	4770      	bx	lr

0000234e <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    234e:	b082      	sub	sp, #8
    2350:	9001      	str	r0, [sp, #4]
    2352:	460b      	mov	r3, r1
    2354:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    2358:	bf00      	nop
    235a:	b002      	add	sp, #8
    235c:	4770      	bx	lr

0000235e <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    235e:	b500      	push	{lr}
    2360:	b083      	sub	sp, #12
    2362:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2364:	9b01      	ldr	r3, [sp, #4]
    2366:	2b00      	cmp	r3, #0
    2368:	d002      	beq.n	2370 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    236a:	9801      	ldr	r0, [sp, #4]
    236c:	f000 f8e7 	bl	253e <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2370:	bf00      	nop
    2372:	b003      	add	sp, #12
    2374:	f85d fb04 	ldr.w	pc, [sp], #4

00002378 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2378:	b500      	push	{lr}
    237a:	b085      	sub	sp, #20
    237c:	9001      	str	r0, [sp, #4]
    237e:	460b      	mov	r3, r1
    2380:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2384:	9b01      	ldr	r3, [sp, #4]
    2386:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2388:	f89d 3003 	ldrb.w	r3, [sp, #3]
    238c:	2b00      	cmp	r3, #0
    238e:	d003      	beq.n	2398 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    2390:	2300      	movs	r3, #0
    2392:	f8ad 300c 	strh.w	r3, [sp, #12]
    2396:	e002      	b.n	239e <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2398:	2301      	movs	r3, #1
    239a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    239e:	ab02      	add	r3, sp, #8
    23a0:	4618      	mov	r0, r3
    23a2:	f7ff ffdc 	bl	235e <Clock_Ip_ClockSetSimLPO1KEnable>
}
    23a6:	bf00      	nop
    23a8:	b005      	add	sp, #20
    23aa:	f85d fb04 	ldr.w	pc, [sp], #4

000023ae <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    23ae:	b500      	push	{lr}
    23b0:	b083      	sub	sp, #12
    23b2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    23b4:	9b01      	ldr	r3, [sp, #4]
    23b6:	2b00      	cmp	r3, #0
    23b8:	d002      	beq.n	23c0 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    23ba:	9801      	ldr	r0, [sp, #4]
    23bc:	f000 f8d6 	bl	256c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    23c0:	bf00      	nop
    23c2:	b003      	add	sp, #12
    23c4:	f85d fb04 	ldr.w	pc, [sp], #4

000023c8 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    23c8:	b500      	push	{lr}
    23ca:	b085      	sub	sp, #20
    23cc:	9001      	str	r0, [sp, #4]
    23ce:	460b      	mov	r3, r1
    23d0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    23d4:	9b01      	ldr	r3, [sp, #4]
    23d6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    23d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    23dc:	2b00      	cmp	r3, #0
    23de:	d003      	beq.n	23e8 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    23e0:	2300      	movs	r3, #0
    23e2:	f8ad 300c 	strh.w	r3, [sp, #12]
    23e6:	e002      	b.n	23ee <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    23e8:	2301      	movs	r3, #1
    23ea:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    23ee:	ab02      	add	r3, sp, #8
    23f0:	4618      	mov	r0, r3
    23f2:	f7ff ffdc 	bl	23ae <Clock_Ip_ClockSetSimLPO32KEnable>
}
    23f6:	bf00      	nop
    23f8:	b005      	add	sp, #20
    23fa:	f85d fb04 	ldr.w	pc, [sp], #4

000023fe <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    23fe:	b500      	push	{lr}
    2400:	b083      	sub	sp, #12
    2402:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2404:	9b01      	ldr	r3, [sp, #4]
    2406:	2b00      	cmp	r3, #0
    2408:	d002      	beq.n	2410 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    240a:	9801      	ldr	r0, [sp, #4]
    240c:	f000 f8c6 	bl	259c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2410:	bf00      	nop
    2412:	b003      	add	sp, #12
    2414:	f85d fb04 	ldr.w	pc, [sp], #4

00002418 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2418:	b500      	push	{lr}
    241a:	b085      	sub	sp, #20
    241c:	9001      	str	r0, [sp, #4]
    241e:	460b      	mov	r3, r1
    2420:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2424:	9b01      	ldr	r3, [sp, #4]
    2426:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2428:	f89d 3003 	ldrb.w	r3, [sp, #3]
    242c:	2b00      	cmp	r3, #0
    242e:	d003      	beq.n	2438 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    2430:	2300      	movs	r3, #0
    2432:	f8ad 300c 	strh.w	r3, [sp, #12]
    2436:	e002      	b.n	243e <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2438:	2301      	movs	r3, #1
    243a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    243e:	ab02      	add	r3, sp, #8
    2440:	4618      	mov	r0, r3
    2442:	f7ff ffdc 	bl	23fe <Clock_Ip_ClockSetSimClkoutEnable>
}
    2446:	bf00      	nop
    2448:	b005      	add	sp, #20
    244a:	f85d fb04 	ldr.w	pc, [sp], #4

0000244e <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    244e:	b500      	push	{lr}
    2450:	b083      	sub	sp, #12
    2452:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2454:	9b01      	ldr	r3, [sp, #4]
    2456:	2b00      	cmp	r3, #0
    2458:	d002      	beq.n	2460 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    245a:	9801      	ldr	r0, [sp, #4]
    245c:	f000 f8b6 	bl	25cc <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2460:	bf00      	nop
    2462:	b003      	add	sp, #12
    2464:	f85d fb04 	ldr.w	pc, [sp], #4

00002468 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2468:	b500      	push	{lr}
    246a:	b085      	sub	sp, #20
    246c:	9001      	str	r0, [sp, #4]
    246e:	460b      	mov	r3, r1
    2470:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2474:	9b01      	ldr	r3, [sp, #4]
    2476:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2478:	f89d 3003 	ldrb.w	r3, [sp, #3]
    247c:	2b00      	cmp	r3, #0
    247e:	d003      	beq.n	2488 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    2480:	2300      	movs	r3, #0
    2482:	f8ad 300c 	strh.w	r3, [sp, #12]
    2486:	e002      	b.n	248e <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2488:	2301      	movs	r3, #1
    248a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    248e:	ab02      	add	r3, sp, #8
    2490:	4618      	mov	r0, r3
    2492:	f7ff ffdc 	bl	244e <Clock_Ip_ClockSetPccCgcEnable>
}
    2496:	bf00      	nop
    2498:	b005      	add	sp, #20
    249a:	f85d fb04 	ldr.w	pc, [sp], #4

0000249e <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    249e:	b500      	push	{lr}
    24a0:	b083      	sub	sp, #12
    24a2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    24a4:	9b01      	ldr	r3, [sp, #4]
    24a6:	2b00      	cmp	r3, #0
    24a8:	d002      	beq.n	24b0 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    24aa:	9801      	ldr	r0, [sp, #4]
    24ac:	f000 f8bc 	bl	2628 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    24b0:	bf00      	nop
    24b2:	b003      	add	sp, #12
    24b4:	f85d fb04 	ldr.w	pc, [sp], #4

000024b8 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    24b8:	b500      	push	{lr}
    24ba:	b085      	sub	sp, #20
    24bc:	9001      	str	r0, [sp, #4]
    24be:	460b      	mov	r3, r1
    24c0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    24c4:	9b01      	ldr	r3, [sp, #4]
    24c6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    24c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    24cc:	2b00      	cmp	r3, #0
    24ce:	d003      	beq.n	24d8 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    24d0:	2300      	movs	r3, #0
    24d2:	f8ad 300c 	strh.w	r3, [sp, #12]
    24d6:	e002      	b.n	24de <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    24d8:	2301      	movs	r3, #1
    24da:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    24de:	ab02      	add	r3, sp, #8
    24e0:	4618      	mov	r0, r3
    24e2:	f7ff ffdc 	bl	249e <Clock_Ip_ClockSetSimGate>
}
    24e6:	bf00      	nop
    24e8:	b005      	add	sp, #20
    24ea:	f85d fb04 	ldr.w	pc, [sp], #4

000024ee <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    24ee:	b500      	push	{lr}
    24f0:	b083      	sub	sp, #12
    24f2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    24f4:	9b01      	ldr	r3, [sp, #4]
    24f6:	2b00      	cmp	r3, #0
    24f8:	d002      	beq.n	2500 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    24fa:	9801      	ldr	r0, [sp, #4]
    24fc:	f000 f8c0 	bl	2680 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2500:	bf00      	nop
    2502:	b003      	add	sp, #12
    2504:	f85d fb04 	ldr.w	pc, [sp], #4

00002508 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2508:	b500      	push	{lr}
    250a:	b085      	sub	sp, #20
    250c:	9001      	str	r0, [sp, #4]
    250e:	460b      	mov	r3, r1
    2510:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2514:	9b01      	ldr	r3, [sp, #4]
    2516:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2518:	f89d 3003 	ldrb.w	r3, [sp, #3]
    251c:	2b00      	cmp	r3, #0
    251e:	d003      	beq.n	2528 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    2520:	2300      	movs	r3, #0
    2522:	f8ad 300c 	strh.w	r3, [sp, #12]
    2526:	e002      	b.n	252e <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2528:	2301      	movs	r3, #1
    252a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    252e:	ab02      	add	r3, sp, #8
    2530:	4618      	mov	r0, r3
    2532:	f7ff ffdc 	bl	24ee <Clock_Ip_ClockSetSimTraceEnable>
}
    2536:	bf00      	nop
    2538:	b005      	add	sp, #20
    253a:	f85d fb04 	ldr.w	pc, [sp], #4

0000253e <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    253e:	b084      	sub	sp, #16
    2540:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2542:	4b09      	ldr	r3, [pc, #36]	; (2568 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2544:	691b      	ldr	r3, [r3, #16]
    2546:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    2548:	9b03      	ldr	r3, [sp, #12]
    254a:	f023 0301 	bic.w	r3, r3, #1
    254e:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    2550:	9b01      	ldr	r3, [sp, #4]
    2552:	889b      	ldrh	r3, [r3, #4]
    2554:	461a      	mov	r2, r3
    2556:	9b03      	ldr	r3, [sp, #12]
    2558:	4313      	orrs	r3, r2
    255a:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    255c:	4a02      	ldr	r2, [pc, #8]	; (2568 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    255e:	9b03      	ldr	r3, [sp, #12]
    2560:	6113      	str	r3, [r2, #16]
}
    2562:	bf00      	nop
    2564:	b004      	add	sp, #16
    2566:	4770      	bx	lr
    2568:	40048000 	.word	0x40048000

0000256c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    256c:	b084      	sub	sp, #16
    256e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2570:	4b09      	ldr	r3, [pc, #36]	; (2598 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2572:	691b      	ldr	r3, [r3, #16]
    2574:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    2576:	9b03      	ldr	r3, [sp, #12]
    2578:	f023 0302 	bic.w	r3, r3, #2
    257c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    257e:	9b01      	ldr	r3, [sp, #4]
    2580:	889b      	ldrh	r3, [r3, #4]
    2582:	005b      	lsls	r3, r3, #1
    2584:	9a03      	ldr	r2, [sp, #12]
    2586:	4313      	orrs	r3, r2
    2588:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    258a:	4a03      	ldr	r2, [pc, #12]	; (2598 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    258c:	9b03      	ldr	r3, [sp, #12]
    258e:	6113      	str	r3, [r2, #16]
}
    2590:	bf00      	nop
    2592:	b004      	add	sp, #16
    2594:	4770      	bx	lr
    2596:	bf00      	nop
    2598:	40048000 	.word	0x40048000

0000259c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    259c:	b084      	sub	sp, #16
    259e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    25a0:	4b09      	ldr	r3, [pc, #36]	; (25c8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    25a2:	685b      	ldr	r3, [r3, #4]
    25a4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    25a6:	9b03      	ldr	r3, [sp, #12]
    25a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    25ac:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    25ae:	9b01      	ldr	r3, [sp, #4]
    25b0:	889b      	ldrh	r3, [r3, #4]
    25b2:	02db      	lsls	r3, r3, #11
    25b4:	9a03      	ldr	r2, [sp, #12]
    25b6:	4313      	orrs	r3, r2
    25b8:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    25ba:	4a03      	ldr	r2, [pc, #12]	; (25c8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    25bc:	9b03      	ldr	r3, [sp, #12]
    25be:	6053      	str	r3, [r2, #4]
}
    25c0:	bf00      	nop
    25c2:	b004      	add	sp, #16
    25c4:	4770      	bx	lr
    25c6:	bf00      	nop
    25c8:	40048000 	.word	0x40048000

000025cc <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    25cc:	b084      	sub	sp, #16
    25ce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    25d0:	4913      	ldr	r1, [pc, #76]	; (2620 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    25d2:	9b01      	ldr	r3, [sp, #4]
    25d4:	681a      	ldr	r2, [r3, #0]
    25d6:	4813      	ldr	r0, [pc, #76]	; (2624 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    25d8:	4613      	mov	r3, r2
    25da:	00db      	lsls	r3, r3, #3
    25dc:	4413      	add	r3, r2
    25de:	4403      	add	r3, r0
    25e0:	3306      	adds	r3, #6
    25e2:	781b      	ldrb	r3, [r3, #0]
    25e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    25e8:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    25ea:	9b03      	ldr	r3, [sp, #12]
    25ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    25f0:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    25f2:	9b01      	ldr	r3, [sp, #4]
    25f4:	889b      	ldrh	r3, [r3, #4]
    25f6:	079b      	lsls	r3, r3, #30
    25f8:	9a03      	ldr	r2, [sp, #12]
    25fa:	4313      	orrs	r3, r2
    25fc:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    25fe:	4908      	ldr	r1, [pc, #32]	; (2620 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2600:	9b01      	ldr	r3, [sp, #4]
    2602:	681a      	ldr	r2, [r3, #0]
    2604:	4807      	ldr	r0, [pc, #28]	; (2624 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2606:	4613      	mov	r3, r2
    2608:	00db      	lsls	r3, r3, #3
    260a:	4413      	add	r3, r2
    260c:	4403      	add	r3, r0
    260e:	3306      	adds	r3, #6
    2610:	781b      	ldrb	r3, [r3, #0]
    2612:	461a      	mov	r2, r3
    2614:	9b03      	ldr	r3, [sp, #12]
    2616:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    261a:	bf00      	nop
    261c:	b004      	add	sp, #16
    261e:	4770      	bx	lr
    2620:	40065000 	.word	0x40065000
    2624:	00006cfc 	.word	0x00006cfc

00002628 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2628:	b086      	sub	sp, #24
    262a:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    262c:	9b01      	ldr	r3, [sp, #4]
    262e:	889b      	ldrh	r3, [r3, #4]
    2630:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    2632:	9b01      	ldr	r3, [sp, #4]
    2634:	681a      	ldr	r2, [r3, #0]
    2636:	4910      	ldr	r1, [pc, #64]	; (2678 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    2638:	4613      	mov	r3, r2
    263a:	00db      	lsls	r3, r3, #3
    263c:	4413      	add	r3, r2
    263e:	440b      	add	r3, r1
    2640:	3306      	adds	r3, #6
    2642:	781b      	ldrb	r3, [r3, #0]
    2644:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    2646:	4b0d      	ldr	r3, [pc, #52]	; (267c <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    264a:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    264c:	2201      	movs	r2, #1
    264e:	9b04      	ldr	r3, [sp, #16]
    2650:	fa02 f303 	lsl.w	r3, r2, r3
    2654:	43db      	mvns	r3, r3
    2656:	9a03      	ldr	r2, [sp, #12]
    2658:	4013      	ands	r3, r2
    265a:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    265c:	9a05      	ldr	r2, [sp, #20]
    265e:	9b04      	ldr	r3, [sp, #16]
    2660:	fa02 f303 	lsl.w	r3, r2, r3
    2664:	9a03      	ldr	r2, [sp, #12]
    2666:	4313      	orrs	r3, r2
    2668:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    266a:	4a04      	ldr	r2, [pc, #16]	; (267c <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    266c:	9b03      	ldr	r3, [sp, #12]
    266e:	6413      	str	r3, [r2, #64]	; 0x40
}
    2670:	bf00      	nop
    2672:	b006      	add	sp, #24
    2674:	4770      	bx	lr
    2676:	bf00      	nop
    2678:	00006cfc 	.word	0x00006cfc
    267c:	40048000 	.word	0x40048000

00002680 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2680:	b084      	sub	sp, #16
    2682:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    2684:	4b0a      	ldr	r3, [pc, #40]	; (26b0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2688:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    268a:	9b01      	ldr	r3, [sp, #4]
    268c:	889b      	ldrh	r3, [r3, #4]
    268e:	2b01      	cmp	r3, #1
    2690:	d104      	bne.n	269c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    2692:	9b03      	ldr	r3, [sp, #12]
    2694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2698:	9303      	str	r3, [sp, #12]
    269a:	e003      	b.n	26a4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    269c:	9b03      	ldr	r3, [sp, #12]
    269e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    26a2:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    26a4:	4a02      	ldr	r2, [pc, #8]	; (26b0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    26a6:	9b03      	ldr	r3, [sp, #12]
    26a8:	6693      	str	r3, [r2, #104]	; 0x68
}
    26aa:	bf00      	nop
    26ac:	b004      	add	sp, #16
    26ae:	4770      	bx	lr
    26b0:	40048000 	.word	0x40048000

000026b4 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    26b4:	b082      	sub	sp, #8
    26b6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    26b8:	bf00      	nop
    26ba:	b002      	add	sp, #8
    26bc:	4770      	bx	lr

000026be <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    26be:	b082      	sub	sp, #8
    26c0:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    26c2:	bf00      	nop
    26c4:	b002      	add	sp, #8
    26c6:	4770      	bx	lr

000026c8 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    26c8:	b500      	push	{lr}
    26ca:	b083      	sub	sp, #12
    26cc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26ce:	9b01      	ldr	r3, [sp, #4]
    26d0:	2b00      	cmp	r3, #0
    26d2:	d002      	beq.n	26da <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    26d4:	9801      	ldr	r0, [sp, #4]
    26d6:	f000 f8d1 	bl	287c <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    26da:	bf00      	nop
    26dc:	b003      	add	sp, #12
    26de:	f85d fb04 	ldr.w	pc, [sp], #4

000026e2 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    26e2:	b500      	push	{lr}
    26e4:	b083      	sub	sp, #12
    26e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26e8:	9b01      	ldr	r3, [sp, #4]
    26ea:	2b00      	cmp	r3, #0
    26ec:	d002      	beq.n	26f4 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    26ee:	9801      	ldr	r0, [sp, #4]
    26f0:	f000 f950 	bl	2994 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    26f4:	bf00      	nop
    26f6:	b003      	add	sp, #12
    26f8:	f85d fb04 	ldr.w	pc, [sp], #4

000026fc <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    26fc:	b500      	push	{lr}
    26fe:	b083      	sub	sp, #12
    2700:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    2702:	9801      	ldr	r0, [sp, #4]
    2704:	f000 f98e 	bl	2a24 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2708:	bf00      	nop
    270a:	b003      	add	sp, #12
    270c:	f85d fb04 	ldr.w	pc, [sp], #4

00002710 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2710:	b500      	push	{lr}
    2712:	b083      	sub	sp, #12
    2714:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2716:	9b01      	ldr	r3, [sp, #4]
    2718:	2b00      	cmp	r3, #0
    271a:	d002      	beq.n	2722 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    271c:	9801      	ldr	r0, [sp, #4]
    271e:	f000 f999 	bl	2a54 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2722:	bf00      	nop
    2724:	b003      	add	sp, #12
    2726:	f85d fb04 	ldr.w	pc, [sp], #4

0000272a <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    272a:	b500      	push	{lr}
    272c:	b083      	sub	sp, #12
    272e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2730:	9b01      	ldr	r3, [sp, #4]
    2732:	2b00      	cmp	r3, #0
    2734:	d002      	beq.n	273c <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    2736:	9801      	ldr	r0, [sp, #4]
    2738:	f000 f9b0 	bl	2a9c <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    273c:	bf00      	nop
    273e:	b003      	add	sp, #12
    2740:	f85d fb04 	ldr.w	pc, [sp], #4

00002744 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    2744:	b500      	push	{lr}
    2746:	b083      	sub	sp, #12
    2748:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    274a:	9801      	ldr	r0, [sp, #4]
    274c:	f000 f9ba 	bl	2ac4 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2750:	bf00      	nop
    2752:	b003      	add	sp, #12
    2754:	f85d fb04 	ldr.w	pc, [sp], #4

00002758 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2758:	b500      	push	{lr}
    275a:	b083      	sub	sp, #12
    275c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    275e:	9b01      	ldr	r3, [sp, #4]
    2760:	2b00      	cmp	r3, #0
    2762:	d002      	beq.n	276a <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    2764:	9801      	ldr	r0, [sp, #4]
    2766:	f000 f9bd 	bl	2ae4 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    276a:	bf00      	nop
    276c:	b003      	add	sp, #12
    276e:	f85d fb04 	ldr.w	pc, [sp], #4

00002772 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2772:	b500      	push	{lr}
    2774:	b083      	sub	sp, #12
    2776:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2778:	9b01      	ldr	r3, [sp, #4]
    277a:	2b00      	cmp	r3, #0
    277c:	d002      	beq.n	2784 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    277e:	9801      	ldr	r0, [sp, #4]
    2780:	f000 f9d4 	bl	2b2c <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2784:	bf00      	nop
    2786:	b003      	add	sp, #12
    2788:	f85d fb04 	ldr.w	pc, [sp], #4

0000278c <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    278c:	b500      	push	{lr}
    278e:	b083      	sub	sp, #12
    2790:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    2792:	9801      	ldr	r0, [sp, #4]
    2794:	f000 f9de 	bl	2b54 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2798:	bf00      	nop
    279a:	b003      	add	sp, #12
    279c:	f85d fb04 	ldr.w	pc, [sp], #4

000027a0 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    27a0:	b500      	push	{lr}
    27a2:	b089      	sub	sp, #36	; 0x24
    27a4:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    27a6:	2300      	movs	r3, #0
    27a8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    27ac:	4b20      	ldr	r3, [pc, #128]	; (2830 <SetInputSouceSytemClock+0x90>)
    27ae:	695b      	ldr	r3, [r3, #20]
    27b0:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    27b2:	9b06      	ldr	r3, [sp, #24]
    27b4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    27b8:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    27ba:	9b01      	ldr	r3, [sp, #4]
    27bc:	061b      	lsls	r3, r3, #24
    27be:	9a06      	ldr	r2, [sp, #24]
    27c0:	4313      	orrs	r3, r2
    27c2:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    27c4:	4a1a      	ldr	r2, [pc, #104]	; (2830 <SetInputSouceSytemClock+0x90>)
    27c6:	9b06      	ldr	r3, [sp, #24]
    27c8:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    27ca:	aa02      	add	r2, sp, #8
    27cc:	a903      	add	r1, sp, #12
    27ce:	a804      	add	r0, sp, #16
    27d0:	f24c 3350 	movw	r3, #50000	; 0xc350
    27d4:	f7ff f9ac 	bl	1b30 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    27d8:	4b15      	ldr	r3, [pc, #84]	; (2830 <SetInputSouceSytemClock+0x90>)
    27da:	691b      	ldr	r3, [r3, #16]
    27dc:	0e1b      	lsrs	r3, r3, #24
    27de:	f003 030f 	and.w	r3, r3, #15
    27e2:	9a01      	ldr	r2, [sp, #4]
    27e4:	429a      	cmp	r2, r3
    27e6:	bf0c      	ite	eq
    27e8:	2301      	moveq	r3, #1
    27ea:	2300      	movne	r3, #0
    27ec:	b2db      	uxtb	r3, r3
    27ee:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    27f0:	9a02      	ldr	r2, [sp, #8]
    27f2:	a903      	add	r1, sp, #12
    27f4:	ab04      	add	r3, sp, #16
    27f6:	4618      	mov	r0, r3
    27f8:	f7ff f9b4 	bl	1b64 <Clock_Ip_TimeoutExpired>
    27fc:	4603      	mov	r3, r0
    27fe:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    2802:	9b05      	ldr	r3, [sp, #20]
    2804:	2b00      	cmp	r3, #0
    2806:	d106      	bne.n	2816 <SetInputSouceSytemClock+0x76>
    2808:	f89d 301f 	ldrb.w	r3, [sp, #31]
    280c:	f083 0301 	eor.w	r3, r3, #1
    2810:	b2db      	uxtb	r3, r3
    2812:	2b00      	cmp	r3, #0
    2814:	d1e0      	bne.n	27d8 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    2816:	f89d 301f 	ldrb.w	r3, [sp, #31]
    281a:	2b00      	cmp	r3, #0
    281c:	d003      	beq.n	2826 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    281e:	2105      	movs	r1, #5
    2820:	2001      	movs	r0, #1
    2822:	f7ff f975 	bl	1b10 <Clock_Ip_ReportClockErrors>
    }
}
    2826:	bf00      	nop
    2828:	b009      	add	sp, #36	; 0x24
    282a:	f85d fb04 	ldr.w	pc, [sp], #4
    282e:	bf00      	nop
    2830:	40064000 	.word	0x40064000

00002834 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2834:	b500      	push	{lr}
    2836:	b083      	sub	sp, #12
    2838:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    283a:	9b01      	ldr	r3, [sp, #4]
    283c:	2b00      	cmp	r3, #0
    283e:	d002      	beq.n	2846 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    2840:	9801      	ldr	r0, [sp, #4]
    2842:	f000 f997 	bl	2b74 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2846:	bf00      	nop
    2848:	b003      	add	sp, #12
    284a:	f85d fb04 	ldr.w	pc, [sp], #4

0000284e <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    284e:	b500      	push	{lr}
    2850:	b083      	sub	sp, #12
    2852:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2854:	9b01      	ldr	r3, [sp, #4]
    2856:	2b00      	cmp	r3, #0
    2858:	d002      	beq.n	2860 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    285a:	9801      	ldr	r0, [sp, #4]
    285c:	f000 fa7e 	bl	2d5c <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2860:	bf00      	nop
    2862:	b003      	add	sp, #12
    2864:	f85d fb04 	ldr.w	pc, [sp], #4

00002868 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    2868:	b500      	push	{lr}
    286a:	b083      	sub	sp, #12
    286c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    286e:	9801      	ldr	r0, [sp, #4]
    2870:	f000 fab8 	bl	2de4 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2874:	bf00      	nop
    2876:	b003      	add	sp, #12
    2878:	f85d fb04 	ldr.w	pc, [sp], #4

0000287c <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    287c:	b500      	push	{lr}
    287e:	b08b      	sub	sp, #44	; 0x2c
    2880:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2882:	2300      	movs	r3, #0
    2884:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    2888:	9b01      	ldr	r3, [sp, #4]
    288a:	2b00      	cmp	r3, #0
    288c:	d10b      	bne.n	28a6 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    288e:	2305      	movs	r3, #5
    2890:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    2892:	2301      	movs	r3, #1
    2894:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    2898:	2301      	movs	r3, #1
    289a:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    289e:	2301      	movs	r3, #1
    28a0:	f88d 3010 	strb.w	r3, [sp, #16]
    28a4:	e00e      	b.n	28c4 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    28a6:	9b01      	ldr	r3, [sp, #4]
    28a8:	681b      	ldr	r3, [r3, #0]
    28aa:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    28ac:	9b01      	ldr	r3, [sp, #4]
    28ae:	79db      	ldrb	r3, [r3, #7]
    28b0:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    28b4:	9b01      	ldr	r3, [sp, #4]
    28b6:	889b      	ldrh	r3, [r3, #4]
    28b8:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    28bc:	9b01      	ldr	r3, [sp, #4]
    28be:	7a1b      	ldrb	r3, [r3, #8]
    28c0:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    28c4:	4b32      	ldr	r3, [pc, #200]	; (2990 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    28c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    28ca:	4a31      	ldr	r2, [pc, #196]	; (2990 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    28cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    28d0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    28d4:	4b2e      	ldr	r3, [pc, #184]	; (2990 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    28d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    28da:	4a2d      	ldr	r2, [pc, #180]	; (2990 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    28dc:	f023 0301 	bic.w	r3, r3, #1
    28e0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    28e4:	4b2a      	ldr	r3, [pc, #168]	; (2990 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    28e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    28ea:	4a29      	ldr	r2, [pc, #164]	; (2990 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    28ec:	f023 0304 	bic.w	r3, r3, #4
    28f0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    28f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    28f8:	2b01      	cmp	r3, #1
    28fa:	d144      	bne.n	2986 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    28fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2900:	4a23      	ldr	r2, [pc, #140]	; (2990 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2902:	f003 0301 	and.w	r3, r3, #1
    2906:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    290a:	4b21      	ldr	r3, [pc, #132]	; (2990 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    290c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2910:	4a1f      	ldr	r2, [pc, #124]	; (2990 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2912:	f043 0301 	orr.w	r3, r3, #1
    2916:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    291a:	4b1d      	ldr	r3, [pc, #116]	; (2990 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    291c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2920:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2924:	009b      	lsls	r3, r3, #2
    2926:	f003 0304 	and.w	r3, r3, #4
    292a:	4919      	ldr	r1, [pc, #100]	; (2990 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    292c:	4313      	orrs	r3, r2
    292e:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2932:	aa05      	add	r2, sp, #20
    2934:	a906      	add	r1, sp, #24
    2936:	a807      	add	r0, sp, #28
    2938:	f24c 3350 	movw	r3, #50000	; 0xc350
    293c:	f7ff f8f8 	bl	1b30 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2940:	4b13      	ldr	r3, [pc, #76]	; (2990 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2942:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2946:	0e1b      	lsrs	r3, r3, #24
    2948:	f003 0301 	and.w	r3, r3, #1
    294c:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    294e:	9a05      	ldr	r2, [sp, #20]
    2950:	a906      	add	r1, sp, #24
    2952:	ab07      	add	r3, sp, #28
    2954:	4618      	mov	r0, r3
    2956:	f7ff f905 	bl	1b64 <Clock_Ip_TimeoutExpired>
    295a:	4603      	mov	r3, r0
    295c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2960:	9b08      	ldr	r3, [sp, #32]
    2962:	2b00      	cmp	r3, #0
    2964:	d106      	bne.n	2974 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    2966:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    296a:	f083 0301 	eor.w	r3, r3, #1
    296e:	b2db      	uxtb	r3, r3
    2970:	2b00      	cmp	r3, #0
    2972:	d1e5      	bne.n	2940 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    2974:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2978:	2b00      	cmp	r3, #0
    297a:	d004      	beq.n	2986 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    297c:	9b02      	ldr	r3, [sp, #8]
    297e:	4619      	mov	r1, r3
    2980:	2001      	movs	r0, #1
    2982:	f7ff f8c5 	bl	1b10 <Clock_Ip_ReportClockErrors>
        }
    }
}
    2986:	bf00      	nop
    2988:	b00b      	add	sp, #44	; 0x2c
    298a:	f85d fb04 	ldr.w	pc, [sp], #4
    298e:	bf00      	nop
    2990:	40064000 	.word	0x40064000

00002994 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2994:	b500      	push	{lr}
    2996:	b089      	sub	sp, #36	; 0x24
    2998:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    299a:	2300      	movs	r3, #0
    299c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    29a0:	4b1f      	ldr	r3, [pc, #124]	; (2a20 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    29a6:	4a1e      	ldr	r2, [pc, #120]	; (2a20 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29a8:	f043 0301 	orr.w	r3, r3, #1
    29ac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    29b0:	4b1b      	ldr	r3, [pc, #108]	; (2a20 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    29b6:	4a1a      	ldr	r2, [pc, #104]	; (2a20 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29b8:	f043 0304 	orr.w	r3, r3, #4
    29bc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    29c0:	aa03      	add	r2, sp, #12
    29c2:	a904      	add	r1, sp, #16
    29c4:	a805      	add	r0, sp, #20
    29c6:	f24c 3350 	movw	r3, #50000	; 0xc350
    29ca:	f7ff f8b1 	bl	1b30 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    29ce:	4b14      	ldr	r3, [pc, #80]	; (2a20 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    29d4:	0e1b      	lsrs	r3, r3, #24
    29d6:	f003 0301 	and.w	r3, r3, #1
    29da:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    29dc:	9a03      	ldr	r2, [sp, #12]
    29de:	a904      	add	r1, sp, #16
    29e0:	ab05      	add	r3, sp, #20
    29e2:	4618      	mov	r0, r3
    29e4:	f7ff f8be 	bl	1b64 <Clock_Ip_TimeoutExpired>
    29e8:	4603      	mov	r3, r0
    29ea:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    29ee:	9b06      	ldr	r3, [sp, #24]
    29f0:	2b00      	cmp	r3, #0
    29f2:	d106      	bne.n	2a02 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    29f4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    29f8:	f083 0301 	eor.w	r3, r3, #1
    29fc:	b2db      	uxtb	r3, r3
    29fe:	2b00      	cmp	r3, #0
    2a00:	d1e5      	bne.n	29ce <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    2a02:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2a06:	2b00      	cmp	r3, #0
    2a08:	d005      	beq.n	2a16 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2a0a:	9b01      	ldr	r3, [sp, #4]
    2a0c:	681b      	ldr	r3, [r3, #0]
    2a0e:	4619      	mov	r1, r3
    2a10:	2001      	movs	r0, #1
    2a12:	f7ff f87d 	bl	1b10 <Clock_Ip_ReportClockErrors>
    }
}
    2a16:	bf00      	nop
    2a18:	b009      	add	sp, #36	; 0x24
    2a1a:	f85d fb04 	ldr.w	pc, [sp], #4
    2a1e:	bf00      	nop
    2a20:	40064000 	.word	0x40064000

00002a24 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    2a24:	b082      	sub	sp, #8
    2a26:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    2a28:	4b09      	ldr	r3, [pc, #36]	; (2a50 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a2e:	4a08      	ldr	r2, [pc, #32]	; (2a50 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a30:	f023 0301 	bic.w	r3, r3, #1
    2a34:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2a38:	4b05      	ldr	r3, [pc, #20]	; (2a50 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a3e:	4a04      	ldr	r2, [pc, #16]	; (2a50 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a40:	f023 0304 	bic.w	r3, r3, #4
    2a44:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2a48:	bf00      	nop
    2a4a:	b002      	add	sp, #8
    2a4c:	4770      	bx	lr
    2a4e:	bf00      	nop
    2a50:	40064000 	.word	0x40064000

00002a54 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2a54:	b082      	sub	sp, #8
    2a56:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2a58:	4b0f      	ldr	r3, [pc, #60]	; (2a98 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2a5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a5e:	4a0e      	ldr	r2, [pc, #56]	; (2a98 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2a60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2a64:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2a68:	4b0b      	ldr	r3, [pc, #44]	; (2a98 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2a6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a6e:	4a0a      	ldr	r2, [pc, #40]	; (2a98 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2a70:	f023 0304 	bic.w	r3, r3, #4
    2a74:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    2a78:	4b07      	ldr	r3, [pc, #28]	; (2a98 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2a7a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2a7e:	9b01      	ldr	r3, [sp, #4]
    2a80:	7a1b      	ldrb	r3, [r3, #8]
    2a82:	009b      	lsls	r3, r3, #2
    2a84:	f003 0304 	and.w	r3, r3, #4
    2a88:	4903      	ldr	r1, [pc, #12]	; (2a98 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2a8a:	4313      	orrs	r3, r2
    2a8c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    2a90:	bf00      	nop
    2a92:	b002      	add	sp, #8
    2a94:	4770      	bx	lr
    2a96:	bf00      	nop
    2a98:	40064000 	.word	0x40064000

00002a9c <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2a9c:	b082      	sub	sp, #8
    2a9e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2aa0:	9b01      	ldr	r3, [sp, #4]
    2aa2:	889b      	ldrh	r3, [r3, #4]
    2aa4:	2b01      	cmp	r3, #1
    2aa6:	d107      	bne.n	2ab8 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    2aa8:	4b05      	ldr	r3, [pc, #20]	; (2ac0 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2aaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2aae:	4a04      	ldr	r2, [pc, #16]	; (2ac0 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2ab0:	f043 0304 	orr.w	r3, r3, #4
    2ab4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    2ab8:	bf00      	nop
    2aba:	b002      	add	sp, #8
    2abc:	4770      	bx	lr
    2abe:	bf00      	nop
    2ac0:	40064000 	.word	0x40064000

00002ac4 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    2ac4:	b082      	sub	sp, #8
    2ac6:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2ac8:	4b05      	ldr	r3, [pc, #20]	; (2ae0 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2aca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ace:	4a04      	ldr	r2, [pc, #16]	; (2ae0 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2ad0:	f023 0304 	bic.w	r3, r3, #4
    2ad4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2ad8:	bf00      	nop
    2ada:	b002      	add	sp, #8
    2adc:	4770      	bx	lr
    2ade:	bf00      	nop
    2ae0:	40064000 	.word	0x40064000

00002ae4 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2ae4:	b082      	sub	sp, #8
    2ae6:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2ae8:	4b0f      	ldr	r3, [pc, #60]	; (2b28 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2aea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2aee:	4a0e      	ldr	r2, [pc, #56]	; (2b28 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2af0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2af4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    2af8:	4b0b      	ldr	r3, [pc, #44]	; (2b28 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2afa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2afe:	4a0a      	ldr	r2, [pc, #40]	; (2b28 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b00:	f023 0302 	bic.w	r3, r3, #2
    2b04:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    2b08:	4b07      	ldr	r3, [pc, #28]	; (2b28 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b0a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2b0e:	9b01      	ldr	r3, [sp, #4]
    2b10:	7a5b      	ldrb	r3, [r3, #9]
    2b12:	005b      	lsls	r3, r3, #1
    2b14:	f003 0302 	and.w	r3, r3, #2
    2b18:	4903      	ldr	r1, [pc, #12]	; (2b28 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b1a:	4313      	orrs	r3, r2
    2b1c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    2b20:	bf00      	nop
    2b22:	b002      	add	sp, #8
    2b24:	4770      	bx	lr
    2b26:	bf00      	nop
    2b28:	40064000 	.word	0x40064000

00002b2c <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2b2c:	b082      	sub	sp, #8
    2b2e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2b30:	9b01      	ldr	r3, [sp, #4]
    2b32:	889b      	ldrh	r3, [r3, #4]
    2b34:	2b01      	cmp	r3, #1
    2b36:	d107      	bne.n	2b48 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    2b38:	4b05      	ldr	r3, [pc, #20]	; (2b50 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2b3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b3e:	4a04      	ldr	r2, [pc, #16]	; (2b50 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2b40:	f043 0302 	orr.w	r3, r3, #2
    2b44:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    2b48:	bf00      	nop
    2b4a:	b002      	add	sp, #8
    2b4c:	4770      	bx	lr
    2b4e:	bf00      	nop
    2b50:	40064000 	.word	0x40064000

00002b54 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    2b54:	b082      	sub	sp, #8
    2b56:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    2b58:	4b05      	ldr	r3, [pc, #20]	; (2b70 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    2b5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b5e:	4a04      	ldr	r2, [pc, #16]	; (2b70 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    2b60:	f023 0302 	bic.w	r3, r3, #2
    2b64:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2b68:	bf00      	nop
    2b6a:	b002      	add	sp, #8
    2b6c:	4770      	bx	lr
    2b6e:	bf00      	nop
    2b70:	40064000 	.word	0x40064000

00002b74 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2b74:	b500      	push	{lr}
    2b76:	b08b      	sub	sp, #44	; 0x2c
    2b78:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2b7a:	9b01      	ldr	r3, [sp, #4]
    2b7c:	681a      	ldr	r2, [r3, #0]
    2b7e:	4975      	ldr	r1, [pc, #468]	; (2d54 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    2b80:	4613      	mov	r3, r2
    2b82:	00db      	lsls	r3, r3, #3
    2b84:	4413      	add	r3, r2
    2b86:	440b      	add	r3, r1
    2b88:	781b      	ldrb	r3, [r3, #0]
    2b8a:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    2b8c:	2300      	movs	r3, #0
    2b8e:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    2b92:	2300      	movs	r3, #0
    2b94:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    2b98:	4b6f      	ldr	r3, [pc, #444]	; (2d58 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2b9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2b9e:	4a6e      	ldr	r2, [pc, #440]	; (2d58 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2ba0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2ba4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    2ba8:	4b6b      	ldr	r3, [pc, #428]	; (2d58 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2baa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    2bb2:	2b00      	cmp	r3, #0
    2bb4:	d07d      	beq.n	2cb2 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    2bb6:	9b01      	ldr	r3, [sp, #4]
    2bb8:	79db      	ldrb	r3, [r3, #7]
    2bba:	461a      	mov	r2, r3
    2bbc:	4b66      	ldr	r3, [pc, #408]	; (2d58 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2bbe:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    2bc2:	f003 0303 	and.w	r3, r3, #3
    2bc6:	429a      	cmp	r2, r3
    2bc8:	d10b      	bne.n	2be2 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    2bca:	9b01      	ldr	r3, [sp, #4]
    2bcc:	799b      	ldrb	r3, [r3, #6]
    2bce:	461a      	mov	r2, r3
    2bd0:	4b61      	ldr	r3, [pc, #388]	; (2d58 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2bd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2bd6:	08db      	lsrs	r3, r3, #3
    2bd8:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    2bdc:	429a      	cmp	r2, r3
    2bde:	f000 80b4 	beq.w	2d4a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    2be2:	4b5d      	ldr	r3, [pc, #372]	; (2d58 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2be4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2be8:	f003 0301 	and.w	r3, r3, #1
    2bec:	2b00      	cmp	r3, #0
    2bee:	d105      	bne.n	2bfc <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    2bf0:	2301      	movs	r3, #1
    2bf2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    2bf6:	2000      	movs	r0, #0
    2bf8:	f7ff fd66 	bl	26c8 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    2bfc:	2002      	movs	r0, #2
    2bfe:	f7ff fdcf 	bl	27a0 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    2c02:	4b55      	ldr	r3, [pc, #340]	; (2d58 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c04:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c08:	4a53      	ldr	r2, [pc, #332]	; (2d58 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c0a:	f023 0301 	bic.w	r3, r3, #1
    2c0e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    2c12:	9b01      	ldr	r3, [sp, #4]
    2c14:	889b      	ldrh	r3, [r3, #4]
    2c16:	2b01      	cmp	r3, #1
    2c18:	f040 8097 	bne.w	2d4a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    2c1c:	9b01      	ldr	r3, [sp, #4]
    2c1e:	79db      	ldrb	r3, [r3, #7]
    2c20:	4a4d      	ldr	r2, [pc, #308]	; (2d58 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c22:	f003 0303 	and.w	r3, r3, #3
    2c26:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    2c2a:	4b4b      	ldr	r3, [pc, #300]	; (2d58 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c2c:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    2c30:	9b01      	ldr	r3, [sp, #4]
    2c32:	799b      	ldrb	r3, [r3, #6]
    2c34:	00db      	lsls	r3, r3, #3
    2c36:	f003 0308 	and.w	r3, r3, #8
    2c3a:	4313      	orrs	r3, r2
    2c3c:	4a46      	ldr	r2, [pc, #280]	; (2d58 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c3e:	f043 0301 	orr.w	r3, r3, #1
    2c42:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2c46:	aa03      	add	r2, sp, #12
    2c48:	a904      	add	r1, sp, #16
    2c4a:	a805      	add	r0, sp, #20
    2c4c:	f24c 3350 	movw	r3, #50000	; 0xc350
    2c50:	f7fe ff6e 	bl	1b30 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    2c54:	4b40      	ldr	r3, [pc, #256]	; (2d58 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c5a:	0e1b      	lsrs	r3, r3, #24
    2c5c:	f003 0301 	and.w	r3, r3, #1
    2c60:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2c62:	9a03      	ldr	r2, [sp, #12]
    2c64:	a904      	add	r1, sp, #16
    2c66:	ab05      	add	r3, sp, #20
    2c68:	4618      	mov	r0, r3
    2c6a:	f7fe ff7b 	bl	1b64 <Clock_Ip_TimeoutExpired>
    2c6e:	4603      	mov	r3, r0
    2c70:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2c74:	9b06      	ldr	r3, [sp, #24]
    2c76:	2b00      	cmp	r3, #0
    2c78:	d106      	bne.n	2c88 <Clock_Ip_SetFirc_TrustedCall+0x114>
    2c7a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2c7e:	f083 0301 	eor.w	r3, r3, #1
    2c82:	b2db      	uxtb	r3, r3
    2c84:	2b00      	cmp	r3, #0
    2c86:	d1e5      	bne.n	2c54 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    2c88:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	d005      	beq.n	2c9c <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2c90:	9b01      	ldr	r3, [sp, #4]
    2c92:	681b      	ldr	r3, [r3, #0]
    2c94:	4619      	mov	r1, r3
    2c96:	2001      	movs	r0, #1
    2c98:	f7fe ff3a 	bl	1b10 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    2c9c:	2003      	movs	r0, #3
    2c9e:	f7ff fd7f 	bl	27a0 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    2ca2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	d04f      	beq.n	2d4a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    2caa:	2002      	movs	r0, #2
    2cac:	f7ff fd26 	bl	26fc <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    2cb0:	e04b      	b.n	2d4a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    2cb2:	4b29      	ldr	r3, [pc, #164]	; (2d58 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cb4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2cb8:	4a27      	ldr	r2, [pc, #156]	; (2d58 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cba:	f023 0301 	bic.w	r3, r3, #1
    2cbe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    2cc2:	9b01      	ldr	r3, [sp, #4]
    2cc4:	889b      	ldrh	r3, [r3, #4]
    2cc6:	2b01      	cmp	r3, #1
    2cc8:	d13f      	bne.n	2d4a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    2cca:	9b01      	ldr	r3, [sp, #4]
    2ccc:	79db      	ldrb	r3, [r3, #7]
    2cce:	4a22      	ldr	r2, [pc, #136]	; (2d58 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cd0:	f003 0303 	and.w	r3, r3, #3
    2cd4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    2cd8:	4b1f      	ldr	r3, [pc, #124]	; (2d58 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cda:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    2cde:	9b01      	ldr	r3, [sp, #4]
    2ce0:	799b      	ldrb	r3, [r3, #6]
    2ce2:	00db      	lsls	r3, r3, #3
    2ce4:	f003 0308 	and.w	r3, r3, #8
    2ce8:	4313      	orrs	r3, r2
    2cea:	4a1b      	ldr	r2, [pc, #108]	; (2d58 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cec:	f043 0301 	orr.w	r3, r3, #1
    2cf0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2cf4:	aa03      	add	r2, sp, #12
    2cf6:	a904      	add	r1, sp, #16
    2cf8:	a805      	add	r0, sp, #20
    2cfa:	f24c 3350 	movw	r3, #50000	; 0xc350
    2cfe:	f7fe ff17 	bl	1b30 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    2d02:	4b15      	ldr	r3, [pc, #84]	; (2d58 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d04:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2d08:	0e1b      	lsrs	r3, r3, #24
    2d0a:	f003 0301 	and.w	r3, r3, #1
    2d0e:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2d10:	9a03      	ldr	r2, [sp, #12]
    2d12:	a904      	add	r1, sp, #16
    2d14:	ab05      	add	r3, sp, #20
    2d16:	4618      	mov	r0, r3
    2d18:	f7fe ff24 	bl	1b64 <Clock_Ip_TimeoutExpired>
    2d1c:	4603      	mov	r3, r0
    2d1e:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2d22:	9b06      	ldr	r3, [sp, #24]
    2d24:	2b00      	cmp	r3, #0
    2d26:	d106      	bne.n	2d36 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    2d28:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2d2c:	f083 0301 	eor.w	r3, r3, #1
    2d30:	b2db      	uxtb	r3, r3
    2d32:	2b00      	cmp	r3, #0
    2d34:	d1e5      	bne.n	2d02 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    2d36:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	d005      	beq.n	2d4a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2d3e:	9b01      	ldr	r3, [sp, #4]
    2d40:	681b      	ldr	r3, [r3, #0]
    2d42:	4619      	mov	r1, r3
    2d44:	2001      	movs	r0, #1
    2d46:	f7fe fee3 	bl	1b10 <Clock_Ip_ReportClockErrors>
}
    2d4a:	bf00      	nop
    2d4c:	b00b      	add	sp, #44	; 0x2c
    2d4e:	f85d fb04 	ldr.w	pc, [sp], #4
    2d52:	bf00      	nop
    2d54:	00006cfc 	.word	0x00006cfc
    2d58:	40064000 	.word	0x40064000

00002d5c <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2d5c:	b500      	push	{lr}
    2d5e:	b089      	sub	sp, #36	; 0x24
    2d60:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2d62:	2300      	movs	r3, #0
    2d64:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    2d68:	9b01      	ldr	r3, [sp, #4]
    2d6a:	889b      	ldrh	r3, [r3, #4]
    2d6c:	2b01      	cmp	r3, #1
    2d6e:	d132      	bne.n	2dd6 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    2d70:	4b1b      	ldr	r3, [pc, #108]	; (2de0 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2d72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2d76:	4a1a      	ldr	r2, [pc, #104]	; (2de0 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2d78:	f043 0301 	orr.w	r3, r3, #1
    2d7c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2d80:	aa03      	add	r2, sp, #12
    2d82:	a904      	add	r1, sp, #16
    2d84:	a805      	add	r0, sp, #20
    2d86:	f24c 3350 	movw	r3, #50000	; 0xc350
    2d8a:	f7fe fed1 	bl	1b30 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    2d8e:	4b14      	ldr	r3, [pc, #80]	; (2de0 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2d90:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2d94:	0e1b      	lsrs	r3, r3, #24
    2d96:	f003 0301 	and.w	r3, r3, #1
    2d9a:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2d9c:	9a03      	ldr	r2, [sp, #12]
    2d9e:	a904      	add	r1, sp, #16
    2da0:	ab05      	add	r3, sp, #20
    2da2:	4618      	mov	r0, r3
    2da4:	f7fe fede 	bl	1b64 <Clock_Ip_TimeoutExpired>
    2da8:	4603      	mov	r3, r0
    2daa:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2dae:	9b06      	ldr	r3, [sp, #24]
    2db0:	2b00      	cmp	r3, #0
    2db2:	d106      	bne.n	2dc2 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    2db4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2db8:	f083 0301 	eor.w	r3, r3, #1
    2dbc:	b2db      	uxtb	r3, r3
    2dbe:	2b00      	cmp	r3, #0
    2dc0:	d1e5      	bne.n	2d8e <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    2dc2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2dc6:	2b00      	cmp	r3, #0
    2dc8:	d005      	beq.n	2dd6 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2dca:	9b01      	ldr	r3, [sp, #4]
    2dcc:	681b      	ldr	r3, [r3, #0]
    2dce:	4619      	mov	r1, r3
    2dd0:	2001      	movs	r0, #1
    2dd2:	f7fe fe9d 	bl	1b10 <Clock_Ip_ReportClockErrors>
        }
    }
}
    2dd6:	bf00      	nop
    2dd8:	b009      	add	sp, #36	; 0x24
    2dda:	f85d fb04 	ldr.w	pc, [sp], #4
    2dde:	bf00      	nop
    2de0:	40064000 	.word	0x40064000

00002de4 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    2de4:	b082      	sub	sp, #8
    2de6:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    2de8:	4b05      	ldr	r3, [pc, #20]	; (2e00 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    2dea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2dee:	4a04      	ldr	r2, [pc, #16]	; (2e00 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    2df0:	f023 0301 	bic.w	r3, r3, #1
    2df4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    2df8:	bf00      	nop
    2dfa:	b002      	add	sp, #8
    2dfc:	4770      	bx	lr
    2dfe:	bf00      	nop
    2e00:	40064000 	.word	0x40064000

00002e04 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    2e04:	b082      	sub	sp, #8
    2e06:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2e08:	bf00      	nop
    2e0a:	b002      	add	sp, #8
    2e0c:	4770      	bx	lr

00002e0e <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    2e0e:	b082      	sub	sp, #8
    2e10:	9001      	str	r0, [sp, #4]
    2e12:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    2e14:	bf00      	nop
    2e16:	b002      	add	sp, #8
    2e18:	4770      	bx	lr

00002e1a <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    2e1a:	b082      	sub	sp, #8
    2e1c:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2e1e:	bf00      	nop
    2e20:	b002      	add	sp, #8
    2e22:	4770      	bx	lr

00002e24 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    2e24:	b082      	sub	sp, #8
    2e26:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2e28:	bf00      	nop
    2e2a:	b002      	add	sp, #8
    2e2c:	4770      	bx	lr

00002e2e <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    2e2e:	b082      	sub	sp, #8
    2e30:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    2e32:	2302      	movs	r3, #2
}
    2e34:	4618      	mov	r0, r3
    2e36:	b002      	add	sp, #8
    2e38:	4770      	bx	lr

00002e3a <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    2e3a:	b082      	sub	sp, #8
    2e3c:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    2e3e:	bf00      	nop
    2e40:	b002      	add	sp, #8
    2e42:	4770      	bx	lr

00002e44 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    2e44:	b500      	push	{lr}
    2e46:	b083      	sub	sp, #12
    2e48:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e4a:	9b01      	ldr	r3, [sp, #4]
    2e4c:	2b00      	cmp	r3, #0
    2e4e:	d002      	beq.n	2e56 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    2e50:	9801      	ldr	r0, [sp, #4]
    2e52:	f000 f870 	bl	2f36 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e56:	bf00      	nop
    2e58:	b003      	add	sp, #12
    2e5a:	f85d fb04 	ldr.w	pc, [sp], #4

00002e5e <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    2e5e:	b500      	push	{lr}
    2e60:	b083      	sub	sp, #12
    2e62:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e64:	9b01      	ldr	r3, [sp, #4]
    2e66:	2b00      	cmp	r3, #0
    2e68:	d002      	beq.n	2e70 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    2e6a:	9801      	ldr	r0, [sp, #4]
    2e6c:	f000 f89a 	bl	2fa4 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e70:	bf00      	nop
    2e72:	b003      	add	sp, #12
    2e74:	f85d fb04 	ldr.w	pc, [sp], #4

00002e78 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    2e78:	b500      	push	{lr}
    2e7a:	b089      	sub	sp, #36	; 0x24
    2e7c:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    2e7e:	2301      	movs	r3, #1
    2e80:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    2e82:	2300      	movs	r3, #0
    2e84:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    2e88:	4b1e      	ldr	r3, [pc, #120]	; (2f04 <Clock_Ip_CompleteSpll+0x8c>)
    2e8a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2e8e:	f003 0301 	and.w	r3, r3, #1
    2e92:	2b00      	cmp	r3, #0
    2e94:	d02f      	beq.n	2ef6 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2e96:	aa02      	add	r2, sp, #8
    2e98:	a903      	add	r1, sp, #12
    2e9a:	a804      	add	r0, sp, #16
    2e9c:	f24c 3350 	movw	r3, #50000	; 0xc350
    2ea0:	f7fe fe46 	bl	1b30 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    2ea4:	4b17      	ldr	r3, [pc, #92]	; (2f04 <Clock_Ip_CompleteSpll+0x8c>)
    2ea6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2eaa:	0e1b      	lsrs	r3, r3, #24
    2eac:	f003 0301 	and.w	r3, r3, #1
    2eb0:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2eb2:	9a02      	ldr	r2, [sp, #8]
    2eb4:	a903      	add	r1, sp, #12
    2eb6:	ab04      	add	r3, sp, #16
    2eb8:	4618      	mov	r0, r3
    2eba:	f7fe fe53 	bl	1b64 <Clock_Ip_TimeoutExpired>
    2ebe:	4603      	mov	r3, r0
    2ec0:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    2ec4:	9b05      	ldr	r3, [sp, #20]
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d106      	bne.n	2ed8 <Clock_Ip_CompleteSpll+0x60>
    2eca:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2ece:	f083 0301 	eor.w	r3, r3, #1
    2ed2:	b2db      	uxtb	r3, r3
    2ed4:	2b00      	cmp	r3, #0
    2ed6:	d1e5      	bne.n	2ea4 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    2ed8:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2edc:	f083 0301 	eor.w	r3, r3, #1
    2ee0:	b2db      	uxtb	r3, r3
    2ee2:	2b00      	cmp	r3, #0
    2ee4:	d002      	beq.n	2eec <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    2ee6:	2302      	movs	r3, #2
    2ee8:	9307      	str	r3, [sp, #28]
    2eea:	e006      	b.n	2efa <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    2eec:	9901      	ldr	r1, [sp, #4]
    2eee:	2001      	movs	r0, #1
    2ef0:	f7fe fe0e 	bl	1b10 <Clock_Ip_ReportClockErrors>
    2ef4:	e001      	b.n	2efa <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    2ef6:	2300      	movs	r3, #0
    2ef8:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    2efa:	9b07      	ldr	r3, [sp, #28]
}
    2efc:	4618      	mov	r0, r3
    2efe:	b009      	add	sp, #36	; 0x24
    2f00:	f85d fb04 	ldr.w	pc, [sp], #4
    2f04:	40064000 	.word	0x40064000

00002f08 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    2f08:	b500      	push	{lr}
    2f0a:	b083      	sub	sp, #12
    2f0c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    2f0e:	9801      	ldr	r0, [sp, #4]
    2f10:	f000 f886 	bl	3020 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2f14:	bf00      	nop
    2f16:	b003      	add	sp, #12
    2f18:	f85d fb04 	ldr.w	pc, [sp], #4

00002f1c <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    2f1c:	b500      	push	{lr}
    2f1e:	b083      	sub	sp, #12
    2f20:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f22:	9b01      	ldr	r3, [sp, #4]
    2f24:	2b00      	cmp	r3, #0
    2f26:	d002      	beq.n	2f2e <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    2f28:	9801      	ldr	r0, [sp, #4]
    2f2a:	f000 f891 	bl	3050 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f2e:	bf00      	nop
    2f30:	b003      	add	sp, #12
    2f32:	f85d fb04 	ldr.w	pc, [sp], #4

00002f36 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    2f36:	b082      	sub	sp, #8
    2f38:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    2f3a:	4b19      	ldr	r3, [pc, #100]	; (2fa0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f3c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f40:	4a17      	ldr	r2, [pc, #92]	; (2fa0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2f46:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    2f4a:	4b15      	ldr	r3, [pc, #84]	; (2fa0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f4c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f50:	4a13      	ldr	r2, [pc, #76]	; (2fa0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2f56:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    2f5a:	4b11      	ldr	r3, [pc, #68]	; (2fa0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f5c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f60:	4a0f      	ldr	r2, [pc, #60]	; (2fa0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f62:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    2f66:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    2f6a:	4b0d      	ldr	r3, [pc, #52]	; (2fa0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f6c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f70:	4a0b      	ldr	r2, [pc, #44]	; (2fa0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f72:	f023 0301 	bic.w	r3, r3, #1
    2f76:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    2f7a:	4b09      	ldr	r3, [pc, #36]	; (2fa0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f7c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    2f80:	4a07      	ldr	r2, [pc, #28]	; (2fa0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f82:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2f86:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    2f8a:	4b05      	ldr	r3, [pc, #20]	; (2fa0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f8c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    2f90:	4a03      	ldr	r2, [pc, #12]	; (2fa0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    2f96:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    2f9a:	bf00      	nop
    2f9c:	b002      	add	sp, #8
    2f9e:	4770      	bx	lr
    2fa0:	40064000 	.word	0x40064000

00002fa4 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    2fa4:	b082      	sub	sp, #8
    2fa6:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    2fa8:	9b01      	ldr	r3, [sp, #4]
    2faa:	889b      	ldrh	r3, [r3, #4]
    2fac:	2b01      	cmp	r3, #1
    2fae:	d12f      	bne.n	3010 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    2fb0:	4b1a      	ldr	r3, [pc, #104]	; (301c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    2fb2:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    2fb6:	9b01      	ldr	r3, [sp, #4]
    2fb8:	7b5b      	ldrb	r3, [r3, #13]
    2fba:	3b01      	subs	r3, #1
    2fbc:	021b      	lsls	r3, r3, #8
    2fbe:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    2fc2:	9b01      	ldr	r3, [sp, #4]
    2fc4:	7d1b      	ldrb	r3, [r3, #20]
    2fc6:	3b10      	subs	r3, #16
    2fc8:	041b      	lsls	r3, r3, #16
    2fca:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    2fce:	430b      	orrs	r3, r1
    2fd0:	4912      	ldr	r1, [pc, #72]	; (301c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    2fd2:	4313      	orrs	r3, r2
    2fd4:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    2fd8:	9b01      	ldr	r3, [sp, #4]
    2fda:	7fdb      	ldrb	r3, [r3, #31]
    2fdc:	2b02      	cmp	r3, #2
    2fde:	d011      	beq.n	3004 <Clock_Ip_SetSpll_TrustedCall+0x60>
    2fe0:	2b02      	cmp	r3, #2
    2fe2:	dc17      	bgt.n	3014 <Clock_Ip_SetSpll_TrustedCall+0x70>
    2fe4:	2b00      	cmp	r3, #0
    2fe6:	d002      	beq.n	2fee <Clock_Ip_SetSpll_TrustedCall+0x4a>
    2fe8:	2b01      	cmp	r3, #1
    2fea:	d005      	beq.n	2ff8 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    2fec:	e012      	b.n	3014 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    2fee:	4b0b      	ldr	r3, [pc, #44]	; (301c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    2ff0:	2200      	movs	r2, #0
    2ff2:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    2ff6:	e00e      	b.n	3016 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    2ff8:	4b08      	ldr	r3, [pc, #32]	; (301c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    2ffa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2ffe:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3002:	e008      	b.n	3016 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3004:	4b05      	ldr	r3, [pc, #20]	; (301c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3006:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    300a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    300e:	e002      	b.n	3016 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    3010:	bf00      	nop
    3012:	e000      	b.n	3016 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    3014:	bf00      	nop
}
    3016:	bf00      	nop
    3018:	b002      	add	sp, #8
    301a:	4770      	bx	lr
    301c:	40064000 	.word	0x40064000

00003020 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    3020:	b082      	sub	sp, #8
    3022:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3024:	4b09      	ldr	r3, [pc, #36]	; (304c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3026:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    302a:	4a08      	ldr	r2, [pc, #32]	; (304c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    302c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3030:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3034:	4b05      	ldr	r3, [pc, #20]	; (304c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3036:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    303a:	4a04      	ldr	r2, [pc, #16]	; (304c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    303c:	f023 0301 	bic.w	r3, r3, #1
    3040:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    3044:	bf00      	nop
    3046:	b002      	add	sp, #8
    3048:	4770      	bx	lr
    304a:	bf00      	nop
    304c:	40064000 	.word	0x40064000

00003050 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3050:	b082      	sub	sp, #8
    3052:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3054:	9b01      	ldr	r3, [sp, #4]
    3056:	889b      	ldrh	r3, [r3, #4]
    3058:	2b01      	cmp	r3, #1
    305a:	d107      	bne.n	306c <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    305c:	4b05      	ldr	r3, [pc, #20]	; (3074 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    305e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3062:	4a04      	ldr	r2, [pc, #16]	; (3074 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3064:	f043 0301 	orr.w	r3, r3, #1
    3068:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    306c:	bf00      	nop
    306e:	b002      	add	sp, #8
    3070:	4770      	bx	lr
    3072:	bf00      	nop
    3074:	40064000 	.word	0x40064000

00003078 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    3078:	b082      	sub	sp, #8
    307a:	9001      	str	r0, [sp, #4]
    307c:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    307e:	bf00      	nop
    3080:	b002      	add	sp, #8
    3082:	4770      	bx	lr

00003084 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    3084:	b082      	sub	sp, #8
    3086:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3088:	bf00      	nop
    308a:	b002      	add	sp, #8
    308c:	4770      	bx	lr

0000308e <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    308e:	b500      	push	{lr}
    3090:	b083      	sub	sp, #12
    3092:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3094:	9b01      	ldr	r3, [sp, #4]
    3096:	2b00      	cmp	r3, #0
    3098:	d002      	beq.n	30a0 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    309a:	9801      	ldr	r0, [sp, #4]
    309c:	f000 f8ee 	bl	327c <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30a0:	bf00      	nop
    30a2:	b003      	add	sp, #12
    30a4:	f85d fb04 	ldr.w	pc, [sp], #4

000030a8 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    30a8:	b500      	push	{lr}
    30aa:	b083      	sub	sp, #12
    30ac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30ae:	9b01      	ldr	r3, [sp, #4]
    30b0:	2b00      	cmp	r3, #0
    30b2:	d002      	beq.n	30ba <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    30b4:	9801      	ldr	r0, [sp, #4]
    30b6:	f000 f8ff 	bl	32b8 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30ba:	bf00      	nop
    30bc:	b003      	add	sp, #12
    30be:	f85d fb04 	ldr.w	pc, [sp], #4

000030c2 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    30c2:	b500      	push	{lr}
    30c4:	b083      	sub	sp, #12
    30c6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30c8:	9b01      	ldr	r3, [sp, #4]
    30ca:	2b00      	cmp	r3, #0
    30cc:	d002      	beq.n	30d4 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    30ce:	9801      	ldr	r0, [sp, #4]
    30d0:	f000 f912 	bl	32f8 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30d4:	bf00      	nop
    30d6:	b003      	add	sp, #12
    30d8:	f85d fb04 	ldr.w	pc, [sp], #4

000030dc <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    30dc:	b500      	push	{lr}
    30de:	b083      	sub	sp, #12
    30e0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30e2:	9b01      	ldr	r3, [sp, #4]
    30e4:	2b00      	cmp	r3, #0
    30e6:	d002      	beq.n	30ee <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    30e8:	9801      	ldr	r0, [sp, #4]
    30ea:	f000 f925 	bl	3338 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30ee:	bf00      	nop
    30f0:	b003      	add	sp, #12
    30f2:	f85d fb04 	ldr.w	pc, [sp], #4

000030f6 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    30f6:	b500      	push	{lr}
    30f8:	b083      	sub	sp, #12
    30fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30fc:	9b01      	ldr	r3, [sp, #4]
    30fe:	2b00      	cmp	r3, #0
    3100:	d002      	beq.n	3108 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    3102:	9801      	ldr	r0, [sp, #4]
    3104:	f000 f936 	bl	3374 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3108:	bf00      	nop
    310a:	b003      	add	sp, #12
    310c:	f85d fb04 	ldr.w	pc, [sp], #4

00003110 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3110:	b500      	push	{lr}
    3112:	b083      	sub	sp, #12
    3114:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3116:	9b01      	ldr	r3, [sp, #4]
    3118:	2b00      	cmp	r3, #0
    311a:	d002      	beq.n	3122 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    311c:	9801      	ldr	r0, [sp, #4]
    311e:	f000 f949 	bl	33b4 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3122:	bf00      	nop
    3124:	b003      	add	sp, #12
    3126:	f85d fb04 	ldr.w	pc, [sp], #4

0000312a <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    312a:	b500      	push	{lr}
    312c:	b083      	sub	sp, #12
    312e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3130:	9b01      	ldr	r3, [sp, #4]
    3132:	2b00      	cmp	r3, #0
    3134:	d002      	beq.n	313c <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    3136:	9801      	ldr	r0, [sp, #4]
    3138:	f000 f958 	bl	33ec <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    313c:	bf00      	nop
    313e:	b003      	add	sp, #12
    3140:	f85d fb04 	ldr.w	pc, [sp], #4

00003144 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3144:	b500      	push	{lr}
    3146:	b083      	sub	sp, #12
    3148:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    314a:	9b01      	ldr	r3, [sp, #4]
    314c:	2b00      	cmp	r3, #0
    314e:	d002      	beq.n	3156 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    3150:	9801      	ldr	r0, [sp, #4]
    3152:	f000 f969 	bl	3428 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3156:	bf00      	nop
    3158:	b003      	add	sp, #12
    315a:	f85d fb04 	ldr.w	pc, [sp], #4

0000315e <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    315e:	b500      	push	{lr}
    3160:	b083      	sub	sp, #12
    3162:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3164:	9b01      	ldr	r3, [sp, #4]
    3166:	2b00      	cmp	r3, #0
    3168:	d002      	beq.n	3170 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    316a:	9801      	ldr	r0, [sp, #4]
    316c:	f000 f978 	bl	3460 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3170:	bf00      	nop
    3172:	b003      	add	sp, #12
    3174:	f85d fb04 	ldr.w	pc, [sp], #4

00003178 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3178:	b500      	push	{lr}
    317a:	b083      	sub	sp, #12
    317c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    317e:	9b01      	ldr	r3, [sp, #4]
    3180:	2b00      	cmp	r3, #0
    3182:	d002      	beq.n	318a <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    3184:	9801      	ldr	r0, [sp, #4]
    3186:	f000 f989 	bl	349c <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    318a:	bf00      	nop
    318c:	b003      	add	sp, #12
    318e:	f85d fb04 	ldr.w	pc, [sp], #4

00003192 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3192:	b500      	push	{lr}
    3194:	b083      	sub	sp, #12
    3196:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3198:	9b01      	ldr	r3, [sp, #4]
    319a:	2b00      	cmp	r3, #0
    319c:	d002      	beq.n	31a4 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    319e:	9801      	ldr	r0, [sp, #4]
    31a0:	f000 f998 	bl	34d4 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31a4:	bf00      	nop
    31a6:	b003      	add	sp, #12
    31a8:	f85d fb04 	ldr.w	pc, [sp], #4

000031ac <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    31ac:	b500      	push	{lr}
    31ae:	b083      	sub	sp, #12
    31b0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31b2:	9b01      	ldr	r3, [sp, #4]
    31b4:	2b00      	cmp	r3, #0
    31b6:	d002      	beq.n	31be <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    31b8:	9801      	ldr	r0, [sp, #4]
    31ba:	f000 f9a9 	bl	3510 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31be:	bf00      	nop
    31c0:	b003      	add	sp, #12
    31c2:	f85d fb04 	ldr.w	pc, [sp], #4

000031c6 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    31c6:	b500      	push	{lr}
    31c8:	b083      	sub	sp, #12
    31ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31cc:	9b01      	ldr	r3, [sp, #4]
    31ce:	2b00      	cmp	r3, #0
    31d0:	d002      	beq.n	31d8 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    31d2:	9801      	ldr	r0, [sp, #4]
    31d4:	f000 f9e6 	bl	35a4 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31d8:	bf00      	nop
    31da:	b003      	add	sp, #12
    31dc:	f85d fb04 	ldr.w	pc, [sp], #4

000031e0 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    31e0:	b500      	push	{lr}
    31e2:	b083      	sub	sp, #12
    31e4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31e6:	9b01      	ldr	r3, [sp, #4]
    31e8:	2b00      	cmp	r3, #0
    31ea:	d002      	beq.n	31f2 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    31ec:	9801      	ldr	r0, [sp, #4]
    31ee:	f000 fa25 	bl	363c <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31f2:	bf00      	nop
    31f4:	b003      	add	sp, #12
    31f6:	f85d fb04 	ldr.w	pc, [sp], #4

000031fa <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    31fa:	b500      	push	{lr}
    31fc:	b083      	sub	sp, #12
    31fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3200:	9b01      	ldr	r3, [sp, #4]
    3202:	2b00      	cmp	r3, #0
    3204:	d002      	beq.n	320c <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    3206:	9801      	ldr	r0, [sp, #4]
    3208:	f000 fa2a 	bl	3660 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    320c:	bf00      	nop
    320e:	b003      	add	sp, #12
    3210:	f85d fb04 	ldr.w	pc, [sp], #4

00003214 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3214:	b500      	push	{lr}
    3216:	b083      	sub	sp, #12
    3218:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    321a:	9b01      	ldr	r3, [sp, #4]
    321c:	2b00      	cmp	r3, #0
    321e:	d002      	beq.n	3226 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    3220:	9801      	ldr	r0, [sp, #4]
    3222:	f000 fa3b 	bl	369c <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3226:	bf00      	nop
    3228:	b003      	add	sp, #12
    322a:	f85d fb04 	ldr.w	pc, [sp], #4

0000322e <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    322e:	b500      	push	{lr}
    3230:	b083      	sub	sp, #12
    3232:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3234:	9b01      	ldr	r3, [sp, #4]
    3236:	2b00      	cmp	r3, #0
    3238:	d002      	beq.n	3240 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    323a:	9801      	ldr	r0, [sp, #4]
    323c:	f000 fa56 	bl	36ec <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3240:	bf00      	nop
    3242:	b003      	add	sp, #12
    3244:	f85d fb04 	ldr.w	pc, [sp], #4

00003248 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3248:	b500      	push	{lr}
    324a:	b083      	sub	sp, #12
    324c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    324e:	9b01      	ldr	r3, [sp, #4]
    3250:	2b00      	cmp	r3, #0
    3252:	d002      	beq.n	325a <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    3254:	9801      	ldr	r0, [sp, #4]
    3256:	f000 fa79 	bl	374c <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    325a:	bf00      	nop
    325c:	b003      	add	sp, #12
    325e:	f85d fb04 	ldr.w	pc, [sp], #4

00003262 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3262:	b500      	push	{lr}
    3264:	b083      	sub	sp, #12
    3266:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3268:	9b01      	ldr	r3, [sp, #4]
    326a:	2b00      	cmp	r3, #0
    326c:	d002      	beq.n	3274 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    326e:	9801      	ldr	r0, [sp, #4]
    3270:	f000 fa8a 	bl	3788 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3274:	bf00      	nop
    3276:	b003      	add	sp, #12
    3278:	f85d fb04 	ldr.w	pc, [sp], #4

0000327c <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    327c:	b084      	sub	sp, #16
    327e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3280:	4b0b      	ldr	r3, [pc, #44]	; (32b0 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    3282:	795b      	ldrb	r3, [r3, #5]
    3284:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    3286:	4b0b      	ldr	r3, [pc, #44]	; (32b4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    3288:	695b      	ldr	r3, [r3, #20]
    328a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    328c:	9b02      	ldr	r3, [sp, #8]
    328e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3292:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3294:	9b03      	ldr	r3, [sp, #12]
    3296:	061b      	lsls	r3, r3, #24
    3298:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    329c:	9a02      	ldr	r2, [sp, #8]
    329e:	4313      	orrs	r3, r2
    32a0:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    32a2:	4a04      	ldr	r2, [pc, #16]	; (32b4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    32a4:	9b02      	ldr	r3, [sp, #8]
    32a6:	6153      	str	r3, [r2, #20]
}
    32a8:	bf00      	nop
    32aa:	b004      	add	sp, #16
    32ac:	4770      	bx	lr
    32ae:	bf00      	nop
    32b0:	00007064 	.word	0x00007064
    32b4:	40064000 	.word	0x40064000

000032b8 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    32b8:	b084      	sub	sp, #16
    32ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    32bc:	9b01      	ldr	r3, [sp, #4]
    32be:	685b      	ldr	r3, [r3, #4]
    32c0:	4a0b      	ldr	r2, [pc, #44]	; (32f0 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    32c2:	5cd3      	ldrb	r3, [r2, r3]
    32c4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    32c6:	4b0b      	ldr	r3, [pc, #44]	; (32f4 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    32c8:	695b      	ldr	r3, [r3, #20]
    32ca:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    32cc:	9b02      	ldr	r3, [sp, #8]
    32ce:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    32d2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    32d4:	9b03      	ldr	r3, [sp, #12]
    32d6:	061b      	lsls	r3, r3, #24
    32d8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    32dc:	9a02      	ldr	r2, [sp, #8]
    32de:	4313      	orrs	r3, r2
    32e0:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    32e2:	4a04      	ldr	r2, [pc, #16]	; (32f4 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    32e4:	9b02      	ldr	r3, [sp, #8]
    32e6:	6153      	str	r3, [r2, #20]
}
    32e8:	bf00      	nop
    32ea:	b004      	add	sp, #16
    32ec:	4770      	bx	lr
    32ee:	bf00      	nop
    32f0:	00007064 	.word	0x00007064
    32f4:	40064000 	.word	0x40064000

000032f8 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    32f8:	b084      	sub	sp, #16
    32fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    32fc:	9b01      	ldr	r3, [sp, #4]
    32fe:	685b      	ldr	r3, [r3, #4]
    3300:	4a0b      	ldr	r2, [pc, #44]	; (3330 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    3302:	5cd3      	ldrb	r3, [r2, r3]
    3304:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    3306:	4b0b      	ldr	r3, [pc, #44]	; (3334 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3308:	699b      	ldr	r3, [r3, #24]
    330a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    330c:	9b02      	ldr	r3, [sp, #8]
    330e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3312:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    3314:	9b03      	ldr	r3, [sp, #12]
    3316:	061b      	lsls	r3, r3, #24
    3318:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    331c:	9a02      	ldr	r2, [sp, #8]
    331e:	4313      	orrs	r3, r2
    3320:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    3322:	4a04      	ldr	r2, [pc, #16]	; (3334 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3324:	9b02      	ldr	r3, [sp, #8]
    3326:	6193      	str	r3, [r2, #24]
}
    3328:	bf00      	nop
    332a:	b004      	add	sp, #16
    332c:	4770      	bx	lr
    332e:	bf00      	nop
    3330:	00007064 	.word	0x00007064
    3334:	40064000 	.word	0x40064000

00003338 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3338:	b084      	sub	sp, #16
    333a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    333c:	4b0b      	ldr	r3, [pc, #44]	; (336c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    333e:	795b      	ldrb	r3, [r3, #5]
    3340:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    3342:	4b0b      	ldr	r3, [pc, #44]	; (3370 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3344:	69db      	ldr	r3, [r3, #28]
    3346:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3348:	9b02      	ldr	r3, [sp, #8]
    334a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    334e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3350:	9b03      	ldr	r3, [sp, #12]
    3352:	061b      	lsls	r3, r3, #24
    3354:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3358:	9a02      	ldr	r2, [sp, #8]
    335a:	4313      	orrs	r3, r2
    335c:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    335e:	4a04      	ldr	r2, [pc, #16]	; (3370 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3360:	9b02      	ldr	r3, [sp, #8]
    3362:	61d3      	str	r3, [r2, #28]
}
    3364:	bf00      	nop
    3366:	b004      	add	sp, #16
    3368:	4770      	bx	lr
    336a:	bf00      	nop
    336c:	00007064 	.word	0x00007064
    3370:	40064000 	.word	0x40064000

00003374 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3374:	b084      	sub	sp, #16
    3376:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3378:	9b01      	ldr	r3, [sp, #4]
    337a:	685b      	ldr	r3, [r3, #4]
    337c:	4a0b      	ldr	r2, [pc, #44]	; (33ac <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    337e:	5cd3      	ldrb	r3, [r2, r3]
    3380:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    3382:	4b0b      	ldr	r3, [pc, #44]	; (33b0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3384:	69db      	ldr	r3, [r3, #28]
    3386:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3388:	9b02      	ldr	r3, [sp, #8]
    338a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    338e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3390:	9b03      	ldr	r3, [sp, #12]
    3392:	061b      	lsls	r3, r3, #24
    3394:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3398:	9a02      	ldr	r2, [sp, #8]
    339a:	4313      	orrs	r3, r2
    339c:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    339e:	4a04      	ldr	r2, [pc, #16]	; (33b0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    33a0:	9b02      	ldr	r3, [sp, #8]
    33a2:	61d3      	str	r3, [r2, #28]
}
    33a4:	bf00      	nop
    33a6:	b004      	add	sp, #16
    33a8:	4770      	bx	lr
    33aa:	bf00      	nop
    33ac:	00007064 	.word	0x00007064
    33b0:	40064000 	.word	0x40064000

000033b4 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    33b4:	b084      	sub	sp, #16
    33b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    33b8:	4b0a      	ldr	r3, [pc, #40]	; (33e4 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    33ba:	7b9b      	ldrb	r3, [r3, #14]
    33bc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    33be:	4b0a      	ldr	r3, [pc, #40]	; (33e8 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    33c0:	691b      	ldr	r3, [r3, #16]
    33c2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    33c4:	9b02      	ldr	r3, [sp, #8]
    33c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    33ca:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    33cc:	9b03      	ldr	r3, [sp, #12]
    33ce:	011b      	lsls	r3, r3, #4
    33d0:	9a02      	ldr	r2, [sp, #8]
    33d2:	4313      	orrs	r3, r2
    33d4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    33d6:	4a04      	ldr	r2, [pc, #16]	; (33e8 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    33d8:	9b02      	ldr	r3, [sp, #8]
    33da:	6113      	str	r3, [r2, #16]
}
    33dc:	bf00      	nop
    33de:	b004      	add	sp, #16
    33e0:	4770      	bx	lr
    33e2:	bf00      	nop
    33e4:	0000700c 	.word	0x0000700c
    33e8:	40048000 	.word	0x40048000

000033ec <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    33ec:	b084      	sub	sp, #16
    33ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    33f0:	9b01      	ldr	r3, [sp, #4]
    33f2:	685b      	ldr	r3, [r3, #4]
    33f4:	4a0a      	ldr	r2, [pc, #40]	; (3420 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    33f6:	5cd3      	ldrb	r3, [r2, r3]
    33f8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    33fa:	4b0a      	ldr	r3, [pc, #40]	; (3424 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    33fc:	691b      	ldr	r3, [r3, #16]
    33fe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3400:	9b02      	ldr	r3, [sp, #8]
    3402:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3406:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3408:	9b03      	ldr	r3, [sp, #12]
    340a:	011b      	lsls	r3, r3, #4
    340c:	9a02      	ldr	r2, [sp, #8]
    340e:	4313      	orrs	r3, r2
    3410:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3412:	4a04      	ldr	r2, [pc, #16]	; (3424 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3414:	9b02      	ldr	r3, [sp, #8]
    3416:	6113      	str	r3, [r2, #16]
}
    3418:	bf00      	nop
    341a:	b004      	add	sp, #16
    341c:	4770      	bx	lr
    341e:	bf00      	nop
    3420:	0000700c 	.word	0x0000700c
    3424:	40048000 	.word	0x40048000

00003428 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3428:	b084      	sub	sp, #16
    342a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    342c:	4b0a      	ldr	r3, [pc, #40]	; (3458 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    342e:	785b      	ldrb	r3, [r3, #1]
    3430:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3432:	4b0a      	ldr	r3, [pc, #40]	; (345c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3434:	691b      	ldr	r3, [r3, #16]
    3436:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3438:	9b02      	ldr	r3, [sp, #8]
    343a:	f023 030c 	bic.w	r3, r3, #12
    343e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3440:	9b03      	ldr	r3, [sp, #12]
    3442:	009b      	lsls	r3, r3, #2
    3444:	9a02      	ldr	r2, [sp, #8]
    3446:	4313      	orrs	r3, r2
    3448:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    344a:	4a04      	ldr	r2, [pc, #16]	; (345c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    344c:	9b02      	ldr	r3, [sp, #8]
    344e:	6113      	str	r3, [r2, #16]
}
    3450:	bf00      	nop
    3452:	b004      	add	sp, #16
    3454:	4770      	bx	lr
    3456:	bf00      	nop
    3458:	000070c4 	.word	0x000070c4
    345c:	40048000 	.word	0x40048000

00003460 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3460:	b084      	sub	sp, #16
    3462:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3464:	9b01      	ldr	r3, [sp, #4]
    3466:	685b      	ldr	r3, [r3, #4]
    3468:	4a0a      	ldr	r2, [pc, #40]	; (3494 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    346a:	5cd3      	ldrb	r3, [r2, r3]
    346c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    346e:	4b0a      	ldr	r3, [pc, #40]	; (3498 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3470:	691b      	ldr	r3, [r3, #16]
    3472:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3474:	9b02      	ldr	r3, [sp, #8]
    3476:	f023 030c 	bic.w	r3, r3, #12
    347a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    347c:	9b03      	ldr	r3, [sp, #12]
    347e:	009b      	lsls	r3, r3, #2
    3480:	9a02      	ldr	r2, [sp, #8]
    3482:	4313      	orrs	r3, r2
    3484:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3486:	4a04      	ldr	r2, [pc, #16]	; (3498 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3488:	9b02      	ldr	r3, [sp, #8]
    348a:	6113      	str	r3, [r2, #16]
}
    348c:	bf00      	nop
    348e:	b004      	add	sp, #16
    3490:	4770      	bx	lr
    3492:	bf00      	nop
    3494:	000070c4 	.word	0x000070c4
    3498:	40048000 	.word	0x40048000

0000349c <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    349c:	b084      	sub	sp, #16
    349e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    34a0:	4b0a      	ldr	r3, [pc, #40]	; (34cc <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    34a2:	795b      	ldrb	r3, [r3, #5]
    34a4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    34a6:	4b0a      	ldr	r3, [pc, #40]	; (34d0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    34a8:	6a1b      	ldr	r3, [r3, #32]
    34aa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    34ac:	9b02      	ldr	r3, [sp, #8]
    34ae:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    34b2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    34b4:	9b03      	ldr	r3, [sp, #12]
    34b6:	061b      	lsls	r3, r3, #24
    34b8:	9a02      	ldr	r2, [sp, #8]
    34ba:	4313      	orrs	r3, r2
    34bc:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    34be:	4a04      	ldr	r2, [pc, #16]	; (34d0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    34c0:	9b02      	ldr	r3, [sp, #8]
    34c2:	6213      	str	r3, [r2, #32]
}
    34c4:	bf00      	nop
    34c6:	b004      	add	sp, #16
    34c8:	4770      	bx	lr
    34ca:	bf00      	nop
    34cc:	00007064 	.word	0x00007064
    34d0:	40064000 	.word	0x40064000

000034d4 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    34d4:	b084      	sub	sp, #16
    34d6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    34d8:	9b01      	ldr	r3, [sp, #4]
    34da:	685b      	ldr	r3, [r3, #4]
    34dc:	4a0a      	ldr	r2, [pc, #40]	; (3508 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    34de:	5cd3      	ldrb	r3, [r2, r3]
    34e0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    34e2:	4b0a      	ldr	r3, [pc, #40]	; (350c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    34e4:	6a1b      	ldr	r3, [r3, #32]
    34e6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    34e8:	9b02      	ldr	r3, [sp, #8]
    34ea:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    34ee:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    34f0:	9b03      	ldr	r3, [sp, #12]
    34f2:	061b      	lsls	r3, r3, #24
    34f4:	9a02      	ldr	r2, [sp, #8]
    34f6:	4313      	orrs	r3, r2
    34f8:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    34fa:	4a04      	ldr	r2, [pc, #16]	; (350c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    34fc:	9b02      	ldr	r3, [sp, #8]
    34fe:	6213      	str	r3, [r2, #32]
}
    3500:	bf00      	nop
    3502:	b004      	add	sp, #16
    3504:	4770      	bx	lr
    3506:	bf00      	nop
    3508:	00007064 	.word	0x00007064
    350c:	40064000 	.word	0x40064000

00003510 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3510:	b086      	sub	sp, #24
    3512:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3514:	4b20      	ldr	r3, [pc, #128]	; (3598 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    3516:	795b      	ldrb	r3, [r3, #5]
    3518:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    351a:	9b01      	ldr	r3, [sp, #4]
    351c:	681a      	ldr	r2, [r3, #0]
    351e:	491f      	ldr	r1, [pc, #124]	; (359c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    3520:	4613      	mov	r3, r2
    3522:	00db      	lsls	r3, r3, #3
    3524:	4413      	add	r3, r2
    3526:	440b      	add	r3, r1
    3528:	781b      	ldrb	r3, [r3, #0]
    352a:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    352c:	4b1c      	ldr	r3, [pc, #112]	; (35a0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    352e:	68db      	ldr	r3, [r3, #12]
    3530:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3532:	9b03      	ldr	r3, [sp, #12]
    3534:	2b03      	cmp	r3, #3
    3536:	d813      	bhi.n	3560 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3538:	9b03      	ldr	r3, [sp, #12]
    353a:	005b      	lsls	r3, r3, #1
    353c:	3318      	adds	r3, #24
    353e:	2203      	movs	r2, #3
    3540:	fa02 f303 	lsl.w	r3, r2, r3
    3544:	43db      	mvns	r3, r3
    3546:	9a05      	ldr	r2, [sp, #20]
    3548:	4013      	ands	r3, r2
    354a:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    354c:	9b03      	ldr	r3, [sp, #12]
    354e:	005b      	lsls	r3, r3, #1
    3550:	3318      	adds	r3, #24
    3552:	9a04      	ldr	r2, [sp, #16]
    3554:	fa02 f303 	lsl.w	r3, r2, r3
    3558:	9a05      	ldr	r2, [sp, #20]
    355a:	4313      	orrs	r3, r2
    355c:	9305      	str	r3, [sp, #20]
    355e:	e014      	b.n	358a <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3560:	9b03      	ldr	r3, [sp, #12]
    3562:	3b04      	subs	r3, #4
    3564:	005b      	lsls	r3, r3, #1
    3566:	3310      	adds	r3, #16
    3568:	2203      	movs	r2, #3
    356a:	fa02 f303 	lsl.w	r3, r2, r3
    356e:	43db      	mvns	r3, r3
    3570:	9a05      	ldr	r2, [sp, #20]
    3572:	4013      	ands	r3, r2
    3574:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3576:	9b03      	ldr	r3, [sp, #12]
    3578:	3b04      	subs	r3, #4
    357a:	005b      	lsls	r3, r3, #1
    357c:	3310      	adds	r3, #16
    357e:	9a04      	ldr	r2, [sp, #16]
    3580:	fa02 f303 	lsl.w	r3, r2, r3
    3584:	9a05      	ldr	r2, [sp, #20]
    3586:	4313      	orrs	r3, r2
    3588:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    358a:	4a05      	ldr	r2, [pc, #20]	; (35a0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    358c:	9b05      	ldr	r3, [sp, #20]
    358e:	60d3      	str	r3, [r2, #12]
}
    3590:	bf00      	nop
    3592:	b006      	add	sp, #24
    3594:	4770      	bx	lr
    3596:	bf00      	nop
    3598:	0000700c 	.word	0x0000700c
    359c:	00006cfc 	.word	0x00006cfc
    35a0:	40048000 	.word	0x40048000

000035a4 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    35a4:	b086      	sub	sp, #24
    35a6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    35a8:	9b01      	ldr	r3, [sp, #4]
    35aa:	685b      	ldr	r3, [r3, #4]
    35ac:	4a20      	ldr	r2, [pc, #128]	; (3630 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    35ae:	5cd3      	ldrb	r3, [r2, r3]
    35b0:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    35b2:	9b01      	ldr	r3, [sp, #4]
    35b4:	681a      	ldr	r2, [r3, #0]
    35b6:	491f      	ldr	r1, [pc, #124]	; (3634 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    35b8:	4613      	mov	r3, r2
    35ba:	00db      	lsls	r3, r3, #3
    35bc:	4413      	add	r3, r2
    35be:	440b      	add	r3, r1
    35c0:	781b      	ldrb	r3, [r3, #0]
    35c2:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    35c4:	4b1c      	ldr	r3, [pc, #112]	; (3638 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    35c6:	68db      	ldr	r3, [r3, #12]
    35c8:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    35ca:	9b03      	ldr	r3, [sp, #12]
    35cc:	2b03      	cmp	r3, #3
    35ce:	d813      	bhi.n	35f8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    35d0:	9b03      	ldr	r3, [sp, #12]
    35d2:	005b      	lsls	r3, r3, #1
    35d4:	3318      	adds	r3, #24
    35d6:	2203      	movs	r2, #3
    35d8:	fa02 f303 	lsl.w	r3, r2, r3
    35dc:	43db      	mvns	r3, r3
    35de:	9a05      	ldr	r2, [sp, #20]
    35e0:	4013      	ands	r3, r2
    35e2:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    35e4:	9b03      	ldr	r3, [sp, #12]
    35e6:	005b      	lsls	r3, r3, #1
    35e8:	3318      	adds	r3, #24
    35ea:	9a04      	ldr	r2, [sp, #16]
    35ec:	fa02 f303 	lsl.w	r3, r2, r3
    35f0:	9a05      	ldr	r2, [sp, #20]
    35f2:	4313      	orrs	r3, r2
    35f4:	9305      	str	r3, [sp, #20]
    35f6:	e014      	b.n	3622 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    35f8:	9b03      	ldr	r3, [sp, #12]
    35fa:	3b04      	subs	r3, #4
    35fc:	005b      	lsls	r3, r3, #1
    35fe:	3310      	adds	r3, #16
    3600:	2203      	movs	r2, #3
    3602:	fa02 f303 	lsl.w	r3, r2, r3
    3606:	43db      	mvns	r3, r3
    3608:	9a05      	ldr	r2, [sp, #20]
    360a:	4013      	ands	r3, r2
    360c:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    360e:	9b03      	ldr	r3, [sp, #12]
    3610:	3b04      	subs	r3, #4
    3612:	005b      	lsls	r3, r3, #1
    3614:	3310      	adds	r3, #16
    3616:	9a04      	ldr	r2, [sp, #16]
    3618:	fa02 f303 	lsl.w	r3, r2, r3
    361c:	9a05      	ldr	r2, [sp, #20]
    361e:	4313      	orrs	r3, r2
    3620:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3622:	4a05      	ldr	r2, [pc, #20]	; (3638 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3624:	9b05      	ldr	r3, [sp, #20]
    3626:	60d3      	str	r3, [r2, #12]
}
    3628:	bf00      	nop
    362a:	b006      	add	sp, #24
    362c:	4770      	bx	lr
    362e:	bf00      	nop
    3630:	0000700c 	.word	0x0000700c
    3634:	00006cfc 	.word	0x00006cfc
    3638:	40048000 	.word	0x40048000

0000363c <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    363c:	b084      	sub	sp, #16
    363e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    3640:	4b06      	ldr	r3, [pc, #24]	; (365c <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3642:	685b      	ldr	r3, [r3, #4]
    3644:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    3646:	9b03      	ldr	r3, [sp, #12]
    3648:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    364c:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    364e:	4a03      	ldr	r2, [pc, #12]	; (365c <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3650:	9b03      	ldr	r3, [sp, #12]
    3652:	6053      	str	r3, [r2, #4]
}
    3654:	bf00      	nop
    3656:	b004      	add	sp, #16
    3658:	4770      	bx	lr
    365a:	bf00      	nop
    365c:	40048000 	.word	0x40048000

00003660 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3660:	b084      	sub	sp, #16
    3662:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3664:	9b01      	ldr	r3, [sp, #4]
    3666:	685b      	ldr	r3, [r3, #4]
    3668:	4a0a      	ldr	r2, [pc, #40]	; (3694 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    366a:	5cd3      	ldrb	r3, [r2, r3]
    366c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    366e:	4b0a      	ldr	r3, [pc, #40]	; (3698 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3670:	685b      	ldr	r3, [r3, #4]
    3672:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    3674:	9b02      	ldr	r3, [sp, #8]
    3676:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    367a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    367c:	9b03      	ldr	r3, [sp, #12]
    367e:	011b      	lsls	r3, r3, #4
    3680:	9a02      	ldr	r2, [sp, #8]
    3682:	4313      	orrs	r3, r2
    3684:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    3686:	4a04      	ldr	r2, [pc, #16]	; (3698 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3688:	9b02      	ldr	r3, [sp, #8]
    368a:	6053      	str	r3, [r2, #4]
}
    368c:	bf00      	nop
    368e:	b004      	add	sp, #16
    3690:	4770      	bx	lr
    3692:	bf00      	nop
    3694:	0000700c 	.word	0x0000700c
    3698:	40048000 	.word	0x40048000

0000369c <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    369c:	b084      	sub	sp, #16
    369e:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    36a0:	9b01      	ldr	r3, [sp, #4]
    36a2:	681a      	ldr	r2, [r3, #0]
    36a4:	490f      	ldr	r1, [pc, #60]	; (36e4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    36a6:	4613      	mov	r3, r2
    36a8:	00db      	lsls	r3, r3, #3
    36aa:	4413      	add	r3, r2
    36ac:	440b      	add	r3, r1
    36ae:	3304      	adds	r3, #4
    36b0:	781b      	ldrb	r3, [r3, #0]
    36b2:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    36b4:	4a0c      	ldr	r2, [pc, #48]	; (36e8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    36b6:	9b03      	ldr	r3, [sp, #12]
    36b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    36bc:	490a      	ldr	r1, [pc, #40]	; (36e8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    36be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    36c2:	9b03      	ldr	r3, [sp, #12]
    36c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    36c8:	4a07      	ldr	r2, [pc, #28]	; (36e8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    36ca:	9b03      	ldr	r3, [sp, #12]
    36cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    36d0:	4905      	ldr	r1, [pc, #20]	; (36e8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    36d2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    36d6:	9b03      	ldr	r3, [sp, #12]
    36d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    36dc:	bf00      	nop
    36de:	b004      	add	sp, #16
    36e0:	4770      	bx	lr
    36e2:	bf00      	nop
    36e4:	00006cfc 	.word	0x00006cfc
    36e8:	40065000 	.word	0x40065000

000036ec <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    36ec:	b086      	sub	sp, #24
    36ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    36f0:	9b01      	ldr	r3, [sp, #4]
    36f2:	681a      	ldr	r2, [r3, #0]
    36f4:	4912      	ldr	r1, [pc, #72]	; (3740 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    36f6:	4613      	mov	r3, r2
    36f8:	00db      	lsls	r3, r3, #3
    36fa:	4413      	add	r3, r2
    36fc:	440b      	add	r3, r1
    36fe:	3304      	adds	r3, #4
    3700:	781b      	ldrb	r3, [r3, #0]
    3702:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3704:	9b01      	ldr	r3, [sp, #4]
    3706:	685b      	ldr	r3, [r3, #4]
    3708:	4a0e      	ldr	r2, [pc, #56]	; (3744 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    370a:	5cd3      	ldrb	r3, [r2, r3]
    370c:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    370e:	4a0e      	ldr	r2, [pc, #56]	; (3748 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3710:	9b05      	ldr	r3, [sp, #20]
    3712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3716:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    3718:	9b03      	ldr	r3, [sp, #12]
    371a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    371e:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    3720:	9b04      	ldr	r3, [sp, #16]
    3722:	061b      	lsls	r3, r3, #24
    3724:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    3728:	9a03      	ldr	r2, [sp, #12]
    372a:	4313      	orrs	r3, r2
    372c:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    372e:	4906      	ldr	r1, [pc, #24]	; (3748 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3730:	9b05      	ldr	r3, [sp, #20]
    3732:	9a03      	ldr	r2, [sp, #12]
    3734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3738:	bf00      	nop
    373a:	b006      	add	sp, #24
    373c:	4770      	bx	lr
    373e:	bf00      	nop
    3740:	00006cfc 	.word	0x00006cfc
    3744:	00007094 	.word	0x00007094
    3748:	40065000 	.word	0x40065000

0000374c <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    374c:	b084      	sub	sp, #16
    374e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3750:	4b0b      	ldr	r3, [pc, #44]	; (3780 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    3752:	7f1b      	ldrb	r3, [r3, #28]
    3754:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    3756:	4b0b      	ldr	r3, [pc, #44]	; (3784 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3758:	685b      	ldr	r3, [r3, #4]
    375a:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    375c:	9b02      	ldr	r3, [sp, #8]
    375e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3762:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3764:	9b03      	ldr	r3, [sp, #12]
    3766:	031b      	lsls	r3, r3, #12
    3768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    376c:	9a02      	ldr	r2, [sp, #8]
    376e:	4313      	orrs	r3, r2
    3770:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3772:	4a04      	ldr	r2, [pc, #16]	; (3784 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3774:	9b02      	ldr	r3, [sp, #8]
    3776:	6053      	str	r3, [r2, #4]
}
    3778:	bf00      	nop
    377a:	b004      	add	sp, #16
    377c:	4770      	bx	lr
    377e:	bf00      	nop
    3780:	0000700c 	.word	0x0000700c
    3784:	40048000 	.word	0x40048000

00003788 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3788:	b084      	sub	sp, #16
    378a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    378c:	9b01      	ldr	r3, [sp, #4]
    378e:	685b      	ldr	r3, [r3, #4]
    3790:	4a0b      	ldr	r2, [pc, #44]	; (37c0 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    3792:	5cd3      	ldrb	r3, [r2, r3]
    3794:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    3796:	4b0b      	ldr	r3, [pc, #44]	; (37c4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3798:	685b      	ldr	r3, [r3, #4]
    379a:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    379c:	9b02      	ldr	r3, [sp, #8]
    379e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    37a2:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    37a4:	9b03      	ldr	r3, [sp, #12]
    37a6:	031b      	lsls	r3, r3, #12
    37a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    37ac:	9a02      	ldr	r2, [sp, #8]
    37ae:	4313      	orrs	r3, r2
    37b0:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    37b2:	4a04      	ldr	r2, [pc, #16]	; (37c4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    37b4:	9b02      	ldr	r3, [sp, #8]
    37b6:	6053      	str	r3, [r2, #4]
}
    37b8:	bf00      	nop
    37ba:	b004      	add	sp, #16
    37bc:	4770      	bx	lr
    37be:	bf00      	nop
    37c0:	0000700c 	.word	0x0000700c
    37c4:	40048000 	.word	0x40048000

000037c8 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    37c8:	b500      	push	{lr}
    37ca:	b085      	sub	sp, #20
    37cc:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    37ce:	2300      	movs	r3, #0
    37d0:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    37d4:	9b01      	ldr	r3, [sp, #4]
    37d6:	2b00      	cmp	r3, #0
    37d8:	d037      	beq.n	384a <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    37da:	2300      	movs	r3, #0
    37dc:	9303      	str	r3, [sp, #12]
    37de:	e02b      	b.n	3838 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    37e0:	4b29      	ldr	r3, [pc, #164]	; (3888 <DisableSafeClock+0xc0>)
    37e2:	6819      	ldr	r1, [r3, #0]
    37e4:	9a03      	ldr	r2, [sp, #12]
    37e6:	4613      	mov	r3, r2
    37e8:	005b      	lsls	r3, r3, #1
    37ea:	4413      	add	r3, r2
    37ec:	009b      	lsls	r3, r3, #2
    37ee:	440b      	add	r3, r1
    37f0:	3314      	adds	r3, #20
    37f2:	681b      	ldr	r3, [r3, #0]
    37f4:	2b05      	cmp	r3, #5
    37f6:	d11c      	bne.n	3832 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    37f8:	2301      	movs	r3, #1
    37fa:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    37fe:	4b22      	ldr	r3, [pc, #136]	; (3888 <DisableSafeClock+0xc0>)
    3800:	6819      	ldr	r1, [r3, #0]
    3802:	9a03      	ldr	r2, [sp, #12]
    3804:	4613      	mov	r3, r2
    3806:	005b      	lsls	r3, r3, #1
    3808:	4413      	add	r3, r2
    380a:	009b      	lsls	r3, r3, #2
    380c:	440b      	add	r3, r1
    380e:	3318      	adds	r3, #24
    3810:	881b      	ldrh	r3, [r3, #0]
    3812:	2b00      	cmp	r3, #0
    3814:	d118      	bne.n	3848 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3816:	4b1d      	ldr	r3, [pc, #116]	; (388c <DisableSafeClock+0xc4>)
    3818:	791b      	ldrb	r3, [r3, #4]
    381a:	4619      	mov	r1, r3
    381c:	4a1c      	ldr	r2, [pc, #112]	; (3890 <DisableSafeClock+0xc8>)
    381e:	460b      	mov	r3, r1
    3820:	005b      	lsls	r3, r3, #1
    3822:	440b      	add	r3, r1
    3824:	009b      	lsls	r3, r3, #2
    3826:	4413      	add	r3, r2
    3828:	3308      	adds	r3, #8
    382a:	681b      	ldr	r3, [r3, #0]
    382c:	2005      	movs	r0, #5
    382e:	4798      	blx	r3
                }
                break;
    3830:	e00a      	b.n	3848 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3832:	9b03      	ldr	r3, [sp, #12]
    3834:	3301      	adds	r3, #1
    3836:	9303      	str	r3, [sp, #12]
    3838:	4b13      	ldr	r3, [pc, #76]	; (3888 <DisableSafeClock+0xc0>)
    383a:	681b      	ldr	r3, [r3, #0]
    383c:	7a1b      	ldrb	r3, [r3, #8]
    383e:	461a      	mov	r2, r3
    3840:	9b03      	ldr	r3, [sp, #12]
    3842:	4293      	cmp	r3, r2
    3844:	d3cc      	bcc.n	37e0 <DisableSafeClock+0x18>
    3846:	e000      	b.n	384a <DisableSafeClock+0x82>
                break;
    3848:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    384a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    384e:	f083 0301 	eor.w	r3, r3, #1
    3852:	b2db      	uxtb	r3, r3
    3854:	2b00      	cmp	r3, #0
    3856:	d013      	beq.n	3880 <DisableSafeClock+0xb8>
    3858:	4b0e      	ldr	r3, [pc, #56]	; (3894 <DisableSafeClock+0xcc>)
    385a:	781b      	ldrb	r3, [r3, #0]
    385c:	f083 0301 	eor.w	r3, r3, #1
    3860:	b2db      	uxtb	r3, r3
    3862:	2b00      	cmp	r3, #0
    3864:	d00c      	beq.n	3880 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3866:	4b09      	ldr	r3, [pc, #36]	; (388c <DisableSafeClock+0xc4>)
    3868:	791b      	ldrb	r3, [r3, #4]
    386a:	4619      	mov	r1, r3
    386c:	4a08      	ldr	r2, [pc, #32]	; (3890 <DisableSafeClock+0xc8>)
    386e:	460b      	mov	r3, r1
    3870:	005b      	lsls	r3, r3, #1
    3872:	440b      	add	r3, r1
    3874:	009b      	lsls	r3, r3, #2
    3876:	4413      	add	r3, r2
    3878:	3308      	adds	r3, #8
    387a:	681b      	ldr	r3, [r3, #0]
    387c:	2005      	movs	r0, #5
    387e:	4798      	blx	r3
    }
}
    3880:	bf00      	nop
    3882:	b005      	add	sp, #20
    3884:	f85d fb04 	ldr.w	pc, [sp], #4
    3888:	1fff8b98 	.word	0x1fff8b98
    388c:	00006c8c 	.word	0x00006c8c
    3890:	000072bc 	.word	0x000072bc
    3894:	1fff8b18 	.word	0x1fff8b18

00003898 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    3898:	4b06      	ldr	r3, [pc, #24]	; (38b4 <SetFircToResetValue_TrustedCall+0x1c>)
    389a:	2200      	movs	r2, #0
    389c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    38a0:	4b04      	ldr	r3, [pc, #16]	; (38b4 <SetFircToResetValue_TrustedCall+0x1c>)
    38a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    38a6:	4a03      	ldr	r2, [pc, #12]	; (38b4 <SetFircToResetValue_TrustedCall+0x1c>)
    38a8:	f043 0301 	orr.w	r3, r3, #1
    38ac:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    38b0:	bf00      	nop
    38b2:	4770      	bx	lr
    38b4:	40064000 	.word	0x40064000

000038b8 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    38b8:	b084      	sub	sp, #16
    38ba:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    38bc:	2303      	movs	r3, #3
    38be:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    38c0:	2300      	movs	r3, #0
    38c2:	9302      	str	r3, [sp, #8]
    38c4:	e028      	b.n	3918 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    38c6:	9b01      	ldr	r3, [sp, #4]
    38c8:	9a02      	ldr	r2, [sp, #8]
    38ca:	320d      	adds	r2, #13
    38cc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    38d0:	2b28      	cmp	r3, #40	; 0x28
    38d2:	d10b      	bne.n	38ec <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    38d4:	9a01      	ldr	r2, [sp, #4]
    38d6:	9b02      	ldr	r3, [sp, #8]
    38d8:	330d      	adds	r3, #13
    38da:	00db      	lsls	r3, r3, #3
    38dc:	4413      	add	r3, r2
    38de:	685b      	ldr	r3, [r3, #4]
    38e0:	4a2b      	ldr	r2, [pc, #172]	; (3990 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    38e2:	5cd3      	ldrb	r3, [r2, r3]
    38e4:	011b      	lsls	r3, r3, #4
    38e6:	9a03      	ldr	r2, [sp, #12]
    38e8:	4313      	orrs	r3, r2
    38ea:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    38ec:	9b01      	ldr	r3, [sp, #4]
    38ee:	9a02      	ldr	r2, [sp, #8]
    38f0:	320d      	adds	r2, #13
    38f2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    38f6:	2b29      	cmp	r3, #41	; 0x29
    38f8:	d10b      	bne.n	3912 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    38fa:	9a01      	ldr	r2, [sp, #4]
    38fc:	9b02      	ldr	r3, [sp, #8]
    38fe:	330d      	adds	r3, #13
    3900:	00db      	lsls	r3, r3, #3
    3902:	4413      	add	r3, r2
    3904:	685b      	ldr	r3, [r3, #4]
    3906:	4a23      	ldr	r2, [pc, #140]	; (3994 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    3908:	5cd3      	ldrb	r3, [r2, r3]
    390a:	009b      	lsls	r3, r3, #2
    390c:	9a03      	ldr	r2, [sp, #12]
    390e:	4313      	orrs	r3, r2
    3910:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3912:	9b02      	ldr	r3, [sp, #8]
    3914:	3301      	adds	r3, #1
    3916:	9302      	str	r3, [sp, #8]
    3918:	9b01      	ldr	r3, [sp, #4]
    391a:	7adb      	ldrb	r3, [r3, #11]
    391c:	461a      	mov	r2, r3
    391e:	9b02      	ldr	r3, [sp, #8]
    3920:	4293      	cmp	r3, r2
    3922:	d3d0      	bcc.n	38c6 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3924:	2300      	movs	r3, #0
    3926:	9302      	str	r3, [sp, #8]
    3928:	e026      	b.n	3978 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    392a:	9a01      	ldr	r2, [sp, #4]
    392c:	9b02      	ldr	r3, [sp, #8]
    392e:	334e      	adds	r3, #78	; 0x4e
    3930:	00db      	lsls	r3, r3, #3
    3932:	4413      	add	r3, r2
    3934:	685b      	ldr	r3, [r3, #4]
    3936:	2b12      	cmp	r3, #18
    3938:	d109      	bne.n	394e <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    393a:	9a01      	ldr	r2, [sp, #4]
    393c:	9b02      	ldr	r3, [sp, #8]
    393e:	334e      	adds	r3, #78	; 0x4e
    3940:	00db      	lsls	r3, r3, #3
    3942:	4413      	add	r3, r2
    3944:	891b      	ldrh	r3, [r3, #8]
    3946:	005b      	lsls	r3, r3, #1
    3948:	9a03      	ldr	r2, [sp, #12]
    394a:	4313      	orrs	r3, r2
    394c:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    394e:	9a01      	ldr	r2, [sp, #4]
    3950:	9b02      	ldr	r3, [sp, #8]
    3952:	334e      	adds	r3, #78	; 0x4e
    3954:	00db      	lsls	r3, r3, #3
    3956:	4413      	add	r3, r2
    3958:	685b      	ldr	r3, [r3, #4]
    395a:	2b13      	cmp	r3, #19
    395c:	d109      	bne.n	3972 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    395e:	9a01      	ldr	r2, [sp, #4]
    3960:	9b02      	ldr	r3, [sp, #8]
    3962:	334e      	adds	r3, #78	; 0x4e
    3964:	00db      	lsls	r3, r3, #3
    3966:	4413      	add	r3, r2
    3968:	891b      	ldrh	r3, [r3, #8]
    396a:	461a      	mov	r2, r3
    396c:	9b03      	ldr	r3, [sp, #12]
    396e:	4313      	orrs	r3, r2
    3970:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3972:	9b02      	ldr	r3, [sp, #8]
    3974:	3301      	adds	r3, #1
    3976:	9302      	str	r3, [sp, #8]
    3978:	9b01      	ldr	r3, [sp, #4]
    397a:	7c1b      	ldrb	r3, [r3, #16]
    397c:	461a      	mov	r2, r3
    397e:	9b02      	ldr	r3, [sp, #8]
    3980:	4293      	cmp	r3, r2
    3982:	d3d2      	bcc.n	392a <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    3984:	4a04      	ldr	r2, [pc, #16]	; (3998 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    3986:	9b03      	ldr	r3, [sp, #12]
    3988:	6113      	str	r3, [r2, #16]
}
    398a:	bf00      	nop
    398c:	b004      	add	sp, #16
    398e:	4770      	bx	lr
    3990:	0000700c 	.word	0x0000700c
    3994:	000070c4 	.word	0x000070c4
    3998:	40048000 	.word	0x40048000

0000399c <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    399c:	b500      	push	{lr}
    399e:	b089      	sub	sp, #36	; 0x24
    39a0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    39a2:	2300      	movs	r3, #0
    39a4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    39a8:	4a21      	ldr	r2, [pc, #132]	; (3a30 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    39aa:	9b01      	ldr	r3, [sp, #4]
    39ac:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    39ae:	4b21      	ldr	r3, [pc, #132]	; (3a34 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    39b0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    39b4:	f003 0301 	and.w	r3, r3, #1
    39b8:	2b00      	cmp	r3, #0
    39ba:	d12e      	bne.n	3a1a <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    39bc:	4b1e      	ldr	r3, [pc, #120]	; (3a38 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    39be:	2200      	movs	r2, #0
    39c0:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    39c2:	f7ff ff69 	bl	3898 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    39c6:	aa03      	add	r2, sp, #12
    39c8:	a904      	add	r1, sp, #16
    39ca:	a805      	add	r0, sp, #20
    39cc:	f24c 3350 	movw	r3, #50000	; 0xc350
    39d0:	f7fe f8ae 	bl	1b30 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    39d4:	4b17      	ldr	r3, [pc, #92]	; (3a34 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    39d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    39da:	0e1b      	lsrs	r3, r3, #24
    39dc:	f003 0301 	and.w	r3, r3, #1
    39e0:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    39e2:	9a03      	ldr	r2, [sp, #12]
    39e4:	a904      	add	r1, sp, #16
    39e6:	ab05      	add	r3, sp, #20
    39e8:	4618      	mov	r0, r3
    39ea:	f7fe f8bb 	bl	1b64 <Clock_Ip_TimeoutExpired>
    39ee:	4603      	mov	r3, r0
    39f0:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    39f4:	9b06      	ldr	r3, [sp, #24]
    39f6:	2b00      	cmp	r3, #0
    39f8:	d106      	bne.n	3a08 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    39fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    39fe:	f083 0301 	eor.w	r3, r3, #1
    3a02:	b2db      	uxtb	r3, r3
    3a04:	2b00      	cmp	r3, #0
    3a06:	d1e5      	bne.n	39d4 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    3a08:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a0c:	2b00      	cmp	r3, #0
    3a0e:	d007      	beq.n	3a20 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3a10:	2105      	movs	r1, #5
    3a12:	2001      	movs	r0, #1
    3a14:	f7fe f87c 	bl	1b10 <Clock_Ip_ReportClockErrors>
    3a18:	e002      	b.n	3a20 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    3a1a:	4b07      	ldr	r3, [pc, #28]	; (3a38 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3a1c:	2201      	movs	r2, #1
    3a1e:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    3a20:	9801      	ldr	r0, [sp, #4]
    3a22:	f7ff ff49 	bl	38b8 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    3a26:	bf00      	nop
    3a28:	b009      	add	sp, #36	; 0x24
    3a2a:	f85d fb04 	ldr.w	pc, [sp], #4
    3a2e:	bf00      	nop
    3a30:	1fff8b98 	.word	0x1fff8b98
    3a34:	40064000 	.word	0x40064000
    3a38:	1fff8b18 	.word	0x1fff8b18

00003a3c <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    3a3c:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    3a3e:	2300      	movs	r3, #0
    3a40:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3a42:	4b29      	ldr	r3, [pc, #164]	; (3ae8 <getFircConfig+0xac>)
    3a44:	681b      	ldr	r3, [r3, #0]
    3a46:	2b00      	cmp	r3, #0
    3a48:	d024      	beq.n	3a94 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3a4a:	2300      	movs	r3, #0
    3a4c:	9301      	str	r3, [sp, #4]
    3a4e:	e01a      	b.n	3a86 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3a50:	4b25      	ldr	r3, [pc, #148]	; (3ae8 <getFircConfig+0xac>)
    3a52:	6819      	ldr	r1, [r3, #0]
    3a54:	9a01      	ldr	r2, [sp, #4]
    3a56:	4613      	mov	r3, r2
    3a58:	005b      	lsls	r3, r3, #1
    3a5a:	4413      	add	r3, r2
    3a5c:	009b      	lsls	r3, r3, #2
    3a5e:	440b      	add	r3, r1
    3a60:	3314      	adds	r3, #20
    3a62:	681b      	ldr	r3, [r3, #0]
    3a64:	2b05      	cmp	r3, #5
    3a66:	d10b      	bne.n	3a80 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    3a68:	4b1f      	ldr	r3, [pc, #124]	; (3ae8 <getFircConfig+0xac>)
    3a6a:	6819      	ldr	r1, [r3, #0]
    3a6c:	9a01      	ldr	r2, [sp, #4]
    3a6e:	4613      	mov	r3, r2
    3a70:	005b      	lsls	r3, r3, #1
    3a72:	4413      	add	r3, r2
    3a74:	009b      	lsls	r3, r3, #2
    3a76:	3310      	adds	r3, #16
    3a78:	440b      	add	r3, r1
    3a7a:	3304      	adds	r3, #4
    3a7c:	9300      	str	r3, [sp, #0]
                break;
    3a7e:	e009      	b.n	3a94 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3a80:	9b01      	ldr	r3, [sp, #4]
    3a82:	3301      	adds	r3, #1
    3a84:	9301      	str	r3, [sp, #4]
    3a86:	4b18      	ldr	r3, [pc, #96]	; (3ae8 <getFircConfig+0xac>)
    3a88:	681b      	ldr	r3, [r3, #0]
    3a8a:	7a1b      	ldrb	r3, [r3, #8]
    3a8c:	461a      	mov	r2, r3
    3a8e:	9b01      	ldr	r3, [sp, #4]
    3a90:	4293      	cmp	r3, r2
    3a92:	d3dd      	bcc.n	3a50 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3a94:	9b00      	ldr	r3, [sp, #0]
    3a96:	2b00      	cmp	r3, #0
    3a98:	d121      	bne.n	3ade <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    3a9a:	4b14      	ldr	r3, [pc, #80]	; (3aec <getFircConfig+0xb0>)
    3a9c:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    3a9e:	4b13      	ldr	r3, [pc, #76]	; (3aec <getFircConfig+0xb0>)
    3aa0:	2205      	movs	r2, #5
    3aa2:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    3aa4:	4b12      	ldr	r3, [pc, #72]	; (3af0 <getFircConfig+0xb4>)
    3aa6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3aaa:	b29b      	uxth	r3, r3
    3aac:	f003 0301 	and.w	r3, r3, #1
    3ab0:	b29a      	uxth	r2, r3
    3ab2:	4b0e      	ldr	r3, [pc, #56]	; (3aec <getFircConfig+0xb0>)
    3ab4:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    3ab6:	4b0e      	ldr	r3, [pc, #56]	; (3af0 <getFircConfig+0xb4>)
    3ab8:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3abc:	b2db      	uxtb	r3, r3
    3abe:	f003 0303 	and.w	r3, r3, #3
    3ac2:	b2da      	uxtb	r2, r3
    3ac4:	4b09      	ldr	r3, [pc, #36]	; (3aec <getFircConfig+0xb0>)
    3ac6:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    3ac8:	4b09      	ldr	r3, [pc, #36]	; (3af0 <getFircConfig+0xb4>)
    3aca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ace:	b2db      	uxtb	r3, r3
    3ad0:	10db      	asrs	r3, r3, #3
    3ad2:	b2db      	uxtb	r3, r3
    3ad4:	f003 0301 	and.w	r3, r3, #1
    3ad8:	b2da      	uxtb	r2, r3
    3ada:	4b04      	ldr	r3, [pc, #16]	; (3aec <getFircConfig+0xb0>)
    3adc:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    3ade:	9b00      	ldr	r3, [sp, #0]
}
    3ae0:	4618      	mov	r0, r3
    3ae2:	b002      	add	sp, #8
    3ae4:	4770      	bx	lr
    3ae6:	bf00      	nop
    3ae8:	1fff8b98 	.word	0x1fff8b98
    3aec:	1fff8c04 	.word	0x1fff8c04
    3af0:	40064000 	.word	0x40064000

00003af4 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    3af4:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    3af6:	2300      	movs	r3, #0
    3af8:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3afa:	4b20      	ldr	r3, [pc, #128]	; (3b7c <getSoscConfig+0x88>)
    3afc:	681b      	ldr	r3, [r3, #0]
    3afe:	2b00      	cmp	r3, #0
    3b00:	d024      	beq.n	3b4c <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    3b02:	2300      	movs	r3, #0
    3b04:	9301      	str	r3, [sp, #4]
    3b06:	e01a      	b.n	3b3e <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    3b08:	4b1c      	ldr	r3, [pc, #112]	; (3b7c <getSoscConfig+0x88>)
    3b0a:	6819      	ldr	r1, [r3, #0]
    3b0c:	9a01      	ldr	r2, [sp, #4]
    3b0e:	4613      	mov	r3, r2
    3b10:	009b      	lsls	r3, r3, #2
    3b12:	4413      	add	r3, r2
    3b14:	009b      	lsls	r3, r3, #2
    3b16:	440b      	add	r3, r1
    3b18:	332c      	adds	r3, #44	; 0x2c
    3b1a:	681b      	ldr	r3, [r3, #0]
    3b1c:	2b08      	cmp	r3, #8
    3b1e:	d10b      	bne.n	3b38 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    3b20:	4b16      	ldr	r3, [pc, #88]	; (3b7c <getSoscConfig+0x88>)
    3b22:	6819      	ldr	r1, [r3, #0]
    3b24:	9a01      	ldr	r2, [sp, #4]
    3b26:	4613      	mov	r3, r2
    3b28:	009b      	lsls	r3, r3, #2
    3b2a:	4413      	add	r3, r2
    3b2c:	009b      	lsls	r3, r3, #2
    3b2e:	3328      	adds	r3, #40	; 0x28
    3b30:	440b      	add	r3, r1
    3b32:	3304      	adds	r3, #4
    3b34:	9300      	str	r3, [sp, #0]
                break;
    3b36:	e009      	b.n	3b4c <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    3b38:	9b01      	ldr	r3, [sp, #4]
    3b3a:	3301      	adds	r3, #1
    3b3c:	9301      	str	r3, [sp, #4]
    3b3e:	4b0f      	ldr	r3, [pc, #60]	; (3b7c <getSoscConfig+0x88>)
    3b40:	681b      	ldr	r3, [r3, #0]
    3b42:	7a5b      	ldrb	r3, [r3, #9]
    3b44:	461a      	mov	r2, r3
    3b46:	9b01      	ldr	r3, [sp, #4]
    3b48:	4293      	cmp	r3, r2
    3b4a:	d3dd      	bcc.n	3b08 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3b4c:	9b00      	ldr	r3, [sp, #0]
    3b4e:	2b00      	cmp	r3, #0
    3b50:	d110      	bne.n	3b74 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    3b52:	4b0b      	ldr	r3, [pc, #44]	; (3b80 <getSoscConfig+0x8c>)
    3b54:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    3b56:	4b0a      	ldr	r3, [pc, #40]	; (3b80 <getSoscConfig+0x8c>)
    3b58:	2208      	movs	r2, #8
    3b5a:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    3b5c:	4b09      	ldr	r3, [pc, #36]	; (3b84 <getSoscConfig+0x90>)
    3b5e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3b62:	b29b      	uxth	r3, r3
    3b64:	f003 0301 	and.w	r3, r3, #1
    3b68:	b29a      	uxth	r2, r3
    3b6a:	4b05      	ldr	r3, [pc, #20]	; (3b80 <getSoscConfig+0x8c>)
    3b6c:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    3b6e:	4b04      	ldr	r3, [pc, #16]	; (3b80 <getSoscConfig+0x8c>)
    3b70:	4a05      	ldr	r2, [pc, #20]	; (3b88 <getSoscConfig+0x94>)
    3b72:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    3b74:	9b00      	ldr	r3, [sp, #0]
}
    3b76:	4618      	mov	r0, r3
    3b78:	b002      	add	sp, #8
    3b7a:	4770      	bx	lr
    3b7c:	1fff8b98 	.word	0x1fff8b98
    3b80:	1fff8c10 	.word	0x1fff8c10
    3b84:	40064000 	.word	0x40064000
    3b88:	02625a00 	.word	0x02625a00

00003b8c <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    3b8c:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    3b8e:	2300      	movs	r3, #0
    3b90:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3b92:	4b28      	ldr	r3, [pc, #160]	; (3c34 <getSpllConfig+0xa8>)
    3b94:	681b      	ldr	r3, [r3, #0]
    3b96:	2b00      	cmp	r3, #0
    3b98:	d023      	beq.n	3be2 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    3b9a:	2300      	movs	r3, #0
    3b9c:	9301      	str	r3, [sp, #4]
    3b9e:	e019      	b.n	3bd4 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    3ba0:	4b24      	ldr	r3, [pc, #144]	; (3c34 <getSpllConfig+0xa8>)
    3ba2:	6819      	ldr	r1, [r3, #0]
    3ba4:	9a01      	ldr	r2, [sp, #4]
    3ba6:	4613      	mov	r3, r2
    3ba8:	009b      	lsls	r3, r3, #2
    3baa:	4413      	add	r3, r2
    3bac:	00db      	lsls	r3, r3, #3
    3bae:	440b      	add	r3, r1
    3bb0:	3340      	adds	r3, #64	; 0x40
    3bb2:	681b      	ldr	r3, [r3, #0]
    3bb4:	2b09      	cmp	r3, #9
    3bb6:	d10a      	bne.n	3bce <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    3bb8:	4b1e      	ldr	r3, [pc, #120]	; (3c34 <getSpllConfig+0xa8>)
    3bba:	6819      	ldr	r1, [r3, #0]
    3bbc:	9a01      	ldr	r2, [sp, #4]
    3bbe:	4613      	mov	r3, r2
    3bc0:	009b      	lsls	r3, r3, #2
    3bc2:	4413      	add	r3, r2
    3bc4:	00db      	lsls	r3, r3, #3
    3bc6:	3340      	adds	r3, #64	; 0x40
    3bc8:	440b      	add	r3, r1
    3bca:	9300      	str	r3, [sp, #0]
                break;
    3bcc:	e009      	b.n	3be2 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    3bce:	9b01      	ldr	r3, [sp, #4]
    3bd0:	3301      	adds	r3, #1
    3bd2:	9301      	str	r3, [sp, #4]
    3bd4:	4b17      	ldr	r3, [pc, #92]	; (3c34 <getSpllConfig+0xa8>)
    3bd6:	681b      	ldr	r3, [r3, #0]
    3bd8:	7a9b      	ldrb	r3, [r3, #10]
    3bda:	461a      	mov	r2, r3
    3bdc:	9b01      	ldr	r3, [sp, #4]
    3bde:	4293      	cmp	r3, r2
    3be0:	d3de      	bcc.n	3ba0 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3be2:	9b00      	ldr	r3, [sp, #0]
    3be4:	2b00      	cmp	r3, #0
    3be6:	d121      	bne.n	3c2c <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    3be8:	4b13      	ldr	r3, [pc, #76]	; (3c38 <getSpllConfig+0xac>)
    3bea:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    3bec:	4b12      	ldr	r3, [pc, #72]	; (3c38 <getSpllConfig+0xac>)
    3bee:	2209      	movs	r2, #9
    3bf0:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    3bf2:	4b12      	ldr	r3, [pc, #72]	; (3c3c <getSpllConfig+0xb0>)
    3bf4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3bf8:	b29b      	uxth	r3, r3
    3bfa:	f003 0301 	and.w	r3, r3, #1
    3bfe:	b29a      	uxth	r2, r3
    3c00:	4b0d      	ldr	r3, [pc, #52]	; (3c38 <getSpllConfig+0xac>)
    3c02:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    3c04:	4b0d      	ldr	r3, [pc, #52]	; (3c3c <getSpllConfig+0xb0>)
    3c06:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3c0a:	0a1b      	lsrs	r3, r3, #8
    3c0c:	b2db      	uxtb	r3, r3
    3c0e:	f003 0307 	and.w	r3, r3, #7
    3c12:	b2da      	uxtb	r2, r3
    3c14:	4b08      	ldr	r3, [pc, #32]	; (3c38 <getSpllConfig+0xac>)
    3c16:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    3c18:	4b08      	ldr	r3, [pc, #32]	; (3c3c <getSpllConfig+0xb0>)
    3c1a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3c1e:	0c1b      	lsrs	r3, r3, #16
    3c20:	b2db      	uxtb	r3, r3
    3c22:	f003 031f 	and.w	r3, r3, #31
    3c26:	b2da      	uxtb	r2, r3
    3c28:	4b03      	ldr	r3, [pc, #12]	; (3c38 <getSpllConfig+0xac>)
    3c2a:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    3c2c:	9b00      	ldr	r3, [sp, #0]
}
    3c2e:	4618      	mov	r0, r3
    3c30:	b002      	add	sp, #8
    3c32:	4770      	bx	lr
    3c34:	1fff8b98 	.word	0x1fff8b98
    3c38:	1fff8c24 	.word	0x1fff8c24
    3c3c:	40064000 	.word	0x40064000

00003c40 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    3c40:	b086      	sub	sp, #24
    3c42:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    3c44:	2300      	movs	r3, #0
    3c46:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    3c48:	9b01      	ldr	r3, [sp, #4]
    3c4a:	2b1b      	cmp	r3, #27
    3c4c:	d00f      	beq.n	3c6e <getSelectorConfig+0x2e>
    3c4e:	9b01      	ldr	r3, [sp, #4]
    3c50:	2b1b      	cmp	r3, #27
    3c52:	d80f      	bhi.n	3c74 <getSelectorConfig+0x34>
    3c54:	9b01      	ldr	r3, [sp, #4]
    3c56:	2b19      	cmp	r3, #25
    3c58:	d003      	beq.n	3c62 <getSelectorConfig+0x22>
    3c5a:	9b01      	ldr	r3, [sp, #4]
    3c5c:	2b1a      	cmp	r3, #26
    3c5e:	d003      	beq.n	3c68 <getSelectorConfig+0x28>
    3c60:	e008      	b.n	3c74 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    3c62:	2300      	movs	r3, #0
    3c64:	9304      	str	r3, [sp, #16]
            break;
    3c66:	e008      	b.n	3c7a <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    3c68:	2301      	movs	r3, #1
    3c6a:	9304      	str	r3, [sp, #16]
            break;
    3c6c:	e005      	b.n	3c7a <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    3c6e:	2302      	movs	r3, #2
    3c70:	9304      	str	r3, [sp, #16]
            break;
    3c72:	e002      	b.n	3c7a <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    3c74:	2300      	movs	r3, #0
    3c76:	9304      	str	r3, [sp, #16]
            break;
    3c78:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    3c7a:	4b36      	ldr	r3, [pc, #216]	; (3d54 <getSelectorConfig+0x114>)
    3c7c:	681b      	ldr	r3, [r3, #0]
    3c7e:	2b00      	cmp	r3, #0
    3c80:	d01d      	beq.n	3cbe <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    3c82:	2300      	movs	r3, #0
    3c84:	9303      	str	r3, [sp, #12]
    3c86:	e013      	b.n	3cb0 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    3c88:	4b32      	ldr	r3, [pc, #200]	; (3d54 <getSelectorConfig+0x114>)
    3c8a:	681b      	ldr	r3, [r3, #0]
    3c8c:	9a03      	ldr	r2, [sp, #12]
    3c8e:	320d      	adds	r2, #13
    3c90:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3c94:	9a01      	ldr	r2, [sp, #4]
    3c96:	429a      	cmp	r2, r3
    3c98:	d107      	bne.n	3caa <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    3c9a:	4b2e      	ldr	r3, [pc, #184]	; (3d54 <getSelectorConfig+0x114>)
    3c9c:	681a      	ldr	r2, [r3, #0]
    3c9e:	9b03      	ldr	r3, [sp, #12]
    3ca0:	330d      	adds	r3, #13
    3ca2:	00db      	lsls	r3, r3, #3
    3ca4:	4413      	add	r3, r2
    3ca6:	9305      	str	r3, [sp, #20]
                break;
    3ca8:	e009      	b.n	3cbe <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    3caa:	9b03      	ldr	r3, [sp, #12]
    3cac:	3301      	adds	r3, #1
    3cae:	9303      	str	r3, [sp, #12]
    3cb0:	4b28      	ldr	r3, [pc, #160]	; (3d54 <getSelectorConfig+0x114>)
    3cb2:	681b      	ldr	r3, [r3, #0]
    3cb4:	7adb      	ldrb	r3, [r3, #11]
    3cb6:	461a      	mov	r2, r3
    3cb8:	9b03      	ldr	r3, [sp, #12]
    3cba:	4293      	cmp	r3, r2
    3cbc:	d3e4      	bcc.n	3c88 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3cbe:	9b05      	ldr	r3, [sp, #20]
    3cc0:	2b00      	cmp	r3, #0
    3cc2:	d140      	bne.n	3d46 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    3cc4:	9b04      	ldr	r3, [sp, #16]
    3cc6:	00db      	lsls	r3, r3, #3
    3cc8:	4a23      	ldr	r2, [pc, #140]	; (3d58 <getSelectorConfig+0x118>)
    3cca:	4413      	add	r3, r2
    3ccc:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    3cce:	4922      	ldr	r1, [pc, #136]	; (3d58 <getSelectorConfig+0x118>)
    3cd0:	9b04      	ldr	r3, [sp, #16]
    3cd2:	9a01      	ldr	r2, [sp, #4]
    3cd4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    3cd8:	9b01      	ldr	r3, [sp, #4]
    3cda:	2b1b      	cmp	r3, #27
    3cdc:	d025      	beq.n	3d2a <getSelectorConfig+0xea>
    3cde:	9b01      	ldr	r3, [sp, #4]
    3ce0:	2b1b      	cmp	r3, #27
    3ce2:	d832      	bhi.n	3d4a <getSelectorConfig+0x10a>
    3ce4:	9b01      	ldr	r3, [sp, #4]
    3ce6:	2b19      	cmp	r3, #25
    3ce8:	d003      	beq.n	3cf2 <getSelectorConfig+0xb2>
    3cea:	9b01      	ldr	r3, [sp, #4]
    3cec:	2b1a      	cmp	r3, #26
    3cee:	d00e      	beq.n	3d0e <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    3cf0:	e02b      	b.n	3d4a <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    3cf2:	4b1a      	ldr	r3, [pc, #104]	; (3d5c <getSelectorConfig+0x11c>)
    3cf4:	695b      	ldr	r3, [r3, #20]
    3cf6:	0e1b      	lsrs	r3, r3, #24
    3cf8:	f003 030f 	and.w	r3, r3, #15
    3cfc:	4a18      	ldr	r2, [pc, #96]	; (3d60 <getSelectorConfig+0x120>)
    3cfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3d02:	4915      	ldr	r1, [pc, #84]	; (3d58 <getSelectorConfig+0x118>)
    3d04:	9b04      	ldr	r3, [sp, #16]
    3d06:	00db      	lsls	r3, r3, #3
    3d08:	440b      	add	r3, r1
    3d0a:	605a      	str	r2, [r3, #4]
                break;
    3d0c:	e01e      	b.n	3d4c <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    3d0e:	4b13      	ldr	r3, [pc, #76]	; (3d5c <getSelectorConfig+0x11c>)
    3d10:	699b      	ldr	r3, [r3, #24]
    3d12:	0e1b      	lsrs	r3, r3, #24
    3d14:	f003 030f 	and.w	r3, r3, #15
    3d18:	4a11      	ldr	r2, [pc, #68]	; (3d60 <getSelectorConfig+0x120>)
    3d1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3d1e:	490e      	ldr	r1, [pc, #56]	; (3d58 <getSelectorConfig+0x118>)
    3d20:	9b04      	ldr	r3, [sp, #16]
    3d22:	00db      	lsls	r3, r3, #3
    3d24:	440b      	add	r3, r1
    3d26:	605a      	str	r2, [r3, #4]
                break;
    3d28:	e010      	b.n	3d4c <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    3d2a:	4b0c      	ldr	r3, [pc, #48]	; (3d5c <getSelectorConfig+0x11c>)
    3d2c:	69db      	ldr	r3, [r3, #28]
    3d2e:	0e1b      	lsrs	r3, r3, #24
    3d30:	f003 030f 	and.w	r3, r3, #15
    3d34:	4a0a      	ldr	r2, [pc, #40]	; (3d60 <getSelectorConfig+0x120>)
    3d36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3d3a:	4907      	ldr	r1, [pc, #28]	; (3d58 <getSelectorConfig+0x118>)
    3d3c:	9b04      	ldr	r3, [sp, #16]
    3d3e:	00db      	lsls	r3, r3, #3
    3d40:	440b      	add	r3, r1
    3d42:	605a      	str	r2, [r3, #4]
                break;
    3d44:	e002      	b.n	3d4c <getSelectorConfig+0x10c>
        }
    }
    3d46:	bf00      	nop
    3d48:	e000      	b.n	3d4c <getSelectorConfig+0x10c>
                break;
    3d4a:	bf00      	nop

    return ReturnValue;
    3d4c:	9b05      	ldr	r3, [sp, #20]
}
    3d4e:	4618      	mov	r0, r3
    3d50:	b006      	add	sp, #24
    3d52:	4770      	bx	lr
    3d54:	1fff8b98 	.word	0x1fff8b98
    3d58:	1fff8c4c 	.word	0x1fff8c4c
    3d5c:	40064000 	.word	0x40064000
    3d60:	0000738c 	.word	0x0000738c

00003d64 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    3d64:	b086      	sub	sp, #24
    3d66:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    3d68:	2300      	movs	r3, #0
    3d6a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    3d6c:	2300      	movs	r3, #0
    3d6e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    3d70:	9b01      	ldr	r3, [sp, #4]
    3d72:	2b1f      	cmp	r3, #31
    3d74:	d00f      	beq.n	3d96 <getCoreDividerConfig+0x32>
    3d76:	9b01      	ldr	r3, [sp, #4]
    3d78:	2b1f      	cmp	r3, #31
    3d7a:	d80f      	bhi.n	3d9c <getCoreDividerConfig+0x38>
    3d7c:	9b01      	ldr	r3, [sp, #4]
    3d7e:	2b1d      	cmp	r3, #29
    3d80:	d003      	beq.n	3d8a <getCoreDividerConfig+0x26>
    3d82:	9b01      	ldr	r3, [sp, #4]
    3d84:	2b1e      	cmp	r3, #30
    3d86:	d003      	beq.n	3d90 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    3d88:	e008      	b.n	3d9c <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    3d8a:	2300      	movs	r3, #0
    3d8c:	9304      	str	r3, [sp, #16]
            break;
    3d8e:	e006      	b.n	3d9e <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    3d90:	2301      	movs	r3, #1
    3d92:	9304      	str	r3, [sp, #16]
            break;
    3d94:	e003      	b.n	3d9e <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    3d96:	2302      	movs	r3, #2
    3d98:	9304      	str	r3, [sp, #16]
            break;
    3d9a:	e000      	b.n	3d9e <getCoreDividerConfig+0x3a>
                break;
    3d9c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    3d9e:	4b41      	ldr	r3, [pc, #260]	; (3ea4 <getCoreDividerConfig+0x140>)
    3da0:	681b      	ldr	r3, [r3, #0]
    3da2:	2b00      	cmp	r3, #0
    3da4:	d026      	beq.n	3df4 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3da6:	2300      	movs	r3, #0
    3da8:	9303      	str	r3, [sp, #12]
    3daa:	e01c      	b.n	3de6 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    3dac:	4b3d      	ldr	r3, [pc, #244]	; (3ea4 <getCoreDividerConfig+0x140>)
    3dae:	6819      	ldr	r1, [r3, #0]
    3db0:	9a03      	ldr	r2, [sp, #12]
    3db2:	4613      	mov	r3, r2
    3db4:	005b      	lsls	r3, r3, #1
    3db6:	4413      	add	r3, r2
    3db8:	009b      	lsls	r3, r3, #2
    3dba:	440b      	add	r3, r1
    3dbc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3dc0:	681b      	ldr	r3, [r3, #0]
    3dc2:	9a01      	ldr	r2, [sp, #4]
    3dc4:	429a      	cmp	r2, r3
    3dc6:	d10b      	bne.n	3de0 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    3dc8:	4b36      	ldr	r3, [pc, #216]	; (3ea4 <getCoreDividerConfig+0x140>)
    3dca:	6819      	ldr	r1, [r3, #0]
    3dcc:	9a03      	ldr	r2, [sp, #12]
    3dce:	4613      	mov	r3, r2
    3dd0:	005b      	lsls	r3, r3, #1
    3dd2:	4413      	add	r3, r2
    3dd4:	009b      	lsls	r3, r3, #2
    3dd6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3dda:	440b      	add	r3, r1
    3ddc:	9305      	str	r3, [sp, #20]
                break;
    3dde:	e009      	b.n	3df4 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3de0:	9b03      	ldr	r3, [sp, #12]
    3de2:	3301      	adds	r3, #1
    3de4:	9303      	str	r3, [sp, #12]
    3de6:	4b2f      	ldr	r3, [pc, #188]	; (3ea4 <getCoreDividerConfig+0x140>)
    3de8:	681b      	ldr	r3, [r3, #0]
    3dea:	7b1b      	ldrb	r3, [r3, #12]
    3dec:	461a      	mov	r2, r3
    3dee:	9b03      	ldr	r3, [sp, #12]
    3df0:	4293      	cmp	r3, r2
    3df2:	d3db      	bcc.n	3dac <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3df4:	9b05      	ldr	r3, [sp, #20]
    3df6:	2b00      	cmp	r3, #0
    3df8:	d14d      	bne.n	3e96 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    3dfa:	9a04      	ldr	r2, [sp, #16]
    3dfc:	4613      	mov	r3, r2
    3dfe:	005b      	lsls	r3, r3, #1
    3e00:	4413      	add	r3, r2
    3e02:	009b      	lsls	r3, r3, #2
    3e04:	4a28      	ldr	r2, [pc, #160]	; (3ea8 <getCoreDividerConfig+0x144>)
    3e06:	4413      	add	r3, r2
    3e08:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    3e0a:	4927      	ldr	r1, [pc, #156]	; (3ea8 <getCoreDividerConfig+0x144>)
    3e0c:	9a04      	ldr	r2, [sp, #16]
    3e0e:	4613      	mov	r3, r2
    3e10:	005b      	lsls	r3, r3, #1
    3e12:	4413      	add	r3, r2
    3e14:	009b      	lsls	r3, r3, #2
    3e16:	440b      	add	r3, r1
    3e18:	9a01      	ldr	r2, [sp, #4]
    3e1a:	601a      	str	r2, [r3, #0]
        switch(Name)
    3e1c:	9b01      	ldr	r3, [sp, #4]
    3e1e:	2b1f      	cmp	r3, #31
    3e20:	d029      	beq.n	3e76 <getCoreDividerConfig+0x112>
    3e22:	9b01      	ldr	r3, [sp, #4]
    3e24:	2b1f      	cmp	r3, #31
    3e26:	d838      	bhi.n	3e9a <getCoreDividerConfig+0x136>
    3e28:	9b01      	ldr	r3, [sp, #4]
    3e2a:	2b1d      	cmp	r3, #29
    3e2c:	d003      	beq.n	3e36 <getCoreDividerConfig+0xd2>
    3e2e:	9b01      	ldr	r3, [sp, #4]
    3e30:	2b1e      	cmp	r3, #30
    3e32:	d010      	beq.n	3e56 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    3e34:	e031      	b.n	3e9a <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    3e36:	4b1d      	ldr	r3, [pc, #116]	; (3eac <getCoreDividerConfig+0x148>)
    3e38:	695b      	ldr	r3, [r3, #20]
    3e3a:	0c1b      	lsrs	r3, r3, #16
    3e3c:	f003 030f 	and.w	r3, r3, #15
    3e40:	1c59      	adds	r1, r3, #1
    3e42:	4819      	ldr	r0, [pc, #100]	; (3ea8 <getCoreDividerConfig+0x144>)
    3e44:	9a04      	ldr	r2, [sp, #16]
    3e46:	4613      	mov	r3, r2
    3e48:	005b      	lsls	r3, r3, #1
    3e4a:	4413      	add	r3, r2
    3e4c:	009b      	lsls	r3, r3, #2
    3e4e:	4403      	add	r3, r0
    3e50:	3304      	adds	r3, #4
    3e52:	6019      	str	r1, [r3, #0]
                break;
    3e54:	e022      	b.n	3e9c <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    3e56:	4b15      	ldr	r3, [pc, #84]	; (3eac <getCoreDividerConfig+0x148>)
    3e58:	699b      	ldr	r3, [r3, #24]
    3e5a:	0c1b      	lsrs	r3, r3, #16
    3e5c:	f003 030f 	and.w	r3, r3, #15
    3e60:	1c59      	adds	r1, r3, #1
    3e62:	4811      	ldr	r0, [pc, #68]	; (3ea8 <getCoreDividerConfig+0x144>)
    3e64:	9a04      	ldr	r2, [sp, #16]
    3e66:	4613      	mov	r3, r2
    3e68:	005b      	lsls	r3, r3, #1
    3e6a:	4413      	add	r3, r2
    3e6c:	009b      	lsls	r3, r3, #2
    3e6e:	4403      	add	r3, r0
    3e70:	3304      	adds	r3, #4
    3e72:	6019      	str	r1, [r3, #0]
                break;
    3e74:	e012      	b.n	3e9c <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    3e76:	4b0d      	ldr	r3, [pc, #52]	; (3eac <getCoreDividerConfig+0x148>)
    3e78:	69db      	ldr	r3, [r3, #28]
    3e7a:	0c1b      	lsrs	r3, r3, #16
    3e7c:	f003 030f 	and.w	r3, r3, #15
    3e80:	1c59      	adds	r1, r3, #1
    3e82:	4809      	ldr	r0, [pc, #36]	; (3ea8 <getCoreDividerConfig+0x144>)
    3e84:	9a04      	ldr	r2, [sp, #16]
    3e86:	4613      	mov	r3, r2
    3e88:	005b      	lsls	r3, r3, #1
    3e8a:	4413      	add	r3, r2
    3e8c:	009b      	lsls	r3, r3, #2
    3e8e:	4403      	add	r3, r0
    3e90:	3304      	adds	r3, #4
    3e92:	6019      	str	r1, [r3, #0]
                break;
    3e94:	e002      	b.n	3e9c <getCoreDividerConfig+0x138>
        }
    }
    3e96:	bf00      	nop
    3e98:	e000      	b.n	3e9c <getCoreDividerConfig+0x138>
                break;
    3e9a:	bf00      	nop

    return ReturnValue;
    3e9c:	9b05      	ldr	r3, [sp, #20]
}
    3e9e:	4618      	mov	r0, r3
    3ea0:	b006      	add	sp, #24
    3ea2:	4770      	bx	lr
    3ea4:	1fff8b98 	.word	0x1fff8b98
    3ea8:	1fff8c64 	.word	0x1fff8c64
    3eac:	40064000 	.word	0x40064000

00003eb0 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    3eb0:	b086      	sub	sp, #24
    3eb2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    3eb4:	2300      	movs	r3, #0
    3eb6:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    3eb8:	2300      	movs	r3, #0
    3eba:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    3ebc:	9b01      	ldr	r3, [sp, #4]
    3ebe:	2b23      	cmp	r3, #35	; 0x23
    3ec0:	d00f      	beq.n	3ee2 <getBusDividerConfig+0x32>
    3ec2:	9b01      	ldr	r3, [sp, #4]
    3ec4:	2b23      	cmp	r3, #35	; 0x23
    3ec6:	d80f      	bhi.n	3ee8 <getBusDividerConfig+0x38>
    3ec8:	9b01      	ldr	r3, [sp, #4]
    3eca:	2b21      	cmp	r3, #33	; 0x21
    3ecc:	d003      	beq.n	3ed6 <getBusDividerConfig+0x26>
    3ece:	9b01      	ldr	r3, [sp, #4]
    3ed0:	2b22      	cmp	r3, #34	; 0x22
    3ed2:	d003      	beq.n	3edc <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    3ed4:	e008      	b.n	3ee8 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    3ed6:	2300      	movs	r3, #0
    3ed8:	9304      	str	r3, [sp, #16]
            break;
    3eda:	e006      	b.n	3eea <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    3edc:	2301      	movs	r3, #1
    3ede:	9304      	str	r3, [sp, #16]
            break;
    3ee0:	e003      	b.n	3eea <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    3ee2:	2302      	movs	r3, #2
    3ee4:	9304      	str	r3, [sp, #16]
            break;
    3ee6:	e000      	b.n	3eea <getBusDividerConfig+0x3a>
                break;
    3ee8:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    3eea:	4b41      	ldr	r3, [pc, #260]	; (3ff0 <getBusDividerConfig+0x140>)
    3eec:	681b      	ldr	r3, [r3, #0]
    3eee:	2b00      	cmp	r3, #0
    3ef0:	d026      	beq.n	3f40 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3ef2:	2300      	movs	r3, #0
    3ef4:	9303      	str	r3, [sp, #12]
    3ef6:	e01c      	b.n	3f32 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    3ef8:	4b3d      	ldr	r3, [pc, #244]	; (3ff0 <getBusDividerConfig+0x140>)
    3efa:	6819      	ldr	r1, [r3, #0]
    3efc:	9a03      	ldr	r2, [sp, #12]
    3efe:	4613      	mov	r3, r2
    3f00:	005b      	lsls	r3, r3, #1
    3f02:	4413      	add	r3, r2
    3f04:	009b      	lsls	r3, r3, #2
    3f06:	440b      	add	r3, r1
    3f08:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3f0c:	681b      	ldr	r3, [r3, #0]
    3f0e:	9a01      	ldr	r2, [sp, #4]
    3f10:	429a      	cmp	r2, r3
    3f12:	d10b      	bne.n	3f2c <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    3f14:	4b36      	ldr	r3, [pc, #216]	; (3ff0 <getBusDividerConfig+0x140>)
    3f16:	6819      	ldr	r1, [r3, #0]
    3f18:	9a03      	ldr	r2, [sp, #12]
    3f1a:	4613      	mov	r3, r2
    3f1c:	005b      	lsls	r3, r3, #1
    3f1e:	4413      	add	r3, r2
    3f20:	009b      	lsls	r3, r3, #2
    3f22:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3f26:	440b      	add	r3, r1
    3f28:	9305      	str	r3, [sp, #20]
                break;
    3f2a:	e009      	b.n	3f40 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3f2c:	9b03      	ldr	r3, [sp, #12]
    3f2e:	3301      	adds	r3, #1
    3f30:	9303      	str	r3, [sp, #12]
    3f32:	4b2f      	ldr	r3, [pc, #188]	; (3ff0 <getBusDividerConfig+0x140>)
    3f34:	681b      	ldr	r3, [r3, #0]
    3f36:	7b1b      	ldrb	r3, [r3, #12]
    3f38:	461a      	mov	r2, r3
    3f3a:	9b03      	ldr	r3, [sp, #12]
    3f3c:	4293      	cmp	r3, r2
    3f3e:	d3db      	bcc.n	3ef8 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3f40:	9b05      	ldr	r3, [sp, #20]
    3f42:	2b00      	cmp	r3, #0
    3f44:	d14d      	bne.n	3fe2 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    3f46:	9a04      	ldr	r2, [sp, #16]
    3f48:	4613      	mov	r3, r2
    3f4a:	005b      	lsls	r3, r3, #1
    3f4c:	4413      	add	r3, r2
    3f4e:	009b      	lsls	r3, r3, #2
    3f50:	4a28      	ldr	r2, [pc, #160]	; (3ff4 <getBusDividerConfig+0x144>)
    3f52:	4413      	add	r3, r2
    3f54:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    3f56:	4927      	ldr	r1, [pc, #156]	; (3ff4 <getBusDividerConfig+0x144>)
    3f58:	9a04      	ldr	r2, [sp, #16]
    3f5a:	4613      	mov	r3, r2
    3f5c:	005b      	lsls	r3, r3, #1
    3f5e:	4413      	add	r3, r2
    3f60:	009b      	lsls	r3, r3, #2
    3f62:	440b      	add	r3, r1
    3f64:	9a01      	ldr	r2, [sp, #4]
    3f66:	601a      	str	r2, [r3, #0]
        switch(Name)
    3f68:	9b01      	ldr	r3, [sp, #4]
    3f6a:	2b23      	cmp	r3, #35	; 0x23
    3f6c:	d029      	beq.n	3fc2 <getBusDividerConfig+0x112>
    3f6e:	9b01      	ldr	r3, [sp, #4]
    3f70:	2b23      	cmp	r3, #35	; 0x23
    3f72:	d838      	bhi.n	3fe6 <getBusDividerConfig+0x136>
    3f74:	9b01      	ldr	r3, [sp, #4]
    3f76:	2b21      	cmp	r3, #33	; 0x21
    3f78:	d003      	beq.n	3f82 <getBusDividerConfig+0xd2>
    3f7a:	9b01      	ldr	r3, [sp, #4]
    3f7c:	2b22      	cmp	r3, #34	; 0x22
    3f7e:	d010      	beq.n	3fa2 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    3f80:	e031      	b.n	3fe6 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    3f82:	4b1d      	ldr	r3, [pc, #116]	; (3ff8 <getBusDividerConfig+0x148>)
    3f84:	695b      	ldr	r3, [r3, #20]
    3f86:	091b      	lsrs	r3, r3, #4
    3f88:	f003 030f 	and.w	r3, r3, #15
    3f8c:	1c59      	adds	r1, r3, #1
    3f8e:	4819      	ldr	r0, [pc, #100]	; (3ff4 <getBusDividerConfig+0x144>)
    3f90:	9a04      	ldr	r2, [sp, #16]
    3f92:	4613      	mov	r3, r2
    3f94:	005b      	lsls	r3, r3, #1
    3f96:	4413      	add	r3, r2
    3f98:	009b      	lsls	r3, r3, #2
    3f9a:	4403      	add	r3, r0
    3f9c:	3304      	adds	r3, #4
    3f9e:	6019      	str	r1, [r3, #0]
                break;
    3fa0:	e022      	b.n	3fe8 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    3fa2:	4b15      	ldr	r3, [pc, #84]	; (3ff8 <getBusDividerConfig+0x148>)
    3fa4:	699b      	ldr	r3, [r3, #24]
    3fa6:	091b      	lsrs	r3, r3, #4
    3fa8:	f003 030f 	and.w	r3, r3, #15
    3fac:	1c59      	adds	r1, r3, #1
    3fae:	4811      	ldr	r0, [pc, #68]	; (3ff4 <getBusDividerConfig+0x144>)
    3fb0:	9a04      	ldr	r2, [sp, #16]
    3fb2:	4613      	mov	r3, r2
    3fb4:	005b      	lsls	r3, r3, #1
    3fb6:	4413      	add	r3, r2
    3fb8:	009b      	lsls	r3, r3, #2
    3fba:	4403      	add	r3, r0
    3fbc:	3304      	adds	r3, #4
    3fbe:	6019      	str	r1, [r3, #0]
                break;
    3fc0:	e012      	b.n	3fe8 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    3fc2:	4b0d      	ldr	r3, [pc, #52]	; (3ff8 <getBusDividerConfig+0x148>)
    3fc4:	69db      	ldr	r3, [r3, #28]
    3fc6:	091b      	lsrs	r3, r3, #4
    3fc8:	f003 030f 	and.w	r3, r3, #15
    3fcc:	1c59      	adds	r1, r3, #1
    3fce:	4809      	ldr	r0, [pc, #36]	; (3ff4 <getBusDividerConfig+0x144>)
    3fd0:	9a04      	ldr	r2, [sp, #16]
    3fd2:	4613      	mov	r3, r2
    3fd4:	005b      	lsls	r3, r3, #1
    3fd6:	4413      	add	r3, r2
    3fd8:	009b      	lsls	r3, r3, #2
    3fda:	4403      	add	r3, r0
    3fdc:	3304      	adds	r3, #4
    3fde:	6019      	str	r1, [r3, #0]
                break;
    3fe0:	e002      	b.n	3fe8 <getBusDividerConfig+0x138>
        }
    }
    3fe2:	bf00      	nop
    3fe4:	e000      	b.n	3fe8 <getBusDividerConfig+0x138>
                break;
    3fe6:	bf00      	nop

    return ReturnValue;
    3fe8:	9b05      	ldr	r3, [sp, #20]
}
    3fea:	4618      	mov	r0, r3
    3fec:	b006      	add	sp, #24
    3fee:	4770      	bx	lr
    3ff0:	1fff8b98 	.word	0x1fff8b98
    3ff4:	1fff8c88 	.word	0x1fff8c88
    3ff8:	40064000 	.word	0x40064000

00003ffc <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    3ffc:	b086      	sub	sp, #24
    3ffe:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4000:	2300      	movs	r3, #0
    4002:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4004:	2300      	movs	r3, #0
    4006:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4008:	9b01      	ldr	r3, [sp, #4]
    400a:	2b27      	cmp	r3, #39	; 0x27
    400c:	d00f      	beq.n	402e <getSlowDividerConfig+0x32>
    400e:	9b01      	ldr	r3, [sp, #4]
    4010:	2b27      	cmp	r3, #39	; 0x27
    4012:	d80f      	bhi.n	4034 <getSlowDividerConfig+0x38>
    4014:	9b01      	ldr	r3, [sp, #4]
    4016:	2b25      	cmp	r3, #37	; 0x25
    4018:	d003      	beq.n	4022 <getSlowDividerConfig+0x26>
    401a:	9b01      	ldr	r3, [sp, #4]
    401c:	2b26      	cmp	r3, #38	; 0x26
    401e:	d003      	beq.n	4028 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4020:	e008      	b.n	4034 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4022:	2300      	movs	r3, #0
    4024:	9304      	str	r3, [sp, #16]
            break;
    4026:	e006      	b.n	4036 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4028:	2301      	movs	r3, #1
    402a:	9304      	str	r3, [sp, #16]
            break;
    402c:	e003      	b.n	4036 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    402e:	2302      	movs	r3, #2
    4030:	9304      	str	r3, [sp, #16]
            break;
    4032:	e000      	b.n	4036 <getSlowDividerConfig+0x3a>
                break;
    4034:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4036:	4b40      	ldr	r3, [pc, #256]	; (4138 <getSlowDividerConfig+0x13c>)
    4038:	681b      	ldr	r3, [r3, #0]
    403a:	2b00      	cmp	r3, #0
    403c:	d026      	beq.n	408c <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    403e:	2300      	movs	r3, #0
    4040:	9303      	str	r3, [sp, #12]
    4042:	e01c      	b.n	407e <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4044:	4b3c      	ldr	r3, [pc, #240]	; (4138 <getSlowDividerConfig+0x13c>)
    4046:	6819      	ldr	r1, [r3, #0]
    4048:	9a03      	ldr	r2, [sp, #12]
    404a:	4613      	mov	r3, r2
    404c:	005b      	lsls	r3, r3, #1
    404e:	4413      	add	r3, r2
    4050:	009b      	lsls	r3, r3, #2
    4052:	440b      	add	r3, r1
    4054:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4058:	681b      	ldr	r3, [r3, #0]
    405a:	9a01      	ldr	r2, [sp, #4]
    405c:	429a      	cmp	r2, r3
    405e:	d10b      	bne.n	4078 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4060:	4b35      	ldr	r3, [pc, #212]	; (4138 <getSlowDividerConfig+0x13c>)
    4062:	6819      	ldr	r1, [r3, #0]
    4064:	9a03      	ldr	r2, [sp, #12]
    4066:	4613      	mov	r3, r2
    4068:	005b      	lsls	r3, r3, #1
    406a:	4413      	add	r3, r2
    406c:	009b      	lsls	r3, r3, #2
    406e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4072:	440b      	add	r3, r1
    4074:	9305      	str	r3, [sp, #20]
                break;
    4076:	e009      	b.n	408c <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4078:	9b03      	ldr	r3, [sp, #12]
    407a:	3301      	adds	r3, #1
    407c:	9303      	str	r3, [sp, #12]
    407e:	4b2e      	ldr	r3, [pc, #184]	; (4138 <getSlowDividerConfig+0x13c>)
    4080:	681b      	ldr	r3, [r3, #0]
    4082:	7b1b      	ldrb	r3, [r3, #12]
    4084:	461a      	mov	r2, r3
    4086:	9b03      	ldr	r3, [sp, #12]
    4088:	4293      	cmp	r3, r2
    408a:	d3db      	bcc.n	4044 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    408c:	9b05      	ldr	r3, [sp, #20]
    408e:	2b00      	cmp	r3, #0
    4090:	d14a      	bne.n	4128 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    4092:	9a04      	ldr	r2, [sp, #16]
    4094:	4613      	mov	r3, r2
    4096:	005b      	lsls	r3, r3, #1
    4098:	4413      	add	r3, r2
    409a:	009b      	lsls	r3, r3, #2
    409c:	4a27      	ldr	r2, [pc, #156]	; (413c <getSlowDividerConfig+0x140>)
    409e:	4413      	add	r3, r2
    40a0:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    40a2:	4926      	ldr	r1, [pc, #152]	; (413c <getSlowDividerConfig+0x140>)
    40a4:	9a04      	ldr	r2, [sp, #16]
    40a6:	4613      	mov	r3, r2
    40a8:	005b      	lsls	r3, r3, #1
    40aa:	4413      	add	r3, r2
    40ac:	009b      	lsls	r3, r3, #2
    40ae:	440b      	add	r3, r1
    40b0:	9a01      	ldr	r2, [sp, #4]
    40b2:	601a      	str	r2, [r3, #0]
        switch(Name)
    40b4:	9b01      	ldr	r3, [sp, #4]
    40b6:	2b27      	cmp	r3, #39	; 0x27
    40b8:	d027      	beq.n	410a <getSlowDividerConfig+0x10e>
    40ba:	9b01      	ldr	r3, [sp, #4]
    40bc:	2b27      	cmp	r3, #39	; 0x27
    40be:	d835      	bhi.n	412c <getSlowDividerConfig+0x130>
    40c0:	9b01      	ldr	r3, [sp, #4]
    40c2:	2b25      	cmp	r3, #37	; 0x25
    40c4:	d003      	beq.n	40ce <getSlowDividerConfig+0xd2>
    40c6:	9b01      	ldr	r3, [sp, #4]
    40c8:	2b26      	cmp	r3, #38	; 0x26
    40ca:	d00f      	beq.n	40ec <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    40cc:	e02e      	b.n	412c <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    40ce:	4b1c      	ldr	r3, [pc, #112]	; (4140 <getSlowDividerConfig+0x144>)
    40d0:	695b      	ldr	r3, [r3, #20]
    40d2:	f003 030f 	and.w	r3, r3, #15
    40d6:	1c59      	adds	r1, r3, #1
    40d8:	4818      	ldr	r0, [pc, #96]	; (413c <getSlowDividerConfig+0x140>)
    40da:	9a04      	ldr	r2, [sp, #16]
    40dc:	4613      	mov	r3, r2
    40de:	005b      	lsls	r3, r3, #1
    40e0:	4413      	add	r3, r2
    40e2:	009b      	lsls	r3, r3, #2
    40e4:	4403      	add	r3, r0
    40e6:	3304      	adds	r3, #4
    40e8:	6019      	str	r1, [r3, #0]
                break;
    40ea:	e020      	b.n	412e <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    40ec:	4b14      	ldr	r3, [pc, #80]	; (4140 <getSlowDividerConfig+0x144>)
    40ee:	699b      	ldr	r3, [r3, #24]
    40f0:	f003 030f 	and.w	r3, r3, #15
    40f4:	1c59      	adds	r1, r3, #1
    40f6:	4811      	ldr	r0, [pc, #68]	; (413c <getSlowDividerConfig+0x140>)
    40f8:	9a04      	ldr	r2, [sp, #16]
    40fa:	4613      	mov	r3, r2
    40fc:	005b      	lsls	r3, r3, #1
    40fe:	4413      	add	r3, r2
    4100:	009b      	lsls	r3, r3, #2
    4102:	4403      	add	r3, r0
    4104:	3304      	adds	r3, #4
    4106:	6019      	str	r1, [r3, #0]
                break;
    4108:	e011      	b.n	412e <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    410a:	4b0d      	ldr	r3, [pc, #52]	; (4140 <getSlowDividerConfig+0x144>)
    410c:	69db      	ldr	r3, [r3, #28]
    410e:	f003 030f 	and.w	r3, r3, #15
    4112:	1c59      	adds	r1, r3, #1
    4114:	4809      	ldr	r0, [pc, #36]	; (413c <getSlowDividerConfig+0x140>)
    4116:	9a04      	ldr	r2, [sp, #16]
    4118:	4613      	mov	r3, r2
    411a:	005b      	lsls	r3, r3, #1
    411c:	4413      	add	r3, r2
    411e:	009b      	lsls	r3, r3, #2
    4120:	4403      	add	r3, r0
    4122:	3304      	adds	r3, #4
    4124:	6019      	str	r1, [r3, #0]
                break;
    4126:	e002      	b.n	412e <getSlowDividerConfig+0x132>
        }
    }
    4128:	bf00      	nop
    412a:	e000      	b.n	412e <getSlowDividerConfig+0x132>
                break;
    412c:	bf00      	nop

    return ReturnValue;
    412e:	9b05      	ldr	r3, [sp, #20]
}
    4130:	4618      	mov	r0, r3
    4132:	b006      	add	sp, #24
    4134:	4770      	bx	lr
    4136:	bf00      	nop
    4138:	1fff8b98 	.word	0x1fff8b98
    413c:	1fff8cac 	.word	0x1fff8cac
    4140:	40064000 	.word	0x40064000

00004144 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    4144:	b500      	push	{lr}
    4146:	b083      	sub	sp, #12
    4148:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    414a:	4b64      	ldr	r3, [pc, #400]	; (42dc <Clock_Ip_ClockInitializeObjects+0x198>)
    414c:	781b      	ldrb	r3, [r3, #0]
    414e:	f083 0301 	eor.w	r3, r3, #1
    4152:	b2db      	uxtb	r3, r3
    4154:	2b00      	cmp	r3, #0
    4156:	d05b      	beq.n	4210 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    4158:	4b60      	ldr	r3, [pc, #384]	; (42dc <Clock_Ip_ClockInitializeObjects+0x198>)
    415a:	2201      	movs	r2, #1
    415c:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    415e:	4b60      	ldr	r3, [pc, #384]	; (42e0 <Clock_Ip_ClockInitializeObjects+0x19c>)
    4160:	785b      	ldrb	r3, [r3, #1]
    4162:	461a      	mov	r2, r3
    4164:	4613      	mov	r3, r2
    4166:	009b      	lsls	r3, r3, #2
    4168:	4413      	add	r3, r2
    416a:	009b      	lsls	r3, r3, #2
    416c:	4a5d      	ldr	r2, [pc, #372]	; (42e4 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    416e:	4413      	add	r3, r2
    4170:	4a5d      	ldr	r2, [pc, #372]	; (42e8 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    4172:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    4174:	4b5d      	ldr	r3, [pc, #372]	; (42ec <Clock_Ip_ClockInitializeObjects+0x1a8>)
    4176:	785b      	ldrb	r3, [r3, #1]
    4178:	461a      	mov	r2, r3
    417a:	4613      	mov	r3, r2
    417c:	009b      	lsls	r3, r3, #2
    417e:	4413      	add	r3, r2
    4180:	009b      	lsls	r3, r3, #2
    4182:	4a5b      	ldr	r2, [pc, #364]	; (42f0 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    4184:	4413      	add	r3, r2
    4186:	4a5b      	ldr	r2, [pc, #364]	; (42f4 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    4188:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    418a:	4b5b      	ldr	r3, [pc, #364]	; (42f8 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    418c:	791b      	ldrb	r3, [r3, #4]
    418e:	461a      	mov	r2, r3
    4190:	4613      	mov	r3, r2
    4192:	005b      	lsls	r3, r3, #1
    4194:	4413      	add	r3, r2
    4196:	009b      	lsls	r3, r3, #2
    4198:	4a58      	ldr	r2, [pc, #352]	; (42fc <Clock_Ip_ClockInitializeObjects+0x1b8>)
    419a:	4413      	add	r3, r2
    419c:	4a58      	ldr	r2, [pc, #352]	; (4300 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    419e:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    41a0:	4b58      	ldr	r3, [pc, #352]	; (4304 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    41a2:	795b      	ldrb	r3, [r3, #5]
    41a4:	00db      	lsls	r3, r3, #3
    41a6:	4a58      	ldr	r2, [pc, #352]	; (4308 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    41a8:	4413      	add	r3, r2
    41aa:	4a58      	ldr	r2, [pc, #352]	; (430c <Clock_Ip_ClockInitializeObjects+0x1c8>)
    41ac:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    41ae:	4b55      	ldr	r3, [pc, #340]	; (4304 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    41b0:	79db      	ldrb	r3, [r3, #7]
    41b2:	00db      	lsls	r3, r3, #3
    41b4:	4a54      	ldr	r2, [pc, #336]	; (4308 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    41b6:	4413      	add	r3, r2
    41b8:	4a55      	ldr	r2, [pc, #340]	; (4310 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    41ba:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    41bc:	4b55      	ldr	r3, [pc, #340]	; (4314 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    41be:	799b      	ldrb	r3, [r3, #6]
    41c0:	009b      	lsls	r3, r3, #2
    41c2:	4a55      	ldr	r2, [pc, #340]	; (4318 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    41c4:	4413      	add	r3, r2
    41c6:	4a55      	ldr	r2, [pc, #340]	; (431c <Clock_Ip_ClockInitializeObjects+0x1d8>)
    41c8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    41ca:	4b52      	ldr	r3, [pc, #328]	; (4314 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    41cc:	7a1b      	ldrb	r3, [r3, #8]
    41ce:	009b      	lsls	r3, r3, #2
    41d0:	4a51      	ldr	r2, [pc, #324]	; (4318 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    41d2:	4413      	add	r3, r2
    41d4:	4a52      	ldr	r2, [pc, #328]	; (4320 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    41d6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    41d8:	4b4e      	ldr	r3, [pc, #312]	; (4314 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    41da:	7a5b      	ldrb	r3, [r3, #9]
    41dc:	009b      	lsls	r3, r3, #2
    41de:	4a4e      	ldr	r2, [pc, #312]	; (4318 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    41e0:	4413      	add	r3, r2
    41e2:	4a50      	ldr	r2, [pc, #320]	; (4324 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    41e4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    41e6:	4b4b      	ldr	r3, [pc, #300]	; (4314 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    41e8:	7adb      	ldrb	r3, [r3, #11]
    41ea:	009b      	lsls	r3, r3, #2
    41ec:	4a4a      	ldr	r2, [pc, #296]	; (4318 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    41ee:	4413      	add	r3, r2
    41f0:	4a4d      	ldr	r2, [pc, #308]	; (4328 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    41f2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    41f4:	4b47      	ldr	r3, [pc, #284]	; (4314 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    41f6:	7b1b      	ldrb	r3, [r3, #12]
    41f8:	009b      	lsls	r3, r3, #2
    41fa:	4a47      	ldr	r2, [pc, #284]	; (4318 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    41fc:	4413      	add	r3, r2
    41fe:	4a4b      	ldr	r2, [pc, #300]	; (432c <Clock_Ip_ClockInitializeObjects+0x1e8>)
    4200:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    4202:	4b44      	ldr	r3, [pc, #272]	; (4314 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4204:	7b9b      	ldrb	r3, [r3, #14]
    4206:	009b      	lsls	r3, r3, #2
    4208:	4a43      	ldr	r2, [pc, #268]	; (4318 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    420a:	4413      	add	r3, r2
    420c:	4a48      	ldr	r2, [pc, #288]	; (4330 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    420e:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    4210:	4b48      	ldr	r3, [pc, #288]	; (4334 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    4212:	781b      	ldrb	r3, [r3, #0]
    4214:	2b00      	cmp	r3, #0
    4216:	d002      	beq.n	421e <Clock_Ip_ClockInitializeObjects+0xda>
    4218:	9b01      	ldr	r3, [sp, #4]
    421a:	2b00      	cmp	r3, #0
    421c:	d003      	beq.n	4226 <Clock_Ip_ClockInitializeObjects+0xe2>
    421e:	4b46      	ldr	r3, [pc, #280]	; (4338 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    4220:	781b      	ldrb	r3, [r3, #0]
    4222:	2b00      	cmp	r3, #0
    4224:	d056      	beq.n	42d4 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    4226:	f7ff fc09 	bl	3a3c <getFircConfig>
    422a:	4603      	mov	r3, r0
    422c:	4a43      	ldr	r2, [pc, #268]	; (433c <Clock_Ip_ClockInitializeObjects+0x1f8>)
    422e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    4230:	f7ff fc60 	bl	3af4 <getSoscConfig>
    4234:	4603      	mov	r3, r0
    4236:	4a42      	ldr	r2, [pc, #264]	; (4340 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    4238:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    423a:	f7ff fca7 	bl	3b8c <getSpllConfig>
    423e:	4603      	mov	r3, r0
    4240:	4a40      	ldr	r2, [pc, #256]	; (4344 <Clock_Ip_ClockInitializeObjects+0x200>)
    4242:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    4244:	2019      	movs	r0, #25
    4246:	f7ff fcfb 	bl	3c40 <getSelectorConfig>
    424a:	4603      	mov	r3, r0
    424c:	4a3e      	ldr	r2, [pc, #248]	; (4348 <Clock_Ip_ClockInitializeObjects+0x204>)
    424e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    4250:	201a      	movs	r0, #26
    4252:	f7ff fcf5 	bl	3c40 <getSelectorConfig>
    4256:	4603      	mov	r3, r0
    4258:	4a3c      	ldr	r2, [pc, #240]	; (434c <Clock_Ip_ClockInitializeObjects+0x208>)
    425a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    425c:	201b      	movs	r0, #27
    425e:	f7ff fcef 	bl	3c40 <getSelectorConfig>
    4262:	4603      	mov	r3, r0
    4264:	4a3a      	ldr	r2, [pc, #232]	; (4350 <Clock_Ip_ClockInitializeObjects+0x20c>)
    4266:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    4268:	201d      	movs	r0, #29
    426a:	f7ff fd7b 	bl	3d64 <getCoreDividerConfig>
    426e:	4603      	mov	r3, r0
    4270:	4a38      	ldr	r2, [pc, #224]	; (4354 <Clock_Ip_ClockInitializeObjects+0x210>)
    4272:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    4274:	201e      	movs	r0, #30
    4276:	f7ff fd75 	bl	3d64 <getCoreDividerConfig>
    427a:	4603      	mov	r3, r0
    427c:	4a36      	ldr	r2, [pc, #216]	; (4358 <Clock_Ip_ClockInitializeObjects+0x214>)
    427e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    4280:	201f      	movs	r0, #31
    4282:	f7ff fd6f 	bl	3d64 <getCoreDividerConfig>
    4286:	4603      	mov	r3, r0
    4288:	4a34      	ldr	r2, [pc, #208]	; (435c <Clock_Ip_ClockInitializeObjects+0x218>)
    428a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    428c:	2021      	movs	r0, #33	; 0x21
    428e:	f7ff fe0f 	bl	3eb0 <getBusDividerConfig>
    4292:	4603      	mov	r3, r0
    4294:	4a32      	ldr	r2, [pc, #200]	; (4360 <Clock_Ip_ClockInitializeObjects+0x21c>)
    4296:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    4298:	2022      	movs	r0, #34	; 0x22
    429a:	f7ff fe09 	bl	3eb0 <getBusDividerConfig>
    429e:	4603      	mov	r3, r0
    42a0:	4a30      	ldr	r2, [pc, #192]	; (4364 <Clock_Ip_ClockInitializeObjects+0x220>)
    42a2:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    42a4:	2023      	movs	r0, #35	; 0x23
    42a6:	f7ff fe03 	bl	3eb0 <getBusDividerConfig>
    42aa:	4603      	mov	r3, r0
    42ac:	4a2e      	ldr	r2, [pc, #184]	; (4368 <Clock_Ip_ClockInitializeObjects+0x224>)
    42ae:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    42b0:	2025      	movs	r0, #37	; 0x25
    42b2:	f7ff fea3 	bl	3ffc <getSlowDividerConfig>
    42b6:	4603      	mov	r3, r0
    42b8:	4a2c      	ldr	r2, [pc, #176]	; (436c <Clock_Ip_ClockInitializeObjects+0x228>)
    42ba:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    42bc:	2026      	movs	r0, #38	; 0x26
    42be:	f7ff fe9d 	bl	3ffc <getSlowDividerConfig>
    42c2:	4603      	mov	r3, r0
    42c4:	4a2a      	ldr	r2, [pc, #168]	; (4370 <Clock_Ip_ClockInitializeObjects+0x22c>)
    42c6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    42c8:	2027      	movs	r0, #39	; 0x27
    42ca:	f7ff fe97 	bl	3ffc <getSlowDividerConfig>
    42ce:	4603      	mov	r3, r0
    42d0:	4a28      	ldr	r2, [pc, #160]	; (4374 <Clock_Ip_ClockInitializeObjects+0x230>)
    42d2:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    42d4:	bf00      	nop
    42d6:	b003      	add	sp, #12
    42d8:	f85d fb04 	ldr.w	pc, [sp], #4
    42dc:	1fff8cd0 	.word	0x1fff8cd0
    42e0:	00006cbc 	.word	0x00006cbc
    42e4:	00007308 	.word	0x00007308
    42e8:	1fff8b9c 	.word	0x1fff8b9c
    42ec:	00006c7c 	.word	0x00006c7c
    42f0:	00007250 	.word	0x00007250
    42f4:	1fff8ba0 	.word	0x1fff8ba0
    42f8:	00006c8c 	.word	0x00006c8c
    42fc:	000072bc 	.word	0x000072bc
    4300:	1fff8ba4 	.word	0x1fff8ba4
    4304:	00006ccc 	.word	0x00006ccc
    4308:	00007334 	.word	0x00007334
    430c:	1fff8ba8 	.word	0x1fff8ba8
    4310:	1fff8be4 	.word	0x1fff8be4
    4314:	00006c5c 	.word	0x00006c5c
    4318:	0000720c 	.word	0x0000720c
    431c:	1fff8bac 	.word	0x1fff8bac
    4320:	1fff8be8 	.word	0x1fff8be8
    4324:	1fff8bb0 	.word	0x1fff8bb0
    4328:	1fff8bec 	.word	0x1fff8bec
    432c:	1fff8bb4 	.word	0x1fff8bb4
    4330:	1fff8bf0 	.word	0x1fff8bf0
    4334:	1fff8b19 	.word	0x1fff8b19
    4338:	1fff8b10 	.word	0x1fff8b10
    433c:	1fff8bb8 	.word	0x1fff8bb8
    4340:	1fff8bbc 	.word	0x1fff8bbc
    4344:	1fff8bc0 	.word	0x1fff8bc0
    4348:	1fff8bc4 	.word	0x1fff8bc4
    434c:	1fff8bc8 	.word	0x1fff8bc8
    4350:	1fff8bf4 	.word	0x1fff8bf4
    4354:	1fff8bcc 	.word	0x1fff8bcc
    4358:	1fff8bd0 	.word	0x1fff8bd0
    435c:	1fff8bf8 	.word	0x1fff8bf8
    4360:	1fff8bd4 	.word	0x1fff8bd4
    4364:	1fff8bd8 	.word	0x1fff8bd8
    4368:	1fff8bfc 	.word	0x1fff8bfc
    436c:	1fff8bdc 	.word	0x1fff8bdc
    4370:	1fff8be0 	.word	0x1fff8be0
    4374:	1fff8c00 	.word	0x1fff8c00

00004378 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    4378:	b500      	push	{lr}
    437a:	b083      	sub	sp, #12
    437c:	9001      	str	r0, [sp, #4]
    437e:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    4380:	9b01      	ldr	r3, [sp, #4]
    4382:	2b03      	cmp	r3, #3
    4384:	f000 8090 	beq.w	44a8 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    4388:	9b01      	ldr	r3, [sp, #4]
    438a:	2b03      	cmp	r3, #3
    438c:	f200 80d3 	bhi.w	4536 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    4390:	9b01      	ldr	r3, [sp, #4]
    4392:	2b00      	cmp	r3, #0
    4394:	d040      	beq.n	4418 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    4396:	9b01      	ldr	r3, [sp, #4]
    4398:	3b01      	subs	r3, #1
    439a:	2b01      	cmp	r3, #1
    439c:	f200 80cb 	bhi.w	4536 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    43a0:	9b00      	ldr	r3, [sp, #0]
    43a2:	2b00      	cmp	r3, #0
    43a4:	f040 80c9 	bne.w	453a <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    43a8:	4b68      	ldr	r3, [pc, #416]	; (454c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    43aa:	2200      	movs	r2, #0
    43ac:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    43ae:	4b68      	ldr	r3, [pc, #416]	; (4550 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    43b0:	681b      	ldr	r3, [r3, #0]
    43b2:	685b      	ldr	r3, [r3, #4]
    43b4:	4a67      	ldr	r2, [pc, #412]	; (4554 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    43b6:	6812      	ldr	r2, [r2, #0]
    43b8:	4610      	mov	r0, r2
    43ba:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    43bc:	4b66      	ldr	r3, [pc, #408]	; (4558 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    43be:	681b      	ldr	r3, [r3, #0]
    43c0:	681b      	ldr	r3, [r3, #0]
    43c2:	4a66      	ldr	r2, [pc, #408]	; (455c <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    43c4:	6812      	ldr	r2, [r2, #0]
    43c6:	4610      	mov	r0, r2
    43c8:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    43ca:	4b65      	ldr	r3, [pc, #404]	; (4560 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    43cc:	681b      	ldr	r3, [r3, #0]
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	4a64      	ldr	r2, [pc, #400]	; (4564 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    43d2:	6812      	ldr	r2, [r2, #0]
    43d4:	4610      	mov	r0, r2
    43d6:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    43d8:	4b63      	ldr	r3, [pc, #396]	; (4568 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    43da:	681b      	ldr	r3, [r3, #0]
    43dc:	681b      	ldr	r3, [r3, #0]
    43de:	4a63      	ldr	r2, [pc, #396]	; (456c <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    43e0:	6812      	ldr	r2, [r2, #0]
    43e2:	4610      	mov	r0, r2
    43e4:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    43e6:	4b62      	ldr	r3, [pc, #392]	; (4570 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    43e8:	681b      	ldr	r3, [r3, #0]
    43ea:	691b      	ldr	r3, [r3, #16]
    43ec:	4a61      	ldr	r2, [pc, #388]	; (4574 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    43ee:	6812      	ldr	r2, [r2, #0]
    43f0:	6812      	ldr	r2, [r2, #0]
    43f2:	4610      	mov	r0, r2
    43f4:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    43f6:	4b60      	ldr	r3, [pc, #384]	; (4578 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    43f8:	681b      	ldr	r3, [r3, #0]
    43fa:	68db      	ldr	r3, [r3, #12]
    43fc:	4a5f      	ldr	r2, [pc, #380]	; (457c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    43fe:	6812      	ldr	r2, [r2, #0]
    4400:	6812      	ldr	r2, [r2, #0]
    4402:	4610      	mov	r0, r2
    4404:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    4406:	4b5e      	ldr	r3, [pc, #376]	; (4580 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4408:	681b      	ldr	r3, [r3, #0]
    440a:	689b      	ldr	r3, [r3, #8]
    440c:	4a5d      	ldr	r2, [pc, #372]	; (4584 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    440e:	6812      	ldr	r2, [r2, #0]
    4410:	6812      	ldr	r2, [r2, #0]
    4412:	4610      	mov	r0, r2
    4414:	4798      	blx	r3
            }
        }
        break;
    4416:	e090      	b.n	453a <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4418:	9b00      	ldr	r3, [sp, #0]
    441a:	2b02      	cmp	r3, #2
    441c:	f040 808f 	bne.w	453e <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4420:	4b4a      	ldr	r3, [pc, #296]	; (454c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4422:	2201      	movs	r2, #1
    4424:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4426:	4b56      	ldr	r3, [pc, #344]	; (4580 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4428:	681b      	ldr	r3, [r3, #0]
    442a:	685b      	ldr	r3, [r3, #4]
    442c:	4a55      	ldr	r2, [pc, #340]	; (4584 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    442e:	6812      	ldr	r2, [r2, #0]
    4430:	4610      	mov	r0, r2
    4432:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4434:	4b50      	ldr	r3, [pc, #320]	; (4578 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4436:	681b      	ldr	r3, [r3, #0]
    4438:	691b      	ldr	r3, [r3, #16]
    443a:	4a50      	ldr	r2, [pc, #320]	; (457c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    443c:	6812      	ldr	r2, [r2, #0]
    443e:	4610      	mov	r0, r2
    4440:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4442:	4b4d      	ldr	r3, [pc, #308]	; (4578 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4444:	681b      	ldr	r3, [r3, #0]
    4446:	689b      	ldr	r3, [r3, #8]
    4448:	4a4c      	ldr	r2, [pc, #304]	; (457c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    444a:	6812      	ldr	r2, [r2, #0]
    444c:	4610      	mov	r0, r2
    444e:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4450:	4b47      	ldr	r3, [pc, #284]	; (4570 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4452:	681b      	ldr	r3, [r3, #0]
    4454:	68db      	ldr	r3, [r3, #12]
    4456:	4a47      	ldr	r2, [pc, #284]	; (4574 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4458:	6812      	ldr	r2, [r2, #0]
    445a:	4610      	mov	r0, r2
    445c:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    445e:	4b44      	ldr	r3, [pc, #272]	; (4570 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4460:	681b      	ldr	r3, [r3, #0]
    4462:	689b      	ldr	r3, [r3, #8]
    4464:	4a43      	ldr	r2, [pc, #268]	; (4574 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4466:	6812      	ldr	r2, [r2, #0]
    4468:	6812      	ldr	r2, [r2, #0]
    446a:	4610      	mov	r0, r2
    446c:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    446e:	4b38      	ldr	r3, [pc, #224]	; (4550 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4470:	681b      	ldr	r3, [r3, #0]
    4472:	685b      	ldr	r3, [r3, #4]
    4474:	4a44      	ldr	r2, [pc, #272]	; (4588 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    4476:	6812      	ldr	r2, [r2, #0]
    4478:	4610      	mov	r0, r2
    447a:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    447c:	4b36      	ldr	r3, [pc, #216]	; (4558 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    447e:	681b      	ldr	r3, [r3, #0]
    4480:	681b      	ldr	r3, [r3, #0]
    4482:	4a42      	ldr	r2, [pc, #264]	; (458c <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    4484:	6812      	ldr	r2, [r2, #0]
    4486:	4610      	mov	r0, r2
    4488:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    448a:	4b35      	ldr	r3, [pc, #212]	; (4560 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    448c:	681b      	ldr	r3, [r3, #0]
    448e:	681b      	ldr	r3, [r3, #0]
    4490:	4a3f      	ldr	r2, [pc, #252]	; (4590 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    4492:	6812      	ldr	r2, [r2, #0]
    4494:	4610      	mov	r0, r2
    4496:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    4498:	4b33      	ldr	r3, [pc, #204]	; (4568 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    449a:	681b      	ldr	r3, [r3, #0]
    449c:	681b      	ldr	r3, [r3, #0]
    449e:	4a3d      	ldr	r2, [pc, #244]	; (4594 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    44a0:	6812      	ldr	r2, [r2, #0]
    44a2:	4610      	mov	r0, r2
    44a4:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    44a6:	e04a      	b.n	453e <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    44a8:	9b00      	ldr	r3, [sp, #0]
    44aa:	2b02      	cmp	r3, #2
    44ac:	d149      	bne.n	4542 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    44ae:	4b27      	ldr	r3, [pc, #156]	; (454c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    44b0:	2201      	movs	r2, #1
    44b2:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    44b4:	4b32      	ldr	r3, [pc, #200]	; (4580 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    44b6:	681b      	ldr	r3, [r3, #0]
    44b8:	685b      	ldr	r3, [r3, #4]
    44ba:	4a32      	ldr	r2, [pc, #200]	; (4584 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    44bc:	6812      	ldr	r2, [r2, #0]
    44be:	4610      	mov	r0, r2
    44c0:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    44c2:	4b2d      	ldr	r3, [pc, #180]	; (4578 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    44c4:	681b      	ldr	r3, [r3, #0]
    44c6:	691b      	ldr	r3, [r3, #16]
    44c8:	4a2c      	ldr	r2, [pc, #176]	; (457c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    44ca:	6812      	ldr	r2, [r2, #0]
    44cc:	4610      	mov	r0, r2
    44ce:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    44d0:	4b29      	ldr	r3, [pc, #164]	; (4578 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    44d2:	681b      	ldr	r3, [r3, #0]
    44d4:	689b      	ldr	r3, [r3, #8]
    44d6:	4a29      	ldr	r2, [pc, #164]	; (457c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    44d8:	6812      	ldr	r2, [r2, #0]
    44da:	4610      	mov	r0, r2
    44dc:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    44de:	4b24      	ldr	r3, [pc, #144]	; (4570 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    44e0:	681b      	ldr	r3, [r3, #0]
    44e2:	68db      	ldr	r3, [r3, #12]
    44e4:	4a23      	ldr	r2, [pc, #140]	; (4574 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    44e6:	6812      	ldr	r2, [r2, #0]
    44e8:	4610      	mov	r0, r2
    44ea:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    44ec:	4b20      	ldr	r3, [pc, #128]	; (4570 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    44ee:	681b      	ldr	r3, [r3, #0]
    44f0:	689b      	ldr	r3, [r3, #8]
    44f2:	4a20      	ldr	r2, [pc, #128]	; (4574 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    44f4:	6812      	ldr	r2, [r2, #0]
    44f6:	6812      	ldr	r2, [r2, #0]
    44f8:	4610      	mov	r0, r2
    44fa:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    44fc:	4b26      	ldr	r3, [pc, #152]	; (4598 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    44fe:	681b      	ldr	r3, [r3, #0]
    4500:	685b      	ldr	r3, [r3, #4]
    4502:	4a26      	ldr	r2, [pc, #152]	; (459c <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4504:	6812      	ldr	r2, [r2, #0]
    4506:	4610      	mov	r0, r2
    4508:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    450a:	4b25      	ldr	r3, [pc, #148]	; (45a0 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    450c:	681b      	ldr	r3, [r3, #0]
    450e:	681b      	ldr	r3, [r3, #0]
    4510:	4a24      	ldr	r2, [pc, #144]	; (45a4 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    4512:	6812      	ldr	r2, [r2, #0]
    4514:	4610      	mov	r0, r2
    4516:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    4518:	4b23      	ldr	r3, [pc, #140]	; (45a8 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    451a:	681b      	ldr	r3, [r3, #0]
    451c:	681b      	ldr	r3, [r3, #0]
    451e:	4a23      	ldr	r2, [pc, #140]	; (45ac <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    4520:	6812      	ldr	r2, [r2, #0]
    4522:	4610      	mov	r0, r2
    4524:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    4526:	4b22      	ldr	r3, [pc, #136]	; (45b0 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    4528:	681b      	ldr	r3, [r3, #0]
    452a:	681b      	ldr	r3, [r3, #0]
    452c:	4a21      	ldr	r2, [pc, #132]	; (45b4 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    452e:	6812      	ldr	r2, [r2, #0]
    4530:	4610      	mov	r0, r2
    4532:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4534:	e005      	b.n	4542 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    4536:	bf00      	nop
    4538:	e004      	b.n	4544 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    453a:	bf00      	nop
    453c:	e002      	b.n	4544 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    453e:	bf00      	nop
    4540:	e000      	b.n	4544 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4542:	bf00      	nop
    }

}
    4544:	bf00      	nop
    4546:	b003      	add	sp, #12
    4548:	f85d fb04 	ldr.w	pc, [sp], #4
    454c:	1fff8b19 	.word	0x1fff8b19
    4550:	1fff8ba8 	.word	0x1fff8ba8
    4554:	1fff8bc8 	.word	0x1fff8bc8
    4558:	1fff8bac 	.word	0x1fff8bac
    455c:	1fff8bd0 	.word	0x1fff8bd0
    4560:	1fff8bb0 	.word	0x1fff8bb0
    4564:	1fff8bd8 	.word	0x1fff8bd8
    4568:	1fff8bb4 	.word	0x1fff8bb4
    456c:	1fff8be0 	.word	0x1fff8be0
    4570:	1fff8b9c 	.word	0x1fff8b9c
    4574:	1fff8bc0 	.word	0x1fff8bc0
    4578:	1fff8ba0 	.word	0x1fff8ba0
    457c:	1fff8bbc 	.word	0x1fff8bbc
    4580:	1fff8ba4 	.word	0x1fff8ba4
    4584:	1fff8bb8 	.word	0x1fff8bb8
    4588:	1fff8bc4 	.word	0x1fff8bc4
    458c:	1fff8bcc 	.word	0x1fff8bcc
    4590:	1fff8bd4 	.word	0x1fff8bd4
    4594:	1fff8bdc 	.word	0x1fff8bdc
    4598:	1fff8be4 	.word	0x1fff8be4
    459c:	1fff8bf4 	.word	0x1fff8bf4
    45a0:	1fff8be8 	.word	0x1fff8be8
    45a4:	1fff8bf8 	.word	0x1fff8bf8
    45a8:	1fff8bec 	.word	0x1fff8bec
    45ac:	1fff8bfc 	.word	0x1fff8bfc
    45b0:	1fff8bf0 	.word	0x1fff8bf0
    45b4:	1fff8c00 	.word	0x1fff8c00

000045b8 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    45b8:	b500      	push	{lr}
    45ba:	b083      	sub	sp, #12
    45bc:	9001      	str	r0, [sp, #4]
    45be:	9100      	str	r1, [sp, #0]
    switch(Command)
    45c0:	9b00      	ldr	r3, [sp, #0]
    45c2:	2b04      	cmp	r3, #4
    45c4:	d010      	beq.n	45e8 <Clock_Ip_Command+0x30>
    45c6:	9b00      	ldr	r3, [sp, #0]
    45c8:	2b04      	cmp	r3, #4
    45ca:	d811      	bhi.n	45f0 <Clock_Ip_Command+0x38>
    45cc:	9b00      	ldr	r3, [sp, #0]
    45ce:	2b01      	cmp	r3, #1
    45d0:	d006      	beq.n	45e0 <Clock_Ip_Command+0x28>
    45d2:	9b00      	ldr	r3, [sp, #0]
    45d4:	2b02      	cmp	r3, #2
    45d6:	d10b      	bne.n	45f0 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    45d8:	9801      	ldr	r0, [sp, #4]
    45da:	f7ff fdb3 	bl	4144 <Clock_Ip_ClockInitializeObjects>
            break;
    45de:	e008      	b.n	45f2 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    45e0:	9801      	ldr	r0, [sp, #4]
    45e2:	f7ff f9db 	bl	399c <Clock_Ip_SpecificPlatformInitClock>
            break;
    45e6:	e004      	b.n	45f2 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    45e8:	9801      	ldr	r0, [sp, #4]
    45ea:	f7ff f8ed 	bl	37c8 <DisableSafeClock>
            break;
    45ee:	e000      	b.n	45f2 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    45f0:	bf00      	nop
    }
}
    45f2:	bf00      	nop
    45f4:	b003      	add	sp, #12
    45f6:	f85d fb04 	ldr.w	pc, [sp], #4
    45fa:	bf00      	nop

000045fc <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    45fc:	b500      	push	{lr}
    45fe:	b085      	sub	sp, #20
    4600:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    4602:	4a20      	ldr	r2, [pc, #128]	; (4684 <Mcu_Init+0x88>)
    4604:	9b01      	ldr	r3, [sp, #4]
    4606:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4608:	2300      	movs	r3, #0
    460a:	9303      	str	r3, [sp, #12]
    460c:	e010      	b.n	4630 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    460e:	4b1d      	ldr	r3, [pc, #116]	; (4684 <Mcu_Init+0x88>)
    4610:	681b      	ldr	r3, [r3, #0]
    4612:	6919      	ldr	r1, [r3, #16]
    4614:	9a03      	ldr	r2, [sp, #12]
    4616:	4613      	mov	r3, r2
    4618:	005b      	lsls	r3, r3, #1
    461a:	4413      	add	r3, r2
    461c:	009b      	lsls	r3, r3, #2
    461e:	440b      	add	r3, r1
    4620:	681b      	ldr	r3, [r3, #0]
    4622:	9a03      	ldr	r2, [sp, #12]
    4624:	b2d1      	uxtb	r1, r2
    4626:	4a18      	ldr	r2, [pc, #96]	; (4688 <Mcu_Init+0x8c>)
    4628:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    462a:	9b03      	ldr	r3, [sp, #12]
    462c:	3301      	adds	r3, #1
    462e:	9303      	str	r3, [sp, #12]
    4630:	4b14      	ldr	r3, [pc, #80]	; (4684 <Mcu_Init+0x88>)
    4632:	681b      	ldr	r3, [r3, #0]
    4634:	689b      	ldr	r3, [r3, #8]
    4636:	9a03      	ldr	r2, [sp, #12]
    4638:	429a      	cmp	r2, r3
    463a:	d3e8      	bcc.n	460e <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    463c:	2300      	movs	r3, #0
    463e:	9303      	str	r3, [sp, #12]
    4640:	e010      	b.n	4664 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    4642:	4b10      	ldr	r3, [pc, #64]	; (4684 <Mcu_Init+0x88>)
    4644:	681b      	ldr	r3, [r3, #0]
    4646:	6959      	ldr	r1, [r3, #20]
    4648:	9a03      	ldr	r2, [sp, #12]
    464a:	4613      	mov	r3, r2
    464c:	01db      	lsls	r3, r3, #7
    464e:	1a9b      	subs	r3, r3, r2
    4650:	00db      	lsls	r3, r3, #3
    4652:	440b      	add	r3, r1
    4654:	681b      	ldr	r3, [r3, #0]
    4656:	9a03      	ldr	r2, [sp, #12]
    4658:	b2d1      	uxtb	r1, r2
    465a:	4a0c      	ldr	r2, [pc, #48]	; (468c <Mcu_Init+0x90>)
    465c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    465e:	9b03      	ldr	r3, [sp, #12]
    4660:	3301      	adds	r3, #1
    4662:	9303      	str	r3, [sp, #12]
    4664:	4b07      	ldr	r3, [pc, #28]	; (4684 <Mcu_Init+0x88>)
    4666:	681b      	ldr	r3, [r3, #0]
    4668:	68db      	ldr	r3, [r3, #12]
    466a:	9a03      	ldr	r2, [sp, #12]
    466c:	429a      	cmp	r2, r3
    466e:	d3e8      	bcc.n	4642 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    4670:	4b04      	ldr	r3, [pc, #16]	; (4684 <Mcu_Init+0x88>)
    4672:	681b      	ldr	r3, [r3, #0]
    4674:	699b      	ldr	r3, [r3, #24]
    4676:	4618      	mov	r0, r3
    4678:	f000 f89a 	bl	47b0 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    467c:	bf00      	nop
    467e:	b005      	add	sp, #20
    4680:	f85d fb04 	ldr.w	pc, [sp], #4
    4684:	1fff8cdc 	.word	0x1fff8cdc
    4688:	1fff8cd8 	.word	0x1fff8cd8
    468c:	1fff8cd4 	.word	0x1fff8cd4

00004690 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    4690:	b084      	sub	sp, #16
    4692:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    4694:	2301      	movs	r3, #1
    4696:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    469a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    469e:	4618      	mov	r0, r3
    46a0:	b004      	add	sp, #16
    46a2:	4770      	bx	lr

000046a4 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    46a4:	b500      	push	{lr}
    46a6:	b085      	sub	sp, #20
    46a8:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    46aa:	4a0e      	ldr	r2, [pc, #56]	; (46e4 <Mcu_InitClock+0x40>)
    46ac:	9b01      	ldr	r3, [sp, #4]
    46ae:	4413      	add	r3, r2
    46b0:	781b      	ldrb	r3, [r3, #0]
    46b2:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    46b6:	4b0c      	ldr	r3, [pc, #48]	; (46e8 <Mcu_InitClock+0x44>)
    46b8:	681b      	ldr	r3, [r3, #0]
    46ba:	6959      	ldr	r1, [r3, #20]
    46bc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    46c0:	4613      	mov	r3, r2
    46c2:	01db      	lsls	r3, r3, #7
    46c4:	1a9b      	subs	r3, r3, r2
    46c6:	00db      	lsls	r3, r3, #3
    46c8:	440b      	add	r3, r1
    46ca:	4618      	mov	r0, r3
    46cc:	f000 f87a 	bl	47c4 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    46d0:	2300      	movs	r3, #0
    46d2:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    46d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    46da:	4618      	mov	r0, r3
    46dc:	b005      	add	sp, #20
    46de:	f85d fb04 	ldr.w	pc, [sp], #4
    46e2:	bf00      	nop
    46e4:	1fff8cd4 	.word	0x1fff8cd4
    46e8:	1fff8cdc 	.word	0x1fff8cdc

000046ec <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    46ec:	b500      	push	{lr}
    46ee:	b085      	sub	sp, #20
    46f0:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    46f2:	4a0d      	ldr	r2, [pc, #52]	; (4728 <Mcu_SetMode+0x3c>)
    46f4:	9b01      	ldr	r3, [sp, #4]
    46f6:	4413      	add	r3, r2
    46f8:	781b      	ldrb	r3, [r3, #0]
    46fa:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    46fe:	f001 f8bf 	bl	5880 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    4702:	4b0a      	ldr	r3, [pc, #40]	; (472c <Mcu_SetMode+0x40>)
    4704:	681b      	ldr	r3, [r3, #0]
    4706:	6919      	ldr	r1, [r3, #16]
    4708:	f89d 200f 	ldrb.w	r2, [sp, #15]
    470c:	4613      	mov	r3, r2
    470e:	005b      	lsls	r3, r3, #1
    4710:	4413      	add	r3, r2
    4712:	009b      	lsls	r3, r3, #2
    4714:	440b      	add	r3, r1
    4716:	4618      	mov	r0, r3
    4718:	f000 f87b 	bl	4812 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    471c:	f001 f8dc 	bl	58d8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4720:	bf00      	nop
    4722:	b005      	add	sp, #20
    4724:	f85d fb04 	ldr.w	pc, [sp], #4
    4728:	1fff8cd8 	.word	0x1fff8cd8
    472c:	1fff8cdc 	.word	0x1fff8cdc

00004730 <Mcu_DistributePllClock>:
*
* @implements Mcu_DistributePllClock_Activity
*
*/
Std_ReturnType Mcu_DistributePllClock(void)
{
    4730:	b500      	push	{lr}
    4732:	b083      	sub	sp, #12
#endif /* (MCU_PARAM_CHECK == STD_ON) */

            /* Set the PLL as System Clock if it is locked and enabled by the current mode.
            If the PLL0 is already selected as system clock, then this function will return without
            doing anything. */
            Mcu_Ipw_DistributePllClock();
    4734:	f000 f850 	bl	47d8 <Mcu_Ipw_DistributePllClock>

            PllStatus = (Std_ReturnType)E_OK;
    4738:	2300      	movs	r3, #0
    473a:	f88d 3007 	strb.w	r3, [sp, #7]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_DISTRIBUTEPLLCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    473e:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
    4742:	4618      	mov	r0, r3
    4744:	b003      	add	sp, #12
    4746:	f85d fb04 	ldr.w	pc, [sp], #4

0000474a <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    474a:	b500      	push	{lr}
    474c:	b083      	sub	sp, #12

    /* If the PLL is not used in the configuration, return MCU_PLL_STATUS_UNDEFINED. */
#if (MCU_NO_PLL == STD_OFF)
        /* Get status of the PLL (if enabled in current mode).
           At this point, the return value can be only MCU_PLL_LOCKED or MCU_PLL_UNLOCKED. */
        PllStatus = Mcu_Ipw_GetPllStatus();
    474e:	f000 f848 	bl	47e2 <Mcu_Ipw_GetPllStatus>
    4752:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    4754:	9b01      	ldr	r3, [sp, #4]
}
    4756:	4618      	mov	r0, r3
    4758:	b003      	add	sp, #12
    475a:	f85d fb04 	ldr.w	pc, [sp], #4

0000475e <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    475e:	b500      	push	{lr}
    4760:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    4762:	f000 f860 	bl	4826 <Mcu_Ipw_GetResetReason>
    4766:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    4768:	9b01      	ldr	r3, [sp, #4]
}
    476a:	4618      	mov	r0, r3
    476c:	b003      	add	sp, #12
    476e:	f85d fb04 	ldr.w	pc, [sp], #4

00004772 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    4772:	b500      	push	{lr}
    4774:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    4776:	f000 f85c 	bl	4832 <Mcu_Ipw_GetResetRawValue>
    477a:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    477c:	9b01      	ldr	r3, [sp, #4]
}
    477e:	4618      	mov	r0, r3
    4780:	b003      	add	sp, #12
    4782:	f85d fb04 	ldr.w	pc, [sp], #4

00004786 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4786:	b500      	push	{lr}
    4788:	b083      	sub	sp, #12
    478a:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    478c:	9801      	ldr	r0, [sp, #4]
    478e:	f000 f856 	bl	483e <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    4792:	bf00      	nop
    4794:	b003      	add	sp, #12
    4796:	f85d fb04 	ldr.w	pc, [sp], #4

0000479a <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    479a:	b082      	sub	sp, #8
    479c:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    479e:	4b03      	ldr	r3, [pc, #12]	; (47ac <Mcu_ClkSrcFailureNotification+0x12>)
    47a0:	681b      	ldr	r3, [r3, #0]
    47a2:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    47a4:	bf00      	nop
    47a6:	b002      	add	sp, #8
    47a8:	4770      	bx	lr
    47aa:	bf00      	nop
    47ac:	1fff8cdc 	.word	0x1fff8cdc

000047b0 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    47b0:	b500      	push	{lr}
    47b2:	b083      	sub	sp, #12
    47b4:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    47b6:	9801      	ldr	r0, [sp, #4]
    47b8:	f000 f89e 	bl	48f8 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    47bc:	bf00      	nop
    47be:	b003      	add	sp, #12
    47c0:	f85d fb04 	ldr.w	pc, [sp], #4

000047c4 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    47c4:	b500      	push	{lr}
    47c6:	b083      	sub	sp, #12
    47c8:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    47ca:	9801      	ldr	r0, [sp, #4]
    47cc:	f7fc fc5a 	bl	1084 <Clock_Ip_InitClock>
}
    47d0:	bf00      	nop
    47d2:	b003      	add	sp, #12
    47d4:	f85d fb04 	ldr.w	pc, [sp], #4

000047d8 <Mcu_Ipw_DistributePllClock>:
*
* @return           void
*
*/
void Mcu_Ipw_DistributePllClock(void)
{
    47d8:	b508      	push	{r3, lr}
    Clock_Ip_DistributePll();
    47da:	f7fd f839 	bl	1850 <Clock_Ip_DistributePll>
}
    47de:	bf00      	nop
    47e0:	bd08      	pop	{r3, pc}

000047e2 <Mcu_Ipw_GetPllStatus>:
* @retval           MCU_PLL_LOCKED             PLL is locked.
* @retval           MCU_PLL_UNLOCKED           PLL is unlocked.
*
*/
Mcu_PllStatusType Mcu_Ipw_GetPllStatus(void)
{
    47e2:	b500      	push	{lr}
    47e4:	b083      	sub	sp, #12
    /* PLL status variable. */
    Mcu_PllStatusType PllStatus;

    switch(Clock_Ip_GetPllStatus())
    47e6:	f7fc ffaf 	bl	1748 <Clock_Ip_GetPllStatus>
    47ea:	4603      	mov	r3, r0
    47ec:	2b00      	cmp	r3, #0
    47ee:	d002      	beq.n	47f6 <Mcu_Ipw_GetPllStatus+0x14>
    47f0:	2b01      	cmp	r3, #1
    47f2:	d003      	beq.n	47fc <Mcu_Ipw_GetPllStatus+0x1a>
    47f4:	e005      	b.n	4802 <Mcu_Ipw_GetPllStatus+0x20>
    {
        case CLOCK_IP_PLL_LOCKED:
        {
            PllStatus = MCU_PLL_LOCKED;
    47f6:	2300      	movs	r3, #0
    47f8:	9301      	str	r3, [sp, #4]
        }
        break;
    47fa:	e005      	b.n	4808 <Mcu_Ipw_GetPllStatus+0x26>
        case CLOCK_IP_PLL_UNLOCKED:
        {
            PllStatus = MCU_PLL_UNLOCKED;
    47fc:	2301      	movs	r3, #1
    47fe:	9301      	str	r3, [sp, #4]
        }
        break;
    4800:	e002      	b.n	4808 <Mcu_Ipw_GetPllStatus+0x26>
        case CLOCK_IP_PLL_STATUS_UNDEFINED:
        default:
        {
            PllStatus = MCU_PLL_STATUS_UNDEFINED;
    4802:	2302      	movs	r3, #2
    4804:	9301      	str	r3, [sp, #4]
        }
        break;
    4806:	bf00      	nop
    }

    /* Return the PLL status. */
    return PllStatus;
    4808:	9b01      	ldr	r3, [sp, #4]
}
    480a:	4618      	mov	r0, r3
    480c:	b003      	add	sp, #12
    480e:	f85d fb04 	ldr.w	pc, [sp], #4

00004812 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    4812:	b500      	push	{lr}
    4814:	b083      	sub	sp, #12
    4816:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    4818:	9801      	ldr	r0, [sp, #4]
    481a:	f000 f81f 	bl	485c <Power_Ip_SetMode>
}
    481e:	bf00      	nop
    4820:	b003      	add	sp, #12
    4822:	f85d fb04 	ldr.w	pc, [sp], #4

00004826 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    4826:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    4828:	f000 f84e 	bl	48c8 <Power_Ip_GetResetReason>
    482c:	4603      	mov	r3, r0
}
    482e:	4618      	mov	r0, r3
    4830:	bd08      	pop	{r3, pc}

00004832 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    4832:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    4834:	f000 f856 	bl	48e4 <Power_Ip_GetResetRawValue>
    4838:	4603      	mov	r3, r0
}
    483a:	4618      	mov	r0, r3
    483c:	bd08      	pop	{r3, pc}

0000483e <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    483e:	b500      	push	{lr}
    4840:	b083      	sub	sp, #12
    4842:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    4844:	9b01      	ldr	r3, [sp, #4]
    4846:	2b00      	cmp	r3, #0
    4848:	d102      	bne.n	4850 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    484a:	f000 f86b 	bl	4924 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    484e:	e001      	b.n	4854 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    4850:	f000 f86d 	bl	492e <Power_Ip_EnableSleepOnExit>
}
    4854:	bf00      	nop
    4856:	b003      	add	sp, #12
    4858:	f85d fb04 	ldr.w	pc, [sp], #4

0000485c <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    485c:	b500      	push	{lr}
    485e:	b085      	sub	sp, #20
    4860:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    4862:	9b01      	ldr	r3, [sp, #4]
    4864:	685b      	ldr	r3, [r3, #4]
    4866:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    4868:	9802      	ldr	r0, [sp, #8]
    486a:	f000 f9f5 	bl	4c58 <Power_Ip_SMC_ModeCheckEntry>
    486e:	4603      	mov	r3, r0
    4870:	2b00      	cmp	r3, #0
    4872:	d002      	beq.n	487a <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4874:	2301      	movs	r3, #1
    4876:	9303      	str	r3, [sp, #12]
    4878:	e003      	b.n	4882 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    487a:	9801      	ldr	r0, [sp, #4]
    487c:	f000 fa1e 	bl	4cbc <Power_Ip_SMC_ModeConfig>
    4880:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    4882:	9b03      	ldr	r3, [sp, #12]
    4884:	2b01      	cmp	r3, #1
    4886:	d103      	bne.n	4890 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4888:	21ff      	movs	r1, #255	; 0xff
    488a:	2003      	movs	r0, #3
    488c:	f000 f8f4 	bl	4a78 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    4890:	bf00      	nop
    4892:	b005      	add	sp, #20
    4894:	f85d fb04 	ldr.w	pc, [sp], #4

00004898 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    4898:	b084      	sub	sp, #16
    489a:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    489c:	230c      	movs	r3, #12
    489e:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    48a0:	4a08      	ldr	r2, [pc, #32]	; (48c4 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    48a2:	9b01      	ldr	r3, [sp, #4]
    48a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    48a8:	2b0e      	cmp	r3, #14
    48aa:	d805      	bhi.n	48b8 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    48ac:	4a05      	ldr	r2, [pc, #20]	; (48c4 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    48ae:	9b01      	ldr	r3, [sp, #4]
    48b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    48b4:	9303      	str	r3, [sp, #12]
    48b6:	e001      	b.n	48bc <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    48b8:	230c      	movs	r3, #12
    48ba:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    48bc:	9b03      	ldr	r3, [sp, #12]
}
    48be:	4618      	mov	r0, r3
    48c0:	b004      	add	sp, #16
    48c2:	4770      	bx	lr
    48c4:	000073a8 	.word	0x000073a8

000048c8 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    48c8:	b500      	push	{lr}
    48ca:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    48cc:	f000 f940 	bl	4b50 <Power_Ip_RCM_GetResetReason>
    48d0:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    48d2:	9801      	ldr	r0, [sp, #4]
    48d4:	f7ff ffe0 	bl	4898 <Power_Ip_ConvertIntergeToResetType>
    48d8:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    48da:	9b00      	ldr	r3, [sp, #0]
}
    48dc:	4618      	mov	r0, r3
    48de:	b003      	add	sp, #12
    48e0:	f85d fb04 	ldr.w	pc, [sp], #4

000048e4 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    48e4:	b500      	push	{lr}
    48e6:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    48e8:	f000 f98a 	bl	4c00 <Power_Ip_RCM_GetResetRawValue>
    48ec:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    48ee:	9b01      	ldr	r3, [sp, #4]
}
    48f0:	4618      	mov	r0, r3
    48f2:	b003      	add	sp, #12
    48f4:	f85d fb04 	ldr.w	pc, [sp], #4

000048f8 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    48f8:	b500      	push	{lr}
    48fa:	b083      	sub	sp, #12
    48fc:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    48fe:	9b01      	ldr	r3, [sp, #4]
    4900:	681b      	ldr	r3, [r3, #0]
    4902:	4618      	mov	r0, r3
    4904:	f000 f90e 	bl	4b24 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    4908:	9b01      	ldr	r3, [sp, #4]
    490a:	685b      	ldr	r3, [r3, #4]
    490c:	4618      	mov	r0, r3
    490e:	f000 f86d 	bl	49ec <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    4912:	9b01      	ldr	r3, [sp, #4]
    4914:	689b      	ldr	r3, [r3, #8]
    4916:	4618      	mov	r0, r3
    4918:	f000 f990 	bl	4c3c <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    491c:	bf00      	nop
    491e:	b003      	add	sp, #12
    4920:	f85d fb04 	ldr.w	pc, [sp], #4

00004924 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    4924:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    4926:	f000 f811 	bl	494c <Power_Ip_CM4_DisableSleepOnExit>
}
    492a:	bf00      	nop
    492c:	bd08      	pop	{r3, pc}

0000492e <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    492e:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    4930:	f000 f820 	bl	4974 <Power_Ip_CM4_EnableSleepOnExit>
}
    4934:	bf00      	nop
    4936:	bd08      	pop	{r3, pc}

00004938 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    4938:	b082      	sub	sp, #8
    493a:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    493c:	4a02      	ldr	r2, [pc, #8]	; (4948 <Power_Ip_InstallNotificationsCallback+0x10>)
    493e:	9b01      	ldr	r3, [sp, #4]
    4940:	6013      	str	r3, [r2, #0]
}
    4942:	bf00      	nop
    4944:	b002      	add	sp, #8
    4946:	4770      	bx	lr
    4948:	1fff8b1c 	.word	0x1fff8b1c

0000494c <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    494c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    494e:	2300      	movs	r3, #0
    4950:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4952:	4b07      	ldr	r3, [pc, #28]	; (4970 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4954:	681b      	ldr	r3, [r3, #0]
    4956:	685b      	ldr	r3, [r3, #4]
    4958:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    495a:	9b01      	ldr	r3, [sp, #4]
    495c:	f023 0302 	bic.w	r3, r3, #2
    4960:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4962:	4b03      	ldr	r3, [pc, #12]	; (4970 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4964:	681b      	ldr	r3, [r3, #0]
    4966:	9a01      	ldr	r2, [sp, #4]
    4968:	605a      	str	r2, [r3, #4]
}
    496a:	bf00      	nop
    496c:	b002      	add	sp, #8
    496e:	4770      	bx	lr
    4970:	1fff8b20 	.word	0x1fff8b20

00004974 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    4974:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4976:	2300      	movs	r3, #0
    4978:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    497a:	4b07      	ldr	r3, [pc, #28]	; (4998 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    497c:	681b      	ldr	r3, [r3, #0]
    497e:	685b      	ldr	r3, [r3, #4]
    4980:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    4982:	9b01      	ldr	r3, [sp, #4]
    4984:	f043 0302 	orr.w	r3, r3, #2
    4988:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    498a:	4b03      	ldr	r3, [pc, #12]	; (4998 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    498c:	681b      	ldr	r3, [r3, #0]
    498e:	9a01      	ldr	r2, [sp, #4]
    4990:	605a      	str	r2, [r3, #4]
}
    4992:	bf00      	nop
    4994:	b002      	add	sp, #8
    4996:	4770      	bx	lr
    4998:	1fff8b20 	.word	0x1fff8b20

0000499c <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    499c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    499e:	2300      	movs	r3, #0
    49a0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    49a2:	4b07      	ldr	r3, [pc, #28]	; (49c0 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    49a4:	681b      	ldr	r3, [r3, #0]
    49a6:	685b      	ldr	r3, [r3, #4]
    49a8:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    49aa:	9b01      	ldr	r3, [sp, #4]
    49ac:	f043 0304 	orr.w	r3, r3, #4
    49b0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    49b2:	4b03      	ldr	r3, [pc, #12]	; (49c0 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    49b4:	681b      	ldr	r3, [r3, #0]
    49b6:	9a01      	ldr	r2, [sp, #4]
    49b8:	605a      	str	r2, [r3, #4]
}
    49ba:	bf00      	nop
    49bc:	b002      	add	sp, #8
    49be:	4770      	bx	lr
    49c0:	1fff8b20 	.word	0x1fff8b20

000049c4 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    49c4:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    49c6:	2300      	movs	r3, #0
    49c8:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    49ca:	4b07      	ldr	r3, [pc, #28]	; (49e8 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    49cc:	681b      	ldr	r3, [r3, #0]
    49ce:	685b      	ldr	r3, [r3, #4]
    49d0:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    49d2:	9b01      	ldr	r3, [sp, #4]
    49d4:	f023 0304 	bic.w	r3, r3, #4
    49d8:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    49da:	4b03      	ldr	r3, [pc, #12]	; (49e8 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    49dc:	681b      	ldr	r3, [r3, #0]
    49de:	9a01      	ldr	r2, [sp, #4]
    49e0:	605a      	str	r2, [r3, #4]
}
    49e2:	bf00      	nop
    49e4:	b002      	add	sp, #8
    49e6:	4770      	bx	lr
    49e8:	1fff8b20 	.word	0x1fff8b20

000049ec <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    49ec:	b084      	sub	sp, #16
    49ee:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    49f0:	4b20      	ldr	r3, [pc, #128]	; (4a74 <Power_Ip_PMC_PowerInit+0x88>)
    49f2:	781b      	ldrb	r3, [r3, #0]
    49f4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    49f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    49fc:	f003 030f 	and.w	r3, r3, #15
    4a00:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    4a04:	9b01      	ldr	r3, [sp, #4]
    4a06:	781a      	ldrb	r2, [r3, #0]
    4a08:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a0c:	4313      	orrs	r3, r2
    4a0e:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    4a12:	4a18      	ldr	r2, [pc, #96]	; (4a74 <Power_Ip_PMC_PowerInit+0x88>)
    4a14:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a18:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    4a1a:	4b16      	ldr	r3, [pc, #88]	; (4a74 <Power_Ip_PMC_PowerInit+0x88>)
    4a1c:	785b      	ldrb	r3, [r3, #1]
    4a1e:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    4a22:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a26:	f003 031f 	and.w	r3, r3, #31
    4a2a:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    4a2e:	9b01      	ldr	r3, [sp, #4]
    4a30:	785a      	ldrb	r2, [r3, #1]
    4a32:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a36:	4313      	orrs	r3, r2
    4a38:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    4a3c:	4a0d      	ldr	r2, [pc, #52]	; (4a74 <Power_Ip_PMC_PowerInit+0x88>)
    4a3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a42:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    4a44:	4b0b      	ldr	r3, [pc, #44]	; (4a74 <Power_Ip_PMC_PowerInit+0x88>)
    4a46:	789b      	ldrb	r3, [r3, #2]
    4a48:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    4a4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a50:	f003 0338 	and.w	r3, r3, #56	; 0x38
    4a54:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    4a58:	9b01      	ldr	r3, [sp, #4]
    4a5a:	789a      	ldrb	r2, [r3, #2]
    4a5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a60:	4313      	orrs	r3, r2
    4a62:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    4a66:	4a03      	ldr	r2, [pc, #12]	; (4a74 <Power_Ip_PMC_PowerInit+0x88>)
    4a68:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a6c:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    4a6e:	bf00      	nop
    4a70:	b004      	add	sp, #16
    4a72:	4770      	bx	lr
    4a74:	4007d000 	.word	0x4007d000

00004a78 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    4a78:	b500      	push	{lr}
    4a7a:	b083      	sub	sp, #12
    4a7c:	9001      	str	r0, [sp, #4]
    4a7e:	460b      	mov	r3, r1
    4a80:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    4a84:	4b05      	ldr	r3, [pc, #20]	; (4a9c <Power_Ip_ReportPowerErrors+0x24>)
    4a86:	681b      	ldr	r3, [r3, #0]
    4a88:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4a8c:	4611      	mov	r1, r2
    4a8e:	9801      	ldr	r0, [sp, #4]
    4a90:	4798      	blx	r3
}
    4a92:	bf00      	nop
    4a94:	b003      	add	sp, #12
    4a96:	f85d fb04 	ldr.w	pc, [sp], #4
    4a9a:	bf00      	nop
    4a9c:	1fff8b1c 	.word	0x1fff8b1c

00004aa0 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    4aa0:	b082      	sub	sp, #8
    4aa2:	9001      	str	r0, [sp, #4]
    4aa4:	460b      	mov	r3, r1
    4aa6:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    4aaa:	bf00      	nop
    4aac:	b002      	add	sp, #8
    4aae:	4770      	bx	lr

00004ab0 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    4ab0:	b500      	push	{lr}
    4ab2:	b085      	sub	sp, #20
    4ab4:	9003      	str	r0, [sp, #12]
    4ab6:	9102      	str	r1, [sp, #8]
    4ab8:	9201      	str	r2, [sp, #4]
    4aba:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    4abc:	2000      	movs	r0, #0
    4abe:	f7fc f810 	bl	ae2 <OsIf_GetCounter>
    4ac2:	4602      	mov	r2, r0
    4ac4:	9b03      	ldr	r3, [sp, #12]
    4ac6:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    4ac8:	9b02      	ldr	r3, [sp, #8]
    4aca:	2200      	movs	r2, #0
    4acc:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    4ace:	2100      	movs	r1, #0
    4ad0:	9800      	ldr	r0, [sp, #0]
    4ad2:	f7fc f852 	bl	b7a <OsIf_MicrosToTicks>
    4ad6:	4602      	mov	r2, r0
    4ad8:	9b01      	ldr	r3, [sp, #4]
    4ada:	601a      	str	r2, [r3, #0]
}
    4adc:	bf00      	nop
    4ade:	b005      	add	sp, #20
    4ae0:	f85d fb04 	ldr.w	pc, [sp], #4

00004ae4 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    4ae4:	b500      	push	{lr}
    4ae6:	b087      	sub	sp, #28
    4ae8:	9003      	str	r0, [sp, #12]
    4aea:	9102      	str	r1, [sp, #8]
    4aec:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    4aee:	2300      	movs	r3, #0
    4af0:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    4af4:	2100      	movs	r1, #0
    4af6:	9803      	ldr	r0, [sp, #12]
    4af8:	f7fc f80c 	bl	b14 <OsIf_GetElapsed>
    4afc:	4602      	mov	r2, r0
    4afe:	9b02      	ldr	r3, [sp, #8]
    4b00:	681b      	ldr	r3, [r3, #0]
    4b02:	441a      	add	r2, r3
    4b04:	9b02      	ldr	r3, [sp, #8]
    4b06:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    4b08:	9b02      	ldr	r3, [sp, #8]
    4b0a:	681b      	ldr	r3, [r3, #0]
    4b0c:	9a01      	ldr	r2, [sp, #4]
    4b0e:	429a      	cmp	r2, r3
    4b10:	d802      	bhi.n	4b18 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    4b12:	2301      	movs	r3, #1
    4b14:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    4b18:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    4b1c:	4618      	mov	r0, r3
    4b1e:	b007      	add	sp, #28
    4b20:	f85d fb04 	ldr.w	pc, [sp], #4

00004b24 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    4b24:	b082      	sub	sp, #8
    4b26:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    4b28:	9b01      	ldr	r3, [sp, #4]
    4b2a:	681a      	ldr	r2, [r3, #0]
    4b2c:	4907      	ldr	r1, [pc, #28]	; (4b4c <Power_Ip_RCM_ResetInit+0x28>)
    4b2e:	f641 7307 	movw	r3, #7943	; 0x1f07
    4b32:	4013      	ands	r3, r2
    4b34:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    4b36:	9b01      	ldr	r3, [sp, #4]
    4b38:	685a      	ldr	r2, [r3, #4]
    4b3a:	4904      	ldr	r1, [pc, #16]	; (4b4c <Power_Ip_RCM_ResetInit+0x28>)
    4b3c:	f642 73ff 	movw	r3, #12287	; 0x2fff
    4b40:	4013      	ands	r3, r2
    4b42:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    4b44:	bf00      	nop
    4b46:	b002      	add	sp, #8
    4b48:	4770      	bx	lr
    4b4a:	bf00      	nop
    4b4c:	4007f000 	.word	0x4007f000

00004b50 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    4b50:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    4b52:	230c      	movs	r3, #12
    4b54:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    4b56:	2300      	movs	r3, #0
    4b58:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    4b5a:	2300      	movs	r3, #0
    4b5c:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    4b5e:	2300      	movs	r3, #0
    4b60:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    4b62:	4b25      	ldr	r3, [pc, #148]	; (4bf8 <Power_Ip_RCM_GetResetReason+0xa8>)
    4b64:	699a      	ldr	r2, [r3, #24]
    4b66:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4b6a:	4013      	ands	r3, r2
    4b6c:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    4b6e:	9b03      	ldr	r3, [sp, #12]
    4b70:	2b00      	cmp	r3, #0
    4b72:	d008      	beq.n	4b86 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    4b74:	4920      	ldr	r1, [pc, #128]	; (4bf8 <Power_Ip_RCM_GetResetReason+0xa8>)
    4b76:	9a03      	ldr	r2, [sp, #12]
    4b78:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4b7c:	4013      	ands	r3, r2
    4b7e:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    4b80:	4a1e      	ldr	r2, [pc, #120]	; (4bfc <Power_Ip_RCM_GetResetReason+0xac>)
    4b82:	9b03      	ldr	r3, [sp, #12]
    4b84:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    4b86:	4b1d      	ldr	r3, [pc, #116]	; (4bfc <Power_Ip_RCM_GetResetReason+0xac>)
    4b88:	681b      	ldr	r3, [r3, #0]
    4b8a:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    4b8c:	9a02      	ldr	r2, [sp, #8]
    4b8e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4b92:	4013      	ands	r3, r2
    4b94:	2b82      	cmp	r3, #130	; 0x82
    4b96:	d102      	bne.n	4b9e <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    4b98:	2305      	movs	r3, #5
    4b9a:	9307      	str	r3, [sp, #28]
    4b9c:	e027      	b.n	4bee <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    4b9e:	2300      	movs	r3, #0
    4ba0:	9306      	str	r3, [sp, #24]
    4ba2:	e021      	b.n	4be8 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    4ba4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4ba8:	9b06      	ldr	r3, [sp, #24]
    4baa:	fa22 f303 	lsr.w	r3, r2, r3
    4bae:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    4bb0:	9a01      	ldr	r2, [sp, #4]
    4bb2:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    4bb6:	4013      	ands	r3, r2
    4bb8:	2b00      	cmp	r3, #0
    4bba:	d012      	beq.n	4be2 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    4bbc:	9a01      	ldr	r2, [sp, #4]
    4bbe:	9b02      	ldr	r3, [sp, #8]
    4bc0:	4013      	ands	r3, r2
    4bc2:	2b00      	cmp	r3, #0
    4bc4:	d00a      	beq.n	4bdc <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    4bc6:	9b05      	ldr	r3, [sp, #20]
    4bc8:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    4bca:	9b04      	ldr	r3, [sp, #16]
    4bcc:	3301      	adds	r3, #1
    4bce:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    4bd0:	9b04      	ldr	r3, [sp, #16]
    4bd2:	2b01      	cmp	r3, #1
    4bd4:	d902      	bls.n	4bdc <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    4bd6:	230d      	movs	r3, #13
    4bd8:	9307      	str	r3, [sp, #28]
                        break;
    4bda:	e008      	b.n	4bee <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    4bdc:	9b05      	ldr	r3, [sp, #20]
    4bde:	3301      	adds	r3, #1
    4be0:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    4be2:	9b06      	ldr	r3, [sp, #24]
    4be4:	3301      	adds	r3, #1
    4be6:	9306      	str	r3, [sp, #24]
    4be8:	9b06      	ldr	r3, [sp, #24]
    4bea:	2b1f      	cmp	r3, #31
    4bec:	d9da      	bls.n	4ba4 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    4bee:	9b07      	ldr	r3, [sp, #28]
}
    4bf0:	4618      	mov	r0, r3
    4bf2:	b008      	add	sp, #32
    4bf4:	4770      	bx	lr
    4bf6:	bf00      	nop
    4bf8:	4007f000 	.word	0x4007f000
    4bfc:	1fff8ce0 	.word	0x1fff8ce0

00004c00 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    4c00:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    4c02:	4b0c      	ldr	r3, [pc, #48]	; (4c34 <Power_Ip_RCM_GetResetRawValue+0x34>)
    4c04:	699a      	ldr	r2, [r3, #24]
    4c06:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4c0a:	4013      	ands	r3, r2
    4c0c:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    4c0e:	9b01      	ldr	r3, [sp, #4]
    4c10:	2b00      	cmp	r3, #0
    4c12:	d008      	beq.n	4c26 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    4c14:	4907      	ldr	r1, [pc, #28]	; (4c34 <Power_Ip_RCM_GetResetRawValue+0x34>)
    4c16:	9a01      	ldr	r2, [sp, #4]
    4c18:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4c1c:	4013      	ands	r3, r2
    4c1e:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    4c20:	4a05      	ldr	r2, [pc, #20]	; (4c38 <Power_Ip_RCM_GetResetRawValue+0x38>)
    4c22:	9b01      	ldr	r3, [sp, #4]
    4c24:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    4c26:	4b04      	ldr	r3, [pc, #16]	; (4c38 <Power_Ip_RCM_GetResetRawValue+0x38>)
    4c28:	681b      	ldr	r3, [r3, #0]
    4c2a:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    4c2c:	9b00      	ldr	r3, [sp, #0]
}
    4c2e:	4618      	mov	r0, r3
    4c30:	b002      	add	sp, #8
    4c32:	4770      	bx	lr
    4c34:	4007f000 	.word	0x4007f000
    4c38:	1fff8ce0 	.word	0x1fff8ce0

00004c3c <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    4c3c:	b082      	sub	sp, #8
    4c3e:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    4c40:	9b01      	ldr	r3, [sp, #4]
    4c42:	681b      	ldr	r3, [r3, #0]
    4c44:	4a03      	ldr	r2, [pc, #12]	; (4c54 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    4c46:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    4c4a:	6093      	str	r3, [r2, #8]
}
    4c4c:	bf00      	nop
    4c4e:	b002      	add	sp, #8
    4c50:	4770      	bx	lr
    4c52:	bf00      	nop
    4c54:	4007e000 	.word	0x4007e000

00004c58 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    4c58:	b084      	sub	sp, #16
    4c5a:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    4c5c:	2301      	movs	r3, #1
    4c5e:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    4c60:	4b15      	ldr	r3, [pc, #84]	; (4cb8 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    4c62:	695b      	ldr	r3, [r3, #20]
    4c64:	b2db      	uxtb	r3, r3
    4c66:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    4c68:	9b01      	ldr	r3, [sp, #4]
    4c6a:	2b02      	cmp	r3, #2
    4c6c:	d012      	beq.n	4c94 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    4c6e:	9b01      	ldr	r3, [sp, #4]
    4c70:	2b02      	cmp	r3, #2
    4c72:	d818      	bhi.n	4ca6 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    4c74:	9b01      	ldr	r3, [sp, #4]
    4c76:	2b00      	cmp	r3, #0
    4c78:	d003      	beq.n	4c82 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    4c7a:	9b01      	ldr	r3, [sp, #4]
    4c7c:	2b01      	cmp	r3, #1
    4c7e:	d003      	beq.n	4c88 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    4c80:	e011      	b.n	4ca6 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    4c82:	2300      	movs	r3, #0
    4c84:	9303      	str	r3, [sp, #12]
            break;
    4c86:	e013      	b.n	4cb0 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    4c88:	9b02      	ldr	r3, [sp, #8]
    4c8a:	2b01      	cmp	r3, #1
    4c8c:	d10d      	bne.n	4caa <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    4c8e:	2300      	movs	r3, #0
    4c90:	9303      	str	r3, [sp, #12]
            break;
    4c92:	e00a      	b.n	4caa <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    4c94:	9b02      	ldr	r3, [sp, #8]
    4c96:	2b01      	cmp	r3, #1
    4c98:	d002      	beq.n	4ca0 <Power_Ip_SMC_ModeCheckEntry+0x48>
    4c9a:	9b02      	ldr	r3, [sp, #8]
    4c9c:	2b10      	cmp	r3, #16
    4c9e:	d106      	bne.n	4cae <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    4ca0:	2300      	movs	r3, #0
    4ca2:	9303      	str	r3, [sp, #12]
            break;
    4ca4:	e003      	b.n	4cae <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    4ca6:	bf00      	nop
    4ca8:	e002      	b.n	4cb0 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    4caa:	bf00      	nop
    4cac:	e000      	b.n	4cb0 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    4cae:	bf00      	nop
        }
    }

    return PowerModeCheck;
    4cb0:	9b03      	ldr	r3, [sp, #12]
}
    4cb2:	4618      	mov	r0, r3
    4cb4:	b004      	add	sp, #16
    4cb6:	4770      	bx	lr
    4cb8:	4007e000 	.word	0x4007e000

00004cbc <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4cbc:	b500      	push	{lr}
    4cbe:	b08b      	sub	sp, #44	; 0x2c
    4cc0:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    4cc2:	2300      	movs	r3, #0
    4cc4:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    4cc6:	2300      	movs	r3, #0
    4cc8:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    4cca:	2300      	movs	r3, #0
    4ccc:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    4cd0:	9b01      	ldr	r3, [sp, #4]
    4cd2:	685b      	ldr	r3, [r3, #4]
    4cd4:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    4cd6:	9b08      	ldr	r3, [sp, #32]
    4cd8:	2b02      	cmp	r3, #2
    4cda:	d076      	beq.n	4dca <Power_Ip_SMC_ModeConfig+0x10e>
    4cdc:	9b08      	ldr	r3, [sp, #32]
    4cde:	2b02      	cmp	r3, #2
    4ce0:	f200 80ab 	bhi.w	4e3a <Power_Ip_SMC_ModeConfig+0x17e>
    4ce4:	9b08      	ldr	r3, [sp, #32]
    4ce6:	2b00      	cmp	r3, #0
    4ce8:	d003      	beq.n	4cf2 <Power_Ip_SMC_ModeConfig+0x36>
    4cea:	9b08      	ldr	r3, [sp, #32]
    4cec:	2b01      	cmp	r3, #1
    4cee:	d034      	beq.n	4d5a <Power_Ip_SMC_ModeConfig+0x9e>
    4cf0:	e0a3      	b.n	4e3a <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    4cf2:	4b58      	ldr	r3, [pc, #352]	; (4e54 <Power_Ip_SMC_ModeConfig+0x198>)
    4cf4:	68db      	ldr	r3, [r3, #12]
    4cf6:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    4cf8:	9b06      	ldr	r3, [sp, #24]
    4cfa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4cfe:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    4d00:	4a54      	ldr	r2, [pc, #336]	; (4e54 <Power_Ip_SMC_ModeConfig+0x198>)
    4d02:	9b06      	ldr	r3, [sp, #24]
    4d04:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    4d06:	aa02      	add	r2, sp, #8
    4d08:	a903      	add	r1, sp, #12
    4d0a:	a804      	add	r0, sp, #16
    4d0c:	f24c 3350 	movw	r3, #50000	; 0xc350
    4d10:	f7ff fece 	bl	4ab0 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4d14:	9a02      	ldr	r2, [sp, #8]
    4d16:	a903      	add	r1, sp, #12
    4d18:	ab04      	add	r3, sp, #16
    4d1a:	4618      	mov	r0, r3
    4d1c:	f7ff fee2 	bl	4ae4 <Power_Ip_TimeoutExpired>
    4d20:	4603      	mov	r3, r0
    4d22:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    4d26:	4b4b      	ldr	r3, [pc, #300]	; (4e54 <Power_Ip_SMC_ModeConfig+0x198>)
    4d28:	695b      	ldr	r3, [r3, #20]
    4d2a:	f003 0301 	and.w	r3, r3, #1
    4d2e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    4d30:	9b05      	ldr	r3, [sp, #20]
    4d32:	2b01      	cmp	r3, #1
    4d34:	d006      	beq.n	4d44 <Power_Ip_SMC_ModeConfig+0x88>
    4d36:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d3a:	f083 0301 	eor.w	r3, r3, #1
    4d3e:	b2db      	uxtb	r3, r3
    4d40:	2b00      	cmp	r3, #0
    4d42:	d1e7      	bne.n	4d14 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    4d44:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d48:	2b00      	cmp	r3, #0
    4d4a:	d079      	beq.n	4e40 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4d4c:	2301      	movs	r3, #1
    4d4e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4d50:	21ff      	movs	r1, #255	; 0xff
    4d52:	2000      	movs	r0, #0
    4d54:	f7ff fe90 	bl	4a78 <Power_Ip_ReportPowerErrors>
            }

            break;
    4d58:	e072      	b.n	4e40 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    4d5a:	4b3e      	ldr	r3, [pc, #248]	; (4e54 <Power_Ip_SMC_ModeConfig+0x198>)
    4d5c:	68db      	ldr	r3, [r3, #12]
    4d5e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    4d60:	9b06      	ldr	r3, [sp, #24]
    4d62:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4d66:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    4d68:	9b06      	ldr	r3, [sp, #24]
    4d6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    4d6e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    4d70:	4a38      	ldr	r2, [pc, #224]	; (4e54 <Power_Ip_SMC_ModeConfig+0x198>)
    4d72:	9b06      	ldr	r3, [sp, #24]
    4d74:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    4d76:	aa02      	add	r2, sp, #8
    4d78:	a903      	add	r1, sp, #12
    4d7a:	a804      	add	r0, sp, #16
    4d7c:	f24c 3350 	movw	r3, #50000	; 0xc350
    4d80:	f7ff fe96 	bl	4ab0 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4d84:	9a02      	ldr	r2, [sp, #8]
    4d86:	a903      	add	r1, sp, #12
    4d88:	ab04      	add	r3, sp, #16
    4d8a:	4618      	mov	r0, r3
    4d8c:	f7ff feaa 	bl	4ae4 <Power_Ip_TimeoutExpired>
    4d90:	4603      	mov	r3, r0
    4d92:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    4d96:	4b2f      	ldr	r3, [pc, #188]	; (4e54 <Power_Ip_SMC_ModeConfig+0x198>)
    4d98:	695b      	ldr	r3, [r3, #20]
    4d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4d9e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    4da0:	9b05      	ldr	r3, [sp, #20]
    4da2:	2b80      	cmp	r3, #128	; 0x80
    4da4:	d006      	beq.n	4db4 <Power_Ip_SMC_ModeConfig+0xf8>
    4da6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4daa:	f083 0301 	eor.w	r3, r3, #1
    4dae:	b2db      	uxtb	r3, r3
    4db0:	2b00      	cmp	r3, #0
    4db2:	d1e7      	bne.n	4d84 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    4db4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4db8:	2b00      	cmp	r3, #0
    4dba:	d043      	beq.n	4e44 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4dbc:	2301      	movs	r3, #1
    4dbe:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4dc0:	21ff      	movs	r1, #255	; 0xff
    4dc2:	2000      	movs	r0, #0
    4dc4:	f7ff fe58 	bl	4a78 <Power_Ip_ReportPowerErrors>
            }

            break;
    4dc8:	e03c      	b.n	4e44 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    4dca:	4b22      	ldr	r3, [pc, #136]	; (4e54 <Power_Ip_SMC_ModeConfig+0x198>)
    4dcc:	68db      	ldr	r3, [r3, #12]
    4dce:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    4dd0:	9b06      	ldr	r3, [sp, #24]
    4dd2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4dd6:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    4dd8:	9b06      	ldr	r3, [sp, #24]
    4dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4dde:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    4de0:	4a1c      	ldr	r2, [pc, #112]	; (4e54 <Power_Ip_SMC_ModeConfig+0x198>)
    4de2:	9b06      	ldr	r3, [sp, #24]
    4de4:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    4de6:	aa02      	add	r2, sp, #8
    4de8:	a903      	add	r1, sp, #12
    4dea:	a804      	add	r0, sp, #16
    4dec:	f24c 3350 	movw	r3, #50000	; 0xc350
    4df0:	f7ff fe5e 	bl	4ab0 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4df4:	9a02      	ldr	r2, [sp, #8]
    4df6:	a903      	add	r1, sp, #12
    4df8:	ab04      	add	r3, sp, #16
    4dfa:	4618      	mov	r0, r3
    4dfc:	f7ff fe72 	bl	4ae4 <Power_Ip_TimeoutExpired>
    4e00:	4603      	mov	r3, r0
    4e02:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    4e06:	4b13      	ldr	r3, [pc, #76]	; (4e54 <Power_Ip_SMC_ModeConfig+0x198>)
    4e08:	695b      	ldr	r3, [r3, #20]
    4e0a:	f003 0304 	and.w	r3, r3, #4
    4e0e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    4e10:	9b05      	ldr	r3, [sp, #20]
    4e12:	2b04      	cmp	r3, #4
    4e14:	d006      	beq.n	4e24 <Power_Ip_SMC_ModeConfig+0x168>
    4e16:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e1a:	f083 0301 	eor.w	r3, r3, #1
    4e1e:	b2db      	uxtb	r3, r3
    4e20:	2b00      	cmp	r3, #0
    4e22:	d1e7      	bne.n	4df4 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    4e24:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e28:	2b00      	cmp	r3, #0
    4e2a:	d00d      	beq.n	4e48 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e2c:	2301      	movs	r3, #1
    4e2e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4e30:	21ff      	movs	r1, #255	; 0xff
    4e32:	2000      	movs	r0, #0
    4e34:	f7ff fe20 	bl	4a78 <Power_Ip_ReportPowerErrors>
            }

            break;
    4e38:	e006      	b.n	4e48 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e3a:	2301      	movs	r3, #1
    4e3c:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    4e3e:	e004      	b.n	4e4a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    4e40:	bf00      	nop
    4e42:	e002      	b.n	4e4a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    4e44:	bf00      	nop
    4e46:	e000      	b.n	4e4a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    4e48:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    4e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    4e4c:	4618      	mov	r0, r3
    4e4e:	b00b      	add	sp, #44	; 0x2c
    4e50:	f85d fb04 	ldr.w	pc, [sp], #4
    4e54:	4007e000 	.word	0x4007e000

00004e58 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    4e58:	b500      	push	{lr}
    4e5a:	b085      	sub	sp, #20
    4e5c:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    4e5e:	9b01      	ldr	r3, [sp, #4]
    4e60:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    4e62:	9803      	ldr	r0, [sp, #12]
    4e64:	f000 fbc8 	bl	55f8 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    4e68:	4a03      	ldr	r2, [pc, #12]	; (4e78 <Port_Init+0x20>)
    4e6a:	9b03      	ldr	r3, [sp, #12]
    4e6c:	6013      	str	r3, [r2, #0]
        }
    }
}
    4e6e:	bf00      	nop
    4e70:	b005      	add	sp, #20
    4e72:	f85d fb04 	ldr.w	pc, [sp], #4
    4e76:	bf00      	nop
    4e78:	1fff8ce4 	.word	0x1fff8ce4

00004e7c <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    4e7c:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    4e7e:	4b03      	ldr	r3, [pc, #12]	; (4e8c <Port_RefreshPortDirection+0x10>)
    4e80:	681b      	ldr	r3, [r3, #0]
    4e82:	4618      	mov	r0, r3
    4e84:	f000 fc10 	bl	56a8 <Port_Ipw_RefreshPortDirection>
    }
}
    4e88:	bf00      	nop
    4e8a:	bd08      	pop	{r3, pc}
    4e8c:	1fff8ce4 	.word	0x1fff8ce4

00004e90 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    4e90:	b086      	sub	sp, #24
    4e92:	9003      	str	r0, [sp, #12]
    4e94:	9102      	str	r1, [sp, #8]
    4e96:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    4e98:	23ff      	movs	r3, #255	; 0xff
    4e9a:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    4e9c:	9b03      	ldr	r3, [sp, #12]
    4e9e:	4a39      	ldr	r2, [pc, #228]	; (4f84 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    4ea0:	4293      	cmp	r3, r2
    4ea2:	d151      	bne.n	4f48 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    4ea4:	9b02      	ldr	r3, [sp, #8]
    4ea6:	2b10      	cmp	r3, #16
    4ea8:	d867      	bhi.n	4f7a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    4eaa:	a201      	add	r2, pc, #4	; (adr r2, 4eb0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    4eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4eb0:	00004ef5 	.word	0x00004ef5
    4eb4:	00004f03 	.word	0x00004f03
    4eb8:	00004f7b 	.word	0x00004f7b
    4ebc:	00004f7b 	.word	0x00004f7b
    4ec0:	00004f7b 	.word	0x00004f7b
    4ec4:	00004f7b 	.word	0x00004f7b
    4ec8:	00004f7b 	.word	0x00004f7b
    4ecc:	00004f7b 	.word	0x00004f7b
    4ed0:	00004f7b 	.word	0x00004f7b
    4ed4:	00004f7b 	.word	0x00004f7b
    4ed8:	00004f7b 	.word	0x00004f7b
    4edc:	00004f7b 	.word	0x00004f7b
    4ee0:	00004f7b 	.word	0x00004f7b
    4ee4:	00004f11 	.word	0x00004f11
    4ee8:	00004f1f 	.word	0x00004f1f
    4eec:	00004f2d 	.word	0x00004f2d
    4ef0:	00004f3b 	.word	0x00004f3b
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    4ef4:	2301      	movs	r3, #1
    4ef6:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4ef8:	9a05      	ldr	r2, [sp, #20]
    4efa:	9b01      	ldr	r3, [sp, #4]
    4efc:	4313      	orrs	r3, r2
    4efe:	9305      	str	r3, [sp, #20]
                break;
    4f00:	e03c      	b.n	4f7c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    4f02:	2302      	movs	r3, #2
    4f04:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4f06:	9a05      	ldr	r2, [sp, #20]
    4f08:	9b01      	ldr	r3, [sp, #4]
    4f0a:	4313      	orrs	r3, r2
    4f0c:	9305      	str	r3, [sp, #20]
                break;
    4f0e:	e035      	b.n	4f7c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    4f10:	2304      	movs	r3, #4
    4f12:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4f14:	9a05      	ldr	r2, [sp, #20]
    4f16:	9b01      	ldr	r3, [sp, #4]
    4f18:	4313      	orrs	r3, r2
    4f1a:	9305      	str	r3, [sp, #20]
                break;
    4f1c:	e02e      	b.n	4f7c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    4f1e:	2308      	movs	r3, #8
    4f20:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4f22:	9a05      	ldr	r2, [sp, #20]
    4f24:	9b01      	ldr	r3, [sp, #4]
    4f26:	4313      	orrs	r3, r2
    4f28:	9305      	str	r3, [sp, #20]
                break;
    4f2a:	e027      	b.n	4f7c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    4f2c:	230e      	movs	r3, #14
    4f2e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f30:	9a05      	ldr	r2, [sp, #20]
    4f32:	9b01      	ldr	r3, [sp, #4]
    4f34:	4013      	ands	r3, r2
    4f36:	9305      	str	r3, [sp, #20]
                break;
    4f38:	e020      	b.n	4f7c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    4f3a:	230d      	movs	r3, #13
    4f3c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f3e:	9a05      	ldr	r2, [sp, #20]
    4f40:	9b01      	ldr	r3, [sp, #4]
    4f42:	4013      	ands	r3, r2
    4f44:	9305      	str	r3, [sp, #20]
                break;
    4f46:	e019      	b.n	4f7c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    4f48:	9b03      	ldr	r3, [sp, #12]
    4f4a:	4a0f      	ldr	r2, [pc, #60]	; (4f88 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    4f4c:	4293      	cmp	r3, r2
    4f4e:	d115      	bne.n	4f7c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    4f50:	9b02      	ldr	r3, [sp, #8]
    4f52:	2b00      	cmp	r3, #0
    4f54:	d003      	beq.n	4f5e <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    4f56:	9b02      	ldr	r3, [sp, #8]
    4f58:	2b01      	cmp	r3, #1
    4f5a:	d007      	beq.n	4f6c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    4f5c:	e00e      	b.n	4f7c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    4f5e:	230b      	movs	r3, #11
    4f60:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f62:	9a05      	ldr	r2, [sp, #20]
    4f64:	9b01      	ldr	r3, [sp, #4]
    4f66:	4013      	ands	r3, r2
    4f68:	9305      	str	r3, [sp, #20]
                break;
    4f6a:	e007      	b.n	4f7c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    4f6c:	2307      	movs	r3, #7
    4f6e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f70:	9a05      	ldr	r2, [sp, #20]
    4f72:	9b01      	ldr	r3, [sp, #4]
    4f74:	4013      	ands	r3, r2
    4f76:	9305      	str	r3, [sp, #20]
                break;
    4f78:	e000      	b.n	4f7c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    4f7a:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    4f7c:	9b05      	ldr	r3, [sp, #20]
}
    4f7e:	4618      	mov	r0, r3
    4f80:	b006      	add	sp, #24
    4f82:	4770      	bx	lr
    4f84:	4004a000 	.word	0x4004a000
    4f88:	4004b000 	.word	0x4004b000

00004f8c <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    4f8c:	b500      	push	{lr}
    4f8e:	b089      	sub	sp, #36	; 0x24
    4f90:	9003      	str	r0, [sp, #12]
    4f92:	9102      	str	r1, [sp, #8]
    4f94:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    4f96:	9b01      	ldr	r3, [sp, #4]
    4f98:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    4f9a:	9b01      	ldr	r3, [sp, #4]
    4f9c:	2b08      	cmp	r3, #8
    4f9e:	d121      	bne.n	4fe4 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    4fa0:	4b13      	ldr	r3, [pc, #76]	; (4ff0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fa2:	685b      	ldr	r3, [r3, #4]
    4fa4:	f003 030f 	and.w	r3, r3, #15
    4fa8:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    4faa:	9a06      	ldr	r2, [sp, #24]
    4fac:	9902      	ldr	r1, [sp, #8]
    4fae:	9803      	ldr	r0, [sp, #12]
    4fb0:	f7ff ff6e 	bl	4e90 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    4fb4:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    4fb6:	9b05      	ldr	r3, [sp, #20]
    4fb8:	2bff      	cmp	r3, #255	; 0xff
    4fba:	d011      	beq.n	4fe0 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    4fbc:	f000 fef0 	bl	5da0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    4fc0:	4b0b      	ldr	r3, [pc, #44]	; (4ff0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fc2:	685b      	ldr	r3, [r3, #4]
    4fc4:	4a0a      	ldr	r2, [pc, #40]	; (4ff0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fc6:	f023 030f 	bic.w	r3, r3, #15
    4fca:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    4fcc:	4b08      	ldr	r3, [pc, #32]	; (4ff0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fce:	685a      	ldr	r2, [r3, #4]
    4fd0:	9b05      	ldr	r3, [sp, #20]
    4fd2:	f003 030f 	and.w	r3, r3, #15
    4fd6:	4906      	ldr	r1, [pc, #24]	; (4ff0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fd8:	4313      	orrs	r3, r2
    4fda:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    4fdc:	f000 ff0c 	bl	5df8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    4fe0:	2300      	movs	r3, #0
    4fe2:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    4fe4:	9b07      	ldr	r3, [sp, #28]
}
    4fe6:	4618      	mov	r0, r3
    4fe8:	b009      	add	sp, #36	; 0x24
    4fea:	f85d fb04 	ldr.w	pc, [sp], #4
    4fee:	bf00      	nop
    4ff0:	40048000 	.word	0x40048000

00004ff4 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    4ff4:	b500      	push	{lr}
    4ff6:	b087      	sub	sp, #28
    4ff8:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    4ffa:	2300      	movs	r3, #0
    4ffc:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    4ffe:	2300      	movs	r3, #0
    5000:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    5002:	2300      	movs	r3, #0
    5004:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    5006:	9b01      	ldr	r3, [sp, #4]
    5008:	68db      	ldr	r3, [r3, #12]
    500a:	2b02      	cmp	r3, #2
    500c:	d00a      	beq.n	5024 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    500e:	9b05      	ldr	r3, [sp, #20]
    5010:	f043 0302 	orr.w	r3, r3, #2
    5014:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    5016:	9b01      	ldr	r3, [sp, #4]
    5018:	68db      	ldr	r3, [r3, #12]
    501a:	f003 0301 	and.w	r3, r3, #1
    501e:	9a05      	ldr	r2, [sp, #20]
    5020:	4313      	orrs	r3, r2
    5022:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    5024:	9b01      	ldr	r3, [sp, #4]
    5026:	699b      	ldr	r3, [r3, #24]
    5028:	019b      	lsls	r3, r3, #6
    502a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    502e:	9a05      	ldr	r2, [sp, #20]
    5030:	4313      	orrs	r3, r2
    5032:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    5034:	9b01      	ldr	r3, [sp, #4]
    5036:	6a1b      	ldr	r3, [r3, #32]
    5038:	03db      	lsls	r3, r3, #15
    503a:	b29b      	uxth	r3, r3
    503c:	9a05      	ldr	r2, [sp, #20]
    503e:	4313      	orrs	r3, r2
    5040:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    5042:	9b01      	ldr	r3, [sp, #4]
    5044:	7f1b      	ldrb	r3, [r3, #28]
    5046:	2b00      	cmp	r3, #0
    5048:	d001      	beq.n	504e <Port_Ci_Port_Ip_PinInit+0x5a>
    504a:	2310      	movs	r3, #16
    504c:	e000      	b.n	5050 <Port_Ci_Port_Ip_PinInit+0x5c>
    504e:	2300      	movs	r3, #0
    5050:	9a05      	ldr	r2, [sp, #20]
    5052:	4313      	orrs	r3, r2
    5054:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    5056:	9b01      	ldr	r3, [sp, #4]
    5058:	691b      	ldr	r3, [r3, #16]
    505a:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    505c:	9b01      	ldr	r3, [sp, #4]
    505e:	6818      	ldr	r0, [r3, #0]
    5060:	9b01      	ldr	r3, [sp, #4]
    5062:	689b      	ldr	r3, [r3, #8]
    5064:	9a04      	ldr	r2, [sp, #16]
    5066:	4619      	mov	r1, r3
    5068:	f7ff ff90 	bl	4f8c <Port_Ci_Port_Ip_ConfigureInterleave>
    506c:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    506e:	9b03      	ldr	r3, [sp, #12]
    5070:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    5072:	9b04      	ldr	r3, [sp, #16]
    5074:	021b      	lsls	r3, r3, #8
    5076:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    507a:	9a05      	ldr	r2, [sp, #20]
    507c:	4313      	orrs	r3, r2
    507e:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    5080:	f000 fcf4 	bl	5a6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    5084:	9b01      	ldr	r3, [sp, #4]
    5086:	681b      	ldr	r3, [r3, #0]
    5088:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    508c:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    508e:	9b01      	ldr	r3, [sp, #4]
    5090:	689b      	ldr	r3, [r3, #8]
    5092:	2201      	movs	r2, #1
    5094:	fa02 f303 	lsl.w	r3, r2, r3
    5098:	43db      	mvns	r3, r3
    509a:	9a02      	ldr	r2, [sp, #8]
    509c:	4013      	ands	r3, r2
    509e:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    50a0:	9b01      	ldr	r3, [sp, #4]
    50a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    50a6:	2b00      	cmp	r3, #0
    50a8:	d001      	beq.n	50ae <Port_Ci_Port_Ip_PinInit+0xba>
    50aa:	2201      	movs	r2, #1
    50ac:	e000      	b.n	50b0 <Port_Ci_Port_Ip_PinInit+0xbc>
    50ae:	2200      	movs	r2, #0
    50b0:	9b01      	ldr	r3, [sp, #4]
    50b2:	689b      	ldr	r3, [r3, #8]
    50b4:	fa02 f303 	lsl.w	r3, r2, r3
    50b8:	9a02      	ldr	r2, [sp, #8]
    50ba:	4313      	orrs	r3, r2
    50bc:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    50be:	9b01      	ldr	r3, [sp, #4]
    50c0:	681b      	ldr	r3, [r3, #0]
    50c2:	9a02      	ldr	r2, [sp, #8]
    50c4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    50c8:	f000 fcfc 	bl	5ac4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    50cc:	9b04      	ldr	r3, [sp, #16]
    50ce:	2b01      	cmp	r3, #1
    50d0:	d16d      	bne.n	51ae <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    50d2:	9b01      	ldr	r3, [sp, #4]
    50d4:	695b      	ldr	r3, [r3, #20]
    50d6:	2b02      	cmp	r3, #2
    50d8:	d138      	bne.n	514c <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    50da:	9b01      	ldr	r3, [sp, #4]
    50dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    50e0:	2b01      	cmp	r3, #1
    50e2:	d10f      	bne.n	5104 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    50e4:	f000 fd14 	bl	5b10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    50e8:	9b01      	ldr	r3, [sp, #4]
    50ea:	685b      	ldr	r3, [r3, #4]
    50ec:	6859      	ldr	r1, [r3, #4]
    50ee:	9b01      	ldr	r3, [sp, #4]
    50f0:	689b      	ldr	r3, [r3, #8]
    50f2:	2201      	movs	r2, #1
    50f4:	409a      	lsls	r2, r3
    50f6:	9b01      	ldr	r3, [sp, #4]
    50f8:	685b      	ldr	r3, [r3, #4]
    50fa:	430a      	orrs	r2, r1
    50fc:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    50fe:	f000 fd33 	bl	5b68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    5102:	e013      	b.n	512c <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    5104:	9b01      	ldr	r3, [sp, #4]
    5106:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    510a:	2b00      	cmp	r3, #0
    510c:	d10e      	bne.n	512c <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    510e:	f000 fd51 	bl	5bb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    5112:	9b01      	ldr	r3, [sp, #4]
    5114:	685b      	ldr	r3, [r3, #4]
    5116:	6899      	ldr	r1, [r3, #8]
    5118:	9b01      	ldr	r3, [sp, #4]
    511a:	689b      	ldr	r3, [r3, #8]
    511c:	2201      	movs	r2, #1
    511e:	409a      	lsls	r2, r3
    5120:	9b01      	ldr	r3, [sp, #4]
    5122:	685b      	ldr	r3, [r3, #4]
    5124:	430a      	orrs	r2, r1
    5126:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    5128:	f000 fd70 	bl	5c0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    512c:	f000 fd94 	bl	5c58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    5130:	9b01      	ldr	r3, [sp, #4]
    5132:	685b      	ldr	r3, [r3, #4]
    5134:	6959      	ldr	r1, [r3, #20]
    5136:	9b01      	ldr	r3, [sp, #4]
    5138:	689b      	ldr	r3, [r3, #8]
    513a:	2201      	movs	r2, #1
    513c:	409a      	lsls	r2, r3
    513e:	9b01      	ldr	r3, [sp, #4]
    5140:	685b      	ldr	r3, [r3, #4]
    5142:	430a      	orrs	r2, r1
    5144:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5146:	f000 fdb3 	bl	5cb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    514a:	e030      	b.n	51ae <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    514c:	f000 fd84 	bl	5c58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    5150:	9b01      	ldr	r3, [sp, #4]
    5152:	685b      	ldr	r3, [r3, #4]
    5154:	6959      	ldr	r1, [r3, #20]
    5156:	9b01      	ldr	r3, [sp, #4]
    5158:	689b      	ldr	r3, [r3, #8]
    515a:	2201      	movs	r2, #1
    515c:	fa02 f303 	lsl.w	r3, r2, r3
    5160:	43da      	mvns	r2, r3
    5162:	9b01      	ldr	r3, [sp, #4]
    5164:	685b      	ldr	r3, [r3, #4]
    5166:	400a      	ands	r2, r1
    5168:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    516a:	f000 fda1 	bl	5cb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    516e:	f000 fdc5 	bl	5cfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    5172:	9b01      	ldr	r3, [sp, #4]
    5174:	685b      	ldr	r3, [r3, #4]
    5176:	6999      	ldr	r1, [r3, #24]
    5178:	9b01      	ldr	r3, [sp, #4]
    517a:	689b      	ldr	r3, [r3, #8]
    517c:	2201      	movs	r2, #1
    517e:	fa02 f303 	lsl.w	r3, r2, r3
    5182:	43da      	mvns	r2, r3
    5184:	9b01      	ldr	r3, [sp, #4]
    5186:	685b      	ldr	r3, [r3, #4]
    5188:	400a      	ands	r2, r1
    518a:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    518c:	9b01      	ldr	r3, [sp, #4]
    518e:	695b      	ldr	r3, [r3, #20]
    5190:	2b03      	cmp	r3, #3
    5192:	d10a      	bne.n	51aa <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    5194:	9b01      	ldr	r3, [sp, #4]
    5196:	685b      	ldr	r3, [r3, #4]
    5198:	6999      	ldr	r1, [r3, #24]
    519a:	9b01      	ldr	r3, [sp, #4]
    519c:	689b      	ldr	r3, [r3, #8]
    519e:	2201      	movs	r2, #1
    51a0:	409a      	lsls	r2, r3
    51a2:	9b01      	ldr	r3, [sp, #4]
    51a4:	685b      	ldr	r3, [r3, #4]
    51a6:	430a      	orrs	r2, r1
    51a8:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    51aa:	f000 fdd3 	bl	5d54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    51ae:	9b01      	ldr	r3, [sp, #4]
    51b0:	681b      	ldr	r3, [r3, #0]
    51b2:	9a01      	ldr	r2, [sp, #4]
    51b4:	6892      	ldr	r2, [r2, #8]
    51b6:	9905      	ldr	r1, [sp, #20]
    51b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    51bc:	bf00      	nop
    51be:	b007      	add	sp, #28
    51c0:	f85d fb04 	ldr.w	pc, [sp], #4

000051c4 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    51c4:	b500      	push	{lr}
    51c6:	b085      	sub	sp, #20
    51c8:	9001      	str	r0, [sp, #4]
    51ca:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    51cc:	2300      	movs	r3, #0
    51ce:	9303      	str	r3, [sp, #12]
    51d0:	e00d      	b.n	51ee <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    51d2:	9a03      	ldr	r2, [sp, #12]
    51d4:	4613      	mov	r3, r2
    51d6:	009b      	lsls	r3, r3, #2
    51d8:	4413      	add	r3, r2
    51da:	00db      	lsls	r3, r3, #3
    51dc:	461a      	mov	r2, r3
    51de:	9b00      	ldr	r3, [sp, #0]
    51e0:	4413      	add	r3, r2
    51e2:	4618      	mov	r0, r3
    51e4:	f7ff ff06 	bl	4ff4 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    51e8:	9b03      	ldr	r3, [sp, #12]
    51ea:	3301      	adds	r3, #1
    51ec:	9303      	str	r3, [sp, #12]
    51ee:	9a03      	ldr	r2, [sp, #12]
    51f0:	9b01      	ldr	r3, [sp, #4]
    51f2:	429a      	cmp	r2, r3
    51f4:	d3ed      	bcc.n	51d2 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    51f6:	2300      	movs	r3, #0
}
    51f8:	4618      	mov	r0, r3
    51fa:	b005      	add	sp, #20
    51fc:	f85d fb04 	ldr.w	pc, [sp], #4

00005200 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    5200:	b500      	push	{lr}
    5202:	b087      	sub	sp, #28
    5204:	9003      	str	r0, [sp, #12]
    5206:	9102      	str	r1, [sp, #8]
    5208:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    520a:	9a01      	ldr	r2, [sp, #4]
    520c:	9902      	ldr	r1, [sp, #8]
    520e:	9803      	ldr	r0, [sp, #12]
    5210:	f7ff febc 	bl	4f8c <Port_Ci_Port_Ip_ConfigureInterleave>
    5214:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    5216:	f000 fe15 	bl	5e44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    521a:	9b03      	ldr	r3, [sp, #12]
    521c:	9a02      	ldr	r2, [sp, #8]
    521e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5222:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    5224:	9b04      	ldr	r3, [sp, #16]
    5226:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    522a:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    522c:	9b05      	ldr	r3, [sp, #20]
    522e:	021b      	lsls	r3, r3, #8
    5230:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5234:	9a04      	ldr	r2, [sp, #16]
    5236:	4313      	orrs	r3, r2
    5238:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    523a:	9b03      	ldr	r3, [sp, #12]
    523c:	9a02      	ldr	r2, [sp, #8]
    523e:	9904      	ldr	r1, [sp, #16]
    5240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    5244:	f000 fe2a 	bl	5e9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    5248:	bf00      	nop
    524a:	b007      	add	sp, #28
    524c:	f85d fb04 	ldr.w	pc, [sp], #4

00005250 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5250:	b500      	push	{lr}
    5252:	b083      	sub	sp, #12
    5254:	9001      	str	r0, [sp, #4]
    5256:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    5258:	f000 fe46 	bl	5ee8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    525c:	9b01      	ldr	r3, [sp, #4]
    525e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    5262:	2101      	movs	r1, #1
    5264:	9b00      	ldr	r3, [sp, #0]
    5266:	fa01 f303 	lsl.w	r3, r1, r3
    526a:	431a      	orrs	r2, r3
    526c:	9b01      	ldr	r3, [sp, #4]
    526e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    5272:	f000 fe65 	bl	5f40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    5276:	bf00      	nop
    5278:	b003      	add	sp, #12
    527a:	f85d fb04 	ldr.w	pc, [sp], #4

0000527e <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    527e:	b500      	push	{lr}
    5280:	b083      	sub	sp, #12
    5282:	9001      	str	r0, [sp, #4]
    5284:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    5286:	f000 fe81 	bl	5f8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    528a:	9b01      	ldr	r3, [sp, #4]
    528c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    5290:	2101      	movs	r1, #1
    5292:	9b00      	ldr	r3, [sp, #0]
    5294:	fa01 f303 	lsl.w	r3, r1, r3
    5298:	43db      	mvns	r3, r3
    529a:	401a      	ands	r2, r3
    529c:	9b01      	ldr	r3, [sp, #4]
    529e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    52a2:	f000 fe9f 	bl	5fe4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    52a6:	bf00      	nop
    52a8:	b003      	add	sp, #12
    52aa:	f85d fb04 	ldr.w	pc, [sp], #4

000052ae <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    52ae:	b082      	sub	sp, #8
    52b0:	9001      	str	r0, [sp, #4]
    52b2:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    52b4:	9b00      	ldr	r3, [sp, #0]
    52b6:	785b      	ldrb	r3, [r3, #1]
    52b8:	f003 0201 	and.w	r2, r3, #1
    52bc:	9b01      	ldr	r3, [sp, #4]
    52be:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    52c2:	9b00      	ldr	r3, [sp, #0]
    52c4:	789b      	ldrb	r3, [r3, #2]
    52c6:	f003 021f 	and.w	r2, r3, #31
    52ca:	9b01      	ldr	r3, [sp, #4]
    52cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    52d0:	bf00      	nop
    52d2:	b002      	add	sp, #8
    52d4:	4770      	bx	lr

000052d6 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    52d6:	b086      	sub	sp, #24
    52d8:	9003      	str	r0, [sp, #12]
    52da:	9301      	str	r3, [sp, #4]
    52dc:	460b      	mov	r3, r1
    52de:	f8ad 300a 	strh.w	r3, [sp, #10]
    52e2:	4613      	mov	r3, r2
    52e4:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    52e8:	2300      	movs	r3, #0
    52ea:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    52ee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52f2:	f043 0301 	orr.w	r3, r3, #1
    52f6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    52fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52fe:	f043 0302 	orr.w	r3, r3, #2
    5302:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    5306:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    530a:	f043 0310 	orr.w	r3, r3, #16
    530e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    5312:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    531a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    531e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5322:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    5326:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    532a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    532e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    5332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    5336:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    533a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    533e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    5342:	4013      	ands	r3, r2
    5344:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    5348:	9b01      	ldr	r3, [sp, #4]
    534a:	2b00      	cmp	r3, #0
    534c:	d003      	beq.n	5356 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    534e:	9b01      	ldr	r3, [sp, #4]
    5350:	2b01      	cmp	r3, #1
    5352:	d00a      	beq.n	536a <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    5354:	e013      	b.n	537e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    5356:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    535a:	041a      	lsls	r2, r3, #16
    535c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5360:	431a      	orrs	r2, r3
    5362:	9b03      	ldr	r3, [sp, #12]
    5364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    5368:	e009      	b.n	537e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    536a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    536e:	041a      	lsls	r2, r3, #16
    5370:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5374:	431a      	orrs	r2, r3
    5376:	9b03      	ldr	r3, [sp, #12]
    5378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    537c:	bf00      	nop
    }
}
    537e:	bf00      	nop
    5380:	b006      	add	sp, #24
    5382:	4770      	bx	lr

00005384 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    5384:	b500      	push	{lr}
    5386:	b087      	sub	sp, #28
    5388:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    538a:	9b01      	ldr	r3, [sp, #4]
    538c:	885b      	ldrh	r3, [r3, #2]
    538e:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    5392:	9b01      	ldr	r3, [sp, #4]
    5394:	689b      	ldr	r3, [r3, #8]
    5396:	7a1b      	ldrb	r3, [r3, #8]
    5398:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    539c:	9b01      	ldr	r3, [sp, #4]
    539e:	689b      	ldr	r3, [r3, #8]
    53a0:	681b      	ldr	r3, [r3, #0]
    53a2:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    53a4:	9b01      	ldr	r3, [sp, #4]
    53a6:	689b      	ldr	r3, [r3, #8]
    53a8:	685b      	ldr	r3, [r3, #4]
    53aa:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    53ac:	2300      	movs	r3, #0
    53ae:	f8ad 3016 	strh.w	r3, [sp, #22]
    53b2:	e111      	b.n	55d8 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    53b4:	9b02      	ldr	r3, [sp, #8]
    53b6:	2b02      	cmp	r3, #2
    53b8:	d169      	bne.n	548e <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    53ba:	f89d 3013 	ldrb.w	r3, [sp, #19]
    53be:	2b01      	cmp	r3, #1
    53c0:	d11a      	bne.n	53f8 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    53c2:	9b01      	ldr	r3, [sp, #4]
    53c4:	685a      	ldr	r2, [r3, #4]
    53c6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    53ca:	005b      	lsls	r3, r3, #1
    53cc:	4413      	add	r3, r2
    53ce:	881b      	ldrh	r3, [r3, #0]
    53d0:	f003 021f 	and.w	r2, r3, #31
    53d4:	9b01      	ldr	r3, [sp, #4]
    53d6:	6859      	ldr	r1, [r3, #4]
    53d8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    53dc:	005b      	lsls	r3, r3, #1
    53de:	440b      	add	r3, r1
    53e0:	881b      	ldrh	r3, [r3, #0]
    53e2:	095b      	lsrs	r3, r3, #5
    53e4:	b29b      	uxth	r3, r3
    53e6:	4619      	mov	r1, r3
    53e8:	4b81      	ldr	r3, [pc, #516]	; (55f0 <Port_Ipw_Init_UnusedPins+0x26c>)
    53ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    53ee:	2101      	movs	r1, #1
    53f0:	fa01 f202 	lsl.w	r2, r1, r2
    53f4:	605a      	str	r2, [r3, #4]
    53f6:	e01d      	b.n	5434 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    53f8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    53fc:	2b00      	cmp	r3, #0
    53fe:	d119      	bne.n	5434 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5400:	9b01      	ldr	r3, [sp, #4]
    5402:	685a      	ldr	r2, [r3, #4]
    5404:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5408:	005b      	lsls	r3, r3, #1
    540a:	4413      	add	r3, r2
    540c:	881b      	ldrh	r3, [r3, #0]
    540e:	f003 021f 	and.w	r2, r3, #31
    5412:	9b01      	ldr	r3, [sp, #4]
    5414:	6859      	ldr	r1, [r3, #4]
    5416:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    541a:	005b      	lsls	r3, r3, #1
    541c:	440b      	add	r3, r1
    541e:	881b      	ldrh	r3, [r3, #0]
    5420:	095b      	lsrs	r3, r3, #5
    5422:	b29b      	uxth	r3, r3
    5424:	4619      	mov	r1, r3
    5426:	4b72      	ldr	r3, [pc, #456]	; (55f0 <Port_Ipw_Init_UnusedPins+0x26c>)
    5428:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    542c:	2101      	movs	r1, #1
    542e:	fa01 f202 	lsl.w	r2, r1, r2
    5432:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5434:	f000 fdfc 	bl	6030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5438:	9b01      	ldr	r3, [sp, #4]
    543a:	685a      	ldr	r2, [r3, #4]
    543c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5440:	005b      	lsls	r3, r3, #1
    5442:	4413      	add	r3, r2
    5444:	881b      	ldrh	r3, [r3, #0]
    5446:	095b      	lsrs	r3, r3, #5
    5448:	b29b      	uxth	r3, r3
    544a:	461a      	mov	r2, r3
    544c:	4b68      	ldr	r3, [pc, #416]	; (55f0 <Port_Ipw_Init_UnusedPins+0x26c>)
    544e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5452:	6959      	ldr	r1, [r3, #20]
    5454:	9b01      	ldr	r3, [sp, #4]
    5456:	685a      	ldr	r2, [r3, #4]
    5458:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    545c:	005b      	lsls	r3, r3, #1
    545e:	4413      	add	r3, r2
    5460:	881b      	ldrh	r3, [r3, #0]
    5462:	f003 031f 	and.w	r3, r3, #31
    5466:	2201      	movs	r2, #1
    5468:	409a      	lsls	r2, r3
    546a:	9b01      	ldr	r3, [sp, #4]
    546c:	6858      	ldr	r0, [r3, #4]
    546e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5472:	005b      	lsls	r3, r3, #1
    5474:	4403      	add	r3, r0
    5476:	881b      	ldrh	r3, [r3, #0]
    5478:	095b      	lsrs	r3, r3, #5
    547a:	b29b      	uxth	r3, r3
    547c:	4618      	mov	r0, r3
    547e:	4b5c      	ldr	r3, [pc, #368]	; (55f0 <Port_Ipw_Init_UnusedPins+0x26c>)
    5480:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5484:	430a      	orrs	r2, r1
    5486:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5488:	f000 fdfe 	bl	6088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    548c:	e086      	b.n	559c <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    548e:	f000 fdcf 	bl	6030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    5492:	9b01      	ldr	r3, [sp, #4]
    5494:	685a      	ldr	r2, [r3, #4]
    5496:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    549a:	005b      	lsls	r3, r3, #1
    549c:	4413      	add	r3, r2
    549e:	881b      	ldrh	r3, [r3, #0]
    54a0:	095b      	lsrs	r3, r3, #5
    54a2:	b29b      	uxth	r3, r3
    54a4:	461a      	mov	r2, r3
    54a6:	4b52      	ldr	r3, [pc, #328]	; (55f0 <Port_Ipw_Init_UnusedPins+0x26c>)
    54a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    54ac:	6959      	ldr	r1, [r3, #20]
    54ae:	9b01      	ldr	r3, [sp, #4]
    54b0:	685a      	ldr	r2, [r3, #4]
    54b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54b6:	005b      	lsls	r3, r3, #1
    54b8:	4413      	add	r3, r2
    54ba:	881b      	ldrh	r3, [r3, #0]
    54bc:	f003 031f 	and.w	r3, r3, #31
    54c0:	2201      	movs	r2, #1
    54c2:	fa02 f303 	lsl.w	r3, r2, r3
    54c6:	43da      	mvns	r2, r3
    54c8:	9b01      	ldr	r3, [sp, #4]
    54ca:	6858      	ldr	r0, [r3, #4]
    54cc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54d0:	005b      	lsls	r3, r3, #1
    54d2:	4403      	add	r3, r0
    54d4:	881b      	ldrh	r3, [r3, #0]
    54d6:	095b      	lsrs	r3, r3, #5
    54d8:	b29b      	uxth	r3, r3
    54da:	4618      	mov	r0, r3
    54dc:	4b44      	ldr	r3, [pc, #272]	; (55f0 <Port_Ipw_Init_UnusedPins+0x26c>)
    54de:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    54e2:	400a      	ands	r2, r1
    54e4:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    54e6:	f000 fdcf 	bl	6088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    54ea:	f000 fdf3 	bl	60d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    54ee:	9b01      	ldr	r3, [sp, #4]
    54f0:	685a      	ldr	r2, [r3, #4]
    54f2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54f6:	005b      	lsls	r3, r3, #1
    54f8:	4413      	add	r3, r2
    54fa:	881b      	ldrh	r3, [r3, #0]
    54fc:	095b      	lsrs	r3, r3, #5
    54fe:	b29b      	uxth	r3, r3
    5500:	461a      	mov	r2, r3
    5502:	4b3b      	ldr	r3, [pc, #236]	; (55f0 <Port_Ipw_Init_UnusedPins+0x26c>)
    5504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5508:	6999      	ldr	r1, [r3, #24]
    550a:	9b01      	ldr	r3, [sp, #4]
    550c:	685a      	ldr	r2, [r3, #4]
    550e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5512:	005b      	lsls	r3, r3, #1
    5514:	4413      	add	r3, r2
    5516:	881b      	ldrh	r3, [r3, #0]
    5518:	f003 031f 	and.w	r3, r3, #31
    551c:	2201      	movs	r2, #1
    551e:	fa02 f303 	lsl.w	r3, r2, r3
    5522:	43da      	mvns	r2, r3
    5524:	9b01      	ldr	r3, [sp, #4]
    5526:	6858      	ldr	r0, [r3, #4]
    5528:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    552c:	005b      	lsls	r3, r3, #1
    552e:	4403      	add	r3, r0
    5530:	881b      	ldrh	r3, [r3, #0]
    5532:	095b      	lsrs	r3, r3, #5
    5534:	b29b      	uxth	r3, r3
    5536:	4618      	mov	r0, r3
    5538:	4b2d      	ldr	r3, [pc, #180]	; (55f0 <Port_Ipw_Init_UnusedPins+0x26c>)
    553a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    553e:	400a      	ands	r2, r1
    5540:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    5542:	9b02      	ldr	r3, [sp, #8]
    5544:	2b03      	cmp	r3, #3
    5546:	d127      	bne.n	5598 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5548:	9b01      	ldr	r3, [sp, #4]
    554a:	685a      	ldr	r2, [r3, #4]
    554c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5550:	005b      	lsls	r3, r3, #1
    5552:	4413      	add	r3, r2
    5554:	881b      	ldrh	r3, [r3, #0]
    5556:	095b      	lsrs	r3, r3, #5
    5558:	b29b      	uxth	r3, r3
    555a:	461a      	mov	r2, r3
    555c:	4b24      	ldr	r3, [pc, #144]	; (55f0 <Port_Ipw_Init_UnusedPins+0x26c>)
    555e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5562:	6999      	ldr	r1, [r3, #24]
    5564:	9b01      	ldr	r3, [sp, #4]
    5566:	685a      	ldr	r2, [r3, #4]
    5568:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    556c:	005b      	lsls	r3, r3, #1
    556e:	4413      	add	r3, r2
    5570:	881b      	ldrh	r3, [r3, #0]
    5572:	f003 031f 	and.w	r3, r3, #31
    5576:	2201      	movs	r2, #1
    5578:	409a      	lsls	r2, r3
    557a:	9b01      	ldr	r3, [sp, #4]
    557c:	6858      	ldr	r0, [r3, #4]
    557e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5582:	005b      	lsls	r3, r3, #1
    5584:	4403      	add	r3, r0
    5586:	881b      	ldrh	r3, [r3, #0]
    5588:	095b      	lsrs	r3, r3, #5
    558a:	b29b      	uxth	r3, r3
    558c:	4618      	mov	r0, r3
    558e:	4b18      	ldr	r3, [pc, #96]	; (55f0 <Port_Ipw_Init_UnusedPins+0x26c>)
    5590:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5594:	430a      	orrs	r2, r1
    5596:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    5598:	f000 fdc8 	bl	612c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    559c:	9b01      	ldr	r3, [sp, #4]
    559e:	685a      	ldr	r2, [r3, #4]
    55a0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    55a4:	005b      	lsls	r3, r3, #1
    55a6:	4413      	add	r3, r2
    55a8:	881b      	ldrh	r3, [r3, #0]
    55aa:	095b      	lsrs	r3, r3, #5
    55ac:	b29b      	uxth	r3, r3
    55ae:	461a      	mov	r2, r3
    55b0:	4b10      	ldr	r3, [pc, #64]	; (55f4 <Port_Ipw_Init_UnusedPins+0x270>)
    55b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    55b6:	9a01      	ldr	r2, [sp, #4]
    55b8:	6851      	ldr	r1, [r2, #4]
    55ba:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    55be:	0052      	lsls	r2, r2, #1
    55c0:	440a      	add	r2, r1
    55c2:	8812      	ldrh	r2, [r2, #0]
    55c4:	f002 021f 	and.w	r2, r2, #31
    55c8:	9903      	ldr	r1, [sp, #12]
    55ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    55ce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    55d2:	3301      	adds	r3, #1
    55d4:	f8ad 3016 	strh.w	r3, [sp, #22]
    55d8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    55dc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    55e0:	429a      	cmp	r2, r3
    55e2:	f4ff aee7 	bcc.w	53b4 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    55e6:	bf00      	nop
    55e8:	bf00      	nop
    55ea:	b007      	add	sp, #28
    55ec:	f85d fb04 	ldr.w	pc, [sp], #4
    55f0:	000073f8 	.word	0x000073f8
    55f4:	000073e4 	.word	0x000073e4

000055f8 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    55f8:	b500      	push	{lr}
    55fa:	b085      	sub	sp, #20
    55fc:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    55fe:	9b01      	ldr	r3, [sp, #4]
    5600:	7c1b      	ldrb	r3, [r3, #16]
    5602:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5606:	2300      	movs	r3, #0
    5608:	f8ad 300e 	strh.w	r3, [sp, #14]
    560c:	e035      	b.n	567a <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    560e:	9b01      	ldr	r3, [sp, #4]
    5610:	695a      	ldr	r2, [r3, #20]
    5612:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5616:	00db      	lsls	r3, r3, #3
    5618:	4413      	add	r3, r2
    561a:	781b      	ldrb	r3, [r3, #0]
    561c:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    5620:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5624:	4a1f      	ldr	r2, [pc, #124]	; (56a4 <Port_Ipw_Init+0xac>)
    5626:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    562a:	9b01      	ldr	r3, [sp, #4]
    562c:	695a      	ldr	r2, [r3, #20]
    562e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5632:	00db      	lsls	r3, r3, #3
    5634:	4413      	add	r3, r2
    5636:	4619      	mov	r1, r3
    5638:	f7ff fe39 	bl	52ae <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    563c:	f000 fee4 	bl	6408 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    5640:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5644:	4a17      	ldr	r2, [pc, #92]	; (56a4 <Port_Ipw_Init+0xac>)
    5646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    564a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    564e:	9b01      	ldr	r3, [sp, #4]
    5650:	695a      	ldr	r2, [r3, #20]
    5652:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5656:	00db      	lsls	r3, r3, #3
    5658:	4413      	add	r3, r2
    565a:	685a      	ldr	r2, [r3, #4]
    565c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5660:	4810      	ldr	r0, [pc, #64]	; (56a4 <Port_Ipw_Init+0xac>)
    5662:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5666:	430a      	orrs	r2, r1
    5668:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    566c:	f000 fef8 	bl	6460 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5670:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5674:	3301      	adds	r3, #1
    5676:	f8ad 300e 	strh.w	r3, [sp, #14]
    567a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    567e:	b29b      	uxth	r3, r3
    5680:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5684:	429a      	cmp	r2, r3
    5686:	d3c2      	bcc.n	560e <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    5688:	9b01      	ldr	r3, [sp, #4]
    568a:	6a1b      	ldr	r3, [r3, #32]
    568c:	4619      	mov	r1, r3
    568e:	2001      	movs	r0, #1
    5690:	f7ff fd98 	bl	51c4 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    5694:	9801      	ldr	r0, [sp, #4]
    5696:	f7ff fe75 	bl	5384 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    569a:	bf00      	nop
    569c:	b005      	add	sp, #20
    569e:	f85d fb04 	ldr.w	pc, [sp], #4
    56a2:	bf00      	nop
    56a4:	000073e4 	.word	0x000073e4

000056a8 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    56a8:	b500      	push	{lr}
    56aa:	b085      	sub	sp, #20
    56ac:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    56ae:	9b01      	ldr	r3, [sp, #4]
    56b0:	881b      	ldrh	r3, [r3, #0]
    56b2:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    56b6:	2300      	movs	r3, #0
    56b8:	f8ad 300e 	strh.w	r3, [sp, #14]
    56bc:	e0d2      	b.n	5864 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    56be:	9b01      	ldr	r3, [sp, #4]
    56c0:	68d9      	ldr	r1, [r3, #12]
    56c2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56c6:	4613      	mov	r3, r2
    56c8:	009b      	lsls	r3, r3, #2
    56ca:	4413      	add	r3, r2
    56cc:	009b      	lsls	r3, r3, #2
    56ce:	440b      	add	r3, r1
    56d0:	7c5b      	ldrb	r3, [r3, #17]
    56d2:	f083 0301 	eor.w	r3, r3, #1
    56d6:	b2db      	uxtb	r3, r3
    56d8:	2b00      	cmp	r3, #0
    56da:	f000 80be 	beq.w	585a <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    56de:	9b01      	ldr	r3, [sp, #4]
    56e0:	68d9      	ldr	r1, [r3, #12]
    56e2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56e6:	4613      	mov	r3, r2
    56e8:	009b      	lsls	r3, r3, #2
    56ea:	4413      	add	r3, r2
    56ec:	009b      	lsls	r3, r3, #2
    56ee:	440b      	add	r3, r1
    56f0:	7c1b      	ldrb	r3, [r3, #16]
    56f2:	2b00      	cmp	r3, #0
    56f4:	f000 80b1 	beq.w	585a <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    56f8:	9b01      	ldr	r3, [sp, #4]
    56fa:	68d9      	ldr	r1, [r3, #12]
    56fc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5700:	4613      	mov	r3, r2
    5702:	009b      	lsls	r3, r3, #2
    5704:	4413      	add	r3, r2
    5706:	009b      	lsls	r3, r3, #2
    5708:	440b      	add	r3, r1
    570a:	881b      	ldrh	r3, [r3, #0]
    570c:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5710:	9b01      	ldr	r3, [sp, #4]
    5712:	68d9      	ldr	r1, [r3, #12]
    5714:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5718:	4613      	mov	r3, r2
    571a:	009b      	lsls	r3, r3, #2
    571c:	4413      	add	r3, r2
    571e:	009b      	lsls	r3, r3, #2
    5720:	440b      	add	r3, r1
    5722:	68db      	ldr	r3, [r3, #12]
    5724:	2b02      	cmp	r3, #2
    5726:	d11d      	bne.n	5764 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5728:	f000 ffb6 	bl	6698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    572c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5730:	095b      	lsrs	r3, r3, #5
    5732:	b29b      	uxth	r3, r3
    5734:	461a      	mov	r2, r3
    5736:	4b51      	ldr	r3, [pc, #324]	; (587c <Port_Ipw_RefreshPortDirection+0x1d4>)
    5738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    573c:	6959      	ldr	r1, [r3, #20]
    573e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5742:	f003 031f 	and.w	r3, r3, #31
    5746:	2201      	movs	r2, #1
    5748:	409a      	lsls	r2, r3
    574a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    574e:	095b      	lsrs	r3, r3, #5
    5750:	b29b      	uxth	r3, r3
    5752:	4618      	mov	r0, r3
    5754:	4b49      	ldr	r3, [pc, #292]	; (587c <Port_Ipw_RefreshPortDirection+0x1d4>)
    5756:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    575a:	430a      	orrs	r2, r1
    575c:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    575e:	f000 ffc7 	bl	66f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    5762:	e07a      	b.n	585a <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    5764:	9b01      	ldr	r3, [sp, #4]
    5766:	68d9      	ldr	r1, [r3, #12]
    5768:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    576c:	4613      	mov	r3, r2
    576e:	009b      	lsls	r3, r3, #2
    5770:	4413      	add	r3, r2
    5772:	009b      	lsls	r3, r3, #2
    5774:	440b      	add	r3, r1
    5776:	68db      	ldr	r3, [r3, #12]
    5778:	2b01      	cmp	r3, #1
    577a:	d00b      	beq.n	5794 <Port_Ipw_RefreshPortDirection+0xec>
    577c:	9b01      	ldr	r3, [sp, #4]
    577e:	68d9      	ldr	r1, [r3, #12]
    5780:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5784:	4613      	mov	r3, r2
    5786:	009b      	lsls	r3, r3, #2
    5788:	4413      	add	r3, r2
    578a:	009b      	lsls	r3, r3, #2
    578c:	440b      	add	r3, r1
    578e:	68db      	ldr	r3, [r3, #12]
    5790:	2b03      	cmp	r3, #3
    5792:	d162      	bne.n	585a <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5794:	f000 ff80 	bl	6698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5798:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    579c:	095b      	lsrs	r3, r3, #5
    579e:	b29b      	uxth	r3, r3
    57a0:	461a      	mov	r2, r3
    57a2:	4b36      	ldr	r3, [pc, #216]	; (587c <Port_Ipw_RefreshPortDirection+0x1d4>)
    57a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    57a8:	6959      	ldr	r1, [r3, #20]
    57aa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57ae:	f003 031f 	and.w	r3, r3, #31
    57b2:	2201      	movs	r2, #1
    57b4:	fa02 f303 	lsl.w	r3, r2, r3
    57b8:	43da      	mvns	r2, r3
    57ba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57be:	095b      	lsrs	r3, r3, #5
    57c0:	b29b      	uxth	r3, r3
    57c2:	4618      	mov	r0, r3
    57c4:	4b2d      	ldr	r3, [pc, #180]	; (587c <Port_Ipw_RefreshPortDirection+0x1d4>)
    57c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    57ca:	400a      	ands	r2, r1
    57cc:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    57ce:	f000 ff8f 	bl	66f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    57d2:	f000 ffb3 	bl	673c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    57d6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57da:	095b      	lsrs	r3, r3, #5
    57dc:	b29b      	uxth	r3, r3
    57de:	461a      	mov	r2, r3
    57e0:	4b26      	ldr	r3, [pc, #152]	; (587c <Port_Ipw_RefreshPortDirection+0x1d4>)
    57e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    57e6:	6999      	ldr	r1, [r3, #24]
    57e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57ec:	f003 031f 	and.w	r3, r3, #31
    57f0:	2201      	movs	r2, #1
    57f2:	fa02 f303 	lsl.w	r3, r2, r3
    57f6:	43da      	mvns	r2, r3
    57f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57fc:	095b      	lsrs	r3, r3, #5
    57fe:	b29b      	uxth	r3, r3
    5800:	4618      	mov	r0, r3
    5802:	4b1e      	ldr	r3, [pc, #120]	; (587c <Port_Ipw_RefreshPortDirection+0x1d4>)
    5804:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5808:	400a      	ands	r2, r1
    580a:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    580c:	9b01      	ldr	r3, [sp, #4]
    580e:	68d9      	ldr	r1, [r3, #12]
    5810:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5814:	4613      	mov	r3, r2
    5816:	009b      	lsls	r3, r3, #2
    5818:	4413      	add	r3, r2
    581a:	009b      	lsls	r3, r3, #2
    581c:	440b      	add	r3, r1
    581e:	68db      	ldr	r3, [r3, #12]
    5820:	2b03      	cmp	r3, #3
    5822:	d118      	bne.n	5856 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5824:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5828:	095b      	lsrs	r3, r3, #5
    582a:	b29b      	uxth	r3, r3
    582c:	461a      	mov	r2, r3
    582e:	4b13      	ldr	r3, [pc, #76]	; (587c <Port_Ipw_RefreshPortDirection+0x1d4>)
    5830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5834:	6999      	ldr	r1, [r3, #24]
    5836:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    583a:	f003 031f 	and.w	r3, r3, #31
    583e:	2201      	movs	r2, #1
    5840:	409a      	lsls	r2, r3
    5842:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5846:	095b      	lsrs	r3, r3, #5
    5848:	b29b      	uxth	r3, r3
    584a:	4618      	mov	r0, r3
    584c:	4b0b      	ldr	r3, [pc, #44]	; (587c <Port_Ipw_RefreshPortDirection+0x1d4>)
    584e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5852:	430a      	orrs	r2, r1
    5854:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    5856:	f000 ff9d 	bl	6794 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    585a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    585e:	3301      	adds	r3, #1
    5860:	f8ad 300e 	strh.w	r3, [sp, #14]
    5864:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5868:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    586c:	429a      	cmp	r2, r3
    586e:	f4ff af26 	bcc.w	56be <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    5872:	bf00      	nop
    5874:	bf00      	nop
    5876:	b005      	add	sp, #20
    5878:	f85d fb04 	ldr.w	pc, [sp], #4
    587c:	000073f8 	.word	0x000073f8

00005880 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    5880:	b500      	push	{lr}
    5882:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5884:	f7fb f904 	bl	a90 <Sys_GetCoreID>
    5888:	4603      	mov	r3, r0
    588a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    588c:	4a10      	ldr	r2, [pc, #64]	; (58d0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    588e:	9b01      	ldr	r3, [sp, #4]
    5890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5894:	2b00      	cmp	r3, #0
    5896:	d10d      	bne.n	58b4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5898:	f7fb f822 	bl	8e0 <Mcu_schm_read_msr>
    589c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    589e:	9b00      	ldr	r3, [sp, #0]
    58a0:	f003 0301 	and.w	r3, r3, #1
    58a4:	2b00      	cmp	r3, #0
    58a6:	d100      	bne.n	58aa <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    58a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    58aa:	490a      	ldr	r1, [pc, #40]	; (58d4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    58ac:	9b01      	ldr	r3, [sp, #4]
    58ae:	9a00      	ldr	r2, [sp, #0]
    58b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    58b4:	4a06      	ldr	r2, [pc, #24]	; (58d0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    58b6:	9b01      	ldr	r3, [sp, #4]
    58b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    58bc:	1c5a      	adds	r2, r3, #1
    58be:	4904      	ldr	r1, [pc, #16]	; (58d0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    58c0:	9b01      	ldr	r3, [sp, #4]
    58c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    58c6:	bf00      	nop
    58c8:	b003      	add	sp, #12
    58ca:	f85d fb04 	ldr.w	pc, [sp], #4
    58ce:	bf00      	nop
    58d0:	1fff8cec 	.word	0x1fff8cec
    58d4:	1fff8ce8 	.word	0x1fff8ce8

000058d8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    58d8:	b500      	push	{lr}
    58da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    58dc:	f7fb f8d8 	bl	a90 <Sys_GetCoreID>
    58e0:	4603      	mov	r3, r0
    58e2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    58e4:	4a0d      	ldr	r2, [pc, #52]	; (591c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    58e6:	9b01      	ldr	r3, [sp, #4]
    58e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    58ec:	1e5a      	subs	r2, r3, #1
    58ee:	490b      	ldr	r1, [pc, #44]	; (591c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    58f0:	9b01      	ldr	r3, [sp, #4]
    58f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    58f6:	4a0a      	ldr	r2, [pc, #40]	; (5920 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    58f8:	9b01      	ldr	r3, [sp, #4]
    58fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    58fe:	f003 0301 	and.w	r3, r3, #1
    5902:	2b00      	cmp	r3, #0
    5904:	d106      	bne.n	5914 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    5906:	4a05      	ldr	r2, [pc, #20]	; (591c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    5908:	9b01      	ldr	r3, [sp, #4]
    590a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    590e:	2b00      	cmp	r3, #0
    5910:	d100      	bne.n	5914 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5912:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5914:	bf00      	nop
    5916:	b003      	add	sp, #12
    5918:	f85d fb04 	ldr.w	pc, [sp], #4
    591c:	1fff8cec 	.word	0x1fff8cec
    5920:	1fff8ce8 	.word	0x1fff8ce8

00005924 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    5924:	b500      	push	{lr}
    5926:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5928:	f7fb f8b2 	bl	a90 <Sys_GetCoreID>
    592c:	4603      	mov	r3, r0
    592e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    5930:	4a10      	ldr	r2, [pc, #64]	; (5974 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    5932:	9b01      	ldr	r3, [sp, #4]
    5934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5938:	2b00      	cmp	r3, #0
    593a:	d10d      	bne.n	5958 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    593c:	f7fa ffd0 	bl	8e0 <Mcu_schm_read_msr>
    5940:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5942:	9b00      	ldr	r3, [sp, #0]
    5944:	f003 0301 	and.w	r3, r3, #1
    5948:	2b00      	cmp	r3, #0
    594a:	d100      	bne.n	594e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    594c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    594e:	490a      	ldr	r1, [pc, #40]	; (5978 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    5950:	9b01      	ldr	r3, [sp, #4]
    5952:	9a00      	ldr	r2, [sp, #0]
    5954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    5958:	4a06      	ldr	r2, [pc, #24]	; (5974 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    595a:	9b01      	ldr	r3, [sp, #4]
    595c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5960:	1c5a      	adds	r2, r3, #1
    5962:	4904      	ldr	r1, [pc, #16]	; (5974 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    5964:	9b01      	ldr	r3, [sp, #4]
    5966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    596a:	bf00      	nop
    596c:	b003      	add	sp, #12
    596e:	f85d fb04 	ldr.w	pc, [sp], #4
    5972:	bf00      	nop
    5974:	1fff8cf4 	.word	0x1fff8cf4
    5978:	1fff8cf0 	.word	0x1fff8cf0

0000597c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    597c:	b500      	push	{lr}
    597e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5980:	f7fb f886 	bl	a90 <Sys_GetCoreID>
    5984:	4603      	mov	r3, r0
    5986:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    5988:	4a0d      	ldr	r2, [pc, #52]	; (59c0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    598a:	9b01      	ldr	r3, [sp, #4]
    598c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5990:	1e5a      	subs	r2, r3, #1
    5992:	490b      	ldr	r1, [pc, #44]	; (59c0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    5994:	9b01      	ldr	r3, [sp, #4]
    5996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    599a:	4a0a      	ldr	r2, [pc, #40]	; (59c4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    599c:	9b01      	ldr	r3, [sp, #4]
    599e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    59a2:	f003 0301 	and.w	r3, r3, #1
    59a6:	2b00      	cmp	r3, #0
    59a8:	d106      	bne.n	59b8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    59aa:	4a05      	ldr	r2, [pc, #20]	; (59c0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    59ac:	9b01      	ldr	r3, [sp, #4]
    59ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    59b2:	2b00      	cmp	r3, #0
    59b4:	d100      	bne.n	59b8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    59b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    59b8:	bf00      	nop
    59ba:	b003      	add	sp, #12
    59bc:	f85d fb04 	ldr.w	pc, [sp], #4
    59c0:	1fff8cf4 	.word	0x1fff8cf4
    59c4:	1fff8cf0 	.word	0x1fff8cf0

000059c8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    59c8:	b500      	push	{lr}
    59ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    59cc:	f7fb f860 	bl	a90 <Sys_GetCoreID>
    59d0:	4603      	mov	r3, r0
    59d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    59d4:	4a10      	ldr	r2, [pc, #64]	; (5a18 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    59d6:	9b01      	ldr	r3, [sp, #4]
    59d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    59dc:	2b00      	cmp	r3, #0
    59de:	d10d      	bne.n	59fc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    59e0:	f7fa ff7e 	bl	8e0 <Mcu_schm_read_msr>
    59e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    59e6:	9b00      	ldr	r3, [sp, #0]
    59e8:	f003 0301 	and.w	r3, r3, #1
    59ec:	2b00      	cmp	r3, #0
    59ee:	d100      	bne.n	59f2 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    59f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    59f2:	490a      	ldr	r1, [pc, #40]	; (5a1c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    59f4:	9b01      	ldr	r3, [sp, #4]
    59f6:	9a00      	ldr	r2, [sp, #0]
    59f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    59fc:	4a06      	ldr	r2, [pc, #24]	; (5a18 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    59fe:	9b01      	ldr	r3, [sp, #4]
    5a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5a04:	1c5a      	adds	r2, r3, #1
    5a06:	4904      	ldr	r1, [pc, #16]	; (5a18 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    5a08:	9b01      	ldr	r3, [sp, #4]
    5a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5a0e:	bf00      	nop
    5a10:	b003      	add	sp, #12
    5a12:	f85d fb04 	ldr.w	pc, [sp], #4
    5a16:	bf00      	nop
    5a18:	1fff8cfc 	.word	0x1fff8cfc
    5a1c:	1fff8cf8 	.word	0x1fff8cf8

00005a20 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    5a20:	b500      	push	{lr}
    5a22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5a24:	f7fb f834 	bl	a90 <Sys_GetCoreID>
    5a28:	4603      	mov	r3, r0
    5a2a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    5a2c:	4a0d      	ldr	r2, [pc, #52]	; (5a64 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    5a2e:	9b01      	ldr	r3, [sp, #4]
    5a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5a34:	1e5a      	subs	r2, r3, #1
    5a36:	490b      	ldr	r1, [pc, #44]	; (5a64 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    5a38:	9b01      	ldr	r3, [sp, #4]
    5a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    5a3e:	4a0a      	ldr	r2, [pc, #40]	; (5a68 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    5a40:	9b01      	ldr	r3, [sp, #4]
    5a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5a46:	f003 0301 	and.w	r3, r3, #1
    5a4a:	2b00      	cmp	r3, #0
    5a4c:	d106      	bne.n	5a5c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    5a4e:	4a05      	ldr	r2, [pc, #20]	; (5a64 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    5a50:	9b01      	ldr	r3, [sp, #4]
    5a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5a56:	2b00      	cmp	r3, #0
    5a58:	d100      	bne.n	5a5c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5a5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5a5c:	bf00      	nop
    5a5e:	b003      	add	sp, #12
    5a60:	f85d fb04 	ldr.w	pc, [sp], #4
    5a64:	1fff8cfc 	.word	0x1fff8cfc
    5a68:	1fff8cf8 	.word	0x1fff8cf8

00005a6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    5a6c:	b500      	push	{lr}
    5a6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5a70:	f7fb f80e 	bl	a90 <Sys_GetCoreID>
    5a74:	4603      	mov	r3, r0
    5a76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    5a78:	4a10      	ldr	r2, [pc, #64]	; (5abc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    5a7a:	9b01      	ldr	r3, [sp, #4]
    5a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5a80:	2b00      	cmp	r3, #0
    5a82:	d10d      	bne.n	5aa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5a84:	f7fa ff35 	bl	8f2 <Port_schm_read_msr>
    5a88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5a8a:	9b00      	ldr	r3, [sp, #0]
    5a8c:	f003 0301 	and.w	r3, r3, #1
    5a90:	2b00      	cmp	r3, #0
    5a92:	d100      	bne.n	5a96 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5a94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    5a96:	490a      	ldr	r1, [pc, #40]	; (5ac0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    5a98:	9b01      	ldr	r3, [sp, #4]
    5a9a:	9a00      	ldr	r2, [sp, #0]
    5a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    5aa0:	4a06      	ldr	r2, [pc, #24]	; (5abc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    5aa2:	9b01      	ldr	r3, [sp, #4]
    5aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5aa8:	1c5a      	adds	r2, r3, #1
    5aaa:	4904      	ldr	r1, [pc, #16]	; (5abc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    5aac:	9b01      	ldr	r3, [sp, #4]
    5aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5ab2:	bf00      	nop
    5ab4:	b003      	add	sp, #12
    5ab6:	f85d fb04 	ldr.w	pc, [sp], #4
    5aba:	bf00      	nop
    5abc:	1fff8d04 	.word	0x1fff8d04
    5ac0:	1fff8d00 	.word	0x1fff8d00

00005ac4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    5ac4:	b500      	push	{lr}
    5ac6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5ac8:	f7fa ffe2 	bl	a90 <Sys_GetCoreID>
    5acc:	4603      	mov	r3, r0
    5ace:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    5ad0:	4a0d      	ldr	r2, [pc, #52]	; (5b08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    5ad2:	9b01      	ldr	r3, [sp, #4]
    5ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ad8:	1e5a      	subs	r2, r3, #1
    5ada:	490b      	ldr	r1, [pc, #44]	; (5b08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    5adc:	9b01      	ldr	r3, [sp, #4]
    5ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    5ae2:	4a0a      	ldr	r2, [pc, #40]	; (5b0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    5ae4:	9b01      	ldr	r3, [sp, #4]
    5ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5aea:	f003 0301 	and.w	r3, r3, #1
    5aee:	2b00      	cmp	r3, #0
    5af0:	d106      	bne.n	5b00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    5af2:	4a05      	ldr	r2, [pc, #20]	; (5b08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    5af4:	9b01      	ldr	r3, [sp, #4]
    5af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5afa:	2b00      	cmp	r3, #0
    5afc:	d100      	bne.n	5b00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5afe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5b00:	bf00      	nop
    5b02:	b003      	add	sp, #12
    5b04:	f85d fb04 	ldr.w	pc, [sp], #4
    5b08:	1fff8d04 	.word	0x1fff8d04
    5b0c:	1fff8d00 	.word	0x1fff8d00

00005b10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    5b10:	b500      	push	{lr}
    5b12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5b14:	f7fa ffbc 	bl	a90 <Sys_GetCoreID>
    5b18:	4603      	mov	r3, r0
    5b1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    5b1c:	4a10      	ldr	r2, [pc, #64]	; (5b60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    5b1e:	9b01      	ldr	r3, [sp, #4]
    5b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5b24:	2b00      	cmp	r3, #0
    5b26:	d10d      	bne.n	5b44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5b28:	f7fa fee3 	bl	8f2 <Port_schm_read_msr>
    5b2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5b2e:	9b00      	ldr	r3, [sp, #0]
    5b30:	f003 0301 	and.w	r3, r3, #1
    5b34:	2b00      	cmp	r3, #0
    5b36:	d100      	bne.n	5b3a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5b38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    5b3a:	490a      	ldr	r1, [pc, #40]	; (5b64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    5b3c:	9b01      	ldr	r3, [sp, #4]
    5b3e:	9a00      	ldr	r2, [sp, #0]
    5b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    5b44:	4a06      	ldr	r2, [pc, #24]	; (5b60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    5b46:	9b01      	ldr	r3, [sp, #4]
    5b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5b4c:	1c5a      	adds	r2, r3, #1
    5b4e:	4904      	ldr	r1, [pc, #16]	; (5b60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    5b50:	9b01      	ldr	r3, [sp, #4]
    5b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5b56:	bf00      	nop
    5b58:	b003      	add	sp, #12
    5b5a:	f85d fb04 	ldr.w	pc, [sp], #4
    5b5e:	bf00      	nop
    5b60:	1fff8d0c 	.word	0x1fff8d0c
    5b64:	1fff8d08 	.word	0x1fff8d08

00005b68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    5b68:	b500      	push	{lr}
    5b6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5b6c:	f7fa ff90 	bl	a90 <Sys_GetCoreID>
    5b70:	4603      	mov	r3, r0
    5b72:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    5b74:	4a0d      	ldr	r2, [pc, #52]	; (5bac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    5b76:	9b01      	ldr	r3, [sp, #4]
    5b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5b7c:	1e5a      	subs	r2, r3, #1
    5b7e:	490b      	ldr	r1, [pc, #44]	; (5bac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    5b80:	9b01      	ldr	r3, [sp, #4]
    5b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    5b86:	4a0a      	ldr	r2, [pc, #40]	; (5bb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    5b88:	9b01      	ldr	r3, [sp, #4]
    5b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5b8e:	f003 0301 	and.w	r3, r3, #1
    5b92:	2b00      	cmp	r3, #0
    5b94:	d106      	bne.n	5ba4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    5b96:	4a05      	ldr	r2, [pc, #20]	; (5bac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    5b98:	9b01      	ldr	r3, [sp, #4]
    5b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5b9e:	2b00      	cmp	r3, #0
    5ba0:	d100      	bne.n	5ba4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5ba2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5ba4:	bf00      	nop
    5ba6:	b003      	add	sp, #12
    5ba8:	f85d fb04 	ldr.w	pc, [sp], #4
    5bac:	1fff8d0c 	.word	0x1fff8d0c
    5bb0:	1fff8d08 	.word	0x1fff8d08

00005bb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    5bb4:	b500      	push	{lr}
    5bb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5bb8:	f7fa ff6a 	bl	a90 <Sys_GetCoreID>
    5bbc:	4603      	mov	r3, r0
    5bbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    5bc0:	4a10      	ldr	r2, [pc, #64]	; (5c04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    5bc2:	9b01      	ldr	r3, [sp, #4]
    5bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5bc8:	2b00      	cmp	r3, #0
    5bca:	d10d      	bne.n	5be8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5bcc:	f7fa fe91 	bl	8f2 <Port_schm_read_msr>
    5bd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5bd2:	9b00      	ldr	r3, [sp, #0]
    5bd4:	f003 0301 	and.w	r3, r3, #1
    5bd8:	2b00      	cmp	r3, #0
    5bda:	d100      	bne.n	5bde <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5bdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    5bde:	490a      	ldr	r1, [pc, #40]	; (5c08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    5be0:	9b01      	ldr	r3, [sp, #4]
    5be2:	9a00      	ldr	r2, [sp, #0]
    5be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    5be8:	4a06      	ldr	r2, [pc, #24]	; (5c04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    5bea:	9b01      	ldr	r3, [sp, #4]
    5bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5bf0:	1c5a      	adds	r2, r3, #1
    5bf2:	4904      	ldr	r1, [pc, #16]	; (5c04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    5bf4:	9b01      	ldr	r3, [sp, #4]
    5bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5bfa:	bf00      	nop
    5bfc:	b003      	add	sp, #12
    5bfe:	f85d fb04 	ldr.w	pc, [sp], #4
    5c02:	bf00      	nop
    5c04:	1fff8d14 	.word	0x1fff8d14
    5c08:	1fff8d10 	.word	0x1fff8d10

00005c0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    5c0c:	b500      	push	{lr}
    5c0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5c10:	f7fa ff3e 	bl	a90 <Sys_GetCoreID>
    5c14:	4603      	mov	r3, r0
    5c16:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    5c18:	4a0d      	ldr	r2, [pc, #52]	; (5c50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    5c1a:	9b01      	ldr	r3, [sp, #4]
    5c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c20:	1e5a      	subs	r2, r3, #1
    5c22:	490b      	ldr	r1, [pc, #44]	; (5c50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    5c24:	9b01      	ldr	r3, [sp, #4]
    5c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    5c2a:	4a0a      	ldr	r2, [pc, #40]	; (5c54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    5c2c:	9b01      	ldr	r3, [sp, #4]
    5c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c32:	f003 0301 	and.w	r3, r3, #1
    5c36:	2b00      	cmp	r3, #0
    5c38:	d106      	bne.n	5c48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    5c3a:	4a05      	ldr	r2, [pc, #20]	; (5c50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    5c3c:	9b01      	ldr	r3, [sp, #4]
    5c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c42:	2b00      	cmp	r3, #0
    5c44:	d100      	bne.n	5c48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5c46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5c48:	bf00      	nop
    5c4a:	b003      	add	sp, #12
    5c4c:	f85d fb04 	ldr.w	pc, [sp], #4
    5c50:	1fff8d14 	.word	0x1fff8d14
    5c54:	1fff8d10 	.word	0x1fff8d10

00005c58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    5c58:	b500      	push	{lr}
    5c5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5c5c:	f7fa ff18 	bl	a90 <Sys_GetCoreID>
    5c60:	4603      	mov	r3, r0
    5c62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    5c64:	4a10      	ldr	r2, [pc, #64]	; (5ca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    5c66:	9b01      	ldr	r3, [sp, #4]
    5c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c6c:	2b00      	cmp	r3, #0
    5c6e:	d10d      	bne.n	5c8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5c70:	f7fa fe3f 	bl	8f2 <Port_schm_read_msr>
    5c74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5c76:	9b00      	ldr	r3, [sp, #0]
    5c78:	f003 0301 	and.w	r3, r3, #1
    5c7c:	2b00      	cmp	r3, #0
    5c7e:	d100      	bne.n	5c82 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5c80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    5c82:	490a      	ldr	r1, [pc, #40]	; (5cac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    5c84:	9b01      	ldr	r3, [sp, #4]
    5c86:	9a00      	ldr	r2, [sp, #0]
    5c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    5c8c:	4a06      	ldr	r2, [pc, #24]	; (5ca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    5c8e:	9b01      	ldr	r3, [sp, #4]
    5c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c94:	1c5a      	adds	r2, r3, #1
    5c96:	4904      	ldr	r1, [pc, #16]	; (5ca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    5c98:	9b01      	ldr	r3, [sp, #4]
    5c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5c9e:	bf00      	nop
    5ca0:	b003      	add	sp, #12
    5ca2:	f85d fb04 	ldr.w	pc, [sp], #4
    5ca6:	bf00      	nop
    5ca8:	1fff8d1c 	.word	0x1fff8d1c
    5cac:	1fff8d18 	.word	0x1fff8d18

00005cb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    5cb0:	b500      	push	{lr}
    5cb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5cb4:	f7fa feec 	bl	a90 <Sys_GetCoreID>
    5cb8:	4603      	mov	r3, r0
    5cba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    5cbc:	4a0d      	ldr	r2, [pc, #52]	; (5cf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    5cbe:	9b01      	ldr	r3, [sp, #4]
    5cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5cc4:	1e5a      	subs	r2, r3, #1
    5cc6:	490b      	ldr	r1, [pc, #44]	; (5cf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    5cc8:	9b01      	ldr	r3, [sp, #4]
    5cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    5cce:	4a0a      	ldr	r2, [pc, #40]	; (5cf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    5cd0:	9b01      	ldr	r3, [sp, #4]
    5cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5cd6:	f003 0301 	and.w	r3, r3, #1
    5cda:	2b00      	cmp	r3, #0
    5cdc:	d106      	bne.n	5cec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    5cde:	4a05      	ldr	r2, [pc, #20]	; (5cf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    5ce0:	9b01      	ldr	r3, [sp, #4]
    5ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ce6:	2b00      	cmp	r3, #0
    5ce8:	d100      	bne.n	5cec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5cea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5cec:	bf00      	nop
    5cee:	b003      	add	sp, #12
    5cf0:	f85d fb04 	ldr.w	pc, [sp], #4
    5cf4:	1fff8d1c 	.word	0x1fff8d1c
    5cf8:	1fff8d18 	.word	0x1fff8d18

00005cfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    5cfc:	b500      	push	{lr}
    5cfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5d00:	f7fa fec6 	bl	a90 <Sys_GetCoreID>
    5d04:	4603      	mov	r3, r0
    5d06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    5d08:	4a10      	ldr	r2, [pc, #64]	; (5d4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    5d0a:	9b01      	ldr	r3, [sp, #4]
    5d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d10:	2b00      	cmp	r3, #0
    5d12:	d10d      	bne.n	5d30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5d14:	f7fa fded 	bl	8f2 <Port_schm_read_msr>
    5d18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5d1a:	9b00      	ldr	r3, [sp, #0]
    5d1c:	f003 0301 	and.w	r3, r3, #1
    5d20:	2b00      	cmp	r3, #0
    5d22:	d100      	bne.n	5d26 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5d24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    5d26:	490a      	ldr	r1, [pc, #40]	; (5d50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    5d28:	9b01      	ldr	r3, [sp, #4]
    5d2a:	9a00      	ldr	r2, [sp, #0]
    5d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    5d30:	4a06      	ldr	r2, [pc, #24]	; (5d4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    5d32:	9b01      	ldr	r3, [sp, #4]
    5d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d38:	1c5a      	adds	r2, r3, #1
    5d3a:	4904      	ldr	r1, [pc, #16]	; (5d4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    5d3c:	9b01      	ldr	r3, [sp, #4]
    5d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5d42:	bf00      	nop
    5d44:	b003      	add	sp, #12
    5d46:	f85d fb04 	ldr.w	pc, [sp], #4
    5d4a:	bf00      	nop
    5d4c:	1fff8d24 	.word	0x1fff8d24
    5d50:	1fff8d20 	.word	0x1fff8d20

00005d54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    5d54:	b500      	push	{lr}
    5d56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5d58:	f7fa fe9a 	bl	a90 <Sys_GetCoreID>
    5d5c:	4603      	mov	r3, r0
    5d5e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    5d60:	4a0d      	ldr	r2, [pc, #52]	; (5d98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    5d62:	9b01      	ldr	r3, [sp, #4]
    5d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d68:	1e5a      	subs	r2, r3, #1
    5d6a:	490b      	ldr	r1, [pc, #44]	; (5d98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    5d6c:	9b01      	ldr	r3, [sp, #4]
    5d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    5d72:	4a0a      	ldr	r2, [pc, #40]	; (5d9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    5d74:	9b01      	ldr	r3, [sp, #4]
    5d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d7a:	f003 0301 	and.w	r3, r3, #1
    5d7e:	2b00      	cmp	r3, #0
    5d80:	d106      	bne.n	5d90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    5d82:	4a05      	ldr	r2, [pc, #20]	; (5d98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    5d84:	9b01      	ldr	r3, [sp, #4]
    5d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d8a:	2b00      	cmp	r3, #0
    5d8c:	d100      	bne.n	5d90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5d8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5d90:	bf00      	nop
    5d92:	b003      	add	sp, #12
    5d94:	f85d fb04 	ldr.w	pc, [sp], #4
    5d98:	1fff8d24 	.word	0x1fff8d24
    5d9c:	1fff8d20 	.word	0x1fff8d20

00005da0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    5da0:	b500      	push	{lr}
    5da2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5da4:	f7fa fe74 	bl	a90 <Sys_GetCoreID>
    5da8:	4603      	mov	r3, r0
    5daa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    5dac:	4a10      	ldr	r2, [pc, #64]	; (5df0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    5dae:	9b01      	ldr	r3, [sp, #4]
    5db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5db4:	2b00      	cmp	r3, #0
    5db6:	d10d      	bne.n	5dd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5db8:	f7fa fd9b 	bl	8f2 <Port_schm_read_msr>
    5dbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5dbe:	9b00      	ldr	r3, [sp, #0]
    5dc0:	f003 0301 	and.w	r3, r3, #1
    5dc4:	2b00      	cmp	r3, #0
    5dc6:	d100      	bne.n	5dca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5dc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    5dca:	490a      	ldr	r1, [pc, #40]	; (5df4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    5dcc:	9b01      	ldr	r3, [sp, #4]
    5dce:	9a00      	ldr	r2, [sp, #0]
    5dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    5dd4:	4a06      	ldr	r2, [pc, #24]	; (5df0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    5dd6:	9b01      	ldr	r3, [sp, #4]
    5dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ddc:	1c5a      	adds	r2, r3, #1
    5dde:	4904      	ldr	r1, [pc, #16]	; (5df0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    5de0:	9b01      	ldr	r3, [sp, #4]
    5de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5de6:	bf00      	nop
    5de8:	b003      	add	sp, #12
    5dea:	f85d fb04 	ldr.w	pc, [sp], #4
    5dee:	bf00      	nop
    5df0:	1fff8d2c 	.word	0x1fff8d2c
    5df4:	1fff8d28 	.word	0x1fff8d28

00005df8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    5df8:	b500      	push	{lr}
    5dfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5dfc:	f7fa fe48 	bl	a90 <Sys_GetCoreID>
    5e00:	4603      	mov	r3, r0
    5e02:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    5e04:	4a0d      	ldr	r2, [pc, #52]	; (5e3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    5e06:	9b01      	ldr	r3, [sp, #4]
    5e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e0c:	1e5a      	subs	r2, r3, #1
    5e0e:	490b      	ldr	r1, [pc, #44]	; (5e3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    5e10:	9b01      	ldr	r3, [sp, #4]
    5e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    5e16:	4a0a      	ldr	r2, [pc, #40]	; (5e40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    5e18:	9b01      	ldr	r3, [sp, #4]
    5e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e1e:	f003 0301 	and.w	r3, r3, #1
    5e22:	2b00      	cmp	r3, #0
    5e24:	d106      	bne.n	5e34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    5e26:	4a05      	ldr	r2, [pc, #20]	; (5e3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    5e28:	9b01      	ldr	r3, [sp, #4]
    5e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e2e:	2b00      	cmp	r3, #0
    5e30:	d100      	bne.n	5e34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5e32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5e34:	bf00      	nop
    5e36:	b003      	add	sp, #12
    5e38:	f85d fb04 	ldr.w	pc, [sp], #4
    5e3c:	1fff8d2c 	.word	0x1fff8d2c
    5e40:	1fff8d28 	.word	0x1fff8d28

00005e44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    5e44:	b500      	push	{lr}
    5e46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5e48:	f7fa fe22 	bl	a90 <Sys_GetCoreID>
    5e4c:	4603      	mov	r3, r0
    5e4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    5e50:	4a10      	ldr	r2, [pc, #64]	; (5e94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    5e52:	9b01      	ldr	r3, [sp, #4]
    5e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e58:	2b00      	cmp	r3, #0
    5e5a:	d10d      	bne.n	5e78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5e5c:	f7fa fd49 	bl	8f2 <Port_schm_read_msr>
    5e60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5e62:	9b00      	ldr	r3, [sp, #0]
    5e64:	f003 0301 	and.w	r3, r3, #1
    5e68:	2b00      	cmp	r3, #0
    5e6a:	d100      	bne.n	5e6e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5e6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    5e6e:	490a      	ldr	r1, [pc, #40]	; (5e98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    5e70:	9b01      	ldr	r3, [sp, #4]
    5e72:	9a00      	ldr	r2, [sp, #0]
    5e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    5e78:	4a06      	ldr	r2, [pc, #24]	; (5e94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    5e7a:	9b01      	ldr	r3, [sp, #4]
    5e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e80:	1c5a      	adds	r2, r3, #1
    5e82:	4904      	ldr	r1, [pc, #16]	; (5e94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    5e84:	9b01      	ldr	r3, [sp, #4]
    5e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5e8a:	bf00      	nop
    5e8c:	b003      	add	sp, #12
    5e8e:	f85d fb04 	ldr.w	pc, [sp], #4
    5e92:	bf00      	nop
    5e94:	1fff8d34 	.word	0x1fff8d34
    5e98:	1fff8d30 	.word	0x1fff8d30

00005e9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    5e9c:	b500      	push	{lr}
    5e9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5ea0:	f7fa fdf6 	bl	a90 <Sys_GetCoreID>
    5ea4:	4603      	mov	r3, r0
    5ea6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    5ea8:	4a0d      	ldr	r2, [pc, #52]	; (5ee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    5eaa:	9b01      	ldr	r3, [sp, #4]
    5eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5eb0:	1e5a      	subs	r2, r3, #1
    5eb2:	490b      	ldr	r1, [pc, #44]	; (5ee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    5eb4:	9b01      	ldr	r3, [sp, #4]
    5eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    5eba:	4a0a      	ldr	r2, [pc, #40]	; (5ee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    5ebc:	9b01      	ldr	r3, [sp, #4]
    5ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ec2:	f003 0301 	and.w	r3, r3, #1
    5ec6:	2b00      	cmp	r3, #0
    5ec8:	d106      	bne.n	5ed8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    5eca:	4a05      	ldr	r2, [pc, #20]	; (5ee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    5ecc:	9b01      	ldr	r3, [sp, #4]
    5ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ed2:	2b00      	cmp	r3, #0
    5ed4:	d100      	bne.n	5ed8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5ed6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5ed8:	bf00      	nop
    5eda:	b003      	add	sp, #12
    5edc:	f85d fb04 	ldr.w	pc, [sp], #4
    5ee0:	1fff8d34 	.word	0x1fff8d34
    5ee4:	1fff8d30 	.word	0x1fff8d30

00005ee8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    5ee8:	b500      	push	{lr}
    5eea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5eec:	f7fa fdd0 	bl	a90 <Sys_GetCoreID>
    5ef0:	4603      	mov	r3, r0
    5ef2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    5ef4:	4a10      	ldr	r2, [pc, #64]	; (5f38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    5ef6:	9b01      	ldr	r3, [sp, #4]
    5ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5efc:	2b00      	cmp	r3, #0
    5efe:	d10d      	bne.n	5f1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5f00:	f7fa fcf7 	bl	8f2 <Port_schm_read_msr>
    5f04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5f06:	9b00      	ldr	r3, [sp, #0]
    5f08:	f003 0301 	and.w	r3, r3, #1
    5f0c:	2b00      	cmp	r3, #0
    5f0e:	d100      	bne.n	5f12 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5f10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    5f12:	490a      	ldr	r1, [pc, #40]	; (5f3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    5f14:	9b01      	ldr	r3, [sp, #4]
    5f16:	9a00      	ldr	r2, [sp, #0]
    5f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    5f1c:	4a06      	ldr	r2, [pc, #24]	; (5f38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    5f1e:	9b01      	ldr	r3, [sp, #4]
    5f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f24:	1c5a      	adds	r2, r3, #1
    5f26:	4904      	ldr	r1, [pc, #16]	; (5f38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    5f28:	9b01      	ldr	r3, [sp, #4]
    5f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5f2e:	bf00      	nop
    5f30:	b003      	add	sp, #12
    5f32:	f85d fb04 	ldr.w	pc, [sp], #4
    5f36:	bf00      	nop
    5f38:	1fff8d3c 	.word	0x1fff8d3c
    5f3c:	1fff8d38 	.word	0x1fff8d38

00005f40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    5f40:	b500      	push	{lr}
    5f42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5f44:	f7fa fda4 	bl	a90 <Sys_GetCoreID>
    5f48:	4603      	mov	r3, r0
    5f4a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    5f4c:	4a0d      	ldr	r2, [pc, #52]	; (5f84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    5f4e:	9b01      	ldr	r3, [sp, #4]
    5f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f54:	1e5a      	subs	r2, r3, #1
    5f56:	490b      	ldr	r1, [pc, #44]	; (5f84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    5f58:	9b01      	ldr	r3, [sp, #4]
    5f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    5f5e:	4a0a      	ldr	r2, [pc, #40]	; (5f88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    5f60:	9b01      	ldr	r3, [sp, #4]
    5f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f66:	f003 0301 	and.w	r3, r3, #1
    5f6a:	2b00      	cmp	r3, #0
    5f6c:	d106      	bne.n	5f7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    5f6e:	4a05      	ldr	r2, [pc, #20]	; (5f84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    5f70:	9b01      	ldr	r3, [sp, #4]
    5f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f76:	2b00      	cmp	r3, #0
    5f78:	d100      	bne.n	5f7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5f7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5f7c:	bf00      	nop
    5f7e:	b003      	add	sp, #12
    5f80:	f85d fb04 	ldr.w	pc, [sp], #4
    5f84:	1fff8d3c 	.word	0x1fff8d3c
    5f88:	1fff8d38 	.word	0x1fff8d38

00005f8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    5f8c:	b500      	push	{lr}
    5f8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5f90:	f7fa fd7e 	bl	a90 <Sys_GetCoreID>
    5f94:	4603      	mov	r3, r0
    5f96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    5f98:	4a10      	ldr	r2, [pc, #64]	; (5fdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    5f9a:	9b01      	ldr	r3, [sp, #4]
    5f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fa0:	2b00      	cmp	r3, #0
    5fa2:	d10d      	bne.n	5fc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5fa4:	f7fa fca5 	bl	8f2 <Port_schm_read_msr>
    5fa8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5faa:	9b00      	ldr	r3, [sp, #0]
    5fac:	f003 0301 	and.w	r3, r3, #1
    5fb0:	2b00      	cmp	r3, #0
    5fb2:	d100      	bne.n	5fb6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5fb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    5fb6:	490a      	ldr	r1, [pc, #40]	; (5fe0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    5fb8:	9b01      	ldr	r3, [sp, #4]
    5fba:	9a00      	ldr	r2, [sp, #0]
    5fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    5fc0:	4a06      	ldr	r2, [pc, #24]	; (5fdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    5fc2:	9b01      	ldr	r3, [sp, #4]
    5fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fc8:	1c5a      	adds	r2, r3, #1
    5fca:	4904      	ldr	r1, [pc, #16]	; (5fdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    5fcc:	9b01      	ldr	r3, [sp, #4]
    5fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5fd2:	bf00      	nop
    5fd4:	b003      	add	sp, #12
    5fd6:	f85d fb04 	ldr.w	pc, [sp], #4
    5fda:	bf00      	nop
    5fdc:	1fff8d44 	.word	0x1fff8d44
    5fe0:	1fff8d40 	.word	0x1fff8d40

00005fe4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    5fe4:	b500      	push	{lr}
    5fe6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5fe8:	f7fa fd52 	bl	a90 <Sys_GetCoreID>
    5fec:	4603      	mov	r3, r0
    5fee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    5ff0:	4a0d      	ldr	r2, [pc, #52]	; (6028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    5ff2:	9b01      	ldr	r3, [sp, #4]
    5ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ff8:	1e5a      	subs	r2, r3, #1
    5ffa:	490b      	ldr	r1, [pc, #44]	; (6028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    5ffc:	9b01      	ldr	r3, [sp, #4]
    5ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    6002:	4a0a      	ldr	r2, [pc, #40]	; (602c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    6004:	9b01      	ldr	r3, [sp, #4]
    6006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    600a:	f003 0301 	and.w	r3, r3, #1
    600e:	2b00      	cmp	r3, #0
    6010:	d106      	bne.n	6020 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    6012:	4a05      	ldr	r2, [pc, #20]	; (6028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    6014:	9b01      	ldr	r3, [sp, #4]
    6016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    601a:	2b00      	cmp	r3, #0
    601c:	d100      	bne.n	6020 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    601e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6020:	bf00      	nop
    6022:	b003      	add	sp, #12
    6024:	f85d fb04 	ldr.w	pc, [sp], #4
    6028:	1fff8d44 	.word	0x1fff8d44
    602c:	1fff8d40 	.word	0x1fff8d40

00006030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    6030:	b500      	push	{lr}
    6032:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6034:	f7fa fd2c 	bl	a90 <Sys_GetCoreID>
    6038:	4603      	mov	r3, r0
    603a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    603c:	4a10      	ldr	r2, [pc, #64]	; (6080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    603e:	9b01      	ldr	r3, [sp, #4]
    6040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6044:	2b00      	cmp	r3, #0
    6046:	d10d      	bne.n	6064 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6048:	f7fa fc53 	bl	8f2 <Port_schm_read_msr>
    604c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    604e:	9b00      	ldr	r3, [sp, #0]
    6050:	f003 0301 	and.w	r3, r3, #1
    6054:	2b00      	cmp	r3, #0
    6056:	d100      	bne.n	605a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6058:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    605a:	490a      	ldr	r1, [pc, #40]	; (6084 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    605c:	9b01      	ldr	r3, [sp, #4]
    605e:	9a00      	ldr	r2, [sp, #0]
    6060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    6064:	4a06      	ldr	r2, [pc, #24]	; (6080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    6066:	9b01      	ldr	r3, [sp, #4]
    6068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    606c:	1c5a      	adds	r2, r3, #1
    606e:	4904      	ldr	r1, [pc, #16]	; (6080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    6070:	9b01      	ldr	r3, [sp, #4]
    6072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6076:	bf00      	nop
    6078:	b003      	add	sp, #12
    607a:	f85d fb04 	ldr.w	pc, [sp], #4
    607e:	bf00      	nop
    6080:	1fff8d4c 	.word	0x1fff8d4c
    6084:	1fff8d48 	.word	0x1fff8d48

00006088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    6088:	b500      	push	{lr}
    608a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    608c:	f7fa fd00 	bl	a90 <Sys_GetCoreID>
    6090:	4603      	mov	r3, r0
    6092:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    6094:	4a0d      	ldr	r2, [pc, #52]	; (60cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    6096:	9b01      	ldr	r3, [sp, #4]
    6098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    609c:	1e5a      	subs	r2, r3, #1
    609e:	490b      	ldr	r1, [pc, #44]	; (60cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    60a0:	9b01      	ldr	r3, [sp, #4]
    60a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    60a6:	4a0a      	ldr	r2, [pc, #40]	; (60d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    60a8:	9b01      	ldr	r3, [sp, #4]
    60aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60ae:	f003 0301 	and.w	r3, r3, #1
    60b2:	2b00      	cmp	r3, #0
    60b4:	d106      	bne.n	60c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    60b6:	4a05      	ldr	r2, [pc, #20]	; (60cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    60b8:	9b01      	ldr	r3, [sp, #4]
    60ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60be:	2b00      	cmp	r3, #0
    60c0:	d100      	bne.n	60c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    60c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    60c4:	bf00      	nop
    60c6:	b003      	add	sp, #12
    60c8:	f85d fb04 	ldr.w	pc, [sp], #4
    60cc:	1fff8d4c 	.word	0x1fff8d4c
    60d0:	1fff8d48 	.word	0x1fff8d48

000060d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    60d4:	b500      	push	{lr}
    60d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    60d8:	f7fa fcda 	bl	a90 <Sys_GetCoreID>
    60dc:	4603      	mov	r3, r0
    60de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    60e0:	4a10      	ldr	r2, [pc, #64]	; (6124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    60e2:	9b01      	ldr	r3, [sp, #4]
    60e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60e8:	2b00      	cmp	r3, #0
    60ea:	d10d      	bne.n	6108 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    60ec:	f7fa fc01 	bl	8f2 <Port_schm_read_msr>
    60f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    60f2:	9b00      	ldr	r3, [sp, #0]
    60f4:	f003 0301 	and.w	r3, r3, #1
    60f8:	2b00      	cmp	r3, #0
    60fa:	d100      	bne.n	60fe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    60fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    60fe:	490a      	ldr	r1, [pc, #40]	; (6128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    6100:	9b01      	ldr	r3, [sp, #4]
    6102:	9a00      	ldr	r2, [sp, #0]
    6104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    6108:	4a06      	ldr	r2, [pc, #24]	; (6124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    610a:	9b01      	ldr	r3, [sp, #4]
    610c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6110:	1c5a      	adds	r2, r3, #1
    6112:	4904      	ldr	r1, [pc, #16]	; (6124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    6114:	9b01      	ldr	r3, [sp, #4]
    6116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    611a:	bf00      	nop
    611c:	b003      	add	sp, #12
    611e:	f85d fb04 	ldr.w	pc, [sp], #4
    6122:	bf00      	nop
    6124:	1fff8d54 	.word	0x1fff8d54
    6128:	1fff8d50 	.word	0x1fff8d50

0000612c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    612c:	b500      	push	{lr}
    612e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6130:	f7fa fcae 	bl	a90 <Sys_GetCoreID>
    6134:	4603      	mov	r3, r0
    6136:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    6138:	4a0d      	ldr	r2, [pc, #52]	; (6170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    613a:	9b01      	ldr	r3, [sp, #4]
    613c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6140:	1e5a      	subs	r2, r3, #1
    6142:	490b      	ldr	r1, [pc, #44]	; (6170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6144:	9b01      	ldr	r3, [sp, #4]
    6146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    614a:	4a0a      	ldr	r2, [pc, #40]	; (6174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    614c:	9b01      	ldr	r3, [sp, #4]
    614e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6152:	f003 0301 	and.w	r3, r3, #1
    6156:	2b00      	cmp	r3, #0
    6158:	d106      	bne.n	6168 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    615a:	4a05      	ldr	r2, [pc, #20]	; (6170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    615c:	9b01      	ldr	r3, [sp, #4]
    615e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6162:	2b00      	cmp	r3, #0
    6164:	d100      	bne.n	6168 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6166:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6168:	bf00      	nop
    616a:	b003      	add	sp, #12
    616c:	f85d fb04 	ldr.w	pc, [sp], #4
    6170:	1fff8d54 	.word	0x1fff8d54
    6174:	1fff8d50 	.word	0x1fff8d50

00006178 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    6178:	b500      	push	{lr}
    617a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    617c:	f7fa fc88 	bl	a90 <Sys_GetCoreID>
    6180:	4603      	mov	r3, r0
    6182:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    6184:	4a10      	ldr	r2, [pc, #64]	; (61c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    6186:	9b01      	ldr	r3, [sp, #4]
    6188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    618c:	2b00      	cmp	r3, #0
    618e:	d10d      	bne.n	61ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6190:	f7fa fbaf 	bl	8f2 <Port_schm_read_msr>
    6194:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6196:	9b00      	ldr	r3, [sp, #0]
    6198:	f003 0301 	and.w	r3, r3, #1
    619c:	2b00      	cmp	r3, #0
    619e:	d100      	bne.n	61a2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    61a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    61a2:	490a      	ldr	r1, [pc, #40]	; (61cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    61a4:	9b01      	ldr	r3, [sp, #4]
    61a6:	9a00      	ldr	r2, [sp, #0]
    61a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    61ac:	4a06      	ldr	r2, [pc, #24]	; (61c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    61ae:	9b01      	ldr	r3, [sp, #4]
    61b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61b4:	1c5a      	adds	r2, r3, #1
    61b6:	4904      	ldr	r1, [pc, #16]	; (61c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    61b8:	9b01      	ldr	r3, [sp, #4]
    61ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    61be:	bf00      	nop
    61c0:	b003      	add	sp, #12
    61c2:	f85d fb04 	ldr.w	pc, [sp], #4
    61c6:	bf00      	nop
    61c8:	1fff8d5c 	.word	0x1fff8d5c
    61cc:	1fff8d58 	.word	0x1fff8d58

000061d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    61d0:	b500      	push	{lr}
    61d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    61d4:	f7fa fc5c 	bl	a90 <Sys_GetCoreID>
    61d8:	4603      	mov	r3, r0
    61da:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    61dc:	4a0d      	ldr	r2, [pc, #52]	; (6214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    61de:	9b01      	ldr	r3, [sp, #4]
    61e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61e4:	1e5a      	subs	r2, r3, #1
    61e6:	490b      	ldr	r1, [pc, #44]	; (6214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    61e8:	9b01      	ldr	r3, [sp, #4]
    61ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    61ee:	4a0a      	ldr	r2, [pc, #40]	; (6218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    61f0:	9b01      	ldr	r3, [sp, #4]
    61f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61f6:	f003 0301 	and.w	r3, r3, #1
    61fa:	2b00      	cmp	r3, #0
    61fc:	d106      	bne.n	620c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    61fe:	4a05      	ldr	r2, [pc, #20]	; (6214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    6200:	9b01      	ldr	r3, [sp, #4]
    6202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6206:	2b00      	cmp	r3, #0
    6208:	d100      	bne.n	620c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    620a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    620c:	bf00      	nop
    620e:	b003      	add	sp, #12
    6210:	f85d fb04 	ldr.w	pc, [sp], #4
    6214:	1fff8d5c 	.word	0x1fff8d5c
    6218:	1fff8d58 	.word	0x1fff8d58

0000621c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    621c:	b500      	push	{lr}
    621e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6220:	f7fa fc36 	bl	a90 <Sys_GetCoreID>
    6224:	4603      	mov	r3, r0
    6226:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    6228:	4a10      	ldr	r2, [pc, #64]	; (626c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    622a:	9b01      	ldr	r3, [sp, #4]
    622c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6230:	2b00      	cmp	r3, #0
    6232:	d10d      	bne.n	6250 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6234:	f7fa fb5d 	bl	8f2 <Port_schm_read_msr>
    6238:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    623a:	9b00      	ldr	r3, [sp, #0]
    623c:	f003 0301 	and.w	r3, r3, #1
    6240:	2b00      	cmp	r3, #0
    6242:	d100      	bne.n	6246 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6244:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    6246:	490a      	ldr	r1, [pc, #40]	; (6270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    6248:	9b01      	ldr	r3, [sp, #4]
    624a:	9a00      	ldr	r2, [sp, #0]
    624c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    6250:	4a06      	ldr	r2, [pc, #24]	; (626c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    6252:	9b01      	ldr	r3, [sp, #4]
    6254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6258:	1c5a      	adds	r2, r3, #1
    625a:	4904      	ldr	r1, [pc, #16]	; (626c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    625c:	9b01      	ldr	r3, [sp, #4]
    625e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6262:	bf00      	nop
    6264:	b003      	add	sp, #12
    6266:	f85d fb04 	ldr.w	pc, [sp], #4
    626a:	bf00      	nop
    626c:	1fff8d64 	.word	0x1fff8d64
    6270:	1fff8d60 	.word	0x1fff8d60

00006274 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    6274:	b500      	push	{lr}
    6276:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6278:	f7fa fc0a 	bl	a90 <Sys_GetCoreID>
    627c:	4603      	mov	r3, r0
    627e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    6280:	4a0d      	ldr	r2, [pc, #52]	; (62b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    6282:	9b01      	ldr	r3, [sp, #4]
    6284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6288:	1e5a      	subs	r2, r3, #1
    628a:	490b      	ldr	r1, [pc, #44]	; (62b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    628c:	9b01      	ldr	r3, [sp, #4]
    628e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    6292:	4a0a      	ldr	r2, [pc, #40]	; (62bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    6294:	9b01      	ldr	r3, [sp, #4]
    6296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    629a:	f003 0301 	and.w	r3, r3, #1
    629e:	2b00      	cmp	r3, #0
    62a0:	d106      	bne.n	62b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    62a2:	4a05      	ldr	r2, [pc, #20]	; (62b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    62a4:	9b01      	ldr	r3, [sp, #4]
    62a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62aa:	2b00      	cmp	r3, #0
    62ac:	d100      	bne.n	62b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    62ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    62b0:	bf00      	nop
    62b2:	b003      	add	sp, #12
    62b4:	f85d fb04 	ldr.w	pc, [sp], #4
    62b8:	1fff8d64 	.word	0x1fff8d64
    62bc:	1fff8d60 	.word	0x1fff8d60

000062c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    62c0:	b500      	push	{lr}
    62c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    62c4:	f7fa fbe4 	bl	a90 <Sys_GetCoreID>
    62c8:	4603      	mov	r3, r0
    62ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    62cc:	4a10      	ldr	r2, [pc, #64]	; (6310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    62ce:	9b01      	ldr	r3, [sp, #4]
    62d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62d4:	2b00      	cmp	r3, #0
    62d6:	d10d      	bne.n	62f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    62d8:	f7fa fb0b 	bl	8f2 <Port_schm_read_msr>
    62dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    62de:	9b00      	ldr	r3, [sp, #0]
    62e0:	f003 0301 	and.w	r3, r3, #1
    62e4:	2b00      	cmp	r3, #0
    62e6:	d100      	bne.n	62ea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    62e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    62ea:	490a      	ldr	r1, [pc, #40]	; (6314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    62ec:	9b01      	ldr	r3, [sp, #4]
    62ee:	9a00      	ldr	r2, [sp, #0]
    62f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    62f4:	4a06      	ldr	r2, [pc, #24]	; (6310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    62f6:	9b01      	ldr	r3, [sp, #4]
    62f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62fc:	1c5a      	adds	r2, r3, #1
    62fe:	4904      	ldr	r1, [pc, #16]	; (6310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    6300:	9b01      	ldr	r3, [sp, #4]
    6302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6306:	bf00      	nop
    6308:	b003      	add	sp, #12
    630a:	f85d fb04 	ldr.w	pc, [sp], #4
    630e:	bf00      	nop
    6310:	1fff8d6c 	.word	0x1fff8d6c
    6314:	1fff8d68 	.word	0x1fff8d68

00006318 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    6318:	b500      	push	{lr}
    631a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    631c:	f7fa fbb8 	bl	a90 <Sys_GetCoreID>
    6320:	4603      	mov	r3, r0
    6322:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    6324:	4a0d      	ldr	r2, [pc, #52]	; (635c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    6326:	9b01      	ldr	r3, [sp, #4]
    6328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    632c:	1e5a      	subs	r2, r3, #1
    632e:	490b      	ldr	r1, [pc, #44]	; (635c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    6330:	9b01      	ldr	r3, [sp, #4]
    6332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    6336:	4a0a      	ldr	r2, [pc, #40]	; (6360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    6338:	9b01      	ldr	r3, [sp, #4]
    633a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    633e:	f003 0301 	and.w	r3, r3, #1
    6342:	2b00      	cmp	r3, #0
    6344:	d106      	bne.n	6354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    6346:	4a05      	ldr	r2, [pc, #20]	; (635c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    6348:	9b01      	ldr	r3, [sp, #4]
    634a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    634e:	2b00      	cmp	r3, #0
    6350:	d100      	bne.n	6354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6352:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6354:	bf00      	nop
    6356:	b003      	add	sp, #12
    6358:	f85d fb04 	ldr.w	pc, [sp], #4
    635c:	1fff8d6c 	.word	0x1fff8d6c
    6360:	1fff8d68 	.word	0x1fff8d68

00006364 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    6364:	b500      	push	{lr}
    6366:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6368:	f7fa fb92 	bl	a90 <Sys_GetCoreID>
    636c:	4603      	mov	r3, r0
    636e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    6370:	4a10      	ldr	r2, [pc, #64]	; (63b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    6372:	9b01      	ldr	r3, [sp, #4]
    6374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6378:	2b00      	cmp	r3, #0
    637a:	d10d      	bne.n	6398 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    637c:	f7fa fab9 	bl	8f2 <Port_schm_read_msr>
    6380:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6382:	9b00      	ldr	r3, [sp, #0]
    6384:	f003 0301 	and.w	r3, r3, #1
    6388:	2b00      	cmp	r3, #0
    638a:	d100      	bne.n	638e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    638c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    638e:	490a      	ldr	r1, [pc, #40]	; (63b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    6390:	9b01      	ldr	r3, [sp, #4]
    6392:	9a00      	ldr	r2, [sp, #0]
    6394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    6398:	4a06      	ldr	r2, [pc, #24]	; (63b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    639a:	9b01      	ldr	r3, [sp, #4]
    639c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63a0:	1c5a      	adds	r2, r3, #1
    63a2:	4904      	ldr	r1, [pc, #16]	; (63b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    63a4:	9b01      	ldr	r3, [sp, #4]
    63a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    63aa:	bf00      	nop
    63ac:	b003      	add	sp, #12
    63ae:	f85d fb04 	ldr.w	pc, [sp], #4
    63b2:	bf00      	nop
    63b4:	1fff8d74 	.word	0x1fff8d74
    63b8:	1fff8d70 	.word	0x1fff8d70

000063bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    63bc:	b500      	push	{lr}
    63be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    63c0:	f7fa fb66 	bl	a90 <Sys_GetCoreID>
    63c4:	4603      	mov	r3, r0
    63c6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    63c8:	4a0d      	ldr	r2, [pc, #52]	; (6400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    63ca:	9b01      	ldr	r3, [sp, #4]
    63cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63d0:	1e5a      	subs	r2, r3, #1
    63d2:	490b      	ldr	r1, [pc, #44]	; (6400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    63d4:	9b01      	ldr	r3, [sp, #4]
    63d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    63da:	4a0a      	ldr	r2, [pc, #40]	; (6404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    63dc:	9b01      	ldr	r3, [sp, #4]
    63de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63e2:	f003 0301 	and.w	r3, r3, #1
    63e6:	2b00      	cmp	r3, #0
    63e8:	d106      	bne.n	63f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    63ea:	4a05      	ldr	r2, [pc, #20]	; (6400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    63ec:	9b01      	ldr	r3, [sp, #4]
    63ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63f2:	2b00      	cmp	r3, #0
    63f4:	d100      	bne.n	63f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    63f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    63f8:	bf00      	nop
    63fa:	b003      	add	sp, #12
    63fc:	f85d fb04 	ldr.w	pc, [sp], #4
    6400:	1fff8d74 	.word	0x1fff8d74
    6404:	1fff8d70 	.word	0x1fff8d70

00006408 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    6408:	b500      	push	{lr}
    640a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    640c:	f7fa fb40 	bl	a90 <Sys_GetCoreID>
    6410:	4603      	mov	r3, r0
    6412:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    6414:	4a10      	ldr	r2, [pc, #64]	; (6458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    6416:	9b01      	ldr	r3, [sp, #4]
    6418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    641c:	2b00      	cmp	r3, #0
    641e:	d10d      	bne.n	643c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6420:	f7fa fa67 	bl	8f2 <Port_schm_read_msr>
    6424:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6426:	9b00      	ldr	r3, [sp, #0]
    6428:	f003 0301 	and.w	r3, r3, #1
    642c:	2b00      	cmp	r3, #0
    642e:	d100      	bne.n	6432 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6430:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    6432:	490a      	ldr	r1, [pc, #40]	; (645c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    6434:	9b01      	ldr	r3, [sp, #4]
    6436:	9a00      	ldr	r2, [sp, #0]
    6438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    643c:	4a06      	ldr	r2, [pc, #24]	; (6458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    643e:	9b01      	ldr	r3, [sp, #4]
    6440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6444:	1c5a      	adds	r2, r3, #1
    6446:	4904      	ldr	r1, [pc, #16]	; (6458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    6448:	9b01      	ldr	r3, [sp, #4]
    644a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    644e:	bf00      	nop
    6450:	b003      	add	sp, #12
    6452:	f85d fb04 	ldr.w	pc, [sp], #4
    6456:	bf00      	nop
    6458:	1fff8d7c 	.word	0x1fff8d7c
    645c:	1fff8d78 	.word	0x1fff8d78

00006460 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    6460:	b500      	push	{lr}
    6462:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6464:	f7fa fb14 	bl	a90 <Sys_GetCoreID>
    6468:	4603      	mov	r3, r0
    646a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    646c:	4a0d      	ldr	r2, [pc, #52]	; (64a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    646e:	9b01      	ldr	r3, [sp, #4]
    6470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6474:	1e5a      	subs	r2, r3, #1
    6476:	490b      	ldr	r1, [pc, #44]	; (64a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    6478:	9b01      	ldr	r3, [sp, #4]
    647a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    647e:	4a0a      	ldr	r2, [pc, #40]	; (64a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    6480:	9b01      	ldr	r3, [sp, #4]
    6482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6486:	f003 0301 	and.w	r3, r3, #1
    648a:	2b00      	cmp	r3, #0
    648c:	d106      	bne.n	649c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    648e:	4a05      	ldr	r2, [pc, #20]	; (64a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    6490:	9b01      	ldr	r3, [sp, #4]
    6492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6496:	2b00      	cmp	r3, #0
    6498:	d100      	bne.n	649c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    649a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    649c:	bf00      	nop
    649e:	b003      	add	sp, #12
    64a0:	f85d fb04 	ldr.w	pc, [sp], #4
    64a4:	1fff8d7c 	.word	0x1fff8d7c
    64a8:	1fff8d78 	.word	0x1fff8d78

000064ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    64ac:	b500      	push	{lr}
    64ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    64b0:	f7fa faee 	bl	a90 <Sys_GetCoreID>
    64b4:	4603      	mov	r3, r0
    64b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    64b8:	4a10      	ldr	r2, [pc, #64]	; (64fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    64ba:	9b01      	ldr	r3, [sp, #4]
    64bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64c0:	2b00      	cmp	r3, #0
    64c2:	d10d      	bne.n	64e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    64c4:	f7fa fa15 	bl	8f2 <Port_schm_read_msr>
    64c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    64ca:	9b00      	ldr	r3, [sp, #0]
    64cc:	f003 0301 	and.w	r3, r3, #1
    64d0:	2b00      	cmp	r3, #0
    64d2:	d100      	bne.n	64d6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    64d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    64d6:	490a      	ldr	r1, [pc, #40]	; (6500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    64d8:	9b01      	ldr	r3, [sp, #4]
    64da:	9a00      	ldr	r2, [sp, #0]
    64dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    64e0:	4a06      	ldr	r2, [pc, #24]	; (64fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    64e2:	9b01      	ldr	r3, [sp, #4]
    64e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64e8:	1c5a      	adds	r2, r3, #1
    64ea:	4904      	ldr	r1, [pc, #16]	; (64fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    64ec:	9b01      	ldr	r3, [sp, #4]
    64ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    64f2:	bf00      	nop
    64f4:	b003      	add	sp, #12
    64f6:	f85d fb04 	ldr.w	pc, [sp], #4
    64fa:	bf00      	nop
    64fc:	1fff8d84 	.word	0x1fff8d84
    6500:	1fff8d80 	.word	0x1fff8d80

00006504 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    6504:	b500      	push	{lr}
    6506:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6508:	f7fa fac2 	bl	a90 <Sys_GetCoreID>
    650c:	4603      	mov	r3, r0
    650e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    6510:	4a0d      	ldr	r2, [pc, #52]	; (6548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    6512:	9b01      	ldr	r3, [sp, #4]
    6514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6518:	1e5a      	subs	r2, r3, #1
    651a:	490b      	ldr	r1, [pc, #44]	; (6548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    651c:	9b01      	ldr	r3, [sp, #4]
    651e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    6522:	4a0a      	ldr	r2, [pc, #40]	; (654c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    6524:	9b01      	ldr	r3, [sp, #4]
    6526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    652a:	f003 0301 	and.w	r3, r3, #1
    652e:	2b00      	cmp	r3, #0
    6530:	d106      	bne.n	6540 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    6532:	4a05      	ldr	r2, [pc, #20]	; (6548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    6534:	9b01      	ldr	r3, [sp, #4]
    6536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    653a:	2b00      	cmp	r3, #0
    653c:	d100      	bne.n	6540 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    653e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6540:	bf00      	nop
    6542:	b003      	add	sp, #12
    6544:	f85d fb04 	ldr.w	pc, [sp], #4
    6548:	1fff8d84 	.word	0x1fff8d84
    654c:	1fff8d80 	.word	0x1fff8d80

00006550 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    6550:	b500      	push	{lr}
    6552:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6554:	f7fa fa9c 	bl	a90 <Sys_GetCoreID>
    6558:	4603      	mov	r3, r0
    655a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    655c:	4a10      	ldr	r2, [pc, #64]	; (65a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    655e:	9b01      	ldr	r3, [sp, #4]
    6560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6564:	2b00      	cmp	r3, #0
    6566:	d10d      	bne.n	6584 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6568:	f7fa f9c3 	bl	8f2 <Port_schm_read_msr>
    656c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    656e:	9b00      	ldr	r3, [sp, #0]
    6570:	f003 0301 	and.w	r3, r3, #1
    6574:	2b00      	cmp	r3, #0
    6576:	d100      	bne.n	657a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6578:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    657a:	490a      	ldr	r1, [pc, #40]	; (65a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    657c:	9b01      	ldr	r3, [sp, #4]
    657e:	9a00      	ldr	r2, [sp, #0]
    6580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    6584:	4a06      	ldr	r2, [pc, #24]	; (65a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    6586:	9b01      	ldr	r3, [sp, #4]
    6588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    658c:	1c5a      	adds	r2, r3, #1
    658e:	4904      	ldr	r1, [pc, #16]	; (65a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    6590:	9b01      	ldr	r3, [sp, #4]
    6592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6596:	bf00      	nop
    6598:	b003      	add	sp, #12
    659a:	f85d fb04 	ldr.w	pc, [sp], #4
    659e:	bf00      	nop
    65a0:	1fff8d8c 	.word	0x1fff8d8c
    65a4:	1fff8d88 	.word	0x1fff8d88

000065a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    65a8:	b500      	push	{lr}
    65aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    65ac:	f7fa fa70 	bl	a90 <Sys_GetCoreID>
    65b0:	4603      	mov	r3, r0
    65b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    65b4:	4a0d      	ldr	r2, [pc, #52]	; (65ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    65b6:	9b01      	ldr	r3, [sp, #4]
    65b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65bc:	1e5a      	subs	r2, r3, #1
    65be:	490b      	ldr	r1, [pc, #44]	; (65ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    65c0:	9b01      	ldr	r3, [sp, #4]
    65c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    65c6:	4a0a      	ldr	r2, [pc, #40]	; (65f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    65c8:	9b01      	ldr	r3, [sp, #4]
    65ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65ce:	f003 0301 	and.w	r3, r3, #1
    65d2:	2b00      	cmp	r3, #0
    65d4:	d106      	bne.n	65e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    65d6:	4a05      	ldr	r2, [pc, #20]	; (65ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    65d8:	9b01      	ldr	r3, [sp, #4]
    65da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65de:	2b00      	cmp	r3, #0
    65e0:	d100      	bne.n	65e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    65e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    65e4:	bf00      	nop
    65e6:	b003      	add	sp, #12
    65e8:	f85d fb04 	ldr.w	pc, [sp], #4
    65ec:	1fff8d8c 	.word	0x1fff8d8c
    65f0:	1fff8d88 	.word	0x1fff8d88

000065f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    65f4:	b500      	push	{lr}
    65f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    65f8:	f7fa fa4a 	bl	a90 <Sys_GetCoreID>
    65fc:	4603      	mov	r3, r0
    65fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    6600:	4a10      	ldr	r2, [pc, #64]	; (6644 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    6602:	9b01      	ldr	r3, [sp, #4]
    6604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6608:	2b00      	cmp	r3, #0
    660a:	d10d      	bne.n	6628 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    660c:	f7fa f971 	bl	8f2 <Port_schm_read_msr>
    6610:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6612:	9b00      	ldr	r3, [sp, #0]
    6614:	f003 0301 	and.w	r3, r3, #1
    6618:	2b00      	cmp	r3, #0
    661a:	d100      	bne.n	661e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    661c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    661e:	490a      	ldr	r1, [pc, #40]	; (6648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    6620:	9b01      	ldr	r3, [sp, #4]
    6622:	9a00      	ldr	r2, [sp, #0]
    6624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    6628:	4a06      	ldr	r2, [pc, #24]	; (6644 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    662a:	9b01      	ldr	r3, [sp, #4]
    662c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6630:	1c5a      	adds	r2, r3, #1
    6632:	4904      	ldr	r1, [pc, #16]	; (6644 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    6634:	9b01      	ldr	r3, [sp, #4]
    6636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    663a:	bf00      	nop
    663c:	b003      	add	sp, #12
    663e:	f85d fb04 	ldr.w	pc, [sp], #4
    6642:	bf00      	nop
    6644:	1fff8d94 	.word	0x1fff8d94
    6648:	1fff8d90 	.word	0x1fff8d90

0000664c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    664c:	b500      	push	{lr}
    664e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6650:	f7fa fa1e 	bl	a90 <Sys_GetCoreID>
    6654:	4603      	mov	r3, r0
    6656:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    6658:	4a0d      	ldr	r2, [pc, #52]	; (6690 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    665a:	9b01      	ldr	r3, [sp, #4]
    665c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6660:	1e5a      	subs	r2, r3, #1
    6662:	490b      	ldr	r1, [pc, #44]	; (6690 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    6664:	9b01      	ldr	r3, [sp, #4]
    6666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    666a:	4a0a      	ldr	r2, [pc, #40]	; (6694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    666c:	9b01      	ldr	r3, [sp, #4]
    666e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6672:	f003 0301 	and.w	r3, r3, #1
    6676:	2b00      	cmp	r3, #0
    6678:	d106      	bne.n	6688 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    667a:	4a05      	ldr	r2, [pc, #20]	; (6690 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    667c:	9b01      	ldr	r3, [sp, #4]
    667e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6682:	2b00      	cmp	r3, #0
    6684:	d100      	bne.n	6688 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6686:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6688:	bf00      	nop
    668a:	b003      	add	sp, #12
    668c:	f85d fb04 	ldr.w	pc, [sp], #4
    6690:	1fff8d94 	.word	0x1fff8d94
    6694:	1fff8d90 	.word	0x1fff8d90

00006698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    6698:	b500      	push	{lr}
    669a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    669c:	f7fa f9f8 	bl	a90 <Sys_GetCoreID>
    66a0:	4603      	mov	r3, r0
    66a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    66a4:	4a10      	ldr	r2, [pc, #64]	; (66e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    66a6:	9b01      	ldr	r3, [sp, #4]
    66a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66ac:	2b00      	cmp	r3, #0
    66ae:	d10d      	bne.n	66cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    66b0:	f7fa f91f 	bl	8f2 <Port_schm_read_msr>
    66b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    66b6:	9b00      	ldr	r3, [sp, #0]
    66b8:	f003 0301 	and.w	r3, r3, #1
    66bc:	2b00      	cmp	r3, #0
    66be:	d100      	bne.n	66c2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    66c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    66c2:	490a      	ldr	r1, [pc, #40]	; (66ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    66c4:	9b01      	ldr	r3, [sp, #4]
    66c6:	9a00      	ldr	r2, [sp, #0]
    66c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    66cc:	4a06      	ldr	r2, [pc, #24]	; (66e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    66ce:	9b01      	ldr	r3, [sp, #4]
    66d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66d4:	1c5a      	adds	r2, r3, #1
    66d6:	4904      	ldr	r1, [pc, #16]	; (66e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    66d8:	9b01      	ldr	r3, [sp, #4]
    66da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    66de:	bf00      	nop
    66e0:	b003      	add	sp, #12
    66e2:	f85d fb04 	ldr.w	pc, [sp], #4
    66e6:	bf00      	nop
    66e8:	1fff8d9c 	.word	0x1fff8d9c
    66ec:	1fff8d98 	.word	0x1fff8d98

000066f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    66f0:	b500      	push	{lr}
    66f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    66f4:	f7fa f9cc 	bl	a90 <Sys_GetCoreID>
    66f8:	4603      	mov	r3, r0
    66fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    66fc:	4a0d      	ldr	r2, [pc, #52]	; (6734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    66fe:	9b01      	ldr	r3, [sp, #4]
    6700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6704:	1e5a      	subs	r2, r3, #1
    6706:	490b      	ldr	r1, [pc, #44]	; (6734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    6708:	9b01      	ldr	r3, [sp, #4]
    670a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    670e:	4a0a      	ldr	r2, [pc, #40]	; (6738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    6710:	9b01      	ldr	r3, [sp, #4]
    6712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6716:	f003 0301 	and.w	r3, r3, #1
    671a:	2b00      	cmp	r3, #0
    671c:	d106      	bne.n	672c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    671e:	4a05      	ldr	r2, [pc, #20]	; (6734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    6720:	9b01      	ldr	r3, [sp, #4]
    6722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6726:	2b00      	cmp	r3, #0
    6728:	d100      	bne.n	672c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    672a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    672c:	bf00      	nop
    672e:	b003      	add	sp, #12
    6730:	f85d fb04 	ldr.w	pc, [sp], #4
    6734:	1fff8d9c 	.word	0x1fff8d9c
    6738:	1fff8d98 	.word	0x1fff8d98

0000673c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    673c:	b500      	push	{lr}
    673e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6740:	f7fa f9a6 	bl	a90 <Sys_GetCoreID>
    6744:	4603      	mov	r3, r0
    6746:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    6748:	4a10      	ldr	r2, [pc, #64]	; (678c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    674a:	9b01      	ldr	r3, [sp, #4]
    674c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6750:	2b00      	cmp	r3, #0
    6752:	d10d      	bne.n	6770 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6754:	f7fa f8cd 	bl	8f2 <Port_schm_read_msr>
    6758:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    675a:	9b00      	ldr	r3, [sp, #0]
    675c:	f003 0301 	and.w	r3, r3, #1
    6760:	2b00      	cmp	r3, #0
    6762:	d100      	bne.n	6766 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6764:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    6766:	490a      	ldr	r1, [pc, #40]	; (6790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    6768:	9b01      	ldr	r3, [sp, #4]
    676a:	9a00      	ldr	r2, [sp, #0]
    676c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    6770:	4a06      	ldr	r2, [pc, #24]	; (678c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    6772:	9b01      	ldr	r3, [sp, #4]
    6774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6778:	1c5a      	adds	r2, r3, #1
    677a:	4904      	ldr	r1, [pc, #16]	; (678c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    677c:	9b01      	ldr	r3, [sp, #4]
    677e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6782:	bf00      	nop
    6784:	b003      	add	sp, #12
    6786:	f85d fb04 	ldr.w	pc, [sp], #4
    678a:	bf00      	nop
    678c:	1fff8da4 	.word	0x1fff8da4
    6790:	1fff8da0 	.word	0x1fff8da0

00006794 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    6794:	b500      	push	{lr}
    6796:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6798:	f7fa f97a 	bl	a90 <Sys_GetCoreID>
    679c:	4603      	mov	r3, r0
    679e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    67a0:	4a0d      	ldr	r2, [pc, #52]	; (67d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    67a2:	9b01      	ldr	r3, [sp, #4]
    67a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67a8:	1e5a      	subs	r2, r3, #1
    67aa:	490b      	ldr	r1, [pc, #44]	; (67d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    67ac:	9b01      	ldr	r3, [sp, #4]
    67ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    67b2:	4a0a      	ldr	r2, [pc, #40]	; (67dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    67b4:	9b01      	ldr	r3, [sp, #4]
    67b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67ba:	f003 0301 	and.w	r3, r3, #1
    67be:	2b00      	cmp	r3, #0
    67c0:	d106      	bne.n	67d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    67c2:	4a05      	ldr	r2, [pc, #20]	; (67d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    67c4:	9b01      	ldr	r3, [sp, #4]
    67c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67ca:	2b00      	cmp	r3, #0
    67cc:	d100      	bne.n	67d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    67ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    67d0:	bf00      	nop
    67d2:	b003      	add	sp, #12
    67d4:	f85d fb04 	ldr.w	pc, [sp], #4
    67d8:	1fff8da4 	.word	0x1fff8da4
    67dc:	1fff8da0 	.word	0x1fff8da0

000067e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    67e0:	b500      	push	{lr}
    67e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    67e4:	f7fa f954 	bl	a90 <Sys_GetCoreID>
    67e8:	4603      	mov	r3, r0
    67ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    67ec:	4a10      	ldr	r2, [pc, #64]	; (6830 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    67ee:	9b01      	ldr	r3, [sp, #4]
    67f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67f4:	2b00      	cmp	r3, #0
    67f6:	d10d      	bne.n	6814 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    67f8:	f7fa f87b 	bl	8f2 <Port_schm_read_msr>
    67fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    67fe:	9b00      	ldr	r3, [sp, #0]
    6800:	f003 0301 	and.w	r3, r3, #1
    6804:	2b00      	cmp	r3, #0
    6806:	d100      	bne.n	680a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6808:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    680a:	490a      	ldr	r1, [pc, #40]	; (6834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    680c:	9b01      	ldr	r3, [sp, #4]
    680e:	9a00      	ldr	r2, [sp, #0]
    6810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    6814:	4a06      	ldr	r2, [pc, #24]	; (6830 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    6816:	9b01      	ldr	r3, [sp, #4]
    6818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    681c:	1c5a      	adds	r2, r3, #1
    681e:	4904      	ldr	r1, [pc, #16]	; (6830 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    6820:	9b01      	ldr	r3, [sp, #4]
    6822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6826:	bf00      	nop
    6828:	b003      	add	sp, #12
    682a:	f85d fb04 	ldr.w	pc, [sp], #4
    682e:	bf00      	nop
    6830:	1fff8dac 	.word	0x1fff8dac
    6834:	1fff8da8 	.word	0x1fff8da8

00006838 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    6838:	b500      	push	{lr}
    683a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    683c:	f7fa f928 	bl	a90 <Sys_GetCoreID>
    6840:	4603      	mov	r3, r0
    6842:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    6844:	4a0d      	ldr	r2, [pc, #52]	; (687c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    6846:	9b01      	ldr	r3, [sp, #4]
    6848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    684c:	1e5a      	subs	r2, r3, #1
    684e:	490b      	ldr	r1, [pc, #44]	; (687c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    6850:	9b01      	ldr	r3, [sp, #4]
    6852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    6856:	4a0a      	ldr	r2, [pc, #40]	; (6880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    6858:	9b01      	ldr	r3, [sp, #4]
    685a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    685e:	f003 0301 	and.w	r3, r3, #1
    6862:	2b00      	cmp	r3, #0
    6864:	d106      	bne.n	6874 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    6866:	4a05      	ldr	r2, [pc, #20]	; (687c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    6868:	9b01      	ldr	r3, [sp, #4]
    686a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    686e:	2b00      	cmp	r3, #0
    6870:	d100      	bne.n	6874 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6872:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6874:	bf00      	nop
    6876:	b003      	add	sp, #12
    6878:	f85d fb04 	ldr.w	pc, [sp], #4
    687c:	1fff8dac 	.word	0x1fff8dac
    6880:	1fff8da8 	.word	0x1fff8da8

00006884 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    6884:	b500      	push	{lr}
    6886:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6888:	f7fa f902 	bl	a90 <Sys_GetCoreID>
    688c:	4603      	mov	r3, r0
    688e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    6890:	4a10      	ldr	r2, [pc, #64]	; (68d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    6892:	9b01      	ldr	r3, [sp, #4]
    6894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6898:	2b00      	cmp	r3, #0
    689a:	d10d      	bne.n	68b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    689c:	f7fa f829 	bl	8f2 <Port_schm_read_msr>
    68a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    68a2:	9b00      	ldr	r3, [sp, #0]
    68a4:	f003 0301 	and.w	r3, r3, #1
    68a8:	2b00      	cmp	r3, #0
    68aa:	d100      	bne.n	68ae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    68ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    68ae:	490a      	ldr	r1, [pc, #40]	; (68d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    68b0:	9b01      	ldr	r3, [sp, #4]
    68b2:	9a00      	ldr	r2, [sp, #0]
    68b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    68b8:	4a06      	ldr	r2, [pc, #24]	; (68d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    68ba:	9b01      	ldr	r3, [sp, #4]
    68bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68c0:	1c5a      	adds	r2, r3, #1
    68c2:	4904      	ldr	r1, [pc, #16]	; (68d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    68c4:	9b01      	ldr	r3, [sp, #4]
    68c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    68ca:	bf00      	nop
    68cc:	b003      	add	sp, #12
    68ce:	f85d fb04 	ldr.w	pc, [sp], #4
    68d2:	bf00      	nop
    68d4:	1fff8db4 	.word	0x1fff8db4
    68d8:	1fff8db0 	.word	0x1fff8db0

000068dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    68dc:	b500      	push	{lr}
    68de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    68e0:	f7fa f8d6 	bl	a90 <Sys_GetCoreID>
    68e4:	4603      	mov	r3, r0
    68e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    68e8:	4a0d      	ldr	r2, [pc, #52]	; (6920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    68ea:	9b01      	ldr	r3, [sp, #4]
    68ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68f0:	1e5a      	subs	r2, r3, #1
    68f2:	490b      	ldr	r1, [pc, #44]	; (6920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    68f4:	9b01      	ldr	r3, [sp, #4]
    68f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    68fa:	4a0a      	ldr	r2, [pc, #40]	; (6924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    68fc:	9b01      	ldr	r3, [sp, #4]
    68fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6902:	f003 0301 	and.w	r3, r3, #1
    6906:	2b00      	cmp	r3, #0
    6908:	d106      	bne.n	6918 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    690a:	4a05      	ldr	r2, [pc, #20]	; (6920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    690c:	9b01      	ldr	r3, [sp, #4]
    690e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6912:	2b00      	cmp	r3, #0
    6914:	d100      	bne.n	6918 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6916:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6918:	bf00      	nop
    691a:	b003      	add	sp, #12
    691c:	f85d fb04 	ldr.w	pc, [sp], #4
    6920:	1fff8db4 	.word	0x1fff8db4
    6924:	1fff8db0 	.word	0x1fff8db0

00006928 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    6928:	b500      	push	{lr}
    692a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    692c:	f7fa f8b0 	bl	a90 <Sys_GetCoreID>
    6930:	4603      	mov	r3, r0
    6932:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    6934:	4a10      	ldr	r2, [pc, #64]	; (6978 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    6936:	9b01      	ldr	r3, [sp, #4]
    6938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    693c:	2b00      	cmp	r3, #0
    693e:	d10d      	bne.n	695c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6940:	f7f9 ffd7 	bl	8f2 <Port_schm_read_msr>
    6944:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6946:	9b00      	ldr	r3, [sp, #0]
    6948:	f003 0301 	and.w	r3, r3, #1
    694c:	2b00      	cmp	r3, #0
    694e:	d100      	bne.n	6952 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6950:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    6952:	490a      	ldr	r1, [pc, #40]	; (697c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    6954:	9b01      	ldr	r3, [sp, #4]
    6956:	9a00      	ldr	r2, [sp, #0]
    6958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    695c:	4a06      	ldr	r2, [pc, #24]	; (6978 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    695e:	9b01      	ldr	r3, [sp, #4]
    6960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6964:	1c5a      	adds	r2, r3, #1
    6966:	4904      	ldr	r1, [pc, #16]	; (6978 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    6968:	9b01      	ldr	r3, [sp, #4]
    696a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    696e:	bf00      	nop
    6970:	b003      	add	sp, #12
    6972:	f85d fb04 	ldr.w	pc, [sp], #4
    6976:	bf00      	nop
    6978:	1fff8dbc 	.word	0x1fff8dbc
    697c:	1fff8db8 	.word	0x1fff8db8

00006980 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    6980:	b500      	push	{lr}
    6982:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6984:	f7fa f884 	bl	a90 <Sys_GetCoreID>
    6988:	4603      	mov	r3, r0
    698a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    698c:	4a0d      	ldr	r2, [pc, #52]	; (69c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    698e:	9b01      	ldr	r3, [sp, #4]
    6990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6994:	1e5a      	subs	r2, r3, #1
    6996:	490b      	ldr	r1, [pc, #44]	; (69c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    6998:	9b01      	ldr	r3, [sp, #4]
    699a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    699e:	4a0a      	ldr	r2, [pc, #40]	; (69c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    69a0:	9b01      	ldr	r3, [sp, #4]
    69a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69a6:	f003 0301 	and.w	r3, r3, #1
    69aa:	2b00      	cmp	r3, #0
    69ac:	d106      	bne.n	69bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    69ae:	4a05      	ldr	r2, [pc, #20]	; (69c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    69b0:	9b01      	ldr	r3, [sp, #4]
    69b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69b6:	2b00      	cmp	r3, #0
    69b8:	d100      	bne.n	69bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    69ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    69bc:	bf00      	nop
    69be:	b003      	add	sp, #12
    69c0:	f85d fb04 	ldr.w	pc, [sp], #4
    69c4:	1fff8dbc 	.word	0x1fff8dbc
    69c8:	1fff8db8 	.word	0x1fff8db8

000069cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    69cc:	b500      	push	{lr}
    69ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    69d0:	f7fa f85e 	bl	a90 <Sys_GetCoreID>
    69d4:	4603      	mov	r3, r0
    69d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    69d8:	4a10      	ldr	r2, [pc, #64]	; (6a1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    69da:	9b01      	ldr	r3, [sp, #4]
    69dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69e0:	2b00      	cmp	r3, #0
    69e2:	d10d      	bne.n	6a00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    69e4:	f7f9 ff85 	bl	8f2 <Port_schm_read_msr>
    69e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    69ea:	9b00      	ldr	r3, [sp, #0]
    69ec:	f003 0301 	and.w	r3, r3, #1
    69f0:	2b00      	cmp	r3, #0
    69f2:	d100      	bne.n	69f6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    69f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    69f6:	490a      	ldr	r1, [pc, #40]	; (6a20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    69f8:	9b01      	ldr	r3, [sp, #4]
    69fa:	9a00      	ldr	r2, [sp, #0]
    69fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    6a00:	4a06      	ldr	r2, [pc, #24]	; (6a1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    6a02:	9b01      	ldr	r3, [sp, #4]
    6a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a08:	1c5a      	adds	r2, r3, #1
    6a0a:	4904      	ldr	r1, [pc, #16]	; (6a1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    6a0c:	9b01      	ldr	r3, [sp, #4]
    6a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6a12:	bf00      	nop
    6a14:	b003      	add	sp, #12
    6a16:	f85d fb04 	ldr.w	pc, [sp], #4
    6a1a:	bf00      	nop
    6a1c:	1fff8dc4 	.word	0x1fff8dc4
    6a20:	1fff8dc0 	.word	0x1fff8dc0

00006a24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    6a24:	b500      	push	{lr}
    6a26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a28:	f7fa f832 	bl	a90 <Sys_GetCoreID>
    6a2c:	4603      	mov	r3, r0
    6a2e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    6a30:	4a0d      	ldr	r2, [pc, #52]	; (6a68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    6a32:	9b01      	ldr	r3, [sp, #4]
    6a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a38:	1e5a      	subs	r2, r3, #1
    6a3a:	490b      	ldr	r1, [pc, #44]	; (6a68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    6a3c:	9b01      	ldr	r3, [sp, #4]
    6a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    6a42:	4a0a      	ldr	r2, [pc, #40]	; (6a6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    6a44:	9b01      	ldr	r3, [sp, #4]
    6a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a4a:	f003 0301 	and.w	r3, r3, #1
    6a4e:	2b00      	cmp	r3, #0
    6a50:	d106      	bne.n	6a60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    6a52:	4a05      	ldr	r2, [pc, #20]	; (6a68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    6a54:	9b01      	ldr	r3, [sp, #4]
    6a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a5a:	2b00      	cmp	r3, #0
    6a5c:	d100      	bne.n	6a60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6a5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6a60:	bf00      	nop
    6a62:	b003      	add	sp, #12
    6a64:	f85d fb04 	ldr.w	pc, [sp], #4
    6a68:	1fff8dc4 	.word	0x1fff8dc4
    6a6c:	1fff8dc0 	.word	0x1fff8dc0

00006a70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    6a70:	b500      	push	{lr}
    6a72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a74:	f7fa f80c 	bl	a90 <Sys_GetCoreID>
    6a78:	4603      	mov	r3, r0
    6a7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    6a7c:	4a10      	ldr	r2, [pc, #64]	; (6ac0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    6a7e:	9b01      	ldr	r3, [sp, #4]
    6a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a84:	2b00      	cmp	r3, #0
    6a86:	d10d      	bne.n	6aa4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6a88:	f7f9 ff33 	bl	8f2 <Port_schm_read_msr>
    6a8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6a8e:	9b00      	ldr	r3, [sp, #0]
    6a90:	f003 0301 	and.w	r3, r3, #1
    6a94:	2b00      	cmp	r3, #0
    6a96:	d100      	bne.n	6a9a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6a98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    6a9a:	490a      	ldr	r1, [pc, #40]	; (6ac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    6a9c:	9b01      	ldr	r3, [sp, #4]
    6a9e:	9a00      	ldr	r2, [sp, #0]
    6aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    6aa4:	4a06      	ldr	r2, [pc, #24]	; (6ac0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    6aa6:	9b01      	ldr	r3, [sp, #4]
    6aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6aac:	1c5a      	adds	r2, r3, #1
    6aae:	4904      	ldr	r1, [pc, #16]	; (6ac0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    6ab0:	9b01      	ldr	r3, [sp, #4]
    6ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6ab6:	bf00      	nop
    6ab8:	b003      	add	sp, #12
    6aba:	f85d fb04 	ldr.w	pc, [sp], #4
    6abe:	bf00      	nop
    6ac0:	1fff8dcc 	.word	0x1fff8dcc
    6ac4:	1fff8dc8 	.word	0x1fff8dc8

00006ac8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    6ac8:	b500      	push	{lr}
    6aca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6acc:	f7f9 ffe0 	bl	a90 <Sys_GetCoreID>
    6ad0:	4603      	mov	r3, r0
    6ad2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    6ad4:	4a0d      	ldr	r2, [pc, #52]	; (6b0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    6ad6:	9b01      	ldr	r3, [sp, #4]
    6ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6adc:	1e5a      	subs	r2, r3, #1
    6ade:	490b      	ldr	r1, [pc, #44]	; (6b0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    6ae0:	9b01      	ldr	r3, [sp, #4]
    6ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    6ae6:	4a0a      	ldr	r2, [pc, #40]	; (6b10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    6ae8:	9b01      	ldr	r3, [sp, #4]
    6aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6aee:	f003 0301 	and.w	r3, r3, #1
    6af2:	2b00      	cmp	r3, #0
    6af4:	d106      	bne.n	6b04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    6af6:	4a05      	ldr	r2, [pc, #20]	; (6b0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    6af8:	9b01      	ldr	r3, [sp, #4]
    6afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6afe:	2b00      	cmp	r3, #0
    6b00:	d100      	bne.n	6b04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6b02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6b04:	bf00      	nop
    6b06:	b003      	add	sp, #12
    6b08:	f85d fb04 	ldr.w	pc, [sp], #4
    6b0c:	1fff8dcc 	.word	0x1fff8dcc
    6b10:	1fff8dc8 	.word	0x1fff8dc8

00006b14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    6b14:	b500      	push	{lr}
    6b16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b18:	f7f9 ffba 	bl	a90 <Sys_GetCoreID>
    6b1c:	4603      	mov	r3, r0
    6b1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    6b20:	4a10      	ldr	r2, [pc, #64]	; (6b64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    6b22:	9b01      	ldr	r3, [sp, #4]
    6b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b28:	2b00      	cmp	r3, #0
    6b2a:	d10d      	bne.n	6b48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6b2c:	f7f9 fee1 	bl	8f2 <Port_schm_read_msr>
    6b30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6b32:	9b00      	ldr	r3, [sp, #0]
    6b34:	f003 0301 	and.w	r3, r3, #1
    6b38:	2b00      	cmp	r3, #0
    6b3a:	d100      	bne.n	6b3e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6b3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    6b3e:	490a      	ldr	r1, [pc, #40]	; (6b68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    6b40:	9b01      	ldr	r3, [sp, #4]
    6b42:	9a00      	ldr	r2, [sp, #0]
    6b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    6b48:	4a06      	ldr	r2, [pc, #24]	; (6b64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    6b4a:	9b01      	ldr	r3, [sp, #4]
    6b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b50:	1c5a      	adds	r2, r3, #1
    6b52:	4904      	ldr	r1, [pc, #16]	; (6b64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    6b54:	9b01      	ldr	r3, [sp, #4]
    6b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6b5a:	bf00      	nop
    6b5c:	b003      	add	sp, #12
    6b5e:	f85d fb04 	ldr.w	pc, [sp], #4
    6b62:	bf00      	nop
    6b64:	1fff8dd4 	.word	0x1fff8dd4
    6b68:	1fff8dd0 	.word	0x1fff8dd0

00006b6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    6b6c:	b500      	push	{lr}
    6b6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b70:	f7f9 ff8e 	bl	a90 <Sys_GetCoreID>
    6b74:	4603      	mov	r3, r0
    6b76:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    6b78:	4a0d      	ldr	r2, [pc, #52]	; (6bb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    6b7a:	9b01      	ldr	r3, [sp, #4]
    6b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b80:	1e5a      	subs	r2, r3, #1
    6b82:	490b      	ldr	r1, [pc, #44]	; (6bb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    6b84:	9b01      	ldr	r3, [sp, #4]
    6b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    6b8a:	4a0a      	ldr	r2, [pc, #40]	; (6bb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    6b8c:	9b01      	ldr	r3, [sp, #4]
    6b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b92:	f003 0301 	and.w	r3, r3, #1
    6b96:	2b00      	cmp	r3, #0
    6b98:	d106      	bne.n	6ba8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    6b9a:	4a05      	ldr	r2, [pc, #20]	; (6bb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    6b9c:	9b01      	ldr	r3, [sp, #4]
    6b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ba2:	2b00      	cmp	r3, #0
    6ba4:	d100      	bne.n	6ba8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6ba6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6ba8:	bf00      	nop
    6baa:	b003      	add	sp, #12
    6bac:	f85d fb04 	ldr.w	pc, [sp], #4
    6bb0:	1fff8dd4 	.word	0x1fff8dd4
    6bb4:	1fff8dd0 	.word	0x1fff8dd0

00006bb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    6bb8:	b500      	push	{lr}
    6bba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6bbc:	f7f9 ff68 	bl	a90 <Sys_GetCoreID>
    6bc0:	4603      	mov	r3, r0
    6bc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    6bc4:	4a10      	ldr	r2, [pc, #64]	; (6c08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    6bc6:	9b01      	ldr	r3, [sp, #4]
    6bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bcc:	2b00      	cmp	r3, #0
    6bce:	d10d      	bne.n	6bec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6bd0:	f7f9 fe8f 	bl	8f2 <Port_schm_read_msr>
    6bd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6bd6:	9b00      	ldr	r3, [sp, #0]
    6bd8:	f003 0301 	and.w	r3, r3, #1
    6bdc:	2b00      	cmp	r3, #0
    6bde:	d100      	bne.n	6be2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6be0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    6be2:	490a      	ldr	r1, [pc, #40]	; (6c0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    6be4:	9b01      	ldr	r3, [sp, #4]
    6be6:	9a00      	ldr	r2, [sp, #0]
    6be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    6bec:	4a06      	ldr	r2, [pc, #24]	; (6c08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    6bee:	9b01      	ldr	r3, [sp, #4]
    6bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bf4:	1c5a      	adds	r2, r3, #1
    6bf6:	4904      	ldr	r1, [pc, #16]	; (6c08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    6bf8:	9b01      	ldr	r3, [sp, #4]
    6bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6bfe:	bf00      	nop
    6c00:	b003      	add	sp, #12
    6c02:	f85d fb04 	ldr.w	pc, [sp], #4
    6c06:	bf00      	nop
    6c08:	1fff8ddc 	.word	0x1fff8ddc
    6c0c:	1fff8dd8 	.word	0x1fff8dd8

00006c10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    6c10:	b500      	push	{lr}
    6c12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c14:	f7f9 ff3c 	bl	a90 <Sys_GetCoreID>
    6c18:	4603      	mov	r3, r0
    6c1a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    6c1c:	4a0d      	ldr	r2, [pc, #52]	; (6c54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    6c1e:	9b01      	ldr	r3, [sp, #4]
    6c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c24:	1e5a      	subs	r2, r3, #1
    6c26:	490b      	ldr	r1, [pc, #44]	; (6c54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    6c28:	9b01      	ldr	r3, [sp, #4]
    6c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    6c2e:	4a0a      	ldr	r2, [pc, #40]	; (6c58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    6c30:	9b01      	ldr	r3, [sp, #4]
    6c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c36:	f003 0301 	and.w	r3, r3, #1
    6c3a:	2b00      	cmp	r3, #0
    6c3c:	d106      	bne.n	6c4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    6c3e:	4a05      	ldr	r2, [pc, #20]	; (6c54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    6c40:	9b01      	ldr	r3, [sp, #4]
    6c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c46:	2b00      	cmp	r3, #0
    6c48:	d100      	bne.n	6c4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6c4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6c4c:	bf00      	nop
    6c4e:	b003      	add	sp, #12
    6c50:	f85d fb04 	ldr.w	pc, [sp], #4
    6c54:	1fff8ddc 	.word	0x1fff8ddc
    6c58:	1fff8dd8 	.word	0x1fff8dd8

00006c5c <Clock_Ip_au8DividerCallbackIndex>:
    6c5c:	0e0d0c00 06030201 0a070409 000b0805     ................

00006c6c <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00006c7c <Clock_Ip_au8XoscCallbackIndex>:
    6c7c:	00000100 00000000 00000000 00000000     ................

00006c8c <Clock_Ip_au8IrcoscCallbackIndex>:
    6c8c:	03020100 00000004 00000000 00000000     ................

00006c9c <Clock_Ip_au8GateCallbackIndex>:
    6c9c:	06010200 01040301 00000500 00000000     ................

00006cac <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00006cbc <Clock_Ip_au8PllCallbackIndex>:
    6cbc:	00000100 00000000 00000000 00000000     ................

00006ccc <Clock_Ip_au8SelectorCallbackIndex>:
    6ccc:	0a090800 03020109 07060504 00000000     ................

00006cdc <Clock_Ip_au8PcfsCallbackIndex>:
	...

00006cec <Clock_Ip_au8CmuCallbackIndex>:
	...

00006cfc <Clock_Ip_au8ClockFeatures>:
	...
    6d0c:	01000000 00000000 00000000 00000002     ................
    6d1c:	00000000 00000300 00000000 00040000     ................
    6d2c:	00000000 05000000 00000000 00000000     ................
    6d3c:	00000006 00000000 00000100 00000000     ................
    6d4c:	00010000 00000000 04000000 00000000     ................
    6d5c:	00000000 00000005 00000001 00000401     ................
    6d6c:	00000200 00050100 00030000 04020000     ................
    6d7c:	04000000 02000000 00000005 00000005     ................
    6d8c:	00000403 00000600 00050300 00070000     ................
    6d9c:	05000000 00000000 00000000 00000006     ................
	...
    6ddc:	00050000 00000000 06000000 00000100     ................
    6dec:	00000000 00030007 00000000 00000000     ................
    6dfc:	00000000 00060000 00000000 07000000     ................
    6e0c:	00000100 00000000 00030008 00000000     ................
	...
    6e24:	00090000 00000000 0a000000 00000100     ................
    6e34:	00000000 0003000b 00000000 00000000     ................
    6e44:	00000000 000c0000 00000000 0d000000     ................
    6e54:	00000100 00000000 0003000e 00000000     ................
    6e64:	00000800 00000000 00090000 00000000     ................
    6e74:	0a000000 00000000 00000000 0000000b     ................
    6e84:	00000000 00000b01 00000000 000b0200     ................
    6e94:	00000000 0b030000 00000000 00000000     ................
	...
    6eac:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    6ebc:	01000000 00000000 00000000 00000007     ................
    6ecc:	00007300 00000700 00320000 00090000     .s........2.....
    6edc:	02000000 07000000 00000000 00000021     ............!...
    6eec:	00000009 00000400 00000900 00030000     ................
    6efc:	00070000 61000000 07000000 00000000     .......a........
    6f0c:	00000024 00000007 00002500 00000700     $........%......
    6f1c:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    6f2c:	00000000 00000020 38000004 00003800     .... ......8.8..
    6f3c:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    6f4c:	04000000 00260000 00000026 66000004     ......&.&......f
    6f5c:	00006600 00000400 00370037 00040000     .f......7.7.....
    6f6c:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    6f7c:	2e000004 00002e00 00000200 00404040     ............@@@.
    6f8c:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    6f9c:	0000006b 6c000004 00006c00 00000900     k......l.l......
    6fac:	00010000 00090000 00000000 07000000     ................
    6fbc:	00000000 00000036 00000007 00003100     ....6........1..
    6fcc:	00000700 00490000 00070000 4a000000     ......I........J
    6fdc:	07000000 00000000 0000004b 00000007     ........K.......
    6fec:	00004c00 00000700 004d0000 00070000     .L........M.....
    6ffc:	3d000000 03000000 00000000 00000000     ...=............

0000700c <Clock_Ip_au16SelectorEntryHardwareValue>:
    700c:	01010a03 01010001 04040002 02000603     ................
    701c:	00010810 02020100 00000000 00000007     ................
    702c:	00000009 00000000 00000c0e 00000000     ................
	...

00007064 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    7064:	00020000 00000300 00000601 00000000     ................
	...

00007094 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    7094:	00000700 00000000 02020000 01010303     ................
    70a4:	03020606 00000000 00000000 00000000     ................
	...

000070c4 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    70c4:	00000001 00000000 02020000 01010303     ................
    70d4:	03020606 00000000 00000000 00000000     ................
	...

000070f4 <Clock_Ip_au8DividerValueHardwareValue>:
    70f4:	00020100 00000003 00000004 00000000     ................
    7104:	00000005 00000000 00000000 00000000     ................
    7114:	00000006 00000000 00000000 00000000     ................
	...
    7134:	00000007                                ....

00007138 <Clock_Ip_apxScgPeriphAsyncDivs>:
    7138:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00007148 <Clock_Ip_aeSourceTypeClockName>:
    7148:	00000000 00000001 00000001 00000001     ................
    7158:	00000001 00000001 00000001 00000001     ................
    7168:	00000002 00000003 00000001 00000001     ................
    7178:	00000001 00000001 00000002 00000002     ................
    7188:	00000003 00000003 00000001 00000001     ................
    7198:	00000004 00000004 00000004 00000004     ................
	...

00007204 <Clock_Ip_aeHwPllName>:
    7204:	00000009                                ....

00007208 <Clock_Ip_aeHwDfsName>:
    7208:	00000057                                W...

0000720c <Clock_Ip_axDividerCallbacks>:
    720c:	00001ba5 00001baf 00001bc9 00001be3     ................
    721c:	00001bfd 00001c17 00001c31 00001c4b     ........1...K...
    722c:	00001c65 00001c7f 00001c99 00001cb3     e...............
    723c:	00001ccd 00001ce7 00001d01              ............

00007248 <Clock_Ip_axDividerTriggerCallbacks>:
    7248:	00002075 00002075                       u ..u ..

00007250 <Clock_Ip_axExtOscCallbacks>:
    7250:	00002081 00002081 00002081 0000208b     . ... ... ... ..
    7260:	00002081 00002095 000020af 000020c9     . ... ... ... ..
    7270:	0000214d 00002161                       M!..a!..

00007278 <Clock_Ip_axFracDivCallbacks>:
    7278:	00002321 00002321 0000232b              !#..!#..+#..

00007284 <Clock_Ip_axGateCallbacks>:
    7284:	00002345 0000234f 0000244f 00002469     E#..O#..O$..i$..
    7294:	000023ff 00002419 000023af 000023c9     .#...$...#...#..
    72a4:	0000235f 00002379 0000249f 000024b9     _#..y#...$...$..
    72b4:	000024ef 00002509                       .$...%..

000072bc <Clock_Ip_axIntOscCallbacks>:
    72bc:	000026b5 000026b5 000026bf 000026c9     .&...&...&...&..
    72cc:	000026e3 000026fd 00002711 0000272b     .&...&...'..+'..
    72dc:	00002745 00002759 00002773 0000278d     E'..Y'..s'...'..
    72ec:	00002835 0000284f 00002869              5(..O(..i(..

000072f8 <Clock_Ip_axCmuCallbacks>:
    72f8:	00002e05 00002e0f 00002e1b 00002e05     ................

00007308 <Clock_Ip_axPllCallbacks>:
    7308:	00002e25 00002e25 00002e2f 00002e25     %...%.../...%...
    7318:	00002e3b 00002e45 00002e5f 00002e79     ;...E..._...y...
    7328:	00002f1d 00002f09                       ./.../..

00007330 <Clock_Ip_axPcfsCallbacks>:
    7330:	00003079                                y0..

00007334 <Clock_Ip_axSelectorCallbacks>:
    7334:	00003085 00003085 0000308f 000030a9     .0...0...0...0..
    7344:	00003085 000030c3 000030dd 000030f7     .0...0...0...0..
    7354:	00003111 0000312b 00003145 0000315f     .1..+1..E1.._1..
    7364:	00003179 00003193 000031ad 000031c7     y1...1...1...1..
    7374:	000031e1 000031fb 00003215 0000322f     .1...1...2../2..
    7384:	00003249 00003263                       I2..c2..

0000738c <ClockSource>:
    738c:	00000000 00000008 00000002 00000005     ................
	...
    73a4:	00000009                                ....

000073a8 <ResetReasonArray>:
    73a8:	00000000 00000001 00000002 00000003     ................
    73b8:	00000004 00000005 00000006 00000007     ................
    73c8:	00000008 00000009 0000000a 0000000b     ................
    73d8:	0000000c 0000000d 0000000e              ............

000073e4 <Port_au32PortCiPortBaseAddr>:
    73e4:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    73f4:	4004d000                                ...@

000073f8 <Port_au32PortCiGpioBaseAddr>:
    73f8:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    7408:	400ff100                                ...@

0000740c <Mcu_aClockConfigPB>:
	...
    7414:	1c010101 04000012 01000029 00000005     ........).......
    7424:	00000001 00000000 00000057 00000000     ........W.......
    7434:	00000000 00000008 007a1200 00000001     ..........z.....
    7444:	00000001 00000000 00000009 00000001     ................
    7454:	00000008 00000100 00000000 00000020     ............ ...
	...
    7474:	00000019 00000009 0000001a 00000002     ................
    7484:	0000001b 00000005 0000002a 00000005     ........*.......
    7494:	00000028 0000000e 00000029 00000001     (.......).......
    74a4:	00000056 0000001c 00000032 0000002a     V.......2...*...
    74b4:	0000002b 00000014 0000002c 00000014     +.......,.......
    74c4:	0000002d 00000014 0000002e 00000014     -...............
    74d4:	0000003f 00000000 00000040 00000000     ?.......@.......
    74e4:	00000041 00000000 00000042 00000000     A.......B.......
    74f4:	00000031 00000000 00000045 00000000     1.......E.......
    7504:	00000046 00000000 00000047 00000000     F.......G.......
    7514:	00000044 00000000 00000030 00000000     D.......0.......
    7524:	0000003d 00000000 00000043 00000000     =.......C.......
    7534:	00000049 00000000 0000004a 00000000     I.......J.......
    7544:	0000004b 00000000 00000048 00000000     K.......H.......
    7554:	0000000c 00000001 00000000 0000000d     ................
    7564:	00000002 00000000 0000000e 00000001     ................
    7574:	00000000 0000000f 00000001 00000000     ................
    7584:	00000010 00000002 00000000 00000011     ................
    7594:	00000004 00000000 0000001d 00000002     ................
    75a4:	00000000 0000001e 00000008 00000000     ................
    75b4:	0000001f 00000001 00000000 00000021     ............!...
    75c4:	00000002 00000000 00000022 00000002     ........".......
    75d4:	00000000 00000023 00000001 00000000     ....#...........
    75e4:	00000025 00000003 00000000 00000026     %...........&...
    75f4:	00000004 00000000 00000027 00000002     ........'.......
    7604:	00000000 00000032 00000001 00000000     ....2...........
    7614:	00000048 00000001 00000001 00000056     H...........V...
    7624:	00000001 00000001 00000057 00000000     ........W.......
    7634:	00000000 00000057 00000000 00000000     ....W...........
    7644:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    7660:	00000014 00007d00 00000015 00007d00     .....}.......}..
    7670:	00000016 00007d00 00000017 00008000     .....}..........
    7680:	00000012 00000001 00000013 00000001     ................
    7690:	00000030 00000000 00000031 00000000     0.......1.......
    76a0:	00000032 00000000 00000033 00000000     2.......3.......
    76b0:	00000034 00000000 00000035 00000001     4.......5.......
    76c0:	00000036 00000000 00000037 00000001     6.......7.......
    76d0:	00000038 00000001 00000039 00000000     8.......9.......
    76e0:	0000003a 00000000 0000003b 00000000     :.......;.......
    76f0:	0000003c 00000000 0000003d 00000000     <.......=.......
    7700:	0000003e 00000000 0000003f 00000000     >.......?.......
    7710:	00000040 00000000 00000041 00000000     @.......A.......
    7720:	00000042 00000000 00000043 00000000     B.......C.......
    7730:	00000044 00000000 00000045 00000000     D.......E.......
    7740:	00000046 00000000 00000047 00000000     F.......G.......
    7750:	00000048 00000000 00000049 00000000     H.......I.......
    7760:	0000004a 00000000 0000004b 00000000     J.......K.......
    7770:	0000004c 00000001 0000004d 00000001     L.......M.......
    7780:	0000004e 00000000 0000004f 00000000     N.......O.......
    7790:	00000050 00000001 00000051 00000001     P.......Q.......
    77a0:	00000052 00000001 00000053 00000001     R.......S.......
    77b0:	00000054 00000001 00000055 00000000     T.......U.......
    77c0:	00000056 00000001 00000057 00000000     V.......W.......
    77d0:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00007804 <Mcu_Config>:
    7804:	0000005a 00000000 00000001 00000001     Z...............
    7814:	00007958 0000740c 00007964              Xy...t..dy..

00007820 <OsIf_xPredefinedConfig>:
    7820:	00000000 03d09000                       ........

00007828 <OsIf_apxPredefinedConfig>:
    7828:	00007820                                 x..

0000782c <g_pin_mux_InitConfigArr>:
    782c:	4004c000 400ff0c0 00000000 00000002     ...@...@........
    783c:	00000001 00000002 00000000 00000000     ................
	...

00007854 <au8Port_PartitionList>:
    7854:	00000001                                ....

00007858 <au32Port_PinToPartitionMap>:
    7858:	00000001                                ....

0000785c <Port_au16NoUnUsedPadsArrayDefault>:
    785c:	00010000 00030002 00070006 00090008     ................
    786c:	000c000b 000e000d 0010000f 00200011     .............. .
    787c:	00220021 00240023 00260025 00280027     !.".#.$.%.&.'.(.
    788c:	002a0029 002c002b 002e002d 0030002f     ).*.+.,.-.../.0.
    789c:	00400031 00420041 00460043 00480047     1.@.A.B.C.F.G.H.
    78ac:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    78bc:	00610051 00630062 00650064 00670066     Q.a.b.c.d.e.f.g.
    78cc:	00690068 006b006a 006d006c 006f006e     h.i.j.k.l.m.n.o.
    78dc:	00710070 00810080 00830082 00850084     p.q.............
    78ec:	00870086 00890088 008b008a 008d008c     ................
    78fc:	008f008e 00000090                       ........

00007904 <Port_UnUsedPin>:
    7904:	00000100 00000001 00000000              ............

00007910 <Port_aPinConfigDefault>:
    7910:	00000060 00000100 00000000 00000002     `...............
    7920:	00010001                                ....

00007924 <Port_Config>:
    7924:	00530001 0000785c 00007904 00007910     ..S.\x...y...y..
	...
    793c:	00007858 00007854 0000782c              Xx..Tx..,x..

00007948 <Power_Ip_RCM_ConfigPB>:
	...

00007950 <Power_Ip_PMC_ConfigPB>:
    7950:	00000000                                ....

00007954 <Power_Ip_SMC_ConfigPB>:
    7954:	00000000                                ....

00007958 <Power_Ip_aModeConfigPB>:
	...

00007964 <Power_Ip_HwIPsConfigPB>:
    7964:	00007948 00007950 00007954              Hy..Py..Ty..

00007970 <__INIT_TABLE>:
    7970:	00000002 	.word	0x00000002
    7974:	1fff8b10 	.word	0x1fff8b10
    7978:	00007998 	.word	0x00007998
    797c:	000079ac 	.word	0x000079ac
    7980:	1fff8800 	.word	0x1fff8800
    7984:	00000000 	.word	0x00000000
    7988:	00000310 	.word	0x00000310

0000798c <__ZERO_TABLE>:
    798c:	00000001 	.word	0x00000001
    7990:	1fff8b30 	.word	0x1fff8b30
    7994:	1fff8df0 	.word	0x1fff8df0
