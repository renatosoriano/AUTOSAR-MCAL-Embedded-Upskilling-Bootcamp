Mcu_Ipw_SleepOnExit (Mcu_SleepOnExitType SleepOnExit)
{
  <bb 2> :
  if (SleepOnExit_2(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Power_Ip_DisableSleepOnExit ();
  goto <bb 5>; [INV]

  <bb 4> :
  Power_Ip_EnableSleepOnExit ();

  <bb 5> :
  return;

}


Mcu_Ipw_GetResetRawValue ()
{
  Mcu_RawResetType D.5905;
  Mcu_RawResetType _3;

  <bb 2> :
  _3 = Power_Ip_GetResetRawValue ();

  <bb 3> :
<L0>:
  return _3;

}


Mcu_Ipw_GetResetReason ()
{
  Mcu_ResetType D.5903;
  Mcu_ResetType _3;

  <bb 2> :
  _3 = Power_Ip_GetResetReason ();

  <bb 3> :
<L0>:
  return _3;

}


Mcu_Ipw_SetMode (const struct Mcu_ModeConfigType * ModeConfigPtr)
{
  <bb 2> :
  Power_Ip_SetMode (ModeConfigPtr_2(D));
  return;

}


Mcu_Ipw_GetPllStatus ()
{
  Mcu_PllStatusType PllStatus;
  Mcu_PllStatusType D.5901;
  <unnamed type> _1;
  Mcu_PllStatusType _8;

  <bb 2> :
  _1 = Clock_Ip_GetPllStatus ();
  switch (_1) <default: <L2> [INV], case 0: <L0> [INV], case 1: <L1> [INV]>

  <bb 3> :
<L0>:
  PllStatus_6 = 0;
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  PllStatus_5 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:
  PllStatus_7 = 2;

  <bb 6> :
  # PllStatus_2 = PHI <PllStatus_6(3), PllStatus_5(4), PllStatus_7(5)>
  _8 = PllStatus_2;

  <bb 7> :
<L5>:
  return _8;

}


Mcu_Ipw_DistributePllClock ()
{
  <bb 2> :
  Clock_Ip_DistributePll ();
  return;

}


Mcu_Ipw_InitClock (const struct Mcu_ClockConfigType * ClockConfigPtr)
{
  <bb 2> :
  Clock_Ip_InitClock (ClockConfigPtr_2(D));
  return;

}


Mcu_Ipw_Init (const struct Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
  <bb 2> :
  Power_Ip_Init (HwIPsConfigPtr_2(D));
  return;

}


